<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="a2bb4e5bcae5441af519dafa4dbfbb031b95886b" translate="yes" xml:space="preserve">
          <source>The following example initializes the control with a sync validator.</source>
          <target state="translated">下面的例子是用同步验证器初始化控件。</target>
        </trans-unit>
        <trans-unit id="3b75e86861a97b045bc93ed007c41a8143776dfe" translate="yes" xml:space="preserve">
          <source>The following example of non-tree-shakable providers in Angular configures a service provider for the injector of an NgModule.</source>
          <target state="translated">下面是Angular中的非树状可动摇提供者的例子,它为NgModule的注入器配置了一个服务提供者。</target>
        </trans-unit>
        <trans-unit id="ec9e15e6d86e0c21d5745d7731be95a7ec60e570" translate="yes" xml:space="preserve">
          <source>The following example of the long form is from the JSON schema for the schematic that the CLI uses to &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;generate applications&lt;/a&gt;. It defines the prompt that allows users to choose which style preprocessor they want to use for the application being created. By using the long form, the schematic can provide more explicit formatting of the menu choices.</source>
          <target state="translated">下面的长格式示例来自CLI用来&lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;生成应用程序&lt;/a&gt;的逻辑示意图的JSON模式。它定义了提示，允许用户选择要用于正在创建的应用程序的样式预处理器。通过使用长格式，原理图可以提供菜单选项的更明确的格式。</target>
        </trans-unit>
        <trans-unit id="4f37dc68477f1bcc7af7bb9d791a86fea3c7c903" translate="yes" xml:space="preserve">
          <source>The following example puts &lt;code&gt;MinimalLogger&lt;/code&gt; to use in a simplified version of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">以下示例将 &lt;code&gt;MinimalLogger&lt;/code&gt; 用于简化版的 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="6e9fea711c729f49958474fdb5f92f9b366656d5" translate="yes" xml:space="preserve">
          <source>The following example queries for inner elements and animates them individually using &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">以下示例查询内部元素，并使用 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 分别对其进行动画处理。</target>
        </trans-unit>
        <trans-unit id="f694530f5219eedcd4de38cb0d70bea2e6819f53" translate="yes" xml:space="preserve">
          <source>The following example re-implements the previous test with &lt;code&gt;DebugElement.query()&lt;/code&gt; and the browser's &lt;code&gt;By.css&lt;/code&gt; method.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;DebugElement.query()&lt;/code&gt; 和浏览器的 &lt;code&gt;By.css&lt;/code&gt; 方法重新实现以前的测试。</target>
        </trans-unit>
        <trans-unit id="3382236c8e2f90c0af65e6c8d53fd60d3630e149" translate="yes" xml:space="preserve">
          <source>The following example registers a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; with first name and last name controls, and listens for the &lt;em&gt;ngSubmit&lt;/em&gt; event when the button is clicked.</source>
          <target state="translated">下面的示例使用名字和姓氏控件注册一个 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; ，并在单击按钮时侦听&lt;em&gt;ngSubmit&lt;/em&gt;事件。</target>
        </trans-unit>
        <trans-unit id="7d806233c265cf7577c4168fb2ec4e2bbcf34c20" translate="yes" xml:space="preserve">
          <source>The following example registers a custom validator directive. Adding the validator to the existing collection of validators requires the &lt;code&gt;multi: true&lt;/code&gt; option.</source>
          <target state="translated">下面的示例注册一个自定义验证程序指令。将验证器添加到现有的验证器集合中需要使用 &lt;code&gt;multi: true&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="01ae3fed79d829eaaae19c04e6f33068fa10cc52" translate="yes" xml:space="preserve">
          <source>The following example registers a nested &lt;em&gt;name&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; within an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and provides methods to retrieve the nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and individual controls.</source>
          <target state="translated">下面的示例在现有 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 中注册一个嵌套&lt;em&gt;名称&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; ，并提供检索嵌套 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和各个控件的方法。</target>
        </trans-unit>
        <trans-unit id="322a6b3ef3f219a7bbd14499563b3ea72dcbac17" translate="yes" xml:space="preserve">
          <source>The following example returns a control with an initial value in a disabled state.</source>
          <target state="translated">下面的例子是返回一个初始值为禁用状态的控件。</target>
        </trans-unit>
        <trans-unit id="bd9a13546ebb781b29fe8fced2d785a6e6d63b38" translate="yes" xml:space="preserve">
          <source>The following example rewrites the method with types:</source>
          <target state="translated">下面的例子是用类型重写方法。</target>
        </trans-unit>
        <trans-unit id="c6ec9dd1508ebf2608cf1ab6c08758e8aba93be1" translate="yes" xml:space="preserve">
          <source>The following example sets the &lt;code&gt;OnPush&lt;/code&gt; change-detection strategy for a component (&lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt;, rather than the default &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt;), then forces a second check after an interval. See &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;live demo&lt;/a&gt;.</source>
          <target state="translated">以下示例为组件（ &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; ，而不是默认的 &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; ）设置组件的 &lt;code&gt;OnPush&lt;/code&gt; 更改检测策略，然后在间隔之后强制执行第二次检查。观看&lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;现场演示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2b7471662574d24b0b47321a72e97d944e3b5e0c" translate="yes" xml:space="preserve">
          <source>The following example shows &lt;code&gt;NgFor&lt;/code&gt; applied to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. (Don't forget the asterisk (&lt;code&gt;*&lt;/code&gt;) in front of &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">以下示例显示了将 &lt;code&gt;NgFor&lt;/code&gt; 应用于简单的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 。（不要忘记 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 前面的星号（ &lt;code&gt;*&lt;/code&gt; ）。）</target>
        </trans-unit>
        <trans-unit id="c562dfbb69c1a98a82e37e0a6c0f37cf9ac5b1f6" translate="yes" xml:space="preserve">
          <source>The following example shows an event binding that implements a click handler:</source>
          <target state="translated">下面的例子显示了一个实现点击处理程序的事件绑定。</target>
        </trans-unit>
        <trans-unit id="38acb08759fa7468886194d08506e9a0ce5417d4" translate="yes" xml:space="preserve">
          <source>The following example shows controls using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; within a form:</source>
          <target state="translated">以下示例显示了在表单中使用 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的控件：</target>
        </trans-unit>
        <trans-unit id="e1e7f20571895e868a1c8bbfb2febc742c23aa30" translate="yes" xml:space="preserve">
          <source>The following example shows how a service class is properly marked so that a supporting service can be injected upon creation.</source>
          <target state="translated">下面的例子显示了如何正确标记服务类,以便在创建时可以注入支持服务。</target>
        </trans-unit>
        <trans-unit id="be72fc12fe5cf4dad5083e92e226c1dd40573ed3" translate="yes" xml:space="preserve">
          <source>The following example shows how cases can be nested:</source>
          <target state="translated">下面的例子展示了如何嵌套案例。</target>
        </trans-unit>
        <trans-unit id="2b046373177ebf89ea2deca1d2f5103060b13b2b" translate="yes" xml:space="preserve">
          <source>The following example shows how queries are defined and when their results are available in lifecycle hooks:</source>
          <target state="translated">下面的例子显示了如何定义查询以及何时在生命周期钩子中获得查询结果。</target>
        </trans-unit>
        <trans-unit id="c077632398f31fdc18f53e137b5295be8371c9e1" translate="yes" xml:space="preserve">
          <source>The following example shows how the router can populate the &lt;code&gt;entryComponents&lt;/code&gt; field of an NgModule based on a router configuration that refers to components.</source>
          <target state="translated">以下示例显示路由器如何基于引用组件的路由器配置来填充 &lt;code&gt;entryComponents&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="66e1fdebf35092f3863e2ae7d931c94e7887b327" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何在连接到ngModel绑定的输入中添加一个复选框所需的验证器。</target>
        </trans-unit>
        <trans-unit id="368867db6cc44008c62a0af9b4d9460201a18a2f" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a maximum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何将最大长度验证器添加到连接到ngModel绑定的输入中。</target>
        </trans-unit>
        <trans-unit id="d7fbccbb32b0f48876d290f593a4fb03cdd589f5" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a minimum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何在连接到ngModel绑定的输入中添加一个最小长度验证器。</target>
        </trans-unit>
        <trans-unit id="4f808c8af5c2d51dc9eb174377afd8b05d67af5d" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a pattern validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何将模式验证器添加到连接到ngModel绑定的输入中。</target>
        </trans-unit>
        <trans-unit id="fff28e8f05131a85b2053d418fcdb7c05fec28f8" translate="yes" xml:space="preserve">
          <source>The following example shows how to add an email validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何将电子邮件验证器添加到一个连接到ngModel绑定的输入中。</target>
        </trans-unit>
        <trans-unit id="1c6423f6e2b9133747ffa3e301b8f9cca3c1a40b" translate="yes" xml:space="preserve">
          <source>The following example shows how to build a dynamic ad banner.</source>
          <target state="translated">下面的例子展示了如何建立一个动态广告横幅。</target>
        </trans-unit>
        <trans-unit id="ee45e1a32fc4fd748ecba48456000a2fcf666eb2" translate="yes" xml:space="preserve">
          <source>The following example shows how to capture the form values from the &quot;ngSubmit&quot; event.</source>
          <target state="translated">下面的示例显示了如何从 &quot;ngSubmit &quot;事件中捕获表单值。</target>
        </trans-unit>
        <trans-unit id="6daf8cd22d12b0f67faa1ae29e1763c675f0abe5" translate="yes" xml:space="preserve">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;iterablediffer&quot;&gt;&lt;code&gt;IterableDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">以下示例显示了如何扩展现有工厂列表，该列表仅适用于该组件及其子组件的注射器。这是使新的&lt;a href=&quot;iterablediffer&quot;&gt; &lt;code&gt;IterableDiffer&lt;/code&gt; &lt;/a&gt;可用所需的全部步骤。</target>
        </trans-unit>
        <trans-unit id="83d90a3054ebd2d5ef9a349704d34a8e5393cb26" translate="yes" xml:space="preserve">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;keyvaluediffer&quot;&gt;&lt;code&gt;KeyValueDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">以下示例显示了如何扩展现有工厂列表，该列表仅适用于该组件及其子组件的注射器。这是使新的&lt;a href=&quot;keyvaluediffer&quot;&gt; &lt;code&gt;KeyValueDiffer&lt;/code&gt; &lt;/a&gt;可用所需的全部步骤。</target>
        </trans-unit>
        <trans-unit id="6b4c2655698aa0d2203e75b1289d0487cadd44e2" translate="yes" xml:space="preserve">
          <source>The following example shows how to find and focus the main content header in the DOM after navigation.</source>
          <target state="translated">下面的例子展示了如何在导航后的DOM中找到并聚焦主内容头。</target>
        </trans-unit>
        <trans-unit id="51b27d39b057cf93861bc4cc7466e579ed4f5751" translate="yes" xml:space="preserve">
          <source>The following example shows how to make a simple progress bar accessible by using host binding to control accessibility-related attributes.</source>
          <target state="translated">下面的例子展示了如何通过使用主机绑定来控制可访问性相关的属性,使一个简单的进度条可以被访问。</target>
        </trans-unit>
        <trans-unit id="7a085757bc3f13deb2551df0f93cb8afa2b12e6b" translate="yes" xml:space="preserve">
          <source>The following example shows how to register multiple form controls within a form group and set their value.</source>
          <target state="translated">下面的示例显示了如何在一个表单组中注册多个表单控件并设置其值。</target>
        </trans-unit>
        <trans-unit id="a4a8014d1e2c1017305a9a1388855d8f4840149a" translate="yes" xml:space="preserve">
          <source>The following example shows how to set up an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; in a child component that pushes data you enter in an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to an array in the parent component.</source>
          <target state="translated">下面的示例演示如何在子组件中设置 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ，以将您在HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 中输入的数据推入父组件中的数组。</target>
        </trans-unit>
        <trans-unit id="59c573eec5946e813c45e18762fdeb1633ef0ed4" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a checkbox with a reactive form.</source>
          <target state="translated">下面的例子展示了如何使用一个反应式表单的复选框。</target>
        </trans-unit>
        <trans-unit id="cc2f6dbf31261ec056919eb80f43040dc8866c26" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a number input with a reactive form.</source>
          <target state="translated">下面的例子展示了如何使用一个反应式表单的数字输入。</target>
        </trans-unit>
        <trans-unit id="cbeaaa1764396b191a1fa427696ca459afa3e019" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a range input with a reactive form.</source>
          <target state="translated">下面的例子显示了如何使用一个反应式表单的范围输入。</target>
        </trans-unit>
        <trans-unit id="2958492ec328342f9b159f183a274c8962939e29" translate="yes" xml:space="preserve">
          <source>The following example shows how to use an input element that activates the default value accessor (in this case, a text field).</source>
          <target state="translated">下面的例子显示了如何使用一个输入元素来激活默认值访问器(在这个例子中,一个文本字段)。</target>
        </trans-unit>
        <trans-unit id="1373b177c05a62a912a3ee24e9df3148944e063e" translate="yes" xml:space="preserve">
          <source>The following example shows how to use more than one case to display the same view:</source>
          <target state="translated">下面的例子显示了如何使用多个案例来显示同一个视图。</target>
        </trans-unit>
        <trans-unit id="57f6f5878666eda756817f7b7efb36774821b332" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this feature:</source>
          <target state="translated">下面的例子展示了如何使用该功能。</target>
        </trans-unit>
        <trans-unit id="6afcdea92b2f9be1919de79ba7cbfe3d0ac7d219" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this token to configure the root app injector with a base href value, so that the DI framework can supply the dependency anywhere in the app.</source>
          <target state="translated">下面的例子展示了如何使用这个令牌来配置根应用注入器的基础href值,以便DI框架可以在应用中的任何地方提供依赖性。</target>
        </trans-unit>
        <trans-unit id="5d099819839fc1d380d48e3ae14ffad753838d5c" translate="yes" xml:space="preserve">
          <source>The following example shows that &lt;code&gt;AppComponent&lt;/code&gt; declares its dependence on &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContext&lt;/code&gt;.</source>
          <target state="translated">下面的示例显示 &lt;code&gt;AppComponent&lt;/code&gt; 声明其对 &lt;code&gt;LoggerService&lt;/code&gt; 和 &lt;code&gt;UserContext&lt;/code&gt; 的依赖。</target>
        </trans-unit>
        <trans-unit id="9eab0e12b63f05899de75dd09db3f2df2fc6187d" translate="yes" xml:space="preserve">
          <source>The following example shows the result of transforming various strings into title case.</source>
          <target state="translated">下面的例子显示了将各种字符串转换为标题大小写的结果。</target>
        </trans-unit>
        <trans-unit id="997f1dc43f8aed6fbbf9fd368a2a5dd9ea934b79" translate="yes" xml:space="preserve">
          <source>The following example shows the shorthand syntax with some options, contained in an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">以下示例显示了 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素中包含一些选项的速记语法。</target>
        </trans-unit>
        <trans-unit id="a09b23068c66780f14d250956e96be5e43143ec4" translate="yes" xml:space="preserve">
          <source>The following example shows the tree-shakable equivalent to the &lt;code&gt;ServiceModule&lt;/code&gt; example above.</source>
          <target state="translated">下面的示例显示了与上面的 &lt;code&gt;ServiceModule&lt;/code&gt; 示例等效的可摇树的示例。</target>
        </trans-unit>
        <trans-unit id="1d184cef72e57c09334c7d9ea86b425dc3afa8c4" translate="yes" xml:space="preserve">
          <source>The following example shows two event emitters that emit on an interval. One emits an output every second, while the other emits every five seconds.</source>
          <target state="translated">下面的例子显示了两个事件发射器,它们在一个时间间隔内发射。其中一个每隔一秒发射一次,而另一个每隔五秒发射一次。</target>
        </trans-unit>
        <trans-unit id="1dffb0edfdea8768fda5ebffcf29790b5b84c38b" translate="yes" xml:space="preserve">
          <source>The following example shows you an alternate way to set the name attribute. The name attribute is used within a custom form component, and the name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; property serves a different purpose.</source>
          <target state="translated">以下示例显示了设置name属性的另一种方法。name属性用于自定义表单组件中，而name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 属性具有不同的用途。</target>
        </trans-unit>
        <trans-unit id="988b27a653275f3bff65878a5b895d72cd36c77e" translate="yes" xml:space="preserve">
          <source>The following example shows you how to change the &quot;updateOn&quot; option from its default using ngFormOptions.</source>
          <target state="translated">下面的例子显示了如何使用ngFormOptions更改默认的 &quot;updateOn &quot;选项。</target>
        </trans-unit>
        <trans-unit id="1e3b26c117fe86b059fd6e1a2232c67d9b63c33b" translate="yes" xml:space="preserve">
          <source>The following example shows you how to combine controls together in a sub-group of the form.</source>
          <target state="translated">下面的例子向您展示了如何将控件组合在表单的一个子组中。</target>
        </trans-unit>
        <trans-unit id="7d204404893de6271980acee275f77cae148739b" translate="yes" xml:space="preserve">
          <source>The following example shows you how to display the current value using interpolation in the template.</source>
          <target state="translated">下面的例子显示了如何在模板中使用内插法显示当前值。</target>
        </trans-unit>
        <trans-unit id="9dc1f820ec5c4e31a3ed11dfe150c2b8b75987f2" translate="yes" xml:space="preserve">
          <source>The following example shows you how to use a standalone ngModel control within a form. This controls the display of the form, but doesn't contain form data.</source>
          <target state="translated">下面的例子展示了如何在表单中使用独立的ngModel控件。这控制了表单的显示,但不包含表单数据。</target>
        </trans-unit>
        <trans-unit id="0a96a492f032a547b6f9125b434d8ea060fd4733" translate="yes" xml:space="preserve">
          <source>The following example stores the provided function as an internal method.</source>
          <target state="translated">下面的例子将所提供的函数作为一个内部方法进行存储。</target>
        </trans-unit>
        <trans-unit id="dff5d128062231c449f19fedce3237c98b922507" translate="yes" xml:space="preserve">
          <source>The following example targets all &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements, from the host element down through this component to all of its child elements in the DOM.</source>
          <target state="translated">以下示例针对所有 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 元素，从主机元素一直到该组件，再到DOM中的所有子元素。</target>
        </trans-unit>
        <trans-unit id="fa3b01423ddb68412ec695cd4482c822e7a7e696" translate="yes" xml:space="preserve">
          <source>The following example tries to set the component's &lt;code&gt;template&lt;/code&gt; property to the value of the exported &lt;code&gt;someTemplate&lt;/code&gt; variable which is declared but &lt;em&gt;unassigned&lt;/em&gt;.</source>
          <target state="translated">以下示例尝试将组件的 &lt;code&gt;template&lt;/code&gt; 属性设置为已声明但未&lt;em&gt;分配&lt;/em&gt;的已导出 &lt;code&gt;someTemplate&lt;/code&gt; 变量的值。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="251fedbc0f6af371679f4fa156ce7e3909346a2e" translate="yes" xml:space="preserve">
          <source>The following example uses a template reference variable to implement a keystroke loopback in a simple template.</source>
          <target state="translated">下面的例子使用模板参考变量在一个简单的模板中实现了一个按键回环。</target>
        </trans-unit>
        <trans-unit id="44de5ab363b46660288190c053d7a6213ed61eaa" translate="yes" xml:space="preserve">
          <source>The following example uses auto-styling to allow a component to animate from a height of 0 up to the height of the parent element:</source>
          <target state="translated">下面的例子使用自动样式来允许一个组件从高度为0到父元素的高度的动画。</target>
        </trans-unit>
        <trans-unit id="069cb9c50eee1cb12d158d3323cefcaab458ccbe" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access individual controls within the group using dot syntax.</source>
          <target state="translated">下面的示例使用&lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt;方法使用点语法访问组中的各个控件。</target>
        </trans-unit>
        <trans-unit id="d4b4122ac3506b5e300f9fe1f7412e28b945f0eb" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access the associated &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">下面的示例使用&lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt;方法访问关联的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ec44a3326cea8016f405a38962d167a49282ce9" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;ignore&lt;/code&gt; field to exclude certain files in the assets folder from being copied into the build:</source>
          <target state="translated">以下示例使用 &lt;code&gt;ignore&lt;/code&gt; 字段来排除资产文件夹中的某些文件被复制到构建中：</target>
        </trans-unit>
        <trans-unit id="ca768a6447856248e05d7cc58b53fac8ddd37f3d" translate="yes" xml:space="preserve">
          <source>The following example uses the decorator to inject the string literal &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="translated">以下示例使用修饰符注入字符串文字 &lt;code&gt;text&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb5ef26847f4c6bb4576ebd5051a24fffc69f9b8" translate="yes" xml:space="preserve">
          <source>The following example writes a value to the native DOM element.</source>
          <target state="translated">下面的例子将一个值写入本地DOM元素。</target>
        </trans-unit>
        <trans-unit id="72f05bc4e050c0a036b7ee9e401d609482e4015f" translate="yes" xml:space="preserve">
          <source>The following examples create animation styles that collect a set of CSS property values:</source>
          <target state="translated">以下示例创建了收集一组CSS属性值的动画样式。</target>
        </trans-unit>
        <trans-unit id="459e7a5210520be2ebdc86dc38684f6553aa04d7" translate="yes" xml:space="preserve">
          <source>The following examples define transitions between the two defined states (and default states), using various options:</source>
          <target state="translated">下面的例子使用各种选项定义了两个定义状态(和默认状态)之间的转换。</target>
        </trans-unit>
        <trans-unit id="6c7c13798e2458b819d456bfdd01d7da3d7c6730" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate how to modify default change-detection behavior to perform explicit detection when needed.</source>
          <target state="translated">下面的例子演示了如何修改默认的变更检测行为,以便在需要时执行显式检测。</target>
        </trans-unit>
        <trans-unit id="a2dba34eb7491a58432ad4932be25b6ceb269f40" translate="yes" xml:space="preserve">
          <source>The following examples revisit two of the &lt;code&gt;TwainComponent&lt;/code&gt; tests with marble testing.</source>
          <target state="translated">以下示例通过大理石测试回顾了两个 &lt;code&gt;TwainComponent&lt;/code&gt; 测试。</target>
        </trans-unit>
        <trans-unit id="fe4d1dc55bed59fbfefe7303b68660eabb2d82d0" translate="yes" xml:space="preserve">
          <source>The following examples show a simple standalone control using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">以下示例显示了一个使用 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的简单独立控件：</target>
        </trans-unit>
        <trans-unit id="4fc88102b63983b94153026634db490e12748eb6" translate="yes" xml:space="preserve">
          <source>The following examples show how to use a select control in a reactive form.</source>
          <target state="translated">下面的例子展示了如何在反应式表单中使用选择控件。</target>
        </trans-unit>
        <trans-unit id="237f9f6e9900e6f0dc1fc654e095fe6275c71b7a" translate="yes" xml:space="preserve">
          <source>The following examples show various &lt;code&gt;timings&lt;/code&gt; specifications.</source>
          <target state="translated">以下示例显示了各种 &lt;code&gt;timings&lt;/code&gt; 规范。</target>
        </trans-unit>
        <trans-unit id="5f4d2b0076660bb96fee07f703fa6b241bb56e96" translate="yes" xml:space="preserve">
          <source>The following examples shows how to register a standalone control and set its value.</source>
          <target state="translated">下面的例子展示了如何注册一个独立的控件并设置其值。</target>
        </trans-unit>
        <trans-unit id="8514f98ee54c6d7f9e2628e3962d79053cdd4d14" translate="yes" xml:space="preserve">
          <source>The following exported values can be aliased to local variables:</source>
          <target state="translated">以下导出的值可以被别名为本地变量。</target>
        </trans-unit>
        <trans-unit id="62e616b6d0095e3bb10360974145d786228761d7" translate="yes" xml:space="preserve">
          <source>The following format message in the component template binds to the component's &lt;code&gt;gender&lt;/code&gt; property, which outputs one of the following string values: &quot;male&quot;, &quot;female&quot; or &quot;other&quot;. The message maps those values to the appropriate translations:</source>
          <target state="translated">组件模板中的以下格式消息绑定到组件的 &lt;code&gt;gender&lt;/code&gt; 属性，该属性输出以下字符串值之一：&amp;ldquo; male&amp;rdquo;，&amp;ldquo; female&amp;rdquo;或&amp;ldquo; other&amp;rdquo;。该消息将这些值映射到适当的转换：</target>
        </trans-unit>
        <trans-unit id="257cd6c433a723247e55e6b1ea41d9b5ac15489c" translate="yes" xml:space="preserve">
          <source>The following hooks take action based on changing values &lt;em&gt;within the child view&lt;/em&gt;, which can only be reached by querying for the child view via the property decorated with &lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChild&lt;/a&gt;.</source>
          <target state="translated">以下挂钩根据更改&lt;em&gt;子视图中的&lt;/em&gt;值来执行操作，只有通过使用&lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChild&lt;/a&gt;装饰的属性查询子视图才能实现此操作。</target>
        </trans-unit>
        <trans-unit id="e81974601b5eeac5fe055890e3562d697f17cbf9" translate="yes" xml:space="preserve">
          <source>The following image shows the effect of mousing over the &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">下图显示了将鼠标悬停在 &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; 标签上的效果。</target>
        </trans-unit>
        <trans-unit id="0be1b281c327a57359a32dbec200dbb405ead34f" translate="yes" xml:space="preserve">
          <source>The following invokes the defined animation with a call to &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt;, passing in override parameter values.</source>
          <target state="translated">以下代码通过调用 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 来调用已定义的动画，并传入覆盖参数值。</target>
        </trans-unit>
        <trans-unit id="27db2b5bc00e4f188ea46c5deb7fb5587ac85224" translate="yes" xml:space="preserve">
          <source>The following is a &lt;code&gt;setCurrentStyles()&lt;/code&gt; method that sets a component property, &lt;code&gt;currentStyles&lt;/code&gt;, with an object that defines three styles, based on the state of three other component properties:</source>
          <target state="translated">以下是 &lt;code&gt;setCurrentStyles()&lt;/code&gt; 方法，该方法使用其他三个组件属性的状态来设置组件属性 &lt;code&gt;currentStyles&lt;/code&gt; 和一个定义三种样式的对象：</target>
        </trans-unit>
        <trans-unit id="610692584293dfd2fb6fcb4af8bd9c779e7a454d" translate="yes" xml:space="preserve">
          <source>The following is a child &lt;code&gt;CountdownTimerComponent&lt;/code&gt; that repeatedly counts down to zero and launches a rocket. It has &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods that control the clock and it displays a countdown status message in its own template.</source>
          <target state="translated">以下是一个 &lt;code&gt;CountdownTimerComponent&lt;/code&gt; 子级，该子级反复递减至零并发射火箭。它具有控制时钟的 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 方法，并且在其自己的模板中显示倒计时状态消息。</target>
        </trans-unit>
        <trans-unit id="7326f4531184dc8d93c37051d97ac9e13cd1c12e" translate="yes" xml:space="preserve">
          <source>The following is a typical example.</source>
          <target state="translated">以下是一个典型的例子。</target>
        </trans-unit>
        <trans-unit id="55843c76bb937b5c99ade8fb44814616949b7628" translate="yes" xml:space="preserve">
          <source>The following is an example of how the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; view trees are combined into a single logical tree:</source>
          <target state="translated">以下是如何将 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 视图树组合为单个逻辑树的示例：</target>
        </trans-unit>
        <trans-unit id="664fbc064070f409303fb12c41e2bb73522bd8a0" translate="yes" xml:space="preserve">
          <source>The following is an example of how you can use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to link the two modules.</source>
          <target state="translated">以下是如何使用 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 链接两个模块的示例。</target>
        </trans-unit>
        <trans-unit id="8607bb858867baa84b109da9d0c1ff3859efd04b" translate="yes" xml:space="preserve">
          <source>The following is an example of specifying a bootstrapped component, &lt;code&gt;AppComponent&lt;/code&gt;, in a basic &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">以下是在基本 &lt;code&gt;app.module.ts&lt;/code&gt; 中指定自举组件 &lt;code&gt;AppComponent&lt;/code&gt; 的示例：</target>
        </trans-unit>
        <trans-unit id="453ca73d33c283d35d71394c3a21baf84fabbce3" translate="yes" xml:space="preserve">
          <source>The following is an example of writing the disabled property to a native DOM element:</source>
          <target state="translated">下面是一个将禁用属性写入本地DOM元素的例子。</target>
        </trans-unit>
        <trans-unit id="8fb7a4128454c301515b108ffaddee95b06eee50" translate="yes" xml:space="preserve">
          <source>The following line adds the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppRoutingModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array and configures it with the &lt;code&gt;routes&lt;/code&gt; in one step by calling &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">下面的 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 数组，并通过调用 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 在一步中为它配置 &lt;code&gt;routes&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="301a3f6c250317996f1a7e73563e3c1f2daa213c" translate="yes" xml:space="preserve">
          <source>The following matcher matches HTML files.</source>
          <target state="translated">以下匹配器匹配HTML文件。</target>
        </trans-unit>
        <trans-unit id="085ddba18b2c5265e10006f356e68568d4824afc" translate="yes" xml:space="preserve">
          <source>The following options are available for configuring the AoT template compiler.</source>
          <target state="translated">以下选项可用于配置AoT模板编译器。</target>
        </trans-unit>
        <trans-unit id="bc78819d810ff269dc610903ab67d72f0566f184" translate="yes" xml:space="preserve">
          <source>The following pattern is deprecated:</source>
          <target state="translated">以下模式已被废弃。</target>
        </trans-unit>
        <trans-unit id="dfcc5dab05630152017f437c01aea4388857e4f2" translate="yes" xml:space="preserve">
          <source>The following polyfills are used to test the framework itself. They are a good starting point for an application.</source>
          <target state="translated">下面的 polyfills 是用来测试框架本身的。它们是一个应用程序的良好起点。</target>
        </trans-unit>
        <trans-unit id="e3d0650581e15a43999d42a2416501047b4f3a7b" translate="yes" xml:space="preserve">
          <source>The following properties, at the top level of the file, configure the workspace.</source>
          <target state="translated">以下是文件顶层的属性,用于配置工作区。</target>
        </trans-unit>
        <trans-unit id="7e985ef8314fd51479546a4ad9e18907e6515ed5" translate="yes" xml:space="preserve">
          <source>The following provider object uses the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; key to associate the variable with the &lt;code&gt;Logger&lt;/code&gt; token.</source>
          <target state="translated">以下提供程序对象使用 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 键将变量与 &lt;code&gt;Logger&lt;/code&gt; 令牌关联。</target>
        </trans-unit>
        <trans-unit id="99189183b4cb84682cca267b2e990eeba8a565d5" translate="yes" xml:space="preserve">
          <source>The following route creates sibling components with multiple outlets. When navigating to &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt;, the router creates the 'Team' component next to the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</source>
          <target state="translated">以下路线创建具有多个插座的兄弟组件。导航到 &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt; 时，路由器会在&amp;ldquo;聊天&amp;rdquo;组件旁边创建&amp;ldquo;团队&amp;rdquo;组件。&amp;ldquo;聊天&amp;rdquo;组件放置在&amp;ldquo;辅助&amp;rdquo;插座中。</target>
        </trans-unit>
        <trans-unit id="9dd6c9b80bc0194ec4f3aac76cae7d2d01f577d8" translate="yes" xml:space="preserve">
          <source>The following route specifies that when navigating to, for example, &lt;code&gt;/team/11/user/bob&lt;/code&gt;, the router creates the 'Team' component with the 'User' child component in it.</source>
          <target state="translated">以下路由指定在导航到 &lt;code&gt;/team/11/user/bob&lt;/code&gt; 时，路由器会在其中创建带有&amp;ldquo;用户&amp;rdquo;子组件的&amp;ldquo;团队&amp;rdquo;组件。</target>
        </trans-unit>
        <trans-unit id="98cd7483f8aba2a02696564fcb82530e8aa235b9" translate="yes" xml:space="preserve">
          <source>The following route uses the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; property to ignore a segment of a given URL when looking for a child path.</source>
          <target state="translated">以下路由在查找子路径时使用 &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; 属性忽略给定URL的一部分。</target>
        </trans-unit>
        <trans-unit id="2b01e0c8059fc0401e8549e70d7dcf5bc5f7ee96" translate="yes" xml:space="preserve">
          <source>The following route uses wild-card notation to specify a component that is always instantiated regardless of where you navigate to.</source>
          <target state="translated">下面的路径使用通配符符号来指定一个组件,无论你导航到哪里,该组件都会被实例化。</target>
        </trans-unit>
        <trans-unit id="a6454d98dfd985ac59580f707d0a349be9a74d91" translate="yes" xml:space="preserve">
          <source>The following section refactors the &lt;code&gt;ProfileEditor&lt;/code&gt; component to use the form builder service to create form control and form group instances.</source>
          <target state="translated">下一节将重构 &lt;code&gt;ProfileEditor&lt;/code&gt; 组件，以使用表单构建器服务来创建表单控件和表单组实例。</target>
        </trans-unit>
        <trans-unit id="5465ea2f359e32bfe1a37ff57e84812529ef826d" translate="yes" xml:space="preserve">
          <source>The following sections excerpt methods of the sample's &lt;code&gt;HeroesService&lt;/code&gt;.</source>
          <target state="translated">以下各节摘录了示例的 &lt;code&gt;HeroesService&lt;/code&gt; 的方法。</target>
        </trans-unit>
        <trans-unit id="a76c578936ab27254fb8d939de7a81db9437d38c" translate="yes" xml:space="preserve">
          <source>The following sections, comprising most of this guide, explore common component testing scenarios</source>
          <target state="translated">下面的章节,包括本指南的大部分内容,探讨了常见的组件测试场景。</target>
        </trans-unit>
        <trans-unit id="7fdb271994a4a327f199629fee13b3b5218174bf" translate="yes" xml:space="preserve">
          <source>The following selectors are supported.</source>
          <target state="translated">支持以下选择器:</target>
        </trans-unit>
        <trans-unit id="5b0248f72441058a2d81893bf871c0a2c0bb3d1c" translate="yes" xml:space="preserve">
          <source>The following shows &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; guarding two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s. The &lt;code&gt;currentCustomer&lt;/code&gt; name appears only when there is a &lt;code&gt;currentCustomer&lt;/code&gt;. The &lt;code&gt;nullCustomer&lt;/code&gt; will not be displayed as long as it is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">下面显示了 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 保护两个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 。该 &lt;code&gt;currentCustomer&lt;/code&gt; 的名字出现时，才会有一个 &lt;code&gt;currentCustomer&lt;/code&gt; 。该 &lt;code&gt;nullCustomer&lt;/code&gt; 不会，只要它是显示 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d137ad25db2cc877ca5df59f56e9a6b890ee5500" translate="yes" xml:space="preserve">
          <source>The following shows the new and the old implementations side-by-side.</source>
          <target state="translated">下面将新旧实现并列显示。</target>
        </trans-unit>
        <trans-unit id="e1bd79b4d2db06b7589c87d8dbd16316e269179c" translate="yes" xml:space="preserve">
          <source>The following shows use with the &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; decorator, and allows for a null result.</source>
          <target state="translated">以下显示了与 &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; 装饰器一起使用，并允许空结果。</target>
        </trans-unit>
        <trans-unit id="f6128302a128007a3c40e5752360cf21b438bb75" translate="yes" xml:space="preserve">
          <source>The following simple example injects a class into a component using the view provider specified in component metadata:</source>
          <target state="translated">下面这个简单的例子使用组件元数据中指定的视图提供者将一个类注入到组件中。</target>
        </trans-unit>
        <trans-unit id="01444f8aa1fd63fbea66ed3fbc4d76b3181f9147" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define an on-changes handler for an input property.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义一个输入属性的on-changes处理程序。</target>
        </trans-unit>
        <trans-unit id="a2cf27e61d910f2a3062d16cd2b48905ec197f2c" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own after-check functionality.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义自己的事后检查功能。</target>
        </trans-unit>
        <trans-unit id="02c938106305027d23ab75882704caf8994a7b24" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own content initialization method.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义自己的内容初始化方法。</target>
        </trans-unit>
        <trans-unit id="0e8fbeff69628590a0b295ba498767902ead9d66" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own custom clean-up method.</source>
          <target state="translated">下面的代码段展示了一个组件如何实现这个接口来定义自己的自定义清理方法。</target>
        </trans-unit>
        <trans-unit id="411e84ca8d7c03f76c1b14b61d983ec8bab6408f" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own initialization method.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义自己的初始化方法。</target>
        </trans-unit>
        <trans-unit id="94805b48a3f8993b901ee028c3968016d01e3964" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own view initialization method.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义自己的视图初始化方法。</target>
        </trans-unit>
        <trans-unit id="1aff607a58501ecf10894e98220ffe4cf493e1de" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to invoke it own change-detection cycle.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来调用它自己的变化检测周期。</target>
        </trans-unit>
        <trans-unit id="385410d96fd0d1ada306ab805640a6a9fe3ab05f" translate="yes" xml:space="preserve">
          <source>The following support packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">以下支持包作为依赖项包含在新Angular工作区的默认 &lt;code&gt;package.json&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="79640a37e7e2636b4e4ea578ebf213b6e60d68d0" translate="yes" xml:space="preserve">
          <source>The following table contains our current target release dates for the next two major versions of Angular:</source>
          <target state="translated">下表包含了我们目前对Angular下两个主要版本的目标发布日期。</target>
        </trans-unit>
        <trans-unit id="4ca2b1e7ed53f03929a56107550cff032e43e862" translate="yes" xml:space="preserve">
          <source>The following table demonstrates how Angular desugars microsyntax.</source>
          <target state="translated">下表演示了Angular如何去掉微语法。</target>
        </trans-unit>
        <trans-unit id="7733978f307b95f03a15335e16eb927c523fa06b" translate="yes" xml:space="preserve">
          <source>The following table describes which expressions the collector can and cannot fold:</source>
          <target state="translated">下表描述了收集器可以和不能折叠的表达式。</target>
        </trans-unit>
        <trans-unit id="4e03431838c501d28cce8ddc5c46d3be138f46e9" translate="yes" xml:space="preserve">
          <source>The following table provides the status for Angular versions under support.</source>
          <target state="translated">下表提供了支持下的Angular版本的状态。</target>
        </trans-unit>
        <trans-unit id="d96b5c739c1826895418b2145bbddbdded331ea4" translate="yes" xml:space="preserve">
          <source>The following table summarizes the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">下表总结了 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据属性。</target>
        </trans-unit>
        <trans-unit id="94f36be6c96bfbef3f8339094d4d44cbc04cfe6a" translate="yes" xml:space="preserve">
          <source>The following table summarizes the key characteristics of each feature module group.</source>
          <target state="translated">下表总结了每个特征模块组的主要特征。</target>
        </trans-unit>
        <trans-unit id="fec16611f597670fac267bce5d690f6c5abe4600" translate="yes" xml:space="preserve">
          <source>The following tables describe each portion of the microsyntax grammar.</source>
          <target state="translated">下表描述了微词法语法的各个部分。</target>
        </trans-unit>
        <trans-unit id="4ce840172e7aa3dbc7025dbe2e8ba9084075ce24" translate="yes" xml:space="preserve">
          <source>The following template binds the value of &lt;code&gt;htmlSnippet&lt;/code&gt;, once by interpolating it into an element's content, and once by binding it to the &lt;code&gt;innerHTML&lt;/code&gt; property of an element:</source>
          <target state="translated">以下模板绑定 &lt;code&gt;htmlSnippet&lt;/code&gt; 的值，一次是将其插值到元素的内容中，一次是将其绑定到元素的 &lt;code&gt;innerHTML&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="95542803d1818e7b9ddf8543ea3d2f5e00675e56" translate="yes" xml:space="preserve">
          <source>The following template breaks down into two separate &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances, an outer one and an inner one.</source>
          <target state="translated">以下模板分为两个单独的 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 实例，一个外部实例和一个内部实例。</target>
        </trans-unit>
        <trans-unit id="0cd0ff39268d1599e7449c7cc25bc25785f4bad2" translate="yes" xml:space="preserve">
          <source>The following test alternative calls the native element's own &lt;code&gt;click()&lt;/code&gt; method, which is perfectly fine for &lt;em&gt;this component&lt;/em&gt;.</source>
          <target state="translated">以下测试替代方法调用了本机元素自己的 &lt;code&gt;click()&lt;/code&gt; 方法，该方法对于&lt;em&gt;此组件&lt;/em&gt;非常合适。</target>
        </trans-unit>
        <trans-unit id="3e38312f70780e3491f68ec661365696be0e3289" translate="yes" xml:space="preserve">
          <source>The following test clicks the displayed hero and confirms that &lt;code&gt;Router.navigateByUrl&lt;/code&gt; is called with the expected url.</source>
          <target state="translated">以下测试单击显示的英雄，并确认使用预期的URL调用了 &lt;code&gt;Router.navigateByUrl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6dfa1bb416d8e0295cb8c255d10104e0c62ad38" translate="yes" xml:space="preserve">
          <source>The following test confirms the expected behavior when the service returns an &lt;code&gt;ErrorObservable&lt;/code&gt;.</source>
          <target state="translated">下面的测试确认服务返回 &lt;code&gt;ErrorObservable&lt;/code&gt; 时的预期行为。</target>
        </trans-unit>
        <trans-unit id="eeefd0a90ed65af64e72aa2c46c4435e2cb08978" translate="yes" xml:space="preserve">
          <source>The following test verifies that the hero name is propagated to the template via a binding.</source>
          <target state="translated">下面的测试验证了英雄的名字是通过绑定传播到模板上的。</target>
        </trans-unit>
        <trans-unit id="669b416d81d58828e3baeba2592b6d7bdb997a78" translate="yes" xml:space="preserve">
          <source>The following test verifies the data flow from model to view.</source>
          <target state="translated">下面的测试验证了从模型到视图的数据流。</target>
        </trans-unit>
        <trans-unit id="9493bee7e41e07ddded061eefd4c86697f978133" translate="yes" xml:space="preserve">
          <source>The following test verifies the data flow from view to model.</source>
          <target state="translated">下面的测试验证了从视图到模型的数据流。</target>
        </trans-unit>
        <trans-unit id="f74f9a34c41218f6c8d1f966bf27413f11fe65fe" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a reactive form.</source>
          <target state="translated">下面的测试使用前面提到的最喜欢的颜色组件来验证数据从视图到模型和模型到视图的反应式表单的数据流。</target>
        </trans-unit>
        <trans-unit id="43b51a454408bcc622da34659c907ba79ec26345" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a template-driven form.</source>
          <target state="translated">以下测试使用前面提到的最喜欢的颜色组件来验证模板驱动表单的数据从视图到模型和模型到视图的流动。</target>
        </trans-unit>
        <trans-unit id="7fd03907907ea2e83f365fb45a4c105b4acdfd13" translate="yes" xml:space="preserve">
          <source>The following top-level configuration properties are available for each project, under &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以下顶级配置属性可用于每个项目的 &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75147566e331317e0ebd38d4c23e1fe75b6e9f20" translate="yes" xml:space="preserve">
          <source>The form control assigned to &lt;code&gt;name&lt;/code&gt; is displayed when the component is added to a template.</source>
          <target state="translated">将组件添加到模板时，将显示分配给 &lt;code&gt;name&lt;/code&gt; 的表单控件。</target>
        </trans-unit>
        <trans-unit id="2230bb7f6f181d5dab7f244d6c86fa35f9398e04" translate="yes" xml:space="preserve">
          <source>The form has the following structure:</source>
          <target state="translated">该表格的结构如下:</target>
        </trans-unit>
        <trans-unit id="b34e294f68df7549c748b9444818ff001b758168" translate="yes" xml:space="preserve">
          <source>The form input element emits an &quot;input&quot; event with the latest value.</source>
          <target state="translated">表单输入元素会发出一个带有最新值的 &quot;输入 &quot;事件。</target>
        </trans-unit>
        <trans-unit id="a8655729b1ee08ecff05e7625d507f952f92fcd0" translate="yes" xml:space="preserve">
          <source>The form model is defined in the component class. To reflect the model in the view, you'll need a checkout form.</source>
          <target state="translated">表单模型是在组件类中定义的。为了在视图中反映该模型,你需要一个结账表单。</target>
        </trans-unit>
        <trans-unit id="0ee382bec575b1f6da6bbb9cd31af78bff011d9e" translate="yes" xml:space="preserve">
          <source>The form model is the source of truth for the control, so when you click the button, the value of the input is changed within the component class, overriding its current value.</source>
          <target state="translated">表单模型是控件的真实来源,所以当你点击按钮时,输入的值会在组件类内发生变化,覆盖其当前值。</target>
        </trans-unit>
        <trans-unit id="2b5a84ea0eb09a364844c5d9b46df413273dce48" translate="yes" xml:space="preserve">
          <source>The form no longer exports any directives, and instead uses the &lt;code&gt;name&lt;/code&gt; getter defined in the component class.</source>
          <target state="translated">该表单不再导出任何指令，而是使用在组件类中定义的 &lt;code&gt;name&lt;/code&gt; getter。</target>
        </trans-unit>
        <trans-unit id="c4afd0129b7e117b92146615638d0e4e2006fecc" translate="yes" xml:space="preserve">
          <source>The format for the currency indicator. One of the following:</source>
          <target state="translated">货币指标的格式。下列之一:</target>
        </trans-unit>
        <trans-unit id="eee651f151097d3f793f7dd68113adcb34cf7213" translate="yes" xml:space="preserve">
          <source>The format type.</source>
          <target state="translated">格式类型:</target>
        </trans-unit>
        <trans-unit id="cd068df6dcd825ce5052a96a9a61c9e6c6f8bd76" translate="yes" xml:space="preserve">
          <source>The format, &lt;code&gt;wide&lt;/code&gt; or &lt;code&gt;narrow&lt;/code&gt;.</source>
          <target state="translated">格式， &lt;code&gt;wide&lt;/code&gt; 或 &lt;code&gt;narrow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="526712cace2051a3820458eac477a227870a4798" translate="yes" xml:space="preserve">
          <source>The fragment of the URL</source>
          <target state="translated">URL的片段</target>
        </trans-unit>
        <trans-unit id="0d182f34bb720d02d0ff9daf3877acfc53926309" translate="yes" xml:space="preserve">
          <source>The framework passes the event argument&amp;mdash;represented by &lt;code&gt;$event&lt;/code&gt;&amp;mdash;to the handler method, and the method processes it:</source>
          <target state="translated">框架将事件参数（由 &lt;code&gt;$event&lt;/code&gt; 表示）传递给处理程序方法，然后该方法对其进行处理：</target>
        </trans-unit>
        <trans-unit id="cb343064f13dd87a34e507dfccab96b02bd2aebe" translate="yes" xml:space="preserve">
          <source>The full URL string</source>
          <target state="translated">完整的URL字符串</target>
        </trans-unit>
        <trans-unit id="88085ca27e5b06d61296a4f74c271a308a999e84" translate="yes" xml:space="preserve">
          <source>The full URL string.</source>
          <target state="translated">完整的URL字符串。</target>
        </trans-unit>
        <trans-unit id="7f0cbd8363677df2b3ea5c867b26387e1ee8078d" translate="yes" xml:space="preserve">
          <source>The full path for the TypeScript configuration file, relative to the current workspace.</source>
          <target state="translated">TypeScript配置文件的完整路径,相对于当前的工作区。</target>
        </trans-unit>
        <trans-unit id="8023b8cae23a8f17607eebcdfccedf1316888f2a" translate="yes" xml:space="preserve">
          <source>The full path for the main entry point to the app, relative to the current workspace.</source>
          <target state="translated">相对于当前工作区,应用的主入口点的完整路径。</target>
        </trans-unit>
        <trans-unit id="9fcf0e0bdd67b2fc8e34d78b3c0248617ad77ccf" translate="yes" xml:space="preserve">
          <source>The full path for the new output directory, relative to the current workspace.</source>
          <target state="translated">新输出目录的完整路径,相对于当前工作区。</target>
        </trans-unit>
        <trans-unit id="eed94568aa1a8e2503cf46beaf9ea9475b325fba" translate="yes" xml:space="preserve">
          <source>The full path for the polyfills file, relative to the current workspace.</source>
          <target state="translated">polyfills文件的完整路径,相对于当前工作区。</target>
        </trans-unit>
        <trans-unit id="72ca397dc507125a0d20ad46ccbf197c1c42a7a1" translate="yes" xml:space="preserve">
          <source>The full response including the body was received.</source>
          <target state="translated">已收到包括正文在内的全部答复。</target>
        </trans-unit>
        <trans-unit id="e6503b9b0cc09112e25c5a60b6304d09a44f4ed9" translate="yes" xml:space="preserve">
          <source>The full source for the final version of the app can be seen and downloaded from the live example.</source>
          <target state="translated">最终版应用的完整源码可以从现场示例中看到和下载。</target>
        </trans-unit>
        <trans-unit id="ae6e08f7e449effe9eff51219d47a00a65d9c956" translate="yes" xml:space="preserve">
          <source>The function is actually a factory that takes a regular expression to detect a &lt;em&gt;specific&lt;/em&gt; forbidden name and returns a validator function.</source>
          <target state="translated">该函数实际上是一个工厂，它使用正则表达式来检测&lt;em&gt;特定的&lt;/em&gt;禁止名称并返回验证器函数。</target>
        </trans-unit>
        <trans-unit id="48c80eeebb68498080f87297bd6cc25ebeabb884" translate="yes" xml:space="preserve">
          <source>The function receives two inputs, the iteration index and the node object ID.</source>
          <target state="translated">该函数接收两个输入,即迭代索引和节点对象ID。</target>
        </trans-unit>
        <trans-unit id="be32b3ac1b2eb072a21ff75621b7e08425ea08f2" translate="yes" xml:space="preserve">
          <source>The function retrieves candidate heroes from the &lt;code&gt;HeroService&lt;/code&gt;, takes &lt;code&gt;2&lt;/code&gt; of them to be the runners-up, and returns their concatenated names. Look at the  for the full source code.</source>
          <target state="translated">该函数从 &lt;code&gt;HeroService&lt;/code&gt; 检索候选英雄，花费 &lt;code&gt;2&lt;/code&gt; 作为亚军，并返回其并置名称。查看完整的源代码。</target>
        </trans-unit>
        <trans-unit id="a09d2a5d397e66aa18cf75d4bb9e37f09ac8bfb3" translate="yes" xml:space="preserve">
          <source>The function returns the string of names, which Angular than injects into the &lt;code&gt;runnersUp&lt;/code&gt; parameter of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">该函数返回名称的字符串，它比注入到角 &lt;code&gt;runnersUp&lt;/code&gt; 的参数 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc8a8d17b8274bbc32ca0cfca58f30d95ef0f38d" translate="yes" xml:space="preserve">
          <source>The function takes a winning &lt;code&gt;Hero&lt;/code&gt; and a &lt;code&gt;HeroService&lt;/code&gt; as arguments. Angular supplies these arguments from injected values identified by the two &lt;em&gt;tokens&lt;/em&gt; in the &lt;code&gt;deps&lt;/code&gt; array.</source>
          <target state="translated">该函数将获胜的 &lt;code&gt;Hero&lt;/code&gt; 和 &lt;code&gt;HeroService&lt;/code&gt; 作为参数。从通过确定的两个喷射值角用品这些参数&lt;em&gt;令牌&lt;/em&gt;中 &lt;code&gt;deps&lt;/code&gt; 阵列。</target>
        </trans-unit>
        <trans-unit id="7fd4d00a7d9c89b4d22e796a799455efec2aec0f" translate="yes" xml:space="preserve">
          <source>The function that determines the asynchronous validity of this control.</source>
          <target state="translated">确定该控制的异步有效性的函数。</target>
        </trans-unit>
        <trans-unit id="75f21eecd9b997cf943218446152125dac02ddc1" translate="yes" xml:space="preserve">
          <source>The function that determines the synchronous validity of this control.</source>
          <target state="translated">确定该控制的同步有效性的函数。</target>
        </trans-unit>
        <trans-unit id="65f7a04d29635cdb37413f0c3e472d4e275bd987" translate="yes" xml:space="preserve">
          <source>The functional API provided by the &lt;code&gt;@angular/animations&lt;/code&gt; module provides a domain-specific language (DSL) for creating and controlling animations in Angular applications. See the &lt;a href=&quot;../api/animations&quot;&gt;API reference&lt;/a&gt; for a complete listing and syntax details of the core functions and related data structures.</source>
          <target state="translated">&lt;code&gt;@angular/animations&lt;/code&gt; 模块提供的功能性API提供了一种特定于域的语言（DSL），用于在Angular应用程序中创建和控制动画。有关核心功能和相关数据结构的完整列表和语法详细信息，请参阅&lt;a href=&quot;../api/animations&quot;&gt;API参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39cc10df89d390f57860b9af6c0adb017e7434d2" translate="yes" xml:space="preserve">
          <source>The gathering of CLI analytics data is disabled by default, and must be enabled at the project level by individual users. It cannot be enabled at the project level for all users.</source>
          <target state="translated">CLI分析数据的收集在默认情况下是禁用的,个别用户必须在项目级别启用。不能在项目层面为所有用户启用。</target>
        </trans-unit>
        <trans-unit id="fdd0a7a0c40007f4996ec51aa08759927de0515e" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;ngsw-config.json&lt;/code&gt; includes a limited list of cachable fonts and images extentions. In some cases, you might want to modify the glob pattern to suit your needs.</source>
          <target state="translated">生成的 &lt;code&gt;ngsw-config.json&lt;/code&gt; 包括有限的可缓存字体和图像扩展列表。在某些情况下，您可能需要修改glob模式以适合您的需求。</target>
        </trans-unit>
        <trans-unit id="4a279bf5db87a97440dc1aee59aa3be18678bef7" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; is as follows:</source>
          <target state="translated">生成的 &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; 如下：</target>
        </trans-unit>
        <trans-unit id="e616c4f20e747c4816f0eec1d31528b85dafd2e4" translate="yes" xml:space="preserve">
          <source>The generated file looks like this:</source>
          <target state="translated">生成的文件是这样的。</target>
        </trans-unit>
        <trans-unit id="04803306c35b1db59a8611c4f1c5567aec8e4351" translate="yes" xml:space="preserve">
          <source>The generated output would look something like this:</source>
          <target state="translated">生成的输出会是这样的。</target>
        </trans-unit>
        <trans-unit id="141073788fe40a99ac2d4c89d2b31fce8314ca6b" translate="yes" xml:space="preserve">
          <source>The generator creates starter files for all three parts of the component:</source>
          <target state="translated">生成器为组件的所有三个部分创建启动文件。</target>
        </trans-unit>
        <trans-unit id="bf05807c104db04e8ba4b4172fe1e0d537908a8f" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;ng run&lt;/code&gt; CLI command takes as its first argument a target string of the form &lt;em&gt;project:target[:configuration]&lt;/em&gt;.</source>
          <target state="translated">通用 &lt;code&gt;ng run&lt;/code&gt; CLI命令以&lt;em&gt;project：target [：configuration]&lt;/em&gt;形式的目标字符串作为第一个参数。</target>
        </trans-unit>
        <trans-unit id="7ec0f9f9bac30ff11b631988c34462992f22407b" translate="yes" xml:space="preserve">
          <source>The given URL path.</source>
          <target state="translated">给定的URL路径。</target>
        </trans-unit>
        <trans-unit id="ab814f412c1f1d0bae00400afb55a1234e1acc6e" translate="yes" xml:space="preserve">
          <source>The goal is to group the &lt;code&gt;Crisis Center&lt;/code&gt; management routes under the &lt;code&gt;admin&lt;/code&gt; path. You don't need a component to do it. A &lt;em&gt;component-less&lt;/em&gt; route makes it easier to &lt;a href=&quot;router#can-activate-child-guard&quot;&gt;guard child routes&lt;/a&gt;.</source>
          <target state="translated">目标是将 &lt;code&gt;Crisis Center&lt;/code&gt; 的管理路由分组在 &lt;code&gt;admin&lt;/code&gt; 路径下。您不需要组件即可执行此操作。一个&lt;em&gt;无部件&lt;/em&gt;的路线可以更容易地&lt;a href=&quot;router#can-activate-child-guard&quot;&gt;守护子路由&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7e3f53bd2e127f2d6cf985d6eab8a081c2e42cae" translate="yes" xml:space="preserve">
          <source>The greater danger is that &lt;strong&gt;a future rewording of the header text would break&lt;/strong&gt; a link to this section.</source>
          <target state="translated">更大的危险是，&lt;strong&gt;标题文本将来的重新措词将破坏&lt;/strong&gt;到此部分的链接。</target>
        </trans-unit>
        <trans-unit id="1459c8d453ff8ac4153c0dff3f06d25103f5fe41" translate="yes" xml:space="preserve">
          <source>The grouping element may break the template appearance because CSS styles neither expect nor accommodate the new layout. For example, suppose you have the following paragraph layout.</source>
          <target state="translated">分组元素可能会破坏模板的外观,因为CSS样式既不期望也不适应新的布局。例如,假设你有以下段落布局。</target>
        </trans-unit>
        <trans-unit id="186b7c1a6bbbaa6de4d2aef72af8c57b23e404a3" translate="yes" xml:space="preserve">
          <source>The guard &lt;em&gt;might&lt;/em&gt; return its boolean answer synchronously. But in many cases, the guard can't produce an answer synchronously. The guard could ask the user a question, save changes to the server, or fetch fresh data. These are all asynchronous operations.</source>
          <target state="translated">警卫队&lt;em&gt;可能会&lt;/em&gt;同步返回其布尔回答。但是在许多情况下，警卫无法同步产生答案。防护人员可以向用户提问，将更改保存到服务器，或获取新数据。这些都是异步操作。</target>
        </trans-unit>
        <trans-unit id="0fb3fdf4c451ff27c87e95fb3c718c6ebc299464" translate="yes" xml:space="preserve">
          <source>The guide assumes that you're familiar with building basic Angular apps, as described in the following sections:</source>
          <target state="translated">本指南假设您熟悉构建基本的Angular应用程序,如下文所述。</target>
        </trans-unit>
        <trans-unit id="1e22bed2867320095b59b4361abac2b59605d915" translate="yes" xml:space="preserve">
          <source>The guide presents tests of a sample application created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. This sample application is much like the one created in the &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial&lt;/a&gt;. The sample application and all tests in this guide are available for inspection and experimentation:</source>
          <target state="translated">该指南介绍了使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建的示例应用程序的测试。该示例应用程序非常类似于《&lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;英雄&lt;/em&gt;&lt;/a&gt;之&lt;em&gt;旅》&lt;/em&gt;教程中创建的应用程序。&lt;em&gt;&lt;/em&gt;。本指南中的示例应用程序和所有测试可用于检查和实验：</target>
        </trans-unit>
        <trans-unit id="421303822387da04a3b56e711c4f3ea0bceaf8e8" translate="yes" xml:space="preserve">
          <source>The guide proceeds as a sequence of milestones as if you were building the app step-by-step. But, it is not a tutorial and it glosses over details of Angular application construction that are more thoroughly covered elsewhere in the documentation.</source>
          <target state="translated">该指南以里程碑的顺序进行,就像你在一步步地构建应用程序一样。但是,它不是一个教程,它掩盖了Angular应用构建的细节,这些细节在文档的其他地方有更详尽的介绍。</target>
        </trans-unit>
        <trans-unit id="56409968972545a88fbd9eded9e76b93ccbbcd50" translate="yes" xml:space="preserve">
          <source>The guideline uses the shortcut &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; to represent those various files. Using this shortcut makes this guide's file structures easier to read and more terse.</source>
          <target state="translated">该准则使用快捷方式 &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; 表示这些各种文件。使用此快捷方式可使本指南的文件结构更易于阅读和简洁。</target>
        </trans-unit>
        <trans-unit id="a864f76394ca2c5a51fde927a0643f0c50460ce3" translate="yes" xml:space="preserve">
          <source>The guidelines described here serve two purposes:</source>
          <target state="translated">这里介绍的准则有两个目的。</target>
        </trans-unit>
        <trans-unit id="1888c94c63bc6d73016893cf4e85b80718910a2a" translate="yes" xml:space="preserve">
          <source>The handlers delegate to a helper method that sets the color on the host DOM element, &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">处理程序委托给一个辅助方法，该方法在主机DOM元素 &lt;code&gt;el&lt;/code&gt; 上设置颜色。</target>
        </trans-unit>
        <trans-unit id="46bf71e9a7c208fa128b6a06edf63925677b2a2e" translate="yes" xml:space="preserve">
          <source>The has string</source>
          <target state="translated">字符串</target>
        </trans-unit>
        <trans-unit id="36d211182de9d369a5c0e06f411a8bd524c5be83" translate="yes" xml:space="preserve">
          <source>The header name for which to append the value or values.</source>
          <target state="translated">要附加值的头名。</target>
        </trans-unit>
        <trans-unit id="f7ae4cade9263fbb970a7b0cf00131afd1c12bb5" translate="yes" xml:space="preserve">
          <source>The header name from which to retrieve values.</source>
          <target state="translated">检索值的头名。</target>
        </trans-unit>
        <trans-unit id="5c71c1c8b2b761ca699cfa043cb799e05f3e6574" translate="yes" xml:space="preserve">
          <source>The header name to check for existence.</source>
          <target state="translated">要检查是否存在的头部名称。</target>
        </trans-unit>
        <trans-unit id="1af3be1a7d51a18f36d735ad45a99c8687d62de5" translate="yes" xml:space="preserve">
          <source>The header name.</source>
          <target state="translated">头部名称。</target>
        </trans-unit>
        <trans-unit id="1fb8a670c061e1780c533d1cfa92b7cada304777" translate="yes" xml:space="preserve">
          <source>The helper method, &lt;code&gt;highlight&lt;/code&gt;, was extracted from the constructor. The revised constructor simply declares the injected &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">辅助方法 &lt;code&gt;highlight&lt;/code&gt; 是从构造函数中提取的。修改后的构造函数只声明注入的 &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77deeab503fd68fae60b1683faba0eaee8d11b6b" translate="yes" xml:space="preserve">
          <source>The helper sets up global variables to hold the shared Angular and AngularJS injectors.</source>
          <target state="translated">该帮助程序设置了全局变量来存放共享的Angular和AngularJS注入器。</target>
        </trans-unit>
        <trans-unit id="4ae082078f4b7ac534ba00e2fb2f643830e768fa" translate="yes" xml:space="preserve">
          <source>The hero &lt;em&gt;Alter Ego&lt;/em&gt; is optional so you can leave that be.</source>
          <target state="translated">英雄&lt;em&gt;Alter Ego&lt;/em&gt;是可选的，因此您可以保留它。</target>
        </trans-unit>
        <trans-unit id="71c6566d940a46db02f0c867ecf070621fd765b9" translate="yes" xml:space="preserve">
          <source>The hero agency is planning an ad campaign with several different ads cycling through the banner. New ad components are added frequently by several different teams. This makes it impractical to use a template with a static component structure.</source>
          <target state="translated">英雄机构正在策划一个广告活动,几个不同的广告在横幅上循环。新的广告组件由几个不同的团队频繁添加。这使得使用静态组件结构的模板不切实际。</target>
        </trans-unit>
        <trans-unit id="8763e74d500e6e70efa6309067129b019b2ca2e7" translate="yes" xml:space="preserve">
          <source>The hero editor.</source>
          <target state="translated">英雄小编。</target>
        </trans-unit>
        <trans-unit id="0728ae26bedae4b1d12eb889d15f0b5193a7c81f" translate="yes" xml:space="preserve">
          <source>The hero form uses the &lt;code&gt;.ng-valid&lt;/code&gt; and &lt;code&gt;.ng-invalid&lt;/code&gt; classes to set the color of each form control's border.</source>
          <target state="translated">英雄表单使用 &lt;code&gt;.ng-valid&lt;/code&gt; 和 &lt;code&gt;.ng-invalid&lt;/code&gt; 类设置每个表单控件边框的颜色。</target>
        </trans-unit>
        <trans-unit id="21d7974b34602306dfbd0d2ab859c721b4a0b3f4" translate="yes" xml:space="preserve">
          <source>The hero items in the &lt;code&gt;HeroesComponent&lt;/code&gt; are &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements whose click events are bound to the component's &lt;code&gt;onSelect()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 中的英雄项是 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素，其单击事件绑定到组件的 &lt;code&gt;onSelect()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="592678c7214943d825426d0e4505fa4a585ef418" translate="yes" xml:space="preserve">
          <source>The hero must choose one superpower from a fixed list of agency-approved powers. You maintain that list internally (in &lt;code&gt;HeroFormComponent&lt;/code&gt;).</source>
          <target state="translated">英雄必须从机构认可的固定权力清单中选择一个超级大国。您可以在内部维护该列表（在 &lt;code&gt;HeroFormComponent&lt;/code&gt; 中）。</target>
        </trans-unit>
        <trans-unit id="473bad574572a351e437cb9cd6317f908f41d643" translate="yes" xml:space="preserve">
          <source>The hero routes are currently defined in &lt;em&gt;two&lt;/em&gt; places: in the &lt;code&gt;HeroesRoutingModule&lt;/code&gt;, by way of the &lt;code&gt;HeroesModule&lt;/code&gt;, and in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">当前在&lt;em&gt;两个&lt;/em&gt;地方定义了英雄路线：在 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 中，通过 &lt;code&gt;HeroesModule&lt;/code&gt; ，在 &lt;code&gt;AppRoutingModule&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="8ea57673d1088103c595c56fde675da1370e3de5" translate="yes" xml:space="preserve">
          <source>The heroes feature has two interacting components, the hero list and the hero detail. The list view is self-sufficient; you navigate to it, it gets a list of heroes and displays them.</source>
          <target state="translated">英雄功能有两个交互的组件,英雄列表和英雄详情。列表视图是自给自足的,你导航到它,它就会得到一个英雄列表并显示出来。</target>
        </trans-unit>
        <trans-unit id="f0c577a68776a18a7768c488dfda878388c07de5" translate="yes" xml:space="preserve">
          <source>The heroes feature module is almost complete, but what is a feature without some smooth transitions?</source>
          <target state="translated">英雄功能模块已经基本完成了,但是没有一些平滑过渡的功能是什么呢?</target>
        </trans-unit>
        <trans-unit id="79f13609e0fe6dc3309e380f997fe13b9aeef97b" translate="yes" xml:space="preserve">
          <source>The heroes list should be attractive and should respond visually when users hover over and select a hero from the list.</source>
          <target state="translated">英雄列表应该具有吸引力,当用户悬停并从列表中选择一个英雄时,应该在视觉上做出反应。</target>
        </trans-unit>
        <trans-unit id="d763cf67760997b5781cdf955015acbbec99c511" translate="yes" xml:space="preserve">
          <source>The heroes web API expects a special header in HTTP save requests. That header is in the &lt;code&gt;httpOptions&lt;/code&gt; constant defined in the &lt;code&gt;HeroService&lt;/code&gt;. Add the following to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">Heroes Web API在HTTP保存请求中需要特殊的标头。该标头是在 &lt;code&gt;httpOptions&lt;/code&gt; 在所定义的恒定 &lt;code&gt;HeroService&lt;/code&gt; 。将以下内容添加到 &lt;code&gt;HeroService&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="608f0a4d7c94f588eb779efe72dc12c1fb0cf77f" translate="yes" xml:space="preserve">
          <source>The host &lt;code&gt;OnChangesParentComponent&lt;/code&gt; binds to them like this:</source>
          <target state="translated">主机 &lt;code&gt;OnChangesParentComponent&lt;/code&gt; 像这样绑定到它们：</target>
        </trans-unit>
        <trans-unit id="d475d2c0839b834e5922c40096508e379732daa1" translate="yes" xml:space="preserve">
          <source>The host dependency injector. For example, the root element's component instance injector.</source>
          <target state="translated">宿主依赖注入器。例如,根元素的组件实例注入器。</target>
        </trans-unit>
        <trans-unit id="2bd45aa129171fd60686da527ebfb1ef5a231daf" translate="yes" xml:space="preserve">
          <source>The host or anchor &lt;a href=&quot;../../guide/glossary#element&quot;&gt;element&lt;/a&gt; for this component instance.</source>
          <target state="translated">此组件实例的主机或锚&lt;a href=&quot;../../guide/glossary#element&quot;&gt;元素&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61778c1078d4aebe3161ba35e60e62c15c8e7eba" translate="yes" xml:space="preserve">
          <source>The i18n template translation process has four phases:</source>
          <target state="translated">i18n模板翻译过程有四个阶段。</target>
        </trans-unit>
        <trans-unit id="3bb0192b3b6c38a7290682d21f4eba34e038374d" translate="yes" xml:space="preserve">
          <source>The identities of elements in the iterator can change while the data does not. This can happen, for example, if the iterator is produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response produces objects with different identities, and Angular must tear down the entire DOM and rebuild it (as if all old elements were deleted and all new elements inserted).</source>
          <target state="translated">迭代器中元素的身份可能会发生变化,而数据不会。例如,如果迭代器是由一个RPC到服务器产生的,而这个RPC是重新运行的,就会发生这种情况。即使数据没有改变,第二个响应也会产生具有不同身份的对象,Angular必须拆掉整个DOM并重建它(就像删除所有旧元素并插入所有新元素一样)。</target>
        </trans-unit>
        <trans-unit id="ac727768ada490816c6d8682036d5ff4e29f9e9f" translate="yes" xml:space="preserve">
          <source>The identity validator implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; interface. It takes an Angular control object as an argument and returns either null if the form is valid, or &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">身份验证器实现 &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; 接口。它以Angular控制对象作为参数，如果格式有效，则返回null，否则返回 &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1244038c275380a06d0292b3f58a8b0808bee9d4" translate="yes" xml:space="preserve">
          <source>The immediate &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; children. Walk the tree by descending through &lt;code&gt;children&lt;/code&gt;.</source>
          <target state="translated">直接的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 子级。穿过 &lt;code&gt;children&lt;/code&gt; 穿过树。</target>
        </trans-unit>
        <trans-unit id="f77264c0b692bee3b01df77a4b0b94e2da9de660" translate="yes" xml:space="preserve">
          <source>The immediate goal is to test the &lt;code&gt;DashboardHeroComponent&lt;/code&gt;, not the &lt;code&gt;DashboardComponent&lt;/code&gt;, so, try the second and third options.</source>
          <target state="translated">近期目标是测试 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 而不是 &lt;code&gt;DashboardComponent&lt;/code&gt; ，因此，请尝试第二个和第三个选项。</target>
        </trans-unit>
        <trans-unit id="34262de4d07947d5d97708446c0ec864a64190a5" translate="yes" xml:space="preserve">
          <source>The implementation in &lt;em&gt;this&lt;/em&gt; tutorial will continue to deliver &lt;em&gt;mock heroes&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;本&lt;/em&gt;教程中的实现将继续提供&lt;em&gt;模拟英雄&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e94c2bbfc1793deccefaf24d2d6ac1efaedf0ef3" translate="yes" xml:space="preserve">
          <source>The important bit in the &lt;code&gt;server.ts&lt;/code&gt; file is the &lt;code&gt;ngExpressEngine()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;server.ts&lt;/code&gt; 文件中的重要位是 &lt;code&gt;ngExpressEngine()&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="4e58b37a7644668715bd2ab968359ab5ecae4a62" translate="yes" xml:space="preserve">
          <source>The imported &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; symbol provides Angular the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">导入的 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 符号提供Angular &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 装饰器。</target>
        </trans-unit>
        <trans-unit id="5eeb64088704a52b165f30312582ba6990110783" translate="yes" xml:space="preserve">
          <source>The imports at the top of the array are JavaScript import statements while the &lt;code&gt;imports&lt;/code&gt; array within &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; is Angular specific. For more information on the difference, see &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript Modules vs. NgModules&lt;/a&gt;.</source>
          <target state="translated">数组顶部的导入是JavaScript导入语句，而 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule中&lt;/a&gt;的 &lt;code&gt;imports&lt;/code&gt; 数组是Angular特定的。有关差异的更多信息，请参见&lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript模块与NgModules&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ad0735a040b2f744ace16714d841b50eb7a90b9" translate="yes" xml:space="preserve">
          <source>The impure</source>
          <target state="translated">不纯的</target>
        </trans-unit>
        <trans-unit id="47a8f6ad06b99c5e37173f0330783e47b4a54b62" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;</source>
          <target state="translated">递增和递减运算符 &lt;code&gt;++&lt;/code&gt; 和 &lt;code&gt;--&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01460b62b5e6cc1d2c666542b25ca8af1ab36172" translate="yes" xml:space="preserve">
          <source>The index at which to insert the new component's host view into this container. If not specified, appends the new view as the last entry.</source>
          <target state="translated">将新组件的主视图插入到这个容器中的索引。如果没有指定,则将新视图作为最后一个条目追加。</target>
        </trans-unit>
        <trans-unit id="28088325c17c4696121e5d42d44e8ba470905c1b" translate="yes" xml:space="preserve">
          <source>The individual form controls are now collected within a group. A &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance provides its model value as an object reduced from the values of each control in the group. A form group instance has the same properties (such as &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;untouched&lt;/code&gt;) and methods (such as &lt;code&gt;setValue()&lt;/code&gt;) as a form control instance.</source>
          <target state="translated">现在将单个表单控件收集在一个组中。一个 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例提供其模型值作为一个对象，该对象的值从组中每个控件的值中减去。表单组实例具有与表单控件实例相同的属性（例如 &lt;code&gt;value&lt;/code&gt; 和 &lt;code&gt;untouched&lt;/code&gt; ）和方法（例如 &lt;code&gt;setValue()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7b9f0a384d42c6657ae3c3a445c88ae80d87dd5f" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;size&lt;/code&gt; is an input value from a property binding. Clicking the buttons increases or decreases the &lt;code&gt;size&lt;/code&gt;, within min/max value constraints, and then raises, or emits, the &lt;code&gt;sizeChange&lt;/code&gt; event with the adjusted size.</source>
          <target state="translated">初始 &lt;code&gt;size&lt;/code&gt; 是来自属性绑定的输入值。单击按钮可在最小/最大值限制内增大或减小 &lt;code&gt;size&lt;/code&gt; ，然后使用已调整的大小引发或发出 &lt;code&gt;sizeChange&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="f4f9e997670b8acc1e6bb32a313594d221ffead4" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;tsconfig.json&lt;/code&gt; for an Angular app typically looks like this example:</source>
          <target state="translated">Angular应用程序的初始 &lt;code&gt;tsconfig.json&lt;/code&gt; 通常类似于以下示例：</target>
        </trans-unit>
        <trans-unit id="9b0d2a1d3adcf62fd7edfaae947dfbf0fa526cbd" translate="yes" xml:space="preserve">
          <source>The initial admin routing configuration:</source>
          <target state="translated">最初的管理路由配置。</target>
        </trans-unit>
        <trans-unit id="5c133f6e7cbbe3a8e6d914657ad0e65a743fcb2c" translate="yes" xml:space="preserve">
          <source>The initial app created by &lt;code&gt;ng new&lt;/code&gt; is at the top level of the workspace file structure.</source>
          <target state="translated">由 &lt;code&gt;ng new&lt;/code&gt; 创建的初始应用程序位于工作空间文件结构的顶层。</target>
        </trans-unit>
        <trans-unit id="7b9c95f356d9d8aaf3b5a580d30becc255eceae3" translate="yes" xml:space="preserve">
          <source>The initial app project contains a simple Welcome app, ready to run.</source>
          <target state="translated">初始应用项目包含一个简单的欢迎应用,准备运行。</target>
        </trans-unit>
        <trans-unit id="1c618598365a8b0089eeb0d06f473e1e7f5e9801" translate="yes" xml:space="preserve">
          <source>The initial app that you create with &lt;code&gt;ng new app_name&lt;/code&gt; is listed under &quot;projects&quot;:</source>
          <target state="translated">使用 &lt;code&gt;ng new app_name&lt;/code&gt; 创建的初始应用程序在&amp;ldquo;项目&amp;rdquo;下列出：</target>
        </trans-unit>
        <trans-unit id="fccb43ed5c07fe0c3365da2b045c6f6d6ee71c9c" translate="yes" xml:space="preserve">
          <source>The initial schema that you have created tells the CLI where to find the schematic that supports the &lt;code&gt;ng add&lt;/code&gt; command. Now you are ready to create that schematic.</source>
          <target state="translated">您创建的初始模式会告诉CLI在哪里可以找到支持 &lt;code&gt;ng add&lt;/code&gt; 命令的逻辑示意图。现在您准备创建该原理图。</target>
        </trans-unit>
        <trans-unit id="274d6987906a4ae7a1535a899b14ab18fe115084" translate="yes" xml:space="preserve">
          <source>The initial schematic gets the same name as the project folder, and is generated in &lt;code&gt;src/hello-world&lt;/code&gt;. You can add related schematics to this collection, and modify the generated skeleton code to define your schematic's functionality. Each schematic name must be unique within the collection.</source>
          <target state="translated">初始逻辑示意图与项目文件夹具有相同的名称，并在 &lt;code&gt;src/hello-world&lt;/code&gt; 中生成。您可以将相关的原理图添加到该集合中，并修改生成的骨架代码以定义原理图的功能。每个逻辑示意图名称在集合中必须唯一。</target>
        </trans-unit>
        <trans-unit id="fe3d0e9c54c6b1dffc213d25bb122ab550dcfc75" translate="yes" xml:space="preserve">
          <source>The injection token for the event-manager plug-in service.</source>
          <target state="translated">事件管理器插件服务的注入令牌。</target>
        </trans-unit>
        <trans-unit id="1383ded669e589d4e6653269a2fad194b6361cf5" translate="yes" xml:space="preserve">
          <source>The injector determines the starting location in the logical tree and an ending location of the search. The injector begins with the starting location and looks for the token at each level in the logical tree. If the token is found it is returned.</source>
          <target state="translated">注入器确定逻辑树中的起始位置和搜索的结束位置。注入器从起始位置开始,在逻辑树的每一层寻找标记。如果找到了标记,就会返回。</target>
        </trans-unit>
        <trans-unit id="909976c4bf2fdb45732e4e4857727780da327ef6" translate="yes" xml:space="preserve">
          <source>The injector is responsible for creating service instances and injecting them into classes like &lt;code&gt;HeroListComponent&lt;/code&gt;. You rarely create an Angular injector yourself. Angular creates injectors for you as it executes the app, starting with the &lt;em&gt;root injector&lt;/em&gt; that it creates during the &lt;a href=&quot;bootstrapping&quot;&gt;bootstrap process&lt;/a&gt;.</source>
          <target state="translated">注入程序负责创建服务实例并将其注入到 &lt;code&gt;HeroListComponent&lt;/code&gt; 之类的类中。您很少自己创建一个Angular注射器。Angular在执行应用程序时会为您创建注射器，从它在&lt;a href=&quot;bootstrapping&quot;&gt;引导过程中&lt;/a&gt;创建的&lt;em&gt;根注射器&lt;/em&gt;开始。</target>
        </trans-unit>
        <trans-unit id="391362c6611913ba88dda520d9dcb87894ef5621" translate="yes" xml:space="preserve">
          <source>The injector needs providers for both this new logging service and its dependent &lt;code&gt;UserService&lt;/code&gt;. Configure this alternative logger with the &lt;code&gt;useClass&lt;/code&gt; provider-definition key, like &lt;code&gt;BetterLogger&lt;/code&gt;. The following array specifies both providers in the &lt;code&gt;providers&lt;/code&gt; metadata option of the parent module or component.</source>
          <target state="translated">注入程序需要此新的日志记录服务及其依赖的 &lt;code&gt;UserService&lt;/code&gt; 的提供程序。使用 &lt;code&gt;useClass&lt;/code&gt; 提供程序定义键（例如 &lt;code&gt;BetterLogger&lt;/code&gt; )配置此替代记录器。以下数组在父模块或组件的 &lt;code&gt;providers&lt;/code&gt; 元数据选项中指定了两个provider 。</target>
        </trans-unit>
        <trans-unit id="6dc65614e224404ed54dd6ea0d9ada092c4337fc" translate="yes" xml:space="preserve">
          <source>The injector provides the dependency value by invoking a factory function, that you provide as the value of the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; key. Notice that this form of provider has a third key, &lt;code&gt;deps&lt;/code&gt;, which specifies dependencies for the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">注入程序通过调用工厂函数来提供依赖项值，您可以将其作为 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 键的值来提供。注意，这种形式的提供程序具有第三个键 &lt;code&gt;deps&lt;/code&gt; ，它指定 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 函数的依赖项。</target>
        </trans-unit>
        <trans-unit id="c95f5722ed83490db02364ac66c92b54bf76fcb4" translate="yes" xml:space="preserve">
          <source>The injector that contains all of the providers of the NgModule.</source>
          <target state="translated">包含NgModule所有提供者的注入器。</target>
        </trans-unit>
        <trans-unit id="81535b8cfa3709335ca6968ad04963647fb0e43c" translate="yes" xml:space="preserve">
          <source>The injector to use as the parent for the new component.</source>
          <target state="translated">注入器作为新组件的父组件。</target>
        </trans-unit>
        <trans-unit id="e753944a9f0476e23faa1642765ef1111249bf50" translate="yes" xml:space="preserve">
          <source>The injector to use for retrieving the component's factory.</source>
          <target state="translated">用于检索组件出厂的喷射器。</target>
        </trans-unit>
        <trans-unit id="e9818ffe0b5312214e6049d23aa468b35f9eca71" translate="yes" xml:space="preserve">
          <source>The inner, &lt;code&gt;class-skeleton&lt;/code&gt; region appears twice, once to capture the code that opens the class definition and once to capture the code that closes the class definition.</source>
          <target state="translated">内部的 &lt;code&gt;class-skeleton&lt;/code&gt; 区域出现两次，一次捕获用于打开类定义的代码，一次捕获用于关闭类定义的代码。</target>
        </trans-unit>
        <trans-unit id="97d15b5fd5023fac9a06d495428eae8299fd604c" translate="yes" xml:space="preserve">
          <source>The input element emits an &quot;input&quot; event with the value &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">输入元素发出一个值为&lt;em&gt;Blue&lt;/em&gt;的&amp;ldquo; input&amp;rdquo;事件。</target>
        </trans-unit>
        <trans-unit id="45f218bc069eb983ea0aa82f12ad5468e38fbc56" translate="yes" xml:space="preserve">
          <source>The inputs of the component.</source>
          <target state="translated">组件的投入;</target>
        </trans-unit>
        <trans-unit id="9ef9848eb3b4dd6a2af93f2352e54e04d6d6e735" translate="yes" xml:space="preserve">
          <source>The instance of the component class created by &lt;code&gt;TestBed.createComponent&lt;/code&gt;.</source>
          <target state="translated">由 &lt;code&gt;TestBed.createComponent&lt;/code&gt; 创建的组件类的实例。</target>
        </trans-unit>
        <trans-unit id="c42b5877f82b6791369b1b504388d13d671ec5cd" translate="yes" xml:space="preserve">
          <source>The instance of the root component class.</source>
          <target state="translated">根组件类的实例。</target>
        </trans-unit>
        <trans-unit id="796a3b1682a165dd05dc7257a0f42400175385a8" translate="yes" xml:space="preserve">
          <source>The instance to convert.</source>
          <target state="translated">要转换的实例。</target>
        </trans-unit>
        <trans-unit id="f38cf766ca85d67c16df92fd25bac9022b740c83" translate="yes" xml:space="preserve">
          <source>The interesting part of the URL follows the &lt;code&gt;...&lt;/code&gt;:</source>
          <target state="translated">URL的有趣部分在 &lt;code&gt;...&lt;/code&gt; 之后：</target>
        </trans-unit>
        <trans-unit id="702e5fcb69842a35326d93ae27b71240dfadc43a" translate="yes" xml:space="preserve">
          <source>The interfaces are optional for JavaScript and Typescript developers from a purely technical perspective. The JavaScript language doesn't have interfaces. Angular can't see TypeScript interfaces at runtime because they disappear from the transpiled JavaScript.</source>
          <target state="translated">从纯技术的角度来看,接口对于JavaScript和Typescript开发者来说是可有可无的。JavaScript语言没有接口。Angular在运行时看不到TypeScript接口,因为它们会从移植的JavaScript中消失。</target>
        </trans-unit>
        <trans-unit id="73fe62cb28dec38fb5ac135676c55e085cff63ba" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">内部 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="64d50ef5373d507409c34fbaedaf9a35c68a6991" translate="yes" xml:space="preserve">
          <source>The internal Architect tool delegates work to handler functions called &lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builders&lt;/em&gt;&lt;/a&gt;. A builder handler function receives two arguments; a set of input &lt;code&gt;options&lt;/code&gt; (a JSON object), and a &lt;code&gt;context&lt;/code&gt; (a &lt;code&gt;BuilderContext&lt;/code&gt; object).</source>
          <target state="translated">内部Architect工具将工作委托给称为&lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builders的&lt;/em&gt;&lt;/a&gt;处理程序函数。构建器处理程序函数接收两个参数。一组输入 &lt;code&gt;options&lt;/code&gt; （一个JSON对象）和一个 &lt;code&gt;context&lt;/code&gt; （一个 &lt;code&gt;BuilderContext&lt;/code&gt; 对象）。</target>
        </trans-unit>
        <trans-unit id="1b4b0b78851e7752da5d2f642ad23a0e8de7822f" translate="yes" xml:space="preserve">
          <source>The interpolation braces in &lt;code&gt;{{1 + 1}}&lt;/code&gt; surround the template expression &lt;code&gt;1 + 1&lt;/code&gt;. In the property binding, a template expression appears in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{1 + 1}}&lt;/code&gt; 的插值括号包围模板表达式 &lt;code&gt;1 + 1&lt;/code&gt; 。在属性绑定中，与 &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt; 一样，模板表达式在 &lt;code&gt;=&lt;/code&gt; 符号右侧的引号中显示。</target>
        </trans-unit>
        <trans-unit id="93f9b2c51a7af4c4eb35603e8cb48e22004d9e33" translate="yes" xml:space="preserve">
          <source>The interpolation live example demonstrates all of the syntax and code snippets described in this section.</source>
          <target state="translated">插值活例演示了本节中描述的所有语法和代码片段。</target>
        </trans-unit>
        <trans-unit id="c6187909f50cd0be17663a5d887e024df5706953" translate="yes" xml:space="preserve">
          <source>The item.</source>
          <target state="translated">该项目:</target>
        </trans-unit>
        <trans-unit id="b27c5c8196dbfc8a53c04f22e7d7da67c2563040" translate="yes" xml:space="preserve">
          <source>The key is a supported event name to be configured, and the options object contains a set of properties, with override values to be applied to the named recognizer event. For example, to disable recognition of the rotate event, specify &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt;.</source>
          <target state="translated">关键字是要配置的受支持事件名称，options对象包含一组属性，以及要应用于命名识别器事件的替代值。例如，要禁用对Rotate事件的识别，请指定 &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3afe8949a36dd6edcd0b52b40e17cb1882c7d22a" translate="yes" xml:space="preserve">
          <source>The key is the DOM event that the directive listens to. To listen to global events, add the target to the event name. The target can be &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">关键是指令监听的DOM事件。要监听全局事件，请将目标添加到事件名称。目标可以是 &lt;code&gt;window&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;body&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7889af82f4b022dadb547ae2824efe7a6bb47207" translate="yes" xml:space="preserve">
          <source>The key is to make the code more reusable, easier to read, and less mistake prone.</source>
          <target state="translated">关键是要让代码更可重用,更容易阅读,更不容易出错。</target>
        </trans-unit>
        <trans-unit id="cdbe02fa8964f612bbf73ee656e19f8d119c6afa" translate="yes" xml:space="preserve">
          <source>The key name.</source>
          <target state="translated">钥匙的名字。</target>
        </trans-unit>
        <trans-unit id="d0fa848ad3856bedad82e6c7874b70da382521e0" translate="yes" xml:space="preserve">
          <source>The key point here is that you have to export it so you can import it elsewhere. Next, import it into the NgModule, in this example &lt;code&gt;app.module.ts&lt;/code&gt;, with a JavaScript import statement:</source>
          <target state="translated">这里的关键点是您必须将其导出，以便可以将其导入其他地方。接下来，使用JavaScript import语句将其导入NgModule，在本示例中为 &lt;code&gt;app.module.ts&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5da31d71b1f60f0adaeccb267bd7eb24f7673f75" translate="yes" xml:space="preserve">
          <source>The key point is that you control the hero job application questions entirely through the objects returned from &lt;code&gt;QuestionService&lt;/code&gt;. Questionnaire maintenance is a simple matter of adding, updating, and removing objects from the &lt;code&gt;questions&lt;/code&gt; array.</source>
          <target state="translated">关键是您可以完全通过 &lt;code&gt;QuestionService&lt;/code&gt; 返回的对象控制英雄职位申请问题。问卷维护是从 &lt;code&gt;questions&lt;/code&gt; 数组中添加，更新和删除对象的简单问题。</target>
        </trans-unit>
        <trans-unit id="5d0681bffbfdd03e7e32f7464f13ef4c498fb543" translate="yes" xml:space="preserve">
          <source>The key takeaway is that when binding to a child component's property in a parent component&amp;mdash;that is, what's in square brackets&amp;mdash;you must decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component.</source>
          <target state="translated">关键要点是，当绑定到父组件中子组件的属性（即方括号中的内容）时，必须在子组件中使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰该属性。</target>
        </trans-unit>
        <trans-unit id="6c5cd796012caba3f50ab44f1a501f9433b217c1" translate="yes" xml:space="preserve">
          <source>The key thing to understand about a hybrid application is that every element in the DOM is owned by exactly one of the two frameworks. The other framework ignores it. If an element is owned by AngularJS, Angular treats it as if it didn't exist, and vice versa.</source>
          <target state="translated">关于混合应用程序,需要理解的关键是DOM中的每一个元素恰恰是由两个框架中的一个框架所拥有。另一个框架会忽略它。如果一个元素由AngularJS拥有,Angular就会把它当作不存在,反之亦然。</target>
        </trans-unit>
        <trans-unit id="82a5cbcd9ee629368a7dbf46b633770937978193" translate="yes" xml:space="preserve">
          <source>The keyword to search for, as provided in the search bar in angular.io.</source>
          <target state="translated">要搜索的关键字,在angular.io的搜索栏中提供。</target>
        </trans-unit>
        <trans-unit id="7139f105d9119f519815353fa125bb9a5a6a2aef" translate="yes" xml:space="preserve">
          <source>The language is simply HTML5. You're presenting two of the &lt;code&gt;Hero&lt;/code&gt; fields, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt;, and opening them up for user input in input boxes.</source>
          <target state="translated">语言就是HTML5。您将显示两个 &lt;code&gt;Hero&lt;/code&gt; 字段，即 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;alterEgo&lt;/code&gt; ，并在输入框中打开它们以供用户输入。</target>
        </trans-unit>
        <trans-unit id="feb75538a2560e199fdfa7762dd5353f05b9f3bf" translate="yes" xml:space="preserve">
          <source>The last line of the log is the most important. It shows that Karma ran three tests that all passed.</source>
          <target state="translated">日志的最后一行是最重要的。它显示Karma进行了三次测试,全部通过。</target>
        </trans-unit>
        <trans-unit id="a7b74ae411865b1ed27412a302e7dcc77c02a30f" translate="yes" xml:space="preserve">
          <source>The last step, verifying that no requests remain outstanding, is common enough for you to move it into an &lt;code&gt;afterEach()&lt;/code&gt; step:</source>
          <target state="translated">最后一步，确认没有任何未完成的请求，足够普遍，您可以将其移至 &lt;code&gt;afterEach()&lt;/code&gt; 步骤：</target>
        </trans-unit>
        <trans-unit id="6634b9650ac8fa95d9ff2877842e12f8d187606e" translate="yes" xml:space="preserve">
          <source>The last update tick/run counters give the time since specific events happened related to the idle queue. The &quot;Last update run&quot; counter shows the last time idle tasks were actually executed. &quot;Last update tick&quot; shows the time since the last event after which the queue might be processed.</source>
          <target state="translated">最后更新勾选/运行计数器给出了与空闲队列相关的特定事件发生以来的时间。&quot;上次更新运行 &quot;计数器显示实际执行空闲任务的最后时间。&quot;上次更新tick &quot;显示自上次事件发生后可能处理队列的时间。</target>
        </trans-unit>
        <trans-unit id="7505ed32fffc9d3847991eef5fbba124922106c7" translate="yes" xml:space="preserve">
          <source>The lazy loaded scenario</source>
          <target state="translated">懒惰加载的情况</target>
        </trans-unit>
        <trans-unit id="c3bdd32d919036a2592743a6c73032960479a538" translate="yes" xml:space="preserve">
          <source>The lazy loading and re-configuration happen just once, when the route is &lt;em&gt;first&lt;/em&gt; requested; the module and routes are available immediately for subsequent requests.</source>
          <target state="translated">&lt;em&gt;首次&lt;/em&gt;请求路由时，延迟加载和重新配置仅发生一次。模块和路由可立即用于后续请求。</target>
        </trans-unit>
        <trans-unit id="c57c903a85bd033e12fde20ee11764d762c10386" translate="yes" xml:space="preserve">
          <source>The library must be rebuilt on every change. When linking a library, make sure that the build step runs in watch mode, and that the library's &lt;code&gt;package.json&lt;/code&gt; configuration points at the correct entry points. For example, &lt;code&gt;main&lt;/code&gt; should point at a JavaScript file, not a TypeScript file.</source>
          <target state="translated">必须在每次更改时重新构建库。链接库时，请确保构建步骤在监视模式下运行，并且库的 &lt;code&gt;package.json&lt;/code&gt; 配置指向正确的入口点。例如， &lt;code&gt;main&lt;/code&gt; 应该指向一个JavaScript文件，而不是TypeScript文件。</target>
        </trans-unit>
        <trans-unit id="44499b604f2c8a7fb9248b301fa86fbddbe0d759" translate="yes" xml:space="preserve">
          <source>The links are styled as colored blocks by the &lt;code&gt;dashboard.component.css&lt;/code&gt;.</source>
          <target state="translated">链接由 &lt;code&gt;dashboard.component.css&lt;/code&gt; 设置为彩色块。</target>
        </trans-unit>
        <trans-unit id="70f5c6325d761fe1e544503d9e54f38c460d44c0" translate="yes" xml:space="preserve">
          <source>The links don't go anywhere yet but &lt;a href=&quot;toh-pt5#hero-details&quot;&gt;they will shortly&lt;/a&gt;.</source>
          <target state="translated">链接还没有到任何地方，但是&lt;a href=&quot;toh-pt5#hero-details&quot;&gt;很快就会出现&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1a2bdb6c32f442bc5dc6ab7fffdac703a44af59c" translate="yes" xml:space="preserve">
          <source>The linting configuration to use.</source>
          <target state="translated">要使用的绒毛配置。</target>
        </trans-unit>
        <trans-unit id="cb5b67e650373461ed8bddbd8ff4e58af97dc7be" translate="yes" xml:space="preserve">
          <source>The list of async validators applied to control.</source>
          <target state="translated">应用于控件的异步验证器列表。</target>
        </trans-unit>
        <trans-unit id="a0b532d757d03e389d179b94a37fe57febba7478" translate="yes" xml:space="preserve">
          <source>The list of children of this group</source>
          <target state="translated">该组的子女名单</target>
        </trans-unit>
        <trans-unit id="795b91e111cdd26a419fb100996cd8d6c70ea1eb" translate="yes" xml:space="preserve">
          <source>The list of heroes is unchanged. No hero row is highlighted.</source>
          <target state="translated">英雄列表没有变化。没有英雄行高亮。</target>
        </trans-unit>
        <trans-unit id="49857ea47c4cab38f72361229ffb02aa45872afe" translate="yes" xml:space="preserve">
          <source>The list of heroes.</source>
          <target state="translated">英雄榜。</target>
        </trans-unit>
        <trans-unit id="5fa24d8b936262f7c95d2d68e29587ae556a36db" translate="yes" xml:space="preserve">
          <source>The list of validators applied to a control.</source>
          <target state="translated">应用于控件的验证器列表。</target>
        </trans-unit>
        <trans-unit id="0aadeca54e3dfecbee61ea33dcad37c9d04279da" translate="yes" xml:space="preserve">
          <source>The live example &lt;em&gt;does&lt;/em&gt; highlight the selected row because it demonstrates the final state of the application which includes the steps you're &lt;em&gt;about&lt;/em&gt; to cover. At the moment this guide is describing the state of affairs &lt;em&gt;prior&lt;/em&gt; to those steps.</source>
          <target state="translated">实际示例&lt;em&gt;的确&lt;/em&gt;突出显示了所选行，因为它演示了应用程序的最终状态，其中包括您将要&lt;em&gt;介绍&lt;/em&gt;的步骤。目前，本指南正在描述这些步骤&lt;em&gt;之前&lt;/em&gt;的事务状态。</target>
        </trans-unit>
        <trans-unit id="901614f59731b265c4298a51f6591ca36d90b9ba" translate="yes" xml:space="preserve">
          <source>The live example demonstrates all of the syntax and code snippets described in this page.</source>
          <target state="translated">实例展示了本页面中描述的所有语法和代码片段。</target>
        </trans-unit>
        <trans-unit id="7c99dbd847d2edb666ec41151e3e184ee3bbc26b" translate="yes" xml:space="preserve">
          <source>The live example demonstrates the lifecycle hooks in action through a series of exercises presented as components under the control of the root &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">实际示例通过在根 &lt;code&gt;AppComponent&lt;/code&gt; 的控制下作为组件呈现的一系列练习演示了生命周期挂钩。</target>
        </trans-unit>
        <trans-unit id="8e604124b200d483830f1b601a11ceaa96f50692" translate="yes" xml:space="preserve">
          <source>The locale (&lt;code&gt;fr&lt;/code&gt; or &lt;code&gt;en-US&lt;/code&gt; for instance).</source>
          <target state="translated">语言环境（例如 &lt;code&gt;fr&lt;/code&gt; 或 &lt;code&gt;en-US&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bc0d61c0534e7b5e89350cd2ca0eac665647cb36" translate="yes" xml:space="preserve">
          <source>The locale code.</source>
          <target state="translated">地区代码。</target>
        </trans-unit>
        <trans-unit id="dd0ba90791fe2c1551d163b9e264ade3c06599d7" translate="yes" xml:space="preserve">
          <source>The locale identifiers used by CLDR and Angular are based on &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;. These specifications change over time; the following table maps previous identifiers to current ones at time of writing:</source>
          <target state="translated">CLDR和Angular使用的语言环境标识符基于&lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;。这些规格会随着时间而变化。下表在撰写本文时将先前的标识符映射到当前的标识符：</target>
        </trans-unit>
        <trans-unit id="3654c4df9d402ec66e65601b3977777d4df35e6d" translate="yes" xml:space="preserve">
          <source>The location strategy.</source>
          <target state="translated">地点战略;</target>
        </trans-unit>
        <trans-unit id="7b62a0bd0b13a459b84264c8b7eac3dce9b81198" translate="yes" xml:space="preserve">
          <source>The log entries appear as the string value of the &lt;em&gt;power&lt;/em&gt; property changes. But the &lt;code&gt;ngOnChanges&lt;/code&gt; does not catch changes to &lt;code&gt;hero.name&lt;/code&gt; That's surprising at first.</source>
          <target state="translated">日志条目随&lt;em&gt;power&lt;/em&gt;属性的字符串值更改而显示。但是 &lt;code&gt;ngOnChanges&lt;/code&gt; 不能捕获对 &lt;code&gt;hero.name&lt;/code&gt; 的更改。起初令人惊讶。</target>
        </trans-unit>
        <trans-unit id="5371caa0a34b7cd92da5480bcaa60ece14b870cf" translate="yes" xml:space="preserve">
          <source>The logic tree for this example of &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; is as follows:</source>
          <target state="translated">此 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 示例的逻辑树如下：</target>
        </trans-unit>
        <trans-unit id="17661a2f13ce821c0bf724013752f42c941fc3fb" translate="yes" xml:space="preserve">
          <source>The logical tree looks like this with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; in &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">逻辑树看起来像这样，在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 中使用 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6c1735a0aa10b7541d3734c71e401644ee7a31a3" translate="yes" xml:space="preserve">
          <source>The logical tree representation shows why this is:</source>
          <target state="translated">逻辑树的表示方式表明了为什么会这样。</target>
        </trans-unit>
        <trans-unit id="1d531fc78d2d733781719c1f451152d073ed41f9" translate="yes" xml:space="preserve">
          <source>The main Angular modules for animations are &lt;code&gt;@angular/animations&lt;/code&gt; and &lt;code&gt;@angular/platform-browser&lt;/code&gt;. When you create a new project using the CLI, these dependencies are automatically added to your project.</source>
          <target state="translated">动画的主要Angular模块是 &lt;code&gt;@angular/animations&lt;/code&gt; 和 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 。使用CLI创建新项目时，这些依赖项会自动添加到您的项目中。</target>
        </trans-unit>
        <trans-unit id="7263be48b2699ade73a8888b18237441585c4155" translate="yes" xml:space="preserve">
          <source>The main CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, contains a &lt;code&gt;fileReplacements&lt;/code&gt; section in the configuration for each build target, which allows you to replace any file with a target-specific version of that file. This is useful for including target-specific code or variables in a build that targets a specific environment, such as production or staging.</source>
          <target state="translated">CLI的主要配置文件 &lt;code&gt;angular.json&lt;/code&gt; 在每个构建目标的配置中都包含一个 &lt;code&gt;fileReplacements&lt;/code&gt; 部分，该文件可让您用该文件的目标特定版本替换任何文件。这对于在针对特定环境（例如生产或登台）的构建中包含特定于目标的代码或变量很有用。</target>
        </trans-unit>
        <trans-unit id="bc356e186170cb322f0a32a7caaa8cd2b339ae78" translate="yes" xml:space="preserve">
          <source>The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; or&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags here manually.</source>
          <target state="translated">有人访问您的网站时提供的HTML主页。CLI在构建应用程序时会自动添加所有JavaScript和CSS文件，因此通常不需要在此处手动添加任何 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="17744529805032738d2ce1337233da25a724ce4c" translate="yes" xml:space="preserve">
          <source>The main entry point for your application. Compiles the application with the &lt;a href=&quot;glossary#jit&quot;&gt;JIT compiler&lt;/a&gt; and bootstraps the application's root module (AppModule) to run in the browser. You can also use the &lt;a href=&quot;aot-compiler&quot;&gt;AOT compiler&lt;/a&gt; without changing any code by appending the &lt;code&gt;--aot&lt;/code&gt; flag to the CLI &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt; commands.</source>
          <target state="translated">应用程序的主要入口点。使用&lt;a href=&quot;glossary#jit&quot;&gt;JIT编译器&lt;/a&gt;编译应用程序，并引导应用程序的根模块（AppModule）在浏览器中运行。您也可以使用&lt;a href=&quot;aot-compiler&quot;&gt;AOT编译器&lt;/a&gt;不通过附加改变任何代码 &lt;code&gt;--aot&lt;/code&gt; 标志的CLI &lt;code&gt;build&lt;/code&gt; 和 &lt;code&gt;serve&lt;/code&gt; 的命令。</target>
        </trans-unit>
        <trans-unit id="d0f2908e2176918f5ec05936850fcaeb40f2aee6" translate="yes" xml:space="preserve">
          <source>The main entry point for your unit tests, with some Angular-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">你的单元测试的主要入口点,有一些Angular特定的配置。你通常不需要编辑这个文件。</target>
        </trans-unit>
        <trans-unit id="5b6bdd0aa0401fe9344207ee1da20b9b5122cf9c" translate="yes" xml:space="preserve">
          <source>The main entry point for your unit tests, with some library-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">你的单元测试的主要入口点,包括一些特定库的配置。你通常不需要编辑这个文件。</target>
        </trans-unit>
        <trans-unit id="82234ab06c7273360d9dcd17147814d4ef5d22aa" translate="yes" xml:space="preserve">
          <source>The main form is visible from the start because the &lt;code&gt;submitted&lt;/code&gt; property is false until you submit the form, as this fragment from the &lt;code&gt;HeroFormComponent&lt;/code&gt; shows:</source>
          <target state="translated">主表单从一开始就可见，因为在您提交表单之前， &lt;code&gt;submitted&lt;/code&gt; 属性是false，因为 &lt;code&gt;HeroFormComponent&lt;/code&gt; 的此片段显示：</target>
        </trans-unit>
        <trans-unit id="89228ab70b4f42a9a833463f6fddc8df700cd69f" translate="yes" xml:space="preserve">
          <source>The main section heading should be followed by a blank line and then the content for that heading.</source>
          <target state="translated">主节标题后应空一行,然后是该标题的内容。</target>
        </trans-unit>
        <trans-unit id="bedc39e25a378ea1e74b444633eb2567c1be4edd" translate="yes" xml:space="preserve">
          <source>The marble library constructs the corresponding observable, which the test sets as the &lt;code&gt;getQuote&lt;/code&gt; spy's return value.</source>
          <target state="translated">大理石库构造相应的observable，测试将其设置为 &lt;code&gt;getQuote&lt;/code&gt; 间谍的返回值。</target>
        </trans-unit>
        <trans-unit id="c152d7d77841879fc15850ada302d9a7604f9a5f" translate="yes" xml:space="preserve">
          <source>The markdown is as follows:</source>
          <target state="translated">标记如下:</target>
        </trans-unit>
        <trans-unit id="8748eb03cd3a2a31a452da21e18e8fe67fa2c88f" translate="yes" xml:space="preserve">
          <source>The markup for the above example is:</source>
          <target state="translated">上述例子的标记是:</target>
        </trans-unit>
        <trans-unit id="82140eb18cda68dafbe96adfecdd4de9ecc691a0" translate="yes" xml:space="preserve">
          <source>The match url, &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt;, will rewrite every request. You'll have to adjust this if you want some requests to get through, such as web API requests.</source>
          <target state="translated">匹配网址 &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt; 将重写每个请求。如果您希望某些请求能够通过，例如Web API请求，则必须进行调整。</target>
        </trans-unit>
        <trans-unit id="3ad0897b9ee03f741fd1c01511860b55ea1d75e0" translate="yes" xml:space="preserve">
          <source>The matrix parameters associated with a segment</source>
          <target state="translated">与某段相关的矩阵参数</target>
        </trans-unit>
        <trans-unit id="a76d5b3e6982be276ae88de5739d5fed54638bd2" translate="yes" xml:space="preserve">
          <source>The matrix parameters scoped to this route</source>
          <target state="translated">该途径的矩阵参数范围</target>
        </trans-unit>
        <trans-unit id="90e33c849863252496fc8d6d880afd0e291d9d8e" translate="yes" xml:space="preserve">
          <source>The maximum threshold for error relative to the baseline.</source>
          <target state="translated">相对于基线的最大误差阈值。</target>
        </trans-unit>
        <trans-unit id="53883cb7c75145e23e98e86bbe3bd3c7cc0a7688" translate="yes" xml:space="preserve">
          <source>The maximum threshold for warning relative to the baseline.</source>
          <target state="translated">相对于基线的最大预警阈值;</target>
        </trans-unit>
        <trans-unit id="87bec61d846af1bc84cef595bb56f5dd04dd2458" translate="yes" xml:space="preserve">
          <source>The messages will look better when you add the private CSS styles to &lt;code&gt;messages.component.css&lt;/code&gt; as listed in one of the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt; tabs below.</source>
          <target state="translated">将私有CSS样式添加到 &lt;code&gt;messages.component.css&lt;/code&gt; 中时，消息看起来会更好，如下面的&lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&amp;ldquo;最终代码查看&amp;rdquo;&lt;/a&gt;标签之一所示。</target>
        </trans-unit>
        <trans-unit id="f85700447fab8625b23e50aafd91dead8193e775" translate="yes" xml:space="preserve">
          <source>The metadata for a component class associates it with a &lt;em&gt;template&lt;/em&gt; that defines a view. A template combines ordinary HTML with Angular &lt;em&gt;directives&lt;/em&gt; and &lt;em&gt;binding markup&lt;/em&gt; that allow Angular to modify the HTML before rendering it for display.</source>
          <target state="translated">组件类的元数据将其与定义视图的&lt;em&gt;模板&lt;/em&gt;相关联。模板将普通的HTML与Angular &lt;em&gt;指令&lt;/em&gt;和&lt;em&gt;绑定标记&lt;/em&gt;结合在一起，使Angular可以在渲染HTML以便显示之前修改HTML。</target>
        </trans-unit>
        <trans-unit id="b6b4287af878accde817a3a3ec85445a29b32903" translate="yes" xml:space="preserve">
          <source>The metadata for a component tells Angular where to get the major building blocks that it needs to create and present the component and its view. In particular, it associates a &lt;em&gt;template&lt;/em&gt; with the component, either directly with inline code, or by reference. Together, the component and its template describe a &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="translated">组件的元数据告诉Angular在哪里获取创建和呈现组件及其视图所需的主要构建块。特别是，它直接通过内联代码或通过引用将&lt;em&gt;模板&lt;/em&gt;与组件关联。组件及其模板一起描述了一个&lt;em&gt;view&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2f487cef4aac90b4da53c7fc9e447312b42cba73" translate="yes" xml:space="preserve">
          <source>The metadata for a service class provides the information Angular needs to make it available to components through &lt;em&gt;dependency injection (DI)&lt;/em&gt;.</source>
          <target state="translated">服务类的元数据提供Angular通过&lt;em&gt;依赖项注入（DI）&lt;/em&gt;使组件可使用的信息。</target>
        </trans-unit>
        <trans-unit id="da2ac4fe5a7aeb6c5ff2fac4828b395f67c727b6" translate="yes" xml:space="preserve">
          <source>The method is called &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; because you configure the router at the application's root level. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.</source>
          <target state="translated">该方法称为 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; ,因为您是在应用程序的根级别配置路由器的。所述 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 方法提供所需要的路由选择服务提供商和指令，并且基于当前的浏览器的URL初始导航。</target>
        </trans-unit>
        <trans-unit id="f94bbf603605c0e2d8cf99c4a32636376256c78c" translate="yes" xml:space="preserve">
          <source>The method returns immediately with an empty array if there is no search term. The rest of it closely resembles &lt;code&gt;getHeroes()&lt;/code&gt;, the only significant difference being the URL, which includes a query string with the search term.</source>
          <target state="translated">如果没有搜索词，该方法将立即返回一个空数组。它的其余部分与 &lt;code&gt;getHeroes()&lt;/code&gt; 非常相似，唯一的区别是URL，URL包括带有搜索词的查询字符串。</target>
        </trans-unit>
        <trans-unit id="b8bd6826e2d0fcb10e3e7991b3567fdd80af26cd" translate="yes" xml:space="preserve">
          <source>The method that is called when the disabled status changes.</source>
          <target state="translated">禁用状态改变时调用的方法。</target>
        </trans-unit>
        <trans-unit id="ce97f7be34496d68074082adcce30ef92c9fdc1b" translate="yes" xml:space="preserve">
          <source>The method that is called when the value changes</source>
          <target state="translated">值变化时调用的方法</target>
        </trans-unit>
        <trans-unit id="6db6edec01a98f400bce87dd07f007a8049e3a79" translate="yes" xml:space="preserve">
          <source>The methods now return observables of type &lt;code&gt;PhoneData&lt;/code&gt; and &lt;code&gt;PhoneData[]&lt;/code&gt;. This is a type you don't have yet. Add a simple interface for it:</source>
          <target state="translated">这些方法现在返回类型为 &lt;code&gt;PhoneData&lt;/code&gt; 和 &lt;code&gt;PhoneData[]&lt;/code&gt; 可观察对象。这是您还没有的类型。为此添加一个简单的界面：</target>
        </trans-unit>
        <trans-unit id="1f8e626c9a26aabb72b198cad89d9bbfb757820a" translate="yes" xml:space="preserve">
          <source>The microsyntax parser title-cases all directives and prefixes them with the directive's attribute name, such as &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; input properties, &lt;code&gt;of&lt;/code&gt; and &lt;code&gt;trackBy&lt;/code&gt;, become &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt;, respectively. That's how the directive learns that the list is &lt;code&gt;heroes&lt;/code&gt; and the track-by function is &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">microsyntax解析器对所有指令进行标题 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ，并在其前面加上指令的属性名称，例如ngFor。例如，的 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 输入属性 &lt;code&gt;of&lt;/code&gt; 和 &lt;code&gt;trackBy&lt;/code&gt; 分别变为 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt; 。这就是该指令得知列表是 &lt;code&gt;heroes&lt;/code&gt; ，而跟踪功能是 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt; 的方式。</target>
        </trans-unit>
        <trans-unit id="2f96b0734984c3136ba1534c85bf98f17087789f" translate="yes" xml:space="preserve">
          <source>The microtasks queue is drained at the very start of this function and after any timer callback has been executed.</source>
          <target state="translated">微任务队列在该函数开始时和任何定时器回调被执行后被排空。</target>
        </trans-unit>
        <trans-unit id="e526a37fcc75b530dfc85c73dede19ed15c064c6" translate="yes" xml:space="preserve">
          <source>The minification hazard is also compelling, if less obvious. Imagine a sorting pipe applied to a list of heroes. The list might be sorted by hero &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;planet&lt;/code&gt; of origin properties in the following way:</source>
          <target state="translated">即使不那么明显，缩小危险也很引人注目。想象一下一个应用于英雄列表的排序管道。该列表可以按以下方式按英雄 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;planet&lt;/code&gt; 来源属性排序：</target>
        </trans-unit>
        <trans-unit id="bd932f1b587e9efc31a4eaca3808cc0ea987cfe9" translate="yes" xml:space="preserve">
          <source>The minimum requirement for developing Angular applications with Visual Studio is Update 3. Earlier versions do not follow the best practices for developing applications with TypeScript. To view your version of Visual Studio 2015, go to &lt;code&gt;Help | About Visual Studio&lt;/code&gt;.</source>
          <target state="translated">使用Visual Studio开发Angular应用程序的最低要求是Update3。早期版本未遵循使用TypeScript开发应用程序的最佳实践。要查看您的Visual Studio 2015版本，请转到&amp;ldquo; &lt;code&gt;Help | About Visual Studio&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68295edfe2e8f66e1f3a2395dc30f8973b6dac7d" translate="yes" xml:space="preserve">
          <source>The minimum threshold for error relative to the baseline.</source>
          <target state="translated">相对于基线的最小误差阈值。</target>
        </trans-unit>
        <trans-unit id="cd6ff93775e18fec4a2607b05a0e4e27b92ea554" translate="yes" xml:space="preserve">
          <source>The minimum threshold for warning relative to the baseline.</source>
          <target state="translated">(a)相对于基线的最低预警阈值;</target>
        </trans-unit>
        <trans-unit id="0b1963b4bbd40e94677e855aa6f7fa65aebec820" translate="yes" xml:space="preserve">
          <source>The missing &lt;code&gt;FormsModule&lt;/code&gt;</source>
          <target state="translated">缺少的 &lt;code&gt;FormsModule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d2da31ed6256743738e7430a7ee34e71e732e9c" translate="yes" xml:space="preserve">
          <source>The model matcher relies on AngularJS &lt;code&gt;ng-model&lt;/code&gt;</source>
          <target state="translated">模型匹配器依赖于AngularJS &lt;code&gt;ng-model&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b612c6bfda69609e1109102317e5bc624c35366" translate="yes" xml:space="preserve">
          <source>The module ID of the module that contains the component. The component must be able to resolve relative URLs for templates and styles. SystemJS exposes the &lt;code&gt;__moduleName&lt;/code&gt; variable within each module. In CommonJS, this can be set to &lt;code&gt;module.id&lt;/code&gt;.</source>
          <target state="translated">包含组件的模块的模块ID。该组件必须能够解析模板和样式的相对URL。SystemJS 在每个模块中公开 &lt;code&gt;__moduleName&lt;/code&gt; 变量。在CommonJS中，可以将其设置为 &lt;code&gt;module.id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d1e56193d42e549f91f73ce49b0feaa87bbedad" translate="yes" xml:space="preserve">
          <source>The module ID to use for importing a flat module (when &lt;code&gt;flatModuleOutFile&lt;/code&gt; is true). References generated by the template compiler use this module name when importing symbols from the flat module. Ignored if &lt;code&gt;flatModuleOutFile&lt;/code&gt; is false.</source>
          <target state="translated">用于导入平面模块的模块ID（当 &lt;code&gt;flatModuleOutFile&lt;/code&gt; 为true时）。从平面模块导入符号时，模板编译器生成的引用使用此模块名称。如果 &lt;code&gt;flatModuleOutFile&lt;/code&gt; 为false，则忽略。</target>
        </trans-unit>
        <trans-unit id="5455a8d2855bb168b7bc39366f2e640359d610c2" translate="yes" xml:space="preserve">
          <source>The module definition passed to &lt;code&gt;configureTestingModule&lt;/code&gt; is a subset of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">传递给 &lt;code&gt;configureTestingModule&lt;/code&gt; 的模块定义是 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据属性的子集。</target>
        </trans-unit>
        <trans-unit id="f9ff3126a97dd2fd2099d3e56f0696f54b70dd23" translate="yes" xml:space="preserve">
          <source>The module's &lt;code&gt;declarations&lt;/code&gt; array tells Angular which components belong to that module. As you create more components, add them to &lt;code&gt;declarations&lt;/code&gt;.</source>
          <target state="translated">模块的 &lt;code&gt;declarations&lt;/code&gt; 数组告诉Angular哪些​​组件属于该模块。创建更多组件时，请将它们添加到 &lt;code&gt;declarations&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77ab0288332bb3f75ca93faaa0848559f0efc9c4" translate="yes" xml:space="preserve">
          <source>The module's &lt;code&gt;imports&lt;/code&gt; array appears exclusively in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata object. It tells Angular about other NgModules that this particular module needs to function properly.</source>
          <target state="translated">模块的 &lt;code&gt;imports&lt;/code&gt; 数组仅出现在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据对象中。它告诉Angular有关其他NgModule的信息，此特定模块需要正常运行。</target>
        </trans-unit>
        <trans-unit id="37bab47b6d2fddd6ff6f0de2be55dffe5f0d68d5" translate="yes" xml:space="preserve">
          <source>The modules sets up the router to be used for testing. It provides spy implementations of &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt;, and &lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt;&lt;code&gt;NgModuleFactoryLoader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">这些模块设置用于测试的路由器。它提供了 &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 和&lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt; &lt;code&gt;NgModuleFactoryLoader&lt;/code&gt; 的&lt;/a&gt;间谍实现。</target>
        </trans-unit>
        <trans-unit id="b8f968dae1b11cc243c9d8715ef10f99f4c40e38" translate="yes" xml:space="preserve">
          <source>The most common property binding sets an element property to a component property value. An example is binding the &lt;code&gt;src&lt;/code&gt; property of an image element to a component's &lt;code&gt;itemImageUrl&lt;/code&gt; property:</source>
          <target state="translated">最常见的属性绑定将元素属性设置为组件属性值。一个示例是将图像元素的 &lt;code&gt;src&lt;/code&gt; 属性绑定到组件的 &lt;code&gt;itemImageUrl&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="0e2d09ba31c42d96a1468928f0746f68810289cf" translate="yes" xml:space="preserve">
          <source>The most common use of schematics, however, is to integrate an Angular library with the Angular CLI. You can do this by creating the schematic files directly within the library project in an Angular workspace, without using the Schematics CLI. See &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">但是，原理图最常见的用途是将Angular库与Angular CLI集成在一起。您可以通过直接在Angular工作空间的库项目中创建原理图文件来执行此操作，而无需使用Schematics CLI。请参阅&lt;a href=&quot;schematics-for-libraries&quot;&gt;库原理图&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f03ef21da8a8d1525f2de629dfd2cc725b3a1d3c" translate="yes" xml:space="preserve">
          <source>The most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don't require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via &lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt; and if needed, these tasks can reenter the Angular zone via &lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;.</source>
          <target state="translated">此服务最常见的用途是在启动包含一个或多个不需要Angular处理UI更新或错误处理的异步任务的工作时优化性能。可以通过&lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt;启动这些任务，如果需要，可以通过&lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;重新进入Angular区域。</target>
        </trans-unit>
        <trans-unit id="d721ef30c8c2d93ee7d6cc51782e960cbb70e267" translate="yes" xml:space="preserve">
          <source>The most common validation is making a field required. This section describes how to add a required validation to the &lt;code&gt;firstName&lt;/code&gt; control.</source>
          <target state="translated">最常见的验证是将字段设为必填项。本节介绍如何向 &lt;code&gt;firstName&lt;/code&gt; 控件添加所需的验证。</target>
        </trans-unit>
        <trans-unit id="5bfdb12a001db3d37570c28c95a12f339133fefb" translate="yes" xml:space="preserve">
          <source>The most common way to get a hold of shared services is through Angular &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection&lt;/a&gt;, rather than through the module system (importing a module will result in a new service instance, which is not a typical usage).</source>
          <target state="translated">获得共享服务的最常见方法是通过Angular &lt;a href=&quot;dependency-injection&quot;&gt;依赖注入&lt;/a&gt;，而不是通过模块系统（导入模块将导致新的服务实例，这不是典型用法）。</target>
        </trans-unit>
        <trans-unit id="a8d2e49dd96691f76f1b0107dae749dd4d4cfd1a" translate="yes" xml:space="preserve">
          <source>The most important &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator annotates the top-level &lt;strong&gt;AppModule&lt;/strong&gt; class.</source>
          <target state="translated">最重要的 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器为顶级&lt;strong&gt;AppModule&lt;/strong&gt;类添加注释。</target>
        </trans-unit>
        <trans-unit id="696217913dab3bcc82d27ff3f8a194e99b19b4d3" translate="yes" xml:space="preserve">
          <source>The most recent stable released version of Angular appears in the &lt;a href=&quot;../index&quot;&gt;Angular documentation&lt;/a&gt; at the bottom of the left side navigation. For example, &lt;code&gt;stable (v5.2.9)&lt;/code&gt;.</source>
          <target state="translated">Angular的最新稳定发行版显示在左侧导航&lt;a href=&quot;../index&quot;&gt;栏&lt;/a&gt;底部的Angular文档中。例如， &lt;code&gt;stable (v5.2.9)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b203ac14927d287cb1b24febc038b8400723e19" translate="yes" xml:space="preserve">
          <source>The most straight forward way to get accurate typings is to cast the return value of the relevant DOM methods to the correct type. For that, you can use the &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; types (both exported from &lt;code&gt;@angular/elements&lt;/code&gt;):</source>
          <target state="translated">获得准确类型的最直接方法是将相关DOM方法的返回值转换为正确的类型。为此，您可以使用 &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; 类型（均从 &lt;code&gt;@angular/elements&lt;/code&gt; 导出）：</target>
        </trans-unit>
        <trans-unit id="6a00a106ce13b09ae830b89d6a9ec79692548add" translate="yes" xml:space="preserve">
          <source>The name control sets up two built-in validators&amp;mdash;&lt;code&gt;Validators.required&lt;/code&gt; and &lt;code&gt;Validators.minLength(4)&lt;/code&gt;&amp;mdash;and one custom validator, &lt;code&gt;forbiddenNameValidator&lt;/code&gt;. For more details see the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section in this guide.</source>
          <target state="translated">名称控件设置了两个内置的验证 &lt;code&gt;Validators.minLength(4)&lt;/code&gt; &lt;code&gt;Validators.required&lt;/code&gt; 和Validators.minLength（4））以及一个自定义验证器 &lt;code&gt;forbiddenNameValidator&lt;/code&gt; 。有关更多详细信息，请参阅本指南中的&amp;ldquo; &lt;a href=&quot;form-validation#custom-validators&quot;&gt;自定义验证器&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="bd303e4295a148f60c77b1b8f935a0d9785ceabf" translate="yes" xml:space="preserve">
          <source>The name for the control</source>
          <target state="translated">控制的名称</target>
        </trans-unit>
        <trans-unit id="3f5bffaecc38c665fdf4934a9248d6901b121e04" translate="yes" xml:space="preserve">
          <source>The name of binding variable</source>
          <target state="translated">绑定变量的名称</target>
        </trans-unit>
        <trans-unit id="ee11a869e2d385aca970768492e28306d0c02610" translate="yes" xml:space="preserve">
          <source>The name of related Universal app.</source>
          <target state="translated">相关通用应用的名称。</target>
        </trans-unit>
        <trans-unit id="f31111a73d24d0ea080510639dab3203d39876c6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; used to render the route. For an unnamed outlet, the outlet name is &lt;em&gt;primary&lt;/em&gt;.</source>
          <target state="translated">用于呈现路由的 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的名称。对于未命名的出口，出口名称为&lt;em&gt;primary&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2830e043f06ce13b7965727721f4eeda24ae55dd" translate="yes" xml:space="preserve">
          <source>The name of the DOM property to which the input property is bound.</source>
          <target state="translated">输入属性所绑定的DOM属性的名称。</target>
        </trans-unit>
        <trans-unit id="9ea6252fe6bfcbe28e4a7dbd02f705de12a2b425" translate="yes" xml:space="preserve">
          <source>The name of the DOM property to which the output property is bound.</source>
          <target state="translated">输出属性所绑定的DOM属性的名称。</target>
        </trans-unit>
        <trans-unit id="a34788f4dbd8d335c3d16d2725eb10d84db5f8eb" translate="yes" xml:space="preserve">
          <source>The name of the Karma configuration file.</source>
          <target state="translated">Karma配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="7bc259cccdbc4feb53380144d564c6c9acfe48ea" translate="yes" xml:space="preserve">
          <source>The name of the NgModule.</source>
          <target state="translated">NgModule的名称。</target>
        </trans-unit>
        <trans-unit id="31c15168aefcb147a81f6d56a4fb545633af3cbb" translate="yes" xml:space="preserve">
          <source>The name of the Protractor configuration file.</source>
          <target state="translated">Protractor 配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="a5161c8757038b183e435833dbc3d24f71cae7ec" translate="yes" xml:space="preserve">
          <source>The name of the TSLint configuration file.</source>
          <target state="translated">TSLint配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="f4e2073f1c9d163ee7d923261881502e64ca10d8" translate="yes" xml:space="preserve">
          <source>The name of the TypeScript configuration file for tests.</source>
          <target state="translated">测试的TypeScript配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="ca18d6818e4f88c372ec7928897bf20767d10b87" translate="yes" xml:space="preserve">
          <source>The name of the TypeScript configuration file.</source>
          <target state="translated">TypeScript配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="23b607725624b97d6681994d12395b88f5004fa9" translate="yes" xml:space="preserve">
          <source>The name of the application directory.</source>
          <target state="translated">应用程序目录的名称。</target>
        </trans-unit>
        <trans-unit id="9bf434ae63b3e0efedb894f4541221d8148e3143" translate="yes" xml:space="preserve">
          <source>The name of the application folder.</source>
          <target state="translated">应用程序文件夹的名称。</target>
        </trans-unit>
        <trans-unit id="98dd415e8f45a9d589f3ab22fe8844e6831aaeb3" translate="yes" xml:space="preserve">
          <source>The name of the attribute that has changed.</source>
          <target state="translated">已更改的属性名称。</target>
        </trans-unit>
        <trans-unit id="51e356de047f692621f1ac826eda16393c2f1d57" translate="yes" xml:space="preserve">
          <source>The name of the attribute whose value can be injected.</source>
          <target state="translated">可注入值的属性名称。</target>
        </trans-unit>
        <trans-unit id="0049c017534779feed3c5a4e10e97646ee097a91" translate="yes" xml:space="preserve">
          <source>The name of the bundle (for &lt;code&gt;type=bundle&lt;/code&gt;).</source>
          <target state="translated">捆绑包的名称（对于 &lt;code&gt;type=bundle&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b095d5334d88f321e32a2bec17d4998f29183ab5" translate="yes" xml:space="preserve">
          <source>The name of the component.</source>
          <target state="translated">组件的名称;</target>
        </trans-unit>
        <trans-unit id="298fb556486176a59b92ee293ee40dc19082796f" translate="yes" xml:space="preserve">
          <source>The name of the enum.</source>
          <target state="translated">枚举的名称。</target>
        </trans-unit>
        <trans-unit id="4ac12cbaf7ddc32136d2246eea1e25012d5463a2" translate="yes" xml:space="preserve">
          <source>The name of the event to listen for.</source>
          <target state="translated">要监听的事件名称。</target>
        </trans-unit>
        <trans-unit id="3effaffa0019768d26589b5c5f6cbf735fb6f172" translate="yes" xml:space="preserve">
          <source>The name of the index file</source>
          <target state="translated">索引文件的名称</target>
        </trans-unit>
        <trans-unit id="d4bad0ca50233e344d10d5f4399e54a6b4d776fb" translate="yes" xml:space="preserve">
          <source>The name of the interface.</source>
          <target state="translated">接口的名称。</target>
        </trans-unit>
        <trans-unit id="e0dae223e862076c307be059fb3da2195512e15e" translate="yes" xml:space="preserve">
          <source>The name of the library.</source>
          <target state="translated">图书馆的名称。</target>
        </trans-unit>
        <trans-unit id="0e4e86dc522df63f846535a545048ecb92d2ef5a" translate="yes" xml:space="preserve">
          <source>The name of the main entry-point file.</source>
          <target state="translated">主入口点文件的名称。</target>
        </trans-unit>
        <trans-unit id="1ae438b15dd77fd8ad30e891d288ec894f9c8b5a" translate="yes" xml:space="preserve">
          <source>The name of the new app.</source>
          <target state="translated">新应用的名称。</target>
        </trans-unit>
        <trans-unit id="c05ae963758a0b1ea71e624aa37d935aad1862cc" translate="yes" xml:space="preserve">
          <source>The name of the new class.</source>
          <target state="translated">新类的名称。</target>
        </trans-unit>
        <trans-unit id="1cc12f20eb95c9010460b29584ae08cc288e4233" translate="yes" xml:space="preserve">
          <source>The name of the new directive.</source>
          <target state="translated">新指令的名称。</target>
        </trans-unit>
        <trans-unit id="e94c910c3587ab8593febb3f805bcd0616accd65" translate="yes" xml:space="preserve">
          <source>The name of the new route guard.</source>
          <target state="translated">新航线卫士的名字。</target>
        </trans-unit>
        <trans-unit id="05fef20c845e23cfb269d81a5518f8c2dc19a116" translate="yes" xml:space="preserve">
          <source>The name of the new workspace and initial project.</source>
          <target state="translated">新工作区的名称和初始项目。</target>
        </trans-unit>
        <trans-unit id="4f3f5dc853fd89760b7214e5ccac1a838a94a12a" translate="yes" xml:space="preserve">
          <source>The name of the pipe.</source>
          <target state="translated">管的名字。</target>
        </trans-unit>
        <trans-unit id="84108afbf0ae3d52386033a2d683d8a1ae512bb7" translate="yes" xml:space="preserve">
          <source>The name of the polyfills file.</source>
          <target state="translated">polyfills文件的名称。</target>
        </trans-unit>
        <trans-unit id="60a0ead0a1aaa4e2f2b4233c956828d7b450a96e" translate="yes" xml:space="preserve">
          <source>The name of the project in which to create the enum. Default is the configured default project for the workspace.</source>
          <target state="translated">创建枚举的项目名称。默认情况下是工作区配置的默认项目。</target>
        </trans-unit>
        <trans-unit id="acc889a5813553b91add89b3f03c313d7a4b86e6" translate="yes" xml:space="preserve">
          <source>The name of the project to build. Can be an application or a library.</source>
          <target state="translated">要构建的项目名称。可以是一个应用程序或一个库。</target>
        </trans-unit>
        <trans-unit id="5db5ca31c4c34286b71367170d486bbec874adc3" translate="yes" xml:space="preserve">
          <source>The name of the project to deploy.</source>
          <target state="translated">要部署的项目名称。</target>
        </trans-unit>
        <trans-unit id="877a3cd4d86d1c683955bcdb8afd34543824fbc6" translate="yes" xml:space="preserve">
          <source>The name of the project to lint.</source>
          <target state="translated">的项目名称,以衬托。</target>
        </trans-unit>
        <trans-unit id="0c0ea6bda23de88805444a87357d6fc67352074e" translate="yes" xml:space="preserve">
          <source>The name of the project.</source>
          <target state="translated">项目名称;</target>
        </trans-unit>
        <trans-unit id="5cca2fedb252b808c68e0001d796a768f14fe5b8" translate="yes" xml:space="preserve">
          <source>The name of the related client app.</source>
          <target state="translated">相关客户端应用的名称。</target>
        </trans-unit>
        <trans-unit id="0e1d1073f831d9e075296e86ca7a2b766cf84ddc" translate="yes" xml:space="preserve">
          <source>The name of the related client app. Required in place of &quot;project&quot;.</source>
          <target state="translated">相关客户端应用的名称。需要代替 &quot;项目&quot;。</target>
        </trans-unit>
        <trans-unit id="2b4489e5f4e2653828a596bc22eebe8452c680c4" translate="yes" xml:space="preserve">
          <source>The name of the root NgModule class.</source>
          <target state="translated">NgModule根类的名称。</target>
        </trans-unit>
        <trans-unit id="39f772f8508b793cd949b7d95f84bb953733b091" translate="yes" xml:space="preserve">
          <source>The name of the root NgModule file.</source>
          <target state="translated">NgModule根文件的名称。</target>
        </trans-unit>
        <trans-unit id="b9c1e32c2285950cd5c0ea125336cadcabee7ee5" translate="yes" xml:space="preserve">
          <source>The name of the root module class.</source>
          <target state="translated">根模块类的名称。</target>
        </trans-unit>
        <trans-unit id="e79f3a656af3a23c870229cdcf812e615d254ba2" translate="yes" xml:space="preserve">
          <source>The name of the root module file</source>
          <target state="translated">根模块文件的名称</target>
        </trans-unit>
        <trans-unit id="d1af03b5050c51d9047b1136086eb139e2bfa56a" translate="yes" xml:space="preserve">
          <source>The name of the routing module should parallel the name of its companion module, using the suffix &quot;Routing&quot;. For example, &lt;code&gt;FooModule&lt;/code&gt; in &lt;code&gt;foo.module.ts&lt;/code&gt; has a routing module named &lt;code&gt;FooRoutingModule&lt;/code&gt; in &lt;code&gt;foo-routing.module.ts&lt;/code&gt;. If the companion module is the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;AppRoutingModule&lt;/code&gt; adds router configuration to its imports with &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt;. All other routing modules are children that import &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt;.</source>
          <target state="translated">路由模块的名称应与后缀模块的名称平行，并使用后缀&amp;ldquo; Routing&amp;rdquo;。例如， &lt;code&gt;FooModule&lt;/code&gt; 在 &lt;code&gt;foo.module.ts&lt;/code&gt; 具有名为路由模块 &lt;code&gt;FooRoutingModule&lt;/code&gt; 在 &lt;code&gt;foo-routing.module.ts&lt;/code&gt; 。如果配套模块是根 &lt;code&gt;AppModule&lt;/code&gt; ，则 &lt;code&gt;AppRoutingModule&lt;/code&gt; 将路由器配置添加到其导入中，使用 &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; 。所有其他路由模块都是导入 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; 的子级。</target>
        </trans-unit>
        <trans-unit id="5cb7b85a598a028b7c4208d8cba347b086c65cad" translate="yes" xml:space="preserve">
          <source>The name of the service.</source>
          <target state="translated">的服务名称。</target>
        </trans-unit>
        <trans-unit id="eb80b5650274c357613ae29fbc7ee992a7295266" translate="yes" xml:space="preserve">
          <source>The name of the state from which the animation is triggered.</source>
          <target state="translated">触发动画的状态名称。</target>
        </trans-unit>
        <trans-unit id="642538b3255d34b3733d341540a32bdf0783bc44" translate="yes" xml:space="preserve">
          <source>The name of the state in which the animation completes.</source>
          <target state="translated">动画完成的状态名称。</target>
        </trans-unit>
        <trans-unit id="9e83f52375e1bbe1dd110ed6d2d07fc578d60fbe" translate="yes" xml:space="preserve">
          <source>The name of the style.</source>
          <target state="translated">式的名称。</target>
        </trans-unit>
        <trans-unit id="d5dd95f899057794c059b568058ef2fda9777be8" translate="yes" xml:space="preserve">
          <source>The name of the test entry-point file.</source>
          <target state="translated">测试入口点文件的名称。</target>
        </trans-unit>
        <trans-unit id="f00cd6c1142679bd0fe1c3ebd4ca78600af96a2c" translate="yes" xml:space="preserve">
          <source>The name of the worker.</source>
          <target state="translated">工的名字。</target>
        </trans-unit>
        <trans-unit id="6c69a9d664620bbeca7664bd75d1ad6ed2baaaed" translate="yes" xml:space="preserve">
          <source>The names of package(s) to update.</source>
          <target state="translated">要更新的软件包名称。</target>
        </trans-unit>
        <trans-unit id="1abdc0f45b3ba1f3f4aab750a1abd18ac0401e50" translate="yes" xml:space="preserve">
          <source>The namespace for the new element.</source>
          <target state="translated">新元素的命名空间。</target>
        </trans-unit>
        <trans-unit id="9443280c899669a2c6c547ccf058f0563c8d9971" translate="yes" xml:space="preserve">
          <source>The namespace in which the attribute is defined.</source>
          <target state="translated">定义属性的命名空间。</target>
        </trans-unit>
        <trans-unit id="5706a1bb56e527d4bef0f37bae074bd6120e33cc" translate="yes" xml:space="preserve">
          <source>The namespace.</source>
          <target state="translated">命名空间;</target>
        </trans-unit>
        <trans-unit id="5de4b279d3860800c1274a15257bfb7aa3d5e166" translate="yes" xml:space="preserve">
          <source>The native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element doesn't have a &lt;code&gt;form&lt;/code&gt; property, but the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive does, which allows disabling the submit button if the &lt;code&gt;itemForm.form.valid&lt;/code&gt; is invalid and passing the entire form control tree to the parent component's &lt;code&gt;onSubmit()&lt;/code&gt; method.</source>
          <target state="translated">原生 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 元素没有 &lt;code&gt;form&lt;/code&gt; 属性，但是 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令却有，如果在 &lt;code&gt;itemForm.form.valid&lt;/code&gt; 无效的情况下，并将整个表单控制树传递给父组件的 &lt;code&gt;onSubmit()&lt;/code&gt; 方法。 。</target>
        </trans-unit>
        <trans-unit id="f53c7525b5762013b1501a0e4c46863466a89451" translate="yes" xml:space="preserve">
          <source>The native DOM element at the root of the component.</source>
          <target state="translated">位于组件根部的本地DOM元素。</target>
        </trans-unit>
        <trans-unit id="29761c2a932d59dd3f7b79be5a29968749831e65" translate="yes" xml:space="preserve">
          <source>The native element at the root of the component.</source>
          <target state="translated">位于组件根部的原生元素。</target>
        </trans-unit>
        <trans-unit id="dff590b09b3db22a6980b41fca483eda9e9a641b" translate="yes" xml:space="preserve">
          <source>The navigation links at the top, left, and bottom of the screen are generated from the JSON configuration file, &lt;code&gt;content/navigation.json&lt;/code&gt;.</source>
          <target state="translated">屏幕顶部，左侧和底部的导航链接是根据JSON配置文件生成的， &lt;code&gt;content/navigation.json&lt;/code&gt; 生成的。</target>
        </trans-unit>
        <trans-unit id="3403c9d3de501a04ade350bc06e6b24f8560df85" translate="yes" xml:space="preserve">
          <source>The navigation state that was previously supplied to the &lt;code&gt;pushState&lt;/code&gt; call, when the navigation is triggered by a &lt;code&gt;popstate&lt;/code&gt; event. Otherwise null.</source>
          <target state="translated">当由 &lt;code&gt;popstate&lt;/code&gt; 事件触发导航时，先前提供给 &lt;code&gt;pushState&lt;/code&gt; 调用的导航状态。否则为null。</target>
        </trans-unit>
        <trans-unit id="4c5c2daf86d485506deecd53ed0077e779f790db" translate="yes" xml:space="preserve">
          <source>The need for this polyfill was removed in Angular version 8.0 (&lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;see #14473&lt;/a&gt;), rendering the presence of the poylfill in most Angular applications unnecessary. Because the polyfill can be depended on by 3rd-party libraries, instead of removing it from all Angular projects, we are deprecating the requirement for this polyfill as of version 8.0. This should give library authors and application developers sufficient time to evaluate if they need the polyfill, and perform any refactoring necessary to remove the dependency on it.</source>
          <target state="translated">在Angular 8.0版中不再需要这种polyfill（&lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;请参阅＃14473&lt;/a&gt;），从而使大多数Angular应用程序中都不需要使用poylfill。因为polyfill可以由第三方库依赖，而不是从所有Angular项目中删除它，所以我们不建议从8.0版本开始使用此polyfill。这应该给库作者和应用程序开发人员足够的时间来评估他们是否需要polyfill，并执行必要的重构以消除对其的依赖。</target>
        </trans-unit>
        <trans-unit id="9926b8eddb28f5b61fe9e5c8e2449b04b9fca67b" translate="yes" xml:space="preserve">
          <source>The net result is an AngularJS directive called &lt;code&gt;heroDetail&lt;/code&gt;, that you can use like any other directive in AngularJS templates.</source>
          <target state="translated">最终结果是一个名为 &lt;code&gt;heroDetail&lt;/code&gt; 的AngularJS指令，您可以像AngularJS模板中的任何其他指令一样使用它。</target>
        </trans-unit>
        <trans-unit id="363efe528cca3a39d4ac1f20d51e40123493e611" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;Phone&lt;/code&gt; service has the same features as the original, &lt;code&gt;ngResource&lt;/code&gt;-based service. Because it's an Angular service, you register it with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">新的 &lt;code&gt;Phone&lt;/code&gt; 服务具有与原始的基于 &lt;code&gt;ngResource&lt;/code&gt; 的服务相同的功能。因为它是Angular服务，所以您要在 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 提供程序中注册它：</target>
        </trans-unit>
        <trans-unit id="df21a5f33d940b8fd543f9a1645f478b67bd8405" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;PhoneListComponent&lt;/code&gt; uses the Angular &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, located in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;. Add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports, declare the new &lt;code&gt;PhoneListComponent&lt;/code&gt; and finally add it to &lt;code&gt;entryComponents&lt;/code&gt; since you downgraded it:</source>
          <target state="translated">新 &lt;code&gt;PhoneListComponent&lt;/code&gt; 使用角 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令，坐落在 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。将 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 导入中，声明新的 &lt;code&gt;PhoneListComponent&lt;/code&gt; 并最终将其添加到 &lt;code&gt;entryComponents&lt;/code&gt; 中,因为您将其降级了：</target>
        </trans-unit>
        <trans-unit id="b4153d9c7e00866dc99a220129088a88c0dd7d73" translate="yes" xml:space="preserve">
          <source>The new API is a smaller, easier, and more powerful way to make HTTP requests in Angular. The new API simplifies the default ergonomics: There is no need to map by invoking the &lt;code&gt;.json()&lt;/code&gt; method. It also supports typed return values and interceptors.</source>
          <target state="translated">新的API是在Angular中发出HTTP请求的一种更小，更简单，更强大的方法。新的API简化了默认的人体工程学：无需通过调用 &lt;code&gt;.json()&lt;/code&gt; 方法。它还支持类型化的返回值和拦截器。</target>
        </trans-unit>
        <trans-unit id="4ba87e5244a7f2ae127d3527851072feaa64a3a5" translate="yes" xml:space="preserve">
          <source>The new app's configuration appears in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, under its project name.</source>
          <target state="translated">新应用程序的配置将出现在 &lt;code&gt;projects&lt;/code&gt; 的部分 &lt;code&gt;angular.json&lt;/code&gt; 工作区配置文件项目名称下。</target>
        </trans-unit>
        <trans-unit id="97e1064b6ccb7a71d78b43cbdff3f66b187e3101" translate="yes" xml:space="preserve">
          <source>The new application is running in Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">新应用程序正在Angular区域中运行，因此不再需要调用 &lt;code&gt;$apply()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1207f1b47a2ceddd5399dbc4b8537238ef541e74" translate="yes" xml:space="preserve">
          <source>The new application is running in an Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">新应用程序正在Angular区域中运行，因此不再需要调用 &lt;code&gt;$apply()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b35b343343c03348a9572e3228bb3c952b9ac234" translate="yes" xml:space="preserve">
          <source>The new child node.</source>
          <target state="translated">新的子节点。</target>
        </trans-unit>
        <trans-unit id="9840b56c4f6874ecf576985d09a05dbfa2eb89c5" translate="yes" xml:space="preserve">
          <source>The new child nodes.</source>
          <target state="translated">新的子节点。</target>
        </trans-unit>
        <trans-unit id="4b58eb8174eac708d6b4490ec1c0c1d10ce4c92f" translate="yes" xml:space="preserve">
          <source>The new product alert component takes a product as input from the product list. With that input, it shows or hides the &quot;Notify Me&quot; button, based on the price of the product. The Phone XL price is over $700, so the &quot;Notify Me&quot; button appears on that product.</source>
          <target state="translated">新产品提醒组件从产品列表中获取一个产品作为输入。有了这个输入,它就会根据产品的价格显示或隐藏 &quot;通知我 &quot;按钮。Phone XL的价格超过700美元,所以 &quot;Notify Me &quot;按钮会出现在该产品上。</target>
        </trans-unit>
        <trans-unit id="e6f1054918bbc968acfe9e3749cce36a53bf28d3" translate="yes" xml:space="preserve">
          <source>The new project is automatically configured for Ivy. Specifically, the enableIvy option is set to &lt;code&gt;true&lt;/code&gt; in the project's &lt;code&gt;tsconfig.app.json&lt;/code&gt; file.</source>
          <target state="translated">新项目将自动为Ivy配置。具体来说，enableIvy选项设置为 &lt;code&gt;true&lt;/code&gt; 该项目的 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="d6aa8f89505f75cf8c09ee6eb7157b95f50f181b" translate="yes" xml:space="preserve">
          <source>The new shipping component isn't hooked into any other component yet, but you can see it in the preview pane by entering the URL specified by its route. The URL has the pattern: &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; where the &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; part may be different for your StackBlitz project.</source>
          <target state="translated">新的运输组件尚未插入任何其他组件，但是您可以通过输入其路线指定的URL在预览窗格中查看它。该URL的模式： &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; 其中 &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; 部分可能是您的StackBlitz项目不同。</target>
        </trans-unit>
        <trans-unit id="3743d1eecb933641cda77a717298bd354faf0984" translate="yes" xml:space="preserve">
          <source>The new value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021d55f858f59001a051bc43ae234648f75e1184" translate="yes" xml:space="preserve">
          <source>The new value emitted by &lt;code&gt;ngModelChange&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelChange&lt;/code&gt; 发出的新值。</target>
        </trans-unit>
        <trans-unit id="c8570bda1df02aa4830c29774e26bf3a60827bab" translate="yes" xml:space="preserve">
          <source>The new value for the control that matches the structure of the group.</source>
          <target state="translated">匹配组结构的控件的新值。</target>
        </trans-unit>
        <trans-unit id="ad6dd37b94567d0ed30940d4cbe011a866a03911" translate="yes" xml:space="preserve">
          <source>The new value for the control.</source>
          <target state="translated">控件的新值。</target>
        </trans-unit>
        <trans-unit id="2118e7142b9bc910be772dcc7fd3cdf8497c8881" translate="yes" xml:space="preserve">
          <source>The new value for the directive's control.</source>
          <target state="translated">指令控制的新值。</target>
        </trans-unit>
        <trans-unit id="bdb50e4b11bfbe575629c662f2a9a5650543a293" translate="yes" xml:space="preserve">
          <source>The new value for the element</source>
          <target state="translated">该元素的新值</target>
        </trans-unit>
        <trans-unit id="7b746bb6b747d0bb853f7c9fc94c0337260bae7e" translate="yes" xml:space="preserve">
          <source>The new value for the form.</source>
          <target state="translated">表格的新值。</target>
        </trans-unit>
        <trans-unit id="61b8b2c4fe44f460d9964c15d7ca4f73c9a6c794" translate="yes" xml:space="preserve">
          <source>The new value for the view</source>
          <target state="translated">视图的新值</target>
        </trans-unit>
        <trans-unit id="021a9d13fa37792c9492e99195cbcb8204d81b7b" translate="yes" xml:space="preserve">
          <source>The new value for the view model.</source>
          <target state="translated">视图模型的新值。</target>
        </trans-unit>
        <trans-unit id="b9b227961e3d04545a92b5ce44cb233f0e0e2e32" translate="yes" xml:space="preserve">
          <source>The new value of the attribute.</source>
          <target state="translated">属性的新值。</target>
        </trans-unit>
        <trans-unit id="979eb5744be34e7601501a529cdae1a63ed19682" translate="yes" xml:space="preserve">
          <source>The new value or array of values.</source>
          <target state="translated">新的数值或数值数组。</target>
        </trans-unit>
        <trans-unit id="7b08063f6e4b837b85157e98f41e7848cc96e9ca" translate="yes" xml:space="preserve">
          <source>The new value to add.</source>
          <target state="translated">要增加的新价值。</target>
        </trans-unit>
        <trans-unit id="5846611ef08161b895e9cfae56a1ecdbe7079b9d" translate="yes" xml:space="preserve">
          <source>The new value.</source>
          <target state="translated">新值。</target>
        </trans-unit>
        <trans-unit id="f0ee706f3bb39b349be9aafea079617b78668c88" translate="yes" xml:space="preserve">
          <source>The new version waits for the &lt;code&gt;Observable&lt;/code&gt; to emit the array of heroes&amp;mdash;which could happen now or several minutes from now. The &lt;code&gt;subscribe()&lt;/code&gt; method passes the emitted array to the callback, which sets the component's &lt;code&gt;heroes&lt;/code&gt; property.</source>
          <target state="translated">新版本等待 &lt;code&gt;Observable&lt;/code&gt; 发出一系列英雄-这可能在现在发生，也可能在几分钟后发生。所述 &lt;code&gt;subscribe()&lt;/code&gt; 方法通过发射阵列到回调，其设置组件的 &lt;code&gt;heroes&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="c61fd74c6478e58dddf9101895e08ed5f52a84e1" translate="yes" xml:space="preserve">
          <source>The new workspace folder is given the specified project name, and contains configuration files at the top level.</source>
          <target state="translated">新的工作区文件夹被赋予指定的项目名称,并包含顶层的配置文件。</target>
        </trans-unit>
        <trans-unit id="ba1a5a973d20feba0e6b33242fbe750ff2e79612" translate="yes" xml:space="preserve">
          <source>The next example captures the &lt;code&gt;index&lt;/code&gt; in a variable named &lt;code&gt;i&lt;/code&gt; and displays it with the item name.</source>
          <target state="translated">下一个示例在名为 &lt;code&gt;i&lt;/code&gt; 的变量中捕获 &lt;code&gt;index&lt;/code&gt; 并将其与项目名称一起显示。</target>
        </trans-unit>
        <trans-unit id="84bf25f63e5b5153b6a3a8c5328d60b284fe5dc3" translate="yes" xml:space="preserve">
          <source>The next example displays multiple code tabs, each with its own header. It demonstrates control over display of line numbers at both the &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; levels.</source>
          <target state="translated">下一个示例显示多个代码选项卡，每个选项卡都有自己的标题。它演示了在 &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; 级别对行号显示的控制。</target>
        </trans-unit>
        <trans-unit id="7c3416618b3de0af96c0f13e3867441de913c924" translate="yes" xml:space="preserve">
          <source>The next example targets the host element again, but only when it also has the &lt;code&gt;active&lt;/code&gt; CSS class.</source>
          <target state="translated">下一个示例再次针对host元素，但前提是它也具有 &lt;code&gt;active&lt;/code&gt; CSS类。</target>
        </trans-unit>
        <trans-unit id="4a21e1e01c2158020152df86d39427a773fea8dd" translate="yes" xml:space="preserve">
          <source>The next examples focus on hook details.</source>
          <target state="translated">接下来的例子主要是钩子的细节。</target>
        </trans-unit>
        <trans-unit id="e227a13b6f5a7d5bee882fe1ac94c2d4c537d093" translate="yes" xml:space="preserve">
          <source>The next few sections review some of the coding choices in the app.</source>
          <target state="translated">接下来的几节将回顾应用中的一些编码选择。</target>
        </trans-unit>
        <trans-unit id="d607f1c8543b34b78c9b0ce11c65aed7ab530f0e" translate="yes" xml:space="preserve">
          <source>The next interceptor in the chain, or the backend if no interceptors remain in the chain.</source>
          <target state="translated">链中的下一个拦截器,如果链中没有拦截器,则为后端。</target>
        </trans-unit>
        <trans-unit id="3e4bb896f2f48b5d9aa0754ab76dc8fdd2fa0d3b" translate="yes" xml:space="preserve">
          <source>The next parent injector in the hierarchy is the &lt;code&gt;NullInjector()&lt;/code&gt;, which is the top of the tree. If you've gone so far up the tree that you are looking for a service in the &lt;code&gt;NullInjector()&lt;/code&gt;, you'll get an error unless you've used &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; because ultimately, everything ends at the &lt;code&gt;NullInjector()&lt;/code&gt; and it returns an error or, in the case of &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;. For more information on &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, see the &lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt;&lt;code&gt;@Optional()&lt;/code&gt; section&lt;/a&gt; of this guide.</source>
          <target state="translated">层次结构中的下一个父注入器是 &lt;code&gt;NullInjector()&lt;/code&gt; ，它是树的顶部。如果你至今上树了，你正在寻找的服务 &lt;code&gt;NullInjector()&lt;/code&gt; ，你会除非你用得到一个错误 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; ，因为最终，在一切都结束 &lt;code&gt;NullInjector()&lt;/code&gt; ,它返回错误，或者对于 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; ，返回 &lt;code&gt;null&lt;/code&gt; 。有关 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 更多信息，请参见本指南的&lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt; &lt;code&gt;@Optional()&lt;/code&gt; 部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2215641d1cc412c6d30b3543117da1326b1d8612" translate="yes" xml:space="preserve">
          <source>The next part of the file is where you configure your routes. &lt;em&gt;Routes&lt;/em&gt; tell the Router which view to display when a user clicks a link or pastes a URL into the browser address bar.</source>
          <target state="translated">文件的下一部分是配置路由的位置。 &lt;em&gt;路由&lt;/em&gt;告诉路由器用户单击链接或将URL粘贴到浏览器地址栏中时显示的视图。</target>
        </trans-unit>
        <trans-unit id="ffbc544c39aedf6dbed7b7a9601dc1ca2eadd500" translate="yes" xml:space="preserve">
          <source>The next section expands the app's capabilities by adding a new component&amp;mdash;a product alert&amp;mdash;as a child of the product list component.</source>
          <target state="translated">下一部分通过添加新组件（产品警报）作为产品列表组件的子组件来扩展应用程序的功能。</target>
        </trans-unit>
        <trans-unit id="e1966fcbb6a04574ff0577930e9c4f4e9d6e0dcf" translate="yes" xml:space="preserve">
          <source>The next section shows how to use template reference variables to address this problem.</source>
          <target state="translated">下一节介绍如何使用模板参考变量来解决这个问题。</target>
        </trans-unit>
        <trans-unit id="b8bc4af8ca3880db42ed25822aa4664e92d79782" translate="yes" xml:space="preserve">
          <source>The next section though, where &lt;code&gt;InspectorComponent&lt;/code&gt; is a child component of &lt;code&gt;ChildComponent&lt;/code&gt;, &lt;code&gt;InspectorComponent&lt;/code&gt; is inside the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;, so when it asks for the &lt;code&gt;AnimalService&lt;/code&gt;, it sees the 🐶 (puppy).</source>
          <target state="translated">但是下一部分，其中 &lt;code&gt;InspectorComponent&lt;/code&gt; 是 &lt;code&gt;ChildComponent&lt;/code&gt; 的子组件， &lt;code&gt;InspectorComponent&lt;/code&gt; 在 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 内部，因此当它要求输入 &lt;code&gt;AnimalService&lt;/code&gt; 时，它会看到🐶（puppy）。</target>
        </trans-unit>
        <trans-unit id="d59c51bbebc61089285e2a0c88cc2af2c45f0029" translate="yes" xml:space="preserve">
          <source>The next step is to add a binding to the &lt;code&gt;ChildComponent&lt;/code&gt; template.</source>
          <target state="translated">下一步是将绑定添加到 &lt;code&gt;ChildComponent&lt;/code&gt; 模板。</target>
        </trans-unit>
        <trans-unit id="1ac5a9d05f16c0b0c07e2483f2426a42fa242157" translate="yes" xml:space="preserve">
          <source>The next step is to bind the property in the parent component's template. In this example, the parent component template is &lt;code&gt;app.component.html&lt;/code&gt;.</source>
          <target state="translated">下一步是将属性绑定到父组件的模板中。在此示例中，父组件模板是 &lt;code&gt;app.component.html&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06656dd8fd58ec3c830e42d3bef15b1d6ea80756" translate="yes" xml:space="preserve">
          <source>The next step is to create a new alert feature that takes a product as an input. The alert checks the product's price, and, if the price is greater than $700, displays a &quot;Notify Me&quot; button that lets users sign up for notifications when the product goes on sale.</source>
          <target state="translated">下一步是创建一个新的提醒功能,以产品作为输入。警报会检查产品的价格,如果价格大于700美元,就会显示一个 &quot;通知我 &quot;按钮,让用户在产品打折时注册通知。</target>
        </trans-unit>
        <trans-unit id="90b831079de1c7557999e837b31d0f72e7c2ee44" translate="yes" xml:space="preserve">
          <source>The next step is to define an object model that can describe all scenarios needed by the form functionality. The hero application process involves a form with a lot of questions. The &lt;em&gt;question&lt;/em&gt; is the most fundamental object in the model.</source>
          <target state="translated">下一步是定义一个对象模型，该对象模型可以描述表单功能所需的所有方案。英雄申请过程涉及一个带有很多问题的表格。该&lt;em&gt;问题&lt;/em&gt;是在模型的最根本目的。</target>
        </trans-unit>
        <trans-unit id="fb2e63ba1bd8fdeb7779c136f5fcfde3c35d6213" translate="yes" xml:space="preserve">
          <source>The next version of the documentation is available at &lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;. This includes any documentation for Beta or Release Candidate features and APIs.</source>
          <target state="translated">下一版本的文档位于&lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;。这包括有关Beta或Release Candidate功能和API的所有文档。</target>
        </trans-unit>
        <trans-unit id="4a180ac00e9f3dbf51f785693d56733d6c28e423" translate="yes" xml:space="preserve">
          <source>The ng module for the server.</source>
          <target state="translated">服务器的ng模块。</target>
        </trans-unit>
        <trans-unit id="31db521a10f7d13d6ad0164b67edb26307449751" translate="yes" xml:space="preserve">
          <source>The ng module for the worker app side.</source>
          <target state="translated">工应用侧的ng模块。</target>
        </trans-unit>
        <trans-unit id="86a442380fdcdb994033a6dea7124eb5d66e6cae" translate="yes" xml:space="preserve">
          <source>The ngUpgrade library in Angular is a very useful tool for upgrading anything but the smallest of applications. With it you can mix and match AngularJS and Angular components in the same application and have them interoperate seamlessly. That means you don't have to do the upgrade work all at once, since there's a natural coexistence between the two frameworks during the transition period.</source>
          <target state="translated">Angular中的ngUpgrade库是一个非常有用的工具,除了最小的应用程序之外,其他的应用程序都可以升级。有了它,你可以在同一个应用中混搭AngularJS和Angular组件,并让它们无缝对接。这意味着你不必一次性完成升级工作,因为在过渡期内,两个框架之间会自然共存。</target>
        </trans-unit>
        <trans-unit id="0107243ec8cbe329d40de532f38d6e455ea3c867" translate="yes" xml:space="preserve">
          <source>The node.</source>
          <target state="translated">该节点。</target>
        </trans-unit>
        <trans-unit id="04ba803c94c0cf27fa47cf0f40112d507c07b504" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator ( &lt;code&gt;!&lt;/code&gt; )</source>
          <target state="translated">非null断言运算符（ &lt;code&gt;!&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b8aa84c688682535f84bf8169abdd6d8bb08e9fc" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator should be used sparingly as refactoring of the component might break this constraint.</source>
          <target state="translated">非空断言操作符应尽量少用,因为组件的重构可能会破坏这个约束。</target>
        </trans-unit>
        <trans-unit id="931e7b111d738b68a612433a6d150f27f4217c3a" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, is optional with the exception that you must use it when you turn on strict null checks.</source>
          <target state="translated">非空断言运算符 &lt;code&gt;!&lt;/code&gt; ，是可选的，除了在启用严格的空检查时必须使用它。</target>
        </trans-unit>
        <trans-unit id="064948efac2b67f533858ab0ec1a225c30e6d6d0" translate="yes" xml:space="preserve">
          <source>The npm package for the build tool used to create this target. The default builder for an application (&lt;code&gt;ng build myApp&lt;/code&gt;) is &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt;, which uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; package bundler. Note that a different builder is used for building a library (&lt;code&gt;ng build myLib&lt;/code&gt;).</source>
          <target state="translated">用于创建此目标的构建工具的npm软件包。应用程序的默认生成器（ &lt;code&gt;ng build myApp&lt;/code&gt; ）是 &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt; ，它使用&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;软件包捆绑程序。请注意，使用不同的构建器来构建库（ &lt;code&gt;ng build myLib&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="10d444c3a0885867d29c65fc0e0878dd94476c43" translate="yes" xml:space="preserve">
          <source>The npm packages for the &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;mandatory&lt;/em&gt; polyfills&lt;/a&gt; (such as &lt;code&gt;zone.js&lt;/code&gt;) are installed automatically for you when you create your project with &lt;code&gt;ng new&lt;/code&gt;, and their corresponding &lt;code&gt;import&lt;/code&gt; statements are already enabled in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file.</source>
          <target state="translated">对于故宫的包&lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;强制&lt;/em&gt; polyfills&lt;/a&gt;（如 &lt;code&gt;zone.js&lt;/code&gt; ）的，当你创建你的项目自动为您安装 &lt;code&gt;ng new&lt;/code&gt; ，及其相应的 &lt;code&gt;import&lt;/code&gt; 报表中已启用 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 配置文件。</target>
        </trans-unit>
        <trans-unit id="9b47812f77184b9bdc5b1bad108b3a1b65438513" translate="yes" xml:space="preserve">
          <source>The number to be formatted as a percentage.</source>
          <target state="translated">要以百分比格式化的数字。</target>
        </trans-unit>
        <trans-unit id="f5e154c108150e674adc32b02686eba52434ecc2" translate="yes" xml:space="preserve">
          <source>The number to be formatted as currency.</source>
          <target state="translated">格式化为货币的数字。</target>
        </trans-unit>
        <trans-unit id="b8da88e922ca8c42e90b1e7116243bf395b37127" translate="yes" xml:space="preserve">
          <source>The number to be formatted.</source>
          <target state="translated">要格式化的数字。</target>
        </trans-unit>
        <trans-unit id="3f218a15291c3c94b883e1d87d28d7c7a5476b0c" translate="yes" xml:space="preserve">
          <source>The number to format.</source>
          <target state="translated">要格式化的数字。</target>
        </trans-unit>
        <trans-unit id="3b8a293a9d221bf54d50d885baa3a93087f6de40" translate="yes" xml:space="preserve">
          <source>The object that matches the structure of the group.</source>
          <target state="translated">匹配该组结构的对象。</target>
        </trans-unit>
        <trans-unit id="1ed19258bb078822c2e224f36b5e607033a8910c" translate="yes" xml:space="preserve">
          <source>The observable &lt;code&gt;Subscription&lt;/code&gt; will be handled by the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; and the component's &lt;code&gt;hero&lt;/code&gt; property will be (re)set with the retrieved hero.</source>
          <target state="translated">可观察的 &lt;code&gt;Subscription&lt;/code&gt; 将由 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 处理，并且组件的 &lt;code&gt;hero&lt;/code&gt; 属性将与检索到的hero一起（重新设置）。</target>
        </trans-unit>
        <trans-unit id="9652db2fe25fc5b8589f982bd18c51dc7f8cff2d" translate="yes" xml:space="preserve">
          <source>The observable events of related services, such as &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt;, are not triggered.</source>
          <target state="translated">不会触发相关服务（例如 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt; )的可观察事件。</target>
        </trans-unit>
        <trans-unit id="9a424717c78d2ac09e12f0cde7f7e48fa3de1bd5" translate="yes" xml:space="preserve">
          <source>The observable returned must be finite, meaning it must complete at some point. To convert an infinite observable into a finite one, pipe the observable through a filtering operator such as &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, or &lt;code&gt;takeUntil&lt;/code&gt;.</source>
          <target state="translated">返回的可观察值必须是有限的，这意味着它必须在某个点完成。要将无限的可观察对象转换为有限的可观察对象，请通过过滤运算符（例如 &lt;code&gt;first&lt;/code&gt; ， &lt;code&gt;last&lt;/code&gt; ， &lt;code&gt;take&lt;/code&gt; 或 &lt;code&gt;takeUntil&lt;/code&gt; )将可观察对象传递给管道。</target>
        </trans-unit>
        <trans-unit id="3294239ebf17d384dfbf808355d9e127fde196ec" translate="yes" xml:space="preserve">
          <source>The official name of our builder is now &lt;code&gt;@example/command-runner:command&lt;/code&gt;. The first part of this is the package name (resolved using node resolution), and the second part is the builder name (resolved using the &lt;code&gt;builders.json&lt;/code&gt; file).</source>
          <target state="translated">我们的构建器的正式名称现在为 &lt;code&gt;@example/command-runner:command&lt;/code&gt; 。其中的第一部分是软件包名称（使用节点解析来解析），第二部分是构建器名称（使用 &lt;code&gt;builders.json&lt;/code&gt; 文件来解析）。</target>
        </trans-unit>
        <trans-unit id="6da0f2f589e2727df45996f865813ce81bafd8dc" translate="yes" xml:space="preserve">
          <source>The offline template compiler prevents a whole class of vulnerabilities called template injection, and greatly improves application performance. Use the offline template compiler in production deployments; don't dynamically generate templates. Angular trusts template code, so generating templates, in particular templates containing user data, circumvents Angular's built-in protections. For information about dynamically constructing forms in a safe way, see the &lt;a href=&quot;dynamic-form&quot;&gt;Dynamic Forms&lt;/a&gt; guide page.</source>
          <target state="translated">脱机模板编译器可防止称为模板注入的一整类漏洞，并大大提高了应用程序性能。在生产部署中使用脱机模板编译器；不要动态生成模板。 Angular信任模板代码，因此生成模板（特别是包含用户数据的模板）会规避Angular的内置保护。有关以安全的方式动态构建表单的信息，请参见&amp;ldquo; &lt;a href=&quot;dynamic-form&quot;&gt;动态表单&amp;rdquo;&lt;/a&gt;指南页面。</target>
        </trans-unit>
        <trans-unit id="6c7235c164fd39687b519a25c40e459410556d6a" translate="yes" xml:space="preserve">
          <source>The only resources that have hashes in the &lt;code&gt;ngsw.json&lt;/code&gt; manifest are resources that were present in the &lt;code&gt;dist&lt;/code&gt; directory at the time the manifest was built. Other resources, especially those loaded from CDNs, have content that is unknown at build time or are updated more frequently than the app is deployed.</source>
          <target state="translated">在 &lt;code&gt;ngsw.json&lt;/code&gt; 清单中具有散列的唯一资源是在构建清单时 &lt;code&gt;dist&lt;/code&gt; 目录中存在的资源。其他资源，尤其是从CDN加载的资源，其内容在构建时未知，或者比应用程序部署的更新频率更高。</target>
        </trans-unit>
        <trans-unit id="f4bcd43dc4907e02b316af7146976c21f6e2dfd6" translate="yes" xml:space="preserve">
          <source>The only step needed to provide initial &lt;code&gt;ng add&lt;/code&gt; support is to trigger an installation task using the &lt;code&gt;SchematicContext&lt;/code&gt;. The task uses the user's preferred package manager to add the library to the project's &lt;code&gt;package.json&lt;/code&gt; configuration file, and install it in the project&amp;rsquo;s &lt;code&gt;node_modules&lt;/code&gt; directory.</source>
          <target state="translated">提供初始 &lt;code&gt;ng add&lt;/code&gt; 支持的唯一步骤是使用 &lt;code&gt;SchematicContext&lt;/code&gt; 触发安装任务。该任务使用用户的首选软件包管理器将库添加到项目的 &lt;code&gt;package.json&lt;/code&gt; 配置文件中，并将其安装在项目的 &lt;code&gt;node_modules&lt;/code&gt; 目录中。</target>
        </trans-unit>
        <trans-unit id="2912e68aa8582b70396e57e3457bf64276abecb2" translate="yes" xml:space="preserve">
          <source>The only substantive change is the pipe in the template. You can confirm in the live example that the &lt;em&gt;flying heroes&lt;/em&gt; display updates as you add heroes, even when you mutate the &lt;code&gt;heroes&lt;/code&gt; array.</source>
          <target state="translated">唯一的实质性更改是模板中的管道。您可以在现场示例中确认&lt;em&gt;飞行英雄会&lt;/em&gt;在添加英雄时显示更新，即使您对 &lt;code&gt;heroes&lt;/code&gt; 数组进行了突变也是如此。</target>
        </trans-unit>
        <trans-unit id="f109536b44b3294896f12b200cc7c6870edc45c6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;aliases&lt;/code&gt; array specifies one or more strings that can be used to invoke the schematic. For example, the schematic for the Angular CLI &amp;ldquo;generate&amp;rdquo; command has an alias &amp;ldquo;g&amp;rdquo;, allowing you to use the command &lt;code&gt;ng g&lt;/code&gt;.</source>
          <target state="translated">可选的 &lt;code&gt;aliases&lt;/code&gt; 数组指定一个或多个可用于调用原理图的字符串。例如，Angular CLI&amp;ldquo; generate&amp;rdquo;命令的示意图中的别名为&amp;ldquo; g&amp;rdquo;，使您可以使用命令 &lt;code&gt;ng g&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bf8db3667ef2b53d6cae67ff56052e554006755" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;foo&lt;/code&gt; route parameter is harmless and continues to be ignored.</source>
          <target state="translated">可选的 &lt;code&gt;foo&lt;/code&gt; route参数是无害的，并且将继续被忽略。</target>
        </trans-unit>
        <trans-unit id="c3e1faed39e73b09b3398a7ff71cedb3207da8d3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;schema&lt;/code&gt; property points to a JSON schema file that defines the command-line options available to the schematic.</source>
          <target state="translated">可选的 &lt;code&gt;schema&lt;/code&gt; 属性指向一个JSON模式文件，该文件定义了该原理图可用的命令行选项。</target>
        </trans-unit>
        <trans-unit id="c789a1755156dab1f29d2365875888242e710fed" translate="yes" xml:space="preserve">
          <source>The optional route parameters are not separated by &quot;?&quot; and &quot;&amp;amp;&quot; as they would be in the URL query string. They are &lt;strong&gt;separated by semicolons &quot;;&quot;&lt;/strong&gt; This is &lt;em&gt;matrix URL&lt;/em&gt; notation&amp;mdash;something you may not have seen before.</source>
          <target state="translated">可选的路由参数不以&amp;ldquo;？&amp;rdquo;分隔 和&amp;ldquo;＆&amp;rdquo;，因为它们将出现在URL查询字符串中。它们&lt;strong&gt;之间用分号&amp;ldquo;;&amp;rdquo;分隔。&lt;/strong&gt;这是&lt;em&gt;矩阵URL&lt;/em&gt;表示法-您以前可能没有看到过。</target>
        </trans-unit>
        <trans-unit id="8a35351d188a98c16c0b786429358c0c165ee4c9" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;styles&lt;/code&gt;, and &lt;code&gt;scripts&lt;/code&gt; can have either simple path string values, or object values with specific fields. The &lt;code&gt;sourceMap&lt;/code&gt; and &lt;code&gt;optimization&lt;/code&gt; options can be set to a simple Boolean value with a command flag, but can also be given a complex value using the configuration file. The following sections provide more details of how these complex values are used in each case.</source>
          <target state="translated">选项 &lt;code&gt;assets&lt;/code&gt; ， &lt;code&gt;styles&lt;/code&gt; 和 &lt;code&gt;scripts&lt;/code&gt; 可以具有简单的路径字符串值，也可以具有带有特定字段的对象值。可以使用命令标志将 &lt;code&gt;sourceMap&lt;/code&gt; 和 &lt;code&gt;optimization&lt;/code&gt; 选项设置为简单的布尔值，但也可以使用配置文件为其指定复杂的值。以下各节提供了在每种情况下如何使用这些复数值的更多详细信息。</target>
        </trans-unit>
        <trans-unit id="5a7271913fb719bd7b5e39dde45d44587b784fb2" translate="yes" xml:space="preserve">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the array level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">options对象用于为每个子控件的 &lt;code&gt;updateOn&lt;/code&gt; 属性设置默认值。如果在数组级别将 &lt;code&gt;updateOn&lt;/code&gt; 设置为 &lt;code&gt;'blur'&lt;/code&gt; ，则所有子控件默认为'blur'，除非该子控件已明确指定其他 &lt;code&gt;updateOn&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="6e5341d5e74eb1a6542f76853fe596992c982b9a" translate="yes" xml:space="preserve">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the group level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">options对象用于为每个子控件的 &lt;code&gt;updateOn&lt;/code&gt; 属性设置默认值。如果在组级别将 &lt;code&gt;updateOn&lt;/code&gt; 设置为 &lt;code&gt;'blur'&lt;/code&gt; ，则所有子控件默认为'blur'，除非该子控件已明确指定其他 &lt;code&gt;updateOn&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="746585f9d309cd4a0ba0d2fbf9b96110e934c17e" translate="yes" xml:space="preserve">
          <source>The options object provides default values for the two inputs that we defined; &lt;code&gt;command&lt;/code&gt;, which is the Unix command to execute, and &lt;code&gt;args&lt;/code&gt;, an array that contains the file to operate on.</source>
          <target state="translated">options对象为我们定义的两个输入提供了默认值。 &lt;code&gt;command&lt;/code&gt; ，这是要执行的Unix命令，而 &lt;code&gt;args&lt;/code&gt; 是一个包含要操作的文件的数组。</target>
        </trans-unit>
        <trans-unit id="a808828e19354aac449233df39a10e00fae8dee0" translate="yes" xml:space="preserve">
          <source>The options provide configuration metadata that determines how the directive should be processed, instantiated and used at runtime.</source>
          <target state="translated">这些选项提供了配置元数据,这些元数据决定了指令在运行时应如何处理、实例化和使用。</target>
        </trans-unit>
        <trans-unit id="05c7ae2f84882bcfa37ddd31c179aced5dca729d" translate="yes" xml:space="preserve">
          <source>The order of class declaration matters in TypeScript. You can't refer directly to a class until it's been defined.</source>
          <target state="translated">在TypeScript中,类声明的顺序很重要。你不能直接引用一个类,直到它被定义。</target>
        </trans-unit>
        <trans-unit id="6c7cad94283dc8992d7c11c563fd215a38191432" translate="yes" xml:space="preserve">
          <source>The order of route configuration matters. The router accepts the first route that matches a navigation request path.</source>
          <target state="translated">路由配置的顺序很重要。路由器接受第一个与导航请求路径相匹配的路由。</target>
        </trans-unit>
        <trans-unit id="41216db2f85115d74834c152bfa23e599dd9f3f6" translate="yes" xml:space="preserve">
          <source>The original &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second</source>
          <target state="translated">原始的 &lt;code&gt;open&lt;/code&gt; 和 &lt;code&gt;closed&lt;/code&gt; 状态，以及高度，颜色和不透明度的原始变化，发生时间为1秒</target>
        </trans-unit>
        <trans-unit id="5c3fc45bc2db2f7c8beca6fdc1270fdd65714fae" translate="yes" xml:space="preserve">
          <source>The original response continues untouched back up through the chain of interceptors to the application caller.</source>
          <target state="translated">原有的响应通过拦截器链继续不受影响地回到应用程序调用者。</target>
        </trans-unit>
        <trans-unit id="8475e386138bc203bd52458f303f075a4b824138" translate="yes" xml:space="preserve">
          <source>The other feature module's routing module is configured similarly.</source>
          <target state="translated">另一个功能模块的路由模块也是类似的配置。</target>
        </trans-unit>
        <trans-unit id="ac2033a02f00fb6e865ead163931aca26717c78d" translate="yes" xml:space="preserve">
          <source>The other possible &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;'prefix'&lt;/code&gt; which tells the router to match the redirect route when the &lt;em&gt;remaining&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;begins&lt;/em&gt;&lt;/strong&gt; with the redirect route's &lt;em&gt;prefix&lt;/em&gt; path.</source>
          <target state="translated">另一个可能的 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 值是 &lt;code&gt;'prefix'&lt;/code&gt; ，当&lt;em&gt;剩余的&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;以&lt;/em&gt;&lt;/strong&gt;重定向路由的&lt;em&gt;前缀&lt;/em&gt;路径&lt;strong&gt;&lt;em&gt;开头&lt;/em&gt;&lt;/strong&gt;时，它告诉路由器匹配重定向路由。</target>
        </trans-unit>
        <trans-unit id="683021b4260938edc921d666701a253150e18ddb" translate="yes" xml:space="preserve">
          <source>The outer and inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances are assembled into views as follows:</source>
          <target state="translated">外部和内部 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 实例按如下方式组装到视图中：</target>
        </trans-unit>
        <trans-unit id="db438b04615ada9c6a8e0f3ec02854c6d2f5ac5b" translate="yes" xml:space="preserve">
          <source>The outgoing HTTP request method.</source>
          <target state="translated">外发的HTTP请求方式。</target>
        </trans-unit>
        <trans-unit id="ab71fe70e254aa60e106538ded89aa5355abd19f" translate="yes" xml:space="preserve">
          <source>The outgoing URL with all URL parameters set.</source>
          <target state="translated">设置了所有URL参数的外发URL。</target>
        </trans-unit>
        <trans-unit id="29b0a52a0f9e42ada2a44024b4ce3442efa10abc" translate="yes" xml:space="preserve">
          <source>The outgoing request object to handle.</source>
          <target state="translated">要处理的外发请求对象。</target>
        </trans-unit>
        <trans-unit id="4e584659815c873b9863b2023a8d1da485d88c69" translate="yes" xml:space="preserve">
          <source>The outlet name of the route</source>
          <target state="translated">途径的出口名称</target>
        </trans-unit>
        <trans-unit id="427ee8154382c38b7d171dfb79623a53e63a0fd6" translate="yes" xml:space="preserve">
          <source>The outlet name of the route, a constant.</source>
          <target state="translated">航线的出口名称,为常数。</target>
        </trans-unit>
        <trans-unit id="bcedcd9799379281170f96329a0199438fc48892" translate="yes" xml:space="preserve">
          <source>The output array will be ordered by keys. By default the comparator will be by Unicode point value. You can optionally pass a compareFn if your keys are complex types.</source>
          <target state="translated">输出数组将按键排序。默认情况下,比较器将以Unicode点值为基准。如果你的键是复杂类型,你可以选择传递一个compareFn。</target>
        </trans-unit>
        <trans-unit id="7e3805c6cd01668729e336d07b3bf6176de112bf" translate="yes" xml:space="preserve">
          <source>The output directory for build results.</source>
          <target state="translated">构建结果的输出目录。</target>
        </trans-unit>
        <trans-unit id="3f8aa866a39412d582722989844ba25d2bbcc37b" translate="yes" xml:space="preserve">
          <source>The output folder is &lt;code&gt;dist/project-name/&lt;/code&gt; by default. To output to a different folder, change the &lt;code&gt;outputPath&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">默认情况下，输出文件夹为 &lt;code&gt;dist/project-name/&lt;/code&gt; 。要输出到不同的文件夹，更改 &lt;code&gt;outputPath&lt;/code&gt; 在 &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa555da87eea14ed125658bcb8bbbf275e304596" translate="yes" xml:space="preserve">
          <source>The output in the view would be:</source>
          <target state="translated">视图中的输出将是:</target>
        </trans-unit>
        <trans-unit id="61eeb6aa93a200e68991925d7feb4a198a9bbc45" translate="yes" xml:space="preserve">
          <source>The output locations are printed in the output.</source>
          <target state="translated">在输出中打印输出位置。</target>
        </trans-unit>
        <trans-unit id="36f38bb92f919b4487aa12bfc0fbbe03a7e4f8ef" translate="yes" xml:space="preserve">
          <source>The outputs of the component.</source>
          <target state="translated">该组件的产出;</target>
        </trans-unit>
        <trans-unit id="b8c774af30b04ee8bc9afcca4c83e98bbbdacecb" translate="yes" xml:space="preserve">
          <source>The overall structure of the &lt;code&gt;updateHero()&lt;/code&gt; method is similar to that of &lt;code&gt;getHeroes()&lt;/code&gt;, but it uses &lt;code&gt;http.put()&lt;/code&gt; to persist the changed hero on the server. Add the following to the &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateHero()&lt;/code&gt; 方法的总体结构类似于 &lt;code&gt;getHeroes()&lt;/code&gt; 的结构，但是它使用 &lt;code&gt;http.put()&lt;/code&gt; 将更改后的英雄保留在服务器上。将以下内容添加到 &lt;code&gt;HeroService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12119367c4766736842fde0c43c23fc7012b447d" translate="yes" xml:space="preserve">
          <source>The override tests</source>
          <target state="translated">覆盖测试</target>
        </trans-unit>
        <trans-unit id="cecd7ea3164b66bdc1ebb3846e85c8cad94a7d0d" translate="yes" xml:space="preserve">
          <source>The package to be added.</source>
          <target state="translated">要增加的包。</target>
        </trans-unit>
        <trans-unit id="605c3739fd71bc00a4ed1ba45664e517e73bc270" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; are essential to &lt;em&gt;running&lt;/em&gt; applications.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; 部分中列出的软件包对于&lt;em&gt;运行&lt;/em&gt;应用程序至关重要。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="80dcc126c1685ed6246cc6c4e4f678dbe5b7a91b" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;devDependencies&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; help you develop the application on your local machine. You don't deploy them with the production application.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;devDependencies&lt;/code&gt; 部分中列出的软件包可帮助您在本地计算机上开发应用程序。您不会将它们与生产应用程序一起部署。</target>
        </trans-unit>
        <trans-unit id="a91b89dd5ef65469422d3ef6e3e02edce3d9a4f2" translate="yes" xml:space="preserve">
          <source>The page is reloaded/refreshed.</source>
          <target state="translated">页面被重新加载/刷新。</target>
        </trans-unit>
        <trans-unit id="b2b646185b55821ee60d26f71064b66b6eee386d" translate="yes" xml:space="preserve">
          <source>The page no longer displays properly because you changed the hero from a string to an object.</source>
          <target state="translated">页面不再正常显示,因为你把英雄从字符串改为对象。</target>
        </trans-unit>
        <trans-unit id="45bba286f5d6066ed3bf3bcd1c4ffd4a6469b7b6" translate="yes" xml:space="preserve">
          <source>The page requests an update be immediately activated via the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">该页面要求立即通过 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 服务激活更新。</target>
        </trans-unit>
        <trans-unit id="d7114b73bd8fae35327a37dbe1c3217b440f55ff" translate="yes" xml:space="preserve">
          <source>The page you see is the &lt;em&gt;application shell&lt;/em&gt;. The shell is controlled by an Angular &lt;strong&gt;component&lt;/strong&gt; named &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">您看到的页面是&lt;em&gt;应用程序外壳&lt;/em&gt;。该外壳由名为 &lt;code&gt;AppComponent&lt;/code&gt; 的Angular &lt;strong&gt;组件&lt;/strong&gt;控制。</target>
        </trans-unit>
        <trans-unit id="dc0d5bcdb4927dad0eb89021491daf6f6e13f7e8" translate="yes" xml:space="preserve">
          <source>The parameter name.</source>
          <target state="translated">参数名称。</target>
        </trans-unit>
        <trans-unit id="f11e186d7179311f50be914a4fe6431b1ffd3f4d" translate="yes" xml:space="preserve">
          <source>The parameter simultaneously defines a private &lt;code&gt;heroService&lt;/code&gt; property and identifies it as a &lt;code&gt;HeroService&lt;/code&gt; injection site.</source>
          <target state="translated">该参数同时定义一个私有 &lt;code&gt;heroService&lt;/code&gt; 属性，并将其标识为 &lt;code&gt;HeroService&lt;/code&gt; 注入站点。</target>
        </trans-unit>
        <trans-unit id="a471c31a25dfc4c5093392a2386d76746208b100" translate="yes" xml:space="preserve">
          <source>The parameter value can be any valid template expression, (see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;Template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page) such as a string literal or a component property. In other words, you can control the format through a binding the same way you control the birthday value through a binding.</source>
          <target state="translated">参数值可以是任何有效的模板表达式（请参见&amp;ldquo; &lt;a href=&quot;template-syntax&quot;&gt;模板语法&amp;rdquo;&lt;/a&gt;页面的&amp;ldquo; &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;模板表达式&amp;rdquo;&lt;/a&gt;部分），例如字符串文字或组件属性。换句话说，您可以通过绑定来控制格式，就像通过绑定来控制生日值一样。</target>
        </trans-unit>
        <trans-unit id="a2f2e40ff634b01ef533833632126053be3035ce" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;AppComponent&lt;/code&gt; doesn't need to know about the dependencies of dependencies. Declare what's needed in the constructor (in this case &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContextService&lt;/code&gt;) and the framework resolves the nested dependencies.</source>
          <target state="translated">父 &lt;code&gt;AppComponent&lt;/code&gt; 不需要了解依赖项的依赖项。声明构造函数（在本例中为 &lt;code&gt;LoggerService&lt;/code&gt; 和 &lt;code&gt;UserContextService&lt;/code&gt; ）所需的内容，然后框架解析嵌套的依赖关系。</target>
        </trans-unit>
        <trans-unit id="eb7dc6ea9c849b17c83ab843ef634a845e0cc4b4" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;HeroBiosComponent&lt;/code&gt; binds a value to &lt;code&gt;heroId&lt;/code&gt;. &lt;code&gt;ngOnInit&lt;/code&gt; passes that ID to the service, which fetches and caches the hero. The getter for the &lt;code&gt;hero&lt;/code&gt; property pulls the cached hero from the service. The template displays this data-bound property.</source>
          <target state="translated">父 &lt;code&gt;HeroBiosComponent&lt;/code&gt; 将值绑定到 &lt;code&gt;heroId&lt;/code&gt; 。 &lt;code&gt;ngOnInit&lt;/code&gt; 将该ID传递给服务，该服务将获取并缓存英雄。 &lt;code&gt;hero&lt;/code&gt; 属性的getter 从服务中拉出缓存的英雄。模板显示此数据绑定属性。</target>
        </trans-unit>
        <trans-unit id="6cd3e3252a82b27dd42c44952cca27ac0ef0a581" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;VoteTakerComponent&lt;/code&gt; binds an event handler called &lt;code&gt;onVoted()&lt;/code&gt; that responds to the child event payload &lt;code&gt;$event&lt;/code&gt; and updates a counter.</source>
          <target state="translated">父 &lt;code&gt;VoteTakerComponent&lt;/code&gt; 绑定了一个名为 &lt;code&gt;onVoted()&lt;/code&gt; 的事件处理程序，该处理程序响应子事件有效负载 &lt;code&gt;$event&lt;/code&gt; 并更新计数器。</target>
        </trans-unit>
        <trans-unit id="a6895c8ceeed733901d1a5ee2c80a8927e951506" translate="yes" xml:space="preserve">
          <source>The parent component cannot data bind to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods nor to its &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">父组件不能将数据绑定到子项的 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 方法，也不能绑定到其 &lt;code&gt;seconds&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="ccf3b5f4773641faf3c55a350577e0c6cd3528dd" translate="yes" xml:space="preserve">
          <source>The parent component class and template</source>
          <target state="translated">父组件类和模板</target>
        </trans-unit>
        <trans-unit id="b69dbb3eb5bb7d6ff61f200cca2db7e39afc938d" translate="yes" xml:space="preserve">
          <source>The parent control.</source>
          <target state="translated">父控。</target>
        </trans-unit>
        <trans-unit id="1d5682396420bbc4186bac1b479e30f0a2e910c6" translate="yes" xml:space="preserve">
          <source>The parent must cooperate by providing an &lt;em&gt;alias&lt;/em&gt; to itself in the name of a class interface token.</source>
          <target state="translated">父级必须通过以类接口令牌的名称为其自身提供&lt;em&gt;别名&lt;/em&gt;来进行合作。</target>
        </trans-unit>
        <trans-unit id="934dc6ecfaf214b64d3b92a5c9d8431b54cdb963" translate="yes" xml:space="preserve">
          <source>The parent node in the url tree</source>
          <target state="translated">url树中的父节点</target>
        </trans-unit>
        <trans-unit id="8fd36ababa58725780954fcf5f9d1c970d8528ab" translate="yes" xml:space="preserve">
          <source>The parent node.</source>
          <target state="translated">父节点。</target>
        </trans-unit>
        <trans-unit id="0a0f0dc2aaf6c1c595258b9e8784715a84b50c67" translate="yes" xml:space="preserve">
          <source>The parent of this player, if any.</source>
          <target state="translated">该球员的父母,如果有的话;</target>
        </trans-unit>
        <trans-unit id="67d15ddca6f8e438ee84b955f2b25fe3a494f70e" translate="yes" xml:space="preserve">
          <source>The parent of this route in the router state tree</source>
          <target state="translated">该路由在路由器状态树中的父节点。</target>
        </trans-unit>
        <trans-unit id="2903a28e9071275ef7593599182782527f1f0ab5" translate="yes" xml:space="preserve">
          <source>The parent of this route in the router state tree.</source>
          <target state="translated">这个路由在路由器状态树中的父节点。</target>
        </trans-unit>
        <trans-unit id="da18e4e25f47d18df9195287587b131efcbb8846" translate="yes" xml:space="preserve">
          <source>The parentheses around &lt;code&gt;click&lt;/code&gt; tell Angular to listen for the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element's &lt;code&gt;click&lt;/code&gt; event. When the user clicks in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, Angular executes the &lt;code&gt;onSelect(hero)&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; 括号告诉Angular监听 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素的 &lt;code&gt;click&lt;/code&gt; 事件。当用户单击 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 时，Angular执行 &lt;code&gt;onSelect(hero)&lt;/code&gt; 表达式。</target>
        </trans-unit>
        <trans-unit id="29591102485816b32c99b4b31ce4e781fbd9a2cd" translate="yes" xml:space="preserve">
          <source>The partial response body as downloaded so far.</source>
          <target state="translated">到目前为止,下载的部分反应体。</target>
        </trans-unit>
        <trans-unit id="a0035afe05127ba28a95a7b2b648e50cf8b95d4b" translate="yes" xml:space="preserve">
          <source>The passed-in providers can be an array of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;, or a recursive array of more providers.</source>
          <target state="translated">传入的提供程序可以是 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 或更多提供程序的递归数组。</target>
        </trans-unit>
        <trans-unit id="23b9cd25cc8870c80722d2ac4c13f170a781fd85" translate="yes" xml:space="preserve">
          <source>The pasted HTML refers to a &lt;code&gt;selectedHero&lt;/code&gt;. The new &lt;code&gt;HeroDetailComponent&lt;/code&gt; can present &lt;em&gt;any&lt;/em&gt; hero, not just a selected hero. So replace &quot;selectedHero&quot; with &quot;hero&quot; everywhere in the template.</source>
          <target state="translated">粘贴的HTML引用了 &lt;code&gt;selectedHero&lt;/code&gt; 。新的 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 可以显示&lt;em&gt;任何&lt;/em&gt;英雄，而不仅仅是选定的英雄。因此，在模板中的所有位置都将&amp;ldquo; selectedHero&amp;rdquo;替换为&amp;ldquo; hero&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="2571c9d77bbaccfdb1c7e7ad5cf492440d3e60a6" translate="yes" xml:space="preserve">
          <source>The path at which to create the library's public API file, relative to the workspace root.</source>
          <target state="translated">相对于工作区根目录,创建库的公共API文件的路径。</target>
        </trans-unit>
        <trans-unit id="deb5ccf2b009e5d123d0a690e376af4b80917816" translate="yes" xml:space="preserve">
          <source>The path can be absolute or relative to the current working directory where the command is executed. For example, to run the schematic we just generated (which has no required options), use the following command.</source>
          <target state="translated">路径可以是绝对的,也可以是相对于当前执行命令的工作目录的。例如,要运行我们刚刚生成的原理图(没有必要的选项),使用以下命令。</target>
        </trans-unit>
        <trans-unit id="c044146e6280c52cf5a46b481e94eb7064916400" translate="yes" xml:space="preserve">
          <source>The path from the root of the router state tree to this route</source>
          <target state="translated">从路由器状态树的根部到这个路由的路径。</target>
        </trans-unit>
        <trans-unit id="ffce671b3d1acbfaba292b2709f2546bc87cd1c1" translate="yes" xml:space="preserve">
          <source>The path from the root of the router state tree to this route.</source>
          <target state="translated">从路由器状态树的根部到这个路由的路径。</target>
        </trans-unit>
        <trans-unit id="7815a518ee4716a2b1120142147e7d95775a8e78" translate="yes" xml:space="preserve">
          <source>The path of the source directory.</source>
          <target state="translated">源目录的路径。</target>
        </trans-unit>
        <trans-unit id="5a4facd2991ea2981fac7027d7268d40140867a3" translate="yes" xml:space="preserve">
          <source>The path part of a URL segment</source>
          <target state="translated">URL段的路径部分</target>
        </trans-unit>
        <trans-unit id="57501241fca71416c36ef15c3a51d7c6e44f1317" translate="yes" xml:space="preserve">
          <source>The path string</source>
          <target state="translated">路径字符串</target>
        </trans-unit>
        <trans-unit id="1a9c4ada156081d91a1927cd0a28c70af244c81e" translate="yes" xml:space="preserve">
          <source>The path to match against. Cannot be used together with a custom &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; function. A URL string that uses router matching notation. Can be a wild card (&lt;code&gt;**&lt;/code&gt;) that matches any URL (see Usage Notes below). Default is &quot;/&quot; (the root path).</source>
          <target state="translated">匹配的路径。不能与自定义 &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 功能一起使用。使用路由器匹配表示法的URL字符串。可以是与任何URL匹配的通配符（ &lt;code&gt;**&lt;/code&gt; ）（请参阅下面的使用说明）。默认值为&amp;ldquo; /&amp;rdquo;（根路径）。</target>
        </trans-unit>
        <trans-unit id="9ea7c1cb9a5d01a52764c83bce6591f48a706bc8" translate="yes" xml:space="preserve">
          <source>The path to the 'street' control from the root form would be 'address' -&amp;gt; 'street'.</source>
          <target state="translated">从根形式到&amp;ldquo;街道&amp;rdquo;控件的路径将是&amp;ldquo;地址&amp;rdquo;-&amp;gt;&amp;ldquo;街道&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="3ef9964ab8f09b8e12ab9dd768d9f14677db6668" translate="yes" xml:space="preserve">
          <source>The path to this group from the top-level directive.</source>
          <target state="translated">从顶层指令到该组的路径。</target>
        </trans-unit>
        <trans-unit id="81b3c5aa5a142e56a8cc65e9cb4384f3838d042c" translate="yes" xml:space="preserve">
          <source>The path to this group.</source>
          <target state="translated">通往这个群体的道路。</target>
        </trans-unit>
        <trans-unit id="c5155f988648d9eafa70e267b1c2b7d6a2bb54ed" translate="yes" xml:space="preserve">
          <source>The path where new projects will be created, relative to the new workspace root.</source>
          <target state="translated">创建新项目的路径,相对于新工作区根目录。</target>
        </trans-unit>
        <trans-unit id="6bff124c5ff1260658dbe66420f0ad585635ee2f" translate="yes" xml:space="preserve">
          <source>The path where style resources will be placed, relative to outputPath.</source>
          <target state="translated">样式资源放置的路径,相对于outputPath。</target>
        </trans-unit>
        <trans-unit id="efc330a017153f448a0111c70f94ac011295b24b" translate="yes" xml:space="preserve">
          <source>The path-match strategy 'full' matches against the entire URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.</source>
          <target state="translated">路径匹配策略'full'会对整个URL进行匹配。在重定向空路径路由时,这样做很重要。否则,因为空路径是任何URL的前缀,所以即使导航到重定向目的地,路由器也会应用重定向,从而形成一个无尽的循环。</target>
        </trans-unit>
        <trans-unit id="7aedc08e6bf2368ad910279f0b057e807d83e9f8" translate="yes" xml:space="preserve">
          <source>The path-matching strategy, one of 'prefix' or 'full'. Default is 'prefix'.</source>
          <target state="translated">路径匹配策略,&quot;前缀 &quot;或 &quot;全 &quot;之一。默认为 &quot;前缀&quot;。</target>
        </trans-unit>
        <trans-unit id="10817689f142f9440662eeb6d05887794bb18bb9" translate="yes" xml:space="preserve">
          <source>The pathname where the app will be served.</source>
          <target state="translated">应用程序将被提供的路径名。</target>
        </trans-unit>
        <trans-unit id="ddea77aa7e88eee7c5407247c21aa1d815f8f4fa" translate="yes" xml:space="preserve">
          <source>The pipe class implements the &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; interface's &lt;code&gt;transform&lt;/code&gt; method that accepts an input value followed by optional parameters and returns the transformed value.</source>
          <target state="translated">管道类实现了 &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; 接口的 &lt;code&gt;transform&lt;/code&gt; 方法，该方法接受输入值和可选参数，并返回转换后的值。</target>
        </trans-unit>
        <trans-unit id="f73953d503dce99e3f2e6da39da4ce7debe6ac7d" translate="yes" xml:space="preserve">
          <source>The pipe name to use in template bindings. Typically uses &lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCase&lt;/a&gt; because the name cannot contain hyphens.</source>
          <target state="translated">模板绑定中使用的管道名称。通常使用&lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCase，&lt;/a&gt;因为名称不能包含连字符。</target>
        </trans-unit>
        <trans-unit id="345412f14368a1f164257004a17666a92c69e9a0" translate="yes" xml:space="preserve">
          <source>The pipe operator (&lt;code&gt;|&lt;/code&gt;)</source>
          <target state="translated">管道运算符（ &lt;code&gt;|&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="47f93ef7f7a798e2556f7e8b9c63fade54c0a39a" translate="yes" xml:space="preserve">
          <source>The pipe operator has a higher precedence than the ternary operator (&lt;code&gt;?:&lt;/code&gt;), which means &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; is parsed as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt;. Nevertheless, for a number of reasons, the pipe operator cannot be used without parentheses in the first and second operands of &lt;code&gt;?:&lt;/code&gt;. A good practice is to use parentheses in the third operand too.</source>
          <target state="translated">管道操作者具有更高的优先级比三元运算符（ &lt;code&gt;?:&lt;/code&gt; ），这意味着 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; 被解析为 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt; 。但是，由于多种原因，如果在 &lt;code&gt;?:&lt;/code&gt; 的第一和第二操作数中没有括号，则不能使用管道运算符。一个好的做法是在第三个操作数中也使用括号。</target>
        </trans-unit>
        <trans-unit id="ed50cd1104edcdf07f478c9622d53824cc197dcf" translate="yes" xml:space="preserve">
          <source>The pipe operator passes the result of an expression on the left to a pipe function on the right.</source>
          <target state="translated">管道操作符将左边的表达式的结果传递给右边的管道函数。</target>
        </trans-unit>
        <trans-unit id="8eb7ba48d7c30018b592c2a263ffe9de1745ef67" translate="yes" xml:space="preserve">
          <source>The pipes discussed earlier in this page are implemented with pure functions. The built-in &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; is a pure pipe with a pure function implementation. So are the &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; and &lt;code&gt;FlyingHeroesPipe&lt;/code&gt;. A few steps back, you reviewed the &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;&amp;mdash;an impure pipe with a pure function.</source>
          <target state="translated">本页面前面讨论的管道是通过纯函数实现的。内置的 &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 是具有纯函数实现的纯管道。所以是 &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; 和 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 。退后几步，您回顾了 &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; &amp;mdash;一个纯函数的不纯管道。</target>
        </trans-unit>
        <trans-unit id="120783f4944d7609420e4fa2d8de1cd7b96a2fd4" translate="yes" xml:space="preserve">
          <source>The popup should stay open, even when switching between pages in the application, until the user closes it by sending the message or canceling. Clearly you can't put the popup in the same outlet as the other pages.</source>
          <target state="translated">弹出式窗口应该保持打开状态,即使在应用程序中的页面之间切换,直到用户通过发送消息或取消来关闭它。显然,你不能把弹出窗口和其他页面放在同一个出口。</target>
        </trans-unit>
        <trans-unit id="bfe8a90e0b39cf0e03648ad7ceb8f68c1e9609e0" translate="yes" xml:space="preserve">
          <source>The port to use to serve the application.</source>
          <target state="translated">为应用程序服务的端口。</target>
        </trans-unit>
        <trans-unit id="d900c6fbbdec6ccc354680413a57b4ab661e72cc" translate="yes" xml:space="preserve">
          <source>The practice of cloning a request to set new headers is so common that there's a &lt;code&gt;setHeaders&lt;/code&gt; shortcut for it:</source>
          <target state="translated">克隆请求以设置新标头的做法非常普遍，以至于有一个 &lt;code&gt;setHeaders&lt;/code&gt; 快捷方式：</target>
        </trans-unit>
        <trans-unit id="d79f7ddd3370cdaec456ab22eea48dab91ad8972" translate="yes" xml:space="preserve">
          <source>The practices described in this document apply to Angular 2.0 and later. If you are currently using AngularJS, see &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">本文档中描述的做法适用于Angular 2.0及更高版本。如果您当前正在使用AngularJS，请参阅&lt;a href=&quot;upgrade&quot;&gt;从AngularJS升级&lt;/a&gt;。&lt;em&gt;AngularJS&lt;/em&gt;是Angular所有v1.x版本的名称。</target>
        </trans-unit>
        <trans-unit id="1b61f5ed114256e63478f78b9527841ff42f1f55" translate="yes" xml:space="preserve">
          <source>The predicate is any method that takes a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; and returns a &lt;em&gt;truthy&lt;/em&gt; value. The following example finds all &lt;code&gt;DebugElements&lt;/code&gt; with a reference to a template local variable named &quot;content&quot;:</source>
          <target state="translated">谓词是采用 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 并返回&lt;em&gt;真实&lt;/em&gt;值的任何方法。下面的示例查找所有 &lt;code&gt;DebugElements&lt;/code&gt; 并引用名为&amp;ldquo; content&amp;rdquo;的模板局部变量：</target>
        </trans-unit>
        <trans-unit id="ce3e8a27555504e35c1b0cf83f429a0f13cb6911" translate="yes" xml:space="preserve">
          <source>The preemptive error message tells you to compile explicitly with &lt;code&gt;compileComponents()&lt;/code&gt;.</source>
          <target state="translated">抢先错误消息告诉您使用 &lt;code&gt;compileComponents()&lt;/code&gt; 进行显式编译。</target>
        </trans-unit>
        <trans-unit id="531aa0c92c5d9b66edd1abb9d99a1c78f864e5f1" translate="yes" xml:space="preserve">
          <source>The preferred solution is to add a &lt;code&gt;redirect&lt;/code&gt; route that translates the initial relative URL (&lt;code&gt;''&lt;/code&gt;) to the desired default path (&lt;code&gt;/heroes&lt;/code&gt;). The browser address bar shows &lt;code&gt;.../heroes&lt;/code&gt; as if you'd navigated there directly.</source>
          <target state="translated">优选的解决方案是增加一个 &lt;code&gt;redirect&lt;/code&gt; 该平移初始相对URL（路线 &lt;code&gt;''&lt;/code&gt; ），以所需的默认路径（ &lt;code&gt;/heroes&lt;/code&gt; ）。浏览器地址栏显示 &lt;code&gt;.../heroes&lt;/code&gt; ，就像您直接导航到那里一样。</target>
        </trans-unit>
        <trans-unit id="323804b4601311b642368194508cfb069c1a6100" translate="yes" xml:space="preserve">
          <source>The preferred way to configure the strategy is to add a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; element&lt;/a&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">配置策略的首选方法是在 &lt;code&gt;index.html&lt;/code&gt; 的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 中添加&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt;元素&lt;/a&gt;标签。</target>
        </trans-unit>
        <trans-unit id="be94b295da6b6dfbe7f415ce1a95d804f5cc29c3" translate="yes" xml:space="preserve">
          <source>The preferred way to un-ignore a file is to update the &lt;code&gt;content/examples/.gitignore&lt;/code&gt; like this:</source>
          <target state="translated">取消忽略文件的首选方法是像这样更新 &lt;code&gt;content/examples/.gitignore&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1f0086cdbedbb14fe8c9bfa9cacc9506b54363c6" translate="yes" xml:space="preserve">
          <source>The prefix to apply to generated selectors for the initial project.</source>
          <target state="translated">应用于初始项目的生成选择器的前缀。</target>
        </trans-unit>
        <trans-unit id="25c273d85b73af2578dc0a29b3ba9b91dc63aba8" translate="yes" xml:space="preserve">
          <source>The prefix to apply to the generated component selector.</source>
          <target state="translated">应用于生成的组件选择器的前缀。</target>
        </trans-unit>
        <trans-unit id="cfd2a19c32615eb586fdc1467f3daf305549c48a" translate="yes" xml:space="preserve">
          <source>The preloader optimistically loads all router configurations to make navigations into lazily-loaded sections of the application faster.</source>
          <target state="translated">预加载器优化加载所有路由器配置,使导航更快地进入应用的懒加载部分。</target>
        </trans-unit>
        <trans-unit id="f42acc2b5381961d93f1b9bb1b38efec3174a5c2" translate="yes" xml:space="preserve">
          <source>The preloader runs in the background. When the router bootstraps, the preloader starts listening to all navigation events. After every such event, the preloader will check if any configurations can be loaded lazily.</source>
          <target state="translated">预加载器在后台运行。当路由器启动时,预加载器开始监听所有导航事件。在每一个这样的事件之后,预加载器将检查是否有任何配置可以被懒惰地加载。</target>
        </trans-unit>
        <trans-unit id="5d55f652f32922a327beff0bc5b2217e949bdf3d" translate="yes" xml:space="preserve">
          <source>The presence of &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tags in the component's template.</source>
          <target state="translated">组件模板中存在 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="00d3e678b5578ba56bc0d2cfcaf26815fef02171" translate="yes" xml:space="preserve">
          <source>The presence of the implicit template object has implications for the nesting of structural directives. For more on this subject, see &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">隐式模板对象的存在对结构指令的嵌套有影响。有关此主题的更多信息，请参见《&lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;结构指令》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b42061155850ee530a76aac5296dde7e21feb2b3" translate="yes" xml:space="preserve">
          <source>The presence of this method is a signal to the Ivy template type-check compiler that the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; structural directive renders its template with a specific context type.</source>
          <target state="translated">该方法的存在向Ivy模板类型检查编译器发出信号，即 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 结构化指令使用特定的上下文类型呈现其模板。</target>
        </trans-unit>
        <trans-unit id="86f41d9e1229109e3648daa0169e96c673c401bf" translate="yes" xml:space="preserve">
          <source>The presence of this static field is a signal to the Ivy template type check compiler that when the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; structural directive renders its template, the type of the expression bound to &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; should be narrowed in some way. For &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, the binding expression itself is used to narrow its type, which allows the strictNullChecks feature of TypeScript to work with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">此静态字段的存在向Ivy模板类型检查编译器发出信号，即当 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 结构化指令呈现其模板时，应以某种方式缩小绑定到 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 的表达式的类型。对于 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ，绑定表达式本身用于缩小其类型，这允许TypeScript的strictNullChecks功能与 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 一起使用。</target>
        </trans-unit>
        <trans-unit id="d3d52fcf10501054e6ada11540d5b2872f70a568" translate="yes" xml:space="preserve">
          <source>The preview pane immediately updates to display the name of each product in the list.</source>
          <target state="translated">预览窗格立即更新,显示列表中每个产品的名称。</target>
        </trans-unit>
        <trans-unit id="e48d8699ea4367c454a0431ca00856d48e5fe151" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;TwainComponent&lt;/code&gt; tests simulated an asynchronous observable response from the &lt;code&gt;TwainService&lt;/code&gt; with the &lt;code&gt;asyncData&lt;/code&gt; and &lt;code&gt;asyncError&lt;/code&gt; utilities.</source>
          <target state="translated">先前的 &lt;code&gt;TwainComponent&lt;/code&gt; 测试使用 &lt;code&gt;asyncData&lt;/code&gt; 和 &lt;code&gt;asyncError&lt;/code&gt; 实用程序模拟了来自 &lt;code&gt;TwainService&lt;/code&gt; 的异步可观察响应。</target>
        </trans-unit>
        <trans-unit id="5364db2c3b6e95db6ec36a33c11635ccee48e801" translate="yes" xml:space="preserve">
          <source>The previous &lt;em&gt;Hero of the Month&lt;/em&gt; example used the &lt;code&gt;MinimalLogger&lt;/code&gt; class as the token for a provider of &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;本月&lt;/em&gt;的先前&lt;em&gt;Hero&lt;/em&gt;示例使用 &lt;code&gt;MinimalLogger&lt;/code&gt; 类作为 &lt;code&gt;LoggerService&lt;/code&gt; 提供程序的令牌。</target>
        </trans-unit>
        <trans-unit id="ab5d9f1002775378705c23acd28f52fb378eb33d" translate="yes" xml:space="preserve">
          <source>The previous example presents such a name collision. The component has a &lt;code&gt;customer&lt;/code&gt; property and the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; defines a &lt;code&gt;customer&lt;/code&gt; template variable.</source>
          <target state="translated">前面的示例提出了这种名称冲突。该组件具有 &lt;code&gt;customer&lt;/code&gt; 属性，并且 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 定义了 &lt;code&gt;customer&lt;/code&gt; 模板变量。</target>
        </trans-unit>
        <trans-unit id="3ec517832673bf93688f5797ba759fb5bcbd4451" translate="yes" xml:space="preserve">
          <source>The previous page showed how to &lt;a href=&quot;displaying-data&quot;&gt;display data&lt;/a&gt;. This page demonstrated event binding techniques.</source>
          <target state="translated">前一页显示了如何&lt;a href=&quot;displaying-data&quot;&gt;显示数据&lt;/a&gt;。此页面演示了事件绑定技术。</target>
        </trans-unit>
        <trans-unit id="40f4c684187ee76e174e3c81ad8531be7d342ffe" translate="yes" xml:space="preserve">
          <source>The previous sections of this guide referred to RxJS &lt;code&gt;Observables&lt;/code&gt; and operators such as &lt;code&gt;catchError&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt;. You will encounter more RxJS artifacts as you continue below.</source>
          <target state="translated">本指南的前几节提到了RxJS &lt;code&gt;Observables&lt;/code&gt; 和操作符，例如 &lt;code&gt;catchError&lt;/code&gt; 和 &lt;code&gt;retry&lt;/code&gt; 。当您继续下面时，您将遇到更多的RxJS工件。</target>
        </trans-unit>
        <trans-unit id="36939dd7e21e25efe97977bcc704881e41916a95" translate="yes" xml:space="preserve">
          <source>The previous simple example showed passing in a string. To pass in an object, the syntax and thinking are the same.</source>
          <target state="translated">前面的简单例子展示了传入一个字符串。要传入一个对象,语法和思路都是一样的。</target>
        </trans-unit>
        <trans-unit id="56f2a62246eea5c3c9cdaa4780c32f7e493575ed" translate="yes" xml:space="preserve">
          <source>The previous tests played the role of the host &lt;code&gt;DashboardComponent&lt;/code&gt; themselves. But does the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; work correctly when properly data-bound to a host component?</source>
          <target state="translated">先前的测试本身扮演了主机 &lt;code&gt;DashboardComponent&lt;/code&gt; 的角色。但是，正确地将数据绑定到主机组件时， &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 是否可以正常工作？</target>
        </trans-unit>
        <trans-unit id="5bf3abe312936fd7f8c715b3c6575f72f4cc1b47" translate="yes" xml:space="preserve">
          <source>The previous value of the attribute.</source>
          <target state="translated">属性的前一个值。</target>
        </trans-unit>
        <trans-unit id="1dfa467560796beba789d3214a05abeb3f64d6a8" translate="yes" xml:space="preserve">
          <source>The previous version assigns an array of heroes to the component's &lt;code&gt;heroes&lt;/code&gt; property. The assignment occurs &lt;em&gt;synchronously&lt;/em&gt;, as if the server could return heroes instantly or the browser could freeze the UI while it waited for the server's response.</source>
          <target state="translated">先前版本将英雄数组分配给组件的 &lt;code&gt;heroes&lt;/code&gt; 属性。分配&lt;em&gt;同步进行&lt;/em&gt;，就像服务器可以立即返回英雄，或者浏览器可以在等待服务器响应时冻结UI一样。</target>
        </trans-unit>
        <trans-unit id="72231ecb9078c4b31429d32906f226cb03e9377c" translate="yes" xml:space="preserve">
          <source>The primary navigation part has changed; the secondary route is the same.</source>
          <target state="translated">一级导航部分有变化,二级路线不变。</target>
        </trans-unit>
        <trans-unit id="3c9d8bf0259e3eb63f943c6785b8b6a011914253" translate="yes" xml:space="preserve">
          <source>The primary routing outlet.</source>
          <target state="translated">主要的路由出口。</target>
        </trans-unit>
        <trans-unit id="486f9745b09ef70dd0d395c0292014660ec3a6b7" translate="yes" xml:space="preserve">
          <source>The process of &lt;code&gt;HeroService&lt;/code&gt; injection looks something like this.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; 注入的过程如下所示。</target>
        </trans-unit>
        <trans-unit id="f2e3b6f36c0c22bc94631be9ba69dd603b5d41ff" translate="yes" xml:space="preserve">
          <source>The product details component already uses the cart service (&lt;code&gt;CartService&lt;/code&gt;) to add products to the cart.</source>
          <target state="translated">产品详细信息组件已经使用购物车服务（ &lt;code&gt;CartService&lt;/code&gt; ）将产品添加到购物车。</target>
        </trans-unit>
        <trans-unit id="8021e87038c33d08539a200b856644645d4e9ce1" translate="yes" xml:space="preserve">
          <source>The product details component handles the display of each product. The Angular Router displays components based on the browser's URL and your defined routes. You'll use the Angular Router to combine the &lt;code&gt;products&lt;/code&gt; data and route information to display the specific details for each product.</source>
          <target state="translated">产品详细信息组件处理每个产品的显示。Angular Router根据浏览器的URL和您定义的路由显示组件。您将使用Angular Router组合 &lt;code&gt;products&lt;/code&gt; 数据和路由信息，以显示每个产品的特定详细信息。</target>
        </trans-unit>
        <trans-unit id="7eb6cfe553c75eff3acf81ec96aea3ac0265c8bb" translate="yes" xml:space="preserve">
          <source>The project also contains some animations. You won't upgrade them in this version of the guide. Turn to the &lt;a href=&quot;animations&quot;&gt;Angular animations&lt;/a&gt; guide to learn about that.</source>
          <target state="translated">该项目还包含一些动画。您不会在此版本的指南中升级它们。转到&lt;a href=&quot;animations&quot;&gt;Angular动画&lt;/a&gt;指南以了解有关内容。</target>
        </trans-unit>
        <trans-unit id="cb22493e5247fcf1b73099aacb2b51c7edb8e5bf" translate="yes" xml:space="preserve">
          <source>The project you create with the CLI is immediately ready to test. Just run the &lt;a href=&quot;cli/test&quot;&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/a&gt; CLI command:</source>
          <target state="translated">您使用CLI创建的项目可以立即进行测试。只需运行&lt;a href=&quot;cli/test&quot;&gt; &lt;code&gt;ng test&lt;/code&gt; &lt;/a&gt; CLI命令：</target>
        </trans-unit>
        <trans-unit id="a1cfa2d4e83385878d411d839ce7a7cdbd9c013f" translate="yes" xml:space="preserve">
          <source>The projected content of &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; sees the 🐳 (whale), not the 🐶 (puppy), because the 🐶 (puppy) is inside the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; can only see the 🐶 (puppy) if it is also within the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 的投影内容看到🐳（鲸鱼），而不是🐶（puppy），因为🐶（puppy）在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 内部。如果 &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 也位于 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 中,则只能看到🐶（幼犬）。</target>
        </trans-unit>
        <trans-unit id="6e36792ea583ac976f37bafa9de7316d9520835d" translate="yes" xml:space="preserve">
          <source>The prompt runtime automatically validates the provided response against the constraints provided in the JSON schema. If the value is not acceptable, the user is prompted for a new value. This ensures that any values passed to the schematic meet the expectations of the schematic's implementation, so that you do not need to add additional checks within the schematic's code.</source>
          <target state="translated">提示运行时会根据JSON模式中提供的约束条件自动验证所提供的响应。如果值不可接受,则提示用户输入新的值。这确保了传递给原理图的任何值都能满足原理图实现的期望,因此你不需要在原理图的代码中添加额外的检查。</target>
        </trans-unit>
        <trans-unit id="7cf0ecec69996d92571eb4e4bd556aced4c3efe0" translate="yes" xml:space="preserve">
          <source>The properties of an &lt;code&gt;$event&lt;/code&gt; object vary depending on the type of DOM event. For example, a mouse event includes different information than an input box editing event.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 对象的属性取决于DOM事件的类型。例如，鼠标事件与输入框编辑事件所包含的信息不同。</target>
        </trans-unit>
        <trans-unit id="97a76f1a52bc3c879b21278ea18563262a1e410d" translate="yes" xml:space="preserve">
          <source>The properties of the &lt;code&gt;nativeElement&lt;/code&gt; depend upon the runtime environment. You could be running these tests on a &lt;em&gt;non-browser&lt;/em&gt; platform that doesn't have a DOM or whose DOM-emulation doesn't support the full &lt;code&gt;HTMLElement&lt;/code&gt; API.</source>
          <target state="translated">&lt;code&gt;nativeElement&lt;/code&gt; 的属性取决于运行时环境。您可以在没有DOM或DOM模拟不支持完整 &lt;code&gt;HTMLElement&lt;/code&gt; API 的&lt;em&gt;非浏览器&lt;/em&gt;平台上运行这些测试。</target>
        </trans-unit>
        <trans-unit id="c04dcd4d9e3fdfb316a49d102b3473f76bd1e0d6" translate="yes" xml:space="preserve">
          <source>The property name.</source>
          <target state="translated">财产名称。</target>
        </trans-unit>
        <trans-unit id="7df460d20d043603559a67d7974d835f9f0eed3f" translate="yes" xml:space="preserve">
          <source>The provided classes are added to the element when the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; becomes the current active route.</source>
          <target state="translated">当 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 成为当前活动路由时，将提供的类添加到元素。</target>
        </trans-unit>
        <trans-unit id="5b4910a760b25a51893dd6345e06c7f8b33600d7" translate="yes" xml:space="preserve">
          <source>The provider factory function (returned by &lt;code&gt;runnersUpFactory()&lt;/code&gt;) returns the actual dependency object, the string of names.</source>
          <target state="translated">提供者工厂函数（由 &lt;code&gt;runnersUpFactory()&lt;/code&gt; ）返回）返回实际的依赖对象，即名称字符串。</target>
        </trans-unit>
        <trans-unit id="b4c17117d8a92a8817f56060d61fb1bd4c763cc5" translate="yes" xml:space="preserve">
          <source>The provider object can have a third option, &lt;code&gt;multi: true&lt;/code&gt;, which you can use with &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; to register multiple handlers for the provide event.</source>
          <target state="translated">提供者对象可以具有第三个选项 &lt;code&gt;multi: true&lt;/code&gt; ，您可以将其与 &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; 一起使用，以为provider事件注册多个处理程序。</target>
        </trans-unit>
        <trans-unit id="02b3d62f3fe1096d970290346afe693026ae8245" translate="yes" xml:space="preserve">
          <source>The providers array is where you list the services the app needs. When you list services here, they are available app-wide. You can scope them when using feature modules and lazy loading. For more information, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">提供者数组是您列出应用程序所需服务的地方。当您在此处列出服务时，它们将在整个应用程序范围内可用。您可以在使用功能模块和延迟加载时确定它们的范围。有关更多信息，请参见&lt;a href=&quot;providers&quot;&gt;提供者&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dbfe5beb656c4962d3cf4b97d176386634f50d45" translate="yes" xml:space="preserve">
          <source>The public API for schematics defines classes that represent the basic concepts.</source>
          <target state="translated">示意图的公共API定义了代表基本概念的类。</target>
        </trans-unit>
        <trans-unit id="de6f6ac52bec399fd6660c2b4b054e9a39440b12" translate="yes" xml:space="preserve">
          <source>The public API for your library is maintained in the &lt;code&gt;public-api.ts&lt;/code&gt; file in your library folder. Anything exported from this file is made public when your library is imported into an application. Use an NgModule to expose services and components.</source>
          <target state="translated">库的公共API 在库文件夹的 &lt;code&gt;public-api.ts&lt;/code&gt; 文件中维护。当您的库导入到应用程序时，从此文件导出的所有内容都会公开。使用NgModule公开服务和组件。</target>
        </trans-unit>
        <trans-unit id="d054d0b6719a9e60f44011ba13eb8f4c3e083451" translate="yes" xml:space="preserve">
          <source>The query parameters shared by all the routes</source>
          <target state="translated">所有途径共享的查询参数</target>
        </trans-unit>
        <trans-unit id="4231089991bd8ff6dd16d350b35cc226cbd300f3" translate="yes" xml:space="preserve">
          <source>The query params of the URL</source>
          <target state="translated">URL的查询参数</target>
        </trans-unit>
        <trans-unit id="2e3c5b3a02d06abe266f2cfa14e56837b6f3527d" translate="yes" xml:space="preserve">
          <source>The query results to store</source>
          <target state="translated">查询结果存储</target>
        </trans-unit>
        <trans-unit id="ad7aeea31c0c6f526df9d9af5712f3c533c2d889" translate="yes" xml:space="preserve">
          <source>The query returns &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; wrappers around the matching elements.</source>
          <target state="translated">该查询返回围绕匹配元素的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 包装器。</target>
        </trans-unit>
        <trans-unit id="420962f6ff64d28c5e044d0cc2355bfc2ea5030a" translate="yes" xml:space="preserve">
          <source>The query returns a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; for the paragraph.</source>
          <target state="translated">查询返回该段落的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9af7bb5d4e8ad84a327ab8455d86b884cbad452" translate="yes" xml:space="preserve">
          <source>The quick-info feature allows you to hover to see where components, directives, modules, and so on come from. You can then click &quot;Go to definition&quot; or press F12 to go directly to the definition.</source>
          <target state="translated">快速信息功能允许你悬停查看组件、指令、模块等的来源。然后你可以点击 &quot;转到定义 &quot;或按F12直接进入定义。</target>
        </trans-unit>
        <trans-unit id="50926fb8f24e0f7a0c8fd99de16fa0fdad121aad" translate="yes" xml:space="preserve">
          <source>The reader requests a page by its Page URL. The doc viewer fetches the corresponding JSON file, interprets it, and renders it as fully-formed HTML page.</source>
          <target state="translated">读者通过页面URL请求一个页面。doc浏览器获取相应的JSON文件,对其进行解释,并将其渲染为完全成形的HTML页面。</target>
        </trans-unit>
        <trans-unit id="161d1b9d874c147636f786db6462e2b921a846dc" translate="yes" xml:space="preserve">
          <source>The real &lt;code&gt;RouterLinkDirective&lt;/code&gt; is quite complicated and entangled with other components and directives of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. It requires challenging setup to mock and use in tests.</source>
          <target state="translated">真正的 &lt;code&gt;RouterLinkDirective&lt;/code&gt; 非常复杂，并且与 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 的其他组件和指令纠缠在一起。它要求挑战性的设置以模拟和在测试中使用。</target>
        </trans-unit>
        <trans-unit id="7ceba990815347e65fc419a07143830d7018fac5" translate="yes" xml:space="preserve">
          <source>The reason is &lt;em&gt;tree shaking&lt;/em&gt;. For production apps you want to load the smallest, fastest code possible. The code should contain only the classes that you actually need. It should exclude a component that's never used, whether or not that component is declared.</source>
          <target state="translated">原因是&lt;em&gt;摇树&lt;/em&gt;。对于生产应用程序，您希望加载最小，最快的代码。该代码应仅包含您实际需要的类。它应排除从未使用过的组件，无论该组件是否已声明。</target>
        </trans-unit>
        <trans-unit id="6a078f105d135e610ac0d0702bdd6e7a40c0fae9" translate="yes" xml:space="preserve">
          <source>The reason is simplicity. Structural directives can do complex things with the host element and its descendents. When two directives lay claim to the same host element, which one takes precedence? Which should go first, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;NgFor&lt;/code&gt;? Can the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; cancel the effect of the &lt;code&gt;NgFor&lt;/code&gt;? If so (and it seems like it should be so), how should Angular generalize the ability to cancel for other structural directives?</source>
          <target state="translated">原因是简单。结构化指令可以对宿主元素及其后代进行复杂的处理。当两个指令对同一宿主元素提出要求时，哪个优先？ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;NgFor&lt;/code&gt; 应该先走？在可 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 取消的影响 &lt;code&gt;NgFor&lt;/code&gt; ？如果是这样（看起来应该是这样），Angular应该如何概括取消其他结构性指令的能力？</target>
        </trans-unit>
        <trans-unit id="fafb040a487d878e72e67cd8a770eb670b009039" translate="yes" xml:space="preserve">
          <source>The recently-developed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; Web Platform feature is currently supported natively in a number of browsers. Support is pending or planned in other browsers.</source>
          <target state="translated">许多浏览器目前都支持最近开发的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;自定义元素&lt;/a&gt; Web平台功能。支持在其他浏览器中待定或计划中。</target>
        </trans-unit>
        <trans-unit id="fa75dd5d0bada1f47ade184135ab747fbf80a41c" translate="yes" xml:space="preserve">
          <source>The redirect path can be relative, as shown in this example, or absolute. If we change the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; value in the example to the absolute URL segment '/user/:name', the result URL is also absolute, '/user/jim'.</source>
          <target state="translated">重定向路径可以是相对的（如本示例所示），也可以是绝对的。如果我们将示例中的 &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; 值更改为绝对URL段&amp;ldquo; / user /：name&amp;rdquo;，则结果URL也是绝对&amp;ldquo; / user / jim&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="ce8f45225aa19c5dcf369c6d23b7264529fa54d7" translate="yes" xml:space="preserve">
          <source>The reference value of itemForm, without the ngForm attribute value, would be the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;. There is, however, a difference between a Component and a Directive in that a &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; will be referenced without specifying the attribute value, and a &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; will not change the implicit reference (that is, the element).</source>
          <target state="translated">没有ngForm属性值的itemForm的引用值将是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;。但是，Component和Directive之间的区别在于，在不指定属性值的情况下将引用 &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; ，并且 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 不会更改隐式引用（即元素）。</target>
        </trans-unit>
        <trans-unit id="3e74d5a063ed6ad113dcb0dc04276262826975d9" translate="yes" xml:space="preserve">
          <source>The reference variable&amp;rsquo;s &lt;code&gt;valid&lt;/code&gt; property on input controls to check if a control is valid and show/hide error messages.</source>
          <target state="translated">输入控件上参考变量的 &lt;code&gt;valid&lt;/code&gt; 属性，用于检查控件是否有效以及显示/隐藏错误消息。</target>
        </trans-unit>
        <trans-unit id="8e1c54c7687dd1cbc34b9457b4da8f1141636f2c" translate="yes" xml:space="preserve">
          <source>The registered async validator function for the control</source>
          <target state="translated">控件的注册异步验证器功能。</target>
        </trans-unit>
        <trans-unit id="14569c3edda6f10cb9b8ea1799a88a50904561f7" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a blur event occurs on the input element.</source>
          <target state="translated">当输入元素发生模糊事件时调用的注册回调函数。</target>
        </trans-unit>
        <trans-unit id="83a100bf5139d939736b31435c736c0e17e4ef73" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a change event occurs on the input element.</source>
          <target state="translated">当输入元素发生变化事件时调用的注册回调函数。</target>
        </trans-unit>
        <trans-unit id="8325421c1589c4b1cafcd0c9b1b460010fe4dabd" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a change or input event occurs on the input element.</source>
          <target state="translated">当输入元素发生变化或输入事件时调用的注册回调函数。</target>
        </trans-unit>
        <trans-unit id="60864d0a7b033aeeb5697aea8e9fe00704ce69b5" translate="yes" xml:space="preserve">
          <source>The registered callback function called when an input event occurs on the input element.</source>
          <target state="translated">当输入元素发生输入事件时调用的注册回调函数。</target>
        </trans-unit>
        <trans-unit id="3f720157232b77c5ba1d4c879a427fa93efc8bc0" translate="yes" xml:space="preserve">
          <source>The registered synchronous validator function for the control</source>
          <target state="translated">控件的注册同步验证器功能。</target>
        </trans-unit>
        <trans-unit id="611af0e0b9e0bf773539c9b919be8a53d47c0b03" translate="yes" xml:space="preserve">
          <source>The related &lt;code&gt;HeroDetailComponent&lt;/code&gt; tests will assert that methods of the &lt;code&gt;HeroDetailService&lt;/code&gt; were called by spying on the service methods. Accordingly, the stub implements its methods as spies:</source>
          <target state="translated">相关 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 测试将断言方法 &lt;code&gt;HeroDetailService&lt;/code&gt; 被刺探服务方法调用。因此，存根将其方法实现为间谍：</target>
        </trans-unit>
        <trans-unit id="0eb0173de0887207bb65b45ebe9f9fe125988a13" translate="yes" xml:space="preserve">
          <source>The relative path or absolute URL of a template file for an Angular component. If provided, do not supply an inline template using &lt;code&gt;template&lt;/code&gt;.</source>
          <target state="translated">Angular组件的模板文件的相对路径或绝对URL。如果提供，请勿使用 &lt;code&gt;template&lt;/code&gt; 提供内联模板。</target>
        </trans-unit>
        <trans-unit id="b2a5f769df13524fc33173a60f95e5ebec2a8cc9" translate="yes" xml:space="preserve">
          <source>The relevant &lt;em&gt;Crisis Center&lt;/em&gt; code for this milestone follows.</source>
          <target state="translated">此里程碑的相关&lt;em&gt;危机中心&lt;/em&gt;代码如下。</target>
        </trans-unit>
        <trans-unit id="fde1ac3dfd43433ca4e661ed9e84a40407308eaf" translate="yes" xml:space="preserve">
          <source>The remainder of this page discusses selected exercises in further detail.</source>
          <target state="translated">本页其余部分将进一步详细讨论部分练习。</target>
        </trans-unit>
        <trans-unit id="c8e8b3d7ca0d64b17a2fb3f293951af67e52afb0" translate="yes" xml:space="preserve">
          <source>The remaining tests confirm the logic of the component when the service returns different values. The second test validates the effect of changing the user name. The third test checks that the component displays the proper message when there is no logged-in user.</source>
          <target state="translated">其余测试确认了服务返回不同值时组件的逻辑。第二个测试验证更改用户名的效果。第三个测试检查当没有登录的用户时,组件是否显示了正确的消息。</target>
        </trans-unit>
        <trans-unit id="d7142c777489862d6522489ad8690b6cad01d02e" translate="yes" xml:space="preserve">
          <source>The repeater matcher relies on AngularJS &lt;code&gt;ng-repeat&lt;/code&gt;</source>
          <target state="translated">转发器匹配器依赖于AngularJS &lt;code&gt;ng-repeat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91ad245b7614259a383728070796f36b7c6a8e1a" translate="yes" xml:space="preserve">
          <source>The request body</source>
          <target state="translated">请求机构</target>
        </trans-unit>
        <trans-unit id="8baeab2869311562a541f4781282737e0d643863" translate="yes" xml:space="preserve">
          <source>The request body, or &lt;code&gt;null&lt;/code&gt; if one isn't set.</source>
          <target state="translated">请求正文；如果未设置，则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6f77845fbe311e08dbeaef52a6fd2daf4e328ed" translate="yes" xml:space="preserve">
          <source>The request object.</source>
          <target state="translated">请求对象。</target>
        </trans-unit>
        <trans-unit id="295297cd89c4bbc0045b1baf52143c439e6a5d78" translate="yes" xml:space="preserve">
          <source>The request was sent out over the wire.</source>
          <target state="translated">请求是通过电报发出的。</target>
        </trans-unit>
        <trans-unit id="cc47fc94ef80a1928c330c84f157fee95dfbc73f" translate="yes" xml:space="preserve">
          <source>The requests keep forwarding up until Angular finds an injector that can handle the request or runs out of ancestor &lt;code&gt;ElementInjector&lt;/code&gt;s.</source>
          <target state="translated">这些请求一直向前转发，直到Angular找到可以处理该请求的注入器或用完祖先 &lt;code&gt;ElementInjector&lt;/code&gt; 为止。</target>
        </trans-unit>
        <trans-unit id="4bca2438c6c78d7f3598583261e82a87e4585f19" translate="yes" xml:space="preserve">
          <source>The required character width.</source>
          <target state="translated">所需的字符宽度。</target>
        </trans-unit>
        <trans-unit id="e78685155e9f5bf3ed47c8190c17fafaf81b4db7" translate="yes" xml:space="preserve">
          <source>The required grammatical form.</source>
          <target state="translated">要求的语法形式。</target>
        </trans-unit>
        <trans-unit id="6a56567a9d466e6d132c390ae6771774b8bf936d" translate="yes" xml:space="preserve">
          <source>The resource URL.</source>
          <target state="translated">资源URL。</target>
        </trans-unit>
        <trans-unit id="2806bdfe81615de27dd71c7273cdcf5fec886325" translate="yes" xml:space="preserve">
          <source>The resources to add/update.</source>
          <target state="translated">增加/更新的资源。</target>
        </trans-unit>
        <trans-unit id="722bde3a779c6b7c44b072db8c9bef73a7dcee92" translate="yes" xml:space="preserve">
          <source>The resources to edit.</source>
          <target state="translated">要编辑的资源。</target>
        </trans-unit>
        <trans-unit id="b3b51cad36d2295674a88b5feb5f325a8dd9c5d1" translate="yes" xml:space="preserve">
          <source>The response body doesn't return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</source>
          <target state="translated">响应体并不会返回您可能需要的所有数据。有时服务器会返回特殊的头信息或状态码,以指示某些对应用工作流很重要的条件。</target>
        </trans-unit>
        <trans-unit id="9b93e53ea5820a1f628a4de1e5b36ddaf81f432c" translate="yes" xml:space="preserve">
          <source>The response body, or &lt;code&gt;null&lt;/code&gt; if one was not returned.</source>
          <target state="translated">响应主体；如果未返回，则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99668b05017e2aa5e864a17012f39fce4777e24e" translate="yes" xml:space="preserve">
          <source>The response status code and headers were received.</source>
          <target state="translated">收到了响应状态码和标题。</target>
        </trans-unit>
        <trans-unit id="31138b87e6e07d760fa91a8f35bc7d6cef938655" translate="yes" xml:space="preserve">
          <source>The rest are stubs.</source>
          <target state="translated">其余的都是存根。</target>
        </trans-unit>
        <trans-unit id="527a427539693b3f88205ed83bab6a41153d480e" translate="yes" xml:space="preserve">
          <source>The rest of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, including its class attribute, moved inside the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 的其余部分（包括其class属性）在 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素内移动。</target>
        </trans-unit>
        <trans-unit id="c743d737d76a8c6fba14ac64a1884a8a176429a0" translate="yes" xml:space="preserve">
          <source>The rest of the articles in this section specifically address the Angular implementation of service workers.</source>
          <target state="translated">本节的其他文章专门讨论Angular对服务人员的实现。</target>
        </trans-unit>
        <trans-unit id="62158bbbf1c618865ea1d81d423f963b4dce87ef" translate="yes" xml:space="preserve">
          <source>The rest of the file is boilerplate setup code anticipating more advanced tests that &lt;em&gt;might&lt;/em&gt; become necessary if the component evolves into something substantial.</source>
          <target state="translated">该文件的其余部分是样板设置代码，用于预期如果组件演变为实质性组件时&lt;em&gt;可能&lt;/em&gt;需要进行的更高级的测试。</target>
        </trans-unit>
        <trans-unit id="72f013f648fdb7d77ec051dfbd8e0aae42973747" translate="yes" xml:space="preserve">
          <source>The rest of the scenario code relies on other Angular features and techniques that you can learn about elsewhere in the documentation. You can review it and download it from the live example.</source>
          <target state="translated">其余的场景代码依赖于其他的Angular特性和技术,你可以在文档的其他地方学习。你可以回顾它并从现场示例中下载它。</target>
        </trans-unit>
        <trans-unit id="9db844629762b7e377da3fb6860ee3d92e73f3e4" translate="yes" xml:space="preserve">
          <source>The result is shown below, with the hero's telephone number from &lt;code&gt;HeroContactComponent&lt;/code&gt; projected above the hero description.</source>
          <target state="translated">结果如下所示，来自 &lt;code&gt;HeroContactComponent&lt;/code&gt; 的英雄电话号码投射在英雄描述上方。</target>
        </trans-unit>
        <trans-unit id="cf49885d2cf1bce6d0595e7a953482bda25b0935" translate="yes" xml:space="preserve">
          <source>The result of an expression might require some transformation before you're ready to use it in a binding. For example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.</source>
          <target state="translated">一个表达式的结果可能需要进行一些转换,然后才能在绑定中使用。例如,您可能会将一个数字显示为货币,将文本改为大写,或过滤一个列表并对其进行排序。</target>
        </trans-unit>
        <trans-unit id="70660d474935bb5c58cc521f6669d3b23f3ad648" translate="yes" xml:space="preserve">
          <source>The result of the expression is passed to the pipe's &lt;code&gt;transform()&lt;/code&gt; method.</source>
          <target state="translated">表达式的结果传递到管道的 &lt;code&gt;transform()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="bf135bfcdaf4cfe03aad3aa70f5998ea60da6489" translate="yes" xml:space="preserve">
          <source>The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.</source>
          <target state="translated">当输入被突变时,这个管道的结果不会被重新评估。为了避免在每个变化检测周期都需要重新格式化日期,将日期视为一个不可变的对象,并在管道需要再次运行时更改引用。</target>
        </trans-unit>
        <trans-unit id="826ce97508a4661aa985a17e8919e5c33ad0cebf" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; class should look like this:</source>
          <target state="translated">生成的 &lt;code&gt;CartComponent&lt;/code&gt; 类应如下所示：</target>
        </trans-unit>
        <trans-unit id="a571031ddb791d5885d8b255dffe7c11b80344d0" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">生成的 &lt;code&gt;CartComponent&lt;/code&gt; 模板应如下所示：</target>
        </trans-unit>
        <trans-unit id="abe704b8eceeacf1b67a89d121ecca1aade1a14f" translate="yes" xml:space="preserve">
          <source>The resulting configuration does not wire up AngularJS digests to Zone hooks. It is the responsibility of the test writer to call &lt;code&gt;$rootScope.$apply&lt;/code&gt;, as necessary, to trigger AngularJS handlers of async events from Angular.</source>
          <target state="translated">结果配置不会将AngularJS摘要连接到Zone挂钩。测试编写者有责任在必要时调用 &lt;code&gt;$rootScope.$apply&lt;/code&gt; 来触发Angular中异步事件的AngularJS处理程序。</target>
        </trans-unit>
        <trans-unit id="bcbab465692903fa7cd8359d43327dd68fd697f4" translate="yes" xml:space="preserve">
          <source>The resulting crisis center is a foundation for introducing a new concept&amp;mdash;&lt;strong&gt;child routing&lt;/strong&gt;. You can leave &lt;em&gt;Heroes&lt;/em&gt; in its current state as a contrast with the &lt;em&gt;Crisis Center&lt;/em&gt; and decide later if the differences are worthwhile.</source>
          <target state="translated">由此产生的危机中心是引入新概念（&lt;strong&gt;子路由）的基础&lt;/strong&gt;。您可以将&lt;em&gt;Heroes&lt;/em&gt;保留在当前状态，以与&lt;em&gt;Crisis Center&lt;/em&gt;进行对比，然后再决定是否值得这样做。</target>
        </trans-unit>
        <trans-unit id="de4d48c6b6c99ee6545e5af2a4c9556b34785c31" translate="yes" xml:space="preserve">
          <source>The resulting path is &lt;code&gt;/crisis-center/1&lt;/code&gt;.</source>
          <target state="translated">结果路径为 &lt;code&gt;/crisis-center/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3119670930697faa92fa40415fd5310703990877" translate="yes" xml:space="preserve">
          <source>The reusable animation to start.</source>
          <target state="translated">可重复使用的动画开始。</target>
        </trans-unit>
        <trans-unit id="c31f00e06ff51792a57ab30c7e7548ddc8902084" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;CachingInterceptor&lt;/code&gt; sets up a server request whether there's a cached value or not, using the same &lt;code&gt;sendRequest()&lt;/code&gt; method described &lt;a href=&quot;http#send-request&quot;&gt;above&lt;/a&gt;. The &lt;code&gt;results$&lt;/code&gt; observable will make the request when subscribed.</source>
          <target state="translated">订正 &lt;code&gt;CachingInterceptor&lt;/code&gt; 设置一个服务器请求是否有一个高速缓存值或没有，使用相同的 &lt;code&gt;sendRequest()&lt;/code&gt; 描述的方法的&lt;a href=&quot;http#send-request&quot;&gt;上面&lt;/a&gt;。可观察的 &lt;code&gt;results$&lt;/code&gt; 将在订阅后发出请求。</target>
        </trans-unit>
        <trans-unit id="be95ae4bd6dde666442aa0c4fe5f5b09117ba06c" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; class file should look like this:</source>
          <target state="translated">修改后的 &lt;code&gt;HeroesComponent&lt;/code&gt; 类文件应如下所示：</target>
        </trans-unit>
        <trans-unit id="8f5283cba25861d79d0e19a7a740a98060be3788" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">修改后的 &lt;code&gt;HeroesComponent&lt;/code&gt; 模板应如下所示：</target>
        </trans-unit>
        <trans-unit id="63cda66359a819e7cbb619142c9b706aff15c48f" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppComponent&lt;/code&gt; is the application shell. It has a title, a navigation bar with two links, and a router outlet where the router swaps components on and off the page. Here's what you get:</source>
          <target state="translated">根 &lt;code&gt;AppComponent&lt;/code&gt; 是应用程序外壳程序。它有一个标题，一个带有两个链接的导航栏，以及一个路由器插座，路由器在该插座上交换页面上和页面外的组件。这是您得到的：</target>
        </trans-unit>
        <trans-unit id="0f0329ffe5ecceeb131961f70f4acb552bdcbfe8" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppModule&lt;/code&gt; is the only module that should import service modules.</source>
          <target state="translated">根 &lt;code&gt;AppModule&lt;/code&gt; 是唯一应导入服务模块的模块。</target>
        </trans-unit>
        <trans-unit id="92c90ae30fd5c691212cf46563dac3961bb08cdc" translate="yes" xml:space="preserve">
          <source>The root application module, &lt;code&gt;AppModule&lt;/code&gt;, of almost every browser application should import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">几乎每个浏览器应用程序的根应用程序模块 &lt;code&gt;AppModule&lt;/code&gt; 都应从 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 导入 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bbda7caf7baa01267a84d3e9deab3bbca8a3fdbd" translate="yes" xml:space="preserve">
          <source>The root directory of the app.</source>
          <target state="translated">应用的根目录。</target>
        </trans-unit>
        <trans-unit id="6a64de3e02b9fca633213b81541751cd41ab0a11" translate="yes" xml:space="preserve">
          <source>The root element to search from</source>
          <target state="translated">要搜索的根元素</target>
        </trans-unit>
        <trans-unit id="671d824111bab81ec8318377b2e219bfaa96820d" translate="yes" xml:space="preserve">
          <source>The root folder for this project's files, relative to the workspace folder. Empty for the initial app, which resides at the top level of the workspace.</source>
          <target state="translated">相对于工作区文件夹,这个项目文件的根文件夹。对于初始应用来说是空的,它位于工作区的顶层。</target>
        </trans-unit>
        <trans-unit id="54dbf3939551d85e7abddf427d6a6ad0d92df9b4" translate="yes" xml:space="preserve">
          <source>The root folder for this project's source files.</source>
          <target state="translated">本项目源文件的根文件夹。</target>
        </trans-unit>
        <trans-unit id="b1ec0372f1cddf50e90c0a7dde345a963fecb42f" translate="yes" xml:space="preserve">
          <source>The root module is all you need in a simple application with a few components. As the app grows, you refactor the root module into &lt;a href=&quot;feature-modules&quot;&gt;feature modules&lt;/a&gt; that represent collections of related functionality. You then import these modules into the root module.</source>
          <target state="translated">在具有几个组件的简单应用程序中，只需使用根模块。随着应用程序的增长，您可以将根模块重构为代表相关功能集合的&lt;a href=&quot;feature-modules&quot;&gt;功能模块&lt;/a&gt;。然后，将这些模块导入到根模块中。</target>
        </trans-unit>
        <trans-unit id="da27980955945e04ad4a054ed93c8229a2cdc100" translate="yes" xml:space="preserve">
          <source>The root nodes for this embedded view.</source>
          <target state="translated">该嵌入式视图的根节点。</target>
        </trans-unit>
        <trans-unit id="3397f990a2e5dcb255a1ff4ae7da260d1d6f2244" translate="yes" xml:space="preserve">
          <source>The root of the problem is at least one of the components involved in the test specifies an external template or CSS file as the following version of the &lt;code&gt;BannerComponent&lt;/code&gt; does.</source>
          <target state="translated">问题的根源是测试中涉及的至少一个组件指定了一个外部模板或CSS文件，如以下版本的 &lt;code&gt;BannerComponent&lt;/code&gt; 一样。</target>
        </trans-unit>
        <trans-unit id="43d23a95dcd95d02fff170aa27124ad27dadf776" translate="yes" xml:space="preserve">
          <source>The root of the router state</source>
          <target state="translated">路由器状态的根源</target>
        </trans-unit>
        <trans-unit id="4972cd8af27405ae6af97b76c474d6f24b212689" translate="yes" xml:space="preserve">
          <source>The root of the router state.</source>
          <target state="translated">路由器状态的根。</target>
        </trans-unit>
        <trans-unit id="2877c97510f1f533a0813b5a4c64f21f27b1ea42" translate="yes" xml:space="preserve">
          <source>The root segment group of the URL tree</source>
          <target state="translated">URL树的根段组</target>
        </trans-unit>
        <trans-unit id="3c8a01ed9794c16c0a0e02ced63c7a78d14e47e4" translate="yes" xml:space="preserve">
          <source>The route array for the new configuration.</source>
          <target state="translated">新配置的路径数组。</target>
        </trans-unit>
        <trans-unit id="bef3a96e68be9a7e3e4e120593f324d30c516bbd" translate="yes" xml:space="preserve">
          <source>The route configuration to provide.</source>
          <target state="translated">要提供的途径配置。</target>
        </trans-unit>
        <trans-unit id="c73d7a5fdb6e04fbea56a19afdcaf95a1328d979" translate="yes" xml:space="preserve">
          <source>The route configuration used for the route that contains the origin path.</source>
          <target state="translated">含有起始路径的途径所使用的途径配置。</target>
        </trans-unit>
        <trans-unit id="4e196abefd449c7a38cdaa9e24641456ced4d25e" translate="yes" xml:space="preserve">
          <source>The route parameters correspond to the path variables defined in the route. The &lt;code&gt;productId&lt;/code&gt; is provided from the URL that was matched to the route. You use the &lt;code&gt;productId&lt;/code&gt; to display the details for each unique product.</source>
          <target state="translated">路径参数对应于路径中定义的路径变量。该 &lt;code&gt;productId&lt;/code&gt; 参数是从被匹配到路由的URL提供。您使用 &lt;code&gt;productId&lt;/code&gt; 来显示每个唯一产品的详细信息。</target>
        </trans-unit>
        <trans-unit id="66d3701516f8bcdfaf06a82d17fcdba4c47e9b5a" translate="yes" xml:space="preserve">
          <source>The route path and parameters are available through an injected router service called the &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;. It has a great deal of useful information including:</source>
          <target state="translated">路由路径和参数可通过注入的路由器服务（称为&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute）获得&lt;/a&gt;。它具有大量有用的信息，包括：</target>
        </trans-unit>
        <trans-unit id="d1f012c5745d0ca7adf488982b001bebc88d2038" translate="yes" xml:space="preserve">
          <source>The route path for a lazy-loaded module. When supplied, creates a component in the new module, and adds the route to that component in the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array declared in the module provided in the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">延迟加载的模块的路由路径。提供时，在新模块中创建一个组件，并将路由添加到 &lt;code&gt;--module&lt;/code&gt; 选项提供的模块中声明的 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 数组中的该组件。</target>
        </trans-unit>
        <trans-unit id="f851c13eed7f013f3276fc1f09b0556e9f7b748d" translate="yes" xml:space="preserve">
          <source>The route to consider.</source>
          <target state="translated">要考虑的路线。</target>
        </trans-unit>
        <trans-unit id="e5fc4b54a42e423066458d8e19e63d73e48616e9" translate="yes" xml:space="preserve">
          <source>The route's parent &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; when this route is a &lt;a href=&quot;router#child-routing-component&quot;&gt;child route&lt;/a&gt;.</source>
          <target state="translated">路由的父级 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; (当此路由为&lt;a href=&quot;router#child-routing-component&quot;&gt;子路由时）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff45d5a87a74679f399b1959935f568d12a35bbf" translate="yes" xml:space="preserve">
          <source>The router &lt;code&gt;navigate&lt;/code&gt; method takes the same one-item &lt;em&gt;link parameters array&lt;/em&gt; that you can bind to a &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; directive. It holds the &lt;em&gt;path to the &lt;code&gt;HeroListComponent&lt;/code&gt;&lt;/em&gt;:</source>
          <target state="translated">路由器 &lt;code&gt;navigate&lt;/code&gt; 方法采用可以绑定到 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt; ]指令的相同的单项&lt;em&gt;链接参数数组&lt;/em&gt;。它保存&lt;em&gt;了&lt;/em&gt;&lt;em&gt; &lt;code&gt;HeroListComponent&lt;/code&gt; &lt;/em&gt;的&lt;em&gt;路径&lt;/em&gt;：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6adcc63174d5c2a81f7c61ec96d14f7c1aa0c0c" translate="yes" xml:space="preserve">
          <source>The router adds the lazy module's providers and the providers of its imported NgModules to this child injector.</source>
          <target state="translated">路由器将懒惰模块的提供者和其导入的NgModules的提供者添加到这个子注入器中。</target>
        </trans-unit>
        <trans-unit id="464e7a2dded2eb7cef76bc15857f7a52ef5cb36b" translate="yes" xml:space="preserve">
          <source>The router assumed that your route specification targeted the &lt;em&gt;unnamed&lt;/em&gt; primary outlet and created these objects for you.</source>
          <target state="translated">路由器假定您的路由规范以&lt;em&gt;未命名的&lt;/em&gt;主要插座为目标，并为您创建了这些对象。</target>
        </trans-unit>
        <trans-unit id="86314416e2f5eb8bbfe8d314a88dba892d7a1414" translate="yes" xml:space="preserve">
          <source>The router calls the &lt;code&gt;preload&lt;/code&gt; method with two arguments:</source>
          <target state="translated">路由器使用两个参数调用 &lt;code&gt;preload&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="0b7b212269847557351f8b5a3f629304f4a10730" translate="yes" xml:space="preserve">
          <source>The router composes the destination URL from the array like this: &lt;code&gt;localhost:4200/hero/15&lt;/code&gt;.</source>
          <target state="translated">路由器从数组中组成目标URL，如下所示： &lt;code&gt;localhost:4200/hero/15&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e64c73914c5847d2de53b2cd6e0ad0774bfb328" translate="yes" xml:space="preserve">
          <source>The router defines navigation among views on a single page, as opposed to navigation among pages. It interprets URL-like links to determine which views to create or destroy, and which components to load or unload. It allows you to take advantage of &lt;a href=&quot;glossary#lazy-load&quot;&gt;lazy loading&lt;/a&gt; in your Angular apps.</source>
          <target state="translated">路由器在单个页面上的视图之间定义导航，而不是页面之间的导航。它解释类URL的链接，以确定要创建或销毁哪些视图，以及要加载或卸载哪些组件。它允许您利用Angular应用程序中的&lt;a href=&quot;glossary#lazy-load&quot;&gt;延迟加载&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c17670c71f8c023ad90633a12d89c42440504772" translate="yes" xml:space="preserve">
          <source>The router displays the components of these routes in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;CrisisCenterComponent&lt;/code&gt;, not in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">路由器在 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;CrisisCenterComponent&lt;/code&gt; 显示这些路由的组件，而不在 &lt;code&gt;AppComponent&lt;/code&gt; Shell 的 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 中显示。</target>
        </trans-unit>
        <trans-unit id="5c928e0d20717c8c5f4b3a4efd2288875d0f9b06" translate="yes" xml:space="preserve">
          <source>The router draws upon its registry of definitions when the browser URL changes or when application code tells the router to navigate along a route path.</source>
          <target state="translated">当浏览器URL发生变化时,或者当应用程序代码告诉路由器沿着路由路径导航时,路由器就会利用它的定义注册表。</target>
        </trans-unit>
        <trans-unit id="a093fc77d863ec9bd9a835484c18df4bd2839243" translate="yes" xml:space="preserve">
          <source>The router embedded the &lt;code&gt;id&lt;/code&gt; value in the navigation URL because you had defined it as a route parameter with an &lt;code&gt;:id&lt;/code&gt; placeholder token in the route &lt;code&gt;path&lt;/code&gt;:</source>
          <target state="translated">该路由器内置的 &lt;code&gt;id&lt;/code&gt; 值的导航网址，因为你已经用它定义为一个路由参数 &lt;code&gt;:id&lt;/code&gt; 在路由令牌占位符 &lt;code&gt;path&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0703ea253b9b207877f837c0ebf348dabd5b539b" translate="yes" xml:space="preserve">
          <source>The router extracts the route parameter (&lt;code&gt;id:15&lt;/code&gt;) from the URL and supplies it to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; via the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">路由器从URL中提取路由参数（ &lt;code&gt;id:15&lt;/code&gt; ），并通过 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 服务将其提供给 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36f288f65a85dc5f52b243320808ca5d7d00fb50" translate="yes" xml:space="preserve">
          <source>The router interprets a link URL according to your app's view navigation rules and data state. You can navigate to new views when the user clicks a button or selects from a drop box, or in response to some other stimulus from any source. The router logs activity in the browser's history, so the back and forward buttons work as well.</source>
          <target state="translated">路由器根据您的应用程序的视图导航规则和数据状态来解释链接URL。当用户点击按钮或从下拉框中选择时,或响应任何来源的其他刺激时,你可以导航到新的视图。路由器将活动记录在浏览器的历史记录中,因此后退和前进按钮也能正常工作。</target>
        </trans-unit>
        <trans-unit id="40f94c674310a595511f95be3e481296d4f01b3b" translate="yes" xml:space="preserve">
          <source>The router is keeping track of two separate branches in a navigation tree and generating a representation of that tree in the URL.</source>
          <target state="translated">路由器正在跟踪导航树中的两个独立分支,并在URL中生成该树的表示。</target>
        </trans-unit>
        <trans-unit id="6f1fff5319d8f72c72ec0476e40e8b1da2d77ed9" translate="yes" xml:space="preserve">
          <source>The router link directive always treats the provided input as a delta to the current url.</source>
          <target state="translated">路由器链接指令总是将提供的输入视为当前url的delta。</target>
        </trans-unit>
        <trans-unit id="170614389397ec9d97f973262e58d5663453a227" translate="yes" xml:space="preserve">
          <source>The router maps URL-like paths to views instead of pages. When a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser's behavior, and shows or hides view hierarchies.</source>
          <target state="translated">路由器将类似URL的路径映射到视图而不是页面。当用户执行一个动作,如点击一个链接,会在浏览器中加载一个新的页面,路由器会拦截浏览器的行为,并显示或隐藏视图的层次结构。</target>
        </trans-unit>
        <trans-unit id="45c7188ec7a83f5f718d2d88747d152f1b97733f" translate="yes" xml:space="preserve">
          <source>The router matches such &lt;em&gt;absolute&lt;/em&gt; paths to routes starting from the top of the route configuration.</source>
          <target state="translated">路由器将此类&lt;em&gt;绝对&lt;/em&gt;路径与从路由配置的顶部开始的路由进行匹配。</target>
        </trans-unit>
        <trans-unit id="05d009d175fdb7f12138aac1b07043d6aa4d44ba" translate="yes" xml:space="preserve">
          <source>The router merges the parameters, data, and resolve of the componentless parent into the parameters, data, and resolve of the children.</source>
          <target state="translated">路由器将无组件父体的参数、数据和解析合并到子体的参数、数据和解析中。</target>
        </trans-unit>
        <trans-unit id="67b6bd438f9d975bb93513d155cfcc4f597fa576" translate="yes" xml:space="preserve">
          <source>The router module navigates among your app pages when the browser URL changes. For more information, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">当浏览器URL更改时，路由器模块将在您的应用程序页面之间导航。有关更多信息，请参见&lt;a href=&quot;router&quot;&gt;路由和导航&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be14d8494a5c5cba61dae579b492b85dc78e0eca" translate="yes" xml:space="preserve">
          <source>The router outlet serves as a placeholder when the routed components will be rendered below it.</source>
          <target state="translated">路由器出口作为一个占位符,当路由组件将被渲染到它的下方。</target>
        </trans-unit>
        <trans-unit id="736e289b0385ec3ddda27eea926de4105245493a" translate="yes" xml:space="preserve">
          <source>The router selects the route with a &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;first match wins&lt;/em&gt;&lt;/a&gt; strategy. Wildcard routes are the least specific routes in the route configuration. Be sure it is the &lt;em&gt;last&lt;/em&gt; route in the configuration.</source>
          <target state="translated">路由器使用&lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;第一个比赛获胜&lt;/em&gt;&lt;/a&gt;策略选择路由。通配符路由是路由配置中最不明确的路由。确保这是配置中的&lt;em&gt;最后&lt;/em&gt;一条路由。</target>
        </trans-unit>
        <trans-unit id="e483aae32dfdd13e3ceb796d853bc5f1c51b3ffb" translate="yes" xml:space="preserve">
          <source>The router sets the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; method's &lt;code&gt;route&lt;/code&gt; parameter to the intended destination URL. The &lt;code&gt;checkLogin()&lt;/code&gt; method redirects to that URL once the user has logged in.</source>
          <target state="translated">路由器将 &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; 方法的 &lt;code&gt;route&lt;/code&gt; 参数设置为预期的目标URL。该 &lt;code&gt;checkLogin()&lt;/code&gt; 方法重定向到URL一旦用户登录。</target>
        </trans-unit>
        <trans-unit id="ed56f7656ac08b3e0ee8155fb0a3581dada87c03" translate="yes" xml:space="preserve">
          <source>The router supports both styles with two &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">路由器通过两个 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 提供程序支持两种样式：</target>
        </trans-unit>
        <trans-unit id="a62638a6e21e4759de70853b67830c5266f6a0ab" translate="yes" xml:space="preserve">
          <source>The router supports directory-like syntax in a &lt;em&gt;link parameters list&lt;/em&gt; to help guide route name lookup:</source>
          <target state="translated">路由器在&lt;em&gt;链接参数列表中&lt;/em&gt;支持类似目录的语法，以帮助指导路由名称查找：</target>
        </trans-unit>
        <trans-unit id="8bf5781b34bee9259b2e2f8cf4416f1697ff1181" translate="yes" xml:space="preserve">
          <source>The router supports multiple guard interfaces:</source>
          <target state="translated">路由器支持多个防护接口。</target>
        </trans-unit>
        <trans-unit id="c0bca771ad18c103f1c47fc1e5a1d2836da9bf81" translate="yes" xml:space="preserve">
          <source>The router supports navigation with optional parameters as well as required route parameters. Define &lt;em&gt;optional&lt;/em&gt; parameters in a separate object &lt;em&gt;after&lt;/em&gt; you define the required route parameters.</source>
          <target state="translated">路由器支持使用可选参数以及必需的路由参数进行导航。在定义所需的路由参数&lt;em&gt;之后，&lt;/em&gt;请在单独的对象中定义&lt;em&gt;可选&lt;/em&gt;参数。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b44e894ea1b945e0628e82828fbe796cf336ea56" translate="yes" xml:space="preserve">
          <source>The router uses the browser's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt; for navigation. Thanks to &lt;code&gt;pushState&lt;/code&gt;, you can make in-app URL paths look the way you want them to look, e.g. &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt;. The in-app URLs can be indistinguishable from server URLs.</source>
          <target state="translated">路由器使用浏览器的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt;进行导航。多亏了 &lt;code&gt;pushState&lt;/code&gt; ，您可以使应用内URL路径看起来像您想要的样子，例如 &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt; 。应用内网址与服务器网址无法区分。</target>
        </trans-unit>
        <trans-unit id="53d9befd3cd261f060f5decb29960135724d8489" translate="yes" xml:space="preserve">
          <source>The router works at the root level so if you put providers in a component, even &lt;code&gt;AppComponent&lt;/code&gt;, lazy loaded modules, which rely on the router, can&amp;rsquo;t see them.</source>
          <target state="translated">路由器在根级别运行，因此，如果将提供程序放在组件中，则即使依赖于路由器的延迟加载的模块 &lt;code&gt;AppComponent&lt;/code&gt; 也无法看到它们。</target>
        </trans-unit>
        <trans-unit id="0ba9dade3e3b9ffdda20ce10c97f537f8ff12442" translate="yes" xml:space="preserve">
          <source>The router's &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface is optional. The &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; doesn't inherit from a base class. The router looks for that method and calls it if found.</source>
          <target state="translated">路由器的 &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 接口是可选的。该 &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; 不从基类继承。路由器会寻找该方法并在找到后调用它。</target>
        </trans-unit>
        <trans-unit id="40bd61970480593d5a81861e4cee600f3fafc0bf" translate="yes" xml:space="preserve">
          <source>The routes are no longer in one file. They are distributed across two modules, &lt;code&gt;AppRoutingModule&lt;/code&gt; and &lt;code&gt;HeroesRoutingModule&lt;/code&gt;.</source>
          <target state="translated">路由不再在一个文件中。它们分布在两个模块 &lt;code&gt;AppRoutingModule&lt;/code&gt; 和 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="c8bfeafd59576a5466c5d56c7ed9d1a4b51bcaed" translate="yes" xml:space="preserve">
          <source>The running application displays three heroes:</source>
          <target state="translated">正在运行的应用程序显示三个英雄。</target>
        </trans-unit>
        <trans-unit id="d2037d2f70edf3081cd81efee594d118f23f5b88" translate="yes" xml:space="preserve">
          <source>The safe navigation operator ( &lt;code&gt;?&lt;/code&gt; ) and null property paths</source>
          <target state="translated">安全导航运算符（ &lt;code&gt;?&lt;/code&gt; ）和空属性路径</target>
        </trans-unit>
        <trans-unit id="e085db54661fcc65281a95cf0450e05e179ee59e" translate="yes" xml:space="preserve">
          <source>The safe navigation operator (&lt;code&gt;?&lt;/code&gt;) means that the &lt;code&gt;employer&lt;/code&gt; field is optional and if &lt;code&gt;undefined&lt;/code&gt;, the rest of the expression should be ignored.</source>
          <target state="translated">安全导航运算符（ &lt;code&gt;?&lt;/code&gt; ）表示&amp;ldquo; &lt;code&gt;employer&lt;/code&gt; 字段是可选的，如果 &lt;code&gt;undefined&lt;/code&gt; ，则应忽略表达式的其余部分。</target>
        </trans-unit>
        <trans-unit id="59c72d8464ed8d8df3745406023437ff7ed29782" translate="yes" xml:space="preserve">
          <source>The safest way to get the injected service, the way that &lt;strong&gt;&lt;em&gt;always works&lt;/em&gt;&lt;/strong&gt;, is to &lt;strong&gt;get it from the injector of the &lt;em&gt;component-under-test&lt;/em&gt;&lt;/strong&gt;. The component injector is a property of the fixture's &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">获得注入服务的最安全方法（&lt;strong&gt;&lt;em&gt;始终有效&lt;/em&gt;&lt;/strong&gt;）是&lt;strong&gt;从&lt;em&gt;被测组件&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;的注入器获得服务&lt;/strong&gt;。组件注入器是灯具的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 的属性。</target>
        </trans-unit>
        <trans-unit id="939660064b29633f3b868d36327576ca89ac09ec" translate="yes" xml:space="preserve">
          <source>The same built-in validators that are available as attributes in template-driven forms, such as &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, are all available to use as functions from the &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; class. For a full list of built-in validators, see the &lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; API reference.</source>
          <target state="translated">可以用作模板驱动形式的属性的相同内置验证器，例如 &lt;code&gt;required&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; ，都可以用作 &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; 类的函数。有关内置验证器的完整列表，请参见&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; API参考。</target>
        </trans-unit>
        <trans-unit id="067302b47e77195f2f26c14e3937a22efcc89d72" translate="yes" xml:space="preserve">
          <source>The same configuration options can also be provided through the CLI with your existing &lt;code&gt;production&lt;/code&gt; configuration.</source>
          <target state="translated">还可以通过CLI与您现有的 &lt;code&gt;production&lt;/code&gt; 配置一起提供相同的配置选项。</target>
        </trans-unit>
        <trans-unit id="16cde22da225d9a04d00eca0b15817fbe6af3692" translate="yes" xml:space="preserve">
          <source>The sample app and its translation file are now as follows:</source>
          <target state="translated">现在的示例应用程序及其翻译文件如下。</target>
        </trans-unit>
        <trans-unit id="2018f14311878602d2320f5e56ba6ac75859ef04" translate="yes" xml:space="preserve">
          <source>The sample app does not require a data server. It relies on the &lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;, which replaces the &lt;em&gt;HttpClient&lt;/em&gt; module's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;. The replacement service simulates the behavior of a REST-like backend.</source>
          <target state="translated">该示例应用程序不需要数据服务器。它依赖于&lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;，它取代了&lt;em&gt;HttpClient&lt;/em&gt;模块的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 。替换服务模拟了类似REST的后端的行为。</target>
        </trans-unit>
        <trans-unit id="d9639d7d5642ac0cfa45c5189886107eb05e6058" translate="yes" xml:space="preserve">
          <source>The sample app for this guide doesn't have a server that accepts uploaded files. The &lt;code&gt;UploadInterceptor&lt;/code&gt; in &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; intercepts and short-circuits upload requests by returning an observable of simulated events.</source>
          <target state="translated">本指南的示例应用程序没有服务器可以接受上传的文件。该 &lt;code&gt;UploadInterceptor&lt;/code&gt; 在 &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; 截获并通过返回一个可观察的模拟事件的短路上传请求。</target>
        </trans-unit>
        <trans-unit id="18a8f2d6b2521db5c000b09605bd6653cdd054b3" translate="yes" xml:space="preserve">
          <source>The sample app for this guide includes a simplified version of the &quot;Tour of Heroes&quot; example that fetches heroes and enables users to add, delete, and update them.</source>
          <target state="translated">本指南的示例应用程序包括一个简化版的 &quot;英雄之旅 &quot;示例,它可以获取英雄,并使用户能够添加、删除和更新它们。</target>
        </trans-unit>
        <trans-unit id="006cff79a45782fa6207fcb043d6c24706576a90" translate="yes" xml:space="preserve">
          <source>The sample app has an &lt;code&gt;AuthService&lt;/code&gt; that produces an authorization token. Here is its &lt;code&gt;AuthInterceptor&lt;/code&gt; that injects that service to get the token and adds an authorization header with that token to every outgoing request:</source>
          <target state="translated">该示例应用程序具有 &lt;code&gt;AuthService&lt;/code&gt; ，该服务可生成授权令牌。这是其 &lt;code&gt;AuthInterceptor&lt;/code&gt; ，它注入该服务以获取令牌，并向每个外发请求添加带有该令牌的授权标头：</target>
        </trans-unit>
        <trans-unit id="4b25f5e76871ab40b71bff3adfc28a5e339486c0" translate="yes" xml:space="preserve">
          <source>The sample app imports &lt;code&gt;GreetingModule&lt;/code&gt; and uses its &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method one time, in &lt;code&gt;AppModule&lt;/code&gt;. Registering it once like this prevents multiple instances.</source>
          <target state="translated">示例应用程序进口 &lt;code&gt;GreetingModule&lt;/code&gt; 并使用其 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 方法一时刻在 &lt;code&gt;AppModule&lt;/code&gt; 。这样注册一次可以防止多个实例。</target>
        </trans-unit>
        <trans-unit id="bbdc02b77eadf3cafece29a3b6adb0bfb784c563" translate="yes" xml:space="preserve">
          <source>The sample application</source>
          <target state="translated">应用示例</target>
        </trans-unit>
        <trans-unit id="3bad0c6f1f3a97ac6c5ed1daf3fec0440d87ec3a" translate="yes" xml:space="preserve">
          <source>The sample application doesn't talk to a server. Fortunately, you have another way to demonstrate an asynchronous router hook.</source>
          <target state="translated">该示例应用程序没有与服务器对话。幸运的是,你有另一种方法来演示异步路由器钩子。</target>
        </trans-unit>
        <trans-unit id="2103219c7d79a26e0ff1f6660f7abac30fdaafba" translate="yes" xml:space="preserve">
          <source>The sample application in action</source>
          <target state="translated">应用实例</target>
        </trans-unit>
        <trans-unit id="1127033a52632203fbf3f5f1079ad39c14f5ea44" translate="yes" xml:space="preserve">
          <source>The sample application's &lt;code&gt;HighlightDirective&lt;/code&gt; sets the background color of an element based on either a data bound color or a default color (lightgray). It also sets a custom property of the element (&lt;code&gt;customProperty&lt;/code&gt;) to &lt;code&gt;true&lt;/code&gt; for no reason other than to show that it can.</source>
          <target state="translated">示例应用程序的 &lt;code&gt;HighlightDirective&lt;/code&gt; 基于数据绑定颜色或默认颜色（浅灰色）设置元素的背景色。它还将元素的自定义属性（ &lt;code&gt;customProperty&lt;/code&gt; ）设置为 &lt;code&gt;true&lt;/code&gt; ，除了表明可以这样做之外，没有其他原因。</target>
        </trans-unit>
        <trans-unit id="dc8fd67bc712a242a84db80063d64dc1c8dbd84a" translate="yes" xml:space="preserve">
          <source>The sample code applies the directive's &lt;code&gt;myHighlight&lt;/code&gt; attribute to two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, first without a value (yielding the default color) and then with an assigned color value.</source>
          <target state="translated">该示例代码将指令的 &lt;code&gt;myHighlight&lt;/code&gt; 属性应用于两个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 标记，首先不带值（产生默认颜色），然后带一个指定的颜色值。</target>
        </trans-unit>
        <trans-unit id="6231d5bf243f4874525430c1c1584ebea7435e57" translate="yes" xml:space="preserve">
          <source>The sample in this guide uses the default XLIFF 1.2 format.</source>
          <target state="translated">本指南中的示例使用默认的XLIFF 1.2格式。</target>
        </trans-unit>
        <trans-unit id="180848306acfa9ca7d56cebe3f38672d87a67bb8" translate="yes" xml:space="preserve">
          <source>The sample includes an &lt;em&gt;npm package search&lt;/em&gt; feature.</source>
          <target state="translated">该示例包括&lt;em&gt;npm软件包搜索&lt;/em&gt;功能。</target>
        </trans-unit>
        <trans-unit id="845d81bff91c35f9ca3a0e8902c70651cdbae3e9" translate="yes" xml:space="preserve">
          <source>The sample routing application does not include routing by default. When you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to create a project that will use routing, set the &lt;code&gt;--routing&lt;/code&gt; option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command) or a new app (using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate app&lt;/code&gt;&lt;/a&gt; command), specify the &lt;code&gt;--routing&lt;/code&gt; option. This tells the CLI to include the &lt;code&gt;@angular/router&lt;/code&gt; npm package and create a file named &lt;code&gt;app-routing.module.ts&lt;/code&gt;. You can then use routing in any NgModule that you add to the project or app.</source>
          <target state="translated">默认情况下，示例路由应用程序不包括路由。当您使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建将使用路由的项目时，请为项目或应用程序以及每个NgModule 设置 &lt;code&gt;--routing&lt;/code&gt; 选项。当您创建或初始化新项目（使用CLI &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;命令）或新应用程序（使用&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate app&lt;/code&gt; &lt;/a&gt;命令）时，请指定 &lt;code&gt;--routing&lt;/code&gt; 选项。这告诉CLI包括 &lt;code&gt;@angular/router&lt;/code&gt; npm软件包并创建一个名为 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 的文件。然后，您可以在添加到项目或应用程序的任何NgModule中使用路由。</target>
        </trans-unit>
        <trans-unit id="48715b36d405c3c723bb6e1a83d110dfa8e48522" translate="yes" xml:space="preserve">
          <source>The sample source code for this page, located in &lt;code&gt;context/examples/docs-style-guide&lt;/code&gt;, contains examples of every code snippet markup described in this section.</source>
          <target state="translated">此页面的示例源代码位于 &lt;code&gt;context/examples/docs-style-guide&lt;/code&gt; 中，其中包含本节中描述的每个代码段标记的示例。</target>
        </trans-unit>
        <trans-unit id="f97b4d7dd36c622166d42d22b9b96141f0cd7661" translate="yes" xml:space="preserve">
          <source>The sample web server for this guide is based on the popular &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework.</source>
          <target state="translated">本指南的示例Web服务器基于流行的&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;框架。</target>
        </trans-unit>
        <trans-unit id="f1d88c2387cd1e3449b58fad506e327b13a8cf48" translate="yes" xml:space="preserve">
          <source>The sample's &lt;code&gt;CraigComponent&lt;/code&gt; explores this question. &lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;Looking back&lt;/a&gt;, you see that the &lt;code&gt;Alex&lt;/code&gt; component &lt;em&gt;extends&lt;/em&gt; (&lt;em&gt;inherits&lt;/em&gt;) from a class named &lt;code&gt;Base&lt;/code&gt;.</source>
          <target state="translated">样本的 &lt;code&gt;CraigComponent&lt;/code&gt; 探索了这个问题。&lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;往回&lt;/a&gt;看，您会发现 &lt;code&gt;Alex&lt;/code&gt; 组件从名为 &lt;code&gt;Base&lt;/code&gt; 的类&lt;em&gt;扩展&lt;/em&gt;（&lt;em&gt;继承&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="b7f1caebac3561b1bd11adb25a659f920576c1e5" translate="yes" xml:space="preserve">
          <source>The schema defines the types and default values of variables used in the schematic. For example, the hypothetical &quot;Hello World&quot; schematic might have the following schema.</source>
          <target state="translated">模式定义了原理图中使用的变量的类型和默认值。例如,假设的 &quot;Hello World &quot;原理图可能有以下模式。</target>
        </trans-unit>
        <trans-unit id="28cbf3d458ff001f8ea8f2ca87d3187c8823c817" translate="yes" xml:space="preserve">
          <source>The schema for a &lt;code&gt;stackblitz.json&lt;/code&gt; hasn't been documented yet but looking at the &lt;code&gt;stackblitz.json&lt;/code&gt; files in the example folders should tell you most of what you need to know.</source>
          <target state="translated">尚未记录 &lt;code&gt;stackblitz.json&lt;/code&gt; 的架构，但是查看示例文件夹中的 &lt;code&gt;stackblitz.json&lt;/code&gt; 文件应该可以告诉您大部分您需要知道的内容。</target>
        </trans-unit>
        <trans-unit id="4ddb5588b2b1fc36ef16d673582bc1ea813181ee" translate="yes" xml:space="preserve">
          <source>The schematic collection can be a powerful tool for creating, modifying, and maintaining any software project, but is particularly useful for customizing Angular projects to suit the particular needs of your own organization. You might use schematics, for example, to generate commonly-used UI patterns or specific components, using predefined templates or layouts. You can use schematics to enforce architectural rules and conventions, making your projects consistent and inter-operative.</source>
          <target state="translated">示意图集合可以成为创建、修改和维护任何软件项目的强大工具,但对于定制Angular项目以适应自己组织的特殊需求来说,特别有用。例如,您可以使用模式图来生成常用的UI模式或特定组件,使用预定义的模板或布局。您可以使用模式图来强制执行架构规则和约定,使您的项目具有一致性和互操作性。</target>
        </trans-unit>
        <trans-unit id="93cfe4e4adbbfded84c6c8f071cc59a7887190fb" translate="yes" xml:space="preserve">
          <source>The schematic or collection:schematic to generate.</source>
          <target state="translated">要生成的原理图或集合:原理图。</target>
        </trans-unit>
        <trans-unit id="644126d257f84f676df9b8c93031e7697e56a4cb" translate="yes" xml:space="preserve">
          <source>The scope for the new routing module.</source>
          <target state="translated">新的路由模块的范围。</target>
        </trans-unit>
        <trans-unit id="5d45510eb393444a2c062d97a89bb09d19beb1e7" translate="yes" xml:space="preserve">
          <source>The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</source>
          <target state="translated">引用变量的范围是整个模板。所以,不要在同一个模板中定义同一个变量名超过一次,因为运行时的值将无法预测。</target>
        </trans-unit>
        <trans-unit id="5760dd13dc5237be2a7e34da16871a6fc9a53718" translate="yes" xml:space="preserve">
          <source>The scope of the service instance is the parent component and its children. Components outside this component subtree have no access to the service or their communications.</source>
          <target state="translated">服务实例的范围是父组件和它的子组件。这个组件子树之外的组件不能访问服务或它们的通信。</target>
        </trans-unit>
        <trans-unit id="ed54e7c3473aae483d10d6a344247055bd214d68" translate="yes" xml:space="preserve">
          <source>The scoping rules outlined earlier apply to each of these loading patterns.</source>
          <target state="translated">前面概述的范围界定规则适用于这些装载模式中的每一种。</target>
        </trans-unit>
        <trans-unit id="6ca21198000899209ea533a19e8cd0f64d9427fc" translate="yes" xml:space="preserve">
          <source>The search box on the Dashboard page is ignored.</source>
          <target state="translated">忽略 &quot;仪表板 &quot;页面上的搜索框。</target>
        </trans-unit>
        <trans-unit id="42ac7068ce0b0eff086a7cd61efd10c482ea26ac" translate="yes" xml:space="preserve">
          <source>The search object</source>
          <target state="translated">搜索对象</target>
        </trans-unit>
        <trans-unit id="986d1babf2cbea214b8a121acd469431369cde38" translate="yes" xml:space="preserve">
          <source>The second &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; aliases the child component property name &lt;code&gt;masterName&lt;/code&gt; as &lt;code&gt;'master'&lt;/code&gt;.</source>
          <target state="translated">第二个 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 将子组件属性名称 &lt;code&gt;masterName&lt;/code&gt; 别名为 &lt;code&gt;'master'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="890b72d0bae3cb1fcd8858dc63a35a3adb6d2b0e" translate="yes" xml:space="preserve">
          <source>The second and third test reveal an important limitation. The Angular testing environment does &lt;em&gt;not&lt;/em&gt; know that the test changed the component's &lt;code&gt;title&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; service responds to &lt;em&gt;asynchronous activities&lt;/em&gt; such as promise resolution, timers, and DOM events. But a direct, synchronous update of the component property is invisible. The test must call &lt;code&gt;fixture.detectChanges()&lt;/code&gt; manually to trigger another cycle of change detection.</source>
          <target state="translated">第二和第三次测试揭示了一个重要的局限性。该角度测试环境不&lt;em&gt;不&lt;/em&gt;知道测试改变了组件的 &lt;code&gt;title&lt;/code&gt; 。该 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; 服务响应&lt;em&gt;异步活动，&lt;/em&gt;如承诺的分辨率，计时器和DOM事件。但是，组件属性的直接，同步更新是不可见的。测试必须手动调用 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; 来触发另一个变更检测周期。</target>
        </trans-unit>
        <trans-unit id="834aabaa20612a9062cae3e29b9e961cdcdb7ef5" translate="yes" xml:space="preserve">
          <source>The second argument in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method takes an object for additional configuration options. The &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#preloadingStrategy&quot;&gt;preloadingStrategy&lt;/a&gt;&lt;/code&gt; is one of those options. Add the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; call:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 方法中的第二个参数采用一个对象作为其他配置选项。该 &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#preloadingStrategy&quot;&gt;preloadingStrategy&lt;/a&gt;&lt;/code&gt; 是其中一个选项。将 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 令牌添加到 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 调用中：</target>
        </trans-unit>
        <trans-unit id="67420eba778c81bceda710b2f41019a12b62d5ce" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;delay&lt;/code&gt;, has the same syntax as &lt;code&gt;duration&lt;/code&gt;. For example:</source>
          <target state="translated">第二个参数 &lt;code&gt;delay&lt;/code&gt; 的语法与 &lt;code&gt;duration&lt;/code&gt; 的语法相同。例如：</target>
        </trans-unit>
        <trans-unit id="e4728132b472fdaf23f6157a81e7c259035ede28" translate="yes" xml:space="preserve">
          <source>The second bundle contains code in the old ES5 syntax, along with all necessary polyfills. This results in a larger bundle size, but supports older browsers.</source>
          <target state="translated">第二个捆绑包包含了旧的 ES5 语法的代码,以及所有必要的 polyfills。这导致捆绑包的尺寸较大,但支持旧版浏览器。</target>
        </trans-unit>
        <trans-unit id="acd35964f6f0d51879b94ba5f5c61077dd99875c" translate="yes" xml:space="preserve">
          <source>The second element is a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with an &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt;. You know it's an event binding because the part to the left of the equal sign is in parentheses, &lt;code&gt;(click)&lt;/code&gt;.</source>
          <target state="translated">第二个元素是带有&lt;a href=&quot;template-syntax#event-binding&quot;&gt;事件绑定&lt;/a&gt;的 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 。您知道这是事件绑定，因为等号左边的部分在括号中 &lt;code&gt;(click)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc449d513e1cc929356564804a02d3b22062ddbc" translate="yes" xml:space="preserve">
          <source>The second example demonstrates passing in the &lt;code&gt;$event&lt;/code&gt; object, which provides details about the event to the component.</source>
          <target state="translated">第二个示例演示传递 &lt;code&gt;$event&lt;/code&gt; 对象，该对象将有关事件的详细信息提供给组件。</target>
        </trans-unit>
        <trans-unit id="ad0d312637a21eae4b82436cf870b90d8c9345ee" translate="yes" xml:space="preserve">
          <source>The second example demonstrates passing in the &lt;code&gt;$event&lt;/code&gt; object, which provides details about the event to the controller.</source>
          <target state="translated">第二个示例演示传递 &lt;code&gt;$event&lt;/code&gt; 对象，该对象将有关事件的详细信息提供给控制器。</target>
        </trans-unit>
        <trans-unit id="3b637601413f91f94772399c112fac361b60d0c5" translate="yes" xml:space="preserve">
          <source>The second item identifies the child route details about a particular crisis (&lt;code&gt;/:id&lt;/code&gt;).</source>
          <target state="translated">第二项标识有关特定危机（ &lt;code&gt;/:id&lt;/code&gt; ）的子路线详细信息。</target>
        </trans-unit>
        <trans-unit id="31c7c11b46015d9e7e37751c373ace9c44818123" translate="yes" xml:space="preserve">
          <source>The second kind of entry component occurs in a route definition like this:</source>
          <target state="translated">第二种入口组件出现在这样的路径定义中。</target>
        </trans-unit>
        <trans-unit id="80d2b152141df0551d01e052076dd9a2bf659174" translate="yes" xml:space="preserve">
          <source>The second parameter identifies this as a &lt;code&gt;plural&lt;/code&gt; translation type.</source>
          <target state="translated">第二个参数将其标识为 &lt;code&gt;plural&lt;/code&gt; 翻译类型。</target>
        </trans-unit>
        <trans-unit id="2ad7a68528bfceb60940f6593bc4a5c0d6da5983" translate="yes" xml:space="preserve">
          <source>The second parameter to the Jasmine matcher (e.g., &lt;code&gt;'expected name'&lt;/code&gt;) is an optional failure label. If the expectation fails, Jasmine appends this label to the expectation failure message. In a spec with multiple expectations, it can help clarify what went wrong and which expectation failed.</source>
          <target state="translated">茉莉花匹配器的第二个参数（例如 &lt;code&gt;'expected name'&lt;/code&gt; ）是可选的失败标签。如果期望失败，Jasmine将此标签附加到期望失败消息。在具有多个期望的规范中，它可以帮助您弄清出了什么问题以及哪个期望失败了。</target>
        </trans-unit>
        <trans-unit id="75e29b682d0d5764eb407c6ced980c4bbb5fe3df" translate="yes" xml:space="preserve">
          <source>The second parameter, &lt;code&gt;extraProviders&lt;/code&gt;, is optional. It lets you specify dependency providers that apply only when running on this server. You can do this when your app needs information that can only be determined by the currently running server instance. One example could be the running server's &lt;em&gt;origin&lt;/em&gt;, which could be used to &lt;a href=&quot;universal#http-urls&quot;&gt;calculate absolute HTTP URLs&lt;/a&gt; if not using the &lt;code&gt;Request&lt;/code&gt; token as shown above.</source>
          <target state="translated">第二个参数 &lt;code&gt;extraProviders&lt;/code&gt; 是可选的。它使您可以指定仅在此服务器上运行时适用的依赖项提供程序。当您的应用需要仅由当前运行的服务器实例确定的信息时，可以执行此操作。一个示例可能是正在运行的服务器的&lt;em&gt;origin&lt;/em&gt;，如果不使用如上所示的 &lt;code&gt;Request&lt;/code&gt; 令牌，则可以用于&lt;a href=&quot;universal#http-urls&quot;&gt;计算绝对HTTP URL&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="022dba050c6e8639ff2efe745f9496f6a07db6c0" translate="yes" xml:space="preserve">
          <source>The second property is a provider definition object, which tells the injector how to create the dependency value. The provider-definition key can be &lt;code&gt;useClass&lt;/code&gt;, as in the example. It can also be &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;. Each of these keys provides a different type of dependency, as discussed below.</source>
          <target state="translated">第二个属性是提供程序定义对象，它告诉注入程序如何创建依赖项值。提供程序定义键可以是 &lt;code&gt;useClass&lt;/code&gt; ，如示例中所示。也可以是 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 。这些键中的每一个都提供不同类型的依赖关系，如下所述。</target>
        </trans-unit>
        <trans-unit id="fe60b9d875a80248b494fbc59dbdf2537b6de57a" translate="yes" xml:space="preserve">
          <source>The second provider substitutes &lt;code&gt;DateLoggerService&lt;/code&gt; for &lt;code&gt;LoggerService&lt;/code&gt;. &lt;code&gt;LoggerService&lt;/code&gt; is already registered at the &lt;code&gt;AppComponent&lt;/code&gt; level. When this child component requests &lt;code&gt;LoggerService&lt;/code&gt;, it receives a &lt;code&gt;DateLoggerService&lt;/code&gt; instance instead.</source>
          <target state="translated">第二个提供程序用 &lt;code&gt;DateLoggerService&lt;/code&gt; 代替 &lt;code&gt;LoggerService&lt;/code&gt; 。 &lt;code&gt;LoggerService&lt;/code&gt; 已在 &lt;code&gt;AppComponent&lt;/code&gt; 级别注册。当此子组件请求 &lt;code&gt;LoggerService&lt;/code&gt; 时，它将接收一个 &lt;code&gt;DateLoggerService&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="0e6434f6538db6265436fe3ae1f9a0d66262b187" translate="yes" xml:space="preserve">
          <source>The second specifies a literal string resource to use for the &lt;code&gt;TITLE&lt;/code&gt; token. The &lt;code&gt;TITLE&lt;/code&gt; provider token is &lt;em&gt;not&lt;/em&gt; a class, but is instead a special kind of provider lookup key called an &lt;a href=&quot;dependency-injection-in-action#injection-token&quot;&gt;injection token&lt;/a&gt;, represented by an &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">第二个参数指定用于 &lt;code&gt;TITLE&lt;/code&gt; 令牌的文字字符串资源。该 &lt;code&gt;TITLE&lt;/code&gt; 提供商令牌是&lt;em&gt;不是&lt;/em&gt;一类，但反而是一种特殊的称为提供商查找键的&lt;a href=&quot;dependency-injection-in-action#injection-token&quot;&gt;注入令牌&lt;/a&gt;，由代表 &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="cc2fae3d6572ac8d718bd250497aa8031b7f47a3" translate="yes" xml:space="preserve">
          <source>The second translation unit, immediately below the first one, contains the &lt;code&gt;select&lt;/code&gt; message. Translate that as well.</source>
          <target state="translated">在第一个翻译单元正下方的第二个翻译单元包含 &lt;code&gt;select&lt;/code&gt; 消息。还要翻译。</target>
        </trans-unit>
        <trans-unit id="322bf6fe354feb0ed8eefdb996e96edbf6d504a6" translate="yes" xml:space="preserve">
          <source>The second unit contains the complete nested expression:</source>
          <target state="translated">第二单元包含完整的嵌套表达式。</target>
        </trans-unit>
        <trans-unit id="fd3336ba8ecc74fbec8d08991026da2b43cbb769" translate="yes" xml:space="preserve">
          <source>The second, synchronous &lt;code&gt;beforeEach()&lt;/code&gt; contains the remaining setup steps, which include creating the component and querying for elements to inspect.</source>
          <target state="translated">第二个同步的 &lt;code&gt;beforeEach()&lt;/code&gt; 包含其余的设置步骤，其中包括创建组件和查询要检查的元素。</target>
        </trans-unit>
        <trans-unit id="ccbbf197c57bcf4dcf2acbe9b02811d4fb7292ef" translate="yes" xml:space="preserve">
          <source>The secondary heading should be followed by a blank line and then the content for that heading.</source>
          <target state="translated">二级标题后应空一行,然后是该标题的内容。</target>
        </trans-unit>
        <trans-unit id="9bbf6669b097783c6f5e9731d8bd819d03e19f1c" translate="yes" xml:space="preserve">
          <source>The secondary route consists of an outlet name (&lt;code&gt;popup&lt;/code&gt;), a &lt;code&gt;colon&lt;/code&gt; separator, and the secondary route path (&lt;code&gt;compose&lt;/code&gt;).</source>
          <target state="translated">辅助路由由出口名称（ &lt;code&gt;popup&lt;/code&gt; ）， &lt;code&gt;colon&lt;/code&gt; 分隔符和辅助路由路径（ &lt;code&gt;compose&lt;/code&gt; ）组成。</target>
        </trans-unit>
        <trans-unit id="5974edf352069a00dd09a93b85b1e1cf03f0a232" translate="yes" xml:space="preserve">
          <source>The selector tells Angular to plug this root component into the &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; element on the host web page when the application launches.</source>
          <target state="translated">选择器告诉Angular 在应用程序启动时将此根组件插入主机网页上的 &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; 元素中。</target>
        </trans-unit>
        <trans-unit id="e950633873ec03732fd9736996584fa6ed62259d" translate="yes" xml:space="preserve">
          <source>The separation of concerns here is the same as with &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, which are used for other CLI commands that touch your code (such as &lt;code&gt;ng generate&lt;/code&gt;).</source>
          <target state="translated">这里关注点的分离与&lt;a href=&quot;glossary#schematic&quot;&gt;原理图&lt;/a&gt;相同，后者用于其他触摸您的代码的CLI命令（例如 &lt;code&gt;ng generate&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="81aeb61d2e22f8b8d9459e05b501bced326adf60" translate="yes" xml:space="preserve">
          <source>The sequence of log messages follows the prescribed hook calling order: &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; (3x), &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; (3x), &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; (3x), and &lt;code&gt;&lt;a href=&quot;../api/core/ondestroy&quot;&gt;OnDestroy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">日志消息的顺序遵循指定的挂钩调用顺序： &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; （3x）， &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; （3x）， &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; （3x）和 &lt;code&gt;&lt;a href=&quot;../api/core/ondestroy&quot;&gt;OnDestroy&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18ae83b605e538232ca7b3bc82c832eb67e352a0" translate="yes" xml:space="preserve">
          <source>The sequence of router events is as follows:</source>
          <target state="translated">路由器事件的顺序如下。</target>
        </trans-unit>
        <trans-unit id="1737d4ed6f800daea7476c0c70a1734eb7ce1928" translate="yes" xml:space="preserve">
          <source>The server (&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node Express&lt;/a&gt; in this guide's example) passes client requests for application pages to the NgUniversal &lt;code&gt;ngExpressEngine&lt;/code&gt;. Under the hood, this calls Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function, while providing caching and other helpful utilities.</source>
          <target state="translated">服务器（在本指南的示例中为&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node Express&lt;/a&gt;）将客户端对应用程序页面的请求传递给NgUniversal &lt;code&gt;ngExpressEngine&lt;/code&gt; 。在后台，它调用Universal的 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 函数，同时提供缓存和其他有用的实用程序。</target>
        </trans-unit>
        <trans-unit id="b91c33e79c6d8ce1f35c11a0064ccf17c1206386" translate="yes" xml:space="preserve">
          <source>The server platform that supports the runtime compiler.</source>
          <target state="translated">支持运行时编译器的服务器平台。</target>
        </trans-unit>
        <trans-unit id="fdc7974bddc4251d37c899dec154f7616873a7f7" translate="yes" xml:space="preserve">
          <source>The server should respond with a single hero rather than an array of heroes.</source>
          <target state="translated">服务器应该用单个英雄而不是一系列英雄来回应。</target>
        </trans-unit>
        <trans-unit id="eca5a8837e9ee160489059a172e9ebc977dd83cd" translate="yes" xml:space="preserve">
          <source>The server will automatically reload your browser when new files are output.</source>
          <target state="translated">当输出新文件时,服务器会自动重新加载你的浏览器。</target>
        </trans-unit>
        <trans-unit id="0d9613e884c4d7057875fd99d39be99f233ae206" translate="yes" xml:space="preserve">
          <source>The server's data API determines the shape of the JSON data. The &lt;em&gt;Tour of Heroes&lt;/em&gt; data API returns the hero data as an array.</source>
          <target state="translated">服务器的数据API确定JSON数据的形状。的&lt;em&gt;英雄的游&lt;/em&gt;数据API返回英雄数据为一个数组。</target>
        </trans-unit>
        <trans-unit id="d608ede8654d1838eb5137faa0d8ed16a87869ad" translate="yes" xml:space="preserve">
          <source>The server-rendered app still launches quickly but the full client app may take seconds to load.</source>
          <target state="translated">服务器渲染的应用仍然会快速启动,但完整的客户端应用可能需要几秒钟才能加载。</target>
        </trans-unit>
        <trans-unit id="e791eab073e4d3b4cd8bc1aca0e02dd44233a6e7" translate="yes" xml:space="preserve">
          <source>The service can be instantiated by configuring a factory function, as in the following example.</source>
          <target state="translated">可以通过配置工厂函数来实例化该服务,如下例所示。</target>
        </trans-unit>
        <trans-unit id="b01cb6b08662ccfbcebed41545cd05a24d2577c4" translate="yes" xml:space="preserve">
          <source>The service exposes its cache of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; and two methods: one to &lt;code&gt;add()&lt;/code&gt; a message to the cache and another to &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; the cache.</source>
          <target state="translated">该服务公开其 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; 缓存和两种方法：一种 &lt;code&gt;add()&lt;/code&gt; 消息添加（）添加到缓存，另一种方法 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; 缓存。</target>
        </trans-unit>
        <trans-unit id="8fbb599e20de587b80201a2202b3533ea4c17924" translate="yes" xml:space="preserve">
          <source>The service itself is a class that the CLI generated and that's decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;. By default, this decorator has a &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property, which creates a provider for the service. In this case, &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; specifies that Angular should provide the service in the root injector.</source>
          <target state="translated">服务本身是CLI生成的类，并用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰。默认情况下，这个装饰有 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 属性，它会为服务提供商。在这种情况下， &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; 指定Angular应该在根注入器中提供服务。</target>
        </trans-unit>
        <trans-unit id="a8d86534f286c4014047b48e39157c9ac642d3f4" translate="yes" xml:space="preserve">
          <source>The service provided by the root &lt;code&gt;AppModule&lt;/code&gt; takes precedence over services provided by imported NgModules. The &lt;code&gt;AppModule&lt;/code&gt; always wins.</source>
          <target state="translated">根 &lt;code&gt;AppModule&lt;/code&gt; 提供的服务优先于导入的NgModules提供的服务。该 &lt;code&gt;AppModule&lt;/code&gt; 总是获胜。</target>
        </trans-unit>
        <trans-unit id="e4c344300d7fd4d9f966ba1a8642b3e11076118a" translate="yes" xml:space="preserve">
          <source>The service uses the &lt;code&gt;import()&lt;/code&gt; method to load your bundled AngularJS application lazily. This decreases the initial bundle size of your application as you're not loading code your user doesn't need yet. You also need to provide a way to &lt;em&gt;bootstrap&lt;/em&gt; the application manually after it has been loaded. AngularJS provides a way to manually bootstrap an application using the &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap()&lt;/a&gt; method with a provided HTML element. Your AngularJS app should also expose a &lt;code&gt;bootstrap&lt;/code&gt; method that bootstraps the AngularJS app.</source>
          <target state="translated">该服务使用 &lt;code&gt;import()&lt;/code&gt; 方法来延迟加载捆绑的AngularJS应用程序。这将减小应用程序的初始捆绑包大小，因为您不需要加载用户不需要的代码。您还需要提供一种在应用程序加载后手动对其进行&lt;em&gt;引导&lt;/em&gt;的方法。AngularJS提供了一种使用&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap（）&lt;/a&gt;方法和提供的HTML元素手动引导应用程序的方法。您的AngularJS应用程序还应该公开 &lt;code&gt;bootstrap&lt;/code&gt; ，该方法会引导AngularJS应用程序。</target>
        </trans-unit>
        <trans-unit id="dc4b5f46b09780ea494a593541c8cc9fef7174dd" translate="yes" xml:space="preserve">
          <source>The service worker conserves bandwidth when possible. Resources are only downloaded if they've changed.</source>
          <target state="translated">服务人员尽可能节约带宽。只有在资源发生变化时才会下载。</target>
        </trans-unit>
        <trans-unit id="73a76971f818809f629500d6b5210621468c33c3" translate="yes" xml:space="preserve">
          <source>The service worker installed the updated version of your app &lt;em&gt;in the background&lt;/em&gt;, and the next time the page is loaded or reloaded, the service worker switches to the latest version.</source>
          <target state="translated">服务人员&lt;em&gt;在后台&lt;/em&gt;安装了应用程序的更新版本，下次加载或重新加载页面时，服务人员将切换到最新版本。</target>
        </trans-unit>
        <trans-unit id="cc0df69a7bfbd6545911d095948cf97558edba0d" translate="yes" xml:space="preserve">
          <source>The set of NgModules whose exported &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt; are available to templates in this module.</source>
          <target state="translated">这组NgModules其出口的&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt;可用于该模块中的模板。</target>
        </trans-unit>
        <trans-unit id="abd06758e4687a7c44919fabc0c064aac2354cc2" translate="yes" xml:space="preserve">
          <source>The set of components that are bootstrapped when this module is bootstrapped. The components listed here are automatically added to &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">引导此模块时引导的一组组件。此处列出的组件会自动添加到 &lt;code&gt;entryComponents&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="32d438c2e575af5904ec9ce7fda3a5333ad0ee04" translate="yes" xml:space="preserve">
          <source>The set of components to compile when this NgModule is defined, so that they can be dynamically loaded into the view.</source>
          <target state="translated">当定义这个NgModule时,要编译的组件集,以便它们可以动态地加载到视图中。</target>
        </trans-unit>
        <trans-unit id="5fb26e057f395ff1c2bbe69c4c8605bab3259d00" translate="yes" xml:space="preserve">
          <source>The set of components, directives, and pipes (&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt;) that belong to this module.</source>
          <target state="translated">属于此模块的&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;一组组&lt;/a&gt;件，指令和管道（可声明）。</target>
        </trans-unit>
        <trans-unit id="7b2caf88051dc93e4146531fb1b86232037cd52e" translate="yes" xml:space="preserve">
          <source>The set of components, directives, and pipes declared in this NgModule that can be used in the template of any component that is part of an NgModule that imports this NgModule. Exported declarations are the module's public API.</source>
          <target state="translated">在这个NgModule中声明的组件、指令和管道的集合,这些组件可以用于导入这个NgModule的NgModule的任何组件的模板中。导出的声明是该模块的公共API。</target>
        </trans-unit>
        <trans-unit id="0c259b27e27fec00cdb957688cd4f00e39150e77" translate="yes" xml:space="preserve">
          <source>The set of injectable objects that are available in the injector of this module.</source>
          <target state="translated">本模块的注入器中可用的一组注入对象。</target>
        </trans-unit>
        <trans-unit id="d5765ec9ddf94071c5020c93344913452a009948" translate="yes" xml:space="preserve">
          <source>The set of questions you've defined for the job application is returned from the &lt;code&gt;QuestionService&lt;/code&gt;. In a real app you'd retrieve these questions from storage.</source>
          <target state="translated">您为求职申请定义的问题集是从 &lt;code&gt;QuestionService&lt;/code&gt; 返回的。在真实的应用程序中，您将从存储中检索这些问题。</target>
        </trans-unit>
        <trans-unit id="21e915a97b647841a3c77d6bb5bc493db4e59530" translate="yes" xml:space="preserve">
          <source>The set of schemas that declare elements to be allowed in the NgModule. Elements and properties that are neither Angular components nor directives must be declared in a schema.</source>
          <target state="translated">声明NgModule中允许使用的元素的模式集。既不是Angular组件也不是指令的元素和属性必须在模式中声明。</target>
        </trans-unit>
        <trans-unit id="f833bd6b1e79171a431acd5cc244779fb79402e4" translate="yes" xml:space="preserve">
          <source>The set of selectors that are available to a template include those declared here, and those that are exported from imported NgModules.</source>
          <target state="translated">模板可使用的选择器集合包括这里声明的选择器和从导入的NgModules中导出的选择器。</target>
        </trans-unit>
        <trans-unit id="b6a30893f8633b1e28a52635e18ed8118090a942" translate="yes" xml:space="preserve">
          <source>The setter of the &lt;code&gt;name&lt;/code&gt; input property in the child &lt;code&gt;NameChildComponent&lt;/code&gt; trims the whitespace from a name and replaces an empty value with default text.</source>
          <target state="translated">子项 &lt;code&gt;NameChildComponent&lt;/code&gt; 中的 &lt;code&gt;name&lt;/code&gt; 输入属性的设置程序将名称中的空格修剪掉，并将空值替换为默认文本。</target>
        </trans-unit>
        <trans-unit id="882e77e815d86faba535964e8ae6e6a1f26ffa49" translate="yes" xml:space="preserve">
          <source>The setup for the &lt;em&gt;test-host&lt;/em&gt; tests is similar to the setup for the stand-alone tests:</source>
          <target state="translated">对于安装&lt;em&gt;测试主机&lt;/em&gt;测试类似于设置了独立的测试：</target>
        </trans-unit>
        <trans-unit id="52f4e19d49b1e5a67a00d5af99c62cbc1c7875a5" translate="yes" xml:space="preserve">
          <source>The shadow-dom-piercing descendant combinator is deprecated and support is being &lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;removed from major browsers and tools&lt;/a&gt;. As such, in v4 we deprecated support in Angular for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;. Until removal, &lt;code&gt;::ng-deep&lt;/code&gt; is preferred for broader compatibility with the tools.</source>
          <target state="translated">弃用了影子穹顶后代组合&lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;器，并且从主要的浏览器和工具中删除了&lt;/a&gt;支持。因此，在v4中，我们弃用了Angular对 &lt;code&gt;/deep/&lt;/code&gt; ， &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;::ng-deep&lt;/code&gt; 的全部3种支持。在删除之前，首选 &lt;code&gt;::ng-deep&lt;/code&gt; 以获得与工具的广泛兼容性。</target>
        </trans-unit>
        <trans-unit id="e2b9108143779ec04ceb04bcde0783f4eb419bdf" translate="yes" xml:space="preserve">
          <source>The shadow-piercing descendant combinator is deprecated and &lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;support is being removed from major browsers&lt;/a&gt; and tools. As such we plan to drop support in Angular (for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;). Until then &lt;code&gt;::ng-deep&lt;/code&gt; should be preferred for a broader compatibility with the tools.</source>
          <target state="translated">不推荐使用穿刺阴影的后代组合&lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;器，&lt;/a&gt;并且从主要的浏览器和工具中删除了对它的支持。因此，我们计划放弃对Angular的支持（针对 &lt;code&gt;/deep/&lt;/code&gt; ， &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;::ng-deep&lt;/code&gt; 的全部3个）。在此之前，应首选 &lt;code&gt;::ng-deep&lt;/code&gt; 以获得与工具的广泛兼容性。</target>
        </trans-unit>
        <trans-unit id="d1572bbd4b2543d39de382abeaa39b959a062225" translate="yes" xml:space="preserve">
          <source>The shim first loads the SystemJS configuration, then Angular's test support libraries, and then the application's spec files themselves.</source>
          <target state="translated">shim首先加载SystemJS配置,然后加载Angular的测试支持库,再加载应用程序本身的规范文件。</target>
        </trans-unit>
        <trans-unit id="d9c0ff4882b7ddca991893d98816e7055727d7c4" translate="yes" xml:space="preserve">
          <source>The shorthand form expands into a long form that uses the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; selector on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element. The content of the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element that held the short-form directive.</source>
          <target state="translated">简写形式扩展为使用 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素上的 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 选择器的长形式。所述的含量 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素是 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素保持的短形式的指令。</target>
        </trans-unit>
        <trans-unit id="553922474ce1ca6a6f30eca0ff378d2e094bbbe1" translate="yes" xml:space="preserve">
          <source>The shorthand syntax &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; expands into two separate template specifications for the &quot;then&quot; and &quot;else&quot; clauses. For example, consider the following shorthand statement, that is meant to show a loading page while waiting for data to be loaded.</source>
          <target state="translated">缩写语法 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 扩展为&amp;ldquo; then&amp;rdquo;和&amp;ldquo; else&amp;rdquo;子句的两个单独的模板规范。例如，考虑以下速记语句，该语句用于在等待数据加载时显示加载页面。</target>
        </trans-unit>
        <trans-unit id="153a8913765ac20b181614adc3911db7022d20a6" translate="yes" xml:space="preserve">
          <source>The single parameter accepted is an initialization hash. Any properties of the response passed there will override the default values.</source>
          <target state="translated">接受的单一参数是一个初始化哈希。响应的任何属性将覆盖默认值。</target>
        </trans-unit>
        <trans-unit id="7ae02ec48c2aa6b29e8bf62369aed78347f97d35" translate="yes" xml:space="preserve">
          <source>The smallest grouping of display elements that can be created and destroyed together. Angular renders a view under the control of one or more &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, especially &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; directives and their companion &lt;a href=&quot;glossary#template&quot;&gt;templates&lt;/a&gt;.</source>
          <target state="translated">可以一起创建和销毁的显示元素的最小组合。Angular在一个或多个&lt;a href=&quot;glossary#directive&quot;&gt;指令&lt;/a&gt;（尤其是&lt;a href=&quot;glossary#component&quot;&gt;组件&lt;/a&gt;指令及其配套&lt;a href=&quot;glossary#template&quot;&gt;模板）&lt;/a&gt;的控制下渲染视图。</target>
        </trans-unit>
        <trans-unit id="fd28324682f0c17450b3cf5ed2f78e84c835aa30" translate="yes" xml:space="preserve">
          <source>The sneaky spy directive is simple, consisting almost entirely of &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; hooks that log messages to the parent via an injected &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; 间谍指令很简单，几乎完全由ngOnInit（）和 &lt;code&gt;ngOnDestroy()&lt;/code&gt; 挂钩组成，它们通过注入的 &lt;code&gt;LoggerService&lt;/code&gt; 将消息记录到父级。</target>
        </trans-unit>
        <trans-unit id="a51977b23bb7ecc232209e8d1327212e8a3ebfb7" translate="yes" xml:space="preserve">
          <source>The source code for this tutorial and the complete &lt;em&gt;Tour of Heroes&lt;/em&gt; global styles are available in the live example.</source>
          <target state="translated">该示例的源代码和完整的&lt;em&gt;Tour of Heroes&lt;/em&gt;全局样式在实时示例中可用。</target>
        </trans-unit>
        <trans-unit id="197396630d371033ea63576d710b5005e3bd9ab9" translate="yes" xml:space="preserve">
          <source>The source component's injector.</source>
          <target state="translated">源组件的喷射器。</target>
        </trans-unit>
        <trans-unit id="26d4b7c388a1bdb518c645561859bb64e0fbf361" translate="yes" xml:space="preserve">
          <source>The source of truth provides the value and status of the form element at a given point in time. In reactive forms, the form model is the source of truth. In the example above, the form model is the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">真理的来源提供了表单元素在给定时间点的价值和地位。在反应形式中，形式模型是真理的源头。在上面的示例中，表单模型是 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="711481c7ae759061bd5e4428a64fc27d4832dd02" translate="yes" xml:space="preserve">
          <source>The spy is designed such that any call to &lt;code&gt;getQuote&lt;/code&gt; receives an observable with a test quote. Unlike the real &lt;code&gt;getQuote()&lt;/code&gt; method, this spy bypasses the server and returns a synchronous observable whose value is available immediately.</source>
          <target state="translated">间谍的设计使得对 &lt;code&gt;getQuote&lt;/code&gt; 的任何调用都会收到带有测试引号的可观察对象。与真正的 &lt;code&gt;getQuote()&lt;/code&gt; 方法不同，此间谍程序绕过服务器并返回一个同步observable，其值立即可用。</target>
        </trans-unit>
        <trans-unit id="90b43b9097739862d0cb30d76b768225cec8d2a5" translate="yes" xml:space="preserve">
          <source>The starter app's structure looks like this:</source>
          <target state="translated">启动程序的结构是这样的。</target>
        </trans-unit>
        <trans-unit id="8fa84009f343b37f2c309935ebef67d3cf1bb17d" translate="yes" xml:space="preserve">
          <source>The state name, unique within the component.</source>
          <target state="translated">国家名称,在组件中是唯一的。</target>
        </trans-unit>
        <trans-unit id="8ba0f66a562868f6f0949ad17ceaa5aa9040735a" translate="yes" xml:space="preserve">
          <source>The state object is defined by &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;, and contains any developer-defined state value, as well as a unique ID that the router assigns to every router transition/navigation.</source>
          <target state="translated">状态对象由 &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; 定义，并且包含任何开发人员定义的状态值以及路由器分配给每个路由器转换/导航的唯一ID。</target>
        </trans-unit>
        <trans-unit id="29682628931d961e1dc643e174f6cb46d55f3a40" translate="yes" xml:space="preserve">
          <source>The statement context may also refer to properties of the template's own context. In the following examples, the template &lt;code&gt;$event&lt;/code&gt; object, a &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;template input variable&lt;/a&gt; (&lt;code&gt;let hero&lt;/code&gt;), and a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt; (&lt;code&gt;#heroForm&lt;/code&gt;) are passed to an event handling method of the component.</source>
          <target state="translated">语句上下文还可以引用模板自身上下文的属性。在以下示例中，模板 &lt;code&gt;$event&lt;/code&gt; 对象，&lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;模板输入变量&lt;/a&gt;（ &lt;code&gt;let hero&lt;/code&gt; ）和&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;模板引用变量&lt;/a&gt;（ &lt;code&gt;#heroForm&lt;/code&gt; ）被传递到组件的事件处理方法。</target>
        </trans-unit>
        <trans-unit id="ee7031536fc9f3201d33e673cc50dc352588d037" translate="yes" xml:space="preserve">
          <source>The static and resolved data of this route</source>
          <target state="translated">该途径的静态和解析数据</target>
        </trans-unit>
        <trans-unit id="6079268a1495ab3832f3c122c48c8debcb04466b" translate="yes" xml:space="preserve">
          <source>The steps are the same as using the &lt;code&gt;providers&lt;/code&gt; array, with the exception of using the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array instead.</source>
          <target state="translated">除了使用 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 数组外，其他步骤与使用 &lt;code&gt;providers&lt;/code&gt; 数组相同。</target>
        </trans-unit>
        <trans-unit id="7019f7ed50fbce076b2ffcd0fd378bb53f9230fa" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from model to view when the &lt;code&gt;favoriteColor&lt;/code&gt; changes from &lt;em&gt;Blue&lt;/em&gt; to &lt;em&gt;Red&lt;/em&gt;.</source>
          <target state="translated">当 &lt;code&gt;favoriteColor&lt;/code&gt; 从&lt;em&gt;Blue&lt;/em&gt;变为&lt;em&gt;Red&lt;/em&gt;时，以下步骤概述了从模型到视图的数据流。</target>
        </trans-unit>
        <trans-unit id="8f083b699a0e24cfb31552a7c5515dedc3bffa68" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from model to view.</source>
          <target state="translated">下面的步骤概述了从模型到视图的数据流。</target>
        </trans-unit>
        <trans-unit id="d6d931d512cd5180e215ff2bd54df9514cdbd37a" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from view to model when the input value changes from &lt;em&gt;Red&lt;/em&gt; to &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">当输入值从&lt;em&gt;红色&lt;/em&gt;变为&lt;em&gt;蓝色&lt;/em&gt;时，以下步骤概述了从视图到模型的数据流。</target>
        </trans-unit>
        <trans-unit id="cf66d9ec419458eca31557b6784e06c3d74c7302" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from view to model.</source>
          <target state="translated">下面的步骤概述了从视图到模型的数据流。</target>
        </trans-unit>
        <trans-unit id="93bcd38a5f62ce5f433e4b3619e142ff10dbf2d5" translate="yes" xml:space="preserve">
          <source>The steps below show you how to do the following:</source>
          <target state="translated">下面的步骤告诉你如何进行以下操作。</target>
        </trans-unit>
        <trans-unit id="b62b2ca3bd1da7bcd7ed67d55220aa0c687e3b42" translate="yes" xml:space="preserve">
          <source>The strategy that controls how a component is transformed in a custom element.</source>
          <target state="translated">控制自定义元素中组件如何转换的策略。</target>
        </trans-unit>
        <trans-unit id="930fe4769070145b5d1902f6b39df80e384668cc" translate="yes" xml:space="preserve">
          <source>The strategy that the default change detector uses to detect changes. When set, takes effect the next time change detection is triggered.</source>
          <target state="translated">默认的变更检测器用来检测变更的策略。设置后,在下次触发变更检测时生效。</target>
        </trans-unit>
        <trans-unit id="bf8be7fcf53ea5a196bf46985745bd43109fefe5" translate="yes" xml:space="preserve">
          <source>The strict checks of the &lt;code&gt;setValue()&lt;/code&gt; method help catch nesting errors in complex forms, while &lt;code&gt;patchValue()&lt;/code&gt; fails silently on those errors.</source>
          <target state="translated">对 &lt;code&gt;setValue()&lt;/code&gt; 方法的严格检查有助于捕获复杂形式的嵌套错误，而 &lt;code&gt;patchValue()&lt;/code&gt; 在这些错误上会静默失败。</target>
        </trans-unit>
        <trans-unit id="372bafa1bce494ea990979dd34c53dd96c7cc2ca" translate="yes" xml:space="preserve">
          <source>The string assigned to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is not a &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expression&lt;/a&gt;. Rather, it's a &lt;em&gt;microsyntax&lt;/em&gt;&amp;mdash;a little language of its own that Angular interprets. The string &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; means:</source>
          <target state="translated">分配给 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 的字符串不是&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;模板表达式&lt;/a&gt;。而是一个&lt;em&gt;微&lt;/em&gt;语法-Angular解释的一种自己的语言。字符串 &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; 意思是：</target>
        </trans-unit>
        <trans-unit id="e44daa65c98054f261ccfa5f7cf11e49ee653d27" translate="yes" xml:space="preserve">
          <source>The string form of &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; is deprecated (see &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt;). The function form (&lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt;) should be used instead.</source>
          <target state="translated">不推荐使用 &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 的字符串形式（请参见 &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt; ）。应该改用函数形式（ &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c5e2186518aafc34e0de597f98ce5a35b638ef12" translate="yes" xml:space="preserve">
          <source>The string is a fixed value that you can put directly into the template.</source>
          <target state="translated">该字符串是一个固定的值,你可以直接放入模板中。</target>
        </trans-unit>
        <trans-unit id="ee37f1eaca83dd9bb097b5466bff65a943fac485" translate="yes" xml:space="preserve">
          <source>The string to transform to lower case.</source>
          <target state="translated">要转换为小写的字符串。</target>
        </trans-unit>
        <trans-unit id="cb45bf71782ca8d0a97a51a6af91cbb4a490dedc" translate="yes" xml:space="preserve">
          <source>The string to transform to title case.</source>
          <target state="translated">要转换为标题大小写的字符串。</target>
        </trans-unit>
        <trans-unit id="417a5ce2ca98d102c22ce8871b11edab28c7f8e7" translate="yes" xml:space="preserve">
          <source>The string to transform to upper case.</source>
          <target state="translated">要转换为大写的字符串。</target>
        </trans-unit>
        <trans-unit id="79bdda991ab152b790e3070b35eb8fda7e4c2b45" translate="yes" xml:space="preserve">
          <source>The structure of an NgModule is the same whether it is a root module or a feature module. In the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which, like the root module, lets you use the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator; the second imports &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;, which contributes many common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. Feature modules import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is only imported once in the root module. &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; only contains information for common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; which are needed in most templates, whereas &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; configures the Angular app for the browser which needs to be done only once.</source>
          <target state="translated">NgModule的结构是根模块还是功能模块都是相同的。在CLI生成的功能模块中，文件顶部有两个JavaScript导入语句：第一个导入 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ，与根模块一样，它允许您使用 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器。第二个导入 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; ，它贡献了许多常见的指令，例如 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 。功能模块导入 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 而不是 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ，后者仅在根模块中导入一次。 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 仅包含有关通用指令（例如 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; )的信息大多数模板都需要使用这些功能，而 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 为浏览器配置Angular应用，只需执行一次即可。</target>
        </trans-unit>
        <trans-unit id="de78df528fc5f787d89545140bece8187c6b8538" translate="yes" xml:space="preserve">
          <source>The stub selectors match the selectors for the corresponding real components. But their templates and classes are empty.</source>
          <target state="translated">存根选择器与相应真实组件的选择器相匹配。但它们的模板和类是空的。</target>
        </trans-unit>
        <trans-unit id="a2d59788c70b71518e84d399dc1f8c1b1995a79e" translate="yes" xml:space="preserve">
          <source>The styles specified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata &lt;em&gt;apply only within the template of that component&lt;/em&gt;.</source>
          <target state="translated">在指定的款式 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 的元数据&lt;em&gt;仅在该组件的应用模板&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f48dea481324aa0b7a7a250484ea3649910069fd" translate="yes" xml:space="preserve">
          <source>The suggested polyfills are the ones that run full Angular applications. You may need additional polyfills to support features not covered by this list. Note that polyfills cannot magically transform an old, slow browser into a modern, fast one.</source>
          <target state="translated">建议的polyfills是那些可以运行完整的Angular应用的polyfills。你可能需要额外的polyfills来支持这个列表中没有涵盖的功能。请注意,polyfills不能神奇地将老旧、缓慢的浏览器转变为现代、快速的浏览器。</target>
        </trans-unit>
        <trans-unit id="629cf41ae2bb443d131c775aab136684c9761d9b" translate="yes" xml:space="preserve">
          <source>The switch directives are particularly useful for adding and removing &lt;em&gt;component elements&lt;/em&gt;. This example switches among four &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; components defined in the &lt;code&gt;item-switch.components.ts&lt;/code&gt; file. Each component has an &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input property&lt;/a&gt; which is bound to the &lt;code&gt;currentItem&lt;/code&gt; of the parent component.</source>
          <target state="translated">switch指令对于添加和删除&lt;em&gt;组件元素&lt;/em&gt;特别有用。本示例在 &lt;code&gt;item-switch.components.ts&lt;/code&gt; 文件中定义的四个 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 组件之间切换。每个组件都有一个 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;输入属性&lt;/a&gt;，该属性绑定到父组件的 &lt;code&gt;currentItem&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb1898cd24b327b717bb4aef090ad4e9542fafed" translate="yes" xml:space="preserve">
          <source>The switch from the &lt;em&gt;local variable&lt;/em&gt; to the &lt;em&gt;ViewChild&lt;/em&gt; technique is solely for the purpose of demonstration.</source>
          <target state="translated">从&lt;em&gt;局部变量&lt;/em&gt;切换到&lt;em&gt;ViewChild&lt;/em&gt;技术仅用于演示目的。</target>
        </trans-unit>
        <trans-unit id="40988748687c9ee6daa755f997551a5b4a1441e8" translate="yes" xml:space="preserve">
          <source>The switch value assigned to &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;hero.emotion&lt;/code&gt;) determines which (if any) of the switch cases are displayed.</source>
          <target state="translated">分配给 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; 的开关值（ &lt;code&gt;hero.emotion&lt;/code&gt; ）确定显示哪些开关盒（如果有）。</target>
        </trans-unit>
        <trans-unit id="9a62c528f0a931f89b2287d8a503aed1f8009829" translate="yes" xml:space="preserve">
          <source>The symbol to localize.</source>
          <target state="translated">要本地化的符号。</target>
        </trans-unit>
        <trans-unit id="4ed679bf2daa47968c73d3b3701e2547464b78f8" translate="yes" xml:space="preserve">
          <source>The synchronous &lt;em&gt;beforeEach&lt;/em&gt;</source>
          <target state="translated">同步&lt;em&gt;之前&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abbd548fb3da1a05f8609c8a3757af73c0e7704c" translate="yes" xml:space="preserve">
          <source>The synchronous validators registered with this group.</source>
          <target state="translated">在该组注册的同步验证器。</target>
        </trans-unit>
        <trans-unit id="d372dcb466775574685c3fae862c265b2b17aef2" translate="yes" xml:space="preserve">
          <source>The syntax in this example is as follows:</source>
          <target state="translated">本例中的语法如下。</target>
        </trans-unit>
        <trans-unit id="7e8b4d98df92da09eb34184a7a9efa8bfa65588d" translate="yes" xml:space="preserve">
          <source>The syntax may seem strange to you but users are unlikely to notice or care as long as the URL can be emailed and pasted into a browser address bar as this one can.</source>
          <target state="translated">这个语法在你看来可能很奇怪,但只要这个URL可以像这个一样通过电子邮件和粘贴到浏览器地址栏中,用户就不太可能注意到或在意。</target>
        </trans-unit>
        <trans-unit id="5f242d259e92ca5a53c10705d273887b830471cd" translate="yes" xml:space="preserve">
          <source>The table below summarizes the key differences between reactive and template-driven forms.</source>
          <target state="translated">下表总结了反应式表单和模板驱动式表单的主要区别。</target>
        </trans-unit>
        <trans-unit id="08365a3c201aa0c652bb798a6188518150b14a2a" translate="yes" xml:space="preserve">
          <source>The target event determines the shape of the &lt;code&gt;$event&lt;/code&gt; object. If the target event is a native DOM element event, then &lt;code&gt;$event&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event object&lt;/a&gt;, with properties such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;target.value&lt;/code&gt;.</source>
          <target state="translated">目标事件确定 &lt;code&gt;$event&lt;/code&gt; 对象的形状。如果目标事件是本机DOM元素事件，则 &lt;code&gt;$event&lt;/code&gt; 是具有诸如 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;target.value&lt;/code&gt; 之类的属性的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM事件对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="088749979b09bfd46d68e94f37fbfac7f9f02497" translate="yes" xml:space="preserve">
          <source>The target in the square brackets, &lt;code&gt;[]&lt;/code&gt;, is the property you decorate with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component. The binding source, the part to the right of the equal sign, is the data that the parent component passes to the nested component.</source>
          <target state="translated">方括号 &lt;code&gt;[]&lt;/code&gt; 中的目标是您在子组件中使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰的属性。绑定源（等号右边的部分）是父组件传递给嵌套组件的数据。</target>
        </trans-unit>
        <trans-unit id="ea8a5033f54ae9c4081d5ab74a38829cd1975b5f" translate="yes" xml:space="preserve">
          <source>The target named &quot;touch&quot; uses our builder, which we published to &lt;code&gt;@example/command-runner&lt;/code&gt;. (See &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;)</source>
          <target state="translated">目标名为&amp;ldquo; touch&amp;rdquo;的目标使用我们的构建器，该构建器已发布到 &lt;code&gt;@example/command-runner&lt;/code&gt; 。（请参阅&lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;发布库&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="83189c190de1ae321a2890e3cde83b83c7039a71" translate="yes" xml:space="preserve">
          <source>The target property accepts a string value.</source>
          <target state="translated">目标属性接受一个字符串值。</target>
        </trans-unit>
        <trans-unit id="9803929ad21484881b4d3f6acabd34faf9ef3af2" translate="yes" xml:space="preserve">
          <source>The target to apply service worker to.</source>
          <target state="translated">申请服务人员的对象。</target>
        </trans-unit>
        <trans-unit id="758b33e79798a18b4b5d7ce28a40f40423430f66" translate="yes" xml:space="preserve">
          <source>The target to apply web worker to.</source>
          <target state="translated">要应用web worker的目标。</target>
        </trans-unit>
        <trans-unit id="4832cdf5716df7acd57fe0ac87672a04e59ff3aa" translate="yes" xml:space="preserve">
          <source>The target, &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;, which is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property in the child component class, receives its value from the parent's property, &lt;code&gt;currentItem&lt;/code&gt;. When you click delete, the child component raises an event, &lt;code&gt;deleteRequest&lt;/code&gt;, which is the argument for the parent's &lt;code&gt;crossOffItem()&lt;/code&gt; method.</source>
          <target state="translated">目标 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 是子组件类中的 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 属性，它从父项的属性 &lt;code&gt;currentItem&lt;/code&gt; 中接收其值。当您单击删除时，子组件将引发事件 &lt;code&gt;deleteRequest&lt;/code&gt; ，这是父组件的 &lt;code&gt;crossOffItem()&lt;/code&gt; 方法的参数。</target>
        </trans-unit>
        <trans-unit id="cd2fa7e7402ff15d8269c74078e6ca3033630d4e" translate="yes" xml:space="preserve">
          <source>The telltale signs of &lt;em&gt;content projection&lt;/em&gt; are twofold:</source>
          <target state="translated">&lt;em&gt;内容投射的&lt;/em&gt;明显迹象是双重的：</target>
        </trans-unit>
        <trans-unit id="e2a40647498302ae30e3c37d356dbc6aee8a2f1c" translate="yes" xml:space="preserve">
          <source>The template and style filenames reference the HTML and CSS files that StackBlitz generates.</source>
          <target state="translated">模板和样式文件名引用了StackBlitz生成的HTML和CSS文件。</target>
        </trans-unit>
        <trans-unit id="c4786e4078a2207abe9c4cfa9d1d9cf3ab9a3992" translate="yes" xml:space="preserve">
          <source>The template associated with a component binds an animation trigger to an element.</source>
          <target state="translated">与组件关联的模板将动画触发器绑定到元素上。</target>
        </trans-unit>
        <trans-unit id="7456b59897a0fe9f7fab60b1fd5714f118ee168e" translate="yes" xml:space="preserve">
          <source>The template associated with this component makes use of the defined trigger by binding to an element within its template code.</source>
          <target state="translated">与该组件相关联的模板通过绑定到模板代码中的元素来使用定义的触发器。</target>
        </trans-unit>
        <trans-unit id="ad2640340c3b2204b3e2187d3156835ccc870fd9" translate="yes" xml:space="preserve">
          <source>The template displays the two component properties using double curly brace interpolation:</source>
          <target state="translated">模板使用双曲括号插值显示两个组件属性。</target>
        </trans-unit>
        <trans-unit id="576bb8173300bc75c8165cf5e1686bbdae4c4807" translate="yes" xml:space="preserve">
          <source>The template expression inside the double quotes, &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt;, looks and behaves much like TypeScript. When the component's list of heroes has more than three items, Angular adds the paragraph to the DOM and the message appears. If there are three or fewer items, Angular omits the paragraph, so no message appears. For more information, see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">双引号内的模板表达式 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt; 外观和行为与TypeScript非常相似。当组件的英雄列表包含三项以上时，Angular将段落添加到DOM中，并显示消息。如果三个或三个以下项目，Angular会省略该段落，因此不会出现任何消​​息。有关更多信息，请参见&amp;ldquo; &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;模板&lt;/a&gt;&lt;a href=&quot;template-syntax&quot;&gt;语法&amp;rdquo;&lt;/a&gt;页面的模板表达式部分。</target>
        </trans-unit>
        <trans-unit id="06a26eec315b228b84cdf45c3df4a6172bf6d5de" translate="yes" xml:space="preserve">
          <source>The template expression should evaluate to the type of value that the target property expects. Return a string if the target property expects a string, a number if it expects a number, an object if it expects an object, and so on.</source>
          <target state="translated">模板表达式应该评估到目标属性所期望的值的类型,如果目标属性期望的是字符串,则返回字符串,如果期望的是数字,则返回数字,如果期望的是对象,则返回对象,以此类推。如果目标属性期望的是字符串,则返回字符串;如果期望的是数字,则返回数字;如果期望的是对象,则返回对象,以此类推。</target>
        </trans-unit>
        <trans-unit id="c2d8c395975bbaf307f8b6ad3d0e90daae25b98a" translate="yes" xml:space="preserve">
          <source>The template expression to the right of the equals (=) contains a space-delimited string of CSS classes that the Router will add when this link is active (and remove when the link is inactive). You set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive to a string of classes such as &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; or bind it to a component property that returns such a string.</source>
          <target state="translated">等号（=）右侧的模板表达式包含以空格分隔的CSS类字符串，当此链接处于活动状态时，路由器将添加CSS类（如果该链接处于非活动状态，则将其删除）。您将 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; 伪指令设置为诸如 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; 之类的字符串，或将其绑定到返回此类字符串的组件属性。</target>
        </trans-unit>
        <trans-unit id="c4a5ffd1d833be7be8234c4da4123676ff8d6c69" translate="yes" xml:space="preserve">
          <source>The template input elements do &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">模板输入元素&lt;em&gt;不&lt;/em&gt;使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e42a3efc7ee16d8ee04f26132d4fe495e4010874" translate="yes" xml:space="preserve">
          <source>The template is a multi-line string within ECMAScript 2015 backticks (&lt;code&gt;`&lt;/code&gt;). The backtick (&lt;code&gt;`&lt;/code&gt;)&amp;mdash;which is &lt;em&gt;not&lt;/em&gt; the same character as a single quote (&lt;code&gt;'&lt;/code&gt;)&amp;mdash;allows you to compose a string over several lines, which makes the HTML more readable.</source>
          <target state="translated">模板是ECMAScript 2015反引号（ &lt;code&gt;`&lt;/code&gt; ）中的多行字符串。倒引号（ &lt;code&gt;`&lt;/code&gt; ） -其&lt;em&gt;不&lt;/em&gt;同一个字符作为一个单引号（ &lt;code&gt;'&lt;/code&gt; ） -允许您撰写串几行，这使得HTML更具有可读性。</target>
        </trans-unit>
        <trans-unit id="3bfaca46091594f4d1d50328af755b641a1f6fb4" translate="yes" xml:space="preserve">
          <source>The template is compiled within the context of an NgModule&amp;mdash;the NgModule within which the template's component is declared&amp;mdash;which determines the set of selectors using the following rules:</source>
          <target state="translated">模板是在NgModule（在其中声明模板组件的NgModule）的上下文中编译的，该上下文使用以下规则确定选择器的集合：</target>
        </trans-unit>
        <trans-unit id="08d9755e408a260636b09bfef92316faea44cef4" translate="yes" xml:space="preserve">
          <source>The template is completely self contained. It doesn't bind to the component, and the component does nothing.</source>
          <target state="translated">模板是完全自包含的。它不与组件绑定,组件也不做任何事情。</target>
        </trans-unit>
        <trans-unit id="70313244a4cd1e80d96df911743747c5b1d0a1c0" translate="yes" xml:space="preserve">
          <source>The template options object, &lt;code&gt;angularCompilerOptions&lt;/code&gt;, is a sibling to the &lt;code&gt;compilerOptions&lt;/code&gt; object that supplies standard options to the TypeScript compiler.</source>
          <target state="translated">模板选项对象 &lt;code&gt;angularCompilerOptions&lt;/code&gt; 是可向TypeScript编译器提供标准选项的 &lt;code&gt;compilerOptions&lt;/code&gt; 对象的同级对象。</target>
        </trans-unit>
        <trans-unit id="51b07ca66a0c80d8a3f63013141583e49737c085" translate="yes" xml:space="preserve">
          <source>The template reference variable named &lt;code&gt;box&lt;/code&gt;, declared on the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, refers to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element itself. The code uses the &lt;code&gt;box&lt;/code&gt; variable to get the input element's &lt;code&gt;value&lt;/code&gt; and display it with interpolation between &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">在 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素上声明的名为 &lt;code&gt;box&lt;/code&gt; 的模板引用变量引用 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素本身。该代码使用 &lt;code&gt;box&lt;/code&gt; 变量获取输入元素的 &lt;code&gt;value&lt;/code&gt; 并在 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标记之间进行插值显示。</target>
        </trans-unit>
        <trans-unit id="de2262f6eff650096d5ec2a922c11474976de6e1" translate="yes" xml:space="preserve">
          <source>The template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.</source>
          <target state="translated">模板语法为不太适合属性绑定的场景提供了专门的单向绑定。</target>
        </trans-unit>
        <trans-unit id="083a3f1dd8ef9b722e60e2598176af5110f9dbf5" translate="yes" xml:space="preserve">
          <source>The test assumes (correctly in this case) that the runtime event handler&amp;mdash;the component's &lt;code&gt;click()&lt;/code&gt; method&amp;mdash;doesn't care about the event object.</source>
          <target state="translated">该测试假定（在这种情况下正确）假设运行时事件处理程序（组件的 &lt;code&gt;click()&lt;/code&gt; 方法）不关心事件对象。</target>
        </trans-unit>
        <trans-unit id="3fee678255a89c608b1621887a0565d3703b71c4" translate="yes" xml:space="preserve">
          <source>The test configuration can use the &lt;code&gt;SharedModule&lt;/code&gt; too as seen in this alternative setup:</source>
          <target state="translated">测试配置也可以使用 &lt;code&gt;SharedModule&lt;/code&gt; ,如以下替代设置所示：</target>
        </trans-unit>
        <trans-unit id="9b3f7b35cc6454035e62b2373f127b23cbdae65d" translate="yes" xml:space="preserve">
          <source>The test consumes that spy in the same way it did earlier.</source>
          <target state="translated">该测试以之前的方式消耗该间谍。</target>
        </trans-unit>
        <trans-unit id="64d8dd78adadc9a255e228a4c2bdbf4eb2d5cae3" translate="yes" xml:space="preserve">
          <source>The test detects that event through its subscription to &lt;code&gt;selected&lt;/code&gt;.</source>
          <target state="translated">测试通过订阅到 &lt;code&gt;selected&lt;/code&gt; 事件来检测该事件。</target>
        </trans-unit>
        <trans-unit id="8a9ff9ce0ff2aea3ea5d9b5e4c05171faa52806f" translate="yes" xml:space="preserve">
          <source>The test fails when the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; tries to create the component.</source>
          <target state="translated">当 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 尝试创建组件时，测试失败。</target>
        </trans-unit>
        <trans-unit id="dc61697c7a24dc30137c8a1be726e1064a8ae44b" translate="yes" xml:space="preserve">
          <source>The test file extension &lt;strong&gt;must be &lt;code&gt;.spec.ts&lt;/code&gt;&lt;/strong&gt; so that tooling can identify it as a file with tests (AKA, a &lt;em&gt;spec&lt;/em&gt; file).</source>
          <target state="translated">测试文件的扩展名&lt;strong&gt;必须为 &lt;code&gt;.spec.ts&lt;/code&gt; ,&lt;/strong&gt;以便工具可以将其标识为带有测试的文件（AKA，&lt;em&gt;规格&lt;/em&gt;文件）。</target>
        </trans-unit>
        <trans-unit id="e1c2770aafe4156298be6944b33c74e2f41bc2b8" translate="yes" xml:space="preserve">
          <source>The test host sets the component's &lt;code&gt;hero&lt;/code&gt; input property with its test hero. It binds the component's &lt;code&gt;selected&lt;/code&gt; event with its &lt;code&gt;onSelected&lt;/code&gt; handler, which records the emitted hero in its &lt;code&gt;selectedHero&lt;/code&gt; property.</source>
          <target state="translated">测试主机使用其测试英雄设置组件的 &lt;code&gt;hero&lt;/code&gt; 输入属性。它将组件的 &lt;code&gt;selected&lt;/code&gt; 事件与其 &lt;code&gt;onSelected&lt;/code&gt; 处理函数绑定，该处理函数将发出的英雄记录在 &lt;code&gt;selectedHero&lt;/code&gt; 属性中。</target>
        </trans-unit>
        <trans-unit id="3f2fe2155132bb0d67244809298ea98ce16fe29e" translate="yes" xml:space="preserve">
          <source>The test must wait for the &lt;code&gt;getQuote()&lt;/code&gt; observable to emit the next quote. Instead of calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;, it calls &lt;code&gt;fixture.whenStable()&lt;/code&gt;.</source>
          <target state="translated">测试必须等待可观察到的 &lt;code&gt;getQuote()&lt;/code&gt; 发出下一个报价。而不是调用 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; ，而是调用 &lt;code&gt;fixture.whenStable()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eae43c82340aebd9536a260fd2377f5061a497ef" translate="yes" xml:space="preserve">
          <source>The test resumes within the promise callback, which calls &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to update the quote element with the expected text.</source>
          <target state="translated">测试将在promise回调中继续，该回调将调用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; 以使用期望的文本更新quote元素。</target>
        </trans-unit>
        <trans-unit id="9991de36b4ebc0ec198e7d693844d908feef9de2" translate="yes" xml:space="preserve">
          <source>The test suite setup provided the same router spy &lt;a href=&quot;testing#routing-component&quot;&gt;described above&lt;/a&gt; which spies on the router without actually navigating.</source>
          <target state="translated">测试套件的设置提供了与&lt;a href=&quot;testing#routing-component&quot;&gt;上述&lt;/a&gt;路由器间谍相同的间谍，无需实际导航即可侦察路由器。</target>
        </trans-unit>
        <trans-unit id="6e4274a8f1842c774f28cff1fab41deb042b588a" translate="yes" xml:space="preserve">
          <source>The test triggered a &quot;click&quot; event with a &lt;code&gt;null&lt;/code&gt; event object.</source>
          <target state="translated">测试使用 &lt;code&gt;null&lt;/code&gt; 事件对象触发了&amp;ldquo;点击&amp;rdquo;事件。</target>
        </trans-unit>
        <trans-unit id="64322dc55f479cb397712aa1ca434f09788d33d9" translate="yes" xml:space="preserve">
          <source>The testing goal is to verify that such bindings work as expected. The tests should set input values and listen for output events.</source>
          <target state="translated">测试的目标是验证这种绑定是否按预期工作。测试应设置输入值并监听输出事件。</target>
        </trans-unit>
        <trans-unit id="6e2010246d07d1175ff55b50a4ac15be59351555" translate="yes" xml:space="preserve">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) call it for you so there is rarely a reason for you to call it yourself.</source>
          <target state="translated">测试垫片（ &lt;code&gt;karma-test-shim&lt;/code&gt; ， &lt;code&gt;browser-test-shim&lt;/code&gt; ）会为您调用它，因此您很少有理由自己调用它。</target>
        </trans-unit>
        <trans-unit id="148b2781f0537830461040ebc4675f60de170e4e" translate="yes" xml:space="preserve">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) establish the &lt;a href=&quot;testing&quot;&gt;initial test environment&lt;/a&gt; and a default testing module. The default testing module is configured with basic declaratives and some Angular service substitutes that every tester needs.</source>
          <target state="translated">测试垫片（ &lt;code&gt;karma-test-shim&lt;/code&gt; ， &lt;code&gt;browser-test-shim&lt;/code&gt; ）建立&lt;a href=&quot;testing&quot;&gt;初始测试环境&lt;/a&gt;和默认测试模块。默认的测试模块配置有基本的声明和每个测试人员都需要的一些Angular服务替代品。</target>
        </trans-unit>
        <trans-unit id="32d01fc5844e040dbbc5a7fa7fc314aed7f8af26" translate="yes" xml:space="preserve">
          <source>The tests described in this guide are in &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt;. There are also tests of an application data service that call &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt;.</source>
          <target state="translated">本指南中描述的测试位于 &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt; 中。在 &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt; 中也有对调用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的应用程序数据服务的测试。</target>
        </trans-unit>
        <trans-unit id="c46d6deffac15f691e67af3e7802efbd62c6f4b5" translate="yes" xml:space="preserve">
          <source>The tests in this guide are designed to run in a browser so a &lt;code&gt;nativeElement&lt;/code&gt; value will always be an &lt;code&gt;HTMLElement&lt;/code&gt; or one of its derived classes.</source>
          <target state="translated">本指南中的测试旨在在浏览器中运行，因此 &lt;code&gt;nativeElement&lt;/code&gt; 值将始终是 &lt;code&gt;HTMLElement&lt;/code&gt; 或其派生类之一。</target>
        </trans-unit>
        <trans-unit id="97411629b7777fd387f17c68fd54b77f893a322d" translate="yes" xml:space="preserve">
          <source>The tests in this guide only call &lt;code&gt;compileComponents&lt;/code&gt; when necessary.</source>
          <target state="translated">本指南中的测试仅在必要时调用 &lt;code&gt;compileComponents&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9b3c07155cb24bc62c23428c9b9b89113dffe1f" translate="yes" xml:space="preserve">
          <source>The tests need access to the (stub) &lt;code&gt;UserService&lt;/code&gt; injected into the &lt;code&gt;WelcomeComponent&lt;/code&gt;.</source>
          <target state="translated">测试需要访问注入到 &lt;code&gt;WelcomeComponent&lt;/code&gt; 中的（存根） &lt;code&gt;UserService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="552798847cfd969bee03bd536ec0eaa7b9abccb0" translate="yes" xml:space="preserve">
          <source>The tests themselves are almost identical to the stand-alone version:</source>
          <target state="translated">测试本身与单机版几乎相同。</target>
        </trans-unit>
        <trans-unit id="f24377c82eb7c604520a6472b6cdeda1e15d8e75" translate="yes" xml:space="preserve">
          <source>The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.</source>
          <target state="translated">大括号之间的文本通常是一个组件属性的名称。Angular用相应组件属性的字符串值替换该名称。</target>
        </trans-unit>
        <trans-unit id="7001ead9ab548d59ed3b0b0d47f9fc2feadd5c3b" translate="yes" xml:space="preserve">
          <source>The text string.</source>
          <target state="translated">文本字符串。</target>
        </trans-unit>
        <trans-unit id="019a0c6e6325000b9ec468afe8f97d5dd0f39c5b" translate="yes" xml:space="preserve">
          <source>The textbox should both &lt;em&gt;display&lt;/em&gt; the hero's &lt;code&gt;name&lt;/code&gt; property and &lt;em&gt;update&lt;/em&gt; that property as the user types. That means data flows from the component class &lt;em&gt;out to the screen&lt;/em&gt; and from the screen &lt;em&gt;back to the class&lt;/em&gt;.</source>
          <target state="translated">文本框应既&lt;em&gt;显示&lt;/em&gt;英雄的 &lt;code&gt;name&lt;/code&gt; 属性，又应在用户键入时&lt;em&gt;更新&lt;/em&gt;该属性。这意味着数据从组件类流到&lt;em&gt;屏幕&lt;/em&gt;，再从屏幕流&lt;em&gt;回到类&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9c58df2e0d216969a6b8f76eb1c801e78a85b760" translate="yes" xml:space="preserve">
          <source>The third argument, &lt;code&gt;easing&lt;/code&gt;, controls how the animation &lt;a href=&quot;http://easings.net/&quot;&gt;accelerates and decelerates&lt;/a&gt; during its runtime. For example, &lt;code&gt;ease-in&lt;/code&gt; causes the animation to begin slowly, and to pick up speed as it progresses.</source>
          <target state="translated">第三个参数 &lt;code&gt;easing&lt;/code&gt; ，控制动画在运行时如何&lt;a href=&quot;http://easings.net/&quot;&gt;加速和减速&lt;/a&gt;。例如， &lt;code&gt;ease-in&lt;/code&gt; 入会使动画开始缓慢，并随着动画的进行而加快速度。</target>
        </trans-unit>
        <trans-unit id="02b20036ccb6a097e5d6133a873e25f13d920be9" translate="yes" xml:space="preserve">
          <source>The third parameter defines a pluralization pattern consisting of pluralization categories and their matching values.</source>
          <target state="translated">第三个参数定义了一个由复数类别及其匹配值组成的复数模式。</target>
        </trans-unit>
        <trans-unit id="e1fbe17ffff22abb0345952cf457c1a79e7059ef" translate="yes" xml:space="preserve">
          <source>The threshold for error relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">相对于基线的误差阈值（最小和最大）。</target>
        </trans-unit>
        <trans-unit id="60c47ee6ec4aee3d2f301fc3d304a4955e681b57" translate="yes" xml:space="preserve">
          <source>The threshold for warning relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">相对于基线的警告阈值（最小和最大）。</target>
        </trans-unit>
        <trans-unit id="c4b55d03441bffab6eec1d8c5b1ac161eb54aa13" translate="yes" xml:space="preserve">
          <source>The time it takes the animation to complete, in milliseconds.</source>
          <target state="translated">动画完成所需的时间,以毫秒为单位。</target>
        </trans-unit>
        <trans-unit id="39672ec6c077499845ec25181d8fdddc36ce80f6" translate="yes" xml:space="preserve">
          <source>The time zone. A time zone offset from GMT (such as &lt;code&gt;'+0430'&lt;/code&gt;), or a standard UTC/GMT or continental US time zone abbreviation. If not specified, uses host system settings.</source>
          <target state="translated">时区。时区偏离GMT（例如 &lt;code&gt;'+0430'&lt;/code&gt; ），或者是标准UTC / GMT或美国大陆时区的缩写。如果未指定，则使用主机系统设置。</target>
        </trans-unit>
        <trans-unit id="20e4e50a13a151170196f0e0befe4c1c2ba96789" translate="yes" xml:space="preserve">
          <source>The timing data for the step.</source>
          <target state="translated">该步骤的计时数据。</target>
        </trans-unit>
        <trans-unit id="3a5862865c9788bb436ccfadcc4ca1e2e0ed4f85" translate="yes" xml:space="preserve">
          <source>The timing data for the steps.</source>
          <target state="translated">步的计时数据。</target>
        </trans-unit>
        <trans-unit id="9bb53d35a2e2718224cdb5414e304756bc3d18c6" translate="yes" xml:space="preserve">
          <source>The title should appear at the top of the physical page. Begin the title with the markdown &lt;code&gt;#&lt;/code&gt; character. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">标题应显示在物理页面的顶部。标题以减号 &lt;code&gt;#&lt;/code&gt; 字符开头。或者，您可以编写等效的 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7392074d5488bfada1cba2db29c9e3aaea938dec" translate="yes" xml:space="preserve">
          <source>The tool that the CLI uses to perform complex tasks such as compilation and test running, according to a provided configuration. Architect is a shell that runs a &lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt; (defined in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;) with a given &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;.</source>
          <target state="translated">根据提供的配置，CLI用于执行复杂任务（例如编译和测试运行）的工具。Architect是一个外壳，用于运行具有给定&lt;a href=&quot;glossary#target&quot;&gt;目标配置&lt;/a&gt;的&lt;a href=&quot;glossary#builder&quot;&gt;构建器&lt;/a&gt;（在&lt;a href=&quot;glossary#npm-package&quot;&gt;npm包中&lt;/a&gt;定义）。</target>
        </trans-unit>
        <trans-unit id="a41ed1a3c20f3b032ce6bf341b07b3ff788f0e6c" translate="yes" xml:space="preserve">
          <source>The top level of the root project folder for a collection contains configuration files, a &lt;code&gt;node_modules&lt;/code&gt; folder, and a &lt;code&gt;src/&lt;/code&gt; folder. The &lt;code&gt;src/&lt;/code&gt; folder contains subfolders for named schematics in the collection, and a schema, &lt;code&gt;collection.json&lt;/code&gt;, which describes the collected schematics. Each schematic is created with a name, description, and factory function.</source>
          <target state="translated">集合的根项目文件夹的顶层包含配置文件， &lt;code&gt;node_modules&lt;/code&gt; 文件夹和 &lt;code&gt;src/&lt;/code&gt; 文件夹。在 &lt;code&gt;src/&lt;/code&gt; 文件夹包含子文件夹集合中命名的图表和架构， &lt;code&gt;collection.json&lt;/code&gt; ，它描述了收集原理图。每个原理图都使用名称，描述和工厂功能创建。</target>
        </trans-unit>
        <trans-unit id="3f8c3bac42ac19a6aeec66ddbb65426c9445956b" translate="yes" xml:space="preserve">
          <source>The top paragraph is in the DOM. The bottom, disused paragraph is not; in its place is a comment about &quot;bindings&quot; (more about that &lt;a href=&quot;structural-directives#asterisk&quot;&gt;later&lt;/a&gt;).</source>
          <target state="translated">最上段在DOM中。最下面的废弃段落不是；取而代之的是对&amp;ldquo;绑定&amp;rdquo;的评论（&lt;a href=&quot;structural-directives#asterisk&quot;&gt;稍后会&lt;/a&gt;更多）。</target>
        </trans-unit>
        <trans-unit id="00501897b059678bdf07befdac7616fe6a03505a" translate="yes" xml:space="preserve">
          <source>The top-level directive for this control if present, otherwise null.</source>
          <target state="translated">该控件的顶层指令(如果存在),否则为空。</target>
        </trans-unit>
        <trans-unit id="aa4c65514687fcb647bd478319e8cd7a18baae19" translate="yes" xml:space="preserve">
          <source>The top-level directive for this group if present, otherwise null.</source>
          <target state="translated">该组的最高级别指令,如果存在,则为空。</target>
        </trans-unit>
        <trans-unit id="7f59f229151882c691c9c4dbd40db2c8cf35cf79" translate="yes" xml:space="preserve">
          <source>The top-level form directive for the control.</source>
          <target state="translated">控件的顶层表单指令。</target>
        </trans-unit>
        <trans-unit id="aa96b6dd3b9c83ecd894feff632ccdcd8ce5055e" translate="yes" xml:space="preserve">
          <source>The total run time of the animation, in milliseconds.</source>
          <target state="translated">动画的总运行时间,以毫秒为单位。</target>
        </trans-unit>
        <trans-unit id="14aee0513a51a8b6574f4395af2536721cbd0b69" translate="yes" xml:space="preserve">
          <source>The transition from the server-rendered app to the client app happens quickly on a development machine, but you should always test your apps in real-world scenarios.</source>
          <target state="translated">从服务器渲染的应用到客户端应用的过渡在开发机器上很快就会发生,但你应该始终在真实世界的场景中测试你的应用。</target>
        </trans-unit>
        <trans-unit id="2b2c02e508d78290b606f3c251693a83d5dd77d7" translate="yes" xml:space="preserve">
          <source>The translation file format.</source>
          <target state="translated">翻译文件格式。</target>
        </trans-unit>
        <trans-unit id="a01d8be6610dc7e8ff92abc660e7a063be84ddba" translate="yes" xml:space="preserve">
          <source>The translation file.</source>
          <target state="translated">翻译文件。</target>
        </trans-unit>
        <trans-unit id="566718f0b46f66443c966e183abd9ebc1557a5c4" translate="yes" xml:space="preserve">
          <source>The translation process that transforms one version of JavaScript to another version; for example, down-leveling ES2015 to the older ES5 version.</source>
          <target state="translated">将一个版本的JavaScript转换为另一个版本的翻译过程;例如,将ES2015降级为旧的ES5版本。</target>
        </trans-unit>
        <trans-unit id="2fd93ca59b690739d63aaf50fa1d89967d7ba17a" translate="yes" xml:space="preserve">
          <source>The translator may also need to know the meaning or intent of the text message within this particular app context.</source>
          <target state="translated">译者可能还需要知道文本信息在这个特定应用环境中的含义或意图。</target>
        </trans-unit>
        <trans-unit id="6cbae59239e49c4968e3b2022136d5ac4b8dd7eb" translate="yes" xml:space="preserve">
          <source>The trigger name, used to associate it with an element. Unique within the component.</source>
          <target state="translated">触发器名称,用于与元素关联。在组件中是唯一的。</target>
        </trans-unit>
        <trans-unit id="599b7384324d0565d53e3693b7036e321e474501" translate="yes" xml:space="preserve">
          <source>The tutorial's &quot;in-memory web API&quot; module, a demo and development tool, intercepts all HTTP calls and simulates the behavior of a remote data server. In practice, you would remove that module and register your web API middleware on the server here.</source>
          <target state="translated">教程中的 &quot;内存中的Web API &quot;模块,是一个演示和开发工具,它拦截所有的HTTP调用,并模拟远程数据服务器的行为。在实际操作中,你会删除该模块,并在此服务器上注册你的Web API中间件。</target>
        </trans-unit>
        <trans-unit id="29c54a0ff6d263b78d0ad5a2dc608fb24dc18c92" translate="yes" xml:space="preserve">
          <source>The tutorial's &lt;code&gt;HeroService&lt;/code&gt; and &lt;code&gt;HeroSearchService&lt;/code&gt; delegate to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; module to fetch application data. These services send requests to &lt;em&gt;relative&lt;/em&gt; URLs such as &lt;code&gt;api/heroes&lt;/code&gt;. In a Universal app, HTTP URLs must be &lt;em&gt;absolute&lt;/em&gt; (for example, &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt;). This means you need to change your services to make requests with absolute URLs when running on the server and with relative URLs when running in the browser.</source>
          <target state="translated">本教程的 &lt;code&gt;HeroService&lt;/code&gt; 和 &lt;code&gt;HeroSearchService&lt;/code&gt; 委托给Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 模块以获取应用程序数据。这些服务将请求发送到&lt;em&gt;相对&lt;/em&gt; URL，例如 &lt;code&gt;api/heroes&lt;/code&gt; 。在通用应用程序中，HTTP URL必须是&lt;em&gt;绝对的&lt;/em&gt;（例如， &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt; ）。这意味着您需要更改服务以在服务器上运行时使用绝对URL发出请求，而在浏览器中运行时使用相对URL发出请求。</target>
        </trans-unit>
        <trans-unit id="afc05ea2dd3769a2464a65395b0f8fc1046a9410" translate="yes" xml:space="preserve">
          <source>The two build systems support different things, and even where they support the same things, they do those things differently. This means that the TypeScript source can result in different JavaScript code in a built library than it would in a built application.</source>
          <target state="translated">这两个构建系统支持不同的东西,即使是支持相同的东西,它们也会以不同的方式做这些事情。这意味着TypeScript源码在构建库中的JavaScript代码与在构建应用程序中的代码可能会有所不同。</target>
        </trans-unit>
        <trans-unit id="3d6bab88072a051c166e9e7471ac45c3b0a3264e" translate="yes" xml:space="preserve">
          <source>The two components will have a parent/child relationship. The parent &lt;code&gt;HeroesComponent&lt;/code&gt; will control the child &lt;code&gt;HeroDetailComponent&lt;/code&gt; by sending it a new hero to display whenever the user selects a hero from the list.</source>
          <target state="translated">这两个组件将具有父/子关系。父级 &lt;code&gt;HeroesComponent&lt;/code&gt; 将通过向子级 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 发送一个新的英雄来控制子级HeroDetailComponent，以便在用户从列表中选择英雄时显示。</target>
        </trans-unit>
        <trans-unit id="5afe858ace0f507f6e00dcce82eccd00126d0833" translate="yes" xml:space="preserve">
          <source>The two types of validators are passed in separately as the second and third arg respectively, or together as part of an options object.</source>
          <target state="translated">这两种类型的验证器分别作为第二个和第三个参数传入,或者一起作为一个选项对象的一部分传入。</target>
        </trans-unit>
        <trans-unit id="b4abd53c0253243e985b7e065cc9f874147ab4e8" translate="yes" xml:space="preserve">
          <source>The two update events, &lt;code&gt;available&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt;, are &lt;code&gt;Observable&lt;/code&gt; properties of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">这两个更新事件， &lt;code&gt;available&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt; ，是 &lt;code&gt;Observable&lt;/code&gt; 的性质 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1dbdba75ae5eb9e9bc50a6b2bc270a30ddeeee80" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is a great convenience compared to separate property and event bindings. It would be convenient to use two-way binding with HTML form elements like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. However, no native HTML element follows the &lt;code&gt;x&lt;/code&gt; value and &lt;code&gt;xChange&lt;/code&gt; event pattern.</source>
          <target state="translated">与单独的属性和事件绑定相比，双向绑定语法非常方便。将双向绑定与HTML表单元素（例如 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; )一起使用会很方便。但是，没有原生HTML元素遵循 &lt;code&gt;x&lt;/code&gt; 值和 &lt;code&gt;xChange&lt;/code&gt; 事件模式。</target>
        </trans-unit>
        <trans-unit id="552f44eabf3bee5b16dbbe6d805c5e4727da9fe7" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is really just syntactic sugar for a &lt;em&gt;property&lt;/em&gt; binding and an &lt;em&gt;event&lt;/em&gt; binding. Angular desugars the &lt;code&gt;SizerComponent&lt;/code&gt; binding into this:</source>
          <target state="translated">双向绑定语法实际上只是&lt;em&gt;属性&lt;/em&gt;绑定和&lt;em&gt;事件&lt;/em&gt;绑定的语法糖。角度将 &lt;code&gt;SizerComponent&lt;/code&gt; 绑定到其中：</target>
        </trans-unit>
        <trans-unit id="6513ae7688b62a5255ebc4d625abc9be33526ee7" translate="yes" xml:space="preserve">
          <source>The type checker also throws an error if it can't determine whether a variable will be &lt;code&gt;null&lt;/code&gt; or undefined at runtime. You tell the type checker not to throw an error by applying the postfix &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;non-null assertion operator, !&lt;/a&gt;.</source>
          <target state="translated">如果类型检查器无法确定变量在运行时是 &lt;code&gt;null&lt;/code&gt; 还是未定义，则它还会引发错误。您通过应用后缀&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;非空断言运算符！&lt;/a&gt;来告诉类型检查器不要抛出错误！。</target>
        </trans-unit>
        <trans-unit id="81dce0b481d7ac34dd874fc96a0c29f5d10a16ae" translate="yes" xml:space="preserve">
          <source>The type of budget. One of:</source>
          <target state="translated">预算的类型。其中:</target>
        </trans-unit>
        <trans-unit id="c15292902555eb7a2059d3f203806ac34a995f12" translate="yes" xml:space="preserve">
          <source>The type of component the factory will create.</source>
          <target state="translated">工厂将创建的组件类型。</target>
        </trans-unit>
        <trans-unit id="7c0884d61dcbf36812f4f429d57a3fd536285ae5" translate="yes" xml:space="preserve">
          <source>The type of numeric value to be formatted (such as &lt;code&gt;Decimal&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">要格式化的数值类型（例如 &lt;code&gt;Decimal&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="1914de4f10fd251ed62f048b8948f40fc99532fb" translate="yes" xml:space="preserve">
          <source>The type of object that &lt;a href=&quot;viewchildren&quot;&gt;&lt;code&gt;ViewChildren&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;contentchildren&quot;&gt;&lt;code&gt;ContentChildren&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;querylist&quot;&gt;&lt;code&gt;QueryList&lt;/code&gt;&lt;/a&gt; provide.</source>
          <target state="translated">&lt;a href=&quot;viewchildren&quot;&gt; &lt;code&gt;ViewChildren&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;contentchildren&quot;&gt; &lt;code&gt;ContentChildren&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;querylist&quot;&gt; &lt;code&gt;QueryList&lt;/code&gt; &lt;/a&gt;提供的对象的类型。</target>
        </trans-unit>
        <trans-unit id="2cee06caf5b085e8040bc4dd74a44cf2669ac0d4" translate="yes" xml:space="preserve">
          <source>The type of this component (as created by a &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; class).</source>
          <target state="translated">该组件的类型（由 &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 类创建）。</target>
        </trans-unit>
        <trans-unit id="351e662a9168935a10d637a721b52c3db93d0b18" translate="yes" xml:space="preserve">
          <source>The type parameter, &lt;code&gt;T&lt;/code&gt;, is the kind of metadata you'd pass to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator:</source>
          <target state="translated">类型参数 &lt;code&gt;T&lt;/code&gt; 是您要传递给 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 装饰器的元数据类型：</target>
        </trans-unit>
        <trans-unit id="92e0731044a01c861010ac8dd3364de0bab42484" translate="yes" xml:space="preserve">
          <source>The type parameter, while optional, conveys the dependency's type to developers and tooling. The token description is another developer aid.</source>
          <target state="translated">类型参数虽然是可选的,但它向开发者和工具传递了依赖的类型。令牌描述是另一种开发者辅助工具。</target>
        </trans-unit>
        <trans-unit id="fdab28b804a5bc2df8ed953cd182dcd879bebcd0" translate="yes" xml:space="preserve">
          <source>The underlying native element or &lt;code&gt;null&lt;/code&gt; if direct access to native elements is not supported (e.g. when the application runs in a web worker).</source>
          <target state="translated">基础本机元素；如果不支持直接访问本机元素（例如，当应用程序在Web Worker中运行时），则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9fb3d4a522a7d59fc653358ee450cd39cd54d77" translate="yes" xml:space="preserve">
          <source>The unit test files themselves also need to be switched to Angular when their production counterparts are switched. The specs for the checkmark pipe are probably the most straightforward, as the pipe has no dependencies:</source>
          <target state="translated">单元测试文件本身在切换到生产对应文件时,也需要切换到Angular。Checkmark管道的规范可能是最直接的,因为管道没有依赖关系。</target>
        </trans-unit>
        <trans-unit id="7b843cdeff59d7337d09dffec8474c659f368f17" translate="yes" xml:space="preserve">
          <source>The unit test for the phone service is a bit more involved. You need to switch from the mocked-out AngularJS &lt;code&gt;$httpBackend&lt;/code&gt; to a mocked-out Angular Http backend.</source>
          <target state="translated">电话服务的单元测试涉及更多。您需要从模拟的AngularJS &lt;code&gt;$httpBackend&lt;/code&gt; 到模拟的Angular Http后端。</target>
        </trans-unit>
        <trans-unit id="789acab94f4da6bd1b31fd8d53475bbe9758d87a" translate="yes" xml:space="preserve">
          <source>The updated &lt;code&gt;HeroesRoutingModule&lt;/code&gt; looks like this:</source>
          <target state="translated">更新后的 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 如下所示：</target>
        </trans-unit>
        <trans-unit id="987de19a86a67d115685949783bff6fddad8b8ee" translate="yes" xml:space="preserve">
          <source>The upgrade NgModule.</source>
          <target state="translated">升级后的NgModule。</target>
        </trans-unit>
        <trans-unit id="d44b088804cbf01923d7400df118887612abd201" translate="yes" xml:space="preserve">
          <source>The url from which this snapshot was created</source>
          <target state="translated">创建该快照的网址</target>
        </trans-unit>
        <trans-unit id="0ee83b79b718d1a4ec36d1b3d58ebe726ac3e494" translate="yes" xml:space="preserve">
          <source>The url serialization strategy is customizable. You can make all URLs case insensitive by providing a custom UrlSerializer.</source>
          <target state="translated">url序列化策略是可定制的。你可以通过提供一个自定义的UrlSerializer使所有的URL不区分大小写。</target>
        </trans-unit>
        <trans-unit id="ad97874a0022a010e0155677ec6967027c4314b9" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;name&lt;/code&gt; attributes for validation and form-element change tracking.</source>
          <target state="translated">使用 &lt;code&gt;name&lt;/code&gt; 属性进行验证和表单元素更改跟踪。</target>
        </trans-unit>
        <trans-unit id="9154043e44b5d932b8c61e6a2f25ebf4ef5aea92" translate="yes" xml:space="preserve">
          <source>The user calls the &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; method, which updates the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">用户调用 &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; 方法，该方法将更新 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="0a5976d96dbc10bd55988a4a489b75fc9937bde4" translate="yes" xml:space="preserve">
          <source>The user can select a hero and see that hero's details.</source>
          <target state="translated">用户可以选择一个英雄并查看该英雄的详细信息。</target>
        </trans-unit>
        <trans-unit id="aa661a59e3356526e5cd2452506236a954f28c3e" translate="yes" xml:space="preserve">
          <source>The user needs a way to open the popup. Open the &lt;code&gt;AppComponent&lt;/code&gt; and add a &quot;Contact&quot; link.</source>
          <target state="translated">用户需要一种方法来打开弹出窗口。打开 &lt;code&gt;AppComponent&lt;/code&gt; 并添加&amp;ldquo;联系人&amp;rdquo;链接。</target>
        </trans-unit>
        <trans-unit id="369264e6d1f498d1106a6d3877d3ee5e43560ae5" translate="yes" xml:space="preserve">
          <source>The user should be able to get to these details in three ways.</source>
          <target state="translated">用户应该能够通过三种方式获得这些细节。</target>
        </trans-unit>
        <trans-unit id="bbafb9f9e9d3caf33087f60e1818944be5dd3d9b" translate="yes" xml:space="preserve">
          <source>The user should be able to navigate back and forth between the &lt;code&gt;DashboardComponent&lt;/code&gt; and the &lt;code&gt;HeroesComponent&lt;/code&gt; by clicking links in the navigation area near the top of the page.</source>
          <target state="translated">通过单击页面顶部附近导航区域中的链接，用户应该能够在 &lt;code&gt;DashboardComponent&lt;/code&gt; 和 &lt;code&gt;HeroesComponent&lt;/code&gt; 之间来回导航。</target>
        </trans-unit>
        <trans-unit id="e9cc50a2572132b6fe866bbf0976206cd31bec89" translate="yes" xml:space="preserve">
          <source>The user should be able to submit this form after filling it in. The &lt;em&gt;Submit&lt;/em&gt; button at the bottom of the form does nothing on its own, but it will trigger a form submit because of its type (&lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;).</source>
          <target state="translated">用户填写后应该能够提交该表单。表单底部的&lt;em&gt;Submit&lt;/em&gt;按钮本身不会执行任何操作，但是由于其类型（ &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; ），它将触发表单提交。</target>
        </trans-unit>
        <trans-unit id="01ba075c2899372b1eb9a9b167514bce8549789e" translate="yes" xml:space="preserve">
          <source>The user types &lt;em&gt;Blue&lt;/em&gt; into the input element.</source>
          <target state="translated">用户在输入元素中输入&lt;em&gt;Blue&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="746db581b79b8e44db4102f1f4a9027db5fb21fd" translate="yes" xml:space="preserve">
          <source>The user types a value into the input element, in this case the favorite color &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">用户在输入元素中输入一个值，在这种情况下为喜欢的颜色&lt;em&gt;Blue&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0f5eade11b7a8a4872382f56342ccc7dae30caf1" translate="yes" xml:space="preserve">
          <source>The validation status of the control. There are four possible validation status values:</source>
          <target state="translated">控件的验证状态。有四个可能的验证状态值。</target>
        </trans-unit>
        <trans-unit id="98b77f9877456963068b672348f174d66942c7cb" translate="yes" xml:space="preserve">
          <source>The validation uses the TypeScript type checker and the options supplied to the TypeScript compiler to control how detailed the type validation is. For example, if the &lt;code&gt;strictTypeChecks&lt;/code&gt; is specified, the error &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; is reported as well as the above error message.</source>
          <target state="translated">验证使用TypeScript类型检查器和提供给TypeScript编译器的选项来控制类型验证的详细程度。例如，如果指定了 &lt;code&gt;strictTypeChecks&lt;/code&gt; ，则会报告错误 &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; 以及上述错误消息。</target>
        </trans-unit>
        <trans-unit id="0d21ce6b8675f7d9e43afcf309b4fddb296bc7b1" translate="yes" xml:space="preserve">
          <source>The validator code is as follows:</source>
          <target state="translated">验证器代码如下:</target>
        </trans-unit>
        <trans-unit id="e446494ebae458b5aea2681dfd535005a9fb5001" translate="yes" xml:space="preserve">
          <source>The value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ab44397f0e829c1263e8d41c48f13f570826c7" translate="yes" xml:space="preserve">
          <source>The value accessor for the control</source>
          <target state="translated">控制的值存取器</target>
        </trans-unit>
        <trans-unit id="516bd69561122628d42ad25e8281d2c0a9abe779" translate="yes" xml:space="preserve">
          <source>The value for each day of the week, based on the &lt;code&gt;en-US&lt;/code&gt; locale</source>
          <target state="translated">一周中每一天的值（基于 &lt;code&gt;en-US&lt;/code&gt; 语言环境）</target>
        </trans-unit>
        <trans-unit id="c2748ca458055ddfd5db76827b1b28c8b741c19c" translate="yes" xml:space="preserve">
          <source>The value is the statement to execute when the event occurs. If the statement evaluates to &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;preventDefault&lt;/code&gt; is applied on the DOM event. A handler method can refer to the &lt;code&gt;$event&lt;/code&gt; local variable.</source>
          <target state="translated">该值是事件发生时要执行的语句。如果该语句的评估结果为 &lt;code&gt;false&lt;/code&gt; ，则对DOM事件应用 &lt;code&gt;preventDefault&lt;/code&gt; 。处理程序方法可以引用 &lt;code&gt;$event&lt;/code&gt; 局部变量。</target>
        </trans-unit>
        <trans-unit id="a8273c4bd416c41f6f045c126981755bb55c2fa6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; has the &lt;code&gt;any&lt;/code&gt; type. Later you'll encounter the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; and it too has the &lt;code&gt;any&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; 的值具有 &lt;code&gt;any&lt;/code&gt; 类型。稍后您将遇到 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; ，它也具有 &lt;code&gt;any&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="0ad903e2fa7af996e920297f63f7b7748e6d5872" translate="yes" xml:space="preserve">
          <source>The value of &lt;em&gt;settingOrProject&lt;/em&gt; is one of the following.</source>
          <target state="translated">&lt;em&gt;settingOrProject&lt;/em&gt;的值是以下值之一。</target>
        </trans-unit>
        <trans-unit id="74c4007c0c9568fe1d9f263c845a7b9cdffe9674" translate="yes" xml:space="preserve">
          <source>The value of a &lt;em&gt;value provider&lt;/em&gt; must be defined before you specify it here. The title string literal is immediately available. The &lt;code&gt;someHero&lt;/code&gt; variable in this example was set earlier in the file as shown below. You can't use a variable whose value will be defined later.</source>
          <target state="translated">在此处指定&lt;em&gt;值提供者&lt;/em&gt;之前，必须先定义它。标题字符串文字立即可用。如下所示，本示例中的 &lt;code&gt;someHero&lt;/code&gt; 变量已在文件中进行了更早的设置。您不能使用稍后将定义其值的变量。</target>
        </trans-unit>
        <trans-unit id="9e40077c9021d6667f8d32f6871c8f00bc068d9d" translate="yes" xml:space="preserve">
          <source>The value of the iterable expression, which can be used as a &lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;template input variable&lt;/a&gt;.</source>
          <target state="translated">可迭代表达式的值，可以将其用作&lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;模板输入变量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e5b7782babd6cd47ebb1077395fdc52934d8acaf" translate="yes" xml:space="preserve">
          <source>The value or values to delete for the given header.</source>
          <target state="translated">对于给定的头,要删除的值。</target>
        </trans-unit>
        <trans-unit id="c3a47c38e67f33789b5fcdb66f3ebef0b8ae5f17" translate="yes" xml:space="preserve">
          <source>The value or values to set or overide for the given header.</source>
          <target state="translated">要为给定的头设置或覆盖的值。</target>
        </trans-unit>
        <trans-unit id="2b048ad41afe70b72be36c6e88e6bdc321667a94" translate="yes" xml:space="preserve">
          <source>The value to emit.</source>
          <target state="translated">要发出的数值。</target>
        </trans-unit>
        <trans-unit id="1d37da7064bd8c9a2adb3a8365e6b179578a33bb" translate="yes" xml:space="preserve">
          <source>The value to inject.</source>
          <target state="translated">要注入的数值。</target>
        </trans-unit>
        <trans-unit id="965b65af75152cd8483b194aca89f3d4a3563d3b" translate="yes" xml:space="preserve">
          <source>The value to remove, if provided.</source>
          <target state="translated">要删除的值,如果提供的话。</target>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes" xml:space="preserve">
          <source>The value.</source>
          <target state="translated">价值。</target>
        </trans-unit>
        <trans-unit id="752b8837b88dbea5e1b07283811801b832bbf900" translate="yes" xml:space="preserve">
          <source>The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only boolean, number, string, null and non-class objects will be serialized and deserialzied in a non-lossy manner.</source>
          <target state="translated">存储器中的值使用JSON.stringify/JSON.parse进行序列化/反序列化。因此,只有布尔、数字、字符串、null和非类对象才会以无损的方式被序列化和反序列化。</target>
        </trans-unit>
        <trans-unit id="52ff44818e20f7220d3cd6a6457d439574feaba5" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;heroForm&lt;/code&gt; is now a reference to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive that governs the form as a whole.</source>
          <target state="translated">变量 &lt;code&gt;heroForm&lt;/code&gt; 现在是对 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令的引用，该指令控制整个窗体。</target>
        </trans-unit>
        <trans-unit id="3f524c06d92d1f81ab05583d4d275b72aa86fd3a" translate="yes" xml:space="preserve">
          <source>The version identifier of the app is determined by the contents of all resources, and it changes if any of them change. In practice, the version is determined by the contents of the &lt;code&gt;ngsw.json&lt;/code&gt; file, which includes hashes for all known content. If any of the cached files change, the file's hash will change in &lt;code&gt;ngsw.json&lt;/code&gt;, causing the Angular service worker to treat the active set of files as a new version.</source>
          <target state="translated">应用程序的版本标识符由所有资源的内容确定，如果其中任何一个发生更改，它就会更改。实际上，版本由 &lt;code&gt;ngsw.json&lt;/code&gt; 文件的内容确定，其中包括所有已知内容的哈希值。如果任何缓存的文件发生更改，则 &lt;code&gt;ngsw.json&lt;/code&gt; 中的文件哈希将发生更改，从而导致Angular服务工作人员将活动文件集视为新版本。</target>
        </trans-unit>
        <trans-unit id="61010f814fd314444171513bbb7090fb2e7c56e3" translate="yes" xml:space="preserve">
          <source>The version number is incremented based on the level of change included in the release.</source>
          <target state="translated">版本号根据版本中包含的变化程度而递增。</target>
        </trans-unit>
        <trans-unit id="a40aa756483f3a5f523498855f5257b57156b5a8" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the initial project.</source>
          <target state="translated">在初始项目中要使用的视图封装策略。</target>
        </trans-unit>
        <trans-unit id="fa51a23f655a6d3d42ddb64f7327a8e642728256" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the new app.</source>
          <target state="translated">新应用中要使用的视图封装策略。</target>
        </trans-unit>
        <trans-unit id="fcf377037a7d42bc71c7f002d89b4f46b0d68cfa" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the new component.</source>
          <target state="translated">新组件中要使用的视图封装策略。</target>
        </trans-unit>
        <trans-unit id="3f5b538e2927dd6de153329e296a74a421bc0c36" translate="yes" xml:space="preserve">
          <source>The view encapsulation type, which determines how styles are applied to DOM elements. One of</source>
          <target state="translated">视图封装类型,它决定了如何将样式应用于DOM元素。其中的</target>
        </trans-unit>
        <trans-unit id="52604a8e00ae2362f799cae913f8150372948692" translate="yes" xml:space="preserve">
          <source>The view hierarchy doesn't imply a component hierarchy. Views that are embedded in the context of a particular hierarchy can be host views of other components. Those components can be in the same NgModule as the hosting component, or belong to other NgModules.</source>
          <target state="translated">视图层次结构并不意味着组件层次结构。嵌入特定层次结构上下文中的视图可以是其他组件的宿主视图。这些组件可以和宿主组件在同一个NgModule中,也可以属于其他NgModule。</target>
        </trans-unit>
        <trans-unit id="c7838a7b8c734a7282cb30df6d8616064238194b" translate="yes" xml:space="preserve">
          <source>The view to insert.</source>
          <target state="translated">要插入的视图。</target>
        </trans-unit>
        <trans-unit id="4ea024c3fe94500d702337f77198fe17d570e08e" translate="yes" xml:space="preserve">
          <source>The view to move.</source>
          <target state="translated">的观点,以动。</target>
        </trans-unit>
        <trans-unit id="64ae54575a804f27c02ce687200e683460668cdb" translate="yes" xml:space="preserve">
          <source>The view to query.</source>
          <target state="translated">要查询的视图。</target>
        </trans-unit>
        <trans-unit id="f7eca5f51435a85c65dffa7d0a3287d518cfc6d9" translate="yes" xml:space="preserve">
          <source>The virtual file system is represented by a &lt;code&gt;Tree&lt;/code&gt;. The &lt;code&gt;Tree&lt;/code&gt; data structure contains a &lt;em&gt;base&lt;/em&gt; (a set of files that already exists) and a &lt;em&gt;staging area&lt;/em&gt; (a list of changes to be applied to the base). When making modifications, you don't actually change the base, but add those modifications to the staging area.</source>
          <target state="translated">虚拟文件系统由 &lt;code&gt;Tree&lt;/code&gt; 表示。的 &lt;code&gt;Tree&lt;/code&gt; 数据结构包含一个&lt;em&gt;基座&lt;/em&gt;（一组已存在的文件）和一个&lt;em&gt;分段区域&lt;/em&gt;（更改列表要被施加到基）。进行修改时，您实际上并没有更改基准，而是将这些修改添加到登台区域。</target>
        </trans-unit>
        <trans-unit id="2cefd7f9cff91ac8ee2cb82756abed3d99ad82ad" translate="yes" xml:space="preserve">
          <source>The web is used by a wide variety of people, including those who have visual or motor impairments. A variety of assistive technologies are available that make it much easier for these groups to interact with web-based software applications. In addition, designing an application to be more accessible generally improves the user experience for all users.</source>
          <target state="translated">各种各样的人都在使用网络,包括有视觉或运动障碍的人。现在有各种辅助技术,使这些群体更容易与网络软件应用程序互动。此外,将应用程序设计得更加无障碍,通常可以改善所有用户的用户体验。</target>
        </trans-unit>
        <trans-unit id="0870b1ddd7a401e28edca7748851260cf0d812b1" translate="yes" xml:space="preserve">
          <source>The web server must distinguish &lt;em&gt;app page requests&lt;/em&gt; from other kinds of requests.</source>
          <target state="translated">Web服务器必须将&lt;em&gt;应用程序页面请求&lt;/em&gt;与其他类型的请求区分开。</target>
        </trans-unit>
        <trans-unit id="3bcd56955050ccb3584a4da36608073e9ca82456" translate="yes" xml:space="preserve">
          <source>The wildcard state &lt;code&gt;*&lt;/code&gt; matches to &lt;em&gt;any&lt;/em&gt; state, including &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">通配符状态 &lt;code&gt;*&lt;/code&gt; 匹配&lt;em&gt;任何&lt;/em&gt;状态，包括 &lt;code&gt;void&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdfa623802e57793c0a1db6ff9d61453c796514c" translate="yes" xml:space="preserve">
          <source>The word &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; in the interpolation binding, right after the pipe operator ( | ), activates the built-in &lt;code&gt;UppercasePipe&lt;/code&gt;.</source>
          <target state="translated">插值绑定中的 &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; 单词紧接在管道运算符（|）之后，激活内置的 &lt;code&gt;UppercasePipe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b02e653c1a608596d35a7fd022b60a7182b55381" translate="yes" xml:space="preserve">
          <source>The wording of each guideline indicates how strong the recommendation is.</source>
          <target state="translated">每条准则的措辞表明了建议的力度。</target>
        </trans-unit>
        <trans-unit id="7c860c7e7f5c46dabbf52c5dc7a52a91bc246694" translate="yes" xml:space="preserve">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you add Angular assets to the &lt;code&gt;angular.module&lt;/code&gt; property. In Angular, you create one or more classes adorned with an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator that describes Angular assets in metadata. The differences blossom from there.</source>
          <target state="translated">它们的细节在体系结构和实现上完全不同。在AngularJS中，将Angular资产添加到 &lt;code&gt;angular.module&lt;/code&gt; 属性。在Angular中，您可以创建一个或多个用 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器修饰的类，该装饰器描述元数据中的Angular资产。差异从那里开始。</target>
        </trans-unit>
        <trans-unit id="1c9f03dfa8dacad02e2c3ca38cbf5ee7fdadd4d0" translate="yes" xml:space="preserve">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you create a module by specifying its name and dependencies with &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module()&lt;/a&gt;. Then you can add assets using its various methods. In Angular, you create a class adorned with an &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt; decorator that describes assets in metadata.</source>
          <target state="translated">它们的细节在体系结构和实现上完全不同。在AngularJS中，通过使用&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module（）&lt;/a&gt;指定模块的名称和依赖关系来创建模块。然后，您可以使用其各种方法添加资产。在Angular中，您将创建一个用&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;装饰器修饰的类，该装饰器描述元数据中的资产。</target>
        </trans-unit>
        <trans-unit id="4a746b75626a8bf1b8d141962d550672ee26a9a0" translate="yes" xml:space="preserve">
          <source>Then Angular calls the &lt;code&gt;ngAfterViewInit&lt;/code&gt; lifecycle hook at which time it is &lt;em&gt;too late&lt;/em&gt; to update the parent view's display of the countdown seconds. Angular's unidirectional data flow rule prevents updating the parent view's in the same cycle. The app has to &lt;em&gt;wait one turn&lt;/em&gt; before it can display the seconds.</source>
          <target state="translated">然后，Angular调用 &lt;code&gt;ngAfterViewInit&lt;/code&gt; 生命周期挂钩，此时更新父视图的倒数秒显示&lt;em&gt;为时已晚&lt;/em&gt;。 Angular的单向数据流规则阻止在同一周期中更新父视图。该应用程序必须&lt;em&gt;等待一转&lt;/em&gt;才能显示秒数。</target>
        </trans-unit>
        <trans-unit id="dbecf897d73ac2b6641e82fba7920890079f1124" translate="yes" xml:space="preserve">
          <source>Then add &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata's &lt;code&gt;imports&lt;/code&gt; array, which contains a list of external modules that the app needs.</source>
          <target state="translated">然后将 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据的 &lt;code&gt;imports&lt;/code&gt; 数组，该数组包含应用程序需要的外部模块的列表。</target>
        </trans-unit>
        <trans-unit id="302c6ab52d600acc4553bea66d084dd5f7f37330" translate="yes" xml:space="preserve">
          <source>Then add a &lt;em&gt;parameterized&lt;/em&gt; route to the &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; array that matches the path pattern to the &lt;em&gt;hero detail&lt;/em&gt; view.</source>
          <target state="translated">然后将&lt;em&gt;参数化的&lt;/em&gt;路线添加到 &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; 数组中，该路线将路径图案与&lt;em&gt;英雄详细信息&lt;/em&gt;视图匹配。</target>
        </trans-unit>
        <trans-unit id="7087a31795c1cc6622e1648ea10337e6e7796752" translate="yes" xml:space="preserve">
          <source>Then add it to the &lt;code&gt;providers&lt;/code&gt; array of the testing module configuration:</source>
          <target state="translated">然后将其添加到测试模块配置的 &lt;code&gt;providers&lt;/code&gt; 数组中：</target>
        </trans-unit>
        <trans-unit id="476c63ff60da4bb61e86cb5f4efd206fa03aa9dc" translate="yes" xml:space="preserve">
          <source>Then add the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; and continue with the setup of the &lt;em&gt;service-under-test&lt;/em&gt;.</source>
          <target state="translated">然后将 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; ,然后继续进行&lt;em&gt;被测服务&lt;/em&gt;的设置。</target>
        </trans-unit>
        <trans-unit id="1bfa821c841240ffbf8adf699d29a6b8346ac678" translate="yes" xml:space="preserve">
          <source>Then add two event handlers that respond when the mouse enters or leaves, each adorned by the &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">然后添加两个事件处理程序，它们在鼠标进入或离开时作出响应，每个事件处理程序都由 &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 装饰器修饰。</target>
        </trans-unit>
        <trans-unit id="2077cb3e1b43eb4d0aa0bdfb4e87ddd6fe05d012" translate="yes" xml:space="preserve">
          <source>Then change &lt;code&gt;main-aot.ts&lt;/code&gt; to bootstrap the &lt;code&gt;AppComponentFactory&lt;/code&gt; that was generated by the AOT compiler:</source>
          <target state="translated">然后更改 &lt;code&gt;main-aot.ts&lt;/code&gt; 以引导由AOT编译器生成的 &lt;code&gt;AppComponentFactory&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8f98a3b01b00f3cdc0645e1bb016df36002ccc41" translate="yes" xml:space="preserve">
          <source>Then create some HTML to try it.</source>
          <target state="translated">然后创建一些HTML来尝试。</target>
        </trans-unit>
        <trans-unit id="ed0c20efaf787e9c5968245911ff8d07f8f0da7a" translate="yes" xml:space="preserve">
          <source>Then declare them in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration next to the components, directives, and pipes that need to be real.</source>
          <target state="translated">然后在需要真实存在的组件，指令和管道旁边的 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 配置中声明它们。</target>
        </trans-unit>
        <trans-unit id="e412dc563abd459ce251cf7cfccd9f863136e63b" translate="yes" xml:space="preserve">
          <source>Then each test invokes &lt;code&gt;setup()&lt;/code&gt; in its first line, before continuing with steps that manipulate the test subject and assert expectations.</source>
          <target state="translated">然后，每个测试将在其第一行中调用 &lt;code&gt;setup()&lt;/code&gt; ，然后继续进行操作测试对象并声明期望的步骤。</target>
        </trans-unit>
        <trans-unit id="150a9555cd5004b3999517db04d6f79faab05564" translate="yes" xml:space="preserve">
          <source>Then exercise the component class, remembering to call the &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hook methods&lt;/a&gt; as Angular does when running the app.</source>
          <target state="translated">然后练习组件类，记住要像运行应用程序时Angular那样调用&lt;a href=&quot;lifecycle-hooks&quot;&gt;生命周期挂钩方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb4a68d7b2f52dce99079de606d30ebaa5bb531f" translate="yes" xml:space="preserve">
          <source>Then go to &lt;code&gt;localhost:4200&lt;/code&gt; where you should see &amp;ldquo;app works!&amp;rdquo; and three buttons.</source>
          <target state="translated">然后转到 &lt;code&gt;localhost:4200&lt;/code&gt; ，您应该在其中看到&amp;ldquo;应用程序有效！&amp;rdquo; 和三个按钮。</target>
        </trans-unit>
        <trans-unit id="38933987a79b6e0405d4682b79b28629cbf06cda" translate="yes" xml:space="preserve">
          <source>Then import and add it to the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;providers array&lt;/em&gt; like this:</source>
          <target state="translated">然后将其导入并添加到 &lt;code&gt;AppModule&lt;/code&gt; &lt;em&gt;provider数组中，&lt;/em&gt;如下所示：</target>
        </trans-unit>
        <trans-unit id="ba51c703735b0a9ca10a1f38c791fa66ebf4dc99" translate="yes" xml:space="preserve">
          <source>Then inject &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; into your Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; and use it to bootstrap the top level &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJS module&lt;/a&gt; in the &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method.</source>
          <target state="translated">然后将 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 注入到Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 中,并使用它在 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 方法中引导顶级&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJS模块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea80e24f31be172808e0a76630ab02df1fbba4cf" translate="yes" xml:space="preserve">
          <source>Then inject it inside a test by calling &lt;code&gt;TestBed.get()&lt;/code&gt; with the service class as the argument.</source>
          <target state="translated">然后通过使用服务类作为参数调用 &lt;code&gt;TestBed.get()&lt;/code&gt; 将其注入测试。</target>
        </trans-unit>
        <trans-unit id="ed47e3226a89095f74e2f4a490e662cccb0ebbc0" translate="yes" xml:space="preserve">
          <source>Then modify the &lt;code&gt;app.component.ts&lt;/code&gt; file by changing the template and the body of the component.</source>
          <target state="translated">然后通过更改模板和组件主体来修改 &lt;code&gt;app.component.ts&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="8f2ea7f19a02db5f1bb037406ad378d2b4d2753b" translate="yes" xml:space="preserve">
          <source>Then provide and inject &lt;em&gt;both the&lt;/em&gt;&lt;strong&gt;component&lt;/strong&gt;&lt;em&gt;and the service&lt;/em&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration.</source>
          <target state="translated">然后提供并注入&lt;em&gt;两&lt;/em&gt;&lt;strong&gt;分量&lt;/strong&gt;&lt;em&gt;和服务&lt;/em&gt;在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 配置。</target>
        </trans-unit>
        <trans-unit id="6575d9ffd1443fafb383b5f99065fc07d42c1e8a" translate="yes" xml:space="preserve">
          <source>Then provide the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; in the main module:</source>
          <target state="translated">然后在主模块中提供 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5cd36815d6513b0d19bf87503dfe0afab93f9fa9" translate="yes" xml:space="preserve">
          <source>Then reload with &lt;code&gt;Cmd+r&lt;/code&gt; or &lt;code&gt;Ctrl+r&lt;/code&gt;, depending on your platform.</source>
          <target state="translated">然后根据您的平台使用 &lt;code&gt;Cmd+r&lt;/code&gt; 或 &lt;code&gt;Ctrl+r&lt;/code&gt; 重新加载。</target>
        </trans-unit>
        <trans-unit id="62acde2949df74c80c6b969effb470f5543854f7" translate="yes" xml:space="preserve">
          <source>Then the following link &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; will generate the link &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt;.</source>
          <target state="translated">然后下面的链接 &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 将生成的链接 &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31a24e38017cc0ca331b2c164af11448fb71f88f" translate="yes" xml:space="preserve">
          <source>Then use the service inside your component by injecting it in the component constructor using its class as a type annotation:</source>
          <target state="translated">然后通过在组件构造函数中使用它的类作为类型注解来在组件中使用服务。</target>
        </trans-unit>
        <trans-unit id="3d28664e3228d12b67d0ad4e11b39b8bfa234399" translate="yes" xml:space="preserve">
          <source>Then you can assert that the quote element displays the expected text.</source>
          <target state="translated">然后你可以断言引号元素显示的是预期的文本。</target>
        </trans-unit>
        <trans-unit id="fb5aa1a656847347c6ad33e809979b893a2a0af1" translate="yes" xml:space="preserve">
          <source>Then you can use the &quot;upgraded&quot; AngularJS service by injecting it into an Angular component or service.</source>
          <target state="translated">然后,你可以通过将 &quot;升级 &quot;的AngularJS服务注入到Angular组件或服务中来使用它。</target>
        </trans-unit>
        <trans-unit id="7235d5f78eb3fc75c9de23a894249dff7395ce21" translate="yes" xml:space="preserve">
          <source>Then you create a child component (B) that defines its own, &lt;em&gt;specialized&lt;/em&gt; providers for &lt;code&gt;CarService&lt;/code&gt; and &lt;code&gt;EngineService&lt;/code&gt; that have special capabilities suitable for whatever is going on in component (B).</source>
          <target state="translated">然后创建定义了自己，一个子组件（B），&lt;em&gt;专门&lt;/em&gt;为供应商 &lt;code&gt;CarService&lt;/code&gt; 和 &lt;code&gt;EngineService&lt;/code&gt; 有适合无论是在成分（B）要去的特殊能力。</target>
        </trans-unit>
        <trans-unit id="13b7250037e2791c30d8b2b60220889c166804a2" translate="yes" xml:space="preserve">
          <source>Then you inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;HeroListComponent&lt;/code&gt; constructor.</source>
          <target state="translated">然后，在 &lt;code&gt;HeroListComponent&lt;/code&gt; 构造函数中注入 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06b87cc1eeb739adae3341e69733b9a6c335c899" translate="yes" xml:space="preserve">
          <source>Then you should define an Angular provider to be included in your &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; property.</source>
          <target state="translated">然后，您应该定义一个Angular提供程序以包含在 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; 属性中。</target>
        </trans-unit>
        <trans-unit id="3996f4d02c86b0214c6856fbd020c552536ef23e" translate="yes" xml:space="preserve">
          <source>Then you tell the &lt;code&gt;HeroService&lt;/code&gt; to fetch the hero with that &lt;code&gt;id&lt;/code&gt; and return the result of the &lt;code&gt;HeroService&lt;/code&gt; request.</source>
          <target state="translated">然后，您告诉 &lt;code&gt;HeroService&lt;/code&gt; 使用该 &lt;code&gt;id&lt;/code&gt; 提取英雄，并返回 &lt;code&gt;HeroService&lt;/code&gt; 请求的结果。</target>
        </trans-unit>
        <trans-unit id="ed06e960c3c34ee183cdb9c0a6a2a5d5f20a03f6" translate="yes" xml:space="preserve">
          <source>Then, another animation can be called when the current animation finishes. For example, the button goes from the &lt;code&gt;inProgress&lt;/code&gt; state to the &lt;code&gt;closed&lt;/code&gt; state when the API call is completed.</source>
          <target state="translated">然后，当当前动画结束时可以调用另一个动画。例如，按钮从去 &lt;code&gt;inProgress&lt;/code&gt; 状态为 &lt;code&gt;closed&lt;/code&gt; 状态完成API调用时。</target>
        </trans-unit>
        <trans-unit id="edf82d0382f477967edce3fb6b12681334c96dc8" translate="yes" xml:space="preserve">
          <source>Then, when some component injects &lt;code&gt;UserService&lt;/code&gt;, Angular finds it in the app root injector, and delivers the app-wide singleton service. No problem.</source>
          <target state="translated">然后，当某些组件注入 &lt;code&gt;UserService&lt;/code&gt; 时，Angular在应用程序根注入器中找到它，并提供应用程序范围内的单例服务。没问题。</target>
        </trans-unit>
        <trans-unit id="c3a0ceb7d76985503f10a062c39d4ecc9f73b6e5" translate="yes" xml:space="preserve">
          <source>Then, when you need that file&amp;rsquo;s code in another file, you import it like this:</source>
          <target state="translated">然后，当您在另一个文件中需要该文件的代码时，可以像这样导入它：</target>
        </trans-unit>
        <trans-unit id="7f94783b2fdbdd4b5788239abe980a7f9c2a0feb" translate="yes" xml:space="preserve">
          <source>Then, you change into your library directory to build the schematic</source>
          <target state="translated">然后,你换到你的库目录下建立原理图。</target>
        </trans-unit>
        <trans-unit id="b558f2a5f6c20368ac31efe8ab04dc45d807c8b6" translate="yes" xml:space="preserve">
          <source>There are &lt;em&gt;important differences&lt;/em&gt; in the way the router treats these &lt;em&gt;child routes&lt;/em&gt;.</source>
          <target state="translated">路由器对待这些&lt;em&gt;子路由&lt;/em&gt;的方式存在&lt;em&gt;重要差异&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="566ab24996dda55d07b696f9fcb91995338b7d7a" translate="yes" xml:space="preserve">
          <source>There are a few cases where you give a component an attribute, such as when you want to augment a built-in element. For example, &lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;Material Design&lt;/a&gt; uses this technique with &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt;. However, you wouldn't use this technique on a custom element.</source>
          <target state="translated">在某些情况下，您可以给组件赋予属性，例如，当您想扩展内置元素时。例如，&lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;Material Design&lt;/a&gt;将这种技术与 &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt; 一起使用。但是，您不会在自定义元素上使用此技术。</target>
        </trans-unit>
        <trans-unit id="4a44db3593849baa6fd286f1a9dad3ee4be9f41f" translate="yes" xml:space="preserve">
          <source>There are a few exceptional observables where this is not necessary. The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; observables are among the exceptions.</source>
          <target state="translated">有一些不需要观察的例外观察点。该 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 观测是例外之一。</target>
        </trans-unit>
        <trans-unit id="1e9c60f04e3a15c6ff01e79a5018c059fb20d209" translate="yes" xml:space="preserve">
          <source>There are a few limited reasons why the Angular service worker might change the version of a running app. Some of them are error conditions:</source>
          <target state="translated">Angular服务工作者可能会改变正在运行的应用程序的版本,有几个有限的原因。其中一些是错误条件。</target>
        </trans-unit>
        <trans-unit id="a6013a4fe41dc5c7411d2f89c39f1e20616a17ba" translate="yes" xml:space="preserve">
          <source>There are a few options if you want to get correct types for your custom elements. Let's assume you create a &lt;code&gt;my-dialog&lt;/code&gt; custom element based on the following component:</source>
          <target state="translated">如果要为自定义元素获取正确的类型，则有一些选项。假设您基于以下组件创建 &lt;code&gt;my-dialog&lt;/code&gt; 自定义元素：</target>
        </trans-unit>
        <trans-unit id="3191a1618b8faa99c49daa031fba849003a13bd3" translate="yes" xml:space="preserve">
          <source>There are a few rules in particular that will make it much easier to do &lt;em&gt;an incremental upgrade&lt;/em&gt; using the Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; module:</source>
          <target state="translated">特别是有一些规则可以使使用Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 模块&lt;em&gt;进行增量升级&lt;/em&gt;更加容易：</target>
        </trans-unit>
        <trans-unit id="a01d9115f3a3ad52c673da81193da8c683b0a1c6" translate="yes" xml:space="preserve">
          <source>There are a few things to note, though:</source>
          <target state="translated">不过有几点需要注意。</target>
        </trans-unit>
        <trans-unit id="cdc057156f4a0afc834e3e15f4b4be9942560eb6" translate="yes" xml:space="preserve">
          <source>There are a number of options for modifying the default search behavior, using &lt;em&gt;parameter decorators&lt;/em&gt; on the service-valued parameters of a class constructor.</source>
          <target state="translated">在类构造函数的服务值参数上使用&lt;em&gt;参数修饰符&lt;/em&gt;，可以使用许多选项来修改默认搜索行为。</target>
        </trans-unit>
        <trans-unit id="c676ec6b692f6df001e20a544ca9a4ac7cc35255" translate="yes" xml:space="preserve">
          <source>There are also completions within elements. Any elements you have as a component selector will show up in the completion list.</source>
          <target state="translated">元素中也有补全。任何您作为组件选择器的元素都会显示在完成列表中。</target>
        </trans-unit>
        <trans-unit id="2b0041e80379dba90a5c135457752493c4e52ac4" translate="yes" xml:space="preserve">
          <source>There are configuration files for both the &lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScript test runner&lt;/a&gt; and &lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractor&lt;/a&gt; end-to-end testing tool, which you must adjust to start Chrome without sandboxing.</source>
          <target state="translated">&lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScript测试运行程序&lt;/a&gt;和&lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractor&lt;/a&gt;端到端测试工具都有配置文件，您必须调整这些文件才能启动Chrome，而无需沙盒测试。</target>
        </trans-unit>
        <trans-unit id="8f70e6e9da25ad1b098bbc6719f6c5877729d762" translate="yes" xml:space="preserve">
          <source>There are five general categories of feature modules which tend to fall into the following groups:</source>
          <target state="translated">功能模块一般分为五类,它们往往分为以下几组。</target>
        </trans-unit>
        <trans-unit id="9d24499582f9d74be4e55dfd292e78d548d73a51" translate="yes" xml:space="preserve">
          <source>There are many more interceptors in the complete sample code.</source>
          <target state="translated">在完整的示例代码中,还有很多拦截器。</target>
        </trans-unit>
        <trans-unit id="a08951de0f1de6bd2f6e60bba79ba111ed7ae1d7" translate="yes" xml:space="preserve">
          <source>There are many resources to complement the Angular docs. Mozilla's MDN docs include both &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt; introductions. &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript's docs&lt;/a&gt; include a 5-minute tutorial. Various online course platforms, such as &lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt; and &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, also cover web development basics.</source>
          <target state="translated">有很多资源可以补充Angular文档。Mozilla的MDN文档包括&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt;简介。&lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript的文档&lt;/a&gt;包括一个5分钟的教程。&lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt;和&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;等各种在线课程平台也涵盖了Web开发基础。</target>
        </trans-unit>
        <trans-unit id="66ad0af28f7ac3d95ccbf0739cccfa8af77155a9" translate="yes" xml:space="preserve">
          <source>There are many ways to structure AngularJS applications. When you begin to upgrade these applications to Angular, some will turn out to be much more easy to work with than others. There are a few key techniques and patterns that you can apply to future proof apps even before you begin the migration.</source>
          <target state="translated">AngularJS应用程序的结构有很多方法。当你开始将这些应用程序升级到Angular时,有些会变成比其他应用程序更容易工作。有一些关键的技术和模式,您可以在开始迁移之前就应用于未来证明应用程序。</target>
        </trans-unit>
        <trans-unit id="00d98f0576741a1e108297fca91f90e751881e55" translate="yes" xml:space="preserve">
          <source>There are multiple ways to prevent this:</source>
          <target state="translated">有多种方法可以预防。</target>
        </trans-unit>
        <trans-unit id="ff870a40c32b15241e0dc290ffe99e696ec7e316" translate="yes" xml:space="preserve">
          <source>There are new requirements for the Tour of Heroes app:</source>
          <target state="translated">英雄之旅app有新的要求。</target>
        </trans-unit>
        <trans-unit id="b7c35a18e43689374a55ffc6988124f5f7c095f9" translate="yes" xml:space="preserve">
          <source>There are no easy answers to these questions. Prohibiting multiple structural directives makes them moot. There's an easy solution for this use case: put the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on a container element that wraps the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; element. One or both elements can be an &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;ng-container&lt;/code&gt;&lt;/a&gt; so you don't have to introduce extra levels of HTML.</source>
          <target state="translated">这些问题没有简单的答案。禁止多个结构性指令使它们无济于事。有这种用途的情况下，简单的解决方案：将 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 一个包装容器元素上 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 元素。一个或两个元素都可以是&lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;ng-container&lt;/code&gt; &lt;/a&gt;因此您不必引入额外级别的HTML。</target>
        </trans-unit>
        <trans-unit id="93b4d15b36f576847810650de967eae2da32c1f5" translate="yes" xml:space="preserve">
          <source>There are no parameters for this parent route so you're done with it.</source>
          <target state="translated">这个父路由没有参数,所以你就可以完成了。</target>
        </trans-unit>
        <trans-unit id="fcf8d135851b80ffbe87dcd35d86d4ad22ed02e6" translate="yes" xml:space="preserve">
          <source>There are no parameters.</source>
          <target state="translated">没有参数。</target>
        </trans-unit>
        <trans-unit id="347acdbd61105fadd07872f8156b46696cb3b692" translate="yes" xml:space="preserve">
          <source>There are only two changes. The &lt;code&gt;template&lt;/code&gt; is simply the new element tag identified by the component's &lt;code&gt;selector&lt;/code&gt; property. This displays the hero form when the application component is loaded. Don't forget to remove the &lt;code&gt;name&lt;/code&gt; field from the class body as well.</source>
          <target state="translated">只有两个更改。该 &lt;code&gt;template&lt;/code&gt; 仅仅是由组件标识的新元素标记 &lt;code&gt;selector&lt;/code&gt; 属性。加载应用程序组件时，将显示英雄表格。别忘了从类主体中删除 &lt;code&gt;name&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="159f34be61579ceb6ae8d16ef7ee7eeb786eef01" translate="yes" xml:space="preserve">
          <source>There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others. Although Circle CI and Travis CI are paid services, they are provided free for open source projects. You can create a public project on GitHub and add these services without paying. Contributions to the Angular repo are automatically run through a whole suite of Circle CI tests.</source>
          <target state="translated">有Circle CI和Travis CI这样的付费CI服务,也可以使用Jenkins等免费托管自己的CI服务。虽然Circle CI和Travis CI是付费服务,但它们是免费为开源项目提供的。你可以在GitHub上创建一个公共项目,并添加这些服务而无需付费。对Angular repo的贡献会自动通过一整套Circle CI测试来运行。</target>
        </trans-unit>
        <trans-unit id="879cd324a70c4c96acf893c99d3b9dc84ee024ff" translate="yes" xml:space="preserve">
          <source>There are several examples over the next few sections.</source>
          <target state="translated">接下来的几节有几个例子。</target>
        </trans-unit>
        <trans-unit id="2cf39c6658c13b371aa454d5575113ab2b716d55" translate="yes" xml:space="preserve">
          <source>There are several notable changes here:</source>
          <target state="translated">这里有几个显著的变化。</target>
        </trans-unit>
        <trans-unit id="b3ecb535a2ce87ce6aa9dd8adc9feb06a8b4ddfd" translate="yes" xml:space="preserve">
          <source>There are several ways to add styles to a component:</source>
          <target state="translated">有几种方法可以为一个组件添加样式。</target>
        </trans-unit>
        <trans-unit id="1b266b00929430b0621b4b49767764faeeeeab85" translate="yes" xml:space="preserve">
          <source>There are three categories of directive:</source>
          <target state="translated">指令有三类。</target>
        </trans-unit>
        <trans-unit id="38597e951fad51067690768d9f762544a13ddd71" translate="yes" xml:space="preserve">
          <source>There are three different &lt;em&gt;urgency levels&lt;/em&gt; used to style the alerts based on the severity or importance of the content.</source>
          <target state="translated">根据内容的严重性或重要性，可以使用三种不同的&lt;em&gt;紧急级别&lt;/em&gt;来设置警报样式。</target>
        </trans-unit>
        <trans-unit id="e76077d148cfb3df1507661f67b5067f5ff2d5a6" translate="yes" xml:space="preserve">
          <source>There are three kinds of directives in Angular:</source>
          <target state="translated">Angular中的指令有三种。</target>
        </trans-unit>
        <trans-unit id="25e737b2092b55d9eb5f239e56b9516518d5f446" translate="yes" xml:space="preserve">
          <source>There are three main reasons to create a Universal version of your app.</source>
          <target state="translated">创建一个通用版的应用程序有三个主要原因。</target>
        </trans-unit>
        <trans-unit id="a4f700c6eaa2262317c0d957e29675f3621c94d0" translate="yes" xml:space="preserve">
          <source>There are three main steps to setting up a lazy-loaded feature module:</source>
          <target state="translated">设置一个懒人加载的功能模块主要有三个步骤。</target>
        </trans-unit>
        <trans-unit id="165573f1548a8f99cacaaa3440578c4519f99108" translate="yes" xml:space="preserve">
          <source>There are three phases of AOT compilation.</source>
          <target state="translated">AOT的编制有三个阶段。</target>
        </trans-unit>
        <trans-unit id="ab9b96e090b917419a7b4b07d60725578c370783" translate="yes" xml:space="preserve">
          <source>There are three significant differences from &lt;code&gt;getHeroes()&lt;/code&gt;:</source>
          <target state="translated">与 &lt;code&gt;getHeroes()&lt;/code&gt; 有三个明显的区别：</target>
        </trans-unit>
        <trans-unit id="9dd01b7be4e57b57b1627f79224ce07af7d2d99e" translate="yes" xml:space="preserve">
          <source>There are three supported input types.</source>
          <target state="translated">有三种支持的输入类型。</target>
        </trans-unit>
        <trans-unit id="f5034306f8346e549a24ab826839194a108f3818" translate="yes" xml:space="preserve">
          <source>There are two categories of pipes: &lt;em&gt;pure&lt;/em&gt; and &lt;em&gt;impure&lt;/em&gt;. Pipes are pure by default. Every pipe you've seen so far has been pure. You make a pipe impure by setting its pure flag to false. You could make the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; impure like this:</source>
          <target state="translated">管道分为两类：&lt;em&gt;纯&lt;/em&gt;管道和&lt;em&gt;不纯&lt;/em&gt;管道。默认情况下，管道是纯管道。到目前为止，您所看到的每条管道都是纯净的。通过将管道的纯标志设置为false，可以使管道不纯。您可以像这样使 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 不纯：</target>
        </trans-unit>
        <trans-unit id="c0d0261683ac70f77d2cb64caaaa6be2e633442f" translate="yes" xml:space="preserve">
          <source>There are two changes:</source>
          <target state="translated">有两个变化。</target>
        </trans-unit>
        <trans-unit id="0757ae2710d35ffd65d63c8e4408b8f8b222e032" translate="yes" xml:space="preserve">
          <source>There are two important things to keep in mind when using Web Workers in Angular projects:</source>
          <target state="translated">在Angular项目中使用Web Workers时,有两件重要的事情需要注意。</target>
        </trans-unit>
        <trans-unit id="ed5307db9a7ed9a50bdf282cc464f6252ca2c8b1" translate="yes" xml:space="preserve">
          <source>There are two independent frameworks running in a single application, each framework treats the other as a black box.</source>
          <target state="translated">在一个应用程序中运行着两个独立的框架,每个框架都把另一个框架当作一个黑盒子。</target>
        </trans-unit>
        <trans-unit id="ad6b0f208e637f748bf275b29c341ba579e95709" translate="yes" xml:space="preserve">
          <source>There are two injector hierarchies in Angular:</source>
          <target state="translated">Angular中有两个注入器层次结构。</target>
        </trans-unit>
        <trans-unit id="43178632845a92d22afa35ca0676f6eb7a1f7062" translate="yes" xml:space="preserve">
          <source>There are two kinds of generated attributes:</source>
          <target state="translated">生成的属性有两种。</target>
        </trans-unit>
        <trans-unit id="ae6efc4f0655823ca7f29eb7bf3eefe1625ce1e5" translate="yes" xml:space="preserve">
          <source>There are two main kinds of entry components:</source>
          <target state="translated">进入组件主要有两种。</target>
        </trans-unit>
        <trans-unit id="550828cc689d902dc2704d305cf15fafb615c2b6" translate="yes" xml:space="preserve">
          <source>There are two more injectors above &lt;code&gt;root&lt;/code&gt;, an additional &lt;code&gt;ModuleInjector&lt;/code&gt; and &lt;code&gt;NullInjector()&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;root&lt;/code&gt; 上方还有两个注入器，一个额外的 &lt;code&gt;ModuleInjector&lt;/code&gt; 和 &lt;code&gt;NullInjector()&lt;/code&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
