<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="21ecfa2595cc1f5b325b2c21cfbff7962334a60c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; options make the declared directives and pipes available for import by other NgModules.</source>
          <target state="translated">该 &lt;code&gt;exports&lt;/code&gt; 选项，使申报指令和管道可供其他NgModules进口。</target>
        </trans-unit>
        <trans-unit id="4c7e18bb45ba4b5fd41913cd19bf2cb5879bd3d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extract-i18n&lt;/code&gt; command can read and write files in three translation formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5be89352c9b3d4545a07684018a85c193a9e6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extract-i18n&lt;/code&gt; command creates a source language file named &lt;code&gt;messages.xlf&lt;/code&gt; in your project's root directory using the &lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;XML Localization Interchange File Format (XLIFF, version 1.2)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924a0bda0e58b6d45eeda97233361e4d92152b9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;factory&lt;/code&gt; function returns the &lt;code&gt;localStorage&lt;/code&gt; property that is attached to the browser window object. The &lt;code&gt;&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; decorator is a constructor parameter used to specify a custom provider of a dependency. This custom provider can now be overridden during testing with a mock API of &lt;code&gt;localStorage&lt;/code&gt; instead of interacting with real browser APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9be60669d284e5d6102bee94f0946b335ed3c86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;factory&lt;/code&gt; function returns the &lt;code&gt;localStorage&lt;/code&gt; property that is attached to the browser window object. The &lt;code&gt;&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; decorator is a constructor parameter used to specify a custom provider of a dependency. This custom provider can now be overridden during testing with a mock API of &lt;code&gt;localStorage&lt;/code&gt; instead of interactive with real browser APIs.</source>
          <target state="translated">该 &lt;code&gt;factory&lt;/code&gt; 函数返回 &lt;code&gt;localStorage&lt;/code&gt; 附加到浏览器窗口对象的属性。该 &lt;code&gt;&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 装饰是用于指定依赖的自定义提供一个构造函数的参数。现在，可以在测试期间使用 &lt;code&gt;localStorage&lt;/code&gt; 的模拟API覆盖此自定义提供程序，而不是与实际的浏览器API进行交互。</target>
        </trans-unit>
        <trans-unit id="b00430e5bbaeadf8241fc073201ea7ecc5ca41b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;factory&lt;/code&gt; property points to the generated entry function. In this example, you invoke the &lt;code&gt;hello-world&lt;/code&gt; schematic by calling the &lt;code&gt;helloWorld()&lt;/code&gt; factory function.</source>
          <target state="translated">该 &lt;code&gt;factory&lt;/code&gt; 属性指向所产生的入口函数。在此示例中，您将通过调用 &lt;code&gt;helloWorld()&lt;/code&gt; 工厂函数来调用 &lt;code&gt;hello-world&lt;/code&gt; 示意图。</target>
        </trans-unit>
        <trans-unit id="fe36d75cc550ebe730a33a6d287578930b3b9f33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;favoriteColor&lt;/code&gt; value is updated in the component.</source>
          <target state="translated">所述 &lt;code&gt;favoriteColor&lt;/code&gt; 值在部件更新。</target>
        </trans-unit>
        <trans-unit id="127d59be8640df24f5583305129ef01af0da1a63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;fetch-json&lt;/code&gt; pipes display the heroes as shown in Figure 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7108ed3bcfda58185316e0339599c6526b1f2408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fetch&lt;/code&gt; pipe (&lt;code&gt;fetch-json.pipe.ts&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a29f62b66251be3080836e417909a06fdd5cb52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixture.whenStable()&lt;/code&gt; returns a promise that resolves when the JavaScript engine's task queue becomes empty. In this example, the task queue becomes empty when the observable emits the first quote.</source>
          <target state="translated">该 &lt;code&gt;fixture.whenStable()&lt;/code&gt; 返回一个承诺，消除了在JavaScript引擎的任务队列为空。在此示例中，当可观察对象发出第一引号时，任务队列将为空。</target>
        </trans-unit>
        <trans-unit id="881baa9041fdc7ad68bbc1a717633ee715f6da9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forChild()&lt;/code&gt; method creates an &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; that contains all the directives and the given routes, but does not include the &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6eefc0aaa0380bddfa4cf81ec05c3559e3ac941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; configuration method takes an &lt;code&gt;InMemoryDataService&lt;/code&gt; class that primes the in-memory database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127fea156d178f36549610f61f489eddc6685d9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; method creates an &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; that contains all the directives, the given routes, and the &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ac1b05d812482b7507362d51a4ec1a2580d80d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; method takes care of the &lt;em&gt;global&lt;/em&gt; injector configuration for the Router. The &lt;code&gt;forChild()&lt;/code&gt; method has no injector configuration. It uses directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;. For more information, see the &lt;a href=&quot;singleton-services#forRoot&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; pattern&lt;/a&gt; section of the &lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68a2010e1bbb32a0b1a5eab0b289f3ed8d55958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; pattern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c1a805b485019f2266bc642ca4eb018b5b6c5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forRoot()&lt;/code&gt; static method is a convention that makes it easy for developers to configure services and providers that are intended to be singletons. A good example of &lt;code&gt;forRoot()&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba3238be00f6a9329dd14c8cde743d8af35af2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forbiddenNameValidator&lt;/code&gt; factory returns the configured validator function. That function takes an Angular control object and returns &lt;em&gt;either&lt;/em&gt; null if the control value is valid &lt;em&gt;or&lt;/em&gt; a validation error object. The validation error object typically has a property whose name is the validation key, &lt;code&gt;'forbiddenName'&lt;/code&gt;, and whose value is an arbitrary dictionary of values that you could insert into an error message, &lt;code&gt;{name}&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;forbiddenNameValidator&lt;/code&gt; 工厂返回配置的验证功能。该函数采用一个角度控制对象，并返回&lt;em&gt;或者&lt;/em&gt;如果控制值是有效的空&lt;em&gt;或&lt;/em&gt;验证错误对象。验证错误对象通常具有一个属性，其名称为验证密钥 &lt;code&gt;'forbiddenName'&lt;/code&gt; ，其值是可以插入错误消息 &lt;code&gt;{name}&lt;/code&gt; 的值的任意字典。</target>
        </trans-unit>
        <trans-unit id="d6c47dfe0b4a9d194d93da6a53e2c28c4b4a6638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;freshness&lt;/code&gt; strategy usually results in more requests sent to the server, which can increase response latency. It is recommended that you use the default performance strategy whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f621324bd7bc992e815895a148f44c50582aa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get()&lt;/code&gt; method takes two arguments; the endpoint URL from which to fetch, and an &lt;em&gt;options&lt;/em&gt; object that you can use to configure the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd14df01685172b159816db8b4cc83eb319f6817" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getEventMessage&lt;/code&gt; method interprets each type of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; in the event stream.</source>
          <target state="translated">该 &lt;code&gt;getEventMessage&lt;/code&gt; 方法解释每个类型的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 事件流。</target>
        </trans-unit>
        <trans-unit id="0720e6119153b338ac8f3687fa78b44bc47f650b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getItems()&lt;/code&gt; method collects the items users add to the cart and returns each item with its associated quantity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b92c25379c77bec5a559ce651e63e02dcdcc9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;goToItems()&lt;/code&gt; method interprets the destination URI as relative to the activated route and navigates to the &lt;code&gt;items&lt;/code&gt; route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b27c3ddf198371aface3067fae60b5f34b13c19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hero-birthday2.component.ts&lt;/code&gt; component binds the pipe's format parameter to the component's &lt;code&gt;format&lt;/code&gt; property in the &lt;code&gt;template&lt;/code&gt; section, and adds a button for a click event bound to the component's &lt;code&gt;toggleFormat()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5467834f536bb386d92822c337a7b0060f16f33e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hero-birthday2.component.ts&lt;/code&gt; component's &lt;code&gt;toggleFormat()&lt;/code&gt; method toggles the component's &lt;code&gt;format&lt;/code&gt; property between a short form (&lt;code&gt;'shortDate'&lt;/code&gt;) and a longer form (&lt;code&gt;'fullDate'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a70ca7b9c1c4fe66b0b5e312918acfa718fb720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hero&lt;/code&gt; property &lt;a href=&quot;../guide/inputs-outputs&quot;&gt;must be an &lt;em&gt;Input&lt;/em&gt; property&lt;/a&gt;, annotated with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator, because the &lt;em&gt;external&lt;/em&gt;&lt;code&gt;HeroesComponent&lt;/code&gt;&lt;a href=&quot;toh-pt3#heroes-component-template&quot;&gt;will bind to it&lt;/a&gt; like this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d503fba2d2e3b6c4480f750303d3e8aed59ed1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hero&lt;/code&gt; property &lt;a href=&quot;../guide/template-syntax#inputs-outputs&quot;&gt;must be an &lt;em&gt;Input&lt;/em&gt; property&lt;/a&gt;, annotated with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator, because the &lt;em&gt;external&lt;/em&gt;&lt;code&gt;HeroesComponent&lt;/code&gt;&lt;a href=&quot;toh-pt3#heroes-component-template&quot;&gt;will bind to it&lt;/a&gt; like this.</source>
          <target state="translated">在 &lt;code&gt;hero&lt;/code&gt; 属性&lt;a href=&quot;../guide/template-syntax#inputs-outputs&quot;&gt;必须是&lt;em&gt;输入&lt;/em&gt;特性&lt;/a&gt;，与注释 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰，因为&lt;em&gt;外部&lt;/em&gt; &lt;code&gt;HeroesComponent&lt;/code&gt; &lt;a href=&quot;toh-pt3#heroes-component-template&quot;&gt;将绑定到它&lt;/a&gt;这样。</target>
        </trans-unit>
        <trans-unit id="a2edb9a418b0554b3bfc9b77ca9cc6ab8f255079" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;heroDe&lt;/code&gt; in the previous test is a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; that represents the hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;heroDe&lt;/code&gt; 在前面的测试是一个 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 表示的主人公 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe76834c11e23bdf25e69d2b4d46892575be8ced" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;heroForm&lt;/code&gt; template variable is now a reference to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive instance that governs the form as a whole.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6362acf07cbe2fa34576d50dba32d4d4e546c13b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;home&lt;/code&gt; and &lt;code&gt;about&lt;/code&gt; paths are associated with the &lt;code&gt;HomeComponent&lt;/code&gt; and &lt;code&gt;AboutComponent&lt;/code&gt; views. The route configuration tells the Angular router to instantiate the &lt;code&gt;HomeComponent&lt;/code&gt; and &lt;code&gt;AboutComponent&lt;/code&gt; views when the navigation matches the corresponding path.</source>
          <target state="translated">在 &lt;code&gt;home&lt;/code&gt; 和 &lt;code&gt;about&lt;/code&gt; 的路径与关联 &lt;code&gt;HomeComponent&lt;/code&gt; 和 &lt;code&gt;AboutComponent&lt;/code&gt; 意见。路由配置告诉角路由器来实例化 &lt;code&gt;HomeComponent&lt;/code&gt; 和 &lt;code&gt;AboutComponent&lt;/code&gt; 当导航相应的路径相匹配的意见。</target>
        </trans-unit>
        <trans-unit id="2a02f37aa3baaa14054711339393bc3aef4719e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; value appears in the URL as (&lt;code&gt;;id=15;foo=foo&lt;/code&gt;), not in the URL path. The path for the &quot;Heroes&quot; route doesn't have an &lt;code&gt;:id&lt;/code&gt; token.</source>
          <target state="translated">的 &lt;code&gt;id&lt;/code&gt; 值出现在网址（ &lt;code&gt;;id=15;foo=foo&lt;/code&gt; ），而不是在URL路径。&amp;ldquo;英雄&amp;rdquo;路线的路径没有 &lt;code&gt;:id&lt;/code&gt; 令牌。</target>
        </trans-unit>
        <trans-unit id="d2a37db1eb13b9ead8103b3a67181318ca13dfa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id=&quot;introductionHeader&quot;&quot;&lt;/code&gt; is a &lt;a href=&quot;i18n#custom-id&quot;&gt;custom ID&lt;/a&gt;, but without the &lt;code&gt;@@&lt;/code&gt; prefix required in the source HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbab5f11479981553cbc81516e984d3e5ea7327" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; validator implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; interface. It takes an Angular control object as an argument and returns either null if the form is valid, or &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7232545d328800c53fff51138f5955f3e7f74341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; statement specifies an additional &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; symbol from the Angular &lt;code&gt;core&lt;/code&gt; library:</source>
          <target state="translated">在 &lt;code&gt;import&lt;/code&gt; 语句指定一个额外的 &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 从角符号 &lt;code&gt;core&lt;/code&gt; 库：</target>
        </trans-unit>
        <trans-unit id="049525d2c4f861b9a942bcdfc68610b177c1bcb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;imports&lt;/code&gt; array</source>
          <target state="translated">该 &lt;code&gt;imports&lt;/code&gt; 阵列</target>
        </trans-unit>
        <trans-unit id="8c1be88d9d2352c6c3fbf36e60352a74ee41e8c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-memory-data.service.ts&lt;/code&gt; file replaces &lt;code&gt;mock-heroes.ts&lt;/code&gt;, which is now safe to delete.</source>
          <target state="translated">该 &lt;code&gt;in-memory-data.service.ts&lt;/code&gt; 文件替换 &lt;code&gt;mock-heroes.ts&lt;/code&gt; ，这是现在可以安全地删除。</target>
        </trans-unit>
        <trans-unit id="5948673b687ff09a4cbca50cc357fac757e1e338" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-memory-data.service.ts&lt;/code&gt; file will take over the function of &lt;code&gt;mock-heroes.ts&lt;/code&gt;. However, don't delete &lt;code&gt;mock-heroes.ts&lt;/code&gt; yet, as you still need it for a few more steps of this tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ddf450cc5e1c65a6c7b59f655887b0662ef9011" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index.html&lt;/code&gt; file is also modified during the build process to include script tags that enable differential loading. See the sample output below from the &lt;code&gt;index.html&lt;/code&gt; file produced during a build using &lt;code&gt;ng build&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;index.html&lt;/code&gt; 的文件，在构建过程中也修改为包括脚本标记，使差异载荷。请参阅下面的示例输出，该示例输出是在使用 &lt;code&gt;ng build&lt;/code&gt; 构建期间生成的 &lt;code&gt;index.html&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="dfcc0a77d947eb184ba0eb6295bbbba9aa94afdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index.html&lt;/code&gt; will likely have script tags loading AngularJS files, so the &lt;code&gt;index.html&lt;/code&gt; for AOT must also load those files. An easy way to copy them is by adding each to the &lt;code&gt;copy-dist-files.js&lt;/code&gt; file.</source>
          <target state="translated">该 &lt;code&gt;index.html&lt;/code&gt; 的将可能有脚本标记加载AngularJS文件，因此 &lt;code&gt;index.html&lt;/code&gt; 的用于AOT也必须加载这些文件。一种简单的复制方法是将它们添加到 &lt;code&gt;copy-dist-files.js&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="779016803ead9dfec62b8680c130c4c7b844144b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; property of the &lt;code&gt;NgFor&lt;/code&gt; directive context returns the zero-based index of the item in each iteration. You can capture the &lt;code&gt;index&lt;/code&gt; in a template input variable and use it in the template.</source>
          <target state="translated">&lt;code&gt;NgFor&lt;/code&gt; 指令上下文的 &lt;code&gt;index&lt;/code&gt; 属性在每次迭代中返回该项目的从零开始的索引。您可以在模板输入变量中捕获 &lt;code&gt;index&lt;/code&gt; 在模板中使用它。</target>
        </trans-unit>
        <trans-unit id="e680efed95e08393f7d53fb276d913ac1224a8da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; function is often adequate for this purpose. But &lt;code&gt;inject&lt;/code&gt; throws an error if it can't provide the service.</source>
          <target state="translated">为此， &lt;code&gt;inject&lt;/code&gt; 功能通常是足够的。但是如果 &lt;code&gt;inject&lt;/code&gt; 无法提供服务，则会引发错误。</target>
        </trans-unit>
        <trans-unit id="a871438d8f60cdf53bf645d03648573c77c8c396" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;installMode&lt;/code&gt; determines how these resources are initially cached. The &lt;code&gt;installMode&lt;/code&gt; can be either of two values:</source>
          <target state="translated">该 &lt;code&gt;installMode&lt;/code&gt; 确定这些资源是如何开始缓存。该 &lt;code&gt;installMode&lt;/code&gt; 可以是两个值之一：</target>
        </trans-unit>
        <trans-unit id="7adafbc3d7e9fcd1852e26be325cfdf1980b4479" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;intercept&lt;/code&gt; method transforms a request into an &lt;code&gt;Observable&lt;/code&gt; that eventually returns the HTTP response. In this sense, each interceptor is fully capable of handling the request entirely by itself.</source>
          <target state="translated">的 &lt;code&gt;intercept&lt;/code&gt; 方法变换的请求到一个 &lt;code&gt;Observable&lt;/code&gt; ，最终返回HTTP响应。从这个意义上讲，每个拦截器完全有能力独自完全处理请求。</target>
        </trans-unit>
        <trans-unit id="2108a2ee63b2069a96b62e4fd1f9a5f2332d2859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; method dispatches an HTTP request that checks if the alter ego is available, and returns &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; as the result. The &lt;code&gt;validate()&lt;/code&gt; method pipes the response through the &lt;code&gt;map&lt;/code&gt; operator and transforms it into a validation result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15d1612279f7ffcaff9708155f1d1d8a675e7b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; method dispatches an HTTP request that checks if the alter ego is available, and returns &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; as the result. We pipe the response through the &lt;code&gt;map&lt;/code&gt; operator and transform it into a validation result. As always, we return &lt;code&gt;null&lt;/code&gt; if the form is valid, and &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; if it is not. We make sure to handle any potential errors with the &lt;code&gt;catchError&lt;/code&gt; operator.</source>
          <target state="translated">所述 &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; 如果改变自我是可用的，并返回方法调度一个HTTP请求支票 &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; 作为结果。我们通过 &lt;code&gt;map&lt;/code&gt; 运算符通过管道传递响应，并将其转换为验证结果。与往常一样，如果表单有效，则返回 &lt;code&gt;null&lt;/code&gt; ,否则返回 &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; 。我们确保使用 &lt;code&gt;catchError&lt;/code&gt; 运算符处理任何潜在的错误。</target>
        </trans-unit>
        <trans-unit id="987a0d43d85abf3ebd433e3c46293440300bbf70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isCachable()&lt;/code&gt; function determines if the request is cachable. In this sample, only GET requests to the npm package search api are cachable.</source>
          <target state="translated">所述 &lt;code&gt;isCachable()&lt;/code&gt; 函数确定该请求是超高速缓存。在此示例中，仅可对npm软件包搜索api进行GET请求。</target>
        </trans-unit>
        <trans-unit id="74b06e437c6efb01a3288a4392197d8254eac202" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isCacheable()&lt;/code&gt; function determines if the request is cacheable. In this sample, only GET requests to the npm package search api are cacheable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81986ed4ffe8be92868d359a52c73e46a0bba3bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;karma.conf.js&lt;/code&gt; file is a partial Karma configuration file. The CLI constructs the full runtime configuration in memory, based on application structure specified in the &lt;code&gt;angular.json&lt;/code&gt; file, supplemented by &lt;code&gt;karma.conf.js&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;karma.conf.js&lt;/code&gt; 文件是一个局部噶配置文件。CLI根据 &lt;code&gt;angular.json&lt;/code&gt; 文件中指定的应用程序结构（由 &lt;code&gt;karma.conf.js&lt;/code&gt; 补充）在内存中构造完整的运行时配置。</target>
        </trans-unit>
        <trans-unit id="e5ea13e13bd51c93a963c4708123611462bd790e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keyup&lt;/code&gt; event binding sends every keystroke to the component's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;keyup&lt;/code&gt; 事件绑定发送每个按键到组件的 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="4d5d3ef5c47ecc1bce3f9257d6bf5a046e88f610" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let-i&lt;/code&gt; and &lt;code&gt;let-odd&lt;/code&gt; variables were defined as &lt;code&gt;let i=index&lt;/code&gt; and &lt;code&gt;let &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;=&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;. Angular sets them to the current value of the context's &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; properties.</source>
          <target state="translated">在 &lt;code&gt;let-i&lt;/code&gt; 和 &lt;code&gt;let-odd&lt;/code&gt; 变量被定义为 &lt;code&gt;let i=index&lt;/code&gt; 和 &lt;code&gt;let &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;=&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 。Angular将它们设置为上下文 &lt;code&gt;index&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 属性的当前值。</target>
        </trans-unit>
        <trans-unit id="3ca5558e21840bcf4b3b38fc07d6a40c146f008d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let-i&lt;/code&gt; and &lt;code&gt;let-odd&lt;/code&gt; variables were defined as &lt;code&gt;let i=index&lt;/code&gt; and &lt;code&gt;let odd=odd&lt;/code&gt;. Angular sets them to the current value of the context's &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;odd&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45ed2edc5561795b4fe88a5fd6a363a90124505" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; keyword before &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; creates a template input variable called &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive iterates over the &lt;code&gt;items&lt;/code&gt; array returned by the parent component's &lt;code&gt;items&lt;/code&gt; property and sets &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; to the current item from the array during each iteration.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 之前的 &lt;code&gt;let&lt;/code&gt; 关键字创建一个名为 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 的模板输入变量。该 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 在指令迭代 &lt;code&gt;items&lt;/code&gt; 由父组件的返回数组 &lt;code&gt;items&lt;/code&gt; 属性，并设置 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 每次迭代中从阵列到当前项目。</target>
        </trans-unit>
        <trans-unit id="ba4f5f1907debf2c5dcfc0006affb24e12d5c62d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; keyword before &lt;code&gt;item&lt;/code&gt; creates a template input variable called &lt;code&gt;item&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive iterates over the &lt;code&gt;items&lt;/code&gt; array returned by the parent component's &lt;code&gt;items&lt;/code&gt; property and sets &lt;code&gt;item&lt;/code&gt; to the current item from the array during each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67312891b24b8f98f7077e6a626334bbd888baf9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; keyword declares a &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;template input variable&lt;/em&gt;&lt;/a&gt; that you reference within the template. The input variables in this example are &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;. The parser translates &lt;code&gt;let hero&lt;/code&gt;, &lt;code&gt;let i&lt;/code&gt;, and &lt;code&gt;let &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; into variables named &lt;code&gt;let-hero&lt;/code&gt;, &lt;code&gt;let-i&lt;/code&gt;, and &lt;code&gt;let-odd&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;let&lt;/code&gt; 关键字声明一个&lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;模板输入变量&lt;/em&gt;&lt;/a&gt;，你在模板内引用。在此示例中，输入变量是 &lt;code&gt;hero&lt;/code&gt; ， &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 。解析器将 &lt;code&gt;let hero&lt;/code&gt; ， &lt;code&gt;let i&lt;/code&gt; 和 &lt;code&gt;let &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 转换为名为 &lt;code&gt;let-hero&lt;/code&gt; ， &lt;code&gt;let-i&lt;/code&gt; 和 &lt;code&gt;let-odd&lt;/code&gt; 的变量。</target>
        </trans-unit>
        <trans-unit id="634a292f8119dbc280342cc788d0714781558b4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; keyword declares a &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;template input variable&lt;/em&gt;&lt;/a&gt; that you reference within the template. The input variables in this example are &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;odd&lt;/code&gt;. The parser translates &lt;code&gt;let hero&lt;/code&gt;, &lt;code&gt;let i&lt;/code&gt;, and &lt;code&gt;let odd&lt;/code&gt; into variables named &lt;code&gt;let-hero&lt;/code&gt;, &lt;code&gt;let-i&lt;/code&gt;, and &lt;code&gt;let-odd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f257babd3730c1022992c731831065e7e6e340b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadComponent()&lt;/code&gt; method chooses an ad using some math.</source>
          <target state="translated">该 &lt;code&gt;loadComponent()&lt;/code&gt; 方法选择使用一些数学的广告。</target>
        </trans-unit>
        <trans-unit id="d58598b12b02d1cfd9ce52912a2c6426fcdcb59b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadComponent()&lt;/code&gt; method is doing a lot of the heavy lifting here. Take it step by step. First, it picks an ad.</source>
          <target state="translated">该 &lt;code&gt;loadComponent()&lt;/code&gt; 方法，在这里做了很多繁重的工作。逐步进行。首先，它挑选一个广告。</target>
        </trans-unit>
        <trans-unit id="657da6bcc28ab42d092f42096554f848147cd763" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;messageService&lt;/code&gt; property &lt;strong&gt;must be public&lt;/strong&gt; because you're going to bind to it in the template.</source>
          <target state="translated">该 &lt;code&gt;messageService&lt;/code&gt; 财产&lt;strong&gt;必须是公开的&lt;/strong&gt;，因为你的模板要绑定到它。</target>
        </trans-unit>
        <trans-unit id="b39bef99ed6eb1d31b77310df12a7ce7fa0909da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;move&lt;/code&gt; method moves the provided source files to their destination when the schematic is applied.</source>
          <target state="translated">的 &lt;code&gt;move&lt;/code&gt; 方法提供的源文件被施加概略当移动到它们的目的地。</target>
        </trans-unit>
        <trans-unit id="a555fd300f9beee4ec986089765c4c4f9d39addf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; is provided as a property from your factory function. It is the same &lt;code&gt;name&lt;/code&gt; you defined in the schema.</source>
          <target state="translated">该 &lt;code&gt;name&lt;/code&gt; 是作为从工厂函数的性质。它与您在架构中定义的 &lt;code&gt;name&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="8c15bebd1c9694615338dc82048275afeb2594dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; parameter should be the name of the AngularJS directive.</source>
          <target state="translated">该 &lt;code&gt;name&lt;/code&gt; 参数应该是AngularJS指令的名称。</target>
        </trans-unit>
        <trans-unit id="9c4f8ad580b2ff5b5d69b95f0508568f8aa6cdb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property is &lt;code&gt;Sally&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;name&lt;/code&gt; 属性是 &lt;code&gt;Sally&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2858b8b17d6d9343e890b1e117c236f2f647306e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; notification sends a value such as a number, a string, or an object.</source>
          <target state="translated">的 &lt;code&gt;next&lt;/code&gt; 通知发送一个值，诸如数字，串，或一个对象。</target>
        </trans-unit>
        <trans-unit id="e81819a9cfe4af19f5636eb47d2ae1d60abe59cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44a1960d514a7a09b106ab46609d67cafa3ba79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; object represents the next interceptor in the chain of interceptors. The final &lt;code&gt;next&lt;/code&gt; in the chain is the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; backend handler that sends the request to the server and receives the server's response.</source>
          <target state="translated">的 &lt;code&gt;next&lt;/code&gt; 对象表示在拦截器链中的下拦截。链中的最后 &lt;code&gt;next&lt;/code&gt; 是 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 后端处理程序，该处理程序将请求发送到服务器并接收服务器的响应。</target>
        </trans-unit>
        <trans-unit id="ef365b122d4f3b65df123f4627705808d9b58632" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command can be used to update your workspace's library dependencies. If you supply no options or use the help option, the command examines your workspace and suggests libraries to update.</source>
          <target state="translated">该 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; 命令可以用来更新您的工作空间的函数库的依赖。如果不提供任何选项或使用帮助选项，该命令将检查您的工作空间并建议要更新的库。</target>
        </trans-unit>
        <trans-unit id="661eb26df65f06b9bd2b124b6434e53befc743b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng add&lt;/code&gt; command uses a package manager such as &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; or &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn&lt;/a&gt; to install the library package, and invokes schematics that are included in the package to other scaffolding within the project code, such as adding import statements, fonts, themes, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402924763f2c69b9a547faff6eeb2122f32401e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng add&lt;/code&gt; command uses the npm package manager or &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn&lt;/a&gt; to install the library package, and invokes schematics that are included in the package to other scaffolding within the project code, such as adding import statements, fonts, themes, and so on.</source>
          <target state="translated">该 &lt;code&gt;ng add&lt;/code&gt; 命令使用NPM包管理器或&lt;a href=&quot;https://yarnpkg.com/&quot;&gt;纱&lt;/a&gt;安装库包，以及包括在包中的项目代码中的其他脚手架，如添加import语句，字体，主题等所调用的原理图。</target>
        </trans-unit>
        <trans-unit id="d7bb80a2b7541f339e003710c97fc562d5c771d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng build&lt;/code&gt; command with the &lt;code&gt;--prod&lt;/code&gt; meta-flag (&lt;code&gt;ng build --prod&lt;/code&gt;) compiles with AOT by default.</source>
          <target state="translated">带有 &lt;code&gt;--prod&lt;/code&gt; 元标记的 &lt;code&gt;ng build&lt;/code&gt; 命令（ &lt;code&gt;ng build --prod&lt;/code&gt; ）默认情况下使用AOT编译。</target>
        </trans-unit>
        <trans-unit id="151524c159dafe7685065a9676b66852e12e4f54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng extract-i18n&lt;/code&gt; command (with no options) generates a source language file named &lt;code&gt;messages.xlf&lt;/code&gt; in the project &lt;code&gt;src&lt;/code&gt; folder. Create &lt;em&gt;translation&lt;/em&gt; files for each language by copying the source language file. To avoid confusion with multiple translations, you should organize the language translation files by locale in a dedicated &lt;code&gt;locale&lt;/code&gt; folder under &lt;code&gt;src/&lt;/code&gt;. Use a filename extension that matches the associated locale, such as &lt;code&gt;messages.fr.xlf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2198a23cdfaca74ee5cad793b7e3cc90c0218b2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng generate&lt;/code&gt; command creates the &lt;code&gt;projects/my-lib&lt;/code&gt; folder in your workspace, which contains a component and a service inside an NgModule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915b5365ccaeb02cfaf1faa3905f771f9e676ca8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng new&lt;/code&gt; command prompts you for information about features to include in the initial app project. Accept the defaults by pressing the Enter or Return key.</source>
          <target state="translated">该 &lt;code&gt;ng new&lt;/code&gt; 命令提示有关功能的信息，包括在最初的应用项目。通过按Enter或Return键接受默认设置。</target>
        </trans-unit>
        <trans-unit id="47140589baf6417447acb195c1530707c4399071" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng new&lt;/code&gt; command prompts you for information about features to include in the initial app. Accept the defaults by pressing the Enter or Return key.</source>
          <target state="translated">该 &lt;code&gt;ng new&lt;/code&gt; 命令提示有关功能的信息，包括在最初的应用程序。通过按Enter或Return键接受默认设置。</target>
        </trans-unit>
        <trans-unit id="d53cb4d3de04d121569ef7fced8acc26fcb00968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng serve&lt;/code&gt; command builds the app, starts the development server, watches the source files, and rebuilds the app as you make changes to those files.</source>
          <target state="translated">该 &lt;code&gt;ng serve&lt;/code&gt; 命令构建应用程序，启动开发服务器，手表的源文件，并重建为您更改这些文件的应用程序。</target>
        </trans-unit>
        <trans-unit id="decf48f9f57ece2b4916fc311b2c476376d5e095" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng serve&lt;/code&gt; command launches the server, watches your files, and rebuilds the app as you make changes to those files.</source>
          <target state="translated">该 &lt;code&gt;ng serve&lt;/code&gt; 命令启动服务器，手表您的文件，并重建为您更改这些文件的应用程序。</target>
        </trans-unit>
        <trans-unit id="6cc6ec4618d0114656fc6e332ab1860f96ca810e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng test&lt;/code&gt; command builds the app in &lt;em&gt;watch mode&lt;/em&gt;, and launches the &lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma test runner&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;ng test&lt;/code&gt; 命令构建的应用程序&lt;em&gt;监视模式&lt;/em&gt;，并启动&lt;a href=&quot;https://karma-runner.github.io&quot;&gt;噶测试运行&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7dd4f9439ed1af7e0523f545b94e486b40d9a486" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng update&lt;/code&gt; command can be used to update your workspace's library dependencies. If you supply no options or use the help option, the command examines your workspace and suggests libraries to update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b6107217efb4567dcc9df7baefcf1ae3bd71db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng xi18n&lt;/code&gt; command generates a translation source file named &lt;code&gt;messages.xlf&lt;/code&gt; in the project &lt;code&gt;src&lt;/code&gt; folder. The next step is to translate the display strings in this source file into language-specific translation files. The example in this guide creates a French translation file.</source>
          <target state="translated">该 &lt;code&gt;ng xi18n&lt;/code&gt; 命令生成一个名为翻译源文件 &lt;code&gt;messages.xlf&lt;/code&gt; 项目 &lt;code&gt;src&lt;/code&gt; 文件夹中。下一步是将该源文件中的显示字符串转换为特定于语言的转换文件。本指南中的示例创建法语翻译文件。</target>
        </trans-unit>
        <trans-unit id="94f0959cbc129968dc58b82a0ff7ada846d3170b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-href&lt;/code&gt; directive allows AngularJS to preprocess the &lt;code&gt;href&lt;/code&gt; property so that it can replace the binding expression with the appropriate URL before the browser fetches from that URL.</source>
          <target state="translated">在 &lt;code&gt;ng-href&lt;/code&gt; 指令允许AngularJS来预处理 &lt;code&gt;href&lt;/code&gt; 属性，使之可以从URL浏览器取前更换相应的URL绑定表达式。</target>
        </trans-unit>
        <trans-unit id="7bd2c70c6651fab453eaa2bf35d388700b4f79b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-src&lt;/code&gt; directive allows AngularJS to preprocess the &lt;code&gt;src&lt;/code&gt; property so that it can replace the binding expression with the appropriate URL before the browser fetches from that URL.</source>
          <target state="translated">在 &lt;code&gt;ng-src&lt;/code&gt; 指令允许AngularJS来预处理 &lt;code&gt;src&lt;/code&gt; 属性，使之可以从URL浏览器取前更换相应的URL绑定表达式。</target>
        </trans-unit>
        <trans-unit id="857809768abb4476e5a1dc05028c8b640e255a37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-valid&lt;/code&gt;/&lt;code&gt;ng-invalid&lt;/code&gt; pair is particularly interesting, because you want to send a strong visual signal when the values are invalid. You also want to mark required fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3138ac0ec252ffe200dfb5a828a82de4ac40f99c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-valid&lt;/code&gt;/&lt;code&gt;ng-invalid&lt;/code&gt; pair is the most interesting, because you want to send a strong visual signal when the values are invalid. You also want to mark required fields. To create such visual feedback, add definitions for the &lt;code&gt;ng-*&lt;/code&gt; CSS classes.</source>
          <target state="translated">在 &lt;code&gt;ng-valid&lt;/code&gt; / &lt;code&gt;ng-invalid&lt;/code&gt; 对是最有趣的，因为你要发送当值无效强烈的视觉信号。您还希望标记必填字段。要创建此类视觉反馈，请为 &lt;code&gt;ng-*&lt;/code&gt; CSS类添加定义。</target>
        </trans-unit>
        <trans-unit id="84ce1e908b621b2c0b80729e1bdda280c58ec149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAfterViewInit()&lt;/code&gt; lifecycle hook is an important wrinkle. The timer component isn't available until &lt;em&gt;after&lt;/em&gt; Angular displays the parent view. So it displays &lt;code&gt;0&lt;/code&gt; seconds initially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed41a4355ac7ba51dd443b347ab879e887f8572" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngExpressEngine()&lt;/code&gt; function is a wrapper around Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function which turns a client's requests into server-rendered HTML pages. It accepts an object with the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55184b9fb03b4d4f4740d8b6e58fea5b03d407bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngExpressEngine()&lt;/code&gt; function is a wrapper around Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function which turns a client's requests into server-rendered HTML pages.</source>
          <target state="translated">该 &lt;code&gt;ngExpressEngine()&lt;/code&gt; 函数是通用的包装 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 函数，它把一个客户机的请求到服务器渲染HTML页面。</target>
        </trans-unit>
        <trans-unit id="cea0266c75765dd1f7f192925449a11f3e7685c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngExpressEngine()&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; callback that resolves to the rendered page. It's up to the engine to decide what to do with that page. This engine's &lt;code&gt;Promise&lt;/code&gt; callback returns the rendered page to the web server, which then forwards it to the client in the HTTP response.</source>
          <target state="translated">该 &lt;code&gt;ngExpressEngine()&lt;/code&gt; 函数返回一个 &lt;code&gt;Promise&lt;/code&gt; 回调解析为呈现的页面。由引擎决定如何处理该页面。该引擎的 &lt;code&gt;Promise&lt;/code&gt; 回调将渲染的页面返回到Web服务器，然后将其转发到HTTP响应中的客户端。</target>
        </trans-unit>
        <trans-unit id="e39bac5f0d896fc7bb83309ae7c71f4c31525445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnChanges()&lt;/code&gt; method is your first opportunity to access those properties. Angular calls &lt;code&gt;ngOnChanges()&lt;/code&gt; before &lt;code&gt;ngOnInit()&lt;/code&gt; and many times after that. It only calls &lt;code&gt;ngOnInit()&lt;/code&gt; once.</source>
          <target state="translated">该 &lt;code&gt;ngOnChanges()&lt;/code&gt; 方法是你第一次有机会访问这些属性。Angular在 &lt;code&gt;ngOnChanges()&lt;/code&gt; 之前调用ngOnChanges（），之后 &lt;code&gt;ngOnInit()&lt;/code&gt; 调用。它只调用一次 &lt;code&gt;ngOnInit()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c3e892008e822e750da9095703e147a840b86ca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnChanges()&lt;/code&gt; method is your first opportunity to access those properties. Angular calls &lt;code&gt;ngOnChanges()&lt;/code&gt; before &lt;code&gt;ngOnInit()&lt;/code&gt;, but also many times after that. It only calls &lt;code&gt;ngOnInit()&lt;/code&gt; once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e25bbb9011f26f819a7cc6069e3c5f18a8997a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnChanges()&lt;/code&gt; method queues an async task to set the value for the internal &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">所述 &lt;code&gt;ngOnChanges()&lt;/code&gt; 方法队列异步任务来设置内部的值 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="6dbdf349a71f02e0e98a02bd939c4d3eec1858b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnChanges()&lt;/code&gt; method takes an object that maps each changed property name to a &lt;a href=&quot;../api/core/simplechange&quot;&gt;SimpleChange&lt;/a&gt; object holding the current and previous property values. This hook iterates over the changed properties and logs them.</source>
          <target state="translated">所述 &lt;code&gt;ngOnChanges()&lt;/code&gt; 方法采用每一改变的属性名称映射到一个对象&lt;a href=&quot;../api/core/simplechange&quot;&gt;SimpleChange&lt;/a&gt;物体保持当前和以前的属性值。该钩子遍历更改的属性并记录它们。</target>
        </trans-unit>
        <trans-unit id="a0b31050175bd4d7ae74733eff74e7b30f570426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnDestroy()&lt;/code&gt; method is also the time to notify another part of the application that the component is going away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc6439222087df75fe7510b5276e62ea8e22f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; methods have more vital roles to play in real applications.</source>
          <target state="translated">该 &lt;code&gt;ngOnInit()&lt;/code&gt; 和 &lt;code&gt;ngOnDestroy()&lt;/code&gt; 方法有更多的至关重要的作用在实际应用中玩。</target>
        </trans-unit>
        <trans-unit id="bc9511230c44a04ab98b667e3d7957d7db190375" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnInit()&lt;/code&gt; is a &lt;a href=&quot;../guide/lifecycle-hooks#oninit&quot;&gt;lifecycle hook&lt;/a&gt;. Angular calls &lt;code&gt;ngOnInit()&lt;/code&gt; shortly after creating a component. It's a good place to put initialization logic.</source>
          <target state="translated">所述 &lt;code&gt;ngOnInit()&lt;/code&gt; 是一个&lt;a href=&quot;../guide/lifecycle-hooks#oninit&quot;&gt;生命周期钩&lt;/a&gt;。创建组件后不久，Angular会调用 &lt;code&gt;ngOnInit()&lt;/code&gt; 。这是放置初始化逻辑的好地方。</target>
        </trans-unit>
        <trans-unit id="981284d8fe4aa73e64020d62ee523dc61af1e4c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOnInit()&lt;/code&gt; lifecycle hook calls &lt;code&gt;getHeroes()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;ngOnInit()&lt;/code&gt; 生命周期挂钩调用 &lt;code&gt;getHeroes()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6587607630a415e74bae14f92d2441487296dc7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngTemplateContextGuard&lt;/code&gt; static property declares the type of the template context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1333fb866dfc201e0e5e6735bb9286b5f00a7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngsw-config.json&lt;/code&gt; configuration file specifies which files and data URLs the Angular service worker should cache and how it should update the cached files and data. The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; processes the configuration file during &lt;code&gt;ng build --prod&lt;/code&gt;. Manually, you can process it with the &lt;code&gt;ngsw-config&lt;/code&gt; tool (where &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; is the name of the project being built):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ce7551e4c509b11e24776b5f665ec3c2322ff6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;observe&lt;/code&gt; value determines the return type, according to what you are interested in observing.</source>
          <target state="translated">&lt;code&gt;observe&lt;/code&gt; 值根据您感兴趣的观察值确定返回类型。</target>
        </trans-unit>
        <trans-unit id="18b77fe3b5bee95f73d1fc1877c137e7a931d878" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onSubmit()&lt;/code&gt; method in the &lt;code&gt;ProfileEditor&lt;/code&gt; component captures the current value of &lt;code&gt;profileForm&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; to keep the form encapsulated and to provide the form value outside the component. The following example uses &lt;code&gt;console.warn&lt;/code&gt; to log a message to the browser console.</source>
          <target state="translated">&lt;code&gt;ProfileEditor&lt;/code&gt; 组件中的 &lt;code&gt;onSubmit()&lt;/code&gt; 方法捕获 &lt;code&gt;profileForm&lt;/code&gt; 的当前值。使用 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 可以使表单保持封装状态，并在组件外部提供表单值。以下示例使用 &lt;code&gt;console.warn&lt;/code&gt; 将消息记录到浏览器控制台。</target>
        </trans-unit>
        <trans-unit id="ddbbb7fe03501b2cd0af133be1faf50d5e969adf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optimization&lt;/code&gt; and &lt;code&gt;sourceMap&lt;/code&gt; browser builder options can be either a Boolean or an Object for more fine-grained configuration. In this section we will explain how to fine tune these options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a7d99c46c52d5a3ee1b0e0e32dce7d1e549f63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optimization&lt;/code&gt; and &lt;code&gt;sourceMap&lt;/code&gt; command options are simple Boolean flags. You can supply an object as a configuration value for either of these to provide more detailed instruction.</source>
          <target state="translated">最 &lt;code&gt;optimization&lt;/code&gt; 和 &lt;code&gt;sourceMap&lt;/code&gt; 命令选项是简单的布尔标志。您可以为这些对象中的任何一个提供对象作为配置值，以提供更详细的说明。</target>
        </trans-unit>
        <trans-unit id="06d19a4a4d049d946458a3b228278d9b59f8eeb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optimization&lt;/code&gt; option applies to scripts, styles and fonts. You can supply a value such as the following to apply optimization to one or the other:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68652e30cdd6035a39eaf435363a84fbca02e905" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.path&lt;/code&gt; determines where the schematic template files are moved to once the schematic is applied.</source>
          <target state="translated">所述 &lt;code&gt;options.path&lt;/code&gt; 确定其中示意性模板文件被移动到一旦施加的原理图。</target>
        </trans-unit>
        <trans-unit id="ed45fc4fb586f918cbf123cc6aaa8ac13b46fa2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outDir&lt;/code&gt; maps to the library's output folder. By default, this is the &lt;code&gt;dist/my-lib&lt;/code&gt; folder at the root of your workspace.</source>
          <target state="translated">该 &lt;code&gt;outDir&lt;/code&gt; 映射到库的输出文件夹。默认情况下，这是工作区根目录中的 &lt;code&gt;dist/my-lib&lt;/code&gt; 文件夹。</target>
        </trans-unit>
        <trans-unit id="5736e34f4ac101b818064275d103c11a91f96223" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputs&lt;/code&gt; property defines a set of &lt;code&gt;directiveProperty&lt;/code&gt; to &lt;code&gt;bindingProperty&lt;/code&gt; configuration:</source>
          <target state="translated">的 &lt;code&gt;outputs&lt;/code&gt; 属性定义了一组 &lt;code&gt;directiveProperty&lt;/code&gt; 到 &lt;code&gt;bindingProperty&lt;/code&gt; 配置：</target>
        </trans-unit>
        <trans-unit id="b99b37eb83ce95780d266653fe93326c72cd1e1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p span&lt;/code&gt; style, intended for use elsewhere, was inadvertently applied here.</source>
          <target state="translated">打算在其他地方使用的 &lt;code&gt;p span&lt;/code&gt; 样式在此处被无意中应用。</target>
        </trans-unit>
        <trans-unit id="e3c80bfbed5536effebdc8bdda5d90d25e98e9b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt; for a new Angular workspace installs the &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt; package, which polyfills missing features for several popular browser.</source>
          <target state="translated">用于新Angular工作区的 &lt;code&gt;package.json&lt;/code&gt; 安装了&lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt;程序包，该程序包填充了一些流行浏览器的缺失功能。</target>
        </trans-unit>
        <trans-unit id="cc416378bdfc224793314f87016f1f4a90bf5826" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt; is organized into two groups of packages:</source>
          <target state="translated">该 &lt;code&gt;package.json&lt;/code&gt; 分为两组套餐：</target>
        </trans-unit>
        <trans-unit id="60d300e5b06b4652df36c13692d39407023ed327" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paramMap&lt;/code&gt; is a dictionary of route parameter values extracted from the URL. The &lt;code&gt;&quot;id&quot;&lt;/code&gt; key returns the &lt;code&gt;id&lt;/code&gt; of the hero to fetch.</source>
          <target state="translated">所述 &lt;code&gt;paramMap&lt;/code&gt; 是从URL提取的路由的参数值的字典。在 &lt;code&gt;&quot;id&quot;&lt;/code&gt; 键返回 &lt;code&gt;id&lt;/code&gt; 英雄的获取。</target>
        </trans-unit>
        <trans-unit id="313f8e71b2fb55a766d7a1e9c76622430cf5aaac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paramMap&lt;/code&gt; processing is a bit tricky. When the map changes, you &lt;code&gt;get()&lt;/code&gt; the &lt;code&gt;id&lt;/code&gt; parameter from the changed parameters.</source>
          <target state="translated">的 &lt;code&gt;paramMap&lt;/code&gt; 处理是有点麻烦。当映射的变化，你 &lt;code&gt;get()&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt; 从改变参数的参数。</target>
        </trans-unit>
        <trans-unit id="14ce2d0b2c2b8d442f75a2419ce9d4c897bbebc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parentItem&lt;/code&gt; in &lt;code&gt;AppComponent&lt;/code&gt; is a string, which means that the expression, &lt;code&gt;parentItem&lt;/code&gt; within &lt;code&gt;[childItem]=&quot;parentItem&quot;&lt;/code&gt;, evaluates to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83acc7ba56c6203cb3caa1c7d75835b469828f37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;component&lt;/code&gt; properties should be familiar. There's a new property, &lt;code&gt;outlet&lt;/code&gt;, set to &lt;code&gt;'popup'&lt;/code&gt;. This route now targets the popup outlet and the &lt;code&gt;ComposeMessageComponent&lt;/code&gt; will display there.</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 和 &lt;code&gt;component&lt;/code&gt; 的属性应该很熟悉。有一个新属性， &lt;code&gt;outlet&lt;/code&gt; ，设置为 &lt;code&gt;'popup'&lt;/code&gt; 。现在，此路由将目标 &lt;code&gt;ComposeMessageComponent&lt;/code&gt; 弹出出口，并且ComposeMessageComponent将显示在此处。</target>
        </trans-unit>
        <trans-unit id="1547fce0daf2ce9593510cb48ca8ac8ab2ef2d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; here is set to an empty string because the path in &lt;code&gt;AppRoutingModule&lt;/code&gt; is already set to &lt;code&gt;customers&lt;/code&gt;, so this route in the &lt;code&gt;CustomersRoutingModule&lt;/code&gt;, is already within the &lt;code&gt;customers&lt;/code&gt; context. Every route in this routing module is a child route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a8ecd4a8783bad25fd9c461e2beeda627c4a13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; option in the schematic's schema is substituted by default with the current working directory. If the &lt;code&gt;path&lt;/code&gt; is not defined, use the &lt;code&gt;sourceRoot&lt;/code&gt; from the project configuration along with the &lt;code&gt;projectType&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 在原理图的架构选项默认为与当前工作目录取代。如果 &lt;code&gt;path&lt;/code&gt; 没有定义，使用 &lt;code&gt;sourceRoot&lt;/code&gt; 从项目配置与沿 &lt;code&gt;projectType&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62481be786da43da1d0f9f8e1f68dbc62d533af9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathRewrite&lt;/code&gt; proxy configuration option lets you rewrite the URL path at run time. For example, you can specify the following &lt;code&gt;pathRewrite&lt;/code&gt; value to the proxy configuration to remove &quot;api&quot; from the end of a path.</source>
          <target state="translated">该 &lt;code&gt;pathRewrite&lt;/code&gt; 代理配置选项，您可以重写在运行时的URL路径。例如，您可以为代理配置指定以下 &lt;code&gt;pathRewrite&lt;/code&gt; 值，以从路径末尾删除&amp;ldquo; api&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="1785d4a3a5bede37ebbe1b406daf1b64048c32dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pipe()&lt;/code&gt; function is also a method on the RxJS &lt;code&gt;Observable&lt;/code&gt;, so you use this shorter form to define the same operation:</source>
          <target state="translated">所述 &lt;code&gt;pipe()&lt;/code&gt; 函数也对RxJS的方法 &lt;code&gt;Observable&lt;/code&gt; ，所以使用此较短的形式，以限定相同的操作：</target>
        </trans-unit>
        <trans-unit id="d7e7c8187c4be0da91d7134cd8b83260a33409a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;postbuild&lt;/code&gt; script copies the schematic files after the &lt;code&gt;build&lt;/code&gt; script completes.</source>
          <target state="translated">该 &lt;code&gt;postbuild&lt;/code&gt; 脚本复制后的原理图文件 &lt;code&gt;build&lt;/code&gt; 脚本完成。</target>
        </trans-unit>
        <trans-unit id="83f85d6ad4060b053a8ab58108f8c7af7c260fb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;postinstall&lt;/code&gt; script will run on every installation of &lt;code&gt;node_modules&lt;/code&gt;, including those performed by &lt;code&gt;ng update&lt;/code&gt; and &lt;code&gt;ng add&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9a176b63dc85b5e46e29f971649dca0d030c2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;power-booster.component.ts&lt;/code&gt; component demonstrates how to use the pipe, specifying a value (&lt;code&gt;2&lt;/code&gt;) and the exponent parameter (&lt;code&gt;10&lt;/code&gt;). Figure 2 shows the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f54f6369cce6d94790b617c953d163b4600e42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; property holds the &lt;a href=&quot;dependency-injection#token&quot;&gt;token&lt;/a&gt; that serves as the key for both locating a dependency value and configuring the injector.</source>
          <target state="translated">在 &lt;code&gt;provide&lt;/code&gt; 物业持有&lt;a href=&quot;dependency-injection#token&quot;&gt;令牌&lt;/a&gt;充当两个定位依赖值和配置喷油器的关键。</target>
        </trans-unit>
        <trans-unit id="a6a8cd1e8964b491959fc9628f591fbf11bb2fd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers&lt;/code&gt; array</source>
          <target state="translated">的 &lt;code&gt;providers&lt;/code&gt; 阵列</target>
        </trans-unit>
        <trans-unit id="eb886a89d7d45147e0470f5ef761dd6a685b7e73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers&lt;/code&gt; array shows how you might use the different provider-definition keys; &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;useClass&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;providers&lt;/code&gt; 阵列说明了如何使用不同的提供者定义键; &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;useClass&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d98bd1406a5dd084ef8572318787a9a5c06f284d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers&lt;/code&gt; array shows how you might use the different provider-definition keys; &lt;code&gt;useValue&lt;/code&gt;, &lt;code&gt;useClass&lt;/code&gt;, &lt;code&gt;useExisting&lt;/code&gt;, or &lt;code&gt;useFactory&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378b927aad6f36c10f879731b976a6e0020b6868" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers&lt;/code&gt; options configure the NgModule's injector to provide localization dependencies to members.</source>
          <target state="translated">该 &lt;code&gt;providers&lt;/code&gt; 的选项配置NgModule的喷油器提供本地化的依赖关系成员。</target>
        </trans-unit>
        <trans-unit id="a2194540daca9db4bdf4841e3d15d29a4b883bcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queryParamsHandling&lt;/code&gt; feature also provides a &lt;code&gt;merge&lt;/code&gt; option, which preserves and combines the current query parameters with any provided query parameters when navigating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a915b7bcf4b039c4d484c3a91457d8dafdb5258" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queryParamsHandling&lt;/code&gt; feature also provides a &lt;code&gt;merge&lt;/code&gt; option, which will preserve and combine the current query parameters with any provided query parameters when navigating.</source>
          <target state="translated">该 &lt;code&gt;queryParamsHandling&lt;/code&gt; 功能还提供一个 &lt;code&gt;merge&lt;/code&gt; 的选项，这将在导航时使用任何提供的查询参数保存并结合当前的查询参数。</target>
        </trans-unit>
        <trans-unit id="4110d1ad5861201ed643c3622878a03e4b882b2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readonly&lt;/code&gt; assignment guard can't prevent deep updates and, in particular, it can't prevent you from modifying a property of a request body object.</source>
          <target state="translated">该 &lt;code&gt;readonly&lt;/code&gt; 分配后卫无法阻止深层的更新，尤其是，它不能阻止你修改请求主体对象的属性。</target>
        </trans-unit>
        <trans-unit id="4552a998362626aab9347940b3a60b9130370b8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ready&lt;/code&gt; callback function is invoked inside the Angular zone, therefore it does not require a call to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;ready&lt;/code&gt; 的回调函数被调用的角度带内，因此不需要对呼叫 &lt;code&gt;$apply()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9b29f091624bf252b25bbd274d2afa6a162bf2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;region&lt;/code&gt; value, &lt;code&gt;&quot;class&quot;&lt;/code&gt;, is the name of the &lt;code&gt;#docregion&lt;/code&gt; in the source file. Confirm that by looking at &lt;code&gt;content/examples/docs-style-guide/src/app/app.module.ts&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;region&lt;/code&gt; 价值， &lt;code&gt;&quot;class&quot;&lt;/code&gt; ，是名 &lt;code&gt;#docregion&lt;/code&gt; 源文件英寸 通过查看 &lt;code&gt;content/examples/docs-style-guide/src/app/app.module.ts&lt;/code&gt; 确认</target>
        </trans-unit>
        <trans-unit id="da87e99d42c13b635059d2acd261bddbab7185a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;required&lt;/code&gt; attribute is still present. While it's not necessary for validation purposes, you may want to keep it in your template for CSS styling or accessibility reasons.</source>
          <target state="translated">的 &lt;code&gt;required&lt;/code&gt; 属性仍然存在。尽管出于验证目的不是必需的，但出于CSS样式或可访问性的原因，您可能希望将其保留在模板中。</target>
        </trans-unit>
        <trans-unit id="39107654150053cf81cb764fb0b18adc5eabcb3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;responseType&lt;/code&gt; value determines how a successful response body is parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a430ac49ac8d8d424bc937de23c156f47d8f9114" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rootDir&lt;/code&gt; specifies that your &lt;code&gt;schematics/&lt;/code&gt; folder contains the input files to be compiled.</source>
          <target state="translated">该 &lt;code&gt;rootDir&lt;/code&gt; 指定您的 &lt;code&gt;schematics/&lt;/code&gt; 文件夹中包含输入文件进行编译。</target>
        </trans-unit>
        <trans-unit id="b0360411d35f5172538620aa73c42c2a60819e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route.snapshot&lt;/code&gt; is a static image of the route information shortly after the component was created.</source>
          <target state="translated">该 &lt;code&gt;route.snapshot&lt;/code&gt; 是的组件创建后不久，路由信息静态图像。</target>
        </trans-unit>
        <trans-unit id="98c2a703b9341731e25cca1e1ac8295d6ba802c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route.snapshot&lt;/code&gt; provides the initial value of the route parameter map. You can access the parameters directly without subscribing or adding observable operators. It's much simpler to write and read:</source>
          <target state="translated">所述 &lt;code&gt;route.snapshot&lt;/code&gt; 提供路线参数地图的初始值。您可以直接访问参数，而无需订阅或添加可观察的运算符。编写和阅读要简单得多：</target>
        </trans-unit>
        <trans-unit id="8953d9203d44b502aeb08833c884cd6a43672586" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schematics&lt;/code&gt; object describes the named schematics that are part of this collection.</source>
          <target state="translated">该 &lt;code&gt;schematics&lt;/code&gt; 对象描述命名的原理图是该集合的一部分。</target>
        </trans-unit>
        <trans-unit id="19be2e2a404eeed259e2935213f5db1066e7e258" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schematics&lt;/code&gt; property lists named schematics that belong to this collection. Each schematic has a plain-text description, and points to the generated entry function in the main file.</source>
          <target state="translated">该 &lt;code&gt;schematics&lt;/code&gt; 属性列表命名属于该集合原理图。每个原理图都有一个纯文本描述，并指向主文件中生成的入口函数。</target>
        </trans-unit>
        <trans-unit id="94130bec33e1eb60cd02513d2b2f41b947b417a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scope.$apply()&lt;/code&gt; is how AngularJS detects changes and updates data bindings. After every event that occurs, &lt;code&gt;scope.$apply()&lt;/code&gt; gets called. This is done either automatically by the framework, or manually by you.</source>
          <target state="translated">该 &lt;code&gt;scope.$apply()&lt;/code&gt; 是如何AngularJS检测变化和更新数据绑定。发生每个事件后，都会调用 &lt;code&gt;scope.$apply()&lt;/code&gt; 。这可以由框架自动完成，也可以由您手动完成。</target>
        </trans-unit>
        <trans-unit id="3c8fe632791fdc7a518369563a44ed949ab9ffe7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;searchTerms&lt;/code&gt; RxJS subject</source>
          <target state="translated">该 &lt;code&gt;searchTerms&lt;/code&gt; RxJS主题</target>
        </trans-unit>
        <trans-unit id="8c1b03055bc764bd760bdc91ac7b76ad9b62de32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;searchTerms&lt;/code&gt; property is an RxJS &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;searchTerms&lt;/code&gt; 属性是一个RxJS &lt;code&gt;Subject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4280fbbc633dd4cab834f13d28eb3c3882a952a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;searchText$&lt;/code&gt; is the sequence of search-box values coming from the user. It's defined as an RxJS &lt;code&gt;Subject&lt;/code&gt;, which means it is a multicasting &lt;code&gt;Observable&lt;/code&gt; that can also emit values for itself by calling &lt;code&gt;next(value)&lt;/code&gt;, as happens in the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;searchText$&lt;/code&gt; 是搜索框的值来自用户的序列。它被定义为RxJS &lt;code&gt;Subject&lt;/code&gt; ，这意味着它是一个多播 &lt;code&gt;Observable&lt;/code&gt; ，也可以通过调用 &lt;code&gt;next(value)&lt;/code&gt; 来自身发出值，就像在 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; 方法中一样。</target>
        </trans-unit>
        <trans-unit id="6916edc889efd59e821e9e69f594ee4b8ec65909" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;searchText$&lt;/code&gt; is the sequence of search-box values coming from the user. It's defined as an RxJS &lt;code&gt;Subject&lt;/code&gt;, which means it is a multicasting &lt;code&gt;Observable&lt;/code&gt; that can also emit values for itself by calling &lt;code&gt;next(value)&lt;/code&gt;, as happens in the &lt;code&gt;search()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ad0c5b8da43c7b6de6250e8195a93c15204d6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; clause, similar to the &lt;code&gt;plural&lt;/code&gt; clause, marks choices for alternate text based on your defined string values. For example, the following clause in the component template binds to the component's &lt;code&gt;gender&lt;/code&gt; property, which outputs one of the following string values: &quot;male&quot;, &quot;female&quot; or &quot;other&quot;. The clause maps those values to the appropriate translations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ef4e3c3557c47427af418f305913be1f3a5488" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;selector&lt;/code&gt; attribute is a CSS selector that defines where on the page the component should go. In AngularJS you do matching based on component names, but in Angular you have these explicit selectors. This one will match elements with the name &lt;code&gt;phone-list&lt;/code&gt;, just like the AngularJS version did.</source>
          <target state="translated">在 &lt;code&gt;selector&lt;/code&gt; 属性是一个CSS选择器，定义了页面上的组件应该去。在AngularJS中，您基于组件名称进行匹配，但在Angular中，您具有这些显式选择器。就像AngularJS版本一样，这将匹配名称为 &lt;code&gt;phone-list&lt;/code&gt; 的元素。</target>
        </trans-unit>
        <trans-unit id="11d9b9f6d8cdb36365862fee5c7e6c716ebb3596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;selector&lt;/code&gt; identifies the component. The selector is the name you give the Angular component when it is rendered as an HTML element on the page. By convention, Angular component selectors begin with the prefix &lt;code&gt;app-&lt;/code&gt;, followed by the component name.</source>
          <target state="translated">所述 &lt;code&gt;selector&lt;/code&gt; 识别的组件。选择器是当您将Angular组件呈现为页面上的HTML元素时提供的名称。按照惯例，Angular组件选择器以前缀 &lt;code&gt;app-&lt;/code&gt; 开头，后跟组件名称。</target>
        </trans-unit>
        <trans-unit id="263b313ccd333a2262c31082a98e1e63586d8640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sendRequest&lt;/code&gt; function creates a &lt;a href=&quot;http#immutability&quot;&gt;request clone&lt;/a&gt; without headers because the npm api forbids them.</source>
          <target state="translated">该 &lt;code&gt;sendRequest&lt;/code&gt; 将函数创建一个&lt;a href=&quot;http#immutability&quot;&gt;请求，克隆&lt;/a&gt;没有头，因为故宫API禁止他们。</target>
        </trans-unit>
        <trans-unit id="98e3960b4dadf77856e4c0c4890e9f3074235a7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup()&lt;/code&gt; function returns an object literal with the variables, such as &lt;code&gt;masterService&lt;/code&gt;, that a test might reference. You don't define &lt;em&gt;semi-global&lt;/em&gt; variables (e.g., &lt;code&gt;let masterService: MasterService&lt;/code&gt;) in the body of the &lt;code&gt;describe()&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;setup()&lt;/code&gt; 函数返回与变量，如对象文本 &lt;code&gt;masterService&lt;/code&gt; ，一个测试可能引用。您无需在 &lt;code&gt;describe()&lt;/code&gt; 主体中定义&lt;em&gt;半全局&lt;/em&gt;变量（例如， &lt;code&gt;let masterService: MasterService&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7e7f39203bb8b9c13e311f0f854788f391b2276e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sizerComponent&lt;/code&gt; template has two buttons that each bind the click event to the &lt;code&gt;inc()&lt;/code&gt; and &lt;code&gt;dec()&lt;/code&gt; methods. When the user clicks one of the buttons, the &lt;code&gt;sizerComponent&lt;/code&gt; calls the corresponding method. Both methods, &lt;code&gt;inc()&lt;/code&gt; and &lt;code&gt;dec()&lt;/code&gt;, call the &lt;code&gt;resize()&lt;/code&gt; method with a &lt;code&gt;+1&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;, which in turn raises the &lt;code&gt;sizeChange&lt;/code&gt; event with the new size value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e385289300fdc537b82f3617d6eaaaf051383e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source-map-explorer&lt;/code&gt; analyzes the source map generated with the bundle and draws a map of all dependencies, showing exactly which classes are included in the bundle.</source>
          <target state="translated">的 &lt;code&gt;source-map-explorer&lt;/code&gt; 分析与所述束产生源地图，并绘制地图上的所有依赖关系，确切地示出了类都包含在束。</target>
        </trans-unit>
        <trans-unit id="ccf897a30f41d2173f77117dd5c06f669759c5a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceMap&lt;/code&gt; option applies for both scripts and styles. You can also choose to output hidden source maps, or resolve vendor package source maps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb8a6726597db869ba6708ca7b5b6a4986d3a3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src/app/app.module.ts&lt;/code&gt; file has a good example of a nested region.</source>
          <target state="translated">在 &lt;code&gt;src/app/app.module.ts&lt;/code&gt; 文件有一个嵌套区域的一个很好的例子。</target>
        </trans-unit>
        <trans-unit id="202bb3ece99aa9f958aaeb45fbc17d65040b889f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src/main.ts&lt;/code&gt; is a simple example of a file with a single &lt;em&gt;#docregion&lt;/em&gt; at the top of the file.</source>
          <target state="translated">所述 &lt;code&gt;src/main.ts&lt;/code&gt; 是具有单个文件的一个简单的例子&lt;em&gt;#docregion&lt;/em&gt;在该文件的顶部。</target>
        </trans-unit>
        <trans-unit id="c4ebea686b86ed2e39ae542821868ac054705e37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src/ngsw-config.json&lt;/code&gt; configuration file specifies which files and data URLs the Angular service worker should cache and how it should update the cached files and data. The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; processes the configuration file during &lt;code&gt;ng build --prod&lt;/code&gt;. Manually, you can process it with the &lt;code&gt;ngsw-config&lt;/code&gt; tool:</source>
          <target state="translated">在 &lt;code&gt;src/ngsw-config.json&lt;/code&gt; 配置文件指定哪些文件和数据的URL的角度服务工作者应该缓存以及它如何更新缓存文件和数据。该&lt;a href=&quot;cli&quot;&gt;角CLI&lt;/a&gt;处理过程中的配置文件 &lt;code&gt;ng build --prod&lt;/code&gt; 。您可以手动使用 &lt;code&gt;ngsw-config&lt;/code&gt; 工具进行处理：</target>
        </trans-unit>
        <trans-unit id="d1edd2e05f84370637e39aec6246e210e01c09b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;styles&lt;/code&gt; property takes an array of strings that contain the CSS rule declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77201400a17a80e45079ecd99dd04f439106322c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;submit&lt;/code&gt; event is emitted by the &lt;code&gt;form&lt;/code&gt; tag using the native DOM event. You trigger the event by clicking a button with &lt;code&gt;submit&lt;/code&gt; type. This allows the user to press the &lt;strong&gt;Enter&lt;/strong&gt; key to submit the completed form.</source>
          <target state="translated">在 &lt;code&gt;submit&lt;/code&gt; 活动是由发射 &lt;code&gt;form&lt;/code&gt; 使用原生的DOM事件标签。您可以通过单击 &lt;code&gt;submit&lt;/code&gt; 类型的按钮来触发事件。这使用户可以按&lt;strong&gt;Enter&lt;/strong&gt;键提交完整的表单。</target>
        </trans-unit>
        <trans-unit id="251e43a05f33d8e9cc990fef4b501d01abd583d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subscribe()&lt;/code&gt; method takes a JavaScript object (called an &lt;a href=&quot;glossary#observer&quot;&gt;observer&lt;/a&gt;) with up to three callbacks, one for each type of notification that an observable can deliver:</source>
          <target state="translated">所述 &lt;code&gt;subscribe()&lt;/code&gt; 方法以一个JavaScript对象（称为&lt;a href=&quot;glossary#observer&quot;&gt;观察者&lt;/a&gt;）最多三个回调，一个用于每个类型的通知可观察到的可以提供：</target>
        </trans-unit>
        <trans-unit id="5a5783ba2b920d9635fe9461bd4e46971ccf2eb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subscribe()&lt;/code&gt; method takes a success (&lt;code&gt;next&lt;/code&gt;) and fail (&lt;code&gt;error&lt;/code&gt;) callback. Make sure you provide &lt;em&gt;both&lt;/em&gt; callbacks so that you capture errors. Neglecting to do so produces an asynchronous uncaught observable error that the test runner will likely attribute to a completely different test.</source>
          <target state="translated">该 &lt;code&gt;subscribe()&lt;/code&gt; 方法需要一个成功的（ &lt;code&gt;next&lt;/code&gt; ）和失败（ &lt;code&gt;error&lt;/code&gt; ）回调。确保&lt;em&gt;同时&lt;/em&gt;提供&lt;em&gt;两个&lt;/em&gt;回调，以便捕获错误。忽略此操作会产生一个异步未捕获的可观察到的错误，测试运行程序可能会将其归因于完全不同的测试。</target>
        </trans-unit>
        <trans-unit id="8791607c61c0f05713a0307ef28d52145a479306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switchMap()&lt;/code&gt; operator has three important characteristics.</source>
          <target state="translated">该 &lt;code&gt;switchMap()&lt;/code&gt; 操作有三个重要的特点。</target>
        </trans-unit>
        <trans-unit id="86121707cc28f8a72bb7aa24c90f97195ae22d31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switchMap()&lt;/code&gt; operator takes a function argument that returns an &lt;code&gt;Observable&lt;/code&gt;. In the example, &lt;code&gt;PackageSearchService.search&lt;/code&gt; returns an &lt;code&gt;Observable&lt;/code&gt;, as other data service methods do. If a previous search request is still in-flight (as when the network connection is poor), the operator cancels that request and sends a new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e89baf59c798f66de4b3a1d896130098da7dea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switchMap&lt;/code&gt; operator also cancels previous in-flight requests. If the user re-navigates to this route with a new &lt;code&gt;id&lt;/code&gt; while the &lt;code&gt;HeroService&lt;/code&gt; is still retrieving the old &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;switchMap&lt;/code&gt; discards that old request and returns the hero for the new &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;switchMap&lt;/code&gt; 运营商也取消以前的飞行要求。如果用户重新定位到这条路线与新的 &lt;code&gt;id&lt;/code&gt; ，而 &lt;code&gt;HeroService&lt;/code&gt; 仍然检索旧的 &lt;code&gt;id&lt;/code&gt; ， &lt;code&gt;switchMap&lt;/code&gt; 丢弃旧的请求，并返回英雄的新 &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7be7153b64c1432ee8505e6e1853e08c4af23b1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switchMap&lt;/code&gt; operator does two things. It flattens the &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; that &lt;code&gt;HeroService&lt;/code&gt; returns and cancels previous pending requests. If the user re-navigates to this route with a new &lt;code&gt;id&lt;/code&gt; while the &lt;code&gt;HeroService&lt;/code&gt; is still retrieving the old &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;switchMap&lt;/code&gt; discards that old request and returns the hero for the new &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f92ffc98bcb36aa1c882663131002f05e065a2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;templateUrl&lt;/code&gt; property points to a separate file for the template HTML.</source>
          <target state="translated">该 &lt;code&gt;templateUrl&lt;/code&gt; 属性点为模板HTML一个单独的文件。</target>
        </trans-unit>
        <trans-unit id="e7b301cb1df5e9071174c9086184fff5dcc8819a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thresholds&lt;/code&gt; property causes the tool to enforce a minimum of 80% code coverage when the unit tests are run in the project.</source>
          <target state="translated">该 &lt;code&gt;thresholds&lt;/code&gt; 属性会导致当单元测试的项目有运行执行最低80％的代码覆盖率的工具。</target>
        </trans-unit>
        <trans-unit id="f998cca1a6cbbd1bfbc79167fe0b64cfb77fb4ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timings&lt;/code&gt; parameter takes a string defined in three parts.</source>
          <target state="translated">的 &lt;code&gt;timings&lt;/code&gt; 参数发生在三个部分中定义的字符串。</target>
        </trans-unit>
        <trans-unit id="83fc825d674ac468c5e028de026f937ce6df1287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform&lt;/code&gt; method is essential to a pipe. The &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt;&lt;em&gt;interface&lt;/em&gt; defines that method and guides both tooling and the compiler. Technically, it's optional; Angular looks for and executes the &lt;code&gt;transform&lt;/code&gt; method regardless.</source>
          <target state="translated">的 &lt;code&gt;transform&lt;/code&gt; 方法是将管必不可少的。所述 &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; &lt;em&gt;接口&lt;/em&gt;定义了方法和指南两个模具和编译器。从技术上讲，它是可选的；Angular 无论如何都会寻找并执行 &lt;code&gt;transform&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="970c3e531a96b857b5407a5716c7ae81e934f401" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tsconfig.json&lt;/code&gt; looks like this:</source>
          <target state="translated">该 &lt;code&gt;tsconfig.json&lt;/code&gt; 看起来是这样的：</target>
        </trans-unit>
        <trans-unit id="1497abe2d60e017e56bc96d27cab2a044a44f729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url()&lt;/code&gt; method reads source files from your filesystem, relative to the schematic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc1706a02388342ae67afeb45237c3d7508da61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useClass&lt;/code&gt; provider key lets you create and return a new instance of the specified class.</source>
          <target state="translated">该 &lt;code&gt;useClass&lt;/code&gt; 提供商键可以让你创建并返回指定类的新实例。</target>
        </trans-unit>
        <trans-unit id="5681ccda9b1d2143ce5b503657b19dfe1f04e77f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useExisting&lt;/code&gt; provider key lets you map one token to another. In effect, the first token is an &lt;em&gt;alias&lt;/em&gt; for the service associated with the second token, creating two ways to access the same service object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44beea326133a07d582e720ef9523e833171f6ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useFactory&lt;/code&gt; field tells Angular that the provider is a factory function whose implementation is &lt;code&gt;heroServiceFactory&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0315670d1b1ee3186b18e2d0b131bffe28309147" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useFactory&lt;/code&gt; provider key lets you create a dependency object by calling a factory function, as in the following example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5ad9a619c838440e376c0440e8b7fcf44e692e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useHash&lt;/code&gt; property defaults to &lt;code&gt;false&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; defaults to an empty &lt;code&gt;string&lt;/code&gt;. Pass the configuration object to override the defaults.</source>
          <target state="translated">该 &lt;code&gt;useHash&lt;/code&gt; 属性默认为 &lt;code&gt;false&lt;/code&gt; ，并 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; 默认为空 &lt;code&gt;string&lt;/code&gt; 。传递配置对象以覆盖默认值。</target>
        </trans-unit>
        <trans-unit id="8309209875bd091e2230b33046bfd662f9462513" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useHash&lt;/code&gt; property defaults to &lt;code&gt;false&lt;/code&gt;, and the &lt;code&gt;hashPrefix&lt;/code&gt; defaults to an empty &lt;code&gt;string&lt;/code&gt;. Pass the configuration object to override the defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f73f12a1042cc5a37d5219d0bdd859b38d3d738" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useValue&lt;/code&gt; key lets you associate a fixed value with a DI token. Use this technique to provide &lt;em&gt;runtime configuration constants&lt;/em&gt; such as website base addresses and feature flags. You can also use a value provider in a unit test to provide mock data in place of a production data service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac27e4b9fb2cce116f77c1cedfc5db8b028a144" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;validate()&lt;/code&gt; functions must return a Promise or an observable,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d232eaaf4baaffc4ab4f10a822fa23f92ba3c9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;withRefresh&lt;/code&gt; option is explained &lt;a href=&quot;http#cache-refresh&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;withRefresh&lt;/code&gt; 选项解释&lt;a href=&quot;http#cache-refresh&quot;&gt;如下&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5a9827f2927350bd733138c7d14854c368b34cb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;workspace projects&lt;/code&gt; object contains all the project-specific configuration information.</source>
          <target state="translated">该 &lt;code&gt;workspace projects&lt;/code&gt; 对象包含所有项目的具体配置信息。</target>
        </trans-unit>
        <trans-unit id="db4393ab4ed83533b6fd3b84f5541ee8b1e21f61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;x-prompt&lt;/code&gt; field syntax supports a long form for cases where you require additional customization and control over the prompt. In this form, the &lt;code&gt;x-prompt&lt;/code&gt; field value is a JSON object with subfields that customize the behavior of the prompt.</source>
          <target state="translated">在 &lt;code&gt;x-prompt&lt;/code&gt; 字段语法支持长格式，你需要额外的定制和控制的提示的情况。在这种形式中， &lt;code&gt;x-prompt&lt;/code&gt; 字段值是带有子字段的JSON对象，这些子字段可自定义提示的行为。</target>
        </trans-unit>
        <trans-unit id="3d90bb925c813a0b9d2c883e18e2532b96b08fd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{hero.name}}&lt;/code&gt;&lt;a href=&quot;displaying-data#interpolation&quot;&gt;&lt;em&gt;interpolation&lt;/em&gt;&lt;/a&gt; displays the component's &lt;code&gt;hero.name&lt;/code&gt; property value within the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">的 &lt;code&gt;{{hero.name}}&lt;/code&gt; &lt;a href=&quot;displaying-data#interpolation&quot;&gt;&lt;em&gt;插值&lt;/em&gt;&lt;/a&gt;显示组件的 &lt;code&gt;hero.name&lt;/code&gt; 的内属性值 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="90d7daa71e62572b6bccfbeb192b5e244292312c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{{hero.name}}&lt;/code&gt;&lt;a href=&quot;interpolation&quot;&gt;&lt;em&gt;interpolation&lt;/em&gt;&lt;/a&gt; displays the component's &lt;code&gt;hero.name&lt;/code&gt; property value within the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600a6011a885e1574b4cf2f04310a223dfb82932" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;#docregion&lt;/em&gt; comment begins a code snippet region. Every line of code &lt;em&gt;after&lt;/em&gt; that comment belongs in the region &lt;em&gt;until&lt;/em&gt; the code fragment processor encounters the end of the file or a closing &lt;em&gt;#enddocregion&lt;/em&gt;.</source>
          <target state="translated">该&lt;em&gt;#docregion&lt;/em&gt;注释开始代码段区域。该注释&lt;em&gt;之后的&lt;/em&gt;每一行代码都属于该区域，&lt;em&gt;直到&lt;/em&gt;代码片段处理器遇到文件结尾或结束&lt;em&gt;#enddocregion为止&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="09ad083d54cf158dabf6073214d23611fea930ee" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;#docregion&lt;/em&gt; is the most important kind of code snippet markup.</source>
          <target state="translated">该&lt;em&gt;#docregion&lt;/em&gt;是最重要的一种代码片段标记。</target>
        </trans-unit>
        <trans-unit id="c02d5e0186f7578d49fc4f8de24aab78e198fd8c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;#docregion&lt;/em&gt; with no name is the &lt;em&gt;default region&lt;/em&gt;. Do &lt;em&gt;not&lt;/em&gt; set the &lt;code&gt;region&lt;/code&gt; attribute when referring to the default &lt;em&gt;#docregion&lt;/em&gt;.</source>
          <target state="translated">没有名称的&lt;em&gt;#docregion&lt;/em&gt;是&lt;em&gt;默认区域&lt;/em&gt;。不要&lt;em&gt;不&lt;/em&gt;设置 &lt;code&gt;region&lt;/code&gt; 指的是默认的属性时&lt;em&gt;#docregion&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="551fb2af6ce44839250b3c60015b1a1f9e111031" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&amp;lt;base href&amp;gt;&lt;/em&gt;</source>
          <target state="translated">所述&lt;em&gt;&amp;lt;基本href&amp;gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="59a4dbde46d9770b16233eaf16d19d577b5cf162" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;AfterContent&lt;/em&gt; hooks concern &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt;, the child components that Angular projected into the component.</source>
          <target state="translated">该&lt;em&gt;AfterContent&lt;/em&gt;钩关注 &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; ，孩子组件角投射到组件。</target>
        </trans-unit>
        <trans-unit id="f0d2a411403b9c6d4f6d980b63bb02aa5a96e5e8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;AfterContent&lt;/em&gt; sample explores the &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;()&lt;/code&gt; hooks that Angular calls &lt;em&gt;after&lt;/em&gt; Angular projects external content into the component.</source>
          <target state="translated">所述&lt;em&gt;AfterContent&lt;/em&gt;样品探索 &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;()&lt;/code&gt; 钩住该角呼叫&lt;em&gt;后&lt;/em&gt;角项目外部内容到组件。</target>
        </trans-unit>
        <trans-unit id="fe6a5ec79638be9e0a3986c4c022d9e46840c657" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;AfterView&lt;/em&gt; hooks concern &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt;, the child components whose element tags appear &lt;em&gt;within&lt;/em&gt; the component's template.</source>
          <target state="translated">该&lt;em&gt;AfterView&lt;/em&gt;钩关注 &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt; ，子组件，其元素标签显示&lt;em&gt;内部&lt;/em&gt;组件的模板。</target>
        </trans-unit>
        <trans-unit id="3dfed87bca66b44e4a6482e1ba65840ed36b5bf4" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;AfterView&lt;/em&gt; sample explores the &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt; hooks that Angular calls &lt;em&gt;after&lt;/em&gt; it creates a component's child views.</source>
          <target state="translated">该&lt;em&gt;AfterView&lt;/em&gt;样品探索 &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt; 就会把这个角的呼叫&lt;em&gt;后&lt;/em&gt;它会创建一个组件的子视图。</target>
        </trans-unit>
        <trans-unit id="a02b3def534749278a0fa19f46335219b7a2c87a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Back&lt;/em&gt; and &lt;em&gt;Save&lt;/em&gt; buttons on the Details page don't work.</source>
          <target state="translated">&amp;ldquo; 详细信息&amp;rdquo;页面上的&amp;ldquo;上&lt;em&gt;一步&amp;rdquo;&lt;/em&gt;和&amp;ldquo; &lt;em&gt;保存&amp;rdquo;&lt;/em&gt;按钮不起作用。</target>
        </trans-unit>
        <trans-unit id="26812ee9d2705615518cee0d2be8d4b1f022ddbf" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;ComponentFixture&lt;/em&gt;</source>
          <target state="translated">该&lt;em&gt;ComponentFixture&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="17fe33d0dae8927c14c9294e1b5e47dcd88f9bc8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;DoCheck&lt;/em&gt; sample extends the &lt;em&gt;OnChanges&lt;/em&gt; sample with the following &lt;code&gt;ngDoCheck()&lt;/code&gt; hook:</source>
          <target state="translated">所述&lt;em&gt;DoCheck&lt;/em&gt;样品延伸&lt;em&gt;OnChanges&lt;/em&gt;用以下示例 &lt;code&gt;ngDoCheck()&lt;/code&gt; 钩：</target>
        </trans-unit>
        <trans-unit id="66f7b097f518f662624a2fe89fa23bde67722c64" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Hero Employment Agency&lt;/em&gt; uses this form to maintain personal information about heroes. Every hero needs a job. It's the company mission to match the right hero with the right crisis.</source>
          <target state="translated">该&lt;em&gt;英雄就业局&lt;/em&gt;利用这种形式来维护英雄的个人信息。每个英雄都需要一份工作。将合适的英雄与合适的危机相匹配是公司的使命。</target>
        </trans-unit>
        <trans-unit id="d3402fb21166e9ae4d2d51d781786ab5a98ca52d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;History&lt;/em&gt; log demonstrates that messages travel in both directions between the parent &lt;code&gt;MissionControlComponent&lt;/code&gt; and the &lt;code&gt;AstronautComponent&lt;/code&gt; children, facilitated by the service:</source>
          <target state="translated">在&lt;em&gt;历史&lt;/em&gt;记录表明，在消息母公司之间的双向传播 &lt;code&gt;MissionControlComponent&lt;/code&gt; 和 &lt;code&gt;AstronautComponent&lt;/code&gt; 孩子，由服务便利：</target>
        </trans-unit>
        <trans-unit id="2b32c125ecd1669f448ec3bf41c296c4bafe6250" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Name&lt;/em&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; control has the HTML5 &lt;code&gt;required&lt;/code&gt; attribute; the &lt;em&gt;Alter Ego&lt;/em&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; control does not because &lt;code&gt;alterEgo&lt;/code&gt; is optional.</source>
          <target state="translated">的&lt;em&gt;名称&lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 控制具有HTML5 &lt;code&gt;required&lt;/code&gt; 属性; 的&lt;em&gt;改变自我&lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 控制不会因为 &lt;code&gt;alterEgo&lt;/code&gt; 是可选的。</target>
        </trans-unit>
        <trans-unit id="e2265d664f6eff573fc5ee3934aa756169219d40" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;NgModel&lt;/em&gt; directive doesn't just track state; it updates the control with special Angular CSS classes that reflect the state. You can leverage those class names to change the appearance of the control.</source>
          <target state="translated">该&lt;em&gt;NgModel&lt;/em&gt;指令不只是跟踪状态; 它使用反映状态的特殊Angular CSS类更新控件。您可以利用这些类名来更改控件的外观。</target>
        </trans-unit>
        <trans-unit id="bbea351a6ffcf13594aaadf605f66f73429d2df2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Parent Finder&lt;/em&gt; sample is full of circular class references that are impossible to break.</source>
          <target state="translated">该&lt;em&gt;家长查找&lt;/em&gt;样品全部循环类引用是不可能被破解的。</target>
        </trans-unit>
        <trans-unit id="6c4600462959ddfa37d5891549dbb884fbecfd73" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Reset&lt;/em&gt; button clears the &lt;code&gt;heroes&lt;/code&gt; list. Angular removes all hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements from the DOM and destroys their spy directives at the same time. The spy's &lt;code&gt;ngOnDestroy()&lt;/code&gt; method reports its last moments.</source>
          <target state="translated">该&lt;em&gt;复位&lt;/em&gt;按钮清除 &lt;code&gt;heroes&lt;/code&gt; 名单。Angular 从DOM中删除所有hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素，并同时销毁其spy指令。间谍的 &lt;code&gt;ngOnDestroy()&lt;/code&gt; 方法报告其最后时刻。</target>
        </trans-unit>
        <trans-unit id="c1a352f4be8028751775aca111e668c0a33502ea" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Routing Module&lt;/em&gt;&lt;em&gt;replaces&lt;/em&gt; the routing configuration in the root or feature module. &lt;em&gt;Either&lt;/em&gt; configure routes in the Routing Module &lt;em&gt;or&lt;/em&gt; within the module itself but not in both.</source>
          <target state="translated">所述&lt;em&gt;路由模块&lt;/em&gt;&lt;em&gt;替换&lt;/em&gt;根或特征模块中的路由配置。&lt;em&gt;无论是&lt;/em&gt;配置路由的路由模块&lt;em&gt;或&lt;/em&gt;模块本身之内，但不同时。</target>
        </trans-unit>
        <trans-unit id="0c5f8f5d1924de13765832553932eb057250f18c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Save&lt;/em&gt; button is disabled until the form is in a valid state. When the form is valid, you can click &lt;em&gt;Save&lt;/em&gt; and the app renders the current form values as JSON. This proves that any user input is bound back to the data model. Saving and retrieving the data is an exercise for another time.</source>
          <target state="translated">在表单处于有效状态之前，将禁用&amp;ldquo; &lt;em&gt;保存&amp;rdquo;&lt;/em&gt;按钮。表单有效时，您可以单击&lt;em&gt;保存&lt;/em&gt;，应用程序会将当前表单值呈现为JSON。这证明了任何用户输入都被绑定回数据模型。保存和检索数据是另一次练习。</target>
        </trans-unit>
        <trans-unit id="7a30cd1086fc126cdbda17264a63b67bfd463386" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Tour of Heroes&lt;/em&gt; app that you build helps a staffing agency manage its stable of heroes. The app has many of the features you'd expect to find in any data-driven application. The finished app acquires and displays a list of heroes, edits a selected hero's detail, and navigates among different views of heroic data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cece2edbaa93c78578f1816377db1a1619b69bba" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;attribute selector&lt;/em&gt; pattern explains the name of this kind of directive.</source>
          <target state="translated">该&lt;em&gt;属性选择器&lt;/em&gt;模式解释了这种指令的名称。</target>
        </trans-unit>
        <trans-unit id="1b48144f080e3a52ebd72bed691562e0a4b05ef3" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;cache-then-refresh&lt;/em&gt; option is triggered by the presence of a &lt;strong&gt;custom &lt;code&gt;x-refresh&lt;/code&gt; header&lt;/strong&gt;.</source>
          <target state="translated">该&lt;em&gt;高速缓存然后刷新&lt;/em&gt;选项是由存在触发&lt;strong&gt;定制 &lt;code&gt;x-refresh&lt;/code&gt; 头&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cd03c6a4b57c507c800b037668226501ef677043" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;cache-then-refresh&lt;/em&gt; option is triggered by the presence of a custom &lt;code&gt;x-refresh&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bffbc638ce2bcff5ac27e43af13ce79019ebe1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;class&lt;/em&gt; is similar to the &lt;code&gt;HeroesComponent&lt;/code&gt; class.</source>
          <target state="translated">该&lt;em&gt;班&lt;/em&gt;是类似 &lt;code&gt;HeroesComponent&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="3b23511daee49c68fc0bd77c760d5aeb2fbfce17" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;consumer&lt;/em&gt; of an injected service doesn't need to know how to create that service. It's the job of the DI framework to create and cache dependencies. The consumer just needs to let the DI framework know which dependencies it needs.</source>
          <target state="translated">注入服务的&lt;em&gt;使用者&lt;/em&gt;不需要知道如何创建该服务。DI框架的工作是创建和缓存依赖项。使用者只需要让DI框架知道它需要哪些依赖项即可。</target>
        </trans-unit>
        <trans-unit id="68169d61d2e3c28071db2b807cf1b4e1b903706c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;expression context&lt;/em&gt; is typically the &lt;em&gt;component&lt;/em&gt; instance. In the following snippets, the &lt;code&gt;recommended&lt;/code&gt; within double curly braces and the &lt;code&gt;itemImageUrl2&lt;/code&gt; in quotes refer to properties of the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">该&lt;em&gt;表达式中&lt;/em&gt;通常是&lt;em&gt;组件&lt;/em&gt;实例。在以下代码段中，双花括号内的 &lt;code&gt;recommended&lt;/code&gt; 字符和 &lt;code&gt;itemImageUrl2&lt;/code&gt; 引号的itemImageUrl2指的是 &lt;code&gt;AppComponent&lt;/code&gt; 的属性。</target>
        </trans-unit>
        <trans-unit id="547e485937ee9a8482d6c575e3337f47c2760a8f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;fixture&lt;/em&gt; methods cause Angular to perform certain tasks on the component tree. Call these method to trigger Angular behavior in response to simulated user action.</source>
          <target state="translated">该&lt;em&gt;夹具&lt;/em&gt;的方法的原因角度对组件树执行某些任务。调用这些方法来触发Angular行为，以响应模拟的用户操作。</target>
        </trans-unit>
        <trans-unit id="281c18d861de6375f500f8737ccbe1fc960a8a5e" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;injector&lt;/em&gt; is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don't have to create injectors.</source>
          <target state="translated">进&lt;em&gt;样器&lt;/em&gt;是主要机构。Angular会在引导过程中为您创建一个应用程序范围的注射器，并根据需要创建其他注射器。您不必创建注射器。</target>
        </trans-unit>
        <trans-unit id="6c1ab60ab4f1d67de0ddd4e00da564b8cd65741d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;link parameters array&lt;/em&gt; contains an object with a single &lt;code&gt;outlets&lt;/code&gt; property whose value is another object keyed by one (or more) outlet names. In this case there is only the &quot;popup&quot; outlet property and its value is another &lt;em&gt;link parameters array&lt;/em&gt; that specifies the &lt;code&gt;compose&lt;/code&gt; route.</source>
          <target state="translated">的&lt;em&gt;链路参数阵列&lt;/em&gt;包含与单个对象 &lt;code&gt;outlets&lt;/code&gt; 属性，其值是由一个（或多个）出口名称键入另一个对象。在这种情况下，只有&amp;ldquo;弹出&amp;rdquo;出口属性，并且它的值是另一个&lt;em&gt;链接参数数组&lt;/em&gt;，用于指定 &lt;code&gt;compose&lt;/code&gt; 路线。</target>
        </trans-unit>
        <trans-unit id="6f8f3c3b5c5041d24c8b8360e46b01aea381f4f8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;local variable&lt;/em&gt; approach is simple and easy. But it is limited because the parent-child wiring must be done entirely within the parent template. The parent component &lt;em&gt;itself&lt;/em&gt; has no access to the child.</source>
          <target state="translated">在&lt;em&gt;局部变量&lt;/em&gt;的方法是简单和容易。但这是有限的，因为父子连线必须完全在父模板内完成。父组件&lt;em&gt;本身&lt;/em&gt;无权访问子组件。</target>
        </trans-unit>
        <trans-unit id="70d69092db75bbbde8d71173eb3a75beeb8e0869" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;next&lt;/em&gt; object</source>
          <target state="translated">在&lt;em&gt;接下来的&lt;/em&gt;对象</target>
        </trans-unit>
        <trans-unit id="680dc53f22865b98fcfe8ea1b8820ef44fdd9a8d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;observe&lt;/em&gt; option specifies how much of the response to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c4875e7d9495788d2aae3a67d641c0812d162a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;overrideComponent&lt;/em&gt; method</source>
          <target state="translated">该&lt;em&gt;overrideComponent&lt;/em&gt;方法</target>
        </trans-unit>
        <trans-unit id="ff0fbcfe3ea4fa514b574eaf8f3d059f8b33db8a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;path&lt;/em&gt; of the route to the destination component.</source>
          <target state="translated">该&lt;em&gt;路径&lt;/em&gt;到目的地组件的路线。</target>
        </trans-unit>
        <trans-unit id="630fa707e54c08a528f955e5bb95d477c9ced61b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;plural&lt;/em&gt; and &lt;em&gt;select&lt;/em&gt; ICU expressions are extracted separately, so they require special attention when preparing for translation.</source>
          <target state="translated">该&lt;em&gt;复数&lt;/em&gt;和&lt;em&gt;选择&lt;/em&gt; ICU表达式分别提取，所以他们对翻译做准备时需要特别注意。</target>
        </trans-unit>
        <trans-unit id="b1863b3c0fe60749f25419b06a221dd2df30c597" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;responseType&lt;/em&gt; option specifies the format in which to return data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec1d5444e649cbb29fb26c5ebedf34c9f05198a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;statement context&lt;/em&gt; is typically the component instance. The &lt;em&gt;deleteHero&lt;/em&gt; in &lt;code&gt;(click)=&quot;deleteHero()&quot;&lt;/code&gt; is a method of the data-bound component.</source>
          <target state="translated">该&lt;em&gt;语句的上下文&lt;/em&gt;是典型的组件实例。所述&lt;em&gt;deleteHero&lt;/em&gt;在 &lt;code&gt;(click)=&quot;deleteHero()&quot;&lt;/code&gt; 是该数据结合的成分的方法。</target>
        </trans-unit>
        <trans-unit id="8e1155de8d03b6d218f6065cbb5b9d44effee80c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;stub component&lt;/em&gt; approach has another advantage. While the stubs in &lt;em&gt;this&lt;/em&gt; example were empty, you could give them stripped-down templates and classes if your tests need to interact with them in some way.</source>
          <target state="translated">该&lt;em&gt;存根组件&lt;/em&gt;的方法还有一个好处。尽管&lt;em&gt;此&lt;/em&gt;示例中的存根为空，但是如果您的测试需要以某种方式与之交互，则可以为它们提供精简的模板和类。</target>
        </trans-unit>
        <trans-unit id="91f269fce15860a4bd882bdab5721a6f6a5432e6" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;target&lt;/em&gt; of a binding is the property or event inside the binding punctuation: &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt; or &lt;code&gt;[()]&lt;/code&gt;.</source>
          <target state="translated">绑定的&lt;em&gt;目标&lt;/em&gt;是绑定标点内的属性或事件： &lt;code&gt;[]&lt;/code&gt; ， &lt;code&gt;()&lt;/code&gt; 或 &lt;code&gt;[()]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ccdd54cecc0f13f83a35d6d76b84a2c2d17459f4" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;tax-return-to-edit&lt;/em&gt; arrives via the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, which is implemented with getters and setters. The setter initializes the component's own instance of the &lt;code&gt;HeroTaxReturnService&lt;/code&gt; with the incoming return. The getter always returns what that service says is the current state of the hero. The component also asks the service to save and restore this tax return.</source>
          <target state="translated">该&lt;em&gt;税退还到编辑&lt;/em&gt;通过到达 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 属性，它与getter和setter方法来实现。设置程序使用传入的返回值初始化组件自己的 &lt;code&gt;HeroTaxReturnService&lt;/code&gt; 实例。吸气剂总是返回该服务所说的英雄当前状态。该组件还要求服务保存并恢复此纳税申报单。</target>
        </trans-unit>
        <trans-unit id="9e36ec033ef8853bb7773e0524c7bcf886af13b5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;template&lt;/em&gt; presents a grid of hero name links.</source>
          <target state="translated">该&lt;em&gt;模板&lt;/em&gt;显示英雄名称链接的网格。</target>
        </trans-unit>
        <trans-unit id="636d367710cec9d2d29ffff2f2fd03967c9e996d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;tick()&lt;/em&gt; function</source>
          <target state="translated">的&lt;em&gt;蜱（）&lt;/em&gt;函数</target>
        </trans-unit>
        <trans-unit id="b73b5928bad05d3f6f07eeb7ee4604ca9d2c626e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Alter Ego&lt;/strong&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; control element does not because &lt;code&gt;alterEgo&lt;/code&gt; is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3bb42799c52e0ebb6f8e858f4a96af7a8b97fc" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Hero Power&lt;/strong&gt; select box is also required, but it doesn't need this kind of error handling because the selection box already constrains the selection to valid values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbd7a46bb1ee20b0c8f13141e85002a327111af" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Main Concepts&lt;/strong&gt; section located in the table of contents contains several topics that explain how to connect the application data in your &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt; to your page-display &lt;a href=&quot;glossary#template&quot;&gt;templates&lt;/a&gt;, to create a complete interactive application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7175187c085f67353fe16a56cd79779c6b4d91da" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Name&lt;/strong&gt; input box is required and clearing it turns the bar red. That indicates that something is wrong, but the user doesn't know what is wrong or what to do about it. You can provide a helpful message by checking for and responding to the control's state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbf6656d06da974b0c76f21411092c5e5610d43" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Name&lt;/strong&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; control element has the HTML5 &lt;code&gt;required&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fe5f3ec6af8a496ebd01cf5cb597e571669f94" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;QuickStart seed&lt;/strong&gt; provides a basic QuickStart playground application and other files necessary for local development. Consequently, there are many files in the project folder on your machine, most of which you can &lt;a href=&quot;file-structure&quot;&gt;learn about later&lt;/a&gt;.</source>
          <target state="translated">该&lt;strong&gt;快速入门种子&lt;/strong&gt;提供必要的当地发展的一个基本的QuickStart操场应用和其他文件。因此，您机器上的项目文件夹中有许多文件，您&lt;a href=&quot;file-structure&quot;&gt;稍后&lt;/a&gt;可以了解其中的大多数文件。</target>
        </trans-unit>
        <trans-unit id="fb3aa4e6ae7ad082bbd31bada71f42f06ba8bb67" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Routing Module&lt;/strong&gt; has several characteristics:</source>
          <target state="translated">该&lt;strong&gt;路由模块&lt;/strong&gt;有几个特点：</target>
        </trans-unit>
        <trans-unit id="849d1c8e18bd79ab64d5f8f2f782ae35aec1f5e0" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Submit&lt;/strong&gt; button has some classes on it for styling. At this point, the form layout is all plain HTML5, with no bindings or directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8431cda422e11c057566eff6e247db10156e3002" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Submit&lt;/strong&gt; button is disabled because &lt;code&gt;profileForm&lt;/code&gt; is invalid due to the required &lt;code&gt;firstName&lt;/code&gt; form control. After you fill out the &lt;code&gt;firstName&lt;/code&gt; input, the form becomes valid and the &lt;strong&gt;Submit&lt;/strong&gt; button is enabled.</source>
          <target state="translated">在&lt;strong&gt;提交&lt;/strong&gt;按钮被禁用，因为 &lt;code&gt;profileForm&lt;/code&gt; 是无效的，由于所需 &lt;code&gt;firstName&lt;/code&gt; 表单控件。填写 &lt;code&gt;firstName&lt;/code&gt; 输入后，该表单将变为有效，并且启用了&lt;strong&gt;Submit&lt;/strong&gt;按钮。</target>
        </trans-unit>
        <trans-unit id="5fef189672083b94d3b83bc834df0b31d7afc9bf" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;empty path&lt;/strong&gt; in the fourth route represents the default path for the application, the place to go when the path in the URL is empty, as it typically is at the start. This default route redirects to the route for the &lt;code&gt;/heroes&lt;/code&gt; URL and, therefore, will display the &lt;code&gt;HeroesListComponent&lt;/code&gt;.</source>
          <target state="translated">该&lt;strong&gt;空路径&lt;/strong&gt;在第四路线代表了应用，去当URL路径是空的，因为它通常是在开始的地方的默认路径。此默认路由重定向到 &lt;code&gt;/heroes&lt;/code&gt; URL 的路由，因此将显示 &lt;code&gt;HeroesListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a7f6d0dd6a950a502cb905ddc90e2fe09d4e93d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;target of a data-binding&lt;/strong&gt; is something in the DOM. Depending on the binding type, the target can be a property (element, component, or directive), an event (element, component, or directive), or sometimes an attribute name. The following table summarizes the targets for the different binding types.</source>
          <target state="translated">&lt;strong&gt;数据绑定&lt;/strong&gt;的&lt;strong&gt;目标&lt;/strong&gt;是DOM中的某些东西。根据绑定类型，目标可以是属性（元素，组件或指令），事件（元素，组件或指令）或有时是属性名称。下表总结了不同绑定类型的目标。</target>
        </trans-unit>
        <trans-unit id="8a78166f7358622c21dbee58ca508e7e826a4e7b" translate="yes" xml:space="preserve">
          <source>The AOT collector does not support the arrow function, &lt;code&gt;() =&amp;gt; new Server()&lt;/code&gt;, in a metadata expression. It generates an error node in place of the function. When the compiler later interprets this node, it reports an error that invites you to turn the arrow function into an &lt;em&gt;exported function&lt;/em&gt;.</source>
          <target state="translated">AOT收集器在元数据表达式中不支持箭头功能 &lt;code&gt;() =&amp;gt; new Server()&lt;/code&gt; 。它代替函数生成一个错误节点。当编译器以后解释该节点时，它报告一个错误，邀请您将arrow函数变成&lt;em&gt;导出的函数&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4ec06e91967a3490f909670fcf275c0084d8ae3a" translate="yes" xml:space="preserve">
          <source>The AOT collector only understands a subset of JavaScript. Define metadata objects with the following limited syntax:</source>
          <target state="translated">AOT收集器只理解JavaScript的一个子集。用以下有限的语法定义元数据对象。</target>
        </trans-unit>
        <trans-unit id="3309ff63faf07832967b0387fa813ffae5dc2636" translate="yes" xml:space="preserve">
          <source>The AOT compiler does not support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot;&gt;function expressions&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, also called &lt;em&gt;lambda&lt;/em&gt; functions.</source>
          <target state="translated">AOT编译器不支持&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot;&gt;函数表达式&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;箭头函数&lt;/a&gt;，也称为&lt;em&gt;lambda&lt;/em&gt;函数。</target>
        </trans-unit>
        <trans-unit id="57076a87d98a096e595ee9049523e81bc3fea517" translate="yes" xml:space="preserve">
          <source>The AOT compiler does not support tagged template expressions; avoid them in metadata expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ec447b5468a57a4699fa18102b133cb26f2424" translate="yes" xml:space="preserve">
          <source>The Ahead-of-Time (AOT) compiler</source>
          <target state="translated">超前时间(AOT)编译器</target>
        </trans-unit>
        <trans-unit id="0f58944803c6d64ef57d8af160113fc77e4a3dba" translate="yes" xml:space="preserve">
          <source>The Angular &lt;a href=&quot;../api/router/routermodule&quot;&gt;&lt;code&gt;RouterModule&lt;/code&gt;&lt;/a&gt; exports two macro static methods, &lt;code&gt;forRoot&lt;/code&gt; and &lt;code&gt;forChild&lt;/code&gt;, to help declare root and child routes. Review the &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/router/src/router_module.ts#L139&quot;&gt;source code&lt;/a&gt; for these methods to see how macros can simplify configuration of complex &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;../api/router/routermodule&quot;&gt; &lt;code&gt;RouterModule&lt;/code&gt; &lt;/a&gt;导出两个宏静态方法 &lt;code&gt;forRoot&lt;/code&gt; 和 &lt;code&gt;forChild&lt;/code&gt; ，以帮助声明根和子路由。查看这些方法的&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/router/src/router_module.ts#L139&quot;&gt;源代码&lt;/a&gt;，以了解宏如何简化复杂的&lt;a href=&quot;ngmodules&quot;&gt;NgModules的&lt;/a&gt;配置。</target>
        </trans-unit>
        <trans-unit id="47e66a7447f54311fa8c78fef83d2b71c3f6c662" translate="yes" xml:space="preserve">
          <source>The Angular &lt;a href=&quot;../guide/attribute-binding#class-binding&quot;&gt;class binding&lt;/a&gt; makes it easy to add and remove a CSS class conditionally. Just add &lt;code&gt;[class.some-css-class]=&quot;some-condition&quot;&lt;/code&gt; to the element you want to style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fb711c3b5e5fe0d0ccfb358c3cf8ff1a218dcc" translate="yes" xml:space="preserve">
          <source>The Angular &lt;a href=&quot;../guide/template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt; makes it easy to add and remove a CSS class conditionally. Just add &lt;code&gt;[class.some-css-class]=&quot;some-condition&quot;&lt;/code&gt; to the element you want to style.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/template-syntax#class-binding&quot;&gt;类绑定&lt;/a&gt;使您可以轻松地有条件地添加和删除CSS类。只需将 &lt;code&gt;[class.some-css-class]=&quot;some-condition&quot;&lt;/code&gt; 到要设置样式的元素即可。</target>
        </trans-unit>
        <trans-unit id="b7237af6c841a21a08e75ad225a0026b3080167a" translate="yes" xml:space="preserve">
          <source>The Angular &lt;a href=&quot;glossary#aot&quot;&gt;ahead-of-time (AOT) compiler&lt;/a&gt; converts your Angular HTML and TypeScript code into efficient JavaScript code during the build phase &lt;em&gt;before&lt;/em&gt; the browser downloads and runs that code. Compiling your application during the build process provides a faster rendering in the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd53a5dd11dba31d91be2abd7e3256203b19030" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; is a grouping element that doesn't interfere with styles or layout because Angular &lt;em&gt;doesn't put it in the DOM&lt;/em&gt;.</source>
          <target state="translated">Angular &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 是一个分组元素，它不会干扰样式或布局，因为Angular &lt;em&gt;不会将其放在DOM中&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="43bb5eb6f6a28633f87170e07fbe299b89367463" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; is an interesting example of an impure pipe. The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; accepts a &lt;code&gt;Promise&lt;/code&gt; or &lt;code&gt;Observable&lt;/code&gt; as input and subscribes to the input automatically, eventually returning the emitted values.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 是一个不纯管道的有趣示例。所述 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 接受 &lt;code&gt;Promise&lt;/code&gt; 或 &lt;code&gt;Observable&lt;/code&gt; 作为输入和订阅该输入自动地，最终返回所发射的值。</target>
        </trans-unit>
        <trans-unit id="044b107dfed7b9441c1745738d1ce4219937db11" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; pipe is similar although some of the parameters have changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b4e117f4e15eeed3be79f6eaca89eed51b2798" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; pipe is similar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd4a1df1710a1e282cc8be9a6f7e030631d0b5f" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;number&lt;/a&gt;&lt;/code&gt; pipe is similar. It provides more functionality when defining the decimal places, as shown in the second example above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7470cb8ba9aa4391c200e394d5eb3fd0ffc1a6a6" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; pipe does the same thing.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; 管道执行相同的操作。</target>
        </trans-unit>
        <trans-unit id="bfc3526882f1ce975b1c02e954b284474cb59122" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;lowercase&lt;/a&gt;&lt;/code&gt; pipe does the same thing.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;lowercase&lt;/a&gt;&lt;/code&gt; 管道执行相同的操作。</target>
        </trans-unit>
        <trans-unit id="810425749aeb3185f4b3f49e48b3f7db25fa3041" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive inserts or removes an element based on a &lt;em&gt;truthy/falsy&lt;/em&gt; condition. To see it in action, add the following paragraph at the bottom of the template:</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 指令根据&lt;em&gt;真实/错误&lt;/em&gt;条件插入或删除元素。要查看它的实际效果，请在模板底部添加以下段落：</target>
        </trans-unit>
        <trans-unit id="bd5e639cdef0d9e6854735f421c2b0e44dd5b4a1" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;()&lt;/code&gt; function creates an &lt;em&gt;indirect&lt;/em&gt; reference that Angular can resolve later.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;()&lt;/code&gt; 函数创建一个&lt;em&gt;间接&lt;/em&gt;引用，Angular以后可以解析该&lt;em&gt;间接&lt;/em&gt;引用。</target>
        </trans-unit>
        <trans-unit id="2497b896b7688ae48300df106650c098f5fdf738" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; facilitates this kind of testing as you'll see in the sections below. But in many cases, &lt;em&gt;testing the component class alone&lt;/em&gt;, without DOM involvement, can validate much of the component's behavior in an easier, more obvious way.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 可以促进这种测试，如以下各节所示。但是在许多情况下，仅&lt;em&gt;测试组件类&lt;/em&gt;而无需DOM参与，就可以以一种更简单，更明显的方式来验证组件的许多行为。</target>
        </trans-unit>
        <trans-unit id="875d83e7c9770ccfa8b1c529613a326325c96e1c" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; class has three static methods for common predicates:</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by&quot;&gt;By&lt;/a&gt;&lt;/code&gt; 类具有三种用于通用谓词的静态方法：</target>
        </trans-unit>
        <trans-unit id="b679eb06adca30297563f49ac88eb9e497fa9839" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; (&quot;the router&quot;) borrows from this model. It can interpret a browser URL as an instruction to navigate to a client-generated view. It can pass optional parameters along to the supporting view component that help it decide what specific content to present. You can bind the router to links on a page and it will navigate to the appropriate application view when the user clicks a link. You can navigate imperatively when the user clicks a button, selects from a drop box, or in response to some other stimulus from any source. And the router logs activity in the browser's history journal so the back and forward buttons work as well.</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; （&amp;ldquo;路由器&amp;rdquo;）从此模型中借用。它可以将浏览器URL解释为导航到客户端生成的视图的指令。可以将可选参数传递到支持视图组件，以帮助其决定要呈现的特定内容。您可以将路由器绑定到页面上的链接，当用户单击链接时，它将导航到相应的应用程序视图。您可以在用户单击按钮，从下拉框选择内容或响应来自任何来源的某些其他刺激时进行命令式导航。路由器将活动记录在浏览器的历史日志中，因此后退和前进按钮也可以工作。</target>
        </trans-unit>
        <trans-unit id="bcb493c9e74833377850a9bc3a6c20403b7af18a" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; NgModule provides a service that lets you define a navigation path among the different application states and view hierarchies in your app. It is modeled on the familiar browser navigation conventions:</source>
          <target state="translated">Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; NgModule提供了一项服务，可让您定义不同应用程序状态之间的导航路径并查看应用程序中的层次结构。它以熟悉的浏览器导航约定为模型：</target>
        </trans-unit>
        <trans-unit id="8b57ea74f53af589a0245e763366fd711bffc4ac" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;DebugElement.triggerEventHandler&lt;/code&gt; can raise &lt;em&gt;any data-bound event&lt;/em&gt; by its &lt;em&gt;event name&lt;/em&gt;. The second parameter is the event object passed to the handler.</source>
          <target state="translated">Angular &lt;code&gt;DebugElement.triggerEventHandler&lt;/code&gt; 可以通过其&lt;em&gt;事件名称&lt;/em&gt;引发&lt;em&gt;任何数据绑定事件&lt;/em&gt;。第二个参数是传递给处理程序的事件对象。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c3c8061180e2eb26c680deaa8488f18159bfd307" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;bootstrapModule&lt;/code&gt; method has a second &lt;code&gt;compilerOptions&lt;/code&gt; parameter that can influence the behavior of the compiler. You can use it to specify the translation providers:</source>
          <target state="translated">Angular &lt;code&gt;bootstrapModule&lt;/code&gt; 方法具有第二个 &lt;code&gt;compilerOptions&lt;/code&gt; 参数，该参数可能会影响编译器的行为。您可以使用它来指定翻译提供者：</target>
        </trans-unit>
        <trans-unit id="bfa5f562ee24d3208771a463b736deb75b60079b" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;currency&lt;/code&gt; pipe is similar although some of the parameters have changed.</source>
          <target state="translated">尽管某些参数已更改，但Angular &lt;code&gt;currency&lt;/code&gt; 管道相似。</target>
        </trans-unit>
        <trans-unit id="f62bb3c73f061003b3faf3aae067e7b55b5dafca" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;date&lt;/code&gt; pipe is similar.</source>
          <target state="translated">Angular &lt;code&gt;date&lt;/code&gt; 管道类似。</target>
        </trans-unit>
        <trans-unit id="fcbe8e4317f36d2d4a4d3ef4bd8ffd65770ba540" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;i18n&lt;/code&gt; attribute marks translatable content. Place it on every element tag whose fixed text is to be translated.</source>
          <target state="translated">Angular &lt;code&gt;i18n&lt;/code&gt; 属性标记可翻译的内容。将其放在要翻译其固定文本的每个元素标签上。</target>
        </trans-unit>
        <trans-unit id="cdf01d2b5b0c515f0663f00d093f35293facf213" translate="yes" xml:space="preserve">
          <source>The Angular &lt;code&gt;number&lt;/code&gt; pipe is similar. It provides more functionality when defining the decimal places, as shown in the second example above.</source>
          <target state="translated">角度 &lt;code&gt;number&lt;/code&gt; 管道相似。如上面第二个示例所示，它在定义小数位时提供了更多功能。</target>
        </trans-unit>
        <trans-unit id="b99b3f86ef5c932dea53e89dd94423d13289d8bf" translate="yes" xml:space="preserve">
          <source>The Angular &lt;em&gt;NgSwitch&lt;/em&gt; is actually a set of cooperating directives: &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;em&gt;NgSwitch&lt;/em&gt;实际上是一组协作指令： &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="04175ded62d1fec12553cfb8f3f2c9d97972748f" translate="yes" xml:space="preserve">
          <source>The Angular &lt;em&gt;fixture&lt;/em&gt; provides the component's element directly through the &lt;code&gt;fixture.nativeElement&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;em&gt;固定装置&lt;/em&gt;直接通过 &lt;code&gt;fixture.nativeElement&lt;/code&gt; 提供组件的元素。</target>
        </trans-unit>
        <trans-unit id="75a9f1c400fe3d6b4e3401b6477de45dccf239a7" translate="yes" xml:space="preserve">
          <source>The Angular &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; enables navigation from one &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt; to the next as users perform application tasks.</source>
          <target state="translated">当用户执行应用程序任务时，Angular &lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;可以从一个&lt;a href=&quot;glossary#view&quot;&gt;视图&lt;/a&gt;导航到下一个视图。</target>
        </trans-unit>
        <trans-unit id="8e0346e973842ce7bf0908428389410a777108b7" translate="yes" xml:space="preserve">
          <source>The Angular AOT compiler extracts &lt;strong&gt;metadata&lt;/strong&gt; to interpret the parts of the application that Angular is supposed to manage. You can specify the metadata explicitly in &lt;strong&gt;decorators&lt;/strong&gt; such as &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, or implicitly in the constructor declarations of the decorated classes. The metadata tells Angular how to construct instances of your application classes and interact with them at runtime.</source>
          <target state="translated">Angular AOT编译器提取&lt;strong&gt;元数据&lt;/strong&gt;来解释应由Angular管理的应用程序部分。您可以在&lt;strong&gt;装饰器（&lt;/strong&gt;例如 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 显式指定元数据，也可以在&lt;strong&gt;装饰&lt;/strong&gt;类的构造函数声明中隐式指定元数据。元数据告诉Angular如何构造应用程序类的实例并在运行时与它们进行交互。</target>
        </trans-unit>
        <trans-unit id="4b8a66ad73b412d255791431bd34d06ff172ffb0" translate="yes" xml:space="preserve">
          <source>The Angular Ahead-of-Time (AOT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code during the build phase &lt;em&gt;before&lt;/em&gt; the browser downloads and runs that code. Compiling your application during the build process provides a faster rendering in the browser.</source>
          <target state="translated">在浏览器下载并运行该代码&lt;em&gt;之前&lt;/em&gt;，Angular Ahead-of-Time（AOT）编译器会在构建阶段将Angular HTML和TypeScript代码转换为高效的JavaScript 代码。在构建过程中编译应用程序可在浏览器中提供更快的渲染速度。</target>
        </trans-unit>
        <trans-unit id="a03f8200944a32e3f51a4b6988b1c544b8ca6333" translate="yes" xml:space="preserve">
          <source>The Angular CI process runs all end-to-end tests for every Angular PR. Angular re-tests the samples after every new version of a sample and every new version of Angular itself.</source>
          <target state="translated">Angular CI过程会对每一个Angular PR运行所有端到端测试。Angular在每一个新版本的样本和每一个新版本的Angular本身之后,都会对样本进行重新测试。</target>
        </trans-unit>
        <trans-unit id="fa5e030af9214f0f4cb5358ab971f2f3bbbe60cc" translate="yes" xml:space="preserve">
          <source>The Angular CLI &lt;code&gt;ng new&lt;/code&gt; command creates a workspace.</source>
          <target state="translated">Angular CLI &lt;code&gt;ng new&lt;/code&gt; 命令创建一个工作区。</target>
        </trans-unit>
        <trans-unit id="d07911428eda07c6d1e17ebfc74e10d6d40d3d5f" translate="yes" xml:space="preserve">
          <source>The Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt; defines an empty &lt;code&gt;styles&lt;/code&gt; array when you create the component with the &lt;code&gt;--inline-style&lt;/code&gt; flag.</source>
          <target state="translated">使用 &lt;code&gt;--inline-style&lt;/code&gt; 标志创建组件时，Angular CLI命令&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate component&lt;/code&gt; 会&lt;/a&gt;定义一个空 &lt;code&gt;styles&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="09643dead4d1c78b462efc30f8bde1402d517017" translate="yes" xml:space="preserve">
          <source>The Angular CLI command &lt;code&gt;ng deploy&lt;/code&gt; (introduced in version 8.3.0) executes the &lt;code&gt;deploy&lt;/code&gt;&lt;a href=&quot;cli-builder&quot;&gt;CLI builder&lt;/a&gt; associated with your project. A number of third-party builders implement deployment capabilities to different platforms. You can add any of them to your project by running &lt;code&gt;ng add [package name]&lt;/code&gt;.</source>
          <target state="translated">Angular CLI命令 &lt;code&gt;ng deploy&lt;/code&gt; （在版本8.3.0中引入）执行与您的项目关联的 &lt;code&gt;deploy&lt;/code&gt; &lt;a href=&quot;cli-builder&quot;&gt;CLI构建器&lt;/a&gt;。许多第三方构建器实现了到不同平台的部署功能。您可以通过运行 &lt;code&gt;ng add [package name]&lt;/code&gt; 将它们中的任何一个添加到项目中。</target>
        </trans-unit>
        <trans-unit id="a3d7512acefcea2947e134ca176993a0a2b9c106" translate="yes" xml:space="preserve">
          <source>The Angular CLI downloads and installs everything you need to test an Angular application with the &lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmine test framework&lt;/a&gt;.</source>
          <target state="translated">Angular CLI下载并安装了使用&lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmine测试框架&lt;/a&gt;测试Angular应用程序所需的一切。</target>
        </trans-unit>
        <trans-unit id="268f17b44b8897aaaa4b843da9aee7dae34c98de" translate="yes" xml:space="preserve">
          <source>The Angular CLI generated an &lt;code&gt;AppModule&lt;/code&gt; class in &lt;code&gt;src/app/app.module.ts&lt;/code&gt; when it created the project. This is where you &lt;em&gt;opt-in&lt;/em&gt; to the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">创建项目时，Angular CLI 在 &lt;code&gt;src/app/app.module.ts&lt;/code&gt; 中生成了 &lt;code&gt;AppModule&lt;/code&gt; 类。这是你&lt;em&gt;选择加入&lt;/em&gt;到 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="107493d097ae11fbcb314a2ed3716860a96fec1b" translate="yes" xml:space="preserve">
          <source>The Angular CLI handles differential loading for you as part of the &lt;em&gt;build&lt;/em&gt; process for deployment. The &lt;code&gt;ng build&lt;/code&gt; command produces the necessary bundles used for differential loading, based on your browser support requirements and compilation target.</source>
          <target state="translated">Angular CLI 在部署的&lt;em&gt;构建&lt;/em&gt;过程中为您处理差异加载。该 &lt;code&gt;ng build&lt;/code&gt; 命令产生用于差分加载必要的管束，根据您的浏览器支持的要求和目标汇编。</target>
        </trans-unit>
        <trans-unit id="d5e857140d05ef6844404b8615a66b9f4c44b396" translate="yes" xml:space="preserve">
          <source>The Angular CLI includes a server, so that you can build and serve your app locally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfbfae03eb19b3ecdbf1adb80b15d014200eb71" translate="yes" xml:space="preserve">
          <source>The Angular CLI includes a server, so that you can easily build and serve your app locally.</source>
          <target state="translated">Angular CLI包含一个服务器,这样你就可以轻松地在本地构建和服务你的应用程序。</target>
        </trans-unit>
        <trans-unit id="99240af0e017c305ac2fe38f1420a6c01c217331" translate="yes" xml:space="preserve">
          <source>The Angular CLI installs the necessary Angular &lt;code&gt;npm&lt;/code&gt; packages and other dependencies. This can take a few minutes.</source>
          <target state="translated">Angular CLI安装必要的Angular &lt;code&gt;npm&lt;/code&gt; 软件包和其他依赖项。这可能需要几分钟。</target>
        </trans-unit>
        <trans-unit id="44dd54dfc8964065cd90136f8e3b10b3cf1a4390" translate="yes" xml:space="preserve">
          <source>The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes.</source>
          <target state="translated">Angular CLI会安装必要的Angular npm包和其他依赖项。这可能需要几分钟的时间。</target>
        </trans-unit>
        <trans-unit id="bf80b618388fecbd79473fee682b4084f17bfeb0" translate="yes" xml:space="preserve">
          <source>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications directly from a command shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3450aeb1031f9a687d8114c58a874fc5f5cc28c" translate="yes" xml:space="preserve">
          <source>The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications. You can use the tool directly in a command shell, or indirectly through an interactive UI such as &lt;a href=&quot;https://angularconsole.com&quot;&gt;Angular Console&lt;/a&gt;.</source>
          <target state="translated">Angular CLI是一个命令行界面工具，可用于初始化，开发，构建和维护Angular应用程序。您可以直接在命令外壳中使用该工具，也可以通过交互式UI（例如&lt;a href=&quot;https://angularconsole.com&quot;&gt;Angular Console）&lt;/a&gt;间接使用该工具。</target>
        </trans-unit>
        <trans-unit id="fae14f5aaf5497739ab1d6d16c0fd5b468b3e46c" translate="yes" xml:space="preserve">
          <source>The Angular CLI outputs warnings if it detects that your browser application depends on CommonJS modules. To disable these warnings, you can add the CommonJS module name to &lt;code&gt;allowedCommonJsDependencies&lt;/code&gt; option in the &lt;code&gt;build&lt;/code&gt; options located in &lt;code&gt;angular.json&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5197f50b0a17f7cf0952ce4e36557b69ebf6c2a8" translate="yes" xml:space="preserve">
          <source>The Angular CLI performs this step automatically. The CLI also sets up a &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array for your routes and configures the &lt;code&gt;imports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; arrays for &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755a2a64b5f04e3ccbf78d316586e03c34b19fb0" translate="yes" xml:space="preserve">
          <source>The Angular CLI performs this step for you. However, if you are creating an app manually or working with an existing, non-CLI app, verify that the imports and configuration are correct. The following is the default &lt;code&gt;AppModule&lt;/code&gt; using the CLI with the &lt;code&gt;--routing&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af511e0852aa578eafccf55c3ef084749c706727" translate="yes" xml:space="preserve">
          <source>The Angular CLI tools.</source>
          <target state="translated">Angular CLI工具。</target>
        </trans-unit>
        <trans-unit id="e7315acf64ffba967535cd146e3b147b69209359" translate="yes" xml:space="preserve">
          <source>The Angular CLI uses two configurations for differential loading:</source>
          <target state="translated">Angular CLI使用两种配置来进行差分加载。</target>
        </trans-unit>
        <trans-unit id="0b647147cda79b8b71174240ba657c01cc0282ef" translate="yes" xml:space="preserve">
          <source>The Angular Framework, Angular CLI, and components used by Angular applications are packaged as &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm packages&lt;/a&gt; and distributed via the &lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm registry&lt;/a&gt;.</source>
          <target state="translated">Angular框架，Angular CLI和Angular应用程序使用的组件打包为&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm软件包，&lt;/a&gt;并通过&lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm注册表进行&lt;/a&gt;分发。</target>
        </trans-unit>
        <trans-unit id="ac23c8d82634ad1235f0eec2bb7598c143df4b5f" translate="yes" xml:space="preserve">
          <source>The Angular Injector *</source>
          <target state="translated">角度喷射器 *</target>
        </trans-unit>
        <trans-unit id="18be8272f01590e93bfcd42d6f4136d2716d2a98" translate="yes" xml:space="preserve">
          <source>The Angular Language Service can forewarn you of mistakes in your code. In this example, Angular doesn't know what &lt;code&gt;orders&lt;/code&gt; is or where it comes from.</source>
          <target state="translated">Angular Language Service可以警告您代码中的错误。在此示例中，Angular不知道什么是 &lt;code&gt;orders&lt;/code&gt; 或订单来自何处。</target>
        </trans-unit>
        <trans-unit id="6596c329e39ca54d0c7f8e5df88c15b4e19b0aaf" translate="yes" xml:space="preserve">
          <source>The Angular Language Service provides code editors with a way to get completions, errors, hints, and navigation inside Angular templates. It works with external templates in separate HTML files, and also with in-line templates.</source>
          <target state="translated">Angular语言服务为代码编辑器提供了一种在Angular模板内部获取完成、错误、提示和导航的方法。它可以在单独的HTML文件中与外部模板配合使用,也可以与线内模板配合使用。</target>
        </trans-unit>
        <trans-unit id="3e67a34f16363de23bed96136c061107da748ea8" translate="yes" xml:space="preserve">
          <source>The Angular Router is an optional service that presents a particular component view for a given URL. It is not part of the Angular core and thus is in its own library package, &lt;code&gt;@angular/router&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1cdcf22210d9763bd0c78281e3611dadc0f91d" translate="yes" xml:space="preserve">
          <source>The Angular Router is an optional service that presents a particular component view for a given URL. It is not part of the Angular core. It is in its own library package, &lt;code&gt;@angular/router&lt;/code&gt;. Import what you need from it as you would from any other Angular package.</source>
          <target state="translated">Angular Router是一项可选服务，可为给定URL提供特定的组件视图。它不是Angular核心的一部分。它在自己的库包 &lt;code&gt;@angular/router&lt;/code&gt; 。从任何其他Angular包中导入所需的内容。</target>
        </trans-unit>
        <trans-unit id="9eb08a795c65471995e5535981ebfa362dda2718" translate="yes" xml:space="preserve">
          <source>The Angular Update Guide provides customized update instructions, based on the current and target versions that you specify. It includes basic and advanced update paths, to match the complexity of your applications. It also includes troubleshooting information and any recommended manual changes to help you get the most out of the new release.</source>
          <target state="translated">Angular更新指南根据您指定的当前版本和目标版本,提供定制化的更新说明。它包括基本和高级更新路径,以匹配您的应用程序的复杂性。它还包括故障排除信息和任何建议的手动更改,以帮助您从新版本中获得最大的好处。</target>
        </trans-unit>
        <trans-unit id="b661c9f690153924a7c2703de890f3bc79be1136" translate="yes" xml:space="preserve">
          <source>The Angular ahead-of-time (AOT) compiler converts Angular HTML and TypeScript code into efficient JavaScript code during the build phase, before the browser downloads and runs that code. This is the best compilation mode for production environments, with decreased load time and increased performance compared to &lt;a href=&quot;glossary#jit&quot;&gt;just-in-time (JIT) compilation&lt;/a&gt;.</source>
          <target state="translated">在浏览器下载并运行该代码之前，Angular提前（AOT）编译器会在构建阶段将Angular HTML和TypeScript代码转换为高效的JavaScript代码。这是生产环境的最佳编译模式，与&lt;a href=&quot;glossary#jit&quot;&gt;即时（JIT）编译&lt;/a&gt;相比，减少了加载时间并提高了性能。</target>
        </trans-unit>
        <trans-unit id="20c9ec499f8aa2e01b35b329a7f155394dc66c5b" translate="yes" xml:space="preserve">
          <source>The Angular application manages what the user sees and can do, achieving this through the interaction of a component class instance (the &lt;em&gt;component&lt;/em&gt;) and its user-facing template.</source>
          <target state="translated">Angular应用程序管理用户看到的内容和可以执行的操作，并通过组件类实例（&lt;em&gt;component&lt;/em&gt;）与其面向用户的模板的交互来实现。</target>
        </trans-unit>
        <trans-unit id="60a34b9c53677e6872367240f8da49f2a0c10121" translate="yes" xml:space="preserve">
          <source>The Angular build tools.</source>
          <target state="translated">的Angular构建工具。</target>
        </trans-unit>
        <trans-unit id="89876cc2d5b7c9baf7d2993913b0abae3dac5cd8" translate="yes" xml:space="preserve">
          <source>The Angular compiler converts the application code you write into highly performant JavaScript code. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata plays an important role in guiding the compilation process.</source>
          <target state="translated">Angular编译器将您编写的应用程序代码转换为高性能的JavaScript代码。该 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据对于指导编制过程中的重要作用。</target>
        </trans-unit>
        <trans-unit id="0307d0ec8fe91a6388457b087bee98707153506e" translate="yes" xml:space="preserve">
          <source>The Angular compiler creates the &lt;code&gt;BannerComponentStub&lt;/code&gt; for the &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; element and applies the &lt;code&gt;RouterLinkStubDirective&lt;/code&gt; to the anchors with the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; attribute, but it ignores the &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">Angular编译器会为 &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; 元素创建 &lt;code&gt;BannerComponentStub&lt;/code&gt; ，并将 &lt;code&gt;RouterLinkStubDirective&lt;/code&gt; 应用于具有 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 属性的锚点，但是会忽略 &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; &lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt; &amp;gt;标签。</target>
        </trans-unit>
        <trans-unit id="f2099e1bb42f72af03878b03cb23d738d02f0370" translate="yes" xml:space="preserve">
          <source>The Angular compiler extracts the metadata &lt;em&gt;once&lt;/em&gt; and generates a &lt;em&gt;factory&lt;/em&gt; for &lt;code&gt;TypicalComponent&lt;/code&gt;. When it needs to create a &lt;code&gt;TypicalComponent&lt;/code&gt; instance, Angular calls the factory, which produces a new visual element, bound to a new instance of the component class with its injected dependency.</source>
          <target state="translated">Angular编译器&lt;em&gt;一次&lt;/em&gt;提取元数据并为 &lt;code&gt;TypicalComponent&lt;/code&gt; 生成一个&lt;em&gt;工厂&lt;/em&gt;。当需要创建 &lt;code&gt;TypicalComponent&lt;/code&gt; 实例时，Angular会调用工厂，该工厂将生成一个新的可视元素，该元素以注入的依赖关系绑定到组件类的新实例。</target>
        </trans-unit>
        <trans-unit id="7f25ae265c05f2ca418855270245f3c2089c6ef1" translate="yes" xml:space="preserve">
          <source>The Angular compiler finds a component or directive in a template when it can match the &lt;em&gt;selector&lt;/em&gt; of that component or directive to some HTML in that template.</source>
          <target state="translated">当Angular编译器可以将组件或指令的&lt;em&gt;选择器&lt;/em&gt;与该模板中的某些HTML进行匹配时，它将在模板中找到该组件或指令。</target>
        </trans-unit>
        <trans-unit id="2ec324b0b04115ae909396e8d599ab544a424d3c" translate="yes" xml:space="preserve">
          <source>The Angular compiler reads the template markup, combines it with the corresponding component class code, and emits &lt;em&gt;component factories&lt;/em&gt;.</source>
          <target state="translated">Angular编译器读取模板标记，将其与相应的组件类代码组合，并发出&lt;em&gt;组件工厂&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f5ebc9e9914857b1641e25cdad9ec2fbf7a0b1b5" translate="yes" xml:space="preserve">
          <source>The Angular compiler, which is invoked by the Angular CLI's &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; commands.</source>
          <target state="translated">Angular编译器，由Angular CLI的 &lt;code&gt;ng build&lt;/code&gt; 和 &lt;code&gt;ng serve&lt;/code&gt; 命令调用。</target>
        </trans-unit>
        <trans-unit id="ac9db4e8ab53e00307263bffc47d982c1e256eae" translate="yes" xml:space="preserve">
          <source>The Angular extraction tool (described in &lt;a href=&quot;i18n#ng-xi18n&quot;&gt;Work with translation files&lt;/a&gt; in this guide) generates a translation unit entry for each &lt;code&gt;i18n&lt;/code&gt; attribute in a template. It assigns each translation unit a unique ID based on the &lt;em&gt;meaning&lt;/em&gt; and &lt;em&gt;description&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc01358f63d4bea105e06d264c95e64af6796fa" translate="yes" xml:space="preserve">
          <source>The Angular extraction tool preserves both the meaning and the description in the translation source file to facilitate contextually-specific translations, but only the combination of meaning and text message are used to generate the specific id of a translation. If you have two similar text messages with different meanings, they are extracted separately. If you have two similar text messages with different descriptions (not different meanings), then they are extracted only once.</source>
          <target state="translated">Angular提取工具同时保留了翻译源文件中的含义和描述,方便根据上下文进行特定的翻译,但只用含义和文本信息的组合来生成翻译的具体id。如果您有两条意思不同的相似文本信息,则分别提取。如果您有两条相似的文本信息,但描述不同(不是不同的意思),那么它们只被提取一次。</target>
        </trans-unit>
        <trans-unit id="56065a39a7119008e9a39c78658ad09336f7d947" translate="yes" xml:space="preserve">
          <source>The Angular extractor generates a file with a translation unit entry for each &lt;code&gt;i18n&lt;/code&gt; attribute in a template. As described previously (in &lt;a href=&quot;i18n#transaction-unit-ids&quot;&gt;How meanings control text extraction and merging&lt;/a&gt;), Angular assigns each translation unit a unique ID such as the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bed172ef3f576a631fea5fc78a1554b8751f9a" translate="yes" xml:space="preserve">
          <source>The Angular form discussed in this page takes advantage of the following framework features to provide support for data modification, validation, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9401af39b6d9558ec8f95390db5e947910915008" translate="yes" xml:space="preserve">
          <source>The Angular form discussed in this page takes advantage of the following framework features to provide support for data modification, validation, and more:</source>
          <target state="translated">本页讨论的Angular表单利用了以下框架特性,为数据修改、验证等提供支持。</target>
        </trans-unit>
        <trans-unit id="cfa9faecdc950e49e0de1c849935984c499cc08c" translate="yes" xml:space="preserve">
          <source>The Angular framework itself is loaded as a set of JavaScript modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b614d48db6c124a58526470dfe61af1ee15a7578" translate="yes" xml:space="preserve">
          <source>The Angular just-in-time (JIT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code at run time, as part of bootstrapping.</source>
          <target state="translated">Angular just-in-time (JIT)编译器在运行时将您的 Angular HTML 和 TypeScript 代码转换为高效的 JavaScript 代码,作为引导的一部分。</target>
        </trans-unit>
        <trans-unit id="105f93ad850589d58764ef97e15115bfd2d26310" translate="yes" xml:space="preserve">
          <source>The Angular microsyntax lets you configure a directive in a compact, friendly string. The microsyntax parser translates that string into attributes on the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">Angular微语法使您可以在紧凑，友好的字符串中配置指令。microsyntax解析器将该字符串转换为 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 上的属性：</target>
        </trans-unit>
        <trans-unit id="9143f5ef451f8d1a9405683f722d57d62564c553" translate="yes" xml:space="preserve">
          <source>The Angular module is not instantiated until the app actually needs it.</source>
          <target state="translated">Angular模块在应用实际需要之前不会被实例化。</target>
        </trans-unit>
        <trans-unit id="07693af4435d3ea992bcd5d6d76e1a0c64d51494" translate="yes" xml:space="preserve">
          <source>The Angular module will be bootstrapped once (when requested for the first time) and the same reference will be used from that point onwards.</source>
          <target state="translated">Angular模块将被引导一次(当第一次请求时),并且从那时起将使用相同的引用。</target>
        </trans-unit>
        <trans-unit id="248192779b7cf444374f15b0f0bd950ae02e3662" translate="yes" xml:space="preserve">
          <source>The Angular non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, serves the same purpose in an Angular template. For example, after you use &lt;a href=&quot;template-syntax#ngIf&quot;&gt;*ngIf&lt;/a&gt; to check that &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; is defined, you can assert that &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; properties are also defined.</source>
          <target state="translated">Angular非空断言运算符 &lt;code&gt;!&lt;/code&gt; 在Angular模板中具有相同的目的。例如，在使用&lt;a href=&quot;template-syntax#ngIf&quot;&gt;* ngIf&lt;/a&gt;检查 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 是否已定义之后，可以断言 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 属性也已定义。</target>
        </trans-unit>
        <trans-unit id="f8ea8a72b52be7e9e55271d6843b9cb7e8a6bc13" translate="yes" xml:space="preserve">
          <source>The Angular non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, serves the same purpose in an Angular template. For example, you can assert that &lt;code&gt;item&lt;/code&gt; properties are also defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5cca36be0033131d61848f431beb9c0a775bfc" translate="yes" xml:space="preserve">
          <source>The Angular platform is the entry point for Angular on a web page. Each page has exactly one platform, and services (such as reflection) which are common to every Angular application running on the page are bound in its scope.</source>
          <target state="translated">Angular平台是Angular在网页上的入口。每个页面正好有一个平台,页面上运行的每一个Angular应用所共有的服务(如反射)都会被绑定在它的范围内。</target>
        </trans-unit>
        <trans-unit id="655e7b4bd5e668ad1b165b930308d201753125e9" translate="yes" xml:space="preserve">
          <source>The Angular platform is the entry point for Angular on a web page. Each page has exactly one platform. Services (such as reflection) which are common to every Angular application running on the page are bound in its scope. A page's platform is initialized implicitly when a platform is created using a platform factory such as &lt;code&gt;PlatformBrowser&lt;/code&gt;, or explicitly by calling the &lt;code&gt;&lt;a href=&quot;core/createplatform&quot;&gt;createPlatform&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a946c6be79932ce3cd70c89889bd3ece84c512a" translate="yes" xml:space="preserve">
          <source>The Angular platform is the entry point for Angular on a web page. Each page has exactly one platform. Services (such as reflection) which are common to every Angular application running on the page are bound in its scope. A page's platform is initialized implicitly when a platform is created using a platform factory such as &lt;code&gt;PlatformBrowser&lt;/code&gt;, or explicitly by calling the &lt;code&gt;&lt;a href=&quot;createplatform&quot;&gt;createPlatform&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e83b347ed63e4f22ca0037f663340cff3e1b26" translate="yes" xml:space="preserve">
          <source>The Angular router comes with high-level animation functions that let you animate the transitions between views when a route changes. To produce an animation sequence when switching between routes, you need to define nested animation sequences. Start with the top-level component that hosts the view, and nest additional animations in the components that host the embedded views.</source>
          <target state="translated">Angular 路由器自带高级动画功能,让你在路由变化时,对视图之间的过渡进行动画处理。为了在路由之间切换时产生动画序列,你需要定义嵌套的动画序列。从承载视图的顶层组件开始,在承载嵌入式视图的组件中嵌套其他动画。</target>
        </trans-unit>
        <trans-unit id="d9f0032b42360a33f96c2700f66e29a088d29c3e" translate="yes" xml:space="preserve">
          <source>The Angular router passes route parameters differently. Correct the &lt;code&gt;PhoneDetail&lt;/code&gt; component constructor to expect an injected &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; object. Extract the &lt;code&gt;phoneId&lt;/code&gt; from the &lt;code&gt;ActivatedRoute.snapshot.params&lt;/code&gt; and fetch the phone data as before:</source>
          <target state="translated">Angular路由器传递路由参数的方式有所不同。更正 &lt;code&gt;PhoneDetail&lt;/code&gt; 组件的构造函数以期望注入一个 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 对象。从 &lt;code&gt;ActivatedRoute.snapshot.params&lt;/code&gt; 中提取 &lt;code&gt;phoneId&lt;/code&gt; 并像以前一样获取电话数据：</target>
        </trans-unit>
        <trans-unit id="c8b73d6430f433c7da9f2d92333b1bf0785c4de0" translate="yes" xml:space="preserve">
          <source>The Angular router service solves these problems. Using the router, you can declaratively specify application states, manage state transitions while taking care of the URL, and load bundles on demand.</source>
          <target state="translated">Angular路由器服务解决了这些问题。使用路由器,您可以声明性地指定应用程序状态,管理状态转换,同时照顾URL,并按需加载捆绑。</target>
        </trans-unit>
        <trans-unit id="dab83935ff401e86ed6557ca14b267ff0f454743" translate="yes" xml:space="preserve">
          <source>The Angular safe navigation operator, &lt;code&gt;?&lt;/code&gt;, guards against &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; values in property paths. Here, it protects against a view render failure if &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Angular安全导航运算符， &lt;code&gt;?&lt;/code&gt; ，防止在属性路径中出现 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 值。在这里，如果 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 为 &lt;code&gt;null&lt;/code&gt; ，它可以防止视图渲染失败。</target>
        </trans-unit>
        <trans-unit id="8ddc74c782a2050af4c53d84e52e93568c0f322b" translate="yes" xml:space="preserve">
          <source>The Angular safe navigation operator, &lt;code&gt;?&lt;/code&gt;, guards against &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; values in property paths. Here, it protects against a view render failure if &lt;code&gt;item&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbe3e7ab9f2d469c6b7858e6a2fd9557c1f66e1" translate="yes" xml:space="preserve">
          <source>The Angular service worker can use either of two caching strategies for data resources.</source>
          <target state="translated">Angular服务工作者可以对数据资源使用两种缓存策略中的一种。</target>
        </trans-unit>
        <trans-unit id="628376db8f0ac4a5e89fdb142bdb959ca43ed0a2" translate="yes" xml:space="preserve">
          <source>The Angular service worker exposes debugging information under the &lt;code&gt;ngsw/&lt;/code&gt; virtual directory. Currently, the single exposed URL is &lt;code&gt;ngsw/&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;. Here is an example of this debug page's contents:</source>
          <target state="translated">Angular服务工作者在 &lt;code&gt;ngsw/&lt;/code&gt; 虚拟目录下公开调试信息。当前，单个公开的URL是 &lt;code&gt;ngsw/&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 。这是此调试页内容的示例：</target>
        </trans-unit>
        <trans-unit id="af4ec1fe2fee6a89e95ee555d45246e775d5740e" translate="yes" xml:space="preserve">
          <source>The Angular service worker is a small script that runs in web browsers. From time to time, the service worker will be updated with bug fixes and feature improvements.</source>
          <target state="translated">Angular服务工作者是一个在Web浏览器中运行的小脚本。服务工作者会不定期更新,进行错误修复和功能改进。</target>
        </trans-unit>
        <trans-unit id="d3546f707eceba9f99b7dc3c4e5c9394adc9a4c1" translate="yes" xml:space="preserve">
          <source>The Angular service worker is aware of which versions are in use at any given moment and it cleans up versions when no tab is using them.</source>
          <target state="translated">Angular服务工作者知道在任何给定时刻都有哪些版本在使用,当没有标签页使用它们时,它会清理版本。</target>
        </trans-unit>
        <trans-unit id="f2a5f7d21ae9f877f32d7f98ed2d1d923e4614b3" translate="yes" xml:space="preserve">
          <source>The Angular service worker is downloaded when the app is first opened and when the app is accessed after a period of inactivity. If the service worker has changed, the service worker will be updated in the background.</source>
          <target state="translated">Angular服务工在应用首次打开时和应用闲置一段时间后访问时都会下载。如果服务工作者发生了变化,服务工作者会在后台更新。</target>
        </trans-unit>
        <trans-unit id="a252a8e893b6b6b8b10ee8c9b4f3cd02606c9d40" translate="yes" xml:space="preserve">
          <source>The Angular service worker provides a guarantee: a running app will continue to run the same version of the app. If another instance of the app is opened in a new web browser tab, then the most current version of the app is served. As a result, that new tab can be running a different version of the app than the original tab.</source>
          <target state="translated">Angular服务工作者提供了一个保证:运行中的应用将继续运行相同版本的应用。如果在一个新的 Web 浏览器标签页中打开该应用的另一个实例,那么就会提供该应用的最新版本。因此,该新标签页可以运行与原标签页不同版本的应用。</target>
        </trans-unit>
        <trans-unit id="fe402d3476432010b35039b6b27c73a7e145e854" translate="yes" xml:space="preserve">
          <source>The Angular service worker's behavior follows that design goal:</source>
          <target state="translated">Angular服务工作者的行为遵循这一设计目标。</target>
        </trans-unit>
        <trans-unit id="35fb47a111d3bbf54cae3962bd6417ce1c2ad683" translate="yes" xml:space="preserve">
          <source>The Angular team and many experienced Angular developers strongly recommend moving filtering and sorting logic into the component itself. The component can expose a &lt;code&gt;filteredHeroes&lt;/code&gt; or &lt;code&gt;sortedHeroes&lt;/code&gt; property and take control over when and how often to execute the supporting logic. Any capabilities that you would have put in a pipe and shared across the app can be written in a filtering/sorting service and injected into the component.</source>
          <target state="translated">Angular团队和许多经验丰富的Angular开发人员强烈建议将过滤和排序逻辑移入组件本身。该组件可以公开 &lt;code&gt;filteredHeroes&lt;/code&gt; 或 &lt;code&gt;sortedHeroes&lt;/code&gt; 属性，并控制执行支持逻辑的时间和频率。您将放置在管道中并在应用程序之间共享的所有功能都可以写入过滤/排序服务中，并注入到组件中。</target>
        </trans-unit>
        <trans-unit id="afddc4c461f42ac8c8b97eba88b298533d0bfa2c" translate="yes" xml:space="preserve">
          <source>The Angular team has worked hard to ensure Ivy is as backwards-compatible with the previous rendering engine (&quot;View Engine&quot;) as possible. However, in rare cases, minor changes were necessary to ensure that the Angular's behavior was predictable and consistent, correcting issues in the View Engine implementation. In order to smooth the transition, we have provided automated migrations wherever possible so your application and library code is migrated automatically by the CLI. That said, some applications will likely need to apply some manual updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caca85786341f11cf0a7293e6415cac816f540c6" translate="yes" xml:space="preserve">
          <source>The Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators for specific scenarios. The next sections cover three of these operators:</source>
          <target state="translated">Angular模板表达语言采用了JavaScript语法的子集,并针对特定场景补充了一些特殊的操作符。接下来的章节将介绍其中的三个操作符。</target>
        </trans-unit>
        <trans-unit id="cbe6f2f94a12a95461a34df7f7964259a25e067b" translate="yes" xml:space="preserve">
          <source>The Angular testing utilities include the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt;, and a handful of functions that control the test environment. The &lt;a href=&quot;testing#testbed-api-summary&quot;&gt;&lt;em&gt;TestBed&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;testing#component-fixture-api-summary&quot;&gt;&lt;em&gt;ComponentFixture&lt;/em&gt;&lt;/a&gt; classes are covered separately.</source>
          <target state="translated">Angular测试实用程序包括 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; 和一些控制测试环境的功能。在&lt;a href=&quot;testing#testbed-api-summary&quot;&gt;&lt;em&gt;测试床&lt;/em&gt;&lt;/a&gt;和&lt;a href=&quot;testing#component-fixture-api-summary&quot;&gt;&lt;em&gt;ComponentFixture&lt;/em&gt;&lt;/a&gt;类分别覆盖。</target>
        </trans-unit>
        <trans-unit id="0f47a7ce39ae098185a294fd9d6afdc9374f5cc2" translate="yes" xml:space="preserve">
          <source>The Angular testing utilities include the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt;, and a handful of functions that control the test environment. The &lt;a href=&quot;testing-utility-apis#testbed-api-summary&quot;&gt;&lt;em&gt;TestBed&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;testing-utility-apis#component-fixture-api-summary&quot;&gt;&lt;em&gt;ComponentFixture&lt;/em&gt;&lt;/a&gt; classes are covered separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e6647d8c4f5f646f29b66e47261762ef67b7c3" translate="yes" xml:space="preserve">
          <source>The Angular workspace where the user has installed your library contains multiple projects (applications and libraries). The user can specify the project on the command line, or allow it to default. In either case, your code needs to identify the specific project to which this schematic is being applied, so that you can retrieve information from the project configuration.</source>
          <target state="translated">用户安装了你的库的Angular工作区包含多个项目(应用程序和库)。用户可以在命令行中指定项目,也可以让它默认。不管是哪种情况,你的代码都需要识别出应用这个示意图的具体项目,这样你就可以从项目配置中检索信息。</target>
        </trans-unit>
        <trans-unit id="37b60b160b483ff496036f979d0455b028438655" translate="yes" xml:space="preserve">
          <source>The AngularJS &lt;code&gt;$injector&lt;/code&gt; for the upgrade application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5315ae95f5757a73971de6b5edb7c0835d0995" translate="yes" xml:space="preserve">
          <source>The AngularJS &lt;code&gt;&lt;a href=&quot;upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; for the upgrade application.</source>
          <target state="translated">升级应用程序的AngularJS &lt;code&gt;&lt;a href=&quot;upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="423653fbea2bc7af48c7bd9f46190694e996131f" translate="yes" xml:space="preserve">
          <source>The AngularJS directive had a &lt;code&gt;checkmark&lt;/code&gt;&lt;em&gt;filter&lt;/em&gt;. Turn that into an Angular &lt;strong&gt;pipe&lt;/strong&gt;.</source>
          <target state="translated">AngularJS指令具有 &lt;code&gt;checkmark&lt;/code&gt; &lt;em&gt;过滤器&lt;/em&gt;。把它变成一个角&lt;strong&gt;管&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="af1fbf592b50c90c013c4592c8797fd707e0871b" translate="yes" xml:space="preserve">
          <source>The AngularJS injector has an AngularJS router dependency called &lt;code&gt;$routeParams&lt;/code&gt;, which was injected into &lt;code&gt;PhoneDetails&lt;/code&gt; when it was still an AngularJS controller. You intend to inject it into the new &lt;code&gt;PhoneDetailsComponent&lt;/code&gt;.</source>
          <target state="translated">AngularJS注入器具有一个名为 &lt;code&gt;$routeParams&lt;/code&gt; 的AngularJS路由器依赖项，该依赖 &lt;code&gt;PhoneDetails&lt;/code&gt; 在仍是AngularJS控制器时被注入到PhoneDetails中。您打算将其注入到新的 &lt;code&gt;PhoneDetailsComponent&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="5d426c6e68e95c3032932fd384898742c4cdf7d7" translate="yes" xml:space="preserve">
          <source>The AoT compiler does not support tagged template expressions; avoid them in metadata expressions.</source>
          <target state="translated">AoT编译器不支持标记的模板表达式,在元数据表达式中应避免使用。</target>
        </trans-unit>
        <trans-unit id="319355695648b782b2ef8282fd1ba6b0fb5992ad" translate="yes" xml:space="preserve">
          <source>The Application Shell</source>
          <target state="translated">应用壳</target>
        </trans-unit>
        <trans-unit id="07d707d654b9db1b392eb58df6d0436c1594d090" translate="yes" xml:space="preserve">
          <source>The Architect target to run.</source>
          <target state="translated">要运行的Architect目标。</target>
        </trans-unit>
        <trans-unit id="e4be9c76b0e4b71fda293faca97b9a6d8c0bdc15" translate="yes" xml:space="preserve">
          <source>The Architect tool provides a set of builders. The &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt; command&lt;/a&gt; provides a set of targets for the initial application project. The &lt;a href=&quot;cli/generate#application&quot;&gt;&lt;code&gt;ng generate application&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cli/generate#library&quot;&gt;&lt;code&gt;ng generate library&lt;/code&gt;&lt;/a&gt; commands provide a set of targets for each new &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;. These targets, their options and configurations, can be customized to meet the needs of your project. For example, you may want to add a &quot;staging&quot; or &quot;testing&quot; configuration to a project's &quot;build&quot; target.</source>
          <target state="translated">Architect工具提供了一组构建器。该&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; 命令&lt;/a&gt;提供了最初的应用程序项目一组目标。该&lt;a href=&quot;cli/generate#application&quot;&gt; &lt;code&gt;ng generate application&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;cli/generate#library&quot;&gt; &lt;code&gt;ng generate library&lt;/code&gt; &lt;/a&gt;的命令为每一个新的一组目标&lt;a href=&quot;glossary#project&quot;&gt;项目&lt;/a&gt;。可以自定义这些目标，其选项和配置，以满足项目的需求。例如，您可能想向项目的&amp;ldquo;构建&amp;rdquo;目标中添加&amp;ldquo;登台&amp;rdquo;或&amp;ldquo;测试&amp;rdquo;配置。</target>
        </trans-unit>
        <trans-unit id="98622091c7e082d28fb1d1aee12f2d15a684fd7e" translate="yes" xml:space="preserve">
          <source>The Async pipe saves boilerplate in the component code. The component doesn't have to subscribe to the async data source, extract the resolved values and expose them for binding, and have to unsubscribe when it's destroyed (a potent source of memory leaks).</source>
          <target state="translated">Async管道节省了组件代码中的模板。组件不必订阅异步数据源,提取解析的值并将其暴露出来进行绑定,也不必在数据源被销毁时取消订阅(这是内存泄漏的有力来源)。</target>
        </trans-unit>
        <trans-unit id="a093f7952b1838c4dd6aeda28ea5e1fc38030960" translate="yes" xml:space="preserve">
          <source>The Basics</source>
          <target state="translated">基础知识</target>
        </trans-unit>
        <trans-unit id="d038565a16aac226bd4ac01c0d0edf10f676271a" translate="yes" xml:space="preserve">
          <source>The Boolean expression to evaluate as the condition for showing a template.</source>
          <target state="translated">作为显示模板的条件的布尔表达式。</target>
        </trans-unit>
        <trans-unit id="b00950b6c88ca36515aea3fda70a4337ec7e16d4" translate="yes" xml:space="preserve">
          <source>The Browserslist configuration allows you to ignore browsers without ES2015 support. In this case, a single build is produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7567b31beb9558ff7dba046ce91751f2b441018" translate="yes" xml:space="preserve">
          <source>The Browserslist configuration file is included in your application &lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;project structure&lt;/a&gt; and provides the minimum browsers your application supports. See the &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist spec&lt;/a&gt; for complete configuration options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e793e92efbd3bfda3b03dee3bd1b71b6e869ea" translate="yes" xml:space="preserve">
          <source>The CLI &lt;code&gt;build&lt;/code&gt; command uses a different builder and invokes a different build tool for libraries than it does for applications.</source>
          <target state="translated">CLI &lt;code&gt;build&lt;/code&gt; 命令使用与应用程序不同的构建器，并为库调用不同的构建工具。</target>
        </trans-unit>
        <trans-unit id="cefa3504277e4ce69bb8bd444d4e3b698be704b2" translate="yes" xml:space="preserve">
          <source>The CLI Builder API includes progress and status reporting tools, which can provide hints for certain functions and interfaces.</source>
          <target state="translated">CLI Builder API包括进度和状态报告工具,可以为某些功能和接口提供提示。</target>
        </trans-unit>
        <trans-unit id="a227bf9384f47a8e8130c6145e670165e7b6db89" translate="yes" xml:space="preserve">
          <source>The CLI Builder API provides a new way of changing the behavior of the Angular CLI by using builders to execute custom logic.</source>
          <target state="translated">CLI Builder API提供了一种新的方式,通过使用构建器执行自定义逻辑来改变Angular CLI的行为。</target>
        </trans-unit>
        <trans-unit id="497aad274b240601c7f91912c8f56b2c07944aa0" translate="yes" xml:space="preserve">
          <source>The CLI also adds &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; to feature routing modules. This way, Angular knows that the route list is only responsible for providing additional routes and is intended for feature modules. You can use &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; in multiple modules.</source>
          <target state="translated">CLI还将 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; 添加到功能路由模块。这样，Angular知道路由列表仅负责提供其他路由，并且用于功能模块。您可以在多个模块中使用 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e003e455d02dc123a8ac974ae7c477f9d1f63b09" translate="yes" xml:space="preserve">
          <source>The CLI also adds &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; to feature routing modules. This way, Angular knows that the route list is only responsible for providing additional routes and is intended for feature modules. You can use &lt;code&gt;forChild()&lt;/code&gt; in multiple modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc535c7f2308b068ad4b9779b7f1680bc5ff6a5" translate="yes" xml:space="preserve">
          <source>The CLI automatically added each feature module to the routes map at the application level. Finish this off by adding the default route. In &lt;code&gt;AppRoutingModule&lt;/code&gt;, update the &lt;code&gt;routes&lt;/code&gt; array with the following:</source>
          <target state="translated">CLI会在应用程序级别自动将每个功能模块添加到路线图。通过添加默认路由来完成此操作。在 &lt;code&gt;AppRoutingModule&lt;/code&gt; 中，使用以下命令更新 &lt;code&gt;routes&lt;/code&gt; 数组：</target>
        </trans-unit>
        <trans-unit id="4d4a19df84ae241a7d6d36271e33ebbc2de83a13" translate="yes" xml:space="preserve">
          <source>The CLI automatically added each feature module to the routes map at the application level. Finish this off by adding the default route. In the &lt;code&gt;app-routing.module.ts&lt;/code&gt; file, update the &lt;code&gt;routes&lt;/code&gt; array with the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e4396ee6ff6f7efc8d22f8aab7c357291cb2d8" translate="yes" xml:space="preserve">
          <source>The CLI automatically appends &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;, so if you were to write &lt;code&gt;first-component&lt;/code&gt;, your component would be &lt;code&gt;FirstComponentComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e89170bf76b307b4155c5c76bc1a7193e2cfc09" translate="yes" xml:space="preserve">
          <source>The CLI build process runs the pertinent CSS preprocessor.</source>
          <target state="translated">CLI构建过程会运行相关的CSS预处理程序。</target>
        </trans-unit>
        <trans-unit id="ec9a848601bcc0ff8bb0d93ca86877e1c801c9a0" translate="yes" xml:space="preserve">
          <source>The CLI can run unit tests and create code coverage reports. Code coverage reports show you any parts of our code base that may not be properly tested by your unit tests.</source>
          <target state="translated">CLI可以运行单元测试并创建代码覆盖率报告。代码覆盖率报告可以向您展示我们代码库中可能没有被您的单元测试正确测试的任何部分。</target>
        </trans-unit>
        <trans-unit id="09ef963a966d76d23f313b59169f46873874e2f7" translate="yes" xml:space="preserve">
          <source>The CLI can run unit tests and create code coverage reports. Code coverage reports show you any parts of your code base that may not be properly tested by your unit tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde5e1cc27e1ba5721adcfdbc19a938b7153a4a7" translate="yes" xml:space="preserve">
          <source>The CLI command &lt;code&gt;ng new&lt;/code&gt; creates a &lt;code&gt;package.json&lt;/code&gt; file when it creates the new workspace. This &lt;code&gt;package.json&lt;/code&gt; is used by all projects in the workspace, including the initial app project that is created by the CLI when it creates the workspace.</source>
          <target state="translated">CLI命令 &lt;code&gt;ng new&lt;/code&gt; 在创建新的工作区时会创建一个 &lt;code&gt;package.json&lt;/code&gt; 文件。这个 &lt;code&gt;package.json&lt;/code&gt; 由工作空间中的所有项目使用，包括由CLI在创建工作空间时创建的初始应用程序项目。</target>
        </trans-unit>
        <trans-unit id="107cf47d31ef2dc53110f777a2ab23d698cd86c8" translate="yes" xml:space="preserve">
          <source>The CLI creates &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt;, a corresponding test file &lt;code&gt;src/app/highlight.directive.spec.ts&lt;/code&gt;, and &lt;em&gt;declares&lt;/em&gt; the directive class in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">CLI将创建 &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; （对应的测试文件 &lt;code&gt;src/app/highlight.directive.spec.ts&lt;/code&gt; )，并在根 &lt;code&gt;AppModule&lt;/code&gt; 中&lt;em&gt;声明&lt;/em&gt;指令类。</target>
        </trans-unit>
        <trans-unit id="43f97c1cdef4a721c1e2980898de65659eac4823" translate="yes" xml:space="preserve">
          <source>The CLI creates a new folder, &lt;code&gt;src/app/heroes/&lt;/code&gt;, and generates the three files of the &lt;code&gt;HeroesComponent&lt;/code&gt; along with a test file.</source>
          <target state="translated">CLI将创建一个新文件夹 &lt;code&gt;src/app/heroes/&lt;/code&gt; ，并生成 &lt;code&gt;HeroesComponent&lt;/code&gt; 的三个文件以及一个测试文件。</target>
        </trans-unit>
        <trans-unit id="562195fe3077662b5420503e57124701828dc0ad" translate="yes" xml:space="preserve">
          <source>The CLI creates a new workspace and a simple Welcome app, ready to run.</source>
          <target state="translated">CLI创建一个新的工作区和一个简单的欢迎应用程序,准备运行。</target>
        </trans-unit>
        <trans-unit id="c76b8649bdc58625eb3fdf9b951e9796dccced1c" translate="yes" xml:space="preserve">
          <source>The CLI creates an initial test file for you by default when you ask it to generate a new component.</source>
          <target state="translated">当您要求CLI生成一个新的组件时,CLI会默认为您创建一个初始测试文件。</target>
        </trans-unit>
        <trans-unit id="b481cc4f2e36d975cb69b55ee8a2ea791c24d3e5" translate="yes" xml:space="preserve">
          <source>The CLI creates the component files in the &lt;code&gt;src/app/&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; folder and declares the &lt;code&gt;MessagesComponent&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">CLI在 &lt;code&gt;src/app/&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; 文件夹中创建组件文件，并在 &lt;code&gt;AppModule&lt;/code&gt; 中声明 &lt;code&gt;MessagesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f634da899e07e330e3945989266198f9dd7248a3" translate="yes" xml:space="preserve">
          <source>The CLI creates the component files in the &lt;code&gt;src/app/messages&lt;/code&gt; folder and declares the &lt;code&gt;MessagesComponent&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fe0f772eeb3a795c33f5730abf4513989e1ce6" translate="yes" xml:space="preserve">
          <source>The CLI does not support running Angular itself in a web worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7552e6edb702636aac502cd8cfd91bc772afa18" translate="yes" xml:space="preserve">
          <source>The CLI generated a test file for the &lt;code&gt;AppComponent&lt;/code&gt; named &lt;code&gt;app.component.spec.ts&lt;/code&gt;.</source>
          <target state="translated">CLI为 &lt;code&gt;AppComponent&lt;/code&gt; 生成了一个名为 &lt;code&gt;app.component.spec.ts&lt;/code&gt; 的测试文件。</target>
        </trans-unit>
        <trans-unit id="c07dc10a94742c4bb5a9957fc3001dbe354c0f3e" translate="yes" xml:space="preserve">
          <source>The CLI generated three metadata properties:</source>
          <target state="translated">CLI生成了三个元数据属性。</target>
        </trans-unit>
        <trans-unit id="e487350ab467b6173a436d5d4ae9f4ad9e39868c" translate="yes" xml:space="preserve">
          <source>The CLI generates the files for the &lt;code&gt;DashboardComponent&lt;/code&gt; and declares it in &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">CLI为 &lt;code&gt;DashboardComponent&lt;/code&gt; 生成文件，并在 &lt;code&gt;AppModule&lt;/code&gt; 中声明它。</target>
        </trans-unit>
        <trans-unit id="f2fb1c8beb04af8f237714937dc1863d998eb460" translate="yes" xml:space="preserve">
          <source>The CLI generates the three &lt;code&gt;HeroSearchComponent&lt;/code&gt; files and adds the component to the &lt;code&gt;AppModule&lt;/code&gt; declarations.</source>
          <target state="translated">CLI会生成三个 &lt;code&gt;HeroSearchComponent&lt;/code&gt; 文件，并将该组件添加到 &lt;code&gt;AppModule&lt;/code&gt; 声明中。</target>
        </trans-unit>
        <trans-unit id="447927c37568dec9cf9cbd281c45494d91a9a56c" translate="yes" xml:space="preserve">
          <source>The CLI loads and registers the locale data, places each generated version in a locale-specific directory to keep it separate from other locale versions, and puts the directories within the configured &lt;code&gt;outputPath&lt;/code&gt; for the project. For each application variant the &lt;code&gt;lang&lt;/code&gt; attribute of the &lt;code&gt;html&lt;/code&gt; element is set to the locale. The CLI also adjusts the HTML base HREF for each version of the app by adding the locale to the configured &lt;code&gt;baseHref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a865953b65c01bef1508b821a18a24c3ddf118b" translate="yes" xml:space="preserve">
          <source>The CLI project is now set up to use the Angular service worker.</source>
          <target state="translated">现在,CLI项目已经被设置为使用Angular服务工作者。</target>
        </trans-unit>
        <trans-unit id="a5d9a740a1ce9aabea72ad09bde9b5b2a4edf30b" translate="yes" xml:space="preserve">
          <source>The CLI queries the Browserslist configuration, and checks the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; to determine if support for legacy browsers is required. The combination of these two configurations determines whether multiple bundles are produced when you create a &lt;em&gt;build&lt;/em&gt;. When you create a development build using &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; and differential loading is enabled, the output produced is simpler and easier to debug, allowing you to rely less on sourcemaps of compiled code. When you create a production build using &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build --prod&lt;/code&gt;&lt;/a&gt;, the CLI uses the defined configurations above to determine the bundles to build for deployment of your application.</source>
          <target state="translated">CLI查询Browserslist配置，并检查 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 以确定是否需要支持旧版浏览器。这两种配置的组合确定了在创建&lt;em&gt;构建&lt;/em&gt;时是否生成多个捆绑包。当您使用&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;创建开发版本并启用差异加载时，生成的输出更加简单且易于调试，从而使您对编译代码的源映射的依赖减少。当您使用&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build --prod&lt;/code&gt; &lt;/a&gt;创建生产版本时，CLI使用上面定义的配置来确定要为部署应用程序而构建的捆绑包。</target>
        </trans-unit>
        <trans-unit id="9ab80ceb4180fea29dd3ed369dd71b4e773daaf8" translate="yes" xml:space="preserve">
          <source>The CLI runs the &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpack Plugin&lt;/a&gt; which automatically recognizes lazy-loaded &lt;code&gt;NgModules&lt;/code&gt; and creates separate bundles for them.</source>
          <target state="translated">CLI运行&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack&quot;&gt;Angular-Atime-time-Time Webpack插件&lt;/a&gt;，该插件可自动识别延迟加载的 &lt;code&gt;NgModules&lt;/code&gt; 并为其创建单独的捆绑包。</target>
        </trans-unit>
        <trans-unit id="9f77f83623d98ca08196d70d7b704bf6aab56a56" translate="yes" xml:space="preserve">
          <source>The CLI runs the &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/ngtools/webpack&quot;&gt;Angular Ahead-of-Time Webpack Plugin&lt;/a&gt; which automatically recognizes lazy-loaded &lt;code&gt;NgModules&lt;/code&gt; and creates separate bundles for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5525140bd0a8e5581222783db91519ae612bd0be" translate="yes" xml:space="preserve">
          <source>The CLI takes care of Jasmine and Karma configuration for you.</source>
          <target state="translated">CLI为你处理Jasmine和Karma的配置。</target>
        </trans-unit>
        <trans-unit id="f3acaf66dda92c0d17299abf2258305e56011531" translate="yes" xml:space="preserve">
          <source>The CLI uses &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt; to ensure compatibility with different browser and browser versions. You may find it necessary to target specific browsers or exclude certain browser versions from your build.</source>
          <target state="translated">CLI使用&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt;来确保与不同浏览器和浏览器版本的兼容性。您可能发现有必要针对特定​​的浏览器或从您的构建中排除某些浏览器版本。</target>
        </trans-unit>
        <trans-unit id="9a0e6928ac9fe75ef6b546726ef4323cbed6b649" translate="yes" xml:space="preserve">
          <source>The CSS &lt;code&gt;selector&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator specifies an element named &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;. That element is a placeholder in the body of your &lt;code&gt;index.html&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;装饰 &lt;code&gt;selector&lt;/code&gt; 中的CSS 选择器指定了一个名为 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 的元素。该元素是 &lt;code&gt;index.html&lt;/code&gt; 文件正文中的占位符：</target>
        </trans-unit>
        <trans-unit id="740e3c1cdea94a0c07c6e845612438b44c70c7e2" translate="yes" xml:space="preserve">
          <source>The CSS classes are updated as follows, depending on the type of the expression evaluation:</source>
          <target state="translated">根据表达式评价的类型,CSS类的更新如下。</target>
        </trans-unit>
        <trans-unit id="e54eff89405ec8c10d6f19133fc3bf85e640c99e" translate="yes" xml:space="preserve">
          <source>The CSS selector for this query.</source>
          <target state="translated">此查询的CSS选择器。</target>
        </trans-unit>
        <trans-unit id="6c7f73c45ff8c0130785cd941b19dfcbde5b8c0e" translate="yes" xml:space="preserve">
          <source>The CSS selector that identifies this directive in a template and triggers instantiation of the directive.</source>
          <target state="translated">在模板中标识该指令并触发该指令实例化的CSS选择器。</target>
        </trans-unit>
        <trans-unit id="9bfcb014ac0d0ab03137c5b7b21ee99ad5558efe" translate="yes" xml:space="preserve">
          <source>The CSS styles associated with this state.</source>
          <target state="translated">与该状态相关的CSS样式。</target>
        </trans-unit>
        <trans-unit id="46f17cd8fea6f967e28bec5eeaa4def431c17955" translate="yes" xml:space="preserve">
          <source>The ChangeDetectorRef for the component</source>
          <target state="translated">组件的ChangeDetectorRef</target>
        </trans-unit>
        <trans-unit id="ca1d76d56eaeb3857a3b30c857a59305b798ada4" translate="yes" xml:space="preserve">
          <source>The ComponentFactoryResolver to get hold of the ComponentFactories declared in the &lt;code&gt;entryComponents&lt;/code&gt; property of the module.</source>
          <target state="translated">ComponentFactoryResolver，用于获取在模块的 &lt;code&gt;entryComponents&lt;/code&gt; 属性中声明的ComponentFactories 。</target>
        </trans-unit>
        <trans-unit id="719c39204c291cea2ecbc86a653ba0b9ba5cac48" translate="yes" xml:space="preserve">
          <source>The DI framework lets you supply data to a component from an injectable &lt;em&gt;service&lt;/em&gt; class, defined in its own file. To demonstrate, we'll create an injectable service class that provides a list of heroes, and register that class as a provider of that service.</source>
          <target state="translated">通过DI框架，您可以从在其自己的文件中定义的可注入&lt;em&gt;服务&lt;/em&gt;类向组件提供数据。为了演示，我们将创建一个可注入的服务类，该类提供英雄列表，并将该类注册为该服务的提供者。</target>
        </trans-unit>
        <trans-unit id="a6e4d23b100081f1b4bf84813996800b7b7e0b03" translate="yes" xml:space="preserve">
          <source>The DI token for setting the initial config for the platform.</source>
          <target state="translated">用于设置平台初始配置的DI令牌。</target>
        </trans-unit>
        <trans-unit id="9993b1eeb40876035f00bb4ad779bd1d89bff72d" translate="yes" xml:space="preserve">
          <source>The DOM attributes are parsed by the framework that owns the current template. So attributes in AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.</source>
          <target state="translated">DOM属性是由拥有当前模板的框架来解析的。所以AngularJS模板中的属性必须使用kebab-case,而AngularJS模板必须使用camelCase。</target>
        </trans-unit>
        <trans-unit id="40aba8e91dedb65b6b75ee94b6c800ec39ec06a8" translate="yes" xml:space="preserve">
          <source>The DOM element &lt;code&gt;&amp;lt;a-component&amp;gt;&lt;/code&gt; will remain to be an AngularJS managed element, because it's defined in an AngularJS template. That also means you can apply additional AngularJS directives to it, but &lt;em&gt;not&lt;/em&gt; Angular directives. It is only in the template of the &lt;code&gt;&amp;lt;a-component&amp;gt;&lt;/code&gt; where Angular steps in. This same rule also applies when you use AngularJS component directives from Angular.</source>
          <target state="translated">DOM元素 &lt;code&gt;&amp;lt;a-component&amp;gt;&lt;/code&gt; 将仍然是AngularJS托管元素，因为它是在AngularJS模板中定义的。这也意味着您可以对其应用其他AngularJS指令，但&lt;em&gt;不能对其应用&lt;/em&gt; Angular指令。它仅在Angular 进入的 &lt;code&gt;&amp;lt;a-component&amp;gt;&lt;/code&gt; 模板中。当您使用Angular中的AngularJS组件指令时，同样的规则也适用。</target>
        </trans-unit>
        <trans-unit id="ef37725e8017d864dbbc0ce41db1775b05a49609" translate="yes" xml:space="preserve">
          <source>The DOM element to which to attach the animation.</source>
          <target state="translated">连接动画的DOM元素。</target>
        </trans-unit>
        <trans-unit id="88ce3ced1c7d105ca467fac76be3733534705ffd" translate="yes" xml:space="preserve">
          <source>The DOM element.</source>
          <target state="translated">DOM元素。</target>
        </trans-unit>
        <trans-unit id="d5b6648ab37ea69fa6db16f13fe369e9e3c17dd2" translate="yes" xml:space="preserve">
          <source>The DOM event to listen for.</source>
          <target state="translated">要监听的DOM事件。</target>
        </trans-unit>
        <trans-unit id="6928a76a137e5a6aa8b409d1e1866c18fe4c109d" translate="yes" xml:space="preserve">
          <source>The DOM property that is bound to a data property.</source>
          <target state="translated">绑定到数据属性的DOM属性。</target>
        </trans-unit>
        <trans-unit id="fed37b463aa73566258c88f3425a4af03786431a" translate="yes" xml:space="preserve">
          <source>The DebugElement associated with the root element of this component.</source>
          <target state="translated">与该组件的根元素相关联的DebugElement。</target>
        </trans-unit>
        <trans-unit id="698531beda7f91ea6b29506a74d0b3e9ca30258a" translate="yes" xml:space="preserve">
          <source>The ElementRef for the element at the root of the component.</source>
          <target state="translated">组件根部元素的ElementRef。</target>
        </trans-unit>
        <trans-unit id="0366d0d0ffb1591153e2e01125018d2c703fc4c6" translate="yes" xml:space="preserve">
          <source>The Filter/Stagger tab in the live example shows a list of heroes with an introductory sequence. The entire list of heroes cascades in, with a slight delay from top to bottom.</source>
          <target state="translated">实例中的Filter/Stagger选项卡显示了一个带有介绍序列的英雄列表。整个英雄列表层层递进,从上到下略有延迟。</target>
        </trans-unit>
        <trans-unit id="1ca923870d72f3903f980d65fb8b21ef21dad089" translate="yes" xml:space="preserve">
          <source>The HTML &lt;a href=&quot;router&quot;&gt;&lt;em&gt;&amp;lt;base href=&quot;...&quot;/&amp;gt;&lt;/em&gt;&lt;/a&gt; specifies a base path for resolving relative URLs to assets such as images, scripts, and style sheets. For example, given the &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt;, the browser resolves a URL such as &lt;code&gt;some/place/foo.jpg&lt;/code&gt; into a server request for &lt;code&gt;my/app/some/place/foo.jpg&lt;/code&gt;. During navigation, the Angular router uses the &lt;em&gt;base href&lt;/em&gt; as the base path to component, template, and module files.</source>
          <target state="translated">HTML &lt;a href=&quot;router&quot;&gt;&lt;em&gt;&amp;lt;base href =&amp;ldquo; ...&amp;rdquo; /&amp;gt;&lt;/em&gt;&lt;/a&gt;指定用于解析资产，例如图像，脚本和样式表等相对URL的基本路径。例如，给定 &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt; ，浏览器 &lt;code&gt;some/place/foo.jpg&lt;/code&gt; URL（例如some / place / foo.jpg）解析为对 &lt;code&gt;my/app/some/place/foo.jpg&lt;/code&gt; 的服务器请求。在导航期间，Angular路由器使用&lt;em&gt;base href&lt;/em&gt;作为组件，模板和模块文件的基本路径。</target>
        </trans-unit>
        <trans-unit id="6934597188d99f726b47ffd4352dab662b44d834" translate="yes" xml:space="preserve">
          <source>The HTML &lt;code&gt;base&lt;/code&gt; tag with the &lt;code&gt;href&lt;/code&gt; attribute specifies the base URI, or URL, for relative links. If you set the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; option in &lt;code&gt;angular.json&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or to an array of locale IDs, the CLI adjusts the base &lt;code&gt;href&lt;/code&gt; for each version of the app by adding the locale to the configured &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt;. You can specify the &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt; for each locale in your workspace configuration file (&lt;code&gt;angular.json&lt;/code&gt;), as shown in the following example, which sets &lt;code&gt;&quot;baseHref&quot;&lt;/code&gt; to an empty string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d87779df17c7f23d08f5fc1783cce1d26501ce4" translate="yes" xml:space="preserve">
          <source>The HTML attribute &lt;code&gt;value&lt;/code&gt; specifies the &lt;em&gt;initial&lt;/em&gt; value; the DOM &lt;code&gt;value&lt;/code&gt; property is the &lt;em&gt;current&lt;/em&gt; value.</source>
          <target state="translated">HTML属性 &lt;code&gt;value&lt;/code&gt; 指定&lt;em&gt;初始&lt;/em&gt;值；DOM &lt;code&gt;value&lt;/code&gt; 属性是&lt;em&gt;当前&lt;/em&gt;值。</target>
        </trans-unit>
        <trans-unit id="1c559ea997a344c5ea6c1ce9d3e4c628fd9a47c6" translate="yes" xml:space="preserve">
          <source>The HTML element &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and the Angular decorator &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; are different. This documentation is about component communication in Angular as it pertains to &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;. For more information on the HTML element &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, see the &lt;a href=&quot;https://www.w3.org/TR/html5/sec-forms.html#the-input-element&quot;&gt;W3C Recommendation&lt;/a&gt;.</source>
          <target state="translated">HTML元素 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 和Angular装饰器 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 不同。本文档是一个关于在角部件通信，因为它涉及到 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 。有关HTML元素 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 的更多信息，请参见&lt;a href=&quot;https://www.w3.org/TR/html5/sec-forms.html#the-input-element&quot;&gt;W3C Recommendation&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a9dc8a4343ef71551d0c82a9eaadfd64de660f2a" translate="yes" xml:space="preserve">
          <source>The HTML element to receive event notifications.</source>
          <target state="translated">接收事件通知的HTML元素。</target>
        </trans-unit>
        <trans-unit id="d14904cf4a58c3d8c0afeac7bf2f0cdc11c30fbe" translate="yes" xml:space="preserve">
          <source>The HTML for the list of heroes should look like this:</source>
          <target state="translated">英雄列表的HTML应该是这样的。</target>
        </trans-unit>
        <trans-unit id="f71b50d004800ebb1d4d3080fd26d84a67ac0e78" translate="yes" xml:space="preserve">
          <source>The HTML includes an &lt;em&gt;Edit&lt;/em&gt; button whose click event is bound to an expression that clears the &lt;code&gt;submitted&lt;/code&gt; flag.</source>
          <target state="translated">HTML包含一个&amp;ldquo; &lt;em&gt;编辑&amp;rdquo;&lt;/em&gt;按钮，其单击事件绑定到清除 &lt;code&gt;submitted&lt;/code&gt; 标志的表达式。</target>
        </trans-unit>
        <trans-unit id="5fd12f6544608fc7b30088b6abc736ac21e18907" translate="yes" xml:space="preserve">
          <source>The HTML selector of the Universal app</source>
          <target state="translated">通用应用程序的HTML选择器</target>
        </trans-unit>
        <trans-unit id="fd9120ff3800ba174966eda03c783d69e8e4cda4" translate="yes" xml:space="preserve">
          <source>The HTML selector to use for this component.</source>
          <target state="translated">这个组件要使用的HTML选择器。</target>
        </trans-unit>
        <trans-unit id="e7578d99ffd7e1da8e3cea279451c4297b5806ca" translate="yes" xml:space="preserve">
          <source>The HTML selector to use for this directive.</source>
          <target state="translated">该指令使用的HTML选择器。</target>
        </trans-unit>
        <trans-unit id="2a36834f34b8455f136644a787a93d8cd1f575d0" translate="yes" xml:space="preserve">
          <source>The HTML template contains a trigger called &lt;code&gt;filterAnimation&lt;/code&gt;.</source>
          <target state="translated">HTML模板包含一个名为 &lt;code&gt;filterAnimation&lt;/code&gt; 的触发器。</target>
        </trans-unit>
        <trans-unit id="1aa3f12e11c8cd99f37c0e90b346ffe248ed2a88" translate="yes" xml:space="preserve">
          <source>The HTML template that defines the view.</source>
          <target state="translated">定义视图的HTML模板。</target>
        </trans-unit>
        <trans-unit id="fb27ae2c8025973c57454777adc583cc3d95a51c" translate="yes" xml:space="preserve">
          <source>The HTTP client service offers the following major features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25316bd1e8e7dd9558acd79051ccba3b8b0de428" translate="yes" xml:space="preserve">
          <source>The HTTP method.</source>
          <target state="translated">HTTP方法。</target>
        </trans-unit>
        <trans-unit id="e004648df3406974846237d4e5339d7a5db71263" translate="yes" xml:space="preserve">
          <source>The HTTP module uses observables to handle AJAX requests and responses.</source>
          <target state="translated">HTTP模块使用观测值来处理AJAX请求和响应。</target>
        </trans-unit>
        <trans-unit id="4063f45ae6db2ac3b918eaf7efd11f13ab6d0885" translate="yes" xml:space="preserve">
          <source>The HTTP options to send with the request.</source>
          <target state="translated">与请求一起发送的HTTP选项。</target>
        </trans-unit>
        <trans-unit id="f569b6437ab842c7c172d6eaf1d50cb52cb3b0df" translate="yes" xml:space="preserve">
          <source>The Hero Editor</source>
          <target state="translated">英雄编辑</target>
        </trans-unit>
        <trans-unit id="789e49c75eaf57227f3c68b65a2f12a91300f2e7" translate="yes" xml:space="preserve">
          <source>The ICU clauses adhere to the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU Message Format&lt;/a&gt; specified in the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR pluralization rules&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0024a992c3624450ab558546a68e7c18c3fd2c" translate="yes" xml:space="preserve">
          <source>The ID consists of a language identifier, such as &lt;code&gt;en&lt;/code&gt; for English or &lt;code&gt;fr&lt;/code&gt; for French, followed by a dash (&lt;code&gt;-&lt;/code&gt;) and a locale extension, such as &lt;code&gt;US&lt;/code&gt; for the United States or &lt;code&gt;CA&lt;/code&gt; for Canada. For example, &lt;code&gt;en-US&lt;/code&gt; refers to English in the United States, and &lt;code&gt;fr-CA&lt;/code&gt; refers to French in Canada. Angular uses this ID to find the correct corresponding locale data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506fcf27093bc174f67c1d402388302182ceec78" translate="yes" xml:space="preserve">
          <source>The ID of the anchor element.</source>
          <target state="translated">锚元素的ID。</target>
        </trans-unit>
        <trans-unit id="ac7e7310379be287aa7d416f11a8dd96c9a6d0ee" translate="yes" xml:space="preserve">
          <source>The Idle Task Queue is the queue of all pending tasks that happen in the background in the service worker. If there are any tasks in the queue, they are listed with a description. In this example, the service worker has one such task scheduled, a post-initialization operation involving an update check and cleanup of stale caches.</source>
          <target state="translated">闲置任务队列是服务工作者在后台发生的所有待处理任务的队列。如果队列中存在任何任务,则会列出它们的描述。在本例中,服务工作者有一个这样的任务,即涉及更新检查和清理陈旧缓存的后初始化操作。</target>
        </trans-unit>
        <trans-unit id="b00f55586209c5611cf844fe2c21fbd033033eb7" translate="yes" xml:space="preserve">
          <source>The JSON schema that defines a schematic's options supports extensions to allow the declarative definition of prompts and their respective behavior. No additional logic or changes are required to the code of a schematic to support the prompts. The following JSON schema is a complete description of the long-form syntax for the &lt;code&gt;x-prompt&lt;/code&gt; field.</source>
          <target state="translated">定义原理图选项的JSON模式支持扩展，以允许对提示及其相应行为进行声明式定义。无需其他逻辑或更改原理图代码即可支持提示。以下JSON模式是 &lt;code&gt;x-prompt&lt;/code&gt; 字段的长格式语法的完整描述。</target>
        </trans-unit>
        <trans-unit id="6b14e7b839406e6c6e07b41831c981d00cdb2be0" translate="yes" xml:space="preserve">
          <source>The JSON schemas for the default schematics used by the CLI to generate projects and parts of projects are collected in the package &lt;a href=&quot;https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json&quot;&gt;&lt;code&gt;@schematics/angular&lt;/code&gt;&lt;/a&gt;. The schema describes the options available to the CLI for each of the &lt;code&gt;ng generate&lt;/code&gt; sub-commands, as shown in the &lt;code&gt;--help&lt;/code&gt; output.</source>
          <target state="translated">CLI用来生成项目和项目部分的默认逻辑示意图的JSON模式收集在软件包&lt;a href=&quot;https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json&quot;&gt; &lt;code&gt;@schematics/angular&lt;/code&gt; &lt;/a&gt;。该模式描述了可用于CLI的每个 &lt;code&gt;ng generate&lt;/code&gt; 子命令的选项，如 &lt;code&gt;--help&lt;/code&gt; 输出所示。</target>
        </trans-unit>
        <trans-unit id="39ad755f2d2f00791e1d617d38aca11a845811ee" translate="yes" xml:space="preserve">
          <source>The JSON schemas for the default schematics used by the CLI to generate projects and parts of projects are collected in the package &lt;a href=&quot;https://raw.githubusercontent.com/angular/angular-cli/v7.0.0/packages/schematics/angular/application/schema.json&quot;&gt;&lt;code&gt;@schematics/angular&lt;/code&gt;&lt;/a&gt;. The schema describes the options available to the CLI for each of the &lt;code&gt;ng generate&lt;/code&gt; sub-commands, as shown in the &lt;code&gt;--help&lt;/code&gt; output.</source>
          <target state="translated">CLI用来生成项目和项目部分的默认逻辑示意图的JSON模式收集在软件包&lt;a href=&quot;https://raw.githubusercontent.com/angular/angular-cli/v7.0.0/packages/schematics/angular/application/schema.json&quot;&gt; &lt;code&gt;@schematics/angular&lt;/code&gt; &lt;/a&gt;。该模式描述了可用于CLI的每个 &lt;code&gt;ng generate&lt;/code&gt; 子命令的选项，如 &lt;code&gt;--help&lt;/code&gt; 输出所示。</target>
        </trans-unit>
        <trans-unit id="f07f2ef6bdc0276dc66c13525614930ce905b490" translate="yes" xml:space="preserve">
          <source>The NPM registry to use.</source>
          <target state="translated">要使用的NPM注册表。</target>
        </trans-unit>
        <trans-unit id="ddfa2dc248ef3e69640a4a039271e3809480eb1f" translate="yes" xml:space="preserve">
          <source>The NgModule classes differ from JavaScript module in the following key ways:</source>
          <target state="translated">NgModule类与JavaScript模块的区别主要体现在以下几个方面。</target>
        </trans-unit>
        <trans-unit id="3c3d2df9acaceef7f08c09fa40d55f3607762e32" translate="yes" xml:space="preserve">
          <source>The NgModule instance.</source>
          <target state="translated">NgModule实例。</target>
        </trans-unit>
        <trans-unit id="0747755c8b239fe51fe8a94eabd907811f0aaa1b" translate="yes" xml:space="preserve">
          <source>The NgModule system is different from and unrelated to the JavaScript (ES2015) module system for managing collections of JavaScript objects. These are &lt;em&gt;complementary&lt;/em&gt; module systems that you can use together to write your apps.</source>
          <target state="translated">NgModule系统与用于管理JavaScript对象集合的JavaScript（ES2015）模块系统不同，并且与此无关。这些是&lt;em&gt;互补的&lt;/em&gt;模块系统，可以一起使用来编写应用程序。</target>
        </trans-unit>
        <trans-unit id="e78772f224ee2af36b30cd74fcf9b437c350b4e9" translate="yes" xml:space="preserve">
          <source>The PhoneCat project has both E2E Protractor tests and some Karma unit tests in it. Of these two, E2E tests can be dealt with much more easily: By definition, E2E tests access the application from the &lt;em&gt;outside&lt;/em&gt; by interacting with the various UI elements the app puts on the screen. E2E tests aren't really that concerned with the internal structure of the application components. That also means that, although you modify the project quite a bit during the upgrade, the E2E test suite should keep passing with just minor modifications. You didn't change how the application behaves from the user's point of view.</source>
          <target state="translated">PhoneCat项目中同时包含E2E量角器测试和一些Karma单元测试。在这两种方法中，可以更轻松地处理E2E测试：根据定义，E2E测试通过与应用程序在屏幕上放置的各种UI元素进行交互，从&lt;em&gt;外部&lt;/em&gt;访问应用程序。 E2E测试并不是真正与应用程序组件的内部结构有关。这也意味着，尽管您在升级过程中对项目进行了很多修改，但是E2E测试套件应该只进行少量修改就可以通过。从用户的角度来看，您没有更改应用程序的行为。</target>
        </trans-unit>
        <trans-unit id="f2ae4909a5e215dd224a806bec7a9225a92ca5ec" translate="yes" xml:space="preserve">
          <source>The Popup Service example app (shown below) defines a component that you can either load dynamically or convert to a custom element.</source>
          <target state="translated">弹出式服务示例应用程序(如下图所示)定义了一个组件,您可以动态加载或转换为自定义元素。</target>
        </trans-unit>
        <trans-unit id="84993d2db560df7bc9b4de2bc50d97c62f64d0f4" translate="yes" xml:space="preserve">
          <source>The Router also makes use of multiple providers associated with a single token. When you provide multiple sets of routes using &lt;a href=&quot;../api/router/routermodule#forroot&quot;&gt;RouterModule.forRoot&lt;/a&gt; and &lt;a href=&quot;../api/router/routermodule#forchild&quot;&gt;RouterModule.forChild&lt;/a&gt; in a single module, the &lt;a href=&quot;../api/router/routes&quot;&gt;ROUTES&lt;/a&gt; token combines all the different provided sets of routes into a single value.</source>
          <target state="translated">路由器还利用与单个令牌关联的多个提供程序。当您在单个模块中使用&lt;a href=&quot;../api/router/routermodule#forroot&quot;&gt;RouterModule.forRoot&lt;/a&gt;和&lt;a href=&quot;../api/router/routermodule#forchild&quot;&gt;RouterModule.forChild&lt;/a&gt;提供多组路由时，&lt;a href=&quot;../api/router/routes&quot;&gt;ROUTES&lt;/a&gt;令牌会将所有提供的所有不同路由集合合并为一个值。</target>
        </trans-unit>
        <trans-unit id="06f152c32b945154045d8af9ca9b76a3d1746fea" translate="yes" xml:space="preserve">
          <source>The Router and Forms modules use observables to listen for and respond to user-input events.</source>
          <target state="translated">Router和Forms模块使用观测值来监听和响应用户输入事件。</target>
        </trans-unit>
        <trans-unit id="6719949fe48b382a4f5d441956e3a39da43a1cf4" translate="yes" xml:space="preserve">
          <source>The RouterLink directive gives the router control over the anchor element. In this case, the route (URL) contains one fixed segment (&lt;code&gt;/products&lt;/code&gt;) and the final segment is variable, inserting the id property of the current product. For example, the URL for a product with an &lt;code&gt;id&lt;/code&gt; of 1 will be similar to &lt;code&gt;https://getting-started-myfork.stackblitz.io/products/1&lt;/code&gt;.</source>
          <target state="translated">RouterLink指令使路由器可以控制锚元素。在这种情况下，路由（URL）包含一个固定的细分（ &lt;code&gt;/products&lt;/code&gt; ），最后的细分是可变的，插入了当前商品的id属性。例如， &lt;code&gt;id&lt;/code&gt; 为1 的产品的URL 将类似于 &lt;code&gt;https://getting-started-myfork.stackblitz.io/products/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec9884b83270d5dfad5b0c687a2bc2fbf8233d70" translate="yes" xml:space="preserve">
          <source>The RouterLink directive gives the router control over the anchor element. In this case, the route, or URL, contains one fixed segment, &lt;code&gt;/products&lt;/code&gt;, while the final segment is variable, inserting the id property of the current product. For example, the URL for a product with an &lt;code&gt;id&lt;/code&gt; of 1 will be similar to &lt;code&gt;https://getting-started-myfork.stackblitz.io/products/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5da276658695e0be6ae79161628d231d307feb" translate="yes" xml:space="preserve">
          <source>The Routing Module has several characteristics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fd3904247e990d23cf1026f75cc708c81d26d7" translate="yes" xml:space="preserve">
          <source>The Routing Module is a design choice whose value is most obvious when the configuration is complex and includes specialized guard and resolver services. It can seem like overkill when the actual configuration is dead simple.</source>
          <target state="translated">路由模块是一种设计选择,当配置复杂,包括专门的防护和解析器服务时,其价值最为明显。当实际配置非常简单的时候,它可能会显得矫枉过正。</target>
        </trans-unit>
        <trans-unit id="b6fe2baca6e2f506f7a1094ee33169d007121a3d" translate="yes" xml:space="preserve">
          <source>The RxJS &lt;code&gt;last()&lt;/code&gt; operator emits the observable's last value before completing, which will be the test quote. The &lt;code&gt;subscribe&lt;/code&gt; callback calls &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to update the quote element with the test quote, in the same manner as the earlier tests.</source>
          <target state="translated">RxJS &lt;code&gt;last()&lt;/code&gt; 运算符在完成之前会发出可观察对象的最后一个值，该值将是测试引号。该 &lt;code&gt;subscribe&lt;/code&gt; 回拨电话 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; 来更新与测试报价quote元素，以同样的方式与前面的测试。</target>
        </trans-unit>
        <trans-unit id="e4ef5b64a22e5f089b247e3fce5803948ddbdd68" translate="yes" xml:space="preserve">
          <source>The RxJS &lt;code&gt;last()&lt;/code&gt; operator emits the observable's last value before completing, which will be the test quote. The &lt;code&gt;subscribe&lt;/code&gt; callback calls &lt;code&gt;detectChanges()&lt;/code&gt; to update the quote element with the test quote, in the same manner as the earlier tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaa953111009647a434b575f4fd13ea2b557407" translate="yes" xml:space="preserve">
          <source>The RxJS &lt;code&gt;tap&lt;/code&gt; operator (as in &quot;wiretap&quot;) lets the code inspect both success and error values passing through the observable without disturbing them.</source>
          <target state="translated">RxJS &lt;code&gt;tap&lt;/code&gt; 操作符（如&amp;ldquo;窃听&amp;rdquo;中所述）使代码可以检查通过可观察对象的成功值和错误值，而不会干扰它们。</target>
        </trans-unit>
        <trans-unit id="1d1cccc9cf3740247de7c91761afdad5881ffa16" translate="yes" xml:space="preserve">
          <source>The RxJS &lt;code&gt;tap&lt;/code&gt; operator captures whether the request succeeded or failed. The RxJS &lt;code&gt;finalize&lt;/code&gt; operator is called when the response observable either errors or completes (which it must), and reports the outcome to the &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">RxJS &lt;code&gt;tap&lt;/code&gt; 操作符捕获请求是成功还是失败。当响应可观察到错误或完成时（必须），将调用RxJS &lt;code&gt;finalize&lt;/code&gt; 运算符，并将结果报告给 &lt;code&gt;MessageService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="827ac77d8ed61c8b49d2de8b0bdc53bf70d6d536" translate="yes" xml:space="preserve">
          <source>The RxJS library</source>
          <target state="translated">RxJS库</target>
        </trans-unit>
        <trans-unit id="f0136a6174ce00439105cc5cccfc1cdfbe02fb4c" translate="yes" xml:space="preserve">
          <source>The Schematics framework provides a file templating system, which supports both path and content templates. The system operates on placeholders defined inside files or paths that loaded in the input &lt;code&gt;Tree&lt;/code&gt;. It fills these in using values passed into the &lt;code&gt;Rule&lt;/code&gt;.</source>
          <target state="translated">Schematics框架提供了文件模板系统，该系统同时支持路径和内容模板。系统在定义在输入 &lt;code&gt;Tree&lt;/code&gt; 中的文件或路径中定义的占位符上运行。它使用传递到 &lt;code&gt;Rule&lt;/code&gt; 中的值来填充这些值。</target>
        </trans-unit>
        <trans-unit id="a709c4d8482569aaa0ad00942fcea4cbbe6b52ed" translate="yes" xml:space="preserve">
          <source>The ServiceWorker will redirect navigation requests that don't match any &lt;code&gt;asset&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt; group to the specified &lt;a href=&quot;service-worker-config#index-file&quot;&gt;index file&lt;/a&gt;. A request is considered to be a navigation request if:</source>
          <target state="translated">ServiceWorker会将与任何 &lt;code&gt;asset&lt;/code&gt; 或 &lt;code&gt;data&lt;/code&gt; 组都不匹配的导航请求重定向到指定的&lt;a href=&quot;service-worker-config#index-file&quot;&gt;索引文件&lt;/a&gt;。在以下情况下，该请求被视为导航请求：</target>
        </trans-unit>
        <trans-unit id="05060365aca92ff57a2a8cb3fad933d606282ffe" translate="yes" xml:space="preserve">
          <source>The StackBlitz generator might provide the cart service in &lt;code&gt;app.module.ts&lt;/code&gt; by default. That differs from the example, which uses a bundle-optimization technique, an &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator with the &lt;code&gt;{ providedIn: 'root' }&lt;/code&gt; statement. For more information about services, see &lt;a href=&quot;../guide/architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8e6705d088a4f6f8c71e996096d93779313a26" translate="yes" xml:space="preserve">
          <source>The SystemJS configuration file &lt;code&gt;systemjs.config.js&lt;/code&gt; to the project root directory.</source>
          <target state="translated">将SystemJS配置文件 &lt;code&gt;systemjs.config.js&lt;/code&gt; 移至项目根目录。</target>
        </trans-unit>
        <trans-unit id="55401394d273b717445755bd856afd574e272014" translate="yes" xml:space="preserve">
          <source>The Testability service provides testing hooks that can be accessed from the browser and by services such as Protractor. Each bootstrapped Angular application on the page will have an instance of Testability.</source>
          <target state="translated">Testability服务提供了测试钩子,可以从浏览器和Protractor等服务访问。页面上的每个bootstrapped Angular应用都会有一个Testability的实例。</target>
        </trans-unit>
        <trans-unit id="5766cb1be4ee9631ce9045b332f79763bfe74b65" translate="yes" xml:space="preserve">
          <source>The Tour of Heroes &lt;code&gt;HeroesComponent&lt;/code&gt; is currently getting and displaying fake data.</source>
          <target state="translated">英雄巡回赛 &lt;code&gt;HeroesComponent&lt;/code&gt; 当前正在获取并显示虚假数据。</target>
        </trans-unit>
        <trans-unit id="d2f2b03e1a17c636938183bec1a40bd186d69702" translate="yes" xml:space="preserve">
          <source>The Tour of Heroes app displays a list of heroes in a Master/Detail view.</source>
          <target state="translated">英雄之旅应用在主/从视图中显示英雄列表。</target>
        </trans-unit>
        <trans-unit id="29d68459c27733c932fb0a3e9b100ffb25836775" translate="yes" xml:space="preserve">
          <source>The Tour of Heroes is a comprehensive tutorial that guides you through the process of building an application with many of Angular's most popular features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c698daff2c8aa5974a237e4112ae50ff6e51cc" translate="yes" xml:space="preserve">
          <source>The TypeScript and Angular have a wide range of options which can be used to configure type-checking features and generated output. For more information, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;Configuration inheritance with extends&lt;/a&gt; section of the TypeScript documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8568fa0f23ba2d73c5291a0c991f3fc03b8708b2" translate="yes" xml:space="preserve">
          <source>The TypeScript compiler does some of the analytic work of the first phase. It emits the &lt;code&gt;.d.ts&lt;/code&gt;&lt;em&gt;type definition files&lt;/em&gt; with type information that the AOT compiler needs to generate application code. At the same time, the AOT &lt;strong&gt;collector&lt;/strong&gt; analyzes the metadata recorded in the Angular decorators and outputs metadata information in &lt;strong&gt;&lt;code&gt;.metadata.json&lt;/code&gt;&lt;/strong&gt; files, one per &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">TypeScript编译器完成了第一阶段的一些分析工作。它将发出 &lt;code&gt;.d.ts&lt;/code&gt; &lt;em&gt;类型定义文件&lt;/em&gt;，其中包含AOT编译器生成应用程序代码所需的类型信息。同时，AOT &lt;strong&gt;收集器&lt;/strong&gt;分析在Angular装饰器中记录的元数据，并在&lt;strong&gt; &lt;code&gt;.metadata.json&lt;/code&gt; &lt;/strong&gt;文件（每个 &lt;code&gt;.d.ts&lt;/code&gt; 文件一个）中输出元数据信息。</target>
        </trans-unit>
        <trans-unit id="6e0a06e36760a2eff0336b6bc84af9dbdc59d36a" translate="yes" xml:space="preserve">
          <source>The TypeScript compiler generates a public field for each &lt;code&gt;public&lt;/code&gt; constructor parameter and automatically assigns the parameter&amp;rsquo;s value to that field when you create heroes.</source>
          <target state="translated">TypeScript编译器为每个 &lt;code&gt;public&lt;/code&gt; 构造函数参数生成一个公共字段，并在创建英雄时自动将参数的值分配给该字段。</target>
        </trans-unit>
        <trans-unit id="544dc91fe288513548a9233bbe8426452eb2d737" translate="yes" xml:space="preserve">
          <source>The TypeScript language server, including the &lt;em&gt;tsc&lt;/em&gt; TypeScript compiler.</source>
          <target state="translated">TypeScript语言服务器，包括&lt;em&gt;tsc&lt;/em&gt; TypeScript编译器。</target>
        </trans-unit>
        <trans-unit id="585484bd3428c42d4450046039048a1e517dabea" translate="yes" xml:space="preserve">
          <source>The URL bound to the &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; attribute flows in to the directive's &lt;code&gt;linkParams&lt;/code&gt; property.</source>
          <target state="translated">绑定到 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; 属性的URL 流入指令的 &lt;code&gt;linkParams&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="d3b7615b7e3818d17d835d95dfcc876f7081b556" translate="yes" xml:space="preserve">
          <source>The URL for the current application state. This is used for initializing the platform's location. &lt;code&gt;protocol&lt;/code&gt;, &lt;code&gt;hostname&lt;/code&gt;, and &lt;code&gt;port&lt;/code&gt; will be overridden if &lt;code&gt;baseUrl&lt;/code&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b58a08584550f73eae9ff3e2376fdabaeb0c99" translate="yes" xml:space="preserve">
          <source>The URL fragment shared by all the routes</source>
          <target state="translated">所有路径共享的URL片段</target>
        </trans-unit>
        <trans-unit id="7375623d6e6cb15b981147758fafc25c5fab9496" translate="yes" xml:space="preserve">
          <source>The URL in &lt;code&gt;&amp;lt;action type=&quot;Rewrite&quot; url=&quot;/src/&quot;/&amp;gt;&lt;/code&gt; should match the base href in &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">在URL &lt;code&gt;&amp;lt;action type=&quot;Rewrite&quot; url=&quot;/src/&quot;/&amp;gt;&lt;/code&gt; 应与在基本href &lt;code&gt;index.html&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c30899e221cfea13e24ea0a470ee42b50353e939" translate="yes" xml:space="preserve">
          <source>The URL is the heroes resource URL plus the &lt;code&gt;id&lt;/code&gt; of the hero to delete.</source>
          <target state="translated">该URL是英雄资源URL加上要删除的英雄的 &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c5643dddca94caf55142e6ccbe6d6ec8803e3a0" translate="yes" xml:space="preserve">
          <source>The URL is unchanged. The heroes web API knows which hero to update by looking at the hero's &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">URL不变。Heroes Web API通过查看英雄的 &lt;code&gt;id&lt;/code&gt; 知道要更新哪个英雄。</target>
        </trans-unit>
        <trans-unit id="08c013a55e0baa8ffe5403ca40144123b223ee92" translate="yes" xml:space="preserve">
          <source>The URL must not contain &lt;code&gt;__&lt;/code&gt;.</source>
          <target state="translated">该网址不得包含 &lt;code&gt;__&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81837d96bfb7f069e22ae8b8419daf579e0ede35" translate="yes" xml:space="preserve">
          <source>The URL must not contain a file extension (i.e. a &lt;code&gt;.&lt;/code&gt;) in the last path segment.</source>
          <target state="translated">该URL 的最后一个路径段中不得包含文件扩展名（即 &lt;code&gt;.&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9c1a40ff35abb3598077b170eeaec00c0f54cc0e" translate="yes" xml:space="preserve">
          <source>The URL path</source>
          <target state="translated">URL路径</target>
        </trans-unit>
        <trans-unit id="c0dd8facec71b1ec87d76b9020042f5cba77847d" translate="yes" xml:space="preserve">
          <source>The URL segments matched by this route</source>
          <target state="translated">该路径所匹配的URL段</target>
        </trans-unit>
        <trans-unit id="cc2bde1fb3859667c3bfd03de6cc864cffab7897" translate="yes" xml:space="preserve">
          <source>The URL segments of this group. See &lt;code&gt;&lt;a href=&quot;urlsegment&quot;&gt;UrlSegment&lt;/a&gt;&lt;/code&gt; for more information</source>
          <target state="translated">该组的URL段。有关更多信息，请参见 &lt;code&gt;&lt;a href=&quot;urlsegment&quot;&gt;UrlSegment&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b38217a179daea3d6656686b81dd85b6b4153c1" translate="yes" xml:space="preserve">
          <source>The URL string.</source>
          <target state="translated">URL字符串。</target>
        </trans-unit>
        <trans-unit id="52453743ef9a067eaee16ecf0d5bfffaa8d88e34" translate="yes" xml:space="preserve">
          <source>The URL that is the destination for this navigation.</source>
          <target state="translated">这个导航的目的地的URL。</target>
        </trans-unit>
        <trans-unit id="82fa7104935e782b71b9ac41f1f70a9244a9aa62" translate="yes" xml:space="preserve">
          <source>The URL that the browser client (or live-reload client, if enabled) should use to connect to the development server. Use for a complex dev server setup, such as one with reverse proxies.</source>
          <target state="translated">浏览器客户端(或live-reload客户端,如果启用)应使用的URL连接到开发服务器。用于复杂的开发服务器设置,例如使用反向代理。</target>
        </trans-unit>
        <trans-unit id="c519406384bbfabb8d794f38fa84b37a2a8a8261" translate="yes" xml:space="preserve">
          <source>The ability to alter the state of a value after its creation. &lt;a href=&quot;glossary#reactive-forms&quot;&gt;Reactive forms&lt;/a&gt; perform immutable changes in that each change to the data model produces a new data model rather than modifying the existing one. &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;Template-driven forms&lt;/a&gt; perform mutable changes with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;glossary#data-binding&quot;&gt;two-way data binding&lt;/a&gt; to modify the existing data model in place.</source>
          <target state="translated">在值创建后更改其状态的能力。&lt;a href=&quot;glossary#reactive-forms&quot;&gt;响应式表单&lt;/a&gt;执行不可变的更改，因为对数据模型的每次更改都会产生一个新的数据模型，而不是修改现有的数据模型。&lt;a href=&quot;glossary#template-driven-forms&quot;&gt;模板驱动的表单&lt;/a&gt;使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 和&lt;a href=&quot;glossary#data-binding&quot;&gt;双向数据绑定&lt;/a&gt;执行可变更改，以修改现有的数据模型。</target>
        </trans-unit>
        <trans-unit id="caa4182924ebe66fa358bd4a3e14ba6d81b491fb" translate="yes" xml:space="preserve">
          <source>The ability to configure one or more providers at different levels opens up useful possibilities. For a look at the following scenarios in a working app, see the heroes use case examples.</source>
          <target state="translated">在不同级别上配置一个或多个提供者的能力开辟了有用的可能性。关于工作应用中的以下场景,请参见英雄用例。</target>
        </trans-unit>
        <trans-unit id="d357726f6694fec9b1683368af646f1226db5511" translate="yes" xml:space="preserve">
          <source>The ability to request &lt;a href=&quot;http#typed-response&quot;&gt;typed response objects&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fe34565db9f623c1a4c2f1c8f3d0239b4b1371" translate="yes" xml:space="preserve">
          <source>The above command completes the following actions:</source>
          <target state="translated">上述命令完成以下操作。</target>
        </trans-unit>
        <trans-unit id="d10343d799b7008227efc9a02b184cf8a761ab84" translate="yes" xml:space="preserve">
          <source>The above example demonstrates changing a component's code to accommodate a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d6af0be00ddd39a1a4c1567712c9175938cf95" translate="yes" xml:space="preserve">
          <source>The absolute URL for the latter example, including the &lt;code&gt;localhost&lt;/code&gt; origin, is</source>
          <target state="translated">后一个示例的绝对URL（包括 &lt;code&gt;localhost&lt;/code&gt; 来源）为</target>
        </trans-unit>
        <trans-unit id="63cb971f43856a00f354567181daff31d8142b01" translate="yes" xml:space="preserve">
          <source>The absolute URL for the latter example, including the &lt;code&gt;localhost&lt;/code&gt; origin, is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e256b4477c3d36ae67c61de1ee6c1a8ff7190f" translate="yes" xml:space="preserve">
          <source>The abstract base class for the concrete form control classes &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It provides their common behaviors and properties.</source>
          <target state="translated">具体表单控件类 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 的抽象基类。它提供了它们的常见行为和属性。</target>
        </trans-unit>
        <trans-unit id="402b1c3034ebb0af6c0f9e2efa6f13695bff7d6e" translate="yes" xml:space="preserve">
          <source>The abstraction of the form model promotes simplicity over structure. The template-driven form directive &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; is responsible for creating and managing the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance for a given form element. It's less explicit, but you no longer have direct control over the form model.</source>
          <target state="translated">表单模型的抽象促进了结构的简化。模板驱动的表单指令 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 负责为给定的表单元素创建和管理 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例。它不太明确，但是您不再可以直接控制表单模型。</target>
        </trans-unit>
        <trans-unit id="e35904284dfba5a413162707ebab87af73ae1a76" translate="yes" xml:space="preserve">
          <source>The act of subscribing to an observable triggers its execution, associates callbacks with it, and creates a &lt;code&gt;Subscription&lt;/code&gt; object that lets you unsubscribe.</source>
          <target state="translated">订阅可观察对象的行为将触发其执行，将回调与之关联，并创建一个 &lt;code&gt;Subscription&lt;/code&gt; 对象，该对象可让您取消订阅。</target>
        </trans-unit>
        <trans-unit id="14342a1287cec6129e7b1a94b8d02bdf3a5f1f89" translate="yes" xml:space="preserve">
          <source>The actions and effects are as follows:</source>
          <target state="translated">其行动和效果如下:</target>
        </trans-unit>
        <trans-unit id="6c6b7761a008c0eacb4c9720e87a44ff177306a4" translate="yes" xml:space="preserve">
          <source>The ad banner uses a helper directive called &lt;code&gt;AdDirective&lt;/code&gt; to mark valid insertion points in the template.</source>
          <target state="translated">广告标语使用名为 &lt;code&gt;AdDirective&lt;/code&gt; 的帮助程序指令在模板中标记有效的插入点。</target>
        </trans-unit>
        <trans-unit id="727d776b678ae681b954ef7437bc5f9ca400e1a0" translate="yes" xml:space="preserve">
          <source>The admin feature file structure looks like this:</source>
          <target state="translated">管理功能文件结构是这样的。</target>
        </trans-unit>
        <trans-unit id="d83a95f34e4382511e2a151024543d721552d92d" translate="yes" xml:space="preserve">
          <source>The admin feature is now protected by the guard, albeit protected poorly.</source>
          <target state="translated">现在的管理功能已经被卫士保护起来了,虽然保护得不好。</target>
        </trans-unit>
        <trans-unit id="4747864fdf4438dfdda6f414c25b73c364d2192c" translate="yes" xml:space="preserve">
          <source>The admin feature is now protected by the guard, but the guard requires more customization to work fully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96aed0c722ab88a83207ea9b85e25c7e2f416849" translate="yes" xml:space="preserve">
          <source>The admin feature module contains the &lt;code&gt;AdminComponent&lt;/code&gt; used for routing within the feature module, a dashboard route and two unfinished components to manage crises and heroes.</source>
          <target state="translated">管理员功能模块包含用于在功能模块内进行路由的 &lt;code&gt;AdminComponent&lt;/code&gt; ，仪表板路由和两个用于处理危机和英雄的未完成组件。</target>
        </trans-unit>
        <trans-unit id="ab267a14770ddb26fa34604e27d4f4b4861c73ef" translate="yes" xml:space="preserve">
          <source>The aggregate value of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, including any disabled controls.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 的聚合值，包括所有禁用的控件。</target>
        </trans-unit>
        <trans-unit id="fd0a4fc774ffbf4fe8af10420d93bf7b1af6f41a" translate="yes" xml:space="preserve">
          <source>The aggregate value of the array, including any disabled controls.</source>
          <target state="translated">数组的总值,包括任何被禁用的控件。</target>
        </trans-unit>
        <trans-unit id="0f45a54234e4cd13b23944c4560457d66bc0cc78" translate="yes" xml:space="preserve">
          <source>The aliases control in the form group instance is now populated with a single control until more controls are added dynamically.</source>
          <target state="translated">表单组实例中的别名控件现在由单个控件填充,直到动态添加更多控件。</target>
        </trans-unit>
        <trans-unit id="84256de55279155b325c264a0950f97a32368023" translate="yes" xml:space="preserve">
          <source>The alternative display includes an &lt;em&gt;Edit&lt;/em&gt; button whose click event is bound to an expression that clears the &lt;code&gt;submitted&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34fac3a099ab7998cdfc1b5ee75e1f1e111edc0" translate="yes" xml:space="preserve">
          <source>The alternative is a reactive form. For an introduction and comparison of both forms approaches, see &lt;a href=&quot;forms-overview&quot;&gt;Introduction to Angular Forms&lt;/a&gt;.</source>
          <target state="translated">另一种是反应形式。有关这两种形式方法的介绍和比较，请参阅&lt;a href=&quot;forms-overview&quot;&gt;《角度形式介绍》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1941cf59d3da9ef9cde211095dfc431f3816eae8" translate="yes" xml:space="preserve">
          <source>The alternative is a template-driven form. For an introduction and comparison of both forms approaches, see &lt;a href=&quot;forms-overview&quot;&gt;Introduction to Angular Forms&lt;/a&gt;.</source>
          <target state="translated">另一种选择是模板驱动的形式。有关这两种形式方法的介绍和比较，请参阅&lt;a href=&quot;forms-overview&quot;&gt;《角度形式介绍》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2afb8502dfea931790e61f9165c97e230612b7ba" translate="yes" xml:space="preserve">
          <source>The anchor directive</source>
          <target state="translated">锚定指令</target>
        </trans-unit>
        <trans-unit id="d6857daa67f01cf8f26a596689dfd09a6f899822" translate="yes" xml:space="preserve">
          <source>The anchor element in the parent view for this embedded view.</source>
          <target state="translated">该嵌入式视图的父视图中的锚元素。</target>
        </trans-unit>
        <trans-unit id="6c969a2cfd58f9109f69d4b274dd9f759efa168a" translate="yes" xml:space="preserve">
          <source>The angular i18n extractor tool generates a file with a translation unit entry for each &lt;code&gt;i18n&lt;/code&gt; attribute in a template. By default, it assigns each translation unit a unique id such as this one:</source>
          <target state="translated">角度i18n提取器工具会为模板中的每个 &lt;code&gt;i18n&lt;/code&gt; 属性生成一个带有翻译单元条目的文件。默认情况下，它为每个翻译单元分配一个唯一的ID，例如：</target>
        </trans-unit>
        <trans-unit id="b4ed70517cf63237f526da9af09e8982010ac6a8" translate="yes" xml:space="preserve">
          <source>The animation &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function emits &lt;em&gt;callbacks&lt;/em&gt; when it starts and when it finishes. In the example below we have a component that contains an &lt;code&gt;openClose&lt;/code&gt; trigger.</source>
          <target state="translated">动画 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 函数在开始和结束时都会发出&lt;em&gt;回调&lt;/em&gt;。在下面的示例中，我们有一个包含 &lt;code&gt;openClose&lt;/code&gt; 触发器的组件。</target>
        </trans-unit>
        <trans-unit id="8f36fc312f8edc026c035d420a1e31c8179cfbb5" translate="yes" xml:space="preserve">
          <source>The animation &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function emits &lt;em&gt;callbacks&lt;/em&gt; when it starts and when it finishes. The example below features a component that contains an &lt;code&gt;openClose&lt;/code&gt; trigger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c58e882c1163e1488d4a8deb42e2f4a125fcae" translate="yes" xml:space="preserve">
          <source>The animation code does the following after styling the views:</source>
          <target state="translated">在对视图进行风格化处理后,动画代码做如下处理。</target>
        </trans-unit>
        <trans-unit id="39510d97650c99c8d731a36b1b5cab49af76350b" translate="yes" xml:space="preserve">
          <source>The animation definition does several things:</source>
          <target state="translated">动画定义有几个作用。</target>
        </trans-unit>
        <trans-unit id="5c15153dc0c0d7f3e168540e74067114fac5f559" translate="yes" xml:space="preserve">
          <source>The animation does the following:</source>
          <target state="translated">该动画的作用如下。</target>
        </trans-unit>
        <trans-unit id="359225b3095525891affab38ee53ef7bf8f5aa89" translate="yes" xml:space="preserve">
          <source>The animation is executed or triggered when the expression value changes to a new state.</source>
          <target state="translated">当表达式值变化到新的状态时,会执行或触发动画。</target>
        </trans-unit>
        <trans-unit id="e37c1ace322c9054988c345df432382153656a5c" translate="yes" xml:space="preserve">
          <source>The animation phase in which the callback was invoked, one of &quot;start&quot; or &quot;done&quot;.</source>
          <target state="translated">调用回调的动画阶段,&quot;开始 &quot;或 &quot;完成 &quot;中的一个。</target>
        </trans-unit>
        <trans-unit id="880fbe2cde1e59f262c1b3a83415a83ff7f6bba6" translate="yes" xml:space="preserve">
          <source>The answer is grounded in a fundamental characteristic of the Angular dependency-injection system. An injector can add providers &lt;em&gt;until it's first used&lt;/em&gt;. Once an injector starts creating and delivering services, its provider list is frozen; no new providers are allowed.</source>
          <target state="translated">答案是基于Angular依赖注入系统的基本特征。注入程序可以添加提供程序，&lt;em&gt;直到第一次使用它&lt;/em&gt;。一旦注入程序开始创建和交付服务，其提供商列表将被冻结；不允许新的提供商。</target>
        </trans-unit>
        <trans-unit id="a0e08c28364e929009cd4fcd1fafe952fc3e50ec" translate="yes" xml:space="preserve">
          <source>The app ID to use in withServerTransition().</source>
          <target state="translated">在withServerTransition()中使用的应用程序ID。</target>
        </trans-unit>
        <trans-unit id="25a56b32ae6b92c99875f10e2a3113c098b85214" translate="yes" xml:space="preserve">
          <source>The app and its translation file</source>
          <target state="translated">该应用程序及其翻译文件</target>
        </trans-unit>
        <trans-unit id="db254e7060d83009dcee1a2432f520bc87c194ef" translate="yes" xml:space="preserve">
          <source>The app displays &quot;Miss Marple&quot; as the user instead of the default &quot;Sherlock Holmes&quot;.</source>
          <target state="translated">该应用将 &quot;马普尔小姐 &quot;显示为用户,而不是默认的 &quot;夏洛克-福尔摩斯&quot;。</target>
        </trans-unit>
        <trans-unit id="027095d9f26f0b5344d94ebc0591a3e4f039f94d" translate="yes" xml:space="preserve">
          <source>The app identifier to use for transition.</source>
          <target state="translated">用于过渡的应用程序标识符。</target>
        </trans-unit>
        <trans-unit id="c5d365172cdf1df024ceeae484b684f201469335" translate="yes" xml:space="preserve">
          <source>The app is already set up to use the Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; and to use routing to navigate to the product list component you modified earlier. This section shows you how to define a route to show individual product details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac4d8abd7c8f6886de0bd1d638135e72499484d" translate="yes" xml:space="preserve">
          <source>The app is already set up to use the Angular router and to use routing to navigate to the product list component you modified earlier. Let's define a route to show individual product details.</source>
          <target state="translated">应用程序已经设置好使用Angular路由器,并使用路由来导航到你之前修改的产品列表组件。让我们定义一个路由来显示单个产品的详细信息。</target>
        </trans-unit>
        <trans-unit id="afc7c88884fd7e0ec8cfc8b97f304e1f0a3e0b9e" translate="yes" xml:space="preserve">
          <source>The app now displays the name and description of each product in the list. Notice that the final product does not have a description paragraph. Because the product's description property is empty, Angular doesn't create the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element&amp;mdash;including the word &quot;Description&quot;.</source>
          <target state="translated">现在，该应用程序将在列表中显示每个产品的名称和描述。请注意，最终产品没有描述段落。由于产品的description属性为空，因此Angular不会创建 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素，包括单词&amp;ldquo; Description&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="80b00fe83f126d464662ae9b7cb3f238f2be6cf8" translate="yes" xml:space="preserve">
          <source>The app now has a product list and sharing feature. In the process, you've learned to use five common features of Angular's template syntax:</source>
          <target state="translated">现在,该应用有了产品列表和分享功能。在这个过程中,你已经学会了使用Angular模板语法的五个常用功能。</target>
        </trans-unit>
        <trans-unit id="0cdfea076c0644e956bc7ea95c84f491e7fb9c75" translate="yes" xml:space="preserve">
          <source>The app now shows unexpected behavior: When the user adds flying heroes, none of them appear under &quot;Heroes who fly.&quot; This happens because the code that adds a hero does so by pushing it onto the &lt;code&gt;heroes&lt;/code&gt; array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4004b359d1942125b76739a78f40d94105d5d4b8" translate="yes" xml:space="preserve">
          <source>The app probably defines more than a dozen financial instrument components. If you're lucky, they all implement the same base class whose API your &lt;code&gt;NewsComponent&lt;/code&gt; understands.</source>
          <target state="translated">该应用程序可能定义了十几个金融工具组件。如果幸运的话，它们都实现了您的 &lt;code&gt;NewsComponent&lt;/code&gt; 可以理解其API的相同基类。</target>
        </trans-unit>
        <trans-unit id="dbbf8f3b96fb7d36c8dd7548739bff46943fc834" translate="yes" xml:space="preserve">
          <source>The app renders with a row of navigation buttons and the &lt;em&gt;Heroes&lt;/em&gt; view with its list of heroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8180573e4452faa80c9d5ca340e48884d6391a8a" translate="yes" xml:space="preserve">
          <source>The app root with the navigation links.</source>
          <target state="translated">应用根与导航链接。</target>
        </trans-unit>
        <trans-unit id="6a56d757961d70a0621db9660baa94da256fbc99" translate="yes" xml:space="preserve">
          <source>The app's code defines the data directly inside the component, which isn't best practice. In a simple demo, however, it's fine.</source>
          <target state="translated">应用程序的代码直接在组件内部定义数据,这不是最佳实践。但在一个简单的演示中,这是很好的。</target>
        </trans-unit>
        <trans-unit id="ff5f015f00e1b7bcc2b5b1966f795b0d2d4559e6" translate="yes" xml:space="preserve">
          <source>The appendix material isn't essential. Continued reading is for the curious.</source>
          <target state="translated">附录材料不是必须的。继续阅读是为了好奇。</target>
        </trans-unit>
        <trans-unit id="b9a3afbab00f003cf626b8798a7fe9cd10bab21f" translate="yes" xml:space="preserve">
          <source>The application builder uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; build tool, with default configuration options specified in the workspace configuration file (&lt;code&gt;angular.json&lt;/code&gt;) or with a named alternative configuration. A &quot;production&quot; configuration is created by default when you use the CLI to create the project, and you can use that configuration by specifying the &lt;code&gt;--configuration=&quot;production&quot;&lt;/code&gt; or the &lt;code&gt;--prod&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd362d11a1ef5a6531528132f21de5203087f19" translate="yes" xml:space="preserve">
          <source>The application builder uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; build tool, with default configuration options specified in the workspace configuration file (&lt;code&gt;angular.json&lt;/code&gt;) or with a named alternative configuration. A &quot;production&quot; configuration is created by default when you use the CLI to create the project, and you can use that configuration by specifying the &lt;code&gt;--configuration=&quot;production&quot;&lt;/code&gt; or the &lt;code&gt;--prod=&quot;true&quot;&lt;/code&gt; option.</source>
          <target state="translated">应用程序构建器使用&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;构建工具，并在工作区配置文件（ &lt;code&gt;angular.json&lt;/code&gt; ）中指定了默认配置选项，或者使用了命名的替代配置。使用CLI创建项目时，默认情况下会创建&amp;ldquo;生产&amp;rdquo;配置，并且可以通过指定 &lt;code&gt;--configuration=&quot;production&quot;&lt;/code&gt; 或 &lt;code&gt;--prod=&quot;true&quot;&lt;/code&gt; 选项来使用该配置。</target>
        </trans-unit>
        <trans-unit id="d185e637c749a1de6fd1f1bdb29eb36d9acb4054" translate="yes" xml:space="preserve">
          <source>The application continues to work just the same, and you can use &lt;code&gt;AppRoutingModule&lt;/code&gt; as the central place to maintain future routing configuration.</source>
          <target state="translated">该应用程序将继续以相同的方式工作，您可以将 &lt;code&gt;AppRoutingModule&lt;/code&gt; 用作维护未来路由配置的中心位置。</target>
        </trans-unit>
        <trans-unit id="6b0dcdc763eccf27206af346ed5971a7a9acc7e5" translate="yes" xml:space="preserve">
          <source>The application enables the Forms feature and registers the created form component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f896208078e253c6d0d2530b1eb7048144ab3290" translate="yes" xml:space="preserve">
          <source>The application fails if the user clicks that button because you haven't defined a &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; route yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a42b907321006905eeb06152c339b50f8d052cb" translate="yes" xml:space="preserve">
          <source>The application has a configured router. The shell component has a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; where it can display views produced by the router. It has &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;s that users can click to navigate via the router.</source>
          <target state="translated">该应用程序具有已配置的路由器。Shell组件具有一个 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; ，可在其中显示路由器产生的视图。它具有 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ，用户可以单击以通过路由器进行导航。</target>
        </trans-unit>
        <trans-unit id="c989c3b0f1e6e8f53d9a09edb55240976ed8f5a3" translate="yes" xml:space="preserve">
          <source>The application has three main feature areas:</source>
          <target state="translated">该应用有三大功能区。</target>
        </trans-unit>
        <trans-unit id="3065b933415b7cf762046554acdd3e29eb0e7df7" translate="yes" xml:space="preserve">
          <source>The application is currently bootstrapped using the AngularJS &lt;code&gt;ng-app&lt;/code&gt; directive attached to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element of the host page. This will no longer work in the hybrid app. Switch to the &lt;a href=&quot;upgrade#bootstrapping-hybrid-applications&quot;&gt;ngUpgrade bootstrap&lt;/a&gt; method instead.</source>
          <target state="translated">当前，该应用程序是使用附加在主机页面 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 元素上的AngularJS &lt;code&gt;ng-app&lt;/code&gt; 指令引导的。这将不再在混合应用程序中起作用。改用&lt;a href=&quot;upgrade#bootstrapping-hybrid-applications&quot;&gt;ngUpgrade引导程序&lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="56483481d00ea138c4f54373a7ad2676459f0061" translate="yes" xml:space="preserve">
          <source>The application is still bootstrapped as a hybrid app. There's no need for that anymore.</source>
          <target state="translated">应用还是作为混合应用进行引导。现在已经没有必要了。</target>
        </trans-unit>
        <trans-unit id="659c0372b9f399b6beeebc7431038c78d51f057e" translate="yes" xml:space="preserve">
          <source>The application launches by bootstrapping the root &lt;code&gt;AppModule&lt;/code&gt;, which is also referred to as an &lt;code&gt;entryComponent&lt;/code&gt;. Among other things, the bootstrapping process creates the component(s) listed in the &lt;code&gt;bootstrap&lt;/code&gt; array and inserts each one into the browser DOM.</source>
          <target state="translated">该应用程序通过引导根 &lt;code&gt;AppModule&lt;/code&gt; 来启动，该根也称为 &lt;code&gt;entryComponent&lt;/code&gt; 。除其他外，引导过程将创建 &lt;code&gt;bootstrap&lt;/code&gt; 数组中列出的组件，并将每个组件插入浏览器DOM中。</target>
        </trans-unit>
        <trans-unit id="2612b202ec4ed4dd6768f7b59b7e18c77e0da23e" translate="yes" xml:space="preserve">
          <source>The application needs a &lt;strong&gt;default route&lt;/strong&gt; to a valid page. The default page for this app is the list of heroes. The app should navigate there as if the user clicked the &quot;Heroes&quot; link or pasted &lt;code&gt;localhost:4200/heroes&lt;/code&gt; into the address bar.</source>
          <target state="translated">该应用程序需要到有效页面的&lt;strong&gt;默认路由&lt;/strong&gt;。此应用程序的默认页面是英雄列表。该应用程序应该在此处导航，就像用户单击&amp;ldquo;英雄&amp;rdquo;链接或将 &lt;code&gt;localhost:4200/heroes&lt;/code&gt; 粘贴到地址栏中一样。</target>
        </trans-unit>
        <trans-unit id="092f74418595cfa6d21b651c2f1df92beae38cb2" translate="yes" xml:space="preserve">
          <source>The application needs a default route to a valid page. The default page for this app is the list of heroes. The app should navigate there as if the user clicked the &quot;Heroes&quot; link or pasted &lt;code&gt;localhost:4200/heroes&lt;/code&gt; into the address bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d4a232475d28d6ebfb5660d2c232d4d967e1c8" translate="yes" xml:space="preserve">
          <source>The application now has a basic title. Next you will create a new component to display hero information and place that component in the application shell.</source>
          <target state="translated">现在应用程序有了一个基本的标题。接下来你将创建一个新的组件来显示英雄信息,并将该组件放在应用程序的外壳中。</target>
        </trans-unit>
        <trans-unit id="829934fd6d860a7ab62d3a61aa92f15b4a6b5b9a" translate="yes" xml:space="preserve">
          <source>The application startup process is called &lt;strong&gt;bootstrapping&lt;/strong&gt;.</source>
          <target state="translated">应用程序的启动过程称为&lt;strong&gt;自举&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2fe6858c50e849cafada85f8462c70c2503bf77f" translate="yes" xml:space="preserve">
          <source>The application still works. Clicking &quot;back&quot; returns to the hero list view.</source>
          <target state="translated">应用程序仍然可以使用。点击 &quot;返回 &quot;返回到英雄列表视图。</target>
        </trans-unit>
        <trans-unit id="046b8cfa4320e7c42d24954dca5b601917075b16" translate="yes" xml:space="preserve">
          <source>The application that StackBlitz generates for this guide comes with predefined shipping data in &lt;code&gt;assets/shipping.json&lt;/code&gt;. Use this data to add shipping prices for items in the cart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8660ff77e53d3af1d6b5d25c45bdc8f5312cc9f" translate="yes" xml:space="preserve">
          <source>The application will fail if the user clicks that button because you haven't defined a &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; route yet.</source>
          <target state="translated">如果用户单击该按钮，则应用程序将失败，因为您尚未定义 &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; 路由。</target>
        </trans-unit>
        <trans-unit id="ed54cdb1c808ba8673445f1d2779954ad42d3eed" translate="yes" xml:space="preserve">
          <source>The application-specific configuration files for the root application reside at the workspace root level. For a multi-project workspace, project-specific configuration files are in the project root, under &lt;code&gt;projects/project-name/&lt;/code&gt;.</source>
          <target state="translated">根应用程序的特定于应用程序的配置文件位于工作空间的根级别。对于多项目工作空间，特定于项目的配置文件位于项目根目录下的 &lt;code&gt;projects/project-name/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13ff0efc21d065f969a6bbdb7ff0db29bd8d03e9" translate="yes" xml:space="preserve">
          <source>The architecture of an Angular application relies on certain fundamental concepts. The basic building blocks of the Angular framework are Angular components that are organized into &lt;em&gt;NgModules&lt;/em&gt;. NgModules collect related code into functional sets; an Angular app is defined by a set of NgModules. An app always has at least a &lt;em&gt;root module&lt;/em&gt; that enables bootstrapping, and typically has many more &lt;em&gt;feature modules&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212fe89436e2176aa80e03136d002159d641788a" translate="yes" xml:space="preserve">
          <source>The associated Angular directives are prefixed with &lt;code&gt;form&lt;/code&gt;, such as &lt;code&gt;formControl&lt;/code&gt;, &lt;code&gt;formGroup&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">关联的Angular指令以 &lt;code&gt;form&lt;/code&gt; 为前缀，例如 &lt;code&gt;formControl&lt;/code&gt; ， &lt;code&gt;formGroup&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d1134f1a0eb2fdd5f3a8e0fb4e5b2e806b71dc5" translate="yes" xml:space="preserve">
          <source>The associated Angular directives are prefixed with &lt;code&gt;ng&lt;/code&gt; such as &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodelgroup&quot;&gt;ngModelGroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">关联的Angular指令以 &lt;code&gt;ng&lt;/code&gt; 为前缀，例如 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodelgroup&quot;&gt;ngModelGroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b789263e42e1ba12a8ef45ee17e36b2666f38151" translate="yes" xml:space="preserve">
          <source>The asterisk (*) prefix</source>
          <target state="translated">星号(*)前缀</target>
        </trans-unit>
        <trans-unit id="cf3cb31b10ef2ee87b7198fc18b7ebdda8470524" translate="yes" xml:space="preserve">
          <source>The asterisk (*) syntax is more clear than the desugared form. Use &lt;a href=&quot;structural-directives#ng-container&quot;&gt;&amp;lt;ng-container&amp;gt;&lt;/a&gt; when there's no single element to host the directive.</source>
          <target state="translated">星号（*）的语法比经过修饰的形式更清晰。当没有单个元素承载指令时，请使用&lt;a href=&quot;structural-directives#ng-container&quot;&gt;&amp;lt;ng-container&amp;gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="751e6d020be23e3837cb4d0404a963f68690e654" translate="yes" xml:space="preserve">
          <source>The asterisk is &quot;syntactic sugar&quot; for something a bit more complicated. Internally, Angular translates the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; into a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;em&gt;element&lt;/em&gt;, wrapped around the host element, like this.</source>
          <target state="translated">星号是&amp;ldquo;语法糖&amp;rdquo;，代表更复杂的含义。在内部，角平移 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;成 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; &lt;em&gt;元件&lt;/em&gt;，主机元件缠绕，这样的。</target>
        </trans-unit>
        <trans-unit id="3b4a29f29c11882e809acfcb05aa2c373ab6faac" translate="yes" xml:space="preserve">
          <source>The async &lt;em&gt;beforeEach&lt;/em&gt;</source>
          <target state="translated">异步&lt;em&gt;之前&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c45708a98d5362eedbae57d26a0c6334302defc" translate="yes" xml:space="preserve">
          <source>The async observable was produced by an &lt;code&gt;asyncData&lt;/code&gt; helper. The &lt;code&gt;asyncData&lt;/code&gt; helper is a utility function that you'll have to write yourself, or you can copy this one from the sample code.</source>
          <target state="translated">可观察到的异步是由 &lt;code&gt;asyncData&lt;/code&gt; 帮助器产生的。该 &lt;code&gt;asyncData&lt;/code&gt; 助手是一个效用函数，你必须要自己写，也可以从示例代码复制这一个。</target>
        </trans-unit>
        <trans-unit id="20002a8d76c8443af179a912eabfe7d2bd723ba6" translate="yes" xml:space="preserve">
          <source>The async validators registered with this group.</source>
          <target state="translated">该组注册的异步验证器。</target>
        </trans-unit>
        <trans-unit id="2fbd14477caf9ebf68f9c80df83d21e5c5c18a6c" translate="yes" xml:space="preserve">
          <source>The attribute name.</source>
          <target state="translated">属性名称。</target>
        </trans-unit>
        <trans-unit id="46f07f08fc1b4870de9353911f6a05a26df4cdc3" translate="yes" xml:space="preserve">
          <source>The author of a guide page is responsible for the code sample that supports that page. The author must also write end-to-end tests for the sample.</source>
          <target state="translated">指南页的作者要对支持该页的代码样本负责。作者还必须为样本编写端到端测试。</target>
        </trans-unit>
        <trans-unit id="c55158bff8f14a5af007abfba787b3d08fdaf5eb" translate="yes" xml:space="preserve">
          <source>The authority to change the &lt;code&gt;navigation.json&lt;/code&gt; file is limited to a few core team members. But for a new guide page, you should suggest a navigation title and position in the left-side navigation panel called the &quot;side nav&quot;.</source>
          <target state="translated">更改 &lt;code&gt;navigation.json&lt;/code&gt; 文件的权限仅限于几个核心团队成员。但是，对于新的指南页，您应该在左侧导航面板中建议一个导航标题和位置，即&amp;ldquo; side nav&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="c9cca8eb36b32cb72b65257ae685ecc71bda7db3" translate="yes" xml:space="preserve">
          <source>The balance of this guide is a set of appendices that elaborate some of the points you covered quickly above.</source>
          <target state="translated">这本指南的余额是一套附录,详细说明了你在上面快速覆盖的一些要点。</target>
        </trans-unit>
        <trans-unit id="62e80f8200c53dbaacf1f70959c15d031920c2db" translate="yes" xml:space="preserve">
          <source>The base &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration for projects in the workspace. All other configuration files inherit from this base file. For more information, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#configuration-inheritance-with-extends&quot;&gt;Configuration inheritance with extends&lt;/a&gt; section of the TypeScript documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522287acd1fcc8d0b65512fb495f5cbde0a52b11" translate="yes" xml:space="preserve">
          <source>The base URL for resolving absolute URL for HTTP requests. It must be set if &lt;code&gt;useAbsoluteUrl&lt;/code&gt; is true, and must consist of protocol, hostname, and optional port. This option has no effect if &lt;code&gt;useAbsoluteUrl&lt;/code&gt; is not enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e0d32989f227e01be5c403027f23cddf2ddede" translate="yes" xml:space="preserve">
          <source>The base URL for the URL</source>
          <target state="translated">URL的基础URL</target>
        </trans-unit>
        <trans-unit id="57099de5f5cfe3bbdb7d5e04cfb9753de8a79ecf" translate="yes" xml:space="preserve">
          <source>The base class to implement.</source>
          <target state="translated">要实现的基类。</target>
        </trans-unit>
        <trans-unit id="3535061e9163fbc474fb7bea7e4b0e4221db4845" translate="yes" xml:space="preserve">
          <source>The base file &lt;code&gt;environment.ts&lt;/code&gt;, contains the default environment settings. For example:</source>
          <target state="translated">基本文件 &lt;code&gt;environment.ts&lt;/code&gt; 包含默认环境设置。例如：</target>
        </trans-unit>
        <trans-unit id="eba0a2970a5d5416f712668687e7f717166ec56a" translate="yes" xml:space="preserve">
          <source>The base for the URL</source>
          <target state="translated">URL的基础</target>
        </trans-unit>
        <trans-unit id="f719337e6149dc965109a2c27fc6710518952795" translate="yes" xml:space="preserve">
          <source>The baseline size for comparison.</source>
          <target state="translated">用于比较的基线规模;</target>
        </trans-unit>
        <trans-unit id="acd2918d5aedfdef3ee567f11a80ee9bf8efacd9" translate="yes" xml:space="preserve">
          <source>The basic NgModule</source>
          <target state="translated">基本的NgModule</target>
        </trans-unit>
        <trans-unit id="effcca684bb65593213fc80d2f4bc7710498f947" translate="yes" xml:space="preserve">
          <source>The basic building blocks of an Angular application are &lt;em&gt;NgModules&lt;/em&gt;, which provide a compilation context for &lt;em&gt;components&lt;/em&gt;. NgModules collect related code into functional sets; an Angular app is defined by a set of NgModules. An app always has at least a &lt;em&gt;root module&lt;/em&gt; that enables bootstrapping, and typically has many more &lt;em&gt;feature modules&lt;/em&gt;.</source>
          <target state="translated">Angular应用程序的基本构建块是&lt;em&gt;NgModules&lt;/em&gt;，它为&lt;em&gt;组件&lt;/em&gt;提供编译上下文。NgModules将相关代码收集到功能集中；Angular应用由一组NgModule定义。应用程序始终至少具有启用引导的&lt;em&gt;根模块&lt;/em&gt;，并且通常具有更多&lt;em&gt;功能模块&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1cefca9c2b8409ec18d9ee7ef0e08cb1327edec9" translate="yes" xml:space="preserve">
          <source>The basic version can evolve to support a richer variety of questions, more graceful rendering, and superior user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6650d02a072a3d2f1f14aae05a80f687c7755565" translate="yes" xml:space="preserve">
          <source>The basics of &lt;a href=&quot;architecture-components#template-syntax&quot;&gt;Angular template syntax&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891e8b0d931b98e89c149cf4d8b8e9a75dec7e52" translate="yes" xml:space="preserve">
          <source>The basics of &lt;a href=&quot;template-syntax&quot;&gt;Angular template syntax&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfb49ac405d1244456d49ab443227db937f7f95" translate="yes" xml:space="preserve">
          <source>The beauty of marble testing is in the visual definition of the observable streams. This test defines a &lt;a href=&quot;testing#cold-observable&quot;&gt;&lt;em&gt;cold&lt;/em&gt; observable&lt;/a&gt; that waits three &lt;a href=&quot;testing#marble-frame&quot;&gt;frames&lt;/a&gt; (&lt;code&gt;---&lt;/code&gt;), emits a value (&lt;code&gt;x&lt;/code&gt;), and completes (&lt;code&gt;|&lt;/code&gt;). In the second argument you map the value marker (&lt;code&gt;x&lt;/code&gt;) to the emitted value (&lt;code&gt;testQuote&lt;/code&gt;).</source>
          <target state="translated">大理石测试之美在于可观察到的溪流的视觉定义。此测试定义了一个&lt;a href=&quot;testing#cold-observable&quot;&gt;&lt;em&gt;冷的&lt;/em&gt;可观察对象&lt;/a&gt;，它等待三个&lt;a href=&quot;testing#marble-frame&quot;&gt;帧&lt;/a&gt;（ &lt;code&gt;---&lt;/code&gt; ），发出一个值（ &lt;code&gt;x&lt;/code&gt; ），然后完成（ &lt;code&gt;|&lt;/code&gt; ）。在第二个参数中，将值标记（ &lt;code&gt;x&lt;/code&gt; ）映射到发出的值（ &lt;code&gt;testQuote&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="043f7bfbada1679dd54dd8a56e0f46a600dbbd8c" translate="yes" xml:space="preserve">
          <source>The beauty of marble testing is in the visual definition of the observable streams. This test defines a &lt;a href=&quot;testing-components-scenarios#cold-observable&quot;&gt;&lt;em&gt;cold&lt;/em&gt; observable&lt;/a&gt; that waits three &lt;a href=&quot;testing-components-scenarios#marble-frame&quot;&gt;frames&lt;/a&gt; (&lt;code&gt;---&lt;/code&gt;), emits a value (&lt;code&gt;x&lt;/code&gt;), and completes (&lt;code&gt;|&lt;/code&gt;). In the second argument you map the value marker (&lt;code&gt;x&lt;/code&gt;) to the emitted value (&lt;code&gt;testQuote&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2edba611517a05b39ecce086b35051547ded4fc7" translate="yes" xml:space="preserve">
          <source>The behavior is similar when you write a constructor that requires an injected class-based dependency. When you define a constructor parameter with the &lt;code&gt;HeroService&lt;/code&gt; class type, Angular knows to inject the service associated with that &lt;code&gt;HeroService&lt;/code&gt; class token:</source>
          <target state="translated">当您编写一个需要注入基于类的依赖的构造函数时，行为是相似的。当您使用 &lt;code&gt;HeroService&lt;/code&gt; 类类型定义构造函数参数时，Angular会注入与该 &lt;code&gt;HeroService&lt;/code&gt; 类标记关联的服务：</target>
        </trans-unit>
        <trans-unit id="32153d084333f937ba427f5295fec97c1fe75cf8" translate="yes" xml:space="preserve">
          <source>The binding conveys information about the event. This information can include data values such as an event object, string, or number named &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="translated">绑定传达有关事件的信息。此信息可以包括数据值，例如事件对象，字符串或名为 &lt;code&gt;$event&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d0b9ef8d2bdf9e1a86196d518bf9f9db67ec13e" translate="yes" xml:space="preserve">
          <source>The binding executes the statement within a context that includes the DOM event object, &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66feaf21874ec24c62d2c0bfdf3e80de0fdbb10" translate="yes" xml:space="preserve">
          <source>The binding matcher relies on AngularJS data binding</source>
          <target state="translated">绑定匹配器依赖于AngularJS数据绑定。</target>
        </trans-unit>
        <trans-unit id="fde66a8e4a2d1977e8552f1e09947ea468bf5e21" translate="yes" xml:space="preserve">
          <source>The bootstrap zone for the upgrade application</source>
          <target state="translated">升级应用程序的引导区</target>
        </trans-unit>
        <trans-unit id="02e0a35afc164ea455b1247684f9f9299b769401" translate="yes" xml:space="preserve">
          <source>The bootstrapped root &lt;code&gt;AppComponent&lt;/code&gt; is an &lt;em&gt;entry component&lt;/em&gt;. True, its selector matches an element tag in &lt;code&gt;index.html&lt;/code&gt;. But &lt;code&gt;index.html&lt;/code&gt; isn't a component template and the &lt;code&gt;AppComponent&lt;/code&gt; selector doesn't match an element in any component template.</source>
          <target state="translated">自举根目录 &lt;code&gt;AppComponent&lt;/code&gt; 是一个&lt;em&gt;入口组件&lt;/em&gt;。是的，它的选择器与 &lt;code&gt;index.html&lt;/code&gt; 中的一个元素标签匹配。但是 &lt;code&gt;index.html&lt;/code&gt; 不是组件模板，并且 &lt;code&gt;AppComponent&lt;/code&gt; 选择器与任何组件模板中的元素都不匹配。</target>
        </trans-unit>
        <trans-unit id="438a9cd3a363b134dfcd99e057df9d3a75cf0cef" translate="yes" xml:space="preserve">
          <source>The bootstrapped root component.</source>
          <target state="translated">引导的根组件。</target>
        </trans-unit>
        <trans-unit id="5399b75d7a78532d352ee3f6549ed287c3a81704" translate="yes" xml:space="preserve">
          <source>The brackets, &lt;code&gt;[]&lt;/code&gt;, cause Angular to evaluate the right-hand side of the assignment as a dynamic expression. Without the brackets, Angular treats the the right-hand side as a string literal and sets the property to that static value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef4ee708285425cb9ef88beb31132640eba2132" translate="yes" xml:space="preserve">
          <source>The brackets, &lt;code&gt;[]&lt;/code&gt;, tell Angular to evaluate the template expression. If you omit the brackets, Angular treats the string as a constant and &lt;em&gt;initializes the target property&lt;/em&gt; with that string:</source>
          <target state="translated">方括号 &lt;code&gt;[]&lt;/code&gt; 告诉Angular评估模板表达式。如果省略括号，Angular会将字符串视为常量，并使用该字符串&lt;em&gt;初始化target属性&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="c1feb87ec9550df145615086e8f3767f244e3a08" translate="yes" xml:space="preserve">
          <source>The browser address bar shows &lt;code&gt;.../heroes&lt;/code&gt; as if you'd navigated there directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd60d31fa4f304dfebce4165416af0762306c2cf" translate="yes" xml:space="preserve">
          <source>The browser does not download the service worker script and &lt;code&gt;ngsw.json&lt;/code&gt; manifest file.</source>
          <target state="translated">浏览器不会下载服务工作者脚本和 &lt;code&gt;ngsw.json&lt;/code&gt; 清单文件。</target>
        </trans-unit>
        <trans-unit id="4dff3dc3654746ecbf5404102b359a8b2ed8a409" translate="yes" xml:space="preserve">
          <source>The browser doesn't process the HTML and instead displays it raw, as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b0e92376d69e4ef661396d137d20849c9d556f" translate="yes" xml:space="preserve">
          <source>The browser is a familiar model of application navigation:</source>
          <target state="translated">浏览器是大家熟悉的应用导航模式。</target>
        </trans-unit>
        <trans-unit id="15d36d861b545a684a9e5ea9c902708889325b8b" translate="yes" xml:space="preserve">
          <source>The browser now renders the following, omitting the previous examples for brevity:</source>
          <target state="translated">浏览器现在显示以下内容,为简洁起见,省略了之前的例子。</target>
        </trans-unit>
        <trans-unit id="4e64586da0c751f5944b08cc25ed0266a7ab13d6" translate="yes" xml:space="preserve">
          <source>The browser refreshes and displays the app title and heroes link, but not the heroes list.</source>
          <target state="translated">浏览器刷新并显示应用标题和英雄链接,但不显示英雄列表。</target>
        </trans-unit>
        <trans-unit id="133c2ebe14781b8826924474cf293ac9fc41ab61" translate="yes" xml:space="preserve">
          <source>The browser refreshes and displays the hero's information.</source>
          <target state="translated">浏览器刷新并显示英雄的信息。</target>
        </trans-unit>
        <trans-unit id="a8489bb56b8d3c19ce6ee0631e9a122a2265bf15" translate="yes" xml:space="preserve">
          <source>The browser refreshes and displays the new application title.</source>
          <target state="translated">浏览器会刷新并显示新的应用程序标题。</target>
        </trans-unit>
        <trans-unit id="10d2bffee74f9f32b1e61f1be54989dd1c6cc5fa" translate="yes" xml:space="preserve">
          <source>The browser refreshes and now the hero's name is displayed in capital letters.</source>
          <target state="translated">浏览器刷新,现在英雄的名字以大写字母显示。</target>
        </trans-unit>
        <trans-unit id="35ae0dc5e77b04c47f765fe14b310abb1d8a872a" translate="yes" xml:space="preserve">
          <source>The browser refreshes and the app crashes with a compiler error. &lt;code&gt;HeroService&lt;/code&gt; doesn't have a &lt;code&gt;getHero()&lt;/code&gt; method. Add it now.</source>
          <target state="translated">浏览器刷新，应用崩溃并出现编译器错误。 &lt;code&gt;HeroService&lt;/code&gt; 没有 &lt;code&gt;getHero()&lt;/code&gt; 方法。立即添加。</target>
        </trans-unit>
        <trans-unit id="ddd180f39b4c9fc1fda12238a08d9a92883f1c13" translate="yes" xml:space="preserve">
          <source>The browser refreshes and the app is working again. You can click a hero in the dashboard or in the heroes list and navigate to that hero's detail view.</source>
          <target state="translated">浏览器刷新后,应用又可以使用了。你可以在仪表板或英雄列表中点击一个英雄,并导航到该英雄的详细视图。</target>
        </trans-unit>
        <trans-unit id="e88d32f27973b4cfeee563874f1886550dc5ac79" translate="yes" xml:space="preserve">
          <source>The browser refreshes and the app starts working again as it did before.</source>
          <target state="translated">浏览器刷新后,应用又开始像之前一样工作。</target>
        </trans-unit>
        <trans-unit id="ff713c5acce26c8a8f6436f37009b416e9435f49" translate="yes" xml:space="preserve">
          <source>The browser refreshes and the page displays the list of heroes. Scroll to the bottom to see the message from the &lt;code&gt;HeroService&lt;/code&gt; in the message area. Click the &quot;clear&quot; button and the message area disappears.</source>
          <target state="translated">浏览器刷新，页面显示英雄列表。滚动到底部，以在消息区域中查看来自 &lt;code&gt;HeroService&lt;/code&gt; 的消息。单击&amp;ldquo;清除&amp;rdquo;按钮，消息区域消失。</target>
        </trans-unit>
        <trans-unit id="cdb7b4eed65968a0c60496c1330166de228b5429" translate="yes" xml:space="preserve">
          <source>The browser should refresh and display the app title but not the list of heroes.</source>
          <target state="translated">浏览器应该刷新并显示应用标题,但不显示英雄列表。</target>
        </trans-unit>
        <trans-unit id="3980e997a7b117fe62ffce3f3b2a0b5e77fea676" translate="yes" xml:space="preserve">
          <source>The browser won't display an &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; within a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">浏览器不会在 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 内显示 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; &amp;gt;。</target>
        </trans-unit>
        <trans-unit id="14e80d1c5f056a696f1915bb5d74d05712d1d29b" translate="yes" xml:space="preserve">
          <source>The build process uses &lt;a href=&quot;glossary#ahead-of-time-aot-compilation&quot;&gt;ahead-of-time (AOT) compilation&lt;/a&gt; to produce a small, fast, ready-to-run app. With Ivy in Angular version 9, AOT is used by default for both development and production builds, and AOT is required to localize component templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92146b9358486bbcf5077ab8741177ac14e2a2bf" translate="yes" xml:space="preserve">
          <source>The build step is important if you haven't published your library as an npm package and then installed the package back into your app from npm. For instance, if you clone your git repository and run &lt;code&gt;npm install&lt;/code&gt;, your editor will show the &lt;code&gt;my-lib&lt;/code&gt; imports as missing if you haven't yet built your library.</source>
          <target state="translated">如果您尚未将库作为npm软件包发布，然后又将该软件包从npm安装回您的应用程序，则构建步骤很重要。例如，如果您克隆git仓库并运行 &lt;code&gt;npm install&lt;/code&gt; ，则如果尚未构建库，编辑器将显示 &lt;code&gt;my-lib&lt;/code&gt; 导入丢失。</target>
        </trans-unit>
        <trans-unit id="b332d6a59c4de48eb194eed9848b874deab58d55" translate="yes" xml:space="preserve">
          <source>The build system for apps, &lt;code&gt;@angular-devkit/build-angular&lt;/code&gt;, is based on &lt;code&gt;webpack&lt;/code&gt;, and is included in all new Angular CLI projects.</source>
          <target state="translated">应用程序的构建系统 &lt;code&gt;@angular-devkit/build-angular&lt;/code&gt; 基于 &lt;code&gt;webpack&lt;/code&gt; ，并且包含在所有新的Angular CLI项目中。</target>
        </trans-unit>
        <trans-unit id="f7834a2399202ec039da155d28f4732ed390ded5" translate="yes" xml:space="preserve">
          <source>The build system for libraries is based on &lt;code&gt;ng-packagr&lt;/code&gt;. It is only added to your dependencies when you add a library using &lt;code&gt;ng generate library my-lib&lt;/code&gt;.</source>
          <target state="translated">库的构建系统基于 &lt;code&gt;ng-packagr&lt;/code&gt; 。仅当使用 &lt;code&gt;ng generate library my-lib&lt;/code&gt; 添加库时，它才添加到依赖项中。</target>
        </trans-unit>
        <trans-unit id="e9d7c89f6355b9b74a563d2b71f0981c52287f26" translate="yes" xml:space="preserve">
          <source>The builder function is not executed until the scheduler returns a &lt;code&gt;BuilderRun&lt;/code&gt; control object. The CLI typically schedules tasks by calling the &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; function, and then resolves input options using the target definition in the &lt;code&gt;angular.json&lt;/code&gt; file.</source>
          <target state="translated">在调度程序返回 &lt;code&gt;BuilderRun&lt;/code&gt; 控件对象之前，不会执行builder函数。CLI通常通过调用 &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; 函数来计划任务，然后使用 &lt;code&gt;angular.json&lt;/code&gt; 文件中的目标定义来解析输入选项。</target>
        </trans-unit>
        <trans-unit id="60025dc689d82f5907f20636b33bf1a757ea740e" translate="yes" xml:space="preserve">
          <source>The builder handler function can be synchronous (return a value) or asynchronous (return a Promise), or it can watch and return multiple values (return an Observable). The return value or values must always be of type &lt;code&gt;BuilderOutput&lt;/code&gt;. This object contains a Boolean &lt;code&gt;success&lt;/code&gt; field and an optional &lt;code&gt;error&lt;/code&gt; field that can contain an error message.</source>
          <target state="translated">构建器处理程序函数可以是同步的（返回值）或异步的（返回Promise），或者它可以监视并返回多个值（返回Observable）。一个或多个返回值必须始终为 &lt;code&gt;BuilderOutput&lt;/code&gt; 类型。该对象包含一个布尔值 &lt;code&gt;success&lt;/code&gt; 字段和一个可选的 &lt;code&gt;error&lt;/code&gt; 字段，其中可以包含错误消息。</target>
        </trans-unit>
        <trans-unit id="fbde09f90e553f00908e4a943a5ad8a525206f7a" translate="yes" xml:space="preserve">
          <source>The builder should always emit a &lt;code&gt;BuilderOutput&lt;/code&gt; object after each execution. Once it&amp;rsquo;s been executed, it can enter a watch mode, to be triggered by an external event. If an event triggers it to restart, the builder should execute the &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; function to tell Architect that it is running again. This prevents Architect from stopping the builder if another run is scheduled.</source>
          <target state="translated">每次执行后，构建器应始终发出一个 &lt;code&gt;BuilderOutput&lt;/code&gt; 对象。一旦执行，它便可以进入监视模式，由外部事件触发。如果事件触发它重新启动，则构建器应执行 &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; 函数以告知Architect它再次运行。如果计划了另一次运行，这可以防止Architect停止构建器。</target>
        </trans-unit>
        <trans-unit id="f49f4287e9775e1849d1d16275e5c1d9b379ace2" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt; provides a way to diagnose a mysteriously failing data binding or to inspect an object for future binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3cba59a8ad93f9f11597609f818467f4d13876" translate="yes" xml:space="preserve">
          <source>The built-in AngularJS &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; filters do not exist in Angular, so you need to do the filtering and sorting yourself.</source>
          <target state="translated">内置的AngularJS &lt;code&gt;filter&lt;/code&gt; 和 &lt;code&gt;orderBy&lt;/code&gt; 过滤器在Angular中不存在，因此您需要自己进行过滤和排序。</target>
        </trans-unit>
        <trans-unit id="27c4675a67e0eef6db4eb2262eed281861d1655a" translate="yes" xml:space="preserve">
          <source>The built-in browser DOM APIs don't automatically protect you from security vulnerabilities. For example, &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;, the node available through &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;, and many third-party APIs contain unsafe methods. In the same way, if you interact with other libraries that manipulate the DOM, you likely won't have the same automatic sanitization as with Angular interpolations. Avoid directly interacting with the DOM and instead use Angular templates where possible.</source>
          <target state="translated">内置的浏览器DOM API不会自动保护您免受安全漏洞的侵害。例如， &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; ，通过 &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 可用的节点以及许多第三方API包含不安全的方法。同样，如果您与其他处理DOM的库进行交互，则可能没有与Angular插值相同的自动清除功能。避免直接与DOM交互，而尽可能使用Angular模板。</target>
        </trans-unit>
        <trans-unit id="27a7000125e6fd5e12b64464ee5108af7e83095b" translate="yes" xml:space="preserve">
          <source>The built-in browser DOM APIs don't automatically protect you from security vulnerabilities. For example, &lt;code&gt;document&lt;/code&gt;, the node available through &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;, and many third-party APIs contain unsafe methods. In the same way, if you interact with other libraries that manipulate the DOM, you likely won't have the same automatic sanitization as with Angular interpolations. Avoid directly interacting with the DOM and instead use Angular templates where possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba40c60b86170477c8de2f47167fe787c47e2c28" translate="yes" xml:space="preserve">
          <source>The built-in validators don't always match the exact use case of your application, so you sometimes need to create a custom validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39744b033a42ddea775e1f902f35f4d12364d185" translate="yes" xml:space="preserve">
          <source>The bundle is injected by default, but you can set &lt;code&gt;inject&lt;/code&gt; to false to exclude the bundle from injection. For example, the following object values create and name a bundle that contains styles and scripts, and excludes it from injection:</source>
          <target state="translated">默认情况下将 &lt;code&gt;inject&lt;/code&gt; 捆绑软件，但是您可以将inject设置为false，以将捆绑软件从注入中排除。例如，以下对象值创建并命名包含样式和脚本的包，并将其从注入中排除：</target>
        </trans-unit>
        <trans-unit id="9ff88152d1671e545c950355e4856d89b2193246" translate="yes" xml:space="preserve">
          <source>The bundling configuration must take lazy loading into consideration. Because lazy-loaded modules aren't imported in JavaScript, bundlers exclude them by default. Bundlers don't know about the router configuration and can't create separate bundles for lazy-loaded modules. You would have to create these bundles manually.</source>
          <target state="translated">捆绑配置必须考虑到懒加载。因为在JavaScript中没有导入懒加载模块,所以捆绑程序默认将其排除在外。捆绑程序不知道路由器的配置,不能为懒加载模块创建单独的捆绑。你必须手动创建这些捆绑包。</target>
        </trans-unit>
        <trans-unit id="d8708bfa23fa52e22c67b7fb716a9c92a7fff5da" translate="yes" xml:space="preserve">
          <source>The callback function</source>
          <target state="translated">回调函数</target>
        </trans-unit>
        <trans-unit id="182e95510ced064ca2569f30358a8b0ad32b1752" translate="yes" xml:space="preserve">
          <source>The callback function name.</source>
          <target state="translated">回调函数名称。</target>
        </trans-unit>
        <trans-unit id="1c1819b20078d68dd56a0742a60395369c73dff3" translate="yes" xml:space="preserve">
          <source>The callback function that is triggered for the listener when the URL changes.</source>
          <target state="translated">当URL发生变化时,触发监听器的回调函数。</target>
        </trans-unit>
        <trans-unit id="f29546adb0a293b59216f583d9f5377716b2a139" translate="yes" xml:space="preserve">
          <source>The callback function that is triggered when an error occurs.</source>
          <target state="translated">发生错误时触发的回调函数。</target>
        </trans-unit>
        <trans-unit id="7e8f5213291a0dccb35f253ed9c74c78e2074d16" translate="yes" xml:space="preserve">
          <source>The callback function to register</source>
          <target state="translated">注册的回调函数</target>
        </trans-unit>
        <trans-unit id="324517c75dfdff3257b5e48b32727d2719bed16b" translate="yes" xml:space="preserve">
          <source>The callback function.</source>
          <target state="translated">回调函数。</target>
        </trans-unit>
        <trans-unit id="44ad2e447a43167d715b851a2f95ea045f8de842" translate="yes" xml:space="preserve">
          <source>The callback in the updated component method receives a typed data object, which is easier and safer to consume:</source>
          <target state="translated">更新后的组件方法中的回调会收到一个类型化的数据对象,这样消费起来更方便、更安全。</target>
        </trans-unit>
        <trans-unit id="f7989cb817f3892197b63d55f812a8feae326844" translate="yes" xml:space="preserve">
          <source>The callback method to update the model from the view when requested</source>
          <target state="translated">当请求时,从视图中更新模型的回调方法。</target>
        </trans-unit>
        <trans-unit id="9de01ab978bcaa115dbc245728b09c7ed9d15018" translate="yes" xml:space="preserve">
          <source>The callback to invoke when Angular is stable or the timeout expires whichever comes first.</source>
          <target state="translated">当Angular稳定或超时结束时调用的回调,以先到者为准。</target>
        </trans-unit>
        <trans-unit id="f3a7dd48a909e9970fb1da807f08ca215abf3f7f" translate="yes" xml:space="preserve">
          <source>The callbacks attached to the component's &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; properties and/or the element's event properties.</source>
          <target state="translated">附加到组件的 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 属性和/或元素的事件属性的回调。</target>
        </trans-unit>
        <trans-unit id="8360f1396c197b509f36e79abbf7f8bed7725084" translate="yes" xml:space="preserve">
          <source>The change detection strategy to use in the new component.</source>
          <target state="translated">在新组件中使用的变化检测策略。</target>
        </trans-unit>
        <trans-unit id="d8068b6c20a86a548f92c8754f7e23bf2d24a0bb" translate="yes" xml:space="preserve">
          <source>The change detector for this component instance.</source>
          <target state="translated">该组件实例的变化检测器。</target>
        </trans-unit>
        <trans-unit id="b15fbfe9cced7df5ea9485a05cd1a48449704aef" translate="yes" xml:space="preserve">
          <source>The change detector ignores changes to elements of an array, so the pipe doesn't run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f5cdf216cb0945406d5e4965afcbf10659fe3b" translate="yes" xml:space="preserve">
          <source>The change handler function, which take a URL and a location history state.</source>
          <target state="translated">变更处理函数,取一个URL和一个位置历史状态。</target>
        </trans-unit>
        <trans-unit id="3343e149a2f6f98e9fba5ecd1fe5527f3ae22370" translate="yes" xml:space="preserve">
          <source>The change tracking method plays a role in the efficiency of your application.</source>
          <target state="translated">变更跟踪方法对你的应用效率起到了一定的作用。</target>
        </trans-unit>
        <trans-unit id="3093bb2a5ab46a9af4b283f32aac491c34e27270" translate="yes" xml:space="preserve">
          <source>The change-detection strategy to use for this component.</source>
          <target state="translated">该组件使用的变更检测策略。</target>
        </trans-unit>
        <trans-unit id="8d6b5bb93f2a36dfade3aee37283efde684f1ce3" translate="yes" xml:space="preserve">
          <source>The change-tracking method plays a role in the efficiency of your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0536d0b3c762f5645d9b26cad792c0eb3a67f3" translate="yes" xml:space="preserve">
          <source>The changed properties.</source>
          <target state="translated">变化后的属性。</target>
        </trans-unit>
        <trans-unit id="796e4cce084e241e06d5ee695cffadaaa1312b5b" translate="yes" xml:space="preserve">
          <source>The checked value</source>
          <target state="translated">检查值</target>
        </trans-unit>
        <trans-unit id="21eac29c346266d04fe1ecdfdafa7f73a1cb4c45" translate="yes" xml:space="preserve">
          <source>The child component class and template</source>
          <target state="translated">子组件类和模板</target>
        </trans-unit>
        <trans-unit id="98bc7cef6b7350b74e17dc76fe9675f388d460b3" translate="yes" xml:space="preserve">
          <source>The child component exposes an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; property with which it &lt;code&gt;emits&lt;/code&gt; events when something happens. The parent binds to that event property and reacts to those events.</source>
          <target state="translated">子组件公开一个 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 属性，当发生某些情况时，该属性将 &lt;code&gt;emits&lt;/code&gt; 事件。父级绑定到该事件属性并对这些事件做出反应。</target>
        </trans-unit>
        <trans-unit id="336bbbacf94a88998e2de3b06f6103b4483a4bcd" translate="yes" xml:space="preserve">
          <source>The child component uses the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; property to raise an event to notify the parent of the change. To raise an event, an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; must have the type of &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;, which is a class in &lt;code&gt;@angular/core&lt;/code&gt; that you use to emit custom events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2ff0bbaa0c25d3965be8b69d52b30ddde19e03" translate="yes" xml:space="preserve">
          <source>The child node to query.</source>
          <target state="translated">要查询的子节点。</target>
        </trans-unit>
        <trans-unit id="b838a97bc91f5bd4d3163e9eb632cf7f1cec63fa" translate="yes" xml:space="preserve">
          <source>The child node to remove.</source>
          <target state="translated">要删除的子节点。</target>
        </trans-unit>
        <trans-unit id="28113636f1f53ec2086b37193a976e332ddde875" translate="yes" xml:space="preserve">
          <source>The child route under the &lt;code&gt;AdminComponent&lt;/code&gt; has a &lt;code&gt;path&lt;/code&gt; and a &lt;code&gt;children&lt;/code&gt; property but it's not using a &lt;code&gt;component&lt;/code&gt;. This defines a &lt;em&gt;component-less&lt;/em&gt; route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8909b8dd5928a2ca32979b4c5eb8646b0c1ed1ee" translate="yes" xml:space="preserve">
          <source>The child selector is &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; with &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;deleteRequest&lt;/code&gt; being &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; properties in the child component class. The property &lt;code&gt;currentItem&lt;/code&gt; and the method &lt;code&gt;crossOffItem()&lt;/code&gt; are both in the parent component class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fee6cefa43b5b1a569bd5a82fbaedf48efdb3f" translate="yes" xml:space="preserve">
          <source>The child's &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; property is an &lt;strong&gt;&lt;em&gt;output property&lt;/em&gt;&lt;/strong&gt;, typically adorned with an &lt;a href=&quot;inputs-outputs#output&quot;&gt;@Output() decorator&lt;/a&gt; as seen in this &lt;code&gt;VoterComponent&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebaac95fe3c0183cb6f4ac86416f49de1d80ee6" translate="yes" xml:space="preserve">
          <source>The child's &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; property is an &lt;strong&gt;&lt;em&gt;output property&lt;/em&gt;&lt;/strong&gt;, typically adorned with an &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;@Output decoration&lt;/a&gt; as seen in this &lt;code&gt;VoterComponent&lt;/code&gt;:</source>
          <target state="translated">子级的 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 属性是一个&lt;strong&gt;&lt;em&gt;output属性&lt;/em&gt;&lt;/strong&gt;，通常在此 &lt;code&gt;VoterComponent&lt;/code&gt; 中看到，用&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;@Output装饰&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="45c5e393302819e4131079c6fe541b42e859ee2b" translate="yes" xml:space="preserve">
          <source>The child's template has two controls. The first is an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with a &lt;a href=&quot;template-reference-variables&quot;&gt;template reference variable&lt;/a&gt; , &lt;code&gt;#newItem&lt;/code&gt;, where the user types in an item name. The &lt;code&gt;value&lt;/code&gt; property of the &lt;code&gt;#newItem&lt;/code&gt; variable stores what the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d21e7048f090003f6988e5a99ace595822566be" translate="yes" xml:space="preserve">
          <source>The child's template has two controls. The first is an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with a &lt;a href=&quot;template-syntax#ref-var&quot;&gt;template reference variable&lt;/a&gt; , &lt;code&gt;#newItem&lt;/code&gt;, where the user types in an item name. Whatever the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; gets stored in the &lt;code&gt;#newItem&lt;/code&gt; variable.</source>
          <target state="translated">孩子的模板有两个控件。第一个是一个HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 与&lt;a href=&quot;template-syntax#ref-var&quot;&gt;模板参考变量&lt;/a&gt;， &lt;code&gt;#newItem&lt;/code&gt; ，其中用户键入的项目名称。用户键入 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 的任何内容都存储在 &lt;code&gt;#newItem&lt;/code&gt; 变量中。</target>
        </trans-unit>
        <trans-unit id="9815f861c67f39ad3a340bdc46586f227e38f0d3" translate="yes" xml:space="preserve">
          <source>The children of this route in the router state tree</source>
          <target state="translated">该路由在路由器状态树中的子路。</target>
        </trans-unit>
        <trans-unit id="88f283ebf90d73f7691965239f91c83b97c637c7" translate="yes" xml:space="preserve">
          <source>The children of this route in the router state tree.</source>
          <target state="translated">该路由在路由器状态树中的子节点。</target>
        </trans-unit>
        <trans-unit id="cd478977dac1aaeeb2106c8d25bd353cbf9a9248" translate="yes" xml:space="preserve">
          <source>The choice between inline and separate HTML is a matter of taste, circumstances, and organization policy. Here the app uses inline HTML because the template is small and the demo is simpler without the additional HTML file.</source>
          <target state="translated">内嵌式HTML和单独的HTML之间的选择是一个品味、环境和组织政策的问题。这里应用使用内嵌式HTML,是因为模板小,而且没有额外的HTML文件,演示更简单。</target>
        </trans-unit>
        <trans-unit id="a4f2b79a3029d546fba201c93d23eabb4aa329ff" translate="yes" xml:space="preserve">
          <source>The class additionally declares three members: The array of phones, the name of the current sort key, and the search query. These are all things you have already been attaching to the controller but that weren't explicitly declared anywhere. The last one of these isn't actually used in the TypeScript code since it's only referred to in the template, but for the sake of clarity you should define all of the controller members.</source>
          <target state="translated">该类另外声明了三个成员。手机数组,当前排序键的名称,和搜索查询.这些都是你已经附加到控制器上的东西,但是没有在任何地方明确声明。其中最后一个实际上并没有在TypeScript代码中使用,因为它只在模板中被引用,但是为了清晰起见,你应该定义所有的控制器成员。</target>
        </trans-unit>
        <trans-unit id="386c4da46833767828efb663588fa86f0b351c05" translate="yes" xml:space="preserve">
          <source>The class name.</source>
          <target state="translated">类名。</target>
        </trans-unit>
        <trans-unit id="cfb8e2fa1ec41a7877ca2cf24377f2bbac37fc6a" translate="yes" xml:space="preserve">
          <source>The class we have created provides a service. The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator marks it as a service that can be injected, but Angular can't actually inject it anywhere until you configure an Angular &lt;a href=&quot;glossary#injector&quot;&gt;dependency injector&lt;/a&gt; with a &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt; of that service.</source>
          <target state="translated">我们创建的类提供了服务。该 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰标记为可注射服务，但直到你配置一个角角不能真正注入它的任何地方&lt;a href=&quot;glossary#injector&quot;&gt;依赖注入&lt;/a&gt;与&lt;a href=&quot;glossary#provider&quot;&gt;提供&lt;/a&gt;该服务。</target>
        </trans-unit>
        <trans-unit id="9bb76e82307d0c0d07213e61c7341ddb5167bded" translate="yes" xml:space="preserve">
          <source>The class-provider syntax is a shorthand expression that expands into a provider configuration, defined by the &lt;a href=&quot;../api/core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt; interface&lt;/a&gt;. The following code snippets shows how a class that is given as the &lt;code&gt;providers&lt;/code&gt; value is expanded into a full provider object.</source>
          <target state="translated">class-provider语法是一种简写表达式，可扩展为&lt;a href=&quot;../api/core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; 接口&lt;/a&gt;定义的提供程序配置。以下代码段显示了如何将 &lt;code&gt;providers&lt;/code&gt; 值给出的类扩展为完整的提供者对象。</target>
        </trans-unit>
        <trans-unit id="e4378e45dd65db5c919f1a83b79501f5e742c2cc" translate="yes" xml:space="preserve">
          <source>The code behind it customizes how and where the DI framework provides dependencies. The use cases illustrate different ways to use the &lt;a href=&quot;dependency-injection-providers#provide&quot;&gt;&lt;em&gt;provide&lt;/em&gt; object literal&lt;/a&gt; to associate a definition object with a DI token.</source>
          <target state="translated">其背后的代码可定制DI框架提供依赖关系的方式和位置。用例说明了使用&lt;a href=&quot;dependency-injection-providers#provide&quot;&gt;&lt;em&gt;提供&lt;/em&gt;对象文字&lt;/a&gt;将定义对象与DI令牌相关联的不同方法。</target>
        </trans-unit>
        <trans-unit id="970ee2781eada9efc03e7fd17ce53917ceee0e8f" translate="yes" xml:space="preserve">
          <source>The code binds to the &lt;code&gt;input&lt;/code&gt; event of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, which allows the code to listen for changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96fcb6e3857904aa9aa4b964b93a302cc574eb0" translate="yes" xml:space="preserve">
          <source>The code coverage percentages let you estimate how much of your code is tested. If your team decides on a set minimum amount to be unit tested, you can enforce this minimum with the Angular CLI.</source>
          <target state="translated">代码覆盖率可以让你估计你的代码有多少被测试。如果你的团队决定了一个设定的最小单元测试量,你可以通过Angular CLI强制执行这个最小量。</target>
        </trans-unit>
        <trans-unit id="f5dce1db38cdc532ad3d7c72afd2efd8358fd816" translate="yes" xml:space="preserve">
          <source>The code for this color change might look like this.</source>
          <target state="translated">这种颜色变化的代码可能是这样的。</target>
        </trans-unit>
        <trans-unit id="cbeac1c9a0c35dbccb31f978400fc2fe2a5e2a4a" translate="yes" xml:space="preserve">
          <source>The code imports the Angular core library and the &lt;code&gt;Hero&lt;/code&gt; model you just created.</source>
          <target state="translated">该代码将导入Angular核心库和您刚创建的 &lt;code&gt;Hero&lt;/code&gt; 模型。</target>
        </trans-unit>
        <trans-unit id="68f0a3da097460a4e1aa89208185bd3703ba9e66" translate="yes" xml:space="preserve">
          <source>The code must &lt;em&gt;detach&lt;/em&gt; the listener when the directive is destroyed to avoid memory leaks.</source>
          <target state="translated">销毁指令后，代码必须&lt;em&gt;分离&lt;/em&gt;侦听器，以避免内存泄漏。</target>
        </trans-unit>
        <trans-unit id="46c6a7d6568026289889fe5df8dce62319144252" translate="yes" xml:space="preserve">
          <source>The code of the error to check</source>
          <target state="translated">要检查的错误代码</target>
        </trans-unit>
        <trans-unit id="6f27e3b52d7266eb93e97fdd4a94b9f45b555f31" translate="yes" xml:space="preserve">
          <source>The code of the locale whose currency code we want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c0011222fc6b4866ac8487498f45dd83f02549" translate="yes" xml:space="preserve">
          <source>The code sample below shows how to use this feature.</source>
          <target state="translated">下面的代码示例展示了如何使用这个功能。</target>
        </trans-unit>
        <trans-unit id="52a764918c407ee86da193bb47e766db1ee7d4cb" translate="yes" xml:space="preserve">
          <source>The code sets &lt;code&gt;packages$&lt;/code&gt; to this re-composed &lt;code&gt;Observable&lt;/code&gt; of search results. The template subscribes to &lt;code&gt;packages$&lt;/code&gt; with the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt; and displays search results as they arrive.</source>
          <target state="translated">代码将 &lt;code&gt;packages$&lt;/code&gt; 设置为此重新组合的 &lt;code&gt;Observable&lt;/code&gt; 搜索结果。模板使用&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;订阅 &lt;code&gt;packages$&lt;/code&gt; 并在搜索结果到达时显示它们。</target>
        </trans-unit>
        <trans-unit id="f6ed28c9f178e87589fbe392d21c577aea987e8f" translate="yes" xml:space="preserve">
          <source>The code snippet for this animation might look like this.</source>
          <target state="translated">这个动画的代码片段可能是这样的。</target>
        </trans-unit>
        <trans-unit id="688745f4df04e9e5819d70cbf741b8a833c173c4" translate="yes" xml:space="preserve">
          <source>The code with offsets specified would be as follows.</source>
          <target state="translated">指定偏移量的代码如下:</target>
        </trans-unit>
        <trans-unit id="aa6d3cc42e5d49bc58e9f59a5de8ba857d85cdb3" translate="yes" xml:space="preserve">
          <source>The code you write in development using TypeScript is compiled and bundled into ES2015, the JavaScript syntax that is compatible with most browsers. All modern browsers support ES2015 and beyond, but in most cases, you still have to account for users accessing your application from a browser that doesn't. When targeting older browsers, &lt;a href=&quot;browser-support#polyfills&quot;&gt;polyfills&lt;/a&gt; can bridge the gap by providing functionality that doesn't exist in the older versions of JavaScript supported by those browsers.</source>
          <target state="translated">您使用TypeScript在开发中编写的代码已编译并捆绑到ES2015中，ES2015是与大多数浏览器兼容的JavaScript语法。所有现代浏览器都支持ES2015及更高版本，但在大多数情况下，您仍然必须考虑使用不支持ES2015的浏览器访问应用程序的用户。当定位较旧的浏览器时，&lt;a href=&quot;browser-support#polyfills&quot;&gt;polyfills&lt;/a&gt;可以通过提供那些浏览器所支持的较旧版本的JavaScript中不存在的功能来弥合差距。</target>
        </trans-unit>
        <trans-unit id="b7e52622776d7c1959881d2e660fa7a5fa2ffc44" translate="yes" xml:space="preserve">
          <source>The code you write isn't immediately executable. For example, components have templates that contain custom elements, attribute directives, Angular binding declarations, and some peculiar syntax that clearly isn't native HTML.</source>
          <target state="translated">你写的代码并不能立即执行。例如,组件有模板,其中包含自定义元素、属性指令、Angular绑定声明,以及一些奇特的语法,这些语法显然不是原生HTML。</target>
        </trans-unit>
        <trans-unit id="c98252757016faf472023968bc36999991222bc9" translate="yes" xml:space="preserve">
          <source>The collector accepts any function or static method that contains a single &lt;code&gt;return&lt;/code&gt; statement. The compiler, however, only supports macros in the form of functions or static methods that return an &lt;em&gt;expression&lt;/em&gt;.</source>
          <target state="translated">收集器接受包含单个 &lt;code&gt;return&lt;/code&gt; 语句的任何函数或静态方法。但是，编译器仅支持返回&lt;em&gt;表达式&lt;/em&gt;的函数或静态方法形式的宏。</target>
        </trans-unit>
        <trans-unit id="775ba5d48c201b80c8c8ae9cd1d70622bb775dd4" translate="yes" xml:space="preserve">
          <source>The collector can evaluate references to module-local &lt;code&gt;const&lt;/code&gt; declarations and initialized &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; declarations, effectively removing them from the &lt;code&gt;.metadata.json&lt;/code&gt; file.</source>
          <target state="translated">收集器可以评估对模块本地 &lt;code&gt;const&lt;/code&gt; 声明和已初始化 &lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;let&lt;/code&gt; 声明的引用，从而有效地将其从 &lt;code&gt;.metadata.json&lt;/code&gt; 文件中删除。</target>
        </trans-unit>
        <trans-unit id="0f9ef0ca017a80f8e54b27d25998685f9c051e40" translate="yes" xml:space="preserve">
          <source>The collector can represent a function call or object creation with &lt;code&gt;new&lt;/code&gt; as long as the syntax is valid. The compiler, however, can later refuse to generate a call to a &lt;em&gt;particular&lt;/em&gt; function or creation of a &lt;em&gt;particular&lt;/em&gt; object.</source>
          <target state="translated">只要语法有效，收集器就可以用 &lt;code&gt;new&lt;/code&gt; 表示函数调用或对象创建。但是，编译器以后可以拒绝生成对&lt;em&gt;特定&lt;/em&gt;函数的调用或对&lt;em&gt;特定&lt;/em&gt;对象的创建。</target>
        </trans-unit>
        <trans-unit id="04cdce6617c90dd9e3023f3aef0d2359e60d969d" translate="yes" xml:space="preserve">
          <source>The collector makes no attempt to understand the metadata that it collects and outputs to &lt;code&gt;.metadata.json&lt;/code&gt;. It represents the metadata as best it can and records errors when it detects a metadata syntax violation. It's the compiler's job to interpret the &lt;code&gt;.metadata.json&lt;/code&gt; in the code generation phase.</source>
          <target state="translated">收集器不会尝试理解它收集并输出到 &lt;code&gt;.metadata.json&lt;/code&gt; 的元数据。它尽可能地表示元数据，并在检测到元数据语法冲突时记录错误。在代码生成阶段解释 &lt;code&gt;.metadata.json&lt;/code&gt; 是编译器的工作。</target>
        </trans-unit>
        <trans-unit id="c94e729ff8a27c730c157a9c5bcc96f4b75e729a" translate="yes" xml:space="preserve">
          <source>The collector reduces this expression to its equivalent &lt;em&gt;folded&lt;/em&gt; string:</source>
          <target state="translated">收集器将此表达式简化为等效的&lt;em&gt;折叠&lt;/em&gt;字符串：</target>
        </trans-unit>
        <trans-unit id="2cb307c5d9a821cbeb1291555d897d427eb70d97" translate="yes" xml:space="preserve">
          <source>The colon (:) in the &lt;code&gt;path&lt;/code&gt; indicates that &lt;code&gt;:id&lt;/code&gt; is a placeholder for a specific hero &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 的冒号（:) 表示 &lt;code&gt;:id&lt;/code&gt; 是特定英雄 &lt;code&gt;id&lt;/code&gt; 的占位符。</target>
        </trans-unit>
        <trans-unit id="822a3863f5cea533bb631122ed79d3a3234d1e18" translate="yes" xml:space="preserve">
          <source>The command also adds the &lt;code&gt;HeroDetailComponent&lt;/code&gt; as a declaration in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator of the &lt;code&gt;src/app/app.module.ts&lt;/code&gt; file.</source>
          <target state="translated">该命令还将 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 作为声明添加到 &lt;code&gt;src/app/app.module.ts&lt;/code&gt; 文件的 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器中。</target>
        </trans-unit>
        <trans-unit id="ecfcfd92ddc1e6e65d554b28efd2166d3482d5a8" translate="yes" xml:space="preserve">
          <source>The command can be used to build a project of type &quot;application&quot; or &quot;library&quot;. When used to build a library, a different builder is invoked, and only the &lt;code&gt;ts-config&lt;/code&gt;, &lt;code&gt;configuration&lt;/code&gt;, and &lt;code&gt;watch&lt;/code&gt; options are applied. All other options apply only to building applications.</source>
          <target state="translated">该命令可用于构建&amp;ldquo;应用程序&amp;rdquo;或&amp;ldquo;库&amp;rdquo;类型的项目。当用于构建库时，将调用其他构建器，并且仅应用 &lt;code&gt;ts-config&lt;/code&gt; ， &lt;code&gt;configuration&lt;/code&gt; 和 &lt;code&gt;watch&lt;/code&gt; 选项。所有其他选项仅适用于构建应用程序。</target>
        </trans-unit>
        <trans-unit id="512e225eda6cc1639eea07b5d955a25e07759d5d" translate="yes" xml:space="preserve">
          <source>The command can read and write files in three translation formats:</source>
          <target state="translated">该命令可以读取和写入三种翻译格式的文件。</target>
        </trans-unit>
        <trans-unit id="bf84844b9e75c71ac51168fed3b964af90b550ed" translate="yes" xml:space="preserve">
          <source>The command configures your app to use service workers by adding the service-worker package and generating the necessary support files.</source>
          <target state="translated">该命令通过添加service-worker包并生成必要的支持文件来配置您的应用程序以使用服务工作者。</target>
        </trans-unit>
        <trans-unit id="60cbb6bb9baee1657c5aabadd3c30a172960868d" translate="yes" xml:space="preserve">
          <source>The command creates the following &lt;code&gt;HeroService&lt;/code&gt; skeleton.</source>
          <target state="translated">该命令将创建以下 &lt;code&gt;HeroService&lt;/code&gt; 框架。</target>
        </trans-unit>
        <trans-unit id="fb7672e8c965167d0a611c29c3e95da6a052157c" translate="yes" xml:space="preserve">
          <source>The command creates the following folder structure.</source>
          <target state="translated">该命令将创建以下文件夹结构。</target>
        </trans-unit>
        <trans-unit id="23f6fb999f367965df4e9072feb6668a104067e3" translate="yes" xml:space="preserve">
          <source>The command generates a skeleton &lt;code&gt;HeroService&lt;/code&gt; class in &lt;code&gt;src/app/hero.service.ts&lt;/code&gt; as follows:</source>
          <target state="translated">该命令在 &lt;code&gt;src/app/hero.service.ts&lt;/code&gt; 中生成骨架 &lt;code&gt;HeroService&lt;/code&gt; 类，如下所示：</target>
        </trans-unit>
        <trans-unit id="f84057f8a139bc98948e34aa76f1de7682fe3a1c" translate="yes" xml:space="preserve">
          <source>The command generates the new named schematic inside your collection, with a main &lt;code&gt;index.ts&lt;/code&gt; file and its associated test spec. It also adds the name, description, and factory function for the new schematic to the collection's schema in the &lt;code&gt;collection.json&lt;/code&gt; file.</source>
          <target state="translated">该命令在您的集合内生成一个带有主 &lt;code&gt;index.ts&lt;/code&gt; 文件及其相关测试规范的新命名原理图。它还会将新原理图的名称，描述和工厂功能添加到 &lt;code&gt;collection.json&lt;/code&gt; 文件中的集合模式中。</target>
        </trans-unit>
        <trans-unit id="032b5d312dec4716aade5ccf6d268d0aee388017" translate="yes" xml:space="preserve">
          <source>The command is interactive. In this case, you must have or create a Firebase account, and authenticate using that account. The command prompts you to select a Firebase project for deployment</source>
          <target state="translated">该命令是交互式的。在这种情况下,你必须拥有或创建一个Firebase账户,并使用该账户进行验证。该命令提示你选择一个Firebase项目进行部署。</target>
        </trans-unit>
        <trans-unit id="e0238e94e6ed6d69aeb9b7186b5420a4c6cccd58" translate="yes" xml:space="preserve">
          <source>The command passes the builder the set of default options specified in the &quot;options&quot; section. If you pass the &lt;code&gt;--configuration=production&lt;/code&gt; flag, it uses the override values specified in the &lt;code&gt;production&lt;/code&gt; alternative configuration. You can specify further option overrides individually on the command line. You might also add more alternative configurations to the &lt;code&gt;build&lt;/code&gt; target, to define other environments such as &lt;code&gt;stage&lt;/code&gt; or &lt;code&gt;qa&lt;/code&gt;.</source>
          <target state="translated">该命令向构建器传递&amp;ldquo;选项&amp;rdquo;部分中指定的默认选项集。如果传递 &lt;code&gt;--configuration=production&lt;/code&gt; 标志，它将使用 &lt;code&gt;production&lt;/code&gt; 替代配置中指定的替代值。您可以在命令行上分别指定其他选项替代。您可能还会向 &lt;code&gt;build&lt;/code&gt; 目标添加更多替代配置，以定义其他环境，例如 &lt;code&gt;stage&lt;/code&gt; 或 &lt;code&gt;qa&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb2912a10269d45a749dd2c9c3467ad9cb8c57d9" translate="yes" xml:space="preserve">
          <source>The command performs the following actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05643aa6337d26acd02d68221885268cc4cdae7" translate="yes" xml:space="preserve">
          <source>The command replaces the original messages with translated text, and generates a new version of the app in the target language.</source>
          <target state="translated">该命令将原始信息替换为翻译文本,并生成目标语言的新版应用程序。</target>
        </trans-unit>
        <trans-unit id="26f3e6fe9701a42c19f4d2b3080bd162ab88cf06" translate="yes" xml:space="preserve">
          <source>The command scaffolds the following:</source>
          <target state="translated">该命令可用于以下方面:</target>
        </trans-unit>
        <trans-unit id="afe6b95bc4862f31c695e35a376168015bb8944a" translate="yes" xml:space="preserve">
          <source>The command takes an optional project name, as specified in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file. When a project name is not supplied, executes the &lt;code&gt;deploy&lt;/code&gt; builder for the default project.</source>
          <target state="translated">该命令采用可选的项目名称，如 &lt;code&gt;angular.json&lt;/code&gt; 工作区配置文件的 &lt;code&gt;projects&lt;/code&gt; 部分中所指定。如果未提供项目名称，请为默认项目执行 &lt;code&gt;deploy&lt;/code&gt; 器。</target>
        </trans-unit>
        <trans-unit id="e2367757f500b2b5e14443d0ffa2b6ea5d19b891" translate="yes" xml:space="preserve">
          <source>The command-line output includes extra logging from Bazel. We plan to reduce this in the future.</source>
          <target state="translated">命令行输出包括来自Bazel的额外日志。我们计划在未来减少这种情况。</target>
        </trans-unit>
        <trans-unit id="deebac4a0e4d9463353e1ba094d4311ba5bced82" translate="yes" xml:space="preserve">
          <source>The comment text.</source>
          <target state="translated">评注案文:</target>
        </trans-unit>
        <trans-unit id="f727b50279d21957a5ea426f3f6ef5d1c870a679" translate="yes" xml:space="preserve">
          <source>The common commands in Bazel are:</source>
          <target state="translated">Bazel中常用的命令有:</target>
        </trans-unit>
        <trans-unit id="4dce573efdc896e6762e4abce3c4ef846a95893d" translate="yes" xml:space="preserve">
          <source>The commonly-needed services, pipes, and directives provided by the Angular team. The &lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;&lt;code&gt;HttpClientModule&lt;/code&gt;&lt;/a&gt; is also here, in the &lt;a href=&quot;../api/common/http&quot;&gt;&lt;code&gt;@angular/common/http&lt;/code&gt;&lt;/a&gt; subfolder. For more information, see the &lt;a href=&quot;http&quot;&gt;HttpClient guide&lt;/a&gt;.</source>
          <target state="translated">Angular团队提供的常用服务，管道和指令。该&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt; &lt;code&gt;HttpClientModule&lt;/code&gt; &lt;/a&gt;也在这里，在&lt;a href=&quot;../api/common/http&quot;&gt; &lt;code&gt;@angular/common/http&lt;/code&gt; &lt;/a&gt;子文件夹。有关更多信息，请参见&lt;a href=&quot;http&quot;&gt;HttpClient指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="91fd0e342d19fa9a326ec600aa54532eda1d7b70" translate="yes" xml:space="preserve">
          <source>The companion component class provides heroes, adds heroes into the array, and can reset the array.</source>
          <target state="translated">伴侣组件类提供英雄,将英雄添加到阵列中,并可以重置阵列。</target>
        </trans-unit>
        <trans-unit id="68d35ebfa15210ab8b65604e0da1d1214dd4d36d" translate="yes" xml:space="preserve">
          <source>The compilation and rendering pipeline used by Angular before version 9. Compare &lt;a href=&quot;glossary#ivy&quot;&gt;Ivy&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7467e3bed5cce9e9e9439293f13cf8bbe37b57" translate="yes" xml:space="preserve">
          <source>The compilation process is the same whether the translation file is in &lt;code&gt;.xlf&lt;/code&gt; format or in another format that Angular understands, such as &lt;code&gt;.xtb&lt;/code&gt;.</source>
          <target state="translated">无论翻译文件是 &lt;code&gt;.xlf&lt;/code&gt; 格式还是Angular可以理解的其他格式（例如 &lt;code&gt;.xtb&lt;/code&gt; )，编译过程都是相同的。</target>
        </trans-unit>
        <trans-unit id="20e023920577f4366d6e8bec0ad15d5c1dfa3ffb" translate="yes" xml:space="preserve">
          <source>The compiler also has some major limitations in this mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbe0c27d00d7023e6067129fe8bbf4a24d10a6a" translate="yes" xml:space="preserve">
          <source>The compiler can only create instances of certain classes, supports only core decorators, and only supports calls to macros (functions or static methods) that return expressions.</source>
          <target state="translated">编译器只能创建某些类的实例,只支持核心装饰符,只支持调用返回表达式的宏(函数或静态方法)。</target>
        </trans-unit>
        <trans-unit id="bee270b045da60269f4d9d82490b3eec3eb7fedb" translate="yes" xml:space="preserve">
          <source>The compiler can only reference &lt;em&gt;exported symbols&lt;/em&gt;.</source>
          <target state="translated">编译器只能引用&lt;em&gt;导出的符号&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f3502a185963958198b9a85072d430d31a7108b0" translate="yes" xml:space="preserve">
          <source>The compiler can only resolve references to &lt;strong&gt;&lt;em&gt;exported&lt;/em&gt;&lt;/strong&gt; symbols. The collector, however, can evaluate an expression during collection and record the result in the &lt;code&gt;.metadata.json&lt;/code&gt;, rather than the original expression. This allows you to make limited use of non-exported symbols within expressions.</source>
          <target state="translated">编译器只能解析对&lt;strong&gt;&lt;em&gt;导出&lt;/em&gt;&lt;/strong&gt;符号的引用。但是，收集器可以在收集期间评估表达式并将结果记录在 &lt;code&gt;.metadata.json&lt;/code&gt; 中，而不是原始表达式中。这使您可以有限地使用表达式中未导出的符号。</target>
        </trans-unit>
        <trans-unit id="3de2fe859e8aea7858d788054cb92a56c24aa22f" translate="yes" xml:space="preserve">
          <source>The compiler can understand simple enum values but not complex values such as those derived from computed properties.</source>
          <target state="translated">编译器可以理解简单的枚举值,但不能理解复杂的值,比如那些从计算属性衍生出来的值。</target>
        </trans-unit>
        <trans-unit id="19f4a053ad2943ecc2598d242fc7f107dd7fdda1" translate="yes" xml:space="preserve">
          <source>The compiler cannot wait until runtime to get the template information. It must statically derive the value of the &lt;code&gt;someTemplate&lt;/code&gt; variable from the source code so that it can generate the component factory, which includes instructions for building the element based on the template.</source>
          <target state="translated">编译器无法等到运行时获取模板信息。它必须从源代码中静态派生 &lt;code&gt;someTemplate&lt;/code&gt; 变量的值，以便它可以生成组件工厂，该工厂包括基于模板构建元素的指令。</target>
        </trans-unit>
        <trans-unit id="d06c32faa1f9142e1197fcd5ba01c4a27e47837e" translate="yes" xml:space="preserve">
          <source>The compiler could not refer to the &lt;code&gt;template&lt;/code&gt; constant because it isn't exported. The collector, however, can fold the &lt;code&gt;template&lt;/code&gt; constant into the metadata definition by in-lining its contents. The effect is the same as if you had written:</source>
          <target state="translated">编译器无法引用 &lt;code&gt;template&lt;/code&gt; 常量，因为它没有导出。但是，收集器可以通过内联其内容将 &lt;code&gt;template&lt;/code&gt; 常量折叠到元数据定义中。效果与您写的一样：</target>
        </trans-unit>
        <trans-unit id="bd1ef8c2b73d68e5b22c9b1138d099eae1677b0f" translate="yes" xml:space="preserve">
          <source>The compiler does not currently support &lt;a href=&quot;aot-compiler#function-expression&quot;&gt;function expressions or lambda functions&lt;/a&gt;. For example, you cannot set a provider's &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; to an anonymous function or arrow function like this.</source>
          <target state="translated">编译器当前不支持&lt;a href=&quot;aot-compiler#function-expression&quot;&gt;函数表达式或lambda函数&lt;/a&gt;。例如，您不能将提供程序的 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 设置为这样的匿名函数或箭头函数。</target>
        </trans-unit>
        <trans-unit id="8d63679f07b8e39bfb7c96d9e6a44e1bdd0523a8" translate="yes" xml:space="preserve">
          <source>The compiler does not currently support &lt;a href=&quot;aot-compiler#function-expression&quot;&gt;function expressions or lambda functions&lt;/a&gt;. For example, you cannot set a provider's &lt;code&gt;useFactory&lt;/code&gt; to an anonymous function or arrow function like this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420d66550ed93c835ed583c6e68981a83a4d586b" translate="yes" xml:space="preserve">
          <source>The compiler does not support references to variables assigned by &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring&quot;&gt;destructuring&lt;/a&gt;.</source>
          <target state="translated">编译器不支持对通过&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/variable-declarations.html#destructuring&quot;&gt;destructuring&lt;/a&gt;分配的变量的引用。</target>
        </trans-unit>
        <trans-unit id="4e2d31b8c52b289dfbc88a3b991740e86003b12c" translate="yes" xml:space="preserve">
          <source>The compiler does not verify that the value of &lt;code&gt;user.address.city&lt;/code&gt; is assignable to the city input of the &lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858c40dd3910dea8d82725091f2c0604dc6827af" translate="yes" xml:space="preserve">
          <source>The compiler does the rewriting during the emit of the &lt;code&gt;.js&lt;/code&gt; file. It does not, however, rewrite the &lt;code&gt;.d.ts&lt;/code&gt; file, so TypeScript doesn't recognize it as being an export. and it does not interfere with the ES module's exported API.</source>
          <target state="translated">在 &lt;code&gt;.js&lt;/code&gt; 文件发出期间，编译器进行重写。但是，它不会重写 &lt;code&gt;.d.ts&lt;/code&gt; 文件，因此TypeScript无法将其识别为导出文件。并且不会干扰ES模块的导出API。</target>
        </trans-unit>
        <trans-unit id="157b36dfa249eaae0f0223d7b4e275b5742dd33b" translate="yes" xml:space="preserve">
          <source>The compiler encountered a JavaScript ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;tagged template expression&lt;/a&gt; such as the following.</source>
          <target state="translated">编译器遇到了JavaScript ES2015 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals&quot;&gt;标记的模板表达式&lt;/a&gt;，如下所示。</target>
        </trans-unit>
        <trans-unit id="1f7ded75927c1788a32dd4918360a2ddcd0a071f" translate="yes" xml:space="preserve">
          <source>The compiler encountered a referenced to a locally defined symbol that either wasn't exported or wasn't initialized.</source>
          <target state="translated">编译器遇到了对本地定义的符号的引用,该符号要么没有导出,要么没有初始化。</target>
        </trans-unit>
        <trans-unit id="98ec5135addca132edc67362962593357c1995fe" translate="yes" xml:space="preserve">
          <source>The compiler erases &lt;em&gt;type position&lt;/em&gt; references after conversion from TypeScript, so they have no impact on tree-shaking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1bd41286b7b47d0a30a94f678cfe97b2c0aa55" translate="yes" xml:space="preserve">
          <source>The compiler finds a pipe if the pipe's &lt;em&gt;name&lt;/em&gt; appears within the pipe syntax of the template HTML.</source>
          <target state="translated">如果管道&lt;em&gt;名称&lt;/em&gt;出现在模板HTML的管道语法内，则编译器会找到一个管道。</target>
        </trans-unit>
        <trans-unit id="85ca245c9abcc7994f5066093444c00be9929c1e" translate="yes" xml:space="preserve">
          <source>The compiler found a reference to an exported variable or static field that wasn't initialized. It needs the value of that variable to generate code.</source>
          <target state="translated">编译器发现对一个未初始化的导出变量或静态字段的引用。它需要该变量的值来生成代码。</target>
        </trans-unit>
        <trans-unit id="8ae63bcc430b2dd230e7e26c813c3c02cb2734f3" translate="yes" xml:space="preserve">
          <source>The compiler generates the component factory, which includes the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; provider code, in a separate module. &lt;em&gt;That&lt;/em&gt; factory module can't reach back to &lt;em&gt;this&lt;/em&gt; source module to access the local (non-exported) &lt;code&gt;foo&lt;/code&gt; variable.</source>
          <target state="translated">编译器在单独的模块中生成组件工厂，其中包括 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 提供程序代码。&lt;em&gt;该&lt;/em&gt;工厂模块无法返回&lt;em&gt;该&lt;/em&gt;源模块以访问本地（未导出） &lt;code&gt;foo&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="92ce2206bc50448555d44e682fc1007463818f9c" translate="yes" xml:space="preserve">
          <source>The compiler generates the component factory, which includes the &lt;code&gt;useValue&lt;/code&gt; provider code, in a separate module. &lt;em&gt;That&lt;/em&gt; factory module can't reach back to &lt;em&gt;this&lt;/em&gt; source module to access the local (non-exported) &lt;code&gt;foo&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0712bff79b6ba8bd1174d1e3baa5133a297e4d4c" translate="yes" xml:space="preserve">
          <source>The compiler handles token references in these positions differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2d272b65afaacb9c96d83311fa7679569cb638" translate="yes" xml:space="preserve">
          <source>The compiler must retain &lt;em&gt;value position&lt;/em&gt; references at runtime, which prevents the component from being tree-shaken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ada9db2a3fbbffaa6e62a942bdef132fbfb3595" translate="yes" xml:space="preserve">
          <source>The compiler needs the value of the &lt;code&gt;template&lt;/code&gt; property &lt;em&gt;right now&lt;/em&gt; to generate the component factory. The variable reference alone is insufficient. Prefixing the declaration with &lt;code&gt;export&lt;/code&gt; merely produces a new error, &quot;&lt;a href=&quot;aot-metadata-errors#only-initialized-variables&quot;&gt;&lt;code&gt;Only initialized variables and constants can be referenced&lt;/code&gt;&lt;/a&gt;&quot;.</source>
          <target state="translated">编译器需要的值 &lt;code&gt;template&lt;/code&gt; 属性&lt;em&gt;现在&lt;/em&gt;生成组件工厂。单单变量参考是不够的。用 &lt;code&gt;export&lt;/code&gt; 前缀声明只会产生一个新错误，&amp;ldquo; &lt;a href=&quot;aot-metadata-errors#only-initialized-variables&quot;&gt; &lt;code&gt;Only initialized variables and constants can be referenced&lt;/code&gt; &lt;/a&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="126c486c473104383ae1229ed43b46dfdfc50d01" translate="yes" xml:space="preserve">
          <source>The compiler only allows metadata that create instances of the class &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">编译器仅允许元数据从 &lt;code&gt;@angular/core&lt;/code&gt; 创建类 &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="c9f89138d6d0f2fb62cfc6fb9e28cc12abb7395f" translate="yes" xml:space="preserve">
          <source>The compiler only supports metadata for the &lt;a href=&quot;../api/core#decorators&quot;&gt;Angular decorators in the &lt;code&gt;@angular/core&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">编译器仅&lt;a href=&quot;../api/core#decorators&quot;&gt;在 &lt;code&gt;@angular/core&lt;/code&gt; 模块中&lt;/a&gt;支持Angular装饰器的元数据。</target>
        </trans-unit>
        <trans-unit id="dc097f6a4e195c52e2bb0c422611001de27e4295" translate="yes" xml:space="preserve">
          <source>The compiler starts with the entry components, then it generates code for the declared components it &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;finds&lt;/a&gt; in an entry component's template, then for the declared components it discovers in the templates of previously compiled components, and so on. At the end of the process, the compiler has generated code for every entry component and every component reachable from an entry component.</source>
          <target state="translated">编译器从入口组件开始，然后为在入口组件的模板中&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;找到&lt;/a&gt;的声明的组件生成代码，然后为在先前编译的组件的模板中发现的声明的组件生成代码，依此类推。在该过程结束时，编译器已为每个入口组件以及从入口组件可到达的每个组件生成了代码。</target>
        </trans-unit>
        <trans-unit id="30de544841894f2a949ed7ed373dd95bbee68599" translate="yes" xml:space="preserve">
          <source>The compiler treats object literals containing the fields &lt;code&gt;useClass&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; specially, converting the expression initializing one of these fields into an exported variable that replaces the expression. This process of rewriting these expressions removes all the restrictions on what can be in them because the compiler doesn't need to know the expression's value&amp;mdash;it just needs to be able to generate a reference to the value.</source>
          <target state="translated">编译器将特别处理包含字段 &lt;code&gt;useClass&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;data&lt;/code&gt; 的对象文字，将将这些字段之一初始化的表达式转换为替换表达式的导出变量。重写这些表达式的过程消除了对表达式的所有限制，因为编译器不需要知道表达式的值-它只需要能够生成对该值的引用即可。</target>
        </trans-unit>
        <trans-unit id="465dc08186ad9c2bbff559d79ad3f0253ec651d2" translate="yes" xml:space="preserve">
          <source>The compiler treats object literals containing the fields &lt;code&gt;useClass&lt;/code&gt;, &lt;code&gt;useValue&lt;/code&gt;, &lt;code&gt;useFactory&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; specially, converting the expression initializing one of these fields into an exported variable that replaces the expression. This process of rewriting these expressions removes all the restrictions on what can be in them because the compiler doesn't need to know the expression's value&amp;mdash;it just needs to be able to generate a reference to the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db26295d71e3539c97b99511069043f20a6fd3aa" translate="yes" xml:space="preserve">
          <source>The compiler treats this usage as if you had written:</source>
          <target state="translated">编译器会把这种用法当作是你写的。</target>
        </trans-unit>
        <trans-unit id="24b187f48898ccf4dbc0fdd64dfa738c3e7bfd6e" translate="yes" xml:space="preserve">
          <source>The compiler understands all syntax forms that the collector supports, but it may reject &lt;em&gt;syntactically&lt;/em&gt; correct metadata if the &lt;em&gt;semantics&lt;/em&gt; violate compiler rules.</source>
          <target state="translated">编译器理解收集器支持的所有语法形式，但是如果&lt;em&gt;语义&lt;/em&gt;违反编译器规则，则它可能会拒绝&lt;em&gt;语法&lt;/em&gt;正确的元数据。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5929dc62de7601c08bcabe703705f0dbec26534b" translate="yes" xml:space="preserve">
          <source>The compiler will &lt;a href=&quot;aot-compiler#code-folding&quot;&gt;fold&lt;/a&gt; the expression into the provider as if you had written this.</source>
          <target state="translated">就像您编写此代码一样，编译器会将表达式&lt;a href=&quot;aot-compiler#code-folding&quot;&gt;折叠&lt;/a&gt;到提供程序中。</target>
        </trans-unit>
        <trans-unit id="138f31c0677c88cc7b7a7fd6bf76154f84ce3954" translate="yes" xml:space="preserve">
          <source>The compiler will recognize the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; element and the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; attribute because you declared a corresponding &lt;code&gt;AppComponent&lt;/code&gt; and &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration.</source>
          <target state="translated">编译器将识别 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 元素和 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 属性，因为您在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 配置中声明了相应的 &lt;code&gt;AppComponent&lt;/code&gt; 和 &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="715bb9b8568dd05e7eb02ef4fd3d2ba93fd18630" translate="yes" xml:space="preserve">
          <source>The completed directive code looks like this:</source>
          <target state="translated">完成的指令代码是这样的。</target>
        </trans-unit>
        <trans-unit id="5053850abd39601781be8b25dae3426c32eb731b" translate="yes" xml:space="preserve">
          <source>The component DOM tests described in this guide often require extensive setup and advanced techniques whereas the &lt;a href=&quot;testing#component-class-testing&quot;&gt;unit tests&lt;/a&gt; are comparatively simple.</source>
          <target state="translated">本指南中描述的组件DOM测试通常需要广泛的设置和先进的技术，而&lt;a href=&quot;testing#component-class-testing&quot;&gt;单元测试&lt;/a&gt;则相对简单。</target>
        </trans-unit>
        <trans-unit id="945dcf8f41bb23dc85788ad4c63aa881eb1cb6bf" translate="yes" xml:space="preserve">
          <source>The component defines a &lt;code&gt;deleteRequest&lt;/code&gt; property that returns an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;. When the user clicks &lt;em&gt;delete&lt;/em&gt;, the component invokes the &lt;code&gt;delete()&lt;/code&gt; method, telling the &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; to emit an &lt;code&gt;Item&lt;/code&gt; object.</source>
          <target state="translated">该组件定义一个 &lt;code&gt;deleteRequest&lt;/code&gt; 属性，该属性返回 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 。当用户单击&lt;em&gt;delete时&lt;/em&gt;，组件将调用 &lt;code&gt;delete()&lt;/code&gt; 方法，告诉 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 发出 &lt;code&gt;Item&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="5fed15d886f224a42d47fdb41a31f93da40106cc" translate="yes" xml:space="preserve">
          <source>The component defines a &lt;code&gt;deleteRequest&lt;/code&gt; property that returns an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;. When the user clicks &lt;strong&gt;Delete&lt;/strong&gt;, the component invokes the &lt;code&gt;delete()&lt;/code&gt; method, telling the &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; to emit an &lt;code&gt;Item&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb8273c79d0db2bd78752acb04c3573261ff2c7" translate="yes" xml:space="preserve">
          <source>The component defines an accessibility-enabled element with both the standard HTML attribute &lt;code&gt;role&lt;/code&gt;, and ARIA attributes. The ARIA attribute &lt;code&gt;aria-valuenow&lt;/code&gt; is bound to the user's input.</source>
          <target state="translated">该组件使用标准HTML属性 &lt;code&gt;role&lt;/code&gt; 和ARIA属性定义启用可访问性的元素。ARIA属性 &lt;code&gt;aria-valuenow&lt;/code&gt; 绑定到用户的输入。</target>
        </trans-unit>
        <trans-unit id="4f9ce139efb795e90ce6b8f3abad0b17a35b4fb0" translate="yes" xml:space="preserve">
          <source>The component definition also exports the class, &lt;code&gt;ProductAlertsComponent&lt;/code&gt;, which handles functionality for the component.</source>
          <target state="translated">组件定义还导出了 &lt;code&gt;ProductAlertsComponent&lt;/code&gt; 类，该类处理组件的功能。</target>
        </trans-unit>
        <trans-unit id="fa73e1af978181527b58e22c002fc64877e2e6db" translate="yes" xml:space="preserve">
          <source>The component directive example from above looks like this when expressed using the component API:</source>
          <target state="translated">上面的组件指令示例在使用组件API表达时是这样的。</target>
        </trans-unit>
        <trans-unit id="7bc7b389fbcb64544804120818c464acab440078" translate="yes" xml:space="preserve">
          <source>The component file contains three transitions.</source>
          <target state="translated">组件文件包含三个转场。</target>
        </trans-unit>
        <trans-unit id="05a22aee3a73845cd036df1c66514d97e0d66817" translate="yes" xml:space="preserve">
          <source>The component is instantiated by being listed in Angular template. This means that the host element is controlled by Angular, but the component's view will be controlled by AngularJS.</source>
          <target state="translated">组件是通过被列在Angular模板中来实例化的。这意味着主机元素由Angular控制,但组件的视图将由AngularJS控制。</target>
        </trans-unit>
        <trans-unit id="634e741b6ed10e05a132403dcdaef42865cb78fc" translate="yes" xml:space="preserve">
          <source>The component is instantiated by being listed in AngularJS template. This means that the host element is controlled by AngularJS, but the component's view will be controlled by Angular.</source>
          <target state="translated">组件是通过被列在AngularJS模板中来实例化的。这意味着主机元素由AngularJS控制,但组件的视图将由Angular控制。</target>
        </trans-unit>
        <trans-unit id="87bfe9e9cc407bbc45693a944d489ceb1150ea14" translate="yes" xml:space="preserve">
          <source>The component isn't expecting a result from the delete operation, so it subscribes without a callback. Even though you are not using the result, you still have to subscribe. Calling the &lt;code&gt;subscribe()&lt;/code&gt; method &lt;em&gt;executes&lt;/em&gt; the observable, which is what initiates the DELETE request.</source>
          <target state="translated">该组件不希望删除操作产生任何结果，因此其订阅没有回调。即使您没有使用结果，您仍然必须订阅。调用 &lt;code&gt;subscribe()&lt;/code&gt; 方法将&lt;em&gt;执行&lt;/em&gt; observable，这是发起DELETE请求的原因。</target>
        </trans-unit>
        <trans-unit id="4b73c6bddfe52c8459168da819770d17a2a129c6" translate="yes" xml:space="preserve">
          <source>The component of the route</source>
          <target state="translated">途径的组成部分</target>
        </trans-unit>
        <trans-unit id="4aa79cea92ca5f94c22df8eaa184e84e014458cf" translate="yes" xml:space="preserve">
          <source>The component of the route, a constant.</source>
          <target state="translated">航线的分量,是一个常数。</target>
        </trans-unit>
        <trans-unit id="1f39c6523ba2e6e387e161f0f9a129bc4867c79e" translate="yes" xml:space="preserve">
          <source>The component quickly becomes cluttered with data access minutia. The component becomes harder to understand, harder to test, and the data access logic can't be re-used or standardized.</source>
          <target state="translated">组件很快就被数据访问的琐事弄得杂乱无章。该组件变得更难理解,更难测试,数据访问逻辑也无法重复使用或标准化。</target>
        </trans-unit>
        <trans-unit id="7f56d078cb463ae3dcc2533c399d9111710a9122" translate="yes" xml:space="preserve">
          <source>The component renders as the following:</source>
          <target state="translated">该组件渲染如下。</target>
        </trans-unit>
        <trans-unit id="d642e45463b12cd87110e913308fd35c74b02d00" translate="yes" xml:space="preserve">
          <source>The component should only display the selected hero details if the &lt;code&gt;selectedHero&lt;/code&gt; exists.</source>
          <target state="translated">如果 &lt;code&gt;selectedHero&lt;/code&gt; 存在，则组件仅应显示所选英雄的详细信息。</target>
        </trans-unit>
        <trans-unit id="bd71cc1bc88a121f31376dc02838f1a5e74183b1" translate="yes" xml:space="preserve">
          <source>The component template interpolates the content as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7dbc7c28ecb5af85fcbc4145f18fa9e1be06908" translate="yes" xml:space="preserve">
          <source>The component test file generated by the CLI calls &lt;code&gt;compileComponents()&lt;/code&gt; even though it is never required when running &lt;code&gt;ng test&lt;/code&gt;.</source>
          <target state="translated">CLI生成的组件测试文件调用 &lt;code&gt;compileComponents()&lt;/code&gt; ,即使运行 &lt;code&gt;ng test&lt;/code&gt; 时从不需要它。</target>
        </trans-unit>
        <trans-unit id="8a0311eba241fe09acc7a2c71109494bced8b04d" translate="yes" xml:space="preserve">
          <source>The component to instantiate when the path matches. Can be empty if child routes specify components.</source>
          <target state="translated">路径匹配时要实例化的组件。如果子路径指定了组件,则可以为空。</target>
        </trans-unit>
        <trans-unit id="7c07c7ab7dee70787d92839f5740c175aea5adee" translate="yes" xml:space="preserve">
          <source>The component to transform.</source>
          <target state="translated">要转换的组件。</target>
        </trans-unit>
        <trans-unit id="c03142546a7a9067dc7bd0f3bdc5f667718c42e5" translate="yes" xml:space="preserve">
          <source>The component tree can be very deep and, most of the time, the nested components play no role in testing the component at the top of the tree.</source>
          <target state="translated">组件树可以很深,大多数时候,嵌套的组件对树顶的组件起不到任何测试作用。</target>
        </trans-unit>
        <trans-unit id="8e15674fa536b1448524d88911c6fd3a5af7c894" translate="yes" xml:space="preserve">
          <source>The component type.</source>
          <target state="translated">组件类型:</target>
        </trans-unit>
        <trans-unit id="a025e9eb678c1adf18cef368c04d88f1706b83ff" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;birthday&lt;/code&gt; value flows through the &lt;a href=&quot;template-expression-operators#pipe&quot;&gt;pipe operator&lt;/a&gt; ( | ) to the &lt;a href=&quot;../api/common/datepipe&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0e4aec9a04b168fe5b9cfc031aad8b684a6788" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;ngOnInit&lt;/code&gt; lifecycle hook calls the &lt;code&gt;HeroService&lt;/code&gt; method, not the constructor.</source>
          <target state="translated">组件的 &lt;code&gt;ngOnInit&lt;/code&gt; 生命周期钩子调用 &lt;code&gt;HeroService&lt;/code&gt; 方法，而不是构造函数。</target>
        </trans-unit>
        <trans-unit id="a393e0445991d1a36a41d0c3b83117e4d646235e" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;selected&lt;/code&gt; property returns an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;, which looks like an RxJS synchronous &lt;code&gt;Observable&lt;/code&gt; to consumers. The test subscribes to it &lt;em&gt;explicitly&lt;/em&gt; just as the host component does &lt;em&gt;implicitly&lt;/em&gt;.</source>
          <target state="translated">组件的 &lt;code&gt;selected&lt;/code&gt; 属性返回一个 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; ，它对消费者来说是一个RxJS同步 &lt;code&gt;Observable&lt;/code&gt; 。该测试&lt;em&gt;显式地&lt;/em&gt;订阅它，就像主机组件&lt;em&gt;隐式&lt;/em&gt;&lt;em&gt;地&lt;/em&gt;进行订阅一样。</target>
        </trans-unit>
        <trans-unit id="b1e101d4a9e06ccb23308352dafb1f38a636d4e4" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;selector&lt;/code&gt; value of &quot;app-hero-form&quot; means you can drop this form in a parent template using the &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1962b26c443a8f93187c9613e919572df2a309b4" translate="yes" xml:space="preserve">
          <source>The component's &lt;code&gt;showConfigResponse()&lt;/code&gt; method displays the response headers as well as the configuration:</source>
          <target state="translated">组件的 &lt;code&gt;showConfigResponse()&lt;/code&gt; 方法显示响应标头以及配置：</target>
        </trans-unit>
        <trans-unit id="8bb55779cfa560056a11685cf4309c305487f8a0" translate="yes" xml:space="preserve">
          <source>The component's HTML selector.</source>
          <target state="translated">组件的HTML选择器。</target>
        </trans-unit>
        <trans-unit id="45c242f97cfe38564c598a3971646c8412339c77" translate="yes" xml:space="preserve">
          <source>The conditional displays the data only if &lt;code&gt;userStream&lt;/code&gt; returns a value, so you don't need to use the &lt;a href=&quot;../../guide/template-expression-operators#safe-navigation-operator&quot;&gt;safe-navigation-operator&lt;/a&gt; (&lt;code&gt;?.&lt;/code&gt;) to guard against null values when accessing properties. You can display an alternative template while waiting for the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906d8cdaee971e09d03956839d141439a00f4e7f" translate="yes" xml:space="preserve">
          <source>The conditional displays the data only if &lt;code&gt;userStream&lt;/code&gt; returns a value, so you don't need to use the &lt;a href=&quot;../../guide/template-syntax#safe-navigation-operator&quot;&gt;safe-navigation-operator&lt;/a&gt; (&lt;code&gt;?.&lt;/code&gt;) to guard against null values when accessing properties. You can display an alternative template while waiting for the data.</source>
          <target state="translated">仅当 &lt;code&gt;userStream&lt;/code&gt; 返回值时，条件语句才显示数据，因此在访问属性时，无需使用&lt;a href=&quot;../../guide/template-syntax#safe-navigation-operator&quot;&gt;safe-navigation-operator&lt;/a&gt;（ &lt;code&gt;?.&lt;/code&gt; ）来防止空值。您可以在等待数据时显示备用模板。</target>
        </trans-unit>
        <trans-unit id="d86de5c94963265bd4f854ea02275e5968f8001b" translate="yes" xml:space="preserve">
          <source>The configurable options for a default or targeted build generally correspond to the options available for the &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;cli/serve&quot;&gt;&lt;code&gt;ng serve&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;cli/test&quot;&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/a&gt; commands. For details of those options and their possible values, see the &lt;a href=&quot;cli&quot;&gt;CLI Reference&lt;/a&gt;.</source>
          <target state="translated">默认或目标版本的可配置选项通常对应于&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;cli/serve&quot;&gt; &lt;code&gt;ng serve&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;cli/test&quot;&gt; &lt;code&gt;ng test&lt;/code&gt; &lt;/a&gt;命令可用的选项。有关这些选项及其可能值的详细信息，请参见《&lt;a href=&quot;cli&quot;&gt;CLI参考》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8683e9a1dac5420bfeea384e8f30a82f93d62bfe" translate="yes" xml:space="preserve">
          <source>The configuration file uses the JSON format. All file paths must begin with &lt;code&gt;/&lt;/code&gt;, which corresponds to the deployment directory&amp;mdash;usually &lt;code&gt;dist/&amp;lt;project-name&amp;gt;&lt;/code&gt; in CLI projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e87f989f48f3ba9948b17f612ebb52c1eb9ad7" translate="yes" xml:space="preserve">
          <source>The configuration file uses the JSON format. All file paths must begin with &lt;code&gt;/&lt;/code&gt;, which is the deployment directory&amp;mdash;usually &lt;code&gt;dist&lt;/code&gt; in CLI projects.</source>
          <target state="translated">配置文件使用JSON格式。所有文件路径必须以 &lt;code&gt;/&lt;/code&gt; 开头，这是部署目录- 在CLI项目中通常为 &lt;code&gt;dist&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b69952674dd4b63a3a568c2873291a95fb4f9db" translate="yes" xml:space="preserve">
          <source>The configuration key to set or query, in JSON path format. For example: &quot;a[3].foo.bar[2]&quot;. If no new value is provided, returns the current value of this key.</source>
          <target state="translated">要设置或查询的配置键,采用JSON路径格式。例如:&quot;a[3].foo.bar[2]&quot;。&quot;a[3].foo.bar[2]&quot;。如果没有提供新的值,返回该键的当前值。</target>
        </trans-unit>
        <trans-unit id="eb6fc904e89e428b0083d3c15ea355abb65dfe2a" translate="yes" xml:space="preserve">
          <source>The configuration options generally correspond to the command options. You can override individual configuration defaults by specifying the corresponding options on the command line. The command can accept option names given in either dash-case or camelCase. Note that in the configuration file, you must specify names in camelCase.</source>
          <target state="translated">配置选项一般与命令选项相对应。您可以通过在命令行上指定相应的选项来覆盖各个配置默认值。该命令可以接受以破折号或驼色大写给出的选项名。请注意,在配置文件中,你必须用驼色大写来指定名称。</target>
        </trans-unit>
        <trans-unit id="7b16623cd8cb243d6de3e15d7611a5847bcf2f77" translate="yes" xml:space="preserve">
          <source>The configuration to apply service worker to.</source>
          <target state="translated">要应用服务工作者的配置。</target>
        </trans-unit>
        <trans-unit id="c64e682f36d33924e7b55e376fb7962258b0cea6" translate="yes" xml:space="preserve">
          <source>The configuration used to match this route *</source>
          <target state="translated">用于匹配该途径的配置 *</target>
        </trans-unit>
        <trans-unit id="63af88f97d299ed29fc90f13430520c0ca49701b" translate="yes" xml:space="preserve">
          <source>The configuration used to match this route.</source>
          <target state="translated">用于匹配此途径的配置。</target>
        </trans-unit>
        <trans-unit id="68528e3bdae3eede6b9bd6f97339c8df83d69334" translate="yes" xml:space="preserve">
          <source>The configuration's injector is the initial injector set on the class, and used by default for each created instance.This behavior can be overridden with the static property to affect all newly created instances, or as a constructor argument for one-off creations.</source>
          <target state="translated">配置的注入器是在类上设置的初始注入器,并默认用于每个创建的实例.这种行为可以通过静态属性重写来影响所有新创建的实例,或者作为一次性创建的构造参数。</target>
        </trans-unit>
        <trans-unit id="834a1e227c0c50a09a054c8e9e6ce66a5e71337b" translate="yes" xml:space="preserve">
          <source>The configurations key is optional, we'll leave it out for now.</source>
          <target state="translated">配置键是可有可无的,我们暂且不说。</target>
        </trans-unit>
        <trans-unit id="a6f51a44f469c2e24865a1040b3de3b6516154cf" translate="yes" xml:space="preserve">
          <source>The console output looks a bit like this:</source>
          <target state="translated">控制台的输出看起来有点像这样。</target>
        </trans-unit>
        <trans-unit id="72c105d38074b2df6181fbe4b841b458d3e091b7" translate="yes" xml:space="preserve">
          <source>The constructed paragraph renders strangely.</source>
          <target state="translated">构造的段落演绎得很奇怪。</target>
        </trans-unit>
        <trans-unit id="c7fdd6a63e113f58fb8d465907d502d5baf57f6c" translate="yes" xml:space="preserve">
          <source>The constructor asks for an injected instance of &lt;code&gt;Logger&lt;/code&gt; and stores it in a private field called &lt;code&gt;logger&lt;/code&gt;. The &lt;code&gt;getHeroes()&lt;/code&gt; method logs a message when asked to fetch heroes.</source>
          <target state="translated">构造函数要求注入 &lt;code&gt;Logger&lt;/code&gt; 的实例，并将其存储在称为 &lt;code&gt;logger&lt;/code&gt; 的私有字段中。当要求获取英雄时， &lt;code&gt;getHeroes()&lt;/code&gt; 方法记录一条消息。</target>
        </trans-unit>
        <trans-unit id="36406f88f194439134400738d911a712dacb18ae" translate="yes" xml:space="preserve">
          <source>The constructor expects Angular to inject the &lt;code&gt;HeroService&lt;/code&gt; into a private &lt;code&gt;heroService&lt;/code&gt; property.</source>
          <target state="translated">构造函数希望Angular将 &lt;code&gt;HeroService&lt;/code&gt; 注入私有的 &lt;code&gt;heroService&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="02e6daf629ba2d69937d75255228c5dcdccc4d38" translate="yes" xml:space="preserve">
          <source>The constructor injects the &lt;code&gt;HeroesService&lt;/code&gt;, which defines the following interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eab4a9cd938314dc3fba0ac964a8f9a79e0b72b" translate="yes" xml:space="preserve">
          <source>The constructor isn't an Angular hook &lt;em&gt;per se&lt;/em&gt;. The log confirms that input properties (the &lt;code&gt;name&lt;/code&gt; property in this case) have no assigned values at construction.</source>
          <target state="translated">构造函数是不是一个角钩&lt;em&gt;本身&lt;/em&gt;。日志确认输入属性（在这种情况下为 &lt;code&gt;name&lt;/code&gt; 属性）在构造时没有分配的值。</target>
        </trans-unit>
        <trans-unit id="a26127b5ec5fe19c64995c70e6ae4945b4c33a2f" translate="yes" xml:space="preserve">
          <source>The constructor tells Angular to inject the &lt;code&gt;GreetingModule&lt;/code&gt; into itself. The injection would be circular if Angular looked for &lt;code&gt;GreetingModule&lt;/code&gt; in the &lt;em&gt;current&lt;/em&gt; injector, but the &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; decorator means &quot;look for &lt;code&gt;GreetingModule&lt;/code&gt; in an ancestor injector, above me in the injector hierarchy.&quot;</source>
          <target state="translated">构造函数告诉Angular将 &lt;code&gt;GreetingModule&lt;/code&gt; 注入自身。如果Angular 在&lt;em&gt;当前&lt;/em&gt;注入器中查找 &lt;code&gt;GreetingModule&lt;/code&gt; ，则注入将是圆形的，但是 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;（）装饰器的意思是&amp;ldquo; 在注入器层次结构中位于我上方的祖先注入器中寻找 &lt;code&gt;GreetingModule&lt;/code&gt; &amp;rdquo;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2a0a07f08ada0f60a409bcf703aee3b141535d37" translate="yes" xml:space="preserve">
          <source>The content to replace with.</source>
          <target state="translated">替换成的内容。</target>
        </trans-unit>
        <trans-unit id="434978912cc545b69caa64dbe5cbc7693818a867" translate="yes" xml:space="preserve">
          <source>The contents of &lt;code&gt;node_modules/some-package/images/&lt;/code&gt; will be available in &lt;code&gt;dist/some-package/&lt;/code&gt;.</source>
          <target state="translated">的内容 &lt;code&gt;node_modules/some-package/images/&lt;/code&gt; 将在可用的 &lt;code&gt;dist/some-package/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de9762d967849535b472516dad70dc2a5e2d798a" translate="yes" xml:space="preserve">
          <source>The context for terms in an expression is a blend of the &lt;em&gt;template variables&lt;/em&gt;, the directive's &lt;em&gt;context&lt;/em&gt; object (if it has one), and the component's &lt;em&gt;members&lt;/em&gt;. If you reference a name that belongs to more than one of these namespaces, the template variable name takes precedence, followed by a name in the directive's &lt;em&gt;context&lt;/em&gt;, and, lastly, the component's member names.</source>
          <target state="translated">表达式中术语的上下文是&lt;em&gt;模板变量&lt;/em&gt;，指令的&lt;em&gt;上下文&lt;/em&gt;对象（如果有）和组件的&lt;em&gt;成员的混合&lt;/em&gt;。如果引用的名称属于多个名称空间中的一个以上，则模板变量名称优先，后跟指令&lt;em&gt;上下文中&lt;/em&gt;的名称，最后是组件的成员名称。</target>
        </trans-unit>
        <trans-unit id="516e999a9dfd7f3d5bfbc11b52a151eecf3c24d1" translate="yes" xml:space="preserve">
          <source>The context for this view, inherited from the anchor element.</source>
          <target state="translated">这个视图的上下文,继承自锚元素。</target>
        </trans-unit>
        <trans-unit id="3c82f52221a89639198df33fedec6d9813e4dcee" translate="yes" xml:space="preserve">
          <source>The context in which to listen for events. Can be the entire window or document, the body of the document, or a specific DOM element.</source>
          <target state="translated">侦听事件的上下文。可以是整个窗口或文档,文档的主体,或一个特定的DOM元素。</target>
        </trans-unit>
        <trans-unit id="f8c9c8d1c4b92136befec8a41da007e51cffd2d0" translate="yes" xml:space="preserve">
          <source>The context object passed into a rule provides access to utility functions and metadata that the schematic may need to work with, including a logging API to help with debugging. The context also defines a &lt;em&gt;merge strategy&lt;/em&gt; that determines how changes are merged from the staged tree into the base tree. A change can be accepted or ignored, or throw an exception.</source>
          <target state="translated">传递到规则中的上下文对象提供对原理图可能需要使用的实用程序功能和元数据的访问，其中包括有助于调试的日志记录API。上下文还定义了&lt;em&gt;合并策略&lt;/em&gt;，该&lt;em&gt;策略&lt;/em&gt;确定如何将更改从暂存树合并到基础树中。更改可以被接受或忽略，或者引发异常。</target>
        </trans-unit>
        <trans-unit id="ac7cbb9fe3e4587d9144d9bbb440b6a49b7cc42b" translate="yes" xml:space="preserve">
          <source>The context of a template statement can be the component class instance or the template. Because of this, template statements cannot refer to anything in the global namespace such as &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;document&lt;/code&gt;. For example, template statements can't call &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;Math.max()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f2c493dfbb04d85e053c932b8ad74fee0d374f" translate="yes" xml:space="preserve">
          <source>The context property for &lt;code&gt;let-hero&lt;/code&gt; wasn't specified. Its intended source is implicit. Angular sets &lt;code&gt;let-hero&lt;/code&gt; to the value of the context's &lt;code&gt;$implicit&lt;/code&gt; property, which &lt;code&gt;NgFor&lt;/code&gt; has initialized with the hero for the current iteration.</source>
          <target state="translated">未指定 &lt;code&gt;let-hero&lt;/code&gt; 的context属性。它的预期来源是隐式的。Angular将 &lt;code&gt;let-hero&lt;/code&gt; 设置为上下文的 &lt;code&gt;$implicit&lt;/code&gt; 属性的值， &lt;code&gt;NgFor&lt;/code&gt; 已使用当前初始化的hero对其进行了初始化。</target>
        </trans-unit>
        <trans-unit id="c7a76e231011258158f2254b2b16d3db05a38e38" translate="yes" xml:space="preserve">
          <source>The control directive from which to get the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">从中获取 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 的控制指令。</target>
        </trans-unit>
        <trans-unit id="2bbb61d0c4df311e8b07462ca259b3c982a86148" translate="yes" xml:space="preserve">
          <source>The control directive to add to the form.</source>
          <target state="translated">要添加到表格中的控制指令。</target>
        </trans-unit>
        <trans-unit id="8cf41ea4b3493c2c856c54199afc949817c4eac6" translate="yes" xml:space="preserve">
          <source>The control has been visited.</source>
          <target state="translated">已经访问过该控制区。</target>
        </trans-unit>
        <trans-unit id="8285061d6a84be25121b021c12ee6bd37827dfdd" translate="yes" xml:space="preserve">
          <source>The control name to add to the collection</source>
          <target state="translated">要添加到集合中的控件名称</target>
        </trans-unit>
        <trans-unit id="5410d4b9567d41805c92f96af4682275c27445e2" translate="yes" xml:space="preserve">
          <source>The control name to check for existence in the collection</source>
          <target state="translated">要检查集合中是否存在的控件名称。</target>
        </trans-unit>
        <trans-unit id="27a6dcc8aa638e92c26671752f447bfd819f1fd0" translate="yes" xml:space="preserve">
          <source>The control name to register in the collection</source>
          <target state="translated">要在集合中注册的控件名称</target>
        </trans-unit>
        <trans-unit id="ecc2af5b43a3852f887c5005940458e40013ceda" translate="yes" xml:space="preserve">
          <source>The control name to remove from the collection</source>
          <target state="translated">要从集合中删除的控件名称</target>
        </trans-unit>
        <trans-unit id="ecdbba447a430bfa7169d3caa0fdd744eda0f7c5" translate="yes" xml:space="preserve">
          <source>The control name to replace in the collection</source>
          <target state="translated">要在集合中替换的控件名称</target>
        </trans-unit>
        <trans-unit id="9760257811426aae616bf4d1494569b4a3c52759" translate="yes" xml:space="preserve">
          <source>The control to validate against.</source>
          <target state="translated">要验证的控件。</target>
        </trans-unit>
        <trans-unit id="5b425478a2596d27714c9aeca87c94e3908535ff" translate="yes" xml:space="preserve">
          <source>The control value accessor also calls the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel#viewToModelUpdate&quot;&gt;NgModel.viewToModelUpdate()&lt;/a&gt;&lt;/code&gt; method which emits an &lt;code&gt;ngModelChange&lt;/code&gt; event.</source>
          <target state="translated">控制值访问器还调用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel#viewToModelUpdate&quot;&gt;NgModel.viewToModelUpdate()&lt;/a&gt;&lt;/code&gt; 方法，该方法发出 &lt;code&gt;ngModelChange&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="bd98c4bcc74109310318a5dad8988a21d99457b6" translate="yes" xml:space="preserve">
          <source>The control value accessor attached to the input triggers the &lt;code&gt;setValue()&lt;/code&gt; method on the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">附加到输入的控件值访问器将触发 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例上的 &lt;code&gt;setValue()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="f1cc67d8c922fc67a0beca6d8cfcfeb12e494a15" translate="yes" xml:space="preserve">
          <source>The control value accessor listening for events on the form input element immediately relays the new value to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">在表单输入元素上侦听事件的控制值访问器立即将新值中继到 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="6d0f6693ae5ef3a6a4bffa9b91611a36bc4a2862" translate="yes" xml:space="preserve">
          <source>The control value accessor on the form input element updates the element with the new value.</source>
          <target state="translated">表单输入元素上的控制值访问器用新的值更新元素。</target>
        </trans-unit>
        <trans-unit id="e1fe9f7a09b8a92372a5486a9d79fb459c696cac" translate="yes" xml:space="preserve">
          <source>The control value accessor updates the form input element in the view with the latest &lt;code&gt;favoriteColor&lt;/code&gt; value.</source>
          <target state="translated">控件值访问器使用最新的 &lt;code&gt;favoriteColor&lt;/code&gt; 值更新视图中的表单输入元素。</target>
        </trans-unit>
        <trans-unit id="57410b20d49ca1897c2b04634df3cd7ef8cf74c9" translate="yes" xml:space="preserve">
          <source>The control's value has changed.</source>
          <target state="translated">控件的值发生了变化。</target>
        </trans-unit>
        <trans-unit id="ca5764f6850cc69be0e8c8077aba090d028119b4" translate="yes" xml:space="preserve">
          <source>The control's value is valid.</source>
          <target state="translated">控件的值是有效的。</target>
        </trans-unit>
        <trans-unit id="e9901119ca7da8a80f5cee35a4eeb845a13e8315" translate="yes" xml:space="preserve">
          <source>The conversion process implements the &lt;code&gt;&lt;a href=&quot;../api/elements/ngelementconstructor&quot;&gt;NgElementConstructor&lt;/a&gt;&lt;/code&gt; interface, and creates a constructor class that is configured to produce a self-bootstrapping instance of your component.</source>
          <target state="translated">转换过程实现 &lt;code&gt;&lt;a href=&quot;../api/elements/ngelementconstructor&quot;&gt;NgElementConstructor&lt;/a&gt;&lt;/code&gt; 接口，并创建一个构造函数类，该类被配置为生成组件的自引导实例。</target>
        </trans-unit>
        <trans-unit id="c62334e88935fbdcec541fa91d80d7ebfb110faa" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; serves as a wrapper around the &lt;code&gt;forbiddenNameValidator&lt;/code&gt;.</source>
          <target state="translated">相应的 &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; 充当了 &lt;code&gt;forbiddenNameValidator&lt;/code&gt; 的包装器。</target>
        </trans-unit>
        <trans-unit id="71f13dbbb53ef63c0ce04dd500aaa91a7309173e" translate="yes" xml:space="preserve">
          <source>The corresponding DOM element in the browser (null for WebWorkers).</source>
          <target state="translated">浏览器中对应的DOM元素(WebWorkers为空)。</target>
        </trans-unit>
        <trans-unit id="6c2cbb3d5c755eeb2e5b9b3e623ec0e5d0851a99" translate="yes" xml:space="preserve">
          <source>The corresponding component template looks like this:</source>
          <target state="translated">相应的组件模板是这样的。</target>
        </trans-unit>
        <trans-unit id="32c9b0cfa7f7e663d7530ee0ae139a0a521b8ab6" translate="yes" xml:space="preserve">
          <source>The created object does not get cached by the injector.</source>
          <target state="translated">创建的对象不会被注入器缓存。</target>
        </trans-unit>
        <trans-unit id="2dda5305b34fe50eac42c633b9209406f904f2ac" translate="yes" xml:space="preserve">
          <source>The creation API parses the component looking for input properties, and defines corresponding attributes for the custom element. It transforms the property names to make them compatible with custom elements, which do not recognize case distinctions. The resulting attribute names use dash-separated lowercase. For example, for a component with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;('myInputProp') inputProp&lt;/code&gt;, the corresponding custom element defines an attribute &lt;code&gt;my-input-prop&lt;/code&gt;.</source>
          <target state="translated">创建API解析组件以查找输入属性，并为custom元素定义相应的属性。它转换属性名称以使其与不区分大小写的自定义元素兼容。结果属性名称使用短划线分隔的小写字母。例如，对于具有 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;('myInputProp') inputProp&lt;/code&gt; ，相应的自定义元素定义了 &lt;code&gt;my-input-prop&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="a7ada0b3e583a0ac804c845e4cb5c1762cf95099" translate="yes" xml:space="preserve">
          <source>The curious, dedicated reader might enjoy this lengthy blog post, &lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot;&gt;&quot;&lt;em&gt;Tasks, microtasks, queues and schedules&lt;/em&gt;&quot;&lt;/a&gt;.</source>
          <target state="translated">好奇，专注的读者可能会喜欢这篇冗长的博客文章&lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot;&gt;&amp;ldquo; &lt;em&gt;任务，微任务，队列和时间表&lt;/em&gt; &amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9d763599e77a8e6d59d75f1dcf9f6e13a9029d04" translate="yes" xml:space="preserve">
          <source>The currency code.</source>
          <target state="translated">货币代码;</target>
        </trans-unit>
        <trans-unit id="1e961714f083647d9f7ae1dda7fc90792c835c30" translate="yes" xml:space="preserve">
          <source>The current &lt;code&gt;BannerComponent&lt;/code&gt; presents static title text in the HTML template.</source>
          <target state="translated">当前的 &lt;code&gt;BannerComponent&lt;/code&gt; 在HTML模板中显示静态标题文本。</target>
        </trans-unit>
        <trans-unit id="6b2680b0b6ad0710d65d5e5d0746df48e0918d04" translate="yes" xml:space="preserve">
          <source>The current &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; uses the RxJS &lt;code&gt;of()&lt;/code&gt; function to return an array of mock heroes as an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">当前的 &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; 使用RxJS &lt;code&gt;of()&lt;/code&gt; 函数以 &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; 返回模拟英雄数组。</target>
        </trans-unit>
        <trans-unit id="f0560dbef41d1c541841cce2b26360211c4eacaf" translate="yes" xml:space="preserve">
          <source>The current Navigation object if one exists</source>
          <target state="translated">当前的导航对象(如果有的话)。</target>
        </trans-unit>
        <trans-unit id="7657c044778fdf6db1068d532e80d6b9bbb7dca8" translate="yes" xml:space="preserve">
          <source>The current URL.</source>
          <target state="translated">当前的URL。</target>
        </trans-unit>
        <trans-unit id="f730ad3ca5d926f1046ca241082281a7fc5a38ff" translate="yes" xml:space="preserve">
          <source>The current guidelines allow for a three-level navigation structure with two header levels. Don't add a third header level.</source>
          <target state="translated">目前的指南允许采用三层导航结构,两层标题。不要增加第三层标题。</target>
        </trans-unit>
        <trans-unit id="ba120156cf1c2d4ed712977962e77791a19b845b" translate="yes" xml:space="preserve">
          <source>The current snapshot of the router state</source>
          <target state="translated">当前路由器状态的快照</target>
        </trans-unit>
        <trans-unit id="f8da6bf8a2bb6f6853fcc1eb9997ee7e13be10da" translate="yes" xml:space="preserve">
          <source>The current snapshot of this route</source>
          <target state="translated">该途径的当前快照</target>
        </trans-unit>
        <trans-unit id="21d77846b699af6d4d8754e17ac9142b0c9df316" translate="yes" xml:space="preserve">
          <source>The current state of routing in this NgModule.</source>
          <target state="translated">该NgModule当前的路由状态。</target>
        </trans-unit>
        <trans-unit id="a53af39d47142b7e376378e57c34e7d410be02ee" translate="yes" xml:space="preserve">
          <source>The current state of the router including a tree of the currently activated routes together with convenience methods for traversing the route tree.</source>
          <target state="translated">路由器的当前状态,包括当前激活的路由树,以及遍历路由树的方便方法。</target>
        </trans-unit>
        <trans-unit id="c415c67c1ff9b11622afff6651c02db58a193f2a" translate="yes" xml:space="preserve">
          <source>The current value</source>
          <target state="translated">当前值</target>
        </trans-unit>
        <trans-unit id="e0698114602d013efa358ad69baa59d634483f5a" translate="yes" xml:space="preserve">
          <source>The current value of the control.</source>
          <target state="translated">控件的当前值。</target>
        </trans-unit>
        <trans-unit id="166fd9baf2239e5db9cc405e59c759c3c4b062a1" translate="yes" xml:space="preserve">
          <source>The current version becomes invalid due to a failed hash.</source>
          <target state="translated">由于哈希失败,当前版本变得无效。</target>
        </trans-unit>
        <trans-unit id="0e72187959d2f6f8846ed4b702c80eccf7a5d636" translate="yes" xml:space="preserve">
          <source>The custom element feature extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. A custom element (also called a &lt;em&gt;web component&lt;/em&gt;) is recognized by a browser when it's added to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry&quot;&gt;CustomElementRegistry&lt;/a&gt;.</source>
          <target state="translated">自定义元素功能通过允许您定义其内容由JavaScript代码创建和控制的标记来扩展HTML。将自定义元素（也称为&lt;em&gt;Web组件&lt;/em&gt;）添加到&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry&quot;&gt;CustomElementRegistry&lt;/a&gt;时，浏览器便会识别它。</target>
        </trans-unit>
        <trans-unit id="79531376d994372336113a8ca4d9f22bc6ea61d5" translate="yes" xml:space="preserve">
          <source>The custom id is persistent. The extractor tool does not change it when the translatable text changes. Therefore, you do not need to update the translation. This approach makes maintenance easier.</source>
          <target state="translated">自定义id是持久的。当可翻译文本发生变化时,提取工具不会改变它。因此,您不需要更新翻译。这种方法使维护更容易。</target>
        </trans-unit>
        <trans-unit id="602948966524c9d08153f6c90b9a75768c2a47aa" translate="yes" xml:space="preserve">
          <source>The data model for this type of form must represent a question. The example includes the &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt;, which defines a question as the fundamental object in the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5e4745435b5221cc9e2e4e96dbb049887d7068" translate="yes" xml:space="preserve">
          <source>The data-binding and injection contexts of embedded views created from this &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; inherit from the contexts of this location.</source>
          <target state="translated">从此 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 创建的嵌入式视图的数据绑定和注入上下文继承自该位置的上下文。</target>
        </trans-unit>
        <trans-unit id="f5a2918cf9fc155916140d56e47a05739e0b8db4" translate="yes" xml:space="preserve">
          <source>The data-binding context of the embedded view, as declared in the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; usage.</source>
          <target state="translated">嵌入式视图的数据绑定上下文，如 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 用法中所声明。</target>
        </trans-unit>
        <trans-unit id="91f462d727aaa6e3286220f710d54dc9c89b65cd" translate="yes" xml:space="preserve">
          <source>The date expression: a &lt;code&gt;Date&lt;/code&gt; object, a number (milliseconds since UTC epoch), or an ISO string (&lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;https://www.w3.org/TR/NOTE-datetime&lt;/a&gt;).</source>
          <target state="translated">日期表达式： &lt;code&gt;Date&lt;/code&gt; 对象，数字（自UTC时代以来的毫秒数）或ISO字符串（&lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;https://www.w3.org/TR/NOTE-datetime&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6be1ff2545cf2f4032129392887400693da8322e" translate="yes" xml:space="preserve">
          <source>The date to format, as a Date, or a number (milliseconds since UTC epoch) or an &lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO date-time string&lt;/a&gt;.</source>
          <target state="translated">要格式化的日期，如Date或数字（自UTC时代以来的毫秒数）或&lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO date-time字符串&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a32c99fba05678acf40c6cb230f29e12bd614202" translate="yes" xml:space="preserve">
          <source>The date-time components to include. See &lt;code&gt;&lt;a href=&quot;datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">要包括的日期时间部分。有关详细信息，请参见 &lt;code&gt;&lt;a href=&quot;datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4682d1b62b750807cc0fad3edaa1edf9e246371a" translate="yes" xml:space="preserve">
          <source>The date/time components to include, using predefined options or a custom format string.</source>
          <target state="translated">要包含的日期/时间组件,使用预定义选项或自定义格式字符串。</target>
        </trans-unit>
        <trans-unit id="d9f490b1b139b96680fa4c11b44dad3844d370ec" translate="yes" xml:space="preserve">
          <source>The declaring NgModule.</source>
          <target state="translated">声明NgModule。</target>
        </trans-unit>
        <trans-unit id="98c201f69b3b13f5cb6ff04cc4ea1ccaa2f85377" translate="yes" xml:space="preserve">
          <source>The decorator requirement is imposed by TypeScript. TypeScript normally discards parameter type information when it &lt;a href=&quot;glossary#transpile&quot;&gt;transpiles&lt;/a&gt; the code to JavaScript. TypeScript preserves this information if the class has a decorator and the &lt;code&gt;emitDecoratorMetadata&lt;/code&gt; compiler option is set &lt;code&gt;true&lt;/code&gt; in TypeScript's &lt;code&gt;tsconfig.json&lt;/code&gt; configuration file. The CLI configures &lt;code&gt;tsconfig.json&lt;/code&gt; with &lt;code&gt;emitDecoratorMetadata: true&lt;/code&gt;.</source>
          <target state="translated">装饰器要求由TypeScript强制执行。打字稿当它通常丢弃参数类型信息&lt;a href=&quot;glossary#transpile&quot;&gt;transpiles&lt;/a&gt;代码的JavaScript。如果类具有装饰器，并且在TypeScript的 &lt;code&gt;tsconfig.json&lt;/code&gt; 配置文件中将 &lt;code&gt;emitDecoratorMetadata&lt;/code&gt; 编译器选项设置为 &lt;code&gt;true&lt;/code&gt; ，则TypeScript会保留此信息。CLI 使用 &lt;code&gt;emitDecoratorMetadata: true&lt;/code&gt; 配置 &lt;code&gt;tsconfig.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4251b78ae593ecab9f27a838a16244d1b57f7e3e" translate="yes" xml:space="preserve">
          <source>The deep details of structural directives are covered in the &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt; guide, which explains the following:</source>
          <target state="translated">《&lt;a href=&quot;structural-directives&quot;&gt;结构指令》&lt;/a&gt;指南涵盖了结构指令的详细内容，该指南解释了以下内容：</target>
        </trans-unit>
        <trans-unit id="712324aee1adee04b50e7221977f131f39e9ab45" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on input elements. The accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">默认的 &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; ,用于写入值和侦听输入元素上的更改。该访问器由 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="f7b6c4995ba6a4dfd9eaabf3e2d50d81a0d5b1e8" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on input elements. The accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">默认的 &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; ,用于写入值和侦听输入元素上的更改。该访问器由 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="4e719651b95774d5d34ffe3d1bbd55b00706ab7b" translate="yes" xml:space="preserve">
          <source>The default Renderer implementation is &lt;code&gt;DomRenderer&lt;/code&gt;. Also available is &lt;code&gt;WebWorkerRenderer&lt;/code&gt;.</source>
          <target state="translated">默认的Renderer实现是 &lt;code&gt;DomRenderer&lt;/code&gt; 。 &lt;code&gt;WebWorkerRenderer&lt;/code&gt; 也可用。</target>
        </trans-unit>
        <trans-unit id="8144ff44256c0840ffad9f04ff6fa0e5521432e2" translate="yes" xml:space="preserve">
          <source>The default application created by the Angular CLI only has one component, &lt;code&gt;AppComponent&lt;/code&gt;, so it is in both the &lt;code&gt;declarations&lt;/code&gt; and the &lt;code&gt;bootstrap&lt;/code&gt; arrays.</source>
          <target state="translated">Angular CLI创建的默认应用程序只有一个组件 &lt;code&gt;AppComponent&lt;/code&gt; ，因此它在 &lt;code&gt;declarations&lt;/code&gt; 数组和 &lt;code&gt;bootstrap&lt;/code&gt; 数组中都存在。</target>
        </trans-unit>
        <trans-unit id="faf5e63ed78ca0e97a9ecedb41e45ca7f39187d5" translate="yes" xml:space="preserve">
          <source>The default behavior of registering once the application stabilizes (i.e. as soon as there are no pending micro- and macro-tasks) is designed to register the ServiceWorker as soon as possible but without affecting the application's first time load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672d2814be4490a28b926b37ab8405f75d9fe39e" translate="yes" xml:space="preserve">
          <source>The default behavior of registering once the application stabilizes (i.e. as soon as there are no pending micro- and macro-tasks), is designed register the ServiceWorker as soon as possible but without affecting the application's first time load.</source>
          <target state="translated">默认的行为是,一旦应用程序稳定下来(即只要没有待处理的微观和宏观任务),就进行注册,其设计是尽快注册ServiceWorker,但不影响应用程序的首次加载。</target>
        </trans-unit>
        <trans-unit id="cce4ed312ef59874b902e6e384a1d10149839da4" translate="yes" xml:space="preserve">
          <source>The default browser opens and displays the Getting Started sample application.</source>
          <target state="translated">默认浏览器打开并显示 &quot;入门 &quot;示例应用程序。</target>
        </trans-unit>
        <trans-unit id="0f5ba8741324b5f3ed216ef4d87ba588c6257ad8" translate="yes" xml:space="preserve">
          <source>The default change-detection algorithm looks for differences by comparing bound-property values by reference across change detection runs. You can use this hook to check for and respond to changes by some other means.</source>
          <target state="translated">默认的变更检测算法是通过参照比较变更检测运行中的绑定属性值来寻找差异。您可以使用这个钩子来检查并通过其他方式响应变化。</target>
        </trans-unit>
        <trans-unit id="3bdda24538401899e9cf064e6950ae0505e59468" translate="yes" xml:space="preserve">
          <source>The default currency code is currently always &lt;code&gt;USD&lt;/code&gt; but this is deprecated from v9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082b0e1b657a0cc56834735f1afbffb10d4ce270" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;&lt;a href=&quot;errorhandler&quot;&gt;ErrorHandler&lt;/a&gt;&lt;/code&gt; prints error messages to the &lt;code&gt;console&lt;/code&gt;. To intercept error handling, write a custom exception handler that replaces this default as appropriate for your app.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;errorhandler&quot;&gt;ErrorHandler&lt;/a&gt;&lt;/code&gt; 的默认实现将错误消息打印到 &lt;code&gt;console&lt;/code&gt; 。要拦截错误处理，请编写一个自定义的异常处理程序，以替换适合您应用程序的默认值。</target>
        </trans-unit>
        <trans-unit id="db3547e124faaafb5a7338dfb8bf9084eed6ca08" translate="yes" xml:space="preserve">
          <source>The default in v11 is &lt;code&gt;corrected&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da2e963162d2e85424f83d2c8181d34306ac18d" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;false&lt;/code&gt;. Testers who prefer fine control over test behavior tend to keep it &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">默认值为 &lt;code&gt;false&lt;/code&gt; 。倾向于对测试行为进行精细控制的测试人员倾向于将其保持为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ebb2e2795a7b0b2584064979361ec77fdedf64e" translate="yes" xml:space="preserve">
          <source>The default is defined as the first currency which is still in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ba8d89cb5ef08f208e48a85b605b4310bf02cf" translate="yes" xml:space="preserve">
          <source>The default linting tool is &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;, and the default configuration is specified in the project's &lt;code&gt;tslint.json&lt;/code&gt; file.</source>
          <target state="translated">默认的&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;整理&lt;/a&gt;工具是TSLint，默认配置在项目的 &lt;code&gt;tslint.json&lt;/code&gt; 文件中指定。</target>
        </trans-unit>
        <trans-unit id="fa5bb1f5c1cbe109211dd889cbb9c6ae3627b274" translate="yes" xml:space="preserve">
          <source>The default path-match strategy is 'prefix', which means that the router checks URL elements from the left to see if the URL matches a specified path. For example, '/team/11/user' matches 'team/:id'.</source>
          <target state="translated">默认的路径匹配策略是 &quot;前缀&quot;,这意味着路由器从左边开始检查URL元素是否匹配指定的路径。例如,'/team/11/user'匹配'team/:id'。</target>
        </trans-unit>
        <trans-unit id="a47bf320097df757ab7493c282071f6bfda35329" translate="yes" xml:space="preserve">
          <source>The default project is the value of &lt;code&gt;defaultProject&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">默认的项目是价值 &lt;code&gt;defaultProject&lt;/code&gt; 在 &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41162e3fcbf077344fe0553550fad85de67bc73a" translate="yes" xml:space="preserve">
          <source>The default route should redirect to the &lt;code&gt;HeroListComponent&lt;/code&gt; only when the entire url is &lt;code&gt;''&lt;/code&gt;. Remember to restore the redirect to &lt;code&gt;pathMatch = 'full'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35028a29988fb7b9cfea4b5e01d0bd632d1882bd" translate="yes" xml:space="preserve">
          <source>The default route should redirect to the &lt;code&gt;HeroListComponent&lt;/code&gt;&lt;em&gt;only&lt;/em&gt; when the &lt;em&gt;entire&lt;/em&gt; url is &lt;code&gt;''&lt;/code&gt;. Remember to restore the redirect to &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt;.</source>
          <target state="translated">默认路由应该重定向到 &lt;code&gt;HeroListComponent&lt;/code&gt; &lt;em&gt;只有&lt;/em&gt;当&lt;em&gt;整个&lt;/em&gt;网址是 &lt;code&gt;''&lt;/code&gt; 。请记住将重定向恢复到 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40dc3536f16b1ce21d8af7dde493b0505694ab3d" translate="yes" xml:space="preserve">
          <source>The definition of a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element to match or create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c7e53a19049e62c9da95d6a0a14c4a3484e84c" translate="yes" xml:space="preserve">
          <source>The dependency injector provides services to a component, such as the router service that lets you define navigation among views.</source>
          <target state="translated">依赖注入器为组件提供服务,例如路由器服务,让你可以定义视图之间的导航。</target>
        </trans-unit>
        <trans-unit id="b7a62bbd3b9e12b19e45e6db0e78136526c99fd6" translate="yes" xml:space="preserve">
          <source>The dependency object (returned by the factory function) is typically a class instance, but can be other things as well. In this example, the dependency object is a string of the names of the runners up to the &quot;Hero of the Month&quot; contest.</source>
          <target state="translated">依赖对象(由工厂函数返回)通常是一个类实例,但也可以是其他东西。在这个例子中,依赖对象是 &quot;月度英雄 &quot;比赛的亚军名字的字符串。</target>
        </trans-unit>
        <trans-unit id="0c7316f7415af94bc3bb1c1645bdc8512fc3d426" translate="yes" xml:space="preserve">
          <source>The detail view is different. It displays a particular hero. It can't know which hero to show on its own. That information must come from outside.</source>
          <target state="translated">细节视图则不同。它显示的是一个特定的英雄。它自己无法知道要显示哪个英雄。这种信息必须来自外部。</target>
        </trans-unit>
        <trans-unit id="4c817e48763ae86e1867cf929f8071103e83a6b1" translate="yes" xml:space="preserve">
          <source>The details are specific to each kind of element and therefore the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive only works for an element supported by a &lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt; that adapts an element to this protocol. Angular provides &lt;em&gt;value accessors&lt;/em&gt; for all of the basic HTML form elements and the &lt;a href=&quot;forms&quot;&gt;Forms&lt;/a&gt; guide shows how to bind to them.</source>
          <target state="translated">详细信息特定于每种元素，因此 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令仅适用于&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;支持的元素，该控件将元素适配于此协议。Angular 为所有基本HTML表单元素提供了&lt;em&gt;值访问器&lt;/em&gt;，并且&amp;ldquo; &lt;a href=&quot;forms&quot;&gt;表单&amp;rdquo;&lt;/a&gt;指南显示了如何绑定到它们。</target>
        </trans-unit>
        <trans-unit id="a724916e40e1a922d989c92b3ecf082d7928f9a8" translate="yes" xml:space="preserve">
          <source>The details child route requires an &lt;code&gt;id&lt;/code&gt; route parameter.</source>
          <target state="translated">details子路由需要一个 &lt;code&gt;id&lt;/code&gt; 路由参数。</target>
        </trans-unit>
        <trans-unit id="f0ac9df13cb70c5c72364ce763f333d5013d07ec" translate="yes" xml:space="preserve">
          <source>The details of Angular router configuration are best left to the &lt;a href=&quot;router&quot;&gt;Routing documentation&lt;/a&gt; which recommends that you create a &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; dedicated to router configuration (called a &lt;em&gt;Routing Module&lt;/em&gt;).</source>
          <target state="translated">最好将Angular路由器配置的细节留在&amp;ldquo; &lt;a href=&quot;router&quot;&gt;路由&amp;rdquo;文档中&lt;/a&gt;，该文档建议您创建一个专门用于路由器配置的 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; （称为&amp;ldquo; &lt;em&gt;路由模块&amp;rdquo;&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="8a9f2a38fc0d832b04fd3ce2fa72347e9013e429" translate="yes" xml:space="preserve">
          <source>The diagnostic is evidence that values really are flowing from the input box to the model and back again.</source>
          <target state="translated">诊断是证明数值真的从输入框流向模型,再流向模型。</target>
        </trans-unit>
        <trans-unit id="6cfa18b3ca324abf3063bbd00b532a641ab1a8b0" translate="yes" xml:space="preserve">
          <source>The diagnostic line that shows interpolated values demonstrates that values are really flowing from the input box to the model and back again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21adcbdc5aef6ef62df6c7fe98623baf3748c6ed" translate="yes" xml:space="preserve">
          <source>The diagnostic near the top of the form confirms that all of your changes are reflected in the model.</source>
          <target state="translated">靠近表格顶部的诊断确认您的所有更改都反映在模型中。</target>
        </trans-unit>
        <trans-unit id="e6efeb726810925d371a1fb1a6d0474051cdf771" translate="yes" xml:space="preserve">
          <source>The difference between hiding and removing doesn't matter for a simple paragraph. It does matter when the host element is attached to a resource intensive component. Such a component's behavior continues even when hidden. The component stays attached to its DOM element. It keeps listening to events. Angular keeps checking for changes that could affect data bindings. Whatever the component was doing, it keeps doing.</source>
          <target state="translated">对于一个简单的段落来说,隐藏和删除之间的区别并不重要。当宿主元素连接到一个资源密集型的组件时,它确实很重要。这样一个组件的行为即使在隐藏时也会继续。该组件一直附着在它的DOM元素上。它一直在监听事件。Angular不断检查可能影响数据绑定的变化。无论组件在做什么,它都会继续做。</target>
        </trans-unit>
        <trans-unit id="05f9c87a5a6b790829816cc1f58f2d347fb1340f" translate="yes" xml:space="preserve">
          <source>The difference is a matter of trust. Angular treats a component's template as &lt;em&gt;belonging&lt;/em&gt; to the component. The component and its template trust each other implicitly. Therefore, the component's own template may bind to &lt;em&gt;any&lt;/em&gt; property of that component, with or without the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">区别在于信任。Angular将组件的模板视为&lt;em&gt;属于&lt;/em&gt;该组件。组件及其模板之间存在隐式信任。因此，使用或不使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;装饰器，组件自己的模板都可以绑定到该组件的&lt;em&gt;任何&lt;/em&gt;属性。</target>
        </trans-unit>
        <trans-unit id="34d8a0c8d3141d61c5f06db8d5d7c912587d8341" translate="yes" xml:space="preserve">
          <source>The difference is demonstrated in the examples above using the &lt;strong&gt;favorite color&lt;/strong&gt; input element.</source>
          <target state="translated">在上面的示例中使用&lt;strong&gt;喜欢的颜色&lt;/strong&gt;输入元素展示了这种差异。</target>
        </trans-unit>
        <trans-unit id="d0b68e8984c3be4843fe55f903fdbda57abf5093" translate="yes" xml:space="preserve">
          <source>The difference is demonstrated in the previous examples that use the favorite-color input element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea05ec71ce84c9eace3d13785908f6ad65b675c9" translate="yes" xml:space="preserve">
          <source>The differences between &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; end here. The rest of the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; APIs and concepts work in the exact same way for both types of hybrid apps. See &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; to learn about:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 之间的区别到此结束。对于两种类型的混合应用程序，其余的 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; API和概念均以完全相同的方式工作。请参阅&lt;a href=&quot;upgrade&quot;&gt;从AngularJS升级&lt;/a&gt;以了解以下信息：</target>
        </trans-unit>
        <trans-unit id="6588061d3d1691e6fff573c5dfe4f13036d79c9f" translate="yes" xml:space="preserve">
          <source>The differences from the WHATWG version include:</source>
          <target state="translated">与WHATWG版本的区别包括:</target>
        </trans-unit>
        <trans-unit id="c0cd765a4fa83561fb7b303deb68bf2d797c31c7" translate="yes" xml:space="preserve">
          <source>The different parts of the above declaration are as follows:</source>
          <target state="translated">上述声明的不同部分如下:</target>
        </trans-unit>
        <trans-unit id="8b57de4f61f7ca0b603af7696485495da36c5ceb" translate="yes" xml:space="preserve">
          <source>The directive (&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;) that marks where the router displays a view.</source>
          <target state="translated">指令（ &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; ）标记路由器显示视图的位置。</target>
        </trans-unit>
        <trans-unit id="e2a943aff4c59b087f2ebcb886a4b3d822ed396d" translate="yes" xml:space="preserve">
          <source>The directive &lt;em&gt;attribute name&lt;/em&gt; should be spelled in &lt;em&gt;lowerCamelCase&lt;/em&gt; and begin with a prefix. Don't use &lt;code&gt;ng&lt;/code&gt;. That prefix belongs to Angular. Pick something short that fits you or your company. In this example, the prefix is &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">指令&lt;em&gt;属性名称&lt;/em&gt;应在&lt;em&gt;lowerCamelCase中&lt;/em&gt;拼写，并以前缀开头。不要使用 &lt;code&gt;ng&lt;/code&gt; 。该前缀属于Angular。选择适合您或您公司的短款。在此示例中，前缀为 &lt;code&gt;app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba6a347d4773ad30b8df5e51d0a337cc8bc69a55" translate="yes" xml:space="preserve">
          <source>The directive &lt;em&gt;class&lt;/em&gt; name ends in &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; per the &lt;a href=&quot;styleguide#02-03&quot;&gt;style guide&lt;/a&gt;. Angular's own directives do not.</source>
          <target state="translated">该指令&lt;em&gt;的类&lt;/em&gt;名结束 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; ％的&lt;a href=&quot;styleguide#02-03&quot;&gt;风格指南&lt;/a&gt;。Angular自己的指令没有。</target>
        </trans-unit>
        <trans-unit id="51842e95f5cffa45ec0bfdc97ee2a7c20674dbdc" translate="yes" xml:space="preserve">
          <source>The directive class then implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; interface, so that it can easily integrate with Angular forms. Here is the rest of the directive to help you get an idea of how it all comes together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478c2c1ea3888dc7a9fd6ef30943705c388014aa" translate="yes" xml:space="preserve">
          <source>The directive class then implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; interface, so that it can easily integrate with Angular forms. Here is the rest of the directive to help you get an idea of how it all comes together:</source>
          <target state="translated">然后，指令类实现 &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; 接口，以便可以轻松地与Angular表单集成。以下是该指令的其余部分，以帮助您了解所有内容如何组合在一起：</target>
        </trans-unit>
        <trans-unit id="b6bcdd91bdc7b44148909c3bc1149dbbef3ee183" translate="yes" xml:space="preserve">
          <source>The directive configures the component template to define how the user navigates to the route or URL. When the user clicks a product name, the app displays the details for that product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef982e6c8f1c3d4a71424e22b9ee7addfb89bda" translate="yes" xml:space="preserve">
          <source>The directive consumer expects to bind a true/false condition to &lt;code&gt;[appUnless]&lt;/code&gt;. That means the directive needs an &lt;code&gt;appUnless&lt;/code&gt; property, decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">指令使用者希望将真/假条件绑定到 &lt;code&gt;[appUnless]&lt;/code&gt; 。这意味着该指令需要一个用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;装饰的 &lt;code&gt;appUnless&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="9e4d5899afdcb557b6934f6b0ba2aaa7025a8c64" translate="yes" xml:space="preserve">
          <source>The directive creates an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; and exposes it as a property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fce666c3d79d1e2430245c510a12d4b3059abdd" translate="yes" xml:space="preserve">
          <source>The directive defines &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; hooks that log messages to the parent via an injected &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db669c56bde0e0533c1d29dfee5bfc6ec09764ad" translate="yes" xml:space="preserve">
          <source>The directive for adding/removing classes from an HTML element when an associated &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; contained on or inside the element becomes active/inactive.</source>
          <target state="translated">当元素中或元素内包含的关联 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 变为活动/非活动状态时，用于从HTML元素添加/删除类的指令。</target>
        </trans-unit>
        <trans-unit id="7b6fd6a150b5d66afb816ae7295a48ec4f8688d7" translate="yes" xml:space="preserve">
          <source>The directive for binding a clickable HTML element to a route. Clicking an element with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directive that is bound to a</source>
          <target state="translated">用于将可点击的HTML元素绑定到路由的指令。单击具有 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 指令的元素，该元素绑定到</target>
        </trans-unit>
        <trans-unit id="720f2f8cb29907d240dec98a3b152961aea40b80" translate="yes" xml:space="preserve">
          <source>The directive instance.</source>
          <target state="translated">指令实例。</target>
        </trans-unit>
        <trans-unit id="f9fd79ce44d9191d35df57d19db01b5aa188436a" translate="yes" xml:space="preserve">
          <source>The directive sets the background to a highlight color when the user mouses over the DOM element to which the directive is applied.</source>
          <target state="translated">当用户将鼠标移到应用该指令的DOM元素上时,该指令将背景设置为高光色。</target>
        </trans-unit>
        <trans-unit id="3179195806726150a32be026d2382af65d93e04a" translate="yes" xml:space="preserve">
          <source>The directive then calls &lt;code&gt;EventEmitter.emit(data)&lt;/code&gt; to emit an event, passing in message data, which can be anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dadb675af202c36e02cf9e0644a0f6784933e09" translate="yes" xml:space="preserve">
          <source>The directive's &lt;em&gt;selector&lt;/em&gt; is typically the directive's &lt;strong&gt;attribute name&lt;/strong&gt; in square brackets, &lt;code&gt;[appUnless]&lt;/code&gt;. The brackets define a CSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;attribute selector&lt;/a&gt;.</source>
          <target state="translated">指令的&lt;em&gt;选择器&lt;/em&gt;通常是方括号 &lt;code&gt;[appUnless]&lt;/code&gt; 中的指令的&lt;strong&gt;属性名称&lt;/strong&gt;。方括号定义CSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;属性选择器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a65366dfec5fde7acab8128614c62e56b18c5c2e" translate="yes" xml:space="preserve">
          <source>The directory name to create the workspace in.</source>
          <target state="translated">创建工作区的目录名称。</target>
        </trans-unit>
        <trans-unit id="0c859cde8538cadb116c397acbbea91d60134e68" translate="yes" xml:space="preserve">
          <source>The disabled status to set on the element</source>
          <target state="translated">元素上要设置的禁用状态</target>
        </trans-unit>
        <trans-unit id="0dedb18c8e3657fdad61ad7a842be7e630e26797" translate="yes" xml:space="preserve">
          <source>The disabled value</source>
          <target state="translated">禁用值</target>
        </trans-unit>
        <trans-unit id="f237bd4f809c19acaa65706b33e3dc5e3b8749b9" translate="yes" xml:space="preserve">
          <source>The display looks the same, but the code is clearer.</source>
          <target state="translated">显示效果看起来一样,但代码更清晰。</target>
        </trans-unit>
        <trans-unit id="d8bcb8d5d64520feb45a9a032da8776b213521b0" translate="yes" xml:space="preserve">
          <source>The displayed value changes as you update the form control element.</source>
          <target state="translated">当你更新表单控制元素时,显示的值会发生变化。</target>
        </trans-unit>
        <trans-unit id="166a9002f622127466458a0d9c6c3c60c8874330" translate="yes" xml:space="preserve">
          <source>The distinction between an HTML attribute and a DOM property is key to understanding how Angular binding works. &lt;strong&gt;Attributes are defined by HTML. Properties are accessed from DOM (Document Object Model) nodes.&lt;/strong&gt;</source>
          <target state="translated">HTML属性和DOM属性之间的区别是了解Angular绑定如何工作的关键。&lt;strong&gt;属性由HTML定义。可从DOM（文档对象模型）节点访问属性。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5be893a71b5822406de32b6141daaf6fcfc26fc8" translate="yes" xml:space="preserve">
          <source>The doc generation process consumes the markdown files in the &lt;code&gt;content/guide&lt;/code&gt; directory and produces JSON files in the &lt;code&gt;src/generated/docs/guide&lt;/code&gt; directory, which is also flat. Those JSON files contain a combination of document metadata and HTML content.</source>
          <target state="translated">doc生成过程使用 &lt;code&gt;content/guide&lt;/code&gt; 目录中的markdown文件，并在 &lt;code&gt;src/generated/docs/guide&lt;/code&gt; generation / docs / guide目录中生成JSON文件，该目录也很简单。这些JSON文件包含文档元数据和HTML内容的组合。</target>
        </trans-unit>
        <trans-unit id="757ded666a68b6c3ac40103b86cb3424cfc48bbf" translate="yes" xml:space="preserve">
          <source>The doc generation process erases these comments before displaying them in the doc viewer. It also strips them from stackblitz and sample code downloads.</source>
          <target state="translated">doc生成过程会在doc查看器中显示这些注释之前将其删除。它还会将它们从stackblitz和示例代码下载中删除。</target>
        </trans-unit>
        <trans-unit id="4c43f4f32a923e773c7cd6d68f1699d4b637e4d5" translate="yes" xml:space="preserve">
          <source>The doc generator reads the image dimensions from the file and adds width and height attributes to the &lt;code&gt;img&lt;/code&gt; tag automatically. If you want to control the size of the image, supply your own width and height attributes.</source>
          <target state="translated">doc生成器从文件中读取图像尺寸，并将width和height属性自动添加到 &lt;code&gt;img&lt;/code&gt; 标签。如果要控制图像的大小，请提供自己的width和height属性。</target>
        </trans-unit>
        <trans-unit id="0db28a33c3d601d7a77b4ee9b1f07754d91499dd" translate="yes" xml:space="preserve">
          <source>The doc tooling reports an error if the file identified in the path does not exist &lt;strong&gt;or is &lt;em&gt;git&lt;/em&gt;-ignored&lt;/strong&gt;.</source>
          <target state="translated">如果路径中标识的文件不存在&lt;strong&gt;或被&lt;em&gt;git&lt;/em&gt;忽略，&lt;/strong&gt;则doc工具会报告错误。</target>
        </trans-unit>
        <trans-unit id="a8ce0feb69612f68f0f5866a34dd0b783bcf3d1b" translate="yes" xml:space="preserve">
          <source>The documentation generally refers to &lt;em&gt;elements&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; instances), as distinct from &lt;em&gt;DOM elements&lt;/em&gt; (which can be accessed directly if necessary).</source>
          <target state="translated">该文档通常涉及&lt;em&gt;元素&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 实例），与&lt;em&gt;DOM元素不同&lt;/em&gt;（必要时可以直接访问）。</target>
        </trans-unit>
        <trans-unit id="6950b5369e17c747d6d6f1e74badedf7eff1e093" translate="yes" xml:space="preserve">
          <source>The double curly braces are Angular's &lt;em&gt;interpolation binding&lt;/em&gt; syntax. This interpolation binding presents the component's &lt;code&gt;title&lt;/code&gt; property value inside the HTML header tag.</source>
          <target state="translated">双花括号是Angular的&lt;em&gt;插值绑定&lt;/em&gt;语法。此插值绑定在HTML标头标记内显示组件的 &lt;code&gt;title&lt;/code&gt; 属性值。</target>
        </trans-unit>
        <trans-unit id="60368b0fb0530b310d1b03d0c629cde2a42557de" translate="yes" xml:space="preserve">
          <source>The drop down works properly.</source>
          <target state="translated">下拉工作正常。</target>
        </trans-unit>
        <trans-unit id="f7df533c465dacb0b3380c1fdf650cf2849bea23" translate="yes" xml:space="preserve">
          <source>The dynamic form itself will be represented by a container component, which you will add in a later step. Each question is represented in the form component's template by an &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; tag, which matches an instance of &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7022688694dc65a2c8f3c08da2b0a9b3ae17aba" translate="yes" xml:space="preserve">
          <source>The eagerly loaded scenario</source>
          <target state="translated">迫不及待地加载的场景</target>
        </trans-unit>
        <trans-unit id="ea57f8da3c0e12c71f28c904fd0f0841386ae246" translate="yes" xml:space="preserve">
          <source>The easiest way to create a component is with the Angular CLI. You can also create a component manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12f2ea045d53bad086859121475d2ad2a833c0a" translate="yes" xml:space="preserve">
          <source>The easiest way to display a component property is to bind the property name through interpolation. With interpolation, you put the property name in the view template, enclosed in double curly braces: &lt;code&gt;{{myHero}}&lt;/code&gt;.</source>
          <target state="translated">显示组件属性的最简单方法是通过插值来绑定属性名称。通过插值，您可以将属性名称放在视图模板中，并用双花括号括起来： &lt;code&gt;{{myHero}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d1ec4c9b3516ed0310d2e6eabdaf99dbd349d4a" translate="yes" xml:space="preserve">
          <source>The easing value controls how the animation accelerates and decelerates during its runtime. Value is one of &lt;code&gt;ease&lt;/code&gt;, &lt;code&gt;ease-in&lt;/code&gt;, &lt;code&gt;ease-out&lt;/code&gt;, &lt;code&gt;ease-in-out&lt;/code&gt;, or a &lt;code&gt;cubic-bezier()&lt;/code&gt; function call. If not supplied, no easing is applied.</source>
          <target state="translated">缓动值控制动画在其运行期间如何加速和减速。值是 &lt;code&gt;ease&lt;/code&gt; ， &lt;code&gt;ease-in&lt;/code&gt; ， &lt;code&gt;ease-out&lt;/code&gt; ， &lt;code&gt;ease-in-out&lt;/code&gt; 或 &lt;code&gt;cubic-bezier()&lt;/code&gt; 函数调用之一。如果未提供，则不应用任何缓动。</target>
        </trans-unit>
        <trans-unit id="673d673b2746886a3adde806bd89c20b0680bdef" translate="yes" xml:space="preserve">
          <source>The element tag name, if it is an element.</source>
          <target state="translated">元素标签名称,如果它是一个元素。</target>
        </trans-unit>
        <trans-unit id="d27c746aa80a187e9f22b16f7b95f9f1bed7667f" translate="yes" xml:space="preserve">
          <source>The element that will recognize gestures.</source>
          <target state="translated">会识别手势的元素。</target>
        </trans-unit>
        <trans-unit id="e0442f5cd8f77d16465566da511146ed7ff5097c" translate="yes" xml:space="preserve">
          <source>The element to query, or a set of elements that contain Angular-specific characteristics, specified with one or more of the following tokens.</source>
          <target state="translated">要查询的元素,或包含Angular特定特征的元素集,用以下一个或多个标记指定。</target>
        </trans-unit>
        <trans-unit id="84276241b9685b6ea2701e6001dbf22cb649f9c1" translate="yes" xml:space="preserve">
          <source>The element to render.</source>
          <target state="translated">要渲染的元素。</target>
        </trans-unit>
        <trans-unit id="9131974bc73e41cfa82641177ab47b4bbe64ec2b" translate="yes" xml:space="preserve">
          <source>The element to which the animation is attached.</source>
          <target state="translated">动画所附着的元素。</target>
        </trans-unit>
        <trans-unit id="46178d56386d4cf368fc2af3376e280cef598d8e" translate="yes" xml:space="preserve">
          <source>The element to which you apply a directive is its &lt;em&gt;host&lt;/em&gt; element. The &lt;code&gt;&amp;lt;happy-hero&amp;gt;&lt;/code&gt; is the host element for the happy &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;unknown-hero&amp;gt;&lt;/code&gt; is the host element for the &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">向其应用指令的元素是其&lt;em&gt;宿主&lt;/em&gt;元素。所述 &lt;code&gt;&amp;lt;happy-hero&amp;gt;&lt;/code&gt; 是用于开心host元素 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 。所述 &lt;code&gt;&amp;lt;unknown-hero&amp;gt;&lt;/code&gt; 是用于在主机元件 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21955f7341d9631161057f2409976b172f526079" translate="yes" xml:space="preserve">
          <source>The element's own component instance, if it has one.</source>
          <target state="translated">元素自己的组件实例,如果它有的话。</target>
        </trans-unit>
        <trans-unit id="3bf4b7ea68f964a8343706cfd8e0de47b6ae2323" translate="yes" xml:space="preserve">
          <source>The element.</source>
          <target state="translated">该要素:</target>
        </trans-unit>
        <trans-unit id="4ad5959dbe7800ed816d9f5708f3fc045876a16c" translate="yes" xml:space="preserve">
          <source>The empty path in the fourth route represents the default path for the application&amp;mdash;the place to go when the path in the URL is empty, as it typically is at the start. This default route redirects to the route for the &lt;code&gt;/heroes&lt;/code&gt; URL and, therefore, displays the &lt;code&gt;HeroesListComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f953b82a33a57fd342ecf714841bf89e003c89ed" translate="yes" xml:space="preserve">
          <source>The encoded key name.</source>
          <target state="translated">编码的密钥名称。</target>
        </trans-unit>
        <trans-unit id="77a9b35bf33aad2c1e20f1db858b00aff0e15a54" translate="yes" xml:space="preserve">
          <source>The encoded value.</source>
          <target state="translated">编码值。</target>
        </trans-unit>
        <trans-unit id="b4d1c435b55c4bd54f0e5938665f180e3308a59f" translate="yes" xml:space="preserve">
          <source>The ending location just happens to be the same as the component itself, because it is the topmost component in this application.</source>
          <target state="translated">结尾位置刚好与组件本身相同,因为它是这个应用程序中最顶端的组件。</target>
        </trans-unit>
        <trans-unit id="53f8087657d38ede7c7b2e78926607c4e103415b" translate="yes" xml:space="preserve">
          <source>The endpoint URL.</source>
          <target state="translated">端点URL。</target>
        </trans-unit>
        <trans-unit id="ce758382f5b525c72c93874bf2a5511cf0624108" translate="yes" xml:space="preserve">
          <source>The entire &lt;a href=&quot;http://v7.angular.io/api/http&quot;&gt;&lt;code&gt;@angular/http&lt;/code&gt;&lt;/a&gt; package has been removed. Use &lt;a href=&quot;../api/common/http&quot;&gt;&lt;code&gt;@angular/common/http&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">整个&lt;a href=&quot;http://v7.angular.io/api/http&quot;&gt; &lt;code&gt;@angular/http&lt;/code&gt; &lt;/a&gt;软件包已被删除。请改用&lt;a href=&quot;../api/common/http&quot;&gt; &lt;code&gt;@angular/common/http&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="09267d94484132cc08f19cf699a998d66e34af3d" translate="yes" xml:space="preserve">
          <source>The entire cart component is shown below:</source>
          <target state="translated">整个购物车组件如下图所示。</target>
        </trans-unit>
        <trans-unit id="517d85bc6d5992973ef1adac25e14215d5732b6c" translate="yes" xml:space="preserve">
          <source>The entire template translation is complete. The next section describes how to load that translation into the app.</source>
          <target state="translated">整个模板翻译已经完成。下一节介绍如何将该翻译加载到应用程序中。</target>
        </trans-unit>
        <trans-unit id="65be920f45735066f65d3093424f23271e09fd22" translate="yes" xml:space="preserve">
          <source>The error location is the beginning of the text node that contains the interpolation expression with the error. If the error is in an attribute binding such as &lt;code&gt;[value]=&quot;person.address.street&quot;&lt;/code&gt;, the error location is the location of the attribute that contains the error.</source>
          <target state="translated">错误位置是包含有错误的插值表达式的文本节点的开头。如果错误位于属性绑定中，例如 &lt;code&gt;[value]=&quot;person.address.street&quot;&lt;/code&gt; ，则错误位置是包含错误的属性的位置。</target>
        </trans-unit>
        <trans-unit id="5b2800e5c7af1b4412b364a4614c015c995767e2" translate="yes" xml:space="preserve">
          <source>The event binding listens for the button's click events and calls the component's &lt;code&gt;onSave()&lt;/code&gt; method whenever a click occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ff142aa61a33181c0a1759ca603b78c8f65052" translate="yes" xml:space="preserve">
          <source>The event binding to the textbox's &lt;code&gt;input&lt;/code&gt; event calls the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">绑定到文本框 &lt;code&gt;input&lt;/code&gt; 事件的事件调用 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="6ed6e9ce266d18a90fadd7e10b03d03c8dbd92d9" translate="yes" xml:space="preserve">
          <source>The event binding to the textbox's &lt;code&gt;input&lt;/code&gt; event calls the &lt;code&gt;search()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1b6fe126f9ca22b76040da84e54d75ff818550" translate="yes" xml:space="preserve">
          <source>The event binding, &lt;code&gt;(newItemEvent)='addItem($event)'&lt;/code&gt;, connects the event in the child, &lt;code&gt;newItemEvent&lt;/code&gt;, to the method in the parent, &lt;code&gt;addItem()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3639fbd6435142847d3144a74c6667bfa653654c" translate="yes" xml:space="preserve">
          <source>The event binding, &lt;code&gt;(newItemEvent)='addItem($event)'&lt;/code&gt;, tells Angular to connect the event in the child, &lt;code&gt;newItemEvent&lt;/code&gt;, to the method in the parent, &lt;code&gt;addItem()&lt;/code&gt;, and that the event that the child is notifying the parent about is to be the argument of &lt;code&gt;addItem()&lt;/code&gt;. In other words, this is where the actual hand off of data takes place. The &lt;code&gt;$event&lt;/code&gt; contains the data that the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; in the child template UI.</source>
          <target state="translated">事件绑定 &lt;code&gt;(newItemEvent)='addItem($event)'&lt;/code&gt; 告诉Angular将子项 &lt;code&gt;newItemEvent&lt;/code&gt; 中的事件连接到父项中的方法 &lt;code&gt;addItem()&lt;/code&gt; ，以及子项正在通知父项的事件about是 &lt;code&gt;addItem()&lt;/code&gt; 的参数。换句话说，这是实际移交数据的地方。在 &lt;code&gt;$event&lt;/code&gt; 中包含的数据，用户类型分为 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 在子模板UI。</target>
        </trans-unit>
        <trans-unit id="ad8b492b040130403394a8b8405002e8fbe05184" translate="yes" xml:space="preserve">
          <source>The event name for control to update upon.</source>
          <target state="translated">控件更新时的事件名称。</target>
        </trans-unit>
        <trans-unit id="f4f20723f533d5e629777325cd0a3634e4a127e2" translate="yes" xml:space="preserve">
          <source>The event to listen for.</source>
          <target state="translated">要听的事件。</target>
        </trans-unit>
        <trans-unit id="91ef2a7a591ac9092eaa2b69ce5e271726e45b75" translate="yes" xml:space="preserve">
          <source>The events occur in the following sequence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c1184dacbaa43055ccffb47a5d3e22a00bb1c7" translate="yes" xml:space="preserve">
          <source>The exact values of these attributes aren't important. They are automatically generated and you never refer to them in application code. But they are targeted by the generated component styles, which are in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of the DOM:</source>
          <target state="translated">这些属性的确切值并不重要。它们是自动生成的，您永远不会在应用程序代码中引用它们。但是它们以生成的组件样式为目标，这些样式在DOM 的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 部分中：</target>
        </trans-unit>
        <trans-unit id="4b7a62544532a45cb6e60791b758a5ec3dddf356" translate="yes" xml:space="preserve">
          <source>The example above casts the &lt;code&gt;$event&lt;/code&gt; as an &lt;code&gt;any&lt;/code&gt; type. That simplifies the code at a cost. There is no type information that could reveal properties of the event object and prevent silly mistakes.</source>
          <target state="translated">上面的示例将 &lt;code&gt;$event&lt;/code&gt; 强制转换为 &lt;code&gt;any&lt;/code&gt; 类型。这简化了代码，但要付出一定的代价。没有类型信息可以揭示事件对象的属性并防止愚蠢的错误。</target>
        </trans-unit>
        <trans-unit id="273eb5d9b6efb1eb7fc204e5b2fd8c9a9f9a424d" translate="yes" xml:space="preserve">
          <source>The example above shows the preferred way to provide a service in a module. This method is preferred because it enables tree-shaking of the service if nothing injects it. If it's not possible to specify in the service which module should provide it, you can also declare a provider for the service within the module:</source>
          <target state="translated">上面的例子显示了在模块中提供服务的首选方法。之所以首选这种方法,是因为如果没有任何东西注入服务,它就可以实现服务的树状结构。如果无法在服务中指定由哪个模块提供,也可以在模块中为服务声明一个提供者。</target>
        </trans-unit>
        <trans-unit id="b2e27e8c2c92276e05378262ff057e11c8b22f08" translate="yes" xml:space="preserve">
          <source>The example added a &lt;code&gt;name&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element and set it to &quot;name&quot;, which makes sense for the hero's name. Any unique value will do, but using a descriptive name is helpful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effbc7d2c80d5854e16babc4c844f954f764345c" translate="yes" xml:space="preserve">
          <source>The example app features a second service, the &lt;code&gt;AnimalService&lt;/code&gt; to demonstrate &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该示例应用程序具有第二个服务 &lt;code&gt;AnimalService&lt;/code&gt; 来演示 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c78f64c7b89201f40e03d1b69154355e19de092e" translate="yes" xml:space="preserve">
          <source>The example app features a second service, the &lt;code&gt;AnimalService&lt;/code&gt; to demonstrate &lt;code&gt;viewProviders&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d59f9bd8904b6d345e194680af23a795fc7a0b5" translate="yes" xml:space="preserve">
          <source>The example app has a &lt;code&gt;FlowerService&lt;/code&gt; provided in &lt;code&gt;root&lt;/code&gt; with an &lt;code&gt;emoji&lt;/code&gt; value of &lt;code&gt;🌺&lt;/code&gt; (red hibiscus).</source>
          <target state="translated">示例应用程序的 &lt;code&gt;root&lt;/code&gt; 提供了 &lt;code&gt;FlowerService&lt;/code&gt; ， &lt;code&gt;emoji&lt;/code&gt; 值为 &lt;code&gt;🌺&lt;/code&gt; （红色芙蓉）。</target>
        </trans-unit>
        <trans-unit id="7e293a7ac30ffcbf40d0aa732b70cb22ea0ae688" translate="yes" xml:space="preserve">
          <source>The example below shows how to use a &lt;code&gt;plural&lt;/code&gt; ICU expression to display one of those three options based on when the update occurred:</source>
          <target state="translated">下面的示例演示如何使用 &lt;code&gt;plural&lt;/code&gt; ICU表达式来根据更新发生的时间显示这三个选项之一：</target>
        </trans-unit>
        <trans-unit id="32f43e0dcae0b20b112d1f2cf6afab0db54ce258" translate="yes" xml:space="preserve">
          <source>The example catches errors as &lt;a href=&quot;http#error-details&quot;&gt;described above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd77271eb13f69fabbed387e0cde0a99c8b25dd3" translate="yes" xml:space="preserve">
          <source>The example component, &lt;code&gt;OnChangesComponent&lt;/code&gt;, has two input properties: &lt;code&gt;hero&lt;/code&gt; and &lt;code&gt;power&lt;/code&gt;.</source>
          <target state="translated">示例组件 &lt;code&gt;OnChangesComponent&lt;/code&gt; 具有两个输入属性： &lt;code&gt;hero&lt;/code&gt; 和 &lt;code&gt;power&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9155530069679df1e8e17804347a08779c0b88f" translate="yes" xml:space="preserve">
          <source>The example conforms to the best practices for creating scalable solutions by defining a re-usable &lt;a href=&quot;glossary#service&quot;&gt;injectable service&lt;/a&gt; to perform the data-handling functionality. In addition to fetching data, the service can post-process the data, add error handling, and add retry logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ae9273f0a2796a26e3fdc2b5495b83160ccdd7" translate="yes" xml:space="preserve">
          <source>The example defines a &lt;code&gt;Parent&lt;/code&gt; class interface.</source>
          <target state="translated">该示例定义了 &lt;code&gt;Parent&lt;/code&gt; 类接口。</target>
        </trans-unit>
        <trans-unit id="78dfaeee725082d98ba4c1ba36ee3d43f4320105" translate="yes" xml:space="preserve">
          <source>The example does not perform any initialization or clean-up. It just tracks the appearance and disappearance of an element in the view by recording when the directive itself is instantiated and destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a19339f0623e57becdf428e24d9054631f017e" translate="yes" xml:space="preserve">
          <source>The example in this cookbook is a dynamic form to build an online application experience for heroes seeking employment. The agency is constantly tinkering with the application process. You can create the forms on the fly &lt;em&gt;without changing the application code&lt;/em&gt;.</source>
          <target state="translated">本菜谱中的示例是一个动态表格，用于为寻求就业的英雄构建在线应用程序体验。该机构一直在修改申请程序。您可以在&lt;em&gt;不更改应用程序代码的情况下&lt;/em&gt;即时创建表单。</target>
        </trans-unit>
        <trans-unit id="21368d5aa0e0f57cc1e8629018f6a96fc88d7046" translate="yes" xml:space="preserve">
          <source>The example provides a model for a job application for heroes, but there are no references to any specific hero question other than the objects returned by &lt;code&gt;QuestionService&lt;/code&gt;. This separation of model and data allows you to repurpose the components for any type of survey as long as it's compatible with the &lt;em&gt;question&lt;/em&gt; object model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda3065caba1d5eb2c8f5fe0c2d8e9d5653e9812" translate="yes" xml:space="preserve">
          <source>The examples use cross-validation to ensure that heroes do not reveal their true identities by filling out the Hero Form. The validators do this by checking that the hero names and alter egos do not match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc3566154c29af35184ae0bd0cc18f2f2008688" translate="yes" xml:space="preserve">
          <source>The existing &lt;code&gt;AuthGuard&lt;/code&gt; already has the essential logic in its &lt;code&gt;checkLogin()&lt;/code&gt; method to support the &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard.</source>
          <target state="translated">现有的 &lt;code&gt;AuthGuard&lt;/code&gt; 在其 &lt;code&gt;checkLogin()&lt;/code&gt; 方法中已经具有基本逻辑以支持 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 保护。</target>
        </trans-unit>
        <trans-unit id="718c865b634d55ae8dfe4de1b660b49d34f475af" translate="yes" xml:space="preserve">
          <source>The existing AngularJS code works as before &lt;em&gt;and&lt;/em&gt; you are ready to start adding Angular code.</source>
          <target state="translated">现有的AngularJS代码可以像以前一样工作&lt;em&gt;，&lt;/em&gt;您可以开始添加Angular代码了。</target>
        </trans-unit>
        <trans-unit id="ab13d61d6ddb887413912e2f62c6e3e7fc4aac41" translate="yes" xml:space="preserve">
          <source>The existing child node before which &lt;code&gt;newChild&lt;/code&gt; is inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5fd876d33ea042d6b4add9cc8574eee41bd22c4" translate="yes" xml:space="preserve">
          <source>The existing child node that should precede the new node.</source>
          <target state="translated">新节点之前的现有子节点。</target>
        </trans-unit>
        <trans-unit id="d872770ece0f419b22a9305fbf0ce1956dbee659" translate="yes" xml:space="preserve">
          <source>The expanded provider configuration is an object literal with two properties.</source>
          <target state="translated">扩展的提供者配置是一个具有两个属性的对象文字。</target>
        </trans-unit>
        <trans-unit id="0a901e7e7f6e2f5a9cf69a27df265c2237d91887" translate="yes" xml:space="preserve">
          <source>The expected response type of the server.</source>
          <target state="translated">服务器的预期响应类型。</target>
        </trans-unit>
        <trans-unit id="756b02a42955f8fd84e0875c967bff67e4bc2260" translate="yes" xml:space="preserve">
          <source>The experience might be better if all of this were handled first, before the route is activated. A &lt;code&gt;CrisisDetailResolver&lt;/code&gt; service could retrieve a &lt;code&gt;Crisis&lt;/code&gt; or navigate away if the &lt;code&gt;Crisis&lt;/code&gt; does not exist &lt;em&gt;before&lt;/em&gt; activating the route and creating the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;.</source>
          <target state="translated">如果在激活路线之前先处理所有这些问题，则可能会更好。如果 &lt;code&gt;CrisisDetailResolver&lt;/code&gt; 服务&lt;em&gt;在&lt;/em&gt;激活路由和创建 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; &lt;em&gt;之前&lt;/em&gt;不存在 &lt;code&gt;Crisis&lt;/code&gt; ，则该服务可以检索 &lt;code&gt;Crisis&lt;/code&gt; 或导航出去。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="231b4a30ec02743f59b6dc1ae1cd48da208d12aa" translate="yes" xml:space="preserve">
          <source>The experience might be better if all of this were handled first, before the route is activated. A &lt;code&gt;CrisisDetailResolver&lt;/code&gt; service could retrieve a &lt;code&gt;Crisis&lt;/code&gt; or navigate away, if the &lt;code&gt;Crisis&lt;/code&gt; did not exist, &lt;em&gt;before&lt;/em&gt; activating the route and creating the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0105ecd0834a0a52efb835dd0c06c79018cfc2a" translate="yes" xml:space="preserve">
          <source>The expression can invoke methods of the host component such as &lt;code&gt;getVal()&lt;/code&gt; in the following example:</source>
          <target state="translated">在以下示例中，该表达式可以调用主机组件的方法，例如 &lt;code&gt;getVal()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bc38af0a3f6b603a4f52ccb0dc5abcee023d78a0" translate="yes" xml:space="preserve">
          <source>The expression string can contain multiple comma-separated statements; for example &quot;state1 =&amp;gt; state2, state3 =&amp;gt; state4&quot;.</source>
          <target state="translated">表达式字符串可以包含多个逗号分隔的语句。例如&amp;ldquo;状态1 =&amp;gt;状态2，状态3 =&amp;gt;状态4&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="a13861ade07df9e378c5d3fa8b540dff690597ea" translate="yes" xml:space="preserve">
          <source>The expression used in an &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive is used to narrow type unions in the Angular template compiler, the same way the &lt;code&gt;if&lt;/code&gt; expression does in TypeScript. For example, to avoid &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; error in the template above, modify it to only emit the interpolation if the value of &lt;code&gt;person&lt;/code&gt; is initialized as shown below:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 指令中使用的表达式用于缩小Angular模板编译器中的类型并集，与 &lt;code&gt;if&lt;/code&gt; 表达式在TypeScript 中的用法相同。例如，为避免在上面的模板中 &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; 错误，请将其修改为仅在 &lt;code&gt;person&lt;/code&gt; 的值初始化后才发出插值，如下所示：</target>
        </trans-unit>
        <trans-unit id="ef8c01f4c0d7e68b89c220ac9f8c5253404cce00" translate="yes" xml:space="preserve">
          <source>The external typings for AngularJS may be uninstalled as well. The only ones you still need are for Jasmine and Angular polyfills. The &lt;code&gt;@angular/upgrade&lt;/code&gt; package and its mapping in &lt;code&gt;systemjs.config.js&lt;/code&gt; can also go.</source>
          <target state="translated">AngularJS的外部类型也可以被卸载。您仍然唯一需要的是Jasmine和Angular polyfills。该 &lt;code&gt;@angular/upgrade&lt;/code&gt; 包及其映射 &lt;code&gt;systemjs.config.js&lt;/code&gt; 也可以去。</target>
        </trans-unit>
        <trans-unit id="f9487dc824b5a06931326438975b3fa897554272" translate="yes" xml:space="preserve">
          <source>The extraction tool broke that into two translation units because ICU expressions are extracted separately.</source>
          <target state="translated">由于ICU表达式是单独提取的,所以提取工具将其分解为两个翻译单元。</target>
        </trans-unit>
        <trans-unit id="9417ff966974590689ce184e11dd80a18dd2fcc6" translate="yes" xml:space="preserve">
          <source>The extraction tool uses the locale to add the app locale information into your translation source file. This information is not used by Angular, but external translation tools may need it.</source>
          <target state="translated">提取工具使用locale将应用程序的locale信息添加到您的翻译源文件中。Angular不使用这些信息,但外部翻译工具可能需要它。</target>
        </trans-unit>
        <trans-unit id="85f84c0e0492c512641e357031e4b8a990681047" translate="yes" xml:space="preserve">
          <source>The factory function used to create an instance of the &lt;code&gt;&lt;a href=&quot;%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; in Angular, and provides an API-compatiable &lt;code&gt;$locationProvider&lt;/code&gt; for AngularJS.</source>
          <target state="translated">工厂函数用于在Angular中创建 &lt;code&gt;&lt;a href=&quot;%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; 的实例，并为AngularJS 提供与API兼容的 &lt;code&gt;$locationProvider&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b0b48f7c53cdcc9a28c5b33f627658903f534c56" translate="yes" xml:space="preserve">
          <source>The factory function used to create an instance of the &lt;code&gt;&lt;a href=&quot;upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; in Angular, and provides an API-compatiable &lt;code&gt;$locationProvider&lt;/code&gt; for AngularJS.</source>
          <target state="translated">工厂函数用于在Angular中创建 &lt;code&gt;&lt;a href=&quot;upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; 的实例，并为AngularJS 提供与API兼容的 &lt;code&gt;$locationProvider&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fff2a09918a1b2d112204afd22582dc9b903d3db" translate="yes" xml:space="preserve">
          <source>The factory to use.</source>
          <target state="translated">工厂要用。</target>
        </trans-unit>
        <trans-unit id="45110d699eb402accd2b39408cf613ccace142aa" translate="yes" xml:space="preserve">
          <source>The feature module has its own routing module, &lt;code&gt;customers-routing.module.ts&lt;/code&gt;. The &lt;code&gt;AppRoutingModule&lt;/code&gt; imports the feature module, &lt;code&gt;CustomersModule&lt;/code&gt;, and &lt;code&gt;CustomersModule&lt;/code&gt; in turn imports the &lt;code&gt;CustomersRoutingModule&lt;/code&gt;.</source>
          <target state="translated">功能模块具有自己的路由模块 &lt;code&gt;customers-routing.module.ts&lt;/code&gt; 。该 &lt;code&gt;AppRoutingModule&lt;/code&gt; 进口功能模块， &lt;code&gt;CustomersModule&lt;/code&gt; 和 &lt;code&gt;CustomersModule&lt;/code&gt; 反过来进口 &lt;code&gt;CustomersRoutingModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c68df8d13f8a11bcd08a42b67de607bb1fe78496" translate="yes" xml:space="preserve">
          <source>The feature-specific route definition file &lt;code&gt;customers-routing.module.ts&lt;/code&gt; imports its own feature component defined in the &lt;code&gt;customers.component.ts&lt;/code&gt; file, along with the other JavaScript import statements. It then maps the empty path to the &lt;code&gt;CustomersComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6957954dfc17f6637256e21496069d6d7edfa00a" translate="yes" xml:space="preserve">
          <source>The feature-specific routing module imports its own feature component, &lt;code&gt;CustomerListComponent&lt;/code&gt;, along with the other JavaScript import statements. It also adds the route to its own component.</source>
          <target state="translated">特定于功能的路由模块将导入其自己的功能组件 &lt;code&gt;CustomerListComponent&lt;/code&gt; 以及其他JavaScript导入语句。它还会将路线添加到其自己的组件中。</target>
        </trans-unit>
        <trans-unit id="b6679a077d80a4fae996b201686c099a780913b7" translate="yes" xml:space="preserve">
          <source>The features described in this guide &amp;mdash; and the more advanced features described in the related Angular animations guides &amp;mdash; are demonstrated in an example app available as a live example.</source>
          <target state="translated">本指南中描述的功能以及相关的Angular动画指南中描述的更高级的功能在一个示例应用程序中进行了演示，该应用程序可作为实时示例使用。</target>
        </trans-unit>
        <trans-unit id="5d913855a2f92d2ad9226bb9153c9058915ef08a" translate="yes" xml:space="preserve">
          <source>The fields given in the schema correspond to the allowed argument values and defaults for the CLI sub-command options. You can update your workspace schema file to set a different default for a sub-command option.</source>
          <target state="translated">模式中给出的字段对应CLI子命令选项的允许参数值和默认值。您可以更新工作区模式文件,为子命令选项设置不同的默认值。</target>
        </trans-unit>
        <trans-unit id="1e46781c8a8accd7cee0f511396c96eb0f907cd9" translate="yes" xml:space="preserve">
          <source>The file extension or preprocessor to use for style files.</source>
          <target state="translated">用于样式文件的文件扩展名或预处理器。</target>
        </trans-unit>
        <trans-unit id="4df1821dbd4788e87e9499318c4ec670cf47f860" translate="yes" xml:space="preserve">
          <source>The file extension to use for style files.</source>
          <target state="translated">用于样式文件的文件扩展名。</target>
        </trans-unit>
        <trans-unit id="6406bc3d893f537b5bde48e17108b2279f261462" translate="yes" xml:space="preserve">
          <source>The file name reported in the error message, &lt;code&gt;my.component.ts.MyComponent.html&lt;/code&gt;, is a synthetic file generated by the template compiler that holds contents of the &lt;code&gt;MyComponent&lt;/code&gt; class template. The compiler never writes this file to disk. The line and column numbers are relative to the template string in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; annotation of the class, &lt;code&gt;MyComponent&lt;/code&gt; in this case. If a component uses &lt;code&gt;templateUrl&lt;/code&gt; instead of &lt;code&gt;template&lt;/code&gt;, the errors are reported in the HTML file referenced by the &lt;code&gt;templateUrl&lt;/code&gt; instead of a synthetic file.</source>
          <target state="translated">错误消息中报告的文件名 &lt;code&gt;my.component.ts.MyComponent.html&lt;/code&gt; 是模板编译器生成的合成文件，其中包含 &lt;code&gt;MyComponent&lt;/code&gt; 类模板的内容。编译器永远不会将此文件写入磁盘。行号和列号相对于类的 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 注释中的模板字符串，在本例中为 &lt;code&gt;MyComponent&lt;/code&gt; 。如果组件使用 &lt;code&gt;templateUrl&lt;/code&gt; 而不是 &lt;code&gt;template&lt;/code&gt; ，则错误将在 &lt;code&gt;templateUrl&lt;/code&gt; 引用的HTML文件而不是合成文件中报告。</target>
        </trans-unit>
        <trans-unit id="dc59a059fa420961f9dd7f4d741b5a2264a08f45" translate="yes" xml:space="preserve">
          <source>The files in &lt;code&gt;@angular/common/locales&lt;/code&gt; contain most of the locale data that you need, but some advanced formatting options might only be available in the extra dataset that you can import from &lt;code&gt;@angular/common/locales/extra&lt;/code&gt;. An error message informs you when this is the case.</source>
          <target state="translated">&lt;code&gt;@angular/common/locales&lt;/code&gt; 的文件包含您所需的大多数语言环境数据，但是某些高级格式化选项可能仅在可从 &lt;code&gt;@angular/common/locales/extra&lt;/code&gt; 导入的额外数据集中可用。在这种情况下，错误消息会通知您。</target>
        </trans-unit>
        <trans-unit id="cc5da9fb73116aefd1be69567f1edca5171f0c86" translate="yes" xml:space="preserve">
          <source>The files in the &lt;code&gt;dist/my-project-name&lt;/code&gt; folder are static and can be hosted on any web server capable of serving files (&lt;code&gt;Node.js&lt;/code&gt;, Java, .NET) or any backend (Firebase, Google Cloud, App Engine, others).</source>
          <target state="translated">在这些文件 &lt;code&gt;dist/my-project-name&lt;/code&gt; 的文件夹是静态的，能够提供文件服务（任何Web服务器上托管 &lt;code&gt;Node.js&lt;/code&gt; ，Java和.NET）或任何后端（火力地堡，谷歌云，应用程序引擎，其他） 。</target>
        </trans-unit>
        <trans-unit id="cfd2525e778d44ca48268a14e2d4009355f67534" translate="yes" xml:space="preserve">
          <source>The files in the &lt;code&gt;dist/my-project-name&lt;/code&gt; folder are static. This means you can host them on any web server capable of serving files (such as &lt;code&gt;Node.js&lt;/code&gt;, Java, .NET), or any backend (such as Firebase, Google Cloud, or App Engine).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef6eeb99c812c89811914cb86075f88c7c8f8c4" translate="yes" xml:space="preserve">
          <source>The files marked with &lt;code&gt;*&lt;/code&gt; are new and not in the original tutorial sample.</source>
          <target state="translated">标有 &lt;code&gt;*&lt;/code&gt; 的文件是新文件，不在原始教程示例中。</target>
        </trans-unit>
        <trans-unit id="4958ad54ba499fda7072a0286fdc85fb538ec9d8" translate="yes" xml:space="preserve">
          <source>The filter works in real time as you type. Elements leave the page as you type each new letter and the filter gets progressively stricter. The heroes list gradually re-enters the page as you delete each letter in the filter box.</source>
          <target state="translated">过滤器在您输入时实时工作。当你输入每一个新的字母时,元素就会离开页面,过滤器也会逐渐变得更严格。当你删除过滤框中的每个字母时,英雄列表会逐渐重新进入页面。</target>
        </trans-unit>
        <trans-unit id="f573bd26d52dc028307ae3e04564422e663eec0d" translate="yes" xml:space="preserve">
          <source>The final UI looks like this:</source>
          <target state="translated">最终的UI是这样的。</target>
        </trans-unit>
        <trans-unit id="c5b275336e85842a3e2bdbdc55d315d60de9615b" translate="yes" xml:space="preserve">
          <source>The final ad banner looks like this:</source>
          <target state="translated">最后的广告条幅是这样的。</target>
        </trans-unit>
        <trans-unit id="321d2b68064070be07256e2a5abc3418d809f653" translate="yes" xml:space="preserve">
          <source>The final form looks like this:</source>
          <target state="translated">最后的形式是这样的。</target>
        </trans-unit>
        <trans-unit id="041dc8a5f34133da31fcc036e9813dc9a7c7dd5c" translate="yes" xml:space="preserve">
          <source>The final source code follows:</source>
          <target state="translated">最后的源代码如下。</target>
        </trans-unit>
        <trans-unit id="4efdfc25a6effd16bf1e38707887ca8fdb33714e" translate="yes" xml:space="preserve">
          <source>The finished &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; looks like this:</source>
          <target state="translated">完成的 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 看起来像这样：</target>
        </trans-unit>
        <trans-unit id="56cb402b12029a303e5d291a33be2607644acc0c" translate="yes" xml:space="preserve">
          <source>The first argument is the controller name. The second argument defines the string names of all dependencies injected into this controller, and a reference to the controller function.</source>
          <target state="translated">第一个参数是控制器的名称,第二个参数定义了所有注入到这个控制器中的依赖关系的字符串名称,以及对控制器函数的引用。第二个参数定义了注入这个控制器的所有依赖关系的字符串名称,以及对控制器函数的引用。</target>
        </trans-unit>
        <trans-unit id="f9457d5b3e7c5601a8125917a5c64688ac0a8255" translate="yes" xml:space="preserve">
          <source>The first bundle contains modern ES2015 syntax, takes advantage of built-in support in modern browsers, ships less polyfills, and results in a smaller bundle size.</source>
          <target state="translated">第一个捆绑包包含了现代的ES2015语法,利用了现代浏览器的内置支持,运载了较少的polyfills,并实现了较小的捆绑包大小。</target>
        </trans-unit>
        <trans-unit id="95633f9df24fc0ecf3fe00fc31e5e62805addea1" translate="yes" xml:space="preserve">
          <source>The first bundle contains modern ES2015 syntax. This bundle takes advantage of built-in support in modern browsers, ships fewer polyfills, and results in a smaller bundle size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4b8a42566c14174c062c29a822d5296acfbeec" translate="yes" xml:space="preserve">
          <source>The first child of this route in the router state tree</source>
          <target state="translated">该路由在路由器状态树中的第一个子路由。</target>
        </trans-unit>
        <trans-unit id="0cf5b8a30d51a55deb1ed42e3408e1848f44035a" translate="yes" xml:space="preserve">
          <source>The first child of this route in the router state tree.</source>
          <target state="translated">这个路由在路由器状态树中的第一个子节点。</target>
        </trans-unit>
        <trans-unit id="cbbf9616cd583ee698811321ffe898de8bb5be2c" translate="yes" xml:space="preserve">
          <source>The first configuration defines an array of two routes with minimal paths leading to the &lt;code&gt;CrisisListComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ce335c264ff739546ba0f108b7867bf473ab4e" translate="yes" xml:space="preserve">
          <source>The first configuration defines an array of two routes with simple paths leading to the &lt;code&gt;CrisisListComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt;. Generate the &lt;code&gt;CrisisList&lt;/code&gt; and &lt;code&gt;HeroList&lt;/code&gt; components.</source>
          <target state="translated">第一个配置定义了两个路由的数组，这些路由具有通往 &lt;code&gt;CrisisListComponent&lt;/code&gt; 和 &lt;code&gt;HeroListComponent&lt;/code&gt; 的简单路径。生成 &lt;code&gt;CrisisList&lt;/code&gt; 和 &lt;code&gt;HeroList&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="fc5ab8411a999f00314640e534a4f07a7e314733" translate="yes" xml:space="preserve">
          <source>The first entry is for a schematic named &lt;code&gt;ng-add&lt;/code&gt;. It contains the description, and points to the factory function that is called when your schematic is executed.</source>
          <target state="translated">第一个条目用于名为 &lt;code&gt;ng-add&lt;/code&gt; 的示意图。它包含描述，并指向执行原理图时调用的工厂函数。</target>
        </trans-unit>
        <trans-unit id="86c941d39038cbf4e554b9137f55a474253a3b56" translate="yes" xml:space="preserve">
          <source>The first example performs the following steps to verify the view-to-model data flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c494230675324afd6a402aadf921b3773a5f5c" translate="yes" xml:space="preserve">
          <source>The first explicitly generated application goes into the &lt;code&gt;projects/&lt;/code&gt; folder along with all other projects in the workspace. Newly generated libraries are also added under &lt;code&gt;projects/&lt;/code&gt;. When you create projects this way, the file structure of the workspace is entirely consistent with the structure of the &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration file&lt;/a&gt;, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">第一个显式生成的应用程序与工作空间中的所有其他项目一起进入 &lt;code&gt;projects/&lt;/code&gt; 文件夹。新生成的库也添加在 &lt;code&gt;projects/&lt;/code&gt; 。当您创建项目，这样一来，工作区的文件结构与结构完全一致的&lt;a href=&quot;workspace-config&quot;&gt;工作空间配置文件&lt;/a&gt;， &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5daa0866ecdb0176ba5151f4125dd5f05620ba13" translate="yes" xml:space="preserve">
          <source>The first form is not actually rendered, only the finished product ends up in the DOM.</source>
          <target state="translated">第一种形式并没有实际呈现,只有成品最终会出现在DOM中。</target>
        </trans-unit>
        <trans-unit id="4f7f9d4b304e201ea1705223665d4d800899a939" translate="yes" xml:space="preserve">
          <source>The first injector configured with a provider supplies the dependency (a service instance or value) to the constructor.</source>
          <target state="translated">配置有提供者的第一个注入器向构造者提供依赖性(服务实例或值)。</target>
        </trans-unit>
        <trans-unit id="78ec94cfb431864b60956eb8b8ac569aa3b4907a" translate="yes" xml:space="preserve">
          <source>The first is a sanity test; it confirms that the stubbed &lt;code&gt;UserService&lt;/code&gt; is called and working.</source>
          <target state="translated">首先是健康测试；它确认已打桩的 &lt;code&gt;UserService&lt;/code&gt; 已正常运行。</target>
        </trans-unit>
        <trans-unit id="2fe10133ce5f0b8442b0b35164dad9dce4a33027" translate="yes" xml:space="preserve">
          <source>The first item in the array identifies the parent route (&lt;code&gt;/crisis-center&lt;/code&gt;).</source>
          <target state="translated">数组中的第一项标识父路由（ &lt;code&gt;/crisis-center&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ef2dfd24b47c1df0d44ab06dc8c75e10571cb271" translate="yes" xml:space="preserve">
          <source>The first line indicates the driver state:</source>
          <target state="translated">第一行表示驱动状态。</target>
        </trans-unit>
        <trans-unit id="6ae643662b050aa4b42fc55539a448dfb7866f94" translate="yes" xml:space="preserve">
          <source>The first parameter is &lt;code&gt;AppServerModule&lt;/code&gt;. It's the bridge between the Universal server-side renderer and the Angular application.</source>
          <target state="translated">第一个参数是 &lt;code&gt;AppServerModule&lt;/code&gt; 。它是通用服务器端渲染器和Angular应用程序之间的桥梁。</target>
        </trans-unit>
        <trans-unit id="62953bff7e26f22cabbf685caa0a5a1a6c295ca3" translate="yes" xml:space="preserve">
          <source>The first parameter is an object containing the locale data imported from &lt;code&gt;@angular/common/locales&lt;/code&gt;. By default, the imported locale data is registered with the locale id that is defined in the Angular locale data itself. If you want to register the imported locale data with another locale id, use the second parameter to specify a custom locale id. For example, Angular's locale data defines the locale id for French as &quot;fr&quot;. You can use the second parameter to associate the imported French locale data with the custom locale id &quot;fr-FR&quot; instead of &quot;fr&quot;.</source>
          <target state="translated">第一个参数是一个对象，其中包含从 &lt;code&gt;@angular/common/locales&lt;/code&gt; 导入的语言环境数据。默认情况下，导入的语言环境数据已用Angular语言环境数据本身中定义的语言环境ID注册。如果要使用其他语言环境ID注册导入的语言环境数据，请使用第二个参数指定自定义语言环境ID。例如，Angular的语言环境数据将法语的语言环境ID定义为&amp;ldquo; fr&amp;rdquo;。您可以使用第二个参数将导入的法语语言环境数据与自定义语言环境ID&amp;ldquo; fr-FR&amp;rdquo;而不是&amp;ldquo; fr&amp;rdquo;相关联。</target>
        </trans-unit>
        <trans-unit id="b4e326dc69f53ccaa57af61d7dcbe29b421b04c0" translate="yes" xml:space="preserve">
          <source>The first parameter is the &lt;em&gt;element-to-click&lt;/em&gt;. If you wish, you can pass a custom event object as the second parameter. The default is a (partial) &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button&quot;&gt;left-button mouse event object&lt;/a&gt; accepted by many handlers including the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">第一个参数是&lt;em&gt;点击元素&lt;/em&gt;。如果愿意，可以将自定义事件对象作为第二个参数传递。默认设置是许多处理程序（包括 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 指令）接受的（部分）&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button&quot;&gt;左键鼠标事件对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f3697ff5f0aeb3ecb5abdfb5882b9887cea92e64" translate="yes" xml:space="preserve">
          <source>The first parameter is the key. It is bound to the component property (&lt;code&gt;minutes&lt;/code&gt;), which determines the number of minutes.</source>
          <target state="translated">第一个参数是密钥。它绑定到确定分钟数的component属性（ &lt;code&gt;minutes&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f4f25fbb7333cd732b136fdcf04f2c24da137856" translate="yes" xml:space="preserve">
          <source>The first parameter of &lt;code&gt;&lt;a href=&quot;router#navigate&quot;&gt;navigate()&lt;/a&gt;&lt;/code&gt; is a delta to be applied to the current URL or the one provided in the &lt;code&gt;&lt;a href=&quot;navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; property of the second parameter (the &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router#navigate&quot;&gt;navigate()&lt;/a&gt;&lt;/code&gt; 的第一个参数是要应用到当前URL的增量，或者是第二个参数（ &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; ）的 &lt;code&gt;&lt;a href=&quot;navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; 属性中提供的增量。</target>
        </trans-unit>
        <trans-unit id="9345528a3c56bcfad8473c4b0ab2f6cb3a19cf3d" translate="yes" xml:space="preserve">
          <source>The first parameter, &lt;code&gt;minutes&lt;/code&gt;, is bound to the component property (&lt;code&gt;minutes&lt;/code&gt;), which determines the number of minutes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef08564247507d1853a70de3837b4de95a01686" translate="yes" xml:space="preserve">
          <source>The first part, &lt;code&gt;duration&lt;/code&gt;, is required. The duration can be expressed in milliseconds as a simple number without quotes, or in seconds with quotes and a time specifier. For example, a duration of a tenth of a second can be expressed as follows:</source>
          <target state="translated">第一部分， &lt;code&gt;duration&lt;/code&gt; ，是必需的。持续时间可以用毫秒表示为不带引号的简单数字，也可以表示为带引号和时间说明符的秒数。例如，十分之一秒的持续时间可以表示如下：</target>
        </trans-unit>
        <trans-unit id="8129f1ba089dbdcf14610c20d5972d429db07c52" translate="yes" xml:space="preserve">
          <source>The first piece you'll port over to Angular is the &lt;code&gt;Phone&lt;/code&gt; service, which resides in &lt;code&gt;app/core/phone/phone.service.ts&lt;/code&gt; and makes it possible for components to load phone information from the server. Right now it's implemented with ngResource and you're using it for two things:</source>
          <target state="translated">您将移植到Angular的第一部分是 &lt;code&gt;Phone&lt;/code&gt; 服务，该服务位于 &lt;code&gt;app/core/phone/phone.service.ts&lt;/code&gt; 中，并使组件可以从服务器加载电话信息。现在，它已通过ngResource实现，并且您将其用于两件事：</target>
        </trans-unit>
        <trans-unit id="d409bc236492541655f27b252a1ca412eb1c6dd8" translate="yes" xml:space="preserve">
          <source>The first provider is the &lt;em&gt;de-sugared&lt;/em&gt;, expanded form of the most typical case in which the class to be created (&lt;code&gt;HeroService&lt;/code&gt;) is also the provider's dependency injection token. The short form is generally preferred; this long form makes the details explicit.</source>
          <target state="translated">第一供应商是&lt;em&gt;去糖&lt;/em&gt;，放大了要创建的类的最典型的情况下（的形式 &lt;code&gt;HeroService&lt;/code&gt; ）也提供者的依赖注入令牌。通常首选简短形式；这种较长的形式使细节清晰。</target>
        </trans-unit>
        <trans-unit id="4833e5a707db3bf1798a161d416463da98bc30af" translate="yes" xml:space="preserve">
          <source>The first provides an existing instance of the &lt;code&gt;Hero&lt;/code&gt; class to use for the &lt;code&gt;Hero&lt;/code&gt; token, rather than requiring the injector to create a new instance with &lt;code&gt;new&lt;/code&gt; or use its own cached instance. Here, the token is the class itself.</source>
          <target state="translated">首先提供的现有实例 &lt;code&gt;Hero&lt;/code&gt; 类使用的 &lt;code&gt;Hero&lt;/code&gt; 令牌，而不需要喷油器来创建一个新实例， &lt;code&gt;new&lt;/code&gt; 或使用它自己的缓存实例。在这里，令牌是类本身。</target>
        </trans-unit>
        <trans-unit id="7e391d5af3994d07831d1d59d60f4b82bee03d07" translate="yes" xml:space="preserve">
          <source>The first route does the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24e841b0aac44b0fa2a6d557695a951fb865d88" translate="yes" xml:space="preserve">
          <source>The first segment name can be prepended with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;./&lt;/code&gt;, or &lt;code&gt;../&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c812f6529ca065b3990e70e2407682a3f9b80ef0" translate="yes" xml:space="preserve">
          <source>The first segment name can be prepended with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;./&lt;/code&gt;, or &lt;code&gt;../&lt;/code&gt;:</source>
          <target state="translated">第一段名称可以与前置 &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;./&lt;/code&gt; 或 &lt;code&gt;../&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="be494398bc29b0cab8b00ca0ac7181001cb339b3" translate="yes" xml:space="preserve">
          <source>The first test creates a &lt;code&gt;ValueService&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; and passes it to the &lt;code&gt;MasterService&lt;/code&gt; constructor.</source>
          <target state="translated">第一个测试使用 &lt;code&gt;new&lt;/code&gt; 创建一个 &lt;code&gt;ValueService&lt;/code&gt; ，并将其传递给 &lt;code&gt;MasterService&lt;/code&gt; 构造函数。</target>
        </trans-unit>
        <trans-unit id="e5c06683cd16e03e55d325b4c0dc8a1f41e8cc0c" translate="yes" xml:space="preserve">
          <source>The first test shows the benefit of automatic change detection.</source>
          <target state="translated">第一个测试显示了自动变化检测的好处。</target>
        </trans-unit>
        <trans-unit id="aa509a8a6923fb66806ca57c1af7a5c17aa9333e" translate="yes" xml:space="preserve">
          <source>The first two lines, with the bindings, are there from previous steps. The new parts are &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; allows you to project content, and &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; inside the &lt;code&gt;ChildComponent&lt;/code&gt; template makes the &lt;code&gt;InspectorComponent&lt;/code&gt; a child component of &lt;code&gt;ChildComponent&lt;/code&gt;.</source>
          <target state="translated">前两行带有绑定，位于之前的步骤中。新的部分是 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 让你的项目内容，以及 &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 里面 &lt;code&gt;ChildComponent&lt;/code&gt; 模板使 &lt;code&gt;InspectorComponent&lt;/code&gt; 的子组件 &lt;code&gt;ChildComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7f348f21943da7baa131bdaaaeacb38df6dc474" translate="yes" xml:space="preserve">
          <source>The first two paths are the routes to the &lt;code&gt;CustomersModule&lt;/code&gt; and the &lt;code&gt;OrdersModule&lt;/code&gt;. The final entry defines a default route. The empty path matches everything that doesn't match an earlier path.</source>
          <target state="translated">前两个路径是到 &lt;code&gt;CustomersModule&lt;/code&gt; 和 &lt;code&gt;OrdersModule&lt;/code&gt; 的路由。最后的条目定义了默认路由。空路径匹配所有与先前路径不匹配的内容。</target>
        </trans-unit>
        <trans-unit id="dc8e7d683a61ef16411f45a78aa24508cfc2fdad" translate="yes" xml:space="preserve">
          <source>The first unit contains the text that was outside of the &lt;code&gt;select&lt;/code&gt;. In place of the &lt;code&gt;select&lt;/code&gt; is a placeholder, &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt;, that represents the &lt;code&gt;select&lt;/code&gt; message. Translate the text and move around the placeholder if necessary, but don't remove it. If you remove the placeholder, the ICU expression will not be present in your translated app.</source>
          <target state="translated">第一个单元包含 &lt;code&gt;select&lt;/code&gt; 之外的文本。代替 &lt;code&gt;select&lt;/code&gt; 是占位符 &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt; ，它代表 &lt;code&gt;select&lt;/code&gt; 消息。翻译文本并在必要时在占位符附近移动，但不要删除它。如果删除占位符，则ICU表达式将不会出现在已翻译的应用程序中。</target>
        </trans-unit>
        <trans-unit id="a43bddb336b6d795fd036d0b5ceb9112cbcc9c51" translate="yes" xml:space="preserve">
          <source>The fix - hide empty details with &lt;em&gt;*ngIf&lt;/em&gt;</source>
          <target state="translated">修复-用&lt;em&gt;* ngIf&lt;/em&gt;隐藏空细节&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c4e5c41140f56ca78f4718c5d160184adeef566" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;--optimization=&quot;true&quot;&lt;/code&gt; applies to both scripts and styles. You can supply a value such as the following to apply optimization to one or the other:</source>
          <target state="translated">标志 &lt;code&gt;--optimization=&quot;true&quot;&lt;/code&gt; 适用于脚本和样式。您可以提供诸如以下的值，以将优化应用于一个或另一个：</target>
        </trans-unit>
        <trans-unit id="8cae6ccc26c43113c77ba86a6a7f857871cb6761" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;--sourceMap=&quot;true&quot;&lt;/code&gt; outputs source maps for both scripts and styles. You can configure the option to apply to one or the other. You can also choose to output hidden source maps, or resolve vendor package source maps. For example:</source>
          <target state="translated">标志 &lt;code&gt;--sourceMap=&quot;true&quot;&lt;/code&gt; 输出脚本和样式的源映射。您可以配置选项以应用于一个或另一个。您还可以选择输出隐藏的源地图，或解析供应商软件包源地图。例如：</target>
        </trans-unit>
        <trans-unit id="3f3ed63d6d77ed1a3c84fa9fd5bacb244d6a6a3c" translate="yes" xml:space="preserve">
          <source>The folllowing sections highlight some core router concepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1493706ed03721d1c78b58ccff4d87d10377338c" translate="yes" xml:space="preserve">
          <source>The follow example shows how to use radio buttons in a reactive form. When using radio buttons in a reactive form, radio buttons in the same group should have the same &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt;. Providing a &lt;code&gt;name&lt;/code&gt; attribute is optional.</source>
          <target state="translated">下面的示例演示如何以反应形式使用单选按钮。当使用反应形式的单选按钮时，同一组中的单选按钮应具有相同的 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 。提供 &lt;code&gt;name&lt;/code&gt; 属性是可选的。</target>
        </trans-unit>
        <trans-unit id="310dc1587f604138be8759e6a89d07e7cc01679f" translate="yes" xml:space="preserve">
          <source>The follow example shows you how to use a multi-select control with a reactive form.</source>
          <target state="translated">下面的例子展示了如何在反应式表单中使用多选择控件。</target>
        </trans-unit>
        <trans-unit id="8c6f2a7b56c63473c3a42c22b17753fcb52e791f" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; method reports the error and then returns an innocuous result so that the application keeps working.</source>
          <target state="translated">以下 &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; 方法报告错误，然后返回无害的结果，以便应用程序继续运行。</target>
        </trans-unit>
        <trans-unit id="785ab51680d18375d227cf4bdd9454c50b68a18c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; will be shared by many &lt;code&gt;HeroService&lt;/code&gt; methods so it's generalized to meet their different needs.</source>
          <target state="translated">下面的 &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; 将由许多 &lt;code&gt;HeroService&lt;/code&gt; 方法共享，因此可以将其通用化以满足它们的不同需求。</target>
        </trans-unit>
        <trans-unit id="9fac4999708b255d65710166eee053bb3a438369" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;ActivatedRouteStub&lt;/code&gt; class serves as a test double for &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以下 &lt;code&gt;ActivatedRouteStub&lt;/code&gt; 类用作ActivatedRoute的测试双 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e61ca55af810cb77b591c0e8d0cf9110b85b7a31" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuestionBase&lt;/code&gt; is a base class for a set of controls that can represent the question and its answer in the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b988a26abe5c751d6ffb4eba65994971ffa485" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuestionBase&lt;/code&gt; is a fundamental question class.</source>
          <target state="translated">以下 &lt;code&gt;QuestionBase&lt;/code&gt; 是基本的问题类。</target>
        </trans-unit>
        <trans-unit id="c06281078d15555932d1ae78c47b2ddcf06d4228" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;WelcomeComponent&lt;/code&gt; depends on the &lt;code&gt;UserService&lt;/code&gt; to know the name of the user to greet.</source>
          <target state="translated">下面的 &lt;code&gt;WelcomeComponent&lt;/code&gt; 取决于 &lt;code&gt;UserService&lt;/code&gt; 来知道要问候的用户名。</target>
        </trans-unit>
        <trans-unit id="f0f7c8570c75a7fbfc3c92a94edaa5d338b173de" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;devDependencies&lt;/code&gt; are provided in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">在默认的 &lt;code&gt;package.json&lt;/code&gt; 文件中为新的Angular工作区提供了以下 &lt;code&gt;devDependencies&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36e2b7d7bec0be04c77013b1d36bd5f9bd31299b" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;go()&lt;/code&gt; function navigates to the &lt;code&gt;list&lt;/code&gt; route by interpreting the destination URI as relative to the activated &lt;code&gt;child&lt;/code&gt; route</source>
          <target state="translated">下 &lt;code&gt;go()&lt;/code&gt; 函数可前往 &lt;code&gt;list&lt;/code&gt; 路线通过解释目的地URI为相对于启动 &lt;code&gt;child&lt;/code&gt; 路线</target>
        </trans-unit>
        <trans-unit id="c66deeeadbe10c60879e8a84f1e34c983c81d32e" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;handleError()&lt;/code&gt; method reports the error and then returns an innocuous result so that the application keeps working.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116cc41ee5347f1fb8e9c5ef258684090ee5b82d" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;handleError()&lt;/code&gt; will be shared by many &lt;code&gt;HeroService&lt;/code&gt; methods so it's generalized to meet their different needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a445c25398c4982342ee1c37ee98932b7260ab6" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;searchHeroes&lt;/code&gt; method queries for heroes whose names contain the search term. Start by importing &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">以下 &lt;code&gt;searchHeroes&lt;/code&gt; 方法查询名称中包含搜索词的英雄。首先导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="91fa256b1d95446c100727849d7fffe9e6eee18c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;sizerComponent&lt;/code&gt; has a &lt;code&gt;size&lt;/code&gt; value property and a &lt;code&gt;sizeChange&lt;/code&gt; event. The &lt;code&gt;size&lt;/code&gt; property is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, so data can flow into the &lt;code&gt;sizerComponent&lt;/code&gt;. The &lt;code&gt;sizeChange&lt;/code&gt; event is an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, which allows data to flow out of the &lt;code&gt;sizerComponent&lt;/code&gt; to the parent component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf12f77efe304835f70e6db2fb5c41f976783ba1" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;AfterContent&lt;/em&gt; hooks take action based on changing values in a &lt;em&gt;content child&lt;/em&gt;, which can only be reached by querying for them via the property decorated with &lt;a href=&quot;../api/core/contentchild&quot;&gt;@ContentChild&lt;/a&gt;.</source>
          <target state="translated">以下&lt;em&gt;AfterContent&lt;/em&gt;挂钩根据更改&lt;em&gt;内容子项中的&lt;/em&gt;值来执行操作，只有通过使用&lt;a href=&quot;../api/core/contentchild&quot;&gt;@ContentChild&lt;/a&gt;装饰的属性来查询它们，才能实现这些值。</target>
        </trans-unit>
        <trans-unit id="116e174584a29bb6840145432c80d1ed6f312131" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;code-example&lt;/em&gt; displays the sample's &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">下面的&lt;em&gt;代码示例&lt;/em&gt;显示示例的 &lt;code&gt;app.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ff1e333381c65ecbd5243d727c0316791951c07" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;negative&lt;/em&gt; example defines the &lt;code&gt;AppComponent&lt;/code&gt;, bootstraps the app, defines the &lt;code&gt;Hero&lt;/code&gt; model object, and loads heroes from the server all in the same file. &lt;em&gt;Don't do this&lt;/em&gt;.</source>
          <target state="translated">以下&lt;em&gt;否定&lt;/em&gt;示例定义 &lt;code&gt;AppComponent&lt;/code&gt; ，引导应用程序，定义 &lt;code&gt;Hero&lt;/code&gt; 模型对象并从服务器将英雄加载到同一文件中。&lt;em&gt;不要这样做&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f753905a9a1f06f9639773508814519f5c2d410a" translate="yes" xml:space="preserve">
          <source>The following APIs have been removed starting with version 11.0.0*:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994aa1e70e47f4c7e017a337b6ce6547e5ba554b" translate="yes" xml:space="preserve">
          <source>The following APIs have been removed starting with version 8.0.0:</source>
          <target state="translated">以下API从8.0.0版本开始被删除。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
