<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="d02e253b850f113d73bfb00512bed301e76af61e" translate="yes" xml:space="preserve">
          <source>The server (&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js Express&lt;/a&gt; in this guide's example) passes client requests for application pages to the NgUniversal &lt;code&gt;ngExpressEngine&lt;/code&gt;. Under the hood, this calls Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function, while providing caching and other helpful utilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833b0d09ecb324069b98f0951ab344fac2fef24f" translate="yes" xml:space="preserve">
          <source>The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error &lt;em&gt;responses&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91c33e79c6d8ce1f35c11a0064ccf17c1206386" translate="yes" xml:space="preserve">
          <source>The server platform that supports the runtime compiler.</source>
          <target state="translated">支持运行时编译器的服务器平台。</target>
        </trans-unit>
        <trans-unit id="fdc7974bddc4251d37c899dec154f7616873a7f7" translate="yes" xml:space="preserve">
          <source>The server should respond with a single hero rather than an array of heroes.</source>
          <target state="translated">服务器应该用单个英雄而不是一系列英雄来回应。</target>
        </trans-unit>
        <trans-unit id="eca5a8837e9ee160489059a172e9ebc977dd83cd" translate="yes" xml:space="preserve">
          <source>The server will automatically reload your browser when new files are output.</source>
          <target state="translated">当输出新文件时,服务器会自动重新加载你的浏览器。</target>
        </trans-unit>
        <trans-unit id="0d9613e884c4d7057875fd99d39be99f233ae206" translate="yes" xml:space="preserve">
          <source>The server's data API determines the shape of the JSON data. The &lt;em&gt;Tour of Heroes&lt;/em&gt; data API returns the hero data as an array.</source>
          <target state="translated">服务器的数据API确定JSON数据的形状。的&lt;em&gt;英雄的游&lt;/em&gt;数据API返回英雄数据为一个数组。</target>
        </trans-unit>
        <trans-unit id="d608ede8654d1838eb5137faa0d8ed16a87869ad" translate="yes" xml:space="preserve">
          <source>The server-rendered app still launches quickly but the full client app may take seconds to load.</source>
          <target state="translated">服务器渲染的应用仍然会快速启动,但完整的客户端应用可能需要几秒钟才能加载。</target>
        </trans-unit>
        <trans-unit id="e791eab073e4d3b4cd8bc1aca0e02dd44233a6e7" translate="yes" xml:space="preserve">
          <source>The service can be instantiated by configuring a factory function, as in the following example.</source>
          <target state="translated">可以通过配置工厂函数来实例化该服务,如下例所示。</target>
        </trans-unit>
        <trans-unit id="b01cb6b08662ccfbcebed41545cd05a24d2577c4" translate="yes" xml:space="preserve">
          <source>The service exposes its cache of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; and two methods: one to &lt;code&gt;add()&lt;/code&gt; a message to the cache and another to &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; the cache.</source>
          <target state="translated">该服务公开其 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; 缓存和两种方法：一种 &lt;code&gt;add()&lt;/code&gt; 消息添加（）添加到缓存，另一种方法 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; 缓存。</target>
        </trans-unit>
        <trans-unit id="e6443c7850c012b2c10c16adbba71b75368fdc4f" translate="yes" xml:space="preserve">
          <source>The service exposes its cache of &lt;code&gt;messages&lt;/code&gt; and two methods: one to &lt;code&gt;add()&lt;/code&gt; a message to the cache and another to &lt;code&gt;clear()&lt;/code&gt; the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbb599e20de587b80201a2202b3533ea4c17924" translate="yes" xml:space="preserve">
          <source>The service itself is a class that the CLI generated and that's decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;. By default, this decorator has a &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property, which creates a provider for the service. In this case, &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; specifies that Angular should provide the service in the root injector.</source>
          <target state="translated">服务本身是CLI生成的类，并用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰。默认情况下，这个装饰有 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 属性，它会为服务提供商。在这种情况下， &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; 指定Angular应该在根注入器中提供服务。</target>
        </trans-unit>
        <trans-unit id="1eb2341b2a56fcef48a10982c82e78d778efcf41" translate="yes" xml:space="preserve">
          <source>The service itself is a class that the CLI generated and that's decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;. By default, this decorator has a &lt;code&gt;providedIn&lt;/code&gt; property, which creates a provider for the service. In this case, &lt;code&gt;providedIn: 'root'&lt;/code&gt; specifies that Angular should provide the service in the root injector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d86534f286c4014047b48e39157c9ac642d3f4" translate="yes" xml:space="preserve">
          <source>The service provided by the root &lt;code&gt;AppModule&lt;/code&gt; takes precedence over services provided by imported NgModules. The &lt;code&gt;AppModule&lt;/code&gt; always wins.</source>
          <target state="translated">根 &lt;code&gt;AppModule&lt;/code&gt; 提供的服务优先于导入的NgModules提供的服务。该 &lt;code&gt;AppModule&lt;/code&gt; 总是获胜。</target>
        </trans-unit>
        <trans-unit id="e4c344300d7fd4d9f966ba1a8642b3e11076118a" translate="yes" xml:space="preserve">
          <source>The service uses the &lt;code&gt;import()&lt;/code&gt; method to load your bundled AngularJS application lazily. This decreases the initial bundle size of your application as you're not loading code your user doesn't need yet. You also need to provide a way to &lt;em&gt;bootstrap&lt;/em&gt; the application manually after it has been loaded. AngularJS provides a way to manually bootstrap an application using the &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap()&lt;/a&gt; method with a provided HTML element. Your AngularJS app should also expose a &lt;code&gt;bootstrap&lt;/code&gt; method that bootstraps the AngularJS app.</source>
          <target state="translated">该服务使用 &lt;code&gt;import()&lt;/code&gt; 方法来延迟加载捆绑的AngularJS应用程序。这将减小应用程序的初始捆绑包大小，因为您不需要加载用户不需要的代码。您还需要提供一种在应用程序加载后手动对其进行&lt;em&gt;引导&lt;/em&gt;的方法。AngularJS提供了一种使用&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap（）&lt;/a&gt;方法和提供的HTML元素手动引导应用程序的方法。您的AngularJS应用程序还应该公开 &lt;code&gt;bootstrap&lt;/code&gt; ，该方法会引导AngularJS应用程序。</target>
        </trans-unit>
        <trans-unit id="dc4b5f46b09780ea494a593541c8cc9fef7174dd" translate="yes" xml:space="preserve">
          <source>The service worker conserves bandwidth when possible. Resources are only downloaded if they've changed.</source>
          <target state="translated">服务人员尽可能节约带宽。只有在资源发生变化时才会下载。</target>
        </trans-unit>
        <trans-unit id="73a76971f818809f629500d6b5210621468c33c3" translate="yes" xml:space="preserve">
          <source>The service worker installed the updated version of your app &lt;em&gt;in the background&lt;/em&gt;, and the next time the page is loaded or reloaded, the service worker switches to the latest version.</source>
          <target state="translated">服务人员&lt;em&gt;在后台&lt;/em&gt;安装了应用程序的更新版本，下次加载或重新加载页面时，服务人员将切换到最新版本。</target>
        </trans-unit>
        <trans-unit id="e5e8a28aed57347d4280ded734f47df1ae665528" translate="yes" xml:space="preserve">
          <source>The service worker is unable to find the asset in the cache (remember that the browser evicted it). Nor is it able to retrieve it from the server (since the server now only has &lt;code&gt;lazy-chunk.&amp;lt;lazy-hash-2&amp;gt;.js&lt;/code&gt; from the newer version).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0df69a7bfbd6545911d095948cf97558edba0d" translate="yes" xml:space="preserve">
          <source>The set of NgModules whose exported &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt; are available to templates in this module.</source>
          <target state="translated">这组NgModules其出口的&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt;可用于该模块中的模板。</target>
        </trans-unit>
        <trans-unit id="abd06758e4687a7c44919fabc0c064aac2354cc2" translate="yes" xml:space="preserve">
          <source>The set of components that are bootstrapped when this module is bootstrapped. The components listed here are automatically added to &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">引导此模块时引导的一组组件。此处列出的组件会自动添加到 &lt;code&gt;entryComponents&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="32d438c2e575af5904ec9ce7fda3a5333ad0ee04" translate="yes" xml:space="preserve">
          <source>The set of components to compile when this NgModule is defined, so that they can be dynamically loaded into the view.</source>
          <target state="translated">当定义这个NgModule时,要编译的组件集,以便它们可以动态地加载到视图中。</target>
        </trans-unit>
        <trans-unit id="5fb26e057f395ff1c2bbe69c4c8605bab3259d00" translate="yes" xml:space="preserve">
          <source>The set of components, directives, and pipes (&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt;) that belong to this module.</source>
          <target state="translated">属于此模块的&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;一组组&lt;/a&gt;件，指令和管道（可声明）。</target>
        </trans-unit>
        <trans-unit id="7b2caf88051dc93e4146531fb1b86232037cd52e" translate="yes" xml:space="preserve">
          <source>The set of components, directives, and pipes declared in this NgModule that can be used in the template of any component that is part of an NgModule that imports this NgModule. Exported declarations are the module's public API.</source>
          <target state="translated">在这个NgModule中声明的组件、指令和管道的集合,这些组件可以用于导入这个NgModule的NgModule的任何组件的模板中。导出的声明是该模块的公共API。</target>
        </trans-unit>
        <trans-unit id="0c259b27e27fec00cdb957688cd4f00e39150e77" translate="yes" xml:space="preserve">
          <source>The set of injectable objects that are available in the injector of this module.</source>
          <target state="translated">本模块的注入器中可用的一组注入对象。</target>
        </trans-unit>
        <trans-unit id="d5765ec9ddf94071c5020c93344913452a009948" translate="yes" xml:space="preserve">
          <source>The set of questions you've defined for the job application is returned from the &lt;code&gt;QuestionService&lt;/code&gt;. In a real app you'd retrieve these questions from storage.</source>
          <target state="translated">您为求职申请定义的问题集是从 &lt;code&gt;QuestionService&lt;/code&gt; 返回的。在真实的应用程序中，您将从存储中检索这些问题。</target>
        </trans-unit>
        <trans-unit id="21e915a97b647841a3c77d6bb5bc493db4e59530" translate="yes" xml:space="preserve">
          <source>The set of schemas that declare elements to be allowed in the NgModule. Elements and properties that are neither Angular components nor directives must be declared in a schema.</source>
          <target state="translated">声明NgModule中允许使用的元素的模式集。既不是Angular组件也不是指令的元素和属性必须在模式中声明。</target>
        </trans-unit>
        <trans-unit id="f833bd6b1e79171a431acd5cc244779fb79402e4" translate="yes" xml:space="preserve">
          <source>The set of selectors that are available to a template include those declared here, and those that are exported from imported NgModules.</source>
          <target state="translated">模板可使用的选择器集合包括这里声明的选择器和从导入的NgModules中导出的选择器。</target>
        </trans-unit>
        <trans-unit id="b6a30893f8633b1e28a52635e18ed8118090a942" translate="yes" xml:space="preserve">
          <source>The setter of the &lt;code&gt;name&lt;/code&gt; input property in the child &lt;code&gt;NameChildComponent&lt;/code&gt; trims the whitespace from a name and replaces an empty value with default text.</source>
          <target state="translated">子项 &lt;code&gt;NameChildComponent&lt;/code&gt; 中的 &lt;code&gt;name&lt;/code&gt; 输入属性的设置程序将名称中的空格修剪掉，并将空值替换为默认文本。</target>
        </trans-unit>
        <trans-unit id="882e77e815d86faba535964e8ae6e6a1f26ffa49" translate="yes" xml:space="preserve">
          <source>The setup for the &lt;em&gt;test-host&lt;/em&gt; tests is similar to the setup for the stand-alone tests:</source>
          <target state="translated">对于安装&lt;em&gt;测试主机&lt;/em&gt;测试类似于设置了独立的测试：</target>
        </trans-unit>
        <trans-unit id="52f4e19d49b1e5a67a00d5af99c62cbc1c7875a5" translate="yes" xml:space="preserve">
          <source>The shadow-dom-piercing descendant combinator is deprecated and support is being &lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;removed from major browsers and tools&lt;/a&gt;. As such, in v4 we deprecated support in Angular for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;. Until removal, &lt;code&gt;::ng-deep&lt;/code&gt; is preferred for broader compatibility with the tools.</source>
          <target state="translated">弃用了影子穹顶后代组合&lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;器，并且从主要的浏览器和工具中删除了&lt;/a&gt;支持。因此，在v4中，我们弃用了Angular对 &lt;code&gt;/deep/&lt;/code&gt; ， &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;::ng-deep&lt;/code&gt; 的全部3种支持。在删除之前，首选 &lt;code&gt;::ng-deep&lt;/code&gt; 以获得与工具的广泛兼容性。</target>
        </trans-unit>
        <trans-unit id="e4af087be2847b1c9f00ac636a9cf97937c7f75f" translate="yes" xml:space="preserve">
          <source>The shadow-piercing descendant combinator is deprecated and &lt;a href=&quot;https://www.chromestatus.com/feature/6750456638341120&quot;&gt;support is being removed from major browsers&lt;/a&gt; and tools. As such we plan to drop support in Angular (for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;). Until then &lt;code&gt;::ng-deep&lt;/code&gt; should be preferred for a broader compatibility with the tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b9108143779ec04ceb04bcde0783f4eb419bdf" translate="yes" xml:space="preserve">
          <source>The shadow-piercing descendant combinator is deprecated and &lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;support is being removed from major browsers&lt;/a&gt; and tools. As such we plan to drop support in Angular (for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;). Until then &lt;code&gt;::ng-deep&lt;/code&gt; should be preferred for a broader compatibility with the tools.</source>
          <target state="translated">不推荐使用穿刺阴影的后代组合&lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;器，&lt;/a&gt;并且从主要的浏览器和工具中删除了对它的支持。因此，我们计划放弃对Angular的支持（针对 &lt;code&gt;/deep/&lt;/code&gt; ， &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;::ng-deep&lt;/code&gt; 的全部3个）。在此之前，应首选 &lt;code&gt;::ng-deep&lt;/code&gt; 以获得与工具的广泛兼容性。</target>
        </trans-unit>
        <trans-unit id="d1572bbd4b2543d39de382abeaa39b959a062225" translate="yes" xml:space="preserve">
          <source>The shim first loads the SystemJS configuration, then Angular's test support libraries, and then the application's spec files themselves.</source>
          <target state="translated">shim首先加载SystemJS配置,然后加载Angular的测试支持库,再加载应用程序本身的规范文件。</target>
        </trans-unit>
        <trans-unit id="d9c0ff4882b7ddca991893d98816e7055727d7c4" translate="yes" xml:space="preserve">
          <source>The shorthand form expands into a long form that uses the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; selector on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element. The content of the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element that held the short-form directive.</source>
          <target state="translated">简写形式扩展为使用 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素上的 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 选择器的长形式。所述的含量 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素是 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素保持的短形式的指令。</target>
        </trans-unit>
        <trans-unit id="553922474ce1ca6a6f30eca0ff378d2e094bbbe1" translate="yes" xml:space="preserve">
          <source>The shorthand syntax &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; expands into two separate template specifications for the &quot;then&quot; and &quot;else&quot; clauses. For example, consider the following shorthand statement, that is meant to show a loading page while waiting for data to be loaded.</source>
          <target state="translated">缩写语法 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 扩展为&amp;ldquo; then&amp;rdquo;和&amp;ldquo; else&amp;rdquo;子句的两个单独的模板规范。例如，考虑以下速记语句，该语句用于在等待数据加载时显示加载页面。</target>
        </trans-unit>
        <trans-unit id="1c97c8ccbdc799a2ca76696b4e244bd5effa4af9" translate="yes" xml:space="preserve">
          <source>The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153a8913765ac20b181614adc3911db7022d20a6" translate="yes" xml:space="preserve">
          <source>The single parameter accepted is an initialization hash. Any properties of the response passed there will override the default values.</source>
          <target state="translated">接受的单一参数是一个初始化哈希。响应的任何属性将覆盖默认值。</target>
        </trans-unit>
        <trans-unit id="7ae02ec48c2aa6b29e8bf62369aed78347f97d35" translate="yes" xml:space="preserve">
          <source>The smallest grouping of display elements that can be created and destroyed together. Angular renders a view under the control of one or more &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, especially &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; directives and their companion &lt;a href=&quot;glossary#template&quot;&gt;templates&lt;/a&gt;.</source>
          <target state="translated">可以一起创建和销毁的显示元素的最小组合。Angular在一个或多个&lt;a href=&quot;glossary#directive&quot;&gt;指令&lt;/a&gt;（尤其是&lt;a href=&quot;glossary#component&quot;&gt;组件&lt;/a&gt;指令及其配套&lt;a href=&quot;glossary#template&quot;&gt;模板）&lt;/a&gt;的控制下渲染视图。</target>
        </trans-unit>
        <trans-unit id="dd8270c38ce691281c77b7ee88227b5e7764e526" translate="yes" xml:space="preserve">
          <source>The smallest grouping of display elements that can be created and destroyed together. Angular renders a view under the control of one or more &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd28324682f0c17450b3cf5ed2f78e84c835aa30" translate="yes" xml:space="preserve">
          <source>The sneaky spy directive is simple, consisting almost entirely of &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; hooks that log messages to the parent via an injected &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; 间谍指令很简单，几乎完全由ngOnInit（）和 &lt;code&gt;ngOnDestroy()&lt;/code&gt; 挂钩组成，它们通过注入的 &lt;code&gt;LoggerService&lt;/code&gt; 将消息记录到父级。</target>
        </trans-unit>
        <trans-unit id="a51977b23bb7ecc232209e8d1327212e8a3ebfb7" translate="yes" xml:space="preserve">
          <source>The source code for this tutorial and the complete &lt;em&gt;Tour of Heroes&lt;/em&gt; global styles are available in the live example.</source>
          <target state="translated">该示例的源代码和完整的&lt;em&gt;Tour of Heroes&lt;/em&gt;全局样式在实时示例中可用。</target>
        </trans-unit>
        <trans-unit id="197396630d371033ea63576d710b5005e3bd9ab9" translate="yes" xml:space="preserve">
          <source>The source component's injector.</source>
          <target state="translated">源组件的喷射器。</target>
        </trans-unit>
        <trans-unit id="26d4b7c388a1bdb518c645561859bb64e0fbf361" translate="yes" xml:space="preserve">
          <source>The source of truth provides the value and status of the form element at a given point in time. In reactive forms, the form model is the source of truth. In the example above, the form model is the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">真理的来源提供了表单元素在给定时间点的价值和地位。在反应形式中，形式模型是真理的源头。在上面的示例中，表单模型是 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="711481c7ae759061bd5e4428a64fc27d4832dd02" translate="yes" xml:space="preserve">
          <source>The spy is designed such that any call to &lt;code&gt;getQuote&lt;/code&gt; receives an observable with a test quote. Unlike the real &lt;code&gt;getQuote()&lt;/code&gt; method, this spy bypasses the server and returns a synchronous observable whose value is available immediately.</source>
          <target state="translated">间谍的设计使得对 &lt;code&gt;getQuote&lt;/code&gt; 的任何调用都会收到带有测试引号的可观察对象。与真正的 &lt;code&gt;getQuote()&lt;/code&gt; 方法不同，此间谍程序绕过服务器并返回一个同步observable，其值立即可用。</target>
        </trans-unit>
        <trans-unit id="90b43b9097739862d0cb30d76b768225cec8d2a5" translate="yes" xml:space="preserve">
          <source>The starter app's structure looks like this:</source>
          <target state="translated">启动程序的结构是这样的。</target>
        </trans-unit>
        <trans-unit id="8fa84009f343b37f2c309935ebef67d3cf1bb17d" translate="yes" xml:space="preserve">
          <source>The state name, unique within the component.</source>
          <target state="translated">国家名称,在组件中是唯一的。</target>
        </trans-unit>
        <trans-unit id="8ba0f66a562868f6f0949ad17ceaa5aa9040735a" translate="yes" xml:space="preserve">
          <source>The state object is defined by &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;, and contains any developer-defined state value, as well as a unique ID that the router assigns to every router transition/navigation.</source>
          <target state="translated">状态对象由 &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; 定义，并且包含任何开发人员定义的状态值以及路由器分配给每个路由器转换/导航的唯一ID。</target>
        </trans-unit>
        <trans-unit id="94da77aa1c11c6ad0070c12223f965f714061382" translate="yes" xml:space="preserve">
          <source>The statement context may also refer to properties of the template's own context. In the following example, the component's event handling method, &lt;code&gt;onSave()&lt;/code&gt; takes the template's own &lt;code&gt;$event&lt;/code&gt; object as an argument. On the next two lines, the &lt;code&gt;deleteHero()&lt;/code&gt; method takes a &lt;a href=&quot;built-in-directives#template-input-variable&quot;&gt;template input variable&lt;/a&gt;, &lt;code&gt;hero&lt;/code&gt;, and &lt;code&gt;onSubmit()&lt;/code&gt; takes a &lt;a href=&quot;template-reference-variables&quot;&gt;template reference variable&lt;/a&gt;, &lt;code&gt;#heroForm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29682628931d961e1dc643e174f6cb46d55f3a40" translate="yes" xml:space="preserve">
          <source>The statement context may also refer to properties of the template's own context. In the following examples, the template &lt;code&gt;$event&lt;/code&gt; object, a &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;template input variable&lt;/a&gt; (&lt;code&gt;let hero&lt;/code&gt;), and a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt; (&lt;code&gt;#heroForm&lt;/code&gt;) are passed to an event handling method of the component.</source>
          <target state="translated">语句上下文还可以引用模板自身上下文的属性。在以下示例中，模板 &lt;code&gt;$event&lt;/code&gt; 对象，&lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;模板输入变量&lt;/a&gt;（ &lt;code&gt;let hero&lt;/code&gt; ）和&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;模板引用变量&lt;/a&gt;（ &lt;code&gt;#heroForm&lt;/code&gt; ）被传递到组件的事件处理方法。</target>
        </trans-unit>
        <trans-unit id="ee7031536fc9f3201d33e673cc50dc352588d037" translate="yes" xml:space="preserve">
          <source>The static and resolved data of this route</source>
          <target state="translated">该途径的静态和解析数据</target>
        </trans-unit>
        <trans-unit id="6079268a1495ab3832f3c122c48c8debcb04466b" translate="yes" xml:space="preserve">
          <source>The steps are the same as using the &lt;code&gt;providers&lt;/code&gt; array, with the exception of using the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array instead.</source>
          <target state="translated">除了使用 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 数组外，其他步骤与使用 &lt;code&gt;providers&lt;/code&gt; 数组相同。</target>
        </trans-unit>
        <trans-unit id="cebfcbb525983dfc838b3ae9b82235f2b846443b" translate="yes" xml:space="preserve">
          <source>The steps are the same as using the &lt;code&gt;providers&lt;/code&gt; array, with the exception of using the &lt;code&gt;viewProviders&lt;/code&gt; array instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7019f7ed50fbce076b2ffcd0fd378bb53f9230fa" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from model to view when the &lt;code&gt;favoriteColor&lt;/code&gt; changes from &lt;em&gt;Blue&lt;/em&gt; to &lt;em&gt;Red&lt;/em&gt;.</source>
          <target state="translated">当 &lt;code&gt;favoriteColor&lt;/code&gt; 从&lt;em&gt;Blue&lt;/em&gt;变为&lt;em&gt;Red&lt;/em&gt;时，以下步骤概述了从模型到视图的数据流。</target>
        </trans-unit>
        <trans-unit id="8f083b699a0e24cfb31552a7c5515dedc3bffa68" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from model to view.</source>
          <target state="translated">下面的步骤概述了从模型到视图的数据流。</target>
        </trans-unit>
        <trans-unit id="d6d931d512cd5180e215ff2bd54df9514cdbd37a" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from view to model when the input value changes from &lt;em&gt;Red&lt;/em&gt; to &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">当输入值从&lt;em&gt;红色&lt;/em&gt;变为&lt;em&gt;蓝色&lt;/em&gt;时，以下步骤概述了从视图到模型的数据流。</target>
        </trans-unit>
        <trans-unit id="cf66d9ec419458eca31557b6784e06c3d74c7302" translate="yes" xml:space="preserve">
          <source>The steps below outline the data flow from view to model.</source>
          <target state="translated">下面的步骤概述了从视图到模型的数据流。</target>
        </trans-unit>
        <trans-unit id="93bcd38a5f62ce5f433e4b3619e142ff10dbf2d5" translate="yes" xml:space="preserve">
          <source>The steps below show you how to do the following:</source>
          <target state="translated">下面的步骤告诉你如何进行以下操作。</target>
        </trans-unit>
        <trans-unit id="b62b2ca3bd1da7bcd7ed67d55220aa0c687e3b42" translate="yes" xml:space="preserve">
          <source>The strategy that controls how a component is transformed in a custom element.</source>
          <target state="translated">控制自定义元素中组件如何转换的策略。</target>
        </trans-unit>
        <trans-unit id="930fe4769070145b5d1902f6b39df80e384668cc" translate="yes" xml:space="preserve">
          <source>The strategy that the default change detector uses to detect changes. When set, takes effect the next time change detection is triggered.</source>
          <target state="translated">默认的变更检测器用来检测变更的策略。设置后,在下次触发变更检测时生效。</target>
        </trans-unit>
        <trans-unit id="bf8be7fcf53ea5a196bf46985745bd43109fefe5" translate="yes" xml:space="preserve">
          <source>The strict checks of the &lt;code&gt;setValue()&lt;/code&gt; method help catch nesting errors in complex forms, while &lt;code&gt;patchValue()&lt;/code&gt; fails silently on those errors.</source>
          <target state="translated">对 &lt;code&gt;setValue()&lt;/code&gt; 方法的严格检查有助于捕获复杂形式的嵌套错误，而 &lt;code&gt;patchValue()&lt;/code&gt; 在这些错误上会静默失败。</target>
        </trans-unit>
        <trans-unit id="6a9ea9c73e5951ca219b42e33dc1405dd30050db" translate="yes" xml:space="preserve">
          <source>The string assigned to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is not a &lt;a href=&quot;interpolation&quot;&gt;template expression&lt;/a&gt;. Rather, it's a &lt;em&gt;microsyntax&lt;/em&gt;&amp;mdash;a little language of its own that Angular interprets. The string &lt;code&gt;&quot;let item of items&quot;&lt;/code&gt; means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372bafa1bce494ea990979dd34c53dd96c7cc2ca" translate="yes" xml:space="preserve">
          <source>The string assigned to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is not a &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expression&lt;/a&gt;. Rather, it's a &lt;em&gt;microsyntax&lt;/em&gt;&amp;mdash;a little language of its own that Angular interprets. The string &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; means:</source>
          <target state="translated">分配给 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 的字符串不是&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;模板表达式&lt;/a&gt;。而是一个&lt;em&gt;微&lt;/em&gt;语法-Angular解释的一种自己的语言。字符串 &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; 意思是：</target>
        </trans-unit>
        <trans-unit id="e44daa65c98054f261ccfa5f7cf11e49ee653d27" translate="yes" xml:space="preserve">
          <source>The string form of &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; is deprecated (see &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt;). The function form (&lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt;) should be used instead.</source>
          <target state="translated">不推荐使用 &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; 的字符串形式（请参见 &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt; ）。应该改用函数形式（ &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c5e2186518aafc34e0de597f98ce5a35b638ef12" translate="yes" xml:space="preserve">
          <source>The string is a fixed value that you can put directly into the template.</source>
          <target state="translated">该字符串是一个固定的值,你可以直接放入模板中。</target>
        </trans-unit>
        <trans-unit id="ee37f1eaca83dd9bb097b5466bff65a943fac485" translate="yes" xml:space="preserve">
          <source>The string to transform to lower case.</source>
          <target state="translated">要转换为小写的字符串。</target>
        </trans-unit>
        <trans-unit id="cb45bf71782ca8d0a97a51a6af91cbb4a490dedc" translate="yes" xml:space="preserve">
          <source>The string to transform to title case.</source>
          <target state="translated">要转换为标题大小写的字符串。</target>
        </trans-unit>
        <trans-unit id="417a5ce2ca98d102c22ce8871b11edab28c7f8e7" translate="yes" xml:space="preserve">
          <source>The string to transform to upper case.</source>
          <target state="translated">要转换为大写的字符串。</target>
        </trans-unit>
        <trans-unit id="79bdda991ab152b790e3070b35eb8fda7e4c2b45" translate="yes" xml:space="preserve">
          <source>The structure of an NgModule is the same whether it is a root module or a feature module. In the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which, like the root module, lets you use the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator; the second imports &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;, which contributes many common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. Feature modules import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is only imported once in the root module. &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; only contains information for common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; which are needed in most templates, whereas &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; configures the Angular app for the browser which needs to be done only once.</source>
          <target state="translated">NgModule的结构是根模块还是功能模块都是相同的。在CLI生成的功能模块中，文件顶部有两个JavaScript导入语句：第一个导入 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ，与根模块一样，它允许您使用 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器。第二个导入 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; ，它贡献了许多常见的指令，例如 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 。功能模块导入 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 而不是 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ，后者仅在根模块中导入一次。 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 仅包含有关通用指令（例如 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; )的信息大多数模板都需要使用这些功能，而 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 为浏览器配置Angular应用，只需执行一次即可。</target>
        </trans-unit>
        <trans-unit id="de78df528fc5f787d89545140bece8187c6b8538" translate="yes" xml:space="preserve">
          <source>The stub selectors match the selectors for the corresponding real components. But their templates and classes are empty.</source>
          <target state="translated">存根选择器与相应真实组件的选择器相匹配。但它们的模板和类是空的。</target>
        </trans-unit>
        <trans-unit id="a2d59788c70b71518e84d399dc1f8c1b1995a79e" translate="yes" xml:space="preserve">
          <source>The styles specified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata &lt;em&gt;apply only within the template of that component&lt;/em&gt;.</source>
          <target state="translated">在指定的款式 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 的元数据&lt;em&gt;仅在该组件的应用模板&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f48dea481324aa0b7a7a250484ea3649910069fd" translate="yes" xml:space="preserve">
          <source>The suggested polyfills are the ones that run full Angular applications. You may need additional polyfills to support features not covered by this list. Note that polyfills cannot magically transform an old, slow browser into a modern, fast one.</source>
          <target state="translated">建议的polyfills是那些可以运行完整的Angular应用的polyfills。你可能需要额外的polyfills来支持这个列表中没有涵盖的功能。请注意,polyfills不能神奇地将老旧、缓慢的浏览器转变为现代、快速的浏览器。</target>
        </trans-unit>
        <trans-unit id="629cf41ae2bb443d131c775aab136684c9761d9b" translate="yes" xml:space="preserve">
          <source>The switch directives are particularly useful for adding and removing &lt;em&gt;component elements&lt;/em&gt;. This example switches among four &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; components defined in the &lt;code&gt;item-switch.components.ts&lt;/code&gt; file. Each component has an &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input property&lt;/a&gt; which is bound to the &lt;code&gt;currentItem&lt;/code&gt; of the parent component.</source>
          <target state="translated">switch指令对于添加和删除&lt;em&gt;组件元素&lt;/em&gt;特别有用。本示例在 &lt;code&gt;item-switch.components.ts&lt;/code&gt; 文件中定义的四个 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 组件之间切换。每个组件都有一个 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;输入属性&lt;/a&gt;，该属性绑定到父组件的 &lt;code&gt;currentItem&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a89ade83ec04e3798353f8fcdcde955060d9b066" translate="yes" xml:space="preserve">
          <source>The switch directives are particularly useful for adding and removing &lt;em&gt;component elements&lt;/em&gt;. This example switches among four &lt;code&gt;item&lt;/code&gt; components defined in the &lt;code&gt;item-switch.components.ts&lt;/code&gt; file. Each component has an &lt;code&gt;item&lt;/code&gt;&lt;a href=&quot;inputs-outputs#input&quot;&gt;input property&lt;/a&gt; which is bound to the &lt;code&gt;currentItem&lt;/code&gt; of the parent component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1898cd24b327b717bb4aef090ad4e9542fafed" translate="yes" xml:space="preserve">
          <source>The switch from the &lt;em&gt;local variable&lt;/em&gt; to the &lt;em&gt;ViewChild&lt;/em&gt; technique is solely for the purpose of demonstration.</source>
          <target state="translated">从&lt;em&gt;局部变量&lt;/em&gt;切换到&lt;em&gt;ViewChild&lt;/em&gt;技术仅用于演示目的。</target>
        </trans-unit>
        <trans-unit id="40988748687c9ee6daa755f997551a5b4a1441e8" translate="yes" xml:space="preserve">
          <source>The switch value assigned to &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;hero.emotion&lt;/code&gt;) determines which (if any) of the switch cases are displayed.</source>
          <target state="translated">分配给 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; 的开关值（ &lt;code&gt;hero.emotion&lt;/code&gt; ）确定显示哪些开关盒（如果有）。</target>
        </trans-unit>
        <trans-unit id="9a62c528f0a931f89b2287d8a503aed1f8009829" translate="yes" xml:space="preserve">
          <source>The symbol to localize.</source>
          <target state="translated">要本地化的符号。</target>
        </trans-unit>
        <trans-unit id="4ed679bf2daa47968c73d3b3701e2547464b78f8" translate="yes" xml:space="preserve">
          <source>The synchronous &lt;em&gt;beforeEach&lt;/em&gt;</source>
          <target state="translated">同步&lt;em&gt;之前&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abbd548fb3da1a05f8609c8a3757af73c0e7704c" translate="yes" xml:space="preserve">
          <source>The synchronous validators registered with this group.</source>
          <target state="translated">在该组注册的同步验证器。</target>
        </trans-unit>
        <trans-unit id="d372dcb466775574685c3fae862c265b2b17aef2" translate="yes" xml:space="preserve">
          <source>The syntax in this example is as follows:</source>
          <target state="translated">本例中的语法如下。</target>
        </trans-unit>
        <trans-unit id="7e8b4d98df92da09eb34184a7a9efa8bfa65588d" translate="yes" xml:space="preserve">
          <source>The syntax may seem strange to you but users are unlikely to notice or care as long as the URL can be emailed and pasted into a browser address bar as this one can.</source>
          <target state="translated">这个语法在你看来可能很奇怪,但只要这个URL可以像这个一样通过电子邮件和粘贴到浏览器地址栏中,用户就不太可能注意到或在意。</target>
        </trans-unit>
        <trans-unit id="5f242d259e92ca5a53c10705d273887b830471cd" translate="yes" xml:space="preserve">
          <source>The table below summarizes the key differences between reactive and template-driven forms.</source>
          <target state="translated">下表总结了反应式表单和模板驱动式表单的主要区别。</target>
        </trans-unit>
        <trans-unit id="3c4e7caf543ca7199e467fdb0d9c36eb0a217ab0" translate="yes" xml:space="preserve">
          <source>The tabs in the following example demonstrates toggling between two different formats (&lt;code&gt;'shortDate'&lt;/code&gt; and &lt;code&gt;'fullDate'&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220ad8eac98ea25feaee853e9a31ab932f922b98" translate="yes" xml:space="preserve">
          <source>The tag attribute and value to match against, in the format &lt;code&gt;&quot;tag_attribute='value string'&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90e8518f65ddbaf9cd91f81cdabaaf8afb11625" translate="yes" xml:space="preserve">
          <source>The tag definition to match against to identify an existing tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe05f51b185acbf840147ce35d32d01c530d4c8" translate="yes" xml:space="preserve">
          <source>The tag description with which to replace the existing tag content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08365a3c201aa0c652bb798a6188518150b14a2a" translate="yes" xml:space="preserve">
          <source>The target event determines the shape of the &lt;code&gt;$event&lt;/code&gt; object. If the target event is a native DOM element event, then &lt;code&gt;$event&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event object&lt;/a&gt;, with properties such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;target.value&lt;/code&gt;.</source>
          <target state="translated">目标事件确定 &lt;code&gt;$event&lt;/code&gt; 对象的形状。如果目标事件是本机DOM元素事件，则 &lt;code&gt;$event&lt;/code&gt; 是具有诸如 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;target.value&lt;/code&gt; 之类的属性的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM事件对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="204c978751f63d09d4d7fdfadbc1e4791b804461" translate="yes" xml:space="preserve">
          <source>The target event determines the shape of the &lt;code&gt;$event&lt;/code&gt; object. If the target event is a native DOM element event, then &lt;code&gt;$event&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event object&lt;/a&gt;, with properties such as &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;target.value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088749979b09bfd46d68e94f37fbfac7f9f02497" translate="yes" xml:space="preserve">
          <source>The target in the square brackets, &lt;code&gt;[]&lt;/code&gt;, is the property you decorate with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component. The binding source, the part to the right of the equal sign, is the data that the parent component passes to the nested component.</source>
          <target state="translated">方括号 &lt;code&gt;[]&lt;/code&gt; 中的目标是您在子组件中使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰的属性。绑定源（等号右边的部分）是父组件传递给嵌套组件的数据。</target>
        </trans-unit>
        <trans-unit id="ea8a5033f54ae9c4081d5ab74a38829cd1975b5f" translate="yes" xml:space="preserve">
          <source>The target named &quot;touch&quot; uses our builder, which we published to &lt;code&gt;@example/command-runner&lt;/code&gt;. (See &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;)</source>
          <target state="translated">目标名为&amp;ldquo; touch&amp;rdquo;的目标使用我们的构建器，该构建器已发布到 &lt;code&gt;@example/command-runner&lt;/code&gt; 。（请参阅&lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;发布库&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="83189c190de1ae321a2890e3cde83b83c7039a71" translate="yes" xml:space="preserve">
          <source>The target property accepts a string value.</source>
          <target state="translated">目标属性接受一个字符串值。</target>
        </trans-unit>
        <trans-unit id="9803929ad21484881b4d3f6acabd34faf9ef3af2" translate="yes" xml:space="preserve">
          <source>The target to apply service worker to.</source>
          <target state="translated">申请服务人员的对象。</target>
        </trans-unit>
        <trans-unit id="758b33e79798a18b4b5d7ce28a40f40423430f66" translate="yes" xml:space="preserve">
          <source>The target to apply web worker to.</source>
          <target state="translated">要应用web worker的目标。</target>
        </trans-unit>
        <trans-unit id="4832cdf5716df7acd57fe0ac87672a04e59ff3aa" translate="yes" xml:space="preserve">
          <source>The target, &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;, which is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property in the child component class, receives its value from the parent's property, &lt;code&gt;currentItem&lt;/code&gt;. When you click delete, the child component raises an event, &lt;code&gt;deleteRequest&lt;/code&gt;, which is the argument for the parent's &lt;code&gt;crossOffItem()&lt;/code&gt; method.</source>
          <target state="translated">目标 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 是子组件类中的 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 属性，它从父项的属性 &lt;code&gt;currentItem&lt;/code&gt; 中接收其值。当您单击删除时，子组件将引发事件 &lt;code&gt;deleteRequest&lt;/code&gt; ，这是父组件的 &lt;code&gt;crossOffItem()&lt;/code&gt; 方法的参数。</target>
        </trans-unit>
        <trans-unit id="fba0b19cd787422e1cf01da19ec8f25d07cada93" translate="yes" xml:space="preserve">
          <source>The target, &lt;code&gt;item&lt;/code&gt;, which is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property in the child component class, receives its value from the parent's property, &lt;code&gt;currentItem&lt;/code&gt;. When you click delete, the child component raises an event, &lt;code&gt;deleteRequest&lt;/code&gt;, which is the argument for the parent's &lt;code&gt;crossOffItem()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1ff5014d8414a2f274237e4b393821bcc007a8" translate="yes" xml:space="preserve">
          <source>The technique is particularly useful when you have a type of form whose content must change frequently to meet rapidly changing business and regulatory requirements. A typical use case is a questionaire. You might need to get input from users in different contexts. The format and style of the forms a user sees should remain constant, while the actual questions you need to ask vary with the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2fa7e7402ff15d8269c74078e6ca3033630d4e" translate="yes" xml:space="preserve">
          <source>The telltale signs of &lt;em&gt;content projection&lt;/em&gt; are twofold:</source>
          <target state="translated">&lt;em&gt;内容投射的&lt;/em&gt;明显迹象是双重的：</target>
        </trans-unit>
        <trans-unit id="5e77a452f056e2f53277faeefa0476eb5ee812b2" translate="yes" xml:space="preserve">
          <source>The template (&lt;code&gt;flying-heroes.component.html (flyers)&lt;/code&gt;) with the new pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a40647498302ae30e3c37d356dbc6aee8a2f1c" translate="yes" xml:space="preserve">
          <source>The template and style filenames reference the HTML and CSS files that StackBlitz generates.</source>
          <target state="translated">模板和样式文件名引用了StackBlitz生成的HTML和CSS文件。</target>
        </trans-unit>
        <trans-unit id="c4786e4078a2207abe9c4cfa9d1d9cf3ab9a3992" translate="yes" xml:space="preserve">
          <source>The template associated with a component binds an animation trigger to an element.</source>
          <target state="translated">与组件关联的模板将动画触发器绑定到元素上。</target>
        </trans-unit>
        <trans-unit id="7456b59897a0fe9f7fab60b1fd5714f118ee168e" translate="yes" xml:space="preserve">
          <source>The template associated with this component makes use of the defined trigger by binding to an element within its template code.</source>
          <target state="translated">与该组件相关联的模板通过绑定到模板代码中的元素来使用定义的触发器。</target>
        </trans-unit>
        <trans-unit id="ad2640340c3b2204b3e2187d3156835ccc870fd9" translate="yes" xml:space="preserve">
          <source>The template displays the two component properties using double curly brace interpolation:</source>
          <target state="translated">模板使用双曲括号插值显示两个组件属性。</target>
        </trans-unit>
        <trans-unit id="576bb8173300bc75c8165cf5e1686bbdae4c4807" translate="yes" xml:space="preserve">
          <source>The template expression inside the double quotes, &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt;, looks and behaves much like TypeScript. When the component's list of heroes has more than three items, Angular adds the paragraph to the DOM and the message appears. If there are three or fewer items, Angular omits the paragraph, so no message appears. For more information, see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">双引号内的模板表达式 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt; 外观和行为与TypeScript非常相似。当组件的英雄列表包含三项以上时，Angular将段落添加到DOM中，并显示消息。如果三个或三个以下项目，Angular会省略该段落，因此不会出现任何消​​息。有关更多信息，请参见&amp;ldquo; &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;模板&lt;/a&gt;&lt;a href=&quot;template-syntax&quot;&gt;语法&amp;rdquo;&lt;/a&gt;页面的模板表达式部分。</target>
        </trans-unit>
        <trans-unit id="06a26eec315b228b84cdf45c3df4a6172bf6d5de" translate="yes" xml:space="preserve">
          <source>The template expression should evaluate to the type of value that the target property expects. Return a string if the target property expects a string, a number if it expects a number, an object if it expects an object, and so on.</source>
          <target state="translated">模板表达式应该评估到目标属性所期望的值的类型,如果目标属性期望的是字符串,则返回字符串,如果期望的是数字,则返回数字,如果期望的是对象,则返回对象,以此类推。如果目标属性期望的是字符串,则返回字符串;如果期望的是数字,则返回数字;如果期望的是对象,则返回对象,以此类推。</target>
        </trans-unit>
        <trans-unit id="ac5e4c5de5dc648043bccd61180f0f506003d6cf" translate="yes" xml:space="preserve">
          <source>The template expression to the right of the equal sign, &lt;code&gt;=&lt;/code&gt;, contains a space-delimited string of CSS classes that the Router adds when this link is active (and removes when the link is inactive). You set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive to a string of classes such as &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; or bind it to a component property that returns such a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d8c395975bbaf307f8b6ad3d0e90daae25b98a" translate="yes" xml:space="preserve">
          <source>The template expression to the right of the equals (=) contains a space-delimited string of CSS classes that the Router will add when this link is active (and remove when the link is inactive). You set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive to a string of classes such as &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; or bind it to a component property that returns such a string.</source>
          <target state="translated">等号（=）右侧的模板表达式包含以空格分隔的CSS类字符串，当此链接处于活动状态时，路由器将添加CSS类（如果该链接处于非活动状态，则将其删除）。您将 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; 伪指令设置为诸如 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; 之类的字符串，或将其绑定到返回此类字符串的组件属性。</target>
        </trans-unit>
        <trans-unit id="c4a5ffd1d833be7be8234c4da4123676ff8d6c69" translate="yes" xml:space="preserve">
          <source>The template input elements do &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">模板输入元素&lt;em&gt;不&lt;/em&gt;使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e42a3efc7ee16d8ee04f26132d4fe495e4010874" translate="yes" xml:space="preserve">
          <source>The template is a multi-line string within ECMAScript 2015 backticks (&lt;code&gt;`&lt;/code&gt;). The backtick (&lt;code&gt;`&lt;/code&gt;)&amp;mdash;which is &lt;em&gt;not&lt;/em&gt; the same character as a single quote (&lt;code&gt;'&lt;/code&gt;)&amp;mdash;allows you to compose a string over several lines, which makes the HTML more readable.</source>
          <target state="translated">模板是ECMAScript 2015反引号（ &lt;code&gt;`&lt;/code&gt; ）中的多行字符串。倒引号（ &lt;code&gt;`&lt;/code&gt; ） -其&lt;em&gt;不&lt;/em&gt;同一个字符作为一个单引号（ &lt;code&gt;'&lt;/code&gt; ） -允许您撰写串几行，这使得HTML更具有可读性。</target>
        </trans-unit>
        <trans-unit id="3bfaca46091594f4d1d50328af755b641a1f6fb4" translate="yes" xml:space="preserve">
          <source>The template is compiled within the context of an NgModule&amp;mdash;the NgModule within which the template's component is declared&amp;mdash;which determines the set of selectors using the following rules:</source>
          <target state="translated">模板是在NgModule（在其中声明模板组件的NgModule）的上下文中编译的，该上下文使用以下规则确定选择器的集合：</target>
        </trans-unit>
        <trans-unit id="08d9755e408a260636b09bfef92316faea44cef4" translate="yes" xml:space="preserve">
          <source>The template is completely self contained. It doesn't bind to the component, and the component does nothing.</source>
          <target state="translated">模板是完全自包含的。它不与组件绑定,组件也不做任何事情。</target>
        </trans-unit>
        <trans-unit id="70313244a4cd1e80d96df911743747c5b1d0a1c0" translate="yes" xml:space="preserve">
          <source>The template options object, &lt;code&gt;angularCompilerOptions&lt;/code&gt;, is a sibling to the &lt;code&gt;compilerOptions&lt;/code&gt; object that supplies standard options to the TypeScript compiler.</source>
          <target state="translated">模板选项对象 &lt;code&gt;angularCompilerOptions&lt;/code&gt; 是可向TypeScript编译器提供标准选项的 &lt;code&gt;compilerOptions&lt;/code&gt; 对象的同级对象。</target>
        </trans-unit>
        <trans-unit id="3b72560eddb355fd40b07d7d81925030a83c57a2" translate="yes" xml:space="preserve">
          <source>The template reference variable (&lt;code&gt;#name&lt;/code&gt;) is set to &lt;code&gt;&quot;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; because that is the value of the &lt;a href=&quot;../api/core/directive#exportAs&quot;&gt;&lt;code&gt;NgModel.exportAs&lt;/code&gt;&lt;/a&gt; property. This property tells Angular how to link a reference variable to a directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b07ca66a0c80d8a3f63013141583e49737c085" translate="yes" xml:space="preserve">
          <source>The template reference variable named &lt;code&gt;box&lt;/code&gt;, declared on the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, refers to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element itself. The code uses the &lt;code&gt;box&lt;/code&gt; variable to get the input element's &lt;code&gt;value&lt;/code&gt; and display it with interpolation between &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">在 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素上声明的名为 &lt;code&gt;box&lt;/code&gt; 的模板引用变量引用 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素本身。该代码使用 &lt;code&gt;box&lt;/code&gt; 变量获取输入元素的 &lt;code&gt;value&lt;/code&gt; 并在 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标记之间进行插值显示。</target>
        </trans-unit>
        <trans-unit id="be99d9963797c6d6b4d78974ccde065adf89a39f" translate="yes" xml:space="preserve">
          <source>The template syntax guides show you how you can control the UX/UI by coordinating data between the class and the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2262f6eff650096d5ec2a922c11474976de6e1" translate="yes" xml:space="preserve">
          <source>The template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.</source>
          <target state="translated">模板语法为不太适合属性绑定的场景提供了专门的单向绑定。</target>
        </trans-unit>
        <trans-unit id="083a3f1dd8ef9b722e60e2598176af5110f9dbf5" translate="yes" xml:space="preserve">
          <source>The test assumes (correctly in this case) that the runtime event handler&amp;mdash;the component's &lt;code&gt;click()&lt;/code&gt; method&amp;mdash;doesn't care about the event object.</source>
          <target state="translated">该测试假定（在这种情况下正确）假设运行时事件处理程序（组件的 &lt;code&gt;click()&lt;/code&gt; 方法）不关心事件对象。</target>
        </trans-unit>
        <trans-unit id="3fee678255a89c608b1621887a0565d3703b71c4" translate="yes" xml:space="preserve">
          <source>The test configuration can use the &lt;code&gt;SharedModule&lt;/code&gt; too as seen in this alternative setup:</source>
          <target state="translated">测试配置也可以使用 &lt;code&gt;SharedModule&lt;/code&gt; ,如以下替代设置所示：</target>
        </trans-unit>
        <trans-unit id="9b3f7b35cc6454035e62b2373f127b23cbdae65d" translate="yes" xml:space="preserve">
          <source>The test consumes that spy in the same way it did earlier.</source>
          <target state="translated">该测试以之前的方式消耗该间谍。</target>
        </trans-unit>
        <trans-unit id="64d8dd78adadc9a255e228a4c2bdbf4eb2d5cae3" translate="yes" xml:space="preserve">
          <source>The test detects that event through its subscription to &lt;code&gt;selected&lt;/code&gt;.</source>
          <target state="translated">测试通过订阅到 &lt;code&gt;selected&lt;/code&gt; 事件来检测该事件。</target>
        </trans-unit>
        <trans-unit id="8a9ff9ce0ff2aea3ea5d9b5e4c05171faa52806f" translate="yes" xml:space="preserve">
          <source>The test fails when the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; tries to create the component.</source>
          <target state="translated">当 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 尝试创建组件时，测试失败。</target>
        </trans-unit>
        <trans-unit id="dc61697c7a24dc30137c8a1be726e1064a8ae44b" translate="yes" xml:space="preserve">
          <source>The test file extension &lt;strong&gt;must be &lt;code&gt;.spec.ts&lt;/code&gt;&lt;/strong&gt; so that tooling can identify it as a file with tests (AKA, a &lt;em&gt;spec&lt;/em&gt; file).</source>
          <target state="translated">测试文件的扩展名&lt;strong&gt;必须为 &lt;code&gt;.spec.ts&lt;/code&gt; ,&lt;/strong&gt;以便工具可以将其标识为带有测试的文件（AKA，&lt;em&gt;规格&lt;/em&gt;文件）。</target>
        </trans-unit>
        <trans-unit id="e1c2770aafe4156298be6944b33c74e2f41bc2b8" translate="yes" xml:space="preserve">
          <source>The test host sets the component's &lt;code&gt;hero&lt;/code&gt; input property with its test hero. It binds the component's &lt;code&gt;selected&lt;/code&gt; event with its &lt;code&gt;onSelected&lt;/code&gt; handler, which records the emitted hero in its &lt;code&gt;selectedHero&lt;/code&gt; property.</source>
          <target state="translated">测试主机使用其测试英雄设置组件的 &lt;code&gt;hero&lt;/code&gt; 输入属性。它将组件的 &lt;code&gt;selected&lt;/code&gt; 事件与其 &lt;code&gt;onSelected&lt;/code&gt; 处理函数绑定，该处理函数将发出的英雄记录在 &lt;code&gt;selectedHero&lt;/code&gt; 属性中。</target>
        </trans-unit>
        <trans-unit id="fb31db149beae9a822efe838f27bfc240e01968b" translate="yes" xml:space="preserve">
          <source>The test must wait for the &lt;code&gt;getQuote()&lt;/code&gt; observable to emit the next quote. Instead of calling &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt;, it calls &lt;code&gt;fixture.whenStable()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2fe2155132bb0d67244809298ea98ce16fe29e" translate="yes" xml:space="preserve">
          <source>The test must wait for the &lt;code&gt;getQuote()&lt;/code&gt; observable to emit the next quote. Instead of calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;, it calls &lt;code&gt;fixture.whenStable()&lt;/code&gt;.</source>
          <target state="translated">测试必须等待可观察到的 &lt;code&gt;getQuote()&lt;/code&gt; 发出下一个报价。而不是调用 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; ，而是调用 &lt;code&gt;fixture.whenStable()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eae43c82340aebd9536a260fd2377f5061a497ef" translate="yes" xml:space="preserve">
          <source>The test resumes within the promise callback, which calls &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to update the quote element with the expected text.</source>
          <target state="translated">测试将在promise回调中继续，该回调将调用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; 以使用期望的文本更新quote元素。</target>
        </trans-unit>
        <trans-unit id="6513a6033669aff320e259d0c6833fb95d1491eb" translate="yes" xml:space="preserve">
          <source>The test resumes within the promise callback, which calls &lt;code&gt;detectChanges()&lt;/code&gt; to update the quote element with the expected text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9991de36b4ebc0ec198e7d693844d908feef9de2" translate="yes" xml:space="preserve">
          <source>The test suite setup provided the same router spy &lt;a href=&quot;testing#routing-component&quot;&gt;described above&lt;/a&gt; which spies on the router without actually navigating.</source>
          <target state="translated">测试套件的设置提供了与&lt;a href=&quot;testing#routing-component&quot;&gt;上述&lt;/a&gt;路由器间谍相同的间谍，无需实际导航即可侦察路由器。</target>
        </trans-unit>
        <trans-unit id="26c2531c64b39001e8bbe987859331ff8589c07b" translate="yes" xml:space="preserve">
          <source>The test suite setup provided the same router spy &lt;a href=&quot;testing-components-scenarios#routing-component&quot;&gt;described above&lt;/a&gt; which spies on the router without actually navigating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4274a8f1842c774f28cff1fab41deb042b588a" translate="yes" xml:space="preserve">
          <source>The test triggered a &quot;click&quot; event with a &lt;code&gt;null&lt;/code&gt; event object.</source>
          <target state="translated">测试使用 &lt;code&gt;null&lt;/code&gt; 事件对象触发了&amp;ldquo;点击&amp;rdquo;事件。</target>
        </trans-unit>
        <trans-unit id="7fc3193a4fa820f2db5a35cc3a595865239a463f" translate="yes" xml:space="preserve">
          <source>The testing documentation offers tips and techniques for unit and integration testing Angular applications through a sample application created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. This sample application is much like the one in the &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64322dc55f479cb397712aa1ca434f09788d33d9" translate="yes" xml:space="preserve">
          <source>The testing goal is to verify that such bindings work as expected. The tests should set input values and listen for output events.</source>
          <target state="translated">测试的目标是验证这种绑定是否按预期工作。测试应设置输入值并监听输出事件。</target>
        </trans-unit>
        <trans-unit id="6e2010246d07d1175ff55b50a4ac15be59351555" translate="yes" xml:space="preserve">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) call it for you so there is rarely a reason for you to call it yourself.</source>
          <target state="translated">测试垫片（ &lt;code&gt;karma-test-shim&lt;/code&gt; ， &lt;code&gt;browser-test-shim&lt;/code&gt; ）会为您调用它，因此您很少有理由自己调用它。</target>
        </trans-unit>
        <trans-unit id="148b2781f0537830461040ebc4675f60de170e4e" translate="yes" xml:space="preserve">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) establish the &lt;a href=&quot;testing&quot;&gt;initial test environment&lt;/a&gt; and a default testing module. The default testing module is configured with basic declaratives and some Angular service substitutes that every tester needs.</source>
          <target state="translated">测试垫片（ &lt;code&gt;karma-test-shim&lt;/code&gt; ， &lt;code&gt;browser-test-shim&lt;/code&gt; ）建立&lt;a href=&quot;testing&quot;&gt;初始测试环境&lt;/a&gt;和默认测试模块。默认的测试模块配置有基本的声明和每个测试人员都需要的一些Angular服务替代品。</target>
        </trans-unit>
        <trans-unit id="32d01fc5844e040dbbc5a7fa7fc314aed7f8af26" translate="yes" xml:space="preserve">
          <source>The tests described in this guide are in &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt;. There are also tests of an application data service that call &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt;.</source>
          <target state="translated">本指南中描述的测试位于 &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt; 中。在 &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt; 中也有对调用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的应用程序数据服务的测试。</target>
        </trans-unit>
        <trans-unit id="c46d6deffac15f691e67af3e7802efbd62c6f4b5" translate="yes" xml:space="preserve">
          <source>The tests in this guide are designed to run in a browser so a &lt;code&gt;nativeElement&lt;/code&gt; value will always be an &lt;code&gt;HTMLElement&lt;/code&gt; or one of its derived classes.</source>
          <target state="translated">本指南中的测试旨在在浏览器中运行，因此 &lt;code&gt;nativeElement&lt;/code&gt; 值将始终是 &lt;code&gt;HTMLElement&lt;/code&gt; 或其派生类之一。</target>
        </trans-unit>
        <trans-unit id="97411629b7777fd387f17c68fd54b77f893a322d" translate="yes" xml:space="preserve">
          <source>The tests in this guide only call &lt;code&gt;compileComponents&lt;/code&gt; when necessary.</source>
          <target state="translated">本指南中的测试仅在必要时调用 &lt;code&gt;compileComponents&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9b3c07155cb24bc62c23428c9b9b89113dffe1f" translate="yes" xml:space="preserve">
          <source>The tests need access to the (stub) &lt;code&gt;UserService&lt;/code&gt; injected into the &lt;code&gt;WelcomeComponent&lt;/code&gt;.</source>
          <target state="translated">测试需要访问注入到 &lt;code&gt;WelcomeComponent&lt;/code&gt; 中的（存根） &lt;code&gt;UserService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="552798847cfd969bee03bd536ec0eaa7b9abccb0" translate="yes" xml:space="preserve">
          <source>The tests themselves are almost identical to the stand-alone version:</source>
          <target state="translated">测试本身与单机版几乎相同。</target>
        </trans-unit>
        <trans-unit id="f24377c82eb7c604520a6472b6cdeda1e15d8e75" translate="yes" xml:space="preserve">
          <source>The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.</source>
          <target state="translated">大括号之间的文本通常是一个组件属性的名称。Angular用相应组件属性的字符串值替换该名称。</target>
        </trans-unit>
        <trans-unit id="7001ead9ab548d59ed3b0b0d47f9fc2feadd5c3b" translate="yes" xml:space="preserve">
          <source>The text string.</source>
          <target state="translated">文本字符串。</target>
        </trans-unit>
        <trans-unit id="019a0c6e6325000b9ec468afe8f97d5dd0f39c5b" translate="yes" xml:space="preserve">
          <source>The textbox should both &lt;em&gt;display&lt;/em&gt; the hero's &lt;code&gt;name&lt;/code&gt; property and &lt;em&gt;update&lt;/em&gt; that property as the user types. That means data flows from the component class &lt;em&gt;out to the screen&lt;/em&gt; and from the screen &lt;em&gt;back to the class&lt;/em&gt;.</source>
          <target state="translated">文本框应既&lt;em&gt;显示&lt;/em&gt;英雄的 &lt;code&gt;name&lt;/code&gt; 属性，又应在用户键入时&lt;em&gt;更新&lt;/em&gt;该属性。这意味着数据从组件类流到&lt;em&gt;屏幕&lt;/em&gt;，再从屏幕流&lt;em&gt;回到类&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9c58df2e0d216969a6b8f76eb1c801e78a85b760" translate="yes" xml:space="preserve">
          <source>The third argument, &lt;code&gt;easing&lt;/code&gt;, controls how the animation &lt;a href=&quot;http://easings.net/&quot;&gt;accelerates and decelerates&lt;/a&gt; during its runtime. For example, &lt;code&gt;ease-in&lt;/code&gt; causes the animation to begin slowly, and to pick up speed as it progresses.</source>
          <target state="translated">第三个参数 &lt;code&gt;easing&lt;/code&gt; ，控制动画在运行时如何&lt;a href=&quot;http://easings.net/&quot;&gt;加速和减速&lt;/a&gt;。例如， &lt;code&gt;ease-in&lt;/code&gt; 入会使动画开始缓慢，并随着动画的进行而加快速度。</target>
        </trans-unit>
        <trans-unit id="387ef2ede0548f8a7e5227510a281240ebc65597" translate="yes" xml:space="preserve">
          <source>The third parameter defines a pattern of pluralization categories and their matching values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b20036ccb6a097e5d6133a873e25f13d920be9" translate="yes" xml:space="preserve">
          <source>The third parameter defines a pluralization pattern consisting of pluralization categories and their matching values.</source>
          <target state="translated">第三个参数定义了一个由复数类别及其匹配值组成的复数模式。</target>
        </trans-unit>
        <trans-unit id="9e89f13f3f25c09bfbb1e27588e7ce09b251770a" translate="yes" xml:space="preserve">
          <source>The three modes of type-checking treat embedded views differently. Consider the following example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1fbe17ffff22abb0345952cf457c1a79e7059ef" translate="yes" xml:space="preserve">
          <source>The threshold for error relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">相对于基线的误差阈值（最小和最大）。</target>
        </trans-unit>
        <trans-unit id="60c47ee6ec4aee3d2f301fc3d304a4955e681b57" translate="yes" xml:space="preserve">
          <source>The threshold for warning relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">相对于基线的警告阈值（最小和最大）。</target>
        </trans-unit>
        <trans-unit id="c4b55d03441bffab6eec1d8c5b1ac161eb54aa13" translate="yes" xml:space="preserve">
          <source>The time it takes the animation to complete, in milliseconds.</source>
          <target state="translated">动画完成所需的时间,以毫秒为单位。</target>
        </trans-unit>
        <trans-unit id="39672ec6c077499845ec25181d8fdddc36ce80f6" translate="yes" xml:space="preserve">
          <source>The time zone. A time zone offset from GMT (such as &lt;code&gt;'+0430'&lt;/code&gt;), or a standard UTC/GMT or continental US time zone abbreviation. If not specified, uses host system settings.</source>
          <target state="translated">时区。时区偏离GMT（例如 &lt;code&gt;'+0430'&lt;/code&gt; ），或者是标准UTC / GMT或美国大陆时区的缩写。如果未指定，则使用主机系统设置。</target>
        </trans-unit>
        <trans-unit id="20e4e50a13a151170196f0e0befe4c1c2ba96789" translate="yes" xml:space="preserve">
          <source>The timing data for the step.</source>
          <target state="translated">该步骤的计时数据。</target>
        </trans-unit>
        <trans-unit id="3a5862865c9788bb436ccfadcc4ca1e2e0ed4f85" translate="yes" xml:space="preserve">
          <source>The timing data for the steps.</source>
          <target state="translated">步的计时数据。</target>
        </trans-unit>
        <trans-unit id="9bb53d35a2e2718224cdb5414e304756bc3d18c6" translate="yes" xml:space="preserve">
          <source>The title should appear at the top of the physical page. Begin the title with the markdown &lt;code&gt;#&lt;/code&gt; character. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">标题应显示在物理页面的顶部。标题以减号 &lt;code&gt;#&lt;/code&gt; 字符开头。或者，您可以编写等效的 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="964f1d13124f53046f40e305bcf164695c936261" translate="yes" xml:space="preserve">
          <source>The token is used as a type specifier for constructor injection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f009ca4174665a8b55345b2eea3c338ed581af6" translate="yes" xml:space="preserve">
          <source>The token is used in the value position of a &lt;a href=&quot;lifecycle-hooks#using-aftercontent-hooks&quot;&gt;content query&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7392074d5488bfada1cba2db29c9e3aaea938dec" translate="yes" xml:space="preserve">
          <source>The tool that the CLI uses to perform complex tasks such as compilation and test running, according to a provided configuration. Architect is a shell that runs a &lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt; (defined in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;) with a given &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;.</source>
          <target state="translated">根据提供的配置，CLI用于执行复杂任务（例如编译和测试运行）的工具。Architect是一个外壳，用于运行具有给定&lt;a href=&quot;glossary#target&quot;&gt;目标配置&lt;/a&gt;的&lt;a href=&quot;glossary#builder&quot;&gt;构建器&lt;/a&gt;（在&lt;a href=&quot;glossary#npm-package&quot;&gt;npm包中&lt;/a&gt;定义）。</target>
        </trans-unit>
        <trans-unit id="a41ed1a3c20f3b032ce6bf341b07b3ff788f0e6c" translate="yes" xml:space="preserve">
          <source>The top level of the root project folder for a collection contains configuration files, a &lt;code&gt;node_modules&lt;/code&gt; folder, and a &lt;code&gt;src/&lt;/code&gt; folder. The &lt;code&gt;src/&lt;/code&gt; folder contains subfolders for named schematics in the collection, and a schema, &lt;code&gt;collection.json&lt;/code&gt;, which describes the collected schematics. Each schematic is created with a name, description, and factory function.</source>
          <target state="translated">集合的根项目文件夹的顶层包含配置文件， &lt;code&gt;node_modules&lt;/code&gt; 文件夹和 &lt;code&gt;src/&lt;/code&gt; 文件夹。在 &lt;code&gt;src/&lt;/code&gt; 文件夹包含子文件夹集合中命名的图表和架构， &lt;code&gt;collection.json&lt;/code&gt; ，它描述了收集原理图。每个原理图都使用名称，描述和工厂功能创建。</target>
        </trans-unit>
        <trans-unit id="3f8c3bac42ac19a6aeec66ddbb65426c9445956b" translate="yes" xml:space="preserve">
          <source>The top paragraph is in the DOM. The bottom, disused paragraph is not; in its place is a comment about &quot;bindings&quot; (more about that &lt;a href=&quot;structural-directives#asterisk&quot;&gt;later&lt;/a&gt;).</source>
          <target state="translated">最上段在DOM中。最下面的废弃段落不是；取而代之的是对&amp;ldquo;绑定&amp;rdquo;的评论（&lt;a href=&quot;structural-directives#asterisk&quot;&gt;稍后会&lt;/a&gt;更多）。</target>
        </trans-unit>
        <trans-unit id="00501897b059678bdf07befdac7616fe6a03505a" translate="yes" xml:space="preserve">
          <source>The top-level directive for this control if present, otherwise null.</source>
          <target state="translated">该控件的顶层指令(如果存在),否则为空。</target>
        </trans-unit>
        <trans-unit id="aa4c65514687fcb647bd478319e8cd7a18baae19" translate="yes" xml:space="preserve">
          <source>The top-level directive for this group if present, otherwise null.</source>
          <target state="translated">该组的最高级别指令,如果存在,则为空。</target>
        </trans-unit>
        <trans-unit id="7f59f229151882c691c9c4dbd40db2c8cf35cf79" translate="yes" xml:space="preserve">
          <source>The top-level form directive for the control.</source>
          <target state="translated">控件的顶层表单指令。</target>
        </trans-unit>
        <trans-unit id="aa96b6dd3b9c83ecd894feff632ccdcd8ce5055e" translate="yes" xml:space="preserve">
          <source>The total run time of the animation, in milliseconds.</source>
          <target state="translated">动画的总运行时间,以毫秒为单位。</target>
        </trans-unit>
        <trans-unit id="14aee0513a51a8b6574f4395af2536721cbd0b69" translate="yes" xml:space="preserve">
          <source>The transition from the server-rendered app to the client app happens quickly on a development machine, but you should always test your apps in real-world scenarios.</source>
          <target state="translated">从服务器渲染的应用到客户端应用的过渡在开发机器上很快就会发生,但你应该始终在真实世界的场景中测试你的应用。</target>
        </trans-unit>
        <trans-unit id="2b2c02e508d78290b606f3c251693a83d5dd77d7" translate="yes" xml:space="preserve">
          <source>The translation file format.</source>
          <target state="translated">翻译文件格式。</target>
        </trans-unit>
        <trans-unit id="a01d8be6610dc7e8ff92abc660e7a063be84ddba" translate="yes" xml:space="preserve">
          <source>The translation file.</source>
          <target state="translated">翻译文件。</target>
        </trans-unit>
        <trans-unit id="566718f0b46f66443c966e183abd9ebc1557a5c4" translate="yes" xml:space="preserve">
          <source>The translation process that transforms one version of JavaScript to another version; for example, down-leveling ES2015 to the older ES5 version.</source>
          <target state="translated">将一个版本的JavaScript转换为另一个版本的翻译过程;例如,将ES2015降级为旧的ES5版本。</target>
        </trans-unit>
        <trans-unit id="349bc86574d83717c24e66cc03a3095ffbe80534" translate="yes" xml:space="preserve">
          <source>The translator may also need to know the meaning or intent of the text message within this particular app context, in order to translate it the same way as other text with the same meaning. Start the &lt;code&gt;i18n&lt;/code&gt; attribute value with the &lt;em&gt;meaning&lt;/em&gt; and separate it from the &lt;em&gt;description&lt;/em&gt; with the &lt;code&gt;|&lt;/code&gt; character: &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd93ca59b690739d63aaf50fa1d89967d7ba17a" translate="yes" xml:space="preserve">
          <source>The translator may also need to know the meaning or intent of the text message within this particular app context.</source>
          <target state="translated">译者可能还需要知道文本信息在这个特定应用环境中的含义或意图。</target>
        </trans-unit>
        <trans-unit id="c27e3942c3254b8b0f806e9fac192f3f58c19b32" translate="yes" xml:space="preserve">
          <source>The tree-shaking problem arises when a component is used as an injection token. There are two cases when that can happen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cbae59239e49c4968e3b2022136d5ac4b8dd7eb" translate="yes" xml:space="preserve">
          <source>The trigger name, used to associate it with an element. Unique within the component.</source>
          <target state="translated">触发器名称,用于与元素关联。在组件中是唯一的。</target>
        </trans-unit>
        <trans-unit id="d35231c4743a554b907dbe3ec68e6d1c03c3e04e" translate="yes" xml:space="preserve">
          <source>The tutorial walks you through the following steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599b7384324d0565d53e3693b7036e321e474501" translate="yes" xml:space="preserve">
          <source>The tutorial's &quot;in-memory web API&quot; module, a demo and development tool, intercepts all HTTP calls and simulates the behavior of a remote data server. In practice, you would remove that module and register your web API middleware on the server here.</source>
          <target state="translated">教程中的 &quot;内存中的Web API &quot;模块,是一个演示和开发工具,它拦截所有的HTTP调用,并模拟远程数据服务器的行为。在实际操作中,你会删除该模块,并在此服务器上注册你的Web API中间件。</target>
        </trans-unit>
        <trans-unit id="29c54a0ff6d263b78d0ad5a2dc608fb24dc18c92" translate="yes" xml:space="preserve">
          <source>The tutorial's &lt;code&gt;HeroService&lt;/code&gt; and &lt;code&gt;HeroSearchService&lt;/code&gt; delegate to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; module to fetch application data. These services send requests to &lt;em&gt;relative&lt;/em&gt; URLs such as &lt;code&gt;api/heroes&lt;/code&gt;. In a Universal app, HTTP URLs must be &lt;em&gt;absolute&lt;/em&gt; (for example, &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt;). This means you need to change your services to make requests with absolute URLs when running on the server and with relative URLs when running in the browser.</source>
          <target state="translated">本教程的 &lt;code&gt;HeroService&lt;/code&gt; 和 &lt;code&gt;HeroSearchService&lt;/code&gt; 委托给Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 模块以获取应用程序数据。这些服务将请求发送到&lt;em&gt;相对&lt;/em&gt; URL，例如 &lt;code&gt;api/heroes&lt;/code&gt; 。在通用应用程序中，HTTP URL必须是&lt;em&gt;绝对的&lt;/em&gt;（例如， &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt; ）。这意味着您需要更改服务以在服务器上运行时使用绝对URL发出请求，而在浏览器中运行时使用相对URL发出请求。</target>
        </trans-unit>
        <trans-unit id="305db64f25ecd1b1da157b5b8c651450a07346de" translate="yes" xml:space="preserve">
          <source>The tutorial's &lt;code&gt;HeroService&lt;/code&gt; and &lt;code&gt;HeroSearchService&lt;/code&gt; delegate to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; module to fetch application data. These services send requests to &lt;em&gt;relative&lt;/em&gt; URLs such as &lt;code&gt;api/heroes&lt;/code&gt;. In a server-side rendered app, HTTP URLs must be &lt;em&gt;absolute&lt;/em&gt; (for example, &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt;). This means that the URLs must be somehow converted to absolute when running on the server and be left relative when running in the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bfdaa72e9953f6fcebc0bfa93857733007382e" translate="yes" xml:space="preserve">
          <source>The two asterisks, &lt;code&gt;**&lt;/code&gt;, indicate to Angular that this &lt;code&gt;routes&lt;/code&gt; definition is a wildcard route. For the component property, you can define any component in your application. Common choices include an application-specific &lt;code&gt;PageNotFoundComponent&lt;/code&gt;, which you can define to &lt;a href=&quot;router#404-page-how-to&quot;&gt;display a 404 page&lt;/a&gt; to your users; or a redirect to your application's main component. A wildcard route is the last route because it matches any URL. For more detail on why order matters for routes, see &lt;a href=&quot;router#route-order&quot;&gt;Route order&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc05ea2dd3769a2464a65395b0f8fc1046a9410" translate="yes" xml:space="preserve">
          <source>The two build systems support different things, and even where they support the same things, they do those things differently. This means that the TypeScript source can result in different JavaScript code in a built library than it would in a built application.</source>
          <target state="translated">这两个构建系统支持不同的东西,即使是支持相同的东西,它们也会以不同的方式做这些事情。这意味着TypeScript源码在构建库中的JavaScript代码与在构建应用程序中的代码可能会有所不同。</target>
        </trans-unit>
        <trans-unit id="3d6bab88072a051c166e9e7471ac45c3b0a3264e" translate="yes" xml:space="preserve">
          <source>The two components will have a parent/child relationship. The parent &lt;code&gt;HeroesComponent&lt;/code&gt; will control the child &lt;code&gt;HeroDetailComponent&lt;/code&gt; by sending it a new hero to display whenever the user selects a hero from the list.</source>
          <target state="translated">这两个组件将具有父/子关系。父级 &lt;code&gt;HeroesComponent&lt;/code&gt; 将通过向子级 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 发送一个新的英雄来控制子级HeroDetailComponent，以便在用户从列表中选择英雄时显示。</target>
        </trans-unit>
        <trans-unit id="5afe858ace0f507f6e00dcce82eccd00126d0833" translate="yes" xml:space="preserve">
          <source>The two types of validators are passed in separately as the second and third arg respectively, or together as part of an options object.</source>
          <target state="translated">这两种类型的验证器分别作为第二个和第三个参数传入,或者一起作为一个选项对象的一部分传入。</target>
        </trans-unit>
        <trans-unit id="b4abd53c0253243e985b7e065cc9f874147ab4e8" translate="yes" xml:space="preserve">
          <source>The two update events, &lt;code&gt;available&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt;, are &lt;code&gt;Observable&lt;/code&gt; properties of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">这两个更新事件， &lt;code&gt;available&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt; ，是 &lt;code&gt;Observable&lt;/code&gt; 的性质 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="681906e7bceda4d76618f4d591a5d4a3561cc264" translate="yes" xml:space="preserve">
          <source>The two update events, &lt;code&gt;available&lt;/code&gt; and &lt;code&gt;activated&lt;/code&gt;, are &lt;code&gt;Observable&lt;/code&gt; properties of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbdba75ae5eb9e9bc50a6b2bc270a30ddeeee80" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is a great convenience compared to separate property and event bindings. It would be convenient to use two-way binding with HTML form elements like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. However, no native HTML element follows the &lt;code&gt;x&lt;/code&gt; value and &lt;code&gt;xChange&lt;/code&gt; event pattern.</source>
          <target state="translated">与单独的属性和事件绑定相比，双向绑定语法非常方便。将双向绑定与HTML表单元素（例如 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; )一起使用会很方便。但是，没有原生HTML元素遵循 &lt;code&gt;x&lt;/code&gt; 值和 &lt;code&gt;xChange&lt;/code&gt; 事件模式。</target>
        </trans-unit>
        <trans-unit id="552f44eabf3bee5b16dbbe6d805c5e4727da9fe7" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is really just syntactic sugar for a &lt;em&gt;property&lt;/em&gt; binding and an &lt;em&gt;event&lt;/em&gt; binding. Angular desugars the &lt;code&gt;SizerComponent&lt;/code&gt; binding into this:</source>
          <target state="translated">双向绑定语法实际上只是&lt;em&gt;属性&lt;/em&gt;绑定和&lt;em&gt;事件&lt;/em&gt;绑定的语法糖。角度将 &lt;code&gt;SizerComponent&lt;/code&gt; 绑定到其中：</target>
        </trans-unit>
        <trans-unit id="76cff48315da67038bca27defef7706ac9ac1f06" translate="yes" xml:space="preserve">
          <source>The two-way binding syntax is shorthand for a combination of property binding and event binding. The &lt;code&gt;SizerComponent&lt;/code&gt; binding as separate property binding and event binding is as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194f581853ac13d61cf24a5c84685394267efc75" translate="yes" xml:space="preserve">
          <source>The type checker also throws an error if it can't determine whether a variable will be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; at runtime. You tell the type checker not to throw an error by applying the postfix &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;non-null assertion operator, !&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6513ae7688b62a5255ebc4d625abc9be33526ee7" translate="yes" xml:space="preserve">
          <source>The type checker also throws an error if it can't determine whether a variable will be &lt;code&gt;null&lt;/code&gt; or undefined at runtime. You tell the type checker not to throw an error by applying the postfix &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;non-null assertion operator, !&lt;/a&gt;.</source>
          <target state="translated">如果类型检查器无法确定变量在运行时是 &lt;code&gt;null&lt;/code&gt; 还是未定义，则它还会引发错误。您通过应用后缀&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;非空断言运算符！&lt;/a&gt;来告诉类型检查器不要抛出错误！。</target>
        </trans-unit>
        <trans-unit id="d949ded92c64bb6e37f7798775515186c690205d" translate="yes" xml:space="preserve">
          <source>The type of &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;#parent&lt;/code&gt; now indicates that it may be null. See &lt;a href=&quot;https://github.com/angular/angular/pull/32671&quot;&gt;PR 32671&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81dce0b481d7ac34dd874fc96a0c29f5d10a16ae" translate="yes" xml:space="preserve">
          <source>The type of budget. One of:</source>
          <target state="translated">预算的类型。其中:</target>
        </trans-unit>
        <trans-unit id="c15292902555eb7a2059d3f203806ac34a995f12" translate="yes" xml:space="preserve">
          <source>The type of component the factory will create.</source>
          <target state="translated">工厂将创建的组件类型。</target>
        </trans-unit>
        <trans-unit id="7c0884d61dcbf36812f4f429d57a3fd536285ae5" translate="yes" xml:space="preserve">
          <source>The type of numeric value to be formatted (such as &lt;code&gt;Decimal&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">要格式化的数值类型（例如 &lt;code&gt;Decimal&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="4ca1c6ea29abaecf66afa18e36661807315423ea" translate="yes" xml:space="preserve">
          <source>The type of numeric value to be formatted (such as &lt;code&gt;Decimal&lt;/code&gt; or &lt;code&gt;Currency&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1914de4f10fd251ed62f048b8948f40fc99532fb" translate="yes" xml:space="preserve">
          <source>The type of object that &lt;a href=&quot;viewchildren&quot;&gt;&lt;code&gt;ViewChildren&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;contentchildren&quot;&gt;&lt;code&gt;ContentChildren&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;querylist&quot;&gt;&lt;code&gt;QueryList&lt;/code&gt;&lt;/a&gt; provide.</source>
          <target state="translated">&lt;a href=&quot;viewchildren&quot;&gt; &lt;code&gt;ViewChildren&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;contentchildren&quot;&gt; &lt;code&gt;ContentChildren&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;querylist&quot;&gt; &lt;code&gt;QueryList&lt;/code&gt; &lt;/a&gt;提供的对象的类型。</target>
        </trans-unit>
        <trans-unit id="2cee06caf5b085e8040bc4dd74a44cf2669ac0d4" translate="yes" xml:space="preserve">
          <source>The type of this component (as created by a &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; class).</source>
          <target state="translated">该组件的类型（由 &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 类创建）。</target>
        </trans-unit>
        <trans-unit id="351e662a9168935a10d637a721b52c3db93d0b18" translate="yes" xml:space="preserve">
          <source>The type parameter, &lt;code&gt;T&lt;/code&gt;, is the kind of metadata you'd pass to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator:</source>
          <target state="translated">类型参数 &lt;code&gt;T&lt;/code&gt; 是您要传递给 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 装饰器的元数据类型：</target>
        </trans-unit>
        <trans-unit id="92e0731044a01c861010ac8dd3364de0bab42484" translate="yes" xml:space="preserve">
          <source>The type parameter, while optional, conveys the dependency's type to developers and tooling. The token description is another developer aid.</source>
          <target state="translated">类型参数虽然是可选的,但它向开发者和工具传递了依赖的类型。令牌描述是另一种开发者辅助工具。</target>
        </trans-unit>
        <trans-unit id="3be642a3bc4d6290043093ef6c6b0e31a8237f3c" translate="yes" xml:space="preserve">
          <source>The types of the &lt;code&gt;observe&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; options are &lt;em&gt;string unions&lt;/em&gt;, rather than plain strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdab28b804a5bc2df8ed953cd182dcd879bebcd0" translate="yes" xml:space="preserve">
          <source>The underlying native element or &lt;code&gt;null&lt;/code&gt; if direct access to native elements is not supported (e.g. when the application runs in a web worker).</source>
          <target state="translated">基础本机元素；如果不支持直接访问本机元素（例如，当应用程序在Web Worker中运行时），则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9fb3d4a522a7d59fc653358ee450cd39cd54d77" translate="yes" xml:space="preserve">
          <source>The unit test files themselves also need to be switched to Angular when their production counterparts are switched. The specs for the checkmark pipe are probably the most straightforward, as the pipe has no dependencies:</source>
          <target state="translated">单元测试文件本身在切换到生产对应文件时,也需要切换到Angular。Checkmark管道的规范可能是最直接的,因为管道没有依赖关系。</target>
        </trans-unit>
        <trans-unit id="7b843cdeff59d7337d09dffec8474c659f368f17" translate="yes" xml:space="preserve">
          <source>The unit test for the phone service is a bit more involved. You need to switch from the mocked-out AngularJS &lt;code&gt;$httpBackend&lt;/code&gt; to a mocked-out Angular Http backend.</source>
          <target state="translated">电话服务的单元测试涉及更多。您需要从模拟的AngularJS &lt;code&gt;$httpBackend&lt;/code&gt; 到模拟的Angular Http后端。</target>
        </trans-unit>
        <trans-unit id="789acab94f4da6bd1b31fd8d53475bbe9758d87a" translate="yes" xml:space="preserve">
          <source>The updated &lt;code&gt;HeroesRoutingModule&lt;/code&gt; looks like this:</source>
          <target state="translated">更新后的 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 如下所示：</target>
        </trans-unit>
        <trans-unit id="987de19a86a67d115685949783bff6fddad8b8ee" translate="yes" xml:space="preserve">
          <source>The upgrade NgModule.</source>
          <target state="translated">升级后的NgModule。</target>
        </trans-unit>
        <trans-unit id="d44b088804cbf01923d7400df118887612abd201" translate="yes" xml:space="preserve">
          <source>The url from which this snapshot was created</source>
          <target state="translated">创建该快照的网址</target>
        </trans-unit>
        <trans-unit id="0ee83b79b718d1a4ec36d1b3d58ebe726ac3e494" translate="yes" xml:space="preserve">
          <source>The url serialization strategy is customizable. You can make all URLs case insensitive by providing a custom UrlSerializer.</source>
          <target state="translated">url序列化策略是可定制的。你可以通过提供一个自定义的UrlSerializer使所有的URL不区分大小写。</target>
        </trans-unit>
        <trans-unit id="ad97874a0022a010e0155677ec6967027c4314b9" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;name&lt;/code&gt; attributes for validation and form-element change tracking.</source>
          <target state="translated">使用 &lt;code&gt;name&lt;/code&gt; 属性进行验证和表单元素更改跟踪。</target>
        </trans-unit>
        <trans-unit id="9154043e44b5d932b8c61e6a2f25ebf4ef5aea92" translate="yes" xml:space="preserve">
          <source>The user calls the &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; method, which updates the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">用户调用 &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; 方法，该方法将更新 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="0a5976d96dbc10bd55988a4a489b75fc9937bde4" translate="yes" xml:space="preserve">
          <source>The user can select a hero and see that hero's details.</source>
          <target state="translated">用户可以选择一个英雄并查看该英雄的详细信息。</target>
        </trans-unit>
        <trans-unit id="b99c1b741aee49f63e964f6109422ed732ed9ff3" translate="yes" xml:space="preserve">
          <source>The user closes the app and does not open it for a while.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa661a59e3356526e5cd2452506236a954f28c3e" translate="yes" xml:space="preserve">
          <source>The user needs a way to open the popup. Open the &lt;code&gt;AppComponent&lt;/code&gt; and add a &quot;Contact&quot; link.</source>
          <target state="translated">用户需要一种方法来打开弹出窗口。打开 &lt;code&gt;AppComponent&lt;/code&gt; 并添加&amp;ldquo;联系人&amp;rdquo;链接。</target>
        </trans-unit>
        <trans-unit id="ec95381196d078fadc8f2f14dd8fb15e40e96c16" translate="yes" xml:space="preserve">
          <source>The user opens the app again. The service worker serves the latest version known to it at this point, namely the old version (&lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;main.&amp;lt;main-hash-1&amp;gt;.js&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369264e6d1f498d1106a6d3877d3ee5e43560ae5" translate="yes" xml:space="preserve">
          <source>The user should be able to get to these details in three ways.</source>
          <target state="translated">用户应该能够通过三种方式获得这些细节。</target>
        </trans-unit>
        <trans-unit id="bbafb9f9e9d3caf33087f60e1818944be5dd3d9b" translate="yes" xml:space="preserve">
          <source>The user should be able to navigate back and forth between the &lt;code&gt;DashboardComponent&lt;/code&gt; and the &lt;code&gt;HeroesComponent&lt;/code&gt; by clicking links in the navigation area near the top of the page.</source>
          <target state="translated">通过单击页面顶部附近导航区域中的链接，用户应该能够在 &lt;code&gt;DashboardComponent&lt;/code&gt; 和 &lt;code&gt;HeroesComponent&lt;/code&gt; 之间来回导航。</target>
        </trans-unit>
        <trans-unit id="e9cc50a2572132b6fe866bbf0976206cd31bec89" translate="yes" xml:space="preserve">
          <source>The user should be able to submit this form after filling it in. The &lt;em&gt;Submit&lt;/em&gt; button at the bottom of the form does nothing on its own, but it will trigger a form submit because of its type (&lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;).</source>
          <target state="translated">用户填写后应该能够提交该表单。表单底部的&lt;em&gt;Submit&lt;/em&gt;按钮本身不会执行任何操作，但是由于其类型（ &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; ），它将触发表单提交。</target>
        </trans-unit>
        <trans-unit id="8e8ef51761e17807182420e3debbce24091d7fd9" translate="yes" xml:space="preserve">
          <source>The user should be able to submit this form after filling it in. The &lt;strong&gt;Submit&lt;/strong&gt; button at the bottom of the form does nothing on its own, but it does trigger a form-submit event because of its type (&lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;). To respond to this event, take the following steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ba075c2899372b1eb9a9b167514bce8549789e" translate="yes" xml:space="preserve">
          <source>The user types &lt;em&gt;Blue&lt;/em&gt; into the input element.</source>
          <target state="translated">用户在输入元素中输入&lt;em&gt;Blue&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="746db581b79b8e44db4102f1f4a9027db5fb21fd" translate="yes" xml:space="preserve">
          <source>The user types a value into the input element, in this case the favorite color &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">用户在输入元素中输入一个值，在这种情况下为喜欢的颜色&lt;em&gt;Blue&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0f5eade11b7a8a4872382f56342ccc7dae30caf1" translate="yes" xml:space="preserve">
          <source>The validation status of the control. There are four possible validation status values:</source>
          <target state="translated">控件的验证状态。有四个可能的验证状态值。</target>
        </trans-unit>
        <trans-unit id="98b77f9877456963068b672348f174d66942c7cb" translate="yes" xml:space="preserve">
          <source>The validation uses the TypeScript type checker and the options supplied to the TypeScript compiler to control how detailed the type validation is. For example, if the &lt;code&gt;strictTypeChecks&lt;/code&gt; is specified, the error &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; is reported as well as the above error message.</source>
          <target state="translated">验证使用TypeScript类型检查器和提供给TypeScript编译器的选项来控制类型验证的详细程度。例如，如果指定了 &lt;code&gt;strictTypeChecks&lt;/code&gt; ，则会报告错误 &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; 以及上述错误消息。</target>
        </trans-unit>
        <trans-unit id="a629e0949c3e58ce213f6f6bd6ae68dbb3fa29cd" translate="yes" xml:space="preserve">
          <source>The validator code is as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d21ce6b8675f7d9e43afcf309b4fddb296bc7b1" translate="yes" xml:space="preserve">
          <source>The validator code is as follows:</source>
          <target state="translated">验证器代码如下:</target>
        </trans-unit>
        <trans-unit id="c9d7dbc5ca49f1ab98a4c94cd5b17358e1f32e71" translate="yes" xml:space="preserve">
          <source>The validator retrieves the child controls by calling the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;'s &lt;a href=&quot;../api/forms/abstractcontrol#get&quot;&gt;get&lt;/a&gt; method, then compares the values of the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt; controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e446494ebae458b5aea2681dfd535005a9fb5001" translate="yes" xml:space="preserve">
          <source>The value</source>
          <target state="translated">价值</target>
        </trans-unit>
        <trans-unit id="b3ab44397f0e829c1263e8d41c48f13f570826c7" translate="yes" xml:space="preserve">
          <source>The value accessor for the control</source>
          <target state="translated">控制的值存取器</target>
        </trans-unit>
        <trans-unit id="516bd69561122628d42ad25e8281d2c0a9abe779" translate="yes" xml:space="preserve">
          <source>The value for each day of the week, based on the &lt;code&gt;en-US&lt;/code&gt; locale</source>
          <target state="translated">一周中每一天的值（基于 &lt;code&gt;en-US&lt;/code&gt; 语言环境）</target>
        </trans-unit>
        <trans-unit id="c2748ca458055ddfd5db76827b1b28c8b741c19c" translate="yes" xml:space="preserve">
          <source>The value is the statement to execute when the event occurs. If the statement evaluates to &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;preventDefault&lt;/code&gt; is applied on the DOM event. A handler method can refer to the &lt;code&gt;$event&lt;/code&gt; local variable.</source>
          <target state="translated">该值是事件发生时要执行的语句。如果该语句的评估结果为 &lt;code&gt;false&lt;/code&gt; ，则对DOM事件应用 &lt;code&gt;preventDefault&lt;/code&gt; 。处理程序方法可以引用 &lt;code&gt;$event&lt;/code&gt; 局部变量。</target>
        </trans-unit>
        <trans-unit id="a8273c4bd416c41f6f045c126981755bb55c2fa6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; has the &lt;code&gt;any&lt;/code&gt; type. Later you'll encounter the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; and it too has the &lt;code&gt;any&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; 的值具有 &lt;code&gt;any&lt;/code&gt; 类型。稍后您将遇到 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; ，它也具有 &lt;code&gt;any&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="0ad903e2fa7af996e920297f63f7b7748e6d5872" translate="yes" xml:space="preserve">
          <source>The value of &lt;em&gt;settingOrProject&lt;/em&gt; is one of the following.</source>
          <target state="translated">&lt;em&gt;settingOrProject&lt;/em&gt;的值是以下值之一。</target>
        </trans-unit>
        <trans-unit id="74c4007c0c9568fe1d9f263c845a7b9cdffe9674" translate="yes" xml:space="preserve">
          <source>The value of a &lt;em&gt;value provider&lt;/em&gt; must be defined before you specify it here. The title string literal is immediately available. The &lt;code&gt;someHero&lt;/code&gt; variable in this example was set earlier in the file as shown below. You can't use a variable whose value will be defined later.</source>
          <target state="translated">在此处指定&lt;em&gt;值提供者&lt;/em&gt;之前，必须先定义它。标题字符串文字立即可用。如下所示，本示例中的 &lt;code&gt;someHero&lt;/code&gt; 变量已在文件中进行了更早的设置。您不能使用稍后将定义其值的变量。</target>
        </trans-unit>
        <trans-unit id="c638e133e6a98cc0fc2d797245f610b6e500f4d6" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;enableIvy&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt; by default, as of version 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e40077c9021d6667f8d32f6871c8f00bc068d9d" translate="yes" xml:space="preserve">
          <source>The value of the iterable expression, which can be used as a &lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;template input variable&lt;/a&gt;.</source>
          <target state="translated">可迭代表达式的值，可以将其用作&lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;模板输入变量&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e5b7782babd6cd47ebb1077395fdc52934d8acaf" translate="yes" xml:space="preserve">
          <source>The value or values to delete for the given header.</source>
          <target state="translated">对于给定的头,要删除的值。</target>
        </trans-unit>
        <trans-unit id="c3a47c38e67f33789b5fcdb66f3ebef0b8ae5f17" translate="yes" xml:space="preserve">
          <source>The value or values to set or overide for the given header.</source>
          <target state="translated">要为给定的头设置或覆盖的值。</target>
        </trans-unit>
        <trans-unit id="9ea1a4ae4b9c004c5d2afcb14b6504f978c0f7ea" translate="yes" xml:space="preserve">
          <source>The value to append.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b048ad41afe70b72be36c6e88e6bdc321667a94" translate="yes" xml:space="preserve">
          <source>The value to emit.</source>
          <target state="translated">要发出的数值。</target>
        </trans-unit>
        <trans-unit id="1d37da7064bd8c9a2adb3a8365e6b179578a33bb" translate="yes" xml:space="preserve">
          <source>The value to inject.</source>
          <target state="translated">要注入的数值。</target>
        </trans-unit>
        <trans-unit id="965b65af75152cd8483b194aca89f3d4a3563d3b" translate="yes" xml:space="preserve">
          <source>The value to remove, if provided.</source>
          <target state="translated">要删除的值,如果提供的话。</target>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes" xml:space="preserve">
          <source>The value.</source>
          <target state="translated">价值。</target>
        </trans-unit>
        <trans-unit id="752b8837b88dbea5e1b07283811801b832bbf900" translate="yes" xml:space="preserve">
          <source>The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only boolean, number, string, null and non-class objects will be serialized and deserialzied in a non-lossy manner.</source>
          <target state="translated">存储器中的值使用JSON.stringify/JSON.parse进行序列化/反序列化。因此,只有布尔、数字、字符串、null和非类对象才会以无损的方式被序列化和反序列化。</target>
        </trans-unit>
        <trans-unit id="52ff44818e20f7220d3cd6a6457d439574feaba5" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;heroForm&lt;/code&gt; is now a reference to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive that governs the form as a whole.</source>
          <target state="translated">变量 &lt;code&gt;heroForm&lt;/code&gt; 现在是对 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令的引用，该指令控制整个窗体。</target>
        </trans-unit>
        <trans-unit id="54da2a6d6e9f9a935b31b81218374530af583f38" translate="yes" xml:space="preserve">
          <source>The verbose form shows that &lt;code&gt;ref2&lt;/code&gt; is outside the parent template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f524c06d92d1f81ab05583d4d275b72aa86fd3a" translate="yes" xml:space="preserve">
          <source>The version identifier of the app is determined by the contents of all resources, and it changes if any of them change. In practice, the version is determined by the contents of the &lt;code&gt;ngsw.json&lt;/code&gt; file, which includes hashes for all known content. If any of the cached files change, the file's hash will change in &lt;code&gt;ngsw.json&lt;/code&gt;, causing the Angular service worker to treat the active set of files as a new version.</source>
          <target state="translated">应用程序的版本标识符由所有资源的内容确定，如果其中任何一个发生更改，它就会更改。实际上，版本由 &lt;code&gt;ngsw.json&lt;/code&gt; 文件的内容确定，其中包括所有已知内容的哈希值。如果任何缓存的文件发生更改，则 &lt;code&gt;ngsw.json&lt;/code&gt; 中的文件哈希将发生更改，从而导致Angular服务工作人员将活动文件集视为新版本。</target>
        </trans-unit>
        <trans-unit id="61010f814fd314444171513bbb7090fb2e7c56e3" translate="yes" xml:space="preserve">
          <source>The version number is incremented based on the level of change included in the release.</source>
          <target state="translated">版本号根据版本中包含的变化程度而递增。</target>
        </trans-unit>
        <trans-unit id="a40aa756483f3a5f523498855f5257b57156b5a8" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the initial project.</source>
          <target state="translated">在初始项目中要使用的视图封装策略。</target>
        </trans-unit>
        <trans-unit id="fa51a23f655a6d3d42ddb64f7327a8e642728256" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the new app.</source>
          <target state="translated">新应用中要使用的视图封装策略。</target>
        </trans-unit>
        <trans-unit id="fcf377037a7d42bc71c7f002d89b4f46b0d68cfa" translate="yes" xml:space="preserve">
          <source>The view encapsulation strategy to use in the new component.</source>
          <target state="translated">新组件中要使用的视图封装策略。</target>
        </trans-unit>
        <trans-unit id="3f5b538e2927dd6de153329e296a74a421bc0c36" translate="yes" xml:space="preserve">
          <source>The view encapsulation type, which determines how styles are applied to DOM elements. One of</source>
          <target state="translated">视图封装类型,它决定了如何将样式应用于DOM元素。其中的</target>
        </trans-unit>
        <trans-unit id="52604a8e00ae2362f799cae913f8150372948692" translate="yes" xml:space="preserve">
          <source>The view hierarchy doesn't imply a component hierarchy. Views that are embedded in the context of a particular hierarchy can be host views of other components. Those components can be in the same NgModule as the hosting component, or belong to other NgModules.</source>
          <target state="translated">视图层次结构并不意味着组件层次结构。嵌入特定层次结构上下文中的视图可以是其他组件的宿主视图。这些组件可以和宿主组件在同一个NgModule中,也可以属于其他NgModule。</target>
        </trans-unit>
        <trans-unit id="c7838a7b8c734a7282cb30df6d8616064238194b" translate="yes" xml:space="preserve">
          <source>The view to insert.</source>
          <target state="translated">要插入的视图。</target>
        </trans-unit>
        <trans-unit id="4ea024c3fe94500d702337f77198fe17d570e08e" translate="yes" xml:space="preserve">
          <source>The view to move.</source>
          <target state="translated">的观点,以动。</target>
        </trans-unit>
        <trans-unit id="64ae54575a804f27c02ce687200e683460668cdb" translate="yes" xml:space="preserve">
          <source>The view to query.</source>
          <target state="translated">要查询的视图。</target>
        </trans-unit>
        <trans-unit id="c984239cd56798261fc1dbd922778058b32b773d" translate="yes" xml:space="preserve">
          <source>The view-to-model diagram shows how data flows when an input field's value is changed from the view through the following steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7eca5f51435a85c65dffa7d0a3287d518cfc6d9" translate="yes" xml:space="preserve">
          <source>The virtual file system is represented by a &lt;code&gt;Tree&lt;/code&gt;. The &lt;code&gt;Tree&lt;/code&gt; data structure contains a &lt;em&gt;base&lt;/em&gt; (a set of files that already exists) and a &lt;em&gt;staging area&lt;/em&gt; (a list of changes to be applied to the base). When making modifications, you don't actually change the base, but add those modifications to the staging area.</source>
          <target state="translated">虚拟文件系统由 &lt;code&gt;Tree&lt;/code&gt; 表示。的 &lt;code&gt;Tree&lt;/code&gt; 数据结构包含一个&lt;em&gt;基座&lt;/em&gt;（一组已存在的文件）和一个&lt;em&gt;分段区域&lt;/em&gt;（更改列表要被施加到基）。进行修改时，您实际上并没有更改基准，而是将这些修改添加到登台区域。</target>
        </trans-unit>
        <trans-unit id="2cefd7f9cff91ac8ee2cb82756abed3d99ad82ad" translate="yes" xml:space="preserve">
          <source>The web is used by a wide variety of people, including those who have visual or motor impairments. A variety of assistive technologies are available that make it much easier for these groups to interact with web-based software applications. In addition, designing an application to be more accessible generally improves the user experience for all users.</source>
          <target state="translated">各种各样的人都在使用网络,包括有视觉或运动障碍的人。现在有各种辅助技术,使这些群体更容易与网络软件应用程序互动。此外,将应用程序设计得更加无障碍,通常可以改善所有用户的用户体验。</target>
        </trans-unit>
        <trans-unit id="0870b1ddd7a401e28edca7748851260cf0d812b1" translate="yes" xml:space="preserve">
          <source>The web server must distinguish &lt;em&gt;app page requests&lt;/em&gt; from other kinds of requests.</source>
          <target state="translated">Web服务器必须将&lt;em&gt;应用程序页面请求&lt;/em&gt;与其他类型的请求区分开。</target>
        </trans-unit>
        <trans-unit id="3bcd56955050ccb3584a4da36608073e9ca82456" translate="yes" xml:space="preserve">
          <source>The wildcard state &lt;code&gt;*&lt;/code&gt; matches to &lt;em&gt;any&lt;/em&gt; state, including &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">通配符状态 &lt;code&gt;*&lt;/code&gt; 匹配&lt;em&gt;任何&lt;/em&gt;状态，包括 &lt;code&gt;void&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdfa623802e57793c0a1db6ff9d61453c796514c" translate="yes" xml:space="preserve">
          <source>The word &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; in the interpolation binding, right after the pipe operator ( | ), activates the built-in &lt;code&gt;UppercasePipe&lt;/code&gt;.</source>
          <target state="translated">插值绑定中的 &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; 单词紧接在管道运算符（|）之后，激活内置的 &lt;code&gt;UppercasePipe&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b02e653c1a608596d35a7fd022b60a7182b55381" translate="yes" xml:space="preserve">
          <source>The wording of each guideline indicates how strong the recommendation is.</source>
          <target state="translated">每条准则的措辞表明了建议的力度。</target>
        </trans-unit>
        <trans-unit id="7c860c7e7f5c46dabbf52c5dc7a52a91bc246694" translate="yes" xml:space="preserve">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you add Angular assets to the &lt;code&gt;angular.module&lt;/code&gt; property. In Angular, you create one or more classes adorned with an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator that describes Angular assets in metadata. The differences blossom from there.</source>
          <target state="translated">它们的细节在体系结构和实现上完全不同。在AngularJS中，将Angular资产添加到 &lt;code&gt;angular.module&lt;/code&gt; 属性。在Angular中，您可以创建一个或多个用 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器修饰的类，该装饰器描述元数据中的Angular资产。差异从那里开始。</target>
        </trans-unit>
        <trans-unit id="1c9f03dfa8dacad02e2c3ca38cbf5ee7fdadd4d0" translate="yes" xml:space="preserve">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you create a module by specifying its name and dependencies with &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module()&lt;/a&gt;. Then you can add assets using its various methods. In Angular, you create a class adorned with an &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt; decorator that describes assets in metadata.</source>
          <target state="translated">它们的细节在体系结构和实现上完全不同。在AngularJS中，通过使用&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module（）&lt;/a&gt;指定模块的名称和依赖关系来创建模块。然后，您可以使用其各种方法添加资产。在Angular中，您将创建一个用&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;装饰器修饰的类，该装饰器描述元数据中的资产。</target>
        </trans-unit>
        <trans-unit id="4a746b75626a8bf1b8d141962d550672ee26a9a0" translate="yes" xml:space="preserve">
          <source>Then Angular calls the &lt;code&gt;ngAfterViewInit&lt;/code&gt; lifecycle hook at which time it is &lt;em&gt;too late&lt;/em&gt; to update the parent view's display of the countdown seconds. Angular's unidirectional data flow rule prevents updating the parent view's in the same cycle. The app has to &lt;em&gt;wait one turn&lt;/em&gt; before it can display the seconds.</source>
          <target state="translated">然后，Angular调用 &lt;code&gt;ngAfterViewInit&lt;/code&gt; 生命周期挂钩，此时更新父视图的倒数秒显示&lt;em&gt;为时已晚&lt;/em&gt;。 Angular的单向数据流规则阻止在同一周期中更新父视图。该应用程序必须&lt;em&gt;等待一转&lt;/em&gt;才能显示秒数。</target>
        </trans-unit>
        <trans-unit id="dbecf897d73ac2b6641e82fba7920890079f1124" translate="yes" xml:space="preserve">
          <source>Then add &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata's &lt;code&gt;imports&lt;/code&gt; array, which contains a list of external modules that the app needs.</source>
          <target state="translated">然后将 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据的 &lt;code&gt;imports&lt;/code&gt; 数组，该数组包含应用程序需要的外部模块的列表。</target>
        </trans-unit>
        <trans-unit id="302c6ab52d600acc4553bea66d084dd5f7f37330" translate="yes" xml:space="preserve">
          <source>Then add a &lt;em&gt;parameterized&lt;/em&gt; route to the &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; array that matches the path pattern to the &lt;em&gt;hero detail&lt;/em&gt; view.</source>
          <target state="translated">然后将&lt;em&gt;参数化的&lt;/em&gt;路线添加到 &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; 数组中，该路线将路径图案与&lt;em&gt;英雄详细信息&lt;/em&gt;视图匹配。</target>
        </trans-unit>
        <trans-unit id="7087a31795c1cc6622e1648ea10337e6e7796752" translate="yes" xml:space="preserve">
          <source>Then add it to the &lt;code&gt;providers&lt;/code&gt; array of the testing module configuration:</source>
          <target state="translated">然后将其添加到测试模块配置的 &lt;code&gt;providers&lt;/code&gt; 数组中：</target>
        </trans-unit>
        <trans-unit id="476c63ff60da4bb61e86cb5f4efd206fa03aa9dc" translate="yes" xml:space="preserve">
          <source>Then add the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; and continue with the setup of the &lt;em&gt;service-under-test&lt;/em&gt;.</source>
          <target state="translated">然后将 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; ,然后继续进行&lt;em&gt;被测服务&lt;/em&gt;的设置。</target>
        </trans-unit>
        <trans-unit id="1bfa821c841240ffbf8adf699d29a6b8346ac678" translate="yes" xml:space="preserve">
          <source>Then add two event handlers that respond when the mouse enters or leaves, each adorned by the &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">然后添加两个事件处理程序，它们在鼠标进入或离开时作出响应，每个事件处理程序都由 &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 装饰器修饰。</target>
        </trans-unit>
        <trans-unit id="2077cb3e1b43eb4d0aa0bdfb4e87ddd6fe05d012" translate="yes" xml:space="preserve">
          <source>Then change &lt;code&gt;main-aot.ts&lt;/code&gt; to bootstrap the &lt;code&gt;AppComponentFactory&lt;/code&gt; that was generated by the AOT compiler:</source>
          <target state="translated">然后更改 &lt;code&gt;main-aot.ts&lt;/code&gt; 以引导由AOT编译器生成的 &lt;code&gt;AppComponentFactory&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8f98a3b01b00f3cdc0645e1bb016df36002ccc41" translate="yes" xml:space="preserve">
          <source>Then create some HTML to try it.</source>
          <target state="translated">然后创建一些HTML来尝试。</target>
        </trans-unit>
        <trans-unit id="ed0c20efaf787e9c5968245911ff8d07f8f0da7a" translate="yes" xml:space="preserve">
          <source>Then declare them in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration next to the components, directives, and pipes that need to be real.</source>
          <target state="translated">然后在需要真实存在的组件，指令和管道旁边的 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 配置中声明它们。</target>
        </trans-unit>
        <trans-unit id="e412dc563abd459ce251cf7cfccd9f863136e63b" translate="yes" xml:space="preserve">
          <source>Then each test invokes &lt;code&gt;setup()&lt;/code&gt; in its first line, before continuing with steps that manipulate the test subject and assert expectations.</source>
          <target state="translated">然后，每个测试将在其第一行中调用 &lt;code&gt;setup()&lt;/code&gt; ，然后继续进行操作测试对象并声明期望的步骤。</target>
        </trans-unit>
        <trans-unit id="150a9555cd5004b3999517db04d6f79faab05564" translate="yes" xml:space="preserve">
          <source>Then exercise the component class, remembering to call the &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hook methods&lt;/a&gt; as Angular does when running the app.</source>
          <target state="translated">然后练习组件类，记住要像运行应用程序时Angular那样调用&lt;a href=&quot;lifecycle-hooks&quot;&gt;生命周期挂钩方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb4a68d7b2f52dce99079de606d30ebaa5bb531f" translate="yes" xml:space="preserve">
          <source>Then go to &lt;code&gt;localhost:4200&lt;/code&gt; where you should see &amp;ldquo;app works!&amp;rdquo; and three buttons.</source>
          <target state="translated">然后转到 &lt;code&gt;localhost:4200&lt;/code&gt; ，您应该在其中看到&amp;ldquo;应用程序有效！&amp;rdquo; 和三个按钮。</target>
        </trans-unit>
        <trans-unit id="a49419a5b8645cd07645760c057756d92e18c23d" translate="yes" xml:space="preserve">
          <source>Then go to &lt;code&gt;localhost:4200&lt;/code&gt; where you should see &amp;ldquo;customer-app&amp;rdquo; and three buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38933987a79b6e0405d4682b79b28629cbf06cda" translate="yes" xml:space="preserve">
          <source>Then import and add it to the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;providers array&lt;/em&gt; like this:</source>
          <target state="translated">然后将其导入并添加到 &lt;code&gt;AppModule&lt;/code&gt; &lt;em&gt;provider数组中，&lt;/em&gt;如下所示：</target>
        </trans-unit>
        <trans-unit id="ba51c703735b0a9ca10a1f38c791fa66ebf4dc99" translate="yes" xml:space="preserve">
          <source>Then inject &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; into your Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; and use it to bootstrap the top level &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJS module&lt;/a&gt; in the &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method.</source>
          <target state="translated">然后将 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 注入到Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 中,并使用它在 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 方法中引导顶级&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJS模块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea80e24f31be172808e0a76630ab02df1fbba4cf" translate="yes" xml:space="preserve">
          <source>Then inject it inside a test by calling &lt;code&gt;TestBed.get()&lt;/code&gt; with the service class as the argument.</source>
          <target state="translated">然后通过使用服务类作为参数调用 &lt;code&gt;TestBed.get()&lt;/code&gt; 将其注入测试。</target>
        </trans-unit>
        <trans-unit id="dee306a2d35591d51fe2402e82a0ca9f0820f749" translate="yes" xml:space="preserve">
          <source>Then inject it inside a test by calling &lt;code&gt;TestBed.inject()&lt;/code&gt; with the service class as the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed47e3226a89095f74e2f4a490e662cccb0ebbc0" translate="yes" xml:space="preserve">
          <source>Then modify the &lt;code&gt;app.component.ts&lt;/code&gt; file by changing the template and the body of the component.</source>
          <target state="translated">然后通过更改模板和组件主体来修改 &lt;code&gt;app.component.ts&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="8f2ea7f19a02db5f1bb037406ad378d2b4d2753b" translate="yes" xml:space="preserve">
          <source>Then provide and inject &lt;em&gt;both the&lt;/em&gt;&lt;strong&gt;component&lt;/strong&gt;&lt;em&gt;and the service&lt;/em&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration.</source>
          <target state="translated">然后提供并注入&lt;em&gt;两&lt;/em&gt;&lt;strong&gt;分量&lt;/strong&gt;&lt;em&gt;和服务&lt;/em&gt;在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 配置。</target>
        </trans-unit>
        <trans-unit id="6575d9ffd1443fafb383b5f99065fc07d42c1e8a" translate="yes" xml:space="preserve">
          <source>Then provide the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; in the main module:</source>
          <target state="translated">然后在主模块中提供 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5cd36815d6513b0d19bf87503dfe0afab93f9fa9" translate="yes" xml:space="preserve">
          <source>Then reload with &lt;code&gt;Cmd+r&lt;/code&gt; or &lt;code&gt;Ctrl+r&lt;/code&gt;, depending on your platform.</source>
          <target state="translated">然后根据您的平台使用 &lt;code&gt;Cmd+r&lt;/code&gt; 或 &lt;code&gt;Ctrl+r&lt;/code&gt; 重新加载。</target>
        </trans-unit>
        <trans-unit id="62acde2949df74c80c6b969effb470f5543854f7" translate="yes" xml:space="preserve">
          <source>Then the following link &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; will generate the link &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt;.</source>
          <target state="translated">然后下面的链接 &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 将生成的链接 &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf4cba0cf8f8221ce918d56c4b25cb5bf60574f6" translate="yes" xml:space="preserve">
          <source>Then use &lt;code&gt;relativeTo&lt;/code&gt; in your navigation method. After the link parameters array, which here contains &lt;code&gt;items&lt;/code&gt;, add an object with the &lt;code&gt;relativeTo&lt;/code&gt; property set to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, which is &lt;code&gt;this.route&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a24e38017cc0ca331b2c164af11448fb71f88f" translate="yes" xml:space="preserve">
          <source>Then use the service inside your component by injecting it in the component constructor using its class as a type annotation:</source>
          <target state="translated">然后通过在组件构造函数中使用它的类作为类型注解来在组件中使用服务。</target>
        </trans-unit>
        <trans-unit id="3d28664e3228d12b67d0ad4e11b39b8bfa234399" translate="yes" xml:space="preserve">
          <source>Then you can assert that the quote element displays the expected text.</source>
          <target state="translated">然后你可以断言引号元素显示的是预期的文本。</target>
        </trans-unit>
        <trans-unit id="fb5aa1a656847347c6ad33e809979b893a2a0af1" translate="yes" xml:space="preserve">
          <source>Then you can use the &quot;upgraded&quot; AngularJS service by injecting it into an Angular component or service.</source>
          <target state="translated">然后,你可以通过将 &quot;升级 &quot;的AngularJS服务注入到Angular组件或服务中来使用它。</target>
        </trans-unit>
        <trans-unit id="7235d5f78eb3fc75c9de23a894249dff7395ce21" translate="yes" xml:space="preserve">
          <source>Then you create a child component (B) that defines its own, &lt;em&gt;specialized&lt;/em&gt; providers for &lt;code&gt;CarService&lt;/code&gt; and &lt;code&gt;EngineService&lt;/code&gt; that have special capabilities suitable for whatever is going on in component (B).</source>
          <target state="translated">然后创建定义了自己，一个子组件（B），&lt;em&gt;专门&lt;/em&gt;为供应商 &lt;code&gt;CarService&lt;/code&gt; 和 &lt;code&gt;EngineService&lt;/code&gt; 有适合无论是在成分（B）要去的特殊能力。</target>
        </trans-unit>
        <trans-unit id="13b7250037e2791c30d8b2b60220889c166804a2" translate="yes" xml:space="preserve">
          <source>Then you inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;HeroListComponent&lt;/code&gt; constructor.</source>
          <target state="translated">然后，在 &lt;code&gt;HeroListComponent&lt;/code&gt; 构造函数中注入 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06b87cc1eeb739adae3341e69733b9a6c335c899" translate="yes" xml:space="preserve">
          <source>Then you should define an Angular provider to be included in your &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; property.</source>
          <target state="translated">然后，您应该定义一个Angular提供程序以包含在 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; 属性中。</target>
        </trans-unit>
        <trans-unit id="3996f4d02c86b0214c6856fbd020c552536ef23e" translate="yes" xml:space="preserve">
          <source>Then you tell the &lt;code&gt;HeroService&lt;/code&gt; to fetch the hero with that &lt;code&gt;id&lt;/code&gt; and return the result of the &lt;code&gt;HeroService&lt;/code&gt; request.</source>
          <target state="translated">然后，您告诉 &lt;code&gt;HeroService&lt;/code&gt; 使用该 &lt;code&gt;id&lt;/code&gt; 提取英雄，并返回 &lt;code&gt;HeroService&lt;/code&gt; 请求的结果。</target>
        </trans-unit>
        <trans-unit id="ed06e960c3c34ee183cdb9c0a6a2a5d5f20a03f6" translate="yes" xml:space="preserve">
          <source>Then, another animation can be called when the current animation finishes. For example, the button goes from the &lt;code&gt;inProgress&lt;/code&gt; state to the &lt;code&gt;closed&lt;/code&gt; state when the API call is completed.</source>
          <target state="translated">然后，当当前动画结束时可以调用另一个动画。例如，按钮从去 &lt;code&gt;inProgress&lt;/code&gt; 状态为 &lt;code&gt;closed&lt;/code&gt; 状态完成API调用时。</target>
        </trans-unit>
        <trans-unit id="6309056a807e88260ec1b8e1f7ee99de74f63bb1" translate="yes" xml:space="preserve">
          <source>Then, the code contains an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator with the &lt;code&gt;childItem&lt;/code&gt; property so data can flow into it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf82d0382f477967edce3fb6b12681334c96dc8" translate="yes" xml:space="preserve">
          <source>Then, when some component injects &lt;code&gt;UserService&lt;/code&gt;, Angular finds it in the app root injector, and delivers the app-wide singleton service. No problem.</source>
          <target state="translated">然后，当某些组件注入 &lt;code&gt;UserService&lt;/code&gt; 时，Angular在应用程序根注入器中找到它，并提供应用程序范围内的单例服务。没问题。</target>
        </trans-unit>
        <trans-unit id="c3a0ceb7d76985503f10a062c39d4ecc9f73b6e5" translate="yes" xml:space="preserve">
          <source>Then, when you need that file&amp;rsquo;s code in another file, you import it like this:</source>
          <target state="translated">然后，当您在另一个文件中需要该文件的代码时，可以像这样导入它：</target>
        </trans-unit>
        <trans-unit id="7f94783b2fdbdd4b5788239abe980a7f9c2a0feb" translate="yes" xml:space="preserve">
          <source>Then, you change into your library directory to build the schematic</source>
          <target state="translated">然后,你换到你的库目录下建立原理图。</target>
        </trans-unit>
        <trans-unit id="b558f2a5f6c20368ac31efe8ab04dc45d807c8b6" translate="yes" xml:space="preserve">
          <source>There are &lt;em&gt;important differences&lt;/em&gt; in the way the router treats these &lt;em&gt;child routes&lt;/em&gt;.</source>
          <target state="translated">路由器对待这些&lt;em&gt;子路由&lt;/em&gt;的方式存在&lt;em&gt;重要差异&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="566ab24996dda55d07b696f9fcb91995338b7d7a" translate="yes" xml:space="preserve">
          <source>There are a few cases where you give a component an attribute, such as when you want to augment a built-in element. For example, &lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;Material Design&lt;/a&gt; uses this technique with &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt;. However, you wouldn't use this technique on a custom element.</source>
          <target state="translated">在某些情况下，您可以给组件赋予属性，例如，当您想扩展内置元素时。例如，&lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;Material Design&lt;/a&gt;将这种技术与 &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt; 一起使用。但是，您不会在自定义元素上使用此技术。</target>
        </trans-unit>
        <trans-unit id="4a44db3593849baa6fd286f1a9dad3ee4be9f41f" translate="yes" xml:space="preserve">
          <source>There are a few exceptional observables where this is not necessary. The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; observables are among the exceptions.</source>
          <target state="translated">有一些不需要观察的例外观察点。该 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 观测是例外之一。</target>
        </trans-unit>
        <trans-unit id="1e9c60f04e3a15c6ff01e79a5018c059fb20d209" translate="yes" xml:space="preserve">
          <source>There are a few limited reasons why the Angular service worker might change the version of a running app. Some of them are error conditions:</source>
          <target state="translated">Angular服务工作者可能会改变正在运行的应用程序的版本,有几个有限的原因。其中一些是错误条件。</target>
        </trans-unit>
        <trans-unit id="a6013a4fe41dc5c7411d2f89c39f1e20616a17ba" translate="yes" xml:space="preserve">
          <source>There are a few options if you want to get correct types for your custom elements. Let's assume you create a &lt;code&gt;my-dialog&lt;/code&gt; custom element based on the following component:</source>
          <target state="translated">如果要为自定义元素获取正确的类型，则有一些选项。假设您基于以下组件创建 &lt;code&gt;my-dialog&lt;/code&gt; 自定义元素：</target>
        </trans-unit>
        <trans-unit id="3191a1618b8faa99c49daa031fba849003a13bd3" translate="yes" xml:space="preserve">
          <source>There are a few rules in particular that will make it much easier to do &lt;em&gt;an incremental upgrade&lt;/em&gt; using the Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; module:</source>
          <target state="translated">特别是有一些规则可以使使用Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 模块&lt;em&gt;进行增量升级&lt;/em&gt;更加容易：</target>
        </trans-unit>
        <trans-unit id="a01d9115f3a3ad52c673da81193da8c683b0a1c6" translate="yes" xml:space="preserve">
          <source>There are a few things to note, though:</source>
          <target state="translated">不过有几点需要注意。</target>
        </trans-unit>
        <trans-unit id="cdc057156f4a0afc834e3e15f4b4be9942560eb6" translate="yes" xml:space="preserve">
          <source>There are a number of options for modifying the default search behavior, using &lt;em&gt;parameter decorators&lt;/em&gt; on the service-valued parameters of a class constructor.</source>
          <target state="translated">在类构造函数的服务值参数上使用&lt;em&gt;参数修饰符&lt;/em&gt;，可以使用许多选项来修改默认搜索行为。</target>
        </trans-unit>
        <trans-unit id="c676ec6b692f6df001e20a544ca9a4ac7cc35255" translate="yes" xml:space="preserve">
          <source>There are also completions within elements. Any elements you have as a component selector will show up in the completion list.</source>
          <target state="translated">元素中也有补全。任何您作为组件选择器的元素都会显示在完成列表中。</target>
        </trans-unit>
        <trans-unit id="2b0041e80379dba90a5c135457752493c4e52ac4" translate="yes" xml:space="preserve">
          <source>There are configuration files for both the &lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScript test runner&lt;/a&gt; and &lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractor&lt;/a&gt; end-to-end testing tool, which you must adjust to start Chrome without sandboxing.</source>
          <target state="translated">&lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScript测试运行程序&lt;/a&gt;和&lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractor&lt;/a&gt;端到端测试工具都有配置文件，您必须调整这些文件才能启动Chrome，而无需沙盒测试。</target>
        </trans-unit>
        <trans-unit id="8f70e6e9da25ad1b098bbc6719f6c5877729d762" translate="yes" xml:space="preserve">
          <source>There are five general categories of feature modules which tend to fall into the following groups:</source>
          <target state="translated">功能模块一般分为五类,它们往往分为以下几组。</target>
        </trans-unit>
        <trans-unit id="f083c43f33d22558e0080c2eef9a154aecda0827" translate="yes" xml:space="preserve">
          <source>There are important differences in the way the router treats child routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d24499582f9d74be4e55dfd292e78d548d73a51" translate="yes" xml:space="preserve">
          <source>There are many more interceptors in the complete sample code.</source>
          <target state="translated">在完整的示例代码中,还有很多拦截器。</target>
        </trans-unit>
        <trans-unit id="a08951de0f1de6bd2f6e60bba79ba111ed7ae1d7" translate="yes" xml:space="preserve">
          <source>There are many resources to complement the Angular docs. Mozilla's MDN docs include both &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt; introductions. &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript's docs&lt;/a&gt; include a 5-minute tutorial. Various online course platforms, such as &lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt; and &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, also cover web development basics.</source>
          <target state="translated">有很多资源可以补充Angular文档。Mozilla的MDN文档包括&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt;简介。&lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript的文档&lt;/a&gt;包括一个5分钟的教程。&lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt;和&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;等各种在线课程平台也涵盖了Web开发基础。</target>
        </trans-unit>
        <trans-unit id="66ad0af28f7ac3d95ccbf0739cccfa8af77155a9" translate="yes" xml:space="preserve">
          <source>There are many ways to structure AngularJS applications. When you begin to upgrade these applications to Angular, some will turn out to be much more easy to work with than others. There are a few key techniques and patterns that you can apply to future proof apps even before you begin the migration.</source>
          <target state="translated">AngularJS应用程序的结构有很多方法。当你开始将这些应用程序升级到Angular时,有些会变成比其他应用程序更容易工作。有一些关键的技术和模式,您可以在开始迁移之前就应用于未来证明应用程序。</target>
        </trans-unit>
        <trans-unit id="00d98f0576741a1e108297fca91f90e751881e55" translate="yes" xml:space="preserve">
          <source>There are multiple ways to prevent this:</source>
          <target state="translated">有多种方法可以预防。</target>
        </trans-unit>
        <trans-unit id="ff870a40c32b15241e0dc290ffe99e696ec7e316" translate="yes" xml:space="preserve">
          <source>There are new requirements for the Tour of Heroes app:</source>
          <target state="translated">英雄之旅app有新的要求。</target>
        </trans-unit>
        <trans-unit id="b7c35a18e43689374a55ffc6988124f5f7c095f9" translate="yes" xml:space="preserve">
          <source>There are no easy answers to these questions. Prohibiting multiple structural directives makes them moot. There's an easy solution for this use case: put the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on a container element that wraps the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; element. One or both elements can be an &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;ng-container&lt;/code&gt;&lt;/a&gt; so you don't have to introduce extra levels of HTML.</source>
          <target state="translated">这些问题没有简单的答案。禁止多个结构性指令使它们无济于事。有这种用途的情况下，简单的解决方案：将 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 一个包装容器元素上 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 元素。一个或两个元素都可以是&lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;ng-container&lt;/code&gt; &lt;/a&gt;因此您不必引入额外级别的HTML。</target>
        </trans-unit>
        <trans-unit id="93b4d15b36f576847810650de967eae2da32c1f5" translate="yes" xml:space="preserve">
          <source>There are no parameters for this parent route so you're done with it.</source>
          <target state="translated">这个父路由没有参数,所以你就可以完成了。</target>
        </trans-unit>
        <trans-unit id="08a0080e437b247c15d7d516f9eb6d35b78c311f" translate="yes" xml:space="preserve">
          <source>There are no parameters for this parent route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf8d135851b80ffbe87dcd35d86d4ad22ed02e6" translate="yes" xml:space="preserve">
          <source>There are no parameters.</source>
          <target state="translated">没有参数。</target>
        </trans-unit>
        <trans-unit id="347acdbd61105fadd07872f8156b46696cb3b692" translate="yes" xml:space="preserve">
          <source>There are only two changes. The &lt;code&gt;template&lt;/code&gt; is simply the new element tag identified by the component's &lt;code&gt;selector&lt;/code&gt; property. This displays the hero form when the application component is loaded. Don't forget to remove the &lt;code&gt;name&lt;/code&gt; field from the class body as well.</source>
          <target state="translated">只有两个更改。该 &lt;code&gt;template&lt;/code&gt; 仅仅是由组件标识的新元素标记 &lt;code&gt;selector&lt;/code&gt; 属性。加载应用程序组件时，将显示英雄表格。别忘了从类主体中删除 &lt;code&gt;name&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="159f34be61579ceb6ae8d16ef7ee7eeb786eef01" translate="yes" xml:space="preserve">
          <source>There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others. Although Circle CI and Travis CI are paid services, they are provided free for open source projects. You can create a public project on GitHub and add these services without paying. Contributions to the Angular repo are automatically run through a whole suite of Circle CI tests.</source>
          <target state="translated">有Circle CI和Travis CI这样的付费CI服务,也可以使用Jenkins等免费托管自己的CI服务。虽然Circle CI和Travis CI是付费服务,但它们是免费为开源项目提供的。你可以在GitHub上创建一个公共项目,并添加这些服务而无需付费。对Angular repo的贡献会自动通过一整套Circle CI测试来运行。</target>
        </trans-unit>
        <trans-unit id="879cd324a70c4c96acf893c99d3b9dc84ee024ff" translate="yes" xml:space="preserve">
          <source>There are several examples over the next few sections.</source>
          <target state="translated">接下来的几节有几个例子。</target>
        </trans-unit>
        <trans-unit id="2cf39c6658c13b371aa454d5575113ab2b716d55" translate="yes" xml:space="preserve">
          <source>There are several notable changes here:</source>
          <target state="translated">这里有几个显著的变化。</target>
        </trans-unit>
        <trans-unit id="b3ecb535a2ce87ce6aa9dd8adc9feb06a8b4ddfd" translate="yes" xml:space="preserve">
          <source>There are several ways to add styles to a component:</source>
          <target state="translated">有几种方法可以为一个组件添加样式。</target>
        </trans-unit>
        <trans-unit id="1b266b00929430b0621b4b49767764faeeeeab85" translate="yes" xml:space="preserve">
          <source>There are three categories of directive:</source>
          <target state="translated">指令有三类。</target>
        </trans-unit>
        <trans-unit id="38597e951fad51067690768d9f762544a13ddd71" translate="yes" xml:space="preserve">
          <source>There are three different &lt;em&gt;urgency levels&lt;/em&gt; used to style the alerts based on the severity or importance of the content.</source>
          <target state="translated">根据内容的严重性或重要性，可以使用三种不同的&lt;em&gt;紧急级别&lt;/em&gt;来设置警报样式。</target>
        </trans-unit>
        <trans-unit id="24e9e91fde41867db08419b1f04c4cbe517ddcb5" translate="yes" xml:space="preserve">
          <source>There are three fundamental building blocks to creating a route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76077d148cfb3df1507661f67b5067f5ff2d5a6" translate="yes" xml:space="preserve">
          <source>There are three kinds of directives in Angular:</source>
          <target state="translated">Angular中的指令有三种。</target>
        </trans-unit>
        <trans-unit id="25e737b2092b55d9eb5f239e56b9516518d5f446" translate="yes" xml:space="preserve">
          <source>There are three main reasons to create a Universal version of your app.</source>
          <target state="translated">创建一个通用版的应用程序有三个主要原因。</target>
        </trans-unit>
        <trans-unit id="a4f700c6eaa2262317c0d957e29675f3621c94d0" translate="yes" xml:space="preserve">
          <source>There are three main steps to setting up a lazy-loaded feature module:</source>
          <target state="translated">设置一个懒人加载的功能模块主要有三个步骤。</target>
        </trans-unit>
        <trans-unit id="165573f1548a8f99cacaaa3440578c4519f99108" translate="yes" xml:space="preserve">
          <source>There are three phases of AOT compilation.</source>
          <target state="translated">AOT的编制有三个阶段。</target>
        </trans-unit>
        <trans-unit id="ab9b96e090b917419a7b4b07d60725578c370783" translate="yes" xml:space="preserve">
          <source>There are three significant differences from &lt;code&gt;getHeroes()&lt;/code&gt;:</source>
          <target state="translated">与 &lt;code&gt;getHeroes()&lt;/code&gt; 有三个明显的区别：</target>
        </trans-unit>
        <trans-unit id="6700c051353ace657c742055b93c035122544edb" translate="yes" xml:space="preserve">
          <source>There are three steps to using form controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd01b7be4e57b57b1627f79224ce07af7d2d99e" translate="yes" xml:space="preserve">
          <source>There are three supported input types.</source>
          <target state="translated">有三种支持的输入类型。</target>
        </trans-unit>
        <trans-unit id="f5034306f8346e549a24ab826839194a108f3818" translate="yes" xml:space="preserve">
          <source>There are two categories of pipes: &lt;em&gt;pure&lt;/em&gt; and &lt;em&gt;impure&lt;/em&gt;. Pipes are pure by default. Every pipe you've seen so far has been pure. You make a pipe impure by setting its pure flag to false. You could make the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; impure like this:</source>
          <target state="translated">管道分为两类：&lt;em&gt;纯&lt;/em&gt;管道和&lt;em&gt;不纯&lt;/em&gt;管道。默认情况下，管道是纯管道。到目前为止，您所看到的每条管道都是纯净的。通过将管道的纯标志设置为false，可以使管道不纯。您可以像这样使 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 不纯：</target>
        </trans-unit>
        <trans-unit id="c0d0261683ac70f77d2cb64caaaa6be2e633442f" translate="yes" xml:space="preserve">
          <source>There are two changes:</source>
          <target state="translated">有两个变化。</target>
        </trans-unit>
        <trans-unit id="0757ae2710d35ffd65d63c8e4408b8f8b222e032" translate="yes" xml:space="preserve">
          <source>There are two important things to keep in mind when using Web Workers in Angular projects:</source>
          <target state="translated">在Angular项目中使用Web Workers时,有两件重要的事情需要注意。</target>
        </trans-unit>
        <trans-unit id="ed5307db9a7ed9a50bdf282cc464f6252ca2c8b1" translate="yes" xml:space="preserve">
          <source>There are two independent frameworks running in a single application, each framework treats the other as a black box.</source>
          <target state="translated">在一个应用程序中运行着两个独立的框架,每个框架都把另一个框架当作一个黑盒子。</target>
        </trans-unit>
        <trans-unit id="ad6b0f208e637f748bf275b29c341ba579e95709" translate="yes" xml:space="preserve">
          <source>There are two injector hierarchies in Angular:</source>
          <target state="translated">Angular中有两个注入器层次结构。</target>
        </trans-unit>
        <trans-unit id="43178632845a92d22afa35ca0676f6eb7a1f7062" translate="yes" xml:space="preserve">
          <source>There are two kinds of generated attributes:</source>
          <target state="translated">生成的属性有两种。</target>
        </trans-unit>
        <trans-unit id="ae6efc4f0655823ca7f29eb7bf3eefe1625ce1e5" translate="yes" xml:space="preserve">
          <source>There are two main kinds of entry components:</source>
          <target state="translated">进入组件主要有两种。</target>
        </trans-unit>
        <trans-unit id="36eef38b4cd7460eba454e934ddc760e1199d5bf" translate="yes" xml:space="preserve">
          <source>There are two main steps to setting up a lazy-loaded feature module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550828cc689d902dc2704d305cf15fafb615c2b6" translate="yes" xml:space="preserve">
          <source>There are two more injectors above &lt;code&gt;root&lt;/code&gt;, an additional &lt;code&gt;ModuleInjector&lt;/code&gt; and &lt;code&gt;NullInjector()&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;root&lt;/code&gt; 上方还有两个注入器，一个额外的 &lt;code&gt;ModuleInjector&lt;/code&gt; 和 &lt;code&gt;NullInjector()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec82505f597f4541fee947d1b90b7670a8bfe1fc" translate="yes" xml:space="preserve">
          <source>There are two other kinds of Angular directives, described extensively elsewhere: (1) components and (2) attribute directives.</source>
          <target state="translated">Angular指令还有两种,在其他地方有广泛的描述。(1)组件和(2)属性指令。</target>
        </trans-unit>
        <trans-unit id="eee5ab865a86fd0b73b19b491d8642111214cd0d" translate="yes" xml:space="preserve">
          <source>There are two possible degraded states:</source>
          <target state="translated">有两种可能的退化状态。</target>
        </trans-unit>
        <trans-unit id="bc52776a75e0fe43e572fa425a1db8d585ca5328" translate="yes" xml:space="preserve">
          <source>There are two potential workarounds to the above issues:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25650f34b85cc033bcf18133335c7c20ab26b348" translate="yes" xml:space="preserve">
          <source>There are two types of validator functions: sync validators and async validators.</source>
          <target state="translated">验证器功能有两种类型:同步验证器和异步验证器。</target>
        </trans-unit>
        <trans-unit id="3f8e7458d2bd37a51a02a94b62cdecdc59f8af4c" translate="yes" xml:space="preserve">
          <source>There are two ways to make a service a singleton in Angular:</source>
          <target state="translated">在Angular中,有两种方法可以让一个服务成为一个单人。</target>
        </trans-unit>
        <trans-unit id="faa6ad5446f7861f6ecf46da71ea515c5fb5f071" translate="yes" xml:space="preserve">
          <source>There are two ways to update the model value:</source>
          <target state="translated">有两种方法可以更新模型值。</target>
        </trans-unit>
        <trans-unit id="f26b5471a1dd6edb128afdf26847e8bb73608215" translate="yes" xml:space="preserve">
          <source>There are usually one or more main sections that may be further divided into secondary sections.</source>
          <target state="translated">通常有一个或多个主要部分,可进一步划分为次要部分。</target>
        </trans-unit>
        <trans-unit id="1d5c6b97ecc7419e7dd8afaaeb5bfae0e26e836c" translate="yes" xml:space="preserve">
          <source>There can also be false positives when the typings of an Angular library are either incomplete or incorrect, or when the typings don't quite line up with expectations as in the following cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca00ae37aaf723dcf8b96d9e5fe70f20f93c9cc4" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;tree hierarchy of injectors&lt;/a&gt;, with a root injector and an additional injector for each component.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;注射器&lt;/a&gt;具有树形层次结构，每个组件都有一个根注射器和一个附加注射器。</target>
        </trans-unit>
        <trans-unit id="027fb989b8678c3235e885de0c12df209840f1d8" translate="yes" xml:space="preserve">
          <source>There is a rule for each defined day period. The first rule is applied to the first day period and so on. Fall back to AM/PM when no rules are available.</source>
          <target state="translated">每一个确定的日期间都有一条规则。第一条规则适用于第一天的时段,以此类推。当没有规则时,退回到AM/PM。</target>
        </trans-unit>
        <trans-unit id="7654c24d9c7b87cc2fb7d574ad4e33ff2eb6cd63" translate="yes" xml:space="preserve">
          <source>There is a small but critical difference. In the &lt;code&gt;AppRoutingModule&lt;/code&gt;, you used the static &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; method to register the routes and application level service providers. In a feature module you use the static &lt;strong&gt;&lt;code&gt;forChild&lt;/code&gt;&lt;/strong&gt; method.</source>
          <target state="translated">两者之间存在很小但很关键的差异。在 &lt;code&gt;AppRoutingModule&lt;/code&gt; 中，您使用了静态&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;方法来注册路由和应用程序级别的服务提供者。在功能模块中，使用静态的&lt;strong&gt; &lt;code&gt;forChild&lt;/code&gt; &lt;/strong&gt;方法。</target>
        </trans-unit>
        <trans-unit id="1089bb549e548f1eece3447abc86312a541125a5" translate="yes" xml:space="preserve">
          <source>There is an API for navigating &lt;em&gt;down&lt;/em&gt; the view hierarchy. Check out &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; in the &lt;a href=&quot;../api/index&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">有用于导航的API &lt;em&gt;下来&lt;/em&gt;视图层次结构。在&lt;a href=&quot;../api/index&quot;&gt;API参考中&lt;/a&gt;检出 &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf10db6389feae71b1aa42ec8c45a030a861e2e0" translate="yes" xml:space="preserve">
          <source>There is an important distinction between using another module's component and using a service from another module. Import modules when you want to use directives, pipes, and components. Importing a module with services means that you will have a new instance of that service, which typically is not what you need (typically one wants to reuse an existing service). Use module imports to control service instantiation.</source>
          <target state="translated">使用其他模块的组件和使用其他模块的服务之间有一个重要的区别。当你想使用指令、管道和组件时,请导入模块。导入一个带有服务的模块意味着你将拥有一个新的服务实例,这通常不是你所需要的(通常人们希望重用一个现有的服务)。使用模块导入来控制服务实例化。</target>
        </trans-unit>
        <trans-unit id="cceabdb690dfa8a94f69d03b06952860cf555cc4" translate="yes" xml:space="preserve">
          <source>There is exactly one injector. Even in multi-module applications, everything is poured into one big namespace.</source>
          <target state="translated">正好有一个注入器。即使是在多模块应用中,所有的东西都会被注入到一个大的命名空间中。</target>
        </trans-unit>
        <trans-unit id="8b6ca3d80875d293406dd0f142004f9fede44d55" translate="yes" xml:space="preserve">
          <source>There is no &lt;em&gt;live example&lt;/em&gt; for this cookbook because it describes Visual Studio, not the Angular application itself. It uses the starter Angular application created by the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; as an example.</source>
          <target state="translated">此菜谱没有&lt;em&gt;实时示例&lt;/em&gt;，因为它描述了Visual Studio，而不是Angular应用程序本身。它以CLI命令&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;创建的Starter Angular应用程序为例。</target>
        </trans-unit>
        <trans-unit id="133a9567390a248ff96c3ddfeb770bd616eadd71" translate="yes" xml:space="preserve">
          <source>There is no default for the child route so you need to pick one.</source>
          <target state="translated">子路是没有默认的,所以你需要选择一个。</target>
        </trans-unit>
        <trans-unit id="c9bb67cef244a52a5902839951c12ad9006e5375" translate="yes" xml:space="preserve">
          <source>There is no issue when the user navigates to that URL from within a running client. The Angular router interprets the URL and routes to that page and hero.</source>
          <target state="translated">当用户从正在运行的客户端内导航到该URL时,没有问题。Angular路由器会解释该URL并路由到该页面和英雄。</target>
        </trans-unit>
        <trans-unit id="565fc140f826820d99228d067e03328fac73f380" translate="yes" xml:space="preserve">
          <source>There is no longer a reference to &lt;code&gt;template&lt;/code&gt; and, therefore, nothing to trouble the compiler when it later interprets the &lt;em&gt;collector's&lt;/em&gt; output in &lt;code&gt;.metadata.json&lt;/code&gt;.</source>
          <target state="translated">不再引用 &lt;code&gt;template&lt;/code&gt; ，因此，以后编译器在 &lt;code&gt;.metadata.json&lt;/code&gt; 中解释&lt;em&gt;收集器的&lt;/em&gt;输出时，也不会给编译器带来麻烦。</target>
        </trans-unit>
        <trans-unit id="4e748fc4f70bcf252a46a3d8e24d8e97b2bd9b8c" translate="yes" xml:space="preserve">
          <source>There is no public API for acquiring a parent reference. However, because every component instance is added to an injector's container, you can use Angular dependency injection to reach a parent component.</source>
          <target state="translated">没有公开的API用于获取父引用。然而,由于每个组件实例都被添加到注入器的容器中,你可以使用Angular依赖注入来达到父组件。</target>
        </trans-unit>
        <trans-unit id="9e1f226d0769c2006bed4876b7fe7a774057642d" translate="yes" xml:space="preserve">
          <source>There is no single configuration that works for every server. The following sections describe configurations for some of the most popular servers. The list is by no means exhaustive, but should provide you with a good starting point.</source>
          <target state="translated">没有一种配置可以适用于每台服务器。下面的章节描述了一些最流行的服务器的配置。这个列表绝不是详尽无遗的,但应该为你提供一个良好的起点。</target>
        </trans-unit>
        <trans-unit id="259bb0afbd8fefe05bdc556bd5eef64a565fd518" translate="yes" xml:space="preserve">
          <source>There is no specific API for upgrading an AngularJS service. Instead you should just follow the following recipe:</source>
          <target state="translated">没有特定的API来升级AngularJS服务。相反,你应该只按照下面的配方。</target>
        </trans-unit>
        <trans-unit id="550621addec4fd2e0708772894f55350f2a0f79c" translate="yes" xml:space="preserve">
          <source>There is no upgrade method to convert filters into pipes. You won't miss it. It's easy to turn the filter function into an equivalent Pipe class. The implementation is the same as before, repackaged in the &lt;code&gt;transform&lt;/code&gt; method. Rename the file to &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; to conform with Angular conventions:</source>
          <target state="translated">没有将过滤器转换为管道的升级方法。您将不会错过。将filter函数转换为等效的Pipe类很容易。其实现与之前相同，只是重新包装了 &lt;code&gt;transform&lt;/code&gt; 方法。将文件重命名为 &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; 以符合Angular约定：</target>
        </trans-unit>
        <trans-unit id="781eeaf093073ff0f504a446a6e2751d0558d133" translate="yes" xml:space="preserve">
          <source>There is one exception to this behavior that applies to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;trackBy&lt;/code&gt; functionality that can deal with referential inequality of objects when iterating over them. See &lt;a href=&quot;built-in-directives#ngfor-with-trackby&quot;&gt;*ngFor with &lt;code&gt;trackBy&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4367e8254fa20fae31dcd949ca18914ce55ee3c5" translate="yes" xml:space="preserve">
          <source>There is one exception to this behavior that applies to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;trackBy&lt;/code&gt; functionality that can deal with referential inequality of objects when iterating over them. See &lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;*ngFor with &lt;code&gt;trackBy&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">此行为有一个例外适用于 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 具有 &lt;code&gt;trackBy&lt;/code&gt; 功能，可以在迭代对象时处理对象的引用不平等。有关详细信息，请参见&lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;* ngFor和 &lt;code&gt;trackBy&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7dd62d5ae3789ef38b487eab0e8d1f7f87b82b99" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule. Attributes can be changed by &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt;, which re-initializes corresponding DOM properties.</source>
          <target state="translated">此规则有一个例外。可以通过 &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; 更改属性，该属性将重新初始化相应的DOM属性。</target>
        </trans-unit>
        <trans-unit id="11dbb8bce3c3271a707e1c42a72d9f859744e253" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule. Attributes can be changed by &lt;code&gt;setAttribute()&lt;/code&gt;, which re-initializes corresponding DOM properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33886b39df983b142ac0e4c678d0df8e24d2439" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule: to make local development easier, browsers do &lt;em&gt;not&lt;/em&gt; require a secure connection when accessing an app on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">有一个例外：使当地的开发更容易，浏览器都&lt;em&gt;不会&lt;/em&gt;在访问应用程序时要求进行安全连接 &lt;code&gt;localhost&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56ed5ae7d3569c2686c1ede9ce1a1546720090e8" translate="yes" xml:space="preserve">
          <source>There is only one root injector for an app. Providing &lt;code&gt;UserService&lt;/code&gt; at the &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;AppModule&lt;/code&gt; level means it is registered with the root injector. There is just one &lt;code&gt;UserService&lt;/code&gt; instance in the entire app and every class that injects &lt;code&gt;UserService&lt;/code&gt; gets this service instance &lt;em&gt;unless&lt;/em&gt; you configure another provider with a &lt;em&gt;child injector&lt;/em&gt;.</source>
          <target state="translated">一个应用程序只有一个根注入器。在 &lt;code&gt;root&lt;/code&gt; 或 &lt;code&gt;AppModule&lt;/code&gt; 级别提供 &lt;code&gt;UserService&lt;/code&gt; 意味着它已在根注入器中注册。整个应用程序中只有一个 &lt;code&gt;UserService&lt;/code&gt; 实例，并且注入 &lt;code&gt;UserService&lt;/code&gt; 的每个类都将获得此服务实例，&lt;em&gt;除非&lt;/em&gt;您使用&lt;em&gt;子注入器&lt;/em&gt;配置另一个提供程序。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa0f46f07be6d7bd145a95e639f76d57f093602d" translate="yes" xml:space="preserve">
          <source>There isn't anything the client application can do about these errors. The server must be configured to accept the application's requests. Read about how to enable CORS for specific servers at &lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org&lt;/a&gt;.</source>
          <target state="translated">客户端应用程序无法解决这些错误。必须将服务器配置为接受应用程序的请求。在&lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org上&lt;/a&gt;了解如何为特定服务器启用CORS 。</target>
        </trans-unit>
        <trans-unit id="bd29a80577a16149f809aa709e10802120f26a64" translate="yes" xml:space="preserve">
          <source>There will be one additional argument to the &lt;code&gt;transform&lt;/code&gt; method for each parameter passed to the pipe. Your pipe has one such parameter: the &lt;code&gt;exponent&lt;/code&gt;.</source>
          <target state="translated">对于传递给管道的每个参数， &lt;code&gt;transform&lt;/code&gt; 方法将有一个附加参数。您的管道具有一个这样的参数： &lt;code&gt;exponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cc5eb405460e77c124b415c5ccacffdb138ea7a" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing special about this component, nothing form-specific, nothing to distinguish it from any component you've written before.</source>
          <target state="translated">这个组件没有什么特别的，没有形式上的特殊性，也没有区别于您以前编写的任何组件。</target>
        </trans-unit>
        <trans-unit id="542467bb8ed2c1b3891b718134b4968a6fc9a566" translate="yes" xml:space="preserve">
          <source>There's a good reason for this circuitous path to the element.</source>
          <target state="translated">这条迂回的元素之路是有原因的。</target>
        </trans-unit>
        <trans-unit id="508e59adf4df546f2bbce6e533bf9e238970539b" translate="yes" xml:space="preserve">
          <source>There's a similar helper for producing an async error.</source>
          <target state="translated">有一个类似的帮助程序来产生一个异步错误。</target>
        </trans-unit>
        <trans-unit id="84cc470613727d84aabbfa2c1862c5ad36fcaf45" translate="yes" xml:space="preserve">
          <source>There's also the &lt;code&gt;bind-&lt;/code&gt; prefix alternative:</source>
          <target state="translated">还有 &lt;code&gt;bind-&lt;/code&gt; prefix替代方案：</target>
        </trans-unit>
        <trans-unit id="0909bf3d1ff44badd0511d8a77fa43424485ad25" translate="yes" xml:space="preserve">
          <source>There's an easier way: bind to Angular's &lt;code&gt;keyup.enter&lt;/code&gt; pseudo-event. Then Angular calls the event handler only when the user presses &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">有一种更简单的方法：绑定到Angular的 &lt;code&gt;keyup.enter&lt;/code&gt; 伪事件。然后Angular仅在用户按下&lt;em&gt;Enter&lt;/em&gt;时才调用事件处理程序。</target>
        </trans-unit>
        <trans-unit id="ab30027be9f11ddbb2b70f4586d177e63c2b9249" translate="yes" xml:space="preserve">
          <source>There's another school of testing that never calls &lt;code&gt;beforeEach()&lt;/code&gt; and prefers to create classes explicitly rather than use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">还有另一种测试方法，它从不调用 &lt;code&gt;beforeEach()&lt;/code&gt; ，而是更喜欢显式创建类而不是使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea61c19309ff72246ea3a2984fbfffe7d47f7033" translate="yes" xml:space="preserve">
          <source>There's another way to get the user data: use Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;template reference variables&lt;/strong&gt;&lt;/a&gt;. These variables provide direct access to an element from within the template. To declare a template reference variable, precede an identifier with a hash (or pound) character (#).</source>
          <target state="translated">还有另一种获取用户数据的方法：使用Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;模板引用变量&lt;/strong&gt;&lt;/a&gt;。这些变量提供从模板内直接访问元素的权限。要声明模板引用变量，请在标识符前加上井号（或井号）（＃）。</target>
        </trans-unit>
        <trans-unit id="649efc388a11470109bc9e7158e40958a6267aea" translate="yes" xml:space="preserve">
          <source>There's no harm in calling &lt;code&gt;compileComponents()&lt;/code&gt; when it's not required.</source>
          <target state="translated">不需要时调用 &lt;code&gt;compileComponents()&lt;/code&gt; 并没有什么害处。</target>
        </trans-unit>
        <trans-unit id="37d89c9051846e27681d13e418f11f2bb4feecdd" translate="yes" xml:space="preserve">
          <source>There's no link to the new shipping component yet, but you can see its template in the preview pane by entering the URL its route specifies. The URL has the pattern: &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; where the &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; part may be different for your StackBlitz project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18f6add8e2e8495aacfbde5fe0813a6561d85a2" translate="yes" xml:space="preserve">
          <source>There's no need to declare or import anything else. The default test module is pre-configured with something like the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">无需声明或导入其他任何内容。默认的测试模块被预先配置有类似的 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 从 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9485387892c4a4b5f9d2bd3163e6e9e7f2a2b699" translate="yes" xml:space="preserve">
          <source>There's no need to list a component in both the &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;entryComponents&lt;/code&gt; lists, although doing so is harmless.</source>
          <target state="translated">尽管这样做是无害的，但 &lt;code&gt;entryComponents&lt;/code&gt; 在 &lt;code&gt;bootstrap&lt;/code&gt; 和entryComponents列表中都列出组件。</target>
        </trans-unit>
        <trans-unit id="c90aada73387116e19e933942a34d908ca737c3b" translate="yes" xml:space="preserve">
          <source>There's often a &lt;em&gt;root&lt;/em&gt; element that can and should host the structural directive. The list element (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) is a typical host element of an &lt;code&gt;NgFor&lt;/code&gt; repeater.</source>
          <target state="translated">通常有一个&lt;em&gt;根&lt;/em&gt;元素可以并且应该承载结构化指令。列表元素（ &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ）是 &lt;code&gt;NgFor&lt;/code&gt; 转发器的典型宿主元素。</target>
        </trans-unit>
        <trans-unit id="ca6a4c5f2988457896869f467e895a0eeb19531f" translate="yes" xml:space="preserve">
          <source>There's one notable exception to the rule of using Angular attribute syntax for downgraded components. It has to do with input or output names that consist of multiple words. In Angular, you would bind these attributes using camelCase:</source>
          <target state="translated">在降级组件使用Angular属性语法的规则中,有一个明显的例外。它与由多个单词组成的输入或输出名称有关。在Angular中,你会使用camelCase来绑定这些属性。</target>
        </trans-unit>
        <trans-unit id="6cf332e6a1ddffd2a30959312ecbc288187e50d8" translate="yes" xml:space="preserve">
          <source>There's really nothing for the component to do with the &lt;code&gt;Observable&lt;/code&gt; returned by &lt;code&gt;heroService.delete()&lt;/code&gt;&lt;strong&gt;but it must subscribe anyway&lt;/strong&gt;.</source>
          <target state="translated">实际上，该组件与 &lt;code&gt;Observable&lt;/code&gt; &lt;code&gt;heroService.delete()&lt;/code&gt; 返回 Observable&lt;strong&gt;但是它仍然必须订阅&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2e367708179b8c6b769aeb5784a73ff30d8bb02d" translate="yes" xml:space="preserve">
          <source>There's the hero again, displayed read-only with interpolation bindings. This &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; appears only while the component is in the submitted state.</source>
          <target state="translated">再次出现了英雄，它以插值绑定显示为只读。仅当组件处于已提交状态时，此 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 才会出现。</target>
        </trans-unit>
        <trans-unit id="6dd1142b94c5ac636081fac9b5a1e93324c5c2d5" translate="yes" xml:space="preserve">
          <source>These &lt;code&gt;import&lt;/code&gt; statements add several important elements that your component needs. To learn more about each, see the following API pages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d7c16de255fb2bdba11db803994a1ace7987c7" translate="yes" xml:space="preserve">
          <source>These Angular docs help you learn and use the Angular framework and development platform, from your first application to optimizing complex single-page apps for enterprises. Tutorials and guides include downloadable examples to accelerate your projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f47f5fef07e1400c8770e346e27dd983d3210c" translate="yes" xml:space="preserve">
          <source>These Angular docs help you learn and use the Angular platform and framework, from your first app to optimizing complex enterprise apps. Tutorials and guides include downloadable example to accelerate your projects.</source>
          <target state="translated">这些Angular文档可以帮助您学习和使用Angular平台和框架,从您的第一个应用程序到优化复杂的企业应用程序。教程和指南包括可下载的示例,以加速你的项目。</target>
        </trans-unit>
        <trans-unit id="9c8f4170de94e38e103661daa9cd09d22d382f76" translate="yes" xml:space="preserve">
          <source>These are all features you'll want to test.</source>
          <target state="translated">这些都是你要测试的功能。</target>
        </trans-unit>
        <trans-unit id="19fa4dd3c3af8618e37296f1894ca8c3663deadc" translate="yes" xml:space="preserve">
          <source>These are short, simple functions that you can write yourself. Unfortunately, they're too simple for many common scenarios. An observable often emits multiple times, perhaps after a significant delay. A component may coordinate multiple observables with overlapping sequences of values and errors.</source>
          <target state="translated">这些都是短小、简单的函数,你可以自己写。不幸的是,对于许多常见的场景来说,它们太简单了。一个观测值经常会发出多次,也许是在一个明显的延迟之后。一个组件可能会协调多个观测值与错误的重叠序列。</target>
        </trans-unit>
        <trans-unit id="15a8bdbc2d27676173c0870bb9d476a44f9c0ec8" translate="yes" xml:space="preserve">
          <source>These are techniques for &lt;em&gt;Shallow Component Testing&lt;/em&gt; , so-named because they reduce the visual surface of the component to just those elements in the component's template that matter for tests.</source>
          <target state="translated">这些是用于 &lt;em&gt;浅层组件测试&amp;rdquo;的&lt;/em&gt;，之所以这么称呼是因为它们将组件的可视表面缩小为组件模板中对于测试至关重要的那些元素。</target>
        </trans-unit>
        <trans-unit id="874d82075cf5a1fb8e894c6a1831e2a99c4f9cf5" translate="yes" xml:space="preserve">
          <source>These are tests of the pipe &lt;em&gt;in isolation&lt;/em&gt;. They can't tell if the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; is working properly as applied in the application components.</source>
          <target state="translated">这些是&lt;em&gt;隔离&lt;/em&gt;测试的管道。他们无法分辨 &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; 是否按应用程序组件中的方式正常工作。</target>
        </trans-unit>
        <trans-unit id="7aa6e184a2127bbab023de5210efd3d94de5eaf2" translate="yes" xml:space="preserve">
          <source>These are the polyfills required to run an Angular application on each supported browser:</source>
          <target state="translated">这些是在每个支持的浏览器上运行Angular应用所需的polyfills。</target>
        </trans-unit>
        <trans-unit id="d6422d60e6eed75caf6b039379d70a9d2b91599f" translate="yes" xml:space="preserve">
          <source>These buttons work, because the CLI automatically added the routes to the feature modules to the &lt;code&gt;routes&lt;/code&gt; array in &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">这些按钮有效，因为CLI会自动将功能模块的 &lt;code&gt;routes&lt;/code&gt; 添加到路由中 &lt;code&gt;app.module.ts&lt;/code&gt; 中数组。</target>
        </trans-unit>
        <trans-unit id="4fadb046a4f69a8a29a6dfda895733f7808fc510" translate="yes" xml:space="preserve">
          <source>These complications argue for &lt;em&gt;avoiding component inheritance&lt;/em&gt;.</source>
          <target state="translated">这些复杂性要求&lt;em&gt;避免组件继承&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3cd97d4aaaa391802aacd2112d378fb5a981f75d" translate="yes" xml:space="preserve">
          <source>These declared classes are visible within the module but invisible to components in a different module unless they are exported from this module and the other module imports this one.</source>
          <target state="translated">这些声明的类在模块中是可见的,但对不同模块中的组件是不可见的,除非它们是从这个模块导出的,而另一个模块又导入了这个类。</target>
        </trans-unit>
        <trans-unit id="e0813bed7ed16b4e0b736f3f56fccf8998f10650" translate="yes" xml:space="preserve">
          <source>These decorators can be used individually or together, as shown in the example. This &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; is a revision of &lt;code&gt;HeroBiosComponent&lt;/code&gt; which you looked at &lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">如示例所示，这些装饰器可以单独使用或一起使用。这 &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; 是修订 &lt;code&gt;HeroBiosComponent&lt;/code&gt; 你看了&lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;上面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e87f8d2277a30ddb602eb3ef7903e879dae9750f" translate="yes" xml:space="preserve">
          <source>These differences argue for a re-usable stub class.</source>
          <target state="translated">这些不同的地方主张采用可重复使用的存根类。</target>
        </trans-unit>
        <trans-unit id="5d480207010587b40e48ea63c6eb80e8e93917ee" translate="yes" xml:space="preserve">
          <source>These docs assume that you are already familiar with &lt;a href=&quot;https://developer.mozilla.org/docs/Learn/HTML/Introduction_to_HTML&quot;&gt;HTML&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/docs/Learn/CSS/First_steps&quot;&gt;CSS&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;, and some of the tools from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;latest standards&lt;/a&gt;, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;modules&lt;/a&gt;. The code samples are written using &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. Most Angular code can be written with just the latest JavaScript, using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;types&lt;/a&gt; for dependency injection, and using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;decorators&lt;/a&gt; for metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332167a123f1d6b741515c29ca0f4c696c2a51c9" translate="yes" xml:space="preserve">
          <source>These docs assume that you are already familiar with HTML, CSS, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;, and some of the tools from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;latest standards&lt;/a&gt;, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;modules&lt;/a&gt;. The code samples are written using &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. Most Angular code can be written with just the latest JavaScript, using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;types&lt;/a&gt; for dependency injection, and using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;decorators&lt;/a&gt; for metadata.</source>
          <target state="translated">这些文档假定您已经熟悉HTML，CSS，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;最新标准中的&lt;/a&gt;某些工具，例如&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;类&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;模块&lt;/a&gt;。这些代码示例是使用&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;编写的。大多数Angular代码只能使用最新的JavaScript编写，使用&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;类型&lt;/a&gt;进行依赖项注入，并使用&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;修饰符&lt;/a&gt;作为元数据。</target>
        </trans-unit>
        <trans-unit id="c0248cf761a672df747afacece78839e13096947" translate="yes" xml:space="preserve">
          <source>These events are logged to the console when the &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; option is enabled also. For an example of filtering router navigation events, visit the &lt;a href=&quot;observables-in-angular#router&quot;&gt;router section&lt;/a&gt; of the &lt;a href=&quot;observables-in-angular&quot;&gt;Observables in Angular&lt;/a&gt; guide.</source>
          <target state="translated">当同时启用 &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; 选项时，这些事件也会记录到控制台。有关过滤路由器导航事件的示例，请访问&lt;a href=&quot;observables-in-angular#router&quot;&gt;路由器部分&lt;/a&gt;&lt;a href=&quot;observables-in-angular&quot;&gt; Angular&lt;/a&gt;的Observables指南中。</target>
        </trans-unit>
        <trans-unit id="1f157bfae90a971b921468f9fd643dfd20928fdb" translate="yes" xml:space="preserve">
          <source>These examples demonstrate features of Angular components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d6961b56e31c059fead7fe33dd1106be84b901" translate="yes" xml:space="preserve">
          <source>These examples demonstrate features of Angular templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16439e0a64a943344cbb334dca94796483e78e42" translate="yes" xml:space="preserve">
          <source>These examples demonstrate minimal, fundamental concepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2680c5c9b2a75fe66adbcbcf8321b6c19da88cdf" translate="yes" xml:space="preserve">
          <source>These examples transform a date into various formats, assuming that &lt;code&gt;dateObj&lt;/code&gt; is a JavaScript &lt;code&gt;Date&lt;/code&gt; object for year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11, given in the local time for the &lt;code&gt;en-US&lt;/code&gt; locale.</source>
          <target state="translated">这些示例将 &lt;code&gt;dateObj&lt;/code&gt; 转换为多种格式，并假设dateObj是JavaScript的 &lt;code&gt;Date&lt;/code&gt; 对象，其年份为：2015，月份：6，日期：15，小时：21，分钟：43，秒：11，以 &lt;code&gt;en-US&lt;/code&gt; 语言环境。</target>
        </trans-unit>
        <trans-unit id="2c3bf4e06192c72785cca976fd12148948a7cb90" translate="yes" xml:space="preserve">
          <source>These examples use a shorthand form of the prompt syntax, supplying only the text of the question. In most cases, this is all that is required. Notice however, that the two prompts expect different types of input. When using the shorthand form, the most appropriate type is automatically selected based on the property's schema. In the example, the &lt;code&gt;name&lt;/code&gt; prompt uses the &lt;code&gt;input&lt;/code&gt; type because it it is a string property. The &lt;code&gt;useColor&lt;/code&gt; prompt uses a &lt;code&gt;confirmation&lt;/code&gt; type because it is a Boolean property. In this case, &quot;yes&quot; corresponds to &lt;code&gt;true&lt;/code&gt; and &quot;no&quot; corresponds to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">这些示例使用提示语法的简写形式，仅提供问题的文本。在大多数情况下，这就是所需要的。但是请注意，这两个提示要求使用不同类型的输入。使用简写形式时，将根据属性的架构自动选择最合适的类型。在该示例中， &lt;code&gt;name&lt;/code&gt; 提示使用 &lt;code&gt;input&lt;/code&gt; 类型，因为它是一个字符串属性。该 &lt;code&gt;useColor&lt;/code&gt; 提示使用 &lt;code&gt;confirmation&lt;/code&gt; 类型，因为它是一个布尔值属性。在这种情况下，&amp;ldquo;是&amp;rdquo;对应于 &lt;code&gt;true&lt;/code&gt; ,而&amp;ldquo;否&amp;rdquo;对应于 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d24eb680a33027e2617530dc12e6676b87a2c5ca" translate="yes" xml:space="preserve">
          <source>These files need to be copied together with the polyfills. The files the application needs at runtime, like the &lt;code&gt;.json&lt;/code&gt; phone lists and images, also need to be copied.</source>
          <target state="translated">这些文件需要与polyfills一起复制。应用程序在运行时需要的文件，例如 &lt;code&gt;.json&lt;/code&gt; 电话列表和图像，也需要复制。</target>
        </trans-unit>
        <trans-unit id="02b3a7df8a6c77dd99266ab2b91a34b6a3d23a77" translate="yes" xml:space="preserve">
          <source>These four bindings demonstrate the difference between &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;. Since the 🐶 (puppy) is declared inside the &amp;lt;#VIEW&amp;gt;, it isn't visible to the projected content. Instead, the projected content sees the 🐳 (whale).</source>
          <target state="translated">这四个绑定说明了 &lt;code&gt;providers&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 之间的区别。由于🐶（小狗）在&amp;lt;#VIEW&amp;gt;中声明，因此投影内容不可见。而是，投影的内容会看到🐳（鲸鱼）。</target>
        </trans-unit>
        <trans-unit id="b30edd37d2f476685d4ba739caa2c47f5b94f2fd" translate="yes" xml:space="preserve">
          <source>These four bindings demonstrate the difference between &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;viewProviders&lt;/code&gt;. Since the 🐶 (puppy) is declared inside the &amp;lt;#VIEW&amp;gt;, it isn't visible to the projected content. Instead, the projected content sees the 🐳 (whale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb673fe0a5db30500d447cd8ed9df2e9892d31d" translate="yes" xml:space="preserve">
          <source>These inputs and outputs can be supplied from the AngularJS template, and the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; method takes care of wiring them up:</source>
          <target state="translated">这些输入和输出可以从AngularJS模板提供，并且 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; 方法负责将它们连接起来：</target>
        </trans-unit>
        <trans-unit id="aca1e5487bdae512316a9552870710cde2c7edc4" translate="yes" xml:space="preserve">
          <source>These kinds of parameters don't fit easily in a URL &lt;em&gt;path&lt;/em&gt;. Even if you could define a suitable URL token scheme, doing so greatly complicates the pattern matching required to translate an incoming URL to a named route.</source>
          <target state="translated">这些类型的参数不太适合URL &lt;em&gt;路径中&lt;/em&gt;。即使您可以定义合适的URL令牌方案，这样做也会极大地复杂化将输入URL转换为命名路由所需的模式匹配。</target>
        </trans-unit>
        <trans-unit id="29425b5274cb55ea0877f8425586bc76b4a9c960" translate="yes" xml:space="preserve">
          <source>These may not be troubling questions for the simple components illustrated above. But many components have complex interactions with the DOM elements described in their templates, causing HTML to appear and disappear as the component state changes.</source>
          <target state="translated">对于上面说明的简单组件来说,这些问题可能并不麻烦。但许多组件与它们模板中描述的DOM元素有复杂的交互,导致HTML在组件状态变化时出现和消失。</target>
        </trans-unit>
        <trans-unit id="9280883bdf2743a9d36490d0dc135e8e9a512cc2" translate="yes" xml:space="preserve">
          <source>These methods access the injected timer component directly.</source>
          <target state="translated">这些方法直接访问注入的定时器组件。</target>
        </trans-unit>
        <trans-unit id="c22429bdeba56aae46b0da88ebbd1eba5c9f7eb4" translate="yes" xml:space="preserve">
          <source>These microsyntax mechanisms are also available to you when you write your own structural directives. For example, microsyntax in Angular allows you to write &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;. The following sections provide detailed information on constraints, grammar, and translation of microsyntax.</source>
          <target state="translated">当您编写自己的结构指令时，也可以使用这些微语法机制。例如，microsyntax在角允许编写 &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; 代替 &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; 。以下各节提供有关约束，语法和微语法翻译的详细信息。</target>
        </trans-unit>
        <trans-unit id="a5772cf07dfef80156b6e9a71682c4a0275d4733" translate="yes" xml:space="preserve">
          <source>These microsyntax mechanisms are also available to you when you write your own structural directives. For example, microsyntax in Angular allows you to write &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let item of items&quot;&amp;gt;{{item}}&amp;lt;/div&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; let-item [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{item}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;. The following sections provide detailed information on constraints, grammar, and translation of microsyntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1b2fa607afc63d8c9722ad2df075b0b65154ed" translate="yes" xml:space="preserve">
          <source>These options are used to modify the matching behavior of requests. They are passed to the browsers &lt;code&gt;Cache#match&lt;/code&gt; function. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Cache/match&quot;&gt;MDN&lt;/a&gt; for details. Currently, only the following options are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75727d0e53686975b5f9fe934821fc5ef2a010f" translate="yes" xml:space="preserve">
          <source>These providers are insulated from changes to application providers with the same lookup token. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</source>
          <target state="translated">这些提供者与具有相同查找令牌的应用程序提供者的变化是绝缘的。当路由器在懒加载上下文中创建组件时,Angular更倾向于从这些提供者创建的服务实例,而不是应用根注入器的服务实例。</target>
        </trans-unit>
        <trans-unit id="24dcfb3b1d815ddbfc80be55b49ecf74b9b01fec" translate="yes" xml:space="preserve">
          <source>These services become available for injection into any component, directive, pipe or service which is a child of this injector.</source>
          <target state="translated">这些服务可以注入到任何组件、指令、管道或服务中,而这些组件、指令、管道或服务是这个注入器的子代。</target>
        </trans-unit>
        <trans-unit id="f9b0721484302592e733b6e272928008f313a2ba" translate="yes" xml:space="preserve">
          <source>These situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!</source>
          <target state="translated">这些情况应该是非常罕见的,必须特别小心,以避免产生跨站点脚本(XSS)安全漏洞!</target>
        </trans-unit>
        <trans-unit id="a17e78995649c771b926fa480048cee49ac14e32" translate="yes" xml:space="preserve">
          <source>These standard testing techniques are great for unit testing services in isolation.</source>
          <target state="translated">这些标准的测试技术对于单元测试服务的隔离是非常好的。</target>
        </trans-unit>
        <trans-unit id="471f11bedf623af5e51a7550b62738fa78f523b0" translate="yes" xml:space="preserve">
          <source>These status values are mutually exclusive, so a control cannot be both valid AND invalid or invalid AND disabled.</source>
          <target state="translated">这些状态值是相互排斥的,所以一个控制不能既有效又无效,或者既无效又禁用。</target>
        </trans-unit>
        <trans-unit id="05f39205bd9c10860f4038f8cb6f1f80b35432f1" translate="yes" xml:space="preserve">
          <source>These styles are post-processed so that each selector is augmented with &lt;code&gt;_nghost&lt;/code&gt; or &lt;code&gt;_ngcontent&lt;/code&gt; attribute selectors. These extra selectors enable the scoping rules described in this page.</source>
          <target state="translated">这些样式经过了后期处理，因此每个选择器都增加了 &lt;code&gt;_nghost&lt;/code&gt; 或 &lt;code&gt;_ngcontent&lt;/code&gt; 属性选择。这些额外的选择器启用此页面中描述的范围规则。</target>
        </trans-unit>
        <trans-unit id="59ed30c14d44ecaa6cf045e5333024f1a3034ced" translate="yes" xml:space="preserve">
          <source>These techniques are useful for small-scale demonstrations, but they quickly become verbose and clumsy when handling large amounts of user input. Two-way data binding is a more elegant and compact way to move values between data entry fields and model properties. The next page, &lt;code&gt;Forms&lt;/code&gt;, explains how to write two-way bindings with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">这些技术对于小规模的演示很有用，但是当处理大量用户输入时，它们很快变得冗长而笨拙。双向数据绑定是一种在数据输入字段和模型属性之间移动值的更优雅，更紧凑的方法。下一页 &lt;code&gt;Forms&lt;/code&gt; 解释了如何使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 编写双向绑定。</target>
        </trans-unit>
        <trans-unit id="53c3322dcb945c3c38eca1315cb0acd70af9667e" translate="yes" xml:space="preserve">
          <source>These tests could fail or timeout if the &lt;code&gt;HeroDetailService&lt;/code&gt; made its own XHR calls to a remote server. There might not be a remote server to call.</source>
          <target state="translated">如果 &lt;code&gt;HeroDetailService&lt;/code&gt; 对远程服务器进行自己的XHR调用，则这些测试可能会失败或超时。可能没有远程服务器要呼叫。</target>
        </trans-unit>
        <trans-unit id="ce3f767e6032b95a5a603034551bf8233c93f3f2" translate="yes" xml:space="preserve">
          <source>These three examples cover the need for an app with one level routing. The moment you add a child router, such as the crisis center, you create new link array possibilities.</source>
          <target state="translated">这三个例子涵盖了一个应用的一级路由的需求。当你添加一个子路由器,如危机中心的那一刻,你就创造了新的链接阵列的可能性。</target>
        </trans-unit>
        <trans-unit id="9c84bcfdd1bbb4bcd869d39ead56a3ce00137884" translate="yes" xml:space="preserve">
          <source>These three examples cover the needs of an app with one level of routing. However, with a child router, such as in the crisis center, you create new link array possibilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a858b580e5d1dabed41a7075d6de4bc56502ab07" translate="yes" xml:space="preserve">
          <source>These two properties have subtle differences, so switching to &lt;code&gt;textContent&lt;/code&gt; under the hood can be surprising to users. For this reason, we are deprecating this behavior. Going forward, users should explicitly bind to &lt;code&gt;textContent&lt;/code&gt; when using Domino.</source>
          <target state="translated">这两个属性之间存在细微的差异，因此在 &lt;code&gt;textContent&lt;/code&gt; 切换到textContent对于用户可能会感到惊讶。因此，我们不赞成使用此行为。展望未来，用户应明确绑定到 &lt;code&gt;textContent&lt;/code&gt; 在使用Domino时。</target>
        </trans-unit>
        <trans-unit id="db3d1e9b8dc7f1d6ba6781b5d1aeadad60243cbb" translate="yes" xml:space="preserve">
          <source>These two routes navigate to the crisis center child components, &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; and &lt;code&gt;CrisisDetailComponent&lt;/code&gt;, respectively.</source>
          <target state="translated">这两条路线分别导航到危机中心子组件 &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; 和 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce122e04c4a0e2a0a5f7ad63d194e4fea023293d" translate="yes" xml:space="preserve">
          <source>They are &lt;em&gt;not inherited&lt;/em&gt; by any components nested within the template nor by any content projected into the component.</source>
          <target state="translated">它们&lt;em&gt;不是继承的&lt;/em&gt;被模板中嵌套的任何组件所，也不会被投影到该组件中的任何内容所。</target>
        </trans-unit>
        <trans-unit id="16ada202f0f526edb509f857ec3037ca6a0f4115" translate="yes" xml:space="preserve">
          <source>They are displayed in named outlets.</source>
          <target state="translated">它们显示在命名的网点中。</target>
        </trans-unit>
        <trans-unit id="1b990f73ae62c0da4608dce9f08db78466a71820" translate="yes" xml:space="preserve">
          <source>They are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times. If an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</source>
          <target state="translated">它们是不可变的,这有一个很好的理由:应用程序在成功之前可能会多次重试一个请求,这意味着拦截器链可能会多次重新处理同一个请求。如果拦截器可以修改原始请求对象,那么重试操作将从修改后的请求开始,而不是原始请求。不变性保证了拦截者每次尝试都能看到相同的请求。</target>
        </trans-unit>
        <trans-unit id="0a5e8503c85509faa05b6e855e4edcff069456e9" translate="yes" xml:space="preserve">
          <source>They are independent of each other.</source>
          <target state="translated">它们是相互独立的。</target>
        </trans-unit>
        <trans-unit id="6afb78efe8cab856821000146ea4a61b8a334fa8" translate="yes" xml:space="preserve">
          <source>They are very similar with the only difference being:</source>
          <target state="translated">它们非常相似,唯一不同的是。</target>
        </trans-unit>
        <trans-unit id="cfd5fb1fb1b07124fb1aace027accf1df4c99e03" translate="yes" xml:space="preserve">
          <source>They follow a common pattern: a &lt;em&gt;parent&lt;/em&gt; component serves as a test rig for a &lt;em&gt;child&lt;/em&gt; component that illustrates one or more of the lifecycle hook methods.</source>
          <target state="translated">它们遵循一种常见的模式：&lt;em&gt;父&lt;/em&gt;组件充当&lt;em&gt;孩子&lt;/em&gt;的测试装备&lt;em&gt;&lt;/em&gt;组件组件说明了一种或多种生命周期挂钩方法。</target>
        </trans-unit>
        <trans-unit id="73b47ba16ec3ed20f7c0f09044645d6af1239f79" translate="yes" xml:space="preserve">
          <source>They might be imported by the root &lt;code&gt;AppModule&lt;/code&gt; of a small application that lacks routing.</source>
          <target state="translated">它们可能是由根 &lt;code&gt;AppModule&lt;/code&gt; 导入的缺少路由的小型应用程序。</target>
        </trans-unit>
        <trans-unit id="0bd9de91dc582fbf7daa5013098dfee5a9baa9df" translate="yes" xml:space="preserve">
          <source>They might. By default, the router re-uses a component instance when it re-navigates to the same component type without visiting a different component first. The route parameters could change each time.</source>
          <target state="translated">它们可能会。默认情况下,当路由器重新导航到同一组件类型而不先访问不同的组件时,会重新使用一个组件实例。路由参数可能每次都会改变。</target>
        </trans-unit>
        <trans-unit id="bcebc66109bd0b943ba34a0b34f724475faa7a20" translate="yes" xml:space="preserve">
          <source>They must return a Promise or an Observable,</source>
          <target state="translated">他们必须返回一个承诺或一个可观察的。</target>
        </trans-unit>
        <trans-unit id="6a1d3b6796b2728eca30d7dc142c330459e6d1b9" translate="yes" xml:space="preserve">
          <source>They typically have a top component that acts as the feature root and private, supporting sub-components descend from it.</source>
          <target state="translated">它们通常有一个顶层组件,作为特征根和私有的,支持子组件从它的后裔。</target>
        </trans-unit>
        <trans-unit id="f8026517cd2a6484e993db7a3cd1d56c8845b6ed" translate="yes" xml:space="preserve">
          <source>They work in combination with other routes.</source>
          <target state="translated">它们与其他路线结合使用。</target>
        </trans-unit>
        <trans-unit id="3d3f6d4959980160a0fdb422743d1ab226d66d6a" translate="yes" xml:space="preserve">
          <source>They'll do that with the RxJS &lt;code&gt;tap()&lt;/code&gt; operator, which looks at the observable values, does something with those values, and passes them along. The &lt;code&gt;tap()&lt;/code&gt; call back doesn't touch the values themselves.</source>
          <target state="translated">他们将使用RxJS &lt;code&gt;tap()&lt;/code&gt; 运算符执行此操作，该运算符查看可观察的值，对这些值进行处理，然后将其传递。该 &lt;code&gt;tap()&lt;/code&gt; 调用回不接触值本身。</target>
        </trans-unit>
        <trans-unit id="6764cd39877eeca69ad10d4286668ee2c1b61792" translate="yes" xml:space="preserve">
          <source>Things go wrong, especially when you're getting data from a remote server. The &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; method should catch errors and do something appropriate.</source>
          <target state="translated">事情出了问题，尤其是当您从远程服务器获取数据时。该 &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; 方法应该找出错误，并做一些适当的。</target>
        </trans-unit>
        <trans-unit id="bba021091f297904597c2bb05d6e5e449bd86e0a" translate="yes" xml:space="preserve">
          <source>Things to keep in mind, when downgrading multiple modules:</source>
          <target state="translated">降级多个模块时,需要注意的事项。</target>
        </trans-unit>
        <trans-unit id="756e27539ff0999bdbcc7f5377fff9d815ce78d8" translate="yes" xml:space="preserve">
          <source>Third step of the Tour of Heroes example application. For more information, see &lt;a href=&quot;../tutorial/toh-pt3&quot;&gt;Create a feature component&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70dff18e1178a855b0cc1f8fc21945818c734cb" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, which shows a read-only hero with interpolation bindings, appears only while the component is in the submitted state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c24139a9de681ae61f6d7ec726db576f5f264b0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; displays the error if the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; has the cross validation error returned by the &lt;code&gt;identityRevealed&lt;/code&gt; validator, but only if the user has finished &lt;a href=&quot;form-validation#dirty-or-touched&quot;&gt;interacting with the form&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b69adf603ad8f6d0e880b3effde6a1bd75ec06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; example:</source>
          <target state="translated">此 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 例如：</target>
        </trans-unit>
        <trans-unit id="258e5fd8f98e77a1547ddec9b070f084c89034c4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;MissionService&lt;/code&gt; connects the &lt;code&gt;MissionControlComponent&lt;/code&gt; to multiple &lt;code&gt;AstronautComponent&lt;/code&gt; children.</source>
          <target state="translated">此 &lt;code&gt;MissionService&lt;/code&gt; 将 &lt;code&gt;MissionControlComponent&lt;/code&gt; 连接到多个 &lt;code&gt;AstronautComponent&lt;/code&gt; 子代。</target>
        </trans-unit>
        <trans-unit id="59e007abb53ac82deffb3014ce0885f777370e0d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;VersionChildComponent&lt;/code&gt; detects changes to the &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; input properties and composes a log message reporting these changes:</source>
          <target state="translated">此 &lt;code&gt;VersionChildComponent&lt;/code&gt; 检测 &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; 输入属性的更改，并编写一条日志消息，报告这些更改：</target>
        </trans-unit>
        <trans-unit id="5e474d161be24784860c8aaa6c3af723b09d2443" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;VersionChildComponent&lt;/code&gt; detects changes to the &lt;code&gt;major&lt;/code&gt; and &lt;code&gt;minor&lt;/code&gt; input properties and composes a log message reporting these changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe66defed731afe2b351869493bed1b439539c0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; syntax can only &lt;em&gt;set&lt;/em&gt; a data-bound property. If you need to do something more, you can write the expanded form; for example, the following changes the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; value to uppercase:</source>
          <target state="translated">此 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 语法只能&lt;em&gt;设置&lt;/em&gt;数据绑定属性。如果您需要做更多的事情，可以编写扩展表格。例如，以下将 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 值更改为大写：</target>
        </trans-unit>
        <trans-unit id="d891bfbbc30a830ed00d349d04e68d42b5ea2457" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;bootstrap&lt;/code&gt; method is a direct replacement (takes same arguments) for AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/a&gt; method. Unlike AngularJS, this bootstrap is asynchronous.</source>
          <target state="translated">此 &lt;code&gt;bootstrap&lt;/code&gt; 方法是AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;bootstrap&lt;/code&gt; &lt;/a&gt;程序方法的直接替换（采用相同的参数）。与AngularJS不同，此引导是异步的。</target>
        </trans-unit>
        <trans-unit id="a81bbff7f4c2b4f66516ab105c5f2da6f8908842" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;getHeroes()&lt;/code&gt; returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th).</source>
          <target state="translated">这个 &lt;code&gt;getHeroes()&lt;/code&gt; 返回位于位置1和5处的英雄切片列表，仅返回四个顶级英雄（第2，第3，第4和第5）。</target>
        </trans-unit>
        <trans-unit id="9b89a86d9e9910b9545a4d39e96b18d0d3af5a5b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;outlets&lt;/code&gt; object within an outer object was completely unnecessary when there was only one route and one &lt;em&gt;unnamed&lt;/em&gt; outlet to think about.</source>
          <target state="translated">当只有一条路线和一个&lt;em&gt;未命名的&lt;/em&gt;出口要考虑时，外部对象内的此 &lt;code&gt;outlets&lt;/code&gt; 对象是完全不必要的。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5491cacef48b72757c7e430268f1e44c75a5a9c3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;outlets&lt;/code&gt; object within an outer object was unnecessary when there was only one route and one unnamed outlet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f20e0dbf005f61cffb8c3dd9af39a375a30b434" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial provides an introduction to the fundamentals of Angular. It shows you how to set up your local development environment and develop an app using the &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI tool&lt;/a&gt;.</source>
          <target state="translated">本&lt;em&gt;《英雄之旅》&lt;/em&gt;教程介绍了Angular的基础知识。它向您展示了如何使用&lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI工具&lt;/a&gt;设置本地开发环境以及开发应用程序。</target>
        </trans-unit>
        <trans-unit id="c24943786f27bf8eb8f423a4535eae1d8c0db2ea" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial shows you how to set up your local development environment and develop an app using the &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI tool&lt;/a&gt;, and provides an introduction to the fundamentals of Angular.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09b226e4f2c4eb0d926e572d4a75f6880da5490" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;no-op&lt;/em&gt; interceptor simply calls &lt;code&gt;next.handle()&lt;/code&gt; with the original request and returns the observable without doing a thing.</source>
          <target state="translated">此&lt;em&gt;无操作&lt;/em&gt;拦截器仅使用原始请求简单地调用 &lt;code&gt;next.handle()&lt;/code&gt; ，而无需执行&lt;em&gt;任何操作&lt;/em&gt;即可返回可观察对象。</target>
        </trans-unit>
        <trans-unit id="50210317fa118bab69579c2022e5d9a816190d39" translate="yes" xml:space="preserve">
          <source>This API is the recommended way to construct injectors in performance-sensitive parts.</source>
          <target state="translated">该API是在性能敏感部件中构建注射器的推荐方式。</target>
        </trans-unit>
        <trans-unit id="0afd71a82786c8f3561d56c5cfd0be5839b4503c" translate="yes" xml:space="preserve">
          <source>This HTML uses an Angular directive, &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;. This directive connects the routes you defined to your template files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469f1d1eec641289327d7f725b8bc80d83c5b953" translate="yes" xml:space="preserve">
          <source>This Style Guide is for anyone who contributes to the Angular documentation (this site). These guidelines should be followed by all authors. Deviations must be approved by a documentation editor.</source>
          <target state="translated">本风格指南适用于任何为Angular文档(本网站)做出贡献的人。所有作者都应该遵守这些指南。偏差必须得到文档编辑的批准。</target>
        </trans-unit>
        <trans-unit id="3415857a9e6030331c79e1e76604015a5df5e041" translate="yes" xml:space="preserve">
          <source>This UI uses the HTML unordered list with &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags. The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is the Angular &quot;repeater&quot; directive. It marks that &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element (and its children) as the &quot;repeater template&quot;:</source>
          <target state="translated">此UI使用带有 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 标记的HTML无序列表。的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素是角&amp;ldquo;中继器&amp;rdquo;指令。它表示 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素（及其子元素）为&amp;ldquo;中继器模板&amp;rdquo;：</target>
        </trans-unit>
        <trans-unit id="2b4ebc81415f90795ab79ed8a5b2cd8f2bb7595a" translate="yes" xml:space="preserve">
          <source>This XML element represents the translation of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; greeting tag that you marked with the &lt;code&gt;i18n&lt;/code&gt; attribute earlier in this guide.</source>
          <target state="translated">此XML元素表示您在本指南前面使用 &lt;code&gt;i18n&lt;/code&gt; 属性标记的 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 问候标签的翻译。</target>
        </trans-unit>
        <trans-unit id="48298b5a19ab51f248711bfb5fa88cc617b0670f" translate="yes" xml:space="preserve">
          <source>This allows the Angular Language Service to provide diagnostics and completions in &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">这允许Angular Language Service在 &lt;code&gt;.ts&lt;/code&gt; 文件中提供诊断和完成。</target>
        </trans-unit>
        <trans-unit id="98f7af4e84f120f59a1303fcf4a9447a45a5d38a" translate="yes" xml:space="preserve">
          <source>This allows the compiler to generate a reference to &lt;code&gt;ɵ0&lt;/code&gt; in the factory without having to know what the value of &lt;code&gt;ɵ0&lt;/code&gt; contains.</source>
          <target state="translated">这样，编译器可以在出厂时生成对 &lt;code&gt;ɵ0&lt;/code&gt; 的引用，而不必知道 &lt;code&gt;ɵ0&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="24015a5bb2d8b1f8210c5acd6f640d4dc6d483b2" translate="yes" xml:space="preserve">
          <source>This allows us to add new states without having to include separate transitions for each one.</source>
          <target state="translated">这使得我们可以添加新的状态,而不必为每个状态包含单独的过渡。</target>
        </trans-unit>
        <trans-unit id="cbe0ef929bc0631d02b1205466d152dddaeabe4f" translate="yes" xml:space="preserve">
          <source>This allows you to set appropriate styles for individual components that won&amp;rsquo;t leak into other parts of the application.</source>
          <target state="translated">这使您可以为不会泄漏到应用程序其他部分的单个组件设置适当的样式。</target>
        </trans-unit>
        <trans-unit id="fa04bc183c4a35ffd59532acaddb459c40802b8c" translate="yes" xml:space="preserve">
          <source>This always means importing &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/common&lt;/code&gt; for access to the Angular directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt;. You can import it directly or from another NgModule that &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;re-exports&lt;/a&gt; it.</source>
          <target state="translated">这总是意味着从 &lt;code&gt;@angular/common&lt;/code&gt; 导入 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 来访问Angular指令，例如 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;NgFor&lt;/code&gt; 。您可以直接导入它，也可以从另一个NgModule &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;重新&lt;/a&gt;导入它。</target>
        </trans-unit>
        <trans-unit id="e4af21eecd43fe210746ff3a4c62a38f49ffe7f9" translate="yes" xml:space="preserve">
          <source>This app has many of the features you'd expect to find in a data-driven application. It acquires and displays a list of heroes, edits a selected hero's detail, and navigates among different views of heroic data.</source>
          <target state="translated">这款应用具有许多你期望在数据驱动的应用程序中找到的功能。它获取并显示英雄列表,编辑选定英雄的详细信息,并在英雄数据的不同视图中导航。</target>
        </trans-unit>
        <trans-unit id="f17ea08bfc5149a70f6152907b2632dc2a63714a" translate="yes" xml:space="preserve">
          <source>This app provides &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the app's root injector, as a side-effect of importing the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;. You should provide interceptors in &lt;code&gt;AppModule&lt;/code&gt; as well.</source>
          <target state="translated">此应用程序在其根注入器中提供 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; ，作为在 &lt;code&gt;AppModule&lt;/code&gt; 中导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 的副作用。您还应该在 &lt;code&gt;AppModule&lt;/code&gt; 中提供拦截器。</target>
        </trans-unit>
        <trans-unit id="9010af53dce21e99cd1b98b6918ed08a568edceb" translate="yes" xml:space="preserve">
          <source>This app uses more terse &quot;variable assignment&quot; style simply for brevity.</source>
          <target state="translated">这款应用使用了更为简洁的 &quot;变量赋值 &quot;风格,只是为了简洁。</target>
        </trans-unit>
        <trans-unit id="e2dd29b7095751503adbe18ae104950880b8fed2" translate="yes" xml:space="preserve">
          <source>This application deletes a hero with the &lt;code&gt;HttpClient.delete&lt;/code&gt; method by passing the hero's id in the request URL.</source>
          <target state="translated">此应用程序通过在请求URL中传递英雄的ID来使用 &lt;code&gt;HttpClient.delete&lt;/code&gt; 方法删除英雄。</target>
        </trans-unit>
        <trans-unit id="fb866e223d05018eca2dedfbe444966b166935fb" translate="yes" xml:space="preserve">
          <source>This application won't re-use the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. The user always returns to the hero list to select another hero to view. There's no way to navigate from one hero detail to another hero detail without visiting the list component in between. Therefore, the router creates a new &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance every time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448875963d3ea5d9faf62ce4ea4e238a24bd4684" translate="yes" xml:space="preserve">
          <source>This approach makes it easier to re-use the component somewhere else and deliver the component's intended appearance even if the global styles are different.</source>
          <target state="translated">这种方法可以更容易地在其他地方重复使用组件,即使全局风格不同,也能提供组件的预期外观。</target>
        </trans-unit>
        <trans-unit id="736cdde48162e97e7bae316bb32e7680eb170f89" translate="yes" xml:space="preserve">
          <source>This approach works for prototyping, but is not robust or maintainable. As soon as you try to test this component or get heroes from a remote server, you have to change the implementation of &lt;code&gt;HeroesListComponent&lt;/code&gt; and replace every use of the &lt;code&gt;HEROES&lt;/code&gt; mock data.</source>
          <target state="translated">此方法适用于原型制作，但不可靠或无法维护。一旦尝试测试此组件或从远程服务器获取英雄，就必须更改 &lt;code&gt;HeroesListComponent&lt;/code&gt; 的实现并替换对 &lt;code&gt;HEROES&lt;/code&gt; 模拟数据的所有使用。</target>
        </trans-unit>
        <trans-unit id="0acaa2b4ca7df60a89c610729a6dc049181aab2c" translate="yes" xml:space="preserve">
          <source>This array lacks a route parameter because previously you didn't need to send information to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2207c94db1f3c39ac92627d2d416a732485be1c" translate="yes" xml:space="preserve">
          <source>This array lacks a route parameter because you had no reason to send information to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">该数组缺少route参数，因为您没有理由将信息发送到 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9b9947c5ef101e16618174c23e01f209fae9d4e" translate="yes" xml:space="preserve">
          <source>This article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.</source>
          <target state="translated">本文介绍了如何配置你的项目以运行Circle CI和Travis CI,还更新了你的测试配置,以便能够在Chrome浏览器中的任一环境中运行测试。</target>
        </trans-unit>
        <trans-unit id="4e02ae1fdc78e80303d48713d37550a281676bcb" translate="yes" xml:space="preserve">
          <source>This asynchronous approach &lt;em&gt;will work&lt;/em&gt; when the &lt;code&gt;HeroService&lt;/code&gt; requests heroes from the server.</source>
          <target state="translated">当 &lt;code&gt;HeroService&lt;/code&gt; 向服务器请求英雄时，此异步方法&lt;em&gt;将起作用&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9e58e666a6e882960d6b1daf78543b6547ba94f0" translate="yes" xml:space="preserve">
          <source>This attack is only successful if the returned JSON is executable as JavaScript. Servers can prevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the well-known string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;.</source>
          <target state="translated">仅当返回的JSON可作为JavaScript可执行时，此攻击才会成功。服务器可以通过使用众所周知的字符串 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; 为所有JSON响应加前缀，使它们成为不可执行的约定来防止攻击。</target>
        </trans-unit>
        <trans-unit id="651be0a8100915d5529b17ae73b92bbe7b153f12" translate="yes" xml:space="preserve">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also defines an empty &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method, to prevent the &lt;a href=&quot;../api/core/compiler&quot;&gt;Compiler&lt;/a&gt; from returning errors. This is necessary because the module will not have a &lt;code&gt;bootstrap&lt;/code&gt; declaration on its &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">这个最小的 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 导入了 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ，这是每个基于Angular浏览器的应用程序都必须具有的模块。它还定义了一个空的 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 方法，以防止&lt;a href=&quot;../api/core/compiler&quot;&gt;编译器&lt;/a&gt;返回错误。这是必需的，因为该模块在其 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器上将没有 &lt;code&gt;bootstrap&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="f56abc002d8d199ab12c7a00e8eceb4cb5324712" translate="yes" xml:space="preserve">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also imports &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt;, which exports providers that will be used for upgrading and downgrading services and components.</source>
          <target state="translated">这个最小的 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 导入了 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ，这是每个基于Angular浏览器的应用程序都必须具有的模块。它还从 &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;导入 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; ，后者导出将用于升级和降级服务和组件的提供程序。</target>
        </trans-unit>
        <trans-unit id="b7707e5e049453b4bfe2c53a590c89b76a5930cb" translate="yes" xml:space="preserve">
          <source>This base route reuse strategy only reuses routes when the matched router configs are identical. This prevents components from being destroyed and recreated when just the fragment or query parameters change (that is, the existing component is &lt;em&gt;reused&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4182fbf9bcd985eb43d694af8b1af19720683102" translate="yes" xml:space="preserve">
          <source>This behavior necessarily changes when you use lazy loading. Lazy loading is when you load modules only when you need them; for example, when routing. They aren&amp;rsquo;t loaded right away like with eagerly loaded modules. This means that any services listed in their provider arrays aren&amp;rsquo;t available because the root injector doesn&amp;rsquo;t know about these modules.</source>
          <target state="translated">当您使用延迟加载时，此行为必然会更改。延迟加载是指仅在需要时才加载模块。例如，在路由时。它们不会像热切加载的模块那样立即加载。这意味着它们的提供程序数组中列出的任何服务都不可用，因为根注入器不了解这些模块。</target>
        </trans-unit>
        <trans-unit id="d78768b8b53f7f8d52aad3d6a653f672b2d18303" translate="yes" xml:space="preserve">
          <source>This binding causes the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; to span two columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab02175f78bb844c7114edbf8c6e52980e6dba3f" translate="yes" xml:space="preserve">
          <source>This cadence of releases gives eager developers access to new features as soon as they are fully developed and pass through our code review and integration testing processes, while maintaining the stability and reliability of the platform for production users that prefer to receive features after they have been validated by Google and other developers that use the pre-release builds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a35e5d7d8bb3b5d8a866028a9f757d0c2abbb7" translate="yes" xml:space="preserve">
          <source>This cadence of releases gives you access to new features as soon as they are ready, while maintaining the stability and reliability of the platform for production users.</source>
          <target state="translated">这种发布节奏使您可以在新功能准备好后立即使用,同时为生产用户保持平台的稳定性和可靠性。</target>
        </trans-unit>
        <trans-unit id="de8dbaffe2662ccb066fdee3c1966e668ead9335" translate="yes" xml:space="preserve">
          <source>This can be a problem if you have to change your app's location. If you setup a redirect from the old location (for example &lt;code&gt;example.com&lt;/code&gt;) to the new location (for example &lt;code&gt;www.example.com&lt;/code&gt;) the worker will stop working. Also, the redirect won't even trigger for users who are loading the site entirely from Service Worker. The old worker (registered at &lt;code&gt;example.com&lt;/code&gt;) tries to update and sends requests to the old location &lt;code&gt;example.com&lt;/code&gt; which get redirected to the new location &lt;code&gt;www.example.com&lt;/code&gt; and create the error &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">如果您必须更改应用程序的位置，则可能会出现问题。如果您设置了从旧位置（例如 &lt;code&gt;example.com&lt;/code&gt; ）到新位置（例如 &lt;code&gt;www.example.com&lt;/code&gt; ）的重定向，工作人员将停止工作。同样，对于完全从Service Worker加载网站的用户，重定向甚至不会触发。老工人（在注册 &lt;code&gt;example.com&lt;/code&gt; ）尝试更新并发送请求到原来的位置 &lt;code&gt;example.com&lt;/code&gt; 其重定向到新的位置 &lt;code&gt;www.example.com&lt;/code&gt; 和创建错误 &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf472237a640d8cae814bf8d16bcc95349771c9f" translate="yes" xml:space="preserve">
          <source>This can be a problem if you have to change your app's location. If you setup a redirect from the old location (for example &lt;code&gt;example.com&lt;/code&gt;) to the new location (for example &lt;code&gt;www.example.com&lt;/code&gt;) the worker will stop working. Also, the redirect won't even trigger for users who are loading the site entirely from Service Worker. The old worker (registered at &lt;code&gt;example.com&lt;/code&gt;) tries to update and sends requests to the old location &lt;code&gt;example.com&lt;/code&gt; which get redirected to the new location &lt;code&gt;www.example.com&lt;/code&gt; and create the error &lt;code&gt;The script resource is behind a redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a25a7112462a90a222ddd01185604490e952693" translate="yes" xml:space="preserve">
          <source>This can be used to resume testing after events have triggered asynchronous activity or asynchronous change detection.</source>
          <target state="translated">这可以用来在事件触发异步活动或异步变化检测后恢复测试。</target>
        </trans-unit>
        <trans-unit id="934112ccd1aa2b6915e125429be40b8b0e576f0a" translate="yes" xml:space="preserve">
          <source>This can be useful when scanning through code and looking for observable values. Also, if you want a property to store the most recent value from an observable, it can be convenient to simply use the same name with or without the &amp;ldquo;$&amp;rdquo;.</source>
          <target state="translated">这在扫描代码并查找可观察的值时很有用。另外，如果您希望属性存储可观察到的最新值，则可以方便地使用带有或不带有&amp;ldquo; $&amp;rdquo;的相同名称。</target>
        </trans-unit>
        <trans-unit id="9f44c321dfe09485e6daf24efdf592a980b9e74b" translate="yes" xml:space="preserve">
          <source>This can cause confusion. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2a566810683bdb154f2660dc33dfd48367534d" translate="yes" xml:space="preserve">
          <source>This can happen if you refer to an ambient type. For example, the &lt;code&gt;Window&lt;/code&gt; type is an ambient type declared in the global &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">如果您引用环境类型，可能会发生这种情况。例如，&amp;ldquo; &lt;code&gt;Window&lt;/code&gt; 类型是在全局 &lt;code&gt;.d.ts&lt;/code&gt; 文件中声明的环境类型。</target>
        </trans-unit>
        <trans-unit id="6476281277699a0797217af1c8c95aadca9fed5f" translate="yes" xml:space="preserve">
          <source>This can happen if you use a number as a property name as in the following example.</source>
          <target state="translated">如果你使用一个数字作为属性名,就会发生这种情况,比如下面的例子。</target>
        </trans-unit>
        <trans-unit id="3b41585be32bdaba39097b77ac3bb57808c72252" translate="yes" xml:space="preserve">
          <source>This can happen when a &lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;route guard&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">当&lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;路由后卫&lt;/a&gt;返回 &lt;code&gt;false&lt;/code&gt; 或通过返回 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 发起重定向时，可能会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="161acaf31fb43a0787ee8fbb9353bde452188f86" translate="yes" xml:space="preserve">
          <source>This causes the CLI to create a folder called &lt;code&gt;customer-dashboard&lt;/code&gt; with a file inside called &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; with the following contents:</source>
          <target state="translated">这将导致CLI创建一个文件夹，名为 &lt;code&gt;customer-dashboard&lt;/code&gt; 与所谓的内部文件 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; 具有以下内容：</target>
        </trans-unit>
        <trans-unit id="5019a44a75c49b88537ac9e8329f1c2eab2831e5" translate="yes" xml:space="preserve">
          <source>This class is an &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">此类是 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ，您可以导入该类以提供AngularJS核心服务，并具有用于引导混合升级应用程序的实例方法。</target>
        </trans-unit>
        <trans-unit id="025bc612549c84721126511ec42b2a6d0ff1d56c" translate="yes" xml:space="preserve">
          <source>This class is immutable; all mutation operations return a new instance.</source>
          <target state="translated">这个类是不可变的,所有的突变操作都会返回一个新的实例。</target>
        </trans-unit>
        <trans-unit id="d3d60295749b3a3a0404d6398d78e18e444489d5" translate="yes" xml:space="preserve">
          <source>This class is only used internally in the &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">此类仅在 &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 内部使用。</target>
        </trans-unit>
        <trans-unit id="801d9cace214c9cf01792d4f29b30f5848a25da1" translate="yes" xml:space="preserve">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此类不应由应用程序开发人员直接使用。而是使用&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1d6a70007738552506319e31c6ae61765926844" translate="yes" xml:space="preserve">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此类不应由应用程序开发人员直接使用。而是使用&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1130101a82611d98bbdc3094466ba2af2e0c67ec" translate="yes" xml:space="preserve">
          <source>This code adds the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array. Next, the code uses the &lt;code&gt;forRoot()&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to define your two routes. This method takes an array of JavaScript objects, with each object defining the proprties of a route. The &lt;code&gt;forRoot()&lt;/code&gt; method ensures that your application only instantiates one &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. For more information, see &lt;a href=&quot;singleton-services#forroot-and-the-router&quot;&gt;Singleton Services&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dbb83be6aba801790f665b970b9f834230c23e" translate="yes" xml:space="preserve">
          <source>This code inspects certain &lt;em&gt;values of interest&lt;/em&gt;, capturing and comparing their current state against previous values. It writes a special message to the log when there are no substantive changes to the &lt;code&gt;hero&lt;/code&gt; or the &lt;code&gt;power&lt;/code&gt; so you can see how often &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;()&lt;/code&gt; is called. The results are illuminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c998372f08c1a101f67cf6fc6453dc480a13a2" translate="yes" xml:space="preserve">
          <source>This code inspects certain &lt;em&gt;values of interest&lt;/em&gt;, capturing and comparing their current state against previous values. It writes a special message to the log when there are no substantive changes to the &lt;code&gt;hero&lt;/code&gt; or the &lt;code&gt;power&lt;/code&gt; so you can see how often &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; is called. The results are illuminating:</source>
          <target state="translated">此代码检查&lt;em&gt;感兴趣的&lt;/em&gt;某些&lt;em&gt;值&lt;/em&gt;，捕获它们的当前状态并将其与以前的值进行比较。当 &lt;code&gt;hero&lt;/code&gt; 或 &lt;code&gt;power&lt;/code&gt; 没有实质性变化时，它会在日志中写入一条特殊消息，以便您查看调用 &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 的频率。结果很有启发：</target>
        </trans-unit>
        <trans-unit id="db010d4e9e3ffb1514bc2b0d8a75b9801342ba2f" translate="yes" xml:space="preserve">
          <source>This code repeats the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tag for each power in the list of powers. The &lt;code&gt;pow&lt;/code&gt; template input variable is a different power in each iteration; you display its name using the interpolation syntax.</source>
          <target state="translated">此代码对电源列表中的每个电源重复 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 标签。的 &lt;code&gt;pow&lt;/code&gt; 模板输入变量是在每次迭代中不同的功率; 您可以使用插值语法显示其名称。</target>
        </trans-unit>
        <trans-unit id="75b5c5fa1c91023ea749d4aa233f6b4929e1dfb1" translate="yes" xml:space="preserve">
          <source>This code sets the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;code&gt;value&lt;/code&gt; property by binding to the &lt;code&gt;name&lt;/code&gt; property. To listen for changes to the value, the code binds to the &lt;code&gt;input&lt;/code&gt; event of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. When the user makes changes, the &lt;code&gt;input&lt;/code&gt; event is raised, and the binding executes the statement within a context that includes the DOM event object, &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="translated">此代码通过绑定到 &lt;code&gt;name&lt;/code&gt; 属性来设置 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; 属性。要侦听该值的更改，代码将绑定到 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素的 &lt;code&gt;input&lt;/code&gt; 事件。当用户进行更改时，将引发 &lt;code&gt;input&lt;/code&gt; 事件，并且绑定将在包含DOM事件对象 &lt;code&gt;$event&lt;/code&gt; 的上下文中执行该语句。</target>
        </trans-unit>
        <trans-unit id="c635cb0e548cea6b4f39f0f4a00a64dd0890bc38" translate="yes" xml:space="preserve">
          <source>This code uses only one &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;, so only one subscription is created. The conditional statement stores the result of &lt;code&gt;userStream|&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; in the local variable &lt;code&gt;user&lt;/code&gt;. You can then bind the local &lt;code&gt;user&lt;/code&gt; repeatedly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077f99384ba94951a54310fe9d28e905bc2e0a9b" translate="yes" xml:space="preserve">
          <source>This code uses only one &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;, so only one subscription is created. The conditional statement stores the result of &lt;code&gt;userStream|async&lt;/code&gt; in the local variable &lt;code&gt;user&lt;/code&gt;. You can then bind the local &lt;code&gt;user&lt;/code&gt; repeatedly.</source>
          <target state="translated">此代码仅使用一个 &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; ，因此仅创建一个订阅。条件语句将 &lt;code&gt;userStream|async&lt;/code&gt; 的结果存储在本地变量 &lt;code&gt;user&lt;/code&gt; 中。然后，您可以重复绑定本地 &lt;code&gt;user&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13648ab24db66abd7c6828bea92fd0f6dff2d7ba" translate="yes" xml:space="preserve">
          <source>This command creates the following &lt;code&gt;UserService&lt;/code&gt; skeleton:</source>
          <target state="translated">此命令创建以下 &lt;code&gt;UserService&lt;/code&gt; 框架：</target>
        </trans-unit>
        <trans-unit id="53ca835c29b278849f8cc8fdbc5ec1ec43128a05" translate="yes" xml:space="preserve">
          <source>This command updates both &lt;code&gt;@angular/material&lt;/code&gt; and its dependency &lt;code&gt;@angular/cdk&lt;/code&gt; in your workspace's &lt;code&gt;package.json&lt;/code&gt;. If either package contains an update schematic that covers migration from the existing version to a new version, the command runs that schematic on your workspace.</source>
          <target state="translated">此命令在工作区的 &lt;code&gt;package.json&lt;/code&gt; 中更新 &lt;code&gt;@angular/material&lt;/code&gt; 及其依赖项 &lt;code&gt;@angular/cdk&lt;/code&gt; 。如果这两个软件包都包含涵盖从现有版本到新版本的迁移的更新原理图，则该命令将在您的工作空间上运行该原理图。</target>
        </trans-unit>
        <trans-unit id="d476387d6c2e84ce2ff55faed0c0f68d60302141" translate="yes" xml:space="preserve">
          <source>This command updates your project's &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;polyfills.ts&lt;/code&gt; files to import the &lt;code&gt;@angular/localize&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f08f688b42cedaf1c2687380db97e840fa25cee" translate="yes" xml:space="preserve">
          <source>This completes the cross validation example. We managed to:</source>
          <target state="translated">这就完成了交叉验证的例子。我们设法:</target>
        </trans-unit>
        <trans-unit id="5c82d5954347561c2d21641e18971743651dd806" translate="yes" xml:space="preserve">
          <source>This component and its tree of child components receive &lt;code&gt;DateLoggerService&lt;/code&gt; instance. Components outside the tree continue to receive the original &lt;code&gt;LoggerService&lt;/code&gt; instance.</source>
          <target state="translated">该组件及其子组件树接收 &lt;code&gt;DateLoggerService&lt;/code&gt; 实例。树外的组件继续接收原始 &lt;code&gt;LoggerService&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="597e9233caedd83ac990f5386a4ce276f54df4c0" translate="yes" xml:space="preserve">
          <source>This component class has no dependencies. To test a service with no dependencies, you create it with &lt;code&gt;new&lt;/code&gt;, poke at its API, and assert expectations on its public state. Do the same with the component class.</source>
          <target state="translated">该组件类没有依赖关系。要测试不依赖项的服务，请使用 &lt;code&gt;new&lt;/code&gt; 创建它，在其API上戳一下，并声明其公共状态的期望值。对组件类执行相同的操作。</target>
        </trans-unit>
        <trans-unit id="c6c28a7b4cc8e7fda5755e8855df5f2f683d4200" translate="yes" xml:space="preserve">
          <source>This component class has no dependencies. To test these types of classes, follow the same steps as you would for a service that has no dependencies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065a8c2a12fca59785e66b9536ad7a4d7503a70d" translate="yes" xml:space="preserve">
          <source>This component instance.</source>
          <target state="translated">这个组件实例。</target>
        </trans-unit>
        <trans-unit id="a07464de42a69a73871d1c32b4cddf78f4a39cff" translate="yes" xml:space="preserve">
          <source>This component's &lt;code&gt;doSomething()&lt;/code&gt; method update's the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately. There's no &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;need to wait&lt;/a&gt;.</source>
          <target state="translated">该组件的 &lt;code&gt;doSomething()&lt;/code&gt; 方法立即更新该组件的数据绑定 &lt;code&gt;comment&lt;/code&gt; 属性。有没有&lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;需要等待&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d24274c6577dbd524765b9a3853f26d6cf76951e" translate="yes" xml:space="preserve">
          <source>This component's &lt;code&gt;doSomething()&lt;/code&gt; method updates the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately. There's no need to &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;delay the update to ensure proper rendering&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8831291497a6d0587b26b1c8ca5ca8dbd14f9441" translate="yes" xml:space="preserve">
          <source>This component's injector lookup tokens. Includes the component itself plus the tokens that the component lists in its &lt;code&gt;providers&lt;/code&gt; metadata.</source>
          <target state="translated">该组件的注射器查询令牌。包括组件本身以及组件在其 &lt;code&gt;providers&lt;/code&gt; 元数据中列出的令牌。</target>
        </trans-unit>
        <trans-unit id="7b0506327a430462426c6e68b6e09fd639e04c8d" translate="yes" xml:space="preserve">
          <source>This concludes the &quot;Tour of Heroes&quot; tutorial. You're ready to learn more about Angular development in the fundamentals section, starting with the &lt;a href=&quot;../guide/architecture&quot;&gt;Architecture&lt;/a&gt; guide.</source>
          <target state="translated">到此结束&amp;ldquo;英雄之旅&amp;rdquo;教程。您可以从基础&lt;a href=&quot;../guide/architecture&quot;&gt;架构&lt;/a&gt;指南开始，在基础知识部分中学习有关Angular开发的更多信息。</target>
        </trans-unit>
        <trans-unit id="e37d0d91df8ad47c0dbbb5e123254e61fce1c600" translate="yes" xml:space="preserve">
          <source>This configuration caches &lt;code&gt;node_modules/&lt;/code&gt; and uses &lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt;&lt;code&gt;npm run&lt;/code&gt;&lt;/a&gt; to run CLI commands, because &lt;code&gt;@angular/cli&lt;/code&gt; is not installed globally. The double dash (&lt;code&gt;--&lt;/code&gt;) is needed to pass arguments into the &lt;code&gt;npm&lt;/code&gt; script.</source>
          <target state="translated">此配置缓存 &lt;code&gt;node_modules/&lt;/code&gt; 并使用&lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt; &lt;code&gt;npm run&lt;/code&gt; &lt;/a&gt;运行CLI命令，因为 &lt;code&gt;@angular/cli&lt;/code&gt; 未全局安装。需要将双破折号（ &lt;code&gt;--&lt;/code&gt; ）传递给 &lt;code&gt;npm&lt;/code&gt; 脚本。</target>
        </trans-unit>
        <trans-unit id="1b488b5be2952d75c23fd56a333c827a2b7d402f" translate="yes" xml:space="preserve">
          <source>This configures the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; preloader to immediately load all lazy loaded routes (routes with a &lt;code&gt;loadChildren&lt;/code&gt; property).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d0adebce1666f54fd687822290b1370ce51244" translate="yes" xml:space="preserve">
          <source>This cookbook contains recipes for common component communication scenarios in which two or more components share information.</source>
          <target state="translated">这本食谱包含了两个或多个组件共享信息的常见组件通信场景的食谱。</target>
        </trans-unit>
        <trans-unit id="a322972c7d99a3ec23cfc786253fdee6e876e02e" translate="yes" xml:space="preserve">
          <source>This cookbook describes the steps required to set up and use Angular app files in Visual Studio 2015 within an ASP.NET 4.x project.</source>
          <target state="translated">本烹饪书介绍了在Visual Studio 2015中在ASP.NET 4.x项目中设置和使用Angular应用文件所需的步骤。</target>
        </trans-unit>
        <trans-unit id="81fab89603358b3015fbab03f643f5619e9e7e16" translate="yes" xml:space="preserve">
          <source>This cookbook shows you how to use &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; to add components dynamically.</source>
          <target state="translated">本食谱向您展示如何使用 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; 动态添加组件。</target>
        </trans-unit>
        <trans-unit id="e813c2193e41174a6e571245c4cd3c17e5e9558e" translate="yes" xml:space="preserve">
          <source>This cookbook shows you how to use &lt;code&gt;formGroup&lt;/code&gt; to dynamically render a simple form with different control types and validation. It's a primitive start. It might evolve to support a much richer variety of questions, more graceful rendering, and superior user experience. All such greatness has humble beginnings.</source>
          <target state="translated">本食谱向您展示如何使用 &lt;code&gt;formGroup&lt;/code&gt; 动态呈现具有不同控件类型和验证的简单表单。这是一个原始的开始。它可能会演变为支持更多种问题，更优美的呈现方式以及出众的用户体验。所有这些伟大之处都始于卑微。</target>
        </trans-unit>
        <trans-unit id="d822107036c9c9bdc81f05621421ed35206b48fe" translate="yes" xml:space="preserve">
          <source>This cookbook uses &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;.</source>
          <target state="translated">本菜谱使用&lt;a href=&quot;reactive-forms&quot;&gt;反应形式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d23601ec63a90736809116d022f4fadccabb0fbd" translate="yes" xml:space="preserve">
          <source>This cookbook uses the &lt;code&gt;Empty&lt;/code&gt; template with no added folders, no authentication, and no hosting. Pick the template and options appropriate for your project.</source>
          <target state="translated">本菜谱使用 &lt;code&gt;Empty&lt;/code&gt; 模板，没有添加文件夹，没有身份验证，也没有托管。选择适合您的项目的模板和选项。</target>
        </trans-unit>
        <trans-unit id="b56c91898d64379544ac2ea2325b00bc842db730" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;customers&lt;/code&gt; folder having the new lazy-loadable feature module &lt;code&gt;CustomersModule&lt;/code&gt; defined in the &lt;code&gt;customers.module.ts&lt;/code&gt; file and the routing module &lt;code&gt;CustomersRoutingModule&lt;/code&gt; defined in the &lt;code&gt;customers-routing.module.ts&lt;/code&gt; file. The command automatically declares the &lt;code&gt;CustomersComponent&lt;/code&gt; and imports &lt;code&gt;CustomersRoutingModule&lt;/code&gt; inside the new feature module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a651647f94c034ce66b15f4ab627c4ac2e28535c" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;customers&lt;/code&gt; folder with the new lazy-loadable module &lt;code&gt;CustomersModule&lt;/code&gt; defined in the file &lt;code&gt;customers.module.ts&lt;/code&gt;. The command automatically adds the &lt;code&gt;CustomerComponent&lt;/code&gt; to the new feature module.</source>
          <target state="translated">这将创建一个 &lt;code&gt;customers&lt;/code&gt; 文件夹与新懒人可装载模块 &lt;code&gt;CustomersModule&lt;/code&gt; 在文件中定义 &lt;code&gt;customers.module.ts&lt;/code&gt; 。该命令会自动将 &lt;code&gt;CustomerComponent&lt;/code&gt; 添加到新功能模块。</target>
        </trans-unit>
        <trans-unit id="14b67ee4f93cd53fc641ba3366b0aa1e81714ab4" translate="yes" xml:space="preserve">
          <source>This creates a new folder called &lt;code&gt;orders&lt;/code&gt; containing an &lt;code&gt;OrdersModule&lt;/code&gt; and &lt;code&gt;OrdersRoutingModule&lt;/code&gt;, along with the new &lt;code&gt;OrderComponent&lt;/code&gt; source files. The &lt;code&gt;order-list&lt;/code&gt; route is added to the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array in &lt;code&gt;app-routing.module.ts&lt;/code&gt;, using the lazy-loading syntax.</source>
          <target state="translated">这将创建一个名为新文件夹 &lt;code&gt;orders&lt;/code&gt; 包含 &lt;code&gt;OrdersModule&lt;/code&gt; 和 &lt;code&gt;OrdersRoutingModule&lt;/code&gt; ，与新一起 &lt;code&gt;OrderComponent&lt;/code&gt; 源文件。使用延迟加载语法，将 &lt;code&gt;order-list&lt;/code&gt; 路由添加到 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 中的 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 数组中。</target>
        </trans-unit>
        <trans-unit id="12212d34d2986bacb58c68284883a32c3bce8fdb" translate="yes" xml:space="preserve">
          <source>This creates a new folder called &lt;code&gt;orders&lt;/code&gt; containing the &lt;code&gt;OrdersModule&lt;/code&gt; and &lt;code&gt;OrdersRoutingModule&lt;/code&gt;, along with the new &lt;code&gt;OrdersComponent&lt;/code&gt; source files. The &lt;code&gt;orders&lt;/code&gt; route, specified with the &lt;code&gt;--route&lt;/code&gt; option, is added to the &lt;code&gt;routes&lt;/code&gt; array inside the &lt;code&gt;app-routing.module.ts&lt;/code&gt; file, using the lazy-loading syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0adbda48788d27b45342d5c21c7e2786033726c" translate="yes" xml:space="preserve">
          <source>This creates a separate file named &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; to store the NgModule's routes. The file includes an empty &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; object that you can fill with routes to different components and NgModules.</source>
          <target state="translated">这将创建一个名为 &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; 的单独文件来存储NgModule的路由。该文件包含一个空的 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 对象，您可以用它填充到不同组件和NgModules的路由。</target>
        </trans-unit>
        <trans-unit id="1e0fcef7f7df8d4e453466c52facdaf940fe0d0a" translate="yes" xml:space="preserve">
          <source>This creates an app called &lt;code&gt;customer-app&lt;/code&gt; and the &lt;code&gt;--routing&lt;/code&gt; flag generates a file called &lt;code&gt;app-routing.module.ts&lt;/code&gt;, which is one of the files you need for setting up lazy loading for your feature module. Navigate into the project by issuing the command &lt;code&gt;cd customer-app&lt;/code&gt;.</source>
          <target state="translated">这将创建一个名为 &lt;code&gt;customer-app&lt;/code&gt; 的应用程序，而 &lt;code&gt;--routing&lt;/code&gt; 标志将生成一个名为 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 的文件，该文件是为功能模块设置延迟加载所需的文件之一。发出命令 &lt;code&gt;cd customer-app&lt;/code&gt; 进入项目。</target>
        </trans-unit>
        <trans-unit id="0198faa84961169c4d04809b0185acf9e3ac22b4" translate="yes" xml:space="preserve">
          <source>This creates the &lt;code&gt;projects/my-lib&lt;/code&gt; folder in your workspace, which contains a component and a service inside an NgModule. The workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is updated with a project of type 'library'.</source>
          <target state="translated">这将在您的工作空间中创建 &lt;code&gt;projects/my-lib&lt;/code&gt; 文件夹，该文件夹在NgModule中包含一个组件和一个服务。使用&amp;ldquo; library&amp;rdquo;类型的项目更新了工作区配置文件 &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="742c3e2e58b8f0be6640dfb54f738b9a9e7625e7" translate="yes" xml:space="preserve">
          <source>This declares that the input property &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive should be treated as a guard to the use of its template, implying that the template will only be instantiated if the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; input property is true.</source>
          <target state="translated">此声明，输入属性 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 的的 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 指令应被视为一个后卫利用其模板，这意味着如果该模板只被实例化 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 输入属性为true。</target>
        </trans-unit>
        <trans-unit id="048e83daee9abd14678f6339d9376992f4af52ee" translate="yes" xml:space="preserve">
          <source>This default behavior is suitable for a typical &quot;multi-repo&quot; development style where each application resides in its own workspace. Beginners and intermediate users are encouraged to use &lt;code&gt;ng new&lt;/code&gt; to create a separate workspace for each application.</source>
          <target state="translated">此默认行为适合于典型的&amp;ldquo;多仓库&amp;rdquo;开发风格，其中每个应用程序都驻留在其自己的工作区中。鼓励初学者和中级用户使用 &lt;code&gt;ng new&lt;/code&gt; 为每个应用程序创建一个单独的工作区。</target>
        </trans-unit>
        <trans-unit id="6587344c6ac0fb7a73ec81835299d2d7ce729572" translate="yes" xml:space="preserve">
          <source>This demo does neither. Instead, it asks the user to make that choice explicitly in a confirmation dialog box that &lt;em&gt;waits asynchronously for the user's answer&lt;/em&gt;.</source>
          <target state="translated">本演示都没有。而是要求用户在确认对话框中明确地做出选择，该对话框&lt;em&gt;异步等待用户的答案&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="87db080ed00574e5e5d7d6687a8530849c3aceb8" translate="yes" xml:space="preserve">
          <source>This demo uses dummy data for &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;powers&lt;/code&gt;. In a real app, you would inject a data service to get and save real data, or expose these properties as inputs and outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5876f473d01141acbb800a8ab479df9db1837f" translate="yes" xml:space="preserve">
          <source>This directive accepts an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance. It will then use this &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to match any child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances to child &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该指令接受现有的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例。然后，它将使用此 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例将任何子 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 实例与子 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; 伪指令进行匹配。</target>
        </trans-unit>
        <trans-unit id="a7989fce38212429c7062b9c5da6235e1e43e7a8" translate="yes" xml:space="preserve">
          <source>This directive can only be used as a child of &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; (within &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags).</source>
          <target state="translated">此伪指令只能用作 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 的子级（在 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记内）。</target>
        </trans-unit>
        <trans-unit id="251b666c976f4261c91fe4beed08cf42cce8548f" translate="yes" xml:space="preserve">
          <source>This directive can only be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">此伪指令只能与父 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 一起使用。</target>
        </trans-unit>
        <trans-unit id="e18d93c8deadcb10dbc3f3516c1984ce080db614" translate="yes" xml:space="preserve">
          <source>This directive is designed to be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; (selector: &lt;code&gt;[formGroup]&lt;/code&gt;).</source>
          <target state="translated">该伪指令旨在与父 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; （选择器： &lt;code&gt;[formGroup]&lt;/code&gt; ）一起使用。</target>
        </trans-unit>
        <trans-unit id="8ac905b9010d53abe6967453b6081cf348d35f38" translate="yes" xml:space="preserve">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">使用已弃用的 &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 选择器时，此伪指令仅用于显示警告。</target>
        </trans-unit>
        <trans-unit id="b316720613e231db957c48b5c531a72244e235ef" translate="yes" xml:space="preserve">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">使用已弃用的 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 选择器时，此伪指令仅用于显示警告。</target>
        </trans-unit>
        <trans-unit id="cf3a222ca96206b5b9edc9d51a79dbc263b73654" translate="yes" xml:space="preserve">
          <source>This directive is used by itself or as part of a larger form. Use the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; selector to activate it.</source>
          <target state="translated">此伪指令可以单独使用，也可以作为较大形式的一部分使用。使用 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 选择器将其激活。</target>
        </trans-unit>
        <trans-unit id="079bfc81b016d5fdb9440e147c8f59ceacfd53ed" translate="yes" xml:space="preserve">
          <source>This directive lets you add a CSS class to an element when the link's route becomes active.</source>
          <target state="translated">这条指令可以让你在链接的路由处于活动状态时为元素添加一个CSS类。</target>
        </trans-unit>
        <trans-unit id="75bdf4a08a98952e88ab0d9d8d3f69ffb18f7db5" translate="yes" xml:space="preserve">
          <source>This document contains information and resources to help you keep your Angular apps and libraries up-to-date.</source>
          <target state="translated">本文档包含了帮助你保持Angular应用和库更新的信息和资源。</target>
        </trans-unit>
        <trans-unit id="5c3c465a1a031a3ba31db55cb2026597de7378a1" translate="yes" xml:space="preserve">
          <source>This document contains the practices that we follow to provide you with a leading-edge app development platform, balanced with stability. We strive to ensure that future changes are always introduced in a predictable way. We want everyone who depends on Angular to know when and how new features are added, and to be well-prepared when obsolete ones are removed.</source>
          <target state="translated">本文档包含了我们遵循的实践,为您提供一个领先的应用程序开发平台,同时兼顾稳定性。我们努力确保总是以可预测的方式引入未来的变化。我们希望每个依赖Angular的人都能知道何时以及如何添加新功能,并在删除过时的功能时做好充分准备。</target>
        </trans-unit>
        <trans-unit id="5bc557b45ba44abe0921a0e64654f12154157a7c" translate="yes" xml:space="preserve">
          <source>This document explains how CLI builders integrate with the workspace configuration file, and shows how you can create your own builder.</source>
          <target state="translated">本文档解释了CLI构建器如何与工作空间配置文件集成,并展示了如何创建自己的构建器。</target>
        </trans-unit>
        <trans-unit id="a18d52460187370aee9da7ba825b392cfeb2488a" translate="yes" xml:space="preserve">
          <source>This document explains how to enable Angular service worker support in projects that you created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. It then uses a simple example to show you a service worker in action, demonstrating loading and basic caching.</source>
          <target state="translated">本文档说明了如何在使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建的项目中启用Angular Service Worker支持。然后，它使用一个简单的示例向您展示实际中的服务工作者，演示了加载和基本缓存。</target>
        </trans-unit>
        <trans-unit id="91cf023004b2aaf04380d0ea7e79d9a637aeaec2" translate="yes" xml:space="preserve">
          <source>This document refers to a unit of translatable text as &quot;text,&quot; a &quot;message&quot;, or a &quot;text message.&quot;</source>
          <target state="translated">本文件将可译文本的单位称为 &quot;文本&quot;、&quot;信息 &quot;或 &quot;文本信息&quot;。</target>
        </trans-unit>
        <trans-unit id="f12cdb59b126570dec1c8c00fc1543f0b13ae7d0" translate="yes" xml:space="preserve">
          <source>This does not use the deprecated jsdoc tag on purpose because it renders all overloads as deprecated in TSLint due to &lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522&lt;/a&gt;.</source>
          <target state="translated">这不是故意使用不推荐使用的jsdoc标记，因为由于&lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522，&lt;/a&gt;它使所有重载都在TSLint中被弃用。</target>
        </trans-unit>
        <trans-unit id="49942dcd9689b7ed449bd1f739e91d6c6991a659" translate="yes" xml:space="preserve">
          <source>This does the same things as the Circle CI configuration, except that Travis doesn't come with Chrome, so we use Chromium instead.</source>
          <target state="translated">这和Circle CI配置一样,只是Travis没有配备Chrome,所以我们用Chromium代替。</target>
        </trans-unit>
        <trans-unit id="e20d0e4a3c8903623d5db93d1eaa42a7319f2bb4" translate="yes" xml:space="preserve">
          <source>This does the same things as the CircleCI configuration, except that Travis doesn't come with Chrome, so use Chromium instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a173481108f8e08ee23eccdc0ba37f48670a382" translate="yes" xml:space="preserve">
          <source>This duration string specifies the network timeout. The network timeout is how long the Angular service worker will wait for the network to respond before using a cached response, if configured to do so. &lt;code&gt;timeout&lt;/code&gt; is a duration string, using the following unit suffixes:</source>
          <target state="translated">此持续时间字符串指定网络超时。网络超时是Angular服务人员在使用缓存的响应（如果配置为这样做）之前将等待网络响应的时间。 &lt;code&gt;timeout&lt;/code&gt; 是一个持续时间字符串，使用以下单位后缀：</target>
        </trans-unit>
        <trans-unit id="148a52c96fd5321b2e9f47b1c411e3997ad1ee54" translate="yes" xml:space="preserve">
          <source>This ensures that the build and serve commands can find the configurations for specific build targets.</source>
          <target state="translated">这确保了构建和服务命令可以找到特定构建目标的配置。</target>
        </trans-unit>
        <trans-unit id="dd6ef74d3212dfa09ccacfec3ba04d981a0ae6bd" translate="yes" xml:space="preserve">
          <source>This error can occur if you use an expression in the &lt;code&gt;extends&lt;/code&gt; clause of a class.</source>
          <target state="translated">如果您在类的 &lt;code&gt;extends&lt;/code&gt; 子句中使用表达式，则会发生此错误。</target>
        </trans-unit>
        <trans-unit id="f96ad016e893a674d5f49749d37377695df58a8c" translate="yes" xml:space="preserve">
          <source>This error often means that you haven't declared the directive &quot;x&quot; or haven't imported the NgModule to which &quot;x&quot; belongs.</source>
          <target state="translated">这个错误通常意味着你没有声明指令 &quot;x &quot;或者没有导入 &quot;x &quot;所属的NgModule。</target>
        </trans-unit>
        <trans-unit id="ef4ec03d4ed605a8e9e66585cd5c2453ff07a4af" translate="yes" xml:space="preserve">
          <source>This example adds a few getter methods. In a reactive form, you can always access any form control through the &lt;code&gt;get&lt;/code&gt; method on its parent group, but sometimes it's useful to define getters as shorthands for the template.</source>
          <target state="translated">此示例添加了一些getter方法。在反应形式中，您始终可以通过其父组上的 &lt;code&gt;get&lt;/code&gt; 方法访问任何表单控件，但是有时将getter定义为模板的简写很有用。</target>
        </trans-unit>
        <trans-unit id="835a254bafaad8e2e761a6f3738065e79183f666" translate="yes" xml:space="preserve">
          <source>This example adds a state transition from the &lt;code&gt;closed&lt;/code&gt; state to the &lt;code&gt;open&lt;/code&gt; state with a 0.5 second transition animation arc.</source>
          <target state="translated">此示例使用0.5秒的过渡动画弧添加从 &lt;code&gt;closed&lt;/code&gt; 状态到 &lt;code&gt;open&lt;/code&gt; 状态的状态过渡。</target>
        </trans-unit>
        <trans-unit id="e27903790bcd6cf8a4d227d598fb3d9c51e485a2" translate="yes" xml:space="preserve">
          <source>This example also adds a few getter methods. In a reactive form, you can always access any form control through the &lt;code&gt;get&lt;/code&gt; method on its parent group, but sometimes it's useful to define getters as shorthand for the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a1afa39668210136eb0481e3dfa7dda063e91e" translate="yes" xml:space="preserve">
          <source>This example app asks the user to be explicit with a confirmation dialog box that waits asynchronously for the user's response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3871ea91cb489329270131828414d4e4a419b07f" translate="yes" xml:space="preserve">
          <source>This example applies the &lt;code&gt;SpyDirective&lt;/code&gt; from the previous example to the &lt;code&gt;CounterComponent&lt;/code&gt; log, in order to watch the creation and destruction of log entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b20a46620fed8511ccd3504ac47cc1854c74e2" translate="yes" xml:space="preserve">
          <source>This example applies the &lt;code&gt;SpyDirective&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in an &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;&lt;em&gt;hero&lt;/em&gt; repeater managed by the parent &lt;code&gt;SpyComponent&lt;/code&gt;.</source>
          <target state="translated">此示例适用的 &lt;code&gt;SpyDirective&lt;/code&gt; 到 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;em&gt;英雄&lt;/em&gt;由父管理中继器 &lt;code&gt;SpyComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dfd88d242d31d74d24a1d273231ff4e8624d83a" translate="yes" xml:space="preserve">
          <source>This example binds a &lt;code&gt;Promise&lt;/code&gt; to the view. Clicking the &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; button resolves the promise.</source>
          <target state="translated">本示例将 &lt;code&gt;Promise&lt;/code&gt; 绑定到视图。单击&amp;ldquo; &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 按钮可解决承诺。</target>
        </trans-unit>
        <trans-unit id="76fea2ff263dbc0e5640bda0886d27fd33ac4eb8" translate="yes" xml:space="preserve">
          <source>This example completely replaces the component's &lt;code&gt;providers&lt;/code&gt; array with a new array containing a &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt;.</source>
          <target state="translated">此示例使用包含 &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt; 的新数组完全替换了组件的 &lt;code&gt;providers&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="b38e94209799b7cb2ad45b15b4c0f49aebeeaf6c" translate="yes" xml:space="preserve">
          <source>This example features an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; where a user can enter a value and click a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; that raises an event. The &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; then relays the data to the parent component.</source>
          <target state="translated">此示例具有一个 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ，用户可以在其中输入一个值并单击引发事件的 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 。然后， &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 将数据中继到父组件。</target>
        </trans-unit>
        <trans-unit id="e3900b3c5f734c8b42b0423653ffc07e9a8c5717" translate="yes" xml:space="preserve">
          <source>This example filters the &lt;code&gt;title&lt;/code&gt; property to uppercase.</source>
          <target state="translated">本示例将 &lt;code&gt;title&lt;/code&gt; 属性过滤为大写。</target>
        </trans-unit>
        <trans-unit id="175ec0e7ef7252b24060674256a084243d66f30a" translate="yes" xml:space="preserve">
          <source>This example from the &lt;code&gt;HeroListComponent&lt;/code&gt; template uses three of these forms.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; 模板中的此示例使用以下三种形式。</target>
        </trans-unit>
        <trans-unit id="c018c65b2f71e95da11870a345d0bd8ce8ee7841" translate="yes" xml:space="preserve">
          <source>This example has a special trigger for the enter and leave animation called &lt;code&gt;myInsertRemoveTrigger&lt;/code&gt;. The HTML template contains the following code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c383e4bfd674f8c3ca365e3f2524cda5c7864ed8" translate="yes" xml:space="preserve">
          <source>This example has a temporary diagnostic interpolation after each input tag, &lt;code&gt;{{model.name}}&lt;/code&gt;, to show the current data value of the corresponding property. The note reminds you to remove the diagnostic lines when you have finished observing the two-way data binding at work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f92247fb3553c5917ea007bd2c3e17c2e4d8ad" translate="yes" xml:space="preserve">
          <source>This example is so simple that it is tempting to write the &lt;code&gt;Http.get()&lt;/code&gt; inside the component itself and skip the service. In practice, however, data access rarely stays this simple. You typically need to post-process the data, add error handling, and maybe some retry logic to cope with intermittent connectivity.</source>
          <target state="translated">这个示例非常简单， &lt;code&gt;Http.get()&lt;/code&gt; 在组件本身内部编写Http.get（）并跳过服务。但是实际上，数据访问很少保持这种简单性。通常，您需要对数据进行后处理，添加错误处理，也许还需要一些重试逻辑来应对间歇性连接。</target>
        </trans-unit>
        <trans-unit id="7738f3bfb08d1f44b77915ef508354d761db0235" translate="yes" xml:space="preserve">
          <source>This example provides a state transition from &lt;code&gt;open&lt;/code&gt; to &lt;code&gt;closed&lt;/code&gt; with a one second transition between states.</source>
          <target state="translated">该示例提供了从 &lt;code&gt;open&lt;/code&gt; 到 &lt;code&gt;closed&lt;/code&gt; 的状态转换，状态之间有一秒钟的转换。</target>
        </trans-unit>
        <trans-unit id="9e2fbcbc42a2d75d74a3222a5d342beb0a9c1ce0" translate="yes" xml:space="preserve">
          <source>This example recreates the heroes feature in the &quot;Services&quot; episode of the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;, and you'll be copying much of the code from the .</source>
          <target state="translated">本示例在&amp;ldquo; &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes&amp;rdquo;教程&lt;/a&gt;的&amp;ldquo; Services&amp;rdquo;一集中重新创建了heroes功能，您将从中复制许多代码。</target>
        </trans-unit>
        <trans-unit id="373455b46f233c304aab2070dd6730bb07e917cc" translate="yes" xml:space="preserve">
          <source>This example shows some of the most useful &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; configuration options:</source>
          <target state="translated">此示例显示了一些最有用的 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 配置选项：</target>
        </trans-unit>
        <trans-unit id="9700001752d1ddad2bef57a54fdbab31b4d92d72" translate="yes" xml:space="preserve">
          <source>This example wires parent buttons to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; and uses interpolation to display the child's &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">本示例将父级按钮连接到孩子的 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 并使用插值显示孩子的 &lt;code&gt;seconds&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="7de281f2ca63df5ae46cabdcc5a3f0a47f5d8df0" translate="yes" xml:space="preserve">
          <source>This example&amp;mdash;which displays &lt;strong&gt;&lt;samp&gt;FRIDAY, APRIL 15, 1988&lt;/samp&gt;&lt;/strong&gt;&amp;mdash;chains the same pipes as above, but passes in a parameter to &lt;code&gt;date&lt;/code&gt; as well.</source>
          <target state="translated">此示例-显示 &lt;strong&gt;&lt;samp&gt;1988年4月15日，星期五&lt;/samp&gt;&lt;/strong&gt;-链接与上述相同的管道，但也要传递一个参数以保持 &lt;code&gt;date&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4820eaf9e83b02c2a47b5745671a9d1f9f915362" translate="yes" xml:space="preserve">
          <source>This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue pipe.</source>
          <target state="translated">这个例子展示了如何通过ngFor使用这个key-value管道对一个对象或Map进行迭代。</target>
        </trans-unit>
        <trans-unit id="d18607ddf27a24b42e28d94bce4f221af52bab0a" translate="yes" xml:space="preserve">
          <source>This exercise shows how you can respond to a native HTML button-click event by adding to the model data. To let form users add a new hero, you will add a &lt;strong&gt;New Hero&lt;/strong&gt; button that responds to a click event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13f81c361ce43971a48c424f3851c8dbc4f0ebf" translate="yes" xml:space="preserve">
          <source>This exists to support future Ivy work and has no effect currently.</source>
          <target state="translated">这是为支持未来的艾毅工作而存在的,目前没有影响。</target>
        </trans-unit>
        <trans-unit id="29df732f2a0c84758770605719258bd4b737a4b9" translate="yes" xml:space="preserve">
          <source>This field contains an array of URLs and &lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;glob-like&lt;/a&gt; URL patterns that will be matched at runtime. It can contain both negative patterns (i.e. patterns starting with &lt;code&gt;!&lt;/code&gt;) and non-negative patterns and URLs.</source>
          <target state="translated">该字段包含将在运行时匹配的URL 数组和&lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;类似glob的&lt;/a&gt; URL模式。它可以包含否定模式（即，以 &lt;code&gt;!&lt;/code&gt; 开头的模式）和非否定模式和URL。</target>
        </trans-unit>
        <trans-unit id="8a65db321c5e9974fc66318e4ba5bcd4b192ba5d" translate="yes" xml:space="preserve">
          <source>This field contains an array of asset groups, each of which defines a set of asset resources and the policy by which they are cached.</source>
          <target state="translated">该字段包含一个资产组的数组,每个资产组定义了一组资产资源和缓存这些资源的策略。</target>
        </trans-unit>
        <trans-unit id="1c59748df0f341098bafef8c91da8de48dc6bd24" translate="yes" xml:space="preserve">
          <source>This field contains an array of data groups, each of which defines a set of data resources and the policy by which they are cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db68317d18e90d33c9d724f39c1b4574e3e29e26" translate="yes" xml:space="preserve">
          <source>This field does not need to have a value. Its existence communicates to the Angular type checker that the &lt;code&gt;disabled&lt;/code&gt; input should be considered as accepting bindings that match the type &lt;code&gt;boolean|''&lt;/code&gt;. The suffix should be the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;&lt;em&gt;field&lt;/em&gt; name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dca8bdfadccce3aa32a1f0f34acf9df4dfd38c" translate="yes" xml:space="preserve">
          <source>This file contains imports and functionality that is available to the entire app.</source>
          <target state="translated">这个文件包含了整个应用程序的导入和功能。</target>
        </trans-unit>
        <trans-unit id="c09c8b1c3afe0b2f3e211e35dda11d6b49d046a2" translate="yes" xml:space="preserve">
          <source>This file contains options and flags that are essential for Angular applications.</source>
          <target state="translated">这个文件包含了Angular应用所必需的选项和标志。</target>
        </trans-unit>
        <trans-unit id="7774dea1cbb9ba9a9affbe79a52ad87b124f3078" translate="yes" xml:space="preserve">
          <source>This file does the following:</source>
          <target state="translated">这个文件的作用如下:</target>
        </trans-unit>
        <trans-unit id="8e6fad8835e771be15a7e60de8d9f839976d92ca" translate="yes" xml:space="preserve">
          <source>This file integrity is especially important when lazy loading modules. A JS bundle may reference many lazy chunks, and the filenames of the lazy chunks are unique to the particular build of the app. If a running app at version &lt;code&gt;X&lt;/code&gt; attempts to load a lazy chunk, but the server has updated to version &lt;code&gt;X + 1&lt;/code&gt; already, the lazy loading operation will fail.</source>
          <target state="translated">延迟加载模块时，此文件完整性特别重要。JS捆绑包可能引用许多惰性块，并且这些惰性块的文件名对于应用程序的特定版本而言是唯一的。如果正在运行的版本 &lt;code&gt;X&lt;/code&gt; 的应用程序尝试加载惰性块，但服务器已更新至版本 &lt;code&gt;X + 1&lt;/code&gt; ，则惰性加载操作将失败。</target>
        </trans-unit>
        <trans-unit id="18dc9ff9208e9157f8adfe6cb8c2bceab30b16aa" translate="yes" xml:space="preserve">
          <source>This first implementation sets the background color of the host element to yellow.</source>
          <target state="translated">第一个实现将主机元素的背景色设置为黄色。</target>
        </trans-unit>
        <trans-unit id="e338895d77bf3b3efdf78e1a4135c26e375e5651" translate="yes" xml:space="preserve">
          <source>This form differs from the template-driven version in that it no longer exports any directives. Instead, it uses the &lt;code&gt;name&lt;/code&gt; getter defined in the component class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc36f6372162820e0033b4e4ebdc541bbbe324f4" translate="yes" xml:space="preserve">
          <source>This function &lt;em&gt;must&lt;/em&gt; match the form above: an arrow function of the form &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;.</source>
          <target state="translated">此函数&lt;em&gt;必须&lt;/em&gt;与上面的形式匹配： &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt; 形式的箭头函数。</target>
        </trans-unit>
        <trans-unit id="4878fd2cfdcaf11685e5e72d2354cd83ec8f9724" translate="yes" xml:space="preserve">
          <source>This function is functionally the same as &lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt; at this level. It exists for symmetry with &lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt; on &lt;code&gt;FormGroups&lt;/code&gt; and &lt;code&gt;FormArrays&lt;/code&gt;, where it does behave differently.</source>
          <target state="translated">此功能在此级别上与&lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt;在功能上相同。它的存在与对称&lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt;上 &lt;code&gt;FormGroups&lt;/code&gt; 和 &lt;code&gt;FormArrays&lt;/code&gt; ，如果它确实表现不同。</target>
        </trans-unit>
        <trans-unit id="56d3f264d77db65b5e665e640dd42a9db6e677ef" translate="yes" xml:space="preserve">
          <source>This function returns an &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorated class that is configured to wire up the Angular and AngularJS injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">该函数返回一个 &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰的类，该类配置为连接Angular和AngularJS注入器，而无需实际引导混合应用程序。这使得单元测试服务更简单，更快捷。</target>
        </trans-unit>
        <trans-unit id="e6acc9bce8fe23418fda41554da4f4e2de103857" translate="yes" xml:space="preserve">
          <source>This function returns an AngularJS module that is configured to wire up the AngularJS and Angular injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">该函数返回一个AngularJS模块,该模块被配置为连接AngularJS和Angular注入器,而无需实际引导一个混合应用程序。这使得单元测试服务更加简单和快速。</target>
        </trans-unit>
        <trans-unit id="ec2de2fde95bef298a51f31a0130f6587e05afec" translate="yes" xml:space="preserve">
          <source>This functionality is only available when you have loaded the full locale data. See the &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;&quot;I18n guide&quot;&lt;/a&gt;.</source>
          <target state="translated">仅当您加载了完整的语言环境数据时，此功能才可用。请参阅&lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;&amp;ldquo; I18n指南&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71d1005561ab53d8d9b93d80838e0492d40b9143" translate="yes" xml:space="preserve">
          <source>This general rule can help you build a mental model of attributes and DOM properties: &lt;strong&gt;Attributes initialize DOM properties and then they are done. Property values can change; attribute values can't.&lt;/strong&gt;</source>
          <target state="translated">该通用规则可以帮助您建立属性和DOM属性的思维模型：&lt;strong&gt;属性初始化DOM属性，然后完成它们。属性值可以更改；属性值不能。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed51a3d987c448eabd0caaad7d11446c5f4ee98e" translate="yes" xml:space="preserve">
          <source>This generates a folder for the new component within the customer-dashboard folder and updates the feature module with the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; info:</source>
          <target state="translated">这将在customer-dashboard文件夹中为新组件生成一个文件夹，并使用 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 信息更新功能模块：</target>
        </trans-unit>
        <trans-unit id="a8ca933ae9ed34a8a06321e5395d5386f3467055" translate="yes" xml:space="preserve">
          <source>This gives users a meaningful first paint of your application that appears quickly because the browser can simply render the HTML and CSS without the need to initialize any JavaScript.</source>
          <target state="translated">这为用户提供了一个有意义的应用程序的第一个涂料,它出现得很快,因为浏览器可以简单地渲染HTML和CSS,而不需要初始化任何JavaScript。</target>
        </trans-unit>
        <trans-unit id="7491170871e6c27e83f7232d07de91c8f51b4dc0" translate="yes" xml:space="preserve">
          <source>This glossary lists the most prominent terms and a few less familiar ones with unusual or unexpected definitions.</source>
          <target state="translated">本词汇表列出了最著名的术语和一些不太熟悉的术语,以及一些不寻常或意外的定义。</target>
        </trans-unit>
        <trans-unit id="fdd0dd4255112079ec8cd2cac891a62c3bc630af" translate="yes" xml:space="preserve">
          <source>This guard returns a synchronous boolean result. If the user is logged in, it returns true and the navigation continues.</source>
          <target state="translated">该守卫返回一个同步布尔结果。如果用户已登录,则返回true并继续导航。</target>
        </trans-unit>
        <trans-unit id="99832741e09d1b5644ac6acf807f68e045c1d8e4" translate="yes" xml:space="preserve">
          <source>This guide assumes that you have a basic understanding of the following.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b0a76f127063119253692ead9f31153f3cf61f" translate="yes" xml:space="preserve">
          <source>This guide assumes you are already familiar with developing and building Angular applications using the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">本指南假定您已经熟悉使用&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;开发和构建Angular应用程序。</target>
        </trans-unit>
        <trans-unit id="f91f9ca40378a30abae72457a623c7d9b92e26f1" translate="yes" xml:space="preserve">
          <source>This guide contains a summary of all Angular APIs and features that are currently deprecated.</source>
          <target state="translated">本指南包含了所有目前已经废弃的Angular API和功能的总结。</target>
        </trans-unit>
        <trans-unit id="663987c724bd81899dc1933e4786c728fbe26b01" translate="yes" xml:space="preserve">
          <source>This guide contains information related to updating to the latest version of Angular.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03008f3c8f9dc5daf041fcc08d5096f9ec3c5aa" translate="yes" xml:space="preserve">
          <source>This guide covers the basic Angular animation features to get you started on adding Angular animations to your project.</source>
          <target state="translated">本指南涵盖了基本的Angular动画功能,让你开始在项目中添加Angular动画。</target>
        </trans-unit>
        <trans-unit id="72e2d1efd7dc0408171b8a02495eccd2a194f9ee" translate="yes" xml:space="preserve">
          <source>This guide covers the router's primary features, illustrating them through the evolution of a small application that you can run live in the browser.</source>
          <target state="translated">本指南涵盖了路由器的主要功能,通过一个可以在浏览器中实时运行的小应用程序的演变来说明它们。</target>
        </trans-unit>
        <trans-unit id="16b4b3c7d27b05a7a93d7585fd80da6f87695735" translate="yes" xml:space="preserve">
          <source>This guide demonstrates that scenario with an example in the Tour of Heroes theme. Imagine an outer &lt;code&gt;HeroListComponent&lt;/code&gt; that displays a list of super heroes.</source>
          <target state="translated">本指南以&amp;ldquo;环游英雄&amp;rdquo;主题为例演示了该场景。想象一下一个外部 &lt;code&gt;HeroListComponent&lt;/code&gt; ，其中显示了超级英雄列表。</target>
        </trans-unit>
        <trans-unit id="94795f12569496bcae1ed95d5adfb2856a55c12a" translate="yes" xml:space="preserve">
          <source>This guide describes &lt;strong&gt;Angular Universal&lt;/strong&gt;, a technology that renders Angular applications on the server.</source>
          <target state="translated">本指南介绍了&lt;strong&gt;Angular Universal&lt;/strong&gt;，该技术可在服务器上呈现Angular应用程序。</target>
        </trans-unit>
        <trans-unit id="7c79df812f600818480fccaad006560ab578d116" translate="yes" xml:space="preserve">
          <source>This guide describes development of a multi-page routed sample application. Along the way, it highlights design decisions and describes key features of the router such as:</source>
          <target state="translated">本指南介绍了一个多页路由示例应用程序的开发。一路走来,它强调了设计决策,并描述了路由器的关键特性,如:。</target>
        </trans-unit>
        <trans-unit id="85b1e7320fc65610cb0b9d5744a3924bbc69efbb" translate="yes" xml:space="preserve">
          <source>This guide describes development of a multi-page routed sample application. Along the way, it highlights key features of the router such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eaa5268ab448450e02df4dcd7d854a3b74ebfd4" translate="yes" xml:space="preserve">
          <source>This guide describes how to develop locally on your own machine. Setting up a new project on your machine is quick and easy with the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart seed on github&lt;/a&gt;.</source>
          <target state="translated">本指南介绍了如何在自己的计算机上进行本地开发。借助&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;github&lt;/a&gt;上的QuickStart种子，可以轻松快捷地在计算机上设置新项目。</target>
        </trans-unit>
        <trans-unit id="a071d6040e5b884251f92cb51a3a612a4400f9c1" translate="yes" xml:space="preserve">
          <source>This guide describes some of the built-in tools for efficiently migrating AngularJS projects over to the Angular platform, one piece at a time. It is very similar to &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; with the exception that this one uses the &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule()&lt;/a&gt; helper function instead of the &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt; class. This affects how the app is bootstrapped and how change detection is propagated between the two frameworks. It allows you to upgrade incrementally while improving the speed of your hybrid apps and leveraging the latest of Angular in AngularJS apps early in the process of upgrading.</source>
          <target state="translated">本指南介绍了一些内置工具，这些工具可一次高效地将AngularJS项目迁移到Angular平台。它与&lt;a href=&quot;upgrade&quot;&gt;从AngularJS&lt;/a&gt;进行升级非常相似，不同之处在于该示例使用&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule（）&lt;/a&gt;帮助函数而不是&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;类。这会影响应用程序的启动方式，以及在两个框架之间传播更改检测的方式。它可让您进行增量升级，同时提高混合应用程序的速度，并在升级过程中尽早利用AngularJS应用程序中最新的Angular。</target>
        </trans-unit>
        <trans-unit id="52f91de3b44e77776bb5d72dda1262736b0f2d6c" translate="yes" xml:space="preserve">
          <source>This guide explains how to build and test Angular apps with Bazel.</source>
          <target state="translated">本指南介绍了如何使用Bazel构建和测试Angular应用。</target>
        </trans-unit>
        <trans-unit id="a7f2364975bf639296fbad2e6ccfbf1dc9b2ff63" translate="yes" xml:space="preserve">
          <source>This guide explains how to set up your environment for Angular development using the &lt;a href=&quot;cli&quot;&gt;Angular CLI tool&lt;/a&gt;. It includes information about prerequisites, installing the CLI, creating an initial workspace and starter app, and running that app locally to verify your setup.</source>
          <target state="translated">本指南介绍了如何使用&lt;a href=&quot;cli&quot;&gt;Angular CLI工具&lt;/a&gt;为Angular开发设置环境。它包含有关先决条件，安装CLI，创建初始工作区和启动程序应用程序以及在本地运行该应用程序以验证设置的信息。</target>
        </trans-unit>
        <trans-unit id="e4e5dc8be1da9c2744ee3e6ff19277fa157b7049" translate="yes" xml:space="preserve">
          <source>This guide explains how to specify metadata and apply available compiler options to compile your applications efficiently using the AOT compiler.</source>
          <target state="translated">本指南解释了如何指定元数据和应用可用的编译器选项,以使用AOT编译器有效地编译你的应用程序。</target>
        </trans-unit>
        <trans-unit id="bde2ceb420303c6bb7fd13502c38aab2782431cb" translate="yes" xml:space="preserve">
          <source>This guide explores common component testing use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e0ddc6e4a1bac092793252db146528b491a1a7" translate="yes" xml:space="preserve">
          <source>This guide follows that approach. It has a &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; folder under &lt;code&gt;src/&lt;/code&gt;. Assets within that folder have a filename extension that matches their associated locale.</source>
          <target state="translated">本指南遵循该方法。它在 &lt;code&gt;src/&lt;/code&gt; 下有一个 &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; 文件夹。该文件夹中的资产的文件扩展名与其关联的语言环境相匹配。</target>
        </trans-unit>
        <trans-unit id="2488b81bee26c1a6b3945e50d5b7209076c7232f" translate="yes" xml:space="preserve">
          <source>This guide goes into greater depth on special transition states such as &lt;code&gt;*&lt;/code&gt; (wildcard) and &lt;code&gt;void&lt;/code&gt;, and show how these special states are used for elements entering and leaving a view. This chapter also explores multiple animation triggers, animation callbacks, and sequence-based animation using keyframes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4fe0eebc6c53dfd8ba7ae172b29d6085d11576f" translate="yes" xml:space="preserve">
          <source>This guide helps you transition from AngularJS to Angular by mapping AngularJS syntax to the equivalent Angular syntax.</source>
          <target state="translated">本指南通过将AngularJS语法映射到等价的Angular语法,帮助你从AngularJS过渡到Angular。</target>
        </trans-unit>
        <trans-unit id="8b1d6ce9f824c1b57c26e8b4535de072da1382f6" translate="yes" xml:space="preserve">
          <source>This guide is a &lt;em&gt;living document&lt;/em&gt;; it changes over time. We strive for consistency to the extent feasible, but you may find parts of our documentation that don't match this style guide. When in doubt, &lt;strong&gt;follow this guide rather than imitating existing documents.&lt;/strong&gt;</source>
          <target state="translated">本指南是一份&lt;em&gt;活泼的文件&lt;/em&gt; ; 它会随着时间变化。我们力求在可行的范围内保持一致性，但您可能会发现我们文档中与本样式指南不符的部分。如有疑问，请&lt;strong&gt;遵循本指南，而不要模仿现有文档。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b86a88184ea70d17effff794189dd4cb85c357f" translate="yes" xml:space="preserve">
          <source>This guide looks at how Angular manipulates the DOM with &lt;strong&gt;structural directives&lt;/strong&gt; and how you can write your own structural directives to do the same thing.</source>
          <target state="translated">本指南介绍了Angular如何使用&lt;strong&gt;结构化指令&lt;/strong&gt;操纵DOM，以及如何编写自己的结构化指令来完成相同的操作。</target>
        </trans-unit>
        <trans-unit id="593d82739fc5c50f931f13f1ea5af12b64068cec" translate="yes" xml:space="preserve">
          <source>This guide offers tips and techniques for unit and integration testing Angular applications.</source>
          <target state="translated">本指南提供了单元和集成测试Angular应用的技巧和方法。</target>
        </trans-unit>
        <trans-unit id="ef57621e56bb2f75a1048b0c3475daddc587411b" translate="yes" xml:space="preserve">
          <source>This guide proceeds as a sequence of milestones as if you were building the app step-by-step, but assumes you are familiar with basic &lt;a href=&quot;architecture&quot;&gt;Angular concepts&lt;/a&gt;. For a general introduction to angular, see the &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt;. For a more in-depth overview, see the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes&lt;/a&gt; tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d6e75bcf91e32b2e66ca76df8b63da387d1f38" translate="yes" xml:space="preserve">
          <source>This guide proceeds in phases, marked by milestones, starting from a simple two-pager and building toward a modular, multi-view design with child routes.</source>
          <target state="translated">本指南分阶段进行,以里程碑为标志,从简单的两页纸开始,到带有子路线的模块化、多视角设计。</target>
        </trans-unit>
        <trans-unit id="d3c69f9ce0aa91fc4ff28ea4156ea22eb64b216f" translate="yes" xml:space="preserve">
          <source>This guide provides information to help you decide which type of form works best for your situation. It introduces the common building blocks used by both approaches. It also summarizes the key differences between the two approaches, and demonstrates those differences in the context of setup, data flow, and testing.</source>
          <target state="translated">本指南提供信息,帮助您决定哪种类型的表格最适合您的情况。本指南介绍了两种方法所使用的共同构件,并总结了两种方法之间的主要差异,并在设置、数据流和测试中演示了这些差异。它还总结了这两种方法之间的主要区别,并在设置、数据流和测试的背景下展示了这些区别。</target>
        </trans-unit>
        <trans-unit id="ff1a4eed9922504491639bfc2f2085934810a731" translate="yes" xml:space="preserve">
          <source>This guide shows you how to use Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;routing&lt;/a&gt; to give the user in-app navigation. In a single-page app, instead of loading new pages, you show different components and data to the user based on where the user is in the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d34585a93f67fec9f496e464bff52a80a3a9cbe" translate="yes" xml:space="preserve">
          <source>This guide uses the StackBlitz Generator to show you a ready-made, simple application that you can examine and play with interactively. In actual development you will typically use the &lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;, a powerful command-line tool that lets you generate and modify applications. For more information, see the &lt;a href=&quot;https://angular.io/cli&quot;&gt;CLI Overview&lt;/a&gt;.</source>
          <target state="translated">本指南使用StackBlitz生成器向您展示现成的简单应用程序，您可以进行交互检查和使用。在实际开发中，您通常会使用&lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;，这是一个功能强大的命令行工具，可让您生成和修改应用程序。有关更多信息，请参见&lt;a href=&quot;https://angular.io/cli&quot;&gt;CLI概述&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e586281684b3e248038b701f36893a54ff5a55bc" translate="yes" xml:space="preserve">
          <source>This guide won't repeat how to &lt;em&gt;use&lt;/em&gt; them. But it does explain &lt;em&gt;how they work&lt;/em&gt; and how to &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own&lt;/a&gt; structural directive.</source>
          <target state="translated">本指南不会重复&lt;em&gt;使用&lt;/em&gt;它们的方法。但这确实说明&lt;em&gt;了它们如何工作&lt;/em&gt;以及如何&lt;a href=&quot;structural-directives#unless&quot;&gt;编写自己的&lt;/a&gt;结构指令。</target>
        </trans-unit>
        <trans-unit id="e3989ef0ea3239b97b243b6842c7b698d20fb5bb" translate="yes" xml:space="preserve">
          <source>This guide works with a CLI-generated Angular app. If you are working manually, make sure that you have &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your index.html file. This assumes that the &lt;code&gt;app&lt;/code&gt; folder is the application root, and uses &lt;code&gt;&quot;/&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051838d2f6789f70fb2f89d0d3b7b55f2fd66a1e" translate="yes" xml:space="preserve">
          <source>This has been deprecated for a few reasons. First, developers have found this pattern confusing. It seems like the actual &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive is being used, but in fact it's an input/output property named &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; on the reactive form directive that simply approximates (some of) its behavior. Specifically, it allows getting/setting the value and intercepting value events. However, some of &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;'s other features - like delaying updates with&lt;code&gt;ngModelOptions&lt;/code&gt; or exporting the directive - simply don't work, which has understandably caused some confusion.</source>
          <target state="translated">由于某些原因，已弃用此方法。首先，开发人员发现此模式令人困惑。看起来好像正在使用实际的 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令，但实际上，它是反应形式指令上名为 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的输入/输出属性，它只是近似（部分）其行为。具体来说，它允许获取/设置值并拦截值事件。但是， &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的其他一些功能（例如，延迟 &lt;code&gt;ngModelOptions&lt;/code&gt; 的更新或导出指令）根本不起作用，这在一定程度上引起了混乱。</target>
        </trans-unit>
        <trans-unit id="9a36abc535f66e5a2a598972e3e540ed77c184f6" translate="yes" xml:space="preserve">
          <source>This has been deprecated for several reasons. First, developers have found this pattern confusing. It seems like the actual &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive is being used, but in fact it's an input/output property named &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; on the reactive form directive that approximates some, but not all, of the directive's behavior. It allows getting and setting a value and intercepting value events, but some of &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;'s other features, such as delaying updates with&lt;code&gt;ngModelOptions&lt;/code&gt; or exporting the directive, don't work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb14c528bca95d7e4e8b5c0e75434cfae54a895b" translate="yes" xml:space="preserve">
          <source>This has been deprecated to keep selectors consistent with other core Angular selectors, as element selectors are typically written in kebab-case.</source>
          <target state="translated">这一点已经被废弃,以保持选择器与其他核心Angular选择器的一致性,因为元素选择器通常是用kebab-case写的。</target>
        </trans-unit>
        <trans-unit id="753971c71e6ca491908f50d23acb603dc1a664a4" translate="yes" xml:space="preserve">
          <source>This has the same effect as the binding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1095f7e1edc68ff18dd9e80137271b101bd86c29" translate="yes" xml:space="preserve">
          <source>This helper class should be used as a base class for creating Angular directives that wrap AngularJS components that need to be &quot;upgraded&quot;.</source>
          <target state="translated">这个帮助类应该被用作创建Angular指令的基础类,用来包装需要 &quot;升级 &quot;的AngularJS组件。</target>
        </trans-unit>
        <trans-unit id="4a9910a470680f461d5e2a2614c8675ebcbbb9c4" translate="yes" xml:space="preserve">
          <source>This helper function returns a factory function that provides access to the Angular service identified by the &lt;code&gt;token&lt;/code&gt; parameter.</source>
          <target state="translated">此辅助函数返回一个工厂函数，该函数提供对 &lt;code&gt;token&lt;/code&gt; 参数所标识的Angular服务的访问。</target>
        </trans-unit>
        <trans-unit id="3feef579a17c24eb18bbf65e912c0af25f671bc1" translate="yes" xml:space="preserve">
          <source>This helper function returns a factory function to be used for registering an AngularJS wrapper directive for &quot;downgrading&quot; an Angular component.</source>
          <target state="translated">这个帮助函数返回一个工厂函数,用于注册一个AngularJS包装器指令,用于 &quot;降级 &quot;一个Angular组件。</target>
        </trans-unit>
        <trans-unit id="47aa8d05f2d4f3b4a736e0ea1dd586657dd4775e" translate="yes" xml:space="preserve">
          <source>This helper is for testing services not Components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">该帮助程序用于测试服务，而不是组件。对于组件测试，您仍然必须引导混合应用程序。有关更多信息，请参见 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4eef553362f7318dd361d3d0f6a5760f3585a142" translate="yes" xml:space="preserve">
          <source>This helper is for testing services not components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">该帮助程序用于测试服务而不是组件。对于组件测试，您仍然必须引导混合应用程序。有关更多信息，请参见 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b9ba1412b83f44b56ecd7943b94f7e6d7ad49fa" translate="yes" xml:space="preserve">
          <source>This helper's observable emits the &lt;code&gt;data&lt;/code&gt; value in the next turn of the JavaScript engine.</source>
          <target state="translated">该辅助对象的可观察对象在下一个JavaScript引擎中发出 &lt;code&gt;data&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="326ed6100992d8304a4c4512b4ef1b97e697f367" translate="yes" xml:space="preserve">
          <source>This highlight directive has a single customizable property. In a real app, it may need more.</source>
          <target state="translated">这个高亮指令有一个单一的可定制属性。在真实的应用程序中,它可能需要更多。</target>
        </trans-unit>
        <trans-unit id="a8424043c89606ac692d26ae91eabcf058b3b255" translate="yes" xml:space="preserve">
          <source>This implies that the component bindings will always follow the semantics of the instantiation framework.</source>
          <target state="translated">这意味着组件绑定将始终遵循实例化框架的语义。</target>
        </trans-unit>
        <trans-unit id="13526051beab5c2cb1409738f1705df68acfffb7" translate="yes" xml:space="preserve">
          <source>This indicates the last time the service worker checked for a new version, or update, of the app. &lt;code&gt;never&lt;/code&gt; indicates that the service worker has never checked for an update.</source>
          <target state="translated">这表示服务工作者最后一次检查应用程序的新版本或更新的时间。 &lt;code&gt;never&lt;/code&gt; 表示服务工作者从未检查过更新。</target>
        </trans-unit>
        <trans-unit id="c6866fb4d3be58dfa31c9fcb707a31824d7cdb10" translate="yes" xml:space="preserve">
          <source>This initial value never changes.</source>
          <target state="translated">这个初始值永远不会改变。</target>
        </trans-unit>
        <trans-unit id="8fdbd80f7713591b405acb108f078354e86bdf7e" translate="yes" xml:space="preserve">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics &lt;a href=&quot;glossary#collection&quot;&gt;collection&lt;/a&gt; with an initial named schematic. The collection folder is a workspace for schematics. You can also use the &lt;code&gt;schematics&lt;/code&gt; command to add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">这将安装 &lt;code&gt;schematics&lt;/code&gt; 可执行文件，您可以使用该可执行文件创建具有初始命名逻辑示意图的新逻辑示意图&lt;a href=&quot;glossary#collection&quot;&gt;集合&lt;/a&gt;。收集文件夹是原理图的工作区。您也可以使用 &lt;code&gt;schematics&lt;/code&gt; 命令将新的示意图添加到现有集合中，或扩展现有的示意图。</target>
        </trans-unit>
        <trans-unit id="f4f376c92f4d721a1cb60edfb651e536ba4f5e3e" translate="yes" xml:space="preserve">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics collection in its own project folder, add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">这将安装 &lt;code&gt;schematics&lt;/code&gt; 可执行文件，您可以使用该可执行文件在其自己的项目文件夹中创建新的逻辑示意图集合，将新的逻辑示意图添加到现有的逻辑示意图或扩展现有的逻辑示意图。</target>
        </trans-unit>
        <trans-unit id="1b7cb0effa29e839a96dca4c18f240ba5551dbba" translate="yes" xml:space="preserve">
          <source>This installs the command &lt;code&gt;ng&lt;/code&gt; on your system, which is the command you use to create new workspaces, new projects, serve your application during development, or produce builds to share or distribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28a949d24ede3e30d4f2425cea4c004accffb6c" translate="yes" xml:space="preserve">
          <source>This interface allows access to the underlying &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;, and allows responding with &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s or &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">此接口允许访问基础 &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; ，并允许使用 &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; 进行响应。</target>
        </trans-unit>
        <trans-unit id="f14b1937cf79a6a85c55fe443bf06ded14c39fe9" translate="yes" xml:space="preserve">
          <source>This is a &lt;em&gt;cold&lt;/em&gt; observable that waits three frames and then emits an error, The hash (&lt;code&gt;#&lt;/code&gt;) indicates the timing of the error that is specified in the third argument. The second argument is null because the observable never emits a value.</source>
          <target state="translated">这是一个&lt;em&gt;冷的&lt;/em&gt;可观察到的现象，它等待三个帧，然后发出错误。哈希（ &lt;code&gt;#&lt;/code&gt; ）指示在第三个参数中指定的错误的时间。第二个参数为null，因为可观察对象从不发出值。</target>
        </trans-unit>
        <trans-unit id="325c383689dc505c167a4efdf3ff1bfffcda2dac" translate="yes" xml:space="preserve">
          <source>This is a common middleware pattern found in frameworks such as Express.js.</source>
          <target state="translated">这是在Express.js等框架中常见的中间件模式。</target>
        </trans-unit>
        <trans-unit id="8a0404a183044b9e9c6ffe40bc631a912f26a05f" translate="yes" xml:space="preserve">
          <source>This is a considerable effort and it often isn't worth it, especially since you are in the process of moving your code to Angular. Instead, declare &lt;code&gt;angular&lt;/code&gt; as &lt;code&gt;angular.IAngularStatic&lt;/code&gt; to indicate it is a global variable and still have full typing support.</source>
          <target state="translated">这是一项巨大的工作，通常不值得，特别是因为您正在将代码移至Angular。而是将 &lt;code&gt;angular&lt;/code&gt; 声明为 &lt;code&gt;angular.IAngularStatic&lt;/code&gt; ,以指示它是全局变量，并且仍具有完全键入支持。</target>
        </trans-unit>
        <trans-unit id="ebfc1fc3ae76182d341bfaf13595ca3c04aee718" translate="yes" xml:space="preserve">
          <source>This is a general purpose guard&amp;mdash;you can imagine other features that require authenticated users&amp;mdash;so you generate an &lt;code&gt;AuthGuard&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; folder.</source>
          <target state="translated">这是一种通用保护措施-您可以想象需要经过身份验证的用户的其他功能-因此您可以在 &lt;code&gt;auth&lt;/code&gt; 文件夹中生成 &lt;code&gt;AuthGuard&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="745624b6290490997a074676dc013e0ad3433575" translate="yes" xml:space="preserve">
          <source>This is a good candidate for an impure pipe because the &lt;code&gt;transform&lt;/code&gt; function is trivial and fast.</source>
          <target state="translated">对于不纯管道，这是一个很好的候选者，因为 &lt;code&gt;transform&lt;/code&gt; 函数微不足道且快速。</target>
        </trans-unit>
        <trans-unit id="5b9b9bda285209856e8b9f18df0fc5414bc4d50e" translate="yes" xml:space="preserve">
          <source>This is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for you custom element. But it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</source>
          <target state="translated">这是为你的自定义元素快速获得TypeScript功能的好方法,比如类型检查和自动完成支持。但是,如果你在几个地方都需要它,它可能会变得很麻烦,因为你必须在每一次出现时都投下返回类型。</target>
        </trans-unit>
        <trans-unit id="6fe29256f1b66a8c5853dd12c474275473bc08da" translate="yes" xml:space="preserve">
          <source>This is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for your custom element. But it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6520fb09eb7f64f65fec620f22a827ad129c5147" translate="yes" xml:space="preserve">
          <source>This is a nonissue in Angular because ES 2015 modules handle the namespacing for you.</source>
          <target state="translated">这在Angular中不是问题,因为ES 2015模块为你处理了命名间距。</target>
        </trans-unit>
        <trans-unit id="b1360d42910235d11c8da57171809f03949b89f4" translate="yes" xml:space="preserve">
          <source>This is a tree of activated route snapshots. Every node in this tree knows about the &quot;consumed&quot; URL segments, the extracted parameters, and the resolved data.</source>
          <target state="translated">这是一棵激活的路由快照树。树上的每个节点都知道 &quot;消耗的 &quot;URL段、提取的参数和解析的数据。</target>
        </trans-unit>
        <trans-unit id="308f6f1ffa549dea73f1268332bb7efda867f32b" translate="yes" xml:space="preserve">
          <source>This is a typical &quot;&lt;em&gt;service-in-service&lt;/em&gt;&quot; scenario: you inject the &lt;code&gt;MessageService&lt;/code&gt; into the &lt;code&gt;HeroService&lt;/code&gt; which is injected into the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">这是一种典型的&amp;ldquo; &lt;em&gt;服务中服务&lt;/em&gt; &amp;rdquo;方案：您将 &lt;code&gt;MessageService&lt;/code&gt; 注入 &lt;code&gt;HeroService&lt;/code&gt; ，后者又注入 &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd1783005dfb776d1af2f04f6577b41eaa1ff956" translate="yes" xml:space="preserve">
          <source>This is a very simple example, but the use of a schema for validation can be very powerful. For more information, see the &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schemas website&lt;/a&gt;.</source>
          <target state="translated">这是一个非常简单的示例，但是使用架构进行验证可能非常强大。有关更多信息，请参见&lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON模式网站&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98e22f6dda8c73c831d901b714a07d0b7689f227" translate="yes" xml:space="preserve">
          <source>This is actually a convenience method, implemented as &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt;.</source>
          <target state="translated">这实际上是一种便捷方法，实现为 &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd436a739a02b80b45abdb0c1ad5a566028baa06" translate="yes" xml:space="preserve">
          <source>This is actually a pretty good starting point. The code uses the AngularJS 1.5 component API and the organization follows the &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS Style Guide&lt;/a&gt;, which is an important &lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;preparation step&lt;/a&gt; before a successful upgrade.</source>
          <target state="translated">这实际上是一个很好的起点。该代码使用AngularJS 1.5组件API，并且组织遵循&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS样式指南&lt;/a&gt;，这是成功升级之前的重要&lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;准备步骤&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b8005693863fa9b16e3799069756d7fed430b5f1" translate="yes" xml:space="preserve">
          <source>This is an example of Angular's &lt;a href=&quot;../guide/event-binding&quot;&gt;event binding&lt;/a&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fd6969c6d6369ceb7285ab5a770ea3315ffab8" translate="yes" xml:space="preserve">
          <source>This is an example of Angular's &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; syntax.</source>
          <target state="translated">这是Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;事件绑定&lt;/a&gt;语法的示例。</target>
        </trans-unit>
        <trans-unit id="edb830bd9f42a141071913f2de5f0ee10c46edce" translate="yes" xml:space="preserve">
          <source>This is an interim code sample that will allow you to provide and use the &lt;code&gt;HeroService&lt;/code&gt;. At this point, the code will differ from the &lt;code&gt;HeroService&lt;/code&gt; in the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt;.</source>
          <target state="translated">这是一个临时代码示例，可让您提供和使用 &lt;code&gt;HeroService&lt;/code&gt; 。此时，代码在&lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&amp;ldquo;最终代码审查&amp;rdquo;中&lt;/a&gt;与 &lt;code&gt;HeroService&lt;/code&gt; 有所不同。</target>
        </trans-unit>
        <trans-unit id="b3974dfe8a8053bf2f0f9d406986e6d789c88746" translate="yes" xml:space="preserve">
          <source>This is an internal project to add support for Angular front-ends to Google's internal integrated server stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b55aa5e71e846d741afa9a4891157e8f09cdfb" translate="yes" xml:space="preserve">
          <source>This is an opaque value the router will give to a custom route reuse strategy to store and retrieve later on.</source>
          <target state="translated">这是一个不透明的值,路由器将给自定义路由重用策略存储并在以后检索。</target>
        </trans-unit>
        <trans-unit id="47187f9c60a312936c257bcbf674f7a846c9c3b7" translate="yes" xml:space="preserve">
          <source>This is disagreeable. The word, &lt;code&gt;appHighlight&lt;/code&gt;, is a terrible property name and it doesn't convey the property's intent.</source>
          <target state="translated">这是令人讨厌的。 &lt;code&gt;appHighlight&lt;/code&gt; 这个词是一个可怕的属性名称，它不能传达该属性的意图。</target>
        </trans-unit>
        <trans-unit id="402dd3cc505c92b3ebc8041d5e0f5ce4dca64317" translate="yes" xml:space="preserve">
          <source>This is especially useful when child components are defined with an empty path string, as in the following example. With this configuration, navigating to '/parent/10' creates the main child and aux components.</source>
          <target state="translated">当子组件被定义为空路径字符串时,这一点特别有用,就像下面的例子一样。在这种配置下,导航到'/parent/10'就会创建主子组件和辅助组件。</target>
        </trans-unit>
        <trans-unit id="f0a8eee1520084e40ddb251d4ee70816b2810239" translate="yes" xml:space="preserve">
          <source>This is how you associate a template with logic, which is defined in the component class.</source>
          <target state="translated">这就是如何将模板与逻辑关联起来,逻辑在组件类中定义。</target>
        </trans-unit>
        <trans-unit id="3a2de92bdd97f6fbeeca5fdc9ee29a195958c537" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following image, which displays the logging date.</source>
          <target state="translated">下面的图片说明了这一点,它显示了记录日期。</target>
        </trans-unit>
        <trans-unit id="4461ea0ba25396c618a6f8a0d7132ba6f60a3420" translate="yes" xml:space="preserve">
          <source>This is manifestly more complicated than &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and rightly so. The &lt;code&gt;NgFor&lt;/code&gt; directive has more features, both required and optional, than the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; shown in this guide. At minimum &lt;code&gt;NgFor&lt;/code&gt; needs a looping variable (&lt;code&gt;let hero&lt;/code&gt;) and a list (&lt;code&gt;heroes&lt;/code&gt;).</source>
          <target state="translated">显然，这比 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 更复杂。该 &lt;code&gt;NgFor&lt;/code&gt; 指令有更多的功能，必需的和可选的，比 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 本指南中显示。在最低 &lt;code&gt;NgFor&lt;/code&gt; 需要一个循环变量（ &lt;code&gt;let hero&lt;/code&gt; ）和列表（ &lt;code&gt;heroes&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7efe4c9363e221388c4cd38d8c3a512cea782501" translate="yes" xml:space="preserve">
          <source>This is often the case with &lt;em&gt;routing components&lt;/em&gt;. As a rule you test the component, not the router, and care only if the component navigates with the right address under the given conditions.</source>
          <target state="translated">&lt;em&gt;路由组件&lt;/em&gt;通常是这种情况。通常，您测试组件而不是路由器，并且仅在给定条件下使用正确的地址导航组件时才在意。</target>
        </trans-unit>
        <trans-unit id="60412eee3362861bf6dd3a41df31f62ad91b66a4" translate="yes" xml:space="preserve">
          <source>This is one of the three fundamental building blocks of Angular forms, along with &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It extends the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; class that implements most of the base functionality for accessing the value, validation status, user interactions and events.</source>
          <target state="translated">这是Angular表单的三个基本构建块之一，以及 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 。它扩展了 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 类，该类实现了用于访问值，验证状态，用户交互和事件的大多数基本功能。</target>
        </trans-unit>
        <trans-unit id="c8af7d6538861c4de12ed064fb23bf497866d794" translate="yes" xml:space="preserve">
          <source>This is one of the three fundamental building blocks of Angular forms, along with &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It extends the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; class that implements most of the base functionality for accessing the value, validation status, user interactions and events. See &lt;a href=&quot;formcontrol#usage-notes&quot;&gt;usage examples below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b5158af868b9258e387116060b9c47ff8fb973" translate="yes" xml:space="preserve">
          <source>This is similar to the phone list component. The new wrinkle is the &lt;code&gt;RouteParams&lt;/code&gt; type annotation that identifies the &lt;code&gt;routeParams&lt;/code&gt; dependency.</source>
          <target state="translated">这类似于电话列表组件。新的皱纹是标识了 &lt;code&gt;routeParams&lt;/code&gt; 依赖项的 &lt;code&gt;RouteParams&lt;/code&gt; 类型注释。</target>
        </trans-unit>
        <trans-unit id="804a4031c3f14f499869d2204177c75dee70978b" translate="yes" xml:space="preserve">
          <source>This is the SHA1 hash of the most up-to-date version of the app that the service worker knows about.</source>
          <target state="translated">这是服务人员所知道的应用程序最新版本的SHA1哈希值。</target>
        </trans-unit>
        <trans-unit id="16525e697531723027c408ae314d617a3cee22fa" translate="yes" xml:space="preserve">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">这是 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 的基类。</target>
        </trans-unit>
        <trans-unit id="32e4434471515868a1b3925d1547dbdde41ab113" translate="yes" xml:space="preserve">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">这是 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 的基类。</target>
        </trans-unit>
        <trans-unit id="09772e314d49341cf87eb2642be70a9dc5fc7d9f" translate="yes" xml:space="preserve">
          <source>This is the default option.</source>
          <target state="translated">这是默认选项。</target>
        </trans-unit>
        <trans-unit id="2f800de1b08868e8b8e49cce1d56cd86eef0162b" translate="yes" xml:space="preserve">
          <source>This is the inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">这是内部的 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cff98b359039fbd0f2a88788c0ca5a17c544f06f" translate="yes" xml:space="preserve">
          <source>This is the outer &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">这是外部 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6fbcbb942159ed1a22b254df114719bad20d47a4" translate="yes" xml:space="preserve">
          <source>This is the perfect infiltration job for a directive. The heroes will never know they're being watched.</source>
          <target state="translated">这是个完美的指令渗透工作。英雄们永远不会知道他们被监视了。</target>
        </trans-unit>
        <trans-unit id="4ccba53d17df213bee27c394101fd3424e3c0b6f" translate="yes" xml:space="preserve">
          <source>This is the place to free resources that won't be garbage collected automatically. Unsubscribe from Observables and DOM events. Stop interval timers. Unregister all callbacks that this directive registered with global or application services. You risk memory leaks if you neglect to do so.</source>
          <target state="translated">这里是释放资源的地方,这些资源不会被自动收集。取消订阅Observables和DOM事件。停止间隔定时器。取消注册该指令在全局或应用服务中注册的所有回调。如果你忽视了这一点,你就会有内存泄漏的风险。</target>
        </trans-unit>
        <trans-unit id="2f5ed6fbbb5f8dadb12202b2e0fbdec880ace274" translate="yes" xml:space="preserve">
          <source>This is the place to free resources that won't be garbage-collected automatically. You risk memory leaks if you neglect to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6525a4da9f9f2b0077e6c20e8b8ad052414394" translate="yes" xml:space="preserve">
          <source>This is the same in both template-driven and reactive forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a555dd35ff17530be3a1fe3b938e47130474eb" translate="yes" xml:space="preserve">
          <source>This is the simplest production-ready deployment of your application.</source>
          <target state="translated">这是您的应用程序最简单的生产就绪部署。</target>
        </trans-unit>
        <trans-unit id="c58e06956699ce3b5d0d19719918b6ae26cfc2f3" translate="yes" xml:space="preserve">
          <source>This is the time to notify another part of the application that the component is going away.</source>
          <target state="translated">这时要通知应用程序的另一个部分,该组件将离开。</target>
        </trans-unit>
        <trans-unit id="5d3cebde8a1c748058ff6feaf6d6fd7fffbd33c4" translate="yes" xml:space="preserve">
          <source>This is used to parse the response appropriately before returning it to the requestee.</source>
          <target state="translated">这用于在返回给请求者之前适当地解析响应。</target>
        </trans-unit>
        <trans-unit id="4575447306482a712f678b2a9d395b8a07e7fe6d" translate="yes" xml:space="preserve">
          <source>This is usually created automatically by &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt;.</source>
          <target state="translated">这通常是由 &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt; 自动创建的。</target>
        </trans-unit>
        <trans-unit id="8d4f6bc5f09e6fd5355e7d9f2a9258c893547afc" translate="yes" xml:space="preserve">
          <source>This is very important since it allows you to repurpose the components for any type of survey as long as it's compatible with the &lt;em&gt;question&lt;/em&gt; object model. The key is the dynamic data binding of metadata used to render the form without making any hardcoded assumptions about specific questions. In addition to control metadata, you are also adding validation dynamically.</source>
          <target state="translated">这非常重要，因为它允许您将组件重新用于任何类型的调查，只要它与&lt;em&gt;问题&lt;/em&gt;对象模型兼容即可。关键是用于呈现表单的元数据的动态数据绑定，而无需对特定问题进行任何硬编码的假设。除了控制元数据外，您还动态添加了验证。</target>
        </trans-unit>
        <trans-unit id="30cc4dc7a4b6f15bc6646908fab43b52eb183eb7" translate="yes" xml:space="preserve">
          <source>This isn't an oversight. Angular doesn't offer such pipes because they perform poorly and prevent aggressive minification. Both &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; require parameters that reference object properties. Earlier in this page, you learned that such pipes must be &lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;impure&lt;/a&gt; and that Angular calls impure pipes in almost every change-detection cycle.</source>
          <target state="translated">这不是疏忽。Angular不提供此类管道，因为它们的性能较差并阻止了主动缩小。两个 &lt;code&gt;filter&lt;/code&gt; 和 &lt;code&gt;orderBy&lt;/code&gt; 要求参数参考对象属性。在此页面的前面，您了解到此类管道必须是&lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;不纯的&lt;/a&gt;，并且Angular在几乎每个变更检测周期中都调用不纯管道。</target>
        </trans-unit>
        <trans-unit id="bf87feeb4d56bb09ecc40ffedbf5b9b09eea90de" translate="yes" xml:space="preserve">
          <source>This isn't necessarily good design. This example is examining &lt;em&gt;whether a component can inject its parent via the parent's base class&lt;/em&gt;.</source>
          <target state="translated">这不一定是好的设计。此示例正在检查&lt;em&gt;组件是否可以通过父级的基类注入其父级&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6eaca4844068379a7e60176fbbfc6443308fe713" translate="yes" xml:space="preserve">
          <source>This isn't usually a problem, especially if you adhere to the recommended &lt;em&gt;one class per file&lt;/em&gt; rule. But sometimes circular references are unavoidable. You're in a bind when class 'A' refers to class 'B' and 'B' refers to 'A'. One of them has to be defined first.</source>
          <target state="translated">通常这不是问题，特别是如果您遵循建议的&lt;em&gt;每个文件一个类的&lt;/em&gt;规则。但是有时循环引用是不可避免的。当类&amp;ldquo; A&amp;rdquo;指代&amp;ldquo; B&amp;rdquo;而&amp;ldquo; B&amp;rdquo;指代&amp;ldquo; A&amp;rdquo;时，您处于困境。首先必须定义其中之一。</target>
        </trans-unit>
        <trans-unit id="c05a6f671aee7310acf8516389c5116cf909b2b4" translate="yes" xml:space="preserve">
          <source>This list of modules are those that export components, directives, or pipes that component templates in this module reference. In this case, the component is &lt;code&gt;AppComponent&lt;/code&gt;, which references components, directives, or pipes in &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. A component template can reference another component, directive, or pipe when the referenced class is declared in this module or the class was imported from another module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0b3ac2c6c7f7ea1c3093b1d935ac0ccfed0cd9" translate="yes" xml:space="preserve">
          <source>This list of modules are those that export components, directives, or pipes that the component templates in this module reference. In this case, the component is &lt;code&gt;AppComponent&lt;/code&gt;, which references components, directives, or pipes in &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. A component template can reference another component, directive, or pipe when the referenced class is declared in this module or the class was imported from another module.</source>
          <target state="translated">此模块列表是导出该模块中的组件模板引用的组件，指令或管道的模块。在这种情况下，组件是 &lt;code&gt;AppComponent&lt;/code&gt; ，它在 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 中引用组件，指令或管道。当在此模块中声明了所引用的类或从另一个模块导入了该类时，组件模板可以引用另一个组件，指令或管道。</target>
        </trans-unit>
        <trans-unit id="4a9afe5b810e772d3eb663f9b40c1dd4d79aaccb" translate="yes" xml:space="preserve">
          <source>This makes the controller code look a lot more like Angular already. You're all set to actually introduce Angular into the project.</source>
          <target state="translated">这使得控制器代码看起来已经更像Angular了。你已经准备好将Angular真正引入到项目中了。</target>
        </trans-unit>
        <trans-unit id="cf52b88eeaa1d49f9b18045164c3a40eae3476c3" translate="yes" xml:space="preserve">
          <source>This makes the provider visible to every class in the application that knows the provider's lookup token, or name.</source>
          <target state="translated">这使得提供者对应用程序中每一个知道提供者的查找标记或名称的类都可见。</target>
        </trans-unit>
        <trans-unit id="e402b132534c7c9be62f7464642b0941cc482405" translate="yes" xml:space="preserve">
          <source>This mapping ensures that your library always loads the local copies of the modules it needs.</source>
          <target state="translated">这个映射确保你的库总是加载它所需要的模块的本地副本。</target>
        </trans-unit>
        <trans-unit id="31460d71bf9e1b081028cbc8de1171f82e87335e" translate="yes" xml:space="preserve">
          <source>This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use &lt;code&gt;resetTestEnvironment&lt;/code&gt;.</source>
          <target state="translated">只能调用一次，以在当前平台上为当前测试套件设置通用提供程序。如果您绝对需要更改提供程序，请首先使用 &lt;code&gt;resetTestEnvironment&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61958d29a3c8058968147c18b0f01bb5c73d67d0" translate="yes" xml:space="preserve">
          <source>This may seem like what the app has been doing all along. Not quite. The &lt;code&gt;AppModule&lt;/code&gt; is loaded when the application starts; that's &lt;em&gt;eager&lt;/em&gt; loading. Now the &lt;code&gt;AdminModule&lt;/code&gt; loads only when the user clicks on a link; that's &lt;em&gt;lazy&lt;/em&gt; loading.</source>
          <target state="translated">这看起来似乎是该应用一直以来所做的事情。不完全的。所述 &lt;code&gt;AppModule&lt;/code&gt; 应用程序启动时被加载; 这是&lt;em&gt;渴望&lt;/em&gt;加载。现在，仅当用户单击链接时才加载 &lt;code&gt;AdminModule&lt;/code&gt; 。这是&lt;em&gt;延迟&lt;/em&gt;加载。</target>
        </trans-unit>
        <trans-unit id="12bc8c3aa7a62420ea2cb6d2e429c4880c25f7b6" translate="yes" xml:space="preserve">
          <source>This may seem restrictive but it's also fast. An object reference check is fast&amp;mdash;much faster than a deep check for differences&amp;mdash;so Angular can quickly determine if it can skip both the pipe execution and a view update.</source>
          <target state="translated">这似乎很严格，但速度很快。对象引用检查很快（比深入检查差异快得多），因此Angular可以快速确定它是否可以跳过管道执行和视图更新。</target>
        </trans-unit>
        <trans-unit id="5ad5340f87862c854151cf06f5fd6043a1b00b74" translate="yes" xml:space="preserve">
          <source>This means that an NgModule behaves differently depending on whether it's loaded during application start or lazy-loaded later. Neglecting that difference can lead to &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;adverse consequences&lt;/a&gt;.</source>
          <target state="translated">这意味着NgModule的行为会有所不同，具体取决于它是在应用程序启动期间加载还是在以后延迟加载。忽视这种差异会导致&lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;不利的后果&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e6e948c64201b9f8912c19889c92106c85c33fc" translate="yes" xml:space="preserve">
          <source>This means that when you build your production configuration (using &lt;code&gt;ng build --prod&lt;/code&gt; or &lt;code&gt;ng build --configuration=production&lt;/code&gt;), the &lt;code&gt;src/environments/environment.ts&lt;/code&gt; file is replaced with the target-specific version of the file, &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt;.</source>
          <target state="translated">这意味着在构建生产配置时（使用 &lt;code&gt;ng build --prod&lt;/code&gt; 或 &lt;code&gt;ng build --configuration=production&lt;/code&gt; ）， &lt;code&gt;src/environments/environment.ts&lt;/code&gt; 文件将替换为文件的目标特定版本 &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b42c601f1b0de6ca86d93b51f7a4f0d84c91d6c" translate="yes" xml:space="preserve">
          <source>This means you're responsible for putting &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; on your service classes.</source>
          <target state="translated">这意味着您有责任在服务类上添加 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b37292a0b3e74c75b71eca67292a0c0b9392a296" translate="yes" xml:space="preserve">
          <source>This method also updates the value and validity of the control.</source>
          <target state="translated">该方法还可以更新控件的值和有效性。</target>
        </trans-unit>
        <trans-unit id="e754eab77abab498cd7f7a0b1268613ab289c6ed" translate="yes" xml:space="preserve">
          <source>This method does not update the value or validity of the control. Use &lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt; instead.</source>
          <target state="translated">此方法不会更新控件的值或有效性。请改用&lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="100a8e77d4f74abe1033d79495767430a1882094" translate="yes" xml:space="preserve">
          <source>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</source>
          <target state="translated">当值从视图传播到模型时,表单API在初始化时调用该方法来更新表单模型。</target>
        </trans-unit>
        <trans-unit id="957d45ae3b8977944714e03589b7ce213ef76cbd" translate="yes" xml:space="preserve">
          <source>This method is called by the forms API to write to the view when programmatic changes from model to view are requested.</source>
          <target state="translated">当要求从模型到视图的程序性更改时,该方法被表单API调用,以写入视图。</target>
        </trans-unit>
        <trans-unit id="d4c0ca924e5a897aa17682cd4a412c4b9b49e4bc" translate="yes" xml:space="preserve">
          <source>This method is for development and testing only, and is not a supported or secure way of deploying an application.</source>
          <target state="translated">此方法仅用于开发和测试,不是部署应用程序的受支持或安全的方式。</target>
        </trans-unit>
        <trans-unit id="6edd05f81e26ff6f38d68bee1458846ab8ffe7a0" translate="yes" xml:space="preserve">
          <source>This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API methods such as &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;. If you need to support older browsers (like Android &amp;lt; 4.0), don't use this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d75e6c897ca8fced62ff854dd31dff479c1ea8" translate="yes" xml:space="preserve">
          <source>This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API methods such as &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;. If you need to support older browsers (like IE9 or Android &amp;lt; 4.0), don't use this method.</source>
          <target state="translated">仅在HTML5模式下以及在支持HTML5 History API方法（例如 &lt;code&gt;pushState&lt;/code&gt; 和 &lt;code&gt;replaceState&lt;/code&gt; )的浏览器中才支持此方法。如果您需要支持较旧的浏览器（例如IE9或Android &amp;lt;4.0），请不要使用此方法。</target>
        </trans-unit>
        <trans-unit id="582cc9eb2f1253026d9fec705c1a27f27a1e5797" translate="yes" xml:space="preserve">
          <source>This method performs strict checks, and throws an error if you try to set the value of a control that doesn't exist or if you exclude the value of a control.</source>
          <target state="translated">这个方法会进行严格的检查,如果你试图设置一个不存在的控件的值,或者排除一个控件的值,就会抛出一个错误。</target>
        </trans-unit>
        <trans-unit id="38f2789fcaf15e04940002919821b82465849aa8" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;code&gt;Promise&lt;/code&gt; which indicates that the update check has completed successfully, though it does not indicate whether an update was discovered as a result of the check. Even if one is found, the service worker must still successfully download the changed files, which can fail. If successful, the &lt;code&gt;available&lt;/code&gt; event will indicate availability of a new version of the app.</source>
          <target state="translated">此方法返回一个 &lt;code&gt;Promise&lt;/code&gt; ，它指示更新检查已成功完成，尽管它并不指示是否由于检查结果而发现了更新。即使找到一个，服务人员也必须成功下载更改的文件，否则可能会失败。如果成功， &lt;code&gt;available&lt;/code&gt; 事件将指示该应用程序新版本的可用性。</target>
        </trans-unit>
        <trans-unit id="7240a76f2e460d49075a05cb693f1cf044c80345" translate="yes" xml:space="preserve">
          <source>This might seem strange if you're used to dependency injection in strongly typed languages where an interface is the preferred dependency lookup key. However, JavaScript, doesn't have interfaces, so when TypeScript is transpiled to JavaScript, the interface disappears. There is no interface type information left for Angular to find at runtime.</source>
          <target state="translated">如果你习惯了强类型语言中的依赖注入,这可能会显得很奇怪,因为在强类型语言中,接口是首选的依赖查找键。然而,JavaScript,并没有接口,所以当TypeScript被转码到JavaScript时,接口就消失了。Angular在运行时没有留下接口类型信息供其查找。</target>
        </trans-unit>
        <trans-unit id="cebcf45fa5843285adb17f4750feda2527b4caa3" translate="yes" xml:space="preserve">
          <source>This milestone covers the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e15ee716458e352dc7390a8a35261c1328b3839" translate="yes" xml:space="preserve">
          <source>This milestone shows you how to configure a special-purpose module called a &lt;em&gt;Routing Module&lt;/em&gt;, which holds your app's routing configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a6160cc6927cc87e97af3ca12f5d7c3e578c05" translate="yes" xml:space="preserve">
          <source>This module defines a &lt;code&gt;routes&lt;/code&gt; object with two routes to the two phone components and a default route for the empty path. It passes the &lt;code&gt;routes&lt;/code&gt; to the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method which does the rest.</source>
          <target state="translated">此模块定义一个 &lt;code&gt;routes&lt;/code&gt; 对象，该对象具有到两个电话组件的两条路由，以及一条空路径的默认路由。它将 &lt;code&gt;routes&lt;/code&gt; 传递给 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; 方法，剩下的事情将由该方法完成。</target>
        </trans-unit>
        <trans-unit id="81b384ca39cda92728b7bd10a1501aede53ebbbb" translate="yes" xml:space="preserve">
          <source>This next example binds an &lt;code&gt;Observable&lt;/code&gt; of message strings (&lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt;) to a view with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe.</source>
          <target state="translated">下一个示例使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道将 &lt;code&gt;Observable&lt;/code&gt; 消息字符串（ &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt; ）绑定到视图。</target>
        </trans-unit>
        <trans-unit id="1f28fed5c95e4e5fc2cf216bb7edd12cd2cdd95f" translate="yes" xml:space="preserve">
          <source>This one root component is usually called &lt;code&gt;AppComponent&lt;/code&gt; and is in the root module's &lt;code&gt;bootstrap&lt;/code&gt; array.</source>
          <target state="translated">这个根组件通常称为 &lt;code&gt;AppComponent&lt;/code&gt; ，位于根模块的 &lt;code&gt;bootstrap&lt;/code&gt; 数组中。</target>
        </trans-unit>
        <trans-unit id="553c357233905d7a357b67f87ff6741c54ba7d0c" translate="yes" xml:space="preserve">
          <source>This option can take one of the following &lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;sub-commands&lt;/a&gt;:</source>
          <target state="translated">该选项可以采用以下&lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;子命令之一&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7e2bdd9bc4821ec6e25c48f5020fa352d5d592c1" translate="yes" xml:space="preserve">
          <source>This option is intended to validate the &lt;code&gt;.metadata.json&lt;/code&gt; files emitted for bundling with an &lt;code&gt;npm&lt;/code&gt; package. The validation is strict and can emit errors for metadata that would never produce an error when used by the template compiler. You can choose to suppress the error emitted by this option for an exported symbol by including &lt;code&gt;@dynamic&lt;/code&gt; in the comment documenting the symbol.</source>
          <target state="translated">此选项用于验证为与 &lt;code&gt;npm&lt;/code&gt; 软件包捆绑而发出的 &lt;code&gt;.metadata.json&lt;/code&gt; 文件。验证是严格的，并且会针对元数据发出错误，该错误在由模板编译器使用时永远不会产生错误。您可以通过在记录符号的注释中包含 &lt;code&gt;@dynamic&lt;/code&gt; 来选择抑制此选项为导出的符号发出的错误。</target>
        </trans-unit>
        <trans-unit id="d6eab3c2994a6a17d4115d07f1dae680ac2ec26d" translate="yes" xml:space="preserve">
          <source>This option is only available if application URLs look like normal web URLs without hashes (#) in the middle.</source>
          <target state="translated">只有当应用程序的URL看起来像普通的Web URL,中间没有哈希值(#)时,这个选项才可用。</target>
        </trans-unit>
        <trans-unit id="8136dad883434011e60763326dfd8b6bf0a135fa" translate="yes" xml:space="preserve">
          <source>This optional property enables you to configure how the service worker handles navigation requests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b706956040eab679c0d00e95b8bd1fb93cd1e1bf" translate="yes" xml:space="preserve">
          <source>This optional section enables you to specify a custom list of URLs that will be redirected to the index file.</source>
          <target state="translated">这个可选的部分可以让你指定一个将被重定向到索引文件的URL的自定义列表。</target>
        </trans-unit>
        <trans-unit id="d49647d5cde74d419f8b7a1440d72e1fa1cdb7e9" translate="yes" xml:space="preserve">
          <source>This page answers the questions many developers ask about NgModule design and implementation.</source>
          <target state="translated">本页回答了许多开发者提出的关于NgModule设计和实现的问题。</target>
        </trans-unit>
        <trans-unit id="e470076e6470a706c5e7519008e46a929c297415" translate="yes" xml:space="preserve">
          <source>This page covered how to use the &lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt; package to incrementally upgrade existing AngularJS apps at your own pace and without impeding further development of the app for the duration of the upgrade process.</source>
          <target state="translated">本页面介绍了如何使用&lt;a href=&quot;../api/upgrade/static&quot;&gt;升级/静态&lt;/a&gt;软件包以您自己的步调逐步升级现有的AngularJS应用，并且在升级过程中不妨碍应用的进一步开发。</target>
        </trans-unit>
        <trans-unit id="81be0c6f770103c818ad9a59d216fef97dd57b87" translate="yes" xml:space="preserve">
          <source>This page covered how to:</source>
          <target state="translated">本页介绍了如何。</target>
        </trans-unit>
        <trans-unit id="c3d2f38bcda77f3d0e583e4cbd59a23c93e26dd3" translate="yes" xml:space="preserve">
          <source>This page covers some aspects of TypeScript configuration and the TypeScript environment that are important to Angular developers, including details about the following files:</source>
          <target state="translated">本页涵盖了TypeScript配置和TypeScript环境的一些方面,这些方面对Angular开发者很重要,包括以下文件的细节。</target>
        </trans-unit>
        <trans-unit id="dc6463bb109d0d9d7a3485b00e656aa5ad4447d1" translate="yes" xml:space="preserve">
          <source>This page demonstrates building a simple &lt;em&gt;appHighlight&lt;/em&gt; attribute directive to set an element's background color when the user hovers over that element. You can apply it like this:</source>
          <target state="translated">该页面演示了如何构建一个简单的&lt;em&gt;appHighlight&lt;/em&gt;属性指令，以在用户将鼠标悬停在该元素上时设置其背景颜色。您可以这样应用它：</target>
        </trans-unit>
        <trans-unit id="f41f995aa12a74f7c35870947d8b3dfcd851015a" translate="yes" xml:space="preserve">
          <source>This page describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication (&lt;em&gt;Who is this user?&lt;/em&gt;) and authorization (&lt;em&gt;What can this user do?&lt;/em&gt;).</source>
          <target state="translated">本页介绍了Angular的内置保护措施，可防止常见的Web应用程序漏洞和攻击（如跨站点脚本攻击）。它不涉及应用程序级别的安全性，例如身份验证（&lt;em&gt;此用户是谁？&lt;/em&gt;）和授权（&lt;em&gt;此用户可以做什么？&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="b0a26a5d944df815f572ce97ca9af1ebb2bdb5a7" translate="yes" xml:space="preserve">
          <source>This page describes how to load and apply these component styles.</source>
          <target state="translated">本页介绍如何加载和应用这些组件样式。</target>
        </trans-unit>
        <trans-unit id="9ea2990707bfb1eb329f12d6cb790431a215270f" translate="yes" xml:space="preserve">
          <source>This page describes the most useful Angular testing features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ae81e8cd8b8d7fc27be03d544055e093469b55" translate="yes" xml:space="preserve">
          <source>This page discusses best practices for designing Angular applications that work well for all users, including those who rely on assistive technologies.</source>
          <target state="translated">本页讨论了设计Angular应用的最佳实践,这些应用适合所有用户,包括那些依赖辅助技术的用户。</target>
        </trans-unit>
        <trans-unit id="670a5a082b047a72ce1a558bd250325e58e09d59" translate="yes" xml:space="preserve">
          <source>This page discusses build-specific configuration options for Angular projects.</source>
          <target state="translated">本页讨论了Angular项目的特定构建配置选项。</target>
        </trans-unit>
        <trans-unit id="e05b95dc7d3d7d081939018409b02519ccacc29a" translate="yes" xml:space="preserve">
          <source>This page guides you through creating the shopping cart in three phases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfa8125c3023f0e5a452262dd4b80eb0950ad8c" translate="yes" xml:space="preserve">
          <source>This page is a comprehensive technical reference to the Angular template language. It explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.</source>
          <target state="translated">本页是Angular模板语言的综合技术参考。它解释了模板语言的基本原理,并描述了你在文档其他地方会遇到的大部分语法。</target>
        </trans-unit>
        <trans-unit id="7fad648d853b5ed4d555cb38fbfbacd9ba7992b6" translate="yes" xml:space="preserve">
          <source>This page is a reference for deploying and supporting production apps that use the Angular service worker. It explains how the Angular service worker fits into the larger production environment, the service worker's behavior under various conditions, and available resources and fail-safes.</source>
          <target state="translated">本页是部署和支持使用 Angular 服务工作者的生产应用程序的参考。它解释了Angular服务工作者如何融入更大的生产环境,服务工作者在各种条件下的行为,以及可用的资源和故障安全。</target>
        </trans-unit>
        <trans-unit id="be3ec6216875616431f7d6ed1137be9c33cace38" translate="yes" xml:space="preserve">
          <source>This page provides a conceptual overview of a dependency injection technique that is recommended for library developers. Designing your library with &lt;em&gt;lightweight injection tokens&lt;/em&gt; helps optimize the bundle size of client applications that use your library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3133b3ab2dc9616d7ee04b4ceb9f767579da99" translate="yes" xml:space="preserve">
          <source>This page provides a conceptual overview of how you can create and publish new libraries to extend Angular functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c20e865f128e08c87e8b02ca1209e92134e457" translate="yes" xml:space="preserve">
          <source>This page shows how to validate user input in the UI and display useful validation messages using both reactive and template-driven forms. It assumes some basic knowledge of the two forms modules.</source>
          <target state="translated">本页介绍了如何使用反应式和模板驱动的表单在用户界面中验证用户输入并显示有用的验证信息。它假定你对这两个表单模块有一些基本的了解。</target>
        </trans-unit>
        <trans-unit id="5d4c0327323a7a67f27b56ff84bda976d2f25fa4" translate="yes" xml:space="preserve">
          <source>This page shows you how to build a simple form from scratch. Along the way you'll learn how to:</source>
          <target state="translated">本页向你展示了如何从头开始构建一个简单的表单。在此过程中,你将学会如何。</target>
        </trans-unit>
        <trans-unit id="809f471c9fda21049d71c0885d6f8ee1429911d6" translate="yes" xml:space="preserve">
          <source>This particular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; call returns an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;; that is, &quot;&lt;em&gt;an observable of hero arrays&lt;/em&gt;&quot;. In practice, it will only return a single hero array.</source>
          <target state="translated">这个特定的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 调用返回一个 &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; ；即&amp;ldquo; &lt;em&gt;可观察到的英雄阵列&lt;/em&gt; &amp;rdquo;。实际上，它只会返回一个英雄数组。</target>
        </trans-unit>
        <trans-unit id="d836ca04f6cff950392c8ae7f7d0cf1a60a94c96" translate="yes" xml:space="preserve">
          <source>This particular test suite supplies a minimal mock of the &lt;code&gt;UserService&lt;/code&gt; that satisfies the needs of the &lt;code&gt;WelcomeComponent&lt;/code&gt; and its tests:</source>
          <target state="translated">这个特定的测试套件提供了 &lt;code&gt;UserService&lt;/code&gt; 的最小模型，可以满足 &lt;code&gt;WelcomeComponent&lt;/code&gt; 及其测试的需求：</target>
        </trans-unit>
        <trans-unit id="ff6ecdb8628c90cfa56e0ff26fbdce1243318d07" translate="yes" xml:space="preserve">
          <source>This pipe definition reveals the following key points:</source>
          <target state="translated">这个管道定义揭示了以下要点。</target>
        </trans-unit>
        <trans-unit id="9c06cdda191efa55a95c5ebbcd3348ce80c0d189" translate="yes" xml:space="preserve">
          <source>This platform has to be included in any other platform</source>
          <target state="translated">这个平台必须包含在任何其他平台中。</target>
        </trans-unit>
        <trans-unit id="1a66dd83805fb99c52388b0a549137c596348fd3" translate="yes" xml:space="preserve">
          <source>This produces the following error:</source>
          <target state="translated">这将产生以下错误。</target>
        </trans-unit>
        <trans-unit id="cc28ea5e9b1a6b51e4c29ff84265e5f10b52e574" translate="yes" xml:space="preserve">
          <source>This registers Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; providers globally.</source>
          <target state="translated">这将在全球范围内注册Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 提供程序。</target>
        </trans-unit>
        <trans-unit id="40b2f3a8cf72659eb5e60961a2342494b2510413" translate="yes" xml:space="preserve">
          <source>This registers a drop-in replacement for the &lt;code&gt;$location&lt;/code&gt; provider in AngularJS. Once registered, all navigation, routing broadcast messages, and any necessary digest cycles in AngularJS triggered during navigation are handled by Angular. This gives you a single way to navigate within both sides of your hybrid application consistently.</source>
          <target state="translated">这将在AngularJS中注册 &lt;code&gt;$location&lt;/code&gt; 提供程序的直接替换。一旦注册，所有导航，路由广播消息以及导航期间触发的AngularJS中任何必要的摘要周期都将由Angular处理。这为您提供了一种在混合应用程序的两侧进行一致导航的单一方法。</target>
        </trans-unit>
        <trans-unit id="768b48e740a696bfc0705b3b4a88ffb9387d0941" translate="yes" xml:space="preserve">
          <source>This removal has no impact on CLI users, unless they modified their build configuration to explicitly consume these code distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f56de558de0a575487e683fea999edf392ee43" translate="yes" xml:space="preserve">
          <source>This request passes the &lt;code&gt;heroesURL&lt;/code&gt; as the first parameter and the callback function name as the second parameter. The response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</source>
          <target state="translated">该请求将 &lt;code&gt;heroesURL&lt;/code&gt; 作为第一个参数，并将回调函数名称作为第二个参数。响应被包装在回调函数中，该函数采用JSONP方法返回的可观察对象并将其通过管道传递给错误处理程序。</target>
        </trans-unit>
        <trans-unit id="d9fd7c2c4a20b1de98c590fa48930235dc6aba0d" translate="yes" xml:space="preserve">
          <source>This route redirects a URL that fully matches the empty path to the route whose path is &lt;code&gt;'/dashboard'&lt;/code&gt;.</source>
          <target state="translated">此路由会将与空路径完全匹配的URL重定向到其路径为 &lt;code&gt;'/dashboard'&lt;/code&gt; 的路由。</target>
        </trans-unit>
        <trans-unit id="6c41f8a018f7563801e156030ed8a8f8ca194ad0" translate="yes" xml:space="preserve">
          <source>This rule is essential to Angular's &quot;unidirectional data flow&quot; policy. You should never worry that reading a component value might change some other displayed value. The view should be stable throughout a single rendering pass.</source>
          <target state="translated">这条规则对于Angular的 &quot;单向数据流 &quot;策略是必不可少的。你永远不应该担心读取一个组件值可能会改变其他一些显示值。视图应该在整个单次渲染过程中保持稳定。</target>
        </trans-unit>
        <trans-unit id="57892addca2408cf0e87807e6475ac5695bf2874" translate="yes" xml:space="preserve">
          <source>This sample app recreates the heroes feature in the &quot;Services&quot; section of the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;, and reuses much of the code from the .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1e4a2f1c53200691565434ab456d518f0bf3a4" translate="yes" xml:space="preserve">
          <source>This sample file is easy to translate without a special editor or knowledge of French.</source>
          <target state="translated">这个示例文件很容易翻译,不需要专门的编辑器或法语知识。</target>
        </trans-unit>
        <trans-unit id="480408f47c676f8c57b3cde5a055d6686d241608" translate="yes" xml:space="preserve">
          <source>This scenario causes your app to create a new instance every time, instead of using the singleton.</source>
          <target state="translated">这种情况会导致你的应用每次都要创建一个新的实例,而不是使用单子。</target>
        </trans-unit>
        <trans-unit id="99aa2e43a5383e16a847762330ebaee6bfd37ca5" translate="yes" xml:space="preserve">
          <source>This scoping restriction is a &lt;strong&gt;&lt;em&gt;styling modularity feature&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">此范围限制是&lt;strong&gt;&lt;em&gt;样式模块化功能&lt;/em&gt;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="31d68c7991b2366acf1e70e15d44815dc09ecff1" translate="yes" xml:space="preserve">
          <source>This script can be used both to deactivate &lt;code&gt;@angular/service-worker&lt;/code&gt; as well as any other Service Workers which might have been served in the past on your site.</source>
          <target state="translated">此脚本可用于停用 &lt;code&gt;@angular/service-worker&lt;/code&gt; 以及过去可能在您的站点上提供服务的任何其他Service Worker。</target>
        </trans-unit>
        <trans-unit id="c18fae7524b94c2e1854507242de01f07367e013" translate="yes" xml:space="preserve">
          <source>This section about &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; has its own . The following subsections highlight key points in the sample app.</source>
          <target state="translated">这是关于部分 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 有它自己的。以下小节重点介绍了示例应用程序中的关键点。</target>
        </trans-unit>
        <trans-unit id="b64223a794713879607f46b9296695b6693dcfef" translate="yes" xml:space="preserve">
          <source>This section assumes you are familiar with &lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt;.</source>
          <target state="translated">本部分假定您熟悉&lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61775d2ada3e1aaca95806012a1cae0e038b820d" translate="yes" xml:space="preserve">
          <source>This section contains a complete list all of the currently deprecated CLI flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a0d4f001f44cf92c4d038ced8939573bb0e86d" translate="yes" xml:space="preserve">
          <source>This section contains a complete list all of the currently-deprecated APIs, with details to help you plan your migration to a replacement.</source>
          <target state="translated">本节包含了所有当前已废弃的API的完整列表,并提供了帮助你计划迁移到替代API的细节。</target>
        </trans-unit>
        <trans-unit id="f5235be074b4aa0d4b2e76c1864190fa474d6ead" translate="yes" xml:space="preserve">
          <source>This section contains default build target options, used when no named alternative configuration is specified. See &lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;Default build targets&lt;/a&gt; below.</source>
          <target state="translated">本部分包含默认的构建目标选项，当未指定命名的替代配置时使用。请参阅下面的&lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;默认构建目标&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a6f4ac6b1d629df1dd4126322ebc082c11c00de6" translate="yes" xml:space="preserve">
          <source>This section covers changes you may have make to the server or to files deployed to the server.</source>
          <target state="translated">本节包括您可能对服务器或部署到服务器的文件所做的更改。</target>
        </trans-unit>
        <trans-unit id="b00ef0591ba8184696f1413d52cca1b7afa05294" translate="yes" xml:space="preserve">
          <source>This section covers changes you may have to make to the server or to files deployed on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b184253cc42d7415bb50e2b1f1ae4bfa4d58e73" translate="yes" xml:space="preserve">
          <source>This section defines and names alternative configurations for different intended destinations. It contains a section for each named configuration, which sets the default options for that intended environment. See &lt;a href=&quot;workspace-config#build-configs&quot;&gt;Alternate build configurations&lt;/a&gt; below.</source>
          <target state="translated">本节定义和命名用于不同预期目标的替代配置。它包含每个命名配置的部分，该部分为该预期环境设置默认选项。请参阅下面的&lt;a href=&quot;workspace-config#build-configs&quot;&gt;备用构建配置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e7378faaab25e8cea0f89eb0420acd35173d6d0c" translate="yes" xml:space="preserve">
          <source>This section defines the policy by which matching requests will be cached.</source>
          <target state="translated">本节定义了缓存匹配请求的策略。</target>
        </trans-unit>
        <trans-unit id="085d9b2381ce33b95badee4ece65c04252ae8b07" translate="yes" xml:space="preserve">
          <source>This section demonstrates a service worker in action, using an example application.</source>
          <target state="translated">本节使用一个示例应用程序来演示服务人员的操作。</target>
        </trans-unit>
        <trans-unit id="b0beb9d185cb05154e1dd17453c7c97560febcea" translate="yes" xml:space="preserve">
          <source>This section demonstrates how to write providers that deliver dependent services.</source>
          <target state="translated">本节演示了如何编写提供依赖服务的提供者。</target>
        </trans-unit>
        <trans-unit id="eb2c533b5e2645aa61c4b0e279f37acd6ba4506b" translate="yes" xml:space="preserve">
          <source>This section describes how to add a single form control. In the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.</source>
          <target state="translated">本节介绍了如何添加单个表单控件。在这个例子中,用户在输入字段中输入自己的名字,捕获该输入值,并显示表单控件元素的当前值。</target>
        </trans-unit>
        <trans-unit id="8df9a0125bfce0a631c00cf027d6c0c9e9c21223" translate="yes" xml:space="preserve">
          <source>This section describes how to limit the scope of the beginning and ending &lt;code&gt;ElementInjector&lt;/code&gt; using the visibility decorators &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;, and &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">本节介绍如何使用可见性修饰符 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;（）， &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;（）和 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;（）来限制 &lt;code&gt;ElementInjector&lt;/code&gt; 的开始和结束范围。</target>
        </trans-unit>
        <trans-unit id="93a1f837d6690ccc5052bae1311690c80cb118fa" translate="yes" xml:space="preserve">
          <source>This section describes some techniques for doing that.</source>
          <target state="translated">本节介绍了一些这方面的技术。</target>
        </trans-unit>
        <trans-unit id="7d51845aea280551e7377855a04b80ead1d2f4bd" translate="yes" xml:space="preserve">
          <source>This section describes the resources to cache, broken up into the following groups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a1ff0385a87975f95ae5a798ec38b6e1fa9506" translate="yes" xml:space="preserve">
          <source>This section describes the resources to cache, broken up into three groups.</source>
          <target state="translated">本节介绍了要缓存的资源,分为三组。</target>
        </trans-unit>
        <trans-unit id="7164aeb8b556a0ff400bdf3da7f1df7d1f517925" translate="yes" xml:space="preserve">
          <source>This section describes two techniques for minimizing the setup. Use them, alone or in combination, to stay focused on testing the primary component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d342d94221065f56ba9567318ef23b976b78cb" translate="yes" xml:space="preserve">
          <source>This section describes two techniques for minimizing the setup. Use them, alone or in combination, to stay focused on the testing the primary component.</source>
          <target state="translated">本节介绍了两种最小化设置的技术。单独使用或结合使用它们,以保持专注于测试主要组件。</target>
        </trans-unit>
        <trans-unit id="4b6eb3ab67768fa1db1718443a20d6bef34cf012" translate="yes" xml:space="preserve">
          <source>This section enables you to pass any data you want that describes this particular version of the app. The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service includes that data in the update notifications. Many apps use this section to provide additional information for the display of UI popups, notifying users of the available update.</source>
          <target state="translated">此部分使您可以传递描述该应用程序特定版本的所有数据。该 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 服务包括在更新通知的数据。许多应用程序使用此部分来提供用于显示UI弹出窗口的其他信息，从而将可用更新通知用户。</target>
        </trans-unit>
        <trans-unit id="47fc123a3ed1f0d231e027d8288971ed0c72aa21" translate="yes" xml:space="preserve">
          <source>This section explores many of the features of dependency injection (DI) in Angular.</source>
          <target state="translated">本节将探讨Angular中依赖注入(DI)的许多特性。</target>
        </trans-unit>
        <trans-unit id="4384b75486bddedfea304c2a90535f59084acc2a" translate="yes" xml:space="preserve">
          <source>This section guides you through adding a custom strategy that only preloads routes whose &lt;code&gt;data.preload&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt;. Recall that you can add anything to the &lt;code&gt;data&lt;/code&gt; property of a route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ab163f1040a173c8f1fee4855a987c614055d5" translate="yes" xml:space="preserve">
          <source>This section guides you through extending the crisis center with some new administrative features. Start by adding a new feature module named &lt;code&gt;AdminModule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa94115b584195aa264c16e4fb5711861e3ddede" translate="yes" xml:space="preserve">
          <source>This section guides you through migrating the &lt;code&gt;Hero&lt;/code&gt; routes to new URLs. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; checks for redirects in your configuration before navigating, so each redirect is triggered when needed. To support this change, add redirects from the old routes to the new routes in the &lt;code&gt;heroes-routing.module&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fbce57e38fce3ed83994d74968cf78f64dac167" translate="yes" xml:space="preserve">
          <source>This section guides you through the following:</source>
          <target state="translated">本节指导你完成以下工作。</target>
        </trans-unit>
        <trans-unit id="e327b6a9a7d25aeebecb0e4a2e3d8dd80bb60d4b" translate="yes" xml:space="preserve">
          <source>This section guides you through updating the &lt;code&gt;CrisisCenterModule&lt;/code&gt; to load lazily by default and use the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; strategy to load all lazy loaded modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01d00f37cdecb7bf80e6521a92c1f8871d11b3b" translate="yes" xml:space="preserve">
          <source>This section has covered the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25546f650c09fba6868c4a94f07eeaca55c8fedb" translate="yes" xml:space="preserve">
          <source>This section introduces the basic procedure for configuring a lazy-loaded route. For a step-by-step example, see the &lt;a href=&quot;lazy-loading-ngmodules#step-by-step&quot;&gt;step-by-step setup&lt;/a&gt; section on this page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a63d68a98a00a26a92cce922c9931db461a38cf" translate="yes" xml:space="preserve">
          <source>This section is an introduction to the common built-in structural directives:</source>
          <target state="translated">本节是对常见的内置结构指令的介绍。</target>
        </trans-unit>
        <trans-unit id="c4d630efe539af7ec5dfcdfbcacacc0d6a4f3dbc" translate="yes" xml:space="preserve">
          <source>This section lists all of the currently-deprecated features, which includes template syntax, configuration options, and any other deprecations not listed in the &lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;Deprecated APIs&lt;/a&gt; section above. It also includes deprecated API usage scenarios or API combinations, to augment the information above.</source>
          <target state="translated">本部分列出了所有当前不推荐使用的功能，其中包括模板语法，配置选项以及上面&amp;ldquo; &lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;不&lt;/a&gt;推荐使用的API&amp;rdquo;部分中未列出的其他任何不推荐使用的功能。它还包括已弃用的API使用场景或API组合，以增强上述信息。</target>
        </trans-unit>
        <trans-unit id="7cae31034c8a2571577d2c3c5b7550e76da38a59" translate="yes" xml:space="preserve">
          <source>This section provides example of both kinds of type-guard property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306aadf682fc11264f3cfeb1c732892c12664c75" translate="yes" xml:space="preserve">
          <source>This section shows how to animate elements entering or leaving a page.</source>
          <target state="translated">本节介绍了如何为进入或离开页面的元素制作动画。</target>
        </trans-unit>
        <trans-unit id="3b6e09c67f8a39342ff4c0257fcd5cc67bae2f2c" translate="yes" xml:space="preserve">
          <source>This section shows how to create asynchronous validators. It assumes some basic knowledge of creating &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators&lt;/a&gt;.</source>
          <target state="translated">本节说明如何创建异步验证器。它假定了创建&lt;a href=&quot;form-validation#custom-validators&quot;&gt;定制验证器的&lt;/a&gt;一些基本知识。</target>
        </trans-unit>
        <trans-unit id="c1876bae15f4c669767ab3331f67eef88c5960e8" translate="yes" xml:space="preserve">
          <source>This section shows how to perform cross field validation. It assumes some basic knowledge of creating custom validators.</source>
          <target state="translated">本节介绍了如何执行跨字段验证。它假设了一些创建自定义验证器的基本知识。</target>
        </trans-unit>
        <trans-unit id="d5c59841ebf0b19060f6d7b48397f23337988937" translate="yes" xml:space="preserve">
          <source>This section shows you how refactor the app into different feature modules, import them into the main module and navigate among them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b7c3faa674491b569ef3f7a4a266fb1b70aa3c" translate="yes" xml:space="preserve">
          <source>This section shows you how to add child routes and use relative routing in your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c08e782b8b4dce59c05abd346b382ec356f9f6" translate="yes" xml:space="preserve">
          <source>This section shows you how to add some &lt;a href=&quot;animations&quot;&gt;animations&lt;/a&gt; to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">本节将告诉您如何补充一些&lt;a href=&quot;animations&quot;&gt;动画&lt;/a&gt;的 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28698d05d33f5b1671f713ab414eca9161933dd5" translate="yes" xml:space="preserve">
          <source>This section shows you how to organize the crisis center to conform to the following recommended pattern for Angular applications:</source>
          <target state="translated">本节将向您展示如何组织危机中心,使其符合以下推荐的Angular应用模式。</target>
        </trans-unit>
        <trans-unit id="6e5105772fe1e30775a6f76ca44803f4e4116d09" translate="yes" xml:space="preserve">
          <source>This section shows you how to use the HTTP client to retrieve shipping prices from an external file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00ccb32c33d8d2804037de8c12b3f968f52ceea" translate="yes" xml:space="preserve">
          <source>This section shows you how to use the cart service to display the products in the cart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8555832b3f593de35864e26800451467378353f6" translate="yes" xml:space="preserve">
          <source>This section takes inventory of the most useful Angular testing features and summarizes what they do.</source>
          <target state="translated">本节将盘点最有用的Angular测试功能,并总结它们的作用。</target>
        </trans-unit>
        <trans-unit id="e477486420bece3d0d8e61799151b739e8e6daf2" translate="yes" xml:space="preserve">
          <source>This section walks you through adding a form-based checkout feature to collect user information as part of checkout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e4800653dc5aadd7144d1a9d30485a59601d33" translate="yes" xml:space="preserve">
          <source>This section walks you through using the cart service to add a product to the cart with a &quot;Buy&quot; button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bf3c33e1424399ab26287ac6065fe7557dd98a" translate="yes" xml:space="preserve">
          <source>This setup also calls &lt;code&gt;TestBed.get()&lt;/code&gt; to inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service and the mocking controller so they can be referenced during the tests.</source>
          <target state="translated">此设置还调用 &lt;code&gt;TestBed.get()&lt;/code&gt; 注入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 服务和模拟控制器，以便可以在测试期间引用它们。</target>
        </trans-unit>
        <trans-unit id="c78041ba40d1fbcc918dbb701fe401ee868f8518" translate="yes" xml:space="preserve">
          <source>This setup also calls &lt;code&gt;TestBed.inject()&lt;/code&gt; to inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service and the mocking controller so they can be referenced during the tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456f1cff8a28d651f522a6a70eb2cb94a641a08f" translate="yes" xml:space="preserve">
          <source>This setup guide uses the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm client&lt;/a&gt; command line interface, which is installed with &lt;code&gt;Node.js&lt;/code&gt; by default.</source>
          <target state="translated">本安装指南使用&lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm客户端&lt;/a&gt;命令行界面，默认情况下该界面与 &lt;code&gt;Node.js&lt;/code&gt; 一起安装。</target>
        </trans-unit>
        <trans-unit id="92609043e3a5049fe9cf167aad090f47caad57aa" translate="yes" xml:space="preserve">
          <source>This simple rule factory returns the tree without modification. The options are the option values passed through from the &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="translated">这个简单的规则工厂无需修改即可返回树。选项是从 &lt;code&gt;ng generate&lt;/code&gt; 命令传递的选项值。</target>
        </trans-unit>
        <trans-unit id="3d73db06502687b0e565f94857691c977b98bee9" translate="yes" xml:space="preserve">
          <source>This small test demonstrates how Angular tests can verify a component's visual representation&amp;mdash;something not possible with &lt;a href=&quot;testing#component-class-testing&quot;&gt;component class tests&lt;/a&gt;&amp;mdash;at low cost and without resorting to much slower and more complicated end-to-end tests.</source>
          <target state="translated">这项小型测试演示了Angular测试如何以低成本且无需求助于更慢且更复杂的端到端测试来验证组件的外观（这在&lt;a href=&quot;testing#component-class-testing&quot;&gt;组件类测试中&lt;/a&gt;是不可能的）。</target>
        </trans-unit>
        <trans-unit id="5fd279f89c1525d18c06d2c05403b810e6621320" translate="yes" xml:space="preserve">
          <source>This small test demonstrates how Angular tests can verify a component's visual representation&amp;mdash;something not possible with &lt;a href=&quot;testing-components-basics#component-class-testing&quot;&gt;component class tests&lt;/a&gt;&amp;mdash;at low cost and without resorting to much slower and more complicated end-to-end tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb009288ce29b0288afe49f6ee2aab850b60725f" translate="yes" xml:space="preserve">
          <source>This snapshot reflects the state of the log after the user clicked the &lt;em&gt;Create...&lt;/em&gt; button and then the &lt;em&gt;Destroy...&lt;/em&gt; button.</source>
          <target state="translated">用户单击&amp;ldquo; &lt;em&gt;创建...&amp;rdquo;&lt;/em&gt;按钮然后单击&amp;ldquo; &lt;em&gt;销毁...&amp;rdquo;&lt;/em&gt;按钮后，此快照反映了日志的状态。</target>
        </trans-unit>
        <trans-unit id="3191364fc32b6e08abc6a27512ac0807ec66c575" translate="yes" xml:space="preserve">
          <source>This step serves a purpose analogous to &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt; and &lt;code&gt;whenStable()&lt;/code&gt; in the earlier &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; examples. The balance of the test is the same as those examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079dfe1488f95b55bfe4eaaff729c5ed46abb14d" translate="yes" xml:space="preserve">
          <source>This step serves a purpose analogous to &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;whenStable()&lt;/code&gt; in the earlier &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; examples. The balance of the test is the same as those examples.</source>
          <target state="translated">此步骤的目的类似于先前的 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）和 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; （）示例中的 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;whenStable()&lt;/code&gt; 。测试的余额与这些示例相同。</target>
        </trans-unit>
        <trans-unit id="dd15d4d4538f8653d2b222f1a75f8aaa65446a2d" translate="yes" xml:space="preserve">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs.</source>
          <target state="translated">这种策略可以让你继续构建你的Web应用程序以支持多种浏览器,但只加载浏览器需要的必要代码。</target>
        </trans-unit>
        <trans-unit id="a6549f07c80220a17e94351180403481dcd649c2" translate="yes" xml:space="preserve">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs. For more information about how this works, see &lt;a href=&quot;deployment#differential-loading&quot;&gt;Differential Loading&lt;/a&gt; in the &lt;a href=&quot;deployment&quot;&gt;Deployment guide&lt;/a&gt;.</source>
          <target state="translated">通过此策略，您可以继续构建Web应用程序以支持多个浏览器，但仅加载浏览器所需的必要代码。有关此工作原理的更多信息，请参见《&lt;a href=&quot;deployment&quot;&gt;部署指南》&lt;/a&gt;中的&amp;ldquo; &lt;a href=&quot;deployment#differential-loading&quot;&gt;差异加载&lt;/a&gt; &amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="e609b20e1c574bc355c924ed6553ac80401ff0e8" translate="yes" xml:space="preserve">
          <source>This strategy does not store any routes for later reuse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f27f72ef1db3f4b8e0b64ac49c35d1b3d860d4" translate="yes" xml:space="preserve">
          <source>This strategy is enabled by default.</source>
          <target state="translated">该策略默认为启用。</target>
        </trans-unit>
        <trans-unit id="7c2cab4ddb78ce7228d94edd854eab1d7580006d" translate="yes" xml:space="preserve">
          <source>This stricter type checking is not enabled by default in version 9, but can be enabled by setting the &lt;code&gt;strictTemplates&lt;/code&gt; configuration option. We do expect to make strict type checking the default in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4a67f46bf55c4aa1042894ef01b904f273ef12" translate="yes" xml:space="preserve">
          <source>This style guide is for anyone who contributes to the Angular documentation (this site). These guidelines should be followed by all authors. Deviations must be approved by a documentation editor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dc934e925dfc611be024d59208b2dd13b6d211" translate="yes" xml:space="preserve">
          <source>This syntax conforms to the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU Message Format&lt;/a&gt; as specified in the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR pluralization rules&lt;/a&gt;.</source>
          <target state="translated">此语法符合&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR复数规则中&lt;/a&gt;指定的&lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU消息格式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a921404409acb321a0300d0ef76d994ae2a236f1" translate="yes" xml:space="preserve">
          <source>This syntax tells the Angular compiler to read the external files during component compilation.</source>
          <target state="translated">该语法告诉Angular编译器在组件编译时读取外部文件。</target>
        </trans-unit>
        <trans-unit id="f054420c1ce338910d0afb64bdc92e93d64d0562" translate="yes" xml:space="preserve">
          <source>This technique can improve performance on mobile and low-powered devices and improve the user experience by showing a static first page quickly while the client-side app is loading. The static version can also make your app more visible to web crawlers.</source>
          <target state="translated">这种技术可以提高移动设备和低功率设备的性能,并通过在客户端应用加载时快速显示静态首页来改善用户体验。静态版本也可以让你的应用对网络爬虫更加可见。</target>
        </trans-unit>
        <trans-unit id="ac27da6a3425110fb4858d56fa56042a9d64c44f" translate="yes" xml:space="preserve">
          <source>This technique is effective because all browsers implement the &lt;em&gt;same origin policy&lt;/em&gt;. Only code from the website on which cookies are set can read the cookies from that site and set custom headers on requests to that site. That means only your application can read this cookie token and set the custom header. The malicious code on &lt;code&gt;evil.com&lt;/code&gt; can't.</source>
          <target state="translated">该技术很有效，因为所有浏览器都实施&lt;em&gt;相同的原始策略&lt;/em&gt;。仅来自设置了Cookie的网站上的代码才能读取该网站上的Cookie，并在对该网站的请求上设置自定义标头。这意味着只有您的应用程序才能读取此Cookie令牌并设置自定义标头。 &lt;code&gt;evil.com&lt;/code&gt; 上的恶意代码不能。</target>
        </trans-unit>
        <trans-unit id="edaf5e02d43ccc1019d65ebdfbccee03f175b8c8" translate="yes" xml:space="preserve">
          <source>This technique is suitable for setting a single style, but consider the &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive when setting several inline styles at the same time.</source>
          <target state="translated">此技术适用于设置单个样式，但同时设置多个内联样式时请考虑使用&lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt;指令。</target>
        </trans-unit>
        <trans-unit id="f819a7b1e0aafa1d2068ac4808d42099765b1fd4" translate="yes" xml:space="preserve">
          <source>This technique works for any attribute of any element.</source>
          <target state="translated">这种技术适用于任何元素的任何属性。</target>
        </trans-unit>
        <trans-unit id="c1e03a2b5a2ead7f58623d3d33ead88c0cbed81a" translate="yes" xml:space="preserve">
          <source>This tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; preloader to immediately load &lt;em&gt;all&lt;/em&gt; lazy loaded routes (routes with a &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property).</source>
          <target state="translated">这告诉 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 预加载器立即加载&lt;em&gt;所有&lt;/em&gt;延迟加载的路由（具有 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 属性的路由）。</target>
        </trans-unit>
        <trans-unit id="02a67f3677df899c9872b4c722cacd0ea9415c83" translate="yes" xml:space="preserve">
          <source>This tells the router to match that URL to &lt;code&gt;path: 'heroes'&lt;/code&gt; and display the &lt;code&gt;HeroesComponent&lt;/code&gt; when the URL is something like &lt;code&gt;localhost:4200/heroes&lt;/code&gt;.</source>
          <target state="translated">这告诉路由器将该URL匹配到 &lt;code&gt;path: 'heroes'&lt;/code&gt; 并在URL类似于 &lt;code&gt;localhost:4200/heroes&lt;/code&gt; 时显示 &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec46416c5da71796079b783f64e64dd6e3d3f4fd" translate="yes" xml:space="preserve">
          <source>This template applies the &lt;code&gt;SpyDirective&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;&lt;em&gt;hero&lt;/em&gt; repeater managed by the parent &lt;code&gt;SpyComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56327c98c0651adf92a3962b35326d9411155a9" translate="yes" xml:space="preserve">
          <source>This template binds directly to the component's &lt;code&gt;messageService&lt;/code&gt;.</source>
          <target state="translated">该模板直接绑定到组件的 &lt;code&gt;messageService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e9c43c15900050160dc8be35d6067a63318aec5" translate="yes" xml:space="preserve">
          <source>This template looks a lot like the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater in the &lt;code&gt;HeroesComponent&lt;/code&gt; template.</source>
          <target state="translated">该模板看起来很像 &lt;code&gt;HeroesComponent&lt;/code&gt; 模板中的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 转发器。</target>
        </trans-unit>
        <trans-unit id="d637ab123347ac13fe17a004c73c98b4dddb234f" translate="yes" xml:space="preserve">
          <source>This template uses typical HTML elements like &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, and also includes Angular template-syntax elements, &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;{{hero.name}}&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, &lt;code&gt;[hero]&lt;/code&gt;, and &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt;. The template-syntax elements tell Angular how to render the HTML to the screen, using program logic and data.</source>
          <target state="translated">该模板使用典型的HTML元素，例如 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ，还包括Angular模板语法元素 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;{{hero.name}}&lt;/code&gt; ， &lt;code&gt;(click)&lt;/code&gt; ， &lt;code&gt;[hero]&lt;/code&gt; 和 &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; 。模板语法元素告诉Angular如何使用程序逻辑和数据将HTML呈现到屏幕上。</target>
        </trans-unit>
        <trans-unit id="33f50f397f4ca96e33bfb10d036f4db70c1735c8" translate="yes" xml:space="preserve">
          <source>This test expects the component to try to navigate to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">此测试希望该组件尝试导航到 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="501a5e4c0d88821fa944fe51ad014be796c1b208" translate="yes" xml:space="preserve">
          <source>This test host binds to &lt;code&gt;DashboardHeroComponent&lt;/code&gt; as the &lt;code&gt;DashboardComponent&lt;/code&gt; would but without the noise of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;HeroService&lt;/code&gt;, or the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater.</source>
          <target state="translated">该测试主机结合到 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 作为 &lt;code&gt;DashboardComponent&lt;/code&gt; 会，但没有噪声 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; ，该 &lt;code&gt;HeroService&lt;/code&gt; ，或 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 中继器。</target>
        </trans-unit>
        <trans-unit id="6f65de663612898c193d6874b17e0426d7e59e43" translate="yes" xml:space="preserve">
          <source>This testing module configuration shows three important differences:</source>
          <target state="translated">这个测试模块配置显示出三个重要的区别。</target>
        </trans-unit>
        <trans-unit id="750aba5f80080e328a3f7b0b79fa476b6891b62b" translate="yes" xml:space="preserve">
          <source>This text wraps around to the right of the floating &quot;flying hero&quot; image.</source>
          <target state="translated">这段文字环绕在浮动的 &quot;飞天英雄 &quot;形象的右侧。</target>
        </trans-unit>
        <trans-unit id="113e418e350b558b02724dea8b12bbcc059f4851" translate="yes" xml:space="preserve">
          <source>This time you'll be navigating in the opposite direction, from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">这次，您将以相反的方向从 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 导航到 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cefc645993bf706c88455dca56b4abc1e03879d3" translate="yes" xml:space="preserve">
          <source>This time, in addition to declaring the &lt;em&gt;component-under-test&lt;/em&gt;, the configuration adds a &lt;code&gt;UserService&lt;/code&gt; provider to the &lt;code&gt;providers&lt;/code&gt; list. But not the real &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">这次，除了声明&lt;em&gt;被测组件&lt;/em&gt;之外，该配置还将 &lt;code&gt;UserService&lt;/code&gt; 提供程序添加到 &lt;code&gt;providers&lt;/code&gt; 列表中。但不是真正的 &lt;code&gt;UserService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af2165b1138d7807abb0f9b20b74189222b793e4" translate="yes" xml:space="preserve">
          <source>This time, the value of &lt;code&gt;'popup'&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. That's not a route, but it is a legitimate value. Setting the popup &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; clears the outlet and removes the secondary popup route from the current URL.</source>
          <target state="translated">这次， &lt;code&gt;'popup'&lt;/code&gt; 值为 &lt;code&gt;null&lt;/code&gt; 。那不是一条路线，但这是一个合法的价值。将弹出的 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 设置为 &lt;code&gt;null&lt;/code&gt; 会清除出口，并从当前URL中删除辅助弹出路由。</target>
        </trans-unit>
        <trans-unit id="40bbb2371cebbdf60ae15d1ec5b7666df5d5300a" translate="yes" xml:space="preserve">
          <source>This topic describes how to create and configure an Angular component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5176ea8b8dc3fac7511f8583255f1137f947700f" translate="yes" xml:space="preserve">
          <source>This topic provides a conceptual overview of the different categories of &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModules&lt;/a&gt; you can create in order to organize your code in a modular structure. These categories are not cast in stone&amp;mdash;they are suggestions. You may want to create NgModules for other purposes, or combine the characteristics of some of these categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d92a7f4ae8e3f11ab9554b88f4a5af57e0a872c" translate="yes" xml:space="preserve">
          <source>This topic provides some guidelines for the following general categories of NgModules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b58f299c596628607bfe82d7a2f31208c5268b" translate="yes" xml:space="preserve">
          <source>This tutorial describes how you can build a single-page application, SPA that uses multiple Angular routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1017b080efe853ab4a37570f7704ed1185bde730" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the essentials of Angular by walking you through a simple e-commerce site with a catalog, shopping cart, and check-out form. To help you get started right away, this guide uses a simple ready-made application that you can examine and modify interactively (without having to &lt;a href=&quot;guide/setup-local&quot;&gt;set up a local work environment&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d58a98a6b42341e9f6814cfed96b99344da3020" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the essentials of Angular by walking you through building a simple e-commerce site with a catalog, shopping cart, and check-out form. It uses the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment so you can get started right away.</source>
          <target state="translated">本教程通过逐步构建带有目录，购物车和结帐表格的简单电子商务网站，向您介绍Angular的基本知识。它使用&lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;在线开发环境，因此您可以立即开始。</target>
        </trans-unit>
        <trans-unit id="75cca6ba2330a0de32bc9736198f0aa60de95f31" translate="yes" xml:space="preserve">
          <source>This tutorial provides an extensive overview of the Angular router. In this tutorial, you will build upon a basic router configuration to explore features such as child routes, route parameters, lazy load NgModules, guard routes, and preloading data to improve the user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be47255fc4c07ae300b4da88c16205f91d089d6" translate="yes" xml:space="preserve">
          <source>This tutorial sample mimics communication with a remote data server by using the &lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;In-memory Web API&lt;/a&gt; module.</source>
          <target state="translated">本教程示例使用&lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;内存中的Web API&lt;/a&gt;模块模拟与远程数据服务器的通信。</target>
        </trans-unit>
        <trans-unit id="bc3024b13e02f53d3e498300f1c2e6300a2d72b3" translate="yes" xml:space="preserve">
          <source>This tutorial shows how to build a a questionaire, which is just one kind of dynamic form. The example uses &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to collect a set of controls. For an example of a different type of dynamic form, see the section &lt;a href=&quot;reactive-forms#creating-dynamic-forms&quot;&gt;Creating dynamic forms&lt;/a&gt; in the Reactive Forms guide. That example also shows how to use &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to collect a set of controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab45a75c827944992e1db362a0b5c036c3ecd7e" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to build a form from scratch, using a simplified sample form like the one from the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt; to illustrate the techniques.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b747de47c76fdb387428a809e8e59e74cebd64" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to create a template-driven form whose control elements are bound to data properties, with input validation to maintain data integrity and styling to improve the user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb98a6fecbbb46c54191cd7e4fdf79d8bfd8c9d6" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you how to do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d67a376ed76f9dd9f3998880f05555c2f237ea" translate="yes" xml:space="preserve">
          <source>This user experience is the developer's choice. Some developers want the message to display at all times. If you ignore the &lt;code&gt;pristine&lt;/code&gt; state, you would hide the message only when the value is valid. If you arrive in this component with a new (blank) hero or an invalid hero, you'll see the error message immediately, before you've done anything.</source>
          <target state="translated">这种用户体验是开发人员的选择。一些开发人员希望消息始终显示。如果忽略 &lt;code&gt;pristine&lt;/code&gt; 状态，则仅在该值有效时才隐藏消息。如果您带着新的（空白）英雄或无效的英雄到达此组件，则在执行任何操作之前，您将立即看到错误消息。</target>
        </trans-unit>
        <trans-unit id="f2e4047e551556a93bbd7f194989120c57f25bea" translate="yes" xml:space="preserve">
          <source>This value accessor is used by default for &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;defaultvalueaccessor&quot;&gt;textarea&lt;/a&gt;&amp;gt;&lt;/code&gt; elements, but you could also use it for custom components that have similar behavior and do not require special processing. In order to attach the default value accessor to a custom element, add the &lt;code&gt;&lt;a href=&quot;defaultvalueaccessor&quot;&gt;ngDefaultControl&lt;/a&gt;&lt;/code&gt; attribute as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe52a203b046ba6736edeae46dcac27488617b9" translate="yes" xml:space="preserve">
          <source>This version of the &lt;code&gt;HeroListComponent&lt;/code&gt; gets heroes from the &lt;code&gt;HEROES&lt;/code&gt; array, an in-memory collection defined in a separate &lt;code&gt;mock-heroes&lt;/code&gt; file.</source>
          <target state="translated">此版本的 &lt;code&gt;HeroListComponent&lt;/code&gt; 从 &lt;code&gt;HEROES&lt;/code&gt; 数组获取英雄，HEROES数组是在单独的 &lt;code&gt;mock-heroes&lt;/code&gt; 文件中定义的内存中集合。</target>
        </trans-unit>
        <trans-unit id="5ac5c50e4fc7fc8f690f46a387d86d6cd4e8a480" translate="yes" xml:space="preserve">
          <source>This will call the &lt;code&gt;ls&lt;/code&gt; command instead of the &lt;code&gt;touch&lt;/code&gt; command. Because we did not override the &lt;em&gt;args&lt;/em&gt; option, it will list information about the &lt;code&gt;src/main.ts&lt;/code&gt; file (the default value provided for the target).</source>
          <target state="translated">这将调用 &lt;code&gt;ls&lt;/code&gt; 命令，而不是 &lt;code&gt;touch&lt;/code&gt; 命令。因为我们没有覆盖&lt;em&gt;args&lt;/em&gt;选项，所以它将列出有关 &lt;code&gt;src/main.ts&lt;/code&gt; 文件的信息（为目标提供的默认值）。</target>
        </trans-unit>
        <trans-unit id="2d850926d891f5f4c805e3e17fdc18eb990f42f2" translate="yes" xml:space="preserve">
          <source>This will essentially do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9312003f28c3729ef201319a34848ad897938e4a" translate="yes" xml:space="preserve">
          <source>This will install the command &lt;code&gt;ng&lt;/code&gt; into your system, which is the command you use to create new workspaces, new projects, serve your application during development, or produce builds that can be shared or distributed.</source>
          <target state="translated">这会将命令 &lt;code&gt;ng&lt;/code&gt; 安装到您的系统中，这是用于创建新工作区，新项目，在开发期间为应用程序提供服务或生成可以共享或分发的构建的命令。</target>
        </trans-unit>
        <trans-unit id="9bb5987cb75dc888fb534638627a4e1a3c031126" translate="yes" xml:space="preserve">
          <source>This will not work in a real app. You're getting away with it now because the service currently returns &lt;em&gt;mock heroes&lt;/em&gt;. But soon the app will fetch heroes from a remote server, which is an inherently &lt;em&gt;asynchronous&lt;/em&gt; operation.</source>
          <target state="translated">这在真正的应用程序中不起作用。您现在就无法使用它了，因为该服务当前已返回&lt;em&gt;模拟英雄&lt;/em&gt;。但是很快，该应用程序将从远程服务器获取英雄，这是一种固有的&lt;em&gt;异步&lt;/em&gt;操作。</target>
        </trans-unit>
        <trans-unit id="c8a4d0a01462100bf09cd9c7a8827ae3dcb63eb8" translate="yes" xml:space="preserve">
          <source>This will produce the files that you need to deploy.</source>
          <target state="translated">这将产生你需要部署的文件。</target>
        </trans-unit>
        <trans-unit id="9b630be3829ca4b43f0c0f13ae624094630240e5" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;touch&lt;/code&gt; command on the &lt;code&gt;src/main.ts&lt;/code&gt; file.</source>
          <target state="translated">这将运行 &lt;code&gt;touch&lt;/code&gt; 在 &lt;code&gt;src/main.ts&lt;/code&gt; 文件上 touch命令。</target>
        </trans-unit>
        <trans-unit id="4fb5514b164bef25ddca759f879da4b392519146" translate="yes" xml:space="preserve">
          <source>This will set the active-link class on the div tag if the url is either '/user/jim' or '/user/bob'.</source>
          <target state="translated">如果url是'/user/jim'或'/user/bob',这将在div标签上设置主动链接类。</target>
        </trans-unit>
        <trans-unit id="d430f7cac5ea324357497bb1e85a43cc3ac98f1a" translate="yes" xml:space="preserve">
          <source>This won't work if the service is an application-wide singleton. Every component would share the same service instance, and each component would overwrite the tax return that belonged to another hero.</source>
          <target state="translated">如果服务是一个应用程序范围内的单例,这将无法工作。每个组件都会共享同一个服务实例,而且每个组件都会覆盖属于另一个英雄的报税单。</target>
        </trans-unit>
        <trans-unit id="66ee2090966d8e328167f9dd11bd703bc89361b7" translate="yes" xml:space="preserve">
          <source>This worked well, but there's a better way. If you were using a real world API, there might be some delay before the data to display is returned from the server. You don't want to display a blank component while waiting for the data.</source>
          <target state="translated">这很好用,但还有更好的方法。如果你使用的是真实世界的API,在要显示的数据从服务器返回之前可能会有一些延迟。你不希望在等待数据的时候显示一个空白的组件。</target>
        </trans-unit>
        <trans-unit id="61821e653cb092afa1d5fad2bdbb72bc70644e00" translate="yes" xml:space="preserve">
          <source>Those developers may still use HTML5 URLs by taking the following two steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3030da2c36d0ffb5bb1a38f3d3ab06bd0ba9aebe" translate="yes" xml:space="preserve">
          <source>Those developers may still use HTML5 URLs by taking two remedial steps:</source>
          <target state="translated">这些开发者仍然可以通过采取两个补救措施来使用HTML5 URL。</target>
        </trans-unit>
        <trans-unit id="a4c3697ed1231b34be5a06d277ed21d7aec6aac6" translate="yes" xml:space="preserve">
          <source>Those three steps look like the following. In the file where you create your directive, export it. The following example, named &lt;code&gt;ItemDirective&lt;/code&gt; is the default directive structure that the CLI generates in its own file, &lt;code&gt;item.directive.ts&lt;/code&gt;:</source>
          <target state="translated">这三个步骤如下所示。在您创建指令的文件中，将其导出。下面的示例名为 &lt;code&gt;ItemDirective&lt;/code&gt; 是CLI在其自己的文件 &lt;code&gt;item.directive.ts&lt;/code&gt; 中生成的默认指令结构：</target>
        </trans-unit>
        <trans-unit id="7282182d46ba8591a3fb80eb88450d7e6e0fb75f" translate="yes" xml:space="preserve">
          <source>Though &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; shouldn't have &lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;side effects&lt;/a&gt;, template statements usually do. The &lt;code&gt;deleteItem()&lt;/code&gt; method does have a side effect: it deletes an item.</source>
          <target state="translated">虽然&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;模板表达式&lt;/a&gt;不应该有&lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;副作用&lt;/a&gt;，但是模板语句通常。的 &lt;code&gt;deleteItem()&lt;/code&gt; 方法确实有一个副作用：它删除的项目。</target>
        </trans-unit>
        <trans-unit id="8b45283f651e66eedd857eedb3d79dccba5ecff8" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; provides the 🌻 (sunflower), the app renders the 🌺 (red hibiscus) because &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; causes the current injector to skip itself and look to its parent.</source>
          <target state="translated">尽管 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 提供了🌻（向日葵），但该应用却渲染了🌺（红芙蓉），因为 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 导致当前的注射器自身跳过并转向其父级。</target>
        </trans-unit>
        <trans-unit id="1075a1e80e7f93a1f8a46fd5766714abf59a2e2d" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; often appear together in apps, you can use them separately. If the nested component is such that it only needs to send data to its parent, you wouldn't need an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, only an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;. The reverse is also true in that if the child only needs to receive data from the parent, you'd only need &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">尽管 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 通常在应用程序中同时出现，但是您可以单独使用它们。如果嵌套组件是这样的，它只需将数据发送到其父，你不会需要一个 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ，只有一个 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 。反之亦然，如果子级只需要从父级接收数据，则只需要 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76c63fbb51bf2e00185f379ad812f423247e2cf5" translate="yes" xml:space="preserve">
          <source>Though &lt;em&gt;highlight&lt;/em&gt; would be a more concise selector than &lt;em&gt;appHighlight&lt;/em&gt; and it would work, the best practice is to prefix selector names to ensure they don't conflict with standard HTML attributes. This also reduces the risk of colliding with third-party directive names. The CLI added the &lt;code&gt;app&lt;/code&gt; prefix for you.</source>
          <target state="translated">尽管&lt;em&gt;高亮&lt;/em&gt;比&lt;em&gt;appHighlight&lt;/em&gt;更为简洁&lt;em&gt;&lt;/em&gt;和它的工作，最好的做法是选择前缀名称，以确保他们不会使用标准的HTML属性冲突。这也降低了与第三方指令名称冲突的风险。 CLI 为您添加了 &lt;code&gt;app&lt;/code&gt; 前缀。</target>
        </trans-unit>
        <trans-unit id="e7794513d8ab6b404efc84e17a85b45fb430b7cb" translate="yes" xml:space="preserve">
          <source>Though the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator has an &lt;code&gt;entryComponents&lt;/code&gt; array, most of the time you won't have to explicitly set any entry components because Angular adds components listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to &lt;code&gt;entryComponents&lt;/code&gt; explicitly.</source>
          <target state="translated">尽管 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器具有 &lt;code&gt;entryComponents&lt;/code&gt; 数组，但是大多数时候您不必显式设置任何入口组件，因为Angular会自动将 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 列出的组件以及路由定义中列出的组件添加到入口组件中。尽管这两种机制占了大多数输入组件的成本，但是如果您的应用恰好需要引导或按类型动态加载组件，则必须将其添加到 &lt;code&gt;entryComponents&lt;/code&gt; 显式 entryComponents中。</target>
        </trans-unit>
        <trans-unit id="c0c89634e88d4f46eb100cf74294ba38817d4923" translate="yes" xml:space="preserve">
          <source>Though the target name is usually the name of a property, there is an automatic attribute-to-property mapping in Angular for several common attributes. These include &lt;code&gt;class&lt;/code&gt;/&lt;code&gt;className&lt;/code&gt;, &lt;code&gt;innerHtml&lt;/code&gt;/&lt;code&gt;innerHTML&lt;/code&gt;, and &lt;code&gt;tabindex&lt;/code&gt;/&lt;code&gt;tabIndex&lt;/code&gt;.</source>
          <target state="translated">尽管目标名称通常是属性的名称，但是在Angular中有一个针对某些常见属性的自动属性到属性映射。这些包括 &lt;code&gt;class&lt;/code&gt; / &lt;code&gt;className&lt;/code&gt; ， &lt;code&gt;innerHtml&lt;/code&gt; / &lt;code&gt;innerHTML&lt;/code&gt; 和 &lt;code&gt;tabindex&lt;/code&gt; / &lt;code&gt;tabIndex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bdc5ca158e9ca814a1efdfbdd56e2547c9decdf" translate="yes" xml:space="preserve">
          <source>Though you can limit access to a service by providing it in a lazy loaded module or providing it in a component, providing services in a component can lead to multiple instances of those services. Thus, the lazy loading is preferable.</source>
          <target state="translated">虽然你可以通过在懒加载模块中提供服务或在组件中提供服务来限制对服务的访问,但在组件中提供服务会导致这些服务的多个实例。因此,最好采用懒加载的方式。</target>
        </trans-unit>
        <trans-unit id="90e178c89e79710297fa1f0d8ae614004845fcca" translate="yes" xml:space="preserve">
          <source>Though you can provide services by lazy loading modules, not all services can be lazy loaded. For instance, some modules only work in the root module, such as the Router. The Router works with the global location object in the browser.</source>
          <target state="translated">虽然可以通过懒加载模块提供服务,但并不是所有的服务都可以懒加载。例如,有些模块只在根模块中工作,比如Router。Router与浏览器中的全局位置对象一起工作。</target>
        </trans-unit>
        <trans-unit id="4ac43ae059a7abe0952abd693cdca4e55b219478" translate="yes" xml:space="preserve">
          <source>Though you can type the URL into the address bar, a navigation UI is easier for the user and more common. Replace the default placeholder markup in &lt;code&gt;app.component.html&lt;/code&gt; with a custom nav so you can easily navigate to your modules in the browser:</source>
          <target state="translated">尽管您可以在地址栏中键入URL，但是导航UI对用户来说更容易使用，也更常见。使用自定义导航替换 &lt;code&gt;app.component.html&lt;/code&gt; 中的默认占位符标记，以便您可以轻松浏览到浏览器中的模块：</target>
        </trans-unit>
        <trans-unit id="528e1795eb218a5f3792808cc39b7bcce25ad8db" translate="yes" xml:space="preserve">
          <source>Though you could technically set the &lt;code&gt;[attr.disabled]&lt;/code&gt; attribute binding, the values are different in that the property binding requires to a boolean value, while its corresponding attribute binding relies on whether the value is &lt;code&gt;null&lt;/code&gt; or not. Consider the following:</source>
          <target state="translated">尽管可以从技术上设置 &lt;code&gt;[attr.disabled]&lt;/code&gt; 属性绑定，但是值的不同之处在于，该属性绑定要求为布尔值，而其对应的属性绑定取决于该值是否为 &lt;code&gt;null&lt;/code&gt; 。考虑以下：</target>
        </trans-unit>
        <trans-unit id="ab6a81da6264ab1813a6ae0bf0a2c52eb58c33e9" translate="yes" xml:space="preserve">
          <source>Though you could technically set the &lt;code&gt;[attr.disabled]&lt;/code&gt; attribute binding, the values are different in that the property binding requires to be a boolean value, while its corresponding attribute binding relies on whether the value is &lt;code&gt;null&lt;/code&gt; or not. Consider the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171a82320fbdf7d2e2689bc12c98963504c6696d" translate="yes" xml:space="preserve">
          <source>Three instances of &lt;code&gt;HeroBioComponent&lt;/code&gt; can't share the same instance of &lt;code&gt;HeroCacheService&lt;/code&gt;, as they'd be competing with each other to determine which hero to cache.</source>
          <target state="translated">三个 &lt;code&gt;HeroBioComponent&lt;/code&gt; 实例不能共享相同的 &lt;code&gt;HeroCacheService&lt;/code&gt; 实例，因为它们将相互竞争以确定要缓存的英雄。</target>
        </trans-unit>
        <trans-unit id="e85a3cc08728cca8939b51f9d98196530fcc997a" translate="yes" xml:space="preserve">
          <source>Three of the common, built-in structural directives&amp;mdash;&lt;a href=&quot;built-in-directives#ngIf&quot;&gt;NgIf&lt;/a&gt;, &lt;a href=&quot;built-in-directives#ngFor&quot;&gt;NgFor&lt;/a&gt;, and &lt;a href=&quot;built-in-directives#ngSwitch&quot;&gt;NgSwitch...&lt;/a&gt;&amp;mdash;are described in the &lt;a href=&quot;built-in-directives&quot;&gt;Built-in directives&lt;/a&gt; guide and seen in samples throughout the Angular documentation. Here's an example of them in a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d80c7ef855b73b71c4ca5c1c8a2d8119c7fa21b" translate="yes" xml:space="preserve">
          <source>Three of the common, built-in structural directives&amp;mdash;&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;, &lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;, and &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch...&lt;/a&gt;&amp;mdash;are described in the &lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;Template Syntax&lt;/em&gt;&lt;/a&gt; guide and seen in samples throughout the Angular documentation. Here's an example of them in a template:</source>
          <target state="translated">三种常见的内置结构指令&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;，&lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;和&lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch ...&lt;/a&gt;在&lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;模板语法&lt;/em&gt;&lt;/a&gt;指南中在整个Angular文档的示例中都可以看到它们。这是模板中的示例：</target>
        </trans-unit>
        <trans-unit id="8703c0daee7a3560153b94bc34a950b511daab36" translate="yes" xml:space="preserve">
          <source>Three points of special interest:</source>
          <target state="translated">三点特别关注。</target>
        </trans-unit>
        <trans-unit id="6b164df9c4f94a91727830fddbf131671bff71ec" translate="yes" xml:space="preserve">
          <source>Three providers tell the JIT compiler how to translate the template texts for a particular language while compiling the app:</source>
          <target state="translated">三个提供者告诉JIT编译器在编译应用时如何翻译特定语言的模板文本。</target>
        </trans-unit>
        <trans-unit id="ed12cc77bbd83748afc157b996ead876c3c5517c" translate="yes" xml:space="preserve">
          <source>Through the &lt;code&gt;valueChanges&lt;/code&gt; observable where you can listen for changes in the form's value in the template using &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; or in the component class using the &lt;code&gt;subscribe()&lt;/code&gt; method.</source>
          <target state="translated">通过 &lt;code&gt;valueChanges&lt;/code&gt; 可观察到的位置，您可以在其中使用 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 或在模板中使用subscription &lt;code&gt;subscribe()&lt;/code&gt; 侦听模板中表单值的更改。方法。</target>
        </trans-unit>
        <trans-unit id="5a4cab0ebea476f32aa1e1c5fba91f40707b2ad6" translate="yes" xml:space="preserve">
          <source>Throughout this guide, you'll see a directive spelled in both &lt;em&gt;UpperCamelCase&lt;/em&gt; and &lt;em&gt;lowerCamelCase&lt;/em&gt;. Already you've seen &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. There's a reason. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; refers to the directive &lt;em&gt;class&lt;/em&gt;; &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; refers to the directive's &lt;em&gt;attribute name&lt;/em&gt;.</source>
          <target state="translated">在本指南中，您会看到在&lt;em&gt;UpperCamelCase&lt;/em&gt;和&lt;em&gt;lowerCamelCase&lt;/em&gt;中都拼写的指令。您已经看到了 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 。是有原因的 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 引用指令&lt;em&gt;类&lt;/em&gt;； &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 引用指令的&lt;em&gt;属性名称&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f9f4b0f30b3f06e61b21febef173645d29891305" translate="yes" xml:space="preserve">
          <source>Throws</source>
          <target state="translated">Throws</target>
        </trans-unit>
        <trans-unit id="6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="translated">Time</target>
        </trans-unit>
        <trans-unit id="f7ea2d8763887c41cd7da975aaf8c487045171ac" translate="yes" xml:space="preserve">
          <source>Time passes and application logic triggers lazy loading of an NgModule. Angular must add the lazy-loaded module's providers to an injector somewhere. It can't add them to the app root injector because that injector is closed to new providers. So Angular creates a new child injector for the lazy-loaded module context.</source>
          <target state="translated">时间流逝,应用逻辑触发了NgModule的懒加载。Angular必须将懒加载模块的提供者添加到某个注入器中。它不能将它们添加到应用根注入器中,因为该注入器对新的提供者是关闭的。所以Angular为懒加载模块上下文创建了一个新的子注入器。</target>
        </trans-unit>
        <trans-unit id="8f86764c71eb5f28fd785ba95ea223af744160bb" translate="yes" xml:space="preserve">
          <source>Timezone of the formatted text will be the local system timezone of the end-user's machine.</source>
          <target state="translated">格式化文本的时区将是终端用户机器的本地系统时区。</target>
        </trans-unit>
        <trans-unit id="098024dc5537ca3623978ac7c0a6140ce39062b8" translate="yes" xml:space="preserve">
          <source>Timing</source>
          <target state="translated">Timing</target>
        </trans-unit>
        <trans-unit id="ff73d9b2c838aef0837103246944b6eeaac4e811" translate="yes" xml:space="preserve">
          <source>Tip: In the &lt;a href=&quot;api&quot;&gt;API reference section&lt;/a&gt; of this doc site, deprecated APIs are indicated by &lt;del&gt;strikethrough.&lt;/del&gt; You can filter the API list by &lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status: deprecated&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">提示：在此文档网站的&lt;a href=&quot;api&quot;&gt;API参考部分&lt;/a&gt;中，已弃用的API表示为&lt;del&gt;删除线。&lt;/del&gt;您可以按&lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status：deprecated&lt;/strong&gt;&lt;/a&gt;过滤API列表。</target>
        </trans-unit>
        <trans-unit id="768e0c1c69573fb588f61f1308a015c11468e05f" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">Title</target>
        </trans-unit>
        <trans-unit id="cd78803504972c001f389f4b2e207d6fc9adc057" translate="yes" xml:space="preserve">
          <source>Title text should be in &quot;Sentence case&quot;, which means the first word is capitalized and all other words are lower case (unless they are technical terms that are always capitalized, like &quot;Angular&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef4826ff87f22d637cb47eb360c1525fcf04ada" translate="yes" xml:space="preserve">
          <source>Title text should be in &quot;Title Case&quot;, which means that you use capital letters to start the first words and all &lt;em&gt;principal&lt;/em&gt; words. Use lower case letters for &lt;em&gt;secondary&lt;/em&gt; words such as &quot;in&quot;, &quot;of&quot;, and &quot;the&quot;.</source>
          <target state="translated">标题文本应为&amp;ldquo;标题大小写&amp;rdquo;，这意味着您使用大写字母开头的第一个单词和所有&lt;em&gt;主要&lt;/em&gt;单词。小写字母用于&lt;em&gt;次要&lt;/em&gt;单词，例如&amp;ldquo; in&amp;rdquo;，&amp;ldquo; of&amp;rdquo;和&amp;ldquo; the&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="0443511f0f0d69e0669b6cc477969ba0177c046d" translate="yes" xml:space="preserve">
          <source>TitleCasePipe</source>
          <target state="translated">TitleCasePipe</target>
        </trans-unit>
        <trans-unit id="1edfc91ff1a795fb8fae2c2845186edc649e929e" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;http&quot;&gt;communicate with backend services using HTTP&lt;/a&gt;, the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service uses observables and offers the &lt;code&gt;HTTPClient.get()&lt;/code&gt; method to fetch data from a server. The asynchronous method sends an HTTP request, and returns an observable that emits the requested data for the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1a0b0c87e134832acc7d87c80e1e27c802b764" translate="yes" xml:space="preserve">
          <source>To access properties that are defined in an interface, you must explicitly convert the Object you get from the JSON to the required response type. For example, the following &lt;code&gt;subscribe&lt;/code&gt; callback receives &lt;code&gt;data&lt;/code&gt; as an Object, and then type-casts it in order to access the properties.</source>
          <target state="translated">要访问在接口中定义的属性，必须将从JSON获得的对象显式转换为所需的响应类型。例如，以下 &lt;code&gt;subscribe&lt;/code&gt; 回调将 &lt;code&gt;data&lt;/code&gt; 作为对象接收，然后进行类型转换以访问属性。</target>
        </trans-unit>
        <trans-unit id="090bde2470cfa5d91164f0dd5ac0b680c316fd8a" translate="yes" xml:space="preserve">
          <source>To access properties that are defined in an interface, you must explicitly convert the plain object you get from the JSON to the required response type. For example, the following &lt;code&gt;subscribe&lt;/code&gt; callback receives &lt;code&gt;data&lt;/code&gt; as an Object, and then type-casts it in order to access the properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612822e1f2a2307aaa6e2b3ed143cfc5b79f8e35" translate="yes" xml:space="preserve">
          <source>To achieve this effect, extend the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag with the following:</source>
          <target state="translated">要实现此效果，请使用以下命令扩展 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 标记：</target>
        </trans-unit>
        <trans-unit id="bfbef04c66fa9ac05c09e94801b6ea0bdf69d6fb" translate="yes" xml:space="preserve">
          <source>To add a form group to this component, take the following steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de9b850b6bc48b2b817512c2db67f3f4f4de00a" translate="yes" xml:space="preserve">
          <source>To add a hero, this app only needs the hero's name. You can use an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element paired with an add button.</source>
          <target state="translated">要添加英雄，此应用仅需要英雄的名字。您可以将 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素与添加按钮配对使用。</target>
        </trans-unit>
        <trans-unit id="da8e56238639cdc891b1d4ed923efdcffe46b6f3" translate="yes" xml:space="preserve">
          <source>To add a new &lt;code&gt;devDependency&lt;/code&gt;, use either one of the following commands:</source>
          <target state="translated">要添加新的 &lt;code&gt;devDependency&lt;/code&gt; ，请使用以下命令之一：</target>
        </trans-unit>
        <trans-unit id="27d7686824adeea94d6f50645d6b9afbe94609dd" translate="yes" xml:space="preserve">
          <source>To add a new dependency, use the &lt;a href=&quot;cli/add&quot;&gt;&lt;code&gt;ng add&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">要添加新的依赖关系，请使用&lt;a href=&quot;cli/add&quot;&gt; &lt;code&gt;ng add&lt;/code&gt; &lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="f457092233f40d2f34e89cbae624605c9b59951d" translate="yes" xml:space="preserve">
          <source>To add a schematic to an existing collection, use the same command you use to start a new schematics project, but run the command inside the project folder.</source>
          <target state="translated">要将原理图添加到现有的集合中,请使用与启动新的原理图项目相同的命令,但在项目文件夹内运行该命令。</target>
        </trans-unit>
        <trans-unit id="e0dff7476603a4365ce04e28daa6e5ae648874f0" translate="yes" xml:space="preserve">
          <source>To add a validator to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, pass the new validator in as the second argument on creation.</source>
          <target state="translated">要将验证器添加到 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; ，请将新的验证器作为创建时的第二个参数传入。</target>
        </trans-unit>
        <trans-unit id="6e5aa5b2615deae73ee3a7a681ef04a97504d33d" translate="yes" xml:space="preserve">
          <source>To add a web worker to an existing project, use the Angular CLI &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af208734231896485781dd45087dcf140d59c94" translate="yes" xml:space="preserve">
          <source>To add another product, click &quot;My Store&quot; to return to the product list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c21a740943c10dfa15804fca8321cd2e41101e" translate="yes" xml:space="preserve">
          <source>To add another product, click &quot;My Store&quot; to return to the product list. Repeat the steps above.</source>
          <target state="translated">要添加其他产品,请点击 &quot;我的商店 &quot;返回产品列表。重复上述步骤。</target>
        </trans-unit>
        <trans-unit id="af30217cecee494619d1758d399f71f84dae729e" translate="yes" xml:space="preserve">
          <source>To add artifacts to a project, your schematic needs its own template files. Schematic templates support special syntax to execute code and variable substitution.</source>
          <target state="translated">要在项目中添加工件,你的原理图需要自己的模板文件。原理图模板支持特殊的语法来执行代码和变量替换。</target>
        </trans-unit>
        <trans-unit id="5c8962d1b60c02af2c0fa75a87fff3fbce78ea63" translate="yes" xml:space="preserve">
          <source>To add more features to the app's current crisis center, take similar steps as for the heroes feature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b988734470ea226b7bc93e7814ababa57cf8ea" translate="yes" xml:space="preserve">
          <source>To add or remove a &lt;em&gt;single&lt;/em&gt; class, use &lt;a href=&quot;attribute-binding#class-binding&quot;&gt;class binding&lt;/a&gt; rather than &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d2051452de0323eb6efd5aedc607498069cdae" translate="yes" xml:space="preserve">
          <source>To add or remove a &lt;em&gt;single&lt;/em&gt; class, use &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt; rather than &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">要添加或删除&lt;em&gt;单个&lt;/em&gt;类，请使用&lt;a href=&quot;template-syntax#class-binding&quot;&gt;类绑定&lt;/a&gt;而不是 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9da25919d51d1a85e0005bea2eb758313daa6fe" translate="yes" xml:space="preserve">
          <source>To add paths, use the &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; option:</source>
          <target state="translated">要添加路径，请使用 &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; 选项：</target>
        </trans-unit>
        <trans-unit id="43fd32e81bc1770347d28bdfa0c8f42aa2ce4a7b" translate="yes" xml:space="preserve">
          <source>To add the classes only when the URL matches the link exactly, add the option &lt;code&gt;exact: true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496b7ad1d0a0eed5827dc1a97fd622e7f8d94e93" translate="yes" xml:space="preserve">
          <source>To add the component to the template, you call &lt;code&gt;createComponent()&lt;/code&gt; on &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">要将组件添加到模板，请在 &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 上调用 &lt;code&gt;createComponent()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="987b409e8bf18353ecffd982c4a6027176175f26" translate="yes" xml:space="preserve">
          <source>To add the schematics to the library bundle, add scripts to the library's &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="translated">要将原理图添加到库包中，请将脚本添加到库的 &lt;code&gt;package.json&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="1a7a24ab6c517387fe4fb759c2cbbe67fd7e654f" translate="yes" xml:space="preserve">
          <source>To add the stylesheet, open &lt;code&gt;styles.css&lt;/code&gt; and add the following import line at the top:</source>
          <target state="translated">要添加样式表，请打开 &lt;code&gt;styles.css&lt;/code&gt; 并在顶部添加以下导入行：</target>
        </trans-unit>
        <trans-unit id="d7a97119528a1219e01d41b64f89cfc156ab2111" translate="yes" xml:space="preserve">
          <source>To add validation to a template-driven form, you add the same validation attributes as you would with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;native HTML form validation&lt;/a&gt;. Angular uses directives to match these attributes with validator functions in the framework.</source>
          <target state="translated">要将验证添加到模板驱动的表单，请添加与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;本机HTML表单验证&lt;/a&gt;相同的验证属性。Angular使用指令将这些属性与框架中的验证器函数进行匹配。</target>
        </trans-unit>
        <trans-unit id="ce70784e6a2d0e1e0652eb7bae45da63bd42c69d" translate="yes" xml:space="preserve">
          <source>To alter the request, clone it first and modify the clone before passing it to &lt;code&gt;next.handle()&lt;/code&gt;. You can clone and modify the request in a single step as in this example.</source>
          <target state="translated">要更改请求，请先对其进行克隆，然后再将其传递给 &lt;code&gt;next.handle()&lt;/code&gt; 进行修改。如本例所示，您可以在一个步骤中克隆和修改请求。</target>
        </trans-unit>
        <trans-unit id="be9073f11e0afa56717eb05e0a7001960b7a1b99" translate="yes" xml:space="preserve">
          <source>To alter where the injector starts looking for &lt;code&gt;FlowerService&lt;/code&gt;, add &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; to the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; declaration for the &lt;code&gt;FlowerService&lt;/code&gt;. This declaration is in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; constructor as shown in &lt;code&gt;child.component.ts&lt;/code&gt;:</source>
          <target state="translated">为了改变所述的喷射开始寻找 &lt;code&gt;FlowerService&lt;/code&gt; ，加 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 的 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 声明的 &lt;code&gt;FlowerService&lt;/code&gt; 。该声明在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 构造函数中，如 &lt;code&gt;child.component.ts&lt;/code&gt; 中所示：</target>
        </trans-unit>
        <trans-unit id="22c3b2cba8f53e2ffe5dab01bc5b91f88e756346" translate="yes" xml:space="preserve">
          <source>To answer these kinds of questions, you have to create the DOM elements associated with the components, you must examine the DOM to confirm that component state displays properly at the appropriate times, and you must simulate user interaction with the screen to determine whether those interactions cause the component to behave as expected.</source>
          <target state="translated">为了回答这类问题,你必须创建与组件相关联的DOM元素,你必须检查DOM以确认组件状态在适当的时间正确显示,你必须模拟用户与屏幕的交互,以确定这些交互是否导致组件按照预期的行为。</target>
        </trans-unit>
        <trans-unit id="b914cc85efa6a3ee58a159fd0169f8e78be87368" translate="yes" xml:space="preserve">
          <source>To apply a pipe, use the pipe operator (&lt;code&gt;|&lt;/code&gt;) within a template expression as shown in the following code example, along with the &lt;em&gt;name&lt;/em&gt; of the pipe, which is &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; for the built-in &lt;a href=&quot;../api/common/datepipe&quot;&gt;&lt;code&gt;DatePipe&lt;/code&gt;&lt;/a&gt;. The tabs in the example show the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf8f543ff93bfc9b163241813212b02a20d1ea1" translate="yes" xml:space="preserve">
          <source>To apply specific build options to only one locale, you can create a custom locale-specific configuration by specifying a single locale as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d091e0c047395da2a56a9e24df2133c4a12994" translate="yes" xml:space="preserve">
          <source>To attach the aliases from your form model, you must add it to the template. Similar to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; input provided by &lt;code&gt;FormGroupNameDirective&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; binds communication from the form array instance to the template with &lt;code&gt;FormArrayNameDirective&lt;/code&gt;.</source>
          <target state="translated">要附加表单模型中的别名，必须将其添加到模板中。类似于 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; 通过提供输入 &lt;code&gt;FormGroupNameDirective&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; 结合从表单数组实例通信，以与模板 &lt;code&gt;FormArrayNameDirective&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b439955a79dbd833d42d99f6fa91279d6ef67f27" translate="yes" xml:space="preserve">
          <source>To automate that data flow, setup a two-way data binding between the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; form element and the &lt;code&gt;hero.name&lt;/code&gt; property.</source>
          <target state="translated">要自动执行该数据流，请在 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 表单元素和 &lt;code&gt;hero.name&lt;/code&gt; 属性之间建立双向数据绑定。</target>
        </trans-unit>
        <trans-unit id="c97596f545bc3c4cf4d6e36b38363f8b20cb690b" translate="yes" xml:space="preserve">
          <source>To avoid relying solely on visual cues, you need to make sure your routing code updates focus after page navigation. Use the &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; event from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to know when to update focus.</source>
          <target state="translated">为了避免仅依靠视觉提示，您需要确保路由代码的更新集中在页面导航之后。使用 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 服务中的 &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; 事件可以知道何时更新焦点。</target>
        </trans-unit>
        <trans-unit id="b14c5694baf8932f7e55e412b232c287b7bc7e46" translate="yes" xml:space="preserve">
          <source>To avoid this error, a &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hook&lt;/a&gt; method that seeks to make such a change should trigger a new change detection run. The new run follows the same direction as before, but succeeds in picking up the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441327a3b62f31f08d7ebf067ab65b6221abce4c" translate="yes" xml:space="preserve">
          <source>To avoid this expensive operation, you can customize the default tracking algorithm. by supplying the &lt;code&gt;trackBy&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;trackBy&lt;/code&gt; takes a function that has two arguments: &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;trackBy&lt;/code&gt; is given, Angular tracks changes by the return value of the function.</source>
          <target state="translated">为避免这种昂贵的操作，您可以自定义默认跟踪算法。通过提供 &lt;code&gt;trackBy&lt;/code&gt; 选项 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;trackBy&lt;/code&gt; 采用具有两个参数的函数： &lt;code&gt;index&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 。如果 &lt;code&gt;trackBy&lt;/code&gt; ，则Angular轨迹会根据函数的返回值而变化。</target>
        </trans-unit>
        <trans-unit id="4e45c920ee8a5bfaeada08016996d3dc7a94099f" translate="yes" xml:space="preserve">
          <source>To avoid this expensive operation, you can customize the default tracking algorithm. by supplying the &lt;code&gt;trackBy&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;trackBy&lt;/code&gt; takes a function that has two arguments: &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;item&lt;/code&gt;. If &lt;code&gt;trackBy&lt;/code&gt; is given, Angular tracks changes by the return value of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8cfc2c0e9fadb81aa5e73b8bb58085461fa57a5" translate="yes" xml:space="preserve">
          <source>To avoid this problem, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in the &lt;code&gt;AppModule&lt;/code&gt;, the application &lt;em&gt;root module&lt;/em&gt;.</source>
          <target state="translated">为避免此问题，请仅在应用程序&lt;em&gt;根模块&lt;/em&gt; &lt;code&gt;AppModule&lt;/code&gt; 中导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="598b94eaf0a9207b1b2f7e14b6bb329e39eadeca" translate="yes" xml:space="preserve">
          <source>To be Angular compatible, an AngularJS component directive should configure these attributes:</source>
          <target state="translated">为了兼容Angular,一个AngularJS组件指令应该配置这些属性。</target>
        </trans-unit>
        <trans-unit id="123c3019791e3c52ebbcbe83a892f8e6e401c499" translate="yes" xml:space="preserve">
          <source>To be notified when new releases are available, follow &lt;a href=&quot;https://twitter.com/angular&quot;&gt;@angular&lt;/a&gt; on Twitter or subscribe to the &lt;a href=&quot;https://blog.angular.io&quot;&gt;Angular blog&lt;/a&gt;.</source>
          <target state="translated">要在新版本发布时得到通知，&lt;a href=&quot;https://twitter.com/angular&quot;&gt;请&lt;/a&gt;在Twitter上关注@angular或订阅&lt;a href=&quot;https://blog.angular.io&quot;&gt;Angular博客&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd4700612dcf5dc9d98d073d3fec1a9bda0633ef" translate="yes" xml:space="preserve">
          <source>To be used with watch mode, a builder handler function should return an Observable. Architect subscribes to the Observable until it completes and might reuse it if the builder is scheduled again with the same arguments.</source>
          <target state="translated">为了与观察模式一起使用,构建器处理函数应该返回一个Observable。建筑师会订阅这个Observable,直到它完成为止,如果用同样的参数再次安排建造者,可能会重新使用它。</target>
        </trans-unit>
        <trans-unit id="c6264ce2f8d176973d84cc88a177c1b8d2ae8301" translate="yes" xml:space="preserve">
          <source>To begin converting your AngularJS application to a hybrid, you need to load the Angular framework. You can see how this can be done with SystemJS by following the instructions in &lt;a href=&quot;upgrade-setup&quot;&gt;Setup for Upgrading to AngularJS&lt;/a&gt; for selectively copying code from the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github repository&lt;/a&gt;.</source>
          <target state="translated">要开始将AngularJS应用程序转换为混合程序，您需要加载Angular框架。通过遵循&amp;ldquo; &lt;a href=&quot;upgrade-setup&quot;&gt;升级到AngularJS的安装程序&amp;rdquo;中&lt;/a&gt;的说明从&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github存储库中&lt;/a&gt;选择性地复制代码，可以看到如何使用SystemJS来完成此操作。</target>
        </trans-unit>
        <trans-unit id="ff25a3d91e518e6022fbcb82db9614eb3a86d036" translate="yes" xml:space="preserve">
          <source>To begin testing calls to &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; and the mocking controller, &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt;, along with the other symbols your tests require.</source>
          <target state="translated">要开始测试对 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的调用，请导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; 控制器HttpTestingController以及测试所需的其他符号。</target>
        </trans-unit>
        <trans-unit id="970d997b1f905a43219b5008925290bb634cfd6b" translate="yes" xml:space="preserve">
          <source>To begin using Angular service workers, see &lt;a href=&quot;service-worker-getting-started&quot;&gt;Getting Started with service workers&lt;/a&gt;.</source>
          <target state="translated">要开始使用Angular服务人员，请参阅《服务人员&lt;a href=&quot;service-worker-getting-started&quot;&gt;入门》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de460edf05dca2d464a1be91407ed6ffea7d7a8e" translate="yes" xml:space="preserve">
          <source>To begin using the CLI for a new project, see &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">要开始将CLI用于新项目，请参阅&amp;ldquo; &lt;a href=&quot;setup-local&quot;&gt;本地环境设置&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b18b6e1679f6b673ab980d8c28e59713ff54dfa" translate="yes" xml:space="preserve">
          <source>To begin, configure a set of routes using methods available in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; class. This route configuration tells the router how to navigate.</source>
          <target state="translated">首先，使用 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 类中可用的方法配置一组路由。此路由配置告诉路由器如何导航。</target>
        </trans-unit>
        <trans-unit id="008987cccbf2a31fda96aa5a830cd40924b91032" translate="yes" xml:space="preserve">
          <source>To begin, create a new subfolder, &lt;code&gt;my-service&lt;/code&gt;, in the &lt;code&gt;schematics&lt;/code&gt; folder.</source>
          <target state="translated">首先，在 &lt;code&gt;schematics&lt;/code&gt; 文件夹中创建一个新的子文件夹 &lt;code&gt;my-service&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6dd9e1c57cc321e0fe725c8e45cb7fc4f6d13c75" translate="yes" xml:space="preserve">
          <source>To benefit from the Angular service worker, your app must run in a web browser that supports service workers in general. Currently, service workers are supported in the latest versions of Chrome, Firefox, Edge, Safari, Opera, UC Browser (Android version) and Samsung Internet. Browsers like IE and Opera Mini do not support service workers.</source>
          <target state="translated">要想从Angular服务工作者中获益,您的应用程序必须在一般支持服务工作者的Web浏览器中运行。目前,最新版本的Chrome、Firefox、Edge、Safari、Opera、UC浏览器(Android版本)和三星互联网都支持服务工作者。IE和Opera Mini等浏览器不支持服务工。</target>
        </trans-unit>
        <trans-unit id="823f8f6067a0bd01cd8d63ba6022a1d82417c4ca" translate="yes" xml:space="preserve">
          <source>To better explain the condition under which token retention occurs, consider a library that provides a library-card component, which contains a body and can contain an optional header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b9a0b3c93987f15167a935557553029127ee66" translate="yes" xml:space="preserve">
          <source>To bind the &lt;code&gt;src&lt;/code&gt; property of an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element to a component's property, place the target, &lt;code&gt;src&lt;/code&gt;, in square brackets followed by an equal sign and then the property. The property here is &lt;code&gt;itemImageUrl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aceceb9344b852a619d58c97b4a87fbc9c2dc9ab" translate="yes" xml:space="preserve">
          <source>To bind to a DOM event, surround the DOM event name in parentheses and assign a quoted &lt;a href=&quot;template-syntax#template-statements&quot;&gt;template statement&lt;/a&gt; to it.</source>
          <target state="translated">要绑定到DOM事件，请将DOM事件名称括在括号中，并为其添加一个引用的&lt;a href=&quot;template-syntax#template-statements&quot;&gt;模板语句&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8805e78091225819c8ec4f163b041709b022dc53" translate="yes" xml:space="preserve">
          <source>To bind to an element's property, enclose it in square brackets, &lt;code&gt;[]&lt;/code&gt;, which identifies the property as a target property. A target property is the DOM property to which you want to assign a value. For example, the target property in the following code is the image element's &lt;code&gt;src&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c9d270dcb9439d7a8e35a87d442f4c07eaf0b5" translate="yes" xml:space="preserve">
          <source>To bind to an event you use the Angular event binding syntax. This syntax consists of a target event name within parentheses to the left of an equal sign, and a quoted template statement to the right. In the following example, the target event name is &lt;code&gt;click&lt;/code&gt; and the template statement is &lt;code&gt;onSave()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d778e18735c77251c6e68dfae859e34ec242ed1" translate="yes" xml:space="preserve">
          <source>To bind to multiple classes, use &lt;code&gt;[class]&lt;/code&gt; set to an expression&amp;mdash;for example, &lt;code&gt;[class]=&quot;classExpression&quot;&lt;/code&gt;. The expression can be a space-delimited string of class names, or an object with class names as the keys and truthy or falsy expressions as the values. With an object format, Angular adds a class only if its associated value is truthy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2b43d8d4759c302041d5555e84a74b033db308" translate="yes" xml:space="preserve">
          <source>To block XSS attacks, you must prevent malicious code from entering the DOM (Document Object Model). For example, if attackers can trick you into inserting a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the DOM, they can run arbitrary code on your website. The attack isn't limited to &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&amp;mdash;many elements and properties in the DOM allow code execution, for example, &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt;. If attacker-controlled data enters the DOM, expect security vulnerabilities.</source>
          <target state="translated">要阻止XSS攻击，必须防止恶意代码进入DOM（文档对象模型）。例如，如果攻击者可以诱骗您在DOM中插入 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记，则他们可以在您的网站上运行任意代码。攻击并不限定于 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签-许多元素和属性在DOM允许执行代码，例如， &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt; 。如果攻击者控制的数据进入DOM，则可能会遇到安全漏洞。</target>
        </trans-unit>
        <trans-unit id="bf32545d272d3b9cbadb82b7e3da443ce9a08440" translate="yes" xml:space="preserve">
          <source>To block XSS attacks, you must prevent malicious code from entering the DOM (Document Object Model). For example, if attackers can trick you into inserting a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the DOM, they can run arbitrary code on your website. The attack isn't limited to &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&amp;mdash;many elements and properties in the DOM allow code execution, for example, &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt;. If attacker-controlled data enters the DOM, expect security vulnerabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e29a55d59b6b2bd0a517982412ccec5411a4a1" translate="yes" xml:space="preserve">
          <source>To bootstrap a hybrid application, you must bootstrap each of the Angular and AngularJS parts of the application. You must bootstrap the Angular bits first and then ask the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to bootstrap the AngularJS bits next.</source>
          <target state="translated">要引导混合应用程序，必须引导应用程序的每个Angular和AngularJS部分。您必须先自举Angular位，然后再要求 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 自举AngularJS位。</target>
        </trans-unit>
        <trans-unit id="4f304161933cd5ad06abfd2e9cde018e77079b3d" translate="yes" xml:space="preserve">
          <source>To build a separate distributable copy of the app for each locale, &lt;a href=&quot;i18n#localize-config&quot;&gt;define the locales in the build configuration&lt;/a&gt; in your project's workspace configuration file &lt;a href=&quot;workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt;&lt;/a&gt;. This method shortens the build process by removing the requirement to perform a full app build for each locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ec3081d8abfef81b9c7b98512682fe817069de" translate="yes" xml:space="preserve">
          <source>To build up the generation schematic, start with an empty rule factory.</source>
          <target state="translated">要建立生成原理图,先从一个空的规则工厂开始。</target>
        </trans-unit>
        <trans-unit id="8901fe39170514d01f50341a27e20f9604a9825a" translate="yes" xml:space="preserve">
          <source>To build using the staging configuration, run the following command:</source>
          <target state="translated">要使用暂存配置进行构建,请运行以下命令。</target>
        </trans-unit>
        <trans-unit id="c4203d9a357f968995a61263dcb595eb193e91ce" translate="yes" xml:space="preserve">
          <source>To build your application locally or for production, download the source code from your StackBlitz project by clicking the &lt;code&gt;Download Project&lt;/code&gt; icon in the left menu across from &lt;code&gt;Project&lt;/code&gt; to download your files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28bdfee0dc7a60965eea042b0b40687dbd667f9" translate="yes" xml:space="preserve">
          <source>To build your application locally or for production, you will need to download the source code from your StackBlitz project. Click the &lt;code&gt;Download Project&lt;/code&gt; icon in the left menu across from &lt;code&gt;Project&lt;/code&gt; to download your files.</source>
          <target state="translated">要在本地或生产环境中构建应用程序，您需要从StackBlitz项目中下载源代码。点击 &lt;code&gt;Download Project&lt;/code&gt; 在左边的菜单图标对面的 &lt;code&gt;Project&lt;/code&gt; 来下载你的文件。</target>
        </trans-unit>
        <trans-unit id="0466ae768a4d93cf77c8e4981171d89f8a7ca6ff" translate="yes" xml:space="preserve">
          <source>To bundle your schematics together with your library, you must configure the library to build the schematics separately, then add them to the bundle. You must build your schematics &lt;em&gt;after&lt;/em&gt; you build your library, so they are placed in the correct directory.</source>
          <target state="translated">要将原理图与库捆绑在一起，必须配置该库以分别构建原理图，然后将其添加到捆绑中。你必须建立你的图表&lt;em&gt;后，&lt;/em&gt;您构建库，所以它们被放置在正确的目录。</target>
        </trans-unit>
        <trans-unit id="885d50f557834570c68a2e5e1be6b220c9216f5a" translate="yes" xml:space="preserve">
          <source>To bypass the service worker you can set &lt;code&gt;ngsw-bypass&lt;/code&gt; as a request header, or as a query parameter. (The value of the header or query parameter is ignored and can be empty or omitted.)</source>
          <target state="translated">要绕过服务人员，您可以将 &lt;code&gt;ngsw-bypass&lt;/code&gt; 设置为请求标头或查询参数。（标头或查询参数的值将被忽略，可以为空或省略。）</target>
        </trans-unit>
        <trans-unit id="12534712788ba78416f7f95870eaa280458520d6" translate="yes" xml:space="preserve">
          <source>To catch errors, you &lt;strong&gt;&quot;pipe&quot; the observable&lt;/strong&gt; result from &lt;code&gt;http.get()&lt;/code&gt; through an RxJS &lt;code&gt;catchError()&lt;/code&gt; operator.</source>
          <target state="translated">为了捕获错误，您&lt;strong&gt;可以&lt;/strong&gt;通过RxJS &lt;code&gt;catchError()&lt;/code&gt; 运算符&lt;strong&gt;&amp;ldquo; &lt;/strong&gt; &lt;code&gt;http.get()&lt;/code&gt; &lt;strong&gt;&amp;rdquo;&lt;/strong&gt;来自http.get（）&lt;strong&gt;的可观察&lt;/strong&gt;结果。</target>
        </trans-unit>
        <trans-unit id="b1399e0f4384532fff4fb5004d497a9b72d3762f" translate="yes" xml:space="preserve">
          <source>To change the appearance in this way, take the following steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0fe49f14510b713680172388a0dd717d0f6c10" translate="yes" xml:space="preserve">
          <source>To change the controls in the array, use the &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;removeAt&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt; methods in &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; itself. These methods ensure the controls are properly tracked in the form's hierarchy. Do not modify the array of &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s used to instantiate the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; directly, as that result in strange and unexpected behavior such as broken change detection.</source>
          <target state="translated">要更改数组中的控件，请使用 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 本身中的 &lt;code&gt;push&lt;/code&gt; ， &lt;code&gt;insert&lt;/code&gt; ， &lt;code&gt;removeAt&lt;/code&gt; 或 &lt;code&gt;clear&lt;/code&gt; 方法。这些方法可确保在表单的层次结构中正确跟踪控件。不要修改用于直接实例化 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 的数组，因为这会导致奇怪和意外的行为，例如损坏的更改检测。</target>
        </trans-unit>
        <trans-unit id="fa6c4e125d9030b1dd5bdb271106b3ee1210b79c" translate="yes" xml:space="preserve">
          <source>To change the name of the source language file generated by the extraction tool, use the &lt;code&gt;--outFile&lt;/code&gt; command option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63029d22a7a0498f402e2ef9e4441e473404955c" translate="yes" xml:space="preserve">
          <source>To check that you have the npm client installed, run &lt;code&gt;npm -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">要检查是否已安装npm客户端，请在终端/控制台窗口中运行 &lt;code&gt;npm -v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca63fd9203fa01e0094b45d6b8d3f7271e129840" translate="yes" xml:space="preserve">
          <source>To check that your services are working as you intend, you can write tests specifically for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e948743b462eea7115d418352e1dbfa4b4b10ff" translate="yes" xml:space="preserve">
          <source>To check your app's version of Angular: From within your project directory, use the &lt;code&gt;ng version&lt;/code&gt; command.</source>
          <target state="translated">要检查应用程序的Angular版本：在项目目录中，使用 &lt;code&gt;ng version&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="13078c07edb73de738fd267221caa6c4bad9f0a1" translate="yes" xml:space="preserve">
          <source>To check your version, run &lt;code&gt;node -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">要检查您的版本，请在终端/控制台窗口中运行 &lt;code&gt;node -v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07cec4d840c8d65fc9e2b7b36b758a8ade445776" translate="yes" xml:space="preserve">
          <source>To combine property and event bindings using the banana-in-a-box syntax, &lt;code&gt;[()]&lt;/code&gt;, see &lt;a href=&quot;template-syntax#two-way&quot;&gt;Two-way Binding&lt;/a&gt;.</source>
          <target state="translated">要使用banner-in-a-box语法 &lt;code&gt;[()]&lt;/code&gt; 组合属性和事件绑定，请参见&lt;a href=&quot;template-syntax#two-way&quot;&gt;双向绑定&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="642e16b417c34000ddb663b1633653c4924b0252" translate="yes" xml:space="preserve">
          <source>To combine property and event bindings using the banana-in-a-box syntax, &lt;code&gt;[()]&lt;/code&gt;, see &lt;a href=&quot;two-way-binding&quot;&gt;Two-way Binding&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d564a34225b7a86fd760cbe08da660a47b6d5c" translate="yes" xml:space="preserve">
          <source>To complete this tutorial, you should have a basic understanding of the following concepts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3236306fb71061a53e3712837b9be971697d08d" translate="yes" xml:space="preserve">
          <source>To conditionally display an element, place the element's &lt;code&gt;hidden&lt;/code&gt; property in square brackets and set it to a quoted template expression that evaluates to the &lt;em&gt;opposite&lt;/em&gt; of &lt;em&gt;show&lt;/em&gt;.</source>
          <target state="translated">有条件地显示一个元素，将元素的 &lt;code&gt;hidden&lt;/code&gt; 属性在方括号并将其设置为一个带引号的模板表达式计算结果为&lt;em&gt;相反&lt;/em&gt;的&lt;em&gt;表演&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="53182894e9c6995045a12635221f90b2e4299c08" translate="yes" xml:space="preserve">
          <source>To configure access to your own users' CLI usage data, use the &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; command to add a key to your global &lt;a href=&quot;../guide/workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt; workspace configuration file&lt;/a&gt;. The key goes under &lt;code&gt;cli.analyticsSharing&lt;/code&gt; at the top level of the file, outside the &lt;code&gt;projects&lt;/code&gt; sections. The value of the key is your organization's tracking ID, as assigned by Google Analytics. This ID is a string that looks like &lt;code&gt;UA-123456-12&lt;/code&gt;.</source>
          <target state="translated">要配置对您自己用户的CLI使用数据的访问，请使用 &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; 命令将密钥添加到全局&lt;a href=&quot;../guide/workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; 工作区配置文件&lt;/a&gt;。密钥位于 &lt;code&gt;projects&lt;/code&gt; 部分之外文件顶部的 &lt;code&gt;cli.analyticsSharing&lt;/code&gt; 下。密钥的值是您的组织的跟踪ID（由Google Analytics（分析）分配）。该ID是一个类似于 &lt;code&gt;UA-123456-12&lt;/code&gt; 的字符串。</target>
        </trans-unit>
        <trans-unit id="43641662c305bf9094c3e1aabcca4466e6a5d8e8" translate="yes" xml:space="preserve">
          <source>To configure access to your own users' CLI usage data, use the &lt;code&gt;ng config&lt;/code&gt; command to add a key to your global &lt;a href=&quot;../guide/workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt; workspace configuration file&lt;/a&gt;. The key goes under &lt;code&gt;cli.analyticsSharing&lt;/code&gt; at the top level of the file, outside the &lt;code&gt;projects&lt;/code&gt; sections. The value of the key is your organization's tracking ID, as assigned by Google Analytics. This ID is a string that looks like &lt;code&gt;UA-123456-12&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081b1f073ba92cd82743621b3f2f2eb2c90049a3" translate="yes" xml:space="preserve">
          <source>To configure the Angular Router, you must define a route for AngularJS URLs. To match those URLs, you add a route configuration that uses the &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; allows you to use custom pattern matching for URL paths. The Angular Router tries to match on more specific routes such as static and variable routes first. When it doesn't find a match, it then looks at custom matchers defined in your route configuration. If the custom matchers don't match a route, it then goes to catch-all routes, such as a 404 page.</source>
          <target state="translated">要配置Angular路由器，必须为AngularJS URL定义路由。要匹配这些URL，请添加使用 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 属性的路由配置。该 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 允许您使用自定义的模式匹配的URL路径。Angular Router尝试首先匹配更具体的路由，例如静态和可变路由。当找不到匹配项时，它将查看在路由配置中定义的自定义匹配器。如果自定义匹配器不匹配某个路由，则它将转到所有路由，例如404页面。</target>
        </trans-unit>
        <trans-unit id="8b0d3dc20b07af14896fcbb5d5c567cd4a2c240d" translate="yes" xml:space="preserve">
          <source>To configure the Angular Router, you must define a route for AngularJS URLs. To match those URLs, you add a route configuration that uses the &lt;code&gt;matcher&lt;/code&gt; property. The &lt;code&gt;matcher&lt;/code&gt; allows you to use custom pattern matching for URL paths. The Angular Router tries to match on more specific routes such as static and variable routes first. When it doesn't find a match, it then looks at custom matchers defined in your route configuration. If the custom matchers don't match a route, it then goes to catch-all routes, such as a 404 page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e972c128dc7bc14f3f17a87fcada88a6a2d87a1e" translate="yes" xml:space="preserve">
          <source>To configure whether navigation requests are sent through to the network or not, see the &lt;a href=&quot;service-worker-config#navigation-request-strategy&quot;&gt;navigationRequestStrategy&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b884870273119a7d7e697d247c4d659cdde8b585" translate="yes" xml:space="preserve">
          <source>To confirm submission, open the console where you should see an object containing the name and address you submitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a5f9228b0c283a4c0767bf17f5218cf21f432e" translate="yes" xml:space="preserve">
          <source>To confirm that the display updates as the user adds heroes, see the live example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6838e6bcfc83475121bb1e4ad55f4fbcaddb58b" translate="yes" xml:space="preserve">
          <source>To confirm that two-way data binding works for the entire hero model, add a new binding at the top to the component's &lt;code&gt;diagnostic&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99be46bd11d0de83ad9e296968ef2c5a7118146b" translate="yes" xml:space="preserve">
          <source>To continue exploring Angular, choose either of the following options:</source>
          <target state="translated">要继续探索Angular,请选择以下任一选项。</target>
        </trans-unit>
        <trans-unit id="a3014c43a2313b977c6aed25419c31a95265fa08" translate="yes" xml:space="preserve">
          <source>To contrast the two types of components, there are components which are included in the template, which are declarative. Additionally, there are components which you load imperatively; that is, entry components.</source>
          <target state="translated">对比一下这两种类型的组件,有一些组件是包含在模板中的,是声明性的。此外,还有一些组件是你必须加载的,也就是入口组件。</target>
        </trans-unit>
        <trans-unit id="959d46928d85d110fdade5f2293bf97890445838" translate="yes" xml:space="preserve">
          <source>To control how this encapsulation happens on a &lt;em&gt;per component&lt;/em&gt; basis, you can set the &lt;em&gt;view encapsulation mode&lt;/em&gt; in the component metadata. Choose from the following modes:</source>
          <target state="translated">要控制&lt;em&gt;每个组件&lt;/em&gt;的&lt;em&gt;封装方式&lt;/em&gt;，可以在组件元数据中设置&lt;em&gt;视图封装模式&lt;/em&gt;。从以下模式中选择：</target>
        </trans-unit>
        <trans-unit id="c93024cc33ad0ddbba14e6bbd25bf12722637c4a" translate="yes" xml:space="preserve">
          <source>To control the state of the button, set the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;property&lt;/em&gt;,</source>
          <target state="translated">要控制按钮的状态，请设置 &lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;，</target>
        </trans-unit>
        <trans-unit id="fbe3fde2fb0a60e4ec9cfcd947c47d4e664ce7a7" translate="yes" xml:space="preserve">
          <source>To convert this binding to use specialized objects, turn the array of hero names into an array of &lt;code&gt;Hero&lt;/code&gt; objects. For that you'll need a &lt;code&gt;Hero&lt;/code&gt; class:</source>
          <target state="translated">要将绑定转换为使用专用对象，请将英雄名称数组转换为 &lt;code&gt;Hero&lt;/code&gt; 对象数组。为此，您需要一个 &lt;code&gt;Hero&lt;/code&gt; 类：</target>
        </trans-unit>
        <trans-unit id="3e235ca1b49cbf515a53d4eb460cb0a499395651" translate="yes" xml:space="preserve">
          <source>To copy a code example from this tutorial, click the icon at the top right of the code example box, and then paste the code snippet from the clipboard into StackBlitz.</source>
          <target state="translated">要从本教程中复制一个代码示例,点击代码示例框右上方的图标,然后将剪贴板中的代码片段粘贴到StackBlitz中。</target>
        </trans-unit>
        <trans-unit id="b27e4d885fe2defbb235fa198172a39e1ab9f6e4" translate="yes" xml:space="preserve">
          <source>To correct the problem, call &lt;code&gt;compileComponents()&lt;/code&gt; as explained &lt;a href=&quot;testing#compile-components&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">要更正此问题，请按&lt;a href=&quot;testing#compile-components&quot;&gt;以下&lt;/a&gt;说明调用 &lt;code&gt;compileComponents()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b99d3a2a82a487cd7d58a6066fda66fb46065bff" translate="yes" xml:space="preserve">
          <source>To correct the problem, call &lt;code&gt;compileComponents()&lt;/code&gt; as explained &lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979325cb37deb2c50164b83f04e810b1ac2b55a5" translate="yes" xml:space="preserve">
          <source>To correct this error, export a function from the module and refer to the function in a &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider instead.</source>
          <target state="translated">要更正此错误，请从模块中导出函数，然后在 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 提供程序中引用该函数。</target>
        </trans-unit>
        <trans-unit id="0de991b19c02e8ee0427a429122c7e2d73a6ca37" translate="yes" xml:space="preserve">
          <source>To correct this error, export a function from the module and refer to the function in a &lt;code&gt;useFactory&lt;/code&gt; provider instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecaf5471a0ced58416233b3602e2e5a39d32a9d" translate="yes" xml:space="preserve">
          <source>To correct this error, provide the initial value of the variable in an initializer clause &lt;em&gt;on the same line&lt;/em&gt;.</source>
          <target state="translated">要更正此错误，请&lt;em&gt;在同一行&lt;/em&gt;的初始化子句中提供变量的初始值。</target>
        </trans-unit>
        <trans-unit id="4dee6cdbff0c50b18b7cf0744c39d9afb9e81794" translate="yes" xml:space="preserve">
          <source>To correct this error, refer to non-destructured values.</source>
          <target state="translated">要纠正这个错误,请参考非结构化值。</target>
        </trans-unit>
        <trans-unit id="babb4800b9ce7124e0062940991131f750bd641a" translate="yes" xml:space="preserve">
          <source>To create a component using the Angular CLI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fabc18833c78d0934957c18fe19782c262d822" translate="yes" xml:space="preserve">
          <source>To create a component, verify that you have met the following prerequisites:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bb6a40877c035fe23caa2365ec0af551e4e717" translate="yes" xml:space="preserve">
          <source>To create a file in the &lt;code&gt;src/locale&lt;/code&gt; directory, specify the output path as an option, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8122f0d68c6098d4c122991ebd95c6cf88d61b30" translate="yes" xml:space="preserve">
          <source>To create a nested group in &lt;code&gt;profileForm&lt;/code&gt;, add a nested &lt;code&gt;address&lt;/code&gt; element to the form group instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafbd773ca94ccd66053f04954d31716c4ab9f28" translate="yes" xml:space="preserve">
          <source>To create a new application in the strict mode within an existing non-strict workspace, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbca6227b9db6ab1847c89187b909d5fe85abac4" translate="yes" xml:space="preserve">
          <source>To create a new component manually:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2bf7fb2d3e94211afcd57a10f20c4c45cfe0d7d" translate="yes" xml:space="preserve">
          <source>To create a new workspace and an initial app project:</source>
          <target state="translated">要创建一个新的工作区和一个初始应用项目。</target>
        </trans-unit>
        <trans-unit id="5bd4653200aaca61df950cdd4eca5d949291ae56" translate="yes" xml:space="preserve">
          <source>To create a new workspace and application using the strict mode, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f144d38768edd99f2d27499d71edd950a08584a3" translate="yes" xml:space="preserve">
          <source>To create a new workspace and initial starter app:</source>
          <target state="translated">要创建一个新的工作区和初始启动程序。</target>
        </trans-unit>
        <trans-unit id="1aa719950868f1d4fa3ac83a344dcfa8c80b6018" translate="yes" xml:space="preserve">
          <source>To create a reusable animation, use the &lt;a href=&quot;../api/animations/animation&quot;&gt;&lt;code&gt;animation()&lt;/code&gt;&lt;/a&gt; method to define an animation in a separate &lt;code&gt;.ts&lt;/code&gt; file and declare this animation definition as a &lt;code&gt;const&lt;/code&gt; export variable. You can then import and reuse this animation in any of your app components using the &lt;a href=&quot;../api/animations/useanimation&quot;&gt;&lt;code&gt;useAnimation()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">若要创建可重用的动画，请使用&lt;a href=&quot;../api/animations/animation&quot;&gt; &lt;code&gt;animation()&lt;/code&gt; &lt;/a&gt;方法在单独的 &lt;code&gt;.ts&lt;/code&gt; 文件中定义动画，并将此动画定义声明为 &lt;code&gt;const&lt;/code&gt; 导出变量。然后，您可以使用&lt;a href=&quot;../api/animations/useanimation&quot;&gt; &lt;code&gt;useAnimation()&lt;/code&gt; &lt;/a&gt; API 在任何应用程序组件中导入和重用此动画。</target>
        </trans-unit>
        <trans-unit id="75d0e30751a493533457e112686e8dcb02d5af60" translate="yes" xml:space="preserve">
          <source>To create a single class binding, use the prefix &lt;code&gt;class&lt;/code&gt; followed by a dot and the name of the CSS class&amp;mdash;for example, &lt;code&gt;[class.sale]=&quot;onSale&quot;&lt;/code&gt;. Angular adds the class when the bound expression, &lt;code&gt;onSale&lt;/code&gt; is truthy, and it removes the class when the expression is falsy&amp;mdash;with the exception of &lt;code&gt;undefined&lt;/code&gt;. See &lt;a href=&quot;style-precedence#styling-delegation&quot;&gt;styling delegation&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654531e7f01f2a99237d0195284ddb4817aa8ab0" translate="yes" xml:space="preserve">
          <source>To create a single style binding, use the prefix &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; followed by a dot and the name of the CSS style property&amp;mdash;for example, &lt;code&gt;[style.width]=&quot;width&quot;&lt;/code&gt;. Angular sets the property to the value of the bound expression, which is usually a string. Optionally, you can add a unit extension like &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt;, which requires a number type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ae33325b206d2fd3cdedfd24a2c41e5f192288" translate="yes" xml:space="preserve">
          <source>To create the cart page, you begin by following the same steps you did to create the product details component and to set up routing for the new component.</source>
          <target state="translated">要创建购物车页面,首先要按照创建产品详情组件和为新组件设置路由的相同步骤进行。</target>
        </trans-unit>
        <trans-unit id="090dfe1a5c79f77a9be595e199d5fab1f453c8d6" translate="yes" xml:space="preserve">
          <source>To create the cart view, begin by following the same steps you did to create the product details component and configure routing for the new component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594ec3ddcc19c25f73ea897495b521aecaf86016" translate="yes" xml:space="preserve">
          <source>To create the server-side app module, &lt;code&gt;app.server.module.ts&lt;/code&gt;, run the following CLI command.</source>
          <target state="translated">要创建服务器端应用程序模块 &lt;code&gt;app.server.module.ts&lt;/code&gt; ，请运行以下CLI命令。</target>
        </trans-unit>
        <trans-unit id="a1d7d554f2d72ca28c730058079d294822be35c1" translate="yes" xml:space="preserve">
          <source>To create, build, and serve a new, basic Angular project on a development server, go to the parent directory of your new workspace use the following commands:</source>
          <target state="translated">要在开发服务器上创建、构建和服务一个新的、基本的Angular项目,进入新工作区的父目录使用以下命令。</target>
        </trans-unit>
        <trans-unit id="65acbd001432e22b30e796e7e61e3dfe440088a8" translate="yes" xml:space="preserve">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. &lt;code&gt;compareWith&lt;/code&gt; takes a &lt;strong&gt;function&lt;/strong&gt; which has two arguments: &lt;code&gt;option1&lt;/code&gt; and &lt;code&gt;option2&lt;/code&gt;. If &lt;code&gt;compareWith&lt;/code&gt; is given, Angular selects option by the return value of the function.</source>
          <target state="translated">要自定义默认的选项比较算法， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 支持 &lt;code&gt;compareWith&lt;/code&gt; 输入。 &lt;code&gt;compareWith&lt;/code&gt; 需要一个&lt;strong&gt;函数&lt;/strong&gt;有两个参数： &lt;code&gt;option1&lt;/code&gt; 和 &lt;code&gt;option2&lt;/code&gt; 。如果给出 &lt;code&gt;compareWith&lt;/code&gt; ，Angular会根据函数的返回值选择选项。</target>
        </trans-unit>
        <trans-unit id="c9057dec56a92572abc6bcb328cdc254209b6283" translate="yes" xml:space="preserve">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. See the &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; for usage.</source>
          <target state="translated">要自定义默认的选项比较算法， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 支持 &lt;code&gt;compareWith&lt;/code&gt; 输入。有关用法，请参见 &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12614d5a0a4f9980916f0bd6829fb9e94aeee5ca" translate="yes" xml:space="preserve">
          <source>To deactivate the service worker, remove or rename the &lt;code&gt;ngsw.json&lt;/code&gt; file. When the service worker's request for &lt;code&gt;ngsw.json&lt;/code&gt; returns a &lt;code&gt;404&lt;/code&gt;, then the service worker removes all of its caches and de-registers itself, essentially self-destructing.</source>
          <target state="translated">要停用服务工作者，请删除或重命名 &lt;code&gt;ngsw.json&lt;/code&gt; 文件。当服务人员对 &lt;code&gt;ngsw.json&lt;/code&gt; 的请求返回 &lt;code&gt;404&lt;/code&gt; 时，服务人员将删除其所有缓存并自行注销，这实际上是自毁的。</target>
        </trans-unit>
        <trans-unit id="9108d6f3d8bba0bf373979ce840c2d85dbc55392" translate="yes" xml:space="preserve">
          <source>To declare the styles for a component in a separate file, add a &lt;code&gt;stylesUrls&lt;/code&gt; property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e38d849c5796bd6398c2761b41e463c7976d04" translate="yes" xml:space="preserve">
          <source>To define a class as a service in Angular, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to provide the metadata that allows Angular to inject it into a component as a &lt;em&gt;dependency&lt;/em&gt;. Similarly, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to indicate that a component or other class (such as another service, a pipe, or an NgModule) &lt;em&gt;has&lt;/em&gt; a dependency.</source>
          <target state="translated">要将类定义为Angular中的服务，请使用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰器提供允许Angular将其作为&lt;em&gt;依赖项&lt;/em&gt;注入组件的元数据。类似地，使用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰器指示组件或其他类（例如，另一个服务，管道或NgModule）&lt;em&gt;具有&lt;/em&gt;依赖项。</target>
        </trans-unit>
        <trans-unit id="ad6c984d27957b7c6989d1d288e104c9c138aa30" translate="yes" xml:space="preserve">
          <source>To define a directive, mark the class with the decorator and provide metadata.</source>
          <target state="translated">要定义一个指令,请用装饰符标记该类并提供元数据。</target>
        </trans-unit>
        <trans-unit id="02af62d3d61d2c5e19973a6b482fa1173a786ab6" translate="yes" xml:space="preserve">
          <source>To define a dynamic form, take the following steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42033ffe1eecc4e2eee5697858df411d08f9c66" translate="yes" xml:space="preserve">
          <source>To define a template as an external file, add a &lt;code&gt;templateUrl&lt;/code&gt; property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52964b4b5ce54e1050f8c2ee29cd57e64a45fb23" translate="yes" xml:space="preserve">
          <source>To define a template within the component, add a &lt;code&gt;template&lt;/code&gt; property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator that contains the HTML you want to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7461bcf852b17248b69621e8549d73cd98177d21" translate="yes" xml:space="preserve">
          <source>To define and show an error message when appropriate, take the following steps.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
