<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="faa17f4e480d1c38b9b673c33c3726b0386461a6" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;component&lt;/code&gt;, the &lt;code&gt;data&lt;/code&gt; property of each route defines the key animation-specific configuration associated with a route. The &lt;code&gt;data&lt;/code&gt; property value is passed into &lt;code&gt;AppComponent&lt;/code&gt; when the route changes. You can also pass additional data in route config that is consumed within the animation. The data property value has to match the transitions defined in the &lt;code&gt;routeAnimation&lt;/code&gt; trigger, which we'll define later.</source>
          <target state="translated">除了 &lt;code&gt;path&lt;/code&gt; 和 &lt;code&gt;component&lt;/code&gt; 之外，每个路径的 &lt;code&gt;data&lt;/code&gt; 属性还定义了与路径关联的特定于关键动画的配置。该 &lt;code&gt;data&lt;/code&gt; 属性值被传递到 &lt;code&gt;AppComponent&lt;/code&gt; 当路由变化。您还可以在动画中使用的路由配置中传递其他数据。数据属性值必须匹配在 &lt;code&gt;routeAnimation&lt;/code&gt; 触发器中定义的过渡，我们将在稍后定义。</target>
        </trans-unit>
        <trans-unit id="518ce8e445924106f3aaaa4e7714894c154607fc" translate="yes" xml:space="preserve">
          <source>In addition to build optimizations, Angular also has a runtime production mode. Angular apps run in development mode by default, as you can see by the following message on the browser console:</source>
          <target state="translated">除了构建优化,Angular还有一个运行时生产模式。Angular应用默认运行在开发模式下,你可以从浏览器控制台的以下消息中看到。</target>
        </trans-unit>
        <trans-unit id="92e4dba02fc399ceabf0edd421996ac182385627" translate="yes" xml:space="preserve">
          <source>In addition to components, there are two other kinds of directives: &lt;em&gt;structural&lt;/em&gt; and &lt;em&gt;attribute&lt;/em&gt;. Angular defines a number of directives of both kinds, and you can define your own using the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">除了组件之外，还有两种其他类型的指令：&lt;em&gt;structure&lt;/em&gt;和&lt;em&gt;attribute&lt;/em&gt;。Angular定义了两种指令，您可以使用 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; 装饰器来定义自己的指令。</target>
        </trans-unit>
        <trans-unit id="c4b67e633224044ac7bd833ae2a699b14035241e" translate="yes" xml:space="preserve">
          <source>In addition to containing or pointing to the template, the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata configures, for example, how the component can be referenced in HTML and what services it requires.</source>
          <target state="translated">除了包含或指向模板之外， &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 元数据还配置例如如何在HTML中引用该组件以及它需要什么服务。</target>
        </trans-unit>
        <trans-unit id="039608b3a3dac9dddfb10f624ea1dc12072178c7" translate="yes" xml:space="preserve">
          <source>In addition to fetching data from the server, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; supports mutating requests, that is, sending data to the server with other HTTP methods such as PUT, POST, and DELETE.</source>
          <target state="translated">除了从服务器获取数据之外， &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 还支持变异请求，即使用其他HTTP方法（例如PUT，POST和DELETE）将数据发送到服务器。</target>
        </trans-unit>
        <trans-unit id="b29a9483bfd852b5d32af6d3606da4cd76cef0c6" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/testrequest#error&quot;&gt;error()&lt;/a&gt;&lt;/code&gt; handler that you provide on subscription, RxJS provides the &lt;code&gt;catchError&lt;/code&gt; operator that lets you handle known errors in the observable recipe.</source>
          <target state="translated">除了您在订阅中提供的 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/testrequest#error&quot;&gt;error()&lt;/a&gt;&lt;/code&gt; 处理程序之外，RxJS还提供了 &lt;code&gt;catchError&lt;/code&gt; 运算符，该运算符使您可以处理可观察配方中的已知错误。</target>
        </trans-unit>
        <trans-unit id="c1e985521f9a2f7cb86a15d64a93de26e6cd3294" translate="yes" xml:space="preserve">
          <source>In addition to the name and description, each schematic has a &lt;code&gt;factory&lt;/code&gt; property that identifies the schematic&amp;rsquo;s entry point. In the example, you invoke the schematic's defined functionality by calling the &lt;code&gt;helloWorld()&lt;/code&gt; function in the main file, &lt;code&gt;hello-world/index.ts&lt;/code&gt;.</source>
          <target state="translated">除了名称和描述之外，每个原理图还具有用于标识原理图入口点的 &lt;code&gt;factory&lt;/code&gt; 属性。在示例中，您可以通过调用主文件 &lt;code&gt;hello-world/index.ts&lt;/code&gt; 中的 &lt;code&gt;helloWorld()&lt;/code&gt; 函数来调用原理图的已定义功能。</target>
        </trans-unit>
        <trans-unit id="712e3fe7e7a305ad3e3b3654a51a48abbd95e90e" translate="yes" xml:space="preserve">
          <source>In addition to upgrading AngularJS dependencies, you can also &lt;em&gt;downgrade&lt;/em&gt; Angular dependencies, so that you can use them from AngularJS. This can be useful when you start migrating services to Angular or creating new services in Angular while retaining components written in AngularJS.</source>
          <target state="translated">除了升级AngularJS依赖关系，您还可以&lt;em&gt;降级&lt;/em&gt; Angular依赖关系，以便可以从AngularJS使用它们。当您开始将服务迁移到Angular或在Angular中创建新服务，同时保留用AngularJS编写的组件时，这很有用。</target>
        </trans-unit>
        <trans-unit id="8190e8a3e053b6c71a891443caba3b79821b866e" translate="yes" xml:space="preserve">
          <source>In addition, this pattern mixes template-driven and reactive forms strategies, which we generally don't recommend because it doesn't take advantage of the full benefits of either strategy. Setting the value in the template violates the template-agnostic principles behind reactive forms, whereas adding a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; layer in the class removes the convenience of defining forms in the template.</source>
          <target state="translated">此外，此模式混合了模板驱动和响应式表单策略，我们通常不建议这样做，因为它没有利用这两种策略的全部优势。在模板中设置值违反了反应性表单背后的与模板无关的原则，而在类中添加 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 层则消除了在模板中定义表单的便利。</target>
        </trans-unit>
        <trans-unit id="af0291fe53a38a32a912d25b30993b403d4fc87a" translate="yes" xml:space="preserve">
          <source>In alignment with the versioning scheme described above, we commit to support the following update paths:</source>
          <target state="translated">为了与上述版本方案保持一致,我们承诺支持以下更新路径。</target>
        </trans-unit>
        <trans-unit id="c0ecac3c059187a5fafe89e15d014bf2e83d301b" translate="yes" xml:space="preserve">
          <source>In an &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; parameter is the next interceptor in the chain.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; 中， &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; 参数是链中的下一个拦截器。</target>
        </trans-unit>
        <trans-unit id="d07e81908343ee4b3c3cdfd03defc53493e77ee0" translate="yes" xml:space="preserve">
          <source>In an Angular app, NgModules and JavaScript modules work together.</source>
          <target state="translated">在Angular应用中,NgModules和JavaScript模块一起工作。</target>
        </trans-unit>
        <trans-unit id="2995d3f69c1ef04572631628ef95d9cf0e177e02" translate="yes" xml:space="preserve">
          <source>In an AngularJS application you have a root AngularJS module, which will also be used to bootstrap the AngularJS application.</source>
          <target state="translated">在一个AngularJS应用中,你有一个根AngularJS模块,它也将被用来引导AngularJS应用。</target>
        </trans-unit>
        <trans-unit id="186700bd8ef16b21e5cb3f12259a7cc3c66151a7" translate="yes" xml:space="preserve">
          <source>In an event binding, Angular sets up an event handler for the target event.</source>
          <target state="translated">在事件绑定中,Angular为目标事件设置了一个事件处理程序。</target>
        </trans-unit>
        <trans-unit id="442397b093d27259b79b2a4c113aeacd3de8b1b6" translate="yes" xml:space="preserve">
          <source>In apps built with Angular versions prior to 6.0, services are registered NgModule &lt;code&gt;providers&lt;/code&gt; arrays as follows:</source>
          <target state="translated">在使用6.0之前的Angular版本构建的应用程序中，服务注册为NgModule &lt;code&gt;providers&lt;/code&gt; 数组，如下所示：</target>
        </trans-unit>
        <trans-unit id="36a5631d9ccd89307b737000baab048281f5974e" translate="yes" xml:space="preserve">
          <source>In both AngularJS and Angular, modules help you organize your application into cohesive blocks of functionality.</source>
          <target state="translated">在AngularJS和Angular中,模块帮助你把你的应用组织成凝聚的功能块。</target>
        </trans-unit>
        <trans-unit id="f57cddaa2037c3cca33aee4543b80713320351a7" translate="yes" xml:space="preserve">
          <source>In both cases, the parenthetical annotation provides the error that caused the service worker to enter the degraded state.</source>
          <target state="translated">在这两种情况下,括号中的注释提供了导致服务工作者进入退化状态的错误。</target>
        </trans-unit>
        <trans-unit id="aab616ac7bc0cc1d96378c8b4324b09775cc128a" translate="yes" xml:space="preserve">
          <source>In both components you're relying on Angular's &lt;strong&gt;formGroup&lt;/strong&gt; to connect the template HTML to the underlying control objects, populated from the question model with display and validation rules.</source>
          <target state="translated">在这两个组件中，您都依赖于Angular的&lt;strong&gt;formGroup&lt;/strong&gt;将模板HTML连接到基础控件对象，这些控件对象是由具有显示和验证规则的问题模型填充的。</target>
        </trans-unit>
        <trans-unit id="9d09b6e2a4873e3a91fe8b87647db6546a2185d7" translate="yes" xml:space="preserve">
          <source>In browsers that support Custom Elements natively, the specification requires developers use ES2015 classes to define Custom Elements - developers can opt-in to this by setting the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;: &quot;es2015&quot;&lt;/code&gt; property in their project's &lt;code&gt;tsconfig.json&lt;/code&gt;. As Custom Element and ES2015 support may not be available in all browsers, developers can instead choose to use a polyfill to support older browsers and ES5 code.</source>
          <target state="translated">在本机支持Custom Elements的浏览器中，该规范要求开发人员使用ES2015类来定义Custom Elements-开发人员可以通过在其项目的 &lt;code&gt;tsconfig.json&lt;/code&gt; 中设置 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;: &quot;es2015&quot;&lt;/code&gt; 属性来选择加入。由于可能并非在所有浏览器中都提供Custom Element和ES2015支持，因此开发人员可以选择使用polyfill支持较旧的浏览器和ES5代码。</target>
        </trans-unit>
        <trans-unit id="16c543a5f2150ce78c5c42b4020166d1185b5263" translate="yes" xml:space="preserve">
          <source>In cases like this you can use a &lt;em&gt;factory provider&lt;/em&gt;. Factory providers can also be useful when creating an instance of a dependency from a third-party library that wasn't designed to work with DI.</source>
          <target state="translated">在这种情况下，您可以使用&lt;em&gt;工厂提供程序&lt;/em&gt;。当从不是设计用于DI的第三方库中创建依赖项的实例时，工厂提供程序也很有用。</target>
        </trans-unit>
        <trans-unit id="faae4cf3fede383457b93e931cc0ff31f3e03fdd" translate="yes" xml:space="preserve">
          <source>In certain cases, when you apply backticks around a term, it may auto-link to the API documentation. If you do not intend the term to be a link, use the following syntax:</source>
          <target state="translated">在某些情况下,当你在术语周围使用反标时,它可能会自动链接到API文档。如果您不希望该术语成为链接,请使用以下语法。</target>
        </trans-unit>
        <trans-unit id="882fb17df5830c3e1bef3d000bb9f4170d23d509" translate="yes" xml:space="preserve">
          <source>In contrast to the non-AngularJS version &lt;code&gt;location.host&lt;/code&gt; which returns &lt;code&gt;hostname:port&lt;/code&gt;, this returns the &lt;code&gt;hostname&lt;/code&gt; portion only.</source>
          <target state="translated">与非AngularJS版本的 &lt;code&gt;location.host&lt;/code&gt; 返回 &lt;code&gt;hostname:port&lt;/code&gt; 相比，这仅返回 &lt;code&gt;hostname&lt;/code&gt; 部分。</target>
        </trans-unit>
        <trans-unit id="87ccfab30a30e01a9400a0f86574039dd8079e53" translate="yes" xml:space="preserve">
          <source>In data binding, you declare the relationship between an HTML widget and a data source and let the framework handle the details. Data binding is an alternative to manually pushing application data values into HTML, attaching event listeners, pulling changed values from the screen, and updating application data values.</source>
          <target state="translated">在数据绑定中,您可以声明一个 HTML 小组件和一个数据源之间的关系,并让框架处理细节。数据绑定是一种替代方法,可以将应用程序的数据值手动推送到HTML中,附加事件监听器,从屏幕中提取更改的值,并更新应用程序的数据值。</target>
        </trans-unit>
        <trans-unit id="818ea6e396a842959f81b286c28f47f668e4c077" translate="yes" xml:space="preserve">
          <source>In developing a form, it's important to create a data-entry experience that guides the user efficiently and effectively through the workflow.</source>
          <target state="translated">在开发表单的过程中,重要的是要创建一个数据录入体验,引导用户高效地完成工作流程。</target>
        </trans-unit>
        <trans-unit id="a083380d8f26ba15bb7df0f10b038ec65342e2e3" translate="yes" xml:space="preserve">
          <source>In development mode, &lt;code&gt;&lt;a href=&quot;applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; also performs a second change detection cycle to ensure that no further changes are detected. If additional changes are picked up during this second cycle, bindings in the app have side-effects that cannot be resolved in a single change detection pass. In this case, Angular throws an error, since an Angular application can only have one change detection pass during which all change detection must complete.</source>
          <target state="translated">在开发模式下， &lt;code&gt;&lt;a href=&quot;applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 还执行第二个更改检测周期，以确保没有检测到其他更改。如果在第二个周期中获取了其他更改，则应用程序中的绑定具有副作用，这些副作用无法通过一次更改检测过程解决。在这种情况下，Angular会引发错误，因为Angular应用程序只能执行一次更改检测遍历，在此过程中必须完成所有更改检测。</target>
        </trans-unit>
        <trans-unit id="8edaa0e56f5e0453fa057164fddb4d07e168ba3e" translate="yes" xml:space="preserve">
          <source>In development, you typically start the server in the folder that holds &lt;code&gt;index.html&lt;/code&gt;. That's the root folder and you'd add &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; near the top of &lt;code&gt;index.html&lt;/code&gt; because &lt;code&gt;/&lt;/code&gt; is the root of the app.</source>
          <target state="translated">在开发中，通常会在保存 &lt;code&gt;index.html&lt;/code&gt; 的文件夹中启动服务器。这是根文件夹，您将在 &lt;code&gt;index.html&lt;/code&gt; 顶部附近添加 &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; ，因为 &lt;code&gt;/&lt;/code&gt; 是应用程序的根目录。</target>
        </trans-unit>
        <trans-unit id="d5e95ebfc9910d4c5b6ab6e521556a2778701651" translate="yes" xml:space="preserve">
          <source>In either case, a &lt;code&gt;next&lt;/code&gt; handler is required. The &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; handlers are optional.</source>
          <target state="translated">无论哪种情况，都需要 &lt;code&gt;next&lt;/code&gt; 处理程序。该 &lt;code&gt;error&lt;/code&gt; 和 &lt;code&gt;complete&lt;/code&gt; 处理程序是可选的。</target>
        </trans-unit>
        <trans-unit id="3ec537881a886f5726ad8dd47b7a8886c8935dfb" translate="yes" xml:space="preserve">
          <source>In either style, the template data bindings have the same access to the component's properties.</source>
          <target state="translated">在任何一种样式中,模板数据绑定对组件的属性都有相同的访问权限。</target>
        </trans-unit>
        <trans-unit id="0009c17cd723f367233376c40644dec66747da7a" translate="yes" xml:space="preserve">
          <source>In fact, each &lt;code&gt;subscribe()&lt;/code&gt; initiates a separate, independent execution of the observable. Subscribing twice results in two HTTP requests.</source>
          <target state="translated">实际上，每个 &lt;code&gt;subscribe()&lt;/code&gt; 启动可观察对象的单独，独立执行。订阅两次将导致两个HTTP请求。</target>
        </trans-unit>
        <trans-unit id="5809f58a35d5011cd952f322fe5b7ab8b70d3f4d" translate="yes" xml:space="preserve">
          <source>In fact, if you try to declare it, Angular will throw an error because &lt;code&gt;HeroDetailComponent&lt;/code&gt; is declared in both the &lt;code&gt;HeroModule&lt;/code&gt; and the &lt;code&gt;DynamicTestModule&lt;/code&gt; created by the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">事实上，如果你试图把它声明，角会因为抛出一个错误 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 在双方宣布 &lt;code&gt;HeroModule&lt;/code&gt; 和 &lt;code&gt;DynamicTestModule&lt;/code&gt; 由创建 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec88266d9e04212fedf424f84a94840a7da988a9" translate="yes" xml:space="preserve">
          <source>In fact, many libraries declare and export components you'll never use. For example, a material design library will export all components because it doesn&amp;rsquo;t know which ones you will use. However, it is unlikely that you will use them all. For the ones you don't reference, the tree shaker drops these components from the final code package.</source>
          <target state="translated">实际上，许多库声明并导出了您永远不会使用的组件。例如，材料设计库将导出所有组件，因为它不知道您将使用哪个组件。但是，您不太可能会全部使用它们。对于您不参考的组件，摇树器会将这些组件从最终代码包中删除。</target>
        </trans-unit>
        <trans-unit id="2d17b7b9c7ecdf9e0a0cf8fcb801a644d503a501" translate="yes" xml:space="preserve">
          <source>In fact, many libraries declare and export components you'll never use. If you don't reference them, the tree shaker drops these components from the final code package.</source>
          <target state="translated">事实上,许多库都声明并导出了你永远不会使用的组件。如果你不引用它们,树形摇杆就会从最终的代码包中放弃这些组件。</target>
        </trans-unit>
        <trans-unit id="547d2a453086180e737f6fdfa0676b0213dec7f1" translate="yes" xml:space="preserve">
          <source>In general, a module collects a block of code dedicated to a single purpose. Angular uses standard JavaScript modules and also defines an Angular module, &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常，模块收集专用于单个用途的代码块。Angular使用标准的JavaScript模块，并且还定义了一个Angular模块 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d77226bb13d928e95fd3b19205296b9adedfdf9" translate="yes" xml:space="preserve">
          <source>In general, a test should end with no queued tasks. When pending timer tasks are expected, call &lt;code&gt;&lt;a href=&quot;../api/core/testing/discardperiodictasks&quot;&gt;discardPeriodicTasks&lt;/a&gt;&lt;/code&gt; to flush the &lt;em&gt;task&lt;/em&gt; queue and avoid the error.</source>
          <target state="translated">通常，测试应在没有排队任务的情况下结束。当需要等待暂挂的计时器任务时，请调用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/discardperiodictasks&quot;&gt;discardPeriodicTasks&lt;/a&gt;&lt;/code&gt; 刷新&lt;em&gt;任务&lt;/em&gt;队列并避免错误。</target>
        </trans-unit>
        <trans-unit id="7f269edbebd5dbd35be8d8d21f57ea38f14f0483" translate="yes" xml:space="preserve">
          <source>In general, a test should wait for micro-tasks to finish. When pending microtasks are expected, call &lt;code&gt;&lt;a href=&quot;../api/core/testing/flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;&lt;/code&gt; to flush the &lt;em&gt;micro-task&lt;/em&gt; queue and avoid the error.</source>
          <target state="translated">通常，测试应等待微任务完成。当需要等待的&lt;em&gt;微任务时&lt;/em&gt;，请调用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/flushmicrotasks&quot;&gt;flushMicrotasks&lt;/a&gt;&lt;/code&gt; 刷新&lt;em&gt;微任务&lt;/em&gt;队列并避免错误。</target>
        </trans-unit>
        <trans-unit id="86a59b8f427eaf262041822dcf531982a1f03fc3" translate="yes" xml:space="preserve">
          <source>In general, an observable &lt;em&gt;can&lt;/em&gt; return multiple values over time. An observable from &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; always emits a single value and then completes, never to emit again.</source>
          <target state="translated">通常，可观察对象&lt;em&gt;可以&lt;/em&gt;随时间返回多个值。来自 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的可观察对象总是发出单个值，然后完成，再也不会发出。</target>
        </trans-unit>
        <trans-unit id="5e2d4d2d17239584190561155953d01ace2b72bc" translate="yes" xml:space="preserve">
          <source>In general, if your builder is watching an external event, you should separate your run into three phases.</source>
          <target state="translated">一般来说,如果你的建设者正在观察一个外部事件,你应该把你的运行分成三个阶段。</target>
        </trans-unit>
        <trans-unit id="aec22f95ac1b949b2998ae911c74abd01d2c15c8" translate="yes" xml:space="preserve">
          <source>In general, prefer a &lt;em&gt;required route parameter&lt;/em&gt; when the value is mandatory (for example, if necessary to distinguish one route path from another); prefer an &lt;em&gt;optional parameter&lt;/em&gt; when the value is optional, complex, and/or multivariate.</source>
          <target state="translated">通常，当该值是必需值时（例如，如果有必要将一个路由路径与另一个路由路径区分开），则首选&lt;em&gt;必需的路由参数&lt;/em&gt;。当值是可选，复杂和/或多变量时，建议使用&lt;em&gt;可选参数&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="438e5f838247227524217c35d94e78235058f28b" translate="yes" xml:space="preserve">
          <source>In general, the options for which you can configure defaults correspond to the command options listed in the &lt;a href=&quot;cli&quot;&gt;CLI reference page&lt;/a&gt; for each command. Note that all options in the configuration file must use &lt;a href=&quot;glossary#case-conventions&quot;&gt;camelCase&lt;/a&gt;, rather than dash-case.</source>
          <target state="translated">通常，可以为其配置默认值的选项与&lt;a href=&quot;cli&quot;&gt;CLI参考页中&lt;/a&gt;针对每个命令列出的命令选项相对应。请注意，配置文件中的所有选项都必须使用&lt;a href=&quot;glossary#case-conventions&quot;&gt;camelCase&lt;/a&gt;，而不是破折号。</target>
        </trans-unit>
        <trans-unit id="e77fd6b5b523bff7e8b440e29979790902cc0d10" translate="yes" xml:space="preserve">
          <source>In general, you can expect the following release cycle:</source>
          <target state="translated">一般来说,你可以期待以下的发布周期。</target>
        </trans-unit>
        <trans-unit id="ec28d2e4f5ad480a00ce0f05033084610af0c773" translate="yes" xml:space="preserve">
          <source>In its constructor the class expects to get the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service. It will be injected to it and it is stored as a private field. The service is then used in the two instance methods, one of which loads the list of all phones, and the other loads the details of a specified phone:</source>
          <target state="translated">该类希望在其构造函数中获取 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 服务。它将注入到它，并将其存储为私有字段。然后，在两种实例方法中使用该服务，其中一种加载所有电话的列表，另一种加载指定电话的详细信息：</target>
        </trans-unit>
        <trans-unit id="66cd232fa17c1dc9aef0e27428be497a6d102fd7" translate="yes" xml:space="preserve">
          <source>In javascript, only the components specified will be respected (not the ordering, punctuations, ...) and details of the formatting will be dependent on the locale.</source>
          <target state="translated">在javascript中,只有指定的组件才会被尊重(不包括顺序、标点符号......),格式化的细节将取决于当地的语言。</target>
        </trans-unit>
        <trans-unit id="0d3338acd7b1b7ae166fab204760470f14dd0bf5" translate="yes" xml:space="preserve">
          <source>In keeping with the &lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;&lt;em&gt;Separation of Concerns&lt;/em&gt; principle&lt;/a&gt;, changes to the &lt;em&gt;Crisis Center&lt;/em&gt; won't affect the &lt;code&gt;AppModule&lt;/code&gt; or any other feature's component.</source>
          <target state="translated">与&lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;&lt;em&gt;关注点分离&lt;/em&gt;原则&lt;/a&gt;保持一致，对&lt;em&gt;危机中心的&lt;/em&gt;更改不会影响 &lt;code&gt;AppModule&lt;/code&gt; 或任何其他功能的组件。</target>
        </trans-unit>
        <trans-unit id="e479f9e9a5e9f21bc571985b868b0e91139c16e1" translate="yes" xml:space="preserve">
          <source>In many cases, a few extra change detection runs may not matter much. However, on larger or change-detection-heavy apps they can have a noticeable impact. By giving you more fine-grained control over the change detection propagation, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; allows you to achieve better performance for your hybrid apps.</source>
          <target state="translated">在许多情况下，几次额外的更改检测运行可能并没有太大关系。但是，在较大或更改检测量较大的应用程序上，它们可能会产生明显的影响。通过为更改检测传播提供更细粒度的控制， &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 使您可以为混合应用程序实现更好的性能。</target>
        </trans-unit>
        <trans-unit id="a95cdd0f6492c72732a9c49a995b576fef9af845" translate="yes" xml:space="preserve">
          <source>In modern JavaScript, every file is a module (see the &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;Modules&lt;/a&gt; page of the Exploring ES6 website). Within each file you write an &lt;code&gt;export&lt;/code&gt; statement to make parts of the module public.</source>
          <target state="translated">在现代JavaScript中，每个文件都是一个模块（请参阅Exploring ES6网站的&amp;ldquo; &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;模块&amp;rdquo;&lt;/a&gt;页面）。在每个文件中，编写一个 &lt;code&gt;export&lt;/code&gt; 语句以公开模块的各个部分。</target>
        </trans-unit>
        <trans-unit id="6b3a1936e2bb54b1733be75ba49ac81b9f04f42d" translate="yes" xml:space="preserve">
          <source>In most cases, Angular sets the reference variable's value to the element on which it is declared. In the previous example, &lt;code&gt;phone&lt;/code&gt; refers to the phone number &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. The button's click handler passes the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; value to the component's &lt;code&gt;callPhone()&lt;/code&gt; method.</source>
          <target state="translated">在大多数情况下，Angular会将引用变量的值设置为声明该变量的元素。在上一个示例中， &lt;code&gt;phone&lt;/code&gt; 指的是电话号码 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 。按钮的单击处理程序将 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 值传递到组件的 &lt;code&gt;callPhone()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="10ed2cfffaf26fc3e0aa3455fa0236693ac809c8" translate="yes" xml:space="preserve">
          <source>In most cases, the target name is the name of a property, even when it appears to be the name of an attribute. So in this case, &lt;code&gt;src&lt;/code&gt; is the name of the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element property.</source>
          <target state="translated">在大多数情况下，目标名称是属性的名称，即使它似乎是属性的名称也是如此。因此，在这种情况下， &lt;code&gt;src&lt;/code&gt; 是 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 元素属性的名称。</target>
        </trans-unit>
        <trans-unit id="721c8146db87ee4117c032bdef6f8eeff7ecb43e" translate="yes" xml:space="preserve">
          <source>In most cases, though, the changes made locally in a particular component are of no interest to the rest of the app. For example, if the user clicks a button that submits a form, the component usually handles the result of this action. That being said, there &lt;em&gt;are&lt;/em&gt; cases where you want to propagate changes to some other part of the app that may be controlled by the other framework. In such cases, you are responsible for notifying the interested parties by manually triggering change detection.</source>
          <target state="translated">但是，在大多数情况下，在特定组件中本地进行的更改对于应用程序的其余部分没有意义。例如，如果用户单击提交表单的按钮，则该组件通常会处理此操作的结果。就是说，在&lt;em&gt;某些&lt;/em&gt;情况下，您希望将更改传播到应用程序的其他部分，而该部分可能由其他框架控制。在这种情况下，您有责任通过手动触发变更检测来通知相关方。</target>
        </trans-unit>
        <trans-unit id="769178628d41a1ca0bba1b67cab81af3ded8c26b" translate="yes" xml:space="preserve">
          <source>In most environments where both Angular and AngularJS are used to render the application, both frameworks are loaded in the initial bundle being sent to the client. This results in both increased bundle size and possible reduced performance.</source>
          <target state="translated">在大多数同时使用Angular和AngularJS来渲染应用程序的环境中,这两个框架都会在发送给客户端的初始bundle中加载。这导致捆绑包大小增加,并可能降低性能。</target>
        </trans-unit>
        <trans-unit id="ae2161128d8ce5a1609bf9b304c9b1e1e65fa23d" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;HeroListComponent&lt;/code&gt; to get heroes from &lt;code&gt;HeroService&lt;/code&gt;, it needs to ask for &lt;code&gt;HeroService&lt;/code&gt; to be injected, rather than creating its own &lt;code&gt;HeroService&lt;/code&gt; instance with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">为了使 &lt;code&gt;HeroListComponent&lt;/code&gt; 从 &lt;code&gt;HeroService&lt;/code&gt; 获得英雄，它需要请求 &lt;code&gt;HeroService&lt;/code&gt; 注入，而不是使用 &lt;code&gt;new&lt;/code&gt; 创建自己的 &lt;code&gt;HeroService&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="1486ae81ea2e7bfb9b8495d2847f181583dc9fa5" translate="yes" xml:space="preserve">
          <source>In order for service workers to be registered, the app must be accessed over HTTPS, not HTTP. Browsers ignore service workers on pages that are served over an insecure connection. The reason is that service workers are quite powerful, so extra care needs to be taken to ensure the service worker script has not been tampered with.</source>
          <target state="translated">为了让服务工作者被注册,应用程序必须通过HTTPS而不是HTTP进行访问。浏览器会忽略通过不安全连接服务的页面上的服务工。原因是服务工的功能相当强大,所以需要格外小心,确保服务工脚本没有被篡改。</target>
        </trans-unit>
        <trans-unit id="55fc82f93a9cf7270fcc2c4a6b145c2d1b0c0e64" translate="yes" xml:space="preserve">
          <source>In order to affect this browser's &lt;code&gt;history.state&lt;/code&gt; entry, the &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; parameter can be passed. This must be an object because the router will add the &lt;code&gt;navigationId&lt;/code&gt; property to this object before creating the new history item.</source>
          <target state="translated">为了影响此浏览器的 &lt;code&gt;history.state&lt;/code&gt; 条目，可以传递 &lt;code&gt;&lt;a href=&quot;../animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 参数。这必须是一个对象，因为路由器将在创建新的历史记录项之前将 &lt;code&gt;navigationId&lt;/code&gt; 属性添加到该对象。</target>
        </trans-unit>
        <trans-unit id="a72bcb56b58b81db6f4bbe1304ae9715f5beb78e" translate="yes" xml:space="preserve">
          <source>In order to avoid negatively affecting the initial rendering, &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; will by default wait for the app to stabilize, before registering the ServiceWorker script. Constantly polling for updates, e.g. with &lt;code&gt;interval()&lt;/code&gt;, will prevent the app from stabilizing and the ServiceWorker script will never be registered with the browser.</source>
          <target state="translated">为了避免对初始呈现产生负面影响，默认情况下， &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 将在注册ServiceWorker脚本之前等待应用稳定下来。不断轮询更新，例如使用 &lt;code&gt;interval()&lt;/code&gt; ，将阻止应用程序稳定，并且ServiceWorker脚本将永远不会在浏览器中注册。</target>
        </trans-unit>
        <trans-unit id="1661111f30e20e91e134221fa291556479a53887" translate="yes" xml:space="preserve">
          <source>In order to get a service from a dependency injector, you have to give it a &lt;a href=&quot;glossary#token&quot;&gt;token&lt;/a&gt;. Angular usually handles this transaction by specifying a constructor parameter and its type. The parameter type serves as the injector lookup token. Angular passes this token to the injector and assigns the result to the parameter.</source>
          <target state="translated">为了从依赖注入器获得服务，您必须给它一个&lt;a href=&quot;glossary#token&quot;&gt;令牌&lt;/a&gt;。Angular通常通过指定构造函数参数及其类型来处理此事务。参数类型用作喷射器查找令牌。Angular将此令牌传递给注入器，并将结果分配给参数。</target>
        </trans-unit>
        <trans-unit id="f94d1573a258bdbefa8fe3b0d0e6c36603f171fd" translate="yes" xml:space="preserve">
          <source>In order to prevent collisions in environments where multiple Angular apps share the same domain or subdomain, give each application a unique cookie name.</source>
          <target state="translated">为了防止在多个Angular应用共享同一域名或子域名的环境中发生碰撞,给每个应用一个唯一的cookie名称。</target>
        </trans-unit>
        <trans-unit id="4207009e54950800ab6d8cc8ef740aa53fc90034" translate="yes" xml:space="preserve">
          <source>In order to show how subscribing works, we need to create a new observable. There is a constructor that you use to create new instances, but for illustration, we can use some methods from the RxJS library that create simple observables of frequently used types:</source>
          <target state="translated">为了展示订阅是如何工作的,我们需要创建一个新的observable。有一个构造函数可以用来创建新的实例,但是为了说明问题,我们可以使用RxJS库中的一些方法,这些方法可以创建常用类型的简单观测器。</target>
        </trans-unit>
        <trans-unit id="f7421599f9ced2cc1d0119ff73276a78a40f53ee" translate="yes" xml:space="preserve">
          <source>In order to start using any &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; APIs, you still need to load the Angular framework as you would in a normal Angular app. You can see how this can be done with SystemJS by following the instructions in the &lt;a href=&quot;upgrade-setup&quot;&gt;Upgrade Setup&lt;/a&gt; guide, selectively copying code from the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github repository&lt;/a&gt;.</source>
          <target state="translated">为了开始使用任何 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; API，您仍然需要像正常Angular应用中一样加载Angular框架。通过遵循&amp;ldquo; &lt;a href=&quot;upgrade-setup&quot;&gt;升级设置&amp;rdquo;&lt;/a&gt;指南中的说明，有选择地从&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github存储库中&lt;/a&gt;复制代码，您可以看到如何使用SystemJS完成此操作。</target>
        </trans-unit>
        <trans-unit id="4470d8f6deb5914d926efe231421cb63adc8fc6e" translate="yes" xml:space="preserve">
          <source>In order to use the Router, you must first register the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/router&lt;/code&gt; package. Define an array of routes, &lt;code&gt;appRoutes&lt;/code&gt;, and pass them to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method. It returns a module, containing the configured &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service provider, plus other providers that the routing library requires. Once the application is bootstrapped, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; performs the initial navigation based on the current browser URL.</source>
          <target state="translated">为了使用路由器，您必须首先从 &lt;code&gt;@angular/router&lt;/code&gt; 包中注册 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 。定义路由数组 &lt;code&gt;appRoutes&lt;/code&gt; ，并将它们传递给 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 方法。它返回一个模块，其中包含配置的 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 服务提供程序以及路由库所需的其他提供程序。启动应用程序后， &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 将根据当前浏览器URL进行初始导航。</target>
        </trans-unit>
        <trans-unit id="6297dda86acaaaf319ab64751d910390522f6fd8" translate="yes" xml:space="preserve">
          <source>In order to use the routable animations, you'll need to wrap the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; inside an element. You'll use the &lt;code&gt;@routeAnimation&lt;/code&gt; trigger and bind it to the element.</source>
          <target state="translated">为了使用可路由的动画，您需要将 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 包装在一个元素内。您将使用 &lt;code&gt;@routeAnimation&lt;/code&gt; 触发器并将其绑定到元素。</target>
        </trans-unit>
        <trans-unit id="ba35e15dd4c15f46ec67b54f17b33214638dd487" translate="yes" xml:space="preserve">
          <source>In other words, you're required to use &lt;code&gt;../&lt;/code&gt; rather than &lt;code&gt;./&lt;/code&gt;. This is currently the default behavior. Setting this option to &lt;code&gt;corrected&lt;/code&gt; enables the fix.</source>
          <target state="translated">换句话说，您需要使用 &lt;code&gt;../&lt;/code&gt; 而不是 &lt;code&gt;./&lt;/code&gt; 。这是当前的默认行为。将此选项设置为 &lt;code&gt;corrected&lt;/code&gt; 即可启用此修复程序。</target>
        </trans-unit>
        <trans-unit id="87df4a79a4f147a95a370ebf7d5c2192bfdcb408" translate="yes" xml:space="preserve">
          <source>In our example, the shell command either finishes or is still executing, so there&amp;rsquo;s no need for a progress report, but we can report status so that a parent builder that called our builder would know what&amp;rsquo;s going on. Use the &lt;code&gt;BuilderContext.reportStatus()&lt;/code&gt; method to generate a status string of any length. (Note that there&amp;rsquo;s no guarantee that a long string will be shown entirely; it could be cut to fit the UI that displays it.) Pass an empty string to remove the status.</source>
          <target state="translated">在我们的示例中，shell命令要么完成，要么仍在执行，因此不需要进度报告，但是我们可以报告状态，以便称为我们的构建器的父构建器可以知道发生了什么。使用 &lt;code&gt;BuilderContext.reportStatus()&lt;/code&gt; 方法生成任何长度的状态字符串。（请注意，不能保证将完整显示一个长字符串；可以将其剪切以适合显示它的UI。）传递一个空字符串以删除状态。</target>
        </trans-unit>
        <trans-unit id="56455dddd0518d118b14439b2bec10125d4d70c4" translate="yes" xml:space="preserve">
          <source>In our two-state button example, the wildcard isn't that useful because there are only two possible states, &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt;. Wildcard states are better when an element in one particular state has multiple potential states that it can change to. If our button can change from &lt;code&gt;open&lt;/code&gt; to either &lt;code&gt;closed&lt;/code&gt; or something like &lt;code&gt;inProgress&lt;/code&gt;, using a wildcard state could reduce the amount of coding needed.</source>
          <target state="translated">在我们的两种状态按钮示例中，通配符没有那么有用，因为只有两种可能的状态， &lt;code&gt;open&lt;/code&gt; 和 &lt;code&gt;closed&lt;/code&gt; 。当处于一种特定状态的元素具有可以更改为的多个潜在状态时，通配符状态会更好。如果我们的按钮可以从 &lt;code&gt;open&lt;/code&gt; 更改为 &lt;code&gt;closed&lt;/code&gt; 或类似于 &lt;code&gt;inProgress&lt;/code&gt; ，则使用通配符状态可以减少所需的编码量。</target>
        </trans-unit>
        <trans-unit id="1caf8483b03bd6de160e2caf8712a24854fe9bca" translate="yes" xml:space="preserve">
          <source>In practice you will combine the two techniques in the same setup, as seen in this example.</source>
          <target state="translated">在实践中,您将在同一设置中结合两种技术,如本例所示。</target>
        </trans-unit>
        <trans-unit id="72487f978bdb8dcb1ae15d26b5e9d260c3656cb7" translate="yes" xml:space="preserve">
          <source>In practice, you do not need to call &lt;code&gt;$apply()&lt;/code&gt;, regardless of whether it is in AngularJS or Angular. The &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; does it for us. You &lt;em&gt;can&lt;/em&gt; still call &lt;code&gt;$apply()&lt;/code&gt; so there is no need to remove such calls from existing code. Those calls just trigger additional AngularJS change detection checks in a hybrid application.</source>
          <target state="translated">实际上，无论它是在AngularJS还是Angular中，您都不需要调用 &lt;code&gt;$apply()&lt;/code&gt; 。该 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 会为我们。您仍然&lt;em&gt;可以&lt;/em&gt;调用 &lt;code&gt;$apply()&lt;/code&gt; 因此无需从现有代码中删除此类调用。这些调用仅触发混合应用程序中的其他AngularJS更改检测检查。</target>
        </trans-unit>
        <trans-unit id="56d227fe5a68e4aaa849b0aa5c4de2fef9bb36da" translate="yes" xml:space="preserve">
          <source>In practice, you'll serve a static version of the landing page to hold the user's attention. At the same time, you'll load the full Angular app behind it. The user perceives near-instant performance from the landing page and gets the full interactive experience after the full app loads.</source>
          <target state="translated">在实际操作中,你会提供一个静态版本的登陆页面来吸引用户的注意力。同时,你会在后面加载完整的Angular应用。用户从着陆页中感知到近乎即时的性能,并在完整应用加载后获得完整的交互体验。</target>
        </trans-unit>
        <trans-unit id="e2ade5ef587790075852d0ae228268c6578796df" translate="yes" xml:space="preserve">
          <source>In production, change detection kicks in automatically when Angular creates a component or the user enters a keystroke or an asynchronous activity (e.g., AJAX) completes.</source>
          <target state="translated">在生产中,当Angular创建组件或用户输入按键或异步活动(如AJAX)完成时,变化检测会自动启动。</target>
        </trans-unit>
        <trans-unit id="8a8f761c448cb0a19d0d2a50bc0673ac4a1199f4" translate="yes" xml:space="preserve">
          <source>In reactive forms, custom validators are fairly simple to add. All you have to do is pass the function directly to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在反应形式中，自定义验证器的添加非常简单。您所要做的就是将函数直接传递给 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12b205922219ca09964fb9aa93ac6d2fb7837eb1" translate="yes" xml:space="preserve">
          <source>In response to a click event, call the component's click handler, &lt;code&gt;add()&lt;/code&gt;, and then clear the input field so that it's ready for another name. Add the following to the &lt;code&gt;HeroesComponent&lt;/code&gt; class:</source>
          <target state="translated">作为对click事件的响应，调用组件的click处理程序 &lt;code&gt;add()&lt;/code&gt; ，然后清除输入字段，以使其准备好使用其他名称。将以下内容添加到 &lt;code&gt;HeroesComponent&lt;/code&gt; 类中：</target>
        </trans-unit>
        <trans-unit id="1e6c06858e21d619cbdb8f3726f8b28d11719707" translate="yes" xml:space="preserve">
          <source>In simple examples, the dependency value is an &lt;em&gt;instance&lt;/em&gt;, and the class &lt;em&gt;type&lt;/em&gt; serves as its own lookup key. Here you get a &lt;code&gt;HeroService&lt;/code&gt; directly from the injector by supplying the &lt;code&gt;HeroService&lt;/code&gt; type as the token:</source>
          <target state="translated">在简单的示例中，依赖项值是&lt;em&gt;instance&lt;/em&gt;，而类&lt;em&gt;类型&lt;/em&gt;用作其自己的查找键。在这里，您可以通过提供 &lt;code&gt;HeroService&lt;/code&gt; 类型作为令牌直接从注入器获取 &lt;code&gt;HeroService&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d61cd7b51c3a752e9e5224c7c2a9c10d341bcf87" translate="yes" xml:space="preserve">
          <source>In simpler terms, you might say this of the first route:</source>
          <target state="translated">简单点说,你可以这样说第一条路线。</target>
        </trans-unit>
        <trans-unit id="39a7262903072552ce7e1de93133df4200dff76f" translate="yes" xml:space="preserve">
          <source>In some cases you'll want to bypass the Angular CLI builder, and run the Bazel CLI directly. The Bazel CLI is in the &lt;code&gt;@bazel/bazel&lt;/code&gt; npm package. You can install it globally to get the &lt;code&gt;bazel&lt;/code&gt; command in your path, or use &lt;code&gt;$(npm bin)/bazel&lt;/code&gt; in place of bazel below.</source>
          <target state="translated">在某些情况下，您需要绕过Angular CLI构建器，然后直接运行Bazel CLI。Bazel CLI位于 &lt;code&gt;@bazel/bazel&lt;/code&gt; npm软件包中。您可以全局安装它以在路径中获取 &lt;code&gt;bazel&lt;/code&gt; 命令，或使用 &lt;code&gt;$(npm bin)/bazel&lt;/code&gt; 代替下面的bazel。</target>
        </trans-unit>
        <trans-unit id="2ab622d819a42312798e6536f01d0dc402cced7a" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to bypass the service worker entirely and let the browser handle the request instead. An example is when you rely on a feature that is currently not supported in service workers (e.g. &lt;a href=&quot;https://github.com/w3c/ServiceWorker/issues/1141&quot;&gt;reporting progress on uploaded files&lt;/a&gt;).</source>
          <target state="translated">在某些情况下，您可能希望完全绕过Service Worker，而让浏览器来处理请求。例如，您依赖服务工作者当前不支持的功能（例如，&lt;a href=&quot;https://github.com/w3c/ServiceWorker/issues/1141&quot;&gt;报告上传文件的进度&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="61bb49903d1d4b8480b074b2d9731adbded4bf41" translate="yes" xml:space="preserve">
          <source>In some cases, you need to limit the search or accommodate a missing dependency. You can modify Angular's search behavior with the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; qualifying decorators on a service-valued parameter of the component's constructor.</source>
          <target state="translated">在某些情况下，您需要限制搜索或适应缺少的依赖性。您可以在组件构造函数的服务值参数上使用 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; 限定修饰符来修改Angular的搜索行为。</target>
        </trans-unit>
        <trans-unit id="9660b78fcdbbefc9e6c733e9357058335454ef4b" translate="yes" xml:space="preserve">
          <source>In some tests, you're more interested in how an injected service method was called and what values it returned, than what appears on screen.</source>
          <target state="translated">在一些测试中,比起屏幕上显示的内容,你更感兴趣的是一个注入的服务方法是如何被调用的,以及它返回了什么值。</target>
        </trans-unit>
        <trans-unit id="d234d3f817a0a34e6196f4aad3f42f5e028ff0f6" translate="yes" xml:space="preserve">
          <source>In specific situations, it might be necessary to disable sanitization, for example if the application genuinely needs to produce a &lt;code&gt;javascript:&lt;/code&gt; style link with a dynamic value in it. Users can bypass security by constructing a value with one of the &lt;code&gt;bypassSecurityTrust...&lt;/code&gt; methods, and then binding to that value from the template.</source>
          <target state="translated">在特定情况下，可能有必要禁用清理功能，例如，如果应用程序确实需要产生其中具有动态值的 &lt;code&gt;javascript:&lt;/code&gt; 样式链接。用户可以通过使用 &lt;code&gt;bypassSecurityTrust...&lt;/code&gt; 方法之一构造一个值，然后从模板绑定到该值来绕过安全性。</target>
        </trans-unit>
        <trans-unit id="d8e398ebcd66ab590bdd5d974fb4832daf67c817" translate="yes" xml:space="preserve">
          <source>In sum, you can write applications with one, two or more levels of routing. The link parameters array affords the flexibility to represent any routing depth and any legal sequence of route paths, (required) router parameters, and (optional) route parameter objects.</source>
          <target state="translated">总而言之,你可以编写具有一个、两个或多个层次的路由的应用程序。链路参数数组可以灵活地表示任何路由深度和任何合法的路由路径序列、(必需的)路由器参数和(可选的)路由参数对象。</target>
        </trans-unit>
        <trans-unit id="e104dcb833aabc752ad0a3c07890da8319df3538" translate="yes" xml:space="preserve">
          <source>In summary, you want to delay rendering the routed component until all necessary data have been fetched.</source>
          <target state="translated">总而言之,你要延迟渲染路由组件,直到获取所有必要的数据。</target>
        </trans-unit>
        <trans-unit id="83125967d52de259af9ac73a04025e6be705f964" translate="yes" xml:space="preserve">
          <source>In template driven forms, all &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags are automatically tagged as &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;. To import the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; but skip its usage in some forms, for example, to use native HTML5 validation, add the &lt;code&gt;ngNoForm&lt;/code&gt; and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags won't create an &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive. In reactive forms, using &lt;code&gt;ngNoForm&lt;/code&gt; is unnecessary because the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags are inert. In that case, you would refrain from using the &lt;code&gt;formGroup&lt;/code&gt; directive.</source>
          <target state="translated">在模板驱动的表单中，所有 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记都会自动标记为 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 。要导入 &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 但跳过某些形式的用法，例如，使用本机HTML5验证，请添加 &lt;code&gt;ngNoForm&lt;/code&gt; ，而 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记将不会创建 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令。在反应形式中，不需要使用 &lt;code&gt;ngNoForm&lt;/code&gt; ，因为 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标签是惰性的。在这种情况下，您将避免使用 &lt;code&gt;formGroup&lt;/code&gt; 指令。</target>
        </trans-unit>
        <trans-unit id="477e647d8c0ecb9558b0cd8c664fca639f6f099b" translate="yes" xml:space="preserve">
          <source>In template driven forms, if you've imported &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, you don't have to do anything to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag in order to make use of &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;. Continue on to see how this works.</source>
          <target state="translated">在模板驱动的表单中，如果已导入 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; ，则无需对 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记进行任何操作即可使用 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。继续查看其工作原理。</target>
        </trans-unit>
        <trans-unit id="8aa8be07d8ab554c9b5c8a2c06f23414c9fbd80f" translate="yes" xml:space="preserve">
          <source>In template-driven forms, each form element is linked to a directive that manages the form model internally. The diagrams below use the same favorite color example to demonstrate how data flows when an input field's value is changed from the view and then from the model.</source>
          <target state="translated">在模板驱动的表单中,每个表单元素都链接到一个指令,该指令在内部管理表单模型。下面的图表使用相同的最爱颜色示例来演示当输入字段的值从视图中改变,然后从模型中改变时,数据是如何流动的。</target>
        </trans-unit>
        <trans-unit id="93f3796113966b61681d92d3ea2c4e2687db94c5" translate="yes" xml:space="preserve">
          <source>In template-driven forms, the source of truth is the template.</source>
          <target state="translated">在模板驱动的形式中,真理的来源是模板。</target>
        </trans-unit>
        <trans-unit id="14ecbfdcfe9548e05316a56c993192cedabf9367" translate="yes" xml:space="preserve">
          <source>In template-driven forms, you don't have direct access to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance, so you can't pass the validator in like you can for reactive forms. Instead, you need to add a directive to the template.</source>
          <target state="translated">在模板驱动的表单中，您没有直接访问 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例的权限，因此无法像在反应式表单中那样传递验证器。相反，您需要向模板添加指令。</target>
        </trans-unit>
        <trans-unit id="48492c39622ecb3062934d6f8c81b07a54a70450" translate="yes" xml:space="preserve">
          <source>In terms of project structure, this is where the work begins:</source>
          <target state="translated">在项目结构方面,这是工作的起点。</target>
        </trans-unit>
        <trans-unit id="6af431ed4c05cfe4dc08e184fe613d756b260244" translate="yes" xml:space="preserve">
          <source>In terms of syntax, template expressions are similar to JavaScript. Many JavaScript expressions are legal template expressions, with a few exceptions.</source>
          <target state="translated">在语法方面,模板表达式与JavaScript类似。许多JavaScript表达式都是合法的模板表达式,只有少数例外。</target>
        </trans-unit>
        <trans-unit id="09e5d39b1c7c8f014b6062dd7a1bc332ba6b3f66" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;router#optional-route-parameters&quot;&gt;route parameters&lt;/a&gt; example, you only dealt with parameters specific to the route, but what if you wanted optional parameters available to all routes? This is where query parameters come into play.</source>
          <target state="translated">在&lt;a href=&quot;router#optional-route-parameters&quot;&gt;路由参数&lt;/a&gt;示例中，您仅处理特定于该路由的参数，但是如果您希望所有路由都可以使用可选参数该怎么办？这是查询参数起作用的地方。</target>
        </trans-unit>
        <trans-unit id="0820c06ab8c6d0ef8a8fe1b0b929c48f6630bb66" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;toh-pt0#app-wide-styles&quot;&gt;first tutorial&lt;/a&gt;, you set the basic styles for the entire application in &lt;code&gt;styles.css&lt;/code&gt;. That stylesheet didn't include styles for this list of heroes.</source>
          <target state="translated">在第&lt;a href=&quot;toh-pt0#app-wide-styles&quot;&gt;一个教程中&lt;/a&gt;，您可以在 &lt;code&gt;styles.css&lt;/code&gt; 中设置整个应用程序的基本样式。该样式表未包含此英雄列表的样式。</target>
        </trans-unit>
        <trans-unit id="9ff53014dbd002b257b76fc01a67c8662544ebee" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;toh-pt6&quot;&gt;HTTP tutorial&lt;/a&gt;, you'll call &lt;code&gt;HttpClient.get&amp;lt;Hero[]&amp;gt;()&lt;/code&gt; which also returns an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; that emits &lt;em&gt;a single value&lt;/em&gt;, an array of heroes from the body of the HTTP response.</source>
          <target state="translated">在&lt;a href=&quot;toh-pt6&quot;&gt;HTTP教程中&lt;/a&gt;，您将调用 &lt;code&gt;HttpClient.get&amp;lt;Hero[]&amp;gt;()&lt;/code&gt; ，它还会返回一个 &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; ，该Observable &amp;lt;Hero []&amp;gt;发出&lt;em&gt;一个值&lt;/em&gt;，即来自HTTP响应正文的英雄数组。</target>
        </trans-unit>
        <trans-unit id="b1d8e3e61174d25c0c4cf9e3fb0410f3a8581bbc" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;workspace configuration file&lt;/a&gt;, an &quot;architect&quot; section provides configuration options for Architect builders.</source>
          <target state="translated">在&lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;工作空间配置文件中&lt;/a&gt;，&amp;ldquo;建筑师&amp;rdquo;部分提供了Architect构建器的配置选项。</target>
        </trans-unit>
        <trans-unit id="a2b4efd306cdfa6d091bc13bfe331154e2fde145" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator for a component.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 装饰器中的组件。</target>
        </trans-unit>
        <trans-unit id="11992fcba8b5395115e22e411c3650f43745f117" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator, notice the selector name, &lt;code&gt;ad-host&lt;/code&gt;; that's what you use to apply the directive to the element. The next section shows you how.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 装饰器中，注意选择器名称 &lt;code&gt;ad-host&lt;/code&gt; ；这就是将指令应用于元素的方法。下一节将向您展示如何。</target>
        </trans-unit>
        <trans-unit id="22feceeafd715b7f8da2f83c22752555ac3c93c1" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator for the service itself.</source>
          <target state="translated">在服务本身的 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰器中。</target>
        </trans-unit>
        <trans-unit id="4f13851c0ebd5a6ff72bf789e168b55892a0232a" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator for an NgModule.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 的@ NgModule（）装饰器中。</target>
        </trans-unit>
        <trans-unit id="3b03921e4e22315726b2588d9aecac260d6b1661" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;AppModule&lt;/code&gt;, import the &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; and the &lt;code&gt;InMemoryDataService&lt;/code&gt; class, which you will create in a moment.</source>
          <target state="translated">在 &lt;code&gt;AppModule&lt;/code&gt; 中，导入 &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; 和 &lt;code&gt;InMemoryDataService&lt;/code&gt; 类，稍后将创建它们。</target>
        </trans-unit>
        <trans-unit id="677f4f33e13f4a8b9fa933701588716ce9142d4f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;BUILD.bazel&lt;/code&gt; file, each rule must first be imported, using the &lt;code&gt;load&lt;/code&gt; statement. Then the rule is called with some attributes, and the result of calling the rule is that you've declared to Bazel how it can derive some outputs given some inputs and dependencies. Then later, when you run a &lt;code&gt;bazel&lt;/code&gt; command line, Bazel loads all the rules you've declared to determine an absolute ordering of what needs to be run. Note that only the rules needed to produce the requested output will actually be executed.</source>
          <target state="translated">在 &lt;code&gt;BUILD.bazel&lt;/code&gt; 文件中，必须首先使用 &lt;code&gt;load&lt;/code&gt; 语句导入每个规则。然后使用一些属性调用该规则，并且调用该规则的结果是，您已经向Bazel声明了在给定一些输入和依赖关系的情况下它如何能够派生出一些输出。然后，当您运行 &lt;code&gt;bazel&lt;/code&gt; 命令行时，Bazel将加载您声明的所有规则，以确定需要运行的内容的绝对顺序。请注意，只有产生所需输出的规则才会实际执行。</target>
        </trans-unit>
        <trans-unit id="ff73a4f29b4dafba90546044a92eb6295b78516d" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;CartComponent&lt;/code&gt; class, define the &lt;code&gt;checkoutForm&lt;/code&gt; property to store the form model.</source>
          <target state="translated">在 &lt;code&gt;CartComponent&lt;/code&gt; 类中，定义 &lt;code&gt;checkoutForm&lt;/code&gt; 属性以存储表单模型。</target>
        </trans-unit>
        <trans-unit id="af276f659fcdc7e39c68c1ac45abbf64eb51dc71" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;CartService&lt;/code&gt; class, define an &lt;code&gt;items&lt;/code&gt; property to store the list (array) of the current products in the cart.</source>
          <target state="translated">在 &lt;code&gt;CartService&lt;/code&gt; 类中，定义一个 &lt;code&gt;items&lt;/code&gt; 属性以存储购物车中当前产品的列表（数组）。</target>
        </trans-unit>
        <trans-unit id="5867d4d5bfeee0f55a7464e033d66ab84c592db8" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;Hero Detail&lt;/code&gt; and &lt;code&gt;Crisis Detail&lt;/code&gt;, the app waited until the route was activated to fetch the respective hero or crisis.</source>
          <target state="translated">在&amp;ldquo; &lt;code&gt;Hero Detail&lt;/code&gt; 和&amp;ldquo; &lt;code&gt;Crisis Detail&lt;/code&gt; ，应用程序等待，直到激活路线以获取相应的英雄或危机。</target>
        </trans-unit>
        <trans-unit id="18c1043ce48596bb1dfc52c7f2a46397b1f7b0f8" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;HeroDetail&lt;/code&gt; component class, add the following &lt;code&gt;save()&lt;/code&gt; method, which persists hero name changes using the hero service &lt;code&gt;updateHero()&lt;/code&gt; method and then navigates back to the previous view.</source>
          <target state="translated">在 &lt;code&gt;HeroDetail&lt;/code&gt; 组件类中，添加以下 &lt;code&gt;save()&lt;/code&gt; 方法，该方法使用英雄服务 &lt;code&gt;updateHero()&lt;/code&gt; 方法保留英雄名称更改，然后导航回到上一个视图。</target>
        </trans-unit>
        <trans-unit id="2156da5df59cee5a225281c56c30a9cab56708ab" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;HeroService&lt;/code&gt;, import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">在 &lt;code&gt;HeroService&lt;/code&gt; 中，导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpheaders&quot;&gt;HttpHeaders&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1ca02e5a12bc00052325d452bf3f5957538434cc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;Phone&lt;/code&gt; service, you can explicitly annotate the &lt;code&gt;$resource&lt;/code&gt; service dependency as an &lt;code&gt;angular.resource.IResourceService&lt;/code&gt; - a type defined by the AngularJS typings.</source>
          <target state="translated">在 &lt;code&gt;Phone&lt;/code&gt; 服务中，您可以将 &lt;code&gt;$resource&lt;/code&gt; 服务依赖项显式注释为 &lt;code&gt;angular.resource.IResourceService&lt;/code&gt; -由AngularJS类型定义的类型。</target>
        </trans-unit>
        <trans-unit id="a5e662caedf020f11cf3036766fb27dbfdab3cfd" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ProductAlertsComponent&lt;/code&gt; class definition, define a property named &lt;code&gt;product&lt;/code&gt; with an &lt;code&gt;@&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator. The &lt;code&gt;@&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator indicates that the property value passes in from the component's parent, the product list component.</source>
          <target state="translated">在 &lt;code&gt;ProductAlertsComponent&lt;/code&gt; 类定义中，使用 &lt;code&gt;@&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;（）装饰器定义一个名为 &lt;code&gt;product&lt;/code&gt; 的属性。在 &lt;code&gt;@&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;api/core/input&quot;&gt;输入&lt;/a&gt;（）装饰表示属性值从组件的父，产品列表分量通过。</target>
        </trans-unit>
        <trans-unit id="36898b78d65205ea3838be208da032aa36540e47" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ProfileEditor&lt;/code&gt; component, add the &lt;code&gt;Validators.required&lt;/code&gt; static method as the second item in the array for the &lt;code&gt;firstName&lt;/code&gt; control.</source>
          <target state="translated">在 &lt;code&gt;ProfileEditor&lt;/code&gt; 组件中，将 &lt;code&gt;Validators.required&lt;/code&gt; 静态方法添加为 &lt;code&gt;firstName&lt;/code&gt; 控件数组中的第二项。</target>
        </trans-unit>
        <trans-unit id="92ee776b0a8c4703a5ed41d37503aaec513d8b04" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;angular.json&lt;/code&gt; configuration file, add the associated script files to the &quot;scripts&quot; array:</source>
          <target state="translated">在 &lt;code&gt;angular.json&lt;/code&gt; 配置文件中，将关联的脚本文件添加到&amp;ldquo; scripts&amp;rdquo;数组中：</target>
        </trans-unit>
        <trans-unit id="1a9899ccac78789435c820f6606e4531795090bf" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;angular.json&lt;/code&gt; file, each project has an &quot;architect&quot; section that contains targets which configure builders. Some of these targets correspond to &lt;a href=&quot;glossary#cli&quot;&gt;CLI commands&lt;/a&gt;, such as &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;lint&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;angular.json&lt;/code&gt; 文件中，每个项目都有一个&amp;ldquo; architect&amp;rdquo;部分，其中包含配置构建器的目标。其中一些目标与&lt;a href=&quot;glossary#cli&quot;&gt;CLI命令&lt;/a&gt;相对应，例如 &lt;code&gt;build&lt;/code&gt; ， &lt;code&gt;serve&lt;/code&gt; ， &lt;code&gt;test&lt;/code&gt; 和 &lt;code&gt;lint&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94de57a6cb371bf77619355ba9427137a477c222" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;app.component.ts&lt;/code&gt;, add a &lt;code&gt;logger()&lt;/code&gt; method.</source>
          <target state="translated">在 &lt;code&gt;app.component.ts&lt;/code&gt; 中，添加 &lt;code&gt;logger()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="62dde02e97dfc75cca7459efe150d4efeef31929" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;closed&lt;/code&gt; state, shown below, the button has a height of 100 pixels, an opacity of 0.5, and a background color of green.</source>
          <target state="translated">在 &lt;code&gt;closed&lt;/code&gt; 状态下（如下所示），按钮的高度为100像素，不透明度为0.5，背景颜色为绿色。</target>
        </trans-unit>
        <trans-unit id="166e5ae5219a736e7e64042d01444638aec53e58" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ngOnInit()&lt;/code&gt; method, &lt;em&gt;subscribe&lt;/em&gt; to route params and fetch the product based on the &lt;code&gt;productId&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;ngOnInit()&lt;/code&gt; 方法中，&lt;em&gt;订阅&lt;/em&gt;路由参数并根据 &lt;code&gt;productId&lt;/code&gt; 获取产品。</target>
        </trans-unit>
        <trans-unit id="8a184e86e3a0e42b994b7ab8f4d3105c6d66f4be" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ngOnInit()&lt;/code&gt;&lt;a href=&quot;../guide/lifecycle-hooks#oninit&quot;&gt;lifecycle hook&lt;/a&gt; call &lt;code&gt;getHero()&lt;/code&gt; and define it as follows.</source>
          <target state="translated">在 &lt;code&gt;ngOnInit()&lt;/code&gt; &lt;a href=&quot;../guide/lifecycle-hooks#oninit&quot;&gt;生命周期挂钩中，&lt;/a&gt;调用 &lt;code&gt;getHero()&lt;/code&gt; 并定义如下。</target>
        </trans-unit>
        <trans-unit id="1ec1c3010006a416ad9d0a3a466d135533ea48e4" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;package.json&lt;/code&gt; file, add a &lt;code&gt;builders&lt;/code&gt; key that tells the Architect tool where to find our builder definition file.</source>
          <target state="translated">在 &lt;code&gt;package.json&lt;/code&gt; 文件中，添加一个 &lt;code&gt;builders&lt;/code&gt; 键，该键告诉Architect工具在哪里可以找到我们的构建器定义文件。</target>
        </trans-unit>
        <trans-unit id="b9948e144c79c9c4f0b9dd0251b423e396dd63cb" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;product-list&lt;/code&gt; folder, open the template file &lt;code&gt;product-list.component.html&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;product-list&lt;/code&gt; 文件夹中，打开模板文件 &lt;code&gt;product-list.component.html&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97dfb1a67e0acfe8f117f2fb6b7fbabfa7951806" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;schematics/&lt;/code&gt; folder, create an &lt;code&gt;ng-add/&lt;/code&gt; folder for your first schematic.</source>
          <target state="translated">在 &lt;code&gt;schematics/&lt;/code&gt; 文件夹中，为第一个示意图创建一个 &lt;code&gt;ng-add/&lt;/code&gt; 文件夹。</target>
        </trans-unit>
        <trans-unit id="071be1c94586b5d59a7d3e0b251a1712459e1078" translate="yes" xml:space="preserve">
          <source>In the &lt;span name=&quot;ngmodules&quot;&gt;live example&lt;/span&gt; the root &lt;code&gt;AppModule&lt;/code&gt; imports the &lt;code&gt;GreetingModule&lt;/code&gt; and adds the &lt;code&gt;providers&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt; providers. Specifically, Angular accumulates all imported providers before appending the items listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt;. This sequence ensures that whatever you add explicitly to the &lt;code&gt;AppModule&lt;/code&gt; providers takes precedence over the providers of imported modules.</source>
          <target state="translated">在&lt;span name=&quot;ngmodules&quot;&gt;实际示例中&lt;/span&gt;，根 &lt;code&gt;AppModule&lt;/code&gt; 导入 &lt;code&gt;GreetingModule&lt;/code&gt; 并将 &lt;code&gt;providers&lt;/code&gt; 添加到 &lt;code&gt;AppModule&lt;/code&gt; 提供程序中。具体来说，在附加 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; 列出的项目之前，Angular会累积所有导入的提供程序。此序列可确保您显式添加到 &lt;code&gt;AppModule&lt;/code&gt; 提供程序中的任何内容都优先于导入模块的提供程序。</target>
        </trans-unit>
        <trans-unit id="aabd7c813ffdc03e68f8ddf0d0e075e18a3d7a6d" translate="yes" xml:space="preserve">
          <source>In the Angular CLI, a standalone application or &lt;a href=&quot;glossary#library&quot;&gt;library&lt;/a&gt; that can be created or modified by a CLI command.</source>
          <target state="translated">在Angular CLI中，可以通过CLI命令创建或修改的独立应用程序或&lt;a href=&quot;glossary#library&quot;&gt;库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7b501033bcab7677bbf386ea844c636f41ee7a1" translate="yes" xml:space="preserve">
          <source>In the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, add the &lt;code&gt;proxyConfig&lt;/code&gt; option to the &lt;code&gt;serve&lt;/code&gt; target:</source>
          <target state="translated">在CLI配置文件 &lt;code&gt;angular.json&lt;/code&gt; 中，将 &lt;code&gt;proxyConfig&lt;/code&gt; 选项添加到 &lt;code&gt;serve&lt;/code&gt; 目标：</target>
        </trans-unit>
        <trans-unit id="61763a5a70701c3c12fbb07b3b6f0e84eaf7bbab" translate="yes" xml:space="preserve">
          <source>In the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, point to the JavaScript proxy configuration file:</source>
          <target state="translated">在CLI配置文件 &lt;code&gt;angular.json&lt;/code&gt; 中，指向JavaScript代理配置文件：</target>
        </trans-unit>
        <trans-unit id="122be2b5ab964b68505d923b034cfdbee86e0ef4" translate="yes" xml:space="preserve">
          <source>In the DOM of a hybrid ngUpgrade application are components and directives from both AngularJS and Angular. These components communicate with each other by using the input and output bindings of their respective frameworks, which ngUpgrade bridges together. They may also communicate through shared injected dependencies, as described above.</source>
          <target state="translated">在混合ngUpgrade应用程序的DOM中,有来自AngularJS和Angular的组件和指令。这些组件通过使用各自框架的输入和输出绑定来相互通信,而ngUpgrade则将这些框架桥接在一起。它们也可以通过共享注入的依赖关系进行通信,如上所述。</target>
        </trans-unit>
        <trans-unit id="da4aac216c4150aa0c4b76a0cbffacab0ba55a37" translate="yes" xml:space="preserve">
          <source>In the DOM of a running Angular application with emulated view encapsulation enabled, each DOM element has some extra attributes attached to it:</source>
          <target state="translated">在启用了模拟视图封装的运行中的Angular应用的DOM中,每个DOM元素都会附加一些额外的属性。</target>
        </trans-unit>
        <trans-unit id="967824d97e856f8a5701294372f66633e02cbd55" translate="yes" xml:space="preserve">
          <source>In the HTML template file, use the trigger name to attach the defined animations to the HTML element to be animated.</source>
          <target state="translated">在HTML模板文件中,使用触发器名称将定义的动画附加到要动画的HTML元素上。</target>
        </trans-unit>
        <trans-unit id="083a121e6216962299890132cebbe02f632fa294" translate="yes" xml:space="preserve">
          <source>In the HTML template, the animation event is passed back via &lt;code&gt;$event&lt;/code&gt;, as &lt;code&gt;@trigger.start&lt;/code&gt; and &lt;code&gt;@trigger.done&lt;/code&gt;, where &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;&lt;/code&gt; is the name of the trigger being used. In our example, the trigger &lt;code&gt;openClose&lt;/code&gt; appears as follows.</source>
          <target state="translated">在HTML模板中，动画事件通过 &lt;code&gt;$event&lt;/code&gt; 返回，如 &lt;code&gt;@trigger.start&lt;/code&gt; 和 &lt;code&gt;@trigger.done&lt;/code&gt; ，其中 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;&lt;/code&gt; 是使用的触发器的名称。在我们的示例中，触发器 &lt;code&gt;openClose&lt;/code&gt; 如下所示。</target>
        </trans-unit>
        <trans-unit id="dfcba8b351ad67cbd3018ae060d6b3b0cce679cf" translate="yes" xml:space="preserve">
          <source>In the Karma configuration file, &lt;code&gt;karma.conf.js&lt;/code&gt;, add a custom launcher called ChromeHeadlessCI below browsers:</source>
          <target state="translated">在Karma配置文件 &lt;code&gt;karma.conf.js&lt;/code&gt; 中，在浏览器下方添加一个名为ChromeHeadlessCI的自定义启动器：</target>
        </trans-unit>
        <trans-unit id="0d8933c6633530a939e7e7a904014c408f4331c7" translate="yes" xml:space="preserve">
          <source>In the Phone detail controller, you'll have two members: One for the phone that the user is looking at and another for the URL of the currently displayed image:</source>
          <target state="translated">在手机详情控制器中,你会有两个成员。一个是用户正在看的手机,另一个是当前显示的图片的URL。</target>
        </trans-unit>
        <trans-unit id="e4df01dda361adbb05b79a30335d5fac348e1b3c" translate="yes" xml:space="preserve">
          <source>In the above code snippet, &lt;code&gt;transAnimation&lt;/code&gt; is made reusable by declaring it as an export variable.</source>
          <target state="translated">在上面的代码片段中，通过将 &lt;code&gt;transAnimation&lt;/code&gt; 声明为导出变量使其可重用。</target>
        </trans-unit>
        <trans-unit id="999956f8131dbd54f089f149eff9fb3d864570b4" translate="yes" xml:space="preserve">
          <source>In the above code, we applied the &lt;code&gt;void&lt;/code&gt; state when the HTML element isn't attached to a view.</source>
          <target state="translated">在上面的代码中，当HTML元素未附加到视图时，我们应用了 &lt;code&gt;void&lt;/code&gt; 状态。</target>
        </trans-unit>
        <trans-unit id="577e109d05bd16fdfef27736b2c5e520043e9b7f" translate="yes" xml:space="preserve">
          <source>In the ad banner, all components implement a common &lt;code&gt;AdComponent&lt;/code&gt; interface to standardize the API for passing data to the components.</source>
          <target state="translated">在广告横幅中，所有组件都实现一个通用的 &lt;code&gt;AdComponent&lt;/code&gt; 接口，以标准化用于将数据传递到组件的API。</target>
        </trans-unit>
        <trans-unit id="19609a3f68be8a8d8459bb2350900bd1a47c1bf5" translate="yes" xml:space="preserve">
          <source>In the basic CLI-generated app, modules are eagerly loaded which means that they are all loaded when the app launches. Angular uses an injector system to make things available between modules. In an eagerly loaded app, the root application injector makes all of the providers in all of the modules available throughout the app.</source>
          <target state="translated">在基本的CLI生成的应用程序中,模块是急切加载的,这意味着当应用程序启动时,它们都会被加载。Angular使用注入器系统来使模块之间的东西可用。在急切加载的应用程序中,根应用程序注入器使所有模块中的所有提供者在整个应用程序中可用。</target>
        </trans-unit>
        <trans-unit id="d217fba68efca130ef3c06341acbd707ba067782" translate="yes" xml:space="preserve">
          <source>In the builder source directory, we have created a new test file &lt;code&gt;index.spec.ts&lt;/code&gt;. The code creates new instances of &lt;code&gt;JsonSchemaRegistry&lt;/code&gt; (for schema validation), &lt;code&gt;TestingArchitectHost&lt;/code&gt; (an in-memory implementation of &lt;code&gt;ArchitectHost&lt;/code&gt;), and &lt;code&gt;Architect&lt;/code&gt;.</source>
          <target state="translated">在构建器源目录中，我们创建了一个新的测试文件 &lt;code&gt;index.spec.ts&lt;/code&gt; 。该代码创建 &lt;code&gt;JsonSchemaRegistry&lt;/code&gt; （用于模式验证）， &lt;code&gt;TestingArchitectHost&lt;/code&gt; （ &lt;code&gt;ArchitectHost&lt;/code&gt; 的内存实现）和 &lt;code&gt;Architect&lt;/code&gt; 的新实例。</target>
        </trans-unit>
        <trans-unit id="b4f98a695082e7fd1036ab253a946e35cc9beb2c" translate="yes" xml:space="preserve">
          <source>In the case of hybrid applications, the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; bridges the AngularJS and Angular approaches. Here's what happens:</source>
          <target state="translated">对于混合应用程序， &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 将AngularJS和Angular方法联系起来。这是发生了什么：</target>
        </trans-unit>
        <trans-unit id="91461870129c519bada0129bab899cc6a8400941" translate="yes" xml:space="preserve">
          <source>In the child</source>
          <target state="translated">在儿童方面</target>
        </trans-unit>
        <trans-unit id="514d6aabad56aee8cc774c96c1fb20cc55ba211e" translate="yes" xml:space="preserve">
          <source>In the child's template</source>
          <target state="translated">在孩子的模板中</target>
        </trans-unit>
        <trans-unit id="4ba5c1d9c582fab11dbc6b441f66b76c1660fd68" translate="yes" xml:space="preserve">
          <source>In the code snippet above, the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator indicates unidirectional transitions, and &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; is bidirectional. Within the transition, &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; specifies how long the transition takes. In this case, the state change from &lt;code&gt;open&lt;/code&gt; to &lt;code&gt;closed&lt;/code&gt; takes one second, expressed here as &lt;code&gt;1s&lt;/code&gt;.</source>
          <target state="translated">在上面的代码片段中， &lt;code&gt;=&amp;gt;&lt;/code&gt; 运算符指示单向转换，而 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 是双向的。在过渡中， &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 指定过渡需要多长时间。在这种情况下，状态从 &lt;code&gt;open&lt;/code&gt; 更改为 &lt;code&gt;closed&lt;/code&gt; 需要一秒钟，此处表示为 &lt;code&gt;1s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78631c8d5215d0ec4e7d6e3f883171b073d2d4ca" translate="yes" xml:space="preserve">
          <source>In the code snippet above, the HTML template binds a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element to a trigger named &lt;code&gt;openClose&lt;/code&gt; with a status expression of &lt;code&gt;isOpen&lt;/code&gt;, and with possible values of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. This is an alternative to the practice of creating two named states of &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;.</source>
          <target state="translated">在上面的代码段中，HTML模板将 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素绑定到名为 &lt;code&gt;openClose&lt;/code&gt; 的触发器，该触发器的状态表达式为 &lt;code&gt;isOpen&lt;/code&gt; ，可能的值为 &lt;code&gt;true&lt;/code&gt; 和 &lt;code&gt;false&lt;/code&gt; 。这是创建两个名为 &lt;code&gt;open&lt;/code&gt; 和 &lt;code&gt;close&lt;/code&gt; 的状态的做法的替代方法。</target>
        </trans-unit>
        <trans-unit id="c1b78f88da88a23dd477bf417a4c041c6b8167c0" translate="yes" xml:space="preserve">
          <source>In the component class, define a property named &lt;code&gt;notify&lt;/code&gt; with an &lt;code&gt;@&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator and an instance of &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt;. This allows the product alert component to emit an event when the value of the notify property changes.</source>
          <target state="translated">在组件类中，使用 &lt;code&gt;@&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;（）装饰器和 &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt; （）实例定义一个名为 &lt;code&gt;notify&lt;/code&gt; 的属性。当notify属性的值更改时，这使产品警报组件可以发出事件。</target>
        </trans-unit>
        <trans-unit id="cbb5316d37953947a7dc6e4e53440d5ca9eea88b" translate="yes" xml:space="preserve">
          <source>In the component code, in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata under the &lt;code&gt;animations:&lt;/code&gt; property, when the state evaluates to &lt;code&gt;true&lt;/code&gt; (meaning &quot;open&quot; here), the associated HTML element's height is a wildcard style or default. In this case, use whatever height the element already had before the animation started. When the element is &quot;closed,&quot; the element animates to a height of 0, which makes it invisible.</source>
          <target state="translated">在组件代码中，在 &lt;code&gt;animations:&lt;/code&gt; 属性下的 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 元数据中，当状态评估为 &lt;code&gt;true&lt;/code&gt; （在此表示&amp;ldquo;打开&amp;rdquo;）时，关联的HTML元素的高度为通配符样式或默认值。在这种情况下，请使用动画开始之前元素已具有的高度。当元素&amp;ldquo;关闭&amp;rdquo;时，该元素动画化为高度0，使其不可见。</target>
        </trans-unit>
        <trans-unit id="750773967d6728414256aab053c5bf8fe9e2f436" translate="yes" xml:space="preserve">
          <source>In the component file, add a metadata property called &lt;code&gt;animations:&lt;/code&gt; within the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. You put the trigger that defines an animation within the &lt;code&gt;animations&lt;/code&gt; metadata property.</source>
          <target state="translated">在组件文件中，在 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）装饰器中添加一个名为 &lt;code&gt;animations:&lt;/code&gt; 的元数据属性。您将在 &lt;code&gt;animations&lt;/code&gt; 元数据属性中放置了定义动画的触发器。</target>
        </trans-unit>
        <trans-unit id="4196bcf6a715efdf0a9de2a019d7382007a47ed6" translate="yes" xml:space="preserve">
          <source>In the component file, the &lt;code&gt;:enter&lt;/code&gt; transition sets an initial opacity of 0, and then animates it to change that opacity to 1 as the element is inserted into the view.</source>
          <target state="translated">在组件文件中， &lt;code&gt;:enter&lt;/code&gt; 过渡将初始不透明度设置为0，然后对其进行动画处理，以将元素插入视图时将该不透明度更改为1。</target>
        </trans-unit>
        <trans-unit id="2a6156782315dab6b8822877f620cda0f59ab064" translate="yes" xml:space="preserve">
          <source>In the component or file that uses the library, add the following code.</source>
          <target state="translated">在使用该库的组件或文件中,添加以下代码。</target>
        </trans-unit>
        <trans-unit id="87a9383fa91e555bd99945b3b362ea9dcee5dfa7" translate="yes" xml:space="preserve">
          <source>In the component template, the content might be used with interpolation:</source>
          <target state="translated">在组件模板中,内容可能会被用于插值。</target>
        </trans-unit>
        <trans-unit id="3ae6371e7bf5654fb5d754771d4b6f032b299e13" translate="yes" xml:space="preserve">
          <source>In the console, you will see that the schematic was run and the &lt;code&gt;my-data.service.ts&lt;/code&gt; file was created in your app folder.</source>
          <target state="translated">在控制台中，您将看到原理图已运行，并且在您的app文件夹中创建了 &lt;code&gt;my-data.service.ts&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="db2383126f18633eaf688b99cb2074de976819a7" translate="yes" xml:space="preserve">
          <source>In the constructor of the &lt;code&gt;AppModule&lt;/code&gt;, use dependency injection to get a hold of the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; instance, and use it to bootstrap the AngularJS app in the &lt;code&gt;AppModule.ngDoBootstrap&lt;/code&gt; method. The &lt;code&gt;upgrade.bootstrap&lt;/code&gt; method takes the exact same arguments as &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap&lt;/a&gt;:</source>
          <target state="translated">在 &lt;code&gt;AppModule&lt;/code&gt; 的构造函数中，使用依赖项注入来获取 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 实例，并使用它在 &lt;code&gt;AppModule.ngDoBootstrap&lt;/code&gt; 方法中引导AngularJS应用程序。该 &lt;code&gt;upgrade.bootstrap&lt;/code&gt; 方法采用完全相同的参数作为&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="ab2886cc60ad2bc7616d008c0fde504da14578f6" translate="yes" xml:space="preserve">
          <source>In the context of a parent form, it's often unnecessary to include one-way or two-way binding, as the parent form syncs the value for you. You access its properties by exporting it into a local template variable using &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; such as (&lt;code&gt;#f=&quot;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt;). Use the variable where needed on form submission.</source>
          <target state="translated">在父表单的上下文中，通常不必包含单向或双向绑定，因为父表单会为您同步值。您可以通过使用 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 将其导出到本地模板变量中来访问其属性，例如（ &lt;code&gt;#f=&quot;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&quot;&lt;/code&gt; =&amp;ldquo; ngForm &amp;rdquo;）。在表单提交时在需要的地方使用变量。</target>
        </trans-unit>
        <trans-unit id="9f2d7dd8dafe93b7500c8077037b8da178a715a9" translate="yes" xml:space="preserve">
          <source>In the context of an Angular service worker, a &quot;version&quot; is a collection of resources that represent a specific build of the Angular app. Whenever a new build of the app is deployed, the service worker treats that build as a new version of the app. This is true even if only a single file is updated. At any given time, the service worker may have multiple versions of the app in its cache and it may be serving them simultaneously. For more information, see the &lt;a href=&quot;service-worker-devops#tabs&quot;&gt;App tabs&lt;/a&gt; section below.</source>
          <target state="translated">在Angular服务工作者的上下文中，&amp;ldquo;版本&amp;rdquo;是代表Angular应用程序特定版本的资源集合。每当部署新版本的应用程序时，服务工作人员都会将该版本视为新版本的应用程序。即使仅更新一个文件，也是如此。在任何给定时间，服务工作者都可以在其缓存中拥有该应用程序的多个版本，并且可以同时为它们提供服务。有关更多信息，请参见下面的&amp;ldquo; &lt;a href=&quot;service-worker-devops#tabs&quot;&gt;应用程序&amp;rdquo;标签&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="97dae99a0d255226f4238d22cccbbb910df66b7e" translate="yes" xml:space="preserve">
          <source>In the example above, Angular evaluates the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;itemImageUrl&lt;/code&gt; properties and fills in the blanks, first displaying some title text and then an image.</source>
          <target state="translated">在上面的示例中，Angular评估 &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;itemImageUrl&lt;/code&gt; 属性并填充空白，首先显示一些标题文本，然后显示图像。</target>
        </trans-unit>
        <trans-unit id="81fa08fa9b494460742d62ebecc855ff605ead0a" translate="yes" xml:space="preserve">
          <source>In the example above, the three options are specified according to that pluralization pattern. For talking about zero minutes, you use &lt;code&gt;=0 {just now}&lt;/code&gt;. For one minute, you use &lt;code&gt;=1 {one minute}&lt;/code&gt;. Any unmatched cardinality uses &lt;code&gt;other {{{minutes}} minutes ago}&lt;/code&gt;. You could choose to add patterns for two, three, or any other number if the pluralization rules were different. For the example of &quot;minute&quot;, only these three patterns are necessary in English.</source>
          <target state="translated">在上面的示例中，根据该多元化模式指定了三个选项。要谈论零分钟，请使用 &lt;code&gt;=0 {just now}&lt;/code&gt; 。一分钟内，您使用 &lt;code&gt;=1 {one minute}&lt;/code&gt; 。任何无与伦比的基数都使用 &lt;code&gt;other {{{minutes}} minutes ago}&lt;/code&gt; 。如果复数规则不同，则可以选择为两个，三个或任何其他数字添加模式。以&amp;ldquo;分钟&amp;rdquo;为例，英语仅需要这三种模式。</target>
        </trans-unit>
        <trans-unit id="550d39672c182d504b9a08b7ed75f156116ef64f" translate="yes" xml:space="preserve">
          <source>In the example above, you use the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; method with the same object to define the properties in the model. The value for each control name is an array containing the initial value as the first item in the array.</source>
          <target state="translated">在上面的示例中，您对同一个对象使用了 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 方法来定义模型中的属性。每个控件名称的值是一个数组，该数组包含初始值作为数组中的第一项。</target>
        </trans-unit>
        <trans-unit id="4bcfb2b53fd4dc6373ea6524bb4d8990492b6ddf" translate="yes" xml:space="preserve">
          <source>In the example below the custom id &lt;code&gt;myId&lt;/code&gt; is used for two different messages:</source>
          <target state="translated">在下面的示例中，自定义ID &lt;code&gt;myId&lt;/code&gt; 用于两条不同的消息：</target>
        </trans-unit>
        <trans-unit id="5ada26207b7af3fde1615048bf33c296c6978a3e" translate="yes" xml:space="preserve">
          <source>In the example below, an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag displays a simple English language greeting, &quot;Hello i18n!&quot;</source>
          <target state="translated">在下面的示例中， &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 标记显示简单的英语问候语&amp;ldquo; Hello i18n！&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="761e65706bb821211699b0101d7fa79785ca1c40" translate="yes" xml:space="preserve">
          <source>In the example case, the constraints are:</source>
          <target state="translated">在实例中,约束条件是:</target>
        </trans-unit>
        <trans-unit id="d36c3d786cc14bcc8155416686a9fb73a1c42c26" translate="yes" xml:space="preserve">
          <source>In the example of the simple root module above, the application module needs material from within &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;. To access that material, add it to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata &lt;code&gt;imports&lt;/code&gt; like this.</source>
          <target state="translated">在上面的简单根模块的示例中，应用程序模块需要 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 中的材料。要访问该材料，可将其添加到 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据 &lt;code&gt;imports&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54c9f76e0c79a2bab0002fa1804da3ccf230830a" translate="yes" xml:space="preserve">
          <source>In the example, the &lt;code&gt;color&lt;/code&gt; style is set to the current value of the &lt;code&gt;colorPreference&lt;/code&gt; variable.</source>
          <target state="translated">在示例中， &lt;code&gt;color&lt;/code&gt; 样式设置为 &lt;code&gt;colorPreference&lt;/code&gt; 变量的当前值。</target>
        </trans-unit>
        <trans-unit id="92b5e03d39252fa9bf7d83cab030749ee5f4c3e4" translate="yes" xml:space="preserve">
          <source>In the example, the local state is the number &lt;code&gt;2&lt;/code&gt;, the number of runners up that the component should show. The state value is passed as an argument to &lt;code&gt;runnersUpFactory()&lt;/code&gt;. The &lt;code&gt;runnersUpFactory()&lt;/code&gt; returns the &lt;em&gt;provider factory function&lt;/em&gt;, which can use both the passed-in state value and the injected services &lt;code&gt;Hero&lt;/code&gt; and &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">在示例中，本地状态为数字 &lt;code&gt;2&lt;/code&gt; ，即组件应显示的亚军数量。状态值作为参数传递给 &lt;code&gt;runnersUpFactory()&lt;/code&gt; 。该 &lt;code&gt;runnersUpFactory()&lt;/code&gt; 返回&lt;em&gt;供应商工厂的功能&lt;/em&gt;，它可以同时使用传入的状态值和注入的服务 &lt;code&gt;Hero&lt;/code&gt; 和 &lt;code&gt;HeroService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8effc0805c439cacc9c0f76f324195e103dda94" translate="yes" xml:space="preserve">
          <source>In the first example, the &lt;code&gt;active&lt;/code&gt; class is applied to the element if &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; is true.</source>
          <target state="translated">在第一个示例中，如果 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; 为true ，则将 &lt;code&gt;active&lt;/code&gt; 类应用于该元素。</target>
        </trans-unit>
        <trans-unit id="27a19498c633dd57a4f9dced2864e307540358ac" translate="yes" xml:space="preserve">
          <source>In the first example, the &lt;code&gt;color&lt;/code&gt; style is set to the current value of the &lt;code&gt;colorPreference&lt;/code&gt; variable.</source>
          <target state="translated">在第一个示例中， &lt;code&gt;color&lt;/code&gt; 样式设置为 &lt;code&gt;colorPreference&lt;/code&gt; 变量的当前值。</target>
        </trans-unit>
        <trans-unit id="c2c9e4a3b7e12aaeed408d98456f50d5888a5780" translate="yes" xml:space="preserve">
          <source>In the first example, when a user clicks the button, the &lt;code&gt;toggleImage()&lt;/code&gt; method in the associated component is executed.</source>
          <target state="translated">在第一个示例中，当用户单击按钮时，将执行关联组件中的 &lt;code&gt;toggleImage()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="51f81f798ea0c7741e39924caa444daf3cc19a74" translate="yes" xml:space="preserve">
          <source>In the first example, when the user clicks the button, the &lt;code&gt;toggleImage()&lt;/code&gt; method in the controller referenced by the &lt;code&gt;vm&lt;/code&gt;&lt;code&gt;controller as&lt;/code&gt; alias is executed.</source>
          <target state="translated">在第一个示例中，当用户单击按钮时，将执行由 &lt;code&gt;vm&lt;/code&gt; &lt;code&gt;controller as&lt;/code&gt; 引用为别名的控制器中的 &lt;code&gt;toggleImage()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="c32207f14912960f8c997ef3cafe72412ad10f67" translate="yes" xml:space="preserve">
          <source>In the first technique, you create and declare stub versions of the components and directive that play little or no role in the tests.</source>
          <target state="translated">在第一种技术中,你创建和声明组件和指令的存根版本,这些组件和指令在测试中很少或没有作用。</target>
        </trans-unit>
        <trans-unit id="108b8931e71d306a76dfcfce9f527d5a471ad881" translate="yes" xml:space="preserve">
          <source>In the following code snippet, &lt;code&gt;HeroesService&lt;/code&gt; is an Angular service that depends upon an AngularJS service, &lt;code&gt;titleCase&lt;/code&gt;.</source>
          <target state="translated">在下面的代码片段中， &lt;code&gt;HeroesService&lt;/code&gt; 是一个Angular服务，它依赖于AngularJS服务 &lt;code&gt;titleCase&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6676bc73be4bf155526fd49d72a84de468c0b2c" translate="yes" xml:space="preserve">
          <source>In the following code snippet, &lt;code&gt;heroesService&lt;/code&gt; is a downgraded Angular service that we are accessing from AngularJS.</source>
          <target state="translated">在以下代码片段中， &lt;code&gt;heroesService&lt;/code&gt; 是我们从AngularJS访问的降级的Angular服务。</target>
        </trans-unit>
        <trans-unit id="bf4a28c55f909788b70b87596cb2bfc51aafb4fc" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we are configuring the &lt;code&gt;&lt;a href=&quot;../upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; with two modules: The AngularJS &lt;code&gt;ng1AppModule&lt;/code&gt;, which is the AngularJS part of our hybrid application and the &lt;code&gt;Ng2AppModule&lt;/code&gt;, which is the Angular part.</source>
          <target state="translated">在下面的代码片段中，我们使用两个模块配置 &lt;code&gt;&lt;a href=&quot;../upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; ：AngularJS &lt;code&gt;ng1AppModule&lt;/code&gt; ，它是我们的混合应用程序的AngularJS部分； &lt;code&gt;Ng2AppModule&lt;/code&gt; ，它是Angular部分。</target>
        </trans-unit>
        <trans-unit id="96af67a04e682b5cdce9f3c7c26caa5301abaf6c" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we are configuring the TestBed with two imports. The &lt;code&gt;Ng2AppModule&lt;/code&gt; is the Angular part of our hybrid application and the &lt;code&gt;ng1AppModule&lt;/code&gt; is the AngularJS part.</source>
          <target state="translated">在下面的代码片段中，我们使用两个导入配置TestBed。该 &lt;code&gt;Ng2AppModule&lt;/code&gt; 是我们的混合应用程序的角部位和 &lt;code&gt;ng1AppModule&lt;/code&gt; 是AngularJS一部分。</target>
        </trans-unit>
        <trans-unit id="1089fa92e7d1b3e9f8331b6e2a577f4fccb3f18e" translate="yes" xml:space="preserve">
          <source>In the following code, the pipe only calls the server when the requested URL changes and it caches the server response. The code uses the &lt;a href=&quot;http&quot;&gt;Angular http&lt;/a&gt; client to retrieve data:</source>
          <target state="translated">在下面的代码中，管道仅在请求的URL更改时才调用服务器，并缓存服务器响应。该代码使用&lt;a href=&quot;http&quot;&gt;Angular http&lt;/a&gt;客户端检索数据：</target>
        </trans-unit>
        <trans-unit id="03604da2fdf914c5e14b22f5a5170342aa59b0a0" translate="yes" xml:space="preserve">
          <source>In the following configuration, when navigating to &lt;code&gt;/team/11&lt;/code&gt;, the router instantiates the 'AllUsers' component.</source>
          <target state="translated">在以下配置中，当导航到 &lt;code&gt;/team/11&lt;/code&gt; 时，路由器会实例化&amp;ldquo; AllUsers&amp;rdquo;组件。</target>
        </trans-unit>
        <trans-unit id="ddd2e72487db9568e443e8ac17f1325efafcf0bf" translate="yes" xml:space="preserve">
          <source>In the following example, 'MainChild' and 'AuxChild' are siblings. When navigating to 'parent/10/(a//aux:b)', the route instantiates the main child and aux child components next to each other. For this to work, the application component must have the primary and aux outlets defined.</source>
          <target state="translated">在下面的例子中,&quot;MainChild &quot;和 &quot;AuxChild &quot;是兄弟姐妹。当导航到'parent/10/(a//aux:b)'时,路由将主子组件和辅助子组件实例化为彼此相邻。要做到这一点,应用组件必须定义了主子和辅助子插座。</target>
        </trans-unit>
        <trans-unit id="9b1fde84a1cd92229e619c7056dab800c00030c3" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;RepeatPipe&lt;/code&gt; repeats a given value a given number of times.</source>
          <target state="translated">在以下示例中， &lt;code&gt;RepeatPipe&lt;/code&gt; 将给定值重复给定次数。</target>
        </trans-unit>
        <trans-unit id="f35e0eba3b9006549e40ff4f159f53a0132367aa" translate="yes" xml:space="preserve">
          <source>In the following example, a component defines two output properties that create event emitters. When the title is clicked, the emitter emits an open or close event to toggle the current visibility state.</source>
          <target state="translated">在下面的例子中,一个组件定义了两个创建事件发射器的输出属性。当标题被点击时,发射器会发射一个打开或关闭事件来切换当前的可见性状态。</target>
        </trans-unit>
        <trans-unit id="daf2c7ac24c6883d82dbb39bacd2dd7aad01ed95" translate="yes" xml:space="preserve">
          <source>In the following example, a container element wraps a list of items stamped out by an &lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. The container element contains an animation trigger that will later be set to query for each of the inner items.</source>
          <target state="translated">在以下示例中，容器元素包装了 &lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 标记的项目列表。容器元素包含一个动画触发器，该触发器将在以后设置为查询每个内部项目。</target>
        </trans-unit>
        <trans-unit id="07d4a2f467fef38713e2368d4993474e3b3049f6" translate="yes" xml:space="preserve">
          <source>In the following example, however, Angular &lt;a href=&quot;security#sanitization-and-security-contexts&quot;&gt;sanitizes&lt;/a&gt; the values before displaying them.</source>
          <target state="translated">但是，在以下示例中，Angular 在显示值之前先对它们进行&lt;a href=&quot;security#sanitization-and-security-contexts&quot;&gt;消毒&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7002095cfd601df6d3724b03478da2bfdf6f6ef9" translate="yes" xml:space="preserve">
          <source>In the following example, supplying the 'full' &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; strategy ensures that the router applies the redirect if and only if navigating to '/'.</source>
          <target state="translated">在以下示例中，提供&amp;ldquo;完整&amp;rdquo; &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 策略可确保路由器仅在导航到&amp;ldquo; /&amp;rdquo;时才应用重定向。</target>
        </trans-unit>
        <trans-unit id="f03d09f2145f0f8488d0b621cb15ad8cbf98ece8" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata object and the class constructor tell Angular how to create and display an instance of &lt;code&gt;TypicalComponent&lt;/code&gt;.</source>
          <target state="translated">在以下示例中， &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 元数据对象和类构造函数告诉Angular如何创建和显示 &lt;code&gt;TypicalComponent&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="87c8b2b86175bcdf14e8fc1308d68a17c35a8a2f" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;childItem&lt;/code&gt; property of the &lt;code&gt;ItemDetailComponent&lt;/code&gt; expects a string, which is exactly what you're sending in the property binding:</source>
          <target state="translated">在下面的例子中， &lt;code&gt;childItem&lt;/code&gt; 的财产 &lt;code&gt;ItemDetailComponent&lt;/code&gt; 需要一个字符串，而这正是你的属性绑定发送的内容：</target>
        </trans-unit>
        <trans-unit id="fe0c10c153d72102ce705c591678f282d3984439" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;person&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; properties are always set together, implying that &lt;code&gt;address&lt;/code&gt; is always non-null if &lt;code&gt;person&lt;/code&gt; is non-null. There is no convenient way to describe this constraint to TypeScript and the template compiler, but the error is suppressed in the example by using &lt;code&gt;address!.street&lt;/code&gt;.</source>
          <target state="translated">在以下示例中， &lt;code&gt;person&lt;/code&gt; 和 &lt;code&gt;address&lt;/code&gt; 属性始终设置在一起，这意味着如果 &lt;code&gt;person&lt;/code&gt; 为非空，则 &lt;code&gt;address&lt;/code&gt; 始终为非空。没有方便的方法来描述TypeScript和模板编译器的此约束，但是在示例中，使用 &lt;code&gt;address!.street&lt;/code&gt; 可以消除该错误。</target>
        </trans-unit>
        <trans-unit id="5a8c2c89e4051bc66352ee40fcff2387a159fe44" translate="yes" xml:space="preserve">
          <source>In the following example, the dependency can be resolved by the local injector when instantiating the class itself, but not when instantiating a child.</source>
          <target state="translated">在下面的例子中,当实例化类本身时,依赖关系可以由本地注入器解决,但实例化子类时却不能。</target>
        </trans-unit>
        <trans-unit id="6642cb00d9e5a2ab01358f07d9d792e0040e3173" translate="yes" xml:space="preserve">
          <source>In the following example, the dependency can be resolved when instantiating a child, but not when instantiating the class itself.</source>
          <target state="translated">在下面的例子中,在实例化子类时可以解决依赖关系,但在实例化类本身时不能解决。</target>
        </trans-unit>
        <trans-unit id="7e4d63a4f8062e875d1e6ed5ee6b5e59adf2c961" translate="yes" xml:space="preserve">
          <source>In the following example, the error &lt;code&gt;Property addresss does not exist&lt;/code&gt; is suppressed by casting &lt;code&gt;person&lt;/code&gt; to the &lt;code&gt;any&lt;/code&gt; type.</source>
          <target state="translated">在以下示例中，通过将 &lt;code&gt;person&lt;/code&gt; 强制转换为 &lt;code&gt;any&lt;/code&gt; 类型，可以抑制错误&amp;ldquo; &lt;code&gt;Property addresss does not exist&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7663b43194ad1c35a2249f294f3b0c9a0ab1d18b" translate="yes" xml:space="preserve">
          <source>In the following example, the mock is a spy object.</source>
          <target state="translated">在下面的例子中,mock是一个间谍对象。</target>
        </trans-unit>
        <trans-unit id="2b33cf5a735f73710d739825bb0ebb9e113d2114" translate="yes" xml:space="preserve">
          <source>In the following example, the offset values describe when each &lt;code&gt;backgroundColor&lt;/code&gt; value is applied. The color is red at the start, and changes to blue when 20% of the total time has elapsed.</source>
          <target state="translated">在以下示例中，偏移值描述何时应用每个 &lt;code&gt;backgroundColor&lt;/code&gt; 值。开始时颜色为红色，并且在总时间的20％过去后变为蓝色。</target>
        </trans-unit>
        <trans-unit id="24025e5e5f590539cab86355ec040952c01584ba" translate="yes" xml:space="preserve">
          <source>In the following example, the optional, injected &lt;code&gt;UserServiceConfig&lt;/code&gt; extends the greeting &lt;code&gt;UserService&lt;/code&gt;. If a &lt;code&gt;UserServiceConfig&lt;/code&gt; exists, the &lt;code&gt;UserService&lt;/code&gt; sets the user name from that config.</source>
          <target state="translated">在以下示例中，可选的注入 &lt;code&gt;UserServiceConfig&lt;/code&gt; 扩展了问候 &lt;code&gt;UserService&lt;/code&gt; 。如果存在 &lt;code&gt;UserServiceConfig&lt;/code&gt; ，则 &lt;code&gt;UserService&lt;/code&gt; 通过该配置设置用户名。</target>
        </trans-unit>
        <trans-unit id="79980625496444d650c75674c1a6f2e716b5d188" translate="yes" xml:space="preserve">
          <source>In the following example, the parent &lt;code&gt;AlexComponent&lt;/code&gt; has several children including a &lt;code&gt;CathyComponent&lt;/code&gt;:</source>
          <target state="translated">在以下示例中，父 &lt;code&gt;AlexComponent&lt;/code&gt; 有多个子级,其中包括 &lt;code&gt;CathyComponent&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="97bde64184548aee2d9e6e03dbad3ef9c4f94d3b" translate="yes" xml:space="preserve">
          <source>In the following example, the property takes an enumerated value, so the schematic automatically chooses the list type, and creates a menu from the possible values.</source>
          <target state="translated">在下面的示例中,该属性取值为枚举值,因此原理图自动选择列表类型,并从可能的值中创建一个菜单。</target>
        </trans-unit>
        <trans-unit id="c54e3333d43519134c5d78d38632858279c3d079" translate="yes" xml:space="preserve">
          <source>In the following example, the two-way binding means that &lt;code&gt;optionName&lt;/code&gt; should be written when the &lt;code&gt;valueChange&lt;/code&gt; event fires.</source>
          <target state="translated">在下面的示例中，双向绑定意味着在 &lt;code&gt;valueChange&lt;/code&gt; 事件触发时应该写入 &lt;code&gt;optionName&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="681d32dc4e5adc22dab536e5b1be6eebdc4f1f76" translate="yes" xml:space="preserve">
          <source>In the following example, using groups on both &lt;code&gt;:enter&lt;/code&gt; and &lt;code&gt;:leave&lt;/code&gt; allow for two different timing configurations. They're applied to the same element in parallel, but run independently.</source>
          <target state="translated">在下面的示例中，在 &lt;code&gt;:enter&lt;/code&gt; 和 &lt;code&gt;:leave&lt;/code&gt; 上同时使用组允许两种不同的时序配置。它们并行应用于同一元素，但独立运行。</target>
        </trans-unit>
        <trans-unit id="cd98385101f7ec15002cf4d6b360a40c88e98235" translate="yes" xml:space="preserve">
          <source>In the following section, validation is performed asynchronously to ensure that our heroes pick an alter ego that is not already taken. New heroes are constantly enlisting and old heroes are leaving the service. That means that we do not have the list of available alter egos ahead of time.</source>
          <target state="translated">在下面的部分中,异步进行验证,以确保我们的英雄选择一个尚未被选中的另一个自我。新的英雄在不断地入伍,老的英雄也在不断地离队。这意味着我们并不能提前获得可用的分身列表。</target>
        </trans-unit>
        <trans-unit id="6c3b3d738b040ea34330a9874710677277ec5aa4" translate="yes" xml:space="preserve">
          <source>In the following section, we will make sure that our heroes do not reveal their true identities by filling out the Hero Form. We will do that by validating that the hero names and alter egos do not match.</source>
          <target state="translated">在下面的部分,我们将确保我们的英雄不会因为填写英雄表而暴露他们的真实身份。我们将通过验证英雄的名字和另一个自我是否匹配来实现。</target>
        </trans-unit>
        <trans-unit id="d5e8ea1209a297ac53c182cdecd191c2bcbcffe8" translate="yes" xml:space="preserve">
          <source>In the following sections, we will create a new schematics collection using the CLI in order to introduce the files and file structure, and some of the basic concepts.</source>
          <target state="translated">在下面的章节中,我们将使用CLI创建一个新的原理图集合,以介绍文件和文件结构,以及一些基本概念。</target>
        </trans-unit>
        <trans-unit id="0acace1863c72c536f219d9c87ba3c000a59f9d9" translate="yes" xml:space="preserve">
          <source>In the following snippet, &lt;code&gt;{{ currentCustomer }}&lt;/code&gt; is an example of interpolation.</source>
          <target state="translated">在以下代码段中， &lt;code&gt;{{ currentCustomer }}&lt;/code&gt; 是插值的示例。</target>
        </trans-unit>
        <trans-unit id="f92a97dafecf0ff63df469ad3dbf2f7287a1ee03" translate="yes" xml:space="preserve">
          <source>In the following typical example, the &lt;code&gt;Logger&lt;/code&gt; class itself provides a &lt;code&gt;Logger&lt;/code&gt; instance.</source>
          <target state="translated">在以下典型示例中， &lt;code&gt;Logger&lt;/code&gt; 类本身提供了一个 &lt;code&gt;Logger&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="9263e2adc28d440e0cdfa9d945ab8ceef993f6ee" translate="yes" xml:space="preserve">
          <source>In the initial route configuration, you provided a simple setup with two routes used to configure the application for routing. This is perfectly fine for simple routing. As the application grows and you make use of more &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; features, such as guards, resolvers, and child routing, you'll naturally want to refactor the routing configuration into its own file. We recommend moving the routing information into a special-purpose module called a &lt;em&gt;Routing Module&lt;/em&gt;.</source>
          <target state="translated">在初始路由配置中，您提供了带有两个路由的简单设置，用于配置应用程序进行路由。这对于简单的路由来说是非常好的。随着应用程序的增长以及您使用更多的 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 功能（例如防护，解析器和子路由），您自然会希望将路由配置重构到其自己的文件中。我们建议将路由信息移入专用模块，称为&lt;em&gt;路由模块&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8939bb7d20361052e28964c91af95d20bb24f0bb" translate="yes" xml:space="preserve">
          <source>In the logical tree, this would be represented as follows:</source>
          <target state="translated">在逻辑树中,这将被表示为:</target>
        </trans-unit>
        <trans-unit id="e61466e206b3ec0ac4d4feec978969505b42cf15" translate="yes" xml:space="preserve">
          <source>In the marketplace, search for Angular Language Service extension, and click the &lt;strong&gt;Install&lt;/strong&gt; button.</source>
          <target state="translated">在市场上，搜索Angular Language Service扩展，然后单击&amp;ldquo; &lt;strong&gt;安装&amp;rdquo;&lt;/strong&gt;按钮。</target>
        </trans-unit>
        <trans-unit id="135913a2ad9622082620cc8052cee479a2283783" translate="yes" xml:space="preserve">
          <source>In the microsyntax expression, set &lt;code&gt;trackBy&lt;/code&gt; to the &lt;code&gt;trackByItems()&lt;/code&gt; method.</source>
          <target state="translated">在微语法表达式中，将 &lt;code&gt;trackBy&lt;/code&gt; 设置为 &lt;code&gt;trackByItems()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="aeae7e3450618ec2a6c67802527cba205d86410b" translate="yes" xml:space="preserve">
          <source>In the new files, change every mention of &quot;hero&quot; to &quot;crisis&quot;, and &quot;heroes&quot; to &quot;crises&quot;.</source>
          <target state="translated">在新的档案中,把每一个提到 &quot;英雄 &quot;的地方都改为 &quot;危机&quot;,把 &quot;英雄 &quot;改为 &quot;危机&quot;。</target>
        </trans-unit>
        <trans-unit id="cab7ba9e3cb300cd56f89341c1fe5eaa7652a159" translate="yes" xml:space="preserve">
          <source>In the new version, you import the Angular HTTP module and call its &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service instead of &lt;code&gt;ngResource&lt;/code&gt;.</source>
          <target state="translated">在新版本中，您将导入Angular HTTP模块并调用其 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 服务而不是 &lt;code&gt;ngResource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa45dc36ef2e509c03cb485f20fb4a25dc19e3d0" translate="yes" xml:space="preserve">
          <source>In the next example, the component uses the default, aggressive change detection strategy to monitor and update its display of every hero in the &lt;code&gt;heroes&lt;/code&gt; array. Here's the template:</source>
          <target state="translated">在下一个示例中，该组件使用默认的主动更改检测策略来监视和更新 &lt;code&gt;heroes&lt;/code&gt; 数组中每个英雄的显示。这是模板：</target>
        </trans-unit>
        <trans-unit id="21babd8c9e3406ba32d7975f643689c6321dff5c" translate="yes" xml:space="preserve">
          <source>In the next section, define an &lt;code&gt;onSelect()&lt;/code&gt; method in &lt;code&gt;HeroesComponent&lt;/code&gt; to display the hero that was defined in the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; expression.</source>
          <target state="translated">在下一节中，在 &lt;code&gt;HeroesComponent&lt;/code&gt; 中定义一个 &lt;code&gt;onSelect()&lt;/code&gt; 方法以显示在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;表达式中定义的英雄。</target>
        </trans-unit>
        <trans-unit id="0e27fa6280b06a48c06de4d2223a0f2a93964163" translate="yes" xml:space="preserve">
          <source>In the normal course of HTML development, you create a visual structure with HTML elements, and you modify those elements by setting element attributes with string constants.</source>
          <target state="translated">在正常的HTML开发过程中,你会用HTML元素创建一个视觉结构,并通过设置元素属性与字符串常量来修改这些元素。</target>
        </trans-unit>
        <trans-unit id="5df49583093875b25bd10a8f1c9aa47bad102a04" translate="yes" xml:space="preserve">
          <source>In the parent</source>
          <target state="translated">在母体中</target>
        </trans-unit>
        <trans-unit id="4ed3fcdf2f49b1de9c02b587cd3980ece017f8c4" translate="yes" xml:space="preserve">
          <source>In the parent's template</source>
          <target state="translated">在父母的模板中</target>
        </trans-unit>
        <trans-unit id="12b331a031d5526e2ce679556bb4798bc27c1678" translate="yes" xml:space="preserve">
          <source>In the preview pane, hold the pointer over a product name to see the bound name property value, which is the product name plus the word &quot;details&quot;. Interpolation &lt;code&gt;{{ }}&lt;/code&gt; lets you render the property value as text; property binding &lt;code&gt;[ ]&lt;/code&gt; lets you use the property value in a template expression.</source>
          <target state="translated">在预览窗格中，将鼠标指针悬停在产品名称上方，以查看绑定名称属性值，该值是产品名称加上单词&amp;ldquo; details&amp;rdquo;。插值 &lt;code&gt;{{ }}&lt;/code&gt; 可让您将属性值呈现为文本；属性绑定 &lt;code&gt;[ ]&lt;/code&gt; 使您可以在模板表达式中使用属性值。</target>
        </trans-unit>
        <trans-unit id="f527efcbc5138dc59f029ba483544b213cb3a7c6" translate="yes" xml:space="preserve">
          <source>In the preview pane, you should see a URL that looks like &lt;code&gt;https://&amp;lt;Project ID&amp;gt;.stackblitz.io&lt;/code&gt;.</source>
          <target state="translated">在预览窗格中，您应该看到一个类似于 &lt;code&gt;https://&amp;lt;Project ID&amp;gt;.stackblitz.io&lt;/code&gt; 的URL。</target>
        </trans-unit>
        <trans-unit id="9b0f4cf5ae261da923380b748662b8cfdefddb57" translate="yes" xml:space="preserve">
          <source>In the previous code sample, the second &lt;code&gt;fetch&lt;/code&gt; pipe binding demonstrates more pipe chaining. It displays the same hero data in JSON format by chaining through to the built-in &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在先前的代码示例中，第二个 &lt;code&gt;fetch&lt;/code&gt; 管道绑定演示了更多的管道链接。通过链接到内置 &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; ,它以JSON格式显示相同的英雄数据。</target>
        </trans-unit>
        <trans-unit id="2ad8b81ae652063e5ec08425ca076c90868e19f1" translate="yes" xml:space="preserve">
          <source>In the previous example, the current state of the input box is lost if the user mouses away and clicks elsewhere on the page without first pressing &lt;em&gt;Enter&lt;/em&gt;. The component's &lt;code&gt;value&lt;/code&gt; property is updated only when the user presses &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">在上一个示例中，如果用户将鼠标移开并单击页面上的其他位置而没有先按&lt;em&gt;Enter&lt;/em&gt;，则输入框的当前状态会丢失。仅当用户按下&lt;em&gt;Enter&lt;/em&gt;时，组件的 &lt;code&gt;value&lt;/code&gt; 属性才会更新。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="763460cc5323fe0919754ecc16f1acecffc53597" translate="yes" xml:space="preserve">
          <source>In the previous example, the then-clause template is specified inline, as the content of the tag that contains the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive. You can also specify a template that is defined externally, by referencing a labeled &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element. When you do this, you can change which template to use at runtime, as shown in the following example.</source>
          <target state="translated">在上一个示例中，内联模板被内联指定为包含 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 指令的标记的内容。您还可以通过引用带标签的 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素来指定在外部定义的模板。执行此操作时，可以更改在运行时使用哪个模板，如以下示例所示。</target>
        </trans-unit>
        <trans-unit id="4a19249881705cdc1b85acc1634672c260e4f10e" translate="yes" xml:space="preserve">
          <source>In the previous section, we saw a simple two-state transition. Now we'll create an animation with multiple steps run in sequence using &lt;em&gt;keyframes&lt;/em&gt;.</source>
          <target state="translated">在上一节中，我们看到了一个简单的两态转换。现在，我们将创建一个动画，并使用&lt;em&gt;关键帧&lt;/em&gt;按顺序运行多个步骤。</target>
        </trans-unit>
        <trans-unit id="75e13f3b00323a0edd780a29605d91a4037e1e98" translate="yes" xml:space="preserve">
          <source>In the product alert template, &lt;code&gt;product-alerts.component.html&lt;/code&gt;, update the &quot;Notify Me&quot; button with an event binding to call the &lt;code&gt;notify.emit()&lt;/code&gt; method.</source>
          <target state="translated">在产品警报模板 &lt;code&gt;product-alerts.component.html&lt;/code&gt; 中，使用事件绑定更新&amp;ldquo; Notify Me&amp;rdquo;按钮，以调用 &lt;code&gt;notify.emit()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="ea818ef7af8d7132c773be77df3abe5612f313e0" translate="yes" xml:space="preserve">
          <source>In the real world, you might have to accumulate the users changes. You might have to validate across fields. You might have to validate on the server. You might have to hold changes in a pending state until the user confirms them &lt;em&gt;as a group&lt;/em&gt; or cancels and reverts all changes.</source>
          <target state="translated">在现实世界中，您可能必须累积用户更改。您可能必须跨字段进行验证。您可能必须在服务器上进行验证。您可能必须将更改保持为挂起状态，直到用户将它们确认&lt;em&gt;为一个组&lt;/em&gt;或取消并还原所有更改。</target>
        </trans-unit>
        <trans-unit id="04ff1f44e350c222b1e5578340bd8b97370a5ce6" translate="yes" xml:space="preserve">
          <source>In the root folder of your e2e tests project, create a new file named &lt;code&gt;protractor-ci.conf.js&lt;/code&gt;. This new file extends the original &lt;code&gt;protractor.conf.js&lt;/code&gt;.</source>
          <target state="translated">在e2e测试项目的根文件夹中，创建一个名为 &lt;code&gt;protractor-ci.conf.js&lt;/code&gt; 的新文件。这个新文件扩展了原始的 &lt;code&gt;protractor.conf.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e83762a98939c0a3a7a3035af5d78fda350610db" translate="yes" xml:space="preserve">
          <source>In the same file (&lt;code&gt;HeroesComponent&lt;/code&gt; class), define a component property called &lt;code&gt;heroes&lt;/code&gt; to expose the &lt;code&gt;HEROES&lt;/code&gt; array for binding.</source>
          <target state="translated">在同一文件（ &lt;code&gt;HeroesComponent&lt;/code&gt; 类），定义组件属性称为 &lt;code&gt;heroes&lt;/code&gt; 以暴露 &lt;code&gt;HEROES&lt;/code&gt; 阵列结合。</target>
        </trans-unit>
        <trans-unit id="de3aa6f39e38ab8dae66e318d5fbdd408f9fe728" translate="yes" xml:space="preserve">
          <source>In the second approach, add &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;TestBed.schemas&lt;/code&gt; metadata.</source>
          <target state="translated">在第二种方法中，将 &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;TestBed.schemas&lt;/code&gt; 元数据。</target>
        </trans-unit>
        <trans-unit id="431f8caabee69341acea4b6f059e0ce718e1b02a" translate="yes" xml:space="preserve">
          <source>In the service worker configuration file &lt;code&gt;ngsw-config.json&lt;/code&gt;, &lt;code&gt;versionedFiles&lt;/code&gt; and &lt;code&gt;files&lt;/code&gt; have the same behavior. As of v6, &lt;code&gt;versionedFiles&lt;/code&gt; is deprecated; use &lt;code&gt;files&lt;/code&gt; instead.</source>
          <target state="translated">在服务工作者配置文件 &lt;code&gt;ngsw-config.json&lt;/code&gt; 中， &lt;code&gt;versionedFiles&lt;/code&gt; 和 &lt;code&gt;files&lt;/code&gt; 具有相同的行为。从v6开始， &lt;code&gt;versionedFiles&lt;/code&gt; 已弃用；使用 &lt;code&gt;files&lt;/code&gt; 代替。</target>
        </trans-unit>
        <trans-unit id="bc40e4dc159163c26df92dd1a1e680e199a71f26" translate="yes" xml:space="preserve">
          <source>In the short form, the type is inferred from the property's type and constraints.</source>
          <target state="translated">简言之,类型是由属性的类型和约束条件推断出来的。</target>
        </trans-unit>
        <trans-unit id="d0f5a292f2cae7ab9d3d79db4add6202faa4eff6" translate="yes" xml:space="preserve">
          <source>In the table below, you can find a list of packages which implement deployment functionality to different platforms. The &lt;code&gt;deploy&lt;/code&gt; command for each package may require different command line options. You can read more by following the links associated with the package names below:</source>
          <target state="translated">在下表中，您可以找到实现了到不同平台的部署功能的软件包列表。每个软件包的 &lt;code&gt;deploy&lt;/code&gt; 命令可能需要不同的命令行选项。您可以通过以下与包名称相关的链接来阅读更多内容：</target>
        </trans-unit>
        <trans-unit id="80a71042ab5f19d1b606e00cd661194ad1abb6c7" translate="yes" xml:space="preserve">
          <source>In the template tree, select &lt;code&gt;Templates&lt;/code&gt; | &lt;code&gt;Visual C#&lt;/code&gt; (or &lt;code&gt;Visual Basic&lt;/code&gt;) | &lt;code&gt;Web&lt;/code&gt;.</source>
          <target state="translated">在模板树中，选择&amp;ldquo; &lt;code&gt;Templates&lt;/code&gt; |&amp;ldquo; 模板&amp;rdquo;。 &lt;code&gt;Visual C#&lt;/code&gt; （或 &lt;code&gt;Visual Basic&lt;/code&gt; ）| &lt;code&gt;Web&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53cc553ac138c2e23462667f98a5b59c505018c2" translate="yes" xml:space="preserve">
          <source>In the template type-checking phase, the Angular template compiler uses the TypeScript compiler to validate the binding expressions in templates. Enable this phase explicitly by adding the compiler option &lt;code&gt;&quot;fullTemplateTypeCheck&quot;&lt;/code&gt; in the &lt;code&gt;&quot;angularCompilerOptions&quot;&lt;/code&gt; of the project's &lt;code&gt;tsconfig.json&lt;/code&gt; (see &lt;a href=&quot;angular-compiler-options&quot;&gt;Angular Compiler Options&lt;/a&gt;).</source>
          <target state="translated">在模板类型检查阶段，Angular模板编译器使用TypeScript编译器来验证模板中的绑定表达式。通过将编译器选项明确启用阶段 &lt;code&gt;&quot;fullTemplateTypeCheck&quot;&lt;/code&gt; 在 &lt;code&gt;&quot;angularCompilerOptions&quot;&lt;/code&gt; 该项目的 &lt;code&gt;tsconfig.json&lt;/code&gt; （见&lt;a href=&quot;angular-compiler-options&quot;&gt;角编译器选项&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a81a0084e724fa8d67181befb8d1973d9b649133" translate="yes" xml:space="preserve">
          <source>In the template, each control is displayed as a separate input field.</source>
          <target state="translated">在模板中,每个控件都作为一个独立的输入字段显示。</target>
        </trans-unit>
        <trans-unit id="4d5b02da4c4c29131d5446cd9c56b5adca992c39" translate="yes" xml:space="preserve">
          <source>In the template, the &lt;code&gt;aria-label&lt;/code&gt; attribute ensures that the control is accessible to screen readers.</source>
          <target state="translated">在模板中， &lt;code&gt;aria-label&lt;/code&gt; 属性可确保屏幕阅读器可以访问该控件。</target>
        </trans-unit>
        <trans-unit id="3123807d4c800f4e675338a3f651fcf553e5eb18" translate="yes" xml:space="preserve">
          <source>In the terminal window at the root of your project, install the &lt;code&gt;devDependencies&lt;/code&gt; with &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;:</source>
          <target state="translated">在项目根目录的终端窗口中，使用 &lt;code&gt;npm&lt;/code&gt; 或 &lt;code&gt;yarn&lt;/code&gt; 安装 &lt;code&gt;devDependencies&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="65a72a975b3735dcf036c8f8c9493f16a7f24225" translate="yes" xml:space="preserve">
          <source>In the tree on the left, select &lt;code&gt;Projects and Solutions&lt;/code&gt; | &lt;code&gt;External Web Tools&lt;/code&gt;.</source>
          <target state="translated">在左侧的树中，选择&amp;ldquo; &lt;code&gt;Projects and Solutions&lt;/code&gt; 。 &lt;code&gt;External Web Tools&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5953890c3c12b1a1d4e4941138925956ddcb1936" translate="yes" xml:space="preserve">
          <source>In these cases, you can use a special wildcard &lt;code&gt;*&lt;/code&gt; property value under &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt;, so that the value of that particular style property is computed at runtime and then plugged into the animation.</source>
          <target state="translated">在这些情况下，可以在 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; （）下使用特殊的通配符 &lt;code&gt;*&lt;/code&gt; 属性值，以便在运行时计算该特定样式属性的值，然后将其插入动画中。</target>
        </trans-unit>
        <trans-unit id="2e96b145ad3ef101a9a5349da867c2602f97778e" translate="yes" xml:space="preserve">
          <source>In these situations, it is possible to &lt;em&gt;upgrade&lt;/em&gt; an AngularJS provider to Angular. This makes it possible to then inject it somewhere in Angular code. For example, you might have a service called &lt;code&gt;HeroesService&lt;/code&gt; in AngularJS:</source>
          <target state="translated">在这些情况下，可以&lt;em&gt;将&lt;/em&gt; AngularJS提供程序&lt;em&gt;升级&lt;/em&gt;到Angular。这样便可以将其注入Angular代码中的某个位置。例如，您可能在AngularJS中有一个名为 &lt;code&gt;HeroesService&lt;/code&gt; 的服务：</target>
        </trans-unit>
        <trans-unit id="540f547baf27d40ff42671c435006ba47fae2226" translate="yes" xml:space="preserve">
          <source>In this &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial, you will build an app that helps a staffing agency manage its stable of heroes.</source>
          <target state="translated">在本&lt;em&gt;《英雄之旅》&lt;/em&gt;教程中，您将构建一个应用程序，以帮助人事代理机构管理其稳定的英雄。</target>
        </trans-unit>
        <trans-unit id="e98ea4cfef6e5f121ccbfc306924f5544139d4ea" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is displaying an array, but &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; can repeat items for any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterable&lt;/a&gt; object.</source>
          <target state="translated">在这种情况下， &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 将显示一个数组，但是 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 可以为任何&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;可迭代&lt;/a&gt;对象重复项。</target>
        </trans-unit>
        <trans-unit id="6b79b6ff431d28fff0de7299c5e8f98be33e351c" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorates the property &lt;code&gt;item&lt;/code&gt;, which has a type of &lt;code&gt;string&lt;/code&gt;, however, &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; properties can have any type, such as &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, or &lt;code&gt;object&lt;/code&gt;. The value for &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; will come from the parent component, which the next section covers.</source>
          <target state="translated">在这种情况下， &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰具有 &lt;code&gt;string&lt;/code&gt; 类型的属性 &lt;code&gt;item&lt;/code&gt; ，但是， &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）属性可以具有任何类型，例如 &lt;code&gt;number&lt;/code&gt; ， &lt;code&gt;string&lt;/code&gt; ， &lt;code&gt;boolean&lt;/code&gt; 或 &lt;code&gt;object&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 的值将来自下一部分将介绍的父组件。</target>
        </trans-unit>
        <trans-unit id="eb00ef72a4a1581ddb03343a0b1a91065133fc3f" translate="yes" xml:space="preserve">
          <source>In this case, the URL is relative to the CSS file into which you're importing.</source>
          <target state="translated">在这种情况下,URL是相对于你要导入的CSS文件而言的。</target>
        </trans-unit>
        <trans-unit id="28c41d5d9a09f8ff971841552d898d001d4abc7f" translate="yes" xml:space="preserve">
          <source>In this case, the compiler doesn't understand how to inject something with the &lt;code&gt;Window&lt;/code&gt; token.</source>
          <target state="translated">在这种情况下，编译器无法理解如何使用 &lt;code&gt;Window&lt;/code&gt; 令牌注入某些内容。</target>
        </trans-unit>
        <trans-unit id="9c70127c467d27d51e62747cdfd36e0f50102f8e" translate="yes" xml:space="preserve">
          <source>In this case, the installed &lt;code&gt;@types/jquery&lt;/code&gt; doesn't include &lt;code&gt;myPlugin&lt;/code&gt;, so you need to add an interface in &lt;code&gt;src/typings.d.ts&lt;/code&gt;. For example:</source>
          <target state="translated">在这种情况下，已安装的 &lt;code&gt;@types/jquery&lt;/code&gt; 不包含 &lt;code&gt;myPlugin&lt;/code&gt; ，因此您需要在 &lt;code&gt;src/typings.d.ts&lt;/code&gt; 中添加一个接口。例如：</target>
        </trans-unit>
        <trans-unit id="ef9a0cfbc3978a23bac648732aecf66dda795c0d" translate="yes" xml:space="preserve">
          <source>In this case, the value you'd get for &lt;code&gt;emoji&lt;/code&gt; would be &lt;code&gt;🌿&lt;/code&gt; (fern), not &lt;code&gt;🍁&lt;/code&gt; (maple leaf).</source>
          <target state="translated">在这种情况下，您获得的 &lt;code&gt;emoji&lt;/code&gt; 值将为 &lt;code&gt;🌿&lt;/code&gt; （蕨类），而不是 &lt;code&gt;🍁&lt;/code&gt; （枫叶）。</target>
        </trans-unit>
        <trans-unit id="4439bb06c28a004aad6a895a5a28f3b2a6d5d2b6" translate="yes" xml:space="preserve">
          <source>In this contrived example, &lt;code&gt;SortedHeroesComponent&lt;/code&gt; inherits from &lt;code&gt;HeroesBaseComponent&lt;/code&gt; to display a &lt;em&gt;sorted&lt;/em&gt; list of heroes.</source>
          <target state="translated">在这个人为的示例中， &lt;code&gt;SortedHeroesComponent&lt;/code&gt; 继承自 &lt;code&gt;HeroesBaseComponent&lt;/code&gt; ,以显示英雄的&lt;em&gt;排序&lt;/em&gt;列表。</target>
        </trans-unit>
        <trans-unit id="b5d0fc9c03a45683f8fef40516bc682df34feb20" translate="yes" xml:space="preserve">
          <source>In this demo, the &lt;code&gt;highlightColor&lt;/code&gt; property is an &lt;strong&gt;&lt;em&gt;input&lt;/em&gt;&lt;/strong&gt; property of the &lt;code&gt;HighlightDirective&lt;/code&gt;. You've seen it applied without an alias:</source>
          <target state="translated">在此演示中， &lt;code&gt;highlightColor&lt;/code&gt; 属性是 &lt;code&gt;HighlightDirective&lt;/code&gt; 的&lt;strong&gt;&lt;em&gt;输入&lt;/em&gt;&lt;/strong&gt;属性。您已经看到了没有别名的情况：</target>
        </trans-unit>
        <trans-unit id="c8f2e72386b9b53a8533513dbcfa25c5d02a6eb9" translate="yes" xml:space="preserve">
          <source>In this example debug file, the update check is currently scheduled, as explained the next section.</source>
          <target state="translated">在这个例子的调试文件中,目前正在安排更新检查,下一节会解释。</target>
        </trans-unit>
        <trans-unit id="02d2c8724e6a540145a981a2031d64f7d39e59d8" translate="yes" xml:space="preserve">
          <source>In this example it is recommended to include the checking of &lt;code&gt;address&lt;/code&gt; in the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; as shown below:</source>
          <target state="translated">在此示例中，建议将 &lt;code&gt;address&lt;/code&gt; 检查包括在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 中，如下所示：</target>
        </trans-unit>
        <trans-unit id="b620465ba0900e951bd37550e9f4865b71f4e6f7" translate="yes" xml:space="preserve">
          <source>In this example you can see that we must derive from the &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; base class but also provide an &lt;a href=&quot;../../core/directive&quot;&gt;`@Directive`&lt;/a&gt; decorator. This is because the AoT compiler requires that this information is statically available at compile time.</source>
          <target state="translated">在此示例中，您可以看到我们必须派生自 &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; 基类，而且还必须提供一个&lt;a href=&quot;../../core/directive&quot;&gt;@Directive&lt;/a&gt;装饰器。这是因为AoT编译器要求此信息在编译时静态可用。</target>
        </trans-unit>
        <trans-unit id="999cba4e5d3608eb750ca4d8169b051362b41fc2" translate="yes" xml:space="preserve">
          <source>In this example you upgraded a service class. You can use a TypeScript type annotation when you inject it. While it doesn't affect how the dependency is handled, it enables the benefits of static type checking. This is not required though, and any AngularJS service, factory, or provider can be upgraded.</source>
          <target state="translated">在这个例子中,你升级了一个服务类。当你注入它时,你可以使用TypeScript类型注解。虽然它不会影响依赖关系的处理方式,但它可以实现静态类型检查的好处。不过这并不是必须的,任何AngularJS服务、工厂或提供者都可以升级。</target>
        </trans-unit>
        <trans-unit id="7763722043d3b5d9efcc966176e2b82c6d6a5d7f" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;AppComponent&lt;/code&gt; specifies a different &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; object (&lt;code&gt;currentItem&lt;/code&gt;) and passes it to the nested &lt;code&gt;ListItemComponent&lt;/code&gt;. &lt;code&gt;ListItemComponent&lt;/code&gt; was able to use &lt;code&gt;currentItem&lt;/code&gt; because it matches what an &lt;code&gt;Item&lt;/code&gt; object is according to &lt;code&gt;item.ts&lt;/code&gt;. The &lt;code&gt;item.ts&lt;/code&gt; file is where &lt;code&gt;ListItemComponent&lt;/code&gt; gets its definition of an &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在此示例中， &lt;code&gt;AppComponent&lt;/code&gt; 指定另一个 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 对象（ &lt;code&gt;currentItem&lt;/code&gt; ），并将其传递给嵌套的 &lt;code&gt;ListItemComponent&lt;/code&gt; 。 &lt;code&gt;ListItemComponent&lt;/code&gt; 之所以能够使用 &lt;code&gt;currentItem&lt;/code&gt; ,是因为它与 &lt;code&gt;item.ts&lt;/code&gt; 所定义的 &lt;code&gt;Item&lt;/code&gt; 对象相匹配。该 &lt;code&gt;item.ts&lt;/code&gt; 文件是 &lt;code&gt;ListItemComponent&lt;/code&gt; 得到它的定义 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b1113ef229de9681ba37dd24148caf319decf0c" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;HeroBiosComponent&lt;/code&gt; presents three instances of &lt;code&gt;HeroBioComponent&lt;/code&gt;.</source>
          <target state="translated">在这个例子中， &lt;code&gt;HeroBiosComponent&lt;/code&gt; 提出的三个实例 &lt;code&gt;HeroBioComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bcdd5ca8e804eec05ea345bce2cc9b339710030a" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;address &lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; combines the current &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; controls with the new &lt;code&gt;street&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;zip&lt;/code&gt; controls. Even though the &lt;code&gt;address&lt;/code&gt; element in the form group is a child of the overall &lt;code&gt;profileForm&lt;/code&gt; element in the form group, the same rules apply with value and status changes. Changes in status and value from the nested form group propagate to the parent form group, maintaining consistency with the overall model.</source>
          <target state="translated">在此示例中， &lt;code&gt;address &lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; 将当前的 &lt;code&gt;firstName&lt;/code&gt; 和 &lt;code&gt;lastName&lt;/code&gt; 控件与新的 &lt;code&gt;street&lt;/code&gt; ， &lt;code&gt;city&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;zip&lt;/code&gt; 控件组合在一起。即使表单组中的 &lt;code&gt;address&lt;/code&gt; 元素是表单组中整个 &lt;code&gt;profileForm&lt;/code&gt; 元素的子元素，对于值和状态的更改也适用相同的规则。嵌套表单组中状态和值的更改会传播到父表单组，从而与整个模型保持一致。</target>
        </trans-unit>
        <trans-unit id="7cee86bfe07ecf66a51c7598a472099fbbc80f94" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;isStable&lt;/code&gt; will never emit &lt;code&gt;true&lt;/code&gt;, and the trace &quot;App is stable now&quot; will never get logged.</source>
          <target state="translated">在此示例中， &lt;code&gt;isStable&lt;/code&gt; 将永远不会发出 &lt;code&gt;true&lt;/code&gt; ，并且永远不会记录跟踪&amp;ldquo; App现在稳定了&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="47e50b8623e6a33c605f9c63cfc99fe2a4fd5105" translate="yes" xml:space="preserve">
          <source>In this example, a &lt;code&gt;CounterComponent&lt;/code&gt; logs a change (via &lt;code&gt;ngOnChanges&lt;/code&gt;) every time the parent component increments its input counter property. Meanwhile, the &lt;code&gt;SpyDirective&lt;/code&gt; from the previous example is applied to the &lt;code&gt;CounterComponent&lt;/code&gt; log where it watches log entries being created and destroyed.</source>
          <target state="translated">在此示例中，每次父组件增加其输入计数器属性时， &lt;code&gt;CounterComponent&lt;/code&gt; 都会记录一次更改（通过 &lt;code&gt;ngOnChanges&lt;/code&gt; ）。同时，上一示例中的 &lt;code&gt;SpyDirective&lt;/code&gt; 应用于 &lt;code&gt;CounterComponent&lt;/code&gt; 日志，在其中监视正在创建和销毁的日志条目。</target>
        </trans-unit>
        <trans-unit id="b34c27516f98552db8673b22efff281ea6a08dc6" translate="yes" xml:space="preserve">
          <source>In this example, if &lt;code&gt;favoriteHero&lt;/code&gt; is not set, the &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; displays, &quot;Please enter ...&quot;. If &lt;code&gt;favoriteHero&lt;/code&gt; is set, the app checks the movie hero by calling a component method. If that method returns &lt;code&gt;true&lt;/code&gt;, the app selects &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;=&quot;true&quot;&lt;/code&gt; and displays: &quot;Excellent choice!&quot; If that methods returns &lt;code&gt;false&lt;/code&gt;, the app selects &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;=&quot;false&quot;&lt;/code&gt; and displays: &quot;No movie, sorry!&quot;</source>
          <target state="translated">在此示例中，如果未设置 &lt;code&gt;favoriteHero&lt;/code&gt; ，则 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; 值为 &lt;code&gt;null&lt;/code&gt; ,并且 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; 显示&amp;ldquo;请输入...&amp;rdquo;。如果设置了 &lt;code&gt;favoriteHero&lt;/code&gt; ，则该应用会通过调用组件方法来检查电影英雄。如果该方法返回 &lt;code&gt;true&lt;/code&gt; ，则应用程序选择 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;=&quot;true&quot;&lt;/code&gt; 并显示：&amp;ldquo; Excellent choice！&amp;rdquo;如果该方法返回 &lt;code&gt;false&lt;/code&gt; ，则应用程序选择 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;=&quot;false&quot;&lt;/code&gt; 并显示：&amp;ldquo;没有电影，对不起！&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="72f1f2d37ac6c79270b0a7d0849a98d48abc0296" translate="yes" xml:space="preserve">
          <source>In this example, if &lt;code&gt;favoriteHero&lt;/code&gt; is not set, the template displays &quot;Please enter ...&quot;. If &lt;code&gt;favoriteHero&lt;/code&gt; is set, it checks the movie hero by calling a controller method. If that method returns &lt;code&gt;true&lt;/code&gt;, the template displays &quot;Excellent choice!&quot;. If that methods returns &lt;code&gt;false&lt;/code&gt;, the template displays &quot;No movie, sorry!&quot;.</source>
          <target state="translated">在此示例中，如果未设置 &lt;code&gt;favoriteHero&lt;/code&gt; 英雄，则模板显示&amp;ldquo;请输入...&amp;rdquo;。如果设置了 &lt;code&gt;favoriteHero&lt;/code&gt; ，它将通过调用控制器方法检查电影英雄。如果该方法返回 &lt;code&gt;true&lt;/code&gt; ，则模板显示&amp;ldquo; Excellent choice！&amp;rdquo;。如果该方法返回 &lt;code&gt;false&lt;/code&gt; ，则模板显示&amp;ldquo;没有电影，对不起！&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="af3bdcb5fef615d78019a726d74324f420e52102" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is hidden if the &lt;code&gt;favoriteHero&lt;/code&gt; variable is not truthy.</source>
          <target state="translated">在此示例中，如果 &lt;code&gt;favoriteHero&lt;/code&gt; 变量不正确，则 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素将隐藏。</target>
        </trans-unit>
        <trans-unit id="45a0870a00e40b52bff70afae912dde516d98427" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is shown if the &lt;code&gt;favoriteHero&lt;/code&gt; variable is truthy.</source>
          <target state="translated">在此示例中，如果 &lt;code&gt;favoriteHero&lt;/code&gt; 变量为true，则显示 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="eaed41066495437d45b6edacc8a7e191ea8479ea" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element is removed from the DOM unless the &lt;code&gt;movies&lt;/code&gt; array has a length greater than zero.</source>
          <target state="translated">在此示例中，将 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 元素从DOM中删除，除非 &lt;code&gt;movies&lt;/code&gt; 数组的长度大于零。</target>
        </trans-unit>
        <trans-unit id="29ba1a50a860d713db88a878e1386a55649ba999" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element is removed from the DOM unless the &lt;code&gt;movies&lt;/code&gt; array has a length.</source>
          <target state="translated">在此示例中，将 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 元素从DOM中删除，除非 &lt;code&gt;movies&lt;/code&gt; 数组具有长度。</target>
        </trans-unit>
        <trans-unit id="9914b2e1524218e10a4fe48a32a9e8b2977bb5c9" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;BannerComponent&lt;/code&gt; is the only component to compile. Other examples configure the testing module with multiple components and may import application modules that hold yet more components. Any of them could be require external files.</source>
          <target state="translated">在此示例中， &lt;code&gt;BannerComponent&lt;/code&gt; 是唯一要编译的组件。其他示例将测试模块配置为具有多个组件，并且可能会导入包含更多组件的应用程序模块。它们中的任何一个都可能需要外部文件。</target>
        </trans-unit>
        <trans-unit id="5f0121c1cd7668454f283fbaa22a823417529960" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;TwainComponent.getQuote()&lt;/code&gt; method tells you that the &lt;code&gt;quote&lt;/code&gt; property returns an &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">在此示例中， &lt;code&gt;TwainComponent.getQuote()&lt;/code&gt; 方法告诉您 &lt;code&gt;quote&lt;/code&gt; 属性返回一个 &lt;code&gt;Observable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8dc87778ed16f68aed10d08c1afb1cc4c8aa4f0" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;h1&lt;/code&gt; style applies only to the &lt;code&gt;HeroAppComponent&lt;/code&gt;, not to the nested &lt;code&gt;HeroMainComponent&lt;/code&gt; nor to &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags anywhere else in the application.</source>
          <target state="translated">在此示例中， &lt;code&gt;h1&lt;/code&gt; 样式仅适用于 &lt;code&gt;HeroAppComponent&lt;/code&gt; ，不适用于嵌套的 &lt;code&gt;HeroMainComponent&lt;/code&gt; 或应用程序中其他任何地方的 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="70fdbfe2246483712f70ef97797c46fb0bec5603" translate="yes" xml:space="preserve">
          <source>In this example, the Angular CLI compiles and bundles the Universal version of the app with the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time (AoT) compiler&lt;/a&gt;. A Node Express web server compiles HTML pages with Universal based on client requests.</source>
          <target state="translated">在此示例中，Angular CLI编译应用程序的通用版本并将其与&lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time（AoT）编译器&lt;/a&gt;捆绑在一起。Node Express Web服务器根据客户端请求使用Universal编译HTML页面。</target>
        </trans-unit>
        <trans-unit id="3c77e55816f54a0b51362c2c86c1b0a18effa47f" translate="yes" xml:space="preserve">
          <source>In this example, the function receives the current &lt;code&gt;Tree&lt;/code&gt; and returns it without any modifications. If you need to, you can do additional setup when your package is installed, such as generating files, updating configuration, or any other initial setup your library requires.</source>
          <target state="translated">在此示例中，该函数接收当前的 &lt;code&gt;Tree&lt;/code&gt; 并返回它，而无需进行任何修改。如果需要，可以在安装软件包时进行其他设置，例如生成文件，更新配置或库需要的任何其他初始设置。</target>
        </trans-unit>
        <trans-unit id="5f760e6853240f1a247368ea5cf4ca224bc0cab0" translate="yes" xml:space="preserve">
          <source>In this example, the metadata object passed to &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; simply declares &lt;code&gt;BannerComponent&lt;/code&gt;, the component to test.</source>
          <target state="translated">在此示例中，传递给 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; 的元数据对象仅声明了要测试的组件 &lt;code&gt;BannerComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4fa761fa0db5279057ebbd7c918d23d617db68c2" translate="yes" xml:space="preserve">
          <source>In this example, the parent component is &lt;code&gt;AppComponent&lt;/code&gt;, but you could use any component in which you could nest the child.</source>
          <target state="translated">在此示例中，父组件是 &lt;code&gt;AppComponent&lt;/code&gt; ，但是您可以使用可以在其中嵌套子组件的任何组件。</target>
        </trans-unit>
        <trans-unit id="1f6f8011b5dc464a23b1d8849f6646fc7783a339" translate="yes" xml:space="preserve">
          <source>In this example, the service worker has one version of the app cached and being used to serve two different tabs. Note that this version hash is the &quot;latest manifest hash&quot; listed above. Both clients are on the latest version. Each client is listed by its ID from the &lt;code&gt;Clients&lt;/code&gt; API in the browser.</source>
          <target state="translated">在此示例中，服务工作者已缓存该应用程序的一个版本，并用于服务两个不同的选项卡。请注意，此版本哈希是上面列出的&amp;ldquo;最新清单哈希&amp;rdquo;。两个客户端都使用最新版本。每个客户端都通过浏览器中 &lt;code&gt;Clients&lt;/code&gt; API中的ID列出。</target>
        </trans-unit>
        <trans-unit id="141adfd803373a7562c9907611167c881b44c8b3" translate="yes" xml:space="preserve">
          <source>In this example, the table row (&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;) element repeats for each movie object in the collection of movies.</source>
          <target state="translated">在此示例中，表行（ &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; ）元素对电影集合中的每个电影对象重复。</target>
        </trans-unit>
        <trans-unit id="a1fc753a972a0e8642c389f78d449c6f46254fae" translate="yes" xml:space="preserve">
          <source>In this example, the trace &quot;App is stable now&quot; will be logged and then the counter starts incrementing every second.</source>
          <target state="translated">在这个例子中,将记录 &quot;App is stable now &quot;的跟踪,然后计数器开始每秒钟递增一次。</target>
        </trans-unit>
        <trans-unit id="55313e1b1881081b73a426b4b5ede5214265a96f" translate="yes" xml:space="preserve">
          <source>In this example, there is a parent provider and injecting the service will return the value, however, injecting the service with &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt; because &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; tells the injector to stop searching in the current host element.</source>
          <target state="translated">在这个例子中，有一个家长提供者和注射服务将返回值，然而，随着注射服务 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 将返回 &lt;code&gt;null&lt;/code&gt; ，因为 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 告诉注射器停止搜索在当前主机元素。</target>
        </trans-unit>
        <trans-unit id="db3b7288e76c9764175a504022fe6dac60eb02e9" translate="yes" xml:space="preserve">
          <source>In this example, we have a special trigger for the enter and leave animation called &lt;code&gt;myInsertRemoveTrigger&lt;/code&gt;. The HTML template contains the following code.</source>
          <target state="translated">在此示例中，我们为进入和离开动画设置了一个特殊的触发器，称为 &lt;code&gt;myInsertRemoveTrigger&lt;/code&gt; 。HTML模板包含以下代码。</target>
        </trans-unit>
        <trans-unit id="4f23673ea8bd0a665773af3bb10e9ab0cc487c74" translate="yes" xml:space="preserve">
          <source>In this example, we have a trigger called &lt;code&gt;shrinkOut&lt;/code&gt;, used when an HTML element leaves the page. The animation takes whatever height the element has before it leaves, and animates from that height to zero.</source>
          <target state="translated">在此示例中，当HTML元素离开页面时，将使用一个名为 &lt;code&gt;shrinkOut&lt;/code&gt; 的触发器。动画采用元素离开之前具有的高度，并从该高度动画为零。</target>
        </trans-unit>
        <trans-unit id="d5449a4988ffee8945fd260d02e422915ed66b26" translate="yes" xml:space="preserve">
          <source>In this example, we tell the processor to put the fragments together without anything in between - without any &quot;plaster&quot;. Most sample files define this &lt;em&gt;empty plaster&lt;/em&gt;.</source>
          <target state="translated">在此示例中，我们告诉处理器将片段放在一起，中间没有任何东西-没有任何&amp;ldquo;灰泥&amp;rdquo;。大多数样品文件都定义了这种&lt;em&gt;空膏药&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9f8e0d121e50e60163e599d82947e2d681ecf6cb" translate="yes" xml:space="preserve">
          <source>In this example, we'll name the trigger &lt;code&gt;openClose&lt;/code&gt;, and attach it to the &lt;code&gt;button&lt;/code&gt; element. The trigger describes the open and closed states, and the timings for the two transitions.</source>
          <target state="translated">在此示例中，我们将触发器命名为 &lt;code&gt;openClose&lt;/code&gt; ，并将其附加到 &lt;code&gt;button&lt;/code&gt; 元素。触发器描述了打开和关闭状态，以及两个转换的时间。</target>
        </trans-unit>
        <trans-unit id="0f166860e3bda6fd17d0325d2f54b8f0ba7afcd0" translate="yes" xml:space="preserve">
          <source>In this example, when the &lt;code&gt;isOpen&lt;/code&gt; expression evaluates to a defined state of &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt;, it notifies the trigger &lt;code&gt;openClose&lt;/code&gt; of a state change. Then it's up to the &lt;code&gt;openClose&lt;/code&gt; code to handle the state change and kick off a state change animation.</source>
          <target state="translated">在这个例子中，当 &lt;code&gt;isOpen&lt;/code&gt; 表达式计算到规定的状态 &lt;code&gt;open&lt;/code&gt; 或 &lt;code&gt;closed&lt;/code&gt; 时，它通知触发 &lt;code&gt;openClose&lt;/code&gt; 的状态变化的。然后由 &lt;code&gt;openClose&lt;/code&gt; 代码处理状态更改并启动状态更改动画。</target>
        </trans-unit>
        <trans-unit id="857e41f3d387f7cf872a74341b0658452c56adc6" translate="yes" xml:space="preserve">
          <source>In this example, you hide the message when the control is valid or pristine; &quot;pristine&quot; means the user hasn't changed the value since it was displayed in this form.</source>
          <target state="translated">在这个例子中,当控件有效或原始状态时,你会隐藏消息;&quot;原始状态 &quot;意味着用户在这个表单中显示该值后没有改变过。</target>
        </trans-unit>
        <trans-unit id="baf3737ace5606abd1ec8225579802cb34f52588" translate="yes" xml:space="preserve">
          <source>In this example, you retrieve the route parameter map from an &lt;code&gt;Observable&lt;/code&gt;. That implies that the route parameter map can change during the lifetime of this component.</source>
          <target state="translated">在此示例中，您从 &lt;code&gt;Observable&lt;/code&gt; 检索路线参数映射。这意味着路由参数图可以在该组件的生命周期内更改。</target>
        </trans-unit>
        <trans-unit id="22dacf1b0042c1fad5409535bd55de92eadb09f0" translate="yes" xml:space="preserve">
          <source>In this guide, we go into greater depth on special transition states such as &lt;code&gt;*&lt;/code&gt; (wildcard) and &lt;code&gt;void&lt;/code&gt;, and show how these special states are used for elements entering and leaving a view. The chapter also explores multiple animation triggers, animation callbacks and sequence-based animation using keyframes.</source>
          <target state="translated">在本指南中，我们将更深入地研究特殊的过渡状态，例如 &lt;code&gt;*&lt;/code&gt; （通配符）和 &lt;code&gt;void&lt;/code&gt; ，并说明如何将这些特殊状态用于元素的进入和离开视图。本章还探讨了使用关键帧的多个动画触发器，动画回调和基于序列的动画。</target>
        </trans-unit>
        <trans-unit id="d391ee1c171a2767942bc43f6ae9952564664a67" translate="yes" xml:space="preserve">
          <source>In this implementation, the component should create and display a new hero. New heroes have &lt;code&gt;id=0&lt;/code&gt; and a blank &lt;code&gt;name&lt;/code&gt;. This test confirms that the component behaves as expected:</source>
          <target state="translated">在此实现中，组件应创建并显示一个新英雄。新英雄的 &lt;code&gt;id=0&lt;/code&gt; ， &lt;code&gt;name&lt;/code&gt; 为空。此测试确认组件的行为符合预期：</target>
        </trans-unit>
        <trans-unit id="76cbc5a9e329031cf1bab2ff3296215a7ffaf283" translate="yes" xml:space="preserve">
          <source>In this last exercise, you learn to chain &lt;code&gt;Observable&lt;/code&gt; operators together so you can minimize the number of similar HTTP requests and consume network bandwidth economically.</source>
          <target state="translated">在最后一个练习中，您将学习如何将 &lt;code&gt;Observable&lt;/code&gt; 运算符链接在一起，从而可以最大程度地减少类似HTTP请求的数量，并经济地消耗网络带宽。</target>
        </trans-unit>
        <trans-unit id="9b0401f148735f00014a29894e7c27898d1d095b" translate="yes" xml:space="preserve">
          <source>In this mode, typed variables disallow &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; by default. The type checker throws an error if you leave a variable unassigned or try to assign &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; to a variable whose type disallows &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">在这种模式下，类型化变量默认情况下不允许 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 。如果将变量保留为未分配状态，或者尝试为类型不允许为 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 的变量分配 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; ，则类型检查器将引发错误。</target>
        </trans-unit>
        <trans-unit id="280da26e99ef856ec857edb7fba6fd1a43c74759" translate="yes" xml:space="preserve">
          <source>In this next section, you'll extend the crisis center with some new &lt;em&gt;administrative&lt;/em&gt; features. Those features aren't defined yet. But you can start by adding a new feature module named &lt;code&gt;AdminModule&lt;/code&gt;.</source>
          <target state="translated">在下一部分中，您将使用一些新的&lt;em&gt;管理&lt;/em&gt;功能扩展危机中心。这些功能尚未定义。但是您可以从添加一个名为 &lt;code&gt;AdminModule&lt;/code&gt; 的新功能模块开始。</target>
        </trans-unit>
        <trans-unit id="2e77ddac00429a19af490ee0fff3eb26cd48acc6" translate="yes" xml:space="preserve">
          <source>In this next section, you'll update the &lt;code&gt;CrisisCenterModule&lt;/code&gt; to load lazily by default and use the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; strategy to load it (and &lt;em&gt;all other&lt;/em&gt; lazy loaded modules) as soon as possible.</source>
          <target state="translated">在下一部分中，您将更新 &lt;code&gt;CrisisCenterModule&lt;/code&gt; 以默认情况下延迟加载，并使用 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 策略尽快加载它（以及&lt;em&gt;所有其他&lt;/em&gt;延迟加载的模块）。</target>
        </trans-unit>
        <trans-unit id="910d57aa8f2c9d322a7ddfffafff5a1e12be15d4" translate="yes" xml:space="preserve">
          <source>In this page, you'll create a component with a list of heroes. You'll display the list of hero names and conditionally show a message below the list.</source>
          <target state="translated">在这个页面中,你将创建一个带有英雄列表的组件。您将显示英雄名称列表,并在列表下方有条件地显示一条消息。</target>
        </trans-unit>
        <trans-unit id="5991263aee79edfabb240fd4a80ec9aca9c4f379" translate="yes" xml:space="preserve">
          <source>In this page, you'll expand the Tour of Heroes app to display a list of heroes, and allow users to select a hero and display the hero's details.</source>
          <target state="translated">在这个页面中,你将扩展《英雄之旅》应用,显示英雄列表,并允许用户选择一个英雄并显示英雄的详细信息。</target>
        </trans-unit>
        <trans-unit id="36e07abc829fe293c414ff2c42ec086b5bcaa116" translate="yes" xml:space="preserve">
          <source>In this page, you'll take the first step in that direction by moving the hero details into a separate, reusable &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">在此页面中，您将朝着这个方向迈出第一步，将英雄详细信息移动到一个单独的可重复使用的 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="41eadd61e2099c9b71eca402988c22d2dc4da72a" translate="yes" xml:space="preserve">
          <source>In this part of the tutorial, you'll do the following:</source>
          <target state="translated">在这部分教程中,你将做以下工作。</target>
        </trans-unit>
        <trans-unit id="f9704e3a1c4e2e88d3b06005691f30d54c3fe8a0" translate="yes" xml:space="preserve">
          <source>In this sample app, an &lt;code&gt;Item&lt;/code&gt; is an object that has two properties; an &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">在此示例应用程序中， &lt;code&gt;Item&lt;/code&gt; 是具有两个属性的对象。一个 &lt;code&gt;id&lt;/code&gt; 和一个 &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a920eb2f136fa29d3d8fd6be1642038fa8343dd7" translate="yes" xml:space="preserve">
          <source>In this sample, the &lt;code&gt;AboutComponent&lt;/code&gt; template hosts a &lt;code&gt;TwainComponent&lt;/code&gt;. The &lt;code&gt;TwainComponent&lt;/code&gt; displays Mark Twain quotes.</source>
          <target state="translated">在此示例中， &lt;code&gt;AboutComponent&lt;/code&gt; 模板托管一个 &lt;code&gt;TwainComponent&lt;/code&gt; 。该 &lt;code&gt;TwainComponent&lt;/code&gt; 显示马克&amp;middot;吐温报价。</target>
        </trans-unit>
        <trans-unit id="d4570e44a44492eaf23a15501bcef8aeda6caf07" translate="yes" xml:space="preserve">
          <source>In this sample, the &lt;code&gt;preload&lt;/code&gt; method loads the route if the route's &lt;code&gt;data.preload&lt;/code&gt; flag is truthy.</source>
          <target state="translated">在此示例中，如果路线的 &lt;code&gt;data.preload&lt;/code&gt; 标志为true ，则 &lt;code&gt;preload&lt;/code&gt; 方法将加载路线。</target>
        </trans-unit>
        <trans-unit id="53df60f2bbc6ff801450ca15e253828f19eef2d8" translate="yes" xml:space="preserve">
          <source>In this sample, the forbidden name is &quot;bob&quot;, so the validator will reject any hero name containing &quot;bob&quot;. Elsewhere it could reject &quot;alice&quot; or any name that the configuring regular expression matches.</source>
          <target state="translated">在这个示例中,被禁止的名字是 &quot;bob&quot;,所以验证器将拒绝任何包含 &quot;bob &quot;的英雄名字。在其他地方,它可以拒绝 &quot;alice &quot;或任何配置正则表达式匹配的名字。</target>
        </trans-unit>
        <trans-unit id="c1cff468c4938260e2ee129abcb3fdbc441be47c" translate="yes" xml:space="preserve">
          <source>In this scenario, &lt;code&gt;ListItemComponent&lt;/code&gt; is nested within &lt;code&gt;AppComponent&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; property expects an object.</source>
          <target state="translated">在这种情况下， &lt;code&gt;ListItemComponent&lt;/code&gt; 嵌套在 &lt;code&gt;AppComponent&lt;/code&gt; 中，并且 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 属性需要一个对象。</target>
        </trans-unit>
        <trans-unit id="866e463973eba9b6978ee8e41218dfba8d744659" translate="yes" xml:space="preserve">
          <source>In this section, you will see how to use the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; class to add URL query strings in your &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在本节中，您将看到如何使用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; 类在 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 中添加URL查询字符串。</target>
        </trans-unit>
        <trans-unit id="031c1b1a94c645c385beb5a16ec41f21634daadf" translate="yes" xml:space="preserve">
          <source>In this section, you write an &lt;code&gt;UnlessDirective&lt;/code&gt; structural directive that does the opposite of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; displays the template content when the condition is &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;UnlessDirective&lt;/code&gt; displays the content when the condition is &lt;strong&gt;&lt;em&gt;false&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">在本节中，您将编写一个 &lt;code&gt;UnlessDirective&lt;/code&gt; 结构指令，该指令与 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 相反。 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 在条件为 &lt;code&gt;true&lt;/code&gt; 时显示模板内容。条件为&lt;strong&gt;&lt;em&gt;false&lt;/em&gt;&lt;/strong&gt;时， &lt;code&gt;UnlessDirective&lt;/code&gt; 显示内容。&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e63bcb3ea1e33ee82569b40699b6b77935276464" translate="yes" xml:space="preserve">
          <source>In this section, you'll add a &quot;Buy&quot; button to the product details page. You'll also set up a cart service to store information about products in the cart.</source>
          <target state="translated">在本节中,您将在产品详情页中添加一个 &quot;购买 &quot;按钮。您还将设置一个购物车服务,以存储购物车中的产品信息。</target>
        </trans-unit>
        <trans-unit id="41614ef975f51a1aa45b0453fbf9c5d863d0f122" translate="yes" xml:space="preserve">
          <source>In this section, you'll add a custom strategy that &lt;em&gt;only&lt;/em&gt; preloads routes whose &lt;code&gt;data.preload&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt;. Recall that you can add anything to the &lt;code&gt;data&lt;/code&gt; property of a route.</source>
          <target state="translated">在本节中，您将添加一个自定义策略，该策略&lt;em&gt;仅&lt;/em&gt;预加载其 &lt;code&gt;data.preload&lt;/code&gt; 标志设置为 &lt;code&gt;true&lt;/code&gt; 的路由。回想一下，您可以向路由的 &lt;code&gt;data&lt;/code&gt; 属性添加任何内容。</target>
        </trans-unit>
        <trans-unit id="f368e147277bce5919185a90ecf1ce77809a6f65" translate="yes" xml:space="preserve">
          <source>In this section, you'll create the shopping cart. You'll:</source>
          <target state="translated">在本节中,你将创建购物车。你将。</target>
        </trans-unit>
        <trans-unit id="e48b893529d0a4f861fdf041e0a05ca27fb957eb" translate="yes" xml:space="preserve">
          <source>In this section, you'll enable navigation to the &lt;code&gt;HeroDetailsComponent&lt;/code&gt; and liberate it from the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">在本节中，将启用导航到 &lt;code&gt;HeroDetailsComponent&lt;/code&gt; 并将其从 &lt;code&gt;HeroesComponent&lt;/code&gt; 中解放出来。</target>
        </trans-unit>
        <trans-unit id="3a56f98809a826693d78cbbbfd23fc132fc6017b" translate="yes" xml:space="preserve">
          <source>In this section, you'll extend the app to display full product details in separate pages, with their own URLs.</source>
          <target state="translated">在本节中,您将扩展应用程序以在单独的页面中显示完整的产品详细信息,并拥有自己的URL。</target>
        </trans-unit>
        <trans-unit id="2b0c69edf13235c900832e080c6999a183c272d5" translate="yes" xml:space="preserve">
          <source>In this section, you'll finish the app by adding a form-based checkout feature. You'll create a form to collect user information as part of checkout.</source>
          <target state="translated">在本节中,您将通过添加基于表单的结账功能来完成应用程序。您将创建一个表单来收集用户信息作为结账的一部分。</target>
        </trans-unit>
        <trans-unit id="0bd6664792b4ac76642b5f4d66e0875468eb9a2d" translate="yes" xml:space="preserve">
          <source>In this section, you'll learn to prepare and upgrade an application with &lt;code&gt;ngUpgrade&lt;/code&gt;. The example app is &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;Angular PhoneCat&lt;/a&gt; from &lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;the original AngularJS tutorial&lt;/a&gt;, which is where many of us began our Angular adventures. Now you'll see how to bring that application to the brave new world of Angular.</source>
          <target state="translated">在本节中，您将学习使用 &lt;code&gt;ngUpgrade&lt;/code&gt; 准备和升级应用程序。该示例应用是&lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;角PhoneCat&lt;/a&gt;从&lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;原来的AngularJS教程&lt;/a&gt;，这也正是我们许多人开始了我们的角度冒险。现在，您将看到如何将该应用程序带入Angular的新世界。</target>
        </trans-unit>
        <trans-unit id="269f51a639c36e1471d48fe5ff3480c172f854ea" translate="yes" xml:space="preserve">
          <source>In this section, you'll listen for the hero item click event and update the hero detail.</source>
          <target state="translated">在本节中,你将监听英雄物品点击事件并更新英雄细节。</target>
        </trans-unit>
        <trans-unit id="ce0395b82a4ff81ea97cdb312448ce93adb39b78" translate="yes" xml:space="preserve">
          <source>In this section, you'll update the cart component to use the cart service to display the products in the cart.</source>
          <target state="translated">在本节中,你将更新购物车组件,使用购物车服务来显示购物车中的产品。</target>
        </trans-unit>
        <trans-unit id="403a238e3ee56ad0c6dd6b48f47e5f1604928707" translate="yes" xml:space="preserve">
          <source>In this section, you'll update the product details component to use the cart service. You'll add a &quot;Buy&quot; button to the product details view. When the &quot;Buy&quot; button is clicked, you'll use the cart service to add the current product to the cart.</source>
          <target state="translated">在本节中,您将更新产品详情组件以使用购物车服务。您将在产品详情视图中添加一个 &quot;购买 &quot;按钮。当 &quot;购买 &quot;按钮被点击时,您将使用购物车服务将当前产品添加到购物车中。</target>
        </trans-unit>
        <trans-unit id="4679907f079a44d062477a8ebc33625407f5d2e5" translate="yes" xml:space="preserve">
          <source>In this section, you'll use the HTTP client to retrieve shipping prices from an external file.</source>
          <target state="translated">在本节中,您将使用 HTTP 客户端从外部文件中检索出货价格。</target>
        </trans-unit>
        <trans-unit id="9b61ea9c73f9814540ae97c3ffffaa25de48d7af" translate="yes" xml:space="preserve">
          <source>In this test suite, the &lt;em&gt;only&lt;/em&gt; provider of &lt;code&gt;UserService&lt;/code&gt; is the root testing module, so it is safe to call &lt;code&gt;TestBed.get()&lt;/code&gt; as follows:</source>
          <target state="translated">在此测试套件中， &lt;code&gt;UserService&lt;/code&gt; 的&lt;em&gt;唯一&lt;/em&gt;提供者是根测试模块，因此可以安全地调用 &lt;code&gt;TestBed.get()&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="3a18179f288ce84d2374dd0900930551cdf29b37" translate="yes" xml:space="preserve">
          <source>In this tutorial, &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; will return an &lt;code&gt;Observable&lt;/code&gt; because it will eventually use the Angular &lt;code&gt;HttpClient.get&lt;/code&gt; method to fetch the heroes and &lt;a href=&quot;../guide/http&quot;&gt;&lt;code&gt;HttpClient.get()&lt;/code&gt; returns an &lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在本教程中， &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; 将返回一个 &lt;code&gt;Observable&lt;/code&gt; ,因为它将最终使用Angular &lt;code&gt;HttpClient.get&lt;/code&gt; 方法获取英雄，而&lt;a href=&quot;../guide/http&quot;&gt; &lt;code&gt;HttpClient.get()&lt;/code&gt; 返回一个 &lt;code&gt;Observable&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25a44de4babd077d4a5b26746a125c8769135775" translate="yes" xml:space="preserve">
          <source>In this tutorial, you'll add the following data persistence features with help from Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在本教程中，您将在Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的帮助下添加以下数据持久性功能。</target>
        </trans-unit>
        <trans-unit id="06bb8951e44a68507e6e489ed686a8a717656ad3" translate="yes" xml:space="preserve">
          <source>In this tutorial, you'll create a &lt;code&gt;HeroService&lt;/code&gt; that all application classes can use to get heroes. Instead of creating that service with &lt;code&gt;new&lt;/code&gt;, you'll rely on Angular &lt;a href=&quot;../guide/dependency-injection&quot;&gt;&lt;em&gt;dependency injection&lt;/em&gt;&lt;/a&gt; to inject it into the &lt;code&gt;HeroesComponent&lt;/code&gt; constructor.</source>
          <target state="translated">在本教程中，您将创建一个 &lt;code&gt;HeroService&lt;/code&gt; ，所有应用程序类都可以使用它来获得英雄。无需使用 &lt;code&gt;new&lt;/code&gt; 创建该服务，而是依靠Angular &lt;a href=&quot;../guide/dependency-injection&quot;&gt;&lt;em&gt;依赖项注入&lt;/em&gt;&lt;/a&gt;将其注入 &lt;code&gt;HeroesComponent&lt;/code&gt; 构造函数中。</target>
        </trans-unit>
        <trans-unit id="e7cea9c259c2a7bf3c9e055e0e44722b8938e8d0" translate="yes" xml:space="preserve">
          <source>In this way you're using the Angular and JavaScript module systems &lt;em&gt;together&lt;/em&gt;. Although it's easy to confuse the two systems, which share the common vocabulary of &quot;imports&quot; and &quot;exports&quot;, you will become familiar with the different contexts in which they are used.</source>
          <target state="translated">通过这种方式，你正在使用的角度和JavaScript模块系统&lt;em&gt;一起&lt;/em&gt;。尽管很容易混淆这两个系统，它们共享&amp;ldquo;导入&amp;rdquo;和&amp;ldquo;导出&amp;rdquo;的通用词汇，但是您将熟悉使用它们的不同上下文。</target>
        </trans-unit>
        <trans-unit id="a21cab056614ba2cdbfb90d04db7c7d0479ad584" translate="yes" xml:space="preserve">
          <source>In two-way binding, a data property value flows to the input box from the component as with property binding. The user's changes also flow back to the component, resetting the property to the latest value, as with event binding.</source>
          <target state="translated">在双向绑定中,数据属性值从组件流向输入框,就像属性绑定一样。用户的更改也会流回组件,将属性重置为最新值,就像事件绑定一样。</target>
        </trans-unit>
        <trans-unit id="31fa5a791d28202748d016367736fc9b97f5d0f5" translate="yes" xml:space="preserve">
          <source>In typical use, application code asks for the dependencies in the constructor and they are resolved by the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在典型的用法中，应用程序代码在构造函数中要求依赖项，并由 &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 对其进行解析。</target>
        </trans-unit>
        <trans-unit id="57e2e8623c9d79c4da58de13b115b73b40ee0112" translate="yes" xml:space="preserve">
          <source>In v5, Angular replaced the &lt;code&gt;&lt;a href=&quot;../api/core/reflectiveinjector&quot;&gt;ReflectiveInjector&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;StaticInjector&lt;/code&gt;. The injector no longer requires the Reflect polyfill, reducing application size for most developers.</source>
          <target state="translated">在V5，角取代了 &lt;code&gt;&lt;a href=&quot;../api/core/reflectiveinjector&quot;&gt;ReflectiveInjector&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;StaticInjector&lt;/code&gt; 。进样器不再需要Reflect polyfill，从而减小了大多数开发人员的应用程序大小。</target>
        </trans-unit>
        <trans-unit id="a84fd42297b1dcb30b0f64f06976c4d1727bfa6a" translate="yes" xml:space="preserve">
          <source>In version 4.3, Angular introduced new number, date, and currency pipes that increase standardization across browsers and eliminate the need for i18n polyfills. These pipes use the Unicode Common Locale Data Repository (CLDR) instead of the JS Intl API to provide extensive locale support.</source>
          <target state="translated">在4.3版本中,Angular引入了新的数字、日期和货币管道,提高了跨浏览器的标准化程度,并消除了对i18n polyfills的需求。这些管道使用Unicode Common Locale Data Repository(CLDR)而不是JS Intl API来提供广泛的本地化支持。</target>
        </trans-unit>
        <trans-unit id="71d97d3019c4bcc2733ae13ec2df5b3eb65a683b" translate="yes" xml:space="preserve">
          <source>In version 5 and later, the compiler automatically performs this rewriting while emitting the &lt;code&gt;.js&lt;/code&gt; file.</source>
          <target state="translated">在版本5和更高版本中，编译器在发出 &lt;code&gt;.js&lt;/code&gt; 文件时自动执行此重写。</target>
        </trans-unit>
        <trans-unit id="c45bfe7a0bc278e7de4469f4b336dda62d4667b6" translate="yes" xml:space="preserve">
          <source>In version 5.0.0, Angular updated its standard pipes to use the CLRD implementation. At that time, Angular also added &lt;a href=&quot;../api/common/deprecatedi18npipesmodule&quot;&gt;&lt;code&gt;DeprecatedI18NPipesModule&lt;/code&gt;&lt;/a&gt; and related APIs to provide limited-time access to the old behavior. If you need to use these &lt;code&gt;Deprecated*&lt;/code&gt; pipes, see &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md#i18n-pipes&quot;&gt;Angular change log&lt;/a&gt; and the &lt;a href=&quot;https://docs.google.com/spreadsheets/d/12iygt-_cakNP1VO7MV9g4lq9NsxVWG4tSfc98HpHb0k/edit#gid=0&quot;&gt;Date Formats mappings&lt;/a&gt;.</source>
          <target state="translated">在5.0.0版中，Angular更新了其标准管道以使用CLRD实现。当时，Angular还添加了&lt;a href=&quot;../api/common/deprecatedi18npipesmodule&quot;&gt; &lt;code&gt;DeprecatedI18NPipesModule&lt;/code&gt; &lt;/a&gt;和相关的API，以提供对旧行为的限时访问。如果需要使用这些 &lt;code&gt;Deprecated*&lt;/code&gt; 管道，请参阅&lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md#i18n-pipes&quot;&gt;Angular更改日志&lt;/a&gt;和&lt;a href=&quot;https://docs.google.com/spreadsheets/d/12iygt-_cakNP1VO7MV9g4lq9NsxVWG4tSfc98HpHb0k/edit#gid=0&quot;&gt;Date Formats映射&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9241b9e01cd99078b4ff06f46cefe6357b7cf80a" translate="yes" xml:space="preserve">
          <source>In version 8, the string syntax for the &lt;a href=&quot;../api/router/loadchildren&quot;&gt;&lt;code&gt;loadChildren&lt;/code&gt;&lt;/a&gt; route specification was deprecated, in favor of new syntax that uses &lt;code&gt;import()&lt;/code&gt; syntax.</source>
          <target state="translated">在版本8中，不赞成使用&lt;a href=&quot;../api/router/loadchildren&quot;&gt; &lt;code&gt;loadChildren&lt;/code&gt; &lt;/a&gt;路由规范的字符串语法，而推荐使用 &lt;code&gt;import()&lt;/code&gt; 语法的新语法。</target>
        </trans-unit>
        <trans-unit id="65b1e0f69125d604941dd3273cdaf553c34f079e" translate="yes" xml:space="preserve">
          <source>In your Angular application, you need a component as a placeholder for your AngularJS content. This component uses the service you create to load and bootstrap your AngularJS app after the component is initialized.</source>
          <target state="translated">在你的Angular应用中,你需要一个组件作为你的AngularJS内容的占位符。这个组件在组件初始化后,使用你创建的服务来加载和引导你的AngularJS应用。</target>
        </trans-unit>
        <trans-unit id="ca7e1be139d5918a6ba13a88e83f886ca1299b5f" translate="yes" xml:space="preserve">
          <source>In your StackBlitz project, make sure you have forked or saved your project.</source>
          <target state="translated">在你的StackBlitz项目中,确保你已经分叉或保存了你的项目。</target>
        </trans-unit>
        <trans-unit id="9e38ffcf83f81a498acb2fef8ccde38da9e38905" translate="yes" xml:space="preserve">
          <source>In your apps, import from the library by name:</source>
          <target state="translated">在你的应用程序中,按名称从库中导入。</target>
        </trans-unit>
        <trans-unit id="fbadbb5b6473967b5312043c7bbc97ef238f1be3" translate="yes" xml:space="preserve">
          <source>In your browser, open &lt;a href=&quot;http://localhost:4200/&quot;&gt;http://localhost:4200/&lt;/a&gt; to see the new app run. When you use the &lt;a href=&quot;https://angular.io/cli/serve&quot;&gt;ng serve&lt;/a&gt; command to build an app and serve it locally, the server automatically rebuilds the app and reloads the page when you change any of the source files.</source>
          <target state="translated">在浏览器中，打开&lt;a href=&quot;http://localhost:4200/&quot;&gt;http：// localhost：4200 /&lt;/a&gt;以查看新应用程序的运行。使用&lt;a href=&quot;https://angular.io/cli/serve&quot;&gt;ng serve&lt;/a&gt;命令构建应用程序并在本地提供服务时，当您更改任何源文件时，服务器会自动重建应用程序并重新加载页面。</target>
        </trans-unit>
        <trans-unit id="f21b76242519b87008bb820433618b31f09a3a4a" translate="yes" xml:space="preserve">
          <source>In your editor's user preferences (&lt;code&gt;Cmd+,&lt;/code&gt; or &lt;code&gt;Ctrl+,&lt;/code&gt;), add the following:</source>
          <target state="translated">在编辑器的用户首选项（ &lt;code&gt;Cmd+,&lt;/code&gt; 或 &lt;code&gt;Ctrl+,&lt;/code&gt; ）中，添加以下内容：</target>
        </trans-unit>
        <trans-unit id="e9d09b0521b2a8f8f641dc6031d35a9df0c68728" translate="yes" xml:space="preserve">
          <source>In your library project's &lt;code&gt;package.json&lt;/code&gt; file, add a &quot;schematics&quot; entry with the path to your schema file. The Angular CLI uses this entry to find named schematics in your collection when it runs commands.</source>
          <target state="translated">在您的图书馆项目的 &lt;code&gt;package.json&lt;/code&gt; 文件中，添加一个&amp;ldquo; schematics&amp;rdquo;条目以及您的模式文件的路径。Angular CLI在运行命令时使用此条目在您的集合中查找命名的原理图。</target>
        </trans-unit>
        <trans-unit id="3b08d5f94915a160ca1817acb5c6f70371ec0b65" translate="yes" xml:space="preserve">
          <source>In your library's root folder, create a &lt;code&gt;schematics/&lt;/code&gt; folder.</source>
          <target state="translated">在库的根文件夹中，创建一个 &lt;code&gt;schematics/&lt;/code&gt; 文件夹。</target>
        </trans-unit>
        <trans-unit id="ce97d1ac42d70ee94d614eb0f89cf54d2d267038" translate="yes" xml:space="preserve">
          <source>Include an installation schematic so that &lt;code&gt;ng add&lt;/code&gt; can add your library to a project.</source>
          <target state="translated">包括安装示意图，以便 &lt;code&gt;ng add&lt;/code&gt; 可以将您的库添加到项目中。</target>
        </trans-unit>
        <trans-unit id="08720542b91aacc8813c92e6ceea960b5ca4fe91" translate="yes" xml:space="preserve">
          <source>Include an update schematic so that &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; can update your library&amp;rsquo;s dependencies and provide migrations for breaking changes in new releases.</source>
          <target state="translated">包括一个更新原理图，以便 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; 可以更新您的库的依赖项，并提供迁移以打破新版本中的更改。</target>
        </trans-unit>
        <trans-unit id="282924231e939d92199d1eca77627325f87ee961" translate="yes" xml:space="preserve">
          <source>Include generation schematics in your library so that &lt;code&gt;ng generate&lt;/code&gt; can scaffold your defined artifacts (components, services, tests, and so on) in a project.</source>
          <target state="translated">在库中包括生成原理图，以便 &lt;code&gt;ng generate&lt;/code&gt; 可以在项目中搭建您定义的工件（组件，服务，测试等）。</target>
        </trans-unit>
        <trans-unit id="ec6e7b9747e35ebc5f30dc0a428e02bb8ff75e90" translate="yes" xml:space="preserve">
          <source>Include the service in the &lt;code&gt;AppModule&lt;/code&gt; or in a module that is only imported by the &lt;code&gt;AppModule&lt;/code&gt;</source>
          <target state="translated">将服务包含在 &lt;code&gt;AppModule&lt;/code&gt; 或仅由 &lt;code&gt;AppModule&lt;/code&gt; 导入的模块中</target>
        </trans-unit>
        <trans-unit id="497e47d580938603d6e2f90429b6ca666fccc44c" translate="yes" xml:space="preserve">
          <source>Includes &lt;a href=&quot;../api/core/provider&quot;&gt;providers&lt;/a&gt; and methods to compile and run the app on the client using the &lt;a href=&quot;aot-compiler&quot;&gt;JIT compiler&lt;/a&gt;.</source>
          <target state="translated">包括&lt;a href=&quot;../api/core/provider&quot;&gt;提供程序&lt;/a&gt;和使用&lt;a href=&quot;aot-compiler&quot;&gt;JIT编译器&lt;/a&gt;在客户端上编译和运行应用程序的方法。</target>
        </trans-unit>
        <trans-unit id="0ad6c20b67c9ef5c8bae321419d3e7b82dfca42c" translate="yes" xml:space="preserve">
          <source>Includes a link to add the &lt;code&gt;manifest.json&lt;/code&gt; file.</source>
          <target state="translated">包括添加 &lt;code&gt;manifest.json&lt;/code&gt; 文件的链接。</target>
        </trans-unit>
        <trans-unit id="ede5524d447137c6007fc3872dcd98681351a7c8" translate="yes" xml:space="preserve">
          <source>Includes testability features, typed request and response objects, request and response interception, observable APIs, and streamlined error handling.</source>
          <target state="translated">包括可测试性功能、类型化的请求和响应对象、请求和响应拦截、可观察的API以及简化的错误处理。</target>
        </trans-unit>
        <trans-unit id="9b0793ed118cccc9349319604ac83b01285a42ad" translate="yes" xml:space="preserve">
          <source>Including a route parameter (passing the Hero &lt;code&gt;id&lt;/code&gt; while routing to the &quot;Hero Detail&quot;).</source>
          <target state="translated">包括一个路由参数（在路由到&amp;ldquo;英雄详细信息&amp;rdquo;时传递英雄 &lt;code&gt;id&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="98e74adf3229ab63477c62be5d7146a7e849046e" translate="yes" xml:space="preserve">
          <source>Inclusive Components</source>
          <target state="translated">包容性组件</target>
        </trans-unit>
        <trans-unit id="d686caf322ed32f4566b224dd18bea8a4089d16d" translate="yes" xml:space="preserve">
          <source>Increases the number of pending request</source>
          <target state="translated">增加待处理请求的数量</target>
        </trans-unit>
        <trans-unit id="a1d5d5a9b2dbc095f06632faa7f8d2ec706001b6" translate="yes" xml:space="preserve">
          <source>Incremental builds can be run as a background process in your dev environment. To take advantage of this feature add the &lt;code&gt;--watch&lt;/code&gt; flag to the build command:</source>
          <target state="translated">增量构建可以在您的开发环境中作为后台进程运行。要利用此功能，请在构建命令中添加 &lt;code&gt;--watch&lt;/code&gt; 标志：</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="57a507dedf4559e07065957eca1175bc03ba365d" translate="yes" xml:space="preserve">
          <source>Index in the array to insert the control</source>
          <target state="translated">在数组中插入控件的索引</target>
        </trans-unit>
        <trans-unit id="ee3ba6ae75b8a4c10a8036ec35138251054f277c" translate="yes" xml:space="preserve">
          <source>Index in the array to remove the control</source>
          <target state="translated">数组中要删除控件的索引</target>
        </trans-unit>
        <trans-unit id="66e18f43642f8990d457a1934bd052577f94b398" translate="yes" xml:space="preserve">
          <source>Index in the array to replace the control</source>
          <target state="translated">在数组中替换控件的索引</target>
        </trans-unit>
        <trans-unit id="5f69ec55403ddc6ac8d13721d541e09482a7940b" translate="yes" xml:space="preserve">
          <source>Index in the array to retrieve the control</source>
          <target state="translated">在数组中检索控件的索引。</target>
        </trans-unit>
        <trans-unit id="6906761e076d1a610413de4171c8d5dea67905df" translate="yes" xml:space="preserve">
          <source>Indicates if the provider is a multi-provider or a regular provider.</source>
          <target state="translated">表示提供者是多提供者还是普通提供者。</target>
        </trans-unit>
        <trans-unit id="a226b2f1a87e5950fc108a1472b50623b2217451" translate="yes" xml:space="preserve">
          <source>Indicates that the result of a &lt;a href=&quot;core/pipe&quot;&gt;&lt;code&gt;Pipe&lt;/code&gt;&lt;/a&gt; transformation has changed even though the reference has not changed.</source>
          <target state="translated">指示即使参考未更改，&lt;a href=&quot;core/pipe&quot;&gt; &lt;code&gt;Pipe&lt;/code&gt; &lt;/a&gt;转换的结果也已更改。</target>
        </trans-unit>
        <trans-unit id="ef1f129438ed53e3939954fd8d48915df19e8c7b" translate="yes" xml:space="preserve">
          <source>Indicates that the result of a &lt;a href=&quot;pipe&quot;&gt;&lt;code&gt;Pipe&lt;/code&gt;&lt;/a&gt; transformation has changed even though the reference has not changed.</source>
          <target state="translated">指示即使参考未更改，&lt;a href=&quot;pipe&quot;&gt; &lt;code&gt;Pipe&lt;/code&gt; &lt;/a&gt;转换的结果也已更改。</target>
        </trans-unit>
        <trans-unit id="73f7d541bd341c43c84d9404f23680ea85ea9d12" translate="yes" xml:space="preserve">
          <source>Indicates when a location is initialized.</source>
          <target state="translated">表示位置何时被初始化。</target>
        </trans-unit>
        <trans-unit id="2339b8ad3625abec50c5fec9ccfe1b4c0adb5b6e" translate="yes" xml:space="preserve">
          <source>Indonesian</source>
          <target state="translated">Indonesian</target>
        </trans-unit>
        <trans-unit id="fe8a63fb884b51a65ffbab786ee171700ba71dca" translate="yes" xml:space="preserve">
          <source>Infinity, can be used with plus and minus. Example: &amp;infin;, +&amp;infin;, -&amp;infin;</source>
          <target state="translated">无穷大，可以与正负一起使用。示例：&amp;infin;，+&amp;infin;，-&amp;infin;</target>
        </trans-unit>
        <trans-unit id="17e8aa425129cc14c2dcfed09c7bb96d8d9d34ce" translate="yes" xml:space="preserve">
          <source>Information about a navigation operation. Retrieve the most recent navigation object with the &lt;code&gt;router.getCurrentNavigation()&lt;/code&gt; method.</source>
          <target state="translated">有关导航操作的信息。使用 &lt;code&gt;router.getCurrentNavigation()&lt;/code&gt; 方法检索最新的导航对象。</target>
        </trans-unit>
        <trans-unit id="5d8911a7c835165927ce0fe2f98e8c5ee99367a3" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt; decorator</source>
          <target state="translated">继承自&lt;a href=&quot;directive&quot;&gt;指令&lt;/a&gt;装饰器</target>
        </trans-unit>
        <trans-unit id="dcd77ef0b804e5064dd803f77b8a828a13037e8e" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">继承自 &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2e16c0ede4e151e344b0a7018a817ca81bff170" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">继承自 &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b0e6fa8afe9fe66b319e4ffce4d5b04030afdd1" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;controlcontainer&quot;&gt;ControlContainer&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">继承自 &lt;code&gt;&lt;a href=&quot;controlcontainer&quot;&gt;ControlContainer&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9aa6e1c6b872fa792c0cda39792e0c2d17339088" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;ngclassbase&quot;&gt;NgClassBase&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">继承自 &lt;code&gt;&lt;a href=&quot;ngclassbase&quot;&gt;NgClassBase&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b58cc13a8f7a9113f65b285338c3c8ecc3a76ce" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">继承自 &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9240846abcc88d5bc03f7b8b3ea9b93dc9d94d85" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;ngstylebase&quot;&gt;NgStyleBase&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">继承自 &lt;code&gt;&lt;a href=&quot;ngstylebase&quot;&gt;NgStyleBase&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77f97d1404eeb944941dce572340411b8745a17f" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;code&gt;&lt;a href=&quot;requiredvalidator&quot;&gt;RequiredValidator&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">继承自 &lt;code&gt;&lt;a href=&quot;requiredvalidator&quot;&gt;RequiredValidator&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f370e247cdb302508a8b07274aac235758f135a4" translate="yes" xml:space="preserve">
          <source>Initial git repository commit information.</source>
          <target state="translated">初始的git仓库提交信息。</target>
        </trans-unit>
        <trans-unit id="571af2d87fcb6ae228307d5bca556e15b485b55f" translate="yes" xml:space="preserve">
          <source>Initial load</source>
          <target state="translated">初始负荷</target>
        </trans-unit>
        <trans-unit id="9295a6b527e07161cef57e1c1ccd71b70c89f70d" translate="yes" xml:space="preserve">
          <source>InitialNavigation</source>
          <target state="translated">InitialNavigation</target>
        </trans-unit>
        <trans-unit id="67c3a59c8fd61dc6486a966bfc500708124ba415" translate="yes" xml:space="preserve">
          <source>Initialize a control as disabled</source>
          <target state="translated">将控件初始化为禁用</target>
        </trans-unit>
        <trans-unit id="4eebcc10a8e490cd62529c5e8e054755f7da1680" translate="yes" xml:space="preserve">
          <source>Initialize the AbstractControl instance.</source>
          <target state="translated">初始化AbstractControl实例。</target>
        </trans-unit>
        <trans-unit id="9dc3a6c3f424e12509055f6982dc7843c5ee3f57" translate="yes" xml:space="preserve">
          <source>Initialize the directive/component after Angular first displays the data-bound properties and sets the directive/component's input properties.</source>
          <target state="translated">在Angular首次显示数据绑定属性并设置指令/组件的输入属性后,初始化指令/组件。</target>
        </trans-unit>
        <trans-unit id="a95372f851a37c7ccab21bff14bd44def255e637" translate="yes" xml:space="preserve">
          <source>Initialize the environment for testing with a compiler factory, a PlatformRef, and an angular module. These are common to every test in the suite.</source>
          <target state="translated">用一个编译器工厂、一个PlatformRef和一个angular模块初始化测试环境。这些对套件中的每个测试都是通用的。</target>
        </trans-unit>
        <trans-unit id="0c3674ebd78fe94c6d9fa6c8cfe3b72434b691fc" translate="yes" xml:space="preserve">
          <source>Initialize the testing environment for the entire test run.</source>
          <target state="translated">初始化整个测试运行的测试环境。</target>
        </trans-unit>
        <trans-unit id="aa1459b074a250001c22df0a6ff4d2a090a6bddc" translate="yes" xml:space="preserve">
          <source>Initializes a constructor instance.</source>
          <target state="translated">初始化一个构造函数实例。</target>
        </trans-unit>
        <trans-unit id="c9db2ae584e270a26cd5d19e6158467ad592c103" translate="yes" xml:space="preserve">
          <source>Initializes an instance of the event-manager service.</source>
          <target state="translated">初始化一个事件管理器服务的实例。</target>
        </trans-unit>
        <trans-unit id="754ef6b0761c3646e19a5a7b638f7d2b30efe518" translate="yes" xml:space="preserve">
          <source>Initializes that property with the corresponding argument when creating an instance of the class.</source>
          <target state="translated">在创建类的实例时,用相应的参数初始化该属性。</target>
        </trans-unit>
        <trans-unit id="2699534e66ed5e13056581917d48556f49da8381" translate="yes" xml:space="preserve">
          <source>Initializes the animation.</source>
          <target state="translated">初始化动画。</target>
        </trans-unit>
        <trans-unit id="d7bc389cad16303b5a27f5b7ab489c3a1a9d4378" translate="yes" xml:space="preserve">
          <source>Initializes the control with an initial state value, or with an object that contains both a value and a disabled status.</source>
          <target state="translated">用一个初始状态值或一个包含值和禁用状态的对象来初始化控件。</target>
        </trans-unit>
        <trans-unit id="45131dcddc1529f6f3b00cd78ce30c35d914b381" translate="yes" xml:space="preserve">
          <source>Initializes the control with an initial value, or an object that defines the initial value and disabled state.</source>
          <target state="translated">用一个初始值或定义初始值和禁用状态的对象来初始化控件。</target>
        </trans-unit>
        <trans-unit id="37ee460935fc0f5ed51a8e919d18a3056e25d96f" translate="yes" xml:space="preserve">
          <source>Initializes the given channel and attaches a new &lt;a href=&quot;clientmessagebroker&quot;&gt;&lt;code&gt;ClientMessageBroker&lt;/code&gt;&lt;/a&gt; to it.</source>
          <target state="translated">初始化给定的通道，并将新的&lt;a href=&quot;clientmessagebroker&quot;&gt; &lt;code&gt;ClientMessageBroker&lt;/code&gt; &lt;/a&gt;附加到该通道。</target>
        </trans-unit>
        <trans-unit id="642b54430a0eb721573dc494e1c4d52db3a4409f" translate="yes" xml:space="preserve">
          <source>Initializes the given channel and attaches a new &lt;a href=&quot;servicemessagebroker&quot;&gt;&lt;code&gt;ServiceMessageBroker&lt;/code&gt;&lt;/a&gt; to it.</source>
          <target state="translated">初始化给定的通道，并将新的&lt;a href=&quot;servicemessagebroker&quot;&gt; &lt;code&gt;ServiceMessageBroker&lt;/code&gt; &lt;/a&gt;附加到该通道。</target>
        </trans-unit>
        <trans-unit id="45c1066fbea6cba9ced272d9562f0736aff32776" translate="yes" xml:space="preserve">
          <source>Initializing Form Controls</source>
          <target state="translated">初始化表格控件</target>
        </trans-unit>
        <trans-unit id="1fe4e72a93c746bc6e02495144ba7947c1a26ff3" translate="yes" xml:space="preserve">
          <source>Initially, the form contains one &lt;code&gt;Alias&lt;/code&gt; field. To add another field, click the &lt;strong&gt;Add Alias&lt;/strong&gt; button. You can also validate the array of aliases reported by the form model displayed by &lt;code&gt;&lt;a href=&quot;../api/forms/form&quot;&gt;Form&lt;/a&gt; &lt;a href=&quot;reactive-forms&quot;&gt;Value&lt;/a&gt;&lt;/code&gt; at the bottom of the template.</source>
          <target state="translated">最初，该表单包含一个 &lt;code&gt;Alias&lt;/code&gt; 字段。要添加另一个字段，请单击&lt;strong&gt;添加别名&lt;/strong&gt;按钮。您还可以验证模板底部由&amp;ldquo; &lt;code&gt;&lt;a href=&quot;../api/forms/form&quot;&gt;Form&lt;/a&gt; &lt;a href=&quot;reactive-forms&quot;&gt;Value&lt;/a&gt;&lt;/code&gt; 显示的表单模型报告的别名数组。</target>
        </trans-unit>
        <trans-unit id="18f7dc17ff8fd13a734c298c804eb7b21097f85d" translate="yes" xml:space="preserve">
          <source>Initially, this &lt;code&gt;package.json&lt;/code&gt; includes &lt;em&gt;a starter set of packages&lt;/em&gt;, some of which are required by Angular and others that support common application scenarios. You add packages to &lt;code&gt;package.json&lt;/code&gt; as your application evolves. You may even remove some.</source>
          <target state="translated">最初，这 &lt;code&gt;package.json&lt;/code&gt; 包括&lt;em&gt;首发组包&lt;/em&gt;，其中一些是由角和其他需要支持常见的应用场景。随着应用程序的发展，您可以将软件包添加到 &lt;code&gt;package.json&lt;/code&gt; 中。您甚至可以删除一些。</target>
        </trans-unit>
        <trans-unit id="f0514cac9bc7568beb69cbbc30da8b406819cc6b" translate="yes" xml:space="preserve">
          <source>Inject</source>
          <target state="translated">Inject</target>
        </trans-unit>
        <trans-unit id="a0b584ab9a7933f64f5ad564c80c4c66772a45ff" translate="yes" xml:space="preserve">
          <source>Inject &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into the constructor of the &lt;code&gt;CartService&lt;/code&gt; component class:</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 注入 &lt;code&gt;CartService&lt;/code&gt; 组件类的构造函数中：</target>
        </trans-unit>
        <trans-unit id="07e6446b3ec41eff6e77df6a94f68f05da7cbf47" translate="yes" xml:space="preserve">
          <source>Inject &lt;code&gt;&lt;a href=&quot;httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; to expect and flush requests in your tests.</source>
          <target state="translated">注入 &lt;code&gt;&lt;a href=&quot;httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; 以期望并刷新测试中的请求。</target>
        </trans-unit>
        <trans-unit id="0952ea7f63acfd82b419fcf6cced10453de431df" translate="yes" xml:space="preserve">
          <source>Inject &lt;code&gt;defaultValue&lt;/code&gt; instead if token not found.</source>
          <target state="translated">如果找不到令牌，则注入 &lt;code&gt;defaultValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1eeaaa0b805224cf7a0933509d9f3a0615a6f94" translate="yes" xml:space="preserve">
          <source>Inject into a derived class</source>
          <target state="translated">注入到派生类中</target>
        </trans-unit>
        <trans-unit id="b3f6806d5b467cb7c3bc8bc8ecba219c8ede60db" translate="yes" xml:space="preserve">
          <source>Inject it into the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">将其注入 &lt;code&gt;HeroService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d776a9677bf6c1c0ad00a83d4d70c493a2bace4" translate="yes" xml:space="preserve">
          <source>Inject it into the dashboard's constructor.</source>
          <target state="translated">将其注入到dashboard的构造函数中。</target>
        </trans-unit>
        <trans-unit id="c6a769a7874598dad610ef89ad42c1d6435742d6" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">注入 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 服务。</target>
        </trans-unit>
        <trans-unit id="420762bbb815b0bd858d87aa0d93b5c20b06538d" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;HeroService&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; services into the constructor, saving their values in private fields:</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;HeroService&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 服务注入到构造函数中，并将它们的值保存在私有字段中：</target>
        </trans-unit>
        <trans-unit id="a800bd5a4004e16e0370dad20e9742d5664827db" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;CartService&lt;/code&gt; to manage cart information.</source>
          <target state="translated">注入 &lt;code&gt;CartService&lt;/code&gt; 来管理购物车信息。</target>
        </trans-unit>
        <trans-unit id="65162f531f207477535e62e7ea7492fac9f6c223" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;CrisisService&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; and implement the &lt;code&gt;&lt;a href=&quot;../api/core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; method. That method could return a &lt;code&gt;Promise&lt;/code&gt;, an &lt;code&gt;Observable&lt;/code&gt;, or a synchronous return value.</source>
          <target state="translated">注入 &lt;code&gt;CrisisService&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 并实现 &lt;code&gt;&lt;a href=&quot;../api/core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; 方法。该方法可以返回 &lt;code&gt;Promise&lt;/code&gt; ， &lt;code&gt;Observable&lt;/code&gt; 或同步返回值。</target>
        </trans-unit>
        <trans-unit id="b20e458e5aa5f29eda7fa30aedd57b1b45f296a2" translate="yes" xml:space="preserve">
          <source>Inject the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">注入 &lt;code&gt;HeroService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d16b7c4a0cd536e6bacd2ccd43f6080006784561" translate="yes" xml:space="preserve">
          <source>Inject the cart service into the &lt;code&gt;ShippingComponent&lt;/code&gt; class:</source>
          <target state="translated">将购物车服务注入 &lt;code&gt;ShippingComponent&lt;/code&gt; 类：</target>
        </trans-unit>
        <trans-unit id="43ae56b717b1d07da26cefb067628e0d35f4e121" translate="yes" xml:space="preserve">
          <source>Inject the cart service.</source>
          <target state="translated">注入购物车服务。</target>
        </trans-unit>
        <trans-unit id="45806a7b832a7aa36033546e2909b1fb99fc8062" translate="yes" xml:space="preserve">
          <source>Inject the component's DOM element</source>
          <target state="translated">注入组件的DOM元素</target>
        </trans-unit>
        <trans-unit id="b9cc71265ff0cedc6025f851aa1090e10ae4106d" translate="yes" xml:space="preserve">
          <source>InjectFlags</source>
          <target state="translated">InjectFlags</target>
        </trans-unit>
        <trans-unit id="cd7616c62bcee7b28a2504d9962636cfb31a65c9" translate="yes" xml:space="preserve">
          <source>InjectSetupWrapper</source>
          <target state="translated">InjectSetupWrapper</target>
        </trans-unit>
        <trans-unit id="032faf52b4d806d5f16a644601453c9eb56123b1" translate="yes" xml:space="preserve">
          <source>Injectable</source>
          <target state="translated">Injectable</target>
        </trans-unit>
        <trans-unit id="408e9d9b7375e404fefb7bdc04837a04c20b6309" translate="yes" xml:space="preserve">
          <source>Injectable providers used in &lt;code&gt;@&lt;a href=&quot;core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 装饰器中使用的可注入提供程序。</target>
        </trans-unit>
        <trans-unit id="7d89bf3bcb75ed56c72f7c17563209bdb5e2382a" translate="yes" xml:space="preserve">
          <source>Injectable providers used in &lt;code&gt;@&lt;a href=&quot;injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 装饰器中使用的可注入提供程序。</target>
        </trans-unit>
        <trans-unit id="2a77ff4292cc82f8396306b5f586ac5f5ffc12ad" translate="yes" xml:space="preserve">
          <source>Injectable service that provides a low-level interface for modifying the UI.</source>
          <target state="translated">可注入的服务,它为修改UI提供了一个低级接口。</target>
        </trans-unit>
        <trans-unit id="156e1f6f9747e475b38a1e470e8d079a4be1aadb" translate="yes" xml:space="preserve">
          <source>InjectableProvider</source>
          <target state="translated">InjectableProvider</target>
        </trans-unit>
        <trans-unit id="448a62a5bd5844abb70fe1a20a84b72bb981925f" translate="yes" xml:space="preserve">
          <source>InjectableType</source>
          <target state="translated">InjectableType</target>
        </trans-unit>
        <trans-unit id="56d719f116fb18f959e9f077cb6114537d0a4be7" translate="yes" xml:space="preserve">
          <source>Injecting a class with a view provider</source>
          <target state="translated">注入一个具有视图提供者的类</target>
        </trans-unit>
        <trans-unit id="c9ee8821d919d7751df2bcbc666729c175774e79" translate="yes" xml:space="preserve">
          <source>Injecting services</source>
          <target state="translated">注射服务</target>
        </trans-unit>
        <trans-unit id="b141699eb731deeb1b3864e217053b13aad88af5" translate="yes" xml:space="preserve">
          <source>Injecting the real &lt;code&gt;UserService&lt;/code&gt; could be a nightmare. The real service might ask the user for login credentials and attempt to reach an authentication server. These behaviors can be hard to intercept. It is far easier and safer to create and register a test double in place of the real &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">注入真正的 &lt;code&gt;UserService&lt;/code&gt; 可能是一场噩梦。真实服务可能会要求用户提供登录凭据，并尝试访问身份验证服务器。这些行为可能很难被拦截。创建并注册一个代替实际的 &lt;code&gt;UserService&lt;/code&gt; 的测试双目更加容易和安全。</target>
        </trans-unit>
        <trans-unit id="15703d66fca65cfd4fa012d37f65af1377c00996" translate="yes" xml:space="preserve">
          <source>Injection flags for DI.</source>
          <target state="translated">DI的注入标志。</target>
        </trans-unit>
        <trans-unit id="0a3916cd31d033e233732648d3cdccd52f27b6e3" translate="yes" xml:space="preserve">
          <source>Injection token used to provide a &lt;a href=&quot;hammerloader&quot;&gt;&lt;code&gt;HammerLoader&lt;/code&gt;&lt;/a&gt; to Angular.</source>
          <target state="translated">用于向Angular 提供&lt;a href=&quot;hammerloader&quot;&gt; &lt;code&gt;HammerLoader&lt;/code&gt; 的&lt;/a&gt;注入令牌。</target>
        </trans-unit>
        <trans-unit id="57c26333c9513bf60f948651b07cba48e8ae53ff" translate="yes" xml:space="preserve">
          <source>Injection token used to provide a &lt;a href=&quot;platform-browser/hammerloader&quot;&gt;&lt;code&gt;HammerLoader&lt;/code&gt;&lt;/a&gt; to Angular.</source>
          <target state="translated">用于向Angular 提供&lt;a href=&quot;platform-browser/hammerloader&quot;&gt; &lt;code&gt;HammerLoader&lt;/code&gt; 的&lt;/a&gt;注入令牌。</target>
        </trans-unit>
        <trans-unit id="298d0251e89d6600ae4b408002fa0e4b1b404c23" translate="yes" xml:space="preserve">
          <source>InjectionToken</source>
          <target state="translated">InjectionToken</target>
        </trans-unit>
        <trans-unit id="2ca8a0d344a0e19a0d77c7ff904b9681383397eb" translate="yes" xml:space="preserve">
          <source>Injector</source>
          <target state="translated">Injector</target>
        </trans-unit>
        <trans-unit id="181fb401efe3b0268d07d54a65b4c3aee191549f" translate="yes" xml:space="preserve">
          <source>Injector hierarchy and service instances</source>
          <target state="translated">喷射器层次结构和服务实例。</target>
        </trans-unit>
        <trans-unit id="6681c4b8cc73e181819eb4ae89965a8a02cef140" translate="yes" xml:space="preserve">
          <source>InjectorType</source>
          <target state="translated">InjectorType</target>
        </trans-unit>
        <trans-unit id="491d5d6666614da901294ee7bd33510be9f0dcaa" translate="yes" xml:space="preserve">
          <source>Injectors are inherited, which means that if a given injector can't resolve a dependency, it asks the parent injector to resolve it. A component can get services from its own injector, from the injectors of its component ancestors, from the injector of its parent NgModule, or from the &lt;code&gt;root&lt;/code&gt; injector.</source>
          <target state="translated">注入器是继承的，这意味着如果给定的注入器无法解析依赖关系，它将要求父注入器来解决它。组件可以从其自己的注入器，其组件祖先的注入器，其父NgModule的注入器或 &lt;code&gt;root&lt;/code&gt; 注入器获得服务。</target>
        </trans-unit>
        <trans-unit id="cba0bd0bb6098207c32cc66a9233a7a7ca6e5abc" translate="yes" xml:space="preserve">
          <source>Injectors in Angular have rules that you can leverage to achieve the desired visibility of injectables in your apps. By understanding these rules, you can determine in which NgModule, Component or Directive you should declare a provider.</source>
          <target state="translated">Angular中的注入器有一些规则,您可以利用这些规则在您的应用程序中实现所需的注入器可见性。通过了解这些规则,你可以决定在哪个NgModule、Component或Directive中声明一个提供者。</target>
        </trans-unit>
        <trans-unit id="2d99dc5eac81a5aa984fbb526ba0c84043ed22e8" translate="yes" xml:space="preserve">
          <source>Injects a token from the currently active injector.</source>
          <target state="translated">从当前活动的注入器注入一个令牌。</target>
        </trans-unit>
        <trans-unit id="07d77bcc29918d26c0c5de34e66f5b60a93c70cd" translate="yes" xml:space="preserve">
          <source>Injects one or more services from the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; injector into a test function. It cannot inject a service provided by the component itself. See discussion of the &lt;a href=&quot;testing#get-injected-services&quot;&gt;debugElement.injector&lt;/a&gt;.</source>
          <target state="translated">将当前 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 注入器中的一项或多项服务注入到测试功能中。它不能注入组件本身提供的服务。请参见&lt;a href=&quot;testing#get-injected-services&quot;&gt;debugElement.injector的&lt;/a&gt;讨论。</target>
        </trans-unit>
        <trans-unit id="cb54a2c7aa72c7bb392f1b151e7266612f3ef4e8" translate="yes" xml:space="preserve">
          <source>Inline code-snippets</source>
          <target state="translated">内联代码片段</target>
        </trans-unit>
        <trans-unit id="d784c6f0a89bdbfeb9496814987b8c32870f48b5" translate="yes" xml:space="preserve">
          <source>Inline in the template HTML.</source>
          <target state="translated">在模板HTML中内联。</target>
        </trans-unit>
        <trans-unit id="fc54e2872104e0208a49eb9c210abc9dea3a97c7" translate="yes" xml:space="preserve">
          <source>Inline template or external template URL of the component's view.</source>
          <target state="translated">组件视图的内联模板或外部模板URL。</target>
        </trans-unit>
        <trans-unit id="3c5fc6f34e31d2439d02789f5061ec164e3d81e3" translate="yes" xml:space="preserve">
          <source>Inline, hand-coded snippets like this one are &lt;em&gt;not&lt;/em&gt; testable and, therefore, are intrinsically unreliable. This example belongs to the small set of pre-approved, inline snippets that includes user input in a command shell or the &lt;em&gt;output&lt;/em&gt; of some process.</source>
          <target state="translated">像这样的内联，手工编码的片段&lt;em&gt;无法&lt;/em&gt;测试，因此本质上是不可靠的。此示例属于一小部分预先批准的内联代码片段，其中包括命令外壳中的用户输入或某些进程的&lt;em&gt;输出&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b568d47f2e244743b1fd7472db836ef9769c21f8" translate="yes" xml:space="preserve">
          <source>Input</source>
          <target state="translated">Input</target>
        </trans-unit>
        <trans-unit id="82f4a61e5306720ccacc3322e115835fcae38855" translate="yes" xml:space="preserve">
          <source>Input and Output properties</source>
          <target state="translated">输入和输出属性</target>
        </trans-unit>
        <trans-unit id="61bbcbfa889da817407bf948fa239f50c645e934" translate="yes" xml:space="preserve">
          <source>Input type</source>
          <target state="translated">输入类型</target>
        </trans-unit>
        <trans-unit id="33e5e7e82f76a11ddf2991effebf767de7f3deb5" translate="yes" xml:space="preserve">
          <source>Input validation</source>
          <target state="translated">输入验证</target>
        </trans-unit>
        <trans-unit id="a9e020d632ebb33c3a6a2f5cc2af3d36d9ba1540" translate="yes" xml:space="preserve">
          <source>Input value</source>
          <target state="translated">输入值</target>
        </trans-unit>
        <trans-unit id="f1681e51507bda05aef42afafef4821ba7b10818" translate="yes" xml:space="preserve">
          <source>Input variables</source>
          <target state="translated">输入变量</target>
        </trans-unit>
        <trans-unit id="76712fc3bc998bc9cc80a5bbd57bbfcecb460078" translate="yes" xml:space="preserve">
          <source>Insert a new &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; at the end of the array.</source>
          <target state="translated">在数组的末尾插入一个新的 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6f3c89a17ee2cf468c4630a524d6bd18db775d8" translate="yes" xml:space="preserve">
          <source>Insert a new &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; at the given &lt;code&gt;index&lt;/code&gt; in the array.</source>
          <target state="translated">在数组中的给定 &lt;code&gt;index&lt;/code&gt; 处插入一个新的 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a763a3ea24b93a6618a09ee6d0076c1dae54d6ab" translate="yes" xml:space="preserve">
          <source>Insert an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; within the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; that displays properties of a &lt;code&gt;hero&lt;/code&gt;.</source>
          <target state="translated">在显示 &lt;code&gt;hero&lt;/code&gt; 属性的 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 中插入 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0df1c34b6777b550f977e456758483fab9bfd30" translate="yes" xml:space="preserve">
          <source>Insert the following into the &lt;code&gt;HeroesComponent&lt;/code&gt; template, just after the heading:</source>
          <target state="translated">在标题之后，将以下内容插入 &lt;code&gt;HeroesComponent&lt;/code&gt; 模板：</target>
        </trans-unit>
        <trans-unit id="23f5944e1199c8f9232153ef3a60afa86a40d070" translate="yes" xml:space="preserve">
          <source>Inserts a view into this container.</source>
          <target state="translated">在这个容器中插入一个视图。</target>
        </trans-unit>
        <trans-unit id="50011e1a54a656c04fc02bf9c77175e034f25652" translate="yes" xml:space="preserve">
          <source>Inserts an embedded view from a prepared &lt;code&gt;&lt;a href=&quot;../core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">从准备好的 &lt;code&gt;&lt;a href=&quot;../core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 插入嵌入式视图。</target>
        </trans-unit>
        <trans-unit id="75d0650f178b6f787feea44111266946b9ecd87d" translate="yes" xml:space="preserve">
          <source>Inserts an embedded view from a prepared &lt;code&gt;&lt;a href=&quot;core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">从准备好的 &lt;code&gt;&lt;a href=&quot;core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 插入嵌入式视图。</target>
        </trans-unit>
        <trans-unit id="f7a13f1a4948982fb94e88aa36e8881e135f85a8" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;*ngFor&lt;/code&gt;</source>
          <target state="translated">内部 &lt;code&gt;*ngFor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19ed5cba849af683656b54b43049a241ffe5b0d8" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;NgSwitch&lt;/code&gt; directives</source>
          <target state="translated">内部 &lt;code&gt;NgSwitch&lt;/code&gt; 指令</target>
        </trans-unit>
        <trans-unit id="255b0977970291621f43e1151716c4e23e21af87" translate="yes" xml:space="preserve">
          <source>Inside an AngularJS component's controller we can get hold of the downgraded service via the name we gave when downgrading.</source>
          <target state="translated">在AngularJS组件的控制器里面,我们可以通过我们在降级时给的名字来掌握降级的服务。</target>
        </trans-unit>
        <trans-unit id="072282cc9231ad60c9cc9690bf8418d6381ccca7" translate="yes" xml:space="preserve">
          <source>Inside that directory four files are generated:</source>
          <target state="translated">在这个目录里面会生成四个文件。</target>
        </trans-unit>
        <trans-unit id="6d5ecf03917471adf142cf23f4f2c3c4b339b21a" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;src/&lt;/code&gt; folder, the &lt;code&gt;app/&lt;/code&gt; folder contains your project's logic and data. Angular components, templates, and styles go here.</source>
          <target state="translated">在 &lt;code&gt;src/&lt;/code&gt; 文件夹中， &lt;code&gt;app/&lt;/code&gt; 文件夹包含您项目的逻辑和数据。角度组件，模板和样式在此处。</target>
        </trans-unit>
        <trans-unit id="43dc34d6ca14b24f422ae821aed69fec4d0746ee" translate="yes" xml:space="preserve">
          <source>Inside the feature module</source>
          <target state="translated">在功能模块内</target>
        </trans-unit>
        <trans-unit id="99a0a59687e515effa9af831817de2a42be88bcb" translate="yes" xml:space="preserve">
          <source>Inside the interpolation expression, you flow the component's &lt;code&gt;birthday&lt;/code&gt; value through the &lt;a href=&quot;template-syntax#pipe&quot;&gt;pipe operator&lt;/a&gt; ( | ) to the &lt;a href=&quot;../api/common/datepipe&quot;&gt;Date pipe&lt;/a&gt; function on the right. All pipes work this way.</source>
          <target state="translated">在插值表达式中，将组件的 &lt;code&gt;birthday&lt;/code&gt; 值通过&lt;a href=&quot;template-syntax#pipe&quot;&gt;管道运算符&lt;/a&gt;（|）传递到右侧的&lt;a href=&quot;../api/common/datepipe&quot;&gt;Date管道&lt;/a&gt;函数。所有管道都以这种方式工作。</target>
        </trans-unit>
        <trans-unit id="df4011fe1a09f1043a4b2b06cd1697fa041ae820" translate="yes" xml:space="preserve">
          <source>Inspect the bundles</source>
          <target state="translated">检查捆绑物</target>
        </trans-unit>
        <trans-unit id="215770189e6d0e21c2e4dcd73cf798410232e895" translate="yes" xml:space="preserve">
          <source>Inspect the router's configuration</source>
          <target state="translated">检查路由器的配置</target>
        </trans-unit>
        <trans-unit id="f5dd0a6a7ea6173ab33b717cf0e2c38499a6b62a" translate="yes" xml:space="preserve">
          <source>Inspecting generated CSS</source>
          <target state="translated">检查生成的CSS</target>
        </trans-unit>
        <trans-unit id="00f4891662ba21393eafa47f4ff9e723df6085f7" translate="yes" xml:space="preserve">
          <source>Inspecting the element in the browser tools reveals that the &lt;em&gt;name&lt;/em&gt; input box is &lt;em&gt;no longer pristine&lt;/em&gt;. The form remembers that you entered a name before clicking &lt;em&gt;New Hero&lt;/em&gt;. Replacing the hero object &lt;em&gt;did not restore the pristine state&lt;/em&gt; of the form controls.</source>
          <target state="translated">检查浏览器工具中的元素会发现&lt;em&gt;名称&lt;/em&gt;输入框&lt;em&gt;不再是原始的&lt;/em&gt;。该表单会记住您在单击&lt;em&gt;New Hero&lt;/em&gt;之前输入了名称。替换英雄对象&lt;em&gt;不会恢复&lt;/em&gt;表单控件&lt;em&gt;的原始状态&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="767d840fb58485232878c237b7ed2fe6e569ced7" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;fs-extra&lt;/code&gt; via &lt;code&gt;npm install fs-extra --save-dev&lt;/code&gt; for better file copying, and change &lt;code&gt;copy-dist-files.js&lt;/code&gt; to the following:</source>
          <target state="translated">安装 &lt;code&gt;fs-extra&lt;/code&gt; 通过 &lt;code&gt;npm install fs-extra --save-dev&lt;/code&gt; 更好的文件复制和更改 &lt;code&gt;copy-dist-files.js&lt;/code&gt; 以下内容：</target>
        </trans-unit>
        <trans-unit id="2b5240a912c78956650075c76cef901344fb7d53" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;source-map-explorer&lt;/code&gt;:</source>
          <target state="translated">安装 &lt;code&gt;source-map-explorer&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5722ef718aa35b09e478fcff4fbda0f369c92662" translate="yes" xml:space="preserve">
          <source>Install &lt;strong&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js&amp;reg; and npm&lt;/a&gt;&lt;/strong&gt; if they are not already on your machine. See &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt; for supported versions and instructions.</source>
          <target state="translated">如果尚未安装&lt;strong&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js&amp;reg;和npm，请&lt;/a&gt;&lt;/strong&gt;安装它们。有关受支持的版本和说明，请参见&lt;a href=&quot;setup-local&quot;&gt;本地环境设置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e8d135e6ccd34e326cce716adb2bf33aeca9a237" translate="yes" xml:space="preserve">
          <source>Install Angular into the project, along with the SystemJS module loader. Take a look at the results of the &lt;a href=&quot;upgrade-setup&quot;&gt;upgrade setup instructions&lt;/a&gt; and get the following configurations from there:</source>
          <target state="translated">将Angular和SystemJS模块加载器一起安装到项目中。查看&lt;a href=&quot;upgrade-setup&quot;&gt;升级设置说明&lt;/a&gt;的结果，并从中获取以下配置：</target>
        </trans-unit>
        <trans-unit id="1261f2c456b1f62133aa270d8e5fd5d048b8b664" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;firebase-tools&lt;/code&gt; CLI that will handle your deployment using &lt;code&gt;npm install -g firebase-tools&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;npm install -g firebase-tools&lt;/code&gt; 安装将处理部署的 &lt;code&gt;firebase-tools&lt;/code&gt; CLI 。</target>
        </trans-unit>
        <trans-unit id="cd383d8abcaf9309b3e8d4c4392877db6730239a" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;upgrade&lt;/code&gt; package via &lt;code&gt;npm install @angular/upgrade --save&lt;/code&gt; and add a mapping for the &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">通过 &lt;code&gt;npm install @angular/upgrade --save&lt;/code&gt; 安装 &lt;code&gt;upgrade&lt;/code&gt; 软件包，并为 &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;软件包添加映射。</target>
        </trans-unit>
        <trans-unit id="987677d76fa5c1deda62223710a489453421d4ae" translate="yes" xml:space="preserve">
          <source>Install the Angular CLI globally.</source>
          <target state="translated">全局安装Angular CLI。</target>
        </trans-unit>
        <trans-unit id="bdcb3dfef60b666573c8ce1ed8b494f2716b38c6" translate="yes" xml:space="preserve">
          <source>Install the Angular Language Service package in the same location:</source>
          <target state="translated">在同一位置安装Angular语言服务包。</target>
        </trans-unit>
        <trans-unit id="9d42883b764f1c8c553d34790e6e538c26173f08" translate="yes" xml:space="preserve">
          <source>Install the CLI using the &lt;code&gt;npm&lt;/code&gt; package manager:</source>
          <target state="translated">使用 &lt;code&gt;npm&lt;/code&gt; 软件包管理器安装CLI ：</target>
        </trans-unit>
        <trans-unit id="8a392da3b3f2f11041c5fe8719aff8e6bcc76e63" translate="yes" xml:space="preserve">
          <source>Install the In-memory Web API package from npm with the following command:</source>
          <target state="translated">用以下命令从npm安装内存Web API包。</target>
        </trans-unit>
        <trans-unit id="6a2e11d433615c4e688e8c2e1a2f370f9f882859" translate="yes" xml:space="preserve">
          <source>Install the latest version of TypeScript in a local &lt;code&gt;node_modules&lt;/code&gt; directory:</source>
          <target state="translated">在本地 &lt;code&gt;node_modules&lt;/code&gt; 目录中安装最新版本的TypeScript ：</target>
        </trans-unit>
        <trans-unit id="a55b0d6eaf5833f9d1d83c86418e84d35b30f379" translate="yes" xml:space="preserve">
          <source>Install type definitions for the existing libraries that you're using but that don't come with prepackaged types: AngularJS and the Jasmine unit test framework.</source>
          <target state="translated">为你正在使用的现有库安装类型定义,但这些库没有附带预包装的类型。AngularJS和Jasmine单元测试框架。</target>
        </trans-unit>
        <trans-unit id="007650eba9764fc0e78e4bc1bd31b1198fb68fbf" translate="yes" xml:space="preserve">
          <source>Installable typings files</source>
          <target state="translated">可安装的打字文件</target>
        </trans-unit>
        <trans-unit id="590df37bbf3a109889319af6d9048be9a71e39d5" translate="yes" xml:space="preserve">
          <source>Installing Angular</source>
          <target state="translated">安装Angular</target>
        </trans-unit>
        <trans-unit id="93c51dd01f96d8f057ca0640853a63493a184144" translate="yes" xml:space="preserve">
          <source>Installing Angular CLI</source>
          <target state="translated">安装Angular CLI</target>
        </trans-unit>
        <trans-unit id="29ff101f42f25faf7396162f5dcaed389e809afb" translate="yes" xml:space="preserve">
          <source>Installing libraries</source>
          <target state="translated">安装图书馆</target>
        </trans-unit>
        <trans-unit id="943d24405b833810f0fc6a9ac5fedf1d6c7c1920" translate="yes" xml:space="preserve">
          <source>Installing the Angular service worker is as simple as including an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. In addition to registering the Angular service worker with the browser, this also makes a few services available for injection which interact with the service worker and can be used to control it. For example, an application can ask to be notified when a new update becomes available, or an application can ask the service worker to check the server for available updates.</source>
          <target state="translated">安装Angular Service Worker就像包含 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 一样简单。除了在浏览器中注册Angular服务人员之外，这还使一些服务可供注入，这些服务与服务人员进行交互并可以用来控制它。例如，当新的更新可用时，应用程序可以要求得到通知，或者应用程序可以要求服务人员在服务器上检查可用的更新。</target>
        </trans-unit>
        <trans-unit id="35ca16d7e501ce1fe7afeb879255850001c28e41" translate="yes" xml:space="preserve">
          <source>Installs icon files to support the installed Progressive Web App (PWA).</source>
          <target state="translated">安装图标文件以支持已安装的Progressive Web App (PWA)。</target>
        </trans-unit>
        <trans-unit id="20e716e0358bb09e7445aa9236e78946959e553b" translate="yes" xml:space="preserve">
          <source>Instantiate a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, with an initial value.</source>
          <target state="translated">用初始值实例化 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38aa8686f3352f5834571410dfa3840955e59d4b" translate="yes" xml:space="preserve">
          <source>Instantiates a single &lt;a href=&quot;../core/component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt; type and inserts its Host View into current View. &lt;code&gt;&lt;a href=&quot;ngcomponentoutlet&quot;&gt;NgComponentOutlet&lt;/a&gt;&lt;/code&gt; provides a declarative approach for dynamic component creation.</source>
          <target state="translated">实例化单个&lt;a href=&quot;../core/component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;类型，并将其主机视图插入当前视图。 &lt;code&gt;&lt;a href=&quot;ngcomponentoutlet&quot;&gt;NgComponentOutlet&lt;/a&gt;&lt;/code&gt; 为动态组件创建提供了一种声明式方法。</target>
        </trans-unit>
        <trans-unit id="38063d7822dcc8a96973053e6ba2f0de5af9a983" translate="yes" xml:space="preserve">
          <source>Instantiates a single &lt;a href=&quot;core/component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt; type and inserts its Host View into current View. &lt;code&gt;&lt;a href=&quot;common/ngcomponentoutlet&quot;&gt;NgComponentOutlet&lt;/a&gt;&lt;/code&gt; provides a declarative approach for dynamic component creation.</source>
          <target state="translated">实例化单个&lt;a href=&quot;core/component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;类型，并将其主机视图插入当前视图。 &lt;code&gt;&lt;a href=&quot;common/ngcomponentoutlet&quot;&gt;NgComponentOutlet&lt;/a&gt;&lt;/code&gt; 为动态组件创建提供了一种声明式方法。</target>
        </trans-unit>
        <trans-unit id="052c0bf072f0f51a894d30e77a4f689971e12fb7" translate="yes" xml:space="preserve">
          <source>Instantiates a single component and inserts its host view into this container.</source>
          <target state="translated">实例化一个组件,并将其主视图插入到这个容器中。</target>
        </trans-unit>
        <trans-unit id="a4ad199a6b556b860c928a9e27b923ade54a8ac0" translate="yes" xml:space="preserve">
          <source>Instantiates an embedded view and inserts it into this container.</source>
          <target state="translated">实例化一个嵌入式视图并将其插入到这个容器中。</target>
        </trans-unit>
        <trans-unit id="f0776be631be3564e94e31e5dc32990150beac7b" translate="yes" xml:space="preserve">
          <source>Instantiates an embedded view based on this template, and attaches it to the view container.</source>
          <target state="translated">基于该模板实例化一个嵌入式视图,并将其连接到视图容器。</target>
        </trans-unit>
        <trans-unit id="786c58358d9228836c715a34ab083c47efb00357" translate="yes" xml:space="preserve">
          <source>Instantiates an object using a resolved provider in the context of the injector.</source>
          <target state="translated">在注入器的上下文中使用解析的提供者实例化一个对象。</target>
        </trans-unit>
        <trans-unit id="a0357399dd1a1a04fdeed5dfc91f8d7b7be0a893" translate="yes" xml:space="preserve">
          <source>Instantiating the Angular module on-demand</source>
          <target state="translated">按需实例化Angular模块。</target>
        </trans-unit>
        <trans-unit id="43fb80c7057cc5fd575a66171218e4c5dcaa2c7b" translate="yes" xml:space="preserve">
          <source>Instead of adding the &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; route, define a &lt;code&gt;wildcard&lt;/code&gt; route instead and have it navigate to a simple &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">与其添加 &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; 路由， &lt;code&gt;PageNotFoundComponent&lt;/code&gt; 定义一个 &lt;code&gt;wildcard&lt;/code&gt; 路由，并使其导航到一个简单的PageNotFoundComponent。</target>
        </trans-unit>
        <trans-unit id="4545e903884ce10d8860ee7224edb38d91aba382" translate="yes" xml:space="preserve">
          <source>Instead of defining all member classes in one giant file as in a JavaScript module, you list the module's classes in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">您无需像在JavaScript模块中那样在一个巨型文件中定义所有成员类，而是在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; 列表中列出该模块的类。</target>
        </trans-unit>
        <trans-unit id="bcea27d4a4ea890a7b5b46266c065c932d9159ff" translate="yes" xml:space="preserve">
          <source>Instead of handling the error directly, it returns an error handler function to &lt;code&gt;catchError&lt;/code&gt; that it has configured with both the name of the operation that failed and a safe return value.</source>
          <target state="translated">它不是直接处理错误，而是返回错误处理程序函数 &lt;code&gt;catchError&lt;/code&gt; ，该函数已配置了失败操作的名称和安全返回值。</target>
        </trans-unit>
        <trans-unit id="2ced3569fe32156e54433459c9f7274b0cae7ecf" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorators to declare inputs and outputs, you can identify members in the &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; arrays of the directive metadata, as in this example:</source>
          <target state="translated">您可以在指令元数据的 &lt;code&gt;inputs&lt;/code&gt; 和 &lt;code&gt;outputs&lt;/code&gt; 数组中标识成员，而不是使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 装饰器声明输入和输出，如本例所示：</target>
        </trans-unit>
        <trans-unit id="41c9b9e64f30d6ebdd7548f0f306b5e519819b75" translate="yes" xml:space="preserve">
          <source>Instead they return observables of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">相反，它们返回 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; 可观察值。</target>
        </trans-unit>
        <trans-unit id="ce684a983c63ce2f1f454c04e646d6d8a3bc7367" translate="yes" xml:space="preserve">
          <source>Instead you can mock the dependency, use a dummy value, or create a &lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Spies&quot;&gt;spy&lt;/a&gt; on the pertinent service method.</source>
          <target state="translated">相反，您可以模拟依赖项，使用虚拟值或在相关服务方法上创建&lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Spies&quot;&gt;间谍&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="461b96eba4f5a430cd543bbe85601a5e70ae7271" translate="yes" xml:space="preserve">
          <source>Instead you'll write a &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivate&quot;&gt;canActivate&lt;/a&gt;()&lt;/code&gt; guard method to redirect anonymous users to the login page when they try to enter the admin area.</source>
          <target state="translated">相反，您将编写 &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivate&quot;&gt;canActivate&lt;/a&gt;()&lt;/code&gt; 保护方法，以在匿名用户尝试进入管理区域时将其重定向到登录页面。</target>
        </trans-unit>
        <trans-unit id="49a4d7b52c2322fe3ec1102b059fd40a0edaba63" translate="yes" xml:space="preserve">
          <source>Instead, call &lt;code&gt;getHeroes()&lt;/code&gt; inside the &lt;a href=&quot;../guide/lifecycle-hooks&quot;&gt;&lt;em&gt;ngOnInit lifecycle hook&lt;/em&gt;&lt;/a&gt; and let Angular call &lt;code&gt;ngOnInit()&lt;/code&gt; at an appropriate time &lt;em&gt;after&lt;/em&gt; constructing a &lt;code&gt;HeroesComponent&lt;/code&gt; instance.</source>
          <target state="translated">相反，调用 &lt;code&gt;getHeroes()&lt;/code&gt; 里面&lt;a href=&quot;../guide/lifecycle-hooks&quot;&gt;&lt;em&gt;ngOnInit生命周期挂钩&lt;/em&gt;&lt;/a&gt;，让角呼叫 &lt;code&gt;ngOnInit()&lt;/code&gt; 在适当的时间&lt;em&gt;后，&lt;/em&gt;构建 &lt;code&gt;HeroesComponent&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="fdd12a96a1f80e924cc94c2ae62043da14036314" translate="yes" xml:space="preserve">
          <source>Instead, download typings for your library (&lt;code&gt;npm install @types/jquery&lt;/code&gt;) and follow the library installation steps. This gives you access to the global variables exposed by that library.</source>
          <target state="translated">而是下载您的库的 &lt;code&gt;npm install @types/jquery&lt;/code&gt; （npm install @ types / jquery），然后按照库的安装步骤进行操作。这使您可以访问该库公开的全局变量。</target>
        </trans-unit>
        <trans-unit id="4b0bf66c25d9781be7cefa931b18abbac35f3e32" translate="yes" xml:space="preserve">
          <source>Instead, each &lt;code&gt;HeroBioComponent&lt;/code&gt; gets its &lt;em&gt;own&lt;/em&gt;&lt;code&gt;HeroCacheService&lt;/code&gt; instance by listing &lt;code&gt;HeroCacheService&lt;/code&gt; in its metadata &lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">相反，每个 &lt;code&gt;HeroBioComponent&lt;/code&gt; 通过在其元数据 &lt;code&gt;providers&lt;/code&gt; 数组中列出 &lt;code&gt;HeroCacheService&lt;/code&gt; 来获取&lt;em&gt;自己的&lt;/em&gt; &lt;code&gt;HeroCacheService&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="0d305901f6c4d49bcedd325e78ae1b0860a4fb31" translate="yes" xml:space="preserve">
          <source>Instead, the &lt;code&gt;ngOnInit()&lt;/code&gt; method pipes the &lt;code&gt;searchTerms&lt;/code&gt; observable through a sequence of RxJS operators that reduce the number of calls to the &lt;code&gt;searchHeroes()&lt;/code&gt;, ultimately returning an observable of timely hero search results (each a &lt;code&gt;Hero[]&lt;/code&gt;).</source>
          <target state="translated">相反， &lt;code&gt;ngOnInit()&lt;/code&gt; 方法管道 &lt;code&gt;searchTerms&lt;/code&gt; 观察到通过RxJS运算符减少调用到的数目的序列 &lt;code&gt;searchHeroes()&lt;/code&gt; ，最后返回一个可观察的及时英雄搜索结果（每一个 &lt;code&gt;Hero[]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3d9ebd1ce2ebf177d0250948ce46e33ab5af6b38" translate="yes" xml:space="preserve">
          <source>Instead, the compiler adopts a recursive strategy that generates code only for the components you use.</source>
          <target state="translated">相反,编译器采用递归策略,只为你使用的组件生成代码。</target>
        </trans-unit>
        <trans-unit id="8bd754a169b9bacb9390642cdd317359fddea194" translate="yes" xml:space="preserve">
          <source>Instead, the injector will begin at the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;&lt;code&gt;ElementInjector&lt;/code&gt;. Remember that the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class provides the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array with a value of 🐶 (puppy):</source>
          <target state="translated">相反，注入器将从 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; &lt;code&gt;ElementInjector&lt;/code&gt; 开始。请记住， &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 类提供 &lt;code&gt;AnimalService&lt;/code&gt; 中 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 阵列🐶（小狗）的值：</target>
        </trans-unit>
        <trans-unit id="f4d21a07e95b9953380838df336b7bcbf54fa876" translate="yes" xml:space="preserve">
          <source>Instead, you can provide the &lt;code&gt;VillainsService&lt;/code&gt; in the &lt;code&gt;providers&lt;/code&gt; metadata of the &lt;code&gt;VillainsListComponent&lt;/code&gt; like this:</source>
          <target state="translated">相反，您可以在 &lt;code&gt;VillainsService&lt;/code&gt; 的 &lt;code&gt;providers&lt;/code&gt; 元数据中提供 &lt;code&gt;VillainsListComponent&lt;/code&gt; 如下所示：</target>
        </trans-unit>
        <trans-unit id="551fe93146e649cede5e84c7c64fdd5129d01274" translate="yes" xml:space="preserve">
          <source>Instead, you need a way to load a new component without a fixed reference to the component in the ad banner's template.</source>
          <target state="translated">相反,你需要一种方法来加载一个新的组件,而不需要在广告横幅的模板中固定引用该组件。</target>
        </trans-unit>
        <trans-unit id="3cd340c809823308a4cc4e69ad216846bec763e0" translate="yes" xml:space="preserve">
          <source>Instead, you'd use property binding and write it like this:</source>
          <target state="translated">相反,你会使用属性绑定,并像这样写。</target>
        </trans-unit>
        <trans-unit id="935c5dd61b56d9204ed4186be8b2db4497e1e865" translate="yes" xml:space="preserve">
          <source>Integrate routing with your app</source>
          <target state="translated">将路由与您的应用程序集成</target>
        </trans-unit>
        <trans-unit id="5a59fb5b70ad75f96031a69bba18f29e2692a460" translate="yes" xml:space="preserve">
          <source>Integrating with the CLI</source>
          <target state="translated">与CLI集成</target>
        </trans-unit>
        <trans-unit id="3bd6ede907470fb16d3cec8333066bb3ecc44047" translate="yes" xml:space="preserve">
          <source>Intercept input property changes with &lt;code&gt;ngOnChanges()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;ngOnChanges()&lt;/code&gt; 拦截输入属性更改</target>
        </trans-unit>
        <trans-unit id="fd68d13ca9ca2470bae05c55573d064542db92fb" translate="yes" xml:space="preserve">
          <source>Intercept input property changes with a setter</source>
          <target state="translated">用设定器拦截输入属性的变化</target>
        </trans-unit>
        <trans-unit id="763892b6e7a2d1ac84d61ec316cc6bf8b1d9cc3e" translate="yes" xml:space="preserve">
          <source>Interceptor order</source>
          <target state="translated">拦截器顺序</target>
        </trans-unit>
        <trans-unit id="49b669e2ea2af9c86b0cdbcb202a2a4cee9dafbb" translate="yes" xml:space="preserve">
          <source>Interceptors can handle requests by themselves, without forwarding to &lt;code&gt;next.handle()&lt;/code&gt;.</source>
          <target state="translated">拦截器可以自己处理请求，而无需转发到 &lt;code&gt;next.handle()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46734f11cb3498f3b31bc09aa4d5892c9572c37b" translate="yes" xml:space="preserve">
          <source>Interceptors can perform a variety of &lt;em&gt;implicit&lt;/em&gt; tasks, from authentication to logging, in a routine, standard way, for every HTTP request/response.</source>
          <target state="translated">拦截器可以对每个HTTP请求/响应执行常规，标准方式的各种&lt;em&gt;隐式&lt;/em&gt;任务，从身份验证到日志记录。</target>
        </trans-unit>
        <trans-unit id="78777651ce595557401c9f74bf00aced47fcba6c" translate="yes" xml:space="preserve">
          <source>Interceptors sit between the &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; interface and the &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">拦截器位于 &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 接口和 &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 之间。</target>
        </trans-unit>
        <trans-unit id="f1e0f70c8d07051766080d71ba2f745bf68b9ae3" translate="yes" xml:space="preserve">
          <source>Intercepts and handles an &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">拦截并处理 &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee4ce4943c7c8f62cc7efe1749d8027783f80f63" translate="yes" xml:space="preserve">
          <source>Intercepts and handles an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">拦截并处理 &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51feddee76f6ae2ad0215641743746a9f5b45fb4" translate="yes" xml:space="preserve">
          <source>Interface for options provided to an &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">提供给 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 的选项的接口。</target>
        </trans-unit>
        <trans-unit id="2fcbaf5b57a8ead29b181bc23a1d29fcef1a8f14" translate="yes" xml:space="preserve">
          <source>Interface for options provided to an &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">提供给 &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 的选项的接口。</target>
        </trans-unit>
        <trans-unit id="c3789cc9f6d7a24798ad678cfda27d1e007aa43c" translate="yes" xml:space="preserve">
          <source>Interface for the events emitted through the NgElementStrategy.</source>
          <target state="translated">通过NgElementStrategy发出的事件的接口。</target>
        </trans-unit>
        <trans-unit id="618b7ef5256168d128b4d93fe5abd44e6760f4d3" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a child route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">类可以实现为确定是否可以激活子路由的后卫的接口。如果所有防护措施都返回 &lt;code&gt;true&lt;/code&gt; ，则导航将继续。如果任何防护返回 &lt;code&gt;false&lt;/code&gt; ，则导航将被取消。如果任何防护返回 &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; ，则当前导航将被取消，并且新的导航将启动到从防护返回的 &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff140188a7896c0f0df7b9ddc4cf62e57c908572" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a child route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">类可以实现为确定是否可以激活子路由的后卫的接口。如果所有防护措施都返回 &lt;code&gt;true&lt;/code&gt; ，则导航将继续。如果任何防护返回 &lt;code&gt;false&lt;/code&gt; ，则导航将被取消。如果任何防护返回 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; ，则当前导航将被取消，并且新的导航将启动到从防护返回的 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1551571b2aa685eaa6e8ab4305875c5d8fb03db8" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">类可以实现的接口，用于确定是否可以激活路由。如果所有防护措施都返回 &lt;code&gt;true&lt;/code&gt; ，则导航将继续。如果任何防护返回 &lt;code&gt;false&lt;/code&gt; ，则导航将被取消。如果任何防护返回 &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; ，则当前导航将被取消，并且新的导航将启动到从防护返回的 &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db6235325e50211534e110c30d230e1939bbd7e2" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be activated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">类可以实现的接口，用于确定是否可以激活路由。如果所有防护措施都返回 &lt;code&gt;true&lt;/code&gt; ，则导航将继续。如果任何防护返回 &lt;code&gt;false&lt;/code&gt; ，则导航将被取消。如果任何防护返回 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; ，则当前导航将被取消，并且新的导航将启动到从防护返回的 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ab6f18536cd13083f15ab9129ff97d10da6e8d6" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be deactivated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">类可以实现的接口，用于确定是否可以停用路由。如果所有防护措施都返回 &lt;code&gt;true&lt;/code&gt; ，则导航将继续。如果任何防护返回 &lt;code&gt;false&lt;/code&gt; ，则导航将被取消。如果任何防护返回 &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; ，则当前导航将被取消，并且新的导航将启动到从防护返回的 &lt;code&gt;&lt;a href=&quot;router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="679e3b4aabe2bdba94497f1ab16312f39b501277" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if a route can be deactivated. If all guards return &lt;code&gt;true&lt;/code&gt;, navigation will continue. If any guard returns &lt;code&gt;false&lt;/code&gt;, navigation will be cancelled. If any guard returns a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, current navigation will be cancelled and a new navigation will be kicked off to the &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned from the guard.</source>
          <target state="translated">类可以实现的接口，用于确定是否可以停用路由。如果所有防护措施都返回 &lt;code&gt;true&lt;/code&gt; ，则导航将继续。如果任何防护返回 &lt;code&gt;false&lt;/code&gt; ，则导航将被取消。如果任何防护返回 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; ，则当前导航将被取消，并且新的导航将启动到从防护返回的 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c42293e0f6055cbed8f6ec3d952ba787d4b46e25" translate="yes" xml:space="preserve">
          <source>Interface that a class can implement to be a guard deciding if children can be loaded.</source>
          <target state="translated">类可以实现的接口,作为决定是否可以加载子类的卫士。</target>
        </trans-unit>
        <trans-unit id="364f380bef9f10b167def7bdabd0691206b530fd" translate="yes" xml:space="preserve">
          <source>Interface that classes can implement to be a data provider. A data provider class can be used with the router to resolve data during navigation. The interface defines a &lt;code&gt;&lt;a href=&quot;../core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; method that will be invoked when the navigation starts. The router will then wait for the data to be resolved before the route is finally activated.</source>
          <target state="translated">类可以实现为数据提供程序的接口。数据提供程序类可与路由器一起使用，以在导航期间解析数据。该接口定义了 &lt;code&gt;&lt;a href=&quot;../core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; 方法，该方法将在导航开始时被调用。然后，路由器将等待数据解析，然后才能最终激活路由。</target>
        </trans-unit>
        <trans-unit id="336ad0810efbe57a2c014e406a008686e9defe4c" translate="yes" xml:space="preserve">
          <source>Interface that classes can implement to be a data provider. A data provider class can be used with the router to resolve data during navigation. The interface defines a &lt;code&gt;&lt;a href=&quot;core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; method that will be invoked when the navigation starts. The router will then wait for the data to be resolved before the route is finally activated.</source>
          <target state="translated">类可以实现为数据提供程序的接口。数据提供程序类可与路由器一起使用，以在导航期间解析数据。该接口定义了 &lt;code&gt;&lt;a href=&quot;core/reflectiveinjector#resolve&quot;&gt;resolve()&lt;/a&gt;&lt;/code&gt; 方法，该方法将在导航开始时被调用。然后，路由器将等待数据解析，然后才能最终激活路由。</target>
        </trans-unit>
        <trans-unit id="cd29d518f005626eb95c3c088e7f4c477fbfc0c8" translate="yes" xml:space="preserve">
          <source>Interfaces are optional (technically)</source>
          <target state="translated">接口是可选的(技术上</target>
        </trans-unit>
        <trans-unit id="0876cab9619be6a4ff7f8271f44afd88e6881f3c" translate="yes" xml:space="preserve">
          <source>Internal reference to the view model value.</source>
          <target state="translated">视图模型值的内部引用。</target>
        </trans-unit>
        <trans-unit id="c8abcefa3f2571ad565289956a9b68baa5b5d92e" translate="yes" xml:space="preserve">
          <source>Internal.</source>
          <target state="translated">Internal.</target>
        </trans-unit>
        <trans-unit id="5fc8faa1decb29c0de03ec7af94ce77c99a7f168" translate="yes" xml:space="preserve">
          <source>Internally, Angular creates &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances and registers them with an &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive that Angular attached to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. Each &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; is registered under the name you assigned to the &lt;code&gt;name&lt;/code&gt; attribute. Read more in the previous section, &lt;a href=&quot;forms#ngForm&quot;&gt;The NgForm directive&lt;/a&gt;.</source>
          <target state="translated">在内部，Angular创建 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例，并使用Angular附加到 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记的 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令注册它们。每个 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 都以您分配给 &lt;code&gt;name&lt;/code&gt; 属性的名称注册。在上一节&lt;a href=&quot;forms#ngForm&quot;&gt;NgForm指令中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="fbce7514dd339094119f9b2d11f6944248b678c0" translate="yes" xml:space="preserve">
          <source>Internally, Autoprefixer relies on a library called &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist&lt;/a&gt; to figure out which browsers to support with prefixing. Browserlist looks for configuration options in a &lt;code&gt;browserslist&lt;/code&gt; property of the package configuration file, or in a configuration file named &lt;code&gt;.browserslistrc&lt;/code&gt;. Autoprefixer looks for the &lt;code&gt;browserslist&lt;/code&gt; configuration when it prefixes your CSS.</source>
          <target state="translated">在内部，Autoprefixer依赖于称为&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist&lt;/a&gt;的库来确定支持带前缀的浏览器。Browserlist 在程序包配置文件的 &lt;code&gt;browserslist&lt;/code&gt; 属性或名为 &lt;code&gt;.browserslistrc&lt;/code&gt; 的配置文件中查找配置选项。当Autoprefixer为CSS 加上前缀时，它会查找 &lt;code&gt;browserslist&lt;/code&gt; 配置。</target>
        </trans-unit>
        <trans-unit id="4a58c18b307abf758e113f2eeb5fbc842f890084" translate="yes" xml:space="preserve">
          <source>Internally, all static methods cover methods of the current runtime &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance, which is also returned by the &lt;code&gt;&lt;a href=&quot;../api/core/testing/gettestbed&quot;&gt;getTestBed&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">在内部，所有静态方法都覆盖当前运行时 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 实例的方法，该实例也由 &lt;code&gt;&lt;a href=&quot;../api/core/testing/gettestbed&quot;&gt;getTestBed&lt;/a&gt;()&lt;/code&gt; 函数返回。</target>
        </trans-unit>
        <trans-unit id="7fc8aa8e4bf0323d00c15a7a4943933fbf6fb9ae" translate="yes" xml:space="preserve">
          <source>Internationalization (i18n)</source>
          <target state="translated">国际化(i18n)</target>
        </trans-unit>
        <trans-unit id="507e49b9434f4f57a7db4cbad55a28939d060bc6" translate="yes" xml:space="preserve">
          <source>Internationalization (i18n) Guide</source>
          <target state="translated">国际化(i18n)指南</target>
        </trans-unit>
        <trans-unit id="2ceac5014bae5904c30ddb08d140fc4b7928f48a" translate="yes" xml:space="preserve">
          <source>Interpolated content is always escaped&amp;mdash;the HTML isn't interpreted and the browser displays angle brackets in the element's text content.</source>
          <target state="translated">插值内容始终被转义-HTML不会被解释，浏览器在元素的文本内容中显示尖括号。</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="c0d5f0c6fbe15f854b359c7977dd0323a5c988dc" translate="yes" xml:space="preserve">
          <source>Interpolation &lt;code&gt;{{ }}&lt;/code&gt;</source>
          <target state="translated">插值 &lt;code&gt;{{ }}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15241bfb250242f27aea0edbf654c3c0b6eff9c1" translate="yes" xml:space="preserve">
          <source>Interpolation &lt;code&gt;{{...}}&lt;/code&gt;</source>
          <target state="translated">插值 &lt;code&gt;{{...}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cad50a4f2d79b7204d7fa4ee552feedad7652e19" translate="yes" xml:space="preserve">
          <source>Interpolation Property Attribute Class Style</source>
          <target state="translated">插值属性 属性类 风格</target>
        </trans-unit>
        <trans-unit id="9ece64b7320504fa399841a6d62c9a3dbd7784b2" translate="yes" xml:space="preserve">
          <source>Interpolation allows you to incorporate calculated strings into the text between HTML element tags and within attribute assignments. Template expressions are what you use to calculate those strings.</source>
          <target state="translated">通过插值,您可以将计算出的字符串纳入到HTML元素标签之间和属性分配的文本中。模板表达式就是你用来计算这些字符串的东西。</target>
        </trans-unit>
        <trans-unit id="37649b57fe7cf149ac8228d3effb6bd49c8873d2" translate="yes" xml:space="preserve">
          <source>Interpolation and Template Expressions</source>
          <target state="translated">插值和模板表达式</target>
        </trans-unit>
        <trans-unit id="3d349805b5ca7ad2d64bafc375f7ad1fb4256432" translate="yes" xml:space="preserve">
          <source>Interpolation handles the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags differently than property binding but both approaches render the content harmlessly. The following is the browser output of the &lt;code&gt;evilTitle&lt;/code&gt; examples.</source>
          <target state="translated">插值处理 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记与属性绑定的处理方式不同，但是两种方法都可以使内容无害。以下是 &lt;code&gt;evilTitle&lt;/code&gt; 示例的浏览器输出。</target>
        </trans-unit>
        <trans-unit id="4d3d39599f1e253e5d15323a3b40cf507133a6e4" translate="yes" xml:space="preserve">
          <source>Interpolation is a convenient alternative to property binding in many cases. When rendering data values as strings, there is no technical reason to prefer one form to the other, though readability tends to favor interpolation. However, &lt;em&gt;when setting an element property to a non-string data value, you must use property binding&lt;/em&gt;.</source>
          <target state="translated">在许多情况下，插值是属性绑定的便捷替代方法。当将数据值呈现为字符串时，没有技术上的理由偏爱一种形式，尽管可读性倾向于内插。但是，&lt;em&gt;将元素属性设置为非字符串数据值时，必须使用属性binding&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7a70d18508c1f3509d81cd385ef5f470b52a349a" translate="yes" xml:space="preserve">
          <source>Interpolation refers to embedding expressions into marked up text. By default, interpolation uses as its delimiter the double curly braces, &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">插值是指将表达式嵌入标记的文本中。默认情况下，插值使用双花括号 &lt;code&gt;{{&lt;/code&gt; 和 &lt;code&gt;}}&lt;/code&gt; 作为其定界符。</target>
        </trans-unit>
        <trans-unit id="18549284fbd31fe50d2af013bc5f2f807b255c5d" translate="yes" xml:space="preserve">
          <source>Interpolation: &lt;code&gt;&amp;lt;comp greeting=&quot;Hello {{name}}!&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">插值： &lt;code&gt;&amp;lt;comp greeting=&quot;Hello {{name}}!&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="148008a6c97111d9a4baac98fac041378bd84ebd" translate="yes" xml:space="preserve">
          <source>Intl</source>
          <target state="translated">Intl</target>
        </trans-unit>
        <trans-unit id="b3e69f2a42a9ebe8a619598951f3e7f96f8435fa" translate="yes" xml:space="preserve">
          <source>Intl API</source>
          <target state="translated">国际API</target>
        </trans-unit>
        <trans-unit id="e11d234c418f535d475bc472816ff39f325d47a4" translate="yes" xml:space="preserve">
          <source>Introducing Angular pipes, a way to write display-value transformations that you can declare in your HTML.</source>
          <target state="translated">介绍一下Angular管道,这是一种编写显示值转换的方式,你可以在HTML中声明。</target>
        </trans-unit>
        <trans-unit id="39324c26031e2c93ca39870003886cbe2b2e25bf" translate="yes" xml:space="preserve">
          <source>Introducing another container element&amp;mdash;typically a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&amp;mdash;to group the elements under a single &lt;em&gt;root&lt;/em&gt; is usually harmless. &lt;em&gt;Usually&lt;/em&gt; ... but not &lt;em&gt;always&lt;/em&gt;.</source>
          <target state="translated">引入另一个容器元素（通常是 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; )来将元素归为单个&lt;em&gt;根&lt;/em&gt;通常是无害的。&lt;em&gt;通常&lt;/em&gt; ...但并非&lt;em&gt;总是这样&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e4f43f29bd2dc8b1b3dcc99d7b8cc0944588ec40" translate="yes" xml:space="preserve">
          <source>Introduction to Angular animations</source>
          <target state="translated">Angular动画介绍</target>
        </trans-unit>
        <trans-unit id="7a88af9c7af43c51b51f00d5d0cbef442684cf51" translate="yes" xml:space="preserve">
          <source>Introduction to Components</source>
          <target state="translated">组件介绍</target>
        </trans-unit>
        <trans-unit id="037e78ee72bb786b3b99727257ded097b29ed22c" translate="yes" xml:space="preserve">
          <source>Introduction to Modules</source>
          <target state="translated">模块介绍</target>
        </trans-unit>
        <trans-unit id="77695aa23083353741cc8e577e0d1f52b59146ec" translate="yes" xml:space="preserve">
          <source>Introduction to Services and DI</source>
          <target state="translated">服务和DI介绍</target>
        </trans-unit>
        <trans-unit id="1891a5d7cdaa920a5fcf4904feb061ee52d40600" translate="yes" xml:space="preserve">
          <source>Introduction to Template-driven forms</source>
          <target state="translated">模板驱动的表单介绍</target>
        </trans-unit>
        <trans-unit id="47739d8d7f900214f17011b232b38873a5ba56b9" translate="yes" xml:space="preserve">
          <source>Introduction to components</source>
          <target state="translated">部件介绍</target>
        </trans-unit>
        <trans-unit id="b56bd365155a67ad44616a3cfaa0c6f87e0813cf" translate="yes" xml:space="preserve">
          <source>Introduction to forms in Angular</source>
          <target state="translated">Angular中的表单介绍</target>
        </trans-unit>
        <trans-unit id="7cccb3d4fcea31dd15a08fa2a5f77cb23a273075" translate="yes" xml:space="preserve">
          <source>Introduction to modules</source>
          <target state="translated">模块介绍</target>
        </trans-unit>
        <trans-unit id="0709e3f3783847d46c02c3e879b4d2aa32e91ee8" translate="yes" xml:space="preserve">
          <source>Introduction to reactive forms</source>
          <target state="translated">反应式介绍</target>
        </trans-unit>
        <trans-unit id="de2848f98042a65b60c04421d206e68ca3490213" translate="yes" xml:space="preserve">
          <source>Introduction to services and dependency injection</source>
          <target state="translated">服务和依赖注入介绍</target>
        </trans-unit>
        <trans-unit id="d784ef7dd559f90510b1c51d9366c7111e5f69d8" translate="yes" xml:space="preserve">
          <source>Introductory documentation for the root app.</source>
          <target state="translated">根应用的介绍性文档。</target>
        </trans-unit>
        <trans-unit id="ef11e3a45fcbddfa8943f16664c96693dbbd2dac" translate="yes" xml:space="preserve">
          <source>Invoke Push Notifications by pushing a message with the following payload.</source>
          <target state="translated">通过推送具有以下有效载荷的消息来调用推送通知。</target>
        </trans-unit>
        <trans-unit id="88241a92475e9beecdb4c31ab3c1fdf7de6dab59" translate="yes" xml:space="preserve">
          <source>Invoke as decorator.</source>
          <target state="translated">援用作为装饰者。</target>
        </trans-unit>
        <trans-unit id="59d70d5937eb1157be8db1664978fb31d22e53bb" translate="yes" xml:space="preserve">
          <source>Invoke the tool on the command line through the &lt;code&gt;ng&lt;/code&gt; executable. Online help is available on the command line. Enter the following to list commands or options for a given command (such as &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;generate&lt;/a&gt;) with a short description.</source>
          <target state="translated">通过 &lt;code&gt;ng&lt;/code&gt; 可执行文件在命令行上调用该工具。联机帮助可从命令行获得。输入以下内容以简短说明列出命令或给定命令的选项（例如&lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;generate&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bcf4fe5e09f5109017dca07a3cf2d814a91d3785" translate="yes" xml:space="preserve">
          <source>Invoke this method to explicitly process change detection and its side-effects.</source>
          <target state="translated">调用此方法来显式处理变化检测及其副作用。</target>
        </trans-unit>
        <trans-unit id="f71314c70f579581e6aeb34f93359ab3921893e3" translate="yes" xml:space="preserve">
          <source>Invokes the deploy builder for a specified project or for the default project in the workspace.</source>
          <target state="translated">调用工作区中指定项目或默认项目的部署生成器。</target>
        </trans-unit>
        <trans-unit id="d1940ca4cbd9dbd0eb38f2bc2ef028f64f0e3ebe" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;{{ 'ok' | repeat:3 }}&lt;/code&gt; in a template produces &lt;code&gt;okokok&lt;/code&gt;.</source>
          <target state="translated">调用 &lt;code&gt;{{ 'ok' | repeat:3 }}&lt;/code&gt; 在模板中产生 &lt;code&gt;okokok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ecb88a0d7e8f36c9744ae06147a6fdb631de233" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;Lightswitch.clicked()&lt;/code&gt; bound to anything such that the user can invoke it?</source>
          <target state="translated">被 &lt;code&gt;Lightswitch.clicked()&lt;/code&gt; 绑定到任何东西，使得用户可以调用它？</target>
        </trans-unit>
        <trans-unit id="ac8f08f500ef6eac216f7e2f6acc17d63f159658" translate="yes" xml:space="preserve">
          <source>Is its own tax return editing session.</source>
          <target state="translated">是自己的纳税申报编辑环节。</target>
        </trans-unit>
        <trans-unit id="26b69a05483ffab3d41808c70bd31cc4f9e37b16" translate="yes" xml:space="preserve">
          <source>Is the &lt;code&gt;Lightswitch.message&lt;/code&gt; displayed?</source>
          <target state="translated">是否显示 &lt;code&gt;Lightswitch.message&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="3ccfab603206383b681f28870947bbf1d675dda5" translate="yes" xml:space="preserve">
          <source>Is the hero name displayed as expected (i.e, in uppercase)?</source>
          <target state="translated">英雄的名字是否按预期显示(即大写)?</target>
        </trans-unit>
        <trans-unit id="62759ede6184ca8bf2ccab209b605f3ebc11e427" translate="yes" xml:space="preserve">
          <source>Is the welcome message displayed by the template of &lt;code&gt;WelcomeComponent&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;WelcomeComponent&lt;/code&gt; 模板是否显示欢迎消息？</target>
        </trans-unit>
        <trans-unit id="a59c6ce02a2484a37dbf441374573cec25db7336" translate="yes" xml:space="preserve">
          <source>It &lt;em&gt;creates&lt;/em&gt; the &lt;code&gt;TestHostComponent&lt;/code&gt; instead of the &lt;code&gt;DashboardHeroComponent&lt;/code&gt;.</source>
          <target state="translated">它&lt;em&gt;创造&lt;/em&gt;了 &lt;code&gt;TestHostComponent&lt;/code&gt; 而不是 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94b8e34baeefba35b8b89673f3480499d94bf056" translate="yes" xml:space="preserve">
          <source>It &lt;em&gt;declares&lt;/em&gt; both the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; and the &lt;code&gt;TestHostComponent&lt;/code&gt;.</source>
          <target state="translated">它同时&lt;em&gt;声明&lt;/em&gt;了 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 和 &lt;code&gt;TestHostComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b21529cea838e2b6b15441950bdae0264cbbefbf" translate="yes" xml:space="preserve">
          <source>It accepts a &lt;code&gt;text/html&lt;/code&gt; response (as determined by the value of the &lt;code&gt;Accept&lt;/code&gt; header).</source>
          <target state="translated">它接受 &lt;code&gt;text/html&lt;/code&gt; 响应（由 &lt;code&gt;Accept&lt;/code&gt; 标头的值确定）。</target>
        </trans-unit>
        <trans-unit id="e2ae87480d790dfa92913ec2c7c57b94a67e403b" translate="yes" xml:space="preserve">
          <source>It accepts a domain model as an optional &lt;code&gt;&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;. If you have a one-way binding to &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;[]&lt;/code&gt; syntax, changing the value of the domain model in the component class sets the value in the view. If you have a two-way binding with &lt;code&gt;[()]&lt;/code&gt; syntax (also known as 'banana-box syntax'), the value in the UI always syncs back to the domain model in your class.</source>
          <target state="translated">它接受域模型作为可选的 &lt;code&gt;&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 。如果使用 &lt;code&gt;[]&lt;/code&gt; 语法与 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 进行单向绑定，则在组件类中更改域模型的值将在视图中设置该值。如果您使用 &lt;code&gt;[()]&lt;/code&gt; 语法（也称为&amp;ldquo;香蕉盒语法&amp;rdquo;）进行双向绑定，则UI中的值将始终同步回到您类中的域模型。</target>
        </trans-unit>
        <trans-unit id="d1ef5600898e0ae01610d043a4a9f983f75191ed" translate="yes" xml:space="preserve">
          <source>It accepts both super-sets and sub-sets of the array without throwing an error.</source>
          <target state="translated">它同时接受数组的超集和子集,而不会出现错误。</target>
        </trans-unit>
        <trans-unit id="4bccd25078f3c01228e73bdbae0161e45566c3cb" translate="yes" xml:space="preserve">
          <source>It accepts both super-sets and sub-sets of the group without throwing an error.</source>
          <target state="translated">它同时接受组的超集和子集,而不会抛出错误。</target>
        </trans-unit>
        <trans-unit id="c13d32540d684ec2971d8a6aa07a438b2688dad0" translate="yes" xml:space="preserve">
          <source>It accepts the string name of the nested &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; you want to link, and will look for a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; registered with that name in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance you passed into &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">它接受嵌套的字符串名称 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 要链接，将查找 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 与父这个名字注册 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 你传入实例 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92bb130acb69f1ba28771910ed692ccf19a723f9" translate="yes" xml:space="preserve">
          <source>It accepts the string name of the nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to link, and looks for a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; registered with that name in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance you passed into &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">它接受嵌套的字符串名称 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 链接，并寻找 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 与父这个名字注册 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 你传入实例 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8a6c222dced75a612315602dfc6bf860b4fcfb4" translate="yes" xml:space="preserve">
          <source>It allows instantiating or even loading the Angular part lazily, which improves the initial loading time. In some cases this may waive the cost of running a second framework altogether.</source>
          <target state="translated">它允许实例化甚至懒惰地加载Angular部分,从而改善初始加载时间。在某些情况下,这可能会免除完全运行第二个框架的成本。</target>
        </trans-unit>
        <trans-unit id="8e63edca4aba60ae769633e65db45ce6b8cda1c2" translate="yes" xml:space="preserve">
          <source>It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to pay the cost up-front. For example, you can have an AngularJS application that uses Angular for specific routes and only instantiate the Angular modules if/when the user visits one of these routes.</source>
          <target state="translated">它允许懒惰地加载/引导混合应用程序的Angular部分,而不必预先支付成本。例如,你可以有一个AngularJS应用程序,它为特定的路线使用Angular,只有当用户访问这些路线之一时才实例化Angular模块。</target>
        </trans-unit>
        <trans-unit id="1fb8a3420da7cbbbfae709f23348ef16e743e69f" translate="yes" xml:space="preserve">
          <source>It also contains properties to access the &lt;a href=&quot;upgrademodule#injector&quot;&gt;root injector&lt;/a&gt;, the bootstrap &lt;code&gt;&lt;a href=&quot;../../core/ngzone&quot;&gt;NgZone&lt;/a&gt;&lt;/code&gt; and the &lt;a href=&quot;https://docs.angularjs.org/api/auto/service/%24injector&quot;&gt;AngularJS $injector&lt;/a&gt;.</source>
          <target state="translated">它还包含用于访问&lt;a href=&quot;upgrademodule#injector&quot;&gt;根注入器&lt;/a&gt;，引导 &lt;code&gt;&lt;a href=&quot;../../core/ngzone&quot;&gt;NgZone&lt;/a&gt;&lt;/code&gt; 和&lt;a href=&quot;https://docs.angularjs.org/api/auto/service/%24injector&quot;&gt;AngularJS $ injector的&lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="f071a0b65644eeeccb34ee7fdae07a260e0e9140" translate="yes" xml:space="preserve">
          <source>It also creates the following workspace and starter project files:</source>
          <target state="translated">它还会创建以下工作空间和启动项目文件。</target>
        </trans-unit>
        <trans-unit id="6c32f9929135cab965aabc48fd19faf6dd6dce8a" translate="yes" xml:space="preserve">
          <source>It also generates an initial test file for the component, &lt;code&gt;banner-external.component.spec.ts&lt;/code&gt;, that looks like this:</source>
          <target state="translated">它还会为组件生成初始测试文件 &lt;code&gt;banner-external.component.spec.ts&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="8efa0771b30ff267b601afb0f7067fc48209cdec" translate="yes" xml:space="preserve">
          <source>It also has a side-effect. &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; logs the &lt;code&gt;path&lt;/code&gt; of a selected route in its public &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">它也有副作用。 &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; 将所选路由的 &lt;code&gt;path&lt;/code&gt; 记录在其公共 &lt;code&gt;preloadedModules&lt;/code&gt; 数组中。</target>
        </trans-unit>
        <trans-unit id="10fdc8fee72f7646b8b3adf2c52bb9b3221fcdfe" translate="yes" xml:space="preserve">
          <source>It appears within the template of a parent component, which binds a &lt;em&gt;hero&lt;/em&gt; to the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; property and listens for an event raised through the &lt;em&gt;selected&lt;/em&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">它出现在父组件的模板内，该组件将&lt;em&gt;英雄&lt;/em&gt;绑定到 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 属性，并侦听通过&lt;em&gt;选定的&lt;/em&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 属性引发的事件。</target>
        </trans-unit>
        <trans-unit id="f279ef89e1bf02c3528c17799c4418cc58336a95" translate="yes" xml:space="preserve">
          <source>It belongs to the optional &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and you must &lt;em&gt;opt-in&lt;/em&gt; to using it.</source>
          <target state="translated">它属于可选的 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; ，您必须&lt;em&gt;选择&lt;/em&gt;使用它。</target>
        </trans-unit>
        <trans-unit id="26023f5577f25d3446bc370676b0a6f86e7e8aba" translate="yes" xml:space="preserve">
          <source>It calls &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">它调用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; 而不是 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;put()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e20098109d5ecc4ec6a976711ca2510fe455a018" translate="yes" xml:space="preserve">
          <source>It can be created manually, as follows:</source>
          <target state="translated">可以手动创建,具体如下:</target>
        </trans-unit>
        <trans-unit id="4bc5d4c1a8b1283e28876118079505f0a82bc822" translate="yes" xml:space="preserve">
          <source>It can be problematic for an app if the version of resources it's receiving changes suddenly or without warning. See the &lt;a href=&quot;service-worker-devops#versions&quot;&gt;Versions&lt;/a&gt; section above for a description of such issues.</source>
          <target state="translated">如果应用程序正在接收的资源版本突然更改或没有警告，则可能会出现问题。有关此类问题的说明，请参见上面的&amp;ldquo; &lt;a href=&quot;service-worker-devops#versions&quot;&gt;版本&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="08426e933f904dc80c16feae7eab518a4a961cf1" translate="yes" xml:space="preserve">
          <source>It can be provided to this method in one of two formats:</source>
          <target state="translated">它可以以两种格式之一提供给本方法。</target>
        </trans-unit>
        <trans-unit id="7d56cfef604890a297d3766102bad859f461f7ec" translate="yes" xml:space="preserve">
          <source>It can't just reference the &lt;code&gt;id&lt;/code&gt; property of the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt;. The component has to &lt;em&gt;subscribe&lt;/em&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; observable and be prepared for the &lt;code&gt;id&lt;/code&gt; to change during its lifetime.</source>
          <target state="translated">它不能仅引用 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt; 属性。该组件必须&lt;em&gt;订阅&lt;/em&gt;可观察到的 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; ,并准备好在其生存期内更改 &lt;code&gt;id&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cfb1bbd0359c2cf1cb726dd86d8ce0539e6977ba" translate="yes" xml:space="preserve">
          <source>It declares and exports the utility pipe, directive, and component classes.</source>
          <target state="translated">它声明并输出实用管道、指令和组件类。</target>
        </trans-unit>
        <trans-unit id="d7d019223649a73995168e563585db9bbe9dadab" translate="yes" xml:space="preserve">
          <source>It defines a &lt;code&gt;heroes&lt;/code&gt; array property.</source>
          <target state="translated">它定义了 &lt;code&gt;heroes&lt;/code&gt; 数组属性。</target>
        </trans-unit>
        <trans-unit id="a6f7ce9a8a99f6706e4390e417534249fdbde969" translate="yes" xml:space="preserve">
          <source>It describes features which are part of Angular Labs, and are not considered a stable, supported API.</source>
          <target state="translated">它描述的功能是Angular Labs的一部分,并不被认为是一个稳定的、支持的API。</target>
        </trans-unit>
        <trans-unit id="e74c4df29123d7f1b28af5c3920c37049db746dc" translate="yes" xml:space="preserve">
          <source>It displays a simple form with a header, an input box for the message, and two buttons, &quot;Send&quot; and &quot;Cancel&quot;.</source>
          <target state="translated">它显示了一个简单的表单,有一个标题,一个信息输入框,以及两个按钮,&quot;发送 &quot;和 &quot;取消&quot;。</target>
        </trans-unit>
        <trans-unit id="bf7952a8d431d45427cd14b51695264b8ed72382" translate="yes" xml:space="preserve">
          <source>It does not require you to change how you bootstrap your AngularJS app.</source>
          <target state="translated">它不需要你改变你的AngularJS应用的引导方式。</target>
        </trans-unit>
        <trans-unit id="6b9ed176655d2ae7894637c252aa287ceb5d8d56" translate="yes" xml:space="preserve">
          <source>It enforces the use of component best practices like &lt;code&gt;controllerAs&lt;/code&gt;.</source>
          <target state="translated">它强制使用诸如 &lt;code&gt;controllerAs&lt;/code&gt; 之类的组件最佳实践。</target>
        </trans-unit>
        <trans-unit id="42cd08f715154702ba1bfcb5f060c73f70e0f76a" translate="yes" xml:space="preserve">
          <source>It expects the server to generate an id for the new hero, which it returns in the &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; to the caller.</source>
          <target state="translated">它希望服务器为新英雄生成一个ID，并将其在 &lt;code&gt;Observable&amp;lt;Hero&amp;gt;&lt;/code&gt; 返回给调用者。</target>
        </trans-unit>
        <trans-unit id="95d0bff9d24171d2c283dde8af92d28339fe8434" translate="yes" xml:space="preserve">
          <source>It forwards that request to &lt;code&gt;next.handle()&lt;/code&gt; which ultimately calls the server and returns the server's response.</source>
          <target state="translated">它将请求转发到 &lt;code&gt;next.handle()&lt;/code&gt; ，最终调用服务器并返回服务器的响应。</target>
        </trans-unit>
        <trans-unit id="cff060b2c8359f3ecbce1c4cf07f83a9266ef3a7" translate="yes" xml:space="preserve">
          <source>It has Angular properties and methods that abstract interaction with the native element. This test calls the &lt;code&gt;DebugElement.triggerEventHandler&lt;/code&gt; with the &quot;click&quot; event name. The &quot;click&quot; event binding responds by calling &lt;code&gt;DashboardHeroComponent.click()&lt;/code&gt;.</source>
          <target state="translated">它具有Angular属性和抽象与本机元素交互的方法。此测试使用&amp;ldquo; click&amp;rdquo;事件名称调用 &lt;code&gt;DebugElement.triggerEventHandler&lt;/code&gt; 。&amp;ldquo; click&amp;rdquo;事件绑定通过调用 &lt;code&gt;DashboardHeroComponent.click()&lt;/code&gt; 进行响应。</target>
        </trans-unit>
        <trans-unit id="77cb21518043d46f3f115c5e67031ef805971a8e" translate="yes" xml:space="preserve">
          <source>It has a legitimate purpose in this guide. It demonstrates how to find a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; element, click it, and inspect a result, without engaging the full router machinery. This is a skill you may need to test a more sophisticated component, one that changes the display, re-calculates parameters, or re-arranges navigation options when the user clicks the link.</source>
          <target state="translated">在本指南中有合法目的。它演示了如何找到 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 元素，单击它并检查结果，而无需使用完整的路由器设备。这是您可能需要测试的一种技能，即当用户单击链接时，该组件可以更改显示，重新计算参数或重新排列导航选项。</target>
        </trans-unit>
        <trans-unit id="e4df5dc55e01418d5fe02e4482c23400263dcc59" translate="yes" xml:space="preserve">
          <source>It has a simple template that only includes the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;. This component just renders the contents of the active route and nothing else.</source>
          <target state="translated">它有一个仅包含 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 的简单模板。该组件仅呈现活动路由的内容，而没有其他任何内容。</target>
        </trans-unit>
        <trans-unit id="9922a6848ec3f5a8b7802dc76ee7ad819c476823" translate="yes" xml:space="preserve">
          <source>It has good default values for directive attributes like &lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;restrict&lt;/code&gt;.</source>
          <target state="translated">它对指令属性（例如 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;restrict&lt;/code&gt; 具有良好的默认值。</target>
        </trans-unit>
        <trans-unit id="bea15911cc873bfe30f8a513aaa359e498d5ee43" translate="yes" xml:space="preserve">
          <source>It imports the &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; because the module's component needs common directives.</source>
          <target state="translated">它导入 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; ,因为模块的组件需要通用指令。</target>
        </trans-unit>
        <trans-unit id="ad4bae11dc99871b8342e876ba6993b4893ae7e5" translate="yes" xml:space="preserve">
          <source>It improves performance by avoiding unnecessary change detection runs while giving the developer greater ability to customize.</source>
          <target state="translated">它通过避免不必要的变化检测运行来提高性能,同时给开发者更大的定制能力。</target>
        </trans-unit>
        <trans-unit id="4164a929740068617e47d44247f8d7f7d80f5919" translate="yes" xml:space="preserve">
          <source>It is a &lt;em&gt;shell&lt;/em&gt; for the crisis management feature area, just as the &lt;code&gt;AppComponent&lt;/code&gt; is a shell to manage the high-level workflow.</source>
          <target state="translated">它是危机管理功能区域的&lt;em&gt;外壳&lt;/em&gt;，就像 &lt;code&gt;AppComponent&lt;/code&gt; 是用于管理高级工作流的外壳一样。</target>
        </trans-unit>
        <trans-unit id="39bf93eba307188a64bd26bb14fbc70e653f1001" translate="yes" xml:space="preserve">
          <source>It is a better practice to redistribute the component and its supporting classes into their own, dedicated files.</source>
          <target state="translated">比较好的做法是将组件及其支持类重新分发到自己的专用文件中。</target>
        </trans-unit>
        <trans-unit id="f4c906b1ec5168c0204d5b89211f8c14a110d92c" translate="yes" xml:space="preserve">
          <source>It is also rare but valid for an interceptor to return multiple responses on the event stream for a single request.</source>
          <target state="translated">拦截器为一个请求在事件流上返回多个响应也很罕见,但却是有效的。</target>
        </trans-unit>
        <trans-unit id="7c3e6bd90e578a6d369fe153a9ba93c287cbf958" translate="yes" xml:space="preserve">
          <source>It is customary but not required to &lt;em&gt;precede&lt;/em&gt; the &lt;em&gt;closing HTML&lt;/em&gt; tag with a blank line as well.</source>
          <target state="translated">这是习惯，但不要求&lt;em&gt;先&lt;/em&gt;在&lt;em&gt;收盘HTML&lt;/em&gt;以一个空行标记为好。</target>
        </trans-unit>
        <trans-unit id="e2c901bdbe9622031dbf422258b1577bf6c7cfb3" translate="yes" xml:space="preserve">
          <source>It is highly recommended that you ensure that your app works even without service worker support in the browser. Although an unsupported browser ignores service worker caching, it will still report errors if the app attempts to interact with the service worker. For example, calling &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt; will return rejected promises. To avoid such an error, you can check whether the Angular service worker is enabled using &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#isEnabled&quot;&gt;SwUpdate.isEnabled&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">强烈建议您确保即使在浏览器中没有服务人员支持的情况下，您的应用也可以正常运行。尽管不受支持的浏览器会忽略服务工作者缓存，但如果应用程序尝试与服务工作者进行交互，它将仍然报告错误。例如，调用 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt; 将返回被拒绝的承诺。为避免此类错误，您可以使用 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#isEnabled&quot;&gt;SwUpdate.isEnabled&lt;/a&gt;()&lt;/code&gt; 检查是否启用了Angular服务工作器。</target>
        </trans-unit>
        <trans-unit id="bca41d7798c2016edf356fbe8a535a8995b45502" translate="yes" xml:space="preserve">
          <source>It is important to note that service workers don't work behind redirect. You may have already encountered the error &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">重要的是要注意服务人员不要在重定向后面工作。您可能已经遇到错误 &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6149684d6a8cae8e0ae20c1797198ea032977a49" translate="yes" xml:space="preserve">
          <source>It is important to note that the asynchronous validation happens after the synchronous validation, and is performed only if the synchronous validation is successful. This check allows forms to avoid potentially expensive async validation processes such as an HTTP request if more basic validation methods fail.</source>
          <target state="translated">需要注意的是,异步验证发生在同步验证之后,并且只有在同步验证成功的情况下才会执行。如果更多的基本验证方法失败,这种检查可以让表单避免潜在的昂贵的异步验证过程,如HTTP请求。</target>
        </trans-unit>
        <trans-unit id="96d7f100fd14c118e644c78eb99afbea37e0600c" translate="yes" xml:space="preserve">
          <source>It is important to remember that &lt;em&gt;HTML attribute&lt;/em&gt; and the &lt;em&gt;DOM property&lt;/em&gt; are different things, even when they have the same name. In Angular, the only role of HTML attributes is to initialize element and directive state.</source>
          <target state="translated">重要的是要记住，即使&lt;em&gt;HTML属性&lt;/em&gt;和&lt;em&gt;DOM属性&lt;/em&gt;具有相同的名称，它们也是不同的。在Angular中，HTML属性的唯一作用是初始化元素和指令状态。</target>
        </trans-unit>
        <trans-unit id="b0fefa48f8275785f28ed330c1e6500e50579c8a" translate="yes" xml:space="preserve">
          <source>It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous code. The sanitizer leaves safe values intact.</source>
          <target state="translated">如果值是安全的,例如一个不以可疑协议开头的URL,或者一个不包含危险代码的HTML片段,则不需要(也不建议)绕过安全。净化器会完整地保留安全值。</target>
        </trans-unit>
        <trans-unit id="99529fc95ba91bf865b8bdc126836b31f7c4b6ea" translate="yes" xml:space="preserve">
          <source>It is often a good idea to &lt;em&gt;lock-in&lt;/em&gt; a good anchor name.</source>
          <target state="translated">&lt;em&gt;锁定&lt;/em&gt;好锚名称通常是一个好主意。</target>
        </trans-unit>
        <trans-unit id="4db5a6501589861c8253d34112728578aa1f6cad" translate="yes" xml:space="preserve">
          <source>It is possible for a schematic to provide all of its logic in the &lt;code&gt;index.ts&lt;/code&gt; file, without additional templates. You can create dynamic schematics for Angular, however, by providing components and templates in the &lt;code&gt;files/&lt;/code&gt; folder, like those in standalone Angular projects. The logic in the index file configures these templates by defining rules that inject data and modify variables.</source>
          <target state="translated">原理图可以在 &lt;code&gt;index.ts&lt;/code&gt; 文件中提供其所有逻辑，而无需其他模板。但是，您可以通过在 &lt;code&gt;files/&lt;/code&gt; 文件夹中提供组件和模板来创建Angular的动态原理图，例如独立Angular项目中的组件和模板。索引文件中的逻辑通过定义注入数据和修改变量的规则来配置这些模板。</target>
        </trans-unit>
        <trans-unit id="ffeddf5c1683cd01631856186ef36a7b7e49a9d5" translate="yes" xml:space="preserve">
          <source>It is possible to define the component first with the help of the &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;()&lt;/code&gt; method as explained in this &lt;a href=&quot;http://blog.thoughtram.io/angular/2015/09/03/forward-references-in-angular-2.html&quot;&gt;blog post&lt;/a&gt;.</source>
          <target state="translated">如本&lt;a href=&quot;http://blog.thoughtram.io/angular/2015/09/03/forward-references-in-angular-2.html&quot;&gt;博&lt;/a&gt;文所述，可以 &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;()&lt;/code&gt; 方法首先定义组件。</target>
        </trans-unit>
        <trans-unit id="2473f74c9fd722cdbf273d992f76f8c4263ad073" translate="yes" xml:space="preserve">
          <source>It is possible to downgrade multiple modules and include them in an AngularJS application. In that case, each downgraded module will be bootstrapped when an associated downgraded component or injectable needs to be instantiated.</source>
          <target state="translated">可以将多个模块降级并包含在AngularJS应用中。在这种情况下,当需要实例化相关的降级组件或注入式组件时,每个降级的模块将被引导。</target>
        </trans-unit>
        <trans-unit id="84af64f653bfc89c603108eaa38ffc63b5f37827" translate="yes" xml:space="preserve">
          <source>It is possible to use SVG as valid templates in Angular. All of the template syntax below is applicable to both SVG and HTML. Learn more in the SVG &lt;a href=&quot;https://www.w3.org/TR/SVG11/&quot;&gt;1.1&lt;/a&gt; and &lt;a href=&quot;https://www.w3.org/TR/SVG2/&quot;&gt;2.0&lt;/a&gt; specifications.</source>
          <target state="translated">可以将SVG用作Angular中的有效模板。以下所有模板语法均适用于SVG和HTML。在SVG &lt;a href=&quot;https://www.w3.org/TR/SVG11/&quot;&gt;1.1&lt;/a&gt;和&lt;a href=&quot;https://www.w3.org/TR/SVG2/&quot;&gt;2.0&lt;/a&gt;规范中了解更多信息。</target>
        </trans-unit>
        <trans-unit id="76d730517d126f32e97587e9cbc5e3cf785c0aea" translate="yes" xml:space="preserve">
          <source>It is the &lt;em&gt;root&lt;/em&gt; of the crisis center area, just as &lt;code&gt;AppComponent&lt;/code&gt; is the root of the entire application.</source>
          <target state="translated">它是危机中心区域的&lt;em&gt;根&lt;/em&gt;，就像 &lt;code&gt;AppComponent&lt;/code&gt; 是整个应用程序的根一样。</target>
        </trans-unit>
        <trans-unit id="c5288fb8c9de08ed91bcc1bec73e759d6ce69568" translate="yes" xml:space="preserve">
          <source>It is time to take off the training wheels and let the application begin its new life as a pure, shiny Angular app. The remaining tasks all have to do with removing code - which of course is every programmer's favorite task!</source>
          <target state="translated">是时候摘下训练轮,让应用程序作为一个纯粹的、闪亮的Angular应用程序开始它的新生活了。剩下的任务都与删除代码有关--当然这是每一个程序员最喜欢的任务!</target>
        </trans-unit>
        <trans-unit id="ccb342aa8e1714c7437fd8ad1e8831908215d07c" translate="yes" xml:space="preserve">
          <source>It is valid for &lt;code&gt;.metadata.json&lt;/code&gt; files to contain errors. The template compiler reports these errors if the metadata is used to determine the contents of an annotation. The metadata collector cannot predict the symbols that are designed for use in an annotation, so it preemptively includes error nodes in the metadata for the exported symbols. The template compiler can then use the error nodes to report an error if these symbols are used.</source>
          <target state="translated">&lt;code&gt;.metadata.json&lt;/code&gt; 文件包含错误是有效的。如果元数据用于确定注释的内容，则模板编译器将报告这些错误。元数据收集器无法预测为在注释中使用而设计的符号，因此它会在元数据中针对已导出符号抢先包括错误节点。然后，如果使用了这些符号，则模板编译器可以使用错误节点报告错误。</target>
        </trans-unit>
        <trans-unit id="3d7207af03b5af04389d3df1257a354179fd4eef" translate="yes" xml:space="preserve">
          <source>It looks about the same as any other component you've seen in this guide. There are two noteworthy differences.</source>
          <target state="translated">它看起来和你在本指南中看到的任何其他组件差不多。有两个值得注意的区别。</target>
        </trans-unit>
        <trans-unit id="ce0f95ba15adcc1262d25210b5a0ac97badbdb0a" translate="yes" xml:space="preserve">
          <source>It may be advantageous to deviate from the &lt;em&gt;one-thing-per-file&lt;/em&gt; rule when you have a set of small, closely-related features that are better discovered and understood in a single file than as multiple files. Be wary of this loophole.</source>
          <target state="translated">如果您拥有一组小型的，紧密相关的功能，这些功能最好在单个文件中被发现和理解，而不是多个文件，那么偏离&lt;em&gt;每个文件一个&lt;/em&gt;规则可能是有利的。警惕此漏洞。</target>
        </trans-unit>
        <trans-unit id="13dbe81d25cc860ec205d64166f5c721b4b86799" translate="yes" xml:space="preserve">
          <source>It may be difficult to imagine how this directive actually works. In this section, you'll turn &lt;code&gt;AppComponent&lt;/code&gt; into a harness that lets you pick the highlight color with a radio button and bind your color choice to the directive.</source>
          <target state="translated">很难想象这个指令是如何工作的。在本部分中，您将把 &lt;code&gt;AppComponent&lt;/code&gt; 变成一个线束，使您可以使用单选按钮选择突出显示的颜色并将颜色选择绑定到指令。</target>
        </trans-unit>
        <trans-unit id="77eed6237424237999f7c2a34a9fb9ff0e0091ce" translate="yes" xml:space="preserve">
          <source>It may be more economical to create the forms dynamically, based on metadata that describes the business object model.</source>
          <target state="translated">基于描述业务对象模型的元数据,动态地创建表单可能更经济。</target>
        </trans-unit>
        <trans-unit id="bacb242ddb0949af950399df1070a8a6e831b848" translate="yes" xml:space="preserve">
          <source>It might not look like the class has properties, but it does. The declaration of the constructor parameters takes advantage of a TypeScript shortcut.</source>
          <target state="translated">它可能看起来不像这个类有属性,但它确实有。构造函数参数的声明利用了TypeScript的快捷方式。</target>
        </trans-unit>
        <trans-unit id="e089e64834f141326fc0828463df856289d092cb" translate="yes" xml:space="preserve">
          <source>It must be known ahead of time so that IDEs can parse it without knowing the underlying semantics of the directive or what directives are present.</source>
          <target state="translated">必须提前知道,这样IDE就可以在不知道指令的底层语义或有哪些指令的情况下对其进行解析。</target>
        </trans-unit>
        <trans-unit id="cd59871da798733ed7ae9afa636c133a8f98ca66" translate="yes" xml:space="preserve">
          <source>It must translate to key-value attributes in the DOM.</source>
          <target state="translated">它必须转化为DOM中的键值属性。</target>
        </trans-unit>
        <trans-unit id="b4b70d7ad2d5ef809560d50e542640d494da5baf" translate="yes" xml:space="preserve">
          <source>It navigates imperatively with the &lt;code&gt;&lt;a href=&quot;../api/router/router#navigate&quot;&gt;Router.navigate()&lt;/a&gt;&lt;/code&gt; method, passing in a &lt;a href=&quot;router#link-parameters-array&quot;&gt;link parameters array&lt;/a&gt;.</source>
          <target state="translated">它使用 &lt;code&gt;&lt;a href=&quot;../api/router/router#navigate&quot;&gt;Router.navigate()&lt;/a&gt;&lt;/code&gt; 方法强制进行导航，并传入&lt;a href=&quot;router#link-parameters-array&quot;&gt;链接参数array&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90f73e390a5723e407fe6308cf983a850544d1b6" translate="yes" xml:space="preserve">
          <source>It presents a list of questions, each bound to a &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; component element. The &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; tag matches the &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt;, the component responsible for rendering the details of each &lt;em&gt;individual&lt;/em&gt; question based on values in the data-bound question object.</source>
          <target state="translated">它提供了一个问题列表，每个问题都绑定到一个 &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; 组件元素。所述 &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; 标签的匹配 &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; ，该组件负责呈现每个细节&lt;em&gt;个体&lt;/em&gt;基于所述数据绑定问题对象值的问题。</target>
        </trans-unit>
        <trans-unit id="82a5d3b75fdd687a86c692b5142357640cb12862" translate="yes" xml:space="preserve">
          <source>It provides some of the shared behavior that all controls and groups of controls have, like running validators, calculating status, and resetting state. It also defines the properties that are shared between all sub-classes, like &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;valid&lt;/code&gt;, and &lt;code&gt;dirty&lt;/code&gt;. It shouldn't be instantiated directly.</source>
          <target state="translated">它提供了所有控件和控件组具有的某些共享行为，例如运行验证器，计算状态和重置状态。它还定义了所有子类之间共享的属性，例如 &lt;code&gt;value&lt;/code&gt; ， &lt;code&gt;valid&lt;/code&gt; 和 &lt;code&gt;dirty&lt;/code&gt; 。不应该直接实例化它。</target>
        </trans-unit>
        <trans-unit id="d171e074941cff4fb7a54c6be8c58fcc87175574" translate="yes" xml:space="preserve">
          <source>It re-exports the &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">它重新导出 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="293d2ed2212503b7e45e9caa6fdd2a81620b6623" translate="yes" xml:space="preserve">
          <source>It renders properly.</source>
          <target state="translated">它的渲染是正确的。</target>
        </trans-unit>
        <trans-unit id="0ae169fa3e47383715acb011e05d54b05113d563" translate="yes" xml:space="preserve">
          <source>It requires less boilerplate code.</source>
          <target state="translated">它需要更少的模板代码。</target>
        </trans-unit>
        <trans-unit id="bef3630aa143887d2a90b2232f4fa65407f77fcf" translate="yes" xml:space="preserve">
          <source>It returns an &lt;code&gt;Observable&lt;/code&gt; that &lt;em&gt;resolves&lt;/em&gt; when the user eventually decides what to do: either to discard changes and navigate away (&lt;code&gt;true&lt;/code&gt;) or to preserve the pending changes and stay in the crisis editor (&lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">它返回一个 &lt;code&gt;Observable&lt;/code&gt; ，当用户最终决定要做什么时，该Observable进行&lt;em&gt;解析&lt;/em&gt;：放弃更改并导航（ &lt;code&gt;true&lt;/code&gt; ）或保留待处理的更改并保留在危机编辑器中（ &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f17b788f117ba6e453d05b278cd784e7b06521e5" translate="yes" xml:space="preserve">
          <source>It returns service responses in their original request order, even if the server returns them out of order.</source>
          <target state="translated">它按原请求顺序返回服务响应,即使服务器返回的顺序不对。</target>
        </trans-unit>
        <trans-unit id="e8347f69be7f37a1644f92b33a93b2dee7c617e2" translate="yes" xml:space="preserve">
          <source>It should look something like this, depending on where you run it:</source>
          <target state="translated">它应该看起来像这样,取决于你在哪里运行它。</target>
        </trans-unit>
        <trans-unit id="fde1c30a4ed9c7ecc8b3522111845cd4f468613d" translate="yes" xml:space="preserve">
          <source>It takes a bit more work to get the child view into the parent component &lt;em&gt;class&lt;/em&gt;.</source>
          <target state="translated">要使子视图进入父组件&lt;em&gt;类&lt;/em&gt;需要花费更多的工作。</target>
        </trans-unit>
        <trans-unit id="2f20885a1acc0aea1959ff23c8f48814d62d5065" translate="yes" xml:space="preserve">
          <source>It takes a function argument that returns an &lt;code&gt;Observable&lt;/code&gt;. &lt;code&gt;PackageSearchService.search&lt;/code&gt; returns an &lt;code&gt;Observable&lt;/code&gt;, as other data service methods do.</source>
          <target state="translated">它需要一个函数参数，该参数返回一个 &lt;code&gt;Observable&lt;/code&gt; 。 &lt;code&gt;PackageSearchService.search&lt;/code&gt; 返回 &lt;code&gt;Observable&lt;/code&gt; ，就像其他数据服务方法一样。</target>
        </trans-unit>
        <trans-unit id="674f64671b4a8d0cb23d0caf55d87a3f7dde911d" translate="yes" xml:space="preserve">
          <source>It takes two arguments: the component type to override (&lt;code&gt;HeroDetailComponent&lt;/code&gt;) and an override metadata object. The &lt;a href=&quot;testing#metadata-override-object&quot;&gt;override metadata object&lt;/a&gt; is a generic defined as follows:</source>
          <target state="translated">它 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 两个参数：要覆盖的组件类型（HeroDetailComponent）和一个覆盖元数据对象。该&lt;a href=&quot;testing#metadata-override-object&quot;&gt;超控元数据对象&lt;/a&gt;是定义如下的一般：</target>
        </trans-unit>
        <trans-unit id="6b7ade15f2e40422ade0a9b4e8bd3a6ec4688da6" translate="yes" xml:space="preserve">
          <source>It takes two more parameters:</source>
          <target state="translated">它还需要两个参数。</target>
        </trans-unit>
        <trans-unit id="ca9ca3b7d869e7250ea3e82c4497b55685884167" translate="yes" xml:space="preserve">
          <source>It tells the injector to start its search for a &lt;code&gt;Parent&lt;/code&gt; dependency in a component &lt;em&gt;above&lt;/em&gt; itself, which &lt;em&gt;is&lt;/em&gt; what parent means.</source>
          <target state="translated">它告诉注入器在其自身&lt;em&gt;上方&lt;/em&gt;的组件中开始搜索 &lt;code&gt;Parent&lt;/code&gt; 依赖项，这&lt;em&gt;就是&lt;/em&gt;父项的含义。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87287c749aedf291db51189f1922d8e0ed42f2e2" translate="yes" xml:space="preserve">
          <source>It used to display the hero details on its own, before you cut that portion of the template. Now it will delegate to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">在剪切模板的那一部分之前，它曾经单独显示英雄详细信息。现在它将委托给 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26603cbdf502504b4bafbb3d1bd7c3f1f9536e25" translate="yes" xml:space="preserve">
          <source>It will be either an instance of &lt;code&gt;TestBedViewEngine&lt;/code&gt; or &lt;code&gt;TestBedRender3&lt;/code&gt;.</source>
          <target state="translated">这将是 &lt;code&gt;TestBedViewEngine&lt;/code&gt; 或 &lt;code&gt;TestBedRender3&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="b2aee283c41ff9b11753db47219f0539ccacca7d" translate="yes" xml:space="preserve">
          <source>It worked because the Angular CLI declared &lt;code&gt;HeroesComponent&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt; when it generated that component.</source>
          <target state="translated">之所以能够 &lt;code&gt;HeroesComponent&lt;/code&gt; ，是因为Angular CLI 在生成组件时在 &lt;code&gt;AppModule&lt;/code&gt; 中声明了HeroesComponent。</target>
        </trans-unit>
        <trans-unit id="a18d731dddd044fda8c0206e03d977e14385f507" translate="yes" xml:space="preserve">
          <source>It works perfectly with long property paths such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;?.b?.c?.d&lt;/code&gt;.</source>
          <target state="translated">它与诸如长属性路径完美的作品 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;?.b?.c?.d&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af0e2debe677c9c678729b2bc1cbfd09e3f7a0d9" translate="yes" xml:space="preserve">
          <source>It would be nice to have a button on the &lt;code&gt;HeroDetail&lt;/code&gt; view that can do that.</source>
          <target state="translated">在 &lt;code&gt;HeroDetail&lt;/code&gt; 视图上有一个可以做到这一点的按钮会很好。</target>
        </trans-unit>
        <trans-unit id="0051be8012a415185793f036c9c8e5128fc7e68d" translate="yes" xml:space="preserve">
          <source>It's a &lt;em&gt;one way&lt;/em&gt; data binding from the &lt;code&gt;selectedHero&lt;/code&gt; property of the &lt;code&gt;HeroesComponent&lt;/code&gt; to the &lt;code&gt;hero&lt;/code&gt; property of the target element, which maps to the &lt;code&gt;hero&lt;/code&gt; property of the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">这是一种从 &lt;code&gt;HeroesComponent&lt;/code&gt; 的 &lt;code&gt;selectedHero&lt;/code&gt; 属性到目标元素的 &lt;code&gt;hero&lt;/code&gt; 属性的数据绑定的&lt;em&gt;方式&lt;/em&gt;，后者映射到 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 的 &lt;code&gt;hero&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="60b2581c46072f14693ad4b2115581cbacdca79b" translate="yes" xml:space="preserve">
          <source>It's a bit tighter and smaller, with fewer import statements (not shown).</source>
          <target state="translated">它更紧凑、更小,导入语句更少(未显示)。</target>
        </trans-unit>
        <trans-unit id="69a8bddb93aeeda0022b562464f122f8b32da08f" translate="yes" xml:space="preserve">
          <source>It's a different story if you improperly import &lt;code&gt;GreetingModule&lt;/code&gt; into a lazy loaded module such as &lt;code&gt;CustomersModule&lt;/code&gt;.</source>
          <target state="translated">如果您不正确地将 &lt;code&gt;GreetingModule&lt;/code&gt; 导入到惰性加载的模块（例如 &lt;code&gt;CustomersModule&lt;/code&gt; )中,则情况有所不同。</target>
        </trans-unit>
        <trans-unit id="09434c75600174446486b9af36cce437fffe1ce2" translate="yes" xml:space="preserve">
          <source>It's a good idea to put unit test spec files in the same folder as the application source code files that they test:</source>
          <target state="translated">把单元测试规范文件和它们测试的应用程序源代码文件放在同一个文件夹里是个好主意。</target>
        </trans-unit>
        <trans-unit id="9bcfe973543c84bb66b75ce9b66043cdfd62ffa5" translate="yes" xml:space="preserve">
          <source>It's a little more involved if you are in an interpolation. If you have an interpolation of &lt;code&gt;{{data.---}}&lt;/code&gt; inside a &lt;code&gt;div&lt;/code&gt; and need the completion list after &lt;code&gt;data.---&lt;/code&gt;, the compiler can't use the HTML AST to find the answer. The HTML AST can only tell the compiler that there is some text with the characters &quot;&lt;code&gt;{{data.---}}&lt;/code&gt;&quot;. That's when the template parser produces an expression AST, which resides within the template AST. The Angular Language Services then looks at &lt;code&gt;data.---&lt;/code&gt; within its context, asks the TypeScript Language Service what the members of &lt;code&gt;data&lt;/code&gt; are, and returns the list of possibilities.</source>
          <target state="translated">如果您在插值中，则需要更多的投入。如果您在 &lt;code&gt;div&lt;/code&gt; 内插入 &lt;code&gt;{{data.---}}&lt;/code&gt; 的插值，并且在 &lt;code&gt;data.---&lt;/code&gt; 之后需要补全列表.---，则编译器无法使用HTML AST查找答案。 HTML AST只能告诉编译器存在一些带有字符&amp;ldquo; &lt;code&gt;{{data.---}}&lt;/code&gt; &amp;rdquo;的文本。那时模板解析器会生成一个表达式AST，该表达式位于模板AST中。然后，Angular Language Services会查看 &lt;code&gt;data.---&lt;/code&gt; 在其上下文中，询问TypeScript Language Service &lt;code&gt;data&lt;/code&gt; 的成员是什么，并返回可能性列表。</target>
        </trans-unit>
        <trans-unit id="fcb0348ea77c1a0b6ee18a979c38ff18f522a08c" translate="yes" xml:space="preserve">
          <source>It's a simpler and more efficient alternative to removing all elements one by one:</source>
          <target state="translated">这是一个更简单、更高效的替代方案,可以逐一删除所有元素。</target>
        </trans-unit>
        <trans-unit id="6a71d528e9fd07b4df2b1b862b68940c3e7e83b3" translate="yes" xml:space="preserve">
          <source>It's also possible to specify that a service should be provided in a particular &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. For example, if you don't want &lt;code&gt;UserService&lt;/code&gt; to be available to applications unless they import a &lt;code&gt;UserModule&lt;/code&gt; you've created, you can specify that the service should be provided in the module:</source>
          <target state="translated">也可以指定应在特定的 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 提供服务。例如，如果您不希望 &lt;code&gt;UserService&lt;/code&gt; 对应用程序可用，除非它们导入您创建的 &lt;code&gt;UserModule&lt;/code&gt; ，则可以指定应在模块中提供该服务：</target>
        </trans-unit>
        <trans-unit id="9552d457536c1b64a297fca25a1283d35d3a935d" translate="yes" xml:space="preserve">
          <source>It's also possible to use &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; with Observables. The example below binds the &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;time&lt;/a&gt;&lt;/code&gt; Observable to the view. The Observable continuously updates the view with the current time.</source>
          <target state="translated">还可以将Observables与 &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 一起使用。下面的示例将Observable &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;time&lt;/a&gt;&lt;/code&gt; 绑定到视图。Observable会持续使用当前时间更新视图。</target>
        </trans-unit>
        <trans-unit id="321bd8fb08a8edefb40590d92c8b9e018f5c3cce" translate="yes" xml:space="preserve">
          <source>It's also recommended to export the &lt;code&gt;heroesServiceFactory&lt;/code&gt; function so that Ahead-of-Time compilation can pick it up.</source>
          <target state="translated">还建议导出 &lt;code&gt;heroesServiceFactory&lt;/code&gt; 函数，以便提前编译可以使用它。</target>
        </trans-unit>
        <trans-unit id="f699da3b1f9e220fa97ad28cd922a1330c2a3881" translate="yes" xml:space="preserve">
          <source>It's an anemic model with few requirements and no behavior. Perfect for the demo.</source>
          <target state="translated">这是一个贫乏的模型,没有什么要求和行为。非常适合做演示。</target>
        </trans-unit>
        <trans-unit id="f2f02356a25344321ea932ed9aa84284ad0b5391" translate="yes" xml:space="preserve">
          <source>It's better to pause and let the user decide what to do. If the user cancels, you'll stay put and allow more changes. If the user approves, the app can save.</source>
          <target state="translated">最好是暂停,让用户决定怎么做。如果用户取消,你就会原地不动,允许更多的修改。如果用户批准,应用就可以保存。</target>
        </trans-unit>
        <trans-unit id="9f78888bb37d208c4ff42770338b7ad54c0ab57e" translate="yes" xml:space="preserve">
          <source>It's better to use the &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;#navigate&lt;/code&gt; service to trigger route changes. Use &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; only if you need to interact with or create normalized URLs outside of routing.</source>
          <target state="translated">最好使用 &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;#navigate&lt;/code&gt; 服务来触发路由更改。仅当您需要在路由之外与之交互或创建标准化URL时，才使用&amp;ldquo; &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8b602ffbddc224ba7425e27dba721fa66a2d522" translate="yes" xml:space="preserve">
          <source>It's called an &lt;em&gt;input&lt;/em&gt; property because data flows from the binding expression &lt;em&gt;into&lt;/em&gt; the directive. Without that input metadata, Angular rejects the binding; see &lt;a href=&quot;attribute-directives#why-input&quot;&gt;below&lt;/a&gt; for more about that.</source>
          <target state="translated">之所以称为&lt;em&gt;输入&lt;/em&gt;属性，是因为数据从绑定表达式&lt;em&gt;流入&lt;/em&gt;指令。没有该输入元数据，Angular会拒绝绑定；有关更多信息，请参见&lt;a href=&quot;attribute-directives#why-input&quot;&gt;下文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a1c5b2c14f47a4acb6a4e31a66880f00d640c203" translate="yes" xml:space="preserve">
          <source>It's certainly a good idea to give the user some kind of feedback when data access fails. But displaying the raw error object returned by &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; is far from the best way to do it.</source>
          <target state="translated">在数据访问失败时向用户提供某种反馈肯定是个好主意。但是显示 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 返回的原始错误对象远非最佳方法。</target>
        </trans-unit>
        <trans-unit id="f716eb9a6b02b45e7ef6afb1e41d83af97f96b96" translate="yes" xml:space="preserve">
          <source>It's difficult to identify the &lt;em&gt;selected hero&lt;/em&gt; in the list when all &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements look alike.</source>
          <target state="translated">当所有 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素看起来相似时，很难在列表中标识出&lt;em&gt;选定的英雄&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f18821981bfd33d573d82ec783fb8b3c0ddffd55" translate="yes" xml:space="preserve">
          <source>It's easier to get to the input box with the template reference variable than to go through the &lt;code&gt;$event&lt;/code&gt; object. Here's a rewrite of the previous &lt;code&gt;keyup&lt;/code&gt; example that uses a template reference variable to get the user's input.</source>
          <target state="translated">与模板引用变量相比，使用 &lt;code&gt;$event&lt;/code&gt; 对象更容易进入输入框。这是对以前的 &lt;code&gt;keyup&lt;/code&gt; 示例的重写，该示例使用模板引用变量来获取用户的输入。</target>
        </trans-unit>
        <trans-unit id="13c09e93ba14e7c6aec0f030ed4749ec45cde327" translate="yes" xml:space="preserve">
          <source>It's faster to run without the debugger by pressing &lt;code&gt;Ctrl-F5&lt;/code&gt;.</source>
          <target state="translated">通过按 &lt;code&gt;Ctrl-F5&lt;/code&gt; 可以在没有调试器的情况下更快地运行。</target>
        </trans-unit>
        <trans-unit id="c0a37d50ae18f2cda48cc6b441cf45b1f4e85db3" translate="yes" xml:space="preserve">
          <source>It's harder to target an element that is entering a view because it isn't in the DOM yet. So, use the aliases &lt;code&gt;:enter&lt;/code&gt; and &lt;code&gt;:leave&lt;/code&gt; to target HTML elements that are inserted or removed from a view.</source>
          <target state="translated">定位进入视图的元素比较困难，因为它尚未在DOM中。因此，使用别名 &lt;code&gt;:enter&lt;/code&gt; 和 &lt;code&gt;:leave&lt;/code&gt; 来定位从视图中插入或删除的HTML元素。</target>
        </trans-unit>
        <trans-unit id="9ce2298b180c8607f70e58c08e6ccdb870ec4f0c" translate="yes" xml:space="preserve">
          <source>It's identical to &lt;em&gt;Carol&lt;/em&gt;'s constructor except for the additional &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">除了附加的 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;装饰器之外，它与&lt;em&gt;Carol&lt;/em&gt;的构造器相同。</target>
        </trans-unit>
        <trans-unit id="eae527c8fde7a93b29c9ba68e0c762ac9e719b0c" translate="yes" xml:space="preserve">
          <source>It's important to note that this guarantee is &lt;strong&gt;stronger&lt;/strong&gt; than that provided by the normal web deployment model. Without a service worker, there is no guarantee that code lazily loaded later in a running app is from the same version as the initial code for the app.</source>
          <target state="translated">重要的是要注意，此保证比常规Web部署模型提供的保证&lt;strong&gt;要强&lt;/strong&gt;。如果没有服务人员，则无法保证稍后在运行中的应用程序中延迟加载的代码与该应用程序的初始代码版本相同。</target>
        </trans-unit>
        <trans-unit id="9db5b0bbcab65b4cd73852c1ab0915c241d74fda" translate="yes" xml:space="preserve">
          <source>It's important to note that you cannot register this worker directly, as old clients with cached state may not see a new &lt;code&gt;index.html&lt;/code&gt; which installs the different worker script. Instead, you must serve the contents of &lt;code&gt;safety-worker.js&lt;/code&gt; at the URL of the Service Worker script you are trying to unregister, and must continue to do so until you are certain all users have successfully unregistered the old worker. For most sites, this means that you should serve the safety worker at the old Service Worker URL forever.</source>
          <target state="translated">重要的是要注意，您不能直接注册此工作程序，因为处于缓存状态的旧客户端可能看不到安装了不同工作程序脚本的新 &lt;code&gt;index.html&lt;/code&gt; 。相反，您必须在尝试注销的Service Worker脚本的URL上提供 &lt;code&gt;safety-worker.js&lt;/code&gt; 的内容，并且必须继续这样做，直到确定所有用户都已成功注销了旧Worker。对于大多数站点，这意味着您应该永远使用旧的Service Worker URL为安全工作者提供服务。</target>
        </trans-unit>
        <trans-unit id="e74e1f2339eafee8c333b7f5cf205b600c69bb1c" translate="yes" xml:space="preserve">
          <source>It's nice to tidy up and you'll be grateful to yourself later. Here's the class after pruning away the dead code.</source>
          <target state="translated">整理好了,以后你会感激自己的。这是修剪掉死代码后的类。</target>
        </trans-unit>
        <trans-unit id="a88c6800d206ae0cb17eaddfbc40c121f4954f34" translate="yes" xml:space="preserve">
          <source>It's not as simple as intercepting a request to the root address &lt;code&gt;/&lt;/code&gt;. The browser could ask for one of the application routes such as &lt;code&gt;/dashboard&lt;/code&gt;, &lt;code&gt;/heroes&lt;/code&gt;, or &lt;code&gt;/detail:12&lt;/code&gt;. In fact, if the app were only rendered by the server, &lt;em&gt;every&lt;/em&gt; app link clicked would arrive at the server as a navigation URL intended for the router.</source>
          <target state="translated">它不像拦截对根地址 &lt;code&gt;/&lt;/code&gt; 的请求那样简单。浏览器可能会要求应用程序路由之一，例如 &lt;code&gt;/dashboard&lt;/code&gt; ， &lt;code&gt;/heroes&lt;/code&gt; 或 &lt;code&gt;/detail:12&lt;/code&gt; 。实际上，如果该应用程序仅由服务器呈现，则单击的&lt;em&gt;每个&lt;/em&gt;应用程序链接都将作为用于路由器的导航URL到达服务器。</target>
        </trans-unit>
        <trans-unit id="4480eae9954dacdb424800801156a46c1ca47a25" translate="yes" xml:space="preserve">
          <source>It's not much fun updating the template to test the custom pipe. Upgrade the example to a &quot;Power Boost Calculator&quot; that combines your pipe and two-way data binding with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">更新模板以测试自定义管道并不有趣。将示例升级到&amp;ldquo; Power Boost Calculator&amp;rdquo;，它将您的管道和双向数据绑定与 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 结合在一起。</target>
        </trans-unit>
        <trans-unit id="36d858deb7acc1b44aba6f193eae181e7610542d" translate="yes" xml:space="preserve">
          <source>It's not possible to stub the component's &lt;code&gt;HeroDetailService&lt;/code&gt; in the &lt;code&gt;providers&lt;/code&gt; of the &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt;. Those are providers for the &lt;em&gt;testing module&lt;/em&gt;, not the component. They prepare the dependency injector at the &lt;em&gt;fixture level&lt;/em&gt;.</source>
          <target state="translated">无法在 &lt;code&gt;HeroDetailService&lt;/code&gt; 的 &lt;code&gt;providers&lt;/code&gt; 中存根组件的 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; 。这些是&lt;em&gt;测试模块的&lt;/em&gt;提供者，而不是组件。他们在&lt;em&gt;夹具级别&lt;/em&gt;准备依赖注入器。</target>
        </trans-unit>
        <trans-unit id="7933cc3e6088270dbdd94b164b5a3e681402b77e" translate="yes" xml:space="preserve">
          <source>It's often better to create an appropriate folder for them in the &lt;code&gt;tests&lt;/code&gt; directory.</source>
          <target state="translated">通常最好在 &lt;code&gt;tests&lt;/code&gt; 目录中为它们创建一个适当的文件夹。</target>
        </trans-unit>
        <trans-unit id="69b70cec57aa9f3f0a7a6b85e143f4fb3199dd40" translate="yes" xml:space="preserve">
          <source>It's often easier and more clear to filter with a standard &lt;code&gt;HTMLElement&lt;/code&gt; method such as &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;querySelector()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;querySelectorAll()&lt;/a&gt;&lt;/code&gt;, as you'll see in the next set of tests.</source>
          <target state="translated">使用标准 &lt;code&gt;HTMLElement&lt;/code&gt; 方法（例如 &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;querySelector()&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;querySelectorAll()&lt;/a&gt;&lt;/code&gt; )进行过滤通常更容易，更清晰，这将在下一组测试中看到。</target>
        </trans-unit>
        <trans-unit id="de2e6fbff08a65946c5039baf520c82a6fb6449d" translate="yes" xml:space="preserve">
          <source>It's possible for &lt;code&gt;$locationChange&lt;/code&gt; events to happen, but for the browser URL (window.location) to remain unchanged. This &lt;code&gt;onChange&lt;/code&gt; callback will fire only when AngularJS actually updates the browser URL (window.location).</source>
          <target state="translated">这是可能的 &lt;code&gt;$locationChange&lt;/code&gt; 事件的发生，但对浏览器的URL（window.location的）保持不变。仅当AngularJS实际上更新浏览器URL（window.location）时，才会触发此 &lt;code&gt;onChange&lt;/code&gt; 回调。</target>
        </trans-unit>
        <trans-unit id="4d37c9df140e369670ed6bb296a85b5b6dfb223d" translate="yes" xml:space="preserve">
          <source>It's possible to ask the service worker to check if any updates have been deployed to the server. You might choose to do this if you have a site that changes frequently or want updates to happen on a schedule.</source>
          <target state="translated">可以要求服务人员检查是否有任何更新被部署到服务器上。如果你有一个经常变化的网站,或者希望更新按计划进行,你可以选择这样做。</target>
        </trans-unit>
        <trans-unit id="af32a95f4c2aebf2b62f7cd376de21ad5a8dffab" translate="yes" xml:space="preserve">
          <source>It's preferable to pre-fetch data from the server so it's ready the moment the route is activated. This also allows you to handle errors before routing to the component. There's no point in navigating to a crisis detail for an &lt;code&gt;id&lt;/code&gt; that doesn't have a record. It'd be better to send the user back to the &lt;code&gt;Crisis &lt;a href=&quot;../api/common/numbersymbol#List&quot;&gt;List&lt;/a&gt;&lt;/code&gt; that shows only valid crisis centers.</source>
          <target state="translated">最好从服务器中预取数据，以便在激活路由后就可以准备就绪。这还允许您在路由到组件之前处理错误。导航到没有记录的 &lt;code&gt;id&lt;/code&gt; 的危机详细信息没有任何意义。最好将用户送回仅显示有效危机中心的 &lt;code&gt;Crisis &lt;a href=&quot;../api/common/numbersymbol#List&quot;&gt;List&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75b5fea13d499ea02d483d5825f4588a4c55e4de" translate="yes" xml:space="preserve">
          <source>It's still an async test, calling &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;, because the component itself calls &lt;code&gt;setTimeout()&lt;/code&gt; when processing errors.</source>
          <target state="translated">它仍然是一个异步测试，调用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; ，因为组件在处理错误时本身会调用 &lt;code&gt;setTimeout()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11cce46b02b398c680b8cd2e4906b38f9b8086dd" translate="yes" xml:space="preserve">
          <source>It's the brackets (&lt;code&gt;[]&lt;/code&gt;) that make it an attribute selector. Angular locates each element in the template that has an attribute named &lt;code&gt;appHighlight&lt;/code&gt; and applies the logic of this directive to that element.</source>
          <target state="translated">括号（ &lt;code&gt;[]&lt;/code&gt; ）使其成为属性选择器。Angular定位模板中具有名为 &lt;code&gt;appHighlight&lt;/code&gt; 的属性的每个元素，并将此指令的逻辑应用于该元素。</target>
        </trans-unit>
        <trans-unit id="d0e169e22ebee633303a5cfbc4f3efc6239042d4" translate="yes" xml:space="preserve">
          <source>It's time to add real features to the app's current placeholder crisis center.</source>
          <target state="translated">是时候给应用目前的占位式危机中心增加真正的功能了。</target>
        </trans-unit>
        <trans-unit id="93572108533b695852669c26df4d5072f1d7409a" translate="yes" xml:space="preserve">
          <source>It's used throughout the application, perhaps most simply in the &lt;code&gt;AboutComponent&lt;/code&gt;:</source>
          <target state="translated">它在整个应用程序中使用，也许最简单地在 &lt;code&gt;AboutComponent&lt;/code&gt; 中使用：</target>
        </trans-unit>
        <trans-unit id="90d2c8844c1e3e393da4af416666932eaeab7062" translate="yes" xml:space="preserve">
          <source>IterableChangeRecord</source>
          <target state="translated">IterableChangeRecord</target>
        </trans-unit>
        <trans-unit id="65bf71a2aefacfda4d7b23bc058c87dadebdf19f" translate="yes" xml:space="preserve">
          <source>IterableChanges</source>
          <target state="translated">IterableChanges</target>
        </trans-unit>
        <trans-unit id="c04313d783fe0e607c4d190cf131f3656b1d8927" translate="yes" xml:space="preserve">
          <source>IterableDiffer</source>
          <target state="translated">IterableDiffer</target>
        </trans-unit>
        <trans-unit id="c7213c9ad2d27ea342b15057ff78294c56b1b169" translate="yes" xml:space="preserve">
          <source>IterableDifferFactory</source>
          <target state="translated">IterableDifferFactory</target>
        </trans-unit>
        <trans-unit id="4364a912da1d06d537974eb8581e6a149ccdd75d" translate="yes" xml:space="preserve">
          <source>IterableDiffers</source>
          <target state="translated">IterableDiffers</target>
        </trans-unit>
        <trans-unit id="b4f02bf069d0c4048fa93e0b57dc8e1868b21afd" translate="yes" xml:space="preserve">
          <source>Iterate over a set of operations which when applied to the original &lt;code&gt;Iterable&lt;/code&gt; will produce the new &lt;code&gt;Iterable&lt;/code&gt;.</source>
          <target state="translated">迭代一组操作，这些操作应用于原始 &lt;code&gt;Iterable&lt;/code&gt; 时将产生新的 &lt;code&gt;Iterable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9ffa02faa4bce072280e6f955939fc074385b0c" translate="yes" xml:space="preserve">
          <source>Iterate over all added items.</source>
          <target state="translated">迭代所有添加的项目。</target>
        </trans-unit>
        <trans-unit id="7b02d8c737198c5290f7d076a7fb4c7d9d683e29" translate="yes" xml:space="preserve">
          <source>Iterate over all changes. &lt;code&gt;&lt;a href=&quot;iterablechangerecord&quot;&gt;IterableChangeRecord&lt;/a&gt;&lt;/code&gt; will contain information about changes to each item.</source>
          <target state="translated">遍历所有更改。 &lt;code&gt;&lt;a href=&quot;iterablechangerecord&quot;&gt;IterableChangeRecord&lt;/a&gt;&lt;/code&gt; 将包含有关每个项目更改的信息。</target>
        </trans-unit>
        <trans-unit id="beb98ba78ea6ecd3802b7151eadeefd5b1c99318" translate="yes" xml:space="preserve">
          <source>Iterate over all changes. &lt;code&gt;&lt;a href=&quot;keyvaluechangerecord&quot;&gt;KeyValueChangeRecord&lt;/a&gt;&lt;/code&gt; will contain information about changes to each item.</source>
          <target state="translated">遍历所有更改。 &lt;code&gt;&lt;a href=&quot;keyvaluechangerecord&quot;&gt;KeyValueChangeRecord&lt;/a&gt;&lt;/code&gt; 将包含有关每个项目更改的信息。</target>
        </trans-unit>
        <trans-unit id="29c0d96526568e9909421843c0f1afea4a690e7c" translate="yes" xml:space="preserve">
          <source>Iterate over all items which had their identity (as computed by the &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt;) changed.</source>
          <target state="translated">遍历所有具有更改过的标识（由 &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt; 计算）的项目。</target>
        </trans-unit>
        <trans-unit id="4e85b2b64bc908fceeecabec10e0065e19464566" translate="yes" xml:space="preserve">
          <source>Iterate over all keys for which values have changed.</source>
          <target state="translated">遍历所有值已经改变的键。</target>
        </trans-unit>
        <trans-unit id="fb1385171738b82cea0b7d429c1042f5e8978d31" translate="yes" xml:space="preserve">
          <source>Iterate over all moved items.</source>
          <target state="translated">迭代所有被移动的项目。</target>
        </trans-unit>
        <trans-unit id="cfb6e0e8a0c18815505bb8efd4f29e4d8ac463a0" translate="yes" xml:space="preserve">
          <source>Iterate over all removed items.</source>
          <target state="translated">迭代所有被移除的项目。</target>
        </trans-unit>
        <trans-unit id="d45779a25ee648454d24aa9fdd02da54d493be84" translate="yes" xml:space="preserve">
          <source>Iterate over changes in the order of original &lt;code&gt;Iterable&lt;/code&gt; showing where the original items have moved.</source>
          <target state="translated">以原始 &lt;code&gt;Iterable&lt;/code&gt; 的顺序迭代更改，以显示原始项目的移动位置。</target>
        </trans-unit>
        <trans-unit id="66bd7b588566a69a193c5a2f36874c0414c74a1d" translate="yes" xml:space="preserve">
          <source>Iterate over changes in the order of original Map showing where the original items have moved.</source>
          <target state="translated">迭代原地图顺序的变化,显示原项目的移动位置。</target>
        </trans-unit>
        <trans-unit id="ea79adbb1c7288e6d303027d9db472281313ff38" translate="yes" xml:space="preserve">
          <source>Iterating through the values in a stream</source>
          <target state="translated">迭代一个流中的值</target>
        </trans-unit>
        <trans-unit id="6406032da55c56d8885f6b288e705bcb402f7d72" translate="yes" xml:space="preserve">
          <source>Its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request/mode&quot;&gt;mode&lt;/a&gt; is &lt;code&gt;navigation&lt;/code&gt;.</source>
          <target state="translated">其&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request/mode&quot;&gt;模式&lt;/a&gt;是 &lt;code&gt;navigation&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b563b2914e52ad780cc6bdd2b9a6539c97c4b58" translate="yes" xml:space="preserve">
          <source>Its URL matches certain criteria (see below).</source>
          <target state="translated">其URL符合某些标准(见下文)。</target>
        </trans-unit>
        <trans-unit id="533daa94e88ce1081e6444153c285b64693f39ce" translate="yes" xml:space="preserve">
          <source>Ivy is the code name for Angular's &lt;a href=&quot;https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7&quot;&gt;next-generation compilation and rendering pipeline&lt;/a&gt;. Starting with Angular version 8, you can choose to opt in to start using a preview version of Ivy and help in its continuing development and tuning.</source>
          <target state="translated">Ivy是Angular的&lt;a href=&quot;https://blog.angular.io/a-plan-for-version-8-0-and-ivy-b3318dfc19f7&quot;&gt;下一代编译和渲染管道&lt;/a&gt;的代号。从Angular版本8开始，您可以选择加入以开始使用Ivy的预览版本，并帮助其继续开发和调整。</target>
        </trans-unit>
        <trans-unit id="97c35ca691769b08824133a20d0b01e844696c10" translate="yes" xml:space="preserve">
          <source>JIT compilation is the default (as opposed to AOT compilation) when you run Angular's &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; CLI commands, and is a good choice during development. JIT mode is strongly discouraged for production use because it results in large application payloads that hinder the bootstrap performance.</source>
          <target state="translated">当您运行Angular的 &lt;code&gt;ng build&lt;/code&gt; 和 &lt;code&gt;ng serve&lt;/code&gt; CLI命令时，JIT编译是默认的（而不是AOT编译），并且在开发期间是一个不错的选择。强烈不建议将JIT模式用于生产，因为它会导致大型应用程序有效负载，从而影响引导性能。</target>
        </trans-unit>
        <trans-unit id="100955a614a47a100a0c1d379a56348ad67eab92" translate="yes" xml:space="preserve">
          <source>JIT compilation is the default when you run the &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; (build only) or &lt;a href=&quot;cli/serve&quot;&gt;&lt;code&gt;ng serve&lt;/code&gt;&lt;/a&gt; (build and serve locally) CLI commands:</source>
          <target state="translated">当您运行&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;（仅&lt;a href=&quot;cli/serve&quot;&gt; &lt;code&gt;ng serve&lt;/code&gt; &lt;/a&gt;构建）或ng serve（在本地进行构建和提供）CLI命令时，JIT编译是默认设置：</target>
        </trans-unit>
        <trans-unit id="f39e4bdefdba26f9731fa104f4dc571370e960e1" translate="yes" xml:space="preserve">
          <source>JSON files</source>
          <target state="translated">JSON文件</target>
        </trans-unit>
        <trans-unit id="200ea8b30d97106e227dd426de9470d1b9e5f6dc" translate="yes" xml:space="preserve">
          <source>JSONP Example</source>
          <target state="translated">JSONP示例</target>
        </trans-unit>
        <trans-unit id="5126883581dd0d87d57ac5704c8df63b2bc61717" translate="yes" xml:space="preserve">
          <source>Jasmine &lt;em&gt;done()&lt;/em&gt;</source>
          <target state="translated">茉莉花&lt;em&gt;done（）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b8ef1b9cd0e4f4d6572da9bde4bff2706b7e3ca" translate="yes" xml:space="preserve">
          <source>Jasmine also provides a &lt;code&gt;clock&lt;/code&gt; feature to mock dates. Angular automatically runs tests that are run after &lt;code&gt;jasmine.clock().install()&lt;/code&gt; is called inside a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; method until &lt;code&gt;jasmine.clock().uninstall()&lt;/code&gt; is called. &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; is not needed and throws an error if nested.</source>
          <target state="translated">茉莉花还提供了一种 &lt;code&gt;clock&lt;/code&gt; 功能来模拟日期。 Angular自动运行在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）方法内调用 &lt;code&gt;jasmine.clock().install()&lt;/code&gt; 之后运行的测试，直到 &lt;code&gt;jasmine.clock().uninstall()&lt;/code&gt; 为止。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）不需要，如果嵌套则抛出错误。</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="e4e56910ea532a32775fa361c6e193dfb89d0f17" translate="yes" xml:space="preserve">
          <source>JavaScript Modules vs. NgModules</source>
          <target state="translated">JavaScript模块与NgModules的比较</target>
        </trans-unit>
        <trans-unit id="fdca30518a58215f071ba5c35508f58fe8c3fc88" translate="yes" xml:space="preserve">
          <source>JavaScript and Angular use modules to organize code, and though they organize it differently, Angular apps rely on both.</source>
          <target state="translated">JavaScript和Angular使用模块来组织代码,虽然它们的组织方式不同,但Angular应用都依赖于两者。</target>
        </trans-unit>
        <trans-unit id="e427373b78bde22bea74df011ec7e3ebee573414" translate="yes" xml:space="preserve">
          <source>JavaScript features new to ES2015, like arrow functions, &lt;code&gt;let&lt;/code&gt;s and &lt;code&gt;const&lt;/code&gt;s, default function parameters, and destructuring assignments can also be gradually added to make the code more expressive.</source>
          <target state="translated">ES2015新增的JavaScript功能（例如箭头函数， &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; )，默认函数参数和解构分配也可以逐渐添加，以使代码更具表达力。</target>
        </trans-unit>
        <trans-unit id="813155b28b8ee2bbf4f6efd8be0aff1a8379446a" translate="yes" xml:space="preserve">
          <source>JavaScript modules</source>
          <target state="translated">JavaScript模块</target>
        </trans-unit>
        <trans-unit id="80315fb1334c813a6b687f8cf6aba6867ead2d1b" translate="yes" xml:space="preserve">
          <source>JavaScript modules help you namespace, preventing accidental global variables.</source>
          <target state="translated">JavaScript模块帮助你命名空间,防止意外的全局变量。</target>
        </trans-unit>
        <trans-unit id="7466df73c7a75f7fab07289c7c1fb62ec498abba" translate="yes" xml:space="preserve">
          <source>JitCompilerFactory</source>
          <target state="translated">JitCompilerFactory</target>
        </trans-unit>
        <trans-unit id="a22aee298933fd3299920aebce3877a6554d67bf" translate="yes" xml:space="preserve">
          <source>Join our community</source>
          <target state="translated">加入我们的社区</target>
        </trans-unit>
        <trans-unit id="87e6a6731c3d14a812bc4b63bb7fde49224e7eb9" translate="yes" xml:space="preserve">
          <source>Joins two parts of a URL with a slash if needed.</source>
          <target state="translated">根据需要,用斜线连接URL的两个部分。</target>
        </trans-unit>
        <trans-unit id="5476e9b9f4a192c11d46458bd1af59f8fb187f48" translate="yes" xml:space="preserve">
          <source>JsonPipe</source>
          <target state="translated">JsonPipe</target>
        </trans-unit>
        <trans-unit id="f9734727c3307bfa948623de46c33ca6cfb42687" translate="yes" xml:space="preserve">
          <source>JsonpClientBackend</source>
          <target state="translated">JsonpClientBackend</target>
        </trans-unit>
        <trans-unit id="6dc692df4f14103795aed4e22a3eac866f471215" translate="yes" xml:space="preserve">
          <source>JsonpInterceptor</source>
          <target state="translated">JsonpInterceptor</target>
        </trans-unit>
        <trans-unit id="86ade25665aab98adbdecbd2678a114f46ce9f95" translate="yes" xml:space="preserve">
          <source>Just as a form control instance gives you control over a single input field, a form group instance tracks the form state of a group of form control instances (for example, a form). Each control in a form group instance is tracked by name when creating the form group. The following example shows how to manage multiple form control instances in a single group.</source>
          <target state="translated">正如表单控件实例为您提供对单个输入字段的控制一样,表单组实例也会跟踪一组表单控件实例(例如,一个表单)的表单状态。在创建表单组时,表单组实例中的每个控件都会通过名称进行跟踪。下面的示例展示了如何管理一个组中的多个表单控件实例。</target>
        </trans-unit>
        <trans-unit id="7ba5c7cfe37fd57ce918bf417c82139cfd6e4c6d" translate="yes" xml:space="preserve">
          <source>Just as for components, the metadata for a directive associates the decorated class with a &lt;code&gt;selector&lt;/code&gt; element that you use to insert it into HTML. In templates, directives typically appear within an element tag as attributes, either by name or as the target of an assignment or a binding.</source>
          <target state="translated">与组件一样，指令的元数据将修饰的类与用于将其插入HTML 的 &lt;code&gt;selector&lt;/code&gt; 元素相关联。在模板中，伪指令通常以属性的形式出现在元素标签中，可以按名称显示，也可以作为分配或绑定的目标。</target>
        </trans-unit>
        <trans-unit id="952028f0e1b2702fd956f9f61aab0587b89f85ff" translate="yes" xml:space="preserve">
          <source>Just as in the &lt;code&gt;FlowerService&lt;/code&gt; example, if you add &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; to the constructor for the &lt;code&gt;AnimalService&lt;/code&gt;, the injector won't look in the current &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s &lt;code&gt;ElementInjector&lt;/code&gt; for the &lt;code&gt;AnimalService&lt;/code&gt;.</source>
          <target state="translated">就像在 &lt;code&gt;FlowerService&lt;/code&gt; 示例中一样，如果将 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 添加到AnimalService的构造函数中，则注入器将不会在 &lt;code&gt;AnimalService&lt;/code&gt; 的当前 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 的 &lt;code&gt;ElementInjector&lt;/code&gt; 中 &lt;code&gt;AnimalService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50a3565cd343f55461efc882d3f1056f8f2843ef" translate="yes" xml:space="preserve">
          <source>Just as with the &lt;code&gt;FlowerService&lt;/code&gt; example, the &lt;code&gt;AnimalService&lt;/code&gt; is provided in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. This means that since the injector first looks in the &lt;code&gt;ElementInjector&lt;/code&gt; of the component, it finds the &lt;code&gt;AnimalService&lt;/code&gt; value of 🐶 (puppy). It doesn't need to continue searching the &lt;code&gt;ElementInjector&lt;/code&gt; tree, nor does it need to search the &lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">就像 &lt;code&gt;FlowerService&lt;/code&gt; 示例一样， &lt;code&gt;AnimalService&lt;/code&gt; 是在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 装饰器中提供的。这意味着，由于注入器首先在组件的 &lt;code&gt;ElementInjector&lt;/code&gt; 中查找，因此它将找到 &lt;code&gt;AnimalService&lt;/code&gt; 值🐶（puppy）。它不需要继续搜索 &lt;code&gt;ElementInjector&lt;/code&gt; 树，也不需要搜索 &lt;code&gt;ModuleInjector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bcbe13374c0b6e5160a92304e2958769789d6903" translate="yes" xml:space="preserve">
          <source>Just as you can project AngularJS content into Angular components, you can &lt;em&gt;transclude&lt;/em&gt; Angular content into AngularJS components, whenever you are using upgraded versions from them.</source>
          <target state="translated">正如可以将AngularJS内容投影到Angular 组件中一样，只要您使用AngularJS组件的升级版本，就可以将它们&lt;em&gt;包含&lt;/em&gt;在AngularJS组件中。</target>
        </trans-unit>
        <trans-unit id="1d3b5872a8da8780f730b9a6d692e8ef62ba276b" translate="yes" xml:space="preserve">
          <source>Just like Web and the entire web ecosystem, Angular is continuously improving. Angular balances continuous improvement with a strong focus on stability and making updates easy. Keeping your Angular app up-to-date enables you to take advantage of leading-edge new features, as well as optimizations and bug fixes.</source>
          <target state="translated">就像Web和整个Web生态系统一样,Angular也在不断改进。Angular平衡了持续改进与对稳定性的强烈关注,并使更新变得简单。保持您的 Angular 应用程序的更新,使您能够利用领先的新功能,以及优化和错误修复。</target>
        </trans-unit>
        <trans-unit id="5ca2b5f86d531d00a29d9169b827a1109624e083" translate="yes" xml:space="preserve">
          <source>Just like synchronous validators have the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; interfaces, asynchronous validators have their own counterparts: &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidatorfn&quot;&gt;AsyncValidatorFn&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">就像同步验证器具有 &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; 接口一样，异步验证器也具有自己的对应器： &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidatorfn&quot;&gt;AsyncValidatorFn&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d673c861402fe0c15e579d517c4f053b2fcbfefe" translate="yes" xml:space="preserve">
          <source>Just like with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, you can use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on a property of the child component but its type should be &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">只是像 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ，您可以使用 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 的子组件的属性，但它的类型应该是 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="817700a4464e4e191b283e342f94c1991f779ce0" translate="yes" xml:space="preserve">
          <source>Just the Stackblitz</source>
          <target state="translated">只是堆栈闪电战</target>
        </trans-unit>
        <trans-unit id="a1f18edf65e1f35b5d98a957b4ea1ca6278d408c" translate="yes" xml:space="preserve">
          <source>Karma configuration should then be changed so that it uses the application root dir as the base directory, instead of &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">然后应更改业力配置，以便它使用应用程序根目录作为基本目录，而不是 &lt;code&gt;app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42600b11fefe8ad521ad30fad8660704a0b4ffbf" translate="yes" xml:space="preserve">
          <source>Karma reporters to use. Directly passed to the karma runner.</source>
          <target state="translated">业报人使用。直接传给业障运行者。</target>
        </trans-unit>
        <trans-unit id="b4460e678bcf89af04481e0ca8656d0cee5a316f" translate="yes" xml:space="preserve">
          <source>Keep constructors simple</source>
          <target state="translated">保持构造函数简单</target>
        </trans-unit>
        <trans-unit id="8850b59a0703a38117329723734c5d92e2073bb3" translate="yes" xml:space="preserve">
          <source>Keep current by following the &lt;a href=&quot;https://blog.angular.io/&quot;&gt;Angular blog&lt;/a&gt;.</source>
          <target state="translated">通过关注&lt;a href=&quot;https://blog.angular.io/&quot;&gt;Angular博客来&lt;/a&gt;保持最新。</target>
        </trans-unit>
        <trans-unit id="5de9b63aa5c026111c38b95e17436330040893dc" translate="yes" xml:space="preserve">
          <source>Keep this process running in the background, watching and recompiling as you make changes.</source>
          <target state="translated">让这个进程在后台运行,在你进行修改时观察并重新编译。</target>
        </trans-unit>
        <trans-unit id="75b190e26551d30888434ef5e10c264fd2094702" translate="yes" xml:space="preserve">
          <source>Keeping all features in one component as the application grows will not be maintainable. You'll want to split up large components into smaller sub-components, each focused on a specific task or workflow.</source>
          <target state="translated">随着应用程序的增长,将所有功能都保留在一个组件中是无法维护的。你会希望将大型组件分割成更小的子组件,每个子组件都专注于一个特定的任务或工作流。</target>
        </trans-unit>
        <trans-unit id="3950ebebea0b9fa7aab3b677f39dbcffdc5260a0" translate="yes" xml:space="preserve">
          <source>Keeping your Angular Projects Up-to-Date</source>
          <target state="translated">让你的Angular项目保持最新状态</target>
        </trans-unit>
        <trans-unit id="0e98238c1a123f2c93163aa116c02a7491e9b3d0" translate="yes" xml:space="preserve">
          <source>Key differences</source>
          <target state="translated">主要区别</target>
        </trans-unit>
        <trans-unit id="d24f1a6439a067297b07682b27dca0466177ddc2" translate="yes" xml:space="preserve">
          <source>Key event filtering (with &lt;code&gt;key.enter&lt;/code&gt;)</source>
          <target state="translated">按键事件过滤（使用 &lt;code&gt;key.enter&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e6a63d973ce4fce07ea7910869aeaa58dcc486e5" translate="yes" xml:space="preserve">
          <source>Key takeaways:</source>
          <target state="translated">主要收获:</target>
        </trans-unit>
        <trans-unit id="bb3c05a548b50d8ab473aa91a3bc6c081c4b5c99" translate="yes" xml:space="preserve">
          <source>KeyValue</source>
          <target state="translated">KeyValue</target>
        </trans-unit>
        <trans-unit id="9b3401cf8def25530e9fd1c26637d0047a8726c9" translate="yes" xml:space="preserve">
          <source>KeyValueChangeRecord</source>
          <target state="translated">KeyValueChangeRecord</target>
        </trans-unit>
        <trans-unit id="73aa019b64cd0c76d411a1451198da70801d52c4" translate="yes" xml:space="preserve">
          <source>KeyValueChanges</source>
          <target state="translated">KeyValueChanges</target>
        </trans-unit>
        <trans-unit id="c9f3815ecee4aa3527346e46c9976e1e8f5842c1" translate="yes" xml:space="preserve">
          <source>KeyValueDiffer</source>
          <target state="translated">KeyValueDiffer</target>
        </trans-unit>
        <trans-unit id="b74cac1bdb5561f5eaed8f9096562dbc1cbfcbb5" translate="yes" xml:space="preserve">
          <source>KeyValueDifferFactory</source>
          <target state="translated">KeyValueDifferFactory</target>
        </trans-unit>
        <trans-unit id="c6bbedfd75cd733b25c3584df7236c67ccd8bcba" translate="yes" xml:space="preserve">
          <source>KeyValueDiffers</source>
          <target state="translated">KeyValueDiffers</target>
        </trans-unit>
        <trans-unit id="9ba558627c56c78559234ffc0ae09f6dc16dea1a" translate="yes" xml:space="preserve">
          <source>KeyValuePipe</source>
          <target state="translated">KeyValuePipe</target>
        </trans-unit>
        <trans-unit id="987e5e1f455e03766d3ef3740947f4db46336d53" translate="yes" xml:space="preserve">
          <source>Keyframes</source>
          <target state="translated">Keyframes</target>
        </trans-unit>
        <trans-unit id="6eb2cb65b6b265087cc2d5112489a6c3d6948a43" translate="yes" xml:space="preserve">
          <source>Keyframes include an &lt;em&gt;offset&lt;/em&gt; that defines the point in the animation where each style change occurs. Offsets are relative measures from zero to one, marking the beginning and end of the animation, respectively and should be applied to each of the keyframe's steps if used at least once.</source>
          <target state="translated">关键帧包括一个&lt;em&gt;偏移量&lt;/em&gt;，该&lt;em&gt;偏移量&lt;/em&gt;定义了动画中每次样式更改发生的点。偏移量是从零到一的相对度量，分别标记了动画的开始和结束，如果至少使用一次，则应将其应用于关键帧的每个步骤。</target>
        </trans-unit>
        <trans-unit id="893056aa39e96a084b3d311ebde22e7acf05fc70" translate="yes" xml:space="preserve">
          <source>Keyframes summary</source>
          <target state="translated">关键帧摘要</target>
        </trans-unit>
        <trans-unit id="d6a03b41f716acfc6fd0ac6d70d7b37c373ace99" translate="yes" xml:space="preserve">
          <source>Keyframes with a pulsation</source>
          <target state="translated">带脉动的关键帧</target>
        </trans-unit>
        <trans-unit id="258044e7b813d16f725b367c95a2d8e459f094fc" translate="yes" xml:space="preserve">
          <source>Keys have:</source>
          <target state="translated">钥匙有。</target>
        </trans-unit>
        <trans-unit id="284add57ddefeac62dc890be8a4e8973296321db" translate="yes" xml:space="preserve">
          <source>Kicks off the animation and serves as a container for all other animation function calls. HTML template binds to &lt;code&gt;&lt;a href=&quot;../api/animations/animationevent#triggerName&quot;&gt;triggerName&lt;/a&gt;&lt;/code&gt;. Use the first argument to declare a unique trigger name. Uses array syntax.</source>
          <target state="translated">开始动画，并用作所有其他动画功能调用的容器。HTML模板绑定到 &lt;code&gt;&lt;a href=&quot;../api/animations/animationevent#triggerName&quot;&gt;triggerName&lt;/a&gt;&lt;/code&gt; 。使用第一个参数声明唯一的触发器名称。使用数组语法。</target>
        </trans-unit>
        <trans-unit id="b9a401030ae31427bf36aafaa6d13ce01e5c38e0" translate="yes" xml:space="preserve">
          <source>Kidding aside, pay attention to two key points:</source>
          <target state="translated">开玩笑,要注意两个关键点。</target>
        </trans-unit>
        <trans-unit id="e4b6a725b52a13d1cccf14a76ba4d885abd9d4b0" translate="yes" xml:space="preserve">
          <source>Knowing that it is an &lt;code&gt;HTMLElement&lt;/code&gt; of some sort, you can use the standard HTML &lt;code&gt;querySelector&lt;/code&gt; to dive deeper into the element tree.</source>
          <target state="translated">知道它是某种 &lt;code&gt;HTMLElement&lt;/code&gt; ，就可以使用标准的HTML &lt;code&gt;querySelector&lt;/code&gt; 来更深入地研究元素树。</target>
        </trans-unit>
        <trans-unit id="c4b1aea668c6b62ca0106cddefaf0fd61af5def7" translate="yes" xml:space="preserve">
          <source>Knowledge of this structure can inform how you provide and inject your services, and give you complete control of service visibility.</source>
          <target state="translated">对这一结构的了解可以为您提供和注入服务的方式提供信息,并让您完全控制服务的可见性。</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="855b4c3da111de1cc3bf0426bb3c3d9b0c13d293" translate="yes" xml:space="preserve">
          <source>L (S)</source>
          <target state="translated">L(S)</target>
        </trans-unit>
        <trans-unit id="ad97b692157548122b2491efcefede18a971027f" translate="yes" xml:space="preserve">
          <source>LIBRARY SOURCE FILES</source>
          <target state="translated">图书馆源文件</target>
        </trans-unit>
        <trans-unit id="1460dc33fdc66db88bdcc5b32057457efeed3ce5" translate="yes" xml:space="preserve">
          <source>LL</source>
          <target state="translated">LL</target>
        </trans-unit>
        <trans-unit id="ae6269698bf58fd847def39ce4ac2fae66e5387f" translate="yes" xml:space="preserve">
          <source>LLL</source>
          <target state="translated">LLL</target>
        </trans-unit>
        <trans-unit id="366642afad85161718d3199bbb3eeec4323b4561" translate="yes" xml:space="preserve">
          <source>LLLL</source>
          <target state="translated">LLLL</target>
        </trans-unit>
        <trans-unit id="2f63457c6d31c1457c936d330e5d022b720e7ea8" translate="yes" xml:space="preserve">
          <source>LLLLL</source>
          <target state="translated">LLLLL</target>
        </trans-unit>
        <trans-unit id="46dbfd3ddbab363ec3229828156cfc7cbbf79e53" translate="yes" xml:space="preserve">
          <source>LOCALE_ID</source>
          <target state="translated">LOCALE_ID</target>
        </trans-unit>
        <trans-unit id="5054e68056df235551347e024191933731ac90af" translate="yes" xml:space="preserve">
          <source>LOCATION_INITIALIZED</source>
          <target state="translated">LOCATION_INITIALIZED</target>
        </trans-unit>
        <trans-unit id="b5e0fa918e23be61311591d33895ec581f8ea479" translate="yes" xml:space="preserve">
          <source>LOCATION_UPGRADE_CONFIGURATION</source>
          <target state="translated">LOCATION_UPGRADE_CONFIGURATION</target>
        </trans-unit>
        <trans-unit id="80fea83804bf0e1f73c7272f7a19c26bc52d63ef" translate="yes" xml:space="preserve">
          <source>LTS</source>
          <target state="translated">LTS</target>
        </trans-unit>
        <trans-unit id="c3cddb869a298772e4140a9d210d3c1e037f73e9" translate="yes" xml:space="preserve">
          <source>LTS Ends</source>
          <target state="translated">LTS结束</target>
        </trans-unit>
        <trans-unit id="ddc05edf33a67ff62443367b7faa25ddb394059a" translate="yes" xml:space="preserve">
          <source>Language features outside of the compiler's &lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;restricted expression syntax&lt;/a&gt; can produce this error, as seen in the following example:</source>
          <target state="translated">如以下示例所示，编译器的&lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;受限表达式语法&lt;/a&gt;之外的语言功能会产生此错误：</target>
        </trans-unit>
        <trans-unit id="838123c690032c3d77f2cf978058b56afa0f2909" translate="yes" xml:space="preserve">
          <source>Language services include:</source>
          <target state="translated">语文服务包括:</target>
        </trans-unit>
        <trans-unit id="734fa40ff03686294aa0c60e9fa60f8ca7b15bcd" translate="yes" xml:space="preserve">
          <source>Large image files can be slow to load, harming the user experience. Always compress the image. Consider using an image compression web site such as &lt;a href=&quot;https://tinypng.com/&quot;&gt;tinypng&lt;/a&gt;.</source>
          <target state="translated">较大的图像文件加载速度可能很慢，从而损害了用户体验。始终压缩图像。考虑使用图像压缩网站，例如&lt;a href=&quot;https://tinypng.com/&quot;&gt;tinypng&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fdbfb45b871130cc5890d749d31a074e087dbb17" translate="yes" xml:space="preserve">
          <source>Last update check</source>
          <target state="translated">最后更新检查</target>
        </trans-unit>
        <trans-unit id="70a03b91dbc99c3f4c22b136089730dab49465a9" translate="yes" xml:space="preserve">
          <source>Lastly, call it within the &lt;code&gt;imports&lt;/code&gt; list of the &lt;code&gt;AppModule&lt;/code&gt;. In the following snippet, other parts of the file are left out. For the complete file, see the , or continue to the next section of this document.</source>
          <target state="translated">最后，在 &lt;code&gt;AppModule&lt;/code&gt; 的 &lt;code&gt;imports&lt;/code&gt; 列表中调用它。在以下代码段中，文件的其他部分被省略。有关完整的文件，请参阅，或继续进行本文档的下一部分。</target>
        </trans-unit>
        <trans-unit id="512803435153cdf149e51c2b7560f6d2d5123dc7" translate="yes" xml:space="preserve">
          <source>Later in this guide you will create &lt;a href=&quot;router#heroes-functionality&quot;&gt;multiple routing modules&lt;/a&gt; and discover that you must import those routing modules &lt;a href=&quot;router#routing-module-order&quot;&gt;in the correct order&lt;/a&gt;.</source>
          <target state="translated">在本指南的后面，您将创建&lt;a href=&quot;router#heroes-functionality&quot;&gt;多个路由模块，&lt;/a&gt;并发现您必须&lt;a href=&quot;router#routing-module-order&quot;&gt;以正确的顺序&lt;/a&gt;导入这些路由模块。</target>
        </trans-unit>
        <trans-unit id="1d334b9a4b3cf925264a3a1774fc490eb6e86a86" translate="yes" xml:space="preserve">
          <source>Later you'll call &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; with imports, providers, and more declarations to suit your testing needs. Optional &lt;code&gt;override&lt;/code&gt; methods can further fine-tune aspects of the configuration.</source>
          <target state="translated">稍后，您将使用导入，提供程序和更多声明来调用 &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; ，以满足您的测试需求。可选的 &lt;code&gt;override&lt;/code&gt; 方法可以进一步微调配置的各个方面。</target>
        </trans-unit>
        <trans-unit id="06d986c1b367afb8ba4fb3fbdad2551ff5cf409a" translate="yes" xml:space="preserve">
          <source>Later, in the &lt;a href=&quot;https://angular.io/start/start/forms&quot;&gt;Forms&lt;/a&gt; part of this tutorial, this cart service also will be accessed from the page where the user checks out.</source>
          <target state="translated">稍后，在本教程的&amp;ldquo; &lt;a href=&quot;https://angular.io/start/start/forms&quot;&gt;表单&amp;rdquo;&lt;/a&gt;部分中，也可以从用户签出的页面访问此购物车服务。</target>
        </trans-unit>
        <trans-unit id="754103d0963cb240496afc2220bcce0c35ff57b6" translate="yes" xml:space="preserve">
          <source>Later, in the &lt;code&gt;ngOnInit&lt;/code&gt; method, you use the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service to retrieve the parameters for the route, pull the hero &lt;code&gt;id&lt;/code&gt; from the parameters and retrieve the hero to display.</source>
          <target state="translated">稍后，在 &lt;code&gt;ngOnInit&lt;/code&gt; 方法中，您使用 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 服务检索路线的参数，从参数中提取英雄 &lt;code&gt;id&lt;/code&gt; 并检索要显示的英雄。</target>
        </trans-unit>
        <trans-unit id="e7547ca42bb362a9b11d36774bbdfcd704b4a366" translate="yes" xml:space="preserve">
          <source>Later, the tests will be able to easily check &lt;code&gt;selectedHero&lt;/code&gt; to verify that the &lt;code&gt;DashboardHeroComponent.selected&lt;/code&gt; event emitted the expected hero.</source>
          <target state="translated">稍后，测试将能够轻松地检查 &lt;code&gt;selectedHero&lt;/code&gt; 以验证 &lt;code&gt;DashboardHeroComponent.selected&lt;/code&gt; 事件是否发出了预期的英雄。</target>
        </trans-unit>
        <trans-unit id="21fda7ea70f96e74170c060719d7b5657f338386" translate="yes" xml:space="preserve">
          <source>Latest manifest hash</source>
          <target state="translated">最新舱单哈希值</target>
        </trans-unit>
        <trans-unit id="5e52348bd45eeec46b21e6ad2ead896b3cef0bb5" translate="yes" xml:space="preserve">
          <source>Launch the server by using the CLI command &lt;code&gt;ng serve&lt;/code&gt;, with the &lt;code&gt;--open&lt;/code&gt; option.</source>
          <target state="translated">使用CLI命令 &lt;code&gt;ng serve&lt;/code&gt; 和 &lt;code&gt;--open&lt;/code&gt; 选项启动服务器。</target>
        </trans-unit>
        <trans-unit id="ae7bffee7c5009ade8cdb896ee38347b7b498008" translate="yes" xml:space="preserve">
          <source>Lazily retrieves the reference value from a forwardRef.</source>
          <target state="translated">懒惰地从forwardRef中检索参考值。</target>
        </trans-unit>
        <trans-unit id="9d8fd079f87e6df7079e2cb3921cb7d7a59ad6f7" translate="yes" xml:space="preserve">
          <source>Lazy Loaded folders</source>
          <target state="translated">懒惰加载的文件夹</target>
        </trans-unit>
        <trans-unit id="53a754e3d992d869269c4cb92a2837bbd5a07aee" translate="yes" xml:space="preserve">
          <source>Lazy Loading</source>
          <target state="translated">懒惰加载</target>
        </trans-unit>
        <trans-unit id="b9db421e8fed8420ce1824b3ccff0707fa4d9adc" translate="yes" xml:space="preserve">
          <source>Lazy Loading AngularJS</source>
          <target state="translated">懒惰加载AngularJS</target>
        </trans-unit>
        <trans-unit id="e85192724b293a8f60c1280d0d24a8c45ab04f15" translate="yes" xml:space="preserve">
          <source>Lazy Loading Feature Modules</source>
          <target state="translated">懒加载功能模块</target>
        </trans-unit>
        <trans-unit id="0db7bee2dbf162d4bb73916ab3193a20850ec970" translate="yes" xml:space="preserve">
          <source>Lazy Loading route configuration</source>
          <target state="translated">懒加载路径配置</target>
        </trans-unit>
        <trans-unit id="961dcc883b258c2d939be82886386097e05d2115" translate="yes" xml:space="preserve">
          <source>Lazy load the &lt;em&gt;crisis center&lt;/em&gt;</source>
          <target state="translated">懒加载&lt;em&gt;危机中心&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8745c3d3f236ee4ba968248b7004084810969715" translate="yes" xml:space="preserve">
          <source>Lazy loading</source>
          <target state="translated">懒惰加载</target>
        </trans-unit>
        <trans-unit id="a70dd563d0cf22b10094a8634ce271d270a2f3d3" translate="yes" xml:space="preserve">
          <source>Lazy loading feature modules.</source>
          <target state="translated">懒加载功能模块。</target>
        </trans-unit>
        <trans-unit id="dafd78a2060910a592eef7719a94d1cb70951800" translate="yes" xml:space="preserve">
          <source>Lazy loading speeds up application load time by splitting the application into multiple bundles and loading them on demand. To use lazy loading, provide the &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property instead of the &lt;code&gt;children&lt;/code&gt; property.</source>
          <target state="translated">延迟加载通过将应用程序拆分为多个包并按需加载它们来加快应用程序加载时间。要使用延迟加载，请提供 &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 属性而不是 &lt;code&gt;children&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="628c7bafd341d3b8b82c1179cbcc0927f03d5efc" translate="yes" xml:space="preserve">
          <source>Lazy-loaded modules and their components can inject &lt;code&gt;AppModule&lt;/code&gt; services; they can't inject &lt;code&gt;AppComponent&lt;/code&gt; services.</source>
          <target state="translated">延迟加载的模块及其组件可以注入 &lt;code&gt;AppModule&lt;/code&gt; 服务。他们无法注入 &lt;code&gt;AppComponent&lt;/code&gt; 服务。</target>
        </trans-unit>
        <trans-unit id="957a78005dabe65160b5a15925b793d1fa82108f" translate="yes" xml:space="preserve">
          <source>Lazy-loaded services are scoped to the lazy module's injector. If a lazy-loaded module also provides the &lt;code&gt;UserService&lt;/code&gt;, any component created within that module's context (such as by router navigation) gets the local instance of the service, not the instance in the root application injector.</source>
          <target state="translated">延迟加载的服务仅限于延迟模块的注入器。如果延迟加载的模块还提供 &lt;code&gt;UserService&lt;/code&gt; ，则在该模块的上下文中创建的任何组件（例如通过路由器导航）都将获取服务的本地实例，而不是根应用程序注入器中的实例。</target>
        </trans-unit>
        <trans-unit id="3f620ff844008aa025233953d1ce142aa5cda2f1" translate="yes" xml:space="preserve">
          <source>Learn about &lt;code&gt;ngOnChanges()&lt;/code&gt; in the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; chapter.</source>
          <target state="translated">在&amp;ldquo; &lt;a href=&quot;lifecycle-hooks&quot;&gt;生命周期挂钩&amp;rdquo;&lt;/a&gt;一章中了解 &lt;code&gt;ngOnChanges()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14b272638be9bcb6a919ee9155d34a360ce378ea" translate="yes" xml:space="preserve">
          <source>Learn about marble testing</source>
          <target state="translated">了解大理石测试</target>
        </trans-unit>
        <trans-unit id="e7fdfe1b303da9330f863be0ed83883e1c50ecd2" translate="yes" xml:space="preserve">
          <source>Learn about providers and the bootstrap process in the &lt;a href=&quot;dependency-injection#bootstrap&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">在&amp;ldquo; &lt;a href=&quot;dependency-injection#bootstrap&quot;&gt;依赖项注入&amp;rdquo;指南中&lt;/a&gt;了解提供程序和引导过程。</target>
        </trans-unit>
        <trans-unit id="a66275f34e1f5a7519630477918b8d4723a6bbad" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI tokens and providers&lt;/a&gt;.</source>
          <target state="translated">了解有关&lt;a href=&quot;dependency-injection-providers&quot;&gt;DI令牌和提供程序的&lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="929d9c410b56408fb863a3b3762f37617edbdee9" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;dependency-injection-providers&quot;&gt;different kinds of providers&lt;/a&gt;.</source>
          <target state="translated">了解有关&lt;a href=&quot;dependency-injection-providers&quot;&gt;各种提供程序的&lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="64e85116af3881f2b807a4ac93b6ca6a118e4228" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;where to configure providers&lt;/a&gt;.</source>
          <target state="translated">了解有关&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;在何处配置提供程序的&lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="42696a9635d606ebe6044734ac2f34dd63e3b588" translate="yes" xml:space="preserve">
          <source>Learn more about Circle CI from &lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;Circle CI documentation&lt;/a&gt;.</source>
          <target state="translated">从&lt;a href=&quot;https://circleci.com/docs/2.0/&quot;&gt;Circle CI文档中&lt;/a&gt;了解有关Circle CI的更多信息。</target>
        </trans-unit>
        <trans-unit id="fbd3617cce085a5e8ca250fd33373a22ecbb1c83" translate="yes" xml:space="preserve">
          <source>Learn more about Travis CI testing from &lt;a href=&quot;https://docs.travis-ci.com/&quot;&gt;Travis CI documentation&lt;/a&gt;.</source>
          <target state="translated">从&lt;a href=&quot;https://docs.travis-ci.com/&quot;&gt;Travis CI文档中&lt;/a&gt;了解有关Travis CI测试的更多信息。</target>
        </trans-unit>
        <trans-unit id="ab522e0dc334f2f66198b9d67ad8d7c7cf8fade9" translate="yes" xml:space="preserve">
          <source>Learn more about decorators on the web.</source>
          <target state="translated">在网络上了解更多关于装饰设计师的信息。</target>
        </trans-unit>
        <trans-unit id="3d9f8497153e69f1f8ced844ece70962ae1dc467" translate="yes" xml:space="preserve">
          <source>Learn more about how Angular uses &lt;a href=&quot;npm-packages&quot;&gt;Npm Packages&lt;/a&gt;.</source>
          <target state="translated">了解有关Angular如何使用&lt;a href=&quot;npm-packages&quot;&gt;Npm软件包的&lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="5b69eeeb2b9edc6d0b9216f8daf3d46902457fb8" translate="yes" xml:space="preserve">
          <source>Learn more about how the &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;injector hierarchy&lt;/a&gt; works.</source>
          <target state="translated">了解有关&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;喷射器层次结构&lt;/a&gt;如何工作的更多信息。</target>
        </trans-unit>
        <trans-unit id="3ca3602b6be5394836ea6883fbc98df272116471" translate="yes" xml:space="preserve">
          <source>Learn more about nested injectors in &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;Hierarchical Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">在&amp;ldquo; &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;层次依赖注入&amp;rdquo;中&lt;/a&gt;了解有关嵌套注入器的更多信息。</target>
        </trans-unit>
        <trans-unit id="2491968c7982a380d0f03c94567638e978e99d66" translate="yes" xml:space="preserve">
          <source>Learn more about parameter decorators in &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;Hierarchical Dependency Injectors&lt;/a&gt;.</source>
          <target state="translated">了解有关&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;层次依赖注入&lt;/a&gt;器中的参数装饰器的更多信息。</target>
        </trans-unit>
        <trans-unit id="f0a54e4c772828f62d79c92c5650ee3ba4fd8547" translate="yes" xml:space="preserve">
          <source>Learn more about reactive and template-driven forms in the &lt;a href=&quot;forms-overview&quot;&gt;Introduction to forms in Angular&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;forms-overview&quot;&gt;在Angular表单简介中&lt;/a&gt;了解有关反应式和模板驱动表单的更多信息。</target>
        </trans-unit>
        <trans-unit id="70918ca856d1bb3ddb3a6cf983a40bf830f966f5" translate="yes" xml:space="preserve">
          <source>Learn more about the &lt;a href=&quot;dependency-injection-providers&quot;&gt;different kinds of providers&lt;/a&gt;.</source>
          <target state="translated">了解有关&lt;a href=&quot;dependency-injection-providers&quot;&gt;各种提供程序的&lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="096d0c679238ccb9dceaa845a2ed7a9859c6fc35" translate="yes" xml:space="preserve">
          <source>Learn more about the JavaScript module system on the web.</source>
          <target state="translated">在网络上了解更多关于JavaScript模块系统的信息。</target>
        </trans-unit>
        <trans-unit id="b5b77382c3ceee8b94fb94d422b9199a86328115" translate="yes" xml:space="preserve">
          <source>Learn more about the injector hierarchy in &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;Hierarchical Dependency Injectors&lt;/a&gt;.</source>
          <target state="translated">在&amp;ldquo; &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;层次依赖注入器&amp;rdquo;中&lt;/a&gt;了解有关注入器层次的更多信息。</target>
        </trans-unit>
        <trans-unit id="58a34f4059f910727e76619fb8f09151e30f4164" translate="yes" xml:space="preserve">
          <source>Learn more about zones in this &lt;a href=&quot;https://www.youtube.com/watch?v=3IqtmUscE_U&quot;&gt;Brian Ford video&lt;/a&gt;.</source>
          <target state="translated">在此&lt;a href=&quot;https://www.youtube.com/watch?v=3IqtmUscE_U&quot;&gt;Brian Ford视频中&lt;/a&gt;了解有关区域的更多信息。</target>
        </trans-unit>
        <trans-unit id="5a06dd36c4697393e8591b0aebf3314fd66a43a1" translate="yes" xml:space="preserve">
          <source>Learn more from the &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt; guide.</source>
          <target state="translated">从&lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;指南中了解更多信息。</target>
        </trans-unit>
        <trans-unit id="49ef03ab06d34819f0df49aacfb549f83abffb4f" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;attribute-directives&quot;&gt;属性指令中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="061e792bcfae6a72b414a42e4732a01bdfcc764a" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;bootstrapping&quot;&gt;Bootstrapping中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="a2595474c0bb630d7c9233d6e9cb83f4e1984c4e" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection in Angular&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection&quot;&gt;在Angular&lt;/a&gt;中的依赖注入中了解更多信息。</target>
        </trans-unit>
        <trans-unit id="d65e1d322ab658292d1ee386605706fe88f9423a" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;dependency-injection&quot;&gt;依赖注入中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="543454a1ea1ed89206ddafe40279ccb14fd61601" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;elements&quot;&gt;Angular Elements Overview&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;elements&quot;&gt;Angular Elements概述中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="d5562b1d6f1c92ab22ddd2839b427022bb5479b0" translate="yes" xml:space="preserve">
          <source>Learn more in &lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot;&gt;The App Shell Model&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot;&gt;App Shell模型中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="69e83458aeba90795b2ec92b95ac860501f7f762" translate="yes" xml:space="preserve">
          <source>Learn more in Victor Savkin's &lt;a href=&quot;http://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes&quot;&gt;post on redirects&lt;/a&gt;.</source>
          <target state="translated">在Victor Savkin的&lt;a href=&quot;http://vsavkin.tumblr.com/post/146722301646/angular-router-empty-paths-componentless-routes&quot;&gt;重定向文章中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="ee5bfdc51cf5efa838170544062b01249b630636" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;../../guide/dependency-injection&quot;&gt;&quot;Dependency Injection Guide&quot;&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;../../guide/dependency-injection&quot;&gt;&amp;ldquo;依赖项注入指南&amp;rdquo;中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="1ea4f3e368bdb8ee46d30b3c881b3f2fae673597" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;../../guide/dependency-injection-in-action#skip&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">在&amp;ldquo; &lt;a href=&quot;../../guide/dependency-injection-in-action#skip&quot;&gt;依赖项注入&amp;rdquo;指南中&lt;/a&gt;了解更多信息。</target>
        </trans-unit>
        <trans-unit id="8722cd7f2f8e80fc745d60c7437d08c266bd0da6" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; and &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt; guides.</source>
          <target state="translated">在&amp;ldquo; &lt;a href=&quot;attribute-directives&quot;&gt;属性指令&amp;rdquo;&lt;/a&gt;和&amp;ldquo; &lt;a href=&quot;structural-directives&quot;&gt;结构指令&amp;rdquo;&lt;/a&gt;指南中了解更多信息。</target>
        </trans-unit>
        <trans-unit id="f281d9bb8a624734a3f2318519573c93302200b0" translate="yes" xml:space="preserve">
          <source>Learn more in the &lt;a href=&quot;testing&quot;&gt;Testing&lt;/a&gt; guide.</source>
          <target state="translated">在&lt;a href=&quot;testing&quot;&gt;测试&lt;/a&gt;指南中了解更多信息。</target>
        </trans-unit>
        <trans-unit id="123406725caa64a10ae164244ffa8356f20fb2c7" translate="yes" xml:space="preserve">
          <source>Learn more: See &lt;a href=&quot;../guide/architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt; for more information about services.</source>
          <target state="translated">了解更多信息：有关&lt;a href=&quot;../guide/architecture-services&quot;&gt;服务&lt;/a&gt;的更多信息，请参见服务和依赖注入简介。</target>
        </trans-unit>
        <trans-unit id="1fcac7e737821f3c88ed512904352d47d44d6e8e" translate="yes" xml:space="preserve">
          <source>Learn more: See &lt;a href=&quot;../guide/router&quot;&gt;Routing &amp;amp; Navigation&lt;/a&gt; for more information about the Angular router.</source>
          <target state="translated">了解更多信息：有关Angular路由器的更多信息，请参见&amp;ldquo; &lt;a href=&quot;../guide/router&quot;&gt;路由和导航&lt;/a&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b9654aca29b333345621b40d474db8caace16011" translate="yes" xml:space="preserve">
          <source>Learn more: See the &lt;a href=&quot;../guide/http&quot;&gt;HttpClient guide&lt;/a&gt; for more information about Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">了解更多信息：有关Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的更多信息，请参见&lt;a href=&quot;../guide/http&quot;&gt;HttpClient指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb1ae2aa745d0c404aecbc5148457ae04537a735" translate="yes" xml:space="preserve">
          <source>Learning Angular</source>
          <target state="translated">学习Angular</target>
        </trans-unit>
        <trans-unit id="51a8db0b974271a01e08c116fc2ed02f73e9f5ca" translate="yes" xml:space="preserve">
          <source>Learning about new features</source>
          <target state="translated">学习新功能</target>
        </trans-unit>
        <trans-unit id="04a7f280698f2243487f6b62f727ea79038a1f1b" translate="yes" xml:space="preserve">
          <source>Legacy JavaScript libraries that are not imported into an app can be added to the runtime global scope and loaded as if they were in a script tag. Configure the CLI to do this at build time using the &quot;scripts&quot; and &quot;styles&quot; options of the build target in the &lt;a href=&quot;workspace-config&quot;&gt;CLI configuration file&lt;/a&gt;, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">可以将未导入到应用程序中的旧版JavaScript库添加到运行时全局范围，并像在script标记中一样加载它们。配置CLI使用&amp;ldquo;脚本&amp;rdquo;，而在构建目标的&amp;ldquo;样式&amp;rdquo;选项在编译的时候要做到这一点&lt;a href=&quot;workspace-config&quot;&gt;CLI配置文件&lt;/a&gt;， &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb7a7527cb3b41fff45bdf01cc4023654295db7c" translate="yes" xml:space="preserve">
          <source>Legacy values are deprecated since v4 and should not be used for new applications:</source>
          <target state="translated">自v4以来,遗留值已被废弃,不应用于新的应用程序。</target>
        </trans-unit>
        <trans-unit id="6c5bb53f486dae84d16877b1a814f7a9af911ad8" translate="yes" xml:space="preserve">
          <source>Length of the control array.</source>
          <target state="translated">控制阵列的长度。</target>
        </trans-unit>
        <trans-unit id="ddc8669a8abb9a8a2505c175a74ead6882464f81" translate="yes" xml:space="preserve">
          <source>Less explicit, created by directives</source>
          <target state="translated">不太明确,由指令创建</target>
        </trans-unit>
        <trans-unit id="7ea222e5b87aefaada7cfc3c3f8a56b08c51fc09" translate="yes" xml:space="preserve">
          <source>Let it control the highlight color with a property binding.</source>
          <target state="translated">让它用属性绑定控制高光颜色。</target>
        </trans-unit>
        <trans-unit id="004d38bc3d9031d71cb310214ca0b608ad86e5f7" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s create a simple &lt;code&gt;angular.json&lt;/code&gt; file that puts target configurations into context.</source>
          <target state="translated">让我们创建一个简单的 &lt;code&gt;angular.json&lt;/code&gt; 文件，将目标配置放入上下文中。</target>
        </trans-unit>
        <trans-unit id="01795115ab37723d08f0d9b07ef9dfa96d603a40" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at an example that counts from 1 to 3, with a one-second delay after each number emitted.</source>
          <target state="translated">让我们看一个示例，该示例从1到3计数，每个数字发出后都有一秒钟的延迟。</target>
        </trans-unit>
        <trans-unit id="0676c335f0a95ff58af45724e2f7974f94d0ddb5" translate="yes" xml:space="preserve">
          <source>Let's add a new target that will run our builder to execute a particular command. This target will tell the builder to run &lt;code&gt;touch&lt;/code&gt; on a file, in order to update its modified date.</source>
          <target state="translated">让我们添加一个新目标，该目标将运行我们的构建器以执行特定命令。此目标将告诉构建器对文件进行 &lt;code&gt;touch&lt;/code&gt; 操作，以更新其修改日期。</target>
        </trans-unit>
        <trans-unit id="ffd15a05977d9b50a1e2b66ca7733331ed9bd1b5" translate="yes" xml:space="preserve">
          <source>Let's animate a simple transition that changes a single HTML element from one state to another. For example, you can specify that a button displays either &lt;strong&gt;Open&lt;/strong&gt; or &lt;strong&gt;Closed&lt;/strong&gt; based on the user's last action. When the button is in the &lt;code&gt;open&lt;/code&gt; state, it's visible and yellow. When it's the &lt;code&gt;closed&lt;/code&gt; state, it's transparent and green.</source>
          <target state="translated">让我们制作一个简单的过渡动画，将单个HTML元素从一种状态更改为另一种状态。例如，您可以根据用户的上一个操作指定一个按钮显示&amp;ldquo; &lt;strong&gt;打开&amp;rdquo;&lt;/strong&gt;或&amp;ldquo; &lt;strong&gt;关闭&amp;rdquo;&lt;/strong&gt;。当按钮处于 &lt;code&gt;open&lt;/code&gt; 状态时，它是可见的且为黄色。处于 &lt;code&gt;closed&lt;/code&gt; 状态时，它是透明的和绿色的。</target>
        </trans-unit>
        <trans-unit id="a182086c861ef403fccc741e4f9e3fffb9b4f5cd" translate="yes" xml:space="preserve">
          <source>Let's assume that we are routing from the &lt;em&gt;Home =&amp;gt; About&lt;/em&gt;.</source>
          <target state="translated">假设我们从&lt;em&gt;Home =&amp;gt; About&lt;/em&gt;路由。</target>
        </trans-unit>
        <trans-unit id="ee3e3e3afa20d18becc2636614b18f6aaf75e485" translate="yes" xml:space="preserve">
          <source>Let's assume that you have an Angular component called &lt;code&gt;ng2Heroes&lt;/code&gt; that needs to be made available in AngularJS templates.</source>
          <target state="translated">假设您有一个名为 &lt;code&gt;ng2Heroes&lt;/code&gt; 的Angular组件，需要在AngularJS模板中使用它。</target>
        </trans-unit>
        <trans-unit id="3a0e89b617672fce2fabac2e7f5f5850f70a9142" translate="yes" xml:space="preserve">
          <source>Let's assume that you have an AngularJS component called &lt;code&gt;ng1Hero&lt;/code&gt; that needs to be made available in Angular templates.</source>
          <target state="translated">假设您有一个名为 &lt;code&gt;ng1Hero&lt;/code&gt; 的AngularJS组件，需要在Angular模板中使用它。</target>
        </trans-unit>
        <trans-unit id="51663bc4d8fc83af90e5716b6dec0d20f693b0a7" translate="yes" xml:space="preserve">
          <source>Let's change the example to display a message if there are more than three heroes.</source>
          <target state="translated">让我们改变一下这个例子,如果有三个以上的英雄,就显示一条信息。</target>
        </trans-unit>
        <trans-unit id="b44579a57df4195be1460c0b0de8ed1fb8e88665" translate="yes" xml:space="preserve">
          <source>Let's illustrate a router transition animation by navigating between two routes, &lt;em&gt;Home&lt;/em&gt; and &lt;em&gt;About&lt;/em&gt; associated with the &lt;code&gt;HomeComponent&lt;/code&gt; and &lt;code&gt;AboutComponent&lt;/code&gt; views respectively. Both of these component views are children of the top-most view, hosted by &lt;code&gt;AppComponent&lt;/code&gt;. We'll implement a router transition animation that slides in the new view to the right and slides out the old view when the user navigates between the two routes.</source>
          <target state="translated">让我们举例说明通过两种途径，之间导航路由器过渡动画&lt;em&gt;家&lt;/em&gt;和&lt;em&gt;关于&lt;/em&gt;与关联 &lt;code&gt;HomeComponent&lt;/code&gt; 和 &lt;code&gt;AboutComponent&lt;/code&gt; 分别看待。这两个组件视图都是最顶层视图的子级，由 &lt;code&gt;AppComponent&lt;/code&gt; 托管。我们将实现一个路由器过渡动画，当用户在两条路线之间导航时，该动画将在新视图中向右滑动，并在旧视图中滑动。</target>
        </trans-unit>
        <trans-unit id="51c9e9bb879b365c74c45744fdcb949bb94a2d8f" translate="yes" xml:space="preserve">
          <source>Let's imagine that instead of logging the counter value, you update a field of your component and display it in its template.</source>
          <target state="translated">让我们想象一下,你不是记录计数器的值,而是更新组件的一个字段,并在其模板中显示。</target>
        </trans-unit>
        <trans-unit id="26d1e55048167bc6baaf2e0793fb782ee863e26b" translate="yes" xml:space="preserve">
          <source>Let's imagine that you start a recurrent task (here incrementing a counter, using RxJS &lt;code&gt;interval&lt;/code&gt;), and at the same time subscribe to &lt;code&gt;isStable&lt;/code&gt;.</source>
          <target state="translated">假设您启动一个循环任务（在这里使用RxJS &lt;code&gt;interval&lt;/code&gt; 增加一个计数器），并同时订阅 &lt;code&gt;isStable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5946821487f82e01968f21fb28ca6f81745022b" translate="yes" xml:space="preserve">
          <source>Let's say you don't want to inject &lt;code&gt;UserService&lt;/code&gt; directly into &lt;code&gt;HeroService&lt;/code&gt;, because you don't want to complicate that service with security-sensitive information. &lt;code&gt;HeroService&lt;/code&gt; won't have direct access to the user information to decide who is authorized and who isn't.</source>
          <target state="translated">假设您不想将 &lt;code&gt;UserService&lt;/code&gt; 直接注入 &lt;code&gt;HeroService&lt;/code&gt; ，因为您不想使该服务与对安全敏感的信息复杂化。 &lt;code&gt;HeroService&lt;/code&gt; 将无法直接访问用户信息来确定谁被授权和谁未被授权。</target>
        </trans-unit>
        <trans-unit id="951a6b55c578c36b78a513bf32b448dca8905f11" translate="yes" xml:space="preserve">
          <source>Let's say you have an AngularJS service:</source>
          <target state="translated">假设你有一个AngularJS服务。</target>
        </trans-unit>
        <trans-unit id="3bfc635473c5d0a274aeaebda63d5676a80f9758" translate="yes" xml:space="preserve">
          <source>Let's see how Angular's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function works with the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;⁣&amp;shy;(⁠)&lt;/code&gt; function to set CSS style attributes. In this code snippet, multiple style attributes are set at the same time for the state. In the &lt;code&gt;open&lt;/code&gt; state, the button has a height of 200 pixels, an opacity of 1, and a background color of yellow.</source>
          <target state="translated">让我们看看Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 函数如何与 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;⁣&amp;shy;(⁠)&lt;/code&gt; 函数一起使用以设置CSS样式属性。在此代码段中，同时为状态设置了多个样式属性。在 &lt;code&gt;open&lt;/code&gt; 状态下，按钮的高度为200像素，不透明度为1，背景色为黄色。</target>
        </trans-unit>
        <trans-unit id="b2ffa03a6796485c7010eeb3285db01c52a7f841" translate="yes" xml:space="preserve">
          <source>Let's start by creating the validator class.</source>
          <target state="translated">让我们从创建验证器类开始。</target>
        </trans-unit>
        <trans-unit id="99f7276b18539354571fb0b39a65472e8470d3e1" translate="yes" xml:space="preserve">
          <source>Let's take a look at another animation on the live example page. Under the Filter/Stagger tab, enter some text into the &lt;strong&gt;Search Heroes&lt;/strong&gt; text box, such as &lt;code&gt;Magnet&lt;/code&gt; or &lt;code&gt;tornado&lt;/code&gt;.</source>
          <target state="translated">让我们看一下实时示例页面上的另一个动画。在&amp;ldquo;过滤器/交错器&amp;rdquo;选项卡下，向&amp;ldquo; &lt;strong&gt;搜索英雄&amp;rdquo;&lt;/strong&gt;文本框中输入一些文本，例如&amp;ldquo; &lt;code&gt;Magnet&lt;/code&gt; 或&amp;ldquo; &lt;code&gt;tornado&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a78a57bd9b98e941523e213b265835c6bf8b7325" translate="yes" xml:space="preserve">
          <source>Let's take the &lt;code&gt;Hero&lt;/code&gt; routes and migrate them to new URLs. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; checks for redirects in your configuration before navigating, so each redirect is triggered when needed. To support this change, you'll add redirects from the old routes to the new routes in the &lt;code&gt;heroes-routing.module&lt;/code&gt;.</source>
          <target state="translated">让我们采用 &lt;code&gt;Hero&lt;/code&gt; 路线并将其迁移到新的URL。该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 导航前检查在配置重定向，所以在需要时每个重定向被触发。为了支持此更改，您将在 &lt;code&gt;heroes-routing.module&lt;/code&gt; 中添加从旧路由到新路由的重定向。</target>
        </trans-unit>
        <trans-unit id="731147e6fd716658458f531b1b9ea06ed3c678b7" translate="yes" xml:space="preserve">
          <source>Lets you add a CSS class to an element when the link's route becomes active.</source>
          <target state="translated">让你在链接的路由成为活动状态时,为元素添加一个CSS类。</target>
        </trans-unit>
        <trans-unit id="cc9c5c8e30a394eae9d072458a3e300ebe3613cd" translate="yes" xml:space="preserve">
          <source>Lets you link to specific routes in your app.</source>
          <target state="translated">让你可以在你的应用程序中链接到特定的路线。</target>
        </trans-unit>
        <trans-unit id="3fd4d244695eda3ce03c3906d63aa441208d0648" translate="yes" xml:space="preserve">
          <source>Libraries (unlike applications and their associated e2e projects) have their own &lt;code&gt;package.json&lt;/code&gt; configuration files.</source>
          <target state="translated">库（与应用程序及其关联的e2e项目不同）具有自己的 &lt;code&gt;package.json&lt;/code&gt; 配置文件。</target>
        </trans-unit>
        <trans-unit id="249a68415825c618581383ebd8e77e0d58a9f6d8" translate="yes" xml:space="preserve">
          <source>Libraries are published as &lt;a href=&quot;npm-packages&quot;&gt;npm packages&lt;/a&gt;, usually together with schematics that integrate them with the Angular CLI. To integrate reusable library code into an application, you need to install the package and import the provided functionality where you will use it. For most published Angular libraries, you can use the Angular CLI &lt;code&gt;ng add &amp;lt;lib_name&amp;gt;&lt;/code&gt; command.</source>
          <target state="translated">库以&lt;a href=&quot;npm-packages&quot;&gt;npm软件包的&lt;/a&gt;形式发布，通常与将它们与Angular CLI集成在一起的示意图一起发布。要将可重用的库代码集成到应用程序中，您需要安装该软件包并将所提供的功能导入您将在其中使用的功能。对于大多数已发布的Angular库，您可以使用Angular CLI &lt;code&gt;ng add &amp;lt;lib_name&amp;gt;&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="9699d0766df04c3c3118cb5d84d81f7cbe5b396a" translate="yes" xml:space="preserve">
          <source>Libraries can be updated by their publishers, and also have their own dependencies which need to be kept current. To check for updates to your installed libraries, use the &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt; command&lt;/a&gt;.</source>
          <target state="translated">图书馆可以由其发布者进行更新，也具有自己的依赖关系，需要保持最新状态。要检查已安装库的更新，请使用&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; 命令&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0376bb56d3bac292a79a960dea3ef8945bb90d1d" translate="yes" xml:space="preserve">
          <source>Libraries extend Angular's base functionality. For example, to add &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt; to an app, add the library package using &lt;code&gt;ng add @angular/forms&lt;/code&gt;, then import the &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; library in your application code. Similarly, adding the &lt;a href=&quot;service-worker-intro&quot;&gt;service worker&lt;/a&gt; library to an Angular application is one of the steps for turning an application into a &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;Progressive Web App&lt;/a&gt; (PWA). &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; is an example of a large, general-purpose library that provides sophisticated, reusable, and adaptable UI components.</source>
          <target state="translated">库扩展了Angular的基本功能。例如，要将&lt;a href=&quot;reactive-forms&quot;&gt;响应式表单&lt;/a&gt;添加到应用程序，请使用 &lt;code&gt;ng add @angular/forms&lt;/code&gt; 添加库包，然后从应用程序代码中的 &lt;code&gt;@angular/forms&lt;/code&gt; 库导入 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 。同样，将&lt;a href=&quot;service-worker-intro&quot;&gt;服务工作者&lt;/a&gt;库添加到Angular应用程序是将应用程序转换为&lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;渐进式Web应用程序&lt;/a&gt;（PWA）的步骤之一。&lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt;是大型通用库的示例，该库提供复杂，可重用和适应性强的UI组件。</target>
        </trans-unit>
        <trans-unit id="0a8fcac923bdc2f041e17f19ca0ee882b12e109e" translate="yes" xml:space="preserve">
          <source>Library developers can use the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; to &lt;code&gt;generate&lt;/code&gt; scaffolding for a new library in an existing &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;, and can publish a library as an &lt;code&gt;npm&lt;/code&gt; package.</source>
          <target state="translated">库开发人员可以使用&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;为现有&lt;a href=&quot;glossary#workspace&quot;&gt;工作区中&lt;/a&gt;的新库 &lt;code&gt;generate&lt;/code&gt; 支架，并且可以将库发布为 &lt;code&gt;npm&lt;/code&gt; 包。</target>
        </trans-unit>
        <trans-unit id="fa66e52846472f9fd27f98294eccf19a26b04dd3" translate="yes" xml:space="preserve">
          <source>Library packages often include typings in &lt;code&gt;.d.ts&lt;/code&gt; files; see examples in &lt;code&gt;node_modules/@angular/material&lt;/code&gt;. If your library's package does not include typings and your IDE complains, you may need to install the library's associated &lt;code&gt;@types/&amp;lt;lib_name&amp;gt;&lt;/code&gt; package.</source>
          <target state="translated">库软件包通常包括在 &lt;code&gt;.d.ts&lt;/code&gt; 文件中的键入；请参阅 &lt;code&gt;node_modules/@angular/material&lt;/code&gt; 示例。如果您的库软件包中不包含键入内容，并且您的IDE抱怨，您可能需要安装库的关联 &lt;code&gt;@types/&amp;lt;lib_name&amp;gt;&lt;/code&gt; 软件包。</target>
        </trans-unit>
        <trans-unit id="369dc2dcfb562bc1b488d8c1c0682319334ebd52" translate="yes" xml:space="preserve">
          <source>Library project files</source>
          <target state="translated">图书馆项目档案</target>
        </trans-unit>
        <trans-unit id="5caffd27e3ec471b46ded28417241aa0b83195e8" translate="yes" xml:space="preserve">
          <source>Library typings</source>
          <target state="translated">图书馆打字</target>
        </trans-unit>
        <trans-unit id="9e9de5dc714b0ebcdc870442c864fb8d36ef6f88" translate="yes" xml:space="preserve">
          <source>Library-specific &lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt; configuration.</source>
          <target state="translated">特定于库的&lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt;配置。</target>
        </trans-unit>
        <trans-unit id="1462d279df315f445494a726cde98792d2ce8e8e" translate="yes" xml:space="preserve">
          <source>Library-specific &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; configuration.</source>
          <target state="translated">库特定的&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;配置。</target>
        </trans-unit>
        <trans-unit id="b7467e05747f314fdd1067fd36131c4e4aa55601" translate="yes" xml:space="preserve">
          <source>Library-specific &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration, including TypeScript and Angular template compiler options. See &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript Configuration&lt;/a&gt;.</source>
          <target state="translated">库特定的&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;配置，包括TypeScript和Angular模板编译器选项。请参阅&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript配置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="e91f6ba4ec02c67a796600daa345b1a2b526d763" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution License 4.0.</source>
          <target state="translated">根据知识共享署名4.0授权。</target>
        </trans-unit>
        <trans-unit id="4e48f698aadae9546857e8298a5bcd17843d6036" translate="yes" xml:space="preserve">
          <source>Lifecycle Hooks</source>
          <target state="translated">生命周期挂钩</target>
        </trans-unit>
        <trans-unit id="b958ad9eb9a6b36ba54104b6bc92f5faa443cc61" translate="yes" xml:space="preserve">
          <source>Lifecycle examples</source>
          <target state="translated">生命周期实例</target>
        </trans-unit>
        <trans-unit id="37857eb2e2aa8efab7a0ac716f62d18f83e34871" translate="yes" xml:space="preserve">
          <source>Lifecycle hooks</source>
          <target state="translated">生命周期钩子</target>
        </trans-unit>
        <trans-unit id="8ced92a0a018d03498243304ed4b11aebef88de0" translate="yes" xml:space="preserve">
          <source>Lifecycle method called after the view is initialized. For internal use only.</source>
          <target state="translated">视图初始化后调用的生命周期方法。仅供内部使用。</target>
        </trans-unit>
        <trans-unit id="8bcc83c9b4f7ee797688986e365040d42abe8375" translate="yes" xml:space="preserve">
          <source>Lifecycle method called before the directive's instance is destroyed. For internal use only.</source>
          <target state="translated">在指令的实例被销毁之前调用的生命周期方法。仅供内部使用。</target>
        </trans-unit>
        <trans-unit id="c76a477802c13c19852bc378c8dbbea9cf0b4d8f" translate="yes" xml:space="preserve">
          <source>Lifecycle sequence</source>
          <target state="translated">生命周期序列</target>
        </trans-unit>
        <trans-unit id="cbd1175e41951b23bc6a03577b221bca30219cd8" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;toh-pt4#observable-heroservice&quot;&gt;&lt;code&gt;getHeroes()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;getHero()&lt;/code&gt; has an asynchronous signature. It returns a &lt;em&gt;mock hero&lt;/em&gt; as an &lt;code&gt;Observable&lt;/code&gt;, using the RxJS &lt;code&gt;of()&lt;/code&gt; function.</source>
          <target state="translated">像&lt;a href=&quot;toh-pt4#observable-heroservice&quot;&gt; &lt;code&gt;getHeroes()&lt;/code&gt; 一样&lt;/a&gt;， &lt;code&gt;getHero()&lt;/code&gt; 具有异步签名。它使用RxJS &lt;code&gt;of()&lt;/code&gt; 函数将&lt;em&gt;模拟英雄&lt;/em&gt;作为 &lt;code&gt;Observable&lt;/code&gt; 返回。</target>
        </trans-unit>
        <trans-unit id="f813a9b214ba457adfc3f3b7f635326573cb767b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;handle()&lt;/code&gt; method transforms an HTTP request into an &lt;code&gt;Observable&lt;/code&gt; of &lt;a href=&quot;http#httpevents&quot;&gt;&lt;code&gt;HttpEvents&lt;/code&gt;&lt;/a&gt; which ultimately include the server's response. The &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; method could inspect that observable and alter it before returning it to the caller.</source>
          <target state="translated">像 &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; 一样， &lt;code&gt;handle()&lt;/code&gt; 方法将HTTP请求转换为&lt;a href=&quot;http#httpevents&quot;&gt; &lt;code&gt;HttpEvents&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;Observable&lt;/code&gt; ，该事件最终包括服务器的响应。的 &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; 方法可以检查该可观察到的，并将其返回给调用者之前修改它。</target>
        </trans-unit>
        <trans-unit id="cac87216a54ce1ed331461ec55435eb45df8962d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances, you choose to pass in validators and async validators as part of an options object.</source>
          <target state="translated">与 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例一样，您可以选择将验证器和异步验证器作为选项对象的一部分传递。</target>
        </trans-unit>
        <trans-unit id="59351fc10bef4908180431ddc9136fdd2825ec9d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;EvenBetterLogger&lt;/code&gt;, &lt;code&gt;HeroService&lt;/code&gt; needs to know if the user is authorized to see secret heroes. That authorization can change during the course of a single application session, as when you log in a different user.</source>
          <target state="translated">与 &lt;code&gt;EvenBetterLogger&lt;/code&gt; 一样， &lt;code&gt;HeroService&lt;/code&gt; 需要知道用户是否有权查看秘密英雄。该授权可以在单个应用程序会话过程中更改，就像您登录其他用户时一样。</target>
        </trans-unit>
        <trans-unit id="2712b30047f7466a2e4dc145651016587aaff9e5" translate="yes" xml:space="preserve">
          <source>Like JavaScript modules, NgModules can import functionality from other NgModules, and allow their own functionality to be exported and used by other NgModules. For example, to use the router service in your app, you import the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; NgModule.</source>
          <target state="translated">与JavaScript模块一样，NgModules可以从其他NgModules导入功能，并允许其他NgModules导出和使用其自身的功能。例如，要在您的应用程序中使用路由器服务，请导入 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; NgModule。</target>
        </trans-unit>
        <trans-unit id="9c551f24bba1fc42974492065f7f565414accad5" translate="yes" xml:space="preserve">
          <source>Like a &lt;a href=&quot;glossary#module&quot;&gt;JavaScript module&lt;/a&gt;, an NgModule can export functionality for use by other NgModules and import public functionality from other NgModules. The metadata for an NgModule class collects components, directives, and pipes that the application uses along with the list of imports and exports. See also &lt;a href=&quot;glossary#declarable&quot;&gt;declarable&lt;/a&gt;.</source>
          <target state="translated">像&lt;a href=&quot;glossary#module&quot;&gt;JavaScript模块&lt;/a&gt;一样，NgModule可以导出供其他NgModule使用的功能，并从其他NgModule导入公共功能。NgModule类的元数据收集应用程序使用的组件，指令和管道以及导入和导出列表。另请参见&lt;a href=&quot;glossary#declarable&quot;&gt;declarable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="585189adbddf6995a44ae66c57e2a58943711031" translate="yes" xml:space="preserve">
          <source>Like all routers, it needs a place in the UI to display routed views. For Angular that's the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; and it belongs in a &lt;em&gt;root component&lt;/em&gt; at the top of the applications component tree.</source>
          <target state="translated">像所有路由器一样，它需要在UI中放置一个位置以显示路由视图。对于Angular，它是 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; ，它属于应用程序组件树顶部的&lt;em&gt;根组件&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e9fb86eb5b7b244ce3a393d7bf88fb154e10ed44" translate="yes" xml:space="preserve">
          <source>Like any complex system, bugs or broken configurations can cause the Angular service worker to act in unforeseen ways. While its design attempts to minimize the impact of such problems, the Angular service worker contains several failsafe mechanisms in case an administrator ever needs to deactivate the service worker quickly.</source>
          <target state="translated">像任何复杂的系统一样,bug或破坏的配置可能会导致Angular服务工作者以不可预见的方式行动。虽然它的设计试图将这类问题的影响降到最低,但Angular服务工作器包含几个故障保护机制,以防管理员需要快速停用服务工作器。</target>
        </trans-unit>
        <trans-unit id="91b6a9c73693ab7273fd7bd5232e5b0489fdfe05" translate="yes" xml:space="preserve">
          <source>Like in AngularJS, Angular automatically mirrors many control properties onto the form control element as CSS classes. You can use these classes to style form control elements according to the state of the form. The following classes are currently supported:</source>
          <target state="translated">像在AngularJS中一样,Angular自动将许多控件属性作为CSS类镜像到表单控件元素上。你可以根据表单的状态,使用这些类来为表单控件元素进行样式设计。目前支持的类有以下几种。</target>
        </trans-unit>
        <trans-unit id="d328b7053c6feca70f5f37fd0b1b8634858620c3" translate="yes" xml:space="preserve">
          <source>Like most shells, the &lt;code&gt;CrisisCenterComponent&lt;/code&gt; class is very simple, simpler even than &lt;code&gt;AppComponent&lt;/code&gt;: it has no business logic, and its template has no links, just a title and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; for the crisis center child component.</source>
          <target state="translated">像大多数外壳程序一样， &lt;code&gt;CrisisCenterComponent&lt;/code&gt; 类非常简单，甚至比 &lt;code&gt;AppComponent&lt;/code&gt; 更简单：它没有业务逻辑，并且其模板没有链接，只是危机中心子组件的标题和 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c960f51394e20fb877a0120ae9db80a6aba3cf3" translate="yes" xml:space="preserve">
          <source>Like template expressions, template &lt;em&gt;statements&lt;/em&gt; use a language that looks like JavaScript. The template statement parser differs from the template expression parser and specifically supports both basic assignment (&lt;code&gt;=&lt;/code&gt;) and chaining expressions (with &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;).</source>
          <target state="translated">与模板表达式一样，模板&lt;em&gt;语句&lt;/em&gt;使用的语言类似于JavaScript。模板语句解析器不同于模板表达式解析器，并且特别支持基本赋值（ &lt;code&gt;=&lt;/code&gt; ）和链接表达式（带有 &lt;code&gt;;&lt;/code&gt; 或 &lt;code&gt;,&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="83341afc572aa00f0348ef8d662d360d9825cc0f" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;ng serve&lt;/code&gt; command, this regenerates output files when source files change.</source>
          <target state="translated">就像 &lt;code&gt;ng serve&lt;/code&gt; 命令一样，当源文件更改时，这将重新生成输出文件。</target>
        </trans-unit>
        <trans-unit id="9eb90305b666c99c946bb5838a4ddc083cb67f27" translate="yes" xml:space="preserve">
          <source>Like the TypeScript compiler, The Angular AoT compiler also supports &lt;code&gt;extends&lt;/code&gt; in the &lt;code&gt;angularCompilerOptions&lt;/code&gt; section of the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;. The &lt;code&gt;extends&lt;/code&gt; property is at the top level, parallel to &lt;code&gt;compilerOptions&lt;/code&gt; and &lt;code&gt;angularCompilerOptions&lt;/code&gt;.</source>
          <target state="translated">像打字稿编译器，角度AOT编译器也支持 &lt;code&gt;extends&lt;/code&gt; 在 &lt;code&gt;angularCompilerOptions&lt;/code&gt; 打字稿配置文件，第 &lt;code&gt;tsconfig.json&lt;/code&gt; 。的 &lt;code&gt;extends&lt;/code&gt; 性是在顶层，平行于 &lt;code&gt;compilerOptions&lt;/code&gt; 和 &lt;code&gt;angularCompilerOptions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6fbfb2e44912c9fae79f4fff1fd632c52f34ac5" translate="yes" xml:space="preserve">
          <source>Like the array bound to the &lt;em&gt;Contact&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppComponent&lt;/code&gt;, this one includes an object with an &lt;code&gt;outlets&lt;/code&gt; property. The &lt;code&gt;outlets&lt;/code&gt; property value is another object with outlet names for keys. The only named outlet is &lt;code&gt;'popup'&lt;/code&gt;.</source>
          <target state="translated">结合到阵列等&lt;em&gt;联系&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;AppComponent&lt;/code&gt; ，这一个包括与对象 &lt;code&gt;outlets&lt;/code&gt; 属性。该 &lt;code&gt;outlets&lt;/code&gt; 的属性值是与键出口名称的另一个对象。唯一命名的出口是 &lt;code&gt;'popup'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71038456701c3916973173203244b127960e1aa5" translate="yes" xml:space="preserve">
          <source>Limit &lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;expression syntax&lt;/a&gt; to the supported subset of JavaScript.</source>
          <target state="translated">将&lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;表达式语法&lt;/a&gt;限制为受支持的JavaScript子集。</target>
        </trans-unit>
        <trans-unit id="aeed6a8852492bee7de657e7a04fde558cde0b38" translate="yes" xml:space="preserve">
          <source>Limit service scope to a component subtree</source>
          <target state="translated">将服务范围限制在一个组件子树上</target>
        </trans-unit>
        <trans-unit id="673e281991136d9d7e9c64e2f080eb1b1ecac1ef" translate="yes" xml:space="preserve">
          <source>Limitation: The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; function won't work if the test body makes an &lt;code&gt;XMLHttpRequest&lt;/code&gt; (XHR) call. XHR calls within a test are rare, but if you need to call XHR, see &lt;a href=&quot;testing#async&quot;&gt;&lt;code&gt;async()&lt;/code&gt;&lt;/a&gt;, below.</source>
          <target state="translated">限制：如果测试主体进行 &lt;code&gt;XMLHttpRequest&lt;/code&gt; （XHR）调用，则 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 函数将不起作用。测试中很少进行XHR调用，但是如果您需要调用XHR，请参见下面的&lt;a href=&quot;testing#async&quot;&gt; &lt;code&gt;async()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ded306388332ec989fda506a02d51aba128c7138" translate="yes" xml:space="preserve">
          <source>Limiting provider scope by lazy loading modules</source>
          <target state="translated">通过懒惰加载模块来限制提供者的范围</target>
        </trans-unit>
        <trans-unit id="89ab768d7c5f66203eca0f427be89355c7490b9e" translate="yes" xml:space="preserve">
          <source>Limiting provider scope with components</source>
          <target state="translated">用组件限制提供者的范围</target>
        </trans-unit>
        <trans-unit id="ebeeb12b89ea951a3d70569f3a883c5068bcd2c5" translate="yes" xml:space="preserve">
          <source>Link tag</source>
          <target state="translated">链接标签</target>
        </trans-unit>
        <trans-unit id="05a4c3bd058773e937f5a60f7f7a6ac340bd0ee8" translate="yes" xml:space="preserve">
          <source>Link the library</source>
          <target state="translated">链接图书馆</target>
        </trans-unit>
        <trans-unit id="e95ec7effe5117842199bf6a8a33372713843750" translate="yes" xml:space="preserve">
          <source>Linked libraries</source>
          <target state="translated">链接图书馆</target>
        </trans-unit>
        <trans-unit id="5abd1d8d73b4555d463bfb879da84e8d8357edc1" translate="yes" xml:space="preserve">
          <source>List Example</source>
          <target state="translated">列表示例</target>
        </trans-unit>
        <trans-unit id="fe441653b156494ea24f494a301178e5b59c44e7" translate="yes" xml:space="preserve">
          <source>List heroes with &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">列出具有 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor的&lt;/a&gt;英雄</target>
        </trans-unit>
        <trans-unit id="9554ab96c5780c8e77824d964ff8ec18697124d1" translate="yes" xml:space="preserve">
          <source>List of additional NgModule files that will be lazy loaded. Lazy router modules will be discovered automatically.</source>
          <target state="translated">额外的NgModule文件列表,这些文件将被懒惰加载。懒惰的路由器模块会被自动发现。</target>
        </trans-unit>
        <trans-unit id="cbce62cc871e24eefa3b59c5e93efe28fffa5a14" translate="yes" xml:space="preserve">
          <source>List of components not referenced in any reachable template, for example dynamically created from code.</source>
          <target state="translated">没有在任何可达到的模板中引用的组件列表,例如从代码中动态创建。</target>
        </trans-unit>
        <trans-unit id="efe7666b861fee17fb6c8a4c39c06756c03bb105" translate="yes" xml:space="preserve">
          <source>List of components to bootstrap when this module is bootstrapped.</source>
          <target state="translated">当这个模块被引导时,要引导的组件列表。</target>
        </trans-unit>
        <trans-unit id="4095ea4985f0e38f002f69cf452dec18fa4bd79e" translate="yes" xml:space="preserve">
          <source>List of components, directives, and pipes that belong to this module.</source>
          <target state="translated">属于该模块的组件、指令和管道的列表。</target>
        </trans-unit>
        <trans-unit id="c889ce564a34bf3ed0a510d34b49b021f11d1487" translate="yes" xml:space="preserve">
          <source>List of components, directives, and pipes visible to modules that import this module.</source>
          <target state="translated">导入本模块的模块可见的组件、指令和管道列表。</target>
        </trans-unit>
        <trans-unit id="d1207345ca32d222a8e432068269adabe143d033" translate="yes" xml:space="preserve">
          <source>List of dependency injection providers for this directive and its children.</source>
          <target state="translated">本指令及其子指令的依赖注入提供者的列表。</target>
        </trans-unit>
        <trans-unit id="fe1604c69069d34dff1de4bebbd2c00d202aad46" translate="yes" xml:space="preserve">
          <source>List of dependency injection providers scoped to this component's view.</source>
          <target state="translated">覆盖到该组件视图的依赖注入提供者列表。</target>
        </trans-unit>
        <trans-unit id="0764d9c4b1ea0aa7ca88575f1383a8a28c5e17ce" translate="yes" xml:space="preserve">
          <source>List of dependency injection providers visible both to the contents of this module and to importers of this module.</source>
          <target state="translated">对本模块的内容和本模块的导入者都可见的依赖注入提供者列表。</target>
        </trans-unit>
        <trans-unit id="1705616178a33f362179ee1acbbd208dd8db8f30" translate="yes" xml:space="preserve">
          <source>List of inline CSS styles or external stylesheet URLs for styling the component&amp;rsquo;s view.</source>
          <target state="translated">用于样式化组件视图的内联CSS样式或外部样式表URL的列表。</target>
        </trans-unit>
        <trans-unit id="f5d4fc5e3688560af7a94670d8c7f9b85064b9c2" translate="yes" xml:space="preserve">
          <source>List of modules to import into this module. Everything from the imported modules is available to &lt;code&gt;declarations&lt;/code&gt; of this module.</source>
          <target state="translated">要导入此模块的模块列表。导入模块中的所有内容都可以用于该模块的 &lt;code&gt;declarations&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0d5e8ade3dc66891a3b11ab132029d51b67ca80" translate="yes" xml:space="preserve">
          <source>List the generated bundles in the &lt;code&gt;dist/&lt;/code&gt; folder.</source>
          <target state="translated">在 &lt;code&gt;dist/&lt;/code&gt; 文件夹中列出生成的包。</target>
        </trans-unit>
        <trans-unit id="73d6d61553d6923f0e56af93936294f91739b3f9" translate="yes" xml:space="preserve">
          <source>List-item separator. Example: &quot;one, two, and three&quot;</source>
          <target state="translated">列表-项目分离器。例如:&quot;一、二、三 &quot;一、二、三&quot;</target>
        </trans-unit>
        <trans-unit id="f819e377af6a253cf7b15c400531f8b31594b0b4" translate="yes" xml:space="preserve">
          <source>Listed below are the base classes and services used to create and manage form controls.</source>
          <target state="translated">下面列出了用于创建和管理表单控件的基础类和服务。</target>
        </trans-unit>
        <trans-unit id="a90c21e873b5d8262d59496442bc0220f95054ad" translate="yes" xml:space="preserve">
          <source>Listen for data from an input.</source>
          <target state="translated">监听输入的数据。</target>
        </trans-unit>
        <trans-unit id="148541005c620fc1e1bb09453d368cfc1c05ad83" translate="yes" xml:space="preserve">
          <source>Listen for keystrokes, but provide a stream representing the value in the input.</source>
          <target state="translated">侦听按键,但提供一个代表输入值的流。</target>
        </trans-unit>
        <trans-unit id="a6bab703979ffded38cb18ceafb2498266b4ba40" translate="yes" xml:space="preserve">
          <source>Listening for form submission</source>
          <target state="translated">听取表格提交</target>
        </trans-unit>
        <trans-unit id="de906cfc91b32a32df4f149847ed0a39eecca3f3" translate="yes" xml:space="preserve">
          <source>Listening to progress events</source>
          <target state="translated">听取进度事件</target>
        </trans-unit>
        <trans-unit id="f9528c7fd458964ab7b0b92b633774bce83a6ea7" translate="yes" xml:space="preserve">
          <source>Listens for an element change event.</source>
          <target state="translated">侦听元素变化事件。</target>
        </trans-unit>
        <trans-unit id="461c42998bd4b841c62ede37f929ff1a1b0ebff3" translate="yes" xml:space="preserve">
          <source>Lists CSS files that supply styles for a project. The extension reflects the style preprocessor you have configured for the project.</source>
          <target state="translated">列出为项目提供样式的CSS文件。扩展名反映了你为项目配置的样式预处理程序。</target>
        </trans-unit>
        <trans-unit id="4155cc0df13221795a620210d3c6cbdaea741275" translate="yes" xml:space="preserve">
          <source>Lists available commands and their short descriptions.</source>
          <target state="translated">列出可用的命令及其简要说明。</target>
        </trans-unit>
        <trans-unit id="16ed44692d8ad77b79438ff89f70547bfc2c8f59" translate="yes" xml:space="preserve">
          <source>Literal array</source>
          <target state="translated">字面数组</target>
        </trans-unit>
        <trans-unit id="5e5d6608e9c1043b497854f14ddd3f434365adbb" translate="yes" xml:space="preserve">
          <source>Literal boolean</source>
          <target state="translated">字面布尔值</target>
        </trans-unit>
        <trans-unit id="aefb6c535c633d3fd4c244f05f9150051f95d764" translate="yes" xml:space="preserve">
          <source>Literal null</source>
          <target state="translated">字面意义为零</target>
        </trans-unit>
        <trans-unit id="f09a5cb4fe044da34e2089937646a3266bcb0772" translate="yes" xml:space="preserve">
          <source>Literal number</source>
          <target state="translated">字面数字</target>
        </trans-unit>
        <trans-unit id="e873017807fac060c5a6a2540134ecd7af88ac3a" translate="yes" xml:space="preserve">
          <source>Literal object</source>
          <target state="translated">字面对象</target>
        </trans-unit>
        <trans-unit id="0dd2df3bdd58ea3fee6371ca12874b46ac5a08a5" translate="yes" xml:space="preserve">
          <source>Literal string</source>
          <target state="translated">字符串</target>
        </trans-unit>
        <trans-unit id="b57452dc90c7272633a6e55b09bbe97b6fc736c0" translate="yes" xml:space="preserve">
          <source>Live Example for named Stackblitz</source>
          <target state="translated">实例为命名为Stackblitz</target>
        </trans-unit>
        <trans-unit id="388c9001eb6fdc7be89eee00a249fe06fb40880d" translate="yes" xml:space="preserve">
          <source>Live Example with download-only</source>
          <target state="translated">仅供下载的实时示例</target>
        </trans-unit>
        <trans-unit id="07ff11a723e5a565044db2e9077a5159e72c2853" translate="yes" xml:space="preserve">
          <source>Live Example without download</source>
          <target state="translated">实例无需下载</target>
        </trans-unit>
        <trans-unit id="15dae1e0d363cb6cbea91c5b210a73bf0dfaf3ce" translate="yes" xml:space="preserve">
          <source>Live example from another guide</source>
          <target state="translated">来自另一个指南的现场例子</target>
        </trans-unit>
        <trans-unit id="7df310a49c994290ecfc7e21b62d9c4caf2a0804" translate="yes" xml:space="preserve">
          <source>Live example with content label</source>
          <target state="translated">带内容标签的活例</target>
        </trans-unit>
        <trans-unit id="d66c6803c67f60624e428beacade6cb10972157a" translate="yes" xml:space="preserve">
          <source>Live examples</source>
          <target state="translated">实例</target>
        </trans-unit>
        <trans-unit id="8a7981f020f2c3393efbc6bb8b6d8826836467e9" translate="yes" xml:space="preserve">
          <source>Live examples (AKA &quot;stackblitz&quot;) are defined by one or more &lt;code&gt;stackblitz.json&lt;/code&gt; files in the root of a code sample folder. Each sample folder usually has a single unnamed definition file, the default &lt;code&gt;stackblitz.json&lt;/code&gt;.</source>
          <target state="translated">实时示例（又名&amp;ldquo; stackblitz&amp;rdquo;）由代码示例文件夹根目录中的一个或多个 &lt;code&gt;stackblitz.json&lt;/code&gt; 文件定义。每个样本文件夹通常都有一个未命名的定义文件，即默认的 &lt;code&gt;stackblitz.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c411dac4ba609b8397b10861a22cedb488ad6bfe" translate="yes" xml:space="preserve">
          <source>Load the module lazily if you can. Angular gives a &lt;a href=&quot;ngmodule-faq#q-lazy-loaded-module-provider-visibility&quot;&gt;lazy-loaded module&lt;/a&gt; its own child injector. The module's providers are visible only within the component tree created with this injector.</source>
          <target state="translated">如果可以，请延迟加载模块。Angular为&lt;a href=&quot;ngmodule-faq#q-lazy-loaded-module-provider-visibility&quot;&gt;延迟加载的模块提供&lt;/a&gt;了自己的子注入器。该模块的提供程序仅在使用该注射器创建的组件树中可见。</target>
        </trans-unit>
        <trans-unit id="855626215880fd7dea9a3f607d78c18204bfbf46" translate="yes" xml:space="preserve">
          <source>Load the router library.</source>
          <target state="translated">加载路由器库。</target>
        </trans-unit>
        <trans-unit id="2fc4426cd416a32214c9b3b17bd86f3d1c1570cf" translate="yes" xml:space="preserve">
          <source>LoadChildren</source>
          <target state="translated">LoadChildren</target>
        </trans-unit>
        <trans-unit id="9f0b098c811d75663f50ef7845bc4eb008bd71e1" translate="yes" xml:space="preserve">
          <source>LoadChildrenCallback</source>
          <target state="translated">LoadChildrenCallback</target>
        </trans-unit>
        <trans-unit id="31112e015bc59afed4d726bc9b3b2423316d6d0e" translate="yes" xml:space="preserve">
          <source>Loading component styles</source>
          <target state="translated">加载组件样式</target>
        </trans-unit>
        <trans-unit id="35b7de4928575370e540a435aa94cc96210fd6a0" translate="yes" xml:space="preserve">
          <source>Loading components</source>
          <target state="translated">装入组件</target>
        </trans-unit>
        <trans-unit id="f359a44a5b3782750e70ce88ac64b11e5f3123ba" translate="yes" xml:space="preserve">
          <source>Local development in older browsers</source>
          <target state="translated">旧版浏览器的本地开发</target>
        </trans-unit>
        <trans-unit id="573faf18825a085ecfb3336ef224bcc2ae1d82cf" translate="yes" xml:space="preserve">
          <source>Local variables</source>
          <target state="translated">本地变量</target>
        </trans-unit>
        <trans-unit id="8977ec427aee669e8db2f2a6f2719f0e9344e0a7" translate="yes" xml:space="preserve">
          <source>Locale name</source>
          <target state="translated">地点名称</target>
        </trans-unit>
        <trans-unit id="8b83ba74d8df3106c3c54f05d4661bf3e32767a6" translate="yes" xml:space="preserve">
          <source>Locale to use for i18n.</source>
          <target state="translated">i18n要使用的地域。</target>
        </trans-unit>
        <trans-unit id="354166c531bb7a8f9498e76a66696bd9d4b42223" translate="yes" xml:space="preserve">
          <source>Localization and internationalization are &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot;&gt;different but closely related terms&lt;/a&gt;.</source>
          <target state="translated">本地化和国际化是&lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalization_and_localization&quot;&gt;不同但密切相关的术语&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb41a49f532685cd459c440d61ae41a3d0bf8ccc" translate="yes" xml:space="preserve">
          <source>Localization file to use for i18n.</source>
          <target state="translated">用于i18n的本地化文件。</target>
        </trans-unit>
        <trans-unit id="55a6907830e4b0ee4cc620928622573b464ba74b" translate="yes" xml:space="preserve">
          <source>Locate</source>
          <target state="translated">Locate</target>
        </trans-unit>
        <trans-unit id="beae6a707a70d58af871d7b7c34fc2505de8b629" translate="yes" xml:space="preserve">
          <source>Locating and analyzing debugging information</source>
          <target state="translated">查找和分析调试信息</target>
        </trans-unit>
        <trans-unit id="d219c68101f532de10add2cf42fb9dbeca73d3be" translate="yes" xml:space="preserve">
          <source>Location</source>
          <target state="translated">Location</target>
        </trans-unit>
        <trans-unit id="bdd4994b6697d0aa097eab26d31f3838942d67b4" translate="yes" xml:space="preserve">
          <source>Location history state.</source>
          <target state="translated">位置历史状态。</target>
        </trans-unit>
        <trans-unit id="8f3c802319cfd4eba7320765609b70dee412ded4" translate="yes" xml:space="preserve">
          <source>Location service that provides a drop-in replacement for the $location service provided in AngularJS.</source>
          <target state="translated">位置服务,为AngularJS中提供的$location服务提供了一个落地替换。</target>
        </trans-unit>
        <trans-unit id="726072084383a83b26e48d4650f089998878f0ca" translate="yes" xml:space="preserve">
          <source>LocationChangeEvent</source>
          <target state="translated">LocationChangeEvent</target>
        </trans-unit>
        <trans-unit id="8b9281f9908f40c4d27eb7d1e85b4cccb5dd2bf6" translate="yes" xml:space="preserve">
          <source>LocationChangeListener</source>
          <target state="translated">LocationChangeListener</target>
        </trans-unit>
        <trans-unit id="a012c9b8aaf5d38c4e605cb39c20f4ff962ac9fb" translate="yes" xml:space="preserve">
          <source>LocationStrategy</source>
          <target state="translated">LocationStrategy</target>
        </trans-unit>
        <trans-unit id="4cf30fb3e21b0273cda4f98b17849340a63a22be" translate="yes" xml:space="preserve">
          <source>LocationUpgradeConfig</source>
          <target state="translated">LocationUpgradeConfig</target>
        </trans-unit>
        <trans-unit id="37fcd2b866223e07ab6791c9aee1bc11bf5e206d" translate="yes" xml:space="preserve">
          <source>LocationUpgradeModule</source>
          <target state="translated">LocationUpgradeModule</target>
        </trans-unit>
        <trans-unit id="25a12fa100f9c3b006680be57a68cce4fc236ef3" translate="yes" xml:space="preserve">
          <source>Log into StackBlitz so you can save and resume your work. If you have a GitHub account, you can log into StackBlitz with that account. In order to save your progress, first fork the project using the Fork button at the top left, then you'll be able to save your work to your own StackBlitz account by clicking the Save button.</source>
          <target state="translated">登录StackBlitz,这样您就可以保存并继续您的工作。如果你有一个GitHub账户,你可以用该账户登录StackBlitz。为了保存您的进度,首先使用左上角的Fork按钮对项目进行分叉,然后您就可以通过点击Save按钮将您的工作保存到您自己的StackBlitz账户。</target>
        </trans-unit>
        <trans-unit id="1633e1308cd0841718001dabd16fe2971d97a19b" translate="yes" xml:space="preserve">
          <source>Log progress to the console while building.</source>
          <target state="translated">构建时将进度记录到控制台。</target>
        </trans-unit>
        <trans-unit id="e5dc85882f60930c7689bfdce39e058c4b570104" translate="yes" xml:space="preserve">
          <source>Log progress to the console.</source>
          <target state="translated">将进度记录到控制台。</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="2f54e7dd245f0dfc3ab6abcfff6728499d5442e8" translate="yes" xml:space="preserve">
          <source>Logical structure of the template</source>
          <target state="translated">模板的逻辑结构</target>
        </trans-unit>
        <trans-unit id="00273607a40c79049711519bee4ee7b98bd10173" translate="yes" xml:space="preserve">
          <source>Long Form</source>
          <target state="translated">长表</target>
        </trans-unit>
        <trans-unit id="f33e1356b1160b6efaf79cb2f446e08314df86ae" translate="yes" xml:space="preserve">
          <source>Long localized GMT format</source>
          <target state="translated">长期本地化的GMT格式</target>
        </trans-unit>
        <trans-unit id="2e144bfc620070f5f43ec82098e80ddab02b2467" translate="yes" xml:space="preserve">
          <source>Long specific non location format (fallback to OOOO)</source>
          <target state="translated">长的特定非位置格式(回退到OOOO)</target>
        </trans-unit>
        <trans-unit id="8bdf3c794b8c3fcb2af032ce49e3385b59500b8b" translate="yes" xml:space="preserve">
          <source>Look again at the TypeScript &lt;code&gt;MinimalLogger&lt;/code&gt; class to confirm that it has no implementation.</source>
          <target state="translated">再次查看TypeScript &lt;code&gt;MinimalLogger&lt;/code&gt; 类，以确认它没有实现。</target>
        </trans-unit>
        <trans-unit id="9714afb7b3fd3c001ce388a1c74ebc12d1268e5e" translate="yes" xml:space="preserve">
          <source>Look at the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;imports&lt;/em&gt; to see how it is configured.</source>
          <target state="translated">查看 &lt;code&gt;AppModule&lt;/code&gt; &lt;em&gt;导入&lt;/em&gt;以了解其配置。</target>
        </trans-unit>
        <trans-unit id="f9a88c4a7ada1a640ab5a9292b8d931bf31bf8c7" translate="yes" xml:space="preserve">
          <source>Look at the browser address bar.</source>
          <target state="translated">看看浏览器地址栏。</target>
        </trans-unit>
        <trans-unit id="08e6f48af7c260496751a944791b4e0d4b6e0ce4" translate="yes" xml:space="preserve">
          <source>Look at the browser's address bar. The URL ends in &lt;code&gt;/&lt;/code&gt;. The route path to &lt;code&gt;HeroesComponent&lt;/code&gt; is &lt;code&gt;/heroes&lt;/code&gt;.</source>
          <target state="translated">查看浏览器的地址栏。网址以 &lt;code&gt;/&lt;/code&gt; 结尾。到 &lt;code&gt;HeroesComponent&lt;/code&gt; 的路由路径是 &lt;code&gt;/heroes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b3028885271626cb1cadf70b2967535e1621603" translate="yes" xml:space="preserve">
          <source>Look at the marble observable definition.</source>
          <target state="translated">看看大理石的可观察定义。</target>
        </trans-unit>
        <trans-unit id="42f94faa84ed8b3a523dc0c01368d8c0d7a3ee41" translate="yes" xml:space="preserve">
          <source>Look at the module &lt;code&gt;imports&lt;/code&gt; array. Notice that the &lt;code&gt;AppRoutingModule&lt;/code&gt; is &lt;em&gt;last&lt;/em&gt;. Most importantly, it comes &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;HeroesModule&lt;/code&gt;.</source>
          <target state="translated">查看模块 &lt;code&gt;imports&lt;/code&gt; 数组。请注意， &lt;code&gt;AppRoutingModule&lt;/code&gt; 为&lt;em&gt;last&lt;/em&gt;。最重要的是，说到&lt;em&gt;以后&lt;/em&gt;的 &lt;code&gt;HeroesModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0ba44f45b5a3040d1447d878bc55088ad4236e4" translate="yes" xml:space="preserve">
          <source>Look at the phone list component first. Right now it contains a TypeScript controller class and a component definition object. You can morph this into an Angular component by just renaming the controller class and turning the AngularJS component definition object into an Angular &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator. You can then also remove the static &lt;code&gt;$inject&lt;/code&gt; property from the class:</source>
          <target state="translated">首先查看电话列表组件。现在，它包含一个TypeScript控制器类和一个组件定义对象。您可以通过重命名控制器类并将AngularJS组件定义对象变成Angular &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 装饰器，将其变形为Angular组件。然后，您还可以从类中删除静态 &lt;code&gt;$inject&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="de3ec20646b812d6cbc48dad5466aa227cf65d80" translate="yes" xml:space="preserve">
          <source>Look but don't touch.</source>
          <target state="translated">看,但不要碰。</target>
        </trans-unit>
        <trans-unit id="513e030d1a3f083d725c0b56b56d11109f9c24a0" translate="yes" xml:space="preserve">
          <source>Look for the &lt;code&gt;SideNav&lt;/code&gt; node in &lt;code&gt;navigation.json&lt;/code&gt;. The &lt;code&gt;SideNav&lt;/code&gt; node is an array of navigation nodes. Each node is either an &lt;em&gt;item&lt;/em&gt; node for a single document or a &lt;em&gt;header&lt;/em&gt; node with child nodes.</source>
          <target state="translated">在 &lt;code&gt;navigation.json&lt;/code&gt; 中查找 &lt;code&gt;SideNav&lt;/code&gt; 节点。所述 &lt;code&gt;SideNav&lt;/code&gt; 节点是导航节点的数组。每个节点要么是单个文档的&lt;em&gt;项目&lt;/em&gt;节点，要么是带有子节点的&lt;em&gt;标题&lt;/em&gt;节点。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="103449f798cc7f7fa5c9cee4dae5684dc090c344" translate="yes" xml:space="preserve">
          <source>Look for these expressions in relation to other translation units that you recognize from elsewhere in the source template. In this example, you know the translation unit for the &lt;code&gt;select&lt;/code&gt; must be just below the translation unit for the logo.</source>
          <target state="translated">与您从源模板中其他位置识别的其他翻译单元相关的查找这些表达式。在此示例中，您知道 &lt;code&gt;select&lt;/code&gt; 的翻译单位必须在徽标翻译单位的正下方。</target>
        </trans-unit>
        <trans-unit id="aa1d393ea706ab3e4d6bcd4474df721780901eb8" translate="yes" xml:space="preserve">
          <source>Look inside the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">查看 &lt;code&gt;src/app&lt;/code&gt; 文件夹。</target>
        </trans-unit>
        <trans-unit id="9085df2384321f47fc8246309224f721b2f71c29" translate="yes" xml:space="preserve">
          <source>Looking at the child route under the &lt;code&gt;AdminComponent&lt;/code&gt;, there is a &lt;code&gt;path&lt;/code&gt; and a &lt;code&gt;children&lt;/code&gt; property but it's not using a &lt;code&gt;component&lt;/code&gt;. You haven't made a mistake in the configuration. You've defined a &lt;em&gt;component-less&lt;/em&gt; route.</source>
          <target state="translated">查看 &lt;code&gt;AdminComponent&lt;/code&gt; 下的子路径，有一个 &lt;code&gt;path&lt;/code&gt; 和一个 &lt;code&gt;children&lt;/code&gt; 属性，但是它没有使用 &lt;code&gt;component&lt;/code&gt; 。您没有在配置中犯错。您已经定义了无&lt;em&gt;组件&lt;/em&gt;路由。</target>
        </trans-unit>
        <trans-unit id="25e2b281c0bde83d9b580461ea4f7163cd645894" translate="yes" xml:space="preserve">
          <source>Looking back at the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;, it implements the confirmation workflow for unsaved changes.</source>
          <target state="translated">回顾 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; ，它实现了未保存更改的确认工作流。</target>
        </trans-unit>
        <trans-unit id="e7e25634e0afadbcb29eb57b05883d36a23ed4f1" translate="yes" xml:space="preserve">
          <source>Looking for an opinionated guide to Angular syntax, conventions, and application structure? Step right in! This style guide presents preferred conventions and, as importantly, explains why.</source>
          <target state="translated">正在寻找一份关于Angular语法、约定和应用结构的意见性指南?快来看看吧 这本风格指南介绍了首选的惯例,更重要的是,解释了为什么。</target>
        </trans-unit>
        <trans-unit id="cea1f4fc1f99cff7cd3c9ac9dc8e20194ab6afc7" translate="yes" xml:space="preserve">
          <source>Looking for components that implement an interface would be better. That's not possible because TypeScript interfaces disappear from the transpiled JavaScript, which doesn't support interfaces. There's no artifact to look for.</source>
          <target state="translated">寻找实现接口的组件会更好。这是不可能的,因为TypeScript的接口会从不支持接口的移植JavaScript中消失。没有任何人工制品可以寻找。</target>
        </trans-unit>
        <trans-unit id="a56f8926a0c06c33dc5d181d345f1e5c45043a2c" translate="yes" xml:space="preserve">
          <source>Low-level API access</source>
          <target state="translated">低级API访问</target>
        </trans-unit>
        <trans-unit id="6134b7debe4a654fda2ef09a7052103053d9efbb" translate="yes" xml:space="preserve">
          <source>Low-level service for running the angular compiler during runtime to create &lt;a href=&quot;componentfactory&quot;&gt;&lt;code&gt;ComponentFactory&lt;/code&gt;&lt;/a&gt;s, which can later be used to create and render a Component instance.</source>
          <target state="translated">用于在运行时运行角度编译器以创建&lt;a href=&quot;componentfactory&quot;&gt; &lt;code&gt;ComponentFactory&lt;/code&gt; &lt;/a&gt;的低级服务，以后可用于创建和呈现Component实例。</target>
        </trans-unit>
        <trans-unit id="c6d7137dc931a7743ccff5998f59ac936c950bc8" translate="yes" xml:space="preserve">
          <source>Low-level service for running the angular compiler during runtime to create &lt;a href=&quot;core/componentfactory&quot;&gt;&lt;code&gt;ComponentFactory&lt;/code&gt;&lt;/a&gt;s, which can later be used to create and render a Component instance.</source>
          <target state="translated">用于在运行时运行角度编译器以创建&lt;a href=&quot;core/componentfactory&quot;&gt; &lt;code&gt;ComponentFactory&lt;/code&gt; &lt;/a&gt;的低级服务，以后可用于创建和呈现Component实例。</target>
        </trans-unit>
        <trans-unit id="1057a596dddf35f2f660fc4cbd5bf0d9525d2095" translate="yes" xml:space="preserve">
          <source>LowerCasePipe</source>
          <target state="translated">LowerCasePipe</target>
        </trans-unit>
        <trans-unit id="c63ae6dd4fc9f9dda66970e827d13f7c73fe841c" translate="yes" xml:space="preserve">
          <source>M</source>
          <target state="translated">M</target>
        </trans-unit>
        <trans-unit id="4815b07a77d69483937a1efbabc0f2f11cd5708c" translate="yes" xml:space="preserve">
          <source>M (9)</source>
          <target state="translated">M (9)</target>
        </trans-unit>
        <trans-unit id="84b40dd1c9a616e32893709f0160985f45c855c7" translate="yes" xml:space="preserve">
          <source>MDN: Notifications API</source>
          <target state="translated">DND:API通知</target>
        </trans-unit>
        <trans-unit id="bbd453084841140039d2f5d166f91ed00ae70846" translate="yes" xml:space="preserve">
          <source>MDN: Push API</source>
          <target state="translated">MDN:推送API</target>
        </trans-unit>
        <trans-unit id="50f14e525d2e81af2e9a6d53e92146c19aee8e89" translate="yes" xml:space="preserve">
          <source>MDN: Web Push API Notifications best practices</source>
          <target state="translated">MDN:网络推送API通知的最佳做法</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="59d84edaf3fd8789deebb4c69c1c96d9dc17b86a" translate="yes" xml:space="preserve">
          <source>MIT / Unicode license</source>
          <target state="translated">MIT/Unicode许可证</target>
        </trans-unit>
        <trans-unit id="4a3a8927b85daa16f0fe11b6bbb759eee3095858" translate="yes" xml:space="preserve">
          <source>MM</source>
          <target state="translated">MM</target>
        </trans-unit>
        <trans-unit id="5321cdcacbce17ad49f28abfe2ba9da25f850a0f" translate="yes" xml:space="preserve">
          <source>MM (09)</source>
          <target state="translated">MM(09)</target>
        </trans-unit>
        <trans-unit id="251f18d4e6b31f7e8ee5bbc62db713101e85a8c9" translate="yes" xml:space="preserve">
          <source>MMM</source>
          <target state="translated">MMM</target>
        </trans-unit>
        <trans-unit id="385520ba3684b055880262b6a0aae7b122c04a80" translate="yes" xml:space="preserve">
          <source>MMM (Sep)</source>
          <target state="translated">MMM(9月)</target>
        </trans-unit>
        <trans-unit id="2f5005d0e6ce2fb551cb5f2bdb9740a5ca7c28db" translate="yes" xml:space="preserve">
          <source>MMMM</source>
          <target state="translated">MMMM</target>
        </trans-unit>
        <trans-unit id="dd3f54f92da35573fec642344b62ba3477ccfe7f" translate="yes" xml:space="preserve">
          <source>MMMM (September)</source>
          <target state="translated">MMMM(9月)</target>
        </trans-unit>
        <trans-unit id="51e8087c726748d21d04753b342826154c269d69" translate="yes" xml:space="preserve">
          <source>MMMMM</source>
          <target state="translated">MMMMM</target>
        </trans-unit>
        <trans-unit id="6ab4970e733a04d47792cab91920b26eb963b14c" translate="yes" xml:space="preserve">
          <source>MOCK_PLATFORM_LOCATION_CONFIG</source>
          <target state="translated">MOCK_PLATFORM_LOCATION_CONFIG</target>
        </trans-unit>
        <trans-unit id="f4dddebe31786c87e0fe408e0085675712af65cc" translate="yes" xml:space="preserve">
          <source>Main section heading</source>
          <target state="translated">主要章节标题</target>
        </trans-unit>
        <trans-unit id="69aca2cdabad30532813ce0f2a3ad8de0760281a" translate="yes" xml:space="preserve">
          <source>Main source file for the builder definition.</source>
          <target state="translated">构建器定义的主要源文件。</target>
        </trans-unit>
        <trans-unit id="1c4bebfe2cfb2181a63c5fee91496eebaf3ef9c5" translate="yes" xml:space="preserve">
          <source>Major versions of Angular CLI follow the supported major version of Angular, but minor versions can be released separately.</source>
          <target state="translated">Angular CLI的主要版本遵循支持的Angular主要版本,但次要版本可以单独发布。</target>
        </trans-unit>
        <trans-unit id="bf3de5f325d286866e21c85cda474a999cdba14c" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; available everywhere in the app in two steps. First, add it to the root &lt;code&gt;AppModule&lt;/code&gt; by importing it:</source>
          <target state="translated">分两步使 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 在应用程序中的任何地方都可用。首先，通过导入将其添加到根 &lt;code&gt;AppModule&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="c5a1910e73e7eb6e55c46ff521bb368fe41f7a94" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;compileComponents()&lt;/code&gt; the last step before calling &lt;code&gt;TestBed.createComponent()&lt;/code&gt;.</source>
          <target state="translated">让 &lt;code&gt;compileComponents()&lt;/code&gt; 调用之前的最后一步 &lt;code&gt;TestBed.createComponent()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d99c5b9ba65adcd58b693254337c6f67be8e03ad" translate="yes" xml:space="preserve">
          <source>Make a copy of the &lt;code&gt;messages.xlf&lt;/code&gt; file.</source>
          <target state="translated">复制 &lt;code&gt;messages.xlf&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="5b7e9db413f403c6893a8e2c2084495d75789b0b" translate="yes" xml:space="preserve">
          <source>Make a dependency &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; and limit search with &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">依赖 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; 并使用 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;限制搜索</target>
        </trans-unit>
        <trans-unit id="6ceac23c3a3ac47d021f8a0419032c00c50efc3a" translate="yes" xml:space="preserve">
          <source>Make changes to the application</source>
          <target state="translated">对申请进行修改</target>
        </trans-unit>
        <trans-unit id="316044472ad8c060a30912cca4487cb3af4f2256" translate="yes" xml:space="preserve">
          <source>Make changes to the application.</source>
          <target state="translated">对申请进行修改。</target>
        </trans-unit>
        <trans-unit id="7fc254619bb9f8413958ab0f757b97527731df62" translate="yes" xml:space="preserve">
          <source>Make it look like this:</source>
          <target state="translated">让它看起来像这样。</target>
        </trans-unit>
        <trans-unit id="1abc7386e3bc39d2084675bbeeedd2ef35237fb7" translate="yes" xml:space="preserve">
          <source>Make sure you do &lt;strong&gt;not&lt;/strong&gt; prefix the &lt;code&gt;highlight&lt;/code&gt; directive name with &lt;strong&gt;&lt;code&gt;ng&lt;/code&gt;&lt;/strong&gt; because that prefix is reserved for Angular and using it could cause bugs that are difficult to diagnose.</source>
          <target state="translated">确保你&lt;strong&gt;没有&lt;/strong&gt;前缀的 &lt;code&gt;highlight&lt;/code&gt; 与指令名&lt;strong&gt; &lt;code&gt;ng&lt;/code&gt; &lt;/strong&gt;，因为前缀保留角和使用可能会导致难以诊断的错误。</target>
        </trans-unit>
        <trans-unit id="712b8ca64e1f48176d6c762ee018e17f602405ff" translate="yes" xml:space="preserve">
          <source>Make that consistent and easy by encapsulating the &lt;em&gt;click-triggering&lt;/em&gt; process in a helper such as the &lt;code&gt;click()&lt;/code&gt; function below:</source>
          <target state="translated">通过将&lt;em&gt;单击触发&lt;/em&gt;过程封装在诸如以下的 &lt;code&gt;click()&lt;/code&gt; 函数之类的帮助器中，可以使这一过程变得一致且容易：</target>
        </trans-unit>
        <trans-unit id="2e9a223fa588ccd851f1c1b0cb30f1273de71037" translate="yes" xml:space="preserve">
          <source>Make the &lt;code&gt;AuthGuard&lt;/code&gt; at least pretend to authenticate.</source>
          <target state="translated">使 &lt;code&gt;AuthGuard&lt;/code&gt; 至少假装进行身份验证。</target>
        </trans-unit>
        <trans-unit id="eb19f1f382051a6d85c4333391125d5ede5a7d90" translate="yes" xml:space="preserve">
          <source>Make the &lt;code&gt;HeroDetailComponent&lt;/code&gt;</source>
          <target state="translated">制作 &lt;code&gt;HeroDetailComponent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="463dda4da4220019aeeebd42f257d172fd01b63a" translate="yes" xml:space="preserve">
          <source>Make the animation definition available in your application by adding the reusable animation (&lt;code&gt;slideInAnimation&lt;/code&gt;) to the &lt;code&gt;animations&lt;/code&gt; metadata of the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">使你的应用程序中使用动画定义中，在可重复使用的动画（ &lt;code&gt;slideInAnimation&lt;/code&gt; ）到 &lt;code&gt;animations&lt;/code&gt; 中的元数据 &lt;code&gt;AppComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74751227eae7954f97375b0126f0b17886fb4edd" translate="yes" xml:space="preserve">
          <source>Make this and future navigation links look better by adding private CSS styles to &lt;code&gt;app.component.css&lt;/code&gt; as listed in the &lt;a href=&quot;toh-pt5#appcomponent&quot;&gt;final code review&lt;/a&gt; below.</source>
          <target state="translated">通过将私有CSS样式添加到 &lt;code&gt;app.component.css&lt;/code&gt; 中，使此导航链接和以后的导航链接看起来更好，如下面的&lt;a href=&quot;toh-pt5#appcomponent&quot;&gt;最终代码回顾&lt;/a&gt;所示。</target>
        </trans-unit>
        <trans-unit id="dda44cf2cb718e16905dfed467c1eda66196d813" translate="yes" xml:space="preserve">
          <source>Makes some of those components, directives, and pipes public so that other module's component templates can use them.</source>
          <target state="translated">将其中的一些组件、指令和管道公开,以便其他模块的组件模板可以使用它们。</target>
        </trans-unit>
        <trans-unit id="b5410952d702720b0d3986ba9bebbbd760f482c3" translate="yes" xml:space="preserve">
          <source>Making Angular Dependencies Injectable to AngularJS</source>
          <target state="translated">让Angular Dependencies可以注入到AngularJS中去</target>
        </trans-unit>
        <trans-unit id="31c9b48df89528d530e4f8037c6726b1d77e4601" translate="yes" xml:space="preserve">
          <source>Making AngularJS Dependencies Injectable to Angular</source>
          <target state="translated">让AngularJS依赖关系可以注入到Angular中去</target>
        </trans-unit>
        <trans-unit id="53df0636f24a76fd425c9228f1963fbda618ba6a" translate="yes" xml:space="preserve">
          <source>Making a DELETE request</source>
          <target state="translated">提出删除请求</target>
        </trans-unit>
        <trans-unit id="3c975508e5dfdc90bc9e5763fc3c9cde303a94a6" translate="yes" xml:space="preserve">
          <source>Making a JSONP request</source>
          <target state="translated">提出JSONP请求</target>
        </trans-unit>
        <trans-unit id="682a5e632852e8d274f560b7523b9f8d6c204027" translate="yes" xml:space="preserve">
          <source>Making a POST request</source>
          <target state="translated">进行POST请求</target>
        </trans-unit>
        <trans-unit id="6a339adf05c8177aed46ff499123318bda51215e" translate="yes" xml:space="preserve">
          <source>Making a PUT request</source>
          <target state="translated">提出PUT请求</target>
        </trans-unit>
        <trans-unit id="43e432fa0ad68e86b6c27d1e0ada2b9ae88e7e75" translate="yes" xml:space="preserve">
          <source>Making changes to your application</source>
          <target state="translated">对您的申请进行修改</target>
        </trans-unit>
        <trans-unit id="5759e22986abbd59e9864d410a1f83086069d2df" translate="yes" xml:space="preserve">
          <source>Manages the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; instances. The group's properties include its child controls. The top-level form in your component is &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">管理一组 &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 实例的值和有效性状态。该组的属性包括其子控件。组件中的顶级表单是 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fd426fb9002208c4566e9fae5a1f6f8e2b68b5f" translate="yes" xml:space="preserve">
          <source>Manages the value and validity state of a numerically indexed array of &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">管理 &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 实例的数字索引数组的值和有效性状态。</target>
        </trans-unit>
        <trans-unit id="e404dc463feb533622563f65f551014165fdd976" translate="yes" xml:space="preserve">
          <source>Manages the value and validity status of an individual form control. It corresponds to an HTML form control such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">管理单个表单控件的值和有效性状态。它对应于HTML表单控件，例如 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a06d5782e6b2e4d5130fa84dff2103e2c6bc93d0" translate="yes" xml:space="preserve">
          <source>Managing Data</source>
          <target state="translated">管理数据</target>
        </trans-unit>
        <trans-unit id="be888fa4e434addfba15bf7c780695443961d736" translate="yes" xml:space="preserve">
          <source>Managing control values</source>
          <target state="translated">管理控制值</target>
        </trans-unit>
        <trans-unit id="2a9e8c74b17baa18fe51ec87aab50e6907bebe12" translate="yes" xml:space="preserve">
          <source>Managing state transitions is one of the hardest parts of building applications. This is especially true on the web, where you also need to ensure that the state is reflected in the URL. In addition, we often want to split applications into multiple bundles and load them on demand. Doing this transparently is not trivial.</source>
          <target state="translated">管理状态转换是构建应用程序最难的部分之一。在网络上尤其如此,你还需要确保状态反映在URL中。此外,我们经常希望将应用程序分成多个捆绑,并按需加载。透明地做到这一点并非易事。</target>
        </trans-unit>
        <trans-unit id="0ee43e052d4a23f21892c2695989404df43ace84" translate="yes" xml:space="preserve">
          <source>Mandatory polyfills</source>
          <target state="translated">强制规定的多元填充物</target>
        </trans-unit>
        <trans-unit id="cbd89d1007525e4ca47bee6f8f673387a6733049" translate="yes" xml:space="preserve">
          <source>Manipulating the code in an application has the potential to be both very powerful and correspondingly dangerous. For example, creating a file that already exists would be an error, and if it was applied immediately, it would discard all the other changes applied so far. The Angular Schematics tooling guards against side effects and errors by creating a virtual file system. A schematic describes a pipeline of transformations that can be applied to the virtual file system. When a schematic runs, the transformations are recorded in memory, and only applied in the real file system once they're confirmed to be valid.</source>
          <target state="translated">操纵应用程序中的代码有可能是非常强大的,也有可能是相应的危险。例如,创建一个已经存在的文件将是一个错误,如果立即应用它,它将会丢弃迄今为止应用的所有其他更改。Angular Schematics工具通过创建一个虚拟文件系统来防范副作用和错误。一个原理图描述了一个可以应用到虚拟文件系统的转换管道。当原理图运行时,变换会被记录在内存中,只有在确认有效后才会在真实文件系统中应用。</target>
        </trans-unit>
        <trans-unit id="db4511ba7c974dbee1de67c07e877aa499f1b010" translate="yes" xml:space="preserve">
          <source>Manually set the errors for a control</source>
          <target state="translated">手动设置控件的错误</target>
        </trans-unit>
        <trans-unit id="9a073277d8726e5adb59f517b0f701f6d2b7d2f5" translate="yes" xml:space="preserve">
          <source>Many Angular APIs return &lt;a href=&quot;glossary#observable&quot;&gt;&lt;em&gt;observables&lt;/em&gt;&lt;/a&gt;. RxJS is an implementation of the proposed &lt;a href=&quot;https://github.com/tc39/proposal-observable&quot;&gt;Observables specification&lt;/a&gt; currently before the &lt;a href=&quot;https://www.ecma-international.org/memento/tc39-m.htm&quot;&gt;TC39&lt;/a&gt; committee, which determines standards for the JavaScript language.</source>
          <target state="translated">许多Angular API返回&lt;a href=&quot;glossary#observable&quot;&gt;&lt;em&gt;observable&lt;/em&gt;&lt;/a&gt;。RxJS是&lt;a href=&quot;https://www.ecma-international.org/memento/tc39-m.htm&quot;&gt;TC39&lt;/a&gt;委员会当前提出的&lt;a href=&quot;https://github.com/tc39/proposal-observable&quot;&gt;Observables规范&lt;/a&gt;的实现，该规范确定JavaScript语言的标准。</target>
        </trans-unit>
        <trans-unit id="bb3077fb1299e0d4c5be4bed68c3efe959b2a279" translate="yes" xml:space="preserve">
          <source>Many JavaScript libraries, such as jQuery, the Jasmine testing library, and Angular, extend the JavaScript environment with features and syntax that the TypeScript compiler doesn't recognize natively. When the compiler doesn't recognize something, it throws an error.</source>
          <target state="translated">许多JavaScript库,如jQuery、Jasmine测试库和Angular,通过TypeScript编译器无法识别的特性和语法来扩展JavaScript环境。当编译器不能识别某些东西时,它会抛出一个错误。</target>
        </trans-unit>
        <trans-unit id="79a5cc6e3569f968faded9077d4da5c809fd4a34" translate="yes" xml:space="preserve">
          <source>Many NgModules such as the &lt;a href=&quot;router&quot;&gt;&lt;code&gt;RouterModule&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;forms&quot;&gt;&lt;code&gt;FormsModule&lt;/code&gt;&lt;/a&gt; define their own attribute directives. The most common attribute directives are as follows:</source>
          <target state="translated">许多NgModule（例如&lt;a href=&quot;router&quot;&gt; &lt;code&gt;RouterModule&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;forms&quot;&gt; &lt;code&gt;FormsModule&lt;/code&gt; )&lt;/a&gt;定义了自己的属性指令。最常见的属性指令如下：</target>
        </trans-unit>
        <trans-unit id="00f3acc423ed6a2d31b34e70beebcddb6eebbe59" translate="yes" xml:space="preserve">
          <source>Many applications allow users to work on several open tasks at the same time. For example, in a tax preparation application, the preparer could be working on several tax returns, switching from one to the other throughout the day.</source>
          <target state="translated">许多应用程序允许用户同时处理多个开放任务。例如,在一个税务准备应用程序中,准备者可能正在处理几个报税单,在一天中从一个切换到另一个。</target>
        </trans-unit>
        <trans-unit id="5e60910eccbea916931290f9e1a1edb67389dec1" translate="yes" xml:space="preserve">
          <source>Many applications need to solve the same general problems, such as presenting a unified user interface, presenting data, and allowing data entry. Developers can create general solutions for particular domains that can be adapted for re-use in different apps. Such a solution can be built as Angular &lt;em&gt;libraries&lt;/em&gt; and these libraries can be published and shared as &lt;em&gt;npm packages&lt;/em&gt;.</source>
          <target state="translated">许多应用程序需要解决相同的一般问题，例如呈现统一的用户界面，呈现数据和允许数据输入。开发人员可以为特定领域创建通用解决方案，以适合在不同应用程序中重复使用。这样的解决方案可以作为Angular &lt;em&gt;库&lt;/em&gt;构建，并且这些库可以作为&lt;em&gt;npm软件包&lt;/em&gt;发布和共享。</target>
        </trans-unit>
        <trans-unit id="b2f6e590417b1e950f21e2fe4525ecf836ea048a" translate="yes" xml:space="preserve">
          <source>Many browsers lack native support for some features in the latest HTML standards, features that Angular requires. &lt;a href=&quot;https://en.wikipedia.org/wiki/Polyfill_(programming)&quot;&gt;&lt;em&gt;Polyfills&lt;/em&gt;&lt;/a&gt; can emulate the missing features. The &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt; guide explains which browsers need polyfills and how you can add them.</source>
          <target state="translated">许多浏览器缺乏对最新HTML标准中某些功能（Angular所需的功能）的本地支持。&lt;a href=&quot;https://en.wikipedia.org/wiki/Polyfill_(programming)&quot;&gt;&lt;em&gt;Polyfill&lt;/em&gt;&lt;/a&gt;可以模拟缺少的功能。该&lt;a href=&quot;browser-support&quot;&gt;浏览器支持&lt;/a&gt;指南介绍其浏览器需要polyfills，以及如何将它们添加。</target>
        </trans-unit>
        <trans-unit id="fdde828ec52442b4eedb4346b2654c7a1e75d261" translate="yes" xml:space="preserve">
          <source>Many code snippets illustrate the points and concepts, all of them available in the .</source>
          <target state="translated">许多代码片断说明了这些要点和概念,所有这些代码片断都可以在.NET Framework中使用。</target>
        </trans-unit>
        <trans-unit id="a5769571f8826f258e20b10faf5d97c4b29d84c5" translate="yes" xml:space="preserve">
          <source>Many components specify &lt;em&gt;external templates&lt;/em&gt; and &lt;em&gt;external css&lt;/em&gt; with the &lt;code&gt;@&lt;a href=&quot;../api/core/component#templateUrl&quot;&gt;Component.templateUrl&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; properties respectively, as the following variant of &lt;code&gt;BannerComponent&lt;/code&gt; does.</source>
          <target state="translated">许多组件指定&lt;em&gt;外部模板&lt;/em&gt;和&lt;em&gt;外部CSS&lt;/em&gt;与 &lt;code&gt;@&lt;a href=&quot;../api/core/component#templateUrl&quot;&gt;Component.templateUrl&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; 分别特性，如以下变种 &lt;code&gt;BannerComponent&lt;/code&gt; 一样。</target>
        </trans-unit>
        <trans-unit id="acc85a759063bfaad44d4c09b73aac23c0466b71" translate="yes" xml:space="preserve">
          <source>Many dependency values are provided by classes, but not all. The expanded &lt;em&gt;provide&lt;/em&gt; object lets you associate different kinds of providers with a DI token.</source>
          <target state="translated">类提供了许多依赖关系值，但不是全部。扩展&lt;em&gt;提供&lt;/em&gt;对象让你各种不同供应商与DI令牌关联。</target>
        </trans-unit>
        <trans-unit id="a6bc57d6d1877b71ad49a4a9eab6aeaf31d96e3b" translate="yes" xml:space="preserve">
          <source>Many developers feel this approach is cleaner and more explicit than the traditional &lt;code&gt;beforeEach()&lt;/code&gt; style.</source>
          <target state="translated">许多开发人员认为此方法比传统的 &lt;code&gt;beforeEach()&lt;/code&gt; 样式更干净，更明确。</target>
        </trans-unit>
        <trans-unit id="c964d1c587a16600688084c23f6ab48e7efca0b1" translate="yes" xml:space="preserve">
          <source>Many developers prefer to declare the factory provider in a separate &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; file so that they are all together, making it easier to reference them, create new ones and delete them once the upgrade is over.</source>
          <target state="translated">许多开发人员更喜欢在单独的 &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; 文件中声明工厂提供程序，以便将它们全部合并在一起，从而可以更轻松地引用它们，创建新文件并在升级结束后将其删除。</target>
        </trans-unit>
        <trans-unit id="3ab5deb39f9c7a1a879f01f3a89332be8ff505de" translate="yes" xml:space="preserve">
          <source>Many guides tell a story. In that story, the app evolves incrementally, often with simplistic or incomplete code along the way.</source>
          <target state="translated">许多指南都在讲述一个故事。在这个故事中,应用会逐步发展,通常在发展过程中会出现简单化或不完整的代码。</target>
        </trans-unit>
        <trans-unit id="087124921eb33f7e338ea00e25240b971be1f766" translate="yes" xml:space="preserve">
          <source>Many interceptors are only concerned with the outgoing request and simply return the event stream from &lt;code&gt;next.handle()&lt;/code&gt; without modifying it.</source>
          <target state="translated">许多拦截器只关心传出的请求，只是从 &lt;code&gt;next.handle()&lt;/code&gt; 返回事件流，而没有对其进行修改。</target>
        </trans-unit>
        <trans-unit id="0d466227c3ceaced415c72a362876ff6eef8934e" translate="yes" xml:space="preserve">
          <source>Many libraries include definition files in their npm packages where both the TypeScript compiler and editors can find them. Angular is one such library. The &lt;code&gt;node_modules/@angular/core/&lt;/code&gt; folder of any Angular application contains several &lt;code&gt;d.ts&lt;/code&gt; files that describe parts of Angular.</source>
          <target state="translated">许多库的npm包中都包含定义文件，TypeScript编译器和编辑器都可以在其中找到它们。Angular就是这样一种库。任何Angular应用程序的 &lt;code&gt;node_modules/@angular/core/&lt;/code&gt; 文件夹都包含多个 &lt;code&gt;d.ts&lt;/code&gt; 文件，这些文件描述了Angular的各个部分。</target>
        </trans-unit>
        <trans-unit id="9a5e32c0e28524dc6612566940bcead3465d22d7" translate="yes" xml:space="preserve">
          <source>Many libraries&amp;mdash;jQuery, Jasmine, and Lodash among them&amp;mdash;do &lt;em&gt;not&lt;/em&gt; include &lt;code&gt;d.ts&lt;/code&gt; files in their npm packages. Fortunately, either their authors or community contributors have created separate &lt;code&gt;d.ts&lt;/code&gt; files for these libraries and published them in well-known locations.</source>
          <target state="translated">许多库（包括jQuery，Jasmine和Lodash）在其npm软件包中&lt;em&gt;均不&lt;/em&gt;包含 &lt;code&gt;d.ts&lt;/code&gt; 文件。幸运的是，他们的作者或社区贡献者已为这些库创建了单独的 &lt;code&gt;d.ts&lt;/code&gt; 文件，并将它们发布在了知名的位置。</target>
        </trans-unit>
        <trans-unit id="ff9a14500d4b27838588c153e0ce6118bde4d3dc" translate="yes" xml:space="preserve">
          <source>Many servers require extra headers for save operations. For example, they may require a &quot;Content-Type&quot; header to explicitly declare the MIME type of the request body; or the server may require an authorization token.</source>
          <target state="translated">许多服务器需要为保存操作提供额外的头。例如,他们可能需要一个 &quot;Content-Type &quot;头来明确声明请求体的MIME类型;或者服务器可能需要一个授权令牌。</target>
        </trans-unit>
        <trans-unit id="def2eba59562958fa4a005f8070d692ef8502312" translate="yes" xml:space="preserve">
          <source>Mapping</source>
          <target state="translated">Mapping</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
