<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="c812f6529ca065b3990e70e2407682a3f9b80ef0" translate="yes" xml:space="preserve">
          <source>The first segment name can be prepended with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;./&lt;/code&gt;, or &lt;code&gt;../&lt;/code&gt;:</source>
          <target state="translated">第一段名称可以与前置 &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;./&lt;/code&gt; 或 &lt;code&gt;../&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="be494398bc29b0cab8b00ca0ac7181001cb339b3" translate="yes" xml:space="preserve">
          <source>The first test creates a &lt;code&gt;ValueService&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; and passes it to the &lt;code&gt;MasterService&lt;/code&gt; constructor.</source>
          <target state="translated">第一个测试使用 &lt;code&gt;new&lt;/code&gt; 创建一个 &lt;code&gt;ValueService&lt;/code&gt; ，并将其传递给 &lt;code&gt;MasterService&lt;/code&gt; 构造函数。</target>
        </trans-unit>
        <trans-unit id="e5c06683cd16e03e55d325b4c0dc8a1f41e8cc0c" translate="yes" xml:space="preserve">
          <source>The first test shows the benefit of automatic change detection.</source>
          <target state="translated">第一个测试显示了自动变化检测的好处。</target>
        </trans-unit>
        <trans-unit id="aa509a8a6923fb66806ca57c1af7a5c17aa9333e" translate="yes" xml:space="preserve">
          <source>The first two lines, with the bindings, are there from previous steps. The new parts are &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; allows you to project content, and &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; inside the &lt;code&gt;ChildComponent&lt;/code&gt; template makes the &lt;code&gt;InspectorComponent&lt;/code&gt; a child component of &lt;code&gt;ChildComponent&lt;/code&gt;.</source>
          <target state="translated">前两行带有绑定，位于之前的步骤中。新的部分是 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 让你的项目内容，以及 &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 里面 &lt;code&gt;ChildComponent&lt;/code&gt; 模板使 &lt;code&gt;InspectorComponent&lt;/code&gt; 的子组件 &lt;code&gt;ChildComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7f348f21943da7baa131bdaaaeacb38df6dc474" translate="yes" xml:space="preserve">
          <source>The first two paths are the routes to the &lt;code&gt;CustomersModule&lt;/code&gt; and the &lt;code&gt;OrdersModule&lt;/code&gt;. The final entry defines a default route. The empty path matches everything that doesn't match an earlier path.</source>
          <target state="translated">前两个路径是到 &lt;code&gt;CustomersModule&lt;/code&gt; 和 &lt;code&gt;OrdersModule&lt;/code&gt; 的路由。最后的条目定义了默认路由。空路径匹配所有与先前路径不匹配的内容。</target>
        </trans-unit>
        <trans-unit id="dc8e7d683a61ef16411f45a78aa24508cfc2fdad" translate="yes" xml:space="preserve">
          <source>The first unit contains the text that was outside of the &lt;code&gt;select&lt;/code&gt;. In place of the &lt;code&gt;select&lt;/code&gt; is a placeholder, &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt;, that represents the &lt;code&gt;select&lt;/code&gt; message. Translate the text and move around the placeholder if necessary, but don't remove it. If you remove the placeholder, the ICU expression will not be present in your translated app.</source>
          <target state="translated">第一个单元包含 &lt;code&gt;select&lt;/code&gt; 之外的文本。代替 &lt;code&gt;select&lt;/code&gt; 是占位符 &lt;code&gt;&amp;lt;x id=&quot;ICU&quot;&amp;gt;&lt;/code&gt; ，它代表 &lt;code&gt;select&lt;/code&gt; 消息。翻译文本并在必要时在占位符附近移动，但不要删除它。如果删除占位符，则ICU表达式将不会出现在已翻译的应用程序中。</target>
        </trans-unit>
        <trans-unit id="a43bddb336b6d795fd036d0b5ceb9112cbcc9c51" translate="yes" xml:space="preserve">
          <source>The fix - hide empty details with &lt;em&gt;*ngIf&lt;/em&gt;</source>
          <target state="translated">修复-用&lt;em&gt;* ngIf&lt;/em&gt;隐藏空细节&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c4e5c41140f56ca78f4718c5d160184adeef566" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;--optimization=&quot;true&quot;&lt;/code&gt; applies to both scripts and styles. You can supply a value such as the following to apply optimization to one or the other:</source>
          <target state="translated">标志 &lt;code&gt;--optimization=&quot;true&quot;&lt;/code&gt; 适用于脚本和样式。您可以提供诸如以下的值，以将优化应用于一个或另一个：</target>
        </trans-unit>
        <trans-unit id="8cae6ccc26c43113c77ba86a6a7f857871cb6761" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;--sourceMap=&quot;true&quot;&lt;/code&gt; outputs source maps for both scripts and styles. You can configure the option to apply to one or the other. You can also choose to output hidden source maps, or resolve vendor package source maps. For example:</source>
          <target state="translated">标志 &lt;code&gt;--sourceMap=&quot;true&quot;&lt;/code&gt; 输出脚本和样式的源映射。您可以配置选项以应用于一个或另一个。您还可以选择输出隐藏的源地图，或解析供应商软件包源地图。例如：</target>
        </trans-unit>
        <trans-unit id="3f3ed63d6d77ed1a3c84fa9fd5bacb244d6a6a3c" translate="yes" xml:space="preserve">
          <source>The folllowing sections highlight some core router concepts.</source>
          <target state="translated">下面的章节将重点介绍一些核心的路由器概念。</target>
        </trans-unit>
        <trans-unit id="1493706ed03721d1c78b58ccff4d87d10377338c" translate="yes" xml:space="preserve">
          <source>The follow example shows how to use radio buttons in a reactive form. When using radio buttons in a reactive form, radio buttons in the same group should have the same &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt;. Providing a &lt;code&gt;name&lt;/code&gt; attribute is optional.</source>
          <target state="translated">下面的示例演示如何以反应形式使用单选按钮。当使用反应形式的单选按钮时，同一组中的单选按钮应具有相同的 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 。提供 &lt;code&gt;name&lt;/code&gt; 属性是可选的。</target>
        </trans-unit>
        <trans-unit id="310dc1587f604138be8759e6a89d07e7cc01679f" translate="yes" xml:space="preserve">
          <source>The follow example shows you how to use a multi-select control with a reactive form.</source>
          <target state="translated">下面的例子展示了如何在反应式表单中使用多选择控件。</target>
        </trans-unit>
        <trans-unit id="8c6f2a7b56c63473c3a42c22b17753fcb52e791f" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; method reports the error and then returns an innocuous result so that the application keeps working.</source>
          <target state="translated">以下 &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; 方法报告错误，然后返回无害的结果，以便应用程序继续运行。</target>
        </trans-unit>
        <trans-unit id="785ab51680d18375d227cf4bdd9454c50b68a18c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; will be shared by many &lt;code&gt;HeroService&lt;/code&gt; methods so it's generalized to meet their different needs.</source>
          <target state="translated">下面的 &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; 将由许多 &lt;code&gt;HeroService&lt;/code&gt; 方法共享，因此可以将其通用化以满足它们的不同需求。</target>
        </trans-unit>
        <trans-unit id="9fac4999708b255d65710166eee053bb3a438369" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;ActivatedRouteStub&lt;/code&gt; class serves as a test double for &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以下 &lt;code&gt;ActivatedRouteStub&lt;/code&gt; 类用作ActivatedRoute的测试双 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e61ca55af810cb77b591c0e8d0cf9110b85b7a31" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuestionBase&lt;/code&gt; is a base class for a set of controls that can represent the question and its answer in the form.</source>
          <target state="translated">下面的 &lt;code&gt;QuestionBase&lt;/code&gt; 是一组控件的基类，这些控件可以以形式表示问题及其答案。</target>
        </trans-unit>
        <trans-unit id="b2b988a26abe5c751d6ffb4eba65994971ffa485" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuestionBase&lt;/code&gt; is a fundamental question class.</source>
          <target state="translated">以下 &lt;code&gt;QuestionBase&lt;/code&gt; 是基本的问题类。</target>
        </trans-unit>
        <trans-unit id="c06281078d15555932d1ae78c47b2ddcf06d4228" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;WelcomeComponent&lt;/code&gt; depends on the &lt;code&gt;UserService&lt;/code&gt; to know the name of the user to greet.</source>
          <target state="translated">下面的 &lt;code&gt;WelcomeComponent&lt;/code&gt; 取决于 &lt;code&gt;UserService&lt;/code&gt; 来知道要问候的用户名。</target>
        </trans-unit>
        <trans-unit id="f0f7c8570c75a7fbfc3c92a94edaa5d338b173de" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;devDependencies&lt;/code&gt; are provided in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">在默认的 &lt;code&gt;package.json&lt;/code&gt; 文件中为新的Angular工作区提供了以下 &lt;code&gt;devDependencies&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36e2b7d7bec0be04c77013b1d36bd5f9bd31299b" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;go()&lt;/code&gt; function navigates to the &lt;code&gt;list&lt;/code&gt; route by interpreting the destination URI as relative to the activated &lt;code&gt;child&lt;/code&gt; route</source>
          <target state="translated">下 &lt;code&gt;go()&lt;/code&gt; 函数可前往 &lt;code&gt;list&lt;/code&gt; 路线通过解释目的地URI为相对于启动 &lt;code&gt;child&lt;/code&gt; 路线</target>
        </trans-unit>
        <trans-unit id="c66deeeadbe10c60879e8a84f1e34c983c81d32e" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;handleError()&lt;/code&gt; method reports the error and then returns an innocuous result so that the application keeps working.</source>
          <target state="translated">下面的 &lt;code&gt;handleError()&lt;/code&gt; 方法报告错误，然后返回无害的结果，以便应用程序继续运行。</target>
        </trans-unit>
        <trans-unit id="116cc41ee5347f1fb8e9c5ef258684090ee5b82d" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;handleError()&lt;/code&gt; will be shared by many &lt;code&gt;HeroService&lt;/code&gt; methods so it's generalized to meet their different needs.</source>
          <target state="translated">下面的 &lt;code&gt;handleError()&lt;/code&gt; 将被许多 &lt;code&gt;HeroService&lt;/code&gt; 方法共享，因此可以将其通用化以满足它们的不同需求。</target>
        </trans-unit>
        <trans-unit id="0a445c25398c4982342ee1c37ee98932b7260ab6" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;searchHeroes&lt;/code&gt; method queries for heroes whose names contain the search term. Start by importing &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">以下 &lt;code&gt;searchHeroes&lt;/code&gt; 方法查询名称中包含搜索词的英雄。首先导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="91fa256b1d95446c100727849d7fffe9e6eee18c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;sizerComponent&lt;/code&gt; has a &lt;code&gt;size&lt;/code&gt; value property and a &lt;code&gt;sizeChange&lt;/code&gt; event. The &lt;code&gt;size&lt;/code&gt; property is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, so data can flow into the &lt;code&gt;sizerComponent&lt;/code&gt;. The &lt;code&gt;sizeChange&lt;/code&gt; event is an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, which allows data to flow out of the &lt;code&gt;sizerComponent&lt;/code&gt; to the parent component.</source>
          <target state="translated">以下 &lt;code&gt;sizerComponent&lt;/code&gt; 具有 &lt;code&gt;size&lt;/code&gt; 值属性和 &lt;code&gt;sizeChange&lt;/code&gt; 事件。的 &lt;code&gt;size&lt;/code&gt; 属性是一个 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ，所以数据可以流入 &lt;code&gt;sizerComponent&lt;/code&gt; 。所述 &lt;code&gt;sizeChange&lt;/code&gt; 事件是 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ，其允许的数据流出 &lt;code&gt;sizerComponent&lt;/code&gt; 到父组件。</target>
        </trans-unit>
        <trans-unit id="cf12f77efe304835f70e6db2fb5c41f976783ba1" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;AfterContent&lt;/em&gt; hooks take action based on changing values in a &lt;em&gt;content child&lt;/em&gt;, which can only be reached by querying for them via the property decorated with &lt;a href=&quot;../api/core/contentchild&quot;&gt;@ContentChild&lt;/a&gt;.</source>
          <target state="translated">以下&lt;em&gt;AfterContent&lt;/em&gt;挂钩根据更改&lt;em&gt;内容子项中的&lt;/em&gt;值来执行操作，只有通过使用&lt;a href=&quot;../api/core/contentchild&quot;&gt;@ContentChild&lt;/a&gt;装饰的属性来查询它们，才能实现这些值。</target>
        </trans-unit>
        <trans-unit id="116e174584a29bb6840145432c80d1ed6f312131" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;code-example&lt;/em&gt; displays the sample's &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">下面的&lt;em&gt;代码示例&lt;/em&gt;显示示例的 &lt;code&gt;app.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ff1e333381c65ecbd5243d727c0316791951c07" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;negative&lt;/em&gt; example defines the &lt;code&gt;AppComponent&lt;/code&gt;, bootstraps the app, defines the &lt;code&gt;Hero&lt;/code&gt; model object, and loads heroes from the server all in the same file. &lt;em&gt;Don't do this&lt;/em&gt;.</source>
          <target state="translated">以下&lt;em&gt;否定&lt;/em&gt;示例定义 &lt;code&gt;AppComponent&lt;/code&gt; ，引导应用程序，定义 &lt;code&gt;Hero&lt;/code&gt; 模型对象并从服务器将英雄加载到同一文件中。&lt;em&gt;不要这样做&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f753905a9a1f06f9639773508814519f5c2d410a" translate="yes" xml:space="preserve">
          <source>The following APIs have been removed starting with version 11.0.0*:</source>
          <target state="translated">从11.0.0*版本开始删除了以下API。</target>
        </trans-unit>
        <trans-unit id="994aa1e70e47f4c7e017a337b6ce6547e5ba554b" translate="yes" xml:space="preserve">
          <source>The following APIs have been removed starting with version 8.0.0:</source>
          <target state="translated">以下API从8.0.0版本开始被删除。</target>
        </trans-unit>
        <trans-unit id="51bbe99f451aed6b8246ad5a220ae097d1d5bcbc" translate="yes" xml:space="preserve">
          <source>The following Angular packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace. For a complete list of Angular packages, see the &lt;a href=&quot;http://angular.io/api?type=package&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">以下Angular软件包作为依赖项包含在新Angular工作区的默认 &lt;code&gt;package.json&lt;/code&gt; 文件中。有关Angular软件包的完整列表，请参见&lt;a href=&quot;http://angular.io/api?type=package&quot;&gt;API参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ccafe2208c4727216714f0e1d0a16ecb2aadd2a4" translate="yes" xml:space="preserve">
          <source>The following Angular packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace. For a complete list of Angular packages, see the &lt;a href=&quot;https://angular.io/api?type=package&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065d02b28e6329bb68299c785507b5b63ab4c196" translate="yes" xml:space="preserve">
          <source>The following JavaScript and template expression syntax is not allowed:</source>
          <target state="translated">以下JavaScript和模板表达式语法是不允许的。</target>
        </trans-unit>
        <trans-unit id="c9c87c138794393175620ac93451cef9321aa8cd" translate="yes" xml:space="preserve">
          <source>The following Node Express code routes all remaining requests to &lt;code&gt;/dist&lt;/code&gt;, and returns a &lt;code&gt;404 - NOT FOUND&lt;/code&gt; error if the file isn't found.</source>
          <target state="translated">以下Node Express代码将所有其余请求路由到 &lt;code&gt;/dist&lt;/code&gt; ，如果找不到该文件，则返回 &lt;code&gt;404 - NOT FOUND&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="42602365e9f9b5d3751f97c026342dbe6e9a0a12" translate="yes" xml:space="preserve">
          <source>The following Node.js Express code routes all remaining requests to &lt;code&gt;/dist&lt;/code&gt;, and returns a &lt;code&gt;404 - NOT FOUND&lt;/code&gt; error if the file isn't found.</source>
          <target state="translated">以下Node.js Express代码将所有其余请求路由到 &lt;code&gt;/dist&lt;/code&gt; ，如果找不到该文件，则返回 &lt;code&gt;404 - NOT FOUND&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="b65644eda0c104813298601e0f97875c503d3e04" translate="yes" xml:space="preserve">
          <source>The following animation functions accept &lt;code&gt;&lt;a href=&quot;animationoptions&quot;&gt;AnimationOptions&lt;/a&gt;&lt;/code&gt; data:</source>
          <target state="translated">以下动画函数接受 &lt;code&gt;&lt;a href=&quot;animationoptions&quot;&gt;AnimationOptions&lt;/a&gt;&lt;/code&gt; 数据：</target>
        </trans-unit>
        <trans-unit id="1767c5d430aa307e12d6375ef28cd7b7f4045947" translate="yes" xml:space="preserve">
          <source>The following application structure configures build targets for production and staging environments:</source>
          <target state="translated">以下应用程序结构为生产和暂存环境配置构建目标。</target>
        </trans-unit>
        <trans-unit id="a46e859c7f6f419e5a00b12a40b726bdaa8d73c6" translate="yes" xml:space="preserve">
          <source>The following are all in &lt;code&gt;src/&lt;/code&gt;</source>
          <target state="translated">以下全部在 &lt;code&gt;src/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9f939245f394ca4dc27650e24cf49bae0b34e97" translate="yes" xml:space="preserve">
          <source>The following are metadata errors you may encounter, with explanations and suggested corrections.</source>
          <target state="translated">以下是你可能遇到的元数据错误,并附有解释和建议的更正。</target>
        </trans-unit>
        <trans-unit id="51abe71aa0569567b6c0aa9179e570dc48c94b6e" translate="yes" xml:space="preserve">
          <source>The following are optional practices that may be required in special cases:</source>
          <target state="translated">以下是在特殊情况下可能需要的可选做法:</target>
        </trans-unit>
        <trans-unit id="a6716986e0c6713342e583a29289a90b2926bb94" translate="yes" xml:space="preserve">
          <source>The following calls request navigation to a dynamic route path relative to the current URL.</source>
          <target state="translated">以下调用要求导航到与当前URL相对的动态路径。</target>
        </trans-unit>
        <trans-unit id="387b2a0ab6debbcc744a145f5f656fc83ebacd58" translate="yes" xml:space="preserve">
          <source>The following calls request navigation to an absolute path.</source>
          <target state="translated">以下调用要求导航到绝对路径。</target>
        </trans-unit>
        <trans-unit id="c3ebc8d8ec464f34b73d550cada30c074e9d8e13" translate="yes" xml:space="preserve">
          <source>The following classes are applied as the properties become true:</source>
          <target state="translated">当属性变为真时,会应用以下类。</target>
        </trans-unit>
        <trans-unit id="ce6439485b50c16d62436ad7f675d84cb36c7da0" translate="yes" xml:space="preserve">
          <source>The following code adds a route object to your routing configuration using the &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; property and custom matcher, and the &lt;code&gt;component&lt;/code&gt; property with &lt;code&gt;AngularJSComponent&lt;/code&gt;.</source>
          <target state="translated">以下代码使用 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 属性和自定义匹配器以及 &lt;code&gt;AngularJSComponent&lt;/code&gt; 的 &lt;code&gt;component&lt;/code&gt; 属性将路由对象添加到路由配置中。</target>
        </trans-unit>
        <trans-unit id="28e2cb78b7b1af48f76a5dad16de0e5a0f60b030" translate="yes" xml:space="preserve">
          <source>The following code adds a route object to your routing configuration using the &lt;code&gt;matcher&lt;/code&gt; property and custom matcher, and the &lt;code&gt;component&lt;/code&gt; property with &lt;code&gt;AngularJSComponent&lt;/code&gt;.</source>
          <target state="translated">以下代码使用 &lt;code&gt;matcher&lt;/code&gt; 属性和自定义匹配器以及 &lt;code&gt;AngularJSComponent&lt;/code&gt; 的 &lt;code&gt;component&lt;/code&gt; 属性将路由对象添加到路由配置中。</target>
        </trans-unit>
        <trans-unit id="6b49010b9d59d96e69b509c32c65368c8bb333ca" translate="yes" xml:space="preserve">
          <source>The following code allows the possibility of a null result:</source>
          <target state="translated">下面的代码允许出现空结果的可能性。</target>
        </trans-unit>
        <trans-unit id="7b6b1c6e0fefe9a409bb2943db47b7d0229ca42c" translate="yes" xml:space="preserve">
          <source>The following code create the validator class, &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt;, which implements the &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">以下代码创建验证器类 &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; ，该类实现 &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; 接口。</target>
        </trans-unit>
        <trans-unit id="8424f6423c006de8373a39e981e029928c19ba67" translate="yes" xml:space="preserve">
          <source>The following code creates a new hero instance, so that the initial form can show an example hero.</source>
          <target state="translated">下面的代码创建了一个新的英雄实例,这样初始形态就可以显示出一个示例英雄。</target>
        </trans-unit>
        <trans-unit id="207af549f2a57a4ef9618be51c8a3e2c03508d70" translate="yes" xml:space="preserve">
          <source>The following code defines a variable that creates such an object to play the logger role.</source>
          <target state="translated">下面的代码定义了一个变量,用来创建这样一个对象来扮演记录器的角色。</target>
        </trans-unit>
        <trans-unit id="7e32964f8010bdc34e31bfb91a4480490d6ce73b" translate="yes" xml:space="preserve">
          <source>The following code example binds an observable of message strings (&lt;code&gt;message$&lt;/code&gt;) to a view with the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe.</source>
          <target state="translated">以下代码示例使用 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道将可观察到的消息字符串（ &lt;code&gt;message$&lt;/code&gt; ）绑定到视图。</target>
        </trans-unit>
        <trans-unit id="944943590bdc4de5c8de2d0b7552a7f08e445f6e" translate="yes" xml:space="preserve">
          <source>The following code example shows two component definitions:</source>
          <target state="translated">下面的代码示例显示了两个组件定义。</target>
        </trans-unit>
        <trans-unit id="bc98599fa439c892b8ee3bde3044cd007c164e5f" translate="yes" xml:space="preserve">
          <source>The following code filters for request URLs with no extensions and treats them as navigation requests.</source>
          <target state="translated">以下代码过滤了没有扩展名的请求URL,并将其视为导航请求。</target>
        </trans-unit>
        <trans-unit id="b62717a01c0ebe8dcbd15846d84cdba0d340a646" translate="yes" xml:space="preserve">
          <source>The following code from the example shows the setup in the root module.</source>
          <target state="translated">下面的示例代码显示了根模块中的设置。</target>
        </trans-unit>
        <trans-unit id="232a93911c7f9e165be968ea82fb38e17cc7aba4" translate="yes" xml:space="preserve">
          <source>The following code in the component file (&lt;code&gt;app.component.ts&lt;/code&gt;) uses an environment variable defined in the configuration files.</source>
          <target state="translated">组件文件（ &lt;code&gt;app.component.ts&lt;/code&gt; ）中的以下代码使用配置文件中定义的环境变量。</target>
        </trans-unit>
        <trans-unit id="a259128394545a0cdd616395eda9a258c0d5a746" translate="yes" xml:space="preserve">
          <source>The following code listens to the &lt;code&gt;keyup&lt;/code&gt; event and passes the entire event payload (&lt;code&gt;$event&lt;/code&gt;) to the component event handler.</source>
          <target state="translated">以下代码侦听 &lt;code&gt;keyup&lt;/code&gt; 事件，并将整个事件有效载荷（ &lt;code&gt;$event&lt;/code&gt; ）传递给组件事件处理程序。</target>
        </trans-unit>
        <trans-unit id="54f666028961c7601a6ac4549faa071dafb7e5c5" translate="yes" xml:space="preserve">
          <source>The following code shows how a class subscribes to router events.</source>
          <target state="translated">下面的代码显示了一个类如何订阅路由器事件。</target>
        </trans-unit>
        <trans-unit id="b6ee722ae2338abfea4bf64cfdf2b4e4a323bf4f" translate="yes" xml:space="preserve">
          <source>The following code shows how the pipe transforms numbers into text strings, according to various format specifications, where the caller's default locale is &lt;code&gt;en-US&lt;/code&gt;.</source>
          <target state="translated">以下代码显示了管道如何根据各种格式规范将数字转换为文本字符串，其中调用者的默认语言环境为 &lt;code&gt;en-US&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9169bce6fd95909d94bce497bf7fe756a737b5f" translate="yes" xml:space="preserve">
          <source>The following code shows the complete implementation of &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;, which extends &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; to inherit its characteristics. The example shows that you don't have to change anything else&amp;mdash;the only difference is setting the &lt;code&gt;pure&lt;/code&gt; flag as &lt;code&gt;false&lt;/code&gt; in the pipe metadata.</source>
          <target state="translated">以下代码显示了 &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; 的完整实现，该实现扩展了 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 以继承其特征。该示例表明您无需更改任何其他内容&amp;ndash;唯一的区别是在管道元数据中将 &lt;code&gt;pure&lt;/code&gt; 标志设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1572d276e3e8a623d34b2dfb6a97d7ddcc66232f" translate="yes" xml:space="preserve">
          <source>The following code shows two examples in &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">以下代码显示 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 中的两个示例。</target>
        </trans-unit>
        <trans-unit id="ca561d6e698b6ce6c7a5587a06ea7b5eae7cb485" translate="yes" xml:space="preserve">
          <source>The following code snippet binds the trigger to the value of the &lt;code&gt;isOpen&lt;/code&gt; property.</source>
          <target state="translated">以下代码片段将触发器绑定到 &lt;code&gt;isOpen&lt;/code&gt; 属性的值。</target>
        </trans-unit>
        <trans-unit id="32ca63854052fa10af413f92da12af47fa20fa26" translate="yes" xml:space="preserve">
          <source>The following code snippet defines a reusable animation named &lt;code&gt;slideInAnimation&lt;/code&gt;.</source>
          <target state="translated">以下代码片段定义了一个名为 &lt;code&gt;slideInAnimation&lt;/code&gt; 的可重用动画。</target>
        </trans-unit>
        <trans-unit id="d17bb68d10f427ddf4a4632d3ac1379a666c167a" translate="yes" xml:space="preserve">
          <source>The following code snippets illustrate how the same kind of operation is defined using observables and promises.</source>
          <target state="translated">下面的代码片段说明了如何使用观测值和承诺来定义同一种操作。</target>
        </trans-unit>
        <trans-unit id="77c06d585e1c57c62a339f4be318d4b09751da75" translate="yes" xml:space="preserve">
          <source>The following command creates a new schematic named &lt;code&gt;hello-world&lt;/code&gt; in a new project folder of the same name.</source>
          <target state="translated">以下命令在同名的新项目文件夹中创建一个名为 &lt;code&gt;hello-world&lt;/code&gt; 的新原理图。</target>
        </trans-unit>
        <trans-unit id="d7dc620d5c50c64dafc6745227a4e03e0545f533" translate="yes" xml:space="preserve">
          <source>The following command uses the Angular CLI to generate a basic Angular app with an app routing module, called &lt;code&gt;AppRoutingModule&lt;/code&gt;, which is an NgModule where you can configure your routes. The app name in the following example is &lt;code&gt;routing-app&lt;/code&gt;.</source>
          <target state="translated">以下命令使用Angular CLI生成一个基本的Angular应用，其中包含一个名为 &lt;code&gt;AppRoutingModule&lt;/code&gt; 的应用路由模块，该模块是一个NgModule，您可以在其中配置路由。在以下示例中，应用程序名称为 &lt;code&gt;routing-app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5acc54feb882ebbac18464ca297042fc0ca8c059" translate="yes" xml:space="preserve">
          <source>The following component implements an input field for a single control, using reactive forms. In this example, the form model is the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">以下组件使用反应形式为单个控件实现一个输入字段。在此示例中，表单模型是 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="91c87e36e4dadbb4543baa1e1f887338a6ff8774" translate="yes" xml:space="preserve">
          <source>The following component implements the same input field for a single control, using template-driven forms.</source>
          <target state="translated">下面的组件使用模板驱动的表单,为单个控件实现了相同的输入字段。</target>
        </trans-unit>
        <trans-unit id="47e4f157bb24c73c005140ee31c2f0af5a539547" translate="yes" xml:space="preserve">
          <source>The following component uses a JSON pipe to convert an object to JSON format, and displays the string in both formats for comparison.</source>
          <target state="translated">以下组件使用JSON管道将对象转换为JSON格式,并以两种格式显示字符串进行比较。</target>
        </trans-unit>
        <trans-unit id="a4e73fb6567ee27bc5e536fab09dba759f3ae4ad" translate="yes" xml:space="preserve">
          <source>The following component uses a date pipe to display the current date in different formats.</source>
          <target state="translated">下面的组件使用日期管来显示不同格式的当前日期。</target>
        </trans-unit>
        <trans-unit id="c20b43358d59e5c00a015727d1c851c4cbec1dd1" translate="yes" xml:space="preserve">
          <source>The following configuration defines the possible routes for the application.</source>
          <target state="translated">下面的配置定义了应用程序可能的路由。</target>
        </trans-unit>
        <trans-unit id="ca39f7a403d669b466851af463789f6e4308a101" translate="yes" xml:space="preserve">
          <source>The following configurations determine your requirements.</source>
          <target state="translated">以下配置决定了您的要求。</target>
        </trans-unit>
        <trans-unit id="37934d0845c28e4e189707be23ac4515a0438aa9" translate="yes" xml:space="preserve">
          <source>The following converts the previous example to retry the request before catching the error:</source>
          <target state="translated">下面将前面的例子转换为在发现错误之前重试请求。</target>
        </trans-unit>
        <trans-unit id="8258d45ac121784086056f6acff3cfa09c66cc88" translate="yes" xml:space="preserve">
          <source>The following cross validation examples show how to do the following:</source>
          <target state="translated">下面的交叉验证示例展示了如何进行以下操作。</target>
        </trans-unit>
        <trans-unit id="5d2058782c0a59d8185af68b28963481193d3751" translate="yes" xml:space="preserve">
          <source>The following decorators can declare Angular class types:</source>
          <target state="translated">以下装饰器可以声明Angular类的类型。</target>
        </trans-unit>
        <trans-unit id="b44b0135ecfd3641259d5c6556966fc2994b72cf" translate="yes" xml:space="preserve">
          <source>The following diagram captures all of the navigation options.</source>
          <target state="translated">下图体现了所有的导航选项。</target>
        </trans-unit>
        <trans-unit id="563510ccae86add1b61054ac67bd1da0863f8431" translate="yes" xml:space="preserve">
          <source>The following diagram is of an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on the same child component and shows the different parts of each:</source>
          <target state="translated">下图是同一子组件上的 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ，并显示了每个子组件的不同部分：</target>
        </trans-unit>
        <trans-unit id="591e8f32bccd8c8b57626b7087c74554befd117f" translate="yes" xml:space="preserve">
          <source>The following diagram represents the relationship between the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt; and its parent injectors as the previous paragraphs describe.</source>
          <target state="translated">下图表示了前面各段描述的 &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 及其父注入器之间的关系。</target>
        </trans-unit>
        <trans-unit id="26751bcaf4afd7af2879868c81908003d5733ad4" translate="yes" xml:space="preserve">
          <source>The following diagram shows the different parts of the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on the &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; child component.</source>
          <target state="translated">下图显示了 &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; 子组件上 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 的不同部分。</target>
        </trans-unit>
        <trans-unit id="ed076baca5f93bb827a0ebb7900fe0b5704ff542" translate="yes" xml:space="preserve">
          <source>The following diagram shows the four forms of data binding markup. Each form has a direction: to the DOM, from the DOM, or both.</source>
          <target state="translated">下图显示了数据绑定标记的四种形式。每种形式都有一个方向:到DOM,从DOM,或者两者都有。</target>
        </trans-unit>
        <trans-unit id="3ff2b63c1da7916f7659e48bbf8ccdc6bd4a5549" translate="yes" xml:space="preserve">
          <source>The following diagram shows this structure:</source>
          <target state="translated">下图显示了这种结构。</target>
        </trans-unit>
        <trans-unit id="9fa0d05a015dffbd3dbbf6348e7361b2ca025cfb" translate="yes" xml:space="preserve">
          <source>The following example adds a meaning:</source>
          <target state="translated">下面的例子增加了一个意思。</target>
        </trans-unit>
        <trans-unit id="3f4fd24519d8e834ff080d55e6e16761f7df4b09" translate="yes" xml:space="preserve">
          <source>The following example adds a method to the component class to update the value of the control to &lt;em&gt;Nancy&lt;/em&gt; using the &lt;code&gt;setValue()&lt;/code&gt; method.</source>
          <target state="translated">下面的示例向组件类添加一个方法，以使用 &lt;code&gt;setValue()&lt;/code&gt; 方法将控件的值更新为&lt;em&gt;Nancy&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b731d707c04b9ff277f25b650229ef6f45c476c3" translate="yes" xml:space="preserve">
          <source>The following example allows MainModule to use anything exported by &lt;code&gt;&lt;a href=&quot;../common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">以下示例允许MainModule使用 &lt;code&gt;&lt;a href=&quot;../common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 导出的任何内容：</target>
        </trans-unit>
        <trans-unit id="7e3d1e0a85720c04ef199ae72e6f46958ca6cce4" translate="yes" xml:space="preserve">
          <source>The following example allows the CommonModule to use the &lt;code&gt;NgFor&lt;/code&gt; directive.</source>
          <target state="translated">以下示例允许CommonModule使用 &lt;code&gt;NgFor&lt;/code&gt; 指令。</target>
        </trans-unit>
        <trans-unit id="45fe3ed797a186015a0cfa6d91a33480e11ad5a4" translate="yes" xml:space="preserve">
          <source>The following example applies a &lt;code&gt;background-color&lt;/code&gt; style to all &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; elements &lt;em&gt;inside&lt;/em&gt; the component, only if some ancestor element has the CSS class &lt;code&gt;theme-light&lt;/code&gt;.</source>
          <target state="translated">以下示例仅在某些祖先元素具有CSS类 &lt;code&gt;theme-light&lt;/code&gt; 的情况下，将 &lt;code&gt;background-color&lt;/code&gt; 样式应用于组件&lt;em&gt;内&lt;/em&gt;的所有 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 元素。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcedff2617d143735174c4ca651ed186d806ae5d" translate="yes" xml:space="preserve">
          <source>The following example binds the &lt;code&gt;&lt;a href=&quot;observables-in-angular&quot;&gt;time&lt;/a&gt;&lt;/code&gt; observable to the component's view. The observable continuously updates the view with the current time.</source>
          <target state="translated">以下示例将可观察的 &lt;code&gt;&lt;a href=&quot;observables-in-angular&quot;&gt;time&lt;/a&gt;&lt;/code&gt; 绑定到组件的视图。可观察对象会用当前时间连续更新视图。</target>
        </trans-unit>
        <trans-unit id="4c04fe18ae9aa81dd238702d74da5b50a2583245" translate="yes" xml:space="preserve">
          <source>The following example binds the &lt;code&gt;time&lt;/code&gt; observable to the component's view. The observable continuously updates the view with the current time.</source>
          <target state="translated">下面的示例将可观察的 &lt;code&gt;time&lt;/code&gt; 绑定到组件的视图。可观察对象会以当前时间连续更新视图。</target>
        </trans-unit>
        <trans-unit id="bafa3ddbef652a6f97e49fffd0328f98ee3fcea1" translate="yes" xml:space="preserve">
          <source>The following example calls &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; to set a CSS style to different values for successive keyframes.</source>
          <target state="translated">以下示例调用 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 将CSS样式设置为连续的关键帧不同的值。</target>
        </trans-unit>
        <trans-unit id="0671a448ae63e4cb68f7209c639aa1632e6f7057" translate="yes" xml:space="preserve">
          <source>The following example calls &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; to set a single CSS style.</source>
          <target state="translated">以下示例调用 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 来设置单个CSS样式。</target>
        </trans-unit>
        <trans-unit id="dfb6d00028ff27179561f6fed50ebb86d09c8572" translate="yes" xml:space="preserve">
          <source>The following example creates a component displaying live data. The component detaches its change detector from the main change detector tree when the &lt;code&gt;live&lt;/code&gt; property is set to false, and reattaches it when the property becomes true.</source>
          <target state="translated">以下示例创建一个显示实时数据的组件。当 &lt;code&gt;live&lt;/code&gt; 属性设置为false时，组件将其更改检测器与主更改检测器树分离，并在该属性变为true时将其重新附加。</target>
        </trans-unit>
        <trans-unit id="f5b7e02751c775b6689a5a269eedf3d607677675" translate="yes" xml:space="preserve">
          <source>The following example creates a component with two data-bound properties, specified by the &lt;code&gt;inputs&lt;/code&gt; value.</source>
          <target state="translated">以下示例创建一个具有两个数据绑定属性的组件，这些属性由 &lt;code&gt;inputs&lt;/code&gt; 值指定。</target>
        </trans-unit>
        <trans-unit id="4a138338fc9f07d95c1f950a00fae4a52cc4f81e" translate="yes" xml:space="preserve">
          <source>The following example creates a component with two data-bound properties.</source>
          <target state="translated">下面的示例创建了一个具有两个数据绑定属性的组件。</target>
        </trans-unit>
        <trans-unit id="0f0ff213b825e8918f93f78a47edd9c9a56bde24" translate="yes" xml:space="preserve">
          <source>The following example creates a component with two input properties, one of which is given a special binding name.</source>
          <target state="translated">下面的例子创建了一个具有两个输入属性的组件,其中一个属性被赋予了一个特殊的绑定名称。</target>
        </trans-unit>
        <trans-unit id="0c51372431a03bd36f35d2c48736c377de868f16" translate="yes" xml:space="preserve">
          <source>The following example creates a directive that sets the &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;invalid&lt;/code&gt; properties on the DOM element that has an &lt;code&gt;&lt;a href=&quot;../forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive on it.</source>
          <target state="translated">以下示例创建一个指令，该指令在具有 &lt;code&gt;&lt;a href=&quot;../forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令的DOM元素上设置 &lt;code&gt;valid&lt;/code&gt; 和 &lt;code&gt;invalid&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="333a0212a994822e8ab4992b9f7ed1b517596272" translate="yes" xml:space="preserve">
          <source>The following example creates an &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; configured to create &lt;code&gt;Engine&lt;/code&gt; and &lt;code&gt;Car&lt;/code&gt;.</source>
          <target state="translated">以下示例创建一个配置为创建 &lt;code&gt;Engine&lt;/code&gt; 和 &lt;code&gt;Car&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="261fd3f531a548336b8cf0d6d57d647deef38d68" translate="yes" xml:space="preserve">
          <source>The following example creates an animation trigger reference based on the provided name value. The provided animation value is expected to be an array consisting of state and transition declarations.</source>
          <target state="translated">下面的示例根据提供的名称值创建了一个动画触发引用。提供的动画值应该是一个由状态和过渡声明组成的数组。</target>
        </trans-unit>
        <trans-unit id="3e167dc197936d169a63ff9f25201dd911edd390" translate="yes" xml:space="preserve">
          <source>The following example creates the NgModule for a browser platform.</source>
          <target state="translated">下面的例子是为浏览器平台创建NgModule。</target>
        </trans-unit>
        <trans-unit id="3277b779a9456f491e177e8fe52fa5751e71048c" translate="yes" xml:space="preserve">
          <source>The following example declares a directive that attaches a click listener to a button and counts clicks.</source>
          <target state="translated">下面的例子声明了一个指令,该指令将一个点击监听器附加到一个按钮上并计算点击次数。</target>
        </trans-unit>
        <trans-unit id="504d46b60ab6517d99f721584f7a281f08c56708" translate="yes" xml:space="preserve">
          <source>The following example defines a class that is injected in the HelloWorld NgModule:</source>
          <target state="translated">下面的例子定义了一个被注入到HelloWorld NgModule中的类。</target>
        </trans-unit>
        <trans-unit id="385249fea62104b3bc69d09ea2ae99a43dc7cb10" translate="yes" xml:space="preserve">
          <source>The following example defines a component with a large list of read-only data that is expected to change constantly, many times per second. To improve performance, we want to check and update the list less often than the changes actually occur. To do that, we detach the component's change detector and perform an explicit local check every five seconds.</source>
          <target state="translated">下面的例子定义了一个组件,该组件有一个大型的只读数据列表,该列表预计会不断变化,每秒变化多次。为了提高性能,我们希望检查和更新列表的频率低于实际发生的变化。要做到这一点,我们分离组件的变化检测器,并每五秒执行一次显式的本地检查。</target>
        </trans-unit>
        <trans-unit id="6e6eb011e3e72553c3a4d874fcea4f9f80ad1046" translate="yes" xml:space="preserve">
          <source>The following example defines a custom matcher function for AngularJS routes.</source>
          <target state="translated">下面的例子为AngularJS路由定义了一个自定义匹配器函数。</target>
        </trans-unit>
        <trans-unit id="6a3036da832689739a091b0f5b4fbe8cbce113b6" translate="yes" xml:space="preserve">
          <source>The following example defines a reusable animation, providing some default parameter values.</source>
          <target state="translated">下面的例子定义了一个可重复使用的动画,提供了一些默认的参数值。</target>
        </trans-unit>
        <trans-unit id="c4be5375d4ae1b710f5883a9b833a341dfa60738" translate="yes" xml:space="preserve">
          <source>The following example defines a transition that starts by hiding the element, then makes sure that it animates properly to whatever state is currently active for trigger:</source>
          <target state="translated">下面的例子定义了一个过渡,首先隐藏元素,然后确保它正确地动画化到当前触发器的任何状态。</target>
        </trans-unit>
        <trans-unit id="59d269fe60be0cf59ef8983da7cfaf8a22a3507d" translate="yes" xml:space="preserve">
          <source>The following example defines a view that allows the user to enter text, and then uses the pipe to convert the input text to all lower case.</source>
          <target state="translated">下面的例子定义了一个视图,允许用户输入文本,然后使用管道将输入的文本转换为全小写。</target>
        </trans-unit>
        <trans-unit id="de85f7b251499fdbddb9828b1c8a500e43ecd131" translate="yes" xml:space="preserve">
          <source>The following example defines an error handler in the previously defined &lt;a href=&quot;http#config-service&quot;&gt;ConfigService&lt;/a&gt;.</source>
          <target state="translated">下面的示例在先前定义的&lt;a href=&quot;http#config-service&quot;&gt;ConfigService中&lt;/a&gt;定义一个错误处理程序。</target>
        </trans-unit>
        <trans-unit id="2dd01b7d1d707577758b12b7d6fc268e56d4a131" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; functions on the entry of an animated element.</source>
          <target state="translated">下面的示例演示如何在动画元素的条目上使用 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="e5ef1ffd5f6872d82c8f5eb05e935bc0c0603c90" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the proper sequence.</source>
          <target state="translated">下面的例子展示了正确的顺序。</target>
        </trans-unit>
        <trans-unit id="377c3b4ed328075137db38354abc57c58a5b4a94" translate="yes" xml:space="preserve">
          <source>The following example exports the &lt;code&gt;NgFor&lt;/code&gt; directive from CommonModule.</source>
          <target state="translated">以下示例从CommonModule 导出 &lt;code&gt;NgFor&lt;/code&gt; 指令。</target>
        </trans-unit>
        <trans-unit id="8ec43848bb22f931f54c78e2adc9c33e204c2ff9" translate="yes" xml:space="preserve">
          <source>The following example features an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; where a user can enter a value and click a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; that raises an event. The &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; then relays the data to the parent component.</source>
          <target state="translated">以下示例具有 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 的功能，用户可以在其中输入值并单击引发事件的 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 。然后， &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 将数据中继到父组件。</target>
        </trans-unit>
        <trans-unit id="7c2c37760771f2d4e3d4a9c840bfb0e78addacbb" translate="yes" xml:space="preserve">
          <source>The following example has a trigger called &lt;code&gt;shrinkOut&lt;/code&gt;, used when an HTML element leaves the page. The animation takes whatever height the element has before it leaves, and animates from that height to zero.</source>
          <target state="translated">下面的示例有一个称为 &lt;code&gt;shrinkOut&lt;/code&gt; 的触发器，当HTML元素离开页面时使用。动画采用元素离开之前具有的高度，并从该高度动画为零。</target>
        </trans-unit>
        <trans-unit id="80671a11690d1c6494820edc2f6918cd9870b63f" translate="yes" xml:space="preserve">
          <source>The following example illustrates this technique with the same &lt;a href=&quot;component-interaction#countdown-timer-example&quot;&gt;Countdown Timer&lt;/a&gt; example. Neither its appearance nor its behavior will change. The child &lt;a href=&quot;component-interaction#countdown-timer-example&quot;&gt;CountdownTimerComponent&lt;/a&gt; is the same as well.</source>
          <target state="translated">以下示例使用相同的&lt;a href=&quot;component-interaction#countdown-timer-example&quot;&gt;倒数计时器&lt;/a&gt;示例说明了此技术。它的外观和行为都不会改变。子&lt;a href=&quot;component-interaction#countdown-timer-example&quot;&gt;CountdownTimerComponent&lt;/a&gt;也相同。</target>
        </trans-unit>
        <trans-unit id="f2c958ac19c1f229e0c9f4de4229570b20e7b798" translate="yes" xml:space="preserve">
          <source>The following example implementation matches HTML files.</source>
          <target state="translated">以下实施例匹配HTML文件。</target>
        </trans-unit>
        <trans-unit id="0bde1488f5ed2afee2dd79346076b401b722545f" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; function that checks whether the current user has permission to activate the requested route.</source>
          <target state="translated">下面的示例实现一个 &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 函数，该函数检查当前用户是否具有激活所请求路由的权限。</target>
        </trans-unit>
        <trans-unit id="c9c16cff4c4c72cc796f626ff5b6981cb670f366" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; function that checks whether the current user has permission to activate the requested child route.</source>
          <target state="translated">下面的示例实现一个 &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; 函数，该函数检查当前用户是否有权激活请求的子路由。</target>
        </trans-unit>
        <trans-unit id="d6690dc4e20a6bde732de2f6cb912585b4590cf4" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; function that checks whether the current user has permission to deactivate the requested route.</source>
          <target state="translated">下面的示例实现一个 &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 函数，该函数检查当前用户是否具有停用请求的路由的权限。</target>
        </trans-unit>
        <trans-unit id="2ee3507c685538c2dd0613e2b0dafb884a01255d" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; function that decides whether the current user has permission to load requested child routes.</source>
          <target state="translated">下面的示例实现一个 &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 函数，该函数确定当前用户是否有权加载请求的子路由。</target>
        </trans-unit>
        <trans-unit id="30ed014fa8f93ea875391728f160d5fe44d9e077" translate="yes" xml:space="preserve">
          <source>The following example implements a &lt;code&gt;resolve()&lt;/code&gt; method that retrieves the data needed to activate the requested route.</source>
          <target state="translated">以下示例实现了 &lt;code&gt;resolve()&lt;/code&gt; 方法，该方法检索激活请求的路由所需的数据。</target>
        </trans-unit>
        <trans-unit id="2c3792394410d254743db935a2aab67da86c1faa" translate="yes" xml:space="preserve">
          <source>The following example implements the &lt;code&gt;&lt;a href=&quot;asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; interface to create an async validator directive with a custom error key.</source>
          <target state="translated">以下示例实现 &lt;code&gt;&lt;a href=&quot;asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; 接口，以使用自定义错误密钥创建异步验证程序指令。</target>
        </trans-unit>
        <trans-unit id="035c3ba944d5fe1b15a68ebe378593a7d721c291" translate="yes" xml:space="preserve">
          <source>The following example implements the &lt;code&gt;&lt;a href=&quot;validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; interface to create a validator directive with a custom error key.</source>
          <target state="translated">以下示例实现了 &lt;code&gt;&lt;a href=&quot;validator&quot;&gt;Validator&lt;/a&gt;&lt;/code&gt; 接口，以使用自定义错误键创建Validator指令。</target>
        </trans-unit>
        <trans-unit id="5eb87a08cab370632dc43d4ddfafe2891498ebc8" translate="yes" xml:space="preserve">
          <source>The following example initializes a component with route information extracted from the snapshot of the root node at the time of creation.</source>
          <target state="translated">下面的示例使用创建时从根节点快照中提取的路由信息初始化了一个组件。</target>
        </trans-unit>
        <trans-unit id="3ef52a0e90fba19edb4803bf4f6127977778df17" translate="yes" xml:space="preserve">
          <source>The following example initializes the control using an options object.</source>
          <target state="translated">以下示例使用选项对象初始化了控件。</target>
        </trans-unit>
        <trans-unit id="42da70226282f1977da6d7ab28f8de7521500fdd" translate="yes" xml:space="preserve">
          <source>The following example initializes the control with a form state object. The &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;disabled&lt;/code&gt; keys are required in this case.</source>
          <target state="translated">下面的示例使用窗体状态对象初始化控件。在这种情况下，必须使用 &lt;code&gt;value&lt;/code&gt; 键和 &lt;code&gt;disabled&lt;/code&gt; 键。</target>
        </trans-unit>
        <trans-unit id="a2bb4e5bcae5441af519dafa4dbfbb031b95886b" translate="yes" xml:space="preserve">
          <source>The following example initializes the control with a sync validator.</source>
          <target state="translated">下面的例子是用同步验证器初始化控件。</target>
        </trans-unit>
        <trans-unit id="3b75e86861a97b045bc93ed007c41a8143776dfe" translate="yes" xml:space="preserve">
          <source>The following example of non-tree-shakable providers in Angular configures a service provider for the injector of an NgModule.</source>
          <target state="translated">下面是Angular中的非树状可动摇提供者的例子,它为NgModule的注入器配置了一个服务提供者。</target>
        </trans-unit>
        <trans-unit id="ec9e15e6d86e0c21d5745d7731be95a7ec60e570" translate="yes" xml:space="preserve">
          <source>The following example of the long form is from the JSON schema for the schematic that the CLI uses to &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;generate applications&lt;/a&gt;. It defines the prompt that allows users to choose which style preprocessor they want to use for the application being created. By using the long form, the schematic can provide more explicit formatting of the menu choices.</source>
          <target state="translated">下面的长格式示例来自CLI用来&lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;生成应用程序&lt;/a&gt;的逻辑示意图的JSON模式。它定义了提示，允许用户选择要用于正在创建的应用程序的样式预处理器。通过使用长格式，原理图可以提供菜单选项的更明确的格式。</target>
        </trans-unit>
        <trans-unit id="4f37dc68477f1bcc7af7bb9d791a86fea3c7c903" translate="yes" xml:space="preserve">
          <source>The following example puts &lt;code&gt;MinimalLogger&lt;/code&gt; to use in a simplified version of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">以下示例将 &lt;code&gt;MinimalLogger&lt;/code&gt; 用于简化版的 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="6e9fea711c729f49958474fdb5f92f9b366656d5" translate="yes" xml:space="preserve">
          <source>The following example queries for inner elements and animates them individually using &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">以下示例查询内部元素，并使用 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 分别对其进行动画处理。</target>
        </trans-unit>
        <trans-unit id="f694530f5219eedcd4de38cb0d70bea2e6819f53" translate="yes" xml:space="preserve">
          <source>The following example re-implements the previous test with &lt;code&gt;DebugElement.query()&lt;/code&gt; and the browser's &lt;code&gt;By.css&lt;/code&gt; method.</source>
          <target state="translated">下面的示例使用 &lt;code&gt;DebugElement.query()&lt;/code&gt; 和浏览器的 &lt;code&gt;By.css&lt;/code&gt; 方法重新实现以前的测试。</target>
        </trans-unit>
        <trans-unit id="3382236c8e2f90c0af65e6c8d53fd60d3630e149" translate="yes" xml:space="preserve">
          <source>The following example registers a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; with first name and last name controls, and listens for the &lt;em&gt;ngSubmit&lt;/em&gt; event when the button is clicked.</source>
          <target state="translated">下面的示例使用名字和姓氏控件注册一个 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; ，并在单击按钮时侦听&lt;em&gt;ngSubmit&lt;/em&gt;事件。</target>
        </trans-unit>
        <trans-unit id="7d806233c265cf7577c4168fb2ec4e2bbcf34c20" translate="yes" xml:space="preserve">
          <source>The following example registers a custom validator directive. Adding the validator to the existing collection of validators requires the &lt;code&gt;multi: true&lt;/code&gt; option.</source>
          <target state="translated">下面的示例注册一个自定义验证程序指令。将验证器添加到现有的验证器集合中需要使用 &lt;code&gt;multi: true&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="01ae3fed79d829eaaae19c04e6f33068fa10cc52" translate="yes" xml:space="preserve">
          <source>The following example registers a nested &lt;em&gt;name&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; within an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and provides methods to retrieve the nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and individual controls.</source>
          <target state="translated">下面的示例在现有 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 中注册一个嵌套&lt;em&gt;名称&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; ，并提供检索嵌套 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和各个控件的方法。</target>
        </trans-unit>
        <trans-unit id="b5fc93b65bd63a01c4718e5f76612eff4c955c45" translate="yes" xml:space="preserve">
          <source>The following example registers another DOM event handler that listens for key-press events.</source>
          <target state="translated">下面的例子注册了另一个监听按键事件的DOM事件处理程序。</target>
        </trans-unit>
        <trans-unit id="322a6b3ef3f219a7bbd14499563b3ea72dcbac17" translate="yes" xml:space="preserve">
          <source>The following example returns a control with an initial value in a disabled state.</source>
          <target state="translated">下面的例子是返回一个初始值为禁用状态的控件。</target>
        </trans-unit>
        <trans-unit id="bd9a13546ebb781b29fe8fced2d785a6e6d63b38" translate="yes" xml:space="preserve">
          <source>The following example rewrites the method with types:</source>
          <target state="translated">下面的例子是用类型重写方法。</target>
        </trans-unit>
        <trans-unit id="c6ec9dd1508ebf2608cf1ab6c08758e8aba93be1" translate="yes" xml:space="preserve">
          <source>The following example sets the &lt;code&gt;OnPush&lt;/code&gt; change-detection strategy for a component (&lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt;, rather than the default &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt;), then forces a second check after an interval. See &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;live demo&lt;/a&gt;.</source>
          <target state="translated">以下示例为组件（ &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; ，而不是默认的 &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; ）设置组件的 &lt;code&gt;OnPush&lt;/code&gt; 更改检测策略，然后在间隔之后强制执行第二次检查。观看&lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;现场演示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="176b987e54c53c61b674500333ce29ebfaf895b0" translate="yes" xml:space="preserve">
          <source>The following example sets the &lt;code&gt;OnPush&lt;/code&gt; change-detection strategy for a component (&lt;code&gt;CheckOnce&lt;/code&gt;, rather than the default &lt;code&gt;CheckAlways&lt;/code&gt;), then forces a second check after an interval. See &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;live demo&lt;/a&gt;.</source>
          <target state="translated">下面的示例为组件（ &lt;code&gt;CheckOnce&lt;/code&gt; ，而不是默认的 &lt;code&gt;CheckAlways&lt;/code&gt; ）设置组件的 &lt;code&gt;OnPush&lt;/code&gt; 更改检测策略，然后在间隔之后强制执行第二次检查。观看&lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;现场演示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="82aad8e63e1fb2e5e4cb8c0d93a974a17106eb21" translate="yes" xml:space="preserve">
          <source>The following example shows &lt;code&gt;NgFor&lt;/code&gt; applied to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以下示例显示了将 &lt;code&gt;NgFor&lt;/code&gt; 应用于简单的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b7471662574d24b0b47321a72e97d944e3b5e0c" translate="yes" xml:space="preserve">
          <source>The following example shows &lt;code&gt;NgFor&lt;/code&gt; applied to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. (Don't forget the asterisk (&lt;code&gt;*&lt;/code&gt;) in front of &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">以下示例显示了将 &lt;code&gt;NgFor&lt;/code&gt; 应用于简单的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 。（不要忘记 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 前面的星号（ &lt;code&gt;*&lt;/code&gt; ）。）</target>
        </trans-unit>
        <trans-unit id="d68000c7fea362289b489d24fd97b1dc2dbbceb3" translate="yes" xml:space="preserve">
          <source>The following example shows a class constructor that specifies a custom provider of a dependency using the parameter decorator.</source>
          <target state="translated">下面的示例显示了一个类构造函数,它使用参数装饰器指定了依赖关系的自定义提供者。</target>
        </trans-unit>
        <trans-unit id="c562dfbb69c1a98a82e37e0a6c0f37cf9ac5b1f6" translate="yes" xml:space="preserve">
          <source>The following example shows an event binding that implements a click handler:</source>
          <target state="translated">下面的例子显示了一个实现点击处理程序的事件绑定。</target>
        </trans-unit>
        <trans-unit id="827b0895f274d258fe81610150a89118db592505" translate="yes" xml:space="preserve">
          <source>The following example shows both translation units after translating:</source>
          <target state="translated">下面的例子显示了两个翻译单位翻译后的情况。</target>
        </trans-unit>
        <trans-unit id="38acb08759fa7468886194d08506e9a0ce5417d4" translate="yes" xml:space="preserve">
          <source>The following example shows controls using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; within a form:</source>
          <target state="translated">以下示例显示了在表单中使用 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的控件：</target>
        </trans-unit>
        <trans-unit id="0d5715ce74957eecb1458b1165c7db883217a11a" translate="yes" xml:space="preserve">
          <source>The following example shows how a component is initialized with information from the snapshot of the root node's state at the time of creation.</source>
          <target state="translated">下面的例子显示了如何使用创建时根节点状态快照的信息来初始化组件。</target>
        </trans-unit>
        <trans-unit id="e1e7f20571895e868a1c8bbfb2febc742c23aa30" translate="yes" xml:space="preserve">
          <source>The following example shows how a service class is properly marked so that a supporting service can be injected upon creation.</source>
          <target state="translated">下面的例子显示了如何正确标记服务类,以便在创建时可以注入支持服务。</target>
        </trans-unit>
        <trans-unit id="be72fc12fe5cf4dad5083e92e226c1dd40573ed3" translate="yes" xml:space="preserve">
          <source>The following example shows how cases can be nested:</source>
          <target state="translated">下面的例子展示了如何嵌套案例。</target>
        </trans-unit>
        <trans-unit id="2b046373177ebf89ea2deca1d2f5103060b13b2b" translate="yes" xml:space="preserve">
          <source>The following example shows how queries are defined and when their results are available in lifecycle hooks:</source>
          <target state="translated">下面的例子显示了如何定义查询以及何时在生命周期钩子中获得查询结果。</target>
        </trans-unit>
        <trans-unit id="c077632398f31fdc18f53e137b5295be8371c9e1" translate="yes" xml:space="preserve">
          <source>The following example shows how the router can populate the &lt;code&gt;entryComponents&lt;/code&gt; field of an NgModule based on a router configuration that refers to components.</source>
          <target state="translated">以下示例显示路由器如何基于引用组件的路由器配置来填充 &lt;code&gt;entryComponents&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="63a7f69dde5a277969a1a4e4fe6f70e7f6051430" translate="yes" xml:space="preserve">
          <source>The following example shows how this works for the &lt;code&gt;LibHeaderComponent&lt;/code&gt;.</source>
          <target state="translated">以下示例显示了此方法对 &lt;code&gt;LibHeaderComponent&lt;/code&gt; 的工作方式。</target>
        </trans-unit>
        <trans-unit id="66e1fdebf35092f3863e2ae7d931c94e7887b327" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何在连接到ngModel绑定的输入中添加一个复选框所需的验证器。</target>
        </trans-unit>
        <trans-unit id="368867db6cc44008c62a0af9b4d9460201a18a2f" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a maximum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何将最大长度验证器添加到连接到ngModel绑定的输入中。</target>
        </trans-unit>
        <trans-unit id="d7fbccbb32b0f48876d290f593a4fb03cdd589f5" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a minimum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何在连接到ngModel绑定的输入中添加一个最小长度验证器。</target>
        </trans-unit>
        <trans-unit id="4f808c8af5c2d51dc9eb174377afd8b05d67af5d" translate="yes" xml:space="preserve">
          <source>The following example shows how to add a pattern validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何将模式验证器添加到连接到ngModel绑定的输入中。</target>
        </trans-unit>
        <trans-unit id="fff28e8f05131a85b2053d418fcdb7c05fec28f8" translate="yes" xml:space="preserve">
          <source>The following example shows how to add an email validator to an input attached to an ngModel binding.</source>
          <target state="translated">下面的示例显示了如何将电子邮件验证器添加到一个连接到ngModel绑定的输入中。</target>
        </trans-unit>
        <trans-unit id="1c6423f6e2b9133747ffa3e301b8f9cca3c1a40b" translate="yes" xml:space="preserve">
          <source>The following example shows how to build a dynamic ad banner.</source>
          <target state="translated">下面的例子展示了如何建立一个动态广告横幅。</target>
        </trans-unit>
        <trans-unit id="ee45e1a32fc4fd748ecba48456000a2fcf666eb2" translate="yes" xml:space="preserve">
          <source>The following example shows how to capture the form values from the &quot;ngSubmit&quot; event.</source>
          <target state="translated">下面的示例显示了如何从 &quot;ngSubmit &quot;事件中捕获表单值。</target>
        </trans-unit>
        <trans-unit id="a17c4cc6c273f2e36b72b19714be8b47409588fe" translate="yes" xml:space="preserve">
          <source>The following example shows how to construct a component using information from a currently activated route.</source>
          <target state="translated">下面的例子说明了如何使用当前激活的途径的信息来构建组件。</target>
        </trans-unit>
        <trans-unit id="6daf8cd22d12b0f67faa1ae29e1763c675f0abe5" translate="yes" xml:space="preserve">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;iterablediffer&quot;&gt;&lt;code&gt;IterableDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">以下示例显示了如何扩展现有工厂列表，该列表仅适用于该组件及其子组件的注射器。这是使新的&lt;a href=&quot;iterablediffer&quot;&gt; &lt;code&gt;IterableDiffer&lt;/code&gt; &lt;/a&gt;可用所需的全部步骤。</target>
        </trans-unit>
        <trans-unit id="83d90a3054ebd2d5ef9a349704d34a8e5393cb26" translate="yes" xml:space="preserve">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;keyvaluediffer&quot;&gt;&lt;code&gt;KeyValueDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">以下示例显示了如何扩展现有工厂列表，该列表仅适用于该组件及其子组件的注射器。这是使新的&lt;a href=&quot;keyvaluediffer&quot;&gt; &lt;code&gt;KeyValueDiffer&lt;/code&gt; &lt;/a&gt;可用所需的全部步骤。</target>
        </trans-unit>
        <trans-unit id="6b4c2655698aa0d2203e75b1289d0487cadd44e2" translate="yes" xml:space="preserve">
          <source>The following example shows how to find and focus the main content header in the DOM after navigation.</source>
          <target state="translated">下面的例子展示了如何在导航后的DOM中找到并聚焦主内容头。</target>
        </trans-unit>
        <trans-unit id="51b27d39b057cf93861bc4cc7466e579ed4f5751" translate="yes" xml:space="preserve">
          <source>The following example shows how to make a simple progress bar accessible by using host binding to control accessibility-related attributes.</source>
          <target state="translated">下面的例子展示了如何通过使用主机绑定来控制可访问性相关的属性,使一个简单的进度条可以被访问。</target>
        </trans-unit>
        <trans-unit id="c073c8370f0fb140a2c5b53a1c60c97c7e0c7fcd" translate="yes" xml:space="preserve">
          <source>The following example shows how to register a standalone control and set its value.</source>
          <target state="translated">下面的例子显示了如何注册一个独立的控件并设置其值。</target>
        </trans-unit>
        <trans-unit id="7a085757bc3f13deb2551df0f93cb8afa2b12e6b" translate="yes" xml:space="preserve">
          <source>The following example shows how to register multiple form controls within a form group and set their value.</source>
          <target state="translated">下面的示例显示了如何在一个表单组中注册多个表单控件并设置其值。</target>
        </trans-unit>
        <trans-unit id="753777b9371d3ae9ecb481a0c637e9a066a45072" translate="yes" xml:space="preserve">
          <source>The following example shows how to send and display a message each time the user clicks on a hero, showing a history of the user's selections. This will be helpful when you get to the next section on &lt;a href=&quot;toh-pt5&quot;&gt;Routing&lt;/a&gt;.</source>
          <target state="translated">以下示例显示了每次用户单击英雄时如何发送和显示消息，并显示用户选择的历史记录。当您转到&amp;ldquo;&lt;a href=&quot;toh-pt5&quot;&gt;路由&amp;rdquo;&lt;/a&gt;的下一部分时，这将很有帮助。</target>
        </trans-unit>
        <trans-unit id="930bda03e66eaebd95b1046a1962b91ce72793e6" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the &lt;code&gt;enableIvy&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; in order to opt out of Ivy.</source>
          <target state="translated">以下示例显示了如何将 &lt;code&gt;enableIvy&lt;/code&gt; 选项设置为 &lt;code&gt;false&lt;/code&gt; 以便退出Ivy。</target>
        </trans-unit>
        <trans-unit id="30eabaeacb625269edcf1666307b88665a375dcc" translate="yes" xml:space="preserve">
          <source>The following example shows how to set up an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; in a child component that pushes data from an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to an array in the parent component.</source>
          <target state="translated">下面的示例演示如何在子组件中设置 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ，以将数据从HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 推送到父组件中的数组。</target>
        </trans-unit>
        <trans-unit id="a4a8014d1e2c1017305a9a1388855d8f4840149a" translate="yes" xml:space="preserve">
          <source>The following example shows how to set up an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; in a child component that pushes data you enter in an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to an array in the parent component.</source>
          <target state="translated">下面的示例演示如何在子组件中设置 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ，以将您在HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 中输入的数据推入父组件中的数组。</target>
        </trans-unit>
        <trans-unit id="59c573eec5946e813c45e18762fdeb1633ef0ed4" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a checkbox with a reactive form.</source>
          <target state="translated">下面的例子展示了如何使用一个反应式表单的复选框。</target>
        </trans-unit>
        <trans-unit id="cc2f6dbf31261ec056919eb80f43040dc8866c26" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a number input with a reactive form.</source>
          <target state="translated">下面的例子展示了如何使用一个反应式表单的数字输入。</target>
        </trans-unit>
        <trans-unit id="cbeaaa1764396b191a1fa427696ca459afa3e019" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a range input with a reactive form.</source>
          <target state="translated">下面的例子显示了如何使用一个反应式表单的范围输入。</target>
        </trans-unit>
        <trans-unit id="2958492ec328342f9b159f183a274c8962939e29" translate="yes" xml:space="preserve">
          <source>The following example shows how to use an input element that activates the default value accessor (in this case, a text field).</source>
          <target state="translated">下面的例子显示了如何使用一个输入元素来激活默认值访问器(在这个例子中,一个文本字段)。</target>
        </trans-unit>
        <trans-unit id="1373b177c05a62a912a3ee24e9df3148944e063e" translate="yes" xml:space="preserve">
          <source>The following example shows how to use more than one case to display the same view:</source>
          <target state="translated">下面的例子显示了如何使用多个案例来显示同一个视图。</target>
        </trans-unit>
        <trans-unit id="57f6f5878666eda756817f7b7efb36774821b332" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this feature:</source>
          <target state="translated">下面的例子展示了如何使用该功能。</target>
        </trans-unit>
        <trans-unit id="6afcdea92b2f9be1919de79ba7cbfe3d0ac7d219" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this token to configure the root app injector with a base href value, so that the DI framework can supply the dependency anywhere in the app.</source>
          <target state="translated">下面的例子展示了如何使用这个令牌来配置根应用注入器的基础href值,以便DI框架可以在应用中的任何地方提供依赖性。</target>
        </trans-unit>
        <trans-unit id="21b73d4c6eefa6f6b8440ab7e8d3a63891d22e87" translate="yes" xml:space="preserve">
          <source>The following example shows how you can pipe a failed request to the &lt;code&gt;retry()&lt;/code&gt; operator before passing it to the error handler.</source>
          <target state="translated">下面的示例说明如何将失败的请求传递给 &lt;code&gt;retry()&lt;/code&gt; 运算符，然后再将其传递给错误处理程序。</target>
        </trans-unit>
        <trans-unit id="4e3a34aedb9bfaf54b7c7dd0dfc38839f2bb3bda" translate="yes" xml:space="preserve">
          <source>The following example shows how you modify the &lt;code&gt;server.ts&lt;/code&gt; file to provide the &lt;code&gt;AppServerModuleNgFactory&lt;/code&gt; as the bootstrap module.</source>
          <target state="translated">以下示例显示如何修改 &lt;code&gt;server.ts&lt;/code&gt; 文件以将 &lt;code&gt;AppServerModuleNgFactory&lt;/code&gt; 提供为引导模块。</target>
        </trans-unit>
        <trans-unit id="ed75cbe6bb40317bb4bb2c531bc2db64f9e0314d" translate="yes" xml:space="preserve">
          <source>The following example shows how, when an old token has expired, you can update the authorization header before making the next request.</source>
          <target state="translated">下面的示例展示了当一个旧令牌过期时,您如何在发出下一个请求之前更新授权头。</target>
        </trans-unit>
        <trans-unit id="5d099819839fc1d380d48e3ae14ffad753838d5c" translate="yes" xml:space="preserve">
          <source>The following example shows that &lt;code&gt;AppComponent&lt;/code&gt; declares its dependence on &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContext&lt;/code&gt;.</source>
          <target state="translated">下面的示例显示 &lt;code&gt;AppComponent&lt;/code&gt; 声明其对 &lt;code&gt;LoggerService&lt;/code&gt; 和 &lt;code&gt;UserContext&lt;/code&gt; 的依赖。</target>
        </trans-unit>
        <trans-unit id="e29f6dab32f69c4fc81f0d98153b2a1746783d30" translate="yes" xml:space="preserve">
          <source>The following example shows the &lt;code&gt;&quot;localize&quot;&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt; so that all locales defined in the build configuration are built:</source>
          <target state="translated">以下示例显示了在 &lt;code&gt;angular.json&lt;/code&gt; 中将 &lt;code&gt;&quot;localize&quot;&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; 的情况，从而构建了构建配置中定义的所有语言环境：</target>
        </trans-unit>
        <trans-unit id="9eab0e12b63f05899de75dd09db3f2df2fc6187d" translate="yes" xml:space="preserve">
          <source>The following example shows the result of transforming various strings into title case.</source>
          <target state="translated">下面的例子显示了将各种字符串转换为标题大小写的结果。</target>
        </trans-unit>
        <trans-unit id="997f1dc43f8aed6fbbf9fd368a2a5dd9ea934b79" translate="yes" xml:space="preserve">
          <source>The following example shows the shorthand syntax with some options, contained in an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">以下示例显示了 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素中包含一些选项的速记语法。</target>
        </trans-unit>
        <trans-unit id="a09b23068c66780f14d250956e96be5e43143ec4" translate="yes" xml:space="preserve">
          <source>The following example shows the tree-shakable equivalent to the &lt;code&gt;ServiceModule&lt;/code&gt; example above.</source>
          <target state="translated">下面的示例显示了与上面的 &lt;code&gt;ServiceModule&lt;/code&gt; 示例等效的可摇树的示例。</target>
        </trans-unit>
        <trans-unit id="1d184cef72e57c09334c7d9ea86b425dc3afa8c4" translate="yes" xml:space="preserve">
          <source>The following example shows two event emitters that emit on an interval. One emits an output every second, while the other emits every five seconds.</source>
          <target state="translated">下面的例子显示了两个事件发射器,它们在一个时间间隔内发射。其中一个每隔一秒发射一次,而另一个每隔五秒发射一次。</target>
        </trans-unit>
        <trans-unit id="4fa0134b226089dfa9e52f6ee7309d2a93b5af04" translate="yes" xml:space="preserve">
          <source>The following example shows you an alternate way to set the name attribute. Here, an attribute identified as name is used within a custom form control component. To still be able to specify the NgModel's name, you must specify it using the &lt;code&gt;ngModelOptions&lt;/code&gt; input instead.</source>
          <target state="translated">下面的示例向您展示了设置name属性的另一种方法。在此，在自定义表单控件组件中使用了标识为名称的属性。为了仍然能够指定NgModel的名称，您必须使用 &lt;code&gt;ngModelOptions&lt;/code&gt; 输入来指定它。</target>
        </trans-unit>
        <trans-unit id="1dffb0edfdea8768fda5ebffcf29790b5b84c38b" translate="yes" xml:space="preserve">
          <source>The following example shows you an alternate way to set the name attribute. The name attribute is used within a custom form component, and the name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; property serves a different purpose.</source>
          <target state="translated">以下示例显示了设置name属性的另一种方法。name属性用于自定义表单组件中，而name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 属性具有不同的用途。</target>
        </trans-unit>
        <trans-unit id="988b27a653275f3bff65878a5b895d72cd36c77e" translate="yes" xml:space="preserve">
          <source>The following example shows you how to change the &quot;updateOn&quot; option from its default using ngFormOptions.</source>
          <target state="translated">下面的例子显示了如何使用ngFormOptions更改默认的 &quot;updateOn &quot;选项。</target>
        </trans-unit>
        <trans-unit id="1e3b26c117fe86b059fd6e1a2232c67d9b63c33b" translate="yes" xml:space="preserve">
          <source>The following example shows you how to combine controls together in a sub-group of the form.</source>
          <target state="translated">下面的例子向您展示了如何将控件组合在表单的一个子组中。</target>
        </trans-unit>
        <trans-unit id="7d204404893de6271980acee275f77cae148739b" translate="yes" xml:space="preserve">
          <source>The following example shows you how to display the current value using interpolation in the template.</source>
          <target state="translated">下面的例子显示了如何在模板中使用内插法显示当前值。</target>
        </trans-unit>
        <trans-unit id="4e608b8fa3a6ec40fbf7c4e18bae5bb29410e2d4" translate="yes" xml:space="preserve">
          <source>The following example shows you how to manage an array of &lt;em&gt;aliases&lt;/em&gt; in &lt;code&gt;ProfileEditor&lt;/code&gt;.</source>
          <target state="translated">以下示例显示了如何在 &lt;code&gt;ProfileEditor&lt;/code&gt; 中管理&lt;em&gt;别名&lt;/em&gt;数组。</target>
        </trans-unit>
        <trans-unit id="9dc1f820ec5c4e31a3ed11dfe150c2b8b75987f2" translate="yes" xml:space="preserve">
          <source>The following example shows you how to use a standalone ngModel control within a form. This controls the display of the form, but doesn't contain form data.</source>
          <target state="translated">下面的例子展示了如何在表单中使用独立的ngModel控件。这控制了表单的显示,但不包含表单数据。</target>
        </trans-unit>
        <trans-unit id="0a96a492f032a547b6f9125b434d8ea060fd4733" translate="yes" xml:space="preserve">
          <source>The following example stores the provided function as an internal method.</source>
          <target state="translated">下面的例子将所提供的函数作为一个内部方法进行存储。</target>
        </trans-unit>
        <trans-unit id="dff5d128062231c449f19fedce3237c98b922507" translate="yes" xml:space="preserve">
          <source>The following example targets all &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements, from the host element down through this component to all of its child elements in the DOM.</source>
          <target state="translated">以下示例针对所有 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 元素，从主机元素一直到该组件，再到DOM中的所有子元素。</target>
        </trans-unit>
        <trans-unit id="fa3b01423ddb68412ec695cd4482c822e7a7e696" translate="yes" xml:space="preserve">
          <source>The following example tries to set the component's &lt;code&gt;template&lt;/code&gt; property to the value of the exported &lt;code&gt;someTemplate&lt;/code&gt; variable which is declared but &lt;em&gt;unassigned&lt;/em&gt;.</source>
          <target state="translated">以下示例尝试将组件的 &lt;code&gt;template&lt;/code&gt; 属性设置为已声明但未&lt;em&gt;分配&lt;/em&gt;的已导出 &lt;code&gt;someTemplate&lt;/code&gt; 变量的值。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="251fedbc0f6af371679f4fa156ce7e3909346a2e" translate="yes" xml:space="preserve">
          <source>The following example uses a template reference variable to implement a keystroke loopback in a simple template.</source>
          <target state="translated">下面的例子使用模板参考变量在一个简单的模板中实现了一个按键回环。</target>
        </trans-unit>
        <trans-unit id="44de5ab363b46660288190c053d7a6213ed61eaa" translate="yes" xml:space="preserve">
          <source>The following example uses auto-styling to allow a component to animate from a height of 0 up to the height of the parent element:</source>
          <target state="translated">下面的例子使用自动样式来允许一个组件从高度为0到父元素的高度的动画。</target>
        </trans-unit>
        <trans-unit id="069cb9c50eee1cb12d158d3323cefcaab458ccbe" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access individual controls within the group using dot syntax.</source>
          <target state="translated">下面的示例使用&lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt;方法使用点语法访问组中的各个控件。</target>
        </trans-unit>
        <trans-unit id="d4b4122ac3506b5e300f9fe1f7412e28b945f0eb" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access the associated &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">下面的示例使用&lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt;方法访问关联的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ec44a3326cea8016f405a38962d167a49282ce9" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;code&gt;ignore&lt;/code&gt; field to exclude certain files in the assets folder from being copied into the build:</source>
          <target state="translated">以下示例使用 &lt;code&gt;ignore&lt;/code&gt; 字段来排除资产文件夹中的某些文件被复制到构建中：</target>
        </trans-unit>
        <trans-unit id="3e56ffd819165612fe56a5992a4923c230d0d1e1" translate="yes" xml:space="preserve">
          <source>The following example uses the decorator in a component constructor.</source>
          <target state="translated">下面的例子在组件构造函数中使用了装饰器。</target>
        </trans-unit>
        <trans-unit id="a8c7463a3393222be8d46d4da5183bba8a942e94" translate="yes" xml:space="preserve">
          <source>The following example uses the decorator to inject the string literal &lt;code&gt;text&lt;/code&gt; in a directive.</source>
          <target state="translated">以下示例使用装饰器将字符串文字 &lt;code&gt;text&lt;/code&gt; 注入指令中。</target>
        </trans-unit>
        <trans-unit id="ca768a6447856248e05d7cc58b53fac8ddd37f3d" translate="yes" xml:space="preserve">
          <source>The following example uses the decorator to inject the string literal &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="translated">以下示例使用修饰符注入字符串文字 &lt;code&gt;text&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb5ef26847f4c6bb4576ebd5051a24fffc69f9b8" translate="yes" xml:space="preserve">
          <source>The following example writes a value to the native DOM element.</source>
          <target state="translated">下面的例子将一个值写入本地DOM元素。</target>
        </trans-unit>
        <trans-unit id="0448b018d57bb9f2222c8c20ea401d05a44b3304" translate="yes" xml:space="preserve">
          <source>The following example, the &lt;code&gt;searchHeroes()&lt;/code&gt; method queries for heroes whose names contain the search term.</source>
          <target state="translated">在以下示例中， &lt;code&gt;searchHeroes()&lt;/code&gt; 方法查询名称中包含搜索词的英雄。</target>
        </trans-unit>
        <trans-unit id="72f05bc4e050c0a036b7ee9e401d609482e4015f" translate="yes" xml:space="preserve">
          <source>The following examples create animation styles that collect a set of CSS property values:</source>
          <target state="translated">以下示例创建了收集一组CSS属性值的动画样式。</target>
        </trans-unit>
        <trans-unit id="459e7a5210520be2ebdc86dc38684f6553aa04d7" translate="yes" xml:space="preserve">
          <source>The following examples define transitions between the two defined states (and default states), using various options:</source>
          <target state="translated">下面的例子使用各种选项定义了两个定义状态(和默认状态)之间的转换。</target>
        </trans-unit>
        <trans-unit id="6c7c13798e2458b819d456bfdd01d7da3d7c6730" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate how to modify default change-detection behavior to perform explicit detection when needed.</source>
          <target state="translated">下面的例子演示了如何修改默认的变更检测行为,以便在需要时执行显式检测。</target>
        </trans-unit>
        <trans-unit id="266b3c28a99dcc0271b98aca24752e14498d4846" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate the call sequence and relative frequency of the various lifecycle events, and how the hooks can be used separately or together for components and directives.</source>
          <target state="translated">下面的例子演示了各种生命周期事件的调用顺序和相对频率,以及如何将钩子单独或一起用于组件和指令。</target>
        </trans-unit>
        <trans-unit id="a2dba34eb7491a58432ad4932be25b6ceb269f40" translate="yes" xml:space="preserve">
          <source>The following examples revisit two of the &lt;code&gt;TwainComponent&lt;/code&gt; tests with marble testing.</source>
          <target state="translated">以下示例通过大理石测试回顾了两个 &lt;code&gt;TwainComponent&lt;/code&gt; 测试。</target>
        </trans-unit>
        <trans-unit id="7ce6c370d2612e821d0b2613bfab293f81f00781" translate="yes" xml:space="preserve">
          <source>The following examples show a &lt;code&gt;.browserslistrc&lt;/code&gt; and &lt;code&gt;tsconfig.json&lt;/code&gt; file for a newly created Angular application. In this configuration, legacy browsers such as IE 9-11 are ignored, and the compilation target is ES2015.</source>
          <target state="translated">以下示例显示了新创建的Angular应用程序的 &lt;code&gt;.browserslistrc&lt;/code&gt; 和 &lt;code&gt;tsconfig.json&lt;/code&gt; 文件。在此配置中，将忽略诸如IE 9-11之类的旧版浏览器，并且编译目标为ES2015。</target>
        </trans-unit>
        <trans-unit id="fe4d1dc55bed59fbfefe7303b68660eabb2d82d0" translate="yes" xml:space="preserve">
          <source>The following examples show a simple standalone control using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">以下示例显示了一个使用 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的简单独立控件：</target>
        </trans-unit>
        <trans-unit id="40c3a547833ea48c38e9ba12166d16ea92ec9ffb" translate="yes" xml:space="preserve">
          <source>The following examples show how to add a single form control. In the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.</source>
          <target state="translated">下面的例子展示了如何添加单个表单控件。在这个例子中,用户在输入字段中输入自己的名字,捕获该输入值,并显示表单控件元素的当前值。</target>
        </trans-unit>
        <trans-unit id="5d6f06a8de95d33332632f7f30628896d5e665bb" translate="yes" xml:space="preserve">
          <source>The following examples show how to refactor the &lt;code&gt;ProfileEditor&lt;/code&gt; component to use the form builder service to create form control and form group instances.</source>
          <target state="translated">以下示例显示如何重构 &lt;code&gt;ProfileEditor&lt;/code&gt; 组件以使用表单构建器服务来创建表单控件和表单组实例。</target>
        </trans-unit>
        <trans-unit id="4fc88102b63983b94153026634db490e12748eb6" translate="yes" xml:space="preserve">
          <source>The following examples show how to use a select control in a reactive form.</source>
          <target state="translated">下面的例子展示了如何在反应式表单中使用选择控件。</target>
        </trans-unit>
        <trans-unit id="237f9f6e9900e6f0dc1fc654e095fe6275c71b7a" translate="yes" xml:space="preserve">
          <source>The following examples show various &lt;code&gt;timings&lt;/code&gt; specifications.</source>
          <target state="translated">以下示例显示了各种 &lt;code&gt;timings&lt;/code&gt; 规范。</target>
        </trans-unit>
        <trans-unit id="5f4d2b0076660bb96fee07f703fa6b241bb56e96" translate="yes" xml:space="preserve">
          <source>The following examples shows how to register a standalone control and set its value.</source>
          <target state="translated">下面的例子展示了如何注册一个独立的控件并设置其值。</target>
        </trans-unit>
        <trans-unit id="8514f98ee54c6d7f9e2628e3962d79053cdd4d14" translate="yes" xml:space="preserve">
          <source>The following exported values can be aliased to local variables:</source>
          <target state="translated">以下导出的值可以被别名为本地变量。</target>
        </trans-unit>
        <trans-unit id="48152eb7bf1f90cbf4d34795f898cd8c86489514" translate="yes" xml:space="preserve">
          <source>The following figure shows the final form.</source>
          <target state="translated">下图为最终形式。</target>
        </trans-unit>
        <trans-unit id="62e616b6d0095e3bb10360974145d786228761d7" translate="yes" xml:space="preserve">
          <source>The following format message in the component template binds to the component's &lt;code&gt;gender&lt;/code&gt; property, which outputs one of the following string values: &quot;male&quot;, &quot;female&quot; or &quot;other&quot;. The message maps those values to the appropriate translations:</source>
          <target state="translated">组件模板中的以下格式消息绑定到组件的 &lt;code&gt;gender&lt;/code&gt; 属性，该属性输出以下字符串值之一：&amp;ldquo; male&amp;rdquo;，&amp;ldquo; female&amp;rdquo;或&amp;ldquo; other&amp;rdquo;。该消息将这些值映射到适当的转换：</target>
        </trans-unit>
        <trans-unit id="cd2c50363a1ac131bdc0802c1585f2ee2c72aede" translate="yes" xml:space="preserve">
          <source>The following fragment shows how a component gets the root node of the current state to establish its own route tree:</source>
          <target state="translated">下面的片段展示了组件如何获取当前状态的根节点来建立自己的路由树。</target>
        </trans-unit>
        <trans-unit id="257cd6c433a723247e55e6b1ea41d9b5ac15489c" translate="yes" xml:space="preserve">
          <source>The following hooks take action based on changing values &lt;em&gt;within the child view&lt;/em&gt;, which can only be reached by querying for the child view via the property decorated with &lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChild&lt;/a&gt;.</source>
          <target state="translated">以下挂钩根据更改&lt;em&gt;子视图中的&lt;/em&gt;值来执行操作，只有通过使用&lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChild&lt;/a&gt;装饰的属性查询子视图才能实现此操作。</target>
        </trans-unit>
        <trans-unit id="e81974601b5eeac5fe055890e3562d697f17cbf9" translate="yes" xml:space="preserve">
          <source>The following image shows the effect of mousing over the &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">下图显示了将鼠标悬停在 &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; 标签上的效果。</target>
        </trans-unit>
        <trans-unit id="0be1b281c327a57359a32dbec200dbb405ead34f" translate="yes" xml:space="preserve">
          <source>The following invokes the defined animation with a call to &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt;, passing in override parameter values.</source>
          <target state="translated">以下代码通过调用 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 来调用已定义的动画，并传入覆盖参数值。</target>
        </trans-unit>
        <trans-unit id="27db2b5bc00e4f188ea46c5deb7fb5587ac85224" translate="yes" xml:space="preserve">
          <source>The following is a &lt;code&gt;setCurrentStyles()&lt;/code&gt; method that sets a component property, &lt;code&gt;currentStyles&lt;/code&gt;, with an object that defines three styles, based on the state of three other component properties:</source>
          <target state="translated">以下是 &lt;code&gt;setCurrentStyles()&lt;/code&gt; 方法，该方法使用其他三个组件属性的状态来设置组件属性 &lt;code&gt;currentStyles&lt;/code&gt; 和一个定义三种样式的对象：</target>
        </trans-unit>
        <trans-unit id="610692584293dfd2fb6fcb4af8bd9c779e7a454d" translate="yes" xml:space="preserve">
          <source>The following is a child &lt;code&gt;CountdownTimerComponent&lt;/code&gt; that repeatedly counts down to zero and launches a rocket. It has &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods that control the clock and it displays a countdown status message in its own template.</source>
          <target state="translated">以下是一个 &lt;code&gt;CountdownTimerComponent&lt;/code&gt; 子级，该子级反复递减至零并发射火箭。它具有控制时钟的 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 方法，并且在其自己的模板中显示倒计时状态消息。</target>
        </trans-unit>
        <trans-unit id="e9268067c94938c5caa50ff3139fd9e04179824a" translate="yes" xml:space="preserve">
          <source>The following is a list of the example applications in the &lt;a href=&quot;docs&quot;&gt;Angular documentation&lt;/a&gt;.</source>
          <target state="translated">以下是&lt;a href=&quot;docs&quot;&gt;Angular文档&lt;/a&gt;中的示例应用程序列表。</target>
        </trans-unit>
        <trans-unit id="f42fb5dd79eeb75c35a53b5e4c7e7cf062c235af" translate="yes" xml:space="preserve">
          <source>The following is a two-element array when specifying a route parameter:</source>
          <target state="translated">下面是指定途径参数时使用的双元素数组。</target>
        </trans-unit>
        <trans-unit id="7326f4531184dc8d93c37051d97ac9e13cd1c12e" translate="yes" xml:space="preserve">
          <source>The following is a typical example.</source>
          <target state="translated">以下是一个典型的例子。</target>
        </trans-unit>
        <trans-unit id="55843c76bb937b5c99ade8fb44814616949b7628" translate="yes" xml:space="preserve">
          <source>The following is an example of how the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; view trees are combined into a single logical tree:</source>
          <target state="translated">以下是如何将 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 视图树组合为单个逻辑树的示例：</target>
        </trans-unit>
        <trans-unit id="664fbc064070f409303fb12c41e2bb73522bd8a0" translate="yes" xml:space="preserve">
          <source>The following is an example of how you can use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to link the two modules.</source>
          <target state="translated">以下是如何使用 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 链接两个模块的示例。</target>
        </trans-unit>
        <trans-unit id="8607bb858867baa84b109da9d0c1ff3859efd04b" translate="yes" xml:space="preserve">
          <source>The following is an example of specifying a bootstrapped component, &lt;code&gt;AppComponent&lt;/code&gt;, in a basic &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">以下是在基本 &lt;code&gt;app.module.ts&lt;/code&gt; 中指定自举组件 &lt;code&gt;AppComponent&lt;/code&gt; 的示例：</target>
        </trans-unit>
        <trans-unit id="453ca73d33c283d35d71394c3a21baf84fabbce3" translate="yes" xml:space="preserve">
          <source>The following is an example of writing the disabled property to a native DOM element:</source>
          <target state="translated">下面是一个将禁用属性写入本地DOM元素的例子。</target>
        </trans-unit>
        <trans-unit id="c86223c1070b4610146f7c7d0ac81f5f24cd9255" translate="yes" xml:space="preserve">
          <source>The following is another code sample using the wildcard state together with the previous example using the &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states. Instead of defining each state-to-state transition pair, any transition to &lt;code&gt;closed&lt;/code&gt; takes 1 second, and any transition to &lt;code&gt;open&lt;/code&gt; takes 0.5 seconds.</source>
          <target state="translated">以下是使用通配符状态的另一个代码示例，以及使用 &lt;code&gt;open&lt;/code&gt; 和 &lt;code&gt;closed&lt;/code&gt; 状态的前一个示例。无需定义每个状态到状态转换对，任何到 &lt;code&gt;closed&lt;/code&gt; 状态的转换都需要1秒，而到 &lt;code&gt;open&lt;/code&gt; 任何转换都需要0.5秒。</target>
        </trans-unit>
        <trans-unit id="47af1b19b7fb7b2b7952f70164ec8967201e7e99" translate="yes" xml:space="preserve">
          <source>The following is the expanded browser console output of the &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;()&lt;/code&gt; function with the name of &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以下是名为 &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;()&lt;/code&gt; 函数的扩展浏览器控制台输出。</target>
        </trans-unit>
        <trans-unit id="8fb7a4128454c301515b108ffaddee95b06eee50" translate="yes" xml:space="preserve">
          <source>The following line adds the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppRoutingModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array and configures it with the &lt;code&gt;routes&lt;/code&gt; in one step by calling &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">下面的 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 数组，并通过调用 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 在一步中为它配置 &lt;code&gt;routes&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="4c213d3006636281ad2c616f5600a638669bd1bc" translate="yes" xml:space="preserve">
          <source>The following link adds a query parameter and a fragment to the generated URL:</source>
          <target state="translated">以下链接在生成的URL中添加了一个查询参数和一个片段。</target>
        </trans-unit>
        <trans-unit id="301a3f6c250317996f1a7e73563e3c1f2daa213c" translate="yes" xml:space="preserve">
          <source>The following matcher matches HTML files.</source>
          <target state="translated">以下匹配器匹配HTML文件。</target>
        </trans-unit>
        <trans-unit id="83a0220d96181a0c46c53a96148b7b6bcc5e42fa" translate="yes" xml:space="preserve">
          <source>The following minimal &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; example builds upon a specified &lt;a href=&quot;router-tutorial-toh#a-crisis-center-with-child-routes&quot;&gt;default child route&lt;/a&gt; for the crisis center.</source>
          <target state="translated">下面的最小 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 示例基于危机中心的指定&lt;a href=&quot;router-tutorial-toh#a-crisis-center-with-child-routes&quot;&gt;默认子路由&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e33bb6a1447bcd26785782ccf0ad8a16d36a357d" translate="yes" xml:space="preserve">
          <source>The following options are available for configuring the AOT template compiler.</source>
          <target state="translated">以下选项可用于配置AOT模板编译器。</target>
        </trans-unit>
        <trans-unit id="085ddba18b2c5265e10006f356e68568d4824afc" translate="yes" xml:space="preserve">
          <source>The following options are available for configuring the AoT template compiler.</source>
          <target state="translated">以下选项可用于配置AoT模板编译器。</target>
        </trans-unit>
        <trans-unit id="bc78819d810ff269dc610903ab67d72f0566f184" translate="yes" xml:space="preserve">
          <source>The following pattern is deprecated:</source>
          <target state="translated">以下模式已被废弃。</target>
        </trans-unit>
        <trans-unit id="dfcc5dab05630152017f437c01aea4388857e4f2" translate="yes" xml:space="preserve">
          <source>The following polyfills are used to test the framework itself. They are a good starting point for an application.</source>
          <target state="translated">下面的 polyfills 是用来测试框架本身的。它们是一个应用程序的良好起点。</target>
        </trans-unit>
        <trans-unit id="e3d0650581e15a43999d42a2416501047b4f3a7b" translate="yes" xml:space="preserve">
          <source>The following properties, at the top level of the file, configure the workspace.</source>
          <target state="translated">以下是文件顶层的属性,用于配置工作区。</target>
        </trans-unit>
        <trans-unit id="7e985ef8314fd51479546a4ad9e18907e6515ed5" translate="yes" xml:space="preserve">
          <source>The following provider object uses the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; key to associate the variable with the &lt;code&gt;Logger&lt;/code&gt; token.</source>
          <target state="translated">以下提供程序对象使用 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 键将变量与 &lt;code&gt;Logger&lt;/code&gt; 令牌关联。</target>
        </trans-unit>
        <trans-unit id="c08151db40c7e46fba3e11d6139b40cc883c8c3d" translate="yes" xml:space="preserve">
          <source>The following provider object uses the &lt;code&gt;useValue&lt;/code&gt; key to associate the variable with the &lt;code&gt;Logger&lt;/code&gt; token.</source>
          <target state="translated">以下提供程序对象使用 &lt;code&gt;useValue&lt;/code&gt; 键将变量与 &lt;code&gt;Logger&lt;/code&gt; 令牌关联。</target>
        </trans-unit>
        <trans-unit id="bbc0fd0eea4d2a8cddd9a7e3f0326bee5acde118" translate="yes" xml:space="preserve">
          <source>The following revised version of the &lt;code&gt;CachingInterceptor&lt;/code&gt; optionally returns an observable that immediately emits the cached response, sends the request on to the npm web API, and emits again later with the updated search results.</source>
          <target state="translated">&lt;code&gt;CachingInterceptor&lt;/code&gt; 的以下修订版可以选择返回一个observable，该observable立即发出缓存的响应，将请求发送到npm Web API，然后在以后再次发出更新的搜索结果。</target>
        </trans-unit>
        <trans-unit id="99189183b4cb84682cca267b2e990eeba8a565d5" translate="yes" xml:space="preserve">
          <source>The following route creates sibling components with multiple outlets. When navigating to &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt;, the router creates the 'Team' component next to the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</source>
          <target state="translated">以下路线创建具有多个插座的兄弟组件。导航到 &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt; 时，路由器会在&amp;ldquo;聊天&amp;rdquo;组件旁边创建&amp;ldquo;团队&amp;rdquo;组件。&amp;ldquo;聊天&amp;rdquo;组件放置在&amp;ldquo;辅助&amp;rdquo;插座中。</target>
        </trans-unit>
        <trans-unit id="9dd6c9b80bc0194ec4f3aac76cae7d2d01f577d8" translate="yes" xml:space="preserve">
          <source>The following route specifies that when navigating to, for example, &lt;code&gt;/team/11/user/bob&lt;/code&gt;, the router creates the 'Team' component with the 'User' child component in it.</source>
          <target state="translated">以下路由指定在导航到 &lt;code&gt;/team/11/user/bob&lt;/code&gt; 时，路由器会在其中创建带有&amp;ldquo;用户&amp;rdquo;子组件的&amp;ldquo;团队&amp;rdquo;组件。</target>
        </trans-unit>
        <trans-unit id="98cd7483f8aba2a02696564fcb82530e8aa235b9" translate="yes" xml:space="preserve">
          <source>The following route uses the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; property to ignore a segment of a given URL when looking for a child path.</source>
          <target state="translated">以下路由在查找子路径时使用 &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; 属性忽略给定URL的一部分。</target>
        </trans-unit>
        <trans-unit id="38d574a5fe52f7e7cedf53283a1b043980e8df72" translate="yes" xml:space="preserve">
          <source>The following route uses the &lt;code&gt;redirectTo&lt;/code&gt; property to ignore a segment of a given URL when looking for a child path.</source>
          <target state="translated">当寻找子路径时，以下路由使用 &lt;code&gt;redirectTo&lt;/code&gt; 属性忽略给定URL的一部分。</target>
        </trans-unit>
        <trans-unit id="2b01e0c8059fc0401e8549e70d7dcf5bc5f7ee96" translate="yes" xml:space="preserve">
          <source>The following route uses wild-card notation to specify a component that is always instantiated regardless of where you navigate to.</source>
          <target state="translated">下面的路径使用通配符符号来指定一个组件,无论你导航到哪里,该组件都会被实例化。</target>
        </trans-unit>
        <trans-unit id="a6454d98dfd985ac59580f707d0a349be9a74d91" translate="yes" xml:space="preserve">
          <source>The following section refactors the &lt;code&gt;ProfileEditor&lt;/code&gt; component to use the form builder service to create form control and form group instances.</source>
          <target state="translated">下一节将重构 &lt;code&gt;ProfileEditor&lt;/code&gt; 组件，以使用表单构建器服务来创建表单控件和表单组实例。</target>
        </trans-unit>
        <trans-unit id="5465ea2f359e32bfe1a37ff57e84812529ef826d" translate="yes" xml:space="preserve">
          <source>The following sections excerpt methods of the sample's &lt;code&gt;HeroesService&lt;/code&gt;.</source>
          <target state="translated">以下各节摘录了示例的 &lt;code&gt;HeroesService&lt;/code&gt; 的方法。</target>
        </trans-unit>
        <trans-unit id="a76c578936ab27254fb8d939de7a81db9437d38c" translate="yes" xml:space="preserve">
          <source>The following sections, comprising most of this guide, explore common component testing scenarios</source>
          <target state="translated">下面的章节,包括本指南的大部分内容,探讨了常见的组件测试场景。</target>
        </trans-unit>
        <trans-unit id="7fdb271994a4a327f199629fee13b3b5218174bf" translate="yes" xml:space="preserve">
          <source>The following selectors are supported.</source>
          <target state="translated">支持以下选择器:</target>
        </trans-unit>
        <trans-unit id="5b0248f72441058a2d81893bf871c0a2c0bb3d1c" translate="yes" xml:space="preserve">
          <source>The following shows &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; guarding two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s. The &lt;code&gt;currentCustomer&lt;/code&gt; name appears only when there is a &lt;code&gt;currentCustomer&lt;/code&gt;. The &lt;code&gt;nullCustomer&lt;/code&gt; will not be displayed as long as it is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">下面显示了 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 保护两个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 。该 &lt;code&gt;currentCustomer&lt;/code&gt; 的名字出现时，才会有一个 &lt;code&gt;currentCustomer&lt;/code&gt; 。该 &lt;code&gt;nullCustomer&lt;/code&gt; 不会，只要它是显示 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d137ad25db2cc877ca5df59f56e9a6b890ee5500" translate="yes" xml:space="preserve">
          <source>The following shows the new and the old implementations side-by-side.</source>
          <target state="translated">下面将新旧实现并列显示。</target>
        </trans-unit>
        <trans-unit id="a9c2c91816517be8d1534ac705647c061fa6dd7b" translate="yes" xml:space="preserve">
          <source>The following shows the translation to French:</source>
          <target state="translated">以下是法文译文:</target>
        </trans-unit>
        <trans-unit id="e1bd79b4d2db06b7589c87d8dbd16316e269179c" translate="yes" xml:space="preserve">
          <source>The following shows use with the &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; decorator, and allows for a null result.</source>
          <target state="translated">以下显示了与 &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; 装饰器一起使用，并允许空结果。</target>
        </trans-unit>
        <trans-unit id="f6128302a128007a3c40e5752360cf21b438bb75" translate="yes" xml:space="preserve">
          <source>The following simple example injects a class into a component using the view provider specified in component metadata:</source>
          <target state="translated">下面这个简单的例子使用组件元数据中指定的视图提供者将一个类注入到组件中。</target>
        </trans-unit>
        <trans-unit id="2668cfb6dea5ec9ebd2fd1c44ae5228da3864e94" translate="yes" xml:space="preserve">
          <source>The following snapshot reflects the state of the log after the user clicked the &lt;em&gt;Create...&lt;/em&gt; button and then the &lt;em&gt;Destroy...&lt;/em&gt; button.</source>
          <target state="translated">以下快照反映了用户单击&amp;ldquo;&lt;em&gt;创建...&amp;rdquo;&lt;/em&gt;按钮然后单击&amp;ldquo;&lt;em&gt;销毁...&amp;rdquo;&lt;/em&gt;按钮后日志的状态。</target>
        </trans-unit>
        <trans-unit id="01444f8aa1fd63fbea66ed3fbc4d76b3181f9147" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define an on-changes handler for an input property.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义一个输入属性的on-changes处理程序。</target>
        </trans-unit>
        <trans-unit id="a2cf27e61d910f2a3062d16cd2b48905ec197f2c" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own after-check functionality.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义自己的事后检查功能。</target>
        </trans-unit>
        <trans-unit id="02c938106305027d23ab75882704caf8994a7b24" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own content initialization method.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义自己的内容初始化方法。</target>
        </trans-unit>
        <trans-unit id="0e8fbeff69628590a0b295ba498767902ead9d66" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own custom clean-up method.</source>
          <target state="translated">下面的代码段展示了一个组件如何实现这个接口来定义自己的自定义清理方法。</target>
        </trans-unit>
        <trans-unit id="411e84ca8d7c03f76c1b14b61d983ec8bab6408f" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own initialization method.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义自己的初始化方法。</target>
        </trans-unit>
        <trans-unit id="94805b48a3f8993b901ee028c3968016d01e3964" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to define its own view initialization method.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来定义自己的视图初始化方法。</target>
        </trans-unit>
        <trans-unit id="1aff607a58501ecf10894e98220ffe4cf493e1de" translate="yes" xml:space="preserve">
          <source>The following snippet shows how a component can implement this interface to invoke it own change-detection cycle.</source>
          <target state="translated">下面的代码段显示了一个组件如何实现这个接口来调用它自己的变化检测周期。</target>
        </trans-unit>
        <trans-unit id="84fb0039bc53f48ed5527f7a01426ed661c5dac7" translate="yes" xml:space="preserve">
          <source>The following still have type &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">以下仍然具有 &lt;code&gt;any&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="385410d96fd0d1ada306ab805640a6a9fe3ab05f" translate="yes" xml:space="preserve">
          <source>The following support packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">以下支持包作为依赖项包含在新Angular工作区的默认 &lt;code&gt;package.json&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="79640a37e7e2636b4e4ea578ebf213b6e60d68d0" translate="yes" xml:space="preserve">
          <source>The following table contains our current target release dates for the next two major versions of Angular:</source>
          <target state="translated">下表包含了我们目前对Angular下两个主要版本的目标发布日期。</target>
        </trans-unit>
        <trans-unit id="4ca2b1e7ed53f03929a56107550cff032e43e862" translate="yes" xml:space="preserve">
          <source>The following table demonstrates how Angular desugars microsyntax.</source>
          <target state="translated">下表演示了Angular如何去掉微语法。</target>
        </trans-unit>
        <trans-unit id="7733978f307b95f03a15335e16eb927c523fa06b" translate="yes" xml:space="preserve">
          <source>The following table describes which expressions the collector can and cannot fold:</source>
          <target state="translated">下表描述了收集器可以和不能折叠的表达式。</target>
        </trans-unit>
        <trans-unit id="ea4cc4b6a04dc9392df32863008f5ff336d7bacc" translate="yes" xml:space="preserve">
          <source>The following table lists the base classes and services used to create and manage reactive form controls. For complete syntax details, see the API reference documentation for the &lt;a href=&quot;../api/forms&quot;&gt;Forms package&lt;/a&gt;.</source>
          <target state="translated">下表列出了用于创建和管理响应式表单控件的基类和服务。有关完整的语法详细信息，请参阅&lt;a href=&quot;../api/forms&quot;&gt;Forms包&lt;/a&gt;的API参考文档。</target>
        </trans-unit>
        <trans-unit id="6559ccde890d8fce0c896cbfc0b32736ad161e0e" translate="yes" xml:space="preserve">
          <source>The following table lists the exercises with brief descriptions. The sample code is also used to illustrate specific tasks in the following sections.</source>
          <target state="translated">下表列出了练习的简要说明。在下面的章节中,还用示例代码来说明具体的任务。</target>
        </trans-unit>
        <trans-unit id="4e03431838c501d28cce8ddc5c46d3be138f46e9" translate="yes" xml:space="preserve">
          <source>The following table provides the status for Angular versions under support.</source>
          <target state="translated">下表提供了支持下的Angular版本的状态。</target>
        </trans-unit>
        <trans-unit id="57be5a19d38053f7f9bb0d9a654f257ce99b8126" translate="yes" xml:space="preserve">
          <source>The following table summarizes class binding syntax.</source>
          <target state="translated">下表总结了类绑定语法。</target>
        </trans-unit>
        <trans-unit id="4f4bdba3679b1b07309153eecf2dd0e53141c7ad" translate="yes" xml:space="preserve">
          <source>The following table summarizes style binding syntax.</source>
          <target state="translated">下表总结了样式绑定语法。</target>
        </trans-unit>
        <trans-unit id="d96b5c739c1826895418b2145bbddbdded331ea4" translate="yes" xml:space="preserve">
          <source>The following table summarizes the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">下表总结了 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据属性。</target>
        </trans-unit>
        <trans-unit id="ec0e9b4d8aa5d8b2d27bfc3494a79157f56e2067" translate="yes" xml:space="preserve">
          <source>The following table summarizes the key characteristics of each category.</source>
          <target state="translated">下表总结了每个类别的主要特征。</target>
        </trans-unit>
        <trans-unit id="94f36be6c96bfbef3f8339094d4d44cbc04cfe6a" translate="yes" xml:space="preserve">
          <source>The following table summarizes the key characteristics of each feature module group.</source>
          <target state="translated">下表总结了每个特征模块组的主要特征。</target>
        </trans-unit>
        <trans-unit id="fec16611f597670fac267bce5d690f6c5abe4600" translate="yes" xml:space="preserve">
          <source>The following tables describe each portion of the microsyntax grammar.</source>
          <target state="translated">下表描述了微词法语法的各个部分。</target>
        </trans-unit>
        <trans-unit id="1057a8bdc07041a51b4140ab877a59a6b160587d" translate="yes" xml:space="preserve">
          <source>The following tabs show the example app and its translation files:</source>
          <target state="translated">以下标签显示了示例应用程序及其翻译文件。</target>
        </trans-unit>
        <trans-unit id="4ce840172e7aa3dbc7025dbe2e8ba9084075ce24" translate="yes" xml:space="preserve">
          <source>The following template binds the value of &lt;code&gt;htmlSnippet&lt;/code&gt;, once by interpolating it into an element's content, and once by binding it to the &lt;code&gt;innerHTML&lt;/code&gt; property of an element:</source>
          <target state="translated">以下模板绑定 &lt;code&gt;htmlSnippet&lt;/code&gt; 的值，一次是将其插值到元素的内容中，一次是将其绑定到元素的 &lt;code&gt;innerHTML&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="95542803d1818e7b9ddf8543ea3d2f5e00675e56" translate="yes" xml:space="preserve">
          <source>The following template breaks down into two separate &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances, an outer one and an inner one.</source>
          <target state="translated">以下模板分为两个单独的 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 实例，一个外部实例和一个内部实例。</target>
        </trans-unit>
        <trans-unit id="0cd0ff39268d1599e7449c7cc25bc25785f4bad2" translate="yes" xml:space="preserve">
          <source>The following test alternative calls the native element's own &lt;code&gt;click()&lt;/code&gt; method, which is perfectly fine for &lt;em&gt;this component&lt;/em&gt;.</source>
          <target state="translated">以下测试替代方法调用了本机元素自己的 &lt;code&gt;click()&lt;/code&gt; 方法，该方法对于&lt;em&gt;此组件&lt;/em&gt;非常合适。</target>
        </trans-unit>
        <trans-unit id="3e38312f70780e3491f68ec661365696be0e3289" translate="yes" xml:space="preserve">
          <source>The following test clicks the displayed hero and confirms that &lt;code&gt;Router.navigateByUrl&lt;/code&gt; is called with the expected url.</source>
          <target state="translated">以下测试单击显示的英雄，并确认使用预期的URL调用了 &lt;code&gt;Router.navigateByUrl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6dfa1bb416d8e0295cb8c255d10104e0c62ad38" translate="yes" xml:space="preserve">
          <source>The following test confirms the expected behavior when the service returns an &lt;code&gt;ErrorObservable&lt;/code&gt;.</source>
          <target state="translated">下面的测试确认服务返回 &lt;code&gt;ErrorObservable&lt;/code&gt; 时的预期行为。</target>
        </trans-unit>
        <trans-unit id="eeefd0a90ed65af64e72aa2c46c4435e2cb08978" translate="yes" xml:space="preserve">
          <source>The following test verifies that the hero name is propagated to the template via a binding.</source>
          <target state="translated">下面的测试验证了英雄的名字是通过绑定传播到模板上的。</target>
        </trans-unit>
        <trans-unit id="669b416d81d58828e3baeba2592b6d7bdb997a78" translate="yes" xml:space="preserve">
          <source>The following test verifies the data flow from model to view.</source>
          <target state="translated">下面的测试验证了从模型到视图的数据流。</target>
        </trans-unit>
        <trans-unit id="9493bee7e41e07ddded061eefd4c86697f978133" translate="yes" xml:space="preserve">
          <source>The following test verifies the data flow from view to model.</source>
          <target state="translated">下面的测试验证了从视图到模型的数据流。</target>
        </trans-unit>
        <trans-unit id="f74f9a34c41218f6c8d1f966bf27413f11fe65fe" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a reactive form.</source>
          <target state="translated">下面的测试使用前面提到的最喜欢的颜色组件来验证数据从视图到模型和模型到视图的反应式表单的数据流。</target>
        </trans-unit>
        <trans-unit id="43b51a454408bcc622da34659c907ba79ec26345" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a template-driven form.</source>
          <target state="translated">以下测试使用前面提到的最喜欢的颜色组件来验证模板驱动表单的数据从视图到模型和模型到视图的流动。</target>
        </trans-unit>
        <trans-unit id="07991e618eba8ae671a9d5c312ffbbe1eb329052" translate="yes" xml:space="preserve">
          <source>The following tests use the favorite-color components from previous examples to verify the view-to-model and model-to-view data flows for a reactive form.</source>
          <target state="translated">下面的测试使用前面例子中的收藏夹颜色组件来验证反应式表单的视图到模型和模型到视图的数据流。</target>
        </trans-unit>
        <trans-unit id="7fd03907907ea2e83f365fb45a4c105b4acdfd13" translate="yes" xml:space="preserve">
          <source>The following top-level configuration properties are available for each project, under &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以下顶级配置属性可用于每个项目的 &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="719cf068b30a073ae7c7ca76c77d852b85d9551d" translate="yes" xml:space="preserve">
          <source>The following values have been &lt;a href=&quot;../../guide/releases#deprecation-practices&quot;&gt;deprecated&lt;/a&gt; since v11, and should not be used for new applications.</source>
          <target state="translated">从v11开始&lt;a href=&quot;../../guide/releases#deprecation-practices&quot;&gt;不推荐使用&lt;/a&gt;以下值，并且不应将其用于新应用程序。</target>
        </trans-unit>
        <trans-unit id="b03a59d1f8804dfcf035424cc521a63f6f97fe2c" translate="yes" xml:space="preserve">
          <source>The form clears, and the &lt;em&gt;required&lt;/em&gt; bars to the left of the input box are red, indicating invalid &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;power&lt;/code&gt; properties. Notice that the error messages are hidden. This is because the form is pristine; you haven't changed anything yet.</source>
          <target state="translated">表格将清除，输入框左侧的&lt;em&gt;必填&lt;/em&gt;栏为红色，表示 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;power&lt;/code&gt; 属性无效。请注意，错误消息是隐藏的。这是因为形式是原始的。您尚未更改任何内容。</target>
        </trans-unit>
        <trans-unit id="75147566e331317e0ebd38d4c23e1fe75b6e9f20" translate="yes" xml:space="preserve">
          <source>The form control assigned to &lt;code&gt;name&lt;/code&gt; is displayed when the component is added to a template.</source>
          <target state="translated">将组件添加到模板时，将显示分配给 &lt;code&gt;name&lt;/code&gt; 的表单控件。</target>
        </trans-unit>
        <trans-unit id="2230bb7f6f181d5dab7f244d6c86fa35f9398e04" translate="yes" xml:space="preserve">
          <source>The form has the following structure:</source>
          <target state="translated">该表格的结构如下:</target>
        </trans-unit>
        <trans-unit id="7cc30137cd558d3c2066780eb04c527c530dfbea" translate="yes" xml:space="preserve">
          <source>The form highlights some design features that make it easier to use. For instance, the two required fields have a green bar on the left to make them easy to spot. These fields have initial values, so the form is valid and the &lt;strong&gt;Submit&lt;/strong&gt; button is enabled.</source>
          <target state="translated">该表格突出了一些易于使用的设计功能。例如，两个必填字段的左侧都有一个绿色条，以便于查看。这些字段具有初始值，因此该表单有效，并且启用了&lt;strong&gt;Submit&lt;/strong&gt;按钮。</target>
        </trans-unit>
        <trans-unit id="b34e294f68df7549c748b9444818ff001b758168" translate="yes" xml:space="preserve">
          <source>The form input element emits an &quot;input&quot; event with the latest value.</source>
          <target state="translated">表单输入元素会发出一个带有最新值的 &quot;输入 &quot;事件。</target>
        </trans-unit>
        <trans-unit id="515af28d9b0919435290e3f0065658e5e8a23b42" translate="yes" xml:space="preserve">
          <source>The form is displayed in the application layout defined by the root component's template.</source>
          <target state="translated">表单显示在由根组件的模板定义的应用程序布局中。</target>
        </trans-unit>
        <trans-unit id="2f3a91f61b6bd00a1be8db5548608284e0a9b995" translate="yes" xml:space="preserve">
          <source>The form layout and details are defined in the &lt;code&gt;HeroFormComponent&lt;/code&gt; class.</source>
          <target state="translated">表单布局和详细信息在 &lt;code&gt;HeroFormComponent&lt;/code&gt; 类中定义。</target>
        </trans-unit>
        <trans-unit id="0a60bc15f336549703c0f8729f6ffdccc7787238" translate="yes" xml:space="preserve">
          <source>The form makes the hero applicant choose one superpower from a fixed list of agency-approved powers. The predefined list of &lt;code&gt;powers&lt;/code&gt; is part of the data model, maintained internally in &lt;code&gt;HeroFormComponent&lt;/code&gt;. The Angular &lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf directive&lt;/a&gt; iterates over the data values to populate the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">该表格使英雄申请者从固定的机构认可权力列表中选择一种超级权力。的预定义列表 &lt;code&gt;powers&lt;/code&gt; 是数据模型，在内部维护的一部分 &lt;code&gt;HeroFormComponent&lt;/code&gt; 。Angular &lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf指令&lt;/a&gt;遍历数据值以填充 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="a8655729b1ee08ecff05e7625d507f952f92fcd0" translate="yes" xml:space="preserve">
          <source>The form model is defined in the component class. To reflect the model in the view, you'll need a checkout form.</source>
          <target state="translated">表单模型是在组件类中定义的。为了在视图中反映该模型,你需要一个结账表单。</target>
        </trans-unit>
        <trans-unit id="0ee382bec575b1f6da6bbb9cd31af78bff011d9e" translate="yes" xml:space="preserve">
          <source>The form model is the source of truth for the control, so when you click the button, the value of the input is changed within the component class, overriding its current value.</source>
          <target state="translated">表单模型是控件的真实来源,所以当你点击按钮时,输入的值会在组件类内发生变化,覆盖其当前值。</target>
        </trans-unit>
        <trans-unit id="2b5a84ea0eb09a364844c5d9b46df413273dce48" translate="yes" xml:space="preserve">
          <source>The form no longer exports any directives, and instead uses the &lt;code&gt;name&lt;/code&gt; getter defined in the component class.</source>
          <target state="translated">该表单不再导出任何指令，而是使用在组件类中定义的 &lt;code&gt;name&lt;/code&gt; getter。</target>
        </trans-unit>
        <trans-unit id="1e2111c046072ad114cbf43f25b98a7beaed6ec4" translate="yes" xml:space="preserve">
          <source>The form template uses dynamic data binding of metadata to render the form without making any hardcoded assumptions about specific questions. It adds both control metadata and validation criteria dynamically.</source>
          <target state="translated">表单模板使用元数据的动态数据绑定来渲染表单,而不对具体问题做任何硬编码的假设。它可以动态地添加控制元数据和验证标准。</target>
        </trans-unit>
        <trans-unit id="032272358147305d26fc0da1087985990fc8ac90" translate="yes" xml:space="preserve">
          <source>The form you create uses input validation and styling to improve the user experience. It has a Submit button that is only enabled when all user input is valid, and flags invalid input with color coding and error messages.</source>
          <target state="translated">您创建的表单使用输入验证和样式来改善用户体验。它有一个提交按钮,只有在所有用户输入有效时才会启用,并通过颜色编码和错误信息标记无效输入。</target>
        </trans-unit>
        <trans-unit id="509be382f4074b27cbcce6b529d160eac650cf40" translate="yes" xml:space="preserve">
          <source>The form-design concepts that are presented in &lt;a href=&quot;forms-overview&quot;&gt;Introduction to Forms&lt;/a&gt;.</source>
          <target state="translated">表单&lt;a href=&quot;forms-overview&quot;&gt;简介&lt;/a&gt;中介绍的表单设计概念。</target>
        </trans-unit>
        <trans-unit id="c4afd0129b7e117b92146615638d0e4e2006fecc" translate="yes" xml:space="preserve">
          <source>The format for the currency indicator. One of the following:</source>
          <target state="translated">货币指标的格式。下列之一:</target>
        </trans-unit>
        <trans-unit id="eee651f151097d3f793f7dd68113adcb34cf7213" translate="yes" xml:space="preserve">
          <source>The format type.</source>
          <target state="translated">格式类型:</target>
        </trans-unit>
        <trans-unit id="cd068df6dcd825ce5052a96a9a61c9e6c6f8bd76" translate="yes" xml:space="preserve">
          <source>The format, &lt;code&gt;wide&lt;/code&gt; or &lt;code&gt;narrow&lt;/code&gt;.</source>
          <target state="translated">格式， &lt;code&gt;wide&lt;/code&gt; 或 &lt;code&gt;narrow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="526712cace2051a3820458eac477a227870a4798" translate="yes" xml:space="preserve">
          <source>The fragment of the URL</source>
          <target state="translated">URL的片段</target>
        </trans-unit>
        <trans-unit id="0d182f34bb720d02d0ff9daf3877acfc53926309" translate="yes" xml:space="preserve">
          <source>The framework passes the event argument&amp;mdash;represented by &lt;code&gt;$event&lt;/code&gt;&amp;mdash;to the handler method, and the method processes it:</source>
          <target state="translated">框架将事件参数（由 &lt;code&gt;$event&lt;/code&gt; 表示）传递给处理程序方法，然后该方法对其进行处理：</target>
        </trans-unit>
        <trans-unit id="cb343064f13dd87a34e507dfccab96b02bd2aebe" translate="yes" xml:space="preserve">
          <source>The full URL string</source>
          <target state="translated">完整的URL字符串</target>
        </trans-unit>
        <trans-unit id="88085ca27e5b06d61296a4f74c271a308a999e84" translate="yes" xml:space="preserve">
          <source>The full URL string.</source>
          <target state="translated">完整的URL字符串。</target>
        </trans-unit>
        <trans-unit id="7f0cbd8363677df2b3ea5c867b26387e1ee8078d" translate="yes" xml:space="preserve">
          <source>The full path for the TypeScript configuration file, relative to the current workspace.</source>
          <target state="translated">TypeScript配置文件的完整路径,相对于当前的工作区。</target>
        </trans-unit>
        <trans-unit id="8023b8cae23a8f17607eebcdfccedf1316888f2a" translate="yes" xml:space="preserve">
          <source>The full path for the main entry point to the app, relative to the current workspace.</source>
          <target state="translated">相对于当前工作区,应用的主入口点的完整路径。</target>
        </trans-unit>
        <trans-unit id="9fcf0e0bdd67b2fc8e34d78b3c0248617ad77ccf" translate="yes" xml:space="preserve">
          <source>The full path for the new output directory, relative to the current workspace.</source>
          <target state="translated">新输出目录的完整路径,相对于当前工作区。</target>
        </trans-unit>
        <trans-unit id="eed94568aa1a8e2503cf46beaf9ea9475b325fba" translate="yes" xml:space="preserve">
          <source>The full path for the polyfills file, relative to the current workspace.</source>
          <target state="translated">polyfills文件的完整路径,相对于当前工作区。</target>
        </trans-unit>
        <trans-unit id="72ca397dc507125a0d20ad46ccbf197c1c42a7a1" translate="yes" xml:space="preserve">
          <source>The full response including the body was received.</source>
          <target state="translated">已收到包括正文在内的全部答复。</target>
        </trans-unit>
        <trans-unit id="e6503b9b0cc09112e25c5a60b6304d09a44f4ed9" translate="yes" xml:space="preserve">
          <source>The full source for the final version of the app can be seen and downloaded from the live example.</source>
          <target state="translated">最终版应用的完整源码可以从现场示例中看到和下载。</target>
        </trans-unit>
        <trans-unit id="381767d18e02a1d03c4532942528a8274eb1a0f8" translate="yes" xml:space="preserve">
          <source>The function is a factory that takes a regular expression to detect a &lt;em&gt;specific&lt;/em&gt; forbidden name and returns a validator function.</source>
          <target state="translated">该函数是一个工厂，它使用正则表达式来检测&lt;em&gt;特定的&lt;/em&gt;禁止名称并返回验证器函数。</target>
        </trans-unit>
        <trans-unit id="ae6e08f7e449effe9eff51219d47a00a65d9c956" translate="yes" xml:space="preserve">
          <source>The function is actually a factory that takes a regular expression to detect a &lt;em&gt;specific&lt;/em&gt; forbidden name and returns a validator function.</source>
          <target state="translated">该函数实际上是一个工厂，它使用正则表达式来检测&lt;em&gt;特定的&lt;/em&gt;禁止名称并返回验证器函数。</target>
        </trans-unit>
        <trans-unit id="1d412e78ade63cd36beea6536ba9aa555201e8d3" translate="yes" xml:space="preserve">
          <source>The function or array of functions that is used to determine the validity of this control synchronously.</source>
          <target state="translated">用于同步确定本控制的有效性的函数或函数数组。</target>
        </trans-unit>
        <trans-unit id="3307879f1e1ad0cd4a7e5b11ee9be259024ca976" translate="yes" xml:space="preserve">
          <source>The function or array of functions that is used to determine validity of this control asynchronously.</source>
          <target state="translated">用于异步确定该控件有效性的函数或函数数组。</target>
        </trans-unit>
        <trans-unit id="67edd48add1f937127d1513bd511b6b290bb7ee3" translate="yes" xml:space="preserve">
          <source>The function receives two inputs, the iteration index and the associated node data.</source>
          <target state="translated">该函数接收两个输入,即迭代索引和相关节点数据。</target>
        </trans-unit>
        <trans-unit id="48c80eeebb68498080f87297bd6cc25ebeabb884" translate="yes" xml:space="preserve">
          <source>The function receives two inputs, the iteration index and the node object ID.</source>
          <target state="translated">该函数接收两个输入,即迭代索引和节点对象ID。</target>
        </trans-unit>
        <trans-unit id="be32b3ac1b2eb072a21ff75621b7e08425ea08f2" translate="yes" xml:space="preserve">
          <source>The function retrieves candidate heroes from the &lt;code&gt;HeroService&lt;/code&gt;, takes &lt;code&gt;2&lt;/code&gt; of them to be the runners-up, and returns their concatenated names. Look at the  for the full source code.</source>
          <target state="translated">该函数从 &lt;code&gt;HeroService&lt;/code&gt; 检索候选英雄，花费 &lt;code&gt;2&lt;/code&gt; 作为亚军，并返回其并置名称。查看完整的源代码。</target>
        </trans-unit>
        <trans-unit id="a09d2a5d397e66aa18cf75d4bb9e37f09ac8bfb3" translate="yes" xml:space="preserve">
          <source>The function returns the string of names, which Angular than injects into the &lt;code&gt;runnersUp&lt;/code&gt; parameter of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">该函数返回名称的字符串，它比注入到角 &lt;code&gt;runnersUp&lt;/code&gt; 的参数 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc8a8d17b8274bbc32ca0cfca58f30d95ef0f38d" translate="yes" xml:space="preserve">
          <source>The function takes a winning &lt;code&gt;Hero&lt;/code&gt; and a &lt;code&gt;HeroService&lt;/code&gt; as arguments. Angular supplies these arguments from injected values identified by the two &lt;em&gt;tokens&lt;/em&gt; in the &lt;code&gt;deps&lt;/code&gt; array.</source>
          <target state="translated">该函数将获胜的 &lt;code&gt;Hero&lt;/code&gt; 和 &lt;code&gt;HeroService&lt;/code&gt; 作为参数。从通过确定的两个喷射值角用品这些参数&lt;em&gt;令牌&lt;/em&gt;中 &lt;code&gt;deps&lt;/code&gt; 阵列。</target>
        </trans-unit>
        <trans-unit id="31440253640d5ed429fa75f18730c0d235e3f060" translate="yes" xml:space="preserve">
          <source>The function takes the following arguments and returns a &lt;code&gt;&lt;a href=&quot;urlmatchresult&quot;&gt;UrlMatchResult&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">该函数采用以下参数，并返回一个 &lt;code&gt;&lt;a href=&quot;urlmatchresult&quot;&gt;UrlMatchResult&lt;/a&gt;&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="7fd4d00a7d9c89b4d22e796a799455efec2aec0f" translate="yes" xml:space="preserve">
          <source>The function that determines the asynchronous validity of this control.</source>
          <target state="translated">确定该控制的异步有效性的函数。</target>
        </trans-unit>
        <trans-unit id="75f21eecd9b997cf943218446152125dac02ddc1" translate="yes" xml:space="preserve">
          <source>The function that determines the synchronous validity of this control.</source>
          <target state="translated">确定该控制的同步有效性的函数。</target>
        </trans-unit>
        <trans-unit id="eacd0ae3756065fbd9d730ed2a30bf73a52ee8d3" translate="yes" xml:space="preserve">
          <source>The function that is used to determine the validity of this control asynchronously.</source>
          <target state="translated">用于异步确定该控制有效性的函数。</target>
        </trans-unit>
        <trans-unit id="83224324684148d775d842c5d56d85d841618895" translate="yes" xml:space="preserve">
          <source>The function that is used to determine the validity of this control synchronously.</source>
          <target state="translated">用于同步判断该控制的有效性的函数。</target>
        </trans-unit>
        <trans-unit id="d803c301c76f8288ebe095ce71c1b673cdc5a088" translate="yes" xml:space="preserve">
          <source>The function will only ever return 1 (&lt;code&gt;one&lt;/code&gt;) or 5 (&lt;code&gt;other&lt;/code&gt;). The &lt;code&gt;few&lt;/code&gt; category will never match. If none of the pluralization categories match, Angular will try to match &lt;code&gt;other&lt;/code&gt;. Use &lt;code&gt;other&lt;/code&gt; as the standard fallback for a missing category.</source>
          <target state="translated">该函数只会返回1（ &lt;code&gt;one&lt;/code&gt; ）或5（ &lt;code&gt;other&lt;/code&gt; ）。在 &lt;code&gt;few&lt;/code&gt; 类永远不会匹配。如果没有任何一个复数类别匹配，Angular将尝试匹配 &lt;code&gt;other&lt;/code&gt; 。将 &lt;code&gt;other&lt;/code&gt; 用作缺少类别的标准后备广告。</target>
        </trans-unit>
        <trans-unit id="65f7a04d29635cdb37413f0c3e472d4e275bd987" translate="yes" xml:space="preserve">
          <source>The functional API provided by the &lt;code&gt;@angular/animations&lt;/code&gt; module provides a domain-specific language (DSL) for creating and controlling animations in Angular applications. See the &lt;a href=&quot;../api/animations&quot;&gt;API reference&lt;/a&gt; for a complete listing and syntax details of the core functions and related data structures.</source>
          <target state="translated">&lt;code&gt;@angular/animations&lt;/code&gt; 模块提供的功能性API提供了一种特定于域的语言（DSL），用于在Angular应用程序中创建和控制动画。有关核心功能和相关数据结构的完整列表和语法详细信息，请参阅&lt;a href=&quot;../api/animations&quot;&gt;API参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39cc10df89d390f57860b9af6c0adb017e7434d2" translate="yes" xml:space="preserve">
          <source>The gathering of CLI analytics data is disabled by default, and must be enabled at the project level by individual users. It cannot be enabled at the project level for all users.</source>
          <target state="translated">CLI分析数据的收集在默认情况下是禁用的,个别用户必须在项目级别启用。不能在项目层面为所有用户启用。</target>
        </trans-unit>
        <trans-unit id="fdd0a7a0c40007f4996ec51aa08759927de0515e" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;ngsw-config.json&lt;/code&gt; includes a limited list of cachable fonts and images extentions. In some cases, you might want to modify the glob pattern to suit your needs.</source>
          <target state="translated">生成的 &lt;code&gt;ngsw-config.json&lt;/code&gt; 包括有限的可缓存字体和图像扩展列表。在某些情况下，您可能需要修改glob模式以适合您的需求。</target>
        </trans-unit>
        <trans-unit id="7d22ac5ee61233dbc8345586d9bf0c281c321c14" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;ngsw-config.json&lt;/code&gt; includes a limited list of cacheable fonts and images extensions. In some cases, you might want to modify the glob pattern to suit your needs.</source>
          <target state="translated">生成的 &lt;code&gt;ngsw-config.json&lt;/code&gt; 包含有限的可缓存字体和图像扩展名列表。在某些情况下，您可能需要修改glob模式以适合您的需求。</target>
        </trans-unit>
        <trans-unit id="4a279bf5db87a97440dc1aee59aa3be18678bef7" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; is as follows:</source>
          <target state="translated">生成的 &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; 如下：</target>
        </trans-unit>
        <trans-unit id="e616c4f20e747c4816f0eec1d31528b85dafd2e4" translate="yes" xml:space="preserve">
          <source>The generated file looks like this:</source>
          <target state="translated">生成的文件是这样的。</target>
        </trans-unit>
        <trans-unit id="04803306c35b1db59a8611c4f1c5567aec8e4351" translate="yes" xml:space="preserve">
          <source>The generated output would look something like this:</source>
          <target state="translated">生成的输出会是这样的。</target>
        </trans-unit>
        <trans-unit id="141073788fe40a99ac2d4c89d2b31fce8314ca6b" translate="yes" xml:space="preserve">
          <source>The generator creates starter files for all three parts of the component:</source>
          <target state="translated">生成器为组件的所有三个部分创建启动文件。</target>
        </trans-unit>
        <trans-unit id="bf05807c104db04e8ba4b4172fe1e0d537908a8f" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;ng run&lt;/code&gt; CLI command takes as its first argument a target string of the form &lt;em&gt;project:target[:configuration]&lt;/em&gt;.</source>
          <target state="translated">通用 &lt;code&gt;ng run&lt;/code&gt; CLI命令以&lt;em&gt;project：target [：configuration]&lt;/em&gt;形式的目标字符串作为第一个参数。</target>
        </trans-unit>
        <trans-unit id="7ec0f9f9bac30ff11b631988c34462992f22407b" translate="yes" xml:space="preserve">
          <source>The given URL path.</source>
          <target state="translated">给定的URL路径。</target>
        </trans-unit>
        <trans-unit id="ab814f412c1f1d0bae00400afb55a1234e1acc6e" translate="yes" xml:space="preserve">
          <source>The goal is to group the &lt;code&gt;Crisis Center&lt;/code&gt; management routes under the &lt;code&gt;admin&lt;/code&gt; path. You don't need a component to do it. A &lt;em&gt;component-less&lt;/em&gt; route makes it easier to &lt;a href=&quot;router#can-activate-child-guard&quot;&gt;guard child routes&lt;/a&gt;.</source>
          <target state="translated">目标是将 &lt;code&gt;Crisis Center&lt;/code&gt; 的管理路由分组在 &lt;code&gt;admin&lt;/code&gt; 路径下。您不需要组件即可执行此操作。一个&lt;em&gt;无部件&lt;/em&gt;的路线可以更容易地&lt;a href=&quot;router#can-activate-child-guard&quot;&gt;守护子路由&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd9023eeedf5f8bbb0b9df05835717a6643881d4" translate="yes" xml:space="preserve">
          <source>The goal of the &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; is to present question types defined in your model. You only have two types of questions at this point but you can imagine many more. The &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; statement in the template determines which type of question to display. The switch uses directives with the &lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;&lt;code&gt;formControlName&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/forms/formgroupdirective&quot;&gt;&lt;code&gt;formGroup&lt;/code&gt;&lt;/a&gt; selectors. Both directives are defined in &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; 的目标是呈现模型中定义的问题类型。此时，您只有两种类型的问题，但您可以想象更多。模板中的 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; 语句确定要显示的问题类型。开关将指令与&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt; &lt;code&gt;formControlName&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../api/forms/formgroupdirective&quot;&gt; &lt;code&gt;formGroup&lt;/code&gt; &lt;/a&gt;选择器一起使用。这两个指令都在 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 中定义。</target>
        </trans-unit>
        <trans-unit id="65800738d999ab526c0c89e0de424c8c1ee0f456" translate="yes" xml:space="preserve">
          <source>The goal of this project is to improve the experience and remove legacy dependency by transitioning the language service to Ivy. Today the language service still uses the View Engine compiler and type checking, even for Ivy applications. We want to use the Ivy template parser and improved type checking for the Angular Language service to match application behavior. This migration will also be a step towards unblocking the removal of View Engine, which will simplify Angular, reduce the npm package size, and improve the framework's maintainability.</source>
          <target state="translated">这个项目的目标是通过将语言服务过渡到Ivy来改善体验并消除遗留的依赖性。今天,语言服务仍然使用View Engine编译器和类型检查,即使是对Ivy应用也是如此。我们希望为Angular语言服务使用Ivy模板解析器和改进的类型检查来匹配应用行为。这次迁移也将是解禁移除View Engine的一步,这将简化Angular,减少npm包的大小,提高框架的可维护性。</target>
        </trans-unit>
        <trans-unit id="7e3f53bd2e127f2d6cf985d6eab8a081c2e42cae" translate="yes" xml:space="preserve">
          <source>The greater danger is that &lt;strong&gt;a future rewording of the header text would break&lt;/strong&gt; a link to this section.</source>
          <target state="translated">更大的危险是，&lt;strong&gt;标题文本将来的重新措词将破坏&lt;/strong&gt;到此部分的链接。</target>
        </trans-unit>
        <trans-unit id="1459c8d453ff8ac4153c0dff3f06d25103f5fe41" translate="yes" xml:space="preserve">
          <source>The grouping element may break the template appearance because CSS styles neither expect nor accommodate the new layout. For example, suppose you have the following paragraph layout.</source>
          <target state="translated">分组元素可能会破坏模板的外观,因为CSS样式既不期望也不适应新的布局。例如,假设你有以下段落布局。</target>
        </trans-unit>
        <trans-unit id="186b7c1a6bbbaa6de4d2aef72af8c57b23e404a3" translate="yes" xml:space="preserve">
          <source>The guard &lt;em&gt;might&lt;/em&gt; return its boolean answer synchronously. But in many cases, the guard can't produce an answer synchronously. The guard could ask the user a question, save changes to the server, or fetch fresh data. These are all asynchronous operations.</source>
          <target state="translated">警卫队&lt;em&gt;可能会&lt;/em&gt;同步返回其布尔回答。但是在许多情况下，警卫无法同步产生答案。防护人员可以向用户提问，将更改保存到服务器，或获取新数据。这些都是异步操作。</target>
        </trans-unit>
        <trans-unit id="0fc0ed396ad120f8ab7fb06539802837af254017" translate="yes" xml:space="preserve">
          <source>The guard might return its boolean answer synchronously. But in many cases, the guard can't produce an answer synchronously. The guard could ask the user a question, save changes to the server, or fetch fresh data. These are all asynchronous operations.</source>
          <target state="translated">守卫可能会同步返回其布尔答案。但在很多情况下,卫士不能同步产生一个答案。守卫可以向用户提出问题,将更改保存到服务器上,或者获取新的数据。这些都是异步操作。</target>
        </trans-unit>
        <trans-unit id="0fb3fdf4c451ff27c87e95fb3c718c6ebc299464" translate="yes" xml:space="preserve">
          <source>The guide assumes that you're familiar with building basic Angular apps, as described in the following sections:</source>
          <target state="translated">本指南假设您熟悉构建基本的Angular应用程序,如下文所述。</target>
        </trans-unit>
        <trans-unit id="1e22bed2867320095b59b4361abac2b59605d915" translate="yes" xml:space="preserve">
          <source>The guide presents tests of a sample application created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. This sample application is much like the one created in the &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial&lt;/a&gt;. The sample application and all tests in this guide are available for inspection and experimentation:</source>
          <target state="translated">该指南介绍了使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建的示例应用程序的测试。该示例应用程序非常类似于《&lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;英雄&lt;/em&gt;&lt;/a&gt;之&lt;em&gt;旅》&lt;/em&gt;教程中创建的应用程序。&lt;em&gt;&lt;/em&gt;。本指南中的示例应用程序和所有测试可用于检查和实验：</target>
        </trans-unit>
        <trans-unit id="421303822387da04a3b56e711c4f3ea0bceaf8e8" translate="yes" xml:space="preserve">
          <source>The guide proceeds as a sequence of milestones as if you were building the app step-by-step. But, it is not a tutorial and it glosses over details of Angular application construction that are more thoroughly covered elsewhere in the documentation.</source>
          <target state="translated">该指南以里程碑的顺序进行,就像你在一步步地构建应用程序一样。但是,它不是一个教程,它掩盖了Angular应用构建的细节,这些细节在文档的其他地方有更详尽的介绍。</target>
        </trans-unit>
        <trans-unit id="56409968972545a88fbd9eded9e76b93ccbbcd50" translate="yes" xml:space="preserve">
          <source>The guideline uses the shortcut &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; to represent those various files. Using this shortcut makes this guide's file structures easier to read and more terse.</source>
          <target state="translated">该准则使用快捷方式 &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; 表示这些各种文件。使用此快捷方式可使本指南的文件结构更易于阅读和简洁。</target>
        </trans-unit>
        <trans-unit id="a864f76394ca2c5a51fde927a0643f0c50460ce3" translate="yes" xml:space="preserve">
          <source>The guidelines described here serve two purposes:</source>
          <target state="translated">这里介绍的准则有两个目的。</target>
        </trans-unit>
        <trans-unit id="b0a2f7576dc2aba3e59c6760ed5a75c175747324" translate="yes" xml:space="preserve">
          <source>The guidelines that follow will refer to different parts of a URL. This diagram outlines what those parts refer to:</source>
          <target state="translated">下面的指南将提到一个URL的不同部分。这张图概述了这些部分的含义。</target>
        </trans-unit>
        <trans-unit id="c5c246736ceb17671549829f83857f93c2185c15" translate="yes" xml:space="preserve">
          <source>The handler returns an RxJS &lt;code&gt;ErrorObservable&lt;/code&gt; with a user-friendly error message. The following code updates the &lt;code&gt;getConfig()&lt;/code&gt; method, using a &lt;a href=&quot;pipes&quot;&gt;pipe&lt;/a&gt; to send all observables returned by the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; call to the error handler.</source>
          <target state="translated">处理程序返回RxJS &lt;code&gt;ErrorObservable&lt;/code&gt; 以及用户友好的错误消息。以下代码使用&lt;a href=&quot;pipes&quot;&gt;管道&lt;/a&gt;将 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 调用返回的所有可观察对象发送到错误处理程序，从而更新了 &lt;code&gt;getConfig()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="1888c94c63bc6d73016893cf4e85b80718910a2a" translate="yes" xml:space="preserve">
          <source>The handlers delegate to a helper method that sets the color on the host DOM element, &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">处理程序委托给一个辅助方法，该方法在主机DOM元素 &lt;code&gt;el&lt;/code&gt; 上设置颜色。</target>
        </trans-unit>
        <trans-unit id="46bf71e9a7c208fa128b6a06edf63925677b2a2e" translate="yes" xml:space="preserve">
          <source>The has string</source>
          <target state="translated">字符串</target>
        </trans-unit>
        <trans-unit id="36d211182de9d369a5c0e06f411a8bd524c5be83" translate="yes" xml:space="preserve">
          <source>The header name for which to append the value or values.</source>
          <target state="translated">要附加值的头名。</target>
        </trans-unit>
        <trans-unit id="058ee19fdaf510e45aeedc80b99f91c108d23a1a" translate="yes" xml:space="preserve">
          <source>The header name for which to append the values.</source>
          <target state="translated">要附加值的头名。</target>
        </trans-unit>
        <trans-unit id="f7ae4cade9263fbb970a7b0cf00131afd1c12bb5" translate="yes" xml:space="preserve">
          <source>The header name from which to retrieve values.</source>
          <target state="translated">检索值的头名。</target>
        </trans-unit>
        <trans-unit id="5c71c1c8b2b761ca699cfa043cb799e05f3e6574" translate="yes" xml:space="preserve">
          <source>The header name to check for existence.</source>
          <target state="translated">要检查是否存在的头部名称。</target>
        </trans-unit>
        <trans-unit id="1af3be1a7d51a18f36d735ad45a99c8687d62de5" translate="yes" xml:space="preserve">
          <source>The header name.</source>
          <target state="translated">头部名称。</target>
        </trans-unit>
        <trans-unit id="1fb8a670c061e1780c533d1cfa92b7cada304777" translate="yes" xml:space="preserve">
          <source>The helper method, &lt;code&gt;highlight&lt;/code&gt;, was extracted from the constructor. The revised constructor simply declares the injected &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">辅助方法 &lt;code&gt;highlight&lt;/code&gt; 是从构造函数中提取的。修改后的构造函数只声明注入的 &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77deeab503fd68fae60b1683faba0eaee8d11b6b" translate="yes" xml:space="preserve">
          <source>The helper sets up global variables to hold the shared Angular and AngularJS injectors.</source>
          <target state="translated">该帮助程序设置了全局变量来存放共享的Angular和AngularJS注入器。</target>
        </trans-unit>
        <trans-unit id="4ae082078f4b7ac534ba00e2fb2f643830e768fa" translate="yes" xml:space="preserve">
          <source>The hero &lt;em&gt;Alter Ego&lt;/em&gt; is optional so you can leave that be.</source>
          <target state="translated">英雄&lt;em&gt;Alter Ego&lt;/em&gt;是可选的，因此您可以保留它。</target>
        </trans-unit>
        <trans-unit id="71c6566d940a46db02f0c867ecf070621fd765b9" translate="yes" xml:space="preserve">
          <source>The hero agency is planning an ad campaign with several different ads cycling through the banner. New ad components are added frequently by several different teams. This makes it impractical to use a template with a static component structure.</source>
          <target state="translated">英雄机构正在策划一个广告活动,几个不同的广告在横幅上循环。新的广告组件由几个不同的团队频繁添加。这使得使用静态组件结构的模板不切实际。</target>
        </trans-unit>
        <trans-unit id="16a3fb0d9729195d9e9c53c82925e2ac408ea4a3" translate="yes" xml:space="preserve">
          <source>The hero editor</source>
          <target state="translated">英雄编辑</target>
        </trans-unit>
        <trans-unit id="8763e74d500e6e70efa6309067129b019b2ca2e7" translate="yes" xml:space="preserve">
          <source>The hero editor.</source>
          <target state="translated">英雄小编。</target>
        </trans-unit>
        <trans-unit id="0728ae26bedae4b1d12eb889d15f0b5193a7c81f" translate="yes" xml:space="preserve">
          <source>The hero form uses the &lt;code&gt;.ng-valid&lt;/code&gt; and &lt;code&gt;.ng-invalid&lt;/code&gt; classes to set the color of each form control's border.</source>
          <target state="translated">英雄表单使用 &lt;code&gt;.ng-valid&lt;/code&gt; 和 &lt;code&gt;.ng-invalid&lt;/code&gt; 类设置每个表单控件边框的颜色。</target>
        </trans-unit>
        <trans-unit id="21d7974b34602306dfbd0d2ab859c721b4a0b3f4" translate="yes" xml:space="preserve">
          <source>The hero items in the &lt;code&gt;HeroesComponent&lt;/code&gt; are &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements whose click events are bound to the component's &lt;code&gt;onSelect()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 中的英雄项是 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素，其单击事件绑定到组件的 &lt;code&gt;onSelect()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="a40bab6e7b4b8a2395efb8fec835b41b2c0a4ad9" translate="yes" xml:space="preserve">
          <source>The hero management file structure is as follows:</source>
          <target state="translated">英雄管理文件结构如下。</target>
        </trans-unit>
        <trans-unit id="592678c7214943d825426d0e4505fa4a585ef418" translate="yes" xml:space="preserve">
          <source>The hero must choose one superpower from a fixed list of agency-approved powers. You maintain that list internally (in &lt;code&gt;HeroFormComponent&lt;/code&gt;).</source>
          <target state="translated">英雄必须从机构认可的固定权力清单中选择一个超级大国。您可以在内部维护该列表（在 &lt;code&gt;HeroFormComponent&lt;/code&gt; 中）。</target>
        </trans-unit>
        <trans-unit id="473bad574572a351e437cb9cd6317f908f41d643" translate="yes" xml:space="preserve">
          <source>The hero routes are currently defined in &lt;em&gt;two&lt;/em&gt; places: in the &lt;code&gt;HeroesRoutingModule&lt;/code&gt;, by way of the &lt;code&gt;HeroesModule&lt;/code&gt;, and in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">当前在&lt;em&gt;两个&lt;/em&gt;地方定义了英雄路线：在 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 中，通过 &lt;code&gt;HeroesModule&lt;/code&gt; ，在 &lt;code&gt;AppRoutingModule&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="f19285967f93c66c1135ea6b51d4527818be9887" translate="yes" xml:space="preserve">
          <source>The hero routes are currently defined in two places: in the &lt;code&gt;HeroesRoutingModule&lt;/code&gt;, by way of the &lt;code&gt;HeroesModule&lt;/code&gt;, and in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">当前在两个地方定义了英雄路线：在 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 中，通过 &lt;code&gt;HeroesModule&lt;/code&gt; ，在 &lt;code&gt;AppRoutingModule&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="8ea57673d1088103c595c56fde675da1370e3de5" translate="yes" xml:space="preserve">
          <source>The heroes feature has two interacting components, the hero list and the hero detail. The list view is self-sufficient; you navigate to it, it gets a list of heroes and displays them.</source>
          <target state="translated">英雄功能有两个交互的组件,英雄列表和英雄详情。列表视图是自给自足的,你导航到它,它就会得到一个英雄列表并显示出来。</target>
        </trans-unit>
        <trans-unit id="16cef4fba3814a586861ff7e84698831dc62613c" translate="yes" xml:space="preserve">
          <source>The heroes feature has two interacting components, the hero list and the hero detail. When you navigate to list view, it gets a list of heroes and displays them. When you click on a hero, the detail view has to display that particular hero.</source>
          <target state="translated">英雄功能有两个交互组件,英雄列表和英雄详情。当你导航到列表视图时,会得到一个英雄列表,并显示它们。当你点击一个英雄时,细节视图必须显示该特定英雄。</target>
        </trans-unit>
        <trans-unit id="f0c577a68776a18a7768c488dfda878388c07de5" translate="yes" xml:space="preserve">
          <source>The heroes feature module is almost complete, but what is a feature without some smooth transitions?</source>
          <target state="translated">英雄功能模块已经基本完成了,但是没有一些平滑过渡的功能是什么呢?</target>
        </trans-unit>
        <trans-unit id="79f13609e0fe6dc3309e380f997fe13b9aeef97b" translate="yes" xml:space="preserve">
          <source>The heroes list should be attractive and should respond visually when users hover over and select a hero from the list.</source>
          <target state="translated">英雄列表应该具有吸引力,当用户悬停并从列表中选择一个英雄时,应该在视觉上做出反应。</target>
        </trans-unit>
        <trans-unit id="d763cf67760997b5781cdf955015acbbec99c511" translate="yes" xml:space="preserve">
          <source>The heroes web API expects a special header in HTTP save requests. That header is in the &lt;code&gt;httpOptions&lt;/code&gt; constant defined in the &lt;code&gt;HeroService&lt;/code&gt;. Add the following to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">Heroes Web API在HTTP保存请求中需要特殊的标头。该标头是在 &lt;code&gt;httpOptions&lt;/code&gt; 在所定义的恒定 &lt;code&gt;HeroService&lt;/code&gt; 。将以下内容添加到 &lt;code&gt;HeroService&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="c4ed054e89ac71c314e694ffe3da8a0d1e37e7a6" translate="yes" xml:space="preserve">
          <source>The host &lt;code&gt;OnChangesParentComponent&lt;/code&gt; binds to them as follows.</source>
          <target state="translated">主机 &lt;code&gt;OnChangesParentComponent&lt;/code&gt; 如下绑定到它们。</target>
        </trans-unit>
        <trans-unit id="608f0a4d7c94f588eb779efe72dc12c1fb0cf77f" translate="yes" xml:space="preserve">
          <source>The host &lt;code&gt;OnChangesParentComponent&lt;/code&gt; binds to them like this:</source>
          <target state="translated">主机 &lt;code&gt;OnChangesParentComponent&lt;/code&gt; 像这样绑定到它们：</target>
        </trans-unit>
        <trans-unit id="d475d2c0839b834e5922c40096508e379732daa1" translate="yes" xml:space="preserve">
          <source>The host dependency injector. For example, the root element's component instance injector.</source>
          <target state="translated">宿主依赖注入器。例如,根元素的组件实例注入器。</target>
        </trans-unit>
        <trans-unit id="2bd45aa129171fd60686da527ebfb1ef5a231daf" translate="yes" xml:space="preserve">
          <source>The host or anchor &lt;a href=&quot;../../guide/glossary#element&quot;&gt;element&lt;/a&gt; for this component instance.</source>
          <target state="translated">此组件实例的主机或锚&lt;a href=&quot;../../guide/glossary#element&quot;&gt;元素&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfc936f22e5ed98433d5e69d8eb10f97974dcf08" translate="yes" xml:space="preserve">
          <source>The hosting parent component binds to the &lt;code&gt;deleteRequest&lt;/code&gt; event of the &lt;code&gt;ItemDetailComponent&lt;/code&gt; as follows.</source>
          <target state="translated">托管父组件将绑定到 &lt;code&gt;ItemDetailComponent&lt;/code&gt; 的 &lt;code&gt;deleteRequest&lt;/code&gt; 事件，如下所示。</target>
        </trans-unit>
        <trans-unit id="61778c1078d4aebe3161ba35e60e62c15c8e7eba" translate="yes" xml:space="preserve">
          <source>The i18n template translation process has four phases:</source>
          <target state="translated">i18n模板翻译过程有四个阶段。</target>
        </trans-unit>
        <trans-unit id="3bb0192b3b6c38a7290682d21f4eba34e038374d" translate="yes" xml:space="preserve">
          <source>The identities of elements in the iterator can change while the data does not. This can happen, for example, if the iterator is produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response produces objects with different identities, and Angular must tear down the entire DOM and rebuild it (as if all old elements were deleted and all new elements inserted).</source>
          <target state="translated">迭代器中元素的身份可能会发生变化,而数据不会。例如,如果迭代器是由一个RPC到服务器产生的,而这个RPC是重新运行的,就会发生这种情况。即使数据没有改变,第二个响应也会产生具有不同身份的对象,Angular必须拆掉整个DOM并重建它(就像删除所有旧元素并插入所有新元素一样)。</target>
        </trans-unit>
        <trans-unit id="ac727768ada490816c6d8682036d5ff4e29f9e9f" translate="yes" xml:space="preserve">
          <source>The identity validator implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; interface. It takes an Angular control object as an argument and returns either null if the form is valid, or &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">身份验证器实现 &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; 接口。它以Angular控制对象作为参数，如果格式有效，则返回null，否则返回 &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1244038c275380a06d0292b3f58a8b0808bee9d4" translate="yes" xml:space="preserve">
          <source>The immediate &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; children. Walk the tree by descending through &lt;code&gt;children&lt;/code&gt;.</source>
          <target state="translated">直接的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 子级。穿过 &lt;code&gt;children&lt;/code&gt; 穿过树。</target>
        </trans-unit>
        <trans-unit id="f77264c0b692bee3b01df77a4b0b94e2da9de660" translate="yes" xml:space="preserve">
          <source>The immediate goal is to test the &lt;code&gt;DashboardHeroComponent&lt;/code&gt;, not the &lt;code&gt;DashboardComponent&lt;/code&gt;, so, try the second and third options.</source>
          <target state="translated">近期目标是测试 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 而不是 &lt;code&gt;DashboardComponent&lt;/code&gt; ，因此，请尝试第二个和第三个选项。</target>
        </trans-unit>
        <trans-unit id="34262de4d07947d5d97708446c0ec864a64190a5" translate="yes" xml:space="preserve">
          <source>The implementation in &lt;em&gt;this&lt;/em&gt; tutorial will continue to deliver &lt;em&gt;mock heroes&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;本&lt;/em&gt;教程中的实现将继续提供&lt;em&gt;模拟英雄&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e94c2bbfc1793deccefaf24d2d6ac1efaedf0ef3" translate="yes" xml:space="preserve">
          <source>The important bit in the &lt;code&gt;server.ts&lt;/code&gt; file is the &lt;code&gt;ngExpressEngine()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;server.ts&lt;/code&gt; 文件中的重要位是 &lt;code&gt;ngExpressEngine()&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="4e58b37a7644668715bd2ab968359ab5ecae4a62" translate="yes" xml:space="preserve">
          <source>The imported &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; symbol provides Angular the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">导入的 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 符号提供Angular &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 装饰器。</target>
        </trans-unit>
        <trans-unit id="5eeb64088704a52b165f30312582ba6990110783" translate="yes" xml:space="preserve">
          <source>The imports at the top of the array are JavaScript import statements while the &lt;code&gt;imports&lt;/code&gt; array within &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; is Angular specific. For more information on the difference, see &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript Modules vs. NgModules&lt;/a&gt;.</source>
          <target state="translated">数组顶部的导入是JavaScript导入语句，而 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule中&lt;/a&gt;的 &lt;code&gt;imports&lt;/code&gt; 数组是Angular特定的。有关差异的更多信息，请参见&lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript模块与NgModules&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ad0735a040b2f744ace16714d841b50eb7a90b9" translate="yes" xml:space="preserve">
          <source>The impure</source>
          <target state="translated">不纯的</target>
        </trans-unit>
        <trans-unit id="47a8f6ad06b99c5e37173f0330783e47b4a54b62" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;</source>
          <target state="translated">递增和递减运算符 &lt;code&gt;++&lt;/code&gt; 和 &lt;code&gt;--&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01460b62b5e6cc1d2c666542b25ca8af1ab36172" translate="yes" xml:space="preserve">
          <source>The index at which to insert the new component's host view into this container. If not specified, appends the new view as the last entry.</source>
          <target state="translated">将新组件的主视图插入到这个容器中的索引。如果没有指定,则将新视图作为最后一个条目追加。</target>
        </trans-unit>
        <trans-unit id="28088325c17c4696121e5d42d44e8ba470905c1b" translate="yes" xml:space="preserve">
          <source>The individual form controls are now collected within a group. A &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance provides its model value as an object reduced from the values of each control in the group. A form group instance has the same properties (such as &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;untouched&lt;/code&gt;) and methods (such as &lt;code&gt;setValue()&lt;/code&gt;) as a form control instance.</source>
          <target state="translated">现在将单个表单控件收集在一个组中。一个 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例提供其模型值作为一个对象，该对象的值从组中每个控件的值中减去。表单组实例具有与表单控件实例相同的属性（例如 &lt;code&gt;value&lt;/code&gt; 和 &lt;code&gt;untouched&lt;/code&gt; ）和方法（例如 &lt;code&gt;setValue()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7b9f0a384d42c6657ae3c3a445c88ae80d87dd5f" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;size&lt;/code&gt; is an input value from a property binding. Clicking the buttons increases or decreases the &lt;code&gt;size&lt;/code&gt;, within min/max value constraints, and then raises, or emits, the &lt;code&gt;sizeChange&lt;/code&gt; event with the adjusted size.</source>
          <target state="translated">初始 &lt;code&gt;size&lt;/code&gt; 是来自属性绑定的输入值。单击按钮可在最小/最大值限制内增大或减小 &lt;code&gt;size&lt;/code&gt; ，然后使用已调整的大小引发或发出 &lt;code&gt;sizeChange&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="f4f9e997670b8acc1e6bb32a313594d221ffead4" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;tsconfig.json&lt;/code&gt; for an Angular app typically looks like this example:</source>
          <target state="translated">Angular应用程序的初始 &lt;code&gt;tsconfig.json&lt;/code&gt; 通常类似于以下示例：</target>
        </trans-unit>
        <trans-unit id="fef48a0a41abc39f0125846fb0fbd53cddedd428" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;tsconfig.json&lt;/code&gt; for an Angular workspace typically looks like the following example.</source>
          <target state="translated">Angular工作空间的初始 &lt;code&gt;tsconfig.json&lt;/code&gt; 通常看起来像以下示例。</target>
        </trans-unit>
        <trans-unit id="36c86209ef6735b83750a965d091a573bb9dc18d" translate="yes" xml:space="preserve">
          <source>The initial DOM to use to bootstrap the server application.</source>
          <target state="translated">用来引导服务器应用程序的初始DOM。</target>
        </trans-unit>
        <trans-unit id="9b0d2a1d3adcf62fd7edfaae947dfbf0fa526cbd" translate="yes" xml:space="preserve">
          <source>The initial admin routing configuration:</source>
          <target state="translated">最初的管理路由配置。</target>
        </trans-unit>
        <trans-unit id="5c133f6e7cbbe3a8e6d914657ad0e65a743fcb2c" translate="yes" xml:space="preserve">
          <source>The initial app created by &lt;code&gt;ng new&lt;/code&gt; is at the top level of the workspace file structure.</source>
          <target state="translated">由 &lt;code&gt;ng new&lt;/code&gt; 创建的初始应用程序位于工作空间文件结构的顶层。</target>
        </trans-unit>
        <trans-unit id="7b9c95f356d9d8aaf3b5a580d30becc255eceae3" translate="yes" xml:space="preserve">
          <source>The initial app project contains a simple Welcome app, ready to run.</source>
          <target state="translated">初始应用项目包含一个简单的欢迎应用,准备运行。</target>
        </trans-unit>
        <trans-unit id="1c618598365a8b0089eeb0d06f473e1e7f5e9801" translate="yes" xml:space="preserve">
          <source>The initial app that you create with &lt;code&gt;ng new app_name&lt;/code&gt; is listed under &quot;projects&quot;:</source>
          <target state="translated">使用 &lt;code&gt;ng new app_name&lt;/code&gt; 创建的初始应用程序在&amp;ldquo;项目&amp;rdquo;下列出：</target>
        </trans-unit>
        <trans-unit id="fccb43ed5c07fe0c3365da2b045c6f6d6ee71c9c" translate="yes" xml:space="preserve">
          <source>The initial schema that you have created tells the CLI where to find the schematic that supports the &lt;code&gt;ng add&lt;/code&gt; command. Now you are ready to create that schematic.</source>
          <target state="translated">您创建的初始模式会告诉CLI在哪里可以找到支持 &lt;code&gt;ng add&lt;/code&gt; 命令的逻辑示意图。现在您准备创建该原理图。</target>
        </trans-unit>
        <trans-unit id="274d6987906a4ae7a1535a899b14ab18fe115084" translate="yes" xml:space="preserve">
          <source>The initial schematic gets the same name as the project folder, and is generated in &lt;code&gt;src/hello-world&lt;/code&gt;. You can add related schematics to this collection, and modify the generated skeleton code to define your schematic's functionality. Each schematic name must be unique within the collection.</source>
          <target state="translated">初始逻辑示意图与项目文件夹具有相同的名称，并在 &lt;code&gt;src/hello-world&lt;/code&gt; 中生成。您可以将相关的原理图添加到该集合中，并修改生成的骨架代码以定义原理图的功能。每个逻辑示意图名称在集合中必须唯一。</target>
        </trans-unit>
        <trans-unit id="3f1077954cbb6cddea88a17c0ce828d622aecc79" translate="yes" xml:space="preserve">
          <source>The initial template defines the layout for a form with two form groups and a submit button. The form groups correspond to two properties of the Hero data model, name and alterEgo. Each group has a label and a box for user input.</source>
          <target state="translated">初始模板定义了一个表单的布局,有两个表单组和一个提交按钮。表单组对应Hero数据模型的两个属性:name和alterEgo。每个组都有一个标签和一个用户输入框。</target>
        </trans-unit>
        <trans-unit id="af0b72c3bd2192ad6b4afd6a48ff421774caeae0" translate="yes" xml:space="preserve">
          <source>The injected &lt;code&gt;&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;../api/forms/ng_value_accessor&quot;&gt;NG_VALUE_ACCESSOR&lt;/a&gt;&lt;/code&gt; is now readonly. See &lt;a href=&quot;https://github.com/angular/angular/pull/29723&quot;&gt;PR 29273&lt;/a&gt;.</source>
          <target state="translated">现在为 &lt;code&gt;&lt;a href=&quot;../api/forms/ng_value_accessor&quot;&gt;NG_VALUE_ACCESSOR&lt;/a&gt;&lt;/code&gt; 注入的 &lt;code&gt;&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 是只读的。参见&lt;a href=&quot;https://github.com/angular/angular/pull/29723&quot;&gt;PR 29273&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fe3d0e9c54c6b1dffc213d25bb122ab550dcfc75" translate="yes" xml:space="preserve">
          <source>The injection token for the event-manager plug-in service.</source>
          <target state="translated">事件管理器插件服务的注入令牌。</target>
        </trans-unit>
        <trans-unit id="1383ded669e589d4e6653269a2fad194b6361cf5" translate="yes" xml:space="preserve">
          <source>The injector determines the starting location in the logical tree and an ending location of the search. The injector begins with the starting location and looks for the token at each level in the logical tree. If the token is found it is returned.</source>
          <target state="translated">注入器确定逻辑树中的起始位置和搜索的结束位置。注入器从起始位置开始,在逻辑树的每一层寻找标记。如果找到了标记,就会返回。</target>
        </trans-unit>
        <trans-unit id="909976c4bf2fdb45732e4e4857727780da327ef6" translate="yes" xml:space="preserve">
          <source>The injector is responsible for creating service instances and injecting them into classes like &lt;code&gt;HeroListComponent&lt;/code&gt;. You rarely create an Angular injector yourself. Angular creates injectors for you as it executes the app, starting with the &lt;em&gt;root injector&lt;/em&gt; that it creates during the &lt;a href=&quot;bootstrapping&quot;&gt;bootstrap process&lt;/a&gt;.</source>
          <target state="translated">注入程序负责创建服务实例并将其注入到 &lt;code&gt;HeroListComponent&lt;/code&gt; 之类的类中。您很少自己创建一个Angular注射器。Angular在执行应用程序时会为您创建注射器，从它在&lt;a href=&quot;bootstrapping&quot;&gt;引导过程中&lt;/a&gt;创建的&lt;em&gt;根注射器&lt;/em&gt;开始。</target>
        </trans-unit>
        <trans-unit id="391362c6611913ba88dda520d9dcb87894ef5621" translate="yes" xml:space="preserve">
          <source>The injector needs providers for both this new logging service and its dependent &lt;code&gt;UserService&lt;/code&gt;. Configure this alternative logger with the &lt;code&gt;useClass&lt;/code&gt; provider-definition key, like &lt;code&gt;BetterLogger&lt;/code&gt;. The following array specifies both providers in the &lt;code&gt;providers&lt;/code&gt; metadata option of the parent module or component.</source>
          <target state="translated">注入程序需要此新的日志记录服务及其依赖的 &lt;code&gt;UserService&lt;/code&gt; 的提供程序。使用 &lt;code&gt;useClass&lt;/code&gt; 提供程序定义键（例如 &lt;code&gt;BetterLogger&lt;/code&gt; )配置此替代记录器。以下数组在父模块或组件的 &lt;code&gt;providers&lt;/code&gt; 元数据选项中指定了两个provider 。</target>
        </trans-unit>
        <trans-unit id="6dc65614e224404ed54dd6ea0d9ada092c4337fc" translate="yes" xml:space="preserve">
          <source>The injector provides the dependency value by invoking a factory function, that you provide as the value of the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; key. Notice that this form of provider has a third key, &lt;code&gt;deps&lt;/code&gt;, which specifies dependencies for the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">注入程序通过调用工厂函数来提供依赖项值，您可以将其作为 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 键的值来提供。注意，这种形式的提供程序具有第三个键 &lt;code&gt;deps&lt;/code&gt; ，它指定 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 函数的依赖项。</target>
        </trans-unit>
        <trans-unit id="f5ec281fc106ebd717eab1bd2c8f717ac4c445bf" translate="yes" xml:space="preserve">
          <source>The injector provides the dependency value by invoking a factory function, that you provide as the value of the &lt;code&gt;useFactory&lt;/code&gt; key. Notice that this form of provider has a third key, &lt;code&gt;deps&lt;/code&gt;, which specifies dependencies for the &lt;code&gt;useFactory&lt;/code&gt; function.</source>
          <target state="translated">注入程序通过调用工厂函数来提供依赖项值，您可以将其作为 &lt;code&gt;useFactory&lt;/code&gt; 键的值来提供。请注意，这种形式的提供程序具有第三个键 &lt;code&gt;deps&lt;/code&gt; ，它指定 &lt;code&gt;useFactory&lt;/code&gt; 函数的依赖项。</target>
        </trans-unit>
        <trans-unit id="229351c113a20fd8ba46021033876ef36da7993a" translate="yes" xml:space="preserve">
          <source>The injector that contains all of the providers of the &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">包含 &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 的所有提供程序的注射器。</target>
        </trans-unit>
        <trans-unit id="c95f5722ed83490db02364ac66c92b54bf76fcb4" translate="yes" xml:space="preserve">
          <source>The injector that contains all of the providers of the NgModule.</source>
          <target state="translated">包含NgModule所有提供者的注入器。</target>
        </trans-unit>
        <trans-unit id="81535b8cfa3709335ca6968ad04963647fb0e43c" translate="yes" xml:space="preserve">
          <source>The injector to use as the parent for the new component.</source>
          <target state="translated">注入器作为新组件的父组件。</target>
        </trans-unit>
        <trans-unit id="e753944a9f0476e23faa1642765ef1111249bf50" translate="yes" xml:space="preserve">
          <source>The injector to use for retrieving the component's factory.</source>
          <target state="translated">用于检索组件出厂的喷射器。</target>
        </trans-unit>
        <trans-unit id="e9818ffe0b5312214e6049d23aa468b35f9eca71" translate="yes" xml:space="preserve">
          <source>The inner, &lt;code&gt;class-skeleton&lt;/code&gt; region appears twice, once to capture the code that opens the class definition and once to capture the code that closes the class definition.</source>
          <target state="translated">内部的 &lt;code&gt;class-skeleton&lt;/code&gt; 区域出现两次，一次捕获用于打开类定义的代码，一次捕获用于关闭类定义的代码。</target>
        </trans-unit>
        <trans-unit id="97d15b5fd5023fac9a06d495428eae8299fd604c" translate="yes" xml:space="preserve">
          <source>The input element emits an &quot;input&quot; event with the value &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">输入元素发出一个值为&lt;em&gt;Blue&lt;/em&gt;的&amp;ldquo; input&amp;rdquo;事件。</target>
        </trans-unit>
        <trans-unit id="fc9e87d921dc9b1bdcc50fcb458dbe460f355cb0" translate="yes" xml:space="preserve">
          <source>The input that you provide to the link is treated as a delta to the current URL. For instance, suppose the current URL is &lt;code&gt;/user/(box//aux:team)&lt;/code&gt;. The link &lt;code&gt;&amp;lt;a [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/a&amp;gt;&lt;/code&gt; creates the URL &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt;. See &lt;a href=&quot;router#createUrlTree&quot;&gt;createUrlTree&lt;/a&gt; for more information.</source>
          <target state="translated">您提供给链接的输入将被视为当前URL的增量。例如，假设当前URL是 &lt;code&gt;/user/(box//aux:team)&lt;/code&gt; 。链接 &lt;code&gt;&amp;lt;a [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/a&amp;gt;&lt;/code&gt; 创建URL &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt; 。有关更多信息，请参见&lt;a href=&quot;router#createUrlTree&quot;&gt;createUrlTree&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45f218bc069eb983ea0aa82f12ad5468e38fbc56" translate="yes" xml:space="preserve">
          <source>The inputs of the component.</source>
          <target state="translated">组件的投入;</target>
        </trans-unit>
        <trans-unit id="9ef9848eb3b4dd6a2af93f2352e54e04d6d6e735" translate="yes" xml:space="preserve">
          <source>The instance of the component class created by &lt;code&gt;TestBed.createComponent&lt;/code&gt;.</source>
          <target state="translated">由 &lt;code&gt;TestBed.createComponent&lt;/code&gt; 创建的组件类的实例。</target>
        </trans-unit>
        <trans-unit id="c42b5877f82b6791369b1b504388d13d671ec5cd" translate="yes" xml:space="preserve">
          <source>The instance of the root component class.</source>
          <target state="translated">根组件类的实例。</target>
        </trans-unit>
        <trans-unit id="796a3b1682a165dd05dc7257a0f42400175385a8" translate="yes" xml:space="preserve">
          <source>The instance to convert.</source>
          <target state="translated">要转换的实例。</target>
        </trans-unit>
        <trans-unit id="f38cf766ca85d67c16df92fd25bac9022b740c83" translate="yes" xml:space="preserve">
          <source>The interesting part of the URL follows the &lt;code&gt;...&lt;/code&gt;:</source>
          <target state="translated">URL的有趣部分在 &lt;code&gt;...&lt;/code&gt; 之后：</target>
        </trans-unit>
        <trans-unit id="702e5fcb69842a35326d93ae27b71240dfadc43a" translate="yes" xml:space="preserve">
          <source>The interfaces are optional for JavaScript and Typescript developers from a purely technical perspective. The JavaScript language doesn't have interfaces. Angular can't see TypeScript interfaces at runtime because they disappear from the transpiled JavaScript.</source>
          <target state="translated">从纯技术的角度来看,接口对于JavaScript和Typescript开发者来说是可有可无的。JavaScript语言没有接口。Angular在运行时看不到TypeScript接口,因为它们会从移植的JavaScript中消失。</target>
        </trans-unit>
        <trans-unit id="73fe62cb28dec38fb5ac135676c55e085cff63ba" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">内部 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="64d50ef5373d507409c34fbaedaf9a35c68a6991" translate="yes" xml:space="preserve">
          <source>The internal Architect tool delegates work to handler functions called &lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builders&lt;/em&gt;&lt;/a&gt;. A builder handler function receives two arguments; a set of input &lt;code&gt;options&lt;/code&gt; (a JSON object), and a &lt;code&gt;context&lt;/code&gt; (a &lt;code&gt;BuilderContext&lt;/code&gt; object).</source>
          <target state="translated">内部Architect工具将工作委托给称为&lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builders的&lt;/em&gt;&lt;/a&gt;处理程序函数。构建器处理程序函数接收两个参数。一组输入 &lt;code&gt;options&lt;/code&gt; （一个JSON对象）和一个 &lt;code&gt;context&lt;/code&gt; （一个 &lt;code&gt;BuilderContext&lt;/code&gt; 对象）。</target>
        </trans-unit>
        <trans-unit id="1b4b0b78851e7752da5d2f642ad23a0e8de7822f" translate="yes" xml:space="preserve">
          <source>The interpolation braces in &lt;code&gt;{{1 + 1}}&lt;/code&gt; surround the template expression &lt;code&gt;1 + 1&lt;/code&gt;. In the property binding, a template expression appears in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{1 + 1}}&lt;/code&gt; 的插值括号包围模板表达式 &lt;code&gt;1 + 1&lt;/code&gt; 。在属性绑定中，与 &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt; 一样，模板表达式在 &lt;code&gt;=&lt;/code&gt; 符号右侧的引号中显示。</target>
        </trans-unit>
        <trans-unit id="93f9b2c51a7af4c4eb35603e8cb48e22004d9e33" translate="yes" xml:space="preserve">
          <source>The interpolation live example demonstrates all of the syntax and code snippets described in this section.</source>
          <target state="translated">插值活例演示了本节中描述的所有语法和代码片段。</target>
        </trans-unit>
        <trans-unit id="c6187909f50cd0be17663a5d887e024df5706953" translate="yes" xml:space="preserve">
          <source>The item.</source>
          <target state="translated">该项目:</target>
        </trans-unit>
        <trans-unit id="b27c5c8196dbfc8a53c04f22e7d7da67c2563040" translate="yes" xml:space="preserve">
          <source>The key is a supported event name to be configured, and the options object contains a set of properties, with override values to be applied to the named recognizer event. For example, to disable recognition of the rotate event, specify &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt;.</source>
          <target state="translated">关键字是要配置的受支持事件名称，options对象包含一组属性，以及要应用于命名识别器事件的替代值。例如，要禁用对Rotate事件的识别，请指定 &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3afe8949a36dd6edcd0b52b40e17cb1882c7d22a" translate="yes" xml:space="preserve">
          <source>The key is the DOM event that the directive listens to. To listen to global events, add the target to the event name. The target can be &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">关键是指令监听的DOM事件。要监听全局事件，请将目标添加到事件名称。目标可以是 &lt;code&gt;window&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;body&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d099ac2195e7034049ce33d2c88e04c7c5b2615d" translate="yes" xml:space="preserve">
          <source>The key is the DOM event that the directive listens to. To listen to global events, add the target to the event name. The target can be &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">关键是指令监听的DOM事件。要监听全局事件，请将目标添加到事件名称中。目标可以是 &lt;code&gt;window&lt;/code&gt; ， &lt;code&gt;document&lt;/code&gt; 或 &lt;code&gt;body&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7889af82f4b022dadb547ae2824efe7a6bb47207" translate="yes" xml:space="preserve">
          <source>The key is to make the code more reusable, easier to read, and less mistake prone.</source>
          <target state="translated">关键是要让代码更可重用,更容易阅读,更不容易出错。</target>
        </trans-unit>
        <trans-unit id="cdbe02fa8964f612bbf73ee656e19f8d119c6afa" translate="yes" xml:space="preserve">
          <source>The key name.</source>
          <target state="translated">钥匙的名字。</target>
        </trans-unit>
        <trans-unit id="23003367b3f2a200b40029cbe762bd40e77959fd" translate="yes" xml:space="preserve">
          <source>The key point here is that you have to export it so you can import it elsewhere. Next, import it into the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, in this example &lt;code&gt;app.module.ts&lt;/code&gt;, with a JavaScript import statement:</source>
          <target state="translated">这里的关键点是您必须将其导出，以便可以将其导入其他地方。接下来，使用JavaScript import语句将其导入 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ，在此示例 &lt;code&gt;app.module.ts&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="d0fa848ad3856bedad82e6c7874b70da382521e0" translate="yes" xml:space="preserve">
          <source>The key point here is that you have to export it so you can import it elsewhere. Next, import it into the NgModule, in this example &lt;code&gt;app.module.ts&lt;/code&gt;, with a JavaScript import statement:</source>
          <target state="translated">这里的关键点是您必须将其导出，以便可以将其导入其他地方。接下来，使用JavaScript import语句将其导入NgModule，在本示例中为 &lt;code&gt;app.module.ts&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5da31d71b1f60f0adaeccb267bd7eb24f7673f75" translate="yes" xml:space="preserve">
          <source>The key point is that you control the hero job application questions entirely through the objects returned from &lt;code&gt;QuestionService&lt;/code&gt;. Questionnaire maintenance is a simple matter of adding, updating, and removing objects from the &lt;code&gt;questions&lt;/code&gt; array.</source>
          <target state="translated">关键是您可以完全通过 &lt;code&gt;QuestionService&lt;/code&gt; 返回的对象控制英雄职位申请问题。问卷维护是从 &lt;code&gt;questions&lt;/code&gt; 数组中添加，更新和删除对象的简单问题。</target>
        </trans-unit>
        <trans-unit id="5d0681bffbfdd03e7e32f7464f13ef4c498fb543" translate="yes" xml:space="preserve">
          <source>The key takeaway is that when binding to a child component's property in a parent component&amp;mdash;that is, what's in square brackets&amp;mdash;you must decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component.</source>
          <target state="translated">关键要点是，当绑定到父组件中子组件的属性（即方括号中的内容）时，必须在子组件中使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰该属性。</target>
        </trans-unit>
        <trans-unit id="6c5cd796012caba3f50ab44f1a501f9433b217c1" translate="yes" xml:space="preserve">
          <source>The key thing to understand about a hybrid application is that every element in the DOM is owned by exactly one of the two frameworks. The other framework ignores it. If an element is owned by AngularJS, Angular treats it as if it didn't exist, and vice versa.</source>
          <target state="translated">关于混合应用程序,需要理解的关键是DOM中的每一个元素恰恰是由两个框架中的一个框架所拥有。另一个框架会忽略它。如果一个元素由AngularJS拥有,Angular就会把它当作不存在,反之亦然。</target>
        </trans-unit>
        <trans-unit id="82a5cbcd9ee629368a7dbf46b633770937978193" translate="yes" xml:space="preserve">
          <source>The keyword to search for, as provided in the search bar in angular.io.</source>
          <target state="translated">要搜索的关键字,在angular.io的搜索栏中提供。</target>
        </trans-unit>
        <trans-unit id="7139f105d9119f519815353fa125bb9a5a6a2aef" translate="yes" xml:space="preserve">
          <source>The language is simply HTML5. You're presenting two of the &lt;code&gt;Hero&lt;/code&gt; fields, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt;, and opening them up for user input in input boxes.</source>
          <target state="translated">语言就是HTML5。您将显示两个 &lt;code&gt;Hero&lt;/code&gt; 字段，即 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;alterEgo&lt;/code&gt; ，并在输入框中打开它们以供用户输入。</target>
        </trans-unit>
        <trans-unit id="feb75538a2560e199fdfa7762dd5353f05b9f3bf" translate="yes" xml:space="preserve">
          <source>The last line of the log is the most important. It shows that Karma ran three tests that all passed.</source>
          <target state="translated">日志的最后一行是最重要的。它显示Karma进行了三次测试,全部通过。</target>
        </trans-unit>
        <trans-unit id="6f3dbbe32e0d357b0c757ddb40c409623490dee3" translate="yes" xml:space="preserve">
          <source>The last route with the &lt;code&gt;path&lt;/code&gt; of &lt;code&gt;**&lt;/code&gt; is a wildcard route. The router selects this route if the requested URL doesn't match any of the paths earlier in the list and sends the user to the &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 为 &lt;code&gt;**&lt;/code&gt; 的最后一条路由是通配符路由。如果请求的URL与列表中前面的任何路径都不匹配，则路由器选择此路由，并将用户发送到 &lt;code&gt;PageNotFoundComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7b74ae411865b1ed27412a302e7dcc77c02a30f" translate="yes" xml:space="preserve">
          <source>The last step, verifying that no requests remain outstanding, is common enough for you to move it into an &lt;code&gt;afterEach()&lt;/code&gt; step:</source>
          <target state="translated">最后一步，确认没有任何未完成的请求，足够普遍，您可以将其移至 &lt;code&gt;afterEach()&lt;/code&gt; 步骤：</target>
        </trans-unit>
        <trans-unit id="6634b9650ac8fa95d9ff2877842e12f8d187606e" translate="yes" xml:space="preserve">
          <source>The last update tick/run counters give the time since specific events happened related to the idle queue. The &quot;Last update run&quot; counter shows the last time idle tasks were actually executed. &quot;Last update tick&quot; shows the time since the last event after which the queue might be processed.</source>
          <target state="translated">最后更新勾选/运行计数器给出了与空闲队列相关的特定事件发生以来的时间。&quot;上次更新运行 &quot;计数器显示实际执行空闲任务的最后时间。&quot;上次更新tick &quot;显示自上次事件发生后可能处理队列的时间。</target>
        </trans-unit>
        <trans-unit id="e78818a7cecf54088477301d548000e53b92b7d2" translate="yes" xml:space="preserve">
          <source>The latest &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;rc&lt;/code&gt; pre-release version of the documentation is available at &lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;.</source>
          <target state="translated">该文档的最新的 &lt;code&gt;next&lt;/code&gt; 或 &lt;code&gt;rc&lt;/code&gt; 预发行版本可在&lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io中获得&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7505ed32fffc9d3847991eef5fbba124922106c7" translate="yes" xml:space="preserve">
          <source>The lazy loaded scenario</source>
          <target state="translated">懒惰加载的情况</target>
        </trans-unit>
        <trans-unit id="c3bdd32d919036a2592743a6c73032960479a538" translate="yes" xml:space="preserve">
          <source>The lazy loading and re-configuration happen just once, when the route is &lt;em&gt;first&lt;/em&gt; requested; the module and routes are available immediately for subsequent requests.</source>
          <target state="translated">&lt;em&gt;首次&lt;/em&gt;请求路由时，延迟加载和重新配置仅发生一次。模块和路由可立即用于后续请求。</target>
        </trans-unit>
        <trans-unit id="890f7a7962fc803e17826b68ce985c5f777f7466" translate="yes" xml:space="preserve">
          <source>The lazy loading and re-configuration happen just once, when the route is first requested; the module and routes are available immediately for subsequent requests.</source>
          <target state="translated">懒惰加载和重新配置只发生一次,即在第一次请求路由时;模块和路由在随后的请求中立即可用。</target>
        </trans-unit>
        <trans-unit id="c57c903a85bd033e12fde20ee11764d762c10386" translate="yes" xml:space="preserve">
          <source>The library must be rebuilt on every change. When linking a library, make sure that the build step runs in watch mode, and that the library's &lt;code&gt;package.json&lt;/code&gt; configuration points at the correct entry points. For example, &lt;code&gt;main&lt;/code&gt; should point at a JavaScript file, not a TypeScript file.</source>
          <target state="translated">必须在每次更改时重新构建库。链接库时，请确保构建步骤在监视模式下运行，并且库的 &lt;code&gt;package.json&lt;/code&gt; 配置指向正确的入口点。例如， &lt;code&gt;main&lt;/code&gt; 应该指向一个JavaScript文件，而不是TypeScript文件。</target>
        </trans-unit>
        <trans-unit id="e3fae2f43d6b145b898cf826f421cd45ab8a46ba" translate="yes" xml:space="preserve">
          <source>The lightweight injection token design pattern consists of using a small abstract class as an injection token, and providing the actual implementation at a later stage. The abstract class is retained (not tree-shaken), but it is small and has no material impact on the application size.</source>
          <target state="translated">轻量级注入令牌设计模式包括使用一个小的抽象类作为注入令牌,并在后期提供实际实现。抽象类被保留(不是树状的),但它很小,对应用程序的大小没有实质性影响。</target>
        </trans-unit>
        <trans-unit id="13e7f9ae63068e388eb142c63a69b2e6ee8f8e62" translate="yes" xml:space="preserve">
          <source>The lightweight injection token design pattern is especially important for library developers. It ensures that when an application uses only some of your library's capabilities, the unused code can be eliminated from the client's app bundle.</source>
          <target state="translated">轻量级注入令牌设计模式对于库开发者来说尤为重要。它确保了当一个应用程序只使用你的库的部分功能时,未使用的代码可以从客户端的应用程序捆绑中消除。</target>
        </trans-unit>
        <trans-unit id="cea08446497238e4babf505cd66b26e387fd09b7" translate="yes" xml:space="preserve">
          <source>The line, &lt;code&gt;&amp;lt;h4&amp;gt;{{ product.price | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; }}&amp;lt;/h4&amp;gt;&lt;/code&gt;, uses the &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; pipe to transform &lt;code&gt;product.price&lt;/code&gt; from a number to a currency string. A pipe is a way you can transform data in your HTML template. For more information about Angular pipes, see &lt;a href=&quot;../guide/pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">行 &lt;code&gt;&amp;lt;h4&amp;gt;{{ product.price | &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; }}&amp;lt;/h4&amp;gt;&lt;/code&gt; ，使用 &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt;&lt;/code&gt; 管道将 &lt;code&gt;product.price&lt;/code&gt; 从数字转换为货币字符串。管道是一种可以在HTML模板中转换数据的方式。有关Angular管道的更多信息，请参见&lt;a href=&quot;../guide/pipes&quot;&gt;Pipes&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="44499b604f2c8a7fb9248b301fa86fbddbe0d759" translate="yes" xml:space="preserve">
          <source>The links are styled as colored blocks by the &lt;code&gt;dashboard.component.css&lt;/code&gt;.</source>
          <target state="translated">链接由 &lt;code&gt;dashboard.component.css&lt;/code&gt; 设置为彩色块。</target>
        </trans-unit>
        <trans-unit id="70f5c6325d761fe1e544503d9e54f38c460d44c0" translate="yes" xml:space="preserve">
          <source>The links don't go anywhere yet but &lt;a href=&quot;toh-pt5#hero-details&quot;&gt;they will shortly&lt;/a&gt;.</source>
          <target state="translated">链接还没有到任何地方，但是&lt;a href=&quot;toh-pt5#hero-details&quot;&gt;很快就会出现&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1a2bdb6c32f442bc5dc6ab7fffdac703a44af59c" translate="yes" xml:space="preserve">
          <source>The linting configuration to use.</source>
          <target state="translated">要使用的绒毛配置。</target>
        </trans-unit>
        <trans-unit id="cb5b67e650373461ed8bddbd8ff4e58af97dc7be" translate="yes" xml:space="preserve">
          <source>The list of async validators applied to control.</source>
          <target state="translated">应用于控件的异步验证器列表。</target>
        </trans-unit>
        <trans-unit id="a0b532d757d03e389d179b94a37fe57febba7478" translate="yes" xml:space="preserve">
          <source>The list of children of this group</source>
          <target state="translated">该组的子女名单</target>
        </trans-unit>
        <trans-unit id="795b91e111cdd26a419fb100996cd8d6c70ea1eb" translate="yes" xml:space="preserve">
          <source>The list of heroes is unchanged. No hero row is highlighted.</source>
          <target state="translated">英雄列表没有变化。没有英雄行高亮。</target>
        </trans-unit>
        <trans-unit id="49857ea47c4cab38f72361229ffb02aa45872afe" translate="yes" xml:space="preserve">
          <source>The list of heroes.</source>
          <target state="translated">英雄榜。</target>
        </trans-unit>
        <trans-unit id="5fa24d8b936262f7c95d2d68e29587ae556a36db" translate="yes" xml:space="preserve">
          <source>The list of validators applied to a control.</source>
          <target state="translated">应用于控件的验证器列表。</target>
        </trans-unit>
        <trans-unit id="0aadeca54e3dfecbee61ea33dcad37c9d04279da" translate="yes" xml:space="preserve">
          <source>The live example &lt;em&gt;does&lt;/em&gt; highlight the selected row because it demonstrates the final state of the application which includes the steps you're &lt;em&gt;about&lt;/em&gt; to cover. At the moment this guide is describing the state of affairs &lt;em&gt;prior&lt;/em&gt; to those steps.</source>
          <target state="translated">实际示例&lt;em&gt;的确&lt;/em&gt;突出显示了所选行，因为它演示了应用程序的最终状态，其中包括您将要&lt;em&gt;介绍&lt;/em&gt;的步骤。目前，本指南正在描述这些步骤&lt;em&gt;之前&lt;/em&gt;的事务状态。</target>
        </trans-unit>
        <trans-unit id="901614f59731b265c4298a51f6591ca36d90b9ba" translate="yes" xml:space="preserve">
          <source>The live example demonstrates all of the syntax and code snippets described in this page.</source>
          <target state="translated">实例展示了本页面中描述的所有语法和代码片段。</target>
        </trans-unit>
        <trans-unit id="7c99dbd847d2edb666ec41151e3e184ee3bbc26b" translate="yes" xml:space="preserve">
          <source>The live example demonstrates the lifecycle hooks in action through a series of exercises presented as components under the control of the root &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">实际示例通过在根 &lt;code&gt;AppComponent&lt;/code&gt; 的控制下作为组件呈现的一系列练习演示了生命周期挂钩。</target>
        </trans-unit>
        <trans-unit id="fa3db618c2285059545d9ccee1ad73d37fb3481e" translate="yes" xml:space="preserve">
          <source>The live example demonstrates the use of lifecycle hooks through a series of exercises presented as components under the control of the root &lt;code&gt;AppComponent&lt;/code&gt;. In each case a &lt;em&gt;parent&lt;/em&gt; component serves as a test rig for a &lt;em&gt;child&lt;/em&gt; component that illustrates one or more of the lifecycle hook methods.</source>
          <target state="translated">实际示例通过在根目录 &lt;code&gt;AppComponent&lt;/code&gt; 的控制下作为组件呈现的一系列练习演示了生命周期挂钩的用法。在每种情况下，&lt;em&gt;父&lt;/em&gt;组件都用作&lt;em&gt;子&lt;/em&gt;组件的测试平台，该&lt;em&gt;子&lt;/em&gt;组件说明了一种或多种生命周期挂钩方法。</target>
        </trans-unit>
        <trans-unit id="8e604124b200d483830f1b601a11ceaa96f50692" translate="yes" xml:space="preserve">
          <source>The locale (&lt;code&gt;fr&lt;/code&gt; or &lt;code&gt;en-US&lt;/code&gt; for instance).</source>
          <target state="translated">语言环境（例如 &lt;code&gt;fr&lt;/code&gt; 或 &lt;code&gt;en-US&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bc0d61c0534e7b5e89350cd2ca0eac665647cb36" translate="yes" xml:space="preserve">
          <source>The locale code.</source>
          <target state="translated">地区代码。</target>
        </trans-unit>
        <trans-unit id="dd0ba90791fe2c1551d163b9e264ade3c06599d7" translate="yes" xml:space="preserve">
          <source>The locale identifiers used by CLDR and Angular are based on &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;. These specifications change over time; the following table maps previous identifiers to current ones at time of writing:</source>
          <target state="translated">CLDR和Angular使用的语言环境标识符基于&lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;。这些规格会随着时间而变化。下表在撰写本文时将先前的标识符映射到当前的标识符：</target>
        </trans-unit>
        <trans-unit id="3654c4df9d402ec66e65601b3977777d4df35e6d" translate="yes" xml:space="preserve">
          <source>The location strategy.</source>
          <target state="translated">地点战略;</target>
        </trans-unit>
        <trans-unit id="7b62a0bd0b13a459b84264c8b7eac3dce9b81198" translate="yes" xml:space="preserve">
          <source>The log entries appear as the string value of the &lt;em&gt;power&lt;/em&gt; property changes. But the &lt;code&gt;ngOnChanges&lt;/code&gt; does not catch changes to &lt;code&gt;hero.name&lt;/code&gt; That's surprising at first.</source>
          <target state="translated">日志条目随&lt;em&gt;power&lt;/em&gt;属性的字符串值更改而显示。但是 &lt;code&gt;ngOnChanges&lt;/code&gt; 不能捕获对 &lt;code&gt;hero.name&lt;/code&gt; 的更改。起初令人惊讶。</target>
        </trans-unit>
        <trans-unit id="3128593ceae27bf4eb065a974f4a2233b8191700" translate="yes" xml:space="preserve">
          <source>The log entries appear as the string value of the &lt;em&gt;power&lt;/em&gt; property changes. Notice, however, that the &lt;code&gt;ngOnChanges()&lt;/code&gt; method does not catch changes to &lt;code&gt;hero.name&lt;/code&gt;. This is because Angular calls the hook only when the value of the input property changes. In this case, &lt;code&gt;hero&lt;/code&gt; is the input property, and the value of the &lt;code&gt;hero&lt;/code&gt; property is the &lt;em&gt;reference to the hero object&lt;/em&gt;. The object reference did not change when the value of its own &lt;code&gt;name&lt;/code&gt; property changed.</source>
          <target state="translated">日志条目随&lt;em&gt;power&lt;/em&gt;属性的字符串值更改而显示。但是请注意， &lt;code&gt;ngOnChanges()&lt;/code&gt; 方法无法捕获对 &lt;code&gt;hero.name&lt;/code&gt; 的更改。这是因为Angular仅在输入属性的值更改时才调用该挂钩。在这种情况下， &lt;code&gt;hero&lt;/code&gt; 是输入属性，而 &lt;code&gt;hero&lt;/code&gt; 属性的值是&lt;em&gt;对hero对象&lt;/em&gt;的&lt;em&gt;引用&lt;/em&gt;。当其自身的 &lt;code&gt;name&lt;/code&gt; 属性的值更改时，对象引用也不会更改。</target>
        </trans-unit>
        <trans-unit id="5371caa0a34b7cd92da5480bcaa60ece14b870cf" translate="yes" xml:space="preserve">
          <source>The logic tree for this example of &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; is as follows:</source>
          <target state="translated">此 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 示例的逻辑树如下：</target>
        </trans-unit>
        <trans-unit id="db8a04173b4b0a04499c47d1829ce78acfaf0f09" translate="yes" xml:space="preserve">
          <source>The logic tree for this example of &lt;code&gt;viewProviders&lt;/code&gt; is as follows:</source>
          <target state="translated">此 &lt;code&gt;viewProviders&lt;/code&gt; 示例的逻辑树如下：</target>
        </trans-unit>
        <trans-unit id="17661a2f13ce821c0bf724013752f42c941fc3fb" translate="yes" xml:space="preserve">
          <source>The logical tree looks like this with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; in &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">逻辑树看起来像这样，在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 中使用 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6c1735a0aa10b7541d3734c71e401644ee7a31a3" translate="yes" xml:space="preserve">
          <source>The logical tree representation shows why this is:</source>
          <target state="translated">逻辑树的表示方式表明了为什么会这样。</target>
        </trans-unit>
        <trans-unit id="1d531fc78d2d733781719c1f451152d073ed41f9" translate="yes" xml:space="preserve">
          <source>The main Angular modules for animations are &lt;code&gt;@angular/animations&lt;/code&gt; and &lt;code&gt;@angular/platform-browser&lt;/code&gt;. When you create a new project using the CLI, these dependencies are automatically added to your project.</source>
          <target state="translated">动画的主要Angular模块是 &lt;code&gt;@angular/animations&lt;/code&gt; 和 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 。使用CLI创建新项目时，这些依赖项会自动添加到您的项目中。</target>
        </trans-unit>
        <trans-unit id="7263be48b2699ade73a8888b18237441585c4155" translate="yes" xml:space="preserve">
          <source>The main CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, contains a &lt;code&gt;fileReplacements&lt;/code&gt; section in the configuration for each build target, which allows you to replace any file with a target-specific version of that file. This is useful for including target-specific code or variables in a build that targets a specific environment, such as production or staging.</source>
          <target state="translated">CLI的主要配置文件 &lt;code&gt;angular.json&lt;/code&gt; 在每个构建目标的配置中都包含一个 &lt;code&gt;fileReplacements&lt;/code&gt; 部分，该文件可让您用该文件的目标特定版本替换任何文件。这对于在针对特定环境（例如生产或登台）的构建中包含特定于目标的代码或变量很有用。</target>
        </trans-unit>
        <trans-unit id="bc356e186170cb322f0a32a7caaa8cd2b339ae78" translate="yes" xml:space="preserve">
          <source>The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; or&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags here manually.</source>
          <target state="translated">有人访问您的网站时提供的HTML主页。CLI在构建应用程序时会自动添加所有JavaScript和CSS文件，因此通常不需要在此处手动添加任何 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="17744529805032738d2ce1337233da25a724ce4c" translate="yes" xml:space="preserve">
          <source>The main entry point for your application. Compiles the application with the &lt;a href=&quot;glossary#jit&quot;&gt;JIT compiler&lt;/a&gt; and bootstraps the application's root module (AppModule) to run in the browser. You can also use the &lt;a href=&quot;aot-compiler&quot;&gt;AOT compiler&lt;/a&gt; without changing any code by appending the &lt;code&gt;--aot&lt;/code&gt; flag to the CLI &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt; commands.</source>
          <target state="translated">应用程序的主要入口点。使用&lt;a href=&quot;glossary#jit&quot;&gt;JIT编译器&lt;/a&gt;编译应用程序，并引导应用程序的根模块（AppModule）在浏览器中运行。您也可以使用&lt;a href=&quot;aot-compiler&quot;&gt;AOT编译器&lt;/a&gt;不通过附加改变任何代码 &lt;code&gt;--aot&lt;/code&gt; 标志的CLI &lt;code&gt;build&lt;/code&gt; 和 &lt;code&gt;serve&lt;/code&gt; 的命令。</target>
        </trans-unit>
        <trans-unit id="d0f2908e2176918f5ec05936850fcaeb40f2aee6" translate="yes" xml:space="preserve">
          <source>The main entry point for your unit tests, with some Angular-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">你的单元测试的主要入口点,有一些Angular特定的配置。你通常不需要编辑这个文件。</target>
        </trans-unit>
        <trans-unit id="5b6bdd0aa0401fe9344207ee1da20b9b5122cf9c" translate="yes" xml:space="preserve">
          <source>The main entry point for your unit tests, with some library-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">你的单元测试的主要入口点,包括一些特定库的配置。你通常不需要编辑这个文件。</target>
        </trans-unit>
        <trans-unit id="82234ab06c7273360d9dcd17147814d4ef5d22aa" translate="yes" xml:space="preserve">
          <source>The main form is visible from the start because the &lt;code&gt;submitted&lt;/code&gt; property is false until you submit the form, as this fragment from the &lt;code&gt;HeroFormComponent&lt;/code&gt; shows:</source>
          <target state="translated">主表单从一开始就可见，因为在您提交表单之前， &lt;code&gt;submitted&lt;/code&gt; 属性是false，因为 &lt;code&gt;HeroFormComponent&lt;/code&gt; 的此片段显示：</target>
        </trans-unit>
        <trans-unit id="89228ab70b4f42a9a833463f6fddc8df700cd69f" translate="yes" xml:space="preserve">
          <source>The main section heading should be followed by a blank line and then the content for that heading.</source>
          <target state="translated">主节标题后应空一行,然后是该标题的内容。</target>
        </trans-unit>
        <trans-unit id="bedc39e25a378ea1e74b444633eb2567c1be4edd" translate="yes" xml:space="preserve">
          <source>The marble library constructs the corresponding observable, which the test sets as the &lt;code&gt;getQuote&lt;/code&gt; spy's return value.</source>
          <target state="translated">大理石库构造相应的observable，测试将其设置为 &lt;code&gt;getQuote&lt;/code&gt; 间谍的返回值。</target>
        </trans-unit>
        <trans-unit id="c152d7d77841879fc15850ada302d9a7604f9a5f" translate="yes" xml:space="preserve">
          <source>The markdown is as follows:</source>
          <target state="translated">标记如下:</target>
        </trans-unit>
        <trans-unit id="8748eb03cd3a2a31a452da21e18e8fe67fa2c88f" translate="yes" xml:space="preserve">
          <source>The markup for the above example is:</source>
          <target state="translated">上述例子的标记是:</target>
        </trans-unit>
        <trans-unit id="82140eb18cda68dafbe96adfecdd4de9ecc691a0" translate="yes" xml:space="preserve">
          <source>The match url, &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt;, will rewrite every request. You'll have to adjust this if you want some requests to get through, such as web API requests.</source>
          <target state="translated">匹配网址 &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt; 将重写每个请求。如果您希望某些请求能够通过，例如Web API请求，则必须进行调整。</target>
        </trans-unit>
        <trans-unit id="3ad0897b9ee03f741fd1c01511860b55ea1d75e0" translate="yes" xml:space="preserve">
          <source>The matrix parameters associated with a segment</source>
          <target state="translated">与某段相关的矩阵参数</target>
        </trans-unit>
        <trans-unit id="a76d5b3e6982be276ae88de5739d5fed54638bd2" translate="yes" xml:space="preserve">
          <source>The matrix parameters scoped to this route</source>
          <target state="translated">该途径的矩阵参数范围</target>
        </trans-unit>
        <trans-unit id="90e33c849863252496fc8d6d880afd0e291d9d8e" translate="yes" xml:space="preserve">
          <source>The maximum threshold for error relative to the baseline.</source>
          <target state="translated">相对于基线的最大误差阈值。</target>
        </trans-unit>
        <trans-unit id="53883cb7c75145e23e98e86bbe3bd3c7cc0a7688" translate="yes" xml:space="preserve">
          <source>The maximum threshold for warning relative to the baseline.</source>
          <target state="translated">相对于基线的最大预警阈值;</target>
        </trans-unit>
        <trans-unit id="513958a5ccc3ab354e2a78eb9e9b0f96ec58220c" translate="yes" xml:space="preserve">
          <source>The mechanism by which the Angular framework synchronizes the state of an application's UI with the state of the data. The change detector checks the current state of the data model whenever it runs, and maintains it as the previous state to compare on the next iteration.</source>
          <target state="translated">Angular框架将应用程序的UI状态与数据状态同步的机制。变化检测器每当运行时都会检查数据模型的当前状态,并将其保持为之前的状态,以便在下一次迭代时进行比较。</target>
        </trans-unit>
        <trans-unit id="87bec61d846af1bc84cef595bb56f5dd04dd2458" translate="yes" xml:space="preserve">
          <source>The messages will look better when you add the private CSS styles to &lt;code&gt;messages.component.css&lt;/code&gt; as listed in one of the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt; tabs below.</source>
          <target state="translated">将私有CSS样式添加到 &lt;code&gt;messages.component.css&lt;/code&gt; 中时，消息看起来会更好，如下面的&lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&amp;ldquo;最终代码查看&amp;rdquo;&lt;/a&gt;标签之一所示。</target>
        </trans-unit>
        <trans-unit id="f85700447fab8625b23e50aafd91dead8193e775" translate="yes" xml:space="preserve">
          <source>The metadata for a component class associates it with a &lt;em&gt;template&lt;/em&gt; that defines a view. A template combines ordinary HTML with Angular &lt;em&gt;directives&lt;/em&gt; and &lt;em&gt;binding markup&lt;/em&gt; that allow Angular to modify the HTML before rendering it for display.</source>
          <target state="translated">组件类的元数据将其与定义视图的&lt;em&gt;模板&lt;/em&gt;相关联。模板将普通的HTML与Angular &lt;em&gt;指令&lt;/em&gt;和&lt;em&gt;绑定标记&lt;/em&gt;结合在一起，使Angular可以在渲染HTML以便显示之前修改HTML。</target>
        </trans-unit>
        <trans-unit id="b6b4287af878accde817a3a3ec85445a29b32903" translate="yes" xml:space="preserve">
          <source>The metadata for a component tells Angular where to get the major building blocks that it needs to create and present the component and its view. In particular, it associates a &lt;em&gt;template&lt;/em&gt; with the component, either directly with inline code, or by reference. Together, the component and its template describe a &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="translated">组件的元数据告诉Angular在哪里获取创建和呈现组件及其视图所需的主要构建块。特别是，它直接通过内联代码或通过引用将&lt;em&gt;模板&lt;/em&gt;与组件关联。组件及其模板一起描述了一个&lt;em&gt;view&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2f487cef4aac90b4da53c7fc9e447312b42cba73" translate="yes" xml:space="preserve">
          <source>The metadata for a service class provides the information Angular needs to make it available to components through &lt;em&gt;dependency injection (DI)&lt;/em&gt;.</source>
          <target state="translated">服务类的元数据提供Angular通过&lt;em&gt;依赖项注入（DI）&lt;/em&gt;使组件可使用的信息。</target>
        </trans-unit>
        <trans-unit id="da2ac4fe5a7aeb6c5ff2fac4828b395f67c727b6" translate="yes" xml:space="preserve">
          <source>The method is called &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; because you configure the router at the application's root level. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.</source>
          <target state="translated">该方法称为 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; ,因为您是在应用程序的根级别配置路由器的。所述 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 方法提供所需要的路由选择服务提供商和指令，并且基于当前的浏览器的URL初始导航。</target>
        </trans-unit>
        <trans-unit id="b7e8112bc543348cbdfdfacbd8dc0c43b7ff54f1" translate="yes" xml:space="preserve">
          <source>The method is called &lt;code&gt;forRoot()&lt;/code&gt; because you configure the router at the application's root level. The &lt;code&gt;forRoot()&lt;/code&gt; method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.</source>
          <target state="translated">该方法称为 &lt;code&gt;forRoot()&lt;/code&gt; ,因为您是在应用程序的根级别配置路由器的。所述 &lt;code&gt;forRoot()&lt;/code&gt; 方法提供所需要的路由选择服务提供商和指令，并且基于当前的浏览器的URL初始导航。</target>
        </trans-unit>
        <trans-unit id="f94bbf603605c0e2d8cf99c4a32636376256c78c" translate="yes" xml:space="preserve">
          <source>The method returns immediately with an empty array if there is no search term. The rest of it closely resembles &lt;code&gt;getHeroes()&lt;/code&gt;, the only significant difference being the URL, which includes a query string with the search term.</source>
          <target state="translated">如果没有搜索词，该方法将立即返回一个空数组。它的其余部分与 &lt;code&gt;getHeroes()&lt;/code&gt; 非常相似，唯一的区别是URL，URL包括带有搜索词的查询字符串。</target>
        </trans-unit>
        <trans-unit id="b8bd6826e2d0fcb10e3e7991b3567fdd80af26cd" translate="yes" xml:space="preserve">
          <source>The method that is called when the disabled status changes.</source>
          <target state="translated">禁用状态改变时调用的方法。</target>
        </trans-unit>
        <trans-unit id="ce97f7be34496d68074082adcce30ef92c9fdc1b" translate="yes" xml:space="preserve">
          <source>The method that is called when the value changes</source>
          <target state="translated">值变化时调用的方法</target>
        </trans-unit>
        <trans-unit id="962f054aa845ba6ec1c4ab8efa6ec09198bf5182" translate="yes" xml:space="preserve">
          <source>The method then, like any validator, returns &lt;code&gt;null&lt;/code&gt; if the form is valid, and &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; if it is not. This validator handles any potential errors with the &lt;code&gt;catchError&lt;/code&gt; operator. In this case, the validator treats the &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; error as a successful validation, because failure to make a validation request does not necessarily mean that the alter ego is invalid. You could handle the error differently and return the &lt;code&gt;ValidationError&lt;/code&gt; object instead.</source>
          <target state="translated">然后，该方法与任何验证器一样，如果该表单有效，则返回 &lt;code&gt;null&lt;/code&gt; ,如果无效，则返回 &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; 。该验证器使用 &lt;code&gt;catchError&lt;/code&gt; 运算符处理任何潜在的错误。在这种情况下，验证器将 &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; 错误视为成功验证，因为未提出验证请求并不一定意味着更改自我无效。您可以以不同的方式处理错误，然后返回 &lt;code&gt;ValidationError&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="6db6edec01a98f400bce87dd07f007a8049e3a79" translate="yes" xml:space="preserve">
          <source>The methods now return observables of type &lt;code&gt;PhoneData&lt;/code&gt; and &lt;code&gt;PhoneData[]&lt;/code&gt;. This is a type you don't have yet. Add a simple interface for it:</source>
          <target state="translated">这些方法现在返回类型为 &lt;code&gt;PhoneData&lt;/code&gt; 和 &lt;code&gt;PhoneData[]&lt;/code&gt; 可观察对象。这是您还没有的类型。为此添加一个简单的界面：</target>
        </trans-unit>
        <trans-unit id="1f8e626c9a26aabb72b198cad89d9bbfb757820a" translate="yes" xml:space="preserve">
          <source>The microsyntax parser title-cases all directives and prefixes them with the directive's attribute name, such as &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; input properties, &lt;code&gt;of&lt;/code&gt; and &lt;code&gt;trackBy&lt;/code&gt;, become &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt;, respectively. That's how the directive learns that the list is &lt;code&gt;heroes&lt;/code&gt; and the track-by function is &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">microsyntax解析器对所有指令进行标题 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ，并在其前面加上指令的属性名称，例如ngFor。例如，的 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 输入属性 &lt;code&gt;of&lt;/code&gt; 和 &lt;code&gt;trackBy&lt;/code&gt; 分别变为 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt; 。这就是该指令得知列表是 &lt;code&gt;heroes&lt;/code&gt; ，而跟踪功能是 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt; 的方式。</target>
        </trans-unit>
        <trans-unit id="2cc0f751d86f93164b56bc95c817abc075bbb44e" translate="yes" xml:space="preserve">
          <source>The microsyntax parser title-cases all directives and prefixes them with the directive's attribute name, such as &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; input properties, &lt;code&gt;of&lt;/code&gt; and &lt;code&gt;trackBy&lt;/code&gt;, become &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;ngForTrackBy&lt;/code&gt;, respectively. That's how the directive learns that the list is &lt;code&gt;heroes&lt;/code&gt; and the track-by function is &lt;code&gt;trackById&lt;/code&gt;.</source>
          <target state="translated">microsyntax解析器对所有指令进行标题 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ，并为它们加上指令的属性名称（例如ngFor）作为前缀。例如，的 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 输入属性 &lt;code&gt;of&lt;/code&gt; 和 &lt;code&gt;trackBy&lt;/code&gt; 分别变为 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;ngForTrackBy&lt;/code&gt; 。这是该指令了解列表为 &lt;code&gt;heroes&lt;/code&gt; 且跟踪功能为 &lt;code&gt;trackById&lt;/code&gt; 的方式。</target>
        </trans-unit>
        <trans-unit id="2f96b0734984c3136ba1534c85bf98f17087789f" translate="yes" xml:space="preserve">
          <source>The microtasks queue is drained at the very start of this function and after any timer callback has been executed.</source>
          <target state="translated">微任务队列在该函数开始时和任何定时器回调被执行后被排空。</target>
        </trans-unit>
        <trans-unit id="e526a37fcc75b530dfc85c73dede19ed15c064c6" translate="yes" xml:space="preserve">
          <source>The minification hazard is also compelling, if less obvious. Imagine a sorting pipe applied to a list of heroes. The list might be sorted by hero &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;planet&lt;/code&gt; of origin properties in the following way:</source>
          <target state="translated">即使不那么明显，缩小危险也很引人注目。想象一下一个应用于英雄列表的排序管道。该列表可以按以下方式按英雄 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;planet&lt;/code&gt; 来源属性排序：</target>
        </trans-unit>
        <trans-unit id="bd932f1b587e9efc31a4eaca3808cc0ea987cfe9" translate="yes" xml:space="preserve">
          <source>The minimum requirement for developing Angular applications with Visual Studio is Update 3. Earlier versions do not follow the best practices for developing applications with TypeScript. To view your version of Visual Studio 2015, go to &lt;code&gt;Help | About Visual Studio&lt;/code&gt;.</source>
          <target state="translated">使用Visual Studio开发Angular应用程序的最低要求是Update3。早期版本未遵循使用TypeScript开发应用程序的最佳实践。要查看您的Visual Studio 2015版本，请转到&amp;ldquo; &lt;code&gt;Help | About Visual Studio&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68295edfe2e8f66e1f3a2395dc30f8973b6dac7d" translate="yes" xml:space="preserve">
          <source>The minimum threshold for error relative to the baseline.</source>
          <target state="translated">相对于基线的最小误差阈值。</target>
        </trans-unit>
        <trans-unit id="cd6ff93775e18fec4a2607b05a0e4e27b92ea554" translate="yes" xml:space="preserve">
          <source>The minimum threshold for warning relative to the baseline.</source>
          <target state="translated">(a)相对于基线的最低预警阈值;</target>
        </trans-unit>
        <trans-unit id="0b1963b4bbd40e94677e855aa6f7fa65aebec820" translate="yes" xml:space="preserve">
          <source>The missing &lt;code&gt;FormsModule&lt;/code&gt;</source>
          <target state="translated">缺少的 &lt;code&gt;FormsModule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d2da31ed6256743738e7430a7ee34e71e732e9c" translate="yes" xml:space="preserve">
          <source>The model matcher relies on AngularJS &lt;code&gt;ng-model&lt;/code&gt;</source>
          <target state="translated">模型匹配器依赖于AngularJS &lt;code&gt;ng-model&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0bae318ee369692c49367c249df5e47fb9b292a" translate="yes" xml:space="preserve">
          <source>The model-to-view diagram shows how a programmatic change to the model is propagated to the view through the following steps.</source>
          <target state="translated">模型到视图图显示了如何通过以下步骤将模型的程序性更改传播到视图。</target>
        </trans-unit>
        <trans-unit id="2b8ab532aba116bc7b0be679d9f1dd21f26ec26a" translate="yes" xml:space="preserve">
          <source>The model-to-view diagram shows how data flows from model to view when the &lt;code&gt;favoriteColor&lt;/code&gt; changes from &lt;em&gt;Blue&lt;/em&gt; to &lt;em&gt;Red&lt;/em&gt;, through the following steps</source>
          <target state="translated">模型到视图图通过以下步骤显示了当 &lt;code&gt;favoriteColor&lt;/code&gt; 从&lt;em&gt;Blue&lt;/em&gt;变为&lt;em&gt;Red时&lt;/em&gt;，数据如何从模型流向视图。</target>
        </trans-unit>
        <trans-unit id="1b612c6bfda69609e1109102317e5bc624c35366" translate="yes" xml:space="preserve">
          <source>The module ID of the module that contains the component. The component must be able to resolve relative URLs for templates and styles. SystemJS exposes the &lt;code&gt;__moduleName&lt;/code&gt; variable within each module. In CommonJS, this can be set to &lt;code&gt;module.id&lt;/code&gt;.</source>
          <target state="translated">包含组件的模块的模块ID。该组件必须能够解析模板和样式的相对URL。SystemJS 在每个模块中公开 &lt;code&gt;__moduleName&lt;/code&gt; 变量。在CommonJS中，可以将其设置为 &lt;code&gt;module.id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="24999c2480339abdb977d3c623a6abb6da2d0ad2" translate="yes" xml:space="preserve">
          <source>The module ID to use for importing a flat module (when &lt;code&gt;flatModuleOutFile&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;). References generated by the template compiler use this module name when importing symbols from the flat module. Ignored if &lt;code&gt;flatModuleOutFile&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">用于导入平面模块的模块ID（当 &lt;code&gt;flatModuleOutFile&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时）。从平面模块导入符号时，由模板编译器生成的引用使用此模块名称。如果 &lt;code&gt;flatModuleOutFile&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ,则忽略。</target>
        </trans-unit>
        <trans-unit id="7d1e56193d42e549f91f73ce49b0feaa87bbedad" translate="yes" xml:space="preserve">
          <source>The module ID to use for importing a flat module (when &lt;code&gt;flatModuleOutFile&lt;/code&gt; is true). References generated by the template compiler use this module name when importing symbols from the flat module. Ignored if &lt;code&gt;flatModuleOutFile&lt;/code&gt; is false.</source>
          <target state="translated">用于导入平面模块的模块ID（当 &lt;code&gt;flatModuleOutFile&lt;/code&gt; 为true时）。从平面模块导入符号时，模板编译器生成的引用使用此模块名称。如果 &lt;code&gt;flatModuleOutFile&lt;/code&gt; 为false，则忽略。</target>
        </trans-unit>
        <trans-unit id="5455a8d2855bb168b7bc39366f2e640359d610c2" translate="yes" xml:space="preserve">
          <source>The module definition passed to &lt;code&gt;configureTestingModule&lt;/code&gt; is a subset of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">传递给 &lt;code&gt;configureTestingModule&lt;/code&gt; 的模块定义是 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据属性的子集。</target>
        </trans-unit>
        <trans-unit id="f9ff3126a97dd2fd2099d3e56f0696f54b70dd23" translate="yes" xml:space="preserve">
          <source>The module's &lt;code&gt;declarations&lt;/code&gt; array tells Angular which components belong to that module. As you create more components, add them to &lt;code&gt;declarations&lt;/code&gt;.</source>
          <target state="translated">模块的 &lt;code&gt;declarations&lt;/code&gt; 数组告诉Angular哪些​​组件属于该模块。创建更多组件时，请将它们添加到 &lt;code&gt;declarations&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77ab0288332bb3f75ca93faaa0848559f0efc9c4" translate="yes" xml:space="preserve">
          <source>The module's &lt;code&gt;imports&lt;/code&gt; array appears exclusively in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata object. It tells Angular about other NgModules that this particular module needs to function properly.</source>
          <target state="translated">模块的 &lt;code&gt;imports&lt;/code&gt; 数组仅出现在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据对象中。它告诉Angular有关其他NgModule的信息，此特定模块需要正常运行。</target>
        </trans-unit>
        <trans-unit id="37bab47b6d2fddd6ff6f0de2be55dffe5f0d68d5" translate="yes" xml:space="preserve">
          <source>The modules sets up the router to be used for testing. It provides spy implementations of &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt;, and &lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt;&lt;code&gt;NgModuleFactoryLoader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">这些模块设置用于测试的路由器。它提供了 &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 和&lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt; &lt;code&gt;NgModuleFactoryLoader&lt;/code&gt; 的&lt;/a&gt;间谍实现。</target>
        </trans-unit>
        <trans-unit id="b8f968dae1b11cc243c9d8715ef10f99f4c40e38" translate="yes" xml:space="preserve">
          <source>The most common property binding sets an element property to a component property value. An example is binding the &lt;code&gt;src&lt;/code&gt; property of an image element to a component's &lt;code&gt;itemImageUrl&lt;/code&gt; property:</source>
          <target state="translated">最常见的属性绑定将元素属性设置为组件属性值。一个示例是将图像元素的 &lt;code&gt;src&lt;/code&gt; 属性绑定到组件的 &lt;code&gt;itemImageUrl&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="0e2d09ba31c42d96a1468928f0746f68810289cf" translate="yes" xml:space="preserve">
          <source>The most common use of schematics, however, is to integrate an Angular library with the Angular CLI. You can do this by creating the schematic files directly within the library project in an Angular workspace, without using the Schematics CLI. See &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">但是，原理图最常见的用途是将Angular库与Angular CLI集成在一起。您可以通过直接在Angular工作空间的库项目中创建原理图文件来执行此操作，而无需使用Schematics CLI。请参阅&lt;a href=&quot;schematics-for-libraries&quot;&gt;库原理图&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f03ef21da8a8d1525f2de629dfd2cc725b3a1d3c" translate="yes" xml:space="preserve">
          <source>The most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don't require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via &lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt; and if needed, these tasks can reenter the Angular zone via &lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;.</source>
          <target state="translated">此服务最常见的用途是在启动包含一个或多个不需要Angular处理UI更新或错误处理的异步任务的工作时优化性能。可以通过&lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt;启动这些任务，如果需要，可以通过&lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;重新进入Angular区域。</target>
        </trans-unit>
        <trans-unit id="0354cd5c6e461fee6e64880bb33502f1d53e4525" translate="yes" xml:space="preserve">
          <source>The most common validation is making a field required. The following example shows how to add a required validation to the &lt;code&gt;firstName&lt;/code&gt; control and display the result of validation.</source>
          <target state="translated">最常见的验证是将字段设为必填字段。下面的示例演示如何将所需的验证添加到 &lt;code&gt;firstName&lt;/code&gt; 控件并显示验证结果。</target>
        </trans-unit>
        <trans-unit id="d721ef30c8c2d93ee7d6cc51782e960cbb70e267" translate="yes" xml:space="preserve">
          <source>The most common validation is making a field required. This section describes how to add a required validation to the &lt;code&gt;firstName&lt;/code&gt; control.</source>
          <target state="translated">最常见的验证是将字段设为必填项。本节介绍如何向 &lt;code&gt;firstName&lt;/code&gt; 控件添加所需的验证。</target>
        </trans-unit>
        <trans-unit id="5bfdb12a001db3d37570c28c95a12f339133fefb" translate="yes" xml:space="preserve">
          <source>The most common way to get a hold of shared services is through Angular &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection&lt;/a&gt;, rather than through the module system (importing a module will result in a new service instance, which is not a typical usage).</source>
          <target state="translated">获得共享服务的最常见方法是通过Angular &lt;a href=&quot;dependency-injection&quot;&gt;依赖注入&lt;/a&gt;，而不是通过模块系统（导入模块将导致新的服务实例，这不是典型用法）。</target>
        </trans-unit>
        <trans-unit id="a8d2e49dd96691f76f1b0107dae749dd4d4cfd1a" translate="yes" xml:space="preserve">
          <source>The most important &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator annotates the top-level &lt;strong&gt;AppModule&lt;/strong&gt; class.</source>
          <target state="translated">最重要的 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器为顶级&lt;strong&gt;AppModule&lt;/strong&gt;类添加注释。</target>
        </trans-unit>
        <trans-unit id="696217913dab3bcc82d27ff3f8a194e99b19b4d3" translate="yes" xml:space="preserve">
          <source>The most recent stable released version of Angular appears in the &lt;a href=&quot;../index&quot;&gt;Angular documentation&lt;/a&gt; at the bottom of the left side navigation. For example, &lt;code&gt;stable (v5.2.9)&lt;/code&gt;.</source>
          <target state="translated">Angular的最新稳定发行版显示在左侧导航&lt;a href=&quot;../index&quot;&gt;栏&lt;/a&gt;底部的Angular文档中。例如， &lt;code&gt;stable (v5.2.9)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b203ac14927d287cb1b24febc038b8400723e19" translate="yes" xml:space="preserve">
          <source>The most straight forward way to get accurate typings is to cast the return value of the relevant DOM methods to the correct type. For that, you can use the &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; types (both exported from &lt;code&gt;@angular/elements&lt;/code&gt;):</source>
          <target state="translated">获得准确类型的最直接方法是将相关DOM方法的返回值转换为正确的类型。为此，您可以使用 &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; 类型（均从 &lt;code&gt;@angular/elements&lt;/code&gt; 导出）：</target>
        </trans-unit>
        <trans-unit id="6a00a106ce13b09ae830b89d6a9ec79692548add" translate="yes" xml:space="preserve">
          <source>The name control sets up two built-in validators&amp;mdash;&lt;code&gt;Validators.required&lt;/code&gt; and &lt;code&gt;Validators.minLength(4)&lt;/code&gt;&amp;mdash;and one custom validator, &lt;code&gt;forbiddenNameValidator&lt;/code&gt;. For more details see the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section in this guide.</source>
          <target state="translated">名称控件设置了两个内置的验证 &lt;code&gt;Validators.minLength(4)&lt;/code&gt; &lt;code&gt;Validators.required&lt;/code&gt; 和Validators.minLength（4））以及一个自定义验证器 &lt;code&gt;forbiddenNameValidator&lt;/code&gt; 。有关更多详细信息，请参阅本指南中的&amp;ldquo; &lt;a href=&quot;form-validation#custom-validators&quot;&gt;自定义验证器&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="bd303e4295a148f60c77b1b8f935a0d9785ceabf" translate="yes" xml:space="preserve">
          <source>The name for the control</source>
          <target state="translated">控制的名称</target>
        </trans-unit>
        <trans-unit id="3f5bffaecc38c665fdf4934a9248d6901b121e04" translate="yes" xml:space="preserve">
          <source>The name of binding variable</source>
          <target state="translated">绑定变量的名称</target>
        </trans-unit>
        <trans-unit id="ee11a869e2d385aca970768492e28306d0c02610" translate="yes" xml:space="preserve">
          <source>The name of related Universal app.</source>
          <target state="translated">相关通用应用的名称。</target>
        </trans-unit>
        <trans-unit id="f31111a73d24d0ea080510639dab3203d39876c6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; used to render the route. For an unnamed outlet, the outlet name is &lt;em&gt;primary&lt;/em&gt;.</source>
          <target state="translated">用于呈现路由的 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的名称。对于未命名的出口，出口名称为&lt;em&gt;primary&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="374b365f9ef09a5c20199d4b6c524488b9c9eac6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; used to render the route. For an unnamed outlet, the outlet name is primary.</source>
          <target state="translated">用于呈现路由的 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的名称。对于未命名的插座，插座名称是主要的。</target>
        </trans-unit>
        <trans-unit id="2830e043f06ce13b7965727721f4eeda24ae55dd" translate="yes" xml:space="preserve">
          <source>The name of the DOM property to which the input property is bound.</source>
          <target state="translated">输入属性所绑定的DOM属性的名称。</target>
        </trans-unit>
        <trans-unit id="9ea6252fe6bfcbe28e4a7dbd02f705de12a2b425" translate="yes" xml:space="preserve">
          <source>The name of the DOM property to which the output property is bound.</source>
          <target state="translated">输出属性所绑定的DOM属性的名称。</target>
        </trans-unit>
        <trans-unit id="a34788f4dbd8d335c3d16d2725eb10d84db5f8eb" translate="yes" xml:space="preserve">
          <source>The name of the Karma configuration file.</source>
          <target state="translated">Karma配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="7bc259cccdbc4feb53380144d564c6c9acfe48ea" translate="yes" xml:space="preserve">
          <source>The name of the NgModule.</source>
          <target state="translated">NgModule的名称。</target>
        </trans-unit>
        <trans-unit id="31c15168aefcb147a81f6d56a4fb545633af3cbb" translate="yes" xml:space="preserve">
          <source>The name of the Protractor configuration file.</source>
          <target state="translated">Protractor 配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="a5161c8757038b183e435833dbc3d24f71cae7ec" translate="yes" xml:space="preserve">
          <source>The name of the TSLint configuration file.</source>
          <target state="translated">TSLint配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="f4e2073f1c9d163ee7d923261881502e64ca10d8" translate="yes" xml:space="preserve">
          <source>The name of the TypeScript configuration file for tests.</source>
          <target state="translated">测试的TypeScript配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="ca18d6818e4f88c372ec7928897bf20767d10b87" translate="yes" xml:space="preserve">
          <source>The name of the TypeScript configuration file.</source>
          <target state="translated">TypeScript配置文件的名称。</target>
        </trans-unit>
        <trans-unit id="23b607725624b97d6681994d12395b88f5004fa9" translate="yes" xml:space="preserve">
          <source>The name of the application directory.</source>
          <target state="translated">应用程序目录的名称。</target>
        </trans-unit>
        <trans-unit id="9bf434ae63b3e0efedb894f4541221d8148e3143" translate="yes" xml:space="preserve">
          <source>The name of the application folder.</source>
          <target state="translated">应用程序文件夹的名称。</target>
        </trans-unit>
        <trans-unit id="98dd415e8f45a9d589f3ab22fe8844e6831aaeb3" translate="yes" xml:space="preserve">
          <source>The name of the attribute that has changed.</source>
          <target state="translated">已更改的属性名称。</target>
        </trans-unit>
        <trans-unit id="51e356de047f692621f1ac826eda16393c2f1d57" translate="yes" xml:space="preserve">
          <source>The name of the attribute whose value can be injected.</source>
          <target state="translated">可注入值的属性名称。</target>
        </trans-unit>
        <trans-unit id="0049c017534779feed3c5a4e10e97646ee097a91" translate="yes" xml:space="preserve">
          <source>The name of the bundle (for &lt;code&gt;type=bundle&lt;/code&gt;).</source>
          <target state="translated">捆绑包的名称（对于 &lt;code&gt;type=bundle&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b095d5334d88f321e32a2bec17d4998f29183ab5" translate="yes" xml:space="preserve">
          <source>The name of the component.</source>
          <target state="translated">组件的名称;</target>
        </trans-unit>
        <trans-unit id="298fb556486176a59b92ee293ee40dc19082796f" translate="yes" xml:space="preserve">
          <source>The name of the enum.</source>
          <target state="translated">枚举的名称。</target>
        </trans-unit>
        <trans-unit id="4ac12cbaf7ddc32136d2246eea1e25012d5463a2" translate="yes" xml:space="preserve">
          <source>The name of the event to listen for.</source>
          <target state="translated">要监听的事件名称。</target>
        </trans-unit>
        <trans-unit id="3effaffa0019768d26589b5c5f6cbf735fb6f172" translate="yes" xml:space="preserve">
          <source>The name of the index file</source>
          <target state="translated">索引文件的名称</target>
        </trans-unit>
        <trans-unit id="dd8fbb4b7c6c6ffa46e3d5696e9bed15930b9636" translate="yes" xml:space="preserve">
          <source>The name of the interceptor.</source>
          <target state="translated">拦截器的名称。</target>
        </trans-unit>
        <trans-unit id="d4bad0ca50233e344d10d5f4399e54a6b4d776fb" translate="yes" xml:space="preserve">
          <source>The name of the interface.</source>
          <target state="translated">接口的名称。</target>
        </trans-unit>
        <trans-unit id="e0dae223e862076c307be059fb3da2195512e15e" translate="yes" xml:space="preserve">
          <source>The name of the library.</source>
          <target state="translated">图书馆的名称。</target>
        </trans-unit>
        <trans-unit id="0e4e86dc522df63f846535a545048ecb92d2ef5a" translate="yes" xml:space="preserve">
          <source>The name of the main entry-point file.</source>
          <target state="translated">主入口点文件的名称。</target>
        </trans-unit>
        <trans-unit id="1ae438b15dd77fd8ad30e891d288ec894f9c8b5a" translate="yes" xml:space="preserve">
          <source>The name of the new app.</source>
          <target state="translated">新应用的名称。</target>
        </trans-unit>
        <trans-unit id="c05ae963758a0b1ea71e624aa37d935aad1862cc" translate="yes" xml:space="preserve">
          <source>The name of the new class.</source>
          <target state="translated">新类的名称。</target>
        </trans-unit>
        <trans-unit id="1cc12f20eb95c9010460b29584ae08cc288e4233" translate="yes" xml:space="preserve">
          <source>The name of the new directive.</source>
          <target state="translated">新指令的名称。</target>
        </trans-unit>
        <trans-unit id="96eddd4bb283e97a16b4571fb2343a6f659a5dbf" translate="yes" xml:space="preserve">
          <source>The name of the new resolver.</source>
          <target state="translated">新解析器的名称。</target>
        </trans-unit>
        <trans-unit id="e94c910c3587ab8593febb3f805bcd0616accd65" translate="yes" xml:space="preserve">
          <source>The name of the new route guard.</source>
          <target state="translated">新航线卫士的名字。</target>
        </trans-unit>
        <trans-unit id="05fef20c845e23cfb269d81a5518f8c2dc19a116" translate="yes" xml:space="preserve">
          <source>The name of the new workspace and initial project.</source>
          <target state="translated">新工作区的名称和初始项目。</target>
        </trans-unit>
        <trans-unit id="4f3f5dc853fd89760b7214e5ccac1a838a94a12a" translate="yes" xml:space="preserve">
          <source>The name of the pipe.</source>
          <target state="translated">管的名字。</target>
        </trans-unit>
        <trans-unit id="84108afbf0ae3d52386033a2d683d8a1ae512bb7" translate="yes" xml:space="preserve">
          <source>The name of the polyfills file.</source>
          <target state="translated">polyfills文件的名称。</target>
        </trans-unit>
        <trans-unit id="60a0ead0a1aaa4e2f2b4233c956828d7b450a96e" translate="yes" xml:space="preserve">
          <source>The name of the project in which to create the enum. Default is the configured default project for the workspace.</source>
          <target state="translated">创建枚举的项目名称。默认情况下是工作区配置的默认项目。</target>
        </trans-unit>
        <trans-unit id="acc889a5813553b91add89b3f03c313d7a4b86e6" translate="yes" xml:space="preserve">
          <source>The name of the project to build. Can be an application or a library.</source>
          <target state="translated">要构建的项目名称。可以是一个应用程序或一个库。</target>
        </trans-unit>
        <trans-unit id="5db5ca31c4c34286b71367170d486bbec874adc3" translate="yes" xml:space="preserve">
          <source>The name of the project to deploy.</source>
          <target state="translated">要部署的项目名称。</target>
        </trans-unit>
        <trans-unit id="877a3cd4d86d1c683955bcdb8afd34543824fbc6" translate="yes" xml:space="preserve">
          <source>The name of the project to lint.</source>
          <target state="translated">的项目名称,以衬托。</target>
        </trans-unit>
        <trans-unit id="0c0ea6bda23de88805444a87357d6fc67352074e" translate="yes" xml:space="preserve">
          <source>The name of the project.</source>
          <target state="translated">项目名称;</target>
        </trans-unit>
        <trans-unit id="5cca2fedb252b808c68e0001d796a768f14fe5b8" translate="yes" xml:space="preserve">
          <source>The name of the related client app.</source>
          <target state="translated">相关客户端应用的名称。</target>
        </trans-unit>
        <trans-unit id="0e1d1073f831d9e075296e86ca7a2b766cf84ddc" translate="yes" xml:space="preserve">
          <source>The name of the related client app. Required in place of &quot;project&quot;.</source>
          <target state="translated">相关客户端应用的名称。需要代替 &quot;项目&quot;。</target>
        </trans-unit>
        <trans-unit id="2b4489e5f4e2653828a596bc22eebe8452c680c4" translate="yes" xml:space="preserve">
          <source>The name of the root NgModule class.</source>
          <target state="translated">NgModule根类的名称。</target>
        </trans-unit>
        <trans-unit id="39f772f8508b793cd949b7d95f84bb953733b091" translate="yes" xml:space="preserve">
          <source>The name of the root NgModule file.</source>
          <target state="translated">NgModule根文件的名称。</target>
        </trans-unit>
        <trans-unit id="b9c1e32c2285950cd5c0ea125336cadcabee7ee5" translate="yes" xml:space="preserve">
          <source>The name of the root module class.</source>
          <target state="translated">根模块类的名称。</target>
        </trans-unit>
        <trans-unit id="e79f3a656af3a23c870229cdcf812e615d254ba2" translate="yes" xml:space="preserve">
          <source>The name of the root module file</source>
          <target state="translated">根模块文件的名称</target>
        </trans-unit>
        <trans-unit id="b9fb5011772f2fe11e2099c647d76e3ab58ce091" translate="yes" xml:space="preserve">
          <source>The name of the routing NgModule should parallel the name of its companion NgModule, using the suffix &lt;code&gt;Routing&lt;/code&gt;. For example, &lt;code&gt;ContactModule&lt;/code&gt; in &lt;code&gt;contact.module.ts&lt;/code&gt; has a routing NgModule named &lt;code&gt;ContactRoutingModule&lt;/code&gt; in &lt;code&gt;contact-routing.module.ts&lt;/code&gt;.</source>
          <target state="translated">路由NgModule的名称应使用后缀 &lt;code&gt;Routing&lt;/code&gt; 与其并行NgModule的名称平行。例如， &lt;code&gt;ContactModule&lt;/code&gt; 在 &lt;code&gt;contact.module.ts&lt;/code&gt; 具有路由NgModule名为 &lt;code&gt;ContactRoutingModule&lt;/code&gt; 在 &lt;code&gt;contact-routing.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1af03b5050c51d9047b1136086eb139e2bfa56a" translate="yes" xml:space="preserve">
          <source>The name of the routing module should parallel the name of its companion module, using the suffix &quot;Routing&quot;. For example, &lt;code&gt;FooModule&lt;/code&gt; in &lt;code&gt;foo.module.ts&lt;/code&gt; has a routing module named &lt;code&gt;FooRoutingModule&lt;/code&gt; in &lt;code&gt;foo-routing.module.ts&lt;/code&gt;. If the companion module is the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;AppRoutingModule&lt;/code&gt; adds router configuration to its imports with &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt;. All other routing modules are children that import &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt;.</source>
          <target state="translated">路由模块的名称应与后缀模块的名称平行，并使用后缀&amp;ldquo; Routing&amp;rdquo;。例如， &lt;code&gt;FooModule&lt;/code&gt; 在 &lt;code&gt;foo.module.ts&lt;/code&gt; 具有名为路由模块 &lt;code&gt;FooRoutingModule&lt;/code&gt; 在 &lt;code&gt;foo-routing.module.ts&lt;/code&gt; 。如果配套模块是根 &lt;code&gt;AppModule&lt;/code&gt; ，则 &lt;code&gt;AppRoutingModule&lt;/code&gt; 将路由器配置添加到其导入中，使用 &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; 。所有其他路由模块都是导入 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; 的子级。</target>
        </trans-unit>
        <trans-unit id="5cb7b85a598a028b7c4208d8cba347b086c65cad" translate="yes" xml:space="preserve">
          <source>The name of the service.</source>
          <target state="translated">的服务名称。</target>
        </trans-unit>
        <trans-unit id="eb80b5650274c357613ae29fbc7ee992a7295266" translate="yes" xml:space="preserve">
          <source>The name of the state from which the animation is triggered.</source>
          <target state="translated">触发动画的状态名称。</target>
        </trans-unit>
        <trans-unit id="642538b3255d34b3733d341540a32bdf0783bc44" translate="yes" xml:space="preserve">
          <source>The name of the state in which the animation completes.</source>
          <target state="translated">动画完成的状态名称。</target>
        </trans-unit>
        <trans-unit id="9e83f52375e1bbe1dd110ed6d2d07fc578d60fbe" translate="yes" xml:space="preserve">
          <source>The name of the style.</source>
          <target state="translated">式的名称。</target>
        </trans-unit>
        <trans-unit id="d5dd95f899057794c059b568058ef2fda9777be8" translate="yes" xml:space="preserve">
          <source>The name of the test entry-point file.</source>
          <target state="translated">测试入口点文件的名称。</target>
        </trans-unit>
        <trans-unit id="f00cd6c1142679bd0fe1c3ebd4ca78600af96a2c" translate="yes" xml:space="preserve">
          <source>The name of the worker.</source>
          <target state="translated">工的名字。</target>
        </trans-unit>
        <trans-unit id="6c69a9d664620bbeca7664bd75d1ad6ed2baaaed" translate="yes" xml:space="preserve">
          <source>The names of package(s) to update.</source>
          <target state="translated">要更新的软件包名称。</target>
        </trans-unit>
        <trans-unit id="1abdc0f45b3ba1f3f4aab750a1abd18ac0401e50" translate="yes" xml:space="preserve">
          <source>The namespace for the new element.</source>
          <target state="translated">新元素的命名空间。</target>
        </trans-unit>
        <trans-unit id="9443280c899669a2c6c547ccf058f0563c8d9971" translate="yes" xml:space="preserve">
          <source>The namespace in which the attribute is defined.</source>
          <target state="translated">定义属性的命名空间。</target>
        </trans-unit>
        <trans-unit id="5706a1bb56e527d4bef0f37bae074bd6120e33cc" translate="yes" xml:space="preserve">
          <source>The namespace.</source>
          <target state="translated">命名空间;</target>
        </trans-unit>
        <trans-unit id="5de4b279d3860800c1274a15257bfb7aa3d5e166" translate="yes" xml:space="preserve">
          <source>The native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element doesn't have a &lt;code&gt;form&lt;/code&gt; property, but the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive does, which allows disabling the submit button if the &lt;code&gt;itemForm.form.valid&lt;/code&gt; is invalid and passing the entire form control tree to the parent component's &lt;code&gt;onSubmit()&lt;/code&gt; method.</source>
          <target state="translated">原生 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 元素没有 &lt;code&gt;form&lt;/code&gt; 属性，但是 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令却有，如果在 &lt;code&gt;itemForm.form.valid&lt;/code&gt; 无效的情况下，并将整个表单控制树传递给父组件的 &lt;code&gt;onSubmit()&lt;/code&gt; 方法。 。</target>
        </trans-unit>
        <trans-unit id="f53c7525b5762013b1501a0e4c46863466a89451" translate="yes" xml:space="preserve">
          <source>The native DOM element at the root of the component.</source>
          <target state="translated">位于组件根部的本地DOM元素。</target>
        </trans-unit>
        <trans-unit id="29761c2a932d59dd3f7b79be5a29968749831e65" translate="yes" xml:space="preserve">
          <source>The native element at the root of the component.</source>
          <target state="translated">位于组件根部的原生元素。</target>
        </trans-unit>
        <trans-unit id="dff590b09b3db22a6980b41fca483eda9e9a641b" translate="yes" xml:space="preserve">
          <source>The navigation links at the top, left, and bottom of the screen are generated from the JSON configuration file, &lt;code&gt;content/navigation.json&lt;/code&gt;.</source>
          <target state="translated">屏幕顶部，左侧和底部的导航链接是根据JSON配置文件生成的， &lt;code&gt;content/navigation.json&lt;/code&gt; 生成的。</target>
        </trans-unit>
        <trans-unit id="3403c9d3de501a04ade350bc06e6b24f8560df85" translate="yes" xml:space="preserve">
          <source>The navigation state that was previously supplied to the &lt;code&gt;pushState&lt;/code&gt; call, when the navigation is triggered by a &lt;code&gt;popstate&lt;/code&gt; event. Otherwise null.</source>
          <target state="translated">当由 &lt;code&gt;popstate&lt;/code&gt; 事件触发导航时，先前提供给 &lt;code&gt;pushState&lt;/code&gt; 调用的导航状态。否则为null。</target>
        </trans-unit>
        <trans-unit id="4c5c2daf86d485506deecd53ed0077e779f790db" translate="yes" xml:space="preserve">
          <source>The need for this polyfill was removed in Angular version 8.0 (&lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;see #14473&lt;/a&gt;), rendering the presence of the poylfill in most Angular applications unnecessary. Because the polyfill can be depended on by 3rd-party libraries, instead of removing it from all Angular projects, we are deprecating the requirement for this polyfill as of version 8.0. This should give library authors and application developers sufficient time to evaluate if they need the polyfill, and perform any refactoring necessary to remove the dependency on it.</source>
          <target state="translated">在Angular 8.0版中不再需要这种polyfill（&lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;请参阅＃14473&lt;/a&gt;），从而使大多数Angular应用程序中都不需要使用poylfill。因为polyfill可以由第三方库依赖，而不是从所有Angular项目中删除它，所以我们不建议从8.0版本开始使用此polyfill。这应该给库作者和应用程序开发人员足够的时间来评估他们是否需要polyfill，并执行必要的重构以消除对其的依赖。</target>
        </trans-unit>
        <trans-unit id="9926b8eddb28f5b61fe9e5c8e2449b04b9fca67b" translate="yes" xml:space="preserve">
          <source>The net result is an AngularJS directive called &lt;code&gt;heroDetail&lt;/code&gt;, that you can use like any other directive in AngularJS templates.</source>
          <target state="translated">最终结果是一个名为 &lt;code&gt;heroDetail&lt;/code&gt; 的AngularJS指令，您可以像AngularJS模板中的任何其他指令一样使用它。</target>
        </trans-unit>
        <trans-unit id="363efe528cca3a39d4ac1f20d51e40123493e611" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;Phone&lt;/code&gt; service has the same features as the original, &lt;code&gt;ngResource&lt;/code&gt;-based service. Because it's an Angular service, you register it with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">新的 &lt;code&gt;Phone&lt;/code&gt; 服务具有与原始的基于 &lt;code&gt;ngResource&lt;/code&gt; 的服务相同的功能。因为它是Angular服务，所以您要在 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 提供程序中注册它：</target>
        </trans-unit>
        <trans-unit id="df21a5f33d940b8fd543f9a1645f478b67bd8405" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;PhoneListComponent&lt;/code&gt; uses the Angular &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, located in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;. Add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports, declare the new &lt;code&gt;PhoneListComponent&lt;/code&gt; and finally add it to &lt;code&gt;entryComponents&lt;/code&gt; since you downgraded it:</source>
          <target state="translated">新 &lt;code&gt;PhoneListComponent&lt;/code&gt; 使用角 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令，坐落在 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。将 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 添加到 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 导入中，声明新的 &lt;code&gt;PhoneListComponent&lt;/code&gt; 并最终将其添加到 &lt;code&gt;entryComponents&lt;/code&gt; 中,因为您将其降级了：</target>
        </trans-unit>
        <trans-unit id="b4153d9c7e00866dc99a220129088a88c0dd7d73" translate="yes" xml:space="preserve">
          <source>The new API is a smaller, easier, and more powerful way to make HTTP requests in Angular. The new API simplifies the default ergonomics: There is no need to map by invoking the &lt;code&gt;.json()&lt;/code&gt; method. It also supports typed return values and interceptors.</source>
          <target state="translated">新的API是在Angular中发出HTTP请求的一种更小，更简单，更强大的方法。新的API简化了默认的人体工程学：无需通过调用 &lt;code&gt;.json()&lt;/code&gt; 方法。它还支持类型化的返回值和拦截器。</target>
        </trans-unit>
        <trans-unit id="4ba87e5244a7f2ae127d3527851072feaa64a3a5" translate="yes" xml:space="preserve">
          <source>The new app's configuration appears in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, under its project name.</source>
          <target state="translated">新应用程序的配置将出现在 &lt;code&gt;projects&lt;/code&gt; 的部分 &lt;code&gt;angular.json&lt;/code&gt; 工作区配置文件项目名称下。</target>
        </trans-unit>
        <trans-unit id="97e1064b6ccb7a71d78b43cbdff3f66b187e3101" translate="yes" xml:space="preserve">
          <source>The new application is running in Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">新应用程序正在Angular区域中运行，因此不再需要调用 &lt;code&gt;$apply()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1207f1b47a2ceddd5399dbc4b8537238ef541e74" translate="yes" xml:space="preserve">
          <source>The new application is running in an Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">新应用程序正在Angular区域中运行，因此不再需要调用 &lt;code&gt;$apply()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4423c5e4eb8a9a3a8985a9f33bbfac8fd49ec627" translate="yes" xml:space="preserve">
          <source>The new application's configuration appears in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, under its project name.</source>
          <target state="translated">新应用程序的配置显示在 &lt;code&gt;angular.json&lt;/code&gt; 工作区配置文件的 &lt;code&gt;projects&lt;/code&gt; 部分中的项目名称下。</target>
        </trans-unit>
        <trans-unit id="b35b343343c03348a9572e3228bb3c952b9ac234" translate="yes" xml:space="preserve">
          <source>The new child node.</source>
          <target state="translated">新的子节点。</target>
        </trans-unit>
        <trans-unit id="9840b56c4f6874ecf576985d09a05dbfa2eb89c5" translate="yes" xml:space="preserve">
          <source>The new child nodes.</source>
          <target state="translated">新的子节点。</target>
        </trans-unit>
        <trans-unit id="4b58eb8174eac708d6b4490ec1c0c1d10ce4c92f" translate="yes" xml:space="preserve">
          <source>The new product alert component takes a product as input from the product list. With that input, it shows or hides the &quot;Notify Me&quot; button, based on the price of the product. The Phone XL price is over $700, so the &quot;Notify Me&quot; button appears on that product.</source>
          <target state="translated">新产品提醒组件从产品列表中获取一个产品作为输入。有了这个输入,它就会根据产品的价格显示或隐藏 &quot;通知我 &quot;按钮。Phone XL的价格超过700美元,所以 &quot;Notify Me &quot;按钮会出现在该产品上。</target>
        </trans-unit>
        <trans-unit id="e6f1054918bbc968acfe9e3749cce36a53bf28d3" translate="yes" xml:space="preserve">
          <source>The new project is automatically configured for Ivy. Specifically, the enableIvy option is set to &lt;code&gt;true&lt;/code&gt; in the project's &lt;code&gt;tsconfig.app.json&lt;/code&gt; file.</source>
          <target state="translated">新项目将自动为Ivy配置。具体来说，enableIvy选项设置为 &lt;code&gt;true&lt;/code&gt; 该项目的 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="5856f08aacd129df52897b888ec3e203f8a35f92" translate="yes" xml:space="preserve">
          <source>The new route uses a path, &lt;code&gt;**&lt;/code&gt;. This path is how Angular identifies a wildcard route. Any route that does not match an existing route in your configuration will use this route.</source>
          <target state="translated">新路线使用路径 &lt;code&gt;**&lt;/code&gt; 。此路径是Angular识别通配符路由的方式。与您的配置中的现有路由不匹配的任何路由都将使用此路由。</target>
        </trans-unit>
        <trans-unit id="d6aa8f89505f75cf8c09ee6eb7157b95f50f181b" translate="yes" xml:space="preserve">
          <source>The new shipping component isn't hooked into any other component yet, but you can see it in the preview pane by entering the URL specified by its route. The URL has the pattern: &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; where the &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; part may be different for your StackBlitz project.</source>
          <target state="translated">新的运输组件尚未插入任何其他组件，但是您可以通过输入其路线指定的URL在预览窗格中查看它。该URL的模式： &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; 其中 &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; 部分可能是您的StackBlitz项目不同。</target>
        </trans-unit>
        <trans-unit id="3743d1eecb933641cda77a717298bd354faf0984" translate="yes" xml:space="preserve">
          <source>The new value</source>
          <target state="translated">新值</target>
        </trans-unit>
        <trans-unit id="021d55f858f59001a051bc43ae234648f75e1184" translate="yes" xml:space="preserve">
          <source>The new value emitted by &lt;code&gt;ngModelChange&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelChange&lt;/code&gt; 发出的新值。</target>
        </trans-unit>
        <trans-unit id="c8570bda1df02aa4830c29774e26bf3a60827bab" translate="yes" xml:space="preserve">
          <source>The new value for the control that matches the structure of the group.</source>
          <target state="translated">匹配组结构的控件的新值。</target>
        </trans-unit>
        <trans-unit id="ad6dd37b94567d0ed30940d4cbe011a866a03911" translate="yes" xml:space="preserve">
          <source>The new value for the control.</source>
          <target state="translated">控件的新值。</target>
        </trans-unit>
        <trans-unit id="2118e7142b9bc910be772dcc7fd3cdf8497c8881" translate="yes" xml:space="preserve">
          <source>The new value for the directive's control.</source>
          <target state="translated">指令控制的新值。</target>
        </trans-unit>
        <trans-unit id="bdb50e4b11bfbe575629c662f2a9a5650543a293" translate="yes" xml:space="preserve">
          <source>The new value for the element</source>
          <target state="translated">该元素的新值</target>
        </trans-unit>
        <trans-unit id="7b746bb6b747d0bb853f7c9fc94c0337260bae7e" translate="yes" xml:space="preserve">
          <source>The new value for the form.</source>
          <target state="translated">表格的新值。</target>
        </trans-unit>
        <trans-unit id="61b8b2c4fe44f460d9964c15d7ca4f73c9a6c794" translate="yes" xml:space="preserve">
          <source>The new value for the view</source>
          <target state="translated">视图的新值</target>
        </trans-unit>
        <trans-unit id="021a9d13fa37792c9492e99195cbcb8204d81b7b" translate="yes" xml:space="preserve">
          <source>The new value for the view model.</source>
          <target state="translated">视图模型的新值。</target>
        </trans-unit>
        <trans-unit id="b9b227961e3d04545a92b5ce44cb233f0e0e2e32" translate="yes" xml:space="preserve">
          <source>The new value of the attribute.</source>
          <target state="translated">属性的新值。</target>
        </trans-unit>
        <trans-unit id="979eb5744be34e7601501a529cdae1a63ed19682" translate="yes" xml:space="preserve">
          <source>The new value or array of values.</source>
          <target state="translated">新的数值或数值数组。</target>
        </trans-unit>
        <trans-unit id="7b08063f6e4b837b85157e98f41e7848cc96e9ca" translate="yes" xml:space="preserve">
          <source>The new value to add.</source>
          <target state="translated">要增加的新价值。</target>
        </trans-unit>
        <trans-unit id="5846611ef08161b895e9cfae56a1ecdbe7079b9d" translate="yes" xml:space="preserve">
          <source>The new value.</source>
          <target state="translated">新值。</target>
        </trans-unit>
        <trans-unit id="f0ee706f3bb39b349be9aafea079617b78668c88" translate="yes" xml:space="preserve">
          <source>The new version waits for the &lt;code&gt;Observable&lt;/code&gt; to emit the array of heroes&amp;mdash;which could happen now or several minutes from now. The &lt;code&gt;subscribe()&lt;/code&gt; method passes the emitted array to the callback, which sets the component's &lt;code&gt;heroes&lt;/code&gt; property.</source>
          <target state="translated">新版本等待 &lt;code&gt;Observable&lt;/code&gt; 发出一系列英雄-这可能在现在发生，也可能在几分钟后发生。所述 &lt;code&gt;subscribe()&lt;/code&gt; 方法通过发射阵列到回调，其设置组件的 &lt;code&gt;heroes&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="c61fd74c6478e58dddf9101895e08ed5f52a84e1" translate="yes" xml:space="preserve">
          <source>The new workspace folder is given the specified project name, and contains configuration files at the top level.</source>
          <target state="translated">新的工作区文件夹被赋予指定的项目名称,并包含顶层的配置文件。</target>
        </trans-unit>
        <trans-unit id="ba1a5a973d20feba0e6b33242fbe750ff2e79612" translate="yes" xml:space="preserve">
          <source>The next example captures the &lt;code&gt;index&lt;/code&gt; in a variable named &lt;code&gt;i&lt;/code&gt; and displays it with the item name.</source>
          <target state="translated">下一个示例在名为 &lt;code&gt;i&lt;/code&gt; 的变量中捕获 &lt;code&gt;index&lt;/code&gt; 并将其与项目名称一起显示。</target>
        </trans-unit>
        <trans-unit id="84bf25f63e5b5153b6a3a8c5328d60b284fe5dc3" translate="yes" xml:space="preserve">
          <source>The next example displays multiple code tabs, each with its own header. It demonstrates control over display of line numbers at both the &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; levels.</source>
          <target state="translated">下一个示例显示多个代码选项卡，每个选项卡都有自己的标题。它演示了在 &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; 级别对行号显示的控制。</target>
        </trans-unit>
        <trans-unit id="7d0379ee3e31cc2f63af55d84bcfdb086a5ca311" translate="yes" xml:space="preserve">
          <source>The next example performs the following steps to verify the model-to-view data flow.</source>
          <target state="translated">下一个示例执行以下步骤来验证模型到视图的数据流。</target>
        </trans-unit>
        <trans-unit id="7c3416618b3de0af96c0f13e3867441de913c924" translate="yes" xml:space="preserve">
          <source>The next example targets the host element again, but only when it also has the &lt;code&gt;active&lt;/code&gt; CSS class.</source>
          <target state="translated">下一个示例再次针对host元素，但前提是它也具有 &lt;code&gt;active&lt;/code&gt; CSS类。</target>
        </trans-unit>
        <trans-unit id="4a21e1e01c2158020152df86d39427a773fea8dd" translate="yes" xml:space="preserve">
          <source>The next examples focus on hook details.</source>
          <target state="translated">接下来的例子主要是钩子的细节。</target>
        </trans-unit>
        <trans-unit id="e227a13b6f5a7d5bee882fe1ac94c2d4c537d093" translate="yes" xml:space="preserve">
          <source>The next few sections review some of the coding choices in the app.</source>
          <target state="translated">接下来的几节将回顾应用中的一些编码选择。</target>
        </trans-unit>
        <trans-unit id="d607f1c8543b34b78c9b0ce11c65aed7ab530f0e" translate="yes" xml:space="preserve">
          <source>The next interceptor in the chain, or the backend if no interceptors remain in the chain.</source>
          <target state="translated">链中的下一个拦截器,如果链中没有拦截器,则为后端。</target>
        </trans-unit>
        <trans-unit id="3e4bb896f2f48b5d9aa0754ab76dc8fdd2fa0d3b" translate="yes" xml:space="preserve">
          <source>The next parent injector in the hierarchy is the &lt;code&gt;NullInjector()&lt;/code&gt;, which is the top of the tree. If you've gone so far up the tree that you are looking for a service in the &lt;code&gt;NullInjector()&lt;/code&gt;, you'll get an error unless you've used &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; because ultimately, everything ends at the &lt;code&gt;NullInjector()&lt;/code&gt; and it returns an error or, in the case of &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;. For more information on &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, see the &lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt;&lt;code&gt;@Optional()&lt;/code&gt; section&lt;/a&gt; of this guide.</source>
          <target state="translated">层次结构中的下一个父注入器是 &lt;code&gt;NullInjector()&lt;/code&gt; ，它是树的顶部。如果你至今上树了，你正在寻找的服务 &lt;code&gt;NullInjector()&lt;/code&gt; ，你会除非你用得到一个错误 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; ，因为最终，在一切都结束 &lt;code&gt;NullInjector()&lt;/code&gt; ,它返回错误，或者对于 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; ，返回 &lt;code&gt;null&lt;/code&gt; 。有关 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 更多信息，请参见本指南的&lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt; &lt;code&gt;@Optional()&lt;/code&gt; 部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2215641d1cc412c6d30b3543117da1326b1d8612" translate="yes" xml:space="preserve">
          <source>The next part of the file is where you configure your routes. &lt;em&gt;Routes&lt;/em&gt; tell the Router which view to display when a user clicks a link or pastes a URL into the browser address bar.</source>
          <target state="translated">文件的下一部分是配置路由的位置。 &lt;em&gt;路由&lt;/em&gt;告诉路由器用户单击链接或将URL粘贴到浏览器地址栏中时显示的视图。</target>
        </trans-unit>
        <trans-unit id="ffbc544c39aedf6dbed7b7a9601dc1ca2eadd500" translate="yes" xml:space="preserve">
          <source>The next section expands the app's capabilities by adding a new component&amp;mdash;a product alert&amp;mdash;as a child of the product list component.</source>
          <target state="translated">下一部分通过添加新组件（产品警报）作为产品列表组件的子组件来扩展应用程序的功能。</target>
        </trans-unit>
        <trans-unit id="e1966fcbb6a04574ff0577930e9c4f4e9d6e0dcf" translate="yes" xml:space="preserve">
          <source>The next section shows how to use template reference variables to address this problem.</source>
          <target state="translated">下一节介绍如何使用模板参考变量来解决这个问题。</target>
        </trans-unit>
        <trans-unit id="b8bc4af8ca3880db42ed25822aa4664e92d79782" translate="yes" xml:space="preserve">
          <source>The next section though, where &lt;code&gt;InspectorComponent&lt;/code&gt; is a child component of &lt;code&gt;ChildComponent&lt;/code&gt;, &lt;code&gt;InspectorComponent&lt;/code&gt; is inside the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;, so when it asks for the &lt;code&gt;AnimalService&lt;/code&gt;, it sees the 🐶 (puppy).</source>
          <target state="translated">但是下一部分，其中 &lt;code&gt;InspectorComponent&lt;/code&gt; 是 &lt;code&gt;ChildComponent&lt;/code&gt; 的子组件， &lt;code&gt;InspectorComponent&lt;/code&gt; 在 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 内部，因此当它要求输入 &lt;code&gt;AnimalService&lt;/code&gt; 时，它会看到🐶（puppy）。</target>
        </trans-unit>
        <trans-unit id="d59c51bbebc61089285e2a0c88cc2af2c45f0029" translate="yes" xml:space="preserve">
          <source>The next step is to add a binding to the &lt;code&gt;ChildComponent&lt;/code&gt; template.</source>
          <target state="translated">下一步是将绑定添加到 &lt;code&gt;ChildComponent&lt;/code&gt; 模板。</target>
        </trans-unit>
        <trans-unit id="f76de710868e11d870476fe11d149898bf04eeee" translate="yes" xml:space="preserve">
          <source>The next step is to bind the input controls to the corresponding &lt;code&gt;Hero&lt;/code&gt; properties with two-way data binding, so that they respond to user input by updating the data model, and also respond to programmatic changes in the data by updating the display.</source>
          <target state="translated">下一步是通过双向数据绑定将输入控件绑定到相应的 &lt;code&gt;Hero&lt;/code&gt; 属性，以便它们通过更新数据模型来响应用户输入，并通过更新显示来响应数据中的编程更改。</target>
        </trans-unit>
        <trans-unit id="1ac5a9d05f16c0b0c07e2483f2426a42fa242157" translate="yes" xml:space="preserve">
          <source>The next step is to bind the property in the parent component's template. In this example, the parent component template is &lt;code&gt;app.component.html&lt;/code&gt;.</source>
          <target state="translated">下一步是将属性绑定到父组件的模板中。在此示例中，父组件模板是 &lt;code&gt;app.component.html&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06656dd8fd58ec3c830e42d3bef15b1d6ea80756" translate="yes" xml:space="preserve">
          <source>The next step is to create a new alert feature that takes a product as an input. The alert checks the product's price, and, if the price is greater than $700, displays a &quot;Notify Me&quot; button that lets users sign up for notifications when the product goes on sale.</source>
          <target state="translated">下一步是创建一个新的提醒功能,以产品作为输入。警报会检查产品的价格,如果价格大于700美元,就会显示一个 &quot;通知我 &quot;按钮,让用户在产品打折时注册通知。</target>
        </trans-unit>
        <trans-unit id="90b831079de1c7557999e837b31d0f72e7c2ee44" translate="yes" xml:space="preserve">
          <source>The next step is to define an object model that can describe all scenarios needed by the form functionality. The hero application process involves a form with a lot of questions. The &lt;em&gt;question&lt;/em&gt; is the most fundamental object in the model.</source>
          <target state="translated">下一步是定义一个对象模型，该对象模型可以描述表单功能所需的所有方案。英雄申请过程涉及一个带有很多问题的表格。该&lt;em&gt;问题&lt;/em&gt;是在模型的最根本目的。</target>
        </trans-unit>
        <trans-unit id="fb2e63ba1bd8fdeb7779c136f5fcfde3c35d6213" translate="yes" xml:space="preserve">
          <source>The next version of the documentation is available at &lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;. This includes any documentation for Beta or Release Candidate features and APIs.</source>
          <target state="translated">下一版本的文档位于&lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;。这包括有关Beta或Release Candidate功能和API的所有文档。</target>
        </trans-unit>
        <trans-unit id="4a180ac00e9f3dbf51f785693d56733d6c28e423" translate="yes" xml:space="preserve">
          <source>The ng module for the server.</source>
          <target state="translated">服务器的ng模块。</target>
        </trans-unit>
        <trans-unit id="31db521a10f7d13d6ad0164b67edb26307449751" translate="yes" xml:space="preserve">
          <source>The ng module for the worker app side.</source>
          <target state="translated">工应用侧的ng模块。</target>
        </trans-unit>
        <trans-unit id="86a442380fdcdb994033a6dea7124eb5d66e6cae" translate="yes" xml:space="preserve">
          <source>The ngUpgrade library in Angular is a very useful tool for upgrading anything but the smallest of applications. With it you can mix and match AngularJS and Angular components in the same application and have them interoperate seamlessly. That means you don't have to do the upgrade work all at once, since there's a natural coexistence between the two frameworks during the transition period.</source>
          <target state="translated">Angular中的ngUpgrade库是一个非常有用的工具,除了最小的应用程序之外,其他的应用程序都可以升级。有了它,你可以在同一个应用中混搭AngularJS和Angular组件,并让它们无缝对接。这意味着你不必一次性完成升级工作,因为在过渡期内,两个框架之间会自然共存。</target>
        </trans-unit>
        <trans-unit id="0107243ec8cbe329d40de532f38d6e455ea3c867" translate="yes" xml:space="preserve">
          <source>The node.</source>
          <target state="translated">该节点。</target>
        </trans-unit>
        <trans-unit id="04ba803c94c0cf27fa47cf0f40112d507c07b504" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator ( &lt;code&gt;!&lt;/code&gt; )</source>
          <target state="translated">非null断言运算符（ &lt;code&gt;!&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b8aa84c688682535f84bf8169abdd6d8bb08e9fc" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator should be used sparingly as refactoring of the component might break this constraint.</source>
          <target state="translated">非空断言操作符应尽量少用,因为组件的重构可能会破坏这个约束。</target>
        </trans-unit>
        <trans-unit id="931e7b111d738b68a612433a6d150f27f4217c3a" translate="yes" xml:space="preserve">
          <source>The non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, is optional with the exception that you must use it when you turn on strict null checks.</source>
          <target state="translated">非空断言运算符 &lt;code&gt;!&lt;/code&gt; ，是可选的，除了在启用严格的空检查时必须使用它。</target>
        </trans-unit>
        <trans-unit id="064948efac2b67f533858ab0ec1a225c30e6d6d0" translate="yes" xml:space="preserve">
          <source>The npm package for the build tool used to create this target. The default builder for an application (&lt;code&gt;ng build myApp&lt;/code&gt;) is &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt;, which uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; package bundler. Note that a different builder is used for building a library (&lt;code&gt;ng build myLib&lt;/code&gt;).</source>
          <target state="translated">用于创建此目标的构建工具的npm软件包。应用程序的默认生成器（ &lt;code&gt;ng build myApp&lt;/code&gt; ）是 &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt; ，它使用&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;软件包捆绑程序。请注意，使用不同的构建器来构建库（ &lt;code&gt;ng build myLib&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="10d444c3a0885867d29c65fc0e0878dd94476c43" translate="yes" xml:space="preserve">
          <source>The npm packages for the &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;mandatory&lt;/em&gt; polyfills&lt;/a&gt; (such as &lt;code&gt;zone.js&lt;/code&gt;) are installed automatically for you when you create your project with &lt;code&gt;ng new&lt;/code&gt;, and their corresponding &lt;code&gt;import&lt;/code&gt; statements are already enabled in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file.</source>
          <target state="translated">对于故宫的包&lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;强制&lt;/em&gt; polyfills&lt;/a&gt;（如 &lt;code&gt;zone.js&lt;/code&gt; ）的，当你创建你的项目自动为您安装 &lt;code&gt;ng new&lt;/code&gt; ，及其相应的 &lt;code&gt;import&lt;/code&gt; 报表中已启用 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 配置文件。</target>
        </trans-unit>
        <trans-unit id="9b47812f77184b9bdc5b1bad108b3a1b65438513" translate="yes" xml:space="preserve">
          <source>The number to be formatted as a percentage.</source>
          <target state="translated">要以百分比格式化的数字。</target>
        </trans-unit>
        <trans-unit id="f5e154c108150e674adc32b02686eba52434ecc2" translate="yes" xml:space="preserve">
          <source>The number to be formatted as currency.</source>
          <target state="translated">格式化为货币的数字。</target>
        </trans-unit>
        <trans-unit id="b8da88e922ca8c42e90b1e7116243bf395b37127" translate="yes" xml:space="preserve">
          <source>The number to be formatted.</source>
          <target state="translated">要格式化的数字。</target>
        </trans-unit>
        <trans-unit id="3f218a15291c3c94b883e1d87d28d7c7a5476b0c" translate="yes" xml:space="preserve">
          <source>The number to format.</source>
          <target state="translated">要格式化的数字。</target>
        </trans-unit>
        <trans-unit id="3b8a293a9d221bf54d50d885baa3a93087f6de40" translate="yes" xml:space="preserve">
          <source>The object that matches the structure of the group.</source>
          <target state="translated">匹配该组结构的对象。</target>
        </trans-unit>
        <trans-unit id="1ed19258bb078822c2e224f36b5e607033a8910c" translate="yes" xml:space="preserve">
          <source>The observable &lt;code&gt;Subscription&lt;/code&gt; will be handled by the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; and the component's &lt;code&gt;hero&lt;/code&gt; property will be (re)set with the retrieved hero.</source>
          <target state="translated">可观察的 &lt;code&gt;Subscription&lt;/code&gt; 将由 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 处理，并且组件的 &lt;code&gt;hero&lt;/code&gt; 属性将与检索到的hero一起（重新设置）。</target>
        </trans-unit>
        <trans-unit id="9652db2fe25fc5b8589f982bd18c51dc7f8cff2d" translate="yes" xml:space="preserve">
          <source>The observable events of related services, such as &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt;, are not triggered.</source>
          <target state="translated">不会触发相关服务（例如 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt; )的可观察事件。</target>
        </trans-unit>
        <trans-unit id="9a424717c78d2ac09e12f0cde7f7e48fa3de1bd5" translate="yes" xml:space="preserve">
          <source>The observable returned must be finite, meaning it must complete at some point. To convert an infinite observable into a finite one, pipe the observable through a filtering operator such as &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, or &lt;code&gt;takeUntil&lt;/code&gt;.</source>
          <target state="translated">返回的可观察值必须是有限的，这意味着它必须在某个点完成。要将无限的可观察对象转换为有限的可观察对象，请通过过滤运算符（例如 &lt;code&gt;first&lt;/code&gt; ， &lt;code&gt;last&lt;/code&gt; ， &lt;code&gt;take&lt;/code&gt; 或 &lt;code&gt;takeUntil&lt;/code&gt; )将可观察对象传递给管道。</target>
        </trans-unit>
        <trans-unit id="5a4603bc298dae8927b9677ed9905edb1e9450fd" translate="yes" xml:space="preserve">
          <source>The observer pattern is a software design pattern in which an object, called the &lt;em&gt;subject&lt;/em&gt;, maintains a list of its dependents, called &lt;em&gt;observers&lt;/em&gt;, and notifies them automatically of state changes. This pattern is similar (but not identical) to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&quot;&gt;publish/subscribe&lt;/a&gt; design pattern.</source>
          <target state="translated">观察者模式是一种软件设计模式，其中一个名为&lt;em&gt;主题的对象会&lt;/em&gt;维护其依赖项的列表，称为&lt;em&gt;观察者&lt;/em&gt;，并自动将状态更改通知他们。该模式与&lt;a href=&quot;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&quot;&gt;发布/订阅&lt;/a&gt;设计模式相似（但不完全相同）。</target>
        </trans-unit>
        <trans-unit id="3294239ebf17d384dfbf808355d9e127fde196ec" translate="yes" xml:space="preserve">
          <source>The official name of our builder is now &lt;code&gt;@example/command-runner:command&lt;/code&gt;. The first part of this is the package name (resolved using node resolution), and the second part is the builder name (resolved using the &lt;code&gt;builders.json&lt;/code&gt; file).</source>
          <target state="translated">我们的构建器的正式名称现在为 &lt;code&gt;@example/command-runner:command&lt;/code&gt; 。其中的第一部分是软件包名称（使用节点解析来解析），第二部分是构建器名称（使用 &lt;code&gt;builders.json&lt;/code&gt; 文件来解析）。</target>
        </trans-unit>
        <trans-unit id="6da0f2f589e2727df45996f865813ce81bafd8dc" translate="yes" xml:space="preserve">
          <source>The offline template compiler prevents a whole class of vulnerabilities called template injection, and greatly improves application performance. Use the offline template compiler in production deployments; don't dynamically generate templates. Angular trusts template code, so generating templates, in particular templates containing user data, circumvents Angular's built-in protections. For information about dynamically constructing forms in a safe way, see the &lt;a href=&quot;dynamic-form&quot;&gt;Dynamic Forms&lt;/a&gt; guide page.</source>
          <target state="translated">脱机模板编译器可防止称为模板注入的一整类漏洞，并大大提高了应用程序性能。在生产部署中使用脱机模板编译器；不要动态生成模板。 Angular信任模板代码，因此生成模板（特别是包含用户数据的模板）会规避Angular的内置保护。有关以安全的方式动态构建表单的信息，请参见&amp;ldquo; &lt;a href=&quot;dynamic-form&quot;&gt;动态表单&amp;rdquo;&lt;/a&gt;指南页面。</target>
        </trans-unit>
        <trans-unit id="6c7235c164fd39687b519a25c40e459410556d6a" translate="yes" xml:space="preserve">
          <source>The only resources that have hashes in the &lt;code&gt;ngsw.json&lt;/code&gt; manifest are resources that were present in the &lt;code&gt;dist&lt;/code&gt; directory at the time the manifest was built. Other resources, especially those loaded from CDNs, have content that is unknown at build time or are updated more frequently than the app is deployed.</source>
          <target state="translated">在 &lt;code&gt;ngsw.json&lt;/code&gt; 清单中具有散列的唯一资源是在构建清单时 &lt;code&gt;dist&lt;/code&gt; 目录中存在的资源。其他资源，尤其是从CDN加载的资源，其内容在构建时未知，或者比应用程序部署的更新频率更高。</target>
        </trans-unit>
        <trans-unit id="f4bcd43dc4907e02b316af7146976c21f6e2dfd6" translate="yes" xml:space="preserve">
          <source>The only step needed to provide initial &lt;code&gt;ng add&lt;/code&gt; support is to trigger an installation task using the &lt;code&gt;SchematicContext&lt;/code&gt;. The task uses the user's preferred package manager to add the library to the project's &lt;code&gt;package.json&lt;/code&gt; configuration file, and install it in the project&amp;rsquo;s &lt;code&gt;node_modules&lt;/code&gt; directory.</source>
          <target state="translated">提供初始 &lt;code&gt;ng add&lt;/code&gt; 支持的唯一步骤是使用 &lt;code&gt;SchematicContext&lt;/code&gt; 触发安装任务。该任务使用用户的首选软件包管理器将库添加到项目的 &lt;code&gt;package.json&lt;/code&gt; 配置文件中，并将其安装在项目的 &lt;code&gt;node_modules&lt;/code&gt; 目录中。</target>
        </trans-unit>
        <trans-unit id="2912e68aa8582b70396e57e3457bf64276abecb2" translate="yes" xml:space="preserve">
          <source>The only substantive change is the pipe in the template. You can confirm in the live example that the &lt;em&gt;flying heroes&lt;/em&gt; display updates as you add heroes, even when you mutate the &lt;code&gt;heroes&lt;/code&gt; array.</source>
          <target state="translated">唯一的实质性更改是模板中的管道。您可以在现场示例中确认&lt;em&gt;飞行英雄会&lt;/em&gt;在添加英雄时显示更新，即使您对 &lt;code&gt;heroes&lt;/code&gt; 数组进行了突变也是如此。</target>
        </trans-unit>
        <trans-unit id="f109536b44b3294896f12b200cc7c6870edc45c6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;aliases&lt;/code&gt; array specifies one or more strings that can be used to invoke the schematic. For example, the schematic for the Angular CLI &amp;ldquo;generate&amp;rdquo; command has an alias &amp;ldquo;g&amp;rdquo;, allowing you to use the command &lt;code&gt;ng g&lt;/code&gt;.</source>
          <target state="translated">可选的 &lt;code&gt;aliases&lt;/code&gt; 数组指定一个或多个可用于调用原理图的字符串。例如，Angular CLI&amp;ldquo; generate&amp;rdquo;命令的示意图中的别名为&amp;ldquo; g&amp;rdquo;，使您可以使用命令 &lt;code&gt;ng g&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bf8db3667ef2b53d6cae67ff56052e554006755" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;foo&lt;/code&gt; route parameter is harmless and continues to be ignored.</source>
          <target state="translated">可选的 &lt;code&gt;foo&lt;/code&gt; route参数是无害的，并且将继续被忽略。</target>
        </trans-unit>
        <trans-unit id="e40e92c59f16a06b5b028c69ad645f6c06a6aae8" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;foo&lt;/code&gt; route parameter is harmless and the router continues to ignore it.</source>
          <target state="translated">可选的 &lt;code&gt;foo&lt;/code&gt; route参数是无害的，路由器将继续忽略它。</target>
        </trans-unit>
        <trans-unit id="c3e1faed39e73b09b3398a7ff71cedb3207da8d3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;schema&lt;/code&gt; property points to a JSON schema file that defines the command-line options available to the schematic.</source>
          <target state="translated">可选的 &lt;code&gt;schema&lt;/code&gt; 属性指向一个JSON模式文件，该文件定义了该原理图可用的命令行选项。</target>
        </trans-unit>
        <trans-unit id="c789a1755156dab1f29d2365875888242e710fed" translate="yes" xml:space="preserve">
          <source>The optional route parameters are not separated by &quot;?&quot; and &quot;&amp;amp;&quot; as they would be in the URL query string. They are &lt;strong&gt;separated by semicolons &quot;;&quot;&lt;/strong&gt; This is &lt;em&gt;matrix URL&lt;/em&gt; notation&amp;mdash;something you may not have seen before.</source>
          <target state="translated">可选的路由参数不以&amp;ldquo;？&amp;rdquo;分隔 和&amp;ldquo;＆&amp;rdquo;，因为它们将出现在URL查询字符串中。它们&lt;strong&gt;之间用分号&amp;ldquo;;&amp;rdquo;分隔。&lt;/strong&gt;这是&lt;em&gt;矩阵URL&lt;/em&gt;表示法-您以前可能没有看到过。</target>
        </trans-unit>
        <trans-unit id="6cf50f6bad5201a772a4de797df1b382728af19a" translate="yes" xml:space="preserve">
          <source>The optional route parameters are not separated by &quot;?&quot; and &quot;&amp;amp;&quot; as they would be in the URL query string. They are separated by semicolons &quot;;&quot;. This is matrix URL notation.</source>
          <target state="translated">可选的路由参数不以&amp;ldquo;？&amp;rdquo;分隔 和&amp;ldquo;＆&amp;rdquo;，因为它们将出现在URL查询字符串中。它们之间用分号&amp;ldquo;;&amp;rdquo;分隔。这是矩阵URL表示法。</target>
        </trans-unit>
        <trans-unit id="8a35351d188a98c16c0b786429358c0c165ee4c9" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;styles&lt;/code&gt;, and &lt;code&gt;scripts&lt;/code&gt; can have either simple path string values, or object values with specific fields. The &lt;code&gt;sourceMap&lt;/code&gt; and &lt;code&gt;optimization&lt;/code&gt; options can be set to a simple Boolean value with a command flag, but can also be given a complex value using the configuration file. The following sections provide more details of how these complex values are used in each case.</source>
          <target state="translated">选项 &lt;code&gt;assets&lt;/code&gt; ， &lt;code&gt;styles&lt;/code&gt; 和 &lt;code&gt;scripts&lt;/code&gt; 可以具有简单的路径字符串值，也可以具有带有特定字段的对象值。可以使用命令标志将 &lt;code&gt;sourceMap&lt;/code&gt; 和 &lt;code&gt;optimization&lt;/code&gt; 选项设置为简单的布尔值，但也可以使用配置文件为其指定复杂的值。以下各节提供了在每种情况下如何使用这些复数值的更多详细信息。</target>
        </trans-unit>
        <trans-unit id="5a7271913fb719bd7b5e39dde45d44587b784fb2" translate="yes" xml:space="preserve">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the array level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">options对象用于为每个子控件的 &lt;code&gt;updateOn&lt;/code&gt; 属性设置默认值。如果在数组级别将 &lt;code&gt;updateOn&lt;/code&gt; 设置为 &lt;code&gt;'blur'&lt;/code&gt; ，则所有子控件默认为'blur'，除非该子控件已明确指定其他 &lt;code&gt;updateOn&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="6e5341d5e74eb1a6542f76853fe596992c982b9a" translate="yes" xml:space="preserve">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the group level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">options对象用于为每个子控件的 &lt;code&gt;updateOn&lt;/code&gt; 属性设置默认值。如果在组级别将 &lt;code&gt;updateOn&lt;/code&gt; 设置为 &lt;code&gt;'blur'&lt;/code&gt; ，则所有子控件默认为'blur'，除非该子控件已明确指定其他 &lt;code&gt;updateOn&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="746585f9d309cd4a0ba0d2fbf9b96110e934c17e" translate="yes" xml:space="preserve">
          <source>The options object provides default values for the two inputs that we defined; &lt;code&gt;command&lt;/code&gt;, which is the Unix command to execute, and &lt;code&gt;args&lt;/code&gt;, an array that contains the file to operate on.</source>
          <target state="translated">options对象为我们定义的两个输入提供了默认值。 &lt;code&gt;command&lt;/code&gt; ，这是要执行的Unix命令，而 &lt;code&gt;args&lt;/code&gt; 是一个包含要操作的文件的数组。</target>
        </trans-unit>
        <trans-unit id="a808828e19354aac449233df39a10e00fae8dee0" translate="yes" xml:space="preserve">
          <source>The options provide configuration metadata that determines how the directive should be processed, instantiated and used at runtime.</source>
          <target state="translated">这些选项提供了配置元数据,这些元数据决定了指令在运行时应如何处理、实例化和使用。</target>
        </trans-unit>
        <trans-unit id="05c7ae2f84882bcfa37ddd31c179aced5dca729d" translate="yes" xml:space="preserve">
          <source>The order of class declaration matters in TypeScript. You can't refer directly to a class until it's been defined.</source>
          <target state="translated">在TypeScript中,类声明的顺序很重要。你不能直接引用一个类,直到它被定义。</target>
        </trans-unit>
        <trans-unit id="806f30750f611f41f4fdf8dfec26b3c766793543" translate="yes" xml:space="preserve">
          <source>The order of execution is: BaseGuard, ChildGuard, BaseDataResolver, ChildDataResolver.</source>
          <target state="translated">执行顺序为:BaseGuard、ChildGuard、BaseDataResolver、ChildDataResolver。</target>
        </trans-unit>
        <trans-unit id="d6e130fe2786cc33658ab0a390d2374bb95a033b" translate="yes" xml:space="preserve">
          <source>The order of route configuration is important because the router accepts the first route that matches a navigation request path.</source>
          <target state="translated">路由配置的顺序是很重要的,因为路由器接受第一个符合导航请求路径的路由。</target>
        </trans-unit>
        <trans-unit id="6c7cad94283dc8992d7c11c563fd215a38191432" translate="yes" xml:space="preserve">
          <source>The order of route configuration matters. The router accepts the first route that matches a navigation request path.</source>
          <target state="translated">路由配置的顺序很重要。路由器接受第一个与导航请求路径相匹配的路由。</target>
        </trans-unit>
        <trans-unit id="5a0b34b391ca8d26ee25fe344b77918441a9ac0e" translate="yes" xml:space="preserve">
          <source>The order of routes is important because the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; uses a first-match wins strategy when matching routes, so more specific routes should be placed above less specific routes. List routes with a static path first, followed by an empty path route, which matches the default route. The &lt;a href=&quot;router#setting-up-wildcard-routes&quot;&gt;wildcard route&lt;/a&gt; comes last because it matches every URL and the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; selects it only if no other routes match first.</source>
          <target state="translated">路由的顺序很重要，因为 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 在匹配路由时会使用&amp;ldquo;先赢&amp;rdquo;策略，因此，应将更具体的路由放在不那么具体的路由之上。首先列出具有静态路径的路由，然后列出与默认路由匹配的空路径路由。该&lt;a href=&quot;router#setting-up-wildcard-routes&quot;&gt;通配符路径&lt;/a&gt;放在最后，因为它的每一个URL匹配和 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 选择它只有在没有其他途径首先匹配。</target>
        </trans-unit>
        <trans-unit id="41216db2f85115d74834c152bfa23e599dd9f3f6" translate="yes" xml:space="preserve">
          <source>The original &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second</source>
          <target state="translated">原始的 &lt;code&gt;open&lt;/code&gt; 和 &lt;code&gt;closed&lt;/code&gt; 状态，以及高度，颜色和不透明度的原始变化，发生时间为1秒</target>
        </trans-unit>
        <trans-unit id="cb417f35db2b3c266ee5c90059c45737b13dbb00" translate="yes" xml:space="preserve">
          <source>The original &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second.</source>
          <target state="translated">原始的 &lt;code&gt;open&lt;/code&gt; 和 &lt;code&gt;closed&lt;/code&gt; 状态，以及高度，颜色和不透明度的原始变化，发生时间为1秒。</target>
        </trans-unit>
        <trans-unit id="5c3fc45bc2db2f7c8beca6fdc1270fdd65714fae" translate="yes" xml:space="preserve">
          <source>The original response continues untouched back up through the chain of interceptors to the application caller.</source>
          <target state="translated">原有的响应通过拦截器链继续不受影响地回到应用程序调用者。</target>
        </trans-unit>
        <trans-unit id="8475e386138bc203bd52458f303f075a4b824138" translate="yes" xml:space="preserve">
          <source>The other feature module's routing module is configured similarly.</source>
          <target state="translated">另一个功能模块的路由模块也是类似的配置。</target>
        </trans-unit>
        <trans-unit id="ac2033a02f00fb6e865ead163931aca26717c78d" translate="yes" xml:space="preserve">
          <source>The other possible &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;'prefix'&lt;/code&gt; which tells the router to match the redirect route when the &lt;em&gt;remaining&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;begins&lt;/em&gt;&lt;/strong&gt; with the redirect route's &lt;em&gt;prefix&lt;/em&gt; path.</source>
          <target state="translated">另一个可能的 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 值是 &lt;code&gt;'prefix'&lt;/code&gt; ，当&lt;em&gt;剩余的&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;以&lt;/em&gt;&lt;/strong&gt;重定向路由的&lt;em&gt;前缀&lt;/em&gt;路径&lt;strong&gt;&lt;em&gt;开头&lt;/em&gt;&lt;/strong&gt;时，它告诉路由器匹配重定向路由。</target>
        </trans-unit>
        <trans-unit id="c690d1d77a35de6a3687ffe8576dfd74e6fa1564" translate="yes" xml:space="preserve">
          <source>The other possible &lt;code&gt;pathMatch&lt;/code&gt; value is &lt;code&gt;'prefix'&lt;/code&gt; which tells the router to match the redirect route when the remaining URL begins with the redirect route's prefix path. This doesn't apply to this sample app because if the &lt;code&gt;pathMatch&lt;/code&gt; value were &lt;code&gt;'prefix'&lt;/code&gt;, every URL would match &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="translated">另一个可能的 &lt;code&gt;pathMatch&lt;/code&gt; 值是 &lt;code&gt;'prefix'&lt;/code&gt; ，当剩余的URL以重定向路由的前缀路径开头时，它告诉路由器匹配重定向路由。这不适用于此示例应用程序，因为如果 &lt;code&gt;pathMatch&lt;/code&gt; 值为 &lt;code&gt;'prefix'&lt;/code&gt; ，则每个URL都将匹配 &lt;code&gt;''&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cdebc7919635d8158a944f0c5d968998171539f" translate="yes" xml:space="preserve">
          <source>The other reference is in the &lt;em&gt;value position&lt;/em&gt;-- that is, LibHeaderComponent is the value of the &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;()&lt;/code&gt; parameter decorator: &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;(LibHeaderComponent)&lt;/code&gt;.</source>
          <target state="translated">另一个引用位于&lt;em&gt;值位置&lt;/em&gt;，即LibHeaderComponent是 &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;()&lt;/code&gt; 参数修饰符的值： &lt;code&gt;@&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;(LibHeaderComponent)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="683021b4260938edc921d666701a253150e18ddb" translate="yes" xml:space="preserve">
          <source>The outer and inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances are assembled into views as follows:</source>
          <target state="translated">外部和内部 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 实例按如下方式组装到视图中：</target>
        </trans-unit>
        <trans-unit id="db438b04615ada9c6a8e0f3ec02854c6d2f5ac5b" translate="yes" xml:space="preserve">
          <source>The outgoing HTTP request method.</source>
          <target state="translated">外发的HTTP请求方式。</target>
        </trans-unit>
        <trans-unit id="ab71fe70e254aa60e106538ded89aa5355abd19f" translate="yes" xml:space="preserve">
          <source>The outgoing URL with all URL parameters set.</source>
          <target state="translated">设置了所有URL参数的外发URL。</target>
        </trans-unit>
        <trans-unit id="29b0a52a0f9e42ada2a44024b4ce3442efa10abc" translate="yes" xml:space="preserve">
          <source>The outgoing request object to handle.</source>
          <target state="translated">要处理的外发请求对象。</target>
        </trans-unit>
        <trans-unit id="4e584659815c873b9863b2023a8d1da485d88c69" translate="yes" xml:space="preserve">
          <source>The outlet name of the route</source>
          <target state="translated">途径的出口名称</target>
        </trans-unit>
        <trans-unit id="427ee8154382c38b7d171dfb79623a53e63a0fd6" translate="yes" xml:space="preserve">
          <source>The outlet name of the route, a constant.</source>
          <target state="translated">航线的出口名称,为常数。</target>
        </trans-unit>
        <trans-unit id="bcedcd9799379281170f96329a0199438fc48892" translate="yes" xml:space="preserve">
          <source>The output array will be ordered by keys. By default the comparator will be by Unicode point value. You can optionally pass a compareFn if your keys are complex types.</source>
          <target state="translated">输出数组将按键排序。默认情况下,比较器将以Unicode点值为基准。如果你的键是复杂类型,你可以选择传递一个compareFn。</target>
        </trans-unit>
        <trans-unit id="7e3805c6cd01668729e336d07b3bf6176de112bf" translate="yes" xml:space="preserve">
          <source>The output directory for build results.</source>
          <target state="translated">构建结果的输出目录。</target>
        </trans-unit>
        <trans-unit id="3f8aa866a39412d582722989844ba25d2bbcc37b" translate="yes" xml:space="preserve">
          <source>The output folder is &lt;code&gt;dist/project-name/&lt;/code&gt; by default. To output to a different folder, change the &lt;code&gt;outputPath&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">默认情况下，输出文件夹为 &lt;code&gt;dist/project-name/&lt;/code&gt; 。要输出到不同的文件夹，更改 &lt;code&gt;outputPath&lt;/code&gt; 在 &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa555da87eea14ed125658bcb8bbbf275e304596" translate="yes" xml:space="preserve">
          <source>The output in the view would be:</source>
          <target state="translated">视图中的输出将是:</target>
        </trans-unit>
        <trans-unit id="61eeb6aa93a200e68991925d7feb4a198a9bbc45" translate="yes" xml:space="preserve">
          <source>The output locations are printed in the output.</source>
          <target state="translated">在输出中打印输出位置。</target>
        </trans-unit>
        <trans-unit id="36f38bb92f919b4487aa12bfc0fbbe03a7e4f8ef" translate="yes" xml:space="preserve">
          <source>The outputs of the component.</source>
          <target state="translated">该组件的产出;</target>
        </trans-unit>
        <trans-unit id="b8c774af30b04ee8bc9afcca4c83e98bbbdacecb" translate="yes" xml:space="preserve">
          <source>The overall structure of the &lt;code&gt;updateHero()&lt;/code&gt; method is similar to that of &lt;code&gt;getHeroes()&lt;/code&gt;, but it uses &lt;code&gt;http.put()&lt;/code&gt; to persist the changed hero on the server. Add the following to the &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateHero()&lt;/code&gt; 方法的总体结构类似于 &lt;code&gt;getHeroes()&lt;/code&gt; 的结构，但是它使用 &lt;code&gt;http.put()&lt;/code&gt; 将更改后的英雄保留在服务器上。将以下内容添加到 &lt;code&gt;HeroService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12119367c4766736842fde0c43c23fc7012b447d" translate="yes" xml:space="preserve">
          <source>The override tests</source>
          <target state="translated">覆盖测试</target>
        </trans-unit>
        <trans-unit id="f744d7b55b54e113c573c6873b082577a9af8827" translate="yes" xml:space="preserve">
          <source>The package manager used to install dependencies.</source>
          <target state="translated">用于安装依赖关系的包管理器。</target>
        </trans-unit>
        <trans-unit id="cecd7ea3164b66bdc1ebb3846e85c8cad94a7d0d" translate="yes" xml:space="preserve">
          <source>The package to be added.</source>
          <target state="translated">要增加的包。</target>
        </trans-unit>
        <trans-unit id="605c3739fd71bc00a4ed1ba45664e517e73bc270" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; are essential to &lt;em&gt;running&lt;/em&gt; applications.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; 部分中列出的软件包对于&lt;em&gt;运行&lt;/em&gt;应用程序至关重要。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e74bdc0c13790fb1dd4454fda328d83e51487c05" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;dependencies&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; are essential to &lt;em&gt;running&lt;/em&gt; applications.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;dependencies&lt;/code&gt; 部分中列出的软件包对于&lt;em&gt;运行&lt;/em&gt;应用程序是必不可少的。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="80dcc126c1685ed6246cc6c4e4f678dbe5b7a91b" translate="yes" xml:space="preserve">
          <source>The packages listed in the &lt;code&gt;devDependencies&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; help you develop the application on your local machine. You don't deploy them with the production application.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;devDependencies&lt;/code&gt; 部分中列出的软件包可帮助您在本地计算机上开发应用程序。您不会将它们与生产应用程序一起部署。</target>
        </trans-unit>
        <trans-unit id="a91b89dd5ef65469422d3ef6e3e02edce3d9a4f2" translate="yes" xml:space="preserve">
          <source>The page is reloaded/refreshed.</source>
          <target state="translated">页面被重新加载/刷新。</target>
        </trans-unit>
        <trans-unit id="b2b646185b55821ee60d26f71064b66b6eee386d" translate="yes" xml:space="preserve">
          <source>The page no longer displays properly because you changed the hero from a string to an object.</source>
          <target state="translated">页面不再正常显示,因为你把英雄从字符串改为对象。</target>
        </trans-unit>
        <trans-unit id="45bba286f5d6066ed3bf3bcd1c4ffd4a6469b7b6" translate="yes" xml:space="preserve">
          <source>The page requests an update be immediately activated via the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">该页面要求立即通过 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 服务激活更新。</target>
        </trans-unit>
        <trans-unit id="d7114b73bd8fae35327a37dbe1c3217b440f55ff" translate="yes" xml:space="preserve">
          <source>The page you see is the &lt;em&gt;application shell&lt;/em&gt;. The shell is controlled by an Angular &lt;strong&gt;component&lt;/strong&gt; named &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">您看到的页面是&lt;em&gt;应用程序外壳&lt;/em&gt;。该外壳由名为 &lt;code&gt;AppComponent&lt;/code&gt; 的Angular &lt;strong&gt;组件&lt;/strong&gt;控制。</target>
        </trans-unit>
        <trans-unit id="dc0d5bcdb4927dad0eb89021491daf6f6e13f7e8" translate="yes" xml:space="preserve">
          <source>The parameter name.</source>
          <target state="translated">参数名称。</target>
        </trans-unit>
        <trans-unit id="f11e186d7179311f50be914a4fe6431b1ffd3f4d" translate="yes" xml:space="preserve">
          <source>The parameter simultaneously defines a private &lt;code&gt;heroService&lt;/code&gt; property and identifies it as a &lt;code&gt;HeroService&lt;/code&gt; injection site.</source>
          <target state="translated">该参数同时定义一个私有 &lt;code&gt;heroService&lt;/code&gt; 属性，并将其标识为 &lt;code&gt;HeroService&lt;/code&gt; 注入站点。</target>
        </trans-unit>
        <trans-unit id="a471c31a25dfc4c5093392a2386d76746208b100" translate="yes" xml:space="preserve">
          <source>The parameter value can be any valid template expression, (see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;Template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page) such as a string literal or a component property. In other words, you can control the format through a binding the same way you control the birthday value through a binding.</source>
          <target state="translated">参数值可以是任何有效的模板表达式（请参见&amp;ldquo; &lt;a href=&quot;template-syntax&quot;&gt;模板语法&amp;rdquo;&lt;/a&gt;页面的&amp;ldquo; &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;模板表达式&amp;rdquo;&lt;/a&gt;部分），例如字符串文字或组件属性。换句话说，您可以通过绑定来控制格式，就像通过绑定来控制生日值一样。</target>
        </trans-unit>
        <trans-unit id="a2f2e40ff634b01ef533833632126053be3035ce" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;AppComponent&lt;/code&gt; doesn't need to know about the dependencies of dependencies. Declare what's needed in the constructor (in this case &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContextService&lt;/code&gt;) and the framework resolves the nested dependencies.</source>
          <target state="translated">父 &lt;code&gt;AppComponent&lt;/code&gt; 不需要了解依赖项的依赖项。声明构造函数（在本例中为 &lt;code&gt;LoggerService&lt;/code&gt; 和 &lt;code&gt;UserContextService&lt;/code&gt; ）所需的内容，然后框架解析嵌套的依赖关系。</target>
        </trans-unit>
        <trans-unit id="eb7dc6ea9c849b17c83ab843ef634a845e0cc4b4" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;HeroBiosComponent&lt;/code&gt; binds a value to &lt;code&gt;heroId&lt;/code&gt;. &lt;code&gt;ngOnInit&lt;/code&gt; passes that ID to the service, which fetches and caches the hero. The getter for the &lt;code&gt;hero&lt;/code&gt; property pulls the cached hero from the service. The template displays this data-bound property.</source>
          <target state="translated">父 &lt;code&gt;HeroBiosComponent&lt;/code&gt; 将值绑定到 &lt;code&gt;heroId&lt;/code&gt; 。 &lt;code&gt;ngOnInit&lt;/code&gt; 将该ID传递给服务，该服务将获取并缓存英雄。 &lt;code&gt;hero&lt;/code&gt; 属性的getter 从服务中拉出缓存的英雄。模板显示此数据绑定属性。</target>
        </trans-unit>
        <trans-unit id="6cd3e3252a82b27dd42c44952cca27ac0ef0a581" translate="yes" xml:space="preserve">
          <source>The parent &lt;code&gt;VoteTakerComponent&lt;/code&gt; binds an event handler called &lt;code&gt;onVoted()&lt;/code&gt; that responds to the child event payload &lt;code&gt;$event&lt;/code&gt; and updates a counter.</source>
          <target state="translated">父 &lt;code&gt;VoteTakerComponent&lt;/code&gt; 绑定了一个名为 &lt;code&gt;onVoted()&lt;/code&gt; 的事件处理程序，该处理程序响应子事件有效负载 &lt;code&gt;$event&lt;/code&gt; 并更新计数器。</target>
        </trans-unit>
        <trans-unit id="a6895c8ceeed733901d1a5ee2c80a8927e951506" translate="yes" xml:space="preserve">
          <source>The parent component cannot data bind to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods nor to its &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">父组件不能将数据绑定到子项的 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 方法，也不能绑定到其 &lt;code&gt;seconds&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="ccf3b5f4773641faf3c55a350577e0c6cd3528dd" translate="yes" xml:space="preserve">
          <source>The parent component class and template</source>
          <target state="translated">父组件类和模板</target>
        </trans-unit>
        <trans-unit id="b69dbb3eb5bb7d6ff61f200cca2db7e39afc938d" translate="yes" xml:space="preserve">
          <source>The parent control.</source>
          <target state="translated">父控。</target>
        </trans-unit>
        <trans-unit id="1d5682396420bbc4186bac1b479e30f0a2e910c6" translate="yes" xml:space="preserve">
          <source>The parent must cooperate by providing an &lt;em&gt;alias&lt;/em&gt; to itself in the name of a class interface token.</source>
          <target state="translated">父级必须通过以类接口令牌的名称为其自身提供&lt;em&gt;别名&lt;/em&gt;来进行合作。</target>
        </trans-unit>
        <trans-unit id="934dc6ecfaf214b64d3b92a5c9d8431b54cdb963" translate="yes" xml:space="preserve">
          <source>The parent node in the url tree</source>
          <target state="translated">url树中的父节点</target>
        </trans-unit>
        <trans-unit id="8fd36ababa58725780954fcf5f9d1c970d8528ab" translate="yes" xml:space="preserve">
          <source>The parent node.</source>
          <target state="translated">父节点。</target>
        </trans-unit>
        <trans-unit id="0a0f0dc2aaf6c1c595258b9e8784715a84b50c67" translate="yes" xml:space="preserve">
          <source>The parent of this player, if any.</source>
          <target state="translated">该球员的父母,如果有的话;</target>
        </trans-unit>
        <trans-unit id="67d15ddca6f8e438ee84b955f2b25fe3a494f70e" translate="yes" xml:space="preserve">
          <source>The parent of this route in the router state tree</source>
          <target state="translated">该路由在路由器状态树中的父节点。</target>
        </trans-unit>
        <trans-unit id="2903a28e9071275ef7593599182782527f1f0ab5" translate="yes" xml:space="preserve">
          <source>The parent of this route in the router state tree.</source>
          <target state="translated">这个路由在路由器状态树中的父节点。</target>
        </trans-unit>
        <trans-unit id="da18e4e25f47d18df9195287587b131efcbb8846" translate="yes" xml:space="preserve">
          <source>The parentheses around &lt;code&gt;click&lt;/code&gt; tell Angular to listen for the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element's &lt;code&gt;click&lt;/code&gt; event. When the user clicks in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, Angular executes the &lt;code&gt;onSelect(hero)&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; 括号告诉Angular监听 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素的 &lt;code&gt;click&lt;/code&gt; 事件。当用户单击 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 时，Angular执行 &lt;code&gt;onSelect(hero)&lt;/code&gt; 表达式。</target>
        </trans-unit>
        <trans-unit id="29591102485816b32c99b4b31ce4e781fbd9a2cd" translate="yes" xml:space="preserve">
          <source>The partial response body as downloaded so far.</source>
          <target state="translated">到目前为止,下载的部分反应体。</target>
        </trans-unit>
        <trans-unit id="a0035afe05127ba28a95a7b2b648e50cf8b95d4b" translate="yes" xml:space="preserve">
          <source>The passed-in providers can be an array of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;, or a recursive array of more providers.</source>
          <target state="translated">传入的提供程序可以是 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 或更多提供程序的递归数组。</target>
        </trans-unit>
        <trans-unit id="23b9cd25cc8870c80722d2ac4c13f170a781fd85" translate="yes" xml:space="preserve">
          <source>The pasted HTML refers to a &lt;code&gt;selectedHero&lt;/code&gt;. The new &lt;code&gt;HeroDetailComponent&lt;/code&gt; can present &lt;em&gt;any&lt;/em&gt; hero, not just a selected hero. So replace &quot;selectedHero&quot; with &quot;hero&quot; everywhere in the template.</source>
          <target state="translated">粘贴的HTML引用了 &lt;code&gt;selectedHero&lt;/code&gt; 。新的 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 可以显示&lt;em&gt;任何&lt;/em&gt;英雄，而不仅仅是选定的英雄。因此，在模板中的所有位置都将&amp;ldquo; selectedHero&amp;rdquo;替换为&amp;ldquo; hero&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="2571c9d77bbaccfdb1c7e7ad5cf492440d3e60a6" translate="yes" xml:space="preserve">
          <source>The path at which to create the library's public API file, relative to the workspace root.</source>
          <target state="translated">相对于工作区根目录,创建库的公共API文件的路径。</target>
        </trans-unit>
        <trans-unit id="deb5ccf2b009e5d123d0a690e376af4b80917816" translate="yes" xml:space="preserve">
          <source>The path can be absolute or relative to the current working directory where the command is executed. For example, to run the schematic we just generated (which has no required options), use the following command.</source>
          <target state="translated">路径可以是绝对的,也可以是相对于当前执行命令的工作目录的。例如,要运行我们刚刚生成的原理图(没有必要的选项),使用以下命令。</target>
        </trans-unit>
        <trans-unit id="c044146e6280c52cf5a46b481e94eb7064916400" translate="yes" xml:space="preserve">
          <source>The path from the root of the router state tree to this route</source>
          <target state="translated">从路由器状态树的根部到这个路由的路径。</target>
        </trans-unit>
        <trans-unit id="ffce671b3d1acbfaba292b2709f2546bc87cd1c1" translate="yes" xml:space="preserve">
          <source>The path from the root of the router state tree to this route.</source>
          <target state="translated">从路由器状态树的根部到这个路由的路径。</target>
        </trans-unit>
        <trans-unit id="7fab43da3241a041866863ee81b54bc3174d0c77" translate="yes" xml:space="preserve">
          <source>The path of the route to the destination component.</source>
          <target state="translated">通往目的地组件的路径。</target>
        </trans-unit>
        <trans-unit id="7815a518ee4716a2b1120142147e7d95775a8e78" translate="yes" xml:space="preserve">
          <source>The path of the source directory.</source>
          <target state="translated">源目录的路径。</target>
        </trans-unit>
        <trans-unit id="5a4facd2991ea2981fac7027d7268d40140867a3" translate="yes" xml:space="preserve">
          <source>The path part of a URL segment</source>
          <target state="translated">URL段的路径部分</target>
        </trans-unit>
        <trans-unit id="57501241fca71416c36ef15c3a51d7c6e44f1317" translate="yes" xml:space="preserve">
          <source>The path string</source>
          <target state="translated">路径字符串</target>
        </trans-unit>
        <trans-unit id="1a9c4ada156081d91a1927cd0a28c70af244c81e" translate="yes" xml:space="preserve">
          <source>The path to match against. Cannot be used together with a custom &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; function. A URL string that uses router matching notation. Can be a wild card (&lt;code&gt;**&lt;/code&gt;) that matches any URL (see Usage Notes below). Default is &quot;/&quot; (the root path).</source>
          <target state="translated">匹配的路径。不能与自定义 &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 功能一起使用。使用路由器匹配表示法的URL字符串。可以是与任何URL匹配的通配符（ &lt;code&gt;**&lt;/code&gt; ）（请参阅下面的使用说明）。默认值为&amp;ldquo; /&amp;rdquo;（根路径）。</target>
        </trans-unit>
        <trans-unit id="26cfa4e4510f3f3cc3401b03b8d84ea4dd0bb17b" translate="yes" xml:space="preserve">
          <source>The path to match against. Cannot be used together with a custom &lt;code&gt;matcher&lt;/code&gt; function. A URL string that uses router matching notation. Can be a wild card (&lt;code&gt;**&lt;/code&gt;) that matches any URL (see Usage Notes below). Default is &quot;/&quot; (the root path).</source>
          <target state="translated">匹配的路径。不能与自定义 &lt;code&gt;matcher&lt;/code&gt; 功能一起使用。使用路由器匹配表示法的URL字符串。可以是与任何URL匹配的通配符（ &lt;code&gt;**&lt;/code&gt; ）（请参阅下面的使用说明）。默认值为&amp;ldquo; /&amp;rdquo;（根路径）。</target>
        </trans-unit>
        <trans-unit id="9ea7c1cb9a5d01a52764c83bce6591f48a706bc8" translate="yes" xml:space="preserve">
          <source>The path to the 'street' control from the root form would be 'address' -&amp;gt; 'street'.</source>
          <target state="translated">从根形式到&amp;ldquo;街道&amp;rdquo;控件的路径将是&amp;ldquo;地址&amp;rdquo;-&amp;gt;&amp;ldquo;街道&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="3ef9964ab8f09b8e12ab9dd768d9f14677db6668" translate="yes" xml:space="preserve">
          <source>The path to this group from the top-level directive.</source>
          <target state="translated">从顶层指令到该组的路径。</target>
        </trans-unit>
        <trans-unit id="81b3c5aa5a142e56a8cc65e9cb4384f3838d042c" translate="yes" xml:space="preserve">
          <source>The path to this group.</source>
          <target state="translated">通往这个群体的道路。</target>
        </trans-unit>
        <trans-unit id="c5155f988648d9eafa70e267b1c2b7d6a2bb54ed" translate="yes" xml:space="preserve">
          <source>The path where new projects will be created, relative to the new workspace root.</source>
          <target state="translated">创建新项目的路径,相对于新工作区根目录。</target>
        </trans-unit>
        <trans-unit id="6bff124c5ff1260658dbe66420f0ad585635ee2f" translate="yes" xml:space="preserve">
          <source>The path where style resources will be placed, relative to outputPath.</source>
          <target state="translated">样式资源放置的路径,相对于outputPath。</target>
        </trans-unit>
        <trans-unit id="efc330a017153f448a0111c70f94ac011295b24b" translate="yes" xml:space="preserve">
          <source>The path-match strategy 'full' matches against the entire URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.</source>
          <target state="translated">路径匹配策略'full'会对整个URL进行匹配。在重定向空路径路由时,这样做很重要。否则,因为空路径是任何URL的前缀,所以即使导航到重定向目的地,路由器也会应用重定向,从而形成一个无尽的循环。</target>
        </trans-unit>
        <trans-unit id="7aedc08e6bf2368ad910279f0b057e807d83e9f8" translate="yes" xml:space="preserve">
          <source>The path-matching strategy, one of 'prefix' or 'full'. Default is 'prefix'.</source>
          <target state="translated">路径匹配策略,&quot;前缀 &quot;或 &quot;全 &quot;之一。默认为 &quot;前缀&quot;。</target>
        </trans-unit>
        <trans-unit id="10817689f142f9440662eeb6d05887794bb18bb9" translate="yes" xml:space="preserve">
          <source>The pathname where the app will be served.</source>
          <target state="translated">应用程序将被提供的路径名。</target>
        </trans-unit>
        <trans-unit id="ddea77aa7e88eee7c5407247c21aa1d815f8f4fa" translate="yes" xml:space="preserve">
          <source>The pipe class implements the &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; interface's &lt;code&gt;transform&lt;/code&gt; method that accepts an input value followed by optional parameters and returns the transformed value.</source>
          <target state="translated">管道类实现了 &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; 接口的 &lt;code&gt;transform&lt;/code&gt; 方法，该方法接受输入值和可选参数，并返回转换后的值。</target>
        </trans-unit>
        <trans-unit id="f73953d503dce99e3f2e6da39da4ce7debe6ac7d" translate="yes" xml:space="preserve">
          <source>The pipe name to use in template bindings. Typically uses &lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCase&lt;/a&gt; because the name cannot contain hyphens.</source>
          <target state="translated">模板绑定中使用的管道名称。通常使用&lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCase，&lt;/a&gt;因为名称不能包含连字符。</target>
        </trans-unit>
        <trans-unit id="345412f14368a1f164257004a17666a92c69e9a0" translate="yes" xml:space="preserve">
          <source>The pipe operator (&lt;code&gt;|&lt;/code&gt;)</source>
          <target state="translated">管道运算符（ &lt;code&gt;|&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="47f93ef7f7a798e2556f7e8b9c63fade54c0a39a" translate="yes" xml:space="preserve">
          <source>The pipe operator has a higher precedence than the ternary operator (&lt;code&gt;?:&lt;/code&gt;), which means &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; is parsed as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt;. Nevertheless, for a number of reasons, the pipe operator cannot be used without parentheses in the first and second operands of &lt;code&gt;?:&lt;/code&gt;. A good practice is to use parentheses in the third operand too.</source>
          <target state="translated">管道操作者具有更高的优先级比三元运算符（ &lt;code&gt;?:&lt;/code&gt; ），这意味着 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; 被解析为 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt; 。但是，由于多种原因，如果在 &lt;code&gt;?:&lt;/code&gt; 的第一和第二操作数中没有括号，则不能使用管道运算符。一个好的做法是在第三个操作数中也使用括号。</target>
        </trans-unit>
        <trans-unit id="eb53ab914374ca101ddcf09cb39e0b44e334194e" translate="yes" xml:space="preserve">
          <source>The pipe operator has a higher precedence than the ternary operator (&lt;code&gt;?:&lt;/code&gt;), which means &lt;code&gt;a ? b : c | x&lt;/code&gt; is parsed as &lt;code&gt;a ? b : (c | x)&lt;/code&gt;. Nevertheless, for a number of reasons, the pipe operator cannot be used without parentheses in the first and second operands of &lt;code&gt;?:&lt;/code&gt;. A good practice is to use parentheses in the third operand too.</source>
          <target state="translated">管道运算符的优先级比三元运算符（ &lt;code&gt;?:&lt;/code&gt; ：）高，这意味着 &lt;code&gt;a ? b : c | x&lt;/code&gt; 被解析为 &lt;code&gt;a ? b : (c | x)&lt;/code&gt; 。但是，由于多种原因，如果在 &lt;code&gt;?:&lt;/code&gt; 的第一和第二操作数中没有括号，则不能使用管道运算符。一个好的做法是在第三个操作数中也使用括号。</target>
        </trans-unit>
        <trans-unit id="ed50cd1104edcdf07f478c9622d53824cc197dcf" translate="yes" xml:space="preserve">
          <source>The pipe operator passes the result of an expression on the left to a pipe function on the right.</source>
          <target state="translated">管道操作符将左边的表达式的结果传递给右边的管道函数。</target>
        </trans-unit>
        <trans-unit id="8eb7ba48d7c30018b592c2a263ffe9de1745ef67" translate="yes" xml:space="preserve">
          <source>The pipes discussed earlier in this page are implemented with pure functions. The built-in &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; is a pure pipe with a pure function implementation. So are the &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; and &lt;code&gt;FlyingHeroesPipe&lt;/code&gt;. A few steps back, you reviewed the &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;&amp;mdash;an impure pipe with a pure function.</source>
          <target state="translated">本页面前面讨论的管道是通过纯函数实现的。内置的 &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 是具有纯函数实现的纯管道。所以是 &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; 和 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 。退后几步，您回顾了 &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; &amp;mdash;一个纯函数的不纯管道。</target>
        </trans-unit>
        <trans-unit id="120783f4944d7609420e4fa2d8de1cd7b96a2fd4" translate="yes" xml:space="preserve">
          <source>The popup should stay open, even when switching between pages in the application, until the user closes it by sending the message or canceling. Clearly you can't put the popup in the same outlet as the other pages.</source>
          <target state="translated">弹出式窗口应该保持打开状态,即使在应用程序中的页面之间切换,直到用户通过发送消息或取消来关闭它。显然,你不能把弹出窗口和其他页面放在同一个出口。</target>
        </trans-unit>
        <trans-unit id="bfe8a90e0b39cf0e03648ad7ceb8f68c1e9609e0" translate="yes" xml:space="preserve">
          <source>The port to use to serve the application.</source>
          <target state="translated">为应用程序服务的端口。</target>
        </trans-unit>
        <trans-unit id="d900c6fbbdec6ccc354680413a57b4ab661e72cc" translate="yes" xml:space="preserve">
          <source>The practice of cloning a request to set new headers is so common that there's a &lt;code&gt;setHeaders&lt;/code&gt; shortcut for it:</source>
          <target state="translated">克隆请求以设置新标头的做法非常普遍，以至于有一个 &lt;code&gt;setHeaders&lt;/code&gt; 快捷方式：</target>
        </trans-unit>
        <trans-unit id="d79f7ddd3370cdaec456ab22eea48dab91ad8972" translate="yes" xml:space="preserve">
          <source>The practices described in this document apply to Angular 2.0 and later. If you are currently using AngularJS, see &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">本文档中描述的做法适用于Angular 2.0及更高版本。如果您当前正在使用AngularJS，请参阅&lt;a href=&quot;upgrade&quot;&gt;从AngularJS升级&lt;/a&gt;。&lt;em&gt;AngularJS&lt;/em&gt;是Angular所有v1.x版本的名称。</target>
        </trans-unit>
        <trans-unit id="1b61f5ed114256e63478f78b9527841ff42f1f55" translate="yes" xml:space="preserve">
          <source>The predicate is any method that takes a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; and returns a &lt;em&gt;truthy&lt;/em&gt; value. The following example finds all &lt;code&gt;DebugElements&lt;/code&gt; with a reference to a template local variable named &quot;content&quot;:</source>
          <target state="translated">谓词是采用 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 并返回&lt;em&gt;真实&lt;/em&gt;值的任何方法。下面的示例查找所有 &lt;code&gt;DebugElements&lt;/code&gt; 并引用名为&amp;ldquo; content&amp;rdquo;的模板局部变量：</target>
        </trans-unit>
        <trans-unit id="ce3e8a27555504e35c1b0cf83f429a0f13cb6911" translate="yes" xml:space="preserve">
          <source>The preemptive error message tells you to compile explicitly with &lt;code&gt;compileComponents()&lt;/code&gt;.</source>
          <target state="translated">抢先错误消息告诉您使用 &lt;code&gt;compileComponents()&lt;/code&gt; 进行显式编译。</target>
        </trans-unit>
        <trans-unit id="531aa0c92c5d9b66edd1abb9d99a1c78f864e5f1" translate="yes" xml:space="preserve">
          <source>The preferred solution is to add a &lt;code&gt;redirect&lt;/code&gt; route that translates the initial relative URL (&lt;code&gt;''&lt;/code&gt;) to the desired default path (&lt;code&gt;/heroes&lt;/code&gt;). The browser address bar shows &lt;code&gt;.../heroes&lt;/code&gt; as if you'd navigated there directly.</source>
          <target state="translated">优选的解决方案是增加一个 &lt;code&gt;redirect&lt;/code&gt; 该平移初始相对URL（路线 &lt;code&gt;''&lt;/code&gt; ），以所需的默认路径（ &lt;code&gt;/heroes&lt;/code&gt; ）。浏览器地址栏显示 &lt;code&gt;.../heroes&lt;/code&gt; ，就像您直接导航到那里一样。</target>
        </trans-unit>
        <trans-unit id="323804b4601311b642368194508cfb069c1a6100" translate="yes" xml:space="preserve">
          <source>The preferred way to configure the strategy is to add a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; element&lt;/a&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">配置策略的首选方法是在 &lt;code&gt;index.html&lt;/code&gt; 的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 中添加&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt;元素&lt;/a&gt;标签。</target>
        </trans-unit>
        <trans-unit id="be94b295da6b6dfbe7f415ce1a95d804f5cc29c3" translate="yes" xml:space="preserve">
          <source>The preferred way to un-ignore a file is to update the &lt;code&gt;content/examples/.gitignore&lt;/code&gt; like this:</source>
          <target state="translated">取消忽略文件的首选方法是像这样更新 &lt;code&gt;content/examples/.gitignore&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1f0086cdbedbb14fe8c9bfa9cacc9506b54363c6" translate="yes" xml:space="preserve">
          <source>The prefix to apply to generated selectors for the initial project.</source>
          <target state="translated">应用于初始项目的生成选择器的前缀。</target>
        </trans-unit>
        <trans-unit id="25c273d85b73af2578dc0a29b3ba9b91dc63aba8" translate="yes" xml:space="preserve">
          <source>The prefix to apply to the generated component selector.</source>
          <target state="translated">应用于生成的组件选择器的前缀。</target>
        </trans-unit>
        <trans-unit id="cfd2a19c32615eb586fdc1467f3daf305549c48a" translate="yes" xml:space="preserve">
          <source>The preloader optimistically loads all router configurations to make navigations into lazily-loaded sections of the application faster.</source>
          <target state="translated">预加载器优化加载所有路由器配置,使导航更快地进入应用的懒加载部分。</target>
        </trans-unit>
        <trans-unit id="f42acc2b5381961d93f1b9bb1b38efec3174a5c2" translate="yes" xml:space="preserve">
          <source>The preloader runs in the background. When the router bootstraps, the preloader starts listening to all navigation events. After every such event, the preloader will check if any configurations can be loaded lazily.</source>
          <target state="translated">预加载器在后台运行。当路由器启动时,预加载器开始监听所有导航事件。在每一个这样的事件之后,预加载器将检查是否有任何配置可以被懒惰地加载。</target>
        </trans-unit>
        <trans-unit id="5d55f652f32922a327beff0bc5b2217e949bdf3d" translate="yes" xml:space="preserve">
          <source>The presence of &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tags in the component's template.</source>
          <target state="translated">组件模板中存在 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="00d3e678b5578ba56bc0d2cfcaf26815fef02171" translate="yes" xml:space="preserve">
          <source>The presence of the implicit template object has implications for the nesting of structural directives. For more on this subject, see &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">隐式模板对象的存在对结构指令的嵌套有影响。有关此主题的更多信息，请参见《&lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;结构指令》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b42061155850ee530a76aac5296dde7e21feb2b3" translate="yes" xml:space="preserve">
          <source>The presence of this method is a signal to the Ivy template type-check compiler that the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; structural directive renders its template with a specific context type.</source>
          <target state="translated">该方法的存在向Ivy模板类型检查编译器发出信号，即 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 结构化指令使用特定的上下文类型呈现其模板。</target>
        </trans-unit>
        <trans-unit id="212d838a9ee4a99758a2a681d1aa10ca58ec1f2c" translate="yes" xml:space="preserve">
          <source>The presence of this method is a signal to the Ivy template type-check compiler that the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; structural directive renders its template with a specific context type.</source>
          <target state="translated">此方法的存在向Ivy模板类型检查编译器发出信号，即 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 结构化指令使用特定的上下文类型呈现其模板。</target>
        </trans-unit>
        <trans-unit id="86f41d9e1229109e3648daa0169e96c673c401bf" translate="yes" xml:space="preserve">
          <source>The presence of this static field is a signal to the Ivy template type check compiler that when the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; structural directive renders its template, the type of the expression bound to &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; should be narrowed in some way. For &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, the binding expression itself is used to narrow its type, which allows the strictNullChecks feature of TypeScript to work with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">此静态字段的存在向Ivy模板类型检查编译器发出信号，即当 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 结构化指令呈现其模板时，应以某种方式缩小绑定到 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 的表达式的类型。对于 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ，绑定表达式本身用于缩小其类型，这允许TypeScript的strictNullChecks功能与 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 一起使用。</target>
        </trans-unit>
        <trans-unit id="d3d52fcf10501054e6ada11540d5b2872f70a568" translate="yes" xml:space="preserve">
          <source>The preview pane immediately updates to display the name of each product in the list.</source>
          <target state="translated">预览窗格立即更新,显示列表中每个产品的名称。</target>
        </trans-unit>
        <trans-unit id="b63f811b9f449d96dbde8ef1bdf22a1122a338c0" translate="yes" xml:space="preserve">
          <source>The preview pane on the right shows the starting state of the sample Angular app. It defines a frame with a top bar (containing the store name and checkout icon) and the title for a product list (which will be populated and dynamically updated with data from the application).</source>
          <target state="translated">右边的预览窗格显示了示例Angular应用的起始状态。它定义了一个框架,其中有一个顶栏(包含商店名称和结账图标)和产品列表的标题(将通过应用程序的数据填充和动态更新)。</target>
        </trans-unit>
        <trans-unit id="e48d8699ea4367c454a0431ca00856d48e5fe151" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;TwainComponent&lt;/code&gt; tests simulated an asynchronous observable response from the &lt;code&gt;TwainService&lt;/code&gt; with the &lt;code&gt;asyncData&lt;/code&gt; and &lt;code&gt;asyncError&lt;/code&gt; utilities.</source>
          <target state="translated">先前的 &lt;code&gt;TwainComponent&lt;/code&gt; 测试使用 &lt;code&gt;asyncData&lt;/code&gt; 和 &lt;code&gt;asyncError&lt;/code&gt; 实用程序模拟了来自 &lt;code&gt;TwainService&lt;/code&gt; 的异步可观察响应。</target>
        </trans-unit>
        <trans-unit id="5364db2c3b6e95db6ec36a33c11635ccee48e801" translate="yes" xml:space="preserve">
          <source>The previous &lt;em&gt;Hero of the Month&lt;/em&gt; example used the &lt;code&gt;MinimalLogger&lt;/code&gt; class as the token for a provider of &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;本月&lt;/em&gt;的先前&lt;em&gt;Hero&lt;/em&gt;示例使用 &lt;code&gt;MinimalLogger&lt;/code&gt; 类作为 &lt;code&gt;LoggerService&lt;/code&gt; 提供程序的令牌。</target>
        </trans-unit>
        <trans-unit id="ab5d9f1002775378705c23acd28f52fb378eb33d" translate="yes" xml:space="preserve">
          <source>The previous example presents such a name collision. The component has a &lt;code&gt;customer&lt;/code&gt; property and the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; defines a &lt;code&gt;customer&lt;/code&gt; template variable.</source>
          <target state="translated">前面的示例提出了这种名称冲突。该组件具有 &lt;code&gt;customer&lt;/code&gt; 属性，并且 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 定义了 &lt;code&gt;customer&lt;/code&gt; 模板变量。</target>
        </trans-unit>
        <trans-unit id="3ec517832673bf93688f5797ba759fb5bcbd4451" translate="yes" xml:space="preserve">
          <source>The previous page showed how to &lt;a href=&quot;displaying-data&quot;&gt;display data&lt;/a&gt;. This page demonstrated event binding techniques.</source>
          <target state="translated">前一页显示了如何&lt;a href=&quot;displaying-data&quot;&gt;显示数据&lt;/a&gt;。此页面演示了事件绑定技术。</target>
        </trans-unit>
        <trans-unit id="be70e2fb63cc0bc0498435ac852b45171caea274" translate="yes" xml:space="preserve">
          <source>The previous section features a simple two-state transition. Now create an animation with multiple steps run in sequence using &lt;em&gt;keyframes&lt;/em&gt;.</source>
          <target state="translated">上一节以简单的两态转换为特色。现在，创建一个动画，并使用&lt;em&gt;关键帧&lt;/em&gt;按顺序运行多个步骤。</target>
        </trans-unit>
        <trans-unit id="40f4c684187ee76e174e3c81ad8531be7d342ffe" translate="yes" xml:space="preserve">
          <source>The previous sections of this guide referred to RxJS &lt;code&gt;Observables&lt;/code&gt; and operators such as &lt;code&gt;catchError&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt;. You will encounter more RxJS artifacts as you continue below.</source>
          <target state="translated">本指南的前几节提到了RxJS &lt;code&gt;Observables&lt;/code&gt; 和操作符，例如 &lt;code&gt;catchError&lt;/code&gt; 和 &lt;code&gt;retry&lt;/code&gt; 。当您继续下面时，您将遇到更多的RxJS工件。</target>
        </trans-unit>
        <trans-unit id="36939dd7e21e25efe97977bcc704881e41916a95" translate="yes" xml:space="preserve">
          <source>The previous simple example showed passing in a string. To pass in an object, the syntax and thinking are the same.</source>
          <target state="translated">前面的简单例子展示了传入一个字符串。要传入一个对象,语法和思路都是一样的。</target>
        </trans-unit>
        <trans-unit id="56f2a62246eea5c3c9cdaa4780c32f7e493575ed" translate="yes" xml:space="preserve">
          <source>The previous tests played the role of the host &lt;code&gt;DashboardComponent&lt;/code&gt; themselves. But does the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; work correctly when properly data-bound to a host component?</source>
          <target state="translated">先前的测试本身扮演了主机 &lt;code&gt;DashboardComponent&lt;/code&gt; 的角色。但是，正确地将数据绑定到主机组件时， &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 是否可以正常工作？</target>
        </trans-unit>
        <trans-unit id="5bf3abe312936fd7f8c715b3c6575f72f4cc1b47" translate="yes" xml:space="preserve">
          <source>The previous value of the attribute.</source>
          <target state="translated">属性的前一个值。</target>
        </trans-unit>
        <trans-unit id="1dfa467560796beba789d3214a05abeb3f64d6a8" translate="yes" xml:space="preserve">
          <source>The previous version assigns an array of heroes to the component's &lt;code&gt;heroes&lt;/code&gt; property. The assignment occurs &lt;em&gt;synchronously&lt;/em&gt;, as if the server could return heroes instantly or the browser could freeze the UI while it waited for the server's response.</source>
          <target state="translated">先前版本将英雄数组分配给组件的 &lt;code&gt;heroes&lt;/code&gt; 属性。分配&lt;em&gt;同步进行&lt;/em&gt;，就像服务器可以立即返回英雄，或者浏览器可以在等待服务器响应时冻结UI一样。</target>
        </trans-unit>
        <trans-unit id="72231ecb9078c4b31429d32906f226cb03e9377c" translate="yes" xml:space="preserve">
          <source>The primary navigation part has changed; the secondary route is the same.</source>
          <target state="translated">一级导航部分有变化,二级路线不变。</target>
        </trans-unit>
        <trans-unit id="3c9d8bf0259e3eb63f943c6785b8b6a011914253" translate="yes" xml:space="preserve">
          <source>The primary routing outlet.</source>
          <target state="translated">主要的路由出口。</target>
        </trans-unit>
        <trans-unit id="486f9745b09ef70dd0d395c0292014660ec3a6b7" translate="yes" xml:space="preserve">
          <source>The process of &lt;code&gt;HeroService&lt;/code&gt; injection looks something like this.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; 注入的过程如下所示。</target>
        </trans-unit>
        <trans-unit id="f2e3b6f36c0c22bc94631be9ba69dd603b5d41ff" translate="yes" xml:space="preserve">
          <source>The product details component already uses the cart service (&lt;code&gt;CartService&lt;/code&gt;) to add products to the cart.</source>
          <target state="translated">产品详细信息组件已经使用购物车服务（ &lt;code&gt;CartService&lt;/code&gt; ）将产品添加到购物车。</target>
        </trans-unit>
        <trans-unit id="063dcedd30b66eda148abcead7f2283490fe96f9" translate="yes" xml:space="preserve">
          <source>The product details component already uses the cart service to add products to the cart.</source>
          <target state="translated">产品详情组件已经使用购物车服务将产品添加到购物车中。</target>
        </trans-unit>
        <trans-unit id="5fc59453ebfb71879792adaabb0b4d604e811daa" translate="yes" xml:space="preserve">
          <source>The product details component handles the display of each product. The Angular Router displays components based on the browser's URL and your defined routes. This section shows you how to use the Angular Router to combine the &lt;code&gt;products&lt;/code&gt; data and route information to display the specific details for each product.</source>
          <target state="translated">产品详细信息组件处理每个产品的显示。Angular Router根据浏览器的URL和您定义的路由显示组件。本节说明如何使用Angular Router组合 &lt;code&gt;products&lt;/code&gt; 数据和路由信息以显示每个产品的特定详细信息。</target>
        </trans-unit>
        <trans-unit id="8021e87038c33d08539a200b856644645d4e9ce1" translate="yes" xml:space="preserve">
          <source>The product details component handles the display of each product. The Angular Router displays components based on the browser's URL and your defined routes. You'll use the Angular Router to combine the &lt;code&gt;products&lt;/code&gt; data and route information to display the specific details for each product.</source>
          <target state="translated">产品详细信息组件处理每个产品的显示。Angular Router根据浏览器的URL和您定义的路由显示组件。您将使用Angular Router组合 &lt;code&gt;products&lt;/code&gt; 数据和路由信息，以显示每个产品的特定详细信息。</target>
        </trans-unit>
        <trans-unit id="7eb6cfe553c75eff3acf81ec96aea3ac0265c8bb" translate="yes" xml:space="preserve">
          <source>The project also contains some animations. You won't upgrade them in this version of the guide. Turn to the &lt;a href=&quot;animations&quot;&gt;Angular animations&lt;/a&gt; guide to learn about that.</source>
          <target state="translated">该项目还包含一些动画。您不会在此版本的指南中升级它们。转到&lt;a href=&quot;animations&quot;&gt;Angular动画&lt;/a&gt;指南以了解有关内容。</target>
        </trans-unit>
        <trans-unit id="2939b42883b8e20eda57b1ac4db86db02bffcfea" translate="yes" xml:space="preserve">
          <source>The project pane on the left shows the source files that make up the application, including all of the infrastructure and configuration files. The currently selected file shows up in the editor pane in the middle.</source>
          <target state="translated">左边的项目窗格显示了组成应用程序的源文件,包括所有的基础设施和配置文件。当前选择的文件显示在中间的编辑器窗格中。</target>
        </trans-unit>
        <trans-unit id="cb22493e5247fcf1b73099aacb2b51c7edb8e5bf" translate="yes" xml:space="preserve">
          <source>The project you create with the CLI is immediately ready to test. Just run the &lt;a href=&quot;cli/test&quot;&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/a&gt; CLI command:</source>
          <target state="translated">您使用CLI创建的项目可以立即进行测试。只需运行&lt;a href=&quot;cli/test&quot;&gt; &lt;code&gt;ng test&lt;/code&gt; &lt;/a&gt; CLI命令：</target>
        </trans-unit>
        <trans-unit id="a1cfa2d4e83385878d411d839ce7a7cdbd9c013f" translate="yes" xml:space="preserve">
          <source>The projected content of &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; sees the 🐳 (whale), not the 🐶 (puppy), because the 🐶 (puppy) is inside the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; can only see the 🐶 (puppy) if it is also within the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 的投影内容看到🐳（鲸鱼），而不是🐶（puppy），因为🐶（puppy）在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 内部。如果 &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; 也位于 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 中,则只能看到🐶（幼犬）。</target>
        </trans-unit>
        <trans-unit id="e9686155e75a6fd586dab49af5a597ad88553139" translate="yes" xml:space="preserve">
          <source>The projects below are not associated with a particular Angular version. We'll release them on completion, and they will be part of a specific version based on our release schedule, following semantic versioning. For example, features are released in the next minor after they are complete, or the next major if they include breaking changes.</source>
          <target state="translated">下面的项目不与特定的Angular版本相关联。我们会在完成后发布它们,它们将根据我们的发布时间表,遵循语义版本化,成为特定版本的一部分。例如,功能完成后会在下一个次要版本中发布,如果包含突破性的变化,则会在下一个主要版本中发布。</target>
        </trans-unit>
        <trans-unit id="6e36792ea583ac976f37bafa9de7316d9520835d" translate="yes" xml:space="preserve">
          <source>The prompt runtime automatically validates the provided response against the constraints provided in the JSON schema. If the value is not acceptable, the user is prompted for a new value. This ensures that any values passed to the schematic meet the expectations of the schematic's implementation, so that you do not need to add additional checks within the schematic's code.</source>
          <target state="translated">提示运行时会根据JSON模式中提供的约束条件自动验证所提供的响应。如果值不可接受,则提示用户输入新的值。这确保了传递给原理图的任何值都能满足原理图实现的期望,因此你不需要在原理图的代码中添加额外的检查。</target>
        </trans-unit>
        <trans-unit id="7cf0ecec69996d92571eb4e4bd556aced4c3efe0" translate="yes" xml:space="preserve">
          <source>The properties of an &lt;code&gt;$event&lt;/code&gt; object vary depending on the type of DOM event. For example, a mouse event includes different information than an input box editing event.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 对象的属性取决于DOM事件的类型。例如，鼠标事件与输入框编辑事件所包含的信息不同。</target>
        </trans-unit>
        <trans-unit id="97a76f1a52bc3c879b21278ea18563262a1e410d" translate="yes" xml:space="preserve">
          <source>The properties of the &lt;code&gt;nativeElement&lt;/code&gt; depend upon the runtime environment. You could be running these tests on a &lt;em&gt;non-browser&lt;/em&gt; platform that doesn't have a DOM or whose DOM-emulation doesn't support the full &lt;code&gt;HTMLElement&lt;/code&gt; API.</source>
          <target state="translated">&lt;code&gt;nativeElement&lt;/code&gt; 的属性取决于运行时环境。您可以在没有DOM或DOM模拟不支持完整 &lt;code&gt;HTMLElement&lt;/code&gt; API 的&lt;em&gt;非浏览器&lt;/em&gt;平台上运行这些测试。</target>
        </trans-unit>
        <trans-unit id="c04dcd4d9e3fdfb316a49d102b3473f76bd1e0d6" translate="yes" xml:space="preserve">
          <source>The property name.</source>
          <target state="translated">财产名称。</target>
        </trans-unit>
        <trans-unit id="7df460d20d043603559a67d7974d835f9f0eed3f" translate="yes" xml:space="preserve">
          <source>The provided classes are added to the element when the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; becomes the current active route.</source>
          <target state="translated">当 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 成为当前活动路由时，将提供的类添加到元素。</target>
        </trans-unit>
        <trans-unit id="d85cdc71036be543ee35d535e12c877802678983" translate="yes" xml:space="preserve">
          <source>The provided functions are injected at application startup and executed during app initialization. If any of these functions returns a Promise, initialization does not complete until the Promise is resolved.</source>
          <target state="translated">所提供的函数在应用程序启动时被注入,并在应用程序初始化时执行。如果这些函数中的任何一个函数返回一个Promise,那么在Promise被解决之前,初始化不会完成。</target>
        </trans-unit>
        <trans-unit id="06f0a18f14adb7eed8c7062f18e58fdc76b4204f" translate="yes" xml:space="preserve">
          <source>The provided sample application creates the &lt;code&gt;Hero&lt;/code&gt; class which defines the data model reflected in the form.</source>
          <target state="translated">提供的示例应用程序将创建 &lt;code&gt;Hero&lt;/code&gt; 类，该类定义了反映在表单中的数据模型。</target>
        </trans-unit>
        <trans-unit id="5b4910a760b25a51893dd6345e06c7f8b33600d7" translate="yes" xml:space="preserve">
          <source>The provider factory function (returned by &lt;code&gt;runnersUpFactory()&lt;/code&gt;) returns the actual dependency object, the string of names.</source>
          <target state="translated">提供者工厂函数（由 &lt;code&gt;runnersUpFactory()&lt;/code&gt; ）返回）返回实际的依赖对象，即名称字符串。</target>
        </trans-unit>
        <trans-unit id="b4c17117d8a92a8817f56060d61fb1bd4c763cc5" translate="yes" xml:space="preserve">
          <source>The provider object can have a third option, &lt;code&gt;multi: true&lt;/code&gt;, which you can use with &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; to register multiple handlers for the provide event.</source>
          <target state="translated">提供者对象可以具有第三个选项 &lt;code&gt;multi: true&lt;/code&gt; ，您可以将其与 &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; 一起使用，以为provider事件注册多个处理程序。</target>
        </trans-unit>
        <trans-unit id="02b3d62f3fe1096d970290346afe693026ae8245" translate="yes" xml:space="preserve">
          <source>The providers array is where you list the services the app needs. When you list services here, they are available app-wide. You can scope them when using feature modules and lazy loading. For more information, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">提供者数组是您列出应用程序所需服务的地方。当您在此处列出服务时，它们将在整个应用程序范围内可用。您可以在使用功能模块和延迟加载时确定它们的范围。有关更多信息，请参见&lt;a href=&quot;providers&quot;&gt;提供者&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dbfe5beb656c4962d3cf4b97d176386634f50d45" translate="yes" xml:space="preserve">
          <source>The public API for schematics defines classes that represent the basic concepts.</source>
          <target state="translated">示意图的公共API定义了代表基本概念的类。</target>
        </trans-unit>
        <trans-unit id="de6f6ac52bec399fd6660c2b4b054e9a39440b12" translate="yes" xml:space="preserve">
          <source>The public API for your library is maintained in the &lt;code&gt;public-api.ts&lt;/code&gt; file in your library folder. Anything exported from this file is made public when your library is imported into an application. Use an NgModule to expose services and components.</source>
          <target state="translated">库的公共API 在库文件夹的 &lt;code&gt;public-api.ts&lt;/code&gt; 文件中维护。当您的库导入到应用程序时，从此文件导出的所有内容都会公开。使用NgModule公开服务和组件。</target>
        </trans-unit>
        <trans-unit id="48f569ff47916066fbb6670275a32be0c08ff2bc" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;&lt;a href=&quot;../api/core/wrappedvalue&quot;&gt;WrappedValue&lt;/a&gt;&lt;/code&gt; is to allow the same object instance to be treated as different for the purposes of change detection. It is commonly used with the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe in the case where the &lt;code&gt;Observable&lt;/code&gt; produces the same instance of the value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/wrappedvalue&quot;&gt;WrappedValue&lt;/a&gt;&lt;/code&gt; 的目的是为了更改检测的目的，允许将相同的对象实例视为不同的对象。如果 &lt;code&gt;Observable&lt;/code&gt; 产生相同的值实例，则通常与 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道一起使用。</target>
        </trans-unit>
        <trans-unit id="d054d0b6719a9e60f44011ba13eb8f4c3e083451" translate="yes" xml:space="preserve">
          <source>The query parameters shared by all the routes</source>
          <target state="translated">所有途径共享的查询参数</target>
        </trans-unit>
        <trans-unit id="4231089991bd8ff6dd16d350b35cc226cbd300f3" translate="yes" xml:space="preserve">
          <source>The query params of the URL</source>
          <target state="translated">URL的查询参数</target>
        </trans-unit>
        <trans-unit id="2e3c5b3a02d06abe266f2cfa14e56837b6f3527d" translate="yes" xml:space="preserve">
          <source>The query results to store</source>
          <target state="translated">查询结果存储</target>
        </trans-unit>
        <trans-unit id="ad7aeea31c0c6f526df9d9af5712f3c533c2d889" translate="yes" xml:space="preserve">
          <source>The query returns &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; wrappers around the matching elements.</source>
          <target state="translated">该查询返回围绕匹配元素的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 包装器。</target>
        </trans-unit>
        <trans-unit id="420962f6ff64d28c5e044d0cc2355bfc2ea5030a" translate="yes" xml:space="preserve">
          <source>The query returns a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; for the paragraph.</source>
          <target state="translated">查询返回该段落的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9af7bb5d4e8ad84a327ab8455d86b884cbad452" translate="yes" xml:space="preserve">
          <source>The quick-info feature allows you to hover to see where components, directives, modules, and so on come from. You can then click &quot;Go to definition&quot; or press F12 to go directly to the definition.</source>
          <target state="translated">快速信息功能允许你悬停查看组件、指令、模块等的来源。然后你可以点击 &quot;转到定义 &quot;或按F12直接进入定义。</target>
        </trans-unit>
        <trans-unit id="50926fb8f24e0f7a0c8fd99de16fa0fdad121aad" translate="yes" xml:space="preserve">
          <source>The reader requests a page by its Page URL. The doc viewer fetches the corresponding JSON file, interprets it, and renders it as fully-formed HTML page.</source>
          <target state="translated">读者通过页面URL请求一个页面。doc浏览器获取相应的JSON文件,对其进行解释,并将其渲染为完全成形的HTML页面。</target>
        </trans-unit>
        <trans-unit id="161d1b9d874c147636f786db6462e2b921a846dc" translate="yes" xml:space="preserve">
          <source>The real &lt;code&gt;RouterLinkDirective&lt;/code&gt; is quite complicated and entangled with other components and directives of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. It requires challenging setup to mock and use in tests.</source>
          <target state="translated">真正的 &lt;code&gt;RouterLinkDirective&lt;/code&gt; 非常复杂，并且与 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 的其他组件和指令纠缠在一起。它要求挑战性的设置以模拟和在测试中使用。</target>
        </trans-unit>
        <trans-unit id="ecdc6110a6ce9753c3654ca5a8b42bdbffa31c5a" translate="yes" xml:space="preserve">
          <source>The reason Angular ignores the changed array element is that the &lt;em&gt;reference&lt;/em&gt; to the array hasn't changed. Since the array is the same, Angular does not update the display.</source>
          <target state="translated">Angular忽略更改后的数组元素的原因是对该数组的&lt;em&gt;引用&lt;/em&gt;未更改。由于数组相同，因此Angular不会更新显示。</target>
        </trans-unit>
        <trans-unit id="7ceba990815347e65fc419a07143830d7018fac5" translate="yes" xml:space="preserve">
          <source>The reason is &lt;em&gt;tree shaking&lt;/em&gt;. For production apps you want to load the smallest, fastest code possible. The code should contain only the classes that you actually need. It should exclude a component that's never used, whether or not that component is declared.</source>
          <target state="translated">原因是&lt;em&gt;摇树&lt;/em&gt;。对于生产应用程序，您希望加载最小，最快的代码。该代码应仅包含您实际需要的类。它应排除从未使用过的组件，无论该组件是否已声明。</target>
        </trans-unit>
        <trans-unit id="6a078f105d135e610ac0d0702bdd6e7a40c0fae9" translate="yes" xml:space="preserve">
          <source>The reason is simplicity. Structural directives can do complex things with the host element and its descendents. When two directives lay claim to the same host element, which one takes precedence? Which should go first, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;NgFor&lt;/code&gt;? Can the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; cancel the effect of the &lt;code&gt;NgFor&lt;/code&gt;? If so (and it seems like it should be so), how should Angular generalize the ability to cancel for other structural directives?</source>
          <target state="translated">原因是简单。结构化指令可以对宿主元素及其后代进行复杂的处理。当两个指令对同一宿主元素提出要求时，哪个优先？ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;NgFor&lt;/code&gt; 应该先走？在可 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 取消的影响 &lt;code&gt;NgFor&lt;/code&gt; ？如果是这样（看起来应该是这样），Angular应该如何概括取消其他结构性指令的能力？</target>
        </trans-unit>
        <trans-unit id="ea64c30fa849f9f4bda29f5d5bb7b6758b713072" translate="yes" xml:space="preserve">
          <source>The recently-developed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; Web Platform feature is currently supported natively in a number of browsers.</source>
          <target state="translated">许多浏览器当前都支持最近开发的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;自定义元素&lt;/a&gt;Web平台功能。</target>
        </trans-unit>
        <trans-unit id="fafb040a487d878e72e67cd8a770eb670b009039" translate="yes" xml:space="preserve">
          <source>The recently-developed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; Web Platform feature is currently supported natively in a number of browsers. Support is pending or planned in other browsers.</source>
          <target state="translated">许多浏览器目前都支持最近开发的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;自定义元素&lt;/a&gt; Web平台功能。支持在其他浏览器中待定或计划中。</target>
        </trans-unit>
        <trans-unit id="bae2bdba102ddc09fc48c1dbc2f8e6e630be2a64" translate="yes" xml:space="preserve">
          <source>The recommended solution is to pass the full request URL to the &lt;code&gt;options&lt;/code&gt; argument of &lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule()&lt;/a&gt; or &lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory()&lt;/a&gt; (depending on what you use to render &lt;code&gt;AppServerModule&lt;/code&gt; on the server). This option is the least intrusive as it does not require any changes to the app. Here, &quot;request URL&quot; refers to the URL of the request as a response to which the app is being rendered on the server. For example, if the client requested &lt;code&gt;https://my-server.com/dashboard&lt;/code&gt; and you are rendering the app on the server to respond to that request, &lt;code&gt;options.url&lt;/code&gt; should be set to &lt;code&gt;https://my-server.com/dashboard&lt;/code&gt;.</source>
          <target state="translated">推荐的解决方案是将完整的请求URL传递给&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule（）&lt;/a&gt;或&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory（）&lt;/a&gt;的 &lt;code&gt;options&lt;/code&gt; 参数（取决于您在服务器上呈现 &lt;code&gt;AppServerModule&lt;/code&gt; 的方式）。此选项具有最小的侵入性，因为它不需要对应用程序进行任何更改。在此，&amp;ldquo;请求URL&amp;rdquo;是指作为在服务器上呈现应用的响应的请求的URL。例如，如果客户端请求 &lt;code&gt;https://my-server.com/dashboard&lt;/code&gt; ,并且您正在服务器上呈现应用程序以响应该请求，则应该将 &lt;code&gt;options.url&lt;/code&gt; 设置为 &lt;code&gt;https://my-server.com/dashboard&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa75dd5d0bada1f47ade184135ab747fbf80a41c" translate="yes" xml:space="preserve">
          <source>The redirect path can be relative, as shown in this example, or absolute. If we change the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; value in the example to the absolute URL segment '/user/:name', the result URL is also absolute, '/user/jim'.</source>
          <target state="translated">重定向路径可以是相对的（如本示例所示），也可以是绝对的。如果我们将示例中的 &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; 值更改为绝对URL段&amp;ldquo; / user /：name&amp;rdquo;，则结果URL也是绝对&amp;ldquo; / user / jim&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="f32a6895b918b3a1380a339e0611773862b1a3d1" translate="yes" xml:space="preserve">
          <source>The redirect path can be relative, as shown in this example, or absolute. If we change the &lt;code&gt;redirectTo&lt;/code&gt; value in the example to the absolute URL segment '/user/:name', the result URL is also absolute, '/user/jim'.</source>
          <target state="translated">重定向路径可以是相对的（如本示例所示），也可以是绝对的。如果我们将示例中的 &lt;code&gt;redirectTo&lt;/code&gt; 值更改为绝对URL段&amp;ldquo; / user /：name&amp;rdquo;，则结果URL也是绝对&amp;ldquo; / user / jim&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="ce8f45225aa19c5dcf369c6d23b7264529fa54d7" translate="yes" xml:space="preserve">
          <source>The reference value of itemForm, without the ngForm attribute value, would be the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;. There is, however, a difference between a Component and a Directive in that a &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; will be referenced without specifying the attribute value, and a &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; will not change the implicit reference (that is, the element).</source>
          <target state="translated">没有ngForm属性值的itemForm的引用值将是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;。但是，Component和Directive之间的区别在于，在不指定属性值的情况下将引用 &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; ，并且 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 不会更改隐式引用（即元素）。</target>
        </trans-unit>
        <trans-unit id="163fc73e89da2b739cc30475016c72000469a778" translate="yes" xml:space="preserve">
          <source>The reference variable&amp;rsquo;s &lt;code&gt;valid&lt;/code&gt; property on input controls to check if a control is valid and show or hide error messages.</source>
          <target state="translated">输入控件上引用变量的 &lt;code&gt;valid&lt;/code&gt; 属性，用于检查控件是否有效以及显示或隐藏错误消息。</target>
        </trans-unit>
        <trans-unit id="3e74d5a063ed6ad113dcb0dc04276262826975d9" translate="yes" xml:space="preserve">
          <source>The reference variable&amp;rsquo;s &lt;code&gt;valid&lt;/code&gt; property on input controls to check if a control is valid and show/hide error messages.</source>
          <target state="translated">输入控件上参考变量的 &lt;code&gt;valid&lt;/code&gt; 属性，用于检查控件是否有效以及显示/隐藏错误消息。</target>
        </trans-unit>
        <trans-unit id="8e1c54c7687dd1cbc34b9457b4da8f1141636f2c" translate="yes" xml:space="preserve">
          <source>The registered async validator function for the control</source>
          <target state="translated">控件的注册异步验证器功能。</target>
        </trans-unit>
        <trans-unit id="14569c3edda6f10cb9b8ea1799a88a50904561f7" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a blur event occurs on the input element.</source>
          <target state="translated">当输入元素发生模糊事件时调用的注册回调函数。</target>
        </trans-unit>
        <trans-unit id="83a100bf5139d939736b31435c736c0e17e4ef73" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a change event occurs on the input element.</source>
          <target state="translated">当输入元素发生变化事件时调用的注册回调函数。</target>
        </trans-unit>
        <trans-unit id="8325421c1589c4b1cafcd0c9b1b460010fe4dabd" translate="yes" xml:space="preserve">
          <source>The registered callback function called when a change or input event occurs on the input element.</source>
          <target state="translated">当输入元素发生变化或输入事件时调用的注册回调函数。</target>
        </trans-unit>
        <trans-unit id="60864d0a7b033aeeb5697aea8e9fe00704ce69b5" translate="yes" xml:space="preserve">
          <source>The registered callback function called when an input event occurs on the input element.</source>
          <target state="translated">当输入元素发生输入事件时调用的注册回调函数。</target>
        </trans-unit>
        <trans-unit id="3f720157232b77c5ba1d4c879a427fa93efc8bc0" translate="yes" xml:space="preserve">
          <source>The registered synchronous validator function for the control</source>
          <target state="translated">控件的注册同步验证器功能。</target>
        </trans-unit>
        <trans-unit id="611af0e0b9e0bf773539c9b919be8a53d47c0b03" translate="yes" xml:space="preserve">
          <source>The related &lt;code&gt;HeroDetailComponent&lt;/code&gt; tests will assert that methods of the &lt;code&gt;HeroDetailService&lt;/code&gt; were called by spying on the service methods. Accordingly, the stub implements its methods as spies:</source>
          <target state="translated">相关 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 测试将断言方法 &lt;code&gt;HeroDetailService&lt;/code&gt; 被刺探服务方法调用。因此，存根将其方法实现为间谍：</target>
        </trans-unit>
        <trans-unit id="0eb0173de0887207bb65b45ebe9f9fe125988a13" translate="yes" xml:space="preserve">
          <source>The relative path or absolute URL of a template file for an Angular component. If provided, do not supply an inline template using &lt;code&gt;template&lt;/code&gt;.</source>
          <target state="translated">Angular组件的模板文件的相对路径或绝对URL。如果提供，请勿使用 &lt;code&gt;template&lt;/code&gt; 提供内联模板。</target>
        </trans-unit>
        <trans-unit id="b2a5f769df13524fc33173a60f95e5ebec2a8cc9" translate="yes" xml:space="preserve">
          <source>The relevant &lt;em&gt;Crisis Center&lt;/em&gt; code for this milestone follows.</source>
          <target state="translated">此里程碑的相关&lt;em&gt;危机中心&lt;/em&gt;代码如下。</target>
        </trans-unit>
        <trans-unit id="c6d8f146635ec792e8f8c55e052740e83174a7d4" translate="yes" xml:space="preserve">
          <source>The relevant Crisis Center code for this milestone follows.</source>
          <target state="translated">该里程碑的相关危机中心代码如下:</target>
        </trans-unit>
        <trans-unit id="0d0deacb390033b07f881710f00f8c4672d1dd5d" translate="yes" xml:space="preserve">
          <source>The relevant part of the URL follows the &lt;code&gt;...&lt;/code&gt;:</source>
          <target state="translated">URL的相关部分在 &lt;code&gt;...&lt;/code&gt; 之后：</target>
        </trans-unit>
        <trans-unit id="fde1ac3dfd43433ca4e661ed9e84a40407308eaf" translate="yes" xml:space="preserve">
          <source>The remainder of this page discusses selected exercises in further detail.</source>
          <target state="translated">本页其余部分将进一步详细讨论部分练习。</target>
        </trans-unit>
        <trans-unit id="c8e8b3d7ca0d64b17a2fb3f293951af67e52afb0" translate="yes" xml:space="preserve">
          <source>The remaining tests confirm the logic of the component when the service returns different values. The second test validates the effect of changing the user name. The third test checks that the component displays the proper message when there is no logged-in user.</source>
          <target state="translated">其余测试确认了服务返回不同值时组件的逻辑。第二个测试验证更改用户名的效果。第三个测试检查当没有登录的用户时,组件是否显示了正确的消息。</target>
        </trans-unit>
        <trans-unit id="d7142c777489862d6522489ad8690b6cad01d02e" translate="yes" xml:space="preserve">
          <source>The repeater matcher relies on AngularJS &lt;code&gt;ng-repeat&lt;/code&gt;</source>
          <target state="translated">转发器匹配器依赖于AngularJS &lt;code&gt;ng-repeat&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91ad245b7614259a383728070796f36b7c6a8e1a" translate="yes" xml:space="preserve">
          <source>The request body</source>
          <target state="translated">请求机构</target>
        </trans-unit>
        <trans-unit id="8baeab2869311562a541f4781282737e0d643863" translate="yes" xml:space="preserve">
          <source>The request body, or &lt;code&gt;null&lt;/code&gt; if one isn't set.</source>
          <target state="translated">请求正文；如果未设置，则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6f77845fbe311e08dbeaef52a6fd2daf4e328ed" translate="yes" xml:space="preserve">
          <source>The request object.</source>
          <target state="translated">请求对象。</target>
        </trans-unit>
        <trans-unit id="295297cd89c4bbc0045b1baf52143c439e6a5d78" translate="yes" xml:space="preserve">
          <source>The request was sent out over the wire.</source>
          <target state="translated">请求是通过电报发出的。</target>
        </trans-unit>
        <trans-unit id="cc47fc94ef80a1928c330c84f157fee95dfbc73f" translate="yes" xml:space="preserve">
          <source>The requests keep forwarding up until Angular finds an injector that can handle the request or runs out of ancestor &lt;code&gt;ElementInjector&lt;/code&gt;s.</source>
          <target state="translated">这些请求一直向前转发，直到Angular找到可以处理该请求的注入器或用完祖先 &lt;code&gt;ElementInjector&lt;/code&gt; 为止。</target>
        </trans-unit>
        <trans-unit id="4bca2438c6c78d7f3598583261e82a87e4585f19" translate="yes" xml:space="preserve">
          <source>The required character width.</source>
          <target state="translated">所需的字符宽度。</target>
        </trans-unit>
        <trans-unit id="e78685155e9f5bf3ed47c8190c17fafaf81b4db7" translate="yes" xml:space="preserve">
          <source>The required grammatical form.</source>
          <target state="translated">要求的语法形式。</target>
        </trans-unit>
        <trans-unit id="66a6422279a07572ce1f83994a45c30611298f7f" translate="yes" xml:space="preserve">
          <source>The resolver that can retrieve the component factories declared in the &lt;code&gt;entryComponents&lt;/code&gt; property of the module.</source>
          <target state="translated">可以检索在模块的 &lt;code&gt;entryComponents&lt;/code&gt; 属性中声明的组件工厂的解析器。</target>
        </trans-unit>
        <trans-unit id="6a56567a9d466e6d132c390ae6771774b8bf936d" translate="yes" xml:space="preserve">
          <source>The resource URL.</source>
          <target state="translated">资源URL。</target>
        </trans-unit>
        <trans-unit id="2806bdfe81615de27dd71c7273cdcf5fec886325" translate="yes" xml:space="preserve">
          <source>The resources to add/update.</source>
          <target state="translated">增加/更新的资源。</target>
        </trans-unit>
        <trans-unit id="722bde3a779c6b7c44b072db8c9bef73a7dcee92" translate="yes" xml:space="preserve">
          <source>The resources to edit.</source>
          <target state="translated">要编辑的资源。</target>
        </trans-unit>
        <trans-unit id="b3b51cad36d2295674a88b5feb5f325a8dd9c5d1" translate="yes" xml:space="preserve">
          <source>The response body doesn't return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</source>
          <target state="translated">响应体并不会返回您可能需要的所有数据。有时服务器会返回特殊的头信息或状态码,以指示某些对应用工作流很重要的条件。</target>
        </trans-unit>
        <trans-unit id="9b93e53ea5820a1f628a4de1e5b36ddaf81f432c" translate="yes" xml:space="preserve">
          <source>The response body, or &lt;code&gt;null&lt;/code&gt; if one was not returned.</source>
          <target state="translated">响应主体；如果未返回，则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99668b05017e2aa5e864a17012f39fce4777e24e" translate="yes" xml:space="preserve">
          <source>The response status code and headers were received.</source>
          <target state="translated">收到了响应状态码和标题。</target>
        </trans-unit>
        <trans-unit id="31138b87e6e07d760fa91a8f35bc7d6cef938655" translate="yes" xml:space="preserve">
          <source>The rest are stubs.</source>
          <target state="translated">其余的都是存根。</target>
        </trans-unit>
        <trans-unit id="527a427539693b3f88205ed83bab6a41153d480e" translate="yes" xml:space="preserve">
          <source>The rest of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, including its class attribute, moved inside the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 的其余部分（包括其class属性）在 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素内移动。</target>
        </trans-unit>
        <trans-unit id="c743d737d76a8c6fba14ac64a1884a8a176429a0" translate="yes" xml:space="preserve">
          <source>The rest of the articles in this section specifically address the Angular implementation of service workers.</source>
          <target state="translated">本节的其他文章专门讨论Angular对服务人员的实现。</target>
        </trans-unit>
        <trans-unit id="62158bbbf1c618865ea1d81d423f963b4dce87ef" translate="yes" xml:space="preserve">
          <source>The rest of the file is boilerplate setup code anticipating more advanced tests that &lt;em&gt;might&lt;/em&gt; become necessary if the component evolves into something substantial.</source>
          <target state="translated">该文件的其余部分是样板设置代码，用于预期如果组件演变为实质性组件时&lt;em&gt;可能&lt;/em&gt;需要进行的更高级的测试。</target>
        </trans-unit>
        <trans-unit id="72f013f648fdb7d77ec051dfbd8e0aae42973747" translate="yes" xml:space="preserve">
          <source>The rest of the scenario code relies on other Angular features and techniques that you can learn about elsewhere in the documentation. You can review it and download it from the live example.</source>
          <target state="translated">其余的场景代码依赖于其他的Angular特性和技术,你可以在文档的其他地方学习。你可以回顾它并从现场示例中下载它。</target>
        </trans-unit>
        <trans-unit id="9db844629762b7e377da3fb6860ee3d92e73f3e4" translate="yes" xml:space="preserve">
          <source>The result is shown below, with the hero's telephone number from &lt;code&gt;HeroContactComponent&lt;/code&gt; projected above the hero description.</source>
          <target state="translated">结果如下所示，来自 &lt;code&gt;HeroContactComponent&lt;/code&gt; 的英雄电话号码投射在英雄描述上方。</target>
        </trans-unit>
        <trans-unit id="cf49885d2cf1bce6d0595e7a953482bda25b0935" translate="yes" xml:space="preserve">
          <source>The result of an expression might require some transformation before you're ready to use it in a binding. For example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.</source>
          <target state="translated">一个表达式的结果可能需要进行一些转换,然后才能在绑定中使用。例如,您可能会将一个数字显示为货币,将文本改为大写,或过滤一个列表并对其进行排序。</target>
        </trans-unit>
        <trans-unit id="70660d474935bb5c58cc521f6669d3b23f3ad648" translate="yes" xml:space="preserve">
          <source>The result of the expression is passed to the pipe's &lt;code&gt;transform()&lt;/code&gt; method.</source>
          <target state="translated">表达式的结果传递到管道的 &lt;code&gt;transform()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="bf135bfcdaf4cfe03aad3aa70f5998ea60da6489" translate="yes" xml:space="preserve">
          <source>The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.</source>
          <target state="translated">当输入被突变时,这个管道的结果不会被重新评估。为了避免在每个变化检测周期都需要重新格式化日期,将日期视为一个不可变的对象,并在管道需要再次运行时更改引用。</target>
        </trans-unit>
        <trans-unit id="d97171b33cc95fa04a1a197b4ffa2b5984f4d336" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; class is as follows:</source>
          <target state="translated">生成的 &lt;code&gt;CartComponent&lt;/code&gt; 类如下：</target>
        </trans-unit>
        <trans-unit id="826ce97508a4661aa985a17e8919e5c33ad0cebf" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; class should look like this:</source>
          <target state="translated">生成的 &lt;code&gt;CartComponent&lt;/code&gt; 类应如下所示：</target>
        </trans-unit>
        <trans-unit id="24a207b68d80e19aed8ce6e6e9b80997323c25b0" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; template is as follows:</source>
          <target state="translated">生成的 &lt;code&gt;CartComponent&lt;/code&gt; 模板如下：</target>
        </trans-unit>
        <trans-unit id="a571031ddb791d5885d8b255dffe7c11b80344d0" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">生成的 &lt;code&gt;CartComponent&lt;/code&gt; 模板应如下所示：</target>
        </trans-unit>
        <trans-unit id="abe704b8eceeacf1b67a89d121ecca1aade1a14f" translate="yes" xml:space="preserve">
          <source>The resulting configuration does not wire up AngularJS digests to Zone hooks. It is the responsibility of the test writer to call &lt;code&gt;$rootScope.$apply&lt;/code&gt;, as necessary, to trigger AngularJS handlers of async events from Angular.</source>
          <target state="translated">结果配置不会将AngularJS摘要连接到Zone挂钩。测试编写者有责任在必要时调用 &lt;code&gt;$rootScope.$apply&lt;/code&gt; 来触发Angular中异步事件的AngularJS处理程序。</target>
        </trans-unit>
        <trans-unit id="bcbab465692903fa7cd8359d43327dd68fd697f4" translate="yes" xml:space="preserve">
          <source>The resulting crisis center is a foundation for introducing a new concept&amp;mdash;&lt;strong&gt;child routing&lt;/strong&gt;. You can leave &lt;em&gt;Heroes&lt;/em&gt; in its current state as a contrast with the &lt;em&gt;Crisis Center&lt;/em&gt; and decide later if the differences are worthwhile.</source>
          <target state="translated">由此产生的危机中心是引入新概念（&lt;strong&gt;子路由）的基础&lt;/strong&gt;。您可以将&lt;em&gt;Heroes&lt;/em&gt;保留在当前状态，以与&lt;em&gt;Crisis Center&lt;/em&gt;进行对比，然后再决定是否值得这样做。</target>
        </trans-unit>
        <trans-unit id="60c61e192f37012d32b9480674b367cba80cbbd6" translate="yes" xml:space="preserve">
          <source>The resulting crisis center is a foundation for introducing a new concept&amp;mdash;child routing. You can leave Heroes in its current state as a contrast with the Crisis Center.</source>
          <target state="translated">由此产生的危机中心是引入新概念（子路由）的基础。您可以将英雄保持在当前状态，以与危机中心形成对比。</target>
        </trans-unit>
        <trans-unit id="de4d48c6b6c99ee6545e5af2a4c9556b34785c31" translate="yes" xml:space="preserve">
          <source>The resulting path is &lt;code&gt;/crisis-center/1&lt;/code&gt;.</source>
          <target state="translated">结果路径为 &lt;code&gt;/crisis-center/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3119670930697faa92fa40415fd5310703990877" translate="yes" xml:space="preserve">
          <source>The reusable animation to start.</source>
          <target state="translated">可重复使用的动画开始。</target>
        </trans-unit>
        <trans-unit id="472e6e96b50dda645bba8c0360d28b358fbda1d8" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;CachingInterceptor&lt;/code&gt; sets up a server request whether there's a cached value or not, using the same &lt;code&gt;sendRequest()&lt;/code&gt; method described &lt;a href=&quot;http#send-request&quot;&gt;above&lt;/a&gt;. The &lt;code&gt;results$&lt;/code&gt; observable makes the request when subscribed.</source>
          <target state="translated">订正 &lt;code&gt;CachingInterceptor&lt;/code&gt; 设置一个服务器请求是否有一个高速缓存值或没有，使用相同的 &lt;code&gt;sendRequest()&lt;/code&gt; 描述的方法的&lt;a href=&quot;http#send-request&quot;&gt;上面&lt;/a&gt;。订阅后，可观察到的 &lt;code&gt;results$&lt;/code&gt; 会发出请求。</target>
        </trans-unit>
        <trans-unit id="c31f00e06ff51792a57ab30c7e7548ddc8902084" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;CachingInterceptor&lt;/code&gt; sets up a server request whether there's a cached value or not, using the same &lt;code&gt;sendRequest()&lt;/code&gt; method described &lt;a href=&quot;http#send-request&quot;&gt;above&lt;/a&gt;. The &lt;code&gt;results$&lt;/code&gt; observable will make the request when subscribed.</source>
          <target state="translated">订正 &lt;code&gt;CachingInterceptor&lt;/code&gt; 设置一个服务器请求是否有一个高速缓存值或没有，使用相同的 &lt;code&gt;sendRequest()&lt;/code&gt; 描述的方法的&lt;a href=&quot;http#send-request&quot;&gt;上面&lt;/a&gt;。可观察的 &lt;code&gt;results$&lt;/code&gt; 将在订阅后发出请求。</target>
        </trans-unit>
        <trans-unit id="be95ae4bd6dde666442aa0c4fe5f5b09117ba06c" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; class file should look like this:</source>
          <target state="translated">修改后的 &lt;code&gt;HeroesComponent&lt;/code&gt; 类文件应如下所示：</target>
        </trans-unit>
        <trans-unit id="8f5283cba25861d79d0e19a7a740a98060be3788" translate="yes" xml:space="preserve">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">修改后的 &lt;code&gt;HeroesComponent&lt;/code&gt; 模板应如下所示：</target>
        </trans-unit>
        <trans-unit id="168dcf13af40558015f7fe59904918a61ab032a2" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppComponent&lt;/code&gt; is the application shell. It has a title, a navigation bar with two links, and a router outlet where the router renders components.</source>
          <target state="translated">根 &lt;code&gt;AppComponent&lt;/code&gt; 是应用程序外壳。它具有标题，带有两个链接的导航栏以及路由器用来渲染组件的路由器插座。</target>
        </trans-unit>
        <trans-unit id="63cda66359a819e7cbb619142c9b706aff15c48f" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppComponent&lt;/code&gt; is the application shell. It has a title, a navigation bar with two links, and a router outlet where the router swaps components on and off the page. Here's what you get:</source>
          <target state="translated">根 &lt;code&gt;AppComponent&lt;/code&gt; 是应用程序外壳程序。它有一个标题，一个带有两个链接的导航栏，以及一个路由器插座，路由器在该插座上交换页面上和页面外的组件。这是您得到的：</target>
        </trans-unit>
        <trans-unit id="0f0329ffe5ecceeb131961f70f4acb552bdcbfe8" translate="yes" xml:space="preserve">
          <source>The root &lt;code&gt;AppModule&lt;/code&gt; is the only module that should import service modules.</source>
          <target state="translated">根 &lt;code&gt;AppModule&lt;/code&gt; 是唯一应导入服务模块的模块。</target>
        </trans-unit>
        <trans-unit id="7f5301de53c9b02b6a4c13d8a8f9976bf232fc20" translate="yes" xml:space="preserve">
          <source>The root NgModule &lt;code&gt;AppModule&lt;/code&gt; generated by the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; for a new app project demonstrates how you use both kinds of modules:</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;为新的应用程序项目生成的根NgModule &lt;code&gt;AppModule&lt;/code&gt; 演示了如何使用两种模块：</target>
        </trans-unit>
        <trans-unit id="2d4dc216979dbff965fe6fdd06ceb74df6763d41" translate="yes" xml:space="preserve">
          <source>The root NgModule starts with &lt;code&gt;import&lt;/code&gt; statements to import JavaScript modules. It then configures the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; with the following arrays:</source>
          <target state="translated">根NgModule以 &lt;code&gt;import&lt;/code&gt; 语句开头，以导入JavaScript模块。然后，它使用以下数组配置 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="92c90ae30fd5c691212cf46563dac3961bb08cdc" translate="yes" xml:space="preserve">
          <source>The root application module, &lt;code&gt;AppModule&lt;/code&gt;, of almost every browser application should import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">几乎每个浏览器应用程序的根应用程序模块 &lt;code&gt;AppModule&lt;/code&gt; 都应从 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 导入 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bbda7caf7baa01267a84d3e9deab3bbca8a3fdbd" translate="yes" xml:space="preserve">
          <source>The root directory of the app.</source>
          <target state="translated">应用的根目录。</target>
        </trans-unit>
        <trans-unit id="6a64de3e02b9fca633213b81541751cd41ab0a11" translate="yes" xml:space="preserve">
          <source>The root element to search from</source>
          <target state="translated">要搜索的根元素</target>
        </trans-unit>
        <trans-unit id="671d824111bab81ec8318377b2e219bfaa96820d" translate="yes" xml:space="preserve">
          <source>The root folder for this project's files, relative to the workspace folder. Empty for the initial app, which resides at the top level of the workspace.</source>
          <target state="translated">相对于工作区文件夹,这个项目文件的根文件夹。对于初始应用来说是空的,它位于工作区的顶层。</target>
        </trans-unit>
        <trans-unit id="54dbf3939551d85e7abddf427d6a6ad0d92df9b4" translate="yes" xml:space="preserve">
          <source>The root folder for this project's source files.</source>
          <target state="translated">本项目源文件的根文件夹。</target>
        </trans-unit>
        <trans-unit id="b1ec0372f1cddf50e90c0a7dde345a963fecb42f" translate="yes" xml:space="preserve">
          <source>The root module is all you need in a simple application with a few components. As the app grows, you refactor the root module into &lt;a href=&quot;feature-modules&quot;&gt;feature modules&lt;/a&gt; that represent collections of related functionality. You then import these modules into the root module.</source>
          <target state="translated">在具有几个组件的简单应用程序中，只需使用根模块。随着应用程序的增长，您可以将根模块重构为代表相关功能集合的&lt;a href=&quot;feature-modules&quot;&gt;功能模块&lt;/a&gt;。然后，将这些模块导入到根模块中。</target>
        </trans-unit>
        <trans-unit id="da27980955945e04ad4a054ed93c8229a2cdc100" translate="yes" xml:space="preserve">
          <source>The root nodes for this embedded view.</source>
          <target state="translated">该嵌入式视图的根节点。</target>
        </trans-unit>
        <trans-unit id="3397f990a2e5dcb255a1ff4ae7da260d1d6f2244" translate="yes" xml:space="preserve">
          <source>The root of the problem is at least one of the components involved in the test specifies an external template or CSS file as the following version of the &lt;code&gt;BannerComponent&lt;/code&gt; does.</source>
          <target state="translated">问题的根源是测试中涉及的至少一个组件指定了一个外部模板或CSS文件，如以下版本的 &lt;code&gt;BannerComponent&lt;/code&gt; 一样。</target>
        </trans-unit>
        <trans-unit id="43d23a95dcd95d02fff170aa27124ad27dadf776" translate="yes" xml:space="preserve">
          <source>The root of the router state</source>
          <target state="translated">路由器状态的根源</target>
        </trans-unit>
        <trans-unit id="4972cd8af27405ae6af97b76c474d6f24b212689" translate="yes" xml:space="preserve">
          <source>The root of the router state.</source>
          <target state="translated">路由器状态的根。</target>
        </trans-unit>
        <trans-unit id="2877c97510f1f533a0813b5a4c64f21f27b1ea42" translate="yes" xml:space="preserve">
          <source>The root segment group of the URL tree</source>
          <target state="translated">URL树的根段组</target>
        </trans-unit>
        <trans-unit id="242d314a6c2586f09781ee20f1069bf96dfafb5a" translate="yes" xml:space="preserve">
          <source>The route &lt;code&gt;/crisis-center&lt;/code&gt; opens the &lt;code&gt;crisis-center&lt;/code&gt; component.</source>
          <target state="translated">路线 &lt;code&gt;/crisis-center&lt;/code&gt; 打开 &lt;code&gt;crisis-center&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="c67a049394357ddbd5756805abca85b9c82dad23" translate="yes" xml:space="preserve">
          <source>The route &lt;code&gt;/heroes-list&lt;/code&gt; opens the &lt;code&gt;heroes-list&lt;/code&gt; component.</source>
          <target state="translated">路线 &lt;code&gt;/heroes-list&lt;/code&gt; 打开 &lt;code&gt;heroes-list&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="3c8a01ed9794c16c0a0e02ced63c7a78d14e47e4" translate="yes" xml:space="preserve">
          <source>The route array for the new configuration.</source>
          <target state="translated">新配置的路径数组。</target>
        </trans-unit>
        <trans-unit id="bef3a96e68be9a7e3e4e120593f324d30c516bbd" translate="yes" xml:space="preserve">
          <source>The route configuration to provide.</source>
          <target state="translated">要提供的途径配置。</target>
        </trans-unit>
        <trans-unit id="c73d7a5fdb6e04fbea56a19afdcaf95a1328d979" translate="yes" xml:space="preserve">
          <source>The route configuration used for the route that contains the origin path.</source>
          <target state="translated">含有起始路径的途径所使用的途径配置。</target>
        </trans-unit>
        <trans-unit id="4e196abefd449c7a38cdaa9e24641456ced4d25e" translate="yes" xml:space="preserve">
          <source>The route parameters correspond to the path variables defined in the route. The &lt;code&gt;productId&lt;/code&gt; is provided from the URL that was matched to the route. You use the &lt;code&gt;productId&lt;/code&gt; to display the details for each unique product.</source>
          <target state="translated">路径参数对应于路径中定义的路径变量。该 &lt;code&gt;productId&lt;/code&gt; 参数是从被匹配到路由的URL提供。您使用 &lt;code&gt;productId&lt;/code&gt; 来显示每个唯一产品的详细信息。</target>
        </trans-unit>
        <trans-unit id="595f51af1731c8de65319d83dd1fb2e31ca5e6e4" translate="yes" xml:space="preserve">
          <source>The route parameters correspond to the path variables you define in the route. The URL that matches the route provides the &lt;code&gt;productId&lt;/code&gt;. Angular uses the &lt;code&gt;productId&lt;/code&gt; to display the details for each unique product.</source>
          <target state="translated">路径参数与您在路径中定义的路径变量相对应。与路线匹配的URL提供 &lt;code&gt;productId&lt;/code&gt; 。Angular使用 &lt;code&gt;productId&lt;/code&gt; 来显示每个唯一产品的详细信息。</target>
        </trans-unit>
        <trans-unit id="66d3701516f8bcdfaf06a82d17fcdba4c47e9b5a" translate="yes" xml:space="preserve">
          <source>The route path and parameters are available through an injected router service called the &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;. It has a great deal of useful information including:</source>
          <target state="translated">路由路径和参数可通过注入的路由器服务（称为&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute）获得&lt;/a&gt;。它具有大量有用的信息，包括：</target>
        </trans-unit>
        <trans-unit id="d1f012c5745d0ca7adf488982b001bebc88d2038" translate="yes" xml:space="preserve">
          <source>The route path for a lazy-loaded module. When supplied, creates a component in the new module, and adds the route to that component in the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array declared in the module provided in the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">延迟加载的模块的路由路径。提供时，在新模块中创建一个组件，并将路由添加到 &lt;code&gt;--module&lt;/code&gt; 选项提供的模块中声明的 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 数组中的该组件。</target>
        </trans-unit>
        <trans-unit id="f851c13eed7f013f3276fc1f09b0556e9f7b748d" translate="yes" xml:space="preserve">
          <source>The route to consider.</source>
          <target state="translated">要考虑的路线。</target>
        </trans-unit>
        <trans-unit id="e5fc4b54a42e423066458d8e19e63d73e48616e9" translate="yes" xml:space="preserve">
          <source>The route's parent &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; when this route is a &lt;a href=&quot;router#child-routing-component&quot;&gt;child route&lt;/a&gt;.</source>
          <target state="translated">路由的父级 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; (当此路由为&lt;a href=&quot;router#child-routing-component&quot;&gt;子路由时）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20d1064839631812bc36de653a61eab94e893397" translate="yes" xml:space="preserve">
          <source>The route's parent &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; when this route is a &lt;a href=&quot;router-tutorial-toh#child-routing-component&quot;&gt;child route&lt;/a&gt;.</source>
          <target state="translated">路由的父级 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; (当此路由为&lt;a href=&quot;router-tutorial-toh#child-routing-component&quot;&gt;子路由时）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7d93e27b6f01a3844669a04c09c59a34752da5a4" translate="yes" xml:space="preserve">
          <source>The router &lt;code&gt;navigate()&lt;/code&gt; method takes the same one-item &lt;em&gt;link parameters array&lt;/em&gt; that you can bind to a &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; directive. It holds the path to the &lt;code&gt;HeroListComponent&lt;/code&gt;:</source>
          <target state="translated">router &lt;code&gt;navigate()&lt;/code&gt; 方法采用相同的单项&lt;em&gt;链接参数数组&lt;/em&gt;，您可以将其绑定到 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; 指令。它保存了 &lt;code&gt;HeroListComponent&lt;/code&gt; 的路径：</target>
        </trans-unit>
        <trans-unit id="ff45d5a87a74679f399b1959935f568d12a35bbf" translate="yes" xml:space="preserve">
          <source>The router &lt;code&gt;navigate&lt;/code&gt; method takes the same one-item &lt;em&gt;link parameters array&lt;/em&gt; that you can bind to a &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; directive. It holds the &lt;em&gt;path to the &lt;code&gt;HeroListComponent&lt;/code&gt;&lt;/em&gt;:</source>
          <target state="translated">路由器 &lt;code&gt;navigate&lt;/code&gt; 方法采用可以绑定到 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; &lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt; ]指令的相同的单项&lt;em&gt;链接参数数组&lt;/em&gt;。它保存&lt;em&gt;了&lt;/em&gt;&lt;em&gt; &lt;code&gt;HeroListComponent&lt;/code&gt; &lt;/em&gt;的&lt;em&gt;路径&lt;/em&gt;：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e6adcc63174d5c2a81f7c61ec96d14f7c1aa0c0c" translate="yes" xml:space="preserve">
          <source>The router adds the lazy module's providers and the providers of its imported NgModules to this child injector.</source>
          <target state="translated">路由器将懒惰模块的提供者和其导入的NgModules的提供者添加到这个子注入器中。</target>
        </trans-unit>
        <trans-unit id="464e7a2dded2eb7cef76bc15857f7a52ef5cb36b" translate="yes" xml:space="preserve">
          <source>The router assumed that your route specification targeted the &lt;em&gt;unnamed&lt;/em&gt; primary outlet and created these objects for you.</source>
          <target state="translated">路由器假定您的路由规范以&lt;em&gt;未命名的&lt;/em&gt;主要插座为目标，并为您创建了这些对象。</target>
        </trans-unit>
        <trans-unit id="e7af2a8eb9140969e3964052e77e8f3909253e1f" translate="yes" xml:space="preserve">
          <source>The router assumed that your route specification targeted the unnamed primary outlet and created these objects for you.</source>
          <target state="translated">路由器假设你的路由规范针对的是未命名的主出口,并为你创建了这些对象。</target>
        </trans-unit>
        <trans-unit id="7aa34b1ee03c56dc6ef8b31a485775f2ad59c9bb" translate="yes" xml:space="preserve">
          <source>The router calls the &lt;code&gt;preload()&lt;/code&gt; method with two arguments:</source>
          <target state="translated">路由器使用两个参数调用 &lt;code&gt;preload()&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="86314416e2f5eb8bbfe8d314a88dba892d7a1414" translate="yes" xml:space="preserve">
          <source>The router calls the &lt;code&gt;preload&lt;/code&gt; method with two arguments:</source>
          <target state="translated">路由器使用两个参数调用 &lt;code&gt;preload&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="1021602580631729060d4ea9a3955538ce37e03f" translate="yes" xml:space="preserve">
          <source>The router calls the resolver in any case where the the user could navigate away so you don't have to code for each use case.</source>
          <target state="translated">路由器在用户可以导航离开的任何情况下都会调用解析器,所以你不必为每个用例编码。</target>
        </trans-unit>
        <trans-unit id="0b7b212269847557351f8b5a3f629304f4a10730" translate="yes" xml:space="preserve">
          <source>The router composes the destination URL from the array like this: &lt;code&gt;localhost:4200/hero/15&lt;/code&gt;.</source>
          <target state="translated">路由器从数组中组成目标URL，如下所示： &lt;code&gt;localhost:4200/hero/15&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e64c73914c5847d2de53b2cd6e0ad0774bfb328" translate="yes" xml:space="preserve">
          <source>The router defines navigation among views on a single page, as opposed to navigation among pages. It interprets URL-like links to determine which views to create or destroy, and which components to load or unload. It allows you to take advantage of &lt;a href=&quot;glossary#lazy-load&quot;&gt;lazy loading&lt;/a&gt; in your Angular apps.</source>
          <target state="translated">路由器在单个页面上的视图之间定义导航，而不是页面之间的导航。它解释类URL的链接，以确定要创建或销毁哪些视图，以及要加载或卸载哪些组件。它允许您利用Angular应用程序中的&lt;a href=&quot;glossary#lazy-load&quot;&gt;延迟加载&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c17670c71f8c023ad90633a12d89c42440504772" translate="yes" xml:space="preserve">
          <source>The router displays the components of these routes in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;CrisisCenterComponent&lt;/code&gt;, not in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">路由器在 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;CrisisCenterComponent&lt;/code&gt; 显示这些路由的组件，而不在 &lt;code&gt;AppComponent&lt;/code&gt; Shell 的 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 中显示。</target>
        </trans-unit>
        <trans-unit id="5c928e0d20717c8c5f4b3a4efd2288875d0f9b06" translate="yes" xml:space="preserve">
          <source>The router draws upon its registry of definitions when the browser URL changes or when application code tells the router to navigate along a route path.</source>
          <target state="translated">当浏览器URL发生变化时,或者当应用程序代码告诉路由器沿着路由路径导航时,路由器就会利用它的定义注册表。</target>
        </trans-unit>
        <trans-unit id="71c39ba8cef1c1fda2c9bf53a95cec225bee482f" translate="yes" xml:space="preserve">
          <source>The router either never preloads, or preloads every lazy loaded module. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; also supports &lt;a href=&quot;router-tutorial-toh#custom-preloading&quot;&gt;custom preloading strategies&lt;/a&gt; for fine control over which modules to preload and when.</source>
          <target state="translated">路由器从不预加载或预加载每个延迟加载的模块。该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 还支持&lt;a href=&quot;router-tutorial-toh#custom-preloading&quot;&gt;自定义的预加载的策略&lt;/a&gt;进行精细控制哪些模块预紧和时间。</target>
        </trans-unit>
        <trans-unit id="a093fc77d863ec9bd9a835484c18df4bd2839243" translate="yes" xml:space="preserve">
          <source>The router embedded the &lt;code&gt;id&lt;/code&gt; value in the navigation URL because you had defined it as a route parameter with an &lt;code&gt;:id&lt;/code&gt; placeholder token in the route &lt;code&gt;path&lt;/code&gt;:</source>
          <target state="translated">该路由器内置的 &lt;code&gt;id&lt;/code&gt; 值的导航网址，因为你已经用它定义为一个路由参数 &lt;code&gt;:id&lt;/code&gt; 在路由令牌占位符 &lt;code&gt;path&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0703ea253b9b207877f837c0ebf348dabd5b539b" translate="yes" xml:space="preserve">
          <source>The router extracts the route parameter (&lt;code&gt;id:15&lt;/code&gt;) from the URL and supplies it to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; via the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">路由器从URL中提取路由参数（ &lt;code&gt;id:15&lt;/code&gt; ），并通过 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 服务将其提供给 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36f288f65a85dc5f52b243320808ca5d7d00fb50" translate="yes" xml:space="preserve">
          <source>The router interprets a link URL according to your app's view navigation rules and data state. You can navigate to new views when the user clicks a button or selects from a drop box, or in response to some other stimulus from any source. The router logs activity in the browser's history, so the back and forward buttons work as well.</source>
          <target state="translated">路由器根据您的应用程序的视图导航规则和数据状态来解释链接URL。当用户点击按钮或从下拉框中选择时,或响应任何来源的其他刺激时,你可以导航到新的视图。路由器将活动记录在浏览器的历史记录中,因此后退和前进按钮也能正常工作。</target>
        </trans-unit>
        <trans-unit id="40f94c674310a595511f95be3e481296d4f01b3b" translate="yes" xml:space="preserve">
          <source>The router is keeping track of two separate branches in a navigation tree and generating a representation of that tree in the URL.</source>
          <target state="translated">路由器正在跟踪导航树中的两个独立分支,并在URL中生成该树的表示。</target>
        </trans-unit>
        <trans-unit id="66882268b7107bf893e0fd15fa3db80248536e98" translate="yes" xml:space="preserve">
          <source>The router keeps track of separate branches in a navigation tree for each named outlet and generates a representation of that tree in the URL. The URL for a secondary route uses the following syntax to specify both the primary and secondary routes at the same time:</source>
          <target state="translated">路由器为每个命名的出口分别跟踪导航树中的分支,并在URL中生成该树的表示。辅助途径的URL使用以下语法同时指定主途径和辅助途径。</target>
        </trans-unit>
        <trans-unit id="3a054f785d39ee8f97217df707c9c5b56c07bd19" translate="yes" xml:space="preserve">
          <source>The router lets you display full product details in separate &lt;a href=&quot;../guide/glossary#view&quot;&gt;views&lt;/a&gt;, each with its own URL. Routing enables navigation from one view to the next (within the same page) as users perform tasks such as the following:</source>
          <target state="translated">路由器使您可以在单独的&lt;a href=&quot;../guide/glossary#view&quot;&gt;视图中&lt;/a&gt;显示完整的产品详细信息，每个视图都有其自己的URL。通过路由，用户可以执行以下任务，从而从一个视图导航到下一个视图（在同一页面内）：</target>
        </trans-unit>
        <trans-unit id="6f1fff5319d8f72c72ec0476e40e8b1da2d77ed9" translate="yes" xml:space="preserve">
          <source>The router link directive always treats the provided input as a delta to the current url.</source>
          <target state="translated">路由器链接指令总是将提供的输入视为当前url的delta。</target>
        </trans-unit>
        <trans-unit id="170614389397ec9d97f973262e58d5663453a227" translate="yes" xml:space="preserve">
          <source>The router maps URL-like paths to views instead of pages. When a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser's behavior, and shows or hides view hierarchies.</source>
          <target state="translated">路由器将类似URL的路径映射到视图而不是页面。当用户执行一个动作,如点击一个链接,会在浏览器中加载一个新的页面,路由器会拦截浏览器的行为,并显示或隐藏视图的层次结构。</target>
        </trans-unit>
        <trans-unit id="45c7188ec7a83f5f718d2d88747d152f1b97733f" translate="yes" xml:space="preserve">
          <source>The router matches such &lt;em&gt;absolute&lt;/em&gt; paths to routes starting from the top of the route configuration.</source>
          <target state="translated">路由器将此类&lt;em&gt;绝对&lt;/em&gt;路径与从路由配置的顶部开始的路由进行匹配。</target>
        </trans-unit>
        <trans-unit id="260b325d8fbd13b4d85a84d5257a3b927692e3d5" translate="yes" xml:space="preserve">
          <source>The router matches such absolute paths to routes starting from the top of the route configuration.</source>
          <target state="translated">路由器将这样的绝对路径匹配为从路由配置的顶端开始的路由。</target>
        </trans-unit>
        <trans-unit id="05d009d175fdb7f12138aac1b07043d6aa4d44ba" translate="yes" xml:space="preserve">
          <source>The router merges the parameters, data, and resolve of the componentless parent into the parameters, data, and resolve of the children.</source>
          <target state="translated">路由器将无组件父体的参数、数据和解析合并到子体的参数、数据和解析中。</target>
        </trans-unit>
        <trans-unit id="67b6bd438f9d975bb93513d155cfcc4f597fa576" translate="yes" xml:space="preserve">
          <source>The router module navigates among your app pages when the browser URL changes. For more information, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">当浏览器URL更改时，路由器模块将在您的应用程序页面之间导航。有关更多信息，请参见&lt;a href=&quot;router&quot;&gt;路由和导航&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be14d8494a5c5cba61dae579b492b85dc78e0eca" translate="yes" xml:space="preserve">
          <source>The router outlet serves as a placeholder when the routed components will be rendered below it.</source>
          <target state="translated">路由器出口作为一个占位符,当路由组件将被渲染到它的下方。</target>
        </trans-unit>
        <trans-unit id="205ac6f2823531bd65a03da2553248b34bba37ad" translate="yes" xml:space="preserve">
          <source>The router outlet serves as a placeholder where the routed components are rendered.</source>
          <target state="translated">路由器出口作为一个占位符,在这里渲染路由组件。</target>
        </trans-unit>
        <trans-unit id="9249dc1011c1c73ac0719c7ec4542ea400fe2bc1" translate="yes" xml:space="preserve">
          <source>The router selects the route with a &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;first match wins&lt;/em&gt;&lt;/a&gt; strategy. Because a wildcard route is the least specific route, place it last in the route configuration.</source>
          <target state="translated">路由器使用&lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;第一个匹配获胜&lt;/em&gt;&lt;/a&gt;策略选择路由。由于通配符路由是最不特定的路由，因此将其放在路由配置的最后。</target>
        </trans-unit>
        <trans-unit id="736e289b0385ec3ddda27eea926de4105245493a" translate="yes" xml:space="preserve">
          <source>The router selects the route with a &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;first match wins&lt;/em&gt;&lt;/a&gt; strategy. Wildcard routes are the least specific routes in the route configuration. Be sure it is the &lt;em&gt;last&lt;/em&gt; route in the configuration.</source>
          <target state="translated">路由器使用&lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;第一个比赛获胜&lt;/em&gt;&lt;/a&gt;策略选择路由。通配符路由是路由配置中最不明确的路由。确保这是配置中的&lt;em&gt;最后&lt;/em&gt;一条路由。</target>
        </trans-unit>
        <trans-unit id="e483aae32dfdd13e3ceb796d853bc5f1c51b3ffb" translate="yes" xml:space="preserve">
          <source>The router sets the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; method's &lt;code&gt;route&lt;/code&gt; parameter to the intended destination URL. The &lt;code&gt;checkLogin()&lt;/code&gt; method redirects to that URL once the user has logged in.</source>
          <target state="translated">路由器将 &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; 方法的 &lt;code&gt;route&lt;/code&gt; 参数设置为预期的目标URL。该 &lt;code&gt;checkLogin()&lt;/code&gt; 方法重定向到URL一旦用户登录。</target>
        </trans-unit>
        <trans-unit id="81f377b7ecef81dc2ac99914cdf382b4423ea9ab" translate="yes" xml:space="preserve">
          <source>The router sets the &lt;code&gt;canLoad()&lt;/code&gt; method's &lt;code&gt;route&lt;/code&gt; parameter to the intended destination URL. The &lt;code&gt;checkLogin()&lt;/code&gt; method redirects to that URL once the user has logged in.</source>
          <target state="translated">路由器将 &lt;code&gt;canLoad()&lt;/code&gt; 方法的 &lt;code&gt;route&lt;/code&gt; 参数设置为预期的目标URL。该 &lt;code&gt;checkLogin()&lt;/code&gt; 方法重定向到URL一旦用户登录。</target>
        </trans-unit>
        <trans-unit id="ed56f7656ac08b3e0ee8155fb0a3581dada87c03" translate="yes" xml:space="preserve">
          <source>The router supports both styles with two &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">路由器通过两个 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 提供程序支持两种样式：</target>
        </trans-unit>
        <trans-unit id="a62638a6e21e4759de70853b67830c5266f6a0ab" translate="yes" xml:space="preserve">
          <source>The router supports directory-like syntax in a &lt;em&gt;link parameters list&lt;/em&gt; to help guide route name lookup:</source>
          <target state="translated">路由器在&lt;em&gt;链接参数列表中&lt;/em&gt;支持类似目录的语法，以帮助指导路由名称查找：</target>
        </trans-unit>
        <trans-unit id="8bf5781b34bee9259b2e2f8cf4416f1697ff1181" translate="yes" xml:space="preserve">
          <source>The router supports multiple guard interfaces:</source>
          <target state="translated">路由器支持多个防护接口。</target>
        </trans-unit>
        <trans-unit id="c0bca771ad18c103f1c47fc1e5a1d2836da9bf81" translate="yes" xml:space="preserve">
          <source>The router supports navigation with optional parameters as well as required route parameters. Define &lt;em&gt;optional&lt;/em&gt; parameters in a separate object &lt;em&gt;after&lt;/em&gt; you define the required route parameters.</source>
          <target state="translated">路由器支持使用可选参数以及必需的路由参数进行导航。在定义所需的路由参数&lt;em&gt;之后，&lt;/em&gt;请在单独的对象中定义&lt;em&gt;可选&lt;/em&gt;参数。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ca0d340393e78553af88ef8e5ffc5378d31a126" translate="yes" xml:space="preserve">
          <source>The router supports navigation with optional parameters as well as required route parameters. Define optional parameters in a separate object &lt;em&gt;after&lt;/em&gt; you define the required route parameters.</source>
          <target state="translated">路由器支持使用可选参数以及必需的路由参数进行导航。定义所需的路由参数&lt;em&gt;后，&lt;/em&gt;请在单独的对象中定义可选参数。</target>
        </trans-unit>
        <trans-unit id="721de1b66d75f02ba2445c6313fdbe78c22b055a" translate="yes" xml:space="preserve">
          <source>The router uses the browser's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt; for navigation. &lt;code&gt;pushState&lt;/code&gt; allows you to customize in-app URL paths; for example, &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt;. The in-app URLs can be indistinguishable from server URLs.</source>
          <target state="translated">路由器使用浏览器的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt;进行导航。 &lt;code&gt;pushState&lt;/code&gt; 允许您自定义应用内URL路径；例如， &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt; 。应用内网址与服务器网址无法区分。</target>
        </trans-unit>
        <trans-unit id="b44e894ea1b945e0628e82828fbe796cf336ea56" translate="yes" xml:space="preserve">
          <source>The router uses the browser's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt; for navigation. Thanks to &lt;code&gt;pushState&lt;/code&gt;, you can make in-app URL paths look the way you want them to look, e.g. &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt;. The in-app URLs can be indistinguishable from server URLs.</source>
          <target state="translated">路由器使用浏览器的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt;进行导航。多亏了 &lt;code&gt;pushState&lt;/code&gt; ，您可以使应用内URL路径看起来像您想要的样子，例如 &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt; 。应用内网址与服务器网址无法区分。</target>
        </trans-unit>
        <trans-unit id="53d9befd3cd261f060f5decb29960135724d8489" translate="yes" xml:space="preserve">
          <source>The router works at the root level so if you put providers in a component, even &lt;code&gt;AppComponent&lt;/code&gt;, lazy loaded modules, which rely on the router, can&amp;rsquo;t see them.</source>
          <target state="translated">路由器在根级别运行，因此，如果将提供程序放在组件中，则即使依赖于路由器的延迟加载的模块 &lt;code&gt;AppComponent&lt;/code&gt; 也无法看到它们。</target>
        </trans-unit>
        <trans-unit id="0ba9dade3e3b9ffdda20ce10c97f537f8ff12442" translate="yes" xml:space="preserve">
          <source>The router's &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface is optional. The &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; doesn't inherit from a base class. The router looks for that method and calls it if found.</source>
          <target state="translated">路由器的 &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 接口是可选的。该 &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; 不从基类继承。路由器会寻找该方法并在找到后调用它。</target>
        </trans-unit>
        <trans-unit id="40bd61970480593d5a81861e4cee600f3fafc0bf" translate="yes" xml:space="preserve">
          <source>The routes are no longer in one file. They are distributed across two modules, &lt;code&gt;AppRoutingModule&lt;/code&gt; and &lt;code&gt;HeroesRoutingModule&lt;/code&gt;.</source>
          <target state="translated">路由不再在一个文件中。它们分布在两个模块 &lt;code&gt;AppRoutingModule&lt;/code&gt; 和 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="924c6afc19bb9b612a4c9d01a15918f63fca5da1" translate="yes" xml:space="preserve">
          <source>The routing module is helpful as your app grows and when the configuration includes specialized guard and resolver services.</source>
          <target state="translated">当您的应用程序增长以及配置包括专门的防护和解析器服务时,路由模块很有帮助。</target>
        </trans-unit>
        <trans-unit id="8fc7cb4d33cdf592cf3bc7e516d00d9c23978486" translate="yes" xml:space="preserve">
          <source>The routing module, often called the &lt;code&gt;AppRoutingModule&lt;/code&gt;, replaces the routing configuration in the root or feature module.</source>
          <target state="translated">路由模块（通常称为 &lt;code&gt;AppRoutingModule&lt;/code&gt; ）替换了根模块或功能模块中的路由配置。</target>
        </trans-unit>
        <trans-unit id="c8bfeafd59576a5466c5d56c7ed9d1a4b51bcaed" translate="yes" xml:space="preserve">
          <source>The running application displays three heroes:</source>
          <target state="translated">正在运行的应用程序显示三个英雄。</target>
        </trans-unit>
        <trans-unit id="d2037d2f70edf3081cd81efee594d118f23f5b88" translate="yes" xml:space="preserve">
          <source>The safe navigation operator ( &lt;code&gt;?&lt;/code&gt; ) and null property paths</source>
          <target state="translated">安全导航运算符（ &lt;code&gt;?&lt;/code&gt; ）和空属性路径</target>
        </trans-unit>
        <trans-unit id="e085db54661fcc65281a95cf0450e05e179ee59e" translate="yes" xml:space="preserve">
          <source>The safe navigation operator (&lt;code&gt;?&lt;/code&gt;) means that the &lt;code&gt;employer&lt;/code&gt; field is optional and if &lt;code&gt;undefined&lt;/code&gt;, the rest of the expression should be ignored.</source>
          <target state="translated">安全导航运算符（ &lt;code&gt;?&lt;/code&gt; ）表示&amp;ldquo; &lt;code&gt;employer&lt;/code&gt; 字段是可选的，如果 &lt;code&gt;undefined&lt;/code&gt; ，则应忽略表达式的其余部分。</target>
        </trans-unit>
        <trans-unit id="59c72d8464ed8d8df3745406023437ff7ed29782" translate="yes" xml:space="preserve">
          <source>The safest way to get the injected service, the way that &lt;strong&gt;&lt;em&gt;always works&lt;/em&gt;&lt;/strong&gt;, is to &lt;strong&gt;get it from the injector of the &lt;em&gt;component-under-test&lt;/em&gt;&lt;/strong&gt;. The component injector is a property of the fixture's &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">获得注入服务的最安全方法（&lt;strong&gt;&lt;em&gt;始终有效&lt;/em&gt;&lt;/strong&gt;）是&lt;strong&gt;从&lt;em&gt;被测组件&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;的注入器获得服务&lt;/strong&gt;。组件注入器是灯具的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 的属性。</target>
        </trans-unit>
        <trans-unit id="939660064b29633f3b868d36327576ca89ac09ec" translate="yes" xml:space="preserve">
          <source>The same built-in validators that are available as attributes in template-driven forms, such as &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, are all available to use as functions from the &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; class. For a full list of built-in validators, see the &lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; API reference.</source>
          <target state="translated">可以用作模板驱动形式的属性的相同内置验证器，例如 &lt;code&gt;required&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; ，都可以用作 &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; 类的函数。有关内置验证器的完整列表，请参见&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; API参考。</target>
        </trans-unit>
        <trans-unit id="067302b47e77195f2f26c14e3937a22efcc89d72" translate="yes" xml:space="preserve">
          <source>The same configuration options can also be provided through the CLI with your existing &lt;code&gt;production&lt;/code&gt; configuration.</source>
          <target state="translated">还可以通过CLI与您现有的 &lt;code&gt;production&lt;/code&gt; 配置一起提供相同的配置选项。</target>
        </trans-unit>
        <trans-unit id="37e5c8808646d445a2065fb32b692fb91593936b" translate="yes" xml:space="preserve">
          <source>The same service that performs your server transactions should also perform error inspection, interpretation, and resolution.</source>
          <target state="translated">执行服务器事务的同一服务也应该执行错误检查、解释和解决。</target>
        </trans-unit>
        <trans-unit id="88ea22179fb824484880c2c0d1c934b0fdd8761e" translate="yes" xml:space="preserve">
          <source>The same text elements with different &lt;em&gt;meanings&lt;/em&gt; are extracted with separate IDs. For example, if the word &quot;right&quot; appears with the meaning &lt;code&gt;correct&lt;/code&gt; (as in &quot;You are right&quot;) in one place, and with the meaning &lt;code&gt;direction&lt;/code&gt; (as in &quot;Turn right&quot;) in another place, the word is translated differently and merged back into the app as different translation entries.</source>
          <target state="translated">具有不同&lt;em&gt;含义&lt;/em&gt;的相同文本元素将使用单独的ID提取。例如，如果一个单词&amp;ldquo;正确&amp;rdquo;出现在一个位置，其含义 &lt;code&gt;correct&lt;/code&gt; （如&amp;ldquo;您是正确的&amp;rdquo;），而另一个位置出现意思 &lt;code&gt;direction&lt;/code&gt; （如&amp;ldquo;右转&amp;rdquo;），则该单词的翻译方式有所不同，合并回应用程序中作为不同的翻译条目。</target>
        </trans-unit>
        <trans-unit id="16cde22da225d9a04d00eca0b15817fbe6af3692" translate="yes" xml:space="preserve">
          <source>The sample app and its translation file are now as follows:</source>
          <target state="translated">现在的示例应用程序及其翻译文件如下。</target>
        </trans-unit>
        <trans-unit id="2018f14311878602d2320f5e56ba6ac75859ef04" translate="yes" xml:space="preserve">
          <source>The sample app does not require a data server. It relies on the &lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;, which replaces the &lt;em&gt;HttpClient&lt;/em&gt; module's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;. The replacement service simulates the behavior of a REST-like backend.</source>
          <target state="translated">该示例应用程序不需要数据服务器。它依赖于&lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;，它取代了&lt;em&gt;HttpClient&lt;/em&gt;模块的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 。替换服务模拟了类似REST的后端的行为。</target>
        </trans-unit>
        <trans-unit id="d9639d7d5642ac0cfa45c5189886107eb05e6058" translate="yes" xml:space="preserve">
          <source>The sample app for this guide doesn't have a server that accepts uploaded files. The &lt;code&gt;UploadInterceptor&lt;/code&gt; in &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; intercepts and short-circuits upload requests by returning an observable of simulated events.</source>
          <target state="translated">本指南的示例应用程序没有服务器可以接受上传的文件。该 &lt;code&gt;UploadInterceptor&lt;/code&gt; 在 &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; 截获并通过返回一个可观察的模拟事件的短路上传请求。</target>
        </trans-unit>
        <trans-unit id="18a8f2d6b2521db5c000b09605bd6653cdd054b3" translate="yes" xml:space="preserve">
          <source>The sample app for this guide includes a simplified version of the &quot;Tour of Heroes&quot; example that fetches heroes and enables users to add, delete, and update them.</source>
          <target state="translated">本指南的示例应用程序包括一个简化版的 &quot;英雄之旅 &quot;示例,它可以获取英雄,并使用户能够添加、删除和更新它们。</target>
        </trans-unit>
        <trans-unit id="bd98dd1aa7ebf63714ed70c77d9c5c0dbaace3a4" translate="yes" xml:space="preserve">
          <source>The sample app for this guide includes a simplified version of the &quot;Tour of Heroes&quot; example that fetches heroes and enables users to add, delete, and update them. The following sections show examples of the data-update methods from the sample's &lt;code&gt;HeroesService&lt;/code&gt;.</source>
          <target state="translated">本指南的示例应用程序包括&amp;ldquo;英雄之旅&amp;rdquo;示例的简化版本，该示例可获取英雄并允许用户添加，删除和更新英雄。以下各节显示了示例的 &lt;code&gt;HeroesService&lt;/code&gt; 中的数据更新方法的示例。</target>
        </trans-unit>
        <trans-unit id="006cff79a45782fa6207fcb043d6c24706576a90" translate="yes" xml:space="preserve">
          <source>The sample app has an &lt;code&gt;AuthService&lt;/code&gt; that produces an authorization token. Here is its &lt;code&gt;AuthInterceptor&lt;/code&gt; that injects that service to get the token and adds an authorization header with that token to every outgoing request:</source>
          <target state="translated">该示例应用程序具有 &lt;code&gt;AuthService&lt;/code&gt; ，该服务可生成授权令牌。这是其 &lt;code&gt;AuthInterceptor&lt;/code&gt; ，它注入该服务以获取令牌，并向每个外发请求添加带有该令牌的授权标头：</target>
        </trans-unit>
        <trans-unit id="4b25f5e76871ab40b71bff3adfc28a5e339486c0" translate="yes" xml:space="preserve">
          <source>The sample app imports &lt;code&gt;GreetingModule&lt;/code&gt; and uses its &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method one time, in &lt;code&gt;AppModule&lt;/code&gt;. Registering it once like this prevents multiple instances.</source>
          <target state="translated">示例应用程序进口 &lt;code&gt;GreetingModule&lt;/code&gt; 并使用其 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 方法一时刻在 &lt;code&gt;AppModule&lt;/code&gt; 。这样注册一次可以防止多个实例。</target>
        </trans-unit>
        <trans-unit id="3d5566f26037b1279c82bb0b83438b569cab6209" translate="yes" xml:space="preserve">
          <source>The sample app imports &lt;code&gt;GreetingModule&lt;/code&gt; and uses its &lt;code&gt;forRoot()&lt;/code&gt; method one time, in &lt;code&gt;AppModule&lt;/code&gt;. Registering it once like this prevents multiple instances.</source>
          <target state="translated">示例应用程序进口 &lt;code&gt;GreetingModule&lt;/code&gt; 并使用其 &lt;code&gt;forRoot()&lt;/code&gt; 方法一时刻在 &lt;code&gt;AppModule&lt;/code&gt; 。这样注册一次可以防止多个实例。</target>
        </trans-unit>
        <trans-unit id="bbdc02b77eadf3cafece29a3b6adb0bfb784c563" translate="yes" xml:space="preserve">
          <source>The sample application</source>
          <target state="translated">应用示例</target>
        </trans-unit>
        <trans-unit id="3bad0c6f1f3a97ac6c5ed1daf3fec0440d87ec3a" translate="yes" xml:space="preserve">
          <source>The sample application doesn't talk to a server. Fortunately, you have another way to demonstrate an asynchronous router hook.</source>
          <target state="translated">该示例应用程序没有与服务器对话。幸运的是,你有另一种方法来演示异步路由器钩子。</target>
        </trans-unit>
        <trans-unit id="d6e9e62f3340a5b7bae48635a40efe5af7a7bf97" translate="yes" xml:space="preserve">
          <source>The sample application for this tutorial helps the Hero Employment Agency find crises for heroes to solve.</source>
          <target state="translated">本教程的应用示例可以帮助英雄职业介绍所找到危机,为英雄解决。</target>
        </trans-unit>
        <trans-unit id="2103219c7d79a26e0ff1f6660f7abac30fdaafba" translate="yes" xml:space="preserve">
          <source>The sample application in action</source>
          <target state="translated">应用实例</target>
        </trans-unit>
        <trans-unit id="1127033a52632203fbf3f5f1079ad39c14f5ea44" translate="yes" xml:space="preserve">
          <source>The sample application's &lt;code&gt;HighlightDirective&lt;/code&gt; sets the background color of an element based on either a data bound color or a default color (lightgray). It also sets a custom property of the element (&lt;code&gt;customProperty&lt;/code&gt;) to &lt;code&gt;true&lt;/code&gt; for no reason other than to show that it can.</source>
          <target state="translated">示例应用程序的 &lt;code&gt;HighlightDirective&lt;/code&gt; 基于数据绑定颜色或默认颜色（浅灰色）设置元素的背景色。它还将元素的自定义属性（ &lt;code&gt;customProperty&lt;/code&gt; ）设置为 &lt;code&gt;true&lt;/code&gt; ，除了表明可以这样做之外，没有其他原因。</target>
        </trans-unit>
        <trans-unit id="dc8fd67bc712a242a84db80063d64dc1c8dbd84a" translate="yes" xml:space="preserve">
          <source>The sample code applies the directive's &lt;code&gt;myHighlight&lt;/code&gt; attribute to two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, first without a value (yielding the default color) and then with an assigned color value.</source>
          <target state="translated">该示例代码将指令的 &lt;code&gt;myHighlight&lt;/code&gt; 属性应用于两个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 标记，首先不带值（产生默认颜色），然后带一个指定的颜色值。</target>
        </trans-unit>
        <trans-unit id="379e5310111b19fac04c5edbb88f65ff520ab130" translate="yes" xml:space="preserve">
          <source>The sample form in this guide is used by the &lt;em&gt;Hero Employment Agency&lt;/em&gt; to maintain personal information about heroes. Every hero needs a job. This form helps the agency match the right hero with the right crisis.</source>
          <target state="translated">&lt;em&gt;英雄职业介绍&lt;/em&gt;所使用本指南中的示例表格来维护有关英雄的个人信息。每个英雄都需要一份工作。此表格可帮助代理商将合适的英雄与合适的危机相匹配。</target>
        </trans-unit>
        <trans-unit id="1cdce23d28dd1f2b7da807f6e9aa5f945c0a228f" translate="yes" xml:space="preserve">
          <source>The sample form uses some style classes from &lt;a href=&quot;http://getbootstrap.com/css/&quot;&gt;Twitter Bootstrap&lt;/a&gt;: &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;form-group&lt;/code&gt;, &lt;code&gt;form-control&lt;/code&gt;, and &lt;code&gt;btn&lt;/code&gt;. To use these styles, the app's style sheet imports the library.</source>
          <target state="translated">该示例表单使用了&lt;a href=&quot;http://getbootstrap.com/css/&quot;&gt;Twitter Bootstrap中的&lt;/a&gt;一些样式类： &lt;code&gt;container&lt;/code&gt; ， &lt;code&gt;form-group&lt;/code&gt; ， &lt;code&gt;form-control&lt;/code&gt; 和 &lt;code&gt;btn&lt;/code&gt; 。要使用这些样式，应用程序的样式表将导入库。</target>
        </trans-unit>
        <trans-unit id="b4c357483fbca3561b110b150693b24ea9c304f2" translate="yes" xml:space="preserve">
          <source>The sample form uses some style classes from &lt;a href=&quot;https://getbootstrap.com/css/&quot;&gt;Twitter Bootstrap&lt;/a&gt;: &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;form-group&lt;/code&gt;, &lt;code&gt;form-control&lt;/code&gt;, and &lt;code&gt;btn&lt;/code&gt;. To use these styles, the app's style sheet imports the library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6231d5bf243f4874525430c1c1584ebea7435e57" translate="yes" xml:space="preserve">
          <source>The sample in this guide uses the default XLIFF 1.2 format.</source>
          <target state="translated">本指南中的示例使用默认的XLIFF 1.2格式。</target>
        </trans-unit>
        <trans-unit id="180848306acfa9ca7d56cebe3f38672d87a67bb8" translate="yes" xml:space="preserve">
          <source>The sample includes an &lt;em&gt;npm package search&lt;/em&gt; feature.</source>
          <target state="translated">该示例包括&lt;em&gt;npm软件包搜索&lt;/em&gt;功能。</target>
        </trans-unit>
        <trans-unit id="64704b7b5364cf1f994994b077e96754cf4434c3" translate="yes" xml:space="preserve">
          <source>The sample routing application does not include routing by default. When you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to create a project that does use routing, set the &lt;code&gt;--routing&lt;/code&gt; option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command) or a new app (using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate app&lt;/code&gt;&lt;/a&gt; command), specify the &lt;code&gt;--routing&lt;/code&gt; option. This tells the CLI to include the &lt;code&gt;@angular/router&lt;/code&gt; npm package and create a file named &lt;code&gt;app-routing.module.ts&lt;/code&gt;. You can then use routing in any NgModule that you add to the project or app.</source>
          <target state="translated">默认情况下，示例路由应用程序不包括路由。使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建不使用路由的项目时，请为项目或应用程序以及每个NgModule设置 &lt;code&gt;--routing&lt;/code&gt; 选项。当您创建或初始化新项目（使用CLI &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;命令）或新应用程序（使用&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate app&lt;/code&gt; &lt;/a&gt;命令）时，请指定 &lt;code&gt;--routing&lt;/code&gt; 选项。这告诉CLI包括 &lt;code&gt;@angular/router&lt;/code&gt; npm软件包并创建一个名为 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 的文件。然后，您可以在添加到项目或应用程序的任何NgModule中使用路由。</target>
        </trans-unit>
        <trans-unit id="845d81bff91c35f9ca3a0e8902c70651cdbae3e9" translate="yes" xml:space="preserve">
          <source>The sample routing application does not include routing by default. When you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to create a project that will use routing, set the &lt;code&gt;--routing&lt;/code&gt; option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command) or a new app (using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate app&lt;/code&gt;&lt;/a&gt; command), specify the &lt;code&gt;--routing&lt;/code&gt; option. This tells the CLI to include the &lt;code&gt;@angular/router&lt;/code&gt; npm package and create a file named &lt;code&gt;app-routing.module.ts&lt;/code&gt;. You can then use routing in any NgModule that you add to the project or app.</source>
          <target state="translated">默认情况下，示例路由应用程序不包括路由。当您使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建将使用路由的项目时，请为项目或应用程序以及每个NgModule 设置 &lt;code&gt;--routing&lt;/code&gt; 选项。当您创建或初始化新项目（使用CLI &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;命令）或新应用程序（使用&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate app&lt;/code&gt; &lt;/a&gt;命令）时，请指定 &lt;code&gt;--routing&lt;/code&gt; 选项。这告诉CLI包括 &lt;code&gt;@angular/router&lt;/code&gt; npm软件包并创建一个名为 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 的文件。然后，您可以在添加到项目或应用程序的任何NgModule中使用路由。</target>
        </trans-unit>
        <trans-unit id="48715b36d405c3c723bb6e1a83d110dfa8e48522" translate="yes" xml:space="preserve">
          <source>The sample source code for this page, located in &lt;code&gt;context/examples/docs-style-guide&lt;/code&gt;, contains examples of every code snippet markup described in this section.</source>
          <target state="translated">此页面的示例源代码位于 &lt;code&gt;context/examples/docs-style-guide&lt;/code&gt; 中，其中包含本节中描述的每个代码段标记的示例。</target>
        </trans-unit>
        <trans-unit id="f97b4d7dd36c622166d42d22b9b96141f0cd7661" translate="yes" xml:space="preserve">
          <source>The sample web server for this guide is based on the popular &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework.</source>
          <target state="translated">本指南的示例Web服务器基于流行的&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;框架。</target>
        </trans-unit>
        <trans-unit id="f1d88c2387cd1e3449b58fad506e327b13a8cf48" translate="yes" xml:space="preserve">
          <source>The sample's &lt;code&gt;CraigComponent&lt;/code&gt; explores this question. &lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;Looking back&lt;/a&gt;, you see that the &lt;code&gt;Alex&lt;/code&gt; component &lt;em&gt;extends&lt;/em&gt; (&lt;em&gt;inherits&lt;/em&gt;) from a class named &lt;code&gt;Base&lt;/code&gt;.</source>
          <target state="translated">样本的 &lt;code&gt;CraigComponent&lt;/code&gt; 探索了这个问题。&lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;往回&lt;/a&gt;看，您会发现 &lt;code&gt;Alex&lt;/code&gt; 组件从名为 &lt;code&gt;Base&lt;/code&gt; 的类&lt;em&gt;扩展&lt;/em&gt;（&lt;em&gt;继承&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="b7f1caebac3561b1bd11adb25a659f920576c1e5" translate="yes" xml:space="preserve">
          <source>The schema defines the types and default values of variables used in the schematic. For example, the hypothetical &quot;Hello World&quot; schematic might have the following schema.</source>
          <target state="translated">模式定义了原理图中使用的变量的类型和默认值。例如,假设的 &quot;Hello World &quot;原理图可能有以下模式。</target>
        </trans-unit>
        <trans-unit id="28cbf3d458ff001f8ea8f2ca87d3187c8823c817" translate="yes" xml:space="preserve">
          <source>The schema for a &lt;code&gt;stackblitz.json&lt;/code&gt; hasn't been documented yet but looking at the &lt;code&gt;stackblitz.json&lt;/code&gt; files in the example folders should tell you most of what you need to know.</source>
          <target state="translated">尚未记录 &lt;code&gt;stackblitz.json&lt;/code&gt; 的架构，但是查看示例文件夹中的 &lt;code&gt;stackblitz.json&lt;/code&gt; 文件应该可以告诉您大部分您需要知道的内容。</target>
        </trans-unit>
        <trans-unit id="4ddb5588b2b1fc36ef16d673582bc1ea813181ee" translate="yes" xml:space="preserve">
          <source>The schematic collection can be a powerful tool for creating, modifying, and maintaining any software project, but is particularly useful for customizing Angular projects to suit the particular needs of your own organization. You might use schematics, for example, to generate commonly-used UI patterns or specific components, using predefined templates or layouts. You can use schematics to enforce architectural rules and conventions, making your projects consistent and inter-operative.</source>
          <target state="translated">示意图集合可以成为创建、修改和维护任何软件项目的强大工具,但对于定制Angular项目以适应自己组织的特殊需求来说,特别有用。例如,您可以使用模式图来生成常用的UI模式或特定组件,使用预定义的模板或布局。您可以使用模式图来强制执行架构规则和约定,使您的项目具有一致性和互操作性。</target>
        </trans-unit>
        <trans-unit id="93cfe4e4adbbfded84c6c8f071cc59a7887190fb" translate="yes" xml:space="preserve">
          <source>The schematic or collection:schematic to generate.</source>
          <target state="translated">要生成的原理图或集合:原理图。</target>
        </trans-unit>
        <trans-unit id="644126d257f84f676df9b8c93031e7697e56a4cb" translate="yes" xml:space="preserve">
          <source>The scope for the new routing module.</source>
          <target state="translated">新的路由模块的范围。</target>
        </trans-unit>
        <trans-unit id="5d45510eb393444a2c062d97a89bb09d19beb1e7" translate="yes" xml:space="preserve">
          <source>The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</source>
          <target state="translated">引用变量的范围是整个模板。所以,不要在同一个模板中定义同一个变量名超过一次,因为运行时的值将无法预测。</target>
        </trans-unit>
        <trans-unit id="5760dd13dc5237be2a7e34da16871a6fc9a53718" translate="yes" xml:space="preserve">
          <source>The scope of the service instance is the parent component and its children. Components outside this component subtree have no access to the service or their communications.</source>
          <target state="translated">服务实例的范围是父组件和它的子组件。这个组件子树之外的组件不能访问服务或它们的通信。</target>
        </trans-unit>
        <trans-unit id="ed54e7c3473aae483d10d6a344247055bd214d68" translate="yes" xml:space="preserve">
          <source>The scoping rules outlined earlier apply to each of these loading patterns.</source>
          <target state="translated">前面概述的范围界定规则适用于这些装载模式中的每一种。</target>
        </trans-unit>
        <trans-unit id="6ca21198000899209ea533a19e8cd0f64d9427fc" translate="yes" xml:space="preserve">
          <source>The search box on the Dashboard page is ignored.</source>
          <target state="translated">忽略 &quot;仪表板 &quot;页面上的搜索框。</target>
        </trans-unit>
        <trans-unit id="42ac7068ce0b0eff086a7cd61efd10c482ea26ac" translate="yes" xml:space="preserve">
          <source>The search object</source>
          <target state="translated">搜索对象</target>
        </trans-unit>
        <trans-unit id="986d1babf2cbea214b8a121acd469431369cde38" translate="yes" xml:space="preserve">
          <source>The second &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; aliases the child component property name &lt;code&gt;masterName&lt;/code&gt; as &lt;code&gt;'master'&lt;/code&gt;.</source>
          <target state="translated">第二个 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 将子组件属性名称 &lt;code&gt;masterName&lt;/code&gt; 别名为 &lt;code&gt;'master'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="890b72d0bae3cb1fcd8858dc63a35a3adb6d2b0e" translate="yes" xml:space="preserve">
          <source>The second and third test reveal an important limitation. The Angular testing environment does &lt;em&gt;not&lt;/em&gt; know that the test changed the component's &lt;code&gt;title&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; service responds to &lt;em&gt;asynchronous activities&lt;/em&gt; such as promise resolution, timers, and DOM events. But a direct, synchronous update of the component property is invisible. The test must call &lt;code&gt;fixture.detectChanges()&lt;/code&gt; manually to trigger another cycle of change detection.</source>
          <target state="translated">第二和第三次测试揭示了一个重要的局限性。该角度测试环境不&lt;em&gt;不&lt;/em&gt;知道测试改变了组件的 &lt;code&gt;title&lt;/code&gt; 。该 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; 服务响应&lt;em&gt;异步活动，&lt;/em&gt;如承诺的分辨率，计时器和DOM事件。但是，组件属性的直接，同步更新是不可见的。测试必须手动调用 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; 来触发另一个变更检测周期。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
