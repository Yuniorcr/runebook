<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="a70c7f004f51dd841c8bf72d79a2b332be6588fc" translate="yes" xml:space="preserve">
          <source>Step 1: Create a file called &lt;code&gt;.travis.yml&lt;/code&gt; at the project root, with the following content:</source>
          <target state="translated">步骤1：在项目根目录下创建一个名为 &lt;code&gt;.travis.yml&lt;/code&gt; 的文件，其内容如下：</target>
        </trans-unit>
        <trans-unit id="28218bb7cf960a24022b3fdfb128243da5874ea1" translate="yes" xml:space="preserve">
          <source>Step 1: Create a folder called &lt;code&gt;.circleci&lt;/code&gt; at the project root.</source>
          <target state="translated">步骤1：在项目根目录下创建一个名为 &lt;code&gt;.circleci&lt;/code&gt; 的文件夹。</target>
        </trans-unit>
        <trans-unit id="607bca37e5b2e80d7fe948b246b3b04ecfa2ae17" translate="yes" xml:space="preserve">
          <source>Step 1: Create a starter Angular app</source>
          <target state="translated">第1步:创建一个入门的Angular应用。</target>
        </trans-unit>
        <trans-unit id="13681cb262ad63d4559db4e51d2f4c77bcaa24be" translate="yes" xml:space="preserve">
          <source>Step 1: Creating a FormGroup instance</source>
          <target state="translated">步骤1:创建一个FormGroup实例</target>
        </trans-unit>
        <trans-unit id="6fdd00950f17cb0ed7de408cf20e796e85a488ab" translate="yes" xml:space="preserve">
          <source>Step 1: Creating a nested group</source>
          <target state="translated">步骤1:创建一个嵌套组</target>
        </trans-unit>
        <trans-unit id="7a0bca33f0a6ae8c165fae2cc46a6e0486437bb5" translate="yes" xml:space="preserve">
          <source>Step 1: Enabling the animations module</source>
          <target state="translated">第一步:启用动画模块</target>
        </trans-unit>
        <trans-unit id="b1776a8b513151c65c791351046e9888d1c75f55" translate="yes" xml:space="preserve">
          <source>Step 1: Importing a validator function</source>
          <target state="translated">步骤1:导入验证器函数</target>
        </trans-unit>
        <trans-unit id="280e917b7d2bc01916d99bab335193daaa951e5b" translate="yes" xml:space="preserve">
          <source>Step 1: Importing the FormArray class</source>
          <target state="translated">步骤1:导入FormArray类</target>
        </trans-unit>
        <trans-unit id="bf5a7e4c14cf243029e716ef4fbad27b7819cdc8" translate="yes" xml:space="preserve">
          <source>Step 1: Importing the FormBuilder class</source>
          <target state="translated">步骤1:导入FormBuilder类</target>
        </trans-unit>
        <trans-unit id="2aa14c5aa27be1102a9b8bc70464bc965f368f69" translate="yes" xml:space="preserve">
          <source>Step 1: Install the Angular CLI</source>
          <target state="translated">步骤1:安装Angular CLI</target>
        </trans-unit>
        <trans-unit id="e01f336fe0627c02c0bec9db097c78b1796632b1" translate="yes" xml:space="preserve">
          <source>Step 1: Prepare the application</source>
          <target state="translated">第一步:准备申请</target>
        </trans-unit>
        <trans-unit id="f3712867d0750b16c35a60c9943f15cbb206f4c2" translate="yes" xml:space="preserve">
          <source>Step 1: Registering the reactive forms module</source>
          <target state="translated">第一步:注册反应式表格模块。</target>
        </trans-unit>
        <trans-unit id="26f68e120685eff00e9e9b3c4ac9a460cd24573c" translate="yes" xml:space="preserve">
          <source>Step 2: Associating the FormGroup model and view</source>
          <target state="translated">第二步:关联FormGroup模型和视图</target>
        </trans-unit>
        <trans-unit id="69846982085855e40a5e5389efe1ac7e0b7db5dc" translate="yes" xml:space="preserve">
          <source>Step 2: Commit your changes and push them to your repository.</source>
          <target state="translated">第二步:提交你的修改并推送到你的版本库。</target>
        </trans-unit>
        <trans-unit id="05867c5dba6d0ee12376ba9f91cb939b01d85f6d" translate="yes" xml:space="preserve">
          <source>Step 2: Create a workspace and initial application</source>
          <target state="translated">第二步:创建工作区和初始应用</target>
        </trans-unit>
        <trans-unit id="1193eb17c80f8ca42ec7cac03cc199c653d6a6d8" translate="yes" xml:space="preserve">
          <source>Step 2: Create the Visual Studio ASP.NET project</source>
          <target state="translated">步骤2:创建Visual Studio ASP.NET项目。</target>
        </trans-unit>
        <trans-unit id="cb371239493b6f1db9dc27c1572e74d840acdaae" translate="yes" xml:space="preserve">
          <source>Step 2: Create the app shell</source>
          <target state="translated">第二步:创建应用程序外壳</target>
        </trans-unit>
        <trans-unit id="9fa6645896c085d5f6025b9fa18f4e9d656aa4e6" translate="yes" xml:space="preserve">
          <source>Step 2: Defining a FormArray control</source>
          <target state="translated">步骤2:定义一个FormArray控件</target>
        </trans-unit>
        <trans-unit id="32569184480d39b17301ace10107e123dda23ab3" translate="yes" xml:space="preserve">
          <source>Step 2: Generating and importing a new form control</source>
          <target state="translated">第2步:生成并导入新的表单控件。</target>
        </trans-unit>
        <trans-unit id="9dd62b0172ed397c2fd2c17c30ab3f575d0170b3" translate="yes" xml:space="preserve">
          <source>Step 2: Grouping the nested form in the template</source>
          <target state="translated">第二步:将模板中的嵌套表格进行分组处理</target>
        </trans-unit>
        <trans-unit id="29c047c17af8a6b93bcb74992827a0ddce8c5ec9" translate="yes" xml:space="preserve">
          <source>Step 2: Importing animation functions into component files</source>
          <target state="translated">第二步:将动画功能导入组件文件中</target>
        </trans-unit>
        <trans-unit id="751f70297e2b3dba20b8015eab9ec68afe2e4b35" translate="yes" xml:space="preserve">
          <source>Step 2: In the new folder, create a file called &lt;code&gt;config.yml&lt;/code&gt; with the following content:</source>
          <target state="translated">步骤2：在新文件夹中，创建一个名为 &lt;code&gt;config.yml&lt;/code&gt; 的文件，其内容如下：</target>
        </trans-unit>
        <trans-unit id="5899c120f8c2a07d534d98589d289c508970e13e" translate="yes" xml:space="preserve">
          <source>Step 2: Injecting the FormBuilder service</source>
          <target state="translated">步骤2:注入FormBuilder服务</target>
        </trans-unit>
        <trans-unit id="d731444ae922a421682d474d2d547450f28ce971" translate="yes" xml:space="preserve">
          <source>Step 2: Making a field required</source>
          <target state="translated">第2步:使一个字段成为必填字段</target>
        </trans-unit>
        <trans-unit id="4500a32a41554fc237ce07f1730a865651be1182" translate="yes" xml:space="preserve">
          <source>Step 3: &lt;a href=&quot;https://travis-ci.org/auth&quot;&gt;Sign up for Travis CI&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;add your project&lt;/a&gt;. You'll need to push a new commit to trigger a build.</source>
          <target state="translated">步骤3：&lt;a href=&quot;https://travis-ci.org/auth&quot;&gt;注册Travis CI，&lt;/a&gt;然后&lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;添加您的项目&lt;/a&gt;。您需要推送新的提交以触发构建。</target>
        </trans-unit>
        <trans-unit id="9b8fbf088289d7f0285fec5ef9b410ebbb640fd4" translate="yes" xml:space="preserve">
          <source>Step 3: Accessing the FormArray control</source>
          <target state="translated">步骤3:访问FormArray控件</target>
        </trans-unit>
        <trans-unit id="c85eca67ded9bdcbcf6feec3674112f877a8cb9e" translate="yes" xml:space="preserve">
          <source>Step 3: Adding the animation metadata property</source>
          <target state="translated">第三步:添加动画元数据属性</target>
        </trans-unit>
        <trans-unit id="20d19721ef33709f163e149ee0ea8a5a03024a69" translate="yes" xml:space="preserve">
          <source>Step 3: Commit your changes and push them to your repository.</source>
          <target state="translated">第三步:提交你的修改并推送到你的版本库。</target>
        </trans-unit>
        <trans-unit id="48d4deda6a29de0da753e4aeef856b6305e8d550" translate="yes" xml:space="preserve">
          <source>Step 3: Copy the Angular project files into the ASP.NET project folder</source>
          <target state="translated">第三步:将Angular项目文件复制到ASP.NET项目文件夹中。</target>
        </trans-unit>
        <trans-unit id="005849058dc80d62a7f2d8a7ab2ae9ab9b745d64" translate="yes" xml:space="preserve">
          <source>Step 3: Generating form controls</source>
          <target state="translated">步骤3:生成表单控件</target>
        </trans-unit>
        <trans-unit id="017f470b7d7749895b56fc4419f11fbb6bf10f98" translate="yes" xml:space="preserve">
          <source>Step 3: Registering the control in the template</source>
          <target state="translated">第三步:在模板中注册控件。</target>
        </trans-unit>
        <trans-unit id="d70d1c45f5e3789dec8e23bd525c942db5b8fc7b" translate="yes" xml:space="preserve">
          <source>Step 3: Run the application</source>
          <target state="translated">第三步:运行应用程序</target>
        </trans-unit>
        <trans-unit id="91ff2efe0d7b26ad2720b21c1dfcf98862e43810" translate="yes" xml:space="preserve">
          <source>Step 3: Verify the app is built with the shell content</source>
          <target state="translated">第三步:验证应用的构建是否有shell内容</target>
        </trans-unit>
        <trans-unit id="4b250d9e8fb17555e0e9336a36a06d98e847fa45" translate="yes" xml:space="preserve">
          <source>Step 4: &lt;a href=&quot;https://circleci.com/docs/2.0/first-steps/&quot;&gt;Sign up for Circle CI&lt;/a&gt; and &lt;a href=&quot;https://circleci.com/add-projects&quot;&gt;add your project&lt;/a&gt;. Your project should start building.</source>
          <target state="translated">第4步：&lt;a href=&quot;https://circleci.com/docs/2.0/first-steps/&quot;&gt;注册Circle CI&lt;/a&gt;并&lt;a href=&quot;https://circleci.com/add-projects&quot;&gt;添加您的项目&lt;/a&gt;。您的项目应该开始构建。</target>
        </trans-unit>
        <trans-unit id="f76a02a29a9e5d7c472da0a39e2f0a3e742c7f77" translate="yes" xml:space="preserve">
          <source>Step 4: Displaying the form array in the template</source>
          <target state="translated">第四步:在模板中显示表单数组。</target>
        </trans-unit>
        <trans-unit id="184db950bcad4c5561140a2400f15e24a5c78842" translate="yes" xml:space="preserve">
          <source>Step 4: Restore the required packages</source>
          <target state="translated">步骤4:恢复所需的软件包</target>
        </trans-unit>
        <trans-unit id="0ef1c21f79bdbe367b7d560790f576815ac4209d" translate="yes" xml:space="preserve">
          <source>Step 5: Build and run the app</source>
          <target state="translated">第五步:构建并运行应用程序</target>
        </trans-unit>
        <trans-unit id="c9932c1df99faee4ac2c6ee9b9b022a5772a5828" translate="yes" xml:space="preserve">
          <source>Step overview</source>
          <target state="translated">步骤概述</target>
        </trans-unit>
        <trans-unit id="65487b65ef340ce184173de8941091ae57757d80" translate="yes" xml:space="preserve">
          <source>Step-by-step setup</source>
          <target state="translated">逐步设置</target>
        </trans-unit>
        <trans-unit id="cff6e99a14676bb106644324be04b5717cc9e1cf" translate="yes" xml:space="preserve">
          <source>Steps defined by &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; calls apply the styling data over time as specified by the timing data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 调用定义的步骤将样式数据应用到时序数据指定的时间范围内。</target>
        </trans-unit>
        <trans-unit id="c8ed69821ec203d6829dbcc9d9d6fec704a81de6" translate="yes" xml:space="preserve">
          <source>Steps defined by &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; calls apply the styling data immediately.</source>
          <target state="translated">由 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 调用定义的步骤将立即应用样式数据。</target>
        </trans-unit>
        <trans-unit id="2d4383c84264ce47ffad337a7a37bd1df0791d15" translate="yes" xml:space="preserve">
          <source>Steps to localize your app</source>
          <target state="translated">本地化应用程序的步骤</target>
        </trans-unit>
        <trans-unit id="3a07d30bad8c94218ad0f704b43802b2da976357" translate="yes" xml:space="preserve">
          <source>Stick with the default unless you have a compelling reason to resort to hash routes.</source>
          <target state="translated">坚持使用默认值,除非你有令人信服的理由采用哈希路由。</target>
        </trans-unit>
        <trans-unit id="bf1066a438f75be73bd593a9e5f4901e8d7a54cd" translate="yes" xml:space="preserve">
          <source>Still in the &lt;code&gt;AppRoutingModule&lt;/code&gt;, specify your preloading strategy in &lt;code&gt;forRoot()&lt;/code&gt;.</source>
          <target state="translated">仍在 &lt;code&gt;AppRoutingModule&lt;/code&gt; 中，在 &lt;code&gt;forRoot()&lt;/code&gt; 中指定您的预加载策略。</target>
        </trans-unit>
        <trans-unit id="7764532b0013402d2d82a4b88aac36cb4d845193" translate="yes" xml:space="preserve">
          <source>Still in the &lt;code&gt;CartComponent&lt;/code&gt; class, define the &lt;code&gt;checkoutForm&lt;/code&gt; property to store the form model.</source>
          <target state="translated">仍在 &lt;code&gt;CartComponent&lt;/code&gt; 类中，定义 &lt;code&gt;checkoutForm&lt;/code&gt; 属性以存储表单模型。</target>
        </trans-unit>
        <trans-unit id="2598500f4189f4c7d4d04fd55e20d7832c56f7b1" translate="yes" xml:space="preserve">
          <source>Still in the &lt;code&gt;HeroService&lt;/code&gt;, inject &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into the constructor in a private property called &lt;code&gt;&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">仍在 &lt;code&gt;HeroService&lt;/code&gt; 中，将 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 注入到名为 &lt;code&gt;&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 的私有属性的构造函数中。</target>
        </trans-unit>
        <trans-unit id="86f183e2c301ae15282a1180211492bbcc7a6bac" translate="yes" xml:space="preserve">
          <source>Still, there might be cases where you want more control over when the ServiceWorker is registered (e.g. there might be a long-running timeout or polling interval, preventing the app to stabilize). The available option are:</source>
          <target state="translated">不过,可能在某些情况下,你还是希望对ServiceWorker的注册时间有更多的控制(例如,可能会出现长时间的超时或轮询间隔,使应用无法稳定下来)。可用的选项有</target>
        </trans-unit>
        <trans-unit id="0e11d9fab2df24308a243919b5e483ad161c19f2" translate="yes" xml:space="preserve">
          <source>Still, there might be cases where you want more control over when the ServiceWorker is registered (for example, there might be a long-running timeout or polling interval, preventing the app from stabilizing). The available option are:</source>
          <target state="translated">不过,可能在某些情况下,你还是希望对ServiceWorker的注册时间有更多的控制(例如,可能会出现长时间的超时或轮询间隔,使应用程序无法稳定运行)。可用的选项有</target>
        </trans-unit>
        <trans-unit id="085047dc833a0dc9d40996c4f030f809db3a73d4" translate="yes" xml:space="preserve">
          <source>Stop interval timers.</source>
          <target state="translated">停止间隔定时器。</target>
        </trans-unit>
        <trans-unit id="b73dbe34e4ed8ad93ef32a3f7c640e997f88205c" translate="yes" xml:space="preserve">
          <source>Stopping and starting the service worker in the Service Worker pane triggers a check for updates.</source>
          <target state="translated">在 &quot;服务工作者 &quot;窗格中停止和启动服务工作者会触发更新检查。</target>
        </trans-unit>
        <trans-unit id="04eff34316cb47c772b1bddbf1fbb113d1857149" translate="yes" xml:space="preserve">
          <source>Store contextual information about a &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">存储有关 &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的上下文信息</target>
        </trans-unit>
        <trans-unit id="77e71f586ded49562f9a0b742cf70a777d3efe78" translate="yes" xml:space="preserve">
          <source>Store contextual information about a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">存储有关 &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的上下文信息</target>
        </trans-unit>
        <trans-unit id="e48cfb3d3d03ba559addfbec1ad5e1a3182727e4" translate="yes" xml:space="preserve">
          <source>Store contextual information about the children (= nested) &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">存储有关子级（嵌套） &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的上下文信息</target>
        </trans-unit>
        <trans-unit id="b1514487ea7bd392f7937b087b3478f147520b52" translate="yes" xml:space="preserve">
          <source>Store contextual information about the children (= nested) &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">存储有关子级（嵌套） &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的上下文信息</target>
        </trans-unit>
        <trans-unit id="cfdd9b3462a479338e13a25805a7dc27b79d9eda" translate="yes" xml:space="preserve">
          <source>Store images in the &lt;code&gt;content/images&lt;/code&gt; directory in a folder with the same URL as the guide page. Images for this &quot;Authors Style Guide&quot; page belong in the &lt;code&gt;content/images/guide/docs-style-guide&lt;/code&gt; folder.</source>
          <target state="translated">将图像存储在 &lt;code&gt;content/images&lt;/code&gt; 目录的文件夹中，该文件夹具有与指南页面相同的URL。此&amp;ldquo;作者样式指南&amp;rdquo;页面的 &lt;code&gt;content/images/guide/docs-style-guide&lt;/code&gt; 属于content / images / guide / docs-style-guide文件夹。</target>
        </trans-unit>
        <trans-unit id="9ad7aff1545b9d1f97374f1368ea7cf2c5640b72" translate="yes" xml:space="preserve">
          <source>Store the callback function</source>
          <target state="translated">存储回调函数</target>
        </trans-unit>
        <trans-unit id="d09993861d6f0e8bb21791faac138e64e72017dd" translate="yes" xml:space="preserve">
          <source>Store the change function</source>
          <target state="translated">存储变更功能</target>
        </trans-unit>
        <trans-unit id="2917c752ee7cda1d6fe8f953f785c8563d7af0ab" translate="yes" xml:space="preserve">
          <source>Stores the HTML template to be selected on match.</source>
          <target state="translated">存储匹配时要选择的HTML模板。</target>
        </trans-unit>
        <trans-unit id="eee15be5321e455c5d3901a0e21c2d141f3a40fe" translate="yes" xml:space="preserve">
          <source>Stores the detached route.</source>
          <target state="translated">储存分离的途径。</target>
        </trans-unit>
        <trans-unit id="4d3522cdb0ae0a90b17fbc4ff367b18c0f4cdc60" translate="yes" xml:space="preserve">
          <source>Storing a &lt;code&gt;null&lt;/code&gt; value should erase the previously stored value.</source>
          <target state="translated">存储 &lt;code&gt;null&lt;/code&gt; 值应清除先前存储的值。</target>
        </trans-unit>
        <trans-unit id="0b616462c661d3e538d4d24f804c11817a37c5cb" translate="yes" xml:space="preserve">
          <source>Storing a conditional result in a variable</source>
          <target state="translated">在变量中存储条件结果</target>
        </trans-unit>
        <trans-unit id="3fd59ae41b6519f4cc217d2214f4502810632ad2" translate="yes" xml:space="preserve">
          <source>Streamline releases with consolidated Angular versioning &amp;amp; branching</source>
          <target state="translated">通过合并的Angular版本控制和分支简化发布</target>
        </trans-unit>
        <trans-unit id="fa0479ff2a26e3cb50de04daa27bd3e106e08691" translate="yes" xml:space="preserve">
          <source>Streamlined &lt;a href=&quot;http#error-handling&quot;&gt;error handling&lt;/a&gt;.</source>
          <target state="translated">简化的&lt;a href=&quot;http#error-handling&quot;&gt;错误处理&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bb58e54eade2e3692f42c15879de34341894444a" translate="yes" xml:space="preserve">
          <source>Strict mode</source>
          <target state="translated">严格模式</target>
        </trans-unit>
        <trans-unit id="bda7b46d586a685101d4d20db26be15cbf747aea" translate="yes" xml:space="preserve">
          <source>Strict null checks</source>
          <target state="translated">严格的无效检查</target>
        </trans-unit>
        <trans-unit id="22617bef2ba49e8d6f8399d1e4797298ac7930c7" translate="yes" xml:space="preserve">
          <source>Strictness flag</source>
          <target state="translated">严格性标志</target>
        </trans-unit>
        <trans-unit id="9644d5734f03b7439ba40387bc3ec6021a0f2301" translate="yes" xml:space="preserve">
          <source>String Examples</source>
          <target state="translated">字符串示例</target>
        </trans-unit>
        <trans-unit id="7c9eda6cd62c61583722eabd843198abec4b7263" translate="yes" xml:space="preserve">
          <source>String of URL parameters.</source>
          <target state="translated">URL参数的字符串。</target>
        </trans-unit>
        <trans-unit id="ded6fb5d3578e6f25e85fa375454f30a56c30e74" translate="yes" xml:space="preserve">
          <source>String representing a URL.</source>
          <target state="translated">代表URL的字符串。</target>
        </trans-unit>
        <trans-unit id="0f280dc35cba0f462991f583348033840f71c044" translate="yes" xml:space="preserve">
          <source>String widths available for date-time formats. The specific character widths are locale-specific. Examples are given for &lt;code&gt;en-US&lt;/code&gt;.</source>
          <target state="translated">字符串宽度可用于日期时间格式。特定的字符宽度是特定于语言环境的。给出了 &lt;code&gt;en-US&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="e6a8a3351cfd4833a09546bdefd4e5bfc730b525" translate="yes" xml:space="preserve">
          <source>String widths available for translations. The specific character widths are locale-specific. Examples are given for the word &quot;Sunday&quot; in English.</source>
          <target state="translated">可用于翻译的字符串宽度。具体的字符宽度是因地制宜的。例如英语中的 &quot;Sunday &quot;一词。</target>
        </trans-unit>
        <trans-unit id="3c396638f94f562746728eb2c2021c54bc0758da" translate="yes" xml:space="preserve">
          <source>String: Use the given string value instead of a code or a symbol. For example, an empty string will suppress the currency &amp;amp; symbol.</source>
          <target state="translated">字符串：使用给定的字符串值代替代码或符号。例如，空字符串将取消显示货币和符号。</target>
        </trans-unit>
        <trans-unit id="fa4c723eb81b8491af1570970a5d321d9aba6709" translate="yes" xml:space="preserve">
          <source>Strip the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; back to just its &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, wrap the badge and name in an anchor element (&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;), and add a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; attribute to the anchor that is the same as in the dashboard template</source>
          <target state="translated">剥离 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 回到刚才其 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ，包裹在锚定元件的徽章和姓名（ &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; ），并添加一个 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 到锚属性，该属性是一样的，在仪表板模板</target>
        </trans-unit>
        <trans-unit id="e833ca2fc74f187b3c5fc922948ec8b9ce1a9301" translate="yes" xml:space="preserve">
          <source>Strip the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; back to just its &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, wrap the badge and name in an anchor element (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;), and add a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; attribute to the anchor that is the same as in the dashboard template</source>
          <target state="translated">将 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 剥离回它的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ，将标志和名称包装在锚元素（ &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; ）中，并向锚添加一个 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 属性，该属性与仪表板模板相同</target>
        </trans-unit>
        <trans-unit id="4ca86e4e4c4b88a4fd401574ce599d752ec15587" translate="yes" xml:space="preserve">
          <source>Structural Directives</source>
          <target state="translated">结构性指令</target>
        </trans-unit>
        <trans-unit id="44645931c6cf45d2d828f7b54fea901da303dcfa" translate="yes" xml:space="preserve">
          <source>Structural directives</source>
          <target state="translated">结构性指令</target>
        </trans-unit>
        <trans-unit id="8066b62e94107ae1169351af999664549945a21b" translate="yes" xml:space="preserve">
          <source>Structural directives are easy to recognize. An asterisk (*) precedes the directive attribute name as in this example.</source>
          <target state="translated">结构性指令很容易识别。在指令属性名称前加星号(*),如本例。</target>
        </trans-unit>
        <trans-unit id="4ce0c591c6652f0c5882633624358c718ae028aa" translate="yes" xml:space="preserve">
          <source>Structural directives are responsible for HTML layout. They shape or reshape the DOM's &lt;em&gt;structure&lt;/em&gt;, typically by adding, removing, or manipulating elements.</source>
          <target state="translated">结构指令负责HTML布局。它们通常通过添加，删除或操纵元素来成形或重塑DOM的&lt;em&gt;结构&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2f3e2ce91332d9933f8575349e3da3f714f37a09" translate="yes" xml:space="preserve">
          <source>Structural directives are responsible for HTML layout. They shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.</source>
          <target state="translated">结构指令负责HTML布局。它们塑造或重塑DOM的结构,通常是通过添加、删除和操作它们所连接的主机元素。</target>
        </trans-unit>
        <trans-unit id="b01e264edb042adcbae3dc53ffa04a218c33e198" translate="yes" xml:space="preserve">
          <source>Structural directives&amp;mdash;change the DOM layout by adding and removing DOM elements.</source>
          <target state="translated">结构化指令-通过添加和删除DOM元素来更改DOM布局。</target>
        </trans-unit>
        <trans-unit id="308d85bb1890fdb8ef6c304a2dd763fa3d3f93f9" translate="yes" xml:space="preserve">
          <source>Structure of Angular applications</source>
          <target state="translated">Angular应用的结构</target>
        </trans-unit>
        <trans-unit id="07a9a5236faf443426aa357fec0328d9e9d466cb" translate="yes" xml:space="preserve">
          <source>Structure routes by nesting several routes.</source>
          <target state="translated">通过嵌套几条路线来结构路线。</target>
        </trans-unit>
        <trans-unit id="14dde958744df7dbcb9c6e51cc208f4a18f03626" translate="yes" xml:space="preserve">
          <source>Structured</source>
          <target state="translated">Structured</target>
        </trans-unit>
        <trans-unit id="d7fec5be31f950094a6f4477e335eabd8c1861bc" translate="yes" xml:space="preserve">
          <source>Structured and immutable</source>
          <target state="translated">结构化和不可改变</target>
        </trans-unit>
        <trans-unit id="c64b6d8ab6a3167af6b211df05198e555a8951eb" translate="yes" xml:space="preserve">
          <source>Structures</source>
          <target state="translated">Structures</target>
        </trans-unit>
        <trans-unit id="c2ec7c3c78b23223f50b7bca6c140f83d82ecf3b" translate="yes" xml:space="preserve">
          <source>Stub method used to keep API compatible with AngularJS. This setting is configured through the LocationUpgradeModule's &lt;code&gt;&lt;a href=&quot;../../router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; method in your Angular app.</source>
          <target state="translated">用于使API与AngularJS兼容的存根方法。此设置是通过Angular应用中的LocationUpgradeModule的 &lt;code&gt;&lt;a href=&quot;../../router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; 方法配置的。</target>
        </trans-unit>
        <trans-unit id="d11ca43d4e7bb12db82d4ca1ec775d9385e44e31" translate="yes" xml:space="preserve">
          <source>Stub method used to keep API compatible with AngularJS. This setting is configured through the LocationUpgradeModule's &lt;code&gt;config&lt;/code&gt; method in your Angular app.</source>
          <target state="translated">用于使API与AngularJS兼容的存根方法。此设置是通过Angular应用中的LocationUpgradeModule的 &lt;code&gt;config&lt;/code&gt; 方法配置的。</target>
        </trans-unit>
        <trans-unit id="bcd07fedfd95e5214f741089e1d0a39e31c7b9e0" translate="yes" xml:space="preserve">
          <source>Stubbed &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; tests can confirm that a component with links and an outlet is setup properly, that the component has the links it should have, and that they are all pointing in the expected direction. These tests do not concern whether the app will succeed in navigating to the target component when the user clicks a link.</source>
          <target state="translated">残存的 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 测试可以确认是否正确设置了具有链接和插座的组件，该组件具有应有的链接，并且它们都指向预期的方向。这些测试与用户单击链接时应用是否能够成功导航到目标组件无关。</target>
        </trans-unit>
        <trans-unit id="354563d6d28e8670ae6ca88c776b6b1e603ace84" translate="yes" xml:space="preserve">
          <source>Stubbing the RouterLink and RouterOutlet is the best option for such limited testing goals. Relying on the real router would make them brittle. They could fail for reasons unrelated to the component. For example, a navigation guard could prevent an unauthorized user from visiting the &lt;code&gt;HeroListComponent&lt;/code&gt;. That's not the fault of the &lt;code&gt;AppComponent&lt;/code&gt; and no change to that component could cure the failed test.</source>
          <target state="translated">对于如此有限的测试目标，将RouterLink和RouterOutlet存根是最佳选择。依靠真实的路由器会使它们变脆。它们可能由于与组件无关的原因而失败。例如，导航员可以防止未经授权的用户访问 &lt;code&gt;HeroListComponent&lt;/code&gt; 。这不是 &lt;code&gt;AppComponent&lt;/code&gt; 的问题，对该组件的任何更改都不能解决失败的测试。</target>
        </trans-unit>
        <trans-unit id="bdbd617c17e607896ba72fd053141808cddc6b7f" translate="yes" xml:space="preserve">
          <source>Stubbing unneeded components</source>
          <target state="translated">剔除不需要的部件</target>
        </trans-unit>
        <trans-unit id="a86acaeeac75377170e5ebeec6d810b33b428d4e" translate="yes" xml:space="preserve">
          <source>Studying the &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts&quot;&gt;source code for &lt;code&gt;NgIf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; is a great way to learn more.</source>
          <target state="translated">学习&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts&quot;&gt; &lt;code&gt;NgIf&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; &lt;/a&gt;的源代码是了解更多信息的好方法。</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="8655d27a8c958b7c48581306ee9683f025d0cd25" translate="yes" xml:space="preserve">
          <source>Style 01-01</source>
          <target state="translated">风格01-01</target>
        </trans-unit>
        <trans-unit id="4aea90a1ae5f7e9d4c6650d3266329a8cecc8b43" translate="yes" xml:space="preserve">
          <source>Style 01-02</source>
          <target state="translated">风格01-02</target>
        </trans-unit>
        <trans-unit id="f55a6e154fc6932171773407a6c17fdcd900b901" translate="yes" xml:space="preserve">
          <source>Style 02-01</source>
          <target state="translated">风格02-01</target>
        </trans-unit>
        <trans-unit id="6fddbd8edac99f78150e7c1d42725d5789785492" translate="yes" xml:space="preserve">
          <source>Style 02-02</source>
          <target state="translated">风格02-02</target>
        </trans-unit>
        <trans-unit id="e83e665367400b616d297ea377dbc6119ba6cbdb" translate="yes" xml:space="preserve">
          <source>Style 02-03</source>
          <target state="translated">风格02-03</target>
        </trans-unit>
        <trans-unit id="6144b91d5b883e749f4a6dadb98b308696451257" translate="yes" xml:space="preserve">
          <source>Style 02-04</source>
          <target state="translated">风格02-04</target>
        </trans-unit>
        <trans-unit id="706d717fa1cd34d44b82ec886fa969af7dd448eb" translate="yes" xml:space="preserve">
          <source>Style 02-05</source>
          <target state="translated">风格02-05</target>
        </trans-unit>
        <trans-unit id="e5e296afaae2339d2d10b1d0d70d5ea42a6e134e" translate="yes" xml:space="preserve">
          <source>Style 02-06</source>
          <target state="translated">风格02-06</target>
        </trans-unit>
        <trans-unit id="700efbe18a84b4498ff0a5ebd5c962481af97e6c" translate="yes" xml:space="preserve">
          <source>Style 02-07</source>
          <target state="translated">风格02-07</target>
        </trans-unit>
        <trans-unit id="fa617f1fef663a84190b425a3e364b28ce517f96" translate="yes" xml:space="preserve">
          <source>Style 02-08</source>
          <target state="translated">风格02-08</target>
        </trans-unit>
        <trans-unit id="493dae10b66d2babf905fe61eeb564d21b557225" translate="yes" xml:space="preserve">
          <source>Style 02-09</source>
          <target state="translated">风格02-09</target>
        </trans-unit>
        <trans-unit id="b929d7404011b3f0cfc152ad9382a9949a1cda71" translate="yes" xml:space="preserve">
          <source>Style 02-10</source>
          <target state="translated">风格02-10</target>
        </trans-unit>
        <trans-unit id="a3ef104ae9961a0a29543ccff47fb734c689f6bc" translate="yes" xml:space="preserve">
          <source>Style 02-11</source>
          <target state="translated">风格02-11</target>
        </trans-unit>
        <trans-unit id="cf0a59581276c0fb0ac17b920d8ab64e28df0f46" translate="yes" xml:space="preserve">
          <source>Style 02-12</source>
          <target state="translated">风格02-12</target>
        </trans-unit>
        <trans-unit id="0b80a1901d32e9db876171df5848b9de86c71304" translate="yes" xml:space="preserve">
          <source>Style 04-01</source>
          <target state="translated">风格04-01</target>
        </trans-unit>
        <trans-unit id="77218883e03332c65a62466d16ddcc85105e9150" translate="yes" xml:space="preserve">
          <source>Style 04-02</source>
          <target state="translated">风格04-02</target>
        </trans-unit>
        <trans-unit id="ce385b3d475a45592807dd22eefd3c6861e19cdf" translate="yes" xml:space="preserve">
          <source>Style 04-03</source>
          <target state="translated">风格04-03</target>
        </trans-unit>
        <trans-unit id="c6882556fc4e054c2e09668d6fe2262be15b2173" translate="yes" xml:space="preserve">
          <source>Style 04-04</source>
          <target state="translated">风格04-04</target>
        </trans-unit>
        <trans-unit id="f25601cdb2f6d47d54397476b43ec628290c8813" translate="yes" xml:space="preserve">
          <source>Style 04-05</source>
          <target state="translated">风格04-05</target>
        </trans-unit>
        <trans-unit id="cd207c5b27af4094bc7fcece72048e9fe4b0b2c3" translate="yes" xml:space="preserve">
          <source>Style 04-06</source>
          <target state="translated">风格04-06</target>
        </trans-unit>
        <trans-unit id="29b1fb989c6d105f3c801e3564c0418a230b7adb" translate="yes" xml:space="preserve">
          <source>Style 04-07</source>
          <target state="translated">风格04-07</target>
        </trans-unit>
        <trans-unit id="d63bbc77247f81425c9c05859638f65b164462ef" translate="yes" xml:space="preserve">
          <source>Style 04-08</source>
          <target state="translated">风格04-08</target>
        </trans-unit>
        <trans-unit id="dca1a11207bd921006f3ac8d762e893d2d645267" translate="yes" xml:space="preserve">
          <source>Style 04-09</source>
          <target state="translated">风格04-09</target>
        </trans-unit>
        <trans-unit id="6b7381fb1b2ee37a66fe9ef9dd56806aa709ad75" translate="yes" xml:space="preserve">
          <source>Style 04-10</source>
          <target state="translated">风格04-10</target>
        </trans-unit>
        <trans-unit id="8a233863a4b876d1c19bd360a9eec6d03c089985" translate="yes" xml:space="preserve">
          <source>Style 04-11</source>
          <target state="translated">风格04-11</target>
        </trans-unit>
        <trans-unit id="a060c3d3b207a8225c19405bbbce8cbf4f36a32c" translate="yes" xml:space="preserve">
          <source>Style 04-12</source>
          <target state="translated">风格04-12</target>
        </trans-unit>
        <trans-unit id="0c7621709de22e7cba3f9615798b8f5f3a64e76b" translate="yes" xml:space="preserve">
          <source>Style 05-02</source>
          <target state="translated">风格05-02</target>
        </trans-unit>
        <trans-unit id="738649793a0b0ae075f2abf3b085c00b61e2cdf7" translate="yes" xml:space="preserve">
          <source>Style 05-03</source>
          <target state="translated">风格05-03</target>
        </trans-unit>
        <trans-unit id="6cb17f91cfef9aa5b36b073b5e5ee75f36f7144c" translate="yes" xml:space="preserve">
          <source>Style 05-04</source>
          <target state="translated">风格05-04</target>
        </trans-unit>
        <trans-unit id="c5353267445517bfdb843d1f18e524b3c9f1d89e" translate="yes" xml:space="preserve">
          <source>Style 05-12</source>
          <target state="translated">风格05-12</target>
        </trans-unit>
        <trans-unit id="81e51acb9e3b52aaf70ff5492fe23a9bdb2a285a" translate="yes" xml:space="preserve">
          <source>Style 05-13</source>
          <target state="translated">风格05-13</target>
        </trans-unit>
        <trans-unit id="72bf5c89871cf10f99b40d49149e1bdaf9e6590c" translate="yes" xml:space="preserve">
          <source>Style 05-14</source>
          <target state="translated">风格05-14</target>
        </trans-unit>
        <trans-unit id="3ea64ee61c97d914db39262c73f88bff714ab595" translate="yes" xml:space="preserve">
          <source>Style 05-15</source>
          <target state="translated">风格05-15</target>
        </trans-unit>
        <trans-unit id="238870d3a3bd622e67bfb4ac9f6ba99e117997c3" translate="yes" xml:space="preserve">
          <source>Style 05-16</source>
          <target state="translated">风格05-16</target>
        </trans-unit>
        <trans-unit id="fa326bcb9a5dc57a51e1acfae6a4dea8cbd7f445" translate="yes" xml:space="preserve">
          <source>Style 05-17</source>
          <target state="translated">风格05-17</target>
        </trans-unit>
        <trans-unit id="4ab096f0a78a037c3de35e63e70d27ce12ee3e43" translate="yes" xml:space="preserve">
          <source>Style 06-01</source>
          <target state="translated">风格06-01</target>
        </trans-unit>
        <trans-unit id="5c9da24e465d26d22cc53eb4c417f9c22c4720f5" translate="yes" xml:space="preserve">
          <source>Style 06-03</source>
          <target state="translated">风格06-03</target>
        </trans-unit>
        <trans-unit id="0f0d6f618ebd672575ae4573cea04bd000b11309" translate="yes" xml:space="preserve">
          <source>Style 07-01</source>
          <target state="translated">风格07-01</target>
        </trans-unit>
        <trans-unit id="41700c9627c1716b093148da4f4ebbefad9e7201" translate="yes" xml:space="preserve">
          <source>Style 07-02</source>
          <target state="translated">风格07-02</target>
        </trans-unit>
        <trans-unit id="2816de62afb72075811187fe54cfff1f66291ca1" translate="yes" xml:space="preserve">
          <source>Style 07-03</source>
          <target state="translated">风格07-03</target>
        </trans-unit>
        <trans-unit id="7806af9da1ab012ff76791452da2609316bfa9af" translate="yes" xml:space="preserve">
          <source>Style 07-04</source>
          <target state="translated">风格07-04</target>
        </trans-unit>
        <trans-unit id="44b3e7183c08194ef947158714922a67e94ddb8f" translate="yes" xml:space="preserve">
          <source>Style 08-01</source>
          <target state="translated">风格08-01</target>
        </trans-unit>
        <trans-unit id="0ee5f0d1efe5d21182c59dc81789adf1c4a9e43b" translate="yes" xml:space="preserve">
          <source>Style 09-01</source>
          <target state="translated">风格09-01</target>
        </trans-unit>
        <trans-unit id="0810e6e1806946bed3058d5e8a4c6ea1abae7725" translate="yes" xml:space="preserve">
          <source>Style A-01</source>
          <target state="translated">A-01型</target>
        </trans-unit>
        <trans-unit id="1efe377d1d77ee17e1305157c4de46739044c399" translate="yes" xml:space="preserve">
          <source>Style A-02</source>
          <target state="translated">A-02型</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">风格指南</target>
        </trans-unit>
        <trans-unit id="8a24de837c2eb6cdf18450f40f67b38197599a83" translate="yes" xml:space="preserve">
          <source>Style Guide: Pipe Names</source>
          <target state="translated">风格指南。管道名称</target>
        </trans-unit>
        <trans-unit id="397f6a9cc1d4c2625403eb5b5a0f669d44e66ead" translate="yes" xml:space="preserve">
          <source>Style Sanitization for &lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; and &lt;code&gt;[style.prop]&lt;/code&gt; bindings</source>
          <target state="translated">&lt;code&gt;[&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; 和 &lt;code&gt;[style.prop]&lt;/code&gt; 绑定的样式清理</target>
        </trans-unit>
        <trans-unit id="9307b7282569a9e06cf9f4b80692549de59cb8e8" translate="yes" xml:space="preserve">
          <source>Style binding</source>
          <target state="translated">风格装订</target>
        </trans-unit>
        <trans-unit id="d17d4ed499d56ddab01a94243ac75d53250a9e49" translate="yes" xml:space="preserve">
          <source>Style binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt;, followed by a dot (&lt;code&gt;.&lt;/code&gt;) and the name of a CSS style property: &lt;code&gt;[style.style-property]&lt;/code&gt;.</source>
          <target state="translated">样式绑定语法类似于属性绑定。代替括号之间的元素属性，应以前缀 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; 开头，后跟一个点（ &lt;code&gt;.&lt;/code&gt; ）和CSS样式属性的名称： &lt;code&gt;[style.style-property]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="798cb2eb99018bc816f3076a0a8bf26c5814e7f6" translate="yes" xml:space="preserve">
          <source>Style files in component metadata</source>
          <target state="translated">组件元数据中的样式文件</target>
        </trans-unit>
        <trans-unit id="ebb991554b68f911cb61aa2b97566eaaaad5a276" translate="yes" xml:space="preserve">
          <source>Style guide for Documentation contributions</source>
          <target state="translated">文件贡献风格指南</target>
        </trans-unit>
        <trans-unit id="13b3e042bcc6d7cd5e0d140224554ba252a41539" translate="yes" xml:space="preserve">
          <source>Style preprocessor options</source>
          <target state="translated">风格预处理器选项</target>
        </trans-unit>
        <trans-unit id="1aa693154d6248496022ececdb1dada7746d639d" translate="yes" xml:space="preserve">
          <source>Style scope</source>
          <target state="translated">风格范围</target>
        </trans-unit>
        <trans-unit id="db43570498a47b502419948a69d84fb9e317cd4f" translate="yes" xml:space="preserve">
          <source>Style sheets</source>
          <target state="translated">样式表</target>
        </trans-unit>
        <trans-unit id="17a92ec390194ca839debbe0378b1e9f90a4c3f5" translate="yes" xml:space="preserve">
          <source>Style sheets give your application a nice look. In AngularJS, you specify the style sheets for your entire application. As the application grows over time, the styles for the many parts of the application merge, which can cause unexpected results. In Angular, you can still define style sheets for your entire application. But now you can also encapsulate a style sheet within a specific component.</source>
          <target state="translated">样式表给你的应用程序一个漂亮的外观。在AngularJS中,你可以为你的整个应用程序指定样式表。当应用程序随着时间的推移而增长时,应用程序的许多部分的样式会合并,这可能会导致意想不到的结果。在Angular中,你仍然可以为你的整个应用程序定义样式表。但现在你也可以在一个特定的组件中封装一个样式表。</target>
        </trans-unit>
        <trans-unit id="b7a277e6e718762252d1cac6bb0b6ea9b68bdf9c" translate="yes" xml:space="preserve">
          <source>Style strings added to the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; array &lt;em&gt;must be written in CSS&lt;/em&gt; because the CLI cannot apply a preprocessor to inline styles.</source>
          <target state="translated">添加到 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; 数组的样式字符串&lt;em&gt;必须用CSS编写，&lt;/em&gt;因为CLI不能将预处理器应用于内联样式。</target>
        </trans-unit>
        <trans-unit id="e113e16bbf082f9490cbf2b44611438e1391e832" translate="yes" xml:space="preserve">
          <source>Style the heroes</source>
          <target state="translated">风格的英雄</target>
        </trans-unit>
        <trans-unit id="5eab5630440ccf019fc5dc1802d69037b944404f" translate="yes" xml:space="preserve">
          <source>Style the selected hero</source>
          <target state="translated">选定英雄的样式</target>
        </trans-unit>
        <trans-unit id="82a3d10493dce218efe0f7977bfae55ae3c0ccfb" translate="yes" xml:space="preserve">
          <source>Style vocabulary</source>
          <target state="translated">风格词汇</target>
        </trans-unit>
        <trans-unit id="47f613f4bbd7675d5feb1ce896b4d6efd80377bc" translate="yes" xml:space="preserve">
          <source>StyleUrls</source>
          <target state="translated">StyleUrls</target>
        </trans-unit>
        <trans-unit id="5c2529a7512b8456ecfa00f92d655877dd8b90b6" translate="yes" xml:space="preserve">
          <source>Styles and scripts configuration</source>
          <target state="translated">样式和脚本配置</target>
        </trans-unit>
        <trans-unit id="0edc5b2d63da3d85ebd67bd3beba07075c522b86" translate="yes" xml:space="preserve">
          <source>Styles and stylesheets identified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata are scoped to that specific component. The &lt;code&gt;heroes.component.css&lt;/code&gt; styles apply only to the &lt;code&gt;HeroesComponent&lt;/code&gt; and don't affect the outer HTML or the HTML in any other component.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 元数据中标识的样式和样式表仅适用于该特定组件。该 &lt;code&gt;heroes.component.css&lt;/code&gt; 风格只适用于 &lt;code&gt;HeroesComponent&lt;/code&gt; ，不影响外部HTML或任何其他组件的HTML。</target>
        </trans-unit>
        <trans-unit id="fd5b0bce26d4818e609d1581d3654fa0753fd8fd" translate="yes" xml:space="preserve">
          <source>Styles configuration</source>
          <target state="translated">样式配置</target>
        </trans-unit>
        <trans-unit id="1378d81e695cef4d64e37c64b8e8eff7fff2d2c2" translate="yes" xml:space="preserve">
          <source>Styles in component metadata</source>
          <target state="translated">组件元数据中的样式</target>
        </trans-unit>
        <trans-unit id="23aae4ba9cb7cd71cc0f2c7b6470f5ac5c21722b" translate="yes" xml:space="preserve">
          <source>Styling the host and child components</source>
          <target state="translated">样式化主机和子组件</target>
        </trans-unit>
        <trans-unit id="6e1cd724f97ed48d626d171bc1b8f9491fcd67e0" translate="yes" xml:space="preserve">
          <source>Subclasses</source>
          <target state="translated">Subclasses</target>
        </trans-unit>
        <trans-unit id="9ce6ba148fe8d9ab4a1efa44f043d11727e7f6ee" translate="yes" xml:space="preserve">
          <source>Sublime Text</source>
          <target state="translated">崇高的文本</target>
        </trans-unit>
        <trans-unit id="f5d46536917e62bd1be2d18f9d2c7d548fb75de6" translate="yes" xml:space="preserve">
          <source>Submit the form with &lt;code&gt;ngSubmit&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;ngSubmit&lt;/code&gt; 提交表单</target>
        </trans-unit>
        <trans-unit id="f52f8c0e6a97223779d22bf66c8e2fada6102bec" translate="yes" xml:space="preserve">
          <source>Submitting the form isn't terribly dramatic at the moment.</source>
          <target state="translated">目前提交表格并不是很有戏剧性。</target>
        </trans-unit>
        <trans-unit id="d6981f74767d6c63d6062ad21b3bdfcd0d0d6602" translate="yes" xml:space="preserve">
          <source>Subscribe</source>
          <target state="translated">Subscribe</target>
        </trans-unit>
        <trans-unit id="ad97311e7c2fb91310858358719a941b418273d5" translate="yes" xml:space="preserve">
          <source>Subscribe and listen to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices&quot;&gt;Web Push Notifications&lt;/a&gt; through Angular Service Worker.</source>
          <target state="translated">通过Angular Service Worker 订阅并收听&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices&quot;&gt;Web推送通知&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="55ffbbfe98a9e67c323baa04596ff3f3634355e1" translate="yes" xml:space="preserve">
          <source>Subscribe in &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;HeroesComponent&lt;/code&gt; 中订阅</target>
        </trans-unit>
        <trans-unit id="4147506e4124de00f100ef91b8a3f1c59c78221c" translate="yes" xml:space="preserve">
          <source>Subscribe to update notifications from the Service Worker, trigger update checks, and forcibly activate updates.</source>
          <target state="translated">订阅来自服务工作者的更新通知,触发更新检查,并强行激活更新。</target>
        </trans-unit>
        <trans-unit id="a87fcf31451c4a5845a5c94b268b44533e029a5f" translate="yes" xml:space="preserve">
          <source>Subscribes to Web Push Notifications, after requesting and receiving user permission.</source>
          <target state="translated">在请求并获得用户许可后,订阅网络推送通知。</target>
        </trans-unit>
        <trans-unit id="1e24453f7659eb1b1111775a54afd763fe517caf" translate="yes" xml:space="preserve">
          <source>Subscribes to a host element event (&lt;code&gt;click&lt;/code&gt;) with a directive/component method (&lt;code&gt;onClick&lt;/code&gt;), optionally passing an argument (&lt;code&gt;$event&lt;/code&gt;).</source>
          <target state="translated">通过指令/组件方法（ &lt;code&gt;onClick&lt;/code&gt; ）订阅主机元素事件（ &lt;code&gt;click&lt;/code&gt; ），还可以选择传递参数（ &lt;code&gt;$event&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d095583b0ad0de9ed206550de2ce051cda4763bd" translate="yes" xml:space="preserve">
          <source>Subscribes to the platform's &lt;code&gt;popState&lt;/code&gt; events.</source>
          <target state="translated">订阅平台的 &lt;code&gt;popState&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="bc85e879262a5f99c43a2b322c9fb5b8fbe5a21d" translate="yes" xml:space="preserve">
          <source>Subscribing</source>
          <target state="translated">Subscribing</target>
        </trans-unit>
        <trans-unit id="8fde48f31aff21f9652066ed6732f7e7dbae712e" translate="yes" xml:space="preserve">
          <source>Subscription</source>
          <target state="translated">Subscription</target>
        </trans-unit>
        <trans-unit id="e07e10d710390d6f19bc8d0e4fa6f86275165014" translate="yes" xml:space="preserve">
          <source>Subsequent applications that you generate in the workspace reside in the &lt;code&gt;projects/&lt;/code&gt; subfolder.</source>
          <target state="translated">您在工作空间中生成的后续应用程序位于 &lt;code&gt;projects/&lt;/code&gt; 子文件夹中。</target>
        </trans-unit>
        <trans-unit id="473fb3dae53fd356007426bcc001827eca1f4ff9" translate="yes" xml:space="preserve">
          <source>Subsequent apps that you generate in the workspace reside in the &lt;code&gt;projects/&lt;/code&gt; subfolder.</source>
          <target state="translated">您在工作区中生成的后续应用程序位于 &lt;code&gt;projects/&lt;/code&gt; 子文件夹中。</target>
        </trans-unit>
        <trans-unit id="bc7af4ebabce4f8a546ee140a3846cf69bfa6c68" translate="yes" xml:space="preserve">
          <source>Succeeds even if there was linting errors.</source>
          <target state="translated">即使有掉毛的错误,也能成功。</target>
        </trans-unit>
        <trans-unit id="c87c69d42dd464b89184cb9c765feccaddfed9cc" translate="yes" xml:space="preserve">
          <source>Such objects don't have application interfaces and therefore aren't well represented by a class. They're better represented by a token that is both unique and symbolic, a JavaScript object that has a friendly name but won't conflict with another token that happens to have the same name.</source>
          <target state="translated">这样的对象没有应用接口,因此不能很好地用一个类来表示。它们最好用一个既独特又有符号的标记来表示,一个JavaScript对象,它有一个友好的名字,但不会与另一个恰好有相同名字的标记冲突。</target>
        </trans-unit>
        <trans-unit id="55c29209f134a45a30d7eba7a07fc67d5c7d8a6b" translate="yes" xml:space="preserve">
          <source>Such partial and intermediate files need their own names. Follow the doc sample naming convention. Add a number before the file extension as illustrated here:</source>
          <target state="translated">这种部分文件和中间文件需要有自己的名字。遵循doc样本的命名惯例。在文件扩展名前加一个数字,如图所示。</target>
        </trans-unit>
        <trans-unit id="26a490bcaf4c8b593e38570b5b856dec6204c072" translate="yes" xml:space="preserve">
          <source>Such tests are easy to find.</source>
          <target state="translated">这种测试很容易找到。</target>
        </trans-unit>
        <trans-unit id="06aee9edd367cbab035bb100ff86698218a24a6c" translate="yes" xml:space="preserve">
          <source>Such tests require creating the component's host element in the browser DOM, as Angular does, and investigating the component class's interaction with the DOM as described by its template.</source>
          <target state="translated">这种测试需要像Angular那样在浏览器DOM中创建组件的宿主元素,并研究组件类与其模板描述的DOM的交互。</target>
        </trans-unit>
        <trans-unit id="5057182ef8774088bdb5234ca8a8f6c39dfa86d5" translate="yes" xml:space="preserve">
          <source>Suffix to add when computing the name of the factory module for a given module name.</source>
          <target state="translated">在计算给定模块名称的工厂模块名称时要加上的后缀。</target>
        </trans-unit>
        <trans-unit id="c694c6baead0b9fec8b7d19e3c3b3e94e68c5559" translate="yes" xml:space="preserve">
          <source>Suggested polyfills</source>
          <target state="translated">建议的多元填充物</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="617c82647428edc0b8947b00ed87b2c7615c71ce" translate="yes" xml:space="preserve">
          <source>Summary of NgModule categories</source>
          <target state="translated">NgModule类别汇总</target>
        </trans-unit>
        <trans-unit id="36a34ea7dcfc6ffbb22285c0e1b244755a431fe7" translate="yes" xml:space="preserve">
          <source>Super-constructor for all responses.</source>
          <target state="translated">所有反应的超级构造者。</target>
        </trans-unit>
        <trans-unit id="4d9b4eacf1004ed910ee4ed98ce82a901369c93e" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; subsystem.</source>
          <target state="translated">提供用于Angular &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 子系统的测试模块。</target>
        </trans-unit>
        <trans-unit id="d841e33650f585cec77c125afc74e973ec895855" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; subsystem.</source>
          <target state="translated">提供用于Angular &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 子系统的测试模块。</target>
        </trans-unit>
        <trans-unit id="045319e139a1cdf2bb45fffa08fb6bb246b89dfd" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular HTTP subsystem.</source>
          <target state="translated">为Angular HTTP子系统提供一个测试模块。</target>
        </trans-unit>
        <trans-unit id="55277d6ef9d2d3851d1d9e31c6e90e54cec4e34a" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular JIT platform-browser subsystem.</source>
          <target state="translated">为Angular JIT平台-浏览器子系统提供测试模块。</target>
        </trans-unit>
        <trans-unit id="860a571d40871f1c7221ca753643e72d71044524" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular platform server subsystem.</source>
          <target state="translated">为Angular平台服务器子系统提供测试模块。</target>
        </trans-unit>
        <trans-unit id="34c892ec60aeecded0cea68c414ec96ed4333769" translate="yes" xml:space="preserve">
          <source>Supplies a testing module for the Angular platform-browser subsystem.</source>
          <target state="translated">为Angular平台-浏览器子系统提供测试模块。</target>
        </trans-unit>
        <trans-unit id="c0ba80b3498b6fa8d9588a8fe9920e3f66104515" translate="yes" xml:space="preserve">
          <source>Supplies infrastructure for testing functionality supplied by &lt;code&gt;@angular/common&lt;/code&gt;.</source>
          <target state="translated">提供 &lt;code&gt;@angular/common&lt;/code&gt; 提供的用于测试功能的基础结构。</target>
        </trans-unit>
        <trans-unit id="f80485cb2241d9c8f4b8829fb01df6a413c2c2e8" translate="yes" xml:space="preserve">
          <source>Supplies testing functions for the AngularJS-to-Angular upgrade path.</source>
          <target state="translated">提供AngularJS到Angular升级路径的测试功能。</target>
        </trans-unit>
        <trans-unit id="ed92fa9e8a12ebddb7e4fe08847d953cf04e775b" translate="yes" xml:space="preserve">
          <source>Supply a custom provider with &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">为自定义提供程序提供 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1e6f832df69221f0aa5cf24cd67ccbfa8534afd" translate="yes" xml:space="preserve">
          <source>Supply data</source>
          <target state="translated">提供数据</target>
        </trans-unit>
        <trans-unit id="bb79f11cce2a7fd28761b6c2d36e0221260dd42f" translate="yes" xml:space="preserve">
          <source>Support adding directives to host elements</source>
          <target state="translated">支持向主机元素添加指令</target>
        </trans-unit>
        <trans-unit id="fb6bfb683b08f86999ae88758ea765b871ea0886" translate="yes" xml:space="preserve">
          <source>Support for both &lt;a href=&quot;forms&quot;&gt;template-driven&lt;/a&gt; and &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;. For information about choosing the best forms approach for your app, see &lt;a href=&quot;forms-overview&quot;&gt;Introduction to forms&lt;/a&gt;.</source>
          <target state="translated">支持&lt;a href=&quot;forms&quot;&gt;模板驱动&lt;/a&gt;&lt;a href=&quot;reactive-forms&quot;&gt;形式&lt;/a&gt;和反应形式。有关为您的应用选择最佳表单方法的信息，请参阅&lt;a href=&quot;forms-overview&quot;&gt;表单简介&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6015aea6d6a423f3219184739c58237f25d45fcf" translate="yes" xml:space="preserve">
          <source>Support for the development cycle</source>
          <target state="translated">对发展周期的支持</target>
        </trans-unit>
        <trans-unit id="372ca4c2c8a38a4b2b242eed719cb1a8e9d99f89" translate="yes" xml:space="preserve">
          <source>Support for the various Angular run-time platforms is provided by the &lt;code&gt;@angular/platform-*&lt;/code&gt; packages. These packages allow applications that make use of &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/common&lt;/code&gt; to execute in different environments by providing implementation for gathering user input and rendering UIs for the given platform. Isolating platform-specific functionality allows the developer to make platform-independent use of the rest of the framework.</source>
          <target state="translated">&lt;code&gt;@angular/platform-*&lt;/code&gt; 软件包提供了对各种Angular运行时平台的支持。这些程序包通过提供用于收集用户输入和呈现给定平台的UI的实现，允许使用 &lt;code&gt;@angular/core&lt;/code&gt; 和 &lt;code&gt;@angular/common&lt;/code&gt; 应用程序在不同的环境中执行。通过隔离特定于平台的功能，开发人员可以独立于平台使用其余框架。</target>
        </trans-unit>
        <trans-unit id="c0412188bcfb5b8097ddeac6298bca4025080b18" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; element selector was deprecated in v6. It has been deprecated to be consistent with other core Angular selectors, which are typically written in kebab-case.</source>
          <target state="translated">v6中已弃用对使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 元素选择器的支持。不建议与其他核心Angular选择器（通常以kebab-case编写）保持一致。</target>
        </trans-unit>
        <trans-unit id="830687a29f3f8ae36893b51a852df8d7e3509f45" translate="yes" xml:space="preserve">
          <source>Support for using &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; element selector has been deprecated in Angular v6 and will be removed in Angular v9.</source>
          <target state="translated">在Angular v6中已弃用了对使用 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 元素选择器的支持，在Angular v9中已将其删除。</target>
        </trans-unit>
        <trans-unit id="f00229925b0e66caebd0648fdfc095b3f90b1c43" translate="yes" xml:space="preserve">
          <source>Support for using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input property and &lt;code&gt;ngModelChange&lt;/code&gt; event with reactive form directives has been deprecated in Angular v6 and will be removed in a future version of Angular.</source>
          <target state="translated">Angular v6中已弃用对 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 输入属性和 &lt;code&gt;ngModelChange&lt;/code&gt; 事件以及反应形式指令的支持，在Angular的未来版本中将不再支持。</target>
        </trans-unit>
        <trans-unit id="a564022cdf9de9547b8c4914ac55334ba4f6035c" translate="yes" xml:space="preserve">
          <source>Support for using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input property and &lt;code&gt;ngModelChange&lt;/code&gt; event with reactive form directives was deprecated in version 6.</source>
          <target state="translated">在版本6中，不再支持将 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 输入属性和 &lt;code&gt;ngModelChange&lt;/code&gt; 事件与反应形式指令一起使用。</target>
        </trans-unit>
        <trans-unit id="4dc6f7050ef887eb8acaabcc76bf58bfae24c1a4" translate="yes" xml:space="preserve">
          <source>Support for using the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input property and &lt;code&gt;ngModelChange&lt;/code&gt; event with reactive form directives has been deprecated in Angular v6 and is scheduled for removal in a future version of Angular.</source>
          <target state="translated">Angular v6中已弃用对 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 输入属性和 &lt;code&gt;ngModelChange&lt;/code&gt; 事件以及反应形式指令的支持，并且计划在Angular的未来版本中删除它。</target>
        </trans-unit>
        <trans-unit id="c0ab9213c409bdce1f6766b7561afbb3df924eb0" translate="yes" xml:space="preserve">
          <source>Support for using the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input property and &lt;code&gt;ngModelChange&lt;/code&gt; event with reactive form directives has been deprecated in Angular v6 and will be removed in Angular v7.</source>
          <target state="translated">Angular v6中已弃用对 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 输入属性和 &lt;code&gt;ngModelChange&lt;/code&gt; 事件以及反应形式指令的支持，而在Angular v7中将不再支持。</target>
        </trans-unit>
        <trans-unit id="34ea22dd63bbc9c4be88fea09a83dfacdd1533b4" translate="yes" xml:space="preserve">
          <source>Support more macroTasks</source>
          <target state="translated">支持更多的宏任务</target>
        </trans-unit>
        <trans-unit id="a09e60728ec31e51301e3117166fddf94a8baea0" translate="yes" xml:space="preserve">
          <source>Support multiple validators by passing the functions in as an array.</source>
          <target state="translated">通过将函数以数组形式传入,支持多个验证器。</target>
        </trans-unit>
        <trans-unit id="42d644d79b7c3f0b258e0ff900434475b7495f55" translate="yes" xml:space="preserve">
          <source>Support packages</source>
          <target state="translated">支持包</target>
        </trans-unit>
        <trans-unit id="55b111d8249f52e207f12ff5fe56fb3473ed81b2" translate="yes" xml:space="preserve">
          <source>Support policy and schedule</source>
          <target state="translated">支持政策和时间表</target>
        </trans-unit>
        <trans-unit id="48012bbbd369e7cf9dbf01a37cf616f579aef634" translate="yes" xml:space="preserve">
          <source>Supported Features</source>
          <target state="translated">支持的功能</target>
        </trans-unit>
        <trans-unit id="9c185d3e1b7aa6c33b8cde226ee45b7e6534974e" translate="yes" xml:space="preserve">
          <source>Supported binary operator</source>
          <target state="translated">支持的二进制运算符</target>
        </trans-unit>
        <trans-unit id="6dc1054caa7ede6eabeaab20afa9b88a18116373" translate="yes" xml:space="preserve">
          <source>Supported classes and functions</source>
          <target state="translated">支持的类和功能</target>
        </trans-unit>
        <trans-unit id="452c87fb69e1c927c2dffbf878f867c26c6a461b" translate="yes" xml:space="preserve">
          <source>Supported decorators</source>
          <target state="translated">支持的装饰者</target>
        </trans-unit>
        <trans-unit id="a9637b3c337e189d588ceb71a8c3e0c61c7b3d62" translate="yes" xml:space="preserve">
          <source>Supported natively as of version 63. In older versions: Set the &lt;code&gt;dom.webcomponents.enabled&lt;/code&gt; and &lt;code&gt;dom.webcomponents.customelements.enabled&lt;/code&gt; preferences to true.</source>
          <target state="translated">从63版本开始本地支持。在旧版本中：将 &lt;code&gt;dom.webcomponents.enabled&lt;/code&gt; 和 &lt;code&gt;dom.webcomponents.customelements.enabled&lt;/code&gt; 首选项设置为true。</target>
        </trans-unit>
        <trans-unit id="149e59e854d1a930b197517343595cab9c83d3d5" translate="yes" xml:space="preserve">
          <source>Supported natively.</source>
          <target state="translated">原生支持。</target>
        </trans-unit>
        <trans-unit id="bb6cc835f2a9162101b9f580bc00f613a031b252" translate="yes" xml:space="preserve">
          <source>Supported prefix operator</source>
          <target state="translated">支持的前缀运算符</target>
        </trans-unit>
        <trans-unit id="6a66aec706ed285ace0836213a36cd2b9a69b52d" translate="yes" xml:space="preserve">
          <source>Supported update paths</source>
          <target state="translated">支持的更新路径</target>
        </trans-unit>
        <trans-unit id="7092a8531c4f0a36c977743d2fb6d4828df0fc89" translate="yes" xml:space="preserve">
          <source>Supported versions</source>
          <target state="translated">支持的版本</target>
        </trans-unit>
        <trans-unit id="b8f7b9582840f1b51793bdfbae923d73469958a8" translate="yes" xml:space="preserve">
          <source>Supports &lt;a href=&quot;../guide/glossary#jit&quot;&gt;JIT&lt;/a&gt; compilation and execution of Angular apps on different supported browsers.</source>
          <target state="translated">在不同支持的浏览器上支持&lt;a href=&quot;../guide/glossary#jit&quot;&gt;JIT&lt;/a&gt;编译和Angular应用执行。</target>
        </trans-unit>
        <trans-unit id="68abb1b6a421b6a057714c502175fb1e4d0785a4" translate="yes" xml:space="preserve">
          <source>Supports delivery of Angular apps on a server, for use with &lt;a href=&quot;../guide/glossary#server-side-rendering&quot;&gt;server-side rendering&lt;/a&gt; (SSR).</source>
          <target state="translated">支持在服务器上交付Angular应用，以用于&lt;a href=&quot;../guide/glossary#server-side-rendering&quot;&gt;服务器端渲染&lt;/a&gt;（SSR）。</target>
        </trans-unit>
        <trans-unit id="fb1ffb2f1d5a195313b3cdd770d1f6b7bf9c7009" translate="yes" xml:space="preserve">
          <source>Supports execution of Angular apps on different supported browsers.</source>
          <target state="translated">支持在不同支持的浏览器上执行Angular应用。</target>
        </trans-unit>
        <trans-unit id="72657c85f5b110b8ad4f655973c381d6d88dd9c3" translate="yes" xml:space="preserve">
          <source>Supports static, parameterized, redirect, and wildcard routes, as well as custom route data and resolve methods.</source>
          <target state="translated">支持静态、参数化、重定向和通配符路由,以及自定义路由数据和解析方法。</target>
        </trans-unit>
        <trans-unit id="6e64537544422a3d0dd6208919bfd88452a5d64a" translate="yes" xml:space="preserve">
          <source>Supports the upgrade path from AngularJS to Angular, allowing components and services from both systems to be used in the same application.</source>
          <target state="translated">支持从AngularJS到Angular的升级路径,允许在同一应用中使用两个系统的组件和服务。</target>
        </trans-unit>
        <trans-unit id="7011c39e6768e7218d6f19fe24834274bd8e3880" translate="yes" xml:space="preserve">
          <source>Supports the upgrade path from AngularJS to Angular, allowing components from both systems to be used in the same application.</source>
          <target state="translated">支持从AngularJS到Angular的升级路径,允许两个系统的组件在同一应用中使用。</target>
        </trans-unit>
        <trans-unit id="ffa38c192edac80816d007088a189ee1553fd813" translate="yes" xml:space="preserve">
          <source>Suppose a module requires a customized &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; that adds a special header for all Http requests. If another module elsewhere in the application also customizes &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; or merely imports the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, it could override this module's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; provider, losing the special header. The server will reject http requests from this module.</source>
          <target state="translated">假设一个模块需要一个自定义的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; ，它为所有Http请求添加一个特殊的标头。如果应用程序其他位置的另一个模块也自定义 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 或仅导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; ，则它可能会覆盖此模块的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; 提供程序，从而丢失特殊标头。服务器将拒绝来自此模块的http请求。</target>
        </trans-unit>
        <trans-unit id="02d18e71b14a468fe5b6fe81d6582fa4ff952551" translate="yes" xml:space="preserve">
          <source>Suppose a parent component navigation bar had &quot;forward&quot; and &quot;back&quot; buttons that scrolled through the list of heroes. Each click navigated imperatively to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; with the next or previous &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">假设父组件导航栏具有在英雄列表中滚动的&amp;ldquo;前进&amp;rdquo;和&amp;ldquo;后退&amp;rdquo;按钮。每次单击都将强制导航到具有下一个或上一个 &lt;code&gt;id&lt;/code&gt; 的 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73875b081ad6712e3cca37634ad81e0aabf43018" translate="yes" xml:space="preserve">
          <source>Suppose an old component depends upon the &lt;code&gt;OldLogger&lt;/code&gt; class. &lt;code&gt;OldLogger&lt;/code&gt; has the same interface as &lt;code&gt;NewLogger&lt;/code&gt;, but for some reason you can't update the old component to use it.</source>
          <target state="translated">假设旧组件依赖于 &lt;code&gt;OldLogger&lt;/code&gt; 类。 &lt;code&gt;OldLogger&lt;/code&gt; 具有相同的接口 &lt;code&gt;NewLogger&lt;/code&gt; ，但由于某些原因，你不能更新旧的组件来使用它。</target>
        </trans-unit>
        <trans-unit id="393692d189825d9307fd6c7fe80a2cd354ed6034" translate="yes" xml:space="preserve">
          <source>Suppose that the &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; had logic to manage and restore changes. That would be a pretty easy task for a simple hero tax return. In the real world, with a rich tax return data model, the change management would be tricky. You could delegate that management to a helper service, as this example does.</source>
          <target state="translated">假设 &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; 具有管理和还原更改的逻辑。对于简单的英雄退税，这将是一个非常容易的任务。在现实世界中，使用丰富的纳税申报表数据模型，变更管理将非常棘手。您可以像本示例一样将管理委派给助手服务。</target>
        </trans-unit>
        <trans-unit id="25aea682ecf4709d352723de7edbd90f7beb9d93" translate="yes" xml:space="preserve">
          <source>Suppose that you want to say that something was &quot;updated x minutes ago&quot;. In English, depending upon the number of minutes, you could display &quot;just now&quot;, &quot;one minute ago&quot;, or &quot;x minutes ago&quot; (with x being the actual number). Other languages might express the cardinality differently.</source>
          <target state="translated">假设你想说某件事情是 &quot;x分钟前更新的&quot;,在英语中,根据分钟数的不同,你可以显示 &quot;刚才&quot;、&quot;一分钟前 &quot;或 &quot;x分钟前&quot;(实际数字为x)。在英语中,根据分钟数,你可以显示 &quot;刚刚&quot;、&quot;一分钟前 &quot;或 &quot;x分钟前&quot;(x为实际数字)。其他语言可能会以不同的方式表达卡数。</target>
        </trans-unit>
        <trans-unit id="52f33491eb18bba650ee1a092238a98b0b605102" translate="yes" xml:space="preserve">
          <source>Suppose the user enters the letters &quot;abc&quot;, and then backspaces to remove them one by one. Here's what the UI displays:</source>
          <target state="translated">假设用户输入字母 &quot;abc&quot;,然后用空格逐个删除。下面是UI显示的内容。</target>
        </trans-unit>
        <trans-unit id="d7069d4f08e8837edb06ea21d283e4edd2d1b1de" translate="yes" xml:space="preserve">
          <source>Suppose we have an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element and want to know its &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">假设我们有一个 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素，并且想知道它的 &lt;code&gt;type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d699c4717131d4ec51fe6dc596be8f74574e2bad" translate="yes" xml:space="preserve">
          <source>Suppose you want to read a configuration file and then generate a form based on that configuration. If that form will need additional customization by the developer who is using your library, it might work best as a schematic. However, if the form will always be the same and not need much customization by developers, then you could create a dynamic component that takes the configuration and generates the form. In general, the more complex the customization, the more useful the schematic approach.</source>
          <target state="translated">假设你想读取一个配置文件,然后根据该配置生成一个表单。如果使用你的库的开发人员需要对该表单进行额外的定制,那么它可能作为一个示意图效果最好。但是,如果表单总是一样的,不需要开发人员进行太多的定制,那么你可以创建一个动态组件,它可以读取配置并生成表单。一般来说,定制越复杂,原理图的方法越有用。</target>
        </trans-unit>
        <trans-unit id="3c56e3107218078534c09e6533e96893d6ef445a" translate="yes" xml:space="preserve">
          <source>Suppose you want to read a configuration file and then generate a form based on that configuration. If that form will need additional customization by the user, it might work best as a schematic. However, if the forms will always be the same and not need much customization by developers, then you could create a dynamic component that takes the configuration and generates the form. In general, the more complex the customization, the more useful the schematic approach.</source>
          <target state="translated">假设你想读取一个配置文件,然后根据该配置生成一个表单。如果该表单需要用户进行额外的定制,那么它可能作为一个示意图效果最好。但是,如果表单总是一样的,不需要开发人员进行太多的定制,那么你可以创建一个动态组件,它可以读取配置并生成表单。一般来说,定制越复杂,原理图的方法越有用。</target>
        </trans-unit>
        <trans-unit id="59237b414b792a395067be846fe0e7beefa8df0b" translate="yes" xml:space="preserve">
          <source>Surely you noticed the asterisk (*) prefix to the directive name and wondered why it is necessary and what it does.</source>
          <target state="translated">你肯定注意到了指令名称的星号(*)前缀,并想知道为什么需要它,它有什么作用。</target>
        </trans-unit>
        <trans-unit id="b214d7f5503a587eb43c1ce5ab34f417045155cc" translate="yes" xml:space="preserve">
          <source>Surprisingly, the &lt;code&gt;AdminModule&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; preload. Something is blocking it.</source>
          <target state="translated">出人意料的是， &lt;code&gt;AdminModule&lt;/code&gt; 并&lt;em&gt;没有&lt;/em&gt;预装。某种东西阻止了它。</target>
        </trans-unit>
        <trans-unit id="8a925dc523db7e7f6a2babc32186c1a961796ab3" translate="yes" xml:space="preserve">
          <source>SwPush</source>
          <target state="translated">SwPush</target>
        </trans-unit>
        <trans-unit id="9f27068dde7716de3ec4b61fb1f7fbb0fa22a06e" translate="yes" xml:space="preserve">
          <source>SwRegistrationOptions</source>
          <target state="translated">SwRegistrationOptions</target>
        </trans-unit>
        <trans-unit id="79b152292931b9029acf6214e3a35f2f497eb2ba" translate="yes" xml:space="preserve">
          <source>SwUpdate</source>
          <target state="translated">SwUpdate</target>
        </trans-unit>
        <trans-unit id="12ff3885d54d4fd6b48e48b47e4fa9d91086d058" translate="yes" xml:space="preserve">
          <source>Switch directives work as well with native elements and web components too. For example, you could replace the &lt;code&gt;&amp;lt;app-best-item&amp;gt;&lt;/code&gt; switch case with the following.</source>
          <target state="translated">切换指令也可以与本机元素和Web组件一起使用。例如，您可以用以下内容替换 &lt;code&gt;&amp;lt;app-best-item&amp;gt;&lt;/code&gt; 开关盒。</target>
        </trans-unit>
        <trans-unit id="33234fb80d85cf56feb93d467d387491c1b2475b" translate="yes" xml:space="preserve">
          <source>Switch the bootstrap method of the application from the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to the Angular way.</source>
          <target state="translated">将应用程序的引导方法从 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 切换到Angular方式。</target>
        </trans-unit>
        <trans-unit id="f6b6874ca57485e6385c6bf8186046e4a67f2559" translate="yes" xml:space="preserve">
          <source>Switching to &lt;em&gt;production mode&lt;/em&gt; makes it run faster by disabling development specific checks such as the dual change detection cycles.</source>
          <target state="translated">通过禁用特定于开发的检查（例如双重变更检测周期），切换到&lt;em&gt;生产模式&lt;/em&gt;可以使其运行更快。</target>
        </trans-unit>
        <trans-unit id="7f052c63532052c45dde829915673716b21669b2" translate="yes" xml:space="preserve">
          <source>Switching to TypeScript</source>
          <target state="translated">切换到TypeScript</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="bf651e969e01eb1f873351e5967dd48f8903f1bb" translate="yes" xml:space="preserve">
          <source>Symbol Name</source>
          <target state="translated">符号名称</target>
        </trans-unit>
        <trans-unit id="0ffab2f658ffa680e2c69e9b420273e89027867e" translate="yes" xml:space="preserve">
          <source>Symbol reference expected</source>
          <target state="translated">符号参考预期</target>
        </trans-unit>
        <trans-unit id="f3494e771ca3509c91264f0e82dd38b796ebd086" translate="yes" xml:space="preserve">
          <source>Symbol used between time units. Example: 10:52</source>
          <target state="translated">时间单位之间使用的符号。例如:10:52</target>
        </trans-unit>
        <trans-unit id="e40de653307a889667fd3b8b60322928538d73e9" translate="yes" xml:space="preserve">
          <source>Symbols and file names</source>
          <target state="translated">符号和文件名</target>
        </trans-unit>
        <trans-unit id="6eb4870d40315c26b4100eb0b4abc30c88c7e0eb" translate="yes" xml:space="preserve">
          <source>Symbols that can be used to replace placeholders in number patterns. Examples are based on &lt;code&gt;en-US&lt;/code&gt; values.</source>
          <target state="translated">可用于替换数字模式中占位符的符号。示例基于 &lt;code&gt;en-US&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="8a845c66b8aa0725ad837577ee6ba75ba5395509" translate="yes" xml:space="preserve">
          <source>Synchronizes a standalone &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">将独立的 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例同步到表单控件元素。</target>
        </trans-unit>
        <trans-unit id="1fe6fb70ed7194ea3e15cef6ca6b4a5a15031aa7" translate="yes" xml:space="preserve">
          <source>Synchronizes a standalone &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">将独立的 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例同步到表单控件元素。</target>
        </trans-unit>
        <trans-unit id="77c61919f7c0335c38d9155372ee85055a736cc1" translate="yes" xml:space="preserve">
          <source>Synchronous</source>
          <target state="translated">Synchronous</target>
        </trans-unit>
        <trans-unit id="81fcba9c890b5b9df0951a561afa635cb63d6429" translate="yes" xml:space="preserve">
          <source>Synchronous tests</source>
          <target state="translated">同步测试</target>
        </trans-unit>
        <trans-unit id="efa1ae6c647ae04a352ce83e8b956e4548c0a09f" translate="yes" xml:space="preserve">
          <source>Synchronous validator function composed of all the synchronous validators registered with this directive.</source>
          <target state="translated">由该指令注册的所有同步验证器组成的同步验证器函数。</target>
        </trans-unit>
        <trans-unit id="51c06766f034703a307b97a685afb1562f8e64c2" translate="yes" xml:space="preserve">
          <source>Syncs &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a form control element by name.</source>
          <target state="translated">通过名称将现有 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例中的 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 同步到表单控件元素。</target>
        </trans-unit>
        <trans-unit id="f961f76d72f8572cbf883b0eda6d37d9322f25ac" translate="yes" xml:space="preserve">
          <source>Syncs a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a form control element by name.</source>
          <target state="translated">通过名称将现有 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 中的 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 同步到表单控件元素。</target>
        </trans-unit>
        <trans-unit id="8cd38404d1df6db7a6fae66425bda9b4e3309919" translate="yes" xml:space="preserve">
          <source>Syncs a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; in an existing &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a form control element by name.</source>
          <target state="translated">通过名称将现有 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 中的 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 同步到表单控件元素。</target>
        </trans-unit>
        <trans-unit id="086c4672a7169938b2a6514a98e7ed9e01527448" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">将嵌套的 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 实例同步到DOM元素。</target>
        </trans-unit>
        <trans-unit id="fc865b5e1817fe14c0c7ea54ca007f535109e025" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">将嵌套的 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例同步到DOM元素。</target>
        </trans-unit>
        <trans-unit id="ba2e022b2265fa63e13b98eafe19811e46520332" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">将嵌套的 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 同步到DOM元素。</target>
        </trans-unit>
        <trans-unit id="70738eb6d2e19d76da3cfc549c9c13b9312021b2" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">将嵌套的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 同步到DOM元素。</target>
        </trans-unit>
        <trans-unit id="61af0c00422dee458259702f4176eec58c0c8042" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">将嵌套的 &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 同步到DOM元素。</target>
        </trans-unit>
        <trans-unit id="e43e097926a53a2908c4af6cd3bbae1f671e4adb" translate="yes" xml:space="preserve">
          <source>Syncs a nested &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">将嵌套的 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 同步到DOM元素。</target>
        </trans-unit>
        <trans-unit id="ad27b48f5dbc27604bca1812e101c55e46e2eee1" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">将独立的 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例同步到表单控件元素。</target>
        </trans-unit>
        <trans-unit id="fc68ea9b2876f7990354e54d126dd4bfe6d18749" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">将独立的 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例同步到表单控件元素。</target>
        </trans-unit>
        <trans-unit id="7e74270b6f12da6ecbf8b3bf65beff6d58cc992b" translate="yes" xml:space="preserve">
          <source>Syncs a standalone &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a form control element.</source>
          <target state="translated">将独立的 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例同步到表单控件元素。</target>
        </trans-unit>
        <trans-unit id="1172a5b10335976e2b7c9c3fdc13f55d23facb32" translate="yes" xml:space="preserve">
          <source>Syncs an existing &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">将现有的 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例同步到DOM元素。</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="3e2ad7607ba4c7d34af5aba42d88e71b8d7b2d5d" translate="yes" xml:space="preserve">
          <source>Syntax Examples</source>
          <target state="translated">语法示例</target>
        </trans-unit>
        <trans-unit id="81b08f26e2d68214bb4f1a772ea8cdfa473815a1" translate="yes" xml:space="preserve">
          <source>Syntax examples</source>
          <target state="translated">语法示例</target>
        </trans-unit>
        <trans-unit id="6691b44362a007fed00597742195f79ce997ae58" translate="yes" xml:space="preserve">
          <source>SystemJsNgModuleLoader</source>
          <target state="translated">SystemJsNgModuleLoader</target>
        </trans-unit>
        <trans-unit id="1ed04efd0b8e3b6249919e01cdc720a8e8ecf639" translate="yes" xml:space="preserve">
          <source>SystemJsNgModuleLoaderConfig</source>
          <target state="translated">SystemJsNgModuleLoaderConfig</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="08e80e877114a02316e2a85c727dc2ec2e8d050b" translate="yes" xml:space="preserve">
          <source>TRANSLATIONS</source>
          <target state="translated">TRANSLATIONS</target>
        </trans-unit>
        <trans-unit id="fb3e2ec398b2e2de9887ef22a66c4a02e397504f" translate="yes" xml:space="preserve">
          <source>TRANSLATIONS_FORMAT</source>
          <target state="translated">TRANSLATIONS_FORMAT</target>
        </trans-unit>
        <trans-unit id="bd652fbce1c3cb7239b3c2d66f09ef88cef2bb2f" translate="yes" xml:space="preserve">
          <source>Tab-pane example</source>
          <target state="translated">标签页示例</target>
        </trans-unit>
        <trans-unit id="1a428989bd13dceabd89b698d9fa38eb8a0d175c" translate="yes" xml:space="preserve">
          <source>Table of contents</source>
          <target state="translated">目录</target>
        </trans-unit>
        <trans-unit id="193daf137ed8b89de36d47c3df5fd8f66c0e1d14" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="translated">Tables</target>
        </trans-unit>
        <trans-unit id="4bddf5a71780ecc0e28e12eabc19502b8eec1d47" translate="yes" xml:space="preserve">
          <source>Tagged template expressions are not supported</source>
          <target state="translated">不支持标签模板表达式</target>
        </trans-unit>
        <trans-unit id="b934954a57aa53ca1df92279825e0d4c54b36857" translate="yes" xml:space="preserve">
          <source>Take a closer look at the methods in &lt;code&gt;ad-banner.component.ts&lt;/code&gt;.</source>
          <target state="translated">仔细查看 &lt;code&gt;ad-banner.component.ts&lt;/code&gt; 中的方法。</target>
        </trans-unit>
        <trans-unit id="eac79b3b60173923dd4dec55995d0549258112a1" translate="yes" xml:space="preserve">
          <source>Take care when writing a component that inherits from another component. If the base component has injected dependencies, you must re-provide and re-inject them in the derived class and then pass them down to the base class through the constructor.</source>
          <target state="translated">在编写一个从另一个组件继承的组件时要小心。如果基类组件已经注入了依赖关系,你必须在派生类中重新提供和注入这些依赖关系,然后通过构造函数将它们传递给基类。</target>
        </trans-unit>
        <trans-unit id="959d7ee2d7b3d044cad9c2f02a2ffab28937e75a" translate="yes" xml:space="preserve">
          <source>Take it a step further. Consider the following router link that navigates from the root of the application down to the &lt;em&gt;Dragon Crisis&lt;/em&gt;:</source>
          <target state="translated">更进一步。考虑以下路由器链接，该链接从应用程序的根目录导航到&lt;em&gt;Dragon Crisis&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="5e1997f28885ce15e075eba3fa736d8419f8699e" translate="yes" xml:space="preserve">
          <source>Take the final step and detach the admin feature set from the main application. The root &lt;code&gt;AppModule&lt;/code&gt; must neither load nor reference the &lt;code&gt;AdminModule&lt;/code&gt; or its files.</source>
          <target state="translated">采取最后一步，并从主应用程序中分离管理功能集。根 &lt;code&gt;AppModule&lt;/code&gt; 既不能加载也不能引用 &lt;code&gt;AdminModule&lt;/code&gt; 或其文件。</target>
        </trans-unit>
        <trans-unit id="fd68b9b389e7f5bea52a02f84945ec9ad71bd331" translate="yes" xml:space="preserve">
          <source>Take the following actions on the &lt;strong&gt;Name&lt;/strong&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; box, and observe which classes appear.</source>
          <target state="translated">在&amp;ldquo;&lt;strong&gt;名称&lt;/strong&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 框中执行以下操作，并观察出现了哪些类。</target>
        </trans-unit>
        <trans-unit id="e561ddf5a7dab6002aff68f7f2cbac99e4ca5385" translate="yes" xml:space="preserve">
          <source>Take the relevant parts of the crisis retrieval logic in &lt;code&gt;CrisisDetailComponent.ngOnInit&lt;/code&gt; and move them into the &lt;code&gt;CrisisDetailResolverService&lt;/code&gt;. Import the &lt;code&gt;Crisis&lt;/code&gt; model, &lt;code&gt;CrisisService&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; so you can navigate elsewhere if you can't fetch the crisis.</source>
          <target state="translated">在 &lt;code&gt;CrisisDetailComponent.ngOnInit&lt;/code&gt; 中获取危机检索逻辑的相关部分，然后将其移入 &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; 中。导入 &lt;code&gt;Crisis&lt;/code&gt; 模型， &lt;code&gt;CrisisService&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; ,以便在无法获取危机的情况下可以导航到其他地方。</target>
        </trans-unit>
        <trans-unit id="b5ea73c38525ab2fdecbff1c0aa0160e994a362d" translate="yes" xml:space="preserve">
          <source>Takes an array of &lt;a href=&quot;iterabledifferfactory&quot;&gt;&lt;code&gt;IterableDifferFactory&lt;/code&gt;&lt;/a&gt; and returns a provider used to extend the inherited &lt;a href=&quot;iterablediffers&quot;&gt;&lt;code&gt;IterableDiffers&lt;/code&gt;&lt;/a&gt; instance with the provided factories and return a new &lt;a href=&quot;iterablediffers&quot;&gt;&lt;code&gt;IterableDiffers&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">获取一个&lt;a href=&quot;iterabledifferfactory&quot;&gt; &lt;code&gt;IterableDifferFactory&lt;/code&gt; &lt;/a&gt;数组，并返回一个提供程序，该提供程序用于使用提供的工厂扩展继承的&lt;a href=&quot;iterablediffers&quot;&gt; &lt;code&gt;IterableDiffers&lt;/code&gt; &lt;/a&gt;实例，并返回一个新的&lt;a href=&quot;iterablediffers&quot;&gt; &lt;code&gt;IterableDiffers&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="1783048e5410fe461b1992e43a0627a2db079105" translate="yes" xml:space="preserve">
          <source>Takes an array of &lt;a href=&quot;keyvaluedifferfactory&quot;&gt;&lt;code&gt;KeyValueDifferFactory&lt;/code&gt;&lt;/a&gt; and returns a provider used to extend the inherited &lt;a href=&quot;keyvaluediffers&quot;&gt;&lt;code&gt;KeyValueDiffers&lt;/code&gt;&lt;/a&gt; instance with the provided factories and return a new &lt;a href=&quot;keyvaluediffers&quot;&gt;&lt;code&gt;KeyValueDiffers&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">获取一个&lt;a href=&quot;keyvaluedifferfactory&quot;&gt; &lt;code&gt;KeyValueDifferFactory&lt;/code&gt; &lt;/a&gt;数组，并返回一个提供程序，该提供程序用于使用提供的工厂扩展继承的&lt;a href=&quot;keyvaluediffers&quot;&gt; &lt;code&gt;KeyValueDiffers&lt;/code&gt; &lt;/a&gt;实例，并返回一个新的&lt;a href=&quot;keyvaluediffers&quot;&gt; &lt;code&gt;KeyValueDiffers&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="5a019a610b764a5ac0661621fc04397adf8ab98b" translate="yes" xml:space="preserve">
          <source>Takes the name of the project, as specified in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file. When a project name is not supplied, it will execute for all projects.</source>
          <target state="translated">获取在 &lt;code&gt;angular.json&lt;/code&gt; 工作空间配置文件的 &lt;code&gt;projects&lt;/code&gt; 部分中指定的项目名称。如果未提供项目名称，它将对所有项目执行。</target>
        </trans-unit>
        <trans-unit id="20daeff082d03a0b38c83ac26093ddda49f24ad0" translate="yes" xml:space="preserve">
          <source>Talk to the server through a service</source>
          <target state="translated">通过服务与服务器对话</target>
        </trans-unit>
        <trans-unit id="9d79ab61a4348e4625bb78bbbf19b6ed3b9efae8" translate="yes" xml:space="preserve">
          <source>Talking to DOM API directly isn't a best practice.</source>
          <target state="translated">直接与DOM API对话并不是一个最好的做法。</target>
        </trans-unit>
        <trans-unit id="31cc6a243c52473560fc05d841db5aeaed55aeb4" translate="yes" xml:space="preserve">
          <source>Tame the complexity with a &lt;code&gt;Page&lt;/code&gt; class that handles access to component properties and encapsulates the logic that sets them.</source>
          <target state="translated">通过 &lt;code&gt;Page&lt;/code&gt; 类处理复杂性，以处理对组件属性的访问并封装设置它们的逻辑。</target>
        </trans-unit>
        <trans-unit id="98d70538f3b6756483784e61cbff4af80626f263" translate="yes" xml:space="preserve">
          <source>Tap into the Observable</source>
          <target state="translated">进入可观察的领域</target>
        </trans-unit>
        <trans-unit id="61ad50a9b9189cc3cf1874568e35e7901ff4c982" translate="yes" xml:space="preserve">
          <source>Target</source>
          <target state="translated">Target</target>
        </trans-unit>
        <trans-unit id="ae9b707e7a77c61b2721b8988c5d55a82eceb725" translate="yes" xml:space="preserve">
          <source>Target configuration</source>
          <target state="translated">目标配置</target>
        </trans-unit>
        <trans-unit id="a14b9e2d8db8b39d7783f3b50bdd3cd885de75a2" translate="yes" xml:space="preserve">
          <source>Target event</source>
          <target state="translated">目标事件</target>
        </trans-unit>
        <trans-unit id="e30cbaa2faccc704914fd3fc89ef1c63d8bda97b" translate="yes" xml:space="preserve">
          <source>Target strings</source>
          <target state="translated">目标字符串</target>
        </trans-unit>
        <trans-unit id="2e46f5c0d09cedf26b72fc0ef1be54d1d8560002" translate="yes" xml:space="preserve">
          <source>Target to extract from.</source>
          <target state="translated">要提取的目标:</target>
        </trans-unit>
        <trans-unit id="faf4691c6436e38baa1090283557c861280888fc" translate="yes" xml:space="preserve">
          <source>Target to serve.</source>
          <target state="translated">目标来服务。</target>
        </trans-unit>
        <trans-unit id="00830f9fc21a74f272379fb547328f3109f36ad9" translate="yes" xml:space="preserve">
          <source>Targets are defined in the &lt;code&gt;angular.json&lt;/code&gt;&lt;a href=&quot;workspace-config&quot;&gt;CLI configuration file&lt;/a&gt;. A target specifies the builder to use, its default options configuration, and named alternative configurations. The Architect tool uses the target definition to resolve input options for a given run.</source>
          <target state="translated">目标在 &lt;code&gt;angular.json&lt;/code&gt; &lt;a href=&quot;workspace-config&quot;&gt;CLI配置文件&lt;/a&gt;中定义。目标指定要使用的构建器，其缺省选项配置和命名的替代配置。Architect工具使用目标定义来解析给定运行的输入选项。</target>
        </trans-unit>
        <trans-unit id="7bb0ddf9221c03b806b03c209e8366000124aa15" translate="yes" xml:space="preserve">
          <source>Task</source>
          <target state="translated">Task</target>
        </trans-unit>
        <trans-unit id="73418a3fdba46d16932dc2fc9afcd9d8987e56c9" translate="yes" xml:space="preserve">
          <source>Teach &lt;em&gt;AuthGuard&lt;/em&gt; to authenticate</source>
          <target state="translated">教&lt;em&gt;AuthGuard&lt;/em&gt;进行身份验证</target>
        </trans-unit>
        <trans-unit id="25507d522fc8f4937e463f4125763af49129dda6" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; results in a route hit when the &lt;em&gt;remaining&lt;/em&gt;, unmatched segments of the URL match &lt;code&gt;''&lt;/code&gt;. In this example, the redirect is in a top level route so the &lt;em&gt;remaining&lt;/em&gt; URL and the &lt;em&gt;entire&lt;/em&gt; URL are the same thing.</source>
          <target state="translated">从技术上讲，当URL 的&lt;em&gt;其余未&lt;/em&gt;匹配段匹配 &lt;code&gt;''&lt;/code&gt; 时， &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt; = '&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; 导致路由命中。在此示例中，重定向位于顶层路由中，因此&lt;em&gt;其余&lt;/em&gt; URL和&lt;em&gt;整个&lt;/em&gt; URL是同一件事。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="adb6801c546ab3dd633511893d9730df571b8a42" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;pathMatch = 'full'&lt;/code&gt; results in a route hit when the &lt;em&gt;remaining&lt;/em&gt;, unmatched segments of the URL match &lt;code&gt;''&lt;/code&gt;. In this example, the redirect is in a top level route so the &lt;em&gt;remaining&lt;/em&gt; URL and the &lt;em&gt;entire&lt;/em&gt; URL are the same thing.</source>
          <target state="translated">从技术上讲，当URL的&lt;em&gt;其余未&lt;/em&gt;匹配段匹配 &lt;code&gt;''&lt;/code&gt; 时， &lt;code&gt;pathMatch = 'full'&lt;/code&gt; 导致路由命中。在此示例中，重定向位于顶层路由中，因此&lt;em&gt;其余&lt;/em&gt;URL和&lt;em&gt;整个&lt;/em&gt;URL是同一件事。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="00a93838e750a0730a8d6f5c1fedce685237d2d9" translate="yes" xml:space="preserve">
          <source>Technically, Angular is matching the name to a directive &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, one of the property names listed in the directive's &lt;code&gt;inputs&lt;/code&gt; array or a property decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;. Such inputs map to the directive's own properties.</source>
          <target state="translated">从技术上讲，Angular会将名称与指令 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 匹配，该指令是指令的 &lt;code&gt;inputs&lt;/code&gt; 数组中列出的属性名称之一，还是用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰的属性。这样的输入映射到指令自身的属性。</target>
        </trans-unit>
        <trans-unit id="998980bf1abaab97ed80569753b38d095b70a64f" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; that you want the full response with the &lt;code&gt;observe&lt;/code&gt; option of the &lt;code&gt;get()&lt;/code&gt; method:</source>
          <target state="translated">使用 &lt;code&gt;get()&lt;/code&gt; 方法的 &lt;code&gt;observe&lt;/code&gt; 选项告诉 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 您想要完整的响应：</target>
        </trans-unit>
        <trans-unit id="b63c149f79d0f3eff56cd6ac95c7fc7cf404954e" translate="yes" xml:space="preserve">
          <source>Tell &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; that you want the full response with the &lt;code&gt;observe&lt;/code&gt; option:</source>
          <target state="translated">通过 &lt;code&gt;observe&lt;/code&gt; 选项告诉 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 您想要完整的响应：</target>
        </trans-unit>
        <trans-unit id="e72e5c26ac0705579a0a676c6f42c12b1eaa9288" translate="yes" xml:space="preserve">
          <source>Tell Visual Studio how to handle requests for route app pages by adding these rewrite rules near the bottom of the &lt;code&gt;web.config&lt;/code&gt;:</source>
          <target state="translated">通过在 &lt;code&gt;web.config&lt;/code&gt; 底部附近添加以下重写规则，告诉Visual Studio如何处理对路由应用程序页面的请求：</target>
        </trans-unit>
        <trans-unit id="fd2a05c99f33c07757e85e16590f2a556e55c4be" translate="yes" xml:space="preserve">
          <source>Tells the router if this URL should be processed.</source>
          <target state="translated">告诉路由器是否应该处理这个URL。</target>
        </trans-unit>
        <trans-unit id="a732bd01a721431b70704355d2b67249c978ef6b" translate="yes" xml:space="preserve">
          <source>Template &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;reference&lt;/em&gt; variable names have their own namespaces. The &lt;code&gt;hero&lt;/code&gt; in &lt;code&gt;let hero&lt;/code&gt; is never the same variable as the &lt;code&gt;hero&lt;/code&gt; declared as &lt;code&gt;#hero&lt;/code&gt;.</source>
          <target state="translated">模板&lt;em&gt;输入&lt;/em&gt;和&lt;em&gt;引用&lt;/em&gt;变量名称具有其自己的名称空间。该 &lt;code&gt;hero&lt;/code&gt; 在 &lt;code&gt;let hero&lt;/code&gt; 从来都不是相同的变量作为 &lt;code&gt;hero&lt;/code&gt; 声明为 &lt;code&gt;#hero&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="efb3147068725b40c3436e7283942bba6c112bbf" translate="yes" xml:space="preserve">
          <source>Template Syntax</source>
          <target state="translated">模板语法</target>
        </trans-unit>
        <trans-unit id="fa0b782eed89b03079da5213bda92d328c3427f9" translate="yes" xml:space="preserve">
          <source>Template basics</source>
          <target state="translated">模板基础知识</target>
        </trans-unit>
        <trans-unit id="a1af2aeaf6c6487cc178cd2993fe7b1850971a31" translate="yes" xml:space="preserve">
          <source>Template context names take precedence over component context names. In &lt;code&gt;deleteHero(hero)&lt;/code&gt; above, the &lt;code&gt;hero&lt;/code&gt; is the template input variable, not the component's &lt;code&gt;hero&lt;/code&gt; property.</source>
          <target state="translated">模板上下文名称优先于组件上下文名称。在上面的 &lt;code&gt;deleteHero(hero)&lt;/code&gt; 中， &lt;code&gt;hero&lt;/code&gt; 是模板输入变量，而不是组件的 &lt;code&gt;hero&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="e2ef821fc07a52669de040a8c5ce50e04cb09d46" translate="yes" xml:space="preserve">
          <source>Template context names take precedence over component context names. In the preceding &lt;code&gt;deleteHero(hero)&lt;/code&gt;, the &lt;code&gt;hero&lt;/code&gt; is the template input variable, not the component's &lt;code&gt;hero&lt;/code&gt; property.</source>
          <target state="translated">模板上下文名称优先于组件上下文名称。在前面的 &lt;code&gt;deleteHero(hero)&lt;/code&gt; 中， &lt;code&gt;hero&lt;/code&gt; 是模板输入变量，而不是组件的 &lt;code&gt;hero&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="966e03574060cf4a9841a3250497825600ba22a4" translate="yes" xml:space="preserve">
          <source>Template directives</source>
          <target state="translated">模板指令</target>
        </trans-unit>
        <trans-unit id="22f6072957722cb25d4ed1dbd7d78214be5c501f" translate="yes" xml:space="preserve">
          <source>Template expression operators</source>
          <target state="translated">模板表达式运算符</target>
        </trans-unit>
        <trans-unit id="2f36556182fc7cb18248ad8e7e7c234fbd3994a2" translate="yes" xml:space="preserve">
          <source>Template expressions</source>
          <target state="translated">模板表达式</target>
        </trans-unit>
        <trans-unit id="b04a51d2287d24d74cc9ae7ed21f0d60df535ade" translate="yes" xml:space="preserve">
          <source>Template expressions cannot refer to anything in the global namespace, except &lt;code&gt;undefined&lt;/code&gt;. They can't refer to &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;. Additionally, they can't call &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;Math.max()&lt;/code&gt; and they are restricted to referencing members of the expression context.</source>
          <target state="translated">模板表达式不能引用全局命名空间中的任何内容，除非 &lt;code&gt;undefined&lt;/code&gt; 除外。他们不能引用 &lt;code&gt;window&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 。此外，它们不能调用 &lt;code&gt;console.log()&lt;/code&gt; 或 &lt;code&gt;Math.max()&lt;/code&gt; ,并且只能引用表达式上下文的成员。</target>
        </trans-unit>
        <trans-unit id="d1f486b8ae6d63cd2e8a77488ce1d81790f14937" translate="yes" xml:space="preserve">
          <source>Template expressions cannot refer to anything in the global namespace, except &lt;code&gt;undefined&lt;/code&gt;. They can't refer to &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;document&lt;/code&gt;. Additionally, they can't call &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;Math.max()&lt;/code&gt; and they are restricted to referencing members of the expression context.</source>
          <target state="translated">模板表达式不能引用全局命名空间中的任何内容，除非 &lt;code&gt;undefined&lt;/code&gt; 除外。他们不能引用 &lt;code&gt;window&lt;/code&gt; 或 &lt;code&gt;document&lt;/code&gt; 。此外，它们不能调用 &lt;code&gt;console.log()&lt;/code&gt; 或 &lt;code&gt;Math.max()&lt;/code&gt; ,并且只能引用表达式上下文的成员。</target>
        </trans-unit>
        <trans-unit id="f2d8f3b4a1d8af00d592cfd96bb7560d9f5866ed" translate="yes" xml:space="preserve">
          <source>Template inline or template file?</source>
          <target state="translated">模板内联还是模板文件?</target>
        </trans-unit>
        <trans-unit id="793aeab565d46f4d09daa487f15eafb8d01c9f1b" translate="yes" xml:space="preserve">
          <source>Template inline styles</source>
          <target state="translated">模板内联样式</target>
        </trans-unit>
        <trans-unit id="d62c70e2c1bef2a7459f5c8ca8f10edf6b1dfe3a" translate="yes" xml:space="preserve">
          <source>Template input variable</source>
          <target state="translated">模板输入变量</target>
        </trans-unit>
        <trans-unit id="f17cb990d8b43df9e431abefc871bb8bdc3335a8" translate="yes" xml:space="preserve">
          <source>Template input variables</source>
          <target state="translated">模板输入变量</target>
        </trans-unit>
        <trans-unit id="276d9c745b9dcc1832f7aa2ab10c8b5f8828a8c0" translate="yes" xml:space="preserve">
          <source>Template link tags</source>
          <target state="translated">模板链接标签</target>
        </trans-unit>
        <trans-unit id="71806c9bd79ddb04621f77d670bf1aba53662c4e" translate="yes" xml:space="preserve">
          <source>Template options</source>
          <target state="translated">模板选项</target>
        </trans-unit>
        <trans-unit id="110185098cd1b2e55b879ad1f4d0ed2e6537d738" translate="yes" xml:space="preserve">
          <source>Template reference variable considerations</source>
          <target state="translated">模板参考变量注意事项</target>
        </trans-unit>
        <trans-unit id="7702b681e94fccaedb827ca41486c5be08c500af" translate="yes" xml:space="preserve">
          <source>Template reference variables</source>
          <target state="translated">模板参考变量</target>
        </trans-unit>
        <trans-unit id="a8e4799378055749eb9da93d9510e6a7d58a3f24" translate="yes" xml:space="preserve">
          <source>Template reference variables (&lt;code&gt;#var&lt;/code&gt;)</source>
          <target state="translated">模板参考变量（ &lt;code&gt;#var&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2af0573e0dd90a3ab5f9e206a130e358bd371c6e" translate="yes" xml:space="preserve">
          <source>Template statements</source>
          <target state="translated">模板声明</target>
        </trans-unit>
        <trans-unit id="187d8a66461e2c39e2a31d60af9b4948131c5101" translate="yes" xml:space="preserve">
          <source>Template statements are methods or properties that you can use in your HTML to respond to user events. With template statements, your application can engage users through actions such as displaying dynamic content or submitting forms.</source>
          <target state="translated">模板语句是您可以在HTML中使用的方法或属性,以响应用户事件。通过模板语句,您的应用程序可以通过显示动态内容或提交表单等操作吸引用户。</target>
        </trans-unit>
        <trans-unit id="5d2b93ac612841845d0661b85c29eb2b1cd1cd29" translate="yes" xml:space="preserve">
          <source>Template statements cannot refer to anything in the global namespace. They can't refer to &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;. They can't call &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;Math.max&lt;/code&gt;.</source>
          <target state="translated">模板语句不能引用全局名称空间中的任何内容。他们不能引用 &lt;code&gt;window&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 。他们无法调用 &lt;code&gt;console.log&lt;/code&gt; 或 &lt;code&gt;Math.max&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2e4c3e156daaa11223357c6c7fee079f5ca4d6c" translate="yes" xml:space="preserve">
          <source>Template statements have side effects</source>
          <target state="translated">模板语句有副作用</target>
        </trans-unit>
        <trans-unit id="dd88988e24117f6f25330c54600c109c783b9beb" translate="yes" xml:space="preserve">
          <source>Template syntax</source>
          <target state="translated">模板语法</target>
        </trans-unit>
        <trans-unit id="89aee637286de733fbf004914edfe700df91d5ca" translate="yes" xml:space="preserve">
          <source>Template translations</source>
          <target state="translated">模板翻译</target>
        </trans-unit>
        <trans-unit id="1b8d2b73b52c3fc7fa7a25ba211188746f45a196" translate="yes" xml:space="preserve">
          <source>Template type checking</source>
          <target state="translated">模板类型检查</target>
        </trans-unit>
        <trans-unit id="2199cac1a49cc0b5bc0238a44ca609a8fdc777e0" translate="yes" xml:space="preserve">
          <source>Template validation produces error messages when a type error is detected in a template binding expression, similar to how type errors are reported by the TypeScript compiler against code in a &lt;code&gt;.ts&lt;/code&gt; file.</source>
          <target state="translated">当在模板绑定表达式中检测到类型错误时，模板验证会产生错误消息，类似于TypeScript编译器根据 &lt;code&gt;.ts&lt;/code&gt; 文件中的代码报告类型错误的方式。</target>
        </trans-unit>
        <trans-unit id="a05afb3e2a0b85002981023973fd725884721e1f" translate="yes" xml:space="preserve">
          <source>Template variable references</source>
          <target state="translated">模板变量引用</target>
        </trans-unit>
        <trans-unit id="2674525b4c805147548622911690a1ffb8d445f1" translate="yes" xml:space="preserve">
          <source>Template variable scope</source>
          <target state="translated">模板变量范围</target>
        </trans-unit>
        <trans-unit id="28dbf63cae657ef60106250983c4178da95844af" translate="yes" xml:space="preserve">
          <source>Template variables</source>
          <target state="translated">模板变量</target>
        </trans-unit>
        <trans-unit id="d20f5e78b915be979e556411efe974931b98e76d" translate="yes" xml:space="preserve">
          <source>Template variables help you use data from one part of a template in another part of the template. With template variables, you can perform tasks such as respond to user input or finely tune your application's forms.</source>
          <target state="translated">模板变量可以帮助您在模板的另一部分中使用模板中的数据。通过模板变量,您可以执行诸如响应用户输入或微调应用程序的表单等任务。</target>
        </trans-unit>
        <trans-unit id="58ff34d9a94fa1bca16ea2429b64af9ee09f9766" translate="yes" xml:space="preserve">
          <source>Template-driven</source>
          <target state="translated">Template-driven</target>
        </trans-unit>
        <trans-unit id="947ab7967c8b9de424b7b48fb2e8825139f85613" translate="yes" xml:space="preserve">
          <source>Template-driven Forms</source>
          <target state="translated">模板驱动的表单</target>
        </trans-unit>
        <trans-unit id="2fc7bb49b2ab014a01c95c690a6b5d0eb3c48324" translate="yes" xml:space="preserve">
          <source>Template-driven Forms Guide</source>
          <target state="translated">模板驱动的表单指南</target>
        </trans-unit>
        <trans-unit id="8e7766bb17d998e7bcccf98bd89bf899b82f86be" translate="yes" xml:space="preserve">
          <source>Template-driven forms</source>
          <target state="translated">模板驱动的形式</target>
        </trans-unit>
        <trans-unit id="7a33b5212ff5a46154f3ee9b352e32186eafe9a1" translate="yes" xml:space="preserve">
          <source>Template-driven forms allow direct access to modify data in your template, but are less explicit than reactive forms because they rely on directives embedded in the template, along with mutable data to track changes asynchronously. See the &lt;a href=&quot;forms-overview&quot;&gt;Forms Overview&lt;/a&gt; for detailed comparisons between the two paradigms.</source>
          <target state="translated">模板驱动的表单允许直接访问以修改模板中的数据，但不如反应式表单那么明确，因为它们依赖于模板中嵌入的指令以及可变数据来异步跟踪更改。有关这两种范例的详细比较，请参见&lt;a href=&quot;forms-overview&quot;&gt;表单概述&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cf3a91745824d3c3b8e1abe3cdefd0c52184515" translate="yes" xml:space="preserve">
          <source>Template-driven forms are suitable for small or simple forms, while reactive forms are more scalable and suitable for complex forms. For a comparison of the two approaches, see &lt;a href=&quot;forms-overview&quot;&gt;Introduction to Forms&lt;/a&gt;</source>
          <target state="translated">模板驱动的表单适用于小型或简单表单，而反应式表单具有更高的可伸缩性并适用于复杂表单。有关两种方法的比较，请参阅&lt;a href=&quot;forms-overview&quot;&gt;表单简介。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b263f1b81053c4d9a7136253c089d2156136e29b" translate="yes" xml:space="preserve">
          <source>Template-driven forms focus on simple scenarios and are not as reusable. They abstract away the underlying form API, and provide only asynchronous access to the form data model. The abstraction of template-driven forms also affects testing. Tests are deeply reliant on manual change detection execution to run properly, and require more setup.</source>
          <target state="translated">模板驱动的表单专注于简单的场景,并且不具备可重用性。它们抽象掉了底层的表单API,只提供对表单数据模型的异步访问。模板驱动表单的抽象也影响了测试。测试严重依赖手动变更检测执行才能正常运行,并且需要更多的设置。</target>
        </trans-unit>
        <trans-unit id="916bacce778918197c08d54d7a6dc912643c9a30" translate="yes" xml:space="preserve">
          <source>Template-driven forms rely on directives defined in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">模板驱动的表单依赖于 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 中定义的指令。</target>
        </trans-unit>
        <trans-unit id="6f345f49fde5425a70c3323b64e1cdc8ce016997" translate="yes" xml:space="preserve">
          <source>Template-driven forms use &lt;a href=&quot;architecture-components#data-binding&quot;&gt;two-way data binding&lt;/a&gt; to update the data model in the component as changes are made in the template and vice versa.</source>
          <target state="translated">模板驱动的表单使用&lt;a href=&quot;architecture-components#data-binding&quot;&gt;双向数据绑定&lt;/a&gt;来更新组件中的数据模型，因为在模板中进行了更改，反之亦然。</target>
        </trans-unit>
        <trans-unit id="eacc6fdad7fae7150f374795874d76dda2db76be" translate="yes" xml:space="preserve">
          <source>Template-driven validation</source>
          <target state="translated">模板驱动的验证</target>
        </trans-unit>
        <trans-unit id="49f5a0c2c82d30a031cbdf85339bb35e8de1b886" translate="yes" xml:space="preserve">
          <source>Template-reference variables such as &lt;code&gt;#heroForm&lt;/code&gt; and &lt;code&gt;#name&lt;/code&gt;.</source>
          <target state="translated">模板引用变量，例如 &lt;code&gt;#heroForm&lt;/code&gt; 和 &lt;code&gt;#name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="871350ea04e981df978b9ee88f97415601759ccc" translate="yes" xml:space="preserve">
          <source>TemplateRef</source>
          <target state="translated">TemplateRef</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="ac46ec20b12e03a347c43dafd18b8503a6feac19" translate="yes" xml:space="preserve">
          <source>Templates and views</source>
          <target state="translated">模板和视图</target>
        </trans-unit>
        <trans-unit id="404ac9359f458c08768cf6531e667d2854940fba" translate="yes" xml:space="preserve">
          <source>Templates are the user-facing part of an Angular application and are written in HTML. The following table lists some of the key AngularJS template features with their equivalent Angular template syntax.</source>
          <target state="translated">模板是Angular应用中面向用户的部分,用HTML编写。下表列出了一些关键的AngularJS模板特性及其对应的Angular模板语法。</target>
        </trans-unit>
        <trans-unit id="7d179b96d34c29e0196caf2baca8ede8163168d8" translate="yes" xml:space="preserve">
          <source>Templates, directives, and data binding</source>
          <target state="translated">模板、指令和数据绑定</target>
        </trans-unit>
        <trans-unit id="33a55a545f80619e2e19f636478745467cc32004" translate="yes" xml:space="preserve">
          <source>Temporarily add a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt; named &lt;code&gt;spy&lt;/code&gt; to the &lt;em&gt;Name&lt;/em&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag and use it to display the input's CSS classes.</source>
          <target state="translated">临时将一个名为 &lt;code&gt;spy&lt;/code&gt; 的&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;模板引用变量&lt;/a&gt;添加到&lt;em&gt;Name &lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 标记，并使用它显示输入的CSS类。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f931515810af2d942cb1d62e9908a51d3886a8a" translate="yes" xml:space="preserve">
          <source>Test &lt;em&gt;DashboardHeroComponent&lt;/em&gt; stand-alone</source>
          <target state="translated">独立测试&lt;em&gt;DashboardHeroComponent&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fa5885e1b1f33914443039f015df6b87c1a577a9" translate="yes" xml:space="preserve">
          <source>Test Type</source>
          <target state="translated">测试类型</target>
        </trans-unit>
        <trans-unit id="6896d81b81e460b5ab300516bb7a77d7c1527681" translate="yes" xml:space="preserve">
          <source>Test a component class on its own as you would test a service class.</source>
          <target state="translated">像测试服务类一样测试一个组件类的本身。</target>
        </trans-unit>
        <trans-unit id="2448fa765af5ce19934b50addc880031820bc7a1" translate="yes" xml:space="preserve">
          <source>Test debugging</source>
          <target state="translated">测试调试</target>
        </trans-unit>
        <trans-unit id="c1fecee23c2fad624d9f5999f217bf731328967f" translate="yes" xml:space="preserve">
          <source>Test file name and location</source>
          <target state="translated">测试文件名和位置</target>
        </trans-unit>
        <trans-unit id="0b4483791cb553bd9da8d0099a6a90f9bcbbbf63" translate="yes" xml:space="preserve">
          <source>Test it</source>
          <target state="translated">测试一下</target>
        </trans-unit>
        <trans-unit id="a8407b2c9b9349ac41ecd56aec5c890c53b0b024" translate="yes" xml:space="preserve">
          <source>Test it as a stand-alone component.</source>
          <target state="translated">将其作为一个独立的组件进行测试。</target>
        </trans-unit>
        <trans-unit id="24d3085b21a512d75865d8bceffdd551bcf73352" translate="yes" xml:space="preserve">
          <source>Test it as used by &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">测试它是否由 &lt;code&gt;DashboardComponent&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="cc31d0d30b6280bc2d5300ca22178dcce3ff5d97" translate="yes" xml:space="preserve">
          <source>Test it as used by a substitute for &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">测试它是否替代 &lt;code&gt;DashboardComponent&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="8aa4d961b3eeea3f063253c0ba4dfe97056a0596" translate="yes" xml:space="preserve">
          <source>Test modules and platforms for individual platforms are available from '@angular/&amp;lt;platform_name&amp;gt;/testing'.</source>
          <target state="translated">可从'@ angular / &amp;lt;platform_name&amp;gt; / testing'获得适用于各个平台的测试模块和平台。</target>
        </trans-unit>
        <trans-unit id="f6332a2e843d893064dd38a7519d7af9fee2c152" translate="yes" xml:space="preserve">
          <source>Test that &lt;strong&gt;&lt;em&gt;both&lt;/em&gt;&lt;/strong&gt; input properties are set initially and that button clicks trigger the expected &lt;code&gt;ngOnChanges&lt;/code&gt; calls and values:</source>
          <target state="translated">测试&lt;strong&gt;&lt;em&gt;两个&lt;/em&gt;&lt;/strong&gt;输入属性均已初始设置，并且单击按钮是否触发了预期的 &lt;code&gt;ngOnChanges&lt;/code&gt; 调用和值：</target>
        </trans-unit>
        <trans-unit id="b830fb4922eb986456c661bb752dde86c342564f" translate="yes" xml:space="preserve">
          <source>Test that clicking the &lt;em&gt;Agree&lt;/em&gt; and &lt;em&gt;Disagree&lt;/em&gt; buttons update the appropriate counters:</source>
          <target state="translated">测试单击&amp;ldquo; &lt;em&gt;同意&amp;rdquo;&lt;/em&gt;和&amp;ldquo; &lt;em&gt;不同意&amp;rdquo;&lt;/em&gt;按钮是否可以更新相应的计数器：</target>
        </trans-unit>
        <trans-unit id="2ea1ba39844fea58edcd1af16ad25d6919716e86" translate="yes" xml:space="preserve">
          <source>Test that the seconds displayed in the parent template match the seconds displayed in the child's status message. Test also that clicking the &lt;em&gt;Stop&lt;/em&gt; button pauses the countdown timer:</source>
          <target state="translated">测试父模板中显示的秒数与孩子状态消息中显示的秒数是否匹配。还测试单击&lt;em&gt;停止&lt;/em&gt;按钮会暂停倒数计时器：</target>
        </trans-unit>
        <trans-unit id="45f1bff59c9d9d842f747fd8277989f00b5d93fc" translate="yes" xml:space="preserve">
          <source>Test the &quot;Share&quot; button:</source>
          <target state="translated">测试 &quot;分享 &quot;按钮。</target>
        </trans-unit>
        <trans-unit id="66b89592491df1e4a7ad4132a2a59d1861c5a03d" translate="yes" xml:space="preserve">
          <source>Test the router by clicking a product name. The app displays the product details component, which currently always says &quot;product-details works!&quot;</source>
          <target state="translated">点击产品名称,测试路由器。应用会显示产品详情组件,目前总是显示 &quot;product-details works!&quot;。</target>
        </trans-unit>
        <trans-unit id="d81f957521355323aeca520db19f5edf8e370479" translate="yes" xml:space="preserve">
          <source>Test the router by clicking a product name. The app displays the product details component, which currently always says &quot;product-details works!&quot; (We'll fix this in the next section.)</source>
          <target state="translated">点击产品名称,测试路由器。应用会显示产品详情组件,目前总是说 &quot;product-details works!&quot;。我们将在下一节修复这个问题)。</target>
        </trans-unit>
        <trans-unit id="1b3ebf0a33fd2cdd1645c2654b9fc72083bf1031" translate="yes" xml:space="preserve">
          <source>Test to see if the differ knows how to diff this kind of object.</source>
          <target state="translated">测试一下difference是否知道如何difference这种对象。</target>
        </trans-unit>
        <trans-unit id="989e322a6f1139d1353ac93e44e55e319afbc019" translate="yes" xml:space="preserve">
          <source>Test whether a key exists in the store.</source>
          <target state="translated">测试存储中是否存在密钥。</target>
        </trans-unit>
        <trans-unit id="e619874937772363a1c2da2331f3ba776b465a2a" translate="yes" xml:space="preserve">
          <source>Test your cart component.</source>
          <target state="translated">测试您的购物车组件。</target>
        </trans-unit>
        <trans-unit id="99f07ad05e41dcec36a36e807face510d90d322b" translate="yes" xml:space="preserve">
          <source>Test your shipping prices feature:</source>
          <target state="translated">测试你的运价功能。</target>
        </trans-unit>
        <trans-unit id="be104cc054c0fcb9b37c08765773727a64cec717" translate="yes" xml:space="preserve">
          <source>TestBed</source>
          <target state="translated">TestBed</target>
        </trans-unit>
        <trans-unit id="9088ec50aaa13740a9d6dbb00c51142edc2e8808" translate="yes" xml:space="preserve">
          <source>TestBedStatic</source>
          <target state="translated">TestBedStatic</target>
        </trans-unit>
        <trans-unit id="7514db3c9bb60b98c0cfca5106beca4b49ed97ce" translate="yes" xml:space="preserve">
          <source>TestComponentRenderer</source>
          <target state="translated">TestComponentRenderer</target>
        </trans-unit>
        <trans-unit id="4b705f1f1aacbc87dfafe7ad9846c3e675f6db17" translate="yes" xml:space="preserve">
          <source>TestModuleMetadata</source>
          <target state="translated">TestModuleMetadata</target>
        </trans-unit>
        <trans-unit id="7b5b8bd0f077ed931708cc0d311b207cedc70ab6" translate="yes" xml:space="preserve">
          <source>TestRequest</source>
          <target state="translated">TestRequest</target>
        </trans-unit>
        <trans-unit id="c9e78f83c634dce62c7e36294672609e7678c20c" translate="yes" xml:space="preserve">
          <source>Testability</source>
          <target state="translated">Testability</target>
        </trans-unit>
        <trans-unit id="5cdf6feb6534f6bc92bba0edf1ff9781944b5a79" translate="yes" xml:space="preserve">
          <source>Testability hook</source>
          <target state="translated">可测试性挂钩</target>
        </trans-unit>
        <trans-unit id="da504355c0338312be93a22ec235340a0cd93b24" translate="yes" xml:space="preserve">
          <source>TestabilityRegistry</source>
          <target state="translated">TestabilityRegistry</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="d636b1703597e213926e7b65e6945cb94e3293e5" translate="yes" xml:space="preserve">
          <source>Testing Attribute Directives</source>
          <target state="translated">测试属性指令</target>
        </trans-unit>
        <trans-unit id="f186e27eb7e517b4b8211f5e3987e28713883285" translate="yes" xml:space="preserve">
          <source>Testing HTTP requests</source>
          <target state="translated">测试HTTP请求</target>
        </trans-unit>
        <trans-unit id="57ba27a4c362253fca0f0eaa9ec92fa28974c2d1" translate="yes" xml:space="preserve">
          <source>Testing HTTP services</source>
          <target state="translated">测试HTTP服务</target>
        </trans-unit>
        <trans-unit id="fee626e19a6431b489f5d1148ae552b0a104d050" translate="yes" xml:space="preserve">
          <source>Testing Pipes</source>
          <target state="translated">测试管道</target>
        </trans-unit>
        <trans-unit id="76004ae163e3baecfc0ef2edf0092063c811094c" translate="yes" xml:space="preserve">
          <source>Testing Utility APIs</source>
          <target state="translated">测试实用API</target>
        </trans-unit>
        <trans-unit id="3591b1f3793535608545f3b06aaac5398962d724" translate="yes" xml:space="preserve">
          <source>Testing a builder</source>
          <target state="translated">测试建造者</target>
        </trans-unit>
        <trans-unit id="118ae999614ef20321dc13d67908393c582ec10a" translate="yes" xml:space="preserve">
          <source>Testing components with dependencies</source>
          <target state="translated">测试具有依赖性的组件</target>
        </trans-unit>
        <trans-unit id="0c1a0b297a16cb16b5427fe7c2629cc52c7885ef" translate="yes" xml:space="preserve">
          <source>Testing configuration.</source>
          <target state="translated">测试配置。</target>
        </trans-unit>
        <trans-unit id="ce31601d12cfb46e7ca9204dea5a6c8548b4090c" translate="yes" xml:space="preserve">
          <source>Testing for errors</source>
          <target state="translated">测试错误</target>
        </trans-unit>
        <trans-unit id="6d6a52e29c3585e98a136bdd3c004782df3376aa" translate="yes" xml:space="preserve">
          <source>Testing plays a large part in complex applications and a simpler testing strategy is useful when validating that your forms function correctly. Reactive forms and template-driven forms have different levels of reliance on rendering the UI to perform assertions based on form control and form field changes. The following examples demonstrate the process of testing forms with reactive and template-driven forms.</source>
          <target state="translated">测试在复杂的应用程序中起着很大的作用,当验证你的表单功能正确时,一个更简单的测试策略是有用的。反应式表单和模板驱动式表单对渲染UI以执行基于表单控件和表单字段变化的断言的依赖程度不同。以下示例演示了使用反应式表单和模板驱动表单测试表单的过程。</target>
        </trans-unit>
        <trans-unit id="7ac189f68b4ba793cd7d36c3a5bf6024b9bf74a8" translate="yes" xml:space="preserve">
          <source>Testing plays a large part in complex applications. A simpler testing strategy is useful when validating that your forms function correctly. Reactive forms and template-driven forms have different levels of reliance on rendering the UI to perform assertions based on form control and form field changes. The following examples demonstrate the process of testing forms with reactive and template-driven forms.</source>
          <target state="translated">测试在复杂的应用程序中起着很大的作用。当验证你的表单功能是否正确时,一个更简单的测试策略是有用的。反应式表单和模板驱动式表单对渲染UI以执行基于表单控件和表单字段变化的断言的依赖程度不同。以下示例演示了使用反应式表单和模板驱动表单测试表单的过程。</target>
        </trans-unit>
        <trans-unit id="b05c22b69bf75d2207c5b9b5ed499a08af28e732" translate="yes" xml:space="preserve">
          <source>Testing reactive forms</source>
          <target state="translated">测试反应式</target>
        </trans-unit>
        <trans-unit id="bbd8606c3b49cd89a758e2dbe7c15b53a76c29e0" translate="yes" xml:space="preserve">
          <source>Testing services</source>
          <target state="translated">测试服务</target>
        </trans-unit>
        <trans-unit id="7149268b2dd28c0da408beed3d0b927bd3331095" translate="yes" xml:space="preserve">
          <source>Testing services with the &lt;code&gt;TestBed&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;TestBed&lt;/code&gt; 进行测试服务</target>
        </trans-unit>
        <trans-unit id="4468a085563566bac21b54d700de2a4f27490d54" translate="yes" xml:space="preserve">
          <source>Testing services with the &lt;em&gt;TestBed&lt;/em&gt;</source>
          <target state="translated">使用&lt;em&gt;TestBed进行&lt;/em&gt;测试服务&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ecea04e4730b110b857580106d9bbe5105ac269a" translate="yes" xml:space="preserve">
          <source>Testing template-driven forms</source>
          <target state="translated">测试模板驱动的表单</target>
        </trans-unit>
        <trans-unit id="a802198482df1b18a4ea3d56e360a281b5282849" translate="yes" xml:space="preserve">
          <source>Testing the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">测试 &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a50982872fe4e2a53b325bbc47cb5ace68164bd6" translate="yes" xml:space="preserve">
          <source>Testing the &lt;code&gt;HighlightDirective&lt;/code&gt;</source>
          <target state="translated">测试 &lt;code&gt;HighlightDirective&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="588d70f9a91c1c83f650473e968961f1dc371e84" translate="yes" xml:space="preserve">
          <source>Testing the component &lt;em&gt;class&lt;/em&gt; is as easy as &lt;a href=&quot;testing-services&quot;&gt;testing a service&lt;/a&gt;.</source>
          <target state="translated">测试组件&lt;em&gt;类&lt;/em&gt;就像&lt;a href=&quot;testing-services&quot;&gt;测试服务&lt;/a&gt;一样容易。</target>
        </trans-unit>
        <trans-unit id="697051d918a08244ddad35b32bd220aad30731f8" translate="yes" xml:space="preserve">
          <source>Testing the component &lt;em&gt;class&lt;/em&gt; is as easy as testing a service.</source>
          <target state="translated">测试组件&lt;em&gt;类&lt;/em&gt;就像测试服务一样容易。</target>
        </trans-unit>
        <trans-unit id="039c2cc87c7b0778c57ccee1c7470749c1926dca" translate="yes" xml:space="preserve">
          <source>Testing the specific use of the &lt;code&gt;HighlightDirective&lt;/code&gt; within the &lt;code&gt;AboutComponent&lt;/code&gt; requires only the techniques explored above (in particular the &lt;a href=&quot;testing#nested-component-tests&quot;&gt;&quot;Shallow test&quot;&lt;/a&gt; approach).</source>
          <target state="translated">检测与具体使用的 &lt;code&gt;HighlightDirective&lt;/code&gt; 的内 &lt;code&gt;AboutComponent&lt;/code&gt; 仅需要上述技术探索（特别是&lt;a href=&quot;testing#nested-component-tests&quot;&gt;&amp;ldquo;浅测试&amp;rdquo;&lt;/a&gt;方法）。</target>
        </trans-unit>
        <trans-unit id="8806255216fa6f095c7f13623f3298df9f8f9522" translate="yes" xml:space="preserve">
          <source>Testing the specific use of the &lt;code&gt;HighlightDirective&lt;/code&gt; within the &lt;code&gt;AboutComponent&lt;/code&gt; requires only the techniques explored in the &lt;a href=&quot;testing-components-scenarios#nested-component-tests&quot;&gt;&quot;Nested component tests&quot;&lt;/a&gt; section of &lt;a href=&quot;testing-components-scenarios&quot;&gt;Component testing scenarios&lt;/a&gt;.</source>
          <target state="translated">测试具体使用的 &lt;code&gt;HighlightDirective&lt;/code&gt; 的内 &lt;code&gt;AboutComponent&lt;/code&gt; 只需要在探索的技术&lt;a href=&quot;testing-components-scenarios#nested-component-tests&quot;&gt;&amp;ldquo;嵌套组件测试&amp;rdquo;&lt;/a&gt;的部分&lt;a href=&quot;testing-components-scenarios&quot;&gt;组件测试场景&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d4f5b3e2a6878f7cf4f7973ba68c545ec004c46" translate="yes" xml:space="preserve">
          <source>Testing with &lt;em&gt;ActivatedRouteStub&lt;/em&gt;</source>
          <target state="translated">使用&lt;em&gt;ActivatedRouteStub&lt;/em&gt;测试&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7758900c8180a1d000869ec3a8a1ccd3ecff2333" translate="yes" xml:space="preserve">
          <source>Testing with a spy</source>
          <target state="translated">用间谍测试</target>
        </trans-unit>
        <trans-unit id="9e98b81ed47ad883a81a35abaf0ee36e4159a854" translate="yes" xml:space="preserve">
          <source>Testing without &lt;code&gt;beforeEach()&lt;/code&gt;</source>
          <target state="translated">在没有 &lt;code&gt;beforeEach()&lt;/code&gt; 的情况下进行测试</target>
        </trans-unit>
        <trans-unit id="d02a000b264944782c696348f9263db99fe9a4a0" translate="yes" xml:space="preserve">
          <source>Testing without &lt;em&gt;beforeEach()&lt;/em&gt;</source>
          <target state="translated">不使用&lt;em&gt;beforeEach（）进行&lt;/em&gt;测试&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bfd426fb8fc07cdbbae13c053c5b255b4310ba6e" translate="yes" xml:space="preserve">
          <source>Testing your Angular application helps you check that your app is working as you expect.</source>
          <target state="translated">测试您的Angular应用程序可以帮助您检查您的应用程序是否按照您的期望工作。</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="888d9d0f4ee5e8f0c157b91c6eb659ea756add43" translate="yes" xml:space="preserve">
          <source>Tests can explore how the &lt;code&gt;HeroDetailComponent&lt;/code&gt; responds to different &lt;code&gt;id&lt;/code&gt; parameter values by manipulating the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; injected into the component's constructor.</source>
          <target state="translated">测试可以通过操纵注入到组件构造函数中的 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 来探索 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 如何响应不同的 &lt;code&gt;id&lt;/code&gt; 参数值。</target>
        </trans-unit>
        <trans-unit id="a149f72eba01c87f9d7e2acc8e6ccead108bd378" translate="yes" xml:space="preserve">
          <source>Tests can not only be retained through an upgrade process, but they can also be used as a valuable safety measure when ensuring that the application does not break during the upgrade. E2E tests are especially useful for this purpose.</source>
          <target state="translated">测试不仅可以在升级过程中保留,而且还可以作为一种有价值的安全措施,确保应用程序在升级过程中不会损坏。E2E测试在这方面特别有用。</target>
        </trans-unit>
        <trans-unit id="ef9720ff67e3a0f70d038c1f235e9be14b1f91b7" translate="yes" xml:space="preserve">
          <source>Tests click buttons of both the parent &lt;code&gt;MissionControlComponent&lt;/code&gt; and the &lt;code&gt;AstronautComponent&lt;/code&gt; children and verify that the history meets expectations:</source>
          <target state="translated">测试父级 &lt;code&gt;MissionControlComponent&lt;/code&gt; 和 &lt;code&gt;AstronautComponent&lt;/code&gt; 子级的单击按钮，并验证历史记录是否符合预期：</target>
        </trans-unit>
        <trans-unit id="9a1fb83f4107a4334b4d83ca00fd46b35664a0df" translate="yes" xml:space="preserve">
          <source>Tests that exercise the component need ...</source>
          <target state="translated">锻炼组件需要的测试...</target>
        </trans-unit>
        <trans-unit id="5e8952a23ac8b494d5a4aa2dfda252105e5ee80b" translate="yes" xml:space="preserve">
          <source>Tests the value using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;regular expression&lt;/a&gt; pattern suitable for common usecases. The pattern is based on the definition of a valid email address in the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address&quot;&gt;WHATWG HTML specification&lt;/a&gt; with some enhancements to incorporate more RFC rules (such as rules related to domain names and the lengths of different parts of the address).</source>
          <target state="translated">使用适合普通用例的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;正则表达式&lt;/a&gt;模式测试值。该模式基于&lt;a href=&quot;https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address&quot;&gt;WHATWG HTML规范中&lt;/a&gt;有效电子邮件地址的定义，并进行了一些增强以合并更多RFC规则（例如与域名相关的规则以及地址不同部分的长度）。</target>
        </trans-unit>
        <trans-unit id="40db585145f66e7c1d97246b405cda4f5c923267" translate="yes" xml:space="preserve">
          <source>Textual description of response status code.</source>
          <target state="translated">答复状态码的文字说明:</target>
        </trans-unit>
        <trans-unit id="6eee3bad7a4f570555e555491652b44c30be408f" translate="yes" xml:space="preserve">
          <source>Textual input; ideal for string or number options.</source>
          <target state="translated">文本输入;是字符串或数字选项的理想选择。</target>
        </trans-unit>
        <trans-unit id="45b58f88e69ae6780e1f2abce5d12c9d0d78969a" translate="yes" xml:space="preserve">
          <source>Thanks to &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;injector inheritance&lt;/a&gt;, you can still inject application-wide services into these components. A component's injector is a child of its parent component's injector, and inherits from all ancestor injectors all the way back to the application's &lt;em&gt;root&lt;/em&gt; injector. Angular can inject a service provided by any injector in that lineage.</source>
          <target state="translated">由于&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;喷油器继承&lt;/a&gt;，你仍然可以注入应用范围的服务，为这些组件。组件的注入器是其父组件的注入器的子代，并且从所有祖先注入器继承到应用程序的&lt;em&gt;根&lt;/em&gt;注入器。Angular可以注入该血统中任何注入器提供的服务。</target>
        </trans-unit>
        <trans-unit id="b7988d61e2d1ccc1aba091cbcda9c3833787e86a" translate="yes" xml:space="preserve">
          <source>That &lt;em&gt;selected hero&lt;/em&gt; coloring is the work of the &lt;code&gt;.selected&lt;/code&gt; CSS class in the &lt;a href=&quot;toh-pt2#styles&quot;&gt;styles you added earlier&lt;/a&gt;. You just have to apply the &lt;code&gt;.selected&lt;/code&gt; class to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; when the user clicks it.</source>
          <target state="translated">那&lt;em&gt;选择的英雄&lt;/em&gt;着色的工作 &lt;code&gt;.selected&lt;/code&gt; 在CSS类&lt;a href=&quot;toh-pt2#styles&quot;&gt;之前添加的样式&lt;/a&gt;。用户单击时，只需将 &lt;code&gt;.selected&lt;/code&gt; 类应用于 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="997d534a801fe52469433556fdfc70812d5791b0" translate="yes" xml:space="preserve">
          <source>That &lt;em&gt;won't work&lt;/em&gt; when the &lt;code&gt;HeroService&lt;/code&gt; is actually making requests of a remote server.</source>
          <target state="translated">当 &lt;code&gt;HeroService&lt;/code&gt; 实际向远程服务器发出请求时，这&lt;em&gt;将无法正常工作&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="855bfc37db8fbfcd6a69c185c541bcee572c7752" translate="yes" xml:space="preserve">
          <source>That brief syntax does a lot:</source>
          <target state="translated">这简短的句法做了很多事情。</target>
        </trans-unit>
        <trans-unit id="baeabedfa4d2b67801841521af7799623a88f4c2" translate="yes" xml:space="preserve">
          <source>That doesn't match any of the concrete configured routes which means the router falls through to the wildcard route and displays the &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">这与任何已配置的具体路由都不匹配，这意味着路由器掉入了通配符路由并显示 &lt;code&gt;PageNotFoundComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f02277b835c3a65bcb6c845332d3f8ccc026ea3a" translate="yes" xml:space="preserve">
          <source>That doesn't match any of the hard-coded routes which means the router falls through to the wildcard route and displays the &lt;code&gt;PageNotFoundComponent&lt;/code&gt;.</source>
          <target state="translated">这与任何硬编码的路由都不匹配，这意味着路由器掉入了通配符路由并显示 &lt;code&gt;PageNotFoundComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53890b190e7522b42925863c087bdb3871d6fd9d" translate="yes" xml:space="preserve">
          <source>That is the last you'll see of AngularJS! It has served us well but now it's time to say goodbye.</source>
          <target state="translated">这是你最后一次看到AngularJS了!它为我们提供了很好的服务,但现在是时候说再见了。它为我们提供了很好的服务,但现在是时候说再见了。</target>
        </trans-unit>
        <trans-unit id="546cbdd2883bb656047b37ff93de8aac7a7774d3" translate="yes" xml:space="preserve">
          <source>That is why there are two ways to create the module: &lt;code&gt;RouterModule.forRoot&lt;/code&gt; and &lt;code&gt;RouterModule.forChild&lt;/code&gt;.</source>
          <target state="translated">这就是为什么有两种方法创建模块的原因： &lt;code&gt;RouterModule.forRoot&lt;/code&gt; 和 &lt;code&gt;RouterModule.forChild&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78cd18b8b1563fee45858ef3948be6ae3918ea9b" translate="yes" xml:space="preserve">
          <source>That leaves only components bootstrapped using one of the imperative techniques, such as &lt;a href=&quot;../api/core/viewcontainerref#createComponent&quot;&gt;&lt;code&gt;ViewComponentRef.createComponent()&lt;/code&gt;&lt;/a&gt; as undiscoverable.</source>
          <target state="translated">这仅使使用命令性技术之一自举的组件&lt;a href=&quot;../api/core/viewcontainerref#createComponent&quot;&gt; &lt;code&gt;ViewComponentRef.createComponent()&lt;/code&gt; &lt;/a&gt;如ViewComponentRef.createComponent（））无法被发现。</target>
        </trans-unit>
        <trans-unit id="5d9c064530f05f389c5fbe1c71c58fb65ce76d57" translate="yes" xml:space="preserve">
          <source>That shows one hero. To list them all, add an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; to iterate through the list of heroes:</source>
          <target state="translated">那显示了一位英雄。要列出所有内容，请在 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 中添加 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 以遍历英雄列表：</target>
        </trans-unit>
        <trans-unit id="60723467a2927bc85f77b7d415dfc59363db1a8f" translate="yes" xml:space="preserve">
          <source>That you can only apply &lt;a href=&quot;structural-directives#one-per-element&quot;&gt;one structural directive&lt;/a&gt; to an element.</source>
          <target state="translated">只能对一个元素应用&lt;a href=&quot;structural-directives#one-per-element&quot;&gt;一个结构指令&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e04a0a9c73bb1fbb17f9d8723aa29ee17f93b6c" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;preloading&lt;/em&gt;.</source>
          <target state="translated">那是&lt;em&gt;预加载&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e43e04a9dd6b720de1e5ae14bfbe69af946d80c7" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;really&lt;/em&gt; crisp. Only the &lt;em&gt;test doubles&lt;/em&gt; in the &lt;code&gt;providers&lt;/code&gt; remain. Even the &lt;code&gt;HeroDetailComponent&lt;/code&gt; declaration is gone.</source>
          <target state="translated">这是&lt;em&gt;真的&lt;/em&gt;清脆。只有&lt;em&gt;测试双打&lt;/em&gt;的 &lt;code&gt;providers&lt;/code&gt; 依然存在。甚至 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 声明也消失了。</target>
        </trans-unit>
        <trans-unit id="c76bb94cbc84152062cf4a329790720f178cb281" translate="yes" xml:space="preserve">
          <source>That's &lt;em&gt;two-way data binding&lt;/em&gt;. For more information, see &lt;a href=&quot;template-syntax#ngModel&quot;&gt;Two-way binding with NgModel&lt;/a&gt; on the the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">这是&lt;em&gt;双向数据绑定&lt;/em&gt;。有关更多信息，请参见&amp;ldquo; &lt;a href=&quot;template-syntax&quot;&gt;模板语法&amp;rdquo;&lt;/a&gt;页面上的&lt;a href=&quot;template-syntax#ngModel&quot;&gt;与NgModel双向绑定&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3921dcb6884a1953a2a80655d084b46ece04b5af" translate="yes" xml:space="preserve">
          <source>That's because interceptors work at a lower level than those &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods. A single HTTP request can generate multiple &lt;em&gt;events&lt;/em&gt;, including upload and download progress events. The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; class itself is actually an event, whose type is &lt;code&gt;&lt;a href=&quot;../api/common/http/httpeventtype#Response&quot;&gt;HttpEventType.Response&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">这是因为拦截器比那些 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 方法的工作级别低。一个HTTP请求可以生成多个&lt;em&gt;事件&lt;/em&gt;，包括上载和下载进度事件。该 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 对象类本身实际上是一个事件，其类型为 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpeventtype#Response&quot;&gt;HttpEventType.Response&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73090ab1ac428708459347276bf105c30a54c714" translate="yes" xml:space="preserve">
          <source>That's good, but it would be nice to &lt;em&gt;simultaneously&lt;/em&gt; apply the directive and set the color &lt;em&gt;in the same attribute&lt;/em&gt; like this.</source>
          <target state="translated">很好，但是最好&lt;em&gt;同时&lt;/em&gt;应用指令并&lt;em&gt;在相同的属性中&lt;/em&gt;设置颜色&lt;em&gt;，&lt;/em&gt;就像这样。</target>
        </trans-unit>
        <trans-unit id="fdd51638c77368aee34229eb5d7f4a31418fff47" translate="yes" xml:space="preserve">
          <source>That's not a problem when the source code is in memory. But the &lt;code&gt;BannerComponent&lt;/code&gt; requires external files that the compiler must read from the file system, an inherently &lt;em&gt;asynchronous&lt;/em&gt; operation.</source>
          <target state="translated">当源代码在内存中时，这不是问题。但是 &lt;code&gt;BannerComponent&lt;/code&gt; 需要编译器必须从文件系统读取的外部文件，这是固有的&lt;em&gt;异步&lt;/em&gt;操作。</target>
        </trans-unit>
        <trans-unit id="6568d13ab9ecb29b6bc0a1b257bc515ba6d56377" translate="yes" xml:space="preserve">
          <source>That's not a problem when you run the CLI &lt;code&gt;ng test&lt;/code&gt; command because it &lt;em&gt;compiles the app before running the tests&lt;/em&gt;.</source>
          <target state="translated">当您运行CLI &lt;code&gt;ng test&lt;/code&gt; 命令时，这不是问题，因为它会&lt;em&gt;在运行测试之前编译应用程序&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="75533f536e09008a2f4370b9a66ce6baff36ade1" translate="yes" xml:space="preserve">
          <source>That's not a problem. When three modules all import Module 'A', Angular evaluates Module 'A' once, the first time it encounters it, and doesn't do so again.</source>
          <target state="translated">这不是一个问题。当三个模块都导入模块'A'时,Angular第一次遇到模块'A',就会评估一次,不会再评估。</target>
        </trans-unit>
        <trans-unit id="151a2e953c5878c8b2f49ccc710715719dae8e6b" translate="yes" xml:space="preserve">
          <source>That's possible by configuring the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; provider. First import it from the testing utility library:</source>
          <target state="translated">这可以通过使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; 提供程序配置 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 来实现。首先从测试实用程序库导入它：</target>
        </trans-unit>
        <trans-unit id="139fd9b014e0c67851c103338e6f1bb39431603f" translate="yes" xml:space="preserve">
          <source>That's the only change you should make to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; class. There are no more properties. There's no presentation logic. This component simply receives a hero object through its &lt;code&gt;hero&lt;/code&gt; property and displays it.</source>
          <target state="translated">这是您应该对 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 类进行的唯一更改。没有其他属性。没有演示逻辑。该组件仅通过其 &lt;code&gt;hero&lt;/code&gt; 属性接收英雄对象并显示它。</target>
        </trans-unit>
        <trans-unit id="9c6da24822230ab8738da89d9e6d04f423c6f361" translate="yes" xml:space="preserve">
          <source>That's too much effort just to answer a few simple questions about links.</source>
          <target state="translated">仅仅为了回答几个简单的链接问题,实在是太费劲了。</target>
        </trans-unit>
        <trans-unit id="c1bcf5a4b4646f6c696415537ab243683a1e6ff1" translate="yes" xml:space="preserve">
          <source>That's true at whatever level &lt;code&gt;A&lt;/code&gt; appears in a hierarchy of imported NgModules. When Module 'B' imports Module 'A', Module 'C' imports 'B', and Module 'D' imports &lt;code&gt;[C, B, A]&lt;/code&gt;, then 'D' triggers the evaluation of 'C', which triggers the evaluation of 'B', which evaluates 'A'. When Angular gets to the 'B' and 'A' in 'D', they're already cached and ready to go.</source>
          <target state="translated">无论在导入的NgModules层次结构中出现的 &lt;code&gt;A&lt;/code&gt; 级如何，都是如此。当模块'B'导入模块'A'，模块'C'导入'B'和模块'D'导入 &lt;code&gt;[C, B, A]&lt;/code&gt; ，则'D'触发对'C'的评估，从而触发评估&amp;ldquo; B&amp;rdquo;的值，该值为&amp;ldquo; A&amp;rdquo;。当Angular到达&amp;ldquo; D&amp;rdquo;中的&amp;ldquo; B&amp;rdquo;和&amp;ldquo; A&amp;rdquo;时，它们已经被缓存并可以使用了。</target>
        </trans-unit>
        <trans-unit id="eab482f8d705259ee9ad3c1b5e7791e025cccad6" translate="yes" xml:space="preserve">
          <source>That's where a popup will go, once you learn how to route a popup component to it.</source>
          <target state="translated">这就是一个弹出的地方,只要你学会如何将一个弹出组件路由到它。</target>
        </trans-unit>
        <trans-unit id="bd89378d819f44a785e6fb9e2f462ab1c7095c1d" translate="yes" xml:space="preserve">
          <source>That's why it's a best practice to separate presentation of data from data access by encapsulating data access in a separate service and delegating to that service in the component, even in simple cases like this one.</source>
          <target state="translated">这就是为什么通过将数据访问封装在一个单独的服务中,并在组件中委托给该服务,将数据的展示和数据访问分开的最佳实践,即使是在像这样简单的情况下也是如此。</target>
        </trans-unit>
        <trans-unit id="5d4537305ed4c11fbd605714ec89b0aa7ead00b2" translate="yes" xml:space="preserve">
          <source>The &quot;&lt;em&gt;is required&lt;/em&gt;&quot; message in a nearby &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, which you'll display only if the control is invalid.</source>
          <target state="translated">附近 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 中的&amp;ldquo; &lt;em&gt;required&lt;/em&gt; &amp;rdquo;消息，仅当控件无效时才会显示。</target>
        </trans-unit>
        <trans-unit id="cb6da98142a6e890c992fc42a49312215d3df539" translate="yes" xml:space="preserve">
          <source>The &quot;Hello World&quot; schematic might, for example, ask the user for their name, and display that name in place of the default name &quot;world&quot;. To define such a prompt, add an &lt;code&gt;x-prompt&lt;/code&gt; property to the schema for the &lt;code&gt;name&lt;/code&gt; variable.</source>
          <target state="translated">例如，&amp;ldquo; Hello World&amp;rdquo;示意图可能会要求用户提供其名称，并显示该名称以代替默认名称&amp;ldquo; world&amp;rdquo;。要定义这样的提示，请将 &lt;code&gt;x-prompt&lt;/code&gt; 属性添加到 &lt;code&gt;name&lt;/code&gt; 变量的架构中。</target>
        </trans-unit>
        <trans-unit id="d1ae32fdd2dc6ba7c8c1c16480729f50cbd84d18" translate="yes" xml:space="preserve">
          <source>The &quot;Try it&quot; tutorial covers the same major topics&amp;mdash;components, template syntax, routing, services, and accessing data via HTTP&amp;mdash;in a condensed format, following the most current best practices.</source>
          <target state="translated">&amp;ldquo;试用&amp;rdquo;教程遵循最新的最佳实践，以精简格式涵盖了相同的主要主题-组件，模板语法，路由，服务和通过HTTP访问数据。</target>
        </trans-unit>
        <trans-unit id="d2bbaa39f4a35729b9133f4121bdad46ac1e7bd6" translate="yes" xml:space="preserve">
          <source>The &quot;click&quot; test &lt;em&gt;in this example&lt;/em&gt; is misleading. It tests the &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; rather than the &lt;em&gt;component&lt;/em&gt;. This is a common failing of directive stubs.</source>
          <target state="translated">&lt;em&gt;此示例中&lt;/em&gt;的&amp;ldquo;点击&amp;rdquo;测试具有误导性。它测试 &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; 而不是&lt;em&gt;组件&lt;/em&gt;。这是指令存根的常见故障。</target>
        </trans-unit>
        <trans-unit id="dc26e27c36519d4711032d039edfafa3a241de0c" translate="yes" xml:space="preserve">
          <source>The &quot;merge&quot; option appends new query params to the params from the current URL:</source>
          <target state="translated">合并 &quot;选项将新的查询参数附加到当前URL的参数上。</target>
        </trans-unit>
        <trans-unit id="ba5f01d6a3af90f911121c5462222edb1dc0b1d9" translate="yes" xml:space="preserve">
          <source>The &quot;preserve&quot; option discards any new query params:</source>
          <target state="translated">保存 &quot;选项会丢弃任何新的查询参数。</target>
        </trans-unit>
        <trans-unit id="faea2451a7960e46bcbe2d68d4b393ce90a1ad33" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot; for the value and validation status of a form input element at a given point in time. When using &lt;a href=&quot;glossary#reactive-forms&quot;&gt;reactive forms&lt;/a&gt;, the form model is created explicitly in the component class. When using &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;template-driven forms&lt;/a&gt;, the form model is implicitly created by directives.</source>
          <target state="translated">表单输入元素在给定时间点的值和验证状态的&amp;ldquo;真相来源&amp;rdquo;。使用&lt;a href=&quot;glossary#reactive-forms&quot;&gt;反应式表单时&lt;/a&gt;，将在组件类中显式创建表单模型。使用&lt;a href=&quot;glossary#template-driven-forms&quot;&gt;模板驱动的表单时&lt;/a&gt;，表单模型由指令隐式创建。</target>
        </trans-unit>
        <trans-unit id="5f16bf1662cd8257f3371d70ecfe3dffbbd1ef48" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot; is the template. The validation is defined using attributes on the individual input elements.</source>
          <target state="translated">&quot;真理之源 &quot;是模板。验证是使用各个输入元素的属性来定义的。</target>
        </trans-unit>
        <trans-unit id="2b7f919d94c58fca886b43402bcc81835c791109" translate="yes" xml:space="preserve">
          <source>The &quot;source of truth&quot;, the form model, is defined in the component class.</source>
          <target state="translated">在组件类中定义了 &quot;真理之源&quot;,即表单模型。</target>
        </trans-unit>
        <trans-unit id="6dd684e5040381ad0ce17b5ddf5b549b7b739b86" translate="yes" xml:space="preserve">
          <source>The &quot;submit&quot; event object</source>
          <target state="translated">提交 &quot;事件对象</target>
        </trans-unit>
        <trans-unit id="359847ddb8d62a2bd8e853ea6598a7205ec1c46d" translate="yes" xml:space="preserve">
          <source>The &amp;lt;ng-template&amp;gt; is an Angular element for rendering HTML. It is never displayed directly. In fact, before rendering the view, Angular &lt;em&gt;replaces&lt;/em&gt; the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; and its contents with a comment.</source>
          <target state="translated">&amp;lt;ng-template&amp;gt;是用于呈现HTML的Angular元素。它永远不会直接显示。实际上，在渲染视图之前，Angular &lt;em&gt;用&lt;/em&gt;注释&lt;em&gt;替换&lt;/em&gt;了 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 及其内容。</target>
        </trans-unit>
        <trans-unit id="f2bc11b9bff8891b1b4b95777be8093827f90cd6" translate="yes" xml:space="preserve">
          <source>The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.</source>
          <target state="translated">legacy_enabled &quot;和 &quot;legacy_disabled &quot;不应该用于新的应用。</target>
        </trans-unit>
        <trans-unit id="5a0607fc5a71f75025003113fba9d409eef3025c" translate="yes" xml:space="preserve">
          <source>The (*) before &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; is required in this example. For more information, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">在此示例中，需要 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 之前的（*）。有关更多信息，请参见《&lt;a href=&quot;structural-directives&quot;&gt;结构指令》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2eeefeb9f39958efc7cb49ff902890458efed5d3" translate="yes" xml:space="preserve">
          <source>The (*) before &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; is required in this example.</source>
          <target state="translated">在此示例中，需要 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; 之前的（*）。</target>
        </trans-unit>
        <trans-unit id="79cf9ba3340b50f113c7f5c522857c8402ee3e8d" translate="yes" xml:space="preserve">
          <source>The 0-based index at which to insert the new view into this container. If not specified, appends the new view as the last entry.</source>
          <target state="translated">将新视图插入此容器的基于0的索引。如果没有指定,则将新视图作为最后一个条目追加。</target>
        </trans-unit>
        <trans-unit id="64cb3c9ce2941cca665837b8c920ab81c42ebce7" translate="yes" xml:space="preserve">
          <source>The 0-based index at which to insert the view. If not specified, appends the new view as the last entry.</source>
          <target state="translated">插入视图的基于0的索引。如果没有指定,则将新视图作为最后一个条目添加。</target>
        </trans-unit>
        <trans-unit id="9616203d2c83fbac5cabbb36c7f2845d852155d7" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to destroy. If not specified, the last view in the container is removed.</source>
          <target state="translated">要销毁的视图的基于0的索引。如果没有指定,则删除容器中的最后一个视图。</target>
        </trans-unit>
        <trans-unit id="b9fbb1d1b433e68cf1c7c1b6321eecebf8ac3993" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to detach. If not specified, the last view in the container is detached.</source>
          <target state="translated">要分离的视图的基于0的索引。如果没有指定,则分离容器中的最后一个视图。</target>
        </trans-unit>
        <trans-unit id="c5fb1f0cba49a032643a41c63159622cd0d6fc49" translate="yes" xml:space="preserve">
          <source>The 0-based index of the view to retrieve.</source>
          <target state="translated">要检索的视图的基于0的索引。</target>
        </trans-unit>
        <trans-unit id="5e66a0e6fb18ae6b407f336df6eccb9c647f8d95" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for this component instance.</source>
          <target state="translated">此组件实例的&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;依赖项注入器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cca3012370d419e31b6d75cf098ab8e4d8294696" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for this view container.</source>
          <target state="translated">此视图容器的&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;依赖项注入器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3a9d663e80b981cfdfa0a3ab710f96c7ea6bc4a5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;host view&lt;/a&gt; defined by the template for this component instance.</source>
          <target state="translated">模板为此组件实例定义的&lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;主机视图&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a6f17b18c5afe6cb997cfb00cbd23361054b4017" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for a router configuration.</source>
          <target state="translated">路由器配置的&lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI令牌&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c1fca9b2eeb7fcdb4b750c3d77842055cb90ffb3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/animations/animationoptions&quot;&gt;AnimationOptions&lt;/a&gt; interface in Angular animations enables you to create animations that you can reuse across different components.</source>
          <target state="translated">Angular动画中的&lt;a href=&quot;../api/animations/animationoptions&quot;&gt;AnimationOptions&lt;/a&gt;接口使您可以创建可在不同组件之间重复使用的动画。</target>
        </trans-unit>
        <trans-unit id="4619e6447ab97a35a308e3e9c3efbfde9436b6a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;&lt;code&gt;AsyncPipe&lt;/code&gt;&lt;/a&gt; subscribes (and unsubscribes) for you automatically.</source>
          <target state="translated">该&lt;a href=&quot;../api/common/asyncpipe&quot;&gt; &lt;code&gt;AsyncPipe&lt;/code&gt; &lt;/a&gt;订阅（和取消）为您自动。</target>
        </trans-unit>
        <trans-unit id="25ca1534cac8f8f9928b1c6bab67be9f0b8e9968" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt; subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.</source>
          <target state="translated">该&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;订阅到可观察或承诺，并返回它发出的最新值。发出新值时，管道会标记要检查的组件是否有更改。</target>
        </trans-unit>
        <trans-unit id="434328f2381c94483bc520c3c7a3f880f61ac182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt; provides an easy way to diagnose a mysteriously failing data binding or inspect an object for future binding.</source>
          <target state="translated">该&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;提供了一种简单的方法来诊断故障神秘数据绑定或检查的对象为未来的结合。</target>
        </trans-unit>
        <trans-unit id="13e16a47435e26b6e827703b1b62df1ed890aeda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; is an Angular service for interacting with the browser. You'll use it &lt;a href=&quot;toh-pt5#goback&quot;&gt;later&lt;/a&gt; to navigate back to the view that navigated here.</source>
          <target state="translated">该&lt;a href=&quot;../api/common/location&quot;&gt; &lt;code&gt;location&lt;/code&gt; &lt;/a&gt;是用于与浏览器进行交互的Angular服务。你会使用它&lt;a href=&quot;toh-pt5#goback&quot;&gt;后&lt;/a&gt;导航回到这里导航视图。</target>
        </trans-unit>
        <trans-unit id="63249ca017815dd12486b06a18f3fea91eecd138" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/common/ngforof&quot;&gt;&lt;code&gt;NgFor&lt;/code&gt; API guide&lt;/a&gt; describes additional &lt;code&gt;NgFor&lt;/code&gt; directive properties and context properties.</source>
          <target state="translated">该&lt;a href=&quot;../api/common/ngforof&quot;&gt; &lt;code&gt;NgFor&lt;/code&gt; API指南&lt;/a&gt;介绍了新增的 &lt;code&gt;NgFor&lt;/code&gt; 指令属性和上下文属性。</target>
        </trans-unit>
        <trans-unit id="5061a2f16c724493f890befa083acedce10d0a0d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt; is a test harness for interacting with the created component and its corresponding element.</source>
          <target state="translated">该&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;是用于与所创建的组件和它的对应的元件相互作用的测试工具。</target>
        </trans-unit>
        <trans-unit id="926862358e9552f80f5b48ee4a848ea4e9c99ef9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt; function accepts milliseconds and tickOptions as parameters, the millisecond (defaults to 0 if not provided) parameter represents how much the virtual clock advances. For example, if you have a &lt;code&gt;setTimeout(fn, 100)&lt;/code&gt; in a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test, you need to use tick(100) to trigger the fn callback. The tickOptions is an optional parameter with a property called &lt;code&gt;processNewMacroTasksSynchronously&lt;/code&gt; (defaults to true) that represents whether to invoke new generated macro tasks when ticking.</source>
          <target state="translated">的&lt;a href=&quot;../api/core/testing/tick&quot;&gt;蜱（）&lt;/a&gt;函数接受毫秒和tickOptions作为参数，毫秒（默认为0，如果不设置）参数表示多少虚拟时钟进展。例如，如果在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）测试中具有 &lt;code&gt;setTimeout(fn, 100)&lt;/code&gt; ，则需要使用tick（100）来触发fn回调。 tickOptions是一个可选参数，具有名为 &lt;code&gt;processNewMacroTasksSynchronously&lt;/code&gt; （默认为true）的属性，该属性表示在勾选时是否调用新生成的宏任务。</target>
        </trans-unit>
        <trans-unit id="c72408a82658e57f822ecfc68b94211f35dcd5c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/core/testing/tick&quot;&gt;tick()&lt;/a&gt; function is one of the Angular testing utilities that you import with &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;. It's a companion to &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and you can only call it within a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; body.</source>
          <target state="translated">在&lt;a href=&quot;../api/core/testing/tick&quot;&gt;蜱（）&lt;/a&gt;函数是您导入与角度的测试工具之一 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 。它是 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 的伴侣，您只能在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 主体中调用它。</target>
        </trans-unit>
        <trans-unit id="01125ede2a72c7a023c0c79cf22dbdcb8a08e761" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/forms/ngformselectorwarning&quot;&gt;&lt;code&gt;NgFormSelectorWarning&lt;/code&gt;&lt;/a&gt; directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">所述&lt;a href=&quot;../api/forms/ngformselectorwarning&quot;&gt; &lt;code&gt;NgFormSelectorWarning&lt;/code&gt; &lt;/a&gt;弃用的指令时仅仅用来显示警告 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 使用选择器。</target>
        </trans-unit>
        <trans-unit id="fc13089d19feff72cbef3b960dd6ca15d44a7b22" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/router/activatedroute&quot;&gt;&lt;code&gt;ActivatedRoute&lt;/code&gt;&lt;/a&gt; holds information about the route to this instance of the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. This component is interested in the route's parameters extracted from the URL. The &quot;id&quot; parameter is the &lt;code&gt;id&lt;/code&gt; of the hero to display.</source>
          <target state="translated">该&lt;a href=&quot;../api/router/activatedroute&quot;&gt; &lt;code&gt;ActivatedRoute&lt;/code&gt; &lt;/a&gt;持有约到的这种情况下，路由信息 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。该组件对从URL提取的路由参数感兴趣。&amp;ldquo; id&amp;rdquo;参数是要显示的英雄的 &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55ce4d8ac400340cf0b00697e51a55aba017c3e7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt; is an injected router service that makes use of observables to get information about a route path and parameters. For example, &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#url&quot;&gt;ActivatedRoute.url&lt;/a&gt;&lt;/code&gt; contains an observable that reports the route path or paths. Here's an example:</source>
          <target state="translated">该&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;是注入路由器服务，它利用观测的获取有关路线的路径和参数的信息。例如， &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#url&quot;&gt;ActivatedRoute.url&lt;/a&gt;&lt;/code&gt; 包含一个可观察到的报告路线的路径。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="94a856463bc03963a039b172b04033375f6ce5d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt; is an injected router service that makes use of observables to get information about a route path and parameters. For example, &lt;code&gt;ActivateRoute.url&lt;/code&gt; contains an observable that reports the route path or paths. Here's an example:</source>
          <target state="translated">该&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;是注入路由器服务，它利用观测的获取有关路线的路径和参数的信息。例如， &lt;code&gt;ActivateRoute.url&lt;/code&gt; 包含一个可观察对象，它报告一个或多个路由路径。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="62420df0957330734448927a844114ed73ad730f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../common/platformlocation&quot;&gt;&lt;code&gt;PlatformLocation&lt;/code&gt;&lt;/a&gt; providers that should be added when the &lt;a href=&quot;../common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; is used in a worker context.</source>
          <target state="translated">在工作程序上下文中使用&lt;a href=&quot;../common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;时应添加的&lt;a href=&quot;../common/platformlocation&quot;&gt; &lt;code&gt;PlatformLocation&lt;/code&gt; &lt;/a&gt;提供程序。</target>
        </trans-unit>
        <trans-unit id="841113ba19a40b0d963a4f69a5f2a5fd49cde66d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../guide/built-in-directives#ngFor&quot;&gt;&lt;code&gt;*ngFor&lt;/code&gt;&lt;/a&gt; is Angular's &lt;em&gt;repeater&lt;/em&gt; directive. It repeats the host element for each element in a list.</source>
          <target state="translated">在&lt;a href=&quot;../guide/built-in-directives#ngFor&quot;&gt; &lt;code&gt;*ngFor&lt;/code&gt; &lt;/a&gt;棱角分明的&lt;em&gt;中继&lt;/em&gt;指令。它为列表中的每个元素重复宿主元素。</target>
        </trans-unit>
        <trans-unit id="692c832c00b68e76def217cb437b093b42460681" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for a router configuration.</source>
          <target state="translated">路由器配置的&lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI令牌&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a5b5f0bd73969076e99683691442f0e883b4d411" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../guide/template-syntax#ngFor&quot;&gt;&lt;code&gt;*ngFor&lt;/code&gt;&lt;/a&gt; is Angular's &lt;em&gt;repeater&lt;/em&gt; directive. It repeats the host element for each element in a list.</source>
          <target state="translated">在&lt;a href=&quot;../guide/template-syntax#ngFor&quot;&gt; &lt;code&gt;*ngFor&lt;/code&gt; &lt;/a&gt;棱角分明的&lt;em&gt;中继&lt;/em&gt;指令。它为列表中的每个元素重复宿主元素。</target>
        </trans-unit>
        <trans-unit id="44d0769a18e136933991f4231b7cee526e0c337d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; can generate a new &lt;code&gt;HeroService&lt;/code&gt; class in the &lt;code&gt;src/app/heroes&lt;/code&gt; folder with this command.</source>
          <target state="translated">的&lt;a href=&quot;cli&quot;&gt;角CLI&lt;/a&gt;可以产生新的 &lt;code&gt;HeroService&lt;/code&gt; 在类 &lt;code&gt;src/app/heroes&lt;/code&gt; 夹与此命令。</target>
        </trans-unit>
        <trans-unit id="85c2a8f734f521cd885970594379f4f530c76b78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; generates the following basic &lt;code&gt;AppModule&lt;/code&gt; when creating a new app.</source>
          <target state="translated">创建新应用程序时，&lt;a href=&quot;cli&quot;&gt;Angular CLI会&lt;/a&gt;生成以下基本 &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc67777d512b5dac31422e8bb3c4a7dc2b7d55df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; is a command-line tool for managing the Angular development cycle. Use it to create the initial filesystem scaffolding for a &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; or &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;, and to run &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that add and modify code for initial generic versions of various elements. The CLI supports all stages of the development cycle, including building, testing, bundling, and deployment.</source>
          <target state="translated">该&lt;a href=&quot;cli&quot;&gt;角CLI&lt;/a&gt;是管理的角度开发周期一个命令行工具。使用它可以为&lt;a href=&quot;glossary#workspace&quot;&gt;工作空间&lt;/a&gt;或&lt;a href=&quot;glossary#project&quot;&gt;项目&lt;/a&gt;创建初始文件系统支架，并运行&lt;a href=&quot;glossary#schematic&quot;&gt;示意图&lt;/a&gt;以添加和修改各种元素的初始通用版本的代码。CLI支持开发周期的所有阶段，包括构建，测试，捆绑和部署。</target>
        </trans-unit>
        <trans-unit id="53c454c6660fa02027dfe2117f75d263dd75f716" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; provides support for polyfills. If you are not using the CLI to create your projects, see &lt;a href=&quot;browser-support#non-cli&quot;&gt;Polyfill instructions for non-CLI users&lt;/a&gt;.</source>
          <target state="translated">该&lt;a href=&quot;cli&quot;&gt;角CLI&lt;/a&gt;提供polyfills支持。如果您没有使用CLI创建项目，请参见&lt;a href=&quot;browser-support#non-cli&quot;&gt;Polyfill非CLI用户的说明&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b8bc93b8439f0639488ee5e20edda32b14cbf6ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli/run&quot;&gt;CLI command &lt;code&gt;ng run&lt;/code&gt;&lt;/a&gt; invokes a builder with a specific &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;. The &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration&lt;/a&gt; file, &lt;code&gt;angular.json&lt;/code&gt;, contains default configurations for built-in builders.</source>
          <target state="translated">该&lt;a href=&quot;cli/run&quot;&gt;CLI命令 &lt;code&gt;ng run&lt;/code&gt; &lt;/a&gt;调用与特定的助洗剂&lt;a href=&quot;glossary#target&quot;&gt;目标配置&lt;/a&gt;。该&lt;a href=&quot;workspace-config&quot;&gt;工作区配置&lt;/a&gt;文件， &lt;code&gt;angular.json&lt;/code&gt; ，包含内置的建设者默认配置。</target>
        </trans-unit>
        <trans-unit id="05d9831a7b65afdb6e46ec21735bf7261c84bb9d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;common/platformlocation&quot;&gt;&lt;code&gt;PlatformLocation&lt;/code&gt;&lt;/a&gt; providers that should be added when the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; is used in a worker context.</source>
          <target state="translated">在工作程序上下文中使用&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;时应添加的&lt;a href=&quot;common/platformlocation&quot;&gt; &lt;code&gt;PlatformLocation&lt;/code&gt; &lt;/a&gt;提供程序。</target>
        </trans-unit>
        <trans-unit id="6e3c6eba9a53ca9aa963f24e8da72427a5d33b5e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;dependency-injection&quot;&gt;Dependency injection&lt;/a&gt; guide provides in-depth information on how to construct an application such that each component class can acquire the services and objects it needs to perform its function.</source>
          <target state="translated">的&lt;a href=&quot;dependency-injection&quot;&gt;依赖注入&lt;/a&gt;指南提供有关如何构造应用程序，使得每个组件类可以获取的服务和它需要执行它的功能对象的深度信息。</target>
        </trans-unit>
        <trans-unit id="f6a99422b4801f11b80d164912fc1ddc851a004b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;form-validation&quot;&gt;Form validation guide&lt;/a&gt; covers the topic in more depth.</source>
          <target state="translated">该&lt;a href=&quot;form-validation&quot;&gt;表单验证指南&lt;/a&gt;涵盖了更深入的话题。</target>
        </trans-unit>
        <trans-unit id="1be8ea4557cdb3960829abd49f7a8d0bebceede4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;forms-overview&quot;&gt;two types of forms that Angular supports&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;forms-overview&quot;&gt;Angular支持&lt;/a&gt;的两种形式。</target>
        </trans-unit>
        <trans-unit id="98107507289185f8873753970de1dfd7b6bad5b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#aot&quot;&gt;AOT compiler&lt;/a&gt; is part of a build process that produces a small, fast, ready-to-run application package, typically for production.</source>
          <target state="translated">该&lt;a href=&quot;glossary#aot&quot;&gt;AOT编译器&lt;/a&gt;是产生一个小的，快速的，现成的运行的应用程序包，典型地用于生产构建过程的一部分。</target>
        </trans-unit>
        <trans-unit id="9c919d8f163d548522d373c5c6512d9de4f837b6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; uses schematics to generate and modify &lt;a href=&quot;glossary#project&quot;&gt;Angular projects&lt;/a&gt; and parts of projects.</source>
          <target state="translated">该&lt;a href=&quot;glossary#cli&quot;&gt;角CLI&lt;/a&gt;使用图表来生成和修改&lt;a href=&quot;glossary#project&quot;&gt;角项目&lt;/a&gt;和部分项目。</target>
        </trans-unit>
        <trans-unit id="5e080e6d0c2bf1f3b9d47f8c9e27b3be01bc9faa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#cli&quot;&gt;CLI&lt;/a&gt;&lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt; command&lt;/a&gt; creates a file system directory (the &quot;workspace root&quot;). In the workspace root, it also creates the workspace &lt;a href=&quot;glossary#configuration&quot;&gt;configuration file&lt;/a&gt; (&lt;code&gt;angular.json&lt;/code&gt;) and, by default, an initial application project with the same name.</source>
          <target state="translated">该&lt;a href=&quot;glossary#cli&quot;&gt;CLI &lt;/a&gt;&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; 命令&lt;/a&gt;创建一个文件系统目录（&amp;ldquo;工作区根&amp;rdquo;）。在工作空间根目录中，它还会创建工作空间&lt;a href=&quot;glossary#configuration&quot;&gt;配置文件&lt;/a&gt;（ &lt;code&gt;angular.json&lt;/code&gt; ），并且默认情况下会创建一个具有相同名称的初始应用程序项目。</target>
        </trans-unit>
        <trans-unit id="3e06550cbd83b66c246b5afad89f993ba760a306" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#jit&quot;&gt;JITcompiler&lt;/a&gt; compiles your app in the browser as the app loads. To support translation with the JIT compiler, you must do the following:</source>
          <target state="translated">当应用程序加载时，&lt;a href=&quot;glossary#jit&quot;&gt;JITcompiler会&lt;/a&gt;在浏览器中编译您的应用程序。要支持使用JIT编译器进行翻译，您必须执行以下操作：</target>
        </trans-unit>
        <trans-unit id="4380b18e380108bb934a12302c8ada614bb694c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;glossary#router&quot;&gt;router&lt;/a&gt; makes use of lazy loading to load child views only when the parent view is activated. Similarly, you can build custom elements that can be loaded into an Angular app when needed.</source>
          <target state="translated">该&lt;a href=&quot;glossary#router&quot;&gt;路由器&lt;/a&gt;利用延迟加载的负载孩子的意见，只有当父视图被激活。同样，您可以构建自定义元素，并在需要时将其加载到Angular应用中。</target>
        </trans-unit>
        <trans-unit id="0b1fe491d63ab7232b2eb74a097869b0b4d9d4d4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http#rxjs&quot;&gt;RxJS library&lt;/a&gt; offers several &lt;em&gt;retry&lt;/em&gt; operators that are worth exploring. The simplest is called &lt;code&gt;retry()&lt;/code&gt; and it automatically re-subscribes to a failed &lt;code&gt;Observable&lt;/code&gt; a specified number of times. &lt;em&gt;Re-subscribing&lt;/em&gt; to the result of an &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method call has the effect of reissuing the HTTP request.</source>
          <target state="translated">该&lt;a href=&quot;http#rxjs&quot;&gt;RxJS库&lt;/a&gt;提供了几个&lt;em&gt;重试&lt;/em&gt;运营，是值得探讨。最简单的方法称为 &lt;code&gt;retry()&lt;/code&gt; ，它会自动将失败的 &lt;code&gt;Observable&lt;/code&gt; 重新订阅指定的次数。&lt;em&gt;重新订阅&lt;/em&gt;到的结果 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的方法调用具有重新发出HTTP请求的效果。</target>
        </trans-unit>
        <trans-unit id="9137609ba3ac5720c2b2e7ec5b9d022983893e76" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://reactivex.io/documentation/operators/defer.html&quot;&gt;RxJS &lt;code&gt;defer()&lt;/code&gt; operator&lt;/a&gt; returns an observable. It takes a factory function that returns either a promise or an observable. When something subscribes to &lt;em&gt;defer&lt;/em&gt;'s observable, it adds the subscriber to a new observable created with that factory.</source>
          <target state="translated">该&lt;a href=&quot;http://reactivex.io/documentation/operators/defer.html&quot;&gt;RxJS &lt;code&gt;defer()&lt;/code&gt; 操作&lt;/a&gt;返回一个可观察的。它需要一个返回promise或observable的工厂函数。当某事物订阅了&lt;em&gt;defer&lt;/em&gt;的observable时，它将订阅者添加到使用该工厂创建的新observable中。</target>
        </trans-unit>
        <trans-unit id="2142d5fddf90916e933e41b73188b155d3c2310d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/config&quot;&gt;ng config&lt;/a&gt; command lets you set and retrieve configuration values from the command line, or you can edit the &lt;code&gt;angular.json&lt;/code&gt; file directly. Note that option names in the configuration file must use &lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase&lt;/a&gt;, while option names supplied to commands can use either camelCase or dash-case.</source>
          <target state="translated">该&lt;a href=&quot;https://angular.io/cli/config&quot;&gt;纳克配置&lt;/a&gt;命令允许您设置和命令行检索配置值，或者您可以编辑 &lt;code&gt;angular.json&lt;/code&gt; 直接文件。请注意，配置文件中的选项名称必须使用&lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase&lt;/a&gt;，而提供给命令的选项名称可以使用camelCase或破折号。</target>
        </trans-unit>
        <trans-unit id="9cc4f900dedfc14aac5069c4089743ff6b85cb0f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;ng generate&lt;/a&gt; and &lt;a href=&quot;https://angular.io/cli/add&quot;&gt;ng add&lt;/a&gt; commands take as an argument the artifact or library to be generated or added to the current project. In addition to any general options, each artifact or library defines its own options in a &lt;em&gt;schematic&lt;/em&gt;. Schematic options are supplied to the command in the same format as immediate command options.</source>
          <target state="translated">的&lt;a href=&quot;https://angular.io/cli/generate&quot;&gt;NG生成&lt;/a&gt;和&lt;a href=&quot;https://angular.io/cli/add&quot;&gt;纳克附加&lt;/a&gt;命令取为要被生成或添加到当前项目中的伪影或库的参数。除了任何常规选项外，每个工件或库都在&lt;em&gt;示意图中&lt;/em&gt;定义了自己的选项。示意图选项以与立即命令选项相同的格式提供给命令。</target>
        </trans-unit>
        <trans-unit id="c4ec4eb8426875bd373f4cb3f235396c3c74c24b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt; command creates an &lt;em&gt;Angular workspace&lt;/em&gt; folder and generates a new app skeleton. A workspace can contain multiple apps and libraries. The initial app created by the &lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt; command is at the top level of the workspace. When you generate an additional app or library in a workspace, it goes into a &lt;code&gt;projects/&lt;/code&gt; subfolder.</source>
          <target state="translated">的&lt;a href=&quot;https://angular.io/cli/new&quot;&gt;纳克新&lt;/a&gt;命令创建一个&lt;em&gt;角的工作区&lt;/em&gt;的文件夹，并生成一个新的应用骨架。一个工作空间可以包含多个应用程序和库。&lt;a href=&quot;https://angular.io/cli/new&quot;&gt;ng new&lt;/a&gt;命令创建的初始应用程序位于工作空间的顶层。当您在工作空间中生成其他应用程序或库时，它将进入 &lt;code&gt;projects/&lt;/code&gt; 子文件夹。</target>
        </trans-unit>
        <trans-unit id="eef7029863bcbf19c4ab8578f83e597970534753" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:not&quot;&gt;&lt;code&gt;:not&lt;/code&gt; pseudo-class&lt;/a&gt; in &lt;code&gt;By.css('h2:not([highlight])')&lt;/code&gt; helps find &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; elements that &lt;em&gt;do not&lt;/em&gt; have the directive. &lt;code&gt;By.css('*:not([highlight])')&lt;/code&gt; finds &lt;em&gt;any&lt;/em&gt; element that does not have the directive.</source>
          <target state="translated">的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:not&quot;&gt; &lt;code&gt;:not&lt;/code&gt; 伪类&lt;/a&gt;在 &lt;code&gt;By.css('h2:not([highlight])')&lt;/code&gt; 有助于找到 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 的元素&lt;em&gt;不&lt;/em&gt;具有指令。 &lt;code&gt;By.css('*:not([highlight])')&lt;/code&gt; 查找没有该指令的&lt;em&gt;任何&lt;/em&gt;元素。</target>
        </trans-unit>
        <trans-unit id="67db0ba49bc8041f182dbf0749b95273e0b85a5b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors&quot;&gt;CSS element selector&lt;/a&gt;, &lt;code&gt;'app-heroes'&lt;/code&gt;, matches the name of the HTML element that identifies this component within a parent component's template.</source>
          <target state="translated">在&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors&quot;&gt;CSS元素选择&lt;/a&gt;， &lt;code&gt;'app-heroes'&lt;/code&gt; ，匹配的HTML元素的名称，它是父组件的模板中标识此组件。</target>
        </trans-unit>
        <trans-unit id="3f5616648fe04a251f0e70271a427c668c007e56" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing&quot;&gt; Chrome DevTools Network Performance page&lt;/a&gt; is a good place to start learning about measuring performance.</source>
          <target state="translated">该&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing&quot;&gt;铬DevTools网络性能页&lt;/a&gt;是开始学习有关的测量性能的好地方。</target>
        </trans-unit>
        <trans-unit id="43ba57fe4131496568fba480d9c4deb2e30cf2b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm package manager&lt;/a&gt; is used to distribute and load Angular modules and libraries.</source>
          <target state="translated">所述&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;NPM包管理器&lt;/a&gt;用于分配和加载角模块和库。</target>
        </trans-unit>
        <trans-unit id="ac72c33ceb0a0c850781b84bc6144a1744f50498" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;official JavaScript language specification&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;官方的JavaScript语言规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac53f3cd4e4f6d59ebf10978a8ce8de90ae0e6a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code, such as &lt;code&gt;USD&lt;/code&gt; for the US dollar and &lt;code&gt;EUR&lt;/code&gt; for the euro.</source>
          <target state="translated">在&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt;货币代码，如 &lt;code&gt;USD&lt;/code&gt; 对美元和 &lt;code&gt;EUR&lt;/code&gt; 为欧元。</target>
        </trans-unit>
        <trans-unit id="385f6cc4dec76396876f06188f4cfe7a64f563f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code, such as &lt;code&gt;USD&lt;/code&gt; for the US dollar and &lt;code&gt;EUR&lt;/code&gt; for the euro. Used to determine the number of digits in the decimal part.</source>
          <target state="translated">在&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt;货币代码，如 &lt;code&gt;USD&lt;/code&gt; 对美元和 &lt;code&gt;EUR&lt;/code&gt; 为欧元。用于确定小数部分的位数。</target>
        </trans-unit>
        <trans-unit id="c7822350707f34166034f9e5cf47f46ca41913fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/angular/angular/blob/master/aio/README.md&quot;&gt;aio/README.md&lt;/a&gt; explains how to install and use the tools to edit and test your changes.</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/angular/angular/blob/master/aio/README.md&quot;&gt;AIO / README.md&lt;/a&gt;介绍如何安装和使用这些工具来编辑和测试您的更改。</target>
        </trans-unit>
        <trans-unit id="042567219e09d7a75fac40b8e05521dcdb3e3d9c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales&quot;&gt;Angular repository&lt;/a&gt; files (&lt;code&gt;@angular/common/locales&lt;/code&gt;) contain most of the locale data that you need, but some advanced formatting options require additional locale data. Global variants of the locale data are available in &lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales/global&quot;&gt;&lt;code&gt;@angular/common/locales/global&lt;/code&gt;&lt;/a&gt;. The following example imports the global variants for French (&lt;code&gt;fr&lt;/code&gt;):</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales&quot;&gt;角库&lt;/a&gt;文件（ &lt;code&gt;@angular/common/locales&lt;/code&gt; ）包含大部分你所需要的语言环境数据，但一些高级格式化选项需要额外的语言环境数据。语言环境数据的全局变体位于&lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales/global&quot;&gt; &lt;code&gt;@angular/common/locales/global&lt;/code&gt; &lt;/a&gt;。以下示例导入了法语（ &lt;code&gt;fr&lt;/code&gt; ）的全局变体：</target>
        </trans-unit>
        <trans-unit id="fe28f1e5bb4819d9667ea039cc2b06cc369de26a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales&quot;&gt;Angular repository&lt;/a&gt; includes common locales. You can change your app's source locale for the build by setting the source locale in the &lt;code&gt;sourceLocale&lt;/code&gt; field of your app's &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration&lt;/a&gt; file (&lt;code&gt;angular.json&lt;/code&gt;). The build process (described in &lt;a href=&quot;i18n#merge&quot;&gt;Merge translations into the app&lt;/a&gt; in this guide) uses your app's &lt;code&gt;angular.json&lt;/code&gt; file to automatically set the &lt;a href=&quot;../api/core/locale_id&quot;&gt;&lt;code&gt;LOCALE_ID&lt;/code&gt;&lt;/a&gt; token and load the locale data.</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales&quot;&gt;角库&lt;/a&gt;包括共同的语言环境。您可以通过在应用程序的&lt;a href=&quot;workspace-config&quot;&gt;工作区配置&lt;/a&gt;文件（ &lt;code&gt;angular.json&lt;/code&gt; ）的 &lt;code&gt;sourceLocale&lt;/code&gt; 字段中设置源语言环境来更改应用程序的源语言环境。构建过程（在本指南的&amp;ldquo;&lt;a href=&quot;i18n#merge&quot;&gt;将翻译合并到应用程序&amp;rdquo;&lt;/a&gt;中进行了描述）使用您应用程序的 &lt;code&gt;angular.json&lt;/code&gt; 文件自动设置&lt;a href=&quot;../api/core/locale_id&quot;&gt; &lt;code&gt;LOCALE_ID&lt;/code&gt; &lt;/a&gt;令牌并加载区域设置数据。</target>
        </trans-unit>
        <trans-unit id="cc21ed5107cd6c26d897a6320dc42ef7186143fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/danvk/source-map-explorer/blob/master/README.md&quot;&gt;source-map-explorer&lt;/a&gt; tool is a great way to inspect the generated JavaScript bundles after a production build.</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/danvk/source-map-explorer/blob/master/README.md&quot;&gt;源地图探险&lt;/a&gt;工具后生产版本检查生成的JavaScript束的好方法。</target>
        </trans-unit>
        <trans-unit id="64a5e24960a46bfcb09f65cc4c7ba6207874f001" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS Style Guide&lt;/a&gt; collects patterns and practices that have been proven to result in cleaner and more maintainable AngularJS applications. It contains a wealth of information about how to write and organize AngularJS code - and equally importantly - how &lt;strong&gt;not&lt;/strong&gt; to write and organize AngularJS code.</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS风格指南&lt;/a&gt;收集的模式和已被证明更清洁和更易于维护AngularJS应用实践。它包含了大量有关如何编写和组织AngularJS代码的信息-同样重要的是-如何&lt;strong&gt;不&lt;/strong&gt;编写和组织AngularJS代码。</target>
        </trans-unit>
        <trans-unit id="698e33b75bcc5c76bbf260a0e698ed7db2e2c779" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure&quot;&gt;Folders-by-Feature Structure&lt;/a&gt; and &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity&quot;&gt;Modularity&lt;/a&gt; rules define similar principles on a higher level of abstraction: Different parts of the application should reside in different directories and NgModules.</source>
          <target state="translated">该&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure&quot;&gt;文件夹按功能结构&lt;/a&gt;和&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity&quot;&gt;模块化&lt;/a&gt;规则定义在更高的抽象水平相似的原理：应用程序的不同部分应该驻留在不同的目录和NgModules。</target>
        </trans-unit>
        <trans-unit id="1eaf3159835bb387f70ff080a284feaacf450754" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility&quot;&gt;Rule of 1&lt;/a&gt; states that there should be one component per file. This not only makes components easy to navigate and find, but will also allow us to migrate them between languages and frameworks one at a time. In this example application, each controller, component, service, and filter is in its own source file.</source>
          <target state="translated">在&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility&quot;&gt;1条的规则&lt;/a&gt;规定，应该有每个文件一个组成部分。这不仅使组件易于导航和查找，而且使我们能够一次在一种语言和框架之间迁移它们。在此示例应用程序中，每个控制器，组件，服务和过滤器均位于其自己的源文件中。</target>
        </trans-unit>
        <trans-unit id="50920f3757c6270704876b419b74fac4803e437f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; library, which is maintained by the Angular team, is a suite of reusable UI components that aims to be fully accessible. The &lt;a href=&quot;https://material.angular.io/cdk/categories&quot;&gt;Component Development Kit (CDK)&lt;/a&gt; includes the &lt;code&gt;a11y&lt;/code&gt; package that provides tools to support various areas of accessibility. For example:</source>
          <target state="translated">由Angular团队维护的&lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt;库是一组旨在完全访问的可重用UI组件。该&lt;a href=&quot;https://material.angular.io/cdk/categories&quot;&gt;组件开发工具包（CDK）&lt;/a&gt;包括 &lt;code&gt;a11y&lt;/code&gt; 包，提供了工具，以支持无障碍的各个领域。例如：</target>
        </trans-unit>
        <trans-unit id="2368773fec7fbf22cc5ca45d72df2fac8cec9aea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/@types/angular&quot;&gt;AngularJS 1.x type definitions&lt;/a&gt; you installed are not officially maintained by the Angular team, but are quite comprehensive. It is possible to make an AngularJS 1.x application fully type-annotated with the help of these definitions.</source>
          <target state="translated">您安装的&lt;a href=&quot;https://www.npmjs.com/package/@types/angular&quot;&gt;AngularJS 1.x类型定义&lt;/a&gt;不是Angular团队正式维护的，但是非常全面。借助这些定义，可以使AngularJS 1.x应用程序具有完整的类型注释。</target>
        </trans-unit>
        <trans-unit id="df8b0b589273f8464eedbabbe41632c3bb97724d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest&lt;/a&gt; tool is another good choice that can also help verify that your deployment was successful.</source>
          <target state="translated">该&lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest&lt;/a&gt;工具是另一个不错的选择也可以帮助验证您的部署是否成功。</target>
        </trans-unit>
        <trans-unit id="161a17de166ad5ba5f6d88e6af9c412c61399244" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;i18n#plurals-alternates&quot;&gt;&lt;code&gt;plural&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; ICU expressions&lt;/a&gt; are extracted as additional messages, so you must translate them separately.</source>
          <target state="translated">该&lt;a href=&quot;i18n#plurals-alternates&quot;&gt; &lt;code&gt;plural&lt;/code&gt; 和 &lt;code&gt;select&lt;/code&gt; ICU表现&lt;/a&gt;被提取为其他消息，所以你必须将它们分开翻译。</target>
        </trans-unit>
        <trans-unit id="dd5702047983a31430a247a80e4531d5efed5bf6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;language-service&quot;&gt;Angular language service&lt;/a&gt; analyzes component templates and provides type and error information that TypeScript-aware editors can use to improve the developer's experience. For example, see the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;Angular language service extension for VS Code&lt;/a&gt;.</source>
          <target state="translated">该&lt;a href=&quot;language-service&quot;&gt;角语言服务&lt;/a&gt;分析组件模板，并提供类型和错误信息的打字稿感知编辑器可以用它来提高开发人员的经验。例如，请参阅&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;VS Code&lt;/a&gt;的Angular语言服务扩展。</target>
        </trans-unit>
        <trans-unit id="c536f9cf54af98d090a383c28c9f1b8859ffc4c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt; looks inside component templates for other components, directives, and pipes. When it finds one, that's a template reference.</source>
          <target state="translated">该&lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;角编译器&lt;/a&gt;的内部结构是其他组件，指令和管道组件模板。找到一个模板引用。</target>
        </trans-unit>
        <trans-unit id="5ca459b688d8b857f90f91b0f0dcef341faa01ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt; guide provides in-depth information on the modular structure of an Angular application.</source>
          <target state="translated">所述&lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;指南提供上的角应用的模块化结构的深度信息。</target>
        </trans-unit>
        <trans-unit id="9ed0542f9d7598d8d32e3cd36f92e1e81b8c6ebb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;router&quot;&gt;Routing and navigation&lt;/a&gt; guide provides in-depth information on how to construct applications that allow a user to navigate to different &lt;a href=&quot;glossary#view&quot;&gt;views&lt;/a&gt; within your single-page app.</source>
          <target state="translated">《&lt;a href=&quot;router&quot;&gt;路由和导航》&lt;/a&gt;指南提供了有关如何构建应用程序的深入信息，这些应用程序允许用户导航到单页应用程序中的不同&lt;a href=&quot;glossary#view&quot;&gt;视图&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb28f6b5f83114401b60f2c14cb2d1105c66e707" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;router#route-parameters&quot;&gt;Router&lt;/a&gt; guide covers &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; in more detail.</source>
          <target state="translated">该&lt;a href=&quot;router#route-parameters&quot;&gt;路由器&lt;/a&gt;指南涵盖 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; 的更多细节。</target>
        </trans-unit>
        <trans-unit id="932c750d92edcbfd87678995b6a64698cdfc724d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;router-tutorial-toh#activated-route-in-action&quot;&gt;ActivatedRoute in action&lt;/a&gt; section of the &lt;a href=&quot;router-tutorial-toh&quot;&gt;Router tutorial: tour of heroes&lt;/a&gt; guide covers &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; in more detail.</source>
          <target state="translated">&lt;a href=&quot;router-tutorial-toh&quot;&gt;路由器教程：英雄之旅&lt;/a&gt;指南中的&lt;a href=&quot;router-tutorial-toh#activated-route-in-action&quot;&gt;ActivatedRoute的实际操作&lt;/a&gt;部分，更详细地介绍了 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="612999299386c884d2210a578d58533310b542c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;rx-library&quot;&gt;RxJS library&lt;/a&gt; offers several &lt;em&gt;retry&lt;/em&gt; operators. For example, the &lt;code&gt;retry()&lt;/code&gt; operator automatically re-subscribes to a failed &lt;code&gt;Observable&lt;/code&gt; a specified number of times. &lt;em&gt;Re-subscribing&lt;/em&gt; to the result of an &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method call has the effect of reissuing the HTTP request.</source>
          <target state="translated">该&lt;a href=&quot;rx-library&quot;&gt;RxJS库&lt;/a&gt;提供了几个&lt;em&gt;重试&lt;/em&gt;运营。例如， &lt;code&gt;retry()&lt;/code&gt; 运算符自动将失败的 &lt;code&gt;Observable&lt;/code&gt; 重新订阅指定的次数。&lt;em&gt;重新订阅&lt;/em&gt;到的结果 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的方法调用具有重新发出HTTP请求的效果。</target>
        </trans-unit>
        <trans-unit id="b3312268095b08aee685e29f5fcc7dcf523b79e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;structural-directives#ngFor&quot;&gt;&lt;code&gt;NgFor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;structural-directives#ngSwitch&quot;&gt;&lt;code&gt;NgSwitch...&lt;/code&gt;&lt;/a&gt; directives follow the same pattern.</source>
          <target state="translated">该&lt;a href=&quot;structural-directives#ngFor&quot;&gt; &lt;code&gt;NgFor&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;structural-directives#ngSwitch&quot;&gt; &lt;code&gt;NgSwitch...&lt;/code&gt; &lt;/a&gt;指令遵循相同的模式。</target>
        </trans-unit>
        <trans-unit id="328df52bf1bc4aa2fbdbe3f20d793a9859019f15" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt; and related topics contain details about how to display your component data when and where you want it within a view, and how to collect input from users that you can respond to.</source>
          <target state="translated">该&lt;a href=&quot;template-syntax&quot;&gt;模板语法&lt;/a&gt;以及相关的主题包含有关如何显示组件的数据何时何地都在视图中想要它，以及如何收集从输入的用户，你可以回应的细节。</target>
        </trans-unit>
        <trans-unit id="b6a97ff29bdea97643b100fb7e52172c9fc39e23" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#feature-module-import&quot;&gt;previous test configuration&lt;/a&gt; replaces the real &lt;code&gt;HeroService&lt;/code&gt; with a &lt;code&gt;TestHeroService&lt;/code&gt; that intercepts server requests and fakes their responses.</source>
          <target state="translated">在&lt;a href=&quot;testing#feature-module-import&quot;&gt;之前的测试配置&lt;/a&gt;取代了真正的 &lt;code&gt;HeroService&lt;/code&gt; 与 &lt;code&gt;TestHeroService&lt;/code&gt; ，其截取服务器请求和假货他们的答复。</target>
        </trans-unit>
        <trans-unit id="03ec5cd730c49c54a94a2e4b7faaf1ebb0e7e823" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#routing-component&quot;&gt;discussion below&lt;/a&gt; covers testing components that require the router.</source>
          <target state="translated">以下&lt;a href=&quot;testing#routing-component&quot;&gt;讨论&lt;/a&gt;涵盖了需要路由器的测试组件。</target>
        </trans-unit>
        <trans-unit id="adf4fe467b8f5c7727686265229a15c837edbaa2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing#tests-w-test-double&quot;&gt;&lt;em&gt;HeroDetailComponent&lt;/em&gt; tests&lt;/a&gt; in an earlier section demonstrate how &lt;code&gt;createComponent&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt; keep the tests short and &lt;em&gt;on message&lt;/em&gt;. There are no distractions: no waiting for promises to resolve and no searching the DOM for element values to compare.</source>
          <target state="translated">前面一节中的&lt;a href=&quot;testing#tests-w-test-double&quot;&gt;&lt;em&gt;HeroDetailComponent&lt;/em&gt;测试&lt;/a&gt;演示了 &lt;code&gt;createComponent&lt;/code&gt; 和 &lt;code&gt;page&lt;/code&gt; 如何使测试简短&lt;em&gt;且不影响&lt;/em&gt;&lt;em&gt;消息&lt;/em&gt;。没有干扰：没有等待promise解析，也没有在DOM中搜索要比较的元素值。</target>
        </trans-unit>
        <trans-unit id="814984fbbd12a04158aa41dd4d622caaf89cfec9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing-components-scenarios#feature-module-import&quot;&gt;previous test configuration&lt;/a&gt; replaces the real &lt;code&gt;HeroService&lt;/code&gt; with a &lt;code&gt;TestHeroService&lt;/code&gt; that intercepts server requests and fakes their responses.</source>
          <target state="translated">在&lt;a href=&quot;testing-components-scenarios#feature-module-import&quot;&gt;之前的测试配置&lt;/a&gt;取代了真正的 &lt;code&gt;HeroService&lt;/code&gt; 与 &lt;code&gt;TestHeroService&lt;/code&gt; ，其截取服务器请求和假货他们的答复。</target>
        </trans-unit>
        <trans-unit id="2193a16ae16eaf6a890ddabf1d28738394df810a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing-components-scenarios#routing-component&quot;&gt;discussion below&lt;/a&gt; covers testing components that require the router.</source>
          <target state="translated">以下&lt;a href=&quot;testing-components-scenarios#routing-component&quot;&gt;讨论&lt;/a&gt;涵盖了需要路由器的测试组件。</target>
        </trans-unit>
        <trans-unit id="2800695009a6f8b164798656b9a25018e99e93ba" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;testing-components-scenarios#tests-w-test-double&quot;&gt;&lt;em&gt;HeroDetailComponent&lt;/em&gt; tests&lt;/a&gt; in an earlier section demonstrate how &lt;code&gt;createComponent&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt; keep the tests short and &lt;em&gt;on message&lt;/em&gt;. There are no distractions: no waiting for promises to resolve and no searching the DOM for element values to compare.</source>
          <target state="translated">前面一节中的&lt;a href=&quot;testing-components-scenarios#tests-w-test-double&quot;&gt;&lt;em&gt;HeroDetailComponent&lt;/em&gt;测试&lt;/a&gt;演示了 &lt;code&gt;createComponent&lt;/code&gt; 和 &lt;code&gt;page&lt;/code&gt; 如何使测试简短&lt;em&gt;且不影响&lt;/em&gt;&lt;em&gt;消息&lt;/em&gt;。没有分心的事情：没有等待承诺解决，也没有在DOM中搜索要比较的元素值。</target>
        </trans-unit>
        <trans-unit id="5990c9bc12604596a4545a9863216ed43b448b8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;toh-pt4&quot;&gt;&lt;code&gt;HeroService&lt;/code&gt;&lt;/a&gt; gets hero data from the remote server and this component will use it to get the hero-to-display.</source>
          <target state="translated">该&lt;a href=&quot;toh-pt4&quot;&gt; &lt;code&gt;HeroService&lt;/code&gt; &lt;/a&gt;从远程服务器获取英雄数据和该组件将使用它来获取英雄到显示器。</target>
        </trans-unit>
        <trans-unit id="5350e6643395322b14e7706197ffdb8056e64e58" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt; is the foundation for this walkthrough.</source>
          <target state="translated">《&lt;a href=&quot;tutorial&quot;&gt;英雄之旅》教程&lt;/a&gt;是本演练的基础。</target>
        </trans-unit>
        <trans-unit id="316fba5018bee07b56bf00591644765f20e7866a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;upgrade#change-detection&quot;&gt;Change Detection&lt;/a&gt; section of &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; only applies to apps that use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;. Though you handle change detection differently with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;, which is the focus of this guide, reading the &lt;a href=&quot;upgrade#change-detection&quot;&gt;Change Detection&lt;/a&gt; section provides helpful context for what follows.</source>
          <target state="translated">&lt;a href=&quot;upgrade&quot;&gt;从AngularJS升级的&lt;/a&gt; &amp;ldquo; &lt;a href=&quot;upgrade#change-detection&quot;&gt;更改检测&amp;rdquo;&lt;/a&gt;部分仅适用于使用 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 的应用程序。尽管您使用 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; （）处理变更检测的方式有所不同，这是本指南的重点，但阅读&amp;ldquo; &lt;a href=&quot;upgrade#change-detection&quot;&gt;变更检测&amp;rdquo;&lt;/a&gt;部分将为后续内容提供有用的上下文。</target>
        </trans-unit>
        <trans-unit id="ef97b3d65e2c4444165b198673fd089f9dda953a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt;&lt;/a&gt; file configures all projects in a &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;.</source>
          <target state="translated">该&lt;a href=&quot;workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; &lt;/a&gt;文件配置中的所有项目&lt;a href=&quot;glossary#workspace&quot;&gt;工作区&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c7ea24427c05bad52d78a47c4199fcf3ce050def" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;!&lt;/code&gt; prefix marks the pattern as being negative, meaning that only files that don't match the pattern will be included.</source>
          <target state="translated">该 &lt;code&gt;!&lt;/code&gt; 前缀将模式标记为否定，这意味着将仅包括与模式不匹配的文件。</target>
        </trans-unit>
        <trans-unit id="61301904b5174ce43d2617b3dc5fe99400fa5df9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#docplaster&lt;/code&gt; at the top is another bit of code snippet markup. It tells the processor how to join the fragments into a single snippet.</source>
          <target state="translated">顶部的 &lt;code&gt;#docplaster&lt;/code&gt; 是另一段代码片段标记。它告诉处理器如何将片段连接到单个片段中。</target>
        </trans-unit>
        <trans-unit id="fbad649456e004310378e45c2eabd90470f600a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#timer&lt;/code&gt; local variable is gone from the component metadata. Instead, bind the buttons to the parent component's own &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods and present the ticking seconds in an interpolation around the parent component's &lt;code&gt;seconds&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;#timer&lt;/code&gt; 局部变量是从组件元数据了。而是将按钮绑定到父组件自己的 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 方法，并在父组件的 &lt;code&gt;seconds&lt;/code&gt; 方法周围的插值中显示滴答秒数。</target>
        </trans-unit>
        <trans-unit id="6f19dd2af8f997aeeaa2940384f71556312a3db5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; cast function also works with &lt;code&gt;this&lt;/code&gt; to allow access to undeclared members of the component.</source>
          <target state="translated">在 &lt;code&gt;$any()&lt;/code&gt; 转换函数也适用 &lt;code&gt;this&lt;/code&gt; 允许访问组件的未申报的成员。</target>
        </trans-unit>
        <trans-unit id="bee6c20e056eff2c3bd8d36a0225478bb77d96a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; cast function works anywhere in a binding expression where a method call is valid.</source>
          <target state="translated">在 &lt;code&gt;$any()&lt;/code&gt; 投功能可在绑定表达式，其中一个方法调用是有效的任何地方。</target>
        </trans-unit>
        <trans-unit id="e59f595616973095579aee71daee6655f4b357cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$any()&lt;/code&gt; type cast function</source>
          <target state="translated">在 &lt;code&gt;$any()&lt;/code&gt; 类型转换功能</target>
        </trans-unit>
        <trans-unit id="08d2a4e531fa3e5eff0d209be4b06dd762f5ed9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; contains the data that the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; in the child template UI.</source>
          <target state="translated">在 &lt;code&gt;$event&lt;/code&gt; 中包含的数据，用户类型分为 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 在子模板UI。</target>
        </trans-unit>
        <trans-unit id="6e6759020b810407949d5836009ada40b0a64c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; is now a specific &lt;code&gt;KeyboardEvent&lt;/code&gt;. Not all elements have a &lt;code&gt;value&lt;/code&gt; property so it casts &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; to an input element. The &lt;code&gt;OnKey&lt;/code&gt; method more clearly expresses what it expects from the template and how it interprets the event.</source>
          <target state="translated">在 &lt;code&gt;$event&lt;/code&gt; 现在是一个特定 &lt;code&gt;KeyboardEvent&lt;/code&gt; 。并非所有元素都具有 &lt;code&gt;value&lt;/code&gt; 属性，因此它将 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 强制转换为输入元素。在 &lt;code&gt;OnKey&lt;/code&gt; 方法更清楚地表达了它从模板期望，以及它如何解释事件。</target>
        </trans-unit>
        <trans-unit id="fb618e77a8ea433b67f684a906bcc712490eee9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; object.</source>
          <target state="translated">在 &lt;code&gt;$event&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="5af64ddd170cb432546c0bf2252c448f993a883b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; variable can be used in outputs to gain access to the object that was emitted. In this case it will be the &lt;code&gt;Hero&lt;/code&gt; object, because that is what was passed to &lt;code&gt;this.deleted.emit()&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;$event&lt;/code&gt; 变量可以在输出被用来获得到被发射的对象。在这种情况下，它将是 &lt;code&gt;Hero&lt;/code&gt; 对象，因为这就是传递给 &lt;code&gt;this.deleted.emit()&lt;/code&gt; 的对象。</target>
        </trans-unit>
        <trans-unit id="cba3bb04b1d061aec5076af6326126a7777dd593" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; variable contains the data of the &lt;code&gt;SizerComponent.sizeChange&lt;/code&gt; event. Angular assigns the &lt;code&gt;$event&lt;/code&gt; value to the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; when the user clicks the buttons.</source>
          <target state="translated">在 &lt;code&gt;$event&lt;/code&gt; 变量包含的数据 &lt;code&gt;SizerComponent.sizeChange&lt;/code&gt; 事件。当用户单击按钮时，Angular将 &lt;code&gt;$event&lt;/code&gt; 值分配给 &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c908b77e7e21c8de968461c845115562a2330563" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$event&lt;/code&gt; variable contains the payload of the &lt;code&gt;SizerComponent.sizeChange&lt;/code&gt; event. Angular assigns the &lt;code&gt;$event&lt;/code&gt; value to the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; when the user clicks the buttons.</source>
          <target state="translated">在 &lt;code&gt;$event&lt;/code&gt; 变量包含的有效载荷 &lt;code&gt;SizerComponent.sizeChange&lt;/code&gt; 事件。当用户单击按钮时，Angular将 &lt;code&gt;$event&lt;/code&gt; 值分配给 &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e927e8d8b89416fbc605ae8612e17fa394a698fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$schema&lt;/code&gt; path is relative to the Angular Devkit collection schema.</source>
          <target state="translated">在 &lt;code&gt;$schema&lt;/code&gt; 路径是相对于角度的devkit收集模式。</target>
        </trans-unit>
        <trans-unit id="9ee805ece33742d4de7f87a3da7383414135c5e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$schema&lt;/code&gt; property specifies the schema that the CLI uses for validation.</source>
          <target state="translated">在 &lt;code&gt;$schema&lt;/code&gt; 属性指定的模式的CLI应用进行验证。</target>
        </trans-unit>
        <trans-unit id="f59b81aa69f3638da4cee040a2bbe32b8dae6d8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; here represents an instance of a template. Notice that each component has its own &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">此处的 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 表示模板的实例。请注意，每个组件都有其自己的 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41ef35abf6bdecb3d0d2f8c0b5756abff98e77f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; container has an attribute directive that contains data about active routes and their states, based on the &lt;code&gt;data&lt;/code&gt; property that we set in the route configuration.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 容器具有包含有关激活路由和它们的状态，基于该数据的属性指令 &lt;code&gt;data&lt;/code&gt; 属性，我们在路由配置设置。</target>
        </trans-unit>
        <trans-unit id="79e422d60ab9df0e430e6c9d9a891769e0dfc46a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; tells the router where to display routed views.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 告诉路由器在哪里显示路由视图。</target>
        </trans-unit>
        <trans-unit id="2e9c175f01fedfce94b31b57ef2e44a941e53e82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; currently provides the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array with the value of 🐶 (puppy). Because the injector has only to look at the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s &lt;code&gt;ElementInjector&lt;/code&gt; for the &lt;code&gt;AnimalService&lt;/code&gt;, it never sees the 🐳 (whale).</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 目前提供 &lt;code&gt;AnimalService&lt;/code&gt; 中 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 阵列🐶（小狗）的值。因为注入器只需要查看 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 的 &lt;code&gt;ElementInjector&lt;/code&gt; 作为 &lt;code&gt;AnimalService&lt;/code&gt; ，就不会看到🐳（鲸鱼）。</target>
        </trans-unit>
        <trans-unit id="299ff11abab01f6a5104c411278663cb0347e746" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; currently provides the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;viewProviders&lt;/code&gt; array with the value of 🐶 (puppy). Because the injector has only to look at the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s &lt;code&gt;ElementInjector&lt;/code&gt; for the &lt;code&gt;AnimalService&lt;/code&gt;, it never sees the 🐳 (whale).</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 目前提供 &lt;code&gt;AnimalService&lt;/code&gt; 中 &lt;code&gt;viewProviders&lt;/code&gt; 阵列🐶（小狗）的值。因为注入器只需要查看 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 的 &lt;code&gt;ElementInjector&lt;/code&gt; 的 &lt;code&gt;AnimalService&lt;/code&gt; ，就不会看到🐳（鲸鱼）。</target>
        </trans-unit>
        <trans-unit id="238522607dbec39c2b10c2b4a047546ae6e03124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; tag in the example is an element that represents a new component, &lt;code&gt;HeroDetailComponent&lt;/code&gt;. &lt;code&gt;HeroDetailComponent&lt;/code&gt; (code not shown) defines the hero-detail child view of &lt;code&gt;HeroListComponent&lt;/code&gt;. Notice how custom components like this mix seamlessly with native HTML in the same layouts.</source>
          <target state="translated">示例中的 &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; 标记是表示新组件 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 的元素。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; （未示出码）定义的英雄细节子视图 &lt;code&gt;HeroListComponent&lt;/code&gt; 。请注意，这样的自定义组件如何在相同布局中与本机HTML无缝混合。</target>
        </trans-unit>
        <trans-unit id="c7f879d05e5a0e9a43e0ab7560f395d53f343b78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt;&lt;code&gt;path&lt;/code&gt; should end with a &quot;/&quot;, as browsers ignore characters in the &lt;code&gt;path&lt;/code&gt; that follow the right-most &quot;/&quot;.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; &lt;code&gt;path&lt;/code&gt; 应该以&amp;ldquo;/&amp;rdquo;结尾，如浏览器忽略字符 &lt;code&gt;path&lt;/code&gt; 下面的最右边的&amp;ldquo;/&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="34fe98653d5a2333f28a36d168f80667c0dd14c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; components won't display a source code file unless it has a &lt;em&gt;#docregion&lt;/em&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; 组件将不会显示源代码文件，除非它有一个&lt;em&gt;#docregion&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4515f8669986d5b2cf1b5456ad548ee8b26fa2f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; are in the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; embedded view. In basic mode, Angular doesn't check either of them. However, in full mode, Angular checks that &lt;code&gt;config&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt; exist and assumes a type of &lt;code&gt;any&lt;/code&gt;. In strict mode, Angular knows that the &lt;code&gt;user&lt;/code&gt; in the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; has a type of &lt;code&gt;User&lt;/code&gt;, and that &lt;code&gt;address&lt;/code&gt; is an object with a &lt;code&gt;city&lt;/code&gt; property of type &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 处于 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 嵌入式视图。在基本模式下，Angular不会检查它们中的任何一个。但是，在完全模式下，Angular会检查 &lt;code&gt;config&lt;/code&gt; 和 &lt;code&gt;user&lt;/code&gt; 是否存在，并假设 &lt;code&gt;any&lt;/code&gt; 的类型。在严格模式，角知道该 &lt;code&gt;user&lt;/code&gt; 在 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 有一个类型的 &lt;code&gt;User&lt;/code&gt; ，那 &lt;code&gt;address&lt;/code&gt; 是与一个对象 &lt;code&gt;city&lt;/code&gt; 类型的属性 &lt;code&gt;string&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c67d48b1a68a7babea3a9a1684d08bd5c84499c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; case binds the &lt;code&gt;HighlightDirective&lt;/code&gt; to the name of a color value in the input box. The initial value is the word &quot;cyan&quot; which should be the background color of the input box.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 情况下结合所述 &lt;code&gt;HighlightDirective&lt;/code&gt; 到在输入框的颜色值的名称。初始值为单词&amp;ldquo;青色&amp;rdquo;，它应该是输入框的背景色。</target>
        </trans-unit>
        <trans-unit id="e30b382cd0b284d5678988780f68af3033805fbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element carries the HTML validation attributes: &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;. It also carries a custom validator directive, &lt;code&gt;forbiddenName&lt;/code&gt;. For more information, see &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素携带所述HTML验证属性： &lt;code&gt;required&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 。它还带有一个自定义的验证程序指令 &lt;code&gt;forbiddenName&lt;/code&gt; 。有关更多信息，请参见&amp;ldquo; &lt;a href=&quot;form-validation#custom-validators&quot;&gt;自定义验证器&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="70ae16af7e38bee3770f57aa46ad5f45e088cd06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element carries the HTML validation attributes: &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;. It also carries a custom validator directive, &lt;code&gt;forbiddenName&lt;/code&gt;. For more information, see the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素携带所述HTML验证属性： &lt;code&gt;required&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 。它还带有一个自定义的验证程序指令 &lt;code&gt;forbiddenName&lt;/code&gt; 。有关更多信息，请参见&amp;ldquo;&lt;a href=&quot;form-validation#custom-validators&quot;&gt;定制验证器&amp;rdquo;&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="326834fbb7c5e0943d924c7415e94c4b70ac7a46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; is a syntax element recognized by the Angular parser. It's not a directive, component, class, or interface. It's more like the curly braces in a JavaScript &lt;code&gt;if&lt;/code&gt;-block:</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 是由角分析器识别的语法元素。它不是指令，组件，类或接口。 &lt;code&gt;if&lt;/code&gt; -block，则更像JavaScript中的花括号：</target>
        </trans-unit>
        <trans-unit id="fd20c7620fef7c45d4edd4193dfc39179d70431b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag is a &lt;em&gt;placeholder&lt;/em&gt; for the external content. It tells Angular where to insert that content. In this case, the projected content is the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; from the parent.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 标签是&lt;em&gt;占位符&lt;/em&gt;的外部内容。它告诉Angular在哪里插入该内容。在这种情况下，投影的内容是父项的 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f4e027c2e3b4edb293e0cad4bbba2e70ee66810e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="efdfb17d702bc8bbe65f04dda2cbc25b2231caa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is a good choice for dynamic components because it doesn't render any additional output.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素为动态分量一个很好的选择，因为它不呈现任何额外输出。</target>
        </trans-unit>
        <trans-unit id="0b0d03fdb559954ca7292114f8bf8dc0a0368e8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is where you apply the directive you just made. To apply the &lt;code&gt;AdDirective&lt;/code&gt;, recall the selector from &lt;code&gt;ad.directive.ts&lt;/code&gt;, &lt;code&gt;[adHost]&lt;/code&gt;. Apply that to &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; without the square brackets. Now Angular knows where to dynamically load components.</source>
          <target state="translated">在 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素是你申请你刚才提出的指令。要应用 &lt;code&gt;AdDirective&lt;/code&gt; ，回忆起选择 &lt;code&gt;ad.directive.ts&lt;/code&gt; ， &lt;code&gt;[adHost]&lt;/code&gt; 。将其应用于不带方括号的 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 。现在，Angular知道了在哪里动态加载组件。</target>
        </trans-unit>
        <trans-unit id="2a8bb2dcac92b489d02149d2c7fd4d8b3a43c3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is where you apply the directive you just made. To apply the &lt;code&gt;AdDirective&lt;/code&gt;, recall the selector from &lt;code&gt;ad.directive.ts&lt;/code&gt;, &lt;code&gt;ad-host&lt;/code&gt;. Apply that to &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; without the square brackets. Now Angular knows where to dynamically load components.</source>
          <target state="translated">在 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素是你申请你刚才提出的指令。要应用 &lt;code&gt;AdDirective&lt;/code&gt; ，回忆起选择 &lt;code&gt;ad.directive.ts&lt;/code&gt; ， &lt;code&gt;ad-host&lt;/code&gt; 。将其应用于不带方括号的 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 。现在，Angular知道了在哪里动态加载组件。</target>
        </trans-unit>
        <trans-unit id="9f6ccbf49d1f3ff87675fae077702d114f329a32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;parent-component&amp;gt;&lt;/code&gt; serves as the context for the &lt;code&gt;&amp;lt;child-component&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;parent-component&amp;gt;&lt;/code&gt; 作为上下文为 &lt;code&gt;&amp;lt;child-component&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ab5050deed14a9d8aec4d32da381b874daf44ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag was deprecated in v4 to avoid colliding with the DOM's element of the same name (such as when using web components). Use &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; instead. For more information, see the &lt;a href=&quot;angular-compiler-options#enablelegacytemplate&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; guide.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 标签在V4弃用，以避免具有相同名称的DOM的元件发生碰撞（例如使用web组件时）。使用 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 代替。有关更多信息，请参见《&lt;a href=&quot;angular-compiler-options#enablelegacytemplate&quot;&gt;提前编译》&lt;/a&gt;指南。</target>
        </trans-unit>
        <trans-unit id="b72d4c5c6466d06641152ad78396729ffd2474ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt; event is bound to the &lt;code&gt;addNewItem()&lt;/code&gt; method in the child component class which takes as its argument whatever the value of &lt;code&gt;#newItem&lt;/code&gt; is.</source>
          <target state="translated">在 &lt;code&gt;(click)&lt;/code&gt; 事件被绑定到 &lt;code&gt;addNewItem()&lt;/code&gt; 的子组件类作为其参数的任何值方法 &lt;code&gt;#newItem&lt;/code&gt; 是。</target>
        </trans-unit>
        <trans-unit id="66e99e98ec2f7e7b9dc759dca1d7236ca7bd77cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt; event is bound to the &lt;code&gt;addNewItem()&lt;/code&gt; method in the child component class. The &lt;code&gt;addNewItem()&lt;/code&gt; method takes as its argument the value of the &lt;code&gt;#newItem.value&lt;/code&gt; property.</source>
          <target state="translated">在 &lt;code&gt;(click)&lt;/code&gt; 事件被绑定到 &lt;code&gt;addNewItem()&lt;/code&gt; 的子组件类的方法。所述 &lt;code&gt;addNewItem()&lt;/code&gt; 方法作为其参数的的值 &lt;code&gt;#newItem.value&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="6b8080b0d96315c1fea91fa690a42e383df27175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt; to the left of the equals sign identifies the button's click event as the &lt;strong&gt;target of the binding&lt;/strong&gt;. The text in quotes to the right of the equals sign is the &lt;strong&gt;template statement&lt;/strong&gt;, which responds to the click event by calling the component's &lt;code&gt;onClickMe&lt;/code&gt; method.</source>
          <target state="translated">等号左侧的 &lt;code&gt;(click)&lt;/code&gt; 将按钮的click事件标识为&lt;strong&gt;绑定&lt;/strong&gt;的&lt;strong&gt;目标&lt;/strong&gt;。等号右引号中的文本是&lt;strong&gt;template语句&lt;/strong&gt;，它通过调用组件的 &lt;code&gt;onClickMe&lt;/code&gt; 方法来响应click事件。</target>
        </trans-unit>
        <trans-unit id="5972469341e9c4bb2e9183bf2c05dde6fc8440b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(click)&lt;/code&gt;&lt;a href=&quot;user-input#binding-to-user-input-events&quot;&gt;&lt;em&gt;event binding&lt;/em&gt;&lt;/a&gt; calls the component's &lt;code&gt;selectHero&lt;/code&gt; method when the user clicks a hero's name.</source>
          <target state="translated">在 &lt;code&gt;(click)&lt;/code&gt; &lt;a href=&quot;user-input#binding-to-user-input-events&quot;&gt;&lt;em&gt;事件绑定&lt;/em&gt;&lt;/a&gt;调用组件的 &lt;code&gt;selectHero&lt;/code&gt; 当用户点击一个英雄的名字方法。</target>
        </trans-unit>
        <trans-unit id="3f9a45c02a8db70de99ace5e845ded0b9bab287b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;(keyup)&lt;/code&gt; event handler hears &lt;em&gt;every keystroke&lt;/em&gt;. Sometimes only the &lt;em&gt;Enter&lt;/em&gt; key matters, because it signals that the user has finished typing. One way to reduce the noise would be to examine every &lt;code&gt;$event.keyCode&lt;/code&gt; and take action only when the key is &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">该 &lt;code&gt;(keyup)&lt;/code&gt; 事件处理听到&lt;em&gt;每一次击键&lt;/em&gt;。有时只有&lt;em&gt;Enter&lt;/em&gt;键很重要，因为它表明用户已完成输入。减少噪音的一种方法是检查每个 &lt;code&gt;$event.keyCode&lt;/code&gt; 并仅在键为&lt;em&gt;Enter&lt;/em&gt;时采取措施。</target>
        </trans-unit>
        <trans-unit id="10abfce959f609271607b301af52de8fbf29d196" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;* =&amp;gt; *&lt;/code&gt; transition applies when any change between two states takes place.</source>
          <target state="translated">该 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; 转换适用于当两个国家之间的任何变化发生。</target>
        </trans-unit>
        <trans-unit id="2120f338343729dc380dc6b0089baa51ac809b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;**&lt;/code&gt; path in the last route is a &lt;strong&gt;wildcard&lt;/strong&gt;. The router will select this route if the requested URL doesn't match any paths for routes defined earlier in the configuration. This is useful for displaying a &quot;404 - Not Found&quot; page or redirecting to another route.</source>
          <target state="translated">该 &lt;code&gt;**&lt;/code&gt; 在最后的路线路径是一个&lt;strong&gt;通配符&lt;/strong&gt;。如果请求的URL与配置中先前定义的路由的任何路径都不匹配，则路由器将选择此路由。这对于显示&amp;ldquo; 404-找不到&amp;rdquo;页面或重定向到其他路由很有用。</target>
        </trans-unit>
        <trans-unit id="96ab982ceb0f51ab7dc6e0259cf6586cf95248da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;/code&gt; symbol turns the current element into an embedded template. Equivalent to: &lt;code&gt;&amp;lt;ng-template [myUnless]=&quot;myExpression&quot;&amp;gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;*&lt;/code&gt; 符号变为当前元素到嵌入式模板。等效于： &lt;code&gt;&amp;lt;ng-template [myUnless]=&quot;myExpression&quot;&amp;gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c2d5580b2ef8003829258ec68b0138943d8a940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive in Angular is similar to the &lt;code&gt;ng-repeat&lt;/code&gt; directive in AngularJS. It repeats the associated DOM element for each item in the specified collection. More accurately, it turns the defined element (&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; in this example) and its contents into a template and uses that template to instantiate a view for each item in the list.</source>
          <target state="translated">Angular中的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 指令类似于AngularJS中的 &lt;code&gt;ng-repeat&lt;/code&gt; 指令。它为指定集合中的每个项目重复关联的DOM元素。更准确地说，它将定义的元素（在本示例中为 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; ）及其内容转换为模板，并使用该模板实例化列表中每个项目的视图。</target>
        </trans-unit>
        <trans-unit id="8e1d922dd350f306cee6d2827b89d6c59d7018cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive iterates over each form control instance provided by the aliases form array instance. Because form array elements are unnamed, you assign the index to the &lt;code&gt;i&lt;/code&gt; variable and pass it to each control to bind it to the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; input.</source>
          <target state="translated">的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 由别名设置在各形式控制实例指令迭代形成阵列实例。因为表单数组元素未命名，所以您将索引分配给 &lt;code&gt;i&lt;/code&gt; 变量，并将其传递给每个控件以将其绑定到 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 输入。</target>
        </trans-unit>
        <trans-unit id="52969138b5130b927875be6b78501fd4d2cc3965" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive tells Angular to iterate over a list.</source>
          <target state="translated">在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 指令告诉角度来遍历列表。</target>
        </trans-unit>
        <trans-unit id="c40c69127cacc3294ec3f3ca68aa65396d4921ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; iterates over the items in the &lt;code&gt;items&lt;/code&gt; array. When you enter a value in the child's &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and click the button, the child emits the event and the parent's &lt;code&gt;addItem()&lt;/code&gt; method pushes the value to the &lt;code&gt;items&lt;/code&gt; array and it renders in the list.</source>
          <target state="translated">在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 遍历中项目 &lt;code&gt;items&lt;/code&gt; 数组。当您在子代的 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 中输入值并单击按钮时，子代将发出事件，父代的 &lt;code&gt;addItem()&lt;/code&gt; 方法将值推送到 &lt;code&gt;items&lt;/code&gt; 数组，并将其呈现在列表中。</target>
        </trans-unit>
        <trans-unit id="f8811d1e6385310a3ff23ae8790fbbc3d413e802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; iterates over the items in the &lt;code&gt;items&lt;/code&gt; array. When you enter a value in the child's &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and click the button, the child emits the event and the parent's &lt;code&gt;addItem()&lt;/code&gt; method pushes the value to the &lt;code&gt;items&lt;/code&gt; array and new item renders in the list.</source>
          <target state="translated">在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 遍历中项目 &lt;code&gt;items&lt;/code&gt; 数组。当您在子代的 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 中输入值并单击按钮时，子代将发出事件，父代的 &lt;code&gt;addItem()&lt;/code&gt; 方法将值推入 &lt;code&gt;items&lt;/code&gt; 数组，并在列表中呈现新项。</target>
        </trans-unit>
        <trans-unit id="1b34fcebb6c80852949768c3729417a298981452" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater creates as many links as are in the component's &lt;code&gt;heroes&lt;/code&gt; array.</source>
          <target state="translated">在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 中继创造尽可能多的联系因为是组件中 &lt;code&gt;heroes&lt;/code&gt; 阵列。</target>
        </trans-unit>
        <trans-unit id="974cf1dc9316505b9a97fbea008c22a30e3f284a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeats hero objects. Notice that the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; iterates over a list called &lt;code&gt;heroes$&lt;/code&gt;, not &lt;code&gt;heroes&lt;/code&gt;. The &lt;code&gt;$&lt;/code&gt; is a convention that indicates &lt;code&gt;heroes$&lt;/code&gt; is an &lt;code&gt;Observable&lt;/code&gt;, not an array.</source>
          <target state="translated">在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 重复英雄对象。注意， &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 遍历了一个名为 &lt;code&gt;heroes$&lt;/code&gt; 而不是 &lt;code&gt;heroes&lt;/code&gt; 的列表。该 &lt;code&gt;$&lt;/code&gt; 是指，约定 &lt;code&gt;heroes$&lt;/code&gt; 是一个 &lt;code&gt;Observable&lt;/code&gt; ，而不是一个数组。</target>
        </trans-unit>
        <trans-unit id="ef9135def9fd84348381da68de4edf112bd5c56b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive in Angular works the same as the &lt;code&gt;ng-if&lt;/code&gt; directive in AngularJS. It removes or recreates a portion of the DOM based on an expression.</source>
          <target state="translated">Angular中的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 指令与AngularJS中的 &lt;code&gt;ng-if&lt;/code&gt; 指令相同。它根据表达式删除或重新创建DOM的一部分。</target>
        </trans-unit>
        <trans-unit id="fd7047a22a6c3235fbbd9f2a4355662750316bdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive moved to the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element where it became a property binding,&lt;code&gt;[&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;]&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 指令移动到 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元件，其中它成为一个属性绑定， &lt;code&gt;[&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0093388df5eaa9c4c71a08425e65597f7ff6f7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element reveals a set of nested message &lt;code&gt;divs&lt;/code&gt; but only if the &lt;code&gt;name&lt;/code&gt; is invalid and the control is either &lt;code&gt;dirty&lt;/code&gt; or &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 的上 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元件揭示了一组嵌套消息 &lt;code&gt;divs&lt;/code&gt; 但只有当 &lt;code&gt;name&lt;/code&gt; 是无效的，并且控制或者是 &lt;code&gt;dirty&lt;/code&gt; 或 &lt;code&gt;touched&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="434fcab1e3a8d321be3bd94ab9489622041eb31c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; only displays the messages area if there are messages to show.</source>
          <target state="translated">在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 仅当有消息显示会显示消息区域。</target>
        </trans-unit>
        <trans-unit id="d59381edc8880b72df3dd7c44b31b8ca52e6092d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive is most commonly used to conditionally show an inline template, as seen in the following example. The default &lt;code&gt;else&lt;/code&gt; template is blank.</source>
          <target state="translated">在 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 指令最常用于有条件地显示内联模板，如下面的例子中看出。默认的 &lt;code&gt;else&lt;/code&gt; 模板为空白。</target>
        </trans-unit>
        <trans-unit id="519a225df0d1b1586a1fbe4ebece19660d118076" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--open&lt;/code&gt; (or just &lt;code&gt;-o&lt;/code&gt;) option automatically opens your browser to &lt;code&gt;http://localhost:4200/&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;--open&lt;/code&gt; （或只是 &lt;code&gt;-o&lt;/code&gt; ）选项会自动打开你的浏览器 &lt;code&gt;http://localhost:4200/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21886eb0c6a56536748cb67bd6410d088c51786c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--open&lt;/code&gt; flag opens a browser to &lt;code&gt;http://localhost:4200/&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;--open&lt;/code&gt; 标志打开浏览器以 &lt;code&gt;http://localhost:4200/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42efef1f124237247d38b603c4bad7661e6bda6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--prod&lt;/code&gt;&lt;em&gt;meta-flag&lt;/em&gt; engages the following build optimization features.</source>
          <target state="translated">该 &lt;code&gt;--prod&lt;/code&gt; &lt;em&gt;元标记&lt;/em&gt;从事以下构建优化功能。</target>
        </trans-unit>
        <trans-unit id="9fdd4f099a82d1b54fb53b14836fd023431627b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--routing&lt;/code&gt; option requires Angular/CLI version 8.1 or higher. See &lt;a href=&quot;updating&quot;&gt;Keeping Up to Date&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;--routing&lt;/code&gt; 选项需要角/ CLI版本8.1或更高版本。请参阅&lt;a href=&quot;updating&quot;&gt;保持最新&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0e88d20c25b9a1cb33ec394f79fb11ace1c95d63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.metadata.json&lt;/code&gt; files contain information needed by the template compiler from a &lt;code&gt;.ts&lt;/code&gt; file that is not included in the &lt;code&gt;.d.ts&lt;/code&gt; file produced by the TypeScript compiler. This information includes, for example, the content of annotations (such as a component's template), which TypeScript emits to the &lt;code&gt;.js&lt;/code&gt; file but not to the &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">该 &lt;code&gt;.metadata.json&lt;/code&gt; 文件包含通过从模板编译器所需信息 &lt;code&gt;.ts&lt;/code&gt; 未包含在文件 &lt;code&gt;.d.ts&lt;/code&gt; 由打字稿编译器生成的文件。例如，此信息包括注解的内容（例如组件的模板），TypeScript将该注解的内容发送到 &lt;code&gt;.js&lt;/code&gt; 文件，而不发送到 &lt;code&gt;.d.ts&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="da433db456ebe4159bdc0c31a9dc8f8bb5a729ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;/deep/&lt;/code&gt; combinator also has the aliases &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;::ng-deep&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;/deep/&lt;/code&gt; 组合子也有别名 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 及 &lt;code&gt;::ng-deep&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb8dddba1a3a8f516cc04db526b4971f6100af63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; selector is the only way to target the host element. You can't reach the host element from inside the component with other selectors because it's not part of the component's own template. The host element is in a parent component's template.</source>
          <target state="translated">的 &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 选择是针对主机元素的唯一途径。您无法使用其他选择器从组件内部访问host元素，因为它不是组件自己的模板的一部分。host元素位于父组件的模板中。</target>
        </trans-unit>
        <trans-unit id="96dc3a416c0a1b81fdad59a50d7802b56e3490fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:enter&lt;/code&gt; transition runs when any &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; views are placed on the page, and &lt;code&gt;:leave&lt;/code&gt; runs when those views are removed from the page.</source>
          <target state="translated">的 &lt;code&gt;:enter&lt;/code&gt; 过渡运行时，任何 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 视图放置在页面上，以及 &lt;code&gt;:leave&lt;/code&gt; 当这些观点从网页上删除的运行。</target>
        </trans-unit>
        <trans-unit id="b9a9b6973879453f1b34aefcec0482f9a455b684" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:host&lt;/code&gt; selector is the only way to target the host element. You can't reach the host element from inside the component with other selectors because it's not part of the component's own template. The host element is in a parent component's template.</source>
          <target state="translated">的 &lt;code&gt;:host&lt;/code&gt; 选择是针对主机元素的唯一途径。您无法使用其他选择器从组件内部访问host元素，因为它不是组件自己的模板的一部分。host元素位于父组件的模板中。</target>
        </trans-unit>
        <trans-unit id="d1778731f7f54a8c541fbfa74850f3c973e96a61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:id&lt;/code&gt; in the second route is a token for a route parameter. In a URL such as &lt;code&gt;/hero/42&lt;/code&gt;, &quot;42&quot; is the value of the &lt;code&gt;id&lt;/code&gt; parameter. The corresponding &lt;code&gt;HeroDetailComponent&lt;/code&gt; uses that value to find and present the hero whose &lt;code&gt;id&lt;/code&gt; is 42.</source>
          <target state="translated">第二条路 &lt;code&gt;:id&lt;/code&gt; 的：id是路由参数的标记。在 &lt;code&gt;/hero/42&lt;/code&gt; 之类的URL中，&amp;ldquo; 42&amp;rdquo;是 &lt;code&gt;id&lt;/code&gt; 参数的值。相应的 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 使用该值查找并显示 &lt;code&gt;id&lt;/code&gt; 为42的英雄。</target>
        </trans-unit>
        <trans-unit id="8dfbe701918754e8626af9582beed98ca14504a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:id&lt;/code&gt; in the second route is a token for a route parameter. In a URL such as &lt;code&gt;/hero/42&lt;/code&gt;, &quot;42&quot; is the value of the &lt;code&gt;id&lt;/code&gt; parameter. The corresponding &lt;code&gt;HeroDetailComponent&lt;/code&gt; will use that value to find and present the hero whose &lt;code&gt;id&lt;/code&gt; is 42. You'll learn more about route parameters later in this guide.</source>
          <target state="translated">第二条路 &lt;code&gt;:id&lt;/code&gt; 的：id是路由参数的标记。在诸如 &lt;code&gt;/hero/42&lt;/code&gt; 之类的URL中，&amp;ldquo; 42&amp;rdquo;是 &lt;code&gt;id&lt;/code&gt; 参数的值。相应的 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 将使用该值来查找并显示 &lt;code&gt;id&lt;/code&gt; 为42 的英雄。您将在本指南的后面部分详细了解路线参数。</target>
        </trans-unit>
        <trans-unit id="25d3cb2285267d70584cbb90e91059a95bc58b78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:id&lt;/code&gt; token creates a slot in the path for a Route Parameter. In this case, this configuration causes the router to insert the &lt;code&gt;id&lt;/code&gt; of a hero into that slot.</source>
          <target state="translated">的 &lt;code&gt;:id&lt;/code&gt; 令牌创建在路由参数的路径插槽。在这种情况下，此配置将导致路由器将英雄的 &lt;code&gt;id&lt;/code&gt; 插入该插槽。</target>
        </trans-unit>
        <trans-unit id="90b7bbb98338684f39be744dca5eee1e473bb6c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function (second argument of the transition function) accepts the &lt;code&gt;timings&lt;/code&gt; and &lt;code&gt;styles&lt;/code&gt; input parameters.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 函数（转换函数的第二个参数）接受的 &lt;code&gt;timings&lt;/code&gt; 和 &lt;code&gt;styles&lt;/code&gt; 的输入参数。</target>
        </trans-unit>
        <trans-unit id="6aa8ce6afb763d79c390fee072a2367942e65792" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; function in Angular allows you to specify multiple interim styles within a single transition, with an optional offset to define the point in the animation where each style change occurs.</source>
          <target state="translated">Angular中的 &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 函数允许您在单个过渡中指定多个临时样式，并具有可选的偏移量以定义动画中每次样式更改发生的点。</target>
        </trans-unit>
        <trans-unit id="ad35da3f65c892375ddd871696a7bd3b66478d66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt; params&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt; can also be preserved using a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;queryParamsHandling&lt;/code&gt; and &lt;code&gt;preserveFragment&lt;/code&gt; bindings respectively.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt; params&lt;/code&gt; 和 &lt;code&gt;fragment&lt;/code&gt; 也可以使用一个保存 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;queryParamsHandling&lt;/code&gt; 和 &lt;code&gt;preserveFragment&lt;/code&gt; 分别绑定。</target>
        </trans-unit>
        <trans-unit id="a45f970b4aa67853e344825fb7ac64aa16a23ca7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function allows you to find inner elements within the element that is being animated. This function targets specific HTML elements within a parent component and applies animations to each element individually. Angular intelligently handles setup, teardown, and cleanup as it coordinates the elements across the page.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 函数可以让你找到正被动画的元素中的内部元素。此函数针对父组件中的特定HTML元素，并将动画分别应用于每个元素。Angular可以智能地处理设置，拆卸和清理，因为它可以协调页面中的所有元素。</target>
        </trans-unit>
        <trans-unit id="377b4c3b33ed4e6d023f9c5ffd3c7e62bb723020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; function allows you to define a timing gap between each queried item that is animated and thus animates elements with a delay between them.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 功能，可以定义一个动画和动画从而在它们之间具有的延迟元件的每个查询项目之间的定时间隔。</target>
        </trans-unit>
        <trans-unit id="ca0e77d333988840b26a6477d5cfa93de0fd21eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function takes additional selector values, &lt;code&gt;:increment&lt;/code&gt; and &lt;code&gt;:decrement&lt;/code&gt;. Use these to kick off a transition when a numeric value has increased or decreased in value.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 函数需要额外的选择值， &lt;code&gt;:increment&lt;/code&gt; 和 &lt;code&gt;:decrement&lt;/code&gt; 。当数值增加或减少时，可使用这些按钮启动过渡。</target>
        </trans-unit>
        <trans-unit id="1175f7e12c287c6766b1bf4935d68fa0a9aacf16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function describes the property name to watch for changes. When a change occurs, the trigger initiates the actions included in its definition. These actions can be transitions or other functions, as we'll see later on.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 函数描述的属性名称要监视更改。发生更改时，触发器将启动其定义中包含的操作。这些动作可以是过渡或其他功能，我们将在后面看到。</target>
        </trans-unit>
        <trans-unit id="8a4b3621e7c4f33ab29f4114473d11c070892306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; is also stateful. The pipe maintains a subscription to the input &lt;code&gt;Observable&lt;/code&gt; and keeps delivering values from that &lt;code&gt;Observable&lt;/code&gt; as they arrive.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 也有状态。管道维护对输入 &lt;code&gt;Observable&lt;/code&gt; 的订阅，并在到达时从该 &lt;code&gt;Observable&lt;/code&gt; 传递值。</target>
        </trans-unit>
        <trans-unit id="d0632dfba39aaa78b480cfca4134358065f1fc90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; function from &lt;code&gt;@angular/core/testing&lt;/code&gt; has been renamed to &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;&lt;/code&gt; in order to avoid confusion with the native JavaScript &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; syntax. The existing function is deprecated and will be removed in a future version.</source>
          <target state="translated">&lt;code&gt;@angular/core/testing&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 函数已重命名为 &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;&lt;/code&gt; ，以避免与本机JavaScript &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 语法混淆。现有功能已被弃用，并将在以后的版本中删除。</target>
        </trans-unit>
        <trans-unit id="365bb40303bb7915970a82dbf8be41b720451761" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; function from &lt;code&gt;@angular/core/testing&lt;/code&gt; has been renamed to &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;&lt;/code&gt; in order to avoid confusion with the native JavaScript &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; syntax. The existing function is deprecated and will be removed in a future version. See &lt;a href=&quot;https://github.com/angular/angular/pull/37583&quot;&gt;PR 37583&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/core/testing&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 函数已重命名为 &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;&lt;/code&gt; ，以避免与本机JavaScript &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 语法混淆。现有功能已被弃用，并将在以后的版本中删除。参见&lt;a href=&quot;https://github.com/angular/angular/pull/37583&quot;&gt;PR 37583&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="553ebd3c40e6fafec9710818c6bec8e7978af06f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe currently assumes that the Observable it subscribes to can be asynchronous, which means that it's possible that there is no value available yet. In that case, it still has to return something&amp;mdash;which is &lt;code&gt;null&lt;/code&gt;. In other words, the return type of the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe includes &lt;code&gt;null&lt;/code&gt;, which may result in errors in situations where the Observable is known to emit a non-nullable value synchronously.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道目前假设可观察到其订阅可以是异步的，这意味着它可能是没有可用的值呢。在这种情况下，它仍然必须返回某些内容&amp;mdash;为 &lt;code&gt;null&lt;/code&gt; 。换句话说， &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道的返回类型包括 &lt;code&gt;null&lt;/code&gt; ，这在已知Observable同步发出非null值的情况下可能会导致错误。</target>
        </trans-unit>
        <trans-unit id="60bb0bfc2d801262fb72e5ec658008b1e23c5f29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe returns the latest value from a stream of data and continues to do so for the life of a given component. When Angular destroys that component, the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe automatically stops. For detailed information about the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe, see the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe API documentation&lt;/a&gt;.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道从数据流返回最新值，并持续给定组件的使用寿命这样做。当Angular销毁该组件时， &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道将自动停止。有关 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道的详细信息，请参阅&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe API文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e9f2e4b7fce125080de1aad2e4783db64cc0aea6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; captures both kinds of errors in its &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; and you can inspect that response to figure out what really happened.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的同时捕捉在其各种错误 &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; ，您可以检查该响应搞清楚到底发生了什么。</target>
        </trans-unit>
        <trans-unit id="5384cbacf5ba9fcb68ffa4d9a9d16a5e1c862a9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; offers a simplified client HTTP API for Angular applications that rests on the &lt;code&gt;XMLHttpRequest&lt;/code&gt; interface exposed by browsers. Additional benefits of &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; include testability features, typed request and response objects, request and response interception, &lt;code&gt;Observable&lt;/code&gt; apis, and streamlined error handling.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 提供的是，在休息的简化客户端的HTTP API折角应用 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 的接口被浏览器暴露出来。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的其他好处包括可测试性功能，类型化的请求和响应对象，请求和响应拦截， &lt;code&gt;Observable&lt;/code&gt; api和简化的错误处理。</target>
        </trans-unit>
        <trans-unit id="13d5e06cdb4370f83c2ad6f4d90377bc5a9a9eb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service makes use of &lt;a href=&quot;glossary#observable&quot;&gt;observables&lt;/a&gt; for all transactions. You must import the RxJS observable and operator symbols that appear in the example snippets. These &lt;code&gt;ConfigService&lt;/code&gt; imports are typical.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的服务使用的&lt;a href=&quot;glossary#observable&quot;&gt;观测&lt;/a&gt;的所有交易。您必须导入示例片段中出现的RxJS可观察符号和运算符。这些 &lt;code&gt;ConfigService&lt;/code&gt; 导入是典型的。</target>
        </trans-unit>
        <trans-unit id="deeb8ba499b1b180bde00f2b9551724010997688" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method normally returns an &lt;em&gt;observable&lt;/em&gt; that either emits the data or an error. Some folks describe it as a &quot;&lt;em&gt;one and done&lt;/em&gt;&quot; observable.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 方法通常返回一个&lt;em&gt;可观察到的&lt;/em&gt;，要么发射数据或错误。有些人形容为&amp;ldquo; &lt;em&gt;一，做&lt;/em&gt; &amp;rdquo;观察到的。</target>
        </trans-unit>
        <trans-unit id="5f1a4185da9c2350f45a8f9dbf6ab64ab3db7002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method normally returns an observable that emits a single value, either the data or an error. An interceptor can change this to an observable that emits &lt;a href=&quot;observables&quot;&gt;multiple values&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 方法通常返回一个可观察发射的单个值，或者所述数据或错误。拦截器可以将其更改为发出&lt;a href=&quot;observables&quot;&gt;多个值&lt;/a&gt;的可观察对象。</target>
        </trans-unit>
        <trans-unit id="df333c509fac8ddb188bad0cfbdd394bda4c50f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; method is similar to &lt;code&gt;get()&lt;/code&gt; in that it has a type parameter (you're expecting the server to return the new hero) and it takes a resource URL.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; 方法类似于 &lt;code&gt;get()&lt;/code&gt; 方法，它有一个类型参数（你希望服务器返回的新英雄），它需要的资源URL。</target>
        </trans-unit>
        <trans-unit id="dcaa97ca75cf65394d1b6ad74b938a953cabddec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; method is similar to &lt;code&gt;get()&lt;/code&gt; in that it has a type parameter, which you can use to specify that you expect the server to return data of a given type. The method takes a resource URL and two additional parameters:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#post&quot;&gt;HttpClient.post()&lt;/a&gt;&lt;/code&gt; 方法类似于 &lt;code&gt;get()&lt;/code&gt; 方法，它有一个类型参数，你可以用它来指定您希望服务器返回给定类型的数据。该方法采用资源URL和两个附加参数：</target>
        </trans-unit>
        <trans-unit id="55770db94e082c9f5e561030f40e47b4f1674770" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; method takes three parameters:</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; 方法有三个参数：</target>
        </trans-unit>
        <trans-unit id="7a4ce4d193b0811a6f8f7ad610feeb8dec143461" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; are immutable so you'll have to save the returned value of the &lt;code&gt;.set()&lt;/code&gt; method in order to update the options.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; 是不可变的，所以你必须保存的返回值 &lt;code&gt;.set()&lt;/code&gt; ，以更新的选项方法。</target>
        </trans-unit>
        <trans-unit id="35b6aa4b2db0d252ac8cfdbb95eec65aa0fbd217" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; object is immutable. If you need to update the options, save the returned value of the &lt;code&gt;.set()&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; 对象是不可改变的。如果需要更新选项，请保存 &lt;code&gt;.set()&lt;/code&gt; 方法的返回值。</target>
        </trans-unit>
        <trans-unit id="011c7e92ac38205e83ad5e89713470259fc0289a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; can make these testing scenarios more manageable.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 可以使这些测试情景更易于管理。</target>
        </trans-unit>
        <trans-unit id="6e57d0d3a73437e120975f03c6e520b3623c7eae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; pipe is particularly helpful for debugging bindings:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; 管是用于调试绑定特别有帮助：</target>
        </trans-unit>
        <trans-unit id="7687f629bb10a3782e5e6e031f54803a9613c67a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive implements &lt;code&gt;NgFor&lt;/code&gt;. Read more about additional &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive properties and context properties in the &lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf API reference&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 指令工具 &lt;code&gt;NgFor&lt;/code&gt; 。在&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf API参考中&lt;/a&gt;阅读有关其他 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 指令属性和上下文属性的更多信息。</target>
        </trans-unit>
        <trans-unit id="828f8cc9e1b68dc8578c2870bfc113f92e5b8081" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive doesn't hide elements with CSS. It adds and removes them physically from the DOM. Confirm that fact using browser developer tools to inspect the DOM.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 指令并不隐藏与CSS元素。它从DOM中物理地添加和删除它们。使用浏览器开发人员工具检查DOM确认这一事实。</target>
        </trans-unit>
        <trans-unit id="d561348f9e9b5e8716d8be79b6e49e3f2cc2dc8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; directives</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; 指令</target>
        </trans-unit>
        <trans-unit id="13016879e5b136aba9f37a06656c49328e2ea0ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/slicepipe&quot;&gt;SlicePipe&lt;/a&gt;&lt;/code&gt; does the same thing but the &lt;em&gt;order of the parameters is reversed&lt;/em&gt;, in keeping with the JavaScript &lt;code&gt;Slice&lt;/code&gt; method. The first parameter is the starting index; the second is the limit. As in AngularJS, coding this operation within the component instead could improve performance.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/slicepipe&quot;&gt;SlicePipe&lt;/a&gt;&lt;/code&gt; 做同样的事情，但&lt;em&gt;参数的顺序是相反的&lt;/em&gt;，在使用JavaScript保持 &lt;code&gt;Slice&lt;/code&gt; 方法。第一个参数是起始索引；第二个是极限。与在AngularJS中一样，在组件中对该操作进行编码可以提高性能。</target>
        </trans-unit>
        <trans-unit id="d817909915566340878143825ee398005068d212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;shared&lt;/code&gt; folder.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; 从 &lt;code&gt;shared&lt;/code&gt; 文件夹。</target>
        </trans-unit>
        <trans-unit id="aae71b7520bfd4b36d6c153e1ebfe169315f1074" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#url&quot;&gt;url()&lt;/a&gt;&lt;/code&gt; method reads source files from your filesystem, relative to the schematic.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#url&quot;&gt;url()&lt;/a&gt;&lt;/code&gt; 方法从你的文件系统，相对于原理读取源文件。</target>
        </trans-unit>
        <trans-unit id="851fc6e1fd0eaba4690e642ebc501aa32059ab01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method accepts a configuration object that allows you to configure options including the &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;useHash&lt;/code&gt; property, and the URL prefix with the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; 方法接受一个配置对象，它允许您配置选项，包括 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;useHash&lt;/code&gt; 财产，并与URL前缀 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig#hashPrefix&quot;&gt;hashPrefix&lt;/a&gt;&lt;/code&gt; 财产。</target>
        </trans-unit>
        <trans-unit id="0775051411cb85a76fb2ccb71aca8c4a77fade27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method accepts a configuration object that allows you to configure options including the &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;useHash&lt;/code&gt; property, and the URL prefix with the &lt;code&gt;hashPrefix&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; 方法接受一个配置对象，它允许您配置选项，包括 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;useHash&lt;/code&gt; 财产，并与URL前缀 &lt;code&gt;hashPrefix&lt;/code&gt; 财产。</target>
        </trans-unit>
        <trans-unit id="756d0ba3695e20402dac04dc80348f3a5ce7bc04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; function accepts milliseconds as a parameter (defaults to 0 if not provided). The parameter represents how much the virtual clock advances. For example, if you have a &lt;code&gt;setTimeout(fn, 100)&lt;/code&gt; in a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test, you need to use tick(100) to trigger the fn callback.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 函数接受毫秒作为参数（默认为0，如果不提供）。该参数表示虚拟时钟提前多少。例如，如果在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）测试中具有 &lt;code&gt;setTimeout(fn, 100)&lt;/code&gt; ，则需要使用tick（100）来触发fn回调。</target>
        </trans-unit>
        <trans-unit id="897827b5730f7b24462bc905181ae4197863fb98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; function is one of the Angular testing utilities that you import with &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;. It's a companion to &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and you can only call it within a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; body.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 函数是您导入与角度的测试工具之一 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 。它是 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 的伴侣，您只能在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 主体中调用它。</target>
        </trans-unit>
        <trans-unit id="69ee243bd8cdc74b2d9890a9225015af3b1be718" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; for the component.</source>
          <target state="translated">组件的 &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5809ea7370f47ded53130555d7d9d221cc5c877" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; is most valuable when testing a component that has the &lt;code&gt;&lt;a href=&quot;../api/core/changedetectionstrategy#OnPush&quot;&gt;ChangeDetectionStrategy.OnPush&lt;/a&gt;&lt;/code&gt; method or the component's change detection is under your programmatic control.</source>
          <target state="translated">当测试具有 &lt;code&gt;&lt;a href=&quot;../api/core/changedetectionstrategy#OnPush&quot;&gt;ChangeDetectionStrategy.OnPush&lt;/a&gt;&lt;/code&gt; 方法或组件的更改检测在程序控制下的组件时， &lt;code&gt;&lt;a href=&quot;../api/core/changedetectorref&quot;&gt;ChangeDetectorRef&lt;/a&gt;&lt;/code&gt; 最有价值。</target>
        </trans-unit>
        <trans-unit id="51794b2d7fab6f05d86b195b0e1aca2ec6b1d7fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; associated with the root element of the component.</source>
          <target state="translated">与组件的根元素关联的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="961daa0538457c955d90426ae42027fad7dff895" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; has other methods and properties that are useful in tests, as you'll see elsewhere in this guide.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 还有其他的方法和属性都在测试中非常有用，因为你会看到本指南中的其它地方。</target>
        </trans-unit>
        <trans-unit id="f1de24ec1f5099c1ccbba6b2ab07fecb22f71cab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; offers query methods that work for all supported platforms. These query methods take a &lt;em&gt;predicate&lt;/em&gt; function that returns &lt;code&gt;true&lt;/code&gt; when a node in the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; tree matches the selection criteria.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 报价查询方法，对所有支持的平台工作。这些查询方法采用&lt;em&gt;谓词&lt;/em&gt;函数，当 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 树中的节点符合选择条件时返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="862186ee287f0a3973ebace73350df1dc36f0373" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; parent. Null if this is the root element.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 父。如果这是根元素，则为Null。</target>
        </trans-unit>
        <trans-unit id="e19b18ad54693eb69b8495b3c5389751ca092427" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; provides crucial insights into the component's DOM representation.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 提供关键的见解组件的DOM表示。</target>
        </trans-unit>
        <trans-unit id="8862a64115ba59a883af135381735a2e8bb22ad8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; provider key lets you map one token to another. In effect, the first token is an &lt;em&gt;alias&lt;/em&gt; for the service associated with the second token, creating two ways to access the same service object.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 提供程序密钥可以将一个令牌映射到另一个令牌。实际上，第一个令牌是与第二个令牌相关联的服务的&lt;em&gt;别名&lt;/em&gt;，从而创建了两种访问同一服务对象的方式。</target>
        </trans-unit>
        <trans-unit id="02289d427dfadce775076f28b6b4b604ca0aa6ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; field tells Angular that the provider is a factory function whose implementation is &lt;code&gt;heroServiceFactory&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 字段告诉角度，该供应商是一个工厂函数，它的实现是 &lt;code&gt;heroServiceFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40f86f8f21fce527e353b556c2ec4994b4b501e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider key lets you create a dependency object by calling a factory function, as in the following example.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 提供商键可通过调用工厂函数，如下面的例子创建依赖对象。</target>
        </trans-unit>
        <trans-unit id="0b974d1037f4bd4bb8020582a79e0ce5c8b0b3c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; wires the click event of the host element (the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; anchor elements in &lt;code&gt;AppComponent&lt;/code&gt;) to the stub directive's &lt;code&gt;onClick&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 导线host元素的点击事件（ &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 在锚定元件 &lt;code&gt;AppComponent&lt;/code&gt; ）到存根指令的 &lt;code&gt;onClick&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="8765869581667805aba310a48ddaccd740daa2ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; wires the click event of the host element (the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; anchor elements in &lt;code&gt;AppComponent&lt;/code&gt;) to the stub directive's &lt;code&gt;onClick&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 导线host元素的点击事件（该 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 在锚定元件 &lt;code&gt;AppComponent&lt;/code&gt; ）到存根指令的 &lt;code&gt;onClick&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="1ec3f4f7beb143e72b2f66889972507a21903aa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; property is declared in the &lt;code&gt;ListItemComponent&lt;/code&gt; with a type of &lt;code&gt;Item&lt;/code&gt; and decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 属性在声明 &lt;code&gt;ListItemComponent&lt;/code&gt; 与类型的 &lt;code&gt;Item&lt;/code&gt; ，并饰以 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="62296206d0f1bcad4784d2e6379d92928e2d5a0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; also prevents the compiler from telling you about the missing components and attributes that you omitted inadvertently or misspelled. You could waste hours chasing phantom bugs that the compiler would have caught in an instant.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; 还可以防止告诉你关于缺少的组件编译器和属性，你无意中忽略或拼写错误。您可能会浪费大量时间去追寻编译器会立即捕获的幻像错误。</target>
        </trans-unit>
        <trans-unit id="f9832c0d12b70799263520e96d78a0a11b71abae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; approach is the easier of the two but don't overuse it.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; 方法是两个容易，但不要滥用它。</target>
        </trans-unit>
        <trans-unit id="736f7b384e5c3d37d116e2a6a5c084d671e75bed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; tells the Angular compiler to ignore unrecognized elements and attributes.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; 告诉角度编译器忽略未知的元素和属性。</target>
        </trans-unit>
        <trans-unit id="46ae0e9050482d384516ed17b7168e0b7f8f4de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; method creates a child injector of the platform injector which is configured by the &lt;code&gt;AppModule&lt;/code&gt;. This is the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; 方法创建其由配置的平台喷射器的喷射器的孩子 &lt;code&gt;AppModule&lt;/code&gt; 。这是 &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dfd9564eb30349a9789dc480442eca5944f3969c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; object literal</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 对象字面</target>
        </trans-unit>
        <trans-unit id="544be4e74b7a5646610d6d8b844c6bf76f8cc96d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; contains:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; 部分包含：</target>
        </trans-unit>
        <trans-unit id="c6f3e8e57f07ac59c00b10a08504252a4823865f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper function takes a parameterless function with the body of the setup.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 辅助函数需要一个无参数的功能与设置的本体。</target>
        </trans-unit>
        <trans-unit id="14f024be8696cacdaf6f765e664b4a9642519924" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; utility hides some asynchronous boilerplate by arranging for the tester's code to run in a special &lt;em&gt;async test zone&lt;/em&gt;. You don't need to pass Jasmine's &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; into the test and call &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; because it is &lt;code&gt;undefined&lt;/code&gt; in promise or observable callbacks.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 实用程序通过安排测试仪的代码，在一个特殊的运行隐藏了一些异步样板&lt;em&gt;异步测试区域&lt;/em&gt;。您不需要将Jasmine的 &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; 传递到测试中并调用 &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; ,因为它在promise或可观察的回调中 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6bdb963f4671f0ae12506889584d39b686a4803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; properties and methods provide access to the component, its DOM representation, and aspects of its Angular environment.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; 属性和方法提供进入组件，其DOM表示，并且其角环境的各方面。</target>
        </trans-unit>
        <trans-unit id="93ac15fbb5d8a83db3c78e9d66f9a5a179823b1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#debugElement&quot;&gt;debugElement&lt;/a&gt;&lt;/code&gt; provides insight into the component and its DOM element during test and debugging. It's a critical property for testers. The most interesting members are covered &lt;a href=&quot;testing#debug-element-details&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">在测试和调试过程中， &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#debugElement&quot;&gt;debugElement&lt;/a&gt;&lt;/code&gt; 提供了对组件及其DOM元素的深入了解。对于测试人员而言，这是至关重要的属性。最有趣的成员&lt;a href=&quot;testing#debug-element-details&quot;&gt;如下&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d60cbcd5a51066898ce1cfaef907a6ff5eeb1913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; function enables a linear coding style by running the test body in a special &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt; test zone&lt;/code&gt;. The test body appears to be synchronous. There is no nested syntax (like a &lt;code&gt;Promise.then()&lt;/code&gt;) to disrupt the flow of control.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 函数使得线性通过在特殊运行测试体编码样式 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt; test zone&lt;/code&gt; 。测试主体似乎是同步的。没有嵌套的语法（如 &lt;code&gt;Promise.then()&lt;/code&gt; ）会破坏控制流。</target>
        </trans-unit>
        <trans-unit id="4d2f01c3eec63e6c9292ec719b3298411291b445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; utility function has a few limitations. In particular, it won't work if the test body makes an &lt;code&gt;XMLHttpRequest&lt;/code&gt; (XHR) call. XHR calls within a test are rare so you can generally stick with &lt;a href=&quot;testing#fake-async&quot;&gt;&lt;code&gt;fakeAsync()&lt;/code&gt;&lt;/a&gt;. But if you ever do need to call &lt;code&gt;XMLHttpRequest&lt;/code&gt;, you'll want to know about &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 效用函数有一些限制。特别是，如果测试主体进行 &lt;code&gt;XMLHttpRequest&lt;/code&gt; （XHR）调用，它将无法正常工作。测试中很少进行XHR调用，因此通常可以坚持使用&lt;a href=&quot;testing#fake-async&quot;&gt; &lt;code&gt;fakeAsync()&lt;/code&gt; &lt;/a&gt;。但是，如果确实需要调用 &lt;code&gt;XMLHttpRequest&lt;/code&gt; ，则需要了解 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c184a77512c3c8c73e87e4c09c8907531fc12dff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; API consists of static class methods that either update or reference a &lt;em&gt;global&lt;/em&gt; instance of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; API包括静态类的方法，要么更新或引用一个&lt;em&gt;全球性&lt;/em&gt;的实例 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5dcb0270444e1aa603b2dcc620f2b6164bc70ff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; class is one of the principal Angular testing utilities. Its API is quite large and can be overwhelming until you've explored it, a little at a time. Read the early part of this guide first to get the basics before trying to absorb the full API.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 类是主要的角测试工具之一。它的API相当大，可能会让人不知所措，直到您一次探索它为止。在尝试使用完整的API之前，请先阅读本指南的早期部分以获取基础知识。</target>
        </trans-unit>
        <trans-unit id="cc8e345965763ddfe3e7812d90185a3cc8df7c1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; is the most important of the Angular testing utilities. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; creates a dynamically-constructed Angular &lt;em&gt;test&lt;/em&gt; module that emulates an Angular &lt;a href=&quot;ngmodules&quot;&gt;@NgModule&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 是最重要的角测试工具。在 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 创建动态构建角&lt;em&gt;测试&lt;/em&gt;模块，其模拟一个角&lt;a href=&quot;ngmodules&quot;&gt;@NgModule&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0fa5719e49ca7a76ef3c8e65b62aafdb6c823677" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; helper function takes a parameterless function with the body of the setup.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 辅助函数需要一个无参数的功能与设置的本体。</target>
        </trans-unit>
        <trans-unit id="cd063ff35719124876f2ecec17f31742541a17bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; utility hides some asynchronous boilerplate by arranging for the tester's code to run in a special &lt;em&gt;async test zone&lt;/em&gt;. You don't need to pass Jasmine's &lt;code&gt;done()&lt;/code&gt; into the test and call &lt;code&gt;done()&lt;/code&gt; because it is &lt;code&gt;undefined&lt;/code&gt; in promise or observable callbacks.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; 实用揣在一个特殊的安排测试人员的代码运行一些异步样板&lt;em&gt;异步测试区域&lt;/em&gt;。您不需要将Jasmine的 &lt;code&gt;done()&lt;/code&gt; 传递到测试中并调用 &lt;code&gt;done()&lt;/code&gt; ,因为在promise或可观察的回调中 &lt;code&gt;undefined&lt;/code&gt; Jasmine的done（）。</target>
        </trans-unit>
        <trans-unit id="d4324c4f646e7ef5fabe04fb65098a0bff82f02d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; key lets you associate a fixed value with a DI token. Use this technique to provide &lt;em&gt;runtime configuration constants&lt;/em&gt; such as website base addresses and feature flags. You can also use a value provider in a unit test to provide mock data in place of a production data service.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 键可以让你一个固定的值与DI令牌关联。使用此技术可以提供&lt;em&gt;运行时配置常量，&lt;/em&gt;例如网站基址和功能标志。您还可以在单​​元测试中使用值提供程序来提供模拟数据来代替生产数据服务。</target>
        </trans-unit>
        <trans-unit id="c4a4de4cdb30e4981a232b9d5743ace000b43da2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service has three methods: &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;control()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;array()&lt;/a&gt;&lt;/code&gt;. These are factory methods for generating instances in your component classes including form controls, form groups, and form arrays.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 服务有三个方法： &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;control()&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; ，和 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;array()&lt;/a&gt;&lt;/code&gt; 。这些是工厂方法，用于在组件类中生成实例，包括表单控件，表单组和表单数组。</target>
        </trans-unit>
        <trans-unit id="eec16cb9c821a4731397c8d35c19449c25d69e8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service has three methods: &lt;code&gt;control()&lt;/code&gt;, &lt;code&gt;group()&lt;/code&gt;, and &lt;code&gt;array()&lt;/code&gt;. These are factory methods for generating instances in your component classes including form controls, form groups, and form arrays.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 服务有三个方法： &lt;code&gt;control()&lt;/code&gt; ， &lt;code&gt;group()&lt;/code&gt; ，和 &lt;code&gt;array()&lt;/code&gt; 。这些是工厂方法，用于在组件类中生成实例，包括表单控件，表单组和表单数组。</target>
        </trans-unit>
        <trans-unit id="a1aec13426a1cba49098c3f423a02468ea7f19b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is an injectable provider that is provided with the reactive forms module. Inject this dependency by adding it to the component constructor.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 服务是提供与反应性形式的模块可注射的提供商。通过将其添加到组件构造函数中来注入此依赖关系。</target>
        </trans-unit>
        <trans-unit id="66dd4a989eed4a636dae82c8167c5fb3f64ae0ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is provided by the &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;, which is already defined in the &lt;code&gt;AppModule&lt;/code&gt; you modified previously (in &lt;code&gt;app.module.ts&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 服务是由提供 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; ，这是在已定义 &lt;code&gt;AppModule&lt;/code&gt; 先前修改（在 &lt;code&gt;app.module.ts&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b0d904487da6019bae00f65e8b4f4d62577ec312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; class is the basic building block when using reactive forms. To register a single form control, import the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; class into your component and create a new instance of the form control to save as a class property.</source>
          <target state="translated">使用反应形式时， &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 类是基本的构建块。若要注册单个表单控件，请将 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 类导入到您的组件中，并创建该表单控件的新实例以另存为类属性。</target>
        </trans-unit>
        <trans-unit id="925fc2f850492caec6ce67dbf8116c7a303b111c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance emits the latest value through the &lt;code&gt;valueChanges&lt;/code&gt; observable.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例发出通过最新值 &lt;code&gt;valueChanges&lt;/code&gt; 观察到。</target>
        </trans-unit>
        <trans-unit id="e08dfd1b765eeae5dddab9afb63ae6fbe7aaae9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance emits the new value through the &lt;code&gt;valueChanges&lt;/code&gt; observable.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例发出通过新的价值 &lt;code&gt;valueChanges&lt;/code&gt; 观察到。</target>
        </trans-unit>
        <trans-unit id="4abd98b620b228f713556cb990a2f0f873bcf994" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive can change that behavior and set the value to something else. In the following example, the template reference variable, &lt;code&gt;itemForm&lt;/code&gt;, appears three times separated by HTML.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令可以改变这种行为并将其值设置到别的东西。在下面的示例中，模板引用变量 &lt;code&gt;itemForm&lt;/code&gt; 出现3次，由HTML分隔。</target>
        </trans-unit>
        <trans-unit id="332f7f137b483b6b03a13b704b0ffcc4824ca51f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive creates a top-level &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance and binds it to a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element to track aggregated form value and validation status. As soon as you import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, this directive becomes active by default on all &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags. You don't need to add a special selector.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令创建一个顶级 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例并将其绑定到一个 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 元素来追踪聚集形式值并验证状态。导入 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 之后，默认情况下，此伪指令在所有 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记上均处于活动状态。您不需要添加特殊的选择器。</target>
        </trans-unit>
        <trans-unit id="f95c50a3609c10e18fd22c13852a46b658fb296c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive demonstrates getting a reference to a different value by reference a directive's &lt;code&gt;exportAs&lt;/code&gt; name. In the following example, the template variable, &lt;code&gt;itemForm&lt;/code&gt;, appears three times separated by HTML.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令表明获得通过参考指令的不同的值的参考 &lt;code&gt;exportAs&lt;/code&gt; 名。在下面的示例中，模板变量 &lt;code&gt;itemForm&lt;/code&gt; 出现3次，由HTML分隔。</target>
        </trans-unit>
        <trans-unit id="5879087109abd4866dfeed31d274c238360f5733" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive supplements the &lt;code&gt;form&lt;/code&gt; element with additional features. It holds the controls you created for the elements with an &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive and &lt;code&gt;name&lt;/code&gt; attribute, and monitors their properties, including their validity. It also has its own &lt;code&gt;valid&lt;/code&gt; property which is true only &lt;em&gt;if every contained control&lt;/em&gt; is valid.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令补充剂 &lt;code&gt;form&lt;/code&gt; 的附加功能元素。它使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令和 &lt;code&gt;name&lt;/code&gt; 属性保存为元素创建的控件，并监视其属性（包括其有效性）。它还具有自己的 &lt;code&gt;valid&lt;/code&gt; 属性，仅&lt;em&gt;当每个包含的控件&lt;/em&gt;均有效时，该属性才为true 。</target>
        </trans-unit>
        <trans-unit id="bae2aaf5e364b7e1956a92af5673f84f9adeda8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; lifecycle hook is an important wrinkle. The timer component isn't available until &lt;em&gt;after&lt;/em&gt; Angular displays the parent view. So it displays &lt;code&gt;0&lt;/code&gt; seconds initially.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; 的生命周期钩是一个重要的皱纹。直到Angular显示父视图&lt;em&gt;后&lt;/em&gt;，计时器组件才可用。因此最初显示为 &lt;code&gt;0&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="760596de2100ea9dc08bdebeed02a3519c7d1c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive allows you to display a data property and update that property when the user makes changes. Here's an example:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令允许你显示一个数据属性，当用户更改更新该属性。这是一个例子：</target>
        </trans-unit>
        <trans-unit id="5892d19a57f804459cd76091e13eb6236cd96d62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive on a control tracks the state of that control. It tells you if the user touched the control, if the value changed, or if the value became invalid. Angular sets special CSS classes on the control element to reflect the state, as shown in the following table.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 上的NgModel指令跟踪该控件的状态。它告诉您用户是否触摸了控件，值是否更改或值变得无效。Angular在控件元素上设置特殊的CSS类以反映状态，如下表所示。</target>
        </trans-unit>
        <trans-unit id="5ed567bb8b7fccf046e6f2609558b63b1a92c993" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive reconciles value changes in the attached form element with changes in the data model, allowing you to respond to user input with input validation and error handling.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 在所附表格元素指令调和值的变化与数据模型的变化，让您响应用户输入与输入验证和错误处理。</target>
        </trans-unit>
        <trans-unit id="cf3af9a9fa73985dedfddeaec340442f862dd265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; data property sets the element's value property and the &lt;code&gt;ngModelChange&lt;/code&gt; event property listens for changes to the element's value.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 数据属性设置元素的值属性和 &lt;code&gt;ngModelChange&lt;/code&gt; 更改为元素的值事件属性监听。</target>
        </trans-unit>
        <trans-unit id="51e77ea18456978315e0f15b3648738c107a419c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive declared in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; lets you bind controls in your template-driven form to properties in your data model. When you include the directive using the syntax for two-way data binding, &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt;, Angular can track the value and user interaction of the control and keep the view synced with the model.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 在申报指令 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 让您绑定控件模板驱动的形式在数据模型中的属性。当您使用双向数据绑定语法 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 包含指令时，Angular可以跟踪控件的值和用户交互，并使视图与模型保持同步。</target>
        </trans-unit>
        <trans-unit id="fde09ec8f3662293d249077b17992ef49fc2032c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, which implements two-way data binding, is an example of an attribute directive. &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; modifies the behavior of an existing element (typically &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;) by setting its display value property and responding to change events.</source>
          <target state="translated">实现双向数据绑定的 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令是属性指令的示例。 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 通过设置其显示值属性并响应更改事件来修改现有元素（通常为 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ）的行为。</target>
        </trans-unit>
        <trans-unit id="c9237070a7cb43b406d1d4a21cd61387898bbd49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; directive creates and binds a &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 指令创建和绑定一个 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例DOM元素。</target>
        </trans-unit>
        <trans-unit id="cf386251bdfee3b0633f2f857abd277b404e4c54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; provides the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service, which &lt;code&gt;AppModule&lt;/code&gt; (in &lt;code&gt;app.module.ts&lt;/code&gt;) already imports.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 提供 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 服务，它 &lt;code&gt;AppModule&lt;/code&gt; （在 &lt;code&gt;app.module.ts&lt;/code&gt; ）已经进口。</target>
        </trans-unit>
        <trans-unit id="5d9b5b4fe9ab2fb60c6159e2c66f9b1c15feefcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;()&lt;/code&gt; method creates an injector configured by a &lt;code&gt;PlatformModule&lt;/code&gt;, which contains platform-specific dependencies. This allows multiple apps to share a platform configuration. For example, a browser has only one URL bar, no matter how many apps you have running. You can configure additional platform-specific providers at the platform level by supplying &lt;code&gt;extraProviders&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;()&lt;/code&gt; 方法创建由构造的喷射器 &lt;code&gt;PlatformModule&lt;/code&gt; ，其中包含于平台的特定依赖关系。这允许多个应用共享平台配置。例如，无论您运行多少应用程序，浏览器只有一个URL栏。您可以使用 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;()&lt;/code&gt; （）函数提供 &lt;code&gt;extraProviders&lt;/code&gt; ，从而在平台级别配置其他特定于平台的提供程序。</target>
        </trans-unit>
        <trans-unit id="f37d8e3d33ca8ebc56e260052933af141475551f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by#css&quot;&gt;By.css()&lt;/a&gt;&lt;/code&gt; static method selects &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; nodes with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors&quot;&gt;standard CSS selector&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/by#css&quot;&gt;By.css()&lt;/a&gt;&lt;/code&gt; 静态方法选择 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 与节点&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors&quot;&gt;标准CSS选择&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="902aeacf20da1b061a9425cd1b76e17c4b6c324d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; function takes as inputs a &lt;em&gt;template&lt;/em&gt; HTML page (usually &lt;code&gt;index.html&lt;/code&gt;), an Angular &lt;em&gt;module&lt;/em&gt; containing components, and a &lt;em&gt;route&lt;/em&gt; that determines which components to display. The route comes from the client's request to the server.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;()&lt;/code&gt; 函数将作为输入一个&lt;em&gt;模板&lt;/em&gt;的HTML页面（通常 &lt;code&gt;index.html&lt;/code&gt; ），角&lt;em&gt;模块&lt;/em&gt;含有组分，和一个&lt;em&gt;路径&lt;/em&gt;，其确定哪些组件来显示。路由来自客户端到服务器的请求。</target>
        </trans-unit>
        <trans-unit id="f31ffdeeac5f4aa667f7c349fd0fa92694671220" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function takes as inputs a &lt;em&gt;template&lt;/em&gt; HTML page (usually &lt;code&gt;index.html&lt;/code&gt;), an Angular &lt;em&gt;module&lt;/em&gt; containing components, and a &lt;em&gt;route&lt;/em&gt; that determines which components to display. The route comes from the client's request to the server.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 函数将作为输入一个&lt;em&gt;模板&lt;/em&gt;的HTML页面（通常 &lt;code&gt;index.html&lt;/code&gt; ），角&lt;em&gt;模块&lt;/em&gt;含有组分，和一个&lt;em&gt;路径&lt;/em&gt;，其确定哪些组件来显示。路由来自客户端到服务器的请求。</target>
        </trans-unit>
        <trans-unit id="17d0dc10d2712c04c9ddf4132743725ecd2ca468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; and its observables are insulated from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; itself. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; destroys a routed component when it is no longer needed and the injected &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; dies with it.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 及其观测从绝缘 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 本身。该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 破坏路由的组件时，不再需要注射它 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 模具它。</target>
        </trans-unit>
        <trans-unit id="ee5d82b8904589c98b1aff4a8285582c106117cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; is specific to each routed component loaded by the Angular Router. It contains information about the route, its parameters, and additional data associated with the route.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 是特定于由角路由器加载的每个路由组件。它包含有关路线，其参数以及与路线相关联的其他数据的信息。</target>
        </trans-unit>
        <trans-unit id="16aa52d480dade7f5e2bcd0f28f76622bedc1bdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; is specific to each routed component that the Angular Router loads. It contains information about the route, its parameters, and additional data associated with the route.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 是具体到每个路由组件的角度路由器负载。它包含有关路线，其参数以及与路线相关联的其他数据的信息。</target>
        </trans-unit>
        <trans-unit id="ed5e6b35d6fcc4de19833f40d2839e2bef8fe5c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; property is an &lt;code&gt;Observable&lt;/code&gt; map of route parameters. The &lt;code&gt;paramMap&lt;/code&gt; emits a new map of values that includes &lt;code&gt;id&lt;/code&gt; when the user navigates to the component. In &lt;code&gt;ngOnInit()&lt;/code&gt; you subscribe to those values, set the &lt;code&gt;selectedId&lt;/code&gt;, and get the heroes.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; 属性是 &lt;code&gt;Observable&lt;/code&gt; 的参数路线图。所述 &lt;code&gt;paramMap&lt;/code&gt; 发射值的一个新的地图，其中包括 &lt;code&gt;id&lt;/code&gt; 当用户导航到该组件。在 &lt;code&gt;ngOnInit()&lt;/code&gt; 中,您订阅这些值，设置 &lt;code&gt;selectedId&lt;/code&gt; ，并获得英雄。</target>
        </trans-unit>
        <trans-unit id="62d4b299a442f9b6c2574a227699c880a07b173f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; property is an &lt;code&gt;Observable&lt;/code&gt; map of route parameters. The &lt;code&gt;paramMap&lt;/code&gt; emits a new map of values that includes &lt;code&gt;id&lt;/code&gt; when the user navigates to the component. In &lt;code&gt;ngOnInit&lt;/code&gt; you subscribe to those values, set the &lt;code&gt;selectedId&lt;/code&gt;, and get the heroes.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; 属性是 &lt;code&gt;Observable&lt;/code&gt; 的参数路线图。所述 &lt;code&gt;paramMap&lt;/code&gt; 发射值的一个新的地图，其中包括 &lt;code&gt;id&lt;/code&gt; 当用户导航到该组件。在 &lt;code&gt;ngOnInit&lt;/code&gt; 中,您订阅这些值，设置 &lt;code&gt;selectedId&lt;/code&gt; ，并获得英雄。</target>
        </trans-unit>
        <trans-unit id="27d7deeeac83ea9a20c6f580c5c055c452a6dc3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroutesnapshot&quot;&gt;ActivatedRouteSnapshot&lt;/a&gt;&lt;/code&gt; contains the &lt;em&gt;future&lt;/em&gt; route that will be activated and the &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; contains the &lt;em&gt;future&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; of the application, should you pass through the guard check.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroutesnapshot&quot;&gt;ActivatedRouteSnapshot&lt;/a&gt;&lt;/code&gt; 包含了&lt;em&gt;未来&lt;/em&gt;将被激活路线和 &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; 包含&lt;em&gt;未来&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; 申请的，你应该通过保护检查。</target>
        </trans-unit>
        <trans-unit id="8280edbadaeff4ac7aa0d1cdde3cf47b0531bddc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard (checking route access).</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 后卫（检查线路接入）。</target>
        </trans-unit>
        <trans-unit id="a99606469d1a4cc7742bcfbd4bf5ec1a040063c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; guard is the tool to manage these navigation business rules.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/canactivate&quot;&gt;CanActivate&lt;/a&gt;&lt;/code&gt; 后卫是管理这些导航业务规则的工具。</target>
        </trans-unit>
        <trans-unit id="afb0b82efd7f4359cd956f034c1e2538d351b8a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; guard (checking child route access).</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; 后卫（检查孩子的路由接入）。</target>
        </trans-unit>
        <trans-unit id="34dffab7359c14331079d08669b2d615efde3d13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard (ask permission to discard unsaved changes).</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 后卫（征得同意放弃未保存的更改）。</target>
        </trans-unit>
        <trans-unit id="2f23fe85f4d51d8698c45f9ae081e5019673883b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard helps you decide what to do with unsaved changes and how to proceed.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 后卫帮助您决定如何处理未保存更改以及如何继续做。</target>
        </trans-unit>
        <trans-unit id="14db661cec9c3568b5135b43665bfcbfcd4b9253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard (check before loading feature module assets).</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; 后卫（检查之前加载功能模块的资产）。</target>
        </trans-unit>
        <trans-unit id="8c0d90c801c00fb60055fc74e159942da215c885" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; API is inspired by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams interface&lt;/a&gt;. It provides methods to handle parameter access for both route parameters (&lt;code&gt;paramMap&lt;/code&gt;) and query parameters (&lt;code&gt;queryParamMap&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; API是由灵感&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams接口&lt;/a&gt;。它提供了处理路由参数（ &lt;code&gt;paramMap&lt;/code&gt; ）和查询参数（ &lt;code&gt;queryParamMap&lt;/code&gt; ）的参数访问的方法。</target>
        </trans-unit>
        <trans-unit id="87e23084f4ca0468a6304206815831e8e9c49089" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; strategy does not load feature areas protected by a &lt;a href=&quot;router#can-load-guard&quot;&gt;CanLoad&lt;/a&gt; guard. This is by design.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 策略不会加载由保护功能区&lt;a href=&quot;router#can-load-guard&quot;&gt;CanLoad&lt;/a&gt;后卫。这是设计使然。</target>
        </trans-unit>
        <trans-unit id="1280f376d5dce25dd0582e1de839a6ba06987c67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; strategy does not load feature areas protected by a &lt;a href=&quot;router-tutorial-toh#can-load-guard&quot;&gt;CanLoad&lt;/a&gt; guard.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 策略不会加载由保护功能区&lt;a href=&quot;router-tutorial-toh#can-load-guard&quot;&gt;CanLoad&lt;/a&gt;后卫。</target>
        </trans-unit>
        <trans-unit id="c61a6fdcf13e9c86ff5a44bd92f179ae4c17aa7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; guard (pre-fetching route data).</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 防护件（预取路由数据）。</target>
        </trans-unit>
        <trans-unit id="f2eb75bb4ecb58de1eaa6fa343d6391a23d96005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; also supports &lt;a href=&quot;router#query-parameters&quot;&gt;query parameters&lt;/a&gt; and the &lt;a href=&quot;router#fragment&quot;&gt;fragment&lt;/a&gt; when using redirects.</source>
          <target state="translated">使用重定向时， &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 还支持&lt;a href=&quot;router#query-parameters&quot;&gt;查询参数&lt;/a&gt;和&lt;a href=&quot;router#fragment&quot;&gt;片段&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d4b6d0c293dec3cfa7f7e6385f6243927b4a452" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; also supports &lt;a href=&quot;router-tutorial-toh#query-parameters&quot;&gt;query parameters&lt;/a&gt; and the &lt;a href=&quot;router-tutorial-toh#fragment&quot;&gt;fragment&lt;/a&gt; when using redirects.</source>
          <target state="translated">使用重定向时， &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 还支持&lt;a href=&quot;router-tutorial-toh#query-parameters&quot;&gt;查询参数&lt;/a&gt;和&lt;a href=&quot;router-tutorial-toh#fragment&quot;&gt;片段&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47609ad3349203dba5c6265eb5fab99ea5f3e365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; matches that URL to a route to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. It creates an &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; object with the routing information and injects it into a new instance of the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 是URL匹配到的路由 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。它使用路由信息创建 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 对象，并将其注入到 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 的新实例中。</target>
        </trans-unit>
        <trans-unit id="21fe55f6896e40418d589006b8cbc60c2be0bf3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; module is an &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt; that provides the necessary service providers and directives for navigating through application views. A &lt;a href=&quot;glossary#routing-component&quot;&gt;routing component&lt;/a&gt; is one that imports the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; module and whose template contains a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; element where it can display views produced by the router.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 模块是&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;提供必要的服务提供商和指令用于通过应用程序视图导航。甲&lt;a href=&quot;glossary#routing-component&quot;&gt;路由组件&lt;/a&gt;是一个进口的 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 模块，其模板包含一个 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 元件，其中它能够显示由路由器生成的视图。</target>
        </trans-unit>
        <trans-unit id="1647cd0123077158e4b17948253f8bbd17f93811" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; offers two preloading strategies out of the box:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 提供开箱即用两个预加载策略：</target>
        </trans-unit>
        <trans-unit id="877254071c7848541b70167385ff6c80a4519c01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; offers two preloading strategies:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 提供两款预加载策略：</target>
        </trans-unit>
        <trans-unit id="59c3b172b152b721b1e9a71592d0d755b58d2153" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; supports &lt;em&gt;empty path&lt;/em&gt; routes; use them to group routes together without adding any additional path segments to the URL. Users will still visit &lt;code&gt;/admin&lt;/code&gt; and the &lt;code&gt;AdminComponent&lt;/code&gt; still serves as the &lt;em&gt;Routing Component&lt;/em&gt; containing child routes.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 支持&lt;em&gt;空路径&lt;/em&gt;的路由; 使用它们将路由分组在一起，而无需在URL中添加任何其他路径段。用户仍将访问 &lt;code&gt;/admin&lt;/code&gt; ，并且 &lt;code&gt;AdminComponent&lt;/code&gt; 仍充当包含子路由的&lt;em&gt;路由组件&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0959a563cb3265074d00520e70abc0842cae2d5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives on the anchor tags give the router control over those elements. The navigation paths are fixed, so you can assign a string to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; (a &quot;one-time&quot; binding).</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 对锚标签指令给了那些元素路由器控制。导航路径是固定的，因此您可以为 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; 分配一个字符串（&amp;ldquo;一次性&amp;rdquo;绑定）。</target>
        </trans-unit>
        <trans-unit id="19a7dd2b4d0033c385b588593b21d3fff087227f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive toggles CSS classes for active &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; bindings based on the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; 指令切换为主动CSS类 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 基于当前绑定 &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8657a5f3d772af4293fc4eba88a13d37bf61236" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive toggles css classes for active &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; bindings based on the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; 指令切换为主动CSS类 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 基于当前绑定 &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c7995bb70f0ae0cf3627366c5543ac5c032ac8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; function sets the &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;, making it the default strategy. You can switch to the &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; with an override during the bootstrapping process if you prefer it.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 函数设置 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 到 &lt;code&gt;&lt;a href=&quot;../api/common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; ，使之成为默认的策略。如果您愿意，可以在引导过程中使用覆盖切换到 &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9418ba8275e370ae277b731a55e776f79026780" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; function sets the &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;, which makes it the default strategy. You also have the option of switching to the &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; with an override during the bootstrapping process.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 函数集 &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 到 &lt;code&gt;&lt;a href=&quot;../api/common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; ，这使得它的默认策略。您还可以选择在引导过程中使用覆盖切换到 &lt;code&gt;&lt;a href=&quot;../api/common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9bf9938fff728d1cd8889ad751fddb80b83e9050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; configuration method takes an &lt;code&gt;InMemoryDataService&lt;/code&gt; class that primes the in-memory database.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 配置的方法需要一个 &lt;code&gt;InMemoryDataService&lt;/code&gt; 该素数的内存数据库类。</target>
        </trans-unit>
        <trans-unit id="2684614a1ecc2d98495d86f9bbe58a84c69aafc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method takes care of the &lt;em&gt;global&lt;/em&gt; injector configuration for the Router. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; method has no injector configuration. It uses directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;. For more information, see the &lt;a href=&quot;singleton-services#forRoot&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; pattern&lt;/a&gt; section of the &lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt; guide.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 方法以照顾&lt;em&gt;全球&lt;/em&gt;的路由器喷射器构造。所述 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; 方法没有喷射器构造。它使用诸如 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 的指令。有关更多信息，请参见&lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt;指南的&lt;a href=&quot;singleton-services#forRoot&quot;&gt; &lt;code&gt;forRoot()&lt;/code&gt; 模式&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="ac02a174bb651f87b3bb3995379d09ef25a0ff1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; pattern</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 图案</target>
        </trans-unit>
        <trans-unit id="678d09ad88def2247372c3a4a6393c3c2434c878" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; static method is a convention that makes it easy for developers to configure services and providers that are intended to be singletons. A good example of &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 静态方法是一种惯例，使开发人员可以轻松为那些旨在为单身配置服务和供应商。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 的一个很好的例子是 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="3828bf90aca6ba2f62f1c10e3b2552f116a1db1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is a directive from the router library that is used like a component. It acts as a placeholder that marks the spot in the template where the router should display the components for that outlet.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 是来自用于类似组件的路由器库指令。它充当占位符，标记模板中路由器应显示该插座组件的位置。</target>
        </trans-unit>
        <trans-unit id="d74a774153ea254ddecf646ba8eaac93785e276f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is one of the router directives that became available to the &lt;code&gt;AppComponent&lt;/code&gt; because &lt;code&gt;AppModule&lt;/code&gt; imports &lt;code&gt;AppRoutingModule&lt;/code&gt; which exported &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 是成为提供给路由器指令的一个 &lt;code&gt;AppComponent&lt;/code&gt; 因为 &lt;code&gt;AppModule&lt;/code&gt; 进口 &lt;code&gt;AppRoutingModule&lt;/code&gt; 其中出口 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c11bd00eecef2cce3341767e6d98cc873af8600" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is one of the router directives that became available to the &lt;code&gt;AppComponent&lt;/code&gt; because &lt;code&gt;AppModule&lt;/code&gt; imports &lt;code&gt;AppRoutingModule&lt;/code&gt; which exported &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;ng generate&lt;/code&gt; command you ran at the start of this tutorial added this import because of the &lt;code&gt;--module=app&lt;/code&gt; flag. If you manually created &lt;code&gt;app-routing.module.ts&lt;/code&gt; or used a tool other than the CLI to do so, you'll need to import &lt;code&gt;AppRoutingModule&lt;/code&gt; into &lt;code&gt;app.module.ts&lt;/code&gt; and add it to the &lt;code&gt;imports&lt;/code&gt; array of the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 是成为提供给路由器指令的一个 &lt;code&gt;AppComponent&lt;/code&gt; 因为 &lt;code&gt;AppModule&lt;/code&gt; 进口 &lt;code&gt;AppRoutingModule&lt;/code&gt; 其中出口 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 。由于 &lt;code&gt;--module=app&lt;/code&gt; 标志，您在本教程开始时运行的 &lt;code&gt;ng generate&lt;/code&gt; 命令添加了此导入。如果是手动创建 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 或使用除CLI以外的工具来做到这一点，你需要进口 &lt;code&gt;AppRoutingModule&lt;/code&gt; 到 &lt;code&gt;app.module.ts&lt;/code&gt; 并把它添加到 &lt;code&gt;imports&lt;/code&gt; 的阵列 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98421694d6873683d8adc6a2570f7e017b62f4ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service gives you access to events that indicate when the service worker has discovered an available update for your app or when it has activated such an update&amp;mdash;meaning it is now serving content from that update to your app.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 服务，您可以访问指示时，服务人员发现了一个可用的更新您的应用程序或当它已经激活，更新，这意味着它现在服务从更新的内容到你的应用程序事件。</target>
        </trans-unit>
        <trans-unit id="f8f699f83b8111047f49e6cbc19f04ff13424e11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service supports four separate operations:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 服务支持四种不同的操作：</target>
        </trans-unit>
        <trans-unit id="bc582fd99dd06940465b5d3c501d9db0b81efaf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; will invoke the AngularJS &lt;code&gt;$rootScope.$apply()&lt;/code&gt; after every turn of the Angular zone. This also triggers AngularJS change detection after every event.</source>
          <target state="translated">每次旋转Angular区域后， &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 都会调用AngularJS &lt;code&gt;$rootScope.$apply()&lt;/code&gt; 。在每个事件之后，这也会触发AngularJS更改检测。</target>
        </trans-unit>
        <trans-unit id="e84a1329251cd9c2fbb8229ea5249e31361e93bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe subscribes to an &lt;code&gt;Observable&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; and returns the latest value it has emitted. When a new value is emitted, the &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe marks the component to be checked for changes. When the component gets destroyed, the &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe unsubscribes automatically to avoid potential memory leaks.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管签约了 &lt;code&gt;Observable&lt;/code&gt; 或 &lt;code&gt;Promise&lt;/code&gt; ，并返回它发出的最新值。发出新值时， &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道会将要检查的组件标记为更改。销毁组件后， &lt;code&gt;&lt;a href=&quot;../core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道将自动取消订阅，以避免潜在的内存泄漏。</target>
        </trans-unit>
        <trans-unit id="531c89170dd2f17583e39b5d4eddf1ecb2701940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; package contains helpers that allow AngularJS and Angular components to be used together inside a hybrid upgrade application, which supports AOT compilation.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 包包含助手允许AngularJS和角分量一起混合升级应用，其支持AOT编译内部使用。</target>
        </trans-unit>
        <trans-unit id="c3132cfc546b1bdf952329e52271f45aff98383a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; package contains helpers that allow AngularJS and Angular components to be used together inside a hybrid upgrade application, which supports AoT compilation.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 包包含助手允许AngularJS和角分量一起混合升级应用，其支持AOT编译内部使用。</target>
        </trans-unit>
        <trans-unit id="752b1abdffae69bdf4168440e2e9cb777c33b581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; control to replace the existing control</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 控制，以取代现有的控制</target>
        </trans-unit>
        <trans-unit id="b925de43d88186682c1cc87f1ed1e335656ff9bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe subscribes to an &lt;code&gt;Observable&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; and returns the latest value it has emitted. When a new value is emitted, the &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe marks the component to be checked for changes. When the component gets destroyed, the &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe unsubscribes automatically to avoid potential memory leaks.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管签约了 &lt;code&gt;Observable&lt;/code&gt; 或 &lt;code&gt;Promise&lt;/code&gt; ，并返回它发出的最新值。发出新值时， &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道会将要检查的组件标记为更改。销毁组件后， &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道将自动取消订阅，以避免潜在的内存泄漏。</target>
        </trans-unit>
        <trans-unit id="60977a7c3bb769794d3c2f89211320ea518117b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; exports are re-exported by &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is included automatically in the root &lt;code&gt;AppModule&lt;/code&gt; when you create a new app with the CLI &lt;code&gt;new&lt;/code&gt; command.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 出口再出口由 &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ，这是自动根包含 &lt;code&gt;AppModule&lt;/code&gt; 当你创建一个CLI新应用 &lt;code&gt;new&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="f016d8816fcfa69165aee6fbb999c091f83bf43a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a number value and listening to number input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">用于写入数字值和侦听数字输入更改的 &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。值访问器由 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="48f6ec592cff0cf9d0aff197b282590da64cb58e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a range value and listening to range input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 写一个范围值，并聆听范围输入的变化。值访问器由 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="27bb0eddd953d2a41d5154c0bba7e4f6f544cc06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing multi-select control values and listening to multi-select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 写多选控制值，听多选择控制的变化。值访问器由 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="8a6f7acc93e4d52ce15e418ed2762c1637e0216e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing radio control values and listening to radio control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 写无线电控制值和听无线电控制的变化。值访问器由 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="f1148900a1718d2df24d36a4cbd007c9c92b9a79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing select control values and listening to select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 用于写入选择控制值，听来选择控制的变化。值访问器由 &lt;code&gt;&lt;a href=&quot;formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="16103ac1afe681300c7a23cc043ef06beb4a7047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function provides a bridge from Angular's component interface and change detection functionality to the built-in DOM API.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 函数提供了从角的组件接口和变化检测功能内置的DOM API的桥梁。</target>
        </trans-unit>
        <trans-unit id="ee8ac75a2b9c5aee4a1cebe857ca226adf40cf76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 绑定到这个指令。</target>
        </trans-unit>
        <trans-unit id="7270e358ccf5aaada34c49677df7b3e14375ded5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; 指令实例。</target>
        </trans-unit>
        <trans-unit id="cc714487b764ae3e9d84f7190d1dfb0cc3b0870c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; provides syntactic sugar that shortens creating instances of a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It reduces the amount of boilerplate needed to build complex forms.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 提供语法糖，来缩短创建的实例 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; ，或 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 。它减少了构建复杂表格所需的样板数量。</target>
        </trans-unit>
        <trans-unit id="850b4ce7a3a59e14b92b60a445f357fdbf2fe0f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 绑定到这个指令。</target>
        </trans-unit>
        <trans-unit id="8d22d6266b6398a65b4e3e7fe6142ffe7a2c64b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance tracks the value, user interaction, and validation status of the control and keeps the view synced with the model. If used within a parent form, the directive also registers itself with the form as a child control.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例跟踪值，用户交互，以及控制的验证状态，并保持与模型同步的图。如果在父窗体中使用，该指令还将在窗体中注册自己作为子控件。</target>
        </trans-unit>
        <trans-unit id="93fad32c1a184c4d364a5daa7659977bd1a3cfff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 指令实例。</target>
        </trans-unit>
        <trans-unit id="801ce0c4ea960713beae25efb9571c6b96674579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; associated with a particular &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">与特定 &lt;code&gt;&lt;a href=&quot;abstractformgroupdirective&quot;&gt;AbstractFormGroupDirective&lt;/a&gt;&lt;/code&gt; 关联的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="612e978f37e7706fc06192d6e7c9d3657175c9c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 绑定到这个指令。</target>
        </trans-unit>
        <trans-unit id="ef29ac55227f5beca2e703c6f3ce56a2c65b38c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance created for this form.</source>
          <target state="translated">为此表格创建的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="ad8e8d6f83cfec04008d3c28ea120b7fb0022efd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 指令实例。</target>
        </trans-unit>
        <trans-unit id="9f8bac942c174f8f843f6218a20ac2bc1584df80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a number value and listening to number input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">用于写入数字值和侦听数字输入更改的 &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。值访问器由 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="aace7891efa5898083cb4a8b6c06104aec931f83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a range value and listening to range input changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 写一个范围值，并聆听范围输入的变化。值访问器由 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="6bbe745964444088faf3ae89051254babe77ae2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing multi-select control values and listening to multi-select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 写多选控制值，听多选择控制的变化。值访问器由 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="4d1e7c68b482004d56ddf05c6d90fff65212326f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing radio control values and listening to radio control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 写无线电控制值和听无线电控制的变化。值访问器由 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="b783ac6bf4e725f603e628f0ee838444f2369886" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing select control values and listening to select control changes. The value accessor is used by the &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 用于写入选择控制值，听来选择控制的变化。值访问器由 &lt;code&gt;&lt;a href=&quot;forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令使用。</target>
        </trans-unit>
        <trans-unit id="3855ab70e68f971860bf678533a96d1491488cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; value determines how a successful response body is parsed.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; 值确定成功响应的身体是如何解析。</target>
        </trans-unit>
        <trans-unit id="c81bb386aab2ceb16fe7911f0dc2f4d144946406" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; 指令实例。</target>
        </trans-unit>
        <trans-unit id="d63e7454a683dccf5ba2f06aaad94bd636915124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; directive is generally used in the &lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;shorthand form&lt;/a&gt;&lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. In this form, the template to be rendered for each iteration is the content of an anchor element containing the directive.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; 指令一般在使用&lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;简写形式&lt;/a&gt; &lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 。在这种形式下，每次迭代要渲染的模板是包含指令的锚元素的内容。</target>
        </trans-unit>
        <trans-unit id="ce10e6bc2f600bbe290d97323968acbf78a1a9dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 指令实例。</target>
        </trans-unit>
        <trans-unit id="08aeb1d8b8421374a5c2ea9c2371614dc9182b9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; directive instance.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 指令实例。</target>
        </trans-unit>
        <trans-unit id="95125957724760afb3d875ddfb3db41240b2f9f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="496ed3f692f3ec8115c36370a54ff9294c2d8673" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; is included by default in any app created through the CLI, and it re-exports the &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; exports, making basic Angular functionality available to the app.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 默认情况下，在通过CLI创建的任何应用程序包括，然后将其重新出口 &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; 出口，使得基本角的功能提供给应用程序。</target>
        </trans-unit>
        <trans-unit id="48ea56e0f769676c4c1d046c393f4551409d11e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; class is used directly by all implementations of &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; when they need to interact with the DOM APIs like pushState, popState, etc.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; 类是由所有实现直接使用&lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt;当他们需要互动与DOM API，如pushState的，popState等。</target>
        </trans-unit>
        <trans-unit id="6a6ae8a3c165d3ac08575bb713450a7d5f9b67e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; class is used directly by all implementations of &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; when they need to interact with the DOM apis like pushState, popState, etc...</source>
          <target state="translated">当&lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; &lt;/a&gt;的所有实现都需要与DOM API（例如pushState，popState等）进行交互时， &lt;code&gt;&lt;a href=&quot;platformlocation&quot;&gt;PlatformLocation&lt;/a&gt;&lt;/code&gt; 类将直接由LocationStrategy的所有实现使用。</target>
        </trans-unit>
        <trans-unit id="0661053b470abb698b0e1169e845f6b47e88d3d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function collects multiple elements and works internally by using &lt;code&gt;element.querySelectorAll&lt;/code&gt;. Use the &lt;code&gt;&lt;a href=&quot;animationqueryoptions#limit&quot;&gt;limit&lt;/a&gt;&lt;/code&gt; field of an options object to limit the total number of items to be collected. For example:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 函数收集多种元素，并通过使用内部工作 &lt;code&gt;element.querySelectorAll&lt;/code&gt; 。使用选项对象的 &lt;code&gt;&lt;a href=&quot;animationqueryoptions#limit&quot;&gt;limit&lt;/a&gt;&lt;/code&gt; 字段来限制要收集的项目总数。例如：</target>
        </trans-unit>
        <trans-unit id="249c7dd2cd3e15f6f4c51fbb7641e77222a6c8de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function collects multiple elements and works internally by using &lt;code&gt;element.querySelectorAll&lt;/code&gt;. Use the &lt;code&gt;limit&lt;/code&gt; field of an options object to limit the total number of items to be collected. For example:</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 函数收集多种元素，并通过使用内部工作 &lt;code&gt;element.querySelectorAll&lt;/code&gt; 。使用选项对象的 &lt;code&gt;limit&lt;/code&gt; 字段来限制要收集的项目总数。例如：</target>
        </trans-unit>
        <trans-unit id="3b913a55abde72ca81d7024ca445739808aa7665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; animation method also supports reading an inline function which can decide if its associated animation should be run.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; 动画的方法还支持读取内联函数，它可以决定是否与其相关的动画应该运行。</target>
        </trans-unit>
        <trans-unit id="4712f621c4a5e2ef20b6c645ee3fa558074a5fe9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; allows: 1. creation of Angular component from AngularJS component directive (See [UpgradeAdapter#upgradeNg1Component()]) 2. creation of AngularJS directive from Angular component. (See [UpgradeAdapter#downgradeNg2Component()]) 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks coexisting in a single application.</source>
          <target state="translated">所述 &lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; 允许：1.从AngularJS创建角分量的组件指令（见[UpgradeAdapter＃upgradeNg1Component（）]）2.创建AngularJS的从角分量指令。（请参见[UpgradeAdapter＃downgradeNg2Component（）]。）3.混合Angular应用程序的自举，该应用程序包含在单个应用程序中共存的两个框架。</target>
        </trans-unit>
        <trans-unit id="a1eb2dcb7af0dcf4a695c59ebfeddacb6c402e95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; class</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 类</target>
        </trans-unit>
        <trans-unit id="66b690e47d0f38b1cd5809389bb990c762cb3b2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator identifies the class immediately below it as a component, and provides the template and related component-specific metadata.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 装饰标识类正下方它作为一个组件，并且提供了模板和相关的部件特定的元数据。</target>
        </trans-unit>
        <trans-unit id="57179aa07943c084fd24a0cf2ed81afe8bc53b96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator identifies the class immediately below it as a component class, and specifies its metadata. In the example code below, you can see that &lt;code&gt;HeroListComponent&lt;/code&gt; is just a class, with no special Angular notation or syntax at all. It's not a component until you mark it as one with the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 装饰标识类正下方它作为一个组件类，并指定其元数据。在下面的示例代码中，您可以看到 &lt;code&gt;HeroListComponent&lt;/code&gt; 只是一个类，根本没有特殊的Angular表示法或语法。在使用 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 装饰器将其标记为一个组件之前，它不是组件。</target>
        </trans-unit>
        <trans-unit id="27ed6a775ed7809f9909d1cfea44203256e88024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; selector value of &quot;app-hero-form&quot; means you can drop this form in a parent template with a &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&amp;ldquo; app-hero-form&amp;rdquo; 的 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 选择器值表示您可以使用 &lt;code&gt;&amp;lt;app-hero-form&amp;gt;&lt;/code&gt; 标记将此表单放在父模板中。</target>
        </trans-unit>
        <trans-unit id="abb5105661ab098fdef91d360f2cbe023d27af04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator's lone configuration property specifies the directive's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;CSS attribute selector&lt;/a&gt;, &lt;code&gt;[appHighlight]&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 装饰上唯一的配置属性指定指令的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&quot;&gt;CSS属性选择&lt;/a&gt;， &lt;code&gt;[appHighlight]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f79cdd82b4c60315fdd4cc2098a2174561bcca45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; function decorating the &lt;code&gt;heroCache&lt;/code&gt; constructor property ensures that you get a reference to the cache service from the parent &lt;code&gt;HeroBioComponent&lt;/code&gt;. Angular throws an error if the parent lacks that service, even if a component higher in the component tree includes it.</source>
          <target state="translated">装饰 &lt;code&gt;heroCache&lt;/code&gt; 构造函数属性的 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 函数可确保您从父 &lt;code&gt;HeroBioComponent&lt;/code&gt; 获得对缓存服务的引用。如果父级缺少该服务，则Angular会引发错误，即使组件树中更高的组件包括该服务也是如此。</target>
        </trans-unit>
        <trans-unit id="5fd526663380f3592df2037fdc9b44234695f288" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; property decorator stops the upward search at the &lt;em&gt;host component&lt;/em&gt;. The host component is typically the component requesting the dependency. However, when this component is projected into a &lt;em&gt;parent&lt;/em&gt; component, that parent component becomes the host. The following example covers this second case.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;&lt;/code&gt; 属性装饰停在向上搜索&lt;em&gt;主机组件&lt;/em&gt;。主机组件通常是请求依赖项的组件。但是，当将此组件投影到&lt;em&gt;父&lt;/em&gt;组件中时，该父组件将成为主机。以下示例涵盖了第二种情况。</target>
        </trans-unit>
        <trans-unit id="60ba97a300b77d23af86d8fe748cc10fc64eeb09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; decorator lets you subscribe to events of the DOM element that hosts an attribute directive, the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; in this case.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 装饰让你订阅的DOM元素的事件主机属性指令，在 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 在这种情况下。</target>
        </trans-unit>
        <trans-unit id="82b280761ccb94a90a3866c3b2590b2d7168cfa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator accepts a metadata object for the service, the same way the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator did for your component classes.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰接受服务时，以同样的方式在元数据对象 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 装饰做你的组件类。</target>
        </trans-unit>
        <trans-unit id="33b3224e88a7414e23c7b4a233a665f3a8818e30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator has the &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; metadata option, where you can specify the provider of the decorated service class with the &lt;code&gt;root&lt;/code&gt; injector, or with the injector for a specific NgModule.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰有 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 元数据选项，在这里你可以与指定装修服务类的提供者 &lt;code&gt;root&lt;/code&gt; 注射器，或用注射器特定NgModule。</target>
        </trans-unit>
        <trans-unit id="f3b1fe44a66b6a4f24f65d28d0cac2b2c2e2aab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator has the &lt;code&gt;providedIn&lt;/code&gt; metadata option, where you can specify the provider of the decorated service class with the &lt;code&gt;root&lt;/code&gt; injector, or with the injector for a specific NgModule.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰有 &lt;code&gt;providedIn&lt;/code&gt; 元数据选项，在这里你可以与指定装修服务类的提供者 &lt;code&gt;root&lt;/code&gt; 注射器，或用注射器特定NgModule。</target>
        </trans-unit>
        <trans-unit id="e00b5d1cd3cbe5d3000e056fc39a0951f372ba27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator identifies a service class. The &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property configures a specific &lt;code&gt;ModuleInjector&lt;/code&gt;, here &lt;code&gt;root&lt;/code&gt;, which makes the service available in the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰标识服务类。该 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 属性配置特定 &lt;code&gt;ModuleInjector&lt;/code&gt; ，这里 &lt;code&gt;root&lt;/code&gt; ，这使得在提供服务 &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad48defe3e03a0fc8f1a09782bf32d657ea22331" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator identifies a service class. The &lt;code&gt;providedIn&lt;/code&gt; property configures a specific &lt;code&gt;ModuleInjector&lt;/code&gt;, here &lt;code&gt;root&lt;/code&gt;, which makes the service available in the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰标识服务类。该 &lt;code&gt;providedIn&lt;/code&gt; 属性配置特定 &lt;code&gt;ModuleInjector&lt;/code&gt; ，这里 &lt;code&gt;root&lt;/code&gt; ，这使得在提供服务 &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e68e554c1029e63664d57c18622c712d0a2c5fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; is an essential ingredient in every Angular service definition. The rest of the class has been written to expose a &lt;code&gt;getHeroes&lt;/code&gt; method that returns the same mock data as before. (A real app would probably get its data asynchronously from a remote server, but we'll ignore that to focus on the mechanics of injecting the service.)</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 是在每一个角度的服务定义的重要组成部分。该类的其余部分已被编写为公开 &lt;code&gt;getHeroes&lt;/code&gt; 方法，该方法返回与以前相同的模拟数据。（一个真正的应用程序可能会从远程服务器异步获取其数据，但是我们将忽略它，而将重点放在注入服务的机制上。）</target>
        </trans-unit>
        <trans-unit id="885d9f9809780d5bc310e3e424d03c4b141f4967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; metadata allows the service class to be used with the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; mechanism. The injectable class is instantiated by a &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;. &lt;a href=&quot;glossary#injector&quot;&gt;Injectors&lt;/a&gt; maintain lists of providers and use them to provide service instances when they are required by components or other services.</source>
          <target state="translated">在 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 元数据允许服务类与使用&lt;a href=&quot;glossary#di&quot;&gt;依赖注入&lt;/a&gt;机制。可注入类由&lt;a href=&quot;glossary#provider&quot;&gt;提供者&lt;/a&gt;实例化。&lt;a href=&quot;glossary#injector&quot;&gt;注入器&lt;/a&gt;维护提供程序列表，并在组件或其他服务需要它们时使用它们来提供服务实例。</target>
        </trans-unit>
        <trans-unit id="38ce962cd0076ede1d204b85c3815cacd68aa9f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator will attach some dependency injection metadata to the class, letting Angular know about its dependencies. As described by the &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection Guide&lt;/a&gt;, this is a marker decorator you need to use for classes that have no other Angular decorators but still need to have their dependencies injected.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; 装饰将一些依赖注入的元数据附加到类，让角知道它的依赖性。如&lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection Guide&lt;/a&gt;所描述，这是一个标记修饰符，您需要将其用于没有其他Angular修饰符但仍需要注入其依赖关系的类。</target>
        </trans-unit>
        <trans-unit id="990450ef80fcef92daa50a47b7da3cde2efb9ff2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component or directive signifies that the property can receive its value from its parent component.</source>
          <target state="translated">子组件或指令中的 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰器表示该属性可以从其父组件接收其值。</target>
        </trans-unit>
        <trans-unit id="f82d4b4dc5240c874db316d0eb21e8c9fa399274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorators have the &lt;code&gt;providers&lt;/code&gt; metadata option, where you can configure providers for NgModule-level or component-level injectors.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 装饰有 &lt;code&gt;providers&lt;/code&gt; 元数据选项，在这里您可以NgModule级或组件级注射器配置提供。</target>
        </trans-unit>
        <trans-unit id="d2f532ec5724d6b05eba458d043ebf03fb0000ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator identifies &lt;code&gt;AppModule&lt;/code&gt; as an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; class. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; takes a metadata object that tells Angular how to compile and launch the application.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰标识 &lt;code&gt;AppModule&lt;/code&gt; 作为 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 类。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 一个元数据对象，该对象告诉Angular如何编译和启动应用程序。</target>
        </trans-unit>
        <trans-unit id="793708455a547f501ce441e6a27457efeb8d5cad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata initializes the router and starts it listening for browser location changes.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据初始化路由器启动时，它监听浏览器位置的变化。</target>
        </trans-unit>
        <trans-unit id="de3b9997da7fd9351bee46d71bf4389338789fcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata plays an important role in guiding the Angular compilation process that converts the app code you write into highly performant JavaScript code. The metadata describes how to compile a component's template and how to create an &lt;a href=&quot;glossary#injector&quot;&gt;injector&lt;/a&gt; at runtime. It identifies the NgModule's &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt;, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#pipe&quot;&gt;pipes&lt;/a&gt;, and makes some of them public through the &lt;code&gt;exports&lt;/code&gt; property so that external components can use them. You can also use an NgModule to add &lt;a href=&quot;glossary#provider&quot;&gt;providers&lt;/a&gt; for &lt;a href=&quot;glossary#service&quot;&gt;services&lt;/a&gt;, so that the services are available elsewhere in your app.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 元数据对指导角编制过程中起重要作用，其将您写入高执行JavaScript代码的应用程序代码。元数据描述了如何编译组件模板以及如何在运行时创建&lt;a href=&quot;glossary#injector&quot;&gt;注入器&lt;/a&gt;。它标识NgModule的&lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt;，&lt;a href=&quot;glossary#directive&quot;&gt;伪指令&lt;/a&gt;和&lt;a href=&quot;glossary#pipe&quot;&gt;管道&lt;/a&gt;，并通过 &lt;code&gt;exports&lt;/code&gt; 属性将其中一些公开，以便外部组件可以使用它们。您还可以使用NgModule添加&lt;a href=&quot;glossary#provider&quot;&gt;服务&lt;/a&gt;的&lt;a href=&quot;glossary#service&quot;&gt;提供程序&lt;/a&gt;，以使服务在您应用程序的其他位置可用。</target>
        </trans-unit>
        <trans-unit id="551e7f123e55c8302870ff8d05f968f8ce0fe58b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; property tells the compiler that this is an entry component &lt;em&gt;and&lt;/em&gt; it should generate code to bootstrap the application with this component.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 属性告诉编译器，这是入口部件&lt;em&gt;和&lt;/em&gt;它应该生成代码来引导与该组件的应用程序。</target>
        </trans-unit>
        <trans-unit id="4b851db63609eef9aefac9a444ed5cbac0f0319b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; property decorator tells Angular to return null when it can't find the dependency.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; 属性装饰告诉角返回NULL时，它无法找到的依赖。</target>
        </trans-unit>
        <trans-unit id="2508286f96d86b216f2a179d26f3463859edc2eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator in a child component or directive allows data to flow from the child to the parent.</source>
          <target state="translated">子组件或指令中的 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 装饰器允许数据从子流到父流。</target>
        </trans-unit>
        <trans-unit id="a9d2b202019a40c34df385a62aa3700bbf14c211" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator allows you to define the pipe name that you'll use within template expressions. It must be a valid JavaScript identifier. Your pipe's name is &lt;code&gt;exponentialStrength&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 装饰允许您定义的管道名称，你会模板表达式中使用。它必须是有效的JavaScript标识符。您管道的名称为 &lt;code&gt;exponentialStrength&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6eb463094d9552ad72076a24ff98a2f18c5be9b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/bazel&lt;/code&gt; package provides a builder that allows Angular CLI to use Bazel as the build tool.</source>
          <target state="translated">在 &lt;code&gt;@angular/bazel&lt;/code&gt; 包提供的助洗剂，其允许角CLI使用巴泽勒作为构建工具。</target>
        </trans-unit>
        <trans-unit id="2b12259d8e67605d37f369e41dddfc69f10b15d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/elements&lt;/code&gt; package exports a &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; API that provides a bridge from Angular's component interface and change detection functionality to the built-in DOM API.</source>
          <target state="translated">在 &lt;code&gt;@angular/elements&lt;/code&gt; 包出口 &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; API，它提供从角的组件接口和变化检测功能的桥梁，内置的DOM API。</target>
        </trans-unit>
        <trans-unit id="4488a294179b4aa7eb55572640dfae952a5db44c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@angular/platform-*&lt;/code&gt; packages enable Angular to be run in different contexts. For examples, &lt;code&gt;@angular/platform-server&lt;/code&gt; enables Angular to be run on the server, and &lt;code&gt;@angular/platform-browser&lt;/code&gt; enables Angular to be run in a web browser.</source>
          <target state="translated">该 &lt;code&gt;@angular/platform-*&lt;/code&gt; 包使角在不同的上下文中运行。例如， &lt;code&gt;@angular/platform-server&lt;/code&gt; 使Angular可以在服务器上运行，而 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 使Angular可以在Web浏览器中运行。</target>
        </trans-unit>
        <trans-unit id="0c63fd51849879c954d809afd0f11511d1eee422" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@routeAnimation&lt;/code&gt; property is bound to the &lt;code&gt;getAnimationData()&lt;/code&gt; with the provided &lt;code&gt;routerOutlet&lt;/code&gt; reference, so the next step is to define that function in the &lt;code&gt;AppComponent&lt;/code&gt;. The &lt;code&gt;getAnimationData()&lt;/code&gt; function returns the animation property from the &lt;code&gt;data&lt;/code&gt; provided through the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; property matches the &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; names you used in the &lt;code&gt;slideInAnimation&lt;/code&gt; defined in &lt;code&gt;animations.ts&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;@routeAnimation&lt;/code&gt; 属性绑定到 &lt;code&gt;getAnimationData()&lt;/code&gt; 与所提供的 &lt;code&gt;routerOutlet&lt;/code&gt; 参考，所以下一步是定义在该函数 &lt;code&gt;AppComponent&lt;/code&gt; 。所述 &lt;code&gt;getAnimationData()&lt;/code&gt; 函数返回从动画属性 &lt;code&gt;data&lt;/code&gt; 通过所提供的 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。该 &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; 属性相匹配的 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; ，你在使用的名称 &lt;code&gt;slideInAnimation&lt;/code&gt; 定义 &lt;code&gt;animations.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="884f6aebfdc7aeba7bf75a1835534b9815612496" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@routeAnimation&lt;/code&gt; property is bound to the &lt;code&gt;getAnimationData&lt;/code&gt; with the provided &lt;code&gt;routerOutlet&lt;/code&gt; reference, so you'll need to define that function in the &lt;code&gt;AppComponent&lt;/code&gt;. The &lt;code&gt;getAnimationData&lt;/code&gt; function returns the animation property from the &lt;code&gt;data&lt;/code&gt; provided through the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; property matches the &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; names you used in the &lt;code&gt;slideInAnimation&lt;/code&gt; defined in &lt;code&gt;animations.ts&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;@routeAnimation&lt;/code&gt; 属性绑定到 &lt;code&gt;getAnimationData&lt;/code&gt; 与所提供的 &lt;code&gt;routerOutlet&lt;/code&gt; 参考，所以你需要定义在该函数 &lt;code&gt;AppComponent&lt;/code&gt; 。该 &lt;code&gt;getAnimationData&lt;/code&gt; 函数返回从动画属性 &lt;code&gt;data&lt;/code&gt; ，通过所提供 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。该 &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; 属性相匹配的 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; ，你在使用的名称 &lt;code&gt;slideInAnimation&lt;/code&gt; 定义 &lt;code&gt;animations.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65905cf210914a41fcac7f549f19b60569db7000" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AdComponent&lt;/code&gt; interface</source>
          <target state="translated">该 &lt;code&gt;AdComponent&lt;/code&gt; 接口</target>
        </trans-unit>
        <trans-unit id="0b3a8ba795cca69d54469fef536f9ed61a6daf82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Admin&lt;/code&gt; and &lt;code&gt;Login&lt;/code&gt; buttons illustrate other router capabilities covered later in the guide.</source>
          <target state="translated">&amp;ldquo; &lt;code&gt;Admin&lt;/code&gt; 和&amp;ldquo; &lt;code&gt;Login&lt;/code&gt; 按钮说明了本指南后面介绍的其他路由器功能。</target>
        </trans-unit>
        <trans-unit id="933674f343bff2cd0dd207810101a6b8c86a86b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Admin&lt;/code&gt; and &lt;code&gt;Login&lt;/code&gt; buttons illustrate other router capabilities to be covered later in the guide. This short introduction will do for now.</source>
          <target state="translated">&amp;ldquo; &lt;code&gt;Admin&lt;/code&gt; 和&amp;ldquo; &lt;code&gt;Login&lt;/code&gt; 按钮说明了其他路由器功能，这些功能将在本指南的后面部分介绍。此简短介绍将立即执行。</target>
        </trans-unit>
        <trans-unit id="5be07b6d0ce69825736f39e33271e0f4a837efd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AfterViewComponent&lt;/code&gt; displays this child view &lt;em&gt;within its template&lt;/em&gt;:</source>
          <target state="translated">该 &lt;code&gt;AfterViewComponent&lt;/code&gt; 显示此子视图&lt;em&gt;的模板中&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="5da2c3c2bd8ffcb1dc1282cef2a487959ea1abd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AnimalService&lt;/code&gt; in the logical tree would look like this:</source>
          <target state="translated">逻辑树中的 &lt;code&gt;AnimalService&lt;/code&gt; 如下所示：</target>
        </trans-unit>
        <trans-unit id="792f131f2d93317416f5bc123a877a96098076ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; establishes the initial &lt;code&gt;SizerComponent.size&lt;/code&gt; value.</source>
          <target state="translated">所述 &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 建立初始 &lt;code&gt;SizerComponent.size&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="1141745577d0d6fe3c0de70005105affb0508d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; in this example features a list of &lt;code&gt;items&lt;/code&gt; in an array and a method for adding more items to the array.</source>
          <target state="translated">此示例中的 &lt;code&gt;AppComponent&lt;/code&gt; 具有数组中 &lt;code&gt;items&lt;/code&gt; 的列表以及向数组中添加更多项目的方法。</target>
        </trans-unit>
        <trans-unit id="f5ce2d14bdf3c9317b532acaf7b8ff5f030b4ac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; is the test subject, so of course you declare the real version.</source>
          <target state="translated">该 &lt;code&gt;AppComponent&lt;/code&gt; 为测试对象，所以你当然申报的真实版。</target>
        </trans-unit>
        <trans-unit id="da1ffde96872e3d62908574983f6c5d1159496b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; links to validate are as follows:</source>
          <target state="translated">用于验证的 &lt;code&gt;AppComponent&lt;/code&gt; 链接如下：</target>
        </trans-unit>
        <trans-unit id="c05cfe4289978b66eaf6425a835a8bb31c03dd84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; template no longer needs &lt;code&gt;&amp;lt;app-heroes&amp;gt;&lt;/code&gt; because the app will only display the &lt;code&gt;HeroesComponent&lt;/code&gt; when the user navigates to it.</source>
          <target state="translated">所述 &lt;code&gt;AppComponent&lt;/code&gt; 模板不再需要 &lt;code&gt;&amp;lt;app-heroes&amp;gt;&lt;/code&gt; 因为该应用将仅显示 &lt;code&gt;HeroesComponent&lt;/code&gt; 当用户导航到它。</target>
        </trans-unit>
        <trans-unit id="e70b1d656b3fb19aeacc406d49ee5c3dd5f96e0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt; template uses this component as follows:</source>
          <target state="translated">该 &lt;code&gt;AppComponent&lt;/code&gt; 模板使用这个组件，如下所示：</target>
        </trans-unit>
        <trans-unit id="6545b6507f23c86c81f7454e3bc1c87dc46d4fef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt;'s injector is a child of the root injector, one down in the injector hierarchy. For applications that don't use the router, that's almost the entire application. But in routed applications, routing operates at the root level where &lt;code&gt;AppComponent&lt;/code&gt; services don't exist. This means that lazy-loaded modules can't reach them.</source>
          <target state="translated">该 &lt;code&gt;AppComponent&lt;/code&gt; 的喷油器是根喷射器的孩子，在注射层次一跌。对于不使用路由器的应用程序，几乎就是整个应用程序。但是在路由应用程序中，路由操作在不存在 &lt;code&gt;AppComponent&lt;/code&gt; 服务的根级别进行。这意味着延迟加载的模块无法访问它们。</target>
        </trans-unit>
        <trans-unit id="e99418b308f9a848c50d9554d2c8fdb6f5482a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppComponent&lt;/code&gt;, for example, displays a navigation bar with anchors and their &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">的 &lt;code&gt;AppComponent&lt;/code&gt; ，例如，显示与锚和他们的导航条 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 指令。</target>
        </trans-unit>
        <trans-unit id="5280fec7072da76d90f8bcd931c21a6bc6cb2961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppModule&lt;/code&gt; acts as the fallback injector when the injection token can't be found in the &lt;code&gt;ElementInjector&lt;/code&gt;s.</source>
          <target state="translated">所述 &lt;code&gt;AppModule&lt;/code&gt; 充当后备喷射当喷射令牌不能在找到 &lt;code&gt;ElementInjector&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="f95bd053e64f37ddc5bc7a5c80ce68e35d5bdd23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppModule&lt;/code&gt; generated from the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; demonstrates both kinds of modules in action:</source>
          <target state="translated">从&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;生成的 &lt;code&gt;AppModule&lt;/code&gt; 演示了正在使用的两种模块：</target>
        </trans-unit>
        <trans-unit id="4e9140b400c9ed05acfdfd9874a6441c31a99e57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AppModule&lt;/code&gt; is eagerly loaded when the application starts, meaning that it loads right away. Now the &lt;code&gt;AdminModule&lt;/code&gt; loads only when the user clicks on a link, which is called lazy loading.</source>
          <target state="translated">在 &lt;code&gt;AppModule&lt;/code&gt; 应用程序启动时，这意味着它加载马上急切加载。现在，仅当用户单击链接时才加载 &lt;code&gt;AdminModule&lt;/code&gt; ，这称为延迟加载。</target>
        </trans-unit>
        <trans-unit id="5ff85c340c70e9c69d3c5eb66d2650053ea2c555" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AstronautComponent&lt;/code&gt; also injects the service in its constructor. Each &lt;code&gt;AstronautComponent&lt;/code&gt; is a child of the &lt;code&gt;MissionControlComponent&lt;/code&gt; and therefore receives its parent's service instance:</source>
          <target state="translated">该 &lt;code&gt;AstronautComponent&lt;/code&gt; 也注入服务在其构造。每个 &lt;code&gt;AstronautComponent&lt;/code&gt; 都是 &lt;code&gt;MissionControlComponent&lt;/code&gt; 的子代，因此接收其父代的服务实例：</target>
        </trans-unit>
        <trans-unit id="71f7c3b8e88b0515bd6606586234bb66a5f249aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AuthGuard&lt;/code&gt; should call an application service that can login a user and retain information about the current user. Generate a new &lt;code&gt;AuthService&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; folder:</source>
          <target state="translated">该 &lt;code&gt;AuthGuard&lt;/code&gt; 应该调用的应用程序服务，可以登录用户，并保留有关当前用户的信息。在 &lt;code&gt;auth&lt;/code&gt; 文件夹中生成一个新的 &lt;code&gt;AuthService&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c4363e48eff240be87487d285c218f4c54ddee7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BannerComponent&lt;/code&gt; above is defined with an &lt;em&gt;inline template&lt;/em&gt; and &lt;em&gt;inline css&lt;/em&gt;, specified in the &lt;code&gt;@&lt;a href=&quot;../api/core/component#template&quot;&gt;Component.template&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; properties respectively.</source>
          <target state="translated">上面的 &lt;code&gt;BannerComponent&lt;/code&gt; 用一个&lt;em&gt;内联模板&lt;/em&gt;和&lt;em&gt;内联css&lt;/em&gt;定义，分别在 &lt;code&gt;@&lt;a href=&quot;../api/core/component#template&quot;&gt;Component.template&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styles&quot;&gt;Component.styles&lt;/a&gt;&lt;/code&gt; 属性中指定。</target>
        </trans-unit>
        <trans-unit id="c73dbc2cfcc4fbb3fb48c4f580bcd7575d1a1c10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BannerComponent&lt;/code&gt; and &lt;code&gt;WelcomeComponent&lt;/code&gt; (indicated by &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt;) are also irrelevant.</source>
          <target state="translated">的 &lt;code&gt;BannerComponent&lt;/code&gt; 和 &lt;code&gt;WelcomeComponent&lt;/code&gt; （由指示 &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; ）也是不相关的。</target>
        </trans-unit>
        <trans-unit id="ad997328b4137643a7b02c5b33de654998821263" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BannerComponent&lt;/code&gt; tests frequently call &lt;code&gt;detectChanges&lt;/code&gt;. Some testers prefer that the Angular test environment run change detection automatically.</source>
          <target state="translated">该 &lt;code&gt;BannerComponent&lt;/code&gt; 测试经常致电 &lt;code&gt;detectChanges&lt;/code&gt; 。一些测试人员更喜欢Angular测试环境自动运行变更检测。</target>
        </trans-unit>
        <trans-unit id="a1839e661bce6073a1fd31770ec431ef1c3294e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BuilderContext&lt;/code&gt; object provides access to the scheduling method, &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt;. The scheduler executes the builder handler function with a given &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;BuilderContext&lt;/code&gt; 对象提供访问的调度方法， &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; 。调度程序以给定的&lt;a href=&quot;glossary#target&quot;&gt;目标配置&lt;/a&gt;执行构建器处理程序功能。</target>
        </trans-unit>
        <trans-unit id="399419ce93fca39c52e49e37e238fe478bf0dd53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;By.directive&lt;/code&gt; predicate is a great way to get the elements that have this directive &lt;em&gt;when their element types are unknown&lt;/em&gt;.</source>
          <target state="translated">该 &lt;code&gt;By.directive&lt;/code&gt; 谓词是一个伟大的方式来获得有这个指令的要素&lt;em&gt;时，它们的元素类型是未知的&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f0f41662f58d971c86f9ff8f96fad823f6761a8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CachingInterceptor&lt;/code&gt; demonstrates this approach.</source>
          <target state="translated">该 &lt;code&gt;CachingInterceptor&lt;/code&gt; 演示了这个方法。</target>
        </trans-unit>
        <trans-unit id="1dacd5c0128814407c9d2b723a3ffc608cd9b09b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CachingInterceptor&lt;/code&gt; in the following example demonstrates this approach.</source>
          <target state="translated">以下示例中的 &lt;code&gt;CachingInterceptor&lt;/code&gt; 演示了此方法。</target>
        </trans-unit>
        <trans-unit id="48fd1869da27ab31875cd88a86d533e96e0597a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ComponentFixture&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;ComponentFixture&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66442f8a3d2b6633faa8a76d71918c1ffe3323ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ConfigComponent&lt;/code&gt; injects the &lt;code&gt;ConfigService&lt;/code&gt; and calls the &lt;code&gt;getConfig&lt;/code&gt; service method.</source>
          <target state="translated">该 &lt;code&gt;ConfigComponent&lt;/code&gt; 喷射 &lt;code&gt;ConfigService&lt;/code&gt; 并调用 &lt;code&gt;getConfig&lt;/code&gt; 服务方法。</target>
        </trans-unit>
        <trans-unit id="1a1b0669fe951d3d930f8f82a7f22f3a8bb1f746" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ConfigService&lt;/code&gt; fetches this file using the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;ConfigService&lt;/code&gt; 提取使用该文件 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="fc39cbdb3bfe1749802c9be8029691e434a5519d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ConfigService&lt;/code&gt; fetches this file with a &lt;code&gt;get()&lt;/code&gt; method on &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;ConfigService&lt;/code&gt; 的获取与该文件 &lt;code&gt;get()&lt;/code&gt; 的方法 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be14d0f501479857a5aa3fd2572f8221504ed607" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CountdownLocalVarParentComponent&lt;/code&gt; that hosts the timer component is as follows:</source>
          <target state="translated">托管计时器组件的 &lt;code&gt;CountdownLocalVarParentComponent&lt;/code&gt; 如下：</target>
        </trans-unit>
        <trans-unit id="1060fe5ef1a8ac0d02e847e8fc9e72935303ecca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CraigComponent&lt;/code&gt; tries to inject &lt;code&gt;Base&lt;/code&gt; into its &lt;code&gt;alex&lt;/code&gt; constructor parameter and reports if it succeeded.</source>
          <target state="translated">该 &lt;code&gt;CraigComponent&lt;/code&gt; 试图注入 &lt;code&gt;Base&lt;/code&gt; 纳入其 &lt;code&gt;alex&lt;/code&gt; 构造函数的参数和报告，如果它成功了。</target>
        </trans-unit>
        <trans-unit id="898736a2e73cb6c2f197570ec98b62cd84e09e81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Crisis Detail&lt;/code&gt; route is a child of the &lt;code&gt;Crisis &lt;a href=&quot;../api/common/numbersymbol#List&quot;&gt;List&lt;/a&gt;&lt;/code&gt;. The router &lt;a href=&quot;router#reuse&quot;&gt;reuses components&lt;/a&gt; by default, so the &lt;code&gt;Crisis Detail&lt;/code&gt; component will be re-used as you select different crises. In contrast, back in the &lt;code&gt;Hero Detail&lt;/code&gt; route, &lt;a href=&quot;router#snapshot-the-no-observable-alternative&quot;&gt;the component was recreated&lt;/a&gt; each time you selected a different hero from the list of heroes.</source>
          <target state="translated">在 &lt;code&gt;Crisis Detail&lt;/code&gt; 的路线是一个小孩 &lt;code&gt;Crisis &lt;a href=&quot;../api/common/numbersymbol#List&quot;&gt;List&lt;/a&gt;&lt;/code&gt; 。路由器默认情况下会&lt;a href=&quot;router#reuse&quot;&gt;重用组件&lt;/a&gt;，因此当您选择其他危机时，&amp;ldquo; &lt;code&gt;Crisis Detail&lt;/code&gt; 组件将被重用。相反，回到&amp;ldquo; &lt;code&gt;Hero Detail&lt;/code&gt; 路线时，每次您从英雄列表中选择其他英雄时，都会&lt;a href=&quot;router#snapshot-the-no-observable-alternative&quot;&gt;重新创建该组件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ffdc2e7741c480ee9f3485c35dffdad1b50a74b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Crisis Detail&lt;/code&gt; route is a child of the &lt;code&gt;Crisis List&lt;/code&gt;. The router &lt;a href=&quot;router-tutorial-toh#reuse&quot;&gt;reuses components&lt;/a&gt; by default, so the &lt;code&gt;Crisis Detail&lt;/code&gt; component will be re-used as you select different crises. In contrast, back in the &lt;code&gt;Hero Detail&lt;/code&gt; route, &lt;a href=&quot;router-tutorial-toh#snapshot-the-no-observable-alternative&quot;&gt;the component was recreated&lt;/a&gt; each time you selected a different hero from the list of heroes.</source>
          <target state="translated">在 &lt;code&gt;Crisis Detail&lt;/code&gt; 的路线是一个小孩 &lt;code&gt;Crisis List&lt;/code&gt; 。路由器默认情况下会&lt;a href=&quot;router-tutorial-toh#reuse&quot;&gt;重用组件&lt;/a&gt;，因此当您选择其他危机时，&amp;ldquo; &lt;code&gt;Crisis Detail&lt;/code&gt; 组件将被重用。相反，回到&amp;ldquo; &lt;code&gt;Hero Detail&lt;/code&gt; 路线时，每次您从英雄列表中选择其他英雄时，都会&lt;a href=&quot;router-tutorial-toh#snapshot-the-no-observable-alternative&quot;&gt;重新创建该组件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c2f2c31ec4d14ba5cf2a6d91a768454eb7bbdaff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CrisisCenterComponent&lt;/code&gt; has the following in common with the &lt;code&gt;AppComponent&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;CrisisCenterComponent&lt;/code&gt; 具有与以下共同 &lt;code&gt;AppComponent&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1670322d8bc50580dbfbc9e7df89674e1d45373b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CrisisDetailComponent&lt;/code&gt; should no longer fetch the crisis. Update the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to get the crisis from the &lt;code&gt;ActivatedRoute.data.crisis&lt;/code&gt; property instead; that's where you said it should be when you re-configured the route. It will be there when the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; ask for it.</source>
          <target state="translated">该 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 不应再取危机。更新 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; ,以从 &lt;code&gt;ActivatedRoute.data.crisis&lt;/code&gt; 属性获取危机。那就是您说的应该重新配置路由的地方。当 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 要求时，它将在那里。</target>
        </trans-unit>
        <trans-unit id="da94cb4c732fcbbfa467b580178a07093f6910d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CrisisDetailComponent&lt;/code&gt; should no longer fetch the crisis. When you re-configured the route, you changed where the crisis is. Update the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to get the crisis from the &lt;code&gt;ActivatedRoute.data.crisis&lt;/code&gt; property instead;</source>
          <target state="translated">该 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 不应再取危机。重新配置路由时，您更改了危机所在。更新 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; ,以从 &lt;code&gt;ActivatedRoute.data.crisis&lt;/code&gt; 属性获取危机。</target>
        </trans-unit>
        <trans-unit id="49529198362fb43fae9406c68dc8b82a243583d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CrisisDetailComponent&lt;/code&gt; will have this method. But the guard doesn't have to know that. The guard shouldn't know the details of any component's deactivation method. It need only detect that the component has a &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method and call it. This approach makes the guard reusable.</source>
          <target state="translated">该 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 都会有这样的方法。但是警卫不必知道这一点。防护人员不应该知道任何组件的停用方法的详细信息。它只需要检测该组件具有 &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; 方法并对其进行调用即可。这种方法使防护装置可重复使用。</target>
        </trans-unit>
        <trans-unit id="deb58bc40ff86e8a870178bae21534e147ebbdcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CrisisListComponent&lt;/code&gt; contains the crisis list and a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; to display the &lt;code&gt;Crisis Center Home&lt;/code&gt; and &lt;code&gt;Crisis Detail&lt;/code&gt; route components.</source>
          <target state="translated">该 &lt;code&gt;CrisisListComponent&lt;/code&gt; 包含危机列表和 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 显示 &lt;code&gt;Crisis Center Home&lt;/code&gt; 和 &lt;code&gt;Crisis Detail&lt;/code&gt; 路线的组件。</target>
        </trans-unit>
        <trans-unit id="ad8d40211d9211157f529ea3146278488c7e9053" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CrisisService.getCrisis()&lt;/code&gt; method returns an observable in order to prevent the route from loading until the data is fetched. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; guards require an observable to &lt;code&gt;complete&lt;/code&gt;, which means it has emitted all of its values. You use the &lt;code&gt;take&lt;/code&gt; operator with an argument of &lt;code&gt;1&lt;/code&gt; to ensure that the &lt;code&gt;Observable&lt;/code&gt; completes after retrieving the first value from the Observable returned by the &lt;code&gt;getCrisis()&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;CrisisService.getCrisis()&lt;/code&gt; 方法，以便防止所述路线从加载，直到数据被取出返回一个可观察到的。该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 守卫需要可观察到 &lt;code&gt;complete&lt;/code&gt; ，这意味着它发出的所有值。使用参数为 &lt;code&gt;1&lt;/code&gt; 的 &lt;code&gt;take&lt;/code&gt; 运算符可确保从 &lt;code&gt;getCrisis()&lt;/code&gt; 方法返回的Observable中检索第一个值后， &lt;code&gt;Observable&lt;/code&gt; 完整。</target>
        </trans-unit>
        <trans-unit id="77ac706ba21bc081e99e6bbec1203a3eeb56a8ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CrisisService.getCrisis&lt;/code&gt; method returns an observable, in order to prevent the route from loading until the data is fetched. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; guards require an observable to &lt;code&gt;complete&lt;/code&gt;, meaning it has emitted all of its values. You use the &lt;code&gt;take&lt;/code&gt; operator with an argument of &lt;code&gt;1&lt;/code&gt; to ensure that the Observable completes after retrieving the first value from the Observable returned by the &lt;code&gt;getCrisis&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;CrisisService.getCrisis&lt;/code&gt; 方法返回一个可观察到的，为了防止该路线从加载，直到数据被取出。该 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 守卫需要可观察到 &lt;code&gt;complete&lt;/code&gt; ，这意味着它已发出的所有值。您可以使用参数为 &lt;code&gt;1&lt;/code&gt; 的 &lt;code&gt;take&lt;/code&gt; 运算符，以确保从 &lt;code&gt;getCrisis&lt;/code&gt; 方法返回的Observable中检索第一个值后，Observable完成。</target>
        </trans-unit>
        <trans-unit id="2e1bd423a765008f8f2b95a68bd3b724e6d2811d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; is now in the JavaScript import list at the top and added to the &lt;code&gt;declarations&lt;/code&gt; array, which lets Angular know to associate this new component with this feature module.</source>
          <target state="translated">该 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 现在是在顶部的JavaScript导入列表并添加到 &lt;code&gt;declarations&lt;/code&gt; 数组，它可以让角知道这个新组件与该功能模块相关联。</target>
        </trans-unit>
        <trans-unit id="65a80f6ae02d1a838d77c9442c147903d350e5d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DashboardComponent&lt;/code&gt; depends on the Angular router and the &lt;code&gt;HeroService&lt;/code&gt;. You'd probably have to replace them both with test doubles, which is a lot of work. The router seems particularly challenging.</source>
          <target state="translated">该 &lt;code&gt;DashboardComponent&lt;/code&gt; 取决于角路由器和上 &lt;code&gt;HeroService&lt;/code&gt; 。您可能必须将它们都替换为测试倍数，这是很多工作。路由器似乎特别具有挑战性。</target>
        </trans-unit>
        <trans-unit id="c10c820adfee205cd562f34a2e2019fa7534885a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DashboardComponent&lt;/code&gt; hero links do nothing at the moment.</source>
          <target state="translated">该 &lt;code&gt;DashboardComponent&lt;/code&gt; 英雄链接无能为力的时刻。</target>
        </trans-unit>
        <trans-unit id="51ae10d8079bee8bb4706dee821eabcd80f7f44c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DashboardComponent&lt;/code&gt; is simple. It needs no help. But more complex components often depend on other components, directives, pipes, and providers and these must be added to the testing module too.</source>
          <target state="translated">该 &lt;code&gt;DashboardComponent&lt;/code&gt; 很简单。它不需要帮助。但是，更复杂的组件通常取决于其他组件，指令，管道和提供程序，并且这些组件也必须添加到测试模块中。</target>
        </trans-unit>
        <trans-unit id="d5e670476c1ed45c5c77f644aa1197370e8fea20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DashboardHeroComponent&lt;/code&gt; appears in an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater, which sets each component's &lt;code&gt;hero&lt;/code&gt; input property to the looping value and listens for the component's &lt;code&gt;selected&lt;/code&gt; event.</source>
          <target state="translated">所述 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 出现在一个 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 中继器，其设置每个组件的 &lt;code&gt;hero&lt;/code&gt; 输入属性为组件的所述循环值和监听 &lt;code&gt;selected&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="ef0aaae906da9605d0abf5af096fbae1a54666d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DashboardHeroComponent&lt;/code&gt; is a tiny example of a component in this role. It displays an individual hero provided by the &lt;code&gt;DashboardComponent&lt;/code&gt;. Clicking that hero tells the &lt;code&gt;DashboardComponent&lt;/code&gt; that the user has selected the hero.</source>
          <target state="translated">该 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 是这个角色的分量的一个小例子。它显示 &lt;code&gt;DashboardComponent&lt;/code&gt; 提供的单个英雄。单击该英雄将告知 &lt;code&gt;DashboardComponent&lt;/code&gt; 用户已选择英雄。</target>
        </trans-unit>
        <trans-unit id="4aad5dc2c0ccb1e42994b35b8c2d70e708b7f655" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DashboardHeroComponent&lt;/code&gt; is embedded in the &lt;code&gt;DashboardComponent&lt;/code&gt; template like this:</source>
          <target state="translated">该 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 嵌入在 &lt;code&gt;DashboardComponent&lt;/code&gt; 这样的模板：</target>
        </trans-unit>
        <trans-unit id="d24e62276bc4d488841fa3d8a9146b02bfedaf67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DebugElement.query(predicate)&lt;/code&gt; and &lt;code&gt;DebugElement.queryAll(predicate)&lt;/code&gt; methods take a predicate that filters the source element's subtree for matching &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;DebugElement.query(predicate)&lt;/code&gt; 和 &lt;code&gt;DebugElement.queryAll(predicate)&lt;/code&gt; 方法采取过滤源元素的用于匹配的子树的谓词 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b14b2c98f86a56ea403131f284681ac0a463b2e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropdownQuestion&lt;/code&gt; control presents a list of choices in a select box.</source>
          <target state="translated">该 &lt;code&gt;DropdownQuestion&lt;/code&gt; 控制呈现的选择在选择框的列表。</target>
        </trans-unit>
        <trans-unit id="c7c11697a80e65ddbc9fd05bf76cbdfd29704b1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DynamicFormComponent&lt;/code&gt; component is the entry point and the main container for the form, which is represented using the &lt;code&gt;&amp;lt;app-dynamic-form&amp;gt;&lt;/code&gt; in a template.</source>
          <target state="translated">所述 &lt;code&gt;DynamicFormComponent&lt;/code&gt; 组件是入口点和形式，其使用表示所述主容器 &lt;code&gt;&amp;lt;app-dynamic-form&amp;gt;&lt;/code&gt; 在模板。</target>
        </trans-unit>
        <trans-unit id="3c79839525e7a0a41a7d2dbd91e5addd0182cfb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DynamicFormComponent&lt;/code&gt; component presents a list of questions by binding each one to an &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; element that matches the &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;DynamicFormComponent&lt;/code&gt; 部件呈现通过结合每一个以一个问题列表 &lt;code&gt;&amp;lt;app-question&amp;gt;&lt;/code&gt; 该匹配元素 &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="843b0e4ce580e224c4d7d447dacd1063a1800c6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; is responsible for rendering the details of an individual question based on values in the data-bound question object. The form relies on a &lt;a href=&quot;../api/forms/formgroupdirective&quot;&gt;&lt;code&gt;[formGroup]&lt;/code&gt; directive&lt;/a&gt; to connect the template HTML to the underlying control objects. The &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; creates form groups and populates them with controls defined in the question model, specifying display and validation rules.</source>
          <target state="translated">所述 &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; 负责呈现基于所述数据绑定问题对象值的个别问题的细节。该表单依赖&lt;a href=&quot;../api/forms/formgroupdirective&quot;&gt; &lt;code&gt;[formGroup]&lt;/code&gt; 指令&lt;/a&gt;将模板HTML连接到基础控件对象。所述 &lt;code&gt;DynamicFormQuestionComponent&lt;/code&gt; 创建形式基团和与所述问题的模型定义的控制，指定显示和验证规则填充它们。</target>
        </trans-unit>
        <trans-unit id="32e1fffde5f963fcaf1c0a4ce3f85ac7e3cbf365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; custom pipe implementation (&lt;code&gt;flying-heroes.pipe.ts&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; 定制的管道实施方案（ &lt;code&gt;flying-heroes.pipe.ts&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f2d49a3e5ad7043db5d93d2f809157a8a99f288c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HERO_DI_CONFIG&lt;/code&gt; constant conforms to the &lt;code&gt;AppConfig&lt;/code&gt; interface. Unfortunately, you cannot use a TypeScript interface as a token. In TypeScript, an interface is a design-time artifact, and doesn't have a runtime representation (token) that the DI framework can use.</source>
          <target state="translated">该 &lt;code&gt;HERO_DI_CONFIG&lt;/code&gt; 不变符合的 &lt;code&gt;AppConfig&lt;/code&gt; 的接口。不幸的是，您不能将TypeScript接口用作令牌。在TypeScript中，接口是设计时工件，并且没有DI框架可以使用的运行时表示形式（令牌）。</target>
        </trans-unit>
        <trans-unit id="d5aac87ae4f5089620d00faf71b63932aae20d01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetail&lt;/code&gt; component needs the &lt;code&gt;id&lt;/code&gt; parameter so it can fetch the corresponding hero via the &lt;code&gt;HeroDetailService&lt;/code&gt;. The component has to get the &lt;code&gt;id&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; property which is an &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;HeroDetail&lt;/code&gt; 组件需要的 &lt;code&gt;id&lt;/code&gt; 参数，以便它可以读取通过相应的英雄 &lt;code&gt;HeroDetailService&lt;/code&gt; 。该组件必须从 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute#paramMap&quot;&gt;ActivatedRoute.paramMap&lt;/a&gt;&lt;/code&gt; 属性（它是一个 &lt;code&gt;Observable&lt;/code&gt; )中获取 &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4306df157e9a7ad87af3a6bb1a6ee157bd7ac737" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; &quot;Back&quot; button uses the &lt;code&gt;gotoHeroes()&lt;/code&gt; method that navigates imperatively back to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;HeroDetailComponent&lt;/code&gt; &amp;ldquo;返回&amp;rdquo;按钮使用 &lt;code&gt;gotoHeroes()&lt;/code&gt; 方法用于导航命令式回 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce99b8c8e8fcb2277726906943d5f184904bcdeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; has a &quot;Back&quot; button wired to its &lt;code&gt;gotoHeroes&lt;/code&gt; method that navigates imperatively back to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 有一个&amp;ldquo;后退&amp;rdquo;按钮连接到其 &lt;code&gt;gotoHeroes&lt;/code&gt; 方法用于导航势在必行回 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f25db6c8845b5beec1dab02d6ab15a0ded18b369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; is a simple view with a title, two hero fields, and two buttons.</source>
          <target state="translated">所述 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 是带有标题，二英雄字段，和两个按钮的简单视图。</target>
        </trans-unit>
        <trans-unit id="9967bc88952505761d15207ae719dc59a2d45f5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; is part of the &lt;code&gt;HeroModule&lt;/code&gt;&lt;a href=&quot;feature-modules&quot;&gt;Feature Module&lt;/a&gt; that aggregates more of the interdependent pieces including the &lt;code&gt;SharedModule&lt;/code&gt;. Try a test configuration that imports the &lt;code&gt;HeroModule&lt;/code&gt; like this one:</source>
          <target state="translated">该 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 是的一部分 &lt;code&gt;HeroModule&lt;/code&gt; &lt;a href=&quot;feature-modules&quot;&gt;特征模块&lt;/a&gt;，更多的相互依赖件聚集包括 &lt;code&gt;SharedModule&lt;/code&gt; 。尝试这样的测试配置来导入 &lt;code&gt;HeroModule&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="04d66e51f6e74f382d8155e85b170fb46c9a276d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; needs a new way to obtain the hero-to-display. This section explains the following:</source>
          <target state="translated">该 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 需要一种新的方式来获得英雄到显示器。本节说明以下内容：</target>
        </trans-unit>
        <trans-unit id="327ed0be8e7ff0d7cb212ee253e1ea97b28de808" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; provides its own &lt;code&gt;HeroDetailService&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 提供了自己的 &lt;code&gt;HeroDetailService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be0beef9b705b0357bc387aaf27b317208f6da98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; requires a lot of help despite its small size and simple construction. In addition to the support it receives from the default testing module &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;, it needs:</source>
          <target state="translated">尽管 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 体积小且结构简单，但仍需要大量帮助。除了从默认测试模块 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 获得的支持之外，它还需要：</target>
        </trans-unit>
        <trans-unit id="8546baf0d16b0043e517e16066d9f683677b01bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; selector is &lt;code&gt;'app-hero-detail'&lt;/code&gt;. Add an &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; element near the bottom of the &lt;code&gt;HeroesComponent&lt;/code&gt; template, where the hero detail view used to be.</source>
          <target state="translated">该 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 选择是 &lt;code&gt;'app-hero-detail'&lt;/code&gt; 。在 &lt;code&gt;HeroesComponent&lt;/code&gt; 模板的底部（以前是英雄详细信息视图）的附近添加一个 &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="976cd55e91fa87a8fd8d56f48bf7cdba43d70a21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailComponent&lt;/code&gt; template binds to the component's &lt;code&gt;hero&lt;/code&gt; property which is of type &lt;code&gt;Hero&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 模板绑定到组件的 &lt;code&gt;hero&lt;/code&gt; 属性，它是类型的 &lt;code&gt;Hero&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d2c235447dd5f5546842475eb8b4d0cb93bd629" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt; is a stubbed version of the real &lt;code&gt;HeroDetailService&lt;/code&gt; that fakes all necessary features of that service. It neither injects nor delegates to the lower level &lt;code&gt;HeroService&lt;/code&gt; so there's no need to provide a test double for that.</source>
          <target state="translated">该 &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt; 是真正的存根版本 &lt;code&gt;HeroDetailService&lt;/code&gt; 是假货该服务的所有必要的功能。它既不注入也不委托较低级别的 &lt;code&gt;HeroService&lt;/code&gt; ,因此不需要为此提供双重测试。</target>
        </trans-unit>
        <trans-unit id="f250bc439c7afe86478d34af8947a689ca8e42fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroDetailsComponent&lt;/code&gt; displays details of a selected hero. At the moment the &lt;code&gt;HeroDetailsComponent&lt;/code&gt; is only visible at the bottom of the &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;HeroDetailsComponent&lt;/code&gt; 显示详细信息，所选择的英雄。目前， &lt;code&gt;HeroDetailsComponent&lt;/code&gt; 仅在 &lt;code&gt;HeroesComponent&lt;/code&gt; 的底部可见</target>
        </trans-unit>
        <trans-unit id="af395c0b87d20bb9b9e3d97fc51bccc36af15bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroListComponent&lt;/code&gt; isn't expecting any parameters at all and wouldn't know what to do with them. You can change that.</source>
          <target state="translated">该 &lt;code&gt;HeroListComponent&lt;/code&gt; 没有预料到有任何参数，不知道他们做什么。您可以更改它。</target>
        </trans-unit>
        <trans-unit id="f5f50dae376212c9747f608d5b25f04cf2f2778d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroListComponent&lt;/code&gt; needs code that expects parameters.</source>
          <target state="translated">该 &lt;code&gt;HeroListComponent&lt;/code&gt; 需要一个期望参数代码。</target>
        </trans-unit>
        <trans-unit id="84d6edcca4a2ff7675260aaee78cc11f43fbf02e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; constructor's &lt;code&gt;logger&lt;/code&gt; parameter is typed as &lt;code&gt;MinimalLogger&lt;/code&gt;, so only the &lt;code&gt;logs&lt;/code&gt; and &lt;code&gt;logInfo&lt;/code&gt; members are visible in a TypeScript-aware editor.</source>
          <target state="translated">该 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 构造的 &lt;code&gt;logger&lt;/code&gt; 参数的类型为 &lt;code&gt;MinimalLogger&lt;/code&gt; ，所以只有 &lt;code&gt;logs&lt;/code&gt; 和 &lt;code&gt;logInfo&lt;/code&gt; 成员在打字稿感知编辑器中可见。</target>
        </trans-unit>
        <trans-unit id="16216ea634adcf2a08052b47188b3519ee28df59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; example has two value providers.</source>
          <target state="translated">该 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 示例具有两个值提供者。</target>
        </trans-unit>
        <trans-unit id="76803f9c48ffa809d1c10e038cf2c8833ff5d1ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroParentComponent&lt;/code&gt; nests the child &lt;code&gt;HeroChildComponent&lt;/code&gt; inside an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater, binding its &lt;code&gt;master&lt;/code&gt; string property to the child's &lt;code&gt;master&lt;/code&gt; alias, and each iteration's &lt;code&gt;hero&lt;/code&gt; instance to the child's &lt;code&gt;hero&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;HeroParentComponent&lt;/code&gt; 巢孩子 &lt;code&gt;HeroChildComponent&lt;/code&gt; 内 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 中继器，它结合 &lt;code&gt;master&lt;/code&gt; 字符串属性孩子的 &lt;code&gt;master&lt;/code&gt; 别名，每次迭代的 &lt;code&gt;hero&lt;/code&gt; 例如孩子的 &lt;code&gt;hero&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="a41cceba7ffc13c8f55945548e7055c98355aa9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; method has a &lt;em&gt;synchronous signature&lt;/em&gt;, which implies that the &lt;code&gt;HeroService&lt;/code&gt; can fetch heroes synchronously. The &lt;code&gt;HeroesComponent&lt;/code&gt; consumes the &lt;code&gt;getHeroes()&lt;/code&gt; result as if heroes could be fetched synchronously.</source>
          <target state="translated">所述 &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; 方法有一个&lt;em&gt;同步签名&lt;/em&gt;，这意味着该 &lt;code&gt;HeroService&lt;/code&gt; 可以同步读取的英雄。该 &lt;code&gt;HeroesComponent&lt;/code&gt; 消耗 &lt;code&gt;getHeroes()&lt;/code&gt; 的结果，如果英雄可以获取同步。</target>
        </trans-unit>
        <trans-unit id="b19c77e2746383145da1c2de5139a7740d5f1d28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService.getHeroes&lt;/code&gt; method used to return a &lt;code&gt;Hero[]&lt;/code&gt;. Now it returns an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">用于返回 &lt;code&gt;Hero[]&lt;/code&gt; 的 &lt;code&gt;HeroService.getHeroes&lt;/code&gt; 方法。现在，它返回一个 &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3675e99fd07e8ce177a561e62c1f2e3c54d8c59f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService&lt;/code&gt; could get hero data from anywhere&amp;mdash;a web service, local storage, or a mock data source.</source>
          <target state="translated">该 &lt;code&gt;HeroService&lt;/code&gt; 可以从任何地方，web服务，本地存储，或者是模拟数据源获取数据的英雄。</target>
        </trans-unit>
        <trans-unit id="dad29e9d297e900b00b690be032696ce73019fd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService&lt;/code&gt; gets hero data with HTTP requests.</source>
          <target state="translated">该 &lt;code&gt;HeroService&lt;/code&gt; 得到英雄数据和HTTP请求。</target>
        </trans-unit>
        <trans-unit id="8ba54fd37ddcd66db40e7ab92ac3b8462da9300e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService&lt;/code&gt; injected into a component is created with another injected service, &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">注入到组件中的 &lt;code&gt;HeroService&lt;/code&gt; 是使用另一个注入的服务 &lt;code&gt;MessageService&lt;/code&gt; 创建的。</target>
        </trans-unit>
        <trans-unit id="80721705d7dcc0db0fc4871e5a0db4fa86a4b091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService&lt;/code&gt; is now ready to plug into the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;HeroService&lt;/code&gt; 现在准备插入 &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="215c4568ef255e7dac5f273cf6889a4c8a6c93e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService&lt;/code&gt; methods return &lt;code&gt;Observables&lt;/code&gt;. You must &lt;em&gt;subscribe&lt;/em&gt; to an observable to (a) cause it to execute and (b) assert that the method succeeds or fails.</source>
          <target state="translated">该 &lt;code&gt;HeroService&lt;/code&gt; 方法返回 &lt;code&gt;Observables&lt;/code&gt; 。您必须&lt;em&gt;订阅&lt;/em&gt;一个可观察对象，以使其（a）执行并（b）断言该方法成功或失败。</target>
        </trans-unit>
        <trans-unit id="c149031b519380cce6f9243e4ccc25546192c500" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService&lt;/code&gt; methods will &lt;strong&gt;tap&lt;/strong&gt; into the flow of observable values and send a message, via the &lt;code&gt;&lt;a href=&quot;../api/animations/browser/testing/mockanimationdriver#log&quot;&gt;log&lt;/a&gt;()&lt;/code&gt; method, to the message area at the bottom of the page.</source>
          <target state="translated">该 &lt;code&gt;HeroService&lt;/code&gt; 方法将&lt;strong&gt;挖掘&lt;/strong&gt;到可观察到的值的流和发送消息，经由所述 &lt;code&gt;&lt;a href=&quot;../api/animations/browser/testing/mockanimationdriver#log&quot;&gt;log&lt;/a&gt;()&lt;/code&gt; 在页面的底部的方法，该消息区域。</target>
        </trans-unit>
        <trans-unit id="fd6fec24c80c069b7d3470749711a6abf5f4cf79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService&lt;/code&gt; methods will &lt;strong&gt;tap&lt;/strong&gt; into the flow of observable values and send a message, via the &lt;code&gt;log()&lt;/code&gt; method, to the message area at the bottom of the page.</source>
          <target state="translated">该 &lt;code&gt;HeroService&lt;/code&gt; 方法将&lt;strong&gt;挖掘&lt;/strong&gt;到可观察到的值的流和发送消息，经由所述 &lt;code&gt;log()&lt;/code&gt; 在页面的底部的方法，该消息区域。</target>
        </trans-unit>
        <trans-unit id="e9c77cdf778a7ccf064d1241aec37ba483037b91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroService&lt;/code&gt; must wait for the server to respond, &lt;code&gt;getHeroes()&lt;/code&gt; cannot return immediately with hero data, and the browser will not block while the service waits.</source>
          <target state="translated">该 &lt;code&gt;HeroService&lt;/code&gt; 必须等待服务器响应， &lt;code&gt;getHeroes()&lt;/code&gt; 不能与英雄的数据立即返回，浏览器不会在服务等待阻塞。</target>
        </trans-unit>
        <trans-unit id="ae5e8d1d62d659b209af6084f56ea069d715ff84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; has its own provider of the &lt;code&gt;HeroTaxReturnService&lt;/code&gt;. Recall that every component &lt;em&gt;instance&lt;/em&gt; has its own injector. Providing the service at the component level ensures that &lt;em&gt;every&lt;/em&gt; instance of the component gets its own, private instance of the service, and no tax return gets overwritten.</source>
          <target state="translated">该 &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; 有自己的供应商 &lt;code&gt;HeroTaxReturnService&lt;/code&gt; 。回想一下，每个组件&lt;em&gt;实例&lt;/em&gt;都有自己的注入器。在组件级别提供服务可确保组件的&lt;em&gt;每个&lt;/em&gt;实例都获得其自己的私有服务实例，并且不会覆盖任何纳税申报单。</target>
        </trans-unit>
        <trans-unit id="9f02f0410f6927b2f938c331c890859a8ca14faa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroTaxReturnService&lt;/code&gt; caches a single &lt;code&gt;HeroTaxReturn&lt;/code&gt;, tracks changes to that return, and can save or restore it. It also delegates to the application-wide singleton &lt;code&gt;HeroService&lt;/code&gt;, which it gets by injection.</source>
          <target state="translated">该 &lt;code&gt;HeroTaxReturnService&lt;/code&gt; 缓存单 &lt;code&gt;HeroTaxReturn&lt;/code&gt; ，曲目切换到那个回报，并能保存或恢复它。它还委派给应用程序范围内的单例 &lt;code&gt;HeroService&lt;/code&gt; ，它是通过注入获得的。</target>
        </trans-unit>
        <trans-unit id="6716ae6fbb479984ae52b5ab78f9e2d0ef00bbb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesBaseComponent&lt;/code&gt; can stand on its own. It demands its own instance of &lt;code&gt;HeroService&lt;/code&gt; to get heroes and displays them in the order they arrive from the database.</source>
          <target state="translated">该 &lt;code&gt;HeroesBaseComponent&lt;/code&gt; 可以站在自己的。它需要自己的 &lt;code&gt;HeroService&lt;/code&gt; 实例来获取英雄，并按从数据库到达的顺序显示英雄。</target>
        </trans-unit>
        <trans-unit id="a6e42552d50a0d0b2292c68660199985ac50f3b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesComponent&lt;/code&gt; class file is as follows:</source>
          <target state="translated">该 &lt;code&gt;HeroesComponent&lt;/code&gt; 类文件如下：</target>
        </trans-unit>
        <trans-unit id="00a37d4af5daf2421535885af733b7882cff3c8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesComponent&lt;/code&gt; initiates the actual DELETE operation by subscribing to the &lt;code&gt;Observable&lt;/code&gt; returned by this service method.</source>
          <target state="translated">该 &lt;code&gt;HeroesComponent&lt;/code&gt; 通过订阅启动实际的DELETE操作 &lt;code&gt;Observable&lt;/code&gt; 此服务方法返回。</target>
        </trans-unit>
        <trans-unit id="3d2a4e344ff6aac3420dd031b44b1637606b407b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesComponent&lt;/code&gt; initiates the actual POST operation by subscribing to the &lt;code&gt;Observable&lt;/code&gt; returned by this service method.</source>
          <target state="translated">该 &lt;code&gt;HeroesComponent&lt;/code&gt; 通过订阅启动实际的POST操作 &lt;code&gt;Observable&lt;/code&gt; 此服务方法返回。</target>
        </trans-unit>
        <trans-unit id="2f58a91f47da76429c364db755dc692a93a4dd9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesComponent&lt;/code&gt; is declared in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; array.</source>
          <target state="translated">该 &lt;code&gt;HeroesComponent&lt;/code&gt; 是中声明 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; 阵列。</target>
        </trans-unit>
        <trans-unit id="35bf0fad34d2389c5d919d0b9255c19d60d2aa35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesComponent&lt;/code&gt; is still a master/detail view.</source>
          <target state="translated">所述 &lt;code&gt;HeroesComponent&lt;/code&gt; 仍然是一个主/详细视图。</target>
        </trans-unit>
        <trans-unit id="a68cec37df14674cbc2972a17f0769e2db30ba76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesComponent&lt;/code&gt; will only present the list of heroes. The &lt;code&gt;HeroDetailComponent&lt;/code&gt; will present details of a selected hero.</source>
          <target state="translated">该 &lt;code&gt;HeroesComponent&lt;/code&gt; 只会出现英雄的名单。该 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 将呈现一个选择英雄的细节。</target>
        </trans-unit>
        <trans-unit id="1816110c1ef518aea466fc04dd0a3da6295f4a42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesService&lt;/code&gt; defines such headers in an &lt;code&gt;httpOptions&lt;/code&gt; object that are passed to every &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; save method.</source>
          <target state="translated">所述 &lt;code&gt;HeroesService&lt;/code&gt; 在定义了这样的标题 &lt;code&gt;httpOptions&lt;/code&gt; 传递给每一个对象 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 节省方法。</target>
        </trans-unit>
        <trans-unit id="600d31e6ce77c089bb9e738a5be9003834acc7b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HeroesService&lt;/code&gt; defines such headers in an &lt;code&gt;httpOptions&lt;/code&gt; object that will be passed to every &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; save method.</source>
          <target state="translated">所述 &lt;code&gt;HeroesService&lt;/code&gt; 限定在这样的头部 &lt;code&gt;httpOptions&lt;/code&gt; 对象，该对象将被传递到每 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的节省方法。</target>
        </trans-unit>
        <trans-unit id="179a26fc442403bfb719061cf162871825cdfbbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IfLoadedDirective&lt;/code&gt; definition declares the static field &lt;code&gt;ngTemplateGuard_state&lt;/code&gt;, which expresses the narrowing behavior. Within the &lt;code&gt;AppComponent&lt;/code&gt; template, the &lt;code&gt;*ifLoaded&lt;/code&gt; structural directive should render this template only when &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; is actually &lt;code&gt;Loaded&amp;lt;Person&amp;gt;&lt;/code&gt;. The type guard allows the type checker to infer that the acceptable type of &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; within the template is a &lt;code&gt;Loaded&amp;lt;T&amp;gt;&lt;/code&gt;, and further infer that &lt;code&gt;T&lt;/code&gt; must be an instance of &lt;code&gt;Person&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;IfLoadedDirective&lt;/code&gt; 定义声明静态字段 &lt;code&gt;ngTemplateGuard_state&lt;/code&gt; ，它体现了缩小行为。在 &lt;code&gt;AppComponent&lt;/code&gt; 模板中，仅当 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 实际为 &lt;code&gt;Loaded&amp;lt;Person&amp;gt;&lt;/code&gt; 时， &lt;code&gt;*ifLoaded&lt;/code&gt; 结构化指令才应呈现此模板。类型保护器允许类型检查器推断出模板内可接受的 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 类型为 &lt;code&gt;Loaded&amp;lt;T&amp;gt;&lt;/code&gt; ，并进一步推断 &lt;code&gt;T&lt;/code&gt; 必须为 &lt;code&gt;Person&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="231afbe7c24d8a4db665792149042c33d04122f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoggerService.tick_then()&lt;/code&gt; statement postpones the log update for one turn of the browser's JavaScript cycle, which triggers a new change-detection cycle.</source>
          <target state="translated">该 &lt;code&gt;LoggerService.tick_then()&lt;/code&gt; 声明推迟了浏览器的JavaScript循环，从而引发一场新的变革-检测循环一圈的日志更新。</target>
        </trans-unit>
        <trans-unit id="343357c6d57f68303a6458ef697a965250111805" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MasterService&lt;/code&gt; is a simple example:</source>
          <target state="translated">所述 &lt;code&gt;MasterService&lt;/code&gt; 是一个简单的例子：</target>
        </trans-unit>
        <trans-unit id="a23482be799f6a0aa8af44c94a5a0c92fc1f97ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MessagesComponent&lt;/code&gt; should display all messages, including the message sent by the &lt;code&gt;HeroService&lt;/code&gt; when it fetches heroes.</source>
          <target state="translated">所述 &lt;code&gt;MessagesComponent&lt;/code&gt; 应显示的所有消息，包括由所述发送的消息 &lt;code&gt;HeroService&lt;/code&gt; 当它提取英雄。</target>
        </trans-unit>
        <trans-unit id="187a2ae2059055922afeeac7f9f1497a27ac7fa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MissionControlComponent&lt;/code&gt; both provides the instance of the service that it shares with its children (through the &lt;code&gt;providers&lt;/code&gt; metadata array) and injects that instance into itself through its constructor:</source>
          <target state="translated">该 &lt;code&gt;MissionControlComponent&lt;/code&gt; 都提供了它的股票，其子女（通过服务实例 &lt;code&gt;providers&lt;/code&gt; 通过构造函数的元数据阵列）并注入该实例为本身：</target>
        </trans-unit>
        <trans-unit id="443d6ca6a8ecb0df8e18ad018248fc8f7df6f0fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModuleInjector&lt;/code&gt; can be configured in one of two ways:</source>
          <target state="translated">该 &lt;code&gt;ModuleInjector&lt;/code&gt; 可以通过以下两种方式之一进行配置：</target>
        </trans-unit>
        <trans-unit id="995729f3faee914f8f72a483b0c5c3bcd93050ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NgForm&lt;/code&gt; directive</source>
          <target state="translated">该 &lt;code&gt;NgForm&lt;/code&gt; 指令</target>
        </trans-unit>
        <trans-unit id="964abff49ca786d23a03346b62917631a3d6ebc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NoopInterceptor&lt;/code&gt; is a service managed by Angular's &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection (DI)&lt;/a&gt; system. Like other services, you must provide the interceptor class before the app can use it.</source>
          <target state="translated">该 &lt;code&gt;NoopInterceptor&lt;/code&gt; 是角的管理的服务&lt;a href=&quot;dependency-injection&quot;&gt;依赖注入（DI）&lt;/a&gt;系统。像其他服务一样，您必须在应用程序使用它之前提供拦截器类。</target>
        </trans-unit>
        <trans-unit id="aef23056481ed228008bb1745e095b722ea2df23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Parent&lt;/code&gt; class interface defines a &lt;code&gt;name&lt;/code&gt; property with a type declaration but &lt;em&gt;no implementation&lt;/em&gt;. The &lt;code&gt;name&lt;/code&gt; property is the only member of a parent component that a child component can call. Such a narrow interface helps decouple the child component class from its parent components.</source>
          <target state="translated">在 &lt;code&gt;Parent&lt;/code&gt; 类接口定义了一个 &lt;code&gt;name&lt;/code&gt; 属性有一个类型声明，但&lt;em&gt;没有实现&lt;/em&gt;。该 &lt;code&gt;name&lt;/code&gt; 属性是一个父组件，子组件可以调用的唯一成员。这种狭窄的接口有助于将子组件类与其父组件分离。</target>
        </trans-unit>
        <trans-unit id="fe65f80626a58c9c846540a1ee705dcd55e20730" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PeekABooComponent&lt;/code&gt; demonstrates all of the hooks in one component.</source>
          <target state="translated">该 &lt;code&gt;PeekABooComponent&lt;/code&gt; 表明所有的钩子的一个组成部分。</target>
        </trans-unit>
        <trans-unit id="dde0c6bd0330f9b2bcacba8b40a1968bdf8f4397" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PipeTransform&lt;/code&gt; interface</source>
          <target state="translated">该 &lt;code&gt;PipeTransform&lt;/code&gt; 接口</target>
        </trans-unit>
        <trans-unit id="3b34117c2365a77ca9766c6d135cdc97ff50a160" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProfileEditor&lt;/code&gt; component accepts input from the user, but in a real scenario you want to capture the form value and make available for further processing outside the component. The &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; directive listens for the &lt;code&gt;submit&lt;/code&gt; event emitted by the &lt;code&gt;form&lt;/code&gt; element and emits an &lt;code&gt;ngSubmit&lt;/code&gt; event that you can bind to a callback function.</source>
          <target state="translated">该 &lt;code&gt;ProfileEditor&lt;/code&gt; 组件接受来自用户的输入，但在真实的场景中，你想捕捉的形式价值，并可以在组件外进一步处理。该 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 的指令监听 &lt;code&gt;submit&lt;/code&gt; 事件所发射的 &lt;code&gt;form&lt;/code&gt; 元素和发出 &lt;code&gt;ngSubmit&lt;/code&gt; 事件可以绑定到一个回调函数。</target>
        </trans-unit>
        <trans-unit id="56d2b7144d2020750be0ffa2ba8a74e7421d1cd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProfileEditor&lt;/code&gt; form is displayed as one group, but the model is broken down further to represent the logical grouping areas.</source>
          <target state="translated">所述 &lt;code&gt;ProfileEditor&lt;/code&gt; 形式被显示为一组，但该模型被进一步细分以表示逻辑分组区域。</target>
        </trans-unit>
        <trans-unit id="ce1836d6ec5922bed49d518906730f5cef486433" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;QuestionService&lt;/code&gt; supplies a set of questions in the form of an array bound to &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; questions.</source>
          <target state="translated">所述 &lt;code&gt;QuestionService&lt;/code&gt; 在绑定到一个阵列的形式提供一组问题 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 的问题。</target>
        </trans-unit>
        <trans-unit id="b6540520a1fd78e2872491d6880e2502e681435c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; in this sample code replaces the real directive with an alternative version designed to validate the kind of anchor tag wiring seen in the &lt;code&gt;AppComponent&lt;/code&gt; template.</source>
          <target state="translated">此示例代码中的 &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; 用替代版本替换了real指令，该替代版本旨在验证 &lt;code&gt;AppComponent&lt;/code&gt; 模板中看到的锚点标记连线的类型。</target>
        </trans-unit>
        <trans-unit id="ba756c486910ec5d2d7e7261f580251bb94b8e32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt;, &lt;a href=&quot;testing#routerlink&quot;&gt;described later&lt;/a&gt;, is a test version of the real &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; that helps with the link tests.</source>
          <target state="translated">该 &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; ，&lt;a href=&quot;testing#routerlink&quot;&gt;后面描述&lt;/a&gt;，是真正的测试版本 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 与链路测试帮助。</target>
        </trans-unit>
        <trans-unit id="6f06ee5b163c259f89117109a9ed743e3d1ffd45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt;, &lt;a href=&quot;testing-components-scenarios#routerlink&quot;&gt;described later&lt;/a&gt;, is a test version of the real &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; that helps with the link tests.</source>
          <target state="translated">该 &lt;code&gt;RouterLinkDirectiveStub&lt;/code&gt; ，&lt;a href=&quot;testing-components-scenarios#routerlink&quot;&gt;后面描述&lt;/a&gt;，是真正的测试版本 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 与链路测试帮助。</target>
        </trans-unit>
        <trans-unit id="26716cb97684bb141b5619183b6519bb6184e269" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedModule&lt;/code&gt; may re-export other widget modules, such as &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, and NgModules with the UI controls that you use most widely.</source>
          <target state="translated">该 &lt;code&gt;SharedModule&lt;/code&gt; 可以再出口等微件模块，如 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 和NgModules与您使用最广泛的UI控件。</target>
        </trans-unit>
        <trans-unit id="55533efb3a6976f9d9d3cbbd75ced14adcd9d6d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedModule&lt;/code&gt; should not have &lt;code&gt;providers&lt;/code&gt; for reasons &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;explained previously&lt;/a&gt;. Nor should any of its imported or re-exported modules have &lt;code&gt;providers&lt;/code&gt;.</source>
          <target state="translated">由于 &lt;code&gt;SharedModule&lt;/code&gt; &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;说明&lt;/a&gt;的原因，SharedModule不应该具有 &lt;code&gt;providers&lt;/code&gt; 。它的任何导入或再导出模块都不应具有 &lt;code&gt;providers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25994f9fb968fbd439618640587c014c0ec4c6ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spy&lt;/code&gt; example demonstrates how you can use hook method for directives as well as components. The &lt;code&gt;SpyDirective&lt;/code&gt; implements two hooks, &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt;, in order to discover when a watched element is in the current view.</source>
          <target state="translated">该 &lt;code&gt;Spy&lt;/code&gt; 例子演示了如何使用指令以及组件挂钩方法。所述 &lt;code&gt;SpyDirective&lt;/code&gt; 实现两个钩， &lt;code&gt;ngOnInit()&lt;/code&gt; 和 &lt;code&gt;ngOnDestroy()&lt;/code&gt; ，以便发现当观看元件是在当前视图中。</target>
        </trans-unit>
        <trans-unit id="0b86234056b9e48f146fbce2ebe34ac5ce0382c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.compileComponents()&lt;/code&gt; method (see &lt;a href=&quot;testing#compile-components&quot;&gt;below&lt;/a&gt;) calls &lt;code&gt;XHR&lt;/code&gt; to read external template and css files during &quot;just-in-time&quot; compilation. Write tests that call &lt;code&gt;compileComponents()&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; utility.</source>
          <target state="translated">在&amp;ldquo;及时&amp;rdquo;编译期间， &lt;code&gt;TestBed.compileComponents()&lt;/code&gt; 方法（请参阅&lt;a href=&quot;testing#compile-components&quot;&gt;下文&lt;/a&gt;）调用 &lt;code&gt;XHR&lt;/code&gt; 以读取外部模板和CSS文件。编写使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; （）实用程序调用 &lt;code&gt;compileComponents()&lt;/code&gt; 的测试。</target>
        </trans-unit>
        <trans-unit id="c9910ccd683edbd9f115a360ad82e87ec6d2468f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.compileComponents()&lt;/code&gt; method (see &lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;below&lt;/a&gt;) calls &lt;code&gt;XHR&lt;/code&gt; to read external template and css files during &quot;just-in-time&quot; compilation. Write tests that call &lt;code&gt;compileComponents()&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; utility.</source>
          <target state="translated">在&amp;ldquo;及时&amp;rdquo;编译期间， &lt;code&gt;TestBed.compileComponents()&lt;/code&gt; 方法（请参阅&lt;a href=&quot;testing-components-scenarios#compile-components&quot;&gt;下文&lt;/a&gt;）调用 &lt;code&gt;XHR&lt;/code&gt; 以读取外部模板和css文件。编写使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/waitforasync&quot;&gt;waitForAsync&lt;/a&gt;()&lt;/code&gt; （）实用程序调用 &lt;code&gt;compileComponents()&lt;/code&gt; 的测试。</target>
        </trans-unit>
        <trans-unit id="33323f7f2025b1e15245658463ddcefc0878b34b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.compileComponents&lt;/code&gt; method asynchronously compiles all components configured in the testing module.</source>
          <target state="translated">该 &lt;code&gt;TestBed.compileComponents&lt;/code&gt; 方法异步编译测试模块中配置的所有组件。</target>
        </trans-unit>
        <trans-unit id="dc382eb6fdb0a7a5f439e9ebf5d691c12993bb69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; method returns the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; class so you can chain calls to other &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; static methods such as &lt;code&gt;compileComponents()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; 方法返回的 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 类，所以您可以链接调用其他 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 的静态方法，如 &lt;code&gt;compileComponents()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba53a6120fc4098df89122ed6ff40200aa9c5c6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; method takes a metadata object that can have most of the properties of an &lt;a href=&quot;ngmodules&quot;&gt;@NgModule&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;TestBed.configureTestingModule()&lt;/code&gt; 方法以一个元数据对象可具有一个大部分的属性的&lt;a href=&quot;ngmodules&quot;&gt;@NgModule&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="016bcc76476eece7235a3f36df1257e16e5e635d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.createComponent&amp;lt;T&amp;gt;&lt;/code&gt; creates an instance of the component &lt;code&gt;T&lt;/code&gt; and returns a strongly typed &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; for that component.</source>
          <target state="translated">所述 &lt;code&gt;TestBed.createComponent&amp;lt;T&amp;gt;&lt;/code&gt; 创建组件的一个实例 &lt;code&gt;T&lt;/code&gt; 并返回强类型 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture&quot;&gt;ComponentFixture&lt;/a&gt;&lt;/code&gt; 该组件。</target>
        </trans-unit>
        <trans-unit id="39697ed57f6a6795137f32bcbb84fa33f263ac6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.createComponent&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; trigger change detection. a fact confirmed in the revised test:</source>
          <target state="translated">该 &lt;code&gt;TestBed.createComponent&lt;/code&gt; 并&lt;em&gt;不会&lt;/em&gt;触发变化检测。修订测试中确认的事实：</target>
        </trans-unit>
        <trans-unit id="19daae3ee6e90a66335d9a5a4c19a7080dd7e091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.createComponent&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; trigger change detection; a fact confirmed in the revised test:</source>
          <target state="translated">该 &lt;code&gt;TestBed.createComponent&lt;/code&gt; 并&lt;em&gt;不会&lt;/em&gt;触发变化检测; 修订测试中确认的事实：</target>
        </trans-unit>
        <trans-unit id="747bc50d9017c77e8ccf238eb14cc20db22a14c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.get()&lt;/code&gt; method takes an optional second parameter, the object to return if Angular can't find the provider (&lt;code&gt;null&lt;/code&gt; in this example):</source>
          <target state="translated">所述 &lt;code&gt;TestBed.get()&lt;/code&gt; 方法有一个可选的第二参数，该对象返回如果角找不到（提供 &lt;code&gt;null&lt;/code&gt; 在此实例中）：</target>
        </trans-unit>
        <trans-unit id="0e3341b8b5908a01875d74562b48cb3a5bda651e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.inject()&lt;/code&gt; method takes an optional second parameter, the object to return if Angular can't find the provider (&lt;code&gt;null&lt;/code&gt; in this example):</source>
          <target state="translated">所述 &lt;code&gt;TestBed.inject()&lt;/code&gt; 方法有一个可选的第二参数，该对象返回如果角找不到（提供 &lt;code&gt;null&lt;/code&gt; 在此实例中）：</target>
        </trans-unit>
        <trans-unit id="faed205a7a9fb8e6c0df635c83fe3ff08df829ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.overrideComponent&lt;/code&gt; method can be called multiple times for the same or different components. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; offers similar &lt;code&gt;overrideDirective&lt;/code&gt;, &lt;code&gt;overrideModule&lt;/code&gt;, and &lt;code&gt;overridePipe&lt;/code&gt; methods for digging into and replacing parts of these other classes.</source>
          <target state="translated">该 &lt;code&gt;TestBed.overrideComponent&lt;/code&gt; 方法可以被调用用于相同或不同的组件多次。该 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 提供类似 &lt;code&gt;overrideDirective&lt;/code&gt; ， &lt;code&gt;overrideModule&lt;/code&gt; 和 &lt;code&gt;overridePipe&lt;/code&gt; 方法深入挖掘和更换这些其他类的组成部分。</target>
        </trans-unit>
        <trans-unit id="7463496f97fa152d094722c35a830eebca91517a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestBed.overrideComponent&lt;/code&gt; method can replace the component's &lt;code&gt;providers&lt;/code&gt; with easy-to-manage &lt;em&gt;test doubles&lt;/em&gt; as seen in the following setup variation:</source>
          <target state="translated">该 &lt;code&gt;TestBed.overrideComponent&lt;/code&gt; 方法可以替代组件的 &lt;code&gt;providers&lt;/code&gt; 提供易于管理的&lt;em&gt;测试双打&lt;/em&gt;作为见于以下设置变化：</target>
        </trans-unit>
        <trans-unit id="e1a8e4bd9b894d5166dfe72509e7421ddbddc823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TestHostComponent&lt;/code&gt; sets the &lt;code&gt;DashboardHeroComponent.hero&lt;/code&gt; with a binding.</source>
          <target state="translated">该 &lt;code&gt;TestHostComponent&lt;/code&gt; 设置 &lt;code&gt;DashboardHeroComponent.hero&lt;/code&gt; 具有约束力。</target>
        </trans-unit>
        <trans-unit id="f40e512ef842477fe7eaaeb1efa374f520e66b76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextboxQuestion&lt;/code&gt; control type presents a question and allows users to enter input.</source>
          <target state="translated">该 &lt;code&gt;TextboxQuestion&lt;/code&gt; 控制类型提出一个问题，允许用户输入的输入。</target>
        </trans-unit>
        <trans-unit id="c0d0030229ddea99fe6351ea7b40ab013e1ad969" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextboxQuestion&lt;/code&gt; control type will be represented in a form template using an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. The &lt;code&gt;type&lt;/code&gt; attribute of the element will be defined based on the &lt;code&gt;type&lt;/code&gt; field specified in the &lt;code&gt;options&lt;/code&gt; argument (for example &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;TextboxQuestion&lt;/code&gt; 控制类型将在表单模板使用来表示 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素。元素的 &lt;code&gt;type&lt;/code&gt; 属性将根据 &lt;code&gt;options&lt;/code&gt; 参数中指定的 &lt;code&gt;type&lt;/code&gt; 字段（例如 &lt;code&gt;text&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;url&lt;/code&gt; ）进行定义。</target>
        </trans-unit>
        <trans-unit id="b83cfbebbe6b24bf42931e645bfc64c8eed2532b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TwainComponent&lt;/code&gt; gets quotes from an injected &lt;code&gt;TwainService&lt;/code&gt;. The component starts the returned &lt;code&gt;Observable&lt;/code&gt; with a placeholder value (&lt;code&gt;'...'&lt;/code&gt;), before the service can return its first quote.</source>
          <target state="translated">该 &lt;code&gt;TwainComponent&lt;/code&gt; 获得由注塑报价 &lt;code&gt;TwainService&lt;/code&gt; 。在服务可以返回其第一引号之前，该组件以占位符值（ &lt;code&gt;'...'&lt;/code&gt; ）开始返回的 &lt;code&gt;Observable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef542876d29e71de2c86774edf71e50874e185fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VersionParentComponent&lt;/code&gt; supplies the &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; values and binds buttons to methods that change them.</source>
          <target state="translated">该 &lt;code&gt;VersionParentComponent&lt;/code&gt; 提供的 &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; 值并结合按钮，以便改变它们的方法。</target>
        </trans-unit>
        <trans-unit id="28f65948c3d9669e6c59075a0f72a022e2729c17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VersionParentComponent&lt;/code&gt; supplies the &lt;code&gt;minor&lt;/code&gt; and &lt;code&gt;major&lt;/code&gt; values and binds buttons to methods that change them.</source>
          <target state="translated">该 &lt;code&gt;VersionParentComponent&lt;/code&gt; 提供的 &lt;code&gt;minor&lt;/code&gt; 和 &lt;code&gt;major&lt;/code&gt; 值并结合按钮，以便改变它们的方法。</target>
        </trans-unit>
        <trans-unit id="84f9fc5b821c647ba140efb0b8202fe7c572e256" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WelcomeComponent&lt;/code&gt; displays a welcome message to the logged in user. It knows who the user is based on a property of the injected &lt;code&gt;UserService&lt;/code&gt;:</source>
          <target state="translated">所述 &lt;code&gt;WelcomeComponent&lt;/code&gt; 显示欢迎消息向已登录的用户。它根据注入的 &lt;code&gt;UserService&lt;/code&gt; 的属性知道用户是谁：</target>
        </trans-unit>
        <trans-unit id="26b0cc11145bd2699a1a4df30ac1d79582b55235" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WelcomeComponent&lt;/code&gt; has decision logic that interacts with the service, logic that makes this component worth testing. Here's the testing module configuration for the spec file, &lt;code&gt;app/welcome/welcome.component.spec.ts&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;WelcomeComponent&lt;/code&gt; 具有决策逻辑与，使该组件值得测试服务，逻辑交互。这是规格文件 &lt;code&gt;app/welcome/welcome.component.spec.ts&lt;/code&gt; 的测试模块配置：</target>
        </trans-unit>
        <trans-unit id="18601d150c90f6f2cecee4815c9d4c8e2bd94bb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WelcomeComponent&lt;/code&gt; has decision logic that interacts with the service, logic that makes this component worth testing. Here's the testing module configuration for the spec file:</source>
          <target state="translated">该 &lt;code&gt;WelcomeComponent&lt;/code&gt; 具有决策逻辑与，使该组件值得测试服务，逻辑交互。这是spec文件的测试模块配置：</target>
        </trans-unit>
        <trans-unit id="73082262f53d6cf72b310b41eb13db9584d32cbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; type in the constructor is no longer a problem for the compiler because it uses the &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;(WINDOW)&lt;/code&gt; to generate the injection code.</source>
          <target state="translated">构造函数中的 &lt;code&gt;Window&lt;/code&gt; 类型对于编译器而言不再是问题，因为它使用 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;(WINDOW)&lt;/code&gt; 生成注入代码。</target>
        </trans-unit>
        <trans-unit id="870c23b3763b42b506c664c4507ca8235191c54c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WorkspaceSchema&lt;/code&gt; contains all the properties of the workspace configuration, including a &lt;code&gt;defaultProject&lt;/code&gt; value for determining which project to use if not provided. We will use that value as a fallback, if no project is explicitly specified in the &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="translated">所述 &lt;code&gt;WorkspaceSchema&lt;/code&gt; 包含工作区配置，包括的所有属性 &lt;code&gt;defaultProject&lt;/code&gt; 值如果没有提供确定哪些项目使用。如果 &lt;code&gt;ng generate&lt;/code&gt; 命令中未明确指定任何项目，则将使用该值作为备用。</target>
        </trans-unit>
        <trans-unit id="2c6443345432b5ece951d71a755a1b8ad77b8ca8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[()]&lt;/code&gt; syntax is easy to demonstrate when the element has a settable property called &lt;code&gt;x&lt;/code&gt; and a corresponding event named &lt;code&gt;xChange&lt;/code&gt;. Here's a &lt;code&gt;SizerComponent&lt;/code&gt; that fits this pattern. It has a &lt;code&gt;size&lt;/code&gt; value property and a companion &lt;code&gt;sizeChange&lt;/code&gt; event:</source>
          <target state="translated">的 &lt;code&gt;[()]&lt;/code&gt; 的语法是容易证明，当元件具有称为可设置属性 &lt;code&gt;x&lt;/code&gt; 和命名为对应事件 &lt;code&gt;xChange&lt;/code&gt; 。这是适合此模式的 &lt;code&gt;SizerComponent&lt;/code&gt; 。它具有一个 &lt;code&gt;size&lt;/code&gt; 值属性和一个伴随的 &lt;code&gt;sizeChange&lt;/code&gt; 事件：</target>
        </trans-unit>
        <trans-unit id="b8736c02efb6ba5a8ec75a4c108f9fd9c7c0f759" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;]&lt;/code&gt; binding, on the other hand, remains a live binding to the component's &lt;code&gt;currentItem&lt;/code&gt; property.</source>
          <target state="translated">在 &lt;code&gt;[&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;]&lt;/code&gt; 结合，而另一方面，仍然是一个活的结合组分的 &lt;code&gt;currentItem&lt;/code&gt; 财产。</target>
        </trans-unit>
        <trans-unit id="8b9f270653cfadb8d1a228d14d38db979b5247f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[&lt;a href=&quot;common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;]&lt;/code&gt; directive on a container specifies an expression to match against. The expressions to match are provided by &lt;code&gt;&lt;a href=&quot;common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; directives on views within the container.</source>
          <target state="translated">容器上的 &lt;code&gt;[&lt;a href=&quot;common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;]&lt;/code&gt; 指令指定要匹配的表达式。匹配的表达式由容器内视图上的 &lt;code&gt;&lt;a href=&quot;common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 指令提供。</target>
        </trans-unit>
        <trans-unit id="cd45ebca5ced56ceb4c4439db03ef7ceb8af9786" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[&lt;a href=&quot;ngswitch&quot;&gt;ngSwitch&lt;/a&gt;]&lt;/code&gt; directive on a container specifies an expression to match against. The expressions to match are provided by &lt;code&gt;&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; directives on views within the container.</source>
          <target state="translated">容器上的 &lt;code&gt;[&lt;a href=&quot;ngswitch&quot;&gt;ngSwitch&lt;/a&gt;]&lt;/code&gt; 指令指定要匹配的表达式。匹配的表达式由容器内视图上的 &lt;code&gt;&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; 指令提供。</target>
        </trans-unit>
        <trans-unit id="36ceaf19970bb19c49c83bfbd2a87d52a2959a37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[appHighlight]&lt;/code&gt; attribute binding both applies the highlighting directive to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element and sets the directive's highlight color with a property binding. You're re-using the directive's attribute selector (&lt;code&gt;[appHighlight]&lt;/code&gt;) to do both jobs. That's a crisp, compact syntax.</source>
          <target state="translated">的 &lt;code&gt;[appHighlight]&lt;/code&gt; 属性绑定两者施加突出指令到 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元件，并设置指令的突出显示颜色与属性结合。您将重新使用指令的属性选择器（ &lt;code&gt;[appHighlight]&lt;/code&gt; ）来完成这两项工作。那是一种简洁明了的语法。</target>
        </trans-unit>
        <trans-unit id="7f1b605476e77a7d2ccd2803d39ed5e6241f3e16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[hero]&lt;/code&gt;&lt;a href=&quot;property-binding&quot;&gt;&lt;em&gt;property binding&lt;/em&gt;&lt;/a&gt; passes the value of &lt;code&gt;selectedHero&lt;/code&gt; from the parent &lt;code&gt;HeroListComponent&lt;/code&gt; to the &lt;code&gt;hero&lt;/code&gt; property of the child &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;[hero]&lt;/code&gt; &lt;a href=&quot;property-binding&quot;&gt;&lt;em&gt;属性绑定&lt;/em&gt;&lt;/a&gt;传递的值 &lt;code&gt;selectedHero&lt;/code&gt; 从父 &lt;code&gt;HeroListComponent&lt;/code&gt; 到 &lt;code&gt;hero&lt;/code&gt; 儿童的属性 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="30bd2ff25d1fd8b1f0557d18717e6ad1918454c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[hero]&lt;/code&gt;&lt;a href=&quot;template-syntax#property-binding&quot;&gt;&lt;em&gt;property binding&lt;/em&gt;&lt;/a&gt; passes the value of &lt;code&gt;selectedHero&lt;/code&gt; from the parent &lt;code&gt;HeroListComponent&lt;/code&gt; to the &lt;code&gt;hero&lt;/code&gt; property of the child &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;[hero]&lt;/code&gt; &lt;a href=&quot;template-syntax#property-binding&quot;&gt;&lt;em&gt;属性绑定&lt;/em&gt;&lt;/a&gt;传递的值 &lt;code&gt;selectedHero&lt;/code&gt; 从父 &lt;code&gt;HeroListComponent&lt;/code&gt; 到 &lt;code&gt;hero&lt;/code&gt; 儿童的属性 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9cb10f26693dde1c278ddfda0bfd2cc8820290a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addItem()&lt;/code&gt; method takes an argument in the form of a string and then adds that string to the &lt;code&gt;items&lt;/code&gt; array.</source>
          <target state="translated">所述 &lt;code&gt;addItem()&lt;/code&gt; 方法需要在一个字符串的形式参数，然后添加字符串到 &lt;code&gt;items&lt;/code&gt; 阵列。</target>
        </trans-unit>
        <trans-unit id="856ed6d1ce37be4c197dced40c87596609a6cec8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addItem()&lt;/code&gt; method takes an argument in the form of a string and then pushes, or adds, that string to the &lt;code&gt;items&lt;/code&gt; array.</source>
          <target state="translated">所述 &lt;code&gt;addItem()&lt;/code&gt; 方法需要在一个字符串的形式参数，并然后推动，或添加，该字符串的 &lt;code&gt;items&lt;/code&gt; 阵列。</target>
        </trans-unit>
        <trans-unit id="6ca497ad92082c6d7c8b17c8f25e1442e24acf60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addNewItem()&lt;/code&gt; function uses the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;newItemEvent&lt;/code&gt;, to raise an event in which it emits the value the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In other words, when the user clicks the add button in the UI, the child lets the parent know about the event and gives that data to the parent.</source>
          <target state="translated">所述 &lt;code&gt;addNewItem()&lt;/code&gt; 函数使用 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ， &lt;code&gt;newItemEvent&lt;/code&gt; ，以提高在其发射值的用户类型到一个事件 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 。换句话说，当用户单击UI中的添加按钮时，子级会让父级知道该事件，并将该数据提供给父级。</target>
        </trans-unit>
        <trans-unit id="e87a57d434a21574c4d93084ce14a346db7dba09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addNewItem()&lt;/code&gt; function uses the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;newItemEvent&lt;/code&gt;, to raise an event with the value the user types into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;addNewItem()&lt;/code&gt; 函数使用 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; ， &lt;code&gt;newItemEvent&lt;/code&gt; ，其值为用户键入引发一个事件到 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bad5dfeb063fa603e31abaf09875d9eb0700c8d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addToCart()&lt;/code&gt; method appends a product to an array of &lt;code&gt;items&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;addToCart()&lt;/code&gt; 方法附加到阵列的产品 &lt;code&gt;items&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a493d960a2175f2a37db6c4da43ea748ceff14a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addToCart()&lt;/code&gt; method does the following three things:</source>
          <target state="translated">该 &lt;code&gt;addToCart()&lt;/code&gt; 方法执行以下三两件事：</target>
        </trans-unit>
        <trans-unit id="8c54850634bbde4cc7b568e8036ad928a2270771" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addToCart()&lt;/code&gt; method:</source>
          <target state="translated">的 &lt;code&gt;addToCart()&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="a5722203907629d1d56d27383962d6e5ef087e7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alterEgo&lt;/code&gt; is optional, so the constructor lets you omit it; note the question mark (?) in &lt;code&gt;alterEgo?&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;alterEgo&lt;/code&gt; 是可选的，因此构造函数可以让你忽略它; 注意 &lt;code&gt;alterEgo?&lt;/code&gt; 问号（？）？。</target>
        </trans-unit>
        <trans-unit id="f30124ac6fc884af1ef5d112a1d4e21bf844c8a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;angular.json&lt;/code&gt; file has a section for each project, and the &quot;architect&quot; section of each project configures targets for builders used by CLI commands such as 'build', 'test', and 'lint'. By default, for example, the &lt;code&gt;build&lt;/code&gt; command runs the builder &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt; to perform the build task, and passes in default option values as specified for the &lt;code&gt;build&lt;/code&gt; target in &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;angular.json&lt;/code&gt; 文件对每个项目的一部分，并且每个项目提供配置指标通过CLI使用建设者&amp;ldquo;建筑师&amp;rdquo;部分命令，比如&amp;ldquo;构建&amp;rdquo;，&amp;ldquo;测试&amp;rdquo;和&amp;ldquo;绒&amp;rdquo;。例如，默认情况下， &lt;code&gt;build&lt;/code&gt; 命令运行builder &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt; 以执行构建任务，并传入为 &lt;code&gt;angular.json&lt;/code&gt; 中的 &lt;code&gt;build&lt;/code&gt; 目标指定的默认选项值。</target>
        </trans-unit>
        <trans-unit id="f07f7aa9c500e883ba9d5379a2ebebdfb2d38f38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app-routing.module.ts&lt;/code&gt; file retains the top-level application routes such as the default and wildcard routes.</source>
          <target state="translated">该 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 文件保留的顶级应用途径，如默认和通配符路线。</target>
        </trans-unit>
        <trans-unit id="c324253579d11610a53c523554714bdd73f83908" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app-routing.module.ts&lt;/code&gt; then imports the feature module, &lt;code&gt;customers.module.ts&lt;/code&gt; using JavaScript's dynamic import.</source>
          <target state="translated">然后， &lt;code&gt;app-routing.module.ts&lt;/code&gt; 使用JavaScript的动态导入功能来导入功能模块 &lt;code&gt;customers.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4f289690c281152fb32585adec1b7e7302be2fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.component.html&lt;/code&gt; template uses a format parameter for the &lt;a href=&quot;../api/common/datepipe&quot;&gt;&lt;code&gt;DatePipe&lt;/code&gt;&lt;/a&gt; (named &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt;) to show the date as &lt;strong&gt;04/15/88&lt;/strong&gt;.</source>
          <target state="translated">该 &lt;code&gt;app.component.html&lt;/code&gt; 模板使用的格式参数&lt;a href=&quot;../api/common/datepipe&quot;&gt; &lt;code&gt;DatePipe&lt;/code&gt; &lt;/a&gt;（名为 &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt;&lt;/code&gt; ）显示日期为&lt;strong&gt;88年4月15日&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1ee75878ead085bde2df26d170fe8825ce8044ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app.component.ts&lt;/code&gt; and &lt;code&gt;app.component.spec.ts&lt;/code&gt; files are siblings in the same folder. The root file names (&lt;code&gt;app.component&lt;/code&gt;) are the same for both files.</source>
          <target state="translated">该 &lt;code&gt;app.component.ts&lt;/code&gt; 和 &lt;code&gt;app.component.spec.ts&lt;/code&gt; 文件在同一文件夹中的兄弟姐妹。两个文件的根文件名（ &lt;code&gt;app.component&lt;/code&gt; ）相同。</target>
        </trans-unit>
        <trans-unit id="40a9f746b2624d49708038138878c9e54596820c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;appHighlight&lt;/code&gt; property on the left refers to an &lt;em&gt;aliased&lt;/em&gt; property of the &lt;code&gt;HighlightDirective&lt;/code&gt;, not a property of the template's component. There are trust issues. Therefore, the directive property must carry the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">左侧的 &lt;code&gt;appHighlight&lt;/code&gt; 属性引用 &lt;code&gt;HighlightDirective&lt;/code&gt; 的&lt;em&gt;别名&lt;/em&gt;属性，而不是模板组件的属性。存在信任问题。因此，指令属性必须带有 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;装饰器。</target>
        </trans-unit>
        <trans-unit id="290ffc2086bb38d75b6288278b7f208305ff1a09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;appRoutes&lt;/code&gt; array of &lt;em&gt;routes&lt;/em&gt; describes how to navigate. Pass it to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method in the module &lt;code&gt;imports&lt;/code&gt; to configure the router.</source>
          <target state="translated">&lt;em&gt;路线&lt;/em&gt;的 &lt;code&gt;appRoutes&lt;/code&gt; 数组描述了如何导航。将其传递到模块 &lt;code&gt;imports&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 方法以配置路由器。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dda4c3d5923e028505e8cfe658d157468c7fa7c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;appRoutes&lt;/code&gt; array of routes describes how to navigate. Pass it to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method in the module &lt;code&gt;imports&lt;/code&gt; to configure the router.</source>
          <target state="translated">路线的 &lt;code&gt;appRoutes&lt;/code&gt; 数组描述了如何导航。将其传递到模块 &lt;code&gt;imports&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 方法以配置路由器。</target>
        </trans-unit>
        <trans-unit id="5bcaa9ed5f73425ed9d275f4d1da0e3c5ab59c20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;appUnless&lt;/code&gt; property</source>
          <target state="translated">该 &lt;code&gt;appUnless&lt;/code&gt; 财产</target>
        </trans-unit>
        <trans-unit id="ccd175402127146536f0a6057571135e51400a85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apply()&lt;/code&gt; method applies multiple rules to a source and returns the transformed source. It takes 2 arguments, a source and an array of rules.</source>
          <target state="translated">的 &lt;code&gt;apply()&lt;/code&gt; 方法应用于多个规则到源极和返回转换源。它需要2个参数，一个源和一组规则。</target>
        </trans-unit>
        <trans-unit id="fce7410dda2af4b9b8c3501f512a37d7f4aaff30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;applyTemplates()&lt;/code&gt; method receives an argument of methods and properties you want make available to the schematic template and the schematic filenames. It returns a &lt;code&gt;Rule&lt;/code&gt;. This is where you define the &lt;code&gt;classify()&lt;/code&gt; and &lt;code&gt;dasherize()&lt;/code&gt; methods, and the &lt;code&gt;name&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;applyTemplates()&lt;/code&gt; 方法接收你想要提供给示意图模板和原理图文件名的方法和属性的参数。它返回一个 &lt;code&gt;Rule&lt;/code&gt; 。在这里定义 &lt;code&gt;classify()&lt;/code&gt; 和 &lt;code&gt;dasherize()&lt;/code&gt; 方法以及 &lt;code&gt;name&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="d3359e4c0eaf8ffb1467df0e8ae599f521f5db8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/app-shell&lt;/code&gt; section configures defaults for creating an app shell for a progressive web app (PWA), using the &lt;code&gt;ng run &amp;lt;project&amp;gt;:app-shell&lt;/code&gt; command.</source>
          <target state="translated">的 &lt;code&gt;architect/app-shell&lt;/code&gt; 部分配置默认值创建一个渐进的网络应用程序（PWA）一个应用程序的外壳，使用 &lt;code&gt;ng run &amp;lt;project&amp;gt;:app-shell&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="9a52f458cd31bb8d388aacce0223f2376613e4fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/build&lt;/code&gt; section configures defaults for options of the &lt;code&gt;ng build&lt;/code&gt; command. It has the following top-level properties.</source>
          <target state="translated">的 &lt;code&gt;architect/build&lt;/code&gt; 部分配置默认值的选项 &lt;code&gt;ng build&lt;/code&gt; 命令。它具有以下顶级属性。</target>
        </trans-unit>
        <trans-unit id="6369019d693afe055f767ec303f5491051532798" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/build&lt;/code&gt; section configures defaults for options of the &lt;code&gt;ng build&lt;/code&gt; command. See &lt;a href=&quot;workspace-config#build-target&quot;&gt;Build target&lt;/a&gt; below for more information.</source>
          <target state="translated">的 &lt;code&gt;architect/build&lt;/code&gt; 部分配置默认值的选项 &lt;code&gt;ng build&lt;/code&gt; 命令。有关更多信息，请参见下面的&lt;a href=&quot;workspace-config#build-target&quot;&gt;构建目标&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f1ca81d47172c4dec0a072d2b655a66cc4ac8fc5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/e2e&lt;/code&gt; section overrides build-option defaults for building end-to-end testing apps using the &lt;code&gt;ng e2e&lt;/code&gt; command.</source>
          <target state="translated">的 &lt;code&gt;architect/e2e&lt;/code&gt; 部覆盖叠合选项默认为构建使用端至端测试应用程式 &lt;code&gt;ng e2e&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="da431250223e934254e2e94578e1d901c88945ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/extract-i18n&lt;/code&gt; section configures defaults for options of the &lt;code&gt;ng extract-i18n&lt;/code&gt; command, which extracts marked message strings from source code and outputs translation files.</source>
          <target state="translated">的 &lt;code&gt;architect/extract-i18n&lt;/code&gt; 部分配置默认值的选项 &lt;code&gt;ng extract-i18n&lt;/code&gt; 命令，该命令提取物标记从源代码，并输出转换文件消息字符串。</target>
        </trans-unit>
        <trans-unit id="e734451b171ce840aa23f1a5ea6f29d8e7e416c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/extract-i18n&lt;/code&gt; section configures defaults for options of the &lt;code&gt;ng-xi18n&lt;/code&gt; tool used by the &lt;code&gt;ng xi18n&lt;/code&gt; command, which extracts marked message strings from source code and outputs translation files.</source>
          <target state="translated">的 &lt;code&gt;architect/extract-i18n&lt;/code&gt; 部分配置默认值的选项 &lt;code&gt;ng-xi18n&lt;/code&gt; 由所使用的工具 &lt;code&gt;ng xi18n&lt;/code&gt; 命令，该命令提取物标记从源代码，并输出转换文件消息字符串。</target>
        </trans-unit>
        <trans-unit id="767fc9d81a793124c7e6cffbbb813f17df2c7fbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/lint&lt;/code&gt; section configures defaults for options of the &lt;code&gt;ng lint&lt;/code&gt; command, which performs code analysis on project source files. The default linting tool for Angular is &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;.</source>
          <target state="translated">的 &lt;code&gt;architect/lint&lt;/code&gt; 部分配置默认值的选项 &lt;code&gt;ng lint&lt;/code&gt; 上项目源文件命令，该命令进行代码分析。Angular的默认整理工具是&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9b1089acf6819113dbb7363669e04dc0c01346f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/serve&lt;/code&gt; section overrides build defaults and supplies additional serve defaults for the &lt;code&gt;ng serve&lt;/code&gt; command. In addition to the options available for the &lt;code&gt;ng build&lt;/code&gt; command, it adds options related to serving the app.</source>
          <target state="translated">的 &lt;code&gt;architect/serve&lt;/code&gt; 部覆盖构建默认值，并提供额外的服务默认为 &lt;code&gt;ng serve&lt;/code&gt; 命令。除了 &lt;code&gt;ng build&lt;/code&gt; 命令可用的选项之外，它还添加了与服务应用程序相关的选项。</target>
        </trans-unit>
        <trans-unit id="7275e6acc60d1c09dc90fc0da2e3d713ae73da4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/server&lt;/code&gt; section configures defaults for creating a Universal app with server-side rendering, using the &lt;code&gt;ng run &amp;lt;project&amp;gt;:server&lt;/code&gt; command.</source>
          <target state="translated">的 &lt;code&gt;architect/server&lt;/code&gt; 部分配置的默认值，用于创建与服务器端呈现一个通用应用，使用 &lt;code&gt;ng run &amp;lt;project&amp;gt;:server&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="9ef96acb7b485618977d3e1442a09850b7fc3e81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect/test&lt;/code&gt; section overrides build-option defaults for test builds and supplies additional test-running defaults for the &lt;code&gt;ng test&lt;/code&gt; command.</source>
          <target state="translated">的 &lt;code&gt;architect/test&lt;/code&gt; 部覆盖叠合选项默认为测试构建和提供额外的测试运行的默认值的 &lt;code&gt;ng test&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="0ed4c7af7cd326385045a44114d38390cabe0e1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;architect&lt;/code&gt; section of &lt;code&gt;angular.json&lt;/code&gt; contains a set of Architect targets. Many of the targets correspond to the CLI commands that run them. Some additional predefined targets can be run using the &lt;code&gt;ng run&lt;/code&gt; command, and you can define your own targets.</source>
          <target state="translated">该 &lt;code&gt;architect&lt;/code&gt; 的部分 &lt;code&gt;angular.json&lt;/code&gt; 包含了一组建筑师的目标。许多目标与运行它们的CLI命令相对应。可以使用 &lt;code&gt;ng run&lt;/code&gt; 命令运行一些其他预定义目标，并且您可以定义自己的目标。</target>
        </trans-unit>
        <trans-unit id="837e1c5860f8946382489134127d08dd900fd467" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as angular.IDirectiveFactory&lt;/code&gt; cast tells the TypeScript compiler that the return value of the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt; method is a directive factory.</source>
          <target state="translated">在 &lt;code&gt;as angular.IDirectiveFactory&lt;/code&gt; 铸告诉打字稿编译器的返回值 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt; 方法是指导工厂。</target>
        </trans-unit>
        <trans-unit id="de5acc0948802882fdbf516e8ca2423cb821743b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;base&lt;/code&gt; tag</source>
          <target state="translated">该 &lt;code&gt;base&lt;/code&gt; 标签</target>
        </trans-unit>
        <trans-unit id="0c7767d244bd1e5fa1024e13e6d35aca3cfd7f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blank&lt;/code&gt; schematic is provided by the Schematics CLI. The command creates a new project folder (the root folder for the collection) and an initial named schematic in the collection.</source>
          <target state="translated">的 &lt;code&gt;blank&lt;/code&gt; 示意由示意图CLI提供。该命令将创建一个新的项目文件夹（集合的根文件夹），并在集合中创建一个初始的命名原理图。</target>
        </trans-unit>
        <trans-unit id="774efd9da030375e817972175072a85668a5b3b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bootstrap&lt;/code&gt; array</source>
          <target state="translated">所述 &lt;code&gt;bootstrap&lt;/code&gt; 阵列</target>
        </trans-unit>
        <trans-unit id="21e30d3cb47ab8fba3795f2cf9031306e18cf3e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bootstrapModule()&lt;/code&gt; method creates a child injector of the platform injector which is configured by the &lt;code&gt;AppModule&lt;/code&gt;. This is the &lt;code&gt;root&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;bootstrapModule()&lt;/code&gt; 方法创建其由配置的平台喷射器的喷射器的孩子 &lt;code&gt;AppModule&lt;/code&gt; 。这是 &lt;code&gt;root&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ccdc316423b8cac35af87b048685e91deb523ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build&lt;/code&gt; command uses this as the build target when no environment is specified. You can add further variables, either as additional properties on the environment object, or as separate objects. For example, the following adds a default for a variable to the default environment:</source>
          <target state="translated">未指定环境时， &lt;code&gt;build&lt;/code&gt; 命令将其用作构建目标。您可以添加其他变量，作为环境对象上的其他属性或单独的对象。例如，以下内容将变量的默认值添加到默认环境：</target>
        </trans-unit>
        <trans-unit id="a7e74b769afce7863d087a2995f0e269ec1061cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build&lt;/code&gt; script compiles your schematic using the custom &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; file.</source>
          <target state="translated">在 &lt;code&gt;build&lt;/code&gt; 脚本编译使用自定义您的原理图 &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="16ff1c9552e6bcdf37fd0cb12b664e0d9547de55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catchError()&lt;/code&gt; operator intercepts an &lt;strong&gt;&lt;code&gt;Observable&lt;/code&gt; that failed&lt;/strong&gt;. It passes the error an error handler that can do what it wants with the error.</source>
          <target state="translated">该 &lt;code&gt;catchError()&lt;/code&gt; 操作员拦截的&lt;strong&gt; &lt;code&gt;Observable&lt;/code&gt; 失败&lt;/strong&gt;。它将错误传递给错误处理程序，该错误处理程序可以处理错误。</target>
        </trans-unit>
        <trans-unit id="5b4ccbda901c1b80a2c60da9cc10ca3fb10da44f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catchError()&lt;/code&gt; operator intercepts an &lt;strong&gt;&lt;code&gt;Observable&lt;/code&gt; that failed&lt;/strong&gt;. The operator then passes the error to the error handling function.</source>
          <target state="translated">该 &lt;code&gt;catchError()&lt;/code&gt; 操作员拦截的&lt;strong&gt; &lt;code&gt;Observable&lt;/code&gt; 失败&lt;/strong&gt;。然后，操作员将错误传递给错误处理功能。</target>
        </trans-unit>
        <trans-unit id="cb83c1c9edfd98646b27bf239fc83ddde135aea6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catchError&lt;/code&gt; intercepts service errors, prepares an error message, and returns the placeholder value on the success channel. It must wait a tick to set the &lt;code&gt;errorMessage&lt;/code&gt; in order to avoid updating that message twice in the same change detection cycle.</source>
          <target state="translated">所述 &lt;code&gt;catchError&lt;/code&gt; 截距服务错误，准备一个错误消息，并返回对成功信道占位符值。为了避免在同一更改检测周期内两次更新该消息，它必须等待一个滴答以设置 &lt;code&gt;errorMessage&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b0aedba50f90d47be2a1d94e432c17fdc3cf9e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cdkTrapFocus&lt;/code&gt; directive traps Tab-key focus within an element. Use it to create accessible experience for components like modal dialogs, where focus must be constrained.</source>
          <target state="translated">该 &lt;code&gt;cdkTrapFocus&lt;/code&gt; 指令陷阱元素中制表重点。使用它可为必须限制焦点的模态对话框之类的组件创建可访问的体验。</target>
        </trans-unit>
        <trans-unit id="9ba4ce88e64a0c267da41c0360c30cfbfbcd5b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chain()&lt;/code&gt; method allows you to combine multiple rules into a single rule, so that you can perform multiple operations in a single schematic. Here you are only merging the template rules with any code executed by the schematic.</source>
          <target state="translated">该 &lt;code&gt;chain()&lt;/code&gt; 方法可以让你多个规则组合成一个单一的规则，这样就可以在一个单一的模式执行多个操作。在这里，您仅将模板规则与原理图执行的任何代码合并。</target>
        </trans-unit>
        <trans-unit id="07cc438b291409375529b7d3e3b1beb8498cb9de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;classify()&lt;/code&gt; method takes a value and returns the value in title case. For example, if the provided name is &lt;code&gt;my service&lt;/code&gt;, it is returned as &lt;code&gt;MyService&lt;/code&gt;</source>
          <target state="translated">的 &lt;code&gt;classify()&lt;/code&gt; 方法以一个值，并返回在标题的情况下的值。例如，如果提供的名称是 &lt;code&gt;my service&lt;/code&gt; ，则将其作为 &lt;code&gt;MyService&lt;/code&gt; 返回。</target>
        </trans-unit>
        <trans-unit id="a1fdbcd8b429214d232c8207b7059eef99aa580c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;classify&lt;/code&gt; and &lt;code&gt;dasherize&lt;/code&gt; methods are utility functions that your schematic will use to transform your source template and filename.</source>
          <target state="translated">该 &lt;code&gt;classify&lt;/code&gt; 和 &lt;code&gt;dasherize&lt;/code&gt; 方法是实用功能，你的原理将用来改变你的源模板和文件名。</target>
        </trans-unit>
        <trans-unit id="bc0901031ec27305365d566f09127536d421f0da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clearCart()&lt;/code&gt; method returns an empty array of items.</source>
          <target state="translated">所述 &lt;code&gt;clearCart()&lt;/code&gt; 方法返回的项目的空数组。</target>
        </trans-unit>
        <trans-unit id="68bb58946cacb088117e3c944df74cba20283b14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;click()&lt;/code&gt; helper function is &lt;strong&gt;not&lt;/strong&gt; one of the Angular testing utilities. It's a function defined in &lt;em&gt;this guide's sample code&lt;/em&gt;. All of the sample tests use it. If you like it, add it to your own collection of helpers.</source>
          <target state="translated">在 &lt;code&gt;click()&lt;/code&gt; 辅助函数是&lt;strong&gt;没有&lt;/strong&gt;的角测试工具之一。这是&lt;em&gt;本指南的示例代码中&lt;/em&gt;定义的功能。所有样本测试都使用它。如果喜欢，可以将其添加到您自己的助手集中。</target>
        </trans-unit>
        <trans-unit id="b4f6858962e9d1344f743e682caa7eeeffadb383" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clone()&lt;/code&gt; method's hash argument allows you to mutate specific properties of the request while copying the others.</source>
          <target state="translated">该 &lt;code&gt;clone()&lt;/code&gt; 方法的哈希参数可以让你请求的具体发生变异特性，同时复制别人。</target>
        </trans-unit>
        <trans-unit id="907b9d6d7b3d97452aa6de0ea7faf587928cbe47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;closePopup()&lt;/code&gt; method again:</source>
          <target state="translated">再次使用 &lt;code&gt;closePopup()&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="50f48a3f5bd2403e8db40f37e2564cff21da056b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;closePopup()&lt;/code&gt; method closes the popup view by navigating to the popup outlet with a &lt;code&gt;null&lt;/code&gt; which the section on &lt;a href=&quot;router-tutorial-toh#clear-secondary-routes&quot;&gt;clearing secondary routes&lt;/a&gt; covers.</source>
          <target state="translated">所述 &lt;code&gt;closePopup()&lt;/code&gt; 方法通过导航到弹出出口与一个关闭弹出视图 &lt;code&gt;null&lt;/code&gt; 其上的部分&lt;a href=&quot;router-tutorial-toh#clear-secondary-routes&quot;&gt;清除辅助路由&lt;/a&gt;盖。</target>
        </trans-unit>
        <trans-unit id="9a518321828c28848d283d37c2b4fd36a09865ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;closePopup()&lt;/code&gt; method closes the popup view by navigating to the popup outlet with a &lt;code&gt;null&lt;/code&gt;. That's a peculiarity covered &lt;a href=&quot;router#clear-secondary-routes&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;closePopup()&lt;/code&gt; 方法关闭通过导航到与弹出出口弹出视图 &lt;code&gt;null&lt;/code&gt; 。这是&lt;a href=&quot;router#clear-secondary-routes&quot;&gt;下面介绍&lt;/a&gt;的特性。</target>
        </trans-unit>
        <trans-unit id="04c9c12ecadbed296e805449ac96daee9dcd393a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;color&lt;/code&gt; property in the expression on the right belongs to the template's component. The template and its component trust each other. The &lt;code&gt;color&lt;/code&gt; property doesn't require the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">右侧表达式中的 &lt;code&gt;color&lt;/code&gt; 属性属于模板的组件。模板及其组件相互信任。该 &lt;code&gt;color&lt;/code&gt; 属性不需要 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 装饰。</target>
        </trans-unit>
        <trans-unit id="0e2d0cb71d0be76be2fae5a0cff6f88e64888862" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compileComponents()&lt;/code&gt; method returns a promise so you can perform the synchronous setup tasks &lt;em&gt;after&lt;/em&gt; compilation by moving the synchronous code into a &lt;code&gt;then(...)&lt;/code&gt; callback.</source>
          <target state="translated">该 &lt;code&gt;compileComponents()&lt;/code&gt; 方法返回一个承诺，因此您可以进行同步设置任务&lt;em&gt;后，&lt;/em&gt;由同步代码移入编译 &lt;code&gt;then(...)&lt;/code&gt; 回调。</target>
        </trans-unit>
        <trans-unit id="a3037d295430c7027674e9a9776f53a0101b09a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;complete&lt;/code&gt; notification doesn't send a value, but the handler is called when the call completes. Scheduled values can continue to be returned after the call completes.</source>
          <target state="translated">在 &lt;code&gt;complete&lt;/code&gt; 通知不发送的值，但调用完成时的处理程序被调用。调用完成后，可以继续返回计划的值。</target>
        </trans-unit>
        <trans-unit id="ee476bab0c70c0fad3c3d87a3d2232d68ec9cf82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;form-group&lt;/code&gt;, &lt;code&gt;form-control&lt;/code&gt;, and &lt;code&gt;btn&lt;/code&gt; classes come from &lt;a href=&quot;http://getbootstrap.com/css/&quot;&gt;Twitter Bootstrap&lt;/a&gt;. These classes are purely cosmetic. Bootstrap gives the form a little style.</source>
          <target state="translated">的 &lt;code&gt;container&lt;/code&gt; ， &lt;code&gt;form-group&lt;/code&gt; ， &lt;code&gt;form-control&lt;/code&gt; ，和 &lt;code&gt;btn&lt;/code&gt; 类来自&lt;a href=&quot;http://getbootstrap.com/css/&quot;&gt;Twitter的引导&lt;/a&gt;。这些课程纯粹是化妆品。Bootstrap赋予表单一点样式。</target>
        </trans-unit>
        <trans-unit id="345aeb6e554e8d240ec4aae56d32b5f032d522f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copy:*&lt;/code&gt; statements copy compiled schematic files into the proper locations in the library output folder in order to preserve the file structure.</source>
          <target state="translated">该 &lt;code&gt;copy:*&lt;/code&gt; 语句复制，以保持该文件结构编译原理图文件到库中的输出文件夹中的适当位置。</target>
        </trans-unit>
        <trans-unit id="7d3b20ee2734ef0eb3ec2144563106ed344b113b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;core&lt;/code&gt;, &lt;code&gt;phone-detail&lt;/code&gt;, and &lt;code&gt;phone-list&lt;/code&gt; modules are each in their own subdirectory. Those subdirectories contain the JavaScript code as well as the HTML templates that go with each particular feature. This is in line with the &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure&quot;&gt;Folders-by-Feature Structure&lt;/a&gt; and &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity&quot;&gt;Modularity&lt;/a&gt; rules.</source>
          <target state="translated">的 &lt;code&gt;core&lt;/code&gt; ， &lt;code&gt;phone-detail&lt;/code&gt; ，和 &lt;code&gt;phone-list&lt;/code&gt; 模块各自在自己的子目录。这些子目录包含JavaScript代码以及每个特定功能附带的HTML模板。这符合&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure&quot;&gt;按功能文件夹结构&lt;/a&gt;和&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity&quot;&gt;模块化&lt;/a&gt;规则。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
