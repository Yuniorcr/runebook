<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="ec82505f597f4541fee947d1b90b7670a8bfe1fc" translate="yes" xml:space="preserve">
          <source>There are two other kinds of Angular directives, described extensively elsewhere: (1) components and (2) attribute directives.</source>
          <target state="translated">Angular指令还有两种,在其他地方有广泛的描述。(1)组件和(2)属性指令。</target>
        </trans-unit>
        <trans-unit id="eee5ab865a86fd0b73b19b491d8642111214cd0d" translate="yes" xml:space="preserve">
          <source>There are two possible degraded states:</source>
          <target state="translated">有两种可能的退化状态。</target>
        </trans-unit>
        <trans-unit id="25650f34b85cc033bcf18133335c7c20ab26b348" translate="yes" xml:space="preserve">
          <source>There are two types of validator functions: sync validators and async validators.</source>
          <target state="translated">验证器功能有两种类型:同步验证器和异步验证器。</target>
        </trans-unit>
        <trans-unit id="3f8e7458d2bd37a51a02a94b62cdecdc59f8af4c" translate="yes" xml:space="preserve">
          <source>There are two ways to make a service a singleton in Angular:</source>
          <target state="translated">在Angular中,有两种方法可以让一个服务成为一个单人。</target>
        </trans-unit>
        <trans-unit id="faa6ad5446f7861f6ecf46da71ea515c5fb5f071" translate="yes" xml:space="preserve">
          <source>There are two ways to update the model value:</source>
          <target state="translated">有两种方法可以更新模型值。</target>
        </trans-unit>
        <trans-unit id="f26b5471a1dd6edb128afdf26847e8bb73608215" translate="yes" xml:space="preserve">
          <source>There are usually one or more main sections that may be further divided into secondary sections.</source>
          <target state="translated">通常有一个或多个主要部分,可进一步划分为次要部分。</target>
        </trans-unit>
        <trans-unit id="ca00ae37aaf723dcf8b96d9e5fe70f20f93c9cc4" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;tree hierarchy of injectors&lt;/a&gt;, with a root injector and an additional injector for each component.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;注射器&lt;/a&gt;具有树形层次结构，每个组件都有一个根注射器和一个附加注射器。</target>
        </trans-unit>
        <trans-unit id="027fb989b8678c3235e885de0c12df209840f1d8" translate="yes" xml:space="preserve">
          <source>There is a rule for each defined day period. The first rule is applied to the first day period and so on. Fall back to AM/PM when no rules are available.</source>
          <target state="translated">每一个确定的日期间都有一条规则。第一条规则适用于第一天的时段,以此类推。当没有规则时,退回到AM/PM。</target>
        </trans-unit>
        <trans-unit id="7654c24d9c7b87cc2fb7d574ad4e33ff2eb6cd63" translate="yes" xml:space="preserve">
          <source>There is a small but critical difference. In the &lt;code&gt;AppRoutingModule&lt;/code&gt;, you used the static &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; method to register the routes and application level service providers. In a feature module you use the static &lt;strong&gt;&lt;code&gt;forChild&lt;/code&gt;&lt;/strong&gt; method.</source>
          <target state="translated">两者之间存在很小但很关键的差异。在 &lt;code&gt;AppRoutingModule&lt;/code&gt; 中，您使用了静态&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;方法来注册路由和应用程序级别的服务提供者。在功能模块中，使用静态的&lt;strong&gt; &lt;code&gt;forChild&lt;/code&gt; &lt;/strong&gt;方法。</target>
        </trans-unit>
        <trans-unit id="1089bb549e548f1eece3447abc86312a541125a5" translate="yes" xml:space="preserve">
          <source>There is an API for navigating &lt;em&gt;down&lt;/em&gt; the view hierarchy. Check out &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; in the &lt;a href=&quot;../api/index&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">有用于导航的API &lt;em&gt;下来&lt;/em&gt;视图层次结构。在&lt;a href=&quot;../api/index&quot;&gt;API参考中&lt;/a&gt;检出 &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf10db6389feae71b1aa42ec8c45a030a861e2e0" translate="yes" xml:space="preserve">
          <source>There is an important distinction between using another module's component and using a service from another module. Import modules when you want to use directives, pipes, and components. Importing a module with services means that you will have a new instance of that service, which typically is not what you need (typically one wants to reuse an existing service). Use module imports to control service instantiation.</source>
          <target state="translated">使用其他模块的组件和使用其他模块的服务之间有一个重要的区别。当你想使用指令、管道和组件时,请导入模块。导入一个带有服务的模块意味着你将拥有一个新的服务实例,这通常不是你所需要的(通常人们希望重用一个现有的服务)。使用模块导入来控制服务实例化。</target>
        </trans-unit>
        <trans-unit id="cceabdb690dfa8a94f69d03b06952860cf555cc4" translate="yes" xml:space="preserve">
          <source>There is exactly one injector. Even in multi-module applications, everything is poured into one big namespace.</source>
          <target state="translated">正好有一个注入器。即使是在多模块应用中,所有的东西都会被注入到一个大的命名空间中。</target>
        </trans-unit>
        <trans-unit id="8b6ca3d80875d293406dd0f142004f9fede44d55" translate="yes" xml:space="preserve">
          <source>There is no &lt;em&gt;live example&lt;/em&gt; for this cookbook because it describes Visual Studio, not the Angular application itself. It uses the starter Angular application created by the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; as an example.</source>
          <target state="translated">此菜谱没有&lt;em&gt;实时示例&lt;/em&gt;，因为它描述了Visual Studio，而不是Angular应用程序本身。它以CLI命令&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;创建的Starter Angular应用程序为例。</target>
        </trans-unit>
        <trans-unit id="133a9567390a248ff96c3ddfeb770bd616eadd71" translate="yes" xml:space="preserve">
          <source>There is no default for the child route so you need to pick one.</source>
          <target state="translated">子路是没有默认的,所以你需要选择一个。</target>
        </trans-unit>
        <trans-unit id="c9bb67cef244a52a5902839951c12ad9006e5375" translate="yes" xml:space="preserve">
          <source>There is no issue when the user navigates to that URL from within a running client. The Angular router interprets the URL and routes to that page and hero.</source>
          <target state="translated">当用户从正在运行的客户端内导航到该URL时,没有问题。Angular路由器会解释该URL并路由到该页面和英雄。</target>
        </trans-unit>
        <trans-unit id="565fc140f826820d99228d067e03328fac73f380" translate="yes" xml:space="preserve">
          <source>There is no longer a reference to &lt;code&gt;template&lt;/code&gt; and, therefore, nothing to trouble the compiler when it later interprets the &lt;em&gt;collector's&lt;/em&gt; output in &lt;code&gt;.metadata.json&lt;/code&gt;.</source>
          <target state="translated">不再引用 &lt;code&gt;template&lt;/code&gt; ，因此，以后编译器在 &lt;code&gt;.metadata.json&lt;/code&gt; 中解释&lt;em&gt;收集器的&lt;/em&gt;输出时，也不会给编译器带来麻烦。</target>
        </trans-unit>
        <trans-unit id="4e748fc4f70bcf252a46a3d8e24d8e97b2bd9b8c" translate="yes" xml:space="preserve">
          <source>There is no public API for acquiring a parent reference. However, because every component instance is added to an injector's container, you can use Angular dependency injection to reach a parent component.</source>
          <target state="translated">没有公开的API用于获取父引用。然而,由于每个组件实例都被添加到注入器的容器中,你可以使用Angular依赖注入来达到父组件。</target>
        </trans-unit>
        <trans-unit id="9e1f226d0769c2006bed4876b7fe7a774057642d" translate="yes" xml:space="preserve">
          <source>There is no single configuration that works for every server. The following sections describe configurations for some of the most popular servers. The list is by no means exhaustive, but should provide you with a good starting point.</source>
          <target state="translated">没有一种配置可以适用于每台服务器。下面的章节描述了一些最流行的服务器的配置。这个列表绝不是详尽无遗的,但应该为你提供一个良好的起点。</target>
        </trans-unit>
        <trans-unit id="259bb0afbd8fefe05bdc556bd5eef64a565fd518" translate="yes" xml:space="preserve">
          <source>There is no specific API for upgrading an AngularJS service. Instead you should just follow the following recipe:</source>
          <target state="translated">没有特定的API来升级AngularJS服务。相反,你应该只按照下面的配方。</target>
        </trans-unit>
        <trans-unit id="550621addec4fd2e0708772894f55350f2a0f79c" translate="yes" xml:space="preserve">
          <source>There is no upgrade method to convert filters into pipes. You won't miss it. It's easy to turn the filter function into an equivalent Pipe class. The implementation is the same as before, repackaged in the &lt;code&gt;transform&lt;/code&gt; method. Rename the file to &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; to conform with Angular conventions:</source>
          <target state="translated">没有将过滤器转换为管道的升级方法。您将不会错过。将filter函数转换为等效的Pipe类很容易。其实现与之前相同，只是重新包装了 &lt;code&gt;transform&lt;/code&gt; 方法。将文件重命名为 &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; 以符合Angular约定：</target>
        </trans-unit>
        <trans-unit id="4367e8254fa20fae31dcd949ca18914ce55ee3c5" translate="yes" xml:space="preserve">
          <source>There is one exception to this behavior that applies to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;trackBy&lt;/code&gt; functionality that can deal with referential inequality of objects when iterating over them. See &lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;*ngFor with &lt;code&gt;trackBy&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">此行为有一个例外适用于 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 具有 &lt;code&gt;trackBy&lt;/code&gt; 功能，可以在迭代对象时处理对象的引用不平等。有关详细信息，请参见&lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;* ngFor和 &lt;code&gt;trackBy&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7dd62d5ae3789ef38b487eab0e8d1f7f87b82b99" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule. Attributes can be changed by &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt;, which re-initializes corresponding DOM properties.</source>
          <target state="translated">此规则有一个例外。可以通过 &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; 更改属性，该属性将重新初始化相应的DOM属性。</target>
        </trans-unit>
        <trans-unit id="d33886b39df983b142ac0e4c678d0df8e24d2439" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule: to make local development easier, browsers do &lt;em&gt;not&lt;/em&gt; require a secure connection when accessing an app on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">有一个例外：使当地的开发更容易，浏览器都&lt;em&gt;不会&lt;/em&gt;在访问应用程序时要求进行安全连接 &lt;code&gt;localhost&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56ed5ae7d3569c2686c1ede9ce1a1546720090e8" translate="yes" xml:space="preserve">
          <source>There is only one root injector for an app. Providing &lt;code&gt;UserService&lt;/code&gt; at the &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;AppModule&lt;/code&gt; level means it is registered with the root injector. There is just one &lt;code&gt;UserService&lt;/code&gt; instance in the entire app and every class that injects &lt;code&gt;UserService&lt;/code&gt; gets this service instance &lt;em&gt;unless&lt;/em&gt; you configure another provider with a &lt;em&gt;child injector&lt;/em&gt;.</source>
          <target state="translated">一个应用程序只有一个根注入器。在 &lt;code&gt;root&lt;/code&gt; 或 &lt;code&gt;AppModule&lt;/code&gt; 级别提供 &lt;code&gt;UserService&lt;/code&gt; 意味着它已在根注入器中注册。整个应用程序中只有一个 &lt;code&gt;UserService&lt;/code&gt; 实例，并且注入 &lt;code&gt;UserService&lt;/code&gt; 的每个类都将获得此服务实例，&lt;em&gt;除非&lt;/em&gt;您使用&lt;em&gt;子注入器&lt;/em&gt;配置另一个提供程序。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa0f46f07be6d7bd145a95e639f76d57f093602d" translate="yes" xml:space="preserve">
          <source>There isn't anything the client application can do about these errors. The server must be configured to accept the application's requests. Read about how to enable CORS for specific servers at &lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org&lt;/a&gt;.</source>
          <target state="translated">客户端应用程序无法解决这些错误。必须将服务器配置为接受应用程序的请求。在&lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org上&lt;/a&gt;了解如何为特定服务器启用CORS 。</target>
        </trans-unit>
        <trans-unit id="bd29a80577a16149f809aa709e10802120f26a64" translate="yes" xml:space="preserve">
          <source>There will be one additional argument to the &lt;code&gt;transform&lt;/code&gt; method for each parameter passed to the pipe. Your pipe has one such parameter: the &lt;code&gt;exponent&lt;/code&gt;.</source>
          <target state="translated">对于传递给管道的每个参数， &lt;code&gt;transform&lt;/code&gt; 方法将有一个附加参数。您的管道具有一个这样的参数： &lt;code&gt;exponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cc5eb405460e77c124b415c5ccacffdb138ea7a" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing special about this component, nothing form-specific, nothing to distinguish it from any component you've written before.</source>
          <target state="translated">这个组件没有什么特别的，没有形式上的特殊性，也没有区别于您以前编写的任何组件。</target>
        </trans-unit>
        <trans-unit id="542467bb8ed2c1b3891b718134b4968a6fc9a566" translate="yes" xml:space="preserve">
          <source>There's a good reason for this circuitous path to the element.</source>
          <target state="translated">这条迂回的元素之路是有原因的。</target>
        </trans-unit>
        <trans-unit id="508e59adf4df546f2bbce6e533bf9e238970539b" translate="yes" xml:space="preserve">
          <source>There's a similar helper for producing an async error.</source>
          <target state="translated">有一个类似的帮助程序来产生一个异步错误。</target>
        </trans-unit>
        <trans-unit id="84cc470613727d84aabbfa2c1862c5ad36fcaf45" translate="yes" xml:space="preserve">
          <source>There's also the &lt;code&gt;bind-&lt;/code&gt; prefix alternative:</source>
          <target state="translated">还有 &lt;code&gt;bind-&lt;/code&gt; prefix替代方案：</target>
        </trans-unit>
        <trans-unit id="0909bf3d1ff44badd0511d8a77fa43424485ad25" translate="yes" xml:space="preserve">
          <source>There's an easier way: bind to Angular's &lt;code&gt;keyup.enter&lt;/code&gt; pseudo-event. Then Angular calls the event handler only when the user presses &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">有一种更简单的方法：绑定到Angular的 &lt;code&gt;keyup.enter&lt;/code&gt; 伪事件。然后Angular仅在用户按下&lt;em&gt;Enter&lt;/em&gt;时才调用事件处理程序。</target>
        </trans-unit>
        <trans-unit id="ab30027be9f11ddbb2b70f4586d177e63c2b9249" translate="yes" xml:space="preserve">
          <source>There's another school of testing that never calls &lt;code&gt;beforeEach()&lt;/code&gt; and prefers to create classes explicitly rather than use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">还有另一种测试方法，它从不调用 &lt;code&gt;beforeEach()&lt;/code&gt; ，而是更喜欢显式创建类而不是使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea61c19309ff72246ea3a2984fbfffe7d47f7033" translate="yes" xml:space="preserve">
          <source>There's another way to get the user data: use Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;template reference variables&lt;/strong&gt;&lt;/a&gt;. These variables provide direct access to an element from within the template. To declare a template reference variable, precede an identifier with a hash (or pound) character (#).</source>
          <target state="translated">还有另一种获取用户数据的方法：使用Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;模板引用变量&lt;/strong&gt;&lt;/a&gt;。这些变量提供从模板内直接访问元素的权限。要声明模板引用变量，请在标识符前加上井号（或井号）（＃）。</target>
        </trans-unit>
        <trans-unit id="649efc388a11470109bc9e7158e40958a6267aea" translate="yes" xml:space="preserve">
          <source>There's no harm in calling &lt;code&gt;compileComponents()&lt;/code&gt; when it's not required.</source>
          <target state="translated">不需要时调用 &lt;code&gt;compileComponents()&lt;/code&gt; 并没有什么害处。</target>
        </trans-unit>
        <trans-unit id="d18f6add8e2e8495aacfbde5fe0813a6561d85a2" translate="yes" xml:space="preserve">
          <source>There's no need to declare or import anything else. The default test module is pre-configured with something like the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">无需声明或导入其他任何内容。默认的测试模块被预先配置有类似的 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 从 &lt;code&gt;@angular/platform-browser&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9485387892c4a4b5f9d2bd3163e6e9e7f2a2b699" translate="yes" xml:space="preserve">
          <source>There's no need to list a component in both the &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;entryComponents&lt;/code&gt; lists, although doing so is harmless.</source>
          <target state="translated">尽管这样做是无害的，但 &lt;code&gt;entryComponents&lt;/code&gt; 在 &lt;code&gt;bootstrap&lt;/code&gt; 和entryComponents列表中都列出组件。</target>
        </trans-unit>
        <trans-unit id="c90aada73387116e19e933942a34d908ca737c3b" translate="yes" xml:space="preserve">
          <source>There's often a &lt;em&gt;root&lt;/em&gt; element that can and should host the structural directive. The list element (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) is a typical host element of an &lt;code&gt;NgFor&lt;/code&gt; repeater.</source>
          <target state="translated">通常有一个&lt;em&gt;根&lt;/em&gt;元素可以并且应该承载结构化指令。列表元素（ &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ）是 &lt;code&gt;NgFor&lt;/code&gt; 转发器的典型宿主元素。</target>
        </trans-unit>
        <trans-unit id="ca6a4c5f2988457896869f467e895a0eeb19531f" translate="yes" xml:space="preserve">
          <source>There's one notable exception to the rule of using Angular attribute syntax for downgraded components. It has to do with input or output names that consist of multiple words. In Angular, you would bind these attributes using camelCase:</source>
          <target state="translated">在降级组件使用Angular属性语法的规则中,有一个明显的例外。它与由多个单词组成的输入或输出名称有关。在Angular中,你会使用camelCase来绑定这些属性。</target>
        </trans-unit>
        <trans-unit id="6cf332e6a1ddffd2a30959312ecbc288187e50d8" translate="yes" xml:space="preserve">
          <source>There's really nothing for the component to do with the &lt;code&gt;Observable&lt;/code&gt; returned by &lt;code&gt;heroService.delete()&lt;/code&gt;&lt;strong&gt;but it must subscribe anyway&lt;/strong&gt;.</source>
          <target state="translated">实际上，该组件与 &lt;code&gt;Observable&lt;/code&gt; &lt;code&gt;heroService.delete()&lt;/code&gt; 返回 Observable&lt;strong&gt;但是它仍然必须订阅&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2e367708179b8c6b769aeb5784a73ff30d8bb02d" translate="yes" xml:space="preserve">
          <source>There's the hero again, displayed read-only with interpolation bindings. This &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; appears only while the component is in the submitted state.</source>
          <target state="translated">再次出现了英雄，它以插值绑定显示为只读。仅当组件处于已提交状态时，此 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 才会出现。</target>
        </trans-unit>
        <trans-unit id="a7f47f5fef07e1400c8770e346e27dd983d3210c" translate="yes" xml:space="preserve">
          <source>These Angular docs help you learn and use the Angular platform and framework, from your first app to optimizing complex enterprise apps. Tutorials and guides include downloadable example to accelerate your projects.</source>
          <target state="translated">这些Angular文档可以帮助您学习和使用Angular平台和框架,从您的第一个应用程序到优化复杂的企业应用程序。教程和指南包括可下载的示例,以加速你的项目。</target>
        </trans-unit>
        <trans-unit id="9c8f4170de94e38e103661daa9cd09d22d382f76" translate="yes" xml:space="preserve">
          <source>These are all features you'll want to test.</source>
          <target state="translated">这些都是你要测试的功能。</target>
        </trans-unit>
        <trans-unit id="19fa4dd3c3af8618e37296f1894ca8c3663deadc" translate="yes" xml:space="preserve">
          <source>These are short, simple functions that you can write yourself. Unfortunately, they're too simple for many common scenarios. An observable often emits multiple times, perhaps after a significant delay. A component may coordinate multiple observables with overlapping sequences of values and errors.</source>
          <target state="translated">这些都是短小、简单的函数,你可以自己写。不幸的是,对于许多常见的场景来说,它们太简单了。一个观测值经常会发出多次,也许是在一个明显的延迟之后。一个组件可能会协调多个观测值与错误的重叠序列。</target>
        </trans-unit>
        <trans-unit id="15a8bdbc2d27676173c0870bb9d476a44f9c0ec8" translate="yes" xml:space="preserve">
          <source>These are techniques for &lt;em&gt;Shallow Component Testing&lt;/em&gt; , so-named because they reduce the visual surface of the component to just those elements in the component's template that matter for tests.</source>
          <target state="translated">这些是用于 &lt;em&gt;浅层组件测试&amp;rdquo;的&lt;/em&gt;，之所以这么称呼是因为它们将组件的可视表面缩小为组件模板中对于测试至关重要的那些元素。</target>
        </trans-unit>
        <trans-unit id="874d82075cf5a1fb8e894c6a1831e2a99c4f9cf5" translate="yes" xml:space="preserve">
          <source>These are tests of the pipe &lt;em&gt;in isolation&lt;/em&gt;. They can't tell if the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; is working properly as applied in the application components.</source>
          <target state="translated">这些是&lt;em&gt;隔离&lt;/em&gt;测试的管道。他们无法分辨 &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; 是否按应用程序组件中的方式正常工作。</target>
        </trans-unit>
        <trans-unit id="7aa6e184a2127bbab023de5210efd3d94de5eaf2" translate="yes" xml:space="preserve">
          <source>These are the polyfills required to run an Angular application on each supported browser:</source>
          <target state="translated">这些是在每个支持的浏览器上运行Angular应用所需的polyfills。</target>
        </trans-unit>
        <trans-unit id="d6422d60e6eed75caf6b039379d70a9d2b91599f" translate="yes" xml:space="preserve">
          <source>These buttons work, because the CLI automatically added the routes to the feature modules to the &lt;code&gt;routes&lt;/code&gt; array in &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">这些按钮有效，因为CLI会自动将功能模块的 &lt;code&gt;routes&lt;/code&gt; 添加到路由中 &lt;code&gt;app.module.ts&lt;/code&gt; 中数组。</target>
        </trans-unit>
        <trans-unit id="4fadb046a4f69a8a29a6dfda895733f7808fc510" translate="yes" xml:space="preserve">
          <source>These complications argue for &lt;em&gt;avoiding component inheritance&lt;/em&gt;.</source>
          <target state="translated">这些复杂性要求&lt;em&gt;避免组件继承&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3cd97d4aaaa391802aacd2112d378fb5a981f75d" translate="yes" xml:space="preserve">
          <source>These declared classes are visible within the module but invisible to components in a different module unless they are exported from this module and the other module imports this one.</source>
          <target state="translated">这些声明的类在模块中是可见的,但对不同模块中的组件是不可见的,除非它们是从这个模块导出的,而另一个模块又导入了这个类。</target>
        </trans-unit>
        <trans-unit id="e0813bed7ed16b4e0b736f3f56fccf8998f10650" translate="yes" xml:space="preserve">
          <source>These decorators can be used individually or together, as shown in the example. This &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; is a revision of &lt;code&gt;HeroBiosComponent&lt;/code&gt; which you looked at &lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">如示例所示，这些装饰器可以单独使用或一起使用。这 &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; 是修订 &lt;code&gt;HeroBiosComponent&lt;/code&gt; 你看了&lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;上面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e87f8d2277a30ddb602eb3ef7903e879dae9750f" translate="yes" xml:space="preserve">
          <source>These differences argue for a re-usable stub class.</source>
          <target state="translated">这些不同的地方主张采用可重复使用的存根类。</target>
        </trans-unit>
        <trans-unit id="332167a123f1d6b741515c29ca0f4c696c2a51c9" translate="yes" xml:space="preserve">
          <source>These docs assume that you are already familiar with HTML, CSS, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;, and some of the tools from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;latest standards&lt;/a&gt;, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;modules&lt;/a&gt;. The code samples are written using &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. Most Angular code can be written with just the latest JavaScript, using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;types&lt;/a&gt; for dependency injection, and using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;decorators&lt;/a&gt; for metadata.</source>
          <target state="translated">这些文档假定您已经熟悉HTML，CSS，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;最新标准中的&lt;/a&gt;某些工具，例如&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;类&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;模块&lt;/a&gt;。这些代码示例是使用&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;编写的。大多数Angular代码只能使用最新的JavaScript编写，使用&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;类型&lt;/a&gt;进行依赖项注入，并使用&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;修饰符&lt;/a&gt;作为元数据。</target>
        </trans-unit>
        <trans-unit id="c0248cf761a672df747afacece78839e13096947" translate="yes" xml:space="preserve">
          <source>These events are logged to the console when the &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; option is enabled also. For an example of filtering router navigation events, visit the &lt;a href=&quot;observables-in-angular#router&quot;&gt;router section&lt;/a&gt; of the &lt;a href=&quot;observables-in-angular&quot;&gt;Observables in Angular&lt;/a&gt; guide.</source>
          <target state="translated">当同时启用 &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; 选项时，这些事件也会记录到控制台。有关过滤路由器导航事件的示例，请访问&lt;a href=&quot;observables-in-angular#router&quot;&gt;路由器部分&lt;/a&gt;&lt;a href=&quot;observables-in-angular&quot;&gt; Angular&lt;/a&gt;的Observables指南中。</target>
        </trans-unit>
        <trans-unit id="2680c5c9b2a75fe66adbcbcf8321b6c19da88cdf" translate="yes" xml:space="preserve">
          <source>These examples transform a date into various formats, assuming that &lt;code&gt;dateObj&lt;/code&gt; is a JavaScript &lt;code&gt;Date&lt;/code&gt; object for year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11, given in the local time for the &lt;code&gt;en-US&lt;/code&gt; locale.</source>
          <target state="translated">这些示例将 &lt;code&gt;dateObj&lt;/code&gt; 转换为多种格式，并假设dateObj是JavaScript的 &lt;code&gt;Date&lt;/code&gt; 对象，其年份为：2015，月份：6，日期：15，小时：21，分钟：43，秒：11，以 &lt;code&gt;en-US&lt;/code&gt; 语言环境。</target>
        </trans-unit>
        <trans-unit id="2c3bf4e06192c72785cca976fd12148948a7cb90" translate="yes" xml:space="preserve">
          <source>These examples use a shorthand form of the prompt syntax, supplying only the text of the question. In most cases, this is all that is required. Notice however, that the two prompts expect different types of input. When using the shorthand form, the most appropriate type is automatically selected based on the property's schema. In the example, the &lt;code&gt;name&lt;/code&gt; prompt uses the &lt;code&gt;input&lt;/code&gt; type because it it is a string property. The &lt;code&gt;useColor&lt;/code&gt; prompt uses a &lt;code&gt;confirmation&lt;/code&gt; type because it is a Boolean property. In this case, &quot;yes&quot; corresponds to &lt;code&gt;true&lt;/code&gt; and &quot;no&quot; corresponds to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">这些示例使用提示语法的简写形式，仅提供问题的文本。在大多数情况下，这就是所需要的。但是请注意，这两个提示要求使用不同类型的输入。使用简写形式时，将根据属性的架构自动选择最合适的类型。在该示例中， &lt;code&gt;name&lt;/code&gt; 提示使用 &lt;code&gt;input&lt;/code&gt; 类型，因为它是一个字符串属性。该 &lt;code&gt;useColor&lt;/code&gt; 提示使用 &lt;code&gt;confirmation&lt;/code&gt; 类型，因为它是一个布尔值属性。在这种情况下，&amp;ldquo;是&amp;rdquo;对应于 &lt;code&gt;true&lt;/code&gt; ,而&amp;ldquo;否&amp;rdquo;对应于 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d24eb680a33027e2617530dc12e6676b87a2c5ca" translate="yes" xml:space="preserve">
          <source>These files need to be copied together with the polyfills. The files the application needs at runtime, like the &lt;code&gt;.json&lt;/code&gt; phone lists and images, also need to be copied.</source>
          <target state="translated">这些文件需要与polyfills一起复制。应用程序在运行时需要的文件，例如 &lt;code&gt;.json&lt;/code&gt; 电话列表和图像，也需要复制。</target>
        </trans-unit>
        <trans-unit id="02b3a7df8a6c77dd99266ab2b91a34b6a3d23a77" translate="yes" xml:space="preserve">
          <source>These four bindings demonstrate the difference between &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;. Since the 🐶 (puppy) is declared inside the &amp;lt;#VIEW&amp;gt;, it isn't visible to the projected content. Instead, the projected content sees the 🐳 (whale).</source>
          <target state="translated">这四个绑定说明了 &lt;code&gt;providers&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 之间的区别。由于🐶（小狗）在&amp;lt;#VIEW&amp;gt;中声明，因此投影内容不可见。而是，投影的内容会看到🐳（鲸鱼）。</target>
        </trans-unit>
        <trans-unit id="8eb673fe0a5db30500d447cd8ed9df2e9892d31d" translate="yes" xml:space="preserve">
          <source>These inputs and outputs can be supplied from the AngularJS template, and the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; method takes care of wiring them up:</source>
          <target state="translated">这些输入和输出可以从AngularJS模板提供，并且 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; 方法负责将它们连接起来：</target>
        </trans-unit>
        <trans-unit id="aca1e5487bdae512316a9552870710cde2c7edc4" translate="yes" xml:space="preserve">
          <source>These kinds of parameters don't fit easily in a URL &lt;em&gt;path&lt;/em&gt;. Even if you could define a suitable URL token scheme, doing so greatly complicates the pattern matching required to translate an incoming URL to a named route.</source>
          <target state="translated">这些类型的参数不太适合URL &lt;em&gt;路径中&lt;/em&gt;。即使您可以定义合适的URL令牌方案，这样做也会极大地复杂化将输入URL转换为命名路由所需的模式匹配。</target>
        </trans-unit>
        <trans-unit id="29425b5274cb55ea0877f8425586bc76b4a9c960" translate="yes" xml:space="preserve">
          <source>These may not be troubling questions for the simple components illustrated above. But many components have complex interactions with the DOM elements described in their templates, causing HTML to appear and disappear as the component state changes.</source>
          <target state="translated">对于上面说明的简单组件来说,这些问题可能并不麻烦。但许多组件与它们模板中描述的DOM元素有复杂的交互,导致HTML在组件状态变化时出现和消失。</target>
        </trans-unit>
        <trans-unit id="9280883bdf2743a9d36490d0dc135e8e9a512cc2" translate="yes" xml:space="preserve">
          <source>These methods access the injected timer component directly.</source>
          <target state="translated">这些方法直接访问注入的定时器组件。</target>
        </trans-unit>
        <trans-unit id="c22429bdeba56aae46b0da88ebbd1eba5c9f7eb4" translate="yes" xml:space="preserve">
          <source>These microsyntax mechanisms are also available to you when you write your own structural directives. For example, microsyntax in Angular allows you to write &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;. The following sections provide detailed information on constraints, grammar, and translation of microsyntax.</source>
          <target state="translated">当您编写自己的结构指令时，也可以使用这些微语法机制。例如，microsyntax在角允许编写 &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; 代替 &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; 。以下各节提供有关约束，语法和微语法翻译的详细信息。</target>
        </trans-unit>
        <trans-unit id="f75727d0e53686975b5f9fe934821fc5ef2a010f" translate="yes" xml:space="preserve">
          <source>These providers are insulated from changes to application providers with the same lookup token. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</source>
          <target state="translated">这些提供者与具有相同查找令牌的应用程序提供者的变化是绝缘的。当路由器在懒加载上下文中创建组件时,Angular更倾向于从这些提供者创建的服务实例,而不是应用根注入器的服务实例。</target>
        </trans-unit>
        <trans-unit id="24dcfb3b1d815ddbfc80be55b49ecf74b9b01fec" translate="yes" xml:space="preserve">
          <source>These services become available for injection into any component, directive, pipe or service which is a child of this injector.</source>
          <target state="translated">这些服务可以注入到任何组件、指令、管道或服务中,而这些组件、指令、管道或服务是这个注入器的子代。</target>
        </trans-unit>
        <trans-unit id="f9b0721484302592e733b6e272928008f313a2ba" translate="yes" xml:space="preserve">
          <source>These situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!</source>
          <target state="translated">这些情况应该是非常罕见的,必须特别小心,以避免产生跨站点脚本(XSS)安全漏洞!</target>
        </trans-unit>
        <trans-unit id="a17e78995649c771b926fa480048cee49ac14e32" translate="yes" xml:space="preserve">
          <source>These standard testing techniques are great for unit testing services in isolation.</source>
          <target state="translated">这些标准的测试技术对于单元测试服务的隔离是非常好的。</target>
        </trans-unit>
        <trans-unit id="471f11bedf623af5e51a7550b62738fa78f523b0" translate="yes" xml:space="preserve">
          <source>These status values are mutually exclusive, so a control cannot be both valid AND invalid or invalid AND disabled.</source>
          <target state="translated">这些状态值是相互排斥的,所以一个控制不能既有效又无效,或者既无效又禁用。</target>
        </trans-unit>
        <trans-unit id="05f39205bd9c10860f4038f8cb6f1f80b35432f1" translate="yes" xml:space="preserve">
          <source>These styles are post-processed so that each selector is augmented with &lt;code&gt;_nghost&lt;/code&gt; or &lt;code&gt;_ngcontent&lt;/code&gt; attribute selectors. These extra selectors enable the scoping rules described in this page.</source>
          <target state="translated">这些样式经过了后期处理，因此每个选择器都增加了 &lt;code&gt;_nghost&lt;/code&gt; 或 &lt;code&gt;_ngcontent&lt;/code&gt; 属性选择。这些额外的选择器启用此页面中描述的范围规则。</target>
        </trans-unit>
        <trans-unit id="59ed30c14d44ecaa6cf045e5333024f1a3034ced" translate="yes" xml:space="preserve">
          <source>These techniques are useful for small-scale demonstrations, but they quickly become verbose and clumsy when handling large amounts of user input. Two-way data binding is a more elegant and compact way to move values between data entry fields and model properties. The next page, &lt;code&gt;Forms&lt;/code&gt;, explains how to write two-way bindings with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">这些技术对于小规模的演示很有用，但是当处理大量用户输入时，它们很快变得冗长而笨拙。双向数据绑定是一种在数据输入字段和模型属性之间移动值的更优雅，更紧凑的方法。下一页 &lt;code&gt;Forms&lt;/code&gt; 解释了如何使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 编写双向绑定。</target>
        </trans-unit>
        <trans-unit id="53c3322dcb945c3c38eca1315cb0acd70af9667e" translate="yes" xml:space="preserve">
          <source>These tests could fail or timeout if the &lt;code&gt;HeroDetailService&lt;/code&gt; made its own XHR calls to a remote server. There might not be a remote server to call.</source>
          <target state="translated">如果 &lt;code&gt;HeroDetailService&lt;/code&gt; 对远程服务器进行自己的XHR调用，则这些测试可能会失败或超时。可能没有远程服务器要呼叫。</target>
        </trans-unit>
        <trans-unit id="ce3f767e6032b95a5a603034551bf8233c93f3f2" translate="yes" xml:space="preserve">
          <source>These three examples cover the need for an app with one level routing. The moment you add a child router, such as the crisis center, you create new link array possibilities.</source>
          <target state="translated">这三个例子涵盖了一个应用的一级路由的需求。当你添加一个子路由器,如危机中心的那一刻,你就创造了新的链接阵列的可能性。</target>
        </trans-unit>
        <trans-unit id="a858b580e5d1dabed41a7075d6de4bc56502ab07" translate="yes" xml:space="preserve">
          <source>These two properties have subtle differences, so switching to &lt;code&gt;textContent&lt;/code&gt; under the hood can be surprising to users. For this reason, we are deprecating this behavior. Going forward, users should explicitly bind to &lt;code&gt;textContent&lt;/code&gt; when using Domino.</source>
          <target state="translated">这两个属性之间存在细微的差异，因此在 &lt;code&gt;textContent&lt;/code&gt; 切换到textContent对于用户可能会感到惊讶。因此，我们不赞成使用此行为。展望未来，用户应明确绑定到 &lt;code&gt;textContent&lt;/code&gt; 在使用Domino时。</target>
        </trans-unit>
        <trans-unit id="db3d1e9b8dc7f1d6ba6781b5d1aeadad60243cbb" translate="yes" xml:space="preserve">
          <source>These two routes navigate to the crisis center child components, &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; and &lt;code&gt;CrisisDetailComponent&lt;/code&gt;, respectively.</source>
          <target state="translated">这两条路线分别导航到危机中心子组件 &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; 和 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce122e04c4a0e2a0a5f7ad63d194e4fea023293d" translate="yes" xml:space="preserve">
          <source>They are &lt;em&gt;not inherited&lt;/em&gt; by any components nested within the template nor by any content projected into the component.</source>
          <target state="translated">它们&lt;em&gt;不是继承的&lt;/em&gt;被模板中嵌套的任何组件所，也不会被投影到该组件中的任何内容所。</target>
        </trans-unit>
        <trans-unit id="16ada202f0f526edb509f857ec3037ca6a0f4115" translate="yes" xml:space="preserve">
          <source>They are displayed in named outlets.</source>
          <target state="translated">它们显示在命名的网点中。</target>
        </trans-unit>
        <trans-unit id="1b990f73ae62c0da4608dce9f08db78466a71820" translate="yes" xml:space="preserve">
          <source>They are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times. If an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</source>
          <target state="translated">它们是不可变的,这有一个很好的理由:应用程序在成功之前可能会多次重试一个请求,这意味着拦截器链可能会多次重新处理同一个请求。如果拦截器可以修改原始请求对象,那么重试操作将从修改后的请求开始,而不是原始请求。不变性保证了拦截者每次尝试都能看到相同的请求。</target>
        </trans-unit>
        <trans-unit id="0a5e8503c85509faa05b6e855e4edcff069456e9" translate="yes" xml:space="preserve">
          <source>They are independent of each other.</source>
          <target state="translated">它们是相互独立的。</target>
        </trans-unit>
        <trans-unit id="6afb78efe8cab856821000146ea4a61b8a334fa8" translate="yes" xml:space="preserve">
          <source>They are very similar with the only difference being:</source>
          <target state="translated">它们非常相似,唯一不同的是。</target>
        </trans-unit>
        <trans-unit id="cfd5fb1fb1b07124fb1aace027accf1df4c99e03" translate="yes" xml:space="preserve">
          <source>They follow a common pattern: a &lt;em&gt;parent&lt;/em&gt; component serves as a test rig for a &lt;em&gt;child&lt;/em&gt; component that illustrates one or more of the lifecycle hook methods.</source>
          <target state="translated">它们遵循一种常见的模式：&lt;em&gt;父&lt;/em&gt;组件充当&lt;em&gt;孩子&lt;/em&gt;的测试装备&lt;em&gt;&lt;/em&gt;组件组件说明了一种或多种生命周期挂钩方法。</target>
        </trans-unit>
        <trans-unit id="73b47ba16ec3ed20f7c0f09044645d6af1239f79" translate="yes" xml:space="preserve">
          <source>They might be imported by the root &lt;code&gt;AppModule&lt;/code&gt; of a small application that lacks routing.</source>
          <target state="translated">它们可能是由根 &lt;code&gt;AppModule&lt;/code&gt; 导入的缺少路由的小型应用程序。</target>
        </trans-unit>
        <trans-unit id="0bd9de91dc582fbf7daa5013098dfee5a9baa9df" translate="yes" xml:space="preserve">
          <source>They might. By default, the router re-uses a component instance when it re-navigates to the same component type without visiting a different component first. The route parameters could change each time.</source>
          <target state="translated">它们可能会。默认情况下,当路由器重新导航到同一组件类型而不先访问不同的组件时,会重新使用一个组件实例。路由参数可能每次都会改变。</target>
        </trans-unit>
        <trans-unit id="bcebc66109bd0b943ba34a0b34f724475faa7a20" translate="yes" xml:space="preserve">
          <source>They must return a Promise or an Observable,</source>
          <target state="translated">他们必须返回一个承诺或一个可观察的。</target>
        </trans-unit>
        <trans-unit id="6a1d3b6796b2728eca30d7dc142c330459e6d1b9" translate="yes" xml:space="preserve">
          <source>They typically have a top component that acts as the feature root and private, supporting sub-components descend from it.</source>
          <target state="translated">它们通常有一个顶层组件,作为特征根和私有的,支持子组件从它的后裔。</target>
        </trans-unit>
        <trans-unit id="f8026517cd2a6484e993db7a3cd1d56c8845b6ed" translate="yes" xml:space="preserve">
          <source>They work in combination with other routes.</source>
          <target state="translated">它们与其他路线结合使用。</target>
        </trans-unit>
        <trans-unit id="3d3f6d4959980160a0fdb422743d1ab226d66d6a" translate="yes" xml:space="preserve">
          <source>They'll do that with the RxJS &lt;code&gt;tap()&lt;/code&gt; operator, which looks at the observable values, does something with those values, and passes them along. The &lt;code&gt;tap()&lt;/code&gt; call back doesn't touch the values themselves.</source>
          <target state="translated">他们将使用RxJS &lt;code&gt;tap()&lt;/code&gt; 运算符执行此操作，该运算符查看可观察的值，对这些值进行处理，然后将其传递。该 &lt;code&gt;tap()&lt;/code&gt; 调用回不接触值本身。</target>
        </trans-unit>
        <trans-unit id="6764cd39877eeca69ad10d4286668ee2c1b61792" translate="yes" xml:space="preserve">
          <source>Things go wrong, especially when you're getting data from a remote server. The &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; method should catch errors and do something appropriate.</source>
          <target state="translated">事情出了问题，尤其是当您从远程服务器获取数据时。该 &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; 方法应该找出错误，并做一些适当的。</target>
        </trans-unit>
        <trans-unit id="bba021091f297904597c2bb05d6e5e449bd86e0a" translate="yes" xml:space="preserve">
          <source>Things to keep in mind, when downgrading multiple modules:</source>
          <target state="translated">降级多个模块时,需要注意的事项。</target>
        </trans-unit>
        <trans-unit id="c7b69adf603ad8f6d0e880b3effde6a1bd75ec06" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; example:</source>
          <target state="translated">此 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 例如：</target>
        </trans-unit>
        <trans-unit id="258e5fd8f98e77a1547ddec9b070f084c89034c4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;MissionService&lt;/code&gt; connects the &lt;code&gt;MissionControlComponent&lt;/code&gt; to multiple &lt;code&gt;AstronautComponent&lt;/code&gt; children.</source>
          <target state="translated">此 &lt;code&gt;MissionService&lt;/code&gt; 将 &lt;code&gt;MissionControlComponent&lt;/code&gt; 连接到多个 &lt;code&gt;AstronautComponent&lt;/code&gt; 子代。</target>
        </trans-unit>
        <trans-unit id="59e007abb53ac82deffb3014ce0885f777370e0d" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;VersionChildComponent&lt;/code&gt; detects changes to the &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; input properties and composes a log message reporting these changes:</source>
          <target state="translated">此 &lt;code&gt;VersionChildComponent&lt;/code&gt; 检测 &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; 输入属性的更改，并编写一条日志消息，报告这些更改：</target>
        </trans-unit>
        <trans-unit id="fbe66defed731afe2b351869493bed1b439539c0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; syntax can only &lt;em&gt;set&lt;/em&gt; a data-bound property. If you need to do something more, you can write the expanded form; for example, the following changes the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; value to uppercase:</source>
          <target state="translated">此 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 语法只能&lt;em&gt;设置&lt;/em&gt;数据绑定属性。如果您需要做更多的事情，可以编写扩展表格。例如，以下将 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 值更改为大写：</target>
        </trans-unit>
        <trans-unit id="d891bfbbc30a830ed00d349d04e68d42b5ea2457" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;bootstrap&lt;/code&gt; method is a direct replacement (takes same arguments) for AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/a&gt; method. Unlike AngularJS, this bootstrap is asynchronous.</source>
          <target state="translated">此 &lt;code&gt;bootstrap&lt;/code&gt; 方法是AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;bootstrap&lt;/code&gt; &lt;/a&gt;程序方法的直接替换（采用相同的参数）。与AngularJS不同，此引导是异步的。</target>
        </trans-unit>
        <trans-unit id="a81bbff7f4c2b4f66516ab105c5f2da6f8908842" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;getHeroes()&lt;/code&gt; returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th).</source>
          <target state="translated">这个 &lt;code&gt;getHeroes()&lt;/code&gt; 返回位于位置1和5处的英雄切片列表，仅返回四个顶级英雄（第2，第3，第4和第5）。</target>
        </trans-unit>
        <trans-unit id="9b89a86d9e9910b9545a4d39e96b18d0d3af5a5b" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;outlets&lt;/code&gt; object within an outer object was completely unnecessary when there was only one route and one &lt;em&gt;unnamed&lt;/em&gt; outlet to think about.</source>
          <target state="translated">当只有一条路线和一个&lt;em&gt;未命名的&lt;/em&gt;出口要考虑时，外部对象内的此 &lt;code&gt;outlets&lt;/code&gt; 对象是完全不必要的。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f20e0dbf005f61cffb8c3dd9af39a375a30b434" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial provides an introduction to the fundamentals of Angular. It shows you how to set up your local development environment and develop an app using the &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI tool&lt;/a&gt;.</source>
          <target state="translated">本&lt;em&gt;《英雄之旅》&lt;/em&gt;教程介绍了Angular的基础知识。它向您展示了如何使用&lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI工具&lt;/a&gt;设置本地开发环境以及开发应用程序。</target>
        </trans-unit>
        <trans-unit id="f09b226e4f2c4eb0d926e572d4a75f6880da5490" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;no-op&lt;/em&gt; interceptor simply calls &lt;code&gt;next.handle()&lt;/code&gt; with the original request and returns the observable without doing a thing.</source>
          <target state="translated">此&lt;em&gt;无操作&lt;/em&gt;拦截器仅使用原始请求简单地调用 &lt;code&gt;next.handle()&lt;/code&gt; ，而无需执行&lt;em&gt;任何操作&lt;/em&gt;即可返回可观察对象。</target>
        </trans-unit>
        <trans-unit id="50210317fa118bab69579c2022e5d9a816190d39" translate="yes" xml:space="preserve">
          <source>This API is the recommended way to construct injectors in performance-sensitive parts.</source>
          <target state="translated">该API是在性能敏感部件中构建注射器的推荐方式。</target>
        </trans-unit>
        <trans-unit id="469f1d1eec641289327d7f725b8bc80d83c5b953" translate="yes" xml:space="preserve">
          <source>This Style Guide is for anyone who contributes to the Angular documentation (this site). These guidelines should be followed by all authors. Deviations must be approved by a documentation editor.</source>
          <target state="translated">本风格指南适用于任何为Angular文档(本网站)做出贡献的人。所有作者都应该遵守这些指南。偏差必须得到文档编辑的批准。</target>
        </trans-unit>
        <trans-unit id="3415857a9e6030331c79e1e76604015a5df5e041" translate="yes" xml:space="preserve">
          <source>This UI uses the HTML unordered list with &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags. The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is the Angular &quot;repeater&quot; directive. It marks that &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element (and its children) as the &quot;repeater template&quot;:</source>
          <target state="translated">此UI使用带有 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 标记的HTML无序列表。的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素是角&amp;ldquo;中继器&amp;rdquo;指令。它表示 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素（及其子元素）为&amp;ldquo;中继器模板&amp;rdquo;：</target>
        </trans-unit>
        <trans-unit id="2b4ebc81415f90795ab79ed8a5b2cd8f2bb7595a" translate="yes" xml:space="preserve">
          <source>This XML element represents the translation of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; greeting tag that you marked with the &lt;code&gt;i18n&lt;/code&gt; attribute earlier in this guide.</source>
          <target state="translated">此XML元素表示您在本指南前面使用 &lt;code&gt;i18n&lt;/code&gt; 属性标记的 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 问候标签的翻译。</target>
        </trans-unit>
        <trans-unit id="48298b5a19ab51f248711bfb5fa88cc617b0670f" translate="yes" xml:space="preserve">
          <source>This allows the Angular Language Service to provide diagnostics and completions in &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">这允许Angular Language Service在 &lt;code&gt;.ts&lt;/code&gt; 文件中提供诊断和完成。</target>
        </trans-unit>
        <trans-unit id="98f7af4e84f120f59a1303fcf4a9447a45a5d38a" translate="yes" xml:space="preserve">
          <source>This allows the compiler to generate a reference to &lt;code&gt;ɵ0&lt;/code&gt; in the factory without having to know what the value of &lt;code&gt;ɵ0&lt;/code&gt; contains.</source>
          <target state="translated">这样，编译器可以在出厂时生成对 &lt;code&gt;ɵ0&lt;/code&gt; 的引用，而不必知道 &lt;code&gt;ɵ0&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="24015a5bb2d8b1f8210c5acd6f640d4dc6d483b2" translate="yes" xml:space="preserve">
          <source>This allows us to add new states without having to include separate transitions for each one.</source>
          <target state="translated">这使得我们可以添加新的状态,而不必为每个状态包含单独的过渡。</target>
        </trans-unit>
        <trans-unit id="cbe0ef929bc0631d02b1205466d152dddaeabe4f" translate="yes" xml:space="preserve">
          <source>This allows you to set appropriate styles for individual components that won&amp;rsquo;t leak into other parts of the application.</source>
          <target state="translated">这使您可以为不会泄漏到应用程序其他部分的单个组件设置适当的样式。</target>
        </trans-unit>
        <trans-unit id="fa04bc183c4a35ffd59532acaddb459c40802b8c" translate="yes" xml:space="preserve">
          <source>This always means importing &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/common&lt;/code&gt; for access to the Angular directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt;. You can import it directly or from another NgModule that &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;re-exports&lt;/a&gt; it.</source>
          <target state="translated">这总是意味着从 &lt;code&gt;@angular/common&lt;/code&gt; 导入 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 来访问Angular指令，例如 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;NgFor&lt;/code&gt; 。您可以直接导入它，也可以从另一个NgModule &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;重新&lt;/a&gt;导入它。</target>
        </trans-unit>
        <trans-unit id="e4af21eecd43fe210746ff3a4c62a38f49ffe7f9" translate="yes" xml:space="preserve">
          <source>This app has many of the features you'd expect to find in a data-driven application. It acquires and displays a list of heroes, edits a selected hero's detail, and navigates among different views of heroic data.</source>
          <target state="translated">这款应用具有许多你期望在数据驱动的应用程序中找到的功能。它获取并显示英雄列表,编辑选定英雄的详细信息,并在英雄数据的不同视图中导航。</target>
        </trans-unit>
        <trans-unit id="f17ea08bfc5149a70f6152907b2632dc2a63714a" translate="yes" xml:space="preserve">
          <source>This app provides &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the app's root injector, as a side-effect of importing the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;. You should provide interceptors in &lt;code&gt;AppModule&lt;/code&gt; as well.</source>
          <target state="translated">此应用程序在其根注入器中提供 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; ，作为在 &lt;code&gt;AppModule&lt;/code&gt; 中导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 的副作用。您还应该在 &lt;code&gt;AppModule&lt;/code&gt; 中提供拦截器。</target>
        </trans-unit>
        <trans-unit id="9010af53dce21e99cd1b98b6918ed08a568edceb" translate="yes" xml:space="preserve">
          <source>This app uses more terse &quot;variable assignment&quot; style simply for brevity.</source>
          <target state="translated">这款应用使用了更为简洁的 &quot;变量赋值 &quot;风格,只是为了简洁。</target>
        </trans-unit>
        <trans-unit id="e2dd29b7095751503adbe18ae104950880b8fed2" translate="yes" xml:space="preserve">
          <source>This application deletes a hero with the &lt;code&gt;HttpClient.delete&lt;/code&gt; method by passing the hero's id in the request URL.</source>
          <target state="translated">此应用程序通过在请求URL中传递英雄的ID来使用 &lt;code&gt;HttpClient.delete&lt;/code&gt; 方法删除英雄。</target>
        </trans-unit>
        <trans-unit id="448875963d3ea5d9faf62ce4ea4e238a24bd4684" translate="yes" xml:space="preserve">
          <source>This approach makes it easier to re-use the component somewhere else and deliver the component's intended appearance even if the global styles are different.</source>
          <target state="translated">这种方法可以更容易地在其他地方重复使用组件,即使全局风格不同,也能提供组件的预期外观。</target>
        </trans-unit>
        <trans-unit id="736cdde48162e97e7bae316bb32e7680eb170f89" translate="yes" xml:space="preserve">
          <source>This approach works for prototyping, but is not robust or maintainable. As soon as you try to test this component or get heroes from a remote server, you have to change the implementation of &lt;code&gt;HeroesListComponent&lt;/code&gt; and replace every use of the &lt;code&gt;HEROES&lt;/code&gt; mock data.</source>
          <target state="translated">此方法适用于原型制作，但不可靠或无法维护。一旦尝试测试此组件或从远程服务器获取英雄，就必须更改 &lt;code&gt;HeroesListComponent&lt;/code&gt; 的实现并替换对 &lt;code&gt;HEROES&lt;/code&gt; 模拟数据的所有使用。</target>
        </trans-unit>
        <trans-unit id="d2207c94db1f3c39ac92627d2d416a732485be1c" translate="yes" xml:space="preserve">
          <source>This array lacks a route parameter because you had no reason to send information to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">该数组缺少route参数，因为您没有理由将信息发送到 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9b9947c5ef101e16618174c23e01f209fae9d4e" translate="yes" xml:space="preserve">
          <source>This article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.</source>
          <target state="translated">本文介绍了如何配置你的项目以运行Circle CI和Travis CI,还更新了你的测试配置,以便能够在Chrome浏览器中的任一环境中运行测试。</target>
        </trans-unit>
        <trans-unit id="4e02ae1fdc78e80303d48713d37550a281676bcb" translate="yes" xml:space="preserve">
          <source>This asynchronous approach &lt;em&gt;will work&lt;/em&gt; when the &lt;code&gt;HeroService&lt;/code&gt; requests heroes from the server.</source>
          <target state="translated">当 &lt;code&gt;HeroService&lt;/code&gt; 向服务器请求英雄时，此异步方法&lt;em&gt;将起作用&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9e58e666a6e882960d6b1daf78543b6547ba94f0" translate="yes" xml:space="preserve">
          <source>This attack is only successful if the returned JSON is executable as JavaScript. Servers can prevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the well-known string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;.</source>
          <target state="translated">仅当返回的JSON可作为JavaScript可执行时，此攻击才会成功。服务器可以通过使用众所周知的字符串 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; 为所有JSON响应加前缀，使它们成为不可执行的约定来防止攻击。</target>
        </trans-unit>
        <trans-unit id="651be0a8100915d5529b17ae73b92bbe7b153f12" translate="yes" xml:space="preserve">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also defines an empty &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method, to prevent the &lt;a href=&quot;../api/core/compiler&quot;&gt;Compiler&lt;/a&gt; from returning errors. This is necessary because the module will not have a &lt;code&gt;bootstrap&lt;/code&gt; declaration on its &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">这个最小的 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 导入了 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ，这是每个基于Angular浏览器的应用程序都必须具有的模块。它还定义了一个空的 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; 方法，以防止&lt;a href=&quot;../api/core/compiler&quot;&gt;编译器&lt;/a&gt;返回错误。这是必需的，因为该模块在其 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器上将没有 &lt;code&gt;bootstrap&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="f56abc002d8d199ab12c7a00e8eceb4cb5324712" translate="yes" xml:space="preserve">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also imports &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt;, which exports providers that will be used for upgrading and downgrading services and components.</source>
          <target state="translated">这个最小的 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 导入了 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ，这是每个基于Angular浏览器的应用程序都必须具有的模块。它还从 &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;导入 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; ，后者导出将用于升级和降级服务和组件的提供程序。</target>
        </trans-unit>
        <trans-unit id="4182fbf9bcd985eb43d694af8b1af19720683102" translate="yes" xml:space="preserve">
          <source>This behavior necessarily changes when you use lazy loading. Lazy loading is when you load modules only when you need them; for example, when routing. They aren&amp;rsquo;t loaded right away like with eagerly loaded modules. This means that any services listed in their provider arrays aren&amp;rsquo;t available because the root injector doesn&amp;rsquo;t know about these modules.</source>
          <target state="translated">当您使用延迟加载时，此行为必然会更改。延迟加载是指仅在需要时才加载模块。例如，在路由时。它们不会像热切加载的模块那样立即加载。这意味着它们的提供程序数组中列出的任何服务都不可用，因为根注入器不了解这些模块。</target>
        </trans-unit>
        <trans-unit id="35a35e5d7d8bb3b5d8a866028a9f757d0c2abbb7" translate="yes" xml:space="preserve">
          <source>This cadence of releases gives you access to new features as soon as they are ready, while maintaining the stability and reliability of the platform for production users.</source>
          <target state="translated">这种发布节奏使您可以在新功能准备好后立即使用,同时为生产用户保持平台的稳定性和可靠性。</target>
        </trans-unit>
        <trans-unit id="de8dbaffe2662ccb066fdee3c1966e668ead9335" translate="yes" xml:space="preserve">
          <source>This can be a problem if you have to change your app's location. If you setup a redirect from the old location (for example &lt;code&gt;example.com&lt;/code&gt;) to the new location (for example &lt;code&gt;www.example.com&lt;/code&gt;) the worker will stop working. Also, the redirect won't even trigger for users who are loading the site entirely from Service Worker. The old worker (registered at &lt;code&gt;example.com&lt;/code&gt;) tries to update and sends requests to the old location &lt;code&gt;example.com&lt;/code&gt; which get redirected to the new location &lt;code&gt;www.example.com&lt;/code&gt; and create the error &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">如果您必须更改应用程序的位置，则可能会出现问题。如果您设置了从旧位置（例如 &lt;code&gt;example.com&lt;/code&gt; ）到新位置（例如 &lt;code&gt;www.example.com&lt;/code&gt; ）的重定向，工作人员将停止工作。同样，对于完全从Service Worker加载网站的用户，重定向甚至不会触发。老工人（在注册 &lt;code&gt;example.com&lt;/code&gt; ）尝试更新并发送请求到原来的位置 &lt;code&gt;example.com&lt;/code&gt; 其重定向到新的位置 &lt;code&gt;www.example.com&lt;/code&gt; 和创建错误 &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a25a7112462a90a222ddd01185604490e952693" translate="yes" xml:space="preserve">
          <source>This can be used to resume testing after events have triggered asynchronous activity or asynchronous change detection.</source>
          <target state="translated">这可以用来在事件触发异步活动或异步变化检测后恢复测试。</target>
        </trans-unit>
        <trans-unit id="934112ccd1aa2b6915e125429be40b8b0e576f0a" translate="yes" xml:space="preserve">
          <source>This can be useful when scanning through code and looking for observable values. Also, if you want a property to store the most recent value from an observable, it can be convenient to simply use the same name with or without the &amp;ldquo;$&amp;rdquo;.</source>
          <target state="translated">这在扫描代码并查找可观察的值时很有用。另外，如果您希望属性存储可观察到的最新值，则可以方便地使用带有或不带有&amp;ldquo; $&amp;rdquo;的相同名称。</target>
        </trans-unit>
        <trans-unit id="2b2a566810683bdb154f2660dc33dfd48367534d" translate="yes" xml:space="preserve">
          <source>This can happen if you refer to an ambient type. For example, the &lt;code&gt;Window&lt;/code&gt; type is an ambient type declared in the global &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">如果您引用环境类型，可能会发生这种情况。例如，&amp;ldquo; &lt;code&gt;Window&lt;/code&gt; 类型是在全局 &lt;code&gt;.d.ts&lt;/code&gt; 文件中声明的环境类型。</target>
        </trans-unit>
        <trans-unit id="6476281277699a0797217af1c8c95aadca9fed5f" translate="yes" xml:space="preserve">
          <source>This can happen if you use a number as a property name as in the following example.</source>
          <target state="translated">如果你使用一个数字作为属性名,就会发生这种情况,比如下面的例子。</target>
        </trans-unit>
        <trans-unit id="3b41585be32bdaba39097b77ac3bb57808c72252" translate="yes" xml:space="preserve">
          <source>This can happen when a &lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;route guard&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">当&lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;路由后卫&lt;/a&gt;返回 &lt;code&gt;false&lt;/code&gt; 或通过返回 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 发起重定向时，可能会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="161acaf31fb43a0787ee8fbb9353bde452188f86" translate="yes" xml:space="preserve">
          <source>This causes the CLI to create a folder called &lt;code&gt;customer-dashboard&lt;/code&gt; with a file inside called &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; with the following contents:</source>
          <target state="translated">这将导致CLI创建一个文件夹，名为 &lt;code&gt;customer-dashboard&lt;/code&gt; 与所谓的内部文件 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; 具有以下内容：</target>
        </trans-unit>
        <trans-unit id="5019a44a75c49b88537ac9e8329f1c2eab2831e5" translate="yes" xml:space="preserve">
          <source>This class is an &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">此类是 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ，您可以导入该类以提供AngularJS核心服务，并具有用于引导混合升级应用程序的实例方法。</target>
        </trans-unit>
        <trans-unit id="025bc612549c84721126511ec42b2a6d0ff1d56c" translate="yes" xml:space="preserve">
          <source>This class is immutable; all mutation operations return a new instance.</source>
          <target state="translated">这个类是不可变的,所有的突变操作都会返回一个新的实例。</target>
        </trans-unit>
        <trans-unit id="d3d60295749b3a3a0404d6398d78e18e444489d5" translate="yes" xml:space="preserve">
          <source>This class is only used internally in the &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">此类仅在 &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 内部使用。</target>
        </trans-unit>
        <trans-unit id="801d9cace214c9cf01792d4f29b30f5848a25da1" translate="yes" xml:space="preserve">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此类不应由应用程序开发人员直接使用。而是使用&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1d6a70007738552506319e31c6ae61765926844" translate="yes" xml:space="preserve">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此类不应由应用程序开发人员直接使用。而是使用&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5c998372f08c1a101f67cf6fc6453dc480a13a2" translate="yes" xml:space="preserve">
          <source>This code inspects certain &lt;em&gt;values of interest&lt;/em&gt;, capturing and comparing their current state against previous values. It writes a special message to the log when there are no substantive changes to the &lt;code&gt;hero&lt;/code&gt; or the &lt;code&gt;power&lt;/code&gt; so you can see how often &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; is called. The results are illuminating:</source>
          <target state="translated">此代码检查&lt;em&gt;感兴趣的&lt;/em&gt;某些&lt;em&gt;值&lt;/em&gt;，捕获它们的当前状态并将其与以前的值进行比较。当 &lt;code&gt;hero&lt;/code&gt; 或 &lt;code&gt;power&lt;/code&gt; 没有实质性变化时，它会在日志中写入一条特殊消息，以便您查看调用 &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 的频率。结果很有启发：</target>
        </trans-unit>
        <trans-unit id="db010d4e9e3ffb1514bc2b0d8a75b9801342ba2f" translate="yes" xml:space="preserve">
          <source>This code repeats the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tag for each power in the list of powers. The &lt;code&gt;pow&lt;/code&gt; template input variable is a different power in each iteration; you display its name using the interpolation syntax.</source>
          <target state="translated">此代码对电源列表中的每个电源重复 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 标签。的 &lt;code&gt;pow&lt;/code&gt; 模板输入变量是在每次迭代中不同的功率; 您可以使用插值语法显示其名称。</target>
        </trans-unit>
        <trans-unit id="75b5c5fa1c91023ea749d4aa233f6b4929e1dfb1" translate="yes" xml:space="preserve">
          <source>This code sets the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;code&gt;value&lt;/code&gt; property by binding to the &lt;code&gt;name&lt;/code&gt; property. To listen for changes to the value, the code binds to the &lt;code&gt;input&lt;/code&gt; event of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. When the user makes changes, the &lt;code&gt;input&lt;/code&gt; event is raised, and the binding executes the statement within a context that includes the DOM event object, &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="translated">此代码通过绑定到 &lt;code&gt;name&lt;/code&gt; 属性来设置 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; 属性。要侦听该值的更改，代码将绑定到 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素的 &lt;code&gt;input&lt;/code&gt; 事件。当用户进行更改时，将引发 &lt;code&gt;input&lt;/code&gt; 事件，并且绑定将在包含DOM事件对象 &lt;code&gt;$event&lt;/code&gt; 的上下文中执行该语句。</target>
        </trans-unit>
        <trans-unit id="077f99384ba94951a54310fe9d28e905bc2e0a9b" translate="yes" xml:space="preserve">
          <source>This code uses only one &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;, so only one subscription is created. The conditional statement stores the result of &lt;code&gt;userStream|async&lt;/code&gt; in the local variable &lt;code&gt;user&lt;/code&gt;. You can then bind the local &lt;code&gt;user&lt;/code&gt; repeatedly.</source>
          <target state="translated">此代码仅使用一个 &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; ，因此仅创建一个订阅。条件语句将 &lt;code&gt;userStream|async&lt;/code&gt; 的结果存储在本地变量 &lt;code&gt;user&lt;/code&gt; 中。然后，您可以重复绑定本地 &lt;code&gt;user&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13648ab24db66abd7c6828bea92fd0f6dff2d7ba" translate="yes" xml:space="preserve">
          <source>This command creates the following &lt;code&gt;UserService&lt;/code&gt; skeleton:</source>
          <target state="translated">此命令创建以下 &lt;code&gt;UserService&lt;/code&gt; 框架：</target>
        </trans-unit>
        <trans-unit id="53ca835c29b278849f8cc8fdbc5ec1ec43128a05" translate="yes" xml:space="preserve">
          <source>This command updates both &lt;code&gt;@angular/material&lt;/code&gt; and its dependency &lt;code&gt;@angular/cdk&lt;/code&gt; in your workspace's &lt;code&gt;package.json&lt;/code&gt;. If either package contains an update schematic that covers migration from the existing version to a new version, the command runs that schematic on your workspace.</source>
          <target state="translated">此命令在工作区的 &lt;code&gt;package.json&lt;/code&gt; 中更新 &lt;code&gt;@angular/material&lt;/code&gt; 及其依赖项 &lt;code&gt;@angular/cdk&lt;/code&gt; 。如果这两个软件包都包含涵盖从现有版本到新版本的迁移的更新原理图，则该命令将在您的工作空间上运行该原理图。</target>
        </trans-unit>
        <trans-unit id="5f08f688b42cedaf1c2687380db97e840fa25cee" translate="yes" xml:space="preserve">
          <source>This completes the cross validation example. We managed to:</source>
          <target state="translated">这就完成了交叉验证的例子。我们设法:</target>
        </trans-unit>
        <trans-unit id="5c82d5954347561c2d21641e18971743651dd806" translate="yes" xml:space="preserve">
          <source>This component and its tree of child components receive &lt;code&gt;DateLoggerService&lt;/code&gt; instance. Components outside the tree continue to receive the original &lt;code&gt;LoggerService&lt;/code&gt; instance.</source>
          <target state="translated">该组件及其子组件树接收 &lt;code&gt;DateLoggerService&lt;/code&gt; 实例。树外的组件继续接收原始 &lt;code&gt;LoggerService&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="597e9233caedd83ac990f5386a4ce276f54df4c0" translate="yes" xml:space="preserve">
          <source>This component class has no dependencies. To test a service with no dependencies, you create it with &lt;code&gt;new&lt;/code&gt;, poke at its API, and assert expectations on its public state. Do the same with the component class.</source>
          <target state="translated">该组件类没有依赖关系。要测试不依赖项的服务，请使用 &lt;code&gt;new&lt;/code&gt; 创建它，在其API上戳一下，并声明其公共状态的期望值。对组件类执行相同的操作。</target>
        </trans-unit>
        <trans-unit id="065a8c2a12fca59785e66b9536ad7a4d7503a70d" translate="yes" xml:space="preserve">
          <source>This component instance.</source>
          <target state="translated">这个组件实例。</target>
        </trans-unit>
        <trans-unit id="a07464de42a69a73871d1c32b4cddf78f4a39cff" translate="yes" xml:space="preserve">
          <source>This component's &lt;code&gt;doSomething()&lt;/code&gt; method update's the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately. There's no &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;need to wait&lt;/a&gt;.</source>
          <target state="translated">该组件的 &lt;code&gt;doSomething()&lt;/code&gt; 方法立即更新该组件的数据绑定 &lt;code&gt;comment&lt;/code&gt; 属性。有没有&lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;需要等待&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8831291497a6d0587b26b1c8ca5ca8dbd14f9441" translate="yes" xml:space="preserve">
          <source>This component's injector lookup tokens. Includes the component itself plus the tokens that the component lists in its &lt;code&gt;providers&lt;/code&gt; metadata.</source>
          <target state="translated">该组件的注射器查询令牌。包括组件本身以及组件在其 &lt;code&gt;providers&lt;/code&gt; 元数据中列出的令牌。</target>
        </trans-unit>
        <trans-unit id="7b0506327a430462426c6e68b6e09fd639e04c8d" translate="yes" xml:space="preserve">
          <source>This concludes the &quot;Tour of Heroes&quot; tutorial. You're ready to learn more about Angular development in the fundamentals section, starting with the &lt;a href=&quot;../guide/architecture&quot;&gt;Architecture&lt;/a&gt; guide.</source>
          <target state="translated">到此结束&amp;ldquo;英雄之旅&amp;rdquo;教程。您可以从基础&lt;a href=&quot;../guide/architecture&quot;&gt;架构&lt;/a&gt;指南开始，在基础知识部分中学习有关Angular开发的更多信息。</target>
        </trans-unit>
        <trans-unit id="e37d0d91df8ad47c0dbbb5e123254e61fce1c600" translate="yes" xml:space="preserve">
          <source>This configuration caches &lt;code&gt;node_modules/&lt;/code&gt; and uses &lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt;&lt;code&gt;npm run&lt;/code&gt;&lt;/a&gt; to run CLI commands, because &lt;code&gt;@angular/cli&lt;/code&gt; is not installed globally. The double dash (&lt;code&gt;--&lt;/code&gt;) is needed to pass arguments into the &lt;code&gt;npm&lt;/code&gt; script.</source>
          <target state="translated">此配置缓存 &lt;code&gt;node_modules/&lt;/code&gt; 并使用&lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt; &lt;code&gt;npm run&lt;/code&gt; &lt;/a&gt;运行CLI命令，因为 &lt;code&gt;@angular/cli&lt;/code&gt; 未全局安装。需要将双破折号（ &lt;code&gt;--&lt;/code&gt; ）传递给 &lt;code&gt;npm&lt;/code&gt; 脚本。</target>
        </trans-unit>
        <trans-unit id="40d0adebce1666f54fd687822290b1370ce51244" translate="yes" xml:space="preserve">
          <source>This cookbook contains recipes for common component communication scenarios in which two or more components share information.</source>
          <target state="translated">这本食谱包含了两个或多个组件共享信息的常见组件通信场景的食谱。</target>
        </trans-unit>
        <trans-unit id="a322972c7d99a3ec23cfc786253fdee6e876e02e" translate="yes" xml:space="preserve">
          <source>This cookbook describes the steps required to set up and use Angular app files in Visual Studio 2015 within an ASP.NET 4.x project.</source>
          <target state="translated">本烹饪书介绍了在Visual Studio 2015中在ASP.NET 4.x项目中设置和使用Angular应用文件所需的步骤。</target>
        </trans-unit>
        <trans-unit id="81fab89603358b3015fbab03f643f5619e9e7e16" translate="yes" xml:space="preserve">
          <source>This cookbook shows you how to use &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; to add components dynamically.</source>
          <target state="translated">本食谱向您展示如何使用 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; 动态添加组件。</target>
        </trans-unit>
        <trans-unit id="e813c2193e41174a6e571245c4cd3c17e5e9558e" translate="yes" xml:space="preserve">
          <source>This cookbook shows you how to use &lt;code&gt;formGroup&lt;/code&gt; to dynamically render a simple form with different control types and validation. It's a primitive start. It might evolve to support a much richer variety of questions, more graceful rendering, and superior user experience. All such greatness has humble beginnings.</source>
          <target state="translated">本食谱向您展示如何使用 &lt;code&gt;formGroup&lt;/code&gt; 动态呈现具有不同控件类型和验证的简单表单。这是一个原始的开始。它可能会演变为支持更多种问题，更优美的呈现方式以及出众的用户体验。所有这些伟大之处都始于卑微。</target>
        </trans-unit>
        <trans-unit id="d822107036c9c9bdc81f05621421ed35206b48fe" translate="yes" xml:space="preserve">
          <source>This cookbook uses &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;.</source>
          <target state="translated">本菜谱使用&lt;a href=&quot;reactive-forms&quot;&gt;反应形式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d23601ec63a90736809116d022f4fadccabb0fbd" translate="yes" xml:space="preserve">
          <source>This cookbook uses the &lt;code&gt;Empty&lt;/code&gt; template with no added folders, no authentication, and no hosting. Pick the template and options appropriate for your project.</source>
          <target state="translated">本菜谱使用 &lt;code&gt;Empty&lt;/code&gt; 模板，没有添加文件夹，没有身份验证，也没有托管。选择适合您的项目的模板和选项。</target>
        </trans-unit>
        <trans-unit id="a651647f94c034ce66b15f4ab627c4ac2e28535c" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;customers&lt;/code&gt; folder with the new lazy-loadable module &lt;code&gt;CustomersModule&lt;/code&gt; defined in the file &lt;code&gt;customers.module.ts&lt;/code&gt;. The command automatically adds the &lt;code&gt;CustomerComponent&lt;/code&gt; to the new feature module.</source>
          <target state="translated">这将创建一个 &lt;code&gt;customers&lt;/code&gt; 文件夹与新懒人可装载模块 &lt;code&gt;CustomersModule&lt;/code&gt; 在文件中定义 &lt;code&gt;customers.module.ts&lt;/code&gt; 。该命令会自动将 &lt;code&gt;CustomerComponent&lt;/code&gt; 添加到新功能模块。</target>
        </trans-unit>
        <trans-unit id="14b67ee4f93cd53fc641ba3366b0aa1e81714ab4" translate="yes" xml:space="preserve">
          <source>This creates a new folder called &lt;code&gt;orders&lt;/code&gt; containing an &lt;code&gt;OrdersModule&lt;/code&gt; and &lt;code&gt;OrdersRoutingModule&lt;/code&gt;, along with the new &lt;code&gt;OrderComponent&lt;/code&gt; source files. The &lt;code&gt;order-list&lt;/code&gt; route is added to the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array in &lt;code&gt;app-routing.module.ts&lt;/code&gt;, using the lazy-loading syntax.</source>
          <target state="translated">这将创建一个名为新文件夹 &lt;code&gt;orders&lt;/code&gt; 包含 &lt;code&gt;OrdersModule&lt;/code&gt; 和 &lt;code&gt;OrdersRoutingModule&lt;/code&gt; ，与新一起 &lt;code&gt;OrderComponent&lt;/code&gt; 源文件。使用延迟加载语法，将 &lt;code&gt;order-list&lt;/code&gt; 路由添加到 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 中的 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 数组中。</target>
        </trans-unit>
        <trans-unit id="a0adbda48788d27b45342d5c21c7e2786033726c" translate="yes" xml:space="preserve">
          <source>This creates a separate file named &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; to store the NgModule's routes. The file includes an empty &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; object that you can fill with routes to different components and NgModules.</source>
          <target state="translated">这将创建一个名为 &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; 的单独文件来存储NgModule的路由。该文件包含一个空的 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 对象，您可以用它填充到不同组件和NgModules的路由。</target>
        </trans-unit>
        <trans-unit id="1e0fcef7f7df8d4e453466c52facdaf940fe0d0a" translate="yes" xml:space="preserve">
          <source>This creates an app called &lt;code&gt;customer-app&lt;/code&gt; and the &lt;code&gt;--routing&lt;/code&gt; flag generates a file called &lt;code&gt;app-routing.module.ts&lt;/code&gt;, which is one of the files you need for setting up lazy loading for your feature module. Navigate into the project by issuing the command &lt;code&gt;cd customer-app&lt;/code&gt;.</source>
          <target state="translated">这将创建一个名为 &lt;code&gt;customer-app&lt;/code&gt; 的应用程序，而 &lt;code&gt;--routing&lt;/code&gt; 标志将生成一个名为 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 的文件，该文件是为功能模块设置延迟加载所需的文件之一。发出命令 &lt;code&gt;cd customer-app&lt;/code&gt; 进入项目。</target>
        </trans-unit>
        <trans-unit id="0198faa84961169c4d04809b0185acf9e3ac22b4" translate="yes" xml:space="preserve">
          <source>This creates the &lt;code&gt;projects/my-lib&lt;/code&gt; folder in your workspace, which contains a component and a service inside an NgModule. The workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is updated with a project of type 'library'.</source>
          <target state="translated">这将在您的工作空间中创建 &lt;code&gt;projects/my-lib&lt;/code&gt; 文件夹，该文件夹在NgModule中包含一个组件和一个服务。使用&amp;ldquo; library&amp;rdquo;类型的项目更新了工作区配置文件 &lt;code&gt;angular.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="742c3e2e58b8f0be6640dfb54f738b9a9e7625e7" translate="yes" xml:space="preserve">
          <source>This declares that the input property &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive should be treated as a guard to the use of its template, implying that the template will only be instantiated if the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; input property is true.</source>
          <target state="translated">此声明，输入属性 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 的的 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 指令应被视为一个后卫利用其模板，这意味着如果该模板只被实例化 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 输入属性为true。</target>
        </trans-unit>
        <trans-unit id="048e83daee9abd14678f6339d9376992f4af52ee" translate="yes" xml:space="preserve">
          <source>This default behavior is suitable for a typical &quot;multi-repo&quot; development style where each application resides in its own workspace. Beginners and intermediate users are encouraged to use &lt;code&gt;ng new&lt;/code&gt; to create a separate workspace for each application.</source>
          <target state="translated">此默认行为适合于典型的&amp;ldquo;多仓库&amp;rdquo;开发风格，其中每个应用程序都驻留在其自己的工作区中。鼓励初学者和中级用户使用 &lt;code&gt;ng new&lt;/code&gt; 为每个应用程序创建一个单独的工作区。</target>
        </trans-unit>
        <trans-unit id="6587344c6ac0fb7a73ec81835299d2d7ce729572" translate="yes" xml:space="preserve">
          <source>This demo does neither. Instead, it asks the user to make that choice explicitly in a confirmation dialog box that &lt;em&gt;waits asynchronously for the user's answer&lt;/em&gt;.</source>
          <target state="translated">本演示都没有。而是要求用户在确认对话框中明确地做出选择，该对话框&lt;em&gt;异步等待用户的答案&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6b5876f473d01141acbb800a8ab479df9db1837f" translate="yes" xml:space="preserve">
          <source>This directive accepts an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance. It will then use this &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to match any child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances to child &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">该指令接受现有的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例。然后，它将使用此 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 实例将任何子 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 实例与子 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; 伪指令进行匹配。</target>
        </trans-unit>
        <trans-unit id="a7989fce38212429c7062b9c5da6235e1e43e7a8" translate="yes" xml:space="preserve">
          <source>This directive can only be used as a child of &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; (within &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags).</source>
          <target state="translated">此伪指令只能用作 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 的子级（在 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记内）。</target>
        </trans-unit>
        <trans-unit id="251b666c976f4261c91fe4beed08cf42cce8548f" translate="yes" xml:space="preserve">
          <source>This directive can only be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">此伪指令只能与父 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 一起使用。</target>
        </trans-unit>
        <trans-unit id="e18d93c8deadcb10dbc3f3516c1984ce080db614" translate="yes" xml:space="preserve">
          <source>This directive is designed to be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; (selector: &lt;code&gt;[formGroup]&lt;/code&gt;).</source>
          <target state="translated">该伪指令旨在与父 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; （选择器： &lt;code&gt;[formGroup]&lt;/code&gt; ）一起使用。</target>
        </trans-unit>
        <trans-unit id="8ac905b9010d53abe6967453b6081cf348d35f38" translate="yes" xml:space="preserve">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">使用已弃用的 &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 选择器时，此伪指令仅用于显示警告。</target>
        </trans-unit>
        <trans-unit id="b316720613e231db957c48b5c531a72244e235ef" translate="yes" xml:space="preserve">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">使用已弃用的 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; 选择器时，此伪指令仅用于显示警告。</target>
        </trans-unit>
        <trans-unit id="cf3a222ca96206b5b9edc9d51a79dbc263b73654" translate="yes" xml:space="preserve">
          <source>This directive is used by itself or as part of a larger form. Use the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; selector to activate it.</source>
          <target state="translated">此伪指令可以单独使用，也可以作为较大形式的一部分使用。使用 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 选择器将其激活。</target>
        </trans-unit>
        <trans-unit id="079bfc81b016d5fdb9440e147c8f59ceacfd53ed" translate="yes" xml:space="preserve">
          <source>This directive lets you add a CSS class to an element when the link's route becomes active.</source>
          <target state="translated">这条指令可以让你在链接的路由处于活动状态时为元素添加一个CSS类。</target>
        </trans-unit>
        <trans-unit id="75bdf4a08a98952e88ab0d9d8d3f69ffb18f7db5" translate="yes" xml:space="preserve">
          <source>This document contains information and resources to help you keep your Angular apps and libraries up-to-date.</source>
          <target state="translated">本文档包含了帮助你保持Angular应用和库更新的信息和资源。</target>
        </trans-unit>
        <trans-unit id="5c3c465a1a031a3ba31db55cb2026597de7378a1" translate="yes" xml:space="preserve">
          <source>This document contains the practices that we follow to provide you with a leading-edge app development platform, balanced with stability. We strive to ensure that future changes are always introduced in a predictable way. We want everyone who depends on Angular to know when and how new features are added, and to be well-prepared when obsolete ones are removed.</source>
          <target state="translated">本文档包含了我们遵循的实践,为您提供一个领先的应用程序开发平台,同时兼顾稳定性。我们努力确保总是以可预测的方式引入未来的变化。我们希望每个依赖Angular的人都能知道何时以及如何添加新功能,并在删除过时的功能时做好充分准备。</target>
        </trans-unit>
        <trans-unit id="5bc557b45ba44abe0921a0e64654f12154157a7c" translate="yes" xml:space="preserve">
          <source>This document explains how CLI builders integrate with the workspace configuration file, and shows how you can create your own builder.</source>
          <target state="translated">本文档解释了CLI构建器如何与工作空间配置文件集成,并展示了如何创建自己的构建器。</target>
        </trans-unit>
        <trans-unit id="a18d52460187370aee9da7ba825b392cfeb2488a" translate="yes" xml:space="preserve">
          <source>This document explains how to enable Angular service worker support in projects that you created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. It then uses a simple example to show you a service worker in action, demonstrating loading and basic caching.</source>
          <target state="translated">本文档说明了如何在使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建的项目中启用Angular Service Worker支持。然后，它使用一个简单的示例向您展示实际中的服务工作者，演示了加载和基本缓存。</target>
        </trans-unit>
        <trans-unit id="91cf023004b2aaf04380d0ea7e79d9a637aeaec2" translate="yes" xml:space="preserve">
          <source>This document refers to a unit of translatable text as &quot;text,&quot; a &quot;message&quot;, or a &quot;text message.&quot;</source>
          <target state="translated">本文件将可译文本的单位称为 &quot;文本&quot;、&quot;信息 &quot;或 &quot;文本信息&quot;。</target>
        </trans-unit>
        <trans-unit id="f12cdb59b126570dec1c8c00fc1543f0b13ae7d0" translate="yes" xml:space="preserve">
          <source>This does not use the deprecated jsdoc tag on purpose because it renders all overloads as deprecated in TSLint due to &lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522&lt;/a&gt;.</source>
          <target state="translated">这不是故意使用不推荐使用的jsdoc标记，因为由于&lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522，&lt;/a&gt;它使所有重载都在TSLint中被弃用。</target>
        </trans-unit>
        <trans-unit id="49942dcd9689b7ed449bd1f739e91d6c6991a659" translate="yes" xml:space="preserve">
          <source>This does the same things as the Circle CI configuration, except that Travis doesn't come with Chrome, so we use Chromium instead.</source>
          <target state="translated">这和Circle CI配置一样,只是Travis没有配备Chrome,所以我们用Chromium代替。</target>
        </trans-unit>
        <trans-unit id="7a173481108f8e08ee23eccdc0ba37f48670a382" translate="yes" xml:space="preserve">
          <source>This duration string specifies the network timeout. The network timeout is how long the Angular service worker will wait for the network to respond before using a cached response, if configured to do so. &lt;code&gt;timeout&lt;/code&gt; is a duration string, using the following unit suffixes:</source>
          <target state="translated">此持续时间字符串指定网络超时。网络超时是Angular服务人员在使用缓存的响应（如果配置为这样做）之前将等待网络响应的时间。 &lt;code&gt;timeout&lt;/code&gt; 是一个持续时间字符串，使用以下单位后缀：</target>
        </trans-unit>
        <trans-unit id="148a52c96fd5321b2e9f47b1c411e3997ad1ee54" translate="yes" xml:space="preserve">
          <source>This ensures that the build and serve commands can find the configurations for specific build targets.</source>
          <target state="translated">这确保了构建和服务命令可以找到特定构建目标的配置。</target>
        </trans-unit>
        <trans-unit id="dd6ef74d3212dfa09ccacfec3ba04d981a0ae6bd" translate="yes" xml:space="preserve">
          <source>This error can occur if you use an expression in the &lt;code&gt;extends&lt;/code&gt; clause of a class.</source>
          <target state="translated">如果您在类的 &lt;code&gt;extends&lt;/code&gt; 子句中使用表达式，则会发生此错误。</target>
        </trans-unit>
        <trans-unit id="f96ad016e893a674d5f49749d37377695df58a8c" translate="yes" xml:space="preserve">
          <source>This error often means that you haven't declared the directive &quot;x&quot; or haven't imported the NgModule to which &quot;x&quot; belongs.</source>
          <target state="translated">这个错误通常意味着你没有声明指令 &quot;x &quot;或者没有导入 &quot;x &quot;所属的NgModule。</target>
        </trans-unit>
        <trans-unit id="ef4ec03d4ed605a8e9e66585cd5c2453ff07a4af" translate="yes" xml:space="preserve">
          <source>This example adds a few getter methods. In a reactive form, you can always access any form control through the &lt;code&gt;get&lt;/code&gt; method on its parent group, but sometimes it's useful to define getters as shorthands for the template.</source>
          <target state="translated">此示例添加了一些getter方法。在反应形式中，您始终可以通过其父组上的 &lt;code&gt;get&lt;/code&gt; 方法访问任何表单控件，但是有时将getter定义为模板的简写很有用。</target>
        </trans-unit>
        <trans-unit id="835a254bafaad8e2e761a6f3738065e79183f666" translate="yes" xml:space="preserve">
          <source>This example adds a state transition from the &lt;code&gt;closed&lt;/code&gt; state to the &lt;code&gt;open&lt;/code&gt; state with a 0.5 second transition animation arc.</source>
          <target state="translated">此示例使用0.5秒的过渡动画弧添加从 &lt;code&gt;closed&lt;/code&gt; 状态到 &lt;code&gt;open&lt;/code&gt; 状态的状态过渡。</target>
        </trans-unit>
        <trans-unit id="91b20a46620fed8511ccd3504ac47cc1854c74e2" translate="yes" xml:space="preserve">
          <source>This example applies the &lt;code&gt;SpyDirective&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in an &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;&lt;em&gt;hero&lt;/em&gt; repeater managed by the parent &lt;code&gt;SpyComponent&lt;/code&gt;.</source>
          <target state="translated">此示例适用的 &lt;code&gt;SpyDirective&lt;/code&gt; 到 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 在 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;em&gt;英雄&lt;/em&gt;由父管理中继器 &lt;code&gt;SpyComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dfd88d242d31d74d24a1d273231ff4e8624d83a" translate="yes" xml:space="preserve">
          <source>This example binds a &lt;code&gt;Promise&lt;/code&gt; to the view. Clicking the &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; button resolves the promise.</source>
          <target state="translated">本示例将 &lt;code&gt;Promise&lt;/code&gt; 绑定到视图。单击&amp;ldquo; &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 按钮可解决承诺。</target>
        </trans-unit>
        <trans-unit id="76fea2ff263dbc0e5640bda0886d27fd33ac4eb8" translate="yes" xml:space="preserve">
          <source>This example completely replaces the component's &lt;code&gt;providers&lt;/code&gt; array with a new array containing a &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt;.</source>
          <target state="translated">此示例使用包含 &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt; 的新数组完全替换了组件的 &lt;code&gt;providers&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="b38e94209799b7cb2ad45b15b4c0f49aebeeaf6c" translate="yes" xml:space="preserve">
          <source>This example features an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; where a user can enter a value and click a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; that raises an event. The &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; then relays the data to the parent component.</source>
          <target state="translated">此示例具有一个 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ，用户可以在其中输入一个值并单击引发事件的 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 。然后， &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 将数据中继到父组件。</target>
        </trans-unit>
        <trans-unit id="e3900b3c5f734c8b42b0423653ffc07e9a8c5717" translate="yes" xml:space="preserve">
          <source>This example filters the &lt;code&gt;title&lt;/code&gt; property to uppercase.</source>
          <target state="translated">本示例将 &lt;code&gt;title&lt;/code&gt; 属性过滤为大写。</target>
        </trans-unit>
        <trans-unit id="175ec0e7ef7252b24060674256a084243d66f30a" translate="yes" xml:space="preserve">
          <source>This example from the &lt;code&gt;HeroListComponent&lt;/code&gt; template uses three of these forms.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; 模板中的此示例使用以下三种形式。</target>
        </trans-unit>
        <trans-unit id="48f92247fb3553c5917ea007bd2c3e17c2e4d8ad" translate="yes" xml:space="preserve">
          <source>This example is so simple that it is tempting to write the &lt;code&gt;Http.get()&lt;/code&gt; inside the component itself and skip the service. In practice, however, data access rarely stays this simple. You typically need to post-process the data, add error handling, and maybe some retry logic to cope with intermittent connectivity.</source>
          <target state="translated">这个示例非常简单， &lt;code&gt;Http.get()&lt;/code&gt; 在组件本身内部编写Http.get（）并跳过服务。但是实际上，数据访问很少保持这种简单性。通常，您需要对数据进行后处理，添加错误处理，也许还需要一些重试逻辑来应对间歇性连接。</target>
        </trans-unit>
        <trans-unit id="7738f3bfb08d1f44b77915ef508354d761db0235" translate="yes" xml:space="preserve">
          <source>This example provides a state transition from &lt;code&gt;open&lt;/code&gt; to &lt;code&gt;closed&lt;/code&gt; with a one second transition between states.</source>
          <target state="translated">该示例提供了从 &lt;code&gt;open&lt;/code&gt; 到 &lt;code&gt;closed&lt;/code&gt; 的状态转换，状态之间有一秒钟的转换。</target>
        </trans-unit>
        <trans-unit id="9e2fbcbc42a2d75d74a3222a5d342beb0a9c1ce0" translate="yes" xml:space="preserve">
          <source>This example recreates the heroes feature in the &quot;Services&quot; episode of the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;, and you'll be copying much of the code from the .</source>
          <target state="translated">本示例在&amp;ldquo; &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes&amp;rdquo;教程&lt;/a&gt;的&amp;ldquo; Services&amp;rdquo;一集中重新创建了heroes功能，您将从中复制许多代码。</target>
        </trans-unit>
        <trans-unit id="373455b46f233c304aab2070dd6730bb07e917cc" translate="yes" xml:space="preserve">
          <source>This example shows some of the most useful &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; configuration options:</source>
          <target state="translated">此示例显示了一些最有用的 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 配置选项：</target>
        </trans-unit>
        <trans-unit id="9700001752d1ddad2bef57a54fdbab31b4d92d72" translate="yes" xml:space="preserve">
          <source>This example wires parent buttons to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; and uses interpolation to display the child's &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">本示例将父级按钮连接到孩子的 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 并使用插值显示孩子的 &lt;code&gt;seconds&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="7de281f2ca63df5ae46cabdcc5a3f0a47f5d8df0" translate="yes" xml:space="preserve">
          <source>This example&amp;mdash;which displays &lt;strong&gt;&lt;samp&gt;FRIDAY, APRIL 15, 1988&lt;/samp&gt;&lt;/strong&gt;&amp;mdash;chains the same pipes as above, but passes in a parameter to &lt;code&gt;date&lt;/code&gt; as well.</source>
          <target state="translated">此示例-显示 &lt;strong&gt;&lt;samp&gt;1988年4月15日，星期五&lt;/samp&gt;&lt;/strong&gt;-链接与上述相同的管道，但也要传递一个参数以保持 &lt;code&gt;date&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4820eaf9e83b02c2a47b5745671a9d1f9f915362" translate="yes" xml:space="preserve">
          <source>This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue pipe.</source>
          <target state="translated">这个例子展示了如何通过ngFor使用这个key-value管道对一个对象或Map进行迭代。</target>
        </trans-unit>
        <trans-unit id="d13f81c361ce43971a48c424f3851c8dbc4f0ebf" translate="yes" xml:space="preserve">
          <source>This exists to support future Ivy work and has no effect currently.</source>
          <target state="translated">这是为支持未来的艾毅工作而存在的,目前没有影响。</target>
        </trans-unit>
        <trans-unit id="29df732f2a0c84758770605719258bd4b737a4b9" translate="yes" xml:space="preserve">
          <source>This field contains an array of URLs and &lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;glob-like&lt;/a&gt; URL patterns that will be matched at runtime. It can contain both negative patterns (i.e. patterns starting with &lt;code&gt;!&lt;/code&gt;) and non-negative patterns and URLs.</source>
          <target state="translated">该字段包含将在运行时匹配的URL 数组和&lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;类似glob的&lt;/a&gt; URL模式。它可以包含否定模式（即，以 &lt;code&gt;!&lt;/code&gt; 开头的模式）和非否定模式和URL。</target>
        </trans-unit>
        <trans-unit id="8a65db321c5e9974fc66318e4ba5bcd4b192ba5d" translate="yes" xml:space="preserve">
          <source>This field contains an array of asset groups, each of which defines a set of asset resources and the policy by which they are cached.</source>
          <target state="translated">该字段包含一个资产组的数组,每个资产组定义了一组资产资源和缓存这些资源的策略。</target>
        </trans-unit>
        <trans-unit id="39dca8bdfadccce3aa32a1f0f34acf9df4dfd38c" translate="yes" xml:space="preserve">
          <source>This file contains imports and functionality that is available to the entire app.</source>
          <target state="translated">这个文件包含了整个应用程序的导入和功能。</target>
        </trans-unit>
        <trans-unit id="c09c8b1c3afe0b2f3e211e35dda11d6b49d046a2" translate="yes" xml:space="preserve">
          <source>This file contains options and flags that are essential for Angular applications.</source>
          <target state="translated">这个文件包含了Angular应用所必需的选项和标志。</target>
        </trans-unit>
        <trans-unit id="7774dea1cbb9ba9a9affbe79a52ad87b124f3078" translate="yes" xml:space="preserve">
          <source>This file does the following:</source>
          <target state="translated">这个文件的作用如下:</target>
        </trans-unit>
        <trans-unit id="8e6fad8835e771be15a7e60de8d9f839976d92ca" translate="yes" xml:space="preserve">
          <source>This file integrity is especially important when lazy loading modules. A JS bundle may reference many lazy chunks, and the filenames of the lazy chunks are unique to the particular build of the app. If a running app at version &lt;code&gt;X&lt;/code&gt; attempts to load a lazy chunk, but the server has updated to version &lt;code&gt;X + 1&lt;/code&gt; already, the lazy loading operation will fail.</source>
          <target state="translated">延迟加载模块时，此文件完整性特别重要。JS捆绑包可能引用许多惰性块，并且这些惰性块的文件名对于应用程序的特定版本而言是唯一的。如果正在运行的版本 &lt;code&gt;X&lt;/code&gt; 的应用程序尝试加载惰性块，但服务器已更新至版本 &lt;code&gt;X + 1&lt;/code&gt; ，则惰性加载操作将失败。</target>
        </trans-unit>
        <trans-unit id="18dc9ff9208e9157f8adfe6cb8c2bceab30b16aa" translate="yes" xml:space="preserve">
          <source>This first implementation sets the background color of the host element to yellow.</source>
          <target state="translated">第一个实现将主机元素的背景色设置为黄色。</target>
        </trans-unit>
        <trans-unit id="fc36f6372162820e0033b4e4ebdc541bbbe324f4" translate="yes" xml:space="preserve">
          <source>This function &lt;em&gt;must&lt;/em&gt; match the form above: an arrow function of the form &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;.</source>
          <target state="translated">此函数&lt;em&gt;必须&lt;/em&gt;与上面的形式匹配： &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt; 形式的箭头函数。</target>
        </trans-unit>
        <trans-unit id="4878fd2cfdcaf11685e5e72d2354cd83ec8f9724" translate="yes" xml:space="preserve">
          <source>This function is functionally the same as &lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt; at this level. It exists for symmetry with &lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt; on &lt;code&gt;FormGroups&lt;/code&gt; and &lt;code&gt;FormArrays&lt;/code&gt;, where it does behave differently.</source>
          <target state="translated">此功能在此级别上与&lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt;在功能上相同。它的存在与对称&lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt;上 &lt;code&gt;FormGroups&lt;/code&gt; 和 &lt;code&gt;FormArrays&lt;/code&gt; ，如果它确实表现不同。</target>
        </trans-unit>
        <trans-unit id="56d3f264d77db65b5e665e640dd42a9db6e677ef" translate="yes" xml:space="preserve">
          <source>This function returns an &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorated class that is configured to wire up the Angular and AngularJS injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">该函数返回一个 &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰的类，该类配置为连接Angular和AngularJS注入器，而无需实际引导混合应用程序。这使得单元测试服务更简单，更快捷。</target>
        </trans-unit>
        <trans-unit id="e6acc9bce8fe23418fda41554da4f4e2de103857" translate="yes" xml:space="preserve">
          <source>This function returns an AngularJS module that is configured to wire up the AngularJS and Angular injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">该函数返回一个AngularJS模块,该模块被配置为连接AngularJS和Angular注入器,而无需实际引导一个混合应用程序。这使得单元测试服务更加简单和快速。</target>
        </trans-unit>
        <trans-unit id="ec2de2fde95bef298a51f31a0130f6587e05afec" translate="yes" xml:space="preserve">
          <source>This functionality is only available when you have loaded the full locale data. See the &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;&quot;I18n guide&quot;&lt;/a&gt;.</source>
          <target state="translated">仅当您加载了完整的语言环境数据时，此功能才可用。请参阅&lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;&amp;ldquo; I18n指南&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71d1005561ab53d8d9b93d80838e0492d40b9143" translate="yes" xml:space="preserve">
          <source>This general rule can help you build a mental model of attributes and DOM properties: &lt;strong&gt;Attributes initialize DOM properties and then they are done. Property values can change; attribute values can't.&lt;/strong&gt;</source>
          <target state="translated">该通用规则可以帮助您建立属性和DOM属性的思维模型：&lt;strong&gt;属性初始化DOM属性，然后完成它们。属性值可以更改；属性值不能。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed51a3d987c448eabd0caaad7d11446c5f4ee98e" translate="yes" xml:space="preserve">
          <source>This generates a folder for the new component within the customer-dashboard folder and updates the feature module with the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; info:</source>
          <target state="translated">这将在customer-dashboard文件夹中为新组件生成一个文件夹，并使用 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 信息更新功能模块：</target>
        </trans-unit>
        <trans-unit id="a8ca933ae9ed34a8a06321e5395d5386f3467055" translate="yes" xml:space="preserve">
          <source>This gives users a meaningful first paint of your application that appears quickly because the browser can simply render the HTML and CSS without the need to initialize any JavaScript.</source>
          <target state="translated">这为用户提供了一个有意义的应用程序的第一个涂料,它出现得很快,因为浏览器可以简单地渲染HTML和CSS,而不需要初始化任何JavaScript。</target>
        </trans-unit>
        <trans-unit id="7491170871e6c27e83f7232d07de91c8f51b4dc0" translate="yes" xml:space="preserve">
          <source>This glossary lists the most prominent terms and a few less familiar ones with unusual or unexpected definitions.</source>
          <target state="translated">本词汇表列出了最著名的术语和一些不太熟悉的术语,以及一些不寻常或意外的定义。</target>
        </trans-unit>
        <trans-unit id="fdd0dd4255112079ec8cd2cac891a62c3bc630af" translate="yes" xml:space="preserve">
          <source>This guard returns a synchronous boolean result. If the user is logged in, it returns true and the navigation continues.</source>
          <target state="translated">该守卫返回一个同步布尔结果。如果用户已登录,则返回true并继续导航。</target>
        </trans-unit>
        <trans-unit id="71b0a76f127063119253692ead9f31153f3cf61f" translate="yes" xml:space="preserve">
          <source>This guide assumes you are already familiar with developing and building Angular applications using the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">本指南假定您已经熟悉使用&lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;开发和构建Angular应用程序。</target>
        </trans-unit>
        <trans-unit id="f91f9ca40378a30abae72457a623c7d9b92e26f1" translate="yes" xml:space="preserve">
          <source>This guide contains a summary of all Angular APIs and features that are currently deprecated.</source>
          <target state="translated">本指南包含了所有目前已经废弃的Angular API和功能的总结。</target>
        </trans-unit>
        <trans-unit id="a03008f3c8f9dc5daf041fcc08d5096f9ec3c5aa" translate="yes" xml:space="preserve">
          <source>This guide covers the basic Angular animation features to get you started on adding Angular animations to your project.</source>
          <target state="translated">本指南涵盖了基本的Angular动画功能,让你开始在项目中添加Angular动画。</target>
        </trans-unit>
        <trans-unit id="72e2d1efd7dc0408171b8a02495eccd2a194f9ee" translate="yes" xml:space="preserve">
          <source>This guide covers the router's primary features, illustrating them through the evolution of a small application that you can run live in the browser.</source>
          <target state="translated">本指南涵盖了路由器的主要功能,通过一个可以在浏览器中实时运行的小应用程序的演变来说明它们。</target>
        </trans-unit>
        <trans-unit id="16b4b3c7d27b05a7a93d7585fd80da6f87695735" translate="yes" xml:space="preserve">
          <source>This guide demonstrates that scenario with an example in the Tour of Heroes theme. Imagine an outer &lt;code&gt;HeroListComponent&lt;/code&gt; that displays a list of super heroes.</source>
          <target state="translated">本指南以&amp;ldquo;环游英雄&amp;rdquo;主题为例演示了该场景。想象一下一个外部 &lt;code&gt;HeroListComponent&lt;/code&gt; ，其中显示了超级英雄列表。</target>
        </trans-unit>
        <trans-unit id="94795f12569496bcae1ed95d5adfb2856a55c12a" translate="yes" xml:space="preserve">
          <source>This guide describes &lt;strong&gt;Angular Universal&lt;/strong&gt;, a technology that renders Angular applications on the server.</source>
          <target state="translated">本指南介绍了&lt;strong&gt;Angular Universal&lt;/strong&gt;，该技术可在服务器上呈现Angular应用程序。</target>
        </trans-unit>
        <trans-unit id="7c79df812f600818480fccaad006560ab578d116" translate="yes" xml:space="preserve">
          <source>This guide describes development of a multi-page routed sample application. Along the way, it highlights design decisions and describes key features of the router such as:</source>
          <target state="translated">本指南介绍了一个多页路由示例应用程序的开发。一路走来,它强调了设计决策,并描述了路由器的关键特性,如:。</target>
        </trans-unit>
        <trans-unit id="5eaa5268ab448450e02df4dcd7d854a3b74ebfd4" translate="yes" xml:space="preserve">
          <source>This guide describes how to develop locally on your own machine. Setting up a new project on your machine is quick and easy with the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart seed on github&lt;/a&gt;.</source>
          <target state="translated">本指南介绍了如何在自己的计算机上进行本地开发。借助&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;github&lt;/a&gt;上的QuickStart种子，可以轻松快捷地在计算机上设置新项目。</target>
        </trans-unit>
        <trans-unit id="a071d6040e5b884251f92cb51a3a612a4400f9c1" translate="yes" xml:space="preserve">
          <source>This guide describes some of the built-in tools for efficiently migrating AngularJS projects over to the Angular platform, one piece at a time. It is very similar to &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; with the exception that this one uses the &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule()&lt;/a&gt; helper function instead of the &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt; class. This affects how the app is bootstrapped and how change detection is propagated between the two frameworks. It allows you to upgrade incrementally while improving the speed of your hybrid apps and leveraging the latest of Angular in AngularJS apps early in the process of upgrading.</source>
          <target state="translated">本指南介绍了一些内置工具，这些工具可一次高效地将AngularJS项目迁移到Angular平台。它与&lt;a href=&quot;upgrade&quot;&gt;从AngularJS&lt;/a&gt;进行升级非常相似，不同之处在于该示例使用&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule（）&lt;/a&gt;帮助函数而不是&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;类。这会影响应用程序的启动方式，以及在两个框架之间传播更改检测的方式。它可让您进行增量升级，同时提高混合应用程序的速度，并在升级过程中尽早利用AngularJS应用程序中最新的Angular。</target>
        </trans-unit>
        <trans-unit id="52f91de3b44e77776bb5d72dda1262736b0f2d6c" translate="yes" xml:space="preserve">
          <source>This guide explains how to build and test Angular apps with Bazel.</source>
          <target state="translated">本指南介绍了如何使用Bazel构建和测试Angular应用。</target>
        </trans-unit>
        <trans-unit id="a7f2364975bf639296fbad2e6ccfbf1dc9b2ff63" translate="yes" xml:space="preserve">
          <source>This guide explains how to set up your environment for Angular development using the &lt;a href=&quot;cli&quot;&gt;Angular CLI tool&lt;/a&gt;. It includes information about prerequisites, installing the CLI, creating an initial workspace and starter app, and running that app locally to verify your setup.</source>
          <target state="translated">本指南介绍了如何使用&lt;a href=&quot;cli&quot;&gt;Angular CLI工具&lt;/a&gt;为Angular开发设置环境。它包含有关先决条件，安装CLI，创建初始工作区和启动程序应用程序以及在本地运行该应用程序以验证设置的信息。</target>
        </trans-unit>
        <trans-unit id="e4e5dc8be1da9c2744ee3e6ff19277fa157b7049" translate="yes" xml:space="preserve">
          <source>This guide explains how to specify metadata and apply available compiler options to compile your applications efficiently using the AOT compiler.</source>
          <target state="translated">本指南解释了如何指定元数据和应用可用的编译器选项,以使用AOT编译器有效地编译你的应用程序。</target>
        </trans-unit>
        <trans-unit id="e8e0ddc6e4a1bac092793252db146528b491a1a7" translate="yes" xml:space="preserve">
          <source>This guide follows that approach. It has a &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; folder under &lt;code&gt;src/&lt;/code&gt;. Assets within that folder have a filename extension that matches their associated locale.</source>
          <target state="translated">本指南遵循该方法。它在 &lt;code&gt;src/&lt;/code&gt; 下有一个 &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; 文件夹。该文件夹中的资产的文件扩展名与其关联的语言环境相匹配。</target>
        </trans-unit>
        <trans-unit id="a4fe0eebc6c53dfd8ba7ae172b29d6085d11576f" translate="yes" xml:space="preserve">
          <source>This guide helps you transition from AngularJS to Angular by mapping AngularJS syntax to the equivalent Angular syntax.</source>
          <target state="translated">本指南通过将AngularJS语法映射到等价的Angular语法,帮助你从AngularJS过渡到Angular。</target>
        </trans-unit>
        <trans-unit id="8b1d6ce9f824c1b57c26e8b4535de072da1382f6" translate="yes" xml:space="preserve">
          <source>This guide is a &lt;em&gt;living document&lt;/em&gt;; it changes over time. We strive for consistency to the extent feasible, but you may find parts of our documentation that don't match this style guide. When in doubt, &lt;strong&gt;follow this guide rather than imitating existing documents.&lt;/strong&gt;</source>
          <target state="translated">本指南是一份&lt;em&gt;活泼的文件&lt;/em&gt; ; 它会随着时间变化。我们力求在可行的范围内保持一致性，但您可能会发现我们文档中与本样式指南不符的部分。如有疑问，请&lt;strong&gt;遵循本指南，而不要模仿现有文档。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b86a88184ea70d17effff794189dd4cb85c357f" translate="yes" xml:space="preserve">
          <source>This guide looks at how Angular manipulates the DOM with &lt;strong&gt;structural directives&lt;/strong&gt; and how you can write your own structural directives to do the same thing.</source>
          <target state="translated">本指南介绍了Angular如何使用&lt;strong&gt;结构化指令&lt;/strong&gt;操纵DOM，以及如何编写自己的结构化指令来完成相同的操作。</target>
        </trans-unit>
        <trans-unit id="593d82739fc5c50f931f13f1ea5af12b64068cec" translate="yes" xml:space="preserve">
          <source>This guide offers tips and techniques for unit and integration testing Angular applications.</source>
          <target state="translated">本指南提供了单元和集成测试Angular应用的技巧和方法。</target>
        </trans-unit>
        <trans-unit id="c0d6e75bcf91e32b2e66ca76df8b63da387d1f38" translate="yes" xml:space="preserve">
          <source>This guide proceeds in phases, marked by milestones, starting from a simple two-pager and building toward a modular, multi-view design with child routes.</source>
          <target state="translated">本指南分阶段进行,以里程碑为标志,从简单的两页纸开始,到带有子路线的模块化、多视角设计。</target>
        </trans-unit>
        <trans-unit id="d3c69f9ce0aa91fc4ff28ea4156ea22eb64b216f" translate="yes" xml:space="preserve">
          <source>This guide provides information to help you decide which type of form works best for your situation. It introduces the common building blocks used by both approaches. It also summarizes the key differences between the two approaches, and demonstrates those differences in the context of setup, data flow, and testing.</source>
          <target state="translated">本指南提供信息,帮助您决定哪种类型的表格最适合您的情况。本指南介绍了两种方法所使用的共同构件,并总结了两种方法之间的主要差异,并在设置、数据流和测试中演示了这些差异。它还总结了这两种方法之间的主要区别,并在设置、数据流和测试的背景下展示了这些区别。</target>
        </trans-unit>
        <trans-unit id="5d34585a93f67fec9f496e464bff52a80a3a9cbe" translate="yes" xml:space="preserve">
          <source>This guide uses the StackBlitz Generator to show you a ready-made, simple application that you can examine and play with interactively. In actual development you will typically use the &lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;, a powerful command-line tool that lets you generate and modify applications. For more information, see the &lt;a href=&quot;https://angular.io/cli&quot;&gt;CLI Overview&lt;/a&gt;.</source>
          <target state="translated">本指南使用StackBlitz生成器向您展示现成的简单应用程序，您可以进行交互检查和使用。在实际开发中，您通常会使用&lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;，这是一个功能强大的命令行工具，可让您生成和修改应用程序。有关更多信息，请参见&lt;a href=&quot;https://angular.io/cli&quot;&gt;CLI概述&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e586281684b3e248038b701f36893a54ff5a55bc" translate="yes" xml:space="preserve">
          <source>This guide won't repeat how to &lt;em&gt;use&lt;/em&gt; them. But it does explain &lt;em&gt;how they work&lt;/em&gt; and how to &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own&lt;/a&gt; structural directive.</source>
          <target state="translated">本指南不会重复&lt;em&gt;使用&lt;/em&gt;它们的方法。但这确实说明&lt;em&gt;了它们如何工作&lt;/em&gt;以及如何&lt;a href=&quot;structural-directives#unless&quot;&gt;编写自己的&lt;/a&gt;结构指令。</target>
        </trans-unit>
        <trans-unit id="051838d2f6789f70fb2f89d0d3b7b55f2fd66a1e" translate="yes" xml:space="preserve">
          <source>This has been deprecated for a few reasons. First, developers have found this pattern confusing. It seems like the actual &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive is being used, but in fact it's an input/output property named &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; on the reactive form directive that simply approximates (some of) its behavior. Specifically, it allows getting/setting the value and intercepting value events. However, some of &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;'s other features - like delaying updates with&lt;code&gt;ngModelOptions&lt;/code&gt; or exporting the directive - simply don't work, which has understandably caused some confusion.</source>
          <target state="translated">由于某些原因，已弃用此方法。首先，开发人员发现此模式令人困惑。看起来好像正在使用实际的 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令，但实际上，它是反应形式指令上名为 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的输入/输出属性，它只是近似（部分）其行为。具体来说，它允许获取/设置值并拦截值事件。但是， &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的其他一些功能（例如，延迟 &lt;code&gt;ngModelOptions&lt;/code&gt; 的更新或导出指令）根本不起作用，这在一定程度上引起了混乱。</target>
        </trans-unit>
        <trans-unit id="bb14c528bca95d7e4e8b5c0e75434cfae54a895b" translate="yes" xml:space="preserve">
          <source>This has been deprecated to keep selectors consistent with other core Angular selectors, as element selectors are typically written in kebab-case.</source>
          <target state="translated">这一点已经被废弃,以保持选择器与其他核心Angular选择器的一致性,因为元素选择器通常是用kebab-case写的。</target>
        </trans-unit>
        <trans-unit id="1095f7e1edc68ff18dd9e80137271b101bd86c29" translate="yes" xml:space="preserve">
          <source>This helper class should be used as a base class for creating Angular directives that wrap AngularJS components that need to be &quot;upgraded&quot;.</source>
          <target state="translated">这个帮助类应该被用作创建Angular指令的基础类,用来包装需要 &quot;升级 &quot;的AngularJS组件。</target>
        </trans-unit>
        <trans-unit id="4a9910a470680f461d5e2a2614c8675ebcbbb9c4" translate="yes" xml:space="preserve">
          <source>This helper function returns a factory function that provides access to the Angular service identified by the &lt;code&gt;token&lt;/code&gt; parameter.</source>
          <target state="translated">此辅助函数返回一个工厂函数，该函数提供对 &lt;code&gt;token&lt;/code&gt; 参数所标识的Angular服务的访问。</target>
        </trans-unit>
        <trans-unit id="3feef579a17c24eb18bbf65e912c0af25f671bc1" translate="yes" xml:space="preserve">
          <source>This helper function returns a factory function to be used for registering an AngularJS wrapper directive for &quot;downgrading&quot; an Angular component.</source>
          <target state="translated">这个帮助函数返回一个工厂函数,用于注册一个AngularJS包装器指令,用于 &quot;降级 &quot;一个Angular组件。</target>
        </trans-unit>
        <trans-unit id="47aa8d05f2d4f3b4a736e0ea1dd586657dd4775e" translate="yes" xml:space="preserve">
          <source>This helper is for testing services not Components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">该帮助程序用于测试服务，而不是组件。对于组件测试，您仍然必须引导混合应用程序。有关更多信息，请参见 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4eef553362f7318dd361d3d0f6a5760f3585a142" translate="yes" xml:space="preserve">
          <source>This helper is for testing services not components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">该帮助程序用于测试服务而不是组件。对于组件测试，您仍然必须引导混合应用程序。有关更多信息，请参见 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b9ba1412b83f44b56ecd7943b94f7e6d7ad49fa" translate="yes" xml:space="preserve">
          <source>This helper's observable emits the &lt;code&gt;data&lt;/code&gt; value in the next turn of the JavaScript engine.</source>
          <target state="translated">该辅助对象的可观察对象在下一个JavaScript引擎中发出 &lt;code&gt;data&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="326ed6100992d8304a4c4512b4ef1b97e697f367" translate="yes" xml:space="preserve">
          <source>This highlight directive has a single customizable property. In a real app, it may need more.</source>
          <target state="translated">这个高亮指令有一个单一的可定制属性。在真实的应用程序中,它可能需要更多。</target>
        </trans-unit>
        <trans-unit id="a8424043c89606ac692d26ae91eabcf058b3b255" translate="yes" xml:space="preserve">
          <source>This implies that the component bindings will always follow the semantics of the instantiation framework.</source>
          <target state="translated">这意味着组件绑定将始终遵循实例化框架的语义。</target>
        </trans-unit>
        <trans-unit id="13526051beab5c2cb1409738f1705df68acfffb7" translate="yes" xml:space="preserve">
          <source>This indicates the last time the service worker checked for a new version, or update, of the app. &lt;code&gt;never&lt;/code&gt; indicates that the service worker has never checked for an update.</source>
          <target state="translated">这表示服务工作者最后一次检查应用程序的新版本或更新的时间。 &lt;code&gt;never&lt;/code&gt; 表示服务工作者从未检查过更新。</target>
        </trans-unit>
        <trans-unit id="c6866fb4d3be58dfa31c9fcb707a31824d7cdb10" translate="yes" xml:space="preserve">
          <source>This initial value never changes.</source>
          <target state="translated">这个初始值永远不会改变。</target>
        </trans-unit>
        <trans-unit id="8fdbd80f7713591b405acb108f078354e86bdf7e" translate="yes" xml:space="preserve">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics &lt;a href=&quot;glossary#collection&quot;&gt;collection&lt;/a&gt; with an initial named schematic. The collection folder is a workspace for schematics. You can also use the &lt;code&gt;schematics&lt;/code&gt; command to add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">这将安装 &lt;code&gt;schematics&lt;/code&gt; 可执行文件，您可以使用该可执行文件创建具有初始命名逻辑示意图的新逻辑示意图&lt;a href=&quot;glossary#collection&quot;&gt;集合&lt;/a&gt;。收集文件夹是原理图的工作区。您也可以使用 &lt;code&gt;schematics&lt;/code&gt; 命令将新的示意图添加到现有集合中，或扩展现有的示意图。</target>
        </trans-unit>
        <trans-unit id="f4f376c92f4d721a1cb60edfb651e536ba4f5e3e" translate="yes" xml:space="preserve">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics collection in its own project folder, add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">这将安装 &lt;code&gt;schematics&lt;/code&gt; 可执行文件，您可以使用该可执行文件在其自己的项目文件夹中创建新的逻辑示意图集合，将新的逻辑示意图添加到现有的逻辑示意图或扩展现有的逻辑示意图。</target>
        </trans-unit>
        <trans-unit id="b28a949d24ede3e30d4f2425cea4c004accffb6c" translate="yes" xml:space="preserve">
          <source>This interface allows access to the underlying &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;, and allows responding with &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s or &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">此接口允许访问基础 &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; ，并允许使用 &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; 进行响应。</target>
        </trans-unit>
        <trans-unit id="f14b1937cf79a6a85c55fe443bf06ded14c39fe9" translate="yes" xml:space="preserve">
          <source>This is a &lt;em&gt;cold&lt;/em&gt; observable that waits three frames and then emits an error, The hash (&lt;code&gt;#&lt;/code&gt;) indicates the timing of the error that is specified in the third argument. The second argument is null because the observable never emits a value.</source>
          <target state="translated">这是一个&lt;em&gt;冷的&lt;/em&gt;可观察到的现象，它等待三个帧，然后发出错误。哈希（ &lt;code&gt;#&lt;/code&gt; ）指示在第三个参数中指定的错误的时间。第二个参数为null，因为可观察对象从不发出值。</target>
        </trans-unit>
        <trans-unit id="325c383689dc505c167a4efdf3ff1bfffcda2dac" translate="yes" xml:space="preserve">
          <source>This is a common middleware pattern found in frameworks such as Express.js.</source>
          <target state="translated">这是在Express.js等框架中常见的中间件模式。</target>
        </trans-unit>
        <trans-unit id="8a0404a183044b9e9c6ffe40bc631a912f26a05f" translate="yes" xml:space="preserve">
          <source>This is a considerable effort and it often isn't worth it, especially since you are in the process of moving your code to Angular. Instead, declare &lt;code&gt;angular&lt;/code&gt; as &lt;code&gt;angular.IAngularStatic&lt;/code&gt; to indicate it is a global variable and still have full typing support.</source>
          <target state="translated">这是一项巨大的工作，通常不值得，特别是因为您正在将代码移至Angular。而是将 &lt;code&gt;angular&lt;/code&gt; 声明为 &lt;code&gt;angular.IAngularStatic&lt;/code&gt; ,以指示它是全局变量，并且仍具有完全键入支持。</target>
        </trans-unit>
        <trans-unit id="ebfc1fc3ae76182d341bfaf13595ca3c04aee718" translate="yes" xml:space="preserve">
          <source>This is a general purpose guard&amp;mdash;you can imagine other features that require authenticated users&amp;mdash;so you generate an &lt;code&gt;AuthGuard&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; folder.</source>
          <target state="translated">这是一种通用保护措施-您可以想象需要经过身份验证的用户的其他功能-因此您可以在 &lt;code&gt;auth&lt;/code&gt; 文件夹中生成 &lt;code&gt;AuthGuard&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="745624b6290490997a074676dc013e0ad3433575" translate="yes" xml:space="preserve">
          <source>This is a good candidate for an impure pipe because the &lt;code&gt;transform&lt;/code&gt; function is trivial and fast.</source>
          <target state="translated">对于不纯管道，这是一个很好的候选者，因为 &lt;code&gt;transform&lt;/code&gt; 函数微不足道且快速。</target>
        </trans-unit>
        <trans-unit id="5b9b9bda285209856e8b9f18df0fc5414bc4d50e" translate="yes" xml:space="preserve">
          <source>This is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for you custom element. But it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</source>
          <target state="translated">这是为你的自定义元素快速获得TypeScript功能的好方法,比如类型检查和自动完成支持。但是,如果你在几个地方都需要它,它可能会变得很麻烦,因为你必须在每一次出现时都投下返回类型。</target>
        </trans-unit>
        <trans-unit id="6520fb09eb7f64f65fec620f22a827ad129c5147" translate="yes" xml:space="preserve">
          <source>This is a nonissue in Angular because ES 2015 modules handle the namespacing for you.</source>
          <target state="translated">这在Angular中不是问题,因为ES 2015模块为你处理了命名间距。</target>
        </trans-unit>
        <trans-unit id="b1360d42910235d11c8da57171809f03949b89f4" translate="yes" xml:space="preserve">
          <source>This is a tree of activated route snapshots. Every node in this tree knows about the &quot;consumed&quot; URL segments, the extracted parameters, and the resolved data.</source>
          <target state="translated">这是一棵激活的路由快照树。树上的每个节点都知道 &quot;消耗的 &quot;URL段、提取的参数和解析的数据。</target>
        </trans-unit>
        <trans-unit id="308f6f1ffa549dea73f1268332bb7efda867f32b" translate="yes" xml:space="preserve">
          <source>This is a typical &quot;&lt;em&gt;service-in-service&lt;/em&gt;&quot; scenario: you inject the &lt;code&gt;MessageService&lt;/code&gt; into the &lt;code&gt;HeroService&lt;/code&gt; which is injected into the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">这是一种典型的&amp;ldquo; &lt;em&gt;服务中服务&lt;/em&gt; &amp;rdquo;方案：您将 &lt;code&gt;MessageService&lt;/code&gt; 注入 &lt;code&gt;HeroService&lt;/code&gt; ，后者又注入 &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd1783005dfb776d1af2f04f6577b41eaa1ff956" translate="yes" xml:space="preserve">
          <source>This is a very simple example, but the use of a schema for validation can be very powerful. For more information, see the &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schemas website&lt;/a&gt;.</source>
          <target state="translated">这是一个非常简单的示例，但是使用架构进行验证可能非常强大。有关更多信息，请参见&lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON模式网站&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98e22f6dda8c73c831d901b714a07d0b7689f227" translate="yes" xml:space="preserve">
          <source>This is actually a convenience method, implemented as &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt;.</source>
          <target state="translated">这实际上是一种便捷方法，实现为 &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd436a739a02b80b45abdb0c1ad5a566028baa06" translate="yes" xml:space="preserve">
          <source>This is actually a pretty good starting point. The code uses the AngularJS 1.5 component API and the organization follows the &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS Style Guide&lt;/a&gt;, which is an important &lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;preparation step&lt;/a&gt; before a successful upgrade.</source>
          <target state="translated">这实际上是一个很好的起点。该代码使用AngularJS 1.5组件API，并且组织遵循&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS样式指南&lt;/a&gt;，这是成功升级之前的重要&lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;准备步骤&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="28fd6969c6d6369ceb7285ab5a770ea3315ffab8" translate="yes" xml:space="preserve">
          <source>This is an example of Angular's &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; syntax.</source>
          <target state="translated">这是Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;事件绑定&lt;/a&gt;语法的示例。</target>
        </trans-unit>
        <trans-unit id="edb830bd9f42a141071913f2de5f0ee10c46edce" translate="yes" xml:space="preserve">
          <source>This is an interim code sample that will allow you to provide and use the &lt;code&gt;HeroService&lt;/code&gt;. At this point, the code will differ from the &lt;code&gt;HeroService&lt;/code&gt; in the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt;.</source>
          <target state="translated">这是一个临时代码示例，可让您提供和使用 &lt;code&gt;HeroService&lt;/code&gt; 。此时，代码在&lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&amp;ldquo;最终代码审查&amp;rdquo;中&lt;/a&gt;与 &lt;code&gt;HeroService&lt;/code&gt; 有所不同。</target>
        </trans-unit>
        <trans-unit id="b2b55aa5e71e846d741afa9a4891157e8f09cdfb" translate="yes" xml:space="preserve">
          <source>This is an opaque value the router will give to a custom route reuse strategy to store and retrieve later on.</source>
          <target state="translated">这是一个不透明的值,路由器将给自定义路由重用策略存储并在以后检索。</target>
        </trans-unit>
        <trans-unit id="47187f9c60a312936c257bcbf674f7a846c9c3b7" translate="yes" xml:space="preserve">
          <source>This is disagreeable. The word, &lt;code&gt;appHighlight&lt;/code&gt;, is a terrible property name and it doesn't convey the property's intent.</source>
          <target state="translated">这是令人讨厌的。 &lt;code&gt;appHighlight&lt;/code&gt; 这个词是一个可怕的属性名称，它不能传达该属性的意图。</target>
        </trans-unit>
        <trans-unit id="402dd3cc505c92b3ebc8041d5e0f5ce4dca64317" translate="yes" xml:space="preserve">
          <source>This is especially useful when child components are defined with an empty path string, as in the following example. With this configuration, navigating to '/parent/10' creates the main child and aux components.</source>
          <target state="translated">当子组件被定义为空路径字符串时,这一点特别有用,就像下面的例子一样。在这种配置下,导航到'/parent/10'就会创建主子组件和辅助组件。</target>
        </trans-unit>
        <trans-unit id="f0a8eee1520084e40ddb251d4ee70816b2810239" translate="yes" xml:space="preserve">
          <source>This is how you associate a template with logic, which is defined in the component class.</source>
          <target state="translated">这就是如何将模板与逻辑关联起来,逻辑在组件类中定义。</target>
        </trans-unit>
        <trans-unit id="3a2de92bdd97f6fbeeca5fdc9ee29a195958c537" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following image, which displays the logging date.</source>
          <target state="translated">下面的图片说明了这一点,它显示了记录日期。</target>
        </trans-unit>
        <trans-unit id="4461ea0ba25396c618a6f8a0d7132ba6f60a3420" translate="yes" xml:space="preserve">
          <source>This is manifestly more complicated than &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and rightly so. The &lt;code&gt;NgFor&lt;/code&gt; directive has more features, both required and optional, than the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; shown in this guide. At minimum &lt;code&gt;NgFor&lt;/code&gt; needs a looping variable (&lt;code&gt;let hero&lt;/code&gt;) and a list (&lt;code&gt;heroes&lt;/code&gt;).</source>
          <target state="translated">显然，这比 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 更复杂。该 &lt;code&gt;NgFor&lt;/code&gt; 指令有更多的功能，必需的和可选的，比 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 本指南中显示。在最低 &lt;code&gt;NgFor&lt;/code&gt; 需要一个循环变量（ &lt;code&gt;let hero&lt;/code&gt; ）和列表（ &lt;code&gt;heroes&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7efe4c9363e221388c4cd38d8c3a512cea782501" translate="yes" xml:space="preserve">
          <source>This is often the case with &lt;em&gt;routing components&lt;/em&gt;. As a rule you test the component, not the router, and care only if the component navigates with the right address under the given conditions.</source>
          <target state="translated">&lt;em&gt;路由组件&lt;/em&gt;通常是这种情况。通常，您测试组件而不是路由器，并且仅在给定条件下使用正确的地址导航组件时才在意。</target>
        </trans-unit>
        <trans-unit id="60412eee3362861bf6dd3a41df31f62ad91b66a4" translate="yes" xml:space="preserve">
          <source>This is one of the three fundamental building blocks of Angular forms, along with &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It extends the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; class that implements most of the base functionality for accessing the value, validation status, user interactions and events.</source>
          <target state="translated">这是Angular表单的三个基本构建块之一，以及 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 。它扩展了 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 类，该类实现了用于访问值，验证状态，用户交互和事件的大多数基本功能。</target>
        </trans-unit>
        <trans-unit id="51b5158af868b9258e387116060b9c47ff8fb973" translate="yes" xml:space="preserve">
          <source>This is similar to the phone list component. The new wrinkle is the &lt;code&gt;RouteParams&lt;/code&gt; type annotation that identifies the &lt;code&gt;routeParams&lt;/code&gt; dependency.</source>
          <target state="translated">这类似于电话列表组件。新的皱纹是标识了 &lt;code&gt;routeParams&lt;/code&gt; 依赖项的 &lt;code&gt;RouteParams&lt;/code&gt; 类型注释。</target>
        </trans-unit>
        <trans-unit id="804a4031c3f14f499869d2204177c75dee70978b" translate="yes" xml:space="preserve">
          <source>This is the SHA1 hash of the most up-to-date version of the app that the service worker knows about.</source>
          <target state="translated">这是服务人员所知道的应用程序最新版本的SHA1哈希值。</target>
        </trans-unit>
        <trans-unit id="16525e697531723027c408ae314d617a3cee22fa" translate="yes" xml:space="preserve">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">这是 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 的基类。</target>
        </trans-unit>
        <trans-unit id="32e4434471515868a1b3925d1547dbdde41ab113" translate="yes" xml:space="preserve">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">这是 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 的基类。</target>
        </trans-unit>
        <trans-unit id="09772e314d49341cf87eb2642be70a9dc5fc7d9f" translate="yes" xml:space="preserve">
          <source>This is the default option.</source>
          <target state="translated">这是默认选项。</target>
        </trans-unit>
        <trans-unit id="2f800de1b08868e8b8e49cce1d56cd86eef0162b" translate="yes" xml:space="preserve">
          <source>This is the inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">这是内部的 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cff98b359039fbd0f2a88788c0ca5a17c544f06f" translate="yes" xml:space="preserve">
          <source>This is the outer &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">这是外部 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6fbcbb942159ed1a22b254df114719bad20d47a4" translate="yes" xml:space="preserve">
          <source>This is the perfect infiltration job for a directive. The heroes will never know they're being watched.</source>
          <target state="translated">这是个完美的指令渗透工作。英雄们永远不会知道他们被监视了。</target>
        </trans-unit>
        <trans-unit id="4ccba53d17df213bee27c394101fd3424e3c0b6f" translate="yes" xml:space="preserve">
          <source>This is the place to free resources that won't be garbage collected automatically. Unsubscribe from Observables and DOM events. Stop interval timers. Unregister all callbacks that this directive registered with global or application services. You risk memory leaks if you neglect to do so.</source>
          <target state="translated">这里是释放资源的地方,这些资源不会被自动收集。取消订阅Observables和DOM事件。停止间隔定时器。取消注册该指令在全局或应用服务中注册的所有回调。如果你忽视了这一点,你就会有内存泄漏的风险。</target>
        </trans-unit>
        <trans-unit id="87a555dd35ff17530be3a1fe3b938e47130474eb" translate="yes" xml:space="preserve">
          <source>This is the simplest production-ready deployment of your application.</source>
          <target state="translated">这是您的应用程序最简单的生产就绪部署。</target>
        </trans-unit>
        <trans-unit id="c58e06956699ce3b5d0d19719918b6ae26cfc2f3" translate="yes" xml:space="preserve">
          <source>This is the time to notify another part of the application that the component is going away.</source>
          <target state="translated">这时要通知应用程序的另一个部分,该组件将离开。</target>
        </trans-unit>
        <trans-unit id="5d3cebde8a1c748058ff6feaf6d6fd7fffbd33c4" translate="yes" xml:space="preserve">
          <source>This is used to parse the response appropriately before returning it to the requestee.</source>
          <target state="translated">这用于在返回给请求者之前适当地解析响应。</target>
        </trans-unit>
        <trans-unit id="4575447306482a712f678b2a9d395b8a07e7fe6d" translate="yes" xml:space="preserve">
          <source>This is usually created automatically by &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt;.</source>
          <target state="translated">这通常是由 &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt; 自动创建的。</target>
        </trans-unit>
        <trans-unit id="8d4f6bc5f09e6fd5355e7d9f2a9258c893547afc" translate="yes" xml:space="preserve">
          <source>This is very important since it allows you to repurpose the components for any type of survey as long as it's compatible with the &lt;em&gt;question&lt;/em&gt; object model. The key is the dynamic data binding of metadata used to render the form without making any hardcoded assumptions about specific questions. In addition to control metadata, you are also adding validation dynamically.</source>
          <target state="translated">这非常重要，因为它允许您将组件重新用于任何类型的调查，只要它与&lt;em&gt;问题&lt;/em&gt;对象模型兼容即可。关键是用于呈现表单的元数据的动态数据绑定，而无需对特定问题进行任何硬编码的假设。除了控制元数据外，您还动态添加了验证。</target>
        </trans-unit>
        <trans-unit id="30cc4dc7a4b6f15bc6646908fab43b52eb183eb7" translate="yes" xml:space="preserve">
          <source>This isn't an oversight. Angular doesn't offer such pipes because they perform poorly and prevent aggressive minification. Both &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; require parameters that reference object properties. Earlier in this page, you learned that such pipes must be &lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;impure&lt;/a&gt; and that Angular calls impure pipes in almost every change-detection cycle.</source>
          <target state="translated">这不是疏忽。Angular不提供此类管道，因为它们的性能较差并阻止了主动缩小。两个 &lt;code&gt;filter&lt;/code&gt; 和 &lt;code&gt;orderBy&lt;/code&gt; 要求参数参考对象属性。在此页面的前面，您了解到此类管道必须是&lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;不纯的&lt;/a&gt;，并且Angular在几乎每个变更检测周期中都调用不纯管道。</target>
        </trans-unit>
        <trans-unit id="bf87feeb4d56bb09ecc40ffedbf5b9b09eea90de" translate="yes" xml:space="preserve">
          <source>This isn't necessarily good design. This example is examining &lt;em&gt;whether a component can inject its parent via the parent's base class&lt;/em&gt;.</source>
          <target state="translated">这不一定是好的设计。此示例正在检查&lt;em&gt;组件是否可以通过父级的基类注入其父级&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6eaca4844068379a7e60176fbbfc6443308fe713" translate="yes" xml:space="preserve">
          <source>This isn't usually a problem, especially if you adhere to the recommended &lt;em&gt;one class per file&lt;/em&gt; rule. But sometimes circular references are unavoidable. You're in a bind when class 'A' refers to class 'B' and 'B' refers to 'A'. One of them has to be defined first.</source>
          <target state="translated">通常这不是问题，特别是如果您遵循建议的&lt;em&gt;每个文件一个类的&lt;/em&gt;规则。但是有时循环引用是不可避免的。当类&amp;ldquo; A&amp;rdquo;指代&amp;ldquo; B&amp;rdquo;而&amp;ldquo; B&amp;rdquo;指代&amp;ldquo; A&amp;rdquo;时，您处于困境。首先必须定义其中之一。</target>
        </trans-unit>
        <trans-unit id="ee0b3ac2c6c7f7ea1c3093b1d935ac0ccfed0cd9" translate="yes" xml:space="preserve">
          <source>This list of modules are those that export components, directives, or pipes that the component templates in this module reference. In this case, the component is &lt;code&gt;AppComponent&lt;/code&gt;, which references components, directives, or pipes in &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. A component template can reference another component, directive, or pipe when the referenced class is declared in this module or the class was imported from another module.</source>
          <target state="translated">此模块列表是导出该模块中的组件模板引用的组件，指令或管道的模块。在这种情况下，组件是 &lt;code&gt;AppComponent&lt;/code&gt; ，它在 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 中引用组件，指令或管道。当在此模块中声明了所引用的类或从另一个模块导入了该类时，组件模板可以引用另一个组件，指令或管道。</target>
        </trans-unit>
        <trans-unit id="4a9afe5b810e772d3eb663f9b40c1dd4d79aaccb" translate="yes" xml:space="preserve">
          <source>This makes the controller code look a lot more like Angular already. You're all set to actually introduce Angular into the project.</source>
          <target state="translated">这使得控制器代码看起来已经更像Angular了。你已经准备好将Angular真正引入到项目中了。</target>
        </trans-unit>
        <trans-unit id="cf52b88eeaa1d49f9b18045164c3a40eae3476c3" translate="yes" xml:space="preserve">
          <source>This makes the provider visible to every class in the application that knows the provider's lookup token, or name.</source>
          <target state="translated">这使得提供者对应用程序中每一个知道提供者的查找标记或名称的类都可见。</target>
        </trans-unit>
        <trans-unit id="e402b132534c7c9be62f7464642b0941cc482405" translate="yes" xml:space="preserve">
          <source>This mapping ensures that your library always loads the local copies of the modules it needs.</source>
          <target state="translated">这个映射确保你的库总是加载它所需要的模块的本地副本。</target>
        </trans-unit>
        <trans-unit id="31460d71bf9e1b081028cbc8de1171f82e87335e" translate="yes" xml:space="preserve">
          <source>This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use &lt;code&gt;resetTestEnvironment&lt;/code&gt;.</source>
          <target state="translated">只能调用一次，以在当前平台上为当前测试套件设置通用提供程序。如果您绝对需要更改提供程序，请首先使用 &lt;code&gt;resetTestEnvironment&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61958d29a3c8058968147c18b0f01bb5c73d67d0" translate="yes" xml:space="preserve">
          <source>This may seem like what the app has been doing all along. Not quite. The &lt;code&gt;AppModule&lt;/code&gt; is loaded when the application starts; that's &lt;em&gt;eager&lt;/em&gt; loading. Now the &lt;code&gt;AdminModule&lt;/code&gt; loads only when the user clicks on a link; that's &lt;em&gt;lazy&lt;/em&gt; loading.</source>
          <target state="translated">这看起来似乎是该应用一直以来所做的事情。不完全的。所述 &lt;code&gt;AppModule&lt;/code&gt; 应用程序启动时被加载; 这是&lt;em&gt;渴望&lt;/em&gt;加载。现在，仅当用户单击链接时才加载 &lt;code&gt;AdminModule&lt;/code&gt; 。这是&lt;em&gt;延迟&lt;/em&gt;加载。</target>
        </trans-unit>
        <trans-unit id="12bc8c3aa7a62420ea2cb6d2e429c4880c25f7b6" translate="yes" xml:space="preserve">
          <source>This may seem restrictive but it's also fast. An object reference check is fast&amp;mdash;much faster than a deep check for differences&amp;mdash;so Angular can quickly determine if it can skip both the pipe execution and a view update.</source>
          <target state="translated">这似乎很严格，但速度很快。对象引用检查很快（比深入检查差异快得多），因此Angular可以快速确定它是否可以跳过管道执行和视图更新。</target>
        </trans-unit>
        <trans-unit id="5ad5340f87862c854151cf06f5fd6043a1b00b74" translate="yes" xml:space="preserve">
          <source>This means that an NgModule behaves differently depending on whether it's loaded during application start or lazy-loaded later. Neglecting that difference can lead to &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;adverse consequences&lt;/a&gt;.</source>
          <target state="translated">这意味着NgModule的行为会有所不同，具体取决于它是在应用程序启动期间加载还是在以后延迟加载。忽视这种差异会导致&lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;不利的后果&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e6e948c64201b9f8912c19889c92106c85c33fc" translate="yes" xml:space="preserve">
          <source>This means that when you build your production configuration (using &lt;code&gt;ng build --prod&lt;/code&gt; or &lt;code&gt;ng build --configuration=production&lt;/code&gt;), the &lt;code&gt;src/environments/environment.ts&lt;/code&gt; file is replaced with the target-specific version of the file, &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt;.</source>
          <target state="translated">这意味着在构建生产配置时（使用 &lt;code&gt;ng build --prod&lt;/code&gt; 或 &lt;code&gt;ng build --configuration=production&lt;/code&gt; ）， &lt;code&gt;src/environments/environment.ts&lt;/code&gt; 文件将替换为文件的目标特定版本 &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b42c601f1b0de6ca86d93b51f7a4f0d84c91d6c" translate="yes" xml:space="preserve">
          <source>This means you're responsible for putting &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; on your service classes.</source>
          <target state="translated">这意味着您有责任在服务类上添加 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b37292a0b3e74c75b71eca67292a0c0b9392a296" translate="yes" xml:space="preserve">
          <source>This method also updates the value and validity of the control.</source>
          <target state="translated">该方法还可以更新控件的值和有效性。</target>
        </trans-unit>
        <trans-unit id="e754eab77abab498cd7f7a0b1268613ab289c6ed" translate="yes" xml:space="preserve">
          <source>This method does not update the value or validity of the control. Use &lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt; instead.</source>
          <target state="translated">此方法不会更新控件的值或有效性。请改用&lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="100a8e77d4f74abe1033d79495767430a1882094" translate="yes" xml:space="preserve">
          <source>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</source>
          <target state="translated">当值从视图传播到模型时,表单API在初始化时调用该方法来更新表单模型。</target>
        </trans-unit>
        <trans-unit id="957d45ae3b8977944714e03589b7ce213ef76cbd" translate="yes" xml:space="preserve">
          <source>This method is called by the forms API to write to the view when programmatic changes from model to view are requested.</source>
          <target state="translated">当要求从模型到视图的程序性更改时,该方法被表单API调用,以写入视图。</target>
        </trans-unit>
        <trans-unit id="d4c0ca924e5a897aa17682cd4a412c4b9b49e4bc" translate="yes" xml:space="preserve">
          <source>This method is for development and testing only, and is not a supported or secure way of deploying an application.</source>
          <target state="translated">此方法仅用于开发和测试,不是部署应用程序的受支持或安全的方式。</target>
        </trans-unit>
        <trans-unit id="07d75e6c897ca8fced62ff854dd31dff479c1ea8" translate="yes" xml:space="preserve">
          <source>This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API methods such as &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;. If you need to support older browsers (like IE9 or Android &amp;lt; 4.0), don't use this method.</source>
          <target state="translated">仅在HTML5模式下以及在支持HTML5 History API方法（例如 &lt;code&gt;pushState&lt;/code&gt; 和 &lt;code&gt;replaceState&lt;/code&gt; )的浏览器中才支持此方法。如果您需要支持较旧的浏览器（例如IE9或Android &amp;lt;4.0），请不要使用此方法。</target>
        </trans-unit>
        <trans-unit id="582cc9eb2f1253026d9fec705c1a27f27a1e5797" translate="yes" xml:space="preserve">
          <source>This method performs strict checks, and throws an error if you try to set the value of a control that doesn't exist or if you exclude the value of a control.</source>
          <target state="translated">这个方法会进行严格的检查,如果你试图设置一个不存在的控件的值,或者排除一个控件的值,就会抛出一个错误。</target>
        </trans-unit>
        <trans-unit id="38f2789fcaf15e04940002919821b82465849aa8" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;code&gt;Promise&lt;/code&gt; which indicates that the update check has completed successfully, though it does not indicate whether an update was discovered as a result of the check. Even if one is found, the service worker must still successfully download the changed files, which can fail. If successful, the &lt;code&gt;available&lt;/code&gt; event will indicate availability of a new version of the app.</source>
          <target state="translated">此方法返回一个 &lt;code&gt;Promise&lt;/code&gt; ，它指示更新检查已成功完成，尽管它并不指示是否由于检查结果而发现了更新。即使找到一个，服务人员也必须成功下载更改的文件，否则可能会失败。如果成功， &lt;code&gt;available&lt;/code&gt; 事件将指示该应用程序新版本的可用性。</target>
        </trans-unit>
        <trans-unit id="7240a76f2e460d49075a05cb693f1cf044c80345" translate="yes" xml:space="preserve">
          <source>This might seem strange if you're used to dependency injection in strongly typed languages where an interface is the preferred dependency lookup key. However, JavaScript, doesn't have interfaces, so when TypeScript is transpiled to JavaScript, the interface disappears. There is no interface type information left for Angular to find at runtime.</source>
          <target state="translated">如果你习惯了强类型语言中的依赖注入,这可能会显得很奇怪,因为在强类型语言中,接口是首选的依赖查找键。然而,JavaScript,并没有接口,所以当TypeScript被转码到JavaScript时,接口就消失了。Angular在运行时没有留下接口类型信息供其查找。</target>
        </trans-unit>
        <trans-unit id="01a6160cc6927cc87e97af3ca12f5d7c3e578c05" translate="yes" xml:space="preserve">
          <source>This module defines a &lt;code&gt;routes&lt;/code&gt; object with two routes to the two phone components and a default route for the empty path. It passes the &lt;code&gt;routes&lt;/code&gt; to the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method which does the rest.</source>
          <target state="translated">此模块定义一个 &lt;code&gt;routes&lt;/code&gt; 对象，该对象具有到两个电话组件的两条路由，以及一条空路径的默认路由。它将 &lt;code&gt;routes&lt;/code&gt; 传递给 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; 方法，剩下的事情将由该方法完成。</target>
        </trans-unit>
        <trans-unit id="81b384ca39cda92728b7bd10a1501aede53ebbbb" translate="yes" xml:space="preserve">
          <source>This next example binds an &lt;code&gt;Observable&lt;/code&gt; of message strings (&lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt;) to a view with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe.</source>
          <target state="translated">下一个示例使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; 管道将 &lt;code&gt;Observable&lt;/code&gt; 消息字符串（ &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt; ）绑定到视图。</target>
        </trans-unit>
        <trans-unit id="1f28fed5c95e4e5fc2cf216bb7edd12cd2cdd95f" translate="yes" xml:space="preserve">
          <source>This one root component is usually called &lt;code&gt;AppComponent&lt;/code&gt; and is in the root module's &lt;code&gt;bootstrap&lt;/code&gt; array.</source>
          <target state="translated">这个根组件通常称为 &lt;code&gt;AppComponent&lt;/code&gt; ，位于根模块的 &lt;code&gt;bootstrap&lt;/code&gt; 数组中。</target>
        </trans-unit>
        <trans-unit id="553c357233905d7a357b67f87ff6741c54ba7d0c" translate="yes" xml:space="preserve">
          <source>This option can take one of the following &lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;sub-commands&lt;/a&gt;:</source>
          <target state="translated">该选项可以采用以下&lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;子命令之一&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7e2bdd9bc4821ec6e25c48f5020fa352d5d592c1" translate="yes" xml:space="preserve">
          <source>This option is intended to validate the &lt;code&gt;.metadata.json&lt;/code&gt; files emitted for bundling with an &lt;code&gt;npm&lt;/code&gt; package. The validation is strict and can emit errors for metadata that would never produce an error when used by the template compiler. You can choose to suppress the error emitted by this option for an exported symbol by including &lt;code&gt;@dynamic&lt;/code&gt; in the comment documenting the symbol.</source>
          <target state="translated">此选项用于验证为与 &lt;code&gt;npm&lt;/code&gt; 软件包捆绑而发出的 &lt;code&gt;.metadata.json&lt;/code&gt; 文件。验证是严格的，并且会针对元数据发出错误，该错误在由模板编译器使用时永远不会产生错误。您可以通过在记录符号的注释中包含 &lt;code&gt;@dynamic&lt;/code&gt; 来选择抑制此选项为导出的符号发出的错误。</target>
        </trans-unit>
        <trans-unit id="d6eab3c2994a6a17d4115d07f1dae680ac2ec26d" translate="yes" xml:space="preserve">
          <source>This option is only available if application URLs look like normal web URLs without hashes (#) in the middle.</source>
          <target state="translated">只有当应用程序的URL看起来像普通的Web URL,中间没有哈希值(#)时,这个选项才可用。</target>
        </trans-unit>
        <trans-unit id="b706956040eab679c0d00e95b8bd1fb93cd1e1bf" translate="yes" xml:space="preserve">
          <source>This optional section enables you to specify a custom list of URLs that will be redirected to the index file.</source>
          <target state="translated">这个可选的部分可以让你指定一个将被重定向到索引文件的URL的自定义列表。</target>
        </trans-unit>
        <trans-unit id="d49647d5cde74d419f8b7a1440d72e1fa1cdb7e9" translate="yes" xml:space="preserve">
          <source>This page answers the questions many developers ask about NgModule design and implementation.</source>
          <target state="translated">本页回答了许多开发者提出的关于NgModule设计和实现的问题。</target>
        </trans-unit>
        <trans-unit id="e470076e6470a706c5e7519008e46a929c297415" translate="yes" xml:space="preserve">
          <source>This page covered how to use the &lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt; package to incrementally upgrade existing AngularJS apps at your own pace and without impeding further development of the app for the duration of the upgrade process.</source>
          <target state="translated">本页面介绍了如何使用&lt;a href=&quot;../api/upgrade/static&quot;&gt;升级/静态&lt;/a&gt;软件包以您自己的步调逐步升级现有的AngularJS应用，并且在升级过程中不妨碍应用的进一步开发。</target>
        </trans-unit>
        <trans-unit id="81be0c6f770103c818ad9a59d216fef97dd57b87" translate="yes" xml:space="preserve">
          <source>This page covered how to:</source>
          <target state="translated">本页介绍了如何。</target>
        </trans-unit>
        <trans-unit id="c3d2f38bcda77f3d0e583e4cbd59a23c93e26dd3" translate="yes" xml:space="preserve">
          <source>This page covers some aspects of TypeScript configuration and the TypeScript environment that are important to Angular developers, including details about the following files:</source>
          <target state="translated">本页涵盖了TypeScript配置和TypeScript环境的一些方面,这些方面对Angular开发者很重要,包括以下文件的细节。</target>
        </trans-unit>
        <trans-unit id="dc6463bb109d0d9d7a3485b00e656aa5ad4447d1" translate="yes" xml:space="preserve">
          <source>This page demonstrates building a simple &lt;em&gt;appHighlight&lt;/em&gt; attribute directive to set an element's background color when the user hovers over that element. You can apply it like this:</source>
          <target state="translated">该页面演示了如何构建一个简单的&lt;em&gt;appHighlight&lt;/em&gt;属性指令，以在用户将鼠标悬停在该元素上时设置其背景颜色。您可以这样应用它：</target>
        </trans-unit>
        <trans-unit id="f41f995aa12a74f7c35870947d8b3dfcd851015a" translate="yes" xml:space="preserve">
          <source>This page describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication (&lt;em&gt;Who is this user?&lt;/em&gt;) and authorization (&lt;em&gt;What can this user do?&lt;/em&gt;).</source>
          <target state="translated">本页介绍了Angular的内置保护措施，可防止常见的Web应用程序漏洞和攻击（如跨站点脚本攻击）。它不涉及应用程序级别的安全性，例如身份验证（&lt;em&gt;此用户是谁？&lt;/em&gt;）和授权（&lt;em&gt;此用户可以做什么？&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="b0a26a5d944df815f572ce97ca9af1ebb2bdb5a7" translate="yes" xml:space="preserve">
          <source>This page describes how to load and apply these component styles.</source>
          <target state="translated">本页介绍如何加载和应用这些组件样式。</target>
        </trans-unit>
        <trans-unit id="09ae81e8cd8b8d7fc27be03d544055e093469b55" translate="yes" xml:space="preserve">
          <source>This page discusses best practices for designing Angular applications that work well for all users, including those who rely on assistive technologies.</source>
          <target state="translated">本页讨论了设计Angular应用的最佳实践,这些应用适合所有用户,包括那些依赖辅助技术的用户。</target>
        </trans-unit>
        <trans-unit id="670a5a082b047a72ce1a558bd250325e58e09d59" translate="yes" xml:space="preserve">
          <source>This page discusses build-specific configuration options for Angular projects.</source>
          <target state="translated">本页讨论了Angular项目的特定构建配置选项。</target>
        </trans-unit>
        <trans-unit id="cbfa8125c3023f0e5a452262dd4b80eb0950ad8c" translate="yes" xml:space="preserve">
          <source>This page is a comprehensive technical reference to the Angular template language. It explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.</source>
          <target state="translated">本页是Angular模板语言的综合技术参考。它解释了模板语言的基本原理,并描述了你在文档其他地方会遇到的大部分语法。</target>
        </trans-unit>
        <trans-unit id="7fad648d853b5ed4d555cb38fbfbacd9ba7992b6" translate="yes" xml:space="preserve">
          <source>This page is a reference for deploying and supporting production apps that use the Angular service worker. It explains how the Angular service worker fits into the larger production environment, the service worker's behavior under various conditions, and available resources and fail-safes.</source>
          <target state="translated">本页是部署和支持使用 Angular 服务工作者的生产应用程序的参考。它解释了Angular服务工作者如何融入更大的生产环境,服务工作者在各种条件下的行为,以及可用的资源和故障安全。</target>
        </trans-unit>
        <trans-unit id="97c20e865f128e08c87e8b02ca1209e92134e457" translate="yes" xml:space="preserve">
          <source>This page shows how to validate user input in the UI and display useful validation messages using both reactive and template-driven forms. It assumes some basic knowledge of the two forms modules.</source>
          <target state="translated">本页介绍了如何使用反应式和模板驱动的表单在用户界面中验证用户输入并显示有用的验证信息。它假定你对这两个表单模块有一些基本的了解。</target>
        </trans-unit>
        <trans-unit id="5d4c0327323a7a67f27b56ff84bda976d2f25fa4" translate="yes" xml:space="preserve">
          <source>This page shows you how to build a simple form from scratch. Along the way you'll learn how to:</source>
          <target state="translated">本页向你展示了如何从头开始构建一个简单的表单。在此过程中,你将学会如何。</target>
        </trans-unit>
        <trans-unit id="809f471c9fda21049d71c0885d6f8ee1429911d6" translate="yes" xml:space="preserve">
          <source>This particular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; call returns an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;; that is, &quot;&lt;em&gt;an observable of hero arrays&lt;/em&gt;&quot;. In practice, it will only return a single hero array.</source>
          <target state="translated">这个特定的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 调用返回一个 &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; ；即&amp;ldquo; &lt;em&gt;可观察到的英雄阵列&lt;/em&gt; &amp;rdquo;。实际上，它只会返回一个英雄数组。</target>
        </trans-unit>
        <trans-unit id="d836ca04f6cff950392c8ae7f7d0cf1a60a94c96" translate="yes" xml:space="preserve">
          <source>This particular test suite supplies a minimal mock of the &lt;code&gt;UserService&lt;/code&gt; that satisfies the needs of the &lt;code&gt;WelcomeComponent&lt;/code&gt; and its tests:</source>
          <target state="translated">这个特定的测试套件提供了 &lt;code&gt;UserService&lt;/code&gt; 的最小模型，可以满足 &lt;code&gt;WelcomeComponent&lt;/code&gt; 及其测试的需求：</target>
        </trans-unit>
        <trans-unit id="ff6ecdb8628c90cfa56e0ff26fbdce1243318d07" translate="yes" xml:space="preserve">
          <source>This pipe definition reveals the following key points:</source>
          <target state="translated">这个管道定义揭示了以下要点。</target>
        </trans-unit>
        <trans-unit id="9c06cdda191efa55a95c5ebbcd3348ce80c0d189" translate="yes" xml:space="preserve">
          <source>This platform has to be included in any other platform</source>
          <target state="translated">这个平台必须包含在任何其他平台中。</target>
        </trans-unit>
        <trans-unit id="1a66dd83805fb99c52388b0a549137c596348fd3" translate="yes" xml:space="preserve">
          <source>This produces the following error:</source>
          <target state="translated">这将产生以下错误。</target>
        </trans-unit>
        <trans-unit id="cc28ea5e9b1a6b51e4c29ff84265e5f10b52e574" translate="yes" xml:space="preserve">
          <source>This registers Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; providers globally.</source>
          <target state="translated">这将在全球范围内注册Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 提供程序。</target>
        </trans-unit>
        <trans-unit id="40b2f3a8cf72659eb5e60961a2342494b2510413" translate="yes" xml:space="preserve">
          <source>This registers a drop-in replacement for the &lt;code&gt;$location&lt;/code&gt; provider in AngularJS. Once registered, all navigation, routing broadcast messages, and any necessary digest cycles in AngularJS triggered during navigation are handled by Angular. This gives you a single way to navigate within both sides of your hybrid application consistently.</source>
          <target state="translated">这将在AngularJS中注册 &lt;code&gt;$location&lt;/code&gt; 提供程序的直接替换。一旦注册，所有导航，路由广播消息以及导航期间触发的AngularJS中任何必要的摘要周期都将由Angular处理。这为您提供了一种在混合应用程序的两侧进行一致导航的单一方法。</target>
        </trans-unit>
        <trans-unit id="06f56de558de0a575487e683fea999edf392ee43" translate="yes" xml:space="preserve">
          <source>This request passes the &lt;code&gt;heroesURL&lt;/code&gt; as the first parameter and the callback function name as the second parameter. The response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</source>
          <target state="translated">该请求将 &lt;code&gt;heroesURL&lt;/code&gt; 作为第一个参数，并将回调函数名称作为第二个参数。响应被包装在回调函数中，该函数采用JSONP方法返回的可观察对象并将其通过管道传递给错误处理程序。</target>
        </trans-unit>
        <trans-unit id="d9fd7c2c4a20b1de98c590fa48930235dc6aba0d" translate="yes" xml:space="preserve">
          <source>This route redirects a URL that fully matches the empty path to the route whose path is &lt;code&gt;'/dashboard'&lt;/code&gt;.</source>
          <target state="translated">此路由会将与空路径完全匹配的URL重定向到其路径为 &lt;code&gt;'/dashboard'&lt;/code&gt; 的路由。</target>
        </trans-unit>
        <trans-unit id="6c41f8a018f7563801e156030ed8a8f8ca194ad0" translate="yes" xml:space="preserve">
          <source>This rule is essential to Angular's &quot;unidirectional data flow&quot; policy. You should never worry that reading a component value might change some other displayed value. The view should be stable throughout a single rendering pass.</source>
          <target state="translated">这条规则对于Angular的 &quot;单向数据流 &quot;策略是必不可少的。你永远不应该担心读取一个组件值可能会改变其他一些显示值。视图应该在整个单次渲染过程中保持稳定。</target>
        </trans-unit>
        <trans-unit id="0d1e4a2f1c53200691565434ab456d518f0bf3a4" translate="yes" xml:space="preserve">
          <source>This sample file is easy to translate without a special editor or knowledge of French.</source>
          <target state="translated">这个示例文件很容易翻译,不需要专门的编辑器或法语知识。</target>
        </trans-unit>
        <trans-unit id="480408f47c676f8c57b3cde5a055d6686d241608" translate="yes" xml:space="preserve">
          <source>This scenario causes your app to create a new instance every time, instead of using the singleton.</source>
          <target state="translated">这种情况会导致你的应用每次都要创建一个新的实例,而不是使用单子。</target>
        </trans-unit>
        <trans-unit id="99aa2e43a5383e16a847762330ebaee6bfd37ca5" translate="yes" xml:space="preserve">
          <source>This scoping restriction is a &lt;strong&gt;&lt;em&gt;styling modularity feature&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">此范围限制是&lt;strong&gt;&lt;em&gt;样式模块化功能&lt;/em&gt;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="31d68c7991b2366acf1e70e15d44815dc09ecff1" translate="yes" xml:space="preserve">
          <source>This script can be used both to deactivate &lt;code&gt;@angular/service-worker&lt;/code&gt; as well as any other Service Workers which might have been served in the past on your site.</source>
          <target state="translated">此脚本可用于停用 &lt;code&gt;@angular/service-worker&lt;/code&gt; 以及过去可能在您的站点上提供服务的任何其他Service Worker。</target>
        </trans-unit>
        <trans-unit id="c18fae7524b94c2e1854507242de01f07367e013" translate="yes" xml:space="preserve">
          <source>This section about &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; has its own . The following subsections highlight key points in the sample app.</source>
          <target state="translated">这是关于部分 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 有它自己的。以下小节重点介绍了示例应用程序中的关键点。</target>
        </trans-unit>
        <trans-unit id="b64223a794713879607f46b9296695b6693dcfef" translate="yes" xml:space="preserve">
          <source>This section assumes you are familiar with &lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt;.</source>
          <target state="translated">本部分假定您熟悉&lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="11a0d4f001f44cf92c4d038ced8939573bb0e86d" translate="yes" xml:space="preserve">
          <source>This section contains a complete list all of the currently-deprecated APIs, with details to help you plan your migration to a replacement.</source>
          <target state="translated">本节包含了所有当前已废弃的API的完整列表,并提供了帮助你计划迁移到替代API的细节。</target>
        </trans-unit>
        <trans-unit id="f5235be074b4aa0d4b2e76c1864190fa474d6ead" translate="yes" xml:space="preserve">
          <source>This section contains default build target options, used when no named alternative configuration is specified. See &lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;Default build targets&lt;/a&gt; below.</source>
          <target state="translated">本部分包含默认的构建目标选项，当未指定命名的替代配置时使用。请参阅下面的&lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;默认构建目标&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a6f4ac6b1d629df1dd4126322ebc082c11c00de6" translate="yes" xml:space="preserve">
          <source>This section covers changes you may have make to the server or to files deployed to the server.</source>
          <target state="translated">本节包括您可能对服务器或部署到服务器的文件所做的更改。</target>
        </trans-unit>
        <trans-unit id="1b184253cc42d7415bb50e2b1f1ae4bfa4d58e73" translate="yes" xml:space="preserve">
          <source>This section defines and names alternative configurations for different intended destinations. It contains a section for each named configuration, which sets the default options for that intended environment. See &lt;a href=&quot;workspace-config#build-configs&quot;&gt;Alternate build configurations&lt;/a&gt; below.</source>
          <target state="translated">本节定义和命名用于不同预期目标的替代配置。它包含每个命名配置的部分，该部分为该预期环境设置默认选项。请参阅下面的&lt;a href=&quot;workspace-config#build-configs&quot;&gt;备用构建配置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e7378faaab25e8cea0f89eb0420acd35173d6d0c" translate="yes" xml:space="preserve">
          <source>This section defines the policy by which matching requests will be cached.</source>
          <target state="translated">本节定义了缓存匹配请求的策略。</target>
        </trans-unit>
        <trans-unit id="085d9b2381ce33b95badee4ece65c04252ae8b07" translate="yes" xml:space="preserve">
          <source>This section demonstrates a service worker in action, using an example application.</source>
          <target state="translated">本节使用一个示例应用程序来演示服务人员的操作。</target>
        </trans-unit>
        <trans-unit id="b0beb9d185cb05154e1dd17453c7c97560febcea" translate="yes" xml:space="preserve">
          <source>This section demonstrates how to write providers that deliver dependent services.</source>
          <target state="translated">本节演示了如何编写提供依赖服务的提供者。</target>
        </trans-unit>
        <trans-unit id="eb2c533b5e2645aa61c4b0e279f37acd6ba4506b" translate="yes" xml:space="preserve">
          <source>This section describes how to add a single form control. In the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.</source>
          <target state="translated">本节介绍了如何添加单个表单控件。在这个例子中,用户在输入字段中输入自己的名字,捕获该输入值,并显示表单控件元素的当前值。</target>
        </trans-unit>
        <trans-unit id="8df9a0125bfce0a631c00cf027d6c0c9e9c21223" translate="yes" xml:space="preserve">
          <source>This section describes how to limit the scope of the beginning and ending &lt;code&gt;ElementInjector&lt;/code&gt; using the visibility decorators &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;, and &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">本节介绍如何使用可见性修饰符 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;（）， &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;（）和 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;（）来限制 &lt;code&gt;ElementInjector&lt;/code&gt; 的开始和结束范围。</target>
        </trans-unit>
        <trans-unit id="93a1f837d6690ccc5052bae1311690c80cb118fa" translate="yes" xml:space="preserve">
          <source>This section describes some techniques for doing that.</source>
          <target state="translated">本节介绍了一些这方面的技术。</target>
        </trans-unit>
        <trans-unit id="69a1ff0385a87975f95ae5a798ec38b6e1fa9506" translate="yes" xml:space="preserve">
          <source>This section describes the resources to cache, broken up into three groups.</source>
          <target state="translated">本节介绍了要缓存的资源,分为三组。</target>
        </trans-unit>
        <trans-unit id="25d342d94221065f56ba9567318ef23b976b78cb" translate="yes" xml:space="preserve">
          <source>This section describes two techniques for minimizing the setup. Use them, alone or in combination, to stay focused on the testing the primary component.</source>
          <target state="translated">本节介绍了两种最小化设置的技术。单独使用或结合使用它们,以保持专注于测试主要组件。</target>
        </trans-unit>
        <trans-unit id="4b6eb3ab67768fa1db1718443a20d6bef34cf012" translate="yes" xml:space="preserve">
          <source>This section enables you to pass any data you want that describes this particular version of the app. The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service includes that data in the update notifications. Many apps use this section to provide additional information for the display of UI popups, notifying users of the available update.</source>
          <target state="translated">此部分使您可以传递描述该应用程序特定版本的所有数据。该 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; 服务包括在更新通知的数据。许多应用程序使用此部分来提供用于显示UI弹出窗口的其他信息，从而将可用更新通知用户。</target>
        </trans-unit>
        <trans-unit id="47fc123a3ed1f0d231e027d8288971ed0c72aa21" translate="yes" xml:space="preserve">
          <source>This section explores many of the features of dependency injection (DI) in Angular.</source>
          <target state="translated">本节将探讨Angular中依赖注入(DI)的许多特性。</target>
        </trans-unit>
        <trans-unit id="3fbce57e38fce3ed83994d74968cf78f64dac167" translate="yes" xml:space="preserve">
          <source>This section guides you through the following:</source>
          <target state="translated">本节指导你完成以下工作。</target>
        </trans-unit>
        <trans-unit id="3a63d68a98a00a26a92cce922c9931db461a38cf" translate="yes" xml:space="preserve">
          <source>This section is an introduction to the common built-in structural directives:</source>
          <target state="translated">本节是对常见的内置结构指令的介绍。</target>
        </trans-unit>
        <trans-unit id="c4d630efe539af7ec5dfcdfbcacacc0d6a4f3dbc" translate="yes" xml:space="preserve">
          <source>This section lists all of the currently-deprecated features, which includes template syntax, configuration options, and any other deprecations not listed in the &lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;Deprecated APIs&lt;/a&gt; section above. It also includes deprecated API usage scenarios or API combinations, to augment the information above.</source>
          <target state="translated">本部分列出了所有当前不推荐使用的功能，其中包括模板语法，配置选项以及上面&amp;ldquo; &lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;不&lt;/a&gt;推荐使用的API&amp;rdquo;部分中未列出的其他任何不推荐使用的功能。它还包括已弃用的API使用场景或API组合，以增强上述信息。</target>
        </trans-unit>
        <trans-unit id="306aadf682fc11264f3cfeb1c732892c12664c75" translate="yes" xml:space="preserve">
          <source>This section shows how to animate elements entering or leaving a page.</source>
          <target state="translated">本节介绍了如何为进入或离开页面的元素制作动画。</target>
        </trans-unit>
        <trans-unit id="3b6e09c67f8a39342ff4c0257fcd5cc67bae2f2c" translate="yes" xml:space="preserve">
          <source>This section shows how to create asynchronous validators. It assumes some basic knowledge of creating &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators&lt;/a&gt;.</source>
          <target state="translated">本节说明如何创建异步验证器。它假定了创建&lt;a href=&quot;form-validation#custom-validators&quot;&gt;定制验证器的&lt;/a&gt;一些基本知识。</target>
        </trans-unit>
        <trans-unit id="c1876bae15f4c669767ab3331f67eef88c5960e8" translate="yes" xml:space="preserve">
          <source>This section shows how to perform cross field validation. It assumes some basic knowledge of creating custom validators.</source>
          <target state="translated">本节介绍了如何执行跨字段验证。它假设了一些创建自定义验证器的基本知识。</target>
        </trans-unit>
        <trans-unit id="40c08e782b8b4dce59c05abd346b382ec356f9f6" translate="yes" xml:space="preserve">
          <source>This section shows you how to add some &lt;a href=&quot;animations&quot;&gt;animations&lt;/a&gt; to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">本节将告诉您如何补充一些&lt;a href=&quot;animations&quot;&gt;动画&lt;/a&gt;的 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28698d05d33f5b1671f713ab414eca9161933dd5" translate="yes" xml:space="preserve">
          <source>This section shows you how to organize the crisis center to conform to the following recommended pattern for Angular applications:</source>
          <target state="translated">本节将向您展示如何组织危机中心,使其符合以下推荐的Angular应用模式。</target>
        </trans-unit>
        <trans-unit id="8555832b3f593de35864e26800451467378353f6" translate="yes" xml:space="preserve">
          <source>This section takes inventory of the most useful Angular testing features and summarizes what they do.</source>
          <target state="translated">本节将盘点最有用的Angular测试功能,并总结它们的作用。</target>
        </trans-unit>
        <trans-unit id="15bf3c33e1424399ab26287ac6065fe7557dd98a" translate="yes" xml:space="preserve">
          <source>This setup also calls &lt;code&gt;TestBed.get()&lt;/code&gt; to inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service and the mocking controller so they can be referenced during the tests.</source>
          <target state="translated">此设置还调用 &lt;code&gt;TestBed.get()&lt;/code&gt; 注入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 服务和模拟控制器，以便可以在测试期间引用它们。</target>
        </trans-unit>
        <trans-unit id="456f1cff8a28d651f522a6a70eb2cb94a641a08f" translate="yes" xml:space="preserve">
          <source>This setup guide uses the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm client&lt;/a&gt; command line interface, which is installed with &lt;code&gt;Node.js&lt;/code&gt; by default.</source>
          <target state="translated">本安装指南使用&lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm客户端&lt;/a&gt;命令行界面，默认情况下该界面与 &lt;code&gt;Node.js&lt;/code&gt; 一起安装。</target>
        </trans-unit>
        <trans-unit id="92609043e3a5049fe9cf167aad090f47caad57aa" translate="yes" xml:space="preserve">
          <source>This simple rule factory returns the tree without modification. The options are the option values passed through from the &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="translated">这个简单的规则工厂无需修改即可返回树。选项是从 &lt;code&gt;ng generate&lt;/code&gt; 命令传递的选项值。</target>
        </trans-unit>
        <trans-unit id="3d73db06502687b0e565f94857691c977b98bee9" translate="yes" xml:space="preserve">
          <source>This small test demonstrates how Angular tests can verify a component's visual representation&amp;mdash;something not possible with &lt;a href=&quot;testing#component-class-testing&quot;&gt;component class tests&lt;/a&gt;&amp;mdash;at low cost and without resorting to much slower and more complicated end-to-end tests.</source>
          <target state="translated">这项小型测试演示了Angular测试如何以低成本且无需求助于更慢且更复杂的端到端测试来验证组件的外观（这在&lt;a href=&quot;testing#component-class-testing&quot;&gt;组件类测试中&lt;/a&gt;是不可能的）。</target>
        </trans-unit>
        <trans-unit id="cb009288ce29b0288afe49f6ee2aab850b60725f" translate="yes" xml:space="preserve">
          <source>This snapshot reflects the state of the log after the user clicked the &lt;em&gt;Create...&lt;/em&gt; button and then the &lt;em&gt;Destroy...&lt;/em&gt; button.</source>
          <target state="translated">用户单击&amp;ldquo; &lt;em&gt;创建...&amp;rdquo;&lt;/em&gt;按钮然后单击&amp;ldquo; &lt;em&gt;销毁...&amp;rdquo;&lt;/em&gt;按钮后，此快照反映了日志的状态。</target>
        </trans-unit>
        <trans-unit id="079dfe1488f95b55bfe4eaaff729c5ed46abb14d" translate="yes" xml:space="preserve">
          <source>This step serves a purpose analogous to &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;whenStable()&lt;/code&gt; in the earlier &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; examples. The balance of the test is the same as those examples.</source>
          <target state="translated">此步骤的目的类似于先前的 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; （）和 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; （）示例中的 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;whenStable()&lt;/code&gt; 。测试的余额与这些示例相同。</target>
        </trans-unit>
        <trans-unit id="dd15d4d4538f8653d2b222f1a75f8aaa65446a2d" translate="yes" xml:space="preserve">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs.</source>
          <target state="translated">这种策略可以让你继续构建你的Web应用程序以支持多种浏览器,但只加载浏览器需要的必要代码。</target>
        </trans-unit>
        <trans-unit id="a6549f07c80220a17e94351180403481dcd649c2" translate="yes" xml:space="preserve">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs. For more information about how this works, see &lt;a href=&quot;deployment#differential-loading&quot;&gt;Differential Loading&lt;/a&gt; in the &lt;a href=&quot;deployment&quot;&gt;Deployment guide&lt;/a&gt;.</source>
          <target state="translated">通过此策略，您可以继续构建Web应用程序以支持多个浏览器，但仅加载浏览器所需的必要代码。有关此工作原理的更多信息，请参见《&lt;a href=&quot;deployment&quot;&gt;部署指南》&lt;/a&gt;中的&amp;ldquo; &lt;a href=&quot;deployment#differential-loading&quot;&gt;差异加载&lt;/a&gt; &amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="d7f27f72ef1db3f4b8e0b64ac49c35d1b3d860d4" translate="yes" xml:space="preserve">
          <source>This strategy is enabled by default.</source>
          <target state="translated">该策略默认为启用。</target>
        </trans-unit>
        <trans-unit id="b4dc934e925dfc611be024d59208b2dd13b6d211" translate="yes" xml:space="preserve">
          <source>This syntax conforms to the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU Message Format&lt;/a&gt; as specified in the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR pluralization rules&lt;/a&gt;.</source>
          <target state="translated">此语法符合&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR复数规则中&lt;/a&gt;指定的&lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU消息格式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a921404409acb321a0300d0ef76d994ae2a236f1" translate="yes" xml:space="preserve">
          <source>This syntax tells the Angular compiler to read the external files during component compilation.</source>
          <target state="translated">该语法告诉Angular编译器在组件编译时读取外部文件。</target>
        </trans-unit>
        <trans-unit id="f054420c1ce338910d0afb64bdc92e93d64d0562" translate="yes" xml:space="preserve">
          <source>This technique can improve performance on mobile and low-powered devices and improve the user experience by showing a static first page quickly while the client-side app is loading. The static version can also make your app more visible to web crawlers.</source>
          <target state="translated">这种技术可以提高移动设备和低功率设备的性能,并通过在客户端应用加载时快速显示静态首页来改善用户体验。静态版本也可以让你的应用对网络爬虫更加可见。</target>
        </trans-unit>
        <trans-unit id="ac27da6a3425110fb4858d56fa56042a9d64c44f" translate="yes" xml:space="preserve">
          <source>This technique is effective because all browsers implement the &lt;em&gt;same origin policy&lt;/em&gt;. Only code from the website on which cookies are set can read the cookies from that site and set custom headers on requests to that site. That means only your application can read this cookie token and set the custom header. The malicious code on &lt;code&gt;evil.com&lt;/code&gt; can't.</source>
          <target state="translated">该技术很有效，因为所有浏览器都实施&lt;em&gt;相同的原始策略&lt;/em&gt;。仅来自设置了Cookie的网站上的代码才能读取该网站上的Cookie，并在对该网站的请求上设置自定义标头。这意味着只有您的应用程序才能读取此Cookie令牌并设置自定义标头。 &lt;code&gt;evil.com&lt;/code&gt; 上的恶意代码不能。</target>
        </trans-unit>
        <trans-unit id="edaf5e02d43ccc1019d65ebdfbccee03f175b8c8" translate="yes" xml:space="preserve">
          <source>This technique is suitable for setting a single style, but consider the &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive when setting several inline styles at the same time.</source>
          <target state="translated">此技术适用于设置单个样式，但同时设置多个内联样式时请考虑使用&lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt;指令。</target>
        </trans-unit>
        <trans-unit id="f819a7b1e0aafa1d2068ac4808d42099765b1fd4" translate="yes" xml:space="preserve">
          <source>This technique works for any attribute of any element.</source>
          <target state="translated">这种技术适用于任何元素的任何属性。</target>
        </trans-unit>
        <trans-unit id="c1e03a2b5a2ead7f58623d3d33ead88c0cbed81a" translate="yes" xml:space="preserve">
          <source>This tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; preloader to immediately load &lt;em&gt;all&lt;/em&gt; lazy loaded routes (routes with a &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property).</source>
          <target state="translated">这告诉 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 预加载器立即加载&lt;em&gt;所有&lt;/em&gt;延迟加载的路由（具有 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 属性的路由）。</target>
        </trans-unit>
        <trans-unit id="02a67f3677df899c9872b4c722cacd0ea9415c83" translate="yes" xml:space="preserve">
          <source>This tells the router to match that URL to &lt;code&gt;path: 'heroes'&lt;/code&gt; and display the &lt;code&gt;HeroesComponent&lt;/code&gt; when the URL is something like &lt;code&gt;localhost:4200/heroes&lt;/code&gt;.</source>
          <target state="translated">这告诉路由器将该URL匹配到 &lt;code&gt;path: 'heroes'&lt;/code&gt; 并在URL类似于 &lt;code&gt;localhost:4200/heroes&lt;/code&gt; 时显示 &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b56327c98c0651adf92a3962b35326d9411155a9" translate="yes" xml:space="preserve">
          <source>This template binds directly to the component's &lt;code&gt;messageService&lt;/code&gt;.</source>
          <target state="translated">该模板直接绑定到组件的 &lt;code&gt;messageService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e9c43c15900050160dc8be35d6067a63318aec5" translate="yes" xml:space="preserve">
          <source>This template looks a lot like the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater in the &lt;code&gt;HeroesComponent&lt;/code&gt; template.</source>
          <target state="translated">该模板看起来很像 &lt;code&gt;HeroesComponent&lt;/code&gt; 模板中的 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 转发器。</target>
        </trans-unit>
        <trans-unit id="d637ab123347ac13fe17a004c73c98b4dddb234f" translate="yes" xml:space="preserve">
          <source>This template uses typical HTML elements like &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, and also includes Angular template-syntax elements, &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;{{hero.name}}&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, &lt;code&gt;[hero]&lt;/code&gt;, and &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt;. The template-syntax elements tell Angular how to render the HTML to the screen, using program logic and data.</source>
          <target state="translated">该模板使用典型的HTML元素，例如 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ，还包括Angular模板语法元素 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;{{hero.name}}&lt;/code&gt; ， &lt;code&gt;(click)&lt;/code&gt; ， &lt;code&gt;[hero]&lt;/code&gt; 和 &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; 。模板语法元素告诉Angular如何使用程序逻辑和数据将HTML呈现到屏幕上。</target>
        </trans-unit>
        <trans-unit id="33f50f397f4ca96e33bfb10d036f4db70c1735c8" translate="yes" xml:space="preserve">
          <source>This test expects the component to try to navigate to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">此测试希望该组件尝试导航到 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="501a5e4c0d88821fa944fe51ad014be796c1b208" translate="yes" xml:space="preserve">
          <source>This test host binds to &lt;code&gt;DashboardHeroComponent&lt;/code&gt; as the &lt;code&gt;DashboardComponent&lt;/code&gt; would but without the noise of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;HeroService&lt;/code&gt;, or the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater.</source>
          <target state="translated">该测试主机结合到 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 作为 &lt;code&gt;DashboardComponent&lt;/code&gt; 会，但没有噪声 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; ，该 &lt;code&gt;HeroService&lt;/code&gt; ，或 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 中继器。</target>
        </trans-unit>
        <trans-unit id="6f65de663612898c193d6874b17e0426d7e59e43" translate="yes" xml:space="preserve">
          <source>This testing module configuration shows three important differences:</source>
          <target state="translated">这个测试模块配置显示出三个重要的区别。</target>
        </trans-unit>
        <trans-unit id="750aba5f80080e328a3f7b0b79fa476b6891b62b" translate="yes" xml:space="preserve">
          <source>This text wraps around to the right of the floating &quot;flying hero&quot; image.</source>
          <target state="translated">这段文字环绕在浮动的 &quot;飞天英雄 &quot;形象的右侧。</target>
        </trans-unit>
        <trans-unit id="113e418e350b558b02724dea8b12bbcc059f4851" translate="yes" xml:space="preserve">
          <source>This time you'll be navigating in the opposite direction, from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">这次，您将以相反的方向从 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 导航到 &lt;code&gt;HeroListComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cefc645993bf706c88455dca56b4abc1e03879d3" translate="yes" xml:space="preserve">
          <source>This time, in addition to declaring the &lt;em&gt;component-under-test&lt;/em&gt;, the configuration adds a &lt;code&gt;UserService&lt;/code&gt; provider to the &lt;code&gt;providers&lt;/code&gt; list. But not the real &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">这次，除了声明&lt;em&gt;被测组件&lt;/em&gt;之外，该配置还将 &lt;code&gt;UserService&lt;/code&gt; 提供程序添加到 &lt;code&gt;providers&lt;/code&gt; 列表中。但不是真正的 &lt;code&gt;UserService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af2165b1138d7807abb0f9b20b74189222b793e4" translate="yes" xml:space="preserve">
          <source>This time, the value of &lt;code&gt;'popup'&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. That's not a route, but it is a legitimate value. Setting the popup &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; clears the outlet and removes the secondary popup route from the current URL.</source>
          <target state="translated">这次， &lt;code&gt;'popup'&lt;/code&gt; 值为 &lt;code&gt;null&lt;/code&gt; 。那不是一条路线，但这是一个合法的价值。将弹出的 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 设置为 &lt;code&gt;null&lt;/code&gt; 会清除出口，并从当前URL中删除辅助弹出路由。</target>
        </trans-unit>
        <trans-unit id="4d58a98a6b42341e9f6814cfed96b99344da3020" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the essentials of Angular by walking you through building a simple e-commerce site with a catalog, shopping cart, and check-out form. It uses the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment so you can get started right away.</source>
          <target state="translated">本教程通过逐步构建带有目录，购物车和结帐表格的简单电子商务网站，向您介绍Angular的基本知识。它使用&lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;在线开发环境，因此您可以立即开始。</target>
        </trans-unit>
        <trans-unit id="4be47255fc4c07ae300b4da88c16205f91d089d6" translate="yes" xml:space="preserve">
          <source>This tutorial sample mimics communication with a remote data server by using the &lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;In-memory Web API&lt;/a&gt; module.</source>
          <target state="translated">本教程示例使用&lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;内存中的Web API&lt;/a&gt;模块模拟与远程数据服务器的通信。</target>
        </trans-unit>
        <trans-unit id="d9d67a376ed76f9dd9f3998880f05555c2f237ea" translate="yes" xml:space="preserve">
          <source>This user experience is the developer's choice. Some developers want the message to display at all times. If you ignore the &lt;code&gt;pristine&lt;/code&gt; state, you would hide the message only when the value is valid. If you arrive in this component with a new (blank) hero or an invalid hero, you'll see the error message immediately, before you've done anything.</source>
          <target state="translated">这种用户体验是开发人员的选择。一些开发人员希望消息始终显示。如果忽略 &lt;code&gt;pristine&lt;/code&gt; 状态，则仅在该值有效时才隐藏消息。如果您带着新的（空白）英雄或无效的英雄到达此组件，则在执行任何操作之前，您将立即看到错误消息。</target>
        </trans-unit>
        <trans-unit id="7fe52a203b046ba6736edeae46dcac27488617b9" translate="yes" xml:space="preserve">
          <source>This version of the &lt;code&gt;HeroListComponent&lt;/code&gt; gets heroes from the &lt;code&gt;HEROES&lt;/code&gt; array, an in-memory collection defined in a separate &lt;code&gt;mock-heroes&lt;/code&gt; file.</source>
          <target state="translated">此版本的 &lt;code&gt;HeroListComponent&lt;/code&gt; 从 &lt;code&gt;HEROES&lt;/code&gt; 数组获取英雄，HEROES数组是在单独的 &lt;code&gt;mock-heroes&lt;/code&gt; 文件中定义的内存中集合。</target>
        </trans-unit>
        <trans-unit id="5ac5c50e4fc7fc8f690f46a387d86d6cd4e8a480" translate="yes" xml:space="preserve">
          <source>This will call the &lt;code&gt;ls&lt;/code&gt; command instead of the &lt;code&gt;touch&lt;/code&gt; command. Because we did not override the &lt;em&gt;args&lt;/em&gt; option, it will list information about the &lt;code&gt;src/main.ts&lt;/code&gt; file (the default value provided for the target).</source>
          <target state="translated">这将调用 &lt;code&gt;ls&lt;/code&gt; 命令，而不是 &lt;code&gt;touch&lt;/code&gt; 命令。因为我们没有覆盖&lt;em&gt;args&lt;/em&gt;选项，所以它将列出有关 &lt;code&gt;src/main.ts&lt;/code&gt; 文件的信息（为目标提供的默认值）。</target>
        </trans-unit>
        <trans-unit id="9312003f28c3729ef201319a34848ad897938e4a" translate="yes" xml:space="preserve">
          <source>This will install the command &lt;code&gt;ng&lt;/code&gt; into your system, which is the command you use to create new workspaces, new projects, serve your application during development, or produce builds that can be shared or distributed.</source>
          <target state="translated">这会将命令 &lt;code&gt;ng&lt;/code&gt; 安装到您的系统中，这是用于创建新工作区，新项目，在开发期间为应用程序提供服务或生成可以共享或分发的构建的命令。</target>
        </trans-unit>
        <trans-unit id="9bb5987cb75dc888fb534638627a4e1a3c031126" translate="yes" xml:space="preserve">
          <source>This will not work in a real app. You're getting away with it now because the service currently returns &lt;em&gt;mock heroes&lt;/em&gt;. But soon the app will fetch heroes from a remote server, which is an inherently &lt;em&gt;asynchronous&lt;/em&gt; operation.</source>
          <target state="translated">这在真正的应用程序中不起作用。您现在就无法使用它了，因为该服务当前已返回&lt;em&gt;模拟英雄&lt;/em&gt;。但是很快，该应用程序将从远程服务器获取英雄，这是一种固有的&lt;em&gt;异步&lt;/em&gt;操作。</target>
        </trans-unit>
        <trans-unit id="c8a4d0a01462100bf09cd9c7a8827ae3dcb63eb8" translate="yes" xml:space="preserve">
          <source>This will produce the files that you need to deploy.</source>
          <target state="translated">这将产生你需要部署的文件。</target>
        </trans-unit>
        <trans-unit id="9b630be3829ca4b43f0c0f13ae624094630240e5" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;touch&lt;/code&gt; command on the &lt;code&gt;src/main.ts&lt;/code&gt; file.</source>
          <target state="translated">这将运行 &lt;code&gt;touch&lt;/code&gt; 在 &lt;code&gt;src/main.ts&lt;/code&gt; 文件上 touch命令。</target>
        </trans-unit>
        <trans-unit id="4fb5514b164bef25ddca759f879da4b392519146" translate="yes" xml:space="preserve">
          <source>This will set the active-link class on the div tag if the url is either '/user/jim' or '/user/bob'.</source>
          <target state="translated">如果url是'/user/jim'或'/user/bob',这将在div标签上设置主动链接类。</target>
        </trans-unit>
        <trans-unit id="d430f7cac5ea324357497bb1e85a43cc3ac98f1a" translate="yes" xml:space="preserve">
          <source>This won't work if the service is an application-wide singleton. Every component would share the same service instance, and each component would overwrite the tax return that belonged to another hero.</source>
          <target state="translated">如果服务是一个应用程序范围内的单例,这将无法工作。每个组件都会共享同一个服务实例,而且每个组件都会覆盖属于另一个英雄的报税单。</target>
        </trans-unit>
        <trans-unit id="66ee2090966d8e328167f9dd11bd703bc89361b7" translate="yes" xml:space="preserve">
          <source>This worked well, but there's a better way. If you were using a real world API, there might be some delay before the data to display is returned from the server. You don't want to display a blank component while waiting for the data.</source>
          <target state="translated">这很好用,但还有更好的方法。如果你使用的是真实世界的API,在要显示的数据从服务器返回之前可能会有一些延迟。你不希望在等待数据的时候显示一个空白的组件。</target>
        </trans-unit>
        <trans-unit id="3030da2c36d0ffb5bb1a38f3d3ab06bd0ba9aebe" translate="yes" xml:space="preserve">
          <source>Those developers may still use HTML5 URLs by taking two remedial steps:</source>
          <target state="translated">这些开发者仍然可以通过采取两个补救措施来使用HTML5 URL。</target>
        </trans-unit>
        <trans-unit id="a4c3697ed1231b34be5a06d277ed21d7aec6aac6" translate="yes" xml:space="preserve">
          <source>Those three steps look like the following. In the file where you create your directive, export it. The following example, named &lt;code&gt;ItemDirective&lt;/code&gt; is the default directive structure that the CLI generates in its own file, &lt;code&gt;item.directive.ts&lt;/code&gt;:</source>
          <target state="translated">这三个步骤如下所示。在您创建指令的文件中，将其导出。下面的示例名为 &lt;code&gt;ItemDirective&lt;/code&gt; 是CLI在其自己的文件 &lt;code&gt;item.directive.ts&lt;/code&gt; 中生成的默认指令结构：</target>
        </trans-unit>
        <trans-unit id="7282182d46ba8591a3fb80eb88450d7e6e0fb75f" translate="yes" xml:space="preserve">
          <source>Though &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; shouldn't have &lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;side effects&lt;/a&gt;, template statements usually do. The &lt;code&gt;deleteItem()&lt;/code&gt; method does have a side effect: it deletes an item.</source>
          <target state="translated">虽然&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;模板表达式&lt;/a&gt;不应该有&lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;副作用&lt;/a&gt;，但是模板语句通常。的 &lt;code&gt;deleteItem()&lt;/code&gt; 方法确实有一个副作用：它删除的项目。</target>
        </trans-unit>
        <trans-unit id="8b45283f651e66eedd857eedb3d79dccba5ecff8" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; provides the 🌻 (sunflower), the app renders the 🌺 (red hibiscus) because &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; causes the current injector to skip itself and look to its parent.</source>
          <target state="translated">尽管 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 提供了🌻（向日葵），但该应用却渲染了🌺（红芙蓉），因为 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 导致当前的注射器自身跳过并转向其父级。</target>
        </trans-unit>
        <trans-unit id="1075a1e80e7f93a1f8a46fd5766714abf59a2e2d" translate="yes" xml:space="preserve">
          <source>Though &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; often appear together in apps, you can use them separately. If the nested component is such that it only needs to send data to its parent, you wouldn't need an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, only an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;. The reverse is also true in that if the child only needs to receive data from the parent, you'd only need &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">尽管 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 通常在应用程序中同时出现，但是您可以单独使用它们。如果嵌套组件是这样的，它只需将数据发送到其父，你不会需要一个 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ，只有一个 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 。反之亦然，如果子级只需要从父级接收数据，则只需要 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76c63fbb51bf2e00185f379ad812f423247e2cf5" translate="yes" xml:space="preserve">
          <source>Though &lt;em&gt;highlight&lt;/em&gt; would be a more concise selector than &lt;em&gt;appHighlight&lt;/em&gt; and it would work, the best practice is to prefix selector names to ensure they don't conflict with standard HTML attributes. This also reduces the risk of colliding with third-party directive names. The CLI added the &lt;code&gt;app&lt;/code&gt; prefix for you.</source>
          <target state="translated">尽管&lt;em&gt;高亮&lt;/em&gt;比&lt;em&gt;appHighlight&lt;/em&gt;更为简洁&lt;em&gt;&lt;/em&gt;和它的工作，最好的做法是选择前缀名称，以确保他们不会使用标准的HTML属性冲突。这也降低了与第三方指令名称冲突的风险。 CLI 为您添加了 &lt;code&gt;app&lt;/code&gt; 前缀。</target>
        </trans-unit>
        <trans-unit id="e7794513d8ab6b404efc84e17a85b45fb430b7cb" translate="yes" xml:space="preserve">
          <source>Though the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator has an &lt;code&gt;entryComponents&lt;/code&gt; array, most of the time you won't have to explicitly set any entry components because Angular adds components listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to &lt;code&gt;entryComponents&lt;/code&gt; explicitly.</source>
          <target state="translated">尽管 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器具有 &lt;code&gt;entryComponents&lt;/code&gt; 数组，但是大多数时候您不必显式设置任何入口组件，因为Angular会自动将 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 列出的组件以及路由定义中列出的组件添加到入口组件中。尽管这两种机制占了大多数输入组件的成本，但是如果您的应用恰好需要引导或按类型动态加载组件，则必须将其添加到 &lt;code&gt;entryComponents&lt;/code&gt; 显式 entryComponents中。</target>
        </trans-unit>
        <trans-unit id="c0c89634e88d4f46eb100cf74294ba38817d4923" translate="yes" xml:space="preserve">
          <source>Though the target name is usually the name of a property, there is an automatic attribute-to-property mapping in Angular for several common attributes. These include &lt;code&gt;class&lt;/code&gt;/&lt;code&gt;className&lt;/code&gt;, &lt;code&gt;innerHtml&lt;/code&gt;/&lt;code&gt;innerHTML&lt;/code&gt;, and &lt;code&gt;tabindex&lt;/code&gt;/&lt;code&gt;tabIndex&lt;/code&gt;.</source>
          <target state="translated">尽管目标名称通常是属性的名称，但是在Angular中有一个针对某些常见属性的自动属性到属性映射。这些包括 &lt;code&gt;class&lt;/code&gt; / &lt;code&gt;className&lt;/code&gt; ， &lt;code&gt;innerHtml&lt;/code&gt; / &lt;code&gt;innerHTML&lt;/code&gt; 和 &lt;code&gt;tabindex&lt;/code&gt; / &lt;code&gt;tabIndex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bdc5ca158e9ca814a1efdfbdd56e2547c9decdf" translate="yes" xml:space="preserve">
          <source>Though you can limit access to a service by providing it in a lazy loaded module or providing it in a component, providing services in a component can lead to multiple instances of those services. Thus, the lazy loading is preferable.</source>
          <target state="translated">虽然你可以通过在懒加载模块中提供服务或在组件中提供服务来限制对服务的访问,但在组件中提供服务会导致这些服务的多个实例。因此,最好采用懒加载的方式。</target>
        </trans-unit>
        <trans-unit id="90e178c89e79710297fa1f0d8ae614004845fcca" translate="yes" xml:space="preserve">
          <source>Though you can provide services by lazy loading modules, not all services can be lazy loaded. For instance, some modules only work in the root module, such as the Router. The Router works with the global location object in the browser.</source>
          <target state="translated">虽然可以通过懒加载模块提供服务,但并不是所有的服务都可以懒加载。例如,有些模块只在根模块中工作,比如Router。Router与浏览器中的全局位置对象一起工作。</target>
        </trans-unit>
        <trans-unit id="4ac43ae059a7abe0952abd693cdca4e55b219478" translate="yes" xml:space="preserve">
          <source>Though you can type the URL into the address bar, a navigation UI is easier for the user and more common. Replace the default placeholder markup in &lt;code&gt;app.component.html&lt;/code&gt; with a custom nav so you can easily navigate to your modules in the browser:</source>
          <target state="translated">尽管您可以在地址栏中键入URL，但是导航UI对用户来说更容易使用，也更常见。使用自定义导航替换 &lt;code&gt;app.component.html&lt;/code&gt; 中的默认占位符标记，以便您可以轻松浏览到浏览器中的模块：</target>
        </trans-unit>
        <trans-unit id="528e1795eb218a5f3792808cc39b7bcce25ad8db" translate="yes" xml:space="preserve">
          <source>Though you could technically set the &lt;code&gt;[attr.disabled]&lt;/code&gt; attribute binding, the values are different in that the property binding requires to a boolean value, while its corresponding attribute binding relies on whether the value is &lt;code&gt;null&lt;/code&gt; or not. Consider the following:</source>
          <target state="translated">尽管可以从技术上设置 &lt;code&gt;[attr.disabled]&lt;/code&gt; 属性绑定，但是值的不同之处在于，该属性绑定要求为布尔值，而其对应的属性绑定取决于该值是否为 &lt;code&gt;null&lt;/code&gt; 。考虑以下：</target>
        </trans-unit>
        <trans-unit id="171a82320fbdf7d2e2689bc12c98963504c6696d" translate="yes" xml:space="preserve">
          <source>Three instances of &lt;code&gt;HeroBioComponent&lt;/code&gt; can't share the same instance of &lt;code&gt;HeroCacheService&lt;/code&gt;, as they'd be competing with each other to determine which hero to cache.</source>
          <target state="translated">三个 &lt;code&gt;HeroBioComponent&lt;/code&gt; 实例不能共享相同的 &lt;code&gt;HeroCacheService&lt;/code&gt; 实例，因为它们将相互竞争以确定要缓存的英雄。</target>
        </trans-unit>
        <trans-unit id="5d80c7ef855b73b71c4ca5c1c8a2d8119c7fa21b" translate="yes" xml:space="preserve">
          <source>Three of the common, built-in structural directives&amp;mdash;&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;, &lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;, and &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch...&lt;/a&gt;&amp;mdash;are described in the &lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;Template Syntax&lt;/em&gt;&lt;/a&gt; guide and seen in samples throughout the Angular documentation. Here's an example of them in a template:</source>
          <target state="translated">三种常见的内置结构指令&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;，&lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;和&lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch ...&lt;/a&gt;在&lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;模板语法&lt;/em&gt;&lt;/a&gt;指南中在整个Angular文档的示例中都可以看到它们。这是模板中的示例：</target>
        </trans-unit>
        <trans-unit id="8703c0daee7a3560153b94bc34a950b511daab36" translate="yes" xml:space="preserve">
          <source>Three points of special interest:</source>
          <target state="translated">三点特别关注。</target>
        </trans-unit>
        <trans-unit id="6b164df9c4f94a91727830fddbf131671bff71ec" translate="yes" xml:space="preserve">
          <source>Three providers tell the JIT compiler how to translate the template texts for a particular language while compiling the app:</source>
          <target state="translated">三个提供者告诉JIT编译器在编译应用时如何翻译特定语言的模板文本。</target>
        </trans-unit>
        <trans-unit id="ed12cc77bbd83748afc157b996ead876c3c5517c" translate="yes" xml:space="preserve">
          <source>Through the &lt;code&gt;valueChanges&lt;/code&gt; observable where you can listen for changes in the form's value in the template using &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; or in the component class using the &lt;code&gt;subscribe()&lt;/code&gt; method.</source>
          <target state="translated">通过 &lt;code&gt;valueChanges&lt;/code&gt; 可观察到的位置，您可以在其中使用 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 或在模板中使用subscription &lt;code&gt;subscribe()&lt;/code&gt; 侦听模板中表单值的更改。方法。</target>
        </trans-unit>
        <trans-unit id="5a4cab0ebea476f32aa1e1c5fba91f40707b2ad6" translate="yes" xml:space="preserve">
          <source>Throughout this guide, you'll see a directive spelled in both &lt;em&gt;UpperCamelCase&lt;/em&gt; and &lt;em&gt;lowerCamelCase&lt;/em&gt;. Already you've seen &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. There's a reason. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; refers to the directive &lt;em&gt;class&lt;/em&gt;; &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; refers to the directive's &lt;em&gt;attribute name&lt;/em&gt;.</source>
          <target state="translated">在本指南中，您会看到在&lt;em&gt;UpperCamelCase&lt;/em&gt;和&lt;em&gt;lowerCamelCase&lt;/em&gt;中都拼写的指令。您已经看到了 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 。是有原因的 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 引用指令&lt;em&gt;类&lt;/em&gt;； &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 引用指令的&lt;em&gt;属性名称&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f9f4b0f30b3f06e61b21febef173645d29891305" translate="yes" xml:space="preserve">
          <source>Throws</source>
          <target state="translated">Throws</target>
        </trans-unit>
        <trans-unit id="6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="translated">Time</target>
        </trans-unit>
        <trans-unit id="f7ea2d8763887c41cd7da975aaf8c487045171ac" translate="yes" xml:space="preserve">
          <source>Time passes and application logic triggers lazy loading of an NgModule. Angular must add the lazy-loaded module's providers to an injector somewhere. It can't add them to the app root injector because that injector is closed to new providers. So Angular creates a new child injector for the lazy-loaded module context.</source>
          <target state="translated">时间流逝,应用逻辑触发了NgModule的懒加载。Angular必须将懒加载模块的提供者添加到某个注入器中。它不能将它们添加到应用根注入器中,因为该注入器对新的提供者是关闭的。所以Angular为懒加载模块上下文创建了一个新的子注入器。</target>
        </trans-unit>
        <trans-unit id="8f86764c71eb5f28fd785ba95ea223af744160bb" translate="yes" xml:space="preserve">
          <source>Timezone of the formatted text will be the local system timezone of the end-user's machine.</source>
          <target state="translated">格式化文本的时区将是终端用户机器的本地系统时区。</target>
        </trans-unit>
        <trans-unit id="ff73d9b2c838aef0837103246944b6eeaac4e811" translate="yes" xml:space="preserve">
          <source>Tip: In the &lt;a href=&quot;api&quot;&gt;API reference section&lt;/a&gt; of this doc site, deprecated APIs are indicated by &lt;del&gt;strikethrough.&lt;/del&gt; You can filter the API list by &lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status: deprecated&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">提示：在此文档网站的&lt;a href=&quot;api&quot;&gt;API参考部分&lt;/a&gt;中，已弃用的API表示为&lt;del&gt;删除线。&lt;/del&gt;您可以按&lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status：deprecated&lt;/strong&gt;&lt;/a&gt;过滤API列表。</target>
        </trans-unit>
        <trans-unit id="768e0c1c69573fb588f61f1308a015c11468e05f" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">Title</target>
        </trans-unit>
        <trans-unit id="1ef4826ff87f22d637cb47eb360c1525fcf04ada" translate="yes" xml:space="preserve">
          <source>Title text should be in &quot;Title Case&quot;, which means that you use capital letters to start the first words and all &lt;em&gt;principal&lt;/em&gt; words. Use lower case letters for &lt;em&gt;secondary&lt;/em&gt; words such as &quot;in&quot;, &quot;of&quot;, and &quot;the&quot;.</source>
          <target state="translated">标题文本应为&amp;ldquo;标题大小写&amp;rdquo;，这意味着您使用大写字母开头的第一个单词和所有&lt;em&gt;主要&lt;/em&gt;单词。小写字母用于&lt;em&gt;次要&lt;/em&gt;单词，例如&amp;ldquo; in&amp;rdquo;，&amp;ldquo; of&amp;rdquo;和&amp;ldquo; the&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="0443511f0f0d69e0669b6cc477969ba0177c046d" translate="yes" xml:space="preserve">
          <source>TitleCasePipe</source>
          <target state="translated">TitleCasePipe</target>
        </trans-unit>
        <trans-unit id="ed1a0b0c87e134832acc7d87c80e1e27c802b764" translate="yes" xml:space="preserve">
          <source>To access properties that are defined in an interface, you must explicitly convert the Object you get from the JSON to the required response type. For example, the following &lt;code&gt;subscribe&lt;/code&gt; callback receives &lt;code&gt;data&lt;/code&gt; as an Object, and then type-casts it in order to access the properties.</source>
          <target state="translated">要访问在接口中定义的属性，必须将从JSON获得的对象显式转换为所需的响应类型。例如，以下 &lt;code&gt;subscribe&lt;/code&gt; 回调将 &lt;code&gt;data&lt;/code&gt; 作为对象接收，然后进行类型转换以访问属性。</target>
        </trans-unit>
        <trans-unit id="612822e1f2a2307aaa6e2b3ed143cfc5b79f8e35" translate="yes" xml:space="preserve">
          <source>To achieve this effect, extend the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag with the following:</source>
          <target state="translated">要实现此效果，请使用以下命令扩展 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 标记：</target>
        </trans-unit>
        <trans-unit id="4de9b850b6bc48b2b817512c2db67f3f4f4de00a" translate="yes" xml:space="preserve">
          <source>To add a hero, this app only needs the hero's name. You can use an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element paired with an add button.</source>
          <target state="translated">要添加英雄，此应用仅需要英雄的名字。您可以将 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素与添加按钮配对使用。</target>
        </trans-unit>
        <trans-unit id="da8e56238639cdc891b1d4ed923efdcffe46b6f3" translate="yes" xml:space="preserve">
          <source>To add a new &lt;code&gt;devDependency&lt;/code&gt;, use either one of the following commands:</source>
          <target state="translated">要添加新的 &lt;code&gt;devDependency&lt;/code&gt; ，请使用以下命令之一：</target>
        </trans-unit>
        <trans-unit id="27d7686824adeea94d6f50645d6b9afbe94609dd" translate="yes" xml:space="preserve">
          <source>To add a new dependency, use the &lt;a href=&quot;cli/add&quot;&gt;&lt;code&gt;ng add&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">要添加新的依赖关系，请使用&lt;a href=&quot;cli/add&quot;&gt; &lt;code&gt;ng add&lt;/code&gt; &lt;/a&gt;命令。</target>
        </trans-unit>
        <trans-unit id="f457092233f40d2f34e89cbae624605c9b59951d" translate="yes" xml:space="preserve">
          <source>To add a schematic to an existing collection, use the same command you use to start a new schematics project, but run the command inside the project folder.</source>
          <target state="translated">要将原理图添加到现有的集合中,请使用与启动新的原理图项目相同的命令,但在项目文件夹内运行该命令。</target>
        </trans-unit>
        <trans-unit id="e0dff7476603a4365ce04e28daa6e5ae648874f0" translate="yes" xml:space="preserve">
          <source>To add a validator to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, pass the new validator in as the second argument on creation.</source>
          <target state="translated">要将验证器添加到 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; ，请将新的验证器作为创建时的第二个参数传入。</target>
        </trans-unit>
        <trans-unit id="b7c21a740943c10dfa15804fca8321cd2e41101e" translate="yes" xml:space="preserve">
          <source>To add another product, click &quot;My Store&quot; to return to the product list. Repeat the steps above.</source>
          <target state="translated">要添加其他产品,请点击 &quot;我的商店 &quot;返回产品列表。重复上述步骤。</target>
        </trans-unit>
        <trans-unit id="af30217cecee494619d1758d399f71f84dae729e" translate="yes" xml:space="preserve">
          <source>To add artifacts to a project, your schematic needs its own template files. Schematic templates support special syntax to execute code and variable substitution.</source>
          <target state="translated">要在项目中添加工件,你的原理图需要自己的模板文件。原理图模板支持特殊的语法来执行代码和变量替换。</target>
        </trans-unit>
        <trans-unit id="c3d2051452de0323eb6efd5aedc607498069cdae" translate="yes" xml:space="preserve">
          <source>To add or remove a &lt;em&gt;single&lt;/em&gt; class, use &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt; rather than &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">要添加或删除&lt;em&gt;单个&lt;/em&gt;类，请使用&lt;a href=&quot;template-syntax#class-binding&quot;&gt;类绑定&lt;/a&gt;而不是 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9da25919d51d1a85e0005bea2eb758313daa6fe" translate="yes" xml:space="preserve">
          <source>To add paths, use the &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; option:</source>
          <target state="translated">要添加路径，请使用 &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; 选项：</target>
        </trans-unit>
        <trans-unit id="496b7ad1d0a0eed5827dc1a97fd622e7f8d94e93" translate="yes" xml:space="preserve">
          <source>To add the component to the template, you call &lt;code&gt;createComponent()&lt;/code&gt; on &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">要将组件添加到模板，请在 &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 上调用 &lt;code&gt;createComponent()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="987b409e8bf18353ecffd982c4a6027176175f26" translate="yes" xml:space="preserve">
          <source>To add the schematics to the library bundle, add scripts to the library's &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="translated">要将原理图添加到库包中，请将脚本添加到库的 &lt;code&gt;package.json&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="1a7a24ab6c517387fe4fb759c2cbbe67fd7e654f" translate="yes" xml:space="preserve">
          <source>To add the stylesheet, open &lt;code&gt;styles.css&lt;/code&gt; and add the following import line at the top:</source>
          <target state="translated">要添加样式表，请打开 &lt;code&gt;styles.css&lt;/code&gt; 并在顶部添加以下导入行：</target>
        </trans-unit>
        <trans-unit id="d7a97119528a1219e01d41b64f89cfc156ab2111" translate="yes" xml:space="preserve">
          <source>To add validation to a template-driven form, you add the same validation attributes as you would with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;native HTML form validation&lt;/a&gt;. Angular uses directives to match these attributes with validator functions in the framework.</source>
          <target state="translated">要将验证添加到模板驱动的表单，请添加与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;本机HTML表单验证&lt;/a&gt;相同的验证属性。Angular使用指令将这些属性与框架中的验证器函数进行匹配。</target>
        </trans-unit>
        <trans-unit id="ce70784e6a2d0e1e0652eb7bae45da63bd42c69d" translate="yes" xml:space="preserve">
          <source>To alter the request, clone it first and modify the clone before passing it to &lt;code&gt;next.handle()&lt;/code&gt;. You can clone and modify the request in a single step as in this example.</source>
          <target state="translated">要更改请求，请先对其进行克隆，然后再将其传递给 &lt;code&gt;next.handle()&lt;/code&gt; 进行修改。如本例所示，您可以在一个步骤中克隆和修改请求。</target>
        </trans-unit>
        <trans-unit id="be9073f11e0afa56717eb05e0a7001960b7a1b99" translate="yes" xml:space="preserve">
          <source>To alter where the injector starts looking for &lt;code&gt;FlowerService&lt;/code&gt;, add &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; to the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; declaration for the &lt;code&gt;FlowerService&lt;/code&gt;. This declaration is in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; constructor as shown in &lt;code&gt;child.component.ts&lt;/code&gt;:</source>
          <target state="translated">为了改变所述的喷射开始寻找 &lt;code&gt;FlowerService&lt;/code&gt; ，加 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 的 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 声明的 &lt;code&gt;FlowerService&lt;/code&gt; 。该声明在 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 构造函数中，如 &lt;code&gt;child.component.ts&lt;/code&gt; 中所示：</target>
        </trans-unit>
        <trans-unit id="22c3b2cba8f53e2ffe5dab01bc5b91f88e756346" translate="yes" xml:space="preserve">
          <source>To answer these kinds of questions, you have to create the DOM elements associated with the components, you must examine the DOM to confirm that component state displays properly at the appropriate times, and you must simulate user interaction with the screen to determine whether those interactions cause the component to behave as expected.</source>
          <target state="translated">为了回答这类问题,你必须创建与组件相关联的DOM元素,你必须检查DOM以确认组件状态在适当的时间正确显示,你必须模拟用户与屏幕的交互,以确定这些交互是否导致组件按照预期的行为。</target>
        </trans-unit>
        <trans-unit id="36d091e0c047395da2a56a9e24df2133c4a12994" translate="yes" xml:space="preserve">
          <source>To attach the aliases from your form model, you must add it to the template. Similar to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; input provided by &lt;code&gt;FormGroupNameDirective&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; binds communication from the form array instance to the template with &lt;code&gt;FormArrayNameDirective&lt;/code&gt;.</source>
          <target state="translated">要附加表单模型中的别名，必须将其添加到模板中。类似于 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; 通过提供输入 &lt;code&gt;FormGroupNameDirective&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; 结合从表单数组实例通信，以与模板 &lt;code&gt;FormArrayNameDirective&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b439955a79dbd833d42d99f6fa91279d6ef67f27" translate="yes" xml:space="preserve">
          <source>To automate that data flow, setup a two-way data binding between the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; form element and the &lt;code&gt;hero.name&lt;/code&gt; property.</source>
          <target state="translated">要自动执行该数据流，请在 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 表单元素和 &lt;code&gt;hero.name&lt;/code&gt; 属性之间建立双向数据绑定。</target>
        </trans-unit>
        <trans-unit id="c97596f545bc3c4cf4d6e36b38363f8b20cb690b" translate="yes" xml:space="preserve">
          <source>To avoid relying solely on visual cues, you need to make sure your routing code updates focus after page navigation. Use the &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; event from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to know when to update focus.</source>
          <target state="translated">为了避免仅依靠视觉提示，您需要确保路由代码的更新集中在页面导航之后。使用 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 服务中的 &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; 事件可以知道何时更新焦点。</target>
        </trans-unit>
        <trans-unit id="441327a3b62f31f08d7ebf067ab65b6221abce4c" translate="yes" xml:space="preserve">
          <source>To avoid this expensive operation, you can customize the default tracking algorithm. by supplying the &lt;code&gt;trackBy&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;trackBy&lt;/code&gt; takes a function that has two arguments: &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;trackBy&lt;/code&gt; is given, Angular tracks changes by the return value of the function.</source>
          <target state="translated">为避免这种昂贵的操作，您可以自定义默认跟踪算法。通过提供 &lt;code&gt;trackBy&lt;/code&gt; 选项 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;trackBy&lt;/code&gt; 采用具有两个参数的函数： &lt;code&gt;index&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 。如果 &lt;code&gt;trackBy&lt;/code&gt; ，则Angular轨迹会根据函数的返回值而变化。</target>
        </trans-unit>
        <trans-unit id="e8cfc2c0e9fadb81aa5e73b8bb58085461fa57a5" translate="yes" xml:space="preserve">
          <source>To avoid this problem, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in the &lt;code&gt;AppModule&lt;/code&gt;, the application &lt;em&gt;root module&lt;/em&gt;.</source>
          <target state="translated">为避免此问题，请仅在应用程序&lt;em&gt;根模块&lt;/em&gt; &lt;code&gt;AppModule&lt;/code&gt; 中导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="598b94eaf0a9207b1b2f7e14b6bb329e39eadeca" translate="yes" xml:space="preserve">
          <source>To be Angular compatible, an AngularJS component directive should configure these attributes:</source>
          <target state="translated">为了兼容Angular,一个AngularJS组件指令应该配置这些属性。</target>
        </trans-unit>
        <trans-unit id="123c3019791e3c52ebbcbe83a892f8e6e401c499" translate="yes" xml:space="preserve">
          <source>To be notified when new releases are available, follow &lt;a href=&quot;https://twitter.com/angular&quot;&gt;@angular&lt;/a&gt; on Twitter or subscribe to the &lt;a href=&quot;https://blog.angular.io&quot;&gt;Angular blog&lt;/a&gt;.</source>
          <target state="translated">要在新版本发布时得到通知，&lt;a href=&quot;https://twitter.com/angular&quot;&gt;请&lt;/a&gt;在Twitter上关注@angular或订阅&lt;a href=&quot;https://blog.angular.io&quot;&gt;Angular博客&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd4700612dcf5dc9d98d073d3fec1a9bda0633ef" translate="yes" xml:space="preserve">
          <source>To be used with watch mode, a builder handler function should return an Observable. Architect subscribes to the Observable until it completes and might reuse it if the builder is scheduled again with the same arguments.</source>
          <target state="translated">为了与观察模式一起使用,构建器处理函数应该返回一个Observable。建筑师会订阅这个Observable,直到它完成为止,如果用同样的参数再次安排建造者,可能会重新使用它。</target>
        </trans-unit>
        <trans-unit id="c6264ce2f8d176973d84cc88a177c1b8d2ae8301" translate="yes" xml:space="preserve">
          <source>To begin converting your AngularJS application to a hybrid, you need to load the Angular framework. You can see how this can be done with SystemJS by following the instructions in &lt;a href=&quot;upgrade-setup&quot;&gt;Setup for Upgrading to AngularJS&lt;/a&gt; for selectively copying code from the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github repository&lt;/a&gt;.</source>
          <target state="translated">要开始将AngularJS应用程序转换为混合程序，您需要加载Angular框架。通过遵循&amp;ldquo; &lt;a href=&quot;upgrade-setup&quot;&gt;升级到AngularJS的安装程序&amp;rdquo;中&lt;/a&gt;的说明从&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github存储库中&lt;/a&gt;选择性地复制代码，可以看到如何使用SystemJS来完成此操作。</target>
        </trans-unit>
        <trans-unit id="ff25a3d91e518e6022fbcb82db9614eb3a86d036" translate="yes" xml:space="preserve">
          <source>To begin testing calls to &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; and the mocking controller, &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt;, along with the other symbols your tests require.</source>
          <target state="translated">要开始测试对 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的调用，请导入 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; 控制器HttpTestingController以及测试所需的其他符号。</target>
        </trans-unit>
        <trans-unit id="970d997b1f905a43219b5008925290bb634cfd6b" translate="yes" xml:space="preserve">
          <source>To begin using Angular service workers, see &lt;a href=&quot;service-worker-getting-started&quot;&gt;Getting Started with service workers&lt;/a&gt;.</source>
          <target state="translated">要开始使用Angular服务人员，请参阅《服务人员&lt;a href=&quot;service-worker-getting-started&quot;&gt;入门》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de460edf05dca2d464a1be91407ed6ffea7d7a8e" translate="yes" xml:space="preserve">
          <source>To begin using the CLI for a new project, see &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">要开始将CLI用于新项目，请参阅&amp;ldquo; &lt;a href=&quot;setup-local&quot;&gt;本地环境设置&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6b18b6e1679f6b673ab980d8c28e59713ff54dfa" translate="yes" xml:space="preserve">
          <source>To begin, configure a set of routes using methods available in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; class. This route configuration tells the router how to navigate.</source>
          <target state="translated">首先，使用 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 类中可用的方法配置一组路由。此路由配置告诉路由器如何导航。</target>
        </trans-unit>
        <trans-unit id="008987cccbf2a31fda96aa5a830cd40924b91032" translate="yes" xml:space="preserve">
          <source>To begin, create a new subfolder, &lt;code&gt;my-service&lt;/code&gt;, in the &lt;code&gt;schematics&lt;/code&gt; folder.</source>
          <target state="translated">首先，在 &lt;code&gt;schematics&lt;/code&gt; 文件夹中创建一个新的子文件夹 &lt;code&gt;my-service&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6dd9e1c57cc321e0fe725c8e45cb7fc4f6d13c75" translate="yes" xml:space="preserve">
          <source>To benefit from the Angular service worker, your app must run in a web browser that supports service workers in general. Currently, service workers are supported in the latest versions of Chrome, Firefox, Edge, Safari, Opera, UC Browser (Android version) and Samsung Internet. Browsers like IE and Opera Mini do not support service workers.</source>
          <target state="translated">要想从Angular服务工作者中获益,您的应用程序必须在一般支持服务工作者的Web浏览器中运行。目前,最新版本的Chrome、Firefox、Edge、Safari、Opera、UC浏览器(Android版本)和三星互联网都支持服务工作者。IE和Opera Mini等浏览器不支持服务工。</target>
        </trans-unit>
        <trans-unit id="aceceb9344b852a619d58c97b4a87fbc9c2dc9ab" translate="yes" xml:space="preserve">
          <source>To bind to a DOM event, surround the DOM event name in parentheses and assign a quoted &lt;a href=&quot;template-syntax#template-statements&quot;&gt;template statement&lt;/a&gt; to it.</source>
          <target state="translated">要绑定到DOM事件，请将DOM事件名称括在括号中，并为其添加一个引用的&lt;a href=&quot;template-syntax#template-statements&quot;&gt;模板语句&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a2b43d8d4759c302041d5555e84a74b033db308" translate="yes" xml:space="preserve">
          <source>To block XSS attacks, you must prevent malicious code from entering the DOM (Document Object Model). For example, if attackers can trick you into inserting a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the DOM, they can run arbitrary code on your website. The attack isn't limited to &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&amp;mdash;many elements and properties in the DOM allow code execution, for example, &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt;. If attacker-controlled data enters the DOM, expect security vulnerabilities.</source>
          <target state="translated">要阻止XSS攻击，必须防止恶意代码进入DOM（文档对象模型）。例如，如果攻击者可以诱骗您在DOM中插入 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记，则他们可以在您的网站上运行任意代码。攻击并不限定于 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签-许多元素和属性在DOM允许执行代码，例如， &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt; 。如果攻击者控制的数据进入DOM，则可能会遇到安全漏洞。</target>
        </trans-unit>
        <trans-unit id="82e29a55d59b6b2bd0a517982412ccec5411a4a1" translate="yes" xml:space="preserve">
          <source>To bootstrap a hybrid application, you must bootstrap each of the Angular and AngularJS parts of the application. You must bootstrap the Angular bits first and then ask the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to bootstrap the AngularJS bits next.</source>
          <target state="translated">要引导混合应用程序，必须引导应用程序的每个Angular和AngularJS部分。您必须先自举Angular位，然后再要求 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 自举AngularJS位。</target>
        </trans-unit>
        <trans-unit id="e4ec3081d8abfef81b9c7b98512682fe817069de" translate="yes" xml:space="preserve">
          <source>To build up the generation schematic, start with an empty rule factory.</source>
          <target state="translated">要建立生成原理图,先从一个空的规则工厂开始。</target>
        </trans-unit>
        <trans-unit id="8901fe39170514d01f50341a27e20f9604a9825a" translate="yes" xml:space="preserve">
          <source>To build using the staging configuration, run the following command:</source>
          <target state="translated">要使用暂存配置进行构建,请运行以下命令。</target>
        </trans-unit>
        <trans-unit id="e28bdfee0dc7a60965eea042b0b40687dbd667f9" translate="yes" xml:space="preserve">
          <source>To build your application locally or for production, you will need to download the source code from your StackBlitz project. Click the &lt;code&gt;Download Project&lt;/code&gt; icon in the left menu across from &lt;code&gt;Project&lt;/code&gt; to download your files.</source>
          <target state="translated">要在本地或生产环境中构建应用程序，您需要从StackBlitz项目中下载源代码。点击 &lt;code&gt;Download Project&lt;/code&gt; 在左边的菜单图标对面的 &lt;code&gt;Project&lt;/code&gt; 来下载你的文件。</target>
        </trans-unit>
        <trans-unit id="0466ae768a4d93cf77c8e4981171d89f8a7ca6ff" translate="yes" xml:space="preserve">
          <source>To bundle your schematics together with your library, you must configure the library to build the schematics separately, then add them to the bundle. You must build your schematics &lt;em&gt;after&lt;/em&gt; you build your library, so they are placed in the correct directory.</source>
          <target state="translated">要将原理图与库捆绑在一起，必须配置该库以分别构建原理图，然后将其添加到捆绑中。你必须建立你的图表&lt;em&gt;后，&lt;/em&gt;您构建库，所以它们被放置在正确的目录。</target>
        </trans-unit>
        <trans-unit id="885d50f557834570c68a2e5e1be6b220c9216f5a" translate="yes" xml:space="preserve">
          <source>To bypass the service worker you can set &lt;code&gt;ngsw-bypass&lt;/code&gt; as a request header, or as a query parameter. (The value of the header or query parameter is ignored and can be empty or omitted.)</source>
          <target state="translated">要绕过服务人员，您可以将 &lt;code&gt;ngsw-bypass&lt;/code&gt; 设置为请求标头或查询参数。（标头或查询参数的值将被忽略，可以为空或省略。）</target>
        </trans-unit>
        <trans-unit id="12534712788ba78416f7f95870eaa280458520d6" translate="yes" xml:space="preserve">
          <source>To catch errors, you &lt;strong&gt;&quot;pipe&quot; the observable&lt;/strong&gt; result from &lt;code&gt;http.get()&lt;/code&gt; through an RxJS &lt;code&gt;catchError()&lt;/code&gt; operator.</source>
          <target state="translated">为了捕获错误，您&lt;strong&gt;可以&lt;/strong&gt;通过RxJS &lt;code&gt;catchError()&lt;/code&gt; 运算符&lt;strong&gt;&amp;ldquo; &lt;/strong&gt; &lt;code&gt;http.get()&lt;/code&gt; &lt;strong&gt;&amp;rdquo;&lt;/strong&gt;来自http.get（）&lt;strong&gt;的可观察&lt;/strong&gt;结果。</target>
        </trans-unit>
        <trans-unit id="1e0fe49f14510b713680172388a0dd717d0f6c10" translate="yes" xml:space="preserve">
          <source>To change the controls in the array, use the &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;removeAt&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt; methods in &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; itself. These methods ensure the controls are properly tracked in the form's hierarchy. Do not modify the array of &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s used to instantiate the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; directly, as that result in strange and unexpected behavior such as broken change detection.</source>
          <target state="translated">要更改数组中的控件，请使用 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 本身中的 &lt;code&gt;push&lt;/code&gt; ， &lt;code&gt;insert&lt;/code&gt; ， &lt;code&gt;removeAt&lt;/code&gt; 或 &lt;code&gt;clear&lt;/code&gt; 方法。这些方法可确保在表单的层次结构中正确跟踪控件。不要修改用于直接实例化 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 的数组，因为这会导致奇怪和意外的行为，例如损坏的更改检测。</target>
        </trans-unit>
        <trans-unit id="63029d22a7a0498f402e2ef9e4441e473404955c" translate="yes" xml:space="preserve">
          <source>To check that you have the npm client installed, run &lt;code&gt;npm -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">要检查是否已安装npm客户端，请在终端/控制台窗口中运行 &lt;code&gt;npm -v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e948743b462eea7115d418352e1dbfa4b4b10ff" translate="yes" xml:space="preserve">
          <source>To check your app's version of Angular: From within your project directory, use the &lt;code&gt;ng version&lt;/code&gt; command.</source>
          <target state="translated">要检查应用程序的Angular版本：在项目目录中，使用 &lt;code&gt;ng version&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="13078c07edb73de738fd267221caa6c4bad9f0a1" translate="yes" xml:space="preserve">
          <source>To check your version, run &lt;code&gt;node -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">要检查您的版本，请在终端/控制台窗口中运行 &lt;code&gt;node -v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07cec4d840c8d65fc9e2b7b36b758a8ade445776" translate="yes" xml:space="preserve">
          <source>To combine property and event bindings using the banana-in-a-box syntax, &lt;code&gt;[()]&lt;/code&gt;, see &lt;a href=&quot;template-syntax#two-way&quot;&gt;Two-way Binding&lt;/a&gt;.</source>
          <target state="translated">要使用banner-in-a-box语法 &lt;code&gt;[()]&lt;/code&gt; 组合属性和事件绑定，请参见&lt;a href=&quot;template-syntax#two-way&quot;&gt;双向绑定&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b3236306fb71061a53e3712837b9be971697d08d" translate="yes" xml:space="preserve">
          <source>To conditionally display an element, place the element's &lt;code&gt;hidden&lt;/code&gt; property in square brackets and set it to a quoted template expression that evaluates to the &lt;em&gt;opposite&lt;/em&gt; of &lt;em&gt;show&lt;/em&gt;.</source>
          <target state="translated">有条件地显示一个元素，将元素的 &lt;code&gt;hidden&lt;/code&gt; 属性在方括号并将其设置为一个带引号的模板表达式计算结果为&lt;em&gt;相反&lt;/em&gt;的&lt;em&gt;表演&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="53182894e9c6995045a12635221f90b2e4299c08" translate="yes" xml:space="preserve">
          <source>To configure access to your own users' CLI usage data, use the &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; command to add a key to your global &lt;a href=&quot;../guide/workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt; workspace configuration file&lt;/a&gt;. The key goes under &lt;code&gt;cli.analyticsSharing&lt;/code&gt; at the top level of the file, outside the &lt;code&gt;projects&lt;/code&gt; sections. The value of the key is your organization's tracking ID, as assigned by Google Analytics. This ID is a string that looks like &lt;code&gt;UA-123456-12&lt;/code&gt;.</source>
          <target state="translated">要配置对您自己用户的CLI使用数据的访问，请使用 &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; 命令将密钥添加到全局&lt;a href=&quot;../guide/workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; 工作区配置文件&lt;/a&gt;。密钥位于 &lt;code&gt;projects&lt;/code&gt; 部分之外文件顶部的 &lt;code&gt;cli.analyticsSharing&lt;/code&gt; 下。密钥的值是您的组织的跟踪ID（由Google Analytics（分析）分配）。该ID是一个类似于 &lt;code&gt;UA-123456-12&lt;/code&gt; 的字符串。</target>
        </trans-unit>
        <trans-unit id="081b1f073ba92cd82743621b3f2f2eb2c90049a3" translate="yes" xml:space="preserve">
          <source>To configure the Angular Router, you must define a route for AngularJS URLs. To match those URLs, you add a route configuration that uses the &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; allows you to use custom pattern matching for URL paths. The Angular Router tries to match on more specific routes such as static and variable routes first. When it doesn't find a match, it then looks at custom matchers defined in your route configuration. If the custom matchers don't match a route, it then goes to catch-all routes, such as a 404 page.</source>
          <target state="translated">要配置Angular路由器，必须为AngularJS URL定义路由。要匹配这些URL，请添加使用 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 属性的路由配置。该 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 允许您使用自定义的模式匹配的URL路径。Angular Router尝试首先匹配更具体的路由，例如静态和可变路由。当找不到匹配项时，它将查看在路由配置中定义的自定义匹配器。如果自定义匹配器不匹配某个路由，则它将转到所有路由，例如404页面。</target>
        </trans-unit>
        <trans-unit id="99be46bd11d0de83ad9e296968ef2c5a7118146b" translate="yes" xml:space="preserve">
          <source>To continue exploring Angular, choose either of the following options:</source>
          <target state="translated">要继续探索Angular,请选择以下任一选项。</target>
        </trans-unit>
        <trans-unit id="a3014c43a2313b977c6aed25419c31a95265fa08" translate="yes" xml:space="preserve">
          <source>To contrast the two types of components, there are components which are included in the template, which are declarative. Additionally, there are components which you load imperatively; that is, entry components.</source>
          <target state="translated">对比一下这两种类型的组件,有一些组件是包含在模板中的,是声明性的。此外,还有一些组件是你必须加载的,也就是入口组件。</target>
        </trans-unit>
        <trans-unit id="959d46928d85d110fdade5f2293bf97890445838" translate="yes" xml:space="preserve">
          <source>To control how this encapsulation happens on a &lt;em&gt;per component&lt;/em&gt; basis, you can set the &lt;em&gt;view encapsulation mode&lt;/em&gt; in the component metadata. Choose from the following modes:</source>
          <target state="translated">要控制&lt;em&gt;每个组件&lt;/em&gt;的&lt;em&gt;封装方式&lt;/em&gt;，可以在组件元数据中设置&lt;em&gt;视图封装模式&lt;/em&gt;。从以下模式中选择：</target>
        </trans-unit>
        <trans-unit id="c93024cc33ad0ddbba14e6bbd25bf12722637c4a" translate="yes" xml:space="preserve">
          <source>To control the state of the button, set the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;property&lt;/em&gt;,</source>
          <target state="translated">要控制按钮的状态，请设置 &lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;，</target>
        </trans-unit>
        <trans-unit id="fbe3fde2fb0a60e4ec9cfcd947c47d4e664ce7a7" translate="yes" xml:space="preserve">
          <source>To convert this binding to use specialized objects, turn the array of hero names into an array of &lt;code&gt;Hero&lt;/code&gt; objects. For that you'll need a &lt;code&gt;Hero&lt;/code&gt; class:</source>
          <target state="translated">要将绑定转换为使用专用对象，请将英雄名称数组转换为 &lt;code&gt;Hero&lt;/code&gt; 对象数组。为此，您需要一个 &lt;code&gt;Hero&lt;/code&gt; 类：</target>
        </trans-unit>
        <trans-unit id="3e235ca1b49cbf515a53d4eb460cb0a499395651" translate="yes" xml:space="preserve">
          <source>To copy a code example from this tutorial, click the icon at the top right of the code example box, and then paste the code snippet from the clipboard into StackBlitz.</source>
          <target state="translated">要从本教程中复制一个代码示例,点击代码示例框右上方的图标,然后将剪贴板中的代码片段粘贴到StackBlitz中。</target>
        </trans-unit>
        <trans-unit id="b27e4d885fe2defbb235fa198172a39e1ab9f6e4" translate="yes" xml:space="preserve">
          <source>To correct the problem, call &lt;code&gt;compileComponents()&lt;/code&gt; as explained &lt;a href=&quot;testing#compile-components&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">要更正此问题，请按&lt;a href=&quot;testing#compile-components&quot;&gt;以下&lt;/a&gt;说明调用 &lt;code&gt;compileComponents()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="979325cb37deb2c50164b83f04e810b1ac2b55a5" translate="yes" xml:space="preserve">
          <source>To correct this error, export a function from the module and refer to the function in a &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider instead.</source>
          <target state="translated">要更正此错误，请从模块中导出函数，然后在 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 提供程序中引用该函数。</target>
        </trans-unit>
        <trans-unit id="1ecaf5471a0ced58416233b3602e2e5a39d32a9d" translate="yes" xml:space="preserve">
          <source>To correct this error, provide the initial value of the variable in an initializer clause &lt;em&gt;on the same line&lt;/em&gt;.</source>
          <target state="translated">要更正此错误，请&lt;em&gt;在同一行&lt;/em&gt;的初始化子句中提供变量的初始值。</target>
        </trans-unit>
        <trans-unit id="4dee6cdbff0c50b18b7cf0744c39d9afb9e81794" translate="yes" xml:space="preserve">
          <source>To correct this error, refer to non-destructured values.</source>
          <target state="translated">要纠正这个错误,请参考非结构化值。</target>
        </trans-unit>
        <trans-unit id="d2bf7fb2d3e94211afcd57a10f20c4c45cfe0d7d" translate="yes" xml:space="preserve">
          <source>To create a new workspace and an initial app project:</source>
          <target state="translated">要创建一个新的工作区和一个初始应用项目。</target>
        </trans-unit>
        <trans-unit id="f144d38768edd99f2d27499d71edd950a08584a3" translate="yes" xml:space="preserve">
          <source>To create a new workspace and initial starter app:</source>
          <target state="translated">要创建一个新的工作区和初始启动程序。</target>
        </trans-unit>
        <trans-unit id="1aa719950868f1d4fa3ac83a344dcfa8c80b6018" translate="yes" xml:space="preserve">
          <source>To create a reusable animation, use the &lt;a href=&quot;../api/animations/animation&quot;&gt;&lt;code&gt;animation()&lt;/code&gt;&lt;/a&gt; method to define an animation in a separate &lt;code&gt;.ts&lt;/code&gt; file and declare this animation definition as a &lt;code&gt;const&lt;/code&gt; export variable. You can then import and reuse this animation in any of your app components using the &lt;a href=&quot;../api/animations/useanimation&quot;&gt;&lt;code&gt;useAnimation()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">若要创建可重用的动画，请使用&lt;a href=&quot;../api/animations/animation&quot;&gt; &lt;code&gt;animation()&lt;/code&gt; &lt;/a&gt;方法在单独的 &lt;code&gt;.ts&lt;/code&gt; 文件中定义动画，并将此动画定义声明为 &lt;code&gt;const&lt;/code&gt; 导出变量。然后，您可以使用&lt;a href=&quot;../api/animations/useanimation&quot;&gt; &lt;code&gt;useAnimation()&lt;/code&gt; &lt;/a&gt; API 在任何应用程序组件中导入和重用此动画。</target>
        </trans-unit>
        <trans-unit id="29ae33325b206d2fd3cdedfd24a2c41e5f192288" translate="yes" xml:space="preserve">
          <source>To create the cart page, you begin by following the same steps you did to create the product details component and to set up routing for the new component.</source>
          <target state="translated">要创建购物车页面,首先要按照创建产品详情组件和为新组件设置路由的相同步骤进行。</target>
        </trans-unit>
        <trans-unit id="594ec3ddcc19c25f73ea897495b521aecaf86016" translate="yes" xml:space="preserve">
          <source>To create the server-side app module, &lt;code&gt;app.server.module.ts&lt;/code&gt;, run the following CLI command.</source>
          <target state="translated">要创建服务器端应用程序模块 &lt;code&gt;app.server.module.ts&lt;/code&gt; ，请运行以下CLI命令。</target>
        </trans-unit>
        <trans-unit id="a1d7d554f2d72ca28c730058079d294822be35c1" translate="yes" xml:space="preserve">
          <source>To create, build, and serve a new, basic Angular project on a development server, go to the parent directory of your new workspace use the following commands:</source>
          <target state="translated">要在开发服务器上创建、构建和服务一个新的、基本的Angular项目,进入新工作区的父目录使用以下命令。</target>
        </trans-unit>
        <trans-unit id="65acbd001432e22b30e796e7e61e3dfe440088a8" translate="yes" xml:space="preserve">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. &lt;code&gt;compareWith&lt;/code&gt; takes a &lt;strong&gt;function&lt;/strong&gt; which has two arguments: &lt;code&gt;option1&lt;/code&gt; and &lt;code&gt;option2&lt;/code&gt;. If &lt;code&gt;compareWith&lt;/code&gt; is given, Angular selects option by the return value of the function.</source>
          <target state="translated">要自定义默认的选项比较算法， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 支持 &lt;code&gt;compareWith&lt;/code&gt; 输入。 &lt;code&gt;compareWith&lt;/code&gt; 需要一个&lt;strong&gt;函数&lt;/strong&gt;有两个参数： &lt;code&gt;option1&lt;/code&gt; 和 &lt;code&gt;option2&lt;/code&gt; 。如果给出 &lt;code&gt;compareWith&lt;/code&gt; ，Angular会根据函数的返回值选择选项。</target>
        </trans-unit>
        <trans-unit id="c9057dec56a92572abc6bcb328cdc254209b6283" translate="yes" xml:space="preserve">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. See the &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; for usage.</source>
          <target state="translated">要自定义默认的选项比较算法， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 支持 &lt;code&gt;compareWith&lt;/code&gt; 输入。有关用法，请参见 &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12614d5a0a4f9980916f0bd6829fb9e94aeee5ca" translate="yes" xml:space="preserve">
          <source>To deactivate the service worker, remove or rename the &lt;code&gt;ngsw.json&lt;/code&gt; file. When the service worker's request for &lt;code&gt;ngsw.json&lt;/code&gt; returns a &lt;code&gt;404&lt;/code&gt;, then the service worker removes all of its caches and de-registers itself, essentially self-destructing.</source>
          <target state="translated">要停用服务工作者，请删除或重命名 &lt;code&gt;ngsw.json&lt;/code&gt; 文件。当服务人员对 &lt;code&gt;ngsw.json&lt;/code&gt; 的请求返回 &lt;code&gt;404&lt;/code&gt; 时，服务人员将删除其所有缓存并自行注销，这实际上是自毁的。</target>
        </trans-unit>
        <trans-unit id="95e38d849c5796bd6398c2761b41e463c7976d04" translate="yes" xml:space="preserve">
          <source>To define a class as a service in Angular, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to provide the metadata that allows Angular to inject it into a component as a &lt;em&gt;dependency&lt;/em&gt;. Similarly, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to indicate that a component or other class (such as another service, a pipe, or an NgModule) &lt;em&gt;has&lt;/em&gt; a dependency.</source>
          <target state="translated">要将类定义为Angular中的服务，请使用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰器提供允许Angular将其作为&lt;em&gt;依赖项&lt;/em&gt;注入组件的元数据。类似地，使用 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰器指示组件或其他类（例如，另一个服务，管道或NgModule）&lt;em&gt;具有&lt;/em&gt;依赖项。</target>
        </trans-unit>
        <trans-unit id="ad6c984d27957b7c6989d1d288e104c9c138aa30" translate="yes" xml:space="preserve">
          <source>To define a directive, mark the class with the decorator and provide metadata.</source>
          <target state="translated">要定义一个指令,请用装饰符标记该类并提供元数据。</target>
        </trans-unit>
        <trans-unit id="1cd846925adda37616140e026544f1e443869411" translate="yes" xml:space="preserve">
          <source>To define navigation rules, you associate &lt;em&gt;navigation paths&lt;/em&gt; with your components. A path uses a URL-like syntax that integrates your program data, in much the same way that template syntax integrates your views with your program data. You can then apply program logic to choose which views to show or to hide, in response to user input and your own access rules.</source>
          <target state="translated">要定义导航规则，请将&lt;em&gt;导航路径&lt;/em&gt;与组件关联。路径使用类似于URL的语法来集成程序数据，就像使用模板语法将视图与程序数据集成一样。然后，您可以根据用户输入和您自己的访问规则，应用程序逻辑来选择要显示或隐藏的视图。</target>
        </trans-unit>
        <trans-unit id="2e9f5fcdd9d08eaae4f6f27d8f15141de7ee4a5f" translate="yes" xml:space="preserve">
          <source>To deploy your application, you have to compile it, and then host the JavaScript, CSS, and HTML on a web server. Built Angular applications are very portable and can live in any environment or served by any technology, such as Node, Java, .NET, PHP, and many others.</source>
          <target state="translated">要部署你的应用程序,你必须编译它,然后将JavaScript,CSS和HTML托管在Web服务器上。内置的Angular应用程序具有很强的可移植性,可以生活在任何环境中,或由任何技术服务,如Node、Java、.NET、PHP等。</target>
        </trans-unit>
        <trans-unit id="458c0ad6c07671bce624449b3ec9d294dc2007ad" translate="yes" xml:space="preserve">
          <source>To determine the destination project, use the &lt;code&gt;Tree.read()&lt;/code&gt; method to read the contents of the workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, at the root of the workspace. Add the following code to your factory function.</source>
          <target state="translated">要确定目标项目，请使用 &lt;code&gt;Tree.read()&lt;/code&gt; 方法在工作区的根目录读取工作区配置文件 &lt;code&gt;angular.json&lt;/code&gt; 的内容。将以下代码添加到工厂函数中。</target>
        </trans-unit>
        <trans-unit id="b38921f33869fd230c21c0400a6e54f928af5829" translate="yes" xml:space="preserve">
          <source>To disable all animations for an Angular app, place the &lt;code&gt;@.disabled&lt;/code&gt; host binding on the topmost Angular component.</source>
          <target state="translated">要禁用Angular应用程序的所有动画，请将 &lt;code&gt;@.disabled&lt;/code&gt; 主机绑定放置在最顶部的Angular组件上。</target>
        </trans-unit>
        <trans-unit id="8d2b1d0f9febd720f6513d3ea282a6265dbf4671" translate="yes" xml:space="preserve">
          <source>To display a list of heroes, begin by adding an array of hero names to the component and redefine &lt;code&gt;myHero&lt;/code&gt; to be the first name in the array.</source>
          <target state="translated">要显示英雄列表，请先在组件中添加一个英雄名称数组，然后将 &lt;code&gt;myHero&lt;/code&gt; 重新定义为该数组中的名字。</target>
        </trans-unit>
        <trans-unit id="c5c321525611939ce03b07b9d1cd2adb53d24843" translate="yes" xml:space="preserve">
          <source>To display a template when &lt;code&gt;expression&lt;/code&gt; evaluates to false, use an &lt;code&gt;else&lt;/code&gt; template binding as shown in the following example. The &lt;code&gt;else&lt;/code&gt; binding points to an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element labeled &lt;code&gt;#elseBlock&lt;/code&gt;. The template can be defined anywhere in the component view, but is typically placed right after &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; for readability.</source>
          <target state="translated">要在 &lt;code&gt;expression&lt;/code&gt; 的计算结果为false 时显示模板，请使用 &lt;code&gt;else&lt;/code&gt; 模板绑定，如以下示例所示。的 &lt;code&gt;else&lt;/code&gt; 结合指向一个 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素标记 &lt;code&gt;#elseBlock&lt;/code&gt; 。可以在组件视图中的任何位置定义模板，但是 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 便于阅读，通常将其放置在ngIf之后。</target>
        </trans-unit>
        <trans-unit id="f578c5cb78b9f7bd8066f62098c29394c6101150" translate="yes" xml:space="preserve">
          <source>To display the &lt;code&gt;HeroesComponent&lt;/code&gt;, you must add it to the template of the shell &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">要显示 &lt;code&gt;HeroesComponent&lt;/code&gt; ，必须将其添加到外壳 &lt;code&gt;AppComponent&lt;/code&gt; 的模板中。</target>
        </trans-unit>
        <trans-unit id="6f6cadc05a799ae38b432205731731047b90305a" translate="yes" xml:space="preserve">
          <source>To display the &lt;code&gt;ProfileEditor&lt;/code&gt; component that contains the form, add it to a component template.</source>
          <target state="translated">要显示包含表单的 &lt;code&gt;ProfileEditor&lt;/code&gt; 组件，请将其添加到组件模板。</target>
        </trans-unit>
        <trans-unit id="903cc390eb408d1ea55af3983eda315a6832f5dc" translate="yes" xml:space="preserve">
          <source>To display the names of the products, use the interpolation syntax &lt;code&gt;{{ }}&lt;/code&gt;. Interpolation renders a property's value as text. Inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, add an &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; to display the interpolation of the product's name property:</source>
          <target state="translated">要显示产品名称，请使用插值语法 &lt;code&gt;{{ }}&lt;/code&gt; 。插值将属性的值呈现为文本。在 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 内，添加 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 以显示产品的name属性的插值：</target>
        </trans-unit>
        <trans-unit id="af6b8e70bc867df920c57a14286a9aca559c2d1f" translate="yes" xml:space="preserve">
          <source>To do this for &lt;code&gt;ng serve&lt;/code&gt;, create a new file, &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; next to &lt;code&gt;tsconfig.app.json&lt;/code&gt; with the following content.</source>
          <target state="translated">要做到这一点的 &lt;code&gt;ng serve&lt;/code&gt; ，创建一个新的文件， &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; 旁边 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 包含以下内容。</target>
        </trans-unit>
        <trans-unit id="2d79d0bb78f9158b8f6b014230ea7d15c1b601c1" translate="yes" xml:space="preserve">
          <source>To do this, list the more specific transitions &lt;em&gt;before&lt;/em&gt;&lt;code&gt;* =&amp;gt; *&lt;/code&gt;.</source>
          <target state="translated">为此，请&lt;em&gt;在&lt;/em&gt; &lt;code&gt;* =&amp;gt; *&lt;/code&gt; &lt;em&gt;之前&lt;/em&gt;列出更具体的过渡。</target>
        </trans-unit>
        <trans-unit id="4af7f031db75e121d1590f04ee2af53757ce04c5" translate="yes" xml:space="preserve">
          <source>To do this, you'll use the Angular &lt;em&gt;router&lt;/em&gt;. The Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;router&lt;/a&gt; enables you to show different components and data to the user based on where the user is in the application. The router enables navigation from one view to the next as users perform application tasks:</source>
          <target state="translated">为此，您将使用Angular &lt;em&gt;路由器&lt;/em&gt;。Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;路由器&lt;/a&gt;使您可以根据用户在应用程序中的位置向用户显示不同的组件和数据。当用户执行应用程序任务时，路由器可以从一个视图导航到下一个视图：</target>
        </trans-unit>
        <trans-unit id="94dcbf1537099a8d72c6a9756d09210df8ae8156" translate="yes" xml:space="preserve">
          <source>To enable preloading of all lazy loaded modules, import the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token from the Angular router package.</source>
          <target state="translated">要启用所有延迟加载模块的预加载，请从Angular路由器包中导入 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; 令牌。</target>
        </trans-unit>
        <trans-unit id="7fc710364e3b588a30c9d0c74118b2c885102b0a" translate="yes" xml:space="preserve">
          <source>To enable routing transition animation, do the following:</source>
          <target state="translated">要启用路由过渡动画,请执行以下操作。</target>
        </trans-unit>
        <trans-unit id="25d5eb1605457fea82578b3d288b0d9a7ae3a8f5" translate="yes" xml:space="preserve">
          <source>To ensure a high-quality, consistent experience for Angular documentation users.</source>
          <target state="translated">为了保证Angular文档用户的高质量、一致性体验。</target>
        </trans-unit>
        <trans-unit id="b0bf35c98e00c5fabe6d7d695facb2ff6dcd71c2" translate="yes" xml:space="preserve">
          <source>To ensure any necessary teardown is triggered in the AngularJS app, such as removal of global listeners, you also implement a method to call the &lt;code&gt;$rootScope.destroy()&lt;/code&gt; method.</source>
          <target state="translated">为了确保在AngularJS应用中触发了所有必要的拆除操作，例如删除全局侦听器，您还实现了一种方法来调用 &lt;code&gt;$rootScope.destroy()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="ebde52584fea72d72602dc3407e717b85e61cb56" translate="yes" xml:space="preserve">
          <source>To ensure resource integrity, the Angular service worker validates the hashes of all resources for which it has a hash. Typically for an app created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, this is everything in the &lt;code&gt;dist&lt;/code&gt; directory covered by the user's &lt;code&gt;src/ngsw-config.json&lt;/code&gt; configuration.</source>
          <target state="translated">为了确保资源完整性，Angular服务工作程序会验证其具有哈希值的所有资源的哈希值。通常，对于使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建的应用程序，这就是 &lt;code&gt;dist&lt;/code&gt; 目录中用户 &lt;code&gt;src/ngsw-config.json&lt;/code&gt; 配置所涵盖的所有内容。</target>
        </trans-unit>
        <trans-unit id="36a2f26d071a65a5067d8e3435ef41b66818020c" translate="yes" xml:space="preserve">
          <source>To ensure that clients can only download the files that they are permitted to see, put all client-facing asset files in the &lt;code&gt;/dist&lt;/code&gt; folder and only honor requests for files from the &lt;code&gt;/dist&lt;/code&gt; folder.</source>
          <target state="translated">为了确保客户端只能下载他们所能够看到的，把所有面向客户的资产文件在文件 &lt;code&gt;/dist&lt;/code&gt; 文件夹，并从这些文件只是荣誉的请求 &lt;code&gt;/dist&lt;/code&gt; 文件夹。</target>
        </trans-unit>
        <trans-unit id="d8598c2022602203d9603274200d342e1eb538fb" translate="yes" xml:space="preserve">
          <source>To ensure that the compiler still generates a factory, add dynamically loaded components to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;entryComponents&lt;/code&gt; array:</source>
          <target state="translated">为了确保编译器仍然生成工厂，请将动态加载的组件添加到 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;entryComponents&lt;/code&gt; 数组中：</target>
        </trans-unit>
        <trans-unit id="e1812e3ae723bb35d7649d2ff5479140c8c70d2c" translate="yes" xml:space="preserve">
          <source>To exclude a heading from the TOC, create the heading as an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; element with a class called 'no-toc'. You can't do this with markdown.</source>
          <target state="translated">要从目录中排除标题，请使用名为&amp;ldquo; no-toc&amp;rdquo;的类将标题创建为 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 元素。您无法通过markdown做到这一点。</target>
        </trans-unit>
        <trans-unit id="ec903eae4634b565ecbfd272a77568b1f130ca3e" translate="yes" xml:space="preserve">
          <source>To exclude an asset, you can remove it from the assets configuration.</source>
          <target state="translated">要排除某项资产,您可以从资产配置中删除它。</target>
        </trans-unit>
        <trans-unit id="f9e07f2c5513c75b8f79d6963b277e9fbd52a303" translate="yes" xml:space="preserve">
          <source>To execute the observable you have created and begin receiving notifications, you call its &lt;code&gt;subscribe()&lt;/code&gt; method, passing an &lt;em&gt;observer&lt;/em&gt;. This is a JavaScript object that defines the handlers for the notifications you receive. The &lt;code&gt;subscribe()&lt;/code&gt; call returns a &lt;code&gt;Subscription&lt;/code&gt; object that has an &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; method, which you call to stop receiving notifications.</source>
          <target state="translated">要执行您创建的可观察对象并开始接收通知，请调用它的 &lt;code&gt;subscribe()&lt;/code&gt; 方法，并传递一个&lt;em&gt;observer&lt;/em&gt;。这是一个JavaScript对象，用于定义您收到的通知的处理程序。所述 &lt;code&gt;subscribe()&lt;/code&gt; 调用返回一个 &lt;code&gt;Subscription&lt;/code&gt; ，其具有对象 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; 方法，该方法调用以停止接收通知。</target>
        </trans-unit>
        <trans-unit id="4a6f3f5c4289042742ca02c090211b9822454c2a" translate="yes" xml:space="preserve">
          <source>To explicitly disable differential loading:</source>
          <target state="translated">要明确地禁用差分加载。</target>
        </trans-unit>
        <trans-unit id="dc86ffb91970ba4ea3d784fdcfa4a20106112fb8" translate="yes" xml:space="preserve">
          <source>To filter output in AngularJS templates, use the pipe character (|) and one or more filters.</source>
          <target state="translated">要在AngularJS模板中过滤输出,使用管道字符(|)和一个或多个过滤器。</target>
        </trans-unit>
        <trans-unit id="154ce8f40b436ba677325298e54443b2e23530f6" translate="yes" xml:space="preserve">
          <source>To fix that, create an array with the new hero appended and assign that to &lt;code&gt;heroes&lt;/code&gt;. This time Angular detects that the array reference has changed. It executes the pipe and updates the display with the new array, which includes the new flying hero.</source>
          <target state="translated">要解决此问题，请创建一个添加了新英雄的数组，并将其分配给 &lt;code&gt;heroes&lt;/code&gt; 。这次Angular检测到数组引用已更改。它执行管道并使用新数组更新显示，其中包括新的飞行英雄。</target>
        </trans-unit>
        <trans-unit id="56cf754ee3e7dca1fe9c44b4816cf790a119fb8c" translate="yes" xml:space="preserve">
          <source>To fix this issue, listen to both the &lt;em&gt;Enter&lt;/em&gt; key and the &lt;em&gt;blur&lt;/em&gt; event.</source>
          <target state="translated">要解决此问题，请同时听&lt;em&gt;回车&lt;/em&gt;键和&lt;em&gt;模糊&lt;/em&gt;事件。</target>
        </trans-unit>
        <trans-unit id="ba34c5be9ff1d603c4140d7b3f5b608439a0b39b" translate="yes" xml:space="preserve">
          <source>To flush the first quote from the observable, you call &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;. Then call &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to tell Angular to update the screen.</source>
          <target state="translated">要从可观察对象中清除第一引号，请调用 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 。然后调用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; 告诉Angular更新屏幕。</target>
        </trans-unit>
        <trans-unit id="fc7ba23765221be6372d0b33a6a7c1abada5cdf3" translate="yes" xml:space="preserve">
          <source>To follow along with the tutorial, clone the &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt; repository and apply the steps as you go.</source>
          <target state="translated">要继续学习本教程，请克隆&lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt;存储库，然后按照自己的步骤进行操作。</target>
        </trans-unit>
        <trans-unit id="50c790d75defb0a4ec3aa8c5265b6f9346b5307e" translate="yes" xml:space="preserve">
          <source>To follow this pattern, import the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper with the other testing symbols.</source>
          <target state="translated">要遵循此模式，请将 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 帮助器与其他测试符号一起导入。</target>
        </trans-unit>
        <trans-unit id="0e9bedad15ebc538d9e68cbdd28af270587693f3" translate="yes" xml:space="preserve">
          <source>To generate a coverage report run the following command in the root of your project.</source>
          <target state="translated">要生成覆盖率报告,请在项目的根目录下运行以下命令。</target>
        </trans-unit>
        <trans-unit id="abf26b47cd0c5e68c8c79d0daf2df1036fa78b7a" translate="yes" xml:space="preserve">
          <source>To generate a new random user ID, run the following command:</source>
          <target state="translated">要生成一个新的随机用户ID,请运行以下命令。</target>
        </trans-unit>
        <trans-unit id="8acafccdcb332ce70715cbf29a3839a0c89102b8" translate="yes" xml:space="preserve">
          <source>To get &lt;code&gt;Node.js&lt;/code&gt;, go to &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt;.</source>
          <target state="translated">要获取 &lt;code&gt;Node.js&lt;/code&gt; ，请转到&lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0e9f4a06c6902eaaa4816e3c94cc563103857fe3" translate="yes" xml:space="preserve">
          <source>To get around this problem you can use TypeScript path mapping to tell TypeScript that it should load some modules from a specific location. List all the peer dependencies that your library uses in the workspace TypeScript configuration file &lt;code&gt;./tsconfig.json&lt;/code&gt;, and point them at the local copy in the app's &lt;code&gt;node_modules&lt;/code&gt; folder.</source>
          <target state="translated">要解决此问题，您可以使用TypeScript路径映射来告诉TypeScript它应该从特定位置加载某些模块。列出库在工作区TypeScript配置文件 &lt;code&gt;./tsconfig.json&lt;/code&gt; 中使用的所有对等依赖项，并将它们指向应用程序的 &lt;code&gt;node_modules&lt;/code&gt; 文件夹中的本地副本。</target>
        </trans-unit>
        <trans-unit id="c620c03d023234ed2391242307f1d8712d8a8439" translate="yes" xml:space="preserve">
          <source>To get started with adding Angular animations to your project, import the animation-specific modules along with standard Angular functionality.</source>
          <target state="translated">要开始在项目中添加Angular动画,请将动画专用模块与标准Angular功能一起导入。</target>
        </trans-unit>
        <trans-unit id="22605a20b1a22f239c1e3107167d2597f5c39ded" translate="yes" xml:space="preserve">
          <source>To guard against a lazy loaded module re-importing &lt;code&gt;GreetingModule&lt;/code&gt;, add the following &lt;code&gt;GreetingModule&lt;/code&gt; constructor.</source>
          <target state="translated">为了防止延迟加载的模块重新导入 &lt;code&gt;GreetingModule&lt;/code&gt; ，请添加下面的 &lt;code&gt;GreetingModule&lt;/code&gt; 构造函数。</target>
        </trans-unit>
        <trans-unit id="77ca585f495413c83c85661daa403686e9bd57f1" translate="yes" xml:space="preserve">
          <source>To guard against minification problems, tell Angular explicitly that it should inject an instance of the &lt;code&gt;MovieService&lt;/code&gt; in the first parameter.</source>
          <target state="translated">为了防止缩小问题，请明确告诉Angular它应该在第一个参数中注入 &lt;code&gt;MovieService&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="0483a13b68a98141b413a5592409e590323ff6ac" translate="yes" xml:space="preserve">
          <source>To help determine whether your proxy is working as intended, set the &lt;code&gt;logLevel&lt;/code&gt; option. For example:</source>
          <target state="translated">为了帮助确定您的代理是否按预期工作，请设置 &lt;code&gt;logLevel&lt;/code&gt; 选项。例如：</target>
        </trans-unit>
        <trans-unit id="ef7a832a2ae76c1a243ec1b9f05e550953889fdf" translate="yes" xml:space="preserve">
          <source>To help ensure that you have sufficient time and a clear path to update, this is our deprecation policy:</source>
          <target state="translated">为了确保你有足够的时间和清晰的更新路径,这是我们的弃用政策。</target>
        </trans-unit>
        <trans-unit id="b18eb17f8c80dcf33ac422b8959463f27ab98a1d" translate="yes" xml:space="preserve">
          <source>To help you future-proof your apps, the following table lists all deprecated APIs and features, organized by the release in which they are candidates for removal. Each item is linked to the section later in this guide that describes the deprecation reason and replacement options.</source>
          <target state="translated">为了帮助您的应用程序面向未来,下表列出了所有已废弃的 API 和功能,并按其候选删除的版本排列。每个项目都链接到本指南后面描述废弃原因和替换选项的部分。</target>
        </trans-unit>
        <trans-unit id="d5b3bbad8bfc4eb6cea8091361ccfc84c96c7368" translate="yes" xml:space="preserve">
          <source>To help you get going, the following steps use predefined product data and methods from the &lt;code&gt;product-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">为了帮助您 &lt;code&gt;product-list.component.ts&lt;/code&gt; ，以下步骤使用了product-list.component.ts文件中的预定义产品数据和方法。</target>
        </trans-unit>
        <trans-unit id="e3fe5b2a2bd58ed1b8655045a4030a46a226b4e3" translate="yes" xml:space="preserve">
          <source>To host an Angular app on another web host, you'll need to upload or send the files to the host. Because you are building a Single Page Application, you'll also need to make sure you redirect any invalid URLs to your &lt;code&gt;index.html&lt;/code&gt; file. Learn more about development and distribution of your application in the &lt;a href=&quot;../guide/build&quot;&gt;Building &amp;amp; Serving&lt;/a&gt; and &lt;a href=&quot;../guide/deployment&quot;&gt;Deployment&lt;/a&gt; guides.</source>
          <target state="translated">要将Angular应用托管在另一个虚拟主机上，您需要将文件上传或发送到该主机。因为您正在构建单页应用程序，所以还需要确保将所有无效的URL重定向到 &lt;code&gt;index.html&lt;/code&gt; 文件。在《&lt;a href=&quot;../guide/build&quot;&gt;构建和服务&lt;/a&gt;与&lt;a href=&quot;../guide/deployment&quot;&gt;部署》&lt;/a&gt;指南中了解有关应用程序开发和分发的更多信息。</target>
        </trans-unit>
        <trans-unit id="5f77fdab586f868e4093851acfc1533b76f62e25" translate="yes" xml:space="preserve">
          <source>To illustrate the use of &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, edit these parts of your app:</source>
          <target state="translated">为了说明 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 的用法，请编辑应用程序的以下部分：</target>
        </trans-unit>
        <trans-unit id="1fbb1f454bb7d2e047050e16a5b5adac1e15336c" translate="yes" xml:space="preserve">
          <source>To illustrate, here's a simplified version of &lt;code&gt;HighlightDirective&lt;/code&gt; from the &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; page.</source>
          <target state="translated">为了说明这一点，这是&amp;ldquo; &lt;a href=&quot;attribute-directives&quot;&gt;属性指令&amp;rdquo;&lt;/a&gt;页面上的 &lt;code&gt;HighlightDirective&lt;/code&gt; 的简化版本。</target>
        </trans-unit>
        <trans-unit id="d9242c7bce3b2639f0867ea3c0827c2fa3fcc014" translate="yes" xml:space="preserve">
          <source>To implement an interceptor, declare a class that implements the &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">要实现拦截器，请声明一个实现 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; 接口的 &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; 方法的类。</target>
        </trans-unit>
        <trans-unit id="69b60d346fb92f51499356b42a9f5d8d37258d56" translate="yes" xml:space="preserve">
          <source>To include the new component, use its selector, &lt;code&gt;app-product-alert&lt;/code&gt;, as you would an HTML element.</source>
          <target state="translated">要包括新组件，请使用其选择器 &lt;code&gt;app-product-alert&lt;/code&gt; ，就像使用HTML元素一样。</target>
        </trans-unit>
        <trans-unit id="835dfd12477d853747c300147b3c559302e5eeff" translate="yes" xml:space="preserve">
          <source>To incorporate the feature module into your app, you have to let the root module, &lt;code&gt;app.module.ts&lt;/code&gt;, know about it. Notice the &lt;code&gt;CustomerDashboardModule&lt;/code&gt; export at the bottom of &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;. This exposes it so that other modules can get to it. To import it into the &lt;code&gt;AppModule&lt;/code&gt;, add it to the imports in &lt;code&gt;app.module.ts&lt;/code&gt; and to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">要将功能模块合并到您的应用程序中，必须让根模块 &lt;code&gt;app.module.ts&lt;/code&gt; 知道它。注意在 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; 底部的 &lt;code&gt;CustomerDashboardModule&lt;/code&gt; 导出。这将其公开，以便其他模块可以使用它。为了将其导入 &lt;code&gt;AppModule&lt;/code&gt; ，将其添加到在进口 &lt;code&gt;app.module.ts&lt;/code&gt; 和到 &lt;code&gt;imports&lt;/code&gt; 阵：</target>
        </trans-unit>
        <trans-unit id="7d1f76b24bcf5a077b04779a10d2acb122df684c" translate="yes" xml:space="preserve">
          <source>To inspect the properties of the associated &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; (like validity state), export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;). You then access the control using the directive's &lt;code&gt;control&lt;/code&gt; property, but most properties used (like &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt;) fall through to the control anyway for direct access. See a full list of properties directly available in &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">要检查关联的 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 的属性（如有效性状态），请使用 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 作为键将指令导出到本地模板变量中（例如： &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; =&amp;ldquo; ngModel &amp;rdquo;）。然后，您可以使用指令的 &lt;code&gt;control&lt;/code&gt; 属性访问控件，但是无论如何，大多数使用的属性（例如 &lt;code&gt;valid&lt;/code&gt; 和 &lt;code&gt;dirty&lt;/code&gt; ）都会落入控件以进行直接访问。请参阅 &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt; 中直接可用的属性的完整列表。</target>
        </trans-unit>
        <trans-unit id="3be4cd44a75c82f831a7fb264bb28d71c6d67aa0" translate="yes" xml:space="preserve">
          <source>To install the CLI using &lt;code&gt;npm&lt;/code&gt;, open a terminal/console window and enter the following command:</source>
          <target state="translated">要使用 &lt;code&gt;npm&lt;/code&gt; 安装CLI ，请打开终端/控制台窗口并输入以下命令：</target>
        </trans-unit>
        <trans-unit id="978f127332b309b9081001f9ef289a772808bdd2" translate="yes" xml:space="preserve">
          <source>To install the latest version of TypeScript:</source>
          <target state="translated">要安装最新版本的TypeScript。</target>
        </trans-unit>
        <trans-unit id="79ca5dd762f8884fdb128fbf222685ff3aa6cc9b" translate="yes" xml:space="preserve">
          <source>To instruct the AOT compiler to use your translation configuration, set the three &quot;i18n&quot; build configuration options in your CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">要指示AOT编译器使用您的转换配置，请在CLI配置文件 &lt;code&gt;angular.json&lt;/code&gt; 中设置三个&amp;ldquo; i18n&amp;rdquo;构建配置选项。</target>
        </trans-unit>
        <trans-unit id="1677d547af7492d218688d8fc496408b0a0b031e" translate="yes" xml:space="preserve">
          <source>To learn more about other browsers that are service worker ready, see the &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt; page and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN docs&lt;/a&gt;.</source>
          <target state="translated">要了解有关可用于Service Worker的其他浏览器的更多信息，请参阅&amp;ldquo; &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;我可以使用&amp;rdquo;&lt;/a&gt;页面和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c84c9b491abea1ff59708036d037ad515cf9fdbd" translate="yes" xml:space="preserve">
          <source>To learn more about providers, see the &lt;a href=&quot;../guide/providers&quot;&gt;Providers section&lt;/a&gt;. To learn more about injectors, see the &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">要了解有关提供程序的更多信息，请参阅&amp;ldquo; &lt;a href=&quot;../guide/providers&quot;&gt;提供程序&amp;rdquo;部分&lt;/a&gt;。要了解有关注入器的更多信息，请参阅&amp;ldquo; &lt;a href=&quot;../guide/dependency-injection&quot;&gt;依赖注入&amp;rdquo;指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f76858a7e260841160caa41bedc9711829079ce9" translate="yes" xml:space="preserve">
          <source>To learn more about reactive forms, see the following guides:</source>
          <target state="translated">要了解更多关于反应式表单的信息,请参见以下指南。</target>
        </trans-unit>
        <trans-unit id="59a572cbe7b9a3e97969793c2bc9cfdeb16ab418" translate="yes" xml:space="preserve">
          <source>To learn more about template-driven forms, see the following guides:</source>
          <target state="translated">要了解有关模板驱动表单的更多信息,请参见以下指南。</target>
        </trans-unit>
        <trans-unit id="738b9eb031dded491e17886663caa1ff29e71ce4" translate="yes" xml:space="preserve">
          <source>To learn more about the full capabilities of the CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI command reference&lt;/a&gt;.</source>
          <target state="translated">要了解有关CLI的全部功能的更多信息，请参阅&lt;a href=&quot;cli&quot;&gt;CLI命令参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c3f50de3d99d51fc3307e8adf60a7d37ef18510f" translate="yes" xml:space="preserve">
          <source>To learn more about using the Angular CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI Overview&lt;/a&gt;. In addition to creating the initial workspace and app scaffolding, you can use the CLI to generate Angular code such as components and services. The CLI supports the full development cycle, including building, testing, bundling, and deployment.</source>
          <target state="translated">要了解有关使用Angular CLI的更多信息，请参阅&lt;a href=&quot;cli&quot;&gt;CLI概述&lt;/a&gt;。除了创建初始工作区和应用程序支架外，您还可以使用CLI生成Angular代码，例如组件和服务。CLI支持整个开发周期，包括构建，测试，捆绑和部署。</target>
        </trans-unit>
        <trans-unit id="416a58e3ce60c40d39bdf10d063589c334e40ab1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;architecture-services&quot;&gt;服务和依赖注入简介&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e694d6c1d32b6b56ce020c646c48af952c618210" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;browser-support&quot;&gt;浏览器支持&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b5d547564ae49438c7f5583123e361486b37cdfb" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;form-validation&quot;&gt;表单验证&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b51947679f07f8322ce7f3740f084897727afa5" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;lifecycle-hooks&quot;&gt;生命周期挂钩&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5dac4e123cca0d4a59d5f6f873a05e1a76d9583b" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参见&lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c2218a8556fffcfa1f6d34419d68f2922869161d" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;observables&quot;&gt;Observables&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;observables&quot;&gt;Observables&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1076876ca0b526aa98a8f286bda2dbf9a2d471f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;pipes&quot;&gt;管道&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a1bfb784682ebe266242fbdb242bb6f408ed07f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&amp;ldquo; &lt;a href=&quot;router&quot;&gt;路由和导航&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b914fb9f887c33faf04a08f5c6bcad4ae48f1d7" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;schematics&quot;&gt;Schematics Overview&lt;/a&gt; and &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅《&lt;a href=&quot;schematics&quot;&gt;原理图概述&lt;/a&gt;和&lt;a href=&quot;schematics-for-libraries&quot;&gt;库原理图》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d010cfde7bc2c506df423549e631c7008431f001" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参见《&lt;a href=&quot;structural-directives&quot;&gt;结构指令》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e4570551808faa6eea6e2ab0181ccbcaaa5c2263" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;Input and Output Properties&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;输入和输出属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ecceabc50e42b7eefd96c26c6bf1f43187e84d1f" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input and output properties&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;输入和输出属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="49bdcdc84e41d471767e7d1270cab230b0e8a7f1" translate="yes" xml:space="preserve">
          <source>To learn more, see &lt;a href=&quot;universal&quot;&gt;Angular Universal: server-side rendering&lt;/a&gt;.</source>
          <target state="translated">要了解更多信息，请参阅&lt;a href=&quot;universal&quot;&gt;Angular Universal：服务器端渲染&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eb003e20f49d50feecb8fdc386ebe9f76301de6f" translate="yes" xml:space="preserve">
          <source>To limit access to a service, consider lazy loading the NgModule that provides that service. See &lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;How do I restrict service scope to a module?&lt;/a&gt; for more information.</source>
          <target state="translated">要限制对服务的访问，请考虑延迟加载提供该服务的NgModule。请参阅&lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;如何将服务范围限制为模块？&lt;/a&gt;想要查询更多的信息。</target>
        </trans-unit>
        <trans-unit id="176131b1c166c15dd52ca2270019e00646222f93" translate="yes" xml:space="preserve">
          <source>To link our builder implementation with its schema and name, we need to create a &lt;em&gt;builder definition&lt;/em&gt; file, which we can point to in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">要将构建器实现与其架构和名称链接起来，我们需要创建一个&lt;em&gt;构建器定义&lt;/em&gt;文件，我们可以在 &lt;code&gt;package.json&lt;/code&gt; 中指向该文件。</target>
        </trans-unit>
        <trans-unit id="8ef171fef0328a2cd5ad545be79413b8427d3d1b" translate="yes" xml:space="preserve">
          <source>To link to a Stackblitz defined by a named &lt;code&gt;stackblitz.json&lt;/code&gt; file, set the &lt;code&gt;stackblitz&lt;/code&gt; attribute. The following example links to the Stackblitz defined by &lt;code&gt;second.stackblitz.json&lt;/code&gt; in the current guide's directory.</source>
          <target state="translated">要链接到由已命名的 &lt;code&gt;stackblitz.json&lt;/code&gt; 文件定义的Stackblitz，请设置 &lt;code&gt;stackblitz&lt;/code&gt; 属性。以下示例链接到当前指南目录中second.stackblitz.json定义的 &lt;code&gt;second.stackblitz.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0dfc4d2bbeb415d911b77bd57e23158017465af" translate="yes" xml:space="preserve">
          <source>To link to a Stackblitz in a folder whose name is not the same as the current guide page, set the &lt;code&gt;name&lt;/code&gt; attribute to the name of that folder.</source>
          <target state="translated">要链接到名称与当前指南页面不同的文件夹中的Stackblitz，请将 &lt;code&gt;name&lt;/code&gt; 属性设置为该文件夹的名称。</target>
        </trans-unit>
        <trans-unit id="9e806bc9cf5ce821c72637bad288f0c8a385e3b7" translate="yes" xml:space="preserve">
          <source>To make a request with progress events enabled, you can create an instance of &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; option set true to enable tracking of progress events.</source>
          <target state="translated">为了使请求启用进度事件，您可以创建一个实例 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 与 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; 设置为true，使进度事件的跟踪选项。</target>
        </trans-unit>
        <trans-unit id="2d1f94a35fe29cf68215d8ce11be523428a2104c" translate="yes" xml:space="preserve">
          <source>To make changes to the documentation pages and sample code, clone the &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular github repository&lt;/a&gt; and go to the &lt;code&gt;aio/&lt;/code&gt; folder.</source>
          <target state="translated">要更改文档页面和示例代码，请克隆&lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular github存储库&lt;/a&gt;并转到 &lt;code&gt;aio/&lt;/code&gt; 文件夹。</target>
        </trans-unit>
        <trans-unit id="ad1bed88cabd87c7ef61bbd728ce927c47d305ed" translate="yes" xml:space="preserve">
          <source>To make each product name a link to product details, add the &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; element and set its title to be the product's name by using the property binding &lt;code&gt;[ ]&lt;/code&gt; syntax, as follows:</source>
          <target state="translated">为了使每个产品名产品细节的链接，添加 &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; 元件，并设置其标题通过使用属性绑定到是产品的名称 &lt;code&gt;[ ]&lt;/code&gt; 语法，如下所示：</target>
        </trans-unit>
        <trans-unit id="0133990127a445b9c4636bf47add6269aff05d0f" translate="yes" xml:space="preserve">
          <source>To make library code reusable you must define a public API for it. This &quot;user layer&quot; defines what is available to consumers of your library. A user of your library should be able to access public functionality (such as NgModules, service providers and general utility functions) through a single import path.</source>
          <target state="translated">为了使库代码可以重用,你必须为它定义一个公共API。这个 &quot;用户层 &quot;定义了你的库的消费者可以使用的功能。你的库的用户应该能够通过一个单一的导入路径来访问公共功能(如NgModules、服务提供者和一般实用功能)。</target>
        </trans-unit>
        <trans-unit id="f4c06ba3e64fe70ec544df6b51f17ee32a730f00" translate="yes" xml:space="preserve">
          <source>To make sure that the &lt;code&gt;HeroService&lt;/code&gt; can provide this service, register it with the &lt;em&gt;injector&lt;/em&gt;, which is the object that is responsible for choosing and injecting the provider where the app requires it.</source>
          <target state="translated">为了确保该 &lt;code&gt;HeroService&lt;/code&gt; 可以提供这样的服务，用它注册&lt;em&gt;喷油器&lt;/em&gt;，这是负责选择和注入其中的应用程序需要它的提供者的物体。</target>
        </trans-unit>
        <trans-unit id="abe2d5f3112ac6f160f5eaad338cd564e7929599" translate="yes" xml:space="preserve">
          <source>To make sure there is only one instance of &lt;code&gt;NewLogger&lt;/code&gt;, alias &lt;code&gt;OldLogger&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">为了确保只有 &lt;code&gt;NewLogger&lt;/code&gt; 的一个实例，别名为 &lt;code&gt;OldLogger&lt;/code&gt; 并带有 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="e85568359a0fbe5ee087b7635e1885b559b60aea" translate="yes" xml:space="preserve">
          <source>To make sure your schematics source files get compiled into the library bundle, add the following scripts to the &lt;code&gt;package.json&lt;/code&gt; file in your library project's root folder (&lt;code&gt;projects/my-lib&lt;/code&gt;).</source>
          <target state="translated">为了确保将原理图源文件编译到库包中，请将以下脚本添加到库项目的根文件夹（ &lt;code&gt;projects/my-lib&lt;/code&gt; ）中的 &lt;code&gt;package.json&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="b618bd0150119d92c15de99c07c66b9d5d5df18d" translate="yes" xml:space="preserve">
          <source>To make the &quot;Notify Me&quot; button work, you need to configure two things:</source>
          <target state="translated">要使 &quot;通知我 &quot;按钮工作,你需要配置两件事。</target>
        </trans-unit>
        <trans-unit id="c63bfd6ff80b0594b74ebefc3198e01f8f521a91" translate="yes" xml:space="preserve">
          <source>To make the app navigate to the dashboard automatically, add the following route to the &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; array.</source>
          <target state="translated">若要使应用程序自动导航到仪表板，请将以下路由添加到 &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="f13fc1c29e96e1dfdbe3eed259eadf83ed2de57e" translate="yes" xml:space="preserve">
          <source>To make the change less abrupt, we need to define an animation &lt;em&gt;transition&lt;/em&gt; to specify the changes that occur between one state and another over a period of time. The &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function accepts two arguments: the first argument accepts an expression that defines the direction between two transition states, and the second argument accepts one or a series of &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; steps.</source>
          <target state="translated">为了使更改不那么突然，我们需要定义一个动画&lt;em&gt;过渡，&lt;/em&gt;以指定一段时间内一个状态与另一状态之间发生的更改。的 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 函数接受两个参数：第一个参数接受限定两个过渡态之间的方向的表达，并且所述第二参数接受一个或一系列的 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 的步骤。</target>
        </trans-unit>
        <trans-unit id="8bcf14d372529e2a67e2f9aa251e900cf6621e7d" translate="yes" xml:space="preserve">
          <source>To make these transitions as easy as possible, we deprecate APIs and features for a period of time before removing them. This gives you time to update your apps to the latest APIs and best practices.</source>
          <target state="translated">为了使这些过渡尽可能简单,我们在删除API和功能之前会先废弃一段时间。这让您有时间更新您的应用程序以适应最新的API和最佳实践。</target>
        </trans-unit>
        <trans-unit id="c7d74082b91da794e2772b1b64caafcf244578ba" translate="yes" xml:space="preserve">
          <source>To make these transitions as easy as possible, we make these commitments to you:</source>
          <target state="translated">为了使这些过渡尽可能的简单,我们向您做出以下承诺。</target>
        </trans-unit>
        <trans-unit id="e4342ac072084a99b08c67145d8f7f9d46ebc4bf" translate="yes" xml:space="preserve">
          <source>To make updating easy, we provide complete instructions in the interactive &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;.</source>
          <target state="translated">为了使更新变得容易，我们在交互式&lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide中&lt;/a&gt;提供了完整的说明。</target>
        </trans-unit>
        <trans-unit id="f346dda78884da2f316927c754a446df557d7e97" translate="yes" xml:space="preserve">
          <source>To make use of all the features of Angular service worker, use the latest versions of Angular and the Angular CLI.</source>
          <target state="translated">要使用Angular服务工作者的所有功能,请使用最新版本的Angular和Angular CLI。</target>
        </trans-unit>
        <trans-unit id="d3a75dfb8b6d5e0a84151719b6bac15ccc94edf4" translate="yes" xml:space="preserve">
          <source>To make your solution reusable, you need to adjust it so that it does not depend on app-specific code. Here are some things to consider in migrating application functionality to a library.</source>
          <target state="translated">为了使你的解决方案可以重用,你需要调整它,使它不依赖于应用程序特定的代码。以下是将应用功能迁移到库中需要考虑的一些事情。</target>
        </trans-unit>
        <trans-unit id="ebb28b48869f066439d945bc03e317d919b03091" translate="yes" xml:space="preserve">
          <source>To mark a value as trusted, inject &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; and call one of the following methods:</source>
          <target state="translated">要将值标记为受信任，请注入 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; 并调用以下方法之一：</target>
        </trans-unit>
        <trans-unit id="826ff064aa36b11928c6420ce581e8abd48d94ef" translate="yes" xml:space="preserve">
          <source>To mark an attribute for translation, add an attribute in the form of &lt;code&gt;i18n-x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the name of the attribute to translate. The following example shows how to mark the &lt;code&gt;title&lt;/code&gt; attribute for translation by adding the &lt;code&gt;i18n-title&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag:</source>
          <target state="translated">要将属性标记为要翻译的属性，请添加 &lt;code&gt;i18n-x&lt;/code&gt; 形式的属性，其中 &lt;code&gt;x&lt;/code&gt; 是要翻译的属性的名称。以下示例显示如何通过在 &lt;code&gt;img&lt;/code&gt; 标签上添加 &lt;code&gt;i18n-title&lt;/code&gt; 属性来标记 &lt;code&gt;title&lt;/code&gt; 属性以进行翻译：</target>
        </trans-unit>
        <trans-unit id="d8d57de94256bf3111f375a6f4f8c16a2bbdcc50" translate="yes" xml:space="preserve">
          <source>To mark the greeting for translation, add the &lt;code&gt;i18n&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">要标记问候语以进行翻译，请将 &lt;code&gt;i18n&lt;/code&gt; 属性添加到 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 标记中。</target>
        </trans-unit>
        <trans-unit id="204d695937e174c030d578e79a70b8cfdaa9fdde" translate="yes" xml:space="preserve">
          <source>To maximize compatibility, you could ship a single bundle that includes all your compiled code, plus any polyfills that may be needed. Users with modern browsers, however, shouldn't have to pay the price of increased bundle size that comes with polyfills they don't need. Differential loading, which is supported by default in Angular CLI version 8 and higher, solves this problem.</source>
          <target state="translated">为了最大限度地提高兼容性,你可以提供一个单一的捆绑包,其中包括所有的编译代码,加上任何可能需要的polyfills。然而,使用现代浏览器的用户不应该付出增加捆绑包大小的代价,因为捆绑包中包含了他们不需要的polyfills。Angular CLI第8版及以上版本默认支持的差异化加载解决了这个问题。</target>
        </trans-unit>
        <trans-unit id="6c9f63931f1a9876ee6144f0f6f85bb6ad52a4a3" translate="yes" xml:space="preserve">
          <source>To merge the translated text into component templates, compile the app with the completed translation file.</source>
          <target state="translated">要将翻译后的文本合并到组件模板中,请使用完成的翻译文件编译应用程序。</target>
        </trans-unit>
        <trans-unit id="50177e0937d0c24e4d779ea321fe99f130aa12ab" translate="yes" xml:space="preserve">
          <source>To navigate a relative path with the &lt;code&gt;Router.navigate&lt;/code&gt; method, you must supply the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; to give the router knowledge of where you are in the current route tree.</source>
          <target state="translated">要使用 &lt;code&gt;Router.navigate&lt;/code&gt; 方法导航相对路径，必须提供 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; ,以使路由器知道您在当前路由树中的位置。</target>
        </trans-unit>
        <trans-unit id="e3d48bf82f388d44ca8269b4f3bfd203e20968b6" translate="yes" xml:space="preserve">
          <source>To navigate to the &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">要导航至 &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; ，完整的URL为 &lt;code&gt;/crisis-center&lt;/code&gt; （ &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c30458218377d115bbf5391fba4f7de471157644" translate="yes" xml:space="preserve">
          <source>To navigate to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; for a crisis with &lt;code&gt;id=2&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center/2&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt;).</source>
          <target state="translated">要导航到 &lt;code&gt;id=2&lt;/code&gt; 的危机的 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; ，完整的URL是 &lt;code&gt;/crisis-center/2&lt;/code&gt; （ &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="97e5b5a0b343f2f0aacae676cafbfb230385ea8b" translate="yes" xml:space="preserve">
          <source>To navigate to the dashboard, the router needs an appropriate route.</source>
          <target state="translated">要导航到仪表板,路由器需要一个合适的路由。</target>
        </trans-unit>
        <trans-unit id="97d195db608d7c728fef4d499c5aaf0c6b4979af" translate="yes" xml:space="preserve">
          <source>To open a hero's tax return, the preparer clicks on a hero name, which opens a component for editing that return. Each selected hero tax return opens in its own component and multiple returns can be open at the same time.</source>
          <target state="translated">要打开一个英雄的报税单,准备者点击一个英雄的名字,就会打开一个用于编辑该报税单的组件。每个选定的英雄报税表都会在自己的组件中打开,并且可以同时打开多个报税表。</target>
        </trans-unit>
        <trans-unit id="b5a0babdbd087078fc6808357b85a5f76fc7e195" translate="yes" xml:space="preserve">
          <source>To opt-in an existing application, run</source>
          <target state="translated">要选择加入一个现有的应用程序,运行</target>
        </trans-unit>
        <trans-unit id="e1e1e2d56f853cd55abdf55cf1f45f3fbc917764" translate="yes" xml:space="preserve">
          <source>To override a tree-shakable provider, configure the injector of a specific NgModule or component with another provider, using the &lt;code&gt;providers: []&lt;/code&gt; array syntax of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">要覆盖可摇树的提供者，请使用 &lt;code&gt;providers: []&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 或 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; 装饰器的[]数组语法，将特定NgModule或组件的注入器与另一个提供者一起配置。</target>
        </trans-unit>
        <trans-unit id="36a953799b95a8f6656497edaeebfe8ea9110972" translate="yes" xml:space="preserve">
          <source>To perform complex initializations shortly after construction.</source>
          <target state="translated">要在施工后不久进行复杂的初始化。</target>
        </trans-unit>
        <trans-unit id="f0bb0d88a7390f7a95031586a8beb53ff5091b52" translate="yes" xml:space="preserve">
          <source>To position the delete button at the far right of the hero entry, add some CSS to the &lt;code&gt;heroes.component.css&lt;/code&gt;. You'll find that CSS in the &lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;final review code&lt;/a&gt; below.</source>
          <target state="translated">要将删除按钮放置在英雄条目的最右边，请向 &lt;code&gt;heroes.component.css&lt;/code&gt; 添加一些CSS 。您将在下面的&lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;最终评论代码&lt;/a&gt;中找到该CSS 。</target>
        </trans-unit>
        <trans-unit id="2c961571be0bc2d29a55550db6735d63db701501" translate="yes" xml:space="preserve">
          <source>To preserve app integrity, the Angular service worker groups all files into a version together. The files grouped into a version usually include HTML, JS, and CSS files. Grouping of these files is essential for integrity because HTML, JS, and CSS files frequently refer to each other and depend on specific content. For example, an &lt;code&gt;index.html&lt;/code&gt; file might have a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that references &lt;code&gt;bundle.js&lt;/code&gt; and it might attempt to call a function &lt;code&gt;startApp()&lt;/code&gt; from within that script. Any time this version of &lt;code&gt;index.html&lt;/code&gt; is served, the corresponding &lt;code&gt;bundle.js&lt;/code&gt; must be served with it. For example, assume that the &lt;code&gt;startApp()&lt;/code&gt; function is renamed to &lt;code&gt;runApp()&lt;/code&gt; in both files. In this scenario, it is not valid to serve the old &lt;code&gt;index.html&lt;/code&gt;, which calls &lt;code&gt;startApp()&lt;/code&gt;, along with the new bundle, which defines &lt;code&gt;runApp()&lt;/code&gt;.</source>
          <target state="translated">为了保持应用程序的完整性，Angular服务工作器将所有文件分组到一个版本中。分组为一个版本的文件通常包括HTML，JS和CSS文件。这些文件的分组对于完整性至关重要，因为HTML，JS和CSS文件经常相互引用并且依赖于特定的内容。例如， &lt;code&gt;index.html&lt;/code&gt; 文件可能具有引用 &lt;code&gt;bundle.js&lt;/code&gt; 的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记，并且它可能会尝试从该脚本中调用函数 &lt;code&gt;startApp()&lt;/code&gt; 。每当提供此版本的 &lt;code&gt;index.html&lt;/code&gt; 时， &lt;code&gt;bundle.js&lt;/code&gt; 必须为其提供相应的bundle.js。例如，假设将 &lt;code&gt;startApp()&lt;/code&gt; 函数重命名为 &lt;code&gt;runApp()&lt;/code&gt; 在两个文件中。在这种情况下，服务于旧的 &lt;code&gt;index.html&lt;/code&gt; （调用 &lt;code&gt;startApp()&lt;/code&gt; )以及定义了 &lt;code&gt;runApp()&lt;/code&gt; 的新捆绑包是无效的。</target>
        </trans-unit>
        <trans-unit id="fe943f52fad6ef05058867916f3c62d1438605f6" translate="yes" xml:space="preserve">
          <source>To preserve sequences of whitespace characters, use the &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; attribute.</source>
          <target state="translated">要保留空白字符序列，请使用 &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="8f13d961bf1f2a2e0a6771cacc0e0734c478d793" translate="yes" xml:space="preserve">
          <source>To prevent this issue, write a constructor that attempts to inject the module or service from the root app injector. If the injection succeeds, the class has been loaded a second time. You can throw an error or take other remedial action.</source>
          <target state="translated">为了防止这个问题,写一个构造函数,尝试从根应用注入器注入模块或服务。如果注入成功,则该类已被第二次加载。你可以抛出一个错误或采取其他补救措施。</target>
        </trans-unit>
        <trans-unit id="82edb1afa8eeaf7f78aa665cfb01fbaf7b31f687" translate="yes" xml:space="preserve">
          <source>To prevent this, configure the component-level injector of &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; to provide the service, using the &lt;code&gt;providers&lt;/code&gt; property in the component metadata.</source>
          <target state="translated">为避免这种情况，请使用组件元数据中的 &lt;code&gt;providers&lt;/code&gt; 属性将 &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; 的组件级注入器配置为提供服务。</target>
        </trans-unit>
        <trans-unit id="764953f88d6db345381e8274359af32c10d6b814" translate="yes" xml:space="preserve">
          <source>To prevent this, the application must ensure that a user request originates from the real application, not from a different site. The server and client must cooperate to thwart this attack.</source>
          <target state="translated">为了防止这种情况的发生,应用程序必须确保用户的请求来自真正的应用程序,而不是来自不同的网站。服务器和客户端必须合作,以阻止这种攻击。</target>
        </trans-unit>
        <trans-unit id="23e6bd66df0322fbae0f2b4af0850695d73a6068" translate="yes" xml:space="preserve">
          <source>To preview Ivy, use &lt;code&gt;@angular/core@next&lt;/code&gt; version of Angular (8.1.x), rather than &lt;code&gt;@angular/core@latest&lt;/code&gt; (8.0.x), as it contains all the latest bug fixes and improvements.</source>
          <target state="translated">要预览Ivy，请使用Angular（8.1.x）的 &lt;code&gt;@angular/core@next&lt;/code&gt; 版本，而不是 &lt;code&gt;@angular/core@latest&lt;/code&gt; （8.0.x），因为它包含所有最新的错误修复和改进。</target>
        </trans-unit>
        <trans-unit id="8d1a7d82c50d476f8fd8a4601ce28f42ef661a13" translate="yes" xml:space="preserve">
          <source>To probe the behavior in the live example, change the value and optional exponent in the template.</source>
          <target state="translated">要探究实战例子中的行为,请更改模板中的数值和可选的指数。</target>
        </trans-unit>
        <trans-unit id="e498d45c2b48e2a16db2e6e00575c839c83f030b" translate="yes" xml:space="preserve">
          <source>To provide better user experience, we show an appropriate error message when the form is invalid.</source>
          <target state="translated">为了提供更好的用户体验,当表单无效时,我们会显示适当的错误信息。</target>
        </trans-unit>
        <trans-unit id="fe1b5ee91e15d081682393046ee0422bacf79816" translate="yes" xml:space="preserve">
          <source>To read about sharing services, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">要了解有关共享服务的信息，请参阅&lt;a href=&quot;providers&quot;&gt;提供者&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="16b4681d1fd2b68022b40ab92b874d4b37fbb9de" translate="yes" xml:space="preserve">
          <source>To register child controls with the form, use &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; with a &lt;code&gt;name&lt;/code&gt; attribute. You may use &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; to create sub-groups within the form.</source>
          <target state="translated">要使用该表单注册子控件，请使用带有 &lt;code&gt;name&lt;/code&gt; 属性的 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 。您可以使用 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 在表单中创建子组。</target>
        </trans-unit>
        <trans-unit id="8bd6725fea1d02e33394eb5471a409672ea30a70" translate="yes" xml:space="preserve">
          <source>To remedy this, you may need to kill the old worker using one of the above techniques (&lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;Fail-safe&lt;/a&gt; or &lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;Safety Worker&lt;/a&gt;).</source>
          <target state="translated">要解决此问题，您可能需要使用上述技术之一（&amp;ldquo; &lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;故障安全&amp;rdquo;&lt;/a&gt;或&amp;ldquo; &lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;安全工作者&amp;rdquo;&lt;/a&gt;）杀死该老工人。</target>
        </trans-unit>
        <trans-unit id="aaeefee9f550b0ec463699d0b839236aef8f3ef3" translate="yes" xml:space="preserve">
          <source>To render the new values, add &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; to the bottom of the &lt;code&gt;AppComponent&lt;/code&gt; template so the view also displays the sunflower:</source>
          <target state="translated">要呈现新值，请将 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 添加到 &lt;code&gt;AppComponent&lt;/code&gt; 模板的底部，以便视图也显示向日葵：</target>
        </trans-unit>
        <trans-unit id="2d4a7cb38a8f7318c5a2000f39faa271b3df5c87" translate="yes" xml:space="preserve">
          <source>To repeat the command any time the inputs change (watch mode), replace &lt;code&gt;bazel&lt;/code&gt; with &lt;code&gt;ibazel&lt;/code&gt; in these commands.</source>
          <target state="translated">要在输入更改时（监视模式）随时重复该命令， &lt;code&gt;ibazel&lt;/code&gt; 在这些命令 &lt;code&gt;bazel&lt;/code&gt; bazel替换为ibazel。</target>
        </trans-unit>
        <trans-unit id="752e6482dbad0b90cac7b0b18d6fb3ccea0c4a13" translate="yes" xml:space="preserve">
          <source>To report progress, use the &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; method, which takes a current value, (optional) total, and status string as arguments. The total can be any number; for example, if you know how many files you have to process, the total could be the number of files, and current should be the number processed so far. The status string is unmodified unless you pass in a new string value.</source>
          <target state="translated">若要报告进度，请使用 &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; 方法，该方法采用当前值，（可选）总计和状态字符串作为参数。总数可以是任意数量；例如，如果您知道必须处理多少个文件，则总数可以是文件数，而当前应该是到目前为止已处理的数。除非您传入新的字符串值，否则状态字符串不会被修改。</target>
        </trans-unit>
        <trans-unit id="da733e7d828e2271d74de53fcaeb21139907c7a1" translate="yes" xml:space="preserve">
          <source>To report vulnerabilities in Angular itself, email us at &lt;a href=&quot;mailto:security@angular.io&quot;&gt;security@angular.io&lt;/a&gt;.</source>
          <target state="translated">要报告Angular本身的漏洞，请发送电子邮件至&lt;a href=&quot;mailto:security@angular.io&quot;&gt;security@angular.io&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="abae6466bed4070d96bb8c402709fe5af1d1f3dd" translate="yes" xml:space="preserve">
          <source>To resolve this, we give the &lt;code&gt;HeroService&lt;/code&gt; constructor a boolean flag to control display of secret heroes.</source>
          <target state="translated">为了解决这个问题，我们给 &lt;code&gt;HeroService&lt;/code&gt; 构造函数一个布尔标志，以控制秘密英雄的显示。</target>
        </trans-unit>
        <trans-unit id="ac34d2783858abc37d4c5360d16d00324ca882e2" translate="yes" xml:space="preserve">
          <source>To resume testing after completion of asynchronous activity or asynchronous change detection, hook that promise. See &lt;a href=&quot;testing#when-stable&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">要在完成异步活动或异步更改检测之后恢复测试，请执行该承诺。见&lt;a href=&quot;testing#when-stable&quot;&gt;上文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c9f7479c96fe5dbd95ef07ceac53b3c6f29bcbc0" translate="yes" xml:space="preserve">
          <source>To review a complete list of changes, organized by version, see the &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;Angular change log&lt;/a&gt;.</source>
          <target state="translated">要查看按版本组织的更改的完整列表，请参阅&lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;Angular更改日志&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9431c2209f7aafa5c97b655421d8f332f66b82cb" translate="yes" xml:space="preserve">
          <source>To run in VS with F5</source>
          <target state="translated">在VS中用F5运行</target>
        </trans-unit>
        <trans-unit id="c7b8b861dfdc4cde711a32872c93fbcde33dd655" translate="yes" xml:space="preserve">
          <source>To run our builder with the new target's default configuration, use the following CLI command in a Linux shell.</source>
          <target state="translated">要使用新目标的默认配置运行我们的构建器,在Linux shell中使用以下CLI命令。</target>
        </trans-unit>
        <trans-unit id="0fde64751caa86a1be2593adb8f8b511a7f690bd" translate="yes" xml:space="preserve">
          <source>To run the dev server with this proxy configuration, call &lt;code&gt;ng serve&lt;/code&gt;.</source>
          <target state="translated">要使用此代理配置运行开发服务器，请调用 &lt;code&gt;ng serve&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a927d68bbfb0db6ef570d00d34818dc1e9fa2fda" translate="yes" xml:space="preserve">
          <source>To see &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; examples with different form control types, see:</source>
          <target state="translated">要查看具有不同表单控件类型的 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 示例，请参见：</target>
        </trans-unit>
        <trans-unit id="8dc5a6c3881a1c518a3093382f57be5a945c82be" translate="yes" xml:space="preserve">
          <source>To see attribute, class, and style bindings in a functioning app, see the  especially for this section.</source>
          <target state="translated">要想在运行中的应用程序中看到属性、类和样式绑定,请看本节的特别说明。</target>
        </trans-unit>
        <trans-unit id="2066c3f9e99ddeda033de3aa56599325b3da329c" translate="yes" xml:space="preserve">
          <source>To see attributes versus DOM properties in a functioning app, see the  especially for binding syntax.</source>
          <target state="translated">要查看功能应用中的属性与DOM属性,请看特别是绑定语法。</target>
        </trans-unit>
        <trans-unit id="cd33799f99a3c33eec695a0b9c438c5302870973" translate="yes" xml:space="preserve">
          <source>To see it again, or to test after working in the project, clear everything out by clicking the circle with a line through it in the upper left of the Network Tab:</source>
          <target state="translated">要想再次看到它,或者在项目中工作后进行测试,请点击网络选项卡左上角有一条线穿过的圆圈,将所有内容清除。</target>
        </trans-unit>
        <trans-unit id="ee06c99b240c3cdf0c41541163f7f2fc33c71e72" translate="yes" xml:space="preserve">
          <source>To see the &lt;code&gt;disabled&lt;/code&gt; button example in a functioning app, see the  especially for binding syntax. This example shows you how to toggle the disabled property from the component.</source>
          <target state="translated">要在功能正常的应用程序中查看 &lt;code&gt;disabled&lt;/code&gt; 按钮的示例，请参阅特别说明绑定语法。本示例说明如何从组件切换禁用属性。</target>
        </trans-unit>
        <trans-unit id="3c298523d5d662629912091f2a811ab71db25f4f" translate="yes" xml:space="preserve">
          <source>To see the difference between using &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;, add another component to the example and call it &lt;code&gt;InspectorComponent&lt;/code&gt;. &lt;code&gt;InspectorComponent&lt;/code&gt; will be a child of the &lt;code&gt;ChildComponent&lt;/code&gt;. In &lt;code&gt;inspector.component.ts&lt;/code&gt;, inject the &lt;code&gt;FlowerService&lt;/code&gt; and &lt;code&gt;AnimalService&lt;/code&gt; in the constructor:</source>
          <target state="translated">要查看使用 &lt;code&gt;providers&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 的区别，请在示例中添加另一个组件，并将其命名为 &lt;code&gt;InspectorComponent&lt;/code&gt; 。 &lt;code&gt;InspectorComponent&lt;/code&gt; 将是 &lt;code&gt;ChildComponent&lt;/code&gt; 的子级。在 &lt;code&gt;inspector.component.ts&lt;/code&gt; 中，将 &lt;code&gt;FlowerService&lt;/code&gt; 和 &lt;code&gt;AnimalService&lt;/code&gt; 注入构造函数中：</target>
        </trans-unit>
        <trans-unit id="7426a6c423585d610bffc9572304cb82a2152a88" translate="yes" xml:space="preserve">
          <source>To see the error, open the browser development tools and look in the console for a message like</source>
          <target state="translated">要查看错误,请打开浏览器开发工具,并在控制台中查找类似以下的信息</target>
        </trans-unit>
        <trans-unit id="f73daa4c6554c2966552e22cb0bf684bb0109fbc" translate="yes" xml:space="preserve">
          <source>To see the new &quot;Buy&quot; button, refresh the application and click on a product's name to display its details.</source>
          <target state="translated">要看到新的 &quot;购买 &quot;按钮,请刷新应用程序并点击产品名称以显示其详细信息。</target>
        </trans-unit>
        <trans-unit id="5f23726a83ac2bd2efd5087ef3b709a56d3f0856" translate="yes" xml:space="preserve">
          <source>To see the new cart component, click the &quot;Checkout&quot; button. You can see the &quot;cart works!&quot; default text, and the URL has the pattern &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt;, where &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; may be different for your StackBlitz project.</source>
          <target state="translated">要查看新的购物车组件，请单击&amp;ldquo;结帐&amp;rdquo;按钮。您可以看到&amp;ldquo;购物车！&amp;rdquo; 默认的文本，以及URL有图案 &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt; ，其中 &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; 可能是您的StackBlitz项目不同。</target>
        </trans-unit>
        <trans-unit id="c61ac58ea53a8acce49524c72714aac95d91562d" translate="yes" xml:space="preserve">
          <source>To see the progress bar in a working example app, refer to the live example.</source>
          <target state="translated">要查看工作示例应用程序中的进度条,请参考现场示例。</target>
        </trans-unit>
        <trans-unit id="51762df269fa74951660bcc92b3a1d8f604aa3bc" translate="yes" xml:space="preserve">
          <source>To see this HTML in the &lt;code&gt;AppComponent&lt;/code&gt;, you first have to export the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; in the &lt;code&gt;CustomerDashboardModule&lt;/code&gt;. In &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;, just beneath the &lt;code&gt;declarations&lt;/code&gt; array, add an &lt;code&gt;exports&lt;/code&gt; array containing &lt;code&gt;CustomerDashboardComponent&lt;/code&gt;:</source>
          <target state="translated">要在 &lt;code&gt;AppComponent&lt;/code&gt; 中查看此HTML ，首先必须在 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 中导出 &lt;code&gt;CustomerDashboardModule&lt;/code&gt; 。在 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; 中，在 &lt;code&gt;declarations&lt;/code&gt; 数组下面，添加一个包含 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 的 &lt;code&gt;exports&lt;/code&gt; 数组：</target>
        </trans-unit>
        <trans-unit id="a7f192efea8de2bd06b45b2f3bf2d52e4f1a15ca" translate="yes" xml:space="preserve">
          <source>To see this in action, make a small change to &lt;code&gt;app.component.ts&lt;/code&gt; and save. The tests run again, the browser refreshes, and the new test results appear.</source>
          <target state="translated">要实际执行此操作，请对 &lt;code&gt;app.component.ts&lt;/code&gt; 进行少量更改并保存。测试再次运行，浏览器刷新，并显示新的测试结果。</target>
        </trans-unit>
        <trans-unit id="259f775be5923c9da2e22cf62bebce4455141afc" translate="yes" xml:space="preserve">
          <source>To see this in code, assume that the following value for &lt;code&gt;emoji&lt;/code&gt; is what the parent component were using, as in this service:</source>
          <target state="translated">要在代码中看到这一点，请假定 &lt;code&gt;emoji&lt;/code&gt; 的以下值是父组件正在使用的值，如本服务所示：</target>
        </trans-unit>
        <trans-unit id="a0b5f297034732e98b08f028549d29a0bc5b1e6b" translate="yes" xml:space="preserve">
          <source>To see which browsers are supported with the above configuration, see which settings meet to your browser support requirements, see the &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;Browserslist compatibility page&lt;/a&gt;.</source>
          <target state="translated">要查看以上配置支持哪些浏览器，请查看哪些设置符合您的浏览器支持要求，请参阅&lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;Browserslist兼容性页面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2aecb05bd9c819562cf2d14d979e8185016e3fb1" translate="yes" xml:space="preserve">
          <source>To see your app in the browser so far, enter the following command in the terminal window:</source>
          <target state="translated">要想在浏览器中看到你的应用程序到目前为止,在终端窗口中输入以下命令。</target>
        </trans-unit>
        <trans-unit id="885269644ec508e0ea2156adee77813993bb242f" translate="yes" xml:space="preserve">
          <source>To serve the directory containing your web files with &lt;code&gt;http-server&lt;/code&gt;, run the following command:</source>
          <target state="translated">要使用 &lt;code&gt;http-server&lt;/code&gt; 为包含Web文件的目录提供服务，请运行以下命令：</target>
        </trans-unit>
        <trans-unit id="0c073e0977df21697005c90ce800e73a2b92cb98" translate="yes" xml:space="preserve">
          <source>To set the components encapsulation mode, use the &lt;code&gt;encapsulation&lt;/code&gt; property in the component metadata:</source>
          <target state="translated">要设置组件封装模式，请使用组件元数据中的 &lt;code&gt;encapsulation&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="3758c4ecb4f9914c32c58041e427ee3538c11cd2" translate="yes" xml:space="preserve">
          <source>To set up a monorepo workspace, you should skip the creating the root application. See &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;Setting up for a multi-project workspace&lt;/a&gt; below.</source>
          <target state="translated">要设置monorepo工作区，应跳过创建根应用程序的过程。请参阅下面的&lt;a href=&quot;file-structure#multiple-projects&quot;&gt;为多项目工作区进行设置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d47642c5fa808e4e1650b0efd2f81da7bfc8bfcf" translate="yes" xml:space="preserve">
          <source>To set up the Angular service worker in your project, use the CLI &lt;code&gt;add&lt;/code&gt; command.</source>
          <target state="translated">要在项目中设置Angular Service Worker，请使用CLI &lt;code&gt;add&lt;/code&gt; 命令。</target>
        </trans-unit>
        <trans-unit id="7d4bc7469b3a5e6cf5c595d20bd4518bf745d39d" translate="yes" xml:space="preserve">
          <source>To set up the Angular service worker in your project, use the CLI command &lt;code&gt;ng add @angular/pwa&lt;/code&gt;. It takes care of configuring your app to use service workers by adding the &lt;code&gt;service-worker&lt;/code&gt; package along with setting up the necessary support files.</source>
          <target state="translated">要在您的项目中设置Angular服务工作者，请使用CLI命令 &lt;code&gt;ng add @angular/pwa&lt;/code&gt; 。通过添加 &lt;code&gt;service-worker&lt;/code&gt; 软件包以及设置必要的支持文件，它可以将您的应用配置为使用服务工作者。</target>
        </trans-unit>
        <trans-unit id="8dc80e025131d2a69acf3fb7e053f667fec10a2e" translate="yes" xml:space="preserve">
          <source>To set up the Getting Started files with an &lt;strong&gt;ASP.NET 4.x project&lt;/strong&gt; in Visual Studio 2015, follow these steps:</source>
          <target state="translated">要在Visual Studio 2015中使用&lt;strong&gt;ASP.NET 4.x项目&lt;/strong&gt;设置入门文件，请按照下列步骤操作：</target>
        </trans-unit>
        <trans-unit id="de142fa8fc921e821213670b35614aa8b3250c8c" translate="yes" xml:space="preserve">
          <source>To set up the component after Angular sets the input properties.</source>
          <target state="translated">要在Angular设置输入属性后,对组件进行设置。</target>
        </trans-unit>
        <trans-unit id="e1f243210a5ae29b5fc9889478313e44836e9435" translate="yes" xml:space="preserve">
          <source>To set up your development environment, follow the instructions in &lt;a href=&quot;../guide/setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">要设置您的开发环境，请遵循&amp;ldquo; &lt;a href=&quot;../guide/setup-local&quot;&gt;本地环境设置&amp;rdquo;中&lt;/a&gt;的说明。</target>
        </trans-unit>
        <trans-unit id="e19731bed4fa9ad865f132552125887ef1add447" translate="yes" xml:space="preserve">
          <source>To simplify the writing process for contributing authors. This guide helps you make decisions about tone, voice, and style. It also helps you find the right markup quickly.</source>
          <target state="translated">为了简化投稿作者的写作过程。本指南可以帮助你做出有关语气、声音和风格的决定。它还能帮助你快速找到合适的标记。</target>
        </trans-unit>
        <trans-unit id="367649fb6abb3b384169647dba62b78e8155b4e1" translate="yes" xml:space="preserve">
          <source>To simulate a network issue, disable network interaction for your application. In Chrome:</source>
          <target state="translated">要模拟网络问题,请为您的应用程序禁用网络交互。在Chrome浏览器中。</target>
        </trans-unit>
        <trans-unit id="f88ded5fc1c640f4a2bd9755a49fe8b90817554c" translate="yes" xml:space="preserve">
          <source>To simulate user input, you can find the input element and set its &lt;code&gt;value&lt;/code&gt; property.</source>
          <target state="translated">为了模拟用户输入，您可以找到输入元素并设置其 &lt;code&gt;value&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="740da28ed7f431cf8963e67cef151e88bd5e2bbf" translate="yes" xml:space="preserve">
          <source>To skip the download link, add the &lt;code&gt;noDownload&lt;/code&gt; attribute.</source>
          <target state="translated">要跳过下载链接，请添加 &lt;code&gt;noDownload&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="966fbbefbe372b65e80303ab34559f1ffc260f0b" translate="yes" xml:space="preserve">
          <source>To skip the live Stackblitz link and only link to the download, add the &lt;code&gt;downloadOnly&lt;/code&gt; attribute.</source>
          <target state="translated">要跳过实时Stackblitz链接并仅链接到下载，请添加 &lt;code&gt;downloadOnly&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="ab87060eaf2297eb5463559b81f0a81cc8881cda" translate="yes" xml:space="preserve">
          <source>To specify a value transformation in an HTML template, use the &lt;a href=&quot;template-syntax#pipe&quot;&gt;pipe operator (|)&lt;/a&gt;.</source>
          <target state="translated">要在HTML模板中指定值转换，请使用&lt;a href=&quot;template-syntax#pipe&quot;&gt;管道运算符（|）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8c26bd8dbf7d5d26bb6a0711698f315370497669" translate="yes" xml:space="preserve">
          <source>To specify offset styles to be applied at a later time, define steps with &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;, or use &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; calls with a delay value. For example:</source>
          <target state="translated">要指定稍后要应用的偏移样式，请使用 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 定义步骤，或使用具有延迟值的 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 调用。例如：</target>
        </trans-unit>
        <trans-unit id="098c0b9849214a70fc7726b8c68b61855e17df7b" translate="yes" xml:space="preserve">
          <source>To specify the response object type, first define an interface with the required properties. (Use an interface rather than a class; a response cannot be automatically converted to an instance of a class.)</source>
          <target state="translated">要指定响应对象类型,首先要定义一个具有所需属性的接口(使用接口而不是类;响应不能自动转换为类的实例)。使用接口而不是类;响应不能自动转换为类的实例)。</target>
        </trans-unit>
        <trans-unit id="dde8a2ef8d669c63a62cff50f1d6396d1cb88adf" translate="yes" xml:space="preserve">
          <source>To start a collection, you need to create the schematic files. The following steps show you how to add initial support without modifying any project files.</source>
          <target state="translated">要启动一个集合,您需要创建原理图文件。下面的步骤告诉您如何在不修改任何项目文件的情况下添加初始支持。</target>
        </trans-unit>
        <trans-unit id="675df4470cdabe4f5cbe7c6f1ee4baa2a9761571" translate="yes" xml:space="preserve">
          <source>To start a new project with Ivy enabled, use the &lt;code&gt;--enable-ivy&lt;/code&gt; flag with the &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">要启动启用了Ivy的新项目，请在&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;命令中使用 &lt;code&gt;--enable-ivy&lt;/code&gt; 标志：</target>
        </trans-unit>
        <trans-unit id="cc42865ce59ef8db7b918c51096cb7b9d9d767ba" translate="yes" xml:space="preserve">
          <source>To start rendering your app with Universal on your local system, use the following command.</source>
          <target state="translated">要在本地系统上使用 Universal 开始渲染应用程序,请使用以下命令。</target>
        </trans-unit>
        <trans-unit id="e1c7b5759322bd72b7a70ff587712b48f2342170" translate="yes" xml:space="preserve">
          <source>To stop using the Ivy compiler, set &lt;code&gt;enableIvy&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;tsconfig.app.json&lt;/code&gt;, or remove it completely. Also remove &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; from your default build options if you didn't have it there before.</source>
          <target state="translated">要停止使用常春藤编译器，设置 &lt;code&gt;enableIvy&lt;/code&gt; 以 &lt;code&gt;false&lt;/code&gt; 的 &lt;code&gt;tsconfig.app.json&lt;/code&gt; ，或者完全删除。如果以前没有，请从默认构建选项中删除 &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3c09441693602ca793b2b01b4f9af8a0248fabc" translate="yes" xml:space="preserve">
          <source>To streamline the syntax, the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive hides the details behind its own &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input and &lt;code&gt;ngModelChange&lt;/code&gt; output properties:</source>
          <target state="translated">为了简化语法， &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令将详细信息隐藏在其自己的 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 输入和 &lt;code&gt;ngModelChange&lt;/code&gt; 输出属性的后面：</target>
        </trans-unit>
        <trans-unit id="39b4d5704426ff8a7639bccde11ece39d8b3aeb6" translate="yes" xml:space="preserve">
          <source>To subscribe, call &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt;, which asks the user for permission. The call returns a &lt;code&gt;Promise&lt;/code&gt; with a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt;&lt;code&gt;PushSubscription&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">要进行订阅，请调用 &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt; ，以询问用户权限。该调用返回带有新的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt; &lt;code&gt;PushSubscription&lt;/code&gt; &lt;/a&gt;实例的 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="091932076ef13bad443c5e0beaa6885505ec5895" translate="yes" xml:space="preserve">
          <source>To summarize, Angular found the &lt;code&gt;appHighlight&lt;/code&gt; attribute on the &lt;strong&gt;host&lt;/strong&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. It created an instance of the &lt;code&gt;HighlightDirective&lt;/code&gt; class and injected a reference to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element into the directive's constructor which sets the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element's background style to yellow.</source>
          <target state="translated">总而言之，Angular 在&lt;strong&gt;主机&lt;/strong&gt; &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素上找到了 &lt;code&gt;appHighlight&lt;/code&gt; 属性。它创建了 &lt;code&gt;HighlightDirective&lt;/code&gt; 类的实例，并将对 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素的引用注入到指令的构造函数中，该构造函数将 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素的背景样式设置为黄色。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe4b6b798619064feab05be7c141408b9ecfad03" translate="yes" xml:space="preserve">
          <source>To summarize, the key differentiating factors of &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; are:</source>
          <target state="translated">总而言之， &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 的主要区别因素是：</target>
        </trans-unit>
        <trans-unit id="b52ca2d96bdaaa3cfb5379f6156241ff261b361a" translate="yes" xml:space="preserve">
          <source>To support these behaviors, the Angular service worker loads a &lt;em&gt;manifest&lt;/em&gt; file from the server. The manifest describes the resources to cache and includes hashes of every file's contents. When an update to the application is deployed, the contents of the manifest change, informing the service worker that a new version of the application should be downloaded and cached. This manifest is generated from a CLI-generated configuration file called &lt;code&gt;ngsw-config.json&lt;/code&gt;.</source>
          <target state="translated">为了支持这些行为，Angular服务工作者从服务器加载&lt;em&gt;清单&lt;/em&gt;文件。清单描述了要缓存的资源，并包含每个文件内容的哈希值。部署对应用程序的更新后，清单的内容将更改，从而通知服务工作者应下载并缓存应用程序的新版本。此清单由CLI生成的名为 &lt;code&gt;ngsw-config.json&lt;/code&gt; 的配置文件生成。</target>
        </trans-unit>
        <trans-unit id="c4ca653d202193362f15dba2ff3cfc4b0025739a" translate="yes" xml:space="preserve">
          <source>To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.</source>
          <target state="translated">为了系统性地阻断XSS漏洞,Angular默认将所有的值都视为不可信任的。当一个值从模板插入到DOM中时,通过属性、属性、样式、类绑定或插值,Angular会对不信任的值进行净化和逃逸。</target>
        </trans-unit>
        <trans-unit id="5c2d8661b5b005891a1e25d985a1673afb599e07" translate="yes" xml:space="preserve">
          <source>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called &lt;code&gt;XSRF-TOKEN&lt;/code&gt; on either the page load or the first GET request. On subsequent requests the server can verify that the cookie matches the &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP header, and therefore be sure that only code running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens. Set the token to a digest of your site's authentication cookie with a salt for added security.</source>
          <target state="translated">要利用此优势，您的服务器需要在页面加载或第一个GET请求上的名为 &lt;code&gt;XSRF-TOKEN&lt;/code&gt; 的JavaScript可读会话cookie中设置令牌。在后续请求中，服务器可以验证cookie是否与 &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP标头匹配，因此，请确保只有在您的域上运行的代码才可以发送请求。令牌对于每个用户必须是唯一的，并且必须可由服务器验证；这样可以防止客户端伪造自己的令牌。将令牌设置为站点的身份验证Cookie的摘要，并添加盐以增强安全性。</target>
        </trans-unit>
        <trans-unit id="a2c3396ff07cb76eb004b09abd2396aa4cfc57b5" translate="yes" xml:space="preserve">
          <source>To take this example a little further, we can create an observable that publishes events. In this example, the subscriber function is defined inline.</source>
          <target state="translated">为了进一步推进这个例子,我们可以创建一个发布事件的观测器。在这个例子中,订阅者函数是内联定义的。</target>
        </trans-unit>
        <trans-unit id="33b81c4efe4680114d1f1e1f01d20fc61854d427" translate="yes" xml:space="preserve">
          <source>To tell Angular that this is a pipe, you apply the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator, which you import from the core Angular library.</source>
          <target state="translated">要告诉Angular这是一个管道，可以应用 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 装饰器，该装饰器是从Angular核心库中导入的。</target>
        </trans-unit>
        <trans-unit id="d69f6b79976daa71b140336b6e0fc275fb2a4a15" translate="yes" xml:space="preserve">
          <source>To tell that story in code, you'll often need to create partial files or intermediate versions of the final source code file with fragments of code that don't appear in the final app.</source>
          <target state="translated">为了在代码中讲述这个故事,你经常需要创建部分文件或最终源代码文件的中间版本,其中的代码片段不会出现在最终的应用程序中。</target>
        </trans-unit>
        <trans-unit id="41ed9ac99a1093b2313ac001a60efb09be984be6" translate="yes" xml:space="preserve">
          <source>To test a service, you set the &lt;code&gt;providers&lt;/code&gt; metadata property with an array of the services that you'll test or mock.</source>
          <target state="translated">要测试服务，请使用要测试或模拟的服务数组设置 &lt;code&gt;providers&lt;/code&gt; 元数据属性。</target>
        </trans-unit>
        <trans-unit id="0689818deab6829bbe840e4c6eba2a40a2aa0140" translate="yes" xml:space="preserve">
          <source>To test this feature, add a button with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt; template and set the link to &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt;.</source>
          <target state="translated">要测试此功能，请将带有 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 的按钮添加到 &lt;code&gt;HeroListComponent&lt;/code&gt; 模板，并将链接设置为 &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ecc66d276b3225d15e06e1f1cf36defdf74d825a" translate="yes" xml:space="preserve">
          <source>To translate a &lt;code&gt;plural&lt;/code&gt;, translate its ICU format match values:</source>
          <target state="translated">要翻译 &lt;code&gt;plural&lt;/code&gt; ，请转换其ICU格式匹配值：</target>
        </trans-unit>
        <trans-unit id="885e91781ad354087c34588828548ccdfecdb432" translate="yes" xml:space="preserve">
          <source>To translate a text message accurately, the translator may need additional information or context.</source>
          <target state="translated">为了准确地翻译文本信息,译者可能需要额外的信息或背景。</target>
        </trans-unit>
        <trans-unit id="cef6e619ff20a5d2471097479db5a249a2c82f81" translate="yes" xml:space="preserve">
          <source>To turn off this feature, run the following command:</source>
          <target state="translated">要关闭此功能,请运行以下命令。</target>
        </trans-unit>
        <trans-unit id="ed33505f49ae41506ab117a8b63c6d0f85e67b26" translate="yes" xml:space="preserve">
          <source>To understand how the &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; influence service visibility differently, the following sections build a  step-by-step and compare the use of &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; in code and a logical tree.</source>
          <target state="translated">为了了解 &lt;code&gt;providers&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 如何不同地影响服务可见性，以下各节将逐步构建并比较代码和逻辑树中 &lt;code&gt;providers&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 的使用。</target>
        </trans-unit>
        <trans-unit id="3eebe2ea66d8dfa62e18d044bc45eab39aaad7bf" translate="yes" xml:space="preserve">
          <source>To update an existing project to use Ivy, set the &lt;code&gt;enableIvy&lt;/code&gt; option in the &lt;code&gt;angularCompilerOptions&lt;/code&gt; in your project's &lt;code&gt;tsconfig.app.json&lt;/code&gt;.</source>
          <target state="translated">要更新现有项目以使用Ivy， &lt;code&gt;angularCompilerOptions&lt;/code&gt; 在项目的 &lt;code&gt;tsconfig.app.json&lt;/code&gt; 中的angularCompilerOptions中设置 &lt;code&gt;enableIvy&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="b4726caf12aeeed22903d708d6fd9dcb3ab84cef" translate="yes" xml:space="preserve">
          <source>To update from one major version to another, use the format &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">要从一个主要版本更新到另一个主要版本，请使用 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b123945947d8bf63fcbe7c6d93a368853a6bef1" translate="yes" xml:space="preserve">
          <source>To update the &lt;code&gt;name&lt;/code&gt; property, the changed text is retrieved by following the path &lt;code&gt;$event.target.value&lt;/code&gt;.</source>
          <target state="translated">要更新 &lt;code&gt;name&lt;/code&gt; 属性，请遵循路径 &lt;code&gt;$event.target.value&lt;/code&gt; 检索更改的文本。</target>
        </trans-unit>
        <trans-unit id="e3daec1d373f17dce64b4434537727da04314427" translate="yes" xml:space="preserve">
          <source>To update the hero form to be a reactive form, you can use some of the same built-in validators&amp;mdash;this time, in function form. See below:</source>
          <target state="translated">要将英雄表格更新为反应形式，您可以使用某些相同的内置验证器，这一次是在函数形式中。见下文：</target>
        </trans-unit>
        <trans-unit id="ec580f157cda9cf0f0589f7bbc29f74d7bf8bf09" translate="yes" xml:space="preserve">
          <source>To update to the next beta or pre-release version, use the &lt;code&gt;--next=true&lt;/code&gt; option.</source>
          <target state="translated">要更新到下一个Beta或预发行版本，请使用 &lt;code&gt;--next=true&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="bbc501407156722afda3e86f40157fb7f056ade2" translate="yes" xml:space="preserve">
          <source>To update your apps:</source>
          <target state="translated">要更新您的应用程序。</target>
        </trans-unit>
        <trans-unit id="8a839cde0f94f54c1db2fbd03e39cc0d94409768" translate="yes" xml:space="preserve">
          <source>To update your code before v7, you'll want to decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch over to template-driven directives.</source>
          <target state="translated">要在v7之前更新你的代码,你要决定是坚持使用反应式表单指令(并使用反应式表单模式获取/设置值)还是切换到模板驱动指令。</target>
        </trans-unit>
        <trans-unit id="f18488d2ffa521dc9c72e40ed167cd48cf4b0efb" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">要使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 功能，必须在测试安装文件中导入 &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; 。如果您使用Angular CLI创建了项目，则已经在 &lt;code&gt;src/test.ts&lt;/code&gt; 中导入了 &lt;code&gt;zone-testing&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2482c9fc60deb6dca0d28b779cb8b73a4467b41" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">要使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 功能，必须在测试安装文件中导入 &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; 。如果您使用Angular CLI创建了项目，则已经在 &lt;code&gt;src/test.ts&lt;/code&gt; 中导入了 &lt;code&gt;zone-testing&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c5cd4c387b425279202e14518a4f13f588d38ae" translate="yes" xml:space="preserve">
          <source>To use AOT with a hybrid app, you have to first set it up like any other Angular application, as shown in &lt;a href=&quot;aot-compiler&quot;&gt;the Ahead-of-time Compilation chapter&lt;/a&gt;.</source>
          <target state="translated">要将AOT与混合应用程序一起使用，您必须首先像设置其他Angular应用程序一样对其进行设置，如&lt;a href=&quot;aot-compiler&quot;&gt;&amp;ldquo;提前编译&amp;rdquo;一章所示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc05bdf242df5c5e52a5f7713254718034ee591f" translate="yes" xml:space="preserve">
          <source>To use Bazel in a new application, first install &lt;code&gt;@angular/bazel&lt;/code&gt; globally</source>
          <target state="translated">要在新应用程序中使用Bazel， &lt;code&gt;@angular/bazel&lt;/code&gt; 全局安装@ angular / bazel</target>
        </trans-unit>
        <trans-unit id="c3f4f3cb1895e041269196b22d5a205a95c00cb5" translate="yes" xml:space="preserve">
          <source>To use CSS grid with IE10/11, you must explicitly enable it using the &lt;code&gt;autoplace&lt;/code&gt; option. To do this, add the following to the top of the global styles file (or within a specific css selector scope):</source>
          <target state="translated">要将CSS网格与IE10 / 11一起使用，必须使用 &lt;code&gt;autoplace&lt;/code&gt; 选项明确启用它。为此，请将以下内容添加到全局样式文件的顶部（或在特定的css选择器范围内）：</target>
        </trans-unit>
        <trans-unit id="adbc1c0149aa2c996df7fd94085915ea70c1dfcf" translate="yes" xml:space="preserve">
          <source>To use a select in a template-driven form, simply add an &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt; attribute to the main &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">要以模板驱动的形式使用select，只需将 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;name&lt;/code&gt; 属性添加到主 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 标记中。</target>
        </trans-unit>
        <trans-unit id="d9a033cbec8595c7b94a782a7c20d201108cbb14" translate="yes" xml:space="preserve">
          <source>To use reactive forms, import &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; package and add it to your NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">要使用反应形式，请从 &lt;code&gt;@angular/forms&lt;/code&gt; 包中导入 &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 并将其添加到NgModule的 &lt;code&gt;imports&lt;/code&gt; 数组中。</target>
        </trans-unit>
        <trans-unit id="99b05aeea7ad8c9ff74a29d0c307334f8ae5a9cc" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt;, import the symbol from &lt;code&gt;@angular/common/upgrade&lt;/code&gt; and add it to your &lt;code&gt;AppModule&lt;/code&gt; imports using the static &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">要使用 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt; ，请使用静态 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; 方法从 &lt;code&gt;@angular/common/upgrade&lt;/code&gt; 导入符号，并将其添加到 &lt;code&gt;AppModule&lt;/code&gt; 导入中。</target>
        </trans-unit>
        <trans-unit id="df43dc8c1dde95936358a838f639abe20aaeb53b" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component class, first import &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and then decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">要在子组件类中使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰器，请首先导入 &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; ，然后使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 装饰属性：</target>
        </trans-unit>
        <trans-unit id="d4922d09d3f66928b67e63af20c190e526abbeb7" translate="yes" xml:space="preserve">
          <source>To use the &lt;code&gt;ng deploy&lt;/code&gt; command, use &lt;code&gt;ng add&lt;/code&gt; to add a package that implements deployment capabilities to your favorite platform. Adding the package automatically updates your workspace configuration, adding a deployment &lt;a href=&quot;../guide/cli-builder&quot;&gt;CLI builder&lt;/a&gt;. For example:</source>
          <target state="translated">要使用 &lt;code&gt;ng deploy&lt;/code&gt; 命令，请使用 &lt;code&gt;ng add&lt;/code&gt; 将实现部署功能的软件包添加到您喜欢的平台。添加软件包会自动更新您的工作区配置，并添加一个部署&lt;a href=&quot;../guide/cli-builder&quot;&gt;CLI构建器&lt;/a&gt;。例如：</target>
        </trans-unit>
        <trans-unit id="4e5078f362fa8e75b589c64aa05c23c8c2894e2d" translate="yes" xml:space="preserve">
          <source>To use the Language Service for in-line templates, you must first add an extension to allow TypeScript, then install the Angular Language Service plug-in. Starting with TypeScript 2.3, TypeScript has a plug-in model that the language service can use.</source>
          <target state="translated">要想在行内模板中使用语言服务,你必须先添加一个扩展来允许TypeScript,然后安装Angular语言服务插件。从TypeScript 2.3开始,TypeScript有了语言服务可以使用的插件模型。</target>
        </trans-unit>
        <trans-unit id="d456e2ebd07067eb97a027965223c7abb3f733d7" translate="yes" xml:space="preserve">
          <source>To use the environment configurations you have defined, your components must import the original environments file:</source>
          <target state="translated">要使用您定义的环境配置,您的组件必须导入原始环境文件。</target>
        </trans-unit>
        <trans-unit id="f5d7e74575342444e96fc87e2007c4383a5ce53c" translate="yes" xml:space="preserve">
          <source>To use the new &lt;code&gt;HighlightDirective&lt;/code&gt;, add a paragraph (&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;) element to the template of the root &lt;code&gt;AppComponent&lt;/code&gt; and apply the directive as an attribute.</source>
          <target state="translated">要使用新的 &lt;code&gt;HighlightDirective&lt;/code&gt; ，请在根 &lt;code&gt;AppComponent&lt;/code&gt; 的模板中添加一个段落（ &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ）元素，并将该指令用作属性。</target>
        </trans-unit>
        <trans-unit id="6ef78e3fbfe7e791fb6b54a58fe45a757bce01ad" translate="yes" xml:space="preserve">
          <source>To use the same instance of &lt;code&gt;HttpInterceptors&lt;/code&gt; for the entire app, import the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in your &lt;code&gt;AppModule&lt;/code&gt;, and add the interceptors to the root application injector . If you import &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; multiple times across different modules (for example, in lazy loading modules), each import creates a new copy of the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, which overwrites the interceptors provided in the root module.</source>
          <target state="translated">要为整个应用程序使用相同的 &lt;code&gt;HttpInterceptors&lt;/code&gt; 实例，请仅在您的 &lt;code&gt;AppModule&lt;/code&gt; 中导入 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; ，然后将拦截器添加到根应用程序注入器中。如果跨不同模块多次导入 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; （例如，在延迟加载模块中），则每次导入都会创建 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 的新副本，该副本将覆盖根模块中提供的拦截器。</target>
        </trans-unit>
        <trans-unit id="8a1652d0cb403164496c7c6e9915242c358c810d" translate="yes" xml:space="preserve">
          <source>To use this directive you must provide a container element that sets the &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; attribute to a switch expression. Inner elements with a &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; will display based on their expression:</source>
          <target state="translated">要使用此伪指令，必须提供一个容器元素，该元素将 &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; 属性设置为switch表达式。具有 &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; 内部元素将根据其表达式显示：</target>
        </trans-unit>
        <trans-unit id="bec1df521164ef700b40c0abfb52f86f1e693028" translate="yes" xml:space="preserve">
          <source>To use this service, add it to your component or directive as a dependency. The service is instantiated along with your component.</source>
          <target state="translated">要使用这个服务,请将它作为依赖关系添加到你的组件或指令中。该服务与你的组件一起被实例化。</target>
        </trans-unit>
        <trans-unit id="ec400ea96c2fce5839cbfdc718a80a3377af0601" translate="yes" xml:space="preserve">
          <source>To use your own library in an app:</source>
          <target state="translated">要在应用程序中使用自己的库。</target>
        </trans-unit>
        <trans-unit id="3c973408d2448836192162ca55537f91af2a75f7" translate="yes" xml:space="preserve">
          <source>To validate the links, you don't need the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate and you don't need the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; to mark where the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; inserts &lt;em&gt;routed components&lt;/em&gt;.</source>
          <target state="translated">要验证链接，您不需要 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 进行导航，也不需要 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 来标记 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 在其中插入&lt;em&gt;路由组件的位置&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0df4d562aaab9bff2662b3ac4f6d1a92f4728ee1" translate="yes" xml:space="preserve">
          <source>To validate the potential alter ego, we need to consult a central database of all currently enlisted heroes. The process is asynchronous, so we need a special validator for that.</source>
          <target state="translated">为了验证潜在的另一个自我,我们需要查阅所有当前入伍英雄的中央数据库。这个过程是异步的,所以我们需要一个特殊的验证器来验证。</target>
        </trans-unit>
        <trans-unit id="32c127e56d91889f1c7cad6d0e80c60907253fef" translate="yes" xml:space="preserve">
          <source>To verify the build output, open &lt;code&gt;dist/my-app/index.html&lt;/code&gt;. Look for default text &lt;code&gt;app-shell works!&lt;/code&gt; to show that the app shell route was rendered as part of the output.</source>
          <target state="translated">要验证构建输出，请打开 &lt;code&gt;dist/my-app/index.html&lt;/code&gt; 。查找默认的文本 &lt;code&gt;app-shell works!&lt;/code&gt; 以显示应用程序外壳程序路线已作为输出的一部分呈现。</target>
        </trans-unit>
        <trans-unit id="64189167d7c6f7924c3403091e78e99cd1953102" translate="yes" xml:space="preserve">
          <source>To watch for changes on an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, use &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, one of Angular's &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;lifecycle hooks&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; is specifically designed to work with properties that have the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator. See the &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;&lt;code&gt;OnChanges&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; guide for more details and examples.</source>
          <target state="translated">要监视 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 属性的更改，请使用Angular的&lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;生命周期挂钩&lt;/a&gt;之一 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 是专门设计用于具有 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）装饰器的属性的。有关更多详细信息和示例，请参见&lt;a href=&quot;lifecycle-hooks&quot;&gt;生命周期挂钩&lt;/a&gt;指南的&lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt; &lt;code&gt;OnChanges&lt;/code&gt; &lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="05a58fa2ca80d1b185bffa061088c51d5420c848" translate="yes" xml:space="preserve">
          <source>To write these kinds of test, you'll use additional features of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; as well as other testing helpers.</source>
          <target state="translated">要编写这类测试，您将使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 的其他功能以及其他测试助手。</target>
        </trans-unit>
        <trans-unit id="1cc935e80e328e474a31d427ae2531c53add98a9" translate="yes" xml:space="preserve">
          <source>Together, a component and template define an Angular view.</source>
          <target state="translated">组件和模板共同定义了一个Angular视图。</target>
        </trans-unit>
        <trans-unit id="87022fcea4706d527b367133425bf8fe125ff9af" translate="yes" xml:space="preserve">
          <source>Toggle two form regions (extra credit)</source>
          <target state="translated">切换两个表格区域(加分)</target>
        </trans-unit>
        <trans-unit id="5ba5c297a3177e98b75ef09b3c0904e236e367fe" translate="yes" xml:space="preserve">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">令牌可用于提供选项 &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 以外 &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31eb6ab3d3ba3ac918313692bbab97fbc9516ee1" translate="yes" xml:space="preserve">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">令牌可用于提供选项 &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 以外 &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a829a6b9e3e265061c5310994b566e52ec5ed4d0" translate="yes" xml:space="preserve">
          <source>Token to provide CompilerOptions in the platform injector.</source>
          <target state="translated">在平台注入器中提供CompilerOptions的令牌。</target>
        </trans-unit>
        <trans-unit id="1d10a851a2521fa1132fbcccf205872120c2acd7" translate="yes" xml:space="preserve">
          <source>Tokens &lt;a href=&quot;dependency-injection&quot;&gt;can have different types&lt;/a&gt;. They are often classes. They may also be strings.</source>
          <target state="translated">令牌&lt;a href=&quot;dependency-injection&quot;&gt;可以具有不同的类型&lt;/a&gt;。他们经常是班级。它们也可以是字符串。</target>
        </trans-unit>
        <trans-unit id="19d57f29559f37ce632a300697209a7f397c855f" translate="yes" xml:space="preserve">
          <source>Tokens can be merged into a combined query selector string. For example:</source>
          <target state="translated">代币可以合并成一个组合查询选择器字符串。例如:</target>
        </trans-unit>
        <trans-unit id="df45966d6a0d5c55c4c026a6b59b4d99477ebee0" translate="yes" xml:space="preserve">
          <source>Top component</source>
          <target state="translated">顶部组件</target>
        </trans-unit>
        <trans-unit id="8dd425bec3818cb3cdcc48d42a8c69706bf636c4" translate="yes" xml:space="preserve">
          <source>Total number of bytes to upload or download. Depending on the request or response, this may not be computable and thus may not be present.</source>
          <target state="translated">上传或下载的字节总数。根据请求或响应的情况,这可能无法计算,因此可能不存在。</target>
        </trans-unit>
        <trans-unit id="253508f1cdb3b5a118c1f092109924e9f6cc5ecf" translate="yes" xml:space="preserve">
          <source>Tour of Heroes App and Tutorial</source>
          <target state="translated">英雄之旅app和教程</target>
        </trans-unit>
        <trans-unit id="940a504d78dc8eb71cdeb87d05acf21c2c8dddc2" translate="yes" xml:space="preserve">
          <source>Track and listen for changes to the form's data model.</source>
          <target state="translated">跟踪和监听表单数据模型的变化。</target>
        </trans-unit>
        <trans-unit id="8fb0f6e53c00adefd00aea3fc755781253060a37" translate="yes" xml:space="preserve">
          <source>Track by identity as computed by the &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">按 &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt; 计算的标识进行跟踪。</target>
        </trans-unit>
        <trans-unit id="2e20a272657096b0f12c4de4b5cd187088921815" translate="yes" xml:space="preserve">
          <source>Track control state and validity with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;ngModel&lt;/code&gt; 跟踪控制状态和有效性</target>
        </trans-unit>
        <trans-unit id="c1f1f73803fe36b0c16b9ccc852ad5cf4c245bed" translate="yes" xml:space="preserve">
          <source>Track state changes and the validity of form controls.</source>
          <target state="translated">跟踪状态变化和表单控件的有效性。</target>
        </trans-unit>
        <trans-unit id="750eabe2d59ab51eb9806ca014b817ea6d03f06e" translate="yes" xml:space="preserve">
          <source>TrackByFunction</source>
          <target state="translated">TrackByFunction</target>
        </trans-unit>
        <trans-unit id="e8e06238766a8da29e9dc9f88eea2e8f0510ad6f" translate="yes" xml:space="preserve">
          <source>Tracking and controlling &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;focus&lt;/a&gt; in a UI is an important consideration in designing for accessibility. When using Angular routing, you should decide where page focus goes upon navigation.</source>
          <target state="translated">在设计可访问性时，在UI中跟踪和控制&lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;焦点&lt;/a&gt;是重要的考虑因素。使用Angular路由时，应确定导航页面的焦点。</target>
        </trans-unit>
        <trans-unit id="2bf54b9db29d88e96523bb27968cbe340de3297c" translate="yes" xml:space="preserve">
          <source>Tracks changes to the email attribute bound to this directive.</source>
          <target state="translated">追踪与该指令绑定的电子邮件属性的变化。</target>
        </trans-unit>
        <trans-unit id="8fd392bb0e0e4c81e1b2544fdfe54ef3a072a778" translate="yes" xml:space="preserve">
          <source>Tracks changes to the pattern bound to this directive.</source>
          <target state="translated">跟踪与该指令绑定的模式的变化。</target>
        </trans-unit>
        <trans-unit id="d69d10dc65469d775e59042da88ca5d5529758ae" translate="yes" xml:space="preserve">
          <source>Tracks changes to the required attribute bound to this directive.</source>
          <target state="translated">追踪与该指令绑定的所需属性的变化。</target>
        </trans-unit>
        <trans-unit id="d8556ba32bce9b6e211ba689364183606036ec09" translate="yes" xml:space="preserve">
          <source>Tracks changes to the the maximum length bound to this directive.</source>
          <target state="translated">跟踪变化到该指令的最大长度约束。</target>
        </trans-unit>
        <trans-unit id="94a80f0e6fddb9418827ab4bb176c0d8df0d6618" translate="yes" xml:space="preserve">
          <source>Tracks changes to the the minimum length bound to this directive.</source>
          <target state="translated">追踪该指令所约束的最小长度的变化。</target>
        </trans-unit>
        <trans-unit id="196941bc4879e6f47b65e211a399eab8a6f6151b" translate="yes" xml:space="preserve">
          <source>Tracks options for the &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">跟踪 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 实例的选项。</target>
        </trans-unit>
        <trans-unit id="ab3dbc710cc5293470f8eccfb6d9f6e87414e9b0" translate="yes" xml:space="preserve">
          <source>Tracks simple string values bound to the option element. For objects, use the &lt;code&gt;ngValue&lt;/code&gt; input binding.</source>
          <target state="translated">跟踪绑定到option元素的简单字符串值。对于对象，请使用 &lt;code&gt;ngValue&lt;/code&gt; 输入绑定。</target>
        </trans-unit>
        <trans-unit id="8e0382103af4eac9cadd4b2247861b1d78b40172" translate="yes" xml:space="preserve">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance bound to the directive.</source>
          <target state="translated">跟踪绑定到指令的 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="e47245e960a6f3e488ea514c18870fe786d9b704" translate="yes" xml:space="preserve">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">跟踪绑定到此指令的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22f15c49bdce4bf9eed08a825998088b3e2b947f" translate="yes" xml:space="preserve">
          <source>Tracks the configuration options for this &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">跟踪此 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 实例的配置选项。</target>
        </trans-unit>
        <trans-unit id="625b260ece4880729473d6e613cdc9200774f31d" translate="yes" xml:space="preserve">
          <source>Tracks the list of added &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; instances</source>
          <target state="translated">跟踪已添加的 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 实例的列表</target>
        </trans-unit>
        <trans-unit id="89defebffe912c5087e896997a7d9b201c73c793" translate="yes" xml:space="preserve">
          <source>Tracks the name bound to the directive. The parent form uses this name as a key to retrieve this control's value.</source>
          <target state="translated">追踪与指令绑定的名称,父表单使用这个名称作为键来检索这个控件的值。父表单使用这个名称作为键来检索这个控件的值。</target>
        </trans-unit>
        <trans-unit id="aee499214828a5c060da6e529f71f860679051fe" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">跟踪绑定到指令的 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 的名称。该名称对应于父 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 中的键。</target>
        </trans-unit>
        <trans-unit id="aad0ec9ce7f409bb75dafe01a113a9f157129e45" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">跟踪绑定到指令的 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 的名称。该名称对应于父 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 中的键。</target>
        </trans-unit>
        <trans-unit id="5250e4f20d726ba69a0ff3fea3984936608f75ae" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">跟踪绑定到指令的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 的名称。该名称对应于父 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 中的键。</target>
        </trans-unit>
        <trans-unit id="3587ba9a726a4c83a603322c3d244042c4a5440b" translate="yes" xml:space="preserve">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">跟踪绑定到指令的 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; 的名称。该名称对应于父 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 中的键。</target>
        </trans-unit>
        <trans-unit id="94ef4bb133d8371862e04cdbe35ea80d627658aa" translate="yes" xml:space="preserve">
          <source>Tracks the name of the radio input element.</source>
          <target state="translated">追踪无线电输入元素的名称。</target>
        </trans-unit>
        <trans-unit id="847fd12a5e443af80b1d628517f650d4b16809c3" translate="yes" xml:space="preserve">
          <source>Tracks the option comparison algorithm for tracking identities when checking for changes.</source>
          <target state="translated">在检查变化时,跟踪跟踪身份的选项比较算法。</target>
        </trans-unit>
        <trans-unit id="4181514cf443c8d2ed062575db037633d03567f5" translate="yes" xml:space="preserve">
          <source>Tracks the value and validation status of an individual form control.</source>
          <target state="translated">跟踪单个表单控件的值和验证状态。</target>
        </trans-unit>
        <trans-unit id="e95029f5c1b54e6951ef7d1dc1f48671ee8c5122" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">跟踪一组 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例的值和有效性状态。</target>
        </trans-unit>
        <trans-unit id="6081501877b5287d24fab2c51a89d5bc830a5e25" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">跟踪一组 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例的值和有效性状态。</target>
        </trans-unit>
        <trans-unit id="145bfac45bf7e6224142dc5429a521af2cf548c9" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">跟踪 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 实例的数组的值和有效性状态。</target>
        </trans-unit>
        <trans-unit id="571f063bb31197967a229f7c4374acb092869635" translate="yes" xml:space="preserve">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">跟踪 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 实例的数组的值和有效性状态。</target>
        </trans-unit>
        <trans-unit id="a2626e67aec561be0def79f87c598efe295b2e85" translate="yes" xml:space="preserve">
          <source>Tracks the value bound to the option element. Unlike the value binding, ngValue supports binding to objects.</source>
          <target state="translated">追踪绑定到选项元素的值。与值绑定不同的是,ngValue支持与对象绑定。</target>
        </trans-unit>
        <trans-unit id="3ee63c63d361eb3aa2b0a3c1f8a3353d2f4dccf1" translate="yes" xml:space="preserve">
          <source>Tracks the value bound to this directive.</source>
          <target state="translated">追踪与该指令绑定的值。</target>
        </trans-unit>
        <trans-unit id="283ea7e4ca07fa5714eec7b7e0bd1c17f20bc544" translate="yes" xml:space="preserve">
          <source>Tracks the value of the radio input element</source>
          <target state="translated">追踪无线电输入元素的值。</target>
        </trans-unit>
        <trans-unit id="705f5065f56c892bc977873651559fe5515ab8a6" translate="yes" xml:space="preserve">
          <source>Tracks whether the control is disabled.</source>
          <target state="translated">跟踪该控件是否被禁用。</target>
        </trans-unit>
        <trans-unit id="9e4fec6404eb80383e9e6d6b5b94d18a5fdece28" translate="yes" xml:space="preserve">
          <source>Transcluding Angular Content into AngularJS Component Directives</source>
          <target state="translated">将Angular内容纳入AngularJS组件指令中</target>
        </trans-unit>
        <trans-unit id="b8bc0089d8b086cb38dab65911aa8acd5d70fbb7" translate="yes" xml:space="preserve">
          <source>Transclusion: yes</source>
          <target state="translated">跨界:是</target>
        </trans-unit>
        <trans-unit id="f29368cc7ff3b4ade7bfa044be1921ff64aa770b" translate="yes" xml:space="preserve">
          <source>TransferState</source>
          <target state="translated">TransferState</target>
        </trans-unit>
        <trans-unit id="dea51bb13a4467c505ee6181171375f497334d54" translate="yes" xml:space="preserve">
          <source>Transform</source>
          <target state="translated">Transform</target>
        </trans-unit>
        <trans-unit id="812518bba5c699b0027b6b3a480acfb0ebc647bd" translate="yes" xml:space="preserve">
          <source>Transform the free-form body into a serialized format suitable for transmission to the server.</source>
          <target state="translated">将自由体转化为适合传输到服务器的序列化格式。</target>
        </trans-unit>
        <trans-unit id="dc1c231275a16e11dae243561efa84b2936b1b19" translate="yes" xml:space="preserve">
          <source>Transformation</source>
          <target state="translated">Transformation</target>
        </trans-unit>
        <trans-unit id="173612f0833f1106fbc8f8dd6cfe45177a22f0f4" translate="yes" xml:space="preserve">
          <source>Transforming a component to a custom element makes all of the required Angular infrastructure available to the browser. Creating a custom element is simple and straightforward, and automatically connects your component-defined view with change detection and data binding, mapping Angular functionality to the corresponding native HTML equivalents.</source>
          <target state="translated">将组件转化为自定义元素,可以将所有所需的Angular基础架构提供给浏览器。创建自定义元素简单直接,并自动将您的组件定义的视图与变化检测和数据绑定连接起来,将Angular功能映射到相应的本地HTML等价物。</target>
        </trans-unit>
        <trans-unit id="76dc9f83782c6293c8d8c6eca91efe25b1d4f5a7" translate="yes" xml:space="preserve">
          <source>Transforming a component to a custom element provides an easy path to creating dynamic HTML content in your Angular app. HTML content that you add directly to the DOM in an Angular app is normally displayed without Angular processing, unless you define a &lt;em&gt;dynamic component&lt;/em&gt;, adding your own code to connect the HTML tag to your app data, and participate in change detection. With a custom element, all of that wiring is taken care of automatically.</source>
          <target state="translated">将组件转换为自定义元素可为在Angular应用中创建动态HTML内容提供简便的方法。直接显示在Angular应用程序中直接添加到DOM的HTML内容通常无需进行Angular处理即可显示，除非您定义了&lt;em&gt;动态组件&lt;/em&gt;，添加了自己的代码以将HTML标记连接到应用程序数据并参与变更检测。使用自定义元素，所有这些接线都会自动进行。</target>
        </trans-unit>
        <trans-unit id="428b2ec1d548861040d138b663bdf7c61a4509ea" translate="yes" xml:space="preserve">
          <source>Transforming components to custom elements</source>
          <target state="translated">将组件转化为自定义元素</target>
        </trans-unit>
        <trans-unit id="52c81ceec8de22f6a2b99230305438e29dcc24a6" translate="yes" xml:space="preserve">
          <source>Transforms Object or Map into an array of key value pairs.</source>
          <target state="translated">将对象或Map转换为键值对的数组。</target>
        </trans-unit>
        <trans-unit id="3a83fe4e975ea243d0d4caabdbff2dd2ca6b63d4" translate="yes" xml:space="preserve">
          <source>Transforms a number into a string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">将一个数字转化为字符串,根据确定分组大小和分隔符、小数点字符以及其他特定于本地的配置的本地化规则进行格式化。</target>
        </trans-unit>
        <trans-unit id="afee2a38410ecd1b168f5e62c7af603ea93414fc" translate="yes" xml:space="preserve">
          <source>Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">将一个数字转换为货币字符串,根据确定组大小和分隔符、小数点字符和其他特定于本地的配置的本地化规则进行格式化。</target>
        </trans-unit>
        <trans-unit id="ba444aa93f3d7c55a8743abcd65343bee076a245" translate="yes" xml:space="preserve">
          <source>Transforms a number to a percentage string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">将一个数字转换为一个百分比字符串,根据确定组大小和分隔符、小数点字符和其他特定于本地的配置的本地化规则进行格式化。</target>
        </trans-unit>
        <trans-unit id="b212033572f2c487923ac10525b776d1494e7327" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 的流，其中一个很可能是 &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="abab076aca3610a4dff43371a91f5154ef3df183" translate="yes" xml:space="preserve">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">将 &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 转换为 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 的流，其中一个很可能是 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c23fe29041b0f266f33891ae1c767b0508402f9a" translate="yes" xml:space="preserve">
          <source>Transforms text to all lower case.</source>
          <target state="translated">将文本转换为全小写。</target>
        </trans-unit>
        <trans-unit id="0e392a9c956f15e36c2ae33d345783ffbc7a81c9" translate="yes" xml:space="preserve">
          <source>Transforms text to all upper case.</source>
          <target state="translated">将文本转换为全大写。</target>
        </trans-unit>
        <trans-unit id="40a88712d9f4b6d6903665d4b10961274eca90e4" translate="yes" xml:space="preserve">
          <source>Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</source>
          <target state="translated">将文本转换为标题大小写。将每个单词的第一个字母大写,并将单词的其余部分转为小写。字词以空格、制表符或换行符等任何空白字符为界。</target>
        </trans-unit>
        <trans-unit id="8c6c4775aedd63bf234a390e5f164114cd3a3da9" translate="yes" xml:space="preserve">
          <source>Transforms the current value of expression &lt;code&gt;cardNumber&lt;/code&gt; via the pipe called &lt;code&gt;myCardNumberFormatter&lt;/code&gt;.</source>
          <target state="translated">通过名为 &lt;code&gt;myCardNumberFormatter&lt;/code&gt; 的管道转换表达式 &lt;code&gt;cardNumber&lt;/code&gt; 的当前值。</target>
        </trans-unit>
        <trans-unit id="acb4047f26fa458f6ca21611c9b86f2ba97bab12" translate="yes" xml:space="preserve">
          <source>Transition and triggers</source>
          <target state="translated">过渡和触发因素</target>
        </trans-unit>
        <trans-unit id="fd3159002733ca58d01f18f3ef225b0a35103de7" translate="yes" xml:space="preserve">
          <source>Transitions and timing</source>
          <target state="translated">过渡和时间安排</target>
        </trans-unit>
        <trans-unit id="f89031b2b65e1a903ff7d0356c56106e1092f7d4" translate="yes" xml:space="preserve">
          <source>Transitions are matched in the order in which they are defined. Thus, you can apply other transitions on top of the &lt;code&gt;* =&amp;gt; *&lt;/code&gt; (any-to-any) transition. For example, define style changes or animations that would apply just to &lt;code&gt;open =&amp;gt; closed&lt;/code&gt;, or just to &lt;code&gt;closed =&amp;gt; open&lt;/code&gt;, and then use &lt;code&gt;* =&amp;gt; *&lt;/code&gt; as a fallback for state pairings that aren't otherwise called out.</source>
          <target state="translated">过渡按照定义的顺序进行匹配。因此，您可以在 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; （任意到任意）转换之上应用其他转换。例如，定义仅适用于 &lt;code&gt;open =&amp;gt; closed&lt;/code&gt; 或仅适用于 &lt;code&gt;closed =&amp;gt; open&lt;/code&gt; 样式更改或动画，然后使用 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; 作为状态配对的后备选项，否则这些状态配对不会被调用。</target>
        </trans-unit>
        <trans-unit id="7ff0a6e47fefa7e662116ee0dd231cdcc6a56382" translate="yes" xml:space="preserve">
          <source>Translate &lt;code&gt;plural&lt;/code&gt;</source>
          <target state="translated">翻译 &lt;code&gt;plural&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f28407638edfdbe51d332499328f0747faddfb77" translate="yes" xml:space="preserve">
          <source>Translate &lt;code&gt;select&lt;/code&gt;</source>
          <target state="translated">翻译 &lt;code&gt;select&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9957e9ff8b20a6e29b6eb99cd6e9ed298461187" translate="yes" xml:space="preserve">
          <source>Translate a nested expression</source>
          <target state="translated">翻译一个嵌套表达式</target>
        </trans-unit>
        <trans-unit id="f8fd85ad8899ddbec87ff78411cd4b09cf77deb3" translate="yes" xml:space="preserve">
          <source>Translate attributes</source>
          <target state="translated">翻译属性</target>
        </trans-unit>
        <trans-unit id="5bd3d2d2e5c2b013f5f2ac3e26d961037f15cca1" translate="yes" xml:space="preserve">
          <source>Translate text nodes</source>
          <target state="translated">翻译文本节点</target>
        </trans-unit>
        <trans-unit id="c13a3e77e07e4d808e0f50d46cf7d8fba6e47542" translate="yes" xml:space="preserve">
          <source>Translate text without creating an element</source>
          <target state="translated">无需创建元素即可翻译文本</target>
        </trans-unit>
        <trans-unit id="9ca6a08c5891b63e799acee720895ad663f388d5" translate="yes" xml:space="preserve">
          <source>Translate the other text nodes the same way:</source>
          <target state="translated">用同样的方法翻译其他文本节点。</target>
        </trans-unit>
        <trans-unit id="ac3f7cdd6fb7bb10f67a29857be4bed2e5e05bcb" translate="yes" xml:space="preserve">
          <source>Translate the source text</source>
          <target state="translated">翻译源文本</target>
        </trans-unit>
        <trans-unit id="624f545665467d793ca13a411258c70e6ac2ee86" translate="yes" xml:space="preserve">
          <source>Translating plural and select expressions</source>
          <target state="translated">翻译复数和选择表达式</target>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="36e89f13f90ac0d31f2033903bc7999d29a243ad" translate="yes" xml:space="preserve">
          <source>TranslationWidth</source>
          <target state="translated">TranslationWidth</target>
        </trans-unit>
        <trans-unit id="3c93b9e5330687363111dd7a6e0ebef29ee56f02" translate="yes" xml:space="preserve">
          <source>Transmitting data between components</source>
          <target state="translated">在组件之间传输数据</target>
        </trans-unit>
        <trans-unit id="6e1d794deefaa6f98622f1040f05a7ea650ea223" translate="yes" xml:space="preserve">
          <source>Tree shaking refers to a compiler option that removes code from the final bundle if the app doesn't reference that code. When providers are tree-shakable, the Angular compiler removes the associated services from the final output when it determines that your application doesn't use those services. This significantly reduces the size of your bundles.</source>
          <target state="translated">树形摇动指的是一种编译器选项,如果应用程序没有引用该代码,则会从最终的捆绑中删除代码。当提供者可树状摇动时,Angular编译器在确定你的应用程序不使用相关服务时,会从最终输出中删除这些服务。这大大减少了你的捆绑包的大小。</target>
        </trans-unit>
        <trans-unit id="158297e3d668ae1a961f319687ea97bab89382f7" translate="yes" xml:space="preserve">
          <source>Tree-shakable InjectionToken</source>
          <target state="translated">树状摇动的注入令牌</target>
        </trans-unit>
        <trans-unit id="e9fcab1031cb2e23a1fe8832649e9c5a53141e58" translate="yes" xml:space="preserve">
          <source>Tree-shakable providers</source>
          <target state="translated">树形摇摇欲坠的供应商</target>
        </trans-unit>
        <trans-unit id="434f076d20f1b3b8a33e9ed50bbcb217521d722b" translate="yes" xml:space="preserve">
          <source>Tree-shaking and &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">摇树和 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f05b6a96acbdcfadc896179dc913a13d818f2f99" translate="yes" xml:space="preserve">
          <source>Tree-shaking doesn't work here because Angular can't decide to exclude one chunk of code (the provider definition for the service within the module factory) based on whether another chunk of code (the service class) is used. To make services tree-shakable, the information about how to construct an instance of the service (the provider definition) needs to be a part of the service class itself.</source>
          <target state="translated">树状摇动在这里是行不通的,因为Angular不能根据是否使用了另一块代码(服务类)来决定是否排除一块代码(模块工厂内服务的提供者定义)。为了使服务可以树状摇动,关于如何构造服务实例的信息(提供者定义)需要成为服务类本身的一部分。</target>
        </trans-unit>
        <trans-unit id="b998b898aa55ff4a0b42570f2ce7f5d95a803024" translate="yes" xml:space="preserve">
          <source>Tree-shaking is especially useful for a library because the application which uses the library may not have a need to inject it. Read more about &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;tree-shakable providers&lt;/a&gt; in &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI Providers&lt;/a&gt;.</source>
          <target state="translated">摇树对于库特别有用，因为使用该库的应用程序可能不需要注入它。在&lt;a href=&quot;dependency-injection-providers&quot;&gt;DI Providers中&lt;/a&gt;了解有关&lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;可摇晃的提供程序的&lt;/a&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="1e7081d736f43ad30574ac906d26acdd03c38ed9" translate="yes" xml:space="preserve">
          <source>Trees</source>
          <target state="translated">Trees</target>
        </trans-unit>
        <trans-unit id="6c9d923a2bdc1cbd32c38da5c221d86fa7a8a6ed" translate="yes" xml:space="preserve">
          <source>Trees can represent hierarchical data.</source>
          <target state="translated">树可以表示层次化的数据。</target>
        </trans-unit>
        <trans-unit id="de3b30d295ded9bca000cfefdd9403aa187ece06" translate="yes" xml:space="preserve">
          <source>Trigger a change detection cycle for the component.</source>
          <target state="translated">触发组件的变化检测周期。</target>
        </trans-unit>
        <trans-unit id="9407e89d96626ed5d353629e3f6d9a9d64468166" translate="yes" xml:space="preserve">
          <source>Trigger component destruction.</source>
          <target state="translated">触发组件销毁。</target>
        </trans-unit>
        <trans-unit id="53af3485dc7b16524b04a2e63069b00e185de29e" translate="yes" xml:space="preserve">
          <source>Triggering the animation</source>
          <target state="translated">触发动画</target>
        </trans-unit>
        <trans-unit id="e870e5d23b1facd0b564612cfd9fdd42eb18bc87" translate="yes" xml:space="preserve">
          <source>Triggers a change event by emitting on the &lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通过发出 &lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; 来&lt;/a&gt;触发更改事件。</target>
        </trans-unit>
        <trans-unit id="0ae4d5b42be1c56e1a7225f517e99f471b359dc4" translate="yes" xml:space="preserve">
          <source>Triggers a warning that this input should not be used with reactive forms.</source>
          <target state="translated">触发一个警告,该输入不能与反应式表格一起使用。</target>
        </trans-unit>
        <trans-unit id="5083756d2f83ef32092480b31b3cecd6c6cec6c9" translate="yes" xml:space="preserve">
          <source>Triggers the event by its name if there is a corresponding listener in the element's &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; collection. The second parameter is the &lt;em&gt;event object&lt;/em&gt; expected by the handler. See &lt;a href=&quot;testing#trigger-event-handler&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">如果元素的 &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; 集合中有对应的侦听器，则通过事件的名称触发事件。第二个参数是处理程序期望的&lt;em&gt;事件对象&lt;/em&gt;。见&lt;a href=&quot;testing#trigger-event-handler&quot;&gt;上文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a10c269fb7def350ff63b23aa2d28b00775e9f1c" translate="yes" xml:space="preserve">
          <source>Trim the value (remove whitespace) and make sure it&amp;rsquo;s a minimum length.</source>
          <target state="translated">修剪值（删除空格），并确保它是最小长度。</target>
        </trans-unit>
        <trans-unit id="3cc21cf3f8e5867393f5bad054b9c40301206223" translate="yes" xml:space="preserve">
          <source>Trims all whitespaces at the beginning and the end of a template.</source>
          <target state="translated">修剪模板开头和结尾的所有空格。</target>
        </trans-unit>
        <trans-unit id="f43741667aa518662d503fc2ce7e1d14354c3bec" translate="yes" xml:space="preserve">
          <source>True if at least one navigation event has occurred, false otherwise.</source>
          <target state="translated">如果至少有一个导航事件发生,则为真,否则为假。</target>
        </trans-unit>
        <trans-unit id="9d796fe59ff2474ea78a1c50451058993aa79f3b" translate="yes" xml:space="preserve">
          <source>True if the Service Worker is enabled (supported by the browser and enabled via &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">如果启用了Service Worker（由浏览器支持并通过 &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; 启用），则为True 。</target>
        </trans-unit>
        <trans-unit id="5f972cc15ad49cf4f212b677b7dc7d8b9251db55" translate="yes" xml:space="preserve">
          <source>True if the control has not been marked as touched</source>
          <target state="translated">如果控件没有被标记为被触摸,则为真。</target>
        </trans-unit>
        <trans-unit id="dcc1b1c1aa85f2da9a269e743dc502fd0749e99e" translate="yes" xml:space="preserve">
          <source>True if the control is marked as &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">如果控件标记为已 &lt;code&gt;touched&lt;/code&gt; 则为True 。</target>
        </trans-unit>
        <trans-unit id="60e52a2ca105703a08ce2fd47ddd086d17018855" translate="yes" xml:space="preserve">
          <source>True if this query is optional, false if it is required. Default is false. A required query throws an error if no elements are retrieved when the query is executed. An optional query does not.</source>
          <target state="translated">如果这个查询是可选的,则为true,如果是必填的,则为false。默认值是false。如果在执行查询时没有检索到任何元素,则必填查询会抛出一个错误。可选查询则不会。</target>
        </trans-unit>
        <trans-unit id="06b3634a6e2a35bbc0dd073c9b175791f2522293" translate="yes" xml:space="preserve">
          <source>True to include an anchor fragment in the path.</source>
          <target state="translated">True,在路径中包含一个锚点片段。</target>
        </trans-unit>
        <trans-unit id="1ab65405badb72e5749b47e365af2b6aaf2cb192" translate="yes" xml:space="preserve">
          <source>True to preserve or false to remove potentially superfluous whitespace characters from the compiled template. Whitespace characters are those matching the &lt;code&gt;\s&lt;/code&gt; character class in JavaScript regular expressions. Default is false, unless overridden in compiler options.</source>
          <target state="translated">如果保留，则为true；如果为false，则从编译的模板中删除可能多余的空白字符。空格字符是与JavaScript正则表达式中 &lt;code&gt;\s&lt;/code&gt; 字符类匹配的字符。默认值为false，除非在编译器选项中覆盖。</target>
        </trans-unit>
        <trans-unit id="c19e0cdc9c33c77f5adf440dc15998ff2a61e211" translate="yes" xml:space="preserve">
          <source>Trusting safe values</source>
          <target state="translated">信任安全价值</target>
        </trans-unit>
        <trans-unit id="beb70957ec5482b78d59548c5c70483736e2c218" translate="yes" xml:space="preserve">
          <source>Try editing any of the project files. Save and refresh the browser to see the changes.</source>
          <target state="translated">尝试编辑任何一个项目文件。保存并刷新浏览器以查看更改。</target>
        </trans-unit>
        <trans-unit id="7ddd66b689c9370a62daee26be57fd02d84a295b" translate="yes" xml:space="preserve">
          <source>Try it</source>
          <target state="translated">试试吧</target>
        </trans-unit>
        <trans-unit id="62e11793c0386a1bddb0a86fda7f464e7c562e11" translate="yes" xml:space="preserve">
          <source>Try it by adding the following directive binding variations to the &lt;code&gt;AppComponent&lt;/code&gt; template:</source>
          <target state="translated">通过将以下指令绑定变体添加到 &lt;code&gt;AppComponent&lt;/code&gt; 模板来进行尝试：</target>
        </trans-unit>
        <trans-unit id="da8a7f15b67a49c642972b20522557722114e5ed" translate="yes" xml:space="preserve">
          <source>Try it by clicking on this live example link.</source>
          <target state="translated">点击这个活例链接试试。</target>
        </trans-unit>
        <trans-unit id="55391745de289ddef8d65ec34b574ce002c5003d" translate="yes" xml:space="preserve">
          <source>Try it out. Because the array has four items, the message should appear. Go back into &lt;code&gt;app.component.ts&lt;/code&gt; and delete or comment out one of the elements from the heroes array. The browser should refresh automatically and the message should disappear.</source>
          <target state="translated">试试看。因为数组有四个项目，所以应该出现该消息。返回 &lt;code&gt;app.component.ts&lt;/code&gt; 并从heroes数组中删除或注释掉其中一个元素。浏览器应自动刷新，并且消息应消失。</target>
        </trans-unit>
        <trans-unit id="8d0b56cf0fa53f627bd12835d235587765053dc2" translate="yes" xml:space="preserve">
          <source>Try one of the &quot;3G&quot; speeds.</source>
          <target state="translated">试一试 &quot;3G &quot;的速度。</target>
        </trans-unit>
        <trans-unit id="dc1ea3e260d075f0697ffb4ad683deb138ba7e53" translate="yes" xml:space="preserve">
          <source>Try setting it to &lt;code&gt;'prefix'&lt;/code&gt; then click the &lt;code&gt;Go to sidekicks&lt;/code&gt; button. Remember that's a bad URL and you should see the &quot;Page not found&quot; page. Instead, you're still on the &quot;Heroes&quot; page. Enter a bad URL in the browser address bar. You're instantly re-routed to &lt;code&gt;/heroes&lt;/code&gt;. &lt;em&gt;Every&lt;/em&gt; URL, good or bad, that falls through to &lt;em&gt;this&lt;/em&gt; route definition will be a match.</source>
          <target state="translated">尝试将其设置为 &lt;code&gt;'prefix'&lt;/code&gt; 然后单击&amp;ldquo; &lt;code&gt;Go to sidekicks&lt;/code&gt; 按钮。请记住，这是一个错误的URL，您应该看到&amp;ldquo;找不到页面&amp;rdquo;页面。相反，您仍在&amp;ldquo;英雄&amp;rdquo;页面上。在浏览器地址栏中输入错误的URL。您立即被重新路由到 &lt;code&gt;/heroes&lt;/code&gt; 。符合&lt;em&gt;此&lt;/em&gt;路由定义的&lt;em&gt;每个&lt;/em&gt; URL（无论好坏）都是一个匹配项。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae0be3b047c4a387d93f02977418e5b637e0c752" translate="yes" xml:space="preserve">
          <source>Try the &quot;Notify Me&quot; button:</source>
          <target state="translated">试试 &quot;通知我 &quot;按钮。</target>
        </trans-unit>
        <trans-unit id="cd0d3f4d9f412d033eddde43a048eb8599b4eed2" translate="yes" xml:space="preserve">
          <source>Try the .</source>
          <target state="translated">试试...</target>
        </trans-unit>
        <trans-unit id="3d6fc4cc6f37c4db0524ee36aee6fae03bc9b160" translate="yes" xml:space="preserve">
          <source>Try the Reactive Forms live-example.</source>
          <target state="translated">试试Reactive Forms实景示例。</target>
        </trans-unit>
        <trans-unit id="1a5c2c2df13a5a08f5ec5e0c77a14b60e0a6f624" translate="yes" xml:space="preserve">
          <source>Try the change detection profiler &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; then hit Enter.</source>
          <target state="translated">尝试更改检测分析器 &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; ,然后按Enter。</target>
        </trans-unit>
        <trans-unit id="cc82bb7378a7738346274197a65346c4cb1c2791" translate="yes" xml:space="preserve">
          <source>Try the live example.</source>
          <target state="translated">试试现场的例子。</target>
        </trans-unit>
        <trans-unit id="6f3deed36905b6ad108038ee3fade698b4b61902" translate="yes" xml:space="preserve">
          <source>Try to minimize the heading depth, preferably only two. But more headings, such as this one, are permitted if they make sense.</source>
          <target state="translated">尽量减少标题的深度,最好只有两个标题。但如果有意义的话,可以多用一些标题,比如这个标题。</target>
        </trans-unit>
        <trans-unit id="95d44839b57ad612170554fef51a66c4c2b769e8" translate="yes" xml:space="preserve">
          <source>Try to update webdriver.</source>
          <target state="translated">尝试更新webdriver。</target>
        </trans-unit>
        <trans-unit id="b44892b7f81948b449b1fceb43f8115ba5ff108b" translate="yes" xml:space="preserve">
          <source>Tu</source>
          <target state="translated">Tu</target>
        </trans-unit>
        <trans-unit id="529541bb390c76152e313351d89de3cd30a1c4bd" translate="yes" xml:space="preserve">
          <source>Tue</source>
          <target state="translated">Tue</target>
        </trans-unit>
        <trans-unit id="42e43b612a5dfae57ddf5929f0fb945ae83cbf61" translate="yes" xml:space="preserve">
          <source>Tuesday</source>
          <target state="translated">Tuesday</target>
        </trans-unit>
        <trans-unit id="db9100479b1bab146b0529edf56cd2ecbd2b852d" translate="yes" xml:space="preserve">
          <source>Turns an array of provider definitions into an array of resolved providers.</source>
          <target state="translated">将一个数组的提供者定义转化为一个数组的解析提供者。</target>
        </trans-unit>
        <trans-unit id="7a8c0b3d0dcf9c1d0944ace8b26766b7619fce7b" translate="yes" xml:space="preserve">
          <source>Turns the li element and its contents into a template, and uses that to instantiate a view for each item in list.</source>
          <target state="translated">将li元素和它的内容变成一个模板,并使用它为list中的每个项目实例化一个视图。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="67bfe76e19af4ce403f2340d240f7abfa0a85e7e" translate="yes" xml:space="preserve">
          <source>Two injector hierarchies</source>
          <target state="translated">两种注射器层次结构</target>
        </trans-unit>
        <trans-unit id="5af8d4f5f9dae7eb59bd4d8f4f973fff3523e350" translate="yes" xml:space="preserve">
          <source>Two of the three fields on this form are required. Required fields have a green bar on the left to make them easy to spot.</source>
          <target state="translated">本表的三个字段中,有两个是必填字段。必须填写的字段在左边有一个绿色条,以便于识别。</target>
        </trans-unit>
        <trans-unit id="b26194f02c2a9055521cad644dadbcf22c29b12c" translate="yes" xml:space="preserve">
          <source>Two older properties are still available. They are less capable than their replacements, discouraged, and may be deprecated in a future Angular version.</source>
          <target state="translated">两个旧的属性仍然可用。它们的能力不如它们的替代品,不鼓励使用,并且可能在未来的Angular版本中被废弃。</target>
        </trans-unit>
        <trans-unit id="c8403b3967903a37a646651f5a30b179b5958e53" translate="yes" xml:space="preserve">
          <source>Two types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error &lt;em&gt;responses&lt;/em&gt;.</source>
          <target state="translated">可能发生两种类型的错误。服务器后端可能会拒绝该请求，并返回带有状态代码（例如404或500）的HTTP &lt;em&gt;响应&lt;/em&gt;。这是错误&lt;em&gt;响应&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ee50a3e68cf100c0537278aede679f485d09b355" translate="yes" xml:space="preserve">
          <source>Two-way</source>
          <target state="translated">Two-way</target>
        </trans-unit>
        <trans-unit id="76e6c5bfb6eaf94684d63dcc6574a58b41d951d1" translate="yes" xml:space="preserve">
          <source>Two-way binding</source>
          <target state="translated">双向装订</target>
        </trans-unit>
        <trans-unit id="a02bb0a1df250e5934cdce63455e1ad4bc4637b6" translate="yes" xml:space="preserve">
          <source>Two-way binding &lt;code&gt;[(...)]&lt;/code&gt;</source>
          <target state="translated">双向绑定 &lt;code&gt;[(...)]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ee8d72f683e98e5e49284a4dbb3c6a8dac3d915" translate="yes" xml:space="preserve">
          <source>Two-way binding does two things:</source>
          <target state="translated">双向绑定有两个作用。</target>
        </trans-unit>
        <trans-unit id="f559c791fe1735111c9bc3f8318c26c9efdb1820" translate="yes" xml:space="preserve">
          <source>Two-way binding gives your app a way to share data between a component class and its template.</source>
          <target state="translated">双向绑定为您的应用程序提供了一种在组件类和其模板之间共享数据的方式。</target>
        </trans-unit>
        <trans-unit id="03cb506ca909370dd733aa2c43253165731e42ab" translate="yes" xml:space="preserve">
          <source>Two-way binding in forms</source>
          <target state="translated">双向绑定的形式</target>
        </trans-unit>
        <trans-unit id="5d24cacbc734efe855956d91ed8e0797e5f736ba" translate="yes" xml:space="preserve">
          <source>Two-way data binding (used mainly in &lt;a href=&quot;forms&quot;&gt;template-driven forms&lt;/a&gt;) combines property and event binding in a single notation. Here's an example from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template that uses two-way data binding with the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">双向数据绑定（主要用于&lt;a href=&quot;forms&quot;&gt;模板驱动形式&lt;/a&gt;）将属性和事件绑定组合为一个符号。这是 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 模板中的示例，该示例使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令使用双向数据绑定。</target>
        </trans-unit>
        <trans-unit id="06f67c15fc229f1a2bb0b3b0ebc852bfedb0de8e" translate="yes" xml:space="preserve">
          <source>Two-way data binding with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;ngModel&lt;/code&gt; 进行双向数据绑定</target>
        </trans-unit>
        <trans-unit id="6d973b2b83b53e6c30f5b13acc68a0a0c71e118f" translate="yes" xml:space="preserve">
          <source>Two-way data binding with ngModel</source>
          <target state="translated">使用ngModel进行双向数据绑定。</target>
        </trans-unit>
        <trans-unit id="f52bdefafb9c2ca15e12f66ca83326ece8bda8ce" translate="yes" xml:space="preserve">
          <source>Two-way sequence: &lt;em&gt;view-to-source-to-view&lt;/em&gt;</source>
          <target state="translated">双向顺序：&lt;em&gt;从源到视图&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="abb237ba4f86298e209fd0cde19460f30c5121a4" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;ng.&lt;/code&gt; (usually the console will show auto-complete suggestion)</source>
          <target state="translated">输入 &lt;code&gt;ng.&lt;/code&gt; （通常，控制台会显示自动完成建议）</target>
        </trans-unit>
        <trans-unit id="00ec381921f624d45bbd03504823d08111458d72" translate="yes" xml:space="preserve">
          <source>Type annotations can be gradually added to existing functions and variables to pin down their types and get benefits like build-time error checking, great autocompletion support and inline documentation.</source>
          <target state="translated">类型注释可以逐步添加到现有的函数和变量中,以确定它们的类型,并获得诸如构建时错误检查、强大的自动完成支持和内联文档等好处。</target>
        </trans-unit>
        <trans-unit id="35df57064639add6482ba283504c0b41a4d923e6" translate="yes" xml:space="preserve">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">为不同类型的 &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 进行类型枚举。</target>
        </trans-unit>
        <trans-unit id="67608246c1a184d4c40c268ca1fdc639f618fa7c" translate="yes" xml:space="preserve">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">为不同类型的 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 进行类型枚举。</target>
        </trans-unit>
        <trans-unit id="57c55c58c8644f8a5cbf6770552ae7125d3582e3" translate="yes" xml:space="preserve">
          <source>Type narrowing</source>
          <target state="translated">缩小类型</target>
        </trans-unit>
        <trans-unit id="95d67b98d7690612e1e13d9a3e9a1be2da8d088a" translate="yes" xml:space="preserve">
          <source>Type of the response, narrowed to either the full response or the header.</source>
          <target state="translated">响应的类型,缩小到完整的响应或头。</target>
        </trans-unit>
        <trans-unit id="c05540b14b3733e314b2c94793826ae9c2b0627e" translate="yes" xml:space="preserve">
          <source>Type something in the input box, and watch the display update with each keystroke.</source>
          <target state="translated">在输入框中输入一些东西,然后看着显示屏随着每个按键的更新而更新。</target>
        </trans-unit>
        <trans-unit id="33ab71a8dcc6216b348bea2620429ad622b3147d" translate="yes" xml:space="preserve">
          <source>Type the &lt;code&gt;$event&lt;/code&gt;</source>
          <target state="translated">输入 &lt;code&gt;$event&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01e12f16a8da430c9b64b2d92b35b38ac6541548" translate="yes" xml:space="preserve">
          <source>Type used for modifications to metadata</source>
          <target state="translated">用于修改元数据的类型</target>
        </trans-unit>
        <trans-unit id="5173fdf6f5703224da499d4346fe617ae8193603" translate="yes" xml:space="preserve">
          <source>Type-ahead suggestions</source>
          <target state="translated">前期建议</target>
        </trans-unit>
        <trans-unit id="9c733ffadf4f948ba611c69673474803d64d1601" translate="yes" xml:space="preserve">
          <source>TypeDecorator</source>
          <target state="translated">TypeDecorator</target>
        </trans-unit>
        <trans-unit id="e6711bda99893016ef166d44941fe0aeec10d722" translate="yes" xml:space="preserve">
          <source>TypeProvider</source>
          <target state="translated">TypeProvider</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="eea2f4b377967e9066abaa29b6c1756fe6ff90ed" translate="yes" xml:space="preserve">
          <source>TypeScript Configuration</source>
          <target state="translated">TypeScript配置</target>
        </trans-unit>
        <trans-unit id="d08f0fbcc73c7306dc8d1fd2df1b684771e05b98" translate="yes" xml:space="preserve">
          <source>TypeScript Typings</source>
          <target state="translated">TypeScript打字法</target>
        </trans-unit>
        <trans-unit id="568ece999d38f89aa19bccbc22c354f6f68a64b1" translate="yes" xml:space="preserve">
          <source>TypeScript configuration In the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt; section determines the ECMAScript target version that the code is compiled to. Modern browsers support ES2015 natively, while ES5 is more commonly used to support legacy browsers.</source>
          <target state="translated">打字稿配置了打字稿配置文件， &lt;code&gt;tsconfig.json&lt;/code&gt; ，所述 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 在 &lt;code&gt;compilerOptions&lt;/code&gt; 部分确定的ECMAScript目标版本的代码被编译成。现代浏览器本身支持ES2015，而ES5更常用于支持旧版浏览器。</target>
        </trans-unit>
        <trans-unit id="b1e9557f6d0130ab631bf37ddceaa7ef43c0683e" translate="yes" xml:space="preserve">
          <source>TypeScript configuration for Web Worker modules.</source>
          <target state="translated">Web Worker模块的TypeScript配置。</target>
        </trans-unit>
        <trans-unit id="ffe80e00ee1ac5833b065ce121ce10c3b973c059" translate="yes" xml:space="preserve">
          <source>TypeScript definition files for 3rd party libraries such as Jasmine and Node.js.</source>
          <target state="translated">第三方库的TypeScript定义文件,如Jasmine和Node.js。</target>
        </trans-unit>
        <trans-unit id="0b3cb1f49429cb05d8a3b0bcacdfe5ff715b318e" translate="yes" xml:space="preserve">
          <source>TypeScript developers disagree about whether the &lt;code&gt;noImplicitAny&lt;/code&gt; flag should be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. There is no correct answer and you can change the flag later. But your choice now can make a difference in larger projects, so it merits discussion.</source>
          <target state="translated">TypeScript开发人员不同意 &lt;code&gt;noImplicitAny&lt;/code&gt; 标志应为 &lt;code&gt;true&lt;/code&gt; 还是 &lt;code&gt;false&lt;/code&gt; 。没有正确的答案，您可以稍后更改标志。但是您现在的选择可以在较大的项目中有所作为，因此值得讨论。</target>
        </trans-unit>
        <trans-unit id="2ac9ee6e703b108a7d6fb03a16a6d571742ddf64" translate="yes" xml:space="preserve">
          <source>TypeScript execution environment and REPL for Node.js.</source>
          <target state="translated">Node.js的TypeScript执行环境和REPL。</target>
        </trans-unit>
        <trans-unit id="e285eb073cfe4ca1656c07087772b6ee1156351a" translate="yes" xml:space="preserve">
          <source>TypeScript includes a special declaration file called &lt;code&gt;lib.d.ts&lt;/code&gt;. This file contains the ambient declarations for various common JavaScript constructs present in JavaScript runtimes and the DOM.</source>
          <target state="translated">打字稿包括所谓的特殊声明文件 &lt;code&gt;lib.d.ts&lt;/code&gt; 。该文件包含JavaScript运行时和DOM中存在的各种常见JavaScript结构的环境声明。</target>
        </trans-unit>
        <trans-unit id="d17e05e344ecb4e3225929fb6a865b40d4814eb9" translate="yes" xml:space="preserve">
          <source>TypeScript is a primary language for Angular application development. It is a superset of JavaScript with design-time support for type safety and tooling.</source>
          <target state="translated">TypeScript是Angular应用开发的主要语言。它是JavaScript的超集,在设计时支持类型安全和工具。</target>
        </trans-unit>
        <trans-unit id="2c8995564b3de9df5c51483595738fe4422b297b" translate="yes" xml:space="preserve">
          <source>TypeScript is the preferred language for Angular development. Read more about TypeScript at &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.org&lt;/a&gt;.</source>
          <target state="translated">TypeScript是Angular开发的首选语言。在&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.org上&lt;/a&gt;了解有关TypeScript的更多信息。</target>
        </trans-unit>
        <trans-unit id="13b49b13fb502567852c984e23e397ba1fe80b3a" translate="yes" xml:space="preserve">
          <source>TypeScript understands ambient types so you don't import them. The Angular compiler does not understand a type that you neglect to export or import.</source>
          <target state="translated">TypeScript能理解环境类型,所以你不需要导入它们。Angular编译器不理解你忽略导出或导入的类型。</target>
        </trans-unit>
        <trans-unit id="77e137f60887b3a3c13ebdb09dee2d2b67d890c4" translate="yes" xml:space="preserve">
          <source>TypeScript will prevent you from setting &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; readonly properties.</source>
          <target state="translated">TypeScript将阻止您设置 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; 只读属性。</target>
        </trans-unit>
        <trans-unit id="717ede79628ca336772d228c8b05e09de2a3a0c2" translate="yes" xml:space="preserve">
          <source>TypeScript-aware editors leverage these same definition files to display type information about library features.</source>
          <target state="translated">TypeScript-aware编辑器利用这些相同的定义文件来显示库特征的类型信息。</target>
        </trans-unit>
        <trans-unit id="7118d9e8c875a30ba644adcfe209053d423d1da0" translate="yes" xml:space="preserve">
          <source>Typed Array</source>
          <target state="translated">类型化阵列</target>
        </trans-unit>
        <trans-unit id="7ab3c88469253783493694d6963d80d7a8308f54" translate="yes" xml:space="preserve">
          <source>Typed according to the expected type of the response.</source>
          <target state="translated">根据反应的预期类型打字。</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="c713e3cd5c50ec234c9ce6d04250d694a2a4d577" translate="yes" xml:space="preserve">
          <source>Types defined in a &lt;code&gt;@types/&lt;/code&gt; package for a library installed into the workspace are automatically added to the TypeScript configuration for the project that uses that library. TypeScript looks for types in the &lt;code&gt;node_modules/@types&lt;/code&gt; folder by default, so you don't have to add each type package individually.</source>
          <target state="translated">在 &lt;code&gt;@types/&lt;/code&gt; 包中为安装在工作区中的库定义的类型会自动添加到使用该库的项目的TypeScript配置中。默认情况下，TypeScript在 &lt;code&gt;node_modules/@types&lt;/code&gt; 文件夹中查找类型，因此您不必单独添加每个类型包。</target>
        </trans-unit>
        <trans-unit id="12392cbc3086f77e04a6c62a73c887b3f9c633d6" translate="yes" xml:space="preserve">
          <source>Types of Feature Modules</source>
          <target state="translated">功能模块的类型</target>
        </trans-unit>
        <trans-unit id="118122abcc89881e0578f9aef369355356986b9f" translate="yes" xml:space="preserve">
          <source>Types of NgModules</source>
          <target state="translated">NgModules的类型</target>
        </trans-unit>
        <trans-unit id="11fe3760894bbd3efef56cd08f43a7f909233a1d" translate="yes" xml:space="preserve">
          <source>Types of modifiers</source>
          <target state="translated">修饰语的类型</target>
        </trans-unit>
        <trans-unit id="0ef8a95f38c50052d0013209588f9bd78801e33d" translate="yes" xml:space="preserve">
          <source>Typically new embedded views are attached to the view container of this location, but in advanced use-cases, the view can be attached to a different container while keeping the data-binding and injection context from the original location.</source>
          <target state="translated">通常,新的嵌入式视图被附加到这个位置的视图容器上,但在高级使用情况下,视图可以被附加到不同的容器上,同时保留原始位置的数据绑定和注入上下文。</target>
        </trans-unit>
        <trans-unit id="2c7b40120f45df1933863f5ac01d78ac42ee438a" translate="yes" xml:space="preserve">
          <source>Typically, animations involve multiple style &lt;em&gt;transformations&lt;/em&gt; over time. An HTML element can move, change color, grow or shrink, fade, or slide off the page. These changes can occur simultaneously or sequentially. You can control the timing of each transformation.</source>
          <target state="translated">通常，动画会随着时间的推移涉及多种样式&lt;em&gt;转换&lt;/em&gt;。HTML元素可以移动，更改颜色，增大或缩小，淡入淡出或滑出页面。这些变化可以同时发生，也可以依次发生。您可以控制每个转换的时间。</target>
        </trans-unit>
        <trans-unit id="b5fb32f38245ff9f2d99b2dd935857d879ebced7" translate="yes" xml:space="preserve">
          <source>Typically, the name of a generated artifact can be given as an argument to the command or specified with the --name option.</source>
          <target state="translated">通常情况下,生成的人工制品的名称可以作为命令的一个参数,或者用--name选项指定。</target>
        </trans-unit>
        <trans-unit id="b95554d848ef81d79b0b709dc7f5aaeb34a12474" translate="yes" xml:space="preserve">
          <source>Typically, you add a TypeScript configuration file called &lt;code&gt;tsconfig.json&lt;/code&gt; to your project to guide the compiler as it generates JavaScript files.</source>
          <target state="translated">通常，您将一个名为 &lt;code&gt;tsconfig.json&lt;/code&gt; 的TypeScript配置文件添加到您的项目中，以指导编译器生成JavaScript文件。</target>
        </trans-unit>
        <trans-unit id="a0bd1a75c0172c79f7c9ff6dc164b3a599561a53" translate="yes" xml:space="preserve">
          <source>Typing the event object reveals a significant objection to passing the entire DOM event into the method: the component has too much awareness of the template details. It can't extract information without knowing more than it should about the HTML implementation. That breaks the separation of concerns between the template (&lt;em&gt;what the user sees&lt;/em&gt;) and the component (&lt;em&gt;how the application processes user data&lt;/em&gt;).</source>
          <target state="translated">键入事件对象揭示了将整个DOM事件传递到方法中的重大反对：该组件对模板详细信息的了解过多。如果不了解HTML实现，它就无法提取信息。这打破了模板（&lt;em&gt;用户看到的内容&lt;/em&gt;）和组件（&lt;em&gt;应用程序如何处理用户数据&lt;/em&gt;）之间的关注点分离。</target>
        </trans-unit>
        <trans-unit id="480af6c7beed3c898f5f1f02a7bf65dedf1b38cc" translate="yes" xml:space="preserve">
          <source>Typings for custom elements</source>
          <target state="translated">自定义元素的类型</target>
        </trans-unit>
        <trans-unit id="20bdf90100bc0696258702c718f92a1b02cab2b8" translate="yes" xml:space="preserve">
          <source>UPPER_UNDERSCORE_CASE (or UPPER_SNAKE_CASE, or SCREAMING_SNAKE_CASE): Traditional for constants (acceptable, but prefer camelCase). Upper snake case uses words in all capital letters connected with underscores. For example, &quot;FIX_ME&quot;.</source>
          <target state="translated">UPPER_UNDERSCORE_CASE(或UPPER_SNAKE_CASE,或SCREAMING_SNAKE_CASE)。传统的常量(可以接受,但更喜欢骆驼大小写)。上蛇形大写使用所有大写字母与下划线相连的单词。例如,&quot;FIX_ME&quot;。</target>
        </trans-unit>
        <trans-unit id="a27c9c50aeeb496cbd6ae8eb92bcc77112bfe9fd" translate="yes" xml:space="preserve">
          <source>URL of the resource retrieved, or null if not available.</source>
          <target state="translated">检索到的资源的URL,如果没有,则为空。</target>
        </trans-unit>
        <trans-unit id="f65f44308f1ade7cb98e9a6130f17b75f1c7965f" translate="yes" xml:space="preserve">
          <source>URL path to normalize.</source>
          <target state="translated">要规范化的URL路径。</target>
        </trans-unit>
        <trans-unit id="c774e36c8a233fe47b885d57e6f9250be88a291c" translate="yes" xml:space="preserve">
          <source>URL query strings</source>
          <target state="translated">URL查询字符串</target>
        </trans-unit>
        <trans-unit id="ab8c3d3d9bc2c2c289a7a884d43b797a116cdf17" translate="yes" xml:space="preserve">
          <source>URL string</source>
          <target state="translated">URL字符串</target>
        </trans-unit>
        <trans-unit id="6415e7db453017765698b94a474b0ba310523c13" translate="yes" xml:space="preserve">
          <source>URL string.</source>
          <target state="translated">URL字符串。</target>
        </trans-unit>
        <trans-unit id="6229662eaa903e67f2ed0f1353e8aa463aa6f79f" translate="yes" xml:space="preserve">
          <source>URL where files will be deployed.</source>
          <target state="translated">部署文件的URL。</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="82ec40ec287dfe6afdf2c04f8ac45df9a5b41f73" translate="yes" xml:space="preserve">
          <source>Uglification: rewrites code to use short, cryptic variable and function names.</source>
          <target state="translated">Uglification:重写代码,使用简短、神秘的变量和函数名。</target>
        </trans-unit>
        <trans-unit id="dec6154649e20b8a4f868f22a0c2826a4a662d9a" translate="yes" xml:space="preserve">
          <source>Ugly, long section header anchors</source>
          <target state="translated">丑陋的长节头锚</target>
        </trans-unit>
        <trans-unit id="3698e121e629257a193cc1ee0ba5707f90dd1040" translate="yes" xml:space="preserve">
          <source>UiArguments</source>
          <target state="translated">UiArguments</target>
        </trans-unit>
        <trans-unit id="0368218af0bd6062b199bada30a6e4035b16a7cb" translate="yes" xml:space="preserve">
          <source>Unable to find a parent by its base class</source>
          <target state="translated">无法通过其基类找到父类。</target>
        </trans-unit>
        <trans-unit id="0585362025afaad2cb556c1470ca13de2ec4b0c6" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;projects/&lt;/code&gt; folder, the &lt;code&gt;my-lib&lt;/code&gt; folder contains your library code.</source>
          <target state="translated">在 &lt;code&gt;projects/&lt;/code&gt; 文件夹下， &lt;code&gt;my-lib&lt;/code&gt; 文件夹包含您的库代码。</target>
        </trans-unit>
        <trans-unit id="4b9ec3e5288ad1a146764809c08b172bb0ce4e69" translate="yes" xml:space="preserve">
          <source>Underlying strategy used by the NgElement to create/destroy the component and react to input changes.</source>
          <target state="translated">NgElement用来创建/销毁组件并对输入变化做出反应的基本策略。</target>
        </trans-unit>
        <trans-unit id="afd606b1b8fa2ecceb75d550cab8b8e4f51e46bf" translate="yes" xml:space="preserve">
          <source>Understanding the idea of the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; demarcation is especially significant when you configure services in the component class.</source>
          <target state="translated">在组件类中配置服务时，理解 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 划分的思想特别重要。</target>
        </trans-unit>
        <trans-unit id="4f597440e2efa26501d9e6fdf63a407e19ac4158" translate="yes" xml:space="preserve">
          <source>Understanding the underlying logical structure of the Angular template will give you a foundation for configuring services and in turn control their visibility.</source>
          <target state="translated">了解Angular模板的底层逻辑结构,将为你配置服务并进而控制其可见性打下基础。</target>
        </trans-unit>
        <trans-unit id="824952b55c3b4916ed165e11642a01333e88585f" translate="yes" xml:space="preserve">
          <source>Understanding this component requires only the Angular concepts covered in previous pages.</source>
          <target state="translated">理解这个组件只需要前面几页中覆盖的Angular概念。</target>
        </trans-unit>
        <trans-unit id="b0c0452cb24336e8190f9828a028e109b51bace3" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;ngOnInit&lt;/code&gt; is only called once per component instantiation. You need a way to detect when the route parameters change from &lt;em&gt;within the same instance&lt;/em&gt;. The observable &lt;code&gt;paramMap&lt;/code&gt; property handles that beautifully.</source>
          <target state="translated">不幸的是，每个组件实例仅调用一次 &lt;code&gt;ngOnInit&lt;/code&gt; 。您需要一种方法来检测何时&lt;em&gt;在同一实例中&lt;/em&gt;更改路由参数。可观察的 &lt;code&gt;paramMap&lt;/code&gt; 属性可以很好地处理它。</target>
        </trans-unit>
        <trans-unit id="d3ef861886f3ab5ce3796bed96c86f8269cc8b32" translate="yes" xml:space="preserve">
          <source>Unfortunately, Angular cannot inject the &lt;code&gt;HeroService&lt;/code&gt; directly into the base class. You must provide the &lt;code&gt;HeroService&lt;/code&gt; again for &lt;em&gt;this&lt;/em&gt; component, then pass it down to the base class inside the constructor.</source>
          <target state="translated">不幸的是，Angular无法将 &lt;code&gt;HeroService&lt;/code&gt; 直接注入基类。您必须再次&lt;em&gt;为此&lt;/em&gt;组件提供 &lt;code&gt;HeroService&lt;/code&gt; ，然后将其传递给构造函数内部的基类。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1139beaeaa7d4f3a71b279c04ed1135ac0675787" translate="yes" xml:space="preserve">
          <source>Unfortunately, AngularJS dependencies are not automatically available to Angular components. You must upgrade this service via a &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;factory provider&lt;/a&gt; to make &lt;code&gt;$routeParams&lt;/code&gt; an Angular injectable. Do that in a new file called &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; and import it in &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">不幸的是，AngularJS依赖项不能自动用于Angular组件。您必须通过&lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;工厂提供商&lt;/a&gt;升级此服务，以使 &lt;code&gt;$routeParams&lt;/code&gt; 成为Angular可注射的。在名为 &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; 的新文件中执行此操作，然后将其导入 &lt;code&gt;app.module.ts&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="4e7ab2a4cdcc53a9daa1be69012bf4487cc99281" translate="yes" xml:space="preserve">
          <source>Unfortunately, it's easy to mistakenly create invalid JSON that way. The preferred way is to create a JSON partial file with the fragment you want to display.</source>
          <target state="translated">不幸的是,这种方式很容易错误地创建无效的JSON。首选的方法是用你要显示的片段创建一个JSON部分文件。</target>
        </trans-unit>
        <trans-unit id="0867a551d468c9cf54a4c9bf87311fc791c6fddc" translate="yes" xml:space="preserve">
          <source>Unfortunately, this doesn't work. The  confirms that the &lt;code&gt;alex&lt;/code&gt; parameter is null. &lt;em&gt;You cannot inject a parent by its base class.&lt;/em&gt;</source>
          <target state="translated">不幸的是，这行不通。确认 &lt;code&gt;alex&lt;/code&gt; 参数为null。&lt;em&gt;您不能通过其基类注入父对象。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a68c075bb4d2b8034dd50549a21ce7d7c5111785" translate="yes" xml:space="preserve">
          <source>Unhashed content</source>
          <target state="translated">未清洗的内容</target>
        </trans-unit>
        <trans-unit id="4fab6ba13e9a4725c7f55ea2ec290c22e51d62b3" translate="yes" xml:space="preserve">
          <source>Union type for all possible events on the response stream.</source>
          <target state="translated">响应流上所有可能事件的联合类型。</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes" xml:space="preserve">
          <source>Unit Tests</source>
          <target state="translated">单元测试</target>
        </trans-unit>
        <trans-unit id="db8942af8190970c5de3a92510cbcaccdbfc8120" translate="yes" xml:space="preserve">
          <source>Unit test file names</source>
          <target state="translated">单位测试文件名</target>
        </trans-unit>
        <trans-unit id="29d1c928f5bc2da434acc08d22662b06b1e6a793" translate="yes" xml:space="preserve">
          <source>Unit tests are located side-by-side with application code where they are easily found, as described in the rules for &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;Organizing Tests&lt;/a&gt;.</source>
          <target state="translated">单元测试与应用程序代码并排放置，可以轻松找到它们，如&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;组织测试&lt;/a&gt;规则中所述。</target>
        </trans-unit>
        <trans-unit id="d02603176f8822a40aaa5b4270e49934a7f83824" translate="yes" xml:space="preserve">
          <source>Universal</source>
          <target state="translated">Universal</target>
        </trans-unit>
        <trans-unit id="aff10513c0d4453b031e927d20f60a376e5f4fbf" translate="yes" xml:space="preserve">
          <source>Universal applications use the Angular &lt;code&gt;platform-server&lt;/code&gt; package (as opposed to &lt;code&gt;platform-browser&lt;/code&gt;), which provides server implementations of the DOM, &lt;code&gt;XMLHttpRequest&lt;/code&gt;, and other low-level features that don't rely on a browser.</source>
          <target state="translated">通用应用程序使用Angular &lt;code&gt;platform-server&lt;/code&gt; 程序包（与 &lt;code&gt;platform-browser&lt;/code&gt; 相反），该程序包提供DOM， &lt;code&gt;XMLHttpRequest&lt;/code&gt; 和其他不依赖浏览器的低级功能的服务器实现。</target>
        </trans-unit>
        <trans-unit id="1b3d6e5815238e0752a3fe0b7b98c0c2d1361792" translate="yes" xml:space="preserve">
          <source>Universal in action</source>
          <target state="translated">通用在行动</target>
        </trans-unit>
        <trans-unit id="dfa8fc69d23bd49ebc9a6555c9504f90cf88d7d1" translate="yes" xml:space="preserve">
          <source>Universal template engine</source>
          <target state="translated">通用模板引擎</target>
        </trans-unit>
        <trans-unit id="8a007210f1fae1f94e3d5f08f71db96b4634231f" translate="yes" xml:space="preserve">
          <source>Universal tutorial</source>
          <target state="translated">通用教程</target>
        </trans-unit>
        <trans-unit id="7128eb1919baae98fa34b937a937468e6cef52dd" translate="yes" xml:space="preserve">
          <source>Universal web servers</source>
          <target state="translated">通用网络服务器</target>
        </trans-unit>
        <trans-unit id="4c8eeb97df443eae9c961beeb83622d6ee4e82cc" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, all code snippets in this page are derived from sample source code located in the &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; directory.</source>
          <target state="translated">除非另有说明，否则此页面中的所有代码段均来自位于 &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; 目录中的示例源代码。</target>
        </trans-unit>
        <trans-unit id="c6cf3859698e15c5299392bec7dbb52c091995b6" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, patterns use a limited glob format:</source>
          <target state="translated">除非另有说明,否则模式使用有限的 glob 格式。</target>
        </trans-unit>
        <trans-unit id="997a0eb0ed95f2be66009dfc632a3a65cd86399d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not automatically run a &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$digest()&lt;/a&gt; when changes are detected in the Angular part of the application.</source>
          <target state="translated">与 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 不同，当在应用程序的Angular部分中检测到更改时， &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 不会自动运行&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$ digest（）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a2a526d27ea3191a1868165ff807c75c16ebcdfe" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not bootstrap the main AngularJS module inside the &lt;a href=&quot;../../core/ngzone&quot;&gt;Angular zone&lt;/a&gt;.</source>
          <target state="translated">与 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 不同， &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 不会在&lt;a href=&quot;../../core/ngzone&quot;&gt;Angular区域&lt;/a&gt;内引导主要的AngularJS模块。</target>
        </trans-unit>
        <trans-unit id="b662d56928e588ac496f4c10d2baf470830bd906" translate="yes" xml:space="preserve">
          <source>Unlike &lt;em&gt;Hero Detail&lt;/em&gt;, which updates as you type, &lt;em&gt;Crisis Detail&lt;/em&gt; changes are temporary until you either save or discard them by pressing the &quot;Save&quot; or &quot;Cancel&quot; buttons. Both buttons navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; and its list of crises.</source>
          <target state="translated">与&lt;em&gt;Hero Detail&lt;/em&gt;不同，后者随您键入而更新，&lt;em&gt;危机详细信息&lt;/em&gt;更改是暂时的，直到您通过按&amp;ldquo;保存&amp;rdquo;或&amp;ldquo;取消&amp;rdquo;按钮保存或丢弃它们。这两个按钮都导航回到&lt;em&gt;危机中心&lt;/em&gt;及其危机列表。</target>
        </trans-unit>
        <trans-unit id="17cc853061da6fd12dc97c043a57e14e493a031e" translate="yes" xml:space="preserve">
          <source>Unlike JavaScript modules, an NgModule can extend the &lt;em&gt;entire&lt;/em&gt; application with services by adding providers to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">与JavaScript模块不同，NgModule可以通过将提供程序添加到 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;列表中来扩展&lt;em&gt;整个&lt;/em&gt;应用程序的服务。</target>
        </trans-unit>
        <trans-unit id="c061fb170ebb3deb768717f260b104981728d5c0" translate="yes" xml:space="preserve">
          <source>Unlike JavaScript, which uses strict equality, Angular uses loose equality. This means that the empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt; matches 0.</source>
          <target state="translated">与使用严格相等的JavaScript不同，Angular使用宽松相等。这意味着空字符串 &lt;code&gt;&quot;&quot;&lt;/code&gt; 匹配0。</target>
        </trans-unit>
        <trans-unit id="d12281a35071e2f70968ecec4a88ccf48823d979" translate="yes" xml:space="preserve">
          <source>Unlike asset resources, data requests are not versioned along with the app. They're cached according to manually-configured policies that are more useful for situations such as API requests and other data dependencies.</source>
          <target state="translated">与资产资源不同的是,数据请求不会随着应用进行版本调整。它们会根据手动配置的策略进行缓存,这些策略对于API请求和其他数据依赖等情况更有用。</target>
        </trans-unit>
        <trans-unit id="883ea145ab160985399b62f775b21393220f3076" translate="yes" xml:space="preserve">
          <source>Unlike providers of the modules loaded at launch, providers of lazy-loaded modules are &lt;em&gt;module-scoped&lt;/em&gt;.</source>
          <target state="translated">与启动时加载的模块的提供程序不同，延迟加载的模块的提供程序具有&lt;em&gt;模块作用域&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b6f5e363e9f262e106ea06e2709ebaf828ae9100" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;safe navigation operator&lt;/em&gt;&lt;/a&gt;, the non-null assertion operator does not guard against &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Rather, it tells the TypeScript type checker to suspend strict &lt;code&gt;null&lt;/code&gt; checks for a specific property expression.</source>
          <target state="translated">与&lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;安全导航运算符&lt;/em&gt;&lt;/a&gt;不同，非null断言运算符不能防止 &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 。相反，它告诉TypeScript类型检查器针对特定的属性表达式暂停严格的 &lt;code&gt;null&lt;/code&gt; 检查。</target>
        </trans-unit>
        <trans-unit id="c84f1525536690954f99a413b23d680798dcaedf" translate="yes" xml:space="preserve">
          <source>Unlike the other scripts that make up an application, such as the Angular app bundle, the service worker is preserved after the user closes the tab. The next time that browser loads the application, the service worker loads first, and can intercept every request for resources to load the application. If the service worker is designed to do so, it can &lt;em&gt;completely satisfy the loading of the application, without the need for the network&lt;/em&gt;.</source>
          <target state="translated">与组成应用程序的其他脚本（例如Angular应用程序包）不同，在用户关闭选项卡后，将保留服务工作者。下次浏览器加载应用程序时，服务工作者将首先加载，并且可以拦截对资源的每个请求以加载应用程序。如果服务人员被设计为这样做，则可以&lt;em&gt;完全满足应用程序的负载，而无需网络&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5f33036664974b24cb26da8a2ab6ee9afad16fa6" translate="yes" xml:space="preserve">
          <source>Unregisters all applications</source>
          <target state="translated">解除对所有申请的登记</target>
        </trans-unit>
        <trans-unit id="6d32a4bafd30dfcac7a8a3c144996daff36ea02d" translate="yes" xml:space="preserve">
          <source>Unregisters an application.</source>
          <target state="translated">解除注册申请。</target>
        </trans-unit>
        <trans-unit id="5ffffa9c4a22117e6f52f99f5cc3c43782a3e756" translate="yes" xml:space="preserve">
          <source>Unstructured</source>
          <target state="translated">Unstructured</target>
        </trans-unit>
        <trans-unit id="834cc0ee6089e541b395509ba562516bcafa78e2" translate="yes" xml:space="preserve">
          <source>Unsubscribe</source>
          <target state="translated">Unsubscribe</target>
        </trans-unit>
        <trans-unit id="36f376c88cfb8d16619510a291258ce8d2da42da" translate="yes" xml:space="preserve">
          <source>Unsubscribe using &lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt; 退订。</target>
        </trans-unit>
        <trans-unit id="493dc8b26569cd76e59616c46a19c4d0c813beb4" translate="yes" xml:space="preserve">
          <source>Unsubscribes from Service Worker push notifications.</source>
          <target state="translated">退订服务工作者推送的通知。</target>
        </trans-unit>
        <trans-unit id="df1c180e11f697ae58851be0746d6030d8e54305" translate="yes" xml:space="preserve">
          <source>Unsupported enum member name</source>
          <target state="translated">不支持的枚举成员名称</target>
        </trans-unit>
        <trans-unit id="97a36dffa889515ec7097ac4311b95fa3f61bf7f" translate="yes" xml:space="preserve">
          <source>Until now, you've defined a single outlet and you've nested child routes under that outlet to group routes together. The router only supports one primary &lt;em&gt;unnamed&lt;/em&gt; outlet per template.</source>
          <target state="translated">到目前为止，您已经定义了一个出口，并且已在该出口下嵌套子路线以将路线分组在一起。路由器每个模板仅支持一个主要的&lt;em&gt;未命名&lt;/em&gt;插座。</target>
        </trans-unit>
        <trans-unit id="2de3bb02ea926f63aeba38c756a87b0a2edaeece" translate="yes" xml:space="preserve">
          <source>Unwraps a value from an asynchronous primitive.</source>
          <target state="translated">从异步基元中解包一个值。</target>
        </trans-unit>
        <trans-unit id="641990fee74114293b8c76ce49cb7bf399384326" translate="yes" xml:space="preserve">
          <source>Up pops a dialog box.</source>
          <target state="translated">上弹出一个对话框。</target>
        </trans-unit>
        <trans-unit id="ec67e6bd96103c22a842afec3ac1381cad313045" translate="yes" xml:space="preserve">
          <source>Up to this point, users can view product information, and simulate sharing and being notified about product changes. They cannot, however, buy products.</source>
          <target state="translated">至此,用户可以查看产品信息,并模拟分享和被通知产品变化。但是,他们不能购买产品。</target>
        </trans-unit>
        <trans-unit id="4ae15402fdbe9d9effa05f440fbe4ce47c9537f7" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">更新 &lt;code&gt;HeroesComponent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="496dd8be1173dfef1f30923f2f19597732b208d8" translate="yes" xml:space="preserve">
          <source>Update &lt;code&gt;app.component.html&lt;/code&gt; as follows:</source>
          <target state="translated">如下更新 &lt;code&gt;app.component.html&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e59d7b6b2ead1f0fc0b11cee3e56f5210aeccca4" translate="yes" xml:space="preserve">
          <source>Update checks</source>
          <target state="translated">更新检查</target>
        </trans-unit>
        <trans-unit id="4e81a8a01dd6e963822eee8752358d7afb76a325" translate="yes" xml:space="preserve">
          <source>Update command reference: &lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; command reference&lt;/a&gt;</source>
          <target state="translated">更新命令参考：&lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; 命令参考&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0de3f679ddfbe2c120a92aa34594bc38a0c19fc6" translate="yes" xml:space="preserve">
          <source>Update heroes</source>
          <target state="translated">更新英雄</target>
        </trans-unit>
        <trans-unit id="a4cb9fff8da5beaccbad71dfaf4739db28f45a5b" translate="yes" xml:space="preserve">
          <source>Update instructions: &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;</source>
          <target state="translated">更新说明：&lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular更新指南&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aee936d4df69b41b6d8369cb77cf1b581c5a9c3f" translate="yes" xml:space="preserve">
          <source>Update it with the following:</source>
          <target state="translated">更新内容如下:</target>
        </trans-unit>
        <trans-unit id="aae9bb284e5cbcbfe30098c360fd2e5dac2b8f1d" translate="yes" xml:space="preserve">
          <source>Update schematics</source>
          <target state="translated">更新示意图</target>
        </trans-unit>
        <trans-unit id="55262abadc993a08fb22cf285edc08f25cb1c76b" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of &lt;code&gt;index.html&lt;/code&gt; to include this style sheet:</source>
          <target state="translated">更新 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 的 &lt;code&gt;index.html&lt;/code&gt; 的以包括该样式表：</target>
        </trans-unit>
        <trans-unit id="44edb4f17ea3eb3c127f01bb6cec6f3cf223b788" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive to assign each index in the &lt;code&gt;products&lt;/code&gt; array to the &lt;code&gt;productId&lt;/code&gt; variable when iterating over the list.</source>
          <target state="translated">更新 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 指令，以在遍历列表时将 &lt;code&gt;products&lt;/code&gt; 数组中的每个索引分配给 &lt;code&gt;productId&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="047acd556996d14676e31a2016d5e00031fb3843" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;AuthGuard&lt;/code&gt; to provide a &lt;code&gt;session_id&lt;/code&gt; query that will remain after navigating to another route.</source>
          <target state="translated">更新 &lt;code&gt;AuthGuard&lt;/code&gt; 以提供一个 &lt;code&gt;session_id&lt;/code&gt; 查询，该查询在导航到另一条路由后将保留。</target>
        </trans-unit>
        <trans-unit id="c7af99452e024679731c58a6ce980e61e0f9ce31" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;AuthService&lt;/code&gt; to log in the user:</source>
          <target state="translated">更新 &lt;code&gt;AuthService&lt;/code&gt; 以登录用户：</target>
        </trans-unit>
        <trans-unit id="17df82461b1d4af3eea1a7f235dffc7a24516cb6" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;HeroService&lt;/code&gt;&lt;code&gt;getHero()&lt;/code&gt; method with the following to make that request:</source>
          <target state="translated">使用以下命令更新 &lt;code&gt;HeroService&lt;/code&gt; &lt;code&gt;getHero()&lt;/code&gt; 方法以发出该请求：</target>
        </trans-unit>
        <trans-unit id="456c568fc10b9b5af7828b3954b0630e145d6ff2" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;HeroesComponent&lt;/code&gt; template</source>
          <target state="translated">更新 &lt;code&gt;HeroesComponent&lt;/code&gt; 模板</target>
        </trans-unit>
        <trans-unit id="2a0c322c3ec3335c98a6927316b6de2d83201e94" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; you renamed after copying it from &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; file. This time, you define &lt;strong&gt;child routes&lt;/strong&gt;&lt;em&gt;within&lt;/em&gt; the parent &lt;code&gt;crisis-center&lt;/code&gt; route.</source>
          <target state="translated">从 &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; 文件复制后，更新重命名的 &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; 。这次，您&lt;em&gt;在&lt;/em&gt;父级 &lt;code&gt;crisis-center&lt;/code&gt; 路线中定义了&lt;strong&gt;子&lt;/strong&gt;路线。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e584e483de80651422da868086dd08163863efd3" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;goToHeroes()&lt;/code&gt; method in the &lt;code&gt;hero-detail.component.ts&lt;/code&gt; to navigate back to &lt;code&gt;/superheroes&lt;/code&gt; with the optional route parameters.</source>
          <target state="translated">更新 &lt;code&gt;hero-detail.component.ts&lt;/code&gt; 中的 &lt;code&gt;goToHeroes()&lt;/code&gt; 方法，以使用可选的route参数导航回 &lt;code&gt;/superheroes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ceea5cd899b3e0cb4af6ee69dfa6e2a472df15b" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;gotoCrises&lt;/code&gt; method of the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; list using relative path navigation.</source>
          <target state="translated">更新 &lt;code&gt;gotoCrises&lt;/code&gt; 的方法 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 导航回到了&lt;em&gt;危机处理中心&lt;/em&gt;使用相对路径导航列表。</target>
        </trans-unit>
        <trans-unit id="63d15e6be1057ef3573d05c93044f0abe7f5d7f0" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;protractor-conf.js&lt;/code&gt; to sync with hybrid apps:</source>
          <target state="translated">更新 &lt;code&gt;protractor-conf.js&lt;/code&gt; 以与混合应用程序同步：</target>
        </trans-unit>
        <trans-unit id="ba1c01ce8fe91885115c745dda6dea1b1dee4654" translate="yes" xml:space="preserve">
          <source>Update the binding in the template to announce the hero's name and show both &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; in a details layout like this:</source>
          <target state="translated">更新模板中的绑定，以宣布英雄的姓名，并在详细信息布局中同时显示 &lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;name&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="b73f126c77cbaf03da82c5d00d55430a2ec78f0a" translate="yes" xml:space="preserve">
          <source>Update the component template to look like this:</source>
          <target state="translated">将组件模板更新为如下样子。</target>
        </trans-unit>
        <trans-unit id="e8c7ee399df1289188c98c11849990a2f1ac0ced" translate="yes" xml:space="preserve">
          <source>Update the model for a particular control with a new value.</source>
          <target state="translated">用新的值更新特定控件的模型。</target>
        </trans-unit>
        <trans-unit id="559847cfe7989a011f1f7f236cc63d7c5ef1d512" translate="yes" xml:space="preserve">
          <source>Update the product details page to include a &quot;Buy&quot; button, which adds the current product to a list of products managed by a cart service.</source>
          <target state="translated">更新产品详情页,加入 &quot;购买 &quot;按钮,将当前产品添加到由购物车服务管理的产品列表中。</target>
        </trans-unit>
        <trans-unit id="fc029d79ce7b99ec3a2fca2086322426387609a6" translate="yes" xml:space="preserve">
          <source>Update the product details template to have a &quot;Buy&quot; button that adds the current product to the cart.</source>
          <target state="translated">更新产品详情模板,有一个 &quot;购买 &quot;按钮,将当前产品添加到购物车中。</target>
        </trans-unit>
        <trans-unit id="ce24781651687073ccf0577b48abbd217ac36903" translate="yes" xml:space="preserve">
          <source>Update the relative path import to the &lt;code&gt;message.service&lt;/code&gt; in the &lt;code&gt;hero.service.ts&lt;/code&gt; file.</source>
          <target state="translated">更新相对路径导入到 &lt;code&gt;message.service&lt;/code&gt; 在 &lt;code&gt;hero.service.ts&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="203f53a020bfd878e423fc52de5b3578a006bfb8" translate="yes" xml:space="preserve">
          <source>Update the route configuration to lazy load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;. Take the same steps you used to configure &lt;code&gt;AdminModule&lt;/code&gt; for lazy load.</source>
          <target state="translated">更新路由配置以延迟加载 &lt;code&gt;CrisisCenterModule&lt;/code&gt; 。采取与配置 &lt;code&gt;AdminModule&lt;/code&gt; 进行延迟加载相同的步骤。</target>
        </trans-unit>
        <trans-unit id="cca7fe187a76a321d42e7e1ba7f157b20dbd5a77" translate="yes" xml:space="preserve">
          <source>Update the shipping component's template to display the shipping types and prices using async pipe:</source>
          <target state="translated">更新发货组件的模板,使用异步管显示发货类型和价格。</target>
        </trans-unit>
        <trans-unit id="a357da0cfc27c86f48e17bd313f4e3eece1eed72" translate="yes" xml:space="preserve">
          <source>Update the template file with the following contents:</source>
          <target state="translated">更新模板文件,内容如下。</target>
        </trans-unit>
        <trans-unit id="2a9f24f9facab2d3032dfc55184857c8d51349c7" translate="yes" xml:space="preserve">
          <source>Update the template to display product details information inside an &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">更新模板以在 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 中显示产品详细信息。</target>
        </trans-unit>
        <trans-unit id="2f41d9ccaa5ca6464fe9e26dcf2fef17ab479d12" translate="yes" xml:space="preserve">
          <source>Update the template to display the strategy service's &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">更新模板以显示策略服务的 &lt;code&gt;preloadedModules&lt;/code&gt; 数组。</target>
        </trans-unit>
        <trans-unit id="dfba97897cc40bb55207339966a6db50b171b279" translate="yes" xml:space="preserve">
          <source>Update the template with a &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt;. The binding adds the &lt;code&gt;selected&lt;/code&gt; CSS class when the comparison returns &lt;code&gt;true&lt;/code&gt; and removes it when &lt;code&gt;false&lt;/code&gt;. Look for it within the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag as shown here:</source>
          <target state="translated">使用&lt;a href=&quot;template-syntax#class-binding&quot;&gt;类绑定&lt;/a&gt;更新模板。当比较返回 &lt;code&gt;true&lt;/code&gt; 时，绑定将添加 &lt;code&gt;selected&lt;/code&gt; CSS类，而当 &lt;code&gt;false&lt;/code&gt; 返回时，绑定将其删除。在重复的 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 标记中查找它，如下所示：</target>
        </trans-unit>
        <trans-unit id="d296ccbde468f094eb509d5d21a2641f2f39d02b" translate="yes" xml:space="preserve">
          <source>Update the template with a button to simulate a name update. When you click the &lt;strong&gt;Update Name&lt;/strong&gt; button, the value entered in the form control element is reflected as its current value.</source>
          <target state="translated">用一个按钮更新模板以模拟名称更新。当您单击&amp;ldquo; &lt;strong&gt;更新名称&amp;rdquo;&lt;/strong&gt;按钮时，在表单控件元素中输入的值将反映为其当前值。</target>
        </trans-unit>
        <trans-unit id="70bf9b016dd5abd476b3536c1c64aba3fbec12cf" translate="yes" xml:space="preserve">
          <source>Update the template with a header (&quot;Cart&quot;), and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display each of the cart items with its name and price.</source>
          <target state="translated">使用标题（&amp;ldquo;购物车&amp;rdquo;）更新模板，并使用带有 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 来显示每个购物车商品及其名称和价格。</target>
        </trans-unit>
        <trans-unit id="9e70ce970e12f27c3c0169130c0f1fea106c9fc1" translate="yes" xml:space="preserve">
          <source>Update the template with a welcome message to the &lt;code&gt;Crisis Center&lt;/code&gt;.</source>
          <target state="translated">通过向 &lt;code&gt;Crisis Center&lt;/code&gt; 发送欢迎消息来更新模板。</target>
        </trans-unit>
        <trans-unit id="5ce647b93fb03bcc71424f45986c72ce1d07ff28" translate="yes" xml:space="preserve">
          <source>UpdateActivatedEvent</source>
          <target state="translated">UpdateActivatedEvent</target>
        </trans-unit>
        <trans-unit id="fd2207341d757f6ad0dc82194a9f23e501154bfa" translate="yes" xml:space="preserve">
          <source>UpdateAvailableEvent</source>
          <target state="translated">UpdateAvailableEvent</target>
        </trans-unit>
        <trans-unit id="30827e80f2dab0755e1aab3fdcd5f8e852c80f1e" translate="yes" xml:space="preserve">
          <source>Updates happen in the background, relatively quickly after changes are published. The previous version of the application is served until an update is installed and ready.</source>
          <target state="translated">更新发生在后台,在更改发布后相对较快。在安装和准备好更新之前,以前版本的应用程序会被服务。</target>
        </trans-unit>
        <trans-unit id="0b4d2f63f515bde39286e6b3ccfa79609ea6eeda" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;index.html&lt;/code&gt; file:</source>
          <target state="translated">更新 &lt;code&gt;index.html&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="b23869ff3d3ab319301b5274bca98483d206fab5" translate="yes" xml:space="preserve">
          <source>Updates the stored data of the query list, and resets the &lt;code&gt;dirty&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;, so that on change detection, it will not notify of changes to the queries, unless a new change occurs.</source>
          <target state="translated">更新查询列表的存储数据，并将 &lt;code&gt;dirty&lt;/code&gt; 标志重置为 &lt;code&gt;false&lt;/code&gt; ，以便在检测到更改时，除非发生新更改，否则不会通知查询更改。</target>
        </trans-unit>
        <trans-unit id="53d4b930a68894d016ef42936f1cf3d3913d5484" translate="yes" xml:space="preserve">
          <source>Updates your application and its dependencies. See &lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/&lt;/a&gt;</source>
          <target state="translated">更新您的应用程序及其依赖项。参见&lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4c5646c8307bd85d09df30c3b3db3a0d18ae2f19" translate="yes" xml:space="preserve">
          <source>Updating headers</source>
          <target state="translated">更新标题</target>
        </trans-unit>
        <trans-unit id="3bfbada4728f2e043b7771479883f3fc79ae26f5" translate="yes" xml:space="preserve">
          <source>Updating libraries</source>
          <target state="translated">更新图书馆</target>
        </trans-unit>
        <trans-unit id="ea82e134fbd8a260e992aef7287a5680172c618b" translate="yes" xml:space="preserve">
          <source>Updating to version 8 with &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; changes this automatically.</source>
          <target state="translated">使用&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;更新到版本8 会自动更改。</target>
        </trans-unit>
        <trans-unit id="2fe4aa4b0674fef349deee21474a9e07ec8e067d" translate="yes" xml:space="preserve">
          <source>Updating your application in the browser</source>
          <target state="translated">在浏览器中更新您的应用程序</target>
        </trans-unit>
        <trans-unit id="fdcac3e04bfcd5fd48d4d42aa4876e07971bf792" translate="yes" xml:space="preserve">
          <source>Updating your environment and apps</source>
          <target state="translated">更新您的环境和应用程序</target>
        </trans-unit>
        <trans-unit id="a4cf3923e47fcb8de57d182bf42a0b41fb5e9032" translate="yes" xml:space="preserve">
          <source>Upgrade the AngularJS components to Angular components next. Do it one component at a time while still keeping the application in hybrid mode. As you make these conversions, you'll also define your first Angular &lt;em&gt;pipes&lt;/em&gt;.</source>
          <target state="translated">接下来将AngularJS组件升级到Angular组件。一次只做一个组件，同时仍将应用程序保持在混合模式下。在进行这些转换时，还将定义您的第一个Angular &lt;em&gt;管道&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="24f30a918c96ec7f78d6de2229e4e45721a78e8d" translate="yes" xml:space="preserve">
          <source>UpgradeAdapter</source>
          <target state="translated">UpgradeAdapter</target>
        </trans-unit>
        <trans-unit id="349a24b81f2702737e72ac44c56d5eea5df09232" translate="yes" xml:space="preserve">
          <source>UpgradeAdapterRef</source>
          <target state="translated">UpgradeAdapterRef</target>
        </trans-unit>
        <trans-unit id="3472325c45449a53cfbeda85e9dc64ed999c053e" translate="yes" xml:space="preserve">
          <source>UpgradeComponent</source>
          <target state="translated">UpgradeComponent</target>
        </trans-unit>
        <trans-unit id="f957777c36883bb04b88b1a75eabd9d4e87143f7" translate="yes" xml:space="preserve">
          <source>UpgradeModule</source>
          <target state="translated">UpgradeModule</target>
        </trans-unit>
        <trans-unit id="dc294e605816722937474ceca1ecd6db86bccf84" translate="yes" xml:space="preserve">
          <source>Upgraded components are Angular &lt;strong&gt;directives&lt;/strong&gt;, instead of &lt;strong&gt;components&lt;/strong&gt;, because Angular is unaware that AngularJS will create elements under it. As far as Angular knows, the upgraded component is just a directive - a tag - and Angular doesn't have to concern itself with its children.</source>
          <target state="translated">升级后的组件是Angular &lt;strong&gt;指令&lt;/strong&gt;，而不是&lt;strong&gt;组件&lt;/strong&gt;，因为Angular不知道AngularJS将在其下创建元素。据Angular所知，升级后的组件只是一个指令-一个标记-且Angular不必将其自身与子代相关。</target>
        </trans-unit>
        <trans-unit id="4bcf3358a1532605c1d102caf461fe6695881d98" translate="yes" xml:space="preserve">
          <source>Upgrading Components</source>
          <target state="translated">升级组件</target>
        </trans-unit>
        <trans-unit id="3de37c097e347898a6c3fcca7012b78cb95fe583" translate="yes" xml:space="preserve">
          <source>Upgrading an AngularJS service</source>
          <target state="translated">升级AngularJS服务</target>
        </trans-unit>
        <trans-unit id="8ad98e9741d8e1a96c0b693a2a2c1e769fe850a8" translate="yes" xml:space="preserve">
          <source>Upgrading for Performance</source>
          <target state="translated">性能升级</target>
        </trans-unit>
        <trans-unit id="f49e3b37a91d97499c2632816643696c225e6f8f" translate="yes" xml:space="preserve">
          <source>Upgrading from AngularJS to Angular</source>
          <target state="translated">从AngularJS升级到Angular。</target>
        </trans-unit>
        <trans-unit id="a5a3a352431f58bbbf100b500b3c0596ab226f27" translate="yes" xml:space="preserve">
          <source>Upgrading the Phone service</source>
          <target state="translated">升级电话服务</target>
        </trans-unit>
        <trans-unit id="be955d520b7fdc0e2bf8afcda324203e51725d6d" translate="yes" xml:space="preserve">
          <source>Upgrading with &lt;code&gt;ngUpgrade&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngUpgrade&lt;/code&gt; 升级</target>
        </trans-unit>
        <trans-unit id="f8522315486f45748eda6e72566dff17c151bd49" translate="yes" xml:space="preserve">
          <source>Upgrading with ngUpgrade</source>
          <target state="translated">使用 ngUpgrade 升级</target>
        </trans-unit>
        <trans-unit id="233e49b5606ac48bdee62d2e7bac7f481dc3f94b" translate="yes" xml:space="preserve">
          <source>UpperCamelCase (or PascalCase): Class names, including classes that define components, interfaces, NgModules, directives, and pipes, Upper camel case uses uppercase on the first letter of the item. For example, &quot;HeroListComponent&quot;.</source>
          <target state="translated">UpperCamelCase(或PascalCase)。类名,包括定义组件、接口、NgModules、指令和管道的类,Upper camel case在项目的第一个字母上使用大写。例如,&quot;HeroListComponent&quot;。</target>
        </trans-unit>
        <trans-unit id="155c412fcd3971aa03fafff2bacb8bb9adc5883c" translate="yes" xml:space="preserve">
          <source>UpperCasePipe</source>
          <target state="translated">UpperCasePipe</target>
        </trans-unit>
        <trans-unit id="71dd69965f2486999c211c68072c41db5ae84baf" translate="yes" xml:space="preserve">
          <source>UrlCodec</source>
          <target state="translated">UrlCodec</target>
        </trans-unit>
        <trans-unit id="68948d1dadddf95bc54d96cecbf392ae48e8d326" translate="yes" xml:space="preserve">
          <source>UrlHandlingStrategy</source>
          <target state="translated">UrlHandlingStrategy</target>
        </trans-unit>
        <trans-unit id="16cc40206f5a097848430a6c434c805355e9962a" translate="yes" xml:space="preserve">
          <source>UrlMatchResult</source>
          <target state="translated">UrlMatchResult</target>
        </trans-unit>
        <trans-unit id="b4a9ef4257a8681d0b8b798a42c3019be0c1e3e7" translate="yes" xml:space="preserve">
          <source>UrlMatcher</source>
          <target state="translated">UrlMatcher</target>
        </trans-unit>
        <trans-unit id="cb582a3934e09bbb5eff19851f7f334c90041133" translate="yes" xml:space="preserve">
          <source>UrlSegment</source>
          <target state="translated">UrlSegment</target>
        </trans-unit>
        <trans-unit id="5c83abe9807fc6933e00e92449e0482f3644b9ae" translate="yes" xml:space="preserve">
          <source>UrlSegmentGroup</source>
          <target state="translated">UrlSegmentGroup</target>
        </trans-unit>
        <trans-unit id="d13f52dbbad2d8b754750f29699588763707bcf7" translate="yes" xml:space="preserve">
          <source>UrlSerializer</source>
          <target state="translated">UrlSerializer</target>
        </trans-unit>
        <trans-unit id="8f00a7f728d114764c445a5f40b5c821396502ce" translate="yes" xml:space="preserve">
          <source>UrlTree</source>
          <target state="translated">UrlTree</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
