<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="vue">
    <body>
      <group id="vue">
        <trans-unit id="23ca9a44a1ade4d87027ae10b8309bece2e74a54" translate="yes" xml:space="preserve">
          <source>Prop Types</source>
          <target state="translated">道具类型</target>
        </trans-unit>
        <trans-unit id="0d718a828e84189a6c1ea77a0099a78e06d7d7c9" translate="yes" xml:space="preserve">
          <source>Prop Validation</source>
          <target state="translated">道具验证</target>
        </trans-unit>
        <trans-unit id="3ad34219a208945c8ea06d8eb918df83f7e61456" translate="yes" xml:space="preserve">
          <source>Prop definitions</source>
          <target state="translated">道具定义</target>
        </trans-unit>
        <trans-unit id="e2f4b4fdf875186ea4cf16dbb812dbea30216d87" translate="yes" xml:space="preserve">
          <source>Prop definitions &lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">道具定义&lt;sup&gt;必不可少&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="895e352dc19c97709d5567c55fe72b1a6d482c35" translate="yes" xml:space="preserve">
          <source>Prop name casing</source>
          <target state="translated">道具名称外壳</target>
        </trans-unit>
        <trans-unit id="b90f11ae0da8cbfe0b2f736a16886c055d6bffd1" translate="yes" xml:space="preserve">
          <source>Prop name casing &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;道具名称框&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="82be74efa4de665a8e8ec81e11e5ea121f0b4d70" translate="yes" xml:space="preserve">
          <source>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier: &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js (opens new window)&lt;/a&gt;. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</source>
          <target state="translated">正确配置生产就绪的服务器渲染的应用程序的所有讨论方面可能是一项艰巨的任务。幸运的是，有一个出色的社区项目旨在使所有这些事情变得更加容易：&lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js（在新窗口中打开）&lt;/a&gt;。Nuxt.js是在Vue生态系统之上构建的高级框架，该框架为编写通用Vue应用程序提供了极其精简的开发经验。更好的是，您甚至可以将其用作静态站点生成器（页面被编写为单文件Vue组件）！我们强烈建议您尝试一下。</target>
        </trans-unit>
        <trans-unit id="66e61e4c98d3b3a635091c842dada04fef1b9143" translate="yes" xml:space="preserve">
          <source>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier: &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js&lt;/a&gt;. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</source>
          <target state="translated">正确配置生产就绪的服务器渲染的应用程序的所有讨论方面可能是一项艰巨的任务。幸运的是，有一个出色的社区项目旨在使所有这些变得更容易：&lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js&lt;/a&gt;。Nuxt.js是基于Vue生态系统构建的高级框架，该框架为编写通用Vue应用程序提供了极其简化的开发体验。更好的是，您甚至可以将其用作静态站点生成器（页面被编写为单文件Vue组件）！我们强烈建议您尝试一下。</target>
        </trans-unit>
        <trans-unit id="c52664eafd27797858aafa4ef697afc052f2630a" translate="yes" xml:space="preserve">
          <source>Properly declare the &lt;code&gt;click&lt;/code&gt; event. This is useful if you actually do add some logic to that event handler in &lt;code&gt;&amp;lt;my-button&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">正确声明 &lt;code&gt;click&lt;/code&gt; 事件。如果您确实确实在 &lt;code&gt;&amp;lt;my-button&amp;gt;&lt;/code&gt; 中向该事件处理程序添加了一些逻辑，则这很有用。</target>
        </trans-unit>
        <trans-unit id="fc7c765b5dbb95f7134159f12c7f78946b944760" translate="yes" xml:space="preserve">
          <source>Properly trigger lifecycle hooks of a component</source>
          <target state="translated">正确触发组件的生命周期钩子。</target>
        </trans-unit>
        <trans-unit id="4a44822711c8e6d75a4d3fab2496758800219aa1" translate="yes" xml:space="preserve">
          <source>Properties such as &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;backface-visibility&lt;/code&gt;, and &lt;code&gt;transform: translateZ(x)&lt;/code&gt; will allow the browser to know you need hardware acceleration.</source>
          <target state="translated">诸如 &lt;code&gt;perspective&lt;/code&gt; ， &lt;code&gt;backface-visibility&lt;/code&gt; 和 &lt;code&gt;transform: translateZ(x)&lt;/code&gt; 属性将使浏览器知道您需要硬件加速。</target>
        </trans-unit>
        <trans-unit id="e9f3056a7ba256cf707e7dce02bf806a8e3e1baf" translate="yes" xml:space="preserve">
          <source>Properties that start with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be proxied on the Vue instance because they may conflict with Vue&amp;rsquo;s internal properties and API methods. You will have to access them as &lt;code&gt;vm.$data._property&lt;/code&gt;.</source>
          <target state="translated">与启动性能 &lt;code&gt;_&lt;/code&gt; 或 &lt;code&gt;$&lt;/code&gt; 将&lt;strong&gt;不会&lt;/strong&gt;在Vue公司的实例来代理，因为它们可能与Vue公司的内部属性和API方法相冲突。您将必须以 &lt;code&gt;vm.$data._property&lt;/code&gt; 身份访问它们。</target>
        </trans-unit>
        <trans-unit id="c6e8b3b6254e2521a11f38b602547d6e9a9380ef" translate="yes" xml:space="preserve">
          <source>Properties that start with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be proxied on the component instance because they may conflict with Vue's internal properties and API methods. You will have to access them as &lt;code&gt;vm.$data._property&lt;/code&gt;.</source>
          <target state="translated">以 &lt;code&gt;_&lt;/code&gt; 或 &lt;code&gt;$&lt;/code&gt; 开头的属性将&lt;strong&gt;不会&lt;/strong&gt;在组件实例上代理，因为它们可能与Vue的内部属性和API方法冲突。您将必须以 &lt;code&gt;vm.$data._property&lt;/code&gt; 对其进行访问。</target>
        </trans-unit>
        <trans-unit id="e5561bc237fb41709bb2e8b651d704c1664ae03e" translate="yes" xml:space="preserve">
          <source>Props</source>
          <target state="translated">Props</target>
        </trans-unit>
        <trans-unit id="6508a6990e288051c3e6b9a1eeb6a04702cf1534" translate="yes" xml:space="preserve">
          <source>Props &lt;code&gt;default&lt;/code&gt; factory function no longer has access to &lt;code&gt;this&lt;/code&gt; context</source>
          <target state="translated">道具 &lt;code&gt;default&lt;/code&gt; 工厂功能不再有权访问 &lt;code&gt;this&lt;/code&gt; 上下文</target>
        </trans-unit>
        <trans-unit id="478c6d22a97baabea14191c1e30af01de0590a32" translate="yes" xml:space="preserve">
          <source>Props Default Function &lt;code&gt;this&lt;/code&gt; Access</source>
          <target state="translated">道具默认功能 &lt;code&gt;this&lt;/code&gt; 访问</target>
        </trans-unit>
        <trans-unit id="b180f9b6b88669128fadb97a91987ec2cc6021f7" translate="yes" xml:space="preserve">
          <source>Props are custom attributes you can register on a component. To pass a title to our blog post component, we can include it in the list of props this component accepts, using the &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="translated">道具是可以在组件上注册的自定义属性。要将标题传递给我们的博客文章组件，我们可以使用 &lt;code&gt;props&lt;/code&gt; 选项将其包括在该组件接受的道具列表中：</target>
        </trans-unit>
        <trans-unit id="824b655ece5f935a9f95c151296cb1d2ff2e73ec" translate="yes" xml:space="preserve">
          <source>Props are custom attributes you can register on a component. When a value is passed to a prop attribute, it becomes a property on that component instance. To pass a title to our blog post component, we can include it in the list of props this component accepts, using a &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="translated">道具是可以在组件上注册的自定义属性。将值传递给prop属性时，它将成为该组件实例的属性。要将标题传递给博客文章组件，我们可以使用 &lt;code&gt;props&lt;/code&gt; 选项将其包括在该组件接受的道具列表中：</target>
        </trans-unit>
        <trans-unit id="02635ba77eef9661786c01a78d90b7501db1be4e" translate="yes" xml:space="preserve">
          <source>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</source>
          <target state="translated">道具现在总是单向下降。要在父作用域中产生副作用,组件需要显式地发出一个事件,而不是依赖隐式绑定。更多信息,请参见。</target>
        </trans-unit>
        <trans-unit id="5ef3fef3591faff86d0a182fab0eda375ddb585e" translate="yes" xml:space="preserve">
          <source>Props default value factory functions no longer have access to &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">道具默认值工厂函数不再可以访问 &lt;code&gt;this&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="f6122d047108de3e0837cf3e23276a8775fc2406" translate="yes" xml:space="preserve">
          <source>Props on a Root Instance &lt;sup&gt;replaced&lt;/sup&gt;</source>
          <target state="translated">根实例上的道具已&lt;sup&gt;替换&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b63145bed8f14aebee6afa6cafb70780de96e649" translate="yes" xml:space="preserve">
          <source>Provide / Inject</source>
          <target state="translated">提供/注射</target>
        </trans-unit>
        <trans-unit id="f908dc5bfdb182a1120e04c6bbe22936396bbf2a" translate="yes" xml:space="preserve">
          <source>Provide / inject</source>
          <target state="translated">提供/注射</target>
        </trans-unit>
        <trans-unit id="b0327f1b9226a10a024191a4fd7230f8acec9765" translate="yes" xml:space="preserve">
          <source>Provide a less than 10 minute overview of the problems the project solves and why it exists.</source>
          <target state="translated">对项目解决的问题和存在的原因进行10分钟以内的概述。</target>
        </trans-unit>
        <trans-unit id="2de6fa5a1d366e72d0573c37d52e10f902d9460a" translate="yes" xml:space="preserve">
          <source>Provide a less than 30 minute overview of the problems the project solves and how, including when and why to use the project and some simple code examples. At the end, link to both to Installation page and the beginning of the Essentials Guide.</source>
          <target state="translated">提供一个不到30分钟的概述,介绍该项目解决的问题以及如何解决,包括何时和为何使用该项目以及一些简单的代码示例。最后,链接到安装页面和《要点指南》的开头。</target>
        </trans-unit>
        <trans-unit id="877adb56a197e1259015de3210d87c2e790b7975" translate="yes" xml:space="preserve">
          <source>Provide an alternative render output when the default &lt;code&gt;render&lt;/code&gt; function encounters an error. The error will be passed to &lt;code&gt;renderError&lt;/code&gt; as the second argument. This is particularly useful when used together with hot-reload.</source>
          <target state="translated">当默认 &lt;code&gt;render&lt;/code&gt; 功能遇到错误时，提供备用渲染输出。该错误将作为第二个参数传递给 &lt;code&gt;renderError&lt;/code&gt; 。与热重装一起使用时，这特别有用。</target>
        </trans-unit>
        <trans-unit id="6992f8211f2fa9a21f565eeef4fe558491289052" translate="yes" xml:space="preserve">
          <source>Provide labels to describe the purpose of all form control; linking &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">提供标签以描述所有表单控件的目的；联 &lt;code&gt;for&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="02efa133aeef7a133aefd2f252af936a5cccad26" translate="yes" xml:space="preserve">
          <source>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</source>
          <target state="translated">为Vue实例提供一个现有的DOM元素来挂载。它可以是一个CSS选择器字符串或一个实际的HTMLElement。</target>
        </trans-unit>
        <trans-unit id="b02743d84e632fc634540d6899ffff73f4729b17" translate="yes" xml:space="preserve">
          <source>Providing values via the application is especially useful when writing plugins, as plugins typically wouldn't be able to provide values using components. It is an alternative to using &lt;a href=&quot;application-config#globalproperties&quot;&gt;globalProperties&lt;/a&gt;.</source>
          <target state="translated">在编写插件时，通过应用程序提供值特别有用，因为插件通常无法使用组件来提供值。它是使用&lt;a href=&quot;application-config#globalproperties&quot;&gt;globalProperties&lt;/a&gt;的替代方法。</target>
        </trans-unit>
        <trans-unit id="b372c2e3a6fe7f086dba4752c5409ca5a655c0b4" translate="yes" xml:space="preserve">
          <source>Proxied Objects</source>
          <target state="translated">代理对象</target>
        </trans-unit>
        <trans-unit id="7242c5f3def5245656aa4c9d4b105b7544b7290b" translate="yes" xml:space="preserve">
          <source>Proxy vs. original identity</source>
          <target state="translated">代理与原始身份</target>
        </trans-unit>
        <trans-unit id="8b962c5248e49ad5e80a98e9a17775f4f17e4645" translate="yes" xml:space="preserve">
          <source>Puppeteer</source>
          <target state="translated">Puppeteer</target>
        </trans-unit>
        <trans-unit id="deee5c477be9f881f24f0b87c812ed0c9a7ac549" translate="yes" xml:space="preserve">
          <source>Puppeteer is a Node library that provides a high-level API to control the browser and can pair with other test runners (e.g., Jest) to test your application.</source>
          <target state="translated">Puppeteer是一个Node库,它提供了一个高级的API来控制浏览器,并可以与其他测试运行器(如Jest)配对来测试你的应用程序。</target>
        </trans-unit>
        <trans-unit id="d12b0157326703f82d1c29065e90e1b3f21a4c0a" translate="yes" xml:space="preserve">
          <source>Puppeteer's Official Website (opens new window)</source>
          <target state="translated">傀儡廻的官方网站(打开新窗口</target>
        </trans-unit>
        <trans-unit id="dcf49ab626c30fff5ed5ee4dbe07721b4605c56b" translate="yes" xml:space="preserve">
          <source>Quasar Framework SSR + PWA</source>
          <target state="translated">Quasar Framework SSR+PWA</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Quickstart</target>
        </trans-unit>
        <trans-unit id="282e30765bd347047d1a351ac3b6f1cf18becd81" translate="yes" xml:space="preserve">
          <source>Quoted attribute values</source>
          <target state="translated">被引用的属性值</target>
        </trans-unit>
        <trans-unit id="683b9e103293a057ef4362aa5bc974a4f8bd8131" translate="yes" xml:space="preserve">
          <source>Quoted attribute values &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈推荐带&lt;/sup&gt;引号的属性值&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ed1e44a4093ca562205b72061c34f1507e70c015" translate="yes" xml:space="preserve">
          <source>RFC-0001</source>
          <target state="translated">RFC-0001</target>
        </trans-unit>
        <trans-unit id="02acfd4a596872e1f648c0fcb6b46c75913e05f6" translate="yes" xml:space="preserve">
          <source>RFCs (opens new window)</source>
          <target state="translated">RFCs(打开新窗口</target>
        </trans-unit>
        <trans-unit id="b11bf19e3f65b4a1ada383e41f26dab5c503940e" translate="yes" xml:space="preserve">
          <source>Radio</source>
          <target state="translated">Radio</target>
        </trans-unit>
        <trans-unit id="ebae26a0329293fc3cc08c6ef62218e1d25d11b4" translate="yes" xml:space="preserve">
          <source>Rather than managing this at the template level, one method for accomplishing this is to create a computed property that filters out a list for the visible elements.</source>
          <target state="translated">与其在模板级管理,不如创建一个计算属性,为可见元素过滤出一个列表。</target>
        </trans-unit>
        <trans-unit id="34ec2932146b9500b976f8c31af61191fd3c2eec" translate="yes" xml:space="preserve">
          <source>Rather than registering a component by name and then looking it up we can use it directly instead:</source>
          <target state="translated">我们可以直接使用它,而不是通过名称注册一个组件,然后再查找。</target>
        </trans-unit>
        <trans-unit id="76550ff95e4521edf8dc9e8329b78993dc047414" translate="yes" xml:space="preserve">
          <source>Raw HTML</source>
          <target state="translated">原始HTML</target>
        </trans-unit>
        <trans-unit id="47bd2393437d5a401cde293271a377d5f6e51f54" translate="yes" xml:space="preserve">
          <source>Raw props received by the component are passed to the default function as argument;</source>
          <target state="translated">组件接收到的原始道具会作为参数传递给默认函数。</target>
        </trans-unit>
        <trans-unit id="d73a647db12e3ccc42638c4c3cb137d447b6a643" translate="yes" xml:space="preserve">
          <source>Reaching this far in the documentation, you should already be familiar with both &lt;a href=&quot;../index&quot;&gt;the basics of Vue&lt;/a&gt; and &lt;a href=&quot;component-basics&quot;&gt;creating components&lt;/a&gt;.</source>
          <target state="translated">在文档中到此为止，您应该已经熟悉&lt;a href=&quot;../index&quot;&gt;Vue的基础知识&lt;/a&gt;和&lt;a href=&quot;component-basics&quot;&gt;创建components&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="b183e9aafa930f129da2c452cc641903b8199bea" translate="yes" xml:space="preserve">
          <source>React Native enables you to write native-rendered apps for iOS and Android using the same React component model. This is great in that as a developer, you can apply your knowledge of a framework across multiple platforms. On this front, Vue has an official collaboration with &lt;a href=&quot;https://weex.apache.org/&quot;&gt;Weex&lt;/a&gt;, a cross-platform UI framework created by Alibaba Group and being incubated by the Apache Software Foundation (ASF). Weex allows you to use the same Vue component syntax to author components that can not only be rendered in the browser, but also natively on iOS and Android!</source>
          <target state="translated">React Native使您可以使用相同的React组件模型编写适用于iOS和Android的本机渲染应用程序。这样做的好处是，作为开发人员，您可以在多个平台上应用框架知识。在这方面，Vue与&lt;a href=&quot;https://weex.apache.org/&quot;&gt;Weex&lt;/a&gt;正式合作，Weex是由阿里巴巴集团创建并由Apache软件基金会（ASF）孵化的跨平台UI框架。 Weex允许您使用相同的Vue组件语法来创作组件，这些组件不仅可以在浏览器中呈现，而且可以在iOS和Android上原生呈现！</target>
        </trans-unit>
        <trans-unit id="ee4366331847de86650378c9e4041dac06218df0" translate="yes" xml:space="preserve">
          <source>React and Vue share many similarities. They both:</source>
          <target state="translated">React和Vue有很多相似之处。它们都。</target>
        </trans-unit>
        <trans-unit id="bb65ef679dc307f628a20a0b729cd808d18c5ac0" translate="yes" xml:space="preserve">
          <source>React is renowned for its steep learning curve. Before you can really get started, you need to know about JSX and probably ES2015+, since many examples use React&amp;rsquo;s class syntax. You also have to learn about build systems, because although you could technically use Babel Standalone to live-compile your code in the browser, it&amp;rsquo;s absolutely not suitable for production.</source>
          <target state="translated">React以其陡峭的学习曲线而闻名。在真正开始之前，您需要了解JSX以及ES2015 +，因为许多示例都使用React的类语法。您还必须了解构建系统，因为尽管从技术上讲，您可以使用Babel Standalone在浏览器中实时编译代码，但它绝对不适合生产。</target>
        </trans-unit>
        <trans-unit id="bb1b40c27f9e4939cf3ff484fca2a9371f8d3b42" translate="yes" xml:space="preserve">
          <source>React-like libraries usually try to share as much of their API and ecosystem with React as is feasible. For that reason, the vast majority of comparisons above will also apply to them. The main difference will typically be a reduced ecosystem, often significantly, compared to React. Since these libraries cannot be 100% compatible with everything in the React ecosystem, some tooling and companion libraries may not be usable. Or, even if they appear to work, they could break at any time unless your specific React-like library is officially supported on par with React.</source>
          <target state="translated">类似React的库通常会尽量与React共享其API和生态系统,这是可行的。出于这个原因,上面的绝大多数比较也将适用于它们。主要的区别通常会是与React相比,生态系统减少了,通常是显著减少。由于这些库不可能100%兼容React生态系统中的一切,因此一些工具和配套库可能无法使用。或者说,即使它们看起来可以使用,也可能随时崩溃,除非你的特定React类库得到官方与React同等的支持。</target>
        </trans-unit>
        <trans-unit id="7f6efca662af5024b37ec029036bd44b873fd284" translate="yes" xml:space="preserve">
          <source>Reacting to Changes with &lt;code&gt;watch&lt;/code&gt;</source>
          <target state="translated">通过 &lt;code&gt;watch&lt;/code&gt; 应对变化</target>
        </trans-unit>
        <trans-unit id="88c3934c7588fa0cf20290b76db9e62f02488728" translate="yes" xml:space="preserve">
          <source>Reactive Variables with &lt;code&gt;ref&lt;/code&gt;</source>
          <target state="translated">带有 &lt;code&gt;ref&lt;/code&gt; 的反应变量</target>
        </trans-unit>
        <trans-unit id="96578d9c2e6eaee240051ff91e83f741cc87e93b" translate="yes" xml:space="preserve">
          <source>Reactivity</source>
          <target state="translated">Reactivity</target>
        </trans-unit>
        <trans-unit id="0255dc2eebe1f45060f7ea3bd844c29de6ec11e9" translate="yes" xml:space="preserve">
          <source>Reactivity API</source>
          <target state="translated">反应性API</target>
        </trans-unit>
        <trans-unit id="8868b3cb448a49c86420f63d7d34c218cbe3a7a5" translate="yes" xml:space="preserve">
          <source>Reactivity Fundamentals</source>
          <target state="translated">反应性基本原理</target>
        </trans-unit>
        <trans-unit id="38be1878e88addc141471e2ac5be059c49256537" translate="yes" xml:space="preserve">
          <source>Reactivity in Depth</source>
          <target state="translated">深度反应性</target>
        </trans-unit>
        <trans-unit id="6d1fd182318e548e15b14eaf006cea3dc7bd9bc2" translate="yes" xml:space="preserve">
          <source>Read documentation on skip link to main content (opens new window)</source>
          <target state="translated">阅读跳转链接到主要内容的文档(打开新窗口</target>
        </trans-unit>
        <trans-unit id="04f2a0af273d85671e8e6fb5fdb49a94d89d853c" translate="yes" xml:space="preserve">
          <source>Read more about custom &lt;code&gt;v-model&lt;/code&gt; modifiers in the &lt;a href=&quot;../component-custom-events#handling-v-model-modifiers&quot;&gt;Custom Events&lt;/a&gt; section.</source>
          <target state="translated">在&amp;ldquo;&lt;a href=&quot;../component-custom-events#handling-v-model-modifiers&quot;&gt;自定义事件&amp;rdquo;&lt;/a&gt;部分中了解有关自定义 &lt;code&gt;v-model&lt;/code&gt; 修改器的更多信息。</target>
        </trans-unit>
        <trans-unit id="8c9e72dbd1af8f88c6e3d5c21ca2354cbfb25b0a" translate="yes" xml:space="preserve">
          <source>Read more about headings (opens new window)</source>
          <target state="translated">阅读更多关于标题的信息(打开新窗口</target>
        </trans-unit>
        <trans-unit id="fdac038511ef524dc9d94117822d967758f5dc12" translate="yes" xml:space="preserve">
          <source>Read more about landmarks (opens new window)</source>
          <target state="translated">阅读更多关于地标的信息(打开新窗口</target>
        </trans-unit>
        <trans-unit id="446d7c237336d575135ddcd7063341761426b025" translate="yes" xml:space="preserve">
          <source>Ready for More?</source>
          <target state="translated">准备好接受更多的挑战了吗?</target>
        </trans-unit>
        <trans-unit id="d1d8e9482299003b859657b4d0f506d8911f1155" translate="yes" xml:space="preserve">
          <source>Ready start but aren&amp;rsquo;t sure where?</source>
          <target state="translated">准备开始，但不确定在哪里？</target>
        </trans-unit>
        <trans-unit id="40fe62216df511ee5c87bc8e026789c819f7b21e" translate="yes" xml:space="preserve">
          <source>Really though, any transition attribute can be dynamically bound. And it&amp;rsquo;s not only attributes. Since event hooks are methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</source>
          <target state="translated">实际上，任何过渡属性都可以动态绑定。这不仅是属性。由于事件挂钩是方法，因此它们可以访问上下文中的任何数据。这意味着，取决于组件的状态，您的JavaScript转换可能会表现不同。</target>
        </trans-unit>
        <trans-unit id="97bf4cd212ab527666d890c97c24bef2808a0a86" translate="yes" xml:space="preserve">
          <source>Really though, any transition attribute can be dynamically bound. And it's not only attributes. Since event hooks are methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</source>
          <target state="translated">不过说真的,任何过渡属性都可以动态绑定。而且不仅仅是属性。由于事件钩子是方法,它们可以访问上下文中的任何数据。这意味着根据你的组件的状态,你的JavaScript过渡可以有不同的表现。</target>
        </trans-unit>
        <trans-unit id="cdb5994a5662a9b7831e2e56b44ea27b6edb5bab" translate="yes" xml:space="preserve">
          <source>Recent versions of Angular, with &lt;a href=&quot;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&quot;&gt;AOT compilation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_shaking&quot;&gt;tree-shaking&lt;/a&gt;, have been able to get its size down considerably. However, a full-featured Vue 2 project with Vuex + Vue Router included (~30KB gzipped) is still significantly lighter than an out-of-the-box, AOT-compiled application generated by &lt;code&gt;angular-cli&lt;/code&gt; (~65KB gzipped).</source>
          <target state="translated">带有&lt;a href=&quot;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&quot;&gt;AOT编译&lt;/a&gt;和&lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_shaking&quot;&gt;摇树功能&lt;/a&gt;的Angular的最新版本已经能够大大减小其尺寸。但是，包含Vuex + Vue Router的功能齐全的Vue 2项目（约30KB压缩）仍然比 &lt;code&gt;angular-cli&lt;/code&gt; 生成的即用型 AOT编译应用程序（约65KB压缩）轻得多。</target>
        </trans-unit>
        <trans-unit id="4faa65b556f68207d69cb14bcae4acb71980a036" translate="yes" xml:space="preserve">
          <source>Recommendations</source>
          <target state="translated">Recommendations</target>
        </trans-unit>
        <trans-unit id="3f99a56b4630f2ac18091fad78531d1626d4dac4" translate="yes" xml:space="preserve">
          <source>Recommended Configuration</source>
          <target state="translated">推荐配置</target>
        </trans-unit>
        <trans-unit id="f9d18b779732cc0ea4b60f929feea8a7c40df5fc" translate="yes" xml:space="preserve">
          <source>Recreating dynamic components is normally useful behavior, but in this case, we&amp;rsquo;d really like those tab component instances to be cached once they&amp;rsquo;re created for the first time. To solve this problem, we can wrap our dynamic component with a &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">重新创建动态组件通常是有用的行为，但是在这种情况下，我们真的希望这些选项卡组件实例在首次创建后就被缓存。为了解决这个问题，我们可以用 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 元素包装动态组件：</target>
        </trans-unit>
        <trans-unit id="2ee8180617af736edef09b52eaf0d7ce5b820112" translate="yes" xml:space="preserve">
          <source>Recreating dynamic components is normally useful behavior, but in this case, we'd really like those tab component instances to be cached once they're created for the first time. To solve this problem, we can wrap our dynamic component with a &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">重新创建动态组件通常是有用的行为，但是在这种情况下，我们真的希望这些选项卡组件实例在首次创建后就被缓存。为了解决这个问题，我们可以用 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 元素包装动态组件：</target>
        </trans-unit>
        <trans-unit id="25c0556aa6352203342eea1a65c58a623378dbcc" translate="yes" xml:space="preserve">
          <source>Recursive Components</source>
          <target state="translated">递归组件</target>
        </trans-unit>
        <trans-unit id="b6f1fbd6cd87b63faf44c1d4ce1e7549855c4182" translate="yes" xml:space="preserve">
          <source>Ref Unwrapping</source>
          <target state="translated">参考拆包</target>
        </trans-unit>
        <trans-unit id="44aa874c75e630b4da6c22739e2f1970b1754b9f" translate="yes" xml:space="preserve">
          <source>Ref unwrapping only happens when nested inside a reactive &lt;code&gt;Object&lt;/code&gt;. There is no unwrapping performed when the ref is accessed from an &lt;code&gt;Array&lt;/code&gt; or a native collection type like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt; (opens new window)&lt;/a&gt;:</source>
          <target state="translated">引用解开仅在嵌套在反应 &lt;code&gt;Object&lt;/code&gt; 时发生。从 &lt;code&gt;Array&lt;/code&gt; 或本机集合类型（如&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; )（打开新窗口）&lt;/a&gt;访问引用时，不会执行解包：</target>
        </trans-unit>
        <trans-unit id="46819d95829c2f8ee915e7d271f512463387fc11" translate="yes" xml:space="preserve">
          <source>Refactoring becomes more difficult, because find-and-replace often isn&amp;rsquo;t sufficient to update relative references to a moved component.</source>
          <target state="translated">重构变得更加困难，因为查找和替换通常不足以更新对已移动组件的相对引用。</target>
        </trans-unit>
        <trans-unit id="a3a624d225f5eebe49dec1882d5a5928be291481" translate="yes" xml:space="preserve">
          <source>Refactoring becomes more difficult, because find-and-replace often isn't sufficient to update relative references to a moved component.</source>
          <target state="translated">重构变得更加困难,因为查找和替换往往不足以更新被移动组件的相对引用。</target>
        </trans-unit>
        <trans-unit id="f4234eefb475a2340f218d9e7a7e6c874a82a6fa" translate="yes" xml:space="preserve">
          <source>Refer to the respective build tool documentations to see how it&amp;rsquo;s done:</source>
          <target state="translated">请参阅各自的构建工具文档，以了解其完成方式：</target>
        </trans-unit>
        <trans-unit id="72586e891a8415c75d87e02355c4ee4e38787be4" translate="yes" xml:space="preserve">
          <source>Refer to the respective build tool documentations to see how it's done:</source>
          <target state="translated">请参考各自的构建工具文档,看看是怎么做的。</target>
        </trans-unit>
        <trans-unit id="701486a68f3896a8a5368aead277807a6847151f" translate="yes" xml:space="preserve">
          <source>Refs</source>
          <target state="translated">Refs</target>
        </trans-unit>
        <trans-unit id="590fa42d6db832cdb16cf663ef8aeae0d6fc0d96" translate="yes" xml:space="preserve">
          <source>Refs infer the type from the initial value:</source>
          <target state="translated">Refs从初始值推断类型。</target>
        </trans-unit>
        <trans-unit id="0c058170d5b06f199a4bd107ce1c6f47426001c1" translate="yes" xml:space="preserve">
          <source>Refs used as templates refs behave just like any other refs: they are reactive and can be passed into (or returned from) composition functions.</source>
          <target state="translated">作为模板使用的 refs 和其他 refs 一样:它们是反应式的,可以传递到(或从)合成函数中返回。</target>
        </trans-unit>
        <trans-unit id="8d8b1f50199fd6cb6ab6141f41a87fd8dae1f00d" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global component. Registration also automatically sets the component&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; with the given &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">注册或检索全局组件。注册还会自动使用给定的 &lt;code&gt;id&lt;/code&gt; 设置组件的 &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae08a16a9767a6ee26d4fd258299ff9ca85b8c5b" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global component. Registration also automatically sets the component's &lt;code&gt;name&lt;/code&gt; with the given &lt;code&gt;name&lt;/code&gt; parameter.</source>
          <target state="translated">注册或检索全局组件。注册还会使用给定的 &lt;code&gt;name&lt;/code&gt; 参数自动设置组件的 &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0168019975e7b996b73bc3be3562ac476872545c" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global directive.</source>
          <target state="translated">注册或检索一个全局指令。</target>
        </trans-unit>
        <trans-unit id="13bd6c258247a18188a7e24270fbc9f007d7c82d" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global filter.</source>
          <target state="translated">注册或检索一个全局过滤器。</target>
        </trans-unit>
        <trans-unit id="b522391a912c29a9f3956281e9c33d96ad9d9ff6" translate="yes" xml:space="preserve">
          <source>Registered Component</source>
          <target state="translated">注册组件</target>
        </trans-unit>
        <trans-unit id="76de89743a325c94ab024ae33f08812f80d685bb" translate="yes" xml:space="preserve">
          <source>Relation to Custom Elements</source>
          <target state="translated">与自定义元素的关系</target>
        </trans-unit>
        <trans-unit id="0ea4af908fe06688dd3fc02035189b08293c5074" translate="yes" xml:space="preserve">
          <source>Release Notes</source>
          <target state="translated">发行说明</target>
        </trans-unit>
        <trans-unit id="a565881a24b5131daa7950a76217674953041385" translate="yes" xml:space="preserve">
          <source>Relevant RFC (opens new window)</source>
          <target state="translated">相关RFC(打开新窗口</target>
        </trans-unit>
        <trans-unit id="d92abdf653f23351eb7a0ab4d23290ee1313902d" translate="yes" xml:space="preserve">
          <source>Remember that &lt;strong&gt;global registration must take place before the root Vue instance is created (with &lt;code&gt;new Vue&lt;/code&gt;)&lt;/strong&gt;. &lt;a href=&quot;https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js&quot;&gt;Here&amp;rsquo;s an example&lt;/a&gt; of this pattern in a real project context.</source>
          <target state="translated">请记住，&lt;strong&gt;全局注册必须在创建根Vue实例（使用 &lt;code&gt;new Vue&lt;/code&gt; ）之前进行&lt;/strong&gt;。&lt;a href=&quot;https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js&quot;&gt;这是&lt;/a&gt;在实际项目环境中这种模式的示例。</target>
        </trans-unit>
        <trans-unit id="cd81ea4c2f9620cb5e6384a73668d947f28ede04" translate="yes" xml:space="preserve">
          <source>Remember this list from a few paragraphs ago? Now we have some answers to how Vue handles these changes:</source>
          <target state="translated">还记得几段前的这份清单吗?现在我们对Vue如何处理这些变化有了一些答案。</target>
        </trans-unit>
        <trans-unit id="f430af4b132dcb0c8fc1a34ff17410de989f95d6" translate="yes" xml:space="preserve">
          <source>Remove all usages of &lt;code&gt;$listeners&lt;/code&gt;.</source>
          <target state="translated">删除 &lt;code&gt;$listeners&lt;/code&gt; 所有用法。</target>
        </trans-unit>
        <trans-unit id="73942b04c7d6e9cc0cafd922223a9eab5438c235" translate="yes" xml:space="preserve">
          <source>Remove custom event listener(s).</source>
          <target state="translated">移除自定义事件监听器。</target>
        </trans-unit>
        <trans-unit id="2e13ea874c4557e9a8719b905fba053f64ebe429" translate="yes" xml:space="preserve">
          <source>Remove the re-emitting of the event, since the parent can now listen for the native event easily, without adding &lt;code&gt;.native&lt;/code&gt;. Suitable when you really only re-emit the event anyway.</source>
          <target state="translated">删除事件的重发，因为父级现在可以轻松监听本机事件，而无需添加 &lt;code&gt;.native&lt;/code&gt; 。当您真的只重新发射该事件时，此方法适用。</target>
        </trans-unit>
        <trans-unit id="cab54fe624f00c44dfb29ea434660cb21fa96c33" translate="yes" xml:space="preserve">
          <source>Removed APIs</source>
          <target state="translated">删除的API</target>
        </trans-unit>
        <trans-unit id="25c548f4a7b9b6ef1cfbffbca926739476b1c4e2" translate="yes" xml:space="preserve">
          <source>Removed due to hooks simplification. If you really must suppress transition errors, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt;&lt;code&gt;try&lt;/code&gt;&amp;hellip;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">由于简化了挂钩，因此已删除。如果确实必须抑制转换错误，则可以使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt; &lt;code&gt;try&lt;/code&gt; &amp;hellip; &lt;code&gt;catch&lt;/code&gt; &lt;/a&gt;代替。</target>
        </trans-unit>
        <trans-unit id="e7f3ed71f5d7421b91e0c25cc42984adb65b4fdd" translate="yes" xml:space="preserve">
          <source>Renamed to &lt;code&gt;base&lt;/code&gt; for consistency with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;the HTML &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element&lt;/a&gt;.</source>
          <target state="translated">重命名为 &lt;code&gt;base&lt;/code&gt; 以与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;HTML &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 元素&lt;/a&gt;保持一致。</target>
        </trans-unit>
        <trans-unit id="a8df655d1a0ac39c181aa88283e5d1c026113194" translate="yes" xml:space="preserve">
          <source>Render Function</source>
          <target state="translated">渲染功能</target>
        </trans-unit>
        <trans-unit id="74c236956538812497d07532ffea369ba11a6567" translate="yes" xml:space="preserve">
          <source>Render Function API</source>
          <target state="translated">渲染功能API</target>
        </trans-unit>
        <trans-unit id="b49e816b12aac18b3afdb19d7bd4fb9da7452c10" translate="yes" xml:space="preserve">
          <source>Render Function Argument</source>
          <target state="translated">渲染函数参数</target>
        </trans-unit>
        <trans-unit id="ace19ca906649466d2c7dd3fe462bc3acd5f3a5a" translate="yes" xml:space="preserve">
          <source>Render Function Signature Change</source>
          <target state="translated">渲染功能签名变更</target>
        </trans-unit>
        <trans-unit id="5215655670fe9017f515c66cb3c3e4b0b10ec4d9" translate="yes" xml:space="preserve">
          <source>Render Functions</source>
          <target state="translated">渲染功能</target>
        </trans-unit>
        <trans-unit id="3aa893c2a6ebe75166762d5109366b728fa5dc54" translate="yes" xml:space="preserve">
          <source>Render Functions &amp;amp; JSX</source>
          <target state="translated">渲染功能和JSX</target>
        </trans-unit>
        <trans-unit id="f54e5429aec68f05a2b3b43a85ee9662c29159d7" translate="yes" xml:space="preserve">
          <source>Render Functions - Slots</source>
          <target state="translated">渲染功能-插槽</target>
        </trans-unit>
        <trans-unit id="addbe4e257768d49a2a92ed6eda801285bbfd8e2" translate="yes" xml:space="preserve">
          <source>Render Scope</source>
          <target state="translated">渲染范围</target>
        </trans-unit>
        <trans-unit id="9329d00b9b7be0b20e4bded9ef83426d44382a7b" translate="yes" xml:space="preserve">
          <source>Render function API changed</source>
          <target state="translated">渲染函数API变更</target>
        </trans-unit>
        <trans-unit id="aeac0239d7806a13c73e4eacbb8e89032112b08f" translate="yes" xml:space="preserve">
          <source>Render functions with JSX have a few advantages:</source>
          <target state="translated">使用JSX的渲染功能有一些优势。</target>
        </trans-unit>
        <trans-unit id="c0f479c7d13498bbd2aa42eae8f88242964120b5" translate="yes" xml:space="preserve">
          <source>Render the element and component &lt;strong&gt;once&lt;/strong&gt; only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</source>
          <target state="translated">仅渲染&lt;strong&gt;一次&lt;/strong&gt;元素和组件。在后续重新渲染时，元素/组件及其所有子元素将被视为静态内容并被跳过。这可以用来优化更新性能。</target>
        </trans-unit>
        <trans-unit id="1c510f643528b3292df74bbcf70195487418102f" translate="yes" xml:space="preserve">
          <source>Render the element or template block multiple times based on the source data. The directive&amp;rsquo;s value must use the special syntax &lt;code&gt;alias in expression&lt;/code&gt; to provide an alias for the current element being iterated on:</source>
          <target state="translated">根据源数据多次渲染元素或模板块。指令的值必须 &lt;code&gt;alias in expression&lt;/code&gt; 使用特殊的语法别名，以为正在迭代的当前元素提供别名：</target>
        </trans-unit>
        <trans-unit id="bd1a649d465f8e1a62e796c52535aae0d48a8876" translate="yes" xml:space="preserve">
          <source>Render the element or template block multiple times based on the source data. The directive's value must use the special syntax &lt;code&gt;alias in expression&lt;/code&gt; to provide an alias for the current element being iterated on:</source>
          <target state="translated">根据源数据多次渲染元素或模板块。指令的值必须 &lt;code&gt;alias in expression&lt;/code&gt; 使用特殊的语法别名，以便为要在其上进行迭代的当前元素提供别名：</target>
        </trans-unit>
        <trans-unit id="e740de4597c7445ebb94518bd33a4bcfca642e2a" translate="yes" xml:space="preserve">
          <source>Rendering Mechanisms and Optimizations</source>
          <target state="translated">渲染机制和优化</target>
        </trans-unit>
        <trans-unit id="9647e21c53c63f65c167aa12298837e080c17cb0" translate="yes" xml:space="preserve">
          <source>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains &lt;strong&gt;a lot&lt;/strong&gt; of static content. In these cases, you can ensure that it&amp;rsquo;s only evaluated once and then cached by adding the &lt;code&gt;v-once&lt;/code&gt; directive to the root element, like this:</source>
          <target state="translated">在Vue中，呈现纯HTML元素的速度非常快，但是有时您可能会拥有一个包含&lt;strong&gt;大量&lt;/strong&gt;静态内容的组件。在这些情况下，可以通过将 &lt;code&gt;v-once&lt;/code&gt; 指令添加到根元素来确保仅对它进行一次评估，然后对其进行缓存，如下所示：</target>
        </trans-unit>
        <trans-unit id="0a857c99cf4b0ae7acc195147b4b766abe24c957" translate="yes" xml:space="preserve">
          <source>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains &lt;strong&gt;a lot&lt;/strong&gt; of static content. In these cases, you can ensure that it's only evaluated once and then cached by adding the &lt;code&gt;v-once&lt;/code&gt; directive to the root element, like this:</source>
          <target state="translated">在Vue中，呈现纯HTML元素的速度非常快，但是有时您可能会拥有一个包含&lt;strong&gt;大量&lt;/strong&gt;静态内容的组件。在这些情况下，可以通过将 &lt;code&gt;v-once&lt;/code&gt; 指令添加到根元素来确保仅对它进行一次评估，然后对其进行缓存，如下所示：</target>
        </trans-unit>
        <trans-unit id="2d13414c61e1307782300fa26f96b2fe0a987373" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;config.ignoredElements&lt;/code&gt; with either &lt;code&gt;vue-loader&lt;/code&gt;'s &lt;code&gt;compilerOptions&lt;/code&gt; (with the build step) or &lt;code&gt;app.config.isCustomElement&lt;/code&gt; (with on-the-fly template compilation)</source>
          <target state="translated">更换 &lt;code&gt;config.ignoredElements&lt;/code&gt; 有两种 &lt;code&gt;vue-loader&lt;/code&gt; 的 &lt;code&gt;compilerOptions&lt;/code&gt; （与构建步骤）或 &lt;code&gt;app.config.isCustomElement&lt;/code&gt; （与即时模板编译）</target>
        </trans-unit>
        <trans-unit id="80141b0813cd433b013d865aac12e9525f55fc79" translate="yes" xml:space="preserve">
          <source>Replace all &lt;code&gt;this.$scopedSlots&lt;/code&gt; occurrences with &lt;code&gt;this.$slots&lt;/code&gt; in 3.x.</source>
          <target state="translated">用3.x中的 &lt;code&gt;this.$slots&lt;/code&gt; 替换所有 &lt;code&gt;this.$scopedSlots&lt;/code&gt; 出现。</target>
        </trans-unit>
        <trans-unit id="35ea8a0ec694cc57a9a233de984b2992f0beefc8" translate="yes" xml:space="preserve">
          <source>Replace all occurrences of &lt;code&gt;this.$slots.mySlot&lt;/code&gt; with &lt;code&gt;this.$slots.mySlot()&lt;/code&gt;</source>
          <target state="translated">用 &lt;code&gt;this.$slots.mySlot()&lt;/code&gt; 替换所有出现的 &lt;code&gt;this.$slots.mySlot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b7b28f839424e787b9612d095bc2c496584af3b" translate="yes" xml:space="preserve">
          <source>Replace instances of &lt;code&gt;.v-enter&lt;/code&gt; to &lt;code&gt;.v-enter-from&lt;/code&gt;</source>
          <target state="translated">将 &lt;code&gt;.v-enter&lt;/code&gt; 的实例替换为 &lt;code&gt;.v-enter-from&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf6931130e2c697e1198659bd51fa4df0b1dc5bf" translate="yes" xml:space="preserve">
          <source>Replace instances of &lt;code&gt;.v-leave&lt;/code&gt; to &lt;code&gt;.v-leave-from&lt;/code&gt;</source>
          <target state="translated">将 &lt;code&gt;.v-leave&lt;/code&gt; 的实例替换为 &lt;code&gt;.v-leave-from&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="009126448723157c7cb1cf897352b418cf9b13c3" translate="yes" xml:space="preserve">
          <source>Replace instances of related prop names, as above.</source>
          <target state="translated">替换相关道具名称的实例,同上。</target>
        </trans-unit>
        <trans-unit id="9a09ee1cf84326d5d5b1fbbb8dcaca046fb652f2" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;vm.$data&lt;/code&gt;&lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">替换 &lt;code&gt;vm.$data&lt;/code&gt; &lt;sup&gt;已删除&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6336d2b4c545bfdb0a2c2e6130a2fe522bc117ed" translate="yes" xml:space="preserve">
          <source>Replacing Template Features with Plain JavaScript</source>
          <target state="translated">用普通的JavaScript替换模板功能。</target>
        </trans-unit>
        <trans-unit id="3694e119ff9868c46a5da68ac50107adb0cd0254" translate="yes" xml:space="preserve">
          <source>Replacing an Array</source>
          <target state="translated">替换一个阵列</target>
        </trans-unit>
        <trans-unit id="448ceec811e5cd1612b41b145f75a74425a6d60a" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;capitalize&lt;/code&gt; Filter</source>
          <target state="translated">更换大 &lt;code&gt;capitalize&lt;/code&gt; 滤器</target>
        </trans-unit>
        <trans-unit id="8ebc9242fd66a164fb0466c94c267b085022f523" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;currency&lt;/code&gt; Filter</source>
          <target state="translated">更换 &lt;code&gt;currency&lt;/code&gt; 过滤器</target>
        </trans-unit>
        <trans-unit id="6e8e54f171683ed43699d784bb3a20daa786f68a" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;debounce&lt;/code&gt; Filter</source>
          <target state="translated">更换 &lt;code&gt;debounce&lt;/code&gt; 过滤器</target>
        </trans-unit>
        <trans-unit id="bc05ccbf460e1bee1b220a363cd9b366122fc62c" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;filterBy&lt;/code&gt; Filter</source>
          <target state="translated">更换 &lt;code&gt;filterBy&lt;/code&gt; 过滤器</target>
        </trans-unit>
        <trans-unit id="5aadbac5cc6d5572fbf9f02300727b922b52477f" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;json&lt;/code&gt; Filter</source>
          <target state="translated">更换 &lt;code&gt;json&lt;/code&gt; 过滤器</target>
        </trans-unit>
        <trans-unit id="5af22200afbbae6350485e71f8a0930a62620a3b" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;limitBy&lt;/code&gt; Filter</source>
          <target state="translated">通过过滤器替换 &lt;code&gt;limitBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63239b2dfa73a07907b85e48d0e4e3d07aa51efd" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;lowercase&lt;/code&gt; Filter</source>
          <target state="translated">更换小 &lt;code&gt;lowercase&lt;/code&gt; 滤器</target>
        </trans-unit>
        <trans-unit id="307535ec9952915e10873762b9b0a59ea99d17d1" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;orderBy&lt;/code&gt; Filter</source>
          <target state="translated">更换 &lt;code&gt;orderBy&lt;/code&gt; 过滤器</target>
        </trans-unit>
        <trans-unit id="5a0b57fe75978a4fde52508fa6b11e6a9fcbade8" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;pluralize&lt;/code&gt; Filter</source>
          <target state="translated">更换 &lt;code&gt;pluralize&lt;/code&gt; 过滤器</target>
        </trans-unit>
        <trans-unit id="5895ba028c303252e37b6295f10778b7ca351267" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;uppercase&lt;/code&gt; Filter</source>
          <target state="translated">更换大 &lt;code&gt;uppercase&lt;/code&gt; 滤器</target>
        </trans-unit>
        <trans-unit id="c183ebe6cda4d505c2e49d3160c8367d36be5b90" translate="yes" xml:space="preserve">
          <source>Replacing/Merging with Existing Attributes</source>
          <target state="translated">替换/合并现有的属性。</target>
        </trans-unit>
        <trans-unit id="e6ca57202c6e8dc869b883168359dd09117a9904" translate="yes" xml:space="preserve">
          <source>Repo</source>
          <target state="translated">Repo</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="ae84d73d0597806bc7d0adbdc690a6542782495e" translate="yes" xml:space="preserve">
          <source>Returning both the list and the function so they are accessible by other component options</source>
          <target state="translated">返回列表和函数,以便其他组件选项可以访问它们。</target>
        </trans-unit>
        <trans-unit id="f4a8e54ae12ccca05bb893a32d4a3f7046d7b142" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; when not found.</source>
          <target state="translated">返回 &lt;code&gt;Component&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 时未定义。</target>
        </trans-unit>
        <trans-unit id="47a7db15788311291fa8f5bf09eb2c27ce7d30eb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Directive&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; when not found.</source>
          <target state="translated">返回 &lt;code&gt;Directive&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; 指令。</target>
        </trans-unit>
        <trans-unit id="fad51a002d72fc20ecfb02f7a23ee64136443339" translate="yes" xml:space="preserve">
          <source>Returns a reactive copy of the object.</source>
          <target state="translated">返回对象的一个反应式副本。</target>
        </trans-unit>
        <trans-unit id="f961cb226fc5286bf0338f8127c9739d4d786e8f" translate="yes" xml:space="preserve">
          <source>Returns a returns &quot;virtual node&quot;, usually abbreviated to &lt;strong&gt;VNode&lt;/strong&gt;: a plain object which contains information describing to Vue what kind of node it should render on the page, including descriptions of any child nodes. It is intended for manually written &lt;a href=&quot;../guide/render-function&quot;&gt;render functions&lt;/a&gt;:</source>
          <target state="translated">返回一个返回的&amp;ldquo;虚拟节点&amp;rdquo;，通常缩写为&lt;strong&gt;VNode&lt;/strong&gt;：一个普通对象，其中包含向Vue描述应在页面上呈现的节点类型的信息，包括所有子节点的描述。它用于手动编写的&lt;a href=&quot;../guide/render-function&quot;&gt;渲染函数&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="89257adefb18c26832ef5553199ebda0a4701ee4" translate="yes" xml:space="preserve">
          <source>Returns an application instance which provides an application context. The entire component tree mounted by the application instance share the same context.</source>
          <target state="translated">返回一个提供应用上下文的应用实例。应用实例挂载的整个组件树共享同一个上下文。</target>
        </trans-unit>
        <trans-unit id="958894eaff54dca93f7c230586bf4e7aa2a2c600" translate="yes" xml:space="preserve">
          <source>Returns the inner value if the argument is a &lt;a href=&quot;#ref&quot;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt;, otherwise return the argument itself. This is a sugar function for &lt;code&gt;val = isRef(val) ? val.value : val&lt;/code&gt;.</source>
          <target state="translated">如果参数是&lt;a href=&quot;#ref&quot;&gt; &lt;code&gt;ref&lt;/code&gt; &lt;/a&gt;，则返回内部值；否则，返回参数本身。这是 &lt;code&gt;val = isRef(val) ? val.value : val&lt;/code&gt; 的糖函数？val.value：val。</target>
        </trans-unit>
        <trans-unit id="f990a1d837cdf3d578932fb103b30bb1d0c1e735" translate="yes" xml:space="preserve">
          <source>Returns the raw, original object of a &lt;a href=&quot;#reactive&quot;&gt;&lt;code&gt;reactive&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#readonly&quot;&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/a&gt; proxy. This is an escape hatch that can be used to temporarily read without incurring proxy access/tracking overhead or write without triggering changes. It is &lt;strong&gt;not&lt;/strong&gt; recommended to hold a persistent reference to the original object. Use with caution.</source>
          <target state="translated">返回&lt;a href=&quot;#reactive&quot;&gt; &lt;code&gt;reactive&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#readonly&quot;&gt; &lt;code&gt;readonly&lt;/code&gt; &lt;/a&gt;代理的原始原始对象。这是一个转义口，可用于临时读取而不会产生代理访问/跟踪开销，也可用于写入而不会触发更改。这是&lt;strong&gt;不&lt;/strong&gt;建议持有永久引用原始对象。请谨慎使用。</target>
        </trans-unit>
        <trans-unit id="06f300f539033a0a174d6567af6ef83f67f363d6" translate="yes" xml:space="preserve">
          <source>Returns the resolved &lt;code&gt;Component&lt;/code&gt; or a newly created &lt;code&gt;VNode&lt;/code&gt; with the component name as the node tag. Will raise a warning if the &lt;code&gt;Component&lt;/code&gt; was not found.</source>
          <target state="translated">返回已解析的 &lt;code&gt;Component&lt;/code&gt; 或以该组件名称作为节点标签的新创建的 &lt;code&gt;VNode&lt;/code&gt; 。如果未找到 &lt;code&gt;Component&lt;/code&gt; ，将发出警告。</target>
        </trans-unit>
        <trans-unit id="4d8a054873446a82f9d9b672554fd977c4dc9233" translate="yes" xml:space="preserve">
          <source>Reusability is limited: we cannot pass any parameters to the mixin to change its logic which reduces their flexibility in terms of abstracting logic</source>
          <target state="translated">可重用性是有限的:我们不能将任何参数传递给 mixin 来改变它的逻辑,这降低了它们在抽象逻辑方面的灵活性。</target>
        </trans-unit>
        <trans-unit id="1f5b54bbca313ab53947ed8a4f97b16e01f729d9" translate="yes" xml:space="preserve">
          <source>Reusable Transitions</source>
          <target state="translated">可重复使用的过渡</target>
        </trans-unit>
        <trans-unit id="a48bbafb258bfc790b66aec7d45e0a6a8fa1cd83" translate="yes" xml:space="preserve">
          <source>Reusing Components</source>
          <target state="translated">重复使用组件</target>
        </trans-unit>
        <trans-unit id="5596832d1f65947dd48007d834ec88a15c31ed4a" translate="yes" xml:space="preserve">
          <source>Rewrite references to the shared data to point to a new shared object</source>
          <target state="translated">将对共享数据的引用改写为指向一个新的共享对象。</target>
        </trans-unit>
        <trans-unit id="b836c4c63ed0b1bed339e82e9c78c2b817e6736c" translate="yes" xml:space="preserve">
          <source>Riot</source>
          <target state="translated">Riot</target>
        </trans-unit>
        <trans-unit id="6e85617241bed85b4dcd2ae064b3025078b134e9" translate="yes" xml:space="preserve">
          <source>Riot 3.0 provides a similar component-based development model (which is called a &amp;ldquo;tag&amp;rdquo; in Riot), with a minimal and beautifully designed API. Riot and Vue probably share a lot in design philosophies. However, despite being a bit heavier than Riot, Vue does offer some significant advantages:</source>
          <target state="translated">Riot 3.0提供了一个类似的基于组件的开发模型（在Riot中称为&amp;ldquo;标签&amp;rdquo;），具有最小化且设计精美的API。Riot和Vue在设计理念上可能有很多共同点。但是，尽管比Riot重一点，但Vue确实提供了一些重要的优势：</target>
        </trans-unit>
        <trans-unit id="49a199623e9b76b5c5dc35c517989d2f685d6fd1" translate="yes" xml:space="preserve">
          <source>Robust (opens new window)</source>
          <target state="translated">稳健(打开新窗口</target>
        </trans-unit>
        <trans-unit id="cee656e4e4fb4012f85e12695536c23a5e0e62c3" translate="yes" xml:space="preserve">
          <source>Rollup</source>
          <target state="translated">Rollup</target>
        </trans-unit>
        <trans-unit id="8e4ecad6a05d926091d335638bbc9859c1de1f8b" translate="yes" xml:space="preserve">
          <source>Rollup + rollup-plugin-vue</source>
          <target state="translated">滾動+滾動-plugin-vue。</target>
        </trans-unit>
        <trans-unit id="f6bad8b29e9b70cef765c2b65b7d3b5376681a63" translate="yes" xml:space="preserve">
          <source>Rollup + rollup-plugin-vue (opens new window)</source>
          <target state="translated">滚动+滚动-插件-vue (打开新窗口)</target>
        </trans-unit>
        <trans-unit id="42ec7ccbef29d0422b242b5178f06191bc8484d0" translate="yes" xml:space="preserve">
          <source>Route Definitions</source>
          <target state="translated">航线定义</target>
        </trans-unit>
        <trans-unit id="6e3b967c60ba49b0f518c43998cb2dc91dd2134c" translate="yes" xml:space="preserve">
          <source>Route Hooks</source>
          <target state="translated">路线钩</target>
        </trans-unit>
        <trans-unit id="2b73a7098cbf7da1b1613b48acc5eb7c6f35331c" translate="yes" xml:space="preserve">
          <source>Route Matching</source>
          <target state="translated">路线匹配</target>
        </trans-unit>
        <trans-unit id="18febd25894978ca61139fd68c461cb521819d89" translate="yes" xml:space="preserve">
          <source>Route Options: Misc</source>
          <target state="translated">路线选择。其他</target>
        </trans-unit>
        <trans-unit id="f0865cca790a39153b3f106f9c19244b4f157bd4" translate="yes" xml:space="preserve">
          <source>Route matching now uses &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; under the hood, making it much more flexible than previously.</source>
          <target state="translated">路由匹配现在&lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;在后台&lt;/a&gt;使用了路径到正则表达式，从而使其比以前更加灵活。</target>
        </trans-unit>
        <trans-unit id="32027b0a6491682801317490f82d9b553e764f1b" translate="yes" xml:space="preserve">
          <source>Router Initialization</source>
          <target state="translated">路由器初始化</target>
        </trans-unit>
        <trans-unit id="1b4778ead27c045154fa8a8032dcbf9b6b10e64f" translate="yes" xml:space="preserve">
          <source>Router Options: Modes</source>
          <target state="translated">路由器选项。模式</target>
        </trans-unit>
        <trans-unit id="9add2b84e8289fb0ea9dcb2637e5d5907ca4d748" translate="yes" xml:space="preserve">
          <source>Routes are now defined as an array on a &lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html#javascript&quot;&gt;&lt;code&gt;routes&lt;/code&gt; option&lt;/a&gt; at router instantiation. So these routes for example:</source>
          <target state="translated">现在，在路由器实例化时，将&lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html#javascript&quot;&gt; &lt;code&gt;routes&lt;/code&gt; &lt;/a&gt;定义为路由选项上的数组。因此，这些路线例如：</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="d670f1115ef0c3c29b2d47e241e7dd62eafb1e11" translate="yes" xml:space="preserve">
          <source>Rule Categories</source>
          <target state="translated">规则类别</target>
        </trans-unit>
        <trans-unit id="91ba54d8bd5025bb2cb3e7a4cd0c0785af90a756" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find &lt;code&gt;keep-alive&lt;/code&gt; attributes.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找 &lt;code&gt;keep-alive&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="6d2ac67778b450ed0b9659002961f8409d707930" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find CSS selectors targeting named slots (e.g. &lt;code&gt;[slot=&quot;my-slot-name&quot;]&lt;/code&gt;).</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助&lt;/a&gt;器，以找到针对命名插槽的CSS选择器（例如 &lt;code&gt;[slot=&quot;my-slot-name&quot;]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="fb8ef12ba88bdd9ea8d64f474b58bd5f002af15c" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find HTML interpolations.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;以查找HTML插值。</target>
        </trans-unit>
        <trans-unit id="e29967481758c6af408495a286989e2f4b3a4403" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find all examples of this hook.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到此挂钩的所有示例。</target>
        </trans-unit>
        <trans-unit id="131ad91eddecfe4bcd3aa1d2c3dae1e7c9a6d28b" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;$dispatch&lt;/code&gt; 和 &lt;code&gt;$broadcast&lt;/code&gt; 示例。</target>
        </trans-unit>
        <trans-unit id="b5547bdef16b43ebf6aa5572275c3effebf29215" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;.$remove&lt;/code&gt; on an array. If you miss any, you should see &lt;strong&gt;console errors&lt;/strong&gt; from the missing method.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以在数组上查找 &lt;code&gt;.$remove&lt;/code&gt; 示例。如果您错过了任何方法，则应该从缺少的方法中看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4d1a3ee9aa64afee960f48bf970646ff2ca1516a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;.$set&lt;/code&gt; on an array. If you miss any, you should see &lt;strong&gt;console errors&lt;/strong&gt; from the missing method.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以在数组上查找 &lt;code&gt;.$set&lt;/code&gt; 示例。如果您错过了任何方法，则应该从缺少的方法中看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f7cf2f519c21c26383d689b999383e7f48c8daeb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.async&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找 &lt;code&gt;Vue.config.async&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="adba4cc2d78c532c252af8489b44bb0c82a60071" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.debug&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;Vue.config.debug&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="842114654af7636636f5d0ca2790f492b054f6ff" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.delimiters&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;Vue.config.delimiters&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="56d3c94b1fca7d1fecbd0be685fc6a65bfb4e3ff" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.unsafeDelimiters&lt;/code&gt;. After this, the helper will also find instances of HTML interpolation so that you can replace them with `v-html`.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;Vue.config.unsafeDelimiters&lt;/code&gt; 的示例。此后，帮助程序还将找到HTML插值的实例，以便您可以将它们替换为&amp;ldquo; v-html&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="7abfe983d07d10f68fd1a923086c66cfb28e6a0a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.elementDirective&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;以查找 &lt;code&gt;Vue.elementDirective&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="0cbd833dba88270b867f404265f89cd61957dd9e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.partial&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找 &lt;code&gt;Vue.partial&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="2be876bb1c3f71e3306a218289a786bebe66e6ac" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.set&lt;/code&gt; or &lt;code&gt;Vue.delete&lt;/code&gt; on a Vue instance. If you miss any, they'll trigger &lt;strong&gt;console warnings&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以在Vue实例上查找 &lt;code&gt;Vue.set&lt;/code&gt; 或 &lt;code&gt;Vue.delete&lt;/code&gt; 的示例。如果您错过任何机会，它们都会触发&lt;strong&gt;控制台警告&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b9c98c79eef3d7a23f61df5ef62ac7e471ae74fb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.transition&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;以查找 &lt;code&gt;Vue.transition&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="3cd48bf0c847ee511a1c8d066fdfbdc6f4f6ffc4" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;replace: false&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;replace: false&lt;/code&gt; 示例。</target>
        </trans-unit>
        <trans-unit id="bc77c164d9ea83ca27d60242ad248d1e7b987f0e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.alias&lt;/code&gt; being called.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找被称为 &lt;code&gt;router.alias&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="7cf69302085bdd68f35cf86d99ec675583acea23" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.go&lt;/code&gt; being used where &lt;code&gt;router.push&lt;/code&gt; should be used instead.</source>
          <target state="translated">运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;在你的代码库找到的例子 &lt;code&gt;router.go&lt;/code&gt; 被用在 &lt;code&gt;router.push&lt;/code&gt; 应改为使用。</target>
        </trans-unit>
        <trans-unit id="e39b23f840933b639f0659fde34e12f635127e7f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.map&lt;/code&gt; being called.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找被称为 &lt;code&gt;router.map&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="b828dfd9e2d7bcae2364000145b56e764e6ebe03" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.on&lt;/code&gt; being called.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找被称为 &lt;code&gt;router.on&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="f9a6975194aa0ce1b5cad1c6626af7c35453fcd0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.redirect&lt;/code&gt; being called.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找被称为 &lt;code&gt;router.redirect&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="cc5f2a33706f0e2d3f4cdbd090a5e649c5b6ae0f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.start&lt;/code&gt; being called.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找名为 &lt;code&gt;router.start&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="f5f2fbe802e2c06eba8dee0a46275f8ee4460bc0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;store.on&lt;/code&gt;, &lt;code&gt;store.off&lt;/code&gt;, and &lt;code&gt;store.emit&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;store.on&lt;/code&gt; ， &lt;code&gt;store.off&lt;/code&gt; 和 &lt;code&gt;store.emit&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="00ad6c9fe856a5b4567b7a4dab60a0fe45a37f40" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;store.watch&lt;/code&gt; with a string as the first argument.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找以字符串为第一个参数的 &lt;code&gt;store.watch&lt;/code&gt; 示例。</target>
        </trans-unit>
        <trans-unit id="4f47a47355d74434a753364a679e2f4c9a402ae5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;track-by&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;track-by&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="da0f85cb5aa67bdac2ea466f36918db2fcd36b05" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;v-el&lt;/code&gt; and &lt;code&gt;v-ref&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;v-el&lt;/code&gt; 和 &lt;code&gt;v-ref&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="7aa5783c6df3a82bb69131d32c3850e7f84cfda7" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$after&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;vm.$after&lt;/code&gt; 示例。如果您错过了任何内容，则会看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="09e7d78d817c1fd2a45c3cf9b9c21a2069c4fd37" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$appendTo&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;vm.$appendTo&lt;/code&gt; 示例。如果您错过了任何内容，则会看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d7350cc4e203e91682eee37d60894b3e1314af48" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$before&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找 &lt;code&gt;vm.$before&lt;/code&gt; 示例。如果您错过了任何内容，则会看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c0c4f878eaed231fe0dbb2225df03cd65dc84e13" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$eval&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;vm.$eval&lt;/code&gt; 示例。如果您错过了任何内容，则会看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3f8e856f05355ed8982ce86f4336ff6eacabf3e2" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$get&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;vm.$get&lt;/code&gt; 示例。如果您错过了任何内容，则会看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="bd0dd654ce3404b139a97c6070c1ea80255ce0fd" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$interpolate&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;vm.$interpolate&lt;/code&gt; 示例。如果您错过了任何内容，则会看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="81bbbda8f1ba1322792aa46e4294439738bc392f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$log&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;vm.$log&lt;/code&gt; 示例。如果您错过了任何内容，则会看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="381f44de62059e317b1f31d7ce9b3541555d602b" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$remove&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找 &lt;code&gt;vm.$remove&lt;/code&gt; 示例。如果您错过了任何内容，则会看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b874a37ca4886af9d3b7780e6010cf89d9c7f988" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of arbitrary route properties not scoped under meta.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找不在meta范围内的任意路由属性的示例。</target>
        </trans-unit>
        <trans-unit id="1fa158cea69bdd4c40bd2a48988a099538d4dc5e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of defined directives. The helper will flag all of them, as it's likely in most cases that you'll want to refactor to a component.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找已定义指令的示例。该助手将标记所有这些对象，因为在大多数情况下，您可能希望将其重构为组件。</target>
        </trans-unit>
        <trans-unit id="979e6458f784d896c90752c57e560652f6c8525d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of filters being used inside directives. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找伪指令中使用的过滤器示例。如果您有任何遗漏，还应该看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="801a0e4488b5e174aaaa485bb9fbdd0fb7f5b389" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of filters used in directives like &lt;code&gt;v-model&lt;/code&gt;. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;v-model&lt;/code&gt; 等指令中使用的过滤器示例。如果您有任何遗漏，还应该看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="83b833ef69efe1e17f7ef29c061f04dea5876bad" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of interpolation used within attributes.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找属性内使用的插值示例。</target>
        </trans-unit>
        <trans-unit id="9bb76b174b8438ba3c0f4ba54b4026ce44dd98ca" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of overwriting &lt;code&gt;vm.$data&lt;/code&gt;. If you miss any, &lt;strong&gt;console warnings&lt;/strong&gt; will be emitted.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找覆盖 &lt;code&gt;vm.$data&lt;/code&gt; 示例。如果您错过任何机会，将发出&lt;strong&gt;控制台警告&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8dbff7c8c83dec265171807e5ec5ea40ea988ad1" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of style bindings with &lt;code&gt;!important&lt;/code&gt; in objects.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找对象中带有 &lt;code&gt;!important&lt;/code&gt; 的样式绑定示例。</target>
        </trans-unit>
        <trans-unit id="93ebbb2019ca1300c683d3ae1afb72a96650f915" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;$loadingRouteData&lt;/code&gt; meta property.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;$loadingRouteData&lt;/code&gt; 元属性的示例。</target>
        </trans-unit>
        <trans-unit id="52407d926e2b5716bf90f4cb35758896e87892ed" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;.once&lt;/code&gt; and &lt;code&gt;.sync&lt;/code&gt; modifiers.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;.once&lt;/code&gt; 和 &lt;code&gt;.sync&lt;/code&gt; 修饰符的示例。</target>
        </trans-unit>
        <trans-unit id="2c8ce2853d843c2c72201a428aaae4467ceec09d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;abstract: true&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;abstract: true&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="2258f58c39858d2874ac267df312bf5774d76c18" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;activate&lt;/code&gt; hook.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以找到 &lt;code&gt;activate&lt;/code&gt; 钩子的示例。</target>
        </trans-unit>
        <trans-unit id="0d2dd196d33a6838401706a980c174ba91eb1c6e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;cache: false&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;以查找 &lt;code&gt;cache: false&lt;/code&gt; 示例：false选项。</target>
        </trans-unit>
        <trans-unit id="635b9a1176068b8a0020a01c4f47cb421d064226" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canActivate&lt;/code&gt; hook.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;canActivate&lt;/code&gt; 挂钩的示例。</target>
        </trans-unit>
        <trans-unit id="1ef7f740384cd3cfdf159ef6085f2faaac1ec88f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canDeactivate&lt;/code&gt; hook.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;canDeactivate&lt;/code&gt; 挂钩的示例。</target>
        </trans-unit>
        <trans-unit id="416c87ed212eefdaa2ddbf02f6a0ba2e74d86959" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canReuse: false&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;canReuse: false&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="ce44d3b81054ffa59cb49fd62f006c1d791e2ab0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;coerce&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以找到 &lt;code&gt;coerce&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="61fdd38d446cfe928998b1181aa744e45596c1c5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;data&lt;/code&gt; hook.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;data&lt;/code&gt; 挂钩的示例。</target>
        </trans-unit>
        <trans-unit id="eeb9b18e06a447d16bfa196a854b2eb06f05360a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;deactivate&lt;/code&gt; hook.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;deactivate&lt;/code&gt; 挂钩的示例。</target>
        </trans-unit>
        <trans-unit id="f483517518991a282467c00ae1cad300e136b269" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;debounce&lt;/code&gt; attribute.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;debounce&lt;/code&gt; 属性的示例。</target>
        </trans-unit>
        <trans-unit id="b65067f3a77b357e086f22629678c364185b2ab2" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;hashbang: false&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;hashbang: false&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="8a2e5b8abfbc6295fa11dd1caccde1ae7c3d69af" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;history: true&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;history: true&lt;/code&gt; 示例：true选项。</target>
        </trans-unit>
        <trans-unit id="452c89b5559555a477ca0eb92f956476ce00d5cd" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;middlewares&lt;/code&gt; option on a store.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以在商店中找到 &lt;code&gt;middlewares&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="6faa58ba44b5eb605740b8397f8693bbaaa6f840" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;root&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;root&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="ab45ded99a30a006bddeceb3fd6aa38bb6c3d9c6" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;saveScrollPosition: true&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;saveScrollPosition: true&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="6ec2df901f80374c6ff66f398825204e5f18d423" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;subRoutes&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;subRoutes&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="7178b2cc5e9e2a36383d9e60b9eea90fb3bcb121" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;suppressTransitionError: true&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;suppressTransitionError: true&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="4e988285e061dd6f2c40c32cddfbc676c1aab12a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transition&lt;/code&gt; attribute.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;transition&lt;/code&gt; 属性的示例。</target>
        </trans-unit>
        <trans-unit id="c5f2b82da8cac7dc4262de8c7c93d4a46587dbca" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transition&lt;/code&gt; attribute. During your update, you can transition (pun very much intended) to the new staggering strategy as well.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;transition&lt;/code&gt; 属性的示例。在更新过程中，您也可以过渡（非常有针对性）到新的交错策略。</target>
        </trans-unit>
        <trans-unit id="34922f45eeac604f53b4193f84913c2beb89b350" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transitionOnLoad: true&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;transitionOnLoad: true&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="c9c97a1b14162dd07775888af56118c3a3370301" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;twoWay&lt;/code&gt; option.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到 &lt;code&gt;twoWay&lt;/code&gt; 选项的示例。</target>
        </trans-unit>
        <trans-unit id="cb3445799897bdc7ce3106b11c9b2c1f1d554568" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-else&lt;/code&gt; with &lt;code&gt;v-show&lt;/code&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以使用 &lt;code&gt;v-show&lt;/code&gt; 查找 &lt;code&gt;v-else&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="bccc02e6c6793423ef659db42169cb5afa5716d0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-link-active&lt;/code&gt; directive.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;v-link-active&lt;/code&gt; 指令的示例。</target>
        </trans-unit>
        <trans-unit id="ea921119a7e1635ac4e5a00b3d8a84491101f3fb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-link&lt;/code&gt; directive.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找 &lt;code&gt;v-link&lt;/code&gt; 指令的示例。</target>
        </trans-unit>
        <trans-unit id="a825bdc145076ec6a6e4b0c215f030aa3ba79b85" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the `.literal` modifier on a directive.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助&lt;/a&gt;器，以在指令上找到`.literal`修饰符的示例。</target>
        </trans-unit>
        <trans-unit id="733bb79e129d2dca49869269db0a3698c6f65fa8" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like &lt;code&gt;position&lt;/code&gt; or &lt;code&gt;num&lt;/code&gt;, the helper will not flag them.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找过时的参数顺序的示例。请注意，如果您为索引参数命名时使用诸如 &lt;code&gt;position&lt;/code&gt; 或 &lt;code&gt;num&lt;/code&gt; 之类的异常名称，则助手将不会对其进行标记。</target>
        </trans-unit>
        <trans-unit id="da725380e126a62727af458ad28bac7c6524d798" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;property&lt;/code&gt;, the helper will not flag them.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找过时的参数顺序的示例。请注意，如果您将关键参数 &lt;code&gt;name&lt;/code&gt; 或 &lt;code&gt;property&lt;/code&gt; ，则助手将不会对其进行标记。</target>
        </trans-unit>
        <trans-unit id="f1e1035d99ed76f7515df578e692ff719107895a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete route syntax.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找过时的路由语法的示例。</target>
        </trans-unit>
        <trans-unit id="142bb71333ac86e488c9aacc373010de66e961e1" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete text filters. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找过时的文本过滤器的示例。如果您有任何遗漏，还应该看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="397d5ab0302428112127147010f4482ef9051b5e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete usage.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移助手&lt;/a&gt;，以查找过时用法的示例。</target>
        </trans-unit>
        <trans-unit id="c1aa36c4bb555ce2607bb2d08c4631182d133d50" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the old filter syntax. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找旧过滤器语法的示例。如果您有任何遗漏，还应该看到&lt;strong&gt;控制台错误&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="20564b7f4450c4fa59c4a3ba6fa87121c27fe89f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the the old &lt;code&gt;keyCode&lt;/code&gt; configuration syntax.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找旧的 &lt;code&gt;keyCode&lt;/code&gt; 配置语法的示例。</target>
        </trans-unit>
        <trans-unit id="cc0976e79e68e3874825b8d9309f7bc3cf13503f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the these param attributes.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以找到这些param属性的示例。</target>
        </trans-unit>
        <trans-unit id="4a53e2c9b9e1ccea5753bf6c5b26aa93f8d31041" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of these removed variables. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt; such as: &lt;code&gt;Uncaught ReferenceError: $index is not defined&lt;/code&gt;</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;，以查找这些已删除变量的示例。如果错过任何内容，您还应该看到&lt;strong&gt;控制台错误，&lt;/strong&gt;例如： &lt;code&gt;Uncaught ReferenceError: $index is not defined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0ae781de5086e5c0e4123dc4514d344522a5237" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find one-time bindings.</source>
          <target state="translated">在您的代码库上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;以查找一次性绑定。</target>
        </trans-unit>
        <trans-unit id="2c800955474c5ae66271d1f51e3a706afff6e929" translate="yes" xml:space="preserve">
          <source>Run your bundling command with the actual &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;. This tells &lt;code&gt;vueify&lt;/code&gt; to avoid including hot-reload and development related code.</source>
          <target state="translated">在实际的 &lt;code&gt;NODE_ENV&lt;/code&gt; 环境变量设置为 &lt;code&gt;&quot;production&quot;&lt;/code&gt; 运行捆绑命令。这告诉 &lt;code&gt;vueify&lt;/code&gt; 避免包含热重载和开发相关的代码。</target>
        </trans-unit>
        <trans-unit id="65124f23df07644ee66ed5e04606bd6c7b54318b" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about duplicate slots &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">升级后运行端到端测试套件或应用程序，并查找有关重复插槽 &lt;code&gt;v-model&lt;/code&gt; 的&lt;strong&gt;控制台警告&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0276baa533bc89d334fafab4aee362813fb56fba" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about inline value attributes with &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">升级后运行端到端测试套件或应用程序，并查找有关带有 &lt;code&gt;v-model&lt;/code&gt; 的内联值属性的&lt;strong&gt;控制台警告&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b9168febc3cd9fb510564d5d619d53cfceebc829" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about multiple root elements in a template.</source>
          <target state="translated">升级后运行端到端测试套件或应用程序，并查找有关模板中多个根元素的&lt;strong&gt;控制台警告&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6cd905d20455b18138224bc59c413711a6de22a2" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about prop mutations.</source>
          <target state="translated">升级后运行端到端测试套件或应用程序，并查找有关道具突变的&lt;strong&gt;控制台警告&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7da416f4436591687e3ea5cf9d579fb6711b7dbd" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about the &lt;code&gt;el&lt;/code&gt; option with &lt;code&gt;Vue.extend&lt;/code&gt;.</source>
          <target state="translated">升级后运行端到端测试套件或应用程序，并通过 &lt;code&gt;Vue.extend&lt;/code&gt; 查找有关 &lt;code&gt;el&lt;/code&gt; 选项的&lt;strong&gt;控制台警告&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="de5aa3b1e8bcd9a2e9b6648cc6da29ebd7c682fa" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to any parts of your app that may be affected by this change.</source>
          <target state="translated">如果有，请运行您的端到端测试套件。在&lt;strong&gt;失败的测试&lt;/strong&gt;应该提醒您注意可能会受到这一更改的影响你的应用程序的任何部分。</target>
        </trans-unit>
        <trans-unit id="25b0475e8303e55dc27cdda9bbd8ef8c1c492011" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to the fact that a watcher was relying on the old behavior.</source>
          <target state="translated">如果有，请运行您的端到端测试套件。在&lt;strong&gt;失败的测试&lt;/strong&gt;应提醒你一个事实，即观察者是依靠旧的行为。</target>
        </trans-unit>
        <trans-unit id="3925b4e9140324a46bda954fa3ba6a11551d44d8" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to the fact that props passed to root instances are no longer working.</source>
          <target state="translated">如果有，请运行您的端到端测试套件。在&lt;strong&gt;失败的测试&lt;/strong&gt;应提醒你一个事实，即传递到根实例道具不再工作。</target>
        </trans-unit>
        <trans-unit id="c7a107bdb49919e8c77ec76a87618731104be368" translate="yes" xml:space="preserve">
          <source>Run your test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to any parts of your app that may be affected by this change.</source>
          <target state="translated">运行测试套件（如果有）。在&lt;strong&gt;失败的测试&lt;/strong&gt;应该提醒您注意可能会受到这一更改的影响你的应用程序的任何部分。</target>
        </trans-unit>
        <trans-unit id="71dbd4c5b94dea2014b421003d9fecaee74046df" translate="yes" xml:space="preserve">
          <source>Runs a function immediately while reactively tracking its dependencies and re-runs it whenever the dependencies are changed.</source>
          <target state="translated">立即运行一个函数,同时反应性地跟踪其依赖关系,并在依赖关系发生变化时重新运行它。</target>
        </trans-unit>
        <trans-unit id="13285023695c206297d4666f3184c48b775d9ec3" translate="yes" xml:space="preserve">
          <source>Runtime + Compiler vs. Runtime-only</source>
          <target state="translated">运行时+编译器与仅运行时的对比</target>
        </trans-unit>
        <trans-unit id="ce3caf82d6dc4282305777c04d22cb7e32e8739f" translate="yes" xml:space="preserve">
          <source>Runtime Performance</source>
          <target state="translated">运行时性能</target>
        </trans-unit>
        <trans-unit id="a8885226fbbc6c259bb25a13cec39523402f5449" translate="yes" xml:space="preserve">
          <source>SFC &lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt; can now include global rules or rules that target only slotted content (opens new window)</source>
          <target state="translated">SFC &lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt; 现在可以包括全局规则或仅针对广告位内容的规则（打开新窗口）</target>
        </trans-unit>
        <trans-unit id="0ab3eee80056a96ec147159fe704ef0b8dcd1e74" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#slot-scope&quot;&gt;&lt;code&gt;slot-scope&lt;/code&gt;&lt;/a&gt; except that &lt;code&gt;scope&lt;/code&gt; can only be used on &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">与&lt;a href=&quot;#slot-scope&quot;&gt; &lt;code&gt;slot-scope&lt;/code&gt; &lt;/a&gt;相同，除了 &lt;code&gt;scope&lt;/code&gt; 只能用于 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="9486d0a483dfe9905cce23330af6d67155a098e5" translate="yes" xml:space="preserve">
          <source>Same rule applies to the event listeners:</source>
          <target state="translated">同样的规则也适用于事件监听器。</target>
        </trans-unit>
        <trans-unit id="c41f297530a1a4027d4fe5146dc89421c3603b93" translate="yes" xml:space="preserve">
          <source>Sarah Drasner demonstrates this in the demo below, using a combination of timed and interactivity-driven state changes:</source>
          <target state="translated">Sarah Drasner在下面的演示中演示了这一点,使用定时和交互性驱动的状态变化相结合。</target>
        </trans-unit>
        <trans-unit id="6744b582ee6941cb3d4f3589a70ab055f52ce106" translate="yes" xml:space="preserve">
          <source>Scaffold via &lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;vue-cli (opens new window)&lt;/a&gt;:</source>
          <target state="translated">通过&lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;vue-cli搭建&lt;/a&gt;支架（在新窗口中打开）：</target>
        </trans-unit>
        <trans-unit id="bcb30ff0706f7afb22f9016af8875144481f1797" translate="yes" xml:space="preserve">
          <source>Scaffold via &lt;a href=&quot;https://github.com/vitejs/vite&quot;&gt;Vite (opens new window)&lt;/a&gt;:</source>
          <target state="translated">通过&lt;a href=&quot;https://github.com/vitejs/vite&quot;&gt;Vite&lt;/a&gt;脚手架（在新窗口中打开）：</target>
        </trans-unit>
        <trans-unit id="a29f0256272e79ca91a1c4e608f09a6264397d12" translate="yes" xml:space="preserve">
          <source>Scale</source>
          <target state="translated">Scale</target>
        </trans-unit>
        <trans-unit id="88011a37856972ada6fede54fa2220927bfb5ac0" translate="yes" xml:space="preserve">
          <source>Scaling Down</source>
          <target state="translated">缩小规模</target>
        </trans-unit>
        <trans-unit id="2d20a53538fb773c0616dc1ef8c4f21c2ceb637d" translate="yes" xml:space="preserve">
          <source>Scaling Up</source>
          <target state="translated">扩大规模</target>
        </trans-unit>
        <trans-unit id="bf9e81be315e7832d34416457ae7f289aca054dc" translate="yes" xml:space="preserve">
          <source>Scenario Background</source>
          <target state="translated">场景背景</target>
        </trans-unit>
        <trans-unit id="bf1e630e7268556a0635e37341aa31c69f284094" translate="yes" xml:space="preserve">
          <source>Scoped Slots</source>
          <target state="translated">范围老虎机</target>
        </trans-unit>
        <trans-unit id="c891d436871bb971da8c2ff8081958bff3ddb19a" translate="yes" xml:space="preserve">
          <source>Scoped Slots with the &lt;code&gt;slot-scope&lt;/code&gt; Attribute</source>
          <target state="translated">具有 &lt;code&gt;slot-scope&lt;/code&gt; 属性的作用域插槽</target>
        </trans-unit>
        <trans-unit id="6aa971b69d2fe9a8fec7d58fa039f9aafe0f8da1" translate="yes" xml:space="preserve">
          <source>Scoped slot functions are now guaranteed to return an array of VNodes, unless the return value is invalid, in which case the function will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">现在，保证作用域的插槽函数将返回VNode数组，除非返回值无效，在这种情况下，该函数将返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dae2d606c4ba8fd82d37fdbaee4697f3fd4d181" translate="yes" xml:space="preserve">
          <source>Screen Readers</source>
          <target state="translated">读屏器</target>
        </trans-unit>
        <trans-unit id="dfa277d957af13fbcf610edac48d6ff9d1d53991" translate="yes" xml:space="preserve">
          <source>Search your codebase for the regex &lt;code&gt;/\w+ in \d+/&lt;/code&gt;. Wherever it appears in a &lt;code&gt;v-for&lt;/code&gt;, check to see if you may be affected.</source>
          <target state="translated">在您的代码库中搜索 &lt;code&gt;/\w+ in \d+/&lt;/code&gt; 的正则表达式/ \ w +。在 &lt;code&gt;v-for&lt;/code&gt; 中出现的任何地方，请检查是否可能受到影响。</target>
        </trans-unit>
        <trans-unit id="68acc245855d52df2e1bcc59c8f1a0b8e40964eb" translate="yes" xml:space="preserve">
          <source>Searching for repositories using a &lt;code&gt;searchQuery&lt;/code&gt; string</source>
          <target state="translated">使用 &lt;code&gt;searchQuery&lt;/code&gt; 字符串搜索存储库</target>
        </trans-unit>
        <trans-unit id="8c538bd7ea9559c59e12f452d723cec0e8d49975" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../render-function&quot;&gt;Render Function Guide&lt;/a&gt; for more detailed documentation!</source>
          <target state="translated">有关更多详细文档，请参见&amp;ldquo;&lt;a href=&quot;../render-function&quot;&gt;渲染功能指南&amp;rdquo;&lt;/a&gt;！</target>
        </trans-unit>
        <trans-unit id="6b2d0248c5dcfa5a79dd94afb4e294298450c401" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXaoKy&quot;&gt;this sandbox (opens new window)&lt;/a&gt; to experiment with the full code, or &lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXapXM&quot;&gt;this version (opens new window)&lt;/a&gt; for an example binding to a component's options object, instead of its registered name.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXaoKy&quot;&gt;此沙箱（打开新窗口）&lt;/a&gt;以尝试完整的代码，或查看&lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXapXM&quot;&gt;此版本（打开新窗口）&lt;/a&gt;以获取绑定到组件的options对象而不是其注册名称的示例。</target>
        </trans-unit>
        <trans-unit id="0d4f1b3e1926d0de28455af2f7b050061aa08a61" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/1Leb7up8/&quot;&gt;this fiddle&lt;/a&gt; for the full code. Note, however, that if you find yourself having to do a lot of setup and cleanup within a single component, the best solution will usually be to create more modular components. In this case, we&amp;rsquo;d recommend creating a reusable &lt;code&gt;&amp;lt;input-datepicker&amp;gt;&lt;/code&gt; component.</source>
          <target state="translated">有关完整代码，请参&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/1Leb7up8/&quot;&gt;见此小提琴&lt;/a&gt;。但是请注意，如果您发现自己必须在单个组件中进行大量设置和清理，最好的解决方案通常是创建更多的模块化组件。在这种情况下，我们建议创建一个可重用的 &lt;code&gt;&amp;lt;input-datepicker&amp;gt;&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="04b10db48b879dd4894715118934c8f16e790244" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/65gLu2b6/&quot;&gt;this fiddle&lt;/a&gt; for the complete code behind the above demo.</source>
          <target state="translated">有关上述演示背后的完整代码，请参&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/65gLu2b6/&quot;&gt;见此提琴&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="030b52b1aecbbfd160c5986ee59275d22c9f7672" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/o3nycadu/&quot;&gt;this fiddle&lt;/a&gt; to experiment with the full code, or &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/b2qj69o1/&quot;&gt;this version&lt;/a&gt; for an example binding to a component&amp;rsquo;s options object, instead of its registered name.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/o3nycadu/&quot;&gt;此小提琴&lt;/a&gt;以尝试完整的代码，或查看&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/b2qj69o1/&quot;&gt;此版本&lt;/a&gt;以获取绑定到组件的options对象而不是其注册名称的示例。</target>
        </trans-unit>
        <trans-unit id="04b37b3a250db02d4b461de0e57827c11b943abe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript compiler options docs (opens new window)&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript编译器选项文档（打开新窗口）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc6fd808ffb90ac93f1cb9d312e01c08b9a59bf3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript compiler options docs&lt;/a&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript编译器选项文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">另见</target>
        </trans-unit>
        <trans-unit id="737f5413856be6cc52d6ede4259c257a64189c06" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;reactivity-computed-watchers#effect-flush-timing&quot;&gt;Computed and Watchers&lt;/a&gt;</source>
          <target state="translated">另请参阅：&lt;a href=&quot;reactivity-computed-watchers#effect-flush-timing&quot;&gt;计算者和观察者&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f4b188488a5cff189e4cfc9d54ff0931435281a" translate="yes" xml:space="preserve">
          <source>See example &lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;the plugins docs&lt;/a&gt; for more info.</source>
          <target state="translated">有关更多信息，请参见示例&lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;插件文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71510889015524eac5f3536f717b3d650abc22d8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/GRoMqYy&quot;&gt;Form Instructions&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/mlama007/pen/GRoMqYy&quot;&gt;形式的指令&lt;/a&gt;由玛丽亚（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="38c6c4077b07116940196b65ee10eb6481b48b2e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/JjGrKyY&quot;&gt;Form ARIA describedby&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">参见由Maria（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;）在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上&lt;a href=&quot;https://codepen.io/mlama007/pen/JjGrKyY&quot;&gt;描述&lt;/a&gt;的钢笔表格ARIA。</target>
        </trans-unit>
        <trans-unit id="1ab121f1ab888bd6dd1556e0412cd022d04a246d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/NWxXeqY&quot;&gt;Functional Images&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅笔&lt;a href=&quot;https://codepen.io/mlama007/pen/NWxXeqY&quot;&gt;功能图像&lt;/a&gt;由玛丽亚（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74082aad4e1b79b4314945b2900e6c0514460336" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/PoZEXoj&quot;&gt;Form Buttons&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/mlama007/pen/PoZEXoj&quot;&gt;表单按钮&lt;/a&gt;由玛丽亚（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="65beb5a06b509fe12ccff844d1ccee6f7f256d20" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/PoZJzeQ&quot;&gt;Form Placeholder&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/mlama007/pen/PoZJzeQ&quot;&gt;表格占位符&lt;/a&gt;由玛丽亚（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bbb45580197c86bfff0a068e3d94024bb542415a" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/VwepxJa&quot;&gt;Skip to Main&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;CodePen&lt;/a&gt;上的Maria（@ mlama007）的笔&lt;a href=&quot;https://codepen.io/mlama007/pen/VwepxJa&quot;&gt;跳至&lt;/a&gt;&lt;a href=&quot;https://codepen.io&quot;&gt;笔杆&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="177e21235dcab2987f1621e5cfb8461e674d9354" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/YzwpPYZ&quot;&gt;Simple Form&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/mlama007/pen/YzwpPYZ&quot;&gt;简单的表单&lt;/a&gt;由玛丽亚（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4ea069e0764773ff5c0f3cdac5b433d489e3ef38" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/ZEQXOLP&quot;&gt;Form ARIA labelledby&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/mlama007/pen/ZEQXOLP&quot;&gt;表ARIA labelledby&lt;/a&gt;由玛丽亚（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="262ac48ac240514164287ba6e66598dea15b5210" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/jOWGqgz&quot;&gt;Form ARIA label&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;CodePen&lt;/a&gt;上由Maria（@ mlama007）&lt;a href=&quot;https://codepen.io&quot;&gt;制作&lt;/a&gt;的Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/jOWGqgz&quot;&gt;Form ARIA标签&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1c6a08b06c8f131152330badb8fe89544a25f229" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/qBbpQwB&quot;&gt;Form Search&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/mlama007/pen/qBbpQwB&quot;&gt;形式的搜索&lt;/a&gt;由玛丽亚（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5f05b59cae921893c750d23e8e4776d80aa4dc26" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/wvMrGqz&quot;&gt;Form Label&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/mlama007/pen/wvMrGqz&quot;&gt;表标签&lt;/a&gt;由玛丽亚（&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7410cc167cc599bed638dcca19b6bdc07115f6ff" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/GRJZddR&quot;&gt;Second Reactivity with Proxies in Vue 3 Explainer&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/sdras/pen/GRJZddR&quot;&gt;在&lt;/a&gt;&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;CodePen&lt;/a&gt;上&lt;a href=&quot;https://codepen.io&quot;&gt;查看&lt;/a&gt;Sarah Drasner（@sdras）在Vue 3 Explainer中与代理进行的笔秒反应。</target>
        </trans-unit>
        <trans-unit id="dfc6e85aa5a5401fe93fb9ccc2c8c8d97926de1b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/RwwQapa&quot;&gt;How does the Virtual DOM work?&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">查看笔&lt;a href=&quot;https://codepen.io/sdras/pen/RwwQapa&quot;&gt;虚拟DOM如何工作？&lt;/a&gt;由Sarah Drasner（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;）在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上编写。</target>
        </trans-unit>
        <trans-unit id="11f3c60bc9945fca27e5e226930b2bddd0120ec6" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp&quot;&gt;Vue-controlled Wall-E&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp&quot;&gt;Vue公司控制的长城-E&lt;/a&gt;萨拉Drasner（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7cdc723bd45704f63d3132765b8411da257e1bf" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp/&quot;&gt;Vue-controlled Wall-E&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp/&quot;&gt;Vue公司控制的长城-E&lt;/a&gt;萨拉Drasner（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c6a8b36e9b7c0da5114771bb486f9a7a7042b0bb" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/zYYzjBg&quot;&gt;Proxies and Vue's Reactivity Explained Visually&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">参见Sarah Drasner（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;）在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;&lt;a href=&quot;https://codepen.io/sdras/pen/zYYzjBg&quot;&gt;上直观地解释&lt;/a&gt;了Pen Proxies和Vue的反应性。</target>
        </trans-unit>
        <trans-unit id="1cc166302e24ec3725dd68083514281943f1b4ff" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/zxJWBJ&quot;&gt;Bouncing Ball Demo&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/sdras/pen/zxJWBJ&quot;&gt;弹跳球演示&lt;/a&gt;萨拉Drasner（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d186cd1022be8718e9ceda1f954d3973247f611" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/049211673d3c185fde6b6eceb8baebec&quot;&gt;Transition-group example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见钢笔&lt;a href=&quot;https://codepen.io/teamVue/pen/049211673d3c185fde6b6eceb8baebec&quot;&gt;过渡组例如&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1523df0fe8ebf93022b7f2a5f6d18cfa497851b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/0dfa7869450ef43d6f7bd99022bc53e2&quot;&gt;Different Enter and Leave Transitions&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/0dfa7869450ef43d6f7bd99022bc53e2&quot;&gt;不同的进入或退出视线&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e752c1d184dfe92054f0f06db9e81939624e6c28" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/22903bc3b53eb5b7817378ecb985ce96&quot;&gt;Transitioning State 1&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/22903bc3b53eb5b7817378ecb985ce96&quot;&gt;转换状态1&lt;/a&gt;的Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4a7528d954fd4369e15b8fb0b0872949a4941c65" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/3466d06fb252a53c5bc0a0edb0f1588a&quot;&gt;Simple Transition Component&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/3466d06fb252a53c5bc0a0edb0f1588a&quot;&gt;简单的过渡部位&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae07441f77f0670c9fc58c81f531b5d57861ff18" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/373b4429eb5769ae2e6d097fd954fd08&quot;&gt;Transition-group example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见钢笔&lt;a href=&quot;https://codepen.io/teamVue/pen/373b4429eb5769ae2e6d097fd954fd08&quot;&gt;过渡组例如&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e040d30af8393ee1633f73d93d30350748fde86d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/68ce1b8c41d0a6e71ff58df80fd85ae5&quot;&gt;JavaScript Hooks Transition&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/68ce1b8c41d0a6e71ff58df80fd85ae5&quot;&gt;JavaScript的鱼钩过渡&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2bd9cd1463119b9c43dcd1ba74aa3cb1f130acf" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/76e344bf057bd58b5936bba260b787a8&quot;&gt;Transition Modes Flip Cards&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/76e344bf057bd58b5936bba260b787a8&quot;&gt;过渡模式翻转卡&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1f107983a293ed9006d9ef2812af86756ca7c64b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/8627c50c5514752acd73d19f5e33a781&quot;&gt;CSS Animation Transition Example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/8627c50c5514752acd73d19f5e33a781&quot;&gt;CSS动画过渡实施例&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a260753e85fa8466282693387b87f7cc76104425" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/996a9665131e7902327d350ca8a655ac&quot;&gt;Transition Ease Example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/996a9665131e7902327d350ca8a655ac&quot;&gt;过渡缓实施例&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6f11331478125598a661c13bac28e7c854b496e8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/GRJGqXp&quot;&gt;Watch basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见钢笔&lt;a href=&quot;https://codepen.io/teamVue/pen/GRJGqXp&quot;&gt;手表基本例如&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="812653b1e4bc4946c1782ddf82f2d05c7e033000" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/GRoPPrM&quot;&gt;Multiple v-models&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/GRoPPrM&quot;&gt;多V-模型&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f145a95ae613c69dd55a754b38bcfa605c12d2b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/JjGezQY&quot;&gt;Interpolation with style bindings&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参见&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;上&lt;a href=&quot;https://codepen.io&quot;&gt;带有&lt;/a&gt;Vue（@Vue）&lt;a href=&quot;https://codepen.io/teamVue/pen/JjGezQY&quot;&gt;样式绑定&lt;/a&gt;的钢笔插补。</target>
        </trans-unit>
        <trans-unit id="f0c541290f7e397b76469cdb365d83edf60293da" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/JjdxaJW&quot;&gt;Custom directives: basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/JjdxaJW&quot;&gt;自定义指令：基本例如&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83e9a90a9be54455c3883de0cd921fd94beaccda" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGydL&quot;&gt;Handling forms: select&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅&amp;ldquo;笔&lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGydL&quot;&gt;处理&amp;rdquo;表单：&lt;/a&gt;通过&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;上的Vue（@Vue）&lt;a href=&quot;https://codepen.io&quot;&gt;选择&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a2254bb58d69f1e552b54292f05a53c4721df34" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGyrp&quot;&gt;Component basics: emitting events&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGyrp&quot;&gt;Component基础知识：&lt;/a&gt;在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上通过Vue（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）发出事件。</target>
        </trans-unit>
        <trans-unit id="a282329decf75725d04fbec7c3ad2cbe3612d84c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpRVvJ&quot;&gt;Attribute dynamic binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/KKpRVvJ&quot;&gt;属性动态绑定&lt;/a&gt;的Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2b6f24ac50f9136ee96a3d776af94f047b327e7" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/MWwPEMM&quot;&gt;Handling forms: radiobutton&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅&amp;ldquo;钢笔&lt;a href=&quot;https://codepen.io/teamVue/pen/MWwPEMM&quot;&gt;处理&amp;rdquo;表单：&lt;/a&gt;&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;上Vue（@Vue）的&lt;a href=&quot;https://codepen.io&quot;&gt;单选按钮&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6955c24692a25cd5fc2b19407d34dbb402befbb1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjNY&quot;&gt;v-for with a range&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjNY&quot;&gt;V-用于与范围&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e023be1303468883f162c0e48e66e7703e8f36a7" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjqy&quot;&gt;v-for with Object&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjqy&quot;&gt;V-与对象&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a9b92c12228b760abf63536d9cd189e30dd1b50" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqzrjr&quot;&gt;Computed basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参见&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;上Vue（@Vue）&lt;a href=&quot;https://codepen.io&quot;&gt;编写&lt;/a&gt;的Pen&lt;a href=&quot;https://codepen.io/teamVue/pen/NWqzrjr&quot;&gt;计算的基本示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39e43b77007c2dacebd79974e3b87520b56fa278" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyJVE&quot;&gt;Handling forms: checkbox&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyJVE&quot;&gt;处理形式：复选框&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="291df14db0a3ff8f4300732d15f9ac8892bdd706" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyOaX&quot;&gt;Component basics: passing props&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyOaX&quot;&gt;Component基础知识：&lt;/a&gt; Vue（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上传递道具。</target>
        </trans-unit>
        <trans-unit id="75fdf0a890d4ff84c05ca2af572a0d0bd7d47a1e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/Rwrqzpr&quot;&gt;Transition Modes Button Problem&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/Rwrqzpr&quot;&gt;过渡模式按钮问题&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98e56da97c87950c5a1a181af74825c8135cfd29" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLGbwa&quot;&gt;v-for with Array&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/VwLGbwa&quot;&gt;V-与阵列&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1661150e6ac3142be9536c236a90d8cad370998b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLJQvP&quot;&gt;Dynamic components: with keep-alive&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参见Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLJQvP&quot;&gt;Dynamic组件：&lt;/a&gt;在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上具有Vue保持活动状态（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d340825b1b570c6935caf72e6173f6e13bcf8cfb" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLxeEz&quot;&gt;Intro-Components-1&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/VwLxeEz&quot;&gt;介绍组件-1&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="563d1d295f2c11776f1cdbc3104622b0a286b9b6" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/WNvgjda&quot;&gt;Event handling: with an inline handler&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅Pen&lt;a href=&quot;https://codepen.io/teamVue/pen/WNvgjda&quot;&gt;事件处理：&lt;/a&gt;在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上使用Vue（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）的内联处理程序。</target>
        </trans-unit>
        <trans-unit id="8d681176d3b70b359069ee53c58bbc0e7655b4ea" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/WNwVxZw&quot;&gt;Transitioning between components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/WNwVxZw&quot;&gt;组件之间的转换&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="307c1ff749163fd8436a681b3e889e633b2b391c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/YzXgGmv&quot;&gt;Custom directives: dynamic arguments&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/YzXgGmv&quot;&gt;自定义指令：动态参数&lt;/a&gt;的Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="513a5a90b54b51c5692e0aee3c48fe5b9c6de0b2" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/ZEQmdvq&quot;&gt;Transition Modes Button Problem- solved&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/ZEQmdvq&quot;&gt;过渡模式按钮Problem-解决&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b196620d00f5896efb2ca3ce1c8dfdbb3c4f1900" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/a8e00648d4df6baa1b19fb6c31c8d17e&quot;&gt;Updating SVG&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/a8e00648d4df6baa1b19fb6c31c8d17e&quot;&gt;更新SVG&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c208a68e3d1f255db4e35f404e189a60f904a13b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abORVEJ&quot;&gt;Component basics&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/abORVEJ&quot;&gt;组件基础知识&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f5595d6d7e69787fd5630e93b1afe06c4419d07c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abORVZm&quot;&gt;Handling forms: select with dynamic options&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/abORVZm&quot;&gt;处理形式：动态选项中进行选择&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd4470c15b33fcfc7767aa97dd2d89af0a169238" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWdo&quot;&gt;v-for with Object key and index&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWdo&quot;&gt;V-与对象键和索引&lt;/a&gt;的Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a731992b15fef7493037d3445b45d7226d4bff98" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWpz&quot;&gt;v-for with components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWpz&quot;&gt;V-与组件&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f8813b72fad30d04fc1b31cc73693fcc17f8beee" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abdQgLr&quot;&gt;Transition Modes Button Problem- positioning&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/abdQgLr&quot;&gt;过渡模式按钮Problem-定位&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e61105b75163799bdc20d7f7945cea1346ffd23e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/bGdmoyj&quot;&gt;Handling forms: multiple checkboxes&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅&amp;ldquo;笔&lt;a href=&quot;https://codepen.io/teamVue/pen/bGdmoyj&quot;&gt;处理&amp;rdquo;表单：&lt;/a&gt; Vue（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上的多个复选框。</target>
        </trans-unit>
        <trans-unit id="54c389b70c42f1062891ea6eb7228ca43e484564" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/c2fc5107bd3025ceadea049b3ee44ec0&quot;&gt;Staggered Lists&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/c2fc5107bd3025ceadea049b3ee44ec0&quot;&gt;交错列表&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="13828cb9610cdab460c9a0a3a7e453b178d6f673" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/dyoeGjW&quot;&gt;Event handling&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/dyoeGjW&quot;&gt;事件处理&lt;/a&gt;的Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f2c3ad7c5e42df49af96a7e47bd99e414683bd39" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/e1cea580e91d6952eb0ae17bfb7c379d&quot;&gt;Transition List&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/e1cea580e91d6952eb0ae17bfb7c379d&quot;&gt;转换列表&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="147d0375cd405af2f5388e0c93f7659ef234e30b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/e9ef8ac7e32e0d0337e03d20949b4d17&quot;&gt;State Transition Components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/e9ef8ac7e32e0d0337e03d20949b4d17&quot;&gt;状态转换组件&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31cdae996d79388b6aff11270d995e9a90415a5d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/eYNPEqj&quot;&gt;Handling forms: basic v-model&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/eYNPEqj&quot;&gt;处理形式：基本V模型&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="88c732a959e13b52b9ac4a75b867fe321701dd75" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/ff45b91caf7a98c8c9077ad8ab539260&quot;&gt;Create animation with a class&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/ff45b91caf7a98c8c9077ad8ab539260&quot;&gt;用类创建动画&lt;/a&gt;的Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="acc98e3fedf70758f085bc91a52cedce214d4727" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/gOPNvjR&quot;&gt;Vue 3 Teleport&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/gOPNvjR&quot;&gt;Vue公司3瞬移&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab510a161a94bbad39a6766795b3241daa9d5035" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/gOpBXPz&quot;&gt;Handling forms: select bound to array&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅&amp;ldquo;笔&lt;a href=&quot;https://codepen.io/teamVue/pen/gOpBXPz&quot;&gt;处理&amp;rdquo;表单：&lt;/a&gt;在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上选择由Vue（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）绑定到数组。</target>
        </trans-unit>
        <trans-unit id="d61ebc8def97215bc4e309d7f07ed2d158d12275" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPeaob&quot;&gt;Component basics: slots&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅Pen&lt;a href=&quot;https://codepen.io/teamVue/pen/jOPeaob&quot;&gt;组件基础知识：&lt;/a&gt;&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;上的Vue（@Vue）&lt;a href=&quot;https://codepen.io&quot;&gt;插槽&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e28edf61e14e998b4396f5bd5f49dbfe4cce5f07" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPjZOe&quot;&gt;Dynamic components: without keep-alive&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/jOPjZOe&quot;&gt;动态组件：不保活&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df1d37723d6b844dc3dac6c81884f0170d687c3f" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPvmaX&quot;&gt;Event handling: with a method&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅Pen&lt;a href=&quot;https://codepen.io/teamVue/pen/jOPvmaX&quot;&gt;事件处理：&lt;/a&gt;在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上使用Vue（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）的方法。</target>
        </trans-unit>
        <trans-unit id="6ce0a24d580f1e1b3c0d8ed82e5f3653e8edb9f8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/mdJLVXq&quot;&gt;List rendering&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/mdJLVXq&quot;&gt;列表呈递&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d7aec8f97907244f1737ccc1d6adbcdb70f7bdd1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/oNXaoKy&quot;&gt;Component basics: dynamic components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/oNXaoKy&quot;&gt;组件基础知识：动态组件&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1973c424486fb8621604fd12c8238f057bf3c33e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/oNXdbpB&quot;&gt;Conditional rendering&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见钢笔&lt;a href=&quot;https://codepen.io/teamVue/pen/oNXdbpB&quot;&gt;条件呈现&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ea234d1f2b7b35b6bb51409cc2f37f3321ac07d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/poJOPjx&quot;&gt;v-for with Object and key&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/poJOPjx&quot;&gt;V-与对象和主要&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="685e32ad68c213b265949ed3859900e53acf3e03" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/poJVgZm&quot;&gt;Two-way binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/poJVgZm&quot;&gt;双向绑定&lt;/a&gt;的Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c29b3965f3277fc30dbe11e5f3c78d00fedd15f1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/rNOaZpj&quot;&gt;Custom directives: dynamic arguments + dynamic binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/rNOaZpj&quot;&gt;Custom指令：动态参数+&lt;/a&gt; Vue（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）在&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;上的动态绑定+动态绑定。</target>
        </trans-unit>
        <trans-unit id="81008da2a748e2b724bf234ed2da740fdaf4215b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/rNVqYvM&quot;&gt;Component basics: reusing components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/rNVqYvM&quot;&gt;组件基础知识：重用组件&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86b3c084df61e58700858fca20a352840ea4c4ab" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/wvaEdBP&quot;&gt;v-for with Array and index&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;上&lt;a href=&quot;https://codepen.io/teamVue/pen/wvaEdBP&quot;&gt;带有数组&lt;/a&gt;的Pen v-for和由Vue（@Vue）进行&lt;a href=&quot;https://codepen.io&quot;&gt;索引&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bfbc217a5395010a5c11fe2109b0a9d9f207c699" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/xxGadPZ&quot;&gt;Event handling: basic&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;上的Pen&lt;a href=&quot;https://codepen.io/teamVue/pen/xxGadPZ&quot;&gt;事件处理：&lt;/a&gt; Vue（@Vue）的&lt;a href=&quot;https://codepen.io&quot;&gt;基础&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d520109caefc0a15b146d81457800d2ba4892068" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/xxGyXaG&quot;&gt;Handling forms: textarea&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/xxGyXaG&quot;&gt;处理形式：文本&lt;/a&gt;由Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7e8d26c9dcbd0652f405c01c06cd0d07dab2e26" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/yLNEJJM&quot;&gt;Rendering v-html&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">见笔&lt;a href=&quot;https://codepen.io/teamVue/pen/yLNEJJM&quot;&gt;渲染V-HTML&lt;/a&gt;通过Vue公司（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8598222918d3c6e513d63060cf55e2971ded729a" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="translated">Select</target>
        </trans-unit>
        <trans-unit id="d84be9de2f9e35e379e0e4f6e0bb2340cf1b2d0b" translate="yes" xml:space="preserve">
          <source>Select Options</source>
          <target state="translated">选择选项</target>
        </trans-unit>
        <trans-unit id="33e3b8ff7914aff97145e0add0103e5154bdde21" translate="yes" xml:space="preserve">
          <source>Self-closing components</source>
          <target state="translated">自闭部件</target>
        </trans-unit>
        <trans-unit id="8aa1710830cfa45dfe404022342d5aade64a9767" translate="yes" xml:space="preserve">
          <source>Self-closing components &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈推荐&lt;/sup&gt;自闭合组件&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="fe03c3515833357d89e7094df960e757cae3bc1d" translate="yes" xml:space="preserve">
          <source>Semantics</source>
          <target state="translated">Semantics</target>
        </trans-unit>
        <trans-unit id="01fe9a20a8fdeb0f312fdcea1363c6a939cf772b" translate="yes" xml:space="preserve">
          <source>Server-Side Rendering</source>
          <target state="translated">服务器端渲染</target>
        </trans-unit>
        <trans-unit id="d986e7075907e08286bd92c14ff694e5215b1ede" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;false&lt;/code&gt; to prevent the production tip on Vue startup.</source>
          <target state="translated">将此设置为 &lt;code&gt;false&lt;/code&gt; 可以防止Vue启动时出现生产提示。</target>
        </trans-unit>
        <trans-unit id="e81a9046abdbc87c3ced75127dd3291c76c28691" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark (opens new window)&lt;/a&gt; API.</source>
          <target state="translated">将此属性设置为 &lt;code&gt;true&lt;/code&gt; 可在浏览器devtool性能/时间线面板中启用组件初始化，编译，渲染和补丁性能跟踪。仅在开发模式和支持&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;Performance.mark（打开新窗口）&lt;/a&gt; API的浏览器中工作。</target>
        </trans-unit>
        <trans-unit id="0322b76a288cd27bf5d650f3c073fe32426bc786" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark&lt;/a&gt; API.</source>
          <target state="translated">将其设置为 &lt;code&gt;true&lt;/code&gt; 可在浏览器devtool性能/时间线面板中启用组件初始化，编译，渲染和补丁性能跟踪。仅在开发模式和支持&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;Performance.mark&lt;/a&gt; API的浏览器中工作。</target>
        </trans-unit>
        <trans-unit id="d9dc93485e941bf6df4cf07ea75a67473b1fe1d9" translate="yes" xml:space="preserve">
          <source>Sets a value that can be injected into all components within the application. Components should use &lt;code&gt;inject&lt;/code&gt; to receive the provided values.</source>
          <target state="translated">设置一个可以注入到应用程序内所有组件中的值。组件应使用 &lt;code&gt;inject&lt;/code&gt; 来接收提供的值。</target>
        </trans-unit>
        <trans-unit id="e98421ef2cef7c53ec071c0cc18e5534c6e06824" translate="yes" xml:space="preserve">
          <source>Sets the delimiters used for text interpolation within the template.</source>
          <target state="translated">设置模板中用于文本插值的定界符。</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="97f2f59947f62c014c5d7c2a4de9191db27303ae" translate="yes" xml:space="preserve">
          <source>Share (and Build) Your Experience</source>
          <target state="translated">分享(和建立)您的经验</target>
        </trans-unit>
        <trans-unit id="e3073223103db18e5df2f841e3d175c874b744cb" translate="yes" xml:space="preserve">
          <source>Share Configurations Among Apps</source>
          <target state="translated">在应用程序之间共享配置</target>
        </trans-unit>
        <trans-unit id="cfbd8f27db2ca369a38d5de5d2cc30c4b2563623" translate="yes" xml:space="preserve">
          <source>Shared Behavior with &lt;code&gt;watchEffect&lt;/code&gt;</source>
          <target state="translated">与 &lt;code&gt;watchEffect&lt;/code&gt; 共享的行为</target>
        </trans-unit>
        <trans-unit id="78ac938787ec8cb8d68c0f35d5c1f36144b88b3a" translate="yes" xml:space="preserve">
          <source>Shares the same runtime compilation, dependency inlining and hard-coded prod/dev behavior with the global build.</source>
          <target state="translated">与全局构建共享相同的运行时编译、依赖内联和硬编码prod/dev行为。</target>
        </trans-unit>
        <trans-unit id="89dd25c3e7bb9f776951ef9ad74e60a7d6dd05bb" translate="yes" xml:space="preserve">
          <source>Shorthands</source>
          <target state="translated">Shorthands</target>
        </trans-unit>
        <trans-unit id="1ae7276e79db945fd551dc9db134399c32bb6984" translate="yes" xml:space="preserve">
          <source>Should either be updated to use an inline expression:</source>
          <target state="translated">应该或者更新为使用内联表达式。</target>
        </trans-unit>
        <trans-unit id="2d9ab84ebf3f88c612650ea68112310ebd01fe56" translate="yes" xml:space="preserve">
          <source>Side Effect Invalidation</source>
          <target state="translated">副作用无效</target>
        </trans-unit>
        <trans-unit id="b0a3536bb7788ee14bd41892adba577744a1012d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;$root&lt;/code&gt;, the &lt;code&gt;$parent&lt;/code&gt; property can be used to access the parent instance from a child. This can be tempting to reach for as a lazy alternative to passing data with a prop.</source>
          <target state="translated">与 &lt;code&gt;$root&lt;/code&gt; 相似， &lt;code&gt;$parent&lt;/code&gt; 属性可用于从子级访问父实例。作为使用prop传递数据的一种懒惰替代，这可能很诱人。</target>
        </trans-unit>
        <trans-unit id="95ca1c1b0debe3ad51491e220a96675c9c705faf" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;watch&lt;/code&gt;, computed properties can also be created outside of a Vue component with the &lt;code&gt;computed&lt;/code&gt; function imported from Vue. Let&amp;rsquo;s get back to our counter example:</source>
          <target state="translated">与 &lt;code&gt;ref&lt;/code&gt; 和 &lt;code&gt;watch&lt;/code&gt; 相似，也可以使用从Vue导入的 &lt;code&gt;computed&lt;/code&gt; 函数在Vue组件外部创建计算属性。让我们回到我们的反例：</target>
        </trans-unit>
        <trans-unit id="dadac4906f4bc6e4a81d9058bdcbf1bbcb397f71" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;v-else&lt;/code&gt;, a &lt;code&gt;v-else-if&lt;/code&gt; element must immediately follow a &lt;code&gt;v-if&lt;/code&gt; or a &lt;code&gt;v-else-if&lt;/code&gt; element.</source>
          <target state="translated">与 &lt;code&gt;v-else&lt;/code&gt; 相似， &lt;code&gt;v-else-if&lt;/code&gt; 元素必须紧随 &lt;code&gt;v-if&lt;/code&gt; 或 &lt;code&gt;v-else-if&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="af9b7b6d2657eb7de92b424e723e1ce34e27dd45" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;v-on&lt;/code&gt; and &lt;code&gt;v-bind&lt;/code&gt;, &lt;code&gt;v-slot&lt;/code&gt; also has a shorthand, replacing everything before the argument (&lt;code&gt;v-slot:&lt;/code&gt;) with the special symbol &lt;code&gt;#&lt;/code&gt;. For example, &lt;code&gt;v-slot:header&lt;/code&gt; can be rewritten as &lt;code&gt;#header&lt;/code&gt;:</source>
          <target state="translated">与 &lt;code&gt;v-on&lt;/code&gt; 和 &lt;code&gt;v-bind&lt;/code&gt; 相似， &lt;code&gt;v-slot&lt;/code&gt; 也有一个简写形式，用特殊符号 &lt;code&gt;#&lt;/code&gt; 替换参数（ &lt;code&gt;v-slot:&lt;/code&gt; ：）之前的所有内容。例如， &lt;code&gt;v-slot:header&lt;/code&gt; 可以重写为 &lt;code&gt;#header&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="110921f9f16f79ec9020d42a774f85de76c9358e" translate="yes" xml:space="preserve">
          <source>Similar to prop defaults, you need to use a factory function for non primitive values:</source>
          <target state="translated">与道具默认值类似,你需要为非基元值使用工厂函数。</target>
        </trans-unit>
        <trans-unit id="51a30c42e13e62448e2b08eba72508a02146467b" translate="yes" xml:space="preserve">
          <source>Similar to prop defaults, you need to use a factory function for non-primitive values:</source>
          <target state="translated">与道具默认值类似,你需要使用工厂函数来处理非原始值。</target>
        </trans-unit>
        <trans-unit id="68d88f3a27a981b0bc360cba21e587b9da4f4b86" translate="yes" xml:space="preserve">
          <source>Similar to prop type validation, an emitted event can be validated if it is defined with the Object syntax instead of the array syntax.</source>
          <target state="translated">与道具类型验证类似,如果用Object语法而不是数组语法定义一个发射的事件,就可以对其进行验证。</target>
        </trans-unit>
        <trans-unit id="fd10ed1a03d7983440069e31d0996e6814b92875" translate="yes" xml:space="preserve">
          <source>Similar to props, the events that the component emits can now be defined with the &lt;code&gt;emits&lt;/code&gt; option:</source>
          <target state="translated">与props类似，组件发出的事件现在可以使用 &lt;code&gt;emits&lt;/code&gt; 选项定义：</target>
        </trans-unit>
        <trans-unit id="3115d0b13d887f54dba012634384e7c25cfdf659" translate="yes" xml:space="preserve">
          <source>Similar to template &lt;code&gt;v-if&lt;/code&gt;, you can also use a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag with &lt;code&gt;v-for&lt;/code&gt; to render a block of multiple elements. For example:</source>
          <target state="translated">与模板 &lt;code&gt;v-if&lt;/code&gt; 相似，您也可以将 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 标记与 &lt;code&gt;v-for&lt;/code&gt; 一起使用以呈现多个元素的块。例如：</target>
        </trans-unit>
        <trans-unit id="6d2a01a3e994e3545ec387f3a221d8a8ec074723" translate="yes" xml:space="preserve">
          <source>Similar to using the &lt;code&gt;provide&lt;/code&gt; option in a 2.x root instance, a Vue 3 app instance can also provide dependencies that can be injected by any component inside the app:</source>
          <target state="translated">类似于使用 &lt;code&gt;provide&lt;/code&gt; 在2.x的根实例选项，一个Vue公司3应用实例也可以提供可以由该应用内的任何组分被注入的依赖关系：</target>
        </trans-unit>
        <trans-unit id="1fb5cbad8a164078c5eb5948eac4711466be0daa" translate="yes" xml:space="preserve">
          <source>Similarly, if the value passed to &lt;code&gt;is&lt;/code&gt; is a component options object then there's no need to resolve anything, it can be passed directly as the first argument of &lt;code&gt;h&lt;/code&gt;.</source>
          <target state="translated">同样地，如果该值传递给 &lt;code&gt;is&lt;/code&gt; 被一个组件选项对象那么就没有必要解决任何问题，可以直接传入的第一个参数 &lt;code&gt;h&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d6a6b84031ab7ac575faa5ec72d230121975c66" translate="yes" xml:space="preserve">
          <source>Similarly, this is how a global directive is declared:</source>
          <target state="translated">同样,全局指令也是这样声明的。</target>
        </trans-unit>
        <trans-unit id="cc1df6ad12b7801df462ec59203348775829bbf4" translate="yes" xml:space="preserve">
          <source>Similarly, when using &lt;code&gt;&amp;lt;template v-for&amp;gt;&lt;/code&gt; with a child that uses &lt;code&gt;v-if&lt;/code&gt;, the &lt;code&gt;key&lt;/code&gt; should be moved up to the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">同样，将 &lt;code&gt;&amp;lt;template v-for&amp;gt;&lt;/code&gt; 与使用 &lt;code&gt;v-if&lt;/code&gt; 的子项一起使用时， &lt;code&gt;key&lt;/code&gt; 应上移至 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="9032b6dd131e5bdf77e7f1e8c9ad6ef9e98b4db4" translate="yes" xml:space="preserve">
          <source>Similarly, you can use dynamic arguments to bind a handler to a dynamic event name:</source>
          <target state="translated">同样,你可以使用动态参数将处理程序绑定到动态事件名上。</target>
        </trans-unit>
        <trans-unit id="e756f11c70f78a0ba1866d4795579c59fa6d1833" translate="yes" xml:space="preserve">
          <source>Simple Assertions</source>
          <target state="translated">简单断言</target>
        </trans-unit>
        <trans-unit id="bbba1d068bf49ca0e64f1e344f51043367c2266d" translate="yes" xml:space="preserve">
          <source>Simple Routing From Scratch</source>
          <target state="translated">从零开始的简单路由</target>
        </trans-unit>
        <trans-unit id="5356eef37f9b286d685d6fb57d645ff611f0a298" translate="yes" xml:space="preserve">
          <source>Simple Routing from Scratch</source>
          <target state="translated">从零开始的简单路由</target>
        </trans-unit>
        <trans-unit id="4e794aae53f27e868a697d7573dd5ec04e937e2a" translate="yes" xml:space="preserve">
          <source>Simple State Management from Scratch</source>
          <target state="translated">从零开始的简单状态管理</target>
        </trans-unit>
        <trans-unit id="7a423acd4331de7d207764fc94ba09543c17ef88" translate="yes" xml:space="preserve">
          <source>Simple computed properties</source>
          <target state="translated">简单的计算属性</target>
        </trans-unit>
        <trans-unit id="28fbbfbd1e3c5e7641094f470de044776bb5ad02" translate="yes" xml:space="preserve">
          <source>Simple computed properties &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;简单的计算属性&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="37761f78a8d655b3953b071e198e22dcd5a02587" translate="yes" xml:space="preserve">
          <source>Simple expressions in templates</source>
          <target state="translated">模板中的简单表达式</target>
        </trans-unit>
        <trans-unit id="fcf7b67ac329ddfb22fdf3fbec785727bf9bf466" translate="yes" xml:space="preserve">
          <source>Simple expressions in templates &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;模板中的简单表达式&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="211d49f995dbe282f57faa15874e031ac53eeff7" translate="yes" xml:space="preserve">
          <source>Simpler, well-named computed properties are:</source>
          <target state="translated">更简单的、命名明确的计算属性有:</target>
        </trans-unit>
        <trans-unit id="63a2bccabf19824dace120aef2460e5986003d8a" translate="yes" xml:space="preserve">
          <source>Simplifying computed properties forces you to give each value a descriptive name, even if it&amp;rsquo;s not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what&amp;rsquo;s going on.</source>
          <target state="translated">简化计算属性会迫使您为每个值指定一个描述性名称，即使该名称未重复使用也是如此。这使其他开发人员（和您将来的开发人员）更容易专注于他们关心的代码并弄清楚发生了什么。</target>
        </trans-unit>
        <trans-unit id="f04aaef124e7b2b9e4d40f6a6b719132efaeba8f" translate="yes" xml:space="preserve">
          <source>Simplifying computed properties forces you to give each value a descriptive name, even if it's not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what's going on.</source>
          <target state="translated">简化计算属性迫使你给每个值一个描述性的名字,即使它不被重用。这使得其他开发者(以及未来的你)更容易专注于他们关心的代码,并找出发生了什么。</target>
        </trans-unit>
        <trans-unit id="5fd1e98b263d4df6091312537a5b1fb83da16e24" translate="yes" xml:space="preserve">
          <source>Simply download and include with a script tag. &lt;code&gt;Vue&lt;/code&gt; will be registered as a global variable.</source>
          <target state="translated">只需下载并包含脚本标签即可。 &lt;code&gt;Vue&lt;/code&gt; 将被注册为全局变量。</target>
        </trans-unit>
        <trans-unit id="d5938f34f8624b63802c3118f180d5e293766247" translate="yes" xml:space="preserve">
          <source>Simultaneous entering and leaving transitions aren&amp;rsquo;t always desirable though, so Vue offers some alternative &lt;strong&gt;transition modes&lt;/strong&gt;:</source>
          <target state="translated">虽然并不总是需要同时进入和离开过渡，所以Vue提供了一些替代&lt;strong&gt;过渡模式&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="680f9238b2a8b78e32cdbc0c2d7b967eeba0e51d" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;&lt;code&gt;KeyboardEvent.keyCode&lt;/code&gt; has been deprecated (opens new window)&lt;/a&gt;, it no longer makes sense for Vue 3 to continue supporting this as well. As a result, it is now recommended to use the kebab-case name for any key you want to use as a modifier.</source>
          <target state="translated">由于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;不推荐使用&lt;/a&gt; &lt;code&gt;KeyboardEvent.keyCode&lt;/code&gt; （打开新窗口），因此Vue 3也不再继续支持该功能。因此，现在建议对要用作修饰符的任何键使用kebab-case名称。</target>
        </trans-unit>
        <trans-unit id="6a69d78f54bcf8ac6e1f4a3963e04cee33a026d0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;$nextTick()&lt;/code&gt; returns a promise, you can achieve the same as the above using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2016 async/await&lt;/a&gt; syntax:</source>
          <target state="translated">由于 &lt;code&gt;$nextTick()&lt;/code&gt; 返回一个promise，因此可以使用新的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2016 async / await&lt;/a&gt;语法实现与上述相同的效果：</target>
        </trans-unit>
        <trans-unit id="a1ac81c9a7f5d4faff057385cc40d040ef51718a" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;$nextTick()&lt;/code&gt; returns a promise, you can achieve the same as the above using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2017 async/await (opens new window)&lt;/a&gt; syntax:</source>
          <target state="translated">由于 &lt;code&gt;$nextTick()&lt;/code&gt; 返回一个promise，因此您可以使用新的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2017 async / await（在新窗口中打开）&lt;/a&gt;语法实现与上述相同的语法：</target>
        </trans-unit>
        <trans-unit id="10a777de149e5a77b75501c009eb466a9bc93514" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;v-ref&lt;/code&gt; is no longer a directive, but a special attribute, it can also be dynamically defined. This is especially useful in combination with &lt;code&gt;v-for&lt;/code&gt;. For example:</source>
          <target state="translated">由于 &lt;code&gt;v-ref&lt;/code&gt; 不再是指令，而是特殊属性，因此也可以动态定义它。与 &lt;code&gt;v-for&lt;/code&gt; 结合使用时特别有用。例如：</target>
        </trans-unit>
        <trans-unit id="9de3c1e0a71e1edcdc7ffbc2b45060ebfe43b095" translate="yes" xml:space="preserve">
          <source>Since Vue &lt;a href=&quot;reactivity#Async-Update-Queue&quot;&gt;performs DOM updates asynchronously&lt;/a&gt;, assertions on DOM updates resulting from state change will have to be made in a &lt;code&gt;Vue.nextTick&lt;/code&gt; callback:</source>
          <target state="translated">由于Vue &lt;a href=&quot;reactivity#Async-Update-Queue&quot;&gt;异步执行DOM更新&lt;/a&gt;，因此必须在 &lt;code&gt;Vue.nextTick&lt;/code&gt; 回调中对因状态更改而导致的DOM更新进行断言：</target>
        </trans-unit>
        <trans-unit id="a6f5eaf2601394efec9f1b3f5eff696573b84807" translate="yes" xml:space="preserve">
          <source>Since Vue doesn&amp;rsquo;t allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even with an empty value:</source>
          <target state="translated">由于Vue不允许动态添加根级反应性属性，因此您必须通过预先声明所有根级反应性数据属性（即使值为空）来初始化Vue实例：</target>
        </trans-unit>
        <trans-unit id="cfc45f2d4df51ef3c4e6ec8a40b0cd708737fd53" translate="yes" xml:space="preserve">
          <source>Since Vue doesn't allow dynamically adding root-level reactive properties, you have to initialize component instances by declaring all root-level reactive data properties upfront, even with an empty value:</source>
          <target state="translated">由于Vue不允许动态添加根级反应式属性,所以必须在前期声明所有的根级反应式数据属性来初始化组件实例,即使是空值。</target>
        </trans-unit>
        <trans-unit id="17a485dec90726f134aafab30671454807556666" translate="yes" xml:space="preserve">
          <source>Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g. &lt;code&gt;MyButton&lt;/code&gt;, &lt;code&gt;VueButton&lt;/code&gt;).</source>
          <target state="translated">由于组件名称应始终为多字，因此此约定使您不必为简单的组件包装程序（例如 &lt;code&gt;MyButton&lt;/code&gt; ， &lt;code&gt;VueButton&lt;/code&gt; ）选择任意前缀。</target>
        </trans-unit>
        <trans-unit id="ba2168060abb1674449c97121137c7602377ef42" translate="yes" xml:space="preserve">
          <source>Since components are reusable Vue instances, they accept the same options as &lt;code&gt;new Vue&lt;/code&gt;, such as &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and lifecycle hooks. The only exceptions are a few root-specific options like &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">由于组件是可重用的Vue实例，因此它们接受与 &lt;code&gt;new Vue&lt;/code&gt; 相同的选项，例如 &lt;code&gt;data&lt;/code&gt; ， &lt;code&gt;computed&lt;/code&gt; ， &lt;code&gt;watch&lt;/code&gt; ， &lt;code&gt;methods&lt;/code&gt; 和生命周期挂钩。唯一的例外是一些特定于root的选项，例如 &lt;code&gt;el&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78c28ad0018e9ae927ccd6393b355ae5a0e871fc" translate="yes" xml:space="preserve">
          <source>Since components are reusable instances, they accept the same options as a root instance, such as &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and lifecycle hooks.</source>
          <target state="translated">由于组件是可重用的实例，因此它们接受与根实例相同的选项，例如 &lt;code&gt;data&lt;/code&gt; ， &lt;code&gt;computed&lt;/code&gt; ， &lt;code&gt;watch&lt;/code&gt; ， &lt;code&gt;methods&lt;/code&gt; 和生命周期挂钩。</target>
        </trans-unit>
        <trans-unit id="2b68173db2c99b86c3a75462f226a7b75ff0f1d5" translate="yes" xml:space="preserve">
          <source>Since editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.</source>
          <target state="translated">由于编辑器通常按字母顺序组织文件,现在所有组件之间的重要关系都一目了然。</target>
        </trans-unit>
        <trans-unit id="ef79f75d79e817472bd0ed5aad52845e59dbf2e4" translate="yes" xml:space="preserve">
          <source>Since functional components are just functions, they&amp;rsquo;re much cheaper to render.</source>
          <target state="translated">由于功能组件只是功能，因此渲染起来便宜得多。</target>
        </trans-unit>
        <trans-unit id="5ca066badcd55a6324af0033eddd42706cb8d9c3" translate="yes" xml:space="preserve">
          <source>Since it&amp;rsquo;s a generic mechanism for Vue to identify nodes, the &lt;code&gt;key&lt;/code&gt; also has other uses that are not specifically tied to &lt;code&gt;v-for&lt;/code&gt;, as we will see later in the guide.</source>
          <target state="translated">由于这是Vue识别节点的通用机制，因此该 &lt;code&gt;key&lt;/code&gt; 还具有其他用途，这些用途并不专门与 &lt;code&gt;v-for&lt;/code&gt; 绑定，我们将在本指南的后面部分看到。</target>
        </trans-unit>
        <trans-unit id="edd9c569ae9e194ecf746323957f3ab3ba7b3456" translate="yes" xml:space="preserve">
          <source>Since it's a generic mechanism for Vue to identify nodes, the &lt;code&gt;key&lt;/code&gt; also has other uses that are not specifically tied to &lt;code&gt;v-for&lt;/code&gt;, as we will see later in the guide.</source>
          <target state="translated">由于这是Vue识别节点的通用机制，因此 &lt;code&gt;key&lt;/code&gt; 还具有其他用途，这些用途并不专门与 &lt;code&gt;v-for&lt;/code&gt; 绑定，正如我们将在本指南的后面部分看到的。</target>
        </trans-unit>
        <trans-unit id="57443f82252c819ca077975175ff21178e6dad24" translate="yes" xml:space="preserve">
          <source>Since the majority of unit testing frameworks are open-source, having a community that is active can be critical to some teams that will be maintaining their tests for a long period of time and needs to ensure that a project will be actively maintained. In addition, having an active community has the benefit of providing more support whenever you run into issues.</source>
          <target state="translated">由于大多数单元测试框架都是开源的,所以拥有一个活跃的社区对于一些将长期维护测试的团队来说是至关重要的,需要确保一个项目能够得到积极的维护。此外,拥有一个活跃的社区还有一个好处,那就是无论何时遇到问题都能提供更多的支持。</target>
        </trans-unit>
        <trans-unit id="c460325ca52e3630249720f5552ae7b020e4765a" translate="yes" xml:space="preserve">
          <source>Since the runtime-only builds are roughly 30% lighter-weight than their full-build counterparts, you should use it whenever you can. If you still wish to use the full build instead, you need to configure an alias in your bundler:</source>
          <target state="translated">由于仅运行时的构建体比完整构建体轻了大约 30%,所以你应该尽可能地使用它。如果你仍然希望使用完整构建,你需要在你的捆绑程序中配置一个别名。</target>
        </trans-unit>
        <trans-unit id="e62e1d6e39e14f551529b609a48c6fb619bb1df6" translate="yes" xml:space="preserve">
          <source>Since these are &lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/types/&quot;&gt;published on NPM&lt;/a&gt;, and the latest TypeScript knows how to resolve type declarations in NPM packages, this means when installed via NPM, you don&amp;rsquo;t need any additional tooling to use TypeScript with Vue.</source>
          <target state="translated">由于这些文件&lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/types/&quot;&gt;在NPM&lt;/a&gt;上发布，并且最新的TypeScript知道如何解析NPM软件包中的类型声明，因此，通过NPM安装时，不需要任何其他工具即可将TypeScript与Vue一起使用。</target>
        </trans-unit>
        <trans-unit id="4ea3d2ff946bc5b79835d964012d367a993b9ca6" translate="yes" xml:space="preserve">
          <source>Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:</source>
          <target state="translated">由于这些组件的使用频率很高,你可能想简单地将它们做成全局的,而不是到处导入。在Webpack中,一个前缀使这成为可能。</target>
        </trans-unit>
        <trans-unit id="81ea6c41142d2d55928c63e7eb3e2a9e0e6d4d96" translate="yes" xml:space="preserve">
          <source>Since unit testing advice is often framework-agnostic, here are some basic guidelines to keep in mind when evaluating which unit testing tool is best for your application.</source>
          <target state="translated">由于单元测试的建议通常是与框架无关的,因此在评估哪种单元测试工具最适合你的应用程序时,这里有一些基本的准则要牢记。</target>
        </trans-unit>
        <trans-unit id="796906cd98540356e295c43d625d24ed68862aac" translate="yes" xml:space="preserve">
          <source>Since we&amp;rsquo;re no longer using filter options that require a value to be returned, our currency work could actually be done asynchronously. That means if we had a lot of apps that had to work with currencies, we could easily refactor this logic into a shared microservice.</source>
          <target state="translated">由于我们不再使用需要返回值的过滤器选项，因此我们的货币工作实际上可以异步完成。这意味着，如果我们有很多必须使用货币的应用程序，我们可以轻松地将此逻辑重构为共享的微服务。</target>
        </trans-unit>
        <trans-unit id="a31aa77b805847e93b5d67d3ae054b43de8ddfb3" translate="yes" xml:space="preserve">
          <source>Since you don&amp;rsquo;t have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</source>
          <target state="translated">由于您不必在JS中手动附加事件侦听器，因此您的ViewModel代码可以是纯逻辑且无DOM。这使测试更加容易。</target>
        </trans-unit>
        <trans-unit id="59debd2931aa770a2b0975329d41213dcd9c5d88" translate="yes" xml:space="preserve">
          <source>Since you don&amp;rsquo;t need to know about JSX, ES2015, or build systems to get started with Vue, it also typically takes developers less than a day reading &lt;a href=&quot;../index&quot;&gt;the guide&lt;/a&gt; to learn enough to build non-trivial applications.</source>
          <target state="translated">由于您无需了解JSX，ES2015或构建系统即可开始使用Vue，因此开发人员通常也可以花不到一天的时间阅读&lt;a href=&quot;../index&quot;&gt;该指南，&lt;/a&gt;以学习足够的知识来构建非平凡的应用程序。</target>
        </trans-unit>
        <trans-unit id="357d852f90e2d7ce113320f498f17ebe31dd5a8d" translate="yes" xml:space="preserve">
          <source>Since you don't have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</source>
          <target state="translated">因为你不必在JS中手动附加事件监听器,所以你的ViewModel代码可以是纯逻辑和无DOM的。这使得测试更加容易。</target>
        </trans-unit>
        <trans-unit id="4a6e205b866dd29d282ce270191d3645216b482d" translate="yes" xml:space="preserve">
          <source>Single File Components</source>
          <target state="translated">单一文件组件</target>
        </trans-unit>
        <trans-unit id="601044cdeb8a98e639651071cf1f9dc53d97b702" translate="yes" xml:space="preserve">
          <source>Single File Components (SFCs)</source>
          <target state="translated">单一文件组件(SFC)</target>
        </trans-unit>
        <trans-unit id="0962a83153ac828504101602afbecfaf538e344c" translate="yes" xml:space="preserve">
          <source>Single Line</source>
          <target state="translated">单线</target>
        </trans-unit>
        <trans-unit id="5e7f1d7d63552994a465b38c32202f3620abe335" translate="yes" xml:space="preserve">
          <source>Single checkbox, boolean value:</source>
          <target state="translated">单个复选框,布林值。</target>
        </trans-unit>
        <trans-unit id="040f06c8b02b9ecd8ce3bcc463d52f44ab71de30" translate="yes" xml:space="preserve">
          <source>Single select:</source>
          <target state="translated">单选。</target>
        </trans-unit>
        <trans-unit id="95ef58f9b3d77202b180ce829f19b7953db91e4d" translate="yes" xml:space="preserve">
          <source>Single-file (&lt;code&gt;.vue&lt;/code&gt;) components</source>
          <target state="translated">单文件（ &lt;code&gt;.vue&lt;/code&gt; ）组件</target>
        </trans-unit>
        <trans-unit id="a0fcc7019dc5bbeb59c13b0247440b91dff10e8e" translate="yes" xml:space="preserve">
          <source>Single-file component filename casing</source>
          <target state="translated">单文件组件文件名套管</target>
        </trans-unit>
        <trans-unit id="093c716d53dd968ee64e9ba688e8285861d21500" translate="yes" xml:space="preserve">
          <source>Single-file component filename casing &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;单文件组件的文件名大小写&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="aad2c1946beed7073bd3f80b10b836af1bd801c0" translate="yes" xml:space="preserve">
          <source>Single-file component top-level element order</source>
          <target state="translated">单文件组件顶层元素顺序</target>
        </trans-unit>
        <trans-unit id="369e619c0ac6b0e41c0c5e5672725a1dad22811c" translate="yes" xml:space="preserve">
          <source>Single-file component top-level element order &lt;sup&gt;recommended&lt;/sup&gt;</source>
          <target state="translated">单文件组件顶级元素的顺序&lt;sup&gt;推荐&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="e5ab16f7ba44150cac61508afe92cbd1d1dd294b" translate="yes" xml:space="preserve">
          <source>Single-instance component names</source>
          <target state="translated">单体组件名称</target>
        </trans-unit>
        <trans-unit id="801a9b431b0affdfa69d3dd93084d1b29dae9cb0" translate="yes" xml:space="preserve">
          <source>Single-instance component names &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议&lt;/sup&gt;单实例组件名称&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="896ccfe8515d070b5a15610d907daecc5196a888" translate="yes" xml:space="preserve">
          <source>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</source>
          <target state="translated">跳过对该元素及其所有子元素的编译。你可以用它来显示原始的胡子标签。跳过大量没有指令的节点也可以加快编译速度。</target>
        </trans-unit>
        <trans-unit id="385d78391f1fa467a858f22990ead95a27284b36" translate="yes" xml:space="preserve">
          <source>Skip link</source>
          <target state="translated">跳过链接</target>
        </trans-unit>
        <trans-unit id="8ef83d38df405d6719db39be3cccd4d9524f7c92" translate="yes" xml:space="preserve">
          <source>Skipping proxy conversion can provide performance improvements when rendering large lists with immutable data sources.</source>
          <target state="translated">当渲染具有不可变数据源的大型列表时,跳过代理转换可以提供性能改进。</target>
        </trans-unit>
        <trans-unit id="083d20797ac518ecfd2d5802f11e56f053d9b2a3" translate="yes" xml:space="preserve">
          <source>Slot Content</source>
          <target state="translated">老虎机内容</target>
        </trans-unit>
        <trans-unit id="0c1a16e17517d5db584e59f03e5701a1df0aec29" translate="yes" xml:space="preserve">
          <source>Slots</source>
          <target state="translated">Slots</target>
        </trans-unit>
        <trans-unit id="f25804abff59f82911237e106d151dfd3114ae2c" translate="yes" xml:space="preserve">
          <source>Slots Unification</source>
          <target state="translated">统一老虎机</target>
        </trans-unit>
        <trans-unit id="0c05d5215c9958f423cfa89492ade3561c496be1" translate="yes" xml:space="preserve">
          <source>Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change.</source>
          <target state="translated">小型的、集中的计算属性对信息的使用方式做了较少的假设,因此随着需求的变化,需要重构的程度较低。</target>
        </trans-unit>
        <trans-unit id="270782c16d7dfcd9bacc30c93f3205da13a192a6" translate="yes" xml:space="preserve">
          <source>So even if we only render elements for a small fraction of users, we have to iterate over the entire list every time we re-render, whether or not the set of active users has changed.</source>
          <target state="translated">因此,即使我们只渲染一小部分用户的元素,我们每次重新渲染时都要对整个列表进行迭代,不管活跃用户的集合是否发生了变化。</target>
        </trans-unit>
        <trans-unit id="9efa5f0263f4584699ee25a6ef7cd96b38af2cbd" translate="yes" xml:space="preserve">
          <source>So far we&amp;rsquo;ve only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</source>
          <target state="translated">到目前为止，我们仅绑定到模板中的简单属性键。但是Vue.js实际上支持所有数据绑定中JavaScript表达式的全部功能：</target>
        </trans-unit>
        <trans-unit id="8b007e1b2fa7231d0825d38c1ab4e7b6a352ae60" translate="yes" xml:space="preserve">
          <source>So far we've only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</source>
          <target state="translated">到目前为止,我们只在模板中绑定了简单的属性键。但实际上Vue.js在所有数据绑定里面都支持JavaScript表达式的全部功能。</target>
        </trans-unit>
        <trans-unit id="fc43cc8fe805d607917adfb57b267a4c1e366e21" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve managed transitions for:</source>
          <target state="translated">到目前为止，我们已经管理了以下方面的过渡：</target>
        </trans-unit>
        <trans-unit id="9990ce27d68bc258ecfe618b1e117aba2e010d2d" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only created components using &lt;code&gt;Vue.component&lt;/code&gt;:</source>
          <target state="translated">到目前为止，我们仅使用 &lt;code&gt;Vue.component&lt;/code&gt; 创建了组件：</target>
        </trans-unit>
        <trans-unit id="67796fb098e807812b451996ffa7c37901a92525" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only seen props listed as an array of strings:</source>
          <target state="translated">到目前为止，我们只看到道具以字符串数组的形式列出：</target>
        </trans-unit>
        <trans-unit id="ad0ac718587a84d865b7fb0857b8b94c7a79d9ce" translate="yes" xml:space="preserve">
          <source>So far, we've managed transitions for:</source>
          <target state="translated">到目前为止,我们已经管理过渡为。</target>
        </trans-unit>
        <trans-unit id="c67057cf9dda632e7c53641b3af1b64f4b054c2e" translate="yes" xml:space="preserve">
          <source>So far, we've only created components using &lt;code&gt;app.component&lt;/code&gt;:</source>
          <target state="translated">到目前为止，我们仅使用 &lt;code&gt;app.component&lt;/code&gt; 创建了组件：</target>
        </trans-unit>
        <trans-unit id="f8c23af3b4bfe61992006f4f5db2569cf719ea2e" translate="yes" xml:space="preserve">
          <source>So far, we've only seen props listed as an array of strings:</source>
          <target state="translated">到目前为止,我们只看到了以字符串数组形式列出的道具。</target>
        </trans-unit>
        <trans-unit id="bcb7e6dc22797e50c31c81c6ca57f0d64cd4b40a" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve seen props passed a static value, like in:</source>
          <target state="translated">到目前为止，您已经看到道具传递了一个静态值，例如：</target>
        </trans-unit>
        <trans-unit id="bf5ea7f867584dc6f766ba242591c6f576f49d80" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve seen uses of &lt;code&gt;$emit&lt;/code&gt;, listened to with &lt;code&gt;v-on&lt;/code&gt;, but Vue instances also offer other methods in its events interface. We can:</source>
          <target state="translated">到目前为止，您已经看到 &lt;code&gt;$emit&lt;/code&gt; 用法，通过 &lt;code&gt;v-on&lt;/code&gt; 进行了监听，但是Vue实例在其事件接口中还提供了其他方法。我们可以：</target>
        </trans-unit>
        <trans-unit id="41c7973382a4579cbfc80048a0bc33b60b91461b" translate="yes" xml:space="preserve">
          <source>So far, you've seen props passed a static value, like in:</source>
          <target state="translated">到目前为止,你已经看到道具传递了一个静态值,比如在。</target>
        </trans-unit>
        <trans-unit id="e2ebedb9491240daeacbc489ddaed31b23f7f005" translate="yes" xml:space="preserve">
          <source>So how would we do this in JavaScript?</source>
          <target state="translated">那么我们如何在JavaScript中做到这一点呢?</target>
        </trans-unit>
        <trans-unit id="8d84a44b86d81a516326f9813e2b3977e997a457" translate="yes" xml:space="preserve">
          <source>So this might be a good time to refactor the &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; component to accept a single &lt;code&gt;post&lt;/code&gt; prop instead:</source>
          <target state="translated">因此，这可能是重构 &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; 组件以接受单个 &lt;code&gt;post&lt;/code&gt; 道具的好时机：</target>
        </trans-unit>
        <trans-unit id="d6aa2762b60d0919d3cc5d125c99532a28d73b78" translate="yes" xml:space="preserve">
          <source>So what about for when we have a whole list of items we want to render simultaneously, for example with &lt;code&gt;v-for&lt;/code&gt;? In this case, we&amp;rsquo;ll use the &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component. Before we dive into an example though, there are a few things that are important to know about this component:</source>
          <target state="translated">那么，当我们拥有要同时渲染的全部项目列表时（例如使用 &lt;code&gt;v-for&lt;/code&gt; ),该怎么办？在这种情况下，我们将使用 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; 组件。在进入示例之前，需要了解一些有关此组件的重要信息：</target>
        </trans-unit>
        <trans-unit id="f2e88928ec91eca02eb578a8b5e6e04b106c6623" translate="yes" xml:space="preserve">
          <source>So what about for when we have a whole list of items we want to render simultaneously, for example with &lt;code&gt;v-for&lt;/code&gt;? In this case, we'll use the &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component. Before we dive into an example though, there are a few things that are important to know about this component:</source>
          <target state="translated">那么，当我们拥有要同时渲染的全部项目列表时（例如使用 &lt;code&gt;v-for&lt;/code&gt; ),该怎么办？在这种情况下，我们将使用 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; 组件。在进入示例之前，需要了解一些有关此组件的重要信息：</target>
        </trans-unit>
        <trans-unit id="cb218e5682ecb96e10798fb908e4473d6901128c" translate="yes" xml:space="preserve">
          <source>So, &lt;code&gt;v-model&lt;/code&gt; in this case would be a shorthand to</source>
          <target state="translated">因此，在这种情况下， &lt;code&gt;v-model&lt;/code&gt; 是</target>
        </trans-unit>
        <trans-unit id="9ad052271e0186ed108ab51a2c5684a90c5a025a" translate="yes" xml:space="preserve">
          <source>Software</source>
          <target state="translated">Software</target>
        </trans-unit>
        <trans-unit id="147f6354f521a67959c12f2f8261d77ce2bb9c39" translate="yes" xml:space="preserve">
          <source>Some HTML elements, such as &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; have restrictions on what elements can appear inside them, and some elements such as &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; can only appear inside certain other elements.</source>
          <target state="translated">某些HTML元素（例如 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; )对其中可以显示哪些元素有限制，而某些元素（例如 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; )只能出现在某些其他元素内。</target>
        </trans-unit>
        <trans-unit id="9c0790e8dcd7f3a0c69aa32f511de55c1f1ea0e6" translate="yes" xml:space="preserve">
          <source>Some advantages of this convention:</source>
          <target state="translated">这一惯例的一些优点。</target>
        </trans-unit>
        <trans-unit id="2108424fbba417074fadf0d75a3e1edc693ebce6" translate="yes" xml:space="preserve">
          <source>Some argue that you&amp;rsquo;d need to learn an extra DSL (Domain-Specific Language) to be able to write templates - we believe this difference is superficial at best. First, JSX doesn&amp;rsquo;t mean the user doesn&amp;rsquo;t need to learn anything - it&amp;rsquo;s additional syntax on top of plain JavaScript, so it can be easy for someone familiar with JavaScript to learn, but saying it&amp;rsquo;s essentially free is misleading. Similarly, a template is just additional syntax on top of plain HTML and thus has very low learning cost for those who are already familiar with HTML. With the DSL we are also able to help the user get more done with less code (e.g. &lt;code&gt;v-on&lt;/code&gt; modifiers). The same task can involve a lot more code when using plain JSX or render functions.</source>
          <target state="translated">有人认为您需要学习一种额外的DSL（特定于域的语言）才能编写模板-我们认为这种区别充其量只是表面上的。首先，JSX并不意味着用户不需要学习任何东西-它是普通JavaScript之上的附加语法，因此熟悉JavaScript的人可以很容易地学习，但是说它本质上是免费的具有误导性。同样，模板只是普通HTML之上的附加语法，因此对于那些已经熟悉HTML的人来说，学习成本非常低。使用DSL，我们还可以帮助用户以更少的代码完成更多工作（例如 &lt;code&gt;v-on&lt;/code&gt; 修饰符）。使用纯JSX或渲染函数时，同一任务可能涉及更多代码。</target>
        </trans-unit>
        <trans-unit id="562b1dcca42b0018a2fd2b5ce42a0d7a33ddd0a9" translate="yes" xml:space="preserve">
          <source>Some directives can take an &quot;argument&quot;, denoted by a colon after the directive name. For example, the &lt;code&gt;v-bind&lt;/code&gt; directive is used to reactively update an HTML attribute:</source>
          <target state="translated">某些指令可以带有一个&amp;ldquo;参数&amp;rdquo;，在指令名称后用冒号表示。例如， &lt;code&gt;v-bind&lt;/code&gt; 指令用于以反应方式更新HTML属性：</target>
        </trans-unit>
        <trans-unit id="a9ef7770ac385e4eae53d066a2f3c10a8b6c4ab6" translate="yes" xml:space="preserve">
          <source>Some directives can take an &amp;ldquo;argument&amp;rdquo;, denoted by a colon after the directive name. For example, the &lt;code&gt;v-bind&lt;/code&gt; directive is used to reactively update an HTML attribute:</source>
          <target state="translated">某些指令可以带有一个&amp;ldquo;参数&amp;rdquo;，在指令名称后用冒号表示。例如， &lt;code&gt;v-bind&lt;/code&gt; 指令用于反应性地更新HTML属性：</target>
        </trans-unit>
        <trans-unit id="09428a807ec781f76bc254d725a9a4e0a2df7f8b" translate="yes" xml:space="preserve">
          <source>Some environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of &lt;code&gt;new Function()&lt;/code&gt; for evaluating expressions. The full build depends on this feature to compile templates, so is unusable in these environments.</source>
          <target state="translated">某些环境（例如Google Chrome Apps）强制执行内容安全政策（CSP），该政策禁止使用 &lt;code&gt;new Function()&lt;/code&gt; 来评估表达式。完整版本取决于此功能来编译模板，因此在这些环境中不可用。</target>
        </trans-unit>
        <trans-unit id="5a2e23d7e711dac515b3913d004594ddb71e0888" translate="yes" xml:space="preserve">
          <source>Some features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided.</source>
          <target state="translated">Vue 的一些功能是为了适应罕见的边缘情况或更平滑地从旧代码库迁移而存在的。然而,当过度使用时,它们会使您的代码更难维护,甚至成为错误的来源。这些规则揭示了潜在的风险特性,描述了什么时候以及为什么应该避免使用它们。</target>
        </trans-unit>
        <trans-unit id="d10fd1239637017ec222f508352aa84bee00680a" translate="yes" xml:space="preserve">
          <source>Some of Vue&amp;rsquo;s syntax will look very similar to AngularJS (e.g. &lt;code&gt;v-if&lt;/code&gt; vs &lt;code&gt;ng-if&lt;/code&gt;). This is because there were a lot of things that AngularJS got right and these were an inspiration for Vue very early in its development. There are also many pains that come with AngularJS however, where Vue has attempted to offer a significant improvement.</source>
          <target state="translated">Vue的某些语法看起来与AngularJS非常相似（例如 &lt;code&gt;v-if&lt;/code&gt; 与 &lt;code&gt;ng-if&lt;/code&gt; ）。这是因为AngularJS在很多方面都做对了，这些都是Vue早期开发的灵感。但是，AngularJS也有很多麻烦，Vue试图在其中进行重大改进。</target>
        </trans-unit>
        <trans-unit id="ba632b521cfadde631ed92ffd03194fe0b0a9806" translate="yes" xml:space="preserve">
          <source>Some of the current hooks have different behavior and there are also a couple new hooks.</source>
          <target state="translated">目前的一些钩子有不同的行为,也有一些新的钩子。</target>
        </trans-unit>
        <trans-unit id="823d42c9ef6472009b44bd254d2588f2ed0ae4c8" translate="yes" xml:space="preserve">
          <source>Some of the most notable differences include:</source>
          <target state="translated">一些最显著的区别包括:</target>
        </trans-unit>
        <trans-unit id="8ffb8d69071dcc932023e9c643874de3b228fccc" translate="yes" xml:space="preserve">
          <source>Some of the new features to keep an eye on in Vue 3 include:</source>
          <target state="translated">在Vue 3中需要关注的一些新功能包括。</target>
        </trans-unit>
        <trans-unit id="85976567c84aab5c4b5906f9117b4275cd11d741" translate="yes" xml:space="preserve">
          <source>Some of the sections below may also be slightly outdated due to recent updates in React 16+, and we are planning to work with the React community to revamp this section in the near future.</source>
          <target state="translated">由于React 16+最近的更新,下面的一些部分也可能略显过时,我们正计划与React社区合作,在不久的将来对这个部分进行改造。</target>
        </trans-unit>
        <trans-unit id="e66b9d4602dcda92a8811e8379102ad854fa4037" translate="yes" xml:space="preserve">
          <source>Some plugins provided by Vue.js official plugins such as &lt;code&gt;vue-router&lt;/code&gt; automatically calls &lt;code&gt;Vue.use()&lt;/code&gt; if &lt;code&gt;Vue&lt;/code&gt; is available as a global variable. However in a module environment such as CommonJS, you always need to call &lt;code&gt;Vue.use()&lt;/code&gt; explicitly:</source>
          <target state="translated">如果 &lt;code&gt;Vue&lt;/code&gt; 可用作全局变量，则Vue.js官方插件提供的某些插件（例如 &lt;code&gt;vue-router&lt;/code&gt; )会自动调用 &lt;code&gt;Vue.use()&lt;/code&gt; 。但是，在诸如CommonJS之类的模块环境中，您始终需要显式调用 &lt;code&gt;Vue.use()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d1da63849693561e71f9ebd75ce39efc2177e7c4" translate="yes" xml:space="preserve">
          <source>Some transition classes got a rename</source>
          <target state="translated">一些过渡班级得到了重新命名</target>
        </trans-unit>
        <trans-unit id="3d83d58916c1a60066e9604dcc1bcaf5d2ac577d" translate="yes" xml:space="preserve">
          <source>Some transition effects can be applied by interpolating values, for instance by binding a style to an element while an interaction occurs. Take this example for instance:</source>
          <target state="translated">一些过渡效果可以通过内插值来应用,例如,在交互发生时将样式绑定到元素上。以这个例子为例。</target>
        </trans-unit>
        <trans-unit id="a6f0483aedfa8041d28d52d5cfd531234f7cb2b4" translate="yes" xml:space="preserve">
          <source>Some unit testing frameworks, like Jest, include assertion libraries. Others, like Mocha, require you to install assertion libraries separately (usually Chai).</source>
          <target state="translated">一些单元测试框架,如Jest,包括断言库。其他的,比如Mocha,需要你单独安装断言库(通常是Chai)。</target>
        </trans-unit>
        <trans-unit id="9fe62eac7aa92f9e248fd4f6cf8a8c9817319b5d" translate="yes" xml:space="preserve">
          <source>Some users have enjoyed using two-way filters with &lt;code&gt;v-model&lt;/code&gt; to create interesting inputs with very little code. While &lt;em&gt;seemingly&lt;/em&gt; simple however, two-way filters can also hide a great deal of complexity - and even encourage poor UX by delaying state updates. Instead, components wrapping an input are recommended as a more explicit and feature-rich way of creating custom inputs.</source>
          <target state="translated">一些用户喜欢使用带有 &lt;code&gt;v-model&lt;/code&gt; 的双向滤波器来创建很少的代码即可产生有趣的输入。然而，尽管&lt;em&gt;看似&lt;/em&gt;简单，但是双向滤波器也可以隐藏很多复杂性-甚至通过延迟状态更新来鼓励不良的UX。相反，建议使用包装输入的组件作为创建自定义输入的更明确和功能更丰富的方式。</target>
        </trans-unit>
        <trans-unit id="4cae9a004355ccf1a6df3d6da4904f4188c23336" translate="yes" xml:space="preserve">
          <source>Some values simply should not be made reactive, for example a complex 3rd party class instance, or a Vue component object.</source>
          <target state="translated">有些值根本不应该被反应,例如一个复杂的第三方类实例,或者一个Vue组件对象。</target>
        </trans-unit>
        <trans-unit id="acfcec6e69b88ce4dae936b41aa1209796b17c8b" translate="yes" xml:space="preserve">
          <source>Sometimes the watched effect function will perform asynchronous side effects that need to be cleaned up when it is invalidated (i.e. state changed before the effects can be completed). The effect function receives an &lt;code&gt;onInvalidate&lt;/code&gt; function that can be used to register an invalidation callback. This invalidation callback is called when:</source>
          <target state="translated">有时，受监视的效果函数会执行异步副作用，这些异步副作用需要在无效时清除（即，在完成效果之前更改状态）。效果函数接收一个 &lt;code&gt;onInvalidate&lt;/code&gt; 函数，该函数可用于注册无效回调。在以下情况下调用此无效回调：</target>
        </trans-unit>
        <trans-unit id="49fcae08f3cb4892f8fa57884382317df412d82c" translate="yes" xml:space="preserve">
          <source>Sometimes this isn't an option, though, or we're dealing with more complex movement where in and out states need to be coordinated, so Vue offers an extremely useful utility called &lt;strong&gt;transition modes&lt;/strong&gt;:</source>
          <target state="translated">不过，有时候这不是一个选择，或者我们正在处理更复杂的运动，需要协调进出状态，因此Vue提供了一个非常有用的实用程序，称为&lt;strong&gt;过渡模式&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="a20659b05e332a0ae32621debfebacc5d1ababa5" translate="yes" xml:space="preserve">
          <source>Sometimes this works great, like when transitioning items are absolutely positioned on top of each other:</source>
          <target state="translated">有时这很好用,比如当过渡项目绝对定位在彼此之上时。</target>
        </trans-unit>
        <trans-unit id="f26fd8bf6b50010b5da928fa27ec1a70c263cd9c" translate="yes" xml:space="preserve">
          <source>Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special &lt;code&gt;$event&lt;/code&gt; variable:</source>
          <target state="translated">有时我们还需要在内联语句处理程序中访问原始DOM事件。您可以使用特殊的 &lt;code&gt;$event&lt;/code&gt; 变量将其传递给方法：</target>
        </trans-unit>
        <trans-unit id="d6217375b6f90ff03f789d0daba4c248ea0fdddd" translate="yes" xml:space="preserve">
          <source>Sometimes we may need to specify complex types for a ref's inner value. We can do that by simply passing a generic argument when calling ref to override the default inference:</source>
          <target state="translated">有时我们可能需要为 ref 的内值指定复杂的类型。我们可以在调用 ref 时简单地传递一个通用参数来覆盖默认的推理。</target>
        </trans-unit>
        <trans-unit id="f69621c7e82cd228755bd8d2542d2eb0f0d7182e" translate="yes" xml:space="preserve">
          <source>Sometimes we may need to specify complex types for a ref's inner value. We can do that succinctly by passing a generics argument when calling &lt;code&gt;ref&lt;/code&gt; to override the default inference:</source>
          <target state="translated">有时我们可能需要为ref的内部值指定复杂类型。我们可以通过在调用 &lt;code&gt;ref&lt;/code&gt; 覆盖默认推断时传递泛型参数来简洁地实现此目的：</target>
        </trans-unit>
        <trans-unit id="243d33178667f24a9efd45c6f5a214dcd9d65b22" translate="yes" xml:space="preserve">
          <source>Sometimes we need state that depends on other state - in Vue this is handled with component &lt;a href=&quot;computed#computed-properties&quot;&gt;computed properties&lt;/a&gt;. To directly create a computed value, we can use the &lt;code&gt;computed&lt;/code&gt; method: it takes a getter function and returns an immutable reactive &lt;a href=&quot;reactivity-fundamentals#creating-standalone-reactive-values-as-refs&quot;&gt;ref&lt;/a&gt; object for the returned value from the getter.</source>
          <target state="translated">有时我们需要依赖于其他状态的状态-在Vue中，这是通过组件&lt;a href=&quot;computed#computed-properties&quot;&gt;计算的属性&lt;/a&gt;来处理的。要直接创建一个计算值，我们可以使用 &lt;code&gt;computed&lt;/code&gt; 方法：它需要一个getter函数，并为getter返回的值返回一个不可变的反应性&lt;a href=&quot;reactivity-fundamentals#creating-standalone-reactive-values-as-refs&quot;&gt;ref&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="a58007ff3d542a5e64e8ab0473747490736edba5" translate="yes" xml:space="preserve">
          <source>Sometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.</source>
          <target state="translated">有时我们想显示一个数组的过滤或排序版本,而不实际突变或重置原始数据。在这种情况下,你可以创建一个计算属性来返回经过过滤或排序的数组。</target>
        </trans-unit>
        <trans-unit id="f25a04e7657c04aa0e31d2f5b48fdb386a99c532" translate="yes" xml:space="preserve">
          <source>Sometimes we want to track changes of the reactive object (&lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;reactive&lt;/code&gt;) but we also want prevent changing it from a certain place of the application. For example, when we have a &lt;a href=&quot;component-provide-inject&quot;&gt;provided&lt;/a&gt; reactive object, we want to prevent mutating it where it's injected. To do so, we can create a readonly proxy to the original object:</source>
          <target state="translated">有时我们想跟踪反应对象的变化（ &lt;code&gt;ref&lt;/code&gt; 或 &lt;code&gt;reactive&lt;/code&gt; ），但我们也想防止从应用程序的某个位置更改它。例如，当我们有一个&lt;a href=&quot;component-provide-inject&quot;&gt;提供的&lt;/a&gt;反应对象时，我们想防止在注入它的地方对其进行突变。为此，我们可以为原始对象创建一个只读代理：</target>
        </trans-unit>
        <trans-unit id="bb4776e0f84b8cab0978edcc2a16ccf37eb32d43" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to assign a number of new properties to an existing object, for example using &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;. In such cases, you should create a fresh object with properties from both objects. So instead of:</source>
          <target state="translated">有时您可能想为现有对象分配许多新属性，例如使用 &lt;code&gt;Object.assign()&lt;/code&gt; 或 &lt;code&gt;_.extend()&lt;/code&gt; 。在这种情况下，您应该使用两个对象的属性创建一个新鲜的对象。所以代替：</target>
        </trans-unit>
        <trans-unit id="4216179a7f142347ead5e8b4c8a44ddd1938267a" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to assign a number of properties to an existing object, for example using &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:</source>
          <target state="translated">有时，您可能想为现有对象分配许多属性，例如使用 &lt;code&gt;Object.assign()&lt;/code&gt; 或 &lt;code&gt;_.extend()&lt;/code&gt; 。但是，添加到对象的新属性不会触发更改。在这种情况下，请使用原始对象和mixin对象的属性创建一个新鲜的对象：</target>
        </trans-unit>
        <trans-unit id="4a3e5c479936fa0c0c3ae63c92af5bdeccbe0976" translate="yes" xml:space="preserve">
          <source>Sometimes, it&amp;rsquo;s useful for slot content to have access to data only available in the child component. For example, imagine a &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">有时，对于插槽内容访问仅在子组件中可用的数据很有用。例如，想象一个具有以下模板的 &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; 组件：</target>
        </trans-unit>
        <trans-unit id="d2dd5e9a7fd5d98bf25e0a4d4fb18f9f4c3db2f1" translate="yes" xml:space="preserve">
          <source>Sometimes, it&amp;rsquo;s useful to dynamically switch between components, like in a tabbed interface:</source>
          <target state="translated">有时，在选项卡式界面中动态切换组件非常有用：</target>
        </trans-unit>
        <trans-unit id="f98399635dcaa9fb92ae8c33f20e2898527837a6" translate="yes" xml:space="preserve">
          <source>Sometimes, it's useful for slot content to have access to data only available in the child component. It's a common case when a component is used to render an array of items, and we want to be able to customize the way each item is rendered.</source>
          <target state="translated">有时,对于槽内容来说,能够访问只有在子组件中才有的数据是很有用的。这是一种常见的情况,当一个组件被用来渲染一个项目数组时,我们希望能够自定义每个项目的渲染方式。</target>
        </trans-unit>
        <trans-unit id="8c22129f03ba057d1a81b6eb4f7dbc5cd8f53769" translate="yes" xml:space="preserve">
          <source>Sometimes, it's useful to dynamically switch between components, like in a tabbed interface:</source>
          <target state="translated">有时,在组件之间动态切换是很有用的,比如在一个标签式界面中。</target>
        </trans-unit>
        <trans-unit id="878866be830f3d4c0492c7b15ce7d3313f921fc8" translate="yes" xml:space="preserve">
          <source>Soup &lt;em&gt;of the&lt;/em&gt; day</source>
          <target state="translated">汤&lt;em&gt;中的&lt;/em&gt;一天</target>
        </trans-unit>
        <trans-unit id="d180f8bdb033e9ee4c654b9ecb9c6a807595b405" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://www.inkonhand.com/2015/10/the-serial-oxford-comma-when-and-why-to-use-it/&quot;&gt;The Serial (Oxford) Comma: When and Why To Use It (opens new window)&lt;/a&gt;</source>
          <target state="translated">来源：&lt;a href=&quot;https://www.inkonhand.com/2015/10/the-serial-oxford-comma-when-and-why-to-use-it/&quot;&gt;串行（牛津）逗号：何时以及为何使用它（在新窗口中打开）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3b9938ede233236eb1cd82e999d8e494cee5f74" translate="yes" xml:space="preserve">
          <source>Special &lt;code&gt;is&lt;/code&gt; prop usage is restricted to the reserved &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; tag only</source>
          <target state="translated">特殊的 &lt;code&gt;is&lt;/code&gt; 道具的使用仅限于保留的 &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; 标签</target>
        </trans-unit>
        <trans-unit id="9898b37c34a88e00f23e82b5e3dc9a1701903a0c" translate="yes" xml:space="preserve">
          <source>Special Attributes</source>
          <target state="translated">特殊属性</target>
        </trans-unit>
        <trans-unit id="c1844df643c3c6b29d9ebd395e5456144c913b68" translate="yes" xml:space="preserve">
          <source>Special Attributes - ref</source>
          <target state="translated">特殊属性----参考</target>
        </trans-unit>
        <trans-unit id="7f375124a7e84608fdea56b183bf085ef84dd0dd" translate="yes" xml:space="preserve">
          <source>Specifies a default value for the prop. If the prop is not passed, this value will be used instead. Object or array defaults must be returned from a factory function.</source>
          <target state="translated">为该道具指定一个默认值。如果没有传递该道具,将使用该值。对象或数组的默认值必须由工厂函数返回。</target>
        </trans-unit>
        <trans-unit id="5cf7af7c10f0573850ae6d92c49417cd3597e370" translate="yes" xml:space="preserve">
          <source>Specifies a method to recognize custom elements defined outside of Vue (e.g., using the Web Components APIs). If component matches this condition, it won't need local or global registration and Vue won't throw a warning about an &lt;code&gt;Unknown custom element&lt;/code&gt;.</source>
          <target state="translated">指定一种方法来识别在Vue之外定义的自定义元素（例如，使用Web组件API）。如果component符合此条件，则不需要本地或全局注册，并且Vue不会对 &lt;code&gt;Unknown custom element&lt;/code&gt; 发出警告。</target>
        </trans-unit>
        <trans-unit id="3d419b352796d39146919ef5966306201da0baac" translate="yes" xml:space="preserve">
          <source>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as &lt;code&gt;this.$parent&lt;/code&gt; for the child, and the child will be pushed into the parent&amp;rsquo;s &lt;code&gt;$children&lt;/code&gt; array.</source>
          <target state="translated">为要创建的实例指定父实例。在两者之间建立父子关系。父级将以孩子的 &lt;code&gt;this.$parent&lt;/code&gt; 形式访问，并且子级将被推入父级的 &lt;code&gt;$children&lt;/code&gt; 数组中。</target>
        </trans-unit>
        <trans-unit id="e4de7be6dcaca74a1df3b6f74eed72c7caf49130" translate="yes" xml:space="preserve">
          <source>Staggering List Transitions</source>
          <target state="translated">交错式列表转换</target>
        </trans-unit>
        <trans-unit id="b27a0b62f6b0f0e5d6bdbda21b8a0fe747c08c58" translate="yes" xml:space="preserve">
          <source>Standalone &lt;code&gt;computed&lt;/code&gt; properties</source>
          <target state="translated">独立 &lt;code&gt;computed&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="5ba91e4b27bd154b6feecd545db4023c8e7c12d0" translate="yes" xml:space="preserve">
          <source>Start by running the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on a current project. We&amp;rsquo;ve carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they&amp;rsquo;ll let you know, offer suggestions, and provide links to more info.</source>
          <target state="translated">首先在当前项目上运行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;迁移帮助器&lt;/a&gt;。我们已经精心压缩了小型Vue开发人员并将其压缩到一个简单的命令行界面中。每当他们发现过时的功能时，就会通知您，提供建议并提供指向更多信息的链接。</target>
        </trans-unit>
        <trans-unit id="28a4d07d95fe98bb4c6125accbb70808be25a998" translate="yes" xml:space="preserve">
          <source>Start learning Vue 3 at &lt;a href=&quot;https://www.vuemastery.com/courses-path/vue3&quot;&gt;Vue Mastery (opens new window)&lt;/a&gt;.</source>
          <target state="translated">从&lt;a href=&quot;https://www.vuemastery.com/courses-path/vue3&quot;&gt;Vue Mastery&lt;/a&gt;开始学习Vue 3（在新窗口中打开）。</target>
        </trans-unit>
        <trans-unit id="5fcf8af955dfbcfec984375c6e8f6a528e65233d" translate="yes" xml:space="preserve">
          <source>Starting in 2.3.0+ you can provide an array of multiple (prefixed) values to a style property, for example:</source>
          <target state="translated">从2.3.0+开始,你可以为一个样式属性提供一个包含多个(前缀)值的数组,例如。</target>
        </trans-unit>
        <trans-unit id="9ba53e05f135de31a97be4f79621e7c2bfae116b" translate="yes" xml:space="preserve">
          <source>Starting in 2.4.0+, &lt;code&gt;v-on&lt;/code&gt; also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.</source>
          <target state="translated">从2.4.0+开始， &lt;code&gt;v-on&lt;/code&gt; 还支持绑定到没有参数的事件/侦听器对对象。请注意，使用对象语法时，它不支持任何修饰符。</target>
        </trans-unit>
        <trans-unit id="9b9230ebf8a27183774b5eb88b79650092ee23d2" translate="yes" xml:space="preserve">
          <source>Starting in version 2.6.0, it is also possible to use a JavaScript expression in a directive argument by wrapping it with square brackets:</source>
          <target state="translated">从2.6.0版本开始,也可以在指令参数中使用JavaScript表达式,用方括号包装。</target>
        </trans-unit>
        <trans-unit id="bfa146787ba4b5ec0af7e28c9b9db98dcdf2cd1c" translate="yes" xml:space="preserve">
          <source>State Management</source>
          <target state="translated">国家管理</target>
        </trans-unit>
        <trans-unit id="d5d64221ddf91f88df67cce91813f4262eb7edaf" translate="yes" xml:space="preserve">
          <source>State Transitions</source>
          <target state="translated">状态转换</target>
        </trans-unit>
        <trans-unit id="a872ca8fe22c7e62b5337472cd220dc9385362c8" translate="yes" xml:space="preserve">
          <source>Stop listening for an event with &lt;code&gt;$off(eventName, eventHandler)&lt;/code&gt;</source>
          <target state="translated">停止使用 &lt;code&gt;$off(eventName, eventHandler)&lt;/code&gt; 监听事件</target>
        </trans-unit>
        <trans-unit id="f208c0bbf3772e76982a8bda3a5274d77fdd02bf" translate="yes" xml:space="preserve">
          <source>Stopping the Watcher</source>
          <target state="translated">停止观察者</target>
        </trans-unit>
        <trans-unit id="a59e5fba28ea5c4503821b338479233b19afe716" translate="yes" xml:space="preserve">
          <source>Store&amp;rsquo;s Event Emitter &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">商店的事件发射器&lt;sup&gt;已删除&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="d773159a1a0982856fe46c12315a0727637b7f5c" translate="yes" xml:space="preserve">
          <source>Stories of Web Users (opens new window)</source>
          <target state="translated">网络用户的故事(打开新窗口</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="91315c1968e95b4caef2bb0299209f84b45e1fa3" translate="yes" xml:space="preserve">
          <source>String templates (e.g. &lt;code&gt;template: '...'&lt;/code&gt;)</source>
          <target state="translated">字符串模板（例如 &lt;code&gt;template: '...'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="84e89cde6c5037b89a187a9f976fce4b0a1427b8" translate="yes" xml:space="preserve">
          <source>Strings are just the beginning though! Slots can also contain any template code, including HTML:</source>
          <target state="translated">不过,字符串只是一个开始!老虎机也可以包含任何模板代码,包括HTML:。老虎机也可以包含任何模板代码,包括HTML。</target>
        </trans-unit>
        <trans-unit id="e470c308e845a09614e0edbb14273cef3760f9e6" translate="yes" xml:space="preserve">
          <source>Structure Your Content</source>
          <target state="translated">构建您的内容</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">风格指南</target>
        </trans-unit>
        <trans-unit id="93b9066aa73ddae63c26874719afa6da8fe21b7f" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority A: Essential</source>
          <target state="translated">风格指南。优先事项A:基本要素</target>
        </trans-unit>
        <trans-unit id="43212530e7b38b61ce475ee08dd6944866d5239c" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority B: Strongly Recommended</source>
          <target state="translated">风格指南。优先级B:强烈建议</target>
        </trans-unit>
        <trans-unit id="dc97fc3044903277305bdcda1967fb4d1dab822e" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority C: Recommended</source>
          <target state="translated">风格指南。优先级C:建议</target>
        </trans-unit>
        <trans-unit id="b9a479a71d55ce0478bf03634c2c6dce93bce7d7" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority D: Use with Caution</source>
          <target state="translated">风格指南。优先级D。谨慎使用</target>
        </trans-unit>
        <trans-unit id="d999535d9e96f490d6db66310b5ab700b8118ee7" translate="yes" xml:space="preserve">
          <source>Style Guide: Rule Categories</source>
          <target state="translated">风格指南。规则类别</target>
        </trans-unit>
        <trans-unit id="6d65d71b782f14936232d84229a5f61207efaa2f" translate="yes" xml:space="preserve">
          <source>Such fragmentation is what makes it difficult to understand and maintain a complex component. The separation of options obscures the underlying logical concerns. In addition, when working on a single logical concern, we have to constantly &quot;jump&quot; around option blocks for the relevant code.</source>
          <target state="translated">这种零散性是使人难以理解和维护一个复杂组件的原因。选项的分离掩盖了基本的逻辑关注点。此外,在处理单一的逻辑问题时,我们不得不不断地在相关代码的选项块之间 &quot;跳跃&quot;。</target>
        </trans-unit>
        <trans-unit id="2f4d1ebbf70788826d3c9dfbc9cbeb9c0d4050de" translate="yes" xml:space="preserve">
          <source>Support for the &lt;a href=&quot;https://vuejs.org/v2/guide/components-edge-cases.html#Inline-Templates&quot;&gt;inline-template feature (opens new window)&lt;/a&gt; has been removed.</source>
          <target state="translated">为支持&lt;a href=&quot;https://vuejs.org/v2/guide/components-edge-cases.html#Inline-Templates&quot;&gt;联模板功能（打开新窗口）&lt;/a&gt;已被删除。</target>
        </trans-unit>
        <trans-unit id="25215fbc4c4e4e977ec770b409dd327c9660e279" translate="yes" xml:space="preserve">
          <source>Supporting Libraries</source>
          <target state="translated">支持图书馆</target>
        </trans-unit>
        <trans-unit id="192495a00e88072aa34a9c8967ae9a28351881dd" translate="yes" xml:space="preserve">
          <source>Supports the main content, yet is separated and meaningful on its own content</source>
          <target state="translated">支持主要内容,但又是独立的、有意义的内容。</target>
        </trans-unit>
        <trans-unit id="fbbf610d0cedad761fd69b3fc9625e259e3102c5" translate="yes" xml:space="preserve">
          <source>Suppress all Vue logs and warnings.</source>
          <target state="translated">压制所有Vue日志和警告。</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="ed4b8354b13fc6485ba3014a73af2e474df2ab5c" translate="yes" xml:space="preserve">
          <source>System Modifier Keys</source>
          <target state="translated">系统修改键</target>
        </trans-unit>
        <trans-unit id="50c8c29654572574cb09f443f4f7130974b6f7f0" translate="yes" xml:space="preserve">
          <source>TODO: example</source>
          <target state="translated">待办事项:实例</target>
        </trans-unit>
        <trans-unit id="319233f83072aefd32186de40076b6ff48598e8f" translate="yes" xml:space="preserve">
          <source>TODO: refactor to Vue 3</source>
          <target state="translated">待办事项:重构到Vue 3。</target>
        </trans-unit>
        <trans-unit id="18d12d493f249dcb697f9fc3bec6d6ad8c163bbd" translate="yes" xml:space="preserve">
          <source>Take a bounce, for instance. In CSS we have to declare each keyframe, up and down. In JavaScript, we can express all of that movement within the ease, by declaring &lt;code&gt;bounce&lt;/code&gt; in the &lt;a href=&quot;https://greensock.com/&quot;&gt;GreenSock API (GSAP) (opens new window)&lt;/a&gt; (other JS libraries have other types of easing defaults).</source>
          <target state="translated">例如，弹跳。在CSS中，我们必须上下声明每个关键帧。在JavaScript中，我们可以通过在&lt;a href=&quot;https://greensock.com/&quot;&gt;GreenSock API（GSAP）中&lt;/a&gt;声明 &lt;code&gt;bounce&lt;/code&gt; 在新窗口中打开）来表示所有这种移动（其他JS库具有其他类型的缓动默认值）。</target>
        </trans-unit>
        <trans-unit id="166b63f2d5ff9fdb1de967a0347fe8dc5241cd62" translate="yes" xml:space="preserve">
          <source>Takes a getter function and returns an immutable reactive &lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt; object for the returned value from the getter.</source>
          <target state="translated">采用getter函数，并为getter返回的值返回一个不可变的反应性&lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="c6f989572cedd84a74a07b5bf7b1664e4c8a72ec" translate="yes" xml:space="preserve">
          <source>Takes an inner value and returns a reactive and mutable ref object. The ref object has a single property &lt;code&gt;.value&lt;/code&gt; that points to the inner value.</source>
          <target state="translated">接受一个内部值并返回一个反应性且可变的ref对象。ref对象具有指向内部值的单个属性 &lt;code&gt;.value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33bb3dabb27aab83b18622439b2c5a20620a0ccf" translate="yes" xml:space="preserve">
          <source>Takes an object (reactive or plain) or a &lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt; and returns a readonly proxy to the original. A readonly proxy is deep: any nested property accessed will be readonly as well.</source>
          <target state="translated">接受一个对象（反应性或平原）或&lt;a href=&quot;refs-api#ref&quot;&gt;ref，&lt;/a&gt;并返回原始的只读代理。只读代理很深：访问的任何嵌套属性也将是只读的。</target>
        </trans-unit>
        <trans-unit id="af6c5bccdb604b94eb8ab89652fd34fcc3eb3695" translate="yes" xml:space="preserve">
          <source>Takes multiple objects containing VNode props and merges them into a single object. A newly created object is returned, the objects passed as arguments are not modified.</source>
          <target state="translated">将包含VNode道具的多个对象合并为一个对象。返回一个新创建的对象,作为参数传递的对象不会被修改。</target>
        </trans-unit>
        <trans-unit id="f9f57d40683ecffc4ca86380b17ed3c5176ebc50" translate="yes" xml:space="preserve">
          <source>Teleport</source>
          <target state="translated">Teleport</target>
        </trans-unit>
        <trans-unit id="ad764b00530e26ef237ac1f92eb62e0edb148231" translate="yes" xml:space="preserve">
          <source>Teleport provides a clean way to allow us to control under which parent in our DOM we want a piece of HTML to be rendered, without having to resort to global state or splitting this into two components.</source>
          <target state="translated">Teleport提供了一种简洁的方式,让我们能够控制在DOM中的哪个父节点下渲染一段HTML,而不必求助于全局状态或将其分割成两个组件。</target>
        </trans-unit>
        <trans-unit id="d3c9825399d84e5c262586eb382db07595391d25" translate="yes" xml:space="preserve">
          <source>Template Compilation</source>
          <target state="translated">模板汇编</target>
        </trans-unit>
        <trans-unit id="2ae67e97b00487f3f90864f310b8d29b934c3c52" translate="yes" xml:space="preserve">
          <source>Template Directives</source>
          <target state="translated">模板指令</target>
        </trans-unit>
        <trans-unit id="bba475c6198c22827306439a2203a42585619f02" translate="yes" xml:space="preserve">
          <source>Template Refs</source>
          <target state="translated">模板参考</target>
        </trans-unit>
        <trans-unit id="efb3147068725b40c3436e7283942bba6c112bbf" translate="yes" xml:space="preserve">
          <source>Template Syntax</source>
          <target state="translated">模板语法</target>
        </trans-unit>
        <trans-unit id="87f791533debd15ff2182bca9d38f5b619056fb8" translate="yes" xml:space="preserve">
          <source>Template expressions are sandboxed and only have access to a &lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/shared/src/globalsWhitelist.ts#L3&quot;&gt;whitelist of globals (opens new window)&lt;/a&gt; such as &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;. You should not attempt to access user defined globals in template expressions.</source>
          <target state="translated">模板表达式是沙盒化的，只能访问&lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/shared/src/globalsWhitelist.ts#L3&quot;&gt;全局白名单（打开新窗口），&lt;/a&gt;例如 &lt;code&gt;Math&lt;/code&gt; 和 &lt;code&gt;Date&lt;/code&gt; 。您不应尝试在模板表达式中访问用户定义的全局变量。</target>
        </trans-unit>
        <trans-unit id="a60e21f3a907038b2e4d24850447a7990f71ed0d" translate="yes" xml:space="preserve">
          <source>Template expressions are sandboxed and only have access to a &lt;a href=&quot;https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9&quot;&gt;whitelist of globals&lt;/a&gt; such as &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;. You should not attempt to access user defined globals in template expressions.</source>
          <target state="translated">模板表达式是沙盒化的，只能访问诸如 &lt;code&gt;Math&lt;/code&gt; 和 &lt;code&gt;Date&lt;/code&gt; 之类&lt;a href=&quot;https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9&quot;&gt;的全局白名单&lt;/a&gt;。您不应尝试在模板表达式中访问用户定义的全局变量。</target>
        </trans-unit>
        <trans-unit id="f92fd54659b0bd943b37f93caaa1c5a2a10a3c44" translate="yes" xml:space="preserve">
          <source>Template refs</source>
          <target state="translated">模板参考</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="a55a275aa676930d9258569485d5b38eb1196630" translate="yes" xml:space="preserve">
          <source>Terms</source>
          <target state="translated">Terms</target>
        </trans-unit>
        <trans-unit id="10f908ceba5f009dd71054f4ef6b3aaa66ff44bc" translate="yes" xml:space="preserve">
          <source>TestCafe</source>
          <target state="translated">TestCafe</target>
        </trans-unit>
        <trans-unit id="6c55cd42db1a383a6c4c9ac73304eb05e0b98335" translate="yes" xml:space="preserve">
          <source>TestCafe is a Node.js based end-to-end framework that aims to provide easy setup so that developers can focus on creating tests that are easy to write and reliable.</source>
          <target state="translated">TestCafe是一个基于Node.js的端到端框架,旨在提供简单的设置,使开发人员可以专注于创建易于编写和可靠的测试。</target>
        </trans-unit>
        <trans-unit id="b6278322851712ada779876114d43299a445fc78" translate="yes" xml:space="preserve">
          <source>TestCafe's Official Website (opens new window)</source>
          <target state="translated">TestCafe的官方网站(在新窗口打开)</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="03aaa3887a5a2deee792941da96ae7dda7d74089" translate="yes" xml:space="preserve">
          <source>Thanks to Vue&amp;rsquo;s Reactivity system, it always knows when to update (if you use it correctly). There are edge cases, however, when you might want to force an update, despite the fact that no reactive data has changed. Then there are other cases when you might want to prevent unnecessary updates.</source>
          <target state="translated">借助Vue的反应系统，它始终可以知道何时进行更新（如果正确使用的话）。但是，在某些情况下，尽管没有任何反应性数据发生更改，但您可能仍要强制进行更新。然后，在其他情况下，您可能希望防止不必要的更新。</target>
        </trans-unit>
        <trans-unit id="9d322d111908580c61e86985299bb692d828ff9a" translate="yes" xml:space="preserve">
          <source>Thanks to Vue's Reactivity system, it always knows when to update (if you use it correctly). There are edge cases, however, when you might want to force an update, despite the fact that no reactive data has changed. Then there are other cases when you might want to prevent unnecessary updates.</source>
          <target state="translated">由于Vue的Reactivity系统,它总是知道什么时候更新(如果你正确使用它)。然而,在一些边缘情况下,尽管事实上反应性数据没有发生变化,但您可能想要强制更新。还有其他情况下,你可能想防止不必要的更新。</target>
        </trans-unit>
        <trans-unit id="1cb8402824e1dedc0c9ad70f0e1846cefbab8933" translate="yes" xml:space="preserve">
          <source>Thanks to the &lt;code&gt;@enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; listener, the parent will receive the event and update the value of &lt;code&gt;postFontSize&lt;/code&gt;.</source>
          <target state="translated">感谢 &lt;code&gt;@enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; 侦听器，父级将收到事件并更新 &lt;code&gt;postFontSize&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="b5627556ef42d923efe566603e16cd6d339c54b6" translate="yes" xml:space="preserve">
          <source>Thanks to the &lt;code&gt;v-on:enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; listener, the parent will receive the event and update &lt;code&gt;postFontSize&lt;/code&gt; value.</source>
          <target state="translated">感谢 &lt;code&gt;v-on:enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; 侦听器，父级将收到事件并更新 &lt;code&gt;postFontSize&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="36e5dbb5155a7f2f18ff2f7f92eeacd1bc83b650" translate="yes" xml:space="preserve">
          <source>That means the value of &lt;code&gt;v-slot&lt;/code&gt; can actually accept any valid JavaScript expression that can appear in the argument position of a function definition. So in supported environments (&lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;modern browsers&lt;/a&gt;), you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring&lt;/a&gt; to pull out specific slot props, like so:</source>
          <target state="translated">这意味着 &lt;code&gt;v-slot&lt;/code&gt; 的值实际上可以接受可以出现在函数定义的参数位置中的任何有效JavaScript表达式。因此，在受支持的环境（&lt;a href=&quot;single-file-components&quot;&gt;单文件组件&lt;/a&gt;或&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;现代浏览器&lt;/a&gt;）中，您还可以使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015解构&lt;/a&gt;来提取特定的插槽道具，如下所示：</target>
        </trans-unit>
        <trans-unit id="27c8aa4b0bdc5143989d71993befdc85152219b3" translate="yes" xml:space="preserve">
          <source>That means the value of &lt;code&gt;v-slot&lt;/code&gt; can actually accept any valid JavaScript expression that can appear in the argument position of a function definition. So you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring (opens new window)&lt;/a&gt; to pull out specific slot props, like so:</source>
          <target state="translated">这意味着 &lt;code&gt;v-slot&lt;/code&gt; 的值实际上可以接受可以出现在函数定义的参数位置中的任何有效JavaScript表达式。因此，您还可以使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015解构（打开新窗口）&lt;/a&gt;来拉出特定的插槽道具，如下所示：</target>
        </trans-unit>
        <trans-unit id="bcb7688f15ef595e1970dc731883ce107eed33d5" translate="yes" xml:space="preserve">
          <source>That means this element:</source>
          <target state="translated">也就是说,这个要素。</target>
        </trans-unit>
        <trans-unit id="e26ac9d99d2de3a31a44d33d135f52e40dec965b" translate="yes" xml:space="preserve">
          <source>That said, it would probably make a better comparison between Vue core and Ember&amp;rsquo;s &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/templates/handlebars-basics/&quot;&gt;templating&lt;/a&gt; and &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/object-model/&quot;&gt;object model&lt;/a&gt; layers:</source>
          <target state="translated">也就是说，这可能会在Vue核心与Ember的&lt;a href=&quot;https://guides.emberjs.com/v2.10.0/templates/handlebars-basics/&quot;&gt;模板&lt;/a&gt;层和&lt;a href=&quot;https://guides.emberjs.com/v2.10.0/object-model/&quot;&gt;对象模型&lt;/a&gt;层之间进行更好的比较：</target>
        </trans-unit>
        <trans-unit id="ebe9db2fac785a6fb1584b0f003bd0d058f9da0a" translate="yes" xml:space="preserve">
          <source>That slot has access to the same instance properties (i.e. the same &quot;scope&quot;) as the rest of the template.</source>
          <target state="translated">该槽可以访问与模板其他部分相同的实例属性(即相同的 &quot;范围&quot;)。</target>
        </trans-unit>
        <trans-unit id="fd91ee6e59ac928406a857815fec4a8fd6adac41" translate="yes" xml:space="preserve">
          <source>That slot has access to the same instance properties (i.e. the same &amp;ldquo;scope&amp;rdquo;) as the rest of the template. The slot does &lt;strong&gt;not&lt;/strong&gt; have access to &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt;&amp;lsquo;s scope. For example, trying to access &lt;code&gt;url&lt;/code&gt; would not work:</source>
          <target state="translated">该插槽可以访问与模板其余部分相同的实例属性（即相同的&amp;ldquo;作用域&amp;rdquo;）。该插槽&lt;strong&gt;无权&lt;/strong&gt;访问 &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt; 的范围。例如，尝试访问 &lt;code&gt;url&lt;/code&gt; 无效：</target>
        </trans-unit>
        <trans-unit id="459dd83f2362d8a07c853704c9fdaa721e9d7d51" translate="yes" xml:space="preserve">
          <source>That template doesn&amp;rsquo;t feel great. It&amp;rsquo;s not only verbose, but we&amp;rsquo;re duplicating &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; for every heading level and will have to do the same when we add the anchor element.</source>
          <target state="translated">该模板感觉不太好。这不仅冗长，而且我们在每个标题级别都复制了 &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; ，并且在添加anchor元素时也必须这样做。</target>
        </trans-unit>
        <trans-unit id="40ca5f9431c8b1d278ec924f34122ffafff7e4e3" translate="yes" xml:space="preserve">
          <source>That was rather quick and requires some knowledge of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;Proxies (opens new window)&lt;/a&gt; to understand! So let&amp;rsquo;s dive in a bit. There&amp;rsquo;s a lot of literature on Proxies, but what you really need to know is that a &lt;strong&gt;Proxy is an object that encases another object or function and allows you to intercept it.&lt;/strong&gt;</source>
          <target state="translated">这相当快，并且需要一些&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;代理&lt;/a&gt;知识（在新窗口中打开）才能理解！因此，让我们潜入一点。关于代理的文献很多，但是您真正需要知道的是&lt;strong&gt;代理是一个包含另一个对象或函数并允许您对其进行拦截的对象。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0e76918c986bcb84adf08fee89b468d3a1fda00" translate="yes" xml:space="preserve">
          <source>That won&amp;rsquo;t work, however, because only the &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; component has access to the &lt;code&gt;user&lt;/code&gt; and the content we&amp;rsquo;re providing is rendered in the parent.</source>
          <target state="translated">但是，这是行不通的，因为只有 &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; 组件有权访问 &lt;code&gt;user&lt;/code&gt; ，而我们提供的内容在父级中呈现。</target>
        </trans-unit>
        <trans-unit id="42b1a4945329f894f6cd581118c84d29929b3eb9" translate="yes" xml:space="preserve">
          <source>That won't work, however, because only the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component has access to the &lt;code&gt;item&lt;/code&gt; and we are providing the slot content from its parent.</source>
          <target state="translated">但是，这是行不通的，因为只有 &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; 组件可以访问该 &lt;code&gt;item&lt;/code&gt; 并且我们从其父项提供了广告位内容。</target>
        </trans-unit>
        <trans-unit id="f7e6eaf815a0b389b506fd9203ee98688ac385cc" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about DOM template parsing caveats for now &amp;ndash; and actually, the end of Vue&amp;rsquo;s &lt;em&gt;Essentials&lt;/em&gt;. Congratulations! There&amp;rsquo;s still more to learn, but first, we recommend taking a break to play with Vue yourself and build something fun.</source>
          <target state="translated">到目前为止，您只需要了解有关DOM模板解析警告的全部信息，实际上，这就是Vue &lt;em&gt;Essentials&lt;/em&gt;的结尾。恭喜你！还有更多的东西要学习，但是首先，我们建议您休息一下，自己动手玩Vue并创造一些有趣的东西。</target>
        </trans-unit>
        <trans-unit id="e65f913a2b8930db25e11b615901938e35677612" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about custom component events for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-custom-events&quot;&gt;Custom Events&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关自定义组件事件的全部信息，但是一旦您阅读完该页面并对其内容感到满意后，我们建议稍后再阅读以阅读有关&lt;a href=&quot;components-custom-events&quot;&gt;自定义事件&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="814dc84544fcf8f9ba3af47bc369c70717b8fdfa" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about dynamic components for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-dynamic-async&quot;&gt;Dynamic &amp;amp; Async Components&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关动态组件的全部信息，但是一旦您阅读完该页面并且对它的内容感到满意之后，我们建议稍后再回来阅读有关&lt;a href=&quot;components-dynamic-async&quot;&gt;Dynamic＆Async Components&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="1370785d9557daacd2793450c22d6061fa0adbc6" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about props for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-props&quot;&gt;Props&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关道具的全部信息，但是一旦阅读完此页并对其内容感到满意后，我们建议稍后再回来阅读有关&lt;a href=&quot;components-props&quot;&gt;道具&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="1e701db7e6d05f9288626f8d97a85fc554f9593e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about registration for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-registration&quot;&gt;Component Registration&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关注册的全部信息，但是一旦您阅读完本页面并对其内容感到满意后，我们建议稍后再阅读有关&lt;a href=&quot;components-registration&quot;&gt;组件注册&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="8e7ac0de9bc7b2393fad83ed8e57aa35094e7cc2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about slots for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-slots&quot;&gt;Slots&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关插槽的全部信息即可，但是一旦您阅读完此页并对其内容感到满意后，我们建议稍后再阅读以阅读有关&lt;a href=&quot;components-slots&quot;&gt;插槽&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="6f39b1bdd26be7312e776a774c103e8b83e7cb1a" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why for any complex logic, you should use a &lt;strong&gt;computed property&lt;/strong&gt;.</source>
          <target state="translated">这就是为什么对于任何复杂的逻辑，都应该使用&lt;strong&gt;计算属性&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3b16487797e90834fa5c92964e14dabbe10606c8" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why instead, we recommend emitting events in the pattern of &lt;code&gt;update:myPropName&lt;/code&gt;. For example, in a hypothetical component with a &lt;code&gt;title&lt;/code&gt; prop, we could communicate the intent of assigning a new value with:</source>
          <target state="translated">因此，我们建议使用 &lt;code&gt;update:myPropName&lt;/code&gt; 模式发出事件。例如，在一个带有 &lt;code&gt;title&lt;/code&gt; 属性的假想组件中，我们可以通过以下方式传达分配新值的意图：</target>
        </trans-unit>
        <trans-unit id="996c0c7a918cb9833eb237973fce54baee6b3199" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why there&amp;rsquo;s a &lt;a href=&quot;https://github.com/vuejs/jsx&quot;&gt;Babel plugin&lt;/a&gt; to use JSX with Vue, getting us back to a syntax that&amp;rsquo;s closer to templates:</source>
          <target state="translated">这就是为什么有一个&lt;a href=&quot;https://github.com/vuejs/jsx&quot;&gt;Babel插件&lt;/a&gt;在Vue中使用JSX 的原因，使我们回到了更接近模板的语法：</target>
        </trans-unit>
        <trans-unit id="ad7c55b719b44c49b49edeaa4e2789ec22bd2ca2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why we offer a full system for rapid Vue.js development. &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI&lt;/a&gt; aims to be the standard tooling baseline for the Vue ecosystem. It ensures the various build tools work smoothly together with sensible defaults so you can focus on writing your app instead of spending hours wrangling with configurations. At the same time, it still offers the flexibility to tweak the configuration of each tool to specific needs.</source>
          <target state="translated">这就是为什么我们提供用于快速Vue.js开发的完整系统的原因。&lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI的&lt;/a&gt;目标是成为Vue生态系统的标准工具基线。它可确保各种构建工具与合理的默认设置一起顺利运行，因此您可以专注于编写应用程序，而不必花费大量时间进行配置。同时，它仍然提供了灵活性，可以根据特定需要调整每个工具的配置。</target>
        </trans-unit>
        <trans-unit id="bba91aec83e99447744160b88bf3ba0ab32b499e" translate="yes" xml:space="preserve">
          <source>That's all you need to know about DOM template parsing caveats for now - and actually, the end of Vue's &lt;em&gt;Essentials&lt;/em&gt;. Congratulations! There's still more to learn, but first, we recommend taking a break to play with Vue yourself and build something fun.</source>
          <target state="translated">这就是您现在需要了解的有关DOM模板解析警告的全部信息-实际上，这就是Vue &lt;em&gt;Essentials&lt;/em&gt;的结尾。恭喜你！还有很多东西要学习，但是首先，我们建议您休息一下，与Vue一起玩，并创造一些有趣的东西。</target>
        </trans-unit>
        <trans-unit id="d5b93f49048dd9b725a716b45c67fedfd58d6b11" translate="yes" xml:space="preserve">
          <source>That's all you need to know about custom component events for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-custom-events&quot;&gt;Custom Events&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关自定义组件事件的全部信息，但是一旦您阅读完此页面并对其内容感到满意后，我们建议稍后再阅读以阅读有关&lt;a href=&quot;component-custom-events&quot;&gt;自定义事件&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="e0accce133742657fa043ef7d74e9679b32ef231" translate="yes" xml:space="preserve">
          <source>That's all you need to know about dynamic components for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-dynamic-async&quot;&gt;Dynamic &amp;amp; Async Components&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关动态组件的全部信息，但是一旦您阅读完该页面并且对它的内容感到满意之后，我们建议稍后再回来阅读有关&lt;a href=&quot;component-dynamic-async&quot;&gt;Dynamic＆Async Components&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="94a1c23c246a38952fa29f092346ab4e24f7ead2" translate="yes" xml:space="preserve">
          <source>That's all you need to know about props for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-props&quot;&gt;Props&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关道具的所有信息，但是一旦您阅读完此页面并对其内容感到满意后，我们建议稍后再回来阅读有关&lt;a href=&quot;component-props&quot;&gt;道具&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="7a64868a5bbef5500d81de810e0706920f9d3be1" translate="yes" xml:space="preserve">
          <source>That's all you need to know about registration for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-registration&quot;&gt;Component Registration&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关注册的全部信息，但是一旦阅读完此页并对其内容感到满意后，我们建议稍后再阅读以阅读有关&lt;a href=&quot;component-registration&quot;&gt;Component Registration&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="c7d253078876f24169567da70107c04eb1ce5f8f" translate="yes" xml:space="preserve">
          <source>That's all you need to know about slots for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-slots&quot;&gt;Slots&lt;/a&gt;.</source>
          <target state="translated">到目前为止，您只需要了解有关插槽的全部信息即可，但是一旦您阅读完此页并对其内容感到满意后，我们建议稍后再阅读以阅读有关&lt;a href=&quot;component-slots&quot;&gt;插槽&lt;/a&gt;的完整指南。</target>
        </trans-unit>
        <trans-unit id="9cf2ae773074cc55199394b6b9682fe8b4e4cd25" translate="yes" xml:space="preserve">
          <source>That's why for complex logic that includes reactive data, you should use a &lt;strong&gt;computed property&lt;/strong&gt;.</source>
          <target state="translated">这就是为什么对于包含反应性数据的复杂逻辑，应使用&lt;strong&gt;计算属性的原因&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="65dd67615a2c35df2f233f7e1f18e52094ea1893" translate="yes" xml:space="preserve">
          <source>That's why there's a &lt;a href=&quot;https://github.com/vuejs/jsx-next&quot;&gt;Babel plugin (opens new window)&lt;/a&gt; to use JSX with Vue, getting us back to a syntax that's closer to templates:</source>
          <target state="translated">这就是为什么有一个&lt;a href=&quot;https://github.com/vuejs/jsx-next&quot;&gt;Babel插件（在新窗口中打开）&lt;/a&gt;将JSX与Vue结合使用的原因，使我们回到了更接近模板的语法：</target>
        </trans-unit>
        <trans-unit id="380f6acd2ffeb81256b1988e0d724bdacc81b791" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../composition-api-provide-inject&quot;&gt;inject&lt;/a&gt; API can be used inside default functions.</source>
          <target state="translated">该&lt;a href=&quot;../composition-api-provide-inject&quot;&gt;注入&lt;/a&gt;API可以在里面默认的功能一起使用。</target>
        </trans-unit>
        <trans-unit id="e8054cccceec827f8cba34b7a1b6bd02a65cd67d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;guide/installation&quot;&gt;Installation&lt;/a&gt; page provides more options of installing Vue. Note: We &lt;strong&gt;do not&lt;/strong&gt; recommend that beginners start with &lt;code&gt;vue-cli&lt;/code&gt;, especially if you are not yet familiar with Node.js-based build tools.</source>
          <target state="translated">在&lt;a href=&quot;guide/installation&quot;&gt;安装&lt;/a&gt;页面提供安装Vue公司的更多选择。注意：我们&lt;strong&gt;不&lt;/strong&gt;建议初学者以 &lt;code&gt;vue-cli&lt;/code&gt; 开头，尤其是在您尚未熟悉基于Node.js的构建工具的情况下。</target>
        </trans-unit>
        <trans-unit id="a5ab4cb7708169e37819b6bac8b1dd32c12097a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/pluralize&quot;&gt;pluralize&lt;/a&gt; package on NPM serves this purpose nicely, but if you only want to pluralize a specific word or want to have special output for cases like &lt;code&gt;0&lt;/code&gt;, then you can also easily define your own pluralize functions. For example:</source>
          <target state="translated">NPM上的&lt;a href=&quot;https://www.npmjs.com/package/pluralize&quot;&gt;pluralize&lt;/a&gt;软件包很好地满足了此目的，但是如果您只想对特定单词进行复数处理，或者想为 &lt;code&gt;0&lt;/code&gt; 等情况提供特殊的输出，那么您也可以轻松定义自己的复数函数。例如：</target>
        </trans-unit>
        <trans-unit id="d9164352c56312292582372111c07ba7f53f47ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$children&lt;/code&gt; instance property has been removed from Vue 3.0 and is no longer supported.</source>
          <target state="translated">在 &lt;code&gt;$children&lt;/code&gt; 实例属性已经从Vue公司3.0移除，不再支持。</target>
        </trans-unit>
        <trans-unit id="96eefbbce0803602164da064c9e1efcc96fb085c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$listeners&lt;/code&gt; object has been removed in Vue 3. Event listeners are now part of &lt;code&gt;$attrs&lt;/code&gt;:</source>
          <target state="translated">在 &lt;code&gt;$listeners&lt;/code&gt; 对象已在Vue公司被删除3.事件监听器现在的一部分 &lt;code&gt;$attrs&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="05878157178d05a4e01a1c89173d306a9458b9ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$route&lt;/code&gt; property is now reactive, so you can use a watcher to react to route changes, like this:</source>
          <target state="translated">在 &lt;code&gt;$route&lt;/code&gt; 属性现在被动的，所以你可以使用一个观察者反应路由变化，就像这样：</target>
        </trans-unit>
        <trans-unit id="26e5d2730ae73e0e0de2df953cf2ee3a5fad3d02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; will be the actual link (and will get the correct href), but the active class will be applied to the outer &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 将实际的链接（和将获得正确的HREF），但活性的类将被施加到外 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1c768384d9ec752c708894881ada4881202a8fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will not be visible until the compilation is done.</source>
          <target state="translated">该 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ，直到编译完成将不可见。</target>
        </trans-unit>
        <trans-unit id="6726c886cd7d1313872ea34b72b56e9373d396cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; component might define a &lt;code&gt;map&lt;/code&gt; property that all subcomponents need access to. In this case &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; might want to access that map with something like &lt;code&gt;this.$parent.getMap&lt;/code&gt;, in order to add a set of markers to it. You can see this pattern &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/ttzutdxh/&quot;&gt;in action here&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; 组分可以定义一个 &lt;code&gt;map&lt;/code&gt; 属性，所有子组件需要访问。在这种情况下， &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; 可能希望使用 &lt;code&gt;this.$parent.getMap&lt;/code&gt; 类的内容访问该地图，以便向其添加一组标记。您可以&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/ttzutdxh/&quot;&gt;在这里&lt;/a&gt;看到这种模式的作用。</target>
        </trans-unit>
        <trans-unit id="a2c8e1e0505ab8b6ddf5d40dd395dc7902e3cf56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component's related prop names are also changed:</source>
          <target state="translated">该 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 组件的相关道具名称也发生了变化：</target>
        </trans-unit>
        <trans-unit id="780604d1e5198fdcc94939f3a317c58b142346c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component has another trick up its sleeve. It can not only animate entering and leaving, but also changes in position. The only new concept you need to know to use this feature is the addition of &lt;strong&gt;the &lt;code&gt;v-move&lt;/code&gt; class&lt;/strong&gt;, which is added when items are changing positions. Like the other classes, its prefix will match the value of a provided &lt;code&gt;name&lt;/code&gt; attribute and you can also manually specify a class with the &lt;code&gt;move-class&lt;/code&gt; attribute.</source>
          <target state="translated">所述 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; 部件具有另一特技了它的袖子。它不仅可以动画进入和离开，还可以改变位置。使用此功能所需了解的唯一新概念是添加&lt;strong&gt;了 &lt;code&gt;v-move&lt;/code&gt; 类&lt;/strong&gt;，&lt;strong&gt;该类&lt;/strong&gt;在项目更改位置时添加。与其他类一样，其前缀将与提供的 &lt;code&gt;name&lt;/code&gt; 属性的值匹配，并且您也可以使用 &lt;code&gt;move-class&lt;/code&gt; 属性手动指定一个类。</target>
        </trans-unit>
        <trans-unit id="606648505385790cf915adeb72e619634753fda2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.camel&lt;/code&gt; modifier allows camelizing a &lt;code&gt;v-bind&lt;/code&gt; attribute name when using in-DOM templates, e.g. the SVG &lt;code&gt;viewBox&lt;/code&gt; attribute:</source>
          <target state="translated">该 &lt;code&gt;.camel&lt;/code&gt; 修饰符允许骆驼源一个 &lt;code&gt;v-bind&lt;/code&gt; 属性名称使用-DOM模板时，如SVG &lt;code&gt;viewBox&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="b9f947cb89a1b3d04c28ecc1fa1b5146bc308109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.exact&lt;/code&gt; modifier allows control of the exact combination of system modifiers needed to trigger an event.</source>
          <target state="translated">所述 &lt;code&gt;.exact&lt;/code&gt; 修饰符允许触发一个事件所需的系统改性剂的确切组合的控制。</target>
        </trans-unit>
        <trans-unit id="71dc161e02d764cb61bccce7f7216e558eea41ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.literal&lt;/code&gt; modifier has been removed, as the same can be easily achieved by providing a string literal as the value.</source>
          <target state="translated">所述 &lt;code&gt;.literal&lt;/code&gt; 改性剂已被去除，如同样可以通过提供一个字符串作为值可以容易地实现。</target>
        </trans-unit>
        <trans-unit id="308a478daa47f802fcf7064044194b241f15c334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt; has been removed.</source>
          <target state="translated">&lt;code&gt;v-on&lt;/code&gt; 的 &lt;code&gt;.native&lt;/code&gt; 修饰符已被删除。</target>
        </trans-unit>
        <trans-unit id="3becf1ee2ca90a6fc101f76e8887a18559adb41a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt; has been removed. At the same time, the &lt;a href=&quot;emits-option&quot;&gt;new &lt;code&gt;emits&lt;/code&gt; option&lt;/a&gt; allows the child to define which events it does indeed emit.</source>
          <target state="translated">&lt;code&gt;v-on&lt;/code&gt; 的 &lt;code&gt;.native&lt;/code&gt; 修饰符已删除。同时，&lt;a href=&quot;emits-option&quot;&gt;新的&amp;ldquo;&lt;/a&gt; &lt;code&gt;emits&lt;/code&gt; 选项允许孩子定义确实发出的事件。</target>
        </trans-unit>
        <trans-unit id="447f18c9c1ff6544a5bf8da7ab660de9c45d00c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.passive&lt;/code&gt; modifier is especially useful for improving performance on mobile devices.</source>
          <target state="translated">该 &lt;code&gt;.passive&lt;/code&gt; 改性剂对提高移动设备的性能特别有用。</target>
        </trans-unit>
        <trans-unit id="21fd043aec56c5be7446f861bc772ebd8e753810" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.sync&lt;/code&gt; modifier can also be used with &lt;code&gt;v-bind&lt;/code&gt; when using an object to set multiple props at once:</source>
          <target state="translated">使用对象一次设置多个道具时， &lt;code&gt;.sync&lt;/code&gt; 修饰符还可与 &lt;code&gt;v-bind&lt;/code&gt; 一起使用：</target>
        </trans-unit>
        <trans-unit id="e59003918037a8c1f8920574ddef9a77cb026920" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeDestroy&lt;/code&gt; lifecycle option has been renamed to &lt;code&gt;beforeUnmount&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;beforeDestroy&lt;/code&gt; 生命周期选项已更名为 &lt;code&gt;beforeUnmount&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3817e7666ae6c3a405c0d45307315403fffca57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; object is a normal JavaScript object, i.e., it is not reactive, this means you can safely use ES6 destructuring on &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;context&lt;/code&gt; 对象是一个普通的JavaScript对象，也就是说，它不是被动的，这意味着你可以放心地使用上解构ES6 &lt;code&gt;context&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1e7e4a79aa1bc3f195e7a97ea550fd689981561f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option for a component is a function. Vue calls this function as part of creating a new component instance. It should return an object, which Vue will then wrap in its reactivity system and store on the component instance as &lt;code&gt;$data&lt;/code&gt;. For convenience, any top-level properties of that object are also exposed directly via the component instance:</source>
          <target state="translated">组件的 &lt;code&gt;data&lt;/code&gt; 选项是一个函数。Vue在创建新的组件实例的过程中调用此函数。它应该返回一个对象，然后Vue将其包装在其反应性系统中，并以 &lt;code&gt;$data&lt;/code&gt; 存储在组件实例上。为了方便起见，该对象的所有顶级属性也直接通过组件实例公开：</target>
        </trans-unit>
        <trans-unit id="db8c8dfe01e42917e2ff4e19582c833d9aa41cd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option from mixins is now merged shallowly</source>
          <target state="translated">现在，mixin的 &lt;code&gt;data&lt;/code&gt; 选项已被浅层合并</target>
        </trans-unit>
        <trans-unit id="9e095d28c13325b0a2ff9afba855f773d35b3336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option should always be declared as a function</source>
          <target state="translated">该 &lt;code&gt;data&lt;/code&gt; 选项应始终被声明为函数</target>
        </trans-unit>
        <trans-unit id="af4723e87f8fb0a7081e311e56df5dd95f823b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defineAsyncComponent&lt;/code&gt; method can also return an object of the following format:</source>
          <target state="translated">该 &lt;code&gt;defineAsyncComponent&lt;/code&gt; 方法还可以返回下列格式的一个目的：</target>
        </trans-unit>
        <trans-unit id="d697a25010441d0b264cc1f141099db64aff1db9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destroyed&lt;/code&gt; lifecycle option has been renamed to &lt;code&gt;unmounted&lt;/code&gt;</source>
          <target state="translated">已 &lt;code&gt;destroyed&lt;/code&gt; 生命周期选项已重命名为 &lt;code&gt;unmounted&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d4df5e8123b51efba1d697cb7ba9ffc8b699b38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disabled&lt;/code&gt; attribute will be included if &lt;code&gt;isButtonDisabled&lt;/code&gt; has a truthy value. It will also be included if the value is an empty string, maintaining consistency with &lt;code&gt;&amp;lt;button disabled=&quot;&quot;&amp;gt;&lt;/code&gt;. For other falsy values the attribute will be omitted.</source>
          <target state="translated">该 &lt;code&gt;disabled&lt;/code&gt; 属性将被列入如果 &lt;code&gt;isButtonDisabled&lt;/code&gt; 有truthy值。如果值是一个空字符串，也将包括在内，并与 &lt;code&gt;&amp;lt;button disabled=&quot;&quot;&amp;gt;&lt;/code&gt; 保持一致。对于其他伪造的值，该属性将被省略。</target>
        </trans-unit>
        <trans-unit id="c3321d11e9ef44eba8d358a3614e37323b934b17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; option has been removed. Event handlers should now be registered in the &lt;code&gt;created&lt;/code&gt; hook instead. Check out the &lt;a href=&quot;#dispatch-and-broadcast-replaced&quot;&gt;&lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt; migration guide&lt;/a&gt; for a detailed example.</source>
          <target state="translated">该 &lt;code&gt;events&lt;/code&gt; 选项已被删除。现在应将事件处理程序注册在 &lt;code&gt;created&lt;/code&gt; 钩子中。查看&lt;a href=&quot;#dispatch-and-broadcast-replaced&quot;&gt; &lt;code&gt;$dispatch&lt;/code&gt; 和 &lt;code&gt;$broadcast&lt;/code&gt; 迁移指南&lt;/a&gt;中的详细示例。</target>
        </trans-unit>
        <trans-unit id="969a6bb824b842ffc1d346a7247789e1a861039f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; option allows for greater control over the timing of the callback. It can be set to &lt;code&gt;'pre'&lt;/code&gt;, &lt;code&gt;'post'&lt;/code&gt; or &lt;code&gt;'sync'&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;flush&lt;/code&gt; 选项允许在回调的定时的控制。可以将其设置为 &lt;code&gt;'pre'&lt;/code&gt; ， &lt;code&gt;'post'&lt;/code&gt; 或 &lt;code&gt;'sync'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e86635a9e983287d162b8578aa3c62a8c5b94caa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; option also accepts &lt;code&gt;'sync'&lt;/code&gt;, which forces the effect to always trigger synchronously. This is however inefficient and should be rarely needed.</source>
          <target state="translated">该 &lt;code&gt;flush&lt;/code&gt; 选项也接受 &lt;code&gt;'sync'&lt;/code&gt; ，其力量总是效果触发同步。但是，这效率低下，几乎不需要。</target>
        </trans-unit>
        <trans-unit id="de0062f9c0b75b81c6ff6fcf7a3ca6dc7650b1ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;h()&lt;/code&gt; function is a utility to create VNodes. It could perhaps more accurately be named &lt;code&gt;createVNode()&lt;/code&gt;, but it's called &lt;code&gt;h()&lt;/code&gt; due to frequent use and for brevity. It accepts three arguments:</source>
          <target state="translated">的 &lt;code&gt;h()&lt;/code&gt; 函数是一个实用程序来创建的vnode。也许可以更准确地将其命名为 &lt;code&gt;createVNode()&lt;/code&gt; ，但由于使用频繁且简洁起见，因此将其称为 &lt;code&gt;h()&lt;/code&gt; 。它接受三个参数：</target>
        </trans-unit>
        <trans-unit id="2b7c4b5febaa054c2d70f2972911d81840dc234e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-out&lt;/code&gt; mode isn&amp;rsquo;t used as often, but can sometimes be useful for a slightly different transition effect. Let&amp;rsquo;s try combining it with the slide-fade transition we worked on earlier:</source>
          <target state="translated">的 &lt;code&gt;in-out&lt;/code&gt; 模式没有用作经常，但有时可以用于略微不同的过渡效果是有用的。让我们尝试将其与我们之前进行的幻灯片淡入淡出过渡结合起来：</target>
        </trans-unit>
        <trans-unit id="7bb2562df8be00932287fedd76a233d44e708651" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an Array:</source>
          <target state="translated">该 &lt;code&gt;include&lt;/code&gt; 和 &lt;code&gt;exclude&lt;/code&gt; 道具允许组件有条件缓存。这两个道具可以是逗号分隔的字符串，RegExp或数组：</target>
        </trans-unit>
        <trans-unit id="ad43de9f1a6b8ce8e7970eab3f6c424fa974ff41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an array:</source>
          <target state="translated">该 &lt;code&gt;include&lt;/code&gt; 和 &lt;code&gt;exclude&lt;/code&gt; 道具允许组件有条件缓存。这两个道具可以是逗号分隔的字符串，RegExp或数组：</target>
        </trans-unit>
        <trans-unit id="3005dd7e3a2ab19b9c3f238f5cffc41fda2a00f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; function takes two parameters:</source>
          <target state="translated">该 &lt;code&gt;inject&lt;/code&gt; 函数有两个参数：</target>
        </trans-unit>
        <trans-unit id="4cd088c8b9dd70d20f540d863e4827655ef4afc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; option should be either:</source>
          <target state="translated">该 &lt;code&gt;inject&lt;/code&gt; 的选择应该是：</target>
        </trans-unit>
        <trans-unit id="582a8cbd2aa999f85f97f4835ddb07fec729cd60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is primarily used as a hint for Vue&amp;rsquo;s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</source>
          <target state="translated">在 &lt;code&gt;key&lt;/code&gt; 特殊属性主要用作Vue公司的虚拟DOM算法的提示版本比较不服老的列表中节点的新列表时识别虚拟节点。在没有键的情况下，Vue使用的算法可最大程度地减少元素移动，并尝试尽可能地就地修补/重复使用相同类型的元素。使用键，它将根据键的顺序更改对元素进行重新排序，并且不再具有键的元素将始终被删除/销毁。</target>
        </trans-unit>
        <trans-unit id="d96a4b8a73cec33e818285f7909aa04171e0d11e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</source>
          <target state="translated">在 &lt;code&gt;key&lt;/code&gt; 特殊属性主要用作Vue公司的虚拟DOM算法的提示版本比较不服老的列表中节点的新列表时识别虚拟节点。在没有键的情况下，Vue使用的算法可最大程度地减少元素移动，并尝试尽可能地就地修补/重复使用相同类型的元素。使用键，它将根据键的顺序更改来对元素重新排序，并且具有不再存在的键的元素将始终被删除/销毁。</target>
        </trans-unit>
        <trans-unit id="30bb23e5f1c97d21a94fbab93c3793896e2b9fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is used as a hint for Vue's virtual DOM algorithm to keep track of a node's identity. That way, Vue knows when it can reuse and patch existing nodes and when it needs to reorder or recreate them. For more information, see the following sections:</source>
          <target state="translated">在 &lt;code&gt;key&lt;/code&gt; 特殊属性被用作Vue公司的虚拟DOM算法的提示来跟踪一个节点的身份。这样，Vue知道何时可以重用和修补现有节点以及何时需要重新排序或重新创建它们。有关更多信息，请参见以下部分：</target>
        </trans-unit>
        <trans-unit id="dc118214d9d96bdcdab86a3dcf6dbc36ea6680a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lazy&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; param attributes are now modifiers, to make it more clear what That means instead of:</source>
          <target state="translated">现在， &lt;code&gt;lazy&lt;/code&gt; 和 &lt;code&gt;number&lt;/code&gt; 参数属性是修饰符，以便更清楚地表示其含义，而不是：</target>
        </trans-unit>
        <trans-unit id="8fd9123a4c3c6ce18d253d0bcbec98386329eae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mixins&lt;/code&gt; option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the certain option merging logic. For example, if your mixin contains a &lt;code&gt;created&lt;/code&gt; hook and the component itself also has one, both functions will be called.</source>
          <target state="translated">的 &lt;code&gt;mixins&lt;/code&gt; 选项接受混入对象的数组。这些混合对象可以包含与普通实例对象一样的实例选项，并且它们将使用特定的选项合并逻辑与最终选项进行合并。例如，如果您的mixin包含一个已 &lt;code&gt;created&lt;/code&gt; 钩子，而组件本身也有一个钩子，则两个函数都将被调用。</target>
        </trans-unit>
        <trans-unit id="cb26d534e1e0fd7dab034b343fe732f25ec4cdc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mixins&lt;/code&gt; option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in &lt;code&gt;Vue.extend()&lt;/code&gt;. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</source>
          <target state="translated">的 &lt;code&gt;mixins&lt;/code&gt; 选项接受混入对象的数组。这些mixin对象可以包含类似于普通实例对象的实例选项，并且它们将使用 &lt;code&gt;Vue.extend()&lt;/code&gt; 中相同的选项合并逻辑与最终选项进行合并。例如，如果您的mixin包含一个已创建的钩子，并且组件本身也有一个钩子，则将调用这两个函数。</target>
        </trans-unit>
        <trans-unit id="c5119adb901a78417da1a1946bb932ea415212f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onTrack&lt;/code&gt; and &lt;code&gt;onTrigger&lt;/code&gt; options can be used to debug a watcher's behavior.</source>
          <target state="translated">在 &lt;code&gt;onTrack&lt;/code&gt; 和 &lt;code&gt;onTrigger&lt;/code&gt; 选项可以用来调试观察者的行为。</target>
        </trans-unit>
        <trans-unit id="92db55e5b0a5d20b12b2f4b8d1e519e5a5e38d14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;props&lt;/code&gt; object is immutable for userland code during development (will emit warning if user code attempts to mutate it).</source>
          <target state="translated">的 &lt;code&gt;props&lt;/code&gt; 目的是开发过程中不可变为用户级代码（将发出警告，如果用户代码试图突变它）。</target>
        </trans-unit>
        <trans-unit id="f2d8144660c52543f7c021fe26462396f341e59d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt; bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</source>
          <target state="translated">在 &lt;code&gt;provide&lt;/code&gt; 和 &lt;code&gt;inject&lt;/code&gt; 绑定没有反应。这是故意的。但是，如果向下传递观察到的对象，则该对象的属性确实保持反应性。</target>
        </trans-unit>
        <trans-unit id="493ed3d2d814af09fd7e0d55df0493248fda560b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; function allows you to define the property through two parameters:</source>
          <target state="translated">在 &lt;code&gt;provide&lt;/code&gt; 的功能，您可以通过两个参数定义属性：</target>
        </trans-unit>
        <trans-unit id="a26f8d5002e995f88abd483d65f2b8981c550aeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support &lt;code&gt;Symbol&lt;/code&gt; and &lt;code&gt;Reflect.ownKeys&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;provide&lt;/code&gt; 选项应该是一个对象或一个函数返回一个对象。该对象包含可用于注入其子代的属性。您可以将ES2015符号用作此对象中的键，但只能在本机支持 &lt;code&gt;Symbol&lt;/code&gt; 和 &lt;code&gt;Reflect.ownKeys&lt;/code&gt; 的环境中使用。</target>
        </trans-unit>
        <trans-unit id="1df98a28e225ea8d4b071027515cc8bf9c095a9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; options allows us to specify the data/methods we want to &lt;strong&gt;provide&lt;/strong&gt; to descendent components. In this case, that&amp;rsquo;s the &lt;code&gt;getMap&lt;/code&gt; method inside &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">在 &lt;code&gt;provide&lt;/code&gt; 的选项允许我们指定我们希望将数据/方法&lt;strong&gt;提供&lt;/strong&gt;给后代组件。在这种情况下，这就是 &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; 中的 &lt;code&gt;getMap&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="9b831cea1a5d28870b1a98f2a9ac139f7f024f1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render()&lt;/code&gt; function implementation is much simpler, but also requires greater familiarity with component instance properties. In this case, you have to know that when you pass children without a &lt;code&gt;v-slot&lt;/code&gt; directive into a component, like the &lt;code&gt;Hello world!&lt;/code&gt; inside of &lt;code&gt;anchored-heading&lt;/code&gt;, those children are stored on the component instance at &lt;code&gt;$slots.default()&lt;/code&gt;. If you haven't already, &lt;strong&gt;it's recommended to read through the &lt;a href=&quot;../api/instance-properties&quot;&gt;instance properties API&lt;/a&gt; before diving into render functions.&lt;/strong&gt;</source>
          <target state="translated">该 &lt;code&gt;render()&lt;/code&gt; 函数实现简单得多，但也需要与组件实例的属性更熟悉。在这种情况下，您必须知道，当您将没有 &lt;code&gt;v-slot&lt;/code&gt; 指令的子代传递到组件（例如 &lt;code&gt;Hello world!&lt;/code&gt; 在 &lt;code&gt;anchored-heading&lt;/code&gt; ，这些子项存储在 &lt;code&gt;$slots.default()&lt;/code&gt; 的组件实例上。如果还没有的话，&lt;strong&gt;建议您在进入渲染功能之前通读&lt;a href=&quot;../api/instance-properties&quot;&gt;实例属性API&lt;/a&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56704ba2887ba7cae9ee0e7cfb9c5aa5b409598e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; function has priority over the render function compiled from &lt;code&gt;template&lt;/code&gt; option or in-DOM HTML template of the mounting element</source>
          <target state="translated">该 &lt;code&gt;render&lt;/code&gt; 功能优先于从编译渲染功能 &lt;code&gt;template&lt;/code&gt; 选项或-DOM HTML的安装元件的模板</target>
        </trans-unit>
        <trans-unit id="e89e752e4e0ad59fc71d8c42dbb8b140ac0a0a39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; function has priority over the render function compiled from &lt;code&gt;template&lt;/code&gt; option or in-DOM HTML template of the mounting element which is specified by the &lt;code&gt;el&lt;/code&gt; option.</source>
          <target state="translated">该 &lt;code&gt;render&lt;/code&gt; 功能拥有从编译渲染功能的优先级 &lt;code&gt;template&lt;/code&gt; 选项或-DOM HTML这是由指定的安装元件的模板 &lt;code&gt;el&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="713161e2405098a6ac60b0b6e678285fa2d7ca9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup&lt;/code&gt; function is a new component option. It serves as the entry point for using the Composition API inside components.</source>
          <target state="translated">在 &lt;code&gt;setup&lt;/code&gt; 功能是一个新组件的选项。它充当在组件内部使用Composition API的入口点。</target>
        </trans-unit>
        <trans-unit id="d6cbe7828d9cb072afe7eb2ed82f5a1462e9a440" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup&lt;/code&gt; option should be a function that accepts &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; which we will talk about &lt;a href=&quot;composition-api-setup#arguments&quot;&gt;later&lt;/a&gt;. Additionally, everything that we return from &lt;code&gt;setup&lt;/code&gt; will be exposed to the rest of our component (computed properties, methods, lifecycle hooks and so on) as well as to the component's template.</source>
          <target state="translated">在 &lt;code&gt;setup&lt;/code&gt; 选项应该是可以接受的功能 &lt;code&gt;props&lt;/code&gt; 和 &lt;code&gt;context&lt;/code&gt; ，我们将谈论&lt;a href=&quot;composition-api-setup#arguments&quot;&gt;以后&lt;/a&gt;。此外，我们从 &lt;code&gt;setup&lt;/code&gt; 返回的所有内容都将暴露给组件的其余部分（计算属性，方法，生命周期挂钩等）以及组件的模板。</target>
        </trans-unit>
        <trans-unit id="2f312c98cab71695e7dd222c575b78b0d13a0c64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slot-scope&lt;/code&gt; attribute can also be used directly on a non-&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element (including components):</source>
          <target state="translated">所述 &lt;code&gt;slot-scope&lt;/code&gt; 属性也可以直接使用的非对 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 元件（包括部件）：</target>
        </trans-unit>
        <trans-unit id="955152ea21b24fdf404e6e6a60a1465f0de55be9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true-value&lt;/code&gt; and &lt;code&gt;false-value&lt;/code&gt; attributes don&amp;rsquo;t affect the input&amp;rsquo;s &lt;code&gt;value&lt;/code&gt; attribute, because browsers don&amp;rsquo;t include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a form (e.g. &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no&amp;rdquo;), use radio inputs instead.</source>
          <target state="translated">在 &lt;code&gt;true-value&lt;/code&gt; 和 &lt;code&gt;false-value&lt;/code&gt; 属性不影响输入的 &lt;code&gt;value&lt;/code&gt; 属性，因为浏览器不包含在表单提交选中框。为了确保以表格形式（例如&amp;ldquo;是&amp;rdquo;或&amp;ldquo;否&amp;rdquo;）提交两个值之一，请改用无线电输入。</target>
        </trans-unit>
        <trans-unit id="bee3c0fd44ab8c7bc1c7328abb665ef946611b7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true-value&lt;/code&gt; and &lt;code&gt;false-value&lt;/code&gt; attributes don't affect the input's &lt;code&gt;value&lt;/code&gt; attribute, because browsers don't include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a form (e.g. &quot;yes&quot; or &quot;no&quot;), use radio inputs instead.</source>
          <target state="translated">在 &lt;code&gt;true-value&lt;/code&gt; 和 &lt;code&gt;false-value&lt;/code&gt; 属性不影响输入的 &lt;code&gt;value&lt;/code&gt; 属性，因为浏览器不包含在表单提交选中框。为了确保以表格形式（例如&amp;ldquo;是&amp;rdquo;或&amp;ldquo;否&amp;rdquo;）提交两个值之一，请改用无线电输入。</target>
        </trans-unit>
        <trans-unit id="e182f837614c4a38080aad510dbbf2060bfc370d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; can be one of the following native constructors:</source>
          <target state="translated">该 &lt;code&gt;type&lt;/code&gt; 可以是以下本机构造函数之一：</target>
        </trans-unit>
        <trans-unit id="2c964cd0d22c4c2fe49024d77d0397abcff4aee5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use()&lt;/code&gt; method takes two parameters. The first one is the plugin to be installed, in this case &lt;code&gt;i18nPlugin&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;use()&lt;/code&gt; 方法有两个参数。第一个是要安装的插件，在本例中为 &lt;code&gt;i18nPlugin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d359aad27c2b39097fdc37e76390adbf2cb90073" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-&lt;/code&gt; prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the &lt;code&gt;v-&lt;/code&gt; prefix becomes less important when you are building a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA (opens new window)&lt;/a&gt;, where Vue manages every template. Therefore, Vue provides special shorthands for two of the most often used directives, &lt;code&gt;v-bind&lt;/code&gt; and &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;v-&lt;/code&gt; 前缀充当在模板识别Vue的特定属性的视觉线索。当您使用Vue.js将动态行为应用于某些现有标记时非常有用，但对于某些常用指令可能会感到冗长。同时，在构建&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA（打开新窗口）时&lt;/a&gt;，对 &lt;code&gt;v-&lt;/code&gt; 前缀的需求变得不那么重要了，Vue负责管理每个模板。因此，Vue为两个最常用的指令 &lt;code&gt;v-bind&lt;/code&gt; 和 &lt;code&gt;v-on&lt;/code&gt; 提供了特殊的缩写：</target>
        </trans-unit>
        <trans-unit id="e190ce9f5befbb3426f06af3ed96f5a8aa0969e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-&lt;/code&gt; prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the &lt;code&gt;v-&lt;/code&gt; prefix becomes less important when you are building a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt;, where Vue manages every template. Therefore, Vue provides special shorthands for two of the most often used directives, &lt;code&gt;v-bind&lt;/code&gt; and &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;v-&lt;/code&gt; 前缀充当在模板识别Vue的特定属性的视觉线索。当您使用Vue.js将动态行为应用于某些现有标记时非常有用，但对于某些常用指令可能会感到冗长。同时，在构建&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt;时，对 &lt;code&gt;v-&lt;/code&gt; 前缀的需求变得不那么重要了，Vue负责管理每个模板。因此，Vue为两个最常用的指令 &lt;code&gt;v-bind&lt;/code&gt; 和 &lt;code&gt;v-on&lt;/code&gt; 提供了特殊的缩写：</target>
        </trans-unit>
        <trans-unit id="5280826865eec6dcf1bda516f7687a90f24c0bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-else-if&lt;/code&gt;, as the name suggests, serves as an &quot;else if block&quot; for &lt;code&gt;v-if&lt;/code&gt;. It can also be chained multiple times:</source>
          <target state="translated">在 &lt;code&gt;v-else-if&lt;/code&gt; ，顾名思义，可以充当一个&amp;ldquo;否则，如果块&amp;rdquo;为 &lt;code&gt;v-if&lt;/code&gt; 。它也可以多次链接：</target>
        </trans-unit>
        <trans-unit id="cd8461a9f091788550d2bcfcb0e99f3643c233d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-else-if&lt;/code&gt;, as the name suggests, serves as an &amp;ldquo;else if block&amp;rdquo; for &lt;code&gt;v-if&lt;/code&gt;. It can also be chained multiple times:</source>
          <target state="translated">在 &lt;code&gt;v-else-if&lt;/code&gt; ，顾名思义，可以充当一个&amp;ldquo;否则，如果块&amp;rdquo;为 &lt;code&gt;v-if&lt;/code&gt; 。它也可以链接多次：</target>
        </trans-unit>
        <trans-unit id="c3247515a046afbb16ba57185188c9f06ec7d510" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-enter&lt;/code&gt; transition class has been renamed to &lt;code&gt;v-enter-from&lt;/code&gt; and the &lt;code&gt;v-leave&lt;/code&gt; transition class has been renamed to &lt;code&gt;v-leave-from&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;v-enter&lt;/code&gt; 过渡类已重命名为 &lt;code&gt;v-enter-from&lt;/code&gt; 和 &lt;code&gt;v-leave&lt;/code&gt; 过渡类已重命名为 &lt;code&gt;v-leave-from&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="158f0361bd6bc0f9d34d2682ff9be45ba6461b16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-is&lt;/code&gt; value is treated as a JavaScript expression, so we need to wrap the component name in quotes:</source>
          <target state="translated">在 &lt;code&gt;v-is&lt;/code&gt; 值被视为一个JavaScript表达式，所以我们需要在引号包裹组件名称：</target>
        </trans-unit>
        <trans-unit id="0f6244029a3dc18b6cba09b3e6e0a940180e13b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-link-active&lt;/code&gt; directive has also been replaced by the &lt;code&gt;tag&lt;/code&gt; attribute on &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;the &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; component&lt;/a&gt;. So for example, you&amp;rsquo;ll update this:</source>
          <target state="translated">的 &lt;code&gt;v-link-active&lt;/code&gt; 指令也被替换由 &lt;code&gt;tag&lt;/code&gt; 上属性&lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;的 &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 组分&lt;/a&gt;。因此，例如，您将更新此内容：</target>
        </trans-unit>
        <trans-unit id="83d24c44d5fff24f0114d4c306087248f718b001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-link&lt;/code&gt; directive has been replaced with a new &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; component&lt;/a&gt;, as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:</source>
          <target state="translated">在 &lt;code&gt;v-link&lt;/code&gt; 指令已被替换为新的&lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt; &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; 组件&lt;/a&gt;，因为这种工作的，现在仅仅是中Vue公司2组件的责任认定时，无论你有这样的链接方式：</target>
        </trans-unit>
        <trans-unit id="5b9f65f7c297c1bc0549d5a815580fb6bb62244e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-model&lt;/code&gt; directive is expanded to &lt;code&gt;modelValue&lt;/code&gt; and &lt;code&gt;onUpdate:modelValue&lt;/code&gt; props during template compilation&amp;mdash;we will have to provide these props ourselves:</source>
          <target state="translated">在 &lt;code&gt;v-model&lt;/code&gt; 指令扩展到 &lt;code&gt;modelValue&lt;/code&gt; 和 &lt;code&gt;onUpdate:modelValue&lt;/code&gt; 模板中的道具汇集，我们将不得不提供这些道具自己：</target>
        </trans-unit>
        <trans-unit id="913c16238f6be321d10c7aa5ede9be4e8848de68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-slot&lt;/code&gt; directive was introduced in Vue 2.6.0, offering an improved, alternative API to the still-supported &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes. The full rationale for introducing &lt;code&gt;v-slot&lt;/code&gt; is described in this &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFC&lt;/a&gt;. The &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes will continue to be supported in all future 2.x releases, but are officially deprecated and will eventually be removed in Vue 3.</source>
          <target state="translated">的 &lt;code&gt;v-slot&lt;/code&gt; 指令在Vue的2.6.0引入，将提供一种改进的，可选的API到静止支撑 &lt;code&gt;slot&lt;/code&gt; 和 &lt;code&gt;slot-scope&lt;/code&gt; 的属性。在此&lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFC中&lt;/a&gt;描述了引入 &lt;code&gt;v-slot&lt;/code&gt; 的完整原理。所有未来的2.x发行版都将继续支持 &lt;code&gt;slot&lt;/code&gt; 和 &lt;code&gt;slot-scope&lt;/code&gt; 属性，但正式弃用了该属性，最终将在Vue 3中将其删除。</target>
        </trans-unit>
        <trans-unit id="a7b4baa34859ac880f5fe98648e4fa5507310c03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; API is the exact equivalent of the Options API &lt;a href=&quot;instance-methods#watch&quot;&gt;this.$watch&lt;/a&gt; (and the corresponding &lt;a href=&quot;options-data#watch&quot;&gt;watch&lt;/a&gt; option). &lt;code&gt;watch&lt;/code&gt; requires watching a specific data source and applies side effects in a separate callback function. It also is lazy by default - i.e. the callback is only called when the watched source has changed.</source>
          <target state="translated">该 &lt;code&gt;watch&lt;/code&gt; API是选项的API完全等效&lt;a href=&quot;instance-methods#watch&quot;&gt;这一点。$表&lt;/a&gt;（和相应的&lt;a href=&quot;options-data#watch&quot;&gt;表&lt;/a&gt;选项）。 &lt;code&gt;watch&lt;/code&gt; 需要监视特定的数据源，并在单独的回调函数中应用副作用。默认情况下，它也是惰性的-即仅在监视的源已更改时才调用回调。</target>
        </trans-unit>
        <trans-unit id="4aabcbf5326e8e02f2028280d2c6d91ef3352aaa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; API is the exact equivalent of the component &lt;a href=&quot;computed#watchers&quot;&gt;watch&lt;/a&gt; property. &lt;code&gt;watch&lt;/code&gt; requires watching a specific data source and applies side effects in a separate callback function. It also is lazy by default - i.e. the callback is only called when the watched source has changed.</source>
          <target state="translated">该 &lt;code&gt;watch&lt;/code&gt; API是组件的完全等效&lt;a href=&quot;computed#watchers&quot;&gt;的手表&lt;/a&gt;属性。 &lt;code&gt;watch&lt;/code&gt; 需要监视特定的数据源，并在单独的回调函数中应用副作用。默认情况下，它也是惰性的-即仅在监视的源已更改时才调用回调。</target>
        </trans-unit>
        <trans-unit id="f371f3394ccbbd9c9c7339bc5a079bc98cf103c4" translate="yes" xml:space="preserve">
          <source>The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through &lt;a href=&quot;../index&quot;&gt;the guide&lt;/a&gt; without any build tools before using the CLI.</source>
          <target state="translated">CLI假定您具有Node.js和相关构建工具的先验知识。如果你是新来的Vue或前端构建工具，我们强烈建议通过去&lt;a href=&quot;../index&quot;&gt;引导&lt;/a&gt;使用CLI之前没有任何的构建工具。</target>
        </trans-unit>
        <trans-unit id="4b84a76a83ec8a5f1e120e500c3f7751834f2762" translate="yes" xml:space="preserve">
          <source>The CLI takes care of most of the tooling configurations for you, but also allows fine-grained customization through its own &lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config options (opens new window)&lt;/a&gt;.</source>
          <target state="translated">CLI为您处理了大多数工具配置，还允许通过其自己的&lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config选项&lt;/a&gt;进行细粒度的自定义（打开新窗口）。</target>
        </trans-unit>
        <trans-unit id="431e39681a2982cceb38425ec480f7e168f10ba0" translate="yes" xml:space="preserve">
          <source>The CLI takes care of most of the tooling configurations for you, but also allows fine-grained customization through its own &lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config options&lt;/a&gt;.</source>
          <target state="translated">CLI为您处理了大多数工具配置，但也允许通过其自己的&lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config选项&lt;/a&gt;进行细粒度的自定义。</target>
        </trans-unit>
        <trans-unit id="37e9961ffd2140433ee6300b4c25596bb92249ae" translate="yes" xml:space="preserve">
          <source>The Complete SSR Guide</source>
          <target state="translated">SSR完全指南</target>
        </trans-unit>
        <trans-unit id="5754a67d9095f9e3938db68d894af927d9bbda9b" translate="yes" xml:space="preserve">
          <source>The Custom Elements specification provides a way to use custom elements as &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example&quot;&gt;Customized Built-in Element (opens new window)&lt;/a&gt; by adding the &lt;code&gt;is&lt;/code&gt; attribute to a built-in element:</source>
          <target state="translated">通过将 &lt;code&gt;is&lt;/code&gt; 属性添加到&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example&quot;&gt;内置&lt;/a&gt;元素中，&amp;ldquo; Custom Elements&amp;rdquo;规范提供了一种将定制元素用作Customized Built-in Element（打开内置窗口）的方法：</target>
        </trans-unit>
        <trans-unit id="9c61149305fdf5c301ac25f2f0ca7dd3dbec3dc0" translate="yes" xml:space="preserve">
          <source>The DOM tree</source>
          <target state="translated">DOM树</target>
        </trans-unit>
        <trans-unit id="eb35b5bf284498fbba8e557432a08e707e7edef3" translate="yes" xml:space="preserve">
          <source>The Data Object In-Depth</source>
          <target state="translated">深入了解数据对象</target>
        </trans-unit>
        <trans-unit id="0a11a522901404813faf9ef70a5ad308a904d8c3" translate="yes" xml:space="preserve">
          <source>The Options API contains the following sections:</source>
          <target state="translated">选项API包含以下部分。</target>
        </trans-unit>
        <trans-unit id="299c795ecd2c7dbddd73afeca578463288759420" translate="yes" xml:space="preserve">
          <source>The Reactivity API contains the following sections:</source>
          <target state="translated">Reactivity API包含以下部分。</target>
        </trans-unit>
        <trans-unit id="46f148bcf44658dc4c8a0ed4916ae565d5489751" translate="yes" xml:space="preserve">
          <source>The Root Component</source>
          <target state="translated">根组件</target>
        </trans-unit>
        <trans-unit id="3c531607ce360cbb5aec13ac8c3438a41dc5f330" translate="yes" xml:space="preserve">
          <source>The Virtual DOM</source>
          <target state="translated">虚拟DOM</target>
        </trans-unit>
        <trans-unit id="25dc21ddfb968d5d9195ddaa8265924cdb93b08c" translate="yes" xml:space="preserve">
          <source>The Virtual DOM is a lightweight JavaScript object, created by a render function. It takes three arguments: the element, an object with data, props, attrs and more, and an array. The array is where we pass in the children, which have all these arguments too, and then they can have children and so on, until we build a full tree of elements.</source>
          <target state="translated">虚拟DOM是一个轻量级的JavaScript对象,由渲染函数创建。它需要三个参数:元素,一个包含数据、道具、attrs等的对象,以及一个数组。数组是我们传入子元素的地方,子元素也有这些参数,然后它们可以有子元素,以此类推,直到我们建立一个完整的元素树。</target>
        </trans-unit>
        <trans-unit id="35fcd2cc00d685d99cf98eb6826ed2737e548826" translate="yes" xml:space="preserve">
          <source>The Virtual DOM tree</source>
          <target state="translated">虚拟DOM树</target>
        </trans-unit>
        <trans-unit id="babecbcffc795b2e20d9189e575e0bb731f8cd62" translate="yes" xml:space="preserve">
          <source>The Vue Instance</source>
          <target state="translated">Vue实例</target>
        </trans-unit>
        <trans-unit id="efbb68ebebd965649cff93f54f21ecfcb0cd480c" translate="yes" xml:space="preserve">
          <source>The Vue.js API contains the following categories:</source>
          <target state="translated">Vue.js API包含以下类别。</target>
        </trans-unit>
        <trans-unit id="807a64f8392fba5b085711631ef386b7b4a4cc48" translate="yes" xml:space="preserve">
          <source>The Web Components Spec has been finalized but is not natively implemented in every browser. Safari 10.1+, Chrome 54+ and Firefox 63+ natively support web components. In comparison, Vue components work consistently in all supported browsers (IE11 with compatibility build and above). When needed, Vue components can also be wrapped inside a native custom element.</source>
          <target state="translated">网络组件规范已经完成,但并非每个浏览器都能原生实现。Safari 10.1+、Chrome 54+和Firefox 63+原生支持网络组件。相比之下,Vue组件在所有支持的浏览器中都能稳定工作(IE11及以上版本的兼容性构建)。在需要的时候,Vue组件也可以被包装在一个本地的自定义元素里面。</target>
        </trans-unit>
        <trans-unit id="be83ced5c720e31f43242c0f5e365ad3f2da0751" translate="yes" xml:space="preserve">
          <source>The Web Components Spec has been finalized, but is not natively implemented in every browser. Safari 10.1+, Chrome 54+ and Firefox 63+ natively support web components. In comparison, Vue components don&amp;rsquo;t require any polyfills and work consistently in all supported browsers (IE9 and above). When needed, Vue components can also be wrapped inside a native custom element.</source>
          <target state="translated">Web组件规范已完成，但并非在每个浏览器中都以本地方式实现。Safari 10.1 +，Chrome 54+和Firefox 63+本机支持Web组件。相比之下，Vue组件不需要任何填充，并且可以在所有受支持的浏览器（IE9及更高版本）中一致地工作。必要时，Vue组件也可以包装在本地自定义元素中。</target>
        </trans-unit>
        <trans-unit id="ea207ce61201306d104d66e553ee1c06de8b2548" translate="yes" xml:space="preserve">
          <source>The World Health Organization estimates that 15% of the world's population has some form of disability, 2-4% of them severely so. That is an estimated 1 billion people worldwide; making people with disabilities the largest minority group in the world.</source>
          <target state="translated">世界卫生组织估计,世界人口的15%有某种形式的残疾,其中2-4%是严重残疾。据估计,全世界有10亿人,使残疾人成为世界上最大的少数群体。</target>
        </trans-unit>
        <trans-unit id="152adfffa7428439272d77c4a76ca033af83c983" translate="yes" xml:space="preserve">
          <source>The World Wide Web Consortium (W3C) Web Accessibility Initiative (WAI) develops web accessibility standards for the different components:</source>
          <target state="translated">万维网联盟(W3C)网络无障碍倡议(WAI)为不同的组件制定网络无障碍标准。</target>
        </trans-unit>
        <trans-unit id="0a28d4802ae8f29af4f28a606d7b55fd498ccb1b" translate="yes" xml:space="preserve">
          <source>The above code is imperative and repetitive. Compare it with a computed property version:</source>
          <target state="translated">上面的代码是命令式的,而且是重复的。将其与计算属性版本进行比较。</target>
        </trans-unit>
        <trans-unit id="bb879e483c23bffcd30b4eb818c6b264dd8b31d3" translate="yes" xml:space="preserve">
          <source>The above declarations allow the following code to be compiled:</source>
          <target state="translated">上述声明允许编译以下代码。</target>
        </trans-unit>
        <trans-unit id="f57aa3ad596a32aa0ee96ea34ada406c21b66366" translate="yes" xml:space="preserve">
          <source>The above example and some future ones use JavaScript&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;template literal&lt;/a&gt; to make multi-line templates more readable. These are not supported by Internet Explorer (IE), so if you must support IE and are not transpiling (e.g. with Babel or TypeScript), use &lt;a href=&quot;https://css-tricks.com/snippets/javascript/multiline-string-variables-in-javascript/&quot;&gt;newline escapes&lt;/a&gt; instead.</source>
          <target state="translated">上面的示例以及以后的示例使用JavaScript的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;模板文字&lt;/a&gt;来使多行模板更具可读性。Internet Explorer（IE）不支持这些功能，因此，如果您必须支持IE并且未进行转码（例如，使用Babel或TypeScript），请改用&lt;a href=&quot;https://css-tricks.com/snippets/javascript/multiline-string-variables-in-javascript/&quot;&gt;换行符&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="99a5b0f10fab94bdbe6947c371a61fc4c4300760" translate="yes" xml:space="preserve">
          <source>The above is made possible by Vue&amp;rsquo;s &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element with the &lt;code&gt;is&lt;/code&gt; special attribute:</source>
          <target state="translated">以上是由Vue公司的成为可能 &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; 与元件 &lt;code&gt;is&lt;/code&gt; 特殊的属性：</target>
        </trans-unit>
        <trans-unit id="a2dc1588c8d651c45f52061e78e4205b7250b679" translate="yes" xml:space="preserve">
          <source>The above is made possible by Vue's &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element with the special &lt;code&gt;is&lt;/code&gt; attribute:</source>
          <target state="translated">Vue的 &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; 元素具有特殊的 &lt;code&gt;is&lt;/code&gt; 属性，可以实现以上所述：</target>
        </trans-unit>
        <trans-unit id="02263c9d7e8e9048b079d134eb04a15832e9ae6a" translate="yes" xml:space="preserve">
          <source>The above only applies to the &lt;a href=&quot;../installation#explanation-of-different-builds&quot;&gt;ES Modules builds&lt;/a&gt; for use with tree-shaking capable bundlers - the UMD build still includes all features and exposes everything on the Vue global variable (and the compiler will produce appropriate output to use APIs off the global instead of importing).</source>
          <target state="translated">上面的内容仅适用于与具有树摇功能的捆绑器一起使用的&lt;a href=&quot;../installation#explanation-of-different-builds&quot;&gt;ES模块构建&lt;/a&gt;-UMD构建仍包含所有功能并公开Vue全局变量中的所有内容（并且编译器将生成适当的输出以使用全局API而不是导入API ）。</target>
        </trans-unit>
        <trans-unit id="b7374ad3f755708e5dc13a8b4b98839ff8d234e1" translate="yes" xml:space="preserve">
          <source>The above only renders the todos that are not complete.</source>
          <target state="translated">以上只演绎了未完成的todos。</target>
        </trans-unit>
        <trans-unit id="1dac4ea7863f897132825dc2826b7a36c594604c" translate="yes" xml:space="preserve">
          <source>The above syntax means the presence of the &lt;code&gt;active&lt;/code&gt; class will be determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;truthiness (opens new window)&lt;/a&gt; of the data property &lt;code&gt;isActive&lt;/code&gt;.</source>
          <target state="translated">上面的语法意味着 &lt;code&gt;active&lt;/code&gt; 类的存在将由数据属性 &lt;code&gt;isActive&lt;/code&gt; 的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;真实性（打开新窗口）&lt;/a&gt;确定。</target>
        </trans-unit>
        <trans-unit id="4af7e3e4b79fac718e6fd64e5702254c69dcf11f" translate="yes" xml:space="preserve">
          <source>The above syntax means the presence of the &lt;code&gt;active&lt;/code&gt; class will be determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;truthiness&lt;/a&gt; of the data property &lt;code&gt;isActive&lt;/code&gt;.</source>
          <target state="translated">上面的语法意味着 &lt;code&gt;active&lt;/code&gt; 类的存在将由数据属性 &lt;code&gt;isActive&lt;/code&gt; 的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;真实性&lt;/a&gt;确定。</target>
        </trans-unit>
        <trans-unit id="aeec69d6935039bffd444e21fbd1ed7763a7edf9" translate="yes" xml:space="preserve">
          <source>The above will be equivalent to:</source>
          <target state="translated">以上将相当于:</target>
        </trans-unit>
        <trans-unit id="987de1902175f7ea29deadc7d807f82364182cb0" translate="yes" xml:space="preserve">
          <source>The absence of an enumerated attribute and &lt;code&gt;attr=&quot;false&quot;&lt;/code&gt; may produce different IDL attribute values (which will reflect the actual state), described as follows:</source>
          <target state="translated">缺少枚举属性和 &lt;code&gt;attr=&quot;false&quot;&lt;/code&gt; 可能会产生不同的IDL属性值（将反映实际状态），如下所述：</target>
        </trans-unit>
        <trans-unit id="bc22dad858f565e9beeefc992c5465134124606c" translate="yes" xml:space="preserve">
          <source>The anchored heading component we created earlier is relatively simple. It doesn&amp;rsquo;t manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it&amp;rsquo;s only a function with some props.</source>
          <target state="translated">我们之前创建的锚定标题组件相对简单。它不管理任何状态，监视传递给它的任何状态，并且没有生命周期方法。确实，这只是带有一些道具的功能。</target>
        </trans-unit>
        <trans-unit id="472fab3bd1351c6b291c7954f4cf59720749fbf5" translate="yes" xml:space="preserve">
          <source>The application instance</source>
          <target state="translated">应用实例</target>
        </trans-unit>
        <trans-unit id="9bf7df2e6b2d3b7f0b9b74d317befb0ed3be82e6" translate="yes" xml:space="preserve">
          <source>The application instance if a &lt;code&gt;definition&lt;/code&gt; argument was passed</source>
          <target state="translated">如果传递了 &lt;code&gt;definition&lt;/code&gt; 参数，则为应用程序实例</target>
        </trans-unit>
        <trans-unit id="c96fc90d040288884b45ba8147b46429f8a9c329" translate="yes" xml:space="preserve">
          <source>The application instance is used to register 'globals' that can then be used by components within that application. We'll discuss that in detail later in the guide but as a quick example:</source>
          <target state="translated">应用程序实例用于注册 &quot;globals&quot;,然后可以被该应用程序中的组件使用。我们将在后面的指南中详细讨论,但作为一个快速的例子。</target>
        </trans-unit>
        <trans-unit id="87b9709d9cefabc9cccc6ad0b23e243c50a3cb35" translate="yes" xml:space="preserve">
          <source>The array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same property order across browsers.</source>
          <target state="translated">数组语法允许更可预测的路径匹配,因为在对象上迭代不能保证在不同的浏览器中使用相同的属性顺序。</target>
        </trans-unit>
        <trans-unit id="cfb0bf25982abd52ff947724ea87766f7139df24" translate="yes" xml:space="preserve">
          <source>The array syntax for &lt;code&gt;:style&lt;/code&gt; allows you to apply multiple style objects to the same element:</source>
          <target state="translated">&lt;code&gt;:style&lt;/code&gt; 的数组语法允许您将多个样式对象应用于同一元素：</target>
        </trans-unit>
        <trans-unit id="da3ddd2386065d734a4382298ee4c3e11da253a3" translate="yes" xml:space="preserve">
          <source>The array syntax for &lt;code&gt;v-bind:style&lt;/code&gt; allows you to apply multiple style objects to the same element:</source>
          <target state="translated">&lt;code&gt;v-bind:style&lt;/code&gt; 的数组语法允许您将多个样式对象应用于同一元素：</target>
        </trans-unit>
        <trans-unit id="aafcbc34aabe7826d09e6d24c380675938d5320a" translate="yes" xml:space="preserve">
          <source>The async component can opt-out of &lt;code&gt;Suspense&lt;/code&gt; control and let the component always control its own loading state by specifying &lt;code&gt;suspensible: false&lt;/code&gt; in its options.</source>
          <target state="translated">异步组件可以选择退出 &lt;code&gt;Suspense&lt;/code&gt; 控制，并通过在其选项中指定 &lt;code&gt;suspensible: false&lt;/code&gt; 来使该组件始终控制其自身的加载状态。</target>
        </trans-unit>
        <trans-unit id="e823b9beb8c48498f2cf709b4d0756d4d1fc6465" translate="yes" xml:space="preserve">
          <source>The async component factory can also return an object of the following format:</source>
          <target state="translated">async组件工厂也可以返回一个如下格式的对象。</target>
        </trans-unit>
        <trans-unit id="ba11fc067d05679fdd5921eda5ec20ebd31b1c5d" translate="yes" xml:space="preserve">
          <source>The autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided.</source>
          <target state="translated">编辑器中的自动完成功能使得编写较长的名称的成本非常低,而它们所提供的清晰度是非常宝贵的。尤其是不常见的缩写,应始终避免使用。</target>
        </trans-unit>
        <trans-unit id="3bfbfdbf163c3a58f491c28ada597f5a0c3ab31f" translate="yes" xml:space="preserve">
          <source>The best way to get started is to check out &lt;a href=&quot;https://github.com/vuejs/docs-next/issues/478&quot;&gt;this pinned issue (opens new window)&lt;/a&gt; that contains active discussions on the various initiatives happening in the community.</source>
          <target state="translated">最好的入门方法是检查&lt;a href=&quot;https://github.com/vuejs/docs-next/issues/478&quot;&gt;此固定问题（在新窗口中打开）&lt;/a&gt;，其中包含有关社区中正在发生的各种倡议的积极讨论。</target>
        </trans-unit>
        <trans-unit id="8c22ef1ce4c22f9fdb3192ace8ea666bf31d6a91" translate="yes" xml:space="preserve">
          <source>The bound object doesn&amp;rsquo;t have to be inline:</source>
          <target state="translated">绑定的对象不必是内联的：</target>
        </trans-unit>
        <trans-unit id="05175c1d75a733807acbefe7969758c568ba82e5" translate="yes" xml:space="preserve">
          <source>The bound object doesn't have to be inline:</source>
          <target state="translated">绑定对象不一定要内联。</target>
        </trans-unit>
        <trans-unit id="2554e0f7ba3e75f305804cf7d1375f5d936e7484" translate="yes" xml:space="preserve">
          <source>The breaking change is that if you manually provide &lt;code&gt;key&lt;/code&gt;s, each branch must use a unique &lt;code&gt;key&lt;/code&gt;. In most cases, you can remove these &lt;code&gt;key&lt;/code&gt;s.</source>
          <target state="translated">重大变化是，如果您手动提供 &lt;code&gt;key&lt;/code&gt; ，则每个分支必须使用唯一的 &lt;code&gt;key&lt;/code&gt; 。在大多数情况下，您可以删除这些 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0ea81fb69fe73fe63375e04ce841fa425ec9b8c" translate="yes" xml:space="preserve">
          <source>The child, instead of providing no template, should now render the default slot*:</source>
          <target state="translated">子,而不是提供没有模板,现在应该渲染默认槽*。</target>
        </trans-unit>
        <trans-unit id="4eda5449279a274efb072e447ae5fcdbc28da7df" translate="yes" xml:space="preserve">
          <source>The common scenario for disabling an attribute inheritance is when attributes need to be applied to other elements besides the root node.</source>
          <target state="translated">禁用属性继承的常见场景是,当属性需要应用到除根节点之外的其他元素时。</target>
        </trans-unit>
        <trans-unit id="947fd6ed1c1923f9d1c906662bc458c7fd2b298d" translate="yes" xml:space="preserve">
          <source>The component definition if a &lt;code&gt;definition&lt;/code&gt; argument was not passed</source>
          <target state="translated">组件定义（如果未传递 &lt;code&gt;definition&lt;/code&gt; 参数）</target>
        </trans-unit>
        <trans-unit id="86969f46fef0ec13b85498c1fa6ab2d4f2c18c31" translate="yes" xml:space="preserve">
          <source>The component instance context is also set during the synchronous execution of lifecycle hooks. As a result, watchers and computed properties created synchronously inside of lifecycle hooks are also automatically tore down when the component unmounts.</source>
          <target state="translated">在同步执行生命周期钩子的过程中,组件实例上下文也会被设置。因此,当组件卸载时,在生命周期钩子内同步创建的监视者和计算属性也会被自动删除。</target>
        </trans-unit>
        <trans-unit id="b10321bc695ddfd296d4bec711587b802bbb5b6a" translate="yes" xml:space="preserve">
          <source>The component must generate a heading based on the &lt;code&gt;level&lt;/code&gt; prop, and we quickly arrive at this:</source>
          <target state="translated">该组件必须基于 &lt;code&gt;level&lt;/code&gt; prop生成一个标题，我们很快就可以得出：</target>
        </trans-unit>
        <trans-unit id="c473e09bb4188e420d79ebd60ee46d8c65246cf3" translate="yes" xml:space="preserve">
          <source>The component system is another important concept in Vue, because it&amp;rsquo;s an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</source>
          <target state="translated">组件系统是Vue中另一个重要的概念，因为它是一种抽象，它使我们能够构建由小型，独立且经常可重用的组件组成的大规模应用程序。如果我们考虑一下，几乎任何类型的应用程序接口都可以抽象为组件树：</target>
        </trans-unit>
        <trans-unit id="5ad941a099cd5fcebfd577e3e9fe5f50fad70402" translate="yes" xml:space="preserve">
          <source>The component system is another important concept in Vue, because it's an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</source>
          <target state="translated">组件系统是Vue中另一个重要的概念,因为它是一个抽象的概念,它允许我们构建由小的、自足的、通常是可重用的组件组成的大规模应用程序。如果我们仔细想想,几乎任何类型的应用界面都可以抽象成一棵组件树。</target>
        </trans-unit>
        <trans-unit id="3883d179f6d3f9bbe1b90b29bb01dd780ef82b29" translate="yes" xml:space="preserve">
          <source>The component will have a &lt;code&gt;button&lt;/code&gt; element to trigger the opening of the modal, and a &lt;code&gt;div&lt;/code&gt; element with a class of &lt;code&gt;.modal&lt;/code&gt;, which will contain the modal's content and a button to self-close.</source>
          <target state="translated">该组件将具有一个 &lt;code&gt;button&lt;/code&gt; 元素来触发模式的打开，以及一个带有 &lt;code&gt;.modal&lt;/code&gt; 类的 &lt;code&gt;div&lt;/code&gt; 元素，其中将包含模式的内容和一个用于自动关闭的按钮。</target>
        </trans-unit>
        <trans-unit id="e2a227479dfaa2ebe9e09278b1482fab712cafda" translate="yes" xml:space="preserve">
          <source>The component&amp;rsquo;s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it&amp;rsquo;s usually better to use a &lt;a href=&quot;#computed&quot;&gt;computed property&lt;/a&gt; or &lt;a href=&quot;#watch&quot;&gt;watcher&lt;/a&gt; instead.</source>
          <target state="translated">调用此挂钩时，组件的DOM将已更新，因此您可以在此处执行与DOM相关的操作。但是，在大多数情况下，应避免更改挂钩内的状态。为了对状态更改做出反应，通常最好使用&lt;a href=&quot;#computed&quot;&gt;计算属性&lt;/a&gt;或&lt;a href=&quot;#watch&quot;&gt;观察程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="33a9c37f2f9908b2ff6754fe4ced3a3b882e927a" translate="yes" xml:space="preserve">
          <source>The component&amp;rsquo;s name is the first argument of &lt;code&gt;Vue.component&lt;/code&gt;.</source>
          <target state="translated">组件的名称是 &lt;code&gt;Vue.component&lt;/code&gt; 的第一个参数。</target>
        </trans-unit>
        <trans-unit id="49a8030218616a010e0c989828a6fcfe732412f0" translate="yes" xml:space="preserve">
          <source>The component's DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it's usually better to use a &lt;a href=&quot;options-data#computed&quot;&gt;computed property&lt;/a&gt; or &lt;a href=&quot;options-data#watch&quot;&gt;watcher&lt;/a&gt; instead.</source>
          <target state="translated">调用此挂钩时，组件的DOM将已更新，因此您可以在此处执行与DOM相关的操作。但是，在大多数情况下，应避免更改挂钩内的状态。为了对状态更改做出反应，通常最好改用&lt;a href=&quot;options-data#computed&quot;&gt;计算属性&lt;/a&gt;或&lt;a href=&quot;options-data#watch&quot;&gt;观察程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5ce09da928dc006cfa43406bce9e4016687fe784" translate="yes" xml:space="preserve">
          <source>The component's name is the first argument of &lt;code&gt;app.component&lt;/code&gt;. In the example above, the component's name is &quot;my-component-name&quot;.</source>
          <target state="translated">组件的名称是 &lt;code&gt;app.component&lt;/code&gt; 的第一个参数。在上面的示例中，组件的名称为&amp;ldquo; my-component-name&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="6c50d6a412a378e537c001610ef774aa9ae31afc" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;span&lt;/code&gt; will be replaced with the value of the &lt;code&gt;rawHtml&lt;/code&gt; property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use &lt;code&gt;v-html&lt;/code&gt; to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.</source>
          <target state="translated">在内容 &lt;code&gt;span&lt;/code&gt; 将与中值替换 &lt;code&gt;rawHtml&lt;/code&gt; 财产，解释为纯HTML -数据绑定被忽略。请注意，由于Vue不是基于字符串的模板引擎，因此无法使用 &lt;code&gt;v-html&lt;/code&gt; 来组成模板部分。取而代之的是，组件是UI重用和合成的基本单位。</target>
        </trans-unit>
        <trans-unit id="5c6fcc6772a0d1f034e465e8f1a0a82358c09227" translate="yes" xml:space="preserve">
          <source>The count will be logged synchronously on initial run.</source>
          <target state="translated">初次运行时将同步记录计数。</target>
        </trans-unit>
        <trans-unit id="4b0a2416648a4140799cf8abb2cfaf5827329179" translate="yes" xml:space="preserve">
          <source>The createRenderer function accepts two generic arguments: &lt;code&gt;HostNode&lt;/code&gt; and &lt;code&gt;HostElement&lt;/code&gt;, corresponding to Node and Element types in the host environment.</source>
          <target state="translated">createRenderer函数接受两个通用参数： &lt;code&gt;HostNode&lt;/code&gt; 和 &lt;code&gt;HostElement&lt;/code&gt; ，与主机环境中的Node和Element类型相对应。</target>
        </trans-unit>
        <trans-unit id="0aabf5563ee74ceaaa562a702ba84f4906e6efaf" translate="yes" xml:space="preserve">
          <source>The custom component &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; will be hoisted out as invalid content, causing errors in the eventual rendered output. Fortunately, the &lt;code&gt;is&lt;/code&gt; special attribute offers a workaround:</source>
          <target state="translated">自定义组件 &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; 将作为无效内容悬挂，导致最终呈现的输出中出现错误。幸运的是， &lt;code&gt;is&lt;/code&gt; 特殊属性提供了一种解决方法：</target>
        </trans-unit>
        <trans-unit id="11daf3c25f0cf63cc93ea2c53a8186b5d87e44d6" translate="yes" xml:space="preserve">
          <source>The custom component &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; will be hoisted out as invalid content, causing errors in the eventual rendered output. We can use the special &lt;code&gt;v-is&lt;/code&gt; directive as a workaround:</source>
          <target state="translated">自定义组件 &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; 将作为无效内容悬挂，导致最终呈现的输出中出现错误。我们可以使用特殊的 &lt;code&gt;v-is&lt;/code&gt; 指令作为解决方法：</target>
        </trans-unit>
        <trans-unit id="773dcdb0e4554ae71591d98763ca297e3e508d9e" translate="yes" xml:space="preserve">
          <source>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it &amp;ldquo;reactive&amp;rdquo;. &lt;strong&gt;The object must be plain&lt;/strong&gt;: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with their own stateful behavior.</source>
          <target state="translated">Vue实例的数据对象。Vue将以递归方式将其属性转换为getter / setter，以使其&amp;ldquo;具有反应性&amp;rdquo;。&lt;strong&gt;该对象必须是普通&lt;/strong&gt;对象：诸如浏览器API对象和原型属性之类的本机对象将被忽略。一条经验法则是，数据应仅是数据-不建议观察具有自身状态行为的对象。</target>
        </trans-unit>
        <trans-unit id="f249c1e096e4760333b8a1a164e494b46a537f23" translate="yes" xml:space="preserve">
          <source>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</source>
          <target state="translated">Vue 实例正在观察的数据对象。Vue 实例代理访问其数据对象上的属性。</target>
        </trans-unit>
        <trans-unit id="c0311ef9e36a4cba0d120900ee89b483f3f6f275" translate="yes" xml:space="preserve">
          <source>The data object that the component instance is observing. The component instance proxies access to the properties on its data object.</source>
          <target state="translated">组件实例正在观察的数据对象。组件实例代理访问其数据对象的属性。</target>
        </trans-unit>
        <trans-unit id="536204b9289a091fc1bfb216ea4a0b6805215f8d" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;v-for&lt;/code&gt; will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the &lt;code&gt;key&lt;/code&gt; special attribute:</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; 的默认行为将尝试在不移动元素的情况下对元素进行修补。要强制其对元素重新排序，您需要提供带有 &lt;code&gt;key&lt;/code&gt; 特殊属性的排序提示：</target>
        </trans-unit>
        <trans-unit id="4b1148c386014a26cbf146b0929f7af1e1e7af0e" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;v-for&lt;/code&gt; will try to patch the elements in-place without moving them. To force it to reorder elements, you should provide an ordering hint with the &lt;code&gt;key&lt;/code&gt; special attribute:</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; 的默认行为将尝试在不移动元素的情况下对元素进行修补。要强制它对元素重新排序，您应该提供带有 &lt;code&gt;key&lt;/code&gt; 特殊属性的排序提示：</target>
        </trans-unit>
        <trans-unit id="b0d6d6ed400b5a953b0d97b27d49df6ee5eeb0d1" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;'pre'&lt;/code&gt;, which specifies that the callback should be invoked before rendering. This allows the callback to update other values before the template runs.</source>
          <target state="translated">默认值为 &lt;code&gt;'pre'&lt;/code&gt; ，它指定应在呈现之前调用回调。这允许回调在模板运行之前更新其他值。</target>
        </trans-unit>
        <trans-unit id="d129c09e272230c72d4816c9cf37d602f78c6b98" translate="yes" xml:space="preserve">
          <source>The detailed usage for &lt;code&gt;v-for&lt;/code&gt; is explained in the guide section linked below.</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; 的详细用法在下面链接的指南部分中说明。</target>
        </trans-unit>
        <trans-unit id="343f0a574d7c11cb2eeec3975287b6ad82f491f8" translate="yes" xml:space="preserve">
          <source>The dev/prod files are pre-built, but the appropriate file is automatically required based on &lt;code&gt;process.env.NODE_ENV&lt;/code&gt;.</source>
          <target state="translated">dev / prod文件是预先构建的，但是会根据 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 自动需要相应的文件。</target>
        </trans-unit>
        <trans-unit id="fcb2400b62e62455e5be23679bc16dcd684f0e97" translate="yes" xml:space="preserve">
          <source>The difference is that an element with &lt;code&gt;v-show&lt;/code&gt; will always be rendered and remain in the DOM; &lt;code&gt;v-show&lt;/code&gt; only toggles the &lt;code&gt;display&lt;/code&gt; CSS property of the element.</source>
          <target state="translated">不同之处在于带有 &lt;code&gt;v-show&lt;/code&gt; 的元素将始终被渲染并保留在DOM中； &lt;code&gt;v-show&lt;/code&gt; 仅切换元素的 &lt;code&gt;display&lt;/code&gt; CSS属性。</target>
        </trans-unit>
        <trans-unit id="9beac5c57d068b893c427afee540acec4a448457" translate="yes" xml:space="preserve">
          <source>The direct child components of the current instance. &lt;strong&gt;Note there&amp;rsquo;s no order guarantee for &lt;code&gt;$children&lt;/code&gt;, and it is not reactive.&lt;/strong&gt; If you find yourself trying to use &lt;code&gt;$children&lt;/code&gt; for data binding, consider using an Array and &lt;code&gt;v-for&lt;/code&gt; to generate child components, and use the Array as the source of truth.</source>
          <target state="translated">当前实例的直接子组件。&lt;strong&gt;请注意，没有 &lt;code&gt;$children&lt;/code&gt; 订单保证，并且它不是被动的。&lt;/strong&gt;如果发现自己试图使用 &lt;code&gt;$children&lt;/code&gt; 进行数据绑定，请考虑使用Array和 &lt;code&gt;v-for&lt;/code&gt; 生成子组件，然后将Array用作真相来源。</target>
        </trans-unit>
        <trans-unit id="8966ad2384af724eb5afaebd84955178e2bef331" translate="yes" xml:space="preserve">
          <source>The directive &lt;code&gt;v-if&lt;/code&gt; is used to conditionally render a block. The block will only be rendered if the directive&amp;rsquo;s expression returns a truthy value.</source>
          <target state="translated">指令 &lt;code&gt;v-if&lt;/code&gt; 用于有条件地渲染块。仅当指令的表达式返回真实值时，才会渲染该块。</target>
        </trans-unit>
        <trans-unit id="b8232d0e5e0905d45b1ad05a56cfc3f9bba50116" translate="yes" xml:space="preserve">
          <source>The directive &lt;code&gt;v-if&lt;/code&gt; is used to conditionally render a block. The block will only be rendered if the directive's expression returns a truthy value.</source>
          <target state="translated">指令 &lt;code&gt;v-if&lt;/code&gt; 用于有条件地渲染块。仅当指令的表达式返回真实值时，才会渲染该块。</target>
        </trans-unit>
        <trans-unit id="defd17d65c75e19b004eb45d504b28dc381f0693" translate="yes" xml:space="preserve">
          <source>The directive definition if a &lt;code&gt;definition&lt;/code&gt; argument was not passed</source>
          <target state="translated">指令定义（如果未传递 &lt;code&gt;definition&lt;/code&gt; 参数）</target>
        </trans-unit>
        <trans-unit id="4141be39fd2adee28a4d62aa1a5f31477b8a9bc9" translate="yes" xml:space="preserve">
          <source>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the &lt;a href=&quot;../api/directives#v-html&quot;&gt;&lt;code&gt;v-html&lt;/code&gt; directive&lt;/a&gt;:</source>
          <target state="translated">双胡须将数据解释为纯文本，而不是HTML。为了输出真实的HTML，您将需要使用&lt;a href=&quot;../api/directives#v-html&quot;&gt; &lt;code&gt;v-html&lt;/code&gt; 指令&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a9e1b62f46f6347c3255105bf2f7f7bb4beb980e" translate="yes" xml:space="preserve">
          <source>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the &lt;code&gt;v-html&lt;/code&gt; directive:</source>
          <target state="translated">双胡须将数据解释为纯文本，而不是HTML。为了输出实际的HTML，您将需要使用 &lt;code&gt;v-html&lt;/code&gt; 指令：</target>
        </trans-unit>
        <trans-unit id="305ed691c1804ae460a172a9d094e4f8d80ad4b2" translate="yes" xml:space="preserve">
          <source>The easiest way to pre-compile templates is using &lt;a href=&quot;../single-file-component&quot;&gt;Single-File Components&lt;/a&gt; - the associated build setups automatically performs pre-compilation for you, so the built code contains the already compiled render functions instead of raw template strings.</source>
          <target state="translated">预编译模板的最简单方法是使用&amp;ldquo;&lt;a href=&quot;../single-file-component&quot;&gt;单文件组件&amp;rdquo;&lt;/a&gt; -关联的构建设置会自动为您执行预编译，因此，已构建的代码包含已编译的渲染函数，而不是原始模板字符串。</target>
        </trans-unit>
        <trans-unit id="cdf9489100840a3b7f6fc331943b5d3351ce62f0" translate="yes" xml:space="preserve">
          <source>The easiest way to pre-compile templates is using &lt;a href=&quot;single-file-components&quot;&gt;Single-File Components&lt;/a&gt; - the associated build setups automatically performs pre-compilation for you, so the built code contains the already compiled render functions instead of raw template strings.</source>
          <target state="translated">预编译模板的最简单方法是使用&amp;ldquo; &lt;a href=&quot;single-file-components&quot;&gt;单个文件组件&amp;rdquo;&lt;/a&gt; -关联的构建设置会自动为您执行预编译，因此，已构建的代码包含已编译的渲染函数，而不是原始模板字符串。</target>
        </trans-unit>
        <trans-unit id="db435bc25ee0c4942f29c67b5bbf4fa0aa7247d0" translate="yes" xml:space="preserve">
          <source>The easiest way to try out Vue.js is using the &lt;a href=&quot;https://codepen.io/team/Vue/pen/KKpRVpx&quot;&gt;Hello World example (opens new window)&lt;/a&gt;. Feel free to open it in another tab and follow along as we go through some basic examples.</source>
          <target state="translated">试用Vue.js的最简单方法是使用&lt;a href=&quot;https://codepen.io/team/Vue/pen/KKpRVpx&quot;&gt;Hello World示例（打开新窗口）&lt;/a&gt;。随意在另一个选项卡中打开它，然后按照一些基本示例进行操作。</target>
        </trans-unit>
        <trans-unit id="75f9865708d8a06fa846e682702658bdabd9c8e0" translate="yes" xml:space="preserve">
          <source>The easiest way to try out Vue.js is using the &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/50wL7mdz/&quot;&gt;JSFiddle Hello World example&lt;/a&gt;. Feel free to open it in another tab and follow along as we go through some basic examples. Or, you can &lt;a href=&quot;https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html&quot;&gt;create an &lt;code&gt;index.html&lt;/code&gt; file&lt;/a&gt; and include Vue with:</source>
          <target state="translated">试用Vue.js的最简单方法是使用&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/50wL7mdz/&quot;&gt;JSFiddle Hello World示例&lt;/a&gt;。随意在另一个选项卡中打开它，然后按照一些基本示例进行操作。或者，您可以&lt;a href=&quot;https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html&quot;&gt;创建一个 &lt;code&gt;index.html&lt;/code&gt; 文件，&lt;/a&gt;并在Vue中添加以下内容：</target>
        </trans-unit>
        <trans-unit id="847757f66edc351ea14e3e7f70aa130ed1b67ad7" translate="yes" xml:space="preserve">
          <source>The el option can no longer be used in &lt;code&gt;Vue.extend&lt;/code&gt;. It&amp;rsquo;s only valid as an instance creation option.</source>
          <target state="translated">el选项不能再在 &lt;code&gt;Vue.extend&lt;/code&gt; 中使用。仅作为实例创建选项有效。</target>
        </trans-unit>
        <trans-unit id="f780a51fca89ef85f1e54b75143303e24c122ac1" translate="yes" xml:space="preserve">
          <source>The element in the host environment.</source>
          <target state="translated">宿主环境中的元素。</target>
        </trans-unit>
        <trans-unit id="0add764dbfcd6dbf253011663e8660a07e0d583a" translate="yes" xml:space="preserve">
          <source>The element the directive is bound to. This can be used to directly manipulate the DOM.</source>
          <target state="translated">指令所绑定的元素。这可以用来直接操作DOM。</target>
        </trans-unit>
        <trans-unit id="e484d752f6e7f6943881c7bf91dd2adc3796ddcf" translate="yes" xml:space="preserve">
          <source>The equivalent in Vue 3 is &lt;a href=&quot;../../api/application-config#globalproperties&quot;&gt;&lt;code&gt;config.globalProperties&lt;/code&gt;&lt;/a&gt;. These properties will be copied across as part of instantiating a component within the application:</source>
          <target state="translated">Vue 3中的等效项是&lt;a href=&quot;../../api/application-config#globalproperties&quot;&gt; &lt;code&gt;config.globalProperties&lt;/code&gt; &lt;/a&gt;。在实例化应用程序内的组件时，将复制这些属性：</target>
        </trans-unit>
        <trans-unit id="baf7aed57333af6e96ef49b1f2b3ce42c4ae2a22" translate="yes" xml:space="preserve">
          <source>The essential use case for reactive state in Vue is that we can use it during render. Thanks to dependency tracking, the view automatically updates when reactive state changes.</source>
          <target state="translated">Vue中反应状态的基本用例是我们可以在渲染过程中使用它。由于依赖性跟踪,当反应状态改变时,视图会自动更新。</target>
        </trans-unit>
        <trans-unit id="b92fce4867ed9fd2a331cd38fbea7af99a51fcec" translate="yes" xml:space="preserve">
          <source>The example above still works in Vue 3.x. However, we no longer recommend using the &lt;code&gt;key&lt;/code&gt; attribute on &lt;code&gt;v-if&lt;/code&gt;/&lt;code&gt;v-else&lt;/code&gt;/&lt;code&gt;v-else-if&lt;/code&gt; branches, since unique &lt;code&gt;key&lt;/code&gt;s are now automatically generated on conditional branches if you don't provide them.</source>
          <target state="translated">上面的示例在Vue 3.x中仍然有效。但是，我们不再建议在 &lt;code&gt;v-if&lt;/code&gt; / &lt;code&gt;v-else&lt;/code&gt; / &lt;code&gt;v-else-if&lt;/code&gt; 分支上使用 &lt;code&gt;key&lt;/code&gt; 属性，因为如果您不提供，则现在会在条件分支上自动生成唯一的 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14ff2ebab179926c1bba713b3418f8fa507384ca" translate="yes" xml:space="preserve">
          <source>The filter&amp;rsquo;s function always receives the expression&amp;rsquo;s value (the result of the former chain) as its first argument. In the above example, the &lt;code&gt;capitalize&lt;/code&gt; filter function will receive the value of &lt;code&gt;message&lt;/code&gt; as its argument.</source>
          <target state="translated">过滤器的功能始终将表达式的值（前一个链的结果）作为其第一个参数。在上面的示例中，大 &lt;code&gt;capitalize&lt;/code&gt; 滤器函数将接收 &lt;code&gt;message&lt;/code&gt; 的值作为其参数。</target>
        </trans-unit>
        <trans-unit id="25978631002a6e912099e352f219ba34c4dc10cb" translate="yes" xml:space="preserve">
          <source>The filtered list will &lt;em&gt;only&lt;/em&gt; be re-evaluated if there are relevant changes to the &lt;code&gt;users&lt;/code&gt; array, making filtering much more efficient.</source>
          <target state="translated">&lt;em&gt;仅&lt;/em&gt;当 &lt;code&gt;users&lt;/code&gt; 数组有相关更改时，&lt;em&gt;才会&lt;/em&gt;重新评估过滤后的列表，从而使过滤更加有效。</target>
        </trans-unit>
        <trans-unit id="41e792bc8bb14d8a14bb5303a29567bf0302a932" translate="yes" xml:space="preserve">
          <source>The final API is as follows:</source>
          <target state="translated">最后的API如下:</target>
        </trans-unit>
        <trans-unit id="84c6a470325454b1c8c66e1bcbcc2766951cda88" translate="yes" xml:space="preserve">
          <source>The first argument in the &lt;code&gt;setup&lt;/code&gt; function is the &lt;code&gt;props&lt;/code&gt; argument. Just as you would expect in a standard component, &lt;code&gt;props&lt;/code&gt; inside of a &lt;code&gt;setup&lt;/code&gt; function are reactive and will be updated when new props are passed in.</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 函数中的第一个参数是 &lt;code&gt;props&lt;/code&gt; 参数。就像您在标准组件中所期望的那样， &lt;code&gt;setup&lt;/code&gt; 函数内部的 &lt;code&gt;props&lt;/code&gt; 是反应性的，并且在传入新的props时将对其进行更新。</target>
        </trans-unit>
        <trans-unit id="d746cf67e1faa3691049af5d98cb35049b8b5138" translate="yes" xml:space="preserve">
          <source>The following consists a list of breaking changes from 2.x:</source>
          <target state="translated">以下是2.x版本的突破性变化列表。</target>
        </trans-unit>
        <trans-unit id="59301ec50d1aa02b21c717dc2146c442c1b3271c" translate="yes" xml:space="preserve">
          <source>The following section provides guidelines on things to keep in mind when evaluating which component testing framework is best for your application.</source>
          <target state="translated">下面一节提供了在评估哪种组件测试框架最适合你的应用程序时需要注意的事项的指导。</target>
        </trans-unit>
        <trans-unit id="eabf2a91efba3bd9bf968cab18833080e3840507" translate="yes" xml:space="preserve">
          <source>The following table contains how the lifecycle hooks are invoked inside of &lt;a href=&quot;composition-api-setup&quot;&gt;setup()&lt;/a&gt;:</source>
          <target state="translated">下表包含如何在&lt;a href=&quot;composition-api-setup&quot;&gt;setup（）&lt;/a&gt;内部调用生命周期挂钩：</target>
        </trans-unit>
        <trans-unit id="3ad52d3ab04df58ce927fd2d0e3e4349119015d3" translate="yes" xml:space="preserve">
          <source>The following table describes how Vue coerce &quot;enumerated attributes&quot; differently with normal non-boolean attributes:</source>
          <target state="translated">下表描述了Vue胁迫 &quot;枚举属性 &quot;与普通的非boolean属性的不同。</target>
        </trans-unit>
        <trans-unit id="af1bd86b12f9a72f44081cf9de88b1b52575b50e" translate="yes" xml:space="preserve">
          <source>The following table describes the new behavior:</source>
          <target state="translated">下表描述了新的行为。</target>
        </trans-unit>
        <trans-unit id="b5951356bec324133fa39def8def2ef7e47b05c1" translate="yes" xml:space="preserve">
          <source>The following template:</source>
          <target state="translated">以下模板:</target>
        </trans-unit>
        <trans-unit id="79a7f9945e1b3073c06c30c93a587923e0ca489c" translate="yes" xml:space="preserve">
          <source>The function receives a root component options object as a first parameter:</source>
          <target state="translated">该函数接收一个根组件选项对象作为第一个参数。</target>
        </trans-unit>
        <trans-unit id="79ce796c0d386173f99fda9a62ce35edc2ca478b" translate="yes" xml:space="preserve">
          <source>The function receives the resolved props as its first argument:</source>
          <target state="translated">该函数接收解析后的道具作为第一个参数。</target>
        </trans-unit>
        <trans-unit id="e4a607f6bd4411962ffcf434e012c621cb12c3dc" translate="yes" xml:space="preserve">
          <source>The function that returns a data object for the component instance. In &lt;code&gt;data&lt;/code&gt;, we don't recommend to observe objects with their own stateful behavior like browser API objects and prototype properties. A good idea would be to have here just a plain object that represents component data.</source>
          <target state="translated">该函数返回组件实例的数据对象。在 &lt;code&gt;data&lt;/code&gt; ，我们不建议观察具有自身状态行为的对象，例如浏览器API对象和原型属性。一个好主意是在这里只具有一个代表组件数据的普通对象。</target>
        </trans-unit>
        <trans-unit id="81d2bc9fc8e8cc807113eae603850488210c6f3b" translate="yes" xml:space="preserve">
          <source>The function to update the list of repositories</source>
          <target state="translated">更新存储库列表的功能。</target>
        </trans-unit>
        <trans-unit id="6e4a514c82bb3b7baff7919684302ede3370a422" translate="yes" xml:space="preserve">
          <source>The getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt; for a more inspection-friendly interface.</source>
          <target state="translated">该getter / setter对用户是不可见的，但是在内部，它们使Vue在访问或修改属性时能够执行依赖项跟踪和更改通知。一个警告是浏览器控制台在记录转换后的数据对象时格式化getter / setter的方式不同，因此您可能希望安装&lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt;以提供更友好的检查界面。</target>
        </trans-unit>
        <trans-unit id="79b128aa63f16ec5285b2d9f0426b750ca304c24" translate="yes" xml:space="preserve">
          <source>The hook functions for directives have been renamed to better align with the component lifecycle.</source>
          <target state="translated">指令的钩子函数已经重新命名,以便更好地与组件生命周期保持一致。</target>
        </trans-unit>
        <trans-unit id="8cd9d811837e0eecf0a4df368877b6262fe04425" translate="yes" xml:space="preserve">
          <source>The implicitly assigned &lt;code&gt;$index&lt;/code&gt; and &lt;code&gt;$key&lt;/code&gt; variables have been removed in favor of explicitly defining them in &lt;code&gt;v-for&lt;/code&gt;. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.</source>
          <target state="translated">删除了隐式分配的 &lt;code&gt;$index&lt;/code&gt; 和 &lt;code&gt;$key&lt;/code&gt; 变量，以便在 &lt;code&gt;v-for&lt;/code&gt; 中显式定义它们。对于那些对Vue缺乏经验的开发人员来说，这使代码更易于阅读，并且在处理嵌套循环时还可以使行为更清晰。</target>
        </trans-unit>
        <trans-unit id="fdcdfedc033d4da59a3a9ccb8b1076c825abc317" translate="yes" xml:space="preserve">
          <source>The install method will be called with the application as its first argument. Any &lt;code&gt;options&lt;/code&gt; passed to &lt;code&gt;use&lt;/code&gt; will be passed on in subsequent arguments.</source>
          <target state="translated">将以应用程序作为第一个参数调用install方法。传递给 &lt;code&gt;use&lt;/code&gt; 任何 &lt;code&gt;options&lt;/code&gt; 都将在后续参数中传递。</target>
        </trans-unit>
        <trans-unit id="cd591127230d8deaf3a79ff7072473dcdfb326ef" translate="yes" xml:space="preserve">
          <source>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</source>
          <target state="translated">用于当前Vue实例的实例化选项。当您想在选项中包含自定义属性时,这很有用。</target>
        </trans-unit>
        <trans-unit id="42e266e4c0aeeb2f463f05d9ac2084a7679486b8" translate="yes" xml:space="preserve">
          <source>The instantiation options used for the current component instance. This is useful when you want to include custom properties in the options:</source>
          <target state="translated">用于当前实例的实例化选项。当你想在选项中包含自定义属性时,这很有用。</target>
        </trans-unit>
        <trans-unit id="ec67800539f4f653afaebcd18a910db339460bf1" translate="yes" xml:space="preserve">
          <source>The list of repositories</source>
          <target state="translated">储存库清单</target>
        </trans-unit>
        <trans-unit id="6507e95ac3123f38dc39170ae522dfbce1786b53" translate="yes" xml:space="preserve">
          <source>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the &lt;code&gt;v-on&lt;/code&gt; attribute isn&amp;rsquo;t feasible. That&amp;rsquo;s why &lt;code&gt;v-on&lt;/code&gt; can also accept the name of a method you&amp;rsquo;d like to call.</source>
          <target state="translated">但是，许多事件处理程序的逻辑将更加复杂，因此将JavaScript保持在 &lt;code&gt;v-on&lt;/code&gt; 属性的值中是不可行的。这就是为什么 &lt;code&gt;v-on&lt;/code&gt; 也可以接受您要调用的方法的名称的原因。</target>
        </trans-unit>
        <trans-unit id="8643e2e36516469110b28c58127db5ac02acc2d7" translate="yes" xml:space="preserve">
          <source>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the &lt;code&gt;v-on&lt;/code&gt; attribute isn't feasible. That's why &lt;code&gt;v-on&lt;/code&gt; can also accept the name of a method you'd like to call.</source>
          <target state="translated">不过，许多事件处理程序的逻辑会更加复杂，因此将JavaScript保留在 &lt;code&gt;v-on&lt;/code&gt; 属性的值中是不可行的。这就是为什么 &lt;code&gt;v-on&lt;/code&gt; 也可以接受您要调用的方法的名称的原因。</target>
        </trans-unit>
        <trans-unit id="dba79afcd572cfc128e601a2971f43c1e6a797dc" translate="yes" xml:space="preserve">
          <source>The main differences are that:</source>
          <target state="translated">主要区别在于:</target>
        </trans-unit>
        <trans-unit id="a5ec5b554ea02ea1ab8ee1dcd4e2e612d6cff494" translate="yes" xml:space="preserve">
          <source>The main or central content of the document.</source>
          <target state="translated">文件的主要或中心内容。</target>
        </trans-unit>
        <trans-unit id="a7dfd0134284048bc632e36141f4ea3e7333c213" translate="yes" xml:space="preserve">
          <source>The match is first checked on the component&amp;rsquo;s own &lt;code&gt;name&lt;/code&gt; option, then its local registration name (the key in the parent&amp;rsquo;s &lt;code&gt;components&lt;/code&gt; option) if the &lt;code&gt;name&lt;/code&gt; option is not available. Anonymous components cannot be matched against.</source>
          <target state="translated">首先在组件自己的 &lt;code&gt;name&lt;/code&gt; 选项上检查匹配项，然后在 &lt;code&gt;name&lt;/code&gt; 选项不可用时检查其本地注册名称（父项 &lt;code&gt;components&lt;/code&gt; 选项中的键）。匿名组件无法匹配。</target>
        </trans-unit>
        <trans-unit id="ef8038b96392b1b874278c0005b7bde8cb05251c" translate="yes" xml:space="preserve">
          <source>The match is first checked on the component's own &lt;code&gt;name&lt;/code&gt; option, then its local registration name (the key in the parent's &lt;code&gt;components&lt;/code&gt; option) if the &lt;code&gt;name&lt;/code&gt; option is not available. Anonymous components cannot be matched against.</source>
          <target state="translated">首先在组件自己的 &lt;code&gt;name&lt;/code&gt; 选项上检查匹配项，然后在 &lt;code&gt;name&lt;/code&gt; 选项不可用时检查其本地注册名称（父项 &lt;code&gt;components&lt;/code&gt; 选项中的键）。匿名组件无法匹配。</target>
        </trans-unit>
        <trans-unit id="a6157926048113f46fe23ee578e48fe424291d8e" translate="yes" xml:space="preserve">
          <source>The maximum number of component instances to cache. Once this number is reached, the cached component instance that was least recently accessed will be destroyed before creating a new instance.</source>
          <target state="translated">缓存的组件实例的最大数量。一旦达到这个数量,在创建新的实例之前,最近访问最少的缓存组件实例将被销毁。</target>
        </trans-unit>
        <trans-unit id="faa3cf52e773ababaa5a5e4102b0ed3a8de12ab7" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. Let's try to check what do we have in these parameters when we use a mixin:</source>
          <target state="translated">合并策略分别接收定义在父实例和子实例上的那个选项的值作为第一个和第二个参数。让我们试着检查一下当我们使用 mixin 时,这些参数中都有什么。</target>
        </trans-unit>
        <trans-unit id="8bf10a52fb597971ee2811a4b6daca68eb87e10e" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</source>
          <target state="translated">合并策略分别接收在父实例和子实例上定义的那个选项的值作为第一个和第二个参数。上下文Vue实例作为第三个参数传递。</target>
        </trans-unit>
        <trans-unit id="e3b38721a9b8218aec56607e019ddcce672f2049" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context application instance is passed as the third argument.</source>
          <target state="translated">合并策略分别接收在父实例和子实例上定义的那个选项的值作为第一个和第二个参数。上下文应用实例作为第三个参数传递。</target>
        </trans-unit>
        <trans-unit id="7f5a003cef802af9e91a6f9747fac2e515359d41" translate="yes" xml:space="preserve">
          <source>The method returns the instance itself so you can chain other instance methods after it.</source>
          <target state="translated">该方法返回实例本身,所以你可以在它之后连锁其他实例方法。</target>
        </trans-unit>
        <trans-unit id="951de592d924e3c9c03829021deb9a40c05ac8d4" translate="yes" xml:space="preserve">
          <source>The most basic form of data binding is text interpolation using the &quot;Mustache&quot; syntax (double curly braces):</source>
          <target state="translated">数据绑定的最基本形式是使用 &quot;胡子 &quot;语法(双大括号)进行文本插值。</target>
        </trans-unit>
        <trans-unit id="46eb4e33843509639b8c44662beadd21ed8310ed" translate="yes" xml:space="preserve">
          <source>The most basic form of data binding is text interpolation using the &amp;ldquo;Mustache&amp;rdquo; syntax (double curly braces):</source>
          <target state="translated">数据绑定的最基本形式是使用&amp;ldquo; Mustache&amp;rdquo;语法（双花括号）的文本插值：</target>
        </trans-unit>
        <trans-unit id="bd564c73b6d49eec1b2c8919fa49f3bc33098a11" translate="yes" xml:space="preserve">
          <source>The most common use case is combined with &lt;code&gt;v-for&lt;/code&gt;:</source>
          <target state="translated">最常见的用例是与 &lt;code&gt;v-for&lt;/code&gt; 结合使用：</target>
        </trans-unit>
        <trans-unit id="8bb67bc91573d8c042cf8f313e62326372c08cd1" translate="yes" xml:space="preserve">
          <source>The most straightforward workaround in such cases is using &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; with an alternative type:</source>
          <target state="translated">在这种情况下，最直接的解决方法是将 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 与其他类型一起使用：</target>
        </trans-unit>
        <trans-unit id="e584a8b872f017ba0e0f780450cffc4632e3bfc4" translate="yes" xml:space="preserve">
          <source>The mustache tag will be replaced with the value of the &lt;code&gt;msg&lt;/code&gt; property from the corresponding component instance. It will also be updated whenever the &lt;code&gt;msg&lt;/code&gt; property changes.</source>
          <target state="translated">mustache标记将被相应组件实例中的 &lt;code&gt;msg&lt;/code&gt; 属性的值替换。每当 &lt;code&gt;msg&lt;/code&gt; 属性更改时，它也会被更新。</target>
        </trans-unit>
        <trans-unit id="c379b64d918d58c59f406c013a50f15fd94aaa4c" translate="yes" xml:space="preserve">
          <source>The mustache tag will be replaced with the value of the &lt;code&gt;msg&lt;/code&gt; property on the corresponding data object. It will also be updated whenever the data object&amp;rsquo;s &lt;code&gt;msg&lt;/code&gt; property changes.</source>
          <target state="translated">小胡子标记将替换为相应数据对象上的 &lt;code&gt;msg&lt;/code&gt; 属性的值。每当数据对象的 &lt;code&gt;msg&lt;/code&gt; 属性更改时，它也会被更新。</target>
        </trans-unit>
        <trans-unit id="1472ee4db13ff37789b1c91f3cd08acd5d176b23" translate="yes" xml:space="preserve">
          <source>The name of a loaded component.</source>
          <target state="translated">已加载组件的名称。</target>
        </trans-unit>
        <trans-unit id="821d318da5fdda7594f134b76cce4228f91650d3" translate="yes" xml:space="preserve">
          <source>The name of a loaded directive.</source>
          <target state="translated">已加载指令的名称。</target>
        </trans-unit>
        <trans-unit id="b2545c8b359c02ab69b644b81b09e6fb841966ff" translate="yes" xml:space="preserve">
          <source>The name of the property to inject</source>
          <target state="translated">要注入的属性名称</target>
        </trans-unit>
        <trans-unit id="fc9786bb0111ad00d45d0fad40e21ed46d935988" translate="yes" xml:space="preserve">
          <source>The name you give a component may depend on where you intend to use it. When using a component directly in the DOM (as opposed to in a string template or &lt;a href=&quot;single-file-component&quot;&gt;single-file component&lt;/a&gt;), we strongly recommend following the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C rules (opens new window)&lt;/a&gt; for custom tag names:</source>
          <target state="translated">您给组件指定的名称可能取决于您打算在哪里使用它。当直接在DOM中使用组件（而不是在字符串模板或&lt;a href=&quot;single-file-component&quot;&gt;单一文件组件中&lt;/a&gt;）时，我们强烈建议您遵循&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C规则（在新窗口中打开）&lt;/a&gt;以获取自定义标记名称：</target>
        </trans-unit>
        <trans-unit id="37afbe4bcd06f0f0be230e6d8e06d5f57d026a3e" translate="yes" xml:space="preserve">
          <source>The name you give a component may depend on where you intend to use it. When using a component directly in the DOM (as opposed to in a string template or &lt;a href=&quot;single-file-components&quot;&gt;single-file component&lt;/a&gt;), we strongly recommend following the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C rules&lt;/a&gt; for custom tag names (all-lowercase, must contain a hyphen). This helps you avoid conflicts with current and future HTML elements.</source>
          <target state="translated">您给组件指定的名称可能取决于您打算在哪里使用它。当直接在DOM中使用组件（而不是在字符串模板或&lt;a href=&quot;single-file-components&quot;&gt;单一文件组件中&lt;/a&gt;）时，我们强烈建议您遵循&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C规则&lt;/a&gt;中的自定义标记名称（全部小写，必须包含连字符）。这有助于您避免与当前和将来的HTML元素冲突。</target>
        </trans-unit>
        <trans-unit id="26e11e8c8a45e6a0874ed1477c0e4c8be3700515" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;setup&lt;/code&gt; component option is executed &lt;strong&gt;before&lt;/strong&gt; the component is created, once the &lt;code&gt;props&lt;/code&gt; are resolved, and serves as the entry point for composition API's.</source>
          <target state="translated">一旦解决了 &lt;code&gt;props&lt;/code&gt; ，就会在创建组件&lt;strong&gt;之前&lt;/strong&gt;执行新的 &lt;code&gt;setup&lt;/code&gt; component选项，并将其用作组合API的入口点。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49544b57b4faf031cbd490df14c62342f8913c7c" translate="yes" xml:space="preserve">
          <source>The new, more concise way to configure &lt;code&gt;keyCodes&lt;/code&gt; is through &lt;code&gt;Vue.config.keyCodes&lt;/code&gt;. For example:</source>
          <target state="translated">新的，更简洁的配置 &lt;code&gt;keyCodes&lt;/code&gt; 的方法是通过 &lt;code&gt;Vue.config.keyCodes&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="1ba4a8191026a27a782703cf2cb8992c45a25eab" translate="yes" xml:space="preserve">
          <source>The next 2 examples work with Vue 2.2.1+. Below that version, injected values were resolved after the &lt;code&gt;props&lt;/code&gt; and the &lt;code&gt;data&lt;/code&gt; initialization.</source>
          <target state="translated">接下来的2个示例适用于Vue 2.2.1+。在该版本以下，在 &lt;code&gt;props&lt;/code&gt; 和 &lt;code&gt;data&lt;/code&gt; 初始化之后解析注入的值。</target>
        </trans-unit>
        <trans-unit id="c4e0ddfdd8217a03837dee9d518c520c1cff551b" translate="yes" xml:space="preserve">
          <source>The next thing you&amp;rsquo;ll have to become familiar with is how to use template features in the &lt;code&gt;createElement&lt;/code&gt; function. Here are the arguments that &lt;code&gt;createElement&lt;/code&gt; accepts:</source>
          <target state="translated">您必须熟悉的下一件事是如何在 &lt;code&gt;createElement&lt;/code&gt; 函数中使用模板功能。以下是 &lt;code&gt;createElement&lt;/code&gt; 接受的参数：</target>
        </trans-unit>
        <trans-unit id="6425b351a4f55c8cad54b89f6371bbb64f26f4e7" translate="yes" xml:space="preserve">
          <source>The node in the host environment.</source>
          <target state="translated">主机环境中的节点。</target>
        </trans-unit>
        <trans-unit id="f500afab8931eec7a0290164eb6151c650ae181c" translate="yes" xml:space="preserve">
          <source>The object syntax for &lt;code&gt;:style&lt;/code&gt; is pretty straightforward - it looks almost like CSS, except it's a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:</source>
          <target state="translated">&lt;code&gt;:style&lt;/code&gt; 的对象语法非常简单-除了JavaScript对象之外，它看起来几乎像CSS。您可以使用camelCase或kebab-case（在kebab-case中使用引号）作为CSS属性名称：</target>
        </trans-unit>
        <trans-unit id="a93809e131de1acb92c27480b98ade7c8b177368" translate="yes" xml:space="preserve">
          <source>The object syntax for &lt;code&gt;v-bind:style&lt;/code&gt; is pretty straightforward - it looks almost like CSS, except it&amp;rsquo;s a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:</source>
          <target state="translated">&lt;code&gt;v-bind:style&lt;/code&gt; 的对象语法非常简单-看起来几乎像CSS，只是它是一个JavaScript对象。您可以使用camelCase或kebab-case（在kebab-case中使用引号）作为CSS属性名称：</target>
        </trans-unit>
        <trans-unit id="f804d7c199bb60087ee99a4d2ed2841ff111fad8" translate="yes" xml:space="preserve">
          <source>The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</source>
          <target state="translated">官方指南假设你具备HTML、CSS和JavaScript的中级知识。如果你是一个完全陌生的前端开发,那么直接跳进一个框架作为你的第一步可能不是最好的主意--先掌握基础知识,然后再回来。有其他框架的经验会有帮助,但不是必须的。</target>
        </trans-unit>
        <trans-unit id="cdcd3cc5d3cb2f01160d1290fc4a6159e0dddd79" translate="yes" xml:space="preserve">
          <source>The only exception to this being the use of &lt;code&gt;Object.freeze()&lt;/code&gt;, which prevents existing properties from being changed, which also means the reactivity system can&amp;rsquo;t &lt;em&gt;track&lt;/em&gt; changes.</source>
          <target state="translated">唯一的例外是使用 &lt;code&gt;Object.freeze()&lt;/code&gt; ，它可以防止更改现有属性，这也意味着反应系统无法&lt;em&gt;跟踪&lt;/em&gt;更改。</target>
        </trans-unit>
        <trans-unit id="ae045002c5628426d914998c80d5822201c309f7" translate="yes" xml:space="preserve">
          <source>The option also accepts an object, which allows the developer to define validators for the arguments that are passed with the emitted event, similar to validators in &lt;code&gt;props&lt;/code&gt; definitions.</source>
          <target state="translated">该选项还接受一个对象，该对象允许开发人员定义与发出的事件一起传递的参数的验证器，类似于 &lt;code&gt;props&lt;/code&gt; 定义中的验证器。</target>
        </trans-unit>
        <trans-unit id="8eb7f5feed0a750d304ea8614d2edca774bd3f41" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;scoped&lt;/code&gt; attribute automatically scopes this CSS to your component by adding a unique attribute (such as &lt;code&gt;data-v-21e5b78&lt;/code&gt;) to elements and compiling &lt;code&gt;.list-container:hover&lt;/code&gt; to something like &lt;code&gt;.list-container[data-v-21e5b78]:hover&lt;/code&gt;.</source>
          <target state="translated">可选的 &lt;code&gt;scoped&lt;/code&gt; 属性通过在元素上添加唯一属性（例如 &lt;code&gt;data-v-21e5b78&lt;/code&gt; ）并将 &lt;code&gt;.list-container:hover&lt;/code&gt; 编译为 &lt;code&gt;.list-container[data-v-21e5b78]:hover&lt;/code&gt; 类的元素，从而自动将CSS的范围限制在您的组件上：悬停。</target>
        </trans-unit>
        <trans-unit id="fb3f64ee7f789f42cb14ffd6fe23ed6a802c14a2" translate="yes" xml:space="preserve">
          <source>The options passed to &lt;code&gt;createApp&lt;/code&gt; are used to configure the &lt;strong&gt;root component&lt;/strong&gt;. That component is used as the starting point for rendering when we &lt;strong&gt;mount&lt;/strong&gt; the application.</source>
          <target state="translated">传递给 &lt;code&gt;createApp&lt;/code&gt; 的选项用于配置&lt;strong&gt;根组件&lt;/strong&gt;。在&lt;strong&gt;安装&lt;/strong&gt;应用程序时，该组件将用作渲染的起点。</target>
        </trans-unit>
        <trans-unit id="69b0aecb5016308ed5c734f2a458dceae41e382c" translate="yes" xml:space="preserve">
          <source>The original and the wrapped version will behave the same in most cases, but be aware that they will fail operations that rely on strong identity comparisons, such as &lt;code&gt;.filter()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt;. This caveat is unlikely to come up when using the options API, because all reactive state is accessed from &lt;code&gt;this&lt;/code&gt; and guaranteed to already be proxies.</source>
          <target state="translated">原始版本和包装版本在大多数情况下将具有相同的行为，但是请注意，它们将使依赖于强身份比较的操作（例如 &lt;code&gt;.filter()&lt;/code&gt; 或 &lt;code&gt;.map()&lt;/code&gt; )失败。这个警告是不太可能拿出使用选项API时，因为所有的反应状态器访问 &lt;code&gt;this&lt;/code&gt; 并保证已经代理。</target>
        </trans-unit>
        <trans-unit id="8f86e91201591c3c1631acf2b2475e6e451afce5" translate="yes" xml:space="preserve">
          <source>The parent instance, if the current instance has one.</source>
          <target state="translated">父实例,如果当前实例有的话。</target>
        </trans-unit>
        <trans-unit id="dae7b87a95058072fd781e647a0652b7e75f9fe6" translate="yes" xml:space="preserve">
          <source>The previous virtual node, only available in the &lt;code&gt;beforeUpdate&lt;/code&gt; and &lt;code&gt;updated&lt;/code&gt; hooks.</source>
          <target state="translated">以前的虚拟节点，仅在 &lt;code&gt;beforeUpdate&lt;/code&gt; 和 &lt;code&gt;updated&lt;/code&gt; 挂钩中可用。</target>
        </trans-unit>
        <trans-unit id="a213359cc7f926ecae5256c14d1f382a33b06e44" translate="yes" xml:space="preserve">
          <source>The problem is event flows that depend on a component&amp;rsquo;s tree structure can be hard to reason about and are very brittle when the tree becomes large. They don&amp;rsquo;t scale well and only set you up for pain later. &lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt; also do not solve communication between sibling components.</source>
          <target state="translated">问题在于依赖于组件树结构的事件流很难推理，并且当树变大时会变得非常脆弱。他们的伸缩性不好，只会在以后让您痛苦。 &lt;code&gt;$dispatch&lt;/code&gt; 和 &lt;code&gt;$broadcast&lt;/code&gt; 也不能解决同级组件之间的通信。</target>
        </trans-unit>
        <trans-unit id="c8ce914b16d3eb833d4a96dea962dc602115583b" translate="yes" xml:space="preserve">
          <source>The problem is that large numbers of &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;element-attribute selectors (opens new window)&lt;/a&gt; (e.g. &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt;) will be considerably slower than &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;class-attribute selectors (opens new window)&lt;/a&gt; (e.g. &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt;), so class selectors should be preferred whenever possible.</source>
          <target state="translated">问题在于，大量的&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;元素属性选择器（打开新窗口）&lt;/a&gt;（例如 &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt; ）比&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;类属性选择器（打开新窗口）&lt;/a&gt;（例如 &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt; ），因此应尽可能使用类选择器。</target>
        </trans-unit>
        <trans-unit id="98399a72800d5002678971cac53da1533e26a6d2" translate="yes" xml:space="preserve">
          <source>The problem is that large numbers of &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;element-attribute selectors&lt;/a&gt; (e.g. &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt;) will be considerably slower than &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;class-attribute selectors&lt;/a&gt; (e.g. &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt;), so class selectors should be preferred whenever possible.</source>
          <target state="translated">问题在于大量的&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;元素属性选择器&lt;/a&gt;（例如 &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt; ）比&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;类属性选择器&lt;/a&gt;（例如 &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt; ）要慢得多，因此类选择器应该尽可能被优先使用。</target>
        </trans-unit>
        <trans-unit id="3bc4b51815e1ca75817d438f9a75b79de4143526" translate="yes" xml:space="preserve">
          <source>The problem is, there are also many &lt;em&gt;simple&lt;/em&gt; cases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code).</source>
          <target state="translated">问题是，在许多&lt;em&gt;简单的&lt;/em&gt;情况下，这些模式可能会带来便利。当心：不要为了短期的方便（编写更少的代码）而陷入交易简单（能够理解您的状态流程）。</target>
        </trans-unit>
        <trans-unit id="690eaa8b769a27585770a32b044820cae46112dd" translate="yes" xml:space="preserve">
          <source>The problem is, there are cases where it&amp;rsquo;s important not to delete elements that will remain in the DOM. For example, you may want to use &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; to animate list sorting, or maintain focus if the rendered element is an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In these cases, adding a unique key for each item (e.g. &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt;) will tell Vue how to behave more predictably.</source>
          <target state="translated">问题是，在某些情况下，重要的是不要删除将保留在DOM中的元素。例如，您可能想使用 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; 来动画列表排序，或者如果呈现的元素是 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 则保持焦点。在这些情况下，为每个项目添加唯一键（例如 &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt; ）将告诉Vue如何更可预测地表现。</target>
        </trans-unit>
        <trans-unit id="db624a1c9ff9b7e70ad4f4eab6eb1b72253a56ab" translate="yes" xml:space="preserve">
          <source>The problem is, there are cases where it's important not to delete elements that will remain in the DOM. For example, you may want to use &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; to animate list sorting, or maintain focus if the rendered element is an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In these cases, adding a unique key for each item (e.g. &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt;) will tell Vue how to behave more predictably.</source>
          <target state="translated">问题是，在某些情况下，重要的是不要删除将保留在DOM中的元素。例如，您可能想使用 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; 来动画列表排序，或者如果呈现的元素是 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 则保持焦点。在这些情况下，为每个项目添加唯一的键（例如 &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt; ）将告诉Vue如何更可预测地表现。</target>
        </trans-unit>
        <trans-unit id="35549fb2854bdbc4b65652d62df1f1ddfa7a99ea" translate="yes" xml:space="preserve">
          <source>The problem is, this button doesn&amp;rsquo;t do anything:</source>
          <target state="translated">问题是，此按钮不执行任何操作：</target>
        </trans-unit>
        <trans-unit id="8ce7abf75941a4e635ad58dd72808e1a171b6754" translate="yes" xml:space="preserve">
          <source>The problem is, this button doesn't do anything:</source>
          <target state="translated">问题是,这个按钮没有任何作用。</target>
        </trans-unit>
        <trans-unit id="850c18dc4babcffd6886619e5ea2e9c6e0772c92" translate="yes" xml:space="preserve">
          <source>The property's name (&lt;code&gt;&amp;lt;String&amp;gt;&lt;/code&gt; type)</source>
          <target state="translated">属性的名称（ &lt;code&gt;&amp;lt;String&amp;gt;&lt;/code&gt; 类型）</target>
        </trans-unit>
        <trans-unit id="177272c16a443d5fa6984ac9795159e69769b60e" translate="yes" xml:space="preserve">
          <source>The property's value</source>
          <target state="translated">财产的价值</target>
        </trans-unit>
        <trans-unit id="361cd98689630fb5a124f5e83b5f388af1b8a1f3" translate="yes" xml:space="preserve">
          <source>The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">所提供的元件仅用作安装点。与Vue 1.x不同，在所有情况下，已安装的元素都将被Vue生成的DOM替换。因此，不建议将根实例安装到 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f253579781bfc25b1fe1113a88b452b8274fbf7" translate="yes" xml:space="preserve">
          <source>The proxied object is invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. As of Vue 3, our reactivity is now available in a &lt;a href=&quot;https://github.com/vuejs/vue-next/tree/master/packages/reactivity&quot;&gt;separate package (opens new window)&lt;/a&gt;. One caveat is that browser consoles format differently when converted data objects are logged, so you may want to install &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools (opens new window)&lt;/a&gt; for a more inspection-friendly interface.</source>
          <target state="translated">代理的对象对用户不可见，但是在后台，它们使Vue在访问或修改属性时能够执行依赖项跟踪和更改通知。从Vue 3开始，我们的反应性现在可以在&lt;a href=&quot;https://github.com/vuejs/vue-next/tree/master/packages/reactivity&quot;&gt;单独的软件包中使用（打开新窗口）&lt;/a&gt;。需要注意的是，记录转换后的数据对象时，浏览器控制台的格式会有所不同，因此您可能需要安装&lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools（打开新窗口），&lt;/a&gt;以获得更加友好的检查界面。</target>
        </trans-unit>
        <trans-unit id="c0ecee76489f72e420143f4e57a248f07f475e8c" translate="yes" xml:space="preserve">
          <source>The reactive conversion is &quot;deep&quot;&amp;mdash;it affects all nested properties. In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;ES2015 Proxy (opens new window)&lt;/a&gt; based implementation, the returned proxy is &lt;strong&gt;not&lt;/strong&gt; equal to the original object. It is recommended to work exclusively with the reactive proxy and avoid relying on the original object.</source>
          <target state="translated">反应式转换是&amp;ldquo;深度&amp;rdquo;转换，它会影响所有嵌套属性。在基于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;ES2015代理（打开新窗口）&lt;/a&gt;的实现中，返回的代理&lt;strong&gt;不&lt;/strong&gt;等于原始对象。建议仅与反应式代理一起使用，避免依赖原始对象。</target>
        </trans-unit>
        <trans-unit id="34592f5fd4a2054ce0011f9d4e26a9c654b6f7b5" translate="yes" xml:space="preserve">
          <source>The reason for not automatically injecting &lt;code&gt;item&lt;/code&gt; into the component is because that makes the component tightly coupled to how &lt;code&gt;v-for&lt;/code&gt; works. Being explicit about where its data comes from makes the component reusable in other situations.</source>
          <target state="translated">不自动将 &lt;code&gt;item&lt;/code&gt; 注入组件的原因是，这使组件与 &lt;code&gt;v-for&lt;/code&gt; 的工作方式紧密相关。明确说明其数据来自何处使得该组件可在其他情况下重用。</target>
        </trans-unit>
        <trans-unit id="c532c908704eacdd705ddb6c7847a0bd40253f67" translate="yes" xml:space="preserve">
          <source>The reason is this is the equivalent JavaScript that the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; would compile to:</source>
          <target state="translated">原因是这是 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 编译为的等效JavaScript ：</target>
        </trans-unit>
        <trans-unit id="78702fdec5c6b73fa78a98283262c3e3a610ea89" translate="yes" xml:space="preserve">
          <source>The reference will be HTMLElement when used with functional components because they&amp;rsquo;re stateless and instanceless.</source>
          <target state="translated">与功能组件一起使用时，该引用将为HTMLElement，因为它们是无状态且无实例的。</target>
        </trans-unit>
        <trans-unit id="c0c42bbffd6116ac9f9aa2c29f718360da13a0c7" translate="yes" xml:space="preserve">
          <source>The rendered HTML will be:</source>
          <target state="translated">呈现的HTML将是:</target>
        </trans-unit>
        <trans-unit id="a426ede2112c009fbf616db449e0c6e3bc884e8e" translate="yes" xml:space="preserve">
          <source>The result is that many components may include long lists of base components:</source>
          <target state="translated">其结果是,许多组件可能包括长长的基础组件列表。</target>
        </trans-unit>
        <trans-unit id="08f27fe84425493ea316d81bfb5cc71fa39abce0" translate="yes" xml:space="preserve">
          <source>The resulting API could be used like this, mirroring the example from earlier:</source>
          <target state="translated">由此产生的API可以像这样使用,镜像前面的例子。</target>
        </trans-unit>
        <trans-unit id="0894c1243efd2b6757cc56c901b4af230a9aac04" translate="yes" xml:space="preserve">
          <source>The returned object can be used directly inside &lt;a href=&quot;../guide/render-function&quot;&gt;render functions&lt;/a&gt; and &lt;a href=&quot;../guide/computed&quot;&gt;computed properties&lt;/a&gt;, and will trigger appropriate updates when mutated. It can also be used as a minimal, cross-component state store for simple scenarios:</source>
          <target state="translated">返回的对象可以直接在&lt;a href=&quot;../guide/render-function&quot;&gt;渲染函数&lt;/a&gt;和&lt;a href=&quot;../guide/computed&quot;&gt;计算的属性中使用&lt;/a&gt;，并且在发生突变时将触发适当的更新。对于简单的情况，它也可以用作最小的跨组件状态存储：</target>
        </trans-unit>
        <trans-unit id="f5f2182d5b9e1141097f081f69203ed474e7f51a" translate="yes" xml:space="preserve">
          <source>The root DOM element that the Vue instance is managing.</source>
          <target state="translated">Vue实例管理的根DOM元素。</target>
        </trans-unit>
        <trans-unit id="9972076054dc4dddfd1bd61b952d90cd738d9b36" translate="yes" xml:space="preserve">
          <source>The root DOM element that the component instance is managing.</source>
          <target state="translated">管理组件实例的根DOM元素。</target>
        </trans-unit>
        <trans-unit id="1fb1fe84422a22a87a20ac9a9db7f5aca1ce36fc" translate="yes" xml:space="preserve">
          <source>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</source>
          <target state="translated">当前组件树的根Vue实例。如果当前实例没有父类,那么这个值就是它自己。</target>
        </trans-unit>
        <trans-unit id="760ef4817c957d79f640143c58e8bd458b226fd2" translate="yes" xml:space="preserve">
          <source>The root component instance</source>
          <target state="translated">根组件实例</target>
        </trans-unit>
        <trans-unit id="8e1dc161060e2475f3fef40b15a419d3fb6e6453" translate="yes" xml:space="preserve">
          <source>The root component instance of the current component tree. If the current instance has no parents this value will be itself.</source>
          <target state="translated">当前组件树的根组件实例。如果当前实例没有父类,那么这个值就是它自己。</target>
        </trans-unit>
        <trans-unit id="7b232ff8c5c18691a5df8efcbaf774a1cbaab836" translate="yes" xml:space="preserve">
          <source>The same is true for class bindings:</source>
          <target state="translated">对于类绑定也是如此。</target>
        </trans-unit>
        <trans-unit id="27b44782a2426ad3efd960795173b0b3bc81c6b4" translate="yes" xml:space="preserve">
          <source>The second argument passed to the &lt;code&gt;setup&lt;/code&gt; function is the &lt;code&gt;context&lt;/code&gt;. The &lt;code&gt;context&lt;/code&gt; is a normal JavaScript object that exposes three component properties:</source>
          <target state="translated">传递给 &lt;code&gt;setup&lt;/code&gt; 函数的第二个参数是 &lt;code&gt;context&lt;/code&gt; 。所述 &lt;code&gt;context&lt;/code&gt; 是一个正常的JavaScript对象暴露三个组分属性：</target>
        </trans-unit>
        <trans-unit id="3076a28f2234e073b3c5d5fd25022826c2744c96" translate="yes" xml:space="preserve">
          <source>The second argument provides a context object which exposes a selective list of properties that were previously exposed on &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="translated">第二个参数提供它公开了以前关于公开的属性的选择性列表中的上下文对象 &lt;code&gt;this&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ca08b1dc1ff6d4a5c712818ba1c4ace33a4babcc" translate="yes" xml:space="preserve">
          <source>The second parameter is optional, and depends on each particular plugin. In the case of the demo &lt;code&gt;i18nPlugin&lt;/code&gt;, it is an object with the translated strings.</source>
          <target state="translated">第二个参数是可选的，并且取决于每个特定的插件。在演示 &lt;code&gt;i18nPlugin&lt;/code&gt; 的情况下，它是带有转换后的字符串的对象。</target>
        </trans-unit>
        <trans-unit id="dd2c503caba50c997d7446df74ac0da742e9b8eb" translate="yes" xml:space="preserve">
          <source>The size of your app (small to medium-sized apps will probably be less than a day)</source>
          <target state="translated">你的应用程序的大小(中小型应用程序可能会少于一天的时间</target>
        </trans-unit>
        <trans-unit id="d4e4dd52e59dc61ca3774e3d82684a08d4d2de67" translate="yes" xml:space="preserve">
          <source>The slot does &lt;strong&gt;not&lt;/strong&gt; have access to &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt;'s scope. For example, trying to access &lt;code&gt;action&lt;/code&gt; would not work:</source>
          <target state="translated">该插槽&lt;strong&gt;无法&lt;/strong&gt;访问 &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt; 的范围。例如，尝试访问 &lt;code&gt;action&lt;/code&gt; 将不起作用：</target>
        </trans-unit>
        <trans-unit id="46f5b2f5a1e6dfc8f2c7678697e3ab5bcf629f27" translate="yes" xml:space="preserve">
          <source>The slots are passed as functions, allowing the child component to control the creation of each slot's contents. Any reactive data should be accessed within the slot function to ensure that it's registered as a dependency of the child component and not the parent. Conversely, calls to &lt;code&gt;resolveComponent&lt;/code&gt; should be made outside the slot function, otherwise they'll resolve relative to the wrong component:</source>
          <target state="translated">插槽作为函数传递，允许子组件控制每个插槽内容的创建。应该在slot函数内访问任何反应性数据，以确保将其注册为子组件而不是父组件的依赖项。相反，对 &lt;code&gt;resolveComponent&lt;/code&gt; 的调用应在slot函数之外进行，否则它们将相对于错误的组件进行解析：</target>
        </trans-unit>
        <trans-unit id="71c2733bfb43f78b87500262cd44c42870815508" translate="yes" xml:space="preserve">
          <source>The special case to note here is the &lt;code&gt;data&lt;/code&gt; option - it must be a function when used with &lt;code&gt;Vue.extend()&lt;/code&gt;.</source>
          <target state="translated">这里要注意的特殊情况是 &lt;code&gt;data&lt;/code&gt; 选项-与 &lt;code&gt;Vue.extend()&lt;/code&gt; 一起使用时，它必须是一个函数。</target>
        </trans-unit>
        <trans-unit id="572f57cb3c88ad0c0b5d74b281c1e800b18bf5b8" translate="yes" xml:space="preserve">
          <source>The store instance no longer exposes the event emitter interface (&lt;code&gt;on&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;emit&lt;/code&gt;). If you were previously using the store as a global event bus, &lt;a href=&quot;migration#dispatch-and-broadcast-removed&quot;&gt;see this section&lt;/a&gt; for migration instructions.</source>
          <target state="translated">store实例不再公开事件发射器接口（ &lt;code&gt;on&lt;/code&gt; ， &lt;code&gt;off&lt;/code&gt; ， &lt;code&gt;emit&lt;/code&gt; ）。如果您以前将商店用作全局事件总线，&lt;a href=&quot;migration#dispatch-and-broadcast-removed&quot;&gt;请参阅本节&lt;/a&gt;中的迁移说明。</target>
        </trans-unit>
        <trans-unit id="77d67a6f8225d0df00a5fc5a901f8f424ef25e4a" translate="yes" xml:space="preserve">
          <source>The syntax has changed slightly, so &lt;code&gt;/category/*tags&lt;/code&gt; for example, should be updated to &lt;code&gt;/category/:tags+&lt;/code&gt;.</source>
          <target state="translated">语法稍有变化，因此 &lt;code&gt;/category/*tags&lt;/code&gt; 应该更新为 &lt;code&gt;/category/:tags+&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="908884184f3cb4e8612386879bc128af52d0df9c" translate="yes" xml:space="preserve">
          <source>The target object cannot be a Vue instance, or the root data object of a Vue instance.</source>
          <target state="translated">目标对象不能是Vue实例,或者是Vue实例的根数据对象。</target>
        </trans-unit>
        <trans-unit id="3b52d24461e93aad361aa8a10329f3c23cc49031" translate="yes" xml:space="preserve">
          <source>The tooling support (e.g. linting, type checking, editor autocompletion) for JSX is in some ways more advanced than what&amp;rsquo;s currently available for Vue templates.</source>
          <target state="translated">在某些方面，JSX的工具支持（例如，插入，类型检查，编辑器自动完成）比Vue模板当前可用的工具更高级。</target>
        </trans-unit>
        <trans-unit id="da2a622928cb7fb2119351d71d4d29385b2f0b02" translate="yes" xml:space="preserve">
          <source>The tree of DOM nodes for the HTML above looks like this:</source>
          <target state="translated">上面HTML的DOM节点树是这样的。</target>
        </trans-unit>
        <trans-unit id="1e0938b17616f7c664547dd22e0644ffdf02a08b" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;keyCode&lt;/code&gt; events &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;is deprecated&lt;/a&gt; and may not be supported in new browsers.</source>
          <target state="translated">不建议使用 &lt;code&gt;keyCode&lt;/code&gt; 事件&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;，&lt;/a&gt;并且新浏览器可能不支持使用keyCode事件。</target>
        </trans-unit>
        <trans-unit id="9c4b465678423d8a352546c8b85648d07f98dcd7" translate="yes" xml:space="preserve">
          <source>The use of Proxy does introduce a new caveat to be aware with: the proxied object is not equal to the original object in terms of identity comparison (&lt;code&gt;===&lt;/code&gt;). For example:</source>
          <target state="translated">Proxy的使用确实引入了一个新的警告，需要注意：在身份比较（ &lt;code&gt;===&lt;/code&gt; ）方面，代理对象不等于原始对象。例如：</target>
        </trans-unit>
        <trans-unit id="b75354818587ed3801dcd8ec1fa3ae5ccf5adc7b" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'post'&lt;/code&gt; can be used to defer the callback until after rendering. This should be used if the callback needs access to the updated DOM or child components via &lt;code&gt;$refs&lt;/code&gt;.</source>
          <target state="translated">值 &lt;code&gt;'post'&lt;/code&gt; 可用于将回调推迟到渲染之后。如果回调函数需要通过 &lt;code&gt;$refs&lt;/code&gt; 访问更新的DOM或子组件，则应使用此方法。</target>
        </trans-unit>
        <trans-unit id="c973f4080ca50bd81b6cff2d0a6ded9905288da4" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;slot-scope&lt;/code&gt; can accept any valid JavaScript expression that can appear in the argument position of a function definition. This means in supported environments (&lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;modern browsers&lt;/a&gt;) you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring&lt;/a&gt; in the expression, like so:</source>
          <target state="translated">&lt;code&gt;slot-scope&lt;/code&gt; 的值可以接受任何有效的JavaScript表达式，这些表达式可以出现在函数定义的参数位置。这意味着在受支持的环境（&lt;a href=&quot;single-file-components&quot;&gt;单文件组件&lt;/a&gt;或&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;现代浏览器&lt;/a&gt;）中，您还可以在表达式中使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015解构&lt;/a&gt;，如下所示：</target>
        </trans-unit>
        <trans-unit id="44c95331b851049a94d5aa5d023b6e2ddaca60d8" translate="yes" xml:space="preserve">
          <source>The workaround is to either use expressions without spaces or quotes, or replace the complex expression with a computed property.</source>
          <target state="translated">解决办法是使用不带空格或引号的表达式,或者用计算的属性替换复杂的表达式。</target>
        </trans-unit>
        <trans-unit id="d02680275f323eda2de9d2d7078001372e594964" translate="yes" xml:space="preserve">
          <source>Their names often include the name of an element they wrap (e.g. &lt;code&gt;BaseButton&lt;/code&gt;, &lt;code&gt;BaseTable&lt;/code&gt;), unless no element exists for their specific purpose (e.g. &lt;code&gt;BaseIcon&lt;/code&gt;). If you build similar components for a more specific context, they will almost always consume these components (e.g. &lt;code&gt;BaseButton&lt;/code&gt; may be used in &lt;code&gt;ButtonSubmit&lt;/code&gt;).</source>
          <target state="translated">它们的名称通常包括它们包装的元素的名称（例如 &lt;code&gt;BaseButton&lt;/code&gt; ， &lt;code&gt;BaseTable&lt;/code&gt; ），除非不存在用于其特定用途的元素（例如 &lt;code&gt;BaseIcon&lt;/code&gt; ）。如果为更特定的上下文构建相似的组件，则它们几乎总是消耗这些组件（例如， &lt;code&gt;ButtonSubmit&lt;/code&gt; 可以在ButtonSubmit中使用 &lt;code&gt;BaseButton&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cac8885ec5589429c1668b6076e0b655b65a0072" translate="yes" xml:space="preserve">
          <source>Then a &lt;code&gt;tree-folder-contents&lt;/code&gt; component with this template:</source>
          <target state="translated">然后是带有此模板的 &lt;code&gt;tree-folder-contents&lt;/code&gt; 组件：</target>
        </trans-unit>
        <trans-unit id="12ff53d6c9683fe8bc4c3c3ebe06eaf2daa8b2b3" translate="yes" xml:space="preserve">
          <source>Then add some classes when using it:</source>
          <target state="translated">然后在使用时增加一些类。</target>
        </trans-unit>
        <trans-unit id="bdb3d0b6c8743a01fad092b8628997433e226d02" translate="yes" xml:space="preserve">
          <source>Then changes to &lt;code&gt;b&lt;/code&gt; will not trigger any view updates. If you know you&amp;rsquo;ll need a property later, but it starts out empty or non-existent, you&amp;rsquo;ll need to set some initial value. For example:</source>
          <target state="translated">然后，更改为 &lt;code&gt;b&lt;/code&gt; 将不会触发任何视图更新。如果您知道以后需要一个属性，但是该属性开始为空或不存在，则需要设置一些初始值。例如：</target>
        </trans-unit>
        <trans-unit id="d716ba19ef13983399aba7a4f9b4f99bdb1a5cc3" translate="yes" xml:space="preserve">
          <source>Then define the components you&amp;rsquo;d like to use in a &lt;code&gt;components&lt;/code&gt; option:</source>
          <target state="translated">然后在 &lt;code&gt;components&lt;/code&gt; 选项中定义要使用的组件：</target>
        </trans-unit>
        <trans-unit id="f007f5e8e39cc6bea44deac887f75b66321c705c" translate="yes" xml:space="preserve">
          <source>Then define the components you'd like to use in a &lt;code&gt;components&lt;/code&gt; option:</source>
          <target state="translated">然后在 &lt;code&gt;components&lt;/code&gt; 选项中定义要使用的组件：</target>
        </trans-unit>
        <trans-unit id="89b993f413d7a3516733e84da6538330a9b561e6" translate="yes" xml:space="preserve">
          <source>Then import the component options along with Vue, and you can make many common assertions (here we are using Jasmine/Jest style &lt;code&gt;expect&lt;/code&gt; assertions just as an example):</source>
          <target state="translated">然后将组件选项与Vue一起导入，您可以进行许多常见的断言（这里我们以Jasmine / Jest风格的 &lt;code&gt;expect&lt;/code&gt; 断言为例）：</target>
        </trans-unit>
        <trans-unit id="742a07eca2247a701f3fe69d736358f9945a7047" translate="yes" xml:space="preserve">
          <source>Then in a template, you can use the new &lt;code&gt;v-focus&lt;/code&gt; attribute on any element, like this:</source>
          <target state="translated">然后，在模板中，可以在任何元素上使用新的 &lt;code&gt;v-focus&lt;/code&gt; 属性，如下所示：</target>
        </trans-unit>
        <trans-unit id="d651621f023beec6364c642e7684b35f30f1b1df" translate="yes" xml:space="preserve">
          <source>Then in any descendants, we can use the &lt;code&gt;inject&lt;/code&gt; option to receive specific properties we&amp;rsquo;d like to add to that instance:</source>
          <target state="translated">然后，在任何后代中，我们都可以使用 &lt;code&gt;inject&lt;/code&gt; 选项接收要添加到该实例的特定属性：</target>
        </trans-unit>
        <trans-unit id="07a1a769eabe4ce95fd548704bfe1a9036dff3fe" translate="yes" xml:space="preserve">
          <source>Then in our components, we can use &lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;, &lt;code&gt;$off&lt;/code&gt; to emit events, listen for events, and clean up event listeners, respectively:</source>
          <target state="translated">然后，在我们的组件中，我们可以分别使用 &lt;code&gt;$emit&lt;/code&gt; ， &lt;code&gt;$on&lt;/code&gt; ， &lt;code&gt;$off&lt;/code&gt; 来发出事件，监听事件和清理事件监听器：</target>
        </trans-unit>
        <trans-unit id="21a483bbcca1197cc5639fdfa56fc5a657078e60" translate="yes" xml:space="preserve">
          <source>Then in the Vue projects, run</source>
          <target state="translated">然后在Vue项目中,运行</target>
        </trans-unit>
        <trans-unit id="e5a24c495cff3ba785929f2d1f1232971575aecc" translate="yes" xml:space="preserve">
          <source>Then in the template for &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt;, you might have:</source>
          <target state="translated">然后，在 &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt; 的模板中，您可能具有：</target>
        </trans-unit>
        <trans-unit id="28d893d2fe7cf8b2aa4343023bf7d3d899faf556" translate="yes" xml:space="preserve">
          <source>Then in the template for &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt;, you might have:</source>
          <target state="translated">然后，在 &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt; 的模板中，您可能具有：</target>
        </trans-unit>
        <trans-unit id="06c17e2b180b30e57b025d1baba4010bf150e5ff" translate="yes" xml:space="preserve">
          <source>Then inside &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; you might find yourself reaching for a hack like this:</source>
          <target state="translated">然后在 &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; 内部,您可能会发现自己受到了这样的攻击：</target>
        </trans-unit>
        <trans-unit id="6cb73bd95447c7f774f020d38dc4e977b5d7f966" translate="yes" xml:space="preserve">
          <source>Then switching the &lt;code&gt;loginType&lt;/code&gt; in the code above will not erase what the user has already entered. Since both templates use the same elements, the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; is not replaced - just its &lt;code&gt;placeholder&lt;/code&gt;.</source>
          <target state="translated">然后，在上面的代码中切换 &lt;code&gt;loginType&lt;/code&gt; 不会删除用户已经输入的内容。由于两个模板使用相同的元素，因此不会替换 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; －只是其 &lt;code&gt;placeholder&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6afded1525a7e22ff2f90a6400204ea03039f331" translate="yes" xml:space="preserve">
          <source>Then the child component can emit an event on itself by calling the built-in &lt;a href=&quot;../api/index#vm-emit&quot;&gt;&lt;strong&gt;&lt;code&gt;$emit&lt;/code&gt;&lt;/strong&gt; method&lt;/a&gt;, passing the name of the event:</source>
          <target state="translated">然后，子组件可以通过调用内置的&lt;a href=&quot;../api/index#vm-emit&quot;&gt;&lt;strong&gt; &lt;code&gt;$emit&lt;/code&gt; &lt;/strong&gt;方法&lt;/a&gt;并传递事件名称来自身&lt;strong&gt;发出&lt;/strong&gt;事件：</target>
        </trans-unit>
        <trans-unit id="6f7cebb09ffb1468ffa3d18cca25389851f424a1" translate="yes" xml:space="preserve">
          <source>Then the child component can emit an event on itself by calling the built-in &lt;a href=&quot;../api/instance-methods#emit&quot;&gt;&lt;strong&gt;&lt;code&gt;$emit&lt;/code&gt;&lt;/strong&gt; method&lt;/a&gt;, passing the name of the event:</source>
          <target state="translated">然后，子组件可以通过调用内置的&lt;a href=&quot;../api/instance-methods#emit&quot;&gt;&lt;strong&gt; &lt;code&gt;$emit&lt;/code&gt; &lt;/strong&gt;方法&lt;/a&gt;并传递事件名称来自身&lt;strong&gt;发出&lt;/strong&gt;事件：</target>
        </trans-unit>
        <trans-unit id="fa6a05a02bb2743e63986fe5978b02e07581ae91" translate="yes" xml:space="preserve">
          <source>Then the parent can listen to that event and update a local data property, if it wants to. For example:</source>
          <target state="translated">然后,如果父体想要的话,就可以监听该事件并更新本地的数据属性。比如说</target>
        </trans-unit>
        <trans-unit id="9efd5288754c42150231112638e5e4f3ca6e8940" translate="yes" xml:space="preserve">
          <source>Then the parent could listen to that event and update a local data property, if it wants to. For example:</source>
          <target state="translated">然后父体可以监听该事件并更新本地的数据属性,如果它愿意的话。比如说</target>
        </trans-unit>
        <trans-unit id="6a4b4fbfbeb2382afaa428f3aa7171b1ee657214" translate="yes" xml:space="preserve">
          <source>Then the provided content will be rendered instead:</source>
          <target state="translated">然后,所提供的内容将被渲染。</target>
        </trans-unit>
        <trans-unit id="894b33adf4423b8e17178e298c582eff7b692b2f" translate="yes" xml:space="preserve">
          <source>Then the value will be passed as the first parameter of that method:</source>
          <target state="translated">然后该值将作为该方法的第一个参数传递。</target>
        </trans-unit>
        <trans-unit id="e40f0a46552f37df14dd5aec3ff5064babdeaea5" translate="yes" xml:space="preserve">
          <source>Then want to render a component for each one:</source>
          <target state="translated">然后想要为每一个人渲染一个组件。</target>
        </trans-unit>
        <trans-unit id="e77b5195b094315391d1471e49e775352de3ff46" translate="yes" xml:space="preserve">
          <source>Then when later accessing this property on a route, you will still go through meta. For example:</source>
          <target state="translated">那么以后在路线上访问这个属性的时候,你还是会通过meta。比如说</target>
        </trans-unit>
        <trans-unit id="db6fb96dd889a51b383d80ca6045c8aa43c69291" translate="yes" xml:space="preserve">
          <source>Then when we listen to the event in the parent, we can access the emitted event&amp;rsquo;s value with &lt;code&gt;$event&lt;/code&gt;:</source>
          <target state="translated">然后，当我们在父级中监听事件时，可以使用 &lt;code&gt;$event&lt;/code&gt; 访问发出的事件的值：</target>
        </trans-unit>
        <trans-unit id="1b964bdbe48ac1c49dabc676491d5f4552927e7d" translate="yes" xml:space="preserve">
          <source>Then when we listen to the event in the parent, we can access the emitted event's value with &lt;code&gt;$event&lt;/code&gt;:</source>
          <target state="translated">然后，当我们在父级中监听事件时，可以使用 &lt;code&gt;$event&lt;/code&gt; 访问发出的事件的值：</target>
        </trans-unit>
        <trans-unit id="944f38d9e324604cc12e36973eba61971ac566d4" translate="yes" xml:space="preserve">
          <source>Then you can fix all templates using this &lt;code&gt;$filters&lt;/code&gt; object like this:</source>
          <target state="translated">然后，您可以使用 &lt;code&gt;$filters&lt;/code&gt; 对象修复所有模板，如下所示：</target>
        </trans-unit>
        <trans-unit id="eb930daa712d8e2eb8fe97e59c6f27531e9b1c3e" translate="yes" xml:space="preserve">
          <source>Then you can start writing Vue code and even ship the minified version to production without feeling guilty or having to worry about performance problems.</source>
          <target state="translated">然后,你就可以开始编写Vue代码,甚至可以将最小化版本发布到生产中,而不必感到内疚或担心性能问题。</target>
        </trans-unit>
        <trans-unit id="ebf3c9e7f553f2151cca31494ec2e2f25d6a17ab" translate="yes" xml:space="preserve">
          <source>Then you sort them alphabetically. When updating the DOM, Vue will optimize rendering to perform the cheapest DOM mutations possible. That might mean deleting the first todo element, then adding it again at the end of the list.</source>
          <target state="translated">然后你按字母顺序对它们进行排序。当更新DOM时,Vue会优化渲染,以执行尽可能便宜的DOM突变。这可能意味着删除第一个todo元素,然后在列表末尾再次添加。</target>
        </trans-unit>
        <trans-unit id="60891cf748e8a5cfa058d96629753adac1a276a6" translate="yes" xml:space="preserve">
          <source>Then you would now update it to:</source>
          <target state="translated">那么你现在就会更新为:</target>
        </trans-unit>
        <trans-unit id="29dfab044dfc1294ff91b939dd91ab9260db5d9f" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll need to import each component you&amp;rsquo;d like to use, before you locally register it. For example, in a hypothetical &lt;code&gt;ComponentB.js&lt;/code&gt; or &lt;code&gt;ComponentB.vue&lt;/code&gt; file:</source>
          <target state="translated">然后，您需要在本地注册之前导入要使用的每个组件。例如，在假设的 &lt;code&gt;ComponentB.js&lt;/code&gt; 或 &lt;code&gt;ComponentB.vue&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="bbbca49c29405f3089d76789fe1e0ea9835caf98" translate="yes" xml:space="preserve">
          <source>Then you'll need to import each component you'd like to use, before you locally register it. For example, in a hypothetical &lt;code&gt;ComponentB.js&lt;/code&gt; or &lt;code&gt;ComponentB.vue&lt;/code&gt; file:</source>
          <target state="translated">然后，在本地注册之前，您需要导入要使用的每个组件。例如，在假设的 &lt;code&gt;ComponentB.js&lt;/code&gt; 或 &lt;code&gt;ComponentB.vue&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="4a02df39977359aa3a054dc03aa4a5ab9829f85e" translate="yes" xml:space="preserve">
          <source>There also seem to be philosophical differences in the API design which if you&amp;rsquo;re curious, can be demonstrated by how each handles the creation of a &lt;a href=&quot;https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89&quot;&gt;simple todo list&lt;/a&gt;. It&amp;rsquo;s definitely somewhat subjective, but many consider Vue&amp;rsquo;s API to be less complex and better structured.</source>
          <target state="translated">API设计中似乎还存在哲学上的差异，如果您好奇的话，可以通过每个人如何处理&lt;a href=&quot;https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89&quot;&gt;简单的待办事项列表&lt;/a&gt;来证明这一点。这绝对是主观的，但是许多人认为Vue的API不太复杂，结构也更好。</target>
        </trans-unit>
        <trans-unit id="00ee1410ff14873dae0595e837c501a60becd79c" translate="yes" xml:space="preserve">
          <source>There are a few advantages:</source>
          <target state="translated">有几个优点。</target>
        </trans-unit>
        <trans-unit id="87ca995da3464bf63362398bc880975ded2ee3cc" translate="yes" xml:space="preserve">
          <source>There are a huge range of disabilities, which can be divided roughly into four categories:</source>
          <target state="translated">残疾种类繁多,大致可分为四类。</target>
        </trans-unit>
        <trans-unit id="18eecd77b539219d855322c591de00710dfa9efa" translate="yes" xml:space="preserve">
          <source>There are a number of reasons for placing &lt;code&gt;props&lt;/code&gt; as a separate first argument instead of including it in the context:</source>
          <target state="translated">有很多原因将 &lt;code&gt;props&lt;/code&gt; 放置为单独的第一个参数，而不是将其包含在上下文中：</target>
        </trans-unit>
        <trans-unit id="a278039d12ee8bace65331079237ab972774e0f6" translate="yes" xml:space="preserve">
          <source>There are also a few array-related caveats, which were discussed earlier in the &lt;a href=&quot;list#Caveats&quot;&gt;list rendering section&lt;/a&gt;.</source>
          <target state="translated">还有一些与数组有关的警告，在&lt;a href=&quot;list#Caveats&quot;&gt;列表呈现部分中&lt;/a&gt;已进行了讨论。</target>
        </trans-unit>
        <trans-unit id="8355a914d86b23056657ff75f59f4f4811dbbe1e" translate="yes" xml:space="preserve">
          <source>There are also other hooks which will be called at different stages of the instance&amp;rsquo;s lifecycle, such as &lt;a href=&quot;../api/index#mounted&quot;&gt;&lt;code&gt;mounted&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/index#updated&quot;&gt;&lt;code&gt;updated&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../api/index#destroyed&quot;&gt;&lt;code&gt;destroyed&lt;/code&gt;&lt;/a&gt;. All lifecycle hooks are called with their &lt;code&gt;this&lt;/code&gt; context pointing to the Vue instance invoking it.</source>
          <target state="translated">在实例生命周期的不同阶段还会调用其他挂钩，例如&lt;a href=&quot;../api/index#mounted&quot;&gt; &lt;code&gt;mounted&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../api/index#updated&quot;&gt; &lt;code&gt;updated&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../api/index#destroyed&quot;&gt; &lt;code&gt;destroyed&lt;/code&gt; &lt;/a&gt;。所有的生命周期挂钩叫他们 &lt;code&gt;this&lt;/code&gt; 方面指向Vue的实例调用它。</target>
        </trans-unit>
        <trans-unit id="2e596486dc08d17a554e02af4b2f5f3241a6640d" translate="yes" xml:space="preserve">
          <source>There are also other hooks which will be called at different stages of the instance's lifecycle, such as &lt;a href=&quot;../api/options-lifecycle-hooks#mounted&quot;&gt;mounted&lt;/a&gt;, &lt;a href=&quot;../api/options-lifecycle-hooks#updated&quot;&gt;updated&lt;/a&gt;, and &lt;a href=&quot;../api/options-lifecycle-hooks#unmounted&quot;&gt;unmounted&lt;/a&gt;. All lifecycle hooks are called with their &lt;code&gt;this&lt;/code&gt; context pointing to the current active instance invoking it.</source>
          <target state="translated">在实例生命周期的不同阶段还会调用其他挂钩，例如&lt;a href=&quot;../api/options-lifecycle-hooks#mounted&quot;&gt;mount&lt;/a&gt;，&lt;a href=&quot;../api/options-lifecycle-hooks#updated&quot;&gt;update&lt;/a&gt;和&lt;a href=&quot;../api/options-lifecycle-hooks#unmounted&quot;&gt;unmount&lt;/a&gt;。调用所有生命周期挂钩，并使用其 &lt;code&gt;this&lt;/code&gt; 上下文指向当前正在调用它的活动实例。</target>
        </trans-unit>
        <trans-unit id="595e87e7a707cb9f54dea4bd06abe43f491c5b96" translate="yes" xml:space="preserve">
          <source>There are cases however, particularly shared component libraries, when this &lt;em&gt;might&lt;/em&gt; be appropriate. For example, in abstract components that interact with JavaScript APIs instead of rendering HTML, like these hypothetical Google Maps components:</source>
          <target state="translated">但是，在某些情况下，尤其是共享组件库，&lt;em&gt;可能&lt;/em&gt;会适合。例如，在与JavaScript API交互而不呈现HTML的抽象组件中，例如以下假设的Google Maps组件：</target>
        </trans-unit>
        <trans-unit id="3876196be292a6f75aaef350c2cf3fa6064ad6ee" translate="yes" xml:space="preserve">
          <source>There are cases when it&amp;rsquo;s useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">在某些情况下，为插槽指定回退（即默认）内容很有用，仅在未提供任何内容时才呈现。例如，在 &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; 组件中：</target>
        </trans-unit>
        <trans-unit id="023ed11339a46f2308db7110e18a32765ded128c" translate="yes" xml:space="preserve">
          <source>There are cases when it's useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">在某些情况下，为插槽指定回退（即默认）内容很有用，仅在未提供任何内容时才呈现。例如，在 &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; 组件中：</target>
        </trans-unit>
        <trans-unit id="b097d3f1a1272b7a886d701f8e65981ad1d92968" translate="yes" xml:space="preserve">
          <source>There are quite a few other directives, each with its own special functionality. For example, the &lt;code&gt;v-for&lt;/code&gt; directive can be used for displaying a list of items using the data from an Array:</source>
          <target state="translated">还有很多其他指令，每个指令都有其自己的特殊功能。例如， &lt;code&gt;v-for&lt;/code&gt; 指令可用于使用数组中的数据显示项目列表：</target>
        </trans-unit>
        <trans-unit id="9ffde334a578c795b91b7f31309b04b95aaef274" translate="yes" xml:space="preserve">
          <source>There are quite a few other directives, each with its own special functionality. For example, the &lt;code&gt;v-for&lt;/code&gt; directive can be used to display a list of items using the data from an array:</source>
          <target state="translated">还有很多其他指令，每个指令都有其自己的特殊功能。例如，可以使用 &lt;code&gt;v-for&lt;/code&gt; 伪指令使用数组中的数据显示项目列表：</target>
        </trans-unit>
        <trans-unit id="301d312bbcc93ad24cc77d82516195cad4b40d9a" translate="yes" xml:space="preserve">
          <source>There are six classes applied for enter/leave transitions.</source>
          <target state="translated">有六个班级适用于进入/离开的转换。</target>
        </trans-unit>
        <trans-unit id="68ec2c8ded7b22cd2bc4c88259f22e650546ce9b" translate="yes" xml:space="preserve">
          <source>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the &lt;code&gt;data&lt;/code&gt; object is like the schema for your component&amp;rsquo;s state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</source>
          <target state="translated">此限制背后有技术原因-它消除了依赖项跟踪系统中的一类极端情况，还使Vue实例在类型检查系统中表现得更好。但是在代码可维护性方面，还有一个重要的考虑因素： &lt;code&gt;data&lt;/code&gt; 对象就像组件状态的架构。预先声明所有反应式属性可以使组件代码在以后重新访问或由其他开发人员阅读时更易于理解。</target>
        </trans-unit>
        <trans-unit id="cd23ee5c3baea83a9cbbf815348ec184dd9b7581" translate="yes" xml:space="preserve">
          <source>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes component instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the &lt;code&gt;data&lt;/code&gt; object is like the schema for your component's state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</source>
          <target state="translated">此限制背后有技术原因-它消除了依赖性跟踪系统中的一类极端情况，还使组件实例在类型检查系统中发挥了更好的作用。但是在代码可维护性方面，还有一个重要的考虑因素： &lt;code&gt;data&lt;/code&gt; 对象就像组件状态的架构。预先声明所有反应式属性可以使组件代码在以后重新访问或由其他开发人员阅读时更易于理解。</target>
        </trans-unit>
        <trans-unit id="1fe3e32d655e16db1bfb24d4c220af3cbcc38d7c" translate="yes" xml:space="preserve">
          <source>There are three primary ways of adding Vue.js to a project:</source>
          <target state="translated">将Vue.js添加到项目中有三种主要方式。</target>
        </trans-unit>
        <trans-unit id="db30e092cad90bed9c249d97be67dad62ff063c2" translate="yes" xml:space="preserve">
          <source>There are times when it&amp;rsquo;s useful to have multiple slots. For example, in a &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">有时候拥有多个插槽很有用。例如，在具有以下模板的 &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; 组件中：</target>
        </trans-unit>
        <trans-unit id="e1813b2bf6f7cecd057263ad277b6fac59e1ce1e" translate="yes" xml:space="preserve">
          <source>There are times when it's useful to have multiple slots. For example, in a &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">有时候拥有多个插槽很有用。例如，在具有以下模板的 &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; 组件中：</target>
        </trans-unit>
        <trans-unit id="d66a662b2b692933bc8923306e3e5688421626cb" translate="yes" xml:space="preserve">
          <source>There are two common cases where this can be tempting:</source>
          <target state="translated">有两种常见的情况会很诱人。</target>
        </trans-unit>
        <trans-unit id="4be534cacf73464a26b8c69ecc68abf4cebc095f" translate="yes" xml:space="preserve">
          <source>There are usually two cases where it&amp;rsquo;s tempting to mutate a prop:</source>
          <target state="translated">通常在两种情况下诱使道具诱人：</target>
        </trans-unit>
        <trans-unit id="a8132b188e4877e8a452f3faa4d8374aab1ffa3f" translate="yes" xml:space="preserve">
          <source>There are usually two cases where it's tempting to mutate a prop:</source>
          <target state="translated">通常有两种情况下,很想突变一个道具。</target>
        </trans-unit>
        <trans-unit id="1d31dfadc2282cbff8486ff7a98cbf1a40dcb49c" translate="yes" xml:space="preserve">
          <source>There are various other component options that add user-defined properties to the component instance, such as &lt;code&gt;methods&lt;/code&gt;, &lt;code&gt;props&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;inject&lt;/code&gt; and &lt;code&gt;setup&lt;/code&gt;. We'll discuss each of these in depth later in the guide. All of the properties of the component instance, no matter how they are defined, will be accessible in the component's template.</source>
          <target state="translated">还有其他各种组件选项，这些组件选项将用户定义的属性添加到组件实例，例如 &lt;code&gt;methods&lt;/code&gt; ， &lt;code&gt;props&lt;/code&gt; ， &lt;code&gt;computed&lt;/code&gt; ， &lt;code&gt;inject&lt;/code&gt; 和 &lt;code&gt;setup&lt;/code&gt; 。我们将在本指南的后面部分深入讨论每一个。无论如何定义组件实例的所有属性，都可以在组件的模板中访问它们。</target>
        </trans-unit>
        <trans-unit id="9a46df346eecefc8c5696a405d0623a7868c6f68" translate="yes" xml:space="preserve">
          <source>There can still be one unnamed slot, which is the &lt;strong&gt;default slot&lt;/strong&gt; that serves as a catch-all for any unmatched content. In both examples above, the rendered HTML would be:</source>
          <target state="translated">仍然会有一个未命名的插槽，这是&lt;strong&gt;默认插槽&lt;/strong&gt;，可作为所有不匹配内容的全部。在以上两个示例中，呈现的HTML将为：</target>
        </trans-unit>
        <trans-unit id="3134ce0335f7ad34a1ca3736890a4ab8dd322f95" translate="yes" xml:space="preserve">
          <source>There is a certain temptation to abuse these styles, as one can simply add a change inside a callout. However, this breaks up the flow of reading for the user, and thus, should only be used in special circumstances. Wherever possible, we should attempt to create a narrative and flow within the page to respect the readers cognitive load.</source>
          <target state="translated">滥用这些样式有一定的诱惑力,因为人们可以简单地在callout中添加一个变化。然而,这打破了用户的阅读流程,因此,只应在特殊情况下使用。只要有可能,我们就应该尝试在页面中创建一个叙事和流程,以尊重读者的认知负荷。</target>
        </trans-unit>
        <trans-unit id="892e9605b3eb99a1e8758152c0f0d14bd50018ba" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;vm.$nextTick()&lt;/code&gt; instance method, which is especially handy inside components, because it doesn&amp;rsquo;t need global &lt;code&gt;Vue&lt;/code&gt; and its callback&amp;rsquo;s &lt;code&gt;this&lt;/code&gt; context will be automatically bound to the current Vue instance:</source>
          <target state="translated">还有 &lt;code&gt;vm.$nextTick()&lt;/code&gt; 实例方法，该方法在组件内部特别方便，因为它不需要全局 &lt;code&gt;Vue&lt;/code&gt; ,并且其回调函数的 &lt;code&gt;this&lt;/code&gt; 上下文将自动绑定到当前Vue实例：</target>
        </trans-unit>
        <trans-unit id="931f9d7dad513e241c3b7564504c589081e367fc" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;vm.$nextTick()&lt;/code&gt; instance method, which is especially handy inside components, because it doesn't need global &lt;code&gt;Vue&lt;/code&gt; and its callback's &lt;code&gt;this&lt;/code&gt; context will be automatically bound to the current component instance:</source>
          <target state="translated">还有 &lt;code&gt;vm.$nextTick()&lt;/code&gt; 实例方法，该方法在组件内部特别方便，因为它不需要全局 &lt;code&gt;Vue&lt;/code&gt; ,并且其回调函数的 &lt;code&gt;this&lt;/code&gt; 上下文将自动绑定到当前组件实例：</target>
        </trans-unit>
        <trans-unit id="e795677faa92646e68896f4fa2d153d1c6b3dad9" translate="yes" xml:space="preserve">
          <source>There is no direct &lt;code&gt;v-model&lt;/code&gt; counterpart in render functions - you will have to implement the logic yourself:</source>
          <target state="translated">渲染函数中没有直接的 &lt;code&gt;v-model&lt;/code&gt; 对应物-您将必须自己实现逻辑：</target>
        </trans-unit>
        <trans-unit id="a3dc3c28e5738e838da6dece3bd69b468532f5bd" translate="yes" xml:space="preserve">
          <source>There is no longer a special API to initialize an app with Vue Router. That means instead of:</source>
          <target state="translated">现在已经没有专门的API来初始化Vue Router的应用了。这意味着代替。</target>
        </trans-unit>
        <trans-unit id="748ac69009ecb3989841a051f46a547dafda1aa5" translate="yes" xml:space="preserve">
          <source>There is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:</source>
          <target state="translated">插件没有严格定义的范围,但常见的插件有用的场景包括:。</target>
        </trans-unit>
        <trans-unit id="e786ab8525d61c08d5edd49d36eaafa66121f1c6" translate="yes" xml:space="preserve">
          <source>There may be times when you want to listen directly to a native event on the root element of a component. In these cases, you can use the &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">有时您可能想直接侦听组件根元素上的本地事件。在这种情况下，你可以使用 &lt;code&gt;.native&lt;/code&gt; 修改为 &lt;code&gt;v-on&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e13a2b6d1fa69f970582ef7c30a8696baaa1caf0" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot you can do to help Vue grow in your community:</source>
          <target state="translated">您可以采取许多措施来帮助Vue在您的社区中成长：</target>
        </trans-unit>
        <trans-unit id="c70dcc11c00ce0163cd6cf08b8dae423423a248d" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no longer a use case for this in the new Vue Router.</source>
          <target state="translated">新的Vue路由器中不再有这种用例。</target>
        </trans-unit>
        <trans-unit id="163f368f2bf083cc1079a14cd05b50989be0cc02" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We&amp;rsquo;ll fix that later.</source>
          <target state="translated">这个例子有一个问题。添加或删除项目时，项目周围的项目会立即捕捉到新位置，而不是平稳过渡。我们稍后会修复。</target>
        </trans-unit>
        <trans-unit id="5d85fbe7675b4e4ec3b50bf7054fe53d2209ebb4" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s still one problem though. Try clicking the button below:</source>
          <target state="translated">但是仍然有一个问题。尝试点击下面的按钮：</target>
        </trans-unit>
        <trans-unit id="41dad96a14fa109e6a88e60050e0bfc7bfc382d1" translate="yes" xml:space="preserve">
          <source>There's one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We'll fix that later.</source>
          <target state="translated">这个例子有一个问题。当你添加或删除一个项目时,它周围的项目会立即捕捉到新的位置,而不是平滑地过渡。我们稍后会解决这个问题。</target>
        </trans-unit>
        <trans-unit id="893d7a218b3089037a8f9da21759565483e409b9" translate="yes" xml:space="preserve">
          <source>There's still one problem though. Try clicking the button below:</source>
          <target state="translated">不过还是有一个问题。试着点击下面的按钮。</target>
        </trans-unit>
        <trans-unit id="6bd02d746956ee7fbd6d2715d983298e056e2e25" translate="yes" xml:space="preserve">
          <source>Therefore, watchers that use template refs should be defined with the &lt;code&gt;flush: 'post'&lt;/code&gt; option. This will run the effect &lt;em&gt;after&lt;/em&gt; the DOM has been updated and ensure that the template ref stays in sync with the DOM and references the correct element.</source>
          <target state="translated">因此，应该使用 &lt;code&gt;flush: 'post'&lt;/code&gt; 选项定义使用模板引用的观察者。这将在DOM更新&lt;em&gt;后&lt;/em&gt;产生效果&lt;em&gt;，&lt;/em&gt;并确保模板ref与DOM保持同步并引用正确的元素。</target>
        </trans-unit>
        <trans-unit id="49f5f05336b856e05032658da8805f15d162f681" translate="yes" xml:space="preserve">
          <source>These FLIP animations are also not limited to a single axis. Items in a multidimensional grid can be &lt;a href=&quot;https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions&quot;&gt;transitioned too (opens new window)&lt;/a&gt;:</source>
          <target state="translated">这些FLIP动画也不限于单轴。多维网格中的项目也可以&lt;a href=&quot;https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions&quot;&gt;转换（打开新窗口）&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="e6396f41a177bd681652c0e5df217826f32aabe7" translate="yes" xml:space="preserve">
          <source>These FLIP animations are also not limited to a single axis. Items in a multidimensional grid can be &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/sLrhk1bc/&quot;&gt;transitioned too&lt;/a&gt;:</source>
          <target state="translated">这些FLIP动画也不限于单轴。多维网格中的项目也可以&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/sLrhk1bc/&quot;&gt;转换&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="101fa3129d0c59027806566e19bcb27a91fd6013" translate="yes" xml:space="preserve">
          <source>These applications always include many in-DOM templates, where &lt;a href=&quot;#Component-name-casing-in-templates-strongly-recommended&quot;&gt;kebab-case &lt;strong&gt;must&lt;/strong&gt; be used&lt;/a&gt;.</source>
          <target state="translated">这些应用程序总是包含许多in-DOM模板，其中&lt;a href=&quot;#Component-name-casing-in-templates-strongly-recommended&quot;&gt;&lt;strong&gt;必须&lt;/strong&gt;&lt;/a&gt;使用kebab-case&lt;strong&gt;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b14a434a616541b430915a0d7db4bb6111861e1b" translate="yes" xml:space="preserve">
          <source>These applications always include many in-DOM templates, where &lt;a href=&quot;#component-name-casing-in-templates-strongly-recommended&quot;&gt;kebab-case &lt;strong&gt;must&lt;/strong&gt; be used&lt;/a&gt;.</source>
          <target state="translated">这些应用程序总是包含许多in-DOM模板，其中&lt;a href=&quot;#component-name-casing-in-templates-strongly-recommended&quot;&gt;&lt;strong&gt;必须&lt;/strong&gt;&lt;/a&gt;使用kebab-case&lt;strong&gt;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d8ad97f9c711d5ae8d024466fe1928f5f113e88a" translate="yes" xml:space="preserve">
          <source>These are the minimal amount of rollup plugins that we need to use to compile the code in an &lt;code&gt;esm&lt;/code&gt; module. We may want to also add &lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/babel&quot;&gt;rollup-plugin-babel (opens new window)&lt;/a&gt; to transpile their code and &lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/node-resolve&quot;&gt;node-resolve (opens new window)&lt;/a&gt; if we use dependencies that we want to bundle with our library.</source>
          <target state="translated">这些是我们用来在 &lt;code&gt;esm&lt;/code&gt; 模块中编译代码所需的最少汇总插件。如果我们使用要与库捆绑在一起的依赖项，我们可能还需要添加&lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/babel&quot;&gt;rollup-plugin-babel（打开新窗口）&lt;/a&gt;以转换其代码，并执行&lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/node-resolve&quot;&gt;node-resolve（打开新窗口）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="79c4f8a294a999f0a432548c8b4a47252ba3a153" translate="yes" xml:space="preserve">
          <source>These can be useful for demos with large templates or in extremely small applications, but should otherwise be avoided, because they separate templates from the rest of the component definition.</source>
          <target state="translated">这些对于使用大型模板的演示或在极小的应用程序中是很有用的,但在其他方面应该避免,因为它们将模板与组件定义的其他部分分开。</target>
        </trans-unit>
        <trans-unit id="21e7d481abd4d9f9e4579d54e3c726471440c50e" translate="yes" xml:space="preserve">
          <source>These components are &lt;strong&gt;globally registered&lt;/strong&gt; for the application. That means they can be used in the template of any component instance within this application:</source>
          <target state="translated">这些组件已&lt;strong&gt;在&lt;/strong&gt;该应用程序中&lt;strong&gt;全局注册&lt;/strong&gt;。这意味着它们可以在此应用程序内的任何组件实例的模板中使用：</target>
        </trans-unit>
        <trans-unit id="4eda46855e3962039e549f3d03f1e9beb23fa48b" translate="yes" xml:space="preserve">
          <source>These components are &lt;strong&gt;globally registered&lt;/strong&gt;. That means they can be used in the template of any root Vue instance (&lt;code&gt;new Vue&lt;/code&gt;) created after registration. For example:</source>
          <target state="translated">这些组件已&lt;strong&gt;在全球注册&lt;/strong&gt;。这意味着它们可以在注册后创建的任何根Vue实例（ &lt;code&gt;new Vue&lt;/code&gt; ）的模板中使用。例如：</target>
        </trans-unit>
        <trans-unit id="c11fba5bbbf86f45897e779c4584d6721b0b2522" translate="yes" xml:space="preserve">
          <source>These components lay the foundation for consistent styling and behavior in your application. They may &lt;strong&gt;only&lt;/strong&gt; contain:</source>
          <target state="translated">这些组件为您的应用程序中一致的样式和行为奠定了基础。它们可能&lt;strong&gt;仅&lt;/strong&gt;包含：</target>
        </trans-unit>
        <trans-unit id="bda8424d75fa59c6af3e0cab0e9c50fd71c0b1db" translate="yes" xml:space="preserve">
          <source>These expressions will be evaluated as JavaScript in the data scope of the current active instance. One restriction is that each binding can only contain &lt;strong&gt;one single expression&lt;/strong&gt;, so the following will &lt;strong&gt;NOT&lt;/strong&gt; work:</source>
          <target state="translated">这些表达式将在当前活动实例的数据范围内被评估为JavaScript。一个限制是每个绑定只能包含&lt;strong&gt;一个单一的表达&lt;/strong&gt;，所以下面将&lt;strong&gt;不&lt;/strong&gt;工作：</target>
        </trans-unit>
        <trans-unit id="c208483eb8caab5ce32ce55aa9ca8d4751b6d7ab" translate="yes" xml:space="preserve">
          <source>These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain &lt;strong&gt;one single expression&lt;/strong&gt;, so the following will &lt;strong&gt;NOT&lt;/strong&gt; work:</source>
          <target state="translated">这些表达式将在所有者Vue实例的数据范围内被评估为JavaScript。一个限制是每个绑定只能包含&lt;strong&gt;一个单一的表达&lt;/strong&gt;，所以下面将&lt;strong&gt;不&lt;/strong&gt;工作：</target>
        </trans-unit>
        <trans-unit id="80b817b97cd01c5d4dff8f7d4784ab918c1bcadf" translate="yes" xml:space="preserve">
          <source>These functions accept a callback that will be executed when the hook is called by the component.</source>
          <target state="translated">这些函数接受一个回调,当钩子被组件调用时,该回调将被执行。</target>
        </trans-unit>
        <trans-unit id="1f5e0b8172eba0a64b60b21bf3416955cad7a254" translate="yes" xml:space="preserve">
          <source>These functions accept a callback that will be executed when the hook is called by the component:</source>
          <target state="translated">这些函数接受一个回调,当钩子被组件调用时,该回调将被执行。</target>
        </trans-unit>
        <trans-unit id="2f84f68662fd1421835a7e799cd84c8a791f699d" translate="yes" xml:space="preserve">
          <source>These global APIs in Vue 2.x are affected by this change:</source>
          <target state="translated">Vue 2.x 中的这些全局 API 受此变化影响。</target>
        </trans-unit>
        <trans-unit id="894c317239a0c7a65a9e88455fd9ec3ef7ebc237" translate="yes" xml:space="preserve">
          <source>These hooks can be used in combination with CSS transitions/animations or on their own.</source>
          <target state="translated">这些钩子可以与CSS过渡/动画结合使用,也可以单独使用。</target>
        </trans-unit>
        <trans-unit id="0eae938a54ab8538f13def15003e468ed14f51af" translate="yes" xml:space="preserve">
          <source>These images will act as a submit type button on forms</source>
          <target state="translated">这些图片将作为表单上的提交类型按钮。</target>
        </trans-unit>
        <trans-unit id="d1f27cab3e6badeb36908a8616873204e7c70a66" translate="yes" xml:space="preserve">
          <source>These instance properties are only added when the instance is first created, so you need to ensure they are all present in the object returned by the &lt;code&gt;data&lt;/code&gt; function. Where necessary, use &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or some other placeholder value for properties where the desired value isn't yet available.</source>
          <target state="translated">这些实例属性仅在首次创建实例时添加，因此您需要确保它们全部存在于 &lt;code&gt;data&lt;/code&gt; 函数返回的对象中。必要时，对尚未提供所需值的属性使用 &lt;code&gt;null&lt;/code&gt; ， &lt;code&gt;undefined&lt;/code&gt; 或其他占位符值。</target>
        </trans-unit>
        <trans-unit id="1b1b4bc59922cec9c3af1f6e29088ab2ed2b3185" translate="yes" xml:space="preserve">
          <source>These lifecycle hook registration functions can only be used synchronously during &lt;a href=&quot;#setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;, since they rely on internal global state to locate the current active instance (the component instance whose &lt;code&gt;setup()&lt;/code&gt; is being called right now). Calling them without a current active instance will result in an error.</source>
          <target state="translated">这些生命周期挂钩注册函数只能在&lt;a href=&quot;#setup&quot;&gt; &lt;code&gt;setup()&lt;/code&gt; &lt;/a&gt;期间同步使用，因为它们依赖于内部全局状态来定位当前的活动实例（当前正在调用 &lt;code&gt;setup()&lt;/code&gt; 的组件实例）。在没有当前活动实例的情况下调用它们将导致错误。</target>
        </trans-unit>
        <trans-unit id="18eb93efc44d56c2080356f2acd2adc1588f6912" translate="yes" xml:space="preserve">
          <source>These limitations become apparent when designing a search indicator, like this one for example:</source>
          <target state="translated">在设计搜索指标时,这些局限性就显现出来了,比如说这个指标。</target>
        </trans-unit>
        <trans-unit id="2672ba8246e63f719c7d2d1d3c131a8d8ffe1408" translate="yes" xml:space="preserve">
          <source>These methods can also be supported in compatibility builds.</source>
          <target state="translated">这些方法也可以在兼容性构建中得到支持。</target>
        </trans-unit>
        <trans-unit id="44f058292bf91d7fdc0c19b30d4f231d10c8ffce" translate="yes" xml:space="preserve">
          <source>These modifiers restrict the handler to events triggered by a specific mouse button.</source>
          <target state="translated">这些修饰符将处理程序限制为由特定的鼠标按钮触发的事件。</target>
        </trans-unit>
        <trans-unit id="d2b0e629392045530844771affeff7b43f8ec099" translate="yes" xml:space="preserve">
          <source>These rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified.</source>
          <target state="translated">在大多数项目中,这些规则已经被发现可以提高可读性和/或开发人员的经验。如果你违反了这些规则,你的代码仍然会运行,但违反的情况应该是极少的,而且是有充分理由的。</target>
        </trans-unit>
        <trans-unit id="91af92ef53fdf34200de7e0b28db35745ed2a1ae" translate="yes" xml:space="preserve">
          <source>These rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue.</source>
          <target state="translated">这些规则有助于防止错误的发生,所以要不惜一切代价学习和遵守它们。例外情况可能存在,但应该是非常罕见的,而且只能由那些对JavaScript和Vue都有专业知识的人做出。</target>
        </trans-unit>
        <trans-unit id="e30564da6ab88875780c5728faa3632ae18dc83a" translate="yes" xml:space="preserve">
          <source>These specific languages are only examples. You could as easily use Bubl&amp;eacute;, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive. If using Webpack with &lt;code&gt;vue-loader&lt;/code&gt;, it also has first-class support for CSS Modules.</source>
          <target state="translated">这些特定的语言仅是示例。您可以轻松地使用Bubl&amp;eacute;，TypeScript，SCSS，PostCSS-或任何其他有助于提高工作效率的预处理器。如果将Webpack与 &lt;code&gt;vue-loader&lt;/code&gt; 一起使用，它还具有对CSS模块的一流支持。</target>
        </trans-unit>
        <trans-unit id="6f7e3a3689db0252bb84c19cba8c531d2629463a" translate="yes" xml:space="preserve">
          <source>These specific languages are only examples. You could as easily use TypeScript, SCSS, PostCSS, or whatever other preprocessors that help you be productive. If using Webpack with &lt;code&gt;vue-loader&lt;/code&gt;, it also has first-class support for CSS Modules.</source>
          <target state="translated">这些特定的语言仅是示例。您可以轻松地使用TypeScript，SCSS，PostCSS或任何其他有助于提高工作效率的预处理器。如果将Webpack与 &lt;code&gt;vue-loader&lt;/code&gt; 一起使用，它还具有对CSS模块的一流支持。</target>
        </trans-unit>
        <trans-unit id="fdd9827028ef750f7255fe5fc506af18a8fb1368" translate="yes" xml:space="preserve">
          <source>These will override the conventional class names. This is especially useful when you want to combine Vue&amp;rsquo;s transition system with an existing CSS animation library, such as &lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css&lt;/a&gt;.</source>
          <target state="translated">这些将覆盖常规的类名。当您要将Vue的过渡系统与现有CSS动画库（例如&lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css）&lt;/a&gt;结合使用时，这特别有用。</target>
        </trans-unit>
        <trans-unit id="e33ec9ba4c8a26fd6b28ce4fd52b224db3c80e35" translate="yes" xml:space="preserve">
          <source>These will override the conventional class names. This is especially useful when you want to combine Vue's transition system with an existing CSS animation library, such as &lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css (opens new window)&lt;/a&gt;.</source>
          <target state="translated">这些将覆盖常规的类名。当您想将Vue的过渡系统与现有的CSS动画库（例如&lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css）&lt;/a&gt;结合使用时，这特别有用（打开新窗口）。</target>
        </trans-unit>
        <trans-unit id="92cd96ee6ad9b9e610a589e4749092778d3625dd" translate="yes" xml:space="preserve">
          <source>They are considered advanced because the raw opt-out is only at the root level, so if you set a nested, non-marked raw object into a reactive object and then access it again, you get the proxied version back. This can lead to &lt;strong&gt;identity hazards&lt;/strong&gt; - i.e. performing an operation that relies on object identity but using both the raw and the proxied version of the same object:</source>
          <target state="translated">它们被认为是高级的，因为原始选择退出仅在根级别，因此，如果将嵌套的，未标记的原始对象设置为反应对象，然后再次访问它，则可以得到代理版本。这可能导致&lt;strong&gt;身份危害&lt;/strong&gt;-即执行依赖于对象身份但同时使用同一对象的原始版本和代理版本的操作：</target>
        </trans-unit>
        <trans-unit id="71a51bba5139b36f3f5fa86eb58e22582ee00315" translate="yes" xml:space="preserve">
          <source>They can also be passed individually or wrapped as appropriate:</source>
          <target state="translated">也可以根据情况单独传递或包裹。</target>
        </trans-unit>
        <trans-unit id="a8d1026e768f545462812038bf11ac5597aa461a" translate="yes" xml:space="preserve">
          <source>They document the API of the component, so that it&amp;rsquo;s easy to see how the component is meant to be used.</source>
          <target state="translated">他们记录了组件的API，因此很容易看到组件的使用方式。</target>
        </trans-unit>
        <trans-unit id="b6cf20af74870ca902c785f1b709b46f1fb4bbe6" translate="yes" xml:space="preserve">
          <source>They document the API of the component, so that it's easy to see how the component is meant to be used.</source>
          <target state="translated">它们记录了组件的API,所以很容易看到组件的使用方法。</target>
        </trans-unit>
        <trans-unit id="ee9fb3a66c9bf09491269055d05e63e8daff7baf" translate="yes" xml:space="preserve">
          <source>They have slightly different target users however.</source>
          <target state="translated">不过,它们的目标用户略有不同。</target>
        </trans-unit>
        <trans-unit id="dddb496772a8230c124e4f06a214f032833805d2" translate="yes" xml:space="preserve">
          <source>They may look a bit different from normal HTML, but &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; are valid characters for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.</source>
          <target state="translated">它们的外观可能与普通HTML略有不同，但是 &lt;code&gt;:&lt;/code&gt; 和 &lt;code&gt;@&lt;/code&gt; 是属性名称的有效字符，所有Vue支持的浏览器都可以正确解析它。此外，它们不会出现在最终的渲染标记中。速记语法完全是可选的，但是稍后您将进一步了解其用法时，可能会喜欢它。</target>
        </trans-unit>
        <trans-unit id="281fe192d49481d23a37a591764ebdfbfa624db4" translate="yes" xml:space="preserve">
          <source>They will receive two arguments: &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;. The &lt;code&gt;context&lt;/code&gt; argument is an object that contains a component's &lt;code&gt;attrs&lt;/code&gt;, &lt;code&gt;slots&lt;/code&gt;, and &lt;code&gt;emit&lt;/code&gt; properties.</source>
          <target state="translated">他们将收到两个论点： &lt;code&gt;props&lt;/code&gt; 和 &lt;code&gt;context&lt;/code&gt; 。的 &lt;code&gt;context&lt;/code&gt; 参数是包含一个组件的一个目的 &lt;code&gt;attrs&lt;/code&gt; ， &lt;code&gt;slots&lt;/code&gt; ，和 &lt;code&gt;emit&lt;/code&gt; 性质。</target>
        </trans-unit>
        <trans-unit id="6a9f42e561d875ba212a21ce976d18f88707fb7e" translate="yes" xml:space="preserve">
          <source>They&amp;rsquo;re also very useful as wrapper components. For example, when you need to:</source>
          <target state="translated">它们作为包装器组件也非常有用。例如，当您需要：</target>
        </trans-unit>
        <trans-unit id="58f728f5f509eee0bedefd10f55cb2582da092af" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;prevents conflicts (opens new window)&lt;/a&gt; with existing and future HTML elements, since all HTML elements are a single word.</source>
          <target state="translated">由于所有HTML元素都是一个单词，因此&lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;可以避免&lt;/a&gt;与现有和将来的HTML元素发生冲突（打开新窗口）。</target>
        </trans-unit>
        <trans-unit id="36292b3c039d104e965d98c8c9a093ed70eee710" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;prevents conflicts&lt;/a&gt; with existing and future HTML elements, since all HTML elements are a single word.</source>
          <target state="translated">由于所有HTML元素都是一个单词，因此&lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;可以防止&lt;/a&gt;与现有和将来的HTML元素发生冲突。</target>
        </trans-unit>
        <trans-unit id="fcaedbe185b6a6b99f44948ed9a8eec6e5b5ea80" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;prevents conflicts (opens new window)&lt;/a&gt; with existing and future HTML elements, since all HTML elements are a single word.</source>
          <target state="translated">由于所有HTML元素都是一个单词，因此&lt;a href=&quot;https://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;可以避免&lt;/a&gt;与现有和将来的HTML元素发生冲突（打开新窗口）。</target>
        </trans-unit>
        <trans-unit id="1ece11c20b0e27793001fdeec7df491259c0b914" translate="yes" xml:space="preserve">
          <source>This allows us add behavior that a filter alone couldn&amp;rsquo;t encapsulate, such as selecting the content of an input on focus. Now the next step will be to extract the business logic from the filter. Below, we pull everything out into an external &lt;a href=&quot;https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e&quot;&gt;&lt;code&gt;currencyValidator&lt;/code&gt; object&lt;/a&gt;:</source>
          <target state="translated">这使我们可以添加仅过滤器无法封装的行为，例如选择焦点输入的内容。现在，下一步将是从过滤器中提取业务逻辑。下面，我们将所有内容提取到一个外部&lt;a href=&quot;https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e&quot;&gt; &lt;code&gt;currencyValidator&lt;/code&gt; 对象中&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="90803ce7ef09d688b5c581945fa8c418cf8b3ba3" translate="yes" xml:space="preserve">
          <source>This allows us to more safely keep developing that component, without fear that we might change/remove something that a child component is relying on. The interface between these components remains clearly defined, just as with props.</source>
          <target state="translated">这使我们能够更安全地继续开发该组件,而不用担心我们会改变/删除子组件所依赖的东西。这些组件之间的接口仍然是明确定义的,就像道具一样。</target>
        </trans-unit>
        <trans-unit id="74e149b933b7f933e9d6e2560dceac8830da4733" translate="yes" xml:space="preserve">
          <source>This allows you to compose components like this:</source>
          <target state="translated">这让你可以像这样组成组件。</target>
        </trans-unit>
        <trans-unit id="6c6fdcbf1874b359140e4f3504f0ef8feaedac9f" translate="yes" xml:space="preserve">
          <source>This also allows &lt;code&gt;itemRefs&lt;/code&gt; to be made reactive and watched, if needed.</source>
          <target state="translated">如果需要的话，这还使 &lt;code&gt;itemRefs&lt;/code&gt; 成为反应性的并被监视。</target>
        </trans-unit>
        <trans-unit id="07ab67c65f204cb035ac63172b27bd9763045849" translate="yes" xml:space="preserve">
          <source>This also means that injections from a parent component work as expected, and that the child component will be nested below the parent component in the Vue Devtools, instead of being placed where the actual content moved to.</source>
          <target state="translated">这也就意味着,从父组件的注入可以按照预期的方式工作,子组件将被嵌套在Vue Devtools中父组件的下方,而不是放在实际内容移动到的地方。</target>
        </trans-unit>
        <trans-unit id="2b017e21cf180432f227f352528adf7beedafa7a" translate="yes" xml:space="preserve">
          <source>This also means the following computed property will never update, because &lt;code&gt;Date.now()&lt;/code&gt; is not a reactive dependency:</source>
          <target state="translated">这也意味着以下计算的属性将永远不会更新，因为 &lt;code&gt;Date.now()&lt;/code&gt; 不是反应性依赖项：</target>
        </trans-unit>
        <trans-unit id="a4a6283a307a4532f0a11fbeb7e2bc85aba3cc5e" translate="yes" xml:space="preserve">
          <source>This also serves as a replacement to &lt;code&gt;.sync&lt;/code&gt; modifier and allows us to have multiple &lt;code&gt;v-model&lt;/code&gt;s on the custom component.</source>
          <target state="translated">这也可以替代 &lt;code&gt;.sync&lt;/code&gt; 修饰符，并允许我们在自定义组件上具有多个 &lt;code&gt;v-model&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d966b066638dcbfbeb5f7c1fa054b2b9f4ac88e1" translate="yes" xml:space="preserve">
          <source>This attribute does not support dynamic binding.</source>
          <target state="translated">该属性不支持动态绑定。</target>
        </trans-unit>
        <trans-unit id="164bc1e51c6702dce494f030a1bafd94645ed70c" translate="yes" xml:space="preserve">
          <source>This became confusing, as &lt;em&gt;enter&lt;/em&gt; and &lt;em&gt;leave&lt;/em&gt; were broad and not using the same naming convention as their class hook counterparts.</source>
          <target state="translated">由于&lt;em&gt;进入&lt;/em&gt;和&lt;em&gt;离开&lt;/em&gt;很广泛，并且没有使用与类钩子对应的相同命名约定，因此这变得令人困惑。</target>
        </trans-unit>
        <trans-unit id="85db9f37abb47bdae5f9736eb1fa18d771e503d8" translate="yes" xml:space="preserve">
          <source>This brings us full circle back to &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;vuex&lt;/a&gt;, so if you&amp;rsquo;ve read this far it&amp;rsquo;s probably time to try it out!</source>
          <target state="translated">这使我们回到了&lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;vuex的&lt;/a&gt;整个圈子，因此，如果您已经阅读了本文，那么可能是时候尝试一下了！</target>
        </trans-unit>
        <trans-unit id="179dbb08dcd1151aabd85db6b52d3899eda0943a" translate="yes" xml:space="preserve">
          <source>This brings us full circle back to &lt;a href=&quot;https://next.vuex.vuejs.org/&quot;&gt;Vuex (opens new window)&lt;/a&gt;, so if you've read this far it's probably time to try it out!</source>
          <target state="translated">这将我们带回到了&lt;a href=&quot;https://next.vuex.vuejs.org/&quot;&gt;Vuex的新&lt;/a&gt;圈子（打开新窗口），因此，如果您已阅读本文，则可能是尝试一下的时候了！</target>
        </trans-unit>
        <trans-unit id="56dd0e485cf645c0e638522c49dece838e9d034a" translate="yes" xml:space="preserve">
          <source>This can be achieved using Vue's custom &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">这可以使用Vue的自定义 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素来实现：</target>
        </trans-unit>
        <trans-unit id="e208871e834d455a504dbc7b4789f62b8d51dbdf" translate="yes" xml:space="preserve">
          <source>This can be convenient for demos or very small apps with a handful of components. However, the pattern does not scale well to medium or large-scale applications, so we strongly recommend using &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt; to manage state in most cases.</source>
          <target state="translated">这对于演示或带有少量组件的超小型应用程序可能很方便。但是，该模式不能很好地适应中型或大型应用程序，因此我们强烈建议在大多数情况下使用&lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt;来管理状态。</target>
        </trans-unit>
        <trans-unit id="f3ae7f80927899cd62140ba3ac91c1a272907e8a" translate="yes" xml:space="preserve">
          <source>This can be especially useful in combination with the &lt;code&gt;$attrs&lt;/code&gt; instance property, which contains the attribute names and values passed to a component, such as:</source>
          <target state="translated">与 &lt;code&gt;$attrs&lt;/code&gt; 实例属性结合使用时，该属性特别有用，该属性包含传递给组件的属性名称和值，例如：</target>
        </trans-unit>
        <trans-unit id="b07d706ca1c93b0222f37979c7558e8ac0bf7393" translate="yes" xml:space="preserve">
          <source>This can be fixed by moving &lt;code&gt;v-for&lt;/code&gt; to a wrapping &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag:</source>
          <target state="translated">可以通过将 &lt;code&gt;v-for&lt;/code&gt; 移到包装的 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 标签来解决此问题：</target>
        </trans-unit>
        <trans-unit id="dc35e91b7f0ddcd858a9ed54df8c331d12068bc2" translate="yes" xml:space="preserve">
          <source>This can be shortened even further. Just as non-specified content is assumed to be for the default slot, &lt;code&gt;v-slot&lt;/code&gt; without an argument is assumed to refer to the default slot:</source>
          <target state="translated">这可以进一步缩短。就像未指定的内容被假定为默认槽一样，不带参数的 &lt;code&gt;v-slot&lt;/code&gt; 被假定为指向默认槽：</target>
        </trans-unit>
        <trans-unit id="e890dd0b9a03e7b18eb3ea7a9ab2b112967c585d" translate="yes" xml:space="preserve">
          <source>This can be useful sometimes, but it&amp;rsquo;s not a good idea when you&amp;rsquo;re trying to listen on a very specific element, like an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. For example, the &lt;code&gt;&amp;lt;base-input&amp;gt;&lt;/code&gt; component above might refactor so that the root element is actually a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">有时这可能很有用，但是当您尝试监听非常具体的元素（例如 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; )时，这不是一个好主意。例如，上面的 &lt;code&gt;&amp;lt;base-input&amp;gt;&lt;/code&gt; 组件可能会重构，因此根元素实际上是一个 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 元素：</target>
        </trans-unit>
        <trans-unit id="ef2288cfa9c5bb1049786a028d410bf6a81d1c49" translate="yes" xml:space="preserve">
          <source>This can be useful when you&amp;rsquo;ve defined CSS transitions/animations using Vue&amp;rsquo;s transition class conventions and want to switch between them.</source>
          <target state="translated">当您使用Vue的过渡类约定定义CSS过渡/动画并希望在它们之间进行切换时，此功能很有用。</target>
        </trans-unit>
        <trans-unit id="70c019ddc029d5a8d4f133c3f5144d392c3ee9d2" translate="yes" xml:space="preserve">
          <source>This can be useful when you've defined CSS transitions/animations using Vue's transition class conventions and want to switch between them.</source>
          <target state="translated">当你使用Vue的过渡类约定定义了CSS过渡/动画,并想在它们之间进行切换时,这一点很有用。</target>
        </trans-unit>
        <trans-unit id="fc031caf419daa5de2c3ce28e6fb5557646cf13b" translate="yes" xml:space="preserve">
          <source>This can make the template much cleaner, especially when the slot provides many props. It also opens other possibilities, such as renaming props, e.g. &lt;code&gt;item&lt;/code&gt; to &lt;code&gt;todo&lt;/code&gt;:</source>
          <target state="translated">这可以使模板更加整洁，尤其是在插槽提供许多道具的情况下。它也打开其他的可能性，如重命名的道具，如 &lt;code&gt;item&lt;/code&gt; 到 &lt;code&gt;todo&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="22ed18f22c3147e4d4b605b99a8c886bf36867ed" translate="yes" xml:space="preserve">
          <source>This can make the template much cleaner, especially when the slot provides many props. It also opens other possibilities, such as renaming props, e.g. &lt;code&gt;user&lt;/code&gt; to &lt;code&gt;person&lt;/code&gt;:</source>
          <target state="translated">这可以使模板更加整洁，尤其是在插槽提供许多道具时。它还打开了其他可能性，例如重命名道具，例如 &lt;code&gt;user&lt;/code&gt; 到 &lt;code&gt;person&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6e3bbca32d3b2efbcc3d42d5169b319a15930cbb" translate="yes" xml:space="preserve">
          <source>This can replace Vue 2.x &lt;code&gt;Vue.prototype&lt;/code&gt; extending:</source>
          <target state="translated">这可以代替Vue 2.x &lt;code&gt;Vue.prototype&lt;/code&gt; 扩展：</target>
        </trans-unit>
        <trans-unit id="91d37bc2f925538550750ba2e9fce0b6e7858848" translate="yes" xml:space="preserve">
          <source>This can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:</source>
          <target state="translated">这对于中小型项目来说,可以很好地发挥作用,因为在这些项目中,JavaScript只用于增强某些视图。然而在更复杂的项目中,或者当你的前端完全由JavaScript驱动时,这些缺点就会变得很明显。</target>
        </trans-unit>
        <trans-unit id="64ce0755339c54b2f7c3cf1e473ecb364b9471ff" translate="yes" xml:space="preserve">
          <source>This change unifies normal and scoped slots in 3.x.</source>
          <target state="translated">这一变化统一了3.x中的普通槽和范围槽。</target>
        </trans-unit>
        <trans-unit id="649bd7763f809cf2a22e97c4ffc5bb92d06dc2c8" translate="yes" xml:space="preserve">
          <source>This change will not affect &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; users.</source>
          <target state="translated">此更改不会影响 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 用户。</target>
        </trans-unit>
        <trans-unit id="552c6085e6177cea581b90083d77773efb3e8be2" translate="yes" xml:space="preserve">
          <source>This class is mostly useful for specifying the transition timing and easing curve, as you&amp;rsquo;ll see below:</source>
          <target state="translated">此类对于指定过渡时间和缓动曲线最为有用，如下所示：</target>
        </trans-unit>
        <trans-unit id="4dca719226599c28b606b8514447a1add2ee8926" translate="yes" xml:space="preserve">
          <source>This class is mostly useful for specifying the transition timing and easing curve, as you'll see below:</source>
          <target state="translated">这个类主要用于指定过渡时间和缓和曲线,你将在下面看到。</target>
        </trans-unit>
        <trans-unit id="2d0393bc65d6af864ec2bb745213f48992c8218a" translate="yes" xml:space="preserve">
          <source>This component has several responsibilities:</source>
          <target state="translated">这个部分有几个责任。</target>
        </trans-unit>
        <trans-unit id="aece2a4bb40123dcf8dc29a3f56c00b36cd67448" translate="yes" xml:space="preserve">
          <source>This config option is only respected when using the runtime compiler. If you are using the runtime-only build, &lt;code&gt;isCustomElement&lt;/code&gt; must be passed to &lt;code&gt;@vue/compiler-dom&lt;/code&gt; in the build setup instead - for example, via the &lt;a href=&quot;https://vue-loader.vuejs.org/options.html#compileroptions&quot;&gt;&lt;code&gt;compilerOptions&lt;/code&gt; option in vue-loader (opens new window)&lt;/a&gt;.</source>
          <target state="translated">仅当使用运行时编译器时，才使用此配置选项。如果您使用的是仅运行时生成， &lt;code&gt;isCustomElement&lt;/code&gt; 必须传递给 &lt;code&gt;@vue/compiler-dom&lt;/code&gt; 的构建设置代替-例如，通过&lt;a href=&quot;https://vue-loader.vuejs.org/options.html#compileroptions&quot;&gt; &lt;code&gt;compilerOptions&lt;/code&gt; 在VUE装载机选项（打开新窗口）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="73218ffb3cfb7afab06eea57271f24ec7aa48d7a" translate="yes" xml:space="preserve">
          <source>This config option was introduced with the intention to support native custom elements, so the renaming better conveys what it does. The new option also expects a function which provides more flexibility than the old string / RegExp approach:</source>
          <target state="translated">引入这个配置选项的目的是为了支持本地的自定义元素,所以重命名能更好地表达它的作用。新的选项还期待一个函数,这比旧的字符串/正则表达式方法提供了更多的灵活性。</target>
        </trans-unit>
        <trans-unit id="9178232fdf5ceab5e71cd384ec980a517e8bd826" translate="yes" xml:space="preserve">
          <source>This could be fixed by iterating over a computed property instead, like this:</source>
          <target state="translated">这可以通过迭代一个计算过的属性来解决,就像这样。</target>
        </trans-unit>
        <trans-unit id="a64fb541d6cf03a309471b66f62b3cc4e9df105f" translate="yes" xml:space="preserve">
          <source>This could be rewritten with JavaScript&amp;rsquo;s &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; in a render function:</source>
          <target state="translated">可以使用JavaScript的 &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; 进行重写，并在render函数中进行 &lt;code&gt;map&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8724d06123a948287362546d838692c2aa5506c2" translate="yes" xml:space="preserve">
          <source>This could be rewritten with JavaScript's &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; in a render function:</source>
          <target state="translated">这可以用JavaScript的 &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; 和 &lt;code&gt;map()&lt;/code&gt; 在render函数中重写：</target>
        </trans-unit>
        <trans-unit id="dc281e6afa265cb93fadcfb1141b35d1dc6b8178" translate="yes" xml:space="preserve">
          <source>This default mode is efficient, but &lt;strong&gt;only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)&lt;/strong&gt;.</source>
          <target state="translated">此默认模式是有效的，但是&lt;strong&gt;仅当列表呈现输出不依赖于子组件状态或临时DOM状态（例如，表单输入值）时才适用&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="83c6bcc5ab3c17077a142a2b9547158e591eb788" translate="yes" xml:space="preserve">
          <source>This directive triggers transitions when its condition changes.</source>
          <target state="translated">当其条件发生变化时,该指令会触发转场。</target>
        </trans-unit>
        <trans-unit id="bcf9f3835622e83dc060967041ab679cca48d307" translate="yes" xml:space="preserve">
          <source>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt;, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</source>
          <target state="translated">该指令将保留在元素上，直到关联的Vue实例完成编译为止。结合 &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt; 类的CSS规则，此指令可用于隐藏未编译的胡子绑定，直到Vue实例准备就绪为止。</target>
        </trans-unit>
        <trans-unit id="b59796a2504047463e100abad78dff5eab523d76" translate="yes" xml:space="preserve">
          <source>This directive will remain on the element until the associated component instance finishes compilation. Combined with CSS rules such as &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt;, this directive can be used to hide un-compiled mustache bindings until the component instance is ready.</source>
          <target state="translated">该指令将保留在元素上，直到关联的组件实例完成编译为止。结合 &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt; 类的CSS规则，此伪指令可用于隐藏未编译的胡子绑定，直到组件实例就绪为止。</target>
        </trans-unit>
        <trans-unit id="3e343af564058d721599d1f9e8b019d300435ac7" translate="yes" xml:space="preserve">
          <source>This does not mean the component is only used in a single page, but it will only be used once &lt;em&gt;per page&lt;/em&gt;. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it&amp;rsquo;s a good indication that this is actually a reusable component that is only used once per page &lt;em&gt;for now&lt;/em&gt;.</source>
          <target state="translated">这并不意味着该组件仅在单个页面中使用，而是&lt;em&gt;每个页面&lt;/em&gt;仅使用一次。这些组件永远不会接受任何道具，因为它们是特定于您的应用程序的，而不是它们在应用程序中的上下文。如果您发现需要添加的道具，这是一个很好的迹象，这实际上是只用每页一次可重用的组件&lt;em&gt;现在&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="afef3dbc4c5bebfc4611fe4a8f42fd4e1a888122" translate="yes" xml:space="preserve">
          <source>This does not mean the component is only used in a single page, but it will only be used once &lt;em&gt;per page&lt;/em&gt;. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it's a good indication that this is actually a reusable component that is only used once per page &lt;em&gt;for now&lt;/em&gt;.</source>
          <target state="translated">这并不意味着该组件仅在单个页面中使用，而是&lt;em&gt;每个页面&lt;/em&gt;仅使用一次。这些组件从不接受任何道具，因为它们是特定于您的应用程序的，而不是它们在应用程序中的上下文。如果您发现需要添加的道具，这是一个很好的迹象，这实际上是只用每页一次可重用的组件&lt;em&gt;现在&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="59e804cfdea5616facc606f041bd1ea03ee103fc" translate="yes" xml:space="preserve">
          <source>This doesn't require any build setup, works in all browsers, is not subject to any in-DOM HTML parsing caveats (e.g. you can use camelCase prop names), and provides proper syntax highlighting in most IDEs. In traditional server-side frameworks, these templates can be split out into server template partials (included into the main HTML template) for better maintainability.</source>
          <target state="translated">这不需要任何构建设置,在所有的浏览器中都能使用,不受任何DOM内HTML解析注意事项的限制(例如,你可以使用camelCase道具名称),并在大多数IDE中提供适当的语法高亮。在传统的服务器端框架中,这些模板可以拆分出服务器模板partials(包含在主HTML模板中),以获得更好的可维护性。</target>
        </trans-unit>
        <trans-unit id="3fce486eed9d8f23629bf0a56e96e4d92ed9c422" translate="yes" xml:space="preserve">
          <source>This essentially means the &lt;code&gt;Transition&lt;/code&gt; component only gets imported when the application actually makes use of it. In other words, if the application doesn&amp;rsquo;t have any &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component, the code supporting this feature will not be present in the final bundle.</source>
          <target state="translated">从本质上讲，这意味着仅当应用程序实际使用 &lt;code&gt;Transition&lt;/code&gt; 组件时，才会导入该组件。换句话说，如果应用程序没有任何 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 组件，则支持该功能的代码将不会出现在最终的捆绑包中。</target>
        </trans-unit>
        <trans-unit id="045411f2b2e7825926721bc11467177b95eff687" translate="yes" xml:space="preserve">
          <source>This even applies to all subcomponents, meaning all three of these components will also be available &lt;em&gt;inside each other&lt;/em&gt;.</source>
          <target state="translated">这甚至适用于所有子组件，这意味着所有这三个组件也将&lt;em&gt;在彼此内部&lt;/em&gt;可用。</target>
        </trans-unit>
        <trans-unit id="82b2832a220d04d77924bc1b878abfa24eacde86" translate="yes" xml:space="preserve">
          <source>This example demonstrates that we can bind data to not only text and attributes, but also the &lt;strong&gt;structure&lt;/strong&gt; of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply &lt;a href=&quot;guide/transitions&quot;&gt;transition effects&lt;/a&gt; when elements are inserted/updated/removed by Vue.</source>
          <target state="translated">此示例说明了我们不仅可以将数据绑定到文本和属性，还可以将其绑定到DOM 的&lt;strong&gt;结构&lt;/strong&gt;。此外，Vue还提供了功能强大的过渡效果系统，当Vue插入/更新/删除元素时，该系统可以自动应用&lt;a href=&quot;guide/transitions&quot;&gt;过渡效果&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d8a463b1eeae83ef20ecb7a8b09fb17e84fd6a5" translate="yes" xml:space="preserve">
          <source>This example demonstrates that we can bind data to not only text and attributes, but also the &lt;strong&gt;structure&lt;/strong&gt; of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply &lt;a href=&quot;guide/transitions-enterleave&quot;&gt;transition effects&lt;/a&gt; when elements are inserted/updated/removed by Vue.</source>
          <target state="translated">此示例说明了我们不仅可以将数据绑定到文本和属性，还可以绑定到DOM的&lt;strong&gt;结构&lt;/strong&gt;。此外，Vue还提供了功能强大的过渡效果系统，当Vue插入/更新/删除元素时，该系统可以自动应用&lt;a href=&quot;guide/transitions-enterleave&quot;&gt;过渡效果&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6bd36e959ee70eedf0f7070f7e82b61d04b69506" translate="yes" xml:space="preserve">
          <source>This feature will no longer be supported.</source>
          <target state="translated">此功能将不再支持。</target>
        </trans-unit>
        <trans-unit id="8f756a442b07c0ee7ffd2de4e5fb79100b7f5952" translate="yes" xml:space="preserve">
          <source>This function will receive a &lt;code&gt;key&lt;/code&gt; string, which we will use to look up the translated string in the user-provided options.</source>
          <target state="translated">此函数将接收一个 &lt;code&gt;key&lt;/code&gt; 字符串，我们将使用该密钥字符串在用户提供的选项中查找转换后的字符串。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
