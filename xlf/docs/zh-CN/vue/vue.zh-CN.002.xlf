<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="vue">
    <body>
      <group id="vue">
        <trans-unit id="d4d360c1c9029915eaf8eaa012bcc1434524bc17" translate="yes" xml:space="preserve">
          <source>Above, you&amp;rsquo;ll see that we can use &lt;code&gt;v-bind&lt;/code&gt; to dynamically pass props. This is especially useful when you don&amp;rsquo;t know the exact content you&amp;rsquo;re going to render ahead of time, like when &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/sbLgr0ad&quot;&gt;fetching posts from an API&lt;/a&gt;.</source>
          <target state="translated">在上方，您会看到我们可以使用 &lt;code&gt;v-bind&lt;/code&gt; 动态传递道具。当您不知道要提前呈现的确切内容时（例如&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/sbLgr0ad&quot;&gt;从API提取帖子&lt;/a&gt;时），这特别有用。</target>
        </trans-unit>
        <trans-unit id="ca8e6064c2333672a4be1482e62c50361ebd7fc4" translate="yes" xml:space="preserve">
          <source>Above, you'll see that we can use &lt;code&gt;v-bind&lt;/code&gt; to dynamically pass props. This is especially useful when you don't know the exact content you're going to render ahead of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1385b7f0b7cff03dc6fd2497bb9a00e4dff7f57" translate="yes" xml:space="preserve">
          <source>Absent enumerated attr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2fa59b1775dcf414f85f1c2616538302393cce" translate="yes" xml:space="preserve">
          <source>Accepts one argument: &lt;code&gt;component&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c9915ad775905b6d36fd6366e0372c79ac1481" translate="yes" xml:space="preserve">
          <source>Accepts one argument: &lt;code&gt;name&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f017bf3c90bc5a4f6ab1094c57f6d07d5a16ce59" translate="yes" xml:space="preserve">
          <source>Accepts three arguments: &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5776add92d702df2a820a2c1e202248faaa42b" translate="yes" xml:space="preserve">
          <source>Accepts two arguments: &lt;code&gt;HostNode&lt;/code&gt; and &lt;code&gt;HostElement&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2d34d77731fd6ca6f50e7fd4b634c893fd37f9" translate="yes" xml:space="preserve">
          <source>Accepts two arguments: &lt;code&gt;vnode&lt;/code&gt; and &lt;code&gt;directives&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec904b80a69be9b5f71240a9dae398f94fe32c4" translate="yes" xml:space="preserve">
          <source>Access both the previous and current value of the watched state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a52b0d5edaa2ede0d229f615b761ebeb981131b" translate="yes" xml:space="preserve">
          <source>Access in Reactive Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f87f3c77a7867b32ff9b31d0d8486e59753621" translate="yes" xml:space="preserve">
          <source>Accessible Rich Internet Applications (WAI-ARIA) 1.2 (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9d3a84713f2a204fe24aeef0f135721d0c5e9a" translate="yes" xml:space="preserve">
          <source>Accessing &lt;code&gt;this.$slots&lt;/code&gt; is most useful when writing a component with a &lt;a href=&quot;../guide/render-function&quot;&gt;render function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b50b62f5cbc40072eea261aa6929a1cb82ee0d5" translate="yes" xml:space="preserve">
          <source>Accessing &lt;code&gt;vm.$scopedSlots&lt;/code&gt; is most useful when writing a component with a &lt;a href=&quot;../guide/render-function&quot;&gt;render function&lt;/a&gt;.</source>
          <target state="translated">在编写带有&lt;a href=&quot;../guide/render-function&quot;&gt;render函数&lt;/a&gt;的组件时，访问 &lt;code&gt;vm.$scopedSlots&lt;/code&gt; 最有用。</target>
        </trans-unit>
        <trans-unit id="43cc7124b3cd5bce237d9cb731b89c1b2d4441c4" translate="yes" xml:space="preserve">
          <source>Accessing &lt;code&gt;vm.$slots&lt;/code&gt; is most useful when writing a component with a &lt;a href=&quot;../guide/render-function&quot;&gt;render function&lt;/a&gt;.</source>
          <target state="translated">在编写带有&lt;a href=&quot;../guide/render-function&quot;&gt;render函数&lt;/a&gt;的组件时，访问 &lt;code&gt;vm.$slots&lt;/code&gt; 最有用。</target>
        </trans-unit>
        <trans-unit id="aa5360da634be9b4703e888f353bb4cb930b0c39" translate="yes" xml:space="preserve">
          <source>Accessing Child Component Instances &amp;amp; Child Elements</source>
          <target state="translated">访问子组件实例和子元素</target>
        </trans-unit>
        <trans-unit id="000884e75d68697f91351e43a49d51fe7c50139e" translate="yes" xml:space="preserve">
          <source>Accessing Component Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e070cd358201567e0214607dc834ffde3324729" translate="yes" xml:space="preserve">
          <source>Accessing the Parent Component Instance</source>
          <target state="translated">访问父组件实例</target>
        </trans-unit>
        <trans-unit id="f3400d1a5e37cdaf0529c23c93b2c085bc355aa4" translate="yes" xml:space="preserve">
          <source>Accessing the Root Instance</source>
          <target state="translated">访问根实例</target>
        </trans-unit>
        <trans-unit id="9916dfe13f23eef38cf2dd9e0ac980248d896f9a" translate="yes" xml:space="preserve">
          <source>Active community and team</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cf6ada1913c2571c8305ddc043ddfe353af5e2" translate="yes" xml:space="preserve">
          <source>Add one or more global assets: directives/filters/transitions etc. (e.g. &lt;a href=&quot;https://github.com/vuejs/vue-touch&quot;&gt;vue-touch (opens new window)&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0558b15a1e843f3e820f05a7831ba76cff8484ca" translate="yes" xml:space="preserve">
          <source>Add one or more global assets: directives/filters/transitions etc. e.g. &lt;a href=&quot;https://github.com/vuejs/vue-touch&quot;&gt;vue-touch&lt;/a&gt;</source>
          <target state="translated">添加一个或多个全局资产：指令/过滤器/转换等，例如&lt;a href=&quot;https://github.com/vuejs/vue-touch&quot;&gt;vue-touch&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a4d0ce34829d9491f99c124a1a46de95499eedd6" translate="yes" xml:space="preserve">
          <source>Add some Vue instance methods by attaching them to Vue.prototype.</source>
          <target state="translated">通过将Vue.prototype附加到Vue.prototype中,增加一些Vue实例方法。</target>
        </trans-unit>
        <trans-unit id="af945b971224834f829575210e472680682bfe61" translate="yes" xml:space="preserve">
          <source>Add some component options by global mixin (e.g. &lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;vue-router (opens new window)&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8521ac8394f55fe417b5a588330dbc88d1f9ad" translate="yes" xml:space="preserve">
          <source>Add some component options by global mixin. e.g. &lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;vue-router&lt;/a&gt;</source>
          <target state="translated">通过全局混合添加一些组件选项。例如&lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;vue-router&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="206bced9c10caa4ad462774b1d49408967f3ae08" translate="yes" xml:space="preserve">
          <source>Add some global instance methods by attaching them to &lt;code&gt;config.globalProperties&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dd40ed5ca7c541f65641f78af57cbbcff48da5" translate="yes" xml:space="preserve">
          <source>Add some global methods or properties, e.g. &lt;a href=&quot;https://github.com/karol-f/vue-custom-element&quot;&gt;vue-custom-element (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ab17ed46d3ba5668bc28248feebff2125e2e51" translate="yes" xml:space="preserve">
          <source>Add some global methods or properties. e.g. &lt;a href=&quot;https://github.com/karol-f/vue-custom-element&quot;&gt;vue-custom-element&lt;/a&gt;</source>
          <target state="translated">添加一些全局方法或属性。例如&lt;a href=&quot;https://github.com/karol-f/vue-custom-element&quot;&gt;vue-custom-element&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c233bccc4dfd135faa12ee3138b60f3181270d4" translate="yes" xml:space="preserve">
          <source>Add to your project&amp;rsquo;s &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">添加到项目的 &lt;code&gt;package.json&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="3cb7895f7b12adcd6febf5ad68fa3b2f1f5d82b0" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;aria-hidden=&quot;true&quot;&lt;/code&gt; will hide the element from assistive technology but leave it visually available for other users. Do not use it on focusable elements, purely on decorative, duplicated or offscreen content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38858dc789c3506ce5a09afeb4bbf5b0bc9f0cf2" translate="yes" xml:space="preserve">
          <source>Adding Reactivity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94246ef8043f9858fdd0d59bfb07c083e643aa09" translate="yes" xml:space="preserve">
          <source>Additionally, since we have access to the &lt;code&gt;app&lt;/code&gt; object, all other capabilities like using &lt;code&gt;mixin&lt;/code&gt; and &lt;code&gt;directive&lt;/code&gt; are available to the plugin. To learn more about &lt;code&gt;createApp&lt;/code&gt; and the application instance, check out the &lt;a href=&quot;../api/application-api&quot;&gt;Application API documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf474c7bf42434572400eb8429d6d5b83653a7a" translate="yes" xml:space="preserve">
          <source>Adds a global property that can be accessed in any component instance inside the application. The component&amp;rsquo;s property will take priority when there are conflicting keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39cddc1d643ab738b6dccc79617b70ec367a05a" translate="yes" xml:space="preserve">
          <source>Adds a property to a reactive object, ensuring the new property is also reactive, so triggers view updates. This must be used to add new properties to reactive objects, as Vue cannot detect normal property additions (e.g. &lt;code&gt;this.myObject.newProperty = 'hi'&lt;/code&gt;).</source>
          <target state="translated">向响应对象添加属性，确保新属性也响应，因此触发视图更新。由于Vue无法检测到正常的属性添加，因此必须使用它来向反应对象添加新属性（例如， &lt;code&gt;this.myObject.newProperty = 'hi'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f9598f333eae7963e0a17dc25fb44481a25f2272" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49eb6fb8980e7b35ff3b18a7428b662ad4f4c199" translate="yes" xml:space="preserve">
          <source>After a Vue app has been initialized with &lt;code&gt;createApp()&lt;/code&gt;, you can add a plugin to your application by calling the &lt;code&gt;use()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ad3ea0d73c47cc510dd161a21610c0f1c71ede" translate="yes" xml:space="preserve">
          <source>After adding &lt;code&gt;functional: true&lt;/code&gt;, updating the render function of our anchored heading component would require adding the &lt;code&gt;context&lt;/code&gt; argument, updating &lt;code&gt;this.$slots.default&lt;/code&gt; to &lt;code&gt;context.children&lt;/code&gt;, then updating &lt;code&gt;this.level&lt;/code&gt; to &lt;code&gt;context.props.level&lt;/code&gt;.</source>
          <target state="translated">添加 &lt;code&gt;functional: true&lt;/code&gt; ，更新锚定标题组件的render函数将需要添加 &lt;code&gt;context&lt;/code&gt; 参数，将 &lt;code&gt;this.$slots.default&lt;/code&gt; 更新为 &lt;code&gt;context.children&lt;/code&gt; ，然后将 &lt;code&gt;this.level&lt;/code&gt; 更新为 &lt;code&gt;context.props.level&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66a779e5725692a0551ebe28b853a76b730cc51f" translate="yes" xml:space="preserve">
          <source>After being initialized with &lt;code&gt;createApp(/* options */)&lt;/code&gt;, the app instance &lt;code&gt;app&lt;/code&gt; can be used to mount a root component instance with &lt;code&gt;app.mount(domTarget)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5179b5b2a43182c70638c6dd48526689cccdd9bf" translate="yes" xml:space="preserve">
          <source>After including the above code as a declaration file (like &lt;code&gt;my-property.d.ts&lt;/code&gt;) in your project, you can use &lt;code&gt;$myProperty&lt;/code&gt; on a Vue instance.</source>
          <target state="translated">在将上述代码作为声明文件（例如 &lt;code&gt;my-property.d.ts&lt;/code&gt; ）添加到项目中之后，可以在Vue实例上使用 &lt;code&gt;$myProperty&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="584fb7bea52bf2a8057d7f7a3fcb966585501642" translate="yes" xml:space="preserve">
          <source>After that, browse through the table of contents for this page in the sidebar. If you see a topic you may be affected by, but the migration helper didn&amp;rsquo;t catch, check it out.</source>
          <target state="translated">之后，在侧边栏中浏览此页面的目录。如果您看到某个主题，则可能会对其有所影响，但迁移助手没有发现该问题，请查看该主题。</target>
        </trans-unit>
        <trans-unit id="5545c04b66e1e2439288f5b5b54f970a924d0478" translate="yes" xml:space="preserve">
          <source>After that, you&amp;rsquo;ll be ready to contribute to Vue&amp;rsquo;s core repositories:</source>
          <target state="translated">之后，您将准备为Vue的核心存储库做出贡献：</target>
        </trans-unit>
        <trans-unit id="8129005cdb1c6d7de8c2f7f86aff513a42faeafb" translate="yes" xml:space="preserve">
          <source>After the first render, a component would have tracked a list of dependencies &amp;mdash; the properties it accessed during the render. Conversely, the component becomes a subscriber to each of these properties. When a proxy intercepts a set operation, the property will notify all of its subscribed components to re-render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d485dbd20011f611535fdf446b3d653a7c76ba" translate="yes" xml:space="preserve">
          <source>After the instance is created, the original data object can be accessed as &lt;code&gt;vm.$data&lt;/code&gt;. The Vue instance also proxies all the properties found on the data object, so &lt;code&gt;vm.a&lt;/code&gt; will be equivalent to &lt;code&gt;vm.$data.a&lt;/code&gt;.</source>
          <target state="translated">创建实例后，原始数据对象可以作为 &lt;code&gt;vm.$data&lt;/code&gt; 访问。在Vue公司的实例还代理数据对象上找到的所有属性，所以 &lt;code&gt;vm.a&lt;/code&gt; 将等同于 &lt;code&gt;vm.$data.a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7863379fe644a8287c0be1de76df6d5fc86e3b54" translate="yes" xml:space="preserve">
          <source>After the instance is created, the original data object can be accessed as &lt;code&gt;vm.$data&lt;/code&gt;. The component instance also proxies all the properties found on the data object, so &lt;code&gt;vm.a&lt;/code&gt; will be equivalent to &lt;code&gt;vm.$data.a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d666349c92f3219ad13aa2920b4d2b8183e64ea0" translate="yes" xml:space="preserve">
          <source>After the instance is mounted, the resolved element will be accessible as &lt;code&gt;vm.$el&lt;/code&gt;.</source>
          <target state="translated">实例安装后，已解析的元素将以 &lt;code&gt;vm.$el&lt;/code&gt; 访问。</target>
        </trans-unit>
        <trans-unit id="ccaf124ea8cb4d40376eaf9b3098c579b4150a79" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve taken a day to dive into these resources, we recommend checking out &lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;Vue CLI 3&lt;/a&gt;. Follow the instructions and you should have a Vue project with &lt;code&gt;.vue&lt;/code&gt; components, ES2015, Webpack and hot-reloading in no time!</source>
          <target state="translated">在花了一天时间研究这些资源之后，我们建议您检出&lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;Vue CLI 3&lt;/a&gt;。按照说明进行操作，您将立即拥有一个包含 &lt;code&gt;.vue&lt;/code&gt; 组件，ES2015，Webpack和热重载的Vue项目！</target>
        </trans-unit>
        <trans-unit id="a87ba746bdc87e41af0052df197b513d1f93e1ba" translate="yes" xml:space="preserve">
          <source>After you've taken a day to dive into these resources, we recommend checking out &lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;Vue CLI (opens new window)&lt;/a&gt;. Follow the instructions and you should have a Vue project with &lt;code&gt;.vue&lt;/code&gt; components, ES2015, webpack and hot-reloading in no time!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4035fa2559db72aeae2fe32d00fce2ce3541064d" translate="yes" xml:space="preserve">
          <source>Again due to limitations of modern JavaScript, &lt;strong&gt;Vue cannot detect property addition or deletion&lt;/strong&gt;. For example:</source>
          <target state="translated">同样，由于现代JavaScript的限制，&lt;strong&gt;Vue无法检测到属性的添加或删除&lt;/strong&gt;。例如：</target>
        </trans-unit>
        <trans-unit id="13d06ad758afa4d98d31afc22e29029433a54989" translate="yes" xml:space="preserve">
          <source>Again, if you&amp;rsquo;re using string templates, this limitation does not apply.</source>
          <target state="translated">同样，如果您使用的是字符串模板，则此限制不适用。</target>
        </trans-unit>
        <trans-unit id="4720b8a4c356d7b6bc82aec32bb55591c1ece2bb" translate="yes" xml:space="preserve">
          <source>Again, if you're using string templates, this limitation does not apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5fd8f6fe7da6eb27ee847128e973cae177d678" translate="yes" xml:space="preserve">
          <source>Again, the object syntax is often used in conjunction with computed properties that return objects.</source>
          <target state="translated">同样,对象语法经常与返回对象的计算属性一起使用。</target>
        </trans-unit>
        <trans-unit id="d0efe0b2c75c1c670b3146f5f276e23a667f15ec" translate="yes" xml:space="preserve">
          <source>Alerts</source>
          <target state="translated">Alerts</target>
        </trans-unit>
        <trans-unit id="882c2811e5772305a01848736e50210f7d5c7909" translate="yes" xml:space="preserve">
          <source>Aliasing &lt;code&gt;createElement&lt;/code&gt; to &lt;code&gt;h&lt;/code&gt; is a common convention you&amp;rsquo;ll see in the Vue ecosystem and is actually required for JSX. Starting with &lt;a href=&quot;https://github.com/vuejs/babel-plugin-transform-vue-jsx#h-auto-injection&quot;&gt;version 3.4.0&lt;/a&gt; of the Babel plugin for Vue, we automatically inject &lt;code&gt;const h = this.$createElement&lt;/code&gt; in any method and getter (not functions or arrow functions), declared in ES2015 syntax that has JSX, so you can drop the &lt;code&gt;(h)&lt;/code&gt; parameter. With prior versions of the plugin, your app would throw an error if &lt;code&gt;h&lt;/code&gt; was not available in the scope.</source>
          <target state="translated">将 &lt;code&gt;createElement&lt;/code&gt; 别名为 &lt;code&gt;h&lt;/code&gt; 是Vue生态系统中常见的约定，实际上是JSX所必需的。从适用于Vue的Babel插件的&lt;a href=&quot;https://github.com/vuejs/babel-plugin-transform-vue-jsx#h-auto-injection&quot;&gt;3.4.0版本&lt;/a&gt;开始，我们会自动以任何方法和getter（非函数或箭头函数）注入 &lt;code&gt;const h = this.$createElement&lt;/code&gt; ，并以具有JSX的ES2015语法声明，因此您可以删除 &lt;code&gt;(h)&lt;/code&gt; 参数。使用该插件的早期版本，如果 &lt;code&gt;h&lt;/code&gt; 在范围内不可用，则您的应用程序将引发错误。</target>
        </trans-unit>
        <trans-unit id="67e512a516784e547a77cdcbe9a92b128f542007" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;$slots&lt;/code&gt; are now also exposed on &lt;code&gt;$scopedSlots&lt;/code&gt; as functions. If you work with render functions, it is now recommended to always access slots via &lt;code&gt;$scopedSlots&lt;/code&gt;, whether they currently use a scope or not. This will not only make future refactors to add a scope simpler, but also ease your eventual migration to Vue 3, where all slots will be functions.</source>
          <target state="translated">现在，所有 &lt;code&gt;$slots&lt;/code&gt; 也都在 &lt;code&gt;$scopedSlots&lt;/code&gt; 作为函数公开。如果使用渲染功能，则现在建议始终通过 &lt;code&gt;$scopedSlots&lt;/code&gt; 访问插槽，无论它们当前是否使用范围。这不仅使将来的重构更加简单，而且还简化了最终迁移到Vue 3（所有插槽均具有功能）的过程。</target>
        </trans-unit>
        <trans-unit id="d4fc5c0811f2637eb910708a252d6026f43f9a64" translate="yes" xml:space="preserve">
          <source>All UMD builds can be used directly as an AMD module.</source>
          <target state="translated">所有UMD构建可以直接作为AMD模块使用。</target>
        </trans-unit>
        <trans-unit id="df38f74745e7028f377542dd26c5bcd8b69c02e7" translate="yes" xml:space="preserve">
          <source>All VNodes in the component tree must be unique. That means the following render function is invalid:</source>
          <target state="translated">组件树中的所有VNodes必须是唯一的。这意味着下面的渲染函数是无效的。</target>
        </trans-unit>
        <trans-unit id="518e8e3823613ecc844aca79a863b64325e131d7" translate="yes" xml:space="preserve">
          <source>All lifecycle hooks automatically have their &lt;code&gt;this&lt;/code&gt; context bound to the instance, so that you can access data, computed properties, and methods. This means &lt;strong&gt;you should not use an arrow function to define a lifecycle method&lt;/strong&gt; (e.g. &lt;code&gt;created: () =&amp;gt; this.fetchTodos()&lt;/code&gt;). The reason is arrow functions bind the parent context, so &lt;code&gt;this&lt;/code&gt; will not be the Vue instance as you expect and &lt;code&gt;this.fetchTodos&lt;/code&gt; will be undefined.</source>
          <target state="translated">所有生命周期挂钩都会自动将其 &lt;code&gt;this&lt;/code&gt; 上下文绑定到实例，以便您可以访问数据，计算的属性和方法。这意味着&lt;strong&gt;您不应使用箭头函数来定义生命周期方法&lt;/strong&gt;（例如， &lt;code&gt;created: () =&amp;gt; this.fetchTodos()&lt;/code&gt; ）。原因是箭头函数绑定了父上下文，因此 &lt;code&gt;this&lt;/code&gt; 将不是您期望的Vue实例，并且 &lt;code&gt;this.fetchTodos&lt;/code&gt; 将是未定义的。</target>
        </trans-unit>
        <trans-unit id="a6d5b316c6250c459062cf49b4156c307aef67de" translate="yes" xml:space="preserve">
          <source>All lifecycle hooks automatically have their &lt;code&gt;this&lt;/code&gt; context bound to the instance, so that you can access data, computed properties, and methods. This means &lt;strong&gt;you should not use an arrow function to define a lifecycle method&lt;/strong&gt; (e.g. &lt;code&gt;created: () =&amp;gt; this.fetchTodos()&lt;/code&gt;). The reason is arrow functions bind the parent context, so &lt;code&gt;this&lt;/code&gt; will not be the component instance as you expect and &lt;code&gt;this.fetchTodos&lt;/code&gt; will be undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a553f4e55cf9a4f38374a8b130ada77154ec8f5a" translate="yes" xml:space="preserve">
          <source>All lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ef783c31a5231f8805e1226433106fab22814c" translate="yes" xml:space="preserve">
          <source>All of our official libraries and tools now support Vue 3, but most of them are still in beta status and distributed under the &lt;code&gt;next&lt;/code&gt; dist tag on npm. &lt;strong&gt;We are planning to stabilize and switch all projects to use the &lt;code&gt;latest&lt;/code&gt; dist tag by end of 2020.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1fd707965d908f856ca354f3073f7702a25ad9" translate="yes" xml:space="preserve">
          <source>All of these are either already stored as raw numbers or can be converted into numbers. Once we do that, we can animate these state changes using 3rd-party libraries to tween state, in combination with Vue&amp;rsquo;s reactivity and component systems.</source>
          <target state="translated">所有这些要么已经存储为原始数字，要么可以转换为数字。完成此操作后，我们可以结合Vue的反应性和组件系统，使用3rd-party库对这些状态更改进行动画处理以补间状态。</target>
        </trans-unit>
        <trans-unit id="131009f3b69b3f95ceb94a456565356bf090f91c" translate="yes" xml:space="preserve">
          <source>All of these are either already stored as raw numbers or can be converted into numbers. Once we do that, we can animate these state changes using 3rd-party libraries to tween state, in combination with Vue's reactivity and component systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a83d046e31f738e64b7093dda5db51fee1bd192" translate="yes" xml:space="preserve">
          <source>All of these are solved by &lt;strong&gt;single-file components&lt;/strong&gt; with a &lt;code&gt;.vue&lt;/code&gt; extension, made possible with build tools such as Webpack or Browserify.</source>
          <target state="translated">所有这些都是要解决&lt;strong&gt;单一文件组件&lt;/strong&gt;与 &lt;code&gt;.vue&lt;/code&gt; 扩展，成为可能与构建工具如的WebPack或Browserify。</target>
        </trans-unit>
        <trans-unit id="bbd7c86cf57a1979736fa7387dcaa8d2606bc3fc" translate="yes" xml:space="preserve">
          <source>All other global APIs that do not globally mutate behavior are now named exports, as documented in &lt;a href=&quot;global-api-treeshaking&quot;&gt;Global API Treeshaking&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c167a5e717e3cf2ba619d5219265e210d79f7e3c" translate="yes" xml:space="preserve">
          <source>All props form a &lt;strong&gt;one-way-down binding&lt;/strong&gt; between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent&amp;rsquo;s state, which can make your app&amp;rsquo;s data flow harder to understand.</source>
          <target state="translated">所有道具在子属性和父属性之间形成&lt;strong&gt;单向绑定&lt;/strong&gt;：当父属性更新时，它将向下流到子属性，但不会反过来。这样可以防止子组件意外更改父组件的状态，从而使您的应用程序数据流更难以理解。</target>
        </trans-unit>
        <trans-unit id="2662a446fc83696aa230d21479eada7808da2e4f" translate="yes" xml:space="preserve">
          <source>All props form a &lt;strong&gt;one-way-down binding&lt;/strong&gt; between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16eab474b1ec4a1329577a71f5e9c584e38a8532" translate="yes" xml:space="preserve">
          <source>All routing mode options have been condensed into a single &lt;a href=&quot;https://router.vuejs.org/en/api/options.html#mode&quot;&gt;&lt;code&gt;mode&lt;/code&gt; option&lt;/a&gt;. Update:</source>
          <target state="translated">所有路由模式选项都已浓缩为单个&lt;a href=&quot;https://router.vuejs.org/en/api/options.html#mode&quot;&gt; &lt;code&gt;mode&lt;/code&gt; 选项&lt;/a&gt;。更新：</target>
        </trans-unit>
        <trans-unit id="8eb0ad80548989252fccb966f36ec90afb0e191a" translate="yes" xml:space="preserve">
          <source>All subcomponents will now be able to access this instance and use it as a global store:</source>
          <target state="translated">所有的子组件现在都可以访问这个实例,并将其作为一个全局存储。</target>
        </trans-unit>
        <trans-unit id="86b786b1e86ded052a10ac30b2941b171f237ad7" translate="yes" xml:space="preserve">
          <source>All the features on this page document the handling of edge cases, meaning unusual situations that sometimes require bending Vue&amp;rsquo;s rules a little. Note however, that they all have disadvantages or situations where they could be dangerous. These are noted in each case, so keep them in mind when deciding to use each feature.</source>
          <target state="translated">此页面上的所有功能都记录了边缘情况的处理，这意味着异常情况有时需要稍微折弯Vue的规则。但是请注意，它们都有缺点或可能会造成危险的情况。在每种情况下都应注意这些内容，因此在决定使用每个功能时请记住它们。</target>
        </trans-unit>
        <trans-unit id="becf4efdd4a5d9342eb314b751bb8e36a281b237" translate="yes" xml:space="preserve">
          <source>All the features on this page document the handling of edge cases, meaning unusual situations that sometimes require bending Vue's rules a little. Note however, that they all have disadvantages or situations where they could be dangerous. These are noted in each case, so keep them in mind when deciding to use each feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce03eb6970bf7238f60e7b5faf1c518811ed16c" translate="yes" xml:space="preserve">
          <source>Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with &lt;code&gt;Vue.component()&lt;/code&gt;, the global ID is automatically set as its name.</source>
          <target state="translated">允许组件在其模板中递归调用自身。请注意，当使用 &lt;code&gt;Vue.component()&lt;/code&gt; 在全局范围内注册组件时，全局ID会自动设置为其名称。</target>
        </trans-unit>
        <trans-unit id="5b1b04de3107b3f6be86295a9cb3bb35c3d22759" translate="yes" xml:space="preserve">
          <source>Allow the component to recursively invoke itself in its template. Note that when a component is registered globally with &lt;code&gt;Vue.createApp({}).component({})&lt;/code&gt;, the global ID is automatically set as its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4030c4050fc12765d9ba75383685566375d8c859" translate="yes" xml:space="preserve">
          <source>Allows a custom component to customize the prop and event used when it&amp;rsquo;s used with &lt;code&gt;v-model&lt;/code&gt;. By default, &lt;code&gt;v-model&lt;/code&gt; on a component uses &lt;code&gt;value&lt;/code&gt; as the prop and &lt;code&gt;input&lt;/code&gt; as the event, but some input types such as checkboxes and radio buttons may want to use the &lt;code&gt;value&lt;/code&gt; prop for a different purpose. Using the &lt;code&gt;model&lt;/code&gt; option can avoid the conflict in such cases.</source>
          <target state="translated">允许自定义组件自定义与 &lt;code&gt;v-model&lt;/code&gt; 一起使用的prop和event 。默认情况下，组件上的 &lt;code&gt;v-model&lt;/code&gt; 将 &lt;code&gt;value&lt;/code&gt; 用作属性，将 &lt;code&gt;input&lt;/code&gt; 作为事件，但是某些输入类型（例如复选框和单选按钮）可能希望将 &lt;code&gt;value&lt;/code&gt; 属性用于其他目的。在这种情况下，使用 &lt;code&gt;model&lt;/code&gt; 选项可以避免冲突。</target>
        </trans-unit>
        <trans-unit id="a11a0da446af74672e18852449f10c594254be9d" translate="yes" xml:space="preserve">
          <source>Allows applying directives to a &lt;strong&gt;VNode&lt;/strong&gt;. Returns a VNode with the applied directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29503ea12f3831556bab8df3d4f0c4b219c2ed7" translate="yes" xml:space="preserve">
          <source>Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use &lt;code&gt;Vue.extend&lt;/code&gt;. This is primarily intended to make it easier to extend between single file components.</source>
          <target state="translated">允许以声明方式扩展另一个组件（可以是纯选项对象或构造函数），而不必使用 &lt;code&gt;Vue.extend&lt;/code&gt; 。这主要是为了使在单个文件组件之间扩展更容易。</target>
        </trans-unit>
        <trans-unit id="34f7f6417109be7e39daad72f807171a5a572a1c" translate="yes" xml:space="preserve">
          <source>Allows declaratively extending another component (could be either a plain options object or a constructor). This is primarily intended to make it easier to extend between single file components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3159749099ca327b688b9879dae339e6d29ed389" translate="yes" xml:space="preserve">
          <source>Allows resolving a &lt;code&gt;component&lt;/code&gt; by its name, if it is available in the current application instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3a07fb5fe93adc952e55ad59751882dc585a8c" translate="yes" xml:space="preserve">
          <source>Allows resolving a &lt;code&gt;component&lt;/code&gt; by the same mechanism that &lt;code&gt;&amp;lt;component :is=&quot;&quot;&amp;gt;&lt;/code&gt; employs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e470e82c591f9e7b121bb5f808a34653fc10377" translate="yes" xml:space="preserve">
          <source>Allows resolving a &lt;code&gt;directive&lt;/code&gt; by its name, if it is available in the current application instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6dffc1a59016ba4924a07ce8c06a70463e3df8" translate="yes" xml:space="preserve">
          <source>Already know Vue 2 and just want to learn about what's new in Vue 3? Check out the &lt;a href=&quot;guide/migration/introduction&quot;&gt;Migration Guide&lt;/a&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71832ae8fbec097aca1233a41a5a8145116e6ffd" translate="yes" xml:space="preserve">
          <source>Also note that &lt;strong&gt;what&amp;rsquo;s considered &amp;ldquo;highest-level&amp;rdquo; will be contextual to your app&lt;/strong&gt;. For example, imagine an app with a search form. It may include components like this one:</source>
          <target state="translated">另请注意，&lt;strong&gt;所谓的&amp;ldquo;最高级别&amp;rdquo;将取决于您的应用&lt;/strong&gt;。例如，假设一个带有搜索表单的应用程序。它可能包括这样的组件：</target>
        </trans-unit>
        <trans-unit id="53f89180ba9ef252bcd11b9c3c7737256ca8230b" translate="yes" xml:space="preserve">
          <source>Also note that &lt;strong&gt;what's considered &quot;highest-level&quot; will be contextual to your app&lt;/strong&gt;. For example, imagine an app with a search form. It may include components like this one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29ecac72ed7922b3f8b6ffb06c3eef36a16fd7e" translate="yes" xml:space="preserve">
          <source>Also note that if you&amp;rsquo;ve already invested heavily in kebab-case, consistency with HTML conventions and being able to use the same casing across all your projects may be more important than the advantages listed above. In those cases, &lt;strong&gt;using kebab-case everywhere is also acceptable.&lt;/strong&gt;</source>
          <target state="translated">还要注意，如果您已经在kebab-case上进行了大量投资，那么与HTML约定的一致性以及能够在所有项目中使用相同的大小写可能比上面列出的优势更为重要。在那些情况下，在&lt;strong&gt;任何地方都使用kebab-case也可以。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="130e67dd4ee44d66913c7a147bc88bfacd3ee008" translate="yes" xml:space="preserve">
          <source>Also note that if you've already invested heavily in kebab-case, consistency with HTML conventions and being able to use the same casing across all your projects may be more important than the advantages listed above. In those cases, &lt;strong&gt;using kebab-case everywhere is also acceptable.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbb7fab0be9654dae857edec1fc82f73c59ac8f" translate="yes" xml:space="preserve">
          <source>Also see &lt;a href=&quot;deployment&quot;&gt;Production Deployment Tips&lt;/a&gt;.</source>
          <target state="translated">另请参阅&lt;a href=&quot;deployment&quot;&gt;生产部署提示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a5f25cd1bd9fc6ec0020b798e541e322dff0926" translate="yes" xml:space="preserve">
          <source>Also, HTML attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you&amp;rsquo;re using in-DOM templates, camelCased prop names and event handler parameters need to use their kebab-cased (hyphen-delimited) equivalents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f487bebba4e014aae57733509d0b523313cef4c7" translate="yes" xml:space="preserve">
          <source>Also, you can add another &lt;code&gt;ref&lt;/code&gt; to the component itself and use it to trigger &lt;code&gt;focusInput&lt;/code&gt; event from the parent component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9733af4a520a87f91ee5c9edbce6f05a4300b1ea" translate="yes" xml:space="preserve">
          <source>Alternate Template Definitions</source>
          <target state="translated">备用模板定义</target>
        </trans-unit>
        <trans-unit id="51b99148cfc142b5a31b58642239e228c01a3ced" translate="yes" xml:space="preserve">
          <source>Alternatively, it can take an object with &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions to create a writable ref object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4426261061285bf374d897220d238dab7f02cebc" translate="yes" xml:space="preserve">
          <source>Alternatively, we can use a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag with &lt;code&gt;v-for&lt;/code&gt; to wrap the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90594d18c278847211cf8a22342e70877c15c228" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also specify an alias for the index (or the key if used on an Object):</source>
          <target state="translated">另外,你也可以为索引指定一个别名(如果在对象上使用,则指定键)。</target>
        </trans-unit>
        <trans-unit id="f22e48b068451a1b508a0584e33d878e7bc951c8" translate="yes" xml:space="preserve">
          <source>Alternatively, you can attach the instructions to the input with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute&quot;&gt;&lt;code&gt;aria-describedby&lt;/code&gt; (opens new window)&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c21cb25a7f1aa0b87f4b576985c4e9de23a4f8a" translate="yes" xml:space="preserve">
          <source>Although Vue doesn&amp;rsquo;t use custom elements internally, it has &lt;a href=&quot;https://custom-elements-everywhere.com/#vue&quot;&gt;great interoperability&lt;/a&gt; when it comes to consuming or distributing as custom elements. Vue CLI also supports building Vue components that register themselves as native custom elements.</source>
          <target state="translated">尽管Vue在内部不使用自定义元素，但是在作为自定义元素使用或分发时，它具有&lt;a href=&quot;https://custom-elements-everywhere.com/#vue&quot;&gt;很大的互操作性&lt;/a&gt;。Vue CLI还支持构建将自身注册为本地自定义元素的Vue组件。</target>
        </trans-unit>
        <trans-unit id="353ace787b097d97c63d368a16a5b51a78b1103d" translate="yes" xml:space="preserve">
          <source>Although Vue doesn't use custom elements internally, it has &lt;a href=&quot;https://custom-elements-everywhere.com/#vue&quot;&gt;great interoperability (opens new window)&lt;/a&gt; when it comes to consuming or distributing as custom elements. Vue CLI also supports building Vue components that register themselves as native custom elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f919759cdbbe867e98788b24924bdb6828f1ec1" translate="yes" xml:space="preserve">
          <source>Although filters within text interpolations are still allowed, all of the filters have been removed. Instead, it&amp;rsquo;s recommended to use more specialized libraries for solving problems in each domain (e.g. &lt;a href=&quot;https://date-fns.org/&quot;&gt;&lt;code&gt;date-fns&lt;/code&gt;&lt;/a&gt; to format dates and &lt;a href=&quot;http://openexchangerates.github.io/accounting.js/&quot;&gt;&lt;code&gt;accounting&lt;/code&gt;&lt;/a&gt; for currencies).</source>
          <target state="translated">尽管仍然允许在文本插值中使用过滤器，但已删除所有过滤器。相反，建议使用更专业的库来解决每个域中的问题（例如，使用&lt;a href=&quot;https://date-fns.org/&quot;&gt; &lt;code&gt;date-fns&lt;/code&gt; &lt;/a&gt;格式化日期和&lt;a href=&quot;http://openexchangerates.github.io/accounting.js/&quot;&gt; &lt;code&gt;accounting&lt;/code&gt; &lt;/a&gt;货币）。</target>
        </trans-unit>
        <trans-unit id="b1ac3bd6e1472eb849313c6df48cfe913bb44e46" translate="yes" xml:space="preserve">
          <source>Although not strictly associated with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;MVVM pattern (opens new window)&lt;/a&gt;, Vue's design was partly inspired by it. As a convention, we often use the variable &lt;code&gt;vm&lt;/code&gt; (short for ViewModel) to refer to a component instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7f3a16ff67996f9ee85352b2dcd3bbfebfca43" translate="yes" xml:space="preserve">
          <source>Although not strictly associated with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;MVVM pattern&lt;/a&gt;, Vue&amp;rsquo;s design was partly inspired by it. As a convention, we often use the variable &lt;code&gt;vm&lt;/code&gt; (short for ViewModel) to refer to our Vue instance.</source>
          <target state="translated">尽管不严格与&lt;a href=&quot;https://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;MVVM模式&lt;/a&gt;相关联，但Vue的设计部分受其启发。按照惯例，我们经常使用变量 &lt;code&gt;vm&lt;/code&gt; （ViewModel的缩写）来引用我们的Vue实例。</target>
        </trans-unit>
        <trans-unit id="6e2abdd63f46c9a3613fd79d0b250df5d3579bf6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;errorCaptured&lt;/code&gt; hook can return &lt;code&gt;false&lt;/code&gt; to prevent the error from propagating further. This is essentially saying &quot;this error has been handled and should be ignored.&quot; It will prevent any additional &lt;code&gt;errorCaptured&lt;/code&gt; hooks or the global &lt;code&gt;config.errorHandler&lt;/code&gt; from being invoked for this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48633038159d243023310c2ad16e9d558e2af750" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;errorCaptured&lt;/code&gt; hook can return &lt;code&gt;false&lt;/code&gt; to prevent the error from propagating further. This is essentially saying &amp;ldquo;this error has been handled and should be ignored.&amp;rdquo; It will prevent any additional &lt;code&gt;errorCaptured&lt;/code&gt; hooks or the global &lt;code&gt;config.errorHandler&lt;/code&gt; from being invoked for this error.</source>
          <target state="translated">一个 &lt;code&gt;errorCaptured&lt;/code&gt; 钩可以返回 &lt;code&gt;false&lt;/code&gt; 以阻止错误的进一步传播。这实际上是在说&amp;ldquo;此错误已得到处理，应该忽略。&amp;rdquo; 这将防止为此错误调用任何其他 &lt;code&gt;errorCaptured&lt;/code&gt; 挂钩或全局 &lt;code&gt;config.errorHandler&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58f4f6bd8d5d0f3d0487babbd6780e94653ebe06" translate="yes" xml:space="preserve">
          <source>An HTML tag name, a component or an async component. Using function returning null would render a comment. This parameter is required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d706889200d5c69d5b89403c4e715620449a2a" translate="yes" xml:space="preserve">
          <source>An alternative to string templates allowing you to leverage the full programmatic power of JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79dd4fc23e6041bcb9f258f161a2a973a10be8c" translate="yes" xml:space="preserve">
          <source>An alternative to string templates allowing you to leverage the full programmatic power of JavaScript. The render function receives a &lt;code&gt;createElement&lt;/code&gt; method as it&amp;rsquo;s first argument used to create &lt;code&gt;VNode&lt;/code&gt;s.</source>
          <target state="translated">字符串模板的替代方法，使您可以利用JavaScript的全部编程功能。render函数接收一个 &lt;code&gt;createElement&lt;/code&gt; 方法作为它用于创建 &lt;code&gt;VNode&lt;/code&gt; 的第一个参数。</target>
        </trans-unit>
        <trans-unit id="36d02f9030c89bce78c3d426c802558bbc1973ce" translate="yes" xml:space="preserve">
          <source>An app instance exposes a subset of the Vue 2 global APIs. The rule of thumb is &lt;em&gt;any APIs that globally mutate Vue's behavior are now moved to the app instance&lt;/em&gt;. Here is a table of the Vue 2 global APIs and their corresponding instance APIs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d9594c3b6afdd1342544d2a5f58112661c98c9" translate="yes" xml:space="preserve">
          <source>An application needs to be mounted into a DOM element. For example, if we want to mount a Vue application into &lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, we should pass &lt;code&gt;#app&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e70cddb81402ecd32e5708b578322688412f5c7" translate="yes" xml:space="preserve">
          <source>An array of directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad46feb893197e823380e42690bcdca813fd97a" translate="yes" xml:space="preserve">
          <source>An async function implicitly returns a Promise, but the cleanup function needs to be registered immediately before the Promise resolves. In addition, Vue relies on the returned Promise to automatically handle potential errors in the Promise chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3799ca57153370cb0516f1ebcb1401ebe08e12" translate="yes" xml:space="preserve">
          <source>An example of a custom directive using some of these properties:</source>
          <target state="translated">一个使用这些属性的自定义指令的例子。</target>
        </trans-unit>
        <trans-unit id="b0d30581a4ac7962ecae5a1d28316366708ba0db" translate="yes" xml:space="preserve">
          <source>An ideal Vue application is props down, events up. Sticking to this convention makes your components much easier to understand. However, there are edge cases where prop mutation or &lt;code&gt;this.$parent&lt;/code&gt; can simplify two components that are already deeply coupled.</source>
          <target state="translated">理想的Vue应用程序是关闭道具，关闭事件。遵守该约定可使您的组件更容易理解。但是，在某些情况下，prop突变或 &lt;code&gt;this.$parent&lt;/code&gt; 可以简化已经深入耦合的两个组件。</target>
        </trans-unit>
        <trans-unit id="c8f457aa9789280586eabf3b4043968fac51eb9b" translate="yes" xml:space="preserve">
          <source>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don&amp;rsquo;t exist yet! &lt;code&gt;$refs&lt;/code&gt; is also non-reactive, therefore you should not attempt to use it in templates for data-binding.</source>
          <target state="translated">关于ref注册时间的重要说明：由于ref本身是通过render函数创建的，因此您无法在初始渲染时访问它们-它们尚不存在！ &lt;code&gt;$refs&lt;/code&gt; 也是非反应性的，因此您不应尝试在模板中使用它来进行数据绑定。</target>
        </trans-unit>
        <trans-unit id="70f3fe5f25ba8edd1f2191e01296d226f1994362" translate="yes" xml:space="preserve">
          <source>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you cannot access them on the initial render - they don't exist yet! &lt;code&gt;$refs&lt;/code&gt; is also non-reactive, therefore you should not attempt to use it in templates for data-binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbecd26964624650991d90447203ccd0665ac7d1" translate="yes" xml:space="preserve">
          <source>An object containing application configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60d89f5cd0181a6e8c881d5010259e02151ddb3" translate="yes" xml:space="preserve">
          <source>An object containing the following properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63a82eb5a35c005f930dbdaa504cea629e7d004" translate="yes" xml:space="preserve">
          <source>An object corresponding to the attributes, props and events we would use in a template. Optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31adc28bf741f1caac66398ce75f50fb8901e915" translate="yes" xml:space="preserve">
          <source>An object of DOM elements and component instances, registered with &lt;a href=&quot;#ref&quot;&gt;&lt;code&gt;ref&lt;/code&gt; attributes&lt;/a&gt;.</source>
          <target state="translated">DOM元素和组件实例的对象，已使用&lt;a href=&quot;#ref&quot;&gt; &lt;code&gt;ref&lt;/code&gt; 属性&lt;/a&gt;注册。</target>
        </trans-unit>
        <trans-unit id="ae9ec5ae289062e068fddf7ffa17e903e1a9e7d7" translate="yes" xml:space="preserve">
          <source>An object of DOM elements and component instances, registered with &lt;a href=&quot;../guide/component-template-refs&quot;&gt;&lt;code&gt;ref&lt;/code&gt; attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429233ae8c44c337cc867f9ffe3dabc28329fcda" translate="yes" xml:space="preserve">
          <source>An object representing the current props a component has received. The Vue instance proxies access to the properties on its props object.</source>
          <target state="translated">一个代表当前组件收到的道具的对象。Vue实例代理访问其道具对象上的属性。</target>
        </trans-unit>
        <trans-unit id="38d4a53bfc500d7da498f98f1d231b78bdfae66d" translate="yes" xml:space="preserve">
          <source>An object representing the current props a component has received. The component instance proxies access to the properties on its props object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b854f15df3197587296b2c1985187a344087cda1" translate="yes" xml:space="preserve">
          <source>An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The Vue instance will call &lt;code&gt;$watch()&lt;/code&gt; for each entry in the object at instantiation.</source>
          <target state="translated">一个对象，其中键是要监视的表达式，值是相应的回调。该值也可以是方法名称的字符串，也可以是包含其他选项的对象。Vue实例将在实例化时为对象中的每个条目调用 &lt;code&gt;$watch()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1861a6e34a5d28eb9252c05a2fc6cc98a140eb50" translate="yes" xml:space="preserve">
          <source>An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. The component instance will call &lt;code&gt;$watch()&lt;/code&gt; for each entry in the object at instantiation. See &lt;a href=&quot;instance-methods#watch&quot;&gt;$watch&lt;/a&gt; for more information about the &lt;code&gt;deep&lt;/code&gt;, &lt;code&gt;immediate&lt;/code&gt; and &lt;code&gt;flush&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d66b28a0c3c480fee0ad93d29ffb417a189eb3e" translate="yes" xml:space="preserve">
          <source>An object with component options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8556bee67d1ac16eb2bddc45f539ca743c027d08" translate="yes" xml:space="preserve">
          <source>Anchored headings are used very frequently, we should create a component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a910bf09a64caf648d8684b0e13f7b12b51b445f" translate="yes" xml:space="preserve">
          <source>And &lt;a href=&quot;render-function#Functional-Components&quot;&gt;functional components&lt;/a&gt; are especially well-suited to this task:</source>
          <target state="translated">而&lt;a href=&quot;render-function#Functional-Components&quot;&gt;功能部件&lt;/a&gt;是特别适合这项任务：</target>
        </trans-unit>
        <trans-unit id="4f2d8a5ea853de2d832e41d30344cf66ad54abde" translate="yes" xml:space="preserve">
          <source>And access scoped slots as functions that return VNodes from &lt;a href=&quot;../api/index#vm-scopedSlots&quot;&gt;&lt;code&gt;this.$scopedSlots&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">并访问作用域内的插槽作为从&lt;a href=&quot;../api/index#vm-scopedSlots&quot;&gt; &lt;code&gt;this.$scopedSlots&lt;/code&gt; &lt;/a&gt;返回VNode的函数：</target>
        </trans-unit>
        <trans-unit id="06be132e44569998b6713037b4938f2f9326d7b0" translate="yes" xml:space="preserve">
          <source>And another for the index:</source>
          <target state="translated">还有一个是指数的。</target>
        </trans-unit>
        <trans-unit id="ccd97cfa695145777f87153245644b8bc85629fb" translate="yes" xml:space="preserve">
          <source>And even define methods for use by the parent:</source>
          <target state="translated">甚至定义方法供父体使用。</target>
        </trans-unit>
        <trans-unit id="7d45958b448393338d03638ac230b5bb7b84ad4e" translate="yes" xml:space="preserve">
          <source>And here is the same bounce in JS using GreenSock:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe400f8b1de3f59d8a0a26cac0f5d38cdc0768f" translate="yes" xml:space="preserve">
          <source>And in both cases, Vue automatically keeps the page updated, even when &lt;code&gt;blogTitle&lt;/code&gt; changes.</source>
          <target state="translated">在这两种情况下，即使 &lt;code&gt;blogTitle&lt;/code&gt; 发生更改，Vue也会自动使页面保持更新。</target>
        </trans-unit>
        <trans-unit id="aa8e03ffca44029ba6d6a5c3e8c8278a8a4a1af8" translate="yes" xml:space="preserve">
          <source>And in the component, target the template using a selector:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02afd3485814018314fc92f3b2cbf8e1256b1cfe" translate="yes" xml:space="preserve">
          <source>And the &lt;code&gt;data-date-picker=&quot;activated&quot;&lt;/code&gt; attribute will automatically be added to the root element of &lt;code&gt;bootstrap-date-input&lt;/code&gt;.</source>
          <target state="translated">并且 &lt;code&gt;data-date-picker=&quot;activated&quot;&lt;/code&gt; 属性将自动添加到 &lt;code&gt;bootstrap-date-input&lt;/code&gt; 的根元素中。</target>
        </trans-unit>
        <trans-unit id="4d0f2b48e78d27ea894b9f9744256fd5b0718f4e" translate="yes" xml:space="preserve">
          <source>And the following data:</source>
          <target state="translated">而以下数据:</target>
        </trans-unit>
        <trans-unit id="c6d1ad79131294b1b2ea6cece145a23b5d1a5f6c" translate="yes" xml:space="preserve">
          <source>And then maybe also translated so that they look like slide transitions:</source>
          <target state="translated">然后也许还可以翻译,让它们看起来像幻灯片转场。</target>
        </trans-unit>
        <trans-unit id="7bea4805e289e5266afef44a2c3df305bd6c1471" translate="yes" xml:space="preserve">
          <source>And then the searching functionality:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88e89f891451dac006fc9aa01b950c6d0caecdf" translate="yes" xml:space="preserve">
          <source>And we are done!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d4821f264f724822eee5ed15bd1dc2f4201faf" translate="yes" xml:space="preserve">
          <source>And we want to display different messages depending on if &lt;code&gt;author&lt;/code&gt; already has some books or not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdf794aeb2b23b094b3034c23079b99a98b7fe1" translate="yes" xml:space="preserve">
          <source>And when you need to reference scoped slots programmatically, they are now unified into the &lt;code&gt;$slots&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9af529f591ec25d3f2779afcadcc8505cb56cf" translate="yes" xml:space="preserve">
          <source>Angular (Formerly known as Angular 2)</source>
          <target state="translated">Angular(原名Angular 2)。</target>
        </trans-unit>
        <trans-unit id="4127a41ec2530d25dc05e74ba8d8ef42d6dfeb13" translate="yes" xml:space="preserve">
          <source>Angular essentially requires using TypeScript, given that almost all its documentation and learning resources are TypeScript-based. TypeScript has its benefits - static type checking can be very useful for large-scale applications, and can be a big productivity boost for developers with backgrounds in Java and C#.</source>
          <target state="translated">Angular基本上需要使用TypeScript,因为它的几乎所有文档和学习资源都是基于TypeScript的。TypeScript有它的好处--静态类型检查对于大型应用非常有用,对于有Java和C#背景的开发者来说,可以大大提升工作效率。</target>
        </trans-unit>
        <trans-unit id="e44881591b06fbc4a45833b87c07555b78e7ddd2" translate="yes" xml:space="preserve">
          <source>Angular&amp;rsquo;s learning curve is much steeper. The API surface of the framework is huge and as a user you will need to familiarize yourself with a lot more concepts before getting productive. The complexity of Angular is largely due to its design goal of targeting only large, complex applications - but that does make the framework a lot more difficult for less-experienced developers to pick up.</source>
          <target state="translated">Angular的学习曲线要​​陡峭得多。框架的API面很大，作为用户，您需要先熟悉很多概念，然后再进行生产。Angular的复杂性很大程度上是由于其设计目标仅针对大型，复杂的应用程序-但这确实使经验不足的开发人员更难以使用该框架。</target>
        </trans-unit>
        <trans-unit id="0bebd6505683a5460e20d1f583af41eb627ff410" translate="yes" xml:space="preserve">
          <source>AngularJS (Angular 1)</source>
          <target state="translated">AngularJS (Angular 1)</target>
        </trans-unit>
        <trans-unit id="f27be6768b82160617147c1127846e551b257da7" translate="yes" xml:space="preserve">
          <source>AngularJS has strong opinions about how your applications should be structured, while Vue is a more flexible, modular solution. While this makes Vue more adaptable to a wide variety of projects, we also recognize that sometimes it&amp;rsquo;s useful to have some decisions made for you, so that you can just start coding.</source>
          <target state="translated">AngularJS对应用程序的结构有强烈的意见，而Vue是一种更灵活的模块化解决方案。尽管这使Vue更适合各种项目，但我们也认识到有时为您做出一些决策很有用，这样您就可以开始编码了。</target>
        </trans-unit>
        <trans-unit id="0199e29cf3b3f4d7cda82c53037ac25108e233de" translate="yes" xml:space="preserve">
          <source>AngularJS uses two-way binding between scopes, while Vue enforces a one-way data flow between components. This makes the flow of data easier to reason about in non-trivial applications.</source>
          <target state="translated">AngularJS使用作用域之间的双向绑定,而Vue则强制执行组件之间的单向数据流。这使得数据流在非平凡的应用中更容易推理。</target>
        </trans-unit>
        <trans-unit id="89cdaaa526dab7508f980424466958d70c6ea504" translate="yes" xml:space="preserve">
          <source>Animating State with Watchers</source>
          <target state="translated">动画状态与观察者</target>
        </trans-unit>
        <trans-unit id="b9aac4781d928e3649da99bc1c240f932325f574" translate="yes" xml:space="preserve">
          <source>Animation at Work by Rachel Nabors (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd74d60df4081b77abb7e2348f1b1bf3d64777f" translate="yes" xml:space="preserve">
          <source>Annotating Props</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fe4216ab1a65fba7f939921a81d64835706feb" translate="yes" xml:space="preserve">
          <source>Annotating Return Types</source>
          <target state="translated">注释返回类型</target>
        </trans-unit>
        <trans-unit id="272b6c9e9dd12ac041b79affdb0bdc0271614af0" translate="yes" xml:space="preserve">
          <source>Annotating emits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac26fa78a26c835cdff8ea91702976f8d085d17" translate="yes" xml:space="preserve">
          <source>Another advantage of this approach is there will be times when debouncing isn&amp;rsquo;t quite the right wrapper function. For example, when hitting an API for search suggestions, waiting to offer suggestions until after the user has stopped typing for a period of time isn&amp;rsquo;t an ideal experience. What you probably want instead is a &lt;strong&gt;throttling&lt;/strong&gt; function. Now since you&amp;rsquo;re already using a utility library like lodash, refactoring to use its &lt;code&gt;throttle&lt;/code&gt; function instead takes only a few seconds.</source>
          <target state="translated">这种方法的另一个优点是，有时反跳功能并不是正确的包装函数。例如，当点击API搜索建议时，等到用户停止输入一段时间后才提供建议并不是理想的体验。您可能想要的是&lt;strong&gt;节流&lt;/strong&gt;功能。现在，由于您已经在使用lodash之类的实用程序库，因此重构重构仅需几秒钟即可使用其 &lt;code&gt;throttle&lt;/code&gt; 功能。</target>
        </trans-unit>
        <trans-unit id="d95d01a2555e47d48b056b1b9cc033076748074d" translate="yes" xml:space="preserve">
          <source>Another benefit of specifying a &lt;code&gt;name&lt;/code&gt; option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools (opens new window)&lt;/a&gt;, unnamed components will show up as &lt;code&gt;&amp;lt;AnonymousComponent&amp;gt;&lt;/code&gt;, which isn't very informative. By providing the &lt;code&gt;name&lt;/code&gt; option, you will get a much more informative component tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ca4d422cbd550db9e33ff6b547ff5cabe7506b" translate="yes" xml:space="preserve">
          <source>Another benefit of specifying a &lt;code&gt;name&lt;/code&gt; option is debugging. Named components result in more helpful warning messages. Also, when inspecting an app in the &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt;, unnamed components will show up as &lt;code&gt;&amp;lt;AnonymousComponent&amp;gt;&lt;/code&gt;, which isn&amp;rsquo;t very informative. By providing the &lt;code&gt;name&lt;/code&gt; option, you will get a much more informative component tree.</source>
          <target state="translated">指定 &lt;code&gt;name&lt;/code&gt; 选项的另一个好处是调试。命名的组件会产生更有用的警告消息。另外，当在&lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools中&lt;/a&gt;检查应用程序时，未命名的组件将显示为 &lt;code&gt;&amp;lt;AnonymousComponent&amp;gt;&lt;/code&gt; ，这不是很有用。通过提供 &lt;code&gt;name&lt;/code&gt; 选项，您将获得更多信息的组件树。</target>
        </trans-unit>
        <trans-unit id="31060b2f3ee14e175dd33ab59b19ad27c7e002ff" translate="yes" xml:space="preserve">
          <source>Another change that has been made from 2.x is that the &lt;code&gt;component&lt;/code&gt; option is now renamed to &lt;code&gt;loader&lt;/code&gt; in order to accurately communicate that a component definition cannot be provided directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5308008001fa5061e1f04723030a1ce8f47aa8b9" translate="yes" xml:space="preserve">
          <source>Another example is the &lt;code&gt;v-on&lt;/code&gt; directive, which listens to DOM events:</source>
          <target state="translated">另一个示例是 &lt;code&gt;v-on&lt;/code&gt; 指令，它侦听DOM事件：</target>
        </trans-unit>
        <trans-unit id="d1ecc65f67e6969ebcc8bbf972265b09018de544" translate="yes" xml:space="preserve">
          <source>Another important difference between these offerings is that Vue&amp;rsquo;s companion libraries for state management and routing (among &lt;a href=&quot;https://github.com/vuejs&quot;&gt;other concerns&lt;/a&gt;) are all officially supported and kept up-to-date with the core library. React instead chooses to leave these concerns to the community, creating a more fragmented ecosystem. Being more popular though, React&amp;rsquo;s ecosystem is considerably richer than Vue&amp;rsquo;s.</source>
          <target state="translated">这些产品之间的另一个重要区别是，Vue的状态管理和路由伴侣库（除&lt;a href=&quot;https://github.com/vuejs&quot;&gt;其他问题外&lt;/a&gt;）均得到正式支持，并与核心库保持最新。相反，React选择将这些问题留给社区，从而创建一个更加分散的生态系统。尽管更受欢迎，React的生态系统比Vue的生态系统丰富得多。</target>
        </trans-unit>
        <trans-unit id="279abeb88c89906481a812ea27f12adaee86a4e4" translate="yes" xml:space="preserve">
          <source>Another option for conditionally displaying an element is the &lt;code&gt;v-show&lt;/code&gt; directive. The usage is largely the same:</source>
          <target state="translated">有条件显示元素的另一个选项是 &lt;code&gt;v-show&lt;/code&gt; 指令。用法基本相同：</target>
        </trans-unit>
        <trans-unit id="3df284c618aa9b322bcba8cd186336d81e30b6b1" translate="yes" xml:space="preserve">
          <source>Another option is &lt;a href=&quot;https://nativescript-vue.org/&quot;&gt;NativeScript-Vue&lt;/a&gt;, a &lt;a href=&quot;https://www.nativescript.org/&quot;&gt;NativeScript&lt;/a&gt; plugin for building truly native applications using Vue.js.</source>
          <target state="translated">另一个选项是&lt;a href=&quot;https://nativescript-vue.org/&quot;&gt;NativeScript-Vue&lt;/a&gt;，这是一个&lt;a href=&quot;https://www.nativescript.org/&quot;&gt;NativeScript&lt;/a&gt;插件，用于使用Vue.js构建真正的本机应用程序。</target>
        </trans-unit>
        <trans-unit id="55460035a142e91591751fadc9b8306dd4a61e63" translate="yes" xml:space="preserve">
          <source>Another way of implementing &lt;code&gt;v-model&lt;/code&gt; within this component is to use the ability of &lt;code&gt;computed&lt;/code&gt; properties to define a getter and setter. The &lt;code&gt;get&lt;/code&gt; method should return the &lt;code&gt;modelValue&lt;/code&gt; property and the &lt;code&gt;set&lt;/code&gt; method should emit the corresponding event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01c2e1f17f76fd0637bdf50179307408d9d2e2f" translate="yes" xml:space="preserve">
          <source>Another way to define templates is inside of a script element with the type &lt;code&gt;text/x-template&lt;/code&gt;, then referencing the template by an id. For example:</source>
          <target state="translated">定义模板的另一种方法是在类型为 &lt;code&gt;text/x-template&lt;/code&gt; 的脚本元素内部，然后通过id引用模板。例如：</target>
        </trans-unit>
        <trans-unit id="cda3e49a97051d5db6b9d25a3a76956d585d8a46" translate="yes" xml:space="preserve">
          <source>Any number of objects can be passed, with properties from later arguments taking precedence. Event listeners are handled specially, as are &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt;, with the values of these properties being merged rather than overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2151d681dcbfc67a52e5624c98d86c82b4824c9" translate="yes" xml:space="preserve">
          <source>Any value that can be named might be useful to the view. For example, we might decide to display a message telling the user how much money they saved. We might also decide to calculate sales tax, but perhaps display it separately, rather than as part of the final price.</source>
          <target state="translated">任何可以命名的值都可能对视图有用。例如,我们可能决定显示一条消息,告诉用户他们节省了多少钱。我们也可以决定计算销售税,但也许要单独显示,而不是作为最终价格的一部分。</target>
        </trans-unit>
        <trans-unit id="e62b70f056a0f2de6c9c51efc819c923d57838d8" translate="yes" xml:space="preserve">
          <source>Apart from &lt;code&gt;el&lt;/code&gt;, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset&quot;&gt;dataset&lt;/a&gt;.</source>
          <target state="translated">除了 &lt;code&gt;el&lt;/code&gt; 之外，您应该将这些参数视为只读，并且永远不要修改它们。如果您需要跨钩子共享信息，建议通过element的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset&quot;&gt;dataset&lt;/a&gt;进行共享。</target>
        </trans-unit>
        <trans-unit id="ac01b66a4dd4a5c91e508f5f329a0f261f143434" translate="yes" xml:space="preserve">
          <source>Apart from &lt;code&gt;el&lt;/code&gt;, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset&quot;&gt;dataset (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d299c0f48f39d2b0feb39ddbb1885486785bc4c" translate="yes" xml:space="preserve">
          <source>Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:</source>
          <target state="translated">除了在论坛和聊天中答疑解惑、分享资源外,还有其他一些不太明显的方式来分享和拓展自己的知识。</target>
        </trans-unit>
        <trans-unit id="6c651848ddbd4b45cea72e46e079db8a67dbfce4" translate="yes" xml:space="preserve">
          <source>Application &amp;amp; Component Instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130186466296873e864ae9570b1660269fdac9ac" translate="yes" xml:space="preserve">
          <source>Application API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f152c5c396a75113ff2b13176410f1a2dc0cddb" translate="yes" xml:space="preserve">
          <source>Application Config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2786f44001e34d7e193a25679dd76ea16e9672fa" translate="yes" xml:space="preserve">
          <source>Apply a global &lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;envify (opens new window)&lt;/a&gt; transform to your bundle. This allows the minifier to strip out all the warnings in Vue's source code wrapped in env variable conditional blocks. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd6b99bbdb5d0bd3b9a45910d4fa7d7b8dd9d8a" translate="yes" xml:space="preserve">
          <source>Apply a global &lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;envify&lt;/a&gt; transform to your bundle.</source>
          <target state="translated">将全局&lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;envify&lt;/a&gt;转换应用于您的包。</target>
        </trans-unit>
        <trans-unit id="757dea009fa74f7bf6dcb184ed31259ffcbc037f" translate="yes" xml:space="preserve">
          <source>Apply a global &lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;envify&lt;/a&gt; transform to your bundle. This allows the minifier to strip out all the warnings in Vue&amp;rsquo;s source code wrapped in env variable conditional blocks. For example:</source>
          <target state="translated">将全局&lt;a href=&quot;https://github.com/hughsk/envify&quot;&gt;envify&lt;/a&gt;转换应用于您的包。这使Minifier可以去除包装在env可变条件块中的Vue源代码中的所有警告。例如：</target>
        </trans-unit>
        <trans-unit id="403327cdfd6455034e7a5903a902c785cc738a89" translate="yes" xml:space="preserve">
          <source>Apply a mixin globally, which affects every Vue instance created afterwards. This can be used by plugin authors to inject custom behavior into components. &lt;strong&gt;Not recommended in application code&lt;/strong&gt;.</source>
          <target state="translated">全局应用mixin，这会影响以后创建的每个Vue实例。插件作者可以使用此方法将自定义行为注入组件。&lt;strong&gt;不建议在应用程序代码中使用&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6943d4aabc589dae21e58eeae637038cbb3955d2" translate="yes" xml:space="preserve">
          <source>Apply a mixin in the whole application scope. Once registered they can be used in the template of any component within the current application. This can be used by plugin authors to inject custom behavior into components. &lt;strong&gt;Not recommended in application code&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4735ef213d3d24765c464d6cd890777f7cf436c" translate="yes" xml:space="preserve">
          <source>Arbitrary Route Properties &lt;sup&gt;replaced&lt;/sup&gt;</source>
          <target state="translated">任意路线属性已&lt;sup&gt;替换&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="267ad5229d54ec1973232c405c353b0796523fe6" translate="yes" xml:space="preserve">
          <source>Arbitrary route properties must now be scoped under the new meta property, to avoid conflicts with future features. So for example, if you had defined:</source>
          <target state="translated">现在,任意路径属性必须在新的元属性下进行扩展,以避免与未来的功能发生冲突。例如,如果你定义了</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="ff66cc6d677ef24332635378ca4342dd60d4f561" translate="yes" xml:space="preserve">
          <source>Array Change Detection</source>
          <target state="translated">阵列变化检测</target>
        </trans-unit>
        <trans-unit id="708e0f765f5d842c0a59b838022e6e808b06e5a7" translate="yes" xml:space="preserve">
          <source>Array Syntax</source>
          <target state="translated">阵列语法</target>
        </trans-unit>
        <trans-unit id="431cfc33d593378c19117ccdb64404a678a59458" translate="yes" xml:space="preserve">
          <source>As a result, once we click the button to open the modal, Vue will correctly render the modal's content as a child of the &lt;code&gt;body&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7d3458f0a0c3aac7529c4d1387ffdaf4ba0be7" translate="yes" xml:space="preserve">
          <source>As a result, the only remaining use case for functional components is simple components, such as a component to create a dynamic heading. Otherwise, it is recommended to use stateful components as you normally would.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53469dec094904e072eb3488a323f3d2d279b1c" translate="yes" xml:space="preserve">
          <source>As a result, this means that &lt;code&gt;config.keyCodes&lt;/code&gt; is now also deprecated and will no longer be supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab524c1211c73bf04858502f22ef0470f4d2fb6" translate="yes" xml:space="preserve">
          <source>As a rule, remember that:</source>
          <target state="translated">一般来说,记住这一点。</target>
        </trans-unit>
        <trans-unit id="b059cf6741c0409285deffd2e281e5839db913a8" translate="yes" xml:space="preserve">
          <source>As an example, we&amp;rsquo;ll now walk the migration of a two-way currency filter:</source>
          <target state="translated">作为示例，我们现在将逐步介绍双向货币过滤器的迁移：</target>
        </trans-unit>
        <trans-unit id="c7dad05163db61d51ef343a96c387115e0e4b67a" translate="yes" xml:space="preserve">
          <source>As for Vuex, even version 0.8 is compatible with Vue 2, so you&amp;rsquo;re not forced to upgrade. The only reason you may want to upgrade immediately is to take advantage of the new features in Vuex 2, such as modules and reduced boilerplate.</source>
          <target state="translated">对于Vuex，甚至0.8版也与Vue 2兼容，因此您不必强制升级。您可能要立即升级的唯一原因是要利用Vuex 2中的新功能，例如模块和简化的样板。</target>
        </trans-unit>
        <trans-unit id="af69a0700c77f9910c08f70bc1ad9fd3da6ce652" translate="yes" xml:space="preserve">
          <source>As for the &lt;code&gt;$&lt;/code&gt; prefix, its purpose within the Vue ecosystem is special instance properties that are exposed to the user, so using it for &lt;em&gt;private&lt;/em&gt; properties would not be appropriate.</source>
          <target state="translated">至于 &lt;code&gt;$&lt;/code&gt; 前缀，其在Vue生态系统中的用途是向用户公开的特殊实例属性，因此将其用于&lt;em&gt;私有&lt;/em&gt;属性是不合适的。</target>
        </trans-unit>
        <trans-unit id="8928a0eece301fdb8d986f28f6779f52d5b80d8c" translate="yes" xml:space="preserve">
          <source>As it&amp;rsquo;s transitioning between the &amp;ldquo;on&amp;rdquo; button and the &amp;ldquo;off&amp;rdquo; button, both buttons are rendered - one transitioning out while the other transitions in. This is the default behavior of &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; - entering and leaving happens simultaneously.</source>
          <target state="translated">当它在&amp;ldquo;打开&amp;rdquo;按钮和&amp;ldquo;关闭&amp;rdquo;按钮之间转换时，两个按钮都被渲染-一个过渡到另一个过渡到另一个。这是 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 的默认行为-进入和离开同时发生。</target>
        </trans-unit>
        <trans-unit id="6a58968f69a702436c24ef2d010ce2409c77d155" translate="yes" xml:space="preserve">
          <source>As it's transitioning between the &quot;on&quot; button and the &quot;off&quot; button, both buttons are rendered - one transitioning out while the other transitions in. This is the default behavior of &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; - entering and leaving happens simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4317b45147929e0ddbe9426f277343959730df" translate="yes" xml:space="preserve">
          <source>As of v4.5.0, &lt;code&gt;vue-cli&lt;/code&gt; now provides the built-in option to choose Vue 3 when creating a new project. You can upgrade &lt;code&gt;vue-cli&lt;/code&gt; and run &lt;code&gt;vue create&lt;/code&gt; to create a Vue 3 project today.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d926c9870beb71dbe5afe4d5a4aec59ff016a79" translate="yes" xml:space="preserve">
          <source>As our component grows, it&amp;rsquo;s likely we&amp;rsquo;ll not only need the title and content of a post, but also the published date, comments, and more. Defining a prop for each related piece of information could become very annoying:</source>
          <target state="translated">随着组件的增长，我们不仅需要帖子的标题和内容，还需要发布日期，评论等。为每个相关信息定义一个道具可能会变得很烦人：</target>
        </trans-unit>
        <trans-unit id="301a8e1a96b0efb19480a241d8d5495a88e81d7c" translate="yes" xml:space="preserve">
          <source>As promised, we can also use preprocessors such as Pug, Babel (with ES2015 modules), and Stylus for cleaner and more feature-rich components.</source>
          <target state="translated">正如承诺的那样,我们还可以使用Pug、Babel(带ES2015模块)和Stylus等预处理器来实现更干净、功能更丰富的组件。</target>
        </trans-unit>
        <trans-unit id="a1b03d167387b5605a0a6bb9bbf2ea7dda59e896" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;use&lt;/code&gt; global API is no longer available in Vue 3, this method will cease to work and calling &lt;code&gt;Vue.use()&lt;/code&gt; will now trigger a warning. Instead, the end-user will now have to explicitly specify using the plugin on the app instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93822eb668e20b3a72d64366b15044afe31b739b" translate="yes" xml:space="preserve">
          <source>As we continue developing the convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we eventually arrive at the &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt; architecture. The benefit of this convention is we can record all state mutations happening to the store and implement advanced debugging helpers such as mutation logs, snapshots, and history re-rolls / time travel.</source>
          <target state="translated">随着我们继续发展约定，从不允许组件直接改变属于商店的状态，而是应该调度通知商店执行操作的事件，我们最终到达了&lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt;体系结构。这种约定的好处是，我们可以记录存储中发生的所有状态突变，并实现高级调试助手，例如突变日志，快照和历史记录重新滚动/时间旅行。</target>
        </trans-unit>
        <trans-unit id="8f2b534877ec67503d1817cd697302690f576a7e" translate="yes" xml:space="preserve">
          <source>As we continue developing the convention, where components are never allowed to directly mutate state that belongs to a store but should instead dispatch events that notify the store to perform actions, we eventually arrive at the &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux (opens new window)&lt;/a&gt; architecture. The benefit of this convention is we can record all state mutations happening to the store and implement advanced debugging helpers such as mutation logs, snapshots, and history re-rolls / time travel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e429605ef74fa34ab46a6d4e088182aea98e60a9" translate="yes" xml:space="preserve">
          <source>As we develop our &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; component, some features may require communicating back up to the parent. For example, we may decide to include an accessibility feature to enlarge the text of blog posts, while leaving the rest of the page its default size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a95384968f4932d7b5246463d0cff519b6a7b61" translate="yes" xml:space="preserve">
          <source>As we develop our &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; component, some features may require communicating back up to the parent. For example, we may decide to include an accessibility feature to enlarge the text of blog posts, while leaving the rest of the page its default size:</source>
          <target state="translated">在开发 &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; 组件时，某些功能可能需要与父级进行通信。例如，我们可能决定包括一个辅助功能，以扩大博客文章的文本，而将页面的其余部分保留为默认大小：</target>
        </trans-unit>
        <trans-unit id="677aa42cad19e243a5a406552c9cdef36f36b15d" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;component-props#prop-casing-camelcase-vs-kebab-case&quot;&gt;props casing&lt;/a&gt;, we recommend using kebab-cased event listeners when you are using in-DOM templates. If you're using string templates, this limitation does not apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a3f74af5652088551ae51dbeff194fa3bfa2e1" translate="yes" xml:space="preserve">
          <source>As with Vue&amp;rsquo;s transition components, the data backing state transitions can be updated in real time, which is especially useful for prototyping! Even using a simple SVG polygon, you can achieve many effects that would be difficult to conceive of until you&amp;rsquo;ve played with the variables a little.</source>
          <target state="translated">与Vue的转换组件一样，数据支持状态转换可以实时更新，这对于原型制作特别有用！即使使用简单的SVG多边形，也可以实现许多难以想象的效果，除非您对变量稍加操作。</target>
        </trans-unit>
        <trans-unit id="446bdcb2288872778b17c550ae95ceda0f03e6a4" translate="yes" xml:space="preserve">
          <source>As with Vue's transition components, the data backing state transitions can be updated in real time, which is especially useful for prototyping! Even using a simple SVG polygon, you can achieve many effects that would be difficult to conceive of until you've played with the variables a little.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44e77060c27c4b30c454259c170d12f7db1f1bf" translate="yes" xml:space="preserve">
          <source>As with any project, there are rules to contributing. To ensure that we can help you or accept your pull request as quickly as possible, please read &lt;a href=&quot;https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md&quot;&gt;the contributing guide&lt;/a&gt;.</source>
          <target state="translated">与任何项目一样，有贡献的规则。为确保我们能尽快为您提供帮助或接受您的拉取请求，请阅读&lt;a href=&quot;https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md&quot;&gt;投稿指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4277c9ab681082594a6c686adbf5a2ea751b7cf3" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;code&gt;v-model&lt;/code&gt;&amp;lsquo;s two-way binding doesn&amp;rsquo;t make sense here. Setting &lt;code&gt;str&lt;/code&gt; to another value in the iterator function will do nothing because it&amp;rsquo;s only a local variable in the function scope.</source>
          <target state="translated">如您所见， &lt;code&gt;v-model&lt;/code&gt; 的双向绑定在这里没有意义。在迭代器函数中将 &lt;code&gt;str&lt;/code&gt; 设置为另一个值将无济于事，因为它只是函数范围内的局部变量。</target>
        </trans-unit>
        <trans-unit id="f86f35da8609362873eeac8961d84a1980af67be" translate="yes" xml:space="preserve">
          <source>As you can see, in the console we have &lt;code&gt;toVal&lt;/code&gt; and &lt;code&gt;fromVal&lt;/code&gt; printed first from the mixin and then from the &lt;code&gt;app&lt;/code&gt;. We always return &lt;code&gt;fromVal&lt;/code&gt; if it exists, that's why &lt;code&gt;this.$options.custom&lt;/code&gt; is set to &lt;code&gt;hello!&lt;/code&gt; in the end. Let's try to change a strategy to &lt;em&gt;always return a value from the child instance&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e217a3fa103d696c6e74b9f87eab8bc71775c3" translate="yes" xml:space="preserve">
          <source>As you can see, the factory function receives a &lt;code&gt;resolve&lt;/code&gt; callback, which should be called when you have retrieved your component definition from the server. You can also call &lt;code&gt;reject(reason)&lt;/code&gt; to indicate the load has failed. The &lt;code&gt;setTimeout&lt;/code&gt; here is for demonstration; how to retrieve the component is up to you. One recommended approach is to use async components together with &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;Webpack&amp;rsquo;s code-splitting feature&lt;/a&gt;:</source>
          <target state="translated">如您所见，factory函数接收一个 &lt;code&gt;resolve&lt;/code&gt; 回调，当您从服务器中检索组件定义时应调用该回调。您也可以调用 &lt;code&gt;reject(reason)&lt;/code&gt; 来指示加载失败。这里的 &lt;code&gt;setTimeout&lt;/code&gt; 用于演示；如何检索组件由您决定。一种推荐的方法是将异步组件与&lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;Webpack的代码拆分功能&lt;/a&gt;一起使用：</target>
        </trans-unit>
        <trans-unit id="b4469fc4946675eb3b52eefc4e1deae0b0ecd5e5" translate="yes" xml:space="preserve">
          <source>As you can see, this method accepts a factory function returning a &lt;code&gt;Promise&lt;/code&gt;. Promise's &lt;code&gt;resolve&lt;/code&gt; callback should be called when you have retrieved your component definition from the server. You can also call &lt;code&gt;reject(reason)&lt;/code&gt; to indicate the load has failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b27b282e2f1a441686dd2390d9c4cdad9154bb2" translate="yes" xml:space="preserve">
          <source>As you might notice, it&amp;rsquo;s quite difficult to see which components are specific to the search. Now let&amp;rsquo;s rename the components according to the rule:</source>
          <target state="translated">您可能会注意到，要查看特定于搜索的组件非常困难。现在，根据规则重新命名组件：</target>
        </trans-unit>
        <trans-unit id="2fe222c6b4525a2e2ce18af955716bf84e80eb11" translate="yes" xml:space="preserve">
          <source>As you might notice, it's quite difficult to see which components are specific to the search. Now let's rename the components according to the rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7c8cb3256126ff26063df02fbf5c2d122e806e" translate="yes" xml:space="preserve">
          <source>As you&amp;rsquo;ll see above, we just add the slot where we want it to go &amp;ndash; and that&amp;rsquo;s it. We&amp;rsquo;re done!</source>
          <target state="translated">正如您将在上面看到的那样，我们仅将插槽添加到想要的位置即可，仅此而已。大功告成！</target>
        </trans-unit>
        <trans-unit id="d8d904d21af5959a36aa96381ac7c16a0b15261b" translate="yes" xml:space="preserve">
          <source>As you'll see above, we use the &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; as a placeholder where we want the content to go &amp;ndash; and that's it. We're done!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245bafa0153d44f38f0fe4e7da9cafd1e866bd32" translate="yes" xml:space="preserve">
          <source>Asserting Asynchronous Updates</source>
          <target state="translated">断言异步更新</target>
        </trans-unit>
        <trans-unit id="20e338624cee29d0effead85b0dd0e70de783b4c" translate="yes" xml:space="preserve">
          <source>Assets</source>
          <target state="translated">Assets</target>
        </trans-unit>
        <trans-unit id="c20e3e21906793ff78c0157e3834f5147fd7b664" translate="yes" xml:space="preserve">
          <source>Assign a custom handler for runtime Vue warnings. Note this only works during development and is ignored in production.</source>
          <target state="translated">为运行时的Vue警告指定一个自定义处理程序。请注意,这只在开发过程中有效,在生产过程中会被忽略。</target>
        </trans-unit>
        <trans-unit id="b7dd9120ca91c830c9b578fa32779c54df5b7b8e" translate="yes" xml:space="preserve">
          <source>Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the Vue instance.</source>
          <target state="translated">在组件渲染函数和监视器中为未捕获的错误指定一个处理程序。该处理程序将与错误和Vue实例一起被调用。</target>
        </trans-unit>
        <trans-unit id="846dc727c271fbbb5ae9eec199042602f69ec1a1" translate="yes" xml:space="preserve">
          <source>Assign a handler for uncaught errors during component render function and watchers. The handler gets called with the error and the application instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3516207bfa9fc802e7d99d2554ea8842f8c370" translate="yes" xml:space="preserve">
          <source>Assistive Technologies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f65677a6f8971fcdedcedabf6d1fc56a644736c" translate="yes" xml:space="preserve">
          <source>Async Components</source>
          <target state="translated">异步组件</target>
        </trans-unit>
        <trans-unit id="582e6084935f72aceab9de2dba0ee5645c7f04b5" translate="yes" xml:space="preserve">
          <source>Async Update Queue</source>
          <target state="translated">异步更新尾巴</target>
        </trans-unit>
        <trans-unit id="ab96635c745b58b85be2f676dc6a76f3e4a4221c" translate="yes" xml:space="preserve">
          <source>Async components are &lt;em&gt;suspensible&lt;/em&gt; by default. This means if it has a &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; in the parent chain, it will be treated as an async dependency of that &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt;. In this case, the loading state will be controlled by the &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt;, and the component's own loading, error, delay and timeout options will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ede0302fd6bc787b31fdcb73791ef595fb98b3" translate="yes" xml:space="preserve">
          <source>Async components now require &lt;code&gt;defineAsyncComponent&lt;/code&gt; method to be created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad87d6e8c00b32fa186c27488e91c838a266b3b" translate="yes" xml:space="preserve">
          <source>Async is now required for rendering performance.</source>
          <target state="translated">现在渲染性能需要异步。</target>
        </trans-unit>
        <trans-unit id="66da5414bc3e62fe79d78edfd1fc4676709e0d5b" translate="yes" xml:space="preserve">
          <source>At the core of Vue.js is a system that enables us to declaratively render data to the DOM using straightforward template syntax:</source>
          <target state="translated">Vue.js的核心是一个系统,它使我们能够使用直接的模板语法声明性地将数据渲染到DOM中。</target>
        </trans-unit>
        <trans-unit id="8d4a475bf74fd33040278d881bd3eae2ccb03e6c" translate="yes" xml:space="preserve">
          <source>At the very least, you&amp;rsquo;ll want to include the post&amp;rsquo;s content:</source>
          <target state="translated">至少，您需要包含帖子的内容：</target>
        </trans-unit>
        <trans-unit id="fd25e6ff7eedb72d30f8f53d41ba4a9b33bf7f4a" translate="yes" xml:space="preserve">
          <source>At this moment, Weex is still in active development and is not as mature and battle-tested as React Native, but its development is driven by the production needs of the largest e-commerce business in the world, and the Vue team will also actively collaborate with the Weex team to ensure a smooth experience for Vue developers.</source>
          <target state="translated">目前,Weex还在积极开发中,虽然没有React Native那么成熟和实战,但它的开发是由全球最大的电商企业的生产需求所驱动的,Vue团队也会积极与Weex团队合作,以保证Vue开发者的顺利体验。</target>
        </trans-unit>
        <trans-unit id="2ae82b5d7365e10184a3d194c06da7efdb526826" translate="yes" xml:space="preserve">
          <source>At this point you probably already know the drill, so let&amp;rsquo;s skip to the end and migrate the leftover filtering functionality. We don&amp;rsquo;t really need to get into the implementation details as it&amp;rsquo;s not the point of this guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5419a18af94811377577a489eb8cec03778592a5" translate="yes" xml:space="preserve">
          <source>At this point, the template is no longer simple and declarative. You have to look at it for a second before realizing that it displays &lt;code&gt;message&lt;/code&gt; in reverse. The problem is made worse when you want to include the reversed message in your template more than once.</source>
          <target state="translated">此时，模板不再是简单和声明性的。您必须先查看一下，然后才能意识到它会反向显示 &lt;code&gt;message&lt;/code&gt; 。当您想在模板中多次包含反向消息时，问题将变得更加严重。</target>
        </trans-unit>
        <trans-unit id="a8aa3b3c574faa254ff30f4af5d773750b2a8ccc" translate="yes" xml:space="preserve">
          <source>At this point, the template is no longer simple and declarative. You have to look at it for a second before realizing that it performs a calculation depending on &lt;code&gt;author.books&lt;/code&gt;. The problem is made worse when you want to include this calculation in your template more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282508b59fa6f1279fded58d092f544b220e4742" translate="yes" xml:space="preserve">
          <source>Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.</source>
          <target state="translated">为元素附加一个事件监听器。事件类型由参数表示。表达式可以是方法名、内联语句,如果有修饰符,则省略。</target>
        </trans-unit>
        <trans-unit id="8f8647b29ded8c6aa47aa4b9ca700c81275a5426" translate="yes" xml:space="preserve">
          <source>Attempting to check for changes of properties in a deeply nested object or array will still require the &lt;code&gt;deep&lt;/code&gt; option to be true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="5755695133197f383f55fe6a165f21b2ad0c3c16" translate="yes" xml:space="preserve">
          <source>Attribute Coercion Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c991694965b0f231085d1352058af6d1c20ccc5" translate="yes" xml:space="preserve">
          <source>Attribute Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa31a131805ede2ba027883a1f2407c6a5c7793f" translate="yes" xml:space="preserve">
          <source>Attribute Inheritance on Multiple Root Nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="2d1447b83b4b4f812b2b940155f5db517c72245a" translate="yes" xml:space="preserve">
          <source>Attributes bound to a &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element are called &lt;strong&gt;slot props&lt;/strong&gt;. Now, in the parent scope, we can use &lt;code&gt;v-slot&lt;/code&gt; with a value to define a name for the slot props we&amp;rsquo;ve been provided:</source>
          <target state="translated">绑定到 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素的属性称为&lt;strong&gt;slot props&lt;/strong&gt;。现在，在父级作用域中，我们可以使用带有值的 &lt;code&gt;v-slot&lt;/code&gt; 来定义所提供的插槽道具的名称：</target>
        </trans-unit>
        <trans-unit id="84a37dbdd5aed3065f50c5bbddaedcd842ae2b91" translate="yes" xml:space="preserve">
          <source>Attributes bound to a &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element are called &lt;strong&gt;slot props&lt;/strong&gt;. Now, in the parent scope, we can use &lt;code&gt;v-slot&lt;/code&gt; with a value to define a name for the slot props we've been provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992e4bbe51b2e7365584c6a1a46ab551923a68d8" translate="yes" xml:space="preserve">
          <source>Attributes coercion strategy changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0459983436456e9881a22198841fc54994764174" translate="yes" xml:space="preserve">
          <source>Attributes in &lt;code&gt;$attrs&lt;/code&gt; are no longer automatically added to the root element, leaving it to the developer to decide where to add them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6784f96c452a0c7bc91364bfd3f389e53aeacd0d" translate="yes" xml:space="preserve">
          <source>Augmenting Types for Use with Plugins</source>
          <target state="translated">增强类型,以便与插件一起使用</target>
        </trans-unit>
        <trans-unit id="c827e43d1c41fb3949b8ae5df02f4e522baf0305" translate="yes" xml:space="preserve">
          <source>Authoring Tool Accessibility Guidelines (ATAG) (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d277414317dcbde6c548c863a000f272b2ba1b" translate="yes" xml:space="preserve">
          <source>Auto-prefixing</source>
          <target state="translated">Auto-prefixing</target>
        </trans-unit>
        <trans-unit id="8480e807d8afb131491cf0856a67ff1f4d11a3a3" translate="yes" xml:space="preserve">
          <source>Automated Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62f264454fa035298bd4525a87eab2e74959394" translate="yes" xml:space="preserve">
          <source>Automatic Global Registration of Base Components</source>
          <target state="translated">基础部件的全球自动注册</target>
        </trans-unit>
        <trans-unit id="d5811d62e717b2d7a44720d5443324bf72b9662e" translate="yes" xml:space="preserve">
          <source>Autonomous Custom Elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fada8c65210fc29160102a7e4e88dbb24309041" translate="yes" xml:space="preserve">
          <source>Avoid &lt;code&gt;v-if&lt;/code&gt; with &lt;code&gt;v-for&lt;/code&gt;&lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">避免 &lt;code&gt;v-if&lt;/code&gt; 用 &lt;code&gt;v-for&lt;/code&gt; &lt;sup&gt;必要&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="c6cd7e6129cb702932bff65fb9661126f68211bd" translate="yes" xml:space="preserve">
          <source>Avoid using placeholders as they can confuse many users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677c52df1b8d2a0a67237f2cc1537f7da03218f1" translate="yes" xml:space="preserve">
          <source>Avoid v-if with v-for</source>
          <target state="translated">避免v-if与v-for</target>
        </trans-unit>
        <trans-unit id="c52d0351c06571b65129935f4c84f34fb5940839" translate="yes" xml:space="preserve">
          <source>Back to our example, let's create a reactive &lt;code&gt;repositories&lt;/code&gt; variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="be7e10d1c5dd2ad77f6d5a617372a7bf013cb7bf" translate="yes" xml:space="preserve">
          <source>Bad</source>
          <target state="translated">Bad</target>
        </trans-unit>
        <trans-unit id="042fd1df7a4a13c0287f65bf8289380a720a781f" translate="yes" xml:space="preserve">
          <source>Base Example</source>
          <target state="translated">基础实例</target>
        </trans-unit>
        <trans-unit id="ed5305a1a3c7ea2038ed6b0922e96b3a5d1d42ab" translate="yes" xml:space="preserve">
          <source>Base component names</source>
          <target state="translated">基本组件名称</target>
        </trans-unit>
        <trans-unit id="afb696d8130130ecabb5326a69e2eb71d47369d7" translate="yes" xml:space="preserve">
          <source>Base component names &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;基本组件名称&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">基本示例</target>
        </trans-unit>
        <trans-unit id="bbf61c9d812772ea35cf603e7164154bde0b32d5" translate="yes" xml:space="preserve">
          <source>Basic Reactivity APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本使用方法</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="2fbd5ba03b81757d77bfd8f406e44d25ef0312f6" translate="yes" xml:space="preserve">
          <source>Basics of Composition API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbf3c729056bf3f76dc2c04caed458d2d3f6887" translate="yes" xml:space="preserve">
          <source>Be more specific about what state should trigger the watcher to re-run;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf9ea44ab59181a8666caafd4a3e3d084bebdae" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;setup&lt;/code&gt; is run around the &lt;code&gt;beforeCreate&lt;/code&gt; and &lt;code&gt;created&lt;/code&gt; lifecycle hooks, you do not need to explicitly define them. In other words, any code that would be written inside those hooks should be written directly in the &lt;code&gt;setup&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc019e851603df6ba175b433b3fe2a1197430af" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;v-if&lt;/code&gt; is a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can use &lt;code&gt;v-if&lt;/code&gt; on a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, which serves as an invisible wrapper. The final rendered result will not include the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">由于 &lt;code&gt;v-if&lt;/code&gt; 是指令，因此必须将其附加到单个元素。但是，如果我们要切换多个元素怎么办？在这种情况下，我们可以在 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 元素上使用 &lt;code&gt;v-if&lt;/code&gt; ，它用作不可见的包装器。最终呈现的结果将不包含 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="fb0dc0725f59ff24b2ec784f60eede2c055c6414" translate="yes" xml:space="preserve">
          <source>Because of a &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/38845&quot;&gt;design limitation (opens new window)&lt;/a&gt; in TypeScript when it comes to type inference of function expressions, you have to be careful with &lt;code&gt;validators&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; values for objects and arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a372bf443e6b55ba392d12b1ef28e77d0fe75e24" translate="yes" xml:space="preserve">
          <source>Because of the circular nature of Vue&amp;rsquo;s declaration files, TypeScript may have difficulties inferring the types of certain methods. For this reason, you may need to annotate the return type on methods like &lt;code&gt;render&lt;/code&gt; and those in &lt;code&gt;computed&lt;/code&gt;.</source>
          <target state="translated">由于Vue声明文件的循环性质，TypeScript可能难以推断某些方法的类型。出于这个原因，您可能需要在诸如 &lt;code&gt;render&lt;/code&gt; 之类的方法上的注释返回值和在 &lt;code&gt;computed&lt;/code&gt; 方法的注释类型。</target>
        </trans-unit>
        <trans-unit id="139a35ae0b306d90f72a646c330a37c8e32695d4" translate="yes" xml:space="preserve">
          <source>Because of the circular nature of Vue&amp;rsquo;s declaration files, TypeScript may have difficulties inferring the types of computed. For this reason, you may need to annotate the return type of computed properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871f81427d357a492d238d81b8d955f6bcc45a9a" translate="yes" xml:space="preserve">
          <source>Because the component instance is not yet created when &lt;code&gt;setup&lt;/code&gt; is executed, there is no &lt;code&gt;this&lt;/code&gt; inside a &lt;code&gt;setup&lt;/code&gt; option. This means, with the exception of &lt;code&gt;props&lt;/code&gt;, you won't be able to access any properties declared in the component &amp;ndash; &lt;strong&gt;local state&lt;/strong&gt;, &lt;strong&gt;computed properties&lt;/strong&gt; or &lt;strong&gt;methods&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d354e1f0395c2c7bde80f3d0635afd447b1534e" translate="yes" xml:space="preserve">
          <source>Become a Community Leader</source>
          <target state="translated">成为社区领袖</target>
        </trans-unit>
        <trans-unit id="55afcdde181ce3a9452e5047a10f6b50159b446a" translate="yes" xml:space="preserve">
          <source>Before v2.1.8, we had two transition classes for each transition direction: initial and active states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799bed431f75d62e2ee7199cced467223a9ef08b" translate="yes" xml:space="preserve">
          <source>Before we dive into render functions, it&amp;rsquo;s important to know a little about how browsers work. Take this HTML for example:</source>
          <target state="translated">在深入研究渲染功能之前，重要的一点是要了解浏览器的工作方式。以以下HTML为例：</target>
        </trans-unit>
        <trans-unit id="f9e94c53c5aed844febb6a90128d5a6fb0a5085d" translate="yes" xml:space="preserve">
          <source>Behind the scenes, templates use &lt;code&gt;resolveDynamicComponent&lt;/code&gt; to implement the &lt;code&gt;is&lt;/code&gt; attribute. We can use the same function if we need all the flexibility provided by &lt;code&gt;is&lt;/code&gt; in our &lt;code&gt;render&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fefc2aed895fea23a9fcaa8f08933e083c11cd" translate="yes" xml:space="preserve">
          <source>Being so similar in scope, we&amp;rsquo;ve put more time into fine-tuning this comparison than any other. We want to ensure not only technical accuracy, but also balance. We point out where React outshines Vue, for example in the richness of their ecosystem and abundance of their custom renderers.</source>
          <target state="translated">由于范围如此相似，我们比其他任何时间都花了更多的时间来微调此比较。我们不仅要确保技术准确性，还要确保平衡。我们指出了React在Vue方面的优势，例如在其生态系统的丰富性和自定义渲染器的丰富性方面。</target>
        </trans-unit>
        <trans-unit id="bd6db4741fd073ae0a7d8447883e2b90ecb5347c" translate="yes" xml:space="preserve">
          <source>Below is a diagram for the instance lifecycle. You don&amp;rsquo;t need to fully understand everything going on right now, but as you learn and build more, it will be a useful reference.</source>
          <target state="translated">下面是实例生命周期的图表。您不需要完全了解当前发生的一切，但是随着您学习和构建更多内容，它将成为有用的参考。</target>
        </trans-unit>
        <trans-unit id="cc1280e6b9b97054a2028ddc4d9c5df4ef575b27" translate="yes" xml:space="preserve">
          <source>Below is a diagram for the instance lifecycle. You don't need to fully understand everything going on right now, but as you learn and build more, it will be a useful reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235d0b8767114f70c53f2b4e152b46e080f3734e" translate="yes" xml:space="preserve">
          <source>Below is an example of our &lt;code&gt;capitalize&lt;/code&gt; filter being used:</source>
          <target state="translated">以下是使用大 &lt;code&gt;capitalize&lt;/code&gt; 滤器的示例：</target>
        </trans-unit>
        <trans-unit id="118c169de4184a1a92bb4146dfa31b6b77e2b0aa" translate="yes" xml:space="preserve">
          <source>Better performance. Riot &lt;a href=&quot;http://riotjs.com/compare/#virtual-dom-vs-expressions-binding&quot;&gt;traverses a DOM tree&lt;/a&gt; rather than using a virtual DOM, so suffers from the same performance issues as AngularJS.</source>
          <target state="translated">更好的性能。Riot &lt;a href=&quot;http://riotjs.com/compare/#virtual-dom-vs-expressions-binding&quot;&gt;遍历DOM树&lt;/a&gt;而不是使用虚拟DOM，因此遇到了与AngularJS相同的性能问题。</target>
        </trans-unit>
        <trans-unit id="ae2c0a84c2ea1d6b5e9539d414cc3dd5fd955525" translate="yes" xml:space="preserve">
          <source>Beyond a console log, we could do anything here we wish. We could even &lt;em&gt;not&lt;/em&gt; return the real value if we wanted to. This is what makes Proxies so powerful for creating APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009817effc0ffc4d86c347b50db0aff9a2aea858" translate="yes" xml:space="preserve">
          <source>Beyond the &lt;code&gt;scoped&lt;/code&gt; attribute, using unique class names can help ensure that 3rd-party CSS does not apply to your own HTML. For example, many projects use the &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;btn&lt;/code&gt;, or &lt;code&gt;icon&lt;/code&gt; class names, so even if not using a strategy such as BEM, adding an app-specific and/or component-specific prefix (e.g. &lt;code&gt;ButtonClose-icon&lt;/code&gt;) can provide some protection.</source>
          <target state="translated">除了 &lt;code&gt;scoped&lt;/code&gt; 属性，使用唯一的类名可以帮助确保第三方CSS不适用于您自己的HTML。例如，许多项目使用 &lt;code&gt;button&lt;/code&gt; ， &lt;code&gt;btn&lt;/code&gt; 或 &lt;code&gt;icon&lt;/code&gt; 类名称，因此即使不使用BEM之类的策略，添加特定于应用程序和/或特定于组件的前缀（例如 &lt;code&gt;ButtonClose-icon&lt;/code&gt; ）也可以提供一些保护。</target>
        </trans-unit>
        <trans-unit id="515a429282336e463c99dec820735d887010c8f4" translate="yes" xml:space="preserve">
          <source>Bind the &lt;code&gt;value&lt;/code&gt; attribute to a &lt;code&gt;value&lt;/code&gt; prop</source>
          <target state="translated">绑定 &lt;code&gt;value&lt;/code&gt; 属性的 &lt;code&gt;value&lt;/code&gt; 道具</target>
        </trans-unit>
        <trans-unit id="9f3bcad3e4efb73a51f1a6c02686685ac122961f" translate="yes" xml:space="preserve">
          <source>Bind the &lt;code&gt;value&lt;/code&gt; attribute to the &lt;code&gt;modelValue&lt;/code&gt; prop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6580d0d46a0e41a64a6ba66b0193a84a7e1f821c" translate="yes" xml:space="preserve">
          <source>Binding HTML Classes</source>
          <target state="translated">绑定HTML类</target>
        </trans-unit>
        <trans-unit id="6ee002dad41000728304505b221bb8c5fb147e3d" translate="yes" xml:space="preserve">
          <source>Binding Inline Styles</source>
          <target state="translated">绑定内联样式</target>
        </trans-unit>
        <trans-unit id="f1ee008a1926025b19fdd56f5373aa3a7d9318ac" translate="yes" xml:space="preserve">
          <source>Binding Native Events to Components</source>
          <target state="translated">将本地事件绑定到组件</target>
        </trans-unit>
        <trans-unit id="537f5b14e1b4cdf2b7f2e09f194e7c0864d30d5c" translate="yes" xml:space="preserve">
          <source>Binding expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="f2e3f71b1d3e19f2e9daec1ac68138e7180590dc" translate="yes" xml:space="preserve">
          <source>Both React and Vue are exceptionally and similarly fast, so speed is unlikely to be a deciding factor in choosing between them. For specific metrics though, check out this &lt;a href=&quot;https://stefankrause.net/js-frameworks-benchmark8/table.html&quot;&gt;3rd party benchmark&lt;/a&gt;, which focuses on raw render/update performance with very simple component trees.</source>
          <target state="translated">React和Vue都非常快而且同样快，因此速度不太可能成为在它们之间进行选择的决定性因素。不过，对于特定指标，请查看此&lt;a href=&quot;https://stefankrause.net/js-frameworks-benchmark8/table.html&quot;&gt;第三方基准&lt;/a&gt;，该基准专注于使用非常简单的组件树的原始渲染/更新性能。</target>
        </trans-unit>
        <trans-unit id="2e1f44731f0d8bd48449467011ad127d990bba49" translate="yes" xml:space="preserve">
          <source>Both Vuex 1.0 and 2.0:</source>
          <target state="translated">Vuex 1.0和2.0都有。</target>
        </trans-unit>
        <trans-unit id="17a36c9d72454994e76feb1d172501d1710cbea3" translate="yes" xml:space="preserve">
          <source>Both callbacks will receive a debugger event which contains information on the dependency in question. It is recommended to place a &lt;code&gt;debugger&lt;/code&gt; statement in these callbacks to interactively inspect the dependency:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8281ab3deb811a80b50de14c008ad41be7252410" translate="yes" xml:space="preserve">
          <source>Both frameworks are exceptionally fast, with very similar metrics on benchmarks. You can &lt;a href=&quot;https://stefankrause.net/js-frameworks-benchmark8/table.html&quot;&gt;browse specific metrics&lt;/a&gt; for a more granular comparison, but speed is unlikely to be a deciding factor.</source>
          <target state="translated">两个框架都非常快，基准上的度量标准非常相似。您可以&lt;a href=&quot;https://stefankrause.net/js-frameworks-benchmark8/table.html&quot;&gt;浏览特定指标&lt;/a&gt;以进行更细致的比较，但是速度不太可能成为决定因素。</target>
        </trans-unit>
        <trans-unit id="1f688a06e547b5c3a43787858bd62f64749948d7" translate="yes" xml:space="preserve">
          <source>Bower</source>
          <target state="translated">Bower</target>
        </trans-unit>
        <trans-unit id="8f6f50fe6a684e36f2680d1b1f0d995148104f1b" translate="yes" xml:space="preserve">
          <source>Breaking Changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b870bd9f96d89dded8ea0d87740c482adb729a24" translate="yes" xml:space="preserve">
          <source>Bringing Designs to Life</source>
          <target state="translated">将设计变为现实</target>
        </trans-unit>
        <trans-unit id="ed81754147c265a661af47b5f96c56bae653c0d7" translate="yes" xml:space="preserve">
          <source>Browserify</source>
          <target state="translated">Browserify</target>
        </trans-unit>
        <trans-unit id="9e171a4486bb0f587cd37fe2753caa9f12125e40" translate="yes" xml:space="preserve">
          <source>Browserify + vueify</source>
          <target state="translated">Browserify+vueify</target>
        </trans-unit>
        <trans-unit id="c258b04191cb6bda4f50b74112945bab9f2e97a3" translate="yes" xml:space="preserve">
          <source>Browserify + vueify (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9573e2ae84ff104c9fe89518fb7780ffa4eb8a83" translate="yes" xml:space="preserve">
          <source>Buffering the callback not only improves performance but also helps to ensure data consistency. The watchers won't be triggered until the code performing the data updates has finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb0e71df375fcecff87eff0451b2781fcf64793" translate="yes" xml:space="preserve">
          <source>Building with rollup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e1fd3d1854d4d8ca0be8b74bcfe2caf4bb9209" translate="yes" xml:space="preserve">
          <source>Built-In Components</source>
          <target state="translated">内置组件</target>
        </trans-unit>
        <trans-unit id="162a059b43b2eb2bd569ff7fb65fbf91817157e2" translate="yes" xml:space="preserve">
          <source>Built-In Directives</source>
          <target state="translated">内置指令</target>
        </trans-unit>
        <trans-unit id="a8f47abf8ffa59d09613aa3f7f6e2688d3011aba" translate="yes" xml:space="preserve">
          <source>Built-In Text Filters &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">内置文本过滤器&lt;sup&gt;已删除&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6408bfefa5794bb4225a8f01f57427e9c8517b2c" translate="yes" xml:space="preserve">
          <source>Built-in Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4dc1b45e6084c850d989f2c78a6b12f0cec61a" translate="yes" xml:space="preserve">
          <source>Built-in Components - keep-alive</source>
          <target state="translated">内置组件--保持活力</target>
        </trans-unit>
        <trans-unit id="41b78508b841d9407084d6b260bac2accd739e91" translate="yes" xml:space="preserve">
          <source>Bundling &lt;code&gt;umd&lt;/code&gt; and &lt;code&gt;cjs&lt;/code&gt; modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d99e91ce27c1a20488a6c7225bd6ea5ba914485" translate="yes" xml:space="preserve">
          <source>But &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt;, not being part of &lt;code&gt;$attrs&lt;/code&gt;, will still be applied to the component's root element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778c689652e96bcb2a87cf734267e7b5bb2b87d5" translate="yes" xml:space="preserve">
          <source>But a key difference to lifecycle hooks is that &lt;code&gt;watch()&lt;/code&gt; and &lt;code&gt;watchEffect()&lt;/code&gt; effects are run &lt;em&gt;before&lt;/em&gt; the DOM is mounted or updated so the template ref hasn't been updated when the watcher runs the effect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9382d146fcef9840c5aeec093e3c39405d284d11" translate="yes" xml:space="preserve">
          <source>But if we provide content:</source>
          <target state="translated">但如果我们提供内容。</target>
        </trans-unit>
        <trans-unit id="6bc24e1b15b8172ffcabfcd993bddbbe5af96753" translate="yes" xml:space="preserve">
          <source>But in Webpack 3 and earlier, you&amp;rsquo;ll need to use &lt;a href=&quot;https://webpack.js.org/plugins/define-plugin/&quot;&gt;DefinePlugin&lt;/a&gt;:</source>
          <target state="translated">但是在Webpack 3和更早的版本中，您需要使用&lt;a href=&quot;https://webpack.js.org/plugins/define-plugin/&quot;&gt;DefinePlugin&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a8ae153969b9942e56a9bac5d741bc625281e374" translate="yes" xml:space="preserve">
          <source>But sometimes we may want to bind the value to a dynamic property on the Vue instance. We can use &lt;code&gt;v-bind&lt;/code&gt; to achieve that. In addition, using &lt;code&gt;v-bind&lt;/code&gt; allows us to bind the input value to non-string values.</source>
          <target state="translated">但是有时我们可能想将值绑定到Vue实例上的动态属性。我们可以使用 &lt;code&gt;v-bind&lt;/code&gt; 来实现。另外，使用 &lt;code&gt;v-bind&lt;/code&gt; 允许我们将输入值绑定到非字符串值。</target>
        </trans-unit>
        <trans-unit id="135f8d741a28fbe7b3289fd3c1f0c18c78d43ac1" translate="yes" xml:space="preserve">
          <source>But sometimes we may want to bind the value to a dynamic property on the current active instance. We can use &lt;code&gt;v-bind&lt;/code&gt; to achieve that. In addition, using &lt;code&gt;v-bind&lt;/code&gt; allows us to bind the input value to non-string values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e176e9a97a3c4f462daaed936a731baf80a8b9" translate="yes" xml:space="preserve">
          <source>But they&amp;rsquo;ll &lt;strong&gt;never&lt;/strong&gt; contain global state (e.g. from a Vuex store).</source>
          <target state="translated">但是它们永远&lt;strong&gt;不会&lt;/strong&gt;包含全局状态（例如，来自Vuex商店）。</target>
        </trans-unit>
        <trans-unit id="d2be99648e0270067cfd4ea7ff6118214ee09c04" translate="yes" xml:space="preserve">
          <source>But they'll &lt;strong&gt;never&lt;/strong&gt; contain global state (e.g. from a Vuex store).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c16b65bff1266df40cbfea717a355fbbb3865b2" translate="yes" xml:space="preserve">
          <source>But this would render the same text for every todo, which is not super interesting. We should be able to pass data from the parent scope into child components. Let&amp;rsquo;s modify the component definition to make it accept a &lt;a href=&quot;guide/components#Props&quot;&gt;prop&lt;/a&gt;:</source>
          <target state="translated">但这会为每个待办事项呈现相同的文本，这并不是很有趣。我们应该能够将数据从父范围传递到子组件中。让我们修改组件定义以使其接受&lt;a href=&quot;guide/components#Props&quot;&gt;prop&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="da9e62f83884bf77592584e86673c4aa3c5ad180" translate="yes" xml:space="preserve">
          <source>But this would render the same text for every todo, which is not super interesting. We should be able to pass data from the parent scope into child components. Let's modify the component definition to make it accept a &lt;a href=&quot;guide/component-basics#passing-data-to-child-components-with-props&quot;&gt;prop&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bed9e060b62bc5b202b91abfa9120f37ce0dbd3" translate="yes" xml:space="preserve">
          <source>But what if you&amp;rsquo;ve never had to deal with manual DOM manipulation, nor are you using or testing async components in your app? Or, what if, for whatever reason, you prefer to use the good old &lt;code&gt;window.setTimeout()&lt;/code&gt; instead? In such a case, the code for &lt;code&gt;nextTick()&lt;/code&gt; will become dead code &amp;ndash; that is, code that&amp;rsquo;s written but never used. And dead code is hardly a good thing, especially in our client-side context where every kilobyte matters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503d46db37b0db45db898aabed77244252918ca2" translate="yes" xml:space="preserve">
          <source>Buttons</source>
          <target state="translated">Buttons</target>
        </trans-unit>
        <trans-unit id="4fb52dff7f27988a090ba79f9b505246472be393" translate="yes" xml:space="preserve">
          <source>By communicating with JavaScript transitions through data attributes, it&amp;rsquo;s also possible to stagger transitions in a list:</source>
          <target state="translated">通过通过数据属性与JavaScript过渡进行通信，还可以在列表中错开过渡：</target>
        </trans-unit>
        <trans-unit id="0c0af65beecfe33c66777c92406d04df7381e281" translate="yes" xml:space="preserve">
          <source>By communicating with JavaScript transitions through data attributes, it's also possible to stagger transitions in a list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dccd1ce12af3efb78877a8e764628049c9bb78" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;v-model&lt;/code&gt; on a component uses &lt;code&gt;modelValue&lt;/code&gt; as the prop and &lt;code&gt;update:modelValue&lt;/code&gt; as the event. We can modify these names passing an argument to &lt;code&gt;v-model&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffc52d15241fcde204b3749994637baf6b9f1a2" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;v-model&lt;/code&gt; on a component uses &lt;code&gt;value&lt;/code&gt; as the prop and &lt;code&gt;input&lt;/code&gt; as the event, but some input types such as checkboxes and radio buttons may want to use the &lt;code&gt;value&lt;/code&gt; attribute for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value&quot;&gt;different purpose&lt;/a&gt;. Using the &lt;code&gt;model&lt;/code&gt; option can avoid a conflict in such cases:</source>
          <target state="translated">默认情况下，组件上的 &lt;code&gt;v-model&lt;/code&gt; 使用 &lt;code&gt;value&lt;/code&gt; 作为prop并将 &lt;code&gt;input&lt;/code&gt; 作为事件，但是某些输入类型（例如复选框和单选按钮）可能希望将 &lt;code&gt;value&lt;/code&gt; 属性用于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value&quot;&gt;不同的用途&lt;/a&gt;。在以下情况下，使用 &lt;code&gt;model&lt;/code&gt; 选项可以避免冲突：</target>
        </trans-unit>
        <trans-unit id="0ad90607d4c0404c9faa13f5fee7b87b35f56269" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;v-model&lt;/code&gt; syncs the input with the data after each &lt;code&gt;input&lt;/code&gt; event (with the exception of IME composition as &lt;a href=&quot;#vmodel-ime-tip&quot;&gt;stated above&lt;/a&gt;). You can add the &lt;code&gt;lazy&lt;/code&gt; modifier to instead sync after &lt;code&gt;change&lt;/code&gt; events:</source>
          <target state="translated">默认情况下， &lt;code&gt;v-model&lt;/code&gt; 在每个 &lt;code&gt;input&lt;/code&gt; 事件之后将输入与数据同步（&lt;a href=&quot;#vmodel-ime-tip&quot;&gt;上述&lt;/a&gt; IME组成除外）。您可以添加 &lt;code&gt;lazy&lt;/code&gt; 修饰符以在 &lt;code&gt;change&lt;/code&gt; 事件后进行同步：</target>
        </trans-unit>
        <trans-unit id="c148f99afa31c3b0b4175f568b49a103e6ad0ecc" translate="yes" xml:space="preserve">
          <source>By default, Vue updates the DOM as efficiently as possible. That means when switching between elements of the same type, it simply patches the existing element, rather than removing it and adding a new one in its place. This can have &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/bh8fLeds/&quot;&gt;unintended consequences&lt;/a&gt; if these elements should not actually be considered the same.</source>
          <target state="translated">默认情况下，Vue尽可能高效地更新DOM。这意味着在相同类型的元素之间切换时，它只是修补现有元素，而不是删除它并在其位置添加一个新元素。如果实际上不应将这些元素视为相同，则会产生&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/bh8fLeds/&quot;&gt;意想不到的后果&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a77e6be69803dd9706b337a72081315320a15961" translate="yes" xml:space="preserve">
          <source>By default, all errors are still sent to the global &lt;code&gt;config.errorHandler&lt;/code&gt; if it is defined, so that these errors can still be reported to an analytics service in a single place.</source>
          <target state="translated">默认情况下，所有错误仍将发送到全局 &lt;code&gt;config.errorHandler&lt;/code&gt; (如果已定义），因此仍可将这些错误报告给单个位置的分析服务。</target>
        </trans-unit>
        <trans-unit id="5eb7b2304afd77120627ce6f92ed137e52761194" translate="yes" xml:space="preserve">
          <source>By default, it doesn't render a wrapper element, but you can specify an element to be rendered with the &lt;code&gt;tag&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e0baa8d481eef87a57457f5454fbd1de21191f" translate="yes" xml:space="preserve">
          <source>By default, parent scope attribute bindings that are not recognized as props will &quot;fallthrough&quot;. This means that when we have a single-root component, these bindings will be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting &lt;code&gt;inheritAttrs&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, this default behavior can be disabled. The attributes are available via the &lt;code&gt;$attrs&lt;/code&gt; instance property and can be explicitly bound to a non-root element using &lt;code&gt;v-bind&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e8efbea67d6157fcddcb4edcfa1b49f5be94c6" translate="yes" xml:space="preserve">
          <source>By default, parent scope attribute bindings that are not recognized as props will &amp;ldquo;fallthrough&amp;rdquo; and be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By setting &lt;code&gt;inheritAttrs&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, this default behavior can be disabled. The attributes are available via the &lt;code&gt;$attrs&lt;/code&gt; instance property (also new in 2.4) and can be explicitly bound to a non-root element using &lt;code&gt;v-bind&lt;/code&gt;.</source>
          <target state="translated">默认情况下，未被识别为props的父范围属性绑定将&amp;ldquo;掉线&amp;rdquo;，并作为普通HTML属性应用于子组件的根元素。在创作包装目标元素的组件或另一个组件时，这可能并非总是期望的行为。通过将 &lt;code&gt;inheritAttrs&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; ，可以禁用此默认行为。这些属性可通过 &lt;code&gt;$attrs&lt;/code&gt; 实例属性（在2.4中也是新增功能）使用，并且可以使用 &lt;code&gt;v-bind&lt;/code&gt; 显式绑定到非根元素。</target>
        </trans-unit>
        <trans-unit id="cbd6959db2d24ce79d7dca446bb49d40906058ca" translate="yes" xml:space="preserve">
          <source>By default, this will use the transitions specified for entering and leaving. If you&amp;rsquo;d like however, you can also specify custom CSS classes:</source>
          <target state="translated">默认情况下，这将使用为进入和离开指定的过渡。但是，如果您愿意，还可以指定自定义CSS类：</target>
        </trans-unit>
        <trans-unit id="df95deadef4c40290cd6ba28c4884617b82a5f1a" translate="yes" xml:space="preserve">
          <source>By doing so, this will help you avoid conflicts with current and future HTML elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524e3e94154f70bc5cd238efc984b56537e51616" translate="yes" xml:space="preserve">
          <source>By iterating over a computed property instead, like this:</source>
          <target state="translated">通过迭代一个计算过的属性,像这样。</target>
        </trans-unit>
        <trans-unit id="3ad894f28d9c6e6c159aaf52a61131fa7ae0cb56" translate="yes" xml:space="preserve">
          <source>By leveraging the ability to target a particular prop and event as we learned before with &lt;a href=&quot;#v-model-arguments&quot;&gt;&lt;code&gt;v-model&lt;/code&gt; arguments&lt;/a&gt;, we can now create multiple v-model bindings on a single component instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffde0f5ffc23d749b1907e603465a412357ed88f" translate="yes" xml:space="preserve">
          <source>By moving the &lt;code&gt;v-if&lt;/code&gt; to a container element, we&amp;rsquo;re no longer checking &lt;code&gt;shouldShowUsers&lt;/code&gt; for &lt;em&gt;every&lt;/em&gt; user in the list. Instead, we check it once and don&amp;rsquo;t even evaluate the &lt;code&gt;v-for&lt;/code&gt; if &lt;code&gt;shouldShowUsers&lt;/code&gt; is false.</source>
          <target state="translated">通过将 &lt;code&gt;v-if&lt;/code&gt; 移到容器元素，我们不再为列表中的&lt;em&gt;每个&lt;/em&gt;用户检查 &lt;code&gt;shouldShowUsers&lt;/code&gt; 。相反，如果 &lt;code&gt;shouldShowUsers&lt;/code&gt; 为false ，我们将对其进行一次检查，甚至不评估 &lt;code&gt;v-for&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c5c485332147fd438327cdd4bf55f716394baf76" translate="yes" xml:space="preserve">
          <source>By now, your app should be fully migrated. If you&amp;rsquo;re still hungry for more though, you can read the rest of this page - or dive in to the new and improved guide from &lt;a href=&quot;../index&quot;&gt;the beginning&lt;/a&gt;. Many parts will be skimmable, since you&amp;rsquo;re already familiar with the core concepts.</source>
          <target state="translated">现在，您的应用程序应该已完全迁移。如果您仍然渴望更多，可以阅读本页面的其余部分，或者从头&lt;a href=&quot;../index&quot;&gt;开始&lt;/a&gt;阅读经过改进的新指南。因为您已经熟悉核心概念，所以许多部分都是可略读的。</target>
        </trans-unit>
        <trans-unit id="8c4b0275ee1b88f92d43018837d550c5c16046c1" translate="yes" xml:space="preserve">
          <source>By passing &lt;code&gt;context.data&lt;/code&gt; as the second argument to &lt;code&gt;createElement&lt;/code&gt;, we are passing down any attributes or event listeners used on &lt;code&gt;my-functional-button&lt;/code&gt;. It&amp;rsquo;s so transparent, in fact, that events don&amp;rsquo;t even require the &lt;code&gt;.native&lt;/code&gt; modifier.</source>
          <target state="translated">通过将 &lt;code&gt;context.data&lt;/code&gt; 作为 &lt;code&gt;createElement&lt;/code&gt; 的第二个参数传递，我们传递了 &lt;code&gt;my-functional-button&lt;/code&gt; 上使用的所有属性或事件侦听器。实际上，它是如此透明，以至于事件甚至都不需要 &lt;code&gt;.native&lt;/code&gt; 修饰符。</target>
        </trans-unit>
        <trans-unit id="6094ad2d93aaa124480262cfc40c0e785b224a79" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;inheritAttrs&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;, you can control to apply to other elements attributes to use the component's &lt;code&gt;$attrs&lt;/code&gt; property, which includes all attributes not included to component &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;emits&lt;/code&gt; properties (e.g., &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;style&lt;/code&gt;, &lt;code&gt;v-on&lt;/code&gt; listeners, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b6c4b8addee6f0bec9b64fdc066f75fd594e81" translate="yes" xml:space="preserve">
          <source>CDN</source>
          <target state="translated">CDN</target>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="translated">CLI</target>
        </trans-unit>
        <trans-unit id="eb704231be479daeb04b503bb4d54f57efe5578f" translate="yes" xml:space="preserve">
          <source>CSP environments</source>
          <target state="translated">CSP环境</target>
        </trans-unit>
        <trans-unit id="9020d263f8a3f425dedb8420905b7b42c9734f4a" translate="yes" xml:space="preserve">
          <source>CSS Animations</source>
          <target state="translated">CSS动画</target>
        </trans-unit>
        <trans-unit id="f266fe7a0113efe52607c4f4f3b4ebbbb3f47585" translate="yes" xml:space="preserve">
          <source>CSS Transitions</source>
          <target state="translated">CSS过渡</target>
        </trans-unit>
        <trans-unit id="3d05a3291c02bd89bd73ec03f20f2ea4a4303e79" translate="yes" xml:space="preserve">
          <source>CSS animations are applied in the same way as CSS transitions, the difference being that &lt;code&gt;v-enter-from&lt;/code&gt; is not removed immediately after the element is inserted, but on an &lt;code&gt;animationend&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d8f8e4d0c0e93f13e2c87ea6bb5cd7957207dc" translate="yes" xml:space="preserve">
          <source>CSS animations are applied in the same way as CSS transitions, the difference being that &lt;code&gt;v-enter&lt;/code&gt; is not removed immediately after the element is inserted, but on an &lt;code&gt;animationend&lt;/code&gt; event.</source>
          <target state="translated">CSS动画的应用方式与CSS过渡相同，不同之处在于 &lt;code&gt;v-enter&lt;/code&gt; 不会在元素插入后立即删除，而是在 &lt;code&gt;animationend&lt;/code&gt; 事件上删除。</target>
        </trans-unit>
        <trans-unit id="bbb794d199e71c2cd267a0ceec4bc830f0994805" translate="yes" xml:space="preserve">
          <source>CSS transition classes will be applied to inner elements and not to the group/container itself.</source>
          <target state="translated">CSS过渡类将应用于内部元素,而不是组/容器本身。</target>
        </trans-unit>
        <trans-unit id="7d236fbcb9274aa5cc57d61418439c052a90749f" translate="yes" xml:space="preserve">
          <source>Caching invalidation of computed properties will be removed in future major versions of Vue. Replace any uncached computed properties with methods, which will have the same result.</source>
          <target state="translated">在Vue未来的主要版本中,计算属性的缓存无效将被移除。用方法代替任何未缓存的计算属性,其结果相同。</target>
        </trans-unit>
        <trans-unit id="8985f48d62f9f073d646c6404b51e6fb553d8fe5" translate="yes" xml:space="preserve">
          <source>Called after a Vue instance has been destroyed. When this hook is called, all directives of the Vue instance have been unbound, all event listeners have been removed, and all child Vue instances have also been destroyed.</source>
          <target state="translated">在Vue实例被销毁后被调用。调用该钩子时,Vue实例的所有指令都已被解除绑定,所有事件监听器都已被删除,所有子Vue实例也已被销毁。</target>
        </trans-unit>
        <trans-unit id="f58210a3703af4dcf510c60774520a04e7fe687f" translate="yes" xml:space="preserve">
          <source>Called after a component instance has been unmounted. When this hook is called, all directives of the component instance have been unbound, all event listeners have been removed, and all child component instance have also been unmounted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3530cfac5196f790d3069acb16fe440211703006" translate="yes" xml:space="preserve">
          <source>Called after a data change causes the virtual DOM to be re-rendered and patched.</source>
          <target state="translated">在数据变化后调用,导致虚拟DOM被重新渲染和修补。</target>
        </trans-unit>
        <trans-unit id="83312d8e8dc6f9113cf6c95f0e2c09dfcb5c36f5" translate="yes" xml:space="preserve">
          <source>Called after the instance has been mounted, where &lt;code&gt;el&lt;/code&gt; is replaced by the newly created &lt;code&gt;vm.$el&lt;/code&gt;. If the root instance is mounted to an in-document element, &lt;code&gt;vm.$el&lt;/code&gt; will also be in-document when &lt;code&gt;mounted&lt;/code&gt; is called.</source>
          <target state="translated">在实例挂载后调用，其中 &lt;code&gt;el&lt;/code&gt; 被新创建的 &lt;code&gt;vm.$el&lt;/code&gt; 替换。如果将根实例安装到文档中元素，则在调用 &lt;code&gt;mounted&lt;/code&gt; 时， &lt;code&gt;vm.$el&lt;/code&gt; 也将是文档中。</target>
        </trans-unit>
        <trans-unit id="3e3939dd4be4ae98c83ade35b985dcf3f579ac5a" translate="yes" xml:space="preserve">
          <source>Called after the instance has been mounted, where element, passed to &lt;code&gt;Vue.createApp({}).mount()&lt;/code&gt; is replaced by the newly created &lt;code&gt;vm.$el&lt;/code&gt;. If the root instance is mounted to an in-document element, &lt;code&gt;vm.$el&lt;/code&gt; will also be in-document when &lt;code&gt;mounted&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bad46ae4298e45721b7951c1b6f0d32995c3e16" translate="yes" xml:space="preserve">
          <source>Called right before a Vue instance is destroyed. At this stage the instance is still fully functional.</source>
          <target state="translated">在Vue实例被销毁前调用。在这个阶段,实例仍然可以完全运行。</target>
        </trans-unit>
        <trans-unit id="4f342a060a1575bc5ee55fb162118e0f1465d10b" translate="yes" xml:space="preserve">
          <source>Called right before a component instance is unmounted. At this stage the instance is still fully functional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ce8dc6482495b2e5f1c136e19210920f78ae5e" translate="yes" xml:space="preserve">
          <source>Called right before the mounting begins: the &lt;code&gt;render&lt;/code&gt; function is about to be called for the first time.</source>
          <target state="translated">在安装开始之前立即被调用： &lt;code&gt;render&lt;/code&gt; 函数将被首次调用。</target>
        </trans-unit>
        <trans-unit id="9fc1b25df593503e17062f1c3e2653b22c66f3a2" translate="yes" xml:space="preserve">
          <source>Called synchronously after the instance is created. At this stage, the instance has finished processing the options which means the following have been set up: data observation, computed properties, methods, watch/event callbacks. However, the mounting phase has not been started, and the &lt;code&gt;$el&lt;/code&gt; property will not be available yet.</source>
          <target state="translated">创建实例后同步调用。在此阶段，实例已完成对选项的处理，这意味着已设置以下内容：数据观察，计算的属性，方法，监视/事件回调。但是，安装阶段尚未开始，并且 &lt;code&gt;$el&lt;/code&gt; 属性尚不可用。</target>
        </trans-unit>
        <trans-unit id="feed33b8752c111f08079dce1a2159650ebe5342" translate="yes" xml:space="preserve">
          <source>Called synchronously immediately after the instance has been initialized, before data observation and event/watcher setup.</source>
          <target state="translated">在实例被初始化后,在数据观察和事件/观察者设置之前,立即同步调用。</target>
        </trans-unit>
        <trans-unit id="19ba77af716508606cffcc73e06106d60b7aff0b" translate="yes" xml:space="preserve">
          <source>Called when a kept-alive component is activated.</source>
          <target state="translated">当一个保持活力的组件被激活时调用。</target>
        </trans-unit>
        <trans-unit id="03356ab312d39995a07fe8884dd2e46052f7f905" translate="yes" xml:space="preserve">
          <source>Called when a kept-alive component is deactivated.</source>
          <target state="translated">当keep-alive组件被停用时调用。</target>
        </trans-unit>
        <trans-unit id="22a22dd33b29826fd113758eeb92c36b05d2429c" translate="yes" xml:space="preserve">
          <source>Called when an error from any descendent component is captured. The hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return &lt;code&gt;false&lt;/code&gt; to stop the error from propagating further.</source>
          <target state="translated">当捕获到任何后代组件的错误时调用。挂钩接收三个参数：错误，触发错误的组件实例以及包含有关捕获错误的位置信息的字符串。挂钩可以返回 &lt;code&gt;false&lt;/code&gt; ,以阻止错误进一步传播。</target>
        </trans-unit>
        <trans-unit id="33743d1acc9255573c610e6cc615ee541354bead" translate="yes" xml:space="preserve">
          <source>Called when data changes, before the DOM is patched. This is a good place to access the existing DOM before an update, e.g. to remove manually added event listeners.</source>
          <target state="translated">当数据发生变化时,在DOM被修补之前调用。这是一个在更新前访问现有DOM的好地方,例如删除手动添加的事件监听器。</target>
        </trans-unit>
        <trans-unit id="9021d36c3e5014b5da313593c77c66a65d241e45" translate="yes" xml:space="preserve">
          <source>Called when virtual DOM re-render is tracked. The hook receives a &lt;code&gt;debugger event&lt;/code&gt; as an argument. This event tells you what operation tracked the component and the target object and key of that operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8029aea220cd2187f52cb0913abf5897650fc243" translate="yes" xml:space="preserve">
          <source>Called when virtual DOM re-render is triggered.Similarly to &lt;a href=&quot;#rendertracked&quot;&gt;&lt;code&gt;renderTracked&lt;/code&gt;&lt;/a&gt;, receives a &lt;code&gt;debugger event&lt;/code&gt; as an argument. This event tells you what operation triggered the re-rendering and the target object and key of that operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562dc0066f29b343ef11a66c1ecdd24f9d679e27" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;Vue.nextTick()&lt;/code&gt; directly will now result in the infamous &lt;code&gt;undefined is not a function&lt;/code&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76369e54689d34ed6832055839f17e97e3305a1" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;createApp&lt;/code&gt; returns an &lt;em&gt;app instance&lt;/em&gt;, a new concept in Vue 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddb834e4a45df0ee715d3fb6cc2f40440d2fe13" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;createApp&lt;/code&gt; returns an application instance. This instance provides an application context. The entire component tree mounted by the application instance share the same context, which provides the configurations that were previously &quot;global&quot; in Vue 2.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619f81ece4b63c5e2811c2933d49ac7b77880aa1" translate="yes" xml:space="preserve">
          <source>Can be used to create a &lt;a href=&quot;#ref&quot;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt; for a property on a source reactive object. The ref can then be passed around, retaining the reactive connection to its source property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6574e5ecc3a3bd47aa3511d3f60ad67226d38c4f" translate="yes" xml:space="preserve">
          <source>Can we start translating Vue 3 docs?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7477cd38d4344d15574b60c13a9eb98dab7d0740" translate="yes" xml:space="preserve">
          <source>Capacitor</source>
          <target state="translated">Capacitor</target>
        </trans-unit>
        <trans-unit id="f782fc54f40b51ab4c51fe8fd45e9bc55b3c677e" translate="yes" xml:space="preserve">
          <source>Capacitor + Vue.js Guide (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1335b59b2aae3343d1240b464bee8030a93df4" translate="yes" xml:space="preserve">
          <source>Cases like this no longer work:</source>
          <target state="translated">这样的案例已经行不通了。</target>
        </trans-unit>
        <trans-unit id="47ba6a256935c5ee569450f66c777bc4a457173d" translate="yes" xml:space="preserve">
          <source>Causes a component to be stateless (no &lt;code&gt;data&lt;/code&gt;) and instanceless (no &lt;code&gt;this&lt;/code&gt; context). They are only a &lt;code&gt;render&lt;/code&gt; function that returns virtual nodes making them much cheaper to render.</source>
          <target state="translated">导致组分是无状态的（无 &lt;code&gt;data&lt;/code&gt; ）和instanceless（没有 &lt;code&gt;this&lt;/code&gt; 上下文）。它们只是一个返回虚拟节点的 &lt;code&gt;render&lt;/code&gt; 函数，使得虚拟节点的渲染成本更低。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="5ebc2730b36d1280bae0438aa104f84b488a7c75" translate="yes" xml:space="preserve">
          <source>Change &lt;code&gt;'Enter'&lt;/code&gt; to the appropriate &lt;a href=&quot;http://keycode.info/&quot;&gt;key (opens new window)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128bbe4c1a2eec75b3a48d52a04dc381d50f549c" translate="yes" xml:space="preserve">
          <source>Change Detection Caveats</source>
          <target state="translated">变化检测注意事项</target>
        </trans-unit>
        <trans-unit id="6eb0b309f52e02a06d25d6308587fb00dd8402ca" translate="yes" xml:space="preserve">
          <source>Change Detection Caveats in Vue 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509127db0a40f3b6808e38c534337564d2f67912" translate="yes" xml:space="preserve">
          <source>Change all non-&lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; tags with &lt;code&gt;is&lt;/code&gt; usage to &lt;code&gt;&amp;lt;component is=&quot;...&quot;&amp;gt;&lt;/code&gt; (for SFC templates) or &lt;code&gt;v-is&lt;/code&gt; (for in-DOM templates).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72c9cb74aa03a1204d264e75dd17b9f2ce6bddb" translate="yes" xml:space="preserve">
          <source>Change the plain text interpolation delimiters.</source>
          <target state="translated">改变纯文本插值定界符。</target>
        </trans-unit>
        <trans-unit id="573d848a7ecec863b6a0bce1a32b354b232cdfdb" translate="yes" xml:space="preserve">
          <source>Changing transform does not trigger any geometry changes or painting, which is very good. This means that the operation can likely be carried out by the compositor thread with the help of the GPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2406ae964529e03a8ff9e23d92e1842c1977cd4c" translate="yes" xml:space="preserve">
          <source>Cheap Static Components with &lt;code&gt;v-once&lt;/code&gt;</source>
          <target state="translated">带有 &lt;code&gt;v-once&lt;/code&gt; 的廉价静态组件</target>
        </trans-unit>
        <trans-unit id="55780f6f22cfb5a725f801fb55d3e7c32385ae95" translate="yes" xml:space="preserve">
          <source>Check it out for yourself by entering some text in the input, then pressing the toggle button:</source>
          <target state="translated">通过在输入中输入一些文字,然后按下切换按钮,自己检查一下。</target>
        </trans-unit>
        <trans-unit id="0f6c8ac8246de31ef35c527dece9d833e22be8cc" translate="yes" xml:space="preserve">
          <source>Check out more details on &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; in the &lt;a href=&quot;../api/built-in-components#keep-alive&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c33724c45fb8e747d255d9b041a54c4aa78fe4e" translate="yes" xml:space="preserve">
          <source>Check out more details on &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; in the &lt;a href=&quot;../api/index#keep-alive&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;../api/index#keep-alive&quot;&gt;API参考中&lt;/a&gt;查看有关 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 的更多详细信息。</target>
        </trans-unit>
        <trans-unit id="a314c9435a72544be3b81bd0835c5613b16b38f1" translate="yes" xml:space="preserve">
          <source>Check out the following links from WebAim to understand from users:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f531b7f4e1cce7c6b104a7b3cf21fe76b655e01f" translate="yes" xml:space="preserve">
          <source>Check out the result below:</source>
          <target state="translated">下面看看结果吧。</target>
        </trans-unit>
        <trans-unit id="1d66c3d0758e71b315e012814dc35df62cfab9d2" translate="yes" xml:space="preserve">
          <source>Checkbox</source>
          <target state="translated">Checkbox</target>
        </trans-unit>
        <trans-unit id="5f8a921707d34fb3fa42912dc08856389f5f8ffe" translate="yes" xml:space="preserve">
          <source>Checkout &lt;a href=&quot;https://github.com/vuejs/awesome-vue#components--libraries&quot;&gt;awesome-vue (opens new window)&lt;/a&gt; for a huge collection of community-contributed plugins and libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8729bc4793abbf031b32f50c70e97b14a84f1c2" translate="yes" xml:space="preserve">
          <source>Checkout &lt;a href=&quot;https://github.com/vuejs/awesome-vue#components--libraries&quot;&gt;awesome-vue&lt;/a&gt; for a huge collection of community-contributed plugins and libraries.</source>
          <target state="translated">结帐&lt;a href=&quot;https://github.com/vuejs/awesome-vue#components--libraries&quot;&gt;真棒-&lt;/a&gt;大量社区贡献的插件和库。</target>
        </trans-unit>
        <trans-unit id="a14872eb994dfe874db41c024324cdf1ab1568d9" translate="yes" xml:space="preserve">
          <source>Checkout the &lt;a href=&quot;https://www.w3.org/WAI/planning-and-managing/&quot;&gt;Planning and managing web accessibility guide (opens new window)&lt;/a&gt; provided by &lt;a href=&quot;https://www.w3.org/&quot;&gt;World Wide Web Consortium (W3C) (opens new window)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e03267b20aefeb614af397a801ccc297114d51" translate="yes" xml:space="preserve">
          <source>Checks if a value is a ref object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa0f67fa4e85299374a8388f79045a306f5fce8" translate="yes" xml:space="preserve">
          <source>Checks if an object is a proxy created by &lt;a href=&quot;#reactive&quot;&gt;&lt;code&gt;reactive&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#readonly&quot;&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e54e6ec2ae429669251cd513dd0143bfdb92e93" translate="yes" xml:space="preserve">
          <source>Checks if an object is a reactive proxy created by &lt;a href=&quot;#reactive&quot;&gt;&lt;code&gt;reactive&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844483535ed4096fb32362348689389d101b44bd" translate="yes" xml:space="preserve">
          <source>Checks if an object is a readonly proxy created by &lt;a href=&quot;#readonly&quot;&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f332ccc08e1b0498df223620c8d4cf1fb1be840" translate="yes" xml:space="preserve">
          <source>Child Component Refs</source>
          <target state="translated">子组件参考</target>
        </trans-unit>
        <trans-unit id="c79d8afe80046d191e62a92ede507cdd889b5dfe" translate="yes" xml:space="preserve">
          <source>Children VNodes, built using &lt;code&gt;h()&lt;/code&gt;, or using strings to get &quot;text VNodes&quot; or an object with slots. Optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b102a4abe624392b6fec86da9cebfeccf82f9d1" translate="yes" xml:space="preserve">
          <source>Children of the same common parent must have &lt;strong&gt;unique keys&lt;/strong&gt;. Duplicate keys will cause render errors.</source>
          <target state="translated">同一共同父母的子女必须具有&lt;strong&gt;唯一的钥匙&lt;/strong&gt;。重复的键会导致渲染错误。</target>
        </trans-unit>
        <trans-unit id="563daee3495a2143d46025d2fbef55812a25188e" translate="yes" xml:space="preserve">
          <source>Choosing Your Framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87ecde35ab8afd2df96443b4dd36523bac9a282" translate="yes" xml:space="preserve">
          <source>ChromeVox (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d10419c85d39f36202cd562489c0cca977e3fc" translate="yes" xml:space="preserve">
          <source>Circular References</source>
          <target state="translated">循环参考</target>
        </trans-unit>
        <trans-unit id="c024d09d54f06a3a36aeb2331ad06e01744fb502" translate="yes" xml:space="preserve">
          <source>Circular References Between Components</source>
          <target state="translated">组件之间的循环引用</target>
        </trans-unit>
        <trans-unit id="dca0daa7ecaa93a4cfed75a4c1810768b7e08768" translate="yes" xml:space="preserve">
          <source>Class and Style Bindings</source>
          <target state="translated">类和风格绑定</target>
        </trans-unit>
        <trans-unit id="9a74b2e08183e9c12dbab6f2ce8267f763f44cf6" translate="yes" xml:space="preserve">
          <source>Class-Style Vue Components</source>
          <target state="translated">类风格的Vue组件</target>
        </trans-unit>
        <trans-unit id="623133c0885a8356a6c58a7d4470391a17d8590a" translate="yes" xml:space="preserve">
          <source>Class-based Animations &amp;amp; Transitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d591ca7c10ad619dc6206d37ac2017aefefbb31" translate="yes" xml:space="preserve">
          <source>Code Blocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264398069882e7753347718021d0c9c51b7ce8fc" translate="yes" xml:space="preserve">
          <source>Code of Conduct</source>
          <target state="translated">行为守则</target>
        </trans-unit>
        <trans-unit id="180a8b1b8c249023344c634b171d7a150f6b48ba" translate="yes" xml:space="preserve">
          <source>Coercing &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;'false'&lt;/code&gt; instead of removing the attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9920f50b8c1ff7d236873c280fc6143d350a43" translate="yes" xml:space="preserve">
          <source>Coercion for boolean attributes is left untouched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cd7581d0836866a847df9eba4b6be6631a6fb2" translate="yes" xml:space="preserve">
          <source>Coffee &lt;em&gt;with&lt;/em&gt; milk</source>
          <target state="translated">咖啡&lt;em&gt;加&lt;/em&gt;牛奶</target>
        </trans-unit>
        <trans-unit id="fe558721007912eba90c128085c5ee8f72c25e54" translate="yes" xml:space="preserve">
          <source>Cognitive Load Theory (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e633c5c61f9f679ab238ff8e33e64261d9e9bd1e" translate="yes" xml:space="preserve">
          <source>Cognitive capacity is &lt;strong&gt;depleted faster&lt;/strong&gt; by complex sentences, having to learn more than one concept at a time, and abstract examples that don't directly relate to a user's work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd383d9bc02ad74fa637d37cce23e0fc2d6c1ba2" translate="yes" xml:space="preserve">
          <source>Cognitive capacity is &lt;strong&gt;depleted more slowly&lt;/strong&gt; when we help them feel consistently smart, powerful, and curious. Breaking things down into digestible pieces and minding the flow of the document can help keep them in this state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95022fc2fc355ca901608262dcf92c67246fda3" translate="yes" xml:space="preserve">
          <source>Collection of form-associated elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65abb53aeb61cfaf549701197c45b35fe463c211" translate="yes" xml:space="preserve">
          <source>Collection of links suitable for use when navigating the document or related documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81414ed4e3da0285def5560fcce55ad97ab7e09f" translate="yes" xml:space="preserve">
          <source>Color Oracle (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7a83b6c99114d999934704c2b29180d7f7cddf" translate="yes" xml:space="preserve">
          <source>Color Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ab98e816b665374e5d86f770d68ddf06088636" translate="yes" xml:space="preserve">
          <source>Combined with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API&quot;&gt;History API (opens new window)&lt;/a&gt;, you can build a very basic but fully-functional client-side router. To see that in practice, check out &lt;a href=&quot;https://github.com/phanan/vue-3.0-simple-routing-example&quot;&gt;this example app (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c974ead90c104908ea0a8c2bb04898917e9588c6" translate="yes" xml:space="preserve">
          <source>Combined with the HTML5 History API, you can build a very basic but fully-functional client-side router. To see that in practice, check out &lt;a href=&quot;https://github.com/chrisvfritz/vue-2.0-simple-routing-example&quot;&gt;this example app&lt;/a&gt;.</source>
          <target state="translated">结合HTML5历史记录API，您可以构建一个非常基本但功能齐全的客户端路由器。要实际了解&lt;a href=&quot;https://github.com/chrisvfritz/vue-2.0-simple-routing-example&quot;&gt;这一点&lt;/a&gt;，请查看此示例应用程序。</target>
        </trans-unit>
        <trans-unit id="377dd01e05316c6519d98a0022d6976f8e76be87" translate="yes" xml:space="preserve">
          <source>CommonJS</source>
          <target state="translated">CommonJS</target>
        </trans-unit>
        <trans-unit id="a6efa3f8b6925bf806e313da9f1695177c2a8032" translate="yes" xml:space="preserve">
          <source>CommonJS and ES Module builds also preserve raw checks for &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; to determine the mode they should run in. You should use appropriate bundler configurations to replace these environment variables in order to control which mode Vue will run in. Replacing &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; with string literals also allows minifiers like UglifyJS to completely drop the development-only code blocks, reducing final file size.</source>
          <target state="translated">CommonJS和ES Module版本还保留了对 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 的原始检查，以确定它们应在哪种模式下运行。您应该使用适当的捆绑程序配置来替换这些环境变量，以便控制Vue将在哪种模式下运行 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 与字符串文字也让像UglifyJS minifiers完全删除该只开发代码块，减少了最终文件大小。</target>
        </trans-unit>
        <trans-unit id="d99e960f2123bbfd6a9677c2fb76958c2fd6c3b7" translate="yes" xml:space="preserve">
          <source>CommonJS and ES Module builds are intended for bundlers, therefore we don&amp;rsquo;t provide minified versions for them. You will be responsible for minifying the final bundle yourself.</source>
          <target state="translated">CommonJS和ES Module版本是面向捆绑程序的，因此我们不为它们提供缩小版本。您将负责自己缩小最终捆绑包。</target>
        </trans-unit>
        <trans-unit id="ea8787d5b12c9aec27fd3469864538cd711d9cd2" translate="yes" xml:space="preserve">
          <source>CommonJS modules</source>
          <target state="translated">常见的JS模块</target>
        </trans-unit>
        <trans-unit id="47ae95c9a99cc6068bff28fb5953623d412455de" translate="yes" xml:space="preserve">
          <source>CommonJS modules (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7cebf073bfeeaff43bd8b053c41db9e6bdb45c" translate="yes" xml:space="preserve">
          <source>Compared to &lt;a href=&quot;#watcheffect&quot;&gt;watchEffect&lt;/a&gt;, &lt;code&gt;watch&lt;/code&gt; allows us to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5aca44c6d2486f8156b913b06eeb239921e213" translate="yes" xml:space="preserve">
          <source>Comparison between 2.x &amp;amp; 3.x behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6b8eeaf74802fbeaa7657791100a5b37f51bfb" translate="yes" xml:space="preserve">
          <source>Comparison with Other Frameworks</source>
          <target state="translated">与其他框架的比较</target>
        </trans-unit>
        <trans-unit id="5d57c5330d10b55140b0ca441a4e01cd9cdaa363" translate="yes" xml:space="preserve">
          <source>Compatibility Note</source>
          <target state="translated">兼容性说明</target>
        </trans-unit>
        <trans-unit id="077aef20ba3929d7790595b2e4f8807f31cf16a3" translate="yes" xml:space="preserve">
          <source>Compilation Scope</source>
          <target state="translated">汇编范围</target>
        </trans-unit>
        <trans-unit id="8b872f9c0b449f8445c95b2c8e455da91a06a8ed" translate="yes" xml:space="preserve">
          <source>Compiles a template string into a render function. &lt;strong&gt;Only available in the full build.&lt;/strong&gt;</source>
          <target state="translated">将模板字符串编译为渲染函数。&lt;strong&gt;仅在完整版本中可用。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33f10f0dbd2f59e5fcb0c550db57268475dcd088" translate="yes" xml:space="preserve">
          <source>Complete Example</source>
          <target state="translated">完整示例</target>
        </trans-unit>
        <trans-unit id="6de04754eaf2ce0a0b86e33e3cf6b7710d77fb59" translate="yes" xml:space="preserve">
          <source>Complete syntax highlighting</source>
          <target state="translated">完整的语法高亮</target>
        </trans-unit>
        <trans-unit id="a3adb5fa70b6ceeca6ba20925fd752909cc7d083" translate="yes" xml:space="preserve">
          <source>Complete syntax highlighting (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558f46627cddb51db9b48cf5dcc7c099216cf9b4" translate="yes" xml:space="preserve">
          <source>Completely destroy a vm. Clean up its connections with other existing vms, unbind all its directives, turn off all event listeners.</source>
          <target state="translated">彻底销毁一个vm。清理它与其他现有vms的连接,解除所有指令的绑定,关闭所有事件监听器。</target>
        </trans-unit>
        <trans-unit id="60b812cb2013aa4e729edf7ad740fb109d1d148d" translate="yes" xml:space="preserve">
          <source>Complex expressions in your templates make them less declarative. We should strive to describe &lt;em&gt;what&lt;/em&gt; should appear, not &lt;em&gt;how&lt;/em&gt; we&amp;rsquo;re computing that value. Computed properties and methods also allow the code to be reused.</source>
          <target state="translated">模板中的复杂表达式使它们的声明性降低。我们应该努力来描述&lt;em&gt;什么&lt;/em&gt;应该出现，而不是&lt;em&gt;怎么&lt;/em&gt;我们计算该值。计算的属性和方法还允许代码被重用。</target>
        </trans-unit>
        <trans-unit id="d6ea587468c4ec32d2f1887fb0a3ec352fc003ce" translate="yes" xml:space="preserve">
          <source>Complex expressions in your templates make them less declarative. We should strive to describe &lt;em&gt;what&lt;/em&gt; should appear, not &lt;em&gt;how&lt;/em&gt; we're computing that value. Computed properties and methods also allow the code to be reused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f564777ac40c723997c5eed12787c64f393c6531" translate="yes" xml:space="preserve">
          <source>Complexity</source>
          <target state="translated">Complexity</target>
        </trans-unit>
        <trans-unit id="a887f5d5cafcf13fc06727c3d798f2974765ab16" translate="yes" xml:space="preserve">
          <source>Component Instance Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cfb70bd503715674d13134e96b7c51983b3fec" translate="yes" xml:space="preserve">
          <source>Component Names</source>
          <target state="translated">组件名称</target>
        </trans-unit>
        <trans-unit id="2299d18631ea2d15a7f23fd390e4ec138046f219" translate="yes" xml:space="preserve">
          <source>Component Registration</source>
          <target state="translated">组件注册</target>
        </trans-unit>
        <trans-unit id="2dbce043918d35d9470549bbaa4939fb679a4bf3" translate="yes" xml:space="preserve">
          <source>Component Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76dbbe8a930e0a69d5d347fb2b8857c7f5d041c2" translate="yes" xml:space="preserve">
          <source>Component data</source>
          <target state="translated">组件数据</target>
        </trans-unit>
        <trans-unit id="07fa6f82748552fa6959798fe84402715f519155" translate="yes" xml:space="preserve">
          <source>Component data &lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">组件数据&lt;sup&gt;必不可少&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="64bc268ef382bae5f88f2c24682efcc3dd8d542d" translate="yes" xml:space="preserve">
          <source>Component events should now be declared with the &lt;code&gt;emits&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9005720e38400bff72f424ff551489a82d1f4c9" translate="yes" xml:space="preserve">
          <source>Component files</source>
          <target state="translated">组成文件</target>
        </trans-unit>
        <trans-unit id="c206757423c2c2602ec849d9038c631cc34cd0b7" translate="yes" xml:space="preserve">
          <source>Component files &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;组件文件&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="05782a5202992289472cb0adc5836d14fe8b6fa5" translate="yes" xml:space="preserve">
          <source>Component name casing in JS/JSX</source>
          <target state="translated">JS/JSX中的组件名称外壳</target>
        </trans-unit>
        <trans-unit id="8d58e990dc1ea08678461d19736c9b83a1f066ef" translate="yes" xml:space="preserve">
          <source>Component name casing in JS/JSX &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt; JS / JSX中的组件名称大小写&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="f05bdbf09514c1b53e40160337200dfc490f992d" translate="yes" xml:space="preserve">
          <source>Component name casing in templates</source>
          <target state="translated">模板中的组件名称套管</target>
        </trans-unit>
        <trans-unit id="1e18a489bfacb69f08dfc8d90630a5d062c2d2f7" translate="yes" xml:space="preserve">
          <source>Component name casing in templates &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;模板中的组件名称框&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="629cc2db9c759e3cc55d230b3df6ceeaea9a0092" translate="yes" xml:space="preserve">
          <source>Component root nodes</source>
          <target state="translated">组件根节点</target>
        </trans-unit>
        <trans-unit id="a123d7f78d70c0b6001f7359d734ea29890190d1" translate="yes" xml:space="preserve">
          <source>Component style scoping</source>
          <target state="translated">组件风格范围</target>
        </trans-unit>
        <trans-unit id="567ca8f77c3219302641a1a6b3cbf6b6345370dd" translate="yes" xml:space="preserve">
          <source>Component style scoping &lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">组件样式作用域&lt;sup&gt;必不可少&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="7bbaeb30b003b383abf66a05fbb65d25d9b1335d" translate="yes" xml:space="preserve">
          <source>Component-Scoped CSS</source>
          <target state="translated">组件范围化的CSS</target>
        </trans-unit>
        <trans-unit id="6bd90fa3ceed4851dbf609ff767a5e21884509aa" translate="yes" xml:space="preserve">
          <source>Component-scoped CSS</source>
          <target state="translated">组件范围的CSS</target>
        </trans-unit>
        <trans-unit id="8d0cf1a050de42b443ac925117ffdf995c1b67b0" translate="yes" xml:space="preserve">
          <source>Component-scoped CSS (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cc863bd6ebde8b18b087a1a41708311c44c9c8" translate="yes" xml:space="preserve">
          <source>Component/instance options order</source>
          <target state="translated">组成部分/实例选项顺序</target>
        </trans-unit>
        <trans-unit id="f99f2514ac8da860e451570040ac9cb079725a4d" translate="yes" xml:space="preserve">
          <source>Component/instance options order &lt;sup&gt;recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;推荐的&lt;/sup&gt;组件/实例选项顺序&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="630acc980e704e87c41531a9bf0ab1c959379bd2" translate="yes" xml:space="preserve">
          <source>Components - &lt;code&gt;.sync&lt;/code&gt; Modifier</source>
          <target state="translated">组件 &lt;code&gt;.sync&lt;/code&gt; 修饰符</target>
        </trans-unit>
        <trans-unit id="d697039b56319687b789c001bdf552b6a593e277" translate="yes" xml:space="preserve">
          <source>Components - Cheap Static Components with &lt;code&gt;v-once&lt;/code&gt;</source>
          <target state="translated">组件-带有 &lt;code&gt;v-once&lt;/code&gt; 的廉价静态组件</target>
        </trans-unit>
        <trans-unit id="d625a365fe460c7ab04d19527319878856813a39" translate="yes" xml:space="preserve">
          <source>Components - Custom Events</source>
          <target state="translated">组件-自定义事件</target>
        </trans-unit>
        <trans-unit id="69cc86f0e375b71a83275042d25019bde0a799a9" translate="yes" xml:space="preserve">
          <source>Components - Form Input Components using Custom Events</source>
          <target state="translated">组件-使用自定义事件的表单输入组件</target>
        </trans-unit>
        <trans-unit id="ed808ded769fe1e869b0b0eb75743c5cb99a86fd" translate="yes" xml:space="preserve">
          <source>Components - Props</source>
          <target state="translated">组件--道具</target>
        </trans-unit>
        <trans-unit id="10badeeb0b180e6f4fa46f1b15d0aa67f6c92fd6" translate="yes" xml:space="preserve">
          <source>Components - Slots</source>
          <target state="translated">组件-插槽</target>
        </trans-unit>
        <trans-unit id="6a8337b74e1a1b3b9d6b1d47003c0d53d7467618" translate="yes" xml:space="preserve">
          <source>Components Basics</source>
          <target state="translated">组件基础知识</target>
        </trans-unit>
        <trans-unit id="210b093c9d529435bd265dfba160e9bc0cc42380" translate="yes" xml:space="preserve">
          <source>Components Created by Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a0fec9dace472c37dae5a959b04b6a0009286c" translate="yes" xml:space="preserve">
          <source>Components are reusable Vue instances with a name: in this case, &lt;code&gt;&amp;lt;button-counter&amp;gt;&lt;/code&gt;. We can use this component as a custom element inside a root Vue instance created with &lt;code&gt;new Vue&lt;/code&gt;:</source>
          <target state="translated">组件是可重用的Vue实例，其名称为：在这种情况下为 &lt;code&gt;&amp;lt;button-counter&amp;gt;&lt;/code&gt; 。我们可以将此组件用作使用 &lt;code&gt;new Vue&lt;/code&gt; 创建的根Vue实例中的自定义元素：</target>
        </trans-unit>
        <trans-unit id="2bfc01b12f5156b43de8ec8a935476f6411110b7" translate="yes" xml:space="preserve">
          <source>Components are reusable instances with a name: in this case, &lt;code&gt;&amp;lt;button-counter&amp;gt;&lt;/code&gt;. We can use this component as a custom element inside a root instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe22238a07bd729b9368a1ce01069d211a98d786" translate="yes" xml:space="preserve">
          <source>Components can be reused as many times as you want:</source>
          <target state="translated">组件可以重复使用,次数不限。</target>
        </trans-unit>
        <trans-unit id="5b8c94b116d43a888484c937f13d55f1ba3fd31e" translate="yes" xml:space="preserve">
          <source>Components can recursively invoke themselves in their own template. However, they can only do so with the &lt;code&gt;name&lt;/code&gt; option:</source>
          <target state="translated">组件可以在自己的模板中递归调用自己。但是，他们只能使用 &lt;code&gt;name&lt;/code&gt; 选项来这样做：</target>
        </trans-unit>
        <trans-unit id="751b8b7146d51c067716448a26cd434906e1c55f" translate="yes" xml:space="preserve">
          <source>Components can specify requirements for its props, such as the types you&amp;rsquo;ve already seen. If a requirement isn&amp;rsquo;t met, Vue will warn you in the browser&amp;rsquo;s JavaScript console. This is especially useful when developing a component that&amp;rsquo;s intended to be used by others.</source>
          <target state="translated">组件可以指定其道具的要求，例如您已经看到的类型。如果不满足要求，Vue将在浏览器的JavaScript控制台中警告您。这在开发打算供他人使用的组件时特别有用。</target>
        </trans-unit>
        <trans-unit id="bd42b95624c88531a1bf42404c11ffe1d832492b" translate="yes" xml:space="preserve">
          <source>Components can specify requirements for their props, such as the types you've already seen. If a requirement isn't met, Vue will warn you in the browser's JavaScript console. This is especially useful when developing a component that's intended to be used by others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fee40168c1a374ccf26caec6fd7fe0c040bc31c" translate="yes" xml:space="preserve">
          <source>Components now always replace the element they&amp;rsquo;re bound to. To simulate the behavior of &lt;code&gt;replace: false&lt;/code&gt;, you can wrap your root component with an element similar to the one you&amp;rsquo;re replacing. For example:</source>
          <target state="translated">现在，组件始终替换它们绑定到的元素。为了模拟 &lt;code&gt;replace: false&lt;/code&gt; 的行为，可以用与要替换的元素相似的元素包装根组件。例如：</target>
        </trans-unit>
        <trans-unit id="c2e6a0f1ecf6c973ca47ca7186c80185b6b96f21" translate="yes" xml:space="preserve">
          <source>Components that self-close communicate that they not only have no content, but are &lt;strong&gt;meant&lt;/strong&gt; to have no content. It&amp;rsquo;s the difference between a blank page in a book and one labeled &amp;ldquo;This page intentionally left blank.&amp;rdquo; Your code is also cleaner without the unnecessary closing tag.</source>
          <target state="translated">自关闭的组件表明它们不仅不包含任何内容，而且&lt;strong&gt;意味着&lt;/strong&gt;不包含任何内容。这是一本书中的空白页与标有&amp;ldquo;此页故意留为空白&amp;rdquo;的页之间的区别。您的代码也更加干净，没有不必要的结束标记。</target>
        </trans-unit>
        <trans-unit id="2e223bc7b893df797c91c9e1ab13b87188f6c0b5" translate="yes" xml:space="preserve">
          <source>Components that self-close communicate that they not only have no content, but are &lt;strong&gt;meant&lt;/strong&gt; to have no content. It's the difference between a blank page in a book and one labeled &quot;This page intentionally left blank.&quot; Your code is also cleaner without the unnecessary closing tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660d87cb56480f4244feeffc6da7619b7edbffc0" translate="yes" xml:space="preserve">
          <source>Composing with Components</source>
          <target state="translated">使用组件进行合成</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="612f6427c9092a5834602047d990b4384c86915b" translate="yes" xml:space="preserve">
          <source>Composition API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75064cf3469567a0906eb3d0680b3f68039ca5b" translate="yes" xml:space="preserve">
          <source>Composition API Provide / Inject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033df9e53f3c41d998764183ce8c3889a5f1ff4c" translate="yes" xml:space="preserve">
          <source>Composition API template refs do not have special handling when used inside &lt;code&gt;v-for&lt;/code&gt;. Instead, use function refs to perform custom handling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc04ee3668d9ea0faa68ca105b627ca813d5edea" translate="yes" xml:space="preserve">
          <source>Computed Caching vs Methods</source>
          <target state="translated">计算型缓存与方法型缓存</target>
        </trans-unit>
        <trans-unit id="70bd86bd3f0d5ae194697eb2880e50cca80f426b" translate="yes" xml:space="preserve">
          <source>Computed Properties</source>
          <target state="translated">计算属性</target>
        </trans-unit>
        <trans-unit id="8e13d4ac07b657d278dceef0e18d67d34114bf52" translate="yes" xml:space="preserve">
          <source>Computed Properties and Watchers</source>
          <target state="translated">计算属性和观察者</target>
        </trans-unit>
        <trans-unit id="c1a9203aa3517f44a8e435470ea368b59319cf82" translate="yes" xml:space="preserve">
          <source>Computed Setter</source>
          <target state="translated">计算设置器</target>
        </trans-unit>
        <trans-unit id="1e06c887f10122986c04ecdd1ab9dfd4d7865a38" translate="yes" xml:space="preserve">
          <source>Computed and Watch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd08b54e68d5ba648c3e2cd7b54a13866ac8eb9" translate="yes" xml:space="preserve">
          <source>Computed and watch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e65524c92dd7a22334161d17dd8cd47bc733c7" translate="yes" xml:space="preserve">
          <source>Computed properties</source>
          <target state="translated">计算的属性</target>
        </trans-unit>
        <trans-unit id="5727316a77d42c90873eecef08909f47ad335bba" translate="yes" xml:space="preserve">
          <source>Computed properties are by default getter-only, but you can also provide a setter when you need it:</source>
          <target state="translated">计算出的属性默认是只获取者,但你也可以在需要的时候提供一个设置者。</target>
        </trans-unit>
        <trans-unit id="27d67cf72a16ce6f7e7fef0d1c238d2dcd768988" translate="yes" xml:space="preserve">
          <source>Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance&amp;rsquo;s scope (i.e. not reactive), the computed property will &lt;strong&gt;not&lt;/strong&gt; be updated.</source>
          <target state="translated">计算的属性将被缓存，并且仅在响应性依赖项更改时重新计算。请注意，如果某个依赖项超出了实例的范围（即非反应性），则&lt;strong&gt;不会&lt;/strong&gt;更新计算出的属性。</target>
        </trans-unit>
        <trans-unit id="c890f6dc666bb9c2f3556ce3254daf383ff8b029" translate="yes" xml:space="preserve">
          <source>Computed properties are cached, and only re-computed on reactive dependency changes. Note that if a certain dependency is out of the instance's scope (i.e. not reactive), the computed property will &lt;strong&gt;not&lt;/strong&gt; be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6cb9fc6557b5cec7e768c24fd8980831e819b3" translate="yes" xml:space="preserve">
          <source>Computed properties to be mixed into the Vue instance. All getters and setters have their &lt;code&gt;this&lt;/code&gt; context automatically bound to the Vue instance.</source>
          <target state="translated">计算的属性将混合到Vue实例中。所有获取器和设置器的 &lt;code&gt;this&lt;/code&gt; 上下文都自动绑定到Vue实例。</target>
        </trans-unit>
        <trans-unit id="48ab0d8dbe646465af24fe2f47bcf4a51645bc7c" translate="yes" xml:space="preserve">
          <source>Computed properties to be mixed into the component instance. All getters and setters have their &lt;code&gt;this&lt;/code&gt; context automatically bound to the component instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f0837bea1fdaf6e388e36e0ab193471bd627ad" translate="yes" xml:space="preserve">
          <source>Computed values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3e85efcd1f25e0bcf9f469bc4672d0184a12ae" translate="yes" xml:space="preserve">
          <source>Computed values will automatically infer the type from returned value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf24801a2b491e5ed7c286c67cc4ec735dfe0bf" translate="yes" xml:space="preserve">
          <source>Computed vs Watched Property</source>
          <target state="translated">计算与观察属性</target>
        </trans-unit>
        <trans-unit id="e0c81be5eacbe33990b3264613af44e7e00436e7" translate="yes" xml:space="preserve">
          <source>Conditional Groups with &lt;code&gt;v-if&lt;/code&gt; on &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 上带有 &lt;code&gt;v-if&lt;/code&gt; 的条件组</target>
        </trans-unit>
        <trans-unit id="ea9a4bba446372af01e0eb85f26e0ec3d5f7469e" translate="yes" xml:space="preserve">
          <source>Conditional Rendering</source>
          <target state="translated">有条件渲染</target>
        </trans-unit>
        <trans-unit id="6281861540d03adef45443a41dbce83bfb9f4b5a" translate="yes" xml:space="preserve">
          <source>Conditional display (using &lt;code&gt;v-show&lt;/code&gt;)</source>
          <target state="translated">有条件的显示（使用 &lt;code&gt;v-show&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="58a327cee7af8b8174524170058798f55fcb2a26" translate="yes" xml:space="preserve">
          <source>Conditional rendering (using &lt;code&gt;v-if&lt;/code&gt;)</source>
          <target state="translated">条件渲染（使用 &lt;code&gt;v-if&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="c0ffe0e0a9f1b16c5eadc124528b283345b2eb8a" translate="yes" xml:space="preserve">
          <source>Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, its content will be extracted as the conditional block.</source>
          <target state="translated">根据表达式值的真实性有条件地渲染元素。元素及其包含的指令/组件在切换过程中被销毁并重建。如果该元素是 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 元素，则其内容将被提取为条件块。</target>
        </trans-unit>
        <trans-unit id="b5a6d3bea1f126fba65a513b23bf60879adf5de8" translate="yes" xml:space="preserve">
          <source>Conditionals and Loops</source>
          <target state="translated">条件和循环</target>
        </trans-unit>
        <trans-unit id="78d3e47c861a9d35861af2b80ffb69e1e64a09e1" translate="yes" xml:space="preserve">
          <source>Configure whether to allow &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt; inspection. This option&amp;rsquo;s default value is &lt;code&gt;true&lt;/code&gt; in development builds and &lt;code&gt;false&lt;/code&gt; in production builds. You can set it to &lt;code&gt;true&lt;/code&gt; to enable inspection for production builds.</source>
          <target state="translated">配置是否允许&lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt;检查。此选项的默认值在开发版本中为 &lt;code&gt;true&lt;/code&gt; ，在生产版本中为 &lt;code&gt;false&lt;/code&gt; 。您可以将其设置为 &lt;code&gt;true&lt;/code&gt; 以启用对生产版本的检查。</target>
        </trans-unit>
        <trans-unit id="7a7a2cde18508fcdbc0eef0dc1900b96e726cb25" translate="yes" xml:space="preserve">
          <source>Configuring Rollup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9fd0a5445b2c11f24138c5f6f959d6d31fb4e7" translate="yes" xml:space="preserve">
          <source>Configuring package.json</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da9329f786cfa741c2201c8a027d69ba27a5fd4" translate="yes" xml:space="preserve">
          <source>Consequently, Vue will now add all event listeners that are &lt;em&gt;not&lt;/em&gt; defined as component-emitted events in the child as native event listeners to the child's root element (unless &lt;code&gt;inheritAttrs: false&lt;/code&gt; has been set in the child's options).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2971bfedbb04df6c46ea48b59bc226c1e09690" translate="yes" xml:space="preserve">
          <source>Consider the following HTML structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e68a873a2be3470675b9ee933b98d781ae7fef" translate="yes" xml:space="preserve">
          <source>Constraints</source>
          <target state="translated">Constraints</target>
        </trans-unit>
        <trans-unit id="aecda5716105c1bacff201d8cbf7ce49204ec9e3" translate="yes" xml:space="preserve">
          <source>Contains a hyphen (i.e., has multiple words connected with the hyphen symbol)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5245043aebcf4a49be946c4f6e0eb2145a5b9e" translate="yes" xml:space="preserve">
          <source>Contains hard-coded prod/dev branches, and the prod build is pre-minified. Use the &lt;code&gt;*.prod.js&lt;/code&gt; files for production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445aad4957c1feec85e04d68a340464226aefa88" translate="yes" xml:space="preserve">
          <source>Contains parent-scope &lt;code&gt;v-on&lt;/code&gt; event listeners (without &lt;code&gt;.native&lt;/code&gt; modifiers). This can be passed down to an inner component via &lt;code&gt;v-on=&quot;$listeners&quot;&lt;/code&gt; - useful when creating transparent wrapper components.</source>
          <target state="translated">包含父级 &lt;code&gt;v-on&lt;/code&gt; 事件侦听器（不带 &lt;code&gt;.native&lt;/code&gt; 修饰符）。可以通过 &lt;code&gt;v-on=&quot;$listeners&quot;&lt;/code&gt; 将其传递给内部组件-在创建透明包装器组件时很有用。</target>
        </trans-unit>
        <trans-unit id="7afa3dae881ae74558506ce0892c24e74624d285" translate="yes" xml:space="preserve">
          <source>Contains parent-scope attribute bindings (except for &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt;) that are not recognized (and extracted) as props. When a component doesn&amp;rsquo;t have any declared props, this essentially contains all parent-scope bindings (except for &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt;), and can be passed down to an inner component via &lt;code&gt;v-bind=&quot;$attrs&quot;&lt;/code&gt; - useful when creating higher-order components.</source>
          <target state="translated">包含不被识别（提取）为props的parent-scope属性绑定（ &lt;code&gt;class&lt;/code&gt; 和 &lt;code&gt;style&lt;/code&gt; 除外）。当组件没有任何已声明的prop时，它实质上包含所有父作用域绑定（ &lt;code&gt;class&lt;/code&gt; 和 &lt;code&gt;style&lt;/code&gt; 除外），并且可以通过 &lt;code&gt;v-bind=&quot;$attrs&quot;&lt;/code&gt; 传递给内部组件-在创建更高版本的组件时很有用顺序组件。</target>
        </trans-unit>
        <trans-unit id="40e4af351f17e12f8ec670fbb7ac5c3f97a6e0de" translate="yes" xml:space="preserve">
          <source>Contains parent-scope attribute bindings and events that are not recognized (and extracted) as component &lt;a href=&quot;options-data#props&quot;&gt;props&lt;/a&gt; or &lt;a href=&quot;options-data#emits&quot;&gt;custom events&lt;/a&gt;. When a component doesn't have any declared props or custom events, this essentially contains all parent-scope bindings, and can be passed down to an inner component via &lt;code&gt;v-bind=&quot;$attrs&quot;&lt;/code&gt; - useful when creating higher-order components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59495b7ca0f2a9b72ff075971da46a0a4c80ab3d" translate="yes" xml:space="preserve">
          <source>Content Distribution with Slots</source>
          <target state="translated">有插槽的内容分发</target>
        </trans-unit>
        <trans-unit id="ca3d2dc1d907b17312d85e3f062534361d8e0f00" translate="yes" xml:space="preserve">
          <source>Content inserted via named &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; no longer preserves the &lt;code&gt;slot&lt;/code&gt; attribute. Use a wrapper element to style them, or for advanced use cases, modify the inserted content programmatically using &lt;a href=&quot;render-function&quot;&gt;render functions&lt;/a&gt;.</source>
          <target state="translated">通过名为 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 插入的内容不再保留 &lt;code&gt;slot&lt;/code&gt; 属性。使用包装元素为它们设置样式，或者在高级用例中，使用&lt;a href=&quot;render-function&quot;&gt;渲染功能以&lt;/a&gt;编程方式修改插入的内容。</target>
        </trans-unit>
        <trans-unit id="b5eb91b0829532e5438126543dc42de53e0dd9b3" translate="yes" xml:space="preserve">
          <source>Content that is relevant and that users will likely want to navigate to. Label must be provided for this element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="57d31c2eb33df9234757a4d517416148a5a9edf8" translate="yes" xml:space="preserve">
          <source>Contribute Code</source>
          <target state="translated">贡献代码</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="7d0d4a0cab34f47e91912629a442a10056ba6924" translate="yes" xml:space="preserve">
          <source>Controlling Reusable Elements with &lt;code&gt;key&lt;/code&gt;</source>
          <target state="translated">用 &lt;code&gt;key&lt;/code&gt; 控制可重用元素</target>
        </trans-unit>
        <trans-unit id="5d62c87737211740fe0f51a9aec4aaf2fdb68d5a" translate="yes" xml:space="preserve">
          <source>Controlling Updates</source>
          <target state="translated">控制更新</target>
        </trans-unit>
        <trans-unit id="be274b2406040eb23ad4f18793d576d72de70ae6" translate="yes" xml:space="preserve">
          <source>Converts a reactive object to a plain object where each property of the resulting object is a &lt;a href=&quot;#ref&quot;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt; pointing to the corresponding property of the original object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abf3f548706125bce97eab08626d8b83f998bed" translate="yes" xml:space="preserve">
          <source>Create a &amp;ldquo;subclass&amp;rdquo; of the base Vue constructor. The argument should be an object containing component options.</source>
          <target state="translated">创建基础Vue构造函数的&amp;ldquo;子类&amp;rdquo;。参数应为包含组件选项的对象。</target>
        </trans-unit>
        <trans-unit id="7b636affe4316b21cee1c56f29df138a02ece0fc" translate="yes" xml:space="preserve">
          <source>Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.</source>
          <target state="translated">在表单输入元素或组件上创建双向绑定。关于详细的用法和其他说明,请参见下面链接的指南部分。</target>
        </trans-unit>
        <trans-unit id="e0c287c473866392ca7f05f478d1a331b3f94512" translate="yes" xml:space="preserve">
          <source>Creates a customized ref with explicit control over its dependency tracking and updates triggering. It expects a factory function, which receives &lt;code&gt;track&lt;/code&gt; and &lt;code&gt;trigger&lt;/code&gt; functions as arguments and should return an object with &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c070dd7a22a2b8ac3a00dcf394b9bb42e3c57bde" translate="yes" xml:space="preserve">
          <source>Creates a proxy that makes its own properties readonly, but does not perform deep readonly conversion of nested objects (exposes raw values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4933d249c0a06046a33a8545daaf20ea767fd2f1" translate="yes" xml:space="preserve">
          <source>Creates a reactive proxy that tracks reactivity of its own properties but does not perform deep reactive conversion of nested objects (exposes raw values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7230afa88e0fe715580041eaaf4db18b0013f1f" translate="yes" xml:space="preserve">
          <source>Creates a ref that tracks its own &lt;code&gt;.value&lt;/code&gt; mutation but doesn't make its value reactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8031eb92d36dd3258280a447c01dfb377169882" translate="yes" xml:space="preserve">
          <source>Creates an async component that will be loaded only when it's necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d4b0d54af8d43a7ebdd772c249685559cfc2cb" translate="yes" xml:space="preserve">
          <source>Creating Component VNodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4955ca6021637be97028e5001914e72d9453df79" translate="yes" xml:space="preserve">
          <source>Creating Standalone Reactive Values as &lt;code&gt;refs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411f67b2d6caf45fc0664fef6e8ad77135abe64b" translate="yes" xml:space="preserve">
          <source>Creating Vue components allows us to extract repeatable parts of the interface coupled with its functionality into reusable pieces of code. This alone can get our application pretty far in terms of maintainability and flexibility. However, our collective experience has proved that this alone might not be enough, especially when your application is getting really big &amp;ndash; think several hundred components. When dealing with such large applications, sharing and reusing code becomes especially important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4428591f6bfdcff9018444de4e4b2c12acd1b20" translate="yes" xml:space="preserve">
          <source>Creating a Vue Instance</source>
          <target state="translated">创建Vue实例</target>
        </trans-unit>
        <trans-unit id="b009a01dd1e99b8b973c753ee1657cd37b2e183e" translate="yes" xml:space="preserve">
          <source>Creating an Application Instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0bad3e2293e6592628213507af5552ae02f3d37" translate="yes" xml:space="preserve">
          <source>Cross-browser testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa68b43cccf63727634ad0b61db7f38266f6488" translate="yes" xml:space="preserve">
          <source>Currently in Beta - Vuex and Router integration is still WIP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25a5433a4b0677aa872e250bb371466ff37cbdf" translate="yes" xml:space="preserve">
          <source>Custom Directives</source>
          <target state="translated">自定义指令</target>
        </trans-unit>
        <trans-unit id="b2605830095ea9664e9b6b0e78b2dfce357336ca" translate="yes" xml:space="preserve">
          <source>Custom Directives &lt;sup&gt;simplified&lt;/sup&gt;</source>
          <target state="translated">自定义指令&lt;sup&gt;简化&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="27e4c05b913f36d7873e62728e841a2e8ed91851" translate="yes" xml:space="preserve">
          <source>Custom Elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ac1d58b77838fd4a14634c8694773b2b55bb59" translate="yes" xml:space="preserve">
          <source>Custom Elements Interop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f552fb7d2523e7c921d75d7494408388c644e4" translate="yes" xml:space="preserve">
          <source>Custom Events</source>
          <target state="translated">定制活动</target>
        </trans-unit>
        <trans-unit id="b7921e476147d86cf859de06a785218c56f57833" translate="yes" xml:space="preserve">
          <source>Custom Option Merge Strategies</source>
          <target state="translated">自定义期权合并策略</target>
        </trans-unit>
        <trans-unit id="45b3b47d95e376c23eb2bf9a7026857086058e80" translate="yes" xml:space="preserve">
          <source>Custom Transition Classes</source>
          <target state="translated">自定义过渡类</target>
        </trans-unit>
        <trans-unit id="6342d2a1e7f2a3e93125d66fe5182864e99353a0" translate="yes" xml:space="preserve">
          <source>Custom component events</source>
          <target state="translated">自定义组件事件</target>
        </trans-unit>
        <trans-unit id="8d940b69d17b752557bab9827083a1a33173114f" translate="yes" xml:space="preserve">
          <source>Custom directive API changed to align with component lifecycle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0181fa719d3be2888b2c81fe56540b5c47984363" translate="yes" xml:space="preserve">
          <source>Custom elements whitelisting is now performed during template compilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87204d79f0d85c763f871e11f9645cfcdbf30541" translate="yes" xml:space="preserve">
          <source>Custom events can also be used to create custom inputs that work with &lt;code&gt;v-model&lt;/code&gt;. Remember that:</source>
          <target state="translated">自定义事件还可以用于创建与 &lt;code&gt;v-model&lt;/code&gt; 一起使用的自定义输入。请记住：</target>
        </trans-unit>
        <trans-unit id="34e532f7f85fc6e1566da2ed31f40f937a3a6670" translate="yes" xml:space="preserve">
          <source>Custom renderers can pass in the platform specific types like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c39a207e283bc7bdcf96aa4cc5abcb84d2d6a23" translate="yes" xml:space="preserve">
          <source>Custom validator function that takes the prop value as the sole argument. In a non-production environment, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails). You can read more about prop validation &lt;a href=&quot;../guide/components-props#Prop-Validation&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">将prop值作为唯一参数的自定义验证器函数。在非生产环境中，如果此函数返回虚假值（即，验证失败），则会引发控制台警告。您可以&lt;a href=&quot;../guide/components-props#Prop-Validation&quot;&gt;在此处&lt;/a&gt;阅读有关prop验证的更多信息。</target>
        </trans-unit>
        <trans-unit id="b163c0684317e077358b18b7072cf5ff3ed1dd23" translate="yes" xml:space="preserve">
          <source>Customized Built-in Elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9482d884bbaefa018603b26f6945593b108f36a4" translate="yes" xml:space="preserve">
          <source>Customizing Component &lt;code&gt;v-model&lt;/code&gt;</source>
          <target state="translated">自定义组件 &lt;code&gt;v-model&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d993ba3453092fb751f5b03754015ef413312eb8" translate="yes" xml:space="preserve">
          <source>Cypress Testing Library (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d40faf4376654187131af4e62a05bff963bb93" translate="yes" xml:space="preserve">
          <source>Cypress' Official Website (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfed62014c1ae52446eebdc7c0230e3d1992ba8d" translate="yes" xml:space="preserve">
          <source>Cypress.io</source>
          <target state="translated">Cypress.io</target>
        </trans-unit>
        <trans-unit id="dca25f7239978714a47ef1b0f58c66760865b273" translate="yes" xml:space="preserve">
          <source>Cypress.io is a testing framework that aims to enhance developer productivity by enabling developers to reliably test their applications while providing a first class developer experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f6f421ef32670498c220ee8ee339df076a5ad9" translate="yes" xml:space="preserve">
          <source>DOM</source>
          <target state="translated">DOM</target>
        </trans-unit>
        <trans-unit id="06a565f3773a61c8641dff267c8ded6bcd9b3f9c" translate="yes" xml:space="preserve">
          <source>DOM Template Parsing Caveats</source>
          <target state="translated">DOM模板解析注意事项</target>
        </trans-unit>
        <trans-unit id="b51cca4b51fb1200a40ecaa657030eabf6191260" translate="yes" xml:space="preserve">
          <source>DOM-Focused Instance Methods</source>
          <target state="translated">以DOM为中心的实例方法</target>
        </trans-unit>
        <trans-unit id="e5e429bcc9c2e4a41a3c7a4d96203be6cb273b11" translate="yes" xml:space="preserve">
          <source>Data</source>
          <target state="translated">Data</target>
        </trans-unit>
        <trans-unit id="1b5526b4e58b1155390d6513a29a1da140c24070" translate="yes" xml:space="preserve">
          <source>Data Binding Syntax - interpolations</source>
          <target state="translated">数据绑定语法--插值</target>
        </trans-unit>
        <trans-unit id="0d8eeff8c2ab8a6c656c195c4b8389d3f6b2bf7d" translate="yes" xml:space="preserve">
          <source>Data Option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2029b7397dab2ae925d537c8d34a1486d691af" translate="yes" xml:space="preserve">
          <source>Data Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b383971471f26d7fe0ced26f2256208b2163fc2" translate="yes" xml:space="preserve">
          <source>Data Properties and Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77366f440a2b74b929dfbae3704e0ee470afe05e" translate="yes" xml:space="preserve">
          <source>Data and Methods</source>
          <target state="translated">数据和方法</target>
        </trans-unit>
        <trans-unit id="d38cca5da9c7df446a12182ab09218cd420e4017" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="translated">数据绑定</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="2feee70bbca629f658947940a904eb85951db366" translate="yes" xml:space="preserve">
          <source>Debouncing and Throttling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbd5db7967ac1aa2137f6c5db041d637cd7562b" translate="yes" xml:space="preserve">
          <source>Debouncing is used to limit how often we execute Ajax requests and other expensive operations. Vue&amp;rsquo;s &lt;code&gt;debounce&lt;/code&gt; attribute parameter for &lt;code&gt;v-model&lt;/code&gt; made this easy for very simple cases, but it actually debounced &lt;strong&gt;state updates&lt;/strong&gt; rather than the expensive operations themselves. It&amp;rsquo;s a subtle difference, but it comes with limitations as an application grows.</source>
          <target state="translated">防反跳用于限制我们执行Ajax请求和其他昂贵操作的频率。Vue的 &lt;code&gt;v-model&lt;/code&gt; 的 &lt;code&gt;debounce&lt;/code&gt; 属性参数在非常简单的情况下使此操作变得容易，但是实际上它对&lt;strong&gt;状态更新进行了&lt;/strong&gt;反抖动，而不是昂贵的操作本身。这是一个细微的差异，但是随着应用程序的增长，它具有局限性。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f2b400be160585ef7d6a1e0a5c8cd2d26e163dfb" translate="yes" xml:space="preserve">
          <source>Declarative Rendering</source>
          <target state="translated">声明式渲染</target>
        </trans-unit>
        <trans-unit id="60326be113e84d326e32fb44f3563b6652a74f33" translate="yes" xml:space="preserve">
          <source>Declaring Reactive Properties</source>
          <target state="translated">声明反应性属性</target>
        </trans-unit>
        <trans-unit id="b991967e09501eb4e1f3d99f121090c22493ce55" translate="yes" xml:space="preserve">
          <source>Declaring Reactive State</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19119a0240ee87794f1539cc386759e6432b0af1" translate="yes" xml:space="preserve">
          <source>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you&amp;rsquo;ve changed some data to wait for the DOM update.</source>
          <target state="translated">推迟在下一个DOM更新周期后执行的回调。更改一些数据以等待DOM更新后，请立即使用它。</target>
        </trans-unit>
        <trans-unit id="db1b7ad7e26590367943109c215c7f0efee9147c" translate="yes" xml:space="preserve">
          <source>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you&amp;rsquo;ve changed some data to wait for the DOM update. This is the same as the global &lt;code&gt;Vue.nextTick&lt;/code&gt;, except that the callback&amp;rsquo;s &lt;code&gt;this&lt;/code&gt; context is automatically bound to the instance calling this method.</source>
          <target state="translated">推迟在下一个DOM更新周期后执行的回调。更改一些数据以等待DOM更新后，请立即使用它。这与全局 &lt;code&gt;Vue.nextTick&lt;/code&gt; 相同，除了回调的 &lt;code&gt;this&lt;/code&gt; 上下文自动绑定到调用此方法的实例。</target>
        </trans-unit>
        <trans-unit id="c7ccb121dbbd7c9fece3e6131d5cff3243ae8699" translate="yes" xml:space="preserve">
          <source>Defer the callback to be executed after the next DOM update cycle. Use it immediately after you've changed some data to wait for the DOM update. This is the same as the global &lt;code&gt;nextTick&lt;/code&gt;, except that the callback's &lt;code&gt;this&lt;/code&gt; context is automatically bound to the instance calling this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aeedfa2bb6af21a6c240454b04a9d9a6077d201" translate="yes" xml:space="preserve">
          <source>Define custom key alias(es) for &lt;code&gt;v-on&lt;/code&gt;.</source>
          <target state="translated">为 &lt;code&gt;v-on&lt;/code&gt; 定义自定义密钥别名。</target>
        </trans-unit>
        <trans-unit id="07cb7b03644814ccec1bd1576e0cdc6073329f9f" translate="yes" xml:space="preserve">
          <source>Define custom merging strategies for options.</source>
          <target state="translated">定义期权的自定义合并策略。</target>
        </trans-unit>
        <trans-unit id="80ef2f78a56b3bfe4204b710a675b829c1df038e" translate="yes" xml:space="preserve">
          <source>Define merging strategies for custom options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14e2bbf870e3072284518da52bbf318ef3de3e0" translate="yes" xml:space="preserve">
          <source>Define your own property (e.g. &lt;code&gt;isLoading&lt;/code&gt;), then update the loading state in a watcher on the route. For example, if fetching data with &lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;axios&lt;/a&gt;:</source>
          <target state="translated">定义自己的属性（例如 &lt;code&gt;isLoading&lt;/code&gt; ），然后在路线的观察程序中更新加载状态。例如，如果使用&lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;axios&lt;/a&gt;获取数据：</target>
        </trans-unit>
        <trans-unit id="7886c9ac31585e7059a2a594d6d51d9f8af55bc5" translate="yes" xml:space="preserve">
          <source>Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed.</source>
          <target state="translated">定义是否需要该道具。在非生产环境中,如果这个值是真实的,并且该道具没有被传递,那么将抛出一个控制台警告。</target>
        </trans-unit>
        <trans-unit id="f660541954298ae4692655fe04409c666828aee7" translate="yes" xml:space="preserve">
          <source>Defining Custom Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b68ef2f3f8abfa471302b3c718577183f35986" translate="yes" xml:space="preserve">
          <source>Defining Vue components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f936e16929c240786ce41c438c9b0e7d0bceebd5" translate="yes" xml:space="preserve">
          <source>Delete a property on an object. If the object is reactive, ensure the deletion triggers view updates. This is primarily used to get around the limitation that Vue cannot detect property deletions, but you should rarely need to use it.</source>
          <target state="translated">删除对象上的一个属性。如果对象是反应式的,确保删除会触发视图更新。这主要用于绕过Vue无法检测属性删除的限制,但您应该很少需要使用它。</target>
        </trans-unit>
        <trans-unit id="76d431baebcb16ff7fcbe15aee82bb0cf4ad4582" translate="yes" xml:space="preserve">
          <source>Denote named slots or slots that expect to receive props.</source>
          <target state="translated">表示命名的槽位或期望获得道具的槽位。</target>
        </trans-unit>
        <trans-unit id="93f478066632597368c3515b0d26e59c8236ff92" translate="yes" xml:space="preserve">
          <source>Denote the &quot;else block&quot; for &lt;code&gt;v-if&lt;/code&gt; or a &lt;code&gt;v-if&lt;/code&gt;/&lt;code&gt;v-else-if&lt;/code&gt; chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842c5903404ce876959dab4568e7002718d1057e" translate="yes" xml:space="preserve">
          <source>Denote the &quot;else if block&quot; for &lt;code&gt;v-if&lt;/code&gt;. Can be chained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142ea1eba23cdbbe5b68040400be1739264c9e4d" translate="yes" xml:space="preserve">
          <source>Denote the &amp;ldquo;else block&amp;rdquo; for &lt;code&gt;v-if&lt;/code&gt; or a &lt;code&gt;v-if&lt;/code&gt;/&lt;code&gt;v-else-if&lt;/code&gt; chain.</source>
          <target state="translated">表示 &lt;code&gt;v-if&lt;/code&gt; 或 &lt;code&gt;v-if&lt;/code&gt; / &lt;code&gt;v-else-if&lt;/code&gt; 链的&amp;ldquo;其他块&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="f2c984aaadf58ba802aed56b64dabd2310e7a5b4" translate="yes" xml:space="preserve">
          <source>Denote the &amp;ldquo;else if block&amp;rdquo; for &lt;code&gt;v-if&lt;/code&gt;. Can be chained.</source>
          <target state="translated">表示 &lt;code&gt;v-if&lt;/code&gt; 的&amp;ldquo; else if块&amp;rdquo; 。可以连锁。</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">依赖性注入</target>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="7c1f42119bffd331221f02c2d7e0adb0b031df05" translate="yes" xml:space="preserve">
          <source>Deprecated Syntax</source>
          <target state="translated">废弃的语法</target>
        </trans-unit>
        <trans-unit id="b8b597e25923a72a33f925de08f51f4c3f2f4683" translate="yes" xml:space="preserve">
          <source>Designing Interface Animation: Improving the User Experience Through Animation by Val Head (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cb89b8a232577c2f9306ba29cded197a4a54b2" translate="yes" xml:space="preserve">
          <source>Despite the existence of props and events, sometimes you might still need to directly access a child component in JavaScript. To achieve this you can assign a reference ID to the child component or HTML element using the &lt;code&gt;ref&lt;/code&gt; attribute. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bada1251cc0e33b470722abe048401582aa8546" translate="yes" xml:space="preserve">
          <source>Despite the existence of props and events, sometimes you might still need to directly access a child component in JavaScript. To achieve this you can assign a reference ID to the child component using the &lt;code&gt;ref&lt;/code&gt; attribute. For example:</source>
          <target state="translated">尽管存在道具和事件，但有时您可能仍需要直接访问JavaScript中的子组件。为此，您可以使用 &lt;code&gt;ref&lt;/code&gt; 属性为子组件分配参考ID 。例如：</target>
        </trans-unit>
        <trans-unit id="782db185d4f61f49501293ed0db6a1f0a217a3f3" translate="yes" xml:space="preserve">
          <source>Destructuring Reactive State</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b76287eafaba59f37405af3f173f6bfc44551a" translate="yes" xml:space="preserve">
          <source>Destructuring Slot Props</source>
          <target state="translated">破坏老虎机道具</target>
        </trans-unit>
        <trans-unit id="d33367ca6cf4485c4124cbc1ce9096200b2e9086" translate="yes" xml:space="preserve">
          <source>Detailed &lt;a href=&quot;../guide/component-props#prop-validation&quot;&gt;prop definitions&lt;/a&gt; have two advantages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c5a7fcb4118b23681170020a3bb0920d2f9716" translate="yes" xml:space="preserve">
          <source>Detailed &lt;a href=&quot;../guide/components#Prop-Validation&quot;&gt;prop definitions&lt;/a&gt; have two advantages:</source>
          <target state="translated">详细的&lt;a href=&quot;../guide/components#Prop-Validation&quot;&gt;道具定义&lt;/a&gt;有两个优点：</target>
        </trans-unit>
        <trans-unit id="7ca6b2f29bf0e683cffc5bfdaa2638ab6df0be0b" translate="yes" xml:space="preserve">
          <source>Detailed Explanation</source>
          <target state="translated">详细说明</target>
        </trans-unit>
        <trans-unit id="8c8c6abfff91f498dd73acf58f1980babfbb7e18" translate="yes" xml:space="preserve">
          <source>Detailed release notes for each version are available on &lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/CHANGELOG.md&quot;&gt;GitHub (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8399fc7ad135cd736adc13fe440302a07e98cb7" translate="yes" xml:space="preserve">
          <source>Detailed release notes for each version are available on &lt;a href=&quot;https://github.com/vuejs/vue/releases&quot;&gt;GitHub&lt;/a&gt;.</source>
          <target state="translated">每个版本的详细发行说明可在&lt;a href=&quot;https://github.com/vuejs/vue/releases&quot;&gt;GitHub&lt;/a&gt;上找到。</target>
        </trans-unit>
        <trans-unit id="7196ead84389ddc7b01ef77358862d251c7d4e76" translate="yes" xml:space="preserve">
          <source>Detect when there&amp;rsquo;s a change in one of the values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d9b9f619dbd27ad649a2fb2ed512704a8498dc" translate="yes" xml:space="preserve">
          <source>Dev Build</source>
          <target state="translated">开发建设</target>
        </trans-unit>
        <trans-unit id="de71895c6b8731341df7953e5cac6cc720d4cb3b" translate="yes" xml:space="preserve">
          <source>Development Tooling</source>
          <target state="translated">开发工具</target>
        </trans-unit>
        <trans-unit id="f1a6305cd34006d48f89c6b7c5b39e442c279bfb" translate="yes" xml:space="preserve">
          <source>Development vs. Production Mode</source>
          <target state="translated">开发与生产模式</target>
        </trans-unit>
        <trans-unit id="e61f7a6aab9b9601861b94c2e17708a31a26f4cc" translate="yes" xml:space="preserve">
          <source>Development/production modes are hard-coded for the UMD builds: the un-minified files are for development, and the minified files are for production.</source>
          <target state="translated">开发/生产模式是UMD构建的硬编码:非最小化文件用于开发,最小化文件用于生产。</target>
        </trans-unit>
        <trans-unit id="7d86b227a33c0960526dea72d977c72dc74b8edb" translate="yes" xml:space="preserve">
          <source>Devtools Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3757cf237017d813bd35da8ec2305e895f14c3e4" translate="yes" xml:space="preserve">
          <source>Direct &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; Include</source>
          <target state="translated">直接 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 包含</target>
        </trans-unit>
        <trans-unit id="7df8abc29de3933d7d9cb30da57cfccb911c13db" translate="yes" xml:space="preserve">
          <source>Directive &lt;code&gt;.literal&lt;/code&gt; Modifier &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">指令 &lt;code&gt;.literal&lt;/code&gt; 修饰符&lt;sup&gt;已删除&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="e43c9c257ed4992f826362fcfbba8afdcac1c199" translate="yes" xml:space="preserve">
          <source>Directive Hook Arguments</source>
          <target state="translated">指令钩子参数</target>
        </trans-unit>
        <trans-unit id="c938d0aef00011b5a0279e01e206aed9f7ccae05" translate="yes" xml:space="preserve">
          <source>Directive arguments can be dynamic. For example, in &lt;code&gt;v-mydirective:[argument]=&quot;value&quot;&lt;/code&gt;, the &lt;code&gt;argument&lt;/code&gt; can be updated based on data properties in our component instance! This makes our custom directives flexible for use throughout our application.</source>
          <target state="translated">指令参数可以是动态的。例如，在 &lt;code&gt;v-mydirective:[argument]=&quot;value&quot;&lt;/code&gt; ，可以根据组件实例中的数据属性来更新 &lt;code&gt;argument&lt;/code&gt; ！这使我们的自定义指令可以灵活地在整个应用程序中使用。</target>
        </trans-unit>
        <trans-unit id="9140a9a668b6efa44837f17d5c5e3b23c0db39a7" translate="yes" xml:space="preserve">
          <source>Directive hooks are passed these arguments:</source>
          <target state="translated">指令钩子是通过这些参数。</target>
        </trans-unit>
        <trans-unit id="e6fc39cf25b0647f518bb1e791fb59f8693b3eb7" translate="yes" xml:space="preserve">
          <source>Directive shorthands</source>
          <target state="translated">指令性速记</target>
        </trans-unit>
        <trans-unit id="958118e04c69e4b161491ee2580e2daa1c385c27" translate="yes" xml:space="preserve">
          <source>Directive shorthands &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;指令速记&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="translated">Directives</target>
        </trans-unit>
        <trans-unit id="bbf08b3308f7275e0fc1351c6311f5b2f30fe055" translate="yes" xml:space="preserve">
          <source>Directives are special attributes with the &lt;code&gt;v-&lt;/code&gt; prefix. Directive attribute values are expected to be &lt;strong&gt;a single JavaScript expression&lt;/strong&gt; (with the exception of &lt;code&gt;v-for&lt;/code&gt; and &lt;code&gt;v-on&lt;/code&gt;, which will be discussed later). A directive's job is to reactively apply side effects to the DOM when the value of its expression changes. Let's review the example we saw in the introduction:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e02b52dce787224483306678d9a7ff2c5ac4ac" translate="yes" xml:space="preserve">
          <source>Directives are special attributes with the &lt;code&gt;v-&lt;/code&gt; prefix. Directive attribute values are expected to be &lt;strong&gt;a single JavaScript expression&lt;/strong&gt; (with the exception of &lt;code&gt;v-for&lt;/code&gt;, which will be discussed later). A directive&amp;rsquo;s job is to reactively apply side effects to the DOM when the value of its expression changes. Let&amp;rsquo;s review the example we saw in the introduction:</source>
          <target state="translated">指令是带有 &lt;code&gt;v-&lt;/code&gt; 前缀的特殊属性。指令属性值应该&lt;strong&gt;是单个JavaScript表达式&lt;/strong&gt;（ &lt;code&gt;v-for&lt;/code&gt; 除外，这将在后面讨论）。指令的工作是当其表达式的值更改时，将副作用被动地应用于DOM。让我们回顾一下在引言中看到的示例：</target>
        </trans-unit>
        <trans-unit id="5a7b078f6fffb64c05ef05bc651ea0230372543a" translate="yes" xml:space="preserve">
          <source>Directives have a greatly reduced scope of responsibility: they are now only used for applying low-level direct DOM manipulations. In most cases, you should prefer using components as the main code-reuse abstraction.</source>
          <target state="translated">指令的责任范围大大缩小:它们现在只用于应用低级别的直接DOM操作。在大多数情况下,你应该更喜欢使用组件作为主要的代码重用抽象。</target>
        </trans-unit>
        <trans-unit id="2dcce90e911d0ed7e63b677b61fb05cc3faa8cba" translate="yes" xml:space="preserve">
          <source>Directives no longer have instances. This means there&amp;rsquo;s no more &lt;code&gt;this&lt;/code&gt; inside directive hooks. Instead, they receive everything they might need as arguments. If you really must persist state across hooks, you can do so on &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">指令不再具有实例。这意味着没有更多的 &lt;code&gt;this&lt;/code&gt; 内部指令挂钩。相反，他们收到了可能需要的所有参数。如果您确实必须跨钩子保持状态，则可以在 &lt;code&gt;el&lt;/code&gt; 上进行。</target>
        </trans-unit>
        <trans-unit id="0cc37d7c35424d61187e77c350659717ee6b0343" translate="yes" xml:space="preserve">
          <source>Directives vs Components</source>
          <target state="translated">指令与组件</target>
        </trans-unit>
        <trans-unit id="3f2cbb04f6567d1c007d0aaa5f77666916f9bcd2" translate="yes" xml:space="preserve">
          <source>Disabling Attribute Inheritance</source>
          <target state="translated">禁用属性继承</target>
        </trans-unit>
        <trans-unit id="049073ae5b4c1db3b9ba9bb2b124a4b230f0bde4" translate="yes" xml:space="preserve">
          <source>Displaying Filtered/Sorted Results</source>
          <target state="translated">显示过滤/排序结果</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="ac6ff62697994870ebaa8d684240bfd25604394a" translate="yes" xml:space="preserve">
          <source>Documentation (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffc621eb894131131ce9c901ec0e437bd93e94a" translate="yes" xml:space="preserve">
          <source>Documentation Style Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d96ce1397576b2063aaf6598fc7978ae441092" translate="yes" xml:space="preserve">
          <source>Does not ship minified builds (to be done together with the rest of the code after bundling)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0716893bee6ef8d6281c2112819d7145534f22" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t skip headings within a section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad728fefe77763a68e26de84f3520b2b68a4c03" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; on an options property or callback, such as &lt;code&gt;created: () =&amp;gt; console.log(this.a)&lt;/code&gt; or &lt;code&gt;vm.$watch('a', newValue =&amp;gt; this.myMethod())&lt;/code&gt;. Since an arrow function doesn&amp;rsquo;t have a &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; will be treated as any other variable and lexically looked up through parent scopes until found, often resulting in errors such as &lt;code&gt;Uncaught TypeError: Cannot read property of undefined&lt;/code&gt; or &lt;code&gt;Uncaught TypeError: this.myMethod is not a function&lt;/code&gt;.</source>
          <target state="translated">不要在options属性或回调中使用&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;箭头函数&lt;/a&gt;，例如 &lt;code&gt;created: () =&amp;gt; console.log(this.a)&lt;/code&gt; 或 &lt;code&gt;vm.$watch('a', newValue =&amp;gt; this.myMethod())&lt;/code&gt; 。由于箭头功能不具有 &lt;code&gt;this&lt;/code&gt; ， &lt;code&gt;this&lt;/code&gt; 将被视为任何其他变量，词汇抬头通过父范围，直到找到，往往会造成错误，如 &lt;code&gt;Uncaught TypeError: Cannot read property of undefined&lt;/code&gt; 或 &lt;code&gt;Uncaught TypeError: this.myMethod is not a function&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="890db44609fe3c70adc2fb62237a57c309abca15" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use &lt;code&gt;.passive&lt;/code&gt; and &lt;code&gt;.prevent&lt;/code&gt; together, because &lt;code&gt;.prevent&lt;/code&gt; will be ignored and your browser will probably show you a warning. Remember, &lt;code&gt;.passive&lt;/code&gt; communicates to the browser that you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; want to prevent the event&amp;rsquo;s default behavior.</source>
          <target state="translated">请勿同时使用 &lt;code&gt;.passive&lt;/code&gt; 和 &lt;code&gt;.prevent&lt;/code&gt; ，因为 &lt;code&gt;.prevent&lt;/code&gt; 将被忽略，并且您的浏览器可能会向您显示警告。请记住， &lt;code&gt;.passive&lt;/code&gt; 浏览器传达你&lt;em&gt;不&lt;/em&gt;想要阻止事件的默认行为。</target>
        </trans-unit>
        <trans-unit id="51f362101e6fb54f133e70f730ec6b0fa1f7594b" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use non-primitive values like objects and arrays as &lt;code&gt;v-for&lt;/code&gt; keys. Use string or numeric values instead.</source>
          <target state="translated">不要将对象和数组之类的非原始值用作 &lt;code&gt;v-for&lt;/code&gt; 键。请使用字符串或数字值。</target>
        </trans-unit>
        <trans-unit id="b4930e1ee5f8ecba58c1ab6aba1024cb6e3381c1" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the minified version during development. You will miss out on all the nice warnings for common mistakes!</source>
          <target state="translated">在开发过程中不要使用缩小版本。您会错过所有常见错误的漂亮警告！</target>
        </trans-unit>
        <trans-unit id="d7fbda43e75d1b10a371270ae2b01769500c90ae" translate="yes" xml:space="preserve">
          <source>Don't use &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions (opens new window)&lt;/a&gt; on an options property or callback, such as &lt;code&gt;created: () =&amp;gt; console.log(this.a)&lt;/code&gt; or &lt;code&gt;vm.$watch('a', newValue =&amp;gt; this.myMethod())&lt;/code&gt;. Since an arrow function doesn't have a &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; will be treated as any other variable and lexically looked up through parent scopes until found, often resulting in errors such as &lt;code&gt;Uncaught TypeError: Cannot read property of undefined&lt;/code&gt; or &lt;code&gt;Uncaught TypeError: this.myMethod is not a function&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96f4db5aa68bf6acbbd85ad761ab64e7b916a53" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;.passive&lt;/code&gt; and &lt;code&gt;.prevent&lt;/code&gt; together, because &lt;code&gt;.prevent&lt;/code&gt; will be ignored and your browser will probably show you a warning. Remember, &lt;code&gt;.passive&lt;/code&gt; communicates to the browser that you &lt;em&gt;don't&lt;/em&gt; want to prevent the event's default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd04470f249ed3d037f0088edb94d3de201bc5ad" translate="yes" xml:space="preserve">
          <source>Don't use non-primitive values like objects and arrays as &lt;code&gt;v-for&lt;/code&gt; keys. Use string or numeric values instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2b87efdc39bb54d70cdd883a06174f29493668" translate="yes" xml:space="preserve">
          <source>Done! Now whenever we call &lt;code&gt;getUserRepositories&lt;/code&gt;, &lt;code&gt;repositories&lt;/code&gt; will be mutated and the view will be updated to reflect the change. Our component should now look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebf978596d7d20a23e0ca4773390efae1bd8f2f" translate="yes" xml:space="preserve">
          <source>Drop the internal concept of enumerated attributes and treat those attributes the same as normal non-boolean attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899e054cc75954e4159c5ebdaef25856dd086605" translate="yes" xml:space="preserve">
          <source>Due to limitations in JavaScript, Vue &lt;strong&gt;cannot&lt;/strong&gt; detect the following changes to an array:</source>
          <target state="translated">由于JavaScript的限制，Vue &lt;strong&gt;无法&lt;/strong&gt;检测到对数组的以下更改：</target>
        </trans-unit>
        <trans-unit id="8fe183c25e6e529dd240aa96c35cead7959acbe8" translate="yes" xml:space="preserve">
          <source>Due to limitations in JavaScript, there are types of changes that Vue &lt;strong&gt;cannot detect&lt;/strong&gt;. However, there are ways to circumvent them to preserve reactivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5a54ddfeaab0b34c48e32ca40adb365a291a09" translate="yes" xml:space="preserve">
          <source>Due to the limitations of modern JavaScript (and the abandonment of &lt;code&gt;Object.observe&lt;/code&gt;), Vue &lt;strong&gt;cannot detect property addition or deletion&lt;/strong&gt;. Since Vue performs the getter/setter conversion process during instance initialization, a property must be present in the &lt;code&gt;data&lt;/code&gt; object in order for Vue to convert it and make it reactive. For example:</source>
          <target state="translated">由于现代JavaScript的局限性（以及 &lt;code&gt;Object.observe&lt;/code&gt; 的放弃），Vue &lt;strong&gt;无法检测到属性的添加或删除&lt;/strong&gt;。由于Vue在实例初始化期间执行getter / setter转换过程，因此 &lt;code&gt;data&lt;/code&gt; 对象中必须存在一个属性，以便Vue对其进行转换并使其具有反应性。例如：</target>
        </trans-unit>
        <trans-unit id="4d1e3bcfb2991be45c08d600c135d8a8f3bd979e" translate="yes" xml:space="preserve">
          <source>Duplicate Slots &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">重复的插槽&lt;sup&gt;已删除&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="1e4dfad1a692a8e9e499aa601a49c4ba4f904e1a" translate="yes" xml:space="preserve">
          <source>During development, Vue provides a lot of warnings to help you with common errors and pitfalls. However, these warning strings become useless in production and bloat your app&amp;rsquo;s payload size. In addition, some of these warning checks have small runtime costs that can be avoided in production mode.</source>
          <target state="translated">在开发过程中，Vue提供了许多警告来帮助您解决常见的错误和陷阱。但是，这些警告字符串在生产中变得无用，并且使应用程序的有效负载大小膨胀。另外，其中一些警告检查的运行时成本很小，在生产模式下可以避免。</target>
        </trans-unit>
        <trans-unit id="696bbe5fe1ccdfc46b1ddd6068eaa01ef847587e" translate="yes" xml:space="preserve">
          <source>During development, Vue provides a lot of warnings to help you with common errors and pitfalls. However, these warning strings become useless in production and bloat your app's payload size. In addition, some of these warning checks have small runtime costs that can be avoided in &lt;a href=&quot;https://cli.vuejs.org/guide/mode-and-env.html#modes&quot;&gt;production mode (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0b4d06e01f37d245996f44cf8aad221df6bb37" translate="yes" xml:space="preserve">
          <source>Dynamic &amp;amp; Async Components</source>
          <target state="translated">动态和异步组件</target>
        </trans-unit>
        <trans-unit id="0f29650484d14962fd70996d94d073f31ddb540c" translate="yes" xml:space="preserve">
          <source>Dynamic Argument Expression Constraints</source>
          <target state="translated">动态参数表达式约束</target>
        </trans-unit>
        <trans-unit id="af1ad0c6ae30fa7a85fac894f37497e0cf2dad3b" translate="yes" xml:space="preserve">
          <source>Dynamic Argument Value Constraints</source>
          <target state="translated">动态参数值约束</target>
        </trans-unit>
        <trans-unit id="9b7f2a051af6ba64581ce902392478aec9152664" translate="yes" xml:space="preserve">
          <source>Dynamic Arguments</source>
          <target state="translated">动态参数</target>
        </trans-unit>
        <trans-unit id="a5fdad1da0c422ddbaedc42b6d8523a19935dd4a" translate="yes" xml:space="preserve">
          <source>Dynamic Components</source>
          <target state="translated">动态组件</target>
        </trans-unit>
        <trans-unit id="7ed8c346bc4125aae72e6d3a54d7f6262905126a" translate="yes" xml:space="preserve">
          <source>Dynamic Components - keep-alive</source>
          <target state="translated">动态组件-保持活力</target>
        </trans-unit>
        <trans-unit id="2e89d09ae3e7f52e90bcd127eb7b2618655d7afd" translate="yes" xml:space="preserve">
          <source>Dynamic Components with &lt;code&gt;keep-alive&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e034c49c5cb1c629752968fa9c7831a78d808e9" translate="yes" xml:space="preserve">
          <source>Dynamic Directive Arguments</source>
          <target state="translated">动态指令参数</target>
        </trans-unit>
        <trans-unit id="c5efbfd95e89a2e200767862226b5ea05b0c65cd" translate="yes" xml:space="preserve">
          <source>Dynamic Slot Names</source>
          <target state="translated">动态老虎机名称</target>
        </trans-unit>
        <trans-unit id="fc384df95a2eb5e6d4806d3eac83c68c6146e347" translate="yes" xml:space="preserve">
          <source>Dynamic State Transitions</source>
          <target state="translated">动态状态转换</target>
        </trans-unit>
        <trans-unit id="352ceca6fc1e262f140d46e933114b56fb3111ba" translate="yes" xml:space="preserve">
          <source>Dynamic Transitions</source>
          <target state="translated">动态过渡</target>
        </trans-unit>
        <trans-unit id="93ee8b48e893e0a24c554d34149c5732350f19ef" translate="yes" xml:space="preserve">
          <source>Dynamic argument expressions have some syntax constraints because certain characters, such as spaces and quotes, are invalid inside HTML attribute names. For example, the following is invalid:</source>
          <target state="translated">动态参数表达式有一些语法限制,因为某些字符,如空格和引号,在HTML属性名内是无效的。例如,以下是无效的。</target>
        </trans-unit>
        <trans-unit id="066b5692f75eaf85a9eb86ad0ec5f4a812ee3640" translate="yes" xml:space="preserve">
          <source>Dynamic arguments are expected to evaluate to a string, with the exception of &lt;code&gt;null&lt;/code&gt;. The special value &lt;code&gt;null&lt;/code&gt; can be used to explicitly remove the binding. Any other non-string value will trigger a warning.</source>
          <target state="translated">动态参数应计算为字符串，但 &lt;code&gt;null&lt;/code&gt; 除外。特殊值 &lt;code&gt;null&lt;/code&gt; 可用于显式删除绑定。任何其他非字符串值都将触发警告。</target>
        </trans-unit>
        <trans-unit id="76813c002463cb6cd3d5aaacd8c77a0fdc2e1c18" translate="yes" xml:space="preserve">
          <source>Dynamic components</source>
          <target state="translated">动态组件</target>
        </trans-unit>
        <trans-unit id="8ca3e70bb28937f01555d17d146f8ddb5c4ff9fe" translate="yes" xml:space="preserve">
          <source>Dynamic options rendered with &lt;code&gt;v-for&lt;/code&gt;:</source>
          <target state="translated">用 &lt;code&gt;v-for&lt;/code&gt; 呈现的动态选项：</target>
        </trans-unit>
        <trans-unit id="c7c226cd4979c15617282ce978af491363f417bc" translate="yes" xml:space="preserve">
          <source>Dynamically bind one or more attributes, or a component prop to an expression.</source>
          <target state="translated">动态地将一个或多个属性,或一个组件道具绑定到一个表达式上。</target>
        </trans-unit>
        <trans-unit id="0442aa5284cbc2dfc4cab6c4fe3840defc7b4ea0" translate="yes" xml:space="preserve">
          <source>Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS attacks (opens new window)&lt;/a&gt;. Only use &lt;code&gt;v-html&lt;/code&gt; on trusted content and &lt;strong&gt;never&lt;/strong&gt; on user-provided content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05eb141560fc4fbe23b15082a0866f326cc413ad" translate="yes" xml:space="preserve">
          <source>Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS attacks&lt;/a&gt;. Only use &lt;code&gt;v-html&lt;/code&gt; on trusted content and &lt;strong&gt;never&lt;/strong&gt; on user-provided content.</source>
          <target state="translated">在网站上动态呈现任意HTML可能非常危险，因为它很容易导致&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS攻击&lt;/a&gt;。只有使用 &lt;code&gt;v-html&lt;/code&gt; 可信的内容，并&lt;strong&gt;从未&lt;/strong&gt;对用户提供的内容。</target>
        </trans-unit>
        <trans-unit id="f049d4b099529eb9f51af91aefc1c6c925d53b06" translate="yes" xml:space="preserve">
          <source>Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS vulnerabilities (opens new window)&lt;/a&gt;. Only use HTML interpolation on trusted content and &lt;strong&gt;never&lt;/strong&gt; on user-provided content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedbb4031c5d446b94624d3a0f6602aec8d6dfb3" translate="yes" xml:space="preserve">
          <source>Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS vulnerabilities&lt;/a&gt;. Only use HTML interpolation on trusted content and &lt;strong&gt;never&lt;/strong&gt; on user-provided content.</source>
          <target state="translated">在您的网站上动态呈现任意HTML可能非常危险，因为它很容易导致&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS漏洞&lt;/a&gt;。仅使用HTML插值可信的内容，并&lt;strong&gt;从未&lt;/strong&gt;对用户提供的内容。</target>
        </trans-unit>
        <trans-unit id="7307a1f2056f78ceb4b076d712f210b93d116ffe" translate="yes" xml:space="preserve">
          <source>ES Module (for browsers)</source>
          <target state="translated">ES模块(用于浏览器</target>
        </trans-unit>
        <trans-unit id="f93896ed5a340e7e28d51a91add020b4ca5af3b6" translate="yes" xml:space="preserve">
          <source>ES Module (for bundlers)</source>
          <target state="translated">ES模块(用于捆绑程序)</target>
        </trans-unit>
        <trans-unit id="9522be7f22cdc09d3c22d90d688472548ef56bd2" translate="yes" xml:space="preserve">
          <source>ESM for browsers (2.6+ only): intended for direct imports in modern browsers via &lt;code&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">用于浏览器的ESM（仅适用于2.6+）：用于通过 &lt;code&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;&lt;/code&gt; 在现代浏览器中直接导入。</target>
        </trans-unit>
        <trans-unit id="e27c262b3d9b3eb1c6c28300b45d4a73dc87aab5" translate="yes" xml:space="preserve">
          <source>ESM for bundlers: intended for use with modern bundlers like &lt;a href=&quot;https://webpack.js.org&quot;&gt;webpack 2&lt;/a&gt; or &lt;a href=&quot;https://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt;. ESM format is designed to be statically analyzable so the bundlers can take advantage of that to perform &amp;ldquo;tree-shaking&amp;rdquo; and eliminate unused code from your final bundle. The default file for these bundlers (&lt;code&gt;pkg.module&lt;/code&gt;) is the Runtime only ES Module build (&lt;code&gt;vue.runtime.esm.js&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://webpack.js.org&quot;&gt;捆绑器的&lt;/a&gt; ESM：适用于现代捆绑器，例如webpack 2或&lt;a href=&quot;https://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt;。ESM格式设计为可静态分析的，因此捆绑器可以利用它来进行&amp;ldquo;摇树&amp;rdquo;，并从最终捆绑中消除未使用的代码。这些 &lt;code&gt;pkg.module&lt;/code&gt; 的默认文件（pkg.module）是&amp;ldquo;仅运行时&amp;rdquo; ES模块构建（ &lt;code&gt;vue.runtime.esm.js&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="52584925c7fd5eeb8c70a3598a16ad94fa3bb4e3" translate="yes" xml:space="preserve">
          <source>Each Vue instance goes through a series of initialization steps when it&amp;rsquo;s created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it also runs functions called &lt;strong&gt;lifecycle hooks&lt;/strong&gt;, giving users the opportunity to add their own code at specific stages.</source>
          <target state="translated">每个Vue实例在创建时都会经历一系列初始化步骤-例如，它需要设置数据观察，编译模板，将实例安装到DOM以及在数据更改时更新DOM。在此过程中，它还运行称为&lt;strong&gt;生命周期挂钩的&lt;/strong&gt;函数，使用户有机会在特定阶段添加自己的代码。</target>
        </trans-unit>
        <trans-unit id="f844c10dd70c768cf2bf38b007fb2a959576b4df" translate="yes" xml:space="preserve">
          <source>Each component instance goes through a series of initialization steps when it's created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it also runs functions called &lt;strong&gt;lifecycle hooks&lt;/strong&gt;, giving users the opportunity to add their own code at specific stages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070a771ffcf9809ce4a1e745aaa34080282a6569" translate="yes" xml:space="preserve">
          <source>Each component will have its own component instance, &lt;code&gt;vm&lt;/code&gt;. For some components, such as &lt;code&gt;TodoItem&lt;/code&gt;, there will likely be multiple instances rendered at any one time. All of the component instances in this application will share the same application instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef59e39a699d63f068d528d22840960fd7a9c06" translate="yes" xml:space="preserve">
          <source>Each directive itself is an array, which allows for up to 4 indexes to be defined as seen in the following examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28bd397f4561c35505d212db27ec40f65917cd37" translate="yes" xml:space="preserve">
          <source>Each of these classes will be prefixed with the name of the transition. Here the &lt;code&gt;v-&lt;/code&gt; prefix is the default when you use a &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; element with no name. If you use &lt;code&gt;&amp;lt;transition name=&quot;my-transition&quot;&amp;gt;&lt;/code&gt; for example, then the &lt;code&gt;v-enter-from&lt;/code&gt; class would instead be &lt;code&gt;my-transition-enter-from&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5088616c301da75dcaf436fbc5bf3ddd9acb337" translate="yes" xml:space="preserve">
          <source>Each of these classes will be prefixed with the name of the transition. Here the &lt;code&gt;v-&lt;/code&gt; prefix is the default when you use a &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; element with no name. If you use &lt;code&gt;&amp;lt;transition name=&quot;my-transition&quot;&amp;gt;&lt;/code&gt; for example, then the &lt;code&gt;v-enter&lt;/code&gt; class would instead be &lt;code&gt;my-transition-enter&lt;/code&gt;.</source>
          <target state="translated">这些类中的每一个都将以过渡名称作为前缀。当您使用不带名称的 &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; 元素时，这里的 &lt;code&gt;v-&lt;/code&gt; 前缀是默认的。例如，如果使用 &lt;code&gt;&amp;lt;transition name=&quot;my-transition&quot;&amp;gt;&lt;/code&gt; ，则 &lt;code&gt;v-enter&lt;/code&gt; 类将是 &lt;code&gt;my-transition-enter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b371d4e1733e62ca62794f7bec2f77283f6e80ba" translate="yes" xml:space="preserve">
          <source>Each v-model will sync to a different prop, without the need for extra options in the component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee4a64f803260cddd26d319b0307ed277c813e3" translate="yes" xml:space="preserve">
          <source>Earlier in the guide we met &lt;code&gt;data&lt;/code&gt; properties. Properties defined in &lt;code&gt;data&lt;/code&gt; are exposed via the component instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc96a01bcbcfb5be49b49faff41c9c72edfc787" translate="yes" xml:space="preserve">
          <source>Earlier, we mentioned creating a component for blog posts. The problem is, that component won&amp;rsquo;t be useful unless you can pass data to it, such as the title and content of the specific post we want to display. That&amp;rsquo;s where props come in.</source>
          <target state="translated">之前，我们提到了为博客文章创建组件。问题是，除非您可以向其传递数据（例如我们要显示的特定帖子的标题和内容），否则该组件将无用。那就是道具进来的地方。</target>
        </trans-unit>
        <trans-unit id="34624a05553566caa2e535bc9c4e20073a2b229a" translate="yes" xml:space="preserve">
          <source>Earlier, we mentioned creating a component for blog posts. The problem is, that component won't be useful unless you can pass data to it, such as the title and content of the specific post we want to display. That's where props come in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d70bd765f3f2ae985e4c821b7603710f7eb9df8" translate="yes" xml:space="preserve">
          <source>Earlier, we used the &lt;code&gt;is&lt;/code&gt; attribute to switch between components in a tabbed interface:</source>
          <target state="translated">之前，我们使用 &lt;code&gt;is&lt;/code&gt; 属性在选项卡式界面中的组件之间进行切换：</target>
        </trans-unit>
        <trans-unit id="4fa6dd6e776a6034da7ff016fc47682b3462032b" translate="yes" xml:space="preserve">
          <source>Earlier, when we described &lt;a href=&quot;#Accessing-the-Parent-Component-Instance&quot;&gt;Accessing the Parent Component Instance&lt;/a&gt;, we showed an example like this:</source>
          <target state="translated">之前，当我们描述&lt;a href=&quot;#Accessing-the-Parent-Component-Instance&quot;&gt;访问父级组件实例时&lt;/a&gt;，我们显示了这样的示例：</target>
        </trans-unit>
        <trans-unit id="0c8709a43f69a8c12f45e58b4bcdf5a46f1ca867" translate="yes" xml:space="preserve">
          <source>Easing</source>
          <target state="translated">Easing</target>
        </trans-unit>
        <trans-unit id="c11b131e1281216643c45f8d59e25bd4095fa0c7" translate="yes" xml:space="preserve">
          <source>Easing can also convey the quality of material being animated. Take this pen for example, which ball do you think is hard and which is soft?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce3dcf34382e28f59d8bb830af82d7b473fb7cd" translate="yes" xml:space="preserve">
          <source>Easing is an important way to convey depth in an animation. One of the most common mistakes newcomers to animation make is to use &lt;code&gt;ease-in&lt;/code&gt; for entrances, and &lt;code&gt;ease-out&lt;/code&gt; for exits. You'll actually need the opposite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edea9dcec8fdda290d18e0690115beef47ed21b" translate="yes" xml:space="preserve">
          <source>Edge Case: Accessing the component instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc33fec143cab8fa565a8b5fcd84caddf5b2bb9" translate="yes" xml:space="preserve">
          <source>Editor Support</source>
          <target state="translated">编辑支持</target>
        </trans-unit>
        <trans-unit id="4b30b2bc161838680b0573ae6f73a2c886f0328b" translate="yes" xml:space="preserve">
          <source>Editors can autocomplete component names in templates, because PascalCase is also used in JavaScript.</source>
          <target state="translated">编辑器可以在模板中自动完成组件名称,因为JavaScript中也使用PascalCase。</target>
        </trans-unit>
        <trans-unit id="eced484380a1d78d5cbc37dc8d3f4ad07aa5d4fc" translate="yes" xml:space="preserve">
          <source>Effect Flush Timing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa08e2485ebe2fac169d5b9e3e17c69b91b28316" translate="yes" xml:space="preserve">
          <source>Either way, the rendered HTML will be:</source>
          <target state="translated">无论哪种方式,渲染的HTML都将是。</target>
        </trans-unit>
        <trans-unit id="7394b6d08c5d50c4cc4b81306a613af47e801496" translate="yes" xml:space="preserve">
          <source>Element &amp;amp; Component Access</source>
          <target state="translated">元素和组件访问</target>
        </trans-unit>
        <trans-unit id="f191399212a6a5144845ff3f2688976048435b58" translate="yes" xml:space="preserve">
          <source>Element attribute order</source>
          <target state="translated">元素属性顺序</target>
        </trans-unit>
        <trans-unit id="3ec26bbfb700738f9bd4fc6d76fb545baff31bf3" translate="yes" xml:space="preserve">
          <source>Element attribute order &lt;sup&gt;recommended&lt;/sup&gt;</source>
          <target state="translated">元素属性顺序&lt;sup&gt;推荐&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="38a3522441dc0300f0d181dd880463460906d3e2" translate="yes" xml:space="preserve">
          <source>Element selectors with &lt;code&gt;scoped&lt;/code&gt;&lt;sup&gt;use with caution&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;谨慎&lt;/sup&gt;使用 &lt;code&gt;scoped&lt;/code&gt; 选择器的元素选择器&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="d8f887f6e247da0f16c9fed78985cfcac7e019d8" translate="yes" xml:space="preserve">
          <source>Element selectors with scoped</source>
          <target state="translated">带范围的元素选择器</target>
        </trans-unit>
        <trans-unit id="0409f80dbf4550276ef2e4c40543a602bf7ee4bd" translate="yes" xml:space="preserve">
          <source>Elements inside are &lt;strong&gt;always required&lt;/strong&gt; to have a unique &lt;code&gt;key&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;strong&gt;始终要求&lt;/strong&gt;内部的元素具有唯一的 &lt;code&gt;key&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="20632bc30721b7b1111cc82ebfe4420e4ad7d5d8" translate="yes" xml:space="preserve">
          <source>Ember</source>
          <target state="translated">Ember</target>
        </trans-unit>
        <trans-unit id="49ee02a23a5aeffc39970d4d10f070a81e08bfb8" translate="yes" xml:space="preserve">
          <source>Ember is a full-featured framework that is designed to be highly opinionated. It provides a lot of established conventions and once you are familiar enough with them, it can make you very productive. However, it also means the learning curve is high and flexibility suffers. It&amp;rsquo;s a trade-off when you try to pick between an opinionated framework and a library with a loosely coupled set of tools that work together. The latter gives you more freedom but also requires you to make more architectural decisions.</source>
          <target state="translated">Ember是功能齐全的框架，旨在引起人们的高度关注。它提供了许多已建立的约定，一旦您对它们足够熟悉，它将使您非常有效率。但是，这也意味着学习曲线很高并且灵活性受到损害。当您尝试在一个有思想的框架和一个具有松散耦合的工具集的库之间进行选择时，这是一个折衷。后者给您更多的自由，但也需要您做出更多的体系结构决策。</target>
        </trans-unit>
        <trans-unit id="7f2075366a3ad701c910a4b63536fde145d17259" translate="yes" xml:space="preserve">
          <source>Emits Component Option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93091940817fa7264ca6d95063d577fc792a80ec" translate="yes" xml:space="preserve">
          <source>Emitted events can be defined on the component via the &lt;code&gt;emits&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a14ce6850f52c29f8d348ff00f11f8c193143a" translate="yes" xml:space="preserve">
          <source>Emitting a Value With an Event</source>
          <target state="translated">通过事件发射一个值</target>
        </trans-unit>
        <trans-unit id="2ffac68868af36726216abf1444b14e8a9e81831" translate="yes" xml:space="preserve">
          <source>Empty lines in component/instance options</source>
          <target state="translated">组件/实例选项中的空行</target>
        </trans-unit>
        <trans-unit id="9a357c242d606aa776379e9ccc339c2a981402c3" translate="yes" xml:space="preserve">
          <source>Empty lines in component/instance options &lt;sup&gt;recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;建议&lt;/sup&gt;在组件/实例选项中&lt;sup&gt;使用&lt;/sup&gt;空行&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="8ee41235587ef6409243b8bd8e160000cdcd84b5" translate="yes" xml:space="preserve">
          <source>End-To-End (E2E) Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3ab185c054c769936b8846001ef9585660ef8c" translate="yes" xml:space="preserve">
          <source>End-to-End (E2E) Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fa56bf2aec8f972abe7e127660086ebe1b8cde" translate="yes" xml:space="preserve">
          <source>Enter &amp;amp; Leave Transitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395f296fb0a847870529140564672614d41b49c6" translate="yes" xml:space="preserve">
          <source>Enter/Leave &amp;amp; List Transitions</source>
          <target state="translated">输入/离开并列出过渡</target>
        </trans-unit>
        <trans-unit id="bc2abe829e2abd8d4f740341cf1ba45dc9699567" translate="yes" xml:space="preserve">
          <source>Enumerated attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb2742b90eb0c79a4443668baa30aaa153719fb" translate="yes" xml:space="preserve">
          <source>Equivalent in Handler</source>
          <target state="translated">相当于处理机</target>
        </trans-unit>
        <trans-unit id="ebeb508551163eb9757c0825e75655933550427a" translate="yes" xml:space="preserve">
          <source>Error tracking services &lt;a href=&quot;https://sentry.io/for/vue/&quot;&gt;Sentry (opens new window)&lt;/a&gt; and &lt;a href=&quot;https://docs.bugsnag.com/platforms/browsers/vue/&quot;&gt;Bugsnag (opens new window)&lt;/a&gt; provide official integrations using this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524a185d655c3874eab06bc5b9c40d5ae39a5e05" translate="yes" xml:space="preserve">
          <source>Error tracking services &lt;a href=&quot;https://sentry.io/for/vue/&quot;&gt;Sentry&lt;/a&gt; and &lt;a href=&quot;https://docs.bugsnag.com/platforms/browsers/vue/&quot;&gt;Bugsnag&lt;/a&gt; provide official integrations using this option.</source>
          <target state="translated">错误跟踪服务&lt;a href=&quot;https://sentry.io/for/vue/&quot;&gt;Sentry&lt;/a&gt;和&lt;a href=&quot;https://docs.bugsnag.com/platforms/browsers/vue/&quot;&gt;Bugsnag&lt;/a&gt;使用此选项提供官方集成。</target>
        </trans-unit>
        <trans-unit id="042066b2dcd642eda405d028a70108b2e923cf25" translate="yes" xml:space="preserve">
          <source>Especially when the template version is so concise in comparison:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9a0a3787d6b474b295c63ce86d1775a4c674ca" translate="yes" xml:space="preserve">
          <source>Especially when the template version is so simple in comparison:</source>
          <target state="translated">尤其是当模板版相比之下是如此简单。</target>
        </trans-unit>
        <trans-unit id="11d8dc595f327555e20a54381be565d9f67e4750" translate="yes" xml:space="preserve">
          <source>Even if you don&amp;rsquo;t like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files:</source>
          <target state="translated">即使您不喜欢单一文件组件的概念，您仍然可以通过将JavaScript和CSS分离到单独的文件中来利用其热重装和预编译功能：</target>
        </trans-unit>
        <trans-unit id="c489a98648b0e015c22e4ee5956483e682bd07e5" translate="yes" xml:space="preserve">
          <source>Even if you don't like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c88ca6177858fca8d783f12c88be433e0d8d66" translate="yes" xml:space="preserve">
          <source>Event &amp;amp; Key Modifiers</source>
          <target state="translated">事件和键修饰符</target>
        </trans-unit>
        <trans-unit id="47439ca5ded64f9ae2fef50d130387798195a012" translate="yes" xml:space="preserve">
          <source>Event Handling</source>
          <target state="translated">事件处理</target>
        </trans-unit>
        <trans-unit id="66526f44818cc6ab396a919c3fd5d840f2645ce8" translate="yes" xml:space="preserve">
          <source>Event Modifiers</source>
          <target state="translated">事件修改器</target>
        </trans-unit>
        <trans-unit id="ed4d874df84489b3b2e3acc9c685b0095bc84604" translate="yes" xml:space="preserve">
          <source>Event Names</source>
          <target state="translated">活动名称</target>
        </trans-unit>
        <trans-unit id="9c5d0d985690ad3e0c9d1c4401af74dc7d869c98" translate="yes" xml:space="preserve">
          <source>Event listeners passed to a component with &lt;code&gt;v-on&lt;/code&gt; are by default only triggered by emitting an event with &lt;code&gt;this.$emit&lt;/code&gt;. To add a native DOM listener to the child component's root element instead, the &lt;code&gt;.native&lt;/code&gt; modifier can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="fe344110e73a74f72736069ed919c062c627ec74" translate="yes" xml:space="preserve">
          <source>Events API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bd4a5e00f70096b890c8158b83721fa0f918d8" translate="yes" xml:space="preserve">
          <source>Events listed in the &lt;code&gt;emits&lt;/code&gt; option &lt;strong&gt;will not&lt;/strong&gt; be inherited by the root element of the component and also will be excluded from the &lt;code&gt;$attrs&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f969057791b49962cda3666b3c119536c2fb909" translate="yes" xml:space="preserve">
          <source>Every Vue application exposes a &lt;code&gt;config&lt;/code&gt; object that contains the configuration settings for that application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f219021b57e774d36f65324ba3a594e9e20460b" translate="yes" xml:space="preserve">
          <source>Every Vue application starts by creating a new &lt;strong&gt;Vue instance&lt;/strong&gt; with the &lt;code&gt;Vue&lt;/code&gt; function:</source>
          <target state="translated">每个Vue应用程序都首先使用 &lt;code&gt;Vue&lt;/code&gt; 函数创建一个新的&lt;strong&gt;Vue实例&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="ae26b762f751c6c35419b55a02819589a8ee631b" translate="yes" xml:space="preserve">
          <source>Every Vue application starts by creating a new &lt;strong&gt;application instance&lt;/strong&gt; with the &lt;code&gt;createApp&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf667a90a613e55245c46fdd192636568d154701" translate="yes" xml:space="preserve">
          <source>Every aspect of our input is more explicit, using lifecycle hooks and DOM events in place of the hidden behavior of two-way filters.</source>
          <target state="translated">我们输入的每个方面都更加明确,使用生命周期钩子和DOM事件来代替双向过滤器的隐藏行为。</target>
        </trans-unit>
        <trans-unit id="5fab82007b286c11875b1e8300f0b68eda4d7671" translate="yes" xml:space="preserve">
          <source>Every component instance has a corresponding &lt;strong&gt;watcher&lt;/strong&gt; instance, which records any properties &amp;ldquo;touched&amp;rdquo; during the component&amp;rsquo;s render as dependencies. Later on when a dependency&amp;rsquo;s setter is triggered, it notifies the watcher, which in turn causes the component to re-render.</source>
          <target state="translated">每个组件实例都有一个相应的&lt;strong&gt;观察程序&lt;/strong&gt;实例，该实例将在组件渲染期间&amp;ldquo;触摸&amp;rdquo;的所有属性记录为依赖项。稍后，当依赖项的设置器被触发时，它会通知观察者，从而导致组件重新呈现。</target>
        </trans-unit>
        <trans-unit id="1f58c5b0e6e51b131bbdadfe2b61e38d44bc490b" translate="yes" xml:space="preserve">
          <source>Every component instance has a corresponding watcher instance, which records any properties &quot;touched&quot; during the component&amp;rsquo;s render as dependencies. Later on when a dependency&amp;rsquo;s setter is triggered, it notifies the watcher, which in turn causes the component to re-render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde90b98b8ca342aa109a11b8cb6f107489aabdb" translate="yes" xml:space="preserve">
          <source>Every component must have exactly one root element. Fragment instances are no longer allowed. If you have a template like this:</source>
          <target state="translated">每个组件都必须有确切的一个根元素。不允许再有片段实例。如果你有一个这样的模板。</target>
        </trans-unit>
        <trans-unit id="f8f19e423bd95ddb0403144073cc789ba522dcdc" translate="yes" xml:space="preserve">
          <source>Every element is a node. Every piece of text is a node. Even comments are nodes! A node is just a piece of the page. And as in a family tree, each node can have children (i.e. each piece can contain other pieces).</source>
          <target state="translated">每个元素都是一个节点。每一段文字都是一个节点。甚至注释也是节点! 节点只是页面的一个片段。就像一棵家庭树一样,每个节点都可以有子节点(也就是说,每个节点都可以包含其他节点)。</target>
        </trans-unit>
        <trans-unit id="9e907bd3543ad266c43cecb301beded8579af45c" translate="yes" xml:space="preserve">
          <source>Every element is a node. Every piece of text is a node. Even comments are nodes! Each node can have children (i.e. each node can contain other nodes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8033faba44f959c9968ac919456fbe10586a80" translate="yes" xml:space="preserve">
          <source>Everything in the parent template is compiled in parent scope; everything in the child template is compiled in the child scope.</source>
          <target state="translated">父模板中的所有内容都在父作用域中编译,子模板中的所有内容都在子作用域中编译。</target>
        </trans-unit>
        <trans-unit id="f28c7ab27a6c42cfb1e4176122b33e862331bc81" translate="yes" xml:space="preserve">
          <source>Everything the component needs is passed through &lt;code&gt;context&lt;/code&gt;, which is an object containing:</source>
          <target state="translated">组件需要的所有内容都通过 &lt;code&gt;context&lt;/code&gt; 传递，context是一个包含以下内容的对象：</target>
        </trans-unit>
        <trans-unit id="2ede17026a66f2bb53f3b6978daa3529c4d3bc25" translate="yes" xml:space="preserve">
          <source>Ex:</source>
          <target state="translated">Ex:</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="3eb3a95fccd918b90c7eb487502d9a5258dea10d" translate="yes" xml:space="preserve">
          <source>Example Sandbox</source>
          <target state="translated">示例沙盒</target>
        </trans-unit>
        <trans-unit id="fb1212d6a38581615658d5e1b1169c2c2adba652" translate="yes" xml:space="preserve">
          <source>Example presenting a large component where its &lt;strong&gt;logical concerns&lt;/strong&gt; are grouped by colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7ffd28663412a882c9589ff007aec37002c932" translate="yes" xml:space="preserve">
          <source>Example using a custom ref to implement debounce with &lt;code&gt;v-model&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="2496516972db533e6486a9f97812cf5fc0c76746" translate="yes" xml:space="preserve">
          <source>Execute any effects tied to a &lt;a href=&quot;#shallowref&quot;&gt;&lt;code&gt;shallowRef&lt;/code&gt;&lt;/a&gt; manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65341af747d8e24b0243ebd3e3e4ac148ee5268b" translate="yes" xml:space="preserve">
          <source>Existing event hubs can be replaced by using an external library implementing the event emitter interface, for example &lt;a href=&quot;https://github.com/developit/mitt&quot;&gt;mitt (opens new window)&lt;/a&gt; or &lt;a href=&quot;https://github.com/scottcorgan/tiny-emitter&quot;&gt;tiny-emitter (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b412ed401fdddea0ef09de5790b10445ea1013a" translate="yes" xml:space="preserve">
          <source>Explanation of Different Builds</source>
          <target state="translated">不同构建的说明</target>
        </trans-unit>
        <trans-unit id="b102c653c316a0c798b1c3b5d245b2fd99221969" translate="yes" xml:space="preserve">
          <source>Explicit Transition Durations</source>
          <target state="translated">明确的过渡期</target>
        </trans-unit>
        <trans-unit id="9e029b3ce910aca10a7cb3465603fd3468549648" translate="yes" xml:space="preserve">
          <source>Explicitly setting the labels with a matching id is better supported by assistive technology.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a49021ed3d45b568f8768a63c1ebc20e5852fd1" translate="yes" xml:space="preserve">
          <source>Explore the Ecosystem</source>
          <target state="translated">探索生态系统</target>
        </trans-unit>
        <trans-unit id="9f62a44e4c752c760f987ea515f7893e2af42d0d" translate="yes" xml:space="preserve">
          <source>Extracting Component CSS</source>
          <target state="translated">提取组件的CSS</target>
        </trans-unit>
        <trans-unit id="7ff5fe45d5c4ecd39cd3017ab29652c40d320ddd" translate="yes" xml:space="preserve">
          <source>Extracting the shared data into an external object and using it as a property in &lt;code&gt;data&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="ed87d8d2be60461f51035b723d16617e8c329991" translate="yes" xml:space="preserve">
          <source>Fallback Content</source>
          <target state="translated">回溯内容</target>
        </trans-unit>
        <trans-unit id="637b5afd0ee9009017980cec7702d491b3d006ed" translate="yes" xml:space="preserve">
          <source>Faster feedback loops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b87cce5450b7dd3407b09f150d94a3859e60d9" translate="yes" xml:space="preserve">
          <source>Feel free to inspect this element in Chrome DevTools to see how the accessible name has changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec1383e48d82f723351a7c7d7e095874e0cced0" translate="yes" xml:space="preserve">
          <source>Filter Argument Syntax &lt;sup&gt;changed&lt;/sup&gt;</source>
          <target state="translated">过滤器参数语法已&lt;sup&gt;更改&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="3d415c5493f34087904e62a37f4a30b2feec7d32" translate="yes" xml:space="preserve">
          <source>Filtering repositories using a &lt;code&gt;filters&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="8f48c7c02d00eef6501d151792b08bf6adbfe470" translate="yes" xml:space="preserve">
          <source>Filters Outside Text Interpolations &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">过滤&lt;sup&gt;掉&lt;/sup&gt;外部文字插值&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="5b3db50a9ea6f4f7c392840edf49099c7ed86b69" translate="yes" xml:space="preserve">
          <source>Filters are JavaScript functions, therefore they can take arguments:</source>
          <target state="translated">过滤器是JavaScript函数,因此它们可以接受参数。</target>
        </trans-unit>
        <trans-unit id="f2ea7d12f78a74ada3b3ff8b68370632078d1768" translate="yes" xml:space="preserve">
          <source>Filters are removed from Vue 3.0 and no longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf9da6ef24cfde47da11ec9725f0bf350874d59" translate="yes" xml:space="preserve">
          <source>Filters can be chained:</source>
          <target state="translated">过滤器可以连锁。</target>
        </trans-unit>
        <trans-unit id="4c3505be6bb67c8eae9065c68ab17a4aa210b176" translate="yes" xml:space="preserve">
          <source>Filters can now only be used inside text interpolations (&lt;code&gt;{{ }}&lt;/code&gt; tags). In the past we&amp;rsquo;ve found using filters within directives such as &lt;code&gt;v-model&lt;/code&gt;, &lt;code&gt;v-on&lt;/code&gt;, etc led to more complexity than convenience. For list filtering on &lt;code&gt;v-for&lt;/code&gt;, it&amp;rsquo;s also better to move that logic into JavaScript as computed properties, so that it can be reused throughout your component.</source>
          <target state="translated">现在只能在文本插值（ &lt;code&gt;{{ }}&lt;/code&gt; 标签）内使用过滤器。过去，我们发现在指令（例如 &lt;code&gt;v-model&lt;/code&gt; ， &lt;code&gt;v-on&lt;/code&gt; 等）中使用过滤器会带来更多的复杂性，而不是便捷性。对于 &lt;code&gt;v-for&lt;/code&gt; 上的列表过滤，最好将该逻辑作为计算的属性移到JavaScript中，以便可以在整个组件中重用它。</target>
        </trans-unit>
        <trans-unit id="e9d1aa6ff2a07e10c7656873ff1308d497c903c4" translate="yes" xml:space="preserve">
          <source>Filters&amp;rsquo; syntax for arguments now better aligns with JavaScript function invocation. So instead of taking space-delimited arguments:</source>
          <target state="translated">过滤器的参数语法现在可以更好地与JavaScript函数调用保持一致。因此，不要采用空格分隔的参数：</target>
        </trans-unit>
        <trans-unit id="60a606af2a6e34be36c3e018e84d36f4ebabe677" translate="yes" xml:space="preserve">
          <source>Finally, Vue offers a &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;CLI project generator&lt;/a&gt; that makes it trivially easy to start a new project by featuring an interactive project scaffolding wizard. You can even use it to &lt;a href=&quot;https://cli.vuejs.org/guide/prototyping.html#instant-prototyping&quot;&gt;instant prototyping&lt;/a&gt; a component. React is also making strides in this area with &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;create-react-app&lt;/a&gt;, but it currently has a few limitations:</source>
          <target state="translated">最后，Vue提供了一个&lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;CLI项目生成器&lt;/a&gt;，通过使用交互式项目支架向导，可以轻松地启动新项目。您甚至可以使用它来&lt;a href=&quot;https://cli.vuejs.org/guide/prototyping.html#instant-prototyping&quot;&gt;立即制作&lt;/a&gt;组件原型。React也通过&lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;create-react-app&lt;/a&gt;在这方面取得了长足的进步，但目前存在一些局限性：</target>
        </trans-unit>
        <trans-unit id="46a09a60c55f421db2df0617afc361af95839d24" translate="yes" xml:space="preserve">
          <source>Finally, although not as deeply integrated with TypeScript as Angular is, Vue also offers &lt;a href=&quot;https://github.com/vuejs/vue/tree/dev/types&quot;&gt;official typings&lt;/a&gt; and &lt;a href=&quot;https://github.com/vuejs/vue-class-component&quot;&gt;official decorator&lt;/a&gt; for those who wish to use TypeScript with Vue. We are also actively collaborating with the TypeScript and VSCode teams at Microsoft to improve the TS/IDE experience for Vue + TS users.</source>
          <target state="translated">最后，尽管不像Angular那样与TypeScript进行深度集成，但Vue还为希望将TypeScript与Vue一起使用的用户提供了&lt;a href=&quot;https://github.com/vuejs/vue/tree/dev/types&quot;&gt;官方的文字输入&lt;/a&gt;和&lt;a href=&quot;https://github.com/vuejs/vue-class-component&quot;&gt;官方的装饰器&lt;/a&gt;。我们还积极与Microsoft的TypeScript和VSCode团队合作，以改善Vue + TS用户的TS / IDE体验。</target>
        </trans-unit>
        <trans-unit id="c79cb78954e7e44144e4d9f932c4ed497c0e092c" translate="yes" xml:space="preserve">
          <source>Finally, the ultimate way of creating dynamic transitions is through components that accept props to change the nature of the transition(s) to be used. It may sound cheesy, but the only limit really is your imagination.</source>
          <target state="translated">最后,创建动态转换的最终方法是通过接受道具的组件来改变要使用的转换的性质。这可能听起来很俗气,但唯一的限制其实是你的想象力。</target>
        </trans-unit>
        <trans-unit id="37c0d9ec017af7750457fd12b30573593351cb92" translate="yes" xml:space="preserve">
          <source>Finally, we also set new values when something changes. For this, we&amp;rsquo;re going to set the changes on our new proxy, by triggering those changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd629e0efb64b70aab47100a21cf0079768c4205" translate="yes" xml:space="preserve">
          <source>Finally, we recommend using &lt;code&gt;readonly&lt;/code&gt; on provided property if you want to ensure that the data passed through &lt;code&gt;provide&lt;/code&gt; cannot be mutated by the injected component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1f211e525b965795b5c0f10446e200361802de" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ve split rules into four categories:</source>
          <target state="translated">最后，我们将规则分为四类：</target>
        </trans-unit>
        <trans-unit id="7ff01be10fa4fb37fd9ccbbd64d66226e70b2e06" translate="yes" xml:space="preserve">
          <source>Finally, we've split rules into four categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df6522b764714298af67043305bc157b86e4057" translate="yes" xml:space="preserve">
          <source>First class debugging experience</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8218b5728f1181661ae50ea61998b028df2e5e8" translate="yes" xml:space="preserve">
          <source>First-class error reporting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef8e6da45d2dd081d16f57b855fc793cd8acd72" translate="yes" xml:space="preserve">
          <source>Flexibility</source>
          <target state="translated">Flexibility</target>
        </trans-unit>
        <trans-unit id="000fcaf84aefc0e5054690f42482aa2d4e0bf254" translate="yes" xml:space="preserve">
          <source>Flexibility and Modularity</source>
          <target state="translated">灵活性和模块化</target>
        </trans-unit>
        <trans-unit id="2779f06c409cec032239a657c3bbc855d548df21" translate="yes" xml:space="preserve">
          <source>Focus Indicator (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f8916cb57f294932ab02cd58093fd47cf551bc" translate="yes" xml:space="preserve">
          <source>For &quot;&lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/util/attrs.js#L20&quot;&gt;enumerated attributes (opens new window)&lt;/a&gt;&quot; (currently &lt;code&gt;contenteditable&lt;/code&gt;, &lt;code&gt;draggable&lt;/code&gt; and &lt;code&gt;spellcheck&lt;/code&gt;), Vue tries to &lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/util/attrs.js#L24-L31&quot;&gt;coerce (opens new window)&lt;/a&gt; them to string (with special treatment for &lt;code&gt;contenteditable&lt;/code&gt; for now, to fix &lt;a href=&quot;https://github.com/vuejs/vue/issues/9397&quot;&gt;vuejs/vue#9397 (opens new window)&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8bab112e2dcdb90fe96ea6c858a1d56a1deb2dd" translate="yes" xml:space="preserve">
          <source>For &quot;&lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/util/attrs.js#L33-L40&quot;&gt;boolean attributes (opens new window)&lt;/a&gt;&quot; and &lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/util/attrs.js#L44-L46&quot;&gt;xlinks (opens new window)&lt;/a&gt;, Vue removes them if they are &quot;falsy&quot; (&lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/util/attrs.js#L52-L54&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; (opens new window)&lt;/a&gt;) and adds them otherwise (see &lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/runtime/modules/attrs.js#L66-L77&quot;&gt;here (opens new window)&lt;/a&gt; and &lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/runtime/modules/attrs.js#L81-L85&quot;&gt;here (opens new window)&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8c2c9fae14cfd0036093a8ba717ff818a80888" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;v-model&lt;/code&gt; bindings with arguments, the generated prop name will be &lt;code&gt;arg + &quot;Modifiers&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513df0e04c650fcde5059f934aba58711aa740db" translate="yes" xml:space="preserve">
          <source>For Advanced Users</source>
          <target state="translated">高级用户</target>
        </trans-unit>
        <trans-unit id="57e68e2eeefaf2c306eda048b28ddfe9395d0e60" translate="yes" xml:space="preserve">
          <source>For Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6156399a4dcfb1f701b32b420e46b955bdac9f" translate="yes" xml:space="preserve">
          <source>For Chrome: &lt;a href=&quot;https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg?hl=en&quot;&gt;Install from Chrome web store (opens new window)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e57b250e17fb6ad360318dfccc7e5d9eee33e77" translate="yes" xml:space="preserve">
          <source>For ES modules builds, since they are used with bundlers, and in most cases a CLI or boilerplate would have configured the production env properly, this tip will no longer show up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f9ba9cf5ee9accdef1e63daf2a42d27c90c7cc" translate="yes" xml:space="preserve">
          <source>For Firefox: &lt;a href=&quot;https://github.com/vuejs/vue-devtools/releases/tag/v6.0.0-beta.2&quot;&gt;Download the signed extension (opens new window)&lt;/a&gt; (&lt;code&gt;.xpi&lt;/code&gt; file under Assets)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0245eb6057c94ca797bfcb5840104243c1ad57d" translate="yes" xml:space="preserve">
          <source>For Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e4f5457a37e486d2a0a58b81ae37fc208be3a7" translate="yes" xml:space="preserve">
          <source>For Server-Side Rendering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede6b61362681370234fd0807f315c01a9c3b55b" translate="yes" xml:space="preserve">
          <source>For UMD / browser builds, it should try the global Vue.h first and fallback to require calls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0371195d5c5dd41a7b29d242b361064f37dcabe5" translate="yes" xml:space="preserve">
          <source>For Users New to Module Build Systems in JavaScript</source>
          <target state="translated">给刚接触JavaScript模块构建系统的用户</target>
        </trans-unit>
        <trans-unit id="718b4e7e8a44ecd43677096c7f8db3165c1ec6a0" translate="yes" xml:space="preserve">
          <source>For Vue 3, you should use Vue CLI v4.5 available on &lt;code&gt;npm&lt;/code&gt; as &lt;code&gt;@vue/cli&lt;/code&gt;. To upgrade, you need to reinstall the latest version of &lt;code&gt;@vue/cli&lt;/code&gt; globally:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2a099d8208018e5e4f7f52f337e07b0c674c8c" translate="yes" xml:space="preserve">
          <source>For a more in-depth explanation, read on!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab11db25aabad67fcc64bd1db7fd9a5258467bd" translate="yes" xml:space="preserve">
          <source>For a very naive implementation, you could do something like this:</source>
          <target state="translated">对于一个非常幼稚的实现,你可以做这样的事情。</target>
        </trans-unit>
        <trans-unit id="4d777c95a03d6fa9b89974643955ab4811c190d7" translate="yes" xml:space="preserve">
          <source>For additional information on Vue 3 compatibility with libraries and plugins, be sure to check out &lt;a href=&quot;https://github.com/vuejs/awesome-vue/issues/3544&quot;&gt;this issue in awesome-vue (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e29beb2ae5e0f698f91f0ecbcfec5993eb68011" translate="yes" xml:space="preserve">
          <source>For advanced usage, &lt;code&gt;defineAsyncComponent&lt;/code&gt; can accept an object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97aed23a831fb46aa5f822991920ad494f56b3c0" translate="yes" xml:space="preserve">
          <source>For all other event and key modifiers, no proprietary prefix is necessary, because you can use event methods in the handler:</source>
          <target state="translated">对于所有其他的事件和键修饰符,不需要专有的前缀,因为你可以在处理程序中使用事件方法。</target>
        </trans-unit>
        <trans-unit id="8f3aad46dd2709802f268b9031aeeaba2bf6051b" translate="yes" xml:space="preserve">
          <source>For all other event and key modifiers, no special API is necessary, because we can use event methods in the handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803f1468c60b4330634ef60069135d9e19060a49" translate="yes" xml:space="preserve">
          <source>For basic usage, &lt;code&gt;defineAsyncComponent&lt;/code&gt; can accept a factory function returning a &lt;code&gt;Promise&lt;/code&gt;. Promise's &lt;code&gt;resolve&lt;/code&gt; callback should be called when you have retrieved your component definition from the server. You can also call &lt;code&gt;reject(reason)&lt;/code&gt; to indicate the load has failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff0c6ef3cf57166e528a89cffe753c0d3fa987f" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;'pre'&lt;/code&gt; and &lt;code&gt;'post'&lt;/code&gt;, the callback is buffered using a queue. The callback will only be added to the queue once, even if the watched value changes multiple times. The interim values will be skipped and won't be passed to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbebb8f239a5dfb57c0a332c0934586334f987d9" translate="yes" xml:space="preserve">
          <source>For component VNodes, we need to pass the children to &lt;code&gt;h&lt;/code&gt; as an object rather than an array. Each property is used to populate the slot of the same name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779e284ebce8750bc72e00eb9f800bbf1cc46623" translate="yes" xml:space="preserve">
          <source>For components that re-emit native events to their parent, this would now lead to two events being fired:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efe27c4aa1b7fa683d5db36ecd5da2d9eeeb411" translate="yes" xml:space="preserve">
          <source>For components using &lt;a href=&quot;../guide/migration/fragments&quot;&gt;fragments&lt;/a&gt;, &lt;code&gt;$el&lt;/code&gt; will be the placeholder DOM node that Vue uses to keep track of the component's position in the DOM. It is recommended to use &lt;a href=&quot;../guide/component-template-refs&quot;&gt;template refs&lt;/a&gt; for direct access to DOM elements instead of relying on &lt;code&gt;$el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b301f643b1a2e6c5a62541c73173f461ea6ebb3" translate="yes" xml:space="preserve">
          <source>For consistency with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;HTML5 History API&lt;/a&gt;, &lt;code&gt;router.go&lt;/code&gt; is now only used for &lt;a href=&quot;https://router.vuejs.org/en/essentials/navigation.html#routergon&quot;&gt;back/forward navigation&lt;/a&gt;, while &lt;a href=&quot;https://router.vuejs.org/en/essentials/navigation.html#routerpushlocation&quot;&gt;&lt;code&gt;router.push&lt;/code&gt;&lt;/a&gt; is used to navigate to a specific page.</source>
          <target state="translated">为了与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;HTML5历史记录API&lt;/a&gt;保持一致， &lt;code&gt;router.go&lt;/code&gt; 现在仅用于&lt;a href=&quot;https://router.vuejs.org/en/essentials/navigation.html#routergon&quot;&gt;后退/前进导航&lt;/a&gt;，而&lt;a href=&quot;https://router.vuejs.org/en/essentials/navigation.html#routerpushlocation&quot;&gt; &lt;code&gt;router.push&lt;/code&gt; &lt;/a&gt;用于导航至特定页面。</target>
        </trans-unit>
        <trans-unit id="6aa88c3e3f83cba4c66c8e3440df1665f6102ca8" translate="yes" xml:space="preserve">
          <source>For convenience, we had a shorthand for this pattern with the .sync modifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fb9ce3028e6861311988b9b290536a7aa92d89" translate="yes" xml:space="preserve">
          <source>For convenience, we offer a shorthand for this pattern with the &lt;code&gt;.sync&lt;/code&gt; modifier:</source>
          <target state="translated">为了方便起见，我们使用 &lt;code&gt;.sync&lt;/code&gt; 修饰符为该模式提供了一个简写形式：</target>
        </trans-unit>
        <trans-unit id="e77949a3d7974a151900b4714219c740fd012a6b" translate="yes" xml:space="preserve">
          <source>For detailed usage of the &lt;code&gt;key&lt;/code&gt; attribute, please see the &lt;a href=&quot;../api/index#key&quot;&gt;&lt;code&gt;key&lt;/code&gt; API documentation&lt;/a&gt;.</source>
          <target state="translated">有关 &lt;code&gt;key&lt;/code&gt; 属性的详细用法，请参阅&lt;a href=&quot;../api/index#key&quot;&gt; &lt;code&gt;key&lt;/code&gt; API文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ac69828d942f56edd16a36a4b394123c8c2cccd" translate="yes" xml:space="preserve">
          <source>For detailed usage of the &lt;code&gt;key&lt;/code&gt; attribute, please see the &lt;a href=&quot;../api/special-attributes#key&quot;&gt;&lt;code&gt;key&lt;/code&gt; API documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e32fc40d0970eb330b3e2f44d962408b263fdc" translate="yes" xml:space="preserve">
          <source>For detailed usage, follow the links in the description above.</source>
          <target state="translated">详细的使用方法,请按照上面描述的链接。</target>
        </trans-unit>
        <trans-unit id="9e8a5dedf29d4ff26e04aa95eadb4a541741862d" translate="yes" xml:space="preserve">
          <source>For detailed usage, see the guide section linked below.</source>
          <target state="translated">详细使用方法,请看下面链接的指南部分。</target>
        </trans-unit>
        <trans-unit id="a01dbce6f8cbf32482f5a5af8815f8901fe3e070" translate="yes" xml:space="preserve">
          <source>For developing Vue applications with TypeScript, we strongly recommend using &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code (opens new window)&lt;/a&gt;, which provides great out-of-the-box support for TypeScript. If you are using &lt;a href=&quot;single-file-component&quot;&gt;single-file components&lt;/a&gt; (SFCs), get the awesome &lt;a href=&quot;https://github.com/vuejs/vetur&quot;&gt;Vetur extension (opens new window)&lt;/a&gt;, which provides TypeScript inference inside SFCs and many other great features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d591ea61c249ea3002f6d233030ffe8ea7141373" translate="yes" xml:space="preserve">
          <source>For developing Vue applications with TypeScript, we strongly recommend using &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, which provides great out-of-the-box support for TypeScript. If you are using &lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt; (SFCs), get the awesome &lt;a href=&quot;https://github.com/vuejs/vetur&quot;&gt;Vetur extension&lt;/a&gt;, which provides TypeScript inference inside SFCs and many other great features.</source>
          <target state="translated">为了使用TypeScript开发Vue应用程序，我们强烈建议使用&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;，它为TypeScript提供了强大的现成支持。如果您使用的是&lt;a href=&quot;single-file-components&quot;&gt;单文件组件&lt;/a&gt;（SFC），请获得超赞的&lt;a href=&quot;https://github.com/vuejs/vetur&quot;&gt;Vetur扩展&lt;/a&gt;，该扩展在SFC内提供TypeScript推理功能以及许多其他强大功能。</target>
        </trans-unit>
        <trans-unit id="ce547ebd7ed5e161168f7c5cbe5f9c281811052a" translate="yes" xml:space="preserve">
          <source>For direct use via &lt;code&gt;&amp;lt;script src=&quot;...&quot;&amp;gt;&lt;/code&gt; in the browser, exposes the Vue global.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2d4bb9e3f6cebb3a8e3663cfdc894fd475b817" translate="yes" xml:space="preserve">
          <source>For each of Vue&amp;rsquo;s built-in text filters, we go through how you can replace them below. The example code could exist in custom helper functions, methods, or computed properties.</source>
          <target state="translated">对于Vue的每个内置文本过滤器，我们将在下面介绍如何替换它们。示例代码可以存在于自定义帮助函数，方法或计算属性中。</target>
        </trans-unit>
        <trans-unit id="f0fc95b5d9a1e01b79eaa28bc87c877b0bf6da5a" translate="yes" xml:space="preserve">
          <source>For each property in the &lt;code&gt;components&lt;/code&gt; object, the key will be the name of the custom element, while the value will contain the options object for the component.</source>
          <target state="translated">对于 &lt;code&gt;components&lt;/code&gt; 对象中的每个属性，键将是自定义元素的名称，而值将包含组件的options对象。</target>
        </trans-unit>
        <trans-unit id="ee5b4a54e529a0035e69d76c3d750875a601f600" translate="yes" xml:space="preserve">
          <source>For enumerated attributes, in addition to the falsy values above, the string &lt;code&gt;&quot;false&quot;&lt;/code&gt; will also render as &lt;code&gt;attr=&quot;false&quot;&lt;/code&gt;.</source>
          <target state="translated">对于枚举属性，除了上述伪造的值外，字符串 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 还将呈现为 &lt;code&gt;attr=&quot;false&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1bcf675514ed1428c0f255af215d2d1ec106163" translate="yes" xml:space="preserve">
          <source>For example, data objects undergo a recursive merge, with the component&amp;rsquo;s data taking priority in cases of conflicts.</source>
          <target state="translated">例如，数据对象进行递归合并，在发生冲突的情况下，组件的数据优先。</target>
        </trans-unit>
        <trans-unit id="f454b48a7b55c534212425c552b6421fd112242f" translate="yes" xml:space="preserve">
          <source>For example, data objects undergo a recursive merge, with the component's data taking priority in cases of conflicts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1795f687a93352c0cb8a15ee527697b28a4807" translate="yes" xml:space="preserve">
          <source>For example, for runtime-dom, HostNode would be the DOM &lt;code&gt;Node&lt;/code&gt; interface and HostElement would be the DOM &lt;code&gt;Element&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1edc05a6e0814bdd62fe4bce5259a290dfcdac" translate="yes" xml:space="preserve">
          <source>For example, if we have a hierarchy like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c56dda15d57727da077449f7a2809409324f47" translate="yes" xml:space="preserve">
          <source>For example, if we only need to support component names then &lt;code&gt;resolveComponent&lt;/code&gt; can be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2f158836607b874466f2b27900abd2a49b107c" translate="yes" xml:space="preserve">
          <source>For example, if you declare this component:</source>
          <target state="translated">例如,如果你声明这个组件。</target>
        </trans-unit>
        <trans-unit id="7c30d3d0dc65ec8b44e08ea442bb32aa047a5282" translate="yes" xml:space="preserve">
          <source>For example, imagine we&amp;rsquo;re using a 3rd-party &lt;code&gt;bootstrap-date-input&lt;/code&gt; component with a Bootstrap plugin that requires a &lt;code&gt;data-date-picker&lt;/code&gt; attribute on the &lt;code&gt;input&lt;/code&gt;. We can add this attribute to our component instance:</source>
          <target state="translated">例如，假设我们使用第三方 &lt;code&gt;bootstrap-date-input&lt;/code&gt; 与引导组件插件，需要一个 &lt;code&gt;data-date-picker&lt;/code&gt; 的属性 &lt;code&gt;input&lt;/code&gt; 。我们可以将此属性添加到我们的组件实例中：</target>
        </trans-unit>
        <trans-unit id="b1cf609657ca18f9e34acd27701d2bf97355f335" translate="yes" xml:space="preserve">
          <source>For example, in the event we needed to change the user's location, we would ideally do this inside of our &lt;code&gt;MyMap&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029230d9057a5f295142155955df8324550cebca" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have a todo app structured like this:</source>
          <target state="translated">例如，假设我们有一个结构如下的待办事项应用程序：</target>
        </trans-unit>
        <trans-unit id="8536684fa38a02049e92f9af5a854917903e5346" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;../api/index#created&quot;&gt;&lt;code&gt;created&lt;/code&gt;&lt;/a&gt; hook can be used to run code after an instance is created:</source>
          <target state="translated">例如，&lt;a href=&quot;../api/index#created&quot;&gt; &lt;code&gt;created&lt;/code&gt; &lt;/a&gt;实例之后，可以使用创建的钩子来运行代码：</target>
        </trans-unit>
        <trans-unit id="fb502cd75e1acf7da048633ff080a77e6e39f8aa" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;../api/options-lifecycle-hooks#created&quot;&gt;created&lt;/a&gt; hook can be used to run code after an instance is created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87b2246eacf304bd868b9fc71ba48be665c366f" translate="yes" xml:space="preserve">
          <source>For example, to declare an instance property &lt;code&gt;$myProperty&lt;/code&gt; with type &lt;code&gt;string&lt;/code&gt;:</source>
          <target state="translated">例如，要声明一个实例属性 &lt;code&gt;$myProperty&lt;/code&gt; ，其类型为 &lt;code&gt;string&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="445caef62f32ef2f86bdab4d539a720263922705" translate="yes" xml:space="preserve">
          <source>For example, we are implementing a &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component that contains the layout and filtering logic for a list:</source>
          <target state="translated">例如，我们正在实现一个 &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; 组件，其中包含列表的布局和过滤逻辑：</target>
        </trans-unit>
        <trans-unit id="4d05ff2114716cc4c8c9e00ea69f85bbc1eee8be" translate="yes" xml:space="preserve">
          <source>For example, we have a component, containing a list of todo-items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf3e4e5c406d4604815a254998324f3c9550355" translate="yes" xml:space="preserve">
          <source>For example, when you set &lt;code&gt;vm.someData = 'new value'&lt;/code&gt;, the component will not re-render immediately. It will update in the next &quot;tick&quot;, when the queue is flushed. Most of the time we don't need to care about this, but it can be tricky when you want to do something that depends on the post-update DOM state. Although Vue.js generally encourages developers to think in a &quot;data-driven&quot; fashion and avoid touching the DOM directly, sometimes it might be necessary to get your hands dirty. In order to wait until Vue.js has finished updating the DOM after a data change, you can use &lt;code&gt;Vue.nextTick(callback)&lt;/code&gt; immediately after the data is changed. The callback will be called after the DOM has been updated. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2f769cc15514daf831c7f8ba5ba411ef20e0ad" translate="yes" xml:space="preserve">
          <source>For example, when you set &lt;code&gt;vm.someData = 'new value'&lt;/code&gt;, the component will not re-render immediately. It will update in the next &amp;ldquo;tick&amp;rdquo;, when the queue is flushed. Most of the time we don&amp;rsquo;t need to care about this, but it can be tricky when you want to do something that depends on the post-update DOM state. Although Vue.js generally encourages developers to think in a &amp;ldquo;data-driven&amp;rdquo; fashion and avoid touching the DOM directly, sometimes it might be necessary to get your hands dirty. In order to wait until Vue.js has finished updating the DOM after a data change, you can use &lt;code&gt;Vue.nextTick(callback)&lt;/code&gt; immediately after the data is changed. The callback will be called after the DOM has been updated. For example:</source>
          <target state="translated">例如，当您设置 &lt;code&gt;vm.someData = 'new value'&lt;/code&gt; ，该组件将不会立即重新呈现。刷新队列后，它将在下一个&amp;ldquo;滴答&amp;rdquo;中更新。大多数时候，我们不需要关心这一点，但是当您想执行依赖于更新后DOM状态的操作时，这可能会很棘手。尽管Vue.js通常会鼓励开发人员以&amp;ldquo;数据驱动&amp;rdquo;的方式进行思考，并避免直接接触DOM，但有时可能有必要动手。为了等到数据更改后Vue.js完成更新DOM，可以在数据更改后立即使用 &lt;code&gt;Vue.nextTick(callback)&lt;/code&gt; 。 DOM更新后将调用回调。例如：</target>
        </trans-unit>
        <trans-unit id="e2dcdf7e5cfb578dd7fa577b7951c9147ef8d1fe" translate="yes" xml:space="preserve">
          <source>For example, you can update:</source>
          <target state="translated">例如,你可以更新。</target>
        </trans-unit>
        <trans-unit id="171a4fb0d839fa35fc9ac0ce10d7a2647f1246d9" translate="yes" xml:space="preserve">
          <source>For example, you might have components for a header, sidebar, and content area, each typically containing other components for navigation links, blog posts, etc.</source>
          <target state="translated">例如,你可能会有头部、侧栏和内容区的组件,每个组件通常包含其他组件的导航链接、博客文章等。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="1124ebc3941a3ca5df3709bda4cfc6da4f05ab94" translate="yes" xml:space="preserve">
          <source>For languages that require an &lt;a href=&quot;https://en.wikipedia.org/wiki/Input_method&quot;&gt;IME (opens new window)&lt;/a&gt; (Chinese, Japanese, Korean etc.), you'll notice that &lt;code&gt;v-model&lt;/code&gt; doesn't get updated during IME composition. If you want to respond to these updates as well, use an &lt;code&gt;input&lt;/code&gt; event listener and &lt;code&gt;value&lt;/code&gt; binding instead of using &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8353bc6674b8324b5a5898cec0a2b4d4a90528a5" translate="yes" xml:space="preserve">
          <source>For languages that require an &lt;a href=&quot;https://en.wikipedia.org/wiki/Input_method&quot;&gt;IME&lt;/a&gt; (Chinese, Japanese, Korean etc.), you&amp;rsquo;ll notice that &lt;code&gt;v-model&lt;/code&gt; doesn&amp;rsquo;t get updated during IME composition. If you want to cater for these updates as well, use &lt;code&gt;input&lt;/code&gt; event instead.</source>
          <target state="translated">对于需要&lt;a href=&quot;https://en.wikipedia.org/wiki/Input_method&quot;&gt;输入法&lt;/a&gt;（IME）的语言（中文，日文，韩文等），您会注意到在输入法合成期间不会更新 &lt;code&gt;v-model&lt;/code&gt; 。如果您还想满足这些更新，请改用 &lt;code&gt;input&lt;/code&gt; event。</target>
        </trans-unit>
        <trans-unit id="d953af41887caa68a9981e2a5dc5d2318ad53ee4" translate="yes" xml:space="preserve">
          <source>For large applications, both Vue and React offer robust routing solutions. The React community has also been very innovative in terms of state management solutions (e.g. Flux/Redux). These state management patterns and &lt;a href=&quot;https://yarnpkg.com/en/packages?q=redux%20vue&amp;amp;p=1&quot;&gt;even Redux itself&lt;/a&gt; can be easily integrated into Vue applications. In fact, Vue has even taken this model a step further with &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt;, an Elm-inspired state management solution that integrates deeply into Vue that we think offers a superior development experience.</source>
          <target state="translated">对于大型应用程序，Vue和React均提供强大的路由解决方案。在状态管理解决方案（例如Flux / Redux）方面，React社区也非常创新。这些状态管理模式&lt;a href=&quot;https://yarnpkg.com/en/packages?q=redux%20vue&amp;amp;p=1&quot;&gt;甚至Redux本身&lt;/a&gt;都可以轻松集成到Vue应用程序中。实际上，Vue甚至借助&lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt;进一步推动了该模型的发展，Vuex是一种榆木风格的状态管理解决方案，已深深集成到Vue中，我们认为这提供了卓越的开发经验。</target>
        </trans-unit>
        <trans-unit id="6748b6e8c6539d47295af7dc062e5bff8197423c" translate="yes" xml:space="preserve">
          <source>For many developers who have been working with HTML, templates feel more natural to read and write. The preference itself can be somewhat subjective, but if it makes the developer more productive then the benefit is objective.</source>
          <target state="translated">对于很多一直在使用HTML的开发者来说,模板让人感觉读写更加自然。这种偏好本身可能有些主观,但如果它能让开发人员提高工作效率,那么这种好处是客观的。</target>
        </trans-unit>
        <trans-unit id="c8cb637b08cd5c9d7169914db39b5c3dc3a54054" translate="yes" xml:space="preserve">
          <source>For module builds, the import should be left alone and be handled by the end user bundler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4c638dd5e8b5570dde21fbec275e7f2b3ed8c8" translate="yes" xml:space="preserve">
          <source>For more details on &lt;code&gt;watch&lt;/code&gt;, refer to our &lt;a href=&quot;composition-api-introduction&quot;&gt;in-depth guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a27102ee6324e0ad5def7a29a297eba250292b3" translate="yes" xml:space="preserve">
          <source>For more details, refer to the documentation on &lt;a href=&quot;../guide/component-dynamic-async&quot;&gt;Dynamic Components&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628f37126cb037b7ed4ef4cf22c76a0b062364d7" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;the plugins docs&lt;/a&gt;.</source>
          <target state="translated">有关更多详细信息，请参阅&lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;插件docs&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1462c5eafd2a7f66683a9728a59128baa07aa8ef" translate="yes" xml:space="preserve">
          <source>For more details, see the links below.</source>
          <target state="translated">详见以下链接。</target>
        </trans-unit>
        <trans-unit id="ecef75fdd902dc21fadbfaa29bd9b19def442996" translate="yes" xml:space="preserve">
          <source>For more in-depth information on unit testing in Vue, check out &lt;a href=&quot;https://vue-test-utils.vuejs.org/&quot;&gt;Vue Test Utils&lt;/a&gt; and our cookbook entry about &lt;a href=&quot;https://vuejs.org/v2/cookbook/unit-testing-vue-components.html&quot;&gt;unit testing vue components&lt;/a&gt;.</source>
          <target state="translated">有关Vue中单元测试的更多详细信息，请查看&lt;a href=&quot;https://vue-test-utils.vuejs.org/&quot;&gt;Vue Test Utils&lt;/a&gt;和我们有关&lt;a href=&quot;https://vuejs.org/v2/cookbook/unit-testing-vue-components.html&quot;&gt;单元测试vue组​​件的&lt;/a&gt;菜谱条目。</target>
        </trans-unit>
        <trans-unit id="53baa97136ecbf363dd942ff2575f1cf1c86b4d2" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;flush&lt;/code&gt; see &lt;a href=&quot;../guide/reactivity-computed-watchers#effect-flush-timing&quot;&gt;Effect Flush Timing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38681452a27aebcb4665026071ce86a6fdec9b86" translate="yes" xml:space="preserve">
          <source>For more information on how &lt;code&gt;setup()&lt;/code&gt; works, see our &lt;a href=&quot;../composition-api-introduction&quot;&gt;Composition API Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e70aeae99701094005cb5633e64567ece3826e" translate="yes" xml:space="preserve">
          <source>For more information on how attribute inheritance works, see &lt;a href=&quot;../component-attrs&quot;&gt;Non-Prop Attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d46b838e3ff799dbe5d93d0a5f38a2bb2ddef5d" translate="yes" xml:space="preserve">
          <source>For more information on the new &lt;code&gt;v-model&lt;/code&gt; syntax, see:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad3da4ff72cbdb9b1f4f97add5f67c1fb233f9a" translate="yes" xml:space="preserve">
          <source>For more information on the usage of async components, see:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536883fd2260e1bd1beb314e51c0ac7037106dfa" translate="yes" xml:space="preserve">
          <source>For more information on the usage of the new functional components and the changes to render functions in general, see:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c359e7659000f494e038fbf4590d86581b0892" translate="yes" xml:space="preserve">
          <source>For more information on this, please read the &lt;a href=&quot;../../api/options-data#emits&quot;&gt;API documentation for this feature&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12cb821a984871364b6d35bee2e2d40be993d5f" translate="yes" xml:space="preserve">
          <source>For more information, read on!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb0198cb8cce89766664ade9b3c4e2538d0d93d" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0008-render-function-api-change.md#context-free-vnodes&quot;&gt;The Render Function Api Change RFC (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a2e95661b48b511251e25b504cdd0211c50e8b" translate="yes" xml:space="preserve">
          <source>For more on how JSX maps to JavaScript, see the &lt;a href=&quot;https://github.com/vuejs/jsx#installation&quot;&gt;usage docs&lt;/a&gt;.</source>
          <target state="translated">有关JSX如何映射到JavaScript的更多信息，请参见&lt;a href=&quot;https://github.com/vuejs/jsx#installation&quot;&gt;用法文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="306b5d71d63506d1b50cc3b91e3432c31824e4b9" translate="yes" xml:space="preserve">
          <source>For more on how JSX maps to JavaScript, see the &lt;a href=&quot;https://github.com/vuejs/jsx-next#installation&quot;&gt;usage docs (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e41c2b329c905a4640c7495f0532f24ec2ebd4c" translate="yes" xml:space="preserve">
          <source>For more on the advantages of this strategy, see &lt;a href=&quot;#debounce-Param-Attribute-for-v-model-removed&quot;&gt;the example here with &lt;code&gt;v-model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关此策略优点的更多信息，请参见&lt;a href=&quot;#debounce-Param-Attribute-for-v-model-removed&quot;&gt;此处带有 &lt;code&gt;v-model&lt;/code&gt; &lt;/a&gt;的示例。</target>
        </trans-unit>
        <trans-unit id="25b70aa7a4e5c440a926c6e391e7d79fda4e4edb" translate="yes" xml:space="preserve">
          <source>For most Single Page Applications, it&amp;rsquo;s recommended to use the officially-supported &lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;vue-router library&lt;/a&gt;. For more details, see vue-router&amp;rsquo;s &lt;a href=&quot;https://router.vuejs.org/&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">对于大多数单页应用程序，建议使用官方支持的&lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;vue-router库&lt;/a&gt;。有关更多详细信息，请参见vue-router的&lt;a href=&quot;https://router.vuejs.org/&quot;&gt;文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9b6b38ec8129680b2d7815658416e8aae9ea6dc6" translate="yes" xml:space="preserve">
          <source>For most Single Page Applications, it's recommended to use the officially-supported &lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;vue-router library (opens new window)&lt;/a&gt;. For more details, see vue-router's &lt;a href=&quot;https://next.router.vuejs.org/&quot;&gt;documentation (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3557fe91b413f4d536e3e8b778c8dcb8073525" translate="yes" xml:space="preserve">
          <source>For most attributes, the value provided to the component will replace the value set by the component. So for example, passing &lt;code&gt;type=&quot;text&quot;&lt;/code&gt; will replace &lt;code&gt;type=&quot;date&quot;&lt;/code&gt; and probably break it! Fortunately, the &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; attributes are a little smarter, so both values are merged, making the final value: &lt;code&gt;form-control date-picker-theme-dark&lt;/code&gt;.</source>
          <target state="translated">对于大多数属性，提供给组件的值将替换组件设置的值。因此，例如，传递 &lt;code&gt;type=&quot;text&quot;&lt;/code&gt; 将替换 &lt;code&gt;type=&quot;date&quot;&lt;/code&gt; 并可能破坏它！幸运的是， &lt;code&gt;class&lt;/code&gt; 和 &lt;code&gt;style&lt;/code&gt; 属性更加智能，因此两个值都合并在一起，成为最终值： &lt;code&gt;form-control date-picker-theme-dark&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0a837c87177ecd8e4cd4beb19f8c23e72ed9b09" translate="yes" xml:space="preserve">
          <source>For most object-based options, you can use the same strategy used by &lt;code&gt;methods&lt;/code&gt;:</source>
          <target state="translated">对于大多数基于对象的选项，您可以使用 &lt;code&gt;methods&lt;/code&gt; 使用的相同策略：</target>
        </trans-unit>
        <trans-unit id="3ff9670878879c74838bc30c8f8bfa6747549843" translate="yes" xml:space="preserve">
          <source>For non-boolean attributes, Vue will stop removing them if they are &lt;code&gt;false&lt;/code&gt; and coerce them to &lt;code&gt;'false'&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251b61258856c24886a8806ada332b57726c8a90" translate="yes" xml:space="preserve">
          <source>For other attributes, we remove &quot;falsy&quot; values (&lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt;) and set other values as-is (see &lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/runtime/modules/attrs.js#L92-L113&quot;&gt;here (opens new window)&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0dfedd4cc8e8370f219ab6a1f3f4a19c41fd4e" translate="yes" xml:space="preserve">
          <source>For production, we recommend linking to a specific version number and build to avoid unexpected breakage from newer versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079fe21cc823d55812a634a8c119ed4491fd69e2" translate="yes" xml:space="preserve">
          <source>For production, we recommend linking to a specific version number and build to avoid unexpected breakage from newer versions:</source>
          <target state="translated">对于生产,我们建议链接到一个特定的版本号和构建,以避免新版本的意外中断。</target>
        </trans-unit>
        <trans-unit id="bfe0d3e18701e6d75a26a86522437e9ae637b2e5" translate="yes" xml:space="preserve">
          <source>For prototyping or learning purposes, you can use the latest version with:</source>
          <target state="translated">对于原型设计或学习的目的,你可以使用最新的版本与。</target>
        </trans-unit>
        <trans-unit id="5495fda2474f4c57808bc121708bd27a76751c59" translate="yes" xml:space="preserve">
          <source>For radio, checkbox and select options, the &lt;code&gt;v-model&lt;/code&gt; binding values are usually static strings (or booleans for checkbox):</source>
          <target state="translated">对于单选，复选框和选择选项， &lt;code&gt;v-model&lt;/code&gt; 绑定值通常是静态字符串（或复选框的布尔值）：</target>
        </trans-unit>
        <trans-unit id="54ac8bccd12f18241dd4cff24f2f7aa494f8a547" translate="yes" xml:space="preserve">
          <source>For simple UI transitions, meaning from just one state to another with no intermediary states, it's common to use timings between 0.1s and 0.4s, and most folks find that &lt;em&gt;0.25s&lt;/em&gt; tends to be a sweet spot. Can you use that timing for everything? No, not really. If you have something that needs to move a greater distance or has more steps or state changes, 0.25s is not going to work as well and you will have to be much more intentional, and the timing will need to be more unique. That doesn't mean you can't have nice defaults that you repeat within your application, though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb997724620d308a038b97161b8c378aba0da047" translate="yes" xml:space="preserve">
          <source>For simplicity, &lt;code&gt;v-el&lt;/code&gt; and &lt;code&gt;v-ref&lt;/code&gt; have been merged into the &lt;code&gt;ref&lt;/code&gt; attribute, accessible on a component instance via &lt;code&gt;$refs&lt;/code&gt;. That means &lt;code&gt;v-el:my-element&lt;/code&gt; would become &lt;code&gt;ref=&quot;myElement&quot;&lt;/code&gt; and &lt;code&gt;v-ref:my-component&lt;/code&gt; would become &lt;code&gt;ref=&quot;myComponent&quot;&lt;/code&gt;. When used on a normal element, the &lt;code&gt;ref&lt;/code&gt; will be the DOM element, and when used on a component, the &lt;code&gt;ref&lt;/code&gt; will be the component instance.</source>
          <target state="translated">为简单起见， &lt;code&gt;v-el&lt;/code&gt; 和 &lt;code&gt;v-ref&lt;/code&gt; 已合并到 &lt;code&gt;ref&lt;/code&gt; 属性中，可通过 &lt;code&gt;$refs&lt;/code&gt; 在组件实例上访问。这意味着 &lt;code&gt;v-el:my-element&lt;/code&gt; 将变为 &lt;code&gt;ref=&quot;myElement&quot;&lt;/code&gt; 而 &lt;code&gt;v-ref:my-component&lt;/code&gt; 将变为 &lt;code&gt;ref=&quot;myComponent&quot;&lt;/code&gt; 。当在普通元素上使用时， &lt;code&gt;ref&lt;/code&gt; 将是DOM元素，而在组件上使用时， &lt;code&gt;ref&lt;/code&gt; 将是组件实例。</target>
        </trans-unit>
        <trans-unit id="e76e7f48f467e821b972221e9f61c5c2ee71e6e9" translate="yes" xml:space="preserve">
          <source>For some attribute/element pairs, Vue is always using the corresponding IDL attribute (property): &lt;a href=&quot;https://github.com/vuejs/vue/blob/bad3c326a3f8b8e0d3bcf07917dc0adf97c32351/src/platforms/web/util/attrs.js#L11-L18&quot;&gt;like &lt;code&gt;value&lt;/code&gt; of &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt;, etc (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc84ef6ae335396a13ddb8d1d5c433bb865da784" translate="yes" xml:space="preserve">
          <source>For such cases, we can use the &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt; pair. Parent components can serve as dependency provider for all its children, regardless how deep the component hierarchy is. This feature works on two parts: parent component has a &lt;code&gt;provide&lt;/code&gt; option to provide data and child component has an &lt;code&gt;inject&lt;/code&gt; option to start using this data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a3066945dc05ec1aac7c250f3d7947f3b1e0b5" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;.passive&lt;/code&gt;, &lt;code&gt;.capture&lt;/code&gt; and &lt;code&gt;.once&lt;/code&gt; event modifiers, Vue offers prefixes that can be used with &lt;code&gt;on&lt;/code&gt;:</source>
          <target state="translated">对于 &lt;code&gt;.passive&lt;/code&gt; ， &lt;code&gt;.capture&lt;/code&gt; 和 &lt;code&gt;.once&lt;/code&gt; 事件修饰符，Vue提供可以与 &lt;code&gt;on&lt;/code&gt; 一起使用的前缀：</target>
        </trans-unit>
        <trans-unit id="4e719f060c037bd683606bea572e1d5bb08e920e" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;.passive&lt;/code&gt;, &lt;code&gt;.capture&lt;/code&gt;, and &lt;code&gt;.once&lt;/code&gt; event modifiers, they can be concatenated after the event name using camel case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f75221fb27ca7d747fd5afe72b749aa8a5d218f" translate="yes" xml:space="preserve">
          <source>For the HTML above, you decide you want this component interface:</source>
          <target state="translated">对于上面的HTML,你决定要这个组件界面。</target>
        </trans-unit>
        <trans-unit id="58f64ac9d01eaada8c5b4d73c9742574b3650194" translate="yes" xml:space="preserve">
          <source>For the most part, we also avoid suggestions about JavaScript or HTML in general. We don&amp;rsquo;t mind whether you use semicolons or trailing commas. We don&amp;rsquo;t mind whether your HTML uses single-quotes or double-quotes for attribute values. Some exceptions will exist however, where we&amp;rsquo;ve found that a particular pattern is helpful in the context of Vue.</source>
          <target state="translated">在大多数情况下，我们通常也避免使用有关JavaScript或HTML的建议。我们不介意您使用分号还是结尾逗号。我们不在乎您的HTML是使用单引号还是双引号作为属性值。但是，会存在一些例外，我们发现在Vue上下文中特定的模式很有用。</target>
        </trans-unit>
        <trans-unit id="028ebb25464ebec8b20c053a3b3a36adc8dad6ef" translate="yes" xml:space="preserve">
          <source>For the most part, we also avoid suggestions about JavaScript or HTML in general. We don't mind whether you use semicolons or trailing commas. We don't mind whether your HTML uses single-quotes or double-quotes for attribute values. Some exceptions will exist however, where we've found that a particular pattern is helpful in the context of Vue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c81923e98cd7ec07a97be7558b6cf3f7038dd7" translate="yes" xml:space="preserve">
          <source>For these cases, the &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element has a special attribute, &lt;code&gt;name&lt;/code&gt;, which can be used to assign a unique ID to different slots so you can determine where content should be rendered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382333fc9a3981c853d256439249bf9dd8adac77" translate="yes" xml:space="preserve">
          <source>For these cases, the &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element has a special attribute, &lt;code&gt;name&lt;/code&gt;, which can be used to define additional slots:</source>
          <target state="translated">对于这些情况， &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素具有特殊的属性 &lt;code&gt;name&lt;/code&gt; ，可以用于定义其他插槽：</target>
        </trans-unit>
        <trans-unit id="cab05d6a03f13ecf11e09f8cd4a8521c92789cf2" translate="yes" xml:space="preserve">
          <source>For these reasons, we recommend you &lt;strong&gt;always use kebab-case for event names&lt;/strong&gt;.</source>
          <target state="translated">由于这些原因，我们建议您&lt;strong&gt;始终对事件名称使用kebab-case&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7422d6b54df4734e87a03b347852584179acad85" translate="yes" xml:space="preserve">
          <source>For this component, &lt;code&gt;children&lt;/code&gt; will give you both paragraphs, &lt;code&gt;slots().default&lt;/code&gt; will give you only the second, and &lt;code&gt;slots().foo&lt;/code&gt; will give you only the first. Having both &lt;code&gt;children&lt;/code&gt; and &lt;code&gt;slots()&lt;/code&gt; therefore allows you to choose whether this component knows about a slot system or perhaps delegates that responsibility to another component by passing along &lt;code&gt;children&lt;/code&gt;.</source>
          <target state="translated">对于此组件， &lt;code&gt;children&lt;/code&gt; 将为您提供两个段落， &lt;code&gt;slots().default&lt;/code&gt; 将仅为您提供第二个段落， &lt;code&gt;slots().foo&lt;/code&gt; 将仅为您提供第一段。有两个 &lt;code&gt;children&lt;/code&gt; 和 &lt;code&gt;slots()&lt;/code&gt; 因此，您可以选择此组件是否知道一个槽系统或许代表，它通过沿责任传递到另一个组件 &lt;code&gt;children&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="642f0a872b130e87234ba2ea02cd0acd1f89f0f7" translate="yes" xml:space="preserve">
          <source>For this to actually work though, the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; inside the component must:</source>
          <target state="translated">为了使它真正起作用，组件内部的 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 必须：</target>
        </trans-unit>
        <trans-unit id="7067621097f331cfbfd9c61c3f4e1bba268f1f7f" translate="yes" xml:space="preserve">
          <source>For those using &lt;code&gt;keyCode&lt;/code&gt; in their codebase, we recommend converting them to their kebab-cased named equivalents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d3cdea2ca7baa200cc6c2ffdec5ca079874264" translate="yes" xml:space="preserve">
          <source>For usage via native ES modules imports (in browser via &lt;code&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870759f6d46b7c078c81edc1954a4567215df1a3" translate="yes" xml:space="preserve">
          <source>For use in Node.js server-side rendering via &lt;code&gt;require()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd55d066931ba01f4f5e712cf3141c92316f8a02" translate="yes" xml:space="preserve">
          <source>For use with bundlers like &lt;code&gt;webpack&lt;/code&gt;, &lt;code&gt;rollup&lt;/code&gt; and &lt;code&gt;parcel&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f92adb4391d3d5a7fa7daa29cb0cd3d55eab859" translate="yes" xml:space="preserve">
          <source>For users relying on the deep merge behavior from mixins, we recommend refactoring your code to avoid such reliance altogether, since deep merges from mixins are very implicit and can make the code logic more difficult to understand and debug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a35f2ca9829aa883fba906d90a1506c724cac8" translate="yes" xml:space="preserve">
          <source>For users relying on the object declaration, we recommend:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49d376a6de7473873ecab8b0255bfe983f0a381" translate="yes" xml:space="preserve">
          <source>Force the Vue instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.</source>
          <target state="translated">强制Vue实例重新渲染。请注意,它不会影响所有的子组件,只影响实例本身和插入槽内容的子组件。</target>
        </trans-unit>
        <trans-unit id="2f2577b76f5c89e67164242a6f4fffe0a8d9b0c6" translate="yes" xml:space="preserve">
          <source>Force the component instance to re-render. Note it does not affect all child components, only the instance itself and child components with inserted slot content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a1921854dd7346d5793a7190ade36dcd65a3ec" translate="yes" xml:space="preserve">
          <source>Forcing an Update</source>
          <target state="translated">强制更新</target>
        </trans-unit>
        <trans-unit id="3598258735d9462e35c71955d2aad478ee96de66" translate="yes" xml:space="preserve">
          <source>Form Input Bindings</source>
          <target state="translated">表格输入绑定</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="ea24491e797fa1205ee5f52da7150a0c400a5c95" translate="yes" xml:space="preserve">
          <source>Fortunately, if you&amp;rsquo;re using Webpack (or &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI 3+&lt;/a&gt;, which uses Webpack internally), you can use &lt;code&gt;require.context&lt;/code&gt; to globally register only these very common base components. Here&amp;rsquo;s an example of the code you might use to globally import base components in your app&amp;rsquo;s entry file (e.g. &lt;code&gt;src/main.js&lt;/code&gt;):</source>
          <target state="translated">幸运的是，如果您使用的是Webpack（或内部使用Webpack的&lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI 3+&lt;/a&gt;），则可以使用 &lt;code&gt;require.context&lt;/code&gt; 仅全局注册这些非常常见的基本组件。这是您可以用来在应用程序的入口文件（例如 &lt;code&gt;src/main.js&lt;/code&gt; ）中全局导入基本组件的代码示例：</target>
        </trans-unit>
        <trans-unit id="f4f1f7855db809feec9483f80786171f3900b2c2" translate="yes" xml:space="preserve">
          <source>Fortunately, since the new directives are much simpler, you can master them more easily. Read the new &lt;a href=&quot;custom-directive&quot;&gt;Custom Directives guide&lt;/a&gt; to learn more.</source>
          <target state="translated">幸运的是，由于新指令要简单得多，因此您可以更轻松地掌握它们。阅读新的《&lt;a href=&quot;custom-directive&quot;&gt;自定义指令》指南&lt;/a&gt;以了解更多信息。</target>
        </trans-unit>
        <trans-unit id="4fd9ae517465a40e53760a54f6bec333ee06dca1" translate="yes" xml:space="preserve">
          <source>Fortunately, this task is made very simple by Vue&amp;rsquo;s custom &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">幸运的是，Vue的自定义 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素使此任务变得非常简单：</target>
        </trans-unit>
        <trans-unit id="c91f2670059f0276f8d6d89ac974fb50d086e473" translate="yes" xml:space="preserve">
          <source>Fragment Instances &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">片段实例&lt;sup&gt;已删除&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="d45089940ca38bf48726ea01710791bffa1dee6e" translate="yes" xml:space="preserve">
          <source>Fragments</source>
          <target state="translated">Fragments</target>
        </trans-unit>
        <trans-unit id="af39dd055c3ef8226fbe929d048cafb094dc8a51" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
          <target state="translated">Frameworks</target>
        </trans-unit>
        <trans-unit id="f5d06aefcec385ad7ff6c62157c32259ce1a6caf" translate="yes" xml:space="preserve">
          <source>From CDN or without a Bundler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4642923d899cbc5ab62815e12de0271d6f2fa99" translate="yes" xml:space="preserve">
          <source>From a &lt;code&gt;provide&lt;/code&gt;/&lt;code&gt;inject&lt;/code&gt; perspective, the application can be thought of as the root-level ancestor, with the root component as its only child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178ebb713b9cc3628fd4bcdf9a3650661449516a" translate="yes" xml:space="preserve">
          <source>From a security perspective, you should only use Vue templates that you can trust. Never use user-generated content as your template.</source>
          <target state="translated">从安全的角度来看,你应该只使用你可以信任的Vue模板。千万不要使用用户生成的内容作为您的模板。</target>
        </trans-unit>
        <trans-unit id="9c1467ca8f0b364bc76e51d96247151aff4bf125" translate="yes" xml:space="preserve">
          <source>From the next page on, we'll use the shorthand in our examples, as that's the most common usage for Vue developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0a1c225bd8748f6348154b46c2de2332edb8a4" translate="yes" xml:space="preserve">
          <source>Full-word component names</source>
          <target state="translated">全字组件名称</target>
        </trans-unit>
        <trans-unit id="3aa0c3eb248b1e714e0b69b9e72c94f2ab3623af" translate="yes" xml:space="preserve">
          <source>Full-word component names &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;强烈建议使用&lt;/sup&gt;全字词组件名称&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="c1c714fa2e5c3d3a4ea2ec4e1e55c1e860e21631" translate="yes" xml:space="preserve">
          <source>Function Shorthand</source>
          <target state="translated">功能速记</target>
        </trans-unit>
        <trans-unit id="d66736d35977604554e47b985518c7ca79eb37e3" translate="yes" xml:space="preserve">
          <source>Functional Components</source>
          <target state="translated">功能组件</target>
        </trans-unit>
        <trans-unit id="96b26a9809ce22c81fe36a4f50e6626696dc9755" translate="yes" xml:space="preserve">
          <source>Functional Images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3455d04f7b99aaa4edea48a05fcdacfa7f01090" translate="yes" xml:space="preserve">
          <source>Functional components can only be created using a plain function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca23386e71140d24b5ccfb5fed4ead2166b6d7dd" translate="yes" xml:space="preserve">
          <source>Functional components can only be created using a plain function that receives &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; (i.e., &lt;code&gt;slots&lt;/code&gt;, &lt;code&gt;attrs&lt;/code&gt;, &lt;code&gt;emit&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37459d26665e23e74f757aae407f678185f79975" translate="yes" xml:space="preserve">
          <source>Functional components, however, require you to explicitly define this behavior:</source>
          <target state="translated">然而,功能组件需要你明确定义这种行为。</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a61bd33b146f5097972a45bc611701e6893138" translate="yes" xml:space="preserve">
          <source>Furthermore, there&amp;rsquo;s another feature Proxies offer us. Rather than just returning the value like this: &lt;code&gt;target[prop]&lt;/code&gt;, we could take this a step further and use a feature called &lt;code&gt;Reflect&lt;/code&gt;, which allows us to do proper &lt;code&gt;this&lt;/code&gt; binding. It looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686299f7711a328af7f7ede481ecd878f135b9f6" translate="yes" xml:space="preserve">
          <source>Generally speaking, &lt;code&gt;v-if&lt;/code&gt; has higher toggle costs while &lt;code&gt;v-show&lt;/code&gt; has higher initial render costs. So prefer &lt;code&gt;v-show&lt;/code&gt; if you need to toggle something very often, and prefer &lt;code&gt;v-if&lt;/code&gt; if the condition is unlikely to change at runtime.</source>
          <target state="translated">一般来说， &lt;code&gt;v-if&lt;/code&gt; 的切换成本较高，而 &lt;code&gt;v-show&lt;/code&gt; 的初始渲染成本较高。所以喜欢 &lt;code&gt;v-show&lt;/code&gt; ，如果你需要切换的东西，很多时候，和喜欢 &lt;code&gt;v-if&lt;/code&gt; 如果条件不太可能在运行时改变。</target>
        </trans-unit>
        <trans-unit id="54c5f98c2534a5664e54bdf67174809b2a27c8a3" translate="yes" xml:space="preserve">
          <source>Get Support</source>
          <target state="translated">获得支持</target>
        </trans-unit>
        <trans-unit id="56838e716d916a8f84179a277a8f61383a4d8ff1" translate="yes" xml:space="preserve">
          <source>Get the Chrome Extension (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4abb192008124d36b56bb6371f66e847e75589d" translate="yes" xml:space="preserve">
          <source>Get the Firefox Addon (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec9d1dc51ac0809678c9ec59c779548f5b4c755" translate="yes" xml:space="preserve">
          <source>Get the standalone Electron app (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">入门</target>
        </trans-unit>
        <trans-unit id="b9157644be6cdf74f67e41a7df493f2e72e89d4e" translate="yes" xml:space="preserve">
          <source>Getting repositories from a presumedly external API for that user name and refreshing it whenever the user changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4ff491f120f9f77d6aec67cf1c1a5aec7a86ca" translate="yes" xml:space="preserve">
          <source>GitHub (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4687f4eea959b8d3a7678579930ba86b60298a4b" translate="yes" xml:space="preserve">
          <source>Global API</source>
          <target state="translated">全球API</target>
        </trans-unit>
        <trans-unit id="9c2bad2cea69725d1e181e1b8b68e50c0e0677bb" translate="yes" xml:space="preserve">
          <source>Global API Treeshaking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99de9060d9d291cf15a1d729547287918e216dc" translate="yes" xml:space="preserve">
          <source>Global Config</source>
          <target state="translated">全局配置</target>
        </trans-unit>
        <trans-unit id="547f82d236a59c0ef25ec787ae007217c314dc24" translate="yes" xml:space="preserve">
          <source>Global Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87e1f8386cdfab8951563f9287ce245995f5751" translate="yes" xml:space="preserve">
          <source>Global Mixin</source>
          <target state="translated">全球搅拌器</target>
        </trans-unit>
        <trans-unit id="12acfdfcb7281091faacdbe76162537707d677a4" translate="yes" xml:space="preserve">
          <source>Global Registration</source>
          <target state="translated">全球注册</target>
        </trans-unit>
        <trans-unit id="163847eea99fcc7224e4af66d098a5cc860a81a0" translate="yes" xml:space="preserve">
          <source>Global Vue API is changed to use an application instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81aa990181e866f19d507616169f29872b576378" translate="yes" xml:space="preserve">
          <source>Global and internal APIs have been restructured to be tree-shakable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808b46b8dcb3c8b68f9280a9b70cf36df1ff8d8d" translate="yes" xml:space="preserve">
          <source>Global builds are not &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD (opens new window)&lt;/a&gt; builds. They are built as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFEs (opens new window)&lt;/a&gt; and are only meant for direct use via &lt;code&gt;&amp;lt;script src=&quot;...&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3851c26eb150b1ec81c4c0fb518dc3a2c3de854" translate="yes" xml:space="preserve">
          <source>Global configuration makes it difficult to share the same copy of Vue between multiple &quot;apps&quot; on the same page, but with different global configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca0c9680d30aa516862873fbaa7f725be08e92d" translate="yes" xml:space="preserve">
          <source>Global configuration makes it easy to accidentally pollute other test cases during testing. Users need to carefully store original global configuration and restore it after each test (e.g. resetting &lt;code&gt;Vue.config.errorHandler&lt;/code&gt;). Some APIs like &lt;code&gt;Vue.use&lt;/code&gt; and &lt;code&gt;Vue.mixin&lt;/code&gt; don't even have a way to revert their effects. This makes tests involving plugins particularly tricky. In fact, vue-test-utils has to implement a special API &lt;code&gt;createLocalVue&lt;/code&gt; to deal with this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23476cf27dc98d9e3173cbdb68ad4566d7bbe61" translate="yes" xml:space="preserve">
          <source>Global registration often isn&amp;rsquo;t ideal. For example, if you&amp;rsquo;re using a build system like Webpack, globally registering all components means that even if you stop using a component, it could still be included in your final build. This unnecessarily increases the amount of JavaScript your users have to download.</source>
          <target state="translated">全球注册通常不理想。例如，如果您使用的是Webpack之类的构建系统，则全局注册所有组件意味着即使您停止使用某个组件，它也仍然可以包含在最终构建中。这不必要地增加了用户必须下载的JavaScript数量。</target>
        </trans-unit>
        <trans-unit id="37ea5973c3a2644655b6a96aa3352df9a45d716a" translate="yes" xml:space="preserve">
          <source>Global registration often isn't ideal. For example, if you're using a build system like Webpack, globally registering all components means that even if you stop using a component, it could still be included in your final build. This unnecessarily increases the amount of JavaScript your users have to download.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b51a4acf3ac2ad46709058f4a65e88a724bd55" translate="yes" xml:space="preserve">
          <source>Global state management</source>
          <target state="translated">全球国家管理</target>
        </trans-unit>
        <trans-unit id="f3a3ea30b8a5c7b620242522b576fd9fc064c881" translate="yes" xml:space="preserve">
          <source>Globally registered components can be used in the template of any component within the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cdbb9287a2eee1e29278ad1a52afa18af50490" translate="yes" xml:space="preserve">
          <source>Globally registered components can be used in the template of any root Vue instance (&lt;code&gt;new Vue&lt;/code&gt;) created afterwards &amp;ndash; and even inside all subcomponents of that Vue instance&amp;rsquo;s component tree.</source>
          <target state="translated">全局注册的组件可以在之后创建的任何根Vue实例（ &lt;code&gt;new Vue&lt;/code&gt; ）的模板中使用，甚至可以在该Vue实例的组件树的所有子组件内使用。</target>
        </trans-unit>
        <trans-unit id="9d53a8dc9787d0f1938039b6b2df16c89e2967b1" translate="yes" xml:space="preserve">
          <source>Go ahead and enter &lt;code&gt;app3.seen = false&lt;/code&gt; in the console. You should see the message disappear.</source>
          <target state="translated">继续，在控制台中输入 &lt;code&gt;app3.seen = false&lt;/code&gt; 。您应该看到该消息消失。</target>
        </trans-unit>
        <trans-unit id="61dedcf053ff33692baacbf7789c5d7195d9acbe" translate="yes" xml:space="preserve">
          <source>Good</source>
          <target state="translated">Good</target>
        </trans-unit>
        <trans-unit id="dd17342cb47b948d64f169d73cfeec3f8b3e3f31" translate="yes" xml:space="preserve">
          <source>Grammar</source>
          <target state="translated">Grammar</target>
        </trans-unit>
        <trans-unit id="69bb404ef61342527a97e3471c79974d9c78d193" translate="yes" xml:space="preserve">
          <source>Group of Lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="e5ec1b56265caf2664a953b65cb3f8f644817218" translate="yes" xml:space="preserve">
          <source>Guide: Dynamic &amp;amp; Async Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2dd938f61dd340f569fabf697c6ec2bb6dee7c" translate="yes" xml:space="preserve">
          <source>Guide: Render Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="613dffa8c694c4b79227626375484864e1cbb5bc" translate="yes" xml:space="preserve">
          <source>HTML &amp;amp; CSS</source>
          <target state="translated">HTML和CSS</target>
        </trans-unit>
        <trans-unit id="ecb5ae374f41987062d1edb5a439c141fbcfee47" translate="yes" xml:space="preserve">
          <source>HTML Interpolation &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">HTML插值&lt;sup&gt;已删除&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="61152bedc285b45e3443132c85b9e9eab87b1c71" translate="yes" xml:space="preserve">
          <source>HTML attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you&amp;rsquo;re using in-DOM templates, camelCased prop names need to use their kebab-cased (hyphen-delimited) equivalents:</source>
          <target state="translated">HTML属性名称不区分大小写，因此浏览器会将所有大写字符解释为小写。这意味着当您使用in-DOM模板时，骆驼式道具名称需要使用kebab大小写（用连字符分隔）：</target>
        </trans-unit>
        <trans-unit id="b39bff9af267e6abbb868e9a12d409c07e11dc31" translate="yes" xml:space="preserve">
          <source>HTML attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you're using in-DOM templates, camelCased prop names need to use their kebab-cased (hyphen-delimited) equivalents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206317f92c61c3721e7b0ef393e74b50f2adc608" translate="yes" xml:space="preserve">
          <source>HTML elements,</source>
          <target state="translated">HTML元素。</target>
        </trans-unit>
        <trans-unit id="b7d20a95e49462d14a4c08f7dda3686750b36c96" translate="yes" xml:space="preserve">
          <source>HTML interpolation has been &lt;a href=&quot;#HTML-Interpolation-removed&quot;&gt;removed in favor of &lt;code&gt;v-html&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">HTML插值已被&lt;a href=&quot;#HTML-Interpolation-removed&quot;&gt;删除，转而支持 &lt;code&gt;v-html&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b1c56685d95ab775546bda4c6e1ef23eea39b81" translate="yes" xml:space="preserve">
          <source>HTML interpolations (&lt;code&gt;{{{ foo }}}&lt;/code&gt;) have been removed in favor of the &lt;a href=&quot;../api/index#v-html&quot;&gt;&lt;code&gt;v-html&lt;/code&gt; directive&lt;/a&gt;.</source>
          <target state="translated">HTML插值（ &lt;code&gt;{{{ foo }}}&lt;/code&gt; ）已被删除，以支持&lt;a href=&quot;../api/index#v-html&quot;&gt; &lt;code&gt;v-html&lt;/code&gt; 指令&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9222f90ca7bef5ec077522a045ce26798b1f94f0" translate="yes" xml:space="preserve">
          <source>HTML output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5f7d68ba95b6c2f0128818861a5fb3a7ce41b3" translate="yes" xml:space="preserve">
          <source>HTML&amp;rsquo;s built-in input types won&amp;rsquo;t always meet your needs. Fortunately, Vue components allow you to build reusable inputs with completely customized behavior. These inputs even work with &lt;code&gt;v-model&lt;/code&gt;! To learn more, read about &lt;a href=&quot;components#Using-v-model-on-Components&quot;&gt;custom inputs&lt;/a&gt; in the Components guide.</source>
          <target state="translated">HTML的内置输入类型不能总是满足您的需求。幸运的是，Vue组件允许您以完全自定义的行为构建可重用的输入。这些输入甚至可以与 &lt;code&gt;v-model&lt;/code&gt; ！要了解更多信息，请阅读《组件指南》中有关&lt;a href=&quot;components#Using-v-model-on-Components&quot;&gt;自定义输入&lt;/a&gt;的信息。</target>
        </trans-unit>
        <trans-unit id="fb690270c76e2db47a970e06f86e7a3a5883a88a" translate="yes" xml:space="preserve">
          <source>HTML's built-in input types won't always meet your needs. Fortunately, Vue components allow you to build reusable inputs with completely customized behavior. These inputs even work with &lt;code&gt;v-model&lt;/code&gt;! To learn more, read about &lt;a href=&quot;component-basics#using-v-model-on-components&quot;&gt;custom inputs&lt;/a&gt; in the Components guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b83e92529f5151314d046d862c4a9c77d93516" translate="yes" xml:space="preserve">
          <source>HTML-based templates make it much easier to progressively migrate existing applications to take advantage of Vue&amp;rsquo;s reactivity features.</source>
          <target state="translated">基于HTML的模板使逐步迁移现有应用程序变得更加容易，以利用Vue的反应性功能。</target>
        </trans-unit>
        <trans-unit id="b9b80c438bdbf48deb660589d7261f0c7c9b951b" translate="yes" xml:space="preserve">
          <source>Handling &lt;code&gt;v-model&lt;/code&gt; modifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6fab8d8bdb45dbc0c724b264884e741a1423d5" translate="yes" xml:space="preserve">
          <source>Handling Edge Cases</source>
          <target state="translated">处理边缘案例</target>
        </trans-unit>
        <trans-unit id="0c27db799f42037e36231e8871e3549a290cef26" translate="yes" xml:space="preserve">
          <source>Handling Loading State</source>
          <target state="translated">处理加载状态</target>
        </trans-unit>
        <trans-unit id="f70e7e4e8994ebaac734eaf505f7cb87f5015b0f" translate="yes" xml:space="preserve">
          <source>Handling User Input</source>
          <target state="translated">处理用户输入</target>
        </trans-unit>
        <trans-unit id="61c9f84499bec9bde043fc021c98456103f86820" translate="yes" xml:space="preserve">
          <source>Hardware Acceleration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553c9fd444b729d939071ffd415fb951213f90a4" translate="yes" xml:space="preserve">
          <source>Hashbangs are no longer required for Google to crawl a URL, so they are no longer the default (or even an option) for the hash strategy.</source>
          <target state="translated">Hashbangs不再是Google抓取URL的必要条件,所以它们不再是Hash策略的默认(甚至是一个选项)。</target>
        </trans-unit>
        <trans-unit id="9f228bc8902ad4164e90bc20dd028fb5c8497a4c" translate="yes" xml:space="preserve">
          <source>Having &lt;code&gt;props&lt;/code&gt; as a separate argument makes it easier to type it individually without messing up the types of other properties on the context. It also makes it possible to keep a consistent signature across &lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;render&lt;/code&gt; and plain functional components with TSX support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e07493b672fce8fe42c311e7616e88f54ce8244" translate="yes" xml:space="preserve">
          <source>Having a wrapper object around any value allows us to safely pass it across our whole app without worrying about losing its reactivity somewhere along the way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d68b23680238f325efc34072a89db096cd1404" translate="yes" xml:space="preserve">
          <source>Having this validator extracted out, we&amp;rsquo;ve also more comfortably built it up into a more robust solution. The state quirks have been eliminated and it&amp;rsquo;s actually impossible for users to enter anything wrong, similar to what the browser&amp;rsquo;s native number input tries to do.</source>
          <target state="translated">提取出该验证器后，我们还可以更轻松地将其构建为更强大的解决方案。状态怪癖已被消除，用户实际上不可能输入任何错误，类似于浏览器的本机数字输入尝试执行的操作。</target>
        </trans-unit>
        <trans-unit id="d4f75e97b23c45e2b51b6b59566b0c63957b9ec2" translate="yes" xml:space="preserve">
          <source>HeadingMap (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97d4c3dede14ee24bc42018c52f19917fd481c9" translate="yes" xml:space="preserve">
          <source>Headings</source>
          <target state="translated">Headings</target>
        </trans-unit>
        <trans-unit id="5d3e638fd34dc7467faa0ba823b8497588b5815b" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;attributeName&lt;/code&gt; will be dynamically evaluated as a JavaScript expression, and its evaluated value will be used as the final value for the argument. For example, if your Vue instance has a data property, &lt;code&gt;attributeName&lt;/code&gt;, whose value is &lt;code&gt;&quot;href&quot;&lt;/code&gt;, then this binding will be equivalent to &lt;code&gt;v-bind:href&lt;/code&gt;.</source>
          <target state="translated">在这里， &lt;code&gt;attributeName&lt;/code&gt; 将作为JavaScript表达式动态求值，并且其求值将用作参数的最终值。例如，如果您的Vue实例具有数据属性 &lt;code&gt;attributeName&lt;/code&gt; ，其值为 &lt;code&gt;&quot;href&quot;&lt;/code&gt; ，则此绑定将等效于 &lt;code&gt;v-bind:href&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d6eb28f6d668d58fcb816e70ad43f719a0fc8d8" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;attributeName&lt;/code&gt; will be dynamically evaluated as a JavaScript expression, and its evaluated value will be used as the final value for the argument. For example, if your component instance has a data property, &lt;code&gt;attributeName&lt;/code&gt;, whose value is &lt;code&gt;&quot;href&quot;&lt;/code&gt;, then this binding will be equivalent to &lt;code&gt;v-bind:href&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a97b67c98ddcf2e842f6272379190e542a3a62" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;filterA&lt;/code&gt; is defined as a function taking three arguments. The value of &lt;code&gt;message&lt;/code&gt; will be passed into the first argument. The plain string &lt;code&gt;'arg1'&lt;/code&gt; will be passed into the &lt;code&gt;filterA&lt;/code&gt; as its second argument, and the value of expression &lt;code&gt;arg2&lt;/code&gt; will be evaluated and passed in as the third argument.</source>
          <target state="translated">这里 &lt;code&gt;filterA&lt;/code&gt; 被定义为一个带有三个参数的函数。 &lt;code&gt;message&lt;/code&gt; 的值将传递到第一个参数。纯字符串 &lt;code&gt;'arg1'&lt;/code&gt; 将作为其第二个参数传递到 &lt;code&gt;filterA&lt;/code&gt; 中，表达式 &lt;code&gt;arg2&lt;/code&gt; 的值将被求值并作为第三个参数传递。</target>
        </trans-unit>
        <trans-unit id="b533c1b3a997459bdeab6c6103d2b8341430c012" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;href&lt;/code&gt; is the argument, which tells the &lt;code&gt;v-bind&lt;/code&gt; directive to bind the element&amp;rsquo;s &lt;code&gt;href&lt;/code&gt; attribute to the value of the expression &lt;code&gt;url&lt;/code&gt;.</source>
          <target state="translated">这里的 &lt;code&gt;href&lt;/code&gt; 是参数，它告诉 &lt;code&gt;v-bind&lt;/code&gt; 指令将元素的 &lt;code&gt;href&lt;/code&gt; 属性绑定到表达式 &lt;code&gt;url&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="6ffd9aa49c21f1783d7611e5655d91a18b44be91" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;href&lt;/code&gt; is the argument, which tells the &lt;code&gt;v-bind&lt;/code&gt; directive to bind the element's &lt;code&gt;href&lt;/code&gt; attribute to the value of the expression &lt;code&gt;url&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a2ad49522f0c5140bd579d6e3f6cc63de82a9e" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;slot=&quot;default&quot;&lt;/code&gt; can be omitted as it is implied:</source>
          <target state="translated">此处可以省略 &lt;code&gt;slot=&quot;default&quot;&lt;/code&gt; 因为它暗含了：</target>
        </trans-unit>
        <trans-unit id="d3ca790739e416685bfae690f4058212d4fda89a" translate="yes" xml:space="preserve">
          <source>Here is a high level overview of what has changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d9edba5ad2d5d46534df4318d376f41d57f939" translate="yes" xml:space="preserve">
          <source>Here is a high level summary of the changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0256c11a8b0470c358ede8196463daf684ea765" translate="yes" xml:space="preserve">
          <source>Here is a quick summary of what has changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a9ea85b2164c893f9e78fffe543d952249311e" translate="yes" xml:space="preserve">
          <source>Here is the code used for a bounce in CSS (example from animate.css):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a992eb5c40fb541d26012305484c0906879154" translate="yes" xml:space="preserve">
          <source>Here the argument is the event name to listen to. We will talk about event handling in more detail too.</source>
          <target state="translated">这里的参数是要监听的事件名称。我们也会更详细地讨论事件处理。</target>
        </trans-unit>
        <trans-unit id="f407b88178ffc4e03f9f78c8af7c050fb1a05bb8" translate="yes" xml:space="preserve">
          <source>Here we are encountering something new. The &lt;code&gt;v-bind&lt;/code&gt; attribute you are seeing is called a &lt;strong&gt;directive&lt;/strong&gt;. Directives are prefixed with &lt;code&gt;v-&lt;/code&gt; to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, it is basically saying &amp;ldquo;keep this element&amp;rsquo;s &lt;code&gt;title&lt;/code&gt; attribute up-to-date with the &lt;code&gt;message&lt;/code&gt; property on the Vue instance.&amp;rdquo;</source>
          <target state="translated">在这里，我们遇到了新的事物。您看到的 &lt;code&gt;v-bind&lt;/code&gt; 属性称为&lt;strong&gt;指令&lt;/strong&gt;。指令以 &lt;code&gt;v-&lt;/code&gt; 前缀表示它们是Vue提供的特殊属性，并且您可能已经猜到了，它们将特殊的反应性行为应用于呈现的DOM。在这里，基本上是说&amp;ldquo;保持该元素的 &lt;code&gt;title&lt;/code&gt; 属性与Vue实例上的 &lt;code&gt;message&lt;/code&gt; 属性保持最新。&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="751e0a91c130034762d460cc66491b330e126c1a" translate="yes" xml:space="preserve">
          <source>Here we are exposing &lt;code&gt;root&lt;/code&gt; on the render context and binding it to the div as its ref via &lt;code&gt;ref=&quot;root&quot;&lt;/code&gt;. In the Virtual DOM patching algorithm, if a VNode's &lt;code&gt;ref&lt;/code&gt; key corresponds to a ref on the render context, the VNode's corresponding element or component instance will be assigned to the value of that ref. This is performed during the Virtual DOM mount / patch process, so template refs will only get assigned values after the initial render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ddeabf229b343098143b62cc31c65937b8d157" translate="yes" xml:space="preserve">
          <source>Here we are specifying:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389a149e837ebef6fef4f3100295dd0e225f2c13" translate="yes" xml:space="preserve">
          <source>Here we have declared a computed property &lt;code&gt;publishedBooksMessage&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20439924cb310f6e6ebea9dce4e509745f1d1bb0" translate="yes" xml:space="preserve">
          <source>Here we have declared a computed property &lt;code&gt;reversedMessage&lt;/code&gt;. The function we provided will be used as the getter function for the property &lt;code&gt;vm.reversedMessage&lt;/code&gt;:</source>
          <target state="translated">在这里，我们声明了一个计算属性 &lt;code&gt;reversedMessage&lt;/code&gt; 。我们提供的函数将用作属性 &lt;code&gt;vm.reversedMessage&lt;/code&gt; 的getter函数：</target>
        </trans-unit>
        <trans-unit id="6dd6b17922e8d61f4cd1713d4453ed7746270179" translate="yes" xml:space="preserve">
          <source>Here we're encountering something new. The &lt;code&gt;v-bind&lt;/code&gt; attribute you're seeing is called a &lt;strong&gt;directive&lt;/strong&gt;. Directives are prefixed with &lt;code&gt;v-&lt;/code&gt; to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here we are basically saying &quot;&lt;em&gt;keep this element's &lt;code&gt;title&lt;/code&gt; attribute up-to-date with the &lt;code&gt;message&lt;/code&gt; property on the current active instance.&lt;/em&gt;&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a306f3c88f48a02cdfb6f3ef97fd1e95920c1df" translate="yes" xml:space="preserve">
          <source>Here you have two options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a58605aec4adfd7f18a1d980084fe022c01384" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a complete example of a simple todo list:</source>
          <target state="translated">这是一个简单的待办事项清单的完整示例：</target>
        </trans-unit>
        <trans-unit id="e6deaab1ac1757bb576b7c7fb31ce01f23836233" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a &lt;code&gt;smart-list&lt;/code&gt; component that delegates to more specific components, depending on the props passed to it:</source>
          <target state="translated">这是一个 &lt;code&gt;smart-list&lt;/code&gt; 组件的示例，该组件根据传递给它的道具委托给更特定的组件：</target>
        </trans-unit>
        <trans-unit id="8edc36b060f6cabd0970dde81f8964d59b6e1225" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a Vue component:</source>
          <target state="translated">这是Vue组件的示例：</target>
        </trans-unit>
        <trans-unit id="b31be59658661ba4e66f41944f3554b7a0be5398" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of a file we&amp;rsquo;ll call &lt;code&gt;Hello.vue&lt;/code&gt;:</source>
          <target state="translated">这是我们称为 &lt;code&gt;Hello.vue&lt;/code&gt; 的文件的示例：</target>
        </trans-unit>
        <trans-unit id="8301786be0047e93079236c79b42b00ad3cb2b07" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33ffef562696923d8035d66d6b00e446f9c5cd6" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example using a template component:</source>
          <target state="translated">这是使用模板组件的示例：</target>
        </trans-unit>
        <trans-unit id="99ff339aed17c551cb54d5842ca9646f53c8ed64" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example with all of these modifiers used together:</source>
          <target state="translated">这是所有这些修饰符一起使用的示例：</target>
        </trans-unit>
        <trans-unit id="18a91a386128ffc554ca249fb0825499466cf9d3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example, omitting prefixed CSS rules for the sake of brevity:</source>
          <target state="translated">这是一个示例，为了简洁起见，省略了前缀CSS规则：</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">这是一个例子：</target>
        </trans-unit>
        <trans-unit id="f7ffc75a586e32509010b20213e0f4e623c0e848" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s that in action:</source>
          <target state="translated">实际情况如下：</target>
        </trans-unit>
        <trans-unit id="af595ae1ee864db6e76a481669408e7e92ac1f80" translate="yes" xml:space="preserve">
          <source>Here's a complete example of a simple todo list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688263e087f6601926476dfa2106a42e01380fe3" translate="yes" xml:space="preserve">
          <source>Here's an example of a Vue component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f8d41844c86dba38f5f9baf04f9bae49d99522" translate="yes" xml:space="preserve">
          <source>Here's an example of a file we'll call &lt;code&gt;Hello.vue&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db86228ab3e54e78f7884e3efc24acce9a5c3687" translate="yes" xml:space="preserve">
          <source>Here's an example using a template component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fd1a6d8a5163d813f71f2f63b54d29f44ba7da" translate="yes" xml:space="preserve">
          <source>Here's an example with all of these modifiers used together:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbab897511ec130afe4d250a68f265050a7f57c4" translate="yes" xml:space="preserve">
          <source>Here's an example, omitting prefixed CSS rules for the sake of brevity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e85e4e8113fb3e1f07e1727e78d73f5f0043e6" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261472f9fef16d300b7f853b7d429bbbc35678f0" translate="yes" xml:space="preserve">
          <source>Here's that in action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a829483e3b314613758a5a663c73e6905d5701b" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;slot-scope&lt;/code&gt; declares the received props object as the &lt;code&gt;slotProps&lt;/code&gt; variable, and makes it available inside the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; scope. You can name &lt;code&gt;slotProps&lt;/code&gt; anything you like similar to naming function arguments in JavaScript.</source>
          <target state="translated">在这里， &lt;code&gt;slot-scope&lt;/code&gt; 将接收到的props对象声明为 &lt;code&gt;slotProps&lt;/code&gt; 变量，并使其在 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 范围内可用。您可以将 &lt;code&gt;slotProps&lt;/code&gt; 命名为任何喜欢的名称，类似于在JavaScript中命名函数参数。</target>
        </trans-unit>
        <trans-unit id="07c4f8866b982390147ee4436ece672dc4814fe6" translate="yes" xml:space="preserve">
          <source>Here, in the initial setup for this element, the directive binds a style by passing in a value, that can be updated to different values through the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2563c09ff007a4f9ec50612961f789811e49c4" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;computed&lt;/code&gt; function returns a &lt;em&gt;read-only&lt;/em&gt;&lt;strong&gt;Reactive Reference&lt;/strong&gt; to the output of the getter-like callback passed as the first argument to &lt;code&gt;computed&lt;/code&gt;. In order to access the &lt;strong&gt;value&lt;/strong&gt; of the newly-created computed variable, we need to use the &lt;code&gt;.value&lt;/code&gt; property just like with &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68e5bf516c14d7636dc7e787f07b009104eba6f" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;v-if&lt;/code&gt; directive would remove/insert the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element based on the truthiness of the value of the expression &lt;code&gt;seen&lt;/code&gt;.</source>
          <target state="translated">在这里， &lt;code&gt;v-if&lt;/code&gt; 指令将根据 &lt;code&gt;seen&lt;/code&gt; 表达式的值的真实性删除/插入 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="74a0401e1c560ba1c5afee6af3517146ff6e91b7" translate="yes" xml:space="preserve">
          <source>Hiding Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e26e3e40dfd6774d32a14ec704c7c19bb0bf799" translate="yes" xml:space="preserve">
          <source>Hook Functions</source>
          <target state="translated">钩子功能</target>
        </trans-unit>
        <trans-unit id="d2bdd950b4b524b4faf0540c42b846e440d3ebd2" translate="yes" xml:space="preserve">
          <source>Hook functions with the same name are merged into an array so that all of them will be called. Mixin hooks will be called &lt;strong&gt;before&lt;/strong&gt; the component&amp;rsquo;s own hooks.</source>
          <target state="translated">具有相同名称的挂钩函数将合并到一个数组中，以便将全部调用它们。Mixin挂钩将在组件自己的挂钩&lt;strong&gt;之前&lt;/strong&gt;被调用。</target>
        </trans-unit>
        <trans-unit id="6ba6a1895ad3d6fa940a4eef923c87acb24c09ba" translate="yes" xml:space="preserve">
          <source>Hook functions with the same name are merged into an array so that all of them will be called. Mixin hooks will be called &lt;strong&gt;before&lt;/strong&gt; the component's own hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b88ba8ec9795f83800a7ac6636b4adef402300" translate="yes" xml:space="preserve">
          <source>Hook inside &lt;code&gt;setup&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edd974a79e43316d687690ff92842aac0f5cdd0" translate="yes" xml:space="preserve">
          <source>Hooks for components entering and leaving the DOM, in both CSS and JS, using the built-in &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dedbb35ca38d565066cd84144d4ad177f2ccb3b9" translate="yes" xml:space="preserve">
          <source>Hooks for when multiple elements are updating in position, with FLIP techniques applied under the hood to increase performance, using the &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06de93ef38b56bf88492fb8c2be6c9fc093d78d1" translate="yes" xml:space="preserve">
          <source>HostElement</source>
          <target state="translated">HostElement</target>
        </trans-unit>
        <trans-unit id="d3c93caab229d0146d8642adf5eff4a71a0f8cab" translate="yes" xml:space="preserve">
          <source>HostNode</source>
          <target state="translated">HostNode</target>
        </trans-unit>
        <trans-unit id="656dedbf5301c31ed9bdf32f2a451638643101f3" translate="yes" xml:space="preserve">
          <source>How Changes Are Tracked</source>
          <target state="translated">如何跟踪变化</target>
        </trans-unit>
        <trans-unit id="256f6c2fbc2e1f1e87f183792e2b1c68e14ed4ee" translate="yes" xml:space="preserve">
          <source>How Vue Tracks These Changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff257949771d060d1777c575c6a95991e5e90cc" translate="yes" xml:space="preserve">
          <source>How can I get involved with translations?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a056aea1f6dc2d57c44eacd2de4c8078611a80e1" translate="yes" xml:space="preserve">
          <source>How long will it take to migrate a Vue 1.x app to 2.0?</source>
          <target state="translated">将Vue 1.x应用迁移到2.0需要多长时间?</target>
        </trans-unit>
        <trans-unit id="a173386c8ab0ffd650a7e5d8b6fb73ce6260ce4e" translate="yes" xml:space="preserve">
          <source>How many times you get distracted and start playing with a cool new feature. 😉 Not judging, it also happened to us while building 2.0!</source>
          <target state="translated">多少次你分心了,开始玩一个很酷的新功能,&quot;■▄▄■▓,不是评判,我们在建设2.0的时候也发生过这样的事情!</target>
        </trans-unit>
        <trans-unit id="5b51fcd95b1bb4c1d0a2feadea82b32351c13de4" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;inline-template&lt;/code&gt; makes the scope of your templates harder to reason about. As a best practice, prefer defining templates inside the component using the &lt;code&gt;template&lt;/code&gt; option or in a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element in a &lt;code&gt;.vue&lt;/code&gt; file.</source>
          <target state="translated">但是， &lt;code&gt;inline-template&lt;/code&gt; 使您难以推断模板的范围。最佳做法是，最好使用 &lt;code&gt;template&lt;/code&gt; 选项或 &lt;code&gt;.vue&lt;/code&gt; 文件中的 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 元素在组件内部定义模板。</target>
        </trans-unit>
        <trans-unit id="7effd8de3ec227dd5f0f5288ef466720ca7ad205" translate="yes" xml:space="preserve">
          <source>However, because &lt;code&gt;props&lt;/code&gt; are reactive, you &lt;strong&gt;cannot use ES6 destructuring&lt;/strong&gt; because it will remove props reactivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824570cd815ecf580931f34e5f29506440b103be" translate="yes" xml:space="preserve">
          <source>However, do NOT destructure the &lt;code&gt;props&lt;/code&gt; object, as it will lose reactivity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d602a14282520e03f05621c18e657389b28401" translate="yes" xml:space="preserve">
          <source>However, even this barely scratches the surface of what scoped slots are capable of. For real-life, powerful examples of scoped slot usage, we recommend browsing libraries such as &lt;a href=&quot;https://github.com/Akryum/vue-virtual-scroller&quot;&gt;Vue Virtual Scroller&lt;/a&gt;, &lt;a href=&quot;https://github.com/posva/vue-promised&quot;&gt;Vue Promised&lt;/a&gt;, and &lt;a href=&quot;https://github.com/LinusBorg/portal-vue&quot;&gt;Portal Vue&lt;/a&gt;.</source>
          <target state="translated">但是，即使这样也勉强划伤了适用范围的插槽的功能。有关作用域插槽用法的真实示例，建议浏览诸如&lt;a href=&quot;https://github.com/Akryum/vue-virtual-scroller&quot;&gt;Vue Virtual Scroller&lt;/a&gt;，&lt;a href=&quot;https://github.com/posva/vue-promised&quot;&gt;Vue Promised&lt;/a&gt;和&lt;a href=&quot;https://github.com/LinusBorg/portal-vue&quot;&gt;Portal Vue之类的库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e377ccc91063a19e1128087c043b05ac14bc27fd" translate="yes" xml:space="preserve">
          <source>However, for applications that use &lt;strong&gt;only&lt;/strong&gt; global component definitions via &lt;code&gt;Vue.component&lt;/code&gt;, we recommend kebab-case instead. The reasons are:</source>
          <target state="translated">但是，对于&lt;strong&gt;仅&lt;/strong&gt;通过 &lt;code&gt;Vue.component&lt;/code&gt; 使用全局组件定义的应用程序，我们建议改用kebab -case。原因如下：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
