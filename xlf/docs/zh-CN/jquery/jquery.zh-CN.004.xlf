<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="jquery">
    <body>
      <group id="jquery">
        <trans-unit id="24668f69e38ec30af5430ec57c38e4f3a360d781" translate="yes" xml:space="preserve">
          <source>Passing Event Data</source>
          <target state="translated">传递事件数据</target>
        </trans-unit>
        <trans-unit id="be8d5a856c78d9ea61953d1aae50161b1479b08d" translate="yes" xml:space="preserve">
          <source>Passing a Function</source>
          <target state="translated">传递函数</target>
        </trans-unit>
        <trans-unit id="94b296314bd220f16316eba73ac6a0293f79631e" translate="yes" xml:space="preserve">
          <source>Passing and handling event data works the same way as it does for &lt;code&gt;.on()&lt;/code&gt;.</source>
          <target state="translated">传递和处理事件数据的方式与 &lt;code&gt;.on()&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="79b9493aad121249c06485be783dab64a5565634" translate="yes" xml:space="preserve">
          <source>Passing data to the handler</source>
          <target state="translated">将数据传递给处理程序</target>
        </trans-unit>
        <trans-unit id="ff30533028ec97d95729586d791f43cc566b973b" translate="yes" xml:space="preserve">
          <source>Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all invalid JSON strings:</source>
          <target state="translated">传入一个错误的JSON字符串会导致一个JavaScript异常被抛出。例如,以下都是无效的JSON字符串。</target>
        </trans-unit>
        <trans-unit id="0d0c656b1b2892a427f97eda703e8d098445da3c" translate="yes" xml:space="preserve">
          <source>Per-property Easing</source>
          <target state="translated">每项财产放松</target>
        </trans-unit>
        <trans-unit id="9589684d53470a15aa562a26841a8da7dc6623de" translate="yes" xml:space="preserve">
          <source>Perform a custom animation of a set of CSS properties.</source>
          <target state="translated">对一组CSS属性执行自定义动画。</target>
        </trans-unit>
        <trans-unit id="7fbb6be2c9386631b75a15df0b73a775f134538b" translate="yes" xml:space="preserve">
          <source>Perform an asynchronous HTTP (Ajax) request.</source>
          <target state="translated">执行一个异步的HTTP(Ajax)请求。</target>
        </trans-unit>
        <trans-unit id="e17b8a0e34bfa65fea451f6c53d2fcb021fcde57" translate="yes" xml:space="preserve">
          <source>Places a border around all list items that are children of &amp;lt;ul class=&quot;topnav&quot;&amp;gt; .</source>
          <target state="translated">在所有属于&amp;lt;ul class =&amp;ldquo; topnav&amp;rdquo;&amp;gt;的子项的列表项周围放置边框。</target>
        </trans-unit>
        <trans-unit id="88e22ddf6d8a412676c8f0c76b426f4bc5fc842b" translate="yes" xml:space="preserve">
          <source>PlainObject</source>
          <target state="translated">PlainObject</target>
        </trans-unit>
        <trans-unit id="3180f052c4c83832239076f7eacc4313566a9114" translate="yes" xml:space="preserve">
          <source>Please note that although you can pass text nodes and comment nodes into a jQuery collection this way, most operations don't support them. The few that do will have an explicit note on their API documentation page.</source>
          <target state="translated">请注意,虽然你可以通过这种方式将文本节点和注释节点传递到jQuery集合中,但大多数操作都不支持它们。少数支持的会在其API文档页面上有明确的说明。</target>
        </trans-unit>
        <trans-unit id="2bd1c35913397741b31109eaf3cbb050bdd82de0" translate="yes" xml:space="preserve">
          <source>Possible flags:</source>
          <target state="translated">可能的标志:</target>
        </trans-unit>
        <trans-unit id="f8156ee9b4d1cf9712c808ab6f59d8c0e0265624" translate="yes" xml:space="preserve">
          <source>Post a form using Ajax and put results in a div</source>
          <target state="translated">使用Ajax发布表单,并将结果放在div中。</target>
        </trans-unit>
        <trans-unit id="8eda3141aabc4b52dc3c81a854edd4140396a7f3" translate="yes" xml:space="preserve">
          <source>Post to the test.php page and get content which has been returned in json format (&amp;lt;?php echo json_encode(array(&quot;name&quot;=&amp;gt;&quot;John&quot;,&quot;time&quot;=&amp;gt;&quot;2pm&quot;)); ?&amp;gt;).</source>
          <target state="translated">发布到test.php页面并获取以json格式返回的内容（&amp;lt;？php echo json_encode（array（&amp;ldquo; name&amp;rdquo; =&amp;gt;&amp;ldquo; John&amp;rdquo;，&amp;ldquo; time&amp;rdquo; =&amp;gt;&amp;ldquo; 2pm&amp;rdquo;））;？&amp;gt;）。</target>
        </trans-unit>
        <trans-unit id="f322b9f3495aba7144e876707bc47a2a7d952d9d" translate="yes" xml:space="preserve">
          <source>Prefilters are a perfect fit when custom options need to be handled. Given the following code, for example, a call to &lt;code&gt;$.ajax()&lt;/code&gt; would automatically abort a request to the same URL if the custom &lt;code&gt;abortOnRetry&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">当需要处理自定义选项时，预过滤器非常适合。例如，给定以下代码，如果自定义 &lt;code&gt;abortOnRetry&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; ，则对 &lt;code&gt;$.ajax()&lt;/code&gt; 的调用将自动中止对同一URL的请求：</target>
        </trans-unit>
        <trans-unit id="5bcb18ee1f9a94de27b30e82157a747c5b3e613a" translate="yes" xml:space="preserve">
          <source>Prefilters can also be used to modify existing options. For example, the following proxies cross-domain requests through https://mydomain.net/proxy/:</source>
          <target state="translated">也可以使用前置过滤器来修改现有的选项。例如,以下是通过https://mydomain.net/proxy/代理跨域请求。</target>
        </trans-unit>
        <trans-unit id="232e132d8704ff6d6a305ebb6baea10771f24387" translate="yes" xml:space="preserve">
          <source>Prepend all spans to the element with the ID &quot;foo&quot; (Check .prepend() documentation for more examples)</source>
          <target state="translated">将所有的跨度预置到ID为 &quot;foo &quot;的元素上(查看.prepend()文档以获取更多的例子)</target>
        </trans-unit>
        <trans-unit id="3a1b005580f79d2b9feb9ee84fc3ad816f8ee6c6" translate="yes" xml:space="preserve">
          <source>Prepends a DOM Element to all paragraphs.</source>
          <target state="translated">为所有段落预置一个DOM元素。</target>
        </trans-unit>
        <trans-unit id="7cad6f704aab1d92b6effccc3995a5b6e6f987b2" translate="yes" xml:space="preserve">
          <source>Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.</source>
          <target state="translated">预先将一个jQuery对象(类似于DOM元素的数组)添加到所有段落中。</target>
        </trans-unit>
        <trans-unit id="76f13c2409c82584ac6e5093150789bb63510be8" translate="yes" xml:space="preserve">
          <source>Prepends some HTML to all paragraphs.</source>
          <target state="translated">为所有段落预置一些HTML。</target>
        </trans-unit>
        <trans-unit id="82f8527f6240b044a741cb8b663a0e5e11d03bde" translate="yes" xml:space="preserve">
          <source>Prevents other event handlers from being called.</source>
          <target state="translated">防止其他事件处理程序被调用。</target>
        </trans-unit>
        <trans-unit id="0fd2d09f7e570399a076e57e7b952b3c96b2fef8" translate="yes" xml:space="preserve">
          <source>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.</source>
          <target state="translated">防止事件在DOM树上冒泡,防止任何父级处理程序被通知事件。</target>
        </trans-unit>
        <trans-unit id="bf21227c4464de1be5b8be0cedaef5b1eb6baf31" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.4, the arguments should be true Javascript Array objects; use &lt;code&gt;$.makeArray&lt;/code&gt; if they are not.</source>
          <target state="translated">在jQuery 1.4之前，参数应为true的Javascript Array对象；如果不是，请使用 &lt;code&gt;$.makeArray&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b123d694309d3954b58e4e45e2e6f52607ff20e0" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.4.3 (starting in jQuery 1.4) the &lt;code&gt;.data()&lt;/code&gt; method completely replaced all data, instead of just extending the data object. If you are using third-party plugins it may not be advisable to completely replace the element's data object, since plugins may have also set data.</source>
          <target state="translated">在jQuery 1.4.3之前（从jQuery 1.4开始） &lt;code&gt;.data()&lt;/code&gt; data （）方法完全替换了所有数据，而不仅仅是扩展了数据对象。如果您使用的是第三方插件，则不建议完全替换元素的数据对象，因为插件也可能设置了数据。</target>
        </trans-unit>
        <trans-unit id="1530433b2facdd30bee4aad9ae661ef1b3234fda" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.4.3, &lt;code&gt;.data( obj )&lt;/code&gt; completely replaced all data. Since jQuery 1.4.3, data is instead extended by shallow merge.</source>
          <target state="translated">在jQuery 1.4.3之前， &lt;code&gt;.data( obj )&lt;/code&gt; 完全替换了所有数据。从jQuery 1.4.3开始，数据通过浅合并来扩展。</target>
        </trans-unit>
        <trans-unit id="fb40c73abf82d2ae0bf8b9f2097143bcdd0c6521" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.5, the global &lt;code&gt;.ajaxError()&lt;/code&gt; callback event had to be used in order to handle &lt;code&gt;$.getScript()&lt;/code&gt; errors:</source>
          <target state="translated">在jQuery 1.5之前，必须使用全局 &lt;code&gt;.ajaxError()&lt;/code&gt; 回调事件来处理 &lt;code&gt;$.getScript()&lt;/code&gt; 错误：</target>
        </trans-unit>
        <trans-unit id="42d18165ce6b4de6e02584eb2f59175fe1d13460" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.7, in selector strings with positional selectors such as &lt;code&gt;:first&lt;/code&gt;, &lt;code&gt;:gt()&lt;/code&gt;, or &lt;code&gt;:even&lt;/code&gt;, the positional filtering is done against the jQuery object passed to &lt;code&gt;.is()&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt; against the containing document. So for the HTML shown above, an expression such as &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, but &lt;code&gt;$( &quot;li:first-child&quot; ).is( &quot;li:last-child&quot; )&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. In addition, a bug in Sizzle prevented many positional selectors from working properly. These two factors made positional selectors almost unusable in filters.</source>
          <target state="translated">在此之前的jQuery 1.7，在具有位置的选择器，例如选择字符串 &lt;code&gt;:first&lt;/code&gt; ， &lt;code&gt;:gt()&lt;/code&gt; ，或 &lt;code&gt;:even&lt;/code&gt; ，位置滤波针对传递到jQuery对象完成 &lt;code&gt;.is()&lt;/code&gt; ，&lt;em&gt;不&lt;/em&gt;针对包含文档。因此，对于上面显示的HTML，表达式 &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; ，而 &lt;code&gt;$( &quot;li:first-child&quot; ).is( &quot;li:last-child&quot; )&lt;/code&gt; 返回 &lt;code&gt;false&lt;/code&gt; 。此外，Sizzle中的错误使许多位置选择器无法正常工作。这两个因素使得位置选择器几乎无法在过滤器中使用。</target>
        </trans-unit>
        <trans-unit id="d6ee2d082684a3d606d94b34e878d67b987a0362" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.8, the &lt;code&gt;:eq(index)&lt;/code&gt; selector did &lt;em&gt;not&lt;/em&gt; accept a negative value for &lt;code&gt;index&lt;/code&gt; (though the &lt;a href=&quot;eq&quot;&gt;&lt;code&gt;.eq(index)&lt;/code&gt;&lt;/a&gt; method did).</source>
          <target state="translated">在jQuery 1.8之前， &lt;code&gt;:eq(index)&lt;/code&gt; 选择器&lt;em&gt;不&lt;/em&gt;接受负值的 &lt;code&gt;index&lt;/code&gt; （尽管&lt;a href=&quot;eq&quot;&gt; &lt;code&gt;.eq(index)&lt;/code&gt; &lt;/a&gt;方法可以）。</target>
        </trans-unit>
        <trans-unit id="3a212e9e0e5070c7c9452ef703226665bf7ea108" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.8, the &lt;code&gt;:gt(index)&lt;/code&gt; selector did &lt;em&gt;not&lt;/em&gt; accept a negative value for &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">在jQuery 1.8之前， &lt;code&gt;:gt(index)&lt;/code&gt; 选择器&lt;em&gt;不&lt;/em&gt;接受 &lt;code&gt;index&lt;/code&gt; 的负值</target>
        </trans-unit>
        <trans-unit id="af3da3106e959302465ecda0b177352ad8bffd36" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.8, the &lt;code&gt;:lt(index)&lt;/code&gt; selector did &lt;em&gt;not&lt;/em&gt; accept a negative value for &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">在jQuery 1.8之前， &lt;code&gt;:lt(index)&lt;/code&gt; 选择器&lt;em&gt;不&lt;/em&gt;接受 &lt;code&gt;index&lt;/code&gt; 的负值。</target>
        </trans-unit>
        <trans-unit id="8738bf3874c5692fd941d4379f8a846ab800608b" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.9, &lt;code&gt;$.parseJSON&lt;/code&gt; returned &lt;code&gt;null&lt;/code&gt; instead of throwing an error if it was passed an empty string, &lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;, even though those are not valid JSON.</source>
          <target state="translated">在jQuery 1.9之前， &lt;code&gt;$.parseJSON&lt;/code&gt; 返回 &lt;code&gt;null&lt;/code&gt; ,而不是如果传递了空字符串， &lt;code&gt;null&lt;/code&gt; 或 &lt;code&gt;undefined&lt;/code&gt; ，则抛出错误，即使这些不是有效的JSON。</target>
        </trans-unit>
        <trans-unit id="d08f9318122f146f6802cf4161100074eebb1bc1" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.9, &lt;code&gt;.after()&lt;/code&gt; would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, &lt;code&gt;.after()&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt;, and &lt;code&gt;.replaceWith()&lt;/code&gt; always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect&amp;mdash;that is, neither the set nor the nodes it contains are changed.</source>
          <target state="translated">在jQuery 1.9之前，如果集合中的第一个节点未连接到文档，则 &lt;code&gt;.after()&lt;/code&gt; 将尝试在当前jQuery集合中添加或更改节点，在这种情况下，它们将返回新的jQuery集合而不是原始集合。该方法可能返回也可能未返回新结果，具体取决于其参数的数量或连接性！在jQuery 1.9的， &lt;code&gt;.after()&lt;/code&gt; 。 &lt;code&gt;.before()&lt;/code&gt; ，和 &lt;code&gt;.replaceWith()&lt;/code&gt; 总是返回原始未修改集。尝试在没有父节点的节点上使用这些方法没有任何效果，即，集及其包含的节点都不会更改。</target>
        </trans-unit>
        <trans-unit id="2cdd46443ef8cc4f83d8ffa807e15ca6f9d3e830" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.9, &lt;code&gt;.before()&lt;/code&gt; would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, &lt;code&gt;.after()&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt;, and &lt;code&gt;.replaceWith()&lt;/code&gt; always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect&amp;mdash;that is, neither the set nor the nodes it contains are changed.</source>
          <target state="translated">在jQuery 1.9之前，如果集合中的第一个节点未连接到文档，则 &lt;code&gt;.before()&lt;/code&gt; 会尝试在当前jQuery集合中添加或更改节点，在这些情况下，它们将返回新的jQuery集合而不是原始集合。该方法可能返回也可能未返回新结果，具体取决于其参数的数量或连接性！在jQuery 1.9的， &lt;code&gt;.after()&lt;/code&gt; 。 &lt;code&gt;.before()&lt;/code&gt; ，和 &lt;code&gt;.replaceWith()&lt;/code&gt; 总是返回原始未修改集。尝试在没有父节点的节点上使用这些方法没有任何效果，也就是说，集及其所包含的节点都不会更改。</target>
        </trans-unit>
        <trans-unit id="4b6d5d6b69a94dddcc6ea715db291c8faa64fec9" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 1.9, &lt;code&gt;.replaceWith()&lt;/code&gt; would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, &lt;code&gt;.after()&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt;, and &lt;code&gt;.replaceWith()&lt;/code&gt; always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect&amp;mdash;that is, neither the set nor the nodes it contains are changed.</source>
          <target state="translated">在jQuery 1.9之前，如果集合中的第一个节点未连接到文档，则 &lt;code&gt;.replaceWith()&lt;/code&gt; 会尝试在当前jQuery集合中添加或更改节点，在这种情况下，它们将返回新的jQuery集合而不是原始集合。该方法可能返回也可能未返回新结果，具体取决于其参数的数量或连接性！在jQuery 1.9的， &lt;code&gt;.after()&lt;/code&gt; 。 &lt;code&gt;.before()&lt;/code&gt; ，和 &lt;code&gt;.replaceWith()&lt;/code&gt; 总是返回原始未修改集。尝试在没有父节点的节点上使用这些方法没有任何效果，也就是说，集及其所包含的节点都不会更改。</target>
        </trans-unit>
        <trans-unit id="779026168e3049f2cac03a3a10cfd6a8fff5e6cf" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 3.0, this method was called &lt;code&gt;&lt;a href=&quot;jquery.unique&quot;&gt;jQuery.unique()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在jQuery 3.0之前，此方法称为 &lt;code&gt;&lt;a href=&quot;jquery.unique&quot;&gt;jQuery.unique()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fa495912556317b590f7533e62b99917f547f60" translate="yes" xml:space="preserve">
          <source>Prior to jQuery 3.5.0, unsuccessful HTTP responses with a script &lt;code&gt;Content-Type&lt;/code&gt; were still executed.</source>
          <target state="translated">在jQuery 3.5.0之前，带有脚本 &lt;code&gt;Content-Type&lt;/code&gt; 的HTTP响应仍未执行。</target>
        </trans-unit>
        <trans-unit id="351a92ceed41b2e610186c68ece5e88842211bfa" translate="yes" xml:space="preserve">
          <source>Promise Object</source>
          <target state="translated">承诺对象</target>
        </trans-unit>
        <trans-unit id="e606f4866747c2f92752089eea46ab0c93882ee6" translate="yes" xml:space="preserve">
          <source>Properties generally affect the dynamic state of a DOM element without changing the serialized HTML attribute. Examples include the &lt;code&gt;value&lt;/code&gt; property of input elements, the &lt;code&gt;disabled&lt;/code&gt; property of inputs and buttons, or the &lt;code&gt;checked&lt;/code&gt; property of a checkbox. The &lt;code&gt;.prop()&lt;/code&gt; method should be used to set disabled and checked instead of the &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; method. The &lt;code&gt;&lt;a href=&quot;val&quot;&gt;.val()&lt;/a&gt;&lt;/code&gt; method should be used for getting and setting value.</source>
          <target state="translated">属性通常会在不更改序列化HTML属性的情况下影响DOM元素的动态状态。示例包括输入元素的 &lt;code&gt;value&lt;/code&gt; 属性，输入和按钮的 &lt;code&gt;disabled&lt;/code&gt; 属性或复选框的 &lt;code&gt;checked&lt;/code&gt; 属性。所述 &lt;code&gt;.prop()&lt;/code&gt; 方法应被用来设置残疾人和检查，而不是 &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; 方法。所述 &lt;code&gt;&lt;a href=&quot;val&quot;&gt;.val()&lt;/a&gt;&lt;/code&gt; 方法应被用于获取和设置值。</target>
        </trans-unit>
        <trans-unit id="5c0c8d78301081a9fe22695fffe4f726d4ea87b3" translate="yes" xml:space="preserve">
          <source>Prototype</source>
          <target state="translated">Prototype</target>
        </trans-unit>
        <trans-unit id="4dddbaec9dd46c9aeafdb1a4344538e3a3f99344" translate="yes" xml:space="preserve">
          <source>Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events.</source>
          <target state="translated">提供了一种基于零或多个Thenable对象执行回调函数的方法,通常是代表异步事件的Deferred对象。</target>
        </trans-unit>
        <trans-unit id="ec60235a3878a6dcf393d4a6bf9220cf073f8d11" translate="yes" xml:space="preserve">
          <source>Providing a negative number indicates a position starting from the end of the set, rather than the beginning. For example:</source>
          <target state="translated">提供负数表示从集合的末尾开始的位置,而不是开始。例如:</target>
        </trans-unit>
        <trans-unit id="86f54466e0004ea3152a3be478a81bd98fb0f962" translate="yes" xml:space="preserve">
          <source>Proxy Pattern</source>
          <target state="translated">代理模式</target>
        </trans-unit>
        <trans-unit id="7e558b6e85beca559a259cad628894195c6fe7e4" translate="yes" xml:space="preserve">
          <source>QUnit API docs</source>
          <target state="translated">QUnit API文档</target>
        </trans-unit>
        <trans-unit id="d0997ef78b0a4c39908ad9bff14d30fbb5aee18f" translate="yes" xml:space="preserve">
          <source>Queue a custom function.</source>
          <target state="translated">排列一个自定义函数。</target>
        </trans-unit>
        <trans-unit id="80e638f5c4369734d6653dc96c04c7acd78b38e7" translate="yes" xml:space="preserve">
          <source>Qunit's Assert Object</source>
          <target state="translated">Qunit的断言对象</target>
        </trans-unit>
        <trans-unit id="60fefb29eda0237f92306cb85899330ca8b230ee" translate="yes" xml:space="preserve">
          <source>Quoting</source>
          <target state="translated">Quoting</target>
        </trans-unit>
        <trans-unit id="73eacf64e5e81f1fcb39bf6fc6d87cea5690a84c" translate="yes" xml:space="preserve">
          <source>Reading and writing elements to an array uses the array-notation:</source>
          <target state="translated">向数组读写元素使用数组符号。</target>
        </trans-unit>
        <trans-unit id="3bd455d4841aed3c37f7ec4c5a4fc4a2af81c69d" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to a subset specified by a range of indices.</source>
          <target state="translated">将匹配的元素集减少到一个由指数范围指定的子集。</target>
        </trans-unit>
        <trans-unit id="1e8dd6900b011196e2f4a56c0cf89faca36f3e7e" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the even ones in the set, numbered from zero.</source>
          <target state="translated">将匹配的元素集合减少到集合中的偶数元素,从零开始编号。</target>
        </trans-unit>
        <trans-unit id="8739271f849c700a6c0f32e066d7a1a077a8c2dd" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the final one in the set.</source>
          <target state="translated">将匹配的元素集合减少到集合中的最后一个。</target>
        </trans-unit>
        <trans-unit id="f5f117806b16689d587a077b5e8a3008e7f14b4f" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the first in the set.</source>
          <target state="translated">将匹配的元素集合减少到集合中的第一个。</target>
        </trans-unit>
        <trans-unit id="dcb9f3bba427cedab9a22608ff1f552fd5105153" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the odd ones in the set, numbered from zero.</source>
          <target state="translated">将匹配的元素集合减少到集合中的奇数,从零开始编号。</target>
        </trans-unit>
        <trans-unit id="0ef2b5baaab943ca133dd166d2b25a9c8d6847db" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to the one at the specified index.</source>
          <target state="translated">将匹配的元素集减少到指定索引处的元素。</target>
        </trans-unit>
        <trans-unit id="cbef618e1d6febf6e667f916fb1a247bbf604c36" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</source>
          <target state="translated">将匹配的元素集减少到那些有与选择器或DOM元素匹配的子代的元素。</target>
        </trans-unit>
        <trans-unit id="e092144853f325cc23c57056fac3b9e47adaecea" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched elements to those that match the selector or pass the function&amp;rsquo;s test.</source>
          <target state="translated">将匹配的元素集减少到与选择器匹配或通过功能测试的元素。</target>
        </trans-unit>
        <trans-unit id="0ea00b1a0bd8455bb9506bc4716b955661b6d7fc" translate="yes" xml:space="preserve">
          <source>Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.</source>
          <target state="translated">注册一个处理程序,当Ajax请求完成并出现错误时,该处理程序将被调用。这是一个Ajax事件。</target>
        </trans-unit>
        <trans-unit id="cb1cd3334c0c68c88c6c354897b9a3c37ffc4f28" translate="yes" xml:space="preserve">
          <source>Register a handler to be called when Ajax requests complete. This is an AjaxEvent.</source>
          <target state="translated">注册一个处理程序,以便在Ajax请求完成时被调用。这是一个AjaxEvent。</target>
        </trans-unit>
        <trans-unit id="046a7a8cf91a262375dabe45d5530f029d0902a1" translate="yes" xml:space="preserve">
          <source>Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.</source>
          <target state="translated">注册一个处理程序,当所有的Ajax请求完成后,该处理程序将被调用。这是一个Ajax事件。</target>
        </trans-unit>
        <trans-unit id="f8b1ee0cf3bb013a4901ba48c82a092f864c1981" translate="yes" xml:space="preserve">
          <source>Register a handler to be called when the first Ajax request begins. This is an Ajax Event.</source>
          <target state="translated">注册一个处理程序,以便在第一个Ajax请求开始时被调用。这是一个Ajax事件。</target>
        </trans-unit>
        <trans-unit id="50e2f5291c06e2ab1e5d166ed5784a7b771585c2" translate="yes" xml:space="preserve">
          <source>Reject a Deferred object and call any failCallbacks with the given args.</source>
          <target state="translated">拒绝一个Deferred对象,并调用任何给定args的failCallbacks。</target>
        </trans-unit>
        <trans-unit id="5a4cbb7cd001bf81755640657aa8c8f3788845ef" translate="yes" xml:space="preserve">
          <source>Reject a Deferred object and call any failCallbacks with the given context and args.</source>
          <target state="translated">拒绝一个Deferred对象,并使用给定的上下文和args调用任何failCallbacks。</target>
        </trans-unit>
        <trans-unit id="296c0790c40cf3ee5ef277bdc24194e6a59621ee" translate="yes" xml:space="preserve">
          <source>Relinquish jQuery&amp;rsquo;s control of the $ variable.</source>
          <target state="translated">放弃jQuery对$变量的控制。</target>
        </trans-unit>
        <trans-unit id="d254480091a9afb5893e4d137b177e3c48f3d58d" translate="yes" xml:space="preserve">
          <source>Remove a callback or a collection of callbacks from a callback list.</source>
          <target state="translated">从回调列表中删除一个回调或一个回调集合。</target>
        </trans-unit>
        <trans-unit id="152bebda6c7fab2eb30b4e2f0905212360afd527" translate="yes" xml:space="preserve">
          <source>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</source>
          <target state="translated">基于一组特定的根元素,从事件中删除与当前选择器匹配的所有元素的处理程序。</target>
        </trans-unit>
        <trans-unit id="51844c3db03fe078e728ade46a3b9a19c4248f5a" translate="yes" xml:space="preserve">
          <source>Remove a previously-attached event handler from the elements.</source>
          <target state="translated">从元素中移除先前附加的事件处理程序。</target>
        </trans-unit>
        <trans-unit id="442c1f1945b0f5e3699145b6117ca4bc982901b0" translate="yes" xml:space="preserve">
          <source>Remove a previously-stored piece of data.</source>
          <target state="translated">删除之前存储的数据。</target>
        </trans-unit>
        <trans-unit id="fbeece5249b803d87fb8175d2bb5f652e7808a88" translate="yes" xml:space="preserve">
          <source>Remove a property for the set of matched elements.</source>
          <target state="translated">删除匹配元素集的属性。</target>
        </trans-unit>
        <trans-unit id="6b64a5a444f5c29728046911f570f989d1af99d1" translate="yes" xml:space="preserve">
          <source>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</source>
          <target state="translated">从匹配元素集中的每个元素中删除单个类、多个类或所有类。</target>
        </trans-unit>
        <trans-unit id="9c0453209c295e68a0c3d52f5c7e937797bbd791" translate="yes" xml:space="preserve">
          <source>Remove all child nodes of the set of matched elements from the DOM.</source>
          <target state="translated">从DOM中删除匹配元素集的所有子节点。</target>
        </trans-unit>
        <trans-unit id="0783a64069f3907b9e9bb07e5cad6b02d24bbf52" translate="yes" xml:space="preserve">
          <source>Remove all delegated click handlers from all paragraphs:</source>
          <target state="translated">删除所有段落中的所有委托点击处理程序。</target>
        </trans-unit>
        <trans-unit id="603e780ec0aea140b4761abbaa99d5c6c0951ed5" translate="yes" xml:space="preserve">
          <source>Remove all event handlers from all paragraphs:</source>
          <target state="translated">删除所有段落中的所有事件处理程序。</target>
        </trans-unit>
        <trans-unit id="fede081dd4918b39d6dff14b203036f0e5a1deab" translate="yes" xml:space="preserve">
          <source>Remove all of the callbacks from a list.</source>
          <target state="translated">从列表中删除所有的回调。</target>
        </trans-unit>
        <trans-unit id="89eb35e8f65afbe7124f07bef85708a3ab9dc117" translate="yes" xml:space="preserve">
          <source>Remove all the classes from the matched elements.</source>
          <target state="translated">删除所有匹配元素中的类。</target>
        </trans-unit>
        <trans-unit id="fe4f07de07a09dea08897e85ea59b3c2f916b939" translate="yes" xml:space="preserve">
          <source>Remove an attribute from each element in the set of matched elements.</source>
          <target state="translated">从匹配元素集中的每个元素中删除一个属性。</target>
        </trans-unit>
        <trans-unit id="944034e77286ef1b27bf82a282cddc5d330b328a" translate="yes" xml:space="preserve">
          <source>Remove an event handler.</source>
          <target state="translated">移除事件处理程序。</target>
        </trans-unit>
        <trans-unit id="d31f228affab5884a76a09d1b7f8a2dd08681afa" translate="yes" xml:space="preserve">
          <source>Remove elements from the set of matched elements.</source>
          <target state="translated">从匹配元素集合中删除元素。</target>
        </trans-unit>
        <trans-unit id="8cf593ca14051b1ad9096d31bd8f05ed1500f02a" translate="yes" xml:space="preserve">
          <source>Remove event handlers previously attached using .live() from the elements.</source>
          <target state="translated">从元素中删除之前使用.live()附加的事件处理程序。</target>
        </trans-unit>
        <trans-unit id="0fa050548901dd546b504c572fe6013210602a03" translate="yes" xml:space="preserve">
          <source>Remove from the queue all items that have not yet been run.</source>
          <target state="translated">从队列中删除所有尚未运行的项目。</target>
        </trans-unit>
        <trans-unit id="c7c079e57c1ef7a6b712d33758c39e1793c8fbd0" translate="yes" xml:space="preserve">
          <source>Remove just one previously bound handler by passing it as the third argument:</source>
          <target state="translated">通过将其作为第三个参数传递,只删除一个先前绑定的处理程序。</target>
        </trans-unit>
        <trans-unit id="e52e36c56060191804131d5a2b083997fcc59144" translate="yes" xml:space="preserve">
          <source>Remove the class 'blue' and 'under' from the matched elements (3.3+ syntax).</source>
          <target state="translated">从匹配的元素中删除类'蓝'和'下'(3.3+语法)。</target>
        </trans-unit>
        <trans-unit id="4219b3dbe4ae825caa17c061864413768325651d" translate="yes" xml:space="preserve">
          <source>Remove the class 'blue' and 'under' from the matched elements.</source>
          <target state="translated">从匹配的元素中删除类'蓝色'和'下'。</target>
        </trans-unit>
        <trans-unit id="87b0641be0ccaa7415884b279c3e7b7040b29896" translate="yes" xml:space="preserve">
          <source>Remove the class 'blue' from the matched elements.</source>
          <target state="translated">从匹配的元素中删除 &quot;蓝色 &quot;类。</target>
        </trans-unit>
        <trans-unit id="6a0a7ad121887d5025890028bd2da9cd450a9576" translate="yes" xml:space="preserve">
          <source>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</source>
          <target state="translated">将匹配元素集的父元素从DOM中移除,将匹配元素留在它们的位置上。</target>
        </trans-unit>
        <trans-unit id="d953b02f2e1c98e517a3ac7edba80df822b4640d" translate="yes" xml:space="preserve">
          <source>Remove the set of matched elements from the DOM.</source>
          <target state="translated">从DOM中移除匹配的元素集。</target>
        </trans-unit>
        <trans-unit id="90873df9b35abbbc19ef0b528f7a8ab9dd986502" translate="yes" xml:space="preserve">
          <source>Remove the white spaces at the start and at the end of the string.</source>
          <target state="translated">去掉字符串开头和结尾的白色空格。</target>
        </trans-unit>
        <trans-unit id="d9ed199cbdfe853b660c8cc18fd4e7751a3b78a3" translate="yes" xml:space="preserve">
          <source>Remove the whitespace from the beginning and end of a string.</source>
          <target state="translated">删除字符串开头和结尾的空白。</target>
        </trans-unit>
        <trans-unit id="7f5026e26420d9b7f5049b09584701738205a71d" translate="yes" xml:space="preserve">
          <source>Removes all child nodes (including text nodes) from all paragraphs</source>
          <target state="translated">删除所有段落中的所有子节点(包括文本节点)。</target>
        </trans-unit>
        <trans-unit id="c7f59cdf9d384b47749940783c2d6b4773f8723c" translate="yes" xml:space="preserve">
          <source>Removes all elements that match &quot;div p.selected&quot; from the total set of all paragraphs.</source>
          <target state="translated">从所有段落的总集中删除所有符合 &quot;div p.selected &quot;的元素。</target>
        </trans-unit>
        <trans-unit id="37dd8d8d2fcc8a4db7dbb9f9bf01ad407803263e" translate="yes" xml:space="preserve">
          <source>Removes all paragraphs from the DOM</source>
          <target state="translated">从DOM中删除所有段落</target>
        </trans-unit>
        <trans-unit id="ae96008bae2dd4ce2502a89bb1b9295630c1fd4b" translate="yes" xml:space="preserve">
          <source>Removes all paragraphs that contain &quot;Hello&quot; from the DOM. Analogous to doing &lt;code&gt;$(&quot;p&quot;).filter(&quot;:contains('Hello')&quot;).remove()&lt;/code&gt;.</source>
          <target state="translated">从DOM中删除所有包含&amp;ldquo; Hello&amp;rdquo;的段落。类似于执行 &lt;code&gt;$(&quot;p&quot;).filter(&quot;:contains('Hello')&quot;).remove()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1b85b3186be49bd7f79de4ea6d43e176de0433c5" translate="yes" xml:space="preserve">
          <source>Removes any duplicate elements from the array of divs.</source>
          <target state="translated">删除divs数组中的任何重复元素。</target>
        </trans-unit>
        <trans-unit id="4654814c9db6ea1bc61d08a6712f03a793c22363" translate="yes" xml:space="preserve">
          <source>Removes the element with the ID &quot;selected&quot; from the set of all paragraphs.</source>
          <target state="translated">从所有段落的集合中删除ID为 &quot;选定 &quot;的元素。</target>
        </trans-unit>
        <trans-unit id="81901ac43b3bb08696d37b0859394ec85057f9ca" translate="yes" xml:space="preserve">
          <source>Removing Specific Elements</source>
          <target state="translated">移除特定元素</target>
        </trans-unit>
        <trans-unit id="15c986757de465b6a45aa264a5bc85edcb733e56" translate="yes" xml:space="preserve">
          <source>Replace all paragraphs with bold words.</source>
          <target state="translated">用黑体字取代所有段落。</target>
        </trans-unit>
        <trans-unit id="78f70c0345c0da10bce4af147178b880384fb813" translate="yes" xml:space="preserve">
          <source>Replace all the paragraphs with bold words.</source>
          <target state="translated">将所有段落用黑体字代替。</target>
        </trans-unit>
        <trans-unit id="c5ddda6c87c667d6334fcaaa7ba826763d2dc9d4" translate="yes" xml:space="preserve">
          <source>Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.</source>
          <target state="translated">用提供的新内容替换匹配元素集合中的每个元素,并返回被删除的元素集合。</target>
        </trans-unit>
        <trans-unit id="f7e1cf90a2e1c81d39b57137303df978f22de979" translate="yes" xml:space="preserve">
          <source>Replace each target element with the set of matched elements.</source>
          <target state="translated">用匹配的元素集替换每个目标元素。</target>
        </trans-unit>
        <trans-unit id="53087331adad76acaddcc600bbcf93a9c82fcd8b" translate="yes" xml:space="preserve">
          <source>Report the index of some elements in the array.</source>
          <target state="translated">报告数组中一些元素的索引。</target>
        </trans-unit>
        <trans-unit id="5e9a3bf6a560aa64c830e9db0985d0dfcd0ba1e0" translate="yes" xml:space="preserve">
          <source>Request Method</source>
          <target state="translated">请求方法</target>
        </trans-unit>
        <trans-unit id="4c76b1be4e3aa28fa4d06646fbe476d10b22e4e6" translate="yes" xml:space="preserve">
          <source>Request the test.php page and send some additional data along (while still ignoring the return results).</source>
          <target state="translated">请求test.php页面并发送一些额外的数据(同时仍然忽略返回结果)。</target>
        </trans-unit>
        <trans-unit id="24fc417d76f2849e2c64fcd03769a749fc4c02d4" translate="yes" xml:space="preserve">
          <source>Request the test.php page, but ignore the return results.</source>
          <target state="translated">请求test.php页面,但忽略返回的结果。</target>
        </trans-unit>
        <trans-unit id="74a6c861840d7edd4e3d07a6e162d87643f6ac6d" translate="yes" xml:space="preserve">
          <source>Resolve a Deferred object and call any doneCallbacks with the given args.</source>
          <target state="translated">解析一个Deferred对象,并调用任何给定args的doneCallbacks。</target>
        </trans-unit>
        <trans-unit id="f310072e690bb2169c5202db5e456cb7ce4b4c1d" translate="yes" xml:space="preserve">
          <source>Resolve a Deferred object and call any doneCallbacks with the given context and args.</source>
          <target state="translated">解析一个Deferred对象,并使用给定的上下文和args调用任何doneCallbacks。</target>
        </trans-unit>
        <trans-unit id="73056f4840fff864dd823e5950a43e004a50bc9a" translate="yes" xml:space="preserve">
          <source>Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:</source>
          <target state="translated">当用户点击按钮时,解析一个延迟对象,触发一些回调函数。</target>
        </trans-unit>
        <trans-unit id="e738f391ed69af4fa52480f2a02b00f184f1e4e1" translate="yes" xml:space="preserve">
          <source>Resolve context and sole argument is the collection onto which &lt;code&gt;.promise()&lt;/code&gt; has been called.</source>
          <target state="translated">解决上下文，唯一的参数是已调用 &lt;code&gt;.promise()&lt;/code&gt; 的集合。</target>
        </trans-unit>
        <trans-unit id="f5f000a270f03c338bfc34fcaa0468e090d85559" translate="yes" xml:space="preserve">
          <source>Resolve the returned Promise using a &lt;code&gt;$.when()&lt;/code&gt; statement (the &lt;code&gt;.promise()&lt;/code&gt; method makes it possible to do this with jQuery collections):</source>
          <target state="translated">使用 &lt;code&gt;$.when()&lt;/code&gt; &lt;code&gt;.promise()&lt;/code&gt; （）语句解析返回的Promise （.promise（）方法使得使用jQuery集合可以做到这一点）：</target>
        </trans-unit>
        <trans-unit id="d289e011b469f4a41e089433b54f9d3dc9dbfe03" translate="yes" xml:space="preserve">
          <source>Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):</source>
          <target state="translated">当所有动画结束时(包括在动画回调中发起的动画或后来添加的动画),解析返回的Promise。</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="280702414af6806995b7134cb0d265cfea74a71c" translate="yes" xml:space="preserve">
          <source>Retrieval of shorthand CSS properties (e.g., &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;), although functional with some browsers, is not guaranteed. For example, if you want to retrieve the rendered &lt;code&gt;border-width&lt;/code&gt;, use: &lt;code&gt;$( elem ).css( &quot;borderTopWidth&quot; )&lt;/code&gt;, &lt;code&gt;$( elem ).css( &quot;borderBottomWidth&quot; )&lt;/code&gt;, and so on.</source>
          <target state="translated">速记CSS属性（例如 &lt;code&gt;margin&lt;/code&gt; ， &lt;code&gt;background&lt;/code&gt; ， &lt;code&gt;border&lt;/code&gt; ）的检索尽管可以在某些浏览器中使用，但不能保证。例如，如果要检索渲染的 &lt;code&gt;border-width&lt;/code&gt; ，请使用： &lt;code&gt;$( elem ).css( &quot;borderTopWidth&quot; )&lt;/code&gt; ， &lt;code&gt;$( elem ).css( &quot;borderBottomWidth&quot; )&lt;/code&gt; ，依此类推。</target>
        </trans-unit>
        <trans-unit id="1ae0f93946ed2805d7338f39fdd2b9f13fc9388d" translate="yes" xml:space="preserve">
          <source>Retrieve all the elements contained in the jQuery set, as an array.</source>
          <target state="translated">读取jQuery集合中的所有元素,作为一个数组。</target>
        </trans-unit>
        <trans-unit id="c47ebe06b994778f04553202da80384f93ec7ae5" translate="yes" xml:space="preserve">
          <source>Retrieve the DOM elements matched by the jQuery object.</source>
          <target state="translated">读取jQuery对象匹配的DOM元素。</target>
        </trans-unit>
        <trans-unit id="9e479bed7e5542e5175525608c0a44b2c1fcf5d7" translate="yes" xml:space="preserve">
          <source>Retrieve the latest version of an HTML page.</source>
          <target state="translated">检索HTML页面的最新版本。</target>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="translated">返回值</target>
        </trans-unit>
        <trans-unit id="0155f7262e902273c19d5e538a1316f003b2cec2" translate="yes" xml:space="preserve">
          <source>Return a Deferred&amp;rsquo;s Promise object.</source>
          <target state="translated">返回一个Deferred的Promise对象。</target>
        </trans-unit>
        <trans-unit id="3a487186e39ba43192e25c2d07c2ba9113b48b3a" translate="yes" xml:space="preserve">
          <source>Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.</source>
          <target state="translated">返回一个Promise对象,用于观察与集合绑定的某个类型的所有操作(无论是否排队)何时完成。</target>
        </trans-unit>
        <trans-unit id="7824bc1b97268a438f40660068804ec96b80b110" translate="yes" xml:space="preserve">
          <source>Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.</source>
          <target state="translated">返回根据传递的参数在DOM中找到的或通过传递HTML字符串创建的匹配元素的集合。</target>
        </trans-unit>
        <trans-unit id="d9398e7ff5752487f63c609b69a5765a1fe72a74" translate="yes" xml:space="preserve">
          <source>Return a number representing the current time.</source>
          <target state="translated">返回一个代表当前时间的数字。</target>
        </trans-unit>
        <trans-unit id="3464e4fd44ebfd6076f392976403b0abe1c38fff" translate="yes" xml:space="preserve">
          <source>Return the number of elements in the jQuery object.</source>
          <target state="translated">返回jQuery对象中元素的数量。</target>
        </trans-unit>
        <trans-unit id="48f6da53395f5dc902c90077711039058fa4bf40" translate="yes" xml:space="preserve">
          <source>Return the version number of the rendering engine used by the user's current browser. For example, FireFox 4 returns 2.0 (the version of the Gecko rendering engine it utilizes). &lt;strong&gt;Will not work in jQuery 1.9 or later&lt;/strong&gt; unless the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt; plugin is included.</source>
          <target state="translated">返回用户当前浏览器使用的渲染引擎的版本号。例如，FireFox 4返回2.0（它使用的Gecko渲染引擎的版本）。除非包含&lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt;插件，否则&lt;strong&gt;将无法在jQuery 1.9或更高版本中使用&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f3356d67954770e949ba2366aec0fa96e10d6e04" translate="yes" xml:space="preserve">
          <source>Return true if the current useragent is some version of Microsoft's Internet Explorer. &lt;strong&gt;Will not work in jQuery 1.9 or later&lt;/strong&gt; unless the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt; plugin is included.</source>
          <target state="translated">如果当前的用户代理是Microsoft Internet Explorer的某个版本，则返回true。除非包含&lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate&lt;/a&gt;插件，否则&lt;strong&gt;将无法在jQuery 1.9或更高版本中使用&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9f50100a0f1fca09b3a792dbaaaa792f960f542e" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;false&lt;/code&gt; from a handler is equivalent to calling both &lt;code&gt;.preventDefault()&lt;/code&gt; and &lt;code&gt;.stopPropagation()&lt;/code&gt; on the event object.</source>
          <target state="translated">从处理程序返回 &lt;code&gt;false&lt;/code&gt; 等同于在事件对象上调用 &lt;code&gt;.preventDefault()&lt;/code&gt; 和 &lt;code&gt;.stopPropagation()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cacb5cbc3c9a29defe5998a16b32ad3376994a2c" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;false&lt;/code&gt; from an event handler will automatically call &lt;code&gt;event.stopPropagation()&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt;. A &lt;code&gt;false&lt;/code&gt; value can also be passed for the &lt;code&gt;handler&lt;/code&gt; as a shorthand for &lt;code&gt;function(){ return false; }&lt;/code&gt;. So, &lt;code&gt;$( &quot;a.disabled&quot; ).on( &quot;click&quot;, false );&lt;/code&gt; attaches an event handler to all links with class &quot;disabled&quot; that prevents them from being followed when they are clicked and also stops the event from bubbling.</source>
          <target state="translated">从事件处理程序返回 &lt;code&gt;false&lt;/code&gt; 将自动调用 &lt;code&gt;event.stopPropagation()&lt;/code&gt; 和 &lt;code&gt;event.preventDefault()&lt;/code&gt; 。还可以为 &lt;code&gt;handler&lt;/code&gt; 传递一个 &lt;code&gt;false&lt;/code&gt; 值，作为 &lt;code&gt;function(){ return false; }&lt;/code&gt; 。因此， &lt;code&gt;$( &quot;a.disabled&quot; ).on( &quot;click&quot;, false );&lt;/code&gt; 将事件处理程序附加到所有具有&amp;ldquo;禁用&amp;rdquo;类的链接，以防止单击它们时遵循它们，并且还阻止事件冒泡。</target>
        </trans-unit>
        <trans-unit id="5459c5e9a6bfcaa998770b0962a3243e0f3e2492" translate="yes" xml:space="preserve">
          <source>Returning an Empty Set</source>
          <target state="translated">返回空集</target>
        </trans-unit>
        <trans-unit id="359ee285db1ab3497383b24058b385819a29afb7" translate="yes" xml:space="preserve">
          <source>Returns -1, as there is no element with ID foobar.</source>
          <target state="translated">返回-1,因为没有ID为foobar的元素。</target>
        </trans-unit>
        <trans-unit id="24601238c8e49ca9e38cd6023c2beef68041e041" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the Deferred object is in the rejected state, meaning that either &lt;a href=&quot;https://api.jquery.com/h/deferred.reject/&quot;&gt;&lt;code&gt;deferred.reject()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;deferred.rejectWith()&lt;/code&gt;&lt;/a&gt; has been called for the object and the failCallbacks have been called (or are in the process of being called).</source>
          <target state="translated">如果Deferred对象处于拒绝状态，则返回 &lt;code&gt;true&lt;/code&gt; ，这意味着已为该对象调用了&lt;a href=&quot;https://api.jquery.com/h/deferred.reject/&quot;&gt; &lt;code&gt;deferred.reject()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;deferred.rejectwith&quot;&gt; &lt;code&gt;deferred.rejectWith()&lt;/code&gt; &lt;/a&gt;，并且failCallbacks已被调用（或正在被调用）。</target>
        </trans-unit>
        <trans-unit id="9dedf983f3b1620c2ac4eee00b8ab8ef38a14955" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the Deferred object is in the resolved state, meaning that either &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;deferred.resolve()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;deferred.resolveWith()&lt;/code&gt;&lt;/a&gt; has been called for the object and the doneCallbacks have been called (or are in the process of being called).</source>
          <target state="translated">如果Deferred对象处于已解析状态，则返回 &lt;code&gt;true&lt;/code&gt; ，这意味着已为该对象调用了&lt;a href=&quot;deferred.resolve&quot;&gt; &lt;code&gt;deferred.resolve()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;deferred.resolvewith&quot;&gt; &lt;code&gt;deferred.resolveWith()&lt;/code&gt; &lt;/a&gt;并且已经调用了doneCallbacks（或正在被调用）。</target>
        </trans-unit>
        <trans-unit id="7e66d7a2f48c78a417819b8c659a7fcf4b7bec23" translate="yes" xml:space="preserve">
          <source>Returns a boolean value (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) that indicates whether or not the</source>
          <target state="translated">返回一个布尔值（ &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; ），该值指示是否</target>
        </trans-unit>
        <trans-unit id="d1ad30f7b515023713d6bc9f31009a6f3048d871" translate="yes" xml:space="preserve">
          <source>Returns an object containing the properties &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt;.</source>
          <target state="translated">返回包含属性 &lt;code&gt;top&lt;/code&gt; 和 &lt;code&gt;left&lt;/code&gt; 的对象。</target>
        </trans-unit>
        <trans-unit id="a21a8e38cb37e60f58b7163fc87dcac1a82a39dd" translate="yes" xml:space="preserve">
          <source>Returns false, because the parent of the input is a p element.</source>
          <target state="translated">返回false,因为输入的父元素是p元素。</target>
        </trans-unit>
        <trans-unit id="6d2be479c7c43a070dda61fc193794309f667f58" translate="yes" xml:space="preserve">
          <source>Returns the height of the element, including top and bottom padding, border, and optionally margin, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="translated">返回元素的高度，包括顶部和底部填充，边框以及可选的边距（以像素为单位）。如果在一组空元素上调用，则返回 &lt;code&gt;undefined&lt;/code&gt; （在jQuery 3.0之前为 &lt;code&gt;null&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bcb06190361244e70900f5938f0e2cd4070df363" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar in relation to all &amp;lt;li&amp;gt; elements.</source>
          <target state="translated">返回ID栏相对于所有&amp;lt;li&amp;gt;元素的索引。</target>
        </trans-unit>
        <trans-unit id="b29dc2ed2dd9462cb6949e7b4789acfe0862cff6" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar in relation to its siblings.</source>
          <target state="translated">Returns the index for the element with ID bar in relation to its siblings。</target>
        </trans-unit>
        <trans-unit id="14ebfc0e4de6cfe7d96bc5e85c508d46356efb50" translate="yes" xml:space="preserve">
          <source>Returns the index for the element with ID bar.</source>
          <target state="translated">返回ID为bar的元素的索引。</target>
        </trans-unit>
        <trans-unit id="5bb8639b984c5a451bd2d2390409acfd9250e304" translate="yes" xml:space="preserve">
          <source>Returns the index for the first item in the jQuery collection.</source>
          <target state="translated">返回jQuery集合中第一个项目的索引。</target>
        </trans-unit>
        <trans-unit id="b393ec4b75484f575ba14d5e0739f81c6524f060" translate="yes" xml:space="preserve">
          <source>Returns the width of the element, including left and right padding, border, and optionally margin, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="translated">返回元素的宽度，包括左右填充，边框以及可选的边距（以像素为单位）。如果在一组空元素上调用，则返回 &lt;code&gt;undefined&lt;/code&gt; （在jQuery 3.0之前为 &lt;code&gt;null&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a7ad448c0457fa47085de3d60015cdbdafb46dd4" translate="yes" xml:space="preserve">
          <source>Returns true, because the parent of the input is a form element.</source>
          <target state="translated">返回true,因为输入的父元素是表单元素。</target>
        </trans-unit>
        <trans-unit id="4c048a48626665bb693a24abc82365df59c00522" translate="yes" xml:space="preserve">
          <source>Returns whether event.preventDefault() was ever called on this event object.</source>
          <target state="translated">返回该事件对象是否曾被调用event.preventDefault()。</target>
        </trans-unit>
        <trans-unit id="0095bf521db1230ef8902af7b50cd23331098004" translate="yes" xml:space="preserve">
          <source>Returns whether event.stopImmediatePropagation() was ever called on this event object.</source>
          <target state="translated">返回event.stopImmediatePropagation()是否曾经在这个事件对象上被调用。</target>
        </trans-unit>
        <trans-unit id="46408a9586a191033969c174efbd68f66d5fd561" translate="yes" xml:space="preserve">
          <source>Returns whether event.stopPropagation() was ever called on this event object.</source>
          <target state="translated">返回该事件对象是否曾被调用event.stopPropagation()。</target>
        </trans-unit>
        <trans-unit id="0074c61ba5de3729c365c438f4ab6d87823e2ac4" translate="yes" xml:space="preserve">
          <source>Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function's scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.</source>
          <target state="translated">还原$的别名,然后创建并执行一个函数,在函数的范围内提供$作为jQuery的别名。在函数内部,原来的$对象是不可用的。这对于大多数不依赖任何其他库的插件来说都很好用。</target>
        </trans-unit>
        <trans-unit id="1559488e7282166b90ea314062f1988b483f6a31" translate="yes" xml:space="preserve">
          <source>Rewriting the &lt;code&gt;.live()&lt;/code&gt; method in terms of its successors is straightforward; these are templates for equivalent calls for all three event attachment methods:</source>
          <target state="translated">根据后继方法重写 &lt;code&gt;.live()&lt;/code&gt; 方法非常简单；这些是用于所有三个事件附件方法的等效调用的模板：</target>
        </trans-unit>
        <trans-unit id="6aa2379f312caadc948aa7a9d8a823935a9b92fe" translate="yes" xml:space="preserve">
          <source>Right click to toggle background color.</source>
          <target state="translated">右键单击可切换背景颜色。</target>
        </trans-unit>
        <trans-unit id="cf8d2fa5b636bb50d3b782f2addcd9107ff85896" translate="yes" xml:space="preserve">
          <source>Run a function when the page is fully loaded including graphics.</source>
          <target state="translated">当页面包括图形完全加载时运行一个函数。</target>
        </trans-unit>
        <trans-unit id="660eab7cf7994345058c6792c429efba21c440ff" translate="yes" xml:space="preserve">
          <source>Safari/Webkit: 312.8, 418.9</source>
          <target state="translated">Safari/Webkit:312.8,418.9</target>
        </trans-unit>
        <trans-unit id="b481f8b8e77e092a5a1b352b75b3cfd0447e1ee8" translate="yes" xml:space="preserve">
          <source>Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.</source>
          <target state="translated">和上面一样,但会把附加参数POST到服务器上,并在服务器完成响应时执行一个回调。</target>
        </trans-unit>
        <trans-unit id="a3b49cbd8336bc28d30035edac48de5804dc67f0" translate="yes" xml:space="preserve">
          <source>Sample return values of $.isNumeric with various inputs.</source>
          <target state="translated">不同输入的$.isNumeric的返回值示例。</target>
        </trans-unit>
        <trans-unit id="0abcd8e11817cf7c75bccd6c0aefcb91a6a3cf65" translate="yes" xml:space="preserve">
          <source>Save some data to the server and notify the user once it's complete.</source>
          <target state="translated">将一些数据保存到服务器上,完成后通知用户。</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="00b39d4a46acdaf195c97b325431ddaef25894ae" translate="yes" xml:space="preserve">
          <source>Script Execution</source>
          <target state="translated">脚本执行</target>
        </trans-unit>
        <trans-unit id="202dac1e22c03c214a8f5fffd9f44b1b2cb618ae" translate="yes" xml:space="preserve">
          <source>Script and JSONP requests are not subject to the same origin policy restrictions.</source>
          <target state="translated">脚本和JSONP请求不受相同的来源政策限制。</target>
        </trans-unit>
        <trans-unit id="cf964fefbb3826fdff4af7269ed955c203ad06cc" translate="yes" xml:space="preserve">
          <source>Scripts are included and run by referencing the file name:</source>
          <target state="translated">脚本被收录,并通过引用文件名运行。</target>
        </trans-unit>
        <trans-unit id="e04c0f959a533f174ee286d4e56b7848c0439cfb" translate="yes" xml:space="preserve">
          <source>Search for a given element from among the matched elements.</source>
          <target state="translated">从匹配的元素中搜索给定元素。</target>
        </trans-unit>
        <trans-unit id="1a8f35ce561245fefe97e75ccbff02e4aa1d777d" translate="yes" xml:space="preserve">
          <source>Search for a specified value within an array and return its index (or -1 if not found).</source>
          <target state="translated">在数组中搜索指定的值,并返回其索引(如果没有找到,则返回-1)。</target>
        </trans-unit>
        <trans-unit id="3874eae2f04a120390034d50dccc5a447635329f" translate="yes" xml:space="preserve">
          <source>Second handler for .toggle() called.</source>
          <target state="translated">调用.toggle()的第二个处理程序。</target>
        </trans-unit>
        <trans-unit id="402cc3b6686cd294cb10dd3f5bccbebd0edd8a9b" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
          <target state="translated">安全考虑因素</target>
        </trans-unit>
        <trans-unit id="ba92a10db1bf37a49ca690a32bfa35980a52d5b7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;ready&quot;&gt;ready()&lt;/a&gt;&lt;/code&gt;, which makes use of this.</source>
          <target state="translated">另请参见 &lt;code&gt;&lt;a href=&quot;ready&quot;&gt;ready()&lt;/a&gt;&lt;/code&gt; ，它利用了这一点。</target>
        </trans-unit>
        <trans-unit id="ee12851f210aec736c2971ffe71428d322573012" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;.trigger()&lt;/code&gt; method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.</source>
          <target state="translated">有关在事件发生时而非绑定处理程序时将数据传递到处理程序的方法，请参见 &lt;code&gt;.trigger()&lt;/code&gt; 方法参考。</target>
        </trans-unit>
        <trans-unit id="515509590fc48d1dfc5e4f8b29143dbb8193f498" translate="yes" xml:space="preserve">
          <source>See the discussions for &lt;code&gt;&lt;a href=&quot;mouseenter&quot;&gt;.mouseenter()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mouseleave&quot;&gt;.mouseleave()&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">有关更多详细信息，请参见 &lt;code&gt;&lt;a href=&quot;mouseenter&quot;&gt;.mouseenter()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;mouseleave&quot;&gt;.mouseleave()&lt;/a&gt;&lt;/code&gt; 的讨论。</target>
        </trans-unit>
        <trans-unit id="782b628d4d91647edbbce286bebc3f11f6b99ff5" translate="yes" xml:space="preserve">
          <source>Select all divs and filter the selection with a DOM element, keeping only the one with an id of &quot;unique&quot;.</source>
          <target state="translated">选择所有的div,并用DOM元素进行筛选,只保留id为 &quot;唯一 &quot;的那一个。</target>
        </trans-unit>
        <trans-unit id="9e24ae5dde661b4bad6278b284056442f482322b" translate="yes" xml:space="preserve">
          <source>Select all divs and filter the selection with a jQuery object, keeping only the one with an id of &quot;unique&quot;.</source>
          <target state="translated">选择所有的div,然后用jQuery对象进行筛选,只保留id为 &quot;unique &quot;的那一个。</target>
        </trans-unit>
        <trans-unit id="cbe0d297ed30bdc4c075085c5b9677952e2bd8b1" translate="yes" xml:space="preserve">
          <source>Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.</source>
          <target state="translated">选择文档中的所有div,并将DOM元素作为一个数组返回;然后使用内置的reverse()方法来反转该数组。</target>
        </trans-unit>
        <trans-unit id="7855e410bbda7d87687eb82cfb4112e06544d1a0" translate="yes" xml:space="preserve">
          <source>Select all elements at an index greater than index within the matched set.</source>
          <target state="translated">选择匹配集合中索引大于索引的所有元素。</target>
        </trans-unit>
        <trans-unit id="cebb6b46e90078f144ce6f483dfb711b165e3784" translate="yes" xml:space="preserve">
          <source>Select all elements at an index less than index within the matched set.</source>
          <target state="translated">选择匹配集合中索引小于索引的所有元素。</target>
        </trans-unit>
        <trans-unit id="6a16c88e4d2edf25e57b22ad8845aa0937c94c4e" translate="yes" xml:space="preserve">
          <source>Select all elements that are in the progress of an animation at the time the selector is run.</source>
          <target state="translated">选择在选择器运行时处于动画进程中的所有元素。</target>
        </trans-unit>
        <trans-unit id="2a0cff81da7ea1b148eaa387d47ad1b088d95c5d" translate="yes" xml:space="preserve">
          <source>Select all elements that contain the specified text.</source>
          <target state="translated">选择包含指定文字的所有元素。</target>
        </trans-unit>
        <trans-unit id="4e332684bab3aa1a45286a9f9d226898372975c7" translate="yes" xml:space="preserve">
          <source>Select all elements that have at least one child node (either an element or text).</source>
          <target state="translated">选择所有至少有一个子节点(元素或文本)的元素。</target>
        </trans-unit>
        <trans-unit id="078d5d9e1ff6edf0eba91a609de0c95367226ef3" translate="yes" xml:space="preserve">
          <source>Select all elements that have no children (including text nodes).</source>
          <target state="translated">选择所有没有子节点的元素(包括文本节点)。</target>
        </trans-unit>
        <trans-unit id="ed11e68f046d8dabef9e45adfed2a810b3f9160b" translate="yes" xml:space="preserve">
          <source>Select all the elements having a class name of &lt;code&gt;.box&lt;/code&gt; inside a &lt;code&gt;div&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;div&lt;/code&gt; 中选择所有类名称为 &lt;code&gt;.box&lt;/code&gt; 的元素。</target>
        </trans-unit>
        <trans-unit id="2ed3b7be96f2dbb88cd55ce061c434ce96bdeed1" translate="yes" xml:space="preserve">
          <source>Select elements that either don&amp;rsquo;t have the specified attribute, or do have the specified attribute but not with a certain value.</source>
          <target state="translated">选择不具有指定属性或具有指定属性但不具有特定值的元素。</target>
        </trans-unit>
        <trans-unit id="5f6f1aa373c70e29d01f0f02d129effcd00f3046" translate="yes" xml:space="preserve">
          <source>Select the element at index n within the matched set.</source>
          <target state="translated">在匹配的集合中选择索引n的元素。</target>
        </trans-unit>
        <trans-unit id="a0aec192d97708ea18466b753f9630549839da5e" translate="yes" xml:space="preserve">
          <source>Select the element with the id &quot;myDiv&quot; and give it a red border.</source>
          <target state="translated">选择id为 &quot;myDiv &quot;的元素,并给它一个红色的边框。</target>
        </trans-unit>
        <trans-unit id="184e3b053c117cadb8f38a32ba7ea866723de909" translate="yes" xml:space="preserve">
          <source>Select the element with the id &quot;myID.entry[1]&quot; and give it a red border. Note how certain characters must be escaped with backslashes.</source>
          <target state="translated">选择id为 &quot;myID.entry[1]&quot;的元素,并给它一个红色边框。注意某些字符必须用反斜杠转义。</target>
        </trans-unit>
        <trans-unit id="fbc01c4deea127c5fcc07581ab0c87fd938aefa0" translate="yes" xml:space="preserve">
          <source>Selected elements are in the order of their appearance in the document.</source>
          <target state="translated">选定的元素按其在文档中出现的顺序排列。</target>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="translated">Selector</target>
        </trans-unit>
        <trans-unit id="a011a21a85c92351b0a96fb4148afac97921c94e" translate="yes" xml:space="preserve">
          <source>Selector Context</source>
          <target state="translated">选择器上下文</target>
        </trans-unit>
        <trans-unit id="4df28d2cb8a74e0553a8b501f660f7fd482671ed" translate="yes" xml:space="preserve">
          <source>Selectors</source>
          <target state="translated">Selectors</target>
        </trans-unit>
        <trans-unit id="63116277109d7d97ce78872faa8c5b4a7e78c9ad" translate="yes" xml:space="preserve">
          <source>Selects a single element with the given id attribute.</source>
          <target state="translated">选择带有id属性的单个元素。</target>
        </trans-unit>
        <trans-unit id="482db93da8e164b9b15b7851fb58f4b7485ddf00" translate="yes" xml:space="preserve">
          <source>Selects all button elements and elements of type button.</source>
          <target state="translated">选择所有按钮元素和按钮类型的元素。</target>
        </trans-unit>
        <trans-unit id="3b9f66e97b3951a19308af594b4428e8f3fd8c91" translate="yes" xml:space="preserve">
          <source>Selects all direct child elements specified by &amp;ldquo;child&amp;rdquo; of elements specified by &amp;ldquo;parent&amp;rdquo;.</source>
          <target state="translated">选择&amp;ldquo;父&amp;rdquo;指定的元素的&amp;ldquo;子&amp;rdquo;指定的所有直接子元素。</target>
        </trans-unit>
        <trans-unit id="ef672f0c3a28f7f033a7dcbc0a7617c7eb5fd4d2" translate="yes" xml:space="preserve">
          <source>Selects all elements of the specified language.</source>
          <target state="translated">选择指定语言的所有元素。</target>
        </trans-unit>
        <trans-unit id="685a95b7c8b8e8075d10bae8c93c1e49b86d0916" translate="yes" xml:space="preserve">
          <source>Selects all elements of type checkbox.</source>
          <target state="translated">选择类型复选框的所有元素。</target>
        </trans-unit>
        <trans-unit id="729ba3926411637f6f92f2c5a8b1914bc62c7ed5" translate="yes" xml:space="preserve">
          <source>Selects all elements of type file.</source>
          <target state="translated">选择文件类型的所有元素。</target>
        </trans-unit>
        <trans-unit id="55f79e80dac38c8c301c8991025d4d361d7a906e" translate="yes" xml:space="preserve">
          <source>Selects all elements of type image.</source>
          <target state="translated">选择图像类型的所有元素。</target>
        </trans-unit>
        <trans-unit id="d34fd4cfbc0399e6b2df0f37aace806c64a4aff7" translate="yes" xml:space="preserve">
          <source>Selects all elements of type password.</source>
          <target state="translated">选择类型密码的所有元素。</target>
        </trans-unit>
        <trans-unit id="192e0aacd3796ba9c13cfe7c6bcd3f583a2319e5" translate="yes" xml:space="preserve">
          <source>Selects all elements of type radio.</source>
          <target state="translated">选择类型无线电的所有元素。</target>
        </trans-unit>
        <trans-unit id="dea966d1699da730e5da44991d47a4dad2469c8a" translate="yes" xml:space="preserve">
          <source>Selects all elements of type reset.</source>
          <target state="translated">选择复位类型的所有元素。</target>
        </trans-unit>
        <trans-unit id="987673eb93dba4606dfa7dcb9aa307074d61d7f7" translate="yes" xml:space="preserve">
          <source>Selects all elements of type submit.</source>
          <target state="translated">选择提交类型的所有元素。</target>
        </trans-unit>
        <trans-unit id="b46fc94979eabceeefefadcb7eb1c9fefdf76622" translate="yes" xml:space="preserve">
          <source>Selects all elements that are descendants of a given ancestor.</source>
          <target state="translated">选择所有是给定祖先的后代的元素。</target>
        </trans-unit>
        <trans-unit id="1a2f603851e201c12f75a1069d11f1cb3d8cfc13" translate="yes" xml:space="preserve">
          <source>Selects all elements that are disabled.</source>
          <target state="translated">选择所有被禁用的元素。</target>
        </trans-unit>
        <trans-unit id="081277be0ebc8652f793ffddd406046bc39328e7" translate="yes" xml:space="preserve">
          <source>Selects all elements that are enabled.</source>
          <target state="translated">选择所有启用的元素。</target>
        </trans-unit>
        <trans-unit id="38e5ee2ab29fb97bf2d880192e4ba13d80f49fe2" translate="yes" xml:space="preserve">
          <source>Selects all elements that are headers, like h1, h2, h3 and so on.</source>
          <target state="translated">选择所有头部元素,如h1、h2、h3等。</target>
        </trans-unit>
        <trans-unit id="26e6c5d52d7420f51b1c55caf7b42dc914aed0ba" translate="yes" xml:space="preserve">
          <source>Selects all elements that are hidden.</source>
          <target state="translated">选择所有被隐藏的元素。</target>
        </trans-unit>
        <trans-unit id="c40bee64ad5f728527b96e701535aebabf850663" translate="yes" xml:space="preserve">
          <source>Selects all elements that are selected.</source>
          <target state="translated">选择所有被选中的元素。</target>
        </trans-unit>
        <trans-unit id="1b12630f2059e80cfc555f557f369d2665cf95e8" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the first among siblings of the same element name.</source>
          <target state="translated">选择同一元素名称的兄弟姐妹中排名第一的所有元素。</target>
        </trans-unit>
        <trans-unit id="fb8f6ff10437a0d5ca2c23bc1b677e18d4ca7759" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the first child of their parent.</source>
          <target state="translated">选择所有属于其父代的元素。</target>
        </trans-unit>
        <trans-unit id="a4ba5db42bd0a7552cba89a906e47a3099d8e085" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the last among siblings of the same element name.</source>
          <target state="translated">选择同一元素名称的兄弟姐妹中最后一个元素。</target>
        </trans-unit>
        <trans-unit id="45549a1c55d46c0024d955d6df5a947b2244e626" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the last child of their parent.</source>
          <target state="translated">选择所有属于父代的最后一个孩子的元素。</target>
        </trans-unit>
        <trans-unit id="5613b91eb8e4a91b0b62860da066a6409a5da41f" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth child of their parent in relation to siblings with the same element name.</source>
          <target state="translated">选择所有的元素,这些元素是其父代的第n个孩子,与同名元素的兄弟姐妹的关系。</target>
        </trans-unit>
        <trans-unit id="b8d0cf76044daf07017ffbe5139c0b5be66be6e3" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth-child of their parent, counting from the last element to the first.</source>
          <target state="translated">选择所有父元素的第N个子元素,从最后一个元素到第一个元素。</target>
        </trans-unit>
        <trans-unit id="f6a62951da436f74e1779c00a0d2636092fcd06f" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the nth-child of their parent.</source>
          <target state="translated">选择所有父元素的第N个子元素。</target>
        </trans-unit>
        <trans-unit id="0b756624b2efc7b2d985cec25dbd9d959cbf5542" translate="yes" xml:space="preserve">
          <source>Selects all elements that are the only child of their parent.</source>
          <target state="translated">选择所有属于其父代的独生子女的元素。</target>
        </trans-unit>
        <trans-unit id="c33f0d3cfa91120c35c1a70d896db8fa10fa5cfa" translate="yes" xml:space="preserve">
          <source>Selects all elements that are visible.</source>
          <target state="translated">选择所有可见的元素。</target>
        </trans-unit>
        <trans-unit id="42d4c24b60721feb1dd9d648286569d67c6decf2" translate="yes" xml:space="preserve">
          <source>Selects all elements that do not match the given selector.</source>
          <target state="translated">选择所有不符合给定选择器的元素。</target>
        </trans-unit>
        <trans-unit id="6cffcf142b731498a68da13d990cb3881c08f3a7" translate="yes" xml:space="preserve">
          <source>Selects all elements that have no siblings with the same element name.</source>
          <target state="translated">选择所有没有同级元素名的元素。</target>
        </trans-unit>
        <trans-unit id="db68910a7f845b35cad42db773fd76e022bbe51e" translate="yes" xml:space="preserve">
          <source>Selects all elements with the given class.</source>
          <target state="translated">选择所有给定类别的元素。</target>
        </trans-unit>
        <trans-unit id="735daee6abc2bc6517bec931773efa945ec5f209" translate="yes" xml:space="preserve">
          <source>Selects all elements with the given tag name.</source>
          <target state="translated">选择具有给定标签名的所有元素。</target>
        </trans-unit>
        <trans-unit id="2f12468efd2facd408d097c678258691580c27ac" translate="yes" xml:space="preserve">
          <source>Selects all elements.</source>
          <target state="translated">选择所有元素。</target>
        </trans-unit>
        <trans-unit id="c1dd09ad2abd8bb82a9497a60d0c74bead91f016" translate="yes" xml:space="preserve">
          <source>Selects all input elements of type text.</source>
          <target state="translated">选择所有文本类型的输入元素。</target>
        </trans-unit>
        <trans-unit id="67a140314a46ae08098b1cf57a72cd5e5b79dbf8" translate="yes" xml:space="preserve">
          <source>Selects all input, textarea, select and button elements.</source>
          <target state="translated">选择所有输入、文本框、选择和按钮元素。</target>
        </trans-unit>
        <trans-unit id="e98be8e688a58a0d9de44bd93af5f4d660a54186" translate="yes" xml:space="preserve">
          <source>Selects all next elements matching &amp;ldquo;next&amp;rdquo; that are immediately preceded by a sibling &amp;ldquo;prev&amp;rdquo;.</source>
          <target state="translated">选择所有与&amp;ldquo; next&amp;rdquo;匹配的next元素，紧接其后的是同级&amp;ldquo; prev&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="babcc76f8a2eaf292d41e9909b833b8237f646ae" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs and wraps a bold tag around each of its contents.</source>
          <target state="translated">选择所有段落,并在其每个内容上加粗标签。</target>
        </trans-unit>
        <trans-unit id="a36835c1acf647c040ba63700c2b735fd5c7fc17" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs and wraps a jQuery object around each of its contents.</source>
          <target state="translated">选择所有段落,并在每个段落的内容上包裹一个jQuery对象。</target>
        </trans-unit>
        <trans-unit id="5a4bed91efb6f9a5909cee1551b5f05d2ea34bcc" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.</source>
          <target state="translated">选择所有段落,在这些段落中找到跨度元素,并将选择的内容还原到段落中。</target>
        </trans-unit>
        <trans-unit id="3e93b210ae8a95c62b43b6793d537e7f57acf9b4" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the first and second element.</source>
          <target state="translated">选择所有段落,然后将选区切成只包括第一个和第二个元素。</target>
        </trans-unit>
        <trans-unit id="40adcf5a3954c3a02b0e9920716d96f0495862a7" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the first element.</source>
          <target state="translated">选择所有的段落,然后将选区切成只包括第一个元素。</target>
        </trans-unit>
        <trans-unit id="ec45fca921a8472039aed007f1489458e13f5e14" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the second and third element.</source>
          <target state="translated">选择所有的段落,然后对选择进行切片,只包含第二和第三个元素。</target>
        </trans-unit>
        <trans-unit id="f73e8e58454342c473503c63ec8b67e25eff53a9" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the second element.</source>
          <target state="translated">选择所有的段落,然后对选择进行切片,只包含第二个元素。</target>
        </trans-unit>
        <trans-unit id="4a7f2a84a50d64036622e9ea7f84c18196201fcb" translate="yes" xml:space="preserve">
          <source>Selects all paragraphs, then slices the selection to include only the third element.</source>
          <target state="translated">选择所有的段落,然后对选择进行切片,只包含第三个元素。</target>
        </trans-unit>
        <trans-unit id="6dfd21f77934c962c426762b941607d856ccd3d9" translate="yes" xml:space="preserve">
          <source>Selects all sibling elements that follow after the &amp;ldquo;prev&amp;rdquo; element, have the same parent, and match the filtering &amp;ldquo;siblings&amp;rdquo; selector.</source>
          <target state="translated">选择&amp;ldquo; prev&amp;rdquo;元素之后的所有兄弟元素，它们具有相同的父元素，并与过滤&amp;ldquo; siblings&amp;rdquo;选择器匹配。</target>
        </trans-unit>
        <trans-unit id="a1df6d8eebdb436cfb94e26403dd9dd4e367a2a1" translate="yes" xml:space="preserve">
          <source>Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.</source>
          <target state="translated">选择父元素的第N个子元素与同名元素的兄弟姐妹的关系,从最后一个元素开始计算到第一个元素。</target>
        </trans-unit>
        <trans-unit id="312ea0332b53f2d1c1ca581f055d2ebc1e2ffad0" translate="yes" xml:space="preserve">
          <source>Selects element if it is currently focused.</source>
          <target state="translated">如果当前是焦点,则选择元素。</target>
        </trans-unit>
        <trans-unit id="1e7db4b62b14c64c2e4cda50f4bf4783bb8620fd" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value beginning exactly with a given string.</source>
          <target state="translated">选择具有指定属性的元素,其值的开头正好是给定的字符串。</target>
        </trans-unit>
        <trans-unit id="d63e53805e9ae87e087a6c4a2e272a6ba8b049f4" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value containing a given substring.</source>
          <target state="translated">选择具有指定属性的元素,其值包含一个给定的子串。</target>
        </trans-unit>
        <trans-unit id="0fec2cdb00e09613c374738870cc066ab8656d06" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.</source>
          <target state="translated">选择具有指定属性的元素,其值包含一个给定的单词,用空格分隔。</target>
        </trans-unit>
        <trans-unit id="79509ca2d65ee7fcb7c2f017f07b922c6fba591c" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).</source>
          <target state="translated">选择具有指定属性的元素,该属性的值要么等于给定的字符串,要么以该字符串为开头,后面加连字符(-)。</target>
        </trans-unit>
        <trans-unit id="7d140cea9061a89351adf37936c907030724897b" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.</source>
          <target state="translated">选择具有指定属性的元素,这些元素的值与给定的字符串精确结尾。比较是区分大小写的。</target>
        </trans-unit>
        <trans-unit id="6bf83f200cc3513db41d467baef2dc38b33ece19" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute with a value exactly equal to a certain value.</source>
          <target state="translated">选择具有指定属性的元素,其值正好等于某个值。</target>
        </trans-unit>
        <trans-unit id="e85f9af968eff1005189e62ff883be9f5f43b779" translate="yes" xml:space="preserve">
          <source>Selects elements that have the specified attribute, with any value.</source>
          <target state="translated">选择具有指定属性的元素,数值不限。</target>
        </trans-unit>
        <trans-unit id="0bd58b1254b6b26c9b64245aa8dc2848547a1b12" translate="yes" xml:space="preserve">
          <source>Selects elements which contain at least one element that matches the specified selector.</source>
          <target state="translated">选择至少包含一个符合指定选择器的元素。</target>
        </trans-unit>
        <trans-unit id="bb8098251a2d5dddf2c727e3d9305899015fbdc5" translate="yes" xml:space="preserve">
          <source>Selects even elements, zero-indexed. See also :odd.</source>
          <target state="translated">选择偶数元素,零索引。另见:奇数。</target>
        </trans-unit>
        <trans-unit id="7e1685294709e1c314ca9794952e46def1ccffc8" translate="yes" xml:space="preserve">
          <source>Selects even elements, zero-indexed. See also odd.</source>
          <target state="translated">选择偶数元素,零索引。参见奇数。</target>
        </trans-unit>
        <trans-unit id="ddf9894cd11d15fcd2657689963b9ac71094adbe" translate="yes" xml:space="preserve">
          <source>Selects odd elements, zero-indexed. See also :even.</source>
          <target state="translated">选择奇数元素,零索引。另见:even。</target>
        </trans-unit>
        <trans-unit id="46aa50381d2d25466bef54d53815431b627d34bc" translate="yes" xml:space="preserve">
          <source>Selects odd elements, zero-indexed. See also even.</source>
          <target state="translated">选择奇数元素,零索引。参见偶数。</target>
        </trans-unit>
        <trans-unit id="5622e64ee47169c9d0b5c6a2d78bb2292d00e373" translate="yes" xml:space="preserve">
          <source>Selects the combined results of all the specified selectors.</source>
          <target state="translated">选择所有指定选择器的合并结果。</target>
        </trans-unit>
        <trans-unit id="4230b70ef603ecf99fe4ec7887bd23aebeedc064" translate="yes" xml:space="preserve">
          <source>Selects the element that is the root of the document.</source>
          <target state="translated">选择作为文档根的元素。</target>
        </trans-unit>
        <trans-unit id="49fed8752aaf1e141ae7f7d82020c77946dd72e7" translate="yes" xml:space="preserve">
          <source>Selects the first matched DOM element.</source>
          <target state="translated">选择第一个匹配的DOM元素。</target>
        </trans-unit>
        <trans-unit id="2c838dc34a573624d02bead0b7f78130d08b37fb" translate="yes" xml:space="preserve">
          <source>Selects the last matched element.</source>
          <target state="translated">选择最后一个匹配的元素。</target>
        </trans-unit>
        <trans-unit id="1a2d74b9291de2f58c0821fcefd52a614afff7c7" translate="yes" xml:space="preserve">
          <source>Selects the target element indicated by the fragment identifier of the document&amp;rsquo;s URI.</source>
          <target state="translated">选择由文档URI的片段标识符指示的目标元素。</target>
        </trans-unit>
        <trans-unit id="2122d88e2a64d624031df153ff3972e8b9ccc281" translate="yes" xml:space="preserve">
          <source>Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user.</source>
          <target state="translated">将一个id作为数据发送给服务器,保存一些数据到服务器,完成后通知用户。如果请求失败,提醒用户。</target>
        </trans-unit>
        <trans-unit id="8658ae1466bf527e3dd6d98e514ecee8b2407051" translate="yes" xml:space="preserve">
          <source>Send an xml document as data to the server. By setting the processData option to &lt;code&gt;false&lt;/code&gt;, the automatic conversion of data to strings is prevented.</source>
          <target state="translated">将xml文档作为数据发送到服务器。通过将processData选项设置为 &lt;code&gt;false&lt;/code&gt; ，可以防止将数据自动转换为字符串。</target>
        </trans-unit>
        <trans-unit id="cfeaf157e7c56723921c0be996a0d8049614529b" translate="yes" xml:space="preserve">
          <source>Send data to the server using a HTTP POST request.</source>
          <target state="translated">使用HTTP POST请求向服务器发送数据。</target>
        </trans-unit>
        <trans-unit id="f0fef2b9897872624f0e3c46dd2f2183fdfe4a41" translate="yes" xml:space="preserve">
          <source>Send form data using Ajax requests</source>
          <target state="translated">使用Ajax请求发送表单数据</target>
        </trans-unit>
        <trans-unit id="be8b3341b920b4556b27849ea3923b035e535304" translate="yes" xml:space="preserve">
          <source>Sending Data to the Server</source>
          <target state="translated">发送数据到服务器</target>
        </trans-unit>
        <trans-unit id="a144807841a866abac7a53c6a9b994f2e222cbcd" translate="yes" xml:space="preserve">
          <source>Serialize a few complex objects</source>
          <target state="translated">序列化一些复杂的对象</target>
        </trans-unit>
        <trans-unit id="63ed5c2f8e78737fd1b3ff7eb6e1b49ee3fd6932" translate="yes" xml:space="preserve">
          <source>Serialize a form to a query string that could be sent to a server in an Ajax request.</source>
          <target state="translated">将表单序列化为一个可以在Ajax请求中发送到服务器的查询字符串。</target>
        </trans-unit>
        <trans-unit id="4043fe2f1e4cc1ee5d8c65c313d48f13fbe5266c" translate="yes" xml:space="preserve">
          <source>Serialize a key/value object.</source>
          <target state="translated">序列化一个键/值对象。</target>
        </trans-unit>
        <trans-unit id="2850b89694c0db105340f97fab4f4f0df4f4daae" translate="yes" xml:space="preserve">
          <source>Set a data store for 2 names then remove one of them.</source>
          <target state="translated">为2个名字设置一个数据存储,然后删除其中一个。</target>
        </trans-unit>
        <trans-unit id="d3d5f0b576f04613a8af8da1221bad86abac9bb8" translate="yes" xml:space="preserve">
          <source>Set a numeric property on a paragraph and then remove it.</source>
          <target state="translated">在段落上设置一个数字属性,然后将其删除。</target>
        </trans-unit>
        <trans-unit id="415e9fa442913c0ff5bb0b2da457a3e5aa4630ea" translate="yes" xml:space="preserve">
          <source>Set a queue array to delete the queue.</source>
          <target state="translated">设置一个队列数组来删除队列。</target>
        </trans-unit>
        <trans-unit id="01fda2b6f88cc560db78cdb5721b1d4bf9e5ab95" translate="yes" xml:space="preserve">
          <source>Set a single select, a multiple select, checkboxes and a radio button .</source>
          <target state="translated">设置单选、多选、复选框和单选按钮。</target>
        </trans-unit>
        <trans-unit id="dcd7e7e02ddf83e40cbae07a5022ad13b4ff3295" translate="yes" xml:space="preserve">
          <source>Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with &lt;a href=&quot;jquery.ajaxsetup&quot;&gt;$.ajaxSetup()&lt;/a&gt;. The timeout period starts at the point the &lt;code&gt;$.ajax&lt;/code&gt; call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. &lt;strong&gt;In jQuery 1.4.x and below,&lt;/strong&gt; the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. &lt;strong&gt;In Firefox 3.0+ only,&lt;/strong&gt; script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.</source>
          <target state="translated">设置请求的超时（以毫秒为单位）。值为0表示将没有超时。这将覆盖&lt;a href=&quot;jquery.ajaxsetup&quot;&gt;$ .ajaxSetup（）&lt;/a&gt;设置的所有全局超时。超时时间始于进行 &lt;code&gt;$.ajax&lt;/code&gt; 调用的时间点；如果其他几个请求正在进行中，并且浏览器没有可用的连接，则请求可能会超时，然后才能发送。&lt;strong&gt;在jQuery 1.4.x及更低版本中，&lt;/strong&gt;如果请求超时&lt;strong&gt;，&lt;/strong&gt;则XMLHttpRequest对象将处于无效状态。访问任何对象成员都可能引发异常。&lt;strong&gt;仅在Firefox 3.0以上版本中，&lt;/strong&gt;脚本和JSONP请求无法通过超时取消；即使脚本在超时期限之后到达，脚本也将运行。</target>
        </trans-unit>
        <trans-unit id="a75045c3e7e4e41869961e4536a201841a37d8d4" translate="yes" xml:space="preserve">
          <source>Set a timer to delay execution of subsequent items in the queue.</source>
          <target state="translated">设置一个定时器,延迟执行队列中的后续项目。</target>
        </trans-unit>
        <trans-unit id="29bc597e05b5611f7a75e1d0062b8b589d81d71d" translate="yes" xml:space="preserve">
          <source>Set data on an element and see the results of hasData.</source>
          <target state="translated">在元素上设置数据并查看hasData的结果。</target>
        </trans-unit>
        <trans-unit id="4df763c8781cee89c94fb1655e6b6f2638cf5b8b" translate="yes" xml:space="preserve">
          <source>Set default values for future Ajax requests. Its use is not recommended.</source>
          <target state="translated">为以后的Ajax请求设置默认值。不建议使用。</target>
        </trans-unit>
        <trans-unit id="b8efd5c0d5323f84aaea2833f9663ce507ef5110" translate="yes" xml:space="preserve">
          <source>Set some attributes for all &amp;lt;img&amp;gt;s in the page.</source>
          <target state="translated">为页面中的所有&amp;lt;img&amp;gt;设置一些属性。</target>
        </trans-unit>
        <trans-unit id="097a25d652bf055f7a137ff2a570d4f0be2804f8" translate="yes" xml:space="preserve">
          <source>Set the background color of the page to black.</source>
          <target state="translated">将页面的背景色设置为黑色。</target>
        </trans-unit>
        <trans-unit id="ee26402c1121939de683a5e3c569d8b6b4059083" translate="yes" xml:space="preserve">
          <source>Set the id for divs based on the position in the page.</source>
          <target state="translated">根据在页面中的位置设置div的id。</target>
        </trans-unit>
        <trans-unit id="1b434d70d1b6398f4a48de9838e66013be0964e4" translate="yes" xml:space="preserve">
          <source>Set the offset of the second paragraph:</source>
          <target state="translated">设置第二段的偏移量。</target>
        </trans-unit>
        <trans-unit id="4fab112a16558193a664503706e6bdc9b834ddb3" translate="yes" xml:space="preserve">
          <source>Set the scrollLeft of a div.</source>
          <target state="translated">设置div的scrollLeft。</target>
        </trans-unit>
        <trans-unit id="80de7325e36ebaf59890fde0787ee0978812d6fd" translate="yes" xml:space="preserve">
          <source>Set the scrollTop of a div.</source>
          <target state="translated">设置div的scrollTop。</target>
        </trans-unit>
        <trans-unit id="501160f93f7aac197ef0a4afa5136de4c99128c1" translate="yes" xml:space="preserve">
          <source>Set the src attribute from title attribute on the image.</source>
          <target state="translated">从图片的标题属性中设置src属性。</target>
        </trans-unit>
        <trans-unit id="0eb0fd641752abcc5ef3043a7964e10a309c836b" translate="yes" xml:space="preserve">
          <source>Set the value of an input box.</source>
          <target state="translated">设置输入框的值。</target>
        </trans-unit>
        <trans-unit id="4c430c240166834ea88c0ed7281d7fd5e5999f98" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; if you wish to use the traditional style of &lt;a href=&quot;jquery.param&quot;&gt;param serialization&lt;/a&gt;.</source>
          <target state="translated">如果您希望使用传统的&lt;a href=&quot;jquery.param&quot;&gt;参数序列化&lt;/a&gt;样式，请将其设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4fc8d2b9d04536e217f8d6ee7a88a0bafbd2135d" translate="yes" xml:space="preserve">
          <source>Sets the defaults for Ajax requests to the url &quot;/xmlhttp/&quot;, disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.</source>
          <target state="translated">将Ajax请求的默认值设置为url&quot;/xmlhttp/&quot;,禁用全局处理程序,使用POST代替GET。下面的Ajax请求就会发送一些数据,而不需要设置其他的东西。</target>
        </trans-unit>
        <trans-unit id="1bc9506ed518c2ffaaeed5c77bcc37e4fff485f4" translate="yes" xml:space="preserve">
          <source>Setting a simple attribute</source>
          <target state="translated">设置一个简单的属性</target>
        </trans-unit>
        <trans-unit id="48d2152c54739da04de91aee4b49440f02938b01" translate="yes" xml:space="preserve">
          <source>Setting several attributes at once</source>
          <target state="translated">同时设置多个属性</target>
        </trans-unit>
        <trans-unit id="47415531e62ab24a4bb2deca300877b6fef2b92e" translate="yes" xml:space="preserve">
          <source>Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.</source>
          <target state="translated">将第三个参数设置为false,将附加一个防止默认动作发生的函数,并停止事件冒泡。默认值为true。</target>
        </trans-unit>
        <trans-unit id="91f123ee7203e5bbd228a25c42679e0e53bd4cc4" translate="yes" xml:space="preserve">
          <source>Setting values using this method (or using the native &lt;code&gt;value&lt;/code&gt; property) does not cause the dispatch of the &lt;code&gt;change&lt;/code&gt; event. For this reason, the relevant event handlers will not be executed. If you want to execute them, you should call &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; after setting the value.</source>
          <target state="translated">使用此方法（或使用本机 &lt;code&gt;value&lt;/code&gt; 属性）设置值不会导致 &lt;code&gt;change&lt;/code&gt; 事件的分派。因此，将不执行相关的事件处理程序。如果要执行它们，则应在设置值后调用 &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="469d5b183fdc0d59e41a51e61529cdd95274ba7c" translate="yes" xml:space="preserve">
          <source>Shift</source>
          <target state="translated">Shift</target>
        </trans-unit>
        <trans-unit id="db6af5aa39d7397cfe1ad95f101c0b53b8393168" translate="yes" xml:space="preserve">
          <source>Shorthand CSS properties (e.g. font, background, border) are not fully supported. For example, if you want to animate the rendered border width, at least a border style and border width other than &quot;auto&quot; must be set in advance. Or, if you want to animate font size, you would use &lt;code&gt;fontSize&lt;/code&gt; or the CSS equivalent &lt;code&gt;'font-size'&lt;/code&gt; rather than simply &lt;code&gt;'font'&lt;/code&gt;.</source>
          <target state="translated">不完全支持速记CSS属性（例如，字体，背景，边框）。例如，如果要设置渲染边框的宽度的动画，则至少必须预先设置边框样式和&amp;ldquo;自动&amp;rdquo;以外的边框宽度。或者，如果要设置字体大小的动画，则可以使用 &lt;code&gt;fontSize&lt;/code&gt; 或CSS等效的 &lt;code&gt;'font-size'&lt;/code&gt; ,而不是简单的 &lt;code&gt;'font'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13ce66dde31804d78c943c988b0dbf4d57737048" translate="yes" xml:space="preserve">
          <source>Should &lt;code&gt;.trigger( &quot;eventName&quot; )&lt;/code&gt; be used, it will search for an &quot;eventName&quot; property on the object and attempt to execute it after any attached jQuery handlers are executed. It does not check whether the property is a function or not. To avoid this behavior, &lt;code&gt;.triggerHandler( &quot;eventName&quot; )&lt;/code&gt; should be used instead.</source>
          <target state="translated">如果使用 &lt;code&gt;.trigger( &quot;eventName&quot; )&lt;/code&gt; ，它将在对象上搜索&amp;ldquo; eventName&amp;rdquo;属性，并在执行任何附加的jQuery处理程序之后尝试执行该属性。它不检查该属性是否是一个函数。为避免此行为，应 &lt;code&gt;.triggerHandler( &quot;eventName&quot; )&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e22b139c05e4b38773ef90bc8904de0d27d90c20" translate="yes" xml:space="preserve">
          <source>Show a loading message whenever an Ajax request starts (and none is already active).</source>
          <target state="translated">每当一个Ajax请求开始时,显示一个加载消息(并且没有一个是已经激活的)。</target>
        </trans-unit>
        <trans-unit id="9f252669f882d844dde09972cc0a4a1f2df2cda9" translate="yes" xml:space="preserve">
          <source>Show a message before an Ajax request is sent.</source>
          <target state="translated">在Ajax请求发送前显示消息。</target>
        </trans-unit>
        <trans-unit id="b476ab773e940c40b6948b21c71c228f1f11a21b" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request completes successfully.</source>
          <target state="translated">当Ajax请求成功完成时,显示一条消息。</target>
        </trans-unit>
        <trans-unit id="7b41f7448fb41b38cd17cdcae79d3950abdd5520" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request completes.</source>
          <target state="translated">当Ajax请求完成时显示一条消息。</target>
        </trans-unit>
        <trans-unit id="05933287608489a9d52cfaf3e1830e781ba4aa9b" translate="yes" xml:space="preserve">
          <source>Show a message when an Ajax request fails.</source>
          <target state="translated">当Ajax请求失败时,显示一条消息。</target>
        </trans-unit>
        <trans-unit id="519514a8001648e93ee443893ab4b92b963bc312" translate="yes" xml:space="preserve">
          <source>Show all span and input elements with an animation. Change the text once the animation is done.</source>
          <target state="translated">用动画显示所有跨度和输入元素。一旦动画完成,就可以更改文字。</target>
        </trans-unit>
        <trans-unit id="984335580fdfb879f6e3f885677f9f166cd1427f" translate="yes" xml:space="preserve">
          <source>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.</source>
          <target state="translated">展示如何使用closeest进行事件委托。当点击最接近的列表元素或其下级元素时,它将切换为黄色背景。</target>
        </trans-unit>
        <trans-unit id="0ae17c6ac132af952cc810c0dcc914e28fa26861" translate="yes" xml:space="preserve">
          <source>Show number of times mouseout and mouseleave events are triggered. &lt;code&gt;mouseout&lt;/code&gt; fires when the pointer moves out of child element as well, while &lt;code&gt;mouseleave&lt;/code&gt; fires only when the pointer moves out of the bound element.</source>
          <target state="translated">显示触发mouseout和mouseleave事件的次数。当指针移出子元素时，也会触发 &lt;code&gt;mouseout&lt;/code&gt; ，而仅当指针移出绑定元素时，才会触发 &lt;code&gt;mouseleave&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3625594e77ad218412dfedbe46982302913ad5ac" translate="yes" xml:space="preserve">
          <source>Show or manipulate the queue of functions to be executed on the matched element.</source>
          <target state="translated">显示或操作要在匹配元素上执行的函数队列。</target>
        </trans-unit>
        <trans-unit id="39761be7b983dab5e329662e5feed6f9934622b4" translate="yes" xml:space="preserve">
          <source>Show or manipulate the queue of functions to be executed on the matched elements.</source>
          <target state="translated">显示或操作要在匹配元素上执行的函数队列。</target>
        </trans-unit>
        <trans-unit id="16df6b0062351304bd84b3a27580952641a99624" translate="yes" xml:space="preserve">
          <source>Show texts when mouseenter and mouseout event triggering. &lt;code&gt;mouseover&lt;/code&gt; fires when the pointer moves into the child element as well, while &lt;code&gt;mouseenter&lt;/code&gt; fires only when the pointer moves into the bound element.</source>
          <target state="translated">触发mouseenter和mouseout事件时显示文本。当指针也移入子元素时，将触发 &lt;code&gt;mouseover&lt;/code&gt; ，而仅当指针移入绑定的元素时， &lt;code&gt;mouseenter&lt;/code&gt; 才会触发。</target>
        </trans-unit>
        <trans-unit id="f22e04704b0222408ca3a60fd105ab1256854512" translate="yes" xml:space="preserve">
          <source>Show texts when mouseup and mousedown event triggering.</source>
          <target state="translated">当鼠标上移和下移事件触发时显示文本。</target>
        </trans-unit>
        <trans-unit id="9b08505c4f67fcfe1818b9165cd3486bbdbc8c6c" translate="yes" xml:space="preserve">
          <source>Show the browser info.</source>
          <target state="translated">显示浏览器信息。</target>
        </trans-unit>
        <trans-unit id="ad19f5bdd2ca5c41c2e37f9cba8cb903d27e3050" translate="yes" xml:space="preserve">
          <source>Show the event object for the keydown handler when a key is pressed in the input.</source>
          <target state="translated">当输入中的键被按下时,显示按键处理程序的事件对象。</target>
        </trans-unit>
        <trans-unit id="d93161b14d70830e3bea85c83d58f3562adbd85e" translate="yes" xml:space="preserve">
          <source>Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.</source>
          <target state="translated">当输入中的一个键被释放时,显示keyup处理程序的事件对象(使用一个简单的$.print插件)。</target>
        </trans-unit>
        <trans-unit id="fa869efebfddd7c6615aaf04bfabcb5e6772b61b" translate="yes" xml:space="preserve">
          <source>Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (https://api.jquery.com/resources/events.js) for the event object's output.</source>
          <target state="translated">当输入中的某个键被按下时,显示事件对象。注意:这个演示依靠一个简单的$.print()插件(https://api.jquery.com/resources/events.js)来实现事件对象的输出。</target>
        </trans-unit>
        <trans-unit id="a9896f8a3339a0df5ff5e1ecb5209d4930eb8f02" translate="yes" xml:space="preserve">
          <source>Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.</source>
          <target state="translated">显示第一个div,然后依次显示下一个相邻的兄弟姐妹div,动画时间为200ms。当上一个兄弟姐妹div的动画结束时,每个动画开始。</target>
        </trans-unit>
        <trans-unit id="9b6557600916e731608ebca494d2d50dcc744408" translate="yes" xml:space="preserve">
          <source>Show the length of the queue.</source>
          <target state="translated">显示队列的长度。</target>
        </trans-unit>
        <trans-unit id="b544befbd2f388b14fd260171b1cca0a42ebef79" translate="yes" xml:space="preserve">
          <source>Show the mouse coordinates when the mouse is moved over the yellow div. Coordinates are relative to the window, which in this case is the iframe.</source>
          <target state="translated">当鼠标移动到黄色div上时,显示鼠标坐标。坐标是相对于窗口而言的,在本例中是iframe。</target>
        </trans-unit>
        <trans-unit id="69f44bacb640a60b4ce5f71dd59e0939296ec35a" translate="yes" xml:space="preserve">
          <source>Show the mouse position relative to the left and top edges of the document (within this iframe).</source>
          <target state="translated">显示鼠标相对于文档左侧和顶部边缘的位置(在这个iframe内)。</target>
        </trans-unit>
        <trans-unit id="47f8b628a56746aed654aec7b07b6ed34563e493" translate="yes" xml:space="preserve">
          <source>Show the number of times mouseout and mouseleave events are triggered. &lt;code&gt;mouseout&lt;/code&gt; fires when the pointer moves out of the child element as well, while &lt;code&gt;mouseleave&lt;/code&gt; fires only when the pointer moves out of the bound element.</source>
          <target state="translated">显示触发mouseout和mouseleave事件的次数。当指针移出子元素时，也会触发 &lt;code&gt;mouseout&lt;/code&gt; ，而仅当指针移出绑定元素时，才会触发 &lt;code&gt;mouseleave&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="404a7c06b436d2f84162fadbf19e223dca32ae52" translate="yes" xml:space="preserve">
          <source>Show the number of times mouseover and mouseenter events are triggered. &lt;code&gt;mouseover&lt;/code&gt; fires when the pointer moves into the child element as well, while &lt;code&gt;mouseenter&lt;/code&gt; fires only when the pointer moves into the bound element.</source>
          <target state="translated">显示触发mouseover和mouseenter事件的次数。当指针也移入子元素时，将触发 &lt;code&gt;mouseover&lt;/code&gt; ，而仅当指针移入绑定的元素时， &lt;code&gt;mouseenter&lt;/code&gt; 才会触发。</target>
        </trans-unit>
        <trans-unit id="090aa960971137d74c0e2c71583ff9a73df44c91" translate="yes" xml:space="preserve">
          <source>Show the order in the jQuery object.</source>
          <target state="translated">在jQuery对象中显示顺序。</target>
        </trans-unit>
        <trans-unit id="71a35cb28a1beadceaa3c6e2209e0fec267e3777" translate="yes" xml:space="preserve">
          <source>Show various heights. Note the values are from the iframe so might be smaller than you expected. The yellow highlight shows the iframe body.</source>
          <target state="translated">显示各种高度。请注意,这些值来自iframe,所以可能比你预期的要小。黄色高亮显示的是iframe主体。</target>
        </trans-unit>
        <trans-unit id="9473936f01cbca6d69f1dece6d43856b6724edb6" translate="yes" xml:space="preserve">
          <source>Show various widths. Note the values are from the iframe so might be smaller than you expected. The yellow highlight shows the iframe body.</source>
          <target state="translated">显示各种宽度。请注意,这些值来自iframe,所以可能比你预期的要小。黄色高亮显示的是iframe主体。</target>
        </trans-unit>
        <trans-unit id="c33e45b32872d9e6db475a6df01ad1c0aa074865" translate="yes" xml:space="preserve">
          <source>Shows a few ways is() can be used inside an event handler.</source>
          <target state="translated">展示了在事件处理程序中使用is()的几种方法。</target>
        </trans-unit>
        <trans-unit id="9f80a91d7a7e65cd7176b7698d0ff5aa4efc6c25" translate="yes" xml:space="preserve">
          <source>Shows all hidden divs and counts hidden inputs.</source>
          <target state="translated">显示所有隐藏的divs并计算隐藏的输入。</target>
        </trans-unit>
        <trans-unit id="23f883856a4edafeed47bb6a4844925a9fdd3ac1" translate="yes" xml:space="preserve">
          <source>Shows all paragraphs, then hides them all, back and forth.</source>
          <target state="translated">显示所有的段落,然后全部隐藏,前后呼应。</target>
        </trans-unit>
        <trans-unit id="3a32e745a60f4a870e675d1abfd69e6874c3fdb2" translate="yes" xml:space="preserve">
          <source>Shows the parent of each element as (parent &amp;gt; child). Check the View Source to see the raw html.</source>
          <target state="translated">将每个元素的父级显示为（父级&amp;gt;子级）。检查查看源以查看原始html。</target>
        </trans-unit>
        <trans-unit id="bc96ba5e16ff60d54045222bd716907b909f13a1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;empty&quot;&gt;.empty()&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;.remove()&lt;/code&gt; method takes elements out of the DOM. Use &lt;code&gt;.remove()&lt;/code&gt; when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data associated with the elements are removed. To remove the elements without removing data and events, use &lt;code&gt;&lt;a href=&quot;detach&quot;&gt;.detach()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">与 &lt;code&gt;&lt;a href=&quot;empty&quot;&gt;.empty()&lt;/a&gt;&lt;/code&gt; 相似， &lt;code&gt;.remove()&lt;/code&gt; 方法将元素移出DOM。要删除元素本身以及其中的所有内容时，请使用 &lt;code&gt;.remove()&lt;/code&gt; 。除了元素本身之外，还删除了所有与元素关联的绑定事件和jQuery数据。要删除元素而不删除数据和事件，请改用 &lt;code&gt;&lt;a href=&quot;detach&quot;&gt;.detach()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc3d4b313a79ee01993258bfb62f9d7410a27b2f" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.prepend()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="translated">类似于其他内容的添加方法，例如 &lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;.prepend()&lt;/code&gt; 还支持传递多个参数作为输入。支持的输入包括DOM元素，jQuery对象，HTML字符串和DOM元素数组。</target>
        </trans-unit>
        <trans-unit id="a1b7b3cb192f9f19b267d26bdb4a4b8da9505760" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.before()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="translated">类似于其他内容的添加方法，例如 &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;.before()&lt;/code&gt; 还支持传递多个参数作为输入。支持的输入包括DOM元素，jQuery对象，HTML字符串和DOM元素数组。</target>
        </trans-unit>
        <trans-unit id="006392ad7e2187f99a07cd2030ba9a75d427ec4d" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.after()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="translated">类似于其他内容的添加方法，例如 &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;.after()&lt;/code&gt; 还支持传递多个参数作为输入。支持的输入包括DOM元素，jQuery对象，HTML字符串和DOM元素数组。</target>
        </trans-unit>
        <trans-unit id="df29cb0d48d7733d0bca93bbd664bfcac55e3e87" translate="yes" xml:space="preserve">
          <source>Similar to other content-adding methods such as &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.append()&lt;/code&gt; also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</source>
          <target state="translated">与 &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; 和.before（）之类的其他内容添加方法类似， &lt;code&gt;.append()&lt;/code&gt; 还支持传入多个参数作为输入。支持的输入包括DOM元素，jQuery对象，HTML字符串和DOM元素数组。</target>
        </trans-unit>
        <trans-unit id="43e7ddc0a9479bf30d1a0ff5889e2b9da87c3b03" translate="yes" xml:space="preserve">
          <source>Similarly, a handler can call &lt;code&gt;event.preventDefault()&lt;/code&gt; to cancel any default action that the browser may have for this event; for example, the default action on a &lt;code&gt;click&lt;/code&gt; event is to follow the link. Not all browser events have default actions, and not all default actions can be canceled. See the &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/#event-types-list&quot;&gt;W3C Events Specification&lt;/a&gt; for details.</source>
          <target state="translated">类似地，处理程序可以调用 &lt;code&gt;event.preventDefault()&lt;/code&gt; 来取消浏览器对此事件可能执行的任何默认操作；例如，例如，对 &lt;code&gt;click&lt;/code&gt; 事件的默认操作是点击链接。并非所有浏览器事件都具有默认操作，并且并非所有默认操作都可以取消。有关详细信息，请参见&lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Events/#event-types-list&quot;&gt;W3C事件规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ccc5cf9bc9bce46f452c1b0c6151b92830a99ee3" translate="yes" xml:space="preserve">
          <source>Similarly, an element may also be passed to find:</source>
          <target state="translated">同样,也可以通过元素来寻找。</target>
        </trans-unit>
        <trans-unit id="f9284b14e12238f3e08110b72509fd3a3bf2c689" translate="yes" xml:space="preserve">
          <source>Similarly, if we retrieve a jQuery object consisting of one of the three list items, &lt;code&gt;.index()&lt;/code&gt; will search for that list item:</source>
          <target state="translated">同样，如果我们检索由三个列表项之一组成的jQuery对象， &lt;code&gt;.index()&lt;/code&gt; 将搜索该列表项：</target>
        </trans-unit>
        <trans-unit id="af3ab504fe94703d8bc8d32f7b6369c311849311" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.after()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;p&quot; ).first().after( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on the elements that are collected in the code.</source>
          <target state="translated">由于 &lt;code&gt;.after()&lt;/code&gt; 可以接受任意数量的附加参数，因此可以通过将三个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 作为三个单独的参数传入来实现相同的结果，例如： &lt;code&gt;$( &quot;p&quot; ).first().after( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt; 。参数的类型和数量在很大程度上取决于代码中收集的元素。</target>
        </trans-unit>
        <trans-unit id="2e9baad5e5717759e600d8fa39a59f53a3545d1b" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.append()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$('body').append( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="translated">由于 &lt;code&gt;.append()&lt;/code&gt; 可以接受任意数量的附加参数，因此可以通过将三个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 作为三个单独的参数传入来实现相同的结果，例如： &lt;code&gt;$('body').append( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt; 。参数的类型和数量在很大程度上取决于您如何收集代码中的元素。</target>
        </trans-unit>
        <trans-unit id="3866949d83d1435a9a87376fd01b8109f97bbae5" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.before()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;p&quot; ).first().before( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="translated">由于 &lt;code&gt;.before()&lt;/code&gt; 可以接受任意数量的附加参数，因此可以通过将三个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 作为三个单独的参数传入来实现相同的结果，例如： &lt;code&gt;$( &quot;p&quot; ).first().before( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt; 。参数的类型和数量在很大程度上取决于您如何收集代码中的元素。</target>
        </trans-unit>
        <trans-unit id="9ff88230d8cf6f6e9a4f26e921ba3235226053a6" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;.prepend()&lt;/code&gt; can accept any number of additional arguments, the same result can be achieved by passing in the three &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s as three separate arguments, like so: &lt;code&gt;$( &quot;body&quot; ).prepend( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt;. The type and number of arguments will largely depend on how you collect the elements in your code.</source>
          <target state="translated">由于 &lt;code&gt;.prepend()&lt;/code&gt; 可以接受任意数量的附加参数，因此可以通过将三个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 作为三个单独的参数传入来实现相同的结果，例如： &lt;code&gt;$( &quot;body&quot; ).prepend( $newdiv1, newdiv2, existingdiv1 )&lt;/code&gt; 。参数的类型和数量在很大程度上取决于您如何收集代码中的元素。</target>
        </trans-unit>
        <trans-unit id="22770ea7aaf9fb3b5d0d4217e44d0619775c6eeb" translate="yes" xml:space="preserve">
          <source>Since &lt;strong&gt;jQuery 3&lt;/strong&gt;, every two-character sequence of &quot;-&quot; (U+002D) followed by a lowercase ASCII letter in a key is replaced by the uppercase version of the letter, in alignment with the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#dom-dataset&quot;&gt;HTML dataset API&lt;/a&gt;. A statement like &lt;code&gt;$( &quot;body&quot; ).data( { &quot;my-name&quot;: &quot;aValue&quot; } ).data();&lt;/code&gt; will return &lt;code&gt;{ myName: &quot;aValue&quot; }&lt;/code&gt;.</source>
          <target state="translated">从&lt;strong&gt;jQuery 3开始&lt;/strong&gt;，与&lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#dom-dataset&quot;&gt;HTML数据集API&lt;/a&gt;一致，键中的每两个字符序列&amp;ldquo;-&amp;rdquo;（U + 002D）后跟键中的小写ASCII字母均被字母的大写形式代替。像 &lt;code&gt;$( &quot;body&quot; ).data( { &quot;my-name&quot;: &quot;aValue&quot; } ).data();&lt;/code&gt; 将返回 &lt;code&gt;{ myName: &quot;aValue&quot; }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88b1ff6e137cf5a7674c0a4b1dd9506e55d3f239" translate="yes" xml:space="preserve">
          <source>Since all &lt;code&gt;.live()&lt;/code&gt; events are attached at the &lt;code&gt;document&lt;/code&gt; element, events take the longest and slowest possible path before they are handled.</source>
          <target state="translated">由于所有 &lt;code&gt;.live()&lt;/code&gt; 事件都附加在 &lt;code&gt;document&lt;/code&gt; 元素上，因此事件在处理之前会采用最长和最慢的路径。</target>
        </trans-unit>
        <trans-unit id="235d61f94fedb8dacf1f14cb572f293f702d3042" translate="yes" xml:space="preserve">
          <source>Since each request requires its own transport object instance, transports cannot be registered directly. Therefore, you should provide a function that returns a transport instead.</source>
          <target state="translated">由于每个请求都需要自己的传输对象实例,所以不能直接注册传输。因此,您应该提供一个返回传输的函数来代替。</target>
        </trans-unit>
        <trans-unit id="ce2a7c642237538647f2d47dcc1dde9059a17c23" translate="yes" xml:space="preserve">
          <source>Since jQuery 1.4.3, &lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes&quot;&gt;&lt;code&gt;data-*&lt;/code&gt; attributes&lt;/a&gt; are used to initialize jQuery data. An element's &lt;code&gt;data-*&lt;/code&gt; attributes are retrieved the first time the &lt;code&gt;data()&lt;/code&gt; method is invoked upon it, and then are no longer accessed or mutated (all values are stored internally by jQuery).</source>
          <target state="translated">从jQuery 1.4.3开始，&lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes&quot;&gt; &lt;code&gt;data-*&lt;/code&gt; 属性&lt;/a&gt;用于初始化jQuery数据。第一次调用 &lt;code&gt;data()&lt;/code&gt; 方法时，将检索元素的 &lt;code&gt;data-*&lt;/code&gt; 属性，然后不再对其进行访问或更改（所有值均由jQuery内部存储）。</target>
        </trans-unit>
        <trans-unit id="5969353c95e8154458c9a2e8efa05a46c0fd3e01" translate="yes" xml:space="preserve">
          <source>Since jQuery 1.6, dashes in &lt;code&gt;data-*&lt;/code&gt; attribute names have been processed in alignment with the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#dom-dataset&quot;&gt;HTML dataset API&lt;/a&gt;.</source>
          <target state="translated">从jQuery 1.6开始， &lt;code&gt;data-*&lt;/code&gt; 属性名称中的破折号已按照&lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#dom-dataset&quot;&gt;HTML数据集API进行了处理&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b94a3fdcc7bc381130af142791076c03992641c6" translate="yes" xml:space="preserve">
          <source>Since jQuery uses one global interval, no animation should be running or all animations should stop for the change of this property to take effect.</source>
          <target state="translated">由于jQuery使用的是一个全局的间隔,所以不应该运行动画或者停止所有动画,这个属性的改变才会生效。</target>
        </trans-unit>
        <trans-unit id="bb1ebd8b88fa1cbf6d066706d6ca6582244e64cf" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get()&lt;/code&gt;&lt;/a&gt; method returns a &lt;code&gt;jqXHR&lt;/code&gt; object, which is derived from a Deferred object, we can attach a callback for both success and error using the &lt;code&gt;deferred.always()&lt;/code&gt; method.</source>
          <target state="translated">由于&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get()&lt;/code&gt; &lt;/a&gt;方法返回了从Deferred对象派生的 &lt;code&gt;jqXHR&lt;/code&gt; 对象，因此我们可以使用 &lt;code&gt;deferred.always()&lt;/code&gt; 方法为成功和错误附加回调。</target>
        </trans-unit>
        <trans-unit id="dcb73e61c93c837cbc057fc46e56718b7e1f1393" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can add rejection handlers using the &lt;code&gt;.catch&lt;/code&gt; method.</source>
          <target state="translated">由于&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; &lt;/a&gt;方法返回了从Deferred对象派生的jqXHR对象，因此我们可以使用 &lt;code&gt;.catch&lt;/code&gt; 方法添加拒绝处理程序。</target>
        </trans-unit>
        <trans-unit id="6342a4abce39c6640aa7cef5fb2c053d726fdd04" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the &lt;code&gt;.done()&lt;/code&gt; method.</source>
          <target state="translated">由于&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; &lt;/a&gt;方法返回一个从Deferred对象派生的jqXHR对象，因此我们可以使用 &lt;code&gt;.done()&lt;/code&gt; 方法附加成功回调。</target>
        </trans-unit>
        <trans-unit id="5872a8250fa5893d3546adab12605b8ec365deb7" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the &lt;code&gt;.then&lt;/code&gt; method.</source>
          <target state="translated">由于&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; &lt;/a&gt;方法返回一个从Deferred对象派生的jqXHR对象，因此我们可以使用 &lt;code&gt;.then&lt;/code&gt; 方法附加处理程序。</target>
        </trans-unit>
        <trans-unit id="6f3c5742ce47f98262f8e52369b1aa15badf1bea" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the &lt;code&gt;.catch&lt;/code&gt; method.</source>
          <target state="translated">由于&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; &lt;/a&gt;方法返回从Deferred对象派生的jqXHR对象，因此我们可以使用 &lt;code&gt;.catch&lt;/code&gt; 方法拒绝处理程序。</target>
        </trans-unit>
        <trans-unit id="bfa98b5bcb4e82764aa5222d51deca0844c19898" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;jquery.get&quot;&gt;&lt;code&gt;jQuery.get&lt;/code&gt;&lt;/a&gt; method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the &lt;code&gt;deferred.done()&lt;/code&gt; and &lt;code&gt;deferred.fail()&lt;/code&gt; methods.</source>
          <target state="translated">由于&lt;a href=&quot;jquery.get&quot;&gt; &lt;code&gt;jQuery.get&lt;/code&gt; &lt;/a&gt;方法返回从Deferred派生的jqXHR对象，因此您可以使用 &lt;code&gt;deferred.done()&lt;/code&gt; 和 &lt;code&gt;deferred.fail()&lt;/code&gt; 方法附加成功和失败回调。</target>
        </trans-unit>
        <trans-unit id="f92de5e75bfc3177db7ca895588568fbf9cbffb1" translate="yes" xml:space="preserve">
          <source>Since the &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by &lt;code&gt;&lt;a href=&quot;delegate&quot;&gt;.delegate()&lt;/a&gt;&lt;/code&gt; will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling &lt;code&gt;&lt;a href=&quot;event.stoppropagation&quot;&gt;event.stopPropagation()&lt;/a&gt;&lt;/code&gt; or returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">由于&lt;a href=&quot;live&quot;&gt; &lt;code&gt;.live()&lt;/code&gt; &lt;/a&gt;方法一旦将事件传播到文档顶部便会对其进行处理，因此无法停止实时事件的传播。同样，由 &lt;code&gt;&lt;a href=&quot;delegate&quot;&gt;.delegate()&lt;/a&gt;&lt;/code&gt; 处理的事件将传播到它们所委派的元素；在调用委托事件处理程序时，绑定到DOM树中其下任何元素的事件处理程序将已经执行。因此，这些处理程序可以通过调用 &lt;code&gt;&lt;a href=&quot;event.stoppropagation&quot;&gt;event.stopPropagation()&lt;/a&gt;&lt;/code&gt; 或返回 &lt;code&gt;false&lt;/code&gt; 来阻止委托处理程序触发。</target>
        </trans-unit>
        <trans-unit id="b1edc5381b6091a7fd6e1829f259f5037f6e15dd" translate="yes" xml:space="preserve">
          <source>Since the index is zero-based, the first list item is returned:</source>
          <target state="translated">由于索引是基于零的,所以返回的是第一个列表项。</target>
        </trans-unit>
        <trans-unit id="7a6e24162c86dfba7b0b421fd47f8c5bb8ef4d79" translate="yes" xml:space="preserve">
          <source>Size: 2</source>
          <target state="translated">尺寸:2</target>
        </trans-unit>
        <trans-unit id="982e22c2ba6646fbc5724d9dc05eadc3a19d3774" translate="yes" xml:space="preserve">
          <source>Slide the next sibling LI up or down on hover, and toggle a class.</source>
          <target state="translated">悬停时上下滑动下一个兄弟姐妹LI,并切换一个类。</target>
        </trans-unit>
        <trans-unit id="fb05309b161291336bae053029c5099275a0941b" translate="yes" xml:space="preserve">
          <source>Some callbacks are required to return something, others make that return value optional. To prevent a form submission, a submit event handler can return false:</source>
          <target state="translated">有些回调是需要返回一些东西的,有些回调则使返回值是可选的。为了防止表单提交,提交事件处理程序可以返回false。</target>
        </trans-unit>
        <trans-unit id="6c1f13e9615a3bbabc778ec7b0f33c9cc3e91448" translate="yes" xml:space="preserve">
          <source>Some of jQuery's Ajax functions return the native XMLHttpRequest (XHR) object, or pass it as an argument to success/error/complete handlers, so that you can do additional processing or monitoring on the request. Note that Ajax functions only return or pass an XHR object when an XHR object is actually used in the request. For example, JSONP requests and cross-domain GET requests use a script element rather than an XHR object.</source>
          <target state="translated">一些jQuery的Ajax函数会返回原生的XMLHttpRequest(XHR)对象,或者将其作为参数传递给成功/错误/完成处理程序,这样你就可以对请求进行额外的处理或监控。请注意,Ajax函数只有在请求中实际使用XHR对象时才会返回或传递XHR对象。例如,JSONP请求和跨域GET请求使用的是脚本元素而不是XHR对象。</target>
        </trans-unit>
        <trans-unit id="8753ea1e13ebfbe5d422e4686ba9011ca9055869" translate="yes" xml:space="preserve">
          <source>Some properties of DOM elements are quite consistent among browsers. Consider this example of a simple onblur validation:</source>
          <target state="translated">DOM元素的一些属性在浏览器之间是相当一致的。考虑这个简单的onblur验证的例子。</target>
        </trans-unit>
        <trans-unit id="a933f97d99788e859754f51523140619cddcd601" translate="yes" xml:space="preserve">
          <source>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</source>
          <target state="translated">对一个DOM元素数组进行排序,并删除重复的元素。注意,这只适用于DOM元素的数组,而不是字符串或数字。</target>
        </trans-unit>
        <trans-unit id="94d60b8f0ed0d594ef1727e3a6784cb278df97bd" translate="yes" xml:space="preserve">
          <source>Special units</source>
          <target state="translated">特殊单位</target>
        </trans-unit>
        <trans-unit id="596f7c7958bae7b06d20d1b95c9768562dff1f23" translate="yes" xml:space="preserve">
          <source>Specify a function to execute when the DOM is fully loaded.</source>
          <target state="translated">指定在DOM完全加载时执行的函数。</target>
        </trans-unit>
        <trans-unit id="ff20a26a0c1ef838133366e7344c5ab557dc3c37" translate="yes" xml:space="preserve">
          <source>Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. &lt;strong&gt;As of jQuery 1.5&lt;/strong&gt;, you can also use a function for this setting, in which case the value of &lt;code&gt;jsonpCallback&lt;/code&gt; is set to the return value of that function.</source>
          <target state="translated">指定JSONP请求的回调函数名称。将使用该值代替jQuery自动生成的随机名称。最好让jQuery生成一个唯一的名称，因为它可以更轻松地管理请求并提供回调和错误处理。当您要启用更好的浏览器缓存GET请求时，可能需要指定回调。&lt;strong&gt;从jQuery 1.5开始&lt;/strong&gt;，您还可以为该设置使用一个函数，在这种情况下， &lt;code&gt;jsonpCallback&lt;/code&gt; 的值设置为该函数的返回值。</target>
        </trans-unit>
        <trans-unit id="a4b0e61bc82307628e84bf51482e5ca8c38a3aac" translate="yes" xml:space="preserve">
          <source>Spoon!</source>
          <target state="translated">Spoon!</target>
        </trans-unit>
        <trans-unit id="0d8484e4b12cca197bb4c6288ecc229761a2d3c7" translate="yes" xml:space="preserve">
          <source>Starting with jQuery 1.7, selector strings with positional selectors apply the selector against the document, and then determine whether the first element of the current jQuery set matches any of the resulting elements. So for the HTML shown above, an expression such as &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Note that since positional selectors are jQuery additions and not W3C standard, we recommend using the W3C selectors whenever feasible.</source>
          <target state="translated">从jQuery 1.7开始，带有位置选择器的选择器字符串将选择器应用于文档，然后确定当前jQuery集的第一个元素是否与任何结果元素匹配。因此，对于上面显示的HTML，诸如 &lt;code&gt;$( &quot;li:first&quot; ).is( &quot;li:last&quot; )&lt;/code&gt; 表达式返回 &lt;code&gt;false&lt;/code&gt; 。请注意，由于位置选择器是jQuery的附加内容，而不是W3C标准，因此我们建议在可行的情况下使用W3C选择器。</target>
        </trans-unit>
        <trans-unit id="9a166f7dad49a1f78c7503ac2a3ec46b214bd857" translate="yes" xml:space="preserve">
          <source>Starts with all paragraphs and searches for descendant span elements, same as &lt;code&gt;$( &quot;p span&quot; )&lt;/code&gt;</source>
          <target state="translated">从所有段落开始并搜索后代span元素，与 &lt;code&gt;$( &quot;p span&quot; )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f2fa9a19aedee83f07905d92ab8023e418f9f17" translate="yes" xml:space="preserve">
          <source>States if the current page, in the user&amp;rsquo;s browser, is being rendered using the W3C CSS Box Model.</source>
          <target state="translated">说明是否使用W3C CSS Box Model呈现了用户浏览器中的当前页面。</target>
        </trans-unit>
        <trans-unit id="9f596ed584d759c21adfacff6072003d6d499e20" translate="yes" xml:space="preserve">
          <source>States if the current page, in the user&amp;rsquo;s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead.</source>
          <target state="translated">说明是否正在使用W3C CSS Box Model呈现用户浏览器中的当前页面。此属性已在jQuery 1.8中删除。请尝试使用特征检测。</target>
        </trans-unit>
        <trans-unit id="49a2be80024194ba9e55c77f622b84ab99f358e4" translate="yes" xml:space="preserve">
          <source>Step Function</source>
          <target state="translated">步骤功能</target>
        </trans-unit>
        <trans-unit id="ad40990b1f5eb15fcc653c23d700e8b744907126" translate="yes" xml:space="preserve">
          <source>Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.</source>
          <target state="translated">通过使用.stopPropagation()方法阻止事件冒泡,而不阻止默认动作。</target>
        </trans-unit>
        <trans-unit id="a76e371f4f22da824fc0475cfa42848c80bb7458" translate="yes" xml:space="preserve">
          <source>Stop submit events from bubbling without preventing form submit, using &lt;code&gt;.stopPropagation()&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;.stopPropagation()&lt;/code&gt; 停止提交事件冒泡，而不会阻止表单提交。</target>
        </trans-unit>
        <trans-unit id="75c9f5be9829724db34567272dd0a87d7c6ea276" translate="yes" xml:space="preserve">
          <source>Stop the currently-running animation on the matched elements.</source>
          <target state="translated">停止匹配元素上当前正在运行的动画。</target>
        </trans-unit>
        <trans-unit id="360d71d11120f40efdbddef5715b200bb25b3684" translate="yes" xml:space="preserve">
          <source>Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.</source>
          <target state="translated">停止当前正在运行的动画,删除所有排队动画,完成匹配元素的所有动画。</target>
        </trans-unit>
        <trans-unit id="730b19e05abb84da614a729159208dbad5760180" translate="yes" xml:space="preserve">
          <source>Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.</source>
          <target state="translated">存储与匹配元素相关联的任意数据,或者在命名的数据存储中返回匹配元素集合中第一个元素的值。</target>
        </trans-unit>
        <trans-unit id="e3dc887795a3e079473d37947acd076182b16d12" translate="yes" xml:space="preserve">
          <source>Store arbitrary data associated with the specified element and/or return the value that was set.</source>
          <target state="translated">存储与指定元素相关联的任意数据和/或返回设置的值。</target>
        </trans-unit>
        <trans-unit id="664d4a46b20ef3413abe6dbdc69b1b8e5fa252f8" translate="yes" xml:space="preserve">
          <source>Store then retrieve a value from the div element.</source>
          <target state="translated">存储然后从div元素中获取一个值。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="817372deb37d508cf48353c2e5bf45228819ce79" translate="yes" xml:space="preserve">
          <source>Success Callback</source>
          <target state="translated">成功回访</target>
        </trans-unit>
        <trans-unit id="c0a6e449ed284b809fa46d3ad6117b4a8d99830e" translate="yes" xml:space="preserve">
          <source>Supported Flags</source>
          <target state="translated">支持的旗帜</target>
        </trans-unit>
        <trans-unit id="10f2d5c8838556785eaa3ee02d811f2678905e69" translate="yes" xml:space="preserve">
          <source>Suppose we have a couple short lists on a page:</source>
          <target state="translated">假设我们在一个页面上有几个短列表。</target>
        </trans-unit>
        <trans-unit id="e3dda79ad5c100cb272fb6d078c82f63541c7299" translate="yes" xml:space="preserve">
          <source>Suppose we perform a search for &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements starting at item A:</source>
          <target state="translated">假设我们从项目A开始搜索 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 元素：</target>
        </trans-unit>
        <trans-unit id="a94ae9bded1ae99e5c7bcd4f4a8811d18c8089e8" translate="yes" xml:space="preserve">
          <source>Suppose we search for an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element instead:</source>
          <target state="translated">假设我们搜索一个 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素：</target>
        </trans-unit>
        <trans-unit id="b3f888854fd1f1dae92293cac076227ad8552aa0" translate="yes" xml:space="preserve">
          <source>Suppose you have a list, with two of its items containing a child element:</source>
          <target state="translated">假设你有一个列表,其中有两个项目包含一个子元素。</target>
        </trans-unit>
        <trans-unit id="de394c66954399a5ac3332ca39eb0a52c9cc3a47" translate="yes" xml:space="preserve">
          <source>Suppose you have a simple unordered list on the page:</source>
          <target state="translated">假设你在页面上有一个简单的无序列表。</target>
        </trans-unit>
        <trans-unit id="5023b4b6d640dff78ca47b85acb6ff85da25aa61" translate="yes" xml:space="preserve">
          <source>Tags that cannot contain elements may be quick-closed or not:</source>
          <target state="translated">不能包含元素的标签可以快速关闭,也可以不关闭。</target>
        </trans-unit>
        <trans-unit id="ff582d4a993e914f70aa1f884c48404bf23cf695" translate="yes" xml:space="preserve">
          <source>Takes a function and returns a new one that will always have a particular context.</source>
          <target state="translated">读取一个函数,并返回一个新的函数,这个函数总是有一个特定的上下文。</target>
        </trans-unit>
        <trans-unit id="b315f328325b2a0bd0f452ff3b9e918b0b280b19" translate="yes" xml:space="preserve">
          <source>Takes a string and throws an exception containing it.</source>
          <target state="translated">读取一个字符串并抛出一个包含该字符串的异常。</target>
        </trans-unit>
        <trans-unit id="e4e25174b34707da0ca85747ead62e6979587ad7" translate="yes" xml:space="preserve">
          <source>Takes a well-formed JSON string and returns the resulting JavaScript value.</source>
          <target state="translated">获取一个格式良好的JSON字符串并返回结果的JavaScript值。</target>
        </trans-unit>
        <trans-unit id="1321935cf4ff7f35cc8aa281970434f1a46233a9" translate="yes" xml:space="preserve">
          <source>Test a few parameter examples.</source>
          <target state="translated">测试几个参数实例。</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="2959942028f362a86c6adc899a4d28fb0893b838" translate="yes" xml:space="preserve">
          <source>Text is a node of the Document Object Model (DOM) that represents the textual content of an &lt;a href=&quot;#Element&quot;&gt;element&lt;/a&gt; or an attribute. Consider the following code:</source>
          <target state="translated">文本是文档对象模型（DOM）的一个节点，代表&lt;a href=&quot;#Element&quot;&gt;元素&lt;/a&gt;或属性的文本内容。考虑以下代码：</target>
        </trans-unit>
        <trans-unit id="b88fca4b677e265570d1591da41082afd6bd654a" translate="yes" xml:space="preserve">
          <source>That line of code will replace everything inside &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">该行代码将替换 &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt; 内部的所有内容：</target>
        </trans-unit>
        <trans-unit id="4ecaa7688dde754c54b4ca5ee2f1ea5f31249d7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.Callbacks()&lt;/code&gt; function is internally used to provide the base functionality behind the jQuery &lt;code&gt;$.ajax()&lt;/code&gt; and &lt;code&gt;$.Deferred()&lt;/code&gt; components. It can be used as a similar base to define functionality for new components.</source>
          <target state="translated">的 &lt;code&gt;$.Callbacks()&lt;/code&gt; 函数用于在内部提供了jQuery背后的基本功能 &lt;code&gt;$.ajax()&lt;/code&gt; 和 &lt;code&gt;$.Deferred()&lt;/code&gt; 的部件。它可以用作定义新组件功能的类似基础。</target>
        </trans-unit>
        <trans-unit id="baa0d6b0d0bf85d2143bf56d29a81b4ad34efa9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajax()&lt;/code&gt; function returns the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the &lt;code&gt;xhr&lt;/code&gt; option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling &lt;code&gt;.abort()&lt;/code&gt; on the object will halt the request before it completes.</source>
          <target state="translated">在 &lt;code&gt;$.ajax()&lt;/code&gt; 函数返回 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 它创建对象。通常，jQuery在内部处理此对象的创建，但是可以使用 &lt;code&gt;xhr&lt;/code&gt; 选项指定用于制造该对象的自定义函数。返回的对象通常可以被丢弃，但是确实提供了用于观察和处理请求的较低级接口。特别是，在对象上调用 &lt;code&gt;.abort()&lt;/code&gt; 将在请求完成之前暂停该请求。</target>
        </trans-unit>
        <trans-unit id="85e806a32c04f5dde13a7018da32db82f1e28ca1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajax()&lt;/code&gt; function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt; are available and are easier to use. If less common options are required, though, &lt;code&gt;$.ajax()&lt;/code&gt; can be used more flexibly.</source>
          <target state="translated">在 &lt;code&gt;$.ajax()&lt;/code&gt; 函数underlies的jQuery发送的所有Ajax请求。通常不需要直接调用此函数，因为可以使用 &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt; 等几个更高级的替代方法，并且更易于使用。但是，如果需要较少的常用选项，则可以更灵活地使用 &lt;code&gt;$.ajax()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78f47b93498ccbc5b58c88ddb2f471b1580524b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.ajaxPrefilter()&lt;/code&gt; method can also redirect a request to another dataType by returning that dataType. For example, the following sets a request as &quot;script&quot; if the URL has some specific properties defined in a custom &lt;code&gt;isActuallyScript()&lt;/code&gt; function:</source>
          <target state="translated">的 &lt;code&gt;$.ajaxPrefilter()&lt;/code&gt; 方法也可以通过返回的dataType重定向到另一数据类型的请求。例如，如果URL具有在自定义 &lt;code&gt;isActuallyScript()&lt;/code&gt; 函数中定义的某些特定属性，则以下内容将请求设置为&amp;ldquo;脚本&amp;rdquo; ：</target>
        </trans-unit>
        <trans-unit id="280a781cf37dc5a0c87a93c392263fe532ae9059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.browser&lt;/code&gt; property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.</source>
          <target state="translated">在 &lt;code&gt;$.browser&lt;/code&gt; 属性提供有关正在访问的页面，由浏览器本身报告的Web浏览器的信息。它包含四个最流行的浏览器类（Internet Explorer，Mozilla，Webkit和Opera）中每个类别的标志以及版本信息。</target>
        </trans-unit>
        <trans-unit id="76431104c95bae4a44864ebbfd713ef401ebe1b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.contains()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns &lt;code&gt;false&lt;/code&gt;. Only &lt;em&gt;element&lt;/em&gt; nodes are supported; if the second argument is a text or comment node, &lt;code&gt;$.contains()&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">如果第二个参数提供的DOM元素是第一个参数提供的DOM元素的后代（无论是直接子元素还是嵌套更深 &lt;code&gt;$.contains()&lt;/code&gt; ，则$ .contains（）方法将返回 &lt;code&gt;true&lt;/code&gt; 。否则，它返回 &lt;code&gt;false&lt;/code&gt; 。仅支持&lt;em&gt;元素&lt;/em&gt;节点；如果第二个参数是文本或注释节点，则 &lt;code&gt;$.contains()&lt;/code&gt; 将返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09588521748ac438e7c26cbe3f00a85e140fd816" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.cssHooks&lt;/code&gt; object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.</source>
          <target state="translated">在 &lt;code&gt;$.cssHooks&lt;/code&gt; 对象提供了一种方法来定义获取和设置特定的CSS值的函数。它还可以用于创建新的cssHooks，以规范CSS3功能（例如框阴影和渐变）。</target>
        </trans-unit>
        <trans-unit id="3e4337150a1d2bb6fc88e8b469d5a24912766d08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.each()&lt;/code&gt; function is not the same as &lt;a href=&quot;each&quot;&gt;$(selector).each()&lt;/a&gt;, which is used to iterate, exclusively, over a jQuery object. The &lt;code&gt;$.each()&lt;/code&gt; function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the &lt;code&gt;this&lt;/code&gt; keyword, but Javascript will always wrap the &lt;code&gt;this&lt;/code&gt; value as an &lt;code&gt;Object&lt;/code&gt; even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.</source>
          <target state="translated">的 &lt;code&gt;$.each()&lt;/code&gt; 函数是不一样的&lt;a href=&quot;each&quot;&gt;$（选择器）。每个（） &lt;/a&gt;，其被用于迭代，排他地，在jQuery对象。的 &lt;code&gt;$.each()&lt;/code&gt; 函数可以被用于迭代任何集合，无论是一个对象或一个数组。对于数组，每次回调都会传递一个数组索引和一个对应的数组值。 （也可以通过 &lt;code&gt;this&lt;/code&gt; 关键字访问该值，但是Javascript始终将 &lt;code&gt;this&lt;/code&gt; 值包装为 &lt;code&gt;Object&lt;/code&gt; ,即使它是简单的字符串或数字值也是如此。）该方法返回其第一个参数，即被迭代的对象。</target>
        </trans-unit>
        <trans-unit id="976cdb1065014cb534e388a99a8c84685e8767eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.grep()&lt;/code&gt; method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.</source>
          <target state="translated">的 &lt;code&gt;$.grep()&lt;/code&gt; 方法从数组作为必要的，以便所有其余的项目通过所提供的测试移除项目。测试是一个传递数组项和数组中项索引的函数。仅当测试返回true时，该项才会在结果数组中。</target>
        </trans-unit>
        <trans-unit id="18acd609107b58ff2cf0d3332965bdfb5cabf43b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.holdReady()&lt;/code&gt; method allows the caller to delay jQuery's ready event. This &lt;em&gt;advanced feature&lt;/em&gt; would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.</source>
          <target state="translated">在 &lt;code&gt;$.holdReady()&lt;/code&gt; 方法允许呼叫者延迟jQuery的ready事件。动态脚本加载程序通常会使用此&lt;em&gt;高级功能&lt;/em&gt;，即使DOM可能已准备好，它们也希望在允许ready事件发生之前先加载jQuery插件等其他JavaScript。必须在文档的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; ，例如在jQuery脚本标记后的&amp;lt;head&amp;gt;中，立即调用此方法。在ready事件已经触发后调用此方法将无效。</target>
        </trans-unit>
        <trans-unit id="335a19e8e8e4eb5696bfd5f99305e44eff1fcc42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.inArray()&lt;/code&gt; method is similar to JavaScript's native &lt;code&gt;.indexOf()&lt;/code&gt; method in that it returns -1 when it doesn't find a match. If the first element within the array matches &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;$.inArray()&lt;/code&gt; returns 0.</source>
          <target state="translated">在 &lt;code&gt;$.inArray()&lt;/code&gt; 方法类似于JavaScript的原生 &lt;code&gt;.indexOf()&lt;/code&gt; 方法，它返回-1，当它没有找到一个匹配。如果数组中的第一个元素与 &lt;code&gt;value&lt;/code&gt; 匹配，则 &lt;code&gt;$.inArray()&lt;/code&gt; 返回0。</target>
        </trans-unit>
        <trans-unit id="47c6ed7fef66d2169b4d3861ee6d20f7f3defb90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.isNumeric()&lt;/code&gt; method checks whether its argument represents a numeric value. If so, it returns &lt;code&gt;true&lt;/code&gt;. Otherwise it returns &lt;code&gt;false&lt;/code&gt;. The argument can be of any type.</source>
          <target state="translated">的 &lt;code&gt;$.isNumeric()&lt;/code&gt; 方法检查其参数是否表示一个数值。如果是这样，则返回 &lt;code&gt;true&lt;/code&gt; 。否则返回 &lt;code&gt;false&lt;/code&gt; 。参数可以是任何类型。</target>
        </trans-unit>
        <trans-unit id="d054908ceec703f2328081f3828c696c4e4831cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.map()&lt;/code&gt; method applies a function to each item in an array or object and maps the results into a new array. &lt;strong&gt;Prior to jQuery 1.6&lt;/strong&gt;, &lt;code&gt;$.map()&lt;/code&gt; supports traversing &lt;em&gt;arrays only&lt;/em&gt;. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt; it also traverses objects.</source>
          <target state="translated">的 &lt;code&gt;$.map()&lt;/code&gt; 方法应用一个函数的每个项目中的阵列或对象和结果到一个新的数组映射。&lt;strong&gt;在jQuery 1.6之前&lt;/strong&gt;， &lt;code&gt;$.map()&lt;/code&gt; &lt;em&gt;仅&lt;/em&gt;支持遍历&lt;em&gt;数组&lt;/em&gt;。&lt;strong&gt;从jQuery 1.6开始&lt;/strong&gt;，它还遍历对象。</target>
        </trans-unit>
        <trans-unit id="79d04e01527feacc55c26314c81ca0af5fa41181" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.merge()&lt;/code&gt; operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The &lt;code&gt;$.merge()&lt;/code&gt; function is destructive. It alters the &lt;code&gt;length&lt;/code&gt; and numeric index properties of the first object to include items from the second.</source>
          <target state="translated">的 &lt;code&gt;$.merge()&lt;/code&gt; 操作形成包含来自两个阵列的所有元素的数组。保留数组中项目的顺序，并附加第二个数组中的项目。在 &lt;code&gt;$.merge()&lt;/code&gt; 函数是破坏性的。它将第一个对象的 &lt;code&gt;length&lt;/code&gt; 和数字索引属性更改为包括第二个对象的项。</target>
        </trans-unit>
        <trans-unit id="2c9302d36417008fe5659ed352ae46a989c038b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.now()&lt;/code&gt; method is a shorthand for the number returned by the expression &lt;code&gt;(new Date).getTime()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;$.now()&lt;/code&gt; 方法是由表达式返回的数字速记 &lt;code&gt;(new Date).getTime()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb8e0aa345948427cd7df6c456a7940fd1ca6ecb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.now()&lt;/code&gt; method is an alias for &lt;code&gt;Date.now()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;$.now()&lt;/code&gt; 方法的别名 &lt;code&gt;Date.now()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7808931143ef016b797914190e650d2a76779e1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.speed()&lt;/code&gt; method provides a way to define properties, such as &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;easing&lt;/code&gt;, and &lt;code&gt;queue&lt;/code&gt;, to use in a custom animation. By using it, you don't have to implement the logic that deals with default values and optional parameters.</source>
          <target state="translated">的 &lt;code&gt;$.speed()&lt;/code&gt; 方法提供了一种方式来定义特性，如 &lt;code&gt;duration&lt;/code&gt; ， &lt;code&gt;easing&lt;/code&gt; ，和 &lt;code&gt;queue&lt;/code&gt; ，在自定义动画中使用。通过使用它，您不必实现处理默认值和可选参数的逻辑。</target>
        </trans-unit>
        <trans-unit id="95ec78e912c92bddbb313103bfc5523271e0edff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.trim()&lt;/code&gt; function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.</source>
          <target state="translated">在 &lt;code&gt;$.trim()&lt;/code&gt; 函数删除所有的换行，空格（包括非中断空格）和选项卡从一开始就与所提供的字符串的结束。如果这些空格字符出现在字符串的中间，则将保留它们。</target>
        </trans-unit>
        <trans-unit id="c8d204e0e76dbbb80f76478ab9fdc37eb8914624" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.unique()&lt;/code&gt; function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the &lt;em&gt;exact same&lt;/em&gt; node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.</source>
          <target state="translated">的 &lt;code&gt;$.unique()&lt;/code&gt; 通过对象的数组函数搜索，排序的阵列，且去除任何重复的节点。如果&lt;em&gt;一个&lt;/em&gt;节点与阵列中已经存在的节点&lt;em&gt;完全相同，&lt;/em&gt;则认为该节点是重复的。具有相同属性的两个不同节点不被视为重复。此功能仅适用于DOM元素的普通JavaScript数组，并且主要由jQuery内部使用。您可能永远不需要使用它。</target>
        </trans-unit>
        <trans-unit id="fbbf462da578ffa3e663692abb85559bd63a2923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$.uniqueSort()&lt;/code&gt; function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the &lt;em&gt;exact same&lt;/em&gt; node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.</source>
          <target state="translated">的 &lt;code&gt;$.uniqueSort()&lt;/code&gt; 通过对象的数组函数搜索，排序的阵列，且去除任何重复的节点。如果&lt;em&gt;一个&lt;/em&gt;节点与阵列中已经存在的节点&lt;em&gt;完全相同，&lt;/em&gt;则认为该节点是重复的。具有相同属性的两个不同节点不被视为重复。此功能仅适用于DOM元素的普通JavaScript数组，并且主要由jQuery内部使用。您可能永远不需要使用它。</target>
        </trans-unit>
        <trans-unit id="3a26b22ac15e6d3725fb5a622feda2d98b93c1b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.addBack()&lt;/code&gt; method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt;. In the second example, &lt;code&gt;.addBack()&lt;/code&gt; adds the previous set of elements on the stack &amp;mdash; in this case &lt;code&gt;$(&quot;div.after-addback&quot;)&lt;/code&gt; &amp;mdash; to the current set, selecting both the div and its enclosed paragraphs.</source>
          <target state="translated">所述 &lt;code&gt;.addBack()&lt;/code&gt; 方法使前一组在遍历堆栈DOM元素的要被添加到当前组。在第一个示例中，顶层堆栈包含 &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt; 产生的集合。在第二个示例中， &lt;code&gt;.addBack()&lt;/code&gt; 将堆栈上的上一组元素（在本例中 &lt;code&gt;$(&quot;div.after-addback&quot;)&lt;/code&gt; 到当前组中，同时选择div及其封闭的段落。</target>
        </trans-unit>
        <trans-unit id="ff5d402fb11b41c1beb7b79978b5307c1e688a67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.after()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;insertafter&quot;&gt;.insertAfter()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.after()&lt;/code&gt;, the content to be inserted comes from the method's argument: &lt;code&gt;$(target).after(contentToBeInserted)&lt;/code&gt;. With &lt;code&gt;.insertAfter()&lt;/code&gt;, on the other hand, the content precedes the method and is inserted after the target, which in turn is passed as the &lt;code&gt;.insertAfter()&lt;/code&gt; method's argument: &lt;code&gt;$(contentToBeInserted).insertAfter(target)&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;.after()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;insertafter&quot;&gt;.insertAfter()&lt;/a&gt;&lt;/code&gt; 方法执行相同的任务。主要区别在于语法，特别是内容和目标的位置。使用 &lt;code&gt;.after()&lt;/code&gt; ，要插入的内容来自方法的参数： &lt;code&gt;$(target).after(contentToBeInserted)&lt;/code&gt; 。另一方面，使用 &lt;code&gt;.insertAfter()&lt;/code&gt; ，内容在方法之前，然后插入目标之后，目标随后又作为 &lt;code&gt;.insertAfter()&lt;/code&gt; 方法的参数传递： &lt;code&gt;$(contentToBeInserted).insertAfter(target)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6002f37ecb223258bee7d949314a826effed37b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.andSelf()&lt;/code&gt; method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt;. In the second example, &lt;code&gt;.andSelf()&lt;/code&gt; adds the previous set of elements on the stack &amp;mdash; in this case &lt;code&gt;$( &quot;div.after-andself&quot; )&lt;/code&gt; &amp;mdash; to the current set, selecting both the div and its enclosed paragraphs.</source>
          <target state="translated">所述 &lt;code&gt;.andSelf()&lt;/code&gt; 方法使前一组在遍历堆栈DOM元素的要被添加到当前组。在第一个示例中，顶层堆栈包含 &lt;code&gt;.find(&quot;p&quot;)&lt;/code&gt; 产生的集合。在第二个示例中， &lt;code&gt;.andSelf()&lt;/code&gt; 将堆栈上的上一组元素（在本例中 &lt;code&gt;$( &quot;div.after-andself&quot; )&lt;/code&gt; 到当前组中，同时选择div及其封闭的段落。</target>
        </trans-unit>
        <trans-unit id="919f011c3d3d39bb6a99b068c83bfc2e73be152d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.animate()&lt;/code&gt; method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the &lt;code&gt;.css()&lt;/code&gt; method, except that the range of properties is more restrictive.</source>
          <target state="translated">该 &lt;code&gt;.animate()&lt;/code&gt; 方法允许我们创建任何数字CSS属性的动画效果。唯一需要的参数是CSS属性的普通对象。该对象与可以发送给 &lt;code&gt;.css()&lt;/code&gt; 方法的对象类似，不同之处在于属性的范围更具限制性。</target>
        </trans-unit>
        <trans-unit id="8a0edc3a5b47cab439d4809dfee1aeae2a37c618" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.append()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;appendto&quot;&gt;.appendTo()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.append()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.appendTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="translated">在 &lt;code&gt;.append()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;appendto&quot;&gt;.appendTo()&lt;/a&gt;&lt;/code&gt; 方法执行相同的任务。主要区别在于特定于语法的内容和目标的位置。使用 &lt;code&gt;.append()&lt;/code&gt; ，方法之前的选择器表达式是将内容插入其中的容器。另一方面，使用 &lt;code&gt;.appendTo()&lt;/code&gt; ，内容在方法之前（作为选择器表达式或动态创建的标记），然后将其插入目标容器。</target>
        </trans-unit>
        <trans-unit id="a2a671ee3f926faffbc1079125031f1101d1a675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.append()&lt;/code&gt; method inserts the specified content as the last child of each element in the jQuery collection (To insert it as the &lt;em&gt;first&lt;/em&gt; child, use &lt;a href=&quot;prepend&quot;&gt;&lt;code&gt;.prepend()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">的 &lt;code&gt;.append()&lt;/code&gt; 方法将指定的内容作为jQuery的集合中的每个元素的最后一个子（要插入其作为&lt;em&gt;第一&lt;/em&gt;子，使用&lt;a href=&quot;prepend&quot;&gt; &lt;code&gt;.prepend()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9e7ad01b2fc895e8f2f372219f519cf23a25f27a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.attr()&lt;/code&gt; method gets the attribute value for only the &lt;em&gt;first&lt;/em&gt; element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's &lt;code&gt;.each()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;.attr()&lt;/code&gt; 方法获得仅针对该属性值&lt;em&gt;第一&lt;/em&gt;在匹配组元件。要单独获取每个元素的值，请使用循环构造，例如jQuery的 &lt;code&gt;.each()&lt;/code&gt; 或 &lt;code&gt;.map()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="e56a8d18e9615760f255a389b1a9ee37f18e2f05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.attr()&lt;/code&gt; method is a convenient way to set the value of attributes&amp;mdash;especially when setting multiple attributes or using values returned by a function. Consider the following image:</source>
          <target state="translated">所述 &lt;code&gt;.attr()&lt;/code&gt; 方法是设置设置多个属性或使用由函数返回值时，尤其是属性-的值的简便方法。考虑下图：</target>
        </trans-unit>
        <trans-unit id="bcf579ddc9930a5a97c07867bb06cdff64125acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.before()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;insertbefore&quot;&gt;.insertBefore()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.before()&lt;/code&gt;, the content to be inserted comes from the method's argument: &lt;code&gt;$(target).before(contentToBeInserted)&lt;/code&gt;. With &lt;code&gt;.insertBefore()&lt;/code&gt;, on the other hand, the content precedes the method and is inserted before the target, which in turn is passed as the &lt;code&gt;.insertBefore()&lt;/code&gt; method's argument: &lt;code&gt;$(contentToBeInserted).insertBefore(target)&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;.before()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;insertbefore&quot;&gt;.insertBefore()&lt;/a&gt;&lt;/code&gt; 方法执行相同的任务。主要区别在于语法，特别是内容和目标的位置。使用 &lt;code&gt;.before()&lt;/code&gt; ，要插入的内容来自该方法的参数： &lt;code&gt;$(target).before(contentToBeInserted)&lt;/code&gt; 。另一方面，使用 &lt;code&gt;.insertBefore()&lt;/code&gt; ，内容在方法之前并插入到目标之前，该目标又作为 &lt;code&gt;.insertBefore()&lt;/code&gt; 方法的参数传递： &lt;code&gt;$(contentToBeInserted).insertBefore(target)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b8b87f3a7319468a08ed6667b0d2ac2a11055e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.children()&lt;/code&gt; method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="translated">的 &lt;code&gt;.children()&lt;/code&gt; 方法可选地接受同一类型的选择器表达式，我们可以传递到 &lt;code&gt;$()&lt;/code&gt; 函数。如果提供了选择器，则将通过测试元素是否匹配来过滤它们。</target>
        </trans-unit>
        <trans-unit id="376670c6b2301c9502291bf8dd969cf1f3352e2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.clone()&lt;/code&gt; method performs a &lt;em&gt;deep&lt;/em&gt; copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes.</source>
          <target state="translated">该 &lt;code&gt;.clone()&lt;/code&gt; 方法执行&lt;em&gt;深&lt;/em&gt;匹配的元素集合的副本，这意味着它的副本匹配的元素，以及他们所有的后代元素和文本节点。</target>
        </trans-unit>
        <trans-unit id="8b9a721c048b18a223ef22271dcee5ef1ddb0b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.contents()&lt;/code&gt; method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.</source>
          <target state="translated">该 &lt;code&gt;.contents()&lt;/code&gt; 方法也可以用来获得一个iframe的内容文件，如果iframe是在同一个域中的主页。</target>
        </trans-unit>
        <trans-unit id="4478d31ecdf490a0aad5d0fa3bac7b611658e869" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.context&lt;/code&gt; property was deprecated in jQuery 1.10 and is only maintained to the extent needed for supporting &lt;code&gt;.live()&lt;/code&gt; in the jQuery Migrate plugin. It may be removed without notice in a future version.</source>
          <target state="translated">所述 &lt;code&gt;.context&lt;/code&gt; 属性在jQuery的1.10弃用，仅保持所需要用于支撑的程度 &lt;code&gt;.live()&lt;/code&gt; 在jQuery的迁移插件。在将来的版本中，可能会删除它，恕不另行通知。</target>
        </trans-unit>
        <trans-unit id="a781319ab4b7c2a3038a7d5f82a3aaa7431f7df3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.css()&lt;/code&gt; method is a convenient way to get a computed style property from the first matched element, especially in light of the different ways browsers access most of those properties (the &lt;code&gt;getComputedStyle()&lt;/code&gt; method in standards-based browsers versus the &lt;code&gt;currentStyle&lt;/code&gt; and &lt;code&gt;runtimeStyle&lt;/code&gt; properties in Internet Explorer prior to version 9) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the &lt;code&gt;float&lt;/code&gt; property as &lt;code&gt;styleFloat&lt;/code&gt;, while W3C standards-compliant browsers refer to it as &lt;code&gt;cssFloat&lt;/code&gt;. For consistency, you can simply use &lt;code&gt;&quot;float&quot;&lt;/code&gt;, and jQuery will translate it to the correct value for each browser.</source>
          <target state="translated">所述 &lt;code&gt;.css()&lt;/code&gt; 方法是一种方便的方式来获得从所述第一匹配元件的计算出的样式属性，特别是在不同的方式浏览器来访问这些大多数特性（的光 &lt;code&gt;getComputedStyle()&lt;/code&gt; 中的方法基于标准的浏览器相对于 &lt;code&gt;currentStyle&lt;/code&gt; 和版本9之前的Internet Explorer中的 &lt;code&gt;runtimeStyle&lt;/code&gt; 属性）以及浏览器用于某些属性的不同术语。例如，Internet Explorer的DOM实现将 &lt;code&gt;float&lt;/code&gt; 属性称为 &lt;code&gt;styleFloat&lt;/code&gt; ，而符合W3C标准的浏览器将其称为 &lt;code&gt;cssFloat&lt;/code&gt; 。为了保持一致，您可以简单地使用 &lt;code&gt;&quot;float&quot;&lt;/code&gt; ，并且jQuery会将其转换为每个浏览器的正确值。</target>
        </trans-unit>
        <trans-unit id="4e63aa8b4e036e090afb474846ea3fe671048a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.</source>
          <target state="translated">的 &lt;code&gt;.data()&lt;/code&gt; 方法允许我们任何类型的DOM元素的数据附加的方式，是从内存泄漏从循环引用安全，因此。</target>
        </trans-unit>
        <trans-unit id="520ce59174f569a4f598506fbd2fd9742a88c3a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</source>
          <target state="translated">的 &lt;code&gt;.data()&lt;/code&gt; 方法允许我们任何类型的DOM元素的数据附加的方式，是从内存泄漏从循环引用安全，因此。我们可以一次或作为一组检索单个元素的多个不同值：</target>
        </trans-unit>
        <trans-unit id="0eb426ccd7969912cbc62e5e7a40c10005fc497c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.data()&lt;/code&gt; method allows us to read data previously associated with DOM elements. We can retrieve several distinct values for a single element one at a time, or as a set:</source>
          <target state="translated">的 &lt;code&gt;.data()&lt;/code&gt; 方法允许我们读先前与DOM元素相关联的数据。我们可以一次或作为一组检索单个元素的多个不同值：</target>
        </trans-unit>
        <trans-unit id="158ffc844ccad87b3e96192f16f798b3f3d7c3fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.detach()&lt;/code&gt; method is the same as &lt;code&gt;&lt;a href=&quot;remove&quot;&gt;.remove()&lt;/a&gt;&lt;/code&gt;, except that &lt;code&gt;.detach()&lt;/code&gt; keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.</source>
          <target state="translated">所述 &lt;code&gt;.detach()&lt;/code&gt; 方法是一样的 &lt;code&gt;&lt;a href=&quot;remove&quot;&gt;.remove()&lt;/a&gt;&lt;/code&gt; ，不同之处在于 &lt;code&gt;.detach()&lt;/code&gt; 保持与移除的元件相关联的所有的jQuery的数据。当稍后将删除的元素重新插入DOM时，此方法很有用。</target>
        </trans-unit>
        <trans-unit id="67fa97b3a1074cefe09d0e33804e73171753c7ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.each()&lt;/code&gt; method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword &lt;code&gt;this&lt;/code&gt; refers to the element.</source>
          <target state="translated">的 &lt;code&gt;.each()&lt;/code&gt; 方法被设计成使DOM循环结构简洁和不易出错。调用时，它将遍历作为jQuery对象一部分的DOM元素。每次回调运行时，都会从0开始传递当前循环迭代。更重要的是，回调是在当前DOM元素的上下文中触发的，因此关键字 &lt;code&gt;this&lt;/code&gt; 引用了该元素。</target>
        </trans-unit>
        <trans-unit id="06ecbb426b5bd923098b84c44b225e3011c46509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeIn()&lt;/code&gt; method animates the opacity of the matched elements. It is similar to the &lt;code&gt;&lt;a href=&quot;fadeto&quot;&gt;.fadeTo()&lt;/a&gt;&lt;/code&gt; method but that method does not unhide the element and can specify the final opacity level.</source>
          <target state="translated">所述 &lt;code&gt;.fadeIn()&lt;/code&gt; 方法动画匹配元素的不透明度。它与 &lt;code&gt;&lt;a href=&quot;fadeto&quot;&gt;.fadeTo()&lt;/a&gt;&lt;/code&gt; 方法相似，但是该方法不会取消隐藏元素，并且可以指定最终的不透明度级别。</target>
        </trans-unit>
        <trans-unit id="062775b18ef73fe8687369620f45e3672d9a3cc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeOut()&lt;/code&gt; method animates the opacity of the matched elements. Once the opacity reaches 0, the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt;, so the element no longer affects the layout of the page.</source>
          <target state="translated">所述 &lt;code&gt;.fadeOut()&lt;/code&gt; 方法动画匹配元素的不透明度。一旦不透明度达到0， &lt;code&gt;display&lt;/code&gt; 样式属性将设置为 &lt;code&gt;none&lt;/code&gt; ，因此该元素不再影响页面的布局。</target>
        </trans-unit>
        <trans-unit id="3b666255a099fb53345e3339662753b6bc22c363" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeTo()&lt;/code&gt; method animates the opacity of the matched elements. It is similar to the &lt;code&gt;&lt;a href=&quot;fadein&quot;&gt;.fadeIn()&lt;/a&gt;&lt;/code&gt; method but that method unhides the element and always fades to 100% opacity.</source>
          <target state="translated">所述 &lt;code&gt;.fadeTo()&lt;/code&gt; 方法动画匹配元素的不透明度。它类似于 &lt;code&gt;&lt;a href=&quot;fadein&quot;&gt;.fadeIn()&lt;/a&gt;&lt;/code&gt; 方法，但是该方法取消隐藏元素，并且始终淡入100％的不透明度。</target>
        </trans-unit>
        <trans-unit id="87aefadc97e63343a3f198143ffa44473891ceed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fadeToggle()&lt;/code&gt; method animates the opacity of the matched elements. When called on a visible element, the element's &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; once the opacity reaches 0, so the element no longer affects the layout of the page.</source>
          <target state="translated">所述 &lt;code&gt;.fadeToggle()&lt;/code&gt; 方法动画匹配元素的不透明度。在可见元素上调用时，一旦不透明度达到0 ，该元素的 &lt;code&gt;display&lt;/code&gt; 样式属性将设置为 &lt;code&gt;none&lt;/code&gt; ，因此该元素不再影响页面的布局。</target>
        </trans-unit>
        <trans-unit id="49e81e00b99900cc2b7acf2d3e6518a653013144" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.finish()&lt;/code&gt; method is similar to &lt;code&gt;.stop(true, true)&lt;/code&gt; in that it clears the queue and the current animation jumps to its end value. It differs, however, in that &lt;code&gt;.finish()&lt;/code&gt; also causes the CSS property of all &lt;em&gt;queued&lt;/em&gt; animations to jump to their end values, as well.</source>
          <target state="translated">所述 &lt;code&gt;.finish()&lt;/code&gt; 方法类似于 &lt;code&gt;.stop(true, true)&lt;/code&gt; ，它清除队列和当前动画跳转到其最终值。但是，不同之处在于， &lt;code&gt;.finish()&lt;/code&gt; 还会使所有&lt;em&gt;排队&lt;/em&gt;动画的CSS属性也跳至其最终值。</target>
        </trans-unit>
        <trans-unit id="7004a34e94299568cb1b51c71e5fac930bc66ef5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.get()&lt;/code&gt; method grants access to the DOM nodes underlying each jQuery object. If the value of &lt;code&gt;index&lt;/code&gt; is out of bounds &amp;mdash; less than the negative number of elements or equal to or greater than the number of elements &amp;mdash; it returns &lt;code&gt;undefined&lt;/code&gt;. Consider a simple unordered list:</source>
          <target state="translated">在 &lt;code&gt;.get()&lt;/code&gt; 方法允许访问每个jQuery对象的基础的DOM节点。如果 &lt;code&gt;index&lt;/code&gt; 的值超出范围（小于负数个元素或大于或等于个数），则返回 &lt;code&gt;undefined&lt;/code&gt; 。考虑一个简单的无序列表：</target>
        </trans-unit>
        <trans-unit id="c12b1ce92b56f787255c4845c73032ecb78d6a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hasClass()&lt;/code&gt; method will return &lt;code&gt;true&lt;/code&gt; if the class is assigned to an element, even if other classes also are. For example, given the HTML above, the following will return &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">所述 &lt;code&gt;.hasClass()&lt;/code&gt; 方法将返回 &lt;code&gt;true&lt;/code&gt; ，如果类被分配给一个元素，即使其他类也都是。例如，鉴于上述HTML，以下内容将返回 &lt;code&gt;true&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ad9dc0cc34c77e937afc19320e0d5f30f2869953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hover()&lt;/code&gt; method binds handlers for both &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt; events. You can use it to simply apply behavior to an element during the time the mouse is within the element.</source>
          <target state="translated">的 &lt;code&gt;.hover()&lt;/code&gt; 方法结合处理程序两者 &lt;code&gt;mouseenter&lt;/code&gt; 和 &lt;code&gt;mouseleave&lt;/code&gt; 事件。您可以使用它在鼠标位于元素内时将行为简单地应用于元素。</target>
        </trans-unit>
        <trans-unit id="7352679d5961ada2dc857d5b790b2d2e8264e63d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hover()&lt;/code&gt; method, when passed a single function, will execute that handler for both &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt; events. This allows the user to use jQuery's various toggle methods within the handler or to respond differently within the handler depending on the &lt;code&gt;event.type&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;.hover()&lt;/code&gt; 方法，当通过一个单一的功能，将执行处理程序都 &lt;code&gt;mouseenter&lt;/code&gt; 和 &lt;code&gt;mouseleave&lt;/code&gt; 事件。这允许用户在处理程序内使用jQuery的各种切换方法，或根据 &lt;code&gt;event.type&lt;/code&gt; 在处理程序内不同地响应。</target>
        </trans-unit>
        <trans-unit id="34735eda31f0d0c8a8865a97a386f992d2171c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.html()&lt;/code&gt; method is not available in XML documents.</source>
          <target state="translated">在 &lt;code&gt;.html()&lt;/code&gt; 方法不是在XML文档中使用。</target>
        </trans-unit>
        <trans-unit id="f5c9b7c19cf9c9bec38c117b9596dfa64b3f5ec8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.jquery&lt;/code&gt; property is assigned to the jQuery prototype, commonly referred to by its alias &lt;code&gt;$.fn&lt;/code&gt;. It is a string containing the version number of &lt;code&gt;jQuery&lt;/code&gt;, such as &quot;1.5.0&quot; or &quot;1.4.4&quot;.</source>
          <target state="translated">该 &lt;code&gt;.jquery&lt;/code&gt; 属性被分配到jQuery的原型，它的别名通常称为 &lt;code&gt;$.fn&lt;/code&gt; 。它是一个字符串，其中包含 &lt;code&gt;jQuery&lt;/code&gt; 的版本号，例如&amp;ldquo; 1.5.0&amp;rdquo;或&amp;ldquo; 1.4.4&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="a617625fc09fff48a482b47a3b9afcbd0fd42a1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.live()&lt;/code&gt; method for binding event handlers uses this property to determine the root element to use for its event delegation needs.</source>
          <target state="translated">用于绑定事件处理程序的 &lt;code&gt;.live()&lt;/code&gt; 方法使用此属性来确定用于事件委托需要的根元素。</target>
        </trans-unit>
        <trans-unit id="96ea412065b77012ef071db4ab1032df2d1e8056" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.live()&lt;/code&gt; method interacts with other event methods in ways that can be surprising, e.g., &lt;code&gt;$( document ).off( &quot;click&quot; )&lt;/code&gt; removes all click handlers attached by any call to &lt;code&gt;.live()&lt;/code&gt;!</source>
          <target state="translated">该 &lt;code&gt;.live()&lt;/code&gt; 方法与其他事件方法的方式，可奇怪的，相互作用如 &lt;code&gt;$( document ).off( &quot;click&quot; )&lt;/code&gt; 删除任何呼叫连接到所有的点击处理程序 &lt;code&gt;.live()&lt;/code&gt; ！</target>
        </trans-unit>
        <trans-unit id="01c7cdb110bb60a90c982c7bb988effecba4e9a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.load()&lt;/code&gt; method, unlike &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt;, allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for the &lt;code&gt;url&lt;/code&gt; parameter. If one or more space characters are included in the string, the portion of the string following the first space is assumed to be a jQuery selector that determines the content to be loaded.</source>
          <target state="translated">与 &lt;code&gt;&lt;a href=&quot;jquery.get&quot;&gt;$.get()&lt;/a&gt;&lt;/code&gt; 不同， &lt;code&gt;.load()&lt;/code&gt; 方法允许我们指定要插入的远程文档的一部分。这可以通过使用 &lt;code&gt;url&lt;/code&gt; 参数的特殊语法来实现。如果字符串中包含一个或多个空格字符，则假定字符串中第一个空格之后的部分是确定要加载内容的jQuery选择器。</target>
        </trans-unit>
        <trans-unit id="3944fabbd1d606011ac39735a016c7231097a28b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.map()&lt;/code&gt; method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:</source>
          <target state="translated">的 &lt;code&gt;.map()&lt;/code&gt; 方法是用于获取或设置元素的集合的值是特别有用的。考虑其中包含一组复选框的表单：</target>
        </trans-unit>
        <trans-unit id="bcc25be925e63e21a2f6b44a5ddf92f0365ce360" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.off()&lt;/code&gt; method removes event handlers that were attached with &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt;. See the discussion of delegated and directly bound events on that page for more information. Calling &lt;code&gt;.off()&lt;/code&gt; with no arguments removes all handlers attached to the elements. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. &lt;strong&gt;When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.&lt;/strong&gt;</source>
          <target state="translated">所述 &lt;code&gt;.off()&lt;/code&gt; 方法去除附着与该事件处理程序&lt;a href=&quot;on&quot;&gt; &lt;code&gt;.on()&lt;/code&gt; &lt;/a&gt;。有关更多信息，请参见该页面上有关委托事件和直接绑定事件的讨论。调用不带参数的 &lt;code&gt;.off()&lt;/code&gt; 会删除所有附加到元素的处理程序。通过提供事件名称，名称空间，选择器或处理程序功能名称的组合，可以删除元素上的特定事件处理程序。&lt;strong&gt;给定多个过滤参数时，提供的所有参数都必须匹配才能删除事件处理程序。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db7e0e81a50ab84b4a804b6e7954e6386c082532" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.offset()&lt;/code&gt; method allows us to retrieve the current position of an element (specifically its border box, which excludes margins) &lt;em&gt;relative to the document&lt;/em&gt;. Contrast this with &lt;code&gt;&lt;a href=&quot;position&quot;&gt;.position()&lt;/a&gt;&lt;/code&gt;, which retrieves the current position &lt;em&gt;relative to the offset parent&lt;/em&gt;. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), &lt;code&gt;.offset()&lt;/code&gt; is more useful.</source>
          <target state="translated">所述 &lt;code&gt;.offset()&lt;/code&gt; 方法允许我们检索元素（特别是其边界框，这不包括边缘）的当前位置&lt;em&gt;相对于文档&lt;/em&gt;。将此与 &lt;code&gt;&lt;a href=&quot;position&quot;&gt;.position()&lt;/a&gt;&lt;/code&gt; 进行对比，后者&lt;em&gt;相对于偏移父级&lt;/em&gt;检索当前位置。将新元素放置在现有元素的顶部以进行全局操作（尤其是用于实现拖放操作）时， &lt;code&gt;.offset()&lt;/code&gt; 更有用。</target>
        </trans-unit>
        <trans-unit id="7fa7f613fb65aa1a55422d29979d55d20abbd326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.offset()&lt;/code&gt; setter method allows us to reposition an element. The element's border-box position is specified &lt;em&gt;relative to the document&lt;/em&gt;. If the element's &lt;code&gt;position&lt;/code&gt; style property is currently &lt;code&gt;static&lt;/code&gt;, it will be set to &lt;code&gt;relative&lt;/code&gt; to allow for this repositioning.</source>
          <target state="translated">所述 &lt;code&gt;.offset()&lt;/code&gt; setter方法允许我们重新定位的元件。元素的边框位置&lt;em&gt;相对于document&lt;/em&gt;指定。如果元素的 &lt;code&gt;position&lt;/code&gt; 样式属性当前为 &lt;code&gt;static&lt;/code&gt; ，则将其设置为 &lt;code&gt;relative&lt;/code&gt; ,以允许此重新定位。</target>
        </trans-unit>
        <trans-unit id="a272de06ce611fd779824d215b629102bca4911d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.on()&lt;/code&gt; method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the &lt;code&gt;.on()&lt;/code&gt; method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see &lt;a href=&quot;bind&quot;&gt;&lt;code&gt;.bind()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt;. To remove events bound with &lt;code&gt;.on()&lt;/code&gt;, see &lt;a href=&quot;off&quot;&gt;&lt;code&gt;.off()&lt;/code&gt;&lt;/a&gt;. To attach an event that runs only once and then removes itself, see &lt;a href=&quot;one&quot;&gt;&lt;code&gt;.one()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">的 &lt;code&gt;.on()&lt;/code&gt; 方法附加事件处理程序到当前选定集jQuery对象元件。从jQuery 1.7开始， &lt;code&gt;.on()&lt;/code&gt; 方法提供了附加事件处理程序所需的所有功能。对于从旧的jQuery事件方法转换帮助，请参阅&lt;a href=&quot;bind&quot;&gt; &lt;code&gt;.bind()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;live&quot;&gt; &lt;code&gt;.live()&lt;/code&gt; &lt;/a&gt;。要删除与 &lt;code&gt;.on()&lt;/code&gt; 绑定的事件，请参见.off &lt;a href=&quot;off&quot;&gt; &lt;code&gt;.off()&lt;/code&gt; &lt;/a&gt;。要附加仅运行一次然后删除的事件，请参见&lt;a href=&quot;one&quot;&gt; &lt;code&gt;.one()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="645c8dceaecbd4770000aadcc5a20e7cb42f53d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.one()&lt;/code&gt; method is identical to &lt;code&gt;.on()&lt;/code&gt;, except that the handler for a given element and event type is unbound after its first invocation. For example:</source>
          <target state="translated">的 &lt;code&gt;.one()&lt;/code&gt; 方法是相同的 &lt;code&gt;.on()&lt;/code&gt; ，所不同的是对于给定的元件和事件类型的处理程序是其第一调用之后未结合的。例如：</target>
        </trans-unit>
        <trans-unit id="af016528e5751912d56884465cbb7aa740006e8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.parents()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;parent&quot;&gt;.parent()&lt;/a&gt;&lt;/code&gt; methods are similar, except that the latter only travels a single level up the DOM tree. Also, &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; method returns a set containing &lt;code&gt;document&lt;/code&gt; whereas &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; returns an empty set.</source>
          <target state="translated">的 &lt;code&gt;.parents()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;parent&quot;&gt;.parent()&lt;/a&gt;&lt;/code&gt; 方法是相似的，不同之处在于后者只行进的单一电平向上的DOM树。同样， &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; 方法返回一个包含 &lt;code&gt;document&lt;/code&gt; 的集合，而 &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; 返回一个空集合。</target>
        </trans-unit>
        <trans-unit id="7b7c33fd18c0e46b128a7901820184b28d907678" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.position()&lt;/code&gt; method allows us to retrieve the current position of an element (specifically its margin box) &lt;em&gt;relative to the offset parent&lt;/em&gt; (specifically its padding box, which excludes margins and borders). Contrast this with &lt;code&gt;&lt;a href=&quot;offset&quot;&gt;.offset()&lt;/a&gt;&lt;/code&gt;, which retrieves the current position &lt;em&gt;relative to the document&lt;/em&gt;. When positioning a new element near another one and within the same containing DOM element, &lt;code&gt;.position()&lt;/code&gt; is the more useful.</source>
          <target state="translated">所述 &lt;code&gt;.position()&lt;/code&gt; 方法允许我们检索元素（特别是其余量盒）的当前位置&lt;em&gt;相对于所述偏移父&lt;/em&gt;（特别是其填充框，它不包括边距和边框）。将此与 &lt;code&gt;&lt;a href=&quot;offset&quot;&gt;.offset()&lt;/a&gt;&lt;/code&gt; 进行对比，后者会获取&lt;em&gt;相对于文档&lt;/em&gt;的当前位置。当将一个新元素放置在另一个元素附近并位于同一包含DOM元素中时， &lt;code&gt;.position()&lt;/code&gt; 更为有用。</target>
        </trans-unit>
        <trans-unit id="8581f6ba7ae84ecb35718c5084ae03b7a5fc4b47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prepend()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prependto&quot;&gt;.prependTo()&lt;/a&gt;&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.prepend()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.prependTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="translated">该 &lt;code&gt;.prepend()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;prependto&quot;&gt;.prependTo()&lt;/a&gt;&lt;/code&gt; 方法执行相同的任务。主要区别在于语法，特别是内容和目标的位置。使用 &lt;code&gt;.prepend()&lt;/code&gt; ，方法之前的选择器表达式是将内容插入其中的容器。另一方面，使用 &lt;code&gt;.prependTo()&lt;/code&gt; ，内容在方法之前（作为选择器表达式或即时创建的标记），然后将其插入目标容器。</target>
        </trans-unit>
        <trans-unit id="74db4525f13cab0cc77a631b7d354c0f8fd76bbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prepend()&lt;/code&gt; method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the &lt;em&gt;last&lt;/em&gt; child, use &lt;a href=&quot;append&quot;&gt;&lt;code&gt;.append()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">所述 &lt;code&gt;.prepend()&lt;/code&gt; 方法将指定的内容作为jQuery的集合中的每个元件的第一子（要插入它作为&lt;em&gt;最后&lt;/em&gt;子，使用&lt;a href=&quot;append&quot;&gt; &lt;code&gt;.append()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e70ed94081943cfae731624da44c4d5273576eb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.promise()&lt;/code&gt; method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.</source>
          <target state="translated">该 &lt;code&gt;.promise()&lt;/code&gt; 方法返回一个动态生成的承诺，解决一旦某种类型绑定到集合中的所有动作，排队与否，已经结束。</target>
        </trans-unit>
        <trans-unit id="03b29321ce1c92f36cde79cbab565855893c1edd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prop()&lt;/code&gt; method gets the property value for only the &lt;em&gt;first&lt;/em&gt; element in the matched set. It returns &lt;code&gt;undefined&lt;/code&gt; for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's &lt;code&gt;.each()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;.prop()&lt;/code&gt; 方法获得仅针对属性值&lt;em&gt;第一&lt;/em&gt;在匹配组元件。对于尚未设置的属性值，或者如果匹配的集合没有元素，则返回 &lt;code&gt;undefined&lt;/code&gt; 。要单独获取每个元素的值，请使用循环构造，例如jQuery的 &lt;code&gt;.each()&lt;/code&gt; 或 &lt;code&gt;.map()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="f5ce095d5bd4f19cf6db1858763e51b5719d8d05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.prop()&lt;/code&gt; method is a convenient way to set the value of properties&amp;mdash;especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting &lt;code&gt;selectedIndex&lt;/code&gt;, &lt;code&gt;tagName&lt;/code&gt;, &lt;code&gt;nodeName&lt;/code&gt;, &lt;code&gt;nodeType&lt;/code&gt;, &lt;code&gt;ownerDocument&lt;/code&gt;, &lt;code&gt;defaultChecked&lt;/code&gt;, or &lt;code&gt;defaultSelected&lt;/code&gt;. Since jQuery 1.6, these properties can no longer be set with the &lt;code&gt;.attr()&lt;/code&gt; method. They do not have corresponding attributes and are only properties.</source>
          <target state="translated">所述 &lt;code&gt;.prop()&lt;/code&gt; 方法是设置时设置多个属性，使用由函数返回的值，或者一次设置上的多个元素值特别属性-值的简便方法。设置 &lt;code&gt;selectedIndex&lt;/code&gt; ， &lt;code&gt;tagName&lt;/code&gt; ， &lt;code&gt;nodeName&lt;/code&gt; ， &lt;code&gt;nodeType&lt;/code&gt; ， &lt;code&gt;ownerDocument&lt;/code&gt; ， &lt;code&gt;defaultChecked&lt;/code&gt; 或 &lt;code&gt;defaultSelected&lt;/code&gt; 时应使用它。从jQuery 1.6开始，不再可以使用 &lt;code&gt;.attr()&lt;/code&gt; 方法设置这些属性。它们没有相应的属性，而仅仅是属性。</target>
        </trans-unit>
        <trans-unit id="658e85773a055f5e1058e298fe6314a906006e63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.queue()&lt;/code&gt; method allows us to directly manipulate this queue of functions. Calling &lt;code&gt;.queue()&lt;/code&gt; with a callback is particularly useful; it allows us to place a new function at the end of the queue. The callback function is executed once for each element in the jQuery set.</source>
          <target state="translated">所述 &lt;code&gt;.queue()&lt;/code&gt; 方法允许我们直接操纵的功能此队列。使用回调调用 &lt;code&gt;.queue()&lt;/code&gt; 尤其有用；它允许我们在队列末尾放置一个新函数。回调函数对jQuery集合中的每个元素执行一次。</target>
        </trans-unit>
        <trans-unit id="dab809c02c354d248b0ee32610b33f65bc9c6ae1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.ready()&lt;/code&gt; method is typically used with an anonymous function:</source>
          <target state="translated">的 &lt;code&gt;.ready()&lt;/code&gt; 方法通常用于与匿名功能：</target>
        </trans-unit>
        <trans-unit id="077d4bdc956042f2c88566c31db4cbfcc7363fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.ready()&lt;/code&gt; method offers a way to run JavaScript code as soon as the page's Document Object Model (DOM) becomes safe to manipulate. This will often be a good time to perform tasks that are needed before the user views or interacts with the page, for example to add event handlers and initialize plugins. When multiple functions are added via successive calls to this method, they run when the DOM is ready in the order in which they are added. As of jQuery 3.0, jQuery ensures that an exception occuring in one handler does not prevent subsequently added handlers from executing.</source>
          <target state="translated">页面的文档对象模型（DOM）变得可以安全操作后， &lt;code&gt;.ready()&lt;/code&gt; 方法提供了一种运行JavaScript代码的方法。这通常是执行用户查看或与页面交互之前所需的任务的好时机，例如添加事件处理程序和初始化插件。如果通过连续调用此方法添加了多个函数，则在DOM准备就绪时，它们会按照添加的顺序运行。从jQuery 3.0开始，jQuery确保在一个处理程序中发生的异常不会阻止随后添加的处理程序执行。</target>
        </trans-unit>
        <trans-unit id="83bc8e03b021237c11339ba2a1efc2f21d15a5a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeAttr()&lt;/code&gt; method uses the JavaScript &lt;code&gt;removeAttribute()&lt;/code&gt; function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.</source>
          <target state="translated">所述 &lt;code&gt;.removeAttr()&lt;/code&gt; 方法使用的JavaScript &lt;code&gt;removeAttribute()&lt;/code&gt; 函数，但它具有能够直接一个jQuery对象上调用的优点，并且它占不同属性跨浏览器的命名。</target>
        </trans-unit>
        <trans-unit id="3731546a94484849d0ac8ab85a3029dde61c5913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeData()&lt;/code&gt; method allows us to remove values that were previously set using &lt;code&gt;.data()&lt;/code&gt;. When called with the name of a key, &lt;code&gt;.removeData()&lt;/code&gt; deletes that particular value. When called with no arguments, &lt;code&gt;.removeData()&lt;/code&gt; removes all values.</source>
          <target state="translated">所述 &lt;code&gt;.removeData()&lt;/code&gt; 方法允许我们以除去使用之前设置的值 &lt;code&gt;.data()&lt;/code&gt; 。当使用键名调用时， &lt;code&gt;.removeData()&lt;/code&gt; 会删除该特定值。当不带任何参数调用时， &lt;code&gt;.removeData()&lt;/code&gt; 删除所有值。</target>
        </trans-unit>
        <trans-unit id="2034be3fd4582b7028a473df6aabe0dd58c049f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.removeProp()&lt;/code&gt; method removes properties set by the &lt;code&gt;&lt;a href=&quot;prop&quot;&gt;.prop()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;.removeProp()&lt;/code&gt; 方法去除由设置属性 &lt;code&gt;&lt;a href=&quot;prop&quot;&gt;.prop()&lt;/a&gt;&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="c8addddb62dca0b107eb80169f537d932677c13c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceAll()&lt;/code&gt; method is similar to &lt;code&gt;&lt;a href=&quot;replacewith&quot;&gt;.replaceWith()&lt;/a&gt;&lt;/code&gt;, but with the source and target reversed. Consider this DOM structure:</source>
          <target state="translated">所述 &lt;code&gt;.replaceAll()&lt;/code&gt; 方法类似于 &lt;code&gt;&lt;a href=&quot;replacewith&quot;&gt;.replaceWith()&lt;/a&gt;&lt;/code&gt; ，但与源和目标相反。考虑以下DOM结构：</target>
        </trans-unit>
        <trans-unit id="a4f749be45eb195fd4c23e0fd4ed8e7e1d2c9d7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceAll()&lt;/code&gt; method removes all data and event handlers associated with the removed nodes.</source>
          <target state="translated">所述 &lt;code&gt;.replaceAll()&lt;/code&gt; 方法删除与移除的节点相关联的所有数据和事件处理程序。</target>
        </trans-unit>
        <trans-unit id="5d74a5b31c932d95002c9ef2ae934fdb08a8e01d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method removes all data and event handlers associated with the removed nodes.</source>
          <target state="translated">所述 &lt;code&gt;.replaceWith()&lt;/code&gt; 方法删除与移除的节点相关联的所有数据和事件处理程序。</target>
        </trans-unit>
        <trans-unit id="35d7d4021234873cff115fe91b4361994144140c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:</source>
          <target state="translated">所述 &lt;code&gt;.replaceWith()&lt;/code&gt; 从在它的位置与单个呼叫的DOM和插入新的内容中的方法移除内容。考虑以下DOM结构：</target>
        </trans-unit>
        <trans-unit id="a9e203e0994b587501030c97a751910f0eeeecbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.replaceWith()&lt;/code&gt; method, like most jQuery methods, returns the jQuery object so that other methods can be chained onto it. However, it must be noted that the &lt;em&gt;original&lt;/em&gt; jQuery object is returned. This object refers to the element that has been removed from the DOM, not the new element that has replaced it.</source>
          <target state="translated">与大多数jQuery方法一样， &lt;code&gt;.replaceWith()&lt;/code&gt; 方法返回jQuery对象，以便可以将其他方法链接到该对象。但是，必须注意，将返回&lt;em&gt;原始&lt;/em&gt; jQuery对象。该对象引用已从DOM中删除的元素，而不是替换它的新元素。</target>
        </trans-unit>
        <trans-unit id="10e5651b768633d3d3742f6a64de99c1edc2dd27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.selector&lt;/code&gt; property was deprecated in jQuery 1.7 and is only maintained to the extent needed for supporting &lt;code&gt;.live()&lt;/code&gt; in the jQuery Migrate plugin. It may be removed without notice in a future version. The property was never a reliable indicator of the selector that could be used to obtain the set of elements currently contained in the jQuery set where it was a property, since subsequent traversal methods may have changed the set. Plugins that need to use a selector string within their plugin can require it as a parameter of the method. For example, a &quot;foo&quot; plugin could be written as &lt;code&gt;$.fn.foo = function( selector, options ) { /* plugin code goes here */ };&lt;/code&gt;, and the person using the plugin would write &lt;code&gt;$( &quot;div.bar&quot; ).foo( &quot;div.bar&quot;, {dog: &quot;bark&quot;} );&lt;/code&gt; with the &lt;code&gt;&quot;div.bar&quot;&lt;/code&gt; selector repeated as the first argument of &lt;code&gt;.foo()&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;.selector&lt;/code&gt; 属性在jQuery的1.7弃用，仅保持所需要用于支撑的程度 &lt;code&gt;.live()&lt;/code&gt; 在jQuery的迁移插件。在将来的版本中，可能会删除它，恕不另行通知。该属性从来都不是选择器的可靠指示符，因为可以使用该选择器来获取当前包含在jQuery集合中作为属性的元素集，因为随后的遍历方法可能会更改该集合。需要在插件中使用选择器字符串的插件可以将其作为方法的参数。例如，&amp;ldquo; foo&amp;rdquo;插件可以写为 &lt;code&gt;$.fn.foo = function( selector, options ) { /* plugin code goes here */ };&lt;/code&gt; ，使用插件的人会写 &lt;code&gt;$( &quot;div.bar&quot; ).foo( &quot;div.bar&quot;, {dog: &quot;bark&quot;} );&lt;/code&gt; 重复使用 &lt;code&gt;&quot;div.bar&quot;&lt;/code&gt; 选择器作为 &lt;code&gt;.foo()&lt;/code&gt; 的第一个参数。</target>
        </trans-unit>
        <trans-unit id="5aca0ee1f61701b4ea28fd1ea3827f8989fb0741" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serialize()&lt;/code&gt; method creates a text string in standard URL-encoded notation. It can act on a jQuery object that has selected individual form controls, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;: &lt;code&gt;$( &quot;input, textarea, select&quot; ).serialize();&lt;/code&gt;</source>
          <target state="translated">所述 &lt;code&gt;.serialize()&lt;/code&gt; 方法创建在标准URL编码符号的文本串。它可以对选择了单个窗体控件（例如 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; )的jQuery对象起作用： &lt;code&gt;$( &quot;input, textarea, select&quot; ).serialize();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9c89836855332a6cd11a6570684abc77c3f88f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serializeArray()&lt;/code&gt; method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery collection of &lt;code&gt;form&lt;/code&gt;s and/or form controls. The controls can be of several types:</source>
          <target state="translated">所述 &lt;code&gt;.serializeArray()&lt;/code&gt; 方法创建对象的JavaScript阵列，准备被编码为JSON字符串。它对 &lt;code&gt;form&lt;/code&gt; 和/或表单控件的jQuery集合进行操作。控件可以有几种类型：</target>
        </trans-unit>
        <trans-unit id="d6d35856dae819af217e994ad9f9e6d66e144968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.serializeArray()&lt;/code&gt; method uses the standard W3C rules for &lt;a href=&quot;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.2&quot;&gt;successful controls&lt;/a&gt; to determine which elements it should include; in particular the element cannot be disabled and must contain a &lt;code&gt;name&lt;/code&gt; attribute. No submit button value is serialized since the form was not submitted using a button. Data from file select elements is not serialized. Elements that do not contain a &lt;code&gt;value&lt;/code&gt; attribute are represented with the empty string value.</source>
          <target state="translated">所述 &lt;code&gt;.serializeArray()&lt;/code&gt; 方法使用标准的W3C规则&lt;a href=&quot;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.2&quot;&gt;成功的控制&lt;/a&gt;，以确定哪些元素它应该包括; 特别是该元素不能被禁用，并且必须包含 &lt;code&gt;name&lt;/code&gt; 属性。由于没有使用按钮提交表单，因此没有序列化提交按钮值。来自文件选择元素的数据未序列化。不包含 &lt;code&gt;value&lt;/code&gt; 属性的元素用空字符串值表示。</target>
        </trans-unit>
        <trans-unit id="ac90bebcd3635f8d3d17695f20532374d17e9175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.size()&lt;/code&gt; method is deprecated as of jQuery 1.8. Use the &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; property instead.</source>
          <target state="translated">从jQuery 1.8开始不推荐使用 &lt;code&gt;.size()&lt;/code&gt; 方法。请改用 &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="7d316944601f50f903569a2ae656e583d6d4f184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.size()&lt;/code&gt; method is functionally equivalent to the &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; property; however, &lt;strong&gt;the &lt;code&gt;.length&lt;/code&gt; property is preferred&lt;/strong&gt; because it does not have the overhead of a function call.</source>
          <target state="translated">所述 &lt;code&gt;.size()&lt;/code&gt; 方法是功能等效 &lt;code&gt;&lt;a href=&quot;length&quot;&gt;.length&lt;/a&gt;&lt;/code&gt; 属性; 然而，&lt;strong&gt;在 &lt;code&gt;.length&lt;/code&gt; 属性是首选&lt;/strong&gt;，因为它没有一个函数调用的开销。</target>
        </trans-unit>
        <trans-unit id="08740b8268cec8430f152df38cca53f9dd3c62e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideDown()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.</source>
          <target state="translated">所述 &lt;code&gt;.slideDown()&lt;/code&gt; 方法动画匹配元素的高度。这会使页面的下部向下滑动，为显示的项目腾出空间。</target>
        </trans-unit>
        <trans-unit id="e0f562dad9679f841eef5960aed9a626d4d79d28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideToggle()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The &lt;code&gt;display&lt;/code&gt; property is saved and restored as needed. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;. When the height reaches 0 after a hiding animation, the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; to ensure that the element no longer affects the layout of the page.</source>
          <target state="translated">所述 &lt;code&gt;.slideToggle()&lt;/code&gt; 方法动画匹配元素的高度。这会导致页面下部向上或向下滑动，从而显示或隐藏项目。如果最初显示该元素，则它将被隐藏；如果隐藏，它将显示出来。的 &lt;code&gt;display&lt;/code&gt; 属性被保存并在需要时恢复。如果元素的 &lt;code&gt;display&lt;/code&gt; 值为 &lt;code&gt;inline&lt;/code&gt; ，则该元素将被隐藏并显示，它将再次显示为 &lt;code&gt;inline&lt;/code&gt; 。隐藏动画后，如果高度达到0，则 &lt;code&gt;display&lt;/code&gt; 样式属性将设置为 &lt;code&gt;none&lt;/code&gt; ,以确保该元素不再影响页面的布局。</target>
        </trans-unit>
        <trans-unit id="8dc8f9d9ce642c6b3a7c575f52b12ea99866b757" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.slideUp()&lt;/code&gt; method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the &lt;code&gt;display&lt;/code&gt; style property is set to &lt;code&gt;none&lt;/code&gt; to ensure that the element no longer affects the layout of the page.</source>
          <target state="translated">所述 &lt;code&gt;.slideUp()&lt;/code&gt; 方法动画匹配元素的高度。这会使页面的下部向上滑动，似乎隐藏了项目。一旦高度达到0（或设置为CSS min-height属性），则将 &lt;code&gt;display&lt;/code&gt; style属性设置为 &lt;code&gt;none&lt;/code&gt; ,以确保该元素不再影响页面的布局。</target>
        </trans-unit>
        <trans-unit id="e2302549a8460d5f9c3f7051fcf5cb7a1fa33464" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.text()&lt;/code&gt; method cannot be used on form inputs or scripts. To set or get the text value of &lt;code&gt;input&lt;/code&gt; or &lt;code&gt;textarea&lt;/code&gt; elements, use the &lt;a href=&quot;val&quot;&gt;&lt;code&gt;.val()&lt;/code&gt;&lt;/a&gt; method. To get the value of a script element, use the &lt;a href=&quot;html&quot;&gt;&lt;code&gt;.html()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;.text()&lt;/code&gt; 方法不能在形式输入或脚本中使用。要设置或获取 &lt;code&gt;input&lt;/code&gt; 或 &lt;code&gt;textarea&lt;/code&gt; 元素的文本值，请使用&lt;a href=&quot;val&quot;&gt; &lt;code&gt;.val()&lt;/code&gt; &lt;/a&gt;方法。若要获取脚本元素的值，请使用&lt;a href=&quot;html&quot;&gt; &lt;code&gt;.html()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="373c283f538765ec436d67f9a9ff14adda880de8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.text()&lt;/code&gt; method cannot be used on input elements. For input field text, use the &lt;a href=&quot;val&quot;&gt;.val()&lt;/a&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;.text()&lt;/code&gt; 方法不能在输入的元素中使用。对于输入字段文本，请使用&lt;a href=&quot;val&quot;&gt;.val（）&lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="fccc2c954d25672295c216fd9075878da0e75407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.toggle()&lt;/code&gt; method binds a handler for the &lt;code&gt;click&lt;/code&gt; event, so the rules outlined for the triggering of &lt;code&gt;click&lt;/code&gt; apply here as well.</source>
          <target state="translated">该 &lt;code&gt;.toggle()&lt;/code&gt; 方法结合为一个处理 &lt;code&gt;click&lt;/code&gt; 事件，所以概述了的触发规则 &lt;code&gt;click&lt;/code&gt; 这里同样适用。</target>
        </trans-unit>
        <trans-unit id="1b0b52985915a620941211a673b54e69d2ce481d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.toggle()&lt;/code&gt; method is provided for convenience. It is relatively straightforward to implement the same behavior by hand, and this can be necessary if the assumptions built into &lt;code&gt;.toggle()&lt;/code&gt; prove limiting. For example, &lt;code&gt;.toggle()&lt;/code&gt; is not guaranteed to work correctly if applied twice to the same element. Since &lt;code&gt;.toggle()&lt;/code&gt; internally uses a &lt;code&gt;click&lt;/code&gt; handler to do its work, we must unbind &lt;code&gt;click&lt;/code&gt; to remove a behavior attached with &lt;code&gt;.toggle()&lt;/code&gt;, so other &lt;code&gt;click&lt;/code&gt; handlers can be caught in the crossfire. The implementation also calls &lt;code&gt;.preventDefault()&lt;/code&gt; on the event, so links will not be followed and buttons will not be clicked if &lt;code&gt;.toggle()&lt;/code&gt; has been called on the element.</source>
          <target state="translated">所述 &lt;code&gt;.toggle()&lt;/code&gt; 提供了一种用于简便方法。手动实现相同的行为是相对简单的，如果内置于 &lt;code&gt;.toggle()&lt;/code&gt; 的假设证明是限制性的，则可能有必要。例如，如果两次对同一元素应用 &lt;code&gt;.toggle()&lt;/code&gt; ,则不能保证其正常工作。由于 &lt;code&gt;.toggle()&lt;/code&gt; 内部使用 &lt;code&gt;click&lt;/code&gt; 处理程序来完成其工作，因此我们必须取消绑定 &lt;code&gt;click&lt;/code&gt; 才能删除 &lt;code&gt;.toggle()&lt;/code&gt; 附带的行为，因此其他 &lt;code&gt;click&lt;/code&gt; 处理程序可能会陷入困境。该实现还调用 &lt;code&gt;.preventDefault()&lt;/code&gt; 事件上的链接，因此，如果已在元素上调用 &lt;code&gt;.toggle()&lt;/code&gt; ，则不会跟随链接，也不会单击按钮。</target>
        </trans-unit>
        <trans-unit id="90ee2012c0d37e1e2b88250be3147655498ac6c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.trigger()&lt;/code&gt; method can be used on jQuery collections that wrap plain JavaScript objects similar to a pub/sub mechanism; any event handlers bound to the object will be called when the event is triggered.</source>
          <target state="translated">所述 &lt;code&gt;.trigger()&lt;/code&gt; 方法可以在集合的jQuery使用该包裹纯JavaScript对象类似于发布/订阅机制; 触发事件时，将调用绑定到该对象的任何事件处理程序。</target>
        </trans-unit>
        <trans-unit id="6727df07ba1a485ab1da0e62516370226a50a0bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.triggerHandler( &quot;event&quot; )&lt;/code&gt; method will not call &lt;code&gt;.event()&lt;/code&gt; on the element it is triggered on. This means &lt;code&gt;.triggerHandler( &quot;submit&quot; )&lt;/code&gt; on a form will not call &lt;code&gt;.submit()&lt;/code&gt; on the form.</source>
          <target state="translated">该 &lt;code&gt;.triggerHandler( &quot;event&quot; )&lt;/code&gt; 方法不会调用 &lt;code&gt;.event()&lt;/code&gt; 被触发的元素。这意味着 &lt;code&gt;.triggerHandler( &quot;submit&quot; )&lt;/code&gt; 不会在表单上调用 &lt;code&gt;.submit()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="513e4d6bf3e0be052f40008f5f347b3a0c913660" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.undelegate()&lt;/code&gt; method is a way of removing event handlers that have been bound using &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;.undelegate()&lt;/code&gt; 方法是除去已使用结合事件处理程序的方式&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="51fd5f8e1da6cc53759c1a5d55129187c9c1669f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.unwrap()&lt;/code&gt; method removes the element's parent and returns the unwrapped content. This is effectively the inverse of the &lt;code&gt;&lt;a href=&quot;wrap&quot;&gt;.wrap()&lt;/a&gt;&lt;/code&gt; method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.</source>
          <target state="translated">所述 &lt;code&gt;.unwrap()&lt;/code&gt; 方法去除元素的父，并返回展开的内容。这实际上是 &lt;code&gt;&lt;a href=&quot;wrap&quot;&gt;.wrap()&lt;/a&gt;&lt;/code&gt; 方法的逆过程。匹配的元素（及其同级元素，如果有的话）替换其在DOM结构中的父级。</target>
        </trans-unit>
        <trans-unit id="be7b1e44db9c19e73004f470a5e8f0469e24649d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.val()&lt;/code&gt; method allows setting the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value:</source>
          <target state="translated">所述 &lt;code&gt;.val()&lt;/code&gt; 方法允许通过传递函数的值设置。从jQuery 1.4开始，该函数传递了两个参数，即当前元素的索引及其当前值：</target>
        </trans-unit>
        <trans-unit id="aa3df7ef8e6c5a1177e85f411ef7f33f49a0b611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.val()&lt;/code&gt; method is primarily used to get the values of form elements such as &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. When called on an empty collection, it returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;.val()&lt;/code&gt; 方法主要用于获得形式元素如的值 &lt;code&gt;input&lt;/code&gt; ， &lt;code&gt;select&lt;/code&gt; 和 &lt;code&gt;textarea&lt;/code&gt; 。在空集合上调用时，它返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="322722376da12ca684717a51b25a7d113bdaa84e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrap()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.</source>
          <target state="translated">该 &lt;code&gt;.wrap()&lt;/code&gt; 函数可以采取任何可能被传递到任何字符串或对象 &lt;code&gt;$()&lt;/code&gt; 工厂函数来指定一个DOM结构。该结构可以嵌套在几层深处，但应仅包含一个最里面的元素。此结构的副本将包装在匹配元素集中的每个元素周围。此方法返回原始元素集以进行链接。</target>
        </trans-unit>
        <trans-unit id="c812721d970da9b645aa759ae959ba0db5b2e0e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrapAll()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.</source>
          <target state="translated">该 &lt;code&gt;.wrapAll()&lt;/code&gt; 函数可以采取任何可能被传递到任何字符串或对象 &lt;code&gt;$()&lt;/code&gt; 函数来指定一个DOM结构。该结构可以嵌套在几层深处，但应仅包含一个最里面的元素。该结构将作为一组匹配元素包裹在匹配元素集中的所有元素。</target>
        </trans-unit>
        <trans-unit id="3db4368770ad651d5dbec7c44cd8ba2db7319e60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.wrapInner()&lt;/code&gt; function can take any string or object that could be passed to the &lt;code&gt;$()&lt;/code&gt; factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.</source>
          <target state="translated">该 &lt;code&gt;.wrapInner()&lt;/code&gt; 函数可以采取任何可能被传递到任何字符串或对象 &lt;code&gt;$()&lt;/code&gt; 工厂函数来指定一个DOM结构。该结构可以嵌套在几层深处，但应仅包含一个最里面的元素。该结构将围绕匹配元素集合中每个元素的内容进行包装。</target>
        </trans-unit>
        <trans-unit id="139d56bcf1b91aaa8dba4392f3eb16d4d9147cb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:checked&lt;/code&gt; selector works for checkboxes, radio buttons, and options of &lt;code&gt;select&lt;/code&gt; elements.</source>
          <target state="translated">的 &lt;code&gt;:checked&lt;/code&gt; 选择适用于复选框，单选按钮和选项 &lt;code&gt;select&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="01193d1507c1b5d6b5823171619bb4c82354b9a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:disabled&lt;/code&gt; selector should only be used for selecting HTML elements that support the &lt;code&gt;disabled&lt;/code&gt; attribute (&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;menuitem&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">的 &lt;code&gt;:disabled&lt;/code&gt; 选择器应只用于选择支持HTML元素 &lt;code&gt;disabled&lt;/code&gt; 属性（ &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 的， &lt;code&gt;&amp;lt;menuitem&amp;gt;&lt;/code&gt; ，和 &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2395e6feb0bbee4323652fc74ae8a9cbd24453a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:enabled&lt;/code&gt; selector should only be used for selecting HTML elements that support the &lt;code&gt;disabled&lt;/code&gt; attribute (&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">的 &lt;code&gt;:enabled&lt;/code&gt; 选择器应只用于选择支持HTML元素 &lt;code&gt;disabled&lt;/code&gt; 属性（ &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; ，和 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 的）。</target>
        </trans-unit>
        <trans-unit id="2b08c2cbeff939b37697982eb1a485029c814d6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:first-of-type&lt;/code&gt; selector matches elements that have no other element with both the same parent and the same element name coming before it in the document tree.</source>
          <target state="translated">的 &lt;code&gt;:first-of-type&lt;/code&gt; 选择匹配具有相同家长和之前它的到来文档树相同的元素名称都没有其他元素的元素。</target>
        </trans-unit>
        <trans-unit id="49d835832f63623fec68d9fdda05e2be7c6beae9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:first&lt;/code&gt; pseudo-class is equivalent to &lt;code&gt;:eq( 0 )&lt;/code&gt;. It could also be written as &lt;code&gt;:lt( 1 )&lt;/code&gt;. While this matches only a single element, &lt;a href=&quot;first-child-selector&quot;&gt;:first-child&lt;/a&gt; can match more than one: One for each parent.</source>
          <target state="translated">的 &lt;code&gt;:first&lt;/code&gt; 伪类等同于 &lt;code&gt;:eq( 0 )&lt;/code&gt; 。它也可以写成 &lt;code&gt;:lt( 1 )&lt;/code&gt; 。虽然这仅匹配一个元素，但&lt;a href=&quot;first-child-selector&quot;&gt;：first-child&lt;/a&gt;可以匹配多个：每个父对象一个。</target>
        </trans-unit>
        <trans-unit id="fcd319e0ed30f65f1bf56aa4209ee68a5c743e4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:input&lt;/code&gt; selector basically selects all form controls.</source>
          <target state="translated">的 &lt;code&gt;:input&lt;/code&gt; 选择器基本上选择所有表单控件。</target>
        </trans-unit>
        <trans-unit id="e719eb72a2f787d59782d8fc9ac950f9c0950994" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:lang()&lt;/code&gt; selector matches elements that have a language value equal to the supplied language code or that start with the supplied language code immediately followed by &quot;-&quot;. For example, the selector &lt;code&gt;$(&quot;div:lang(en)&quot;)&lt;/code&gt;will match &lt;code&gt;&amp;lt;div lang=&quot;en&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;div lang=&quot;en-us&quot;&amp;gt;&lt;/code&gt; (and any of their descendant &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s), but not &lt;code&gt;&amp;lt;div lang=&quot;fr&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">的 &lt;code&gt;:lang()&lt;/code&gt; 具有一个语言值选择匹配元素等于所提供的语言代码或启动与所提供的语言代码紧接着&amp;ldquo; - &amp;rdquo;。例如，选择器 &lt;code&gt;$(&quot;div:lang(en)&quot;)&lt;/code&gt; 将匹配 &lt;code&gt;&amp;lt;div lang=&quot;en&quot;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;div lang=&quot;en-us&quot;&amp;gt;&lt;/code&gt; （以及它们的任何后代 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; s），但是不是 &lt;code&gt;&amp;lt;div lang=&quot;fr&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3ebbf72ab8f006b6be875c86864d5808bf70755" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:last-of-type&lt;/code&gt; selector matches elements that have no other element with the same parent and the same element name coming after it in the document tree.</source>
          <target state="translated">的 &lt;code&gt;:last-of-type&lt;/code&gt; 选择匹配具有相同父后它的到来文档树相同的元素名称没有其他元素的元素。</target>
        </trans-unit>
        <trans-unit id="f222c15bce05c9c3271710690a4e94281f26e1e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:nth-child(n)&lt;/code&gt; pseudo-class is easily confused with &lt;code&gt;:eq(n)&lt;/code&gt;, even though the two can result in dramatically different matched elements. With &lt;code&gt;:nth-child(n)&lt;/code&gt;, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With &lt;code&gt;:eq(n)&lt;/code&gt; only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</source>
          <target state="translated">的 &lt;code&gt;:nth-child(n)&lt;/code&gt; 伪类很容易与困惑 &lt;code&gt;:eq(n)&lt;/code&gt; ，即使两个可能导致显着的不同匹配的元素。使用 &lt;code&gt;:nth-child(n)&lt;/code&gt; ，将计算所有子级，无论它们是什么，并且仅当指定元素与附加到伪类的选择器匹配时才选择指定元素。使用 &lt;code&gt;:eq(n)&lt;/code&gt; 时,仅对连接到伪类的选择器进行计数，而不仅限于任何其他元素的子级，并且选择第（n + 1）个选择器（n从0开始）。</target>
        </trans-unit>
        <trans-unit id="689dff1a2d43ff2ac2346a95c07aae9a34eb5509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:nth-child(n)&lt;/code&gt; pseudo-class is easily confused with the &lt;code&gt;.eq( n )&lt;/code&gt; call, even though the two can result in dramatically different matched elements. With &lt;code&gt;:nth-child(n)&lt;/code&gt;, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With the &lt;code&gt;.eq( n )&lt;/code&gt; call only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</source>
          <target state="translated">的 &lt;code&gt;:nth-child(n)&lt;/code&gt; 伪类很容易与混淆 &lt;code&gt;.eq( n )&lt;/code&gt; 调用，即使两个可能导致显着的不同匹配的元素。使用 &lt;code&gt;:nth-child(n)&lt;/code&gt; ，将计算所有子级，无论它们是什么，并且仅当指定元素与附加到伪类的选择器匹配时才选择指定元素。通过 &lt;code&gt;.eq( n )&lt;/code&gt; 调用，仅对连接到伪类的选择器进行计数，而不仅限于任何其他元素的子代，并且选择第（n + 1）个选择器（n从0开始）。</target>
        </trans-unit>
        <trans-unit id="480990aae62b645f5c757db08b5d22e7fc118d3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:selected&lt;/code&gt; selector works for &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements. It does not work for checkboxes or radio inputs; use &lt;code&gt;:checked&lt;/code&gt; for them.</source>
          <target state="translated">的 &lt;code&gt;:selected&lt;/code&gt; 选择器适用于 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 元素。它不适用于复选框或单选输入。使用 &lt;code&gt;:checked&lt;/code&gt; 他们。</target>
        </trans-unit>
        <trans-unit id="977650852f199848327084d347571ad1e5aaab2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:submit&lt;/code&gt; selector typically applies to button or input elements. Note that some browsers treat &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element as &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; implicitly while others (such as Internet Explorer) do not. To ensure that markup works consistently across all browsers and guarantee that it is possible to consistently select buttons that will submit a form, always specify a &lt;code&gt;type&lt;/code&gt; property.</source>
          <target state="translated">所述 &lt;code&gt;:submit&lt;/code&gt; 选择通常适用于按钮或输入元件。请注意，某些浏览器将 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 元素隐式视为 &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; 而其他浏览器（例如Internet Explorer）则不这样。为了确保标记在所有浏览器中都能一致地工作，并确保可以一致地选择将提交表单的按钮，请始终指定 &lt;code&gt;type&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="0e75c719b09262c87105625d3981cdd5716ee6d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.insertAfter()&lt;/code&gt; methods perform the same task. The major difference is in the syntax&amp;mdash;specifically, in the placement of the content and target. With &lt;code&gt;.after()&lt;/code&gt;, the selector expression preceding the method is the container after which the content is inserted. With &lt;code&gt;.insertAfter()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;.insertAfter()&lt;/code&gt; 方法执行相同的任务。主要区别在于语法，特别是内容和目标的位置。使用 &lt;code&gt;.after()&lt;/code&gt; ，方法之前的选择器表达式是在其后插入内容的容器。另一方面，使用 &lt;code&gt;.insertAfter()&lt;/code&gt; ，内容在方法之前，可以作为选择器表达式，也可以作为即时创建的标记，并将其插入到目标容器之后。</target>
        </trans-unit>
        <trans-unit id="a62ffe6286350b3c8dba0fe6ec0674cc784f5054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.insertAfter()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.after()&lt;/code&gt;, the selector expression preceding the method is the container after which the content is inserted. With &lt;code&gt;.insertAfter()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;after&quot;&gt;.after()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;.insertAfter()&lt;/code&gt; 方法执行相同的任务。主要区别在于特定于语法的内容和目标的位置。使用 &lt;code&gt;.after()&lt;/code&gt; ，方法之前的选择器表达式是在其后插入内容的容器。另一方面，使用 &lt;code&gt;.insertAfter()&lt;/code&gt; ，内容在方法之前，可以作为选择器表达式，也可以作为即时创建的标记，并将其插入到目标容器之后。</target>
        </trans-unit>
        <trans-unit id="cd94168e712338f385a4b6a33602f5a25787172f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.appendTo()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.append()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.appendTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;append&quot;&gt;.append()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;.appendTo()&lt;/code&gt; 方法执行相同的任务。主要区别在于特定于语法的内容和目标的位置。使用 &lt;code&gt;.append()&lt;/code&gt; ，方法之前的选择器表达式是将内容插入其中的容器。另一方面，使用 &lt;code&gt;.appendTo()&lt;/code&gt; ，内容在方法之前（作为选择器表达式或动态创建的标记），然后将其插入目标容器。</target>
        </trans-unit>
        <trans-unit id="fe43ace986ca75204f321e277ad9e4407e4e3b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.insertBefore()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.before()&lt;/code&gt;, the selector expression preceding the method is the container before which the content is inserted. With &lt;code&gt;.insertBefore()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.</source>
          <target state="translated">的 &lt;code&gt;&lt;a href=&quot;before&quot;&gt;.before()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;.insertBefore()&lt;/code&gt; 方法执行相同的任务。主要区别在于特定于语法的内容和目标的位置。使用 &lt;code&gt;.before()&lt;/code&gt; ，方法之前的选择器表达式是在其前面插入内容的容器。另一方面，使用 &lt;code&gt;.insertBefore()&lt;/code&gt; ，内容在方法之前（作为选择器表达式或动态创建的标记），然后将其插入目标容器之前。</target>
        </trans-unit>
        <trans-unit id="bb0b532a701ca8991b6d6cf5aa6767e6a60d3c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;not&quot;&gt;.not()&lt;/a&gt;&lt;/code&gt; method will end up providing you with more readable selections than pushing complex selectors or variables into a &lt;code&gt;:not()&lt;/code&gt; selector filter. In most cases, it is a better choice.</source>
          <target state="translated">与将复杂的选择器或变量推入 &lt;code&gt;:not()&lt;/code&gt; 选择器过滤器相比， &lt;code&gt;&lt;a href=&quot;not&quot;&gt;.not()&lt;/a&gt;&lt;/code&gt; 方法最终将为您提供更具可读性的选择。在大多数情况下，这是一个更好的选择。</target>
        </trans-unit>
        <trans-unit id="6e8de57099bebd411d7e3efca254b07f646e05d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;.prependTo()&lt;/code&gt; methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With &lt;code&gt;.prepend()&lt;/code&gt;, the selector expression preceding the method is the container into which the content is inserted. With &lt;code&gt;.prependTo()&lt;/code&gt;, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</source>
          <target state="translated">该 &lt;code&gt;&lt;a href=&quot;prepend&quot;&gt;.prepend()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;.prependTo()&lt;/code&gt; 方法执行相同的任务。主要区别在于特定于语法的内容和目标的位置。使用 &lt;code&gt;.prepend()&lt;/code&gt; ，方法之前的选择器表达式是将内容插入其中的容器。另一方面，使用 &lt;code&gt;.prependTo()&lt;/code&gt; ，内容在方法之前（作为选择器表达式或即时创建的标记），然后将其插入目标容器。</target>
        </trans-unit>
        <trans-unit id="5b9d80e6d688dcee931bd76e1d9f5e5cca4795e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeSend&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;dataFilter&lt;/code&gt;, &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; options all accept callback functions that are invoked at the appropriate times.</source>
          <target state="translated">该 &lt;code&gt;beforeSend&lt;/code&gt; ， &lt;code&gt;error&lt;/code&gt; ， &lt;code&gt;dataFilter&lt;/code&gt; ， &lt;code&gt;success&lt;/code&gt; 和 &lt;code&gt;complete&lt;/code&gt; 选项都同意，在适当的时候调用回调函数。</target>
        </trans-unit>
        <trans-unit id="dc09994630bedb3f56bf21fb50b2ce7b0ebf957c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur&lt;/code&gt; event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the &lt;code&gt;blur&lt;/code&gt; event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping &lt;code&gt;blur&lt;/code&gt; to the &lt;code&gt;focusout&lt;/code&gt; event in its event delegation methods, &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在 &lt;code&gt;blur&lt;/code&gt; 事件不会冒泡在Internet Explorer中。因此，依赖事件委托与 &lt;code&gt;blur&lt;/code&gt; 事件的脚本将无法在浏览器中一致地工作。但是，从1.4.2版开始，jQuery通过将 &lt;code&gt;blur&lt;/code&gt; 映射到其事件委托方法&lt;a href=&quot;live&quot;&gt; &lt;code&gt;.live()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; 中&lt;/a&gt;的 &lt;code&gt;focusout&lt;/code&gt; 事件来解决此限制。</target>
        </trans-unit>
        <trans-unit id="190cbfc6dbdd3abf5df2269ad19e423de3c772bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur&lt;/code&gt; event is sent to an element when it loses focus. Originally, this event was only applicable to form elements, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In recent browsers, the domain of the event has been extended to include all element types. An element can lose focus via keyboard commands, such as the Tab key, or by mouse clicks elsewhere on the page.</source>
          <target state="translated">当 &lt;code&gt;blur&lt;/code&gt; 事件失去焦点时，会将其发送到元素。最初，此事件仅适用于表单元素，例如 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 。在最近的浏览器中，事件的域已扩展为包括所有元素类型。元素可以通过键盘命令（例如Tab键）或单击页面其他位置的鼠标来失去焦点。</target>
        </trans-unit>
        <trans-unit id="96e3d342f9e34d87560a2e848d913dcdb9acca7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;change&lt;/code&gt; event is sent to an element when its value changes. This event is limited to &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; boxes and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements. For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types the event is deferred until the element loses focus.</source>
          <target state="translated">的 &lt;code&gt;change&lt;/code&gt; 时，它的值改变事件发送给一个元素。此事件仅限于 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素， &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 框和 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素。对于选择框，复选框和单选按钮，当用户使用鼠标进行选择时会立即触发该事件，但是对于其他元素类型，该事件将推迟到该元素失去焦点之前。</target>
        </trans-unit>
        <trans-unit id="f256e3f7b3303084dd382deff803de56cd554cfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;click&lt;/code&gt; event is only triggered after this exact series of events:</source>
          <target state="translated">在 &lt;code&gt;click&lt;/code&gt; 事件不仅是这个确切的一系列事件后触发：</target>
        </trans-unit>
        <trans-unit id="86f9be7a8b000b85c91775d5ddce88ef554fea7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option can contain either a query string of the form &lt;code&gt;key1=value1&amp;amp;key2=value2&lt;/code&gt;, or an object of the form &lt;code&gt;{key1: 'value1', key2: 'value2'}&lt;/code&gt;. If the latter form is used, the data is converted into a query string using &lt;code&gt;&lt;a href=&quot;jquery.param&quot;&gt;jQuery.param()&lt;/a&gt;&lt;/code&gt; before it is sent. This processing can be circumvented by setting &lt;code&gt;processData&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the &lt;code&gt;contentType&lt;/code&gt; option from &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; to a more appropriate MIME type.</source>
          <target state="translated">该 &lt;code&gt;data&lt;/code&gt; 选项可以包含下列形式的查询字符串 &lt;code&gt;key1=value1&amp;amp;key2=value2&lt;/code&gt; ，或形式的一个目的 &lt;code&gt;{key1: 'value1', key2: 'value2'}&lt;/code&gt; 。如果使用后一种形式，则在发送数据之前，将使用 &lt;code&gt;&lt;a href=&quot;jquery.param&quot;&gt;jQuery.param()&lt;/a&gt;&lt;/code&gt; 将数据转换为查询字符串。可以通过将 &lt;code&gt;processData&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 来避免此处理。如果希望将XML对象发送到服务器，则处理可能是不希望的。在这种情况下，请将 &lt;code&gt;contentType&lt;/code&gt; 选项从 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 更改为更合适的MIME类型。</target>
        </trans-unit>
        <trans-unit id="a45ea61e4be6c2fa09624cd140b6a4afcfcdff80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dblclick&lt;/code&gt; event is only triggered after this exact series of events:</source>
          <target state="translated">该 &lt;code&gt;dblclick&lt;/code&gt; 事件不仅是这个确切的一系列事件后触发：</target>
        </trans-unit>
        <trans-unit id="11ae013fda7979634bb7b5a9d1a1604d6bed835c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.done()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since &lt;code&gt;deferred.done()&lt;/code&gt; returns the deferred object, other methods of the deferred object can be chained to this one, including additional &lt;code&gt;.done()&lt;/code&gt; methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;resolveWith&lt;/code&gt;&lt;/a&gt; method call in the order they were added. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;deferred.done()&lt;/code&gt; 方法接受一个或多个参数，所有这些都可以是单功能或功能的阵列。推迟解决后，将调用doneCallbacks。回调按添加顺序执行。由于 &lt;code&gt;deferred.done()&lt;/code&gt; 返回延迟的对象，因此可以将延迟对象的其他方法链接到该对象，包括其他 &lt;code&gt;.done()&lt;/code&gt; 方法。解析Deferred后，将使用为&lt;a href=&quot;deferred.resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;deferred.resolvewith&quot;&gt; &lt;code&gt;resolveWith&lt;/code&gt; &lt;/a&gt;方法调用提供的参数按添加的顺序执行doneCallbacks。有关更多信息，请参见&lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="bda5172606f19b9b736efbd893772823314bb31d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.fail()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since &lt;code&gt;deferred.fail()&lt;/code&gt; returns the deferred object, other methods of the deferred object can be chained to this one, including additional &lt;code&gt;deferred.fail()&lt;/code&gt; methods. The failCallbacks are executed using the arguments provided to the &lt;a href=&quot;deferred.reject&quot;&gt;&lt;code&gt;deferred.reject()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;deferred.rejectWith()&lt;/code&gt;&lt;/a&gt; method call in the order they were added. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;deferred.fail()&lt;/code&gt; 方法接受一个或多个参数，所有这些都可以是单功能或功能的阵列。当Deferred被拒绝时，将调用failCallbacks。回调按添加顺序执行。由于 &lt;code&gt;deferred.fail()&lt;/code&gt; 返回延迟的对象，因此可以将延迟对象的其他方法链接到该对象，包括其他 &lt;code&gt;deferred.fail()&lt;/code&gt; 方法。使用提供给&lt;a href=&quot;deferred.reject&quot;&gt; &lt;code&gt;deferred.reject()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;deferred.rejectwith&quot;&gt; &lt;code&gt;deferred.rejectWith()&lt;/code&gt; &lt;/a&gt;方法调用的参数按添加顺序执行failCallbacks 。有关更多信息，请参见&lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="00213c3f3db0a9c85f8d3be62e0af641fa058062" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.pipe()&lt;/code&gt; method returns a new promise that filters the status and values of a deferred through a function. The &lt;code&gt;doneFilter&lt;/code&gt; and &lt;code&gt;failFilter&lt;/code&gt; functions filter the original deferred's resolved / rejected status and values. &lt;strong&gt;As of jQuery 1.7&lt;/strong&gt;, the method also accepts a &lt;code&gt;progressFilter&lt;/code&gt; function to filter any calls to the original deferred's &lt;code&gt;notify&lt;/code&gt; or &lt;code&gt;notifyWith&lt;/code&gt; methods. These filter functions can return a new value to be passed along to the piped promise's &lt;code&gt;done()&lt;/code&gt; or &lt;code&gt;fail()&lt;/code&gt; callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is &lt;code&gt;null&lt;/code&gt;, or not specified, the piped promise will be resolved or rejected with the same values as the original.</source>
          <target state="translated">该 &lt;code&gt;deferred.pipe()&lt;/code&gt; 方法返回一个新的承诺，过滤状态和的值通过函数推迟。该 &lt;code&gt;doneFilter&lt;/code&gt; 和 &lt;code&gt;failFilter&lt;/code&gt; 功能过滤原始推迟的解决/拒绝的状态和值。&lt;strong&gt;从jQuery 1.7开始&lt;/strong&gt;，该方法还接受 &lt;code&gt;progressFilter&lt;/code&gt; 函数来过滤对原始延迟的 &lt;code&gt;notify&lt;/code&gt; 或 &lt;code&gt;notifyWith&lt;/code&gt; 方法的所有调用。这些过滤器函数可以返回一个新值，以传递给管道承诺的 &lt;code&gt;done()&lt;/code&gt; 或 &lt;code&gt;fail()&lt;/code&gt; 回调，或者它们可以返回另一个可观察的对象（Deferred，Promise等），该对象将其已解析/拒绝的状态和值传递给管道承诺的回调。如果使用的过滤器函数为 &lt;code&gt;null&lt;/code&gt; 或未指定，则将使用与原始值相同的值来解析或拒绝管道承诺。</target>
        </trans-unit>
        <trans-unit id="5f826199bcf49ca10b7a337c0b395fa9f9f67956" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.progress()&lt;/code&gt; method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred generates progress notifications by calling &lt;code&gt;notify&lt;/code&gt; or &lt;code&gt;notifyWith&lt;/code&gt;, the &lt;code&gt;progressCallbacks&lt;/code&gt; are called. Since &lt;code&gt;deferred.progress()&lt;/code&gt; returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called, with the exception that any &lt;code&gt;progressCallbacks&lt;/code&gt; added after the Deferred enters the resolved or rejected state are executed immediately when they are added, using the arguments that were passed to the &lt;code&gt;.notify()&lt;/code&gt; or &lt;code&gt;notifyWith()&lt;/code&gt; call. For more information, see the documentation for &lt;a href=&quot;jquery.deferred&quot;&gt;jQuery.Deferred()&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;deferred.progress()&lt;/code&gt; 方法接受一个或多个参数，所有这些都可以是单功能或功能的阵列。当通过调用递延生成进度通知的 &lt;code&gt;notify&lt;/code&gt; 或 &lt;code&gt;notifyWith&lt;/code&gt; ，该 &lt;code&gt;progressCallbacks&lt;/code&gt; 被调用。由于 &lt;code&gt;deferred.progress()&lt;/code&gt; 返回Deferred对象，因此可以将Deferred对象的其他方法链接到该对象。解析或拒绝Deferred后，将不再调用进度回调，但在Deferred进入已解析或拒绝状态后添加的任何 &lt;code&gt;progressCallbacks&lt;/code&gt; 都会在添加时立即使用传递给 &lt;code&gt;.notify()&lt;/code&gt; 的参数执行。 （）或 &lt;code&gt;notifyWith()&lt;/code&gt; 调用。有关更多信息，请参见&lt;a href=&quot;jquery.deferred&quot;&gt;jQuery.Deferred（）&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="797e3639f7aa73f48cd934bfb5beac1e7f53211a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deferred.promise()&lt;/code&gt; method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (&lt;code&gt;then&lt;/code&gt;, &lt;code&gt;done&lt;/code&gt;, &lt;code&gt;fail&lt;/code&gt;, &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;pipe&lt;/code&gt;, &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;promise&lt;/code&gt;), but not ones that change the state (&lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;notify&lt;/code&gt;, &lt;code&gt;resolveWith&lt;/code&gt;, &lt;code&gt;rejectWith&lt;/code&gt;, and &lt;code&gt;notifyWith&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;deferred.promise()&lt;/code&gt; 方法允许异步函数，以防止其他代码从与它的内部请求的进度或状态的干扰。无极公开只有附加其他处理或确定的状态（需要的递延方式 &lt;code&gt;then&lt;/code&gt; ， &lt;code&gt;done&lt;/code&gt; ， &lt;code&gt;fail&lt;/code&gt; ， &lt;code&gt;always&lt;/code&gt; ， &lt;code&gt;pipe&lt;/code&gt; ， &lt;code&gt;progress&lt;/code&gt; ， &lt;code&gt;state&lt;/code&gt; 和 &lt;code&gt;promise&lt;/code&gt; ），但不是那些改变状态（ &lt;code&gt;resolve&lt;/code&gt; ， &lt;code&gt;reject&lt;/code&gt; ， &lt;code&gt;notify&lt;/code&gt; ， &lt;code&gt;resolveWith&lt;/code&gt; ， &lt;code&gt;rejectWith&lt;/code&gt; 和 &lt;code&gt;notifyWith&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7aada72a5a29999d21c048cef40f1e43a1a9a189" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;end()&lt;/code&gt; method is useful primarily when exploiting jQuery's chaining properties. When not using chaining, we can usually just call up a previous object by variable name, so we don't need to manipulate the stack. With &lt;code&gt;end()&lt;/code&gt;, though, we can string all the method calls together:</source>
          <target state="translated">所述 &lt;code&gt;end()&lt;/code&gt; 方法利用jQuery的链接性能主要时非常有用。当不使用链接时，我们通常可以通过变量名来调用先前的对象，因此我们不需要操纵堆栈。但是，使用 &lt;code&gt;end()&lt;/code&gt; ，我们可以将所有方法调用串在一起：</target>
        </trans-unit>
        <trans-unit id="c74954130e96878d0570d2001ccdea54fe745acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; event is sent to elements, such as images, that are referenced by a document and loaded by the browser. It is called if the element was not loaded correctly.</source>
          <target state="translated">的 &lt;code&gt;error&lt;/code&gt; 事件被发送到的元素，例如图像，由一个文档引用并由浏览器加载。如果元素未正确加载，则调用该方法。</target>
        </trans-unit>
        <trans-unit id="4de04198e0282785992a572f3b0294e98a6eb007" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; event on the &lt;code&gt;window&lt;/code&gt; object uses nonstandard arguments and return value conventions, so it is not supported by jQuery. Instead, assign a handler function directly to the &lt;code&gt;window.onerror&lt;/code&gt; property.</source>
          <target state="translated">该 &lt;code&gt;error&lt;/code&gt; 的事件 &lt;code&gt;window&lt;/code&gt; 对象使用非标准的参数和返回值约定，所以它不被jQuery的支持。而是直接将处理程序函数分配给 &lt;code&gt;window.onerror&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="41a15e6d0c25cd827f5df958e1162a9271cec778" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;event.which&lt;/code&gt; property normalizes &lt;code&gt;event.keyCode&lt;/code&gt; and &lt;code&gt;event.charCode&lt;/code&gt;. It is recommended to watch &lt;code&gt;event.which&lt;/code&gt; for keyboard key input. For more detail, read about &lt;a href=&quot;https://developer.mozilla.org/en/DOM/event.charCode#Notes&quot;&gt;event.charCode on the MDN&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;event.which&lt;/code&gt; 财产归 &lt;code&gt;event.keyCode&lt;/code&gt; 和 &lt;code&gt;event.charCode&lt;/code&gt; 。建议观看 &lt;code&gt;event.which&lt;/code&gt; 用于键盘键输入。有关更多详细信息，请参阅&lt;a href=&quot;https://developer.mozilla.org/en/DOM/event.charCode#Notes&quot;&gt;MDN上的event.charCode&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f120b8a959a3219847450a8ee53b66f4187d6db0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; argument can either be a space-separated list of event type names and optional namespaces, or an object of event name strings and handlers. The &lt;code&gt;data&lt;/code&gt; argument is optional and can be omitted. For example, the following three method calls are functionally equivalent (but see below for more effective and performant ways to attach delegated event handlers):</source>
          <target state="translated">该 &lt;code&gt;events&lt;/code&gt; 的参数可以是事件类型名称和可选的命名空间或事件名称字符串和处理的对象的空格分隔的列表。该 &lt;code&gt;data&lt;/code&gt; 参数是可选的并且可以省略。例如，以下三个方法调用在功能上是等效的（但请参见下文，以了解连接委托事件处理程序的更有效和高效的方法）：</target>
        </trans-unit>
        <trans-unit id="975ef46efd18ee6d2e52c114a4f50c14f32efd22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is an optional argument to &lt;code&gt;$.Callbacks()&lt;/code&gt;, structured as a list of space-separated strings that change how the callback list behaves (eg. &lt;code&gt;$.Callbacks( &quot;unique stopOnFalse&quot; )&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;flags&lt;/code&gt; 参数是一个可选的参数 &lt;code&gt;$.Callbacks()&lt;/code&gt; ，结构为空间分隔的字符串列表，变化如何回调列表中的行为（如 &lt;code&gt;$.Callbacks( &quot;unique stopOnFalse&quot; )&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3b181f01d34d240ec62554a3ea8b0f44ba029e93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; events are specified by the W3C to not bubble, but jQuery defines cross-browser &lt;code&gt;focusin&lt;/code&gt; and &lt;code&gt;focusout&lt;/code&gt; events that do bubble. When &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; are used to attach delegated event handlers, jQuery maps the names and delivers them as &lt;code&gt;focusin&lt;/code&gt; and &lt;code&gt;focusout&lt;/code&gt; respectively. For consistency and clarity, use the bubbling event type names.</source>
          <target state="translated">W3C 将 &lt;code&gt;focus&lt;/code&gt; 和 &lt;code&gt;blur&lt;/code&gt; 事件指定为不会冒泡，但是jQuery定义了跨浏览器的 &lt;code&gt;focusin&lt;/code&gt; 和 &lt;code&gt;focusout&lt;/code&gt; 事件，它们确实会冒泡。当使用 &lt;code&gt;focus&lt;/code&gt; 和 &lt;code&gt;blur&lt;/code&gt; 附加委托的事件处理程序时，jQuery会映射名称并将它们分别作为 &lt;code&gt;focusin&lt;/code&gt; 和 &lt;code&gt;focusout&lt;/code&gt; 传递。为了保持一致和清晰，请使用冒泡事件类型名称。</target>
        </trans-unit>
        <trans-unit id="d12d3d94af57d7b957f2a43b6a6ef3e7b3826720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the &lt;code&gt;focus&lt;/code&gt; event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping &lt;code&gt;focus&lt;/code&gt; to the &lt;code&gt;focusin&lt;/code&gt; event in its event delegation methods, &lt;a href=&quot;live&quot;&gt;&lt;code&gt;.live()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;focus&lt;/code&gt; 事件不会冒泡在Internet Explorer中。因此，依赖事件委托和 &lt;code&gt;focus&lt;/code&gt; 事件的脚本将无法在所有浏览器中一致地工作。但是，从1.4.2版开始，jQuery通过将 &lt;code&gt;focus&lt;/code&gt; 映射到其事件委托方法&lt;a href=&quot;live&quot;&gt; &lt;code&gt;.live()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; 中&lt;/a&gt;的 &lt;code&gt;focusin&lt;/code&gt; 事件来解决此限制。</target>
        </trans-unit>
        <trans-unit id="dc328d40a9d1978cbe1cf3f383e8ff007361446e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focus&lt;/code&gt; event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as form elements (&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, etc.) and links (&lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt;). In recent browser versions, the event can be extended to include all element types by explicitly setting the element's &lt;code&gt;tabindex&lt;/code&gt; property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.</source>
          <target state="translated">将 &lt;code&gt;focus&lt;/code&gt; 在它获得焦点事件被发送到一个元素。此事件隐式适用于有限的一组元素，例如表单元素（ &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 等）和链接（ &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; ）。在最新的浏览器版本中，可以通过显式设置元素的 &lt;code&gt;tabindex&lt;/code&gt; 属性将事件扩展为包括所有元素类型。元素可以通过键盘命令（例如Tab键）或通过单击元素来获得焦点。</target>
        </trans-unit>
        <trans-unit id="ce407117100e5ba30e2542a045398a2d4fbe17b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focusin&lt;/code&gt; event is sent to an element when it, or any element inside of it, gains focus. This is distinct from the &lt;a href=&quot;focus&quot;&gt;focus&lt;/a&gt; event in that it supports detecting the focus event on parent elements (in other words, it supports event bubbling).</source>
          <target state="translated">当 &lt;code&gt;focusin&lt;/code&gt; 事件或其中的任何元素获得焦点时，会将focusin事件发送到该元素。这与&lt;a href=&quot;focus&quot;&gt;焦点&lt;/a&gt;事件不同，因为它支持检测父元素上的焦点事件（换句话说，它支持事件冒泡）。</target>
        </trans-unit>
        <trans-unit id="5ce041c1230d97a8531ab94f0775a4789a0e64f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;focusout&lt;/code&gt; event is sent to an element when it, or any element inside of it, loses focus. This is distinct from the &lt;a href=&quot;blur&quot;&gt;blur&lt;/a&gt; event in that it supports detecting the loss of focus on descendant elements (in other words, it supports event bubbling).</source>
          <target state="translated">当 &lt;code&gt;focusout&lt;/code&gt; 事件或其中的任何元素失去焦点时，会将聚焦事件发送到该元素。这与&lt;a href=&quot;blur&quot;&gt;模糊&lt;/a&gt;事件不同，因为它支持检测对后代元素的焦点丢失（换句话说，它支持事件冒泡）。</target>
        </trans-unit>
        <trans-unit id="ce50aa35bcab51ace26d4577f16d8f766ee983d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; option prevents handlers registered using &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ajaxerror&quot;&gt;.ajaxError()&lt;/a&gt;&lt;/code&gt;, and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt; if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to &lt;code&gt;false&lt;/code&gt;. See the descriptions of these methods below for more details.</source>
          <target state="translated">在 &lt;code&gt;global&lt;/code&gt; 使用的注册选项可防止处理 &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;ajaxerror&quot;&gt;.ajaxError()&lt;/a&gt;&lt;/code&gt; ，和类似的方法，从射击时，该请求将触发它们。例如，如果请求频繁且简短，这对于抑制使用 &lt;code&gt;&lt;a href=&quot;ajaxsend&quot;&gt;.ajaxSend()&lt;/a&gt;&lt;/code&gt; 实现的加载指示符可能很有用。对于跨域脚本和JSONP请求，global选项将自动设置为 &lt;code&gt;false&lt;/code&gt; 。有关更多详细信息，请参见下面这些方法的描述。</target>
        </trans-unit>
        <trans-unit id="abcc994cdebafa6dd62c6557f6c92b4296d2b215" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; argument is a function (or the value &lt;code&gt;false&lt;/code&gt;, see below), and is required unless you pass an object for the &lt;code&gt;events&lt;/code&gt; argument. You can provide an anonymous handler function at the point of the &lt;code&gt;.on()&lt;/code&gt; call, as the examples have done above, or declare a named function and pass its name:</source>
          <target state="translated">该 &lt;code&gt;handler&lt;/code&gt; 参数是一个函数（或价值 &lt;code&gt;false&lt;/code&gt; ，见下文），除非你传递一个对象的需要 &lt;code&gt;events&lt;/code&gt; 的说法。您可以在 &lt;code&gt;.on()&lt;/code&gt; 调用时提供一个匿名处理函数，如上面的示例所示，或者声明一个命名函数并传递其名称：</target>
        </trans-unit>
        <trans-unit id="b2e0e1d782c5ee3726542833629d15debaa0990f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; callback function can also take parameters. When the function is called, the event object will be passed to the first parameter.</source>
          <target state="translated">该 &lt;code&gt;handler&lt;/code&gt; 回调函数也可以带参数。调用函数时，事件对象将传递给第一个参数。</target>
        </trans-unit>
        <trans-unit id="aebaa4915cec07238cc3400080215cbb6913448d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler&lt;/code&gt; parameter takes a callback function, as shown above. Within the handler, the keyword &lt;code&gt;this&lt;/code&gt; refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal &lt;code&gt;$()&lt;/code&gt; function. For example:</source>
          <target state="translated">该 &lt;code&gt;handler&lt;/code&gt; 参数采用回调函数，如上所示。在处理程序中，关键字 &lt;code&gt;this&lt;/code&gt; 指向处理程序绑定到的DOM元素。要使用jQuery中的元素，可以将其传递给常规的 &lt;code&gt;$()&lt;/code&gt; 函数。例如：</target>
        </trans-unit>
        <trans-unit id="665f1a800666ebe5c19cf6aa8ac859d59065c260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Callbacks()&lt;/code&gt; function, introduced in version 1.7, returns a multi-purpose object that provides a powerful way to manage callback lists. It supports adding, removing, firing, and disabling callbacks.</source>
          <target state="translated">1.7版中引入的 &lt;code&gt;jQuery.Callbacks()&lt;/code&gt; 函数返回一个多用途对象，该对象提供了一种管理回调列表的强大方法。它支持添加，删除，触发和禁用回调。</target>
        </trans-unit>
        <trans-unit id="8185fa0ab452f17f753c1df65484ea8db044e929" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Deferred()&lt;/code&gt; factory creates a new &lt;code&gt;deferred&lt;/code&gt; object.</source>
          <target state="translated">该 &lt;code&gt;jQuery.Deferred()&lt;/code&gt; 工厂创建一个新的 &lt;code&gt;deferred&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="604bbb8f562ce63abc8a4a830e579583ea19fc8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Deferred&lt;/code&gt; method can be passed an optional function, which is called just before the method returns and is passed the new &lt;code&gt;deferred&lt;/code&gt; object as both the &lt;code&gt;this&lt;/code&gt; object and as the first argument to the function. The called function can attach callbacks using &lt;a href=&quot;deferred.then&quot;&gt;&lt;code&gt;deferred.then()&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="translated">该 &lt;code&gt;jQuery.Deferred&lt;/code&gt; 方法可以传递一个可选的功能，这是刚刚在方法返回之前调用，并通过了新的 &lt;code&gt;deferred&lt;/code&gt; 对象同时作为 &lt;code&gt;this&lt;/code&gt; 对象，并作为第一个参数的函数。例如，被调用函数可以使用&lt;a href=&quot;deferred.then&quot;&gt; &lt;code&gt;deferred.then()&lt;/code&gt; &lt;/a&gt;附加回调。</target>
        </trans-unit>
        <trans-unit id="24b6745cb85fcef2edb81c76d1dd1ad2e0bd4c9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.Event&lt;/code&gt; constructor is exposed and can be used when calling &lt;a href=&quot;../../trigger&quot;&gt;trigger&lt;/a&gt;. The &lt;code&gt;new&lt;/code&gt; operator is optional.</source>
          <target state="translated">该 &lt;code&gt;jQuery.Event&lt;/code&gt; 构造暴露，并且可以调用时可以使用&lt;a href=&quot;../../trigger&quot;&gt;触发器&lt;/a&gt;。在 &lt;code&gt;new&lt;/code&gt; 运营商是可选的。</target>
        </trans-unit>
        <trans-unit id="13d3ca3d9389710007ac5e28b23209bd2827c184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore free from memory leaks. jQuery ensures that the data is removed when DOM elements are removed via jQuery methods, and when the user leaves the page. We can set several distinct values for a single element and retrieve them later:</source>
          <target state="translated">所述 &lt;code&gt;jQuery.data()&lt;/code&gt; 方法允许我们任何类型的DOM元素的数据附加的方式，是从循环引用安全并因此从存储器泄漏免费。jQuery确保在通过jQuery方法删除DOM元素时以及用户离开页面时删除数据。我们可以为单个元素设置几个不同的值，并在以后检索它们：</target>
        </trans-unit>
        <trans-unit id="e3168126bd9faa615301fd22885baff874f9cdaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.data()&lt;/code&gt; method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</source>
          <target state="translated">所述 &lt;code&gt;jQuery.data()&lt;/code&gt; 方法允许我们任何类型的DOM元素的数据附加的方式，是从循环引用安全并因此从存储器泄漏。我们可以一次或作为一组检索单个元素的多个不同值：</target>
        </trans-unit>
        <trans-unit id="b58ce5b2421f175cccfc55bc89b8f9326b398cd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.fn.extend()&lt;/code&gt; method extends the jQuery prototype (&lt;code&gt;$.fn&lt;/code&gt;) object to provide new methods that can be chained to the &lt;code&gt;jQuery()&lt;/code&gt; function.</source>
          <target state="translated">在 &lt;code&gt;jQuery.fn.extend()&lt;/code&gt; 方法扩展了jQuery的原型（ &lt;code&gt;$.fn&lt;/code&gt; ）目的在于提供一种可以链接到新的方法 &lt;code&gt;jQuery()&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="60e2c149d29e3c58427eec1ddf67ea5a978e0da6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.hasData()&lt;/code&gt; method provides a way to determine if an element currently has any values that were set using &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt;. If there is no data object associated with an element, the method returns &lt;code&gt;false&lt;/code&gt;; otherwise it returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;jQuery.hasData()&lt;/code&gt; 方法提供了一种方法，以确定是否一个元素目前具有使用设置的任何值 &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt; 。如果没有与元素关联的数据对象，则该方法返回 &lt;code&gt;false&lt;/code&gt; ；否则返回false。否则返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0da77c2aa73568361092bac2691ed27915c57df8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.queue()&lt;/code&gt; method allows us to directly manipulate this queue of functions. Calling &lt;code&gt;jQuery.queue()&lt;/code&gt; with a callback is particularly useful; it allows us to place a new function at the end of the queue.</source>
          <target state="translated">所述 &lt;code&gt;jQuery.queue()&lt;/code&gt; 方法允许我们直接操纵的功能此队列。用回调调用 &lt;code&gt;jQuery.queue()&lt;/code&gt; 尤其有用。它允许我们在队列末尾放置一个新函数。</target>
        </trans-unit>
        <trans-unit id="565a34b4e9f84c0d318e6c4a9c06da64b809bbb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jQuery.removeData()&lt;/code&gt; method allows us to remove values that were previously set using &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt;. When called with the name of a key, &lt;code&gt;jQuery.removeData()&lt;/code&gt; deletes that particular value; when called with no arguments, all values are removed.</source>
          <target state="translated">所述 &lt;code&gt;jQuery.removeData()&lt;/code&gt; 方法允许我们以除去使用之前设置的值 &lt;code&gt;&lt;a href=&quot;jquery.data&quot;&gt;jQuery.data()&lt;/a&gt;&lt;/code&gt; 。当使用键名调用时， &lt;code&gt;jQuery.removeData()&lt;/code&gt; 删除该特定值；不带参数调用时，所有值都将被删除。</target>
        </trans-unit>
        <trans-unit id="1e7bc28f086c399e4c9e321c7a440e482efc3b82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jqXHR.success()&lt;/code&gt;, &lt;code&gt;jqXHR.error()&lt;/code&gt;, and &lt;code&gt;jqXHR.complete()&lt;/code&gt; callback methods are &lt;strong&gt;removed as of jQuery 3.0&lt;/strong&gt;. You can use &lt;code&gt;jqXHR.done()&lt;/code&gt;, &lt;code&gt;jqXHR.fail()&lt;/code&gt;, and &lt;code&gt;jqXHR.always()&lt;/code&gt; instead.</source>
          <target state="translated">从&lt;strong&gt;jQuery 3.0开始，删除了&lt;/strong&gt; &lt;code&gt;jqXHR.success()&lt;/code&gt; ， &lt;code&gt;jqXHR.error()&lt;/code&gt; 和 &lt;code&gt;jqXHR.complete()&lt;/code&gt; 回调方法。您可以使用 &lt;code&gt;jqXHR.done()&lt;/code&gt; ， &lt;code&gt;jqXHR.fail()&lt;/code&gt; 和 &lt;code&gt;jqXHR.always()&lt;/code&gt; 代替。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f92be4fe000ad94fa5b76d5ae4cbd149a16e9eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keydown&lt;/code&gt; event is sent to an element when the user presses a key on the keyboard. If the key is kept pressed, the event is sent every time the operating system repeats the key. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</source>
          <target state="translated">所述 &lt;code&gt;keydown&lt;/code&gt; 当用户按下键盘上的键事件被发送给一个元素。如果按住该键，则每次操作系统重复该键时都会发送该事件。它可以附加到任何元素，但是事件仅发送到具有焦点的元素。在浏览器之间，可聚焦元素可以有所不同，但是表单元素始终可以获得焦点，因此是此事件类型的合理候选对象。</target>
        </trans-unit>
        <trans-unit id="32ff7dffe7efbc0b47c01cc769130f1179525ab3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keypress&lt;/code&gt; event is sent to an element when the browser registers keyboard input. This is similar to the &lt;code&gt;keydown&lt;/code&gt; event, except that modifier and non-printing keys such as</source>
          <target state="translated">的 &lt;code&gt;keypress&lt;/code&gt; 事件被发送到当浏览器登记键盘输入的元件。这类似于 &lt;code&gt;keydown&lt;/code&gt; 事件，不同之处在于修饰键和非打印键（例如</target>
        </trans-unit>
        <trans-unit id="ff2403eb27d497bc275c8f7c7d1d0a83914e9d14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keyup&lt;/code&gt; event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</source>
          <target state="translated">所述 &lt;code&gt;keyup&lt;/code&gt; 事件被发送到当用户释放键盘上的一个键的元素。它可以附加到任何元素，但是事件仅发送到具有焦点的元素。在浏览器之间，可聚焦元素可以有所不同，但是表单元素始终可以获得焦点，因此是此事件类型的合理候选对象。</target>
        </trans-unit>
        <trans-unit id="1ce285026d9f78e3b806cc2e447eb91d6f20c3e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;load&lt;/code&gt; event is sent to an element when it and all sub-elements have been completely loaded. This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="translated">当 &lt;code&gt;load&lt;/code&gt; 事件和所有子元素都已完全加载时，会将加载事件发送到该元素。可以将此事件发送到与URL关联的任何元素：图像，脚本，框架，iframe和 &lt;code&gt;window&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="298347bd7f87fce8c617d4517cfd4c5ce65d731f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousedown&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.</source>
          <target state="translated">的 &lt;code&gt;mousedown&lt;/code&gt; 事件被发送到一个元件，当鼠标指针在元件，和鼠标按钮被按下。任何HTML元素都可以接收此事件。</target>
        </trans-unit>
        <trans-unit id="1b9c501cecef8d644812a3b72346bce59b94d9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousedown&lt;/code&gt; event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object's &lt;code&gt;which&lt;/code&gt; property. Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of &lt;code&gt;which&lt;/code&gt; will be 1 for the left button, 2 for the middle button, or 3 for the right button.</source>
          <target state="translated">该 &lt;code&gt;mousedown&lt;/code&gt; 单击任意鼠标按钮时发送的事件。要仅对特定按钮执行操作，我们可以使用事件对象的 &lt;code&gt;which&lt;/code&gt; 属性。并非所有浏览器都支持此属性（Internet Explorer改为使用按钮），但是jQuery规范化了该属性，以便可以在任何浏览器中安全使用。的值 &lt;code&gt;which&lt;/code&gt; 将是右按钮1左按钮，2中间的按钮，或3。</target>
        </trans-unit>
        <trans-unit id="b37761ced6fd4810808c7ebb873311465526bbbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseenter&lt;/code&gt; JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</source>
          <target state="translated">该 &lt;code&gt;mouseenter&lt;/code&gt; JavaScript事件是专有到Internet Explorer。由于该事件具有通用功能，因此jQuery会模拟此事件，以便无论浏览器如何都可以使用它。当鼠标指针进入元素时，此事件发送到元素。任何HTML元素都可以接收此事件。</target>
        </trans-unit>
        <trans-unit id="b1c57d8a811fc1f9c33a1dffeaf841a6e2c80c74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseenter&lt;/code&gt; event differs from &lt;code&gt;mouseover&lt;/code&gt; in the way it handles event bubbling. If &lt;code&gt;mouseover&lt;/code&gt; were used in this example, then when the mouse pointer moved over the</source>
          <target state="translated">该 &lt;code&gt;mouseenter&lt;/code&gt; 事件不同于 &lt;code&gt;mouseover&lt;/code&gt; 在它的方式处理事件冒泡。如果在此示例中使用 &lt;code&gt;mouseover&lt;/code&gt; ，则当鼠标指针移到</target>
        </trans-unit>
        <trans-unit id="0e998fa63a6373ae919ad037b49d4f728dd6bf05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseleave&lt;/code&gt; JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</source>
          <target state="translated">该 &lt;code&gt;mouseleave&lt;/code&gt; JavaScript事件是专有到Internet Explorer。由于该事件具有通用功能，因此jQuery会模拟此事件，以便无论浏览器如何都可以使用它。当鼠标指针离开元素时，此事件发送到元素。任何HTML元素都可以接收此事件。</target>
        </trans-unit>
        <trans-unit id="b8164273b96e3740f431d9d5f3df765b4ec5c68f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseleave&lt;/code&gt; event differs from &lt;code&gt;mouseout&lt;/code&gt; in the way it handles event bubbling. If &lt;code&gt;mouseout&lt;/code&gt; were used in this example, then when the mouse pointer moved out of the</source>
          <target state="translated">该 &lt;code&gt;mouseleave&lt;/code&gt; 事件不同于 &lt;code&gt;mouseout&lt;/code&gt; 它的方式处理事件冒泡。如果在此示例中使用 &lt;code&gt;mouseout&lt;/code&gt; ，则当鼠标指针移出</target>
        </trans-unit>
        <trans-unit id="c983abec8d4a818cd465daf3f2d4afd6e71c9966" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mousemove&lt;/code&gt; event is sent to an element when the mouse pointer moves inside the element. Any HTML element can receive this event.</source>
          <target state="translated">的 &lt;code&gt;mousemove&lt;/code&gt; 事件被发送到一个元件时，元件内部的鼠标指针移动。任何HTML元素都可以接收此事件。</target>
        </trans-unit>
        <trans-unit id="e082ba9c1250e9f802e30f0ec6097895f8b88e93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseout&lt;/code&gt; event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</source>
          <target state="translated">该 &lt;code&gt;mouseout&lt;/code&gt; 当鼠标指针离开元素事件被发送给一个元素。任何HTML元素都可以接收此事件。</target>
        </trans-unit>
        <trans-unit id="9106e2ddd472a53e0cf775e02b396b8ff0b95fa8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseover&lt;/code&gt; event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</source>
          <target state="translated">的 &lt;code&gt;mouseover&lt;/code&gt; 在鼠标指针进入元素事件被发送给一个元素。任何HTML元素都可以接收此事件。</target>
        </trans-unit>
        <trans-unit id="3e153372308071c715ee065406cb301d099f4f6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mouseup&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.</source>
          <target state="translated">该 &lt;code&gt;mouseup&lt;/code&gt; 事件被发送到一个元件，当鼠标指针在元件和释放鼠标按钮。任何HTML元素都可以接收此事件。</target>
        </trans-unit>
        <trans-unit id="26532a19220a35f1ea5c85fbd74d757625d7aed7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;null&lt;/code&gt; keyword is a JavaScript literal that is commonly used to express the absence of an intentional value.</source>
          <target state="translated">的 &lt;code&gt;null&lt;/code&gt; 关键字是JavaScript字面是通常用来表示不存在故意值。</target>
        </trans-unit>
        <trans-unit id="392d2c36d94605ced68188b8ac59e9e5f6c1f8ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opacity&lt;/code&gt; of the image is already at its target value, so this property is not animated by the second click. Since the target value for &lt;code&gt;left&lt;/code&gt; is a relative value, the image moves even farther to the right during this second animation.</source>
          <target state="translated">图像的 &lt;code&gt;opacity&lt;/code&gt; 已经达到其目标值，因此第二次单击不会为该属性设置动画。由于 &lt;code&gt;left&lt;/code&gt; 的目标值是相对值，因此在第二次动画期间图像会向右移动得更远。</target>
        </trans-unit>
        <trans-unit id="7bb964c5f56361acfa5ea28adb7c907dbc7f1504" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resize&lt;/code&gt; event is sent to the &lt;code&gt;window&lt;/code&gt; element when the size of the browser window changes:</source>
          <target state="translated">该 &lt;code&gt;resize&lt;/code&gt; 事件发送到 &lt;code&gt;window&lt;/code&gt; 时，浏览器窗口大小的变化元素：</target>
        </trans-unit>
        <trans-unit id="bffc347e3cd115a86996e548a12634ae46a7dcc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scriptCharset&lt;/code&gt; allows the character set to be explicitly specified for requests that use a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag (that is, a type of &lt;code&gt;script&lt;/code&gt; or &lt;code&gt;jsonp&lt;/code&gt;). This is useful if the script and host page have differing character sets.</source>
          <target state="translated">所述 &lt;code&gt;scriptCharset&lt;/code&gt; 允许对于使用请求显式地指定的字符集 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记（即，一种类型的 &lt;code&gt;script&lt;/code&gt; 或 &lt;code&gt;jsonp&lt;/code&gt; ）。如果脚本和宿主页面具有不同的字符集，这将很有用。</target>
        </trans-unit>
        <trans-unit id="d9ccb6b9fab4201ed4391a6f6c072bb61ffc6663" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scroll&lt;/code&gt; event handler can be bound to this element:</source>
          <target state="translated">该 &lt;code&gt;scroll&lt;/code&gt; 事件处理程序可以绑定到这个元素：</target>
        </trans-unit>
        <trans-unit id="929f11cae458a443ec78fc803403671cdd96dc1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scroll&lt;/code&gt; event is sent to an element when the user scrolls to a different place in the element. It applies to &lt;code&gt;window&lt;/code&gt; objects, but also to scrollable frames and elements with the &lt;code&gt;overflow &lt;/code&gt;CSS property set to &lt;code&gt;scroll&lt;/code&gt; (or &lt;code&gt;auto&lt;/code&gt; when the element's explicit height or width is less than the height or width of its contents).</source>
          <target state="translated">的 &lt;code&gt;scroll&lt;/code&gt; ，当用户滚动到在元件的不同位置的事件被发送到的元素。它适用于 &lt;code&gt;window&lt;/code&gt; 对象，但也适用于可将 &lt;code&gt;overflow &lt;/code&gt; CSS属性设置为可 &lt;code&gt;scroll&lt;/code&gt; （或当元素的显式高度或宽度小于其内容的高度或宽度时 &lt;code&gt;auto&lt;/code&gt; 可滚动框架和元素。</target>
        </trans-unit>
        <trans-unit id="8d5205a7fdd64edbe6625ef6cf64ce3deb0f9870" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; event is sent to an element when the user makes a text selection inside it. This event is limited to &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; fields and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; boxes.</source>
          <target state="translated">该 &lt;code&gt;select&lt;/code&gt; 的事件被发送到当用户在其内部文本选择的元素。此事件仅限于 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 字段和 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 框。</target>
        </trans-unit>
        <trans-unit id="9113961f76be0bff850b1a78ab9fcf515e957ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;submit&lt;/code&gt; event is sent to an element when the user is attempting to submit a form. It can only be attached to &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements. Forms can be submitted either by clicking an explicit &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&quot;image&quot;&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;button type=&quot;submit&quot;&amp;gt;&lt;/code&gt;, or by pressing</source>
          <target state="translated">所述 &lt;code&gt;submit&lt;/code&gt; 事件被发送到当用户试图提交表单的元件。它只能附加到 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 元素。可以通过单击明确的 &lt;code&gt;&amp;lt;input type=&quot;submit&quot;&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;input type=&quot;image&quot;&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;button type=&quot;submit&quot;&amp;gt;&lt;/code&gt; 或按来提交表单</target>
        </trans-unit>
        <trans-unit id="0dfac108ca3a7f225da06d364c594943ffbf4277" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.</source>
          <target state="translated">的 &lt;code&gt;success&lt;/code&gt; 回调函数传递返回的数据，这将是一个XML根元素或根据MIME类型的响应的一个文本串。它还传递了响应的文本状态。</target>
        </trans-unit>
        <trans-unit id="e14c3da3cd5f7d01c1aa5b508e80ef7ea3f16bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response.</source>
          <target state="translated">的 &lt;code&gt;success&lt;/code&gt; 回调函数传递返回的数据，这将是一个XML根元素，文本串，JavaScript文件，或JSON对象，这取决于MIME类型的响应。它还传递了响应的文本状态。</target>
        </trans-unit>
        <trans-unit id="5ccddae9e6ea73cc88cf2256dce7c4e9e74fac18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;success&lt;/code&gt; callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the &lt;code&gt;&lt;a href=&quot;jquery.parsejson&quot;&gt;$.parseJSON()&lt;/a&gt;&lt;/code&gt; method. It is also passed the text status of the response.</source>
          <target state="translated">在 &lt;code&gt;success&lt;/code&gt; 的回调被传递返回的数据，其通常是JavaScript对象或阵列由JSON结构所定义和使用所解析的 &lt;code&gt;&lt;a href=&quot;jquery.parsejson&quot;&gt;$.parseJSON()&lt;/a&gt;&lt;/code&gt; 方法。它还传递了响应的文本状态。</target>
        </trans-unit>
        <trans-unit id="f83c22f4983d0e50a0571d7102879050f1da052c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; property can be the element that registered for the event or a descendant of it. It is often useful to compare &lt;code&gt;event.target&lt;/code&gt; to &lt;code&gt;this&lt;/code&gt; in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.</source>
          <target state="translated">该 &lt;code&gt;target&lt;/code&gt; 属性可以是注册的事件或它的后代元素。将 &lt;code&gt;event.target&lt;/code&gt; 与 &lt;code&gt;this&lt;/code&gt; 进行比较通常很有用，以确定是否由于事件冒泡而正在处理该事件。当事件冒泡时，此属性在事件委托中非常有用。</target>
        </trans-unit>
        <trans-unit id="1b8d3506026b92f86a8e616813798c3b44dc5159" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; reference within all callbacks is the object in the &lt;code&gt;context&lt;/code&gt; option passed to &lt;code&gt;$.ajax&lt;/code&gt; in the settings; if &lt;code&gt;context&lt;/code&gt; is not specified, &lt;code&gt;this&lt;/code&gt; is a reference to the Ajax settings themselves.</source>
          <target state="translated">所有回调中的 &lt;code&gt;this&lt;/code&gt; 引用是 &lt;code&gt;context&lt;/code&gt; 选项中传递给设置中 &lt;code&gt;$.ajax&lt;/code&gt; 的对象；如果未指定 &lt;code&gt;context&lt;/code&gt; ，则 &lt;code&gt;this&lt;/code&gt; 是对Ajax设置本身的引用。</target>
        </trans-unit>
        <trans-unit id="7bcc51686054e999eac9f0a4254231a3d071aafe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unload&lt;/code&gt; event is sent to the &lt;code&gt;window&lt;/code&gt; element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an &lt;code&gt;unload&lt;/code&gt; event.</source>
          <target state="translated">该 &lt;code&gt;unload&lt;/code&gt; 事件被发送到 &lt;code&gt;window&lt;/code&gt; ，当用户导航离开页面元素。这可能意味着很多事情之一。用户可能已经单击了链接以离开页面，或在地址栏中输入了新的URL。前进和后退按钮将触发事件。关闭浏览器窗口将导致事件被触发。即使页面重新加载也会首先创建一个 &lt;code&gt;unload&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="d09b0e7e80a1ed1f473f9537c4e4ed4c3ee2fdd4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Anything&lt;/strong&gt; virtual type is used in jQuery documentation to indicate that any type can be used or should be expected.</source>
          <target state="translated">的&lt;strong&gt;任何&lt;/strong&gt;虚拟类型jQuery文档中用于指示任何类型的可用于或应当预期。</target>
        </trans-unit>
        <trans-unit id="17ba7d519f5da361502187fb64363f84401d28a3" translate="yes" xml:space="preserve">
          <source>The Ajax module also has a method named &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt;. Which one is fired depends on the set of arguments passed.</source>
          <target state="translated">Ajax模块还具有一个名为 &lt;code&gt;&lt;a href=&quot;load&quot;&gt;.load()&lt;/a&gt;&lt;/code&gt; 的方法。触发哪一个取决于传递的参数集。</target>
        </trans-unit>
        <trans-unit id="b7648d06183b24c5934f6b9dd7232c3b3d4b750f" translate="yes" xml:space="preserve">
          <source>The Array of DOM elements.</source>
          <target state="translated">DOM元素的阵列。</target>
        </trans-unit>
        <trans-unit id="1ed686e6db6ada7c500787b23e3925a96af3fbc7" translate="yes" xml:space="preserve">
          <source>The Array to translate.</source>
          <target state="translated">要翻译的阵列。</target>
        </trans-unit>
        <trans-unit id="2a94de58ebbebbaecd9d5009b890ff094e401547" translate="yes" xml:space="preserve">
          <source>The CSS specification allows elements to be identified by their attributes. While not supported by some older browsers for the purpose of styling documents, jQuery allows you to employ them regardless of the browser being used.</source>
          <target state="translated">CSS规范允许元素通过其属性来识别。虽然一些旧的浏览器并不支持,但jQuery允许你在任何浏览器中使用它们。</target>
        </trans-unit>
        <trans-unit id="344c01e9b699ec2972a3002d539ac1f765367d65" translate="yes" xml:space="preserve">
          <source>The DOM element or first element within the jQuery object to look for.</source>
          <target state="translated">要寻找的DOM元素或jQuery对象中的第一个元素。</target>
        </trans-unit>
        <trans-unit id="ed5ebae3f36ac0af15138db92d7110d8347bb9aa" translate="yes" xml:space="preserve">
          <source>The DOM element that initiated the event.</source>
          <target state="translated">启动该事件的DOM元素。</target>
        </trans-unit>
        <trans-unit id="eab99c0095d7aec3d1b00060ff7c1b6aec862144" translate="yes" xml:space="preserve">
          <source>The DOM element that may be contained by (a descendant of) the other element.</source>
          <target state="translated">其他元素可能包含的DOM元素(子孙)。</target>
        </trans-unit>
        <trans-unit id="2cec87eb51b7b37174f1c29a76ae13e9889ebe48" translate="yes" xml:space="preserve">
          <source>The DOM element that may contain the other element.</source>
          <target state="translated">可能包含其他元素的DOM元素。</target>
        </trans-unit>
        <trans-unit id="fe6bef9476a7d79e0d7dff8416213cf39b5ca1e3" translate="yes" xml:space="preserve">
          <source>The DOM element to associate with the data.</source>
          <target state="translated">要与数据关联的DOM元素。</target>
        </trans-unit>
        <trans-unit id="dc030c4a2d267f040181927d43fe4935e74d89fc" translate="yes" xml:space="preserve">
          <source>The DOM element to query for the data.</source>
          <target state="translated">要查询数据的DOM元素。</target>
        </trans-unit>
        <trans-unit id="5d6133b7dddf9fc4e773853a4b4b07d451a10ef9" translate="yes" xml:space="preserve">
          <source>The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.</source>
          <target state="translated">最初传给jQuery()的DOM节点上下文;如果没有传给jQuery(),那么上下文将可能是文档。</target>
        </trans-unit>
        <trans-unit id="32ab8cdf2d8dfb86443e633f5408b3f7803e0bfe" translate="yes" xml:space="preserve">
          <source>The DOM node that will be checked to see if it's in an XML document.</source>
          <target state="translated">检查是否在XML文档中的DOM节点。</target>
        </trans-unit>
        <trans-unit id="d4ceb340e65dd24c78ae93f5cd9af71b1fafda62" translate="yes" xml:space="preserve">
          <source>The Date type is a JavaScript object that represents a single moment in time. Date objects are instantiated using their constructor function, which by default creates an object that represents the current date and time.</source>
          <target state="translated">Date类型是一个JavaScript对象,它代表了一个单一的时间时刻。Date对象是使用其构造函数实例化的,默认情况下,它创建一个代表当前日期和时间的对象。</target>
        </trans-unit>
        <trans-unit id="3000f310db76967f2f07fdbcf374ac00504b3972" translate="yes" xml:space="preserve">
          <source>The Deferred object is chainable, similar to the way a jQuery object is chainable, but it has its own methods. After creating a Deferred object, you can use any of the methods below by either chaining directly from the object creation or saving the object in a variable and invoking one or more methods on that variable.</source>
          <target state="translated">Deferred对象是可链的,类似于jQuery对象可链的方式,但它有自己的方法。在创建一个Deferred对象后,你可以使用下面的任何方法,要么直接从对象创建链,要么将对象保存在一个变量中,并在该变量上调用一个或多个方法。</target>
        </trans-unit>
        <trans-unit id="0a1f8379a7498e59eef9c2b47244cc00919a3dbb" translate="yes" xml:space="preserve">
          <source>The Deferred object, introduced in jQuery 1.5, is a chainable utility object created by calling the &lt;a href=&quot;../jquery.deferred&quot;&gt;&lt;code&gt;jQuery.Deferred()&lt;/code&gt;&lt;/a&gt; method. It can register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</source>
          <target state="translated">jQuery 1.5中引入的Deferred对象是通过调用&lt;a href=&quot;../jquery.deferred&quot;&gt; &lt;code&gt;jQuery.Deferred()&lt;/code&gt; &lt;/a&gt;方法创建的可链接实用程序对象。它可以将多个回调注册到回调队列中，调用回调队列，并中继任何同步或异步功能的成功或失败状态。</target>
        </trans-unit>
        <trans-unit id="ff66dca29c062490170f940b0d40f27697ff8621" translate="yes" xml:space="preserve">
          <source>The Event object</source>
          <target state="translated">事件对象</target>
        </trans-unit>
        <trans-unit id="092a65cd15982d517c7cf3d19af043054e48e494" translate="yes" xml:space="preserve">
          <source>The HTML string on which to operate.</source>
          <target state="translated">要操作的HTML字符串。</target>
        </trans-unit>
        <trans-unit id="f6e4c07493ef60e5d01175f31e8dbda3949ad8bc" translate="yes" xml:space="preserve">
          <source>The HTTP method to use for the request (e.g. &lt;code&gt;&quot;POST&quot;&lt;/code&gt;, &lt;code&gt;&quot;GET&quot;&lt;/code&gt;, &lt;code&gt;&quot;PUT&quot;&lt;/code&gt;). (version added: &lt;a href=&quot;https://api.jquery.com/category/version/1.9.0/&quot;&gt;1.9.0&lt;/a&gt;)</source>
          <target state="translated">用于请求的HTTP方法（例如 &lt;code&gt;&quot;POST&quot;&lt;/code&gt; ， &lt;code&gt;&quot;GET&quot;&lt;/code&gt; ， &lt;code&gt;&quot;PUT&quot;&lt;/code&gt; ）。（添加的版本：&lt;a href=&quot;https://api.jquery.com/category/version/1.9.0/&quot;&gt;1.9.0&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="f3dc39f05895e187594bdff8c739099cd3ef44f2" translate="yes" xml:space="preserve">
          <source>The JSON standard does not permit &quot;control characters&quot; such as a tab or newline. An example like &lt;code&gt;$.parseJSON( '{ &quot;testing&quot;:&quot;1\t2\n3&quot; }' )&lt;/code&gt; will throw an error in most implementations because the JavaScript parser converts the string's tab and newline escapes into literal tab and newline; doubling the backslashes like &lt;code&gt;&quot;1\\t2\\n3&quot;&lt;/code&gt; yields expected results. This problem is often seen when injecting JSON into a JavaScript file from a server-side language such as PHP.</source>
          <target state="translated">JSON标准不允许使用&amp;ldquo;控制字符&amp;rdquo;，例如制表符或换行符。像 &lt;code&gt;$.parseJSON( '{ &quot;testing&quot;:&quot;1\t2\n3&quot; }' )&lt;/code&gt; 这样的示例将在大多数实现中引发错误，因为JavaScript解析器将字符串的制表符和换行符转换为文字制表符和换行符；将反斜杠加倍，例如 &lt;code&gt;&quot;1\\t2\\n3&quot;&lt;/code&gt; 可以得到预期的结果。从服务器端语言（例如PHP）将JSON注入JavaScript文件时，经常会出现此问题。</target>
        </trans-unit>
        <trans-unit id="0309d3fb6068e328dd40b93aceba5a1d021334b9" translate="yes" xml:space="preserve">
          <source>The JSON string to parse.</source>
          <target state="translated">要解析的JSON字符串。</target>
        </trans-unit>
        <trans-unit id="efd29258fca513f46146772577c2b30f5e2a0f96" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;submit&lt;/code&gt; event does not bubble in Internet Explorer. However, scripts that rely on event delegation with the &lt;code&gt;submit&lt;/code&gt; event will work consistently across browsers as of jQuery 1.4, which has normalized the event's behavior.</source>
          <target state="translated">JavaScript &lt;code&gt;submit&lt;/code&gt; 事件不会在Internet Explorer中冒泡。但是，依赖事件委托和 &lt;code&gt;submit&lt;/code&gt; 事件的脚本将在jQuery 1.4及更高版本的浏览器中一致地工作，这已经规范了事件的行为。</target>
        </trans-unit>
        <trans-unit id="724d8c6764e0316ac4c41ba0c0b56449243a6c38" translate="yes" xml:space="preserve">
          <source>The JavaScript code to execute.</source>
          <target state="translated">要执行的JavaScript代码。</target>
        </trans-unit>
        <trans-unit id="3b2129b20519ddffea0fe7ceea74d5ff0a115896" translate="yes" xml:space="preserve">
          <source>The Object to translate.</source>
          <target state="translated">要翻译的对象。</target>
        </trans-unit>
        <trans-unit id="c8d98bc8f048d9c824aebc49e11225ff08a91d77" translate="yes" xml:space="preserve">
          <source>The POST method is used if data is provided as an object; otherwise, GET is assumed.</source>
          <target state="translated">如果数据是以对象形式提供的,则使用POST方法;否则,则假定为GET方法。</target>
        </trans-unit>
        <trans-unit id="2640e06e6701b966e29a283e9bd75f2d73784d4b" translate="yes" xml:space="preserve">
          <source>The PlainObject type is a JavaScript object containing zero or more key-value pairs. The plain object is, in other words, an &lt;code&gt;Object&lt;/code&gt; object. It is designated &quot;plain&quot; in jQuery documentation to distinguish it from other kinds of JavaScript objects: for example, &lt;code&gt;null&lt;/code&gt;, user-defined arrays, and host objects such as &lt;code&gt;document&lt;/code&gt;, all of which have a &lt;code&gt;typeof&lt;/code&gt; value of &quot;object.&quot; The &lt;code&gt;&lt;a href=&quot;jquery.isplainobject&quot;&gt;jQuery.isPlainObject()&lt;/a&gt;&lt;/code&gt; method identifies whether the passed argument is a plain object or not, as demonstrated below:</source>
          <target state="translated">PlainObject类型是一个JavaScript对象，其中包含零个或多个键值对。换句话说，普通对象是一个 &lt;code&gt;Object&lt;/code&gt; 对象。在jQuery文档中将其指定为&amp;ldquo;普通&amp;rdquo;以将其与其他类型的JavaScript对象区分开：例如， &lt;code&gt;null&lt;/code&gt; ，用户定义的数组和宿主对象（例如 &lt;code&gt;document&lt;/code&gt; )，所有这些对象的 &lt;code&gt;typeof&lt;/code&gt; 值均为&amp;ldquo; object&amp;rdquo;。所述 &lt;code&gt;&lt;a href=&quot;jquery.isplainobject&quot;&gt;jQuery.isPlainObject()&lt;/a&gt;&lt;/code&gt; 方法识别所传递的参数是否为所证明低于普通对象与否，：</target>
        </trans-unit>
        <trans-unit id="587e7d693373dd183bdd6d7b252b02ad4cbc6584" translate="yes" xml:space="preserve">
          <source>The Promise interface also allows jQuery's Ajax methods, including &lt;code&gt;$.get()&lt;/code&gt;, to chain multiple &lt;code&gt;.done()&lt;/code&gt;, &lt;code&gt;.fail()&lt;/code&gt;, and &lt;code&gt;.always()&lt;/code&gt; callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</source>
          <target state="translated">无极界面还允许的jQuery的Ajax方法，包括 &lt;code&gt;$.get()&lt;/code&gt; ，把多个 &lt;code&gt;.done()&lt;/code&gt; ， &lt;code&gt;.fail()&lt;/code&gt; ，和 &lt;code&gt;.always()&lt;/code&gt; 回调单个请求，甚至分配请求后，这些回调可能已经完成。如果请求已经完成，则立即触发回调。</target>
        </trans-unit>
        <trans-unit id="43e52de5068bb1e070f3ee42e34c03fc0ec345d8" translate="yes" xml:space="preserve">
          <source>The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including &lt;code&gt;$.getJSON()&lt;/code&gt;, to chain multiple &lt;code&gt;.done()&lt;/code&gt;, &lt;code&gt;.always()&lt;/code&gt;, and &lt;code&gt;.fail()&lt;/code&gt; callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</source>
          <target state="translated">jQuery中1.5无极界面还允许jQuery的Ajax的方法，包括 &lt;code&gt;$.getJSON()&lt;/code&gt; ，链接多个 &lt;code&gt;.done()&lt;/code&gt; ,。 &lt;code&gt;.always()&lt;/code&gt; ，和 &lt;code&gt;.fail()&lt;/code&gt; 回调在单个请求，并且即使在分配这些回调该请求可能已完成。如果请求已经完成，则立即触发回调。</target>
        </trans-unit>
        <trans-unit id="d6eb2e2c386b7b7095dc892d50af68ceac7a6ab8" translate="yes" xml:space="preserve">
          <source>The W3C recommends that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element have at least one child node, even if that child is merely text (see &lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;http://www.w3.org/TR/html401/struct/text.html#edef-P&lt;/a&gt;). Some other elements, on the other hand, are empty (i.e. have no children) by definition:&lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, for example.</source>
          <target state="translated">W3C建议 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素至少具有一个子节点，即使该子节点仅仅是文本（请参见&lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;http://www.w3.org/TR/html401/struct/text.html#edef-P&lt;/a&gt;）。另一方面，根据定义，其他一些元素为空（即没有子元素）：例如， &lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b6519a6ba7c2d20aff481697ae138b671dc2b3a" translate="yes" xml:space="preserve">
          <source>The W3C recommends that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element have at least one child node, even if that child is merely text (see &lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;https://www.w3.org/TR/html401/struct/text.html#edef-P&lt;/a&gt;). Some other elements, on the other hand, are empty (i.e. have no children) by definition:&lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, for example.</source>
          <target state="translated">W3C建议 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素至少具有一个子节点，即使该子节点仅仅是文本（请参见&lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html#edef-P&quot;&gt;https://www.w3.org/TR/html401/struct/text.html#edef-P&lt;/a&gt;）。另一方面，根据定义，其他一些元素为空（即没有子元素）：例如， &lt;code&gt; &amp;lt;input&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1e19a093a3b453869f5a9e45b3b4c2922a34b749" translate="yes" xml:space="preserve">
          <source>The W3C recommends that the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element have at least one child node, even if that child is merely text (see https://www.w3.org/TR/html401/struct/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: &amp;lt;input&amp;gt;, &amp;lt;img&amp;gt;, &amp;lt;br&amp;gt;, and &amp;lt;hr&amp;gt;, for example.</source>
          <target state="translated">W3C建议 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素至少具有一个子节点，即使该子节点仅仅是文本（请参见https://www.w3.org/TR/html401/struct/text.html#edef-P）。另一方面，根据定义，其他一些元素为空（即没有子元素）：例如&amp;lt;input&amp;gt;，&amp;lt;img&amp;gt;，&amp;lt;br&amp;gt;和&amp;lt;hr&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="070d3bba3be689c7dcc9db2cb7e1c2b999bc4b84" translate="yes" xml:space="preserve">
          <source>The above code will generate two different alerts when the button is clicked.</source>
          <target state="translated">以上代码将在点击按钮时产生两种不同的警报。</target>
        </trans-unit>
        <trans-unit id="9f62fe5d402e31a15da9defb30b12c9f45a3306a" translate="yes" xml:space="preserve">
          <source>The above lines alert the data values that were set on the &lt;code&gt;body&lt;/code&gt; element. If no data at all was set on that element, &lt;code&gt;undefined&lt;/code&gt; is returned.</source>
          <target state="translated">以上几行提醒在 &lt;code&gt;body&lt;/code&gt; 元素上设置的数据值。如果在该元素上根本没有设置任何数据，则返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19dbc42eb0079a96f335996e2465e83a8699102f" translate="yes" xml:space="preserve">
          <source>The above lines alert the data values that were set on the &lt;code&gt;body&lt;/code&gt; element. If nothing was set on that element, an empty string is returned.</source>
          <target state="translated">以上几行提醒在 &lt;code&gt;body&lt;/code&gt; 元素上设置的数据值。如果在该元素上未设置任何内容，则返回一个空字符串。</target>
        </trans-unit>
        <trans-unit id="eae634c1a9899fb5e22d8b13e7563287e4cef7e7" translate="yes" xml:space="preserve">
          <source>The above now allows passing from &lt;code&gt;text&lt;/code&gt; to &lt;code&gt;mycustomtype&lt;/code&gt; and then &lt;code&gt;mycustomtype&lt;/code&gt; to &lt;code&gt;json&lt;/code&gt;.</source>
          <target state="translated">上面的代码现在允许从 &lt;code&gt;text&lt;/code&gt; 传递到 &lt;code&gt;mycustomtype&lt;/code&gt; ，然后从mycustomtype &lt;code&gt;mycustomtype&lt;/code&gt; 到 &lt;code&gt;json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b32e570dfd596419701353365115bdabacf94c4" translate="yes" xml:space="preserve">
          <source>The above wraps its code in a function to hide the &quot;proxied&quot;-variable. It saves jQuery's setArray-method in a closure and overwrites it. The proxy then logs all calls to the method and delegates the call to the original. Using apply(this, arguments) guarantees that the caller won't be able to notice the difference between the original and the proxied method.</source>
          <target state="translated">上面的代码包装在一个函数中,以隐藏 &quot;proxied&quot;-变量,它将jQuery的setArray-method保存在封闭中,并覆盖它。它将jQuery的setArray-method保存在一个闭包中并覆盖它。然后代理会记录所有对该方法的调用,并将调用委托给原始方法。使用apply(this,arguments)可以保证调用者不会注意到原始方法和代理方法的区别。</target>
        </trans-unit>
        <trans-unit id="6610ea50c945318d3ab7693d709bd53977c14242" translate="yes" xml:space="preserve">
          <source>The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the &lt;code&gt;alwaysCallbacks&lt;/code&gt; are called. Since &lt;code&gt;deferred.always()&lt;/code&gt; returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional &lt;code&gt;.always()&lt;/code&gt; methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the &lt;a href=&quot;deferred.resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.reject&quot;&gt;&lt;code&gt;reject&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.resolvewith&quot;&gt;&lt;code&gt;resolveWith&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deferred.rejectwith&quot;&gt;&lt;code&gt;rejectWith&lt;/code&gt;&lt;/a&gt; method calls. For more information, see the documentation for &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;.</source>
          <target state="translated">参数可以是单个函数或函数数组。解析或拒绝Deferred后，将 &lt;code&gt;alwaysCallbacks&lt;/code&gt; 。由于 &lt;code&gt;deferred.always()&lt;/code&gt; 返回Deferred对象，因此可以将Deferred对象的其他方法链接到该方法，包括其他 &lt;code&gt;.always()&lt;/code&gt; 方法。解析或拒绝Deferred后，将使用提供给&lt;a href=&quot;deferred.resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;deferred.reject&quot;&gt; &lt;code&gt;reject&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;deferred.resolvewith&quot;&gt; &lt;code&gt;resolveWith&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;deferred.rejectwith&quot;&gt; &lt;code&gt;rejectWith&lt;/code&gt; &lt;/a&gt;方法调用的参数按添加的顺序执行回调。有关更多信息，请参见&lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="8b4b7d3a4511e33399069ffc13d4bc8def0f503b" translate="yes" xml:space="preserve">
          <source>The argument or list of arguments to pass back to the callback list.</source>
          <target state="translated">要传回回调列表的参数或参数列表。</target>
        </trans-unit>
        <trans-unit id="953b3138188e0f4497437947cd8a29321abeb58c" translate="yes" xml:space="preserve">
          <source>The arguments object also has a callee property, which refers to the function you're inside of. For instance:</source>
          <target state="translated">arguments对象也有一个callee属性,它指的是你所在的函数里面。例如</target>
        </trans-unit>
        <trans-unit id="bc1aa336f96c29c99dc1ba1bdef4fa0b9f4fb846" translate="yes" xml:space="preserve">
          <source>The arguments that were passed in to the jQuery method (for serialization).</source>
          <target state="translated">传递给jQuery方法的参数(用于序列化)。</target>
        </trans-unit>
        <trans-unit id="01fe9863cb30f7b0bcc0e1d8d4a68a046910e081" translate="yes" xml:space="preserve">
          <source>The array or array-like object to iterate over.</source>
          <target state="translated">迭代的数组或类数组对象。</target>
        </trans-unit>
        <trans-unit id="bfc6aedd808a2761d036a171b890dbe3969ca47d" translate="yes" xml:space="preserve">
          <source>The array-like object to search through.</source>
          <target state="translated">要搜索的数组类对象。</target>
        </trans-unit>
        <trans-unit id="a92d8a0b1c47a77890394dcce7884f2dd51b73ca" translate="yes" xml:space="preserve">
          <source>The available data types are &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;jsonp&lt;/code&gt;, and &lt;code&gt;script&lt;/code&gt;.</source>
          <target state="translated">可用的数据类型为 &lt;code&gt;text&lt;/code&gt; ， &lt;code&gt;html&lt;/code&gt; ， &lt;code&gt;xml&lt;/code&gt; ， &lt;code&gt;json&lt;/code&gt; ， &lt;code&gt;jsonp&lt;/code&gt; 和 &lt;code&gt;script&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f474111176dbe4b72c85bfbcfa1c612929642144" translate="yes" xml:space="preserve">
          <source>The callback hooks provided by &lt;code&gt;$.ajax()&lt;/code&gt; are as follows:</source>
          <target state="translated">&lt;code&gt;$.ajax()&lt;/code&gt; 提供的回调挂钩如下：</target>
        </trans-unit>
        <trans-unit id="48456f9d8ed08fb80093cafa81da3b3750f4a2ec" translate="yes" xml:space="preserve">
          <source>The callback is fired once the script has been loaded but not necessarily executed.</source>
          <target state="translated">一旦脚本被加载,回调就会被启动,但不一定会被执行。</target>
        </trans-unit>
        <trans-unit id="0a150dbeefa27a6fdaddf5d4cbf61e79e3e341a3" translate="yes" xml:space="preserve">
          <source>The callback to search for.</source>
          <target state="translated">回调搜索。</target>
        </trans-unit>
        <trans-unit id="6b9e0b41d52d14d06d6f59d74c2f23e7bb7aacd6" translate="yes" xml:space="preserve">
          <source>The child combinator (E &lt;strong&gt;&amp;gt;&lt;/strong&gt; F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.</source>
          <target state="translated">子组合器（E &lt;strong&gt;&amp;gt;&lt;/strong&gt; F）可以认为是后代组合器（EF）的一种更特定的形式，因为它仅选择第一级后代。</target>
        </trans-unit>
        <trans-unit id="b0131d897f9ebfd2e8528f7451f2bd70eaf19197" translate="yes" xml:space="preserve">
          <source>The class name to search for.</source>
          <target state="translated">要搜索的类名。</target>
        </trans-unit>
        <trans-unit id="1c76c95474ded1c83df62e9659deaf1e78a2557e" translate="yes" xml:space="preserve">
          <source>The code &lt;code&gt;$( &quot;div.demo-container&quot; ).text( &quot;&amp;lt;p&amp;gt;This is a test.&amp;lt;/p&amp;gt;&quot; );&lt;/code&gt; will produce the following DOM output:</source>
          <target state="translated">代码 &lt;code&gt;$( &quot;div.demo-container&quot; ).text( &quot;&amp;lt;p&amp;gt;This is a test.&amp;lt;/p&amp;gt;&quot; );&lt;/code&gt; 将产生以下DOM输出：</target>
        </trans-unit>
        <trans-unit id="ee09ededc986c4fde55112bb27792c5ab11f4d64" translate="yes" xml:space="preserve">
          <source>The code &lt;code&gt;$( &quot;div.demo-container&quot; ).text()&lt;/code&gt; would produce the following result:</source>
          <target state="translated">代码 &lt;code&gt;$( &quot;div.demo-container&quot; ).text()&lt;/code&gt; 将产生以下结果：</target>
        </trans-unit>
        <trans-unit id="0ff3e41c1bb8be78905878d3080804c616d66cc8" translate="yes" xml:space="preserve">
          <source>The comparison between values is strict. The following will return &lt;code&gt;-1&lt;/code&gt; (not found) because a number is being searched in an array of strings:</source>
          <target state="translated">值之间的比较是严格的。以下内容将返回 &lt;code&gt;-1&lt;/code&gt; （未找到），因为正在字符串数组中搜索数字：</target>
        </trans-unit>
        <trans-unit id="63934f4de86321cfe3280de8cd4a6928e795771b" translate="yes" xml:space="preserve">
          <source>The complementary operation to &lt;code&gt;.get()&lt;/code&gt;, which accepts an index and returns a DOM node, &lt;code&gt;.index()&lt;/code&gt; can take a DOM node and returns an index. Suppose we have a simple unordered list on the page:</source>
          <target state="translated">&lt;code&gt;.get()&lt;/code&gt; 的互补操作（接受索引并返回DOM节点） &lt;code&gt;.index()&lt;/code&gt; 可以采用DOM节点并返回索引。假设我们在页面上有一个简单的无序列表：</target>
        </trans-unit>
        <trans-unit id="04f4668e4368f2a79f73dba514f8e60e41c8e365" translate="yes" xml:space="preserve">
          <source>The content of &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt; can be set like this:</source>
          <target state="translated">的含量 &lt;code&gt;&amp;lt;div class=&quot;demo-container&quot;&amp;gt;&lt;/code&gt; 可以设置这样的：</target>
        </trans-unit>
        <trans-unit id="8d9bb9d21c71526c772e1cdf35a9a991a7064a75" translate="yes" xml:space="preserve">
          <source>The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.</source>
          <target state="translated">要插入的内容。可以是HTML字符串、DOM元素、DOM元素数组或jQuery对象。</target>
        </trans-unit>
        <trans-unit id="5e1584a1b9999c4d1def5c45e27ab44e4599a0d8" translate="yes" xml:space="preserve">
          <source>The current DOM element within the event bubbling phase.</source>
          <target state="translated">当前事件冒泡阶段的DOM元素。</target>
        </trans-unit>
        <trans-unit id="46824c34fb82db130a2df5609dafd2545fdc3db2" translate="yes" xml:space="preserve">
          <source>The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).</source>
          <target state="translated">数据属性在第一次访问数据属性的时候就会被拉入,然后不再被访问或突变(所有的数据值就会在jQuery内部存储)。</target>
        </trans-unit>
        <trans-unit id="8b8b1c908f3b2c347bd0eeb6d735aa8ab48d1652" translate="yes" xml:space="preserve">
          <source>The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:</source>
          <target state="translated">deferred.state()方法返回一个代表Deferred对象当前状态的字符串。Deferred对象可以处于三种状态之一。</target>
        </trans-unit>
        <trans-unit id="77b4a3dc9d992a9171395774e152136eb0aa3384" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;.css( &quot;height&quot; )&lt;/code&gt; and &lt;code&gt;.height()&lt;/code&gt; is that the latter returns a unit-less pixel value (for example, &lt;code&gt;400&lt;/code&gt;) while the former returns a value with units intact (for example, &lt;code&gt;400px&lt;/code&gt;). The &lt;code&gt;.height()&lt;/code&gt; method is recommended when an element's height needs to be used in a mathematical calculation.</source>
          <target state="translated">&lt;code&gt;.css( &quot;height&quot; )&lt;/code&gt; 和 &lt;code&gt;.height()&lt;/code&gt; 之间的区别在于，后者返回无单位像素值（例如 &lt;code&gt;400&lt;/code&gt; ），而前者返回完整单位的值（例如 &lt;code&gt;400px&lt;/code&gt; ）。当需要在数学计算中使用元素的高度时，建议使用 &lt;code&gt;.height()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="b8391b1a8d5a18b73e9581f59ba3273ec27cce80" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;.css( &quot;width&quot; )&lt;/code&gt; and &lt;code&gt;.width()&lt;/code&gt; is that the latter returns a unit-less pixel value (for example, &lt;code&gt;400&lt;/code&gt;) while the former returns a value with units intact (for example, &lt;code&gt;400px&lt;/code&gt;). The &lt;code&gt;.width()&lt;/code&gt; method is recommended when an element's width needs to be used in a mathematical calculation.</source>
          <target state="translated">&lt;code&gt;.css( &quot;width&quot; )&lt;/code&gt; 和 &lt;code&gt;.width()&lt;/code&gt; 之间的区别在于，后者返回无单位像素值（例如 &lt;code&gt;400&lt;/code&gt; ），而前者返回完整单位的值（例如 &lt;code&gt;400px&lt;/code&gt; ）。当需要在数学计算中使用元素的宽度时，建议使用 &lt;code&gt;.width()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="d50a600af0ee02848ff5326868c4753647ab9366" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;.css(width)&lt;/code&gt; and &lt;code&gt;.width()&lt;/code&gt; is that the latter returns a unit-less pixel value (for example, &lt;code&gt;400&lt;/code&gt;) while the former returns a value with units intact (for example, &lt;code&gt;400px&lt;/code&gt;). The &lt;code&gt;.width()&lt;/code&gt; method is recommended when an element's width needs to be used in a mathematical calculation.</source>
          <target state="translated">&lt;code&gt;.css(width)&lt;/code&gt; 和 &lt;code&gt;.width()&lt;/code&gt; 之间的区别在于，后者返回无单位像素值（例如 &lt;code&gt;400&lt;/code&gt; ），而前者返回完整单位的值（例如 &lt;code&gt;400px&lt;/code&gt; ）。当需要在数学计算中使用元素的宽度时，建议使用 &lt;code&gt;.width()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="37202ea5ad20c3706e31a8627329e1cc35a19b29" translate="yes" xml:space="preserve">
          <source>The difference between &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;properties&lt;/em&gt; can be important in specific situations. &lt;strong&gt;Before jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.attr()&lt;/code&gt; method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.prop()&lt;/code&gt; method provides a way to explicitly retrieve property values, while &lt;code&gt;.attr()&lt;/code&gt; retrieves attributes.</source>
          <target state="translated">&lt;em&gt;属性&lt;/em&gt;和&lt;em&gt;属性&lt;/em&gt;之间的差异在特定情况下可能很重要。&lt;strong&gt;在jQuery 1.6之前&lt;/strong&gt;， &lt;code&gt;.attr()&lt;/code&gt; 方法在检索某些属性时有时会考虑属性值，这可能会导致行为不一致。&lt;strong&gt;从jQuery 1.6开始&lt;/strong&gt;， &lt;code&gt;.prop()&lt;/code&gt; 方法提供了一种显式检索属性值的方法，而 &lt;code&gt;.attr()&lt;/code&gt; 则检索属性。</target>
        </trans-unit>
        <trans-unit id="c8b8341db17aad3ed60ff6d25f09507ac30ab22b" translate="yes" xml:space="preserve">
          <source>The difference between &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;properties&lt;/em&gt; can be important in specific situations. &lt;strong&gt;Before jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. &lt;strong&gt;As of jQuery 1.6&lt;/strong&gt;, the &lt;code&gt;.prop()&lt;/code&gt; method provides a way to explicitly retrieve property values, while &lt;code&gt;.attr()&lt;/code&gt; retrieves attributes.</source>
          <target state="translated">&lt;em&gt;属性&lt;/em&gt;和&lt;em&gt;属性&lt;/em&gt;之间的差异在特定情况下可能很重要。&lt;strong&gt;在jQuery 1.6之前&lt;/strong&gt;， &lt;code&gt;&lt;a href=&quot;attr&quot;&gt;.attr()&lt;/a&gt;&lt;/code&gt; 方法在检索某些属性时有时会考虑属性值，这可能会导致行为不一致。&lt;strong&gt;从jQuery 1.6开始&lt;/strong&gt;， &lt;code&gt;.prop()&lt;/code&gt; 方法提供了一种显式检索属性值的方法，而 &lt;code&gt;.attr()&lt;/code&gt; 则检索属性。</target>
        </trans-unit>
        <trans-unit id="d7d00606c5e46f31f2f98e11c01c5572475bedf2" translate="yes" xml:space="preserve">
          <source>The difference in milliseconds between the time the browser created the event and January 1, 1970.</source>
          <target state="translated">浏览器创建事件的时间与1970年1月1日之间的毫秒之差。</target>
        </trans-unit>
        <trans-unit id="2ad811ab657cc27a74651a8411a156528a0df130" translate="yes" xml:space="preserve">
          <source>The drawback is that the callback is called in the context of each value and you therefore lose the context of your own object if applicable. More on this below at Functions.</source>
          <target state="translated">缺点是,回调是在每个值的上下文中调用的,因此如果适用的话,你会失去自己对象的上下文。更多的内容在下面的Functions中介绍。</target>
        </trans-unit>
        <trans-unit id="9037c831467c9eaa41d28fe7bf4126374f23fbbf" translate="yes" xml:space="preserve">
          <source>The effect of this on &lt;code&gt;&amp;lt;div id=&quot;foo&quot;&amp;gt;&lt;/code&gt; (when it does not initially have the &quot;entered&quot; class) is to add the &quot;entered&quot; class when the mouse enters the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and remove the class when the mouse leaves.</source>
          <target state="translated">此操作对 &lt;code&gt;&amp;lt;div id=&quot;foo&quot;&amp;gt;&lt;/code&gt; （当它最初没有&amp;ldquo; entered&amp;rdquo;类时）是在鼠标进入 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 时添加&amp;ldquo; entered&amp;rdquo;类，并在鼠标离开时删除该类。 。</target>
        </trans-unit>
        <trans-unit id="abaa5fa0e138e2677c0408917eeeb5af975fe5df" translate="yes" xml:space="preserve">
          <source>The element where the currently-called jQuery event handler was attached.</source>
          <target state="translated">当前调用的jQuery事件处理程序被附加的元素。</target>
        </trans-unit>
        <trans-unit id="f33d88a15dc715eabf21b992b42c443d395d3276" translate="yes" xml:space="preserve">
          <source>The end parameter allows us to limit the selected range even further. For example:</source>
          <target state="translated">结束参数允许我们进一步限制所选范围。例如:</target>
        </trans-unit>
        <trans-unit id="1c816a005a96322be853cb13839915a982aa35e3" translate="yes" xml:space="preserve">
          <source>The event handler &lt;em&gt;must&lt;/em&gt; be attached before the browser fires the &lt;code&gt;error&lt;/code&gt; event, which is why the example sets the &lt;code&gt;src&lt;/code&gt; attribute after attaching the handler. Also, the &lt;code&gt;error&lt;/code&gt; event may not be correctly fired when the page is served locally; &lt;code&gt;error&lt;/code&gt; relies on HTTP status codes and will generally not be triggered if the URL uses the &lt;code&gt;file:&lt;/code&gt; protocol.</source>
          <target state="translated">&lt;em&gt;必须&lt;/em&gt;在浏览器触发 &lt;code&gt;error&lt;/code&gt; 事件之前附加事件处理程序，这就是为什么该示例在附加处理程序后设置 &lt;code&gt;src&lt;/code&gt; 属性的原因。同样，在本地提供页面时， &lt;code&gt;error&lt;/code&gt; 事件可能无法正确触发。 &lt;code&gt;error&lt;/code&gt; 取决于HTTP状态代码，如果URL使用 &lt;code&gt;file:&lt;/code&gt; 协议，通常不会触发该错误。</target>
        </trans-unit>
        <trans-unit id="6592b71414facc03b08e92d3c61ae4a7c6e48089" translate="yes" xml:space="preserve">
          <source>The event handler and its environment</source>
          <target state="translated">事件处理程序及其环境</target>
        </trans-unit>
        <trans-unit id="c3eaa89182d66deb143ff4b5e21401f0e6abded1" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to any &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">事件处理程序可以绑定到任何 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c3c8521075173da7ee615c1ec3531d4b5d09418a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to any element:</source>
          <target state="translated">事件处理程序可以绑定到任何元素。</target>
        </trans-unit>
        <trans-unit id="5c77560ec7292139b9e6f566baee76ddf960569a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as follows:</source>
          <target state="translated">可以将事件处理程序绑定到 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="7b2e5765f810648c6904605842ced0e04a09f0e3" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the first input field:</source>
          <target state="translated">事件处理程序可以绑定到第一个输入字段。</target>
        </trans-unit>
        <trans-unit id="541d65895736107ef3f16d5231f478c377077d12" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the form:</source>
          <target state="translated">事件处理程序可以绑定到表单上。</target>
        </trans-unit>
        <trans-unit id="b1b2f9b415c772375ce1094bf5af80a249e679b0" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the image:</source>
          <target state="translated">事件处理程序可以绑定到图像上。</target>
        </trans-unit>
        <trans-unit id="59db2f3ed37d22060fab94786bd9bfe98aa672b8" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the input field:</source>
          <target state="translated">事件处理程序可以绑定到输入字段。</target>
        </trans-unit>
        <trans-unit id="7c302c60ef5ad634affc166ae8ba6a179c97813a" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the target:</source>
          <target state="translated">事件处理程序可以绑定到目标。</target>
        </trans-unit>
        <trans-unit id="7089e39a05558f599138c92d69408f4e931882a9" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the text input and the select box:</source>
          <target state="translated">事件处理程序可以绑定到文本输入和选择框。</target>
        </trans-unit>
        <trans-unit id="53ceb3bdf027007c75defc080e05b2850e2e15f7" translate="yes" xml:space="preserve">
          <source>The event handler can be bound to the text input:</source>
          <target state="translated">事件处理程序可以绑定到文本输入。</target>
        </trans-unit>
        <trans-unit id="a968461088fc48b890360da98e8a2917f0c0ec22" translate="yes" xml:space="preserve">
          <source>The event object is always passed as the first parameter to an event handler. An array of arguments can also be passed to the .trigger() call, and these parameters will be passed along to the handler as well following the event object. As of jQuery 1.6.2, single string or numeric argument can be passed without being wrapped in an array.</source>
          <target state="translated">事件对象总是作为第一个参数传递给事件处理程序。一个数组的参数也可以传递到.trigger()调用,这些参数将被传递到处理程序以及事件对象之后。从jQuery 1.6.2开始,单一的字符串或数字参数可以不被包裹在数组中传递。</target>
        </trans-unit>
        <trans-unit id="d04cbf7c5545cd035665c33569633ce74b31c81a" translate="yes" xml:space="preserve">
          <source>The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user's environment at the time the event was initiated. &lt;a href=&quot;category/events/event-object&quot;&gt;View the full Event Object&lt;/a&gt;.</source>
          <target state="translated">事件对象通常是不必要的，而参数则被省略，因为当绑定处理程序时，通常有足够的上下文可用，以便确切地知道触发处理程序时需要执行的操作。但是，有时有必要在事件开始时收集有关用户环境的更多信息。&lt;a href=&quot;category/events/event-object&quot;&gt;查看完整的事件对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a5610a350c3ccf39411d452e988cd760b00e727" translate="yes" xml:space="preserve">
          <source>The exact handling of the &lt;code&gt;unload&lt;/code&gt; event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers and contrasted with the similar &lt;code&gt;beforeunload&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;unload&lt;/code&gt; 事件的确切处理因浏览器的版本而异。例如，某些版本的Firefox在跟踪链接时触发事件，但在关闭窗口时不会触发事件。在实际使用中，应在所有受支持的浏览器上测试行为，并与类似的 &lt;code&gt;beforeunload&lt;/code&gt; 事件进行对比。</target>
        </trans-unit>
        <trans-unit id="a47720c0de238c3c29d705238cb0f84e408d6262" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;$( &quot;div:has(p)&quot; )&lt;/code&gt; matches a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; if a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; exists anywhere among its descendants, not just as a direct child.</source>
          <target state="translated">如果 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 的后代中存在任何地方，而不仅仅是直接子代，则表达式 &lt;code&gt;$( &quot;div:has(p)&quot; )&lt;/code&gt; 与 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 匹配。</target>
        </trans-unit>
        <trans-unit id="fdec95bd57664e6187875684bcae2f43b3499034" translate="yes" xml:space="preserve">
          <source>The filter function will be passed two arguments: the current array item and its index. The filter function must return 'true' to include the item in the result array.</source>
          <target state="translated">过滤器函数将被传递两个参数:当前的数组项目和它的索引。过滤器函数必须返回 &quot;true &quot;才能将该项目包含在结果数组中。</target>
        </trans-unit>
        <trans-unit id="1a8c78269da9a7a144139698b6264cc95a56365a" translate="yes" xml:space="preserve">
          <source>The first array-like object to merge, the elements of second added.</source>
          <target state="translated">将第一个数组类对象进行合并,加入第二个数组的元素。</target>
        </trans-unit>
        <trans-unit id="bca6f939db67fb58379c0c2238b53604a16dbd93" translate="yes" xml:space="preserve">
          <source>The first button shows how an unqueued animation works. It expands the div out to 90% width &lt;strong&gt;while&lt;/strong&gt; the font-size is increasing. Once the font-size change is complete, the border animation will begin. The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.</source>
          <target state="translated">第一个按钮显示未排队动画的工作方式。&lt;strong&gt;当&lt;/strong&gt;字体大小增加&lt;strong&gt;时&lt;/strong&gt;，它将div扩展到90％的宽度。字体大小更改完成后，边框动画将开始。第二个按钮启动传统的链接动画，其中每个动画将在元素上的上一个动画完成后开始。</target>
        </trans-unit>
        <trans-unit id="cfe3394cf354aa01c5c119c6f9df4de1d6557809" translate="yes" xml:space="preserve">
          <source>The first letter in Ajax stands for &quot;asynchronous,&quot; meaning that the operation occurs in parallel and the order of completion is not guaranteed. The &lt;code&gt;async&lt;/code&gt; option to &lt;code&gt;$.ajax()&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;, indicating that code execution can continue after the request is made. Setting this option to &lt;code&gt;false&lt;/code&gt; (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.</source>
          <target state="translated">Ajax中的第一个字母代表&amp;ldquo;异步&amp;rdquo;，这意味着该操作并行发生，并且无法保证完成的顺序。 &lt;code&gt;$.ajax()&lt;/code&gt; 的 &lt;code&gt;async&lt;/code&gt; 选项默认为 &lt;code&gt;true&lt;/code&gt; ，指示在发出请求后代码可以继续执行。强烈建议不要将此选项设置为 &lt;code&gt;false&lt;/code&gt; （从而使调用不再异步），因为它可能导致浏览器无响应。</target>
        </trans-unit>
        <trans-unit id="3dd4ad641c60ce993a319482b87b6fff7be020a1" translate="yes" xml:space="preserve">
          <source>The first signature for the &lt;code&gt;.find()&lt;/code&gt;method accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. The elements will be filtered by testing whether they match this selector. The expressions allowed include selectors like &lt;code&gt;&amp;gt; p&lt;/code&gt; which will find all the paragraphs that are children of the elements in the jQuery object.</source>
          <target state="translated">&lt;code&gt;.find()&lt;/code&gt; 方法的第一个签名接受与我们可以传递给 &lt;code&gt;$()&lt;/code&gt; 函数的类型相同的选择器表达式。元素将通过测试它们是否与此选择器匹配来进行过滤。允许的表达式包括选择器，例如 &lt;code&gt;&amp;gt; p&lt;/code&gt; ，这些选择器将查找所有属于jQuery对象中元素的子元素的段落。</target>
        </trans-unit>
        <trans-unit id="dab134d4e8bf507a0b852b877e39959ba46fce14" translate="yes" xml:space="preserve">
          <source>The first signature for the &lt;code&gt;.find()&lt;/code&gt;method accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. The elements will be filtered by testing whether they match this selector; all parts of the selector must lie inside of an element on which .find() is called. The expressions allowed include selectors like &lt;code&gt;&amp;gt; p&lt;/code&gt; which will find all the paragraphs that are children of the elements in the jQuery object.</source>
          <target state="translated">&lt;code&gt;.find()&lt;/code&gt; 方法的第一个签名接受与我们可以传递给 &lt;code&gt;$()&lt;/code&gt; 函数的类型相同的选择器表达式。元素将通过测试它们是否与选择器匹配来过滤。选择器的所有部分都必须位于调用.find（）的元素内。允许的表达式包括选择器，例如 &lt;code&gt;&amp;gt; p&lt;/code&gt; ，这些选择器将查找所有属于jQuery对象中元素的子元素的段落。</target>
        </trans-unit>
        <trans-unit id="5fd5cdf1aaec5d99e649d109e9218e1768db80d9" translate="yes" xml:space="preserve">
          <source>The first time we apply &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt;, we get the following:</source>
          <target state="translated">第一次应用 &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt; ，我们得到以下信息：</target>
        </trans-unit>
        <trans-unit id="021404d539fa30f7bd9a809d18e784457069d717" translate="yes" xml:space="preserve">
          <source>The following are two sample methods named &lt;code&gt;fn1&lt;/code&gt; and &lt;code&gt;fn2&lt;/code&gt;:</source>
          <target state="translated">以下是两个名为 &lt;code&gt;fn1&lt;/code&gt; 和 &lt;code&gt;fn2&lt;/code&gt; 的示例方法：</target>
        </trans-unit>
        <trans-unit id="f64f18608a238a1192c88dfa8a8f137c9d294636" translate="yes" xml:space="preserve">
          <source>The following comparisons are all true:</source>
          <target state="translated">以下比较都是正确的。</target>
        </trans-unit>
        <trans-unit id="bc071c8397609381bbd9504310c1ba41353890a3" translate="yes" xml:space="preserve">
          <source>The following example shows how a minimal image transport could be implemented:</source>
          <target state="translated">下面的例子显示了如何实现最小图像传输。</target>
        </trans-unit>
        <trans-unit id="abb3689a802e901601920b2b12ca783b0318c8c6" translate="yes" xml:space="preserve">
          <source>The following properties are also copied to the event object, though some of their values may be undefined depending on the event:</source>
          <target state="translated">以下属性也会被复制到事件对象中,尽管根据事件的不同,它们的一些值可能未被定义。</target>
        </trans-unit>
        <trans-unit id="dec858fec45670eb0dcd1906c0e4f2fc17caf072" translate="yes" xml:space="preserve">
          <source>The following selectors are based on the Cascading Style Sheet 1 specification, as outlined by the W3C. For more information about the specifications, visit &lt;a href=&quot;https://www.w3.org/Style/CSS/#specs&quot;&gt;https://www.w3.org/Style/CSS/#specs&lt;/a&gt;.</source>
          <target state="translated">下列选择器基于W3C概述的级联样式表1规​​范。有关规范的更多信息，请访问&lt;a href=&quot;https://www.w3.org/Style/CSS/#specs&quot;&gt;https://www.w3.org/Style/CSS/#specs&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="efc8ca2023c763ab424e309905ae785bfc9fcdc1" translate="yes" xml:space="preserve">
          <source>The following will &lt;em&gt;not&lt;/em&gt; save the added elements, because the &lt;code&gt;.add()&lt;/code&gt; method creates a new set and leaves the original set in pdiv unchanged:</source>
          <target state="translated">以下内容将&lt;em&gt;不会&lt;/em&gt;保存添加的元素，因为 &lt;code&gt;.add()&lt;/code&gt; 方法将创建一个新集合，并使pdiv中的原始集合保持不变：</target>
        </trans-unit>
        <trans-unit id="6f51f371b8da8dc1313314e38b6c779c426e42e6" translate="yes" xml:space="preserve">
          <source>The function can return:</source>
          <target state="translated">该函数可以返回。</target>
        </trans-unit>
        <trans-unit id="2e37153bc1a8e1ad3a9f12be343e9728f9a20217" translate="yes" xml:space="preserve">
          <source>The function that is no longer to be executed.</source>
          <target state="translated">不再执行的函数。</target>
        </trans-unit>
        <trans-unit id="c0e0e646f0de4166549307945db05657dc0f40f2" translate="yes" xml:space="preserve">
          <source>The function that is to be no longer executed.</source>
          <target state="translated">拟不再执行的函数。</target>
        </trans-unit>
        <trans-unit id="7180b46bfb05a111cd04bc1cb12e5540f1eb2375" translate="yes" xml:space="preserve">
          <source>The function that will be executed on every value.</source>
          <target state="translated">对每个值执行的函数。</target>
        </trans-unit>
        <trans-unit id="d3de917bcd36c99d1259f320a3f7d5ffbc730acf" translate="yes" xml:space="preserve">
          <source>The function to be invoked.</source>
          <target state="translated">要调用的函数。</target>
        </trans-unit>
        <trans-unit id="7f804edca989e0ac4a94b9c06aefacd24370d29f" translate="yes" xml:space="preserve">
          <source>The function to execute when the DOM is ready.</source>
          <target state="translated">当DOM准备好时要执行的功能。</target>
        </trans-unit>
        <trans-unit id="528266b758f50455c24b724fbb39bccc1e8838e7" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the array item, the second argument is the index in array The function can return any value. A returned array will be flattened into the resulting array. Within the function, &lt;code&gt;this&lt;/code&gt; refers to the global (window) object.</source>
          <target state="translated">处理每个项目的功能。该函数的第一个参数是数组项，第二个参数是数组中的索引函数可以返回任何值。返回的数组将被展平为结果数组。在函数内， &lt;code&gt;this&lt;/code&gt; 是指全局（窗口）对象。</target>
        </trans-unit>
        <trans-unit id="2497be69d4d28d0015898947249c2dfe61e4276d" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the item, and the second argument is the index. The function should return a Boolean value. &lt;code&gt;this&lt;/code&gt; will be the global window object.</source>
          <target state="translated">处理每个项目的功能。该函数的第一个参数是项目，第二个参数是索引。该函数应返回一个布尔值。 &lt;code&gt;this&lt;/code&gt; 将是全局窗口对象。</target>
        </trans-unit>
        <trans-unit id="ed78ed460dba43418960b9867533924d5b82946f" translate="yes" xml:space="preserve">
          <source>The function to process each item against. The first argument to the function is the value; the second argument is the key of the object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, &lt;code&gt;this&lt;/code&gt; refers to the global (window) object.</source>
          <target state="translated">处理每个项目的功能。该函数的第一个参数是值；第二个参数是对象属性的键。该函数可以返回任何值以添加到数组中。返回的数组将被展平为结果数组。在函数内， &lt;code&gt;this&lt;/code&gt; 是指全局（窗口）对象。</target>
        </trans-unit>
        <trans-unit id="0c7f01ed75b8f184641d80cb2808bde2c28779d5" translate="yes" xml:space="preserve">
          <source>The function whose context will be changed.</source>
          <target state="translated">语境将被改变的函数。</target>
        </trans-unit>
        <trans-unit id="44671f971a36a5853ba3aa8c82cb9c2627ced934" translate="yes" xml:space="preserve">
          <source>The general idea behind pub/sub (Publish/Subscribe, or, the Observer pattern) is the promotion of loose coupling in applications. Rather than single objects calling on the methods of other objects, an object instead subscribes to a specific task or activity of another object and is notified when it occurs. Observers are also called Subscribers, and we refer to the object being observed as the Publisher (or the subject). Publishers notify subscribers when events occur.</source>
          <target state="translated">pub/sub(Publish/Subscribe,或者,Observer模式)背后的总体思想是促进应用程序中的松散耦合。一个对象不是调用其他对象的方法,而是订阅另一个对象的特定任务或活动,并在其发生时得到通知。观察者也称为订阅者,我们把被观察的对象称为发布者(或主体)。发布者在事件发生时通知订阅者。</target>
        </trans-unit>
        <trans-unit id="96908f5f2e8c272b018f7fc547920ba259a9f935" translate="yes" xml:space="preserve">
          <source>The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for &lt;code&gt;.unbind()&lt;/code&gt; to know which handler to remove. This example is also an illustration of a closure. Since the handler refers to the &lt;code&gt;timesClicked&lt;/code&gt; variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.</source>
          <target state="translated">在这种情况下，处理程序必须带有一个参数，以便我们可以捕获事件对象，并在第三次单击后使用它来解除绑定处理程序。事件对象包含 &lt;code&gt;.unbind()&lt;/code&gt; 知道要删除哪个处理程序所必需的上下文。此示例也是闭包的说明。由于处理程序引用了在函数外部定义的 &lt;code&gt;timesClicked&lt;/code&gt; 变量，因此即使在处理程序调用之间也增加变量的影响。</target>
        </trans-unit>
        <trans-unit id="9a017672927edcddb38cf218fbb12b8313df4cc6" translate="yes" xml:space="preserve">
          <source>The handler list for an element is set when the event is first delivered. Adding or removing event handlers on the current element won't take effect until the next time the event is handled. To prevent any further event handlers from executing on an element within an event handler, call &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;. This behavior goes against the &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener&quot;&gt;W3C events specification&lt;/a&gt;. To better understand this case, consider the following code:</source>
          <target state="translated">首次交付事件时，将设置元素的处理程序列表。在下一次处理事件之前，在当前元素上添加或删除事件处理程序将不会生效。为防止其他事件处理程序在事件处理程序中的某个元素上执行，请调用 &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt; 。这种行为违背了&lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener&quot;&gt;W3C事件规范&lt;/a&gt;。为了更好地理解这种情况，请考虑以下代码：</target>
        </trans-unit>
        <trans-unit id="068354fa5d5791c1d48dccb2e852071a0eec58aa" translate="yes" xml:space="preserve">
          <source>The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the &lt;code&gt;scrollLeft&lt;/code&gt; positions the horizontal scroll of each matched element.</source>
          <target state="translated">水平滚动位置与可滚动区域上方从视图中隐藏的像素数相同。设置 &lt;code&gt;scrollLeft&lt;/code&gt; 可以定位每个匹配元素的水平滚动。</target>
        </trans-unit>
        <trans-unit id="5ef722341357678071415deb8d758a8d628e8e77" translate="yes" xml:space="preserve">
          <source>The horizontal scroll position is the same as the number of pixels that are hidden from view to the left of the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">水平滚动位置与可滚动区域左侧看不到的像素数相同。如果滚动条位于最左侧，或者元素不可滚动，则此数字将为 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f18c308cc9003dd517b04c883ca4c11f2901568f" translate="yes" xml:space="preserve">
          <source>The index of the array at which to begin the search. The default is 0, which will search the whole array.</source>
          <target state="translated">数组的索引,从哪里开始搜索。默认值是0,将搜索整个数组。</target>
        </trans-unit>
        <trans-unit id="84fbf232995bee433ace36fdc322edb615edc6af" translate="yes" xml:space="preserve">
          <source>The index-related selector expressions (including this &quot;greater than&quot; selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</source>
          <target state="translated">与索引相关的选择器表达式（包括此&amp;ldquo;大于&amp;rdquo;选择器）过滤与前面的表达式匹配的元素集。他们根据此匹配集中的元素顺序缩小范围。例如，如果首先使用类选择器（ &lt;code&gt;.myclass&lt;/code&gt; ）选择元素并返回四个元素，则出于这些选择器的目的，这些元素的索引为0到3。</target>
        </trans-unit>
        <trans-unit id="9ce2345a99b016ade0050c9c9e058771ff484eb6" translate="yes" xml:space="preserve">
          <source>The index-related selectors (&lt;code&gt;:eq()&lt;/code&gt;, &lt;code&gt;:lt()&lt;/code&gt;, &lt;code&gt;:gt()&lt;/code&gt;, &lt;code&gt;:even&lt;/code&gt;, &lt;code&gt;:odd&lt;/code&gt;) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;3&lt;/code&gt; for the purposes of these selectors.</source>
          <target state="translated">所述索引相关的选择器（ &lt;code&gt;:eq()&lt;/code&gt; ， &lt;code&gt;:lt()&lt;/code&gt; ， &lt;code&gt;:gt()&lt;/code&gt; ： &lt;code&gt;:even&lt;/code&gt; ， &lt;code&gt;:odd&lt;/code&gt; ）滤波器的一组具有匹配它们之前的表达元件。他们根据此匹配集中的元素顺序缩小范围。例如，如果首先使用类选择器（ &lt;code&gt;.myclass&lt;/code&gt; ）选择元素并返回四个元素，则出于这些选择器的目的，这些元素的索引为 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;3&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba134bef640122a89e8d25ae63500999badb7aed" translate="yes" xml:space="preserve">
          <source>The index-related selectors (including this &quot;less than&quot; selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (&lt;code&gt;.myclass&lt;/code&gt;) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</source>
          <target state="translated">与索引相关的选择器（包括此&amp;ldquo;小于&amp;rdquo;选择器）过滤与前面的表达式匹配的元素集。他们根据此匹配集中的元素顺序缩小范围。例如，如果首先使用类选择器（ &lt;code&gt;.myclass&lt;/code&gt; ）选择元素并返回四个元素，则出于这些选择器的目的，这些元素的索引为0到3。</target>
        </trans-unit>
        <trans-unit id="4e288c80fa39dc156186e654513b5fc57fb3fddd" translate="yes" xml:space="preserve">
          <source>The jQuery &lt;code&gt;.slice()&lt;/code&gt; method is patterned after the JavaScript .slice() method for arrays. One of the features that it mimics is the ability for negative numbers to be passed as either the &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; parameter. If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:</source>
          <target state="translated">jQuery &lt;code&gt;.slice()&lt;/code&gt; 方法是在数组的JavaScript .slice（）方法之后进行模式化的。它模仿的功能之一是可以将负数作为 &lt;code&gt;start&lt;/code&gt; 或 &lt;code&gt;end&lt;/code&gt; 参数传递。如果提供负数，则表示位置是从集合的末尾开始，而不是开始。例如：</target>
        </trans-unit>
        <trans-unit id="514aa5055f00f797e80751f12544ed3ca726fe25" translate="yes" xml:space="preserve">
          <source>The jQuery Ajax implementation comes with a set of standard dataTypes, such as text, json, xml, and html.</source>
          <target state="translated">jQuery Ajax实现自带一组标准的dataTypes,如text、json、xml和html。</target>
        </trans-unit>
        <trans-unit id="6808edbc627612119a19ef098b25e718fe0d28c4" translate="yes" xml:space="preserve">
          <source>The jQuery XMLHttpRequest (jqXHR) object returned by &lt;code&gt;$.ajax()&lt;/code&gt;&lt;strong&gt;as of jQuery 1.5&lt;/strong&gt; is a superset of the browser's native XMLHttpRequest object. For example, it contains &lt;code&gt;responseText&lt;/code&gt; and &lt;code&gt;responseXML&lt;/code&gt; properties, as well as a &lt;code&gt;getResponseHeader()&lt;/code&gt; method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the &lt;code&gt;jqXHR&lt;/code&gt; object simulates native XHR functionality where possible.</source>
          <target state="translated">从jQuery &lt;strong&gt;1.5开始，&lt;/strong&gt;由 &lt;code&gt;$.ajax()&lt;/code&gt; 返回的jQuery XMLHttpRequest（jqXHR）对象是浏览器本机XMLHttpRequest对象的超集。例如，它包含 &lt;code&gt;responseText&lt;/code&gt; 和 &lt;code&gt;responseXML&lt;/code&gt; 属性，以及 &lt;code&gt;getResponseHeader()&lt;/code&gt; 方法。当传输机制不是XMLHttpRequest时（例如，JSONP请求的脚本标签）， &lt;code&gt;jqXHR&lt;/code&gt; 对象将在可能的情况下模拟本机XHR功能。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6329bb11d7dcdb2e64db5216d41be8f97344e159" translate="yes" xml:space="preserve">
          <source>The jQuery library has a full suite of Ajax capabilities. The functions and methods therein allow us to load data from the server without a browser page refresh.</source>
          <target state="translated">jQuery库有一整套的Ajax功能,其中的函数和方法可以让我们在不刷新浏览器页面的情况下从服务器加载数据。其中的功能和方法让我们可以从服务器加载数据,而无需浏览器刷新页面。</target>
        </trans-unit>
        <trans-unit id="e2bf20b00460b915cf997aa1998852c28ee31339" translate="yes" xml:space="preserve">
          <source>The jQuery library provides several techniques for adding animation to a web page. These include simple, standard animations that are frequently used, and the ability to craft sophisticated custom effects.</source>
          <target state="translated">jQuery库提供了几种技术来为网页添加动画。其中包括经常使用的简单、标准的动画,以及制作复杂的自定义效果的能力。</target>
        </trans-unit>
        <trans-unit id="b10ed5864ed562309d6eb5544f97085abf741a3c" translate="yes" xml:space="preserve">
          <source>The jQuery object itself behaves much like an array; it has a &lt;code&gt;length&lt;/code&gt; property and the elements in the object can be accessed by their numeric indices &lt;code&gt;[0]&lt;/code&gt; to &lt;code&gt;[length-1]&lt;/code&gt;. Note that a jQuery object is not actually a Javascript Array object, so it does not have all the methods of a true Array object such as &lt;code&gt;join()&lt;/code&gt;.</source>
          <target state="translated">jQuery对象本身的行为就像一个数组。它具有 &lt;code&gt;length&lt;/code&gt; 属性，并且对象中的元素可以通过其数字索引 &lt;code&gt;[0]&lt;/code&gt; 至 &lt;code&gt;[length-1]&lt;/code&gt; 进行访问。请注意，jQuery对象实际上不是Javascript Array对象，因此它没有真正的Array对象的所有方法，例如 &lt;code&gt;join()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9adc43edd25fe471ec1647fe8c39dc7a5af1b244" translate="yes" xml:space="preserve">
          <source>The jqXHR Object</source>
          <target state="translated">jqXHR对象</target>
        </trans-unit>
        <trans-unit id="31de3d3efc0743154a00d75c22c5127d0f3e1c79" translate="yes" xml:space="preserve">
          <source>The jqXHR objects returned by &lt;code&gt;$.ajax()&lt;/code&gt; as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred object&lt;/a&gt; for more information). These methods take one or more function arguments that are called when the &lt;code&gt;$.ajax()&lt;/code&gt; request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include:</source>
          <target state="translated">&lt;code&gt;$.ajax()&lt;/code&gt; 从jQuery 1.5开始由$ .ajax（）返回的jqXHR对象实现Promise接口，为它们提供Promise的所有属性，方法和行为（有关更多信息，请参见&lt;a href=&quot;category/deferred-object&quot;&gt;Deferred对象&lt;/a&gt;）。这些方法采用一个或多个函数参数，这些参数在 &lt;code&gt;$.ajax()&lt;/code&gt; 请求终止时被调用。这使您可以在单个请求上分配多个回调，甚至可以在请求完成后分配回调。 （如果请求已经完成，则立即触发回调。）jqXHR对象的可用Promise方法包括：</target>
        </trans-unit>
        <trans-unit id="e9a9d8acdf4a10af6785836e5bd16312f63736d6" translate="yes" xml:space="preserve">
          <source>The keys of the &lt;code&gt;jQuery.cssNumber&lt;/code&gt; object are camel-cased and the values are all set to &lt;code&gt;true&lt;/code&gt;. If you want to prevent the &lt;a href=&quot;css&quot;&gt;&lt;code&gt;.css()&lt;/code&gt;&lt;/a&gt; method from automatically adding the &lt;code&gt;px&lt;/code&gt; unit for a specific CSS property, you can add an extra property to the &lt;code&gt;jQuery.cssNumber&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;jQuery.cssNumber&lt;/code&gt; 对象的键是驼峰式的，并且所有值都设置为 &lt;code&gt;true&lt;/code&gt; 。如果要防止&lt;a href=&quot;css&quot;&gt; &lt;code&gt;.css()&lt;/code&gt; &lt;/a&gt;方法自动为特定CSS属性添加 &lt;code&gt;px&lt;/code&gt; 单位，则可以向 &lt;code&gt;jQuery.cssNumber&lt;/code&gt; 对象添加一个额外的属性。</target>
        </trans-unit>
        <trans-unit id="9c8a74ca684f546365d11151b876bb5ef5d248e1" translate="yes" xml:space="preserve">
          <source>The last &lt;code&gt;end()&lt;/code&gt; is unnecessary, as we are discarding the jQuery object immediately thereafter. However, when the code is written in this form, the &lt;code&gt;end()&lt;/code&gt; provides visual symmetry and a sense of completion &amp;mdash;making the program, at least to the eyes of some developers, more readable, at the cost of a slight hit to performance as it is an additional function call.</source>
          <target state="translated">最后一个 &lt;code&gt;end()&lt;/code&gt; 是不必要的，因为此后我们将立即丢弃jQuery对象。但是，以这种形式编写代码时， &lt;code&gt;end()&lt;/code&gt; 提供了视觉对称性和完成感-至少在某些开发人员的眼中使该程序更具可读性，但对性能的影响却很小。这是一个附加的函数调用。</target>
        </trans-unit>
        <trans-unit id="7efe7e2c92ffe13a861e60a5a71908950a6e6f96" translate="yes" xml:space="preserve">
          <source>The last value returned by an event handler that was triggered by this event, unless the value was undefined.</source>
          <target state="translated">由该事件触发的事件处理程序返回的最后一个值,除非该值未定义。</target>
        </trans-unit>
        <trans-unit id="57b0302cdc98e914c921d10ae80c2282a00fe827" translate="yes" xml:space="preserve">
          <source>The length property can also be used to add elements to the end of an array. That is equivalent to using the push-method:</source>
          <target state="translated">length属性也可以用来在数组的末尾添加元素。这相当于使用push-method。</target>
        </trans-unit>
        <trans-unit id="076292172fb49811fbaacb886eb7c1bb1c8ecc8a" translate="yes" xml:space="preserve">
          <source>The majority of browser events &lt;em&gt;bubble&lt;/em&gt;, or &lt;em&gt;propagate&lt;/em&gt;, from the deepest, innermost element (the &lt;strong&gt;event target&lt;/strong&gt;) in the document where they occur all the way up to the body and the &lt;code&gt;document&lt;/code&gt; element. In Internet Explorer 8 and lower, a few events such as &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;submit&lt;/code&gt; do not natively bubble but jQuery patches these to bubble and create consistent cross-browser behavior.</source>
          <target state="translated">大多数浏览器事件从文档中最深的最内层元素（&lt;strong&gt;事件目标&lt;/strong&gt;）&lt;em&gt;冒泡&lt;/em&gt;或&lt;em&gt;传播&lt;/em&gt;，一直发生到正文和 &lt;code&gt;document&lt;/code&gt; 元素。在Internet Explorer 8及更低版本中，诸如 &lt;code&gt;change&lt;/code&gt; 和 &lt;code&gt;submit&lt;/code&gt; 类的一些事件本身并不冒泡，但jQuery修补了这些事件以冒泡并创建一致的跨浏览器行为。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0824e824d0098d6239873a84448d410eecdf43c6" translate="yes" xml:space="preserve">
          <source>The matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling &lt;code&gt;.css( &quot;display&quot;, &quot;none&quot; )&lt;/code&gt;, except that the value of the &lt;code&gt;display&lt;/code&gt; property is saved in jQuery's data cache so that &lt;code&gt;display&lt;/code&gt; can later be restored to its initial value. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt; and is hidden then shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="translated">匹配的元素将立即隐藏，没有动画。除了将 &lt;code&gt;display&lt;/code&gt; 属性的值保存在jQuery的数据缓存中，以便以后可以将 &lt;code&gt;display&lt;/code&gt; 恢复到初始值之外，这大致等效于调用 &lt;code&gt;.css( &quot;display&quot;, &quot;none&quot; )&lt;/code&gt; 。如果元素的 &lt;code&gt;display&lt;/code&gt; 值为 &lt;code&gt;inline&lt;/code&gt; 并被隐藏然后显示，则它将再次显示 &lt;code&gt;inline&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46f4fb72769ec86f58468699c9160d1615df38e7" translate="yes" xml:space="preserve">
          <source>The matched elements will be revealed immediately, with no animation. This is roughly equivalent to calling &lt;code&gt;.css( &quot;display&quot;, &quot;block&quot; )&lt;/code&gt;, except that the &lt;code&gt;display&lt;/code&gt; property is restored to whatever it was initially. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="translated">匹配的元素将立即显示，没有动画。这与调用 &lt;code&gt;.css( &quot;display&quot;, &quot;block&quot; )&lt;/code&gt; 大致相同，只是将 &lt;code&gt;display&lt;/code&gt; 属性恢复到最初的状态。如果元素的 &lt;code&gt;display&lt;/code&gt; 值为 &lt;code&gt;inline&lt;/code&gt; ，则该元素将被隐藏并显示，它将再次显示为 &lt;code&gt;inline&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3db2c262258f59451cfcd14f30a965494fdb7a8c" translate="yes" xml:space="preserve">
          <source>The matched elements will be revealed or hidden immediately, with no animation, by changing the CSS &lt;code&gt;display&lt;/code&gt; property. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The &lt;code&gt;display&lt;/code&gt; property is saved and restored as needed. If an element has a &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;inline&lt;/code&gt;, then is hidden and shown, it will once again be displayed &lt;code&gt;inline&lt;/code&gt;.</source>
          <target state="translated">通过更改CSS &lt;code&gt;display&lt;/code&gt; 属性，匹配的元素将立即显示或隐藏，而不会产生动画。如果最初显示该元素，则它将被隐藏；如果隐藏，它将显示出来。的 &lt;code&gt;display&lt;/code&gt; 属性被保存并在需要时恢复。如果元素的 &lt;code&gt;display&lt;/code&gt; 值为 &lt;code&gt;inline&lt;/code&gt; ，则该元素将被隐藏并显示，它将再次显示为 &lt;code&gt;inline&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c7ec0c7e986ccedf73b9e0eb11f7ca9d71e877a" translate="yes" xml:space="preserve">
          <source>The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of &lt;code&gt;:contains()&lt;/code&gt; can be written as a bare word or surrounded by quotation marks. The text must have matching case to be selected.</source>
          <target state="translated">匹配的文本可以直接出现在所选元素中，该元素的任何后代或其组合中。与属性值选择器一样， &lt;code&gt;:contains()&lt;/code&gt; 括号内的文本可以写为裸词，也可以用引号引起来。文本必须具有匹配的大小写才能选择。</target>
        </trans-unit>
        <trans-unit id="da8dada95be7fb335e0f7f1320405d5fbedd5c7c" translate="yes" xml:space="preserve">
          <source>The merge performed by &lt;code&gt;$.extend()&lt;/code&gt; is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second or subsequent object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing &lt;code&gt;true&lt;/code&gt; for the first function argument, objects will be recursively merged.</source>
          <target state="translated">默认情况下，由 &lt;code&gt;$.extend()&lt;/code&gt; 执行的合并不是递归的。如果第一个对象的属性本身是对象或数组，则第二个或后续对象中具有相同键的属性将完全覆盖它。值不合并。在下面的示例中，通过检查香蕉的价值可以看出这一点。但是，通过为第一个函数参数传递 &lt;code&gt;true&lt;/code&gt; ，对象将被递归合并。</target>
        </trans-unit>
        <trans-unit id="1c80fedd44d738243eba338965b1bbbb2d7430fc" translate="yes" xml:space="preserve">
          <source>The message to send out.</source>
          <target state="translated">要发出的信息。</target>
        </trans-unit>
        <trans-unit id="c43a2a342b89cf38eab310c6b2bdcbbe99661c6e" translate="yes" xml:space="preserve">
          <source>The method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions.</source>
          <target state="translated">在不同的浏览器中,检索当前选定文本的方法是不同的。一些jQuery插件提供了跨平台的解决方案。</target>
        </trans-unit>
        <trans-unit id="85b34d3ff4f09696376c290b5d4b739841fed2fd" translate="yes" xml:space="preserve">
          <source>The method is essentially a shim for the &lt;a href=&quot;https://drafts.csswg.org/cssom/#the-css.escape()-method&quot;&gt;CSS Working Group's CSS.escape() method&lt;/a&gt;. The main difference is that &lt;code&gt;$.escapeSelector()&lt;/code&gt; can be reliably used in all of jQuery's supported browsers.</source>
          <target state="translated">该方法本质上是&lt;a href=&quot;https://drafts.csswg.org/cssom/#the-css.escape()-method&quot;&gt;CSS工作组的CSS.escape（）方法的填充程序&lt;/a&gt;。主要区别在于 &lt;code&gt;$.escapeSelector()&lt;/code&gt; 可以在所有jQuery支持的浏览器中可靠地使用。</target>
        </trans-unit>
        <trans-unit id="bb0ac576955e6ed525104494cccefc79c0ffaa02" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="translated">该方法的第二个参数可选择接受一个选择器表达式。如果提供了这个参数,将通过测试元素是否匹配来过滤。</target>
        </trans-unit>
        <trans-unit id="db4b38eca31ac6773d02424670d957ba8068df2a" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that can be passed to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the preceding element will be filtered by testing whether it match the selector.</source>
          <target state="translated">该方法可选地接受可以传递给 &lt;code&gt;$()&lt;/code&gt; 函数的相同类型的选择器表达式。如果提供了选择器，则将通过测试前一个元素是否与选择器匹配来对其进行过滤。</target>
        </trans-unit>
        <trans-unit id="6e347b38d077dd75b669a2a45800a2e68ea6ad65" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the immediately following sibling matches the selector, it remains in the newly constructed jQuery object; otherwise, it is excluded.</source>
          <target state="translated">该方法可选地接受与我们可以传递给 &lt;code&gt;$()&lt;/code&gt; 函数的类型相同的选择器表达式。如果紧随其后的同级匹配选择器，则它将保留在新构造的jQuery对象中；否则，将其排除在外。</target>
        </trans-unit>
        <trans-unit id="8c55f0e439cd154cac85e4979f9c4e7e9575eb8a" translate="yes" xml:space="preserve">
          <source>The method optionally accepts a selector expression of the same type that we can pass to the &lt;code&gt;$()&lt;/code&gt; function. If the selector is supplied, the elements will be filtered by testing whether they match it.</source>
          <target state="translated">该方法可选地接受与我们可以传递给 &lt;code&gt;$()&lt;/code&gt; 函数的类型相同的选择器表达式。如果提供了选择器，则将通过测试元素是否匹配来过滤它们。</target>
        </trans-unit>
        <trans-unit id="6305564df7b2b4e272ed467fba354bfdae8565ff" translate="yes" xml:space="preserve">
          <source>The methods of &lt;code&gt;$.Callbacks&lt;/code&gt; can also be detached, should there be a need to define short-hand versions for convenience:</source>
          <target state="translated">&lt;code&gt;$.Callbacks&lt;/code&gt; 的方法也可以分离，如果为了方便起见需要定义简写版本：</target>
        </trans-unit>
        <trans-unit id="dafefab1095fabbdb39dfb2063d2b3e5df760f86" translate="yes" xml:space="preserve">
          <source>The mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.</source>
          <target state="translated">当鼠标指针在元素内部时,在一个与系统相关的时间窗口内,再次按下鼠标按钮。</target>
        </trans-unit>
        <trans-unit id="576cd8b97d955c1f863447a2e77d26323ba6546c" translate="yes" xml:space="preserve">
          <source>The mouse button is depressed while the pointer is inside the element.</source>
          <target state="translated">当指针在元素内部时,鼠标按钮被按下。</target>
        </trans-unit>
        <trans-unit id="b1db620e4cdeba5d3d324554abd72a643b595ecf" translate="yes" xml:space="preserve">
          <source>The mouse button is released while the pointer is inside the element.</source>
          <target state="translated">当鼠标指针在元素内部时,鼠标按钮被释放。</target>
        </trans-unit>
        <trans-unit id="2263bd52a19e370eee7fef7d2360445c3d9c5f06" translate="yes" xml:space="preserve">
          <source>The mouse position relative to the left edge of the document.</source>
          <target state="translated">鼠标相对于文档左边缘的位置。</target>
        </trans-unit>
        <trans-unit id="12339186c582f7ed442e4c1b7e3883792f2709f5" translate="yes" xml:space="preserve">
          <source>The mouse position relative to the top edge of the document.</source>
          <target state="translated">鼠标相对于文档顶部边缘的位置。</target>
        </trans-unit>
        <trans-unit id="2033823b3dadb8c11098d4f039ae3c154ce90a6c" translate="yes" xml:space="preserve">
          <source>The name &lt;code&gt;&quot;class&quot;&lt;/code&gt; must be quoted in the object since it is a JavaScript reserved word, and &lt;code&gt;&quot;className&quot;&lt;/code&gt; cannot be used since it refers to the DOM property, not the attribute.</source>
          <target state="translated">名称 &lt;code&gt;&quot;class&quot;&lt;/code&gt; 必须在对象中加引号，因为它是JavaScript保留字，而 &lt;code&gt;&quot;className&quot;&lt;/code&gt; 由于引用DOM属性而不是属性而不能使用。</target>
        </trans-unit>
        <trans-unit id="2be23a63086ebda18e8b5ba2e3920d1ac2b75c2d" translate="yes" xml:space="preserve">
          <source>The name of a jQuery method that generated the array of elements.</source>
          <target state="translated">生成元素数组的jQuery方法的名称。</target>
        </trans-unit>
        <trans-unit id="4296958589618bb6ad56c790eff779ad5d423877" translate="yes" xml:space="preserve">
          <source>The name of the attribute to get.</source>
          <target state="translated">要获取的属性名称。</target>
        </trans-unit>
        <trans-unit id="fbd0cc3752c40397ded39a708c242e4c4268ad6a" translate="yes" xml:space="preserve">
          <source>The name of the attribute to set.</source>
          <target state="translated">要设置的属性名称。</target>
        </trans-unit>
        <trans-unit id="e46c06096b68a311eebedcb4711d03a49036de4a" translate="yes" xml:space="preserve">
          <source>The name of the function whose context will be changed (should be a property of the &lt;code&gt;context&lt;/code&gt; object).</source>
          <target state="translated">将更改其上下文的函数的名称（应该是 &lt;code&gt;context&lt;/code&gt; 对象的属性）。</target>
        </trans-unit>
        <trans-unit id="2e22159b8af57c29d0edb7193b221eb98a0ca996" translate="yes" xml:space="preserve">
          <source>The name of the property to get.</source>
          <target state="translated">要得到的财产名称。</target>
        </trans-unit>
        <trans-unit id="22a258d2d705073bc54bce7ce496f383cbeade4f" translate="yes" xml:space="preserve">
          <source>The name of the property to remove.</source>
          <target state="translated">要删除的财产名称;</target>
        </trans-unit>
        <trans-unit id="f1c14f88a65230d7c15efb3a3d43e7bba43ad5af" translate="yes" xml:space="preserve">
          <source>The name of the property to set.</source>
          <target state="translated">要设置的属性名称。</target>
        </trans-unit>
        <trans-unit id="0cd4253c3db5e6f71db9e3f316f1013ed1b182b2" translate="yes" xml:space="preserve">
          <source>The name of the queue in which to stop animations.</source>
          <target state="translated">停止动画的队列名称。</target>
        </trans-unit>
        <trans-unit id="ec510aca48291402a1eb466d7b9bbe2a80c30c14" translate="yes" xml:space="preserve">
          <source>The namespace specified when the event was triggered.</source>
          <target state="translated">触发事件时指定的命名空间。</target>
        </trans-unit>
        <trans-unit id="0e042ae48213e41f3c7dccddac1887f13741ea2e" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around all matched elements:</source>
          <target state="translated">新的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素是动态创建的，并已添加到DOM中。结果是一个新的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 包裹在所有匹配的元素周围：</target>
        </trans-unit>
        <trans-unit id="2d83db634f8310cdc17fa4dcfc3eccbf02665e0f" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around each matched element:</source>
          <target state="translated">新的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素是动态创建的，并已添加到DOM中。结果是一个新的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 包裹在每个匹配的元素周围：</target>
        </trans-unit>
        <trans-unit id="7b58a65b4c9866f2d71d3277e6db6f3e6f3a7760" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element is created on the fly and added to the DOM. The result is a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapped around the content of each matched element:</source>
          <target state="translated">新的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素是动态创建的，并已添加到DOM中。结果是一个新的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 包裹在每个匹配元素的内容周围：</target>
        </trans-unit>
        <trans-unit id="79c84130d9d5f31038adef11e326eb07e0a7ceaf" translate="yes" xml:space="preserve">
          <source>The new data value; this can be any Javascript type except &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">新数据值；这可以是除 &lt;code&gt;undefined&lt;/code&gt; 之外的任何Javascript类型。</target>
        </trans-unit>
        <trans-unit id="86f9d09d2b9aa882752be29e4d95646605648024" translate="yes" xml:space="preserve">
          <source>The new function to add to the queue, with a function to call that will dequeue the next item.</source>
          <target state="translated">新添加到队列中的函数,调用的函数将去掉下一个项目的队列。</target>
        </trans-unit>
        <trans-unit id="9c162ae394e32228352d0721ceb63d31e08368c1" translate="yes" xml:space="preserve">
          <source>The new function to add to the queue.</source>
          <target state="translated">新功能添加到队列中。</target>
        </trans-unit>
        <trans-unit id="a5f0b107fe0d49f6c9decfb59cc2f2c72f057786" translate="yes" xml:space="preserve">
          <source>The nonce attribute passed to the executed script.</source>
          <target state="translated">传递给执行脚本的nonce属性。</target>
        </trans-unit>
        <trans-unit id="d0eafdfc57124a623a8018c422334d4b9398c2dc" translate="yes" xml:space="preserve">
          <source>The notable difference between (&lt;code&gt;prev + next&lt;/code&gt;) and (&lt;code&gt;prev ~ siblings&lt;/code&gt;) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.</source>
          <target state="translated">（ &lt;code&gt;prev + next&lt;/code&gt; ）和（ &lt;code&gt;prev ~ siblings&lt;/code&gt; ）之间的显着区别是它们各自的覆盖范围。前者仅到达紧随其后的同级元素，而后者则延伸至所有紧随其后的同级元素。</target>
        </trans-unit>
        <trans-unit id="73c92283828b72633f848b9fc54352c975e1c308" translate="yes" xml:space="preserve">
          <source>The number of elements currently matched. The .&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt; method will return the same value.</source>
          <target state="translated">当前匹配的元素数。的。&lt;a href=&quot;size&quot;&gt;size（）&lt;/a&gt;方法将返回相同的值。</target>
        </trans-unit>
        <trans-unit id="12d7ae7bde39033c3e928ca063c9efe18c0ee88b" translate="yes" xml:space="preserve">
          <source>The number of elements in the jQuery object.</source>
          <target state="translated">jQuery对象中的元素数量。</target>
        </trans-unit>
        <trans-unit id="a6016b690bdcda756024030e31e339dec9953dc6" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.height()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">在某些情况下，与尺寸相关的API返回的数字 &lt;code&gt;.height()&lt;/code&gt; 包括.height（））可能是小数。代码不应假定它是整数。此外，当用户缩放页面时，尺寸可能不正确；浏览器不会公开API来检测这种情况。</target>
        </trans-unit>
        <trans-unit id="e5e1719c954b51432abdfa681d9c3f47f176fad6" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.innerHeight()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">在某些情况下，与尺寸相关的API（包括 &lt;code&gt;.innerHeight()&lt;/code&gt; )返回的数字可能是小数。代码不应假定它是整数。此外，当用户缩放页面时，尺寸可能不正确；浏览器不会公开API来检测这种情况。</target>
        </trans-unit>
        <trans-unit id="7aa21e56b5c6a4a1242bcbb02b0eb0a6d7535a8d" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.innerWidth()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">在某些情况下，与尺寸相关的API返回的数字 &lt;code&gt;.innerWidth()&lt;/code&gt; 包括.innerWidth（））可能是小数。代码不应假定它是整数。此外，当用户缩放页面时，尺寸可能不正确；浏览器不会公开API来检测这种情况。</target>
        </trans-unit>
        <trans-unit id="8a8d1ed18f88fb30e931c4dd179fa50e5f3d80b0" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.offset()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">在某些情况下，与尺寸相关的API返回的数字 &lt;code&gt;.offset()&lt;/code&gt; 包括.offset（））可能是小数。代码不应假定它是整数。此外，当用户缩放页面时，尺寸可能不正确；浏览器不会公开API来检测这种情况。</target>
        </trans-unit>
        <trans-unit id="4cc7307ad7e4bd4a5e469f56fb8abf4483d5d27c" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.outerHeight()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">在某些情况下，与尺寸相关的API返回的数字 &lt;code&gt;.outerHeight()&lt;/code&gt; 包括.outerHeight（））可能是小数。代码不应假定它是整数。此外，当用户缩放页面时，尺寸可能不正确；浏览器不会公开API来检测这种情况。</target>
        </trans-unit>
        <trans-unit id="53bf3025deac19407f8af0203fdb55e479bb25a2" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.outerWidth()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">在某些情况下，与尺寸相关的API返回的数字 &lt;code&gt;.outerWidth()&lt;/code&gt; 包括.outerWidth（））可能是小数。代码不应假定它是整数。此外，当用户缩放页面时，尺寸可能不正确；浏览器不会公开API来检测这种情况。</target>
        </trans-unit>
        <trans-unit id="5493f0ce296d72e79d89a3d60ed5606b5223e979" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.position()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">在某些情况下，与尺寸相关的API（包括 &lt;code&gt;.position()&lt;/code&gt; )返回的数字可能是小数。代码不应假定它是整数。此外，当用户缩放页面时，尺寸可能不正确；浏览器不会公开API来检测这种情况。</target>
        </trans-unit>
        <trans-unit id="57c15f4d2fb291886be6e0579952d0630802ecbb" translate="yes" xml:space="preserve">
          <source>The number returned by dimensions-related APIs, including &lt;code&gt;.width()&lt;/code&gt;, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition.</source>
          <target state="translated">在某些情况下，与尺寸相关的API返回的数字 &lt;code&gt;.width()&lt;/code&gt; 包括.width（））可能是小数。代码不应假定它是整数。此外，当用户缩放页面时，尺寸可能不正确；浏览器不会公开API来检测这种情况。</target>
        </trans-unit>
        <trans-unit id="7159b370dec0b4c77b9794448f968d021591451c" translate="yes" xml:space="preserve">
          <source>The object that will be checked to see if it's a plain object.</source>
          <target state="translated">要检查是否是普通对象的对象。</target>
        </trans-unit>
        <trans-unit id="ff0ff630dca657003b8459aa56ecf0e2c77c82ea" translate="yes" xml:space="preserve">
          <source>The object that will be checked to see if it's empty.</source>
          <target state="translated">要检查是否为空的对象。</target>
        </trans-unit>
        <trans-unit id="3ec3b49d6eb40059902496e5b347b2f0250d6d64" translate="yes" xml:space="preserve">
          <source>The object to extend. It will receive the new properties.</source>
          <target state="translated">要扩展的对象。它将接收新的属性。</target>
        </trans-unit>
        <trans-unit id="0f3ea496874fb4613c3a9be9c6a176f4f24c9e54" translate="yes" xml:space="preserve">
          <source>The object to iterate over.</source>
          <target state="translated">遍历的对象。</target>
        </trans-unit>
        <trans-unit id="bb0f686882a210293bfb4c1039dba53491f90039" translate="yes" xml:space="preserve">
          <source>The object to which the context (&lt;code&gt;this&lt;/code&gt;) of the function should be set.</source>
          <target state="translated">应该将函数的上下文（ &lt;code&gt;this&lt;/code&gt; ）设置为的对象。</target>
        </trans-unit>
        <trans-unit id="3f9e825e08e2e24867189da3596374f800696e05" translate="yes" xml:space="preserve">
          <source>The object to which the context of the function should be set.</source>
          <target state="translated">该函数的上下文应被设置的对象。</target>
        </trans-unit>
        <trans-unit id="a3a8b16b79d7f4fee1588777ab5b8dddb1929eab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;eventData&lt;/code&gt; parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:</source>
          <target state="translated">可选的 &lt;code&gt;eventData&lt;/code&gt; 参数不常用。提供此参数后，我们便可以将其他信息传递给处理程序。此参数的一种方便用法是解决由闭包引起的问题。例如，假设我们有两个事件处理程序都引用相同的外部变量：</target>
        </trans-unit>
        <trans-unit id="7d1dddeb4e713a5f321f1b20a92fef9ccfbfa2bf" translate="yes" xml:space="preserve">
          <source>The original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree. However, if the original collection contains more than one element, they might be mutual siblings and will both be found. If you need an exclusive list of siblings, use &lt;code&gt;$collection.siblings().not($collection)&lt;/code&gt;.</source>
          <target state="translated">原始元素不包含在同级元素中，当我们希望在DOM树的特定级别查找所有元素时，记住这一点很重要。但是，如果原始集合包含多个元素，则它们可能是相互同级的，并且都会被找到。如果需要兄弟姐妹的独占列表，请使用 &lt;code&gt;$collection.siblings().not($collection)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19df398a82ac5760aa053d006893448666db417e" translate="yes" xml:space="preserve">
          <source>The other DOM element involved in the event, if any.</source>
          <target state="translated">事件中涉及的其他DOM元素,如果有的话。</target>
        </trans-unit>
        <trans-unit id="c42d3730919bd78afe5cc24beda85a4371f8e442" translate="yes" xml:space="preserve">
          <source>The particular use cases of this method can be best described through some examples.</source>
          <target state="translated">这种方法的特殊用例最好通过一些例子来描述。</target>
        </trans-unit>
        <trans-unit id="12be8f32109db553edeba7bd125861dccf618584" translate="yes" xml:space="preserve">
          <source>The pattern allows you to create objects with methods that operate on data that isn't visible to the outside&amp;mdash;the very basis of object-oriented programming.</source>
          <target state="translated">该模式允许您使用对外部不可见的数据进行操作的方法来创建对象，这是面向对象编程的基础。</target>
        </trans-unit>
        <trans-unit id="0c46afeb0966601574b297f1353d3cc0f47df196" translate="yes" xml:space="preserve">
          <source>The point in the document at which the selector should begin matching; similar to the context argument of the &lt;code&gt;$(selector, context)&lt;/code&gt; method.</source>
          <target state="translated">选择器应开始匹配的文档中的点；类似于 &lt;code&gt;$(selector, context)&lt;/code&gt; 方法的context参数。</target>
        </trans-unit>
        <trans-unit id="0a0db3d81595eb495dfe775005f5118fba49529a" translate="yes" xml:space="preserve">
          <source>The primary advantage of &lt;code&gt;jQuery.hasData(element)&lt;/code&gt; is that it does not create and associate a data object with the element if none currently exists. In contrast, &lt;code&gt;jQuery.data(element)&lt;/code&gt; always returns a data object to the caller, creating one if no data object previously existed.</source>
          <target state="translated">&lt;code&gt;jQuery.hasData(element)&lt;/code&gt; 的主要优点是，如果当前不存在数据对象，则它不会创建数据对象并将其与元素关联。相反， &lt;code&gt;jQuery.data(element)&lt;/code&gt; 始终将数据对象返回给调用方，如果以前不存在数据对象，则创建一个数据对象。</target>
        </trans-unit>
        <trans-unit id="acdb90577bf3f6aada029f8710eb364c8c78a2a9" translate="yes" xml:space="preserve">
          <source>The rate (in milliseconds) at which animations fire.</source>
          <target state="translated">动画播放的速度(以毫秒为单位)。</target>
        </trans-unit>
        <trans-unit id="cb10dad645475696bea64c8a19075d461c6a4dfa" translate="yes" xml:space="preserve">
          <source>The remaining parameter of &lt;code&gt;.animate()&lt;/code&gt; is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called &lt;code&gt;swing&lt;/code&gt;, and one that progresses at a constant pace, called &lt;code&gt;linear&lt;/code&gt;. More easing functions are available with the use of plug-ins, most notably the &lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI suite&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.animate()&lt;/code&gt; 的其余参数是命名要使用的缓动函数的字符串。缓动函数指定动画在动画中不同点处进行的速度。 jQuery库中唯一的缓动实现是默认的实现，称为 &lt;code&gt;swing&lt;/code&gt; ，并且以恒定的速度进行实现的 &lt;code&gt;linear&lt;/code&gt; 称为linear。通过使用插件，可以使用更多轻松功能，其中最著名的是&lt;a href=&quot;https://jqueryui.com/&quot;&gt;jQuery UI suite&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98e06470e3fa05cf5cc0dafb0b2ea20bf565f4ed" translate="yes" xml:space="preserve">
          <source>The result of the following code is a red background behind items 3, 4 and 5:</source>
          <target state="translated">以下代码的结果是在项目3、4、5后面有一个红色背景。</target>
        </trans-unit>
        <trans-unit id="5f17d80c2fe57707960ab0ce62ea8411233be366" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind all four elements. Using an HTML snippet as the &lt;code&gt;.add()&lt;/code&gt; method's argument (as in the third version), we can create additional elements on the fly and add those elements to the matched set of elements. Let's say, for example, that we want to alter the background of the list items along with a newly created paragraph:</source>
          <target state="translated">调用的结果是所有四个元素后面的红色背景。使用HTML片段作为 &lt;code&gt;.add()&lt;/code&gt; 方法的参数（如第三个版本），我们可以动态创建其他元素，并将这些元素添加到匹配的元素集中。举例来说，假设我们要更改列表项的背景以及新创建的段落：</target>
        </trans-unit>
        <trans-unit id="f5306f5e1616f9fad7b62559297b520b0e13420d" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind item 2. Since no selector expression is supplied, this preceding element is unequivocally included as part of the object. If one had been supplied, the element would be tested for a match before it was included.</source>
          <target state="translated">这个调用的结果是在第2项后面有一个红色背景。由于没有提供选择表达式,前面这个元素被明确地包含为对象的一部分。如果提供了一个选择表达式,那么这个元素在被包含之前会被测试是否匹配。</target>
        </trans-unit>
        <trans-unit id="b4fe25b8e98dc2a880ab00b6091306129b22d2b1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</source>
          <target state="translated">这个调用的结果是第4项后面的红色背景。由于我们没有提供选择器表达式,下面这个元素被明确地包含为对象的一部分。如果我们提供了一个选择表达式,那么这个元素在被包含之前就会被测试是否匹配。</target>
        </trans-unit>
        <trans-unit id="2bdd09e46848eac38bfa76febcbadcd077bcfffd" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</source>
          <target state="translated">这个调用的结果是在第1项和第2项后面有一个红色背景。由于我们没有提供选择表达式,前面这些元素被明确地包含为对象的一部分。如果我们提供了一个选择表达式,这些元素将在被包含之前被测试是否匹配。</target>
        </trans-unit>
        <trans-unit id="803dcb57e7c93f3e463b7c42ff56d2c06449aae1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.</source>
          <target state="translated">这个调用的结果是在项目1、2、4和5后面有一个红色背景。由于我们没有提供选择器表达式,所有的兄弟姐妹都是对象的一部分。如果我们提供了一个选择表达式,那么只有这四个项目中匹配的项目才会被包含。</target>
        </trans-unit>
        <trans-unit id="b43225fe6ce7a5b0e7693b20ab46719a0f4b3f89" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</source>
          <target state="translated">这个调用的结果是在第4项和第5项后面有一个红色背景。由于我们没有提供选择器表达式,以下这些元素被明确地包含为对象的一部分。如果我们提供了一个选择表达式,这些元素将在被包含之前进行匹配测试。</target>
        </trans-unit>
        <trans-unit id="0ed9f4feb04438548de3b013137694e77d57632b" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.</source>
          <target state="translated">由于我们没有提供选择器表达式,所有的子项目都是返回的jQuery对象的一部分。如果我们提供了一个,只有这三个项目中匹配的项目才会被包含在内。</target>
        </trans-unit>
        <trans-unit id="5a5d9de3fcbdb18a4bc188bea62cba2e34e884d1" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for item 2, as it is the only &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; that has a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; among its descendants.</source>
          <target state="translated">该调用的结果是项目2的红色背景，因为它是后代中唯一具有 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 的 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c89615ef14d3fbd60d050d9155e47ebd4ba8656f" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.</source>
          <target state="translated">这个调用的结果是项目3的红色背景。请注意,所提供的索引是基于零的,并且是指jQuery对象内元素的位置,而不是DOM树内的位置。</target>
        </trans-unit>
        <trans-unit id="14fb455b8bbff10842086b58eac8f01cab3c1afe" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 1, 3 and 5, as they do not match the selector.</source>
          <target state="translated">此调用的结果是项目1、3和5的背景为红色,因为它们与选择器不匹配。</target>
        </trans-unit>
        <trans-unit id="3a1805e37c0ac93512567135d69322d80bf04492" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 1, 3, and 5, as they match the selector (recall that &lt;code&gt;:even&lt;/code&gt; and &lt;code&gt;:odd&lt;/code&gt; use 0-based indexing).</source>
          <target state="translated">调用的结果是项目1、3和5与选择器匹配的红色背景（请注意 &lt;code&gt;:even&lt;/code&gt; 和 &lt;code&gt;:odd&lt;/code&gt; 使用基于0的索引）。</target>
        </trans-unit>
        <trans-unit id="008bfcb10c48746c779c107b0cd2e4012a84d492" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).</source>
          <target state="translated">这个调用的结果是第2项和第4项的背景是红色的,因为它们不匹配选择器(记得:偶数和:奇数使用基于0的索引)。</target>
        </trans-unit>
        <trans-unit id="339946000b39d9fa707e17614083ed036b66079a" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 2, 4, and 6, as they match the selector.</source>
          <target state="translated">这个调用的结果是项目2、4和6的背景为红色,因为它们与选择器相匹配。</target>
        </trans-unit>
        <trans-unit id="fa883f229b6f69a81b08da92e713eb4a1caff5f9" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.</source>
          <target state="translated">这个调用的结果是为项目3,4,5提供一个红色的背景。请注意,所提供的索引是基于零的,是指jQuery对象内元素的位置,而不是DOM树内。</target>
        </trans-unit>
        <trans-unit id="db1517b2e444023a7127a38d5c51bcdff691e73b" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the final item.</source>
          <target state="translated">这个调用的结果是最终项目的红色背景。</target>
        </trans-unit>
        <trans-unit id="facf65b81d3f8a612a59fa241dcd3b82f9307f27" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the first item.</source>
          <target state="translated">这个调用的结果是第一项的背景为红色。</target>
        </trans-unit>
        <trans-unit id="0c500ec67ebb649d2e140b32763333d3bacd2958" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the first, third &amp;amp; 5th items.</source>
          <target state="translated">该呼叫的结果是第一，第三和第五项的红色背景。</target>
        </trans-unit>
        <trans-unit id="385666a4367c3ceaa277ae989ffa6d62efba1ee5" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.</source>
          <target state="translated">调用的结果是2级列表，项II和1级列表的红色背景（在DOM树上一直到 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 元素）。由于我们不提供选择器表达式，因此所有祖先都是返回的jQuery对象的一部分。如果我们提供了一项，则仅包括其中的匹配项。</target>
        </trans-unit>
        <trans-unit id="22aacd8c82ea9af8e8daf6e3c4d83d62f3a11bb2" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</source>
          <target state="translated">这个调用的结果是2级列表的红色背景。由于我们没有提供选择器表达式,父元素被明确地包含为对象的一部分。如果我们提供了一个选择表达式,该元素在被包含之前会被测试是否匹配。</target>
        </trans-unit>
        <trans-unit id="fb4d7a14c05d95a1f5a2597e9018afb9d4fc4078" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background for the second &amp;amp; 4th items.</source>
          <target state="translated">呼叫的结果是第二项和第四项的红色背景。</target>
        </trans-unit>
        <trans-unit id="759e58f5af381c9ae58e15d8327b13ec00b52925" translate="yes" xml:space="preserve">
          <source>The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.</source>
          <target state="translated">这个调用的结果是A、B、1、2、3和C项的背景为红色,即使II项与选择器表达式相匹配,它也不包括在结果中,只有子孙才被认为是匹配的候选者。</target>
        </trans-unit>
        <trans-unit id="8542609c7db1f3303873f6a2002911ee15c9ea8e" translate="yes" xml:space="preserve">
          <source>The result of this call is the string, &lt;code&gt;&quot;two,four,six,eight&quot;&lt;/code&gt;.</source>
          <target state="translated">调用的结果是字符串 &lt;code&gt;&quot;two,four,six,eight&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="485440b7c20f82cfee29dc2091cb4a9c40a2f99a" translate="yes" xml:space="preserve">
          <source>The result of this call would be a red background on item 1.</source>
          <target state="translated">这一呼吁的结果将是项目1的红色背景。</target>
        </trans-unit>
        <trans-unit id="271ba0250ab50aa59f8fc29f25ec5ee041c7dddd" translate="yes" xml:space="preserve">
          <source>The result of this is that it becomes simple to construct complex lists of callbacks where input values can be passed through to as many functions as needed with ease.</source>
          <target state="translated">这样做的结果是,构建复杂的回调列表变得很简单,输入值可以轻松地传递给需要的任何一个函数。</target>
        </trans-unit>
        <trans-unit id="2e630df4612cdefc2e2262290e72aa29c13c7a13" translate="yes" xml:space="preserve">
          <source>The result would look like this:</source>
          <target state="translated">结果是这样的。</target>
        </trans-unit>
        <trans-unit id="57cf4e5bb5314a409449a88f58bf0d0b43b88262" translate="yes" xml:space="preserve">
          <source>The resulting DOM structure would be:</source>
          <target state="translated">由此产生的DOM结构将是:</target>
        </trans-unit>
        <trans-unit id="141af9b6cff1007634750533839c59d6c52a9d14" translate="yes" xml:space="preserve">
          <source>The returned jQuery object contains zero or more elements for each element in the original set, in reverse document order</source>
          <target state="translated">返回的jQuery对象包含0个或更多的元素,为原始集合中的每一个元素,按照反向文档顺序。</target>
        </trans-unit>
        <trans-unit id="07ad1547f50f7c20a1cd7579032c984beb61889d" translate="yes" xml:space="preserve">
          <source>The returned jQuery object contains zero or one element for each element in the original set, in document order</source>
          <target state="translated">返回的jQuery对象包含0或1个元素,按照文档顺序,为原始集合中的每个元素。</target>
        </trans-unit>
        <trans-unit id="f6fe1e1f1407019a7bb0e31dc8b4968b82567270" translate="yes" xml:space="preserve">
          <source>The same is true for other dynamic attributes, such as &lt;code&gt;selected&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">其他动态属性（例如 &lt;code&gt;selected&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; )也是如此。</target>
        </trans-unit>
        <trans-unit id="59c475723db5a18006828a3888cc67bbf8c09867" translate="yes" xml:space="preserve">
          <source>The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page.</source>
          <target state="translated">脚本是在全局上下文中执行的,所以它可以引用其他变量和使用jQuery函数。包含的脚本可以对当前页面产生一定的影响。</target>
        </trans-unit>
        <trans-unit id="d9cfc35df62d2b3a52dae65a48561a4349497359" translate="yes" xml:space="preserve">
          <source>The second and third formulations of this function create a jQuery object using one or more DOM elements that were already selected in some other way. A jQuery object is created from the array elements in the order they appeared in the array; unlike most other multi-element jQuery operations, the elements are not sorted in DOM order. Elements will be copied from the array as-is and won't be unwrapped if they're already jQuery collections.</source>
          <target state="translated">这个函数的第二和第三种形式是使用一个或多个DOM元素创建一个jQuery对象,这些元素已经以其他方式被选中。一个jQuery对象是由数组中的元素按照它们在数组中出现的顺序创建的,不像其他大多数多元素的jQuery操作,元素不按DOM顺序排序。如果元素已经是jQuery集合,那么它们将被原样复制到数组中,不会被解包。</target>
        </trans-unit>
        <trans-unit id="09640a2d2f7e5680918d2964d2624ebb2a3d2a31" translate="yes" xml:space="preserve">
          <source>The second array-like object to merge into the first, unaltered.</source>
          <target state="translated">第二个数组类对象合并到第一个数组类对象中,不做改动。</target>
        </trans-unit>
        <trans-unit id="4bc6e7d14914bf71bafefa2bfaf2aaad9add698b" translate="yes" xml:space="preserve">
          <source>The second form of this method allows us to filter elements against a function rather than a selector. For each element, if the function returns &lt;code&gt;true&lt;/code&gt; (or a &quot;truthy&quot; value), the element will be included in the filtered set; otherwise, it will be excluded. Suppose we have a somewhat more involved HTML snippet:</source>
          <target state="translated">此方法的第二种形式使我们可以根据函数而不是选择器来过滤元素。对于每个元素，如果函数返回 &lt;code&gt;true&lt;/code&gt; （或&amp;ldquo;真实&amp;rdquo;值），则该元素将包含在过滤后的集中；否则将被排除。假设我们有一些涉及更多的HTML代码段：</target>
        </trans-unit>
        <trans-unit id="fcb5168b1f0fd8e8dcac15e31943b6a43f6f6d0d" translate="yes" xml:space="preserve">
          <source>The second form of this method evaluates expressions related to elements based on a function rather than a selector. For each element, if the function returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;.is()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; as well. For example, given a somewhat more involved HTML snippet:</source>
          <target state="translated">此方法的第二种形式是基于函数而不是选择器来评估与元素相关的表达式。对于每个元素，如果函数返回 &lt;code&gt;true&lt;/code&gt; ，则 &lt;code&gt;.is()&lt;/code&gt; 返回 &lt;code&gt;true&lt;/code&gt; 。例如，给出一些涉及更多的HTML代码段：</target>
        </trans-unit>
        <trans-unit id="2a154816850f6de6770577387c99f209db6b6ece" translate="yes" xml:space="preserve">
          <source>The second inner &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; could be replaced with the specified HTML:</source>
          <target state="translated">第二个内部 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 可以用指定的HTML替换：</target>
        </trans-unit>
        <trans-unit id="d8e3344300bcc1acfb7bb30ab9c54d31a312c9e1" translate="yes" xml:space="preserve">
          <source>The second statement of the code above correctly refers to the &lt;code&gt;data-last-value&lt;/code&gt; attribute of the element. In case no data is stored with the passed key, jQuery searches among the attributes of the element, converting a camel-cased string into a dashed string and then prepending &lt;code&gt;data-&lt;/code&gt; to the result. So, the string &lt;code&gt;lastValue&lt;/code&gt; is converted to &lt;code&gt;data-last-value&lt;/code&gt;.</source>
          <target state="translated">上面代码的第二条语句正确地引用了元素的 &lt;code&gt;data-last-value&lt;/code&gt; 属性。如果没有任何数据与传递的键一起存储，则jQuery在元素的属性中进行搜索，将驼峰式字符串转换为虚线字符串，然后将 &lt;code&gt;data-&lt;/code&gt; 作为结果。因此，字符串 &lt;code&gt;lastValue&lt;/code&gt; 被转换为 &lt;code&gt;data-last-value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c42dd9df1106a653c3e574c2ee9fc8431d825de" translate="yes" xml:space="preserve">
          <source>The second time we apply &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt;, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; class is returned to the single &lt;code&gt;tumble&lt;/code&gt; value:</source>
          <target state="translated">第二次应用 &lt;code&gt;$( &quot;div.tumble&quot; ).toggleClass( &quot;bounce&quot; )&lt;/code&gt; ， &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 类返回到单个 &lt;code&gt;tumble&lt;/code&gt; 值：</target>
        </trans-unit>
        <trans-unit id="665befe924907801a3530bb57b4cbf891ba537dd" translate="yes" xml:space="preserve">
          <source>The second version of &lt;code&gt;.animate()&lt;/code&gt; provides a &lt;code&gt;step&lt;/code&gt; option &amp;mdash; a callback function that is fired at each step of the animation. This function is useful for enabling custom animation types or altering the animation as it is occurring. It accepts two arguments (&lt;code&gt;now&lt;/code&gt; and &lt;code&gt;fx&lt;/code&gt;), and &lt;code&gt;this&lt;/code&gt; is set to the DOM element being animated.</source>
          <target state="translated">&lt;code&gt;.animate()&lt;/code&gt; 的第二个版本提供了一个 &lt;code&gt;step&lt;/code&gt; 选项-在动画的每一步都触发的回调函数。此功能对于启用自定义动画类型或在动画发生时对其进行更改非常有用。它接受两个参数（ &lt;code&gt;now&lt;/code&gt; 和 &lt;code&gt;fx&lt;/code&gt; ），并将 &lt;code&gt;this&lt;/code&gt; 设置为要设置动画的DOM元素。</target>
        </trans-unit>
        <trans-unit id="9ae52fd7621257d963ead7e4f0853cac0c5348a5" translate="yes" xml:space="preserve">
          <source>The second version of &lt;code&gt;.toggleClass()&lt;/code&gt; uses the second parameter for determining whether the class should be added or removed. If this parameter's value is &lt;code&gt;true&lt;/code&gt;, then the class is added; if &lt;code&gt;false&lt;/code&gt;, the class is removed. In essence, the statement:</source>
          <target state="translated">&lt;code&gt;.toggleClass()&lt;/code&gt; 的第二个版本使用第二个参数来确定是否应添加或删除该类。如果此参数的值为 &lt;code&gt;true&lt;/code&gt; ，则添加类；否则，将添加类。如果为 &lt;code&gt;false&lt;/code&gt; ，则删除该类。本质上，该语句：</target>
        </trans-unit>
        <trans-unit id="efaf7d0124b927367a9b0ae3fed5a220228eea05" translate="yes" xml:space="preserve">
          <source>The second version of the &lt;code&gt;.not()&lt;/code&gt; method allows us to remove elements from the matched set, assuming we have found those elements previously by some other means. For example, suppose our list had an id applied to one of its items:</source>
          <target state="translated">&lt;code&gt;.not()&lt;/code&gt; 的第二个版本假设我们之前已经通过其他方法找到了元素方法使我们能够从匹配集中删除元素。例如，假设我们的列表中有一个ID应用于其中的一项：</target>
        </trans-unit>
        <trans-unit id="db488502c779e5855624bcb94b0d9eac6e51fef3" translate="yes" xml:space="preserve">
          <source>The second version of the method accepts a Boolean parameter. If this parameter is &lt;code&gt;true&lt;/code&gt;, then the matched elements are shown; if &lt;code&gt;false&lt;/code&gt;, the elements are hidden. In essence, the statement:</source>
          <target state="translated">该方法的第二个版本接受布尔参数。如果此参数为 &lt;code&gt;true&lt;/code&gt; ，则显示匹配的元素；否则为false。如果为 &lt;code&gt;false&lt;/code&gt; ，则元素被隐藏。本质上，该语句：</target>
        </trans-unit>
        <trans-unit id="14129c4f8fda0ecb933fddabaa46bdf397f7bc5b" translate="yes" xml:space="preserve">
          <source>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:</source>
          <target state="translated">这个方法的第二个版本允许我们指定一个回调函数。这个回调函数将为每一个匹配的元素调用一次;它应该返回一个DOM元素、jQuery对象或HTML片段来包装相应元素的内容。例如</target>
        </trans-unit>
        <trans-unit id="50749b1d27f953b40a33c2be2b260d7a6793cd44" translate="yes" xml:space="preserve">
          <source>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:</source>
          <target state="translated">这个方法的第二个版本允许我们指定一个回调函数。这个回调函数将为每一个匹配的元素调用一次;它应该返回一个DOM元素、jQuery对象或HTML片段来包装相应的元素。例如,我们可以使用</target>
        </trans-unit>
        <trans-unit id="f395dc88a156a3c3c8af5ffcd5884c85b81cc391" translate="yes" xml:space="preserve">
          <source>The selectors are a composition of CSS and custom additions. All selectors available in jQuery are documented on the &lt;a href=&quot;category/selectors&quot;&gt;Selectors API page&lt;/a&gt;.</source>
          <target state="translated">选择器是CSS和自定义添加项的组合。jQuery中可用的所有选择器都记录在&amp;ldquo; &lt;a href=&quot;category/selectors&quot;&gt;选择器API&amp;rdquo;页面上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="113d83a724dd060af5c92489a395d6836663109a" translate="yes" xml:space="preserve">
          <source>The standard events in the Document Object Model are: &lt;code&gt;blur&lt;/code&gt;, &lt;code&gt;focus&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt;, &lt;code&gt;resize&lt;/code&gt;, &lt;code&gt;scroll&lt;/code&gt;, &lt;code&gt;unload&lt;/code&gt;, &lt;code&gt;beforeunload&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;dblclick&lt;/code&gt;, &lt;code&gt;mousedown&lt;/code&gt;, &lt;code&gt;mouseup&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;mouseover&lt;/code&gt;, &lt;code&gt;mouseout&lt;/code&gt;, &lt;code&gt;mouseenter&lt;/code&gt;, &lt;code&gt;mouseleave&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;submit&lt;/code&gt;, &lt;code&gt;keydown&lt;/code&gt;, &lt;code&gt;keypress,&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt;. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery's event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.</source>
          <target state="translated">在文档对象模型标准的事件是： &lt;code&gt;blur&lt;/code&gt; ， &lt;code&gt;focus&lt;/code&gt; ， &lt;code&gt;load&lt;/code&gt; ， &lt;code&gt;resize&lt;/code&gt; ， &lt;code&gt;scroll&lt;/code&gt; ， &lt;code&gt;unload&lt;/code&gt; ， &lt;code&gt;beforeunload&lt;/code&gt; ， &lt;code&gt;click&lt;/code&gt; ， &lt;code&gt;dblclick&lt;/code&gt; ， &lt;code&gt;mousedown&lt;/code&gt; ， &lt;code&gt;mouseup&lt;/code&gt; ， &lt;code&gt;mousemove&lt;/code&gt; ， &lt;code&gt;mouseover&lt;/code&gt; ， &lt;code&gt;mouseout&lt;/code&gt; ， &lt;code&gt;mouseenter&lt;/code&gt; ， &lt;code&gt;mouseleave&lt;/code&gt; ， &lt;code&gt;change&lt;/code&gt; ， &lt;code&gt;select&lt;/code&gt; ， &lt;code&gt;submit&lt;/code&gt; ， &lt;code&gt;keydown&lt;/code&gt; ， &lt;code&gt;keypress,&lt;/code&gt; 并 &lt;code&gt;keyup&lt;/code&gt; 。由于DOM事件名称对某些元素具有预定义的含义，因此不建议将它们用于其他目的。jQuery的事件模型可以通过元素上的任何名称触发事件，并且该事件在该元素所属的DOM树中传播（如果有）。</target>
        </trans-unit>
        <trans-unit id="d7dc41bbfc0d4e44cab83fd01605e79bb3468eef" translate="yes" xml:space="preserve">
          <source>The string representing an easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called &lt;code&gt;swing&lt;/code&gt;, and one that progresses at a constant pace, called &lt;code&gt;linear&lt;/code&gt;. More easing functions are available with the use of plug-ins, most notably the &lt;a href=&quot;https://jqueryui.com&quot;&gt;jQuery UI suite&lt;/a&gt;.</source>
          <target state="translated">表示缓动函数的字符串指定动画在动画内不同点处进行的速度。jQuery库中唯一的缓动实现是默认的实现（称为 &lt;code&gt;swing&lt;/code&gt; ）和一个以恒定速度前进的实现（称为 &lt;code&gt;linear&lt;/code&gt; )。通过使用插件，可以使用更多轻松功能，最著名的是&lt;a href=&quot;https://jqueryui.com&quot;&gt;jQuery UI suite&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b9a2664d68de74010dd9b594714895a2e4e5ee52" translate="yes" xml:space="preserve">
          <source>The string to trim.</source>
          <target state="translated">要修剪的绳子。</target>
        </trans-unit>
        <trans-unit id="b5a92059af11477af58d65e98372ed264b36cef5" translate="yes" xml:space="preserve">
          <source>The style definition is present to make the target element small enough to be scrollable:</source>
          <target state="translated">样式定义的存在是为了让目标元素小到可以滚动。</target>
        </trans-unit>
        <trans-unit id="5deae09e7c61eea99ec8ef3ea6e54e9cb20eaf6c" translate="yes" xml:space="preserve">
          <source>The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation.</source>
          <target state="translated">要设置为每个匹配元素的内容的文本。当提供Number或Boolean时,它将被转换为一个字符串表示。</target>
        </trans-unit>
        <trans-unit id="5f5b15e66531244890cf5d811d8f2c84ea4027f2" translate="yes" xml:space="preserve">
          <source>The third form of the &lt;code&gt;.unbind()&lt;/code&gt; method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:</source>
          <target state="translated">&lt;code&gt;.unbind()&lt;/code&gt; 的第三种形式当我们希望从自身内部解除绑定处理程序时方法。例如，假设我们只希望触发一次事件处理程序三遍：</target>
        </trans-unit>
        <trans-unit id="6c28ffbb3cc7d012a98f2607f053d7e64eaa8d79" translate="yes" xml:space="preserve">
          <source>The translation function that is provided to this method is called for each top-level element in the array or object and is passed two arguments: The element's value and its index or key within the array or object.</source>
          <target state="translated">提供给本方法的翻译函数对数组或对象中的每个顶层元素进行调用,并传递两个参数。元素的值和它在数组或对象中的索引或键。</target>
        </trans-unit>
        <trans-unit id="258e9a1f5851882139fe20ce70223b4486206779" translate="yes" xml:space="preserve">
          <source>The type of a function is &quot;function&quot;.</source>
          <target state="translated">函数的类型是 &quot;函数&quot;。</target>
        </trans-unit>
        <trans-unit id="250061ae6c3eaba58f68c8b0705fa5283b17f50a" translate="yes" xml:space="preserve">
          <source>The type of a number is &quot;number&quot;.</source>
          <target state="translated">数字的类型是 &quot;数字&quot;。</target>
        </trans-unit>
        <trans-unit id="7d86a1b42215eee2fd5f10b41fcbfe8d78a85728" translate="yes" xml:space="preserve">
          <source>The type of a string is &quot;string&quot;.</source>
          <target state="translated">字符串的类型是 &quot;字符串&quot;。</target>
        </trans-unit>
        <trans-unit id="de7be4ab84b82bbdfbeec8971b1864a663638bfd" translate="yes" xml:space="preserve">
          <source>The type of an array is &quot;object&quot;:</source>
          <target state="translated">数组的类型是 &quot;对象&quot;。</target>
        </trans-unit>
        <trans-unit id="a18897493ed6d8b67961ab81a7e1840ec5872f8e" translate="yes" xml:space="preserve">
          <source>The type of an object is &quot;object&quot;:</source>
          <target state="translated">对象的类型是 &quot;对象&quot;。</target>
        </trans-unit>
        <trans-unit id="8bb813a8f15ca076b4aeffe26fb2a446d33302d2" translate="yes" xml:space="preserve">
          <source>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).</source>
          <target state="translated">预计来自服务器的数据类型。默认值:智能猜测(xml、json、脚本、文本、html)。</target>
        </trans-unit>
        <trans-unit id="65b1a1be3665cab47e929452b9514cab452f93f3" translate="yes" xml:space="preserve">
          <source>The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:</source>
          <target state="translated">你期望从服务器传回的数据类型,如果没有指定,jQuery会根据响应的MIME类型来推断。如果没有指定,jQuery将尝试根据响应的MIME类型来推断(XML MIME类型将产生XML,在1.4中JSON将产生一个JavaScript对象,在1.4中script将执行脚本,其他任何东西将作为字符串返回)。可用的类型(以及作为第一个参数传递给你的成功回调的结果)是。</target>
        </trans-unit>
        <trans-unit id="5e4f1e6bc7e33b940ea0ca5958d289d963ae06e7" translate="yes" xml:space="preserve">
          <source>The type of queue that needs to be observed.</source>
          <target state="translated">需要观察的队列类型。</target>
        </trans-unit>
        <trans-unit id="ac03d521d35e958a333e1be1023588d7bb5c2990" translate="yes" xml:space="preserve">
          <source>The unminified jQuery source itself includes a list of default converters, which effectively illustrates how they can be used:</source>
          <target state="translated">unminified jQuery源码本身就包含了一个默认的转换器列表,它有效地说明了如何使用它们。</target>
        </trans-unit>
        <trans-unit id="eb4b9ca98fca80215d567f08acc1e010086fbd76" translate="yes" xml:space="preserve">
          <source>The updated set of elements can be used in a following (chained) method, or assigned to a variable for later use. For example:</source>
          <target state="translated">更新后的元素集可以在后续(链式)方法中使用,或者分配到一个变量中供以后使用。例如:</target>
        </trans-unit>
        <trans-unit id="7dc333f2557363d5ea2debb3f8b7027ef58060e4" translate="yes" xml:space="preserve">
          <source>The usefulness of the &lt;code&gt;.stop()&lt;/code&gt; method is evident when we need to animate an element on &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt;:</source>
          <target state="translated">当需要在 &lt;code&gt;mouseenter&lt;/code&gt; 和 &lt;code&gt;mouseleave&lt;/code&gt; 上设置元素动画时， &lt;code&gt;.stop()&lt;/code&gt; 方法的有用性显而易见：</target>
        </trans-unit>
        <trans-unit id="7ddb3ecf6925c2baa005d5f8268928b76546a56a" translate="yes" xml:space="preserve">
          <source>The value of this property is typically equal to &lt;code&gt;document&lt;/code&gt;, as this is the default context for jQuery objects if none is supplied. The context may differ if, for example, the object was created by searching within an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; or XML document.</source>
          <target state="translated">此属性的值通常等于 &lt;code&gt;document&lt;/code&gt; ，因为这是jQuery对象的默认上下文（如果未提供的话）。例如，如果对象是通过在 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 中搜索创建的，则上下文可能会有所不同或XML文档中。</target>
        </trans-unit>
        <trans-unit id="d165304e00442e2fdb141efe014b25a469d208d2" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.height()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.height()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">当元素或其父元素被隐藏时， &lt;code&gt;.height()&lt;/code&gt; 报告的值不保证是准确的。为了获得准确的值，请在使用 &lt;code&gt;.height()&lt;/code&gt; 之前确保该元素是可见的。 jQuery会尝试暂时显示元素，然后再隐藏它以测量其尺寸，但这是不可靠的，并且（即使准确）也会严重影响页面性能。此显示和隐藏度量功能可能会在jQuery的未来版本中删除。</target>
        </trans-unit>
        <trans-unit id="8c0af6f379e115697c7e674c117df786f0e63a85" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.innerHeight()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.innerHeight()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">当隐藏元素或其父元素时，不能保证 &lt;code&gt;.innerHeight()&lt;/code&gt; 报告的值是准确的。为了获得准确的值，请在使用 &lt;code&gt;.innerHeight()&lt;/code&gt; 之前确保该元素可见。 jQuery会尝试暂时显示元素，然后再隐藏它以测量其尺寸，但这是不可靠的，并且（即使准确）也会严重影响页面性能。此显示和隐藏度量功能可能会在jQuery的未来版本中删除。</target>
        </trans-unit>
        <trans-unit id="8991a4ea8bbeb4de8eb903eec32a3d76ab3261d6" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.innerWidth()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.innerWidth()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">当隐藏元素或其父元素时，不能保证 &lt;code&gt;.innerWidth()&lt;/code&gt; 报告的值是准确的。要获得准确的值，请在使用 &lt;code&gt;.innerWidth()&lt;/code&gt; 之前确保该元素可见。 jQuery会尝试暂时显示元素，然后再隐藏它以测量其尺寸，但这是不可靠的，并且（即使准确）也会严重影响页面性能。此显示和隐藏度量功能可能会在jQuery的未来版本中删除。</target>
        </trans-unit>
        <trans-unit id="d91533a4f81b4096f3edfca19014a9026436ec64" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.outerHeight()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.outerHeight()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">当元素或其父元素被隐藏时，不能保证 &lt;code&gt;.outerHeight()&lt;/code&gt; 报告的值是准确的。为了获得准确的值，请在使用 &lt;code&gt;.outerHeight()&lt;/code&gt; 之前确保该元素可见。 jQuery会尝试暂时显示元素，然后再隐藏它以测量其尺寸，但这是不可靠的，并且（即使准确）也会严重影响页面性能。此显示和隐藏度量功能可能会在jQuery的未来版本中删除。</target>
        </trans-unit>
        <trans-unit id="dcd3d5a9284c46e459ea9e01e158794d00a13f65" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.outerWidth()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.outerWidth()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">当元素或其父元素被隐藏时，不能保证 &lt;code&gt;.outerWidth()&lt;/code&gt; 报告的值是准确的。为了获得准确的值，请在使用 &lt;code&gt;.outerWidth()&lt;/code&gt; 之前确保该元素可见。 jQuery会尝试暂时显示元素，然后再隐藏它以测量其尺寸，但这是不可靠的，并且（即使准确）也会严重影响页面性能。此显示和隐藏度量功能可能会在jQuery的未来版本中删除。</target>
        </trans-unit>
        <trans-unit id="2ae90c5e2d8c736238c1834e07b1b20df9da99b3" translate="yes" xml:space="preserve">
          <source>The value reported by &lt;code&gt;.width()&lt;/code&gt; is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using &lt;code&gt;.width()&lt;/code&gt;. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery.</source>
          <target state="translated">隐藏元素或它的父元素时，不能保证 &lt;code&gt;.width()&lt;/code&gt; 报告的值是准确的。为了获得准确的值，请在使用 &lt;code&gt;.width()&lt;/code&gt; 之前确保该元素可见。jQuery会尝试临时显示元素，然后再隐藏它以测量其尺寸，但这是不可靠的，并且（即使准确）也会严重影响页面性能。此显示和隐藏度量功能可能会在jQuery的未来版本中删除。</target>
        </trans-unit>
        <trans-unit id="4b826fb647f77daf90366e276f5a2041c3eea0d6" translate="yes" xml:space="preserve">
          <source>The value to be tested.</source>
          <target state="translated">要测试的数值。</target>
        </trans-unit>
        <trans-unit id="5f9706fe37a21ebb4f5356314e9dbb0f193612de" translate="yes" xml:space="preserve">
          <source>The value to search for.</source>
          <target state="translated">要搜索的价值。</target>
        </trans-unit>
        <trans-unit id="df08275a2c09a868605d7342becb61e11202ec4a" translate="yes" xml:space="preserve">
          <source>The values of &lt;code&gt;recursiveEncoded&lt;/code&gt; and &lt;code&gt;recursiveDecoded&lt;/code&gt; are alerted as follows:</source>
          <target state="translated">警报 &lt;code&gt;recursiveEncoded&lt;/code&gt; 和 &lt;code&gt;recursiveDecoded&lt;/code&gt; 的值如下：</target>
        </trans-unit>
        <trans-unit id="19e0e1cb47a895c4adce508484a0fbdad4d1c662" translate="yes" xml:space="preserve">
          <source>The values of &lt;code&gt;shallowEncoded&lt;/code&gt; and &lt;code&gt;shallowDecoded&lt;/code&gt; are alerted as follows:</source>
          <target state="translated">&lt;code&gt;shallowDecoded&lt;/code&gt; 以下警告的 &lt;code&gt;shallowEncoded&lt;/code&gt; 和shallowDecoded值：</target>
        </trans-unit>
        <trans-unit id="56a99608838cb4e83a0ff0bacdd7885d4ca584ef" translate="yes" xml:space="preserve">
          <source>The variation you choose is generally a matter of style or convenience.</source>
          <target state="translated">你选择的变化一般是风格或方便的问题。</target>
        </trans-unit>
        <trans-unit id="98b4a5d36b3f75dae7b5b98ef86f8721c4b2115f" translate="yes" xml:space="preserve">
          <source>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">垂直滚动位置与可滚动区域上方从视图中隐藏的像素数相同。如果滚动条位于最顶部，或者元素不可滚动，则此数字将为 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="502041741bb29d2d0ce2d7cb3f9f058410872bd0" translate="yes" xml:space="preserve">
          <source>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the &lt;code&gt;scrollTop&lt;/code&gt; positions the vertical scroll of each matched element.</source>
          <target state="translated">垂直滚动位置与可滚动区域上方从视图中隐藏的像素数相同。设置 &lt;code&gt;scrollTop&lt;/code&gt; 将每个匹配元素的垂直滚动位置。</target>
        </trans-unit>
        <trans-unit id="68009f554546520daab11a31781a53314e2258bf" translate="yes" xml:space="preserve">
          <source>Their width and height are explicitly set to 0.</source>
          <target state="translated">它们的宽度和高度被明确设置为0。</target>
        </trans-unit>
        <trans-unit id="51a6b9ab62274f73e087c9eaa4c7881cd846e98d" translate="yes" xml:space="preserve">
          <source>Thenable</source>
          <target state="translated">Thenable</target>
        </trans-unit>
        <trans-unit id="bba170ab9f1988f7e0b5177b2872e6c65a73fd8b" translate="yes" xml:space="preserve">
          <source>There are lot of plugins that leverage jQuery's selectors in other ways. The validation plugin accepts a selector to specify a dependency, whether an input is required or not:</source>
          <target state="translated">有很多插件在其他方面利用了jQuery的选择器。验证插件接受一个选择器来指定依赖关系,不管是否需要输入。</target>
        </trans-unit>
        <trans-unit id="2ce0d5f676018adf414ee9fb049b9a0ccdf3b569" translate="yes" xml:space="preserve">
          <source>There are shorthand methods for some events such as &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the &lt;a href=&quot;category/events&quot;&gt;events category&lt;/a&gt;.</source>
          <target state="translated">对于某些事件，有一些速记方法，例如&lt;a href=&quot;click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;，可用于附加或触发事件处理程序。有关速记方法的完整列表，请参阅&lt;a href=&quot;category/events&quot;&gt;事件类别&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b6fda1d75631a26b3fa9aabdbc4d04428691220" translate="yes" xml:space="preserve">
          <source>There are shorthand methods for some standard browser events such as &lt;a href=&quot;click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the &lt;a href=&quot;category/events&quot;&gt;events category&lt;/a&gt;.</source>
          <target state="translated">对于某些标准浏览器事件，有一些简便方法，例如&lt;a href=&quot;click&quot;&gt; &lt;code&gt;.click()&lt;/code&gt; &lt;/a&gt;，可用于附加或触发事件处理程序。有关速记方法的完整列表，请参阅&lt;a href=&quot;category/events&quot;&gt;事件类别&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d63711a0adcaf5fcd03bba3c3b147f0181be2820" translate="yes" xml:space="preserve">
          <source>There are two specific use cases for which jQuery.sub() was created. The first was for providing a painless way of overriding jQuery methods without completely destroying the original methods and another was for helping to do encapsulation and basic namespacing for jQuery plugins.</source>
          <target state="translated">jQuery.sub()的诞生有两个特定的用例。第一个是为了提供一种无痛的方式来覆盖jQuery方法而不完全破坏原有的方法,另一个是为了帮助jQuery插件做封装和基本的命名间距。</target>
        </trans-unit>
        <trans-unit id="f92882ffa32ba59639260af20d453135f132e2a1" translate="yes" xml:space="preserve">
          <source>There are two types of events:</source>
          <target state="translated">有两种类型的事件。</target>
        </trans-unit>
        <trans-unit id="d166c8f570311888ce1e4d2c5d8012b91e58818d" translate="yes" xml:space="preserve">
          <source>There is also &lt;code&gt;$(document).on( &quot;ready&quot;, handler )&lt;/code&gt;, &lt;em&gt;deprecated as of jQuery 1.8 and removed in jQuery 3.0&lt;/em&gt;. Note that if the DOM becomes ready before this event is attached, the handler &lt;em&gt;will not be executed&lt;/em&gt;.</source>
          <target state="translated">还有 &lt;code&gt;$(document).on( &quot;ready&quot;, handler )&lt;/code&gt; ，&lt;em&gt;从jQuery 1.8开始不推荐使用，并在jQuery 3.0中删除&lt;/em&gt;。请注意，如果在附加此事件之前DOM准备就绪，&lt;em&gt;则不会执行&lt;/em&gt;处理程序。</target>
        </trans-unit>
        <trans-unit id="b2adf959188684f5fb25abf351d01408eb8540a8" translate="yes" xml:space="preserve">
          <source>These are callbacks that you can subscribe to within the Ajax request object, like so:</source>
          <target state="translated">这些是你可以在Ajax请求对象中订阅的回调,就像这样。</target>
        </trans-unit>
        <trans-unit id="3bb9908eefdc7f5d52352839085856ff586bef42" translate="yes" xml:space="preserve">
          <source>These can be added as callbacks to a &lt;code&gt;$.Callbacks&lt;/code&gt; list and invoked as follows:</source>
          <target state="translated">这些可以作为回调添加到 &lt;code&gt;$.Callbacks&lt;/code&gt; 列表中，并可以按以下方式调用：</target>
        </trans-unit>
        <trans-unit id="f3045922e3813d89836a97e9e2f7086202e8607c" translate="yes" xml:space="preserve">
          <source>These events are triggered on the &lt;code&gt;document&lt;/code&gt;, calling any handlers which may be listening. You can listen for these events like so:</source>
          <target state="translated">这些事件在 &lt;code&gt;document&lt;/code&gt; 上触发，调用可能正在侦听的所有处理程序。您可以像这样监听这些事件：</target>
        </trans-unit>
        <trans-unit id="7e88bd0cd93766cee13f54b1e8fa0d73ba477db4" translate="yes" xml:space="preserve">
          <source>These functions assist with common idioms encountered when performing Ajax tasks.</source>
          <target state="translated">这些功能有助于处理在执行Ajax任务时遇到的常见习惯用语。</target>
        </trans-unit>
        <trans-unit id="bbe40564276f220415e365fe124b886a4b1abcfa" translate="yes" xml:space="preserve">
          <source>These methods adjust the opacity of elements.</source>
          <target state="translated">这些方法可以调整元素的不透明度。</target>
        </trans-unit>
        <trans-unit id="a5dceab1cd6454e730b2a57d9f7b0169f076d3c5" translate="yes" xml:space="preserve">
          <source>These methods allow us to associate arbitrary data with specific DOM elements.</source>
          <target state="translated">这些方法允许我们将任意数据与特定的DOM元素关联起来。</target>
        </trans-unit>
        <trans-unit id="4066f49a0950cecd91b201b26d1de51efbe9229a" translate="yes" xml:space="preserve">
          <source>These methods allow us to delete elements from the DOM.</source>
          <target state="translated">这些方法允许我们从DOM中删除元素。</target>
        </trans-unit>
        <trans-unit id="83101d88ab9c3dabba90bc0af8ad464da3b6ec6d" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content inside an existing element.</source>
          <target state="translated">这些方法允许我们在现有元素中插入新内容。</target>
        </trans-unit>
        <trans-unit id="f267e40060626a06189c0c1eee775807f476e368" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content outside an existing element.</source>
          <target state="translated">这些方法允许我们在现有元素之外插入新的内容。</target>
        </trans-unit>
        <trans-unit id="f29086c3aa4bd1a27da2e9e184fe031e4bfd5a02" translate="yes" xml:space="preserve">
          <source>These methods allow us to insert new content surrounding existing content.</source>
          <target state="translated">这些方法允许我们在现有内容周围插入新的内容。</target>
        </trans-unit>
        <trans-unit id="fc604750ce03230768923f16f804981342c1e94d" translate="yes" xml:space="preserve">
          <source>These methods allow you to create effects that are not provided &quot;out of the box&quot; by jQuery.</source>
          <target state="translated">这些方法允许你创建一些jQuery没有提供的效果。</target>
        </trans-unit>
        <trans-unit id="f0625f6d74b36be39a6d19f27d45b0219d041a46" translate="yes" xml:space="preserve">
          <source>These methods and event handlers handle forms and their various elements.</source>
          <target state="translated">这些方法和事件处理程序处理表单及其各种元素。</target>
        </trans-unit>
        <trans-unit id="18b8674db3e233679cba9aa8c56ce17e71105fda" translate="yes" xml:space="preserve">
          <source>These methods are used to get and set the CSS dimensions for the various properties.</source>
          <target state="translated">这些方法用于获取和设置各种属性的CSS尺寸。</target>
        </trans-unit>
        <trans-unit id="21d116605cbd8c6c5ab76a3a490e960c52c3b187" translate="yes" xml:space="preserve">
          <source>These methods are used to register behaviors to take effect when the user interacts with the browser, and to further manipulate those registered behaviors.</source>
          <target state="translated">这些方法用于注册行为,以便在用户与浏览器交互时生效,并进一步操作这些注册行为。</target>
        </trans-unit>
        <trans-unit id="6e156b975a013e00c555b91859d1720dc0cebe05" translate="yes" xml:space="preserve">
          <source>These methods are used to remove content from the DOM and replace it with new content.</source>
          <target state="translated">这些方法用于从DOM中删除内容,并用新的内容替换。</target>
        </trans-unit>
        <trans-unit id="76059f80300cb0ffdcfcb66416bfc17f849566e5" translate="yes" xml:space="preserve">
          <source>These methods can be used to make arbitrary Ajax requests.</source>
          <target state="translated">这些方法可以用来进行任意的Ajax请求。</target>
        </trans-unit>
        <trans-unit id="eb1001d40d2d517229663551d85a88e9dba991d4" translate="yes" xml:space="preserve">
          <source>These methods get and set CSS-related properties of elements.</source>
          <target state="translated">这些方法获取和设置元素的CSS相关属性。</target>
        </trans-unit>
        <trans-unit id="1f1b0bb6f70a2eb3ccb85e1859247cdd66807aa2" translate="yes" xml:space="preserve">
          <source>These methods get and set DOM attributes of elements</source>
          <target state="translated">这些方法获取和设置元素的DOM属性</target>
        </trans-unit>
        <trans-unit id="4b24afb95d5db312e3e6e541dcda0c7a8cbc8e06" translate="yes" xml:space="preserve">
          <source>These methods get and set DOM attributes of elements.</source>
          <target state="translated">这些方法获取和设置元素的DOM属性。</target>
        </trans-unit>
        <trans-unit id="8c704e4ccc42f4db139bb3dcca8c837ee5ce4c92" translate="yes" xml:space="preserve">
          <source>These methods inspect and manipulate the CSS classes assigned to elements.</source>
          <target state="translated">这些方法检查和操作分配给元素的CSS类。</target>
        </trans-unit>
        <trans-unit id="1af509504d5f4d97c437b425452c5adcf074987f" translate="yes" xml:space="preserve">
          <source>These methods perform the more common types of Ajax requests in less code.</source>
          <target state="translated">这些方法以较少的代码执行较常见的Ajax请求类型。</target>
        </trans-unit>
        <trans-unit id="152784201cd6ea8db24c609aade9c011ad0e3811" translate="yes" xml:space="preserve">
          <source>These methods register handlers to be called when certain events, such as initialization or completion, take place for any Ajax request on the page. The global events are fired on each Ajax request if the &lt;code&gt;global&lt;/code&gt; property in &lt;a href=&quot;../../jquery.ajaxsetup&quot;&gt;&lt;code&gt;jQuery.ajaxSetup()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;, which it is by default. &lt;em&gt;Note: Global events are never fired for cross-domain script or JSONP requests, regardless of the value of &lt;code&gt;global&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">当某些事件（例如初始化或完成）发生于页面上的任何Ajax请求时，这些方法都会注册要调用的处理程序。如果&lt;a href=&quot;../../jquery.ajaxsetup&quot;&gt; &lt;code&gt;jQuery.ajaxSetup()&lt;/code&gt; 中&lt;/a&gt;的 &lt;code&gt;global&lt;/code&gt; 属性为 &lt;code&gt;true&lt;/code&gt; ，则默认情况下会在每个Ajax请求上触发全局事件。&lt;em&gt;注意：全局事件永远不会针对跨域脚本或JSONP请求触发，无论&lt;/em&gt;&lt;em&gt; &lt;code&gt;global&lt;/code&gt; &lt;/em&gt;&lt;em&gt;的值如何&lt;/em&gt;&lt;em&gt;。&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e286a3fadf3605299e908d967349e6755901ddd" translate="yes" xml:space="preserve">
          <source>These properties are associated with the global jQuery object.</source>
          <target state="translated">这些属性与全局jQuery对象相关联。</target>
        </trans-unit>
        <trans-unit id="646e8206dbfc5befa834843d4e6c16f08a90de6b" translate="yes" xml:space="preserve">
          <source>They are form elements with &lt;code&gt;type=&quot;hidden&quot;&lt;/code&gt;.</source>
          <target state="translated">它们是 &lt;code&gt;type=&quot;hidden&quot;&lt;/code&gt; 表单元素。</target>
        </trans-unit>
        <trans-unit id="6d3a2f20c508cd89d045ae0802bb6d4d4855106f" translate="yes" xml:space="preserve">
          <source>They have a CSS &lt;code&gt;display&lt;/code&gt; value of &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">它们的CSS &lt;code&gt;display&lt;/code&gt; 值为 &lt;code&gt;none&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76e00a420ece6eeb2a7c52a9b7fe06713897dd16" translate="yes" xml:space="preserve">
          <source>This API is &lt;code&gt;deprecated&lt;/code&gt; as of jQuery 1.7 and &lt;code&gt;removed&lt;/code&gt; as of jQuery 1.8; please use &lt;a href=&quot;deferred.state&quot;&gt;&lt;code&gt;deferred.state()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">此API 从jQuery 1.7开始 &lt;code&gt;deprecated&lt;/code&gt; ，从jQuery 1.8开始 &lt;code&gt;removed&lt;/code&gt; 。请改用&lt;a href=&quot;deferred.state&quot;&gt; &lt;code&gt;deferred.state()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98f1d9eeba8b49c650019ed75b666fd267d8086c" translate="yes" xml:space="preserve">
          <source>This alteration to the code will cause the third and sixth list items to be highlighted, as it uses the modulus operator (&lt;code&gt;%&lt;/code&gt;) to select every item with an &lt;code&gt;index&lt;/code&gt; value that, when divided by 3, has a remainder of &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">对代码的这种更改将使第三和第六个列表项突出显示，因为它使用模数运算符（ &lt;code&gt;%&lt;/code&gt; ）选择 &lt;code&gt;index&lt;/code&gt; 值除以3后余数为 &lt;code&gt;2&lt;/code&gt; 的每个项。</target>
        </trans-unit>
        <trans-unit id="d51b3db33fc47e6a544f2294c10f27126554ddf1" translate="yes" xml:space="preserve">
          <source>This behavior is expected. &lt;strong&gt;As of jQuery 1.9.0&lt;/strong&gt; (and unless using the &lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate plugin&lt;/a&gt;), &lt;code&gt;jQuery()&lt;/code&gt; requires the HTML string to start with a &lt;code&gt;&amp;lt;&lt;/code&gt; (i.e text nodes cannot appear at the front of the HTML string).</source>
          <target state="translated">此行为是预期的。&lt;strong&gt;从jQuery 1.9.0开始&lt;/strong&gt;（除非使用&lt;a href=&quot;https://github.com/jquery/jquery-migrate/#readme&quot;&gt;jQuery Migrate插件&lt;/a&gt;）， &lt;code&gt;jQuery()&lt;/code&gt; 要求HTML字符串以 &lt;code&gt;&amp;lt;&lt;/code&gt; 开头（即，文本节点不能出现在HTML字符串的前面）。</target>
        </trans-unit>
        <trans-unit id="4724d0febf83f4df758178179a0cf1d84270ce5e" translate="yes" xml:space="preserve">
          <source>This can then be used by parts of your application to publish and subscribe to events of interest quite easily:</source>
          <target state="translated">然后,你的应用程序的部分可以很容易地使用它来发布和订阅感兴趣的事件。</target>
        </trans-unit>
        <trans-unit id="759df6494bc16039dfa401cc721d60dc40be0bc2" translate="yes" xml:space="preserve">
          <source>This causes all of them to be replaced:</source>
          <target state="translated">这样就会导致所有的人都被替换掉。</target>
        </trans-unit>
        <trans-unit id="1d9b72538af379ba557b38c88c4d6e1965c43267" translate="yes" xml:space="preserve">
          <source>This chain searches for items with the class &lt;code&gt;foo&lt;/code&gt; within the first list only and turns their backgrounds red. Then &lt;code&gt;end()&lt;/code&gt; returns the object to its state before the call to &lt;code&gt;find()&lt;/code&gt;, so the second &lt;code&gt;find()&lt;/code&gt; looks for '.bar' inside &lt;code&gt;&amp;lt;ul class=&quot;first&quot;&amp;gt;&lt;/code&gt;, not just inside that list's &lt;code&gt;&amp;lt;li class=&quot;foo&quot;&amp;gt;&lt;/code&gt;, and turns the matching elements' backgrounds green. The net result is that items 1 and 3 of the first list have a colored background, and none of the items from the second list do.</source>
          <target state="translated">该链仅在第一个列表中搜索具有 &lt;code&gt;foo&lt;/code&gt; 类的项目，并将其背景变为红色。然后 &lt;code&gt;end()&lt;/code&gt; 将对象返回到调用 &lt;code&gt;find()&lt;/code&gt; 之前的状态，因此第二个 &lt;code&gt;find()&lt;/code&gt; 在 &lt;code&gt;&amp;lt;ul class=&quot;first&quot;&amp;gt;&lt;/code&gt; 查找'.bar' ，而不仅仅是在该列表的 &lt;code&gt;&amp;lt;li class=&quot;foo&quot;&amp;gt;&lt;/code&gt; ，并将匹配元素的背景变为绿色。最终结果是，第一个列表中的项目1和3具有彩色背景，而第二个列表中的任何项目都没有。</target>
        </trans-unit>
        <trans-unit id="e5434cf43bec6b10cb2d62ec811119dfe5ec76fc" translate="yes" xml:space="preserve">
          <source>This code first retrieves the contents of &lt;code&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/code&gt; and then filters it for text nodes, which are wrapped in paragraph tags. This is accomplished by testing the &lt;a href=&quot;https://developer.mozilla.org/docs/en/DOM/Node.nodeType&quot;&gt;&lt;code&gt;.nodeType&lt;/code&gt; property&lt;/a&gt; of the element. This DOM property holds a numeric code indicating the node's type; text nodes use the code 3. The contents are again filtered, this time for &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; elements, and these elements are removed.</source>
          <target state="translated">此代码首先检索 &lt;code&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/code&gt; ，然后对其进行过滤以查找文本节点，这些文本节点包装在段落标记中。这是通过测试元素的&lt;a href=&quot;https://developer.mozilla.org/docs/en/DOM/Node.nodeType&quot;&gt; &lt;code&gt;.nodeType&lt;/code&gt; 属性&lt;/a&gt;来完成的。此DOM属性包含一个表示节点类型的数字代码。文本节点使用代码3。再次过滤内容，这一次是 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 元素，然后将这些元素删除。</target>
        </trans-unit>
        <trans-unit id="63d36dce5d277ad627544d533e1ccbe9b3be2c55" translate="yes" xml:space="preserve">
          <source>This code will alter the first list item only, as it contains exactly one &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag. Within the filter function, &lt;code&gt;this&lt;/code&gt; refers to each DOM element in turn. The parameter passed to the function tells us the index of that DOM element within the set matched by the jQuery object.</source>
          <target state="translated">此代码将仅更改第一个列表项，因为它仅包含一个 &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; 标签。在过滤器功能内， &lt;code&gt;this&lt;/code&gt; 依次引用每个DOM元素。传递给函数的参数告诉我们该DOM元素在jQuery对象匹配的集合中的索引。</target>
        </trans-unit>
        <trans-unit id="21f659be994ef4d8b978b3f4fb6ebf487ff90758" translate="yes" xml:space="preserve">
          <source>This code will cause the element with an ID of &lt;code&gt;foo&lt;/code&gt; to respond to the &lt;code&gt;click&lt;/code&gt; event. When a user clicks inside this element thereafter, the alert will be shown.</source>
          <target state="translated">此代码将导致ID为 &lt;code&gt;foo&lt;/code&gt; 的元素响应 &lt;code&gt;click&lt;/code&gt; 事件。此后，当用户单击此元素内部时，将显示警报。</target>
        </trans-unit>
        <trans-unit id="9779a0bbf174d5713472f1da50aba3ef40e7aa3a" translate="yes" xml:space="preserve">
          <source>This difference in behavior between &lt;code&gt;$( &quot;:text&quot; )&lt;/code&gt; and &lt;code&gt;$( &quot;[type=text]&quot; )&lt;/code&gt;, can be seen below:</source>
          <target state="translated">&lt;code&gt;$( &quot;:text&quot; )&lt;/code&gt; 和 &lt;code&gt;$( &quot;[type=text]&quot; )&lt;/code&gt; 之间的行为差​​异如下所示：</target>
        </trans-unit>
        <trans-unit id="6ad2fb9697b7b6107b3b4e5ec78fe97d5dd681be" translate="yes" xml:space="preserve">
          <source>This event behaves the same as the complete event and will be triggered every time an Ajax request finishes.</source>
          <target state="translated">该事件的行为与完整事件相同,每次Ajax请求完成时都会被触发。</target>
        </trans-unit>
        <trans-unit id="86b7a0fb40d5a08c286f9ff0d205c5d4c063ac8a" translate="yes" xml:space="preserve">
          <source>This event is also only called if the request was successful.</source>
          <target state="translated">该事件也只有在请求成功时才会被调用。</target>
        </trans-unit>
        <trans-unit id="6e4ad8a56d7bcd30bea7ca58205cb27a97657804" translate="yes" xml:space="preserve">
          <source>This event is available so that scripts can perform cleanup when the user leaves the page. Most browsers will ignore calls to &lt;code&gt;alert()&lt;/code&gt;, &lt;code&gt;confirm()&lt;/code&gt; and &lt;code&gt;prompt()&lt;/code&gt; inside the event handler. The string you return may be used in a confirmation dialog, but not all browsers support this. It is not possible to cancel the &lt;code&gt;unload&lt;/code&gt; event with &lt;code&gt;.preventDefault()&lt;/code&gt;.</source>
          <target state="translated">此事件可用，因此脚本可以在用户离开页面时执行清除。大多数浏览器会忽略事件处理程序中对 &lt;code&gt;alert()&lt;/code&gt; ， &lt;code&gt;confirm()&lt;/code&gt; 和 &lt;code&gt;prompt()&lt;/code&gt; 调用。您返回的字符串可以在确认对话框中使用，但并非所有浏览器都支持。无法使用 &lt;code&gt;.preventDefault()&lt;/code&gt; 取消 &lt;code&gt;unload&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="d2bef78d980d6837983d17a683822d89d8fd86d9" translate="yes" xml:space="preserve">
          <source>This event is called regardless of if the request was successful, or not. You will always receive a complete callback, even for synchronous requests.</source>
          <target state="translated">无论请求是否成功,该事件都会被调用。你总是会收到一个完整的回调,即使是同步请求。</target>
        </trans-unit>
        <trans-unit id="bc5a1a9dcb7987f22cab7aa53e522431522d89c3" translate="yes" xml:space="preserve">
          <source>This event is only called if an error occurred with the request (you can never have both an error and a success callback with a request).</source>
          <target state="translated">这个事件只有在请求发生错误时才会被调用(在一个请求中,你永远不能同时拥有错误和成功的回调)。</target>
        </trans-unit>
        <trans-unit id="afae7d93c59f37ce631ca4f57c312d014cc82583" translate="yes" xml:space="preserve">
          <source>This event is only called if the request was successful (no errors from the server, no errors with the data).</source>
          <target state="translated">只有当请求成功时,才会调用该事件(服务器没有出错,数据没有出错)。</target>
        </trans-unit>
        <trans-unit id="48bbba3ab6f8d076f052cc031a6e20283275fed7" translate="yes" xml:space="preserve">
          <source>This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.</source>
          <target state="translated">该事件主要用于确保主按钮被用于开始拖动操作;如果忽略该事件,当用户试图使用上下文菜单时,会出现奇怪的结果。虽然可以通过这些属性检测到中间和右边的按钮,但这并不可靠。例如,在Opera和Safari中,默认情况下无法检测到鼠标右键的点击。</target>
        </trans-unit>
        <trans-unit id="683d1abf76fd5c3a88d0f22a26284cfa337c9fee" translate="yes" xml:space="preserve">
          <source>This event is triggered if an Ajax request is started and no other Ajax requests are currently running.</source>
          <target state="translated">如果一个Ajax请求被启动,并且当前没有其他Ajax请求正在运行,则会触发该事件。</target>
        </trans-unit>
        <trans-unit id="ac253698b4acfcb5905a2aa79e449ffacacdffda" translate="yes" xml:space="preserve">
          <source>This event method is described in the &lt;a href=&quot;https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped&quot;&gt;W3C DOM Level 3 specification&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped&quot;&gt;W3C DOM级别3规范中&lt;/a&gt;描述了此事件方法。</target>
        </trans-unit>
        <trans-unit id="69465beb0b30a5a3694e6ad878fdce06864dca13" translate="yes" xml:space="preserve">
          <source>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the</source>
          <target state="translated">这种事件类型会因为事件冒泡而导致很多头疼的问题。例如,当鼠标指针移出了</target>
        </trans-unit>
        <trans-unit id="db381105282fc06aa6e1dc99496275fd5171657d" translate="yes" xml:space="preserve">
          <source>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the</source>
          <target state="translated">由于事件冒泡,这种事件类型会引起很多人的头痛。例如,当鼠标指针移动到了</target>
        </trans-unit>
        <trans-unit id="dc4d6bfc67551f643882201c85a8addaea0b978f" translate="yes" xml:space="preserve">
          <source>This event will likely be used together with the &lt;a href=&quot;focusin&quot;&gt;focusin&lt;/a&gt; event.</source>
          <target state="translated">该事件可能会与&lt;a href=&quot;focusin&quot;&gt;focusin&lt;/a&gt;事件一起使用。</target>
        </trans-unit>
        <trans-unit id="f361a07dcfc38de754ec576d34637ea20d8dd245" translate="yes" xml:space="preserve">
          <source>This event will likely be used together with the &lt;a href=&quot;focusout&quot;&gt;focusout&lt;/a&gt; event.</source>
          <target state="translated">该事件可能会与&lt;a href=&quot;focusout&quot;&gt;聚焦&lt;/a&gt;事件一起使用。</target>
        </trans-unit>
        <trans-unit id="b981a320ef7be0421529dedac14943e840100a6a" translate="yes" xml:space="preserve">
          <source>This event, which is triggered before an Ajax request is started, allows you to modify the XMLHttpRequest object (setting additional headers, if need be.)</source>
          <target state="translated">该事件在Ajax请求启动之前被触发,允许你修改XMLHttpRequest对象(如果需要的话,设置额外的头信息)。</target>
        </trans-unit>
        <trans-unit id="649a216d21a666f54f90151e9ba0e11a69914df4" translate="yes" xml:space="preserve">
          <source>This example causes elements to be hidden with a sliding animation when clicked. Because the handler receives the clicked item in the &lt;code&gt;this&lt;/code&gt; keyword as a bare DOM element, the element must be passed to the &lt;code&gt;$()&lt;/code&gt; function before applying jQuery methods to it.</source>
          <target state="translated">此示例使元素在单击时以滑动动画隐藏。因为处理程序将 &lt;code&gt;this&lt;/code&gt; 关键字中的单击项作为裸DOM元素接收，所以在将jQuery方法应用于该元素之前必须将该元素传递给 &lt;code&gt;$()&lt;/code&gt; 函数。</target>
        </trans-unit>
        <trans-unit id="a7fd0c4dc67ac419ff430abce7fa9695943e63d3" translate="yes" xml:space="preserve">
          <source>This example demonstrates that the selected element replaces the target by being moved from its old location, not by being cloned.</source>
          <target state="translated">这个例子表明,被选中的元素通过从旧的位置移动而不是通过克隆来替换目标。</target>
        </trans-unit>
        <trans-unit id="63bb26e5bf5293094a86ba3a3d38220ddafd7b42" translate="yes" xml:space="preserve">
          <source>This example fetches the requested HTML snippet and inserts it on the page.</source>
          <target state="translated">这个例子获取了所要求的HTML片段,并将其插入到页面中。</target>
        </trans-unit>
        <trans-unit id="e966acc2b9894ee5016653b5a8190f3e9cb6a381" translate="yes" xml:space="preserve">
          <source>This example inserts a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; after each paragraph, with each new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containing the class name(s) of its preceding paragraph.</source>
          <target state="translated">本示例在每个段落之后插入一个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ，每个新的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 都包含其上一个段落的类名。</target>
        </trans-unit>
        <trans-unit id="1031242a2fd44b0cc801511ac728f2d8b61935d3" translate="yes" xml:space="preserve">
          <source>This example removes leading and trailing whitespace from the values of text inputs with a &quot;tags&quot; class.</source>
          <target state="translated">这个例子从带有 &quot;tags &quot;类的文本输入值中删除前导空格和后导空格。</target>
        </trans-unit>
        <trans-unit id="5ebd20fb5abf5bd7afa36f2ff3c0dfa8a59e2351" translate="yes" xml:space="preserve">
          <source>This example removes the class name of the penultimate &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; from the last &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">此示例删除倒数第二个的类名 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 从最后 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c27e778fa0bccd68397de1040064cb8b4a36924" translate="yes" xml:space="preserve">
          <source>This example sets the widths of the matched elements to incrementally larger values.</source>
          <target state="translated">这个例子将匹配元素的宽度设置为递增的大值。</target>
        </trans-unit>
        <trans-unit id="da29dc6937adf3fba6bebcf394120d5ad06ad979" translate="yes" xml:space="preserve">
          <source>This example will toggle the &lt;code&gt;happy&lt;/code&gt; class for &lt;code&gt;&amp;lt;div class=&quot;foo&quot;&amp;gt;&lt;/code&gt; elements if their parent element has a class of &lt;code&gt;bar&lt;/code&gt;; otherwise, it will toggle the &lt;code&gt;sad&lt;/code&gt; class.</source>
          <target state="translated">如果它们的父元素具有 &lt;code&gt;bar&lt;/code&gt; 类，则此示例将切换 &lt;code&gt;&amp;lt;div class=&quot;foo&quot;&amp;gt;&lt;/code&gt; 元素的 &lt;code&gt;happy&lt;/code&gt; 类。否则，它将切换 &lt;code&gt;sad&lt;/code&gt; 班级。</target>
        </trans-unit>
        <trans-unit id="d9c3c9f7cf4f3c5da5a6ac47e18ae304f904858d" translate="yes" xml:space="preserve">
          <source>This example, of course, relies on the structure of the JSON file:</source>
          <target state="translated">当然,这个例子依赖于JSON文件的结构。</target>
        </trans-unit>
        <trans-unit id="a6c772a7fd8f0bccb3ffa2b41a260d712d32edc5" translate="yes" xml:space="preserve">
          <source>This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions.</source>
          <target state="translated">这个例子不使用任何选项,加载当前页面的内容,但对结果不做任何处理。要使用结果,你可以实现一个回调函数。</target>
        </trans-unit>
        <trans-unit id="fad7424a11380e496109bffc09072049878d17ef" translate="yes" xml:space="preserve">
          <source>This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).</source>
          <target state="translated">这个额外的对象是必要的,因为响应的Content-Typees和数据类型从来没有严格的一一对应关系(所以才有正则表达式)。</target>
        </trans-unit>
        <trans-unit id="36c0eb7eb7be94f02195c75311b38633e1e5f915" translate="yes" xml:space="preserve">
          <source>This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.</source>
          <target state="translated">这个功能类似于在动画方法中提供一个回调函数,但不要求在执行动画时给出回调。</target>
        </trans-unit>
        <trans-unit id="1a7aff5a0e4a3efea14d5040037b7f596cdecddc" translate="yes" xml:space="preserve">
          <source>This function behaves just like &lt;code&gt;$( document ).ready()&lt;/code&gt;, in that it should be used to wrap other &lt;code&gt;$()&lt;/code&gt; operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn't much use for chaining against it.</source>
          <target state="translated">此函数的行为就像 &lt;code&gt;$( document ).ready()&lt;/code&gt; ，它应该用于包装页面上依赖于DOM的其他 &lt;code&gt;$()&lt;/code&gt; 操作。虽然此函数从技术上讲是可链接的，但针对它进行链接实际上并没有太多用处。</target>
        </trans-unit>
        <trans-unit id="ab860837486fd3491fc07a9d2477348f5eeffea1" translate="yes" xml:space="preserve">
          <source>This function can also be overwritten in order to bypass certain edge case issues. The default &lt;code&gt;htmlPrefilter&lt;/code&gt; function in jQuery leaves input unmodified since 3.5.0. Older versions would greedily ensure that all tags were XHTML-compliant. This included anything that looked like an HTML tag, but was actually within a string (e.g. &lt;code&gt;&amp;lt;a title=&quot;&amp;lt;div /&amp;gt;&quot;&amp;gt;&amp;lt;&amp;gt;&lt;/code&gt;), leading to potential security issues. For more information, see the &lt;a href=&quot;https://jquery.com/upgrade-guide/3.5/&quot;&gt;jQuery Core 3.5 Upgrade guide&lt;/a&gt;.</source>
          <target state="translated">也可以覆盖此功能，以绕过某些极端情况。自3.5.0起，jQuery中的默认 &lt;code&gt;htmlPrefilter&lt;/code&gt; 函数使输入保持不变。较旧的版本会贪婪地确保所有标签都符合XHTML。这包括看起来像HTML标记但实际上在字符串中的所有内容（例如 &lt;code&gt;&amp;lt;a title=&quot;&amp;lt;div /&amp;gt;&quot;&amp;gt;&amp;lt;&amp;gt;&lt;/code&gt; ），从而导致潜在的安全问题。有关更多信息，请参阅&lt;a href=&quot;https://jquery.com/upgrade-guide/3.5/&quot;&gt;jQuery Core 3.5升级指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b46b4646df466700b53a938d86b6af892cceff75" translate="yes" xml:space="preserve">
          <source>This function can also be overwritten in order to bypass certain edge case issues. The default &lt;code&gt;htmlPrefilter&lt;/code&gt; function in jQuery will greedily ensure that all tags are XHTML-compliant. This includes anything that looks like an HTML tag, but is actually within a string (e.g.</source>
          <target state="translated">也可以覆盖此功能，以绕过某些极端情况。jQuery中的默认 &lt;code&gt;htmlPrefilter&lt;/code&gt; 函数将贪婪地确保所有标签都符合XHTML。这包括看起来像HTML标记，但实际上在字符串中的所有内容（例如，</target>
        </trans-unit>
        <trans-unit id="8c4ef947f6f8032dee19f1cbd99e7e0445c77b07" translate="yes" xml:space="preserve">
          <source>This function is used internally to convert form element values into a serialized string representation (See &lt;a href=&quot;serialize&quot;&gt;.serialize()&lt;/a&gt; for more information).</source>
          <target state="translated">此函数在内部用于将表单元素值转换为序列化的字符串表示形式（有关更多信息，请参见&lt;a href=&quot;serialize&quot;&gt;.serialize（）&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="f453c13c3e0328f2dfba47020639f6aaa2044325" translate="yes" xml:space="preserve">
          <source>This global event behaves the same as the local error event.</source>
          <target state="translated">该全局事件的行为与本地错误事件相同。</target>
        </trans-unit>
        <trans-unit id="97d93efb8c0c02bc751d2f0c9c622fbf4ecc7ac0" translate="yes" xml:space="preserve">
          <source>This global event is also triggered before the request is run.</source>
          <target state="translated">这个全局事件也会在请求运行前被触发。</target>
        </trans-unit>
        <trans-unit id="655d42a2d71779ddaf2a047b8bc2718ffee0c8b2" translate="yes" xml:space="preserve">
          <source>This global event is triggered if there are no more Ajax requests being processed.</source>
          <target state="translated">如果没有更多的Ajax请求正在被处理,这个全局事件就会被触发。</target>
        </trans-unit>
        <trans-unit id="2f4d3cd0607d268ab25fdd9533e70fde597ea7b3" translate="yes" xml:space="preserve">
          <source>This indicates that the method doesn't only expect an array as the argument, but also specifies the expected type. The notation is borrowed from Java 5's generics notation (or C++ templates).</source>
          <target state="translated">这表明该方法不仅期望一个数组作为参数,还指定了期望的类型。这个符号是借用了Java 5的generics符号(或C++模板)。</target>
        </trans-unit>
        <trans-unit id="690aa83531b52434d818b32c2f03950ce6592a66" translate="yes" xml:space="preserve">
          <source>This is a playground to see how the selector works with different strings.</source>
          <target state="translated">这是一个游戏场,看看选择器如何与不同的字符串一起工作。</target>
        </trans-unit>
        <trans-unit id="82bfa1ac349f897daa07f3e0c0d021d6694748b9" translate="yes" xml:space="preserve">
          <source>This is a playground to see how the selector works with different strings. Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one. The :nth-child, however, counts the index of the child to its particular parent. In any case, it's easier to see than explain so...</source>
          <target state="translated">这是一个观察选择器如何使用不同字符串的游乐场。请注意,这与 :even 和 :odd 不同,后者不考虑父代,只是将元素列表过滤到其他元素。而 :nth-child 则是计算子元素对其父元素的索引。无论如何,这比解释更容易看懂,所以...</target>
        </trans-unit>
        <trans-unit id="43d06d5d256cc91fbf210ed9e483af8fa7cb9e74" translate="yes" xml:space="preserve">
          <source>This is a playground to see how the selector works with different strings. Notice that this is different from the &lt;a href=&quot;even&quot;&gt;&lt;code&gt;even&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;odd&quot;&gt;&lt;code&gt;odd&lt;/code&gt;&lt;/a&gt; which have no regard for parent and just filter the list of elements to every other one. The :nth-child, however, counts the index of the child to its particular parent. In any case, it's easier to see than explain so...</source>
          <target state="translated">在这里可以看到选择器如何与不同的字符串一起使用。请注意，这与不考虑父级的&lt;a href=&quot;even&quot;&gt; &lt;code&gt;even&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;odd&quot;&gt; &lt;code&gt;odd&lt;/code&gt; &lt;/a&gt;不同，只是将元素列表彼此过滤。但是，：nth-​​child会计算该子项到其特定父项的索引。无论如何，看起来比解释起来容易。</target>
        </trans-unit>
        <trans-unit id="be73f0898db1025d1eedc1b55421499324460238" translate="yes" xml:space="preserve">
          <source>This is a shorthand Ajax function, which is equivalent to:</source>
          <target state="translated">这是一个简写的Ajax函数,相当于。</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">这相当于:</target>
        </trans-unit>
        <trans-unit id="e864657858a9303070a1658a53bf25dbea41192a" translate="yes" xml:space="preserve">
          <source>This is the full list of Ajax events, and in the order in which they are triggered. The indented events are triggered for each and every Ajax request (unless a global option has been set). The ajaxStart and ajaxStop events are events that relate to all Ajax requests together.</source>
          <target state="translated">这是Ajax事件的完整列表,以及它们被触发的顺序。缩进的事件是为每个Ajax请求而触发的(除非已设置了全局选项)。ajaxStart 和 ajaxStop 事件是与所有 Ajax 请求相关的事件。</target>
        </trans-unit>
        <trans-unit id="75a40fffbd7637ae6cad737c5a222f44e502a6d4" translate="yes" xml:space="preserve">
          <source>This is the inverse of &lt;code&gt;:empty&lt;/code&gt;.</source>
          <target state="translated">这与 &lt;code&gt;:empty&lt;/code&gt; 相反。</target>
        </trans-unit>
        <trans-unit id="1afd13e46be54f353d75a53266cc19dfc2f2a79e" translate="yes" xml:space="preserve">
          <source>This is the inverse of &lt;code&gt;:parent&lt;/code&gt;.</source>
          <target state="translated">这与 &lt;code&gt;:parent&lt;/code&gt; 相反。</target>
        </trans-unit>
        <trans-unit id="f6a24b37da84f50293523975f12e3e02b00fdf99" translate="yes" xml:space="preserve">
          <source>This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=&quot;word&quot;]), which is more appropriate in many cases.</source>
          <target state="translated">这是jQuery属性选择器中最慷慨的一种,它可以对一个值进行匹配,如果选择器的字符串出现在元素的属性值中,它就会选择一个元素。如果选择器的字符串出现在元素属性值的任何地方,它就会选择一个元素。比较这个选择器和Attribute Contains Word选择器(例如[attr~=&quot;word&quot;]),后者在很多情况下更合适。</target>
        </trans-unit>
        <trans-unit id="d9da68639be63e4e887067e82cda70e44e59b905" translate="yes" xml:space="preserve">
          <source>This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).</source>
          <target state="translated">这在jQuery中的很多地方都有使用,以确定我们是否在针对浏览器窗口(如当前窗口或iframe)进行操作。</target>
        </trans-unit>
        <trans-unit id="f08b6ce82deda11c3f60b7deafa153420ae2161b" translate="yes" xml:space="preserve">
          <source>This is useful for plugin authors who offer optional callbacks; in the case that no callback is given, something like &lt;code&gt;jQuery.noop&lt;/code&gt; could execute.</source>
          <target state="translated">这对提供可选回调的插件作者很有用。如果没有提供回调，则可以执行类似 &lt;code&gt;jQuery.noop&lt;/code&gt; 的操作。</target>
        </trans-unit>
        <trans-unit id="44d812d14581ba0c1674dc38a60217df13c4f84f" translate="yes" xml:space="preserve">
          <source>This is usually the desired sequence before taking an action. If this is not required, the &lt;code&gt;mousedown&lt;/code&gt; or &lt;code&gt;mouseup&lt;/code&gt; event may be more suitable.</source>
          <target state="translated">这通常是采取行动之前所需的顺序。如果不需 &lt;code&gt;mouseup&lt;/code&gt; ，则 &lt;code&gt;mousedown&lt;/code&gt; 或mouseup事件可能更适合。</target>
        </trans-unit>
        <trans-unit id="4c3d57f2d941e7b5d42230477fec9cf8433d9503" translate="yes" xml:space="preserve">
          <source>This method behaves differently from using a normal JavaScript &lt;code&gt;eval()&lt;/code&gt; in that it's executed within the global context (which is important for loading external scripts dynamically).</source>
          <target state="translated">此方法的行为与使用常规JavaScript &lt;code&gt;eval()&lt;/code&gt; 的不同之处在于，它在全局上下文中执行（这对于动态加载外部脚本很重要）。</target>
        </trans-unit>
        <trans-unit id="7055b8d61d1b481dd833dfd2669a99e44ee927e0" translate="yes" xml:space="preserve">
          <source>This method can act on a jQuery object that has selected individual form controls, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. However, it is typically easier to select the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element itself for serialization:</source>
          <target state="translated">该方法可以对选择了单个窗体控件（例如 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; )的jQuery对象起作用。但是，通常更容易选择 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 元素本身进行序列化：</target>
        </trans-unit>
        <trans-unit id="5b38d3c48bdcbca3659c53e58607a9cf7dccaf8c" translate="yes" xml:space="preserve">
          <source>This method does not accept any arguments.</source>
          <target state="translated">本方法不接受任何参数。</target>
        </trans-unit>
        <trans-unit id="bfb451eae6e159d41053c63c7ab0de01084ab951" translate="yes" xml:space="preserve">
          <source>This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.</source>
          <target state="translated">这个方法主要是为那些希望覆盖它并为错误信息提供更好的显示(或更多信息)的插件开发者而存在。</target>
        </trans-unit>
        <trans-unit id="062bd2d7d515033788955331f2b4e1a92f7c2a23" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;blur&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;blur&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;blur&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;blur&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="346692c9809684c46a877bfaa5170a427dd16e78" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;change&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;change&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;change&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="a0650bd2ed2e304aeb035f14a80cc4104b12697c" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;click&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;click&quot; )&lt;/code&gt; in the third. The &lt;code&gt;click&lt;/code&gt; event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;click&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;click&quot; )&lt;/code&gt; 的快捷方式。该 &lt;code&gt;click&lt;/code&gt; 事件被发送到一个元件，当鼠标指针在元件和鼠标按钮被按下并释放。任何HTML元素都可以接收此事件。例如，考虑HTML：</target>
        </trans-unit>
        <trans-unit id="0db2428740ed667f182f8512b88eb604bda1c58a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;contextmenu&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;contextmenu&quot; )&lt;/code&gt; in the third. The &lt;code&gt;contextmenu&lt;/code&gt; event is sent to an element when the right button of the mouse is clicked on it, but before the context menu is displayed. In case the context menu key is pressed, the event is triggered on the &lt;code&gt;html&lt;/code&gt; element or the currently focused element. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;contextmenu&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;contextmenu&quot; )&lt;/code&gt; 的快捷方式。该 &lt;code&gt;contextmenu&lt;/code&gt; 事件被发送到时，点击它的鼠标右键的元素，但在显示上下文菜单之前。如果按下上下文菜单键，则事件将在 &lt;code&gt;html&lt;/code&gt; 元素或当前焦点的元素上触发。任何HTML元素都可以接收此事件。例如，考虑HTML：</target>
        </trans-unit>
        <trans-unit id="e874b85d8b87e616d9b2b3e78468b8b1469b0d74" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;dblclick&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;dblclick&quot; )&lt;/code&gt; in the third. The &lt;code&gt;dblclick&lt;/code&gt; event is sent to an element when the element is double-clicked. Any HTML element can receive this event. For example, consider the HTML:</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.trigger( &quot;dblclick&quot; )&lt;/code&gt; &lt;code&gt;.on( &quot;dblclick&quot;, handler )&lt;/code&gt; 和第三个变体.trigger（&amp;ldquo; dblclick&amp;rdquo;）的快捷方式。该 &lt;code&gt;dblclick&lt;/code&gt; 事件被发送到一个元素，当元素被双击。任何HTML元素都可以接收此事件。例如，考虑HTML：</target>
        </trans-unit>
        <trans-unit id="d13a26a73fa8a32f0b6c96afe45e01dbb8b531da" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;error&quot;, handler )&lt;/code&gt;.</source>
          <target state="translated">该方法是 &lt;code&gt;.on( &quot;error&quot;, handler )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="55194cb606a3bf92352bb24a102c067fe1a4f76f" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focus&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;focus&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是第一种和第二种变体中 &lt;code&gt;.on( &quot;focus&quot;, handler )&lt;/code&gt; 和 &lt;code&gt;.trigger( &quot;focus&quot; )&lt;/code&gt; 变体.trigger（&amp;ldquo; focus&amp;rdquo;）的快捷方式。</target>
        </trans-unit>
        <trans-unit id="a78fa95a3c99515fe9ba77f8210bf088d3ad80ab" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focusin&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;focusin&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;focusin&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;focusin&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="2f404e361904d188974da0d867762f2b8f5bbf1a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;focusout&quot;, handler )&lt;/code&gt; when passed arguments, and &lt;code&gt;.trigger( &quot;focusout&quot; )&lt;/code&gt; when no arguments are passed.</source>
          <target state="translated">当传递参数时，此方法是 &lt;code&gt;.on( &quot;focusout&quot;, handler )&lt;/code&gt; 的快捷方式，当不传递参数时是 &lt;code&gt;.trigger( &quot;focusout&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="41f8feb54d90484574c64e3baf7695ac56d76f6a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keydown&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;keydown&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是第一种和第二种变体中 &lt;code&gt;.on( &quot;keydown&quot;, handler )&lt;/code&gt; 和 &lt;code&gt;.trigger( &quot;keydown&quot; )&lt;/code&gt; 变体.trigger（&amp;ldquo; keydown&amp;rdquo;）的快捷方式。</target>
        </trans-unit>
        <trans-unit id="5ea90d8a612eae07733cb9a953095aece3559d80" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keypress&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;keypress&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.trigger( &quot;keypress&quot; )&lt;/code&gt; &lt;code&gt;.on( &quot;keypress&quot;, handler )&lt;/code&gt; 和第三个变体.trigger（&amp;ldquo; keypress&amp;rdquo;）的快捷方式。</target>
        </trans-unit>
        <trans-unit id="4829b0add7a93cf88eb293c411bb411f3ef1e117" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;keyup&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;keyup&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;keyup&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;keyup&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="4f33dc4654f9529dd8f001a910b09881e9c49b82" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;load&quot;, handler )&lt;/code&gt;.</source>
          <target state="translated">该方法是 &lt;code&gt;.on( &quot;load&quot;, handler )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="bd6a5b08c80b8fd5752389522a110b3d911a2b5b" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mousedown&quot;, handler)&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger( &quot;mousedown&quot; )&lt;/code&gt; in the second.</source>
          <target state="translated">此方法的快捷方式 &lt;code&gt;.on( &quot;mousedown&quot;, handler)&lt;/code&gt; 在第一变体中，和 &lt;code&gt;.trigger( &quot;mousedown&quot; )&lt;/code&gt; 中的第二个。</target>
        </trans-unit>
        <trans-unit id="69b00c787b7cc1a27054d6f09f61eb7db1b27df3" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseenter&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mouseenter&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.trigger( &quot;mouseenter&quot; )&lt;/code&gt; &lt;code&gt;.on( &quot;mouseenter&quot;, handler )&lt;/code&gt; 和第三个变体.trigger（&amp;ldquo; mouseenter&amp;rdquo;）的快捷方式。</target>
        </trans-unit>
        <trans-unit id="f69e7b7e84c1d679e65f225b8bbcf922a7b63987" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mousemove&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mousemove&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;mousemove&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;mousemove&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="06b06641034cabafc7c3a89771b3bfb178535b20" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseout&quot;, handler )&lt;/code&gt; in the first two variation, and &lt;code&gt;.trigger( &quot;mouseout&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;mouseout&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;mouseout&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="c031239c05a4d2d7c8f7763e0c4dce22389771b5" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;mouseover&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;mouseover&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;mouseover&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;mouseover&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="b6154672016dd082ac86d67cedc849e56ba90b30" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;scroll&quot;, handler )&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;scroll&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是第一种和第二种变体中 &lt;code&gt;.on( &quot;scroll&quot;, handler )&lt;/code&gt; 的快捷方式，而在第三种变体中是 &lt;code&gt;.trigger( &quot;scroll&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="5e74519010db55b24d2b383da7d044d1a8289229" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;select&quot;, handler )&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger( &quot;select&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on( &quot;select&quot;, handler )&lt;/code&gt; 和第三个变体 &lt;code&gt;.trigger( &quot;select&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="0d345de59a7eaf1933e66da1db69440e5868a3db" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;submit&quot;, handler )&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger( &quot;submit&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是第一种变体 &lt;code&gt;.on( &quot;submit&quot;, handler )&lt;/code&gt; 和 &lt;code&gt;.trigger( &quot;submit&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="1eb9dc7288639e70f49bacd03cacbfa56ac32283" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on( &quot;unload&quot;, handler )&lt;/code&gt;.</source>
          <target state="translated">该方法是 &lt;code&gt;.on( &quot;unload&quot;, handler )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="52ff3678157c22780a9cfc21b02b92dddc40ff36" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('mouseleave', handler)&lt;/code&gt; in the first two variations, and &lt;code&gt;.trigger('mouseleave')&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是前两个变体中 &lt;code&gt;.on('mouseleave', handler)&lt;/code&gt; 的快捷方式，而第三个变体是 &lt;code&gt;.trigger('mouseleave')&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="c26ac53ee675f9addb362831a5d3f4fa59caa27a" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('mouseup', handler)&lt;/code&gt; in the first variation, and &lt;code&gt;.trigger('mouseup')&lt;/code&gt; in the second.</source>
          <target state="translated">此方法的快捷方式 &lt;code&gt;.on('mouseup', handler)&lt;/code&gt; 在第一变体中，和 &lt;code&gt;.trigger('mouseup')&lt;/code&gt; 中的第二个。</target>
        </trans-unit>
        <trans-unit id="c808514b87bd343496959e8c779b341d866fc82f" translate="yes" xml:space="preserve">
          <source>This method is a shortcut for &lt;code&gt;.on('resize', handler)&lt;/code&gt; in the first and second variations, and &lt;code&gt;.trigger( &quot;resize&quot; )&lt;/code&gt; in the third.</source>
          <target state="translated">此方法是第一种和第二种变体中 &lt;code&gt;.on('resize', handler)&lt;/code&gt; 的快捷方式，而在第三种变体中是 &lt;code&gt;.trigger( &quot;resize&quot; )&lt;/code&gt; 的快捷方式。</target>
        </trans-unit>
        <trans-unit id="85bb24f782fa2a4858de19ce93437e137aa3340c" translate="yes" xml:space="preserve">
          <source>This method is also able to find the height of the window and document.</source>
          <target state="translated">这个方法也能够找到窗口和文档的高度。</target>
        </trans-unit>
        <trans-unit id="f2607253a7033781c403606df4eebe156180a466" translate="yes" xml:space="preserve">
          <source>This method is also able to find the width of the window and document.</source>
          <target state="translated">这个方法也能够找到窗口和文档的宽度。</target>
        </trans-unit>
        <trans-unit id="cec9291828724747376d950545c6d540d08e366c" translate="yes" xml:space="preserve">
          <source>This method is fired when an error is thrown synchronously in a function wrapped in &lt;code&gt;jQuery()&lt;/code&gt; or &lt;code&gt;jQuery( document ).ready()&lt;/code&gt;, or equivalent. By default it re-throws the error in a timeout so that it's logged in the console and passed to &lt;code&gt;window.onerror&lt;/code&gt; instead of being swallowed. Overwrite this method if you want to handle such errors differently.</source>
          <target state="translated">当在 &lt;code&gt;jQuery()&lt;/code&gt; 或 &lt;code&gt;jQuery( document ).ready()&lt;/code&gt; 或等效包装的函数中同步引发错误时，将触发此方法。默认情况下，它会在超时后重新抛出错误，以便将其记录在控制台中并传递给 &lt;code&gt;window.onerror&lt;/code&gt; 而不是被吞下。如果要以不同方式处理此类错误，请覆盖此方法。</target>
        </trans-unit>
        <trans-unit id="0161551cba801aedb18b05604b3021306dc4d081" translate="yes" xml:space="preserve">
          <source>This method is meant for plugin developers who are creating new animation methods. Letting &lt;code&gt;$.speed()&lt;/code&gt; do all the parameter hockey and normalization for you, rather than duplicating the logic yourself, makes your work simpler. An example of use can be found in the animated form of &lt;code&gt;.addClass()&lt;/code&gt; of jQuery UI.</source>
          <target state="translated">此方法适用于正在创建新动画方法的插件开发人员。让 &lt;code&gt;$.speed()&lt;/code&gt; 为您完成所有参数曲棍球和标准化操作，而不是自己复制逻辑，可以使您的工作更简单。可以在jQuery UI 的 &lt;code&gt;.addClass()&lt;/code&gt; 动画形式中找到使用的示例。</target>
        </trans-unit>
        <trans-unit id="be28d98cd2c7a67e6865551fa4b367a0630987b0" translate="yes" xml:space="preserve">
          <source>This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from &lt;code&gt;jQuery.proxy()&lt;/code&gt; it will still unbind the correct function if passed the original.</source>
          <target state="translated">对于将事件处理程序附加到上下文指向另一个对象的元素，此方法最有用。另外，jQuery确保即使绑定了从 &lt;code&gt;jQuery.proxy()&lt;/code&gt; 返回的函数，如果传递了原始函数，它仍将取消绑定正确的函数。</target>
        </trans-unit>
        <trans-unit id="792159b794709664077d97cb3536c3cd14904a0d" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">此方法不适用于 &lt;code&gt;window&lt;/code&gt; 和 &lt;code&gt;document&lt;/code&gt; 对象。对于这些，请改用 &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef15703808f5f2d053665850bfca24d04d1a2e24" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; instead. Although &lt;code&gt;.outerHeight()&lt;/code&gt; can be used on table elements, it may give unexpected results on tables using the &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSS property.</source>
          <target state="translated">此方法不适用于 &lt;code&gt;window&lt;/code&gt; 和 &lt;code&gt;document&lt;/code&gt; 对象。对于这些，请改用 &lt;code&gt;&lt;a href=&quot;height&quot;&gt;.height()&lt;/a&gt;&lt;/code&gt; 。尽管 &lt;code&gt;.outerHeight()&lt;/code&gt; 可用于表元素，但使用 &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSS属性可能会在表上产生意外结果。</target>
        </trans-unit>
        <trans-unit id="829556cbe373a45b949053668c7a8cfa83ebe1b2" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">此方法不适用于 &lt;code&gt;window&lt;/code&gt; 和 &lt;code&gt;document&lt;/code&gt; 对象。对于这些，请改用 &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba117f4e1229732c120748b2aca40b446fd60fb4" translate="yes" xml:space="preserve">
          <source>This method is not applicable to &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects; for these, use &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; instead. Although &lt;code&gt;.outerWidth()&lt;/code&gt; can be used on table elements, it may give unexpected results on tables using the &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSS property.</source>
          <target state="translated">此方法不适用于 &lt;code&gt;window&lt;/code&gt; 和 &lt;code&gt;document&lt;/code&gt; 对象。对于这些，请改用 &lt;code&gt;&lt;a href=&quot;width&quot;&gt;.width()&lt;/a&gt;&lt;/code&gt; 。尽管 &lt;code&gt;.outerWidth()&lt;/code&gt; 可用于表元素，但使用 &lt;code&gt;border-collapse: collapse&lt;/code&gt; CSS属性可能会在表上产生意外结果。</target>
        </trans-unit>
        <trans-unit id="b303eebf0f43b27153ed68f23c0854debc8a5aa7" translate="yes" xml:space="preserve">
          <source>This method is not available on XML documents.</source>
          <target state="translated">此方法在XML文档中不可用。</target>
        </trans-unit>
        <trans-unit id="02843289c06dc2a11b69cb325ed07cd3b9ece06f" translate="yes" xml:space="preserve">
          <source>This method is often used with &lt;code&gt;.addClass()&lt;/code&gt; to switch elements' classes from one to another, like so:</source>
          <target state="translated">此方法通常与 &lt;code&gt;.addClass()&lt;/code&gt; 一起使用，以将元素的类从一个类切换到另一个类，如下所示：</target>
        </trans-unit>
        <trans-unit id="a3a5be0658971b62f855cbbcb5c4bc8dcf2d8b61" translate="yes" xml:space="preserve">
          <source>This method is often used with &lt;code&gt;.removeClass()&lt;/code&gt; to switch elements' classes from one to another, like so:</source>
          <target state="translated">此方法通常与 &lt;code&gt;.removeClass()&lt;/code&gt; 一起使用，以将元素的类从一个类切换到另一个类，如下所示：</target>
        </trans-unit>
        <trans-unit id="a33c880bf752394d0bef47af6df6b9420072d808" translate="yes" xml:space="preserve">
          <source>This method is primarily useful for debugging to determine, for example, whether a Deferred has already been resolved even though you are inside code that intended to reject it.</source>
          <target state="translated">这个方法主要用于调试,例如,确定一个Deferred是否已经被解决,即使你在打算拒绝它的代码中。</target>
        </trans-unit>
        <trans-unit id="6158f3be944f5323b063daabea46f186e081a8f5" translate="yes" xml:space="preserve">
          <source>This method is similar to &lt;a href=&quot;parents&quot;&gt;&lt;code&gt;.parents()&lt;/code&gt;&lt;/a&gt;, except &lt;code&gt;.parent()&lt;/code&gt; only travels a single level up the DOM tree. Also, &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; method returns a set containing &lt;code&gt;document&lt;/code&gt; whereas &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; returns an empty set.</source>
          <target state="translated">此方法与&lt;a href=&quot;parents&quot;&gt; &lt;code&gt;.parents()&lt;/code&gt; &lt;/a&gt;相似，除了 &lt;code&gt;.parent()&lt;/code&gt; 仅在DOM树上移动单个级别。同样， &lt;code&gt;$( &quot;html&quot; ).parent()&lt;/code&gt; 方法返回一个包含 &lt;code&gt;document&lt;/code&gt; 的集合，而 &lt;code&gt;$( &quot;html&quot; ).parents()&lt;/code&gt; 返回一个空集合。</target>
        </trans-unit>
        <trans-unit id="f212f682efcc36782acb359a7b6a9498a049d716" translate="yes" xml:space="preserve">
          <source>This method is the simplest way to fetch data from the server. It is roughly equivalent to &lt;code&gt;$.get(url, data, success)&lt;/code&gt; except that it is a method rather than global function and it has an implicit callback function. When a successful response is detected (i.e. when &lt;code&gt;textStatus&lt;/code&gt; is &quot;success&quot; or &quot;notmodified&quot;), &lt;code&gt;.load()&lt;/code&gt; sets the HTML contents of the matched element to the returned data. This means that most uses of the method can be quite simple:</source>
          <target state="translated">此方法是从服务器获取数据的最简单方法。它与 &lt;code&gt;$.get(url, data, success)&lt;/code&gt; 大致等效，除了它是方法而不是全局函数并且具有隐式回调函数。当检测到成功的响应时（即，当 &lt;code&gt;textStatus&lt;/code&gt; 为&amp;ldquo;成功&amp;rdquo;或&amp;ldquo; 未修改 &amp;rdquo; 时），. load &lt;code&gt;.load()&lt;/code&gt; 将匹配元素的HTML内容设置为返回的数据。这意味着该方法的大多数使用可能非常简单：</target>
        </trans-unit>
        <trans-unit id="97bad19c70b5728f621288ec148f22105f3c99f4" translate="yes" xml:space="preserve">
          <source>This method is the simplest way to fetch data from the server. It is roughly equivalent to &lt;code&gt;$.get(url, data, success)&lt;/code&gt; except that it is a method rather than global function and it has an implicit callback function. When a successful response is detected (i.e. when &lt;code&gt;textStatus&lt;/code&gt; is &quot;success&quot; or &quot;notmodified&quot;), &lt;code&gt;.load()&lt;/code&gt; sets the HTML contents of the matched elements to the returned data. This means that most uses of the method can be quite simple:</source>
          <target state="translated">此方法是从服务器获取数据的最简单方法。它与 &lt;code&gt;$.get(url, data, success)&lt;/code&gt; 大致等效，除了它是方法而不是全局函数，并且具有隐式回调函数。当检测到成功的响应时（即，当 &lt;code&gt;textStatus&lt;/code&gt; 为&amp;ldquo;成功&amp;rdquo;或&amp;ldquo;未修改&amp;rdquo;时），. load &lt;code&gt;.load()&lt;/code&gt; 将匹配元素的HTML内容设置为返回的数据。这意味着该方法的大多数使用可能非常简单：</target>
        </trans-unit>
        <trans-unit id="33a293e72757673a33b710d1c8020b662670351f" translate="yes" xml:space="preserve">
          <source>This method is typically used to set the values of form fields.</source>
          <target state="translated">此方法通常用于设置表格字段的值。</target>
        </trans-unit>
        <trans-unit id="b041aaa9a6860bdfc4ee2d9736df50aacf1367d7" translate="yes" xml:space="preserve">
          <source>This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.</source>
          <target state="translated">当类名或ID包含在CSS中具有特殊含义的字符时,如点号或分号,该方法就很有用。</target>
        </trans-unit>
        <trans-unit id="244806d817f0a7d369a67cd7d7c93c5a39756ca3" translate="yes" xml:space="preserve">
          <source>This method provides a means to attach delegated event handlers to the &lt;code&gt;document&lt;/code&gt; element of a page, which simplifies the use of event handlers when content is dynamically added to a page. See the discussion of direct versus delegated events in the &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt; method for more information.</source>
          <target state="translated">此方法提供了一种将委派事件处理程序附加到页面的 &lt;code&gt;document&lt;/code&gt; 元素的方法，从而简化了将内容动态添加到页面时事件处理程序的使用。有关更多信息，请参见&lt;a href=&quot;on&quot;&gt; &lt;code&gt;.on()&lt;/code&gt; &lt;/a&gt;方法中有关直接事件与委托事件的讨论。</target>
        </trans-unit>
        <trans-unit id="7fd2a5591a30ca6ff308b7643859a6536be39441" translate="yes" xml:space="preserve">
          <source>This method rarely needs to be called directly. Instead, use it as an entry point to modify existing &lt;a href=&quot;category/manipulation&quot;&gt;jQuery manipulation methods&lt;/a&gt;. For instance, to remove all &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; tags from incoming HTML strings, do this:</source>
          <target state="translated">此方法很少需要直接调用。而是将其用作修改现有&lt;a href=&quot;category/manipulation&quot;&gt;jQuery操作方法&lt;/a&gt;的切入点。例如，要从传入的HTML字符串中删除所有 &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; 标签，请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="dd80397630c84b50e8d361e72a33e91191dbf528" translate="yes" xml:space="preserve">
          <source>This method rarely needs to be called directly. Instead, use it as an entry point to modify existing &lt;a href=&quot;category/manipulation&quot;&gt;jQuery manipulation methods&lt;/a&gt;. jQuery calls this method on input HTML before processing it further: it accepts an HTML string &amp;amp; should return a HTML string as well.</source>
          <target state="translated">此方法很少需要直接调用。而是将其用作修改现有&lt;a href=&quot;category/manipulation&quot;&gt;jQuery操作方法&lt;/a&gt;的切入点。jQuery在输入HTML之前调用此方法，然后再进行进一步处理：它接受HTML字符串，并且还应返回HTML字符串。</target>
        </trans-unit>
        <trans-unit id="81bd8de971947848a1bbc3dd30bdfc905828a2cc" translate="yes" xml:space="preserve">
          <source>This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:</source>
          <target state="translated">这个方法不仅可以删除子元素(和其他子元素),还可以删除匹配元素集合中的任何文本。这是因为,根据DOM规范,元素中的任何文本字符串都被认为是该元素的子节点。考虑以下的HTML。</target>
        </trans-unit>
        <trans-unit id="2c6511822632c27fce0c859034fc93723aeb40d5" translate="yes" xml:space="preserve">
          <source>This method returns the Callbacks object onto which it is attached (&lt;code&gt;this&lt;/code&gt;).</source>
          <target state="translated">此方法返回其附加到的Callbacks对象（ &lt;code&gt;this&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="db22403d5e9f887b88f057e719d07941784e3daa" translate="yes" xml:space="preserve">
          <source>This method returns the height of the element, including top and bottom padding, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="translated">此方法以像素为单位返回元素的高度，包括顶部和底部填充。如果在一组空元素上调用，则返回 &lt;code&gt;undefined&lt;/code&gt; （在jQuery 3.0之前为 &lt;code&gt;null&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="46751de65f82b868a8d805a118d0472c10ab2eb4" translate="yes" xml:space="preserve">
          <source>This method returns the width of the element, including left and right padding, in pixels. If called on an empty set of elements, returns &lt;code&gt;undefined&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt; before jQuery 3.0).</source>
          <target state="translated">此方法以像素为单位返回元素的宽度，包括左侧和右侧填充。如果在一组空元素上调用，则返回 &lt;code&gt;undefined&lt;/code&gt; （在jQuery 3.0之前为 &lt;code&gt;null&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="346db25be5af8ef6c0901a77a68e78712521680d" translate="yes" xml:space="preserve">
          <source>This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply &lt;code&gt;.toggleClass()&lt;/code&gt; to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">此方法将一个或多个类名称作为其参数。在第一个版本中，如果匹配的元素集中的元素已经具有该类，则将其删除；否则，将其删除。如果元素不具有该类，则将其添加。例如，我们可以将 &lt;code&gt;.toggleClass()&lt;/code&gt; 应用于简单的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ffca30b1eb6fa5e71da9068c59603b1d9459f862" translate="yes" xml:space="preserve">
          <source>This method takes one or more classes as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply &lt;code&gt;.toggleClass()&lt;/code&gt; to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">此方法将一个或多个类作为其参数。在第一个版本中，如果匹配的元素集中的元素已经具有该类，则将其删除；否则，将其删除。如果元素不具有该类，则将其添加。例如，我们可以将 &lt;code&gt;.toggleClass()&lt;/code&gt; 应用于简单的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="715fb2b06c008009d1fe416597cf8a202325a3d1" translate="yes" xml:space="preserve">
          <source>This method uses the browser's &lt;code&gt;innerHTML&lt;/code&gt; property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all &lt;code&gt;href&lt;/code&gt; properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate &lt;a href=&quot;https://code.google.com/p/html5shiv/&quot;&gt;compatibility layer&lt;/a&gt;.</source>
          <target state="translated">此方法使用浏览器的 &lt;code&gt;innerHTML&lt;/code&gt; 属性。某些浏览器可能不会生成完全复制提供的HTML源代码的DOM。例如，版本8之前的Internet Explorer会将链接上的所有 &lt;code&gt;href&lt;/code&gt; 属性转换为绝对URL，而版本9之前的Internet Explorer在没有添加单独的&lt;a href=&quot;https://code.google.com/p/html5shiv/&quot;&gt;兼容性层的&lt;/a&gt;情况下将无法正确处理HTML5元素。</target>
        </trans-unit>
        <trans-unit id="150d540b15cca9563d10ff4107f8ef56ab70336e" translate="yes" xml:space="preserve">
          <source>This method uses the browser's &lt;code&gt;innerHTML&lt;/code&gt; property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters.</source>
          <target state="translated">此方法使用浏览器的 &lt;code&gt;innerHTML&lt;/code&gt; 属性。某些浏览器可能不会返回完全复制原始文档中的HTML源代码的HTML。例如，如果Internet Explorer仅包含字母数字字符，则有时会省略属性值周围的引号。</target>
        </trans-unit>
        <trans-unit id="65e0fd7b6508a3fd582b43249cfe77d08ec202a6" translate="yes" xml:space="preserve">
          <source>This method works for custom events triggered with &lt;a href=&quot;trigger&quot;&gt;trigger()&lt;/a&gt; as well.</source>
          <target state="translated">此方法也适用于使用&lt;a href=&quot;trigger&quot;&gt;trigger（）&lt;/a&gt;触发的自定义事件。</target>
        </trans-unit>
        <trans-unit id="51d7b57e32048f9435bc9def6a654077e7bbd4e6" translate="yes" xml:space="preserve">
          <source>This object provides a subset of the methods of the &lt;a href=&quot;category/deferred-object&quot;&gt;Deferred&lt;/a&gt; object (&lt;a href=&quot;deferred.then&quot;&gt;&lt;code&gt;then&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.done&quot;&gt;&lt;code&gt;done&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.fail&quot;&gt;&lt;code&gt;fail&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.always&quot;&gt;&lt;code&gt;always&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.pipe&quot;&gt;&lt;code&gt;pipe&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.progress&quot;&gt;&lt;code&gt;progress&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;deferred.state&quot;&gt;&lt;code&gt;state&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;deferred.promise&quot;&gt;&lt;code&gt;promise&lt;/code&gt;&lt;/a&gt;) to prevent users from changing the state of the Deferred.</source>
          <target state="translated">此对象提供&lt;a href=&quot;category/deferred-object&quot;&gt;Deferred&lt;/a&gt;对象的方法的子集（&lt;a href=&quot;deferred.then&quot;&gt; &lt;code&gt;then&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;deferred.done&quot;&gt; &lt;code&gt;done&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;deferred.fail&quot;&gt; &lt;code&gt;fail&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;deferred.always&quot;&gt; &lt;code&gt;always&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;deferred.pipe&quot;&gt; &lt;code&gt;pipe&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;deferred.progress&quot;&gt; &lt;code&gt;progress&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;deferred.state&quot;&gt; &lt;code&gt;state&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;deferred.promise&quot;&gt; &lt;code&gt;promise&lt;/code&gt; &lt;/a&gt;），以防止用户更改Deferred的状态。</target>
        </trans-unit>
        <trans-unit id="9b34e7f3b9e24382935439639824b6cd3a1daafd" translate="yes" xml:space="preserve">
          <source>This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call (&lt;code&gt;$.ajaxSettings&lt;/code&gt; merged with the settings passed to &lt;code&gt;$.ajax&lt;/code&gt;). For example, specifying a DOM element as the context will make that the context for the &lt;code&gt;complete&lt;/code&gt; callback of a request, like so:</source>
          <target state="translated">该对象将是所有与Ajax相关的回调的上下文。默认情况下，上下文是一个对象，代表调用中使用的Ajax设置（ &lt;code&gt;$.ajaxSettings&lt;/code&gt; 与传递给 &lt;code&gt;$.ajax&lt;/code&gt; 的设置合并）。例如，将DOM元素指定为上下文将使该上下文成为请求的 &lt;code&gt;complete&lt;/code&gt; 回调，如下所示：</target>
        </trans-unit>
        <trans-unit id="94cbfc92f8ea1f8d27355869ff32de50ce680892" translate="yes" xml:space="preserve">
          <source>This page documents data types appearing in jQuery function signatures, whether defined by JavaScript itself or further restricted by jQuery. Unless explicitly stated otherwise, jQuery functions require primitive values where applicable, and do not accept their Object-wrapped forms. If you want to study these concepts in depth, take a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;MDN&lt;/a&gt;.</source>
          <target state="translated">此页面记录了出现在jQuery函数签名中的数据类型，无论是由JavaScript本身定义还是由jQuery进一步限制。除非另有明确说明，否则jQuery函数在适用时需要原始值，并且不接受其对象包装形式。如果您想深入研究这些概念，请查看&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;MDN&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="56203e63040b71fce3654bce970b8a4d69bf07fb" translate="yes" xml:space="preserve">
          <source>This produces the following data structure (provided that the browser supports &lt;code&gt;console.log&lt;/code&gt;):</source>
          <target state="translated">这将产生以下数据结构（假设浏览器支持 &lt;code&gt;console.log&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="ea2441e4626bbaa933d91f94581ef965a8c98747" translate="yes" xml:space="preserve">
          <source>This produces two messages:</source>
          <target state="translated">这就产生了两条信息。</target>
        </trans-unit>
        <trans-unit id="fc3c947e063813842196c7d7043a6f71bdfe405d" translate="yes" xml:space="preserve">
          <source>This property can be useful for getting previous return values of custom events.</source>
          <target state="translated">此属性可以用于获取自定义事件的以前的返回值。</target>
        </trans-unit>
        <trans-unit id="1e6af58b84f3fd5422adf8be75663d1cdcaec458" translate="yes" xml:space="preserve">
          <source>This property can be useful for profiling event performance by getting the &lt;code&gt;event.timeStamp&lt;/code&gt; value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use &lt;code&gt;(new Date).getTime()&lt;/code&gt; instead.</source>
          <target state="translated">通过在代码的两点获取 &lt;code&gt;event.timeStamp&lt;/code&gt; 值并注意区别，此属性对于分析事件性能很有用。要简单地确定事件处理程序中的当前时间，请改用 &lt;code&gt;(new Date).getTime()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32854e587e24ee920ce451c5ed1f67d727e051d7" translate="yes" xml:space="preserve">
          <source>This property is available immediately. It is therefore safe to use it to determine whether or not to call &lt;code&gt;$(document).ready()&lt;/code&gt;. The &lt;code&gt;$.browser&lt;/code&gt; property is deprecated in jQuery 1.3, and its functionality may be moved to a team-supported plugin in a future release of jQuery.</source>
          <target state="translated">此属性立即可用。因此，使用它来确定是否调用 &lt;code&gt;$(document).ready()&lt;/code&gt; 是安全的。在 &lt;code&gt;$.browser&lt;/code&gt; 属性弃用的jQuery 1.3，其功能可能被移动到jQuery中的未来的版本中得到全队支持的插件。</target>
        </trans-unit>
        <trans-unit id="0cb47618e4f09b9437b6d3e0140b679d5c2ebfe6" translate="yes" xml:space="preserve">
          <source>This property is deprecated as of version 3.0, and has no effect in browsers that support the &lt;a href=&quot;https://caniuse.com/#feat=requestanimationframe&quot;&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">从3.0版开始，此属性已弃用，并且在支持&lt;a href=&quot;https://caniuse.com/#feat=requestanimationframe&quot;&gt; &lt;code&gt;requestAnimationFrame&lt;/code&gt; &lt;/a&gt;方法的浏览器中无效。</target>
        </trans-unit>
        <trans-unit id="02b9c04a0a37a88e51468f13a1b96e7dc499d1cf" translate="yes" xml:space="preserve">
          <source>This property is most often useful in delegated events attached by &lt;a href=&quot;delegate&quot;&gt;&lt;code&gt;.delegate()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;on&quot;&gt;&lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt;, where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.</source>
          <target state="translated">此属性在&lt;a href=&quot;delegate&quot;&gt; &lt;code&gt;.delegate()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;on&quot;&gt; &lt;code&gt;.on()&lt;/code&gt; &lt;/a&gt;附加的委托事件中最有用，其中事件处理程序附加在要处理的元素的祖先。例如，它可以用于在委派点处标识和删除事件处理程序。</target>
        </trans-unit>
        <trans-unit id="5242b856f2e8af25d2fe18fd4c6247bb987e210a" translate="yes" xml:space="preserve">
          <source>This property was introduced in &lt;a href=&quot;https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped&quot;&gt;DOM level 3&lt;/a&gt;.</source>
          <target state="translated">此属性是在&lt;a href=&quot;https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped&quot;&gt;DOM级别3中&lt;/a&gt;引入的。</target>
        </trans-unit>
        <trans-unit id="5624080d6e56e0b5af625d523f2fcfcdbbad692f" translate="yes" xml:space="preserve">
          <source>This property will typically be equal to the &lt;code&gt;this&lt;/code&gt; of the function.</source>
          <target state="translated">此属性通常将等 &lt;code&gt;this&lt;/code&gt; 函数的this。</target>
        </trans-unit>
        <trans-unit id="6de398b115e8ac4d3b07baf9ed497787bdfbc62f" translate="yes" xml:space="preserve">
          <source>This results in the DOM structure:</source>
          <target state="translated">这样就形成了DOM结构。</target>
        </trans-unit>
        <trans-unit id="3f3c511251892c96fdc482ea356fa92b79ae9eba" translate="yes" xml:space="preserve">
          <source>This results in the structure:</source>
          <target state="translated">这就造成了结构。</target>
        </trans-unit>
        <trans-unit id="31f4d3fdf074258f85fde4229aa90949580dc628" translate="yes" xml:space="preserve">
          <source>This results in two alerts:</source>
          <target state="translated">这就导致了两个警报。</target>
        </trans-unit>
        <trans-unit id="fb2238853884687136f37826653802e89b4ec755" translate="yes" xml:space="preserve">
          <source>This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.</source>
          <target state="translated">这个选择器对于识别服务器端框架生成的HTML页面中的元素很有用,因为这些框架生成的HTML有系统的元素ID。然而,它的速度会比使用类选择器慢,所以如果可以的话,请利用类来分组同类元素。</target>
        </trans-unit>
        <trans-unit id="542c4fe2ce4fad40e426004d25711efcc3fa66b4" translate="yes" xml:space="preserve">
          <source>This selector is equivalent to &lt;code&gt;:not([attr='value'])&lt;/code&gt;.</source>
          <target state="translated">该选择器等效于 &lt;code&gt;:not([attr='value'])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4db2a826908ba8d7cc8b0f271e54dfa57adba710" translate="yes" xml:space="preserve">
          <source>This selector is the opposite of the &lt;a href=&quot;hidden-selector&quot;&gt;&lt;code&gt;:hidden&lt;/code&gt;&lt;/a&gt; selector. So, every element selected by &lt;code&gt;:visible&lt;/code&gt; isn't selected by &lt;code&gt;:hidden&lt;/code&gt; and vice versa.</source>
          <target state="translated">该选择器与&lt;a href=&quot;hidden-selector&quot;&gt; &lt;code&gt;:hidden&lt;/code&gt; &lt;/a&gt;选择器相反。因此， &lt;code&gt;:visible&lt;/code&gt; 选择的每个元素都不会被 &lt;code&gt;:hidden&lt;/code&gt; 选择，反之亦然。</target>
        </trans-unit>
        <trans-unit id="1e74fa4479166ae1158a0c6329853a1894417dc8" translate="yes" xml:space="preserve">
          <source>This selector is the opposite of the &lt;a href=&quot;visible-selector&quot;&gt;&lt;code&gt;:visible&lt;/code&gt;&lt;/a&gt; selector. So, every element selected by &lt;code&gt;:hidden&lt;/code&gt; isn't selected by &lt;code&gt;:visible&lt;/code&gt; and vice versa.</source>
          <target state="translated">该选择器与&lt;a href=&quot;visible-selector&quot;&gt; &lt;code&gt;:visible&lt;/code&gt; &lt;/a&gt;选择器相反。因此， &lt;code&gt;:hidden&lt;/code&gt; 选择的每个元素都不会被 &lt;code&gt;:visible&lt;/code&gt; 选择，反之亦然。</target>
        </trans-unit>
        <trans-unit id="b3a2d5e9b02d76f676ebf7a40f5475bdf5d72525" translate="yes" xml:space="preserve">
          <source>This selector matches the test string against each word in the attribute value, where a &quot;word&quot; is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.</source>
          <target state="translated">这个选择器将测试字符串与属性值中的每个单词进行匹配,其中 &quot;单词 &quot;被定义为以空格分隔的字符串。如果测试字符串与任何一个词完全相等,选择器就会匹配。</target>
        </trans-unit>
        <trans-unit id="2aacd81dd9108d85703a0183ce334c9f00b22a92" translate="yes" xml:space="preserve">
          <source>This selector was introduced into the CSS specification to handle language attributes.</source>
          <target state="translated">这个选择器被引入到CSS规范中来处理语言属性。</target>
        </trans-unit>
        <trans-unit id="157e09ed59bcd27e64a54f0808685dfbd88c2ba5" translate="yes" xml:space="preserve">
          <source>This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.</source>
          <target state="translated">这个快捷键创建了一个新的空数组,并将oldArray的内容合并到其中,有效地克隆了数组。</target>
        </trans-unit>
        <trans-unit id="fe3f15321a53dc582b1d5e1967292d0bc3fdf9eb" translate="yes" xml:space="preserve">
          <source>This signature does not accept any arguments.</source>
          <target state="translated">该签名不接受任何参数。</target>
        </trans-unit>
        <trans-unit id="62e54623d8fe421971d23883eb405d33fe0f0049" translate="yes" xml:space="preserve">
          <source>This statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.</source>
          <target state="translated">这条语句改变了项目1、2、4和5的颜色。我们本可以用一个更简单的jQuery表达式来完成同样的事情,但当其他库提供对普通DOM节点的引用时,这种技术可以很有用。</target>
        </trans-unit>
        <trans-unit id="641e0b0e743e0f9db8cc5b5032d87f59f062fa73" translate="yes" xml:space="preserve">
          <source>This technique is especially effective in conjunction with the &lt;code&gt;.ready()&lt;/code&gt; method's ability to alias the jQuery object, as within callback passed to &lt;code&gt;.ready()&lt;/code&gt; you can use &lt;code&gt;$&lt;/code&gt; if you wish without fear of conflicts later:</source>
          <target state="translated">结合 &lt;code&gt;.ready()&lt;/code&gt; 方法对jQuery对象进行别名的功能，此技术特别有效，因为在传递给 &lt;code&gt;.ready()&lt;/code&gt; 的回调中，如果愿意，可以使用 &lt;code&gt;$&lt;/code&gt; ，而不必担心以后发生冲突：</target>
        </trans-unit>
        <trans-unit id="ef9920d4ff0249fafafc91db9d9e4e8c4396132d" translate="yes" xml:space="preserve">
          <source>This time list item 4 is turned red, since it is two from the end of the set.</source>
          <target state="translated">这次的清单项目4变成了红色,因为是套路结束后的两个。</target>
        </trans-unit>
        <trans-unit id="fb54eb060df63805863b2cc09662a50e679af5ab" translate="yes" xml:space="preserve">
          <source>This time only list item 4 is turned red, since it is the only item in the range between two from the end (&lt;code&gt;-2&lt;/code&gt;) and one from the end (&lt;code&gt;-1&lt;/code&gt;).</source>
          <target state="translated">这次，仅列表项4变为红色，因为它是末尾的两个（ &lt;code&gt;-2&lt;/code&gt; ）和末尾的一个（ &lt;code&gt;-1&lt;/code&gt; ）之间的唯一项。</target>
        </trans-unit>
        <trans-unit id="8e1b0702c2347c741838ffed942588981600a704" translate="yes" xml:space="preserve">
          <source>This time the variable is not referred to directly within the handlers; instead, the variable is passed in &lt;em&gt;by value&lt;/em&gt; through &lt;code&gt;eventData&lt;/code&gt;, which fixes the value at the time the event is bound. The first handler will now display</source>
          <target state="translated">这次不直接在处理程序中引用变量。相反，变量是通过 &lt;code&gt;eventData&lt;/code&gt; &lt;em&gt;通过值&lt;/em&gt;传递的，该事件将在绑定事件时固定值。现在将显示第一个处理程序</target>
        </trans-unit>
        <trans-unit id="33e92c4d32c144b41a463b2a72bc99e0d9ed77bf" translate="yes" xml:space="preserve">
          <source>This use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.</source>
          <target state="translated">在一次修改多个元素的属性时,这种使用函数计算属性值的方式特别有用。</target>
        </trans-unit>
        <trans-unit id="90e99a4c6ae445c81aefa522c507c0b74a3289ec" translate="yes" xml:space="preserve">
          <source>This version removes the handlers regardless of type. To be more precise, we can pass an event type:</source>
          <target state="translated">这个版本不管类型如何,都会删除处理程序。更准确地说,我们可以传递一个事件类型。</target>
        </trans-unit>
        <trans-unit id="4b8f494293589fde5d66a9f0fd3de5d8ce4c6042" translate="yes" xml:space="preserve">
          <source>This will cause each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to have a class corresponding to the text it wraps:</source>
          <target state="translated">这将导致每个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 都有一个与其包装的文本相对应的类：</target>
        </trans-unit>
        <trans-unit id="4d9118b4fa1f3e8e18281acd7053ecc4ebd98b4f" translate="yes" xml:space="preserve">
          <source>This will change the color of list item A. The &lt;code&gt;.closest()&lt;/code&gt; method begins its search &lt;em&gt;with the element itself&lt;/em&gt; before progressing up the DOM tree, and stops when item A matches the selector.</source>
          <target state="translated">这将更改列表项A的颜色 &lt;code&gt;.closest()&lt;/code&gt; 方法在进行DOM树升级之前&lt;em&gt;从元素本身&lt;/em&gt;开始搜索，并在项A与选择器匹配时停止搜索。</target>
        </trans-unit>
        <trans-unit id="14e650ca3a960ce5e1c69a20a7735fd10a84f51f" translate="yes" xml:space="preserve">
          <source>This will change the color of list item II, which is positioned.</source>
          <target state="translated">这将改变列表项二的颜色,它的定位。</target>
        </trans-unit>
        <trans-unit id="6445328f9b2e260ef2fd3767cecdd73168ad2247" translate="yes" xml:space="preserve">
          <source>This will change the color of the level-2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, because it is both the first &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; ancestor of list item A and a descendant of list item II. It will not change the color of the level-1 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, however, because it is not a descendant of list item II.</source>
          <target state="translated">这将更改级别2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 的颜色，因为它既是列表项A 的第一个 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 祖先，也是列表项II的后代。但是，它不会更改级别1 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 的颜色，因为它不是列表项II的后代。</target>
        </trans-unit>
        <trans-unit id="30761f176591a578865ba51b9704b1d8e4292dab" translate="yes" xml:space="preserve">
          <source>This will change the color of the level-2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, since it is the first encountered when traveling up the DOM tree.</source>
          <target state="translated">这将更改2级 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 的颜色，因为它是在DOM树上移动时第一次遇到的颜色。</target>
        </trans-unit>
        <trans-unit id="da12335e31823528963ade8757b1f95116d49939" translate="yes" xml:space="preserve">
          <source>This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.</source>
          <target state="translated">这可能主要由插件作者使用,他们希望根据使用的事件命名空间来处理不同的任务。</target>
        </trans-unit>
        <trans-unit id="23a466e8090dcdd96843ee2332573bed8a724b31" translate="yes" xml:space="preserve">
          <source>This will result in a DOM structure with the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element deleted:</source>
          <target state="translated">这将导致删除 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素的DOM结构：</target>
        </trans-unit>
        <trans-unit id="ac3089e0a92b12a862e14834e3811b822b252ec9" translate="yes" xml:space="preserve">
          <source>This will result in a DOM structure with the &lt;code&gt;Hello&lt;/code&gt; text deleted:</source>
          <target state="translated">这将导致删除 &lt;code&gt;Hello&lt;/code&gt; 文本的DOM结构：</target>
        </trans-unit>
        <trans-unit id="8f51918357cfd5fb539009a6a575f4d17e914b38" translate="yes" xml:space="preserve">
          <source>This will return a jQuery collection which contains only the list elements that are descendants of item II.</source>
          <target state="translated">这将返回一个jQuery集合,其中只包含列表元素是项目II的后裔。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
