<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="werkzeug">
    <body>
      <group id="werkzeug">
        <trans-unit id="d518ee4676b80ad78627e3058478d5d42201367e" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2007&amp;ndash;2020 Pallets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7adaeeafeb7e7e4fd2e3a64e42adb956ab775ff" translate="yes" xml:space="preserve">
          <source>(Browsers marked with a star (&lt;code&gt;*&lt;/code&gt;) are crawlers.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f60656d7002c6bfd1f51dbe00e87b64e6955542" translate="yes" xml:space="preserve">
          <source>(mimetype, options) or (mimetype, options, mimetype, options, &amp;hellip;) if multiple=True</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b002e20c6d5fcaa07b01f8c1fa33cc88f253f2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; implements all standard dictionary methods. Internally, it saves all values for a key as a list, but the standard dict access methods will only return the first value for a key. If you want to gain access to the other values, too, you have to use the &lt;code&gt;list&lt;/code&gt; methods as explained below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8a608ed88b40a56afe9e9e9aad7c614da539fe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.AcceptMixin&quot;&gt;&lt;code&gt;AcceptMixin&lt;/code&gt;&lt;/a&gt; for accept header parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ded18f7a0614e5f983010c84840645acec7c6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.AuthorizationMixin&quot;&gt;&lt;code&gt;AuthorizationMixin&lt;/code&gt;&lt;/a&gt; for http auth handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba7054696bd98c2483a52ebb1915919f5e1d959" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.CommonRequestDescriptorsMixin&quot;&gt;&lt;code&gt;CommonRequestDescriptorsMixin&lt;/code&gt;&lt;/a&gt; for common headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3551c5a85b623379a193f290117e15de806442" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.CommonResponseDescriptorsMixin&quot;&gt;&lt;code&gt;CommonResponseDescriptorsMixin&lt;/code&gt;&lt;/a&gt; for various HTTP descriptors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92225f563020bb17399de388b9cace2047a753d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.ETagRequestMixin&quot;&gt;&lt;code&gt;ETagRequestMixin&lt;/code&gt;&lt;/a&gt; for etag and cache control handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fb5516f727ec36ffc848088d3f02034c61f1db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.ETagResponseMixin&quot;&gt;&lt;code&gt;ETagResponseMixin&lt;/code&gt;&lt;/a&gt; for etag and cache control handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72edd3c6f1c4714b3ec9651ad8084b5ba2c13ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.ResponseStreamMixin&quot;&gt;&lt;code&gt;ResponseStreamMixin&lt;/code&gt;&lt;/a&gt; to add support for the &lt;code&gt;stream&lt;/code&gt; property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27db76a58399bb32857b8eea35ff2b0e5291587" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.UserAgentMixin&quot;&gt;&lt;code&gt;UserAgentMixin&lt;/code&gt;&lt;/a&gt; for user agent introspection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe57c9b3c118aee2a72b8dd7116dddff3ff960c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.WWWAuthenticateMixin&quot;&gt;&lt;code&gt;WWWAuthenticateMixin&lt;/code&gt;&lt;/a&gt; for HTTP authentication support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a9103c94edfee28dc4ea92a81db5919389f550" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.cors.CORSRequestMixin&quot;&gt;&lt;code&gt;CORSRequestMixin&lt;/code&gt;&lt;/a&gt; for Cross Origin Resource Sharing headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89382e929d7276b3f427053098de0361ce50bd8c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#werkzeug.wrappers.cors.CORSResponseMixin&quot;&gt;&lt;code&gt;CORSResponseMixin&lt;/code&gt;&lt;/a&gt; for Cross Origin Resource Sharing headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7369813827a5fa0bb20da4d1b9ac06e22215440b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../datastructures/index#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; object containing all uploaded files. Each key in &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; is the name from the &lt;code&gt;&amp;lt;input type=&quot;file&quot; name=&quot;&quot;&amp;gt;&lt;/code&gt;. Each value in &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; is a Werkzeug &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.FileStorage&quot;&gt;&lt;code&gt;FileStorage&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae26e6484e8a5bd7cd887ec34f90bcbe9dcc51b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../exceptions/index#werkzeug.exceptions.RequestedRangeNotSatisfiable&quot;&gt;&lt;code&gt;RequestedRangeNotSatisfiable&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;Range&lt;/code&gt; header could not be parsed or satisfied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b5cda7617b9c3a24bf6b574b5e3f6cb1546da2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../exceptions/index#werkzeug.exceptions.SecurityError&quot;&gt;&lt;strong&gt;SecurityError&lt;/strong&gt;&lt;/a&gt; &amp;ndash; If the host is not trusted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864560e99e7ef19cfbbd7148559b367e32ccadd1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;strong&gt;ValueError&lt;/strong&gt;&lt;/a&gt; &amp;ndash; If the ranges provided are invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11fc50fd19cb0b29d64233ff352eeadd6743ea7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://pypi.org/project/click/&quot;&gt;Click&lt;/a&gt; provides request log highlighting when using the development server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264a589fdca9059fe17216a3ad7d74dbae8da08f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://pypi.org/project/watchdog/&quot;&gt;Watchdog&lt;/a&gt; provides a faster, more efficient reloader for the development server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d220980d35cc82dd4548eee2446c33f5e98515d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://simplejson.readthedocs.io/en/latest/&quot;&gt;SimpleJSON&lt;/a&gt; is a fast JSON implementation that is compatible with Python&amp;rsquo;s &lt;code&gt;json&lt;/code&gt; module. It is preferred for JSON operations if it is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcaf7088e9a69c7e53ad5186ba487453a2b6d91e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if it&amp;rsquo;s an HTTP/1.1 &amp;ldquo;Hop-by-Hop&amp;rdquo; header, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638f30fd3d884ed007d46a0a3968fdb5bc731c26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if it&amp;rsquo;s an entity header, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d31e569e2c6d2e7618b9d203b25d3d0acda5cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the request is secure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a12281c615deb95f10508fa42b256b942f37e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the resource was modified, otherwise &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9828e97789c4e8dc376d7ebfa4c3039a901732" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if this request object is shallow (does not modify &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;), &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37fd362ab08f938a3cd889f6bc52d740daf6e80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X-Forwarded-For&lt;/code&gt; sets &lt;code&gt;REMOTE_ADDR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2329b9b4e22c237d938063b15956858c4032a004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X-Forwarded-Host&lt;/code&gt; sets &lt;code&gt;HTTP_HOST&lt;/code&gt;, &lt;code&gt;SERVER_NAME&lt;/code&gt;, and &lt;code&gt;SERVER_PORT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df70c77826a3bfcb9bdd3027867c3f75e6f4a943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X-Forwarded-Port&lt;/code&gt; sets &lt;code&gt;HTTP_HOST&lt;/code&gt; and &lt;code&gt;SERVER_PORT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32c9de0f40ed66421d526c3590e8d22f9c38c3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X-Forwarded-Prefix&lt;/code&gt; sets &lt;code&gt;SCRIPT_NAME&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6e86fe1fb3ac081b8e5df3f6f3811a7e127fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X-Forwarded-Proto&lt;/code&gt; sets &lt;code&gt;wsgi.url_scheme&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d75000f76fc800fa14209ab104c1f6b40a35be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aol&lt;/code&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa8cd8e9c80b1abc174389dcc1ae16844e04a30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ask&lt;/code&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50820c2a1052db1077f077422a2bbdef6f742f1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baidu&lt;/code&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781b4c330dc3922aa6f4ec413c073b19dd9f19fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bing&lt;/code&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3088d80d552b8938b7067121f600c21fd2333d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; can be any of these values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1af001eb2a0bcfde3b721c3abb74160de49392b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;google&lt;/code&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1e2432e272a43c23b17a1a49581938d18b7bfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod_wsgi&lt;/code&gt; (Apache)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adce46de2c53a6426bae431a0db6cff0383af36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reverse-url:&lt;/code&gt; + the URL will store the short id. If the URL was already submitted this won&amp;rsquo;t be None and we can just return that value which will be the short ID. Otherwise we increment the &lt;code&gt;last-url-id&lt;/code&gt; key and convert it to base36. Then we store the link and the reverse entry in redis. And here the function to convert to base 36:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560ea46999821fb58c61f66b82546782baed3956" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subdomain&lt;/code&gt; will default to the &lt;code&gt;default_subdomain&lt;/code&gt; for this map if no defined. If there is no &lt;code&gt;default_subdomain&lt;/code&gt; you cannot use the subdomain feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87641e89e0b4a5e038e8ea20a71845d9542bc72a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;werkzeug.urls&lt;/code&gt; used to provide several wrapper functions for Python 2 urlparse, whose main purpose were to work around the behavior of the Py2 stdlib and its lack of unicode support. While this was already a somewhat inconvenient situation, it got even more complicated because Python 3&amp;rsquo;s &lt;code&gt;urllib.parse&lt;/code&gt; actually does handle unicode properly. In other words, this module would wrap two libraries with completely different behavior. So now this module contains a 2-and-3-compatible backport of Python 3&amp;rsquo;s &lt;code&gt;urllib.parse&lt;/code&gt;, which is mostly API-compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9642008421b698fb64c1178085a688f3889b09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yahoo&lt;/code&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c119c9daf9bc27962291e2d47c92f27320bec80a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{elapsed}&lt;/code&gt; - The elapsed time of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f727e0183b19699676481eff83250f0d871c994" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{method}&lt;/code&gt; - The request method; GET, POST, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f89131f9fc23d72b0198b4cfd7c2775532d549" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{path}&lt;/code&gt; - The request path or &amp;lsquo;root&amp;rsquo; should one not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cde9bbae7a5ea798ef0ff3ff7191c1a863baa8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{time}&lt;/code&gt; - The time of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad71ac462c89ef51ed2fa6b8112fe3baedf72ffb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;400&lt;/em&gt;&lt;code&gt;Bad Request&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b360aadf90746813f7b1a3e63219a82b2514db" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;401&lt;/em&gt;&lt;code&gt;Unauthorized&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;401&lt;/em&gt;&lt;code&gt;Unauthorized&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b8800a35e3509455d97528b6a33937258986244" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;403&lt;/em&gt;&lt;code&gt;Forbidden&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;403&lt;/em&gt;&lt;code&gt;Forbidden&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb5a7e29a785428b29c2178f61a2cd03d2251c86" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;404&lt;/em&gt;&lt;code&gt;Not Found&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617eea5ebba6fa10177d5311102ea084b93746f2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;405&lt;/em&gt;&lt;code&gt;Method Not Allowed&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6186629de7fd43403afe0c182b8c94e61a3d66" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;406&lt;/em&gt;&lt;code&gt;Not Acceptable&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2510330c8bfb93c936d7b25f4d17bf5dfa1a07" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;408&lt;/em&gt;&lt;code&gt;Request Timeout&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae34cd23911b16139e713ac16dbdb05bb89c147e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;409&lt;/em&gt;&lt;code&gt;Conflict&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;409&lt;/em&gt;&lt;code&gt;Conflict&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="042b7583b3c58328118dc87a592c6bfdce090ee9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;410&lt;/em&gt;&lt;code&gt;Gone&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;410&lt;/em&gt;&lt;code&gt;Gone&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bda239f2eb9ca757f930cb544c60917b03d20f26" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;411&lt;/em&gt;&lt;code&gt;Length Required&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435b3d633e21c66c27a32681466ef2265a130a20" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;412&lt;/em&gt;&lt;code&gt;Precondition Failed&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3e72bd4f1a8989d8cf607f0ee8d18aef33bf8a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;413&lt;/em&gt;&lt;code&gt;Request Entity Too Large&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e9123a3e45c1de3771cf2e28c6c257befc3632" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;414&lt;/em&gt;&lt;code&gt;Request URI Too Large&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a9e0e91b4afe8f29311ecb0c307c3ae4cfee98" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;415&lt;/em&gt;&lt;code&gt;Unsupported Media Type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40ff6278b1a062634d7a49479941e6de18795be" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;416&lt;/em&gt;&lt;code&gt;Requested Range Not Satisfiable&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c289ee4efee78d85c6950916d509e5a561c40fca" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;417&lt;/em&gt;&lt;code&gt;Expectation Failed&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15048efea0cd8e1ca24fdd452cac7af14147df25" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;418&lt;/em&gt;&lt;code&gt;I&amp;rsquo;m a teapot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049c2bec808f8e1638ee742d1142cd751d42dedd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;422&lt;/em&gt;&lt;code&gt;Unprocessable Entity&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c208af1b344d3f46c80d79f73bdc6e9dc3cd5127" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;423&lt;/em&gt;&lt;code&gt;Locked&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;423&lt;/em&gt;&lt;code&gt;Locked&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c5869a8a1167aed800d34ed665b09b368fb3993" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;424&lt;/em&gt;&lt;code&gt;Failed Dependency&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11aec249d8a7103c07daca667810e85bc9ecb8a8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;428&lt;/em&gt;&lt;code&gt;Precondition Required&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ae1c59bd8f01e4fdf0316e857fa171b72dc8eb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;429&lt;/em&gt;&lt;code&gt;Too Many Requests&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c7bf51be49fcf830f54be0fa87ead96939c82e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;431&lt;/em&gt;&lt;code&gt;Request Header Fields Too Large&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42675f7251b20e8965fc3059d8aac096ce5fe489" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;451&lt;/em&gt;&lt;code&gt;Unavailable For Legal Reasons&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ef56846cd2c2ad99d6c035df52a55e1257986f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;500&lt;/em&gt;&lt;code&gt;Internal Server Error&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de405aedd8f26c46ddf7077857925f1d1cdce73f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;501&lt;/em&gt;&lt;code&gt;Not Implemented&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3546afbfa16ab84531cea8f413f295f73f80d3b7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;502&lt;/em&gt;&lt;code&gt;Bad Gateway&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3da3021106ff677d4fbdf5f73c2935482579eaa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;503&lt;/em&gt;&lt;code&gt;Service Unavailable&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef2f5120ea34c64068ca148fffbd06229ff0625" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;504&lt;/em&gt;&lt;code&gt;Gateway Timeout&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0d46d272c2884e8c49a859f7c9b1be1357b00b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;505&lt;/em&gt;&lt;code&gt;HTTP Version Not Supported&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260be0a749940401b9f81568f726b37c0c380005" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;layout.html&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;layout.html&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="1c130b0d9b086a2b625ae1a7eda7f74f119364c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;new_url.html&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;new_url.html&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="f12a160d831142158adcb0c7d59fd5d924136410" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;short_link_details.html&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;short_link_details.html&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="5c6f5c05bba3a295631daf895cb8874c89e75b49" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;static/style.css&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;static/style.css&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="ecec9765e75fddda64f7eb5543be3dad5d5f0dc2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;werkzeug&lt;/em&gt; German noun: &amp;ldquo;tool&amp;rdquo;. Etymology: &lt;em&gt;werk&lt;/em&gt; (&amp;ldquo;work&amp;rdquo;), &lt;em&gt;zeug&lt;/em&gt; (&amp;ldquo;stuff&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb3550e0c44f0ea6aa4d3621081d1d1c4bffe46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;General rule:&lt;/strong&gt; Leave the WSGI input stream alone. Especially in WSGI middlewares. Use either the parsing functions or the request object. Do not mix multiple WSGI utility libraries for form data parsing or anything else that works on the input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0282233ea1053368ffa4a368bae3f1d7c43336" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Response&lt;/strong&gt; (&lt;em&gt;class&lt;/em&gt;) &amp;ndash; a Response class to use when instantiating a response. The default is &lt;a href=&quot;../wrappers/index#werkzeug.wrappers.Response&quot;&gt;&lt;code&gt;werkzeug.wrappers.Response&lt;/code&gt;&lt;/a&gt; if unspecified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfdb94d0cfe61ab253259605a63cd41ef859665" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This feature is not meant to entirely secure the debugger. It is intended to make it harder for an attacker to exploit the debugger. Never enable the debugger in production.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e72b655754fd1225536ab74a7e127823de9ac9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;accept_ranges&lt;/strong&gt; &amp;ndash; This parameter dictates the value of &lt;code&gt;Accept-Ranges&lt;/code&gt; header. If &lt;code&gt;False&lt;/code&gt; (default), the header is not set. If &lt;code&gt;True&lt;/code&gt;, it will be set to &lt;code&gt;&quot;bytes&quot;&lt;/code&gt;. If &lt;code&gt;None&lt;/code&gt;, it will be set to &lt;code&gt;&quot;none&quot;&lt;/code&gt;. If it&amp;rsquo;s a string, it will use this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b06059e062d10970708ae3108477128eccf537c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allow_fragments&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;False&lt;/code&gt; a fragment will be removed from the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a453cfe0033db6bcde82ba6f3486fc8ecb2b95cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allow_fragments&lt;/strong&gt; &amp;ndash; indicates whether fragments should be allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fb7631727109aa60320ed6996123cf94c6beec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allow_token&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;False&lt;/code&gt; tokens as values are disallowed. See &lt;a href=&quot;#werkzeug.http.quote_header_value&quot;&gt;&lt;code&gt;quote_header_value()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3cf941795bce98f7b2909debdb7249cb6f8718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allow_token&lt;/strong&gt; &amp;ndash; if this is enabled token values are returned unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4557f9948921939adf92e43c30e89c8a71cf11a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allowed&lt;/strong&gt; &amp;ndash; a list of headers that should still be allowed even though they are entity headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb6fc5c244d78f7d1e64f06a88733deea99b957" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; The WSGI application to dispatch to if the request doesn&amp;rsquo;t match a mounted path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214f8128a05356c7661207f8e9d2bf0ab86b1856" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; The WSGI application to wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e628cb3ace16add37cd51ddc46e4d1c4fdf7ec0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; the WSGI application to execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bceeb4d1a068489f3cebe58b21707082e713f38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; the WSGI application to run debugged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1c1a5bd70c2e2ac35b340f590cd178a2966869" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; the application to execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e6e1bd4bf5193f0a5f68f84398673b9a4b1b29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; the application to wrap. If you don&amp;rsquo;t want to wrap an application you can pass it &lt;code&gt;NotFound&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2186ddfa07161041008650963188384b4fc9c3c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;append_unknown&lt;/strong&gt; &amp;ndash; unknown parameters are appended to the generated URL as query string argument. Disable this if you want the builder to ignore those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e095d11f9b13ae5acf958c38b5b58aee0e307a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;application&lt;/strong&gt; &amp;ndash; the WSGI application to execute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17c9e8c08603cb9bfe8b114a45b88747854265c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;args&lt;/strong&gt; &amp;ndash; a tuple of positional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61dfee16da39da981076d9311132f2898dc410b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;args&lt;/strong&gt; &amp;ndash; tuple of positional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5565a9de00c6bf7244ee0409e35eadf039aff4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;arguments&lt;/strong&gt; &amp;ndash; this function accepts one or more arguments as positional arguments. Each one of them is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e6e62915cc8972c45d8f7da5c4cf73e282162a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;as_bytes&lt;/strong&gt; &amp;ndash; return bytes instead of unicode strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebce9f13b390132727c9d5b7e56de78fe0916f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;as_tuple&lt;/strong&gt; &amp;ndash; Returns a tuple in the form &lt;code&gt;(environ, result)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da609399893686dd022cbb827ea4a0d96777d7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base&lt;/strong&gt; &amp;ndash; the base URL for the join operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb21b47acdb425a77eb6e16463cb6590e2890eb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base_path&lt;/strong&gt; &amp;ndash; the path to the certificate and key. The extension &lt;code&gt;.crt&lt;/code&gt; is added for the certificate, &lt;code&gt;.key&lt;/code&gt; is added for the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03334a459ec5a0de440e62961f6ed17640893eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base_url&lt;/strong&gt; &amp;ndash; the base URL is a URL that is used to extract the WSGI URL scheme, host (server name + server port) and the script root (&lt;code&gt;SCRIPT_NAME&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8720c7ec3177daa526ef8c8221d234c03110a94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;buffer_size&lt;/strong&gt; &amp;ndash; Passed as the &lt;code&gt;length&lt;/code&gt; parameter of &lt;a href=&quot;https://docs.python.org/3/library/shutil.html#shutil.copyfileobj&quot;&gt;&lt;code&gt;shutil.copyfileobj()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe07d6bf61497f5c9b8f5544d0e1eabbc8b566e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;buffer_size&lt;/strong&gt; &amp;ndash; The optional buffer size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa9fedf7da4ee7eb2750ae5c2403bf1cab41ec4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;buffer_size&lt;/strong&gt; &amp;ndash; number of bytes for one iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f5182daf9b0ea6fb9f318ff89d978dfc6d8de2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;buffered&lt;/strong&gt; &amp;ndash; Set this to True to buffer the application run. This will automatically close the application for you as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c07b661fb3e5d2c2b4a2618cd93236268d804d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;buffered&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; to enforce buffering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5facf81498e0079ef55bd5885dca94b969d9d0d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cache&lt;/strong&gt; &amp;ndash; Store the parsed JSON to return for subsequent calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eda76ff670358989662a9a984d177e2a7e5a44a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cache&lt;/strong&gt; &amp;ndash; enable or disable caching headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229c7683008fe810eb778e2927b3815840c15403" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cache_timeout&lt;/strong&gt; &amp;ndash; the cache timeout in seconds for the headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c594d6c6a87a72fad2a2459672f4fe8bbcec81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cap_at_buffer&lt;/strong&gt; &amp;ndash; if this is set chunks are split if they are longer than the buffer size. Internally this is implemented that the buffer size might be exhausted by a factor of two however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9afae57f4f480fcef77eba6da01fb3271bc8803" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;catch_http_exceptions&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; to catch any of the werkzeug &lt;code&gt;HTTPException&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a9fcfc6c5e034d66369f1f439c43bd90a30240" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; The character set for URL and url encoded form data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3245618e105ecbf1a8911d9df2b1b170429accbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; The charset for the cookie values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e1dfcaea6ecdfc2be6c4b8ecc7b153aece8918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; The charset to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c6f8d65c9dff46a850634487bfd72955dbf742" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; The encoding of the IRI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dd286cd76bfb79c1557b1c04d976b1ff0a3536" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; The encoding to encode unquoted bytes with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b861a604ac3d182a2305f84d104624f2c4d1a770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; The target charset for the URL if the url was given as unicode string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6d4fd7fb492950dc6251b4016c5bdf1a1f7eac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; charset of the url. defaults to &lt;code&gt;&quot;utf-8&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ba03b044352a1d86040bf917f1abbaae416d21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; the charset for byte data in URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04590d24fac6b8cafbd5886ae6f629d8c325c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; the charset for the path info, or &lt;code&gt;None&lt;/code&gt; if no decoding should be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876a8a13ba736f21edfd220d21a992170410d1f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; the charset for the path, or &lt;code&gt;None&lt;/code&gt; if no decoding should be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaaab67d87bcb5bef6739881e7432a38f557f6b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; the charset of the query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bd4c01f01882b27abe6005447c09c86ea1c461" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; the charset of the query string. If set to &lt;code&gt;None&lt;/code&gt; no unicode decoding will take place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5465b01f5eb65b15b94b5b666a6994dbd648bd2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; the charset to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e44662335a3d5165304a75202dd36e04be4b43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; the charset used to encode unicode data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddfef95f0f28f05fb4859a937302a75e7a77f8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;charset&lt;/strong&gt; &amp;ndash; the encoding for unicode values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a04ad36a3ae7d254e7f00dde26580a685a12733" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;chunk_size&lt;/strong&gt; &amp;ndash; Size of chunks to read from input stream and write to target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158730bb545129cd1b598f24c66bb27ece43d0de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;chunk_size&lt;/strong&gt; &amp;ndash; the size for a chunk. It will read the chunk until the stream is exhausted and throw away the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4ca1d39f40c6db730e8b3efeb62df0e2d3737f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cls&lt;/strong&gt; &amp;ndash; A dict-like class to store the parsed cookies in. Defaults to &lt;code&gt;MultiDict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609167867fbdd9c82f5278af779a44530e52cf75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cls&lt;/strong&gt; &amp;ndash; The request wrapper to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1ab2826d27fb41187e9a8735550be6bfb336cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cls&lt;/strong&gt; &amp;ndash; an optional dict class to use. If this is not specified or &lt;code&gt;None&lt;/code&gt; the default &lt;code&gt;MultiDict&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11b137ee3983d0544bb09536df48697dda4f99e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cls&lt;/strong&gt; &amp;ndash; callable to use for storage of parsed results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8e1de828d5296727a74beca5763cfcdcf41e7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cls&lt;/strong&gt; &amp;ndash; the class for the returned object. By default &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.RequestCacheControl&quot;&gt;&lt;code&gt;RequestCacheControl&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3505224d88e666985d01c18e6583858c495800" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cls&lt;/strong&gt; &amp;ndash; the wrapper class for the return value (can be &lt;code&gt;Accept&lt;/code&gt; or a subclass thereof)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cf0c94029f07927f74267174c406453e26beba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cn&lt;/strong&gt; &amp;ndash; the &lt;code&gt;CN&lt;/code&gt; to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfca5efe6070315aabe88f6e28752f88293b5ba8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;code&lt;/strong&gt; &amp;ndash; the redirect status code. defaults to 302.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b32ddc2509630e48ca72c30b696efa6d01ae3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;code&lt;/strong&gt; &amp;ndash; the status code for the redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53dd11323282e03a3c2537e9ebca80897787e0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;collapse_http_schemes&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;False&lt;/code&gt; the algorithm does not assume that http and https on the same server point to the same resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5ba3e4c149f92c180e3dca1d30cb48c2e58b5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;complete_length&lt;/strong&gt; &amp;ndash; Will be used only in valid Range Requests. It will set &lt;code&gt;Content-Range&lt;/code&gt; complete length value and compute &lt;code&gt;Content-Length&lt;/code&gt; real value. This parameter is mandatory for successful Range Requests completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a29871fa7d3d5ef9be48e643acccc7d32e747a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;components&lt;/strong&gt; &amp;ndash; the parsed URL as tuple which should be converted into a URL string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707dfc3567fae9316c9f014cbd46a636427b4cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;console_init_func&lt;/strong&gt; &amp;ndash; the function that is executed before starting the general purpose console. The return value is used as initial namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db09ca6f7d2dc7c1d15fbde8d83f612128d7826" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;console_path&lt;/strong&gt; &amp;ndash; the URL for a general purpose console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f115f469df51cb8b3b8470fe9d7a78aa5d87680c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;content_length&lt;/strong&gt; &amp;ndash; The content length for the request. You don&amp;rsquo;t have to specify this when providing data via &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8f7cc672f805c3ace48da9afac719a8a50e75b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;content_length&lt;/strong&gt; &amp;ndash; the length of this file. This value is usually not provided because webbrowsers do not provide this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c81d94b7d7e84f2d696811820b4b60a1df54a49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;content_type&lt;/strong&gt; &amp;ndash; The content type for the request. As of 0.5 you don&amp;rsquo;t have to provide this when specifying files and form data via &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57db298a9194b801a6b9e7aabc0a95c0c3320a3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;content_type&lt;/strong&gt; &amp;ndash; an optional content type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb6dab4f38e153bb78aad8f18c7840f8558450f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;content_type&lt;/strong&gt; &amp;ndash; the content type for the response. See notice above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed290b212e7100c31144467feb6937e12ac72bbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;content_type&lt;/strong&gt; &amp;ndash; the mimetype of the uploaded file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3d0fdcac8ba6372ae6fa762d28c377717302ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;converters&lt;/strong&gt; &amp;ndash; A dict of converters that adds additional converters to the list of converters. If you redefine one converter this will override the original one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf17d340e7e75c60b6f445dee7f680faabf0d64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; a string or dict of form data or a file-object. See explanation above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3222b104b4eeeaa2c06476b04e93dd4552a0c41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; or alternatively the data of the response to automatically generate an etag using &lt;a href=&quot;#werkzeug.http.generate_etag&quot;&gt;&lt;code&gt;generate_etag()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da523e66ef06a95b4dc0d8a0ec9bdf1fc5e66763" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; &amp;ndash; the data to derive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6127dd8dbe278ed53bf0da450393376117542800" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;decode_keys&lt;/strong&gt; &amp;ndash; Used on Python 2.x to control whether keys should be forced to be unicode objects. If set to &lt;code&gt;True&lt;/code&gt; then keys will be unicode in all cases. Otherwise, they remain &lt;code&gt;str&lt;/code&gt; if they fit into ASCII.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110d361aa4da2bc38b888b4ccce13565dc5c61b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;decode_keys&lt;/strong&gt; &amp;ndash; Used on Python 2.x to control whether keys should be forced to be unicode objects. If set to &lt;code&gt;True&lt;/code&gt;, keys will be unicode in all cases. Otherwise, they remain &lt;code&gt;str&lt;/code&gt; if they fit into ASCII.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bc336a3472c260fd66cfdd4280bb18b9b7fa79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; An iterable of values to set for the key if it is not in the headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb202fe73a276773f71d6254bb743ca024189a64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; The default value to be returned if the key can&amp;rsquo;t be looked up. If not further specified &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b463f1ad3302435caec344ba8cc77060268dd90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; The default value to be returned if the key is not in the dict. If not further specified it&amp;rsquo;s &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6c136c389b4a0f2dadf040566351be991b0c89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; The value to set for the key if it is not in the headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b97e3d84096fbcbd12ac77e3589708e58983ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; if provided the value to return if the key was not in the dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c85659ebb1f138a3c7a43baaa4e2fe187aeaa8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; the value that is returned if none match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95b7c9dce1cb5ca0d3a910b455e18095e3b77a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default_list&lt;/strong&gt; &amp;ndash; An iterable of default values. It is either copied (in case it was a list) or converted into a list before returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519fa8c09a11df83396187c74c69b7fc6cc0e1cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default_subdomain&lt;/strong&gt; &amp;ndash; The default subdomain for rules without a subdomain defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a26b7376453086d7f747cc0f29dafd52df85626" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;defaults&lt;/strong&gt; &amp;ndash; The list of default values for the &lt;a href=&quot;#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ecfc34909509a0d7f759b337ba24cb288cecd3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;description&lt;/strong&gt; &amp;ndash; Override the default message used for the body of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ea02ff8cebc9947eb984d390a623fa9be381a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;direct_passthrough&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;True&lt;/code&gt;&lt;a href=&quot;#werkzeug.wrappers.BaseResponse.iter_encoded&quot;&gt;&lt;code&gt;iter_encoded()&lt;/code&gt;&lt;/a&gt; is not called before iteration which makes it possible to pass special iterators through unchanged (see &lt;code&gt;wrap_file()&lt;/code&gt; for more details.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e782d2ffbd0df1834177a473aaf5622809fd01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;directory&lt;/strong&gt; &amp;ndash; The trusted base directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0d7752d62e7640e9a94ea64da2c0e775fbb5d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;disallow&lt;/strong&gt; &amp;ndash; a list of &lt;a href=&quot;https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch&quot;&gt;&lt;code&gt;fnmatch()&lt;/code&gt;&lt;/a&gt; rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee75048d4a773fb7c8f41fbf657391e657f22ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;domain&lt;/strong&gt; &amp;ndash; Use this if you want to set a cross-domain cookie. For example, &lt;code&gt;domain=&quot;.example.com&quot;&lt;/code&gt; will set a cookie that is readable by the domain &lt;code&gt;www.example.com&lt;/code&gt;, &lt;code&gt;foo.example.com&lt;/code&gt; etc. Otherwise, a cookie will only be readable by the domain that set it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c815a6c5a4ac4361d831a021cf54e225e8ddf12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;domain&lt;/strong&gt; &amp;ndash; if the cookie that should be deleted was limited to a domain, that domain has to be defined here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad95a09a377f167eef559ed125ab766f0f6c846" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;domain&lt;/strong&gt; &amp;ndash; if you want to set a cross-domain cookie. For example, &lt;code&gt;domain=&quot;.example.com&quot;&lt;/code&gt; will set a cookie that is readable by the domain &lt;code&gt;www.example.com&lt;/code&gt;, &lt;code&gt;foo.example.com&lt;/code&gt; etc. Otherwise, a cookie will only be readable by the domain that set it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5d7d1a45cda6c5299208a467215a2bfe0ca90a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;drop_extra&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;False&lt;/code&gt; if you don&amp;rsquo;t want extra arguments to be silently dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e5192fad16dbab17027c0d96f39837d7191bcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dst&lt;/strong&gt; &amp;ndash; a filename, &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.PathLike&quot;&gt;&lt;code&gt;os.PathLike&lt;/code&gt;&lt;/a&gt;, or open file object to write to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a674819273aebe957bee47914b25341a2670a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;encode_keys&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; if you have unicode keys. (Ignored on Python 3.x)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eeee025b2f292b88538aa1c0506f4230d561c65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;encoding_errors&lt;/strong&gt; &amp;ndash; the error method to use for decoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8563a17ea55ba239a1a40cec18611b2f9a3cb50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;endpoint&lt;/strong&gt; &amp;ndash; if provided only the rules for that endpoint are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88658740a07d60b65f41b5f6c42deb4d541f05c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;endpoint&lt;/strong&gt; &amp;ndash; the endpoint of the URL to build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c0b94f389ed359b41bfc9ac0d1b237b31b2d44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;endpoint&lt;/strong&gt; &amp;ndash; the endpoint to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1996109c898f44aacbe56048a7796b2d310859e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; The WSGI environment to get the host from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd46050bcd36d4e174fab7d83517569c063ae1de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; a WSGI environment object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b064206bf93a30b22a07ff1fcf9db5673f3074" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; a WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f72a7b2f3e01831743320807298598b380ebeae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environ to fetch the content length from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebeab490efa605c07151a602b1535dd515513022" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environ to fetch the stream from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5175af02ae652683d9ad7a51e045ca08875cb64f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment for the request that triggers the redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b6637c50f9ae5e9193154799f098bd261fbaf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment object to get the path from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a18a4600a9111119d8d0a0595277f204d0f1bce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment object to get the query string from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1560fa92a31968637e732332ad24aafddffb4099" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment of the request to be checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36f867c42725dde0c150967eb571123143e298d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe887a751de81445f9a3f03cb49f53b2d8f8526" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment that is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef00628b59a7445a93eb7bf3193d487235d5a06a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment that is modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22259dd2d9f41fa7543d82d97add0fc6bd468c52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment to be used for parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003a36bcdbdd7c87f2726526344bcfc4e5adcb91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment to execute against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eae366348b183179bce8679402d1326e053d080" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment to get the current URL from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b12aaaf8ba15d933cbc9a598e5202e248b76c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e92b9d00af058d45254b68cc03d07d30aba130" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ&lt;/strong&gt; &amp;ndash; the optional environ for the request. This can be used to modify the response depending on how the request looked like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3521c8ec96ad7227329198045b7d755584526532" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ_base&lt;/strong&gt; &amp;ndash; an optional dict of environment defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28ab5b6fd57fadd5385e090f5fe69715191b807" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ_or_baseurl&lt;/strong&gt; &amp;ndash; a WSGI environment dict, a base URL or base IRI. This is the root of the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbd349eab1a919b88ec7d75b50ddf9b1642b770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;environ_overrides&lt;/strong&gt; &amp;ndash; an optional dict of environment overrides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710108708b63f4b1afb5a1e551b45b193102248e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; Error handler to use during &lt;code&gt;bytes.encode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f269870aff3c9dbc57c80c7a568bb8b5736d510d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; Error handler to use during &lt;code&gt;bytes.encode&lt;/code&gt;. By default, invalid bytes are left quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed416155225f8b434b55dd72b252a74125c4e5fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; The encoding error behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0660569092b8b8b228eb1c70fe8e5cc66445151c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; The error behavior for the charset decoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07193e88ba59b47546367f7560eaec740300f208" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; The error handling for the &lt;code&gt;charset&lt;/code&gt; decoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488ba019db2429166fbbe7c73fb86de6edab0623" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; the decoding error behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118721cf52ac8ac149536a159775d32f376d97f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; the decoding error handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a896712052166c6ac452b2e3ac3cb28529faadc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; the error handling for the charset decoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f2b10c800516d7d3c69235b35733db8f7b98f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors&lt;/strong&gt; &amp;ndash; the error handling on decode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f8eb51381d69b8ba04537510deb2452bf8af91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errors_stream&lt;/strong&gt; &amp;ndash; an optional error stream that is used for &lt;code&gt;wsgi.errors&lt;/code&gt;. Defaults to &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f639f92993499814c17d68984bbddc7e6a461a88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;etag&lt;/strong&gt; &amp;ndash; the etag for the response for comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85fb67f7262c9386048eb5ab5f3fca21a66a5f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;etag&lt;/strong&gt; &amp;ndash; the etag identifier to unquote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2be77e274d4643a69651f2248c30e7f844aa13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;etag&lt;/strong&gt; &amp;ndash; the etag to quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2251cd0cbee8c2dc1518751e519e11b2b2a9df9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;evalex&lt;/strong&gt; &amp;ndash; enable exception evaluation feature (interactive debugging). This requires a non-forking server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8728eccbd4bbe67257509069d2572f2dc1673a5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expires&lt;/strong&gt; &amp;ndash; If provided that date is used, otherwise the current.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b5b11a26fc0578539c3ab4992d1a00c8775177" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expires&lt;/strong&gt; &amp;ndash; should be a &lt;code&gt;datetime&lt;/code&gt; object or UNIX timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3023fc7babaab34d9a8a46969d42b9051c31177c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expires&lt;/strong&gt; &amp;ndash; should be a &lt;code&gt;datetime&lt;/code&gt; object or unix timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c2949ccd1cc1d85d92d2ca0de4589cacda287e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exports&lt;/strong&gt; &amp;ndash; a list or dict of exported files and folders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de498aa79eb4976a0c14c661e0538da53daecc3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;extra_chars&lt;/strong&gt; &amp;ndash; a list of extra characters to skip quoting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f485b2d4f63453ca32310d52290ca14033d05595" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;extra_files&lt;/strong&gt; &amp;ndash; a list of files the reloader should watch additionally to the modules. For example configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dca546864148d56bd3f25e8e7150140e9292f94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;f&lt;/strong&gt; &amp;ndash; the WSGI callable to decorate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3d268af3562de73c8f6cb3bfb1d6ba2c425108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fallback_mimetype&lt;/strong&gt; &amp;ndash; The fallback mimetype for unknown files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f37cdf32afefe453b435229ac2fca6253498a48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;file&lt;/strong&gt; &amp;ndash; a &lt;code&gt;file&lt;/code&gt;-like object with a &lt;code&gt;read()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b56b34f2b7b56ab549f31753d3af03612f312b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;file&lt;/strong&gt; &amp;ndash; a filename or &lt;code&gt;file&lt;/code&gt;-like object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f20321a64156b0634efbe361e1097707bce199" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename&lt;/strong&gt; &amp;ndash; an optional filename</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46c138a95a1ceda848d33797af623eb9048f934" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename&lt;/strong&gt; &amp;ndash; the filename of the uploaded file. May be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3ba0a7fc0b6f3293629584e7e21793de88c07a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename&lt;/strong&gt; &amp;ndash; the filename to secure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4cbc1fb665dd025839ef9547c11b7303610ddf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename_format&lt;/strong&gt; &amp;ndash; Format string for profile data file names, or a callable returning a name. See explanation above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a93525ab78e0aa47d287f91691403e4544b0cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fixed_digits&lt;/strong&gt; &amp;ndash; The number of fixed digits in the URL. If you set this to &lt;code&gt;4&lt;/code&gt; for example, the rule will only match if the URL looks like &lt;code&gt;/0001/&lt;/code&gt;. The default is variable length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd808ede94ce617ec79aa5a55f9e5b9d3611ef5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flat&lt;/strong&gt; &amp;ndash; If set to &lt;code&gt;False&lt;/code&gt; the dict returned will have lists with all the values in it. Otherwise it will only contain the first value for each key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5c406c93fe42c8ef13ef5e92a06e3d3ba36e00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;follow_redirects&lt;/strong&gt; &amp;ndash; Set this to True if the &lt;code&gt;Client&lt;/code&gt; should follow HTTP redirects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb0062857f946730a45b909bd69cc590d53dd51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;force&lt;/strong&gt; &amp;ndash; Ignore the mimetype and always try to parse JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd4b995102eea2b0d400ac37995b1376071c133" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;force_external&lt;/strong&gt; &amp;ndash; enforce full canonical external URLs. If the URL scheme is not provided, this will generate a protocol-relative URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db6a31f2eeb0c64f8c757bcc7bea55207b4793b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;func&lt;/strong&gt; &amp;ndash; the function the arguments should be bound for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd16a67553dd91cf494e3dd2f9c3e58bf7bce93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;func&lt;/strong&gt; &amp;ndash; the function the validation is performed against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168823b52b0e2935042568f21f27adc8e236f0d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hashfunc&lt;/strong&gt; &amp;ndash; the hash function to use. This can either be the string name of a known hash function or a function from the hashlib module. Defaults to sha256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44b5d437b425890b6050e9dc8cc93aa39b5d926" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hashfunc&lt;/strong&gt; &amp;ndash; the hash function to use. This can either be the string name of a known hash function, or a function from the hashlib module. Defaults to sha256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42428e6cedf23d5d1137a484f064e6c420ffbce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header&lt;/strong&gt; &amp;ndash; The cookie header as a string, or a WSGI environ dict with a &lt;code&gt;HTTP_COOKIE&lt;/code&gt; key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f99e1dcf3df07a4998cbff3d9a808237adf1a1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header&lt;/strong&gt; &amp;ndash; the header to be discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe5f06d5287b107bb2ca628e6426771d337323f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header&lt;/strong&gt; &amp;ndash; the header to be looked up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47abdbd67fe519f22d8e6e2139fdc5e11fcefc9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header&lt;/strong&gt; &amp;ndash; the header to be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dacd5f6df83b1bd8bef5688bc6f836e4afcb66d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header&lt;/strong&gt; &amp;ndash; the header to test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf86872fa9d64b7f396b462385fe3288dbb17f8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; a list of headers or a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6794a0b7f2da3465d6b316533dd5eb02ab1706f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; a list or &lt;code&gt;Headers&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be808b9af4d054cf9ec2cedda7489b06e488b96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; an optional list or &lt;code&gt;Headers&lt;/code&gt; object of headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0954ac8ea10ecd4b361c7cdbdada4725ad8f0232" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;host&lt;/strong&gt; &amp;ndash; the name of the host. This can be used as an alternative for the &lt;code&gt;cn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e982f2a55e7d8753188b6470860e0a03469e0c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;host_matching&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;True&lt;/code&gt; it enables the host matching feature and disables the subdomain one. If enabled the &lt;code&gt;host&lt;/code&gt; parameter to rules is used instead of the &lt;code&gt;subdomain&lt;/code&gt; one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81268bcd9b54762905e7062b2c7477eea271c795" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;host_only&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; if the host URL should be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbb8ebc9f19f3f32ed8a0d5271548f1a4d36801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hostname&lt;/strong&gt; &amp;ndash; The host to bind to, for example &lt;code&gt;'localhost'&lt;/code&gt;. If the value is a path that starts with &lt;code&gt;unix://&lt;/code&gt; it will bind to a Unix socket instead of a TCP socket..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd16b414d300e5f7bd8030c17e5e536383307392" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hostname&lt;/strong&gt; &amp;ndash; the hostname to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6abfc3fd60a142efad961727eba950cfe4696e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;httponly&lt;/strong&gt; &amp;ndash; disallow JavaScript to access the cookie. This is an extension to the cookie standard and probably not supported by all browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fcf2b539b08986c4d99abfe235a0018c3392a4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ignore_if_range&lt;/strong&gt; &amp;ndash; If &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;If-Range&lt;/code&gt; header will be taken into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce2e3a70cf492c470ad4aea43e99b0e0c5ff525" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;import_name&lt;/strong&gt; &amp;ndash; the dotted name for the object to import.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a2919d5ca48fa949a8c26315dd7c60105bf519" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;import_path&lt;/strong&gt; &amp;ndash; the dotted name for the package to find child modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d46e191a50701c22b1b70932f35f74e4ecb5e44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;include_empty&lt;/strong&gt; &amp;ndash; Set to &lt;code&gt;False&lt;/code&gt; if you don&amp;rsquo;t want empty values to appear in the dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb909530fdc859bba632097721b50a4b545db4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;include_packages&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; if packages should be returned, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65a7780abf9189f912237bf65e16bbaacdb6573" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;input_stream&lt;/strong&gt; &amp;ndash; an optional input stream. Do not specify this and &lt;code&gt;data&lt;/code&gt;. As soon as an input stream is set you can&amp;rsquo;t modify &lt;a href=&quot;#werkzeug.test.EnvironBuilder.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.test.EnvironBuilder.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; unless you set the &lt;a href=&quot;#werkzeug.test.EnvironBuilder.input_stream&quot;&gt;&lt;code&gt;input_stream&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;None&lt;/code&gt; again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9553b56e354c2fe59257718b5bd394333de1e52e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;iri&lt;/strong&gt; &amp;ndash; The IRI to convert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d1098dd896dce767199f9a17d4e2b785b7d178" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;items&lt;/strong&gt; &amp;ndash; this function accepts the possible items as positional arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45ee4657af254767ae8d700ae3cd82734923197" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;iterable&lt;/strong&gt; &amp;ndash; iterable of strings that are newline terminated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef5a4ede2a27123ca0abf2d4fbb060dfbca75d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;iterable&lt;/strong&gt; &amp;ndash; the iterable or dict of values to quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a9625fe552f90d513a789cc2e6ccbb6b9fe34d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;iterable&lt;/strong&gt; &amp;ndash; updates the set with the items from the iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d16b29adce14b593faa2f8d7741d0fa8dd21035" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;iterations&lt;/strong&gt; &amp;ndash; the number of iterations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989ef2e974780eafffdec7252cbac960d3301700" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;json&lt;/strong&gt; &amp;ndash; An object to be serialized and assigned to &lt;code&gt;data&lt;/code&gt;. Defaults the content type to &lt;code&gt;&quot;application/json&quot;&lt;/code&gt;. Serialized with the function assigned to &lt;a href=&quot;#werkzeug.test.EnvironBuilder.json_dumps&quot;&gt;&lt;code&gt;json_dumps&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1b01a86eb46717b05970f147195b4e5fd5c1ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; The header key to get.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddc91d4d53ed66bf5db70154028ac4b58ef064b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; The header key to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e98f3c853fa994943bf5b434d9de4f22a45baeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; The key for which the values are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88ba496a3d260fdf6d48606c1be4b44a17802ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; The key to be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf01df5159e191fe4140460f1c929d2cadedb35f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; The key to be looked up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd8d8118fa2fc69113f3e241abb6794fdc8d1a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; The key to be popped. If this is an integer the item at that position is removed, if it&amp;rsquo;s a string the value for that key is. If the key is omitted or &lt;code&gt;None&lt;/code&gt; the last item is removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef753df4f86c45e1f2fc68674be3c3188f4bba8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; The key to be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f508dc5ffb7e4618a25d9fa283f38e5987bcac9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; an optional function to be used for sorting. For more details check out the &lt;a href=&quot;https://docs.python.org/3/library/functions.html#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d13889160385ab7e197a4b6b18d07cd4dc0cfa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; the key (name) of the cookie to be deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bababe99e1be9594e2bb0c9974fe55cda58a3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; the key (name) of the cookie to be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a33f8c88e810db5958494c204012ec1db8036d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; the key for the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de866f96f8cfaefb5a07af2a0f99b1f5a9984c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; &amp;ndash; the key to pop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3463b9f43336a62cf4d0ec27459f5dd533f47e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;keylen&lt;/strong&gt; &amp;ndash; the length of the resulting key. If not provided the digest size will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9130f1b5683bbb319fcfb886f512bbec7e4b4d7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;keylen&lt;/strong&gt; &amp;ndash; the length of the resulting key. If not provided, the digest size will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a645f6f672e5aaa8621ee9489438ae2bfda5d5ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;kwargs&lt;/strong&gt; &amp;ndash; a dict of keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7daa3bbe32c30e80e8415137172452c41517fabe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;last_modified&lt;/strong&gt; &amp;ndash; an optional date of the last modification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49085a59fdcd52e13edc89ec62aeaf04fdb6300" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;length&lt;/strong&gt; &amp;ndash; the exact length of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9cc84b4b6034c1767bd5d73e196172164cef1dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;limit&lt;/strong&gt; &amp;ndash; the content length of the URL data. Not necessary if a limited stream is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660807de2c303373dfafba7d98e3ca781de9ff69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;limit&lt;/strong&gt; &amp;ndash; the limit for the stream, must not be longer than what the string can provide if the stream does not end with &lt;code&gt;EOF&lt;/code&gt; (like &lt;code&gt;wsgi.input&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1feb6e61881181c90d40fa28fe8b30c56758be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;limit&lt;/strong&gt; &amp;ndash; the limit in bytes for the stream. (Usually content length. Not necessary if the &lt;code&gt;stream&lt;/code&gt; is a &lt;a href=&quot;#werkzeug.wsgi.LimitedStream&quot;&gt;&lt;code&gt;LimitedStream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51235d42028affda3465485fbaadb8345d99a42a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;limit&lt;/strong&gt; &amp;ndash; the limit in bytes for the stream. (Usually content length. Not necessary if the &lt;code&gt;stream&lt;/code&gt; is otherwise already limited).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9259596f24c3b95d94b25aa3dad4cab66fe87d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;location&lt;/strong&gt; &amp;ndash; the location the response should redirect to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3089d822e81f23ada84627603ef3265d0d2224" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;map&lt;/strong&gt; &amp;ndash; The &lt;a href=&quot;#werkzeug.routing.Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5ef7bf4762919b2c67a3785a664f38e851f867" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;map&lt;/strong&gt; &amp;ndash; the &lt;a href=&quot;#werkzeug.routing.Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6326b1e0be46e50e03bdcc4b22c5ef980bf3a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mapping&lt;/strong&gt; &amp;ndash; the initial value for the &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt;. Either a regular dict, an iterable of &lt;code&gt;(key, value)&lt;/code&gt; tuples or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad1509a8fe476796eaf262113ad133a20721a5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;matches&lt;/strong&gt; &amp;ndash; a list of matches to check for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f57a9178c4574eef7b8acfae03a5ceddbb1562f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max&lt;/strong&gt; &amp;ndash; The maximal value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341507770f7f23ece6752ad0185313bb18a98df1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max_age&lt;/strong&gt; &amp;ndash; should be a number of seconds, or &lt;code&gt;None&lt;/code&gt; (default) if the cookie should last only as long as the client&amp;rsquo;s browser session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078da98ffc578eb112a9e07d0949b89002775cb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max_age&lt;/strong&gt; &amp;ndash; should be a number of seconds, or &lt;code&gt;None&lt;/code&gt; (default) if the cookie should last only as long as the client&amp;rsquo;s browser session. Additionally &lt;code&gt;timedelta&lt;/code&gt; objects are accepted, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c580de272b8b9981a02c670b973e0db4f8777daa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max_content_length&lt;/strong&gt; &amp;ndash; If this is provided and the transmitted data is longer than this value an &lt;code&gt;RequestEntityTooLarge&lt;/code&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053a25faa0760c87bd6ac18ff34b12886cb1d56c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max_form_memory_size&lt;/strong&gt; &amp;ndash; the maximum number of bytes to be accepted for in-memory stored form data. If the data exceeds the value specified an &lt;code&gt;RequestEntityTooLarge&lt;/code&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34f3188d4cad4b85cc85609952ff9c925d0262d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max_size&lt;/strong&gt; &amp;ndash; Warn if the final header value exceeds this size. The default, 4093, should be safely &lt;a href=&quot;http://browsercookielimits.squawky.net/&quot;&gt;supported by most browsers&lt;/a&gt;. Set to 0 to disable this check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc0af1c598cd04f31f2dbcee0d49743eaf69738" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;maxlength&lt;/strong&gt; &amp;ndash; the maximum length of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d151fdc384dc6fc8af1101740bc4179ee965dc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;merge_slashes&lt;/strong&gt; &amp;ndash; Merge consecutive slashes when matching or building URLs. Matches will redirect to the normalized URL. Slashes in variable parts are not merged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7bb36174447a338219271df5aea437590e08af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method&lt;/strong&gt; &amp;ndash; the HTTP method for the rule if there are different URLs for different methods on the same endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af8b17398109e8c54bc913a37c6bfba7ac5e796" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method&lt;/strong&gt; &amp;ndash; the HTTP method to use, defaults to &lt;code&gt;GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bb9a13ce88694c5575a5bb84c389cf3afbf440" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method&lt;/strong&gt; &amp;ndash; the HTTP method used for matching. Overrides the method specified on binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61469d9972112aa8deb0afbc885f2a2e0f14074" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method&lt;/strong&gt; &amp;ndash; the hash method to use (one that hashlib supports). Can optionally be in the format &lt;code&gt;pbkdf2:&amp;lt;method&amp;gt;[:iterations]&lt;/code&gt; to enable PBKDF2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43d39f4ad868d7c6853b7e1a0d5e98a1e65f510" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mimetype&lt;/strong&gt; &amp;ndash; the mimetype for the response. See notice above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ee6c6f5dd5c2ce0c7596058d96200503065a29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;min&lt;/strong&gt; &amp;ndash; The minimal value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d71acc289402c04e46ce5a9c5b7739b334243b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;minlength&lt;/strong&gt; &amp;ndash; the minimum length of the string. Must be greater or equal 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e376d63302b22e0ab2d327d16f2d4273e2ec9fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mounts&lt;/strong&gt; &amp;ndash; Maps path prefixes to applications for dispatching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de12b50cd10dfbff1f813cf81016acf09055e6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;multi&lt;/strong&gt; &amp;ndash; If set to &lt;code&gt;True&lt;/code&gt; the iterator returned will have a pair for each value of each key. Otherwise it will only contain pairs for the first value of each key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c25689265dd98fb5d101fcf3a1816c563a68b9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;multiple&lt;/strong&gt; &amp;ndash; Whether try to parse and return multiple MIME types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f2db649abeda577f8564c943400b846f658ddd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;multiprocess&lt;/strong&gt; &amp;ndash; controls &lt;code&gt;wsgi.multiprocess&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51953521c95a4728b84ceae70e1ad52796e90eea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;multithread&lt;/strong&gt; &amp;ndash; controls &lt;code&gt;wsgi.multithread&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c21c1e364a3fcb88644aa1d62b2b74b56770de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; the name of the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109a7a0578956d3743953f0f829f07443d3e1ee0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;new_list&lt;/strong&gt; &amp;ndash; An iterable with the new values for the key. Old values are removed first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec6a1e0f88a387a50a5ff118d830a61e68b2f1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;obj&lt;/strong&gt; &amp;ndash; the object to encode into a query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af1e459e0019c79d28fb912de0196e846c00a47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;on_update&lt;/strong&gt; &amp;ndash; an optional callable that is called every time a value on the &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.ContentRange&quot;&gt;&lt;code&gt;ContentRange&lt;/code&gt;&lt;/a&gt; object is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f699664839d2655405f9de3387a97f9eda4964" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;on_update&lt;/strong&gt; &amp;ndash; an optional callable that is called every time a value on the &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.HeaderSet&quot;&gt;&lt;code&gt;HeaderSet&lt;/code&gt;&lt;/a&gt; object is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1199b66428762dbc6eb94d5650488b73dc36a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;on_update&lt;/strong&gt; &amp;ndash; an optional callable that is called every time a value on the &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.WWWAuthenticate&quot;&gt;&lt;code&gt;WWWAuthenticate&lt;/code&gt;&lt;/a&gt; object is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2a0437556960f035b50bdfd57db60ac69de089" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;on_update&lt;/strong&gt; &amp;ndash; an optional callable that is called every time a value on the &lt;code&gt;CacheControl&lt;/code&gt; object is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d1508e40d9ffb2fc8c83f63809505dbfd08fdb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;passthrough_errors&lt;/strong&gt; &amp;ndash; set this to &lt;code&gt;True&lt;/code&gt; to disable the error catching. This means that the server will die on errors but it can be useful to hook debuggers in (pdb etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfad68664700bc572a7bce35b2ef2d05bdc280d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;password&lt;/strong&gt; &amp;ndash; the password to hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa45aed924c467a34f37577b99da95c092426e13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;password&lt;/strong&gt; &amp;ndash; the plaintext password to compare against the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71331bcb827e34996acfd13f30eae42bff07d8b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; if the cookie that should be deleted was limited to a path, the path has to be defined here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e3dcc1fc99ee5f72e7717ac10b6d90665f578c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; limits the cookie to a given path, per default it will span the whole domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7074fd6c71a3ef59a9752d283c4bc4721e8dbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; the path of the request. In the WSGI environment this will end up as &lt;code&gt;PATH_INFO&lt;/code&gt;. If the &lt;code&gt;query_string&lt;/code&gt; is not defined and there is a question mark in the &lt;code&gt;path&lt;/code&gt; everything after it is used as query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db0994ee22cc6fb442be18c0168cfe2cf692773" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path_info&lt;/strong&gt; &amp;ndash; the path info to use for matching. Overrides the path info specified on binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188e1be7dddfee7d19a8f70147063718abf758b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path_or_url&lt;/strong&gt; &amp;ndash; an absolute path from the server root, a relative path (in which case it&amp;rsquo;s the path info) or a full URL. Also accepts IRIs and unicode parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13068bebb843cb7c19b566ec2562f2dce66fcdc6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pathformat&lt;/strong&gt; &amp;ndash; The expected format of the path component. Currently &lt;code&gt;'windows'&lt;/code&gt; and &lt;code&gt;'posix'&lt;/code&gt; are supported. Defaults to &lt;code&gt;None&lt;/code&gt; which is autodetect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb689edbb8b16f67280a09c40ab049bee39ab1e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pathnames&lt;/strong&gt; &amp;ndash; The untrusted path components relative to the base directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f62b22abdec35b5a163c06aca8393a610d451c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pin_logging&lt;/strong&gt; &amp;ndash; enables the logging of the pin system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78592dd5ca1f3772860de8df800be5f70647ed6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pin_security&lt;/strong&gt; &amp;ndash; can be used to disable the pin based security system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684adde5890ceef9bfc3ab2b1f489c7151ee236d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;port&lt;/strong&gt; &amp;ndash; The port for the server. eg: &lt;code&gt;8080&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d1e3f788ded647614c08ed5de76fa2c0bedf75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;preserve_casing&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;True&lt;/code&gt; the items in the set returned will have the original case like in the &lt;a href=&quot;#werkzeug.datastructures.HeaderSet&quot;&gt;&lt;code&gt;HeaderSet&lt;/code&gt;&lt;/a&gt;, otherwise they will be lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4c65da49d579295e70ad066aff7618908ae220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;processes&lt;/strong&gt; &amp;ndash; if greater than 1 then handle each request in a new process up to this maximum number of concurrent processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a138ff776ae3cd4b57367bdd7901f80fc4134a43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;profile_dir&lt;/strong&gt; &amp;ndash; Save profile data files to this directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4405d129a4d55e568796f2cc4b40f09a611181" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pwhash&lt;/strong&gt; &amp;ndash; a hashed string like returned by &lt;a href=&quot;#werkzeug.security.generate_password_hash&quot;&gt;&lt;code&gt;generate_password_hash()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04750d782cfe19c0b9df388d34384fc31e7ef041" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;query_args&lt;/strong&gt; &amp;ndash; optional query arguments that are used for automatic redirects as string or dictionary. It&amp;rsquo;s currently not possible to use the query arguments for URL matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db80f55b5c26291ba04305a526d1eaf0ef8752d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;query_string&lt;/strong&gt; &amp;ndash; an optional string or dict with URL parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9fbbda35691ecf2998deb32327b9daca33ba9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;quote&lt;/strong&gt; &amp;ndash; ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c2cebba15e9a323da369eb961c3794c97e7551" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;recursive&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; if recursion should happen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67d9a21c51d8c48659e82a07d13d4c7d4d50e60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;redirect_defaults&lt;/strong&gt; &amp;ndash; This will redirect to the default rule if it wasn&amp;rsquo;t visited that way. This helps creating unique URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55457a74f7e26e088dc93ea97e8e6adcfa49cf19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reloader_interval&lt;/strong&gt; &amp;ndash; the interval for the reloader in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb82b89b956fd94797404cd1b4727e396178548" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reloader_type&lt;/strong&gt; &amp;ndash; the type of reloader to use. The default is auto detection. Valid values are &lt;code&gt;'stat'&lt;/code&gt; and &lt;code&gt;'watchdog'&lt;/code&gt;. See &lt;a href=&quot;#reloader&quot;&gt;Reloader&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8eb9f3683c5f9bca00cf381488931233943b00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;request_handler&lt;/strong&gt; &amp;ndash; optional parameter that can be used to replace the default one. You can use this to replace it with a different &lt;code&gt;BaseHTTPRequestHandler&lt;/code&gt; subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2ba297399b555045fcdf2c8525bddda7dd859f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;request_key&lt;/strong&gt; &amp;ndash; The key that points to the request object in ths environment. This parameter is ignored in current versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5388defbde3feedcf2a164b4441afdb7a069ea83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;request_or_environ&lt;/strong&gt; &amp;ndash; a request object or WSGI environment to be used to make the response conditional against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389e031cb6dc512501fb1caa0e66690b8e21c563" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;response&lt;/strong&gt; &amp;ndash; a response object or wsgi application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e9cf5e56a77d138c22bfa48dfc651dace58f0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;response&lt;/strong&gt; &amp;ndash; a string or response iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d971cdf10602e7231ca86fd38ec03f51cd36cef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;restrictions&lt;/strong&gt; &amp;ndash; A tuple of restrictions to filter stats by. See &lt;a href=&quot;https://docs.python.org/3/library/profile.html#pstats.Stats.print_stats&quot;&gt;&lt;code&gt;pstats.Stats.print_stats()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d6d28a785c3ae4389346c9010f8a021b0614dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;retry_after&lt;/strong&gt; &amp;ndash; If given, set the &lt;code&gt;Retry-After&lt;/code&gt; header to this value. May be an &lt;a href=&quot;https://docs.python.org/3/library/functions.html#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; number of seconds or a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92be9fc50af38b1084af20ee0f850f14491f69e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return_iterator&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;True&lt;/code&gt; the &lt;code&gt;cls&lt;/code&gt; argument is ignored and an iterator over all decoded pairs is returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84e54d101dddd4630cc91e810db9114bf2345b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;return_rule&lt;/strong&gt; &amp;ndash; return the rule that matched instead of just the endpoint (defaults to &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe98c5d14d3df5495822b65c02a988eb53f520c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;root_only&lt;/strong&gt; &amp;ndash; set &lt;code&gt;True&lt;/code&gt; if you only want the root URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e1bdcdfae14ea04953cb7ba986c5d67714ec61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rulefactory&lt;/strong&gt; &amp;ndash; a &lt;a href=&quot;#werkzeug.routing.Rule&quot;&gt;&lt;code&gt;Rule&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#werkzeug.routing.RuleFactory&quot;&gt;&lt;code&gt;RuleFactory&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981e4ffefa7b58a25d985e67c7d93e8ab819f0dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rules&lt;/strong&gt; &amp;ndash; sequence of url rules for this map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bfbff8a606bf0459b2c25d54b796102e8a8fce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;run_once&lt;/strong&gt; &amp;ndash; controls &lt;code&gt;wsgi.run_once&lt;/code&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262ca7b87f472e713d6e6ff0ede69ec80ad5ee02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; The string to quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67eaa72ade283361917c1b062ff6baa7d18a1f7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; The string to unquote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b34c80c79b7889a17e87ba5679bc8d81348392" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; a string with the query string to decode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8d7695dd09aaf3e84fa94f66db8335327d79bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; the string to escape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3564434fde17401b3c0981aceefc5b465dac84f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; the string to quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f302388ffda657d328c94e9782dddd2b68db3418" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; the string to unescape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92fd7a954607999298c154536142f44273fe6136" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; the string to unquote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce1047e3dc5b227b6aa9c52c54720d32d8717d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt; &amp;ndash; the string with the URL to fix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6376a9fd42f923b94ffe1b8e45be1cc29a57b50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;safe&lt;/strong&gt; &amp;ndash; An optional sequence of safe characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b533d773de0cdaac9487f35f074c60a277b5c1f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;safe&lt;/strong&gt; &amp;ndash; an optional sequence of safe characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2daa750a70991a7db0ba3004d17d10416ae83c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;safe_conversion&lt;/strong&gt; &amp;ndash; Return the URL unchanged if it only contains ASCII characters and no whitespace. See the explanation below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c45b03b93adca8e4ed2bd025beac1bb38caf9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;safe_fallback&lt;/strong&gt; &amp;ndash; use an empty stream as a safe fallback when the content length is not set. Disabling this allows infinite streams, which can be a denial-of-service risk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d55de7837dc883fe022a43a5c68f179a0d89b2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;salt&lt;/strong&gt; &amp;ndash; the salt for the derivation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30b83ac814f7e7dba089dc6891a401ed638d7d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;salt_length&lt;/strong&gt; &amp;ndash; the length of the salt in letters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a589dce52343199459383329b4d931b13763f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;samesite&lt;/strong&gt; &amp;ndash; Limits the scope of the cookie such that it will only be attached to requests if those requests are &amp;ldquo;same-site&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae95a792a371d0649e0962c550eec5aa1dfc7b1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;samesite&lt;/strong&gt; &amp;ndash; Limits the scope of the cookie such that it will only be attached to requests if those requests are same-site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e55704f4819f89448d5e3d5149c29c6fb6c053c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;scheme&lt;/strong&gt; &amp;ndash; the default schema to use if the URL is schemaless.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceddad5eb9b07ac149c718e003962beb5ca775d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;secure&lt;/strong&gt; &amp;ndash; If &lt;code&gt;True&lt;/code&gt;, the cookie will only be available via HTTPS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa4efe887a8fe321aba6b0f2b31109e0e8756de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;secure&lt;/strong&gt; &amp;ndash; The cookie will only be available via HTTPS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e96d805fa5b68672af189b273d56d627b0dc45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;separator&lt;/strong&gt; &amp;ndash; the pair separator to be used, defaults to &lt;code&gt;&amp;amp;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d780d17be4b222dd6c034fd6decc1fa08794665" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;separator&lt;/strong&gt; &amp;ndash; the separator that divides chunks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a71ce1bc8a500d320c6fe7a5c1149a0b076ca4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;separator&lt;/strong&gt; &amp;ndash; the separator to be used for the pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625832809abac3171e8415a5fbff751920915d2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;server_name&lt;/strong&gt; &amp;ndash; an optional server name hint (see above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4763fffb50d3f74b872592a2912315b89c002ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;show_hidden_frames&lt;/strong&gt; &amp;ndash; by default hidden traceback frames are skipped. You can show them by setting this parameter to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41620eddf57dd070e8d79d1b8a7e01ca86ab1666" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;signed&lt;/strong&gt; &amp;ndash; Allow signed (negative) values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0215c686486c8a2b3cf07814926a49e80dc022" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;silent&lt;/strong&gt; &amp;ndash; If set to False parsing errors will not be caught.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff4595f55bb6d1a9c333e706d65881c01cb6e59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;silent&lt;/strong&gt; &amp;ndash; Silence parsing errors and return &lt;code&gt;None&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac46ba6ed9babbddb7afbef479d086f413256bc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;silent&lt;/strong&gt; &amp;ndash; if set to &lt;code&gt;True&lt;/code&gt; import errors are ignored and &lt;code&gt;None&lt;/code&gt; is returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64b017f6a9b48dbfd2e76bd131d9ee0f3c32467" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;size&lt;/strong&gt; &amp;ndash; the number of bytes read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f57cae72320a1c1d438dfee4ac5ecf1c037e713" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sort&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; if you want parameters to be sorted by &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625dcefb606e4a22389ae95f939501485ee4198c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sort_by&lt;/strong&gt; &amp;ndash; A tuple of columns to sort stats by. See &lt;a href=&quot;https://docs.python.org/3/library/profile.html#pstats.Stats.sort_stats&quot;&gt;&lt;code&gt;pstats.Stats.sort_stats()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49eae72c01a4417a9fcd2bb1e4eb0d5b791c80e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sort_key&lt;/strong&gt; &amp;ndash; The sort key function for &lt;code&gt;url_encode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771c73b26c5d38012f03ea5e8649f28b4f57e52c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sort_parameters&lt;/strong&gt; &amp;ndash; If set to &lt;code&gt;True&lt;/code&gt; the url parameters are sorted. See &lt;code&gt;url_encode&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423ee8f2304c7fafe409b210e3bab0d603e525c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ssl_context&lt;/strong&gt; &amp;ndash; an SSL context for the connection. Either an &lt;a href=&quot;https://docs.python.org/3/library/ssl.html#ssl.SSLContext&quot;&gt;&lt;code&gt;ssl.SSLContext&lt;/code&gt;&lt;/a&gt;, a tuple in the form &lt;code&gt;(cert_file, pkey_file)&lt;/code&gt;, the string &lt;code&gt;'adhoc'&lt;/code&gt; if the server should automatically create one, or &lt;code&gt;None&lt;/code&gt; to disable SSL (which is the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17713d5d060fc023f6023c3c93085b51eac3b09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;start_response&lt;/strong&gt; &amp;ndash; the response callable provided by the WSGI server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f206560f1d05cee3f3de0ce7c7c3e159f7eb7fa2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static_files&lt;/strong&gt; &amp;ndash; a list or dict of paths for static files. This works exactly like &lt;code&gt;SharedDataMiddleware&lt;/code&gt;, it&amp;rsquo;s actually just wrapping the application in that middleware before serving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a13ed61046455174059281e622e83581e8ace20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;status&lt;/strong&gt; &amp;ndash; a string with a status or an integer with the status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f0c0c75f855d7526c14a672a5ce8d86bbe4da1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream&lt;/strong&gt; &amp;ndash; Write stats to this stream. Disable with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02dbfde3d9fa008d6c8825e61df4ea349b74527b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream&lt;/strong&gt; &amp;ndash; a stream to write the encoded object into or &lt;code&gt;None&lt;/code&gt; if an iterator over the encoded pairs should be returned. In that case the separator argument is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a314a9d3b2c156c205feb3320500d7e3e38a39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream&lt;/strong&gt; &amp;ndash; a stream with the encoded querystring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495ad77f034facfc3f93f092005b73ef6a9b1905" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream&lt;/strong&gt; &amp;ndash; the stream or iterate to iterate over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865f2b1e1f7ebbbb664af701ae3c684c9ab135e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream&lt;/strong&gt; &amp;ndash; the stream to wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dac0c0743064f7cd263242e8e7dc9d63d8f0546" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream_factory&lt;/strong&gt; &amp;ndash; An optional callable that returns a new read and writeable file descriptor. This callable works the same as &lt;code&gt;_get_file_stream()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c6c3410765ed8302adb048c54d11756fe73b32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strict_slashes&lt;/strong&gt; &amp;ndash; If a rule ends with a slash but the matched URL does not, redirect to the URL with a trailing slash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01713cc10bebcdf84e9004066b905a01d6305f7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strip_querystring&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; if you don&amp;rsquo;t want the querystring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e1f197392c7882d21dc55d1e62d80f738dac57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;subdomain&lt;/strong&gt; &amp;ndash; optionally the current subdomain (see above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9336abc6ff9f227e98fdc72b604d86d975f228e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sync_expires&lt;/strong&gt; &amp;ndash; automatically set expires if max_age is defined but expires not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc1feed0923b17d9d9a88f3a6a0817413451308" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;targets&lt;/strong&gt; &amp;ndash; Proxy target configurations. See description above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e39f1fe9c6eeda6bafe39dabe0e067e05320d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;threaded&lt;/strong&gt; &amp;ndash; should the process handle each request in a separate thread?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39eda3b54cd369e16765922ec28236fd4f97761b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;timeout&lt;/strong&gt; &amp;ndash; Seconds before an operation to a target fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e712ebedebdba93483905810d7f85f76dd8d433" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;timestamp&lt;/strong&gt; &amp;ndash; If provided that date is used, otherwise the current.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39cc052e942000ccc020c4a67901f705e9666b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;total_content_length&lt;/strong&gt; &amp;ndash; the total content length of all the data in the request combined. This value is guaranteed to be there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374b0a607fe03410f2b9e9ed6889f2ae22084883" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;trusted_hosts&lt;/strong&gt; &amp;ndash; A list of trusted hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ea5bcae69989677bf5965528f7eb2eefae4cc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;trusted_hosts&lt;/strong&gt; &amp;ndash; a list of trusted hosts, see &lt;a href=&quot;#werkzeug.wsgi.host_is_trusted&quot;&gt;&lt;code&gt;host_is_trusted()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6852aafa57e937fae38670a5aa281404c56c490" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;trusted_list&lt;/strong&gt; &amp;ndash; a list of hostnames to check against. If a hostname starts with a dot it will match against all subdomains as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5881147bf0fb9801f39849d80c0f40c56bea3d51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; &amp;ndash; A callable that is used to cast the value in the &lt;a href=&quot;#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt;. If a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised by this callable the default value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde27181e3b1774ffad1a68b372fbc14f5e2c7e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; &amp;ndash; A callable that is used to cast the value in the &lt;a href=&quot;#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt;. If a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised by this callable the value will be removed from the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d529fd9249bc1c32c86c5e812b59b37054e4dc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; &amp;ndash; A callable that is used to cast the value in the &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt;. If a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised by this callable the default value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd37bd36612eda3122f6e080664a9d5f2a36110f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; &amp;ndash; A callable that is used to cast the value in the &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt;. If a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised by this callable the value will be removed from the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74a97b94949181df46af2064458bedb99eb4ac9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;unsafe&lt;/strong&gt; &amp;ndash; an optional sequence of unsafe characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488df9eae95275d05b0377c41e7a59f37a1443da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;uri&lt;/strong&gt; &amp;ndash; The URI to convert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27173509d1da38980f6a2350e955e82169c9c08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url&lt;/strong&gt; &amp;ndash; the URL to join.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583e4f7a51217b562afeaed73cc6e13593197e3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;url&lt;/strong&gt; &amp;ndash; the URL to parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1391d535c6e5c77be9bbde16f1acf83b023d002" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;use_debugger&lt;/strong&gt; &amp;ndash; should the werkzeug debugging system be used?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e91f1b1aefc4c13cbfd3b4c1d7df9328e52d95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;use_evalex&lt;/strong&gt; &amp;ndash; should the exception evaluation feature be enabled?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2fd40d13b9eaf65f9bbb65708ec6c2c96351d78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;use_reloader&lt;/strong&gt; &amp;ndash; should the server automatically restart the python process if modules were changed?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82734b17d805eeb7f82a2f8a2b53307cd1e44008" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; The value to be inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafb4ed860855f419e2976c884669580b00b9056" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; a WWW-Authenticate header to parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372579f8bc14b0eef11090aec91e69d71455c059" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; a cache control header to be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e431ff748fa6b5c54a9bfe2e3c63fe105952044" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; a content range header to be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef087a717591acba9ab04afeb63c5171a119c58a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; a set header to be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48da9d49034a7bdfc9d355e94045c14573776caa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; a string with a dict header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9b591f68d6b4a99ce27d000dc760af79c6e856" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; a string with a list header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61e693dc487930f8bf78bb53f68acebcef34399" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; a string with a supported date format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925cd04901eac3fefbfc598972bb84566c9a1fc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the accept header string to be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba870118f35f93218af97d851cac0be53afda151" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the authorization header to parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c45b832e615f730116380b899880e7d08b7746" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the header to parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb92ff717a21fdcbb2579d7b0da15bdf23de6984" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the header value to unquote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323b049da7af5317a1251cbab7ca51d9a06d6782" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the tag header to parse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5037fc2f8c82bc073044c9938dfef0ed80d7b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the value of the cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b991350fae78ffd42f3865364ec447033f41c74d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the value to add.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d86bc3ca2f63e63016cdd9b2022b1c39ed9f46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the value to quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b78454980ece2a478d8891ececa2516d1fcf08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;values&lt;/strong&gt; &amp;ndash; An iterable of values to set for the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8388682189ce678bec562a50ee3f127c2edd4cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;values&lt;/strong&gt; &amp;ndash; the values for the URL to build. Unhandled values are appended to the URL as query parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf9ea2501e54432c299caa8c5ab0ebc1400dd02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;view_func&lt;/strong&gt; &amp;ndash; a function that is called with the endpoint as first argument and the value dict as second. Has to dispatch to the actual view function with this information. (see above)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bbd7c16cfeba1f6180453895b354ed63a54645" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;weak&lt;/strong&gt; &amp;ndash; set to &lt;code&gt;True&lt;/code&gt; to tag it &amp;ldquo;weak&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83635a328b5aa184f09e556beed7e38f230f3c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;websocket&lt;/strong&gt; &amp;ndash; Match WebSocket instead of HTTP requests. A websocket request has a &lt;code&gt;ws&lt;/code&gt; or &lt;code&gt;wss&lt;/code&gt;&lt;code&gt;url_scheme&lt;/code&gt;. This overrides that detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcf5384485fbc1bc8bc4301b0104ce503d77ab8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;www-authenticate&lt;/strong&gt; &amp;ndash; A single value, or list of values, for the WWW-Authenticate header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30881ece4e56e5de2c54579419f09b9686b03b62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;x_for&lt;/strong&gt; &amp;ndash; Number of values to trust for &lt;code&gt;X-Forwarded-For&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50cc723cf1dbee5d4e602b77bd316deea925de2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;x_host&lt;/strong&gt; &amp;ndash; Number of values to trust for &lt;code&gt;X-Forwarded-Host&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e51f8136f118fc06527d1940e798709d33cfe5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;x_port&lt;/strong&gt; &amp;ndash; Number of values to trust for &lt;code&gt;X-Forwarded-Port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ebda488a0835faf6b7c2cd2b19f51c84f59b6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;x_prefix&lt;/strong&gt; &amp;ndash; Number of values to trust for &lt;code&gt;X-Forwarded-Prefix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf62bd077ac609836fa439b56a45cf39f20700e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;x_proto&lt;/strong&gt; &amp;ndash; Number of values to trust for &lt;code&gt;X-Forwarded-Proto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19c91210091f7bffab6e37fc91ae1c8b27e6e9f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; can be constructed from an iterable of &lt;code&gt;(key, value)&lt;/code&gt; tuples, a dict, a &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; or from Werkzeug 0.2 onwards some keyword parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f144329af5dc7149615cac6c8932262a1700cd6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; is a dictionary subclass customized to deal with multiple values for the same key which is for example used by the parsing functions in the wrappers. This is necessary because some HTML form elements pass multiple values for the same key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a350e49c7ea3912e15d1611c0fd35eea60173a1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.CombinedMultiDict&quot;&gt;&lt;code&gt;werkzeug.datastructures.CombinedMultiDict&lt;/code&gt;&lt;/a&gt; that combines &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78a93c6544235d17aecbc24eb645a69c3c0c986" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.RequestCacheControl&quot;&gt;&lt;code&gt;RequestCacheControl&lt;/code&gt;&lt;/a&gt; object for the incoming cache control headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b700eb6fdf5b9ab572fecfb75aa8a334aa719d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://docs.python.org/3/library/ssl.html#ssl.SSLContext&quot;&gt;&lt;code&gt;ssl.SSLContext&lt;/code&gt;&lt;/a&gt; defining how to verify requests if the target is HTTPS. The default is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b457d5ab81cf21b08672a9090c915aa457cdc524" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; with the contents of all cookies transmitted with the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6431809bd0c0ff16c83b0a22fe600c379e2cb48e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileMultiDict&lt;/code&gt; of uploaded files. Use &lt;code&gt;add_file()&lt;/code&gt; to add new files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565696d42e34d0df1dce9a4efbf740b37e88febe" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Headers&lt;/code&gt; object representing the response headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3164b3c36ead98474e19ee36424996de0bb48047" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Headers&lt;/code&gt; object with the request headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954b279a43bc252a76e7019c0e6d0b46b3b45790" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MultiDict&lt;/code&gt; of form values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1766b03768cc6357909058837b395ee2fcba8b45" translate="yes" xml:space="preserve">
          <source>A Rule represents one URL pattern. There are some options for &lt;code&gt;Rule&lt;/code&gt; that change the way it behaves and are passed to the &lt;code&gt;Rule&lt;/code&gt; constructor. Note that besides the rule-string all arguments &lt;em&gt;must&lt;/em&gt; be keyword arguments in order to not break the application on Werkzeug upgrades.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5c7fcaa5b362f79d253b8b50815ad1330a9623" translate="yes" xml:space="preserve">
          <source>A WSGI application is something you can call and pass an environ dict and a &lt;code&gt;start_response&lt;/code&gt; callable. The environ contains all incoming information, the &lt;code&gt;start_response&lt;/code&gt; function can be used to indicate the start of the response. With Werkzeug you don&amp;rsquo;t have to deal directly with either as request and response objects are provided to work with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6681117ae60d40aadc22f7c31e43d0d00685e5" translate="yes" xml:space="preserve">
          <source>A WSGI middleware is a WSGI application that wraps another application in order to observe or change its behavior. Werkzeug provides some middleware for common use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637f40dacc697559c464c1034683f8c8b6506612" translate="yes" xml:space="preserve">
          <source>A WSGI middleware that provides static content for development environments or simple server setups. Usage is quite simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b248e9207ec86f4cb39ff742e2c49ffb327a0b" translate="yes" xml:space="preserve">
          <source>A basic &amp;ldquo;Hello World&amp;rdquo; application in WSGI without the help of Werkzeug looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113716fa5c9647059632e97b2d58c800f3f8c39c" translate="yes" xml:space="preserve">
          <source>A basic FastCGI configuration for lighttpd looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5506a727bbea2c2a6bca9dbd0cfa6747b9ad0e" translate="yes" xml:space="preserve">
          <source>A basic FastCGI configuration for nginx looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f89cff66e627c3f516f340fce9f510c00f24e2" translate="yes" xml:space="preserve">
          <source>A cache control for requests. This is immutable and gives access to all the request-relevant cache control headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005a57ac309a58a5a7fbf5c7cbf2f99d4a894ae7" translate="yes" xml:space="preserve">
          <source>A cache control for responses. Unlike &lt;a href=&quot;#werkzeug.datastructures.RequestCacheControl&quot;&gt;&lt;code&gt;RequestCacheControl&lt;/code&gt;&lt;/a&gt; this is mutable and gives access to response-relevant cache control headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ced1c4ad284a9c758e1fbb5c5872316f4b349a" translate="yes" xml:space="preserve">
          <source>A closing iterator is not needed if the application uses response objects and finishes the processing if the response is started:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dd1d6dc2b6ccf92a6395bead1bc9d6499875d4" translate="yes" xml:space="preserve">
          <source>A common example is writing a Single Page Application, where you have a backend API and a frontend written in JavaScript that does the routing in the browser rather than requesting different pages from the server. The frontend is a single HTML and JS file that should be served for any path besides &amp;ldquo;/api&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be37330df994f09c62bb65afe2e3b81f0af2372e" translate="yes" xml:space="preserve">
          <source>A decorator that converts a function into a lazy property. The function wrapped is called the first time to retrieve the result and then that calculated result is used the next time you access the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ea4e5727480639cbfa285ac9f71a65c0a0d6be" translate="yes" xml:space="preserve">
          <source>A descriptor that calls &lt;a href=&quot;#werkzeug.wrappers.BaseResponse.get_data&quot;&gt;&lt;code&gt;get_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.wrappers.BaseResponse.set_data&quot;&gt;&lt;code&gt;set_data()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243a110bb8b0de2e995b07355c08314b1c176fa8" translate="yes" xml:space="preserve">
          <source>A dict of default converters to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db00b9e1f8af0cd9f42ffb17da6fc9cd953d9fab" translate="yes" xml:space="preserve">
          <source>A dict of keyword arguments that the function can not handle but where provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222cb1d4dc6ddaa4c4b4aae9351795ace0b97160" translate="yes" xml:space="preserve">
          <source>A dict of status code -&amp;gt; default status message pairs. This is used by the wrappers and other places where an integer status code is expanded to a string throughout Werkzeug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380c52b84ccef00be48657e6b78f1828d9a3efb5" translate="yes" xml:space="preserve">
          <source>A dict with values that are used to override the generated environ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee4b8c533c0b95b165f21877fff7a8a3955714f" translate="yes" xml:space="preserve">
          <source>A dictionary of headers to be sent with the request to the target. The default is &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc6b3111557f54a708e616553bf60507ee3ac2e" translate="yes" xml:space="preserve">
          <source>A flag, indicating that the previous request from the client was rejected because the nonce value was stale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24089aa9074ff60bb971768be4bd803e3dfd377" translate="yes" xml:space="preserve">
          <source>A handy helper function that recreates the full URL as IRI for the current request or parts of it. Here&amp;rsquo;s an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a989824be3708560c17ddde20f5a6bb7a2b290e" translate="yes" xml:space="preserve">
          <source>A key and certificate can be created in advance using the openssl tool instead of the &lt;a href=&quot;#werkzeug.serving.make_ssl_devcert&quot;&gt;&lt;code&gt;make_ssl_devcert()&lt;/code&gt;&lt;/a&gt;. This requires that you have the &lt;code&gt;openssl&lt;/code&gt; command installed on your system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991e25d4a8e7f788e0ed14404c60ead80ebfdbda" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;(begin, end)&lt;/code&gt; tuples for the range header provided. The ranges are non-inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f8ea5b19c57487c731d4dbea01bec0054d0317" translate="yes" xml:space="preserve">
          <source>A list of URIs that define the protection space. If a URI is an absolute path, it is relative to the canonical root URL of the server being accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7462a02d072837198e1bde1531fe66758e1727" translate="yes" xml:space="preserve">
          <source>A list of values that where given by positional argument but the function cannot accept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1853f1e7352cf833e6bb39fda807ec9962356f01" translate="yes" xml:space="preserve">
          <source>A mixin for &lt;a href=&quot;#werkzeug.wrappers.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; subclasses that adds descriptors for Cross Origin Resource Sharing (CORS) headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128faaf5d471faabcfb9ad874aff999defa694c2" translate="yes" xml:space="preserve">
          <source>A mixin for &lt;a href=&quot;#werkzeug.wrappers.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; subclasses. Request objects that mix this class in will automatically get descriptors for a couple of HTTP headers with automatic type conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b86813afdae46a09212010417b97e5656d960c" translate="yes" xml:space="preserve">
          <source>A mixin for &lt;a href=&quot;#werkzeug.wrappers.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt; subclasses that adds descriptors for Cross Origin Resource Sharing (CORS) headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b342c180172bed78cff7c86391de4fa18e1392d8" translate="yes" xml:space="preserve">
          <source>A mixin for &lt;a href=&quot;#werkzeug.wrappers.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt; subclasses. Response objects that mix this class in will automatically get descriptors for a couple of HTTP headers with automatic type conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c106fcce0c32fa5a4e51d0b5eb40b76966987fcc" translate="yes" xml:space="preserve">
          <source>A mixin for classes with an &lt;code&gt;environ&lt;/code&gt; attribute to get all the HTTP accept headers as &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.Accept&quot;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; objects (or subclasses thereof).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dab089ccab2964d09cd9bd01474d8d7166fe00" translate="yes" xml:space="preserve">
          <source>A module or other object that has &lt;code&gt;dumps&lt;/code&gt; and &lt;code&gt;loads&lt;/code&gt; functions that match the API of the built-in &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375cb0331433ba427d29b69b8d12d5c8ed4e2e5c" translate="yes" xml:space="preserve">
          <source>A more useful header is the accept header. With this header the browser informs the web application what mimetypes it can handle and how well. All accept headers are sorted by the quality, the best item being the first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a4fcce85fcfe15289b05e13a8a070219a6ca7a" translate="yes" xml:space="preserve">
          <source>A read only &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; that you can pass multiple &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; instances as sequence and it will combine the return values of all wrapped dicts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79e7543e38fe73d1972590635cbbedee68d0ebc" translate="yes" xml:space="preserve">
          <source>A response object is &lt;em&gt;not&lt;/em&gt; necessarily the &lt;code&gt;BaseResponse&lt;/code&gt; object or a subclass thereof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3894636672b33b7a598c68041c70a1db466562" translate="yes" xml:space="preserve">
          <source>A response wrapper is a callable that takes three arguments: the application iterator, the status and finally a list of headers. The default response wrapper returns a tuple. Because response objects have the same signature, you can use them as response wrapper, ideally by subclassing them and hooking in test functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b4b476b66691ad9a0fa4f172b791a408f7ec98" translate="yes" xml:space="preserve">
          <source>A safe path, otherwise &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92ee4ba3d09acb25b227bf8b9709cfe84074635" translate="yes" xml:space="preserve">
          <source>A sequence of http methods this rule applies to. If not specified, all methods are allowed. For example this can be useful if you want different endpoints for &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt;. If methods are defined and the path matches but the method matched against is not in this list or in the list of another rule for that path the error raised is of the type &lt;code&gt;MethodNotAllowed&lt;/code&gt; rather than &lt;code&gt;NotFound&lt;/code&gt;. If &lt;code&gt;GET&lt;/code&gt; is present in the list of methods and &lt;code&gt;HEAD&lt;/code&gt; is not, &lt;code&gt;HEAD&lt;/code&gt; is added automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fea7d0e0a0af005cbf522a7cff9bf9c63ddf1bc" translate="yes" xml:space="preserve">
          <source>A server-specified data string which should be uniquely generated each time a 401 response is made. It is recommended that this string be base64 or hexadecimal data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf79474125709d2794d4edb0bdd90783c15de55" translate="yes" xml:space="preserve">
          <source>A set of argument names that the function expected but where missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4be592c8b0e0e3c3beefef07b1cf80f5ff6cc3" translate="yes" xml:space="preserve">
          <source>A set of quality-of-privacy directives such as auth and auth-int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267087e706d0a58bff8db1f84e47fe1a9ae188f0" translate="yes" xml:space="preserve">
          <source>A set that can be used to check if one etag is present in a collection of etags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5eaec156275e6b8f9df44cd7a6cac1826cde69" translate="yes" xml:space="preserve">
          <source>A special &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; that has convenience methods to add files to it. This is used for &lt;code&gt;EnvironBuilder&lt;/code&gt; and generally useful for unittesting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4214ea44ae2117fa43d9d7f0968dea5b72ab8ce" translate="yes" xml:space="preserve">
          <source>A static helper function for subclasses to add extra authentication system properties onto a class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192265bf2444cd815cf4eb4bbf2c12aac8eeb172" translate="yes" xml:space="preserve">
          <source>A string indicating a pair of algorithms used to produce the digest and a checksum. If this is not present it is assumed to be &amp;ldquo;MD5&amp;rdquo;. If the algorithm is not understood, the challenge should be ignored (and a different one used, if there is more than one).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb67e58150e212fe4f0b69d85998e48ccd132b5" translate="yes" xml:space="preserve">
          <source>A string of 32 hex digits computed as defined in RFC 2617, which proves that the user knows a password. Digest auth only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fab5da6ebafee2e262ded1df568e743e4439989" translate="yes" xml:space="preserve">
          <source>A string of data, specified by the server, which should be returned by the client unchanged in the Authorization header of subsequent requests with URIs in the same protection space. It is recommended that this string be base64 or hexadecimal data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dc826a3ba3865418045c3fd2ea4a4cdc39cea7" translate="yes" xml:space="preserve">
          <source>A string to be displayed to users so they know which username and password to use. This string should contain at least the name of the host performing the authentication and might additionally indicate the collection of users who might have access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4412252bc730f945bf14ed541dc1fb5ed7c3c705" translate="yes" xml:space="preserve">
          <source>A tuple in the form &lt;code&gt;(stream, form, files)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2392040ae72ded9ad3e0787a0c58e32bea278a" translate="yes" xml:space="preserve">
          <source>A very popular deployment setup on servers like &lt;a href=&quot;https://www.lighttpd.net/&quot;&gt;lighttpd&lt;/a&gt; and &lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt; is FastCGI. To use your WSGI application with any of them you will need a FastCGI server first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a88d22fb90f41f1f4d395338761ba903f674ad3" translate="yes" xml:space="preserve">
          <source>A very stable Python server is CherryPy. This part of the documentation shows you how to combine your WSGI application with the CherryPy WSGI server and how to configure the webserver for proxying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639f9eef9b73d8e69dbe96988b7dce42c22271e4" translate="yes" xml:space="preserve">
          <source>A warning is raised if the size of the cookie header exceeds &lt;a href=&quot;#werkzeug.wrappers.BaseResponse.max_cookie_size&quot;&gt;&lt;code&gt;max_cookie_size&lt;/code&gt;&lt;/a&gt;, but the header will still be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5202a77b513db85e852416a6e2c1286eb90c4c49" translate="yes" xml:space="preserve">
          <source>API Levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb54db510a92908a5a4df79fc1ad1eae8df50ec3" translate="yes" xml:space="preserve">
          <source>Accept</source>
          <target state="translated">Accept</target>
        </trans-unit>
        <trans-unit id="85cc71856fbb9e84c57121667a4910f0b50ea9a1" translate="yes" xml:space="preserve">
          <source>Accepts a floating point number expressed in seconds since the epoch in, a datetime object or a timetuple. All times in UTC. The &lt;a href=&quot;#werkzeug.http.parse_date&quot;&gt;&lt;code&gt;parse_date()&lt;/code&gt;&lt;/a&gt; function can be used to parse such a date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411eea559a43ce1e95203b0706cc70e2ec38126b" translate="yes" xml:space="preserve">
          <source>Accessing attributes on the href object creates a new href object with the attribute name as prefix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3783082f0137f59df1cab159ae075bda60c4fd4" translate="yes" xml:space="preserve">
          <source>Activate the environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c939da16f0e603b27e7b6e284012622c7c83606" translate="yes" xml:space="preserve">
          <source>Acts as a proxy for a werkzeug local. Forwards all operations to a proxied object. The only operations not supported for forwarding are right handed operands and any kind of assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02eff0915dff3e3ea4e3089e36b7387044b57bf" translate="yes" xml:space="preserve">
          <source>Add a new header to the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3274a201e1915a044c957edcae8cb7b6834b39" translate="yes" xml:space="preserve">
          <source>Add a new header tuple to the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181942db404ab58797ae0659a189d09b3eec8450" translate="yes" xml:space="preserve">
          <source>Add a new rule or factory to the map and bind it. Requires that the rule is not bound to another map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7759fcef47444a91ad2c0aadc30882dbc04ca35f" translate="yes" xml:space="preserve">
          <source>Add all the headers from the iterable to the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e75e3d10a9c3522ebed088484684f3c403bcb99" translate="yes" xml:space="preserve">
          <source>Add an etag for the current response if there is none yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfca4ed6733a79342336a1ff4ed7de3d561e4780" translate="yes" xml:space="preserve">
          <source>Add entity tag and cache descriptors to a request object or object with a WSGI environment available as &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;. This not only provides access to etags but also to the cache control header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecfe29ef8fcfc7c6552fb9793fd0884a7b9c0a8b" translate="yes" xml:space="preserve">
          <source>Additional Information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a0e3fa912210406e5e52b83da112ca9a3a6b1e" translate="yes" xml:space="preserve">
          <source>Additional parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c8273386e09bdf8aa225b4f0a1d613590db831" translate="yes" xml:space="preserve">
          <source>Additional values are converted to unicode and appended to the URL as URL querystring parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78964d6125345ab155182c34273fccb3e24fec36" translate="yes" xml:space="preserve">
          <source>Adds a &lt;a href=&quot;#werkzeug.wrappers.WWWAuthenticateMixin.www_authenticate&quot;&gt;&lt;code&gt;www_authenticate&lt;/code&gt;&lt;/a&gt; property to a response object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44a5ab8b75469cdb5b523c8a42de974b6d7cbfe" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;user_agent&lt;/code&gt; attribute to the request object which contains the parsed user agent of the browser that triggered the request as a &lt;a href=&quot;../utils/index#werkzeug.useragents.UserAgent&quot;&gt;&lt;code&gt;UserAgent&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c970b6b3dc2bd091a802ebb612b09960d27ba8e5" translate="yes" xml:space="preserve">
          <source>Adds a function to the internal list of functions that should be called as part of closing down the response. Since 0.7 this function also returns the function that was passed so that this can be used as a decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9660f803ea2db7b94036395ca80796c8e9d9ab7" translate="yes" xml:space="preserve">
          <source>Adds a new file to the dict. &lt;code&gt;file&lt;/code&gt; can be a file name or a &lt;code&gt;file&lt;/code&gt;-like or a &lt;a href=&quot;#werkzeug.datastructures.FileStorage&quot;&gt;&lt;code&gt;FileStorage&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c146cedd2bda0b989db702d86e98d84cc51953c1" translate="yes" xml:space="preserve">
          <source>Adds a new value for the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38517c95818ffb8204d5d0be66c12b4b194aad71" translate="yes" xml:space="preserve">
          <source>Adds an &lt;a href=&quot;#werkzeug.wrappers.AuthorizationMixin.authorization&quot;&gt;&lt;code&gt;authorization&lt;/code&gt;&lt;/a&gt; property that represents the parsed value of the &lt;code&gt;Authorization&lt;/code&gt; header as &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.Authorization&quot;&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83a0e22c39f1ddbed36c48ade81764cfc41cc9d" translate="yes" xml:space="preserve">
          <source>Adds extra functionality to a response object for etag and cache handling. This mixin requires an object with at least a &lt;code&gt;headers&lt;/code&gt; object that implements a dict like interface similar to &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a865cd0855eaa5c8830971c6b823c871a19128ac" translate="yes" xml:space="preserve">
          <source>Adhoc Certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc87a51a005e7198b3f7fa180b182fb232be8a80" translate="yes" xml:space="preserve">
          <source>Adjust the WSGI environ based on &lt;code&gt;X-Forwarded-&lt;/code&gt; that proxies in front of the application may set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfe6b2683306da9594b06f3ae9d793697203332" translate="yes" xml:space="preserve">
          <source>After parsing, we don&amp;rsquo;t know if the scheme requires the &lt;code&gt;//&lt;/code&gt;, which is dropped if empty, but conveys different meanings in the final URL if it&amp;rsquo;s present or not. In this case, you can use &lt;code&gt;safe_conversion&lt;/code&gt;, which will return the URL unchanged if it only contains ASCII characters and no whitespace. This can result in a URI with unquoted characters if it was not already quoted correctly, but preserves the URL&amp;rsquo;s semantics. Werkzeug uses this for the &lt;code&gt;Location&lt;/code&gt; header for redirects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d34171dd420134b28b31ed0036c1f91419d89dd" translate="yes" xml:space="preserve">
          <source>Age values are non-negative decimal integers, representing time in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f325a41bccddb32642b77f3d0edef6c7558180" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;#werkzeug.datastructures.Accept&quot;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; objects work similar to a list but provide extra functionality for working with the data. Containment checks are normalized to the rules of that header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6307be619ac509c8d3870c66a069d302ffdee3" translate="yes" xml:space="preserve">
          <source>All URLs provided by this factory have the subdomain set to a specific domain. For example if you want to use the subdomain for the current language this can be a good setup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7acd22746ec88242e53874636773b351d6a1c489" translate="yes" xml:space="preserve">
          <source>All of the exceptions raised are subclasses of &lt;code&gt;HTTPException&lt;/code&gt; so they can be used as WSGI responses. They will all render generic error or redirect pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70630c01d5f8294ac20ef75d598a2e6e4f33ec1" translate="yes" xml:space="preserve">
          <source>All the exceptions implement this common interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1398640cc2385ffaa0bb4169ef452894c44b79" translate="yes" xml:space="preserve">
          <source>All the functionality the &lt;code&gt;Request&lt;/code&gt; and &lt;code&gt;Response&lt;/code&gt; objects (aka the &amp;ldquo;wrappers&amp;rdquo;) provide is also available in small utility functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7defa297a9d7177dfcc2070a3361f4343eb6d0c" translate="yes" xml:space="preserve">
          <source>All the rules except for the &lt;code&gt;'#select_language'&lt;/code&gt; endpoint will now listen on a two letter long subdomain that holds the language code for the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9063141c081757e25319a673f2f7c63244ddc35f" translate="yes" xml:space="preserve">
          <source>Also common headers are exposed as attributes or with methods to set / retrieve them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a7ef28e2c6fa3c552ed837ac71d3fe49377ffc" translate="yes" xml:space="preserve">
          <source>Also here this works in both directions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f621eef56f5210cc2cf0c0f5971aeac5d602be6" translate="yes" xml:space="preserve">
          <source>Also make sure to have a redis server running on your local machine. If you are on OS X, you can use &lt;code&gt;brew&lt;/code&gt; to install it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203d1dc1a173022d42ecaa0f832a527138ee9776" translate="yes" xml:space="preserve">
          <source>Also starting with 0.6, Werkzeug will attempt to set the content length if it is able to figure it out on its own. This is the case if all the strings in the response iterable are already encoded and the iterable is buffered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7220a77d0101f493a2552c2dfd5868f7eff5e8d" translate="yes" xml:space="preserve">
          <source>Also, unlike request objects, response objects are designed to be modified. So here is what you can do with them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b6a24d6b13c0214b3cd93775cb0d4093bf3245" translate="yes" xml:space="preserve">
          <source>Alternatively the same application could be used without request and response objects but by taking advantage of the parsing functions werkzeug provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd07d666705757042281e438dbf54c61b271a54" translate="yes" xml:space="preserve">
          <source>Alternatively you can also disable ipv6 support in your browser. For example if Firefox shows this behavior you can disable it by going to &lt;code&gt;about:config&lt;/code&gt; and disabling the &lt;code&gt;network.dns.disableIPv6&lt;/code&gt; key. This however is not recommended as of Werkzeug 0.6.1!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b151ebe2755e73d2a93d0c1e7c9a6c6728e228" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#werkzeug.datastructures.Accept&quot;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; object is just a list subclass for lists of &lt;code&gt;(value, quality)&lt;/code&gt; tuples. It is automatically sorted by specificity and quality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d0f0cc010c1ba3ee78cb4982670914b0b73c14" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#werkzeug.datastructures.Headers.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; for compatibility with the &lt;a href=&quot;https://docs.python.org/3/library/wsgiref.html#module-wsgiref&quot;&gt;&lt;code&gt;wsgiref&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.add_header&quot;&gt;&lt;code&gt;add_header()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7b2d78e3b589885a3c6aa85f3e649147757cf9" translate="yes" xml:space="preserve">
          <source>An exception that is used to signal both a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;#werkzeug.exceptions.BadRequest&quot;&gt;&lt;code&gt;BadRequest&lt;/code&gt;&lt;/a&gt;. Used by many of the datastructures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b68accfe6157998a09bf8713a113a6e4ffa132" translate="yes" xml:space="preserve">
          <source>An immutable &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b045bcd7892e18cafade1eba24cd2d060f17b1" translate="yes" xml:space="preserve">
          <source>An immutable &lt;a href=&quot;#werkzeug.datastructures.OrderedMultiDict&quot;&gt;&lt;code&gt;OrderedMultiDict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18cbc741ba786531554528109f8c576520dd571" translate="yes" xml:space="preserve">
          <source>An immutable &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8cad261e827f1bf4aa2e2ebdcdd3513d9fa948" translate="yes" xml:space="preserve">
          <source>An immutable &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f0293c81e7740c4bd123ab3e57e0c70615a643" translate="yes" xml:space="preserve">
          <source>An object containing all the etags in the &lt;code&gt;If-Match&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac2d842f3e90047f4f1e54d903702a071851a89" translate="yes" xml:space="preserve">
          <source>An object containing all the etags in the &lt;code&gt;If-None-Match&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2191003aa1af118315cf4f84fc5c798b2b9c12e" translate="yes" xml:space="preserve">
          <source>An object that stores some headers. It has a dict-like interface but is ordered and can store the same keys multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27204f7ac1d7ae99a811dbfe5bcd6b92276f4d1d" translate="yes" xml:space="preserve">
          <source>An optional dict with defaults for other rules with the same endpoint. This is a bit tricky but useful if you want to have unique URLs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3fa7eeae9971f777caab3172f11ca7b29f3d51" translate="yes" xml:space="preserve">
          <source>An optional input stream. If you set this it will clear &lt;a href=&quot;#werkzeug.test.EnvironBuilder.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.test.EnvironBuilder.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bf378bc5faed3ce1cb2ee08a7f5b915880c050" translate="yes" xml:space="preserve">
          <source>And here an expanded version that looks at the query string in the URL (more importantly at the &lt;code&gt;name&lt;/code&gt; parameter in the URL to substitute &amp;ldquo;World&amp;rdquo; against another word):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a627584f1e43b1aff6c9ede7e185d0389f1e7f5" translate="yes" xml:space="preserve">
          <source>And here are all the templates. Just drop them into the &lt;code&gt;templates&lt;/code&gt; folder. Jinja2 supports template inheritance, so the first thing we will do is create a layout template with blocks that act as placeholders. We also set up Jinja2 so that it automatically escapes strings with HTML rules, so we don&amp;rsquo;t have to spend time on that ourselves. This prevents XSS attacks and rendering errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2322800cf48a695c648bdf7173d24ca6d8784261" translate="yes" xml:space="preserve">
          <source>And here is what happens on redirect and missing URLs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7514533ef88dcddf5db5babd6838b9d5f8f32c" translate="yes" xml:space="preserve">
          <source>And of course encodings and charsets:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b69b24f6ca70975fe4bd0bdeef3a63c3da74f07" translate="yes" xml:space="preserve">
          <source>And that&amp;rsquo;s all you need to know about WSGI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f013aa27a787a197cda0ffb664c44c4d60d2d52d" translate="yes" xml:space="preserve">
          <source>Another situation where the low level parsing functions can be useful are custom WSGI frameworks, unit-testing or modernizing an old CGI/mod_python application to WSGI as well as WSGI middlewares where you want to keep the overhead low.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7417e600d5136b1ed96821ba53e6705290b8a26f" translate="yes" xml:space="preserve">
          <source>Any other value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e589caa4988e1984d2304f72079ae5ad519f60" translate="yes" xml:space="preserve">
          <source>Application Deployment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044626cd6d35e72db1937224f7ece162718535da" translate="yes" xml:space="preserve">
          <source>Application Dispatcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba65f56436790c51c9dbbc69cefa023a747aba8d" translate="yes" xml:space="preserve">
          <source>Application Profiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e850328c2d61475f2c6ab76888e01bcd6c277a" translate="yes" xml:space="preserve">
          <source>Applications should avoid manually creating or modifying a WSGI environment unless they take care of the proper encoding or decoding step. All high level interfaces in Werkzeug will apply the encoding and decoding as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e688aa387fd870f7b4348ffe6d77b721588d10" translate="yes" xml:space="preserve">
          <source>As WebSocket URLs have a different scheme, rules are always built with a scheme and host, &lt;code&gt;force_external=True&lt;/code&gt; is implied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194885e73d52c7f885f4afb0131e55552fb96235" translate="yes" xml:space="preserve">
          <source>As a matter of fact they are not Werkzeug response objects. However you can get a response object by calling &lt;code&gt;get_response()&lt;/code&gt; on a HTTP exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6386c246a79a905e888241df4c75e5127d3b55bb" translate="yes" xml:space="preserve">
          <source>As an example we show here how to configure nginx to proxy to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff7d3a549e6f9cc2e3f6f3287e88a5c2a60945a" translate="yes" xml:space="preserve">
          <source>As data store, we will use &lt;a href=&quot;https://redis.io/&quot;&gt;redis&lt;/a&gt; here instead of a relational database to keep this simple and because that&amp;rsquo;s the kind of job that &lt;a href=&quot;https://redis.io/&quot;&gt;redis&lt;/a&gt; excels at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe672ca9561da98cf07399388755d626bf69a9e" translate="yes" xml:space="preserve">
          <source>As of Werkzeug 0.14 HTTP exceptions are automatically caught and converted to responses instead of failing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec05972047dff9ab1baae751a3dafad15c98179" translate="yes" xml:space="preserve">
          <source>As request and response objects usually are the central entities of Werkzeug powered applications you can change the default encoding Werkzeug operates on by subclassing these two classes. For example you can easily set the application to utf-7 and strict error handling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56839cad322a0b50e77009cab4352661fe87966c" translate="yes" xml:space="preserve">
          <source>As soon as you have more complex URL setups it&amp;rsquo;s a good idea to use rule factories to avoid repetitive tasks. Some of them are builtin, others can be added by subclassing &lt;code&gt;RuleFactory&lt;/code&gt; and overriding &lt;code&gt;get_rules&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf331bc0ffecdce41c0bac723c0bd2f54988f7d" translate="yes" xml:space="preserve">
          <source>As you can see attributes work in both directions. So you can set both &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;status_code&lt;/code&gt; and the change will be reflected to the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb4653285144ecf927da9370c7b0972feb8bbd7" translate="yes" xml:space="preserve">
          <source>As you can see from the list above not all status codes are available as errors. Especially redirects and other non 200 status codes that do not represent errors are missing. For redirects you can use the &lt;code&gt;redirect()&lt;/code&gt; function from the utilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9257ce64a9c31c0d57d1f767cd00613c02508a6f" translate="yes" xml:space="preserve">
          <source>As you can see from this example those exceptions are callable WSGI applications. Because of Python 2.4 compatibility those do not extend from the response objects but only from the python exception class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139bf33c4c9f5fc9e2034dfcfa9af1b1102a8714" translate="yes" xml:space="preserve">
          <source>Assuming the application catches all HTTP exceptions and reacts to them properly a view function could do the following safely and doesn&amp;rsquo;t have to check if the keys exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e65d6f9899df14eb3507bd493694364cc44c38d" translate="yes" xml:space="preserve">
          <source>At the current time the integrated webserver does not support ipv6 and ipv4 at the same time and for better portability ipv4 is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1acfa55eb1476c86c5c4a68f256a67b25289ab" translate="yes" xml:space="preserve">
          <source>Authentication</source>
          <target state="translated">Authentication</target>
        </trans-unit>
        <trans-unit id="b144c69d62d19e2b856b10e6456176db66e3da2b" translate="yes" xml:space="preserve">
          <source>Authentication headers can be set that way as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d2aa278b9f5f156a11bacf396fb540f1d5a183" translate="yes" xml:space="preserve">
          <source>Base Wrappers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ca5676fadb6a1d3d2a9fddcbf8d5d80cfc099b" translate="yes" xml:space="preserve">
          <source>Base response class. The most important fact about a response object is that it&amp;rsquo;s a regular WSGI application. It&amp;rsquo;s initialized with a couple of response parameters (headers, body, status code etc.) and will start a valid WSGI response when called with the environ and start response callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0ad58dfb152ea443c6c032b8be1d4b0fe01ca3" translate="yes" xml:space="preserve">
          <source>Baseclass</source>
          <target state="translated">Baseclass</target>
        </trans-unit>
        <trans-unit id="9df1c4f55b32c56a1988b3b43f0a2ebeed2e5b5e" translate="yes" xml:space="preserve">
          <source>Baseclass for all HTTP exceptions. This exception can be called as WSGI application to render a default error page or you can catch the subclasses of it independently and render nicer error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d175f1e45d4eba7994ebb8f437d070b7f58c6f5b" translate="yes" xml:space="preserve">
          <source>Basic HTTP Proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630b1b43052c22e1bd9799b5673582e36f998969" translate="yes" xml:space="preserve">
          <source>Basic Usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84da0d3308424e9f28f153b7757adb437e6b268" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;X-Forwarded-Host&lt;/code&gt; headers can be set to any value by a malicious client, it is recommended to either set this property or implement similar validation in the proxy (if application is being run behind one).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97465f9d7b6efea0dd3d89f657fbedf537b6394c" translate="yes" xml:space="preserve">
          <source>Because URLs cannot contain non ASCII data you will always get bytestrings back. Non ASCII characters are urlencoded with the charset defined on the map instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1243f01388533b15cd67c7ec00cae1e0d583443" translate="yes" xml:space="preserve">
          <source>Because certain data can&amp;rsquo;t be moved to the hard disk (regular post data) whereas temporary files can, there is a second limit you can set. The &lt;code&gt;max_form_memory_size&lt;/code&gt; limits the size of &lt;code&gt;POST&lt;/code&gt; transmitted form data. By setting it to &lt;code&gt;1024 * 1024 * 2&lt;/code&gt; you can make sure that all in memory-stored fields are not more than 2MB in size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148fdcf93a561dd6e04dbd4c630f609ad31d1fab" translate="yes" xml:space="preserve">
          <source>Because etags can be weak or strong there are methods to set them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9213fb45e74c729a847409ad940764b33ad84486" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s a WSGI application itself processing usually ends before the actual response is sent to the server. This helps debugging systems because they can catch all the exceptions before responses are started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c4325ecacdfaf8ebd6b15b74b6c07cca6e7020" translate="yes" xml:space="preserve">
          <source>Because this is a very common task the &lt;a href=&quot;#werkzeug.wrappers.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object provides a helper for that. The above code can be rewritten like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e150d9f81343b6656aec58e5b6c7690d78170ab" translate="yes" xml:space="preserve">
          <source>Before we get started, let&amp;rsquo;s create the folders needed for this application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773697863a1f19274a7dfd29269ef9ba65571ae6" translate="yes" xml:space="preserve">
          <source>Before you work on your project, activate the corresponding environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6a598484f555cdef85ad117daef8cd1fbd0716" translate="yes" xml:space="preserve">
          <source>Bind the arguments provided into a dict. When passed a function, a tuple of arguments and a dict of keyword arguments &lt;code&gt;bind_arguments&lt;/code&gt; returns a dict of names as the function would see it. This can be useful to implement a cache decorator that uses the function arguments to build the cache key based on the values of the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cea11a78a05a64bf882c04d836522aed370528" translate="yes" xml:space="preserve">
          <source>Bonus: Refinements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3f3d9173fdd40ee9c23e699707bf60bf66b378" translate="yes" xml:space="preserve">
          <source>Building URLs works pretty much the other way round. Instead of &lt;code&gt;match&lt;/code&gt; you call &lt;code&gt;build&lt;/code&gt; and pass it the endpoint and a dict of arguments for the placeholders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2e649106f63695831382d819e79684dafbee78" translate="yes" xml:space="preserve">
          <source>Built-in Converters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6f2b483b6cdfab8eaa0b5bcb1d4f99b95a71cc" translate="yes" xml:space="preserve">
          <source>By calling the stack without arguments it returns a proxy that resolves to the topmost item on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5ff2ec7f45ce86b5064cee4163229e134439b2" translate="yes" xml:space="preserve">
          <source>By default an &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.ImmutableMultiDict&quot;&gt;&lt;code&gt;ImmutableMultiDict&lt;/code&gt;&lt;/a&gt; is returned from this function. This can be changed by setting &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.parameter_storage_class&quot;&gt;&lt;code&gt;parameter_storage_class&lt;/code&gt;&lt;/a&gt; to a different type. This might be necessary if the order of the form data is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603162b96ea53b75f11537645449a27471b2d539" translate="yes" xml:space="preserve">
          <source>By default it only accepts unsigned, positive values. The &lt;code&gt;signed&lt;/code&gt; parameter will enable signed, negative values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0655a9251b343f412fe2e57b91128f40439e90b" translate="yes" xml:space="preserve">
          <source>By default it will try to use &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; and only use &lt;code&gt;multipart/form-data&lt;/code&gt; if files are uploaded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d70c8fa389ce284e2012d6f9c690d03160c4a2" translate="yes" xml:space="preserve">
          <source>Bytes, Strings, and Encodings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422f720e7d72716b7017e69268406be073cfc7c1" translate="yes" xml:space="preserve">
          <source>CGI</source>
          <target state="translated">CGI</target>
        </trans-unit>
        <trans-unit id="2139aadec237bbecb581e62932f94bc3bce7a704" translate="yes" xml:space="preserve">
          <source>CORS</source>
          <target state="translated">CORS</target>
        </trans-unit>
        <trans-unit id="f2dabbad74c626a4372112f05c7fcf3bdb1df134" translate="yes" xml:space="preserve">
          <source>Call the exception as WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636bf58df3cf4e96b51947914b9451b62b329661" translate="yes" xml:space="preserve">
          <source>Call this method if you want to make your response object ready for being pickled. This buffers the generator if there is one. It will also set the &lt;code&gt;Content-Length&lt;/code&gt; header to the length of the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa6bdd1c50a3f51a63236a599f6091f09a1ee6d" translate="yes" xml:space="preserve">
          <source>Call this method if you want to make your response object ready for pickeling. This buffers the generator if there is one. This also sets the etag unless &lt;code&gt;no_etag&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8b7ec841e91c4672caff7e082f276547c75628" translate="yes" xml:space="preserve">
          <source>Called before matching and building to keep the compiled rules in the correct order after things changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c6e97689ac7b44c84f7dfbdf5a0c88434287ca" translate="yes" xml:space="preserve">
          <source>Called if &lt;a href=&quot;#werkzeug.wrappers.json.JSONMixin.get_json&quot;&gt;&lt;code&gt;get_json()&lt;/code&gt;&lt;/a&gt; parsing fails and isn&amp;rsquo;t silenced. If this method returns a value, it is used as the return value for &lt;a href=&quot;#werkzeug.wrappers.json.JSONMixin.get_json&quot;&gt;&lt;code&gt;get_json()&lt;/code&gt;&lt;/a&gt;. The default implementation raises &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.BadRequest&quot;&gt;&lt;code&gt;BadRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a26e2d05f9270376411b80809b659df73f9fa6" translate="yes" xml:space="preserve">
          <source>Called to get a stream for the file upload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed18f6003dd373ed4c94424db5c22e1e01fc809" translate="yes" xml:space="preserve">
          <source>Calling the builder escapes the string passed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e6e33b3c6181488a4bca3e3d071d89df7b4eae" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#werkzeug.wrappers.json.JSONMixin.get_json&quot;&gt;&lt;code&gt;get_json()&lt;/code&gt;&lt;/a&gt; with default arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9427e341deebb20ef3bff5f293e800fdb624de6c" translate="yes" xml:space="preserve">
          <source>Can be useful if you want to have user profiles on different subdomains and all subdomains are forwarded to your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe49733ed4762b4e4c134c9a047280508c341126" translate="yes" xml:space="preserve">
          <source>Changed in version 0.10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206e8c57c4f421457100e5b3ef5d474e63a050c3" translate="yes" xml:space="preserve">
          <source>Changed in version 0.11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae62c2b631d658803a491b0d13306b6b482a92f4" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15.0: &lt;code&gt;www_authenticate&lt;/code&gt; was added as the first argument, ahead of &lt;code&gt;description&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b65a0aa78f8aefb3105b7e1865191abbe0d021c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15.1: &lt;code&gt;description&lt;/code&gt; was moved back as the first argument, restoring its previous position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7aed7976d26e420e22e4f8e914163bd11faa0c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15.3: If the &lt;code&gt;www_authenticate&lt;/code&gt; argument is not set, the &lt;code&gt;WWW-Authenticate&lt;/code&gt; header is not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516c09e1b12de884b58370a2188aea3364dc0786" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15.3: The &lt;code&gt;response&lt;/code&gt; argument was restored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ec852d8fb07b89ae8cb547e45759696dde2833" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; parameter continuations are handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2327abe9db6552afb3d86e63f54832816c75c074" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: &lt;code&gt;X-Forwarded-Host&lt;/code&gt; and &lt;code&gt;X-Forwarded-Port&lt;/code&gt; modify &lt;code&gt;SERVER_NAME&lt;/code&gt; and &lt;code&gt;SERVER_PORT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1462e0c02bb4f0b14d7fd6c93d2209aa25bd72" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: &lt;code&gt;path_info&lt;/code&gt; defaults to &lt;code&gt;'/'&lt;/code&gt; if &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48da8859dda673d5e90b2e56cd132382f52cb794" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: All headers support multiple values. The &lt;code&gt;num_proxies&lt;/code&gt; argument is deprecated. Each header is configured with a separate number of trusted proxies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0b7af39acf78c5ea0ad1553801ce2cd9289aaf" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: All reserved and invalid characters remain quoted. Previously, only some reserved characters were preserved, and invalid bytes were replaced instead of left quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54df2c77697067ecb9d03ad4ed66822443af85be" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: All reserved characters remain unquoted. Previously, only some reserved characters were left unquoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa59e268a69291c5eea4ea137253416e49c6b56" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: Bind to a Unix socket by passing a path that starts with &lt;code&gt;unix://&lt;/code&gt; as the &lt;code&gt;hostname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00270c45e57f75e15566884d5152fa3e3ec94ac0" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: Original WSGI environ values are stored in the &lt;code&gt;werkzeug.proxy_fix.orig&lt;/code&gt; dict. &lt;code&gt;orig_remote_addr&lt;/code&gt;, &lt;code&gt;orig_wsgi_url_scheme&lt;/code&gt;, and &lt;code&gt;orig_http_host&lt;/code&gt; are deprecated and will be removed in 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9819e7682352949d06e7cd22425851b7773c6b0c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: Stats are written even if &lt;code&gt;profile_dir&lt;/code&gt; is given, and can be disable by passing &lt;code&gt;stream=None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d19a5465924cacd22ebc1aa30e3280b95efebb3" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: Support &lt;code&gt;X-Forwarded-Port&lt;/code&gt; and &lt;code&gt;X-Forwarded-Prefix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eae4752a190e4384c5c668079881efc3c7dc191" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: The &lt;code&gt;errors&lt;/code&gt; parameter defaults to leaving invalid bytes quoted instead of replacing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711a08aaabdd95aa39623abac4f0058b0be3e78e" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: The content type and length headers are set based on input stream detection. Previously this only set the WSGI keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbb52485f228f2aec7d2c132d906956f5d68af2" translate="yes" xml:space="preserve">
          <source>Changed in version 0.15: The ranges passed in are validated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658445442582931d340375d0bc01d63eeeec3a44" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: &lt;a href=&quot;#werkzeug.datastructures.Accept&quot;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; objects are forced immutable now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce20f032fa5407fa47d0519944ca35ef1d304078" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: Added &lt;code&gt;cache_timeout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8693bc68e64b59fc177e11bab7024a278cac980" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: Added &lt;code&gt;sort_parameters&lt;/code&gt; and &lt;code&gt;sort_key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7c944a5006e742b6d044a1f0f0ac33490ea3da" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: If a dict is provided as file in the dict for the &lt;code&gt;data&lt;/code&gt; parameter the content type has to be called &lt;code&gt;content_type&lt;/code&gt; now instead of &lt;code&gt;mimetype&lt;/code&gt;. This change was made for consistency with &lt;code&gt;werkzeug.FileWrapper&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c9bf8b88dbf2cae8e79db45b906dfa1d5c2ee5" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: If the key does no longer exist a list is returned instead of raising an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7d18846d76aca0579311a294670301cc57ff9b" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: In older versions a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; was raised instead of a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; if the object was missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2907dddb33462c73da0dd8e318228dbfefec84c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: In previous versions &amp;ldquo;;&amp;rdquo; and &amp;ldquo;&amp;amp;&amp;rdquo; could be used for url decoding. This changed in 0.5 where only &amp;ldquo;&amp;amp;&amp;rdquo; is supported. If you want to use &amp;ldquo;;&amp;rdquo; instead a different &lt;code&gt;separator&lt;/code&gt; can be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4608311866768e62111744615dd1743254a390ba" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: Returns a &lt;code&gt;TypeConversionDict&lt;/code&gt; instead of a regular dict. The &lt;code&gt;cls&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61b78cc20a819d430b087cbcfd61575685865a8" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: This function is now a thin wrapper over &lt;a href=&quot;#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt; which was added in 0.5. The &lt;code&gt;headers&lt;/code&gt;, &lt;code&gt;environ_base&lt;/code&gt;, &lt;code&gt;environ_overrides&lt;/code&gt; and &lt;code&gt;charset&lt;/code&gt; parameters were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7f1debb2c2bfda88135e3db64e338d30b924d0" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: This method now accepts the same arguments as &lt;a href=&quot;../test/index#werkzeug.test.EnvironBuilder&quot;&gt;&lt;code&gt;EnvironBuilder&lt;/code&gt;&lt;/a&gt;. Because of this the &lt;code&gt;environ&lt;/code&gt; parameter is now called &lt;code&gt;environ_overrides&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600fe20c66182ec87d4e5a8444def6e72e4050e9" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: This object became immutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69eb2a8b69efc9918856e2af527c40435ffc0005" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: This used to raise &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt;, which was inconsistent with the list API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0892a040863b89d80416db0bdd423cfe687eb98" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: added &lt;code&gt;allowed&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149a1ed27f72b274808ee0c1a066560197dd849a" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: previously this method accepted a bogus &lt;code&gt;calculate_subdomain&lt;/code&gt; parameter that did not have any effect. It was removed because of that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41c064f0630fb41d592a19e81f49c9e330b1319" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: read-only mode was enforced by using immutables classes for all data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8675ed97ce4c8c9a80750cf5eb2851d67b699e" translate="yes" xml:space="preserve">
          <source>Changed in version 0.5: the &lt;code&gt;direct_passthrough&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d5b7d6ae82dbc3da61809ae7279585c5b8ca46" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6.1: &lt;a href=&quot;#werkzeug.datastructures.Headers.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; now accepts the same arguments as &lt;a href=&quot;#werkzeug.datastructures.Headers.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a258f3a7b19153839c55ce2e406d9209422a1975" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6.1: &lt;code&gt;HEAD&lt;/code&gt; is added to &lt;code&gt;methods&lt;/code&gt; if &lt;code&gt;GET&lt;/code&gt; is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a312f15e49220aab7f7a4890bf33775f378b1e1e" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6.1: Instead of a manager the &lt;a href=&quot;#werkzeug.local.release_local&quot;&gt;&lt;code&gt;release_local()&lt;/code&gt;&lt;/a&gt; function can be used as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434cc0e14a1ef496d66652e9cc3b1d65f1c884ed" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6.1: The class can be instantiated with a callable as well now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25b2cbfdea4719abf2d131737e0ce302a060ad2" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6: &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;base_url&lt;/code&gt; can now be unicode strings that are encoded with &lt;code&gt;iri_to_uri()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a97fbb3889ccd6be6a04ebc5ebf6aad3ed4d73d" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6: Previously that function was called &lt;code&gt;fix_headers&lt;/code&gt; and modified the response object in place. Also since 0.6, IRIs in location and content-location headers are handled properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffecc5f9fce822c84374c1a438a08d1a85f783d" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6: The &lt;code&gt;Content-Length&lt;/code&gt; header is now set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fbc1204b91555c63799215fdf3e1c30a5b6f7b" translate="yes" xml:space="preserve">
          <source>Changed in version 0.6: The general purpose classes are now pickleable in each protocol as long as the contained objects are pickleable. This means that the &lt;a href=&quot;#werkzeug.datastructures.FileMultiDict&quot;&gt;&lt;code&gt;FileMultiDict&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t be pickleable as soon as it contains a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfece51c1ee15a4a9d46e10d2ff200188b5c98ea" translate="yes" xml:space="preserve">
          <source>Changed in version 0.7: &lt;code&gt;ident_func&lt;/code&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0af822225445eb6af0808ce424112fd1c37e6c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.7: Added &lt;code&gt;encoding_errors&lt;/code&gt; and &lt;code&gt;host_matching&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebfb560eefa3987d237a6cefccfd8906940d200" translate="yes" xml:space="preserve">
          <source>Changed in version 0.7: Added &lt;code&gt;query_args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d5473c6ee693dfe34cd884ffa1cd2182d8bd8d" translate="yes" xml:space="preserve">
          <source>Changed in version 0.7: You can pass a different ident function to the local manager that will then be propagated to all the locals passed to the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538dfdf20c6b8065e14a0b07bcbde970c1c17632" translate="yes" xml:space="preserve">
          <source>Changed in version 0.8: &lt;code&gt;query_args&lt;/code&gt; can be a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae59721d28ff17b7f67221ddf153ad4dec4eb737" translate="yes" xml:space="preserve">
          <source>Changed in version 0.8: This function now ensures that the limit was reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ef6b0685f73bd6aa38eb826c1c66afae004c3c" translate="yes" xml:space="preserve">
          <source>Changed in version 0.8: This will no longer raise a ValueError when an unexpected server name was passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cad165b689f8590464ff56439228557935a75d7" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9.6: The &lt;code&gt;safe_conversion&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3d4ca60b034cf76bcaeece760e3f4934689c42" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: &lt;code&gt;quote&lt;/code&gt; is now implicitly on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd507d6611ed3e628d0e8d70db6e25820dc06996" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: Added support for &lt;code&gt;cls&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2981bd33f703e7132d67ffdde50c672176b7bb13" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: Previous to Werkzeug 0.9 this would only contain form data for POST and PUT requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab89ad1bb8a6ade9934fb09c9ec620d6f9a19160" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: The &lt;code&gt;linked()&lt;/code&gt; function was removed without replacement as it was an API that does not support the changes to the encoding model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7199201718625c2a6d0443189221f07f17def3b" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: The path is now decoded and a charset and encoding parameter can be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc1ce988ff025f8a4dd8c00485321a050d07759" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: This data structure now stores unicode values similar to how the multi dicts do it. The main difference is that bytes can be set as well which will automatically be latin1 decoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e6b6ea304c4bda574ec8ac5b4d88a5cbd059c4" translate="yes" xml:space="preserve">
          <source>Changed in version 0.9: This stream is now always available but might be consumed by the form parser later on. Previously the stream was only set if no parsing happened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0673156cc5ba55ff17c71e8da63ad728808cb5fc" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.0: &lt;a href=&quot;#werkzeug.datastructures.Accept&quot;&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/a&gt; internal values are no longer ordered alphabetically for equal quality tags. Instead the initial order is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dad0cc6dac3e8edc696fa2cddd370e5d2733faf" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.0: A warning is shown when the passed server name does not match the incoming WSGI server name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5526561109d463654ddfb57e3a106fff156734de" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.0: Added the &lt;a href=&quot;#werkzeug.exceptions.InternalServerError.original_exception&quot;&gt;&lt;code&gt;original_exception&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba479f6cd011b7b11b40a79bd23dd5c1b8ef556" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.0: If the passed server name specifies port 443, it will match if the incoming scheme is &lt;code&gt;https&lt;/code&gt; without a port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8901d43d8609b7300b8167cd194fbdb6d73868cf" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.0: Returns a &lt;code&gt;MultiDict&lt;/code&gt; instead of a &lt;code&gt;TypeConversionDict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69181fcd2f004e224448c73d1b2da70ccef51ffe" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.0: The check is run for methods other than &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a63736a652a0acbd854789447a4fea21387ab8" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0.0: The string &lt;code&gt;'None'&lt;/code&gt; is accepted for &lt;code&gt;samesite&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700c1876a72bb579667fffd7c6e63e5fd9447b2f" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Added &lt;code&gt;merge_slashes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbf476bc0e666b7aa6e7af6b38f804cde640b4c" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Added &lt;code&gt;retry_after&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b30dd3c6538838f6c47e3e4a978ff7fecdb144" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Deprecated code has been removed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d719df7655254ce81cf3f317737c45a205f471" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: If &lt;code&gt;url_scheme&lt;/code&gt; is &lt;code&gt;ws&lt;/code&gt; or &lt;code&gt;wss&lt;/code&gt;, only WebSocket rules will match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8854ec316eea730f32ec0f0e29de0ac161b1dd" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Support &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt;. Allow passing &lt;code&gt;kwargs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327c5bcfbd7986b1ed280b2632e146d543452e0c" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: Supports &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#module-pathlib&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3586b2e17f30b0e227e5d3904d25598c742354f7" translate="yes" xml:space="preserve">
          <source>Changed in version 1.0: The default &lt;code&gt;fallback_mimetype&lt;/code&gt; is &lt;code&gt;application/octet-stream&lt;/code&gt;. If a filename looks like a text mimetype, the &lt;code&gt;utf-8&lt;/code&gt; charset is added to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="translated">Changelog</target>
        </trans-unit>
        <trans-unit id="0b6fb7b3f294f2b95371c2370ebd1e11cfe8aeed" translate="yes" xml:space="preserve">
          <source>Check if a header is an HTTP/1.1 &amp;ldquo;Hop-by-Hop&amp;rdquo; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c59114df7e94f8e484a948e5f1e3c66a0ce448" translate="yes" xml:space="preserve">
          <source>Check if a header is an entity header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a227ce4c136214c8a03d7c1294e7c71ad6cf994" translate="yes" xml:space="preserve">
          <source>Check if a key is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc1cab3616b16dfbadf58bdface6a16fb713c3b" translate="yes" xml:space="preserve">
          <source>Check if an etag is part of the set ignoring weak tags. It is also possible to use the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386fb7bb68ca5a6c63a3202409db32e270919d5a" translate="yes" xml:space="preserve">
          <source>Check if an etag is part of the set including weak and strong tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6affe361bee5d64d124bf8965c674a31c914af64" translate="yes" xml:space="preserve">
          <source>Check if an etag is strong.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9770372dc27d83a0d0a78431bb4cb0760e88cb0c" translate="yes" xml:space="preserve">
          <source>Check if an etag is weak.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641aac0c9684915aabd699c951d8ec617774e547" translate="yes" xml:space="preserve">
          <source>Check if the mimetype indicates JSON data, either &lt;em&gt;application/json&lt;/em&gt; or &lt;em&gt;application/*+json&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36af506d17b2d1fb27eb2f869b30ec89d536acd" translate="yes" xml:space="preserve">
          <source>Checks if a given byte content range is valid for the given length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d515231563840936c12e78a6a32f1fcdb7aa37cf" translate="yes" xml:space="preserve">
          <source>Checks if a host is trusted against a list. This also takes care of port normalization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018d0613ff8728090e3716c3c8c5802c3e8f48d8" translate="yes" xml:space="preserve">
          <source>Checks if the application is running from within the Werkzeug reloader subprocess.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7100260d561dd22a1e07a89effe4facc7aa5311" translate="yes" xml:space="preserve">
          <source>Checks if the function accepts the arguments and keyword arguments. Returns a new &lt;code&gt;(args, kwargs)&lt;/code&gt; tuple that can safely be passed to the function without causing a &lt;code&gt;TypeError&lt;/code&gt; because the function signature is incompatible. If &lt;code&gt;drop_extra&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; (which is the default) any extra positional or keyword arguments are dropped automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3922d113bd2bc517282930aab6c56d45dbd8c9" translate="yes" xml:space="preserve">
          <source>Clear the auth info and enable basic auth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b1154bc19faa6980b445dc64f00ab9aff00468" translate="yes" xml:space="preserve">
          <source>Clear the auth info and enable digest auth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40205016807a5e1c66f169fc7c399c50fc9fee31" translate="yes" xml:space="preserve">
          <source>Clear the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe60f3138d502a8b948aba85dc8834480e3cb6c8" translate="yes" xml:space="preserve">
          <source>Clears all headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876b352989d8d1b4fe6d27bedf694ea0c4716d60" translate="yes" xml:space="preserve">
          <source>Close the underlying file if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1166ff9d67bc16816fd3d1e05107a024687acb" translate="yes" xml:space="preserve">
          <source>Close the wrapped response if possible. You can also use the object in a with statement which will automatically close it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc92fcc279fa93f9049b5601d5d15e1b1201b54" translate="yes" xml:space="preserve">
          <source>Closes all files. If you put real &lt;code&gt;file&lt;/code&gt; objects into the &lt;a href=&quot;#werkzeug.test.EnvironBuilder.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; dict you can call this method to automatically close them all in one go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92c64e81f38256df32ca5b73521725a71f7d1fa" translate="yes" xml:space="preserve">
          <source>Closes associated resources of this request object. This closes all file handles explicitly. You can also use the request object in a with statement which will automatically close it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f000f9a13fcf79c60f667a950b1f9f60ff5a22e" translate="yes" xml:space="preserve">
          <source>Colored Logging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b92d2f56e4aecf9ca3b68e0949a46659e9005b" translate="yes" xml:space="preserve">
          <source>Combine multiple applications as a single WSGI application. Requests are dispatched to an application based on the path it is mounted under.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cfa8fca4d3569e82c267fa76541334f8122d73" translate="yes" xml:space="preserve">
          <source>Combining of both methods is not allowed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2c60a51bdf8fd1a319c0d703825fffc19bf221" translate="yes" xml:space="preserve">
          <source>Common Descriptors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f27382c08a4a0f1fe9c135bff4baa77b6ff2b1" translate="yes" xml:space="preserve">
          <source>Conditional Response Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f09b9822b4fcc7ee7448f402f4626bb6d634c3" translate="yes" xml:space="preserve">
          <source>Configuring Apache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a00dd6d951e56894e460b8058ca64b1426b083" translate="yes" xml:space="preserve">
          <source>Configuring lighttpd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2031ab4ee84e7e349fa32c5b2095aa6cafb6bd65" translate="yes" xml:space="preserve">
          <source>Configuring nginx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="b026d758e9428598f6aaf36a47b70b8dfedc05ed" translate="yes" xml:space="preserve">
          <source>Contains the incoming request data as string in case it came with a mimetype Werkzeug does not handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc861b80fe824989e2d975a178656a309350316" translate="yes" xml:space="preserve">
          <source>Context Locals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e79da13eaf9f32bae39804ba92c66545079a9a" translate="yes" xml:space="preserve">
          <source>Convenience Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eaec9e4b8bc6262b02cfffb15030a13edc21a67" translate="yes" xml:space="preserve">
          <source>Convenience method for conditional requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28d9d1eb552b753858a5dde9818c6823fb28b22" translate="yes" xml:space="preserve">
          <source>Convert a URI to an IRI. All valid UTF-8 characters are unquoted, leaving all reserved and invalid characters quoted. If the URL has a domain, it is decoded from Punycode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6ce9eaf36554b698c17da2b476baa2c8c66f4c" translate="yes" xml:space="preserve">
          <source>Convert an IRI to a URI. All non-ASCII and unsafe characters are quoted. If the URL has a domain, it is encoded to Punycode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3246cef0d7b83765a65619fe12f04857c675b475" translate="yes" xml:space="preserve">
          <source>Convert the &lt;code&gt;ETags&lt;/code&gt; object into a python set. Per default all the weak etags are not part of this set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56a172bd9e7e9d87d1dffc3cd994ca80dcd242a" translate="yes" xml:space="preserve">
          <source>Convert the etags set into a HTTP header string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c9214e3b389a5d09b5b1f4a3391782bb0f537b" translate="yes" xml:space="preserve">
          <source>Convert the header set into an HTTP header string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3e1373b94d0d21b23c26a20b7a3e34433e159a" translate="yes" xml:space="preserve">
          <source>Convert the headers into a list suitable for WSGI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf196ed4cefbef0bacc733bb889483d49aec631" translate="yes" xml:space="preserve">
          <source>Convert the stored values into a WWW-Authenticate header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293339bd05cf32e326077458a73c28f1b388a00c" translate="yes" xml:space="preserve">
          <source>Converters for common types of URL variables are built-in. The available converters can be overridden or extended through &lt;a href=&quot;#werkzeug.routing.Map.converters&quot;&gt;&lt;code&gt;Map.converters&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d91fa6456b6da2a8f08425c0702dd3fb5051bd" translate="yes" xml:space="preserve">
          <source>Converts the object back into an HTTP header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58116f0638230a17c7714b556b6b9b7e33bb21d0" translate="yes" xml:space="preserve">
          <source>Converts the object into &lt;code&gt;Content-Range&lt;/code&gt; HTTP header, based on given length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08193e8fda7f6da2607af1252d7f56b8d945d5b2" translate="yes" xml:space="preserve">
          <source>Converts the response iterator in a list. By default this happens automatically if required. If &lt;code&gt;implicit_sequence_conversion&lt;/code&gt; is disabled, this method is not automatically called and some properties might raise exceptions. This also encodes all the items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524cf50b5df5f29161c0600989922de48abede70" translate="yes" xml:space="preserve">
          <source>Cookies</source>
          <target state="translated">Cookies</target>
        </trans-unit>
        <trans-unit id="29ae46c2dc8692acd40da590fa879d930e758fff" translate="yes" xml:space="preserve">
          <source>Cookies can be set as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a943fac6d26f3945905ecd9d58bb7de8380570d" translate="yes" xml:space="preserve">
          <source>Create a new WSGI environ dict based on the values passed. The first parameter should be the path of the request which defaults to &amp;lsquo;/&amp;rsquo;. The second one can either be an absolute path (in that case the host is localhost:80) or a full path to the request with scheme, netloc port and the path to the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5948a2283f2e7c8332aed1b81458bf59da16aa56" translate="yes" xml:space="preserve">
          <source>Create a new dictionary with keys from iterable and values set to value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43d8d7a820db4cff416112c527769a8fee403e2" translate="yes" xml:space="preserve">
          <source>Create a new request object based on the values provided. If environ is given missing values are filled from there. This method is useful for small scripts when you need to simulate a request from an URL. Do not use this method for unittesting, there is a full featured client object (&lt;code&gt;Client&lt;/code&gt;) that allows to create multipart requests, support for cookies etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482840067327410b892634a7d0b01f120904674b" translate="yes" xml:space="preserve">
          <source>Create a new response object from an application output. This works best if you pass it an application that returns a generator all the time. Sometimes applications may use the &lt;code&gt;write()&lt;/code&gt; callable returned by the &lt;code&gt;start_response&lt;/code&gt; function. This tries to resolve such edge cases automatically. But if you don&amp;rsquo;t get the expected output you should set &lt;code&gt;buffered&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; which enforces buffering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7bab9c458c379d7fb6249f2afb7b8b4c407669" translate="yes" xml:space="preserve">
          <source>Create a project folder and a &lt;code&gt;venv&lt;/code&gt; folder within:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9089a1f4a11bdfe489309552073a0f2b060b49" translate="yes" xml:space="preserve">
          <source>Create an environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1303a46c82de7e2b5cac9583280c9d463c4af432" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#werkzeug.datastructures.ContentRange&quot;&gt;&lt;code&gt;ContentRange&lt;/code&gt;&lt;/a&gt; object from the current range and given content length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9511cfb2e74e2722045990ebaf8bdac0b3ccdc" translate="yes" xml:space="preserve">
          <source>Creates a new Set-Cookie header without the &lt;code&gt;Set-Cookie&lt;/code&gt; prefix The parameters are the same as in the cookie Morsel object in the Python standard library but it accepts unicode data, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8214b1edba07270632e22a5d9dbd5fd7dcb3e1e0" translate="yes" xml:space="preserve">
          <source>Creates an SSL key for development. This should be used instead of the &lt;code&gt;'adhoc'&lt;/code&gt; key which generates a new cert on each server start. It accepts a path for where it should store the key and cert and either a host or CN. If a host is given it will use the CN &lt;code&gt;*.host/CN=host&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5ae77ec9a5a3927db48da8f0af40a8fe254d21" translate="yes" xml:space="preserve">
          <source>Creates the form data parser. Instantiates the &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.form_data_parser_class&quot;&gt;&lt;code&gt;form_data_parser_class&lt;/code&gt;&lt;/a&gt; with some parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3096a1bfadf6a5390a3c7740c99ab21db9b03bc" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;.cgi&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202bcc9482ac6bf984de4291478aa2d4a7004ee5" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;.fcgi&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c743b301fde45355f8bbc1260d3c6aadcea05bb" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;.py&lt;/code&gt; server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a061fab3866a644b0c2d14fbada1672a5b15d0" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;.wsgi&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97757e2f72abf6496180c09715a887c4bb09a0b3" translate="yes" xml:space="preserve">
          <source>Currently the middleware does not support non ASCII filenames. If the encoding on the file system happens to be the encoding of the URI it may work but this could also be by accident. We strongly suggest using ASCII only file names for static files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f6daf5ba050f3ec443cb9f518439c7667a6631" translate="yes" xml:space="preserve">
          <source>Custom Converters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7206d19fdc5a74013b050ecf4b28f06625c02f9" translate="yes" xml:space="preserve">
          <source>Custom Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d17582a05d81dbc970a2fb5dde4c86c385cf6c" translate="yes" xml:space="preserve">
          <source>Danger</source>
          <target state="translated">Danger</target>
        </trans-unit>
        <trans-unit id="8ed6fbf94844a47ecf83411b63cf050c8d28ac5b" translate="yes" xml:space="preserve">
          <source>Data Structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04a5ccd28e50ba4469027af2380632c5f524a9f" translate="yes" xml:space="preserve">
          <source>Date Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7affb35c473800975d457eab61788d3d71b00a60" translate="yes" xml:space="preserve">
          <source>Dealing with Request Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3186b3631a5a8de2116d5da42a9ae96cd95d6595" translate="yes" xml:space="preserve">
          <source>Debugger PIN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="f30a5b934d139d7c3dbbfa9ebf08fa2e174651e8" translate="yes" xml:space="preserve">
          <source>Debugging Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65da25d798b9bd7961193fead84477eb2e14d790" translate="yes" xml:space="preserve">
          <source>Decodes the URL to a tuple made out of strings. The charset is only being used for the path, query and fragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da96bd22f41620768e5cdb578f321016382bb15e" translate="yes" xml:space="preserve">
          <source>Decodes the netloc part into a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04527f5e85b7284f256939132f78374c5beed11c" translate="yes" xml:space="preserve">
          <source>Decodes the query part of the URL. Ths is a shortcut for calling &lt;a href=&quot;#werkzeug.urls.url_decode&quot;&gt;&lt;code&gt;url_decode()&lt;/code&gt;&lt;/a&gt; on the query argument. The arguments and keyword arguments are forwarded to &lt;a href=&quot;#werkzeug.urls.url_decode&quot;&gt;&lt;code&gt;url_decode()&lt;/code&gt;&lt;/a&gt; unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94b5ca8135fe0b34894cc18d8bac9aafb732ed0" translate="yes" xml:space="preserve">
          <source>Decorate a function as responder that accepts the request as the last argument. This works like the &lt;code&gt;responder()&lt;/code&gt; decorator but the function is passed the request object as the last argument and the request object will be closed automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260a89ccfd454a02c67c8a696a5024586c0d6ee4" translate="yes" xml:space="preserve">
          <source>Delete a cookie. Fails silently if key doesn&amp;rsquo;t exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="3774883b7d50f0826077c185700a8688b43a7108" translate="yes" xml:space="preserve">
          <source>Depending on the WSGI gateway/server, exceptions are handled differently. Most of the time, exceptions go to stderr or the error log, and a generic &amp;ldquo;500 Internal Server Error&amp;rdquo; message is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="29c0fed89c4e8caff7769f0e451177907d98cf8a" translate="yes" xml:space="preserve">
          <source>Diving In</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477173600e1459db9652fe3e61717f4ea57f7b30" translate="yes" xml:space="preserve">
          <source>Does the complete dispatching process. &lt;code&gt;view_func&lt;/code&gt; is called with the endpoint and a dict with the values for the view. It should look up the view function, call it, and return a response object or WSGI application. http exceptions are not caught by default so that applications can display nicer error messages by just catching them by hand. If you want to stick with the default error messages you can pass it &lt;code&gt;catch_http_exceptions=True&lt;/code&gt; and it will catch the http exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ba65bcc0658227730aca042c845ad17c666321" translate="yes" xml:space="preserve">
          <source>Doing &lt;code&gt;len(u'&amp;ouml;')&lt;/code&gt; will always give us the expected &amp;ldquo;1&amp;rdquo; but &lt;code&gt;len('&amp;ouml;')&lt;/code&gt; might give different results depending on the encoding of &lt;code&gt;'&amp;ouml;'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91acecbf0e216ec49dd49b230b92b6f7917bbdf" translate="yes" xml:space="preserve">
          <source>Due to a limitation in Python you cannot convert an ordered multi dict into a regular dict by using &lt;code&gt;dict(multidict)&lt;/code&gt;. Instead you have to use the &lt;code&gt;to_dict()&lt;/code&gt; method, otherwise the internal bucket objects are exposed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330cb541b2955041b8e1eff8488b48a1d35f489f" translate="yes" xml:space="preserve">
          <source>Dump an HTTP header again. This is the reversal of &lt;a href=&quot;#werkzeug.http.parse_list_header&quot;&gt;&lt;code&gt;parse_list_header()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#werkzeug.http.parse_set_header&quot;&gt;&lt;code&gt;parse_set_header()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.http.parse_dict_header&quot;&gt;&lt;code&gt;parse_dict_header()&lt;/code&gt;&lt;/a&gt;. This also quotes strings that include an equals sign unless you pass it as dict of key, value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4667839da8a540c71b36ff2972fb07d9ca118c" translate="yes" xml:space="preserve">
          <source>E-tags and other conditional headers are available in parsed form as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d00f6ed181afbae6281cf892e585dcee85b274" translate="yes" xml:space="preserve">
          <source>ETag</source>
          <target state="translated">ETag</target>
        </trans-unit>
        <trans-unit id="33ab5745d3b353c964b5be01b9ad435f2d349703" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#werkzeug.routing.Rule&quot;&gt;&lt;code&gt;Rule&lt;/code&gt;&lt;/a&gt; object is instantiated with a string that represents a rule and an endpoint which will be the alias for what view the rule represents. Multiple rules can have the same endpoint, but should have different arguments to allow URL construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1bc734474368ceba1cf01f9a6aae071b0f9989" translate="yes" xml:space="preserve">
          <source>Each host has the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15780f1e030bbd7387fb7db9150c518f21298b9f" translate="yes" xml:space="preserve">
          <source>Enable the debugger by wrapping the application with the &lt;a href=&quot;#werkzeug.debug.DebuggedApplication&quot;&gt;&lt;code&gt;DebuggedApplication&lt;/code&gt;&lt;/a&gt; middleware. Alternatively, you can pass &lt;code&gt;use_debugger=True&lt;/code&gt; to &lt;code&gt;run_simple()&lt;/code&gt; and it will do that for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824ae8a1c766f882ae80bd5ab5e3bc03b4b11a88" translate="yes" xml:space="preserve">
          <source>Enables debugging support for a given application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268aead5cf7e66cd1e7c661b18589b47a2ba2f4c" translate="yes" xml:space="preserve">
          <source>Enabling the Debugger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78da7b44d50c7708ac768ef0ffc0a6575065926" translate="yes" xml:space="preserve">
          <source>Encodes the URL to a tuple made out of bytes. The charset is only being used for the path, query and fragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65ea623f443bfd358b9bd0df7995bf4d9304dfa" translate="yes" xml:space="preserve">
          <source>Encodes the netloc part to an ASCII safe URL as bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd6e89b73732923af402fccc8084369903b66d6" translate="yes" xml:space="preserve">
          <source>Enforce that the WSGI response is a response object of the current type. Werkzeug will use the &lt;a href=&quot;#werkzeug.wrappers.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt; internally in many situations like the exceptions. If you call &lt;code&gt;get_response()&lt;/code&gt; on an exception you will get back a regular &lt;a href=&quot;#werkzeug.wrappers.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt; object, even if you are using a custom subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a248b8e2b880133a07a9b7148ae3d0bcdc7f223" translate="yes" xml:space="preserve">
          <source>Enter Request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470f9cf1e16983ea9d161fcf51710a8c0b971706" translate="yes" xml:space="preserve">
          <source>Environ Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66f3eaeeab47dd42013c2a41cbe76681ab9bd98" translate="yes" xml:space="preserve">
          <source>Environment Building</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd050f4e61f66118148a8197a8eee1b69da68183" translate="yes" xml:space="preserve">
          <source>Error Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eab78b080b948fba7735005e8bb47fa3a7ee5c5" translate="yes" xml:space="preserve">
          <source>Error information is emitted using the &lt;a href=&quot;https://docs.python.org/3/library/warnings.html#module-warnings&quot;&gt;&lt;code&gt;warnings&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="de93047ac3d6ebe732006e530e4c2dc27d88a4fb" translate="yes" xml:space="preserve">
          <source>Exhaust the stream. This consumes all the data left until the limit is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888fd8b01294b7b1662ba3ee9e0b578be45b163b" translate="yes" xml:space="preserve">
          <source>Extend headers in this object with items from another object containing header items as well as keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e752f73d17a7f4ee262bcb469fa63c5c3032812" translate="yes" xml:space="preserve">
          <source>Extra Mixin Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6be663b5595577920ec37fd24cc9827b0a1a56a" translate="yes" xml:space="preserve">
          <source>Extracts the path info from the given URL (or WSGI environment) and path. The path info returned is a unicode string, not a bytestring suitable for a WSGI environment. The URLs might also be IRIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a5a0bdbde438449796dfbadacba89a6f5afbcf" translate="yes" xml:space="preserve">
          <source>FastCGI</source>
          <target state="translated">FastCGI</target>
        </trans-unit>
        <trans-unit id="53c4aaea039050027c4b55a990f45a5839b47eb3" translate="yes" xml:space="preserve">
          <source>FastCGI deployments tend to be hard to debug on most webservers. Very often the only thing the server log tells you is something along the lines of &amp;ldquo;premature end of headers&amp;rdquo;. In order to debug the application the only thing that can really give you ideas why it breaks is switching to the correct user and executing the application by hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4434028249b9f601c72b0b84bd80f364b2148625" translate="yes" xml:space="preserve">
          <source>Figures out the full host name for the given domain part. The domain part is a subdomain in case host matching is disabled or a full host name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edd0c4594effd7c7f6ec8bc87c90dfd824b26d6" translate="yes" xml:space="preserve">
          <source>Files and regular form data can be manipulated independently of each other with the &lt;a href=&quot;#werkzeug.test.EnvironBuilder.form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#werkzeug.test.EnvironBuilder.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; attributes, but are passed with the same argument to the constructor: &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636a6b9655038fb43842f0be627a5d0039f36bf6" translate="yes" xml:space="preserve">
          <source>Filesystem Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8249f74c82f2121cb9816912685e96be4e0199" translate="yes" xml:space="preserve">
          <source>Finally if you have set all the conditional values, you can make the response conditional against a request. Which means that if the request can assure that it has the information already, no data besides the headers is sent over the network which saves traffic. For that you should set at least an etag (which is used for comparison) and the date header and then call &lt;code&gt;make_conditional&lt;/code&gt; with the request object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ae3d47b9b3409dfdfa06a3b105feb48d907e6b" translate="yes" xml:space="preserve">
          <source>Finds all the modules below a package. This can be useful to automatically import all views / controllers so that their metaclasses / function decorators have a chance to register themselves on the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed54dfcd30b6e2c6dec64cf59275915b6ed6381" translate="yes" xml:space="preserve">
          <source>First you need to create the CGI application file. Let&amp;rsquo;s call it &lt;code&gt;yourapplication.cgi&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f86b142381e8923b00fe6d89c7fd087fb7c679f" translate="yes" xml:space="preserve">
          <source>First you need to create the FastCGI server file. Let&amp;rsquo;s call it &lt;code&gt;yourapplication.fcgi&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2b734fcf0d1ec6921bec9deefc7627d7d725fe" translate="yes" xml:space="preserve">
          <source>For Werkzeug, a response object is an object that works like a WSGI application but does not do any request processing. Usually you have a view function or controller method that processes the request and assembles a response object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3548e009f1a50c1eee4ed09dc09de713fce731" translate="yes" xml:space="preserve">
          <source>For access to the request data the &lt;code&gt;Request&lt;/code&gt; object is much more fun. It wraps the &lt;code&gt;environ&lt;/code&gt; and provides a read-only access to the data from there:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f8bd962c7bae1b1de5407b5afcee2593355a43" translate="yes" xml:space="preserve">
          <source>For conditional responses the following functions might be useful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1178be0508bf20ef61b94fa9dd126f70c6252a82" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;MultiDict&lt;/code&gt; is a member of the &lt;code&gt;werkzeug&lt;/code&gt; module but internally implemented in a different one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f3c9b4a01fb352765b817cf37856ca5aebd94b" translate="yes" xml:space="preserve">
          <source>For example Pylons/webob provide a very similar response class that can be used as well (&lt;code&gt;webob.Response&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2535c2dd033f1f1d68e7ac6a3b907f2dd758752" translate="yes" xml:space="preserve">
          <source>For example the location header (if present) is joined with the root URL of the environment. Also the content length is automatically set to zero here for certain status codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389e7ffb87e30bff894ab0f7f179976ae346c05f" translate="yes" xml:space="preserve">
          <source>For example you might be maintaining code for an application written in Django or another framework and you have to parse HTTP headers. You can utilize Werkzeug for that by accessing the lower-level HTTP header parsing functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd7a33041aa5076d7dde4ae06abc12dc6b71510" translate="yes" xml:space="preserve">
          <source>For inserting the URL, all we need is this little method on our class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d497fb9a32dd07e38cff498dc23f3a5b9b6e151b" translate="yes" xml:space="preserve">
          <source>For more information consult the documentation of your webserver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abc9f2a085fe6d5b9465066661728d2195cc3c0" translate="yes" xml:space="preserve">
          <source>For more information have a look at the sourcecode to see how the regular properties (&lt;a href=&quot;#werkzeug.datastructures.WWWAuthenticate.realm&quot;&gt;&lt;code&gt;realm&lt;/code&gt;&lt;/a&gt; etc.) are implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e179cd276839d9e924529aa8171b4ecfa9d0e48" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;#werkzeug.serving.run_simple&quot;&gt;&lt;code&gt;run_simple()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ccc04f4b09e557203832e162c4316053df6c3d" translate="yes" xml:space="preserve">
          <source>For most applications the following file should be sufficient:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5169d235c232bce47c3a8bc95a614ba029db7ed" translate="yes" xml:space="preserve">
          <source>For optimal performance when handling range requests, it&amp;rsquo;s recommended that your response data object implements &lt;code&gt;seekable&lt;/code&gt;, &lt;code&gt;seek&lt;/code&gt; and &lt;code&gt;tell&lt;/code&gt; methods as described by &lt;a href=&quot;https://docs.python.org/3/library/io.html#io.IOBase&quot;&gt;&lt;code&gt;io.IOBase&lt;/code&gt;&lt;/a&gt;. Objects returned by &lt;a href=&quot;../wsgi/index#werkzeug.wsgi.wrap_file&quot;&gt;&lt;code&gt;wrap_file()&lt;/code&gt;&lt;/a&gt; automatically implement those methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a975d4dc0c1093173270e57a2ed1956b1d0198f7" translate="yes" xml:space="preserve">
          <source>For secure file saving also have a look at &lt;code&gt;secure_filename()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5b9f2932fbf0d61e0352ddaffca0c97a4691f3" translate="yes" xml:space="preserve">
          <source>For testing purposes we can create a request object from supplied data using the &lt;code&gt;from_values()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115a44f1710b1f8a89fa0b990e5d319dc6afba0e" translate="yes" xml:space="preserve">
          <source>For the request object the following rules apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6724dbdbd00dffc5fff7e0b82230f2e45773ad3d" translate="yes" xml:space="preserve">
          <source>For the response object the following rules apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2e92e43a8a9e9a4c8f2c93ba3d05d2cafd1f08" translate="yes" xml:space="preserve">
          <source>For the same reason iterating over the &lt;a href=&quot;#werkzeug.wsgi.LimitedStream&quot;&gt;&lt;code&gt;LimitedStream&lt;/code&gt;&lt;/a&gt; is not portable. It internally calls &lt;a href=&quot;#werkzeug.wsgi.LimitedStream.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c16d7b27bfc48f599927a695fc7639846b44cc" translate="yes" xml:space="preserve">
          <source>For this to look better than ugly black and white, here a simple stylesheet that goes along:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4564b4bf31cb6cd9971a3b792c76da7befa4e8f2" translate="yes" xml:space="preserve">
          <source>Form Data Parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484b2b105ea78bff7b2e1629009cee208450e1af" translate="yes" xml:space="preserve">
          <source>Formats the time to ensure compatibility with Netscape&amp;rsquo;s cookie standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c136d62d1c4f69dd116ca2d9bb3a75bf02ac82eb" translate="yes" xml:space="preserve">
          <source>Formats the time to match the RFC1123 date format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff9265babc80e38d0ab2c87cfe01fd3426d495a" translate="yes" xml:space="preserve">
          <source>From Werkzeug 0.3 onwards, the &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; raised by this class is also a subclass of the &lt;code&gt;BadRequest&lt;/code&gt; HTTP exception and will render a page for a &lt;code&gt;400 BAD REQUEST&lt;/code&gt; if caught in a catch-all for HTTP exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d301d4f2cab88455685f9efbee3fe2bfca9c9c" translate="yes" xml:space="preserve">
          <source>From Werkzeug 0.3 onwards, the &lt;code&gt;KeyError&lt;/code&gt; raised by this class is also a subclass of the &lt;code&gt;BadRequest&lt;/code&gt; HTTP exception and will render a page for a &lt;code&gt;400 BAD REQUEST&lt;/code&gt; if caught in a catch-all for HTTP exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ebfa3c2dc67827b0fa79647aababaf9a006a0f" translate="yes" xml:space="preserve">
          <source>Full featured request object implementing the following mixins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed875c75f80b950d09513cfd6779b76337fadf5a" translate="yes" xml:space="preserve">
          <source>Full featured response object implementing the following mixins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3448eb994496f946bf82b87e5bd0bf062d0b4fb8" translate="yes" xml:space="preserve">
          <source>Functions that do internal encoding or decoding accept an &lt;code&gt;errors&lt;/code&gt; keyword argument that is passed to &lt;code&gt;str.decode()&lt;/code&gt; and &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.encode&quot;&gt;&lt;code&gt;str.encode()&lt;/code&gt;&lt;/a&gt;. The default is &lt;code&gt;'replace'&lt;/code&gt; so that errors are easy to spot. It might be useful to set it to &lt;code&gt;'strict'&lt;/code&gt; in order to catch the error and report the bad data to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556026471c73b6d769eb0c756b7ce03eb112ab32" translate="yes" xml:space="preserve">
          <source>General Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae313cc97f019cc02b5747068e2416db0beed99a" translate="yes" xml:space="preserve">
          <source>General Purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83c33ef4d2e9e3ed07d0755efc755ab2f85d769" translate="yes" xml:space="preserve">
          <source>Generate an SSL key and store it somewhere:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b6e2cc17d2e46df1d4abef92a18dd40032a068" translate="yes" xml:space="preserve">
          <source>Generate an etag for some data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da44efcc01f0aa68d839dde5a7ae3e7c941c96a" translate="yes" xml:space="preserve">
          <source>Generating Certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72aedec775a6e14381523b18731a2959efcc8b04" translate="yes" xml:space="preserve">
          <source>Get a response object. If one was passed to the exception it&amp;rsquo;s returned directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168b3e928d9ada35cfbb1e0796af720fc2d4ae6b" translate="yes" xml:space="preserve">
          <source>Get the position of an entry or raise &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2469927cc42a3713f7b6435a4c4a84ebb3be37" translate="yes" xml:space="preserve">
          <source>Get the position of an entry or return -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829470aba8f36522f6e46952716147f1ef26676d" translate="yes" xml:space="preserve">
          <source>HTML Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61edfdccadd36945a92a1aeac638375cefe58848" translate="yes" xml:space="preserve">
          <source>HTTP Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e68a4f80a2d10695ad86c85f28389e0803b15ae" translate="yes" xml:space="preserve">
          <source>HTTP Proxying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c84f2069698816a651c6479f0b12a1a6bfa181" translate="yes" xml:space="preserve">
          <source>HTTP Related</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebc1859386e33f7e7927f6006d1f3f5641d40d4" translate="yes" xml:space="preserve">
          <source>HTTP Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1161df1732771abc1a7fbad5fa8efe208fec104" translate="yes" xml:space="preserve">
          <source>Handling for uploaded files is not much harder as you can see from this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6dd5634cb31ed9c369b753e77f146d5828241b" translate="yes" xml:space="preserve">
          <source>Hash a password with the given method and salt with a string of the given length. The format of the string returned includes the method that was used so that &lt;a href=&quot;#werkzeug.security.check_password_hash&quot;&gt;&lt;code&gt;check_password_hash()&lt;/code&gt;&lt;/a&gt; can check the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018dc56927d0644eae9da391fb421a98badd117c" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;../request_data/index#dealing-with-request-data&quot;&gt;Dealing with Request Data&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf1687d0ab4f2efb5658aa90a3908cc719619da" translate="yes" xml:space="preserve">
          <source>Header Parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f9b510fafaa902061a99e6a5bc014ac4ce8f36" translate="yes" xml:space="preserve">
          <source>Header Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e473d0de0e3f2bb87c91a46b32fbafa3f2c81e5" translate="yes" xml:space="preserve">
          <source>Headers is mostly compatible with the Python &lt;a href=&quot;https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers&quot;&gt;&lt;code&gt;wsgiref.headers.Headers&lt;/code&gt;&lt;/a&gt; class, with the exception of &lt;code&gt;__getitem__&lt;/code&gt;. &lt;a href=&quot;https://docs.python.org/3/library/wsgiref.html#module-wsgiref&quot;&gt;&lt;code&gt;wsgiref&lt;/code&gt;&lt;/a&gt; will return &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;headers['missing']&lt;/code&gt;, whereas &lt;a href=&quot;#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; will raise a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acafd8c92d8481f145fce016dc7cf22058c61d14" translate="yes" xml:space="preserve">
          <source>Helper object for HTML generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1f96826ff77653d240e7e8a0c20275704d0370" translate="yes" xml:space="preserve">
          <source>Here a small example WSGI application that takes advantage of the response objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a19594e1a91d76db62af186daef1aca5ad14833" translate="yes" xml:space="preserve">
          <source>Here a small example for such a rule template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29eca043aa7058065c6426d01d6fad1bfb8cea1" translate="yes" xml:space="preserve">
          <source>Here a small example for the dispatch usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578d30f39a15395cf3897103328f4c09475804b8" translate="yes" xml:space="preserve">
          <source>Here is a simple example which could be the URL definition for a blog:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac5cdc0eb5f2505f3ca7ef43067af7b055cc9a2" translate="yes" xml:space="preserve">
          <source>Here is a small example for matching:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec04fdd7f6c4b9c5a4653ecf88be06dbc5048b5" translate="yes" xml:space="preserve">
          <source>Here is how you would write that application with response objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d672a3ccc5eb0862bcf0efa206f8265432b5a0" translate="yes" xml:space="preserve">
          <source>Here we create a URL map with three rules. &lt;code&gt;/&lt;/code&gt; for the root of the URL space where we will just dispatch to a function that implements the logic to create a new URL. And then one that follows the short link to the target URL and another one with the same rule but a plus (&lt;code&gt;+&lt;/code&gt;) at the end to show the link details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e8ae69b444b75f94a55be6d48cd200d22f612c" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a simple example of how one could use werkzeug.local:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41499243188979745d497da4eb01e296d18cb394" translate="yes" xml:space="preserve">
          <source>High or Low?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335aa36a73511b120db2e4c023bbf071d59905ac" translate="yes" xml:space="preserve">
          <source>Host Matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa117936f31c5ed194b1e85f147273a4ec170bf" translate="yes" xml:space="preserve">
          <source>Host, with port if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb69f8a948ce351ee7629ce899e195cd7360d74" translate="yes" xml:space="preserve">
          <source>How does it Parse?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfde4e28b36130801e353b3412569d46787fa4f" translate="yes" xml:space="preserve">
          <source>How they Work</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0342fbf62e3dab7b725db47f002a8b9d47469d" translate="yes" xml:space="preserve">
          <source>How to extend Parsing?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d586b3fd4e8af711aa7e50f6d37a08db05f55eb" translate="yes" xml:space="preserve">
          <source>However, many WSGI servers add a non-standard environ key with the raw path. To match this behavior, Werkzeug&amp;rsquo;s test client and development server will add the raw value to both the &lt;code&gt;REQUEST_URI&lt;/code&gt; and &lt;code&gt;RAW_URI&lt;/code&gt; keys. If you want to route based on this value, you can use middleware to replace &lt;code&gt;PATH_INFO&lt;/code&gt; in the environ before it reaches the application. However, keep in mind that these keys are non-standard and not guaranteed to be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2960cb86a9f41be9be80495c78a73313197cab79" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://simplejson.readthedocs.io/en/latest/&quot;&gt;simplejson&lt;/a&gt; is installed it is preferred over Python&amp;rsquo;s built-in &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9845a5fc946c8f3338cbbe05abbc5af5947341e2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;True&lt;/code&gt;, this rule is only matches for WebSocket (&lt;code&gt;ws://&lt;/code&gt;, &lt;code&gt;wss://&lt;/code&gt;) requests. By default, rules will only match for HTTP requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c844f29923da60b3760a49fdfa670a08e7a602" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;as_text&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; the return value will be a decoded unicode string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3ba9072c47d241bd3d13e61eb933d9c626e020" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;direct_passthrough=True&lt;/code&gt; was passed to the response object or if this attribute was set to &lt;code&gt;True&lt;/code&gt; before using the response object as WSGI application, the wrapped iterator is returned unchanged. This makes it possible to pass a special &lt;code&gt;wsgi.file_wrapper&lt;/code&gt; to the response object. See &lt;code&gt;wrap_file()&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd2c38dd418ca83097eacc39edaf2f3fa8c640a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pkg_resources&lt;/code&gt; is available you can also tell the middleware to serve files from package data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156e805d82dfecd2e587813dd0897970b0496ff2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;shallow&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; the environment is initialized as shallow object around the environ. Every operation that would modify the environ in any way (such as consuming form data) raises an exception unless the &lt;code&gt;shallow&lt;/code&gt; attribute is explicitly set to &lt;code&gt;False&lt;/code&gt;. This is useful for middlewares where you don&amp;rsquo;t want to consume the form data by accident. A shallow request is not populated to the WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584612ea99b8eae56104ecc94351874a474acd0a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;silent&lt;/code&gt; is True the return value will be &lt;code&gt;None&lt;/code&gt; if the import fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753174aed4c139c67668f6a0fd2cf870832ef613" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;sort&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; the items are sorted by &lt;code&gt;key&lt;/code&gt; or the default sorting algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee3866a247715f00700a72e36cd4f4d3bf9fffe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;sort&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt; the items are sorted by &lt;code&gt;key&lt;/code&gt; or the default sorting algorithm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3b75fcd579c6d462b8b20587e67057b9278384" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;stream&lt;/code&gt; is given, &lt;a href=&quot;https://docs.python.org/3/library/profile.html#pstats.Stats&quot;&gt;&lt;code&gt;pstats.Stats&lt;/code&gt;&lt;/a&gt; are written to it after each request. If &lt;code&gt;profile_dir&lt;/code&gt; is given, &lt;a href=&quot;https://docs.python.org/3/library/profile.html#module-cProfile&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; data files are saved to that directory, one file per request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febae054ad2fbe760efec368422480d60b7ee152" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;subdomain&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; but an environment and a server name is provided it will calculate the current subdomain automatically. Example: &lt;code&gt;server_name&lt;/code&gt; is &lt;code&gt;'example.com'&lt;/code&gt; and the &lt;code&gt;SERVER_NAME&lt;/code&gt; in the wsgi &lt;code&gt;environ&lt;/code&gt; is &lt;code&gt;'staging.dev.example.com'&lt;/code&gt; the calculated subdomain will be &lt;code&gt;'staging.dev'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cec2ad7b7dc9a08e1d9d80142bff5e8cfbbe425" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; are missing in the form, a special key error will be raised which behaves like a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; but also a &lt;a href=&quot;#werkzeug.exceptions.BadRequest&quot;&gt;&lt;code&gt;BadRequest&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f24e62a1ecc73468addfee04e7fa2a7b9bb10b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;watchdog&lt;/code&gt; is installed and available it will automatically be used instead of the builtin &lt;code&gt;stat&lt;/code&gt; reloader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39c93275dbf66eba4f86ad8c9320a7c8b8bc1e9" translate="yes" xml:space="preserve">
          <source>If False, read() will raise OSError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd13d5312d07f931d0ae8bb132bf55509768256" translate="yes" xml:space="preserve">
          <source>If PBKDF2 is wanted it can be enabled by setting the method to &lt;code&gt;pbkdf2:method:iterations&lt;/code&gt; where iterations is optional:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2e50fc0f377b71a07c1ca987d1c1414105e995" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;#werkzeug.routing.Rule&quot;&gt;&lt;code&gt;Rule&lt;/code&gt;&lt;/a&gt; is created with &lt;code&gt;websocket=True&lt;/code&gt;, it will only match if the &lt;a href=&quot;#werkzeug.routing.Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; is bound to a request with a &lt;code&gt;url_scheme&lt;/code&gt; of &lt;code&gt;ws&lt;/code&gt; or &lt;code&gt;wss&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2017347d400731bfc3ae058ddf88241bc611f5" translate="yes" xml:space="preserve">
          <source>If a forwarded header exists this is a list of all ip addresses from the client ip to the last proxy server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e96400a1fbfd129d2e1728d1df2d44219715be3" translate="yes" xml:space="preserve">
          <source>If a headers object is bound you must not add unicode strings because no encoding takes place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b582fe231e75c2d91b52c535bbed898195e9a6" translate="yes" xml:space="preserve">
          <source>If a request object is not yet set on the local object and you try to access it, you will get an &lt;code&gt;AttributeError&lt;/code&gt;. You can use &lt;code&gt;getattr&lt;/code&gt; to avoid that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc15ff7d77383cfa344e9807957de48fd835905b" translate="yes" xml:space="preserve">
          <source>If a rule does not exist when building a &lt;code&gt;BuildError&lt;/code&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a197226271fe81f7dade0b72531879b4bb656e0f" translate="yes" xml:space="preserve">
          <source>If a status code is given, it will be looked up in the list of exceptions and will raise that exception. If passed a WSGI application, it will wrap it in a proxy WSGI exception and raise that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7556854c27e68f2191d5fb4d74e2448b31f728e9" translate="yes" xml:space="preserve">
          <source>If a string is provided as data (or an input stream) you have to specify the content type yourself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf33b63ce18b85ec59aed61fc76c8d48bbd061d" translate="yes" xml:space="preserve">
          <source>If a user now visits &lt;code&gt;http://example.com/all/page/1&lt;/code&gt; he will be redirected to &lt;code&gt;http://example.com/all/&lt;/code&gt;. If &lt;code&gt;redirect_defaults&lt;/code&gt; is disabled on the &lt;code&gt;Map&lt;/code&gt; instance this will only affect the URL generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b32484cc16688a8642113370708d1672ffb62f9" translate="yes" xml:space="preserve">
          <source>If all other deployment methods do not work, CGI will work for sure. CGI is supported by all major servers but usually has a less-than-optimal performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981a24bf7f4c3913a541404d84f892ae916ba7e6" translate="yes" xml:space="preserve">
          <source>If all works well, we call the function &lt;code&gt;on_&lt;/code&gt; + endpoint and pass it the request as argument as well as all the URL arguments as keyword arguments and return the response object that method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3805283d1e71b338f00feac52b3fe6d76701fd5e" translate="yes" xml:space="preserve">
          <source>If an incorrect PIN is entered too many times the server needs to be restarted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad4552c5c7fca3ac2cc8893ef7b4cf8e5922693" translate="yes" xml:space="preserve">
          <source>If any of the arguments (positional or keyword) evaluates to &lt;code&gt;None&lt;/code&gt; it will be skipped. If no keyword arguments are given the last argument can be a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;MultiDict&lt;/code&gt; (or any other dict subclass), otherwise the keyword arguments are used for the query parameters, cutting off the first trailing underscore of the parameter name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e55cc790589194350979ad12021e5bb1c8bb4a1" translate="yes" xml:space="preserve">
          <source>If content length is not set, the stream will be empty for safety reasons. If the WSGI server supports chunked or infinite streams, it should set the &lt;code&gt;wsgi.input_terminated&lt;/code&gt; value in the WSGI environ to indicate that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721a7b2513f81ff61763e48739de63f3527cdc54" translate="yes" xml:space="preserve">
          <source>If enabled this rule serves as an alias for another rule with the same endpoint and arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7544f4cbbf3d65e02775eb2e2b998ace5c5f98b" translate="yes" xml:space="preserve">
          <source>If given this must be either a string or callable. In case of a callable it&amp;rsquo;s called with the url adapter that triggered the match and the values of the URL as keyword arguments and has to return the target for the redirect, otherwise it has to be a string with placeholders in rule syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28bb14391205b90b0f853f1e4d130cbcdfe25b1b" translate="yes" xml:space="preserve">
          <source>If headers appear multiple times you can use the &lt;code&gt;getlist()&lt;/code&gt; method to get all values for a header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c9b2181f411b6054351cd1e42ebf8c58c886fa" translate="yes" xml:space="preserve">
          <source>If it does not match anything, it will raise a &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.NotFound&quot;&gt;&lt;code&gt;NotFound&lt;/code&gt;&lt;/a&gt; exception, which is an &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt;. All HTTP exceptions are also WSGI applications by themselves which render a default error page. So we just catch all of them down and return the error itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff94f1f67704cb0dde67699c73731c4b0165dbd" translate="yes" xml:space="preserve">
          <source>If it is a callable, it will be called with the WSGI &lt;code&gt;environ&lt;/code&gt; dict and should return a filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d677821f3476eabfc35ad42dca7d66abd9c9d7" translate="yes" xml:space="preserve">
          <source>If no path_info is passed to &lt;code&gt;match()&lt;/code&gt; it will use the default path info passed to bind. While this doesn&amp;rsquo;t really make sense for manual bind calls, it&amp;rsquo;s useful if you bind a map to a WSGI environment which already contains the path info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598cfe7e1457d08883919398761f276bc72addb5" translate="yes" xml:space="preserve">
          <source>If not constructed using the &lt;code&gt;parse_set_header()&lt;/code&gt; function the instantiation works like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7fe6dfb9516b4365c16381e6c60e7b49568567" translate="yes" xml:space="preserve">
          <source>If parsing fails the return value is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5796b30d9e6fa8b8eb7ffe1b0499021c2d4da81" translate="yes" xml:space="preserve">
          <source>If parsing fails, &lt;a href=&quot;#werkzeug.wrappers.json.JSONMixin.on_json_loading_failed&quot;&gt;&lt;code&gt;on_json_loading_failed()&lt;/code&gt;&lt;/a&gt; is called and its return value is used as the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a0ec949585f5432e2d2230ba14b7abe60cea52" translate="yes" xml:space="preserve">
          <source>If passed an invalid WSGI application the behavior of this function is undefined. Never pass non-conforming WSGI applications to this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6035f9f5b9c9e745b376595c8fb8a05984db536c" translate="yes" xml:space="preserve">
          <source>If provided and the URL map has host matching enabled this can be used to provide a match rule for the whole host. This also means that the subdomain feature is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150329e776388bb3760f5be6bc918a3c907244ea" translate="yes" xml:space="preserve">
          <source>If provided, the first argument can be another &lt;a href=&quot;#werkzeug.datastructures.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; object, a &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;, or iterable of pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9579fba360509659163643fff7d7a7cbd7cd13" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;charset&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt; a bytestring is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff6fd789c75ef2443e848b1173a74c5a93558f6" translate="yes" xml:space="preserve">
          <source>If the URL does not point to a local file, the server and location are both represented as &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356791ab3bfd102977e64c2050fb0d34c3d812c4" translate="yes" xml:space="preserve">
          <source>If the charset is set to &lt;code&gt;None&lt;/code&gt; no unicode decoding will happen and raw bytes will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70d472ebbf23f91a40826ea0e5c4da0f8ddfe1b" translate="yes" xml:space="preserve">
          <source>If the file wrapper from the WSGI server is used it&amp;rsquo;s important to not iterate over it from inside the application but to pass it through unchanged. If you want to pass out a file wrapper inside a response object you have to set &lt;code&gt;direct_passthrough&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70847af275a0e8d291b9ceb7d12ee871f5b0cdf1" translate="yes" xml:space="preserve">
          <source>If the incoming form data was not encoded with a known mimetype the data is stored unmodified in this stream for consumption. Most of the time it is a better idea to use &lt;a href=&quot;#werkzeug.wrappers.BaseRequest.data&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt; which will give you that data as a string. The stream only returns the data once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1157bdf5a9a024748afb34207d07809b772567f6" translate="yes" xml:space="preserve">
          <source>If the iterator is buffered, this property will be &lt;code&gt;True&lt;/code&gt;. A response object will consider an iterator to be buffered if the response attribute is a list or tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b266bdcfb81c702d9388b510b56c557548e35d0c" translate="yes" xml:space="preserve">
          <source>If the logger level is not set, it will be set to &lt;code&gt;INFO&lt;/code&gt; on first use. If there is no handler for that level, a &lt;a href=&quot;https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler&quot;&gt;&lt;code&gt;StreamHandler&lt;/code&gt;&lt;/a&gt; is added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3453b0ae1cb9ef7b6917854b5d4f93e0b23aa91d" translate="yes" xml:space="preserve">
          <source>If the mimetype does not indicate JSON (&lt;em&gt;application/json&lt;/em&gt;, see &lt;a href=&quot;#werkzeug.wrappers.json.JSONMixin.is_json&quot;&gt;&lt;code&gt;is_json()&lt;/code&gt;&lt;/a&gt;), this returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f1ed92a4c6c02fe256e5884c5da59a349bb73b" translate="yes" xml:space="preserve">
          <source>If the mimetype of the data transmitted is &lt;code&gt;multipart/form-data&lt;/code&gt; the files multidict will be filled with &lt;code&gt;FileStorage&lt;/code&gt; objects. If the mimetype is unknown the input stream is wrapped and returned as first argument, else the stream is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b8da4c2ce772d3e8d13b8e3021f3d94b96fed4" translate="yes" xml:space="preserve">
          <source>If the object passed as environ has an environ attribute, the value of this attribute is used instead. This allows you to pass request objects. Additionally &lt;code&gt;PATH_INFO&lt;/code&gt; added as a default of the &lt;a href=&quot;#werkzeug.routing.MapAdapter&quot;&gt;&lt;code&gt;MapAdapter&lt;/code&gt;&lt;/a&gt; so that you don&amp;rsquo;t have to pass the path info to the match method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384e800564241196994772c838177c222601cd01" translate="yes" xml:space="preserve">
          <source>If the only match is a WebSocket rule and the bind is HTTP (or the only match is HTTP and the bind is WebSocket) a &lt;code&gt;WebsocketMismatch&lt;/code&gt; (derives from &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.BadRequest&quot;&gt;&lt;code&gt;BadRequest&lt;/code&gt;&lt;/a&gt;) exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e26494c3b96b76b84b5dc6a19ed19416b12729" translate="yes" xml:space="preserve">
          <source>If the path info could not be determined, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d10d0090aecc86427ad94899cd354f279a8c41a" translate="yes" xml:space="preserve">
          <source>If the path info is not passed to the match method the default path info of the map is used (defaults to the root URL if not defined explicitly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3767de84230d1c5d8613d04fca0f50f41d36a7a5" translate="yes" xml:space="preserve">
          <source>If the range is for bytes, the length is not None and there is exactly one range and it is satisfiable it returns a &lt;code&gt;(start, stop)&lt;/code&gt; tuple, otherwise &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee3ab282a11af2c8f3a3c3ca8f3792adecb4beb" translate="yes" xml:space="preserve">
          <source>If the request method is &lt;code&gt;HEAD&lt;/code&gt; or the status code is in a range where the HTTP specification requires an empty response, an empty iterable is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a4c1cefb3c4b635fc9a70efa0fbff020c61d68" translate="yes" xml:space="preserve">
          <source>If the response is streamed (the response is not an iterable with a length information) this property is &lt;code&gt;True&lt;/code&gt;. In this case streamed means that there is no information about the number of iterations. This is usually &lt;code&gt;True&lt;/code&gt; if a generator is passed to the response object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5084b5cf5bcd60db656131247731104b426758d9" translate="yes" xml:space="preserve">
          <source>If the server sent a qop-header in the &lt;code&gt;WWW-Authenticate&lt;/code&gt; header, the client has to provide this value for HTTP digest auth. See the RFC for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189f531ed92f7cd88bf7da7df370d310c8dfb19d" translate="yes" xml:space="preserve">
          <source>If the server supports user authentication, and the script is protected, this attribute contains the username the user has authenticated as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da23ecad1c231af828ea4a2b3cafdb56389a39e" translate="yes" xml:space="preserve">
          <source>If the stream is exhausted this attribute is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a57c33139db28f641cef61e9c7c16f79fa0e820" translate="yes" xml:space="preserve">
          <source>If the value list for a key in &lt;code&gt;other_dict&lt;/code&gt; is empty, no new values will be added to the dict and the key will not be created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f537ee89d64bc5be52ccce232baed1b56db6d8ad" translate="yes" xml:space="preserve">
          <source>If there are empty segments (&lt;code&gt;'/foo//bar&lt;/code&gt;) these are ignored but properly pushed to the &lt;code&gt;SCRIPT_NAME&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5496093f0e30b9907e19050d44df2ec70635447d" translate="yes" xml:space="preserve">
          <source>If there is just one close function it can be passed instead of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f64abf5f8abc9763274706ad9f2570632918c64" translate="yes" xml:space="preserve">
          <source>If there is no value for a key it will be &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf2c255267eaab45b5164cf2440ffd447e1934b" translate="yes" xml:space="preserve">
          <source>If you are on Mac OS X or Windows, download &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot;&gt;get-pip.py&lt;/a&gt;, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e526dcc49e96be83c12010e8e0176ba330eb9b2" translate="yes" xml:space="preserve">
          <source>If you are on Ubuntu or Debian, you can use apt-get:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1301e76529988fd7ec0d3948f88a15ca5752ced0" translate="yes" xml:space="preserve">
          <source>If you are using Python 2, the venv module is not available. Instead, install &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;virtualenv&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc83f48447e952b93c0c98317102a19a7fa08797" translate="yes" xml:space="preserve">
          <source>If you are using pkgsrc you can install &lt;code&gt;mod_wsgi&lt;/code&gt; by compiling the &lt;code&gt;www/ap2-wsgi&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51855ecf8284e3e441a4f84cc1c1aa9163b7d4ad" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; webserver you should consider using &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/&quot;&gt;mod_wsgi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f48a48139bc68d6ca0e6a8c6504ba962324a810" translate="yes" xml:space="preserve">
          <source>If you are using ubuntu / debian you can apt-get it and activate it as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7f8ab8cc6e33628188f96fe0e1425e80be2b7e" translate="yes" xml:space="preserve">
          <source>If you click on the &amp;ldquo;Traceback (most recent call last)&amp;rdquo; header, the view switches to a tradition text-based traceback. The text can be copied, or automatically pasted to &lt;a href=&quot;https://gist.github.com&quot;&gt;gist.github.com&lt;/a&gt; with one click.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6178a6f8593e4247fd8704cee6988726e9c02f3d" translate="yes" xml:space="preserve">
          <source>If you do proxying in your application you should return this status code if you received an invalid response from the upstream server it accessed in attempting to fulfill the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e64177702145ca9e5edc792182c250e5b830cd7" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have &lt;code&gt;mod_wsgi&lt;/code&gt; installed yet you have to either install it using a package manager or compile it yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93adc1acab49b259cd32ddebada6e47f2af38a4a" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have a factory function for application creation but a singleton instance you can directly import that one as &lt;code&gt;application&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307e23c151f057568c502436acc39ac4abd781bc" translate="yes" xml:space="preserve">
          <source>If you encounter segfaulting child processes after the first apache reload you can safely ignore them. Just restart the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1bac5eeef2121ba7e3657fdec991d7f1ed9e95f" translate="yes" xml:space="preserve">
          <source>If you have the &lt;code&gt;evalex&lt;/code&gt; feature enabled you can get a console for every frame in the traceback by hovering over a frame and clicking the console icon that appears at the right. Once clicked a console opens where you can execute Python code in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2b66f5c6733887540b0fef8c6360b01ba4b0d1" translate="yes" xml:space="preserve">
          <source>If you need line-by-line processing it&amp;rsquo;s strongly recommended to iterate over the input stream using this helper function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255e8392ae3025cd615255713496b4adad8c40ad" translate="yes" xml:space="preserve">
          <source>If you needed to install virtualenv because you are on an older version of Python, use the following command instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ef3710c1d1e930434abdc1ca8c40e03cf94b3b" translate="yes" xml:space="preserve">
          <source>If you notice that the web browser takes ages to load the page there are two ways around this issue. If you don&amp;rsquo;t need ipv6 support you can disable the ipv6 entry in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hosts_file&quot;&gt;hosts file&lt;/a&gt; by removing this line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48fdfff5aa57f7e68d3d87896f94f5be84a3cff" translate="yes" xml:space="preserve">
          <source>If you now start the file the server will listen on &lt;code&gt;localhost:8080&lt;/code&gt;. Keep in mind that WSGI applications behave slightly different for proxied setups. If you have not developed your application for proxying in mind, you can apply the &lt;a href=&quot;../../middleware/proxy_fix/index#werkzeug.middleware.proxy_fix.ProxyFix&quot;&gt;&lt;code&gt;ProxyFix&lt;/code&gt;&lt;/a&gt; middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253c7c291e33158671a3689f11f2060fa98754d7" translate="yes" xml:space="preserve">
          <source>If you pass it a second value it&amp;rsquo;s used as default if the key does not exist, the third one can be a converter that takes a value and converts it. If it raises &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; the default value is used. If no default value is provided &lt;code&gt;None&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fbf3f3b43915de9db91a368c459e5a7ba520aa" translate="yes" xml:space="preserve">
          <source>If you want the &lt;a href=&quot;#werkzeug.wrappers.ETagResponseMixin.freeze&quot;&gt;&lt;code&gt;freeze()&lt;/code&gt;&lt;/a&gt; method to automatically add an etag, you have to mixin this method before the response base class. The default response class does not do that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c07ec66ab6f7b6a2441fbd79fae5964cbccd47c" translate="yes" xml:space="preserve">
          <source>If you want to add an error yourself you can subclass &lt;a href=&quot;#werkzeug.exceptions.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf6be9502a51346b5ef92eab39710a5919fa03c" translate="yes" xml:space="preserve">
          <source>If you want to change the default converter, assign a different converter to the &lt;code&gt;&quot;default&quot;&lt;/code&gt; key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4207706497dc13bd7e003215557242959c4225" translate="yes" xml:space="preserve">
          <source>If you want to hook in a different exception page to say, a 404 status code, you can add a second except for a specific subclass of an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6e319dbbaeb8c491639dcc19ba7fead77c3740" translate="yes" xml:space="preserve">
          <source>If you want to request some subdomain of your application you may set &lt;code&gt;allow_subdomain_redirects&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; as if not no external redirects are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b9acbac51c811253d31080045e78343bbd7a4a" translate="yes" xml:space="preserve">
          <source>If you want to use this functionality with custom exceptions you can create an instance of the aborter class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f085dbedc18518e01bdd478b53ace7d509f0ef" translate="yes" xml:space="preserve">
          <source>If you want to work with the latest Werkzeug code before it&amp;rsquo;s released, install or update the code from the master branch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccae9c5bd1ba23ad165b9444b2a34509b23d590" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re running Python 2.4 you will need the &lt;a href=&quot;https://docs.python.org/3/library/wsgiref.html#module-wsgiref&quot;&gt;&lt;code&gt;wsgiref&lt;/code&gt;&lt;/a&gt; package. Python 2.5 and higher ship this as part of the standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4352e0a01e2fd8539ca434fb09c91e01ec7715" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using Python 2, see &lt;a href=&quot;#install-install-virtualenv&quot;&gt;Install virtualenv&lt;/a&gt; first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7016902343cb4a99886bcb1057f4f494d082e3d8" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using this object together with a &lt;code&gt;BaseResponse&lt;/code&gt; you have to use the &lt;code&gt;direct_passthrough&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d38af98c8de44bdd1ea2a0a368920a4f3667a63" translate="yes" xml:space="preserve">
          <source>Implements a callable that constructs URLs with the given base. The function can be called with any number of positional and keyword arguments which than are used to assemble the URL. Works with URLs and posix paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f395f839428f0c86315bae6414c13de5bea46a" translate="yes" xml:space="preserve">
          <source>Important Terms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519cccbf47715d801f5519c99bbfa55211b46ad6" translate="yes" xml:space="preserve">
          <source>Imports an object based on a string. This is useful if you want to use import paths as endpoints or something similar. An import path can be specified either in dotted notation (&lt;code&gt;xml.sax.saxutils.escape&lt;/code&gt;) or with a colon as object delimiter (&lt;code&gt;xml.sax.saxutils:escape&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a5ea37263b944a61e38640d617b8d1b66fb8a4" translate="yes" xml:space="preserve">
          <source>In Apache for example you can put something like this into the config:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e505cd99a8399ff8c8bd9c0bcc462573cb12fe45" translate="yes" xml:space="preserve">
          <source>In Python 2 there are two basic string types: &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;unicode&lt;/code&gt;. &lt;code&gt;str&lt;/code&gt; may carry encoded unicode data but it&amp;rsquo;s always represented in bytes whereas the &lt;code&gt;unicode&lt;/code&gt; type does not contain bytes but charpoints. What does this mean? Imagine you have the German Umlaut &lt;code&gt;&amp;ouml;&lt;/code&gt;. In ASCII you cannot represent that character, but in the &lt;code&gt;latin-1&lt;/code&gt; and &lt;code&gt;utf-8&lt;/code&gt; character sets you can represent it, but they look differently when encoded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f24fb76606843ab70bebcb3b30ea010f8d37c96" translate="yes" xml:space="preserve">
          <source>In Python 2.7.9 and 3+ you also have the option to use a &lt;code&gt;ssl.SSLContext&lt;/code&gt; object instead of a simple tuple. This way you have better control over the SSL behavior of Werkzeug&amp;rsquo;s builtin server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a52f673ce0d4271ef9bc37157346e03d894a7b" translate="yes" xml:space="preserve">
          <source>In general an &lt;a href=&quot;#werkzeug.datastructures.OrderedMultiDict&quot;&gt;&lt;code&gt;OrderedMultiDict&lt;/code&gt;&lt;/a&gt; is an order of magnitude slower than a &lt;a href=&quot;#werkzeug.datastructures.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7a72cbaed0420fab1f8b74f9151ab31d0b6f37" translate="yes" xml:space="preserve">
          <source>In particular, parse comma-separated lists where the elements of the list may include quoted-strings. A quoted-string could contain a comma. A non-quoted string could have quotes in the middle. Quotes are removed automatically after parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b62bab89295896e4ab95d350a9b6edca86bfe83" translate="yes" xml:space="preserve">
          <source>In production, you might instead handle this at the HTTP server level, serving files or proxying to application servers based on location. The API and admin apps would each be deployed with a separate WSGI server, and the static files would be served directly by the HTTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faed52d634886b18a399fde9d9b3944d679f3f42" translate="yes" xml:space="preserve">
          <source>In the example above, everything under &lt;code&gt;&quot;/static/&quot;&lt;/code&gt; is proxied to the server on port 5001. The host header is rewritten to the target, and the &lt;code&gt;&quot;/static/&quot;&lt;/code&gt; prefix is removed from the URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b440104f90df9d116fde6374a12a85ced9cae9" translate="yes" xml:space="preserve">
          <source>In this case the error seems to be &amp;ldquo;yourapplication&amp;rdquo; not being on the python path. Common problems are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13b1e53f9c8b54b66c3b2f689f7e59c5c1c661c" translate="yes" xml:space="preserve">
          <source>In this case we will raise a &lt;a href=&quot;../exceptions/index#werkzeug.exceptions.NotFound&quot;&gt;&lt;code&gt;NotFound&lt;/code&gt;&lt;/a&gt; exception by hand if the URL does not exist, which will bubble up to the &lt;code&gt;dispatch_request&lt;/code&gt; function and be converted into a default 404 response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f82944e7b2a5b50e38e4969e5af21f5caa939e0" translate="yes" xml:space="preserve">
          <source>In this tutorial, we will together create a simple URL shortener service with Werkzeug. Please keep in mind that Werkzeug is not a framework, it&amp;rsquo;s a library with utilities to create your own framework or application and as such is very flexible. The approach we use here is just one of many you can use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b480d209ffb34087ad3dbe313257591893c9776" translate="yes" xml:space="preserve">
          <source>Indicates what &amp;ldquo;quality of protection&amp;rdquo; the client has applied to the message for HTTP digest auth. Note that this is a single token, not a quoted list of alternatives as in WWW-Authenticate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b67a7c22befdaa6f97d7040d810bd098812891" translate="yes" xml:space="preserve">
          <source>Indicates whether the data descriptor should be allowed to read and buffer up the input stream. By default it&amp;rsquo;s enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="translated">Information</target>
        </trans-unit>
        <trans-unit id="c49588a703450fad8d6aeca8c96dcab5f27e6538" translate="yes" xml:space="preserve">
          <source>Inside the WSGI application we bind the url_map to the current request which will return a new &lt;a href=&quot;#werkzeug.routing.MapAdapter&quot;&gt;&lt;code&gt;MapAdapter&lt;/code&gt;&lt;/a&gt;. This url_map adapter can then be used to match or build domains for the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0691d7ad5907939c2c0c2ab05e98a22c4ab713af" translate="yes" xml:space="preserve">
          <source>Inside the interactive consoles you can execute any kind of Python code. Unlike regular Python consoles the output of the object reprs is colored and stripped to a reasonable size by default. If the output is longer than what the console decides to display a small plus sign is added to the repr and a click will expand the repr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5035f468c1f6363d3d566ac69b60565c4d45089f" translate="yes" xml:space="preserve">
          <source>Install Werkzeug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a2fe893379aaaec5ddffb5993f865752d22f2d" translate="yes" xml:space="preserve">
          <source>Install virtualenv</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="b28f439e75dbd5a89b725b68fbf81a16ed5ed4b2" translate="yes" xml:space="preserve">
          <source>Installing &lt;code&gt;mod_wsgi&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2220a25a795b04e4e7f318e668b613bafa43b19c" translate="yes" xml:space="preserve">
          <source>Installing FastCGI applications on nginx is a bit tricky because by default some FastCGI parameters are not properly forwarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042e4b5e2fa64a8d0b7afe2e28354bd8e2fe629b" translate="yes" xml:space="preserve">
          <source>Instead of providing a base URL you can also pass a WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8d8e35613632fc46687b320bb66a9b560d5d03" translate="yes" xml:space="preserve">
          <source>Intermezzo: Running the Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66af396b9b63d620f152f87d9e481bcfb8a1109" translate="yes" xml:space="preserve">
          <source>Internal exception that is raised if Werkzeug detects a disconnected client. Since the client is already gone at that point attempting to send the error message to the client might not work and might ultimately result in another exception in the server. Mainly this is here so that it is silenced by default as far as Werkzeug is concerned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52ea62b753cf73ab4f65fd7ce35401dc7447cb1" translate="yes" xml:space="preserve">
          <source>Internally called to make an alias redirect URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c5c0f7f2bcf0ce76af071dc92f276c0dcbd74a" translate="yes" xml:space="preserve">
          <source>Introducing Shortly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5526a234756279725a65b888bf9d0d922de84be0" translate="yes" xml:space="preserve">
          <source>Invalidates the cache for a &lt;a href=&quot;#werkzeug.utils.cached_property&quot;&gt;&lt;code&gt;cached_property&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1df59d662f70f7637c2a85444847abd66155e2" translate="yes" xml:space="preserve">
          <source>It also tells you that the reloader is active. It will use various techniques to figure out if any file changed on the disk and then automatically restart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7533cc7c14a96216041816b04b2a708c3ca7bfdb" translate="yes" xml:space="preserve">
          <source>It basically behaves like a standard file object you know from Python, with the difference that it also has a &lt;a href=&quot;../datastructures/index#werkzeug.datastructures.FileStorage.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; function that can store the file on the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce5b5b9e6418499ba912394840efac9440f5fd9" translate="yes" xml:space="preserve">
          <source>It basically works like &lt;a href=&quot;#werkzeug.http.parse_set_header&quot;&gt;&lt;code&gt;parse_set_header()&lt;/code&gt;&lt;/a&gt; just that items may appear multiple times and case sensitivity is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2740b2dbc2e27cf35290a5a6d286af545c221b45" translate="yes" xml:space="preserve">
          <source>It behaves like a normal dict thus all dict functions will only return the first value when multiple values for one key are found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e558391e9164b121fdbcffed6df40195f3705c85" translate="yes" xml:space="preserve">
          <source>It can implement a &lt;code&gt;to_python&lt;/code&gt; method to convert the matched string to some other object. This can also do extra validation that wasn&amp;rsquo;t possible with the &lt;code&gt;regex&lt;/code&gt; attribute, and should raise a &lt;code&gt;werkzeug.routing.ValidationError&lt;/code&gt; in that case. Raising any other errors will cause a 500 error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8652f1b44aa78f9d12f97cdbae4dd57927d06a64" translate="yes" xml:space="preserve">
          <source>It can implement a &lt;code&gt;to_url&lt;/code&gt; method to convert a Python object to a string when building a URL. Any error raised here will be converted to a &lt;code&gt;werkzeug.routing.BuildError&lt;/code&gt; and eventually cause a 500 error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a225bdb19ff3ea4d95b6db7d89770f534aa22f" translate="yes" xml:space="preserve">
          <source>It does not remove the body of the response because that&amp;rsquo;s something the &lt;code&gt;__call__()&lt;/code&gt; function does for us automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9d6654623c97ac28e7af7f2ff52f06eb456de9" translate="yes" xml:space="preserve">
          <source>It looks something along these lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9caf36d0e72e4e788e5d742585375d9a471da1e0" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a good idea to create a custom subclass of the &lt;a href=&quot;#werkzeug.wrappers.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; and add missing functionality either via mixins or direct implementation. Here an example for such subclasses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7eebd6f8f1b87b4478a8bd7bbdccea5d3a448fd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s not possible to pickle the request object.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
