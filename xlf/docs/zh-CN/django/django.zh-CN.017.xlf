<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="5e7438331562a2f457b2132529b4ab943bed42b5" translate="yes" xml:space="preserve">
          <source>Troubleshooting: &lt;code&gt;gettext()&lt;/code&gt; incorrectly detects &lt;code&gt;python-format&lt;/code&gt; in strings with percent signs</source>
          <target state="translated">故障排除： &lt;code&gt;gettext()&lt;/code&gt; 错误地检测到带有百分号的字符串中的 &lt;code&gt;python-format&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e21f2d7a5745961469790892ce6f150553e93d8" translate="yes" xml:space="preserve">
          <source>True if this is the first time through the loop</source>
          <target state="translated">如果这是第一次通过循环,则为真。</target>
        </trans-unit>
        <trans-unit id="1aa1b998942a0c8319a693bf4a7c87da0b06a08e" translate="yes" xml:space="preserve">
          <source>True if this is the last time through the loop</source>
          <target state="translated">如果这是最后一次通过循环,则为真。</target>
        </trans-unit>
        <trans-unit id="dd86d9bcf9b606458b609c3325381daa634757e1" translate="yes" xml:space="preserve">
          <source>True spatial indexes (R-trees) are only supported with MyISAM tables on MySQL. &lt;a href=&quot;#fnmysqlidx&quot; id=&quot;id3&quot;&gt;[4]&lt;/a&gt; In other words, when using MySQL spatial extensions you have to choose between fast spatial lookups and the integrity of your data &amp;ndash; MyISAM tables do not support transactions or foreign key constraints.</source>
          <target state="translated">真正的空间索引（R树）仅在MySQL上的MyISAM表中受支持。&lt;a href=&quot;#fnmysqlidx&quot; id=&quot;id3&quot;&gt;[4]&lt;/a&gt;换句话说，在使用MySQL空间扩展时，您必须在快速空间查找和数据完整性之间进行选择&amp;ndash; MyISAM表不支持事务或外键约束。</target>
        </trans-unit>
        <trans-unit id="806c6d594fab8992021d41496eeee5d6e7a4bedf" translate="yes" xml:space="preserve">
          <source>Truncates a date up to a significant component.</source>
          <target state="translated">将一个日期截断到一个重要的部分。</target>
        </trans-unit>
        <trans-unit id="d38b00a2f83e97634b57a7cf99eb5016799d9c0b" translate="yes" xml:space="preserve">
          <source>Truncates a string after a certain number of words.</source>
          <target state="translated">在一定的字数后截断一个字符串。</target>
        </trans-unit>
        <trans-unit id="fa00b8e91b9d4dde4cc5dc072688fd9ba27ffdf1" translate="yes" xml:space="preserve">
          <source>Truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis character (&amp;ldquo;&amp;hellip;&amp;rdquo;).</source>
          <target state="translated">如果字符串长于指定的字符数，则将其截断。截断的字符串将以可翻译的省略号（&amp;ldquo;&amp;hellip;&amp;rdquo;）结尾。</target>
        </trans-unit>
        <trans-unit id="c8b58467aa1abac43bff02bf205defa26c158c2b" translate="yes" xml:space="preserve">
          <source>Truncates to midnight on the Monday of the week.</source>
          <target state="translated">截断到每周一的午夜。</target>
        </trans-unit>
        <trans-unit id="4bb0c0d7b2719dd08a282d13a8fbac631466b8b1" translate="yes" xml:space="preserve">
          <source>Try &lt;code&gt;ogrinspect&lt;/code&gt;</source>
          <target state="translated">尝试 &lt;code&gt;ogrinspect&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b7ccca3ceae5c83ff288cc4eb0abc220de47e8b" translate="yes" xml:space="preserve">
          <source>Try building your package with &lt;code&gt;python setup.py sdist&lt;/code&gt; (run from inside &lt;code&gt;django-polls&lt;/code&gt;). This creates a directory called &lt;code&gt;dist&lt;/code&gt; and builds your new package, &lt;code&gt;django-polls-0.1.tar.gz&lt;/code&gt;.</source>
          <target state="translated">尝试使用 &lt;code&gt;python setup.py sdist&lt;/code&gt; 构建软件包（从 &lt;code&gt;django-polls&lt;/code&gt; 内部运行）。这将创建一个名为 &lt;code&gt;dist&lt;/code&gt; 的目录，并构建新软件包 &lt;code&gt;django-polls-0.1.tar.gz&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81d1a0a5d7fa3f602c181827b8e6e45df5684d9d" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/index/&quot;&gt;FAQ&lt;/a&gt; &amp;ndash; it&amp;rsquo;s got answers to many common questions.</source>
          <target state="translated">尝试&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/index/&quot;&gt;常见问题解答&lt;/a&gt; -它可以回答许多常见问题。</target>
        </trans-unit>
        <trans-unit id="321970e706a6249a3bc91096b41c224f0e9837e7" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/index/&quot;&gt;FAQ&lt;/a&gt; &amp;ndash; it&amp;rsquo;s got answers to many common questions.</source>
          <target state="translated">尝试&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/faq/index/&quot;&gt;常见问题解答&lt;/a&gt;-它可以回答许多常见问题。</target>
        </trans-unit>
        <trans-unit id="6b72362907fdcf8f8383ea35245756dd8c92376e" translate="yes" xml:space="preserve">
          <source>Turns a Django template into something that is understood by &lt;code&gt;xgettext&lt;/code&gt;. It does so by translating the Django translation tags into standard &lt;code&gt;gettext&lt;/code&gt; function invocations.</source>
          <target state="translated">将Django模板转换为 &lt;code&gt;xgettext&lt;/code&gt; 可以理解的东西。通过将Django翻译标签转换为标准的 &lt;code&gt;gettext&lt;/code&gt; 函数调用来实现。</target>
        </trans-unit>
        <trans-unit id="7dc01edfef659ca9656de153951cd03b7f04f6b7" translate="yes" xml:space="preserve">
          <source>Turns a language name (en-us) into a locale name (en_US).</source>
          <target state="translated">将语言名称(en-us)转换为locale名称(en_US)。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="2e5c8a1bba5f02cdf1bbaf90b229d5b43c239eab" translate="yes" xml:space="preserve">
          <source>Two &lt;a href=&quot;#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; objects multiplied together will yield an &lt;a href=&quot;#django.contrib.gis.measure.Area&quot;&gt;&lt;code&gt;Area&lt;/code&gt;&lt;/a&gt; object, which uses squared units of measure:</source>
          <target state="translated">将两个&lt;a href=&quot;#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;对象相乘将产生一个&lt;a href=&quot;#django.contrib.gis.measure.Area&quot;&gt; &lt;code&gt;Area&lt;/code&gt; &lt;/a&gt;对象，该对象使用平方的度量单位：</target>
        </trans-unit>
        <trans-unit id="f6decb7a8037768ab54793eaf4ea65a0351881a7" translate="yes" xml:space="preserve">
          <source>Two arguments are required:</source>
          <target state="translated">需要两个论据。</target>
        </trans-unit>
        <trans-unit id="1ddba53b1994066fc414e01042121a473c383f33" translate="yes" xml:space="preserve">
          <source>Two central mixins are provided that help in providing a consistent interface to working with templates in class-based views.</source>
          <target state="translated">提供了两个中央混搭,有助于为在基于类的视图中使用模板提供一个一致的界面。</target>
        </trans-unit>
        <trans-unit id="d816953eb086441b820d022f8dd3a40162fb2ccf" translate="yes" xml:space="preserve">
          <source>Two fields are available for representing relationships between models: &lt;a href=&quot;#django.forms.ModelChoiceField&quot;&gt;&lt;code&gt;ModelChoiceField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.forms.ModelMultipleChoiceField&quot;&gt;&lt;code&gt;ModelMultipleChoiceField&lt;/code&gt;&lt;/a&gt;. Both of these fields require a single &lt;code&gt;queryset&lt;/code&gt; parameter that is used to create the choices for the field. Upon form validation, these fields will place either one model object (in the case of &lt;code&gt;ModelChoiceField&lt;/code&gt;) or multiple model objects (in the case of &lt;code&gt;ModelMultipleChoiceField&lt;/code&gt;) into the &lt;code&gt;cleaned_data&lt;/code&gt; dictionary of the form.</source>
          <target state="translated">有两个字段可用于表示模型之间的关系：&lt;a href=&quot;#django.forms.ModelChoiceField&quot;&gt; &lt;code&gt;ModelChoiceField&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.forms.ModelMultipleChoiceField&quot;&gt; &lt;code&gt;ModelMultipleChoiceField&lt;/code&gt; &lt;/a&gt;。这两个字段都需要单个 &lt;code&gt;queryset&lt;/code&gt; 参数，该参数用于创建字段的选择。表单验证后，这些字段会将一个模型对象（对于 &lt;code&gt;ModelChoiceField&lt;/code&gt; ）或多个模型对象（对于 &lt;code&gt;ModelMultipleChoiceField&lt;/code&gt; ）放置到表单的 &lt;code&gt;cleaned_data&lt;/code&gt; 字典中。</target>
        </trans-unit>
        <trans-unit id="b170ac349370f8d310253a7a01514b90d0c26dca" translate="yes" xml:space="preserve">
          <source>Two methods of this class, &lt;a href=&quot;#django.db.models.fields.files.FieldFile.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.fields.files.FieldFile.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, default to saving the model object of the associated &lt;code&gt;FieldFile&lt;/code&gt; in the database.</source>
          <target state="translated">此类的两个方法&lt;a href=&quot;#django.db.models.fields.files.FieldFile.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.db.models.fields.files.FieldFile.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;，默认情况下是将关联的 &lt;code&gt;FieldFile&lt;/code&gt; 的模型对象保存在数据库中。</target>
        </trans-unit>
        <trans-unit id="b2e570d805954365899ee35de180ff9bd49641c6" translate="yes" xml:space="preserve">
          <source>Two points to keep in mind:</source>
          <target state="translated">有两点需要注意。</target>
        </trans-unit>
        <trans-unit id="815a24a5cc5ca41345b659877e73616c58415b17" translate="yes" xml:space="preserve">
          <source>Two useful classes defined by the default admin site stylesheet are &lt;code&gt;collapse&lt;/code&gt; and &lt;code&gt;wide&lt;/code&gt;. Fieldsets with the &lt;code&gt;collapse&lt;/code&gt; style will be initially collapsed in the admin and replaced with a small &amp;ldquo;click to expand&amp;rdquo; link. Fieldsets with the &lt;code&gt;wide&lt;/code&gt; style will be given extra horizontal space.</source>
          <target state="translated">默认管理网站样式表定义的两个有用的类是 &lt;code&gt;collapse&lt;/code&gt; 和 &lt;code&gt;wide&lt;/code&gt; 。具有 &lt;code&gt;collapse&lt;/code&gt; 样式的字段集将首先在管理员中折叠，并替换为一个小的&amp;ldquo;单击以展开&amp;rdquo;链接。具有 &lt;code&gt;wide&lt;/code&gt; 样式的字段集将获得额外的水平空间。</target>
        </trans-unit>
        <trans-unit id="6b2b03652663529bd450d6bbe6d5fc37a61eb7ce" translate="yes" xml:space="preserve">
          <source>Two, you can take advantage of Django&amp;rsquo;s automatic HTML escaping. The remainder of this section describes how auto-escaping works.</source>
          <target state="translated">第二，您可以利用Django的自动HTML转义功能。本节的其余部分描述了自动转义的工作方式。</target>
        </trans-unit>
        <trans-unit id="25c0a3b54746b5c6ae00df28e01c6ee12259be54" translate="yes" xml:space="preserve">
          <source>Tying transactions to HTTP requests</source>
          <target state="translated">将事务与HTTP请求挂钩</target>
        </trans-unit>
        <trans-unit id="284b399f23fa53068e7e6cbd4722903619258932" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;django-admin&lt;/code&gt;.</source>
          <target state="translated">键入 &lt;code&gt;django-admin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="925e03542b6d4d6c0808e833d67cd7b0d2c2d7a4" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;sql&lt;/code&gt;, then [TAB], to see all available options whose names start with &lt;code&gt;sql&lt;/code&gt;.</source>
          <target state="translated">键入 &lt;code&gt;sql&lt;/code&gt; ，然后键入[TAB]，以查看名称以 &lt;code&gt;sql&lt;/code&gt; 开头的所有可用选项。</target>
        </trans-unit>
        <trans-unit id="9371d55d8f419ec9e71f9ff1823ffa8380a68e6c" translate="yes" xml:space="preserve">
          <source>Typical usage could look like:</source>
          <target state="translated">典型的用法可以是:</target>
        </trans-unit>
        <trans-unit id="6586dad6c3167af1032694da1cb2d6724883211c" translate="yes" xml:space="preserve">
          <source>Typical usage is to pass the contents of the page, as a string, bytestring, or &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#memoryview&quot;&gt;&lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt;, to the &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; constructor:</source>
          <target state="translated">典型的用法是将页面的内容以字符串，字节字符串或&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#memoryview&quot;&gt; &lt;code&gt;memoryview&lt;/code&gt; 的形式&lt;/a&gt;传递给&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;构造函数：</target>
        </trans-unit>
        <trans-unit id="8d2be8893af1440290d9688a1844738f711ab097" translate="yes" xml:space="preserve">
          <source>Typical usage looks like this:</source>
          <target state="translated">典型的用法是这样的。</target>
        </trans-unit>
        <trans-unit id="f3508436aca4931ed78c0fb1cc8a48c3810e49c1" translate="yes" xml:space="preserve">
          <source>Typically no special setup is required, so you can create a database as you would for any other project. We provide some tips for selected databases:</source>
          <target state="translated">通常情况下,不需要特殊的设置,因此您可以像创建其他项目一样创建数据库。我们为选定的数据库提供一些提示。</target>
        </trans-unit>
        <trans-unit id="171a04d7323b7ce0a800dd8dd2d6c0b2de9b680a" translate="yes" xml:space="preserve">
          <source>Typically you won&amp;rsquo;t need to call this function directly as &lt;a href=&quot;#django.contrib.admin.apps.AdminConfig&quot;&gt;&lt;code&gt;AdminConfig&lt;/code&gt;&lt;/a&gt; calls it when Django starts.</source>
          <target state="translated">通常，当Django启动时，您不需要直接调用此函数，因为&lt;a href=&quot;#django.contrib.admin.apps.AdminConfig&quot;&gt; &lt;code&gt;AdminConfig&lt;/code&gt; 会&lt;/a&gt;调用它。</target>
        </trans-unit>
        <trans-unit id="194eec74135e2433ce763a4495e6e4c62acf5871" translate="yes" xml:space="preserve">
          <source>Typically, SRID integer corresponds to an EPSG (&lt;a href=&quot;http://www.epsg.org&quot;&gt;European Petroleum Survey Group&lt;/a&gt;) identifier. However, it may also be associated with custom projections defined in spatial database&amp;rsquo;s spatial reference systems table.</source>
          <target state="translated">通常，SRID整数对应于EPSG（&lt;a href=&quot;http://www.epsg.org&quot;&gt;欧洲石油调查组织&lt;/a&gt;）标识符。但是，它也可能与在空间数据库的空间参考系统表中定义的自定义投影相关联。</target>
        </trans-unit>
        <trans-unit id="fe375bf4dcf4d6939b07c3b9a84b4a5bb829f992" translate="yes" xml:space="preserve">
          <source>Typically, all the features in a given layer have the same geometry type. The &lt;a href=&quot;#django.contrib.gis.gdal.Layer.geom_type&quot;&gt;&lt;code&gt;geom_type&lt;/code&gt;&lt;/a&gt; property of a layer is an &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeomType&quot;&gt;&lt;code&gt;OGRGeomType&lt;/code&gt;&lt;/a&gt; that identifies the feature type. We can use it to print out some basic information about each layer in a &lt;a href=&quot;#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">通常，给定图层中的所有要素都具有相同的几何类型。所述&lt;a href=&quot;#django.contrib.gis.gdal.Layer.geom_type&quot;&gt; &lt;code&gt;geom_type&lt;/code&gt; &lt;/a&gt;的层的属性是一个&lt;a href=&quot;#django.contrib.gis.gdal.OGRGeomType&quot;&gt; &lt;code&gt;OGRGeomType&lt;/code&gt; &lt;/a&gt;识别特征类型。我们可以使用它来打印出有关&lt;a href=&quot;#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;每一层的一些基本信息：</target>
        </trans-unit>
        <trans-unit id="ffac275e6b818dfb185bf9f47522df2d17b211d0" translate="yes" xml:space="preserve">
          <source>Typically, these situations only arise once you&amp;rsquo;re maintaining several Django projects. When they do, the best solution is to use &lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;venv&lt;/a&gt;. This tool allows you to maintain multiple isolated Python environments, each with its own copy of the libraries and package namespace.</source>
          <target state="translated">通常，只有在维护多个Django项目时才会出现这些情况。当他们这样做时，最好的解决方案是使用&lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;venv&lt;/a&gt;。使用此工具，您可以维护多个隔离的Python环境，每个环境都有其自己的库和包名称空间的副本。</target>
        </trans-unit>
        <trans-unit id="addbaa5134e849cbef651142b78c7358e9b21b1c" translate="yes" xml:space="preserve">
          <source>Typically, these situations only arise once you&amp;rsquo;re maintaining several Django projects. When they do, the best solution is to use &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;. This tool allows you to maintain multiple isolated Python environments, each with its own copy of the libraries and package namespace.</source>
          <target state="translated">通常，只有在维护多个Django项目时才会出现这些情况。当他们这样做时，最好的解决方案是使用&lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt;。使用此工具，您可以维护多个隔离的Python环境，每个环境都有其自己的库和包名称空间的副本。</target>
        </trans-unit>
        <trans-unit id="70bb89b902745d894f0e1eafcb41ded5f44ac90e" translate="yes" xml:space="preserve">
          <source>U.S. Foot, US survey foot</source>
          <target state="translated">美国脚</target>
        </trans-unit>
        <trans-unit id="a052aa98c496052d56ddc42a2048784696547215" translate="yes" xml:space="preserve">
          <source>URI and IRI handling</source>
          <target state="translated">URI和IRI处理</target>
        </trans-unit>
        <trans-unit id="537934d17dfeba7650e4ed80813214cc05308357" translate="yes" xml:space="preserve">
          <source>URL Resolver exceptions</source>
          <target state="translated">URL解析器异常</target>
        </trans-unit>
        <trans-unit id="76465e7de64e7d6c35a96f84b56d72b629ef7b51" translate="yes" xml:space="preserve">
          <source>URL Resolver exceptions are defined in &lt;code&gt;django.urls&lt;/code&gt;.</source>
          <target state="translated">URL解析器异常在 &lt;code&gt;django.urls&lt;/code&gt; 中定义。</target>
        </trans-unit>
        <trans-unit id="817b6f3e6db010d7fe83dad284aa883291e1a446" translate="yes" xml:space="preserve">
          <source>URL dispatcher</source>
          <target state="translated">URL调度器</target>
        </trans-unit>
        <trans-unit id="24a86b04a9f50c5d82d505233a5777d87f685ab5" translate="yes" xml:space="preserve">
          <source>URL name</source>
          <target state="translated">URL名称</target>
        </trans-unit>
        <trans-unit id="c629a665566f9c1e3063cb1969010515a8213be7" translate="yes" xml:space="preserve">
          <source>URL namespaces</source>
          <target state="translated">URL命名空间</target>
        </trans-unit>
        <trans-unit id="dc1e6ac2e11787b957382ad433ed1a87487d1ecf" translate="yes" xml:space="preserve">
          <source>URL namespaces allow you to uniquely reverse &lt;a href=&quot;#naming-url-patterns&quot;&gt;named URL patterns&lt;/a&gt; even if different applications use the same URL names. It&amp;rsquo;s a good practice for third-party apps to always use namespaced URLs (as we did in the tutorial). Similarly, it also allows you to reverse URLs if multiple instances of an application are deployed. In other words, since multiple instances of a single application will share named URLs, namespaces provide a way to tell these named URLs apart.</source>
          <target state="translated">URL名称空间允许您唯一地反向&lt;a href=&quot;#naming-url-patterns&quot;&gt;命名URL模式，&lt;/a&gt;即使不同的应用程序使用相同的URL名称。对于第三方应用程序，始终使用命名空间的URL是一个好习惯（就像我们在本教程中所做的那样）。同样，如果部署了一个应用程序的多个实例，它还允许您反转URL。换句话说，由于单个应用程序的多个实例将共享命名的URL，因此名称空间提供了一种区分这些命名的URL的方法。</target>
        </trans-unit>
        <trans-unit id="2559622dd3ed7db1b8df6c56bbc7b62234ce53d5" translate="yes" xml:space="preserve">
          <source>URL namespaces and included URLconfs</source>
          <target state="translated">URL命名空间和包含的URLconfs</target>
        </trans-unit>
        <trans-unit id="d1547aa9a835c26a8cee3da710e3248942951f5a" translate="yes" xml:space="preserve">
          <source>URL patterns can also be marked translatable using the &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; function. Example:</source>
          <target state="translated">URL模式也可以使用&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt;函数标记为可翻译。例：</target>
        </trans-unit>
        <trans-unit id="3dd216f364451630b0caa07bd44f1c704b470880" translate="yes" xml:space="preserve">
          <source>URL that handles the media served from &lt;a href=&quot;#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;, used for &lt;a href=&quot;../topics/files&quot;&gt;managing stored files&lt;/a&gt;. It must end in a slash if set to a non-empty value. You will need to &lt;a href=&quot;../howto/static-files/index#serving-uploaded-files-in-development&quot;&gt;configure these files to be served&lt;/a&gt; in both development and production environments.</source>
          <target state="translated">处理从&lt;a href=&quot;#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; 提供&lt;/a&gt;的媒体的URL ，用于&lt;a href=&quot;../topics/files&quot;&gt;管理存储的文件&lt;/a&gt;。如果设置为非空值，则必须以斜杠结尾。您将需要&lt;a href=&quot;../howto/static-files/index#serving-uploaded-files-in-development&quot;&gt;配置这些文件以&lt;/a&gt;在开发和生产环境中提供。</target>
        </trans-unit>
        <trans-unit id="5bb14ab7cd6e24c66e5777b642adc9e5f1f60672" translate="yes" xml:space="preserve">
          <source>URL that serves the files stored at this location. Defaults to the value of your &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">提供存储在此位置的文件的URL。默认为&lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt;设置的值。</target>
        </trans-unit>
        <trans-unit id="26ae75a5bfde1dd4675ea7fb479db6f98a7ec902" translate="yes" xml:space="preserve">
          <source>URL to use when referring to static files located in &lt;a href=&quot;#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引用位于&lt;a href=&quot;#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; 中的&lt;/a&gt;静态文件时使用的URL 。</target>
        </trans-unit>
        <trans-unit id="497117c14c985e24e2ba585ac0a1bee910038b27" translate="yes" xml:space="preserve">
          <source>URL/URI scheme list to validate against. If not provided, the default list is &lt;code&gt;['http', 'https', 'ftp', 'ftps']&lt;/code&gt;. As a reference, the IANA website provides a full list of &lt;a href=&quot;https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml&quot;&gt;valid URI schemes&lt;/a&gt;.</source>
          <target state="translated">要验证的URL / URI方案列表。如果未提供，则默认列表为 &lt;code&gt;['http', 'https', 'ftp', 'ftps']&lt;/code&gt; 。作为参考，IANA网站提供了&lt;a href=&quot;https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml&quot;&gt;有效URI方案&lt;/a&gt;的完整列表。</target>
        </trans-unit>
        <trans-unit id="13535bcaecf34cb0b8195c2d1fff7157703c3b22" translate="yes" xml:space="preserve">
          <source>URLconf configuration</source>
          <target state="translated">URLconf配置</target>
        </trans-unit>
        <trans-unit id="2c4a4c0c224c02286d9e3417d15bc754ce40a177" translate="yes" xml:space="preserve">
          <source>URLconfs have a hook that lets you pass extra arguments to your view functions, as a Python dictionary.</source>
          <target state="translated">URLconfs 有一个钩子,可以让你把额外的参数以 Python 字典的形式传递给你的视图函数。</target>
        </trans-unit>
        <trans-unit id="01f03837323aab32409bb99c50d6c475179c49df" translate="yes" xml:space="preserve">
          <source>URLs</source>
          <target state="translated">URLs</target>
        </trans-unit>
        <trans-unit id="fe4ee470c2d9d9422184f5e40e8c4eddab2bd6d5" translate="yes" xml:space="preserve">
          <source>URLs can only contain ASCII characters. If you&amp;rsquo;re constructing a URL from pieces of data that might be non-ASCII, be careful to encode the results in a way that is suitable for a URL. The &lt;a href=&quot;urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function handles this for you automatically.</source>
          <target state="translated">网址只能包含ASCII字符。如果要从可能是非ASCII的数据段构造URL，请小心以适合URL的方式对结果进行编码。该&lt;a href=&quot;urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;函数将自动为您处理此。</target>
        </trans-unit>
        <trans-unit id="18bc5956dbf1cc6c9a5baeb624c9e7e472a04c2e" translate="yes" xml:space="preserve">
          <source>USA</source>
          <target state="translated">USA</target>
        </trans-unit>
        <trans-unit id="3ff8bc01be66cf3d1a62c736b545ceee1d390ce8" translate="yes" xml:space="preserve">
          <source>USE_TZ, TIME_ZONE</source>
          <target state="translated">USE_TZ,TIME_ZONE</target>
        </trans-unit>
        <trans-unit id="2896e5725681c6c61a1e90ef8fdb155a5aaacdc6" translate="yes" xml:space="preserve">
          <source>UTC offsets are supported; if &lt;code&gt;value&lt;/code&gt; describes one, the result&amp;rsquo;s &lt;code&gt;tzinfo&lt;/code&gt; attribute is a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timezone&quot;&gt;&lt;code&gt;datetime.timezone&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">支持UTC偏移量；如果 &lt;code&gt;value&lt;/code&gt; 描述一个，则结果的 &lt;code&gt;tzinfo&lt;/code&gt; 属性是&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timezone&quot;&gt; &lt;code&gt;datetime.timezone&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="f1c3660f6451ec964daeb830f8ed5e7e3d28a651" translate="yes" xml:space="preserve">
          <source>UTC offsets aren&amp;rsquo;t supported; if &lt;code&gt;value&lt;/code&gt; describes one, the result is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">不支持UTC偏移量；如果 &lt;code&gt;value&lt;/code&gt; 描述一个，则结果为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef4f3dbafb7dcdfb75412e4bd3ff34f766181f02" translate="yes" xml:space="preserve">
          <source>Ultimately, a log record needs to be rendered as text. Formatters describe the exact format of that text. A formatter usually consists of a Python formatting string containing &lt;a href=&quot;https://docs.python.org/3/library/logging.html#logrecord-attributes&quot;&gt;LogRecord attributes&lt;/a&gt;; however, you can also write custom formatters to implement specific formatting behavior.</source>
          <target state="translated">最终，日志记录需要呈现为文本。格式器描述该文本的确切格式。格式化程序通常由包含&lt;a href=&quot;https://docs.python.org/3/library/logging.html#logrecord-attributes&quot;&gt;LogRecord属性&lt;/a&gt;的Python格式化字符串组成；但是，您也可以编写自定义格式化程序以实现特定的格式化行为。</target>
        </trans-unit>
        <trans-unit id="daed8868347d31d8ec9063c8de3c7b3283a1982c" translate="yes" xml:space="preserve">
          <source>Ultimately, this decoupling of compilation and rendering results in an efficient template system, because a template can render multiple contexts without having to be parsed multiple times.</source>
          <target state="translated">最终,这种编译和渲染的解耦会带来一个高效的模板系统,因为一个模板可以渲染多个上下文,而无需多次解析。</target>
        </trans-unit>
        <trans-unit id="f2263abf4919f6f700b496c264250c09010ae59a" translate="yes" xml:space="preserve">
          <source>Ultimately, which of these methods are implemented is up to you. Leaving some methods unimplemented will result in a partial (possibly broken) interface.</source>
          <target state="translated">最终,这些方法中的哪些方法是由你来实现的。不实现某些方法将导致部分(可能是坏的)接口。</target>
        </trans-unit>
        <trans-unit id="d6ffee908070a6e965544e9f8f0ab655b5d142d7" translate="yes" xml:space="preserve">
          <source>Unbound methods used from within the class body</source>
          <target state="translated">从类体内部使用的非绑定方法</target>
        </trans-unit>
        <trans-unit id="8d8e3267c6f21de72e6dc30a8c452305fba38653" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;, &lt;code&gt;process_exception&lt;/code&gt; is applied to exceptions raised from a middleware &lt;code&gt;process_request&lt;/code&gt; method. Under &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;process_exception&lt;/code&gt; applies only to exceptions raised from the view (or from the &lt;code&gt;render&lt;/code&gt; method of a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt;). Exceptions raised from a middleware are converted to the appropriate HTTP response and then passed to the next middleware.</source>
          <target state="translated">在 &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 下， &lt;code&gt;process_exception&lt;/code&gt; 应用于从中间件 &lt;code&gt;process_request&lt;/code&gt; 方法引发的异常。在&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 下&lt;/a&gt;， &lt;code&gt;process_exception&lt;/code&gt; 仅适用于从视图（或从&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;render&lt;/code&gt; 方法）引发的异常。从中间件引发的异常将转换为适当的HTTP响应，然后传递给下一个中间件。</target>
        </trans-unit>
        <trans-unit id="a517ca73ec3959b2bebd89a9f2095b9820a5a3f7" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;, every middleware will always have its &lt;code&gt;process_response&lt;/code&gt; method called, even if an earlier middleware short-circuited by returning a response from its &lt;code&gt;process_request&lt;/code&gt; method. Under &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, middleware behaves more like an onion: the layers that a response goes through on the way out are the same layers that saw the request on the way in. If a middleware short-circuits, only that middleware and the ones before it in &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; will see the response.</source>
          <target state="translated">在 &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 下，每个中间件都将始终调用其 &lt;code&gt;process_response&lt;/code&gt; 方法，即使较早的中间件通过从其 &lt;code&gt;process_request&lt;/code&gt; 方法返回响应而短路。在&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 下&lt;/a&gt;，中间件的行为更像一个洋葱：响应过程中，通过的层与看到请求的层相同。如果中间件发生短路，则仅该中间件及其中的中间层短路。&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;将看到响应。</target>
        </trans-unit>
        <trans-unit id="2e095708d3920e34ee1dc311c28ec0dbf966c605" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;, if a &lt;code&gt;process_response&lt;/code&gt; method raises an exception, the &lt;code&gt;process_response&lt;/code&gt; methods of all earlier middleware are skipped and a &lt;code&gt;500 Internal Server Error&lt;/code&gt; HTTP response is always returned (even if the exception raised was e.g. an &lt;a href=&quot;views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;). Under &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, an exception raised from a middleware will immediately be converted to the appropriate HTTP response, and then the next middleware in line will see that response. Middleware are never skipped due to a middleware raising an exception.</source>
          <target state="translated">在 &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 下，如果 &lt;code&gt;process_response&lt;/code&gt; 方法引发异常，则将跳过所有早期中间件的 &lt;code&gt;process_response&lt;/code&gt; 方法，并且始终返回 &lt;code&gt;500 Internal Server Error&lt;/code&gt; HTTP响应（即使引发的异常是例如&lt;a href=&quot;views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;）。在&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 下&lt;/a&gt;，从中间件引发的异常将立即转换为适当的HTTP响应，然后内联的下一个中间件将看到该响应。由于中间件引发异常，因此永远不会跳过中间件。</target>
        </trans-unit>
        <trans-unit id="515ce2727abcbfd2ac3b85d45a81ce5e030f2c11" translate="yes" xml:space="preserve">
          <source>Under Windows, the native console doesn&amp;rsquo;t support ANSI escape sequences so by default there is no color output. But you can install the &lt;a href=&quot;http://adoxa.altervista.org/ansicon/&quot;&gt;ANSICON&lt;/a&gt; third-party tool, the Django commands will detect its presence and will make use of its services to color output just like on Unix-based platforms.</source>
          <target state="translated">在Windows下，本机控制台不支持ANSI转义序列，因此默认情况下没有颜色输出。但是您可以安装&lt;a href=&quot;http://adoxa.altervista.org/ansicon/&quot;&gt;ANSICON&lt;/a&gt;第三方工具，就像在基于Unix的平台上一样，Django命令将检测到它的存在并将利用其服务为输出着色。</target>
        </trans-unit>
        <trans-unit id="a518035b9b7ae58e568d38add0f94d78f76c0ea4" translate="yes" xml:space="preserve">
          <source>Under a WSGI server, async views will run in their own, one-off event loop. This means you can use async features, like concurrent async HTTP requests, without any issues, but you will not get the benefits of an async stack.</source>
          <target state="translated">在WSGI服务器下,异步视图将在自己的、一次性的事件循环中运行。这意味着你可以使用异步功能,比如并发的异步HTTP请求,而不会有任何问题,但你将无法获得异步栈的好处。</target>
        </trans-unit>
        <trans-unit id="72919eaa82f1485690318e923afbdd3baf5e0c35" translate="yes" xml:space="preserve">
          <source>Under higher isolation levels, your application should be prepared to handle exceptions raised on serialization failures. This option is designed for advanced uses.</source>
          <target state="translated">在更高的隔离级别下,您的应用程序应该准备好处理序列化失败时引发的异常。这个选项是为高级用途设计的。</target>
        </trans-unit>
        <trans-unit id="8eaeab2e86278d9371f61d3e5bc4e8aa909cbf8c" translate="yes" xml:space="preserve">
          <source>Under some Web server configurations, the portion of the URL after the host name is split up into a script prefix portion and a path info portion. The &lt;code&gt;path_info&lt;/code&gt; attribute always contains the path info portion of the path, no matter what Web server is being used. Using this instead of &lt;a href=&quot;#django.http.HttpRequest.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; can make your code easier to move between test and deployment servers.</source>
          <target state="translated">在某些Web服务器配置下，主机名之后的URL部分分为脚本前缀部分和路径信息部分。该 &lt;code&gt;path_info&lt;/code&gt; 属性总是包含路径的路径信息部分，无论使用什么样的Web服务器。使用此&lt;a href=&quot;#django.http.HttpRequest.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt;代替路径可以使您的代码更容易在测试服务器和部署服务器之间移动。</target>
        </trans-unit>
        <trans-unit id="6be0c94a1de74f1c879eb8f444c36fc42fd443c6" translate="yes" xml:space="preserve">
          <source>Under the hood, Django&amp;rsquo;s transaction management code:</source>
          <target state="translated">在后台，Django的事务管理代码：</target>
        </trans-unit>
        <trans-unit id="6e395b95068084161c0fecdba4578ad3974b0839" translate="yes" xml:space="preserve">
          <source>Under the hood, all methods of pagination use the &lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;Paginator&lt;/code&gt;&lt;/a&gt; class. It does all the heavy lifting of actually splitting a &lt;code&gt;QuerySet&lt;/code&gt; into &lt;a href=&quot;../ref/paginator#django.core.paginator.Page&quot;&gt;&lt;code&gt;Page&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">在&lt;a href=&quot;../ref/paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;Paginator&lt;/code&gt; &lt;/a&gt;，所有分页方法都使用Paginator类。它实际上是将 &lt;code&gt;QuerySet&lt;/code&gt; 拆分为&lt;a href=&quot;../ref/paginator#django.core.paginator.Page&quot;&gt; &lt;code&gt;Page&lt;/code&gt; &lt;/a&gt;对象的所有繁重工作。</target>
        </trans-unit>
        <trans-unit id="fdf244fbceb38e0293830a8ef0ab0068c00bdf38" translate="yes" xml:space="preserve">
          <source>Under this configuration, the &lt;code&gt;diamonds&lt;/code&gt; database will be created first, as it is the only database alias without dependencies. The &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;clubs&lt;/code&gt; alias will be created next (although the order of creation of this pair is not guaranteed), then &lt;code&gt;hearts&lt;/code&gt;, and finally &lt;code&gt;spades&lt;/code&gt;.</source>
          <target state="translated">在这种配置下，将首先创建 &lt;code&gt;diamonds&lt;/code&gt; 数据库，因为它是唯一没有依赖性的数据库别名。在 &lt;code&gt;default&lt;/code&gt; 和 &lt;code&gt;clubs&lt;/code&gt; 的别名将在未来创建（创建虽然这对顺序没有保证），然后 &lt;code&gt;hearts&lt;/code&gt; ，终于 &lt;code&gt;spades&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa7abe66c644f5fb29a4aa5308e783fb1ba57d00" translate="yes" xml:space="preserve">
          <source>Understand &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/a&gt; thoroughly, and use them:</source>
          <target state="translated">全面了解&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.prefetch_related&quot;&gt; &lt;code&gt;prefetch_related()&lt;/code&gt; &lt;/a&gt;并使用它们：</target>
        </trans-unit>
        <trans-unit id="27980d221e4d7607bce2a77be739711a85c6fc46" translate="yes" xml:space="preserve">
          <source>Understand &lt;code&gt;QuerySet&lt;/code&gt; evaluation</source>
          <target state="translated">了解 &lt;code&gt;QuerySet&lt;/code&gt; 评估</target>
        </trans-unit>
        <trans-unit id="da26931c5ffe8e8dd904862e9c483d0529d441a2" translate="yes" xml:space="preserve">
          <source>Understand &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">了解 &lt;code&gt;QuerySet&lt;/code&gt; 小号</target>
        </trans-unit>
        <trans-unit id="c640adaa4bcd6100eb85e216fb2751b4f5517a47" translate="yes" xml:space="preserve">
          <source>Understand cached attributes</source>
          <target state="translated">了解缓存属性</target>
        </trans-unit>
        <trans-unit id="71ed66dcb485624104289d9bd9b4772eda2851af" translate="yes" xml:space="preserve">
          <source>Understanding &lt;a href=&quot;../../ref/models/querysets&quot;&gt;QuerySets&lt;/a&gt; is vital to getting good performance with simple code. In particular:</source>
          <target state="translated">了解&lt;a href=&quot;../../ref/models/querysets&quot;&gt;QuerySet&lt;/a&gt;对使用简单代码获得良好的性能至关重要。特别是：</target>
        </trans-unit>
        <trans-unit id="44e0564168e9f481eb7d7f8a8e069862f6568044" translate="yes" xml:space="preserve">
          <source>Understanding laziness</source>
          <target state="translated">了解懒惰</target>
        </trans-unit>
        <trans-unit id="03304f96252689acd75d763baef36be1fbc94028" translate="yes" xml:space="preserve">
          <source>Understanding the &lt;code&gt;ManagementForm&lt;/code&gt;</source>
          <target state="translated">了解 &lt;code&gt;ManagementForm&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3a71d9fcfd423a5cbc8dffae4786be506702c12b" translate="yes" xml:space="preserve">
          <source>Understanding the test output</source>
          <target state="translated">了解测试输出</target>
        </trans-unit>
        <trans-unit id="5116cc56e238056bf43c2a1ee00ef6ef926e36c3" translate="yes" xml:space="preserve">
          <source>Unfortunately, during DST transitions, some datetimes don&amp;rsquo;t exist or are ambiguous. In such situations, &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; raises an exception. That&amp;rsquo;s why you should always create aware datetime objects when time zone support is enabled.</source>
          <target state="translated">不幸的是，在DST过渡期间，某些日期时间不存在或不明确。在这种情况下，&lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt;会引发异常。这就是为什么在启用时区支持时始终应创建可识别的日期时间对象的原因。</target>
        </trans-unit>
        <trans-unit id="ca0d2e522969bfd623b1447d12c00e981fbc823f" translate="yes" xml:space="preserve">
          <source>Unfortunately, the shapefile data format does not allow for greater specificity with regards to geometry types. This shapefile, like many others, actually includes &lt;code&gt;MultiPolygon&lt;/code&gt; geometries, not Polygons. It&amp;rsquo;s important to use a more general field type in models: a GeoDjango &lt;code&gt;MultiPolygonField&lt;/code&gt; will accept a &lt;code&gt;Polygon&lt;/code&gt; geometry, but a &lt;code&gt;PolygonField&lt;/code&gt; will not accept a &lt;code&gt;MultiPolygon&lt;/code&gt; type geometry. This is why the &lt;code&gt;WorldBorder&lt;/code&gt; model defined above uses a &lt;code&gt;MultiPolygonField&lt;/code&gt;.</source>
          <target state="translated">不幸的是，shapefile数据格式不允许关于几何类型的更大的特异性。像许多其他形状文件一样，此shapefile实际上包括 &lt;code&gt;MultiPolygon&lt;/code&gt; 几何体，而不是Polygons。在模型中使用更通用的字段类型很重要：GeoDjango &lt;code&gt;MultiPolygonField&lt;/code&gt; 将接受 &lt;code&gt;Polygon&lt;/code&gt; 几何形状，但 &lt;code&gt;PolygonField&lt;/code&gt; 将不接受 &lt;code&gt;MultiPolygon&lt;/code&gt; 类型的几何形状。这就是为什么上面定义的 &lt;code&gt;WorldBorder&lt;/code&gt; 模型使用 &lt;code&gt;MultiPolygonField&lt;/code&gt; 的原因。</target>
        </trans-unit>
        <trans-unit id="b23456ee1564dc412530c13a18ee087c2a31acdd" translate="yes" xml:space="preserve">
          <source>Unfortunately, there isn&amp;rsquo;t a workaround when &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt;&lt;code&gt;creating&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;updating&lt;/code&gt;&lt;/a&gt; objects in bulk, since none of &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; are called.</source>
          <target state="translated">不幸的是，批量&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt; &lt;code&gt;creating&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;updating&lt;/code&gt; &lt;/a&gt;对象时没有解决方法，因为没有调用&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7254fe973cc02ae833e930a145c40e0a25336622" translate="yes" xml:space="preserve">
          <source>Unicode data</source>
          <target state="translated">统一码数据</target>
        </trans-unit>
        <trans-unit id="24dadab1131ed32d7d7ac91e36aefe2463f2ecdb" translate="yes" xml:space="preserve">
          <source>Unicode in Django</source>
          <target state="translated">统一码在Django中的应用</target>
        </trans-unit>
        <trans-unit id="22b1a258da86647a31c614474aeddf831cfa9efb" translate="yes" xml:space="preserve">
          <source>Unioning a set of &lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt;s has the effect of fully noding and dissolving the linework.</source>
          <target state="translated">合并一组&lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt; &lt;code&gt;LineString&lt;/code&gt; &lt;/a&gt;具有完全点头和消除线条的效果。</target>
        </trans-unit>
        <trans-unit id="b30b34da7d8cd3e388c075b09418c024426b9e2c" translate="yes" xml:space="preserve">
          <source>Unioning a set of &lt;a href=&quot;#django.contrib.gis.geos.Polygon&quot;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt;s will always return a &lt;a href=&quot;#django.contrib.gis.geos.Polygon&quot;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.gis.geos.MultiPolygon&quot;&gt;&lt;code&gt;MultiPolygon&lt;/code&gt;&lt;/a&gt; geometry (unlike &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.union&quot;&gt;&lt;code&gt;GEOSGeometry.union()&lt;/code&gt;&lt;/a&gt;, which may return geometries of lower dimension if a topology collapse occurs).</source>
          <target state="translated">合并一组&lt;a href=&quot;#django.contrib.gis.geos.Polygon&quot;&gt; &lt;code&gt;Polygon&lt;/code&gt; &lt;/a&gt;总是将返回&lt;a href=&quot;#django.contrib.gis.geos.Polygon&quot;&gt; &lt;code&gt;Polygon&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#django.contrib.gis.geos.MultiPolygon&quot;&gt; &lt;code&gt;MultiPolygon&lt;/code&gt; &lt;/a&gt;几何体（与&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.union&quot;&gt; &lt;code&gt;GEOSGeometry.union()&lt;/code&gt; &lt;/a&gt;不同，GEOSGeometry.union（）可能会在发生拓扑折叠时返回较小尺寸的几何体）。</target>
        </trans-unit>
        <trans-unit id="76660353a02939d47608b4895f31932c22f7ec9a" translate="yes" xml:space="preserve">
          <source>Unit Attribute</source>
          <target state="translated">单位属性</target>
        </trans-unit>
        <trans-unit id="5d7ee7381504ec51f518c36b80d6775b2d3f2322" translate="yes" xml:space="preserve">
          <source>Universally unique identifiers are a good alternative to &lt;a href=&quot;#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key&lt;/code&gt;&lt;/a&gt;. The database will not generate the UUID for you, so it is recommended to use &lt;a href=&quot;#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">通用唯一标识符是一个很好的替代&lt;a href=&quot;#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;为&lt;a href=&quot;#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key&lt;/code&gt; &lt;/a&gt;。该数据库不会为您生成UUID，因此建议使用&lt;a href=&quot;#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="038880b22ef1bdad9adbe66638b8b1ff26dfee0b" translate="yes" xml:space="preserve">
          <source>UnixImageIO</source>
          <target state="translated">UnixImageIO</target>
        </trans-unit>
        <trans-unit id="5a219be7c44ca3cb5e3ff711b79016b64fb5c51a" translate="yes" xml:space="preserve">
          <source>Unknown Policy Values</source>
          <target state="translated">未知政策值</target>
        </trans-unit>
        <trans-unit id="f1dfafec9d936072f91c136e6ba6640393a092fa" translate="yes" xml:space="preserve">
          <source>Unless &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=False&lt;/code&gt;&lt;/a&gt; is set on the field along with a &lt;a href=&quot;#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; then a label containing &lt;code&gt;&quot;---------&quot;&lt;/code&gt; will be rendered with the select box. To override this behavior, add a tuple to &lt;code&gt;choices&lt;/code&gt; containing &lt;code&gt;None&lt;/code&gt;; e.g. &lt;code&gt;(None, 'Your String For Display')&lt;/code&gt;. Alternatively, you can use an empty string instead of &lt;code&gt;None&lt;/code&gt; where this makes sense - such as on a &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">除非在字段上设置了&lt;a href=&quot;#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=False&lt;/code&gt; &lt;/a&gt;以及&lt;a href=&quot;#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;否则带有 &lt;code&gt;&quot;---------&quot;&lt;/code&gt; 的标签将与选择框一起呈现。要覆盖此行为，请将元组添加到包含 &lt;code&gt;None&lt;/code&gt; 的 &lt;code&gt;choices&lt;/code&gt; 中；例如 &lt;code&gt;(None, 'Your String For Display')&lt;/code&gt; 。或者，可以在有意义的地方使用空字符串代替 &lt;code&gt;None&lt;/code&gt; ，例如在&lt;a href=&quot;#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; 上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3db17a7bc41c0f6a22503c839b33446a2279f8d7" translate="yes" xml:space="preserve">
          <source>Unless &lt;a href=&quot;#django.http.HttpResponse.reason_phrase&quot;&gt;&lt;code&gt;reason_phrase&lt;/code&gt;&lt;/a&gt; is explicitly set, modifying the value of &lt;code&gt;status_code&lt;/code&gt; outside the constructor will also modify the value of &lt;code&gt;reason_phrase&lt;/code&gt;.</source>
          <target state="translated">除非显式设置了&lt;a href=&quot;#django.http.HttpResponse.reason_phrase&quot;&gt; &lt;code&gt;reason_phrase&lt;/code&gt; &lt;/a&gt;，否则在构造函数外部修改 &lt;code&gt;status_code&lt;/code&gt; 的值还将修改 &lt;code&gt;reason_phrase&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="c5a806901b6c23e268175e841ca21f60f7306d52" translate="yes" xml:space="preserve">
          <source>Unless &lt;a href=&quot;#django.http.StreamingHttpResponse.reason_phrase&quot;&gt;&lt;code&gt;reason_phrase&lt;/code&gt;&lt;/a&gt; is explicitly set, modifying the value of &lt;code&gt;status_code&lt;/code&gt; outside the constructor will also modify the value of &lt;code&gt;reason_phrase&lt;/code&gt;.</source>
          <target state="translated">除非显式设置了&lt;a href=&quot;#django.http.StreamingHttpResponse.reason_phrase&quot;&gt; &lt;code&gt;reason_phrase&lt;/code&gt; &lt;/a&gt;，否则在构造函数外部修改 &lt;code&gt;status_code&lt;/code&gt; 的值还将修改 &lt;code&gt;reason_phrase&lt;/code&gt; 的值。</target>
        </trans-unit>
        <trans-unit id="1a77a82516c84a4d978cd6360e0a448ebed466e2" translate="yes" xml:space="preserve">
          <source>Unless all of these conditions are met, passing a function to the template is more in line with the design of Jinja2.</source>
          <target state="translated">除非这些条件都满足,否则向模板传递函数更符合Jinja2的设计。</target>
        </trans-unit>
        <trans-unit id="2e89eef1dbfdd4d03c59ddabff36042e6e2785c6" translate="yes" xml:space="preserve">
          <source>Unless explicitly set, &lt;code&gt;reason_phrase&lt;/code&gt; is determined by the value of &lt;a href=&quot;#django.http.HttpResponse.status_code&quot;&gt;&lt;code&gt;status_code&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">除非明确设置，否则 &lt;code&gt;reason_phrase&lt;/code&gt; 由&lt;a href=&quot;#django.http.HttpResponse.status_code&quot;&gt; &lt;code&gt;status_code&lt;/code&gt; &lt;/a&gt;的值确定。</target>
        </trans-unit>
        <trans-unit id="444a5339ec993cb3409bdbe5ef891ef8627d9051" translate="yes" xml:space="preserve">
          <source>Unless explicitly set, &lt;code&gt;reason_phrase&lt;/code&gt; is determined by the value of &lt;a href=&quot;#django.http.StreamingHttpResponse.status_code&quot;&gt;&lt;code&gt;status_code&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">除非明确设置，否则 &lt;code&gt;reason_phrase&lt;/code&gt; 由&lt;a href=&quot;#django.http.StreamingHttpResponse.status_code&quot;&gt; &lt;code&gt;status_code&lt;/code&gt; &lt;/a&gt;的值确定。</target>
        </trans-unit>
        <trans-unit id="3c7876aed78ac30bf32714bf42c71266b74c8a18" translate="yes" xml:space="preserve">
          <source>Unless you are explicitly testing primary keys sequence numbers, it is recommended that you do not hard code primary key values in tests.</source>
          <target state="translated">除非你明确地测试主键序列号,否则建议你不要在测试中硬编码主键值。</target>
        </trans-unit>
        <trans-unit id="67e6bd6e84fc45b20cc26177ecb9af1b92f60a60" translate="yes" xml:space="preserve">
          <source>Unless you are sure you wish to work with SQL &lt;code&gt;NULL&lt;/code&gt; values, consider setting &lt;code&gt;null=False&lt;/code&gt; and providing a suitable default for empty values, such as &lt;code&gt;default=dict&lt;/code&gt;.</source>
          <target state="translated">除非确定要使用SQL &lt;code&gt;NULL&lt;/code&gt; 值，否则请考虑设置 &lt;code&gt;null=False&lt;/code&gt; 并为空值提供适当的默认值，例如 &lt;code&gt;default=dict&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="678e810328e4c0a1506ae206987b6432c407477a" translate="yes" xml:space="preserve">
          <source>Unless you&amp;rsquo;re planning to build websites and applications that do nothing but publish content, and don&amp;rsquo;t accept input from your visitors, you&amp;rsquo;re going to need to understand and use forms.</source>
          <target state="translated">除非您打算建立只发布内容，不做任何事情且不接受访问者输入的网站和应用程序，否则您将需要理解和使用表格。</target>
        </trans-unit>
        <trans-unit id="5defa9f68e76decb18c25afb5e5d930dca60e719" translate="yes" xml:space="preserve">
          <source>Unless you&amp;rsquo;ve encountered an unusual performance problem in a particular version, you&amp;rsquo;ll generally find better features, reliability, and security in a new release and that these benefits are far more significant than any performance you might win or lose.</source>
          <target state="translated">除非您在特定版本中遇到不寻常的性能问题，否则通常会在新版本中发现更好的功能，可靠性和安全性，并且这些好处远比您可能会赢得或失去的任何性能都重要。</target>
        </trans-unit>
        <trans-unit id="f79b8744b8c2abd594dff4e049086da34b5dfc07" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/request-response#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; does not have a &lt;code&gt;content&lt;/code&gt; attribute. As a result, middleware can no longer assume that all responses will have a &lt;code&gt;content&lt;/code&gt; attribute. If they need access to the content, they must test for streaming responses and adjust their behavior accordingly:</source>
          <target state="translated">与&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;不同，&lt;a href=&quot;../../ref/request-response#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; &lt;/a&gt;没有 &lt;code&gt;content&lt;/code&gt; 属性。结果，中间件不能再假定所有响应都将具有 &lt;code&gt;content&lt;/code&gt; 属性。如果他们需要访问内容，则必须测试流式响应并相应地调整其行为：</target>
        </trans-unit>
        <trans-unit id="b0bde4eebaa761807dbdcd55cada3f385b3e217b" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; does not accept an &lt;a href=&quot;../models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; argument to customize this behavior; if desired, you can avoid the cascade-deletion by not using &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;, and alternate behavior can be provided via the &lt;a href=&quot;../signals#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt; signal.</source>
          <target state="translated">不像&lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 的&lt;/a&gt;，&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt;不接受&lt;a href=&quot;../models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt;参数自定义此行为; 如果需要，可以通过不使用&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; &lt;/a&gt;来避免级联删除，并且可以通过&lt;a href=&quot;../signals#django.db.models.signals.pre_delete&quot;&gt; &lt;code&gt;pre_delete&lt;/code&gt; &lt;/a&gt;信号提供替代行为。</target>
        </trans-unit>
        <trans-unit id="b267cd5954155c1cb2e6f98971cc680db6a0833e" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;aggregate()&lt;/code&gt;, &lt;code&gt;annotate()&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a terminal clause. The output of the &lt;code&gt;annotate()&lt;/code&gt; clause is a &lt;code&gt;QuerySet&lt;/code&gt;; this &lt;code&gt;QuerySet&lt;/code&gt; can be modified using any other &lt;code&gt;QuerySet&lt;/code&gt; operation, including &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;order_by()&lt;/code&gt;, or even additional calls to &lt;code&gt;annotate()&lt;/code&gt;.</source>
          <target state="translated">不像 &lt;code&gt;aggregate()&lt;/code&gt; ， &lt;code&gt;annotate()&lt;/code&gt; 是&lt;em&gt;不&lt;/em&gt;终端子句。 &lt;code&gt;annotate()&lt;/code&gt; 子句的输出是 &lt;code&gt;QuerySet&lt;/code&gt; ；可以使用任何其他 &lt;code&gt;QuerySet&lt;/code&gt; 操作（包括 &lt;code&gt;filter()&lt;/code&gt; ， &lt;code&gt;order_by()&lt;/code&gt; 或什至对 &lt;code&gt;annotate()&lt;/code&gt; 的其他调用）来修改此 &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f43101e89ef51ffa185a0a0273d8ef63b36ebfdc" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;login()&lt;/code&gt;, this method skips the authentication and verification steps: inactive users (&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_active&quot;&gt;&lt;code&gt;is_active=False&lt;/code&gt;&lt;/a&gt;) are permitted to login and the user&amp;rsquo;s credentials don&amp;rsquo;t need to be provided.</source>
          <target state="translated">与 &lt;code&gt;login()&lt;/code&gt; 不同，此方法跳过了身份验证和验证步骤：允许非活动用户（&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_active&quot;&gt; &lt;code&gt;is_active=False&lt;/code&gt; &lt;/a&gt;）登录，并且不需要提供用户凭据。</target>
        </trans-unit>
        <trans-unit id="ceb1ea35ebeb0c7749a9a4d72f42387dcf261ba4" translate="yes" xml:space="preserve">
          <source>Unlike other tag utilities, &lt;code&gt;simple_tag&lt;/code&gt; passes its output through &lt;a href=&quot;../ref/utils#django.utils.html.conditional_escape&quot;&gt;&lt;code&gt;conditional_escape()&lt;/code&gt;&lt;/a&gt; if the template context is in autoescape mode, to ensure correct HTML and protect you from XSS vulnerabilities.</source>
          <target state="translated">与其他标签实用程序不同，如果模板上下文处于自动转义模式，则 &lt;code&gt;simple_tag&lt;/code&gt; 会将其输出通过&lt;a href=&quot;../ref/utils#django.utils.html.conditional_escape&quot;&gt; &lt;code&gt;conditional_escape()&lt;/code&gt; &lt;/a&gt;传递，以确保正确的HTML并保护您免受XSS漏洞的侵害。</target>
        </trans-unit>
        <trans-unit id="54d5ebbcf8813870bdbcd48cd610aec6a10c9221" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;__call__()&lt;/code&gt; method which is called once per request, &lt;code&gt;__init__()&lt;/code&gt; is called only &lt;em&gt;once&lt;/em&gt;, when the Web server starts.</source>
          <target state="translated">与每个请求一次调用一次 &lt;code&gt;__call__()&lt;/code&gt; 方法不同，当Web服务器启动时， &lt;code&gt;__init__()&lt;/code&gt; 仅被调用&lt;em&gt;一次&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="202025e3309078b14a1181c5cee117b67bb522e3" translate="yes" xml:space="preserve">
          <source>Unlike the hook-type &lt;code&gt;ModelAdmin&lt;/code&gt; methods detailed in the previous section, these five methods are in reality designed to be invoked as Django views from the admin application URL dispatching handler to render the pages that deal with model instances CRUD operations. As a result, completely overriding these methods will significantly change the behavior of the admin application.</source>
          <target state="translated">与上一节中详细介绍的钩子式 &lt;code&gt;ModelAdmin&lt;/code&gt; 方法不同，这五个方法实际上是设计为从admin应用程序URL分配处理程序作为Django视图调用的，以呈现处理模型实例CRUD操作的页面。因此，完全覆盖这些方法将大大改变admin应用程序的行为。</target>
        </trans-unit>
        <trans-unit id="7448c48b0e15a159fa8619af49fe604f26c0dd5e" translate="yes" xml:space="preserve">
          <source>Unlike the other request methods, &lt;code&gt;data&lt;/code&gt; is not provided as a keyword parameter in order to comply with &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.3.8&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231#section-4.3.8&lt;/strong&gt;&lt;/a&gt;, which mandates that TRACE requests must not have a body.</source>
          <target state="translated">与其他请求方法不同，为了遵守&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.3.8&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231＃section-4.3.8&lt;/strong&gt;&lt;/a&gt;（强制TRACE请求必须没有正文），不提供 &lt;code&gt;data&lt;/code&gt; 作为关键字参数。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d529120907e93c9b6651314a6b6850d4e61de9fa" translate="yes" xml:space="preserve">
          <source>Unlike your &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;, your salt argument does not need to stay secret.</source>
          <target state="translated">与您的&lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;不同，您的salt参数不需要保密。</target>
        </trans-unit>
        <trans-unit id="646567a43dc53e8124c9276136ee0906fa597983" translate="yes" xml:space="preserve">
          <source>Unpacks IPv4 mapped addresses like &lt;code&gt;::ffff:192.0.2.1&lt;/code&gt;. If this option is enabled that address would be unpacked to &lt;code&gt;192.0.2.1&lt;/code&gt;. Default is disabled. Can only be used when &lt;code&gt;protocol&lt;/code&gt; is set to &lt;code&gt;'both'&lt;/code&gt;.</source>
          <target state="translated">解压缩IPv4映射的地址，例如 &lt;code&gt;::ffff:192.0.2.1&lt;/code&gt; 。如果启用此选项，则该地址将解压缩为 &lt;code&gt;192.0.2.1&lt;/code&gt; 。默认设置为禁用。只能在 &lt;code&gt;protocol&lt;/code&gt; 设置为 &lt;code&gt;'both'&lt;/code&gt; 时使用。</target>
        </trans-unit>
        <trans-unit id="4b3101b9b97c07dcf8246267009b68d85ce4a3d1" translate="yes" xml:space="preserve">
          <source>Unprotected view needs the CSRF token</source>
          <target state="translated">不受保护的视图需要CSRF标记。</target>
        </trans-unit>
        <trans-unit id="a2f7bd457bb79e3ede8fe75e0a7bd5ebce89f31d" translate="yes" xml:space="preserve">
          <source>Unsets the &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt;.</source>
          <target state="translated">取消&lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;当前时区&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9779aaba6192e6801dfcb0ca30efd16317cb3614" translate="yes" xml:space="preserve">
          <source>Unused (always &lt;code&gt;None&lt;/code&gt;).</source>
          <target state="translated">未使用（总是 &lt;code&gt;None&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="28f1e198b2b32b5a385660c50f73ada65053f742" translate="yes" xml:space="preserve">
          <source>Up to a certain point, &amp;lsquo;checking that it seems to work&amp;rsquo; will be a satisfactory test. In a more sophisticated application, you might have dozens of complex interactions between components.</source>
          <target state="translated">在某种程度上，&amp;ldquo;检查它是否起作用&amp;rdquo;将是一个令人满意的测试。在更复杂的应用程序中，组件之间可能会有数十种复杂的交互。</target>
        </trans-unit>
        <trans-unit id="fd8ace3c2cfc128eba36a48ab3ae7c64274036b6" translate="yes" xml:space="preserve">
          <source>Update in bulk</source>
          <target state="translated">批量更新</target>
        </trans-unit>
        <trans-unit id="d9b7bf87e5ec56f44a8a260b0fcbaca06109aa71" translate="yes" xml:space="preserve">
          <source>Updates the message files for all available languages.</source>
          <target state="translated">更新所有可用语言的信息文件。</target>
        </trans-unit>
        <trans-unit id="68a8d10084ae0bebf69893cb99cea9ebe1d09180" translate="yes" xml:space="preserve">
          <source>Updating a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; field works exactly the same way as saving a normal field &amp;ndash; assign an object of the right type to the field in question. This example updates the &lt;code&gt;blog&lt;/code&gt; attribute of an &lt;code&gt;Entry&lt;/code&gt; instance &lt;code&gt;entry&lt;/code&gt;, assuming appropriate instances of &lt;code&gt;Entry&lt;/code&gt; and &lt;code&gt;Blog&lt;/code&gt; are already saved to the database (so we can retrieve them below):</source>
          <target state="translated">更新&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;字段的工作方式与保存普通字段的方式完全相同-将正确类型的对象分配给相关字段。此示例更新 &lt;code&gt;Entry&lt;/code&gt; 实例 &lt;code&gt;entry&lt;/code&gt; 的 &lt;code&gt;blog&lt;/code&gt; 属性，假设 &lt;code&gt;Entry&lt;/code&gt; 和 &lt;code&gt;Blog&lt;/code&gt; 的适当实例已经保存到数据库中（因此我们可以在下面检索它们）：</target>
        </trans-unit>
        <trans-unit id="a8e7a4750a28eaec5d642cf652d2931c02e5279a" translate="yes" xml:space="preserve">
          <source>Updating a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; works a little differently &amp;ndash; use the &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; method on the field to add a record to the relation. This example adds the &lt;code&gt;Author&lt;/code&gt; instance &lt;code&gt;joe&lt;/code&gt; to the &lt;code&gt;entry&lt;/code&gt; object:</source>
          <target state="translated">更新&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 的&lt;/a&gt;工作方式略有不同- 在字段上使用&lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;方法向关系中添加记录。本示例将 &lt;code&gt;Author&lt;/code&gt; 实例 &lt;code&gt;joe&lt;/code&gt; 添加到 &lt;code&gt;entry&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="1e57f159716031e6de627e9ebc5a07d01ac49262" translate="yes" xml:space="preserve">
          <source>Updating all migrations that depend on the deleted migrations to depend on the squashed migration instead.</source>
          <target state="translated">将所有依赖被删除的迁移的迁移更新为依赖被压制的迁移。</target>
        </trans-unit>
        <trans-unit id="7b598ffb6a2d08a645946f7901a024fcf5f394b6" translate="yes" xml:space="preserve">
          <source>Updating attributes based on existing fields</source>
          <target state="translated">基于现有字段更新属性</target>
        </trans-unit>
        <trans-unit id="7ae75eae246f9db307b0995fd2b4d26ecb167f67" translate="yes" xml:space="preserve">
          <source>Updating fields defined on multi-table inheritance ancestors will incur an extra query per ancestor.</source>
          <target state="translated">更新定义在多表继承祖先上的字段将给每个祖先带来额外的查询。</target>
        </trans-unit>
        <trans-unit id="f5eb7efc8341ac4fc061ce26a06c4f9477c26414" translate="yes" xml:space="preserve">
          <source>Updating multiple objects at once</source>
          <target state="translated">同时更新多个对象</target>
        </trans-unit>
        <trans-unit id="62ab655a1d6efe8beca16e6191378d2648f74add" translate="yes" xml:space="preserve">
          <source>Upgrading Django to a newer version</source>
          <target state="translated">升级Django到新的版本</target>
        </trans-unit>
        <trans-unit id="46a4bffa218165f20eb2c6cad688e95301db67ea" translate="yes" xml:space="preserve">
          <source>Upgrading as each new Django release is available makes future upgrades less painful by keeping your code base up to date.</source>
          <target state="translated">在每一个新的Django版本发布时进行升级,使你的代码库保持最新,从而减少未来升级的痛苦。</target>
        </trans-unit>
        <trans-unit id="05d94a7523b73b5252283606a582bc13a2aa41e6" translate="yes" xml:space="preserve">
          <source>Upgrading pre-Django 1.10-style middleware</source>
          <target state="translated">升级前Django 1.10风格的中间件。</target>
        </trans-unit>
        <trans-unit id="f7b48108d745155b7ecc0b26e195e1cf984e3128" translate="yes" xml:space="preserve">
          <source>Upload Handlers</source>
          <target state="translated">上传处理程序</target>
        </trans-unit>
        <trans-unit id="18c3f0d628afcda47eae72f604c2cbb8fe852d42" translate="yes" xml:space="preserve">
          <source>Upload handler that streams data into a temporary file using &lt;a href=&quot;#django.core.files.uploadedfile.TemporaryUploadedFile&quot;&gt;&lt;code&gt;TemporaryUploadedFile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">上载处理程序，该处理程序使用&lt;a href=&quot;#django.core.files.uploadedfile.TemporaryUploadedFile&quot;&gt; &lt;code&gt;TemporaryUploadedFile&lt;/code&gt; 将&lt;/a&gt;数据流式传输到临时文件中。</target>
        </trans-unit>
        <trans-unit id="dd142961ffce6aae336b913b089bda434f9de101" translate="yes" xml:space="preserve">
          <source>Upload the package on your website.</source>
          <target state="translated">在你的网站上上传包。</target>
        </trans-unit>
        <trans-unit id="8007dda7676e7989647bad361adfb846332bd4ab" translate="yes" xml:space="preserve">
          <source>Uploaded Files and Upload Handlers</source>
          <target state="translated">上传的文件和上传处理程序</target>
        </trans-unit>
        <trans-unit id="96523b9ddbe4851dbc40cbb0a21acda23b6ea9b0" translate="yes" xml:space="preserve">
          <source>Uploaded files</source>
          <target state="translated">上传的文件</target>
        </trans-unit>
        <trans-unit id="184646850e7101f37ef2ae2d3067a13d69ba40dc" translate="yes" xml:space="preserve">
          <source>Uploading multiple files</source>
          <target state="translated">上传多个文件</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="fec43ce445f974147bd0eb223a50147e7fb7202d" translate="yes" xml:space="preserve">
          <source>Usage example:</source>
          <target state="translated">用例。</target>
        </trans-unit>
        <trans-unit id="950d9c1aee5a0b8ac1664c8a9f40a8cddde14c8b" translate="yes" xml:space="preserve">
          <source>Usage examples</source>
          <target state="translated">用例</target>
        </trans-unit>
        <trans-unit id="173610cb31251b28e80fadc258036215d99d7128" translate="yes" xml:space="preserve">
          <source>Usage examples:</source>
          <target state="translated">用例。</target>
        </trans-unit>
        <trans-unit id="3ff0224034c5075c4d17ea1e9764c2fb807106e5" translate="yes" xml:space="preserve">
          <source>Usage in your URLconf</source>
          <target state="translated">在你的URLconf中的用法</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="fec36d5334003297df655c134a6c111aba4c201a" translate="yes" xml:space="preserve">
          <source>Use &amp;lsquo;secure&amp;rsquo; cookies.</source>
          <target state="translated">使用&amp;ldquo;安全&amp;rdquo; cookie。</target>
        </trans-unit>
        <trans-unit id="b88ea17862a7a6c14914e5065dd7470d56000b4f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#cmdoption-verbosity&quot;&gt;&lt;code&gt;--verbosity&lt;/code&gt;&lt;/a&gt; to specify the amount of notification and debug information that &lt;code&gt;django-admin&lt;/code&gt; prints to the console.</source>
          <target state="translated">使用&lt;a href=&quot;#cmdoption-verbosity&quot;&gt; &lt;code&gt;--verbosity&lt;/code&gt; &lt;/a&gt;指定 &lt;code&gt;django-admin&lt;/code&gt; 打印到控制台的通知和调试信息的数量。</target>
        </trans-unit>
        <trans-unit id="5707b3a7949cc072230b7fe1e71e763576d50451" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt; to verify a set of credentials. It takes credentials as keyword arguments, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; for the default case, checks them against each &lt;a href=&quot;customizing#authentication-backends&quot;&gt;authentication backend&lt;/a&gt;, and returns a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object if the credentials are valid for a backend. If the credentials aren&amp;rsquo;t valid for any backend or if a backend raises &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;, it returns &lt;code&gt;None&lt;/code&gt;. For example:</source>
          <target state="translated">使用&lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt; &lt;code&gt;authenticate()&lt;/code&gt; &lt;/a&gt;验证一组凭据。它使用凭据作为默认情况下的关键字参数， &lt;code&gt;username&lt;/code&gt; 和 &lt;code&gt;password&lt;/code&gt; ，并针对每个&lt;a href=&quot;customizing#authentication-backends&quot;&gt;身份验证后端&lt;/a&gt;检查它们，如果凭据对后端有效，则返回&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;对象。如果凭据对于任何后端无效，或者后端引发&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;，则返回 &lt;code&gt;None&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="faa6d9f7f8e0a5e0ca7a29abd763d5e935b14263" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; to extract all the features and place them in the database:</source>
          <target state="translated">使用&lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; &lt;/a&gt;提取所有功能并将它们放置在数据库中：</target>
        </trans-unit>
        <trans-unit id="b8b2029e079f8927cefb4c2e337ab8a65848b660" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt; by adding it to your model explicitly. For example:</source>
          <target state="translated">通过将&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;明确添加到模型中来使用它。例如：</target>
        </trans-unit>
        <trans-unit id="eabc3f3ec2fd97c8a006e18a6962ea0f30a4edde" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#django.forms.Form.get_initial_for_field&quot;&gt;&lt;code&gt;get_initial_for_field()&lt;/code&gt;&lt;/a&gt; to retrieve initial data for a form field. It retrieves data from &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;Form.initial&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fields#django.forms.Field.initial&quot;&gt;&lt;code&gt;Field.initial&lt;/code&gt;&lt;/a&gt;, in that order, and evaluates any callable initial values.</source>
          <target state="translated">使用&lt;a href=&quot;#django.forms.Form.get_initial_for_field&quot;&gt; &lt;code&gt;get_initial_for_field()&lt;/code&gt; &lt;/a&gt;检索表单字段的初始数据。它按该顺序从&lt;a href=&quot;#django.forms.Form.initial&quot;&gt; &lt;code&gt;Form.initial&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;fields#django.forms.Field.initial&quot;&gt; &lt;code&gt;Field.initial&lt;/code&gt; 中&lt;/a&gt;检索数据，并评估所有可调用的初始值。</target>
        </trans-unit>
        <trans-unit id="67b7653ccb00ad1f07983205fa648a2da3bc1a79" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt; to declare the initial value of form fields at runtime. For example, you might want to fill in a &lt;code&gt;username&lt;/code&gt; field with the username of the current session.</source>
          <target state="translated">使用&lt;a href=&quot;#django.forms.Form.initial&quot;&gt; &lt;code&gt;initial&lt;/code&gt; &lt;/a&gt;在运行时声明表单字段的初始值。例如，您可能想用当前会话的用户名填写 &lt;code&gt;username&lt;/code&gt; 段。</target>
        </trans-unit>
        <trans-unit id="a115779617d9a80d8bced3b6f45fe8aa24508a8d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../ref/models/expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; to filter based on other fields within the same model.</source>
          <target state="translated">使用&lt;a href=&quot;../../ref/models/expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;基于同一模型中的其他字段进行过滤。</target>
        </trans-unit>
        <trans-unit id="02e5b5e781f26d3896200a3fedaffd73434d32fd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.defer&quot;&gt;&lt;code&gt;defer()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.only&quot;&gt;&lt;code&gt;only()&lt;/code&gt;&lt;/a&gt; if there are database columns you know that you won&amp;rsquo;t need (or won&amp;rsquo;t need in most cases) to avoid loading them. Note that if you &lt;em&gt;do&lt;/em&gt; use them, the ORM will have to go and get them in a separate query, making this a pessimization if you use it inappropriately.</source>
          <target state="translated">如果您知道不需要（或在大多数情况下不需要）数据库以避免加载它们，请使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.defer&quot;&gt; &lt;code&gt;defer()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.only&quot;&gt; &lt;code&gt;only()&lt;/code&gt; &lt;/a&gt;。请注意，如果您&lt;em&gt;确实&lt;/em&gt;使用它们，那么ORM将不得不去将它们放在单独的查询中，如果使用不当，这将使其成为一种悲观。</target>
        </trans-unit>
        <trans-unit id="a7ebce217ada5930342b97afbff9c6a1d7a61384" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktrans&quot;&gt;&lt;code&gt;blocktrans&lt;/code&gt;&lt;/a&gt; to pluralize translated strings.</source>
          <target state="translated">使用&lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktrans&quot;&gt; &lt;code&gt;blocktrans&lt;/code&gt; &lt;/a&gt;将翻译后的字符串复数。</target>
        </trans-unit>
        <trans-unit id="2f3408c4b2377d425e900a567a5100459eaeb6e6" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktranslate&quot;&gt;&lt;code&gt;blocktranslate&lt;/code&gt;&lt;/a&gt; to pluralize translated strings.</source>
          <target state="translated">使用&lt;a href=&quot;../../topics/i18n/translation#std:templatetag-blocktranslate&quot;&gt; &lt;code&gt;blocktranslate&lt;/code&gt; &lt;/a&gt;将翻译后的字符串复数。</target>
        </trans-unit>
        <trans-unit id="cf6137c66ab9c8f60411f6806750837507be1304" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../ref/middleware#http-strict-transport-security&quot;&gt;HTTP Strict Transport Security&lt;/a&gt; (HSTS)</source>
          <target state="translated">使用&lt;a href=&quot;../ref/middleware#http-strict-transport-security&quot;&gt;HTTP严格传输安全性&lt;/a&gt;（HSTS）</target>
        </trans-unit>
        <trans-unit id="425757bec238aca8c7f19955c39460f9752fea04" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;aggregation&quot;&gt;annotate to do aggregation in the database&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;aggregation&quot;&gt;注释在数据库中进行聚合&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="43bcd1ae26176a1479c056894d22162dbac7d218" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;constraints#django.db.models.UniqueConstraint&quot;&gt;&lt;code&gt;UniqueConstraint&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&quot;#django.db.models.Options.constraints&quot;&gt;&lt;code&gt;constraints&lt;/code&gt;&lt;/a&gt; option instead.</source>
          <target state="translated">请将&lt;a href=&quot;constraints#django.db.models.UniqueConstraint&quot;&gt; &lt;code&gt;UniqueConstraint&lt;/code&gt; &lt;/a&gt;与&lt;a href=&quot;#django.db.models.Options.constraints&quot;&gt; &lt;code&gt;constraints&lt;/code&gt; &lt;/a&gt;选项一起使用。</target>
        </trans-unit>
        <trans-unit id="673bdba6a222578611d0a288f5ec5b900c3656f2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;F()&lt;/code&gt; and the &lt;code&gt;nulls_first&lt;/code&gt; or &lt;code&gt;nulls_last&lt;/code&gt; keyword argument to &lt;a href=&quot;#django.db.models.Expression.asc&quot;&gt;&lt;code&gt;Expression.asc()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.db.models.Expression.desc&quot;&gt;&lt;code&gt;desc()&lt;/code&gt;&lt;/a&gt; to control the ordering of a field&amp;rsquo;s null values. By default, the ordering depends on your database.</source>
          <target state="translated">使用 &lt;code&gt;F()&lt;/code&gt; 和&lt;a href=&quot;#django.db.models.Expression.asc&quot;&gt; &lt;code&gt;Expression.asc()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#django.db.models.Expression.desc&quot;&gt; &lt;code&gt;desc()&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;nulls_first&lt;/code&gt; 或 &lt;code&gt;nulls_last&lt;/code&gt; 关键字参数来控制字段的空值的顺序。默认情况下，顺序取决于您的数据库。</target>
        </trans-unit>
        <trans-unit id="a431ca1748877571cbf4c61df7ba6ea2350ba7ff" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;MultiEmailField&lt;/code&gt; like any other form field. When the &lt;code&gt;is_valid()&lt;/code&gt; method is called on the form, the &lt;code&gt;MultiEmailField.clean()&lt;/code&gt; method will be run as part of the cleaning process and it will, in turn, call the custom &lt;code&gt;to_python()&lt;/code&gt; and &lt;code&gt;validate()&lt;/code&gt; methods.</source>
          <target state="translated">像其他任何表单字段一样使用 &lt;code&gt;MultiEmailField&lt;/code&gt; 。在 &lt;code&gt;is_valid()&lt;/code&gt; 上调用is_valid（）方法时， &lt;code&gt;MultiEmailField.clean()&lt;/code&gt; 方法将在清理过程中运行，然后依次调用自定义的 &lt;code&gt;to_python()&lt;/code&gt; 和 &lt;code&gt;validate()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="73dfa9df450263eee20a485f1cee8b25c4267cbf" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;OuterRef&lt;/code&gt; when a queryset in a &lt;code&gt;Subquery&lt;/code&gt; needs to refer to a field from the outer query. It acts like an &lt;a href=&quot;#django.db.models.F&quot;&gt;&lt;code&gt;F&lt;/code&gt;&lt;/a&gt; expression except that the check to see if it refers to a valid field isn&amp;rsquo;t made until the outer queryset is resolved.</source>
          <target state="translated">当 &lt;code&gt;Subquery&lt;/code&gt; 中的查询集需要引用外部查询中的字段时，请使用 &lt;code&gt;OuterRef&lt;/code&gt; 。它的作用类似于&lt;a href=&quot;#django.db.models.F&quot;&gt; &lt;code&gt;F&lt;/code&gt; &lt;/a&gt;表达式，只是在解析外部查询集之前不会检查它是否指向有效字段。</target>
        </trans-unit>
        <trans-unit id="89f3f8ce3f4a6a927b77694be46ffaa70b2a1af3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;QuerySet.count()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;QuerySet.count()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8215431606919c07a39ea4ee01eb6193038c5f6a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;QuerySet.defer()&lt;/code&gt; and &lt;code&gt;only()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;QuerySet.defer()&lt;/code&gt; 和 &lt;code&gt;only()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38e324fb9baf782813621cb43f1170931e8418f2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;QuerySet.exists()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;QuerySet.exists()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e205b5dd8f99b942ca1134ca580322ffd0800b21" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;QuerySet.select_related()&lt;/code&gt; and &lt;code&gt;prefetch_related()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;QuerySet.select_related()&lt;/code&gt; 和 &lt;code&gt;prefetch_related()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f15950f279fea65601a40f674ab6995cadb1dea" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;QuerySet.update()&lt;/code&gt; and &lt;code&gt;delete()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;QuerySet.update()&lt;/code&gt; 和 &lt;code&gt;delete()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6946ee8fcbac1d731f74e4e7337c8fdfcc1dc24b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;QuerySet.values()&lt;/code&gt; and &lt;code&gt;values_list()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;QuerySet.values()&lt;/code&gt; 和 &lt;code&gt;values_list()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="147814ea5cc7235ff99a4852324abde1ca2308d3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;RawSQL&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;RawSQL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="49a9d4f189179c274ac18fdbf300b78cd384ad75" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;alters_data&lt;/code&gt; where appropriate</source>
          <target state="translated">在适当的地方使用 &lt;code&gt;alters_data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="28219df422141245465188f8b0c9a06afcdf36c6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;condition&lt;/code&gt; when testing both conditions</source>
          <target state="translated">使用 &lt;code&gt;condition&lt;/code&gt; 测试两个条件时，</target>
        </trans-unit>
        <trans-unit id="2ebedbe3df550f0423eae393d1b0c0c03fa68aed" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;domain&lt;/code&gt; if you want to set a cross-domain cookie. For example, &lt;code&gt;domain=&quot;example.com&quot;&lt;/code&gt; will set a cookie that is readable by the domains www.example.com, blog.example.com, etc. Otherwise, a cookie will only be readable by the domain that set it.</source>
          <target state="translated">如果要设置跨域Cookie，请使用 &lt;code&gt;domain&lt;/code&gt; 。例如， &lt;code&gt;domain=&quot;example.com&quot;&lt;/code&gt; 将设置可被域www.example.com，blog.example.com等读取的cookie。否则，仅可被设置该cookie的域读取cookie。</target>
        </trans-unit>
        <trans-unit id="a2cba934b1b1094982655d010aa56fde400c6c7b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;explain()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;explain()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5ad41fcd7b19417f7cc2f56d695fd8d0b93ee38" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;force_str()&lt;/code&gt; in preference to &lt;code&gt;smart_str()&lt;/code&gt; in these places. Tag rendering and filter calls occur as the template is being rendered, so there is no advantage to postponing the conversion of lazy translation objects into strings. It&amp;rsquo;s easier to work solely with strings at that point.</source>
          <target state="translated">在这些位置，优先于 &lt;code&gt;smart_str()&lt;/code&gt; 使用 &lt;code&gt;force_str()&lt;/code&gt; 。标记渲染和过滤器调用在渲染模板时发生，因此延迟延迟转换对象到字符串的转换没有任何好处。此时，仅使用字符串会更容易。</target>
        </trans-unit>
        <trans-unit id="4a6663e350ecc6b0449be40f8da20b9d7d95a7e3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;httponly=True&lt;/code&gt; if you want to prevent client-side JavaScript from having access to the cookie.</source>
          <target state="translated">如果要阻止客户端JavaScript访问cookie，请使用 &lt;code&gt;httponly=True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c78ed189dc1baa114964d1295b64425b5c52765c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;iterator()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;iterator()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9213d5b1a951ca202f1c25340fb468f74b4053ef" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;list_display_links&lt;/code&gt; to control if and which fields in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt; should be linked to the &amp;ldquo;change&amp;rdquo; page for an object.</source>
          <target state="translated">使用 &lt;code&gt;list_display_links&lt;/code&gt; 来控制，如果和这领域&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;list_display&lt;/code&gt; &lt;/a&gt;应与&amp;ldquo;变&amp;rdquo;的页面对象。</target>
        </trans-unit>
        <trans-unit id="1bc5d05f5409556416ced1c1d82b7a1ccd5dc47b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ogrinfo&lt;/code&gt; to examine spatial data</source>
          <target state="translated">使用 &lt;code&gt;ogrinfo&lt;/code&gt; 检查空间数据</target>
        </trans-unit>
        <trans-unit id="e40043bd2f914fa16fff5cf300f8712f9ad217ad" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;samesite='None'&lt;/code&gt; (string) to explicitly state that this cookie is sent with all same-site and cross-site requests.</source>
          <target state="translated">使用 &lt;code&gt;samesite='None'&lt;/code&gt; （字符串）来明确声明此cookie是与所有相同站点和跨站点请求一起发送的。</target>
        </trans-unit>
        <trans-unit id="c94dcec38277e752c427a8c536ed2d99bca5ac9c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;samesite='Strict'&lt;/code&gt; or &lt;code&gt;samesite='Lax'&lt;/code&gt; to tell the browser not to send this cookie when performing a cross-origin request. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite&quot;&gt;SameSite&lt;/a&gt; isn&amp;rsquo;t supported by all browsers, so it&amp;rsquo;s not a replacement for Django&amp;rsquo;s CSRF protection, but rather a defense in depth measure.</source>
          <target state="translated">使用 &lt;code&gt;samesite='Strict'&lt;/code&gt; 或 &lt;code&gt;samesite='Lax'&lt;/code&gt; 告诉浏览器在执行跨域请求时不要发送此cookie。并非所有浏览器都支持&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite&quot;&gt;SameSite&lt;/a&gt;，因此它不能替代Django的CSRF保护，而是一种深度防御措施。</target>
        </trans-unit>
        <trans-unit id="2426b3cdda0816d837536846ea97140289d9e4e0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;samesite='Strict'&lt;/code&gt; or &lt;code&gt;samesite='Lax'&lt;/code&gt; to tell the browser not to send this cookie when performing a cross-origin request. &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; isn&amp;rsquo;t supported by all browsers, so it&amp;rsquo;s not a replacement for Django&amp;rsquo;s CSRF protection, but rather a defense in depth measure.</source>
          <target state="translated">使用 &lt;code&gt;samesite='Strict'&lt;/code&gt; 或 &lt;code&gt;samesite='Lax'&lt;/code&gt; 告诉浏览器在执行跨域请求时不要发送此cookie。并非所有浏览器都支持&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;，因此它不能替代Django的CSRF保护，而是一种深度防御措施。</target>
        </trans-unit>
        <trans-unit id="771c2d91047462c6aa10efae966845132574bd34" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;secure=True&lt;/code&gt; if you want the cookie to be only sent to the server when a request is made with the &lt;code&gt;https&lt;/code&gt; scheme.</source>
          <target state="translated">如果您希望仅在通过 &lt;code&gt;https&lt;/code&gt; 方案发出请求时将cookie发送到服务器，请使用 &lt;code&gt;secure=True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5c0671a0be6041e5f1d3866fb7667e4202e512d" translate="yes" xml:space="preserve">
          <source>Use Cases</source>
          <target state="translated">使用案例</target>
        </trans-unit>
        <trans-unit id="8c464023f52c6a7bc1e7e39151d666b9b2888a42" translate="yes" xml:space="preserve">
          <source>Use Django&amp;rsquo;s test client to establish that the correct template is being rendered and that the template is passed the correct context data.</source>
          <target state="translated">使用Django的测试客户端建立正确的模板，并向模板传递正确的上下文数据。</target>
        </trans-unit>
        <trans-unit id="c7f9bb01a81fa04cc6857cf3f16846e6964d79eb" translate="yes" xml:space="preserve">
          <source>Use a comma separated list of OGR field names to add the &lt;code&gt;blank=True&lt;/code&gt; keyword option to the field definition. Set with &lt;code&gt;true&lt;/code&gt; to apply to all applicable fields.</source>
          <target state="translated">使用OGR字段名称的逗号分隔列表将 &lt;code&gt;blank=True&lt;/code&gt; 关键字选项添加到字段定义中。设置为 &lt;code&gt;true&lt;/code&gt; 可应用于所有适用字段。</target>
        </trans-unit>
        <trans-unit id="13fd6dc8b13cffcb7da66d455a2d1979aa29213e" translate="yes" xml:space="preserve">
          <source>Use a comma separated list of OGR field names to add the &lt;code&gt;null=True&lt;/code&gt; keyword option to the field definition. Set with &lt;code&gt;true&lt;/code&gt; to apply to all applicable fields.</source>
          <target state="translated">使用OGR字段名称的逗号分隔列表将 &lt;code&gt;null=True&lt;/code&gt; 关键字选项添加到字段定义。设置为 &lt;code&gt;true&lt;/code&gt; 可应用于所有适用字段。</target>
        </trans-unit>
        <trans-unit id="36f7c9e9d0df5297ad93cb8b17f1c7c0e8a1c1b0" translate="yes" xml:space="preserve">
          <source>Use a comma separated list of OGR float fields to generate &lt;a href=&quot;../../models/fields#django.db.models.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt; instead of the default &lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt;. Set to &lt;code&gt;true&lt;/code&gt; to apply to all OGR float fields.</source>
          <target state="translated">使用OGR浮点字段的逗号分隔列表来生成&lt;a href=&quot;../../models/fields#django.db.models.DecimalField&quot;&gt; &lt;code&gt;DecimalField&lt;/code&gt; ,&lt;/a&gt;而不是默认的&lt;a href=&quot;../../models/fields#django.db.models.FloatField&quot;&gt; &lt;code&gt;FloatField&lt;/code&gt; &lt;/a&gt;。设置为 &lt;code&gt;true&lt;/code&gt; 可应用于所有OGR浮动字段。</target>
        </trans-unit>
        <trans-unit id="6d3904e3ba5481071c26a0eb472b6a7d17bd7ed2" translate="yes" xml:space="preserve">
          <source>Use a dot (&lt;code&gt;.&lt;/code&gt;) to access attributes of a variable.</source>
          <target state="translated">使用点（ &lt;code&gt;.&lt;/code&gt; ）来访问变量的属性。</target>
        </trans-unit>
        <trans-unit id="6eb1215cc5d44336b81b57e644156b179a8da43c" translate="yes" xml:space="preserve">
          <source>Use a subset of Python&amp;rsquo;s array-slicing syntax to limit your &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; to a certain number of results. This is the equivalent of SQL&amp;rsquo;s &lt;code&gt;LIMIT&lt;/code&gt; and &lt;code&gt;OFFSET&lt;/code&gt; clauses.</source>
          <target state="translated">使用Python的数组切片语法的子集将&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;限制为一定数量的结果。这等效于SQL的 &lt;code&gt;LIMIT&lt;/code&gt; 和 &lt;code&gt;OFFSET&lt;/code&gt; 子句。</target>
        </trans-unit>
        <trans-unit id="47dcd88a250016a33b6a0e274696acbfb243015e" translate="yes" xml:space="preserve">
          <source>Use a web server of your choice to serve the files. &lt;a href=&quot;deployment&quot;&gt;Deploying static files&lt;/a&gt; covers some common deployment strategies for static files.</source>
          <target state="translated">使用您选择的Web服务器来提供文件。&lt;a href=&quot;deployment&quot;&gt;部署静态文件&lt;/a&gt;涵盖了一些常见的静态文件部署策略。</target>
        </trans-unit>
        <trans-unit id="71475c2e9781cedd3ba308fda2b976cdb0297ba9" translate="yes" xml:space="preserve">
          <source>Use an &lt;code&gt;Alias&lt;/code&gt; directive, as demonstrated above, to alias the appropriate URL (probably &lt;a href=&quot;../../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; + &lt;code&gt;admin/&lt;/code&gt;) to the actual location of the admin files.</source>
          <target state="translated">如上所述，使用 &lt;code&gt;Alias&lt;/code&gt; 指令将适当的URL（可能是&lt;a href=&quot;../../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; + &lt;code&gt;admin/&lt;/code&gt; ）别名为管理文件的实际位置。</target>
        </trans-unit>
        <trans-unit id="237ebf3a163bef9aa3fb50dced0002df72a644d8" translate="yes" xml:space="preserve">
          <source>Use bulk methods</source>
          <target state="translated">使用批量方法</target>
        </trans-unit>
        <trans-unit id="e2ad887cdae670908c696d1bffcce9331b73a201" translate="yes" xml:space="preserve">
          <source>Use bulk methods to reduce the number of SQL statements.</source>
          <target state="translated">使用批量方法来减少SQL语句的数量。</target>
        </trans-unit>
        <trans-unit id="a92a268cbbb61d3b1bd3e7383548f34ce09d080e" translate="yes" xml:space="preserve">
          <source>Use foreign key values directly</source>
          <target state="translated">直接使用外键值</target>
        </trans-unit>
        <trans-unit id="674e22f8e4da7fd026af00605b3af864518826eb" translate="yes" xml:space="preserve">
          <source>Use generic views: Less code is better</source>
          <target state="translated">使用通用视图。代码越少越好</target>
        </trans-unit>
        <trans-unit id="7fa9129374a97fe179ff72417908f6ac11cdecfe" translate="yes" xml:space="preserve">
          <source>Use in tests</source>
          <target state="translated">在测试中使用</target>
        </trans-unit>
        <trans-unit id="468ce6248630a798b80e9ce0a6e864a558940ec0" translate="yes" xml:space="preserve">
          <source>Use in-browser frameworks like &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; to test &lt;em&gt;rendered&lt;/em&gt; HTML and the &lt;em&gt;behavior&lt;/em&gt; of Web pages, namely JavaScript functionality. Django also provides special support for those frameworks; see the section on &lt;a href=&quot;#django.test.LiveServerTestCase&quot;&gt;&lt;code&gt;LiveServerTestCase&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">使用诸如&lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium之&lt;/a&gt;类的浏览器内框架来测试&lt;em&gt;渲染的&lt;/em&gt; HTML和Web页面的&lt;em&gt;行为&lt;/em&gt;，即JavaScript功能。Django还为这些框架提供了特殊的支持。有关更多详细信息，请参见&lt;a href=&quot;#django.test.LiveServerTestCase&quot;&gt; &lt;code&gt;LiveServerTestCase&lt;/code&gt; &lt;/a&gt;上的部分。</target>
        </trans-unit>
        <trans-unit id="db7f07507027eede9790c3fae489d053cb736298" translate="yes" xml:space="preserve">
          <source>Use it if your single Django installation powers more than one site and you need to differentiate between those sites in some way.</source>
          <target state="translated">如果你的单个Django安装支持多个站点,并且你需要以某种方式区分这些站点,那么就使用它。</target>
        </trans-unit>
        <trans-unit id="6cbb4767566e4dcaa84e686249abc74932215302" translate="yes" xml:space="preserve">
          <source>Use lowercase table names for MariaDB and MySQL</source>
          <target state="translated">在MariaDB和MySQL中使用小写的表名。</target>
        </trans-unit>
        <trans-unit id="4bc2e22dd4f2f8998f1464d31b56aa90fedd6e89" translate="yes" xml:space="preserve">
          <source>Use mapping keys instead of positional formatting. This enables putting the variables in any order or omitting them altogether when rewriting the message:</source>
          <target state="translated">使用映射键代替位置格式化。这样可以在重写消息时,将变量按任意顺序排列或完全省略。</target>
        </trans-unit>
        <trans-unit id="926b3650608c51ce2c85dfb00905947918094f40" translate="yes" xml:space="preserve">
          <source>Use normal Python strings as dictionary keys on &lt;code&gt;request.session&lt;/code&gt;. This is more of a convention than a hard-and-fast rule.</source>
          <target state="translated">在 &lt;code&gt;request.session&lt;/code&gt; 上使用普通的Python字符串作为字典键。这不是一个固定的规则，而是更多的约定。</target>
        </trans-unit>
        <trans-unit id="799cfa51047a6862b506166a580b500402cd6528" translate="yes" xml:space="preserve">
          <source>Use of &lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt; requires GDAL.</source>
          <target state="translated">使用&lt;a href=&quot;#django.contrib.gis.utils.LayerMapping&quot;&gt; &lt;code&gt;LayerMapping&lt;/code&gt; &lt;/a&gt;需要GDAL。</target>
        </trans-unit>
        <trans-unit id="b6a6521f8515e4e8e0424eb6999a30064b3c8532" translate="yes" xml:space="preserve">
          <source>Use of &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; means that we store &lt;code&gt;user.emails.all&lt;/code&gt; in a variable for later use, allowing its cache to be re-used.</source>
          <target state="translated">使用&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;意味着我们将 &lt;code&gt;user.emails.all&lt;/code&gt; 存储在一个变量中以备后用，从而允许其缓存被重复使用。</target>
        </trans-unit>
        <trans-unit id="3af60da1cd19f7153b4755b868ace44fd17204cb" translate="yes" xml:space="preserve">
          <source>Use of actual parentheses in the &lt;a href=&quot;#std:templatetag-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; tag is invalid syntax. If you need them to indicate precedence, you should use nested &lt;a href=&quot;#std:templatetag-if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; tags.</source>
          <target state="translated">在&lt;a href=&quot;#std:templatetag-if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;标记中使用实际括号是无效的语法。如果需要它们来指示优先级，则应使用嵌套的&lt;a href=&quot;#std:templatetag-if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;标记。</target>
        </trans-unit>
        <trans-unit id="3f753d3c87fb4244c8f2a179a66ab2d2499de2a2" translate="yes" xml:space="preserve">
          <source>Use of both &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; clauses within the same tag is allowed, with &lt;code&gt;and&lt;/code&gt; having higher precedence than &lt;code&gt;or&lt;/code&gt; e.g.:</source>
          <target state="translated">允许在同一个标​​记中同时使用 &lt;code&gt;and&lt;/code&gt; 和 &lt;code&gt;or&lt;/code&gt; 子句， &lt;code&gt;and&lt;/code&gt; 具有比 &lt;code&gt;or&lt;/code&gt; 更高的优先级，例如：</target>
        </trans-unit>
        <trans-unit id="fadcdff675c6dec3efc2bd0991a40c1647c3f87e" translate="yes" xml:space="preserve">
          <source>Use of the decorator by itself is &lt;strong&gt;not recommended&lt;/strong&gt;, since if you forget to use it, you will have a security hole. The &amp;lsquo;belt and braces&amp;rsquo; strategy of using both is fine, and will incur minimal overhead.</source>
          <target state="translated">&lt;strong&gt;不建议&lt;/strong&gt;您单独使用装饰器，因为如果您忘记使用它，则会有安全漏洞。同时使用的&amp;ldquo;皮带和牙套&amp;rdquo;策略很好，并且将产生最小的开销。</target>
        </trans-unit>
        <trans-unit id="168fe6fb0a8b1323e7d3e9c6e7782e85d5cf7380" translate="yes" xml:space="preserve">
          <source>Use one of the &lt;a href=&quot;#built-in-template-form-renderers&quot;&gt;built-in template form renderers&lt;/a&gt; or implement your own. Custom renderers must implement a &lt;code&gt;render(template_name, context, request=None)&lt;/code&gt; method. It should return a rendered templates (as a string) or raise &lt;a href=&quot;../../topics/templates#django.template.TemplateDoesNotExist&quot;&gt;&lt;code&gt;TemplateDoesNotExist&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;#built-in-template-form-renderers&quot;&gt;内置模板表单渲染器之一&lt;/a&gt;或实现自己的模板渲染器。自定义渲染器必须实现 &lt;code&gt;render(template_name, context, request=None)&lt;/code&gt; 方法。它应该返回渲染的模板（作为字符串）或引发&lt;a href=&quot;../../topics/templates#django.template.TemplateDoesNotExist&quot;&gt; &lt;code&gt;TemplateDoesNotExist&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e9f3ee53edd4d79ad0917afcf58b18bf5f912db" translate="yes" xml:space="preserve">
          <source>Use raw SQL</source>
          <target state="translated">使用原始SQL</target>
        </trans-unit>
        <trans-unit id="8980332c0881d0b34f4edc6b2343f3349549c03b" translate="yes" xml:space="preserve">
          <source>Use standard DB optimization techniques</source>
          <target state="translated">使用标准的数据库优化技术</target>
        </trans-unit>
        <trans-unit id="b7af8324f8e5f08e6603c29ec67fea93b2366801" translate="yes" xml:space="preserve">
          <source>Use strings when creating templates manually:</source>
          <target state="translated">手动创建模板时使用字符串。</target>
        </trans-unit>
        <trans-unit id="a04cbe6e886cef74243cae3f5258179ecdc27cc5" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#django.db.models.Options.indexes&quot;&gt;&lt;code&gt;indexes&lt;/code&gt;&lt;/a&gt; option instead.</source>
          <target state="translated">请改用&lt;a href=&quot;#django.db.models.Options.indexes&quot;&gt; &lt;code&gt;indexes&lt;/code&gt; &lt;/a&gt;选项。</target>
        </trans-unit>
        <trans-unit id="195d0b7a96d01751ad3c6a736e49af7d7d67f1fb" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../../ref/settings#std:setting-CSRF_FAILURE_VIEW&quot;&gt;&lt;code&gt;CSRF_FAILURE_VIEW&lt;/code&gt;&lt;/a&gt; setting to override the CSRF error view.</source>
          <target state="translated">使用&lt;a href=&quot;../../ref/settings#std:setting-CSRF_FAILURE_VIEW&quot;&gt; &lt;code&gt;CSRF_FAILURE_VIEW&lt;/code&gt; &lt;/a&gt;设置覆盖CSRF错误视图。</target>
        </trans-unit>
        <trans-unit id="2c4a2e97ff34babbdaddd31936e6dba7db0b602d" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../ref/django-admin#cmdoption-squashmigrations-squashed-name&quot;&gt;&lt;code&gt;squashmigrations --squashed-name&lt;/code&gt;&lt;/a&gt; option if you want to set the name of the squashed migration rather than use an autogenerated one.</source>
          <target state="translated">如果要设置压缩迁移的名称，请使用&lt;a href=&quot;../ref/django-admin#cmdoption-squashmigrations-squashed-name&quot;&gt; &lt;code&gt;squashmigrations --squashed-name&lt;/code&gt; &lt;/a&gt;选项，而不要使用自动生成的迁移名称。</target>
        </trans-unit>
        <trans-unit id="c97168807f7db5ba19b0d53c4a581637693718d5" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--insecure&lt;/code&gt; option to force serving of static files with the staticfiles app even if the &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting is &lt;code&gt;False&lt;/code&gt;. By using this you acknowledge the fact that it&amp;rsquo;s &lt;strong&gt;grossly inefficient&lt;/strong&gt; and probably &lt;strong&gt;insecure&lt;/strong&gt;. This is only intended for local development, should &lt;strong&gt;never be used in production&lt;/strong&gt; and is only available if the staticfiles app is in your project&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">使用 &lt;code&gt;--insecure&lt;/code&gt; 选项，即使&lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;False&lt;/code&gt; ,也可以通过staticfiles应用程序强制提供静态文件。通过使用此方法，您承认它的&lt;strong&gt;效率极低&lt;/strong&gt;并且可能&lt;strong&gt;不安全&lt;/strong&gt;。这仅用于本地开发，&lt;strong&gt;切勿在生产环境中使用，&lt;/strong&gt;并且仅当staticfiles应用程序在项目的&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;设置中时才可用。</target>
        </trans-unit>
        <trans-unit id="f79eb5d4bf26767f280725b4453ea3b9036ab9f2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--nostatic&lt;/code&gt; option to disable serving of static files with the staticfiles app entirely. This option is only available if the staticfiles app is in your project&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">使用 &lt;code&gt;--nostatic&lt;/code&gt; 选项可以完全禁用通过staticfiles应用提供的静态文件。仅当staticfiles应用程序位于项目的&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;设置中时，此选项才可用。</target>
        </trans-unit>
        <trans-unit id="d78e1141d368d02f95a8c029e41dfea2eb926a3e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--settings&lt;/code&gt; command-line argument to specify the settings manually:</source>
          <target state="translated">使用 &lt;code&gt;--settings&lt;/code&gt; 命令行参数手动指定设置：</target>
        </trans-unit>
        <trans-unit id="7246aeb10a269f469d009d82937e996e37d6cbb2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;auto_id&lt;/code&gt; argument to the &lt;code&gt;Form&lt;/code&gt; constructor to control the &lt;code&gt;id&lt;/code&gt; and label behavior. This argument must be &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; or a string.</source>
          <target state="translated">使用 &lt;code&gt;Form&lt;/code&gt; 构造函数的 &lt;code&gt;auto_id&lt;/code&gt; 参数来控制 &lt;code&gt;id&lt;/code&gt; 和标签的行为。此参数必须为 &lt;code&gt;True&lt;/code&gt; ， &lt;code&gt;False&lt;/code&gt; 或字符串。</target>
        </trans-unit>
        <trans-unit id="9e7f1979abd58b8d73106b0e254494e0165dcb11" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;backend&lt;/code&gt; in &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, if there is only one.</source>
          <target state="translated">使用 &lt;code&gt;backend&lt;/code&gt; 的&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;，如果只有一个。</target>
        </trans-unit>
        <trans-unit id="7314d0d878c7e5d009d660112540a0ec2313291e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;databases&lt;/code&gt; class attribute on the test class to request transaction wrapping against non-&lt;code&gt;default&lt;/code&gt; databases.</source>
          <target state="translated">使用测试类上的 &lt;code&gt;databases&lt;/code&gt; 类属性可以请求针对非 &lt;code&gt;default&lt;/code&gt; 数据库的事务包装。</target>
        </trans-unit>
        <trans-unit id="0bddc0e0b627ae8f430241cb75e4dcf9b74bf88d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;db_manager()&lt;/code&gt; method on managers to give managers access to a non-default database.</source>
          <target state="translated">在管理器上使用 &lt;code&gt;db_manager()&lt;/code&gt; 方法为管理器提供对非默认数据库的访问权限。</target>
        </trans-unit>
        <trans-unit id="0fb541f6207f27bff691edd2dffb142b56ca8770" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;django.test.Client&lt;/code&gt; class to make requests.</source>
          <target state="translated">使用 &lt;code&gt;django.test.Client&lt;/code&gt; 类发出请求。</target>
        </trans-unit>
        <trans-unit id="b147ee672c2bf72b3de75374c5bcf4b120ebe8ad" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;fields&lt;/code&gt; option to make simple layout changes in the forms on the &amp;ldquo;add&amp;rdquo; and &amp;ldquo;change&amp;rdquo; pages such as showing only a subset of available fields, modifying their order, or grouping them into rows. For example, you could define a simpler version of the admin form for the &lt;a href=&quot;../flatpages#django.contrib.flatpages.models.FlatPage&quot;&gt;&lt;code&gt;django.contrib.flatpages.models.FlatPage&lt;/code&gt;&lt;/a&gt; model as follows:</source>
          <target state="translated">使用 &lt;code&gt;fields&lt;/code&gt; 选项可以在&amp;ldquo;添加&amp;rdquo;和&amp;ldquo;更改&amp;rdquo;页面上的表单中进行简单的布局更改，例如仅显示可用字段的子集，修改其顺序或将它们分组为行。例如，您可以为&lt;a href=&quot;../flatpages#django.contrib.flatpages.models.FlatPage&quot;&gt; &lt;code&gt;django.contrib.flatpages.models.FlatPage&lt;/code&gt; &lt;/a&gt;模型定义一个更简单的admin表单版本，如下所示：</target>
        </trans-unit>
        <trans-unit id="66c0a7c3ab2d4b6ce32d11c2ad994768fe859dab" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;has_changed()&lt;/code&gt; method on your &lt;code&gt;Form&lt;/code&gt; when you need to check if the form data has been changed from the initial data.</source>
          <target state="translated">使用 &lt;code&gt;has_changed()&lt;/code&gt; 你对方法 &lt;code&gt;Form&lt;/code&gt; 时，你需要检查表单数据已经从最初的数据变化。</target>
        </trans-unit>
        <trans-unit id="2073f8de8a9324d45506f7f1d7766391a7acbbb2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;page&lt;/code&gt; parameter in the URLconf. For example, this is what your URLconf might look like:</source>
          <target state="translated">在URLconf中使用 &lt;code&gt;page&lt;/code&gt; 参数。例如，这是您的URLconf可能的样子：</target>
        </trans-unit>
        <trans-unit id="2e1eff9da47574fb6d40ec57c08e57f5a6caef8b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;reverse()&lt;/code&gt; method to reverse the order in which a queryset&amp;rsquo;s elements are returned. Calling &lt;code&gt;reverse()&lt;/code&gt; a second time restores the ordering back to the normal direction.</source>
          <target state="translated">使用 &lt;code&gt;reverse()&lt;/code&gt; 方法可以反转查询集元素的返回顺序。第二次调用 &lt;code&gt;reverse()&lt;/code&gt; 会将顺序恢复为正常方向。</target>
        </trans-unit>
        <trans-unit id="28b553ecf519e86e702731f17010a94862c9bacf" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;safe&lt;/code&gt; parameter to pass characters which don&amp;rsquo;t require encoding. For example:</source>
          <target state="translated">使用 &lt;code&gt;safe&lt;/code&gt; 参数可以传递不需要编码的字符。例如：</target>
        </trans-unit>
        <trans-unit id="b54d8314cb5f5e0a81b5387709591ac9fcd1f324" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;through_defaults&lt;/code&gt; argument to specify values for the new &lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;intermediate model&lt;/a&gt; instance(s), if needed.</source>
          <target state="translated">如果需要，使用 &lt;code&gt;through_defaults&lt;/code&gt; 参数为新的&lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;中间模型&lt;/a&gt;实例指定值。</target>
        </trans-unit>
        <trans-unit id="c55a08e45d3a24c3db8d3e7e4a468fc8cc77a8c5" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;through_defaults&lt;/code&gt; argument to specify values for the new &lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;intermediate model&lt;/a&gt; instance(s), if needed. You can use callables as values in the &lt;code&gt;through_defaults&lt;/code&gt; dictionary and they will be evaluated once before creating any intermediate instance(s).</source>
          <target state="translated">如果需要，请使用 &lt;code&gt;through_defaults&lt;/code&gt; 参数为新的&lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;中间模型&lt;/a&gt;实例指定值。您可以在 &lt;code&gt;through_defaults&lt;/code&gt; 词典中将可调用对象用作值，在创建任何中间实例之前，它们将被评估一次。</target>
        </trans-unit>
        <trans-unit id="e26e529e4efab2ebcb50d871e4b69cdab7672804" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;through_defaults&lt;/code&gt; argument to specify values for the new &lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;intermediate model&lt;/a&gt; instance, if needed.</source>
          <target state="translated">如果需要，使用 &lt;code&gt;through_defaults&lt;/code&gt; 参数为新的&lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;中间模型&lt;/a&gt;实例指定值。</target>
        </trans-unit>
        <trans-unit id="00299d5442129e62418db109137565094fdc1859" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;through_defaults&lt;/code&gt; argument to specify values for the new &lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;intermediate model&lt;/a&gt; instance, if needed. You can use callables as values in the &lt;code&gt;through_defaults&lt;/code&gt; dictionary.</source>
          <target state="translated">如果需要，使用 &lt;code&gt;through_defaults&lt;/code&gt; 参数为新的&lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;中间模型&lt;/a&gt;实例指定值。您可以将callables用作 &lt;code&gt;through_defaults&lt;/code&gt; 词典中的值。</target>
        </trans-unit>
        <trans-unit id="b989c090a376edd8f435f925fcab6e32091865f4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;using&lt;/code&gt; keyword to &lt;code&gt;Model.save()&lt;/code&gt; to specify to which database the data should be saved.</source>
          <target state="translated">对 &lt;code&gt;Model.save()&lt;/code&gt; 使用 &lt;code&gt;using&lt;/code&gt; 关键字可以指定将数据保存到哪个数据库。</target>
        </trans-unit>
        <trans-unit id="edbbe62ae795b45dd28c47d176fb3603777b0547" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;with&lt;/code&gt; template tag</source>
          <target state="translated">使用 &lt;code&gt;with&lt;/code&gt; 模板标签</target>
        </trans-unit>
        <trans-unit id="9f2d0e0382932356709e4e95da891e0c79234a4b" translate="yes" xml:space="preserve">
          <source>Use the Source</source>
          <target state="translated">使用源头</target>
        </trans-unit>
        <trans-unit id="3c3a3a80d9ec31dd4d6f4f9b24722f06698ca2eb" translate="yes" xml:space="preserve">
          <source>Use the application registry for introspection</source>
          <target state="translated">使用申请登记处进行反省</target>
        </trans-unit>
        <trans-unit id="df83f6c0c040d0ed9c09cca8bf801454dd6a2d03" translate="yes" xml:space="preserve">
          <source>Use the arrow keys to move up and down.</source>
          <target state="translated">使用方向键上下移动。</target>
        </trans-unit>
        <trans-unit id="9f4cd031ac323a8a959f3b89c8cf7aecd47d103c" translate="yes" xml:space="preserve">
          <source>Use the function &lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_noop&quot;&gt;&lt;code&gt;django.utils.translation.gettext_noop()&lt;/code&gt;&lt;/a&gt; to mark a string as a translation string without translating it. The string is later translated from a variable.</source>
          <target state="translated">使用函数&lt;a href=&quot;../../ref/utils#django.utils.translation.gettext_noop&quot;&gt; &lt;code&gt;django.utils.translation.gettext_noop()&lt;/code&gt; &lt;/a&gt;将字符串标记为翻译字符串，而不进行翻译。字符串稍后会从变量中翻译出来。</target>
        </trans-unit>
        <trans-unit id="654becaa96db783b32aef610977406ee78e93386" translate="yes" xml:space="preserve">
          <source>Use the function &lt;a href=&quot;../../ref/utils#django.utils.translation.ngettext&quot;&gt;&lt;code&gt;django.utils.translation.ngettext()&lt;/code&gt;&lt;/a&gt; to specify pluralized messages.</source>
          <target state="translated">使用函数&lt;a href=&quot;../../ref/utils#django.utils.translation.ngettext&quot;&gt; &lt;code&gt;django.utils.translation.ngettext()&lt;/code&gt; &lt;/a&gt;指定复数消息。</target>
        </trans-unit>
        <trans-unit id="463b31d27922a85467ed487ebc5dc446cda7a316" translate="yes" xml:space="preserve">
          <source>Use the functions below to temporarily alter the value of settings in tests. Don&amp;rsquo;t manipulate &lt;code&gt;django.conf.settings&lt;/code&gt; directly as Django won&amp;rsquo;t restore the original values after such manipulations.</source>
          <target state="translated">使用以下功能临时更改测试中的设置值。不要直接操作 &lt;code&gt;django.conf.settings&lt;/code&gt; ，因为Django在此类操作后不会恢复原始值。</target>
        </trans-unit>
        <trans-unit id="6357e293c9348e9b53e809b3bd6b3ad353cf8a24" translate="yes" xml:space="preserve">
          <source>Use the lazy versions of translation functions in &lt;a href=&quot;../../ref/utils#module-django.utils.translation&quot;&gt;&lt;code&gt;django.utils.translation&lt;/code&gt;&lt;/a&gt; (easily recognizable by the &lt;code&gt;lazy&lt;/code&gt; suffix in their names) to translate strings lazily &amp;ndash; when the value is accessed rather than when they&amp;rsquo;re called.</source>
          <target state="translated">使用&lt;a href=&quot;../../ref/utils#module-django.utils.translation&quot;&gt; &lt;code&gt;django.utils.translation&lt;/code&gt; &lt;/a&gt;中转换函数的惰性版本（名称中的 &lt;code&gt;lazy&lt;/code&gt; 后缀可以轻松识别）来懒惰地转换字符串-当访问值而不是在调用它们时。</target>
        </trans-unit>
        <trans-unit id="66bd7221828ab630b45136de0b2000b60930fce0" translate="yes" xml:space="preserve">
          <source>Use the standard &lt;code&gt;django-admin&lt;/code&gt; script to create a project called &lt;code&gt;geodjango&lt;/code&gt;:</source>
          <target state="translated">使用标准的 &lt;code&gt;django-admin&lt;/code&gt; 脚本创建一个名为 &lt;code&gt;geodjango&lt;/code&gt; 的项目：</target>
        </trans-unit>
        <trans-unit id="539a53dc5ceeb04eb00c06aa1022fa833c54a91c" translate="yes" xml:space="preserve">
          <source>Use the template system</source>
          <target state="translated">使用模板系统</target>
        </trans-unit>
        <trans-unit id="3477abf22170421c5b4a2b5024e77f3f47b0432b" translate="yes" xml:space="preserve">
          <source>Use the value of the &lt;code&gt;user.backend&lt;/code&gt; attribute, if present. This allows pairing &lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt; sets the &lt;code&gt;user.backend&lt;/code&gt; attribute on the user object it returns.</source>
          <target state="translated">使用 &lt;code&gt;user.backend&lt;/code&gt; 属性的值（如果存在）。这允许配对&lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt; &lt;code&gt;authenticate()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.contrib.auth.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt;：&lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt; &lt;code&gt;authenticate()&lt;/code&gt; &lt;/a&gt;在返回的用户对象上设置 &lt;code&gt;user.backend&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="e6cd924e3a2586cf8fb3a7b49051617b7d3b2d1e" translate="yes" xml:space="preserve">
          <source>Use the value of the optional &lt;code&gt;backend&lt;/code&gt; argument, if provided.</source>
          <target state="translated">使用可选的 &lt;code&gt;backend&lt;/code&gt; 参数（如果提供）的值。</target>
        </trans-unit>
        <trans-unit id="10a17fd335f4333a3bc2b5d5e4806bfdb5de12b3" translate="yes" xml:space="preserve">
          <source>Use this backend to take advantage of external-to-Django-handled authentication. It authenticates using usernames passed in &lt;a href=&quot;../request-response#django.http.HttpRequest.META&quot;&gt;&lt;code&gt;request.META['REMOTE_USER']&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;../../howto/auth-remote-user&quot;&gt;Authenticating against REMOTE_USER&lt;/a&gt; documentation.</source>
          <target state="translated">使用此后端可利用外部到Django处理的身份验证。它使用&lt;a href=&quot;../request-response#django.http.HttpRequest.META&quot;&gt; &lt;code&gt;request.META['REMOTE_USER']&lt;/code&gt; &lt;/a&gt;传递的用户名进行身份验证。请参阅&lt;a href=&quot;../../howto/auth-remote-user&quot;&gt;根据REMOTE_USER&lt;/a&gt;进行身份验证文档。</target>
        </trans-unit>
        <trans-unit id="3d48b137a4ae0b003fae82778016f25c8cdf8fde" translate="yes" xml:space="preserve">
          <source>Use this class if you want access to all of the mechanisms which parse the command-line arguments and work out what code to call in response; if you don&amp;rsquo;t need to change any of that behavior, consider using one of its &lt;a href=&quot;#ref-basecommand-subclasses&quot;&gt;subclasses&lt;/a&gt;.</source>
          <target state="translated">如果要访问所有解析命令行参数并确定要响应的代码的机制，请使用此类。如果您不需要更改任何行为，请考虑使用其&lt;a href=&quot;#ref-basecommand-subclasses&quot;&gt;子类之一&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4177727acdea78a12afa02fb86eb57a7b1ea27d2" translate="yes" xml:space="preserve">
          <source>Use this command to generate SQL which will fix cases where a sequence is out of sync with its automatically incremented field data.</source>
          <target state="translated">使用此命令生成SQL,它将修复序列与其自动递增的字段数据不同步的情况。</target>
        </trans-unit>
        <trans-unit id="1d05212e77f4ec328f6230076fc920bee7136265" translate="yes" xml:space="preserve">
          <source>Use this if you have a legacy database with which you&amp;rsquo;d like to use Django. The script will inspect the database and create a model for each table within it.</source>
          <target state="translated">如果您有要使用Django的旧数据库，请使用此选项。该脚本将检查数据库并为其中的每个表创建一个模型。</target>
        </trans-unit>
        <trans-unit id="8a1c5f439620e6d3968f1f5086c4587f9ce3ad99" translate="yes" xml:space="preserve">
          <source>Use this if you have constant strings that should be stored in the source language because they are exchanged over systems or users &amp;ndash; such as strings in a database &amp;ndash; but should be translated at the last possible point in time, such as when the string is presented to the user.</source>
          <target state="translated">如果您有常量字符串应存储在源语言中，请使用此字符串，因为它们是通过系统或用户交换的（例如数据库中的字符串），但应在最后可能的时间点（例如，在显示字符串时）进行翻译给用户。</target>
        </trans-unit>
        <trans-unit id="ade054ba01a453d797cf828018cfa0e2a81a6062" translate="yes" xml:space="preserve">
          <source>Use this index only on PostgreSQL 10 and later</source>
          <target state="translated">只在PostgreSQL 10及以后的版本中使用此索引。</target>
        </trans-unit>
        <trans-unit id="4b41c1f6065fc6443e013c22c93e47c223118e53" translate="yes" xml:space="preserve">
          <source>Use this method anytime you need to identify an error by its &lt;code&gt;code&lt;/code&gt;. This enables things like rewriting the error&amp;rsquo;s message or writing custom logic in a view when a given error is present. It can also be used to serialize the errors in a custom format (e.g. XML); for instance, &lt;a href=&quot;#django.forms.Form.errors.as_json&quot;&gt;&lt;code&gt;as_json()&lt;/code&gt;&lt;/a&gt; relies on &lt;code&gt;as_data()&lt;/code&gt;.</source>
          <target state="translated">每当您需要通过错误 &lt;code&gt;code&lt;/code&gt; 识别错误时，都可以使用此方法。这样可以进行诸如在出现给定错误时重写错误消息或在视图中编写自定义逻辑之类的操作。它也可以用来以自定义格式（例如XML）序列化错误。例如，&lt;a href=&quot;#django.forms.Form.errors.as_json&quot;&gt; &lt;code&gt;as_json()&lt;/code&gt; &lt;/a&gt;依赖于 &lt;code&gt;as_data()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="039c2b7f06147eadb210ece4506cbbf31f08a31c" translate="yes" xml:space="preserve">
          <source>Use this method as a last resort</source>
          <target state="translated">在万不得已的情况下使用这种方法</target>
        </trans-unit>
        <trans-unit id="bb6885d9d850504ec29a1b90d21dcd2710558805" translate="yes" xml:space="preserve">
          <source>Use this method to render the raw value of this field as it would be rendered by a &lt;code&gt;Widget&lt;/code&gt;:</source>
          <target state="translated">使用此方法来呈现此字段的原始值，就像它将由 &lt;code&gt;Widget&lt;/code&gt; 渲染一样：</target>
        </trans-unit>
        <trans-unit id="3721161646e1320c786e23b4f05ea0b2dd7625dd" translate="yes" xml:space="preserve">
          <source>Use this mixin with a custom storage to append the MD5 hash of the file&amp;rsquo;s content to the filename as &lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt;&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt;&lt;/a&gt; does.</source>
          <target state="translated">将此混入与自定义存储结合使用，就像&lt;a href=&quot;#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt; &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; &lt;/a&gt;一样，将文件内容的MD5哈希附加到文件名中。</target>
        </trans-unit>
        <trans-unit id="dceed3cb8a7202beb9761b6a7901e0e7fc2a7cd5" translate="yes" xml:space="preserve">
          <source>Use this option if your sitemap uses &lt;code&gt;http&lt;/code&gt; rather than &lt;code&gt;https&lt;/code&gt;.</source>
          <target state="translated">如果您的站点地图使用 &lt;code&gt;http&lt;/code&gt; 而不是 &lt;code&gt;https&lt;/code&gt; ,则使用此选项。</target>
        </trans-unit>
        <trans-unit id="c1cedd2a801fbb8c995ffd8b4ed596de97c1bfb5" translate="yes" xml:space="preserve">
          <source>Use this property to render the ID of this field. For example, if you are manually constructing a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; in your template (despite the fact that &lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt;&lt;code&gt;label_tag()&lt;/code&gt;&lt;/a&gt; will do this for you):</source>
          <target state="translated">使用此属性呈现此字段的ID。例如，如果您要在模板中手动构建 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; （尽管&lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt; &lt;code&gt;label_tag()&lt;/code&gt; &lt;/a&gt;会为您完成此操作）：</target>
        </trans-unit>
        <trans-unit id="b654d1cfd6c0ad8798146161bdb6685bcbd18e49" translate="yes" xml:space="preserve">
          <source>Use this to specify the source SRS manually (for example, some shapefiles don&amp;rsquo;t come with a &lt;code&gt;'.prj'&lt;/code&gt; file). An integer SRID, WKT or PROJ.4 strings, and &lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;django.contrib.gis.gdal.SpatialReference&lt;/code&gt;&lt;/a&gt; objects are accepted.</source>
          <target state="translated">使用此选项可以手动指定源SRS（例如，某些shapefile不带有 &lt;code&gt;'.prj'&lt;/code&gt; 文件）。可接受整数SRID，WKT或PROJ.4字符串，以及&lt;a href=&quot;gdal#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;django.contrib.gis.gdal.SpatialReference&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="836260084abbe1393bc18330a9cbd90b6809228c" translate="yes" xml:space="preserve">
          <source>Used by the &lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView&quot;&gt;&lt;code&gt;PasswordResetConfirmView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">由&lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView&quot;&gt; &lt;code&gt;PasswordResetConfirmView&lt;/code&gt; 使用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="991c2879f7b6d844ef18989afb79743fc85e0917" translate="yes" xml:space="preserve">
          <source>Used for HTML version of debug 500 HTTP error page.</source>
          <target state="translated">用于HTML版本的调试500 HTTP错误页面。</target>
        </trans-unit>
        <trans-unit id="a2f149626233af8c1e9025662859b4ebd0f5d0e8" translate="yes" xml:space="preserve">
          <source>Used for plain text version of debug 500 HTTP error page and email reports.</source>
          <target state="translated">用于纯文本版本的调试500 HTTP错误页面和电子邮件报告。</target>
        </trans-unit>
        <trans-unit id="7066317eeac89df2fd40433e22e6edecf40c5b51" translate="yes" xml:space="preserve">
          <source>Used to display HTML or access attributes for a single field of a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">用于显示HTML或访问&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;实例的单个字段的属性。</target>
        </trans-unit>
        <trans-unit id="c1cb64be7a2a67594b7d626d9f4897c48ec7aed0" translate="yes" xml:space="preserve">
          <source>Useful attributes on &lt;code&gt;{{ field }}&lt;/code&gt; include:</source>
          <target state="translated">&lt;code&gt;{{ field }}&lt;/code&gt; 上的有用属性包括：</target>
        </trans-unit>
        <trans-unit id="367c9af8f5219c455beec84a8f5a0dfda8c891aa" translate="yes" xml:space="preserve">
          <source>Useful methods</source>
          <target state="translated">有用的方法</target>
        </trans-unit>
        <trans-unit id="58709dc241dce0e52626b79ad2c2664105b5e8fa" translate="yes" xml:space="preserve">
          <source>Useful utility functions</source>
          <target state="translated">有用的实用功能</target>
        </trans-unit>
        <trans-unit id="43d37396bb7e453a9b5f5f52c14de02018b7ce02" translate="yes" xml:space="preserve">
          <source>User authentication in Django</source>
          <target state="translated">Django中的用户认证</target>
        </trans-unit>
        <trans-unit id="b913547c7a6a8c51069ff0548901d0da5d88ddad" translate="yes" xml:space="preserve">
          <source>User friendly forms</source>
          <target state="translated">用户友好的表格</target>
        </trans-unit>
        <trans-unit id="eb66d774b36988a4729251435f0dffd26cc86f50" translate="yes" xml:space="preserve">
          <source>User passwords are not displayed in the admin (nor stored in the database), but the &lt;a href=&quot;passwords&quot;&gt;password storage details&lt;/a&gt; are displayed. Included in the display of this information is a link to a password change form that allows admins to change user passwords.</source>
          <target state="translated">用户密码未在admin中显示（也不存储在数据库中），但是会显示&lt;a href=&quot;passwords&quot;&gt;密码存储详细信息&lt;/a&gt;。此信息的显示中包括指向密码更改表单的链接，该链接允许管理员更改用户密码。</target>
        </trans-unit>
        <trans-unit id="3a94795ad5a95f108b2080e9d3eeee6f50ceaa08" translate="yes" xml:space="preserve">
          <source>User-uploaded content</source>
          <target state="translated">用户上传的内容</target>
        </trans-unit>
        <trans-unit id="89af20f6c126b1f63ff3f9b54adfaf51ed4793db" translate="yes" xml:space="preserve">
          <source>Username to use for the SMTP server defined in &lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt;. If empty, Django won&amp;rsquo;t attempt authentication.</source>
          <target state="translated">用于&lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; 中&lt;/a&gt;定义的SMTP服务器的用户名。如果为空，则Django不会尝试身份验证。</target>
        </trans-unit>
        <trans-unit id="9b0bc40e0c8edad2f7b984bd301c092667e346ae" translate="yes" xml:space="preserve">
          <source>Usernames and Unicode</source>
          <target state="translated">用户名和Unicode</target>
        </trans-unit>
        <trans-unit id="57f2b181d0a5e79a147ea1cdf41457f58dbbb3c9" translate="yes" xml:space="preserve">
          <source>Users</source>
          <target state="translated">Users</target>
        </trans-unit>
        <trans-unit id="c2e88ddde705dca6a7e43341564354275bc1b559" translate="yes" xml:space="preserve">
          <source>Users flagged with an unusable password (see &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_unusable_password&quot;&gt;&lt;code&gt;set_unusable_password()&lt;/code&gt;&lt;/a&gt; aren&amp;rsquo;t allowed to request a password reset to prevent misuse when using an external authentication source like LDAP. Note that they won&amp;rsquo;t receive any error message since this would expose their account&amp;rsquo;s existence but no mail will be sent either.</source>
          <target state="translated">标记有不可用密码的用户（请参阅&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_unusable_password&quot;&gt; &lt;code&gt;set_unusable_password()&lt;/code&gt; &lt;/a&gt;不允许使用LDAP等外部身份验证源请求密码重置以防止滥用。请注意，他们不会收到任何错误消息，因为这将暴露其帐户的存在，但也不会发送邮件。</target>
        </trans-unit>
        <trans-unit id="289623b2475e55c3d50ee213e143d6623c760d07" translate="yes" xml:space="preserve">
          <source>Users often choose poor passwords. To help mitigate this problem, Django offers pluggable password validation. You can configure multiple password validators at the same time. A few validators are included in Django, but you can write your own as well.</source>
          <target state="translated">用户经常选择糟糕的密码。为了帮助缓解这个问题,Django提供了可插拔的密码验证。你可以同时配置多个密码验证器。Django中包含了一些验证器,但你也可以编写自己的验证器。</target>
        </trans-unit>
        <trans-unit id="c5250f2e691432cb1c5e7e4ca18b160de38535b1" translate="yes" xml:space="preserve">
          <source>Users with &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.models.User.is_active&quot;&gt;&lt;code&gt;is_active=False&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t be allowed to authenticate. Use &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend&quot;&gt;&lt;code&gt;AllowAllUsersRemoteUserBackend&lt;/code&gt;&lt;/a&gt; if you want to allow them to.</source>
          <target state="translated">&lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.models.User.is_active&quot;&gt; &lt;code&gt;is_active=False&lt;/code&gt; 的&lt;/a&gt;用户将无法进行身份验证。如果要允许它们，请使用&lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend&quot;&gt; &lt;code&gt;AllowAllUsersRemoteUserBackend&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6f191d2993f3a3534c48cb1d8703497679eb685c" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;#django.contrib.auth.backends.BaseBackend.get_all_permissions&quot;&gt;&lt;code&gt;get_all_permissions()&lt;/code&gt;&lt;/a&gt; to check if &lt;code&gt;user_obj&lt;/code&gt; has the permission string &lt;code&gt;perm&lt;/code&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;#django.contrib.auth.backends.BaseBackend.get_all_permissions&quot;&gt; &lt;code&gt;get_all_permissions()&lt;/code&gt; &lt;/a&gt;检查 &lt;code&gt;user_obj&lt;/code&gt; 是否具有权限字符串 &lt;code&gt;perm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06ef8c2b0578b3222e3a7abab3a5e0d9bb4617c6" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;#django.contrib.auth.backends.BaseBackend.get_user_permissions&quot;&gt;&lt;code&gt;get_user_permissions()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.auth.backends.BaseBackend.get_group_permissions&quot;&gt;&lt;code&gt;get_group_permissions()&lt;/code&gt;&lt;/a&gt; to get the set of permission strings the &lt;code&gt;user_obj&lt;/code&gt; has.</source>
          <target state="translated">使用&lt;a href=&quot;#django.contrib.auth.backends.BaseBackend.get_user_permissions&quot;&gt; &lt;code&gt;get_user_permissions()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.contrib.auth.backends.BaseBackend.get_group_permissions&quot;&gt; &lt;code&gt;get_group_permissions()&lt;/code&gt; &lt;/a&gt;获取 &lt;code&gt;user_obj&lt;/code&gt; 拥有的权限字符串集。</target>
        </trans-unit>
        <trans-unit id="c7fc8e0a30e1cc3038c5f6e22b647d35cba10e4e" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;#django.contrib.auth.backends.ModelBackend.get_all_permissions&quot;&gt;&lt;code&gt;get_all_permissions()&lt;/code&gt;&lt;/a&gt; to check if &lt;code&gt;user_obj&lt;/code&gt; has the permission string &lt;code&gt;perm&lt;/code&gt;. Returns &lt;code&gt;False&lt;/code&gt; if the user is not &lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.CustomUser.is_active&quot;&gt;&lt;code&gt;is_active&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;#django.contrib.auth.backends.ModelBackend.get_all_permissions&quot;&gt; &lt;code&gt;get_all_permissions()&lt;/code&gt; &lt;/a&gt;检查 &lt;code&gt;user_obj&lt;/code&gt; 是否具有权限字符串 &lt;code&gt;perm&lt;/code&gt; 。如果用户不是&lt;a href=&quot;../../topics/auth/customizing#django.contrib.auth.models.CustomUser.is_active&quot;&gt; &lt;code&gt;is_active&lt;/code&gt; ,&lt;/a&gt;则返回 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f272f832e26bb5cfe0a9e8ad2639e5f7f4c012e" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;#django.utils.timezone.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to convert an aware &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.date&quot;&gt;&lt;code&gt;date()&lt;/code&gt;&lt;/a&gt; in a different time zone, by default the &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt;.</source>
          <target state="translated">用途&lt;a href=&quot;#django.utils.timezone.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;到意识到转换&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;为&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.date&quot;&gt; &lt;code&gt;date()&lt;/code&gt; &lt;/a&gt;将在不同的时区，默认为&lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;当前时区&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c6e1f5d694ae15854b36239346c2c9dccc52d080" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;../validators#django.core.validators.EmailValidator&quot;&gt;&lt;code&gt;EmailValidator&lt;/code&gt;&lt;/a&gt; to validate that the given value is a valid email address, using a moderately complex regular expression.</source>
          <target state="translated">使用&lt;a href=&quot;../validators#django.core.validators.EmailValidator&quot;&gt; &lt;code&gt;EmailValidator&lt;/code&gt; &lt;/a&gt;使用适度复杂的正则表达式来验证给定的值是有效的电子邮件地址。</target>
        </trans-unit>
        <trans-unit id="953ea14a529db6342ded15c80e8b07bae00cbb63" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt;&lt;code&gt;MaxLengthValidator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../validators#django.core.validators.MinLengthValidator&quot;&gt;&lt;code&gt;MinLengthValidator&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;max_length&lt;/code&gt; and &lt;code&gt;min_length&lt;/code&gt; are provided. Otherwise, all inputs are valid.</source>
          <target state="translated">如果提供了 &lt;code&gt;max_length&lt;/code&gt; 和 &lt;code&gt;min_length&lt;/code&gt; ,则使用&lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt; &lt;code&gt;MaxLengthValidator&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../validators#django.core.validators.MinLengthValidator&quot;&gt; &lt;code&gt;MinLengthValidator&lt;/code&gt; &lt;/a&gt;。否则，所有输入均有效。</target>
        </trans-unit>
        <trans-unit id="8fac0e63b41d104489510a99bdcaa4ed7ffcc09f" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;../validators#django.core.validators.RegexValidator&quot;&gt;&lt;code&gt;RegexValidator&lt;/code&gt;&lt;/a&gt; to validate that the given value matches a certain regular expression.</source>
          <target state="translated">使用&lt;a href=&quot;../validators#django.core.validators.RegexValidator&quot;&gt; &lt;code&gt;RegexValidator&lt;/code&gt; &lt;/a&gt;验证给定值是否匹配某个正则表达式。</target>
        </trans-unit>
        <trans-unit id="0142e646af983484cab72120b49e8b2aaa0571e0" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;../validators#django.core.validators.URLValidator&quot;&gt;&lt;code&gt;URLValidator&lt;/code&gt;&lt;/a&gt; to validate that the given value is a valid URL.</source>
          <target state="translated">使用&lt;a href=&quot;../validators#django.core.validators.URLValidator&quot;&gt; &lt;code&gt;URLValidator&lt;/code&gt; &lt;/a&gt;验证给定的值是有效的URL。</target>
        </trans-unit>
        <trans-unit id="8fed16b5446b8b1117c85079fade2e0121f4ad34" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;../validators#django.core.validators.validate_slug&quot;&gt;&lt;code&gt;validate_slug&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../validators#django.core.validators.validate_unicode_slug&quot;&gt;&lt;code&gt;validate_unicode_slug&lt;/code&gt;&lt;/a&gt; to validate that the given value contains only letters, numbers, underscores, and hyphens.</source>
          <target state="translated">使用&lt;a href=&quot;../validators#django.core.validators.validate_slug&quot;&gt; &lt;code&gt;validate_slug&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../validators#django.core.validators.validate_unicode_slug&quot;&gt; &lt;code&gt;validate_unicode_slug&lt;/code&gt; &lt;/a&gt;来验证给定的值仅包含字母，数字，下划线和连字符。</target>
        </trans-unit>
        <trans-unit id="8672ab5c98f4703993d8ca0c08ff38ef1d0dcb0f" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;django.utils.ipv6&lt;/code&gt; to check the validity of an IPv6 address.</source>
          <target state="translated">使用 &lt;code&gt;django.utils.ipv6&lt;/code&gt; 检查IPv6地址的有效性。</target>
        </trans-unit>
        <trans-unit id="f7c96ba25515c9caaf893a88dad2b049007d330a" translate="yes" xml:space="preserve">
          <source>Uses Django&amp;rsquo;s base manager, dumping records which might otherwise be filtered or modified by a custom manager.</source>
          <target state="translated">使用Django的基本管理器，转储可能由自定义管理器过滤或修改的记录。</target>
        </trans-unit>
        <trans-unit id="65fc97eed1fb4ae7cbf6a40d591962586fac7f9b" translate="yes" xml:space="preserve">
          <source>Uses IPv6 for the development server. This changes the default IP address from &lt;code&gt;127.0.0.1&lt;/code&gt; to &lt;code&gt;::1&lt;/code&gt;.</source>
          <target state="translated">将IPv6用于开发服务器。这会将默认IP地址从 &lt;code&gt;127.0.0.1&lt;/code&gt; 更改为 &lt;code&gt;::1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6767002ed97bcbf99046034dcd0ede82d720202a" translate="yes" xml:space="preserve">
          <source>Uses Pillow to ensure that &lt;code&gt;value.name&lt;/code&gt; (&lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;) has &lt;a href=&quot;https://pillow.readthedocs.io/en/latest/handbook/image-file-formats.html&quot;&gt;a valid image extension&lt;/a&gt;.</source>
          <target state="translated">使用Pillow来确保 &lt;code&gt;value.name&lt;/code&gt; （ &lt;code&gt;value&lt;/code&gt; 是一个&lt;a href=&quot;files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;）具有&lt;a href=&quot;https://pillow.readthedocs.io/en/latest/handbook/image-file-formats.html&quot;&gt;有效的图像扩展名&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="125e5daaec0421f24c358f601b815141990297a0" translate="yes" xml:space="preserve">
          <source>Uses SQL&amp;rsquo;s &lt;code&gt;EXCEPT&lt;/code&gt; operator to keep only elements present in the &lt;code&gt;QuerySet&lt;/code&gt; but not in some other &lt;code&gt;QuerySet&lt;/code&gt;s. For example:</source>
          <target state="translated">使用SQL的 &lt;code&gt;EXCEPT&lt;/code&gt; 运算符仅保留元素存在于 &lt;code&gt;QuerySet&lt;/code&gt; 中，而不保留于某些其他 &lt;code&gt;QuerySet&lt;/code&gt; 中。例如：</target>
        </trans-unit>
        <trans-unit id="3de4a2ffe8370cbd5a822ab275bcf6cc61c481b9" translate="yes" xml:space="preserve">
          <source>Uses SQL&amp;rsquo;s &lt;code&gt;INTERSECT&lt;/code&gt; operator to return the shared elements of two or more &lt;code&gt;QuerySet&lt;/code&gt;s. For example:</source>
          <target state="translated">使用SQL的 &lt;code&gt;INTERSECT&lt;/code&gt; 运算符返回两个或更多 &lt;code&gt;QuerySet&lt;/code&gt; 的共享元素。例如：</target>
        </trans-unit>
        <trans-unit id="2031e06cd24355497239576de343072c6db6271e" translate="yes" xml:space="preserve">
          <source>Uses SQL&amp;rsquo;s &lt;code&gt;UNION&lt;/code&gt; operator to combine the results of two or more &lt;code&gt;QuerySet&lt;/code&gt;s. For example:</source>
          <target state="translated">使用SQL的 &lt;code&gt;UNION&lt;/code&gt; 运算符组合两个或更多 &lt;code&gt;QuerySet&lt;/code&gt; 的结果。例如：</target>
        </trans-unit>
        <trans-unit id="5e1a7aadb8516cb4e6d4971411020ae828a90fd3" translate="yes" xml:space="preserve">
          <source>Uses a default &lt;code&gt;context_object_name&lt;/code&gt; of &lt;code&gt;latest&lt;/code&gt;.</source>
          <target state="translated">使用默认 &lt;code&gt;context_object_name&lt;/code&gt; 的 &lt;code&gt;latest&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99f7d85a721a5e722cedfea90549604eb923be2b" translate="yes" xml:space="preserve">
          <source>Uses a default &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;_archive&lt;/code&gt;.</source>
          <target state="translated">使用默认 &lt;code&gt;template_name_suffix&lt;/code&gt; 的 &lt;code&gt;_archive&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00b047ef8f4c2dd32ddb6c22defda634972308f8" translate="yes" xml:space="preserve">
          <source>Uses a default &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;_archive_day&lt;/code&gt;.</source>
          <target state="translated">使用默认 &lt;code&gt;template_name_suffix&lt;/code&gt; 的 &lt;code&gt;_archive_day&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e49632d93f1b4a3f28e6287d3f0fb9c0c6b4ad6" translate="yes" xml:space="preserve">
          <source>Uses a default &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;_archive_month&lt;/code&gt;.</source>
          <target state="translated">使用默认 &lt;code&gt;template_name_suffix&lt;/code&gt; 的 &lt;code&gt;_archive_month&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7deea9532efe12f7c854c16806f8fc290fa8b1d1" translate="yes" xml:space="preserve">
          <source>Uses a default &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;_archive_today&lt;/code&gt;.</source>
          <target state="translated">使用默认 &lt;code&gt;template_name_suffix&lt;/code&gt; 的 &lt;code&gt;_archive_today&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df28b4cc4ac1a5c77af57d526924046a4781c048" translate="yes" xml:space="preserve">
          <source>Uses a default &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;_archive_week&lt;/code&gt;.</source>
          <target state="translated">使用默认 &lt;code&gt;template_name_suffix&lt;/code&gt; 的 &lt;code&gt;_archive_week&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4e11e098e88e27f837f3fa26e67b02d480a1467" translate="yes" xml:space="preserve">
          <source>Uses a default &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;_archive_year&lt;/code&gt;.</source>
          <target state="translated">使用默认 &lt;code&gt;template_name_suffix&lt;/code&gt; 的 &lt;code&gt;_archive_year&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54244df9bed065a50fb71a09505698963728df9f" translate="yes" xml:space="preserve">
          <source>Uses a default &lt;code&gt;template_name_suffix&lt;/code&gt; of &lt;code&gt;_detail&lt;/code&gt;.</source>
          <target state="translated">使用默认 &lt;code&gt;template_name_suffix&lt;/code&gt; 的 &lt;code&gt;_detail&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12b3fcb9443ff8309e7c480b3f341978c79673d6" translate="yes" xml:space="preserve">
          <source>Uses a similar format as PHP&amp;rsquo;s &lt;code&gt;date()&lt;/code&gt; function (&lt;a href=&quot;https://php.net/date&quot;&gt;https://php.net/date&lt;/a&gt;) with some differences.</source>
          <target state="translated">使用与PHP的 &lt;code&gt;date()&lt;/code&gt; 函数（&lt;a href=&quot;https://php.net/date&quot;&gt;https://php.net/date&lt;/a&gt;）类似的格式，但有一些区别。</target>
        </trans-unit>
        <trans-unit id="18bdacb84c3de2098cfb7ac40b7799da9bb55af4" translate="yes" xml:space="preserve">
          <source>Uses both &lt;code&gt;validate_ipv4_address&lt;/code&gt; and &lt;code&gt;validate_ipv6_address&lt;/code&gt; to ensure a value is either a valid IPv4 or IPv6 address.</source>
          <target state="translated">同时使用 &lt;code&gt;validate_ipv4_address&lt;/code&gt; 和 &lt;code&gt;validate_ipv6_address&lt;/code&gt; 来确保值是有效的IPv4或IPv6地址。</target>
        </trans-unit>
        <trans-unit id="9bea1b04370e50097e847be42426fcfefc4424ae" translate="yes" xml:space="preserve">
          <source>Uses of the key shouldn&amp;rsquo;t assume that it&amp;rsquo;s text or bytes. Every use should go through &lt;a href=&quot;utils#django.utils.encoding.force_str&quot;&gt;&lt;code&gt;force_str()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;utils#django.utils.encoding.force_bytes&quot;&gt;&lt;code&gt;force_bytes()&lt;/code&gt;&lt;/a&gt; to convert it to the desired type.</source>
          <target state="translated">键的使用不应假定它是文本或字节。每次使用都应通过&lt;a href=&quot;utils#django.utils.encoding.force_str&quot;&gt; &lt;code&gt;force_str()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;utils#django.utils.encoding.force_bytes&quot;&gt; &lt;code&gt;force_bytes()&lt;/code&gt; &lt;/a&gt;将其转换为所需的类型。</target>
        </trans-unit>
        <trans-unit id="bea49df91e9fe86d8bb0515ae800d6cc283d575a" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;checks&quot;&gt;system check framework&lt;/a&gt; to inspect the entire Django project for common problems.</source>
          <target state="translated">使用&lt;a href=&quot;checks&quot;&gt;系统检查框架&lt;/a&gt;来检查整个Django项目中的常见问题。</target>
        </trans-unit>
        <trans-unit id="26cc4e364dc077b521ad9604dc7af7c01085e5c8" translate="yes" xml:space="preserve">
          <source>Uses the &lt;code&gt;natural_key()&lt;/code&gt; model method to serialize any foreign key and many-to-many relationship to objects of the type that defines the method. If you&amp;rsquo;re dumping &lt;code&gt;contrib.auth&lt;/code&gt;&lt;code&gt;Permission&lt;/code&gt; objects or &lt;code&gt;contrib.contenttypes&lt;/code&gt;&lt;code&gt;ContentType&lt;/code&gt; objects, you should probably use this flag. See the &lt;a href=&quot;../topics/serialization#topics-serialization-natural-keys&quot;&gt;natural keys&lt;/a&gt; documentation for more details on this and the next option.</source>
          <target state="translated">使用 &lt;code&gt;natural_key()&lt;/code&gt; 模型方法将任何外键和与定义该方法的类型的对象的多对多关系序列化。如果要转储 &lt;code&gt;contrib.auth&lt;/code&gt; &lt;code&gt;Permission&lt;/code&gt; 对象或 &lt;code&gt;contrib.contenttypes&lt;/code&gt; &lt;code&gt;ContentType&lt;/code&gt; 对象，则可能应使用此标志。有关此选项和下一个选项的更多详细信息，请参见&lt;a href=&quot;../topics/serialization#topics-serialization-natural-keys&quot;&gt;自然键&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="ea1db0a351f2ad0e1560aadc2efb4b15c21271fe" translate="yes" xml:space="preserve">
          <source>Uses the arguments to send an &lt;code&gt;EmailMultiAlternatives&lt;/code&gt;. Can be overridden to customize how the email is sent to the user.</source>
          <target state="translated">使用参数发送 &lt;code&gt;EmailMultiAlternatives&lt;/code&gt; 。可以覆盖以自定义如何将电子邮件发送给用户。</target>
        </trans-unit>
        <trans-unit id="7becf0f44c69c198ea5e27a9303602edebd9dee3" translate="yes" xml:space="preserve">
          <source>Uses the same logic as &lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt;, with a hook for returning a default value if the key doesn&amp;rsquo;t exist.</source>
          <target state="translated">使用与&lt;a href=&quot;#django.http.QueryDict.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;相同的逻辑，带有钩子，用于在键不存在时返回默认值。</target>
        </trans-unit>
        <trans-unit id="39b440eb3eed1d809a0a9fc6c36dd6f0647a5e1e" translate="yes" xml:space="preserve">
          <source>Uses the same syntax as Python&amp;rsquo;s list slicing. See &lt;a href=&quot;https://www.diveinto.org/python3/native-datatypes.html#slicinglists&quot;&gt;https://www.diveinto.org/python3/native-datatypes.html#slicinglists&lt;/a&gt; for an introduction.</source>
          <target state="translated">使用与Python的列表切片相同的语法。有关简介，请参见&lt;a href=&quot;https://www.diveinto.org/python3/native-datatypes.html#slicinglists&quot;&gt;https://www.diveinto.org/python3/native-datatypes.html#slicinglists&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f24911cdd3b9dff6bec82f21a4395f23823f0070" translate="yes" xml:space="preserve">
          <source>Uses the system check framework to inspect the entire Django project for potential problems. Serious problems are raised as a &lt;a href=&quot;#django.core.management.CommandError&quot;&gt;&lt;code&gt;CommandError&lt;/code&gt;&lt;/a&gt;; warnings are output to stderr; minor notifications are output to stdout.</source>
          <target state="translated">使用系统检查框架来检查整个Django项目是否存在潜在问题。作为&lt;a href=&quot;#django.core.management.CommandError&quot;&gt; &lt;code&gt;CommandError&lt;/code&gt; &lt;/a&gt;提出了严重的问题；警告输出到stderr；次要通知将输出到stdout。</target>
        </trans-unit>
        <trans-unit id="db016a3680e480604c743d4e90fec15878ead9ce" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#django.db.models.query.QuerySet.only&quot;&gt;&lt;code&gt;only()&lt;/code&gt;&lt;/a&gt; and omitting a field requested using &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt; is an error as well.</source>
          <target state="translated">使用&lt;a href=&quot;#django.db.models.query.QuerySet.only&quot;&gt; &lt;code&gt;only()&lt;/code&gt; &lt;/a&gt;并忽略使用&lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt;请求的字段也是错误。</target>
        </trans-unit>
        <trans-unit id="59d7158f8baa5639a9834fd031abad2067e1cbf8" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; on key, index, or path transforms will sort the objects using the string representation of the values. This is because MariaDB and Oracle Database do not provide a function that converts JSON values into their equivalent SQL values.</source>
          <target state="translated">在键，索引或路径转换上使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt;将使用值的字符串表示形式对对象进行排序。这是因为MariaDB和Oracle数据库不提供将JSON值转换为其等效SQL值的功能。</target>
        </trans-unit>
        <trans-unit id="438d82e9aec538511844c8e2f9bf7f25bea4cf79" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; avoids the cost of running each test in a transaction and flushing the database, but if your tests interact with the database their behavior will vary based on the order that the test runner executes them. This can lead to unit tests that pass when run in isolation but fail when run in a suite.</source>
          <target state="translated">使用&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;可以避免在事务中运行每个测试并刷新数据库的开销，但是如果您的测试与数据库交互，则其行为将根据测试运行者执行它们的顺序而有所不同。这可能导致单元测试在单独运行时通过，但在套件中运行时失败。</target>
        </trans-unit>
        <trans-unit id="240a00d92cdbee3a749a6819d32f47477a077619" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;querysets#std:fieldlookup-iexact&quot;&gt;&lt;code&gt;iexact&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;querysets#std:fieldlookup-icontains&quot;&gt;&lt;code&gt;icontains&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;querysets#std:fieldlookup-startswith&quot;&gt;&lt;code&gt;startswith&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;querysets#std:fieldlookup-istartswith&quot;&gt;&lt;code&gt;istartswith&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;querysets#std:fieldlookup-endswith&quot;&gt;&lt;code&gt;endswith&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;querysets#std:fieldlookup-iendswith&quot;&gt;&lt;code&gt;iendswith&lt;/code&gt;&lt;/a&gt; lookups on PostgreSQL don&amp;rsquo;t work for values without hyphens, because PostgreSQL stores them in a hyphenated uuid datatype type.</source>
          <target state="translated">在PostgreSQL上使用&lt;a href=&quot;querysets#std:fieldlookup-iexact&quot;&gt; &lt;code&gt;iexact&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;querysets#std:fieldlookup-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;querysets#std:fieldlookup-icontains&quot;&gt; &lt;code&gt;icontains&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;querysets#std:fieldlookup-startswith&quot;&gt; &lt;code&gt;startswith&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;querysets#std:fieldlookup-istartswith&quot;&gt; &lt;code&gt;istartswith&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;querysets#std:fieldlookup-endswith&quot;&gt; &lt;code&gt;endswith&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;querysets#std:fieldlookup-iendswith&quot;&gt; &lt;code&gt;iendswith&lt;/code&gt; &lt;/a&gt;查找不适用于没有连字符的值，因为PostgreSQL将它们存储为带连字符的uuid数据类型。</target>
        </trans-unit>
        <trans-unit id="b6bf06e91f4fe11cf436b2b627d7d82145223988" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;AsyncClient&lt;/code&gt; any method that makes a request must be awaited:</source>
          <target state="translated">使用 &lt;code&gt;AsyncClient&lt;/code&gt; ，必须等待发出请求的任何方法：</target>
        </trans-unit>
        <trans-unit id="192c5d4ca2a859cf240e165c53b1431f2c2a04e2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;F()&lt;/code&gt; in filters</source>
          <target state="translated">在过滤器中使用 &lt;code&gt;F()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89e9b8ce835887af4444dabc7a5989c1974ba5f0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;F()&lt;/code&gt; to sort null values</source>
          <target state="translated">使用 &lt;code&gt;F()&lt;/code&gt; 对空值排序</target>
        </trans-unit>
        <trans-unit id="d9b41bd428d18e154d56d4cc11ad4db2bbd2997e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;F()&lt;/code&gt; with annotations</source>
          <target state="translated">将 &lt;code&gt;F()&lt;/code&gt; 与注释一起使用</target>
        </trans-unit>
        <trans-unit id="c5bf5746085c1c46653f2851e075d952c659e479" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;FormMixin&lt;/code&gt; with &lt;code&gt;DetailView&lt;/code&gt;</source>
          <target state="translated">将 &lt;code&gt;FormMixin&lt;/code&gt; 与 &lt;code&gt;DetailView&lt;/code&gt; 一起使用</target>
        </trans-unit>
        <trans-unit id="c5f5cae8b58f41fab635dfc165144611731fd17e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Paginator&lt;/code&gt; in a view function</source>
          <target state="translated">在视图功能中使用 &lt;code&gt;Paginator&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4599383ea3640a6681189547d65931d7051c711" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;REMOTE_USER&lt;/code&gt; on login pages only</source>
          <target state="translated">仅在登录页面上使用 &lt;code&gt;REMOTE_USER&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b49b9bee5a68f171f253f809c64cc0658be501f9" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;RequestContext&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;RequestContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d2961e9d5f5a3bf82c9483e1f71b6131d4a16c0d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;SingleObjectMixin&lt;/code&gt; with &lt;code&gt;ListView&lt;/code&gt;</source>
          <target state="translated">将 &lt;code&gt;SingleObjectMixin&lt;/code&gt; 与 &lt;code&gt;ListView&lt;/code&gt; 一起使用</target>
        </trans-unit>
        <trans-unit id="20dd297fa49a9ec9ad5b5fb10f6289f43f6bdcf7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;SingleObjectMixin&lt;/code&gt; with View</source>
          <target state="translated">在视图中使用 &lt;code&gt;SingleObjectMixin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44fdd84431ebb03a6787f3f87eeb34ae8744e07a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;TemplateResponse&lt;/code&gt; and &lt;code&gt;SimpleTemplateResponse&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;TemplateResponse&lt;/code&gt; 和 &lt;code&gt;SimpleTemplateResponse&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f06f60733ca1a6becd19a587eab8a2d1275611e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Vary&lt;/code&gt; headers</source>
          <target state="translated">使用 &lt;code&gt;Vary&lt;/code&gt; 标头</target>
        </trans-unit>
        <trans-unit id="75e049fad96622be908d7f101a3a317d93f08fe1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;add()&lt;/code&gt; on a relation that already exists won&amp;rsquo;t duplicate the relation, but it will still trigger signals.</source>
          <target state="translated">在已经存在的关系上使用 &lt;code&gt;add()&lt;/code&gt; 不会复制该关系，但仍会触发信号。</target>
        </trans-unit>
        <trans-unit id="55d88c56f438dcd5396ed9988909235b18a2ae07" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;add()&lt;/code&gt; with a many-to-many relationship, however, will not call any &lt;code&gt;save()&lt;/code&gt; methods (the &lt;code&gt;bulk&lt;/code&gt; argument doesn&amp;rsquo;t exist), but rather create the relationships using &lt;a href=&quot;querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt;&lt;code&gt;QuerySet.bulk_create()&lt;/code&gt;&lt;/a&gt;. If you need to execute some custom logic when a relationship is created, listen to the &lt;a href=&quot;../signals#django.db.models.signals.m2m_changed&quot;&gt;&lt;code&gt;m2m_changed&lt;/code&gt;&lt;/a&gt; signal, which will trigger &lt;code&gt;pre_add&lt;/code&gt; and &lt;code&gt;post_add&lt;/code&gt; actions.</source>
          <target state="translated">但是，使用具有多对多关系的 &lt;code&gt;add()&lt;/code&gt; 不会调用任何 &lt;code&gt;save()&lt;/code&gt; 方法（不存在 &lt;code&gt;bulk&lt;/code&gt; 参数），而是使用&lt;a href=&quot;querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt; &lt;code&gt;QuerySet.bulk_create()&lt;/code&gt; &lt;/a&gt;创建关系。如果在创建关系时需要执行一些自定义逻辑，请收听&lt;a href=&quot;../signals#django.db.models.signals.m2m_changed&quot;&gt; &lt;code&gt;m2m_changed&lt;/code&gt; &lt;/a&gt;信号，该信号将触发 &lt;code&gt;pre_add&lt;/code&gt; 和 &lt;code&gt;post_add&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="5acf28b1bd09990263617fd374ec302c0aec5985" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;bcrypt&lt;/code&gt; with Django</source>
          <target state="translated">在Django中使用 &lt;code&gt;bcrypt&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2b19af77d241f81b5ac425ae85ab9a1f7b4f4e8c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fields&lt;/code&gt; restricts the formset to use only the given fields. Alternatively, you can take an &amp;ldquo;opt-out&amp;rdquo; approach, specifying which fields to exclude:</source>
          <target state="translated">使用 &lt;code&gt;fields&lt;/code&gt; 将表单集限制为仅使用给定的字段。或者，您可以采用&amp;ldquo;退出&amp;rdquo;方法，指定要排除的字段：</target>
        </trans-unit>
        <trans-unit id="039acdb52ac92a1cfd3e9639964236e7ca1c9e7a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;flatten()&lt;/code&gt; method you can get whole &lt;code&gt;Context&lt;/code&gt; stack as one dictionary including builtin variables.</source>
          <target state="translated">使用 &lt;code&gt;flatten()&lt;/code&gt; 方法，您可以将整个 &lt;code&gt;Context&lt;/code&gt; 堆栈作为一个包含内置变量的字典获得。</target>
        </trans-unit>
        <trans-unit id="e88500185b2ad0f0dd422c60cf35b2223ff6b337" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;floatformat&lt;/code&gt; with no argument is equivalent to using &lt;code&gt;floatformat&lt;/code&gt; with an argument of &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;floatformat&lt;/code&gt; 带参数的floatformat等同于使用带参数 &lt;code&gt;-1&lt;/code&gt; 的 &lt;code&gt;floatformat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4511ef3dae490655332edf14f92cdd6836d8fe77" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;get_queryset()&lt;/code&gt; with multiple databases</source>
          <target state="translated">将 &lt;code&gt;get_queryset()&lt;/code&gt; 与多个数据库一起使用</target>
        </trans-unit>
        <trans-unit id="c3573e1315745e058aea0948cb1e8909b3c77ca1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;get_queryset&lt;/code&gt; to add logic to the queryset selection is as convenient as it is powerful. For instance, if we wanted, we could use &lt;code&gt;self.request.user&lt;/code&gt; to filter using the current user, or other more complex logic.</source>
          <target state="translated">使用 &lt;code&gt;get_queryset&lt;/code&gt; 向queryset选择中添加逻辑既方便又强大。例如，如果需要，我们可以使用 &lt;code&gt;self.request.user&lt;/code&gt; 来使用当前用户或其他更复杂的逻辑进行过滤。</target>
        </trans-unit>
        <trans-unit id="427aa7c7f286ded4302712ef858f7941069f5da8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;gettext_lazy()&lt;/code&gt; and &lt;code&gt;ngettext_lazy()&lt;/code&gt; to mark strings in models and utility functions is a common operation. When you&amp;rsquo;re working with these objects elsewhere in your code, you should ensure that you don&amp;rsquo;t accidentally convert them to strings, because they should be converted as late as possible (so that the correct locale is in effect). This necessitates the use of the helper function described next.</source>
          <target state="translated">使用 &lt;code&gt;gettext_lazy()&lt;/code&gt; 和 &lt;code&gt;ngettext_lazy()&lt;/code&gt; 在模型和实用程序函数中标记字符串是一种常见的操作。在代码中其他地方使用这些对象时，应确保不要将它们意外转换为字符串，因为应尽可能晚地转换它们（以使正确的语言环境生效）。这需要使用下面描述的辅助功能。</target>
        </trans-unit>
        <trans-unit id="8856f8f8d77239a5102a36a2a398e9528cbb2e29" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;mod_wsgi&lt;/code&gt; daemon mode</source>
          <target state="translated">使用 &lt;code&gt;mod_wsgi&lt;/code&gt; 守护程序模式</target>
        </trans-unit>
        <trans-unit id="6dcd5d80d3dead15560e306d8abd6e6d1e83d519" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;reset_sequences = True&lt;/code&gt; will slow down the test, since the primary key reset is a relatively expensive database operation.</source>
          <target state="translated">使用 &lt;code&gt;reset_sequences = True&lt;/code&gt; 将减慢测试速度，因为主键重置是一个相对昂贵的数据库操作。</target>
        </trans-unit>
        <trans-unit id="8abf286aba078cbf9a9de5304c3040d789c55d13" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;samesite='None'&lt;/code&gt; (string) was allowed.</source>
          <target state="translated">允许使用 &lt;code&gt;samesite='None'&lt;/code&gt; （字符串）。</target>
        </trans-unit>
        <trans-unit id="03bd039600d68a99bed9b64b0b880a87f9a2422d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;select_for_update()&lt;/code&gt; on backends which do not support &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; (such as SQLite) will have no effect. &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; will not be added to the query, and an error isn&amp;rsquo;t raised if &lt;code&gt;select_for_update()&lt;/code&gt; is used in autocommit mode.</source>
          <target state="translated">在不支持 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 后端（例如SQLite &lt;code&gt;select_for_update()&lt;/code&gt; 上使用select_for_update（）将无效。 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 将不会添加到查询中，并且在自动提交模式下使用 &lt;code&gt;select_for_update()&lt;/code&gt; 时不会引发错误。</target>
        </trans-unit>
        <trans-unit id="d9baca10f1c201ac0b7a615f0d932a766dd3f7f2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;to_attr&lt;/code&gt; is recommended when filtering down the prefetch result as it is less ambiguous than storing a filtered result in the related manager&amp;rsquo;s cache:</source>
          <target state="translated">过滤预取结果时，建议使用 &lt;code&gt;to_attr&lt;/code&gt; ,因为与将过滤后的结果存储在相关管理器的缓存中相比，它不那么模棱两可：</target>
        </trans-unit>
        <trans-unit id="a9ae85568273877dc93b343fd9d078c2d322deaf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;update()&lt;/code&gt; also prevents a race condition wherein something might change in your database in the short period of time between loading the object and calling &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;update()&lt;/code&gt; 还可以防止出现争用情况，在这种情况下，在加载对象与调用 &lt;code&gt;save()&lt;/code&gt; 之间的短时间内数据库中可能会发生某些变化。</target>
        </trans-unit>
        <trans-unit id="8abc2ab7403186ea06b014edd02f87ba112c2c9e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;update_fields&lt;/code&gt; will force an update similarly to &lt;code&gt;force_update&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;update_fields&lt;/code&gt; 将强制执行类似于 &lt;code&gt;force_update&lt;/code&gt; 的更新。</target>
        </trans-unit>
        <trans-unit id="ca34e58511e7303e69e810e3398f97b3b363306f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;{{ form.name_of_field.errors }}&lt;/code&gt; displays a list of form errors, rendered as an unordered list. This might look like:</source>
          <target state="translated">使用 &lt;code&gt;{{ form.name_of_field.errors }}&lt;/code&gt; 显示格式错误列表，并显示为无序列表。可能看起来像：</target>
        </trans-unit>
        <trans-unit id="8e899daa0ce71ec5504c502a55876050d3c44c1f" translate="yes" xml:space="preserve">
          <source>Using Apache 2.2 with authentication</source>
          <target state="translated">使用Apache 2.2与认证</target>
        </trans-unit>
        <trans-unit id="e05ac861d5058b9153e223e6baa38b194b688bd1" translate="yes" xml:space="preserve">
          <source>Using Argon2 with Django</source>
          <target state="translated">在Django中使用Argon2</target>
        </trans-unit>
        <trans-unit id="a8d1d7cc6a0d6f8d0df20e490f66f73a702f1246" translate="yes" xml:space="preserve">
          <source>Using CSRF in Jinja2 templates</source>
          <target state="translated">在Jinja2模板中使用CSRF</target>
        </trans-unit>
        <trans-unit id="fcc8b59a085eaea0754d276a0eb696a4b666cb29" translate="yes" xml:space="preserve">
          <source>Using Django</source>
          <target state="translated">使用Django</target>
        </trans-unit>
        <trans-unit id="cd5bb4a549b9c32bc6f124b1f245addac8cb79e0" translate="yes" xml:space="preserve">
          <source>Using Django templates protects you against the majority of XSS attacks. However, it is important to understand what protections it provides and its limitations.</source>
          <target state="translated">使用Django模板可以保护你免受大多数XSS攻击。然而,了解它提供的保护措施及其局限性是很重要的。</target>
        </trans-unit>
        <trans-unit id="6c364cef6c7f2ec56ce45c43c7c5348a456206ef" translate="yes" xml:space="preserve">
          <source>Using Django&amp;rsquo;s class-based view mixins</source>
          <target state="translated">使用Django的基于类的视图混合</target>
        </trans-unit>
        <trans-unit id="91764571bd2d96046a1bfab77a8b340993799415" translate="yes" xml:space="preserve">
          <source>Using Django&amp;rsquo;s default implementation</source>
          <target state="translated">使用Django的默认实现</target>
        </trans-unit>
        <trans-unit id="e4e1565e7633ecce85000b862d43d0350d6c8c07" translate="yes" xml:space="preserve">
          <source>Using GDAL&amp;rsquo;s Virtual Filesystem</source>
          <target state="translated">使用GDAL的虚拟文件系统</target>
        </trans-unit>
        <trans-unit id="2997d82b6f6f0b482087ec1829760c2ab11d1f43" translate="yes" xml:space="preserve">
          <source>Using Jinja2 templates?</source>
          <target state="translated">使用Jinja2模板?</target>
        </trans-unit>
        <trans-unit id="e442c9139b072335fe05c4d7e693b8ef2e853571" translate="yes" xml:space="preserve">
          <source>Using a 3rd-party database backend</source>
          <target state="translated">使用第三方数据库后端</target>
        </trans-unit>
        <trans-unit id="642c11eb942723edae1f7421c59da61fe8b8bd6d" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; (see below) in a model takes a few steps:</source>
          <target state="translated">在模型中使用&lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; &lt;/a&gt;（请参见下文）需要几个步骤：</target>
        </trans-unit>
        <trans-unit id="d980db7d9bf092411f9376ef23d0ff9e0c242fe2" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;Context&lt;/code&gt; as a stack comes in handy in &lt;a href=&quot;../../howto/custom-template-tags#howto-writing-custom-template-tags&quot;&gt;some custom template tags&lt;/a&gt;.</source>
          <target state="translated">在&lt;a href=&quot;../../howto/custom-template-tags#howto-writing-custom-template-tags&quot;&gt;某些自定义模板标签中，&lt;/a&gt;使用 &lt;code&gt;Context&lt;/code&gt; 作为堆栈很有用。</target>
        </trans-unit>
        <trans-unit id="6a0dac92824969843720b6d6ae6d4042f2ec6452" translate="yes" xml:space="preserve">
          <source>Using a callable</source>
          <target state="translated">使用一个可调用的</target>
        </trans-unit>
        <trans-unit id="a9f661f5f19b36c619f827a4a37aba260788f291" translate="yes" xml:space="preserve">
          <source>Using a connection pooler in transaction pooling mode (e.g. &lt;a href=&quot;https://pgbouncer.github.io/&quot;&gt;PgBouncer&lt;/a&gt;) requires disabling server-side cursors for that connection.</source>
          <target state="translated">在事务池模式下使用连接池（例如&lt;a href=&quot;https://pgbouncer.github.io/&quot;&gt;PgBouncer&lt;/a&gt;）需要为该连接禁用服务器端游标。</target>
        </trans-unit>
        <trans-unit id="111c55353137548e9daf8a2ee1edd88613fb7b72" translate="yes" xml:space="preserve">
          <source>Using a connection pooler in transaction pooling mode (e.g. &lt;a href=&quot;https://pgbouncer.github.io/&quot;&gt;pgBouncer&lt;/a&gt;) requires disabling server-side cursors for that connection.</source>
          <target state="translated">在事务池模式下使用连接池（例如&lt;a href=&quot;https://pgbouncer.github.io/&quot;&gt;pgBouncer&lt;/a&gt;）需要为该连接禁用服务器端游标。</target>
        </trans-unit>
        <trans-unit id="e718b4edbe1f8f94597125a8692544c848614110" translate="yes" xml:space="preserve">
          <source>Using a cursor as a context manager:</source>
          <target state="translated">使用光标作为上下文管理器。</target>
        </trans-unit>
        <trans-unit id="f2b5d2bb6073fdfcd60745dcc3038452ff9dfa6d" translate="yes" xml:space="preserve">
          <source>Using a custom cache backend</source>
          <target state="translated">使用自定义缓存后端</target>
        </trans-unit>
        <trans-unit id="4ed8a31148ab2393e9f95e90c2eff0e8761cf0c7" translate="yes" xml:space="preserve">
          <source>Using a custom queryset</source>
          <target state="translated">使用自定义查询集</target>
        </trans-unit>
        <trans-unit id="43ee37d685f1736d2d9a4ec2cccc82de7072f531" translate="yes" xml:space="preserve">
          <source>Using a custom reverse manager</source>
          <target state="translated">使用自定义反向管理器</target>
        </trans-unit>
        <trans-unit id="8f30c53065d1a8f29f5826d7a3c55766efd3f518" translate="yes" xml:space="preserve">
          <source>Using a custom user model when starting a project</source>
          <target state="translated">启动项目时使用自定义用户模型</target>
        </trans-unit>
        <trans-unit id="ac5fc9a6e6dd9fd7e0756e971ff223c0650d7618" translate="yes" xml:space="preserve">
          <source>Using a formset in views and templates</source>
          <target state="translated">在视图和模板中使用表单集</target>
        </trans-unit>
        <trans-unit id="62a42325a81cdd46ba2b7cefcfec8c8e044912c6" translate="yes" xml:space="preserve">
          <source>Using a formset inside a view is not very different from using a regular &lt;code&gt;Form&lt;/code&gt; class. The only thing you will want to be aware of is making sure to use the management form inside the template. Let&amp;rsquo;s look at a sample view:</source>
          <target state="translated">在视图中使用 &lt;code&gt;Form&lt;/code&gt; 与使用常规Form类没有太大区别。您要了解的唯一一件事是确保使用模板内的管理表单。让我们看一个示例视图：</target>
        </trans-unit>
        <trans-unit id="554f1d02415f3045d2c5c14e8a1f5bf8c94f8a36" translate="yes" xml:space="preserve">
          <source>Using a model formset in a view</source>
          <target state="translated">在视图中使用模型表单集</target>
        </trans-unit>
        <trans-unit id="db3324bd54ed9eeed57a55679e9c833aaf4916fb" translate="yes" xml:space="preserve">
          <source>Using a named tuple may make use of the results more readable, at the expense of a small performance penalty for transforming the results into a named tuple.</source>
          <target state="translated">使用命名元组可能会使使用结果更易读,但代价是将结果转化为命名元组时要付出很小的性能代价。</target>
        </trans-unit>
        <trans-unit id="0ac0fcd6222036020612a574b9621ca2cac6cf37" translate="yes" xml:space="preserve">
          <source>Using a non-English base language</source>
          <target state="translated">使用非英语基础语言</target>
        </trans-unit>
        <trans-unit id="14aa51fa69a9ae47b4024aa7c6a23dee4abfaba5" translate="yes" xml:space="preserve">
          <source>Using aggregates within a &lt;code&gt;Subquery&lt;/code&gt; expression</source>
          <target state="translated">在 &lt;code&gt;Subquery&lt;/code&gt; 表达式中使用聚合</target>
        </trans-unit>
        <trans-unit id="a2827914354d99fe0075fba7ea5460a51fbd4f2f" translate="yes" xml:space="preserve">
          <source>Using an &lt;code&gt;ImageField&lt;/code&gt; requires that &lt;a href=&quot;https://pillow.readthedocs.io/en/latest/&quot;&gt;Pillow&lt;/a&gt; is installed with support for the image formats you use. If you encounter a &lt;code&gt;corrupt image&lt;/code&gt; error when you upload an image, it usually means that Pillow doesn&amp;rsquo;t understand its format. To fix this, install the appropriate library and reinstall Pillow.</source>
          <target state="translated">使用 &lt;code&gt;ImageField&lt;/code&gt; 要求安装&lt;a href=&quot;https://pillow.readthedocs.io/en/latest/&quot;&gt;Pillow&lt;/a&gt;并支持您使用的图像格式。如果您在上传 &lt;code&gt;corrupt image&lt;/code&gt; 时遇到图片错误的错误，通常意味着Pillow无法理解其格式。要解决此问题，请安装适当的库并重新安装Pillow。</target>
        </trans-unit>
        <trans-unit id="899a9c4925a0559fe4ce33d9cd243a4e2f7f04ec" translate="yes" xml:space="preserve">
          <source>Using an alternative implementation may introduce compatibility, deployment, portability, or maintenance issues. It goes without saying that before adopting a non-standard implementation you should ensure it provides sufficient performance gains for your application to outweigh the potential risks.</source>
          <target state="translated">使用替代实现可能会带来兼容性、部署、可移植性或维护问题。不言而喻,在采用非标准实现之前,你应该确保它为你的应用程序提供足够的性能收益,以抵消潜在的风险。</target>
        </trans-unit>
        <trans-unit id="4047bded8c1c1e1deab6956c159c6c37394bc632" translate="yes" xml:space="preserve">
          <source>Using an inline formset in a view</source>
          <target state="translated">在视图中使用内联表单集</target>
        </trans-unit>
        <trans-unit id="09008c6e49eab9cde27b4c36a436b69d9c12a28b" translate="yes" xml:space="preserve">
          <source>Using cached sessions</source>
          <target state="translated">使用缓存会话</target>
        </trans-unit>
        <trans-unit id="712e243532dae57a4a508def1a52fcc093cfe453" translate="yes" xml:space="preserve">
          <source>Using class-based views</source>
          <target state="translated">使用基于类的视图</target>
        </trans-unit>
        <trans-unit id="219b33243ea77db284122c06a23a335486827ca8" translate="yes" xml:space="preserve">
          <source>Using context processors with Jinja2 templates is discouraged.</source>
          <target state="translated">不鼓励使用Jinja2模板的上下文处理器。</target>
        </trans-unit>
        <trans-unit id="9b5e521be6207ccf6984218b0f3f6cfaeef47736" translate="yes" xml:space="preserve">
          <source>Using cookie-based sessions</source>
          <target state="translated">使用基于cookie的会话</target>
        </trans-unit>
        <trans-unit id="e963177b880b3107082891701819119d5a3c4952" translate="yes" xml:space="preserve">
          <source>Using database-backed sessions</source>
          <target state="translated">使用数据库支持的会话</target>
        </trans-unit>
        <trans-unit id="722d50240897f7ae0e4cf8ed772f8e17a88c6692" translate="yes" xml:space="preserve">
          <source>Using different testing frameworks</source>
          <target state="translated">使用不同的测试框架</target>
        </trans-unit>
        <trans-unit id="91407b7ece83eef5dce52bf7f80c98bfa8d97713" translate="yes" xml:space="preserve">
          <source>Using different versions of available software</source>
          <target state="translated">使用不同版本的可用软件</target>
        </trans-unit>
        <trans-unit id="30a5103ae8eec9a9c1b5e20061ad0468d854eb13" translate="yes" xml:space="preserve">
          <source>Using either one of these features requires that an active language be set for each request; in other words, you need to have &lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt;&lt;code&gt;django.middleware.locale.LocaleMiddleware&lt;/code&gt;&lt;/a&gt; in your &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">使用这些功能之一需要为每个请求设置一种有效的语言。换句话说，您需要在&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;设置中包含&lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt; &lt;code&gt;django.middleware.locale.LocaleMiddleware&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="94899c6a3467596b737d710599f463e0a5fefab4" translate="yes" xml:space="preserve">
          <source>Using file-based sessions</source>
          <target state="translated">使用基于文件的会议</target>
        </trans-unit>
        <trans-unit id="396ca845e263c8cba2f72b24ba14f0bb213b6969" translate="yes" xml:space="preserve">
          <source>Using files in models</source>
          <target state="translated">在模型中使用文件</target>
        </trans-unit>
        <trans-unit id="53415d30f410d9eaa46365eda26aa38b029be4c2" translate="yes" xml:space="preserve">
          <source>Using forms to validate data</source>
          <target state="translated">使用表格来验证数据</target>
        </trans-unit>
        <trans-unit id="f7abd395b7d9e7bcc61766a85ccb669c81d39541" translate="yes" xml:space="preserve">
          <source>Using generic relations as an inline</source>
          <target state="translated">使用通用关系作为内联</target>
        </trans-unit>
        <trans-unit id="d3efb3102778069f675e857fd0eeb2c948c7eca3" translate="yes" xml:space="preserve">
          <source>Using initial data with a formset</source>
          <target state="translated">使用表格集的初始数据</target>
        </trans-unit>
        <trans-unit id="459816856889e1240afd58cac446eb13de2bf33e" translate="yes" xml:space="preserve">
          <source>Using logging</source>
          <target state="translated">使用记录</target>
        </trans-unit>
        <trans-unit id="7e7f28c61f2b667796155286733724e7db2835d4" translate="yes" xml:space="preserve">
          <source>Using managers for related object access</source>
          <target state="translated">使用管理人员进行相关对象访问</target>
        </trans-unit>
        <trans-unit id="d639ac959d5c0b2ddde832ed6431f77e13d03c2a" translate="yes" xml:space="preserve">
          <source>Using managers with multiple databases</source>
          <target state="translated">使用多数据库的管理人员</target>
        </trans-unit>
        <trans-unit id="a562ed381203352442504a5755ffaa5a9ddc5506" translate="yes" xml:space="preserve">
          <source>Using messages in views and templates</source>
          <target state="translated">在视图和模板中使用消息</target>
        </trans-unit>
        <trans-unit id="54a59821b006489f143ba9ff1774c5e1eb660ec1" translate="yes" xml:space="preserve">
          <source>Using mixins</source>
          <target state="translated">使用混音器</target>
        </trans-unit>
        <trans-unit id="3b505367a73d0f30530501f569cf8d66cb316242" translate="yes" xml:space="preserve">
          <source>Using mixins with class-based views</source>
          <target state="translated">在基于类的视图中使用 mixins</target>
        </trans-unit>
        <trans-unit id="fa5d07edc488e375d172798cad0bfe3830d3be56" translate="yes" xml:space="preserve">
          <source>Using models</source>
          <target state="translated">使用模型</target>
        </trans-unit>
        <trans-unit id="5e4776a63386fd9267b226c945a1b3275a3f2e2b" translate="yes" xml:space="preserve">
          <source>Using more than one formset in a view</source>
          <target state="translated">在一个视图中使用多个表单集</target>
        </trans-unit>
        <trans-unit id="a3bf09f1e97f7bcd6438f31c0e77e29c6ce13da0" translate="yes" xml:space="preserve">
          <source>Using other management commands</source>
          <target state="translated">使用其他管理命令</target>
        </trans-unit>
        <trans-unit id="da23df4511acb0fe5c38fc44856610089abb9886" translate="yes" xml:space="preserve">
          <source>Using raw cursors with multiple databases</source>
          <target state="translated">在多个数据库中使用原始光标</target>
        </trans-unit>
        <trans-unit id="38ecb5a74be8eb3ad805ff07aca2f34559f33e2f" translate="yes" xml:space="preserve">
          <source>Using raw strings (e.g., &lt;code&gt;r'foo'&lt;/code&gt; instead of &lt;code&gt;'foo'&lt;/code&gt;) for passing in the regular expression syntax is recommended.</source>
          <target state="translated">建议使用原始字符串（例如，使用 &lt;code&gt;r'foo'&lt;/code&gt; 而不是 &lt;code&gt;'foo'&lt;/code&gt; ）来传递正则表达式语法。</target>
        </trans-unit>
        <trans-unit id="18988fc8caaba44179708163dbb1aad1050b3dcd" translate="yes" xml:space="preserve">
          <source>Using regular expressions</source>
          <target state="translated">使用正则表达式</target>
        </trans-unit>
        <trans-unit id="a9cc1741d165448eff74bcae7a3e3908595538ad" translate="yes" xml:space="preserve">
          <source>Using related models results in additional queries or joins to retrieve the related data. Depending on your needs, a custom user model that includes the related fields may be your better option, however, existing relations to the default user model within your project&amp;rsquo;s apps may justify the extra database load.</source>
          <target state="translated">使用相关模型会导致其他查询或联接以检索相关数据。根据您的需求，包括相关字段的自定义用户模型可能是您的更好选择，但是，项目应用程序中与默认用户模型的现有关系可能会证明额外的数据库负载是合理的。</target>
        </trans-unit>
        <trans-unit id="a05e29bf07e9996682f553c9a5402b7ef382c513" translate="yes" xml:space="preserve">
          <source>Using routers</source>
          <target state="translated">使用路由器</target>
        </trans-unit>
        <trans-unit id="c78e51a835808de3e9a9397afc60c4ef984e7144" translate="yes" xml:space="preserve">
          <source>Using salt in this way puts the different signatures into different namespaces. A signature that comes from one namespace (a particular salt value) cannot be used to validate the same plaintext string in a different namespace that is using a different salt setting. The result is to prevent an attacker from using a signed string generated in one place in the code as input to another piece of code that is generating (and verifying) signatures using a different salt.</source>
          <target state="translated">以这种方式使用盐,会将不同的签名放入不同的命名空间。来自一个命名空间的签名(一个特定的盐值)不能用于验证在使用不同盐值设置的不同命名空间中的同一明文字符串。这样做的结果是防止攻击者将代码中某个地方生成的签名字符串作为输入,输入到使用不同盐值生成(和验证)签名的另一段代码中。</target>
        </trans-unit>
        <trans-unit id="bba38cc11217dc042aa7082661f9b1799f84a4c1" translate="yes" xml:space="preserve">
          <source>Using sessions in views</source>
          <target state="translated">在视图中使用会话</target>
        </trans-unit>
        <trans-unit id="3c07b1e7a86ae545464f8a5e4d28a0455a58a067" translate="yes" xml:space="preserve">
          <source>Using sessions out of views</source>
          <target state="translated">使用意见之外的会议</target>
        </trans-unit>
        <trans-unit id="37999324c24e63b8affa3e0800da106fa1a6135a" translate="yes" xml:space="preserve">
          <source>Using settings in Python code</source>
          <target state="translated">在Python代码中使用设置</target>
        </trans-unit>
        <trans-unit id="e5adbccdcf800861d1cee63d526315264c0caee5" translate="yes" xml:space="preserve">
          <source>Using settings without setting &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;</source>
          <target state="translated">使用设置而不设置 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc2276482d7aa613705bfeac45a792ebe3d29b5a" translate="yes" xml:space="preserve">
          <source>Using settings without setting DJANGO_SETTINGS_MODULE</source>
          <target state="translated">在不设置DJANGO_SETTINGS_MODULE的情况下使用设置。</target>
        </trans-unit>
        <trans-unit id="ac88b3fee6d9019798db8365e7b93e589686ab06" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#django.test.SimpleTestCase.client&quot;&gt;&lt;code&gt;client&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#django.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;#django.test.SimpleTestCase.client&quot;&gt; &lt;code&gt;client&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#django.test.Client&quot;&gt; &lt;code&gt;Client&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a4088855a0650aae6391fe4b7364d7fd81adccf" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;../ref/utils#django.utils.functional.cached_property&quot;&gt;&lt;code&gt;cached_property&lt;/code&gt;&lt;/a&gt; decorator saves the value returned by a property; the next time the function is called on that instance, it will return the saved value rather than re-computing it. Note that this only works on methods that take &lt;code&gt;self&lt;/code&gt; as their only argument and that it changes the method to a property.</source>
          <target state="translated">使用&lt;a href=&quot;../ref/utils#django.utils.functional.cached_property&quot;&gt; &lt;code&gt;cached_property&lt;/code&gt; &lt;/a&gt;装饰器保存属性返回的值。下次在该实例上调用该函数时，它将返回保存的值，而不是重新计算它。请注意，这仅适用于将 &lt;code&gt;self&lt;/code&gt; 作为其唯一参数的方法，并将该方法更改为属性。</target>
        </trans-unit>
        <trans-unit id="63cdfe9e1c37c173d8bbf7c99d274b35062cfb2c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;Entry&lt;/code&gt; example above, the following two statements are equivalent:</source>
          <target state="translated">使用上面的 &lt;code&gt;Entry&lt;/code&gt; 示例，以下两个语句是等效的：</target>
        </trans-unit>
        <trans-unit id="f63700f11e33ca9cebf526f3424fec7dcd18baef" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;localized_fields&lt;/code&gt; parameter, you can enable localization for fields in the form.</source>
          <target state="translated">使用 &lt;code&gt;localized_fields&lt;/code&gt; 参数，可以为表单中的字段启用本地化。</target>
        </trans-unit>
        <trans-unit id="3561c519a106d78786967e6e5ab97c000946b087" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;salt&lt;/code&gt; argument</source>
          <target state="translated">使用 &lt;code&gt;salt&lt;/code&gt; 参数</target>
        </trans-unit>
        <trans-unit id="15ad75ac1567453b20adde00c041ccc2df84a0b6" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;widgets&lt;/code&gt; parameter, you can specify a dictionary of values to customize the &lt;code&gt;ModelForm&lt;/code&gt;&amp;rsquo;s widget class for a particular field. This works the same way as the &lt;code&gt;widgets&lt;/code&gt; dictionary on the inner &lt;code&gt;Meta&lt;/code&gt; class of a &lt;code&gt;ModelForm&lt;/code&gt; works:</source>
          <target state="translated">使用 &lt;code&gt;widgets&lt;/code&gt; 参数，您可以指定值的字典以自定义特定字段的 &lt;code&gt;ModelForm&lt;/code&gt; 的widget类。这与 &lt;code&gt;ModelForm&lt;/code&gt; 的内部 &lt;code&gt;Meta&lt;/code&gt; 类上的 &lt;code&gt;widgets&lt;/code&gt; 字典的工作方式相同：</target>
        </trans-unit>
        <trans-unit id="661566691fa044ff4e089905a69fb1bdef2450fe" translate="yes" xml:space="preserve">
          <source>Using the Django authentication system</source>
          <target state="translated">使用Django认证系统</target>
        </trans-unit>
        <trans-unit id="1d702f2bf5fde5187f538ba36a04680276f94cf2" translate="yes" xml:space="preserve">
          <source>Using the Django test runner to test reusable applications</source>
          <target state="translated">使用Django测试运行器测试可重用的应用程序</target>
        </trans-unit>
        <trans-unit id="ecf17c47e1f42f1b44e2dd8414284049a1f64782" translate="yes" xml:space="preserve">
          <source>Using the JavaScript translation catalog</source>
          <target state="translated">使用JavaScript翻译目录</target>
        </trans-unit>
        <trans-unit id="93436abaf3f289f71fad6be4ae2eee21c3aba0f7" translate="yes" xml:space="preserve">
          <source>Using the Python CSV library</source>
          <target state="translated">使用Python CSV库</target>
        </trans-unit>
        <trans-unit id="ca22ebd07b6cf67b2b0910519965287ba635921f" translate="yes" xml:space="preserve">
          <source>Using the URLconf</source>
          <target state="translated">使用URLconf</target>
        </trans-unit>
        <trans-unit id="be93b82fa1b8507dec9d6a64171f583efdf10315" translate="yes" xml:space="preserve">
          <source>Using the decorators with other HTTP methods</source>
          <target state="translated">在其他HTTP方法中使用装饰符</target>
        </trans-unit>
        <trans-unit id="7d0bc78b7817642ff9929ca2925be4b7924ff499" translate="yes" xml:space="preserve">
          <source>Using the formset in the template</source>
          <target state="translated">使用模板中的表格集</target>
        </trans-unit>
        <trans-unit id="815235c7cdf01efac8a2d52e29479788c7d74fb3" translate="yes" xml:space="preserve">
          <source>Using the low-level API</source>
          <target state="translated">使用低级API</target>
        </trans-unit>
        <trans-unit id="cb188ff02b9a0523149bba733ccf29acf02a61ba" translate="yes" xml:space="preserve">
          <source>Using the middleware</source>
          <target state="translated">使用中间件</target>
        </trans-unit>
        <trans-unit id="77d723f298255b5c5fa52336710b52e11b0b4c76" translate="yes" xml:space="preserve">
          <source>Using the models at the top of this page, for example, an &lt;code&gt;Entry&lt;/code&gt; object &lt;code&gt;e&lt;/code&gt; can get its associated &lt;code&gt;Blog&lt;/code&gt; object by accessing the &lt;code&gt;blog&lt;/code&gt; attribute: &lt;code&gt;e.blog&lt;/code&gt;.</source>
          <target state="translated">例如，使用此页面顶部的模型， &lt;code&gt;Entry&lt;/code&gt; 对象 &lt;code&gt;e&lt;/code&gt; 可以通过访问 &lt;code&gt;blog&lt;/code&gt; 属性 &lt;code&gt;e.blog&lt;/code&gt; 来获取其关联的 &lt;code&gt;Blog&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="06c614313c96fb0af3bfe23f148af5d8141ae7ad" translate="yes" xml:space="preserve">
          <source>Using the parameters, a slightly more complex version of the blocker could include the connection name in the error message:</source>
          <target state="translated">使用这些参数,一个稍微复杂一点的阻断器版本可以在错误信息中包含连接名称。</target>
        </trans-unit>
        <trans-unit id="8e53963dfe0a1fc2a212f3c4ff9b628f2420e818" translate="yes" xml:space="preserve">
          <source>Using the result multiple times in each template.</source>
          <target state="translated">在每个模板中多次使用结果。</target>
        </trans-unit>
        <trans-unit id="2d76080bcad973ee8659bf823f8341e9cdcb01a2" translate="yes" xml:space="preserve">
          <source>Using the same &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; option as above, this will attempt to load the following templates:</source>
          <target state="translated">使用与上述相同的&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;选项，这将尝试加载以下模板：</target>
        </trans-unit>
        <trans-unit id="9fbbd5375161aa64abb0617a231597b64c460223" translate="yes" xml:space="preserve">
          <source>Using the template system</source>
          <target state="translated">使用模板系统</target>
        </trans-unit>
        <trans-unit id="61e2bf83bb86f60fd447308f6616a261218345ef" translate="yes" xml:space="preserve">
          <source>Using the template system in Python is a three-step process:</source>
          <target state="translated">在Python中使用模板系统是一个三步走的过程。</target>
        </trans-unit>
        <trans-unit id="5377b9ee650ece2fb2a4d8587e3ca7c80984bb0f" translate="yes" xml:space="preserve">
          <source>Using the views</source>
          <target state="translated">使用视图</target>
        </trans-unit>
        <trans-unit id="06f38a09cd7db1bb0ae52d6487b6bada3e4df33f" translate="yes" xml:space="preserve">
          <source>Using these methods, you can write high-level generic code that performs queries on any installed model &amp;ndash; instead of importing and using a single specific model class, you can pass an &lt;code&gt;app_label&lt;/code&gt; and &lt;code&gt;model&lt;/code&gt; into a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; lookup at runtime, and then work with the model class or retrieve objects from it.</source>
          <target state="translated">使用这些方法，您可以编写可在任何已安装模型上执行查询的高级通用代码-无需导入和使用单个特定模型类，而可以在运行时将 &lt;code&gt;app_label&lt;/code&gt; 和 &lt;code&gt;model&lt;/code&gt; 传递到&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;查找中，然后使用模型类或从中检索对象。</target>
        </trans-unit>
        <trans-unit id="431e90afd5f06e6bd944377797ad9c73357f38e2" translate="yes" xml:space="preserve">
          <source>Using this bookmarklet requires that &lt;code&gt;XViewMiddleware&lt;/code&gt; is installed and that you are logged into the &lt;a href=&quot;index#module-django.contrib.admin&quot;&gt;&lt;code&gt;Django admin&lt;/code&gt;&lt;/a&gt; as a &lt;a href=&quot;../auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt;&lt;code&gt;is_staff&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">使用此书签需要安装 &lt;code&gt;XViewMiddleware&lt;/code&gt; ，并且您以&lt;a href=&quot;../auth#django.contrib.auth.models.User.is_staff&quot;&gt; &lt;code&gt;is_staff&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;True&lt;/code&gt; 的&lt;a href=&quot;../auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;身份登录到&lt;a href=&quot;index#module-django.contrib.admin&quot;&gt; &lt;code&gt;Django admin&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bbeee8bfa7b08a0c5da0b3386d5f491c796e4c48" translate="yes" xml:space="preserve">
          <source>Using this decorator means you can write your function and assume that the input is a proper string, then add support for lazy translation objects at the end.</source>
          <target state="translated">使用这个装饰器意味着你可以编写你的函数,并假设输入是一个正确的字符串,然后在最后添加对懒惰翻译对象的支持。</target>
        </trans-unit>
        <trans-unit id="7480984e78ad4eb9e153bf7a81ed50521acc1b75" translate="yes" xml:space="preserve">
          <source>Using this example model, &lt;code&gt;Person.objects&lt;/code&gt; will generate an &lt;code&gt;AttributeError&lt;/code&gt; exception, but &lt;code&gt;Person.people.all()&lt;/code&gt; will provide a list of all &lt;code&gt;Person&lt;/code&gt; objects.</source>
          <target state="translated">使用此示例模型， &lt;code&gt;Person.objects&lt;/code&gt; 将生成 &lt;code&gt;AttributeError&lt;/code&gt; 异常，但是 &lt;code&gt;Person.people.all()&lt;/code&gt; 将提供所有 &lt;code&gt;Person&lt;/code&gt; 对象的列表。</target>
        </trans-unit>
        <trans-unit id="262fd65d339e5a7db75999c15071593bf6231689" translate="yes" xml:space="preserve">
          <source>Using this feature usefully is probably best explained with an example. Suppose you have this pair of models, representing a small blog system:</source>
          <target state="translated">有用的使用这个功能,最好的解释可能是用一个例子。假设你有这样一对模型,代表一个小型博客系统。</target>
        </trans-unit>
        <trans-unit id="71806a8188277249c8e155d15f21dc34cda4daae" translate="yes" xml:space="preserve">
          <source>Using this option when the database backend supports time zones was allowed.</source>
          <target state="translated">当数据库后台支持时区时,允许使用这个选项。</target>
        </trans-unit>
        <trans-unit id="0ea5d6a0d304b934c5dbf1fb4ac5997a88cc09a3" translate="yes" xml:space="preserve">
          <source>Using this renderer along with the built-in widget templates requires either:</source>
          <target state="translated">使用这个渲染器和内置的widget模板需要以下两种方式。</target>
        </trans-unit>
        <trans-unit id="38af29bc15e311d440bad7fbd6e2bace11b25e9b" translate="yes" xml:space="preserve">
          <source>Using this renderer requires you to make sure the form templates your project needs can be located.</source>
          <target state="translated">使用这个渲染器需要你确保你的项目所需的表单模板可以被找到。</target>
        </trans-unit>
        <trans-unit id="42f7f1f775fcbbccfb41145a7b4acdcbd45277e1" translate="yes" xml:space="preserve">
          <source>Using this setup, the following lookups are possible:</source>
          <target state="translated">使用这种设置,可以进行以下查找。</target>
        </trans-unit>
        <trans-unit id="d03e7d65dccb786da0c5ea2cdc1052bcedd878aa" translate="yes" xml:space="preserve">
          <source>Using translations outside views and templates</source>
          <target state="translated">在视图和模板之外使用翻译</target>
        </trans-unit>
        <trans-unit id="54c5b26ddde5892747473c35017de53a6b164dac" translate="yes" xml:space="preserve">
          <source>Using unnamed regular expression groups</source>
          <target state="translated">使用未命名的正则表达式组</target>
        </trans-unit>
        <trans-unit id="c7d70893665ff77fdaaf302ea439164a93f896e7" translate="yes" xml:space="preserve">
          <source>Using validation in practice</source>
          <target state="translated">在实践中使用验证</target>
        </trans-unit>
        <trans-unit id="5bf70941f96163c1833edf8ea3db5448e4a4ba9e" translate="yes" xml:space="preserve">
          <source>Using validators</source>
          <target state="translated">使用验证器</target>
        </trans-unit>
        <trans-unit id="a3f0cdb408fe2eb8b7926c9f3b3bbc789e6203e6" translate="yes" xml:space="preserve">
          <source>Using your own package</source>
          <target state="translated">使用自己的软件包</target>
        </trans-unit>
        <trans-unit id="550e826a2927cd8ea25940bb561b837a288a51b3" translate="yes" xml:space="preserve">
          <source>Usually there is no need to set this attribute. The default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">通常不需要设置此属性。默认值为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0aaadd10ea3107f1c4459342ec34687215a60c17" translate="yes" xml:space="preserve">
          <source>Usually this will be enough, but from time to time you may need to ensure that your migration runs &lt;em&gt;before&lt;/em&gt; other migrations. This is useful, for example, to make third-party apps&amp;rsquo; migrations run &lt;em&gt;after&lt;/em&gt; your &lt;a href=&quot;../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; replacement.</source>
          <target state="translated">通常这就足够了，但是您可能需要不时确保&lt;em&gt;在&lt;/em&gt;其他迁移&lt;em&gt;之前&lt;/em&gt;运行您的迁移。例如，这有助于使您替换&lt;a href=&quot;../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;&lt;em&gt;之后&lt;/em&gt;运行第三方应用程序的迁移。</target>
        </trans-unit>
        <trans-unit id="0aff3f9e73f7904475aa03cc2e6098355ceb5556" translate="yes" xml:space="preserve">
          <source>Usually when you&amp;rsquo;ll interact with a &lt;code&gt;QuerySet&lt;/code&gt; you&amp;rsquo;ll use it by &lt;a href=&quot;../../topics/db/queries#chaining-filters&quot;&gt;chaining filters&lt;/a&gt;. To make this work, most &lt;code&gt;QuerySet&lt;/code&gt; methods return new querysets. These methods are covered in detail later in this section.</source>
          <target state="translated">通常，当您与 &lt;code&gt;QuerySet&lt;/code&gt; 交互时，将通过&lt;a href=&quot;../../topics/db/queries#chaining-filters&quot;&gt;链接过滤器来&lt;/a&gt;使用它。为此，大多数 &lt;code&gt;QuerySet&lt;/code&gt; 方法都返回新的查询集。本节稍后将详细介绍这些方法。</target>
        </trans-unit>
        <trans-unit id="b21469443450cb938303739ea070f5a77ad694ea" translate="yes" xml:space="preserve">
          <source>Usually you should build up HTML using Django&amp;rsquo;s templates to make use of its autoescape mechanism, using the utilities in &lt;a href=&quot;#module-django.utils.safestring&quot;&gt;&lt;code&gt;django.utils.safestring&lt;/code&gt;&lt;/a&gt; where appropriate. This module provides some additional low level utilities for escaping HTML.</source>
          <target state="translated">通常，您应该使用Django的模板来构建HTML，以利用其自动转义机制，并在适当的地方使用&lt;a href=&quot;#module-django.utils.safestring&quot;&gt; &lt;code&gt;django.utils.safestring&lt;/code&gt; &lt;/a&gt;中的实用程序。该模块提供了一些其他的用于转义HTML的底层实用程序。</target>
        </trans-unit>
        <trans-unit id="0f36944fd9a406992a7e16bb0c9c72e4d2f92f04" translate="yes" xml:space="preserve">
          <source>Usually, elements of &lt;code&gt;list_display&lt;/code&gt; that aren&amp;rsquo;t actual database fields can&amp;rsquo;t be used in sorting (because Django does all the sorting at the database level).</source>
          <target state="translated">通常，不是实际数据库字段的 &lt;code&gt;list_display&lt;/code&gt; 元素不能用于排序（因为Django在数据库级别进行了所有排序）。</target>
        </trans-unit>
        <trans-unit id="1f83b78620a3f44e86a39030f5a235640c96f74f" translate="yes" xml:space="preserve">
          <source>Usually, if another transaction has already acquired a lock on one of the selected rows, the query will block until the lock is released. If this is not the behavior you want, call &lt;code&gt;select_for_update(nowait=True)&lt;/code&gt;. This will make the call non-blocking. If a conflicting lock is already acquired by another transaction, &lt;a href=&quot;../exceptions#django.db.DatabaseError&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt; will be raised when the queryset is evaluated. You can also ignore locked rows by using &lt;code&gt;select_for_update(skip_locked=True)&lt;/code&gt; instead. The &lt;code&gt;nowait&lt;/code&gt; and &lt;code&gt;skip_locked&lt;/code&gt; are mutually exclusive and attempts to call &lt;code&gt;select_for_update()&lt;/code&gt; with both options enabled will result in a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常，如果另一个事务已经获得了对所选行之一的锁定，则查询将阻塞，直到释放该锁定为止。如果这不是您想要的行为，请调用 &lt;code&gt;select_for_update(nowait=True)&lt;/code&gt; 。这将使呼叫不阻塞。如果另一个事务已经获取了冲突的锁，则在评估查询集时将引发&lt;a href=&quot;../exceptions#django.db.DatabaseError&quot;&gt; &lt;code&gt;DatabaseError&lt;/code&gt; &lt;/a&gt;。您也可以通过使用 &lt;code&gt;select_for_update(skip_locked=True)&lt;/code&gt; 来忽略锁定的行。该 &lt;code&gt;nowait&lt;/code&gt; 和 &lt;code&gt;skip_locked&lt;/code&gt; 是互斥的，试图调用 &lt;code&gt;select_for_update()&lt;/code&gt; 有两个选项启用将导致&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 异常&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="439a51ffd52fc469c95fceae28d995d4c094f903" translate="yes" xml:space="preserve">
          <source>Usually, the application namespace should be specified by the included module. If an application namespace is set, the &lt;code&gt;namespace&lt;/code&gt; argument can be used to set a different instance namespace.</source>
          <target state="translated">通常，应用程序名称空间应由包含的模块指定。如果设置了应用程序名称空间，则可以使用 &lt;code&gt;namespace&lt;/code&gt; 参数来设置其他实例名称空间。</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="f16cdccb3faaa5e67faa6fdb65caa5cf29d51cbb" translate="yes" xml:space="preserve">
          <source>Utility functions</source>
          <target state="translated">实用功能</target>
        </trans-unit>
        <trans-unit id="df5a81323fd824a5ae16e1b2c1131af236466235" translate="yes" xml:space="preserve">
          <source>Validate the field uniqueness - &lt;a href=&quot;#django.db.models.Model.validate_unique&quot;&gt;&lt;code&gt;Model.validate_unique()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">验证字段唯一性&lt;a href=&quot;#django.db.models.Model.validate_unique&quot;&gt; &lt;code&gt;Model.validate_unique()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c0758db94eadfc40bb6f1aec50a9b3167bbf24b8" translate="yes" xml:space="preserve">
          <source>Validate the model as a whole - &lt;a href=&quot;#django.db.models.Model.clean&quot;&gt;&lt;code&gt;Model.clean()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">整体验证模型&lt;a href=&quot;#django.db.models.Model.clean&quot;&gt; &lt;code&gt;Model.clean()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b0ea75efddc63e41263e629cf2f36ff06ff116f0" translate="yes" xml:space="preserve">
          <source>Validate the model fields - &lt;a href=&quot;#django.db.models.Model.clean_fields&quot;&gt;&lt;code&gt;Model.clean_fields()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">验证模型字段&lt;a href=&quot;#django.db.models.Model.clean_fields&quot;&gt; &lt;code&gt;Model.clean_fields()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e8f7b38fbffba806e0ac0f63853430f5bef3b147" translate="yes" xml:space="preserve">
          <source>Validates a password. If all validators find the password valid, returns &lt;code&gt;None&lt;/code&gt;. If one or more validators reject the password, raises a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with all the error messages from the validators.</source>
          <target state="translated">验证密码。如果所有验证者都认为密码有效，则返回 &lt;code&gt;None&lt;/code&gt; 。如果一个或多个验证者拒绝密码，则将产生&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;以及来自验证者的所有错误消息。</target>
        </trans-unit>
        <trans-unit id="57438d749f0f60d8c3629d9567fe391119db098c" translate="yes" xml:space="preserve">
          <source>Validates nothing (i.e., it never raises a &lt;code&gt;ValidationError&lt;/code&gt;).</source>
          <target state="translated">不进行任何验证（即，它从不引发 &lt;code&gt;ValidationError&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c605c7277e2bfe1fb583ddbab51805c05f6d0c98" translate="yes" xml:space="preserve">
          <source>Validates that every id in the given list of values exists in the queryset.</source>
          <target state="translated">验证给定值列表中的每个id是否存在于queryset中。</target>
        </trans-unit>
        <trans-unit id="5f36358736b0e491d63d28efe23ef97ae0a786a4" translate="yes" xml:space="preserve">
          <source>Validates that every value in the given list of values exists in the list of choices.</source>
          <target state="translated">验证给定值列表中的每个值是否存在于选择列表中。</target>
        </trans-unit>
        <trans-unit id="86e24952143ad19570f9cc006bc6c7a350adf549" translate="yes" xml:space="preserve">
          <source>Validates that file data has been bound to the form. Also uses &lt;a href=&quot;../validators#django.core.validators.FileExtensionValidator&quot;&gt;&lt;code&gt;FileExtensionValidator&lt;/code&gt;&lt;/a&gt; to validate that the file extension is supported by Pillow.</source>
          <target state="translated">验证文件数据已绑定到表单。还使用&lt;a href=&quot;../validators#django.core.validators.FileExtensionValidator&quot;&gt; &lt;code&gt;FileExtensionValidator&lt;/code&gt; &lt;/a&gt;来验证Pillow支持文件扩展名。</target>
        </trans-unit>
        <trans-unit id="2486043717d64c0e0f90e88711ae8ac419c28d2a" translate="yes" xml:space="preserve">
          <source>Validates that the given id exists in the queryset.</source>
          <target state="translated">验证给定的id是否存在于queryset中。</target>
        </trans-unit>
        <trans-unit id="d41eab543390f84e6c86d3be58fa5e65ae9b9375" translate="yes" xml:space="preserve">
          <source>Validates that the given keys are contained in the value. If &lt;code&gt;strict&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, then it also checks that there are no other keys present.</source>
          <target state="translated">验证给定键包含在值中。如果 &lt;code&gt;strict&lt;/code&gt; 为 &lt;code&gt;True&lt;/code&gt; ，那么它还会检查是否没有其他键。</target>
        </trans-unit>
        <trans-unit id="f39b079a0f6688e4451cf4348efe2c48b017367a" translate="yes" xml:space="preserve">
          <source>Validates that the given value exists in the list of choices and can be coerced.</source>
          <target state="translated">验证给定的值是否存在于选择列表中,并且可以被强制执行。</target>
        </trans-unit>
        <trans-unit id="c7d1ad278ad027ddf2dcdab2d2137843da014d4d" translate="yes" xml:space="preserve">
          <source>Validates that the given value exists in the list of choices.</source>
          <target state="translated">验证给定值是否存在于选择列表中。</target>
        </trans-unit>
        <trans-unit id="8d333d4dd21aa6d46d75d3ef13f00f761223d12a" translate="yes" xml:space="preserve">
          <source>Validates that the given value is a &lt;code&gt;datetime.datetime&lt;/code&gt; or string formatted in a particular datetime format.</source>
          <target state="translated">验证给定的值是 &lt;code&gt;datetime.datetime&lt;/code&gt; 还是以特定datetime格式格式化的字符串。</target>
        </trans-unit>
        <trans-unit id="3ff141624a9f19e384151c40784a3378838d71b0" translate="yes" xml:space="preserve">
          <source>Validates that the given value is a decimal. Uses &lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt;&lt;code&gt;MaxValueValidator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt;&lt;code&gt;MinValueValidator&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;max_value&lt;/code&gt; and &lt;code&gt;min_value&lt;/code&gt; are provided. Leading and trailing whitespace is ignored.</source>
          <target state="translated">验证给定的值为十进制。使用&lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt; &lt;code&gt;MaxValueValidator&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt; &lt;code&gt;MinValueValidator&lt;/code&gt; &lt;/a&gt;如果 &lt;code&gt;max_value&lt;/code&gt; 和 &lt;code&gt;min_value&lt;/code&gt; 提供。前导和尾随空格将被忽略。</target>
        </trans-unit>
        <trans-unit id="46d6a2daba6396cf25045876054f0cf4431a075a" translate="yes" xml:space="preserve">
          <source>Validates that the given value is a float. Uses &lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt;&lt;code&gt;MaxValueValidator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt;&lt;code&gt;MinValueValidator&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;max_value&lt;/code&gt; and &lt;code&gt;min_value&lt;/code&gt; are provided. Leading and trailing whitespace is allowed, as in Python&amp;rsquo;s &lt;code&gt;float()&lt;/code&gt; function.</source>
          <target state="translated">验证给定的值是一个浮点数。使用&lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt; &lt;code&gt;MaxValueValidator&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt; &lt;code&gt;MinValueValidator&lt;/code&gt; &lt;/a&gt;如果 &lt;code&gt;max_value&lt;/code&gt; 和 &lt;code&gt;min_value&lt;/code&gt; 提供。像Python的 &lt;code&gt;float()&lt;/code&gt; 函数一样，允许前导和尾随空格。</target>
        </trans-unit>
        <trans-unit id="495fddce59b02f9daa87c856e04632c05eada534" translate="yes" xml:space="preserve">
          <source>Validates that the given value is a string which can be converted into a &lt;code&gt;timedelta&lt;/code&gt;. The value must be between &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta.min&quot;&gt;&lt;code&gt;datetime.timedelta.min&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta.max&quot;&gt;&lt;code&gt;datetime.timedelta.max&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">验证给定值是可以转换为 &lt;code&gt;timedelta&lt;/code&gt; 的字符串。该值必须介于&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta.min&quot;&gt; &lt;code&gt;datetime.timedelta.min&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta.max&quot;&gt; &lt;code&gt;datetime.timedelta.max&lt;/code&gt; &lt;/a&gt;之间。</target>
        </trans-unit>
        <trans-unit id="e00b8907889f17e61e5a6cab7c3a791557aeee76" translate="yes" xml:space="preserve">
          <source>Validates that the given value is a valid IP address.</source>
          <target state="translated">验证给定的值是一个有效的IP地址。</target>
        </trans-unit>
        <trans-unit id="59e6dee9b2799f802eae9b3c7fc33dad8208b9eb" translate="yes" xml:space="preserve">
          <source>Validates that the given value is a valid JSON.</source>
          <target state="translated">验证给定值是否为有效的JSON。</target>
        </trans-unit>
        <trans-unit id="9f80a852bfc910bdb75a27c34bd5a1c6f0179f01" translate="yes" xml:space="preserve">
          <source>Validates that the given value is an integer. Uses &lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt;&lt;code&gt;MaxValueValidator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt;&lt;code&gt;MinValueValidator&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;max_value&lt;/code&gt; and &lt;code&gt;min_value&lt;/code&gt; are provided. Leading and trailing whitespace is allowed, as in Python&amp;rsquo;s &lt;code&gt;int()&lt;/code&gt; function.</source>
          <target state="translated">验证给定的值是整数。使用&lt;a href=&quot;../validators#django.core.validators.MaxValueValidator&quot;&gt; &lt;code&gt;MaxValueValidator&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../validators#django.core.validators.MinValueValidator&quot;&gt; &lt;code&gt;MinValueValidator&lt;/code&gt; &lt;/a&gt;如果 &lt;code&gt;max_value&lt;/code&gt; 和 &lt;code&gt;min_value&lt;/code&gt; 提供。像Python的 &lt;code&gt;int()&lt;/code&gt; 函数一样，允许前导和尾随空格。</target>
        </trans-unit>
        <trans-unit id="98c5e2cdb3ff066588923a7959c004a5961dfbc1" translate="yes" xml:space="preserve">
          <source>Validates that the given value is either a &lt;code&gt;datetime.date&lt;/code&gt;, &lt;code&gt;datetime.datetime&lt;/code&gt; or string formatted in a particular date format.</source>
          <target state="translated">验证给定的值是 &lt;code&gt;datetime.date&lt;/code&gt; ， &lt;code&gt;datetime.datetime&lt;/code&gt; 还是以特定日期格式格式化的字符串。</target>
        </trans-unit>
        <trans-unit id="f254971ebd82d894de9ef8230a471619ea1b34ad" translate="yes" xml:space="preserve">
          <source>Validates that the given value is either a &lt;code&gt;datetime.datetime&lt;/code&gt;, &lt;code&gt;datetime.date&lt;/code&gt; or string formatted in a particular datetime format.</source>
          <target state="translated">验证给定的值是 &lt;code&gt;datetime.datetime&lt;/code&gt; ， &lt;code&gt;datetime.date&lt;/code&gt; 还是以特定datetime格式格式化的字符串。</target>
        </trans-unit>
        <trans-unit id="ff6831b127aae626d785b35ed1f7b0a4f254dd5c" translate="yes" xml:space="preserve">
          <source>Validates that the given value is either a &lt;code&gt;datetime.time&lt;/code&gt; or string formatted in a particular time format.</source>
          <target state="translated">验证给定的值是 &lt;code&gt;datetime.time&lt;/code&gt; 还是以特定时间格式格式化的字符串。</target>
        </trans-unit>
        <trans-unit id="71faa5d84e73b11d9583cc19f86b79703a92d13a" translate="yes" xml:space="preserve">
          <source>Validates that the given values exists in the list of choices and can be coerced.</source>
          <target state="translated">验证给定的值是否存在于选择列表中,并且可以被强制执行。</target>
        </trans-unit>
        <trans-unit id="b7a61822235d8ac591f2a6b5cecc0e31bcc9342d" translate="yes" xml:space="preserve">
          <source>Validates that the lower bound of the range is not less than the &lt;code&gt;limit_value&lt;/code&gt;.</source>
          <target state="translated">验证范围的下限不小于 &lt;code&gt;limit_value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be85eb361a7ffbeae5f00430bd3b7c70309985a8" translate="yes" xml:space="preserve">
          <source>Validates that the selected choice exists in the list of choices.</source>
          <target state="translated">验证选择是否存在于选择列表中。</target>
        </trans-unit>
        <trans-unit id="b65ee0e7fcae80203fa7c550d0dc4476bd8120f7" translate="yes" xml:space="preserve">
          <source>Validates that the upper bound of the range is not greater than &lt;code&gt;limit_value&lt;/code&gt;.</source>
          <target state="translated">验证范围的上限不大于 &lt;code&gt;limit_value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0534f4b79462a177c2e1b4df5068fe643e4bfcfb" translate="yes" xml:space="preserve">
          <source>Validates that the value is &lt;code&gt;True&lt;/code&gt; (e.g. the check box is checked) if the field has &lt;code&gt;required=True&lt;/code&gt;.</source>
          <target state="translated">如果该字段具有 &lt;code&gt;required=True&lt;/code&gt; ，则验证该值为 &lt;code&gt;True&lt;/code&gt; （例如，选中复选框）。</target>
        </trans-unit>
        <trans-unit id="a089e7322f294a22f3ad9da0096a9e006b93e7a5" translate="yes" xml:space="preserve">
          <source>Validates the &lt;code&gt;filename&lt;/code&gt; by calling &lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_valid_name&quot;&gt;&lt;code&gt;get_valid_name()&lt;/code&gt;&lt;/a&gt; and returns a filename to be passed to the &lt;a href=&quot;#django.core.files.storage.Storage.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">通过调用&lt;a href=&quot;../../howto/custom-file-storage#django.core.files.storage.get_valid_name&quot;&gt; &lt;code&gt;get_valid_name()&lt;/code&gt; &lt;/a&gt;验证 &lt;code&gt;filename&lt;/code&gt; ，并返回要传递给&lt;a href=&quot;#django.core.files.storage.Storage.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;方法的文件名。</target>
        </trans-unit>
        <trans-unit id="bc90cf11ebffc582e4f98413176ac20116765baa" translate="yes" xml:space="preserve">
          <source>Validates the given value against each of the fields specified as an argument to the &lt;code&gt;ComboField&lt;/code&gt;.</source>
          <target state="translated">针对指定为 &lt;code&gt;ComboField&lt;/code&gt; 参数的每个字段验证给定值。</target>
        </trans-unit>
        <trans-unit id="2380f84c16ec3e446eee9c517ff7bd0fa8d14d5e" translate="yes" xml:space="preserve">
          <source>Validates the given value against each of the fields specified as an argument to the &lt;code&gt;MultiValueField&lt;/code&gt;.</source>
          <target state="translated">针对指定为 &lt;code&gt;MultiValueField&lt;/code&gt; 的参数的每个字段验证给定值。</target>
        </trans-unit>
        <trans-unit id="fa12a71d357b7f53e8c955aa61a68dcf2af5f3a1" translate="yes" xml:space="preserve">
          <source>Validates whether the password is not a common password. This converts the password to lowercase (to do a case-insensitive comparison) and checks it against a list of 20,000 common password created by &lt;a href=&quot;https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7&quot;&gt;Royce Williams&lt;/a&gt;.</source>
          <target state="translated">验证密码是否不是通用密码。这会将密码转换为小写字母（进行不区分大小写的比较），并根据&lt;a href=&quot;https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7&quot;&gt;Royce Williams&lt;/a&gt;创建的20,000个常见密码列表进行检查。</target>
        </trans-unit>
        <trans-unit id="21ff5172199f09805bd9b455bcbee4947d3940a8" translate="yes" xml:space="preserve">
          <source>Validates whether the password is not entirely numeric.</source>
          <target state="translated">验证密码是否不完全是数字。</target>
        </trans-unit>
        <trans-unit id="c9956251c8b8c02b6d045e02c44fbe656fcd8f39" translate="yes" xml:space="preserve">
          <source>Validates whether the password is sufficiently different from certain attributes of the user.</source>
          <target state="translated">验证密码是否与用户的某些属性有足够的差异。</target>
        </trans-unit>
        <trans-unit id="e7266cd2c7a3c6e05c68d94757dea222c5869f67" translate="yes" xml:space="preserve">
          <source>Validates whether the password meets a minimum length. The minimum length can be customized with the &lt;code&gt;min_length&lt;/code&gt; parameter.</source>
          <target state="translated">验证密码是否符合最小长度。最小长度可以使用 &lt;code&gt;min_length&lt;/code&gt; 参数自定义。</target>
        </trans-unit>
        <trans-unit id="7ceacc9ef8e6f9f466b5a2ddbaf3ed076c074611" translate="yes" xml:space="preserve">
          <source>Validating objects</source>
          <target state="translated">验证对象</target>
        </trans-unit>
        <trans-unit id="7c9010b470fc6428464a81d5e7a42f479bc96d1d" translate="yes" xml:space="preserve">
          <source>Validating the form</source>
          <target state="translated">验证表格</target>
        </trans-unit>
        <trans-unit id="2c5ab0c367616f5e10abcfa96e22d5221e7c7276" translate="yes" xml:space="preserve">
          <source>Validating the model instance</source>
          <target state="translated">验证模型实例</target>
        </trans-unit>
        <trans-unit id="93d2e5f8f6a2a818943a053f1a783db3315193d8" translate="yes" xml:space="preserve">
          <source>Validating the number of forms in a formset</source>
          <target state="translated">验证表单集中的表单数量。</target>
        </trans-unit>
        <trans-unit id="c5b08d19271a6bae52b7700e7b690302e1ee34ff" translate="yes" xml:space="preserve">
          <source>Validation is controlled by the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt; setting. The default for the setting is an empty list, which means no validators are applied. In new projects created with the default &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; template, a set of validators is enabled by default.</source>
          <target state="translated">验证由&lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; &lt;/a&gt;设置控制。该设置的默认值为空列表，这意味着不应用任何验证器。在使用默认的&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt;模板创建的新项目中，默认情况下启用了一组验证器。</target>
        </trans-unit>
        <trans-unit id="1edcc1599a83cd0f9be14f27f9a77ac4fff5ee75" translate="yes" xml:space="preserve">
          <source>Validation of Constraints</source>
          <target state="translated">限制条件的验证</target>
        </trans-unit>
        <trans-unit id="b85ceec6f2e5f55b99d6a6f16aca09d6a81c2e03" translate="yes" xml:space="preserve">
          <source>Validation of a form is split into several steps, which can be customized or overridden:</source>
          <target state="translated">表格的验证分为几个步骤,可以自定义或覆盖。</target>
        </trans-unit>
        <trans-unit id="43fe8e18085c1ef39d666d38cf65376cb5e479df" translate="yes" xml:space="preserve">
          <source>Validation on a &lt;code&gt;ModelForm&lt;/code&gt;</source>
          <target state="translated">在 &lt;code&gt;ModelForm&lt;/code&gt; 上验证</target>
        </trans-unit>
        <trans-unit id="121f69a605445393d3b651cc48c1b124569cb334" translate="yes" xml:space="preserve">
          <source>Validation with a formset is almost identical to a regular &lt;code&gt;Form&lt;/code&gt;. There is an &lt;code&gt;is_valid&lt;/code&gt; method on the formset to provide a convenient way to validate all forms in the formset:</source>
          <target state="translated">用 &lt;code&gt;Form&lt;/code&gt; 验证几乎与常规Form相同。 &lt;code&gt;is_valid&lt;/code&gt; 上有一个is_valid方法，以提供一种方便的方法来验证表单集中的所有表单：</target>
        </trans-unit>
        <trans-unit id="0a0ba3ac7ebb303bf0df645df17c3a747223a65e" translate="yes" xml:space="preserve">
          <source>Validator headers with non-safe request methods</source>
          <target state="translated">带有非安全请求方法的验证器头文件。</target>
        </trans-unit>
        <trans-unit id="762f13c2259b5fbab6d8f1bdbab081fc48bc558f" translate="yes" xml:space="preserve">
          <source>Validators</source>
          <target state="translated">Validators</target>
        </trans-unit>
        <trans-unit id="b9484cd6bf104ca5d09633368136c8b22940b570" translate="yes" xml:space="preserve">
          <source>Validators can be used to validate values inside the field, let&amp;rsquo;s have a look at Django&amp;rsquo;s &lt;code&gt;SlugField&lt;/code&gt;:</source>
          <target state="translated">验证器可用于验证字段内的值，让我们看一下Django的 &lt;code&gt;SlugField&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="f3deef60b96c0d8cee4c47ffe60be58ec6def1e8" translate="yes" xml:space="preserve">
          <source>Values in this list can be fully qualified names (e.g. &lt;code&gt;'www.example.com'&lt;/code&gt;), in which case they will be matched against the request&amp;rsquo;s &lt;code&gt;Host&lt;/code&gt; header exactly (case-insensitive, not including port). A value beginning with a period can be used as a subdomain wildcard: &lt;code&gt;'.example.com'&lt;/code&gt; will match &lt;code&gt;example.com&lt;/code&gt;, &lt;code&gt;www.example.com&lt;/code&gt;, and any other subdomain of &lt;code&gt;example.com&lt;/code&gt;. A value of &lt;code&gt;'*'&lt;/code&gt; will match anything; in this case you are responsible to provide your own validation of the &lt;code&gt;Host&lt;/code&gt; header (perhaps in a middleware; if so this middleware must be listed first in &lt;a href=&quot;#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">此列表中的值可以是完全限定名称（例如 &lt;code&gt;'www.example.com'&lt;/code&gt; ），在这种情况下，它们将与请求的 &lt;code&gt;Host&lt;/code&gt; 标头完全匹配（不区分大小写，不包括端口）。可以将以句点开头的值用作子域通配符： &lt;code&gt;'.example.com'&lt;/code&gt; 将匹配 &lt;code&gt;example.com&lt;/code&gt; ， &lt;code&gt;www.example.com&lt;/code&gt; 以及 &lt;code&gt;example.com&lt;/code&gt; 的任何其他子域。值 &lt;code&gt;'*'&lt;/code&gt; 将匹配任何内容；在这种情况下，您有责任提供自己的 &lt;code&gt;Host&lt;/code&gt; 标头验证（可能在中间件中；如果是，则必须在&lt;a href=&quot;#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 中&lt;/a&gt;首先列出该中间件）。</target>
        </trans-unit>
        <trans-unit id="5c641ae18626a5257cc160b58b233dc1e5ba03e4" translate="yes" xml:space="preserve">
          <source>Values must be callables, or strings representing the full Python import path to the view that should be called to handle the error condition at hand.</source>
          <target state="translated">值必须是可调用的,或者是代表应被调用来处理当前错误条件的视图的完整Python导入路径的字符串。</target>
        </trans-unit>
        <trans-unit id="890a72f9e8996089403208d002bfb488ce9caeac" translate="yes" xml:space="preserve">
          <source>Values up to 10^100 (Googol) are supported.</source>
          <target state="translated">支持最高10^100(Googol)的数值。</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="952e9aa92fd3d7a192f749b3b960fb5ac876f991" translate="yes" xml:space="preserve">
          <source>Variable attributes that begin with an underscore may not be accessed as they&amp;rsquo;re generally considered private.</source>
          <target state="translated">以下划线开头的变量属性可能无法访问，因为它们通常被认为是私有的。</target>
        </trans-unit>
        <trans-unit id="b861c2b05eae6bf5d374d127fd50ed98df426d61" translate="yes" xml:space="preserve">
          <source>Variable names must consist of any letter (A-Z), any digit (0-9), an underscore (but they must not start with an underscore) or a dot.</source>
          <target state="translated">变量名称必须由任何字母(A-Z)、任何数字(0-9)、下划线(但不得以下划线开头)或点组成。</target>
        </trans-unit>
        <trans-unit id="6fbf76eadf437ca353be2984032b630945a78945" translate="yes" xml:space="preserve">
          <source>Variable resolution will throw a &lt;code&gt;VariableDoesNotExist&lt;/code&gt; exception if it cannot resolve the string passed to it in the current context of the page.</source>
          <target state="translated">如果变量解析无法解析在页面的当前上下文中传递给它的字符串，则它将引发 &lt;code&gt;VariableDoesNotExist&lt;/code&gt; 异常。</target>
        </trans-unit>
        <trans-unit id="fbfd347d1745f53cd9fc737cbf27a8df5a437849" translate="yes" xml:space="preserve">
          <source>Variable scope in context</source>
          <target state="translated">背景下的可变范围</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="91d24d94fe69030fb1913352f80e45d64513af99" translate="yes" xml:space="preserve">
          <source>Variables and lookups</source>
          <target state="translated">变量和查询</target>
        </trans-unit>
        <trans-unit id="c889d071680db632177ca231bcb857b021a6fcbf" translate="yes" xml:space="preserve">
          <source>Variables are surrounded by &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; like this:</source>
          <target state="translated">变量被 &lt;code&gt;{{&lt;/code&gt; 和 &lt;code&gt;}}&lt;/code&gt; 包围，如下所示：</target>
        </trans-unit>
        <trans-unit id="7f84a7ea97bc4a4443d1dfe62f45fc85323d334a" translate="yes" xml:space="preserve">
          <source>Variables are surrounded by double-curly braces. &lt;code&gt;{{ article.headline }}&lt;/code&gt; means &amp;ldquo;Output the value of the article&amp;rsquo;s headline attribute.&amp;rdquo; But dots aren&amp;rsquo;t used only for attribute lookup. They also can do dictionary-key lookup, index lookup and function calls.</source>
          <target state="translated">变量用双花括号包围。 &lt;code&gt;{{ article.headline }}&lt;/code&gt; 意思是&amp;ldquo;输出文章的headline属性的值。&amp;rdquo; 但是，点不仅用于属性查找。他们还可以执行字典键查找，索引查找和函数调用。</target>
        </trans-unit>
        <trans-unit id="726e2f3a9dd5987e3d0dec3bf18fa3c806d2914f" translate="yes" xml:space="preserve">
          <source>Variables created outside of a &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;{% block %}&lt;/code&gt;&lt;/a&gt; using the template tag &lt;code&gt;as&lt;/code&gt; syntax can&amp;rsquo;t be used inside the block. For example, this template doesn&amp;rsquo;t render anything:</source>
          <target state="translated">在&lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;{% block %}&lt;/code&gt; &lt;/a&gt;外部使用模板标记 &lt;code&gt;as&lt;/code&gt; 语法创建的变量不能在该块内部使用。例如，此模板不呈现任何内容：</target>
        </trans-unit>
        <trans-unit id="2b54a020663a7e9de0f900e7a33c7949a59e97fe" translate="yes" xml:space="preserve">
          <source>Variables included in the cycle will be escaped. You can disable auto-escaping with:</source>
          <target state="translated">包含在循环中的变量将被转义。你可以用以下方法禁用自动转义。</target>
        </trans-unit>
        <trans-unit id="95b252e22f473a20d0d5f77b8067b71eb8ac8cdc" translate="yes" xml:space="preserve">
          <source>Variables look like this: &lt;code&gt;{{ variable }}&lt;/code&gt;. When the template engine encounters a variable, it evaluates that variable and replaces it with the result. Variable names consist of any combination of alphanumeric characters and the underscore (&lt;code&gt;&quot;_&quot;&lt;/code&gt;) but may not start with an underscore. The dot (&lt;code&gt;&quot;.&quot;&lt;/code&gt;) also appears in variable sections, although that has a special meaning, as indicated below. Importantly, &lt;em&gt;you cannot have spaces or punctuation characters in variable names.&lt;/em&gt;</source>
          <target state="translated">变量看起来像这样： &lt;code&gt;{{ variable }}&lt;/code&gt; 。当模板引擎遇到一个变量时，它将评估该变量并将其替换为结果。变量名称由字母数字字符和下划线（ &lt;code&gt;&quot;_&quot;&lt;/code&gt; ）的任意组合组成，但不能以下划线开头。点（ &lt;code&gt;&quot;.&quot;&lt;/code&gt; ）也出现在可变部分中，尽管具有特殊含义，如下所示。重要的是，&lt;em&gt;变量名称中不能包含空格或标点符号。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b2cddda2582c05e8c4dad4699997660f29594f1" translate="yes" xml:space="preserve">
          <source>Vary headers</source>
          <target state="translated">变化的标题</target>
        </trans-unit>
        <trans-unit id="ce758a684cf3266fd922f3e988747fb02f4c453b" translate="yes" xml:space="preserve">
          <source>Vector Data Source Objects</source>
          <target state="translated">矢量数据源对象</target>
        </trans-unit>
        <trans-unit id="7455570dc3bf7f4b79d9d30b8b95373e37003003" translate="yes" xml:space="preserve">
          <source>Verbose field names</source>
          <target state="translated">字段名</target>
        </trans-unit>
        <trans-unit id="536244f4cc64c32141c5753233b90a09618435ae" translate="yes" xml:space="preserve">
          <source>Verifying</source>
          <target state="translated">Verifying</target>
        </trans-unit>
        <trans-unit id="9db95c1103ad0d7ef81bc6d919b2f562add7553f" translate="yes" xml:space="preserve">
          <source>Verifying a HTTP &lt;a href=&quot;#django.test.SimpleTestCase.assertRedirects&quot;&gt;&lt;code&gt;redirect&lt;/code&gt;&lt;/a&gt; is performed by the app.</source>
          <target state="translated">验证HTTP &lt;a href=&quot;#django.test.SimpleTestCase.assertRedirects&quot;&gt; &lt;code&gt;redirect&lt;/code&gt; &lt;/a&gt;是由应用执行的。</target>
        </trans-unit>
        <trans-unit id="351091639e5c6f0d0701ca6effc4c47f1d2d960a" translate="yes" xml:space="preserve">
          <source>Verifying that a template &lt;a href=&quot;#django.test.SimpleTestCase.assertTemplateUsed&quot;&gt;&lt;code&gt;has/hasn't been used to generate a given
response content&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">验证&lt;a href=&quot;#django.test.SimpleTestCase.assertTemplateUsed&quot;&gt; &lt;code&gt;has/hasn't been used to generate a given response content&lt;/code&gt; &lt;/a&gt;模板来生成给定的响应内容。</target>
        </trans-unit>
        <trans-unit id="43f47a8beba569e78ae4a7db0330ae6f1f1ff4cd" translate="yes" xml:space="preserve">
          <source>Verifying that two &lt;a href=&quot;#django.test.SimpleTestCase.assertURLEqual&quot;&gt;&lt;code&gt;URLs&lt;/code&gt;&lt;/a&gt; are equal.</source>
          <target state="translated">验证两个&lt;a href=&quot;#django.test.SimpleTestCase.assertURLEqual&quot;&gt; &lt;code&gt;URLs&lt;/code&gt; &lt;/a&gt;相等。</target>
        </trans-unit>
        <trans-unit id="b2937b0c385e43ff0fab1c832f3a0e7c50dcaa59" translate="yes" xml:space="preserve">
          <source>Verifying timestamped values</source>
          <target state="translated">验证时间戳值</target>
        </trans-unit>
        <trans-unit id="62f1aa26f4254bd96d4eb6f8b646ba000ec16032" translate="yes" xml:space="preserve">
          <source>Version control</source>
          <target state="translated">版本控制</target>
        </trans-unit>
        <trans-unit id="42d0c619b516797e08e7d157352a414b4b3843d8" translate="yes" xml:space="preserve">
          <source>Version support</source>
          <target state="translated">版本支持</target>
        </trans-unit>
        <trans-unit id="8d19c9371431d1419c761233733405e0d04b0c48" translate="yes" xml:space="preserve">
          <source>Via the Python API</source>
          <target state="translated">通过Python API</target>
        </trans-unit>
        <trans-unit id="80530ee23eded1296fb593e559258c50db6c5b60" translate="yes" xml:space="preserve">
          <source>Via the admin interface</source>
          <target state="translated">通过管理界面</target>
        </trans-unit>
        <trans-unit id="efae37704a326e950f2a675d17061b1a12be0c12" translate="yes" xml:space="preserve">
          <source>View decorators</source>
          <target state="translated">查看装修公司</target>
        </trans-unit>
        <trans-unit id="7a095affdff63c67d4d89f5b28c39584c3db1d08" translate="yes" xml:space="preserve">
          <source>View needs protection for one path</source>
          <target state="translated">视图需要保护一条路径</target>
        </trans-unit>
        <trans-unit id="7a4c8e3a560fabb6e8eeacddfdab8496436472a9" translate="yes" xml:space="preserve">
          <source>View reference</source>
          <target state="translated">查看参考资料</target>
        </trans-unit>
        <trans-unit id="b9a5232730a30862e5a9b0884958c7c34e1899cd" translate="yes" xml:space="preserve">
          <source>Viewing subsets of objects</source>
          <target state="translated">查看对象的子集</target>
        </trans-unit>
        <trans-unit id="24be61285e096fa817d4cdb0a0ed8294ea5bd2fb" translate="yes" xml:space="preserve">
          <source>Views</source>
          <target state="translated">Views</target>
        </trans-unit>
        <trans-unit id="c52102d53eeaab9b9a88302a361a6f600497ed10" translate="yes" xml:space="preserve">
          <source>Vote action &amp;ndash; handles voting for a particular choice in a particular question.</source>
          <target state="translated">投票行动&amp;ndash;处理针对特定问题的特定选择的投票。</target>
        </trans-unit>
        <trans-unit id="181526b1a828fc52b70ef8658aba4470e617ea82" translate="yes" xml:space="preserve">
          <source>WKB / EWKB</source>
          <target state="translated">WKB/EWKB</target>
        </trans-unit>
        <trans-unit id="e90361962589bfebc2d23c92d7e7625e6769ba36" translate="yes" xml:space="preserve">
          <source>WKT / EWKT</source>
          <target state="translated">WKT/EWKT</target>
        </trans-unit>
        <trans-unit id="e6de5c6b0a4c7c9823e24df26d4d513a3d0ebab6" translate="yes" xml:space="preserve">
          <source>WSGI servers obtain the path to the &lt;code&gt;application&lt;/code&gt; callable from their configuration. Django&amp;rsquo;s built-in server, namely the &lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command, reads it from the &lt;a href=&quot;../../../ref/settings#std:setting-WSGI_APPLICATION&quot;&gt;&lt;code&gt;WSGI_APPLICATION&lt;/code&gt;&lt;/a&gt; setting. By default, it&amp;rsquo;s set to &lt;code&gt;&amp;lt;project_name&amp;gt;.wsgi.application&lt;/code&gt;, which points to the &lt;code&gt;application&lt;/code&gt; callable in &lt;code&gt;&amp;lt;project_name&amp;gt;/wsgi.py&lt;/code&gt;.</source>
          <target state="translated">WSGI服务器从其配置获取可调用的 &lt;code&gt;application&lt;/code&gt; 的路径。Django的内置服务器，即&lt;a href=&quot;../../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;命令，从&lt;a href=&quot;../../../ref/settings#std:setting-WSGI_APPLICATION&quot;&gt; &lt;code&gt;WSGI_APPLICATION&lt;/code&gt; &lt;/a&gt;设置读取它。默认情况下，它设置为 &lt;code&gt;&amp;lt;project_name&amp;gt;.wsgi.application&lt;/code&gt; ，它指向 &lt;code&gt;&amp;lt;project_name&amp;gt;/wsgi.py&lt;/code&gt; 中可调用的 &lt;code&gt;application&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae4d3ecfc9ebb20c6629acd459701f8bd334fd07" translate="yes" xml:space="preserve">
          <source>Wait a minute. &lt;code&gt;&amp;lt;Question: Question object (1)&amp;gt;&lt;/code&gt; isn&amp;rsquo;t a helpful representation of this object. Let&amp;rsquo;s fix that by editing the &lt;code&gt;Question&lt;/code&gt; model (in the &lt;code&gt;polls/models.py&lt;/code&gt; file) and adding a &lt;a href=&quot;../ref/models/instances#django.db.models.Model.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt; method to both &lt;code&gt;Question&lt;/code&gt; and &lt;code&gt;Choice&lt;/code&gt;:</source>
          <target state="translated">等一下。 &lt;code&gt;&amp;lt;Question: Question object (1)&amp;gt;&lt;/code&gt; 不是此对象的有用表示。让我们通过编辑 &lt;code&gt;Question&lt;/code&gt; 模型（在 &lt;code&gt;polls/models.py&lt;/code&gt; 文件中）并将&lt;a href=&quot;../ref/models/instances#django.db.models.Model.__str__&quot;&gt; &lt;code&gt;__str__()&lt;/code&gt; &lt;/a&gt;方法添加到 &lt;code&gt;Question&lt;/code&gt; 和 &lt;code&gt;Choice&lt;/code&gt; 中来解决此问题：</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="fbfaf3ade1ca7644d388e882f1b2cfe035e94a2a" translate="yes" xml:space="preserve">
          <source>Watchman support replaced support for &lt;code&gt;pyinotify&lt;/code&gt;.</source>
          <target state="translated">守望者支持取代了对 &lt;code&gt;pyinotify&lt;/code&gt; 的支持。</target>
        </trans-unit>
        <trans-unit id="7dd6e6e9ec6baba5ad08ccb4f5157c652ddce32c" translate="yes" xml:space="preserve">
          <source>Watchman timeout</source>
          <target state="translated">值班员超时</target>
        </trans-unit>
        <trans-unit id="7b3933b2da6f5bf2fa9cd97037aef0e731929204" translate="yes" xml:space="preserve">
          <source>We &lt;strong&gt;strongly&lt;/strong&gt; recommend using &lt;a href=&quot;../../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; to handle the admin files (along with a Web server as outlined in the previous section; this means using the &lt;a href=&quot;../../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command to collect the static files in &lt;a href=&quot;../../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;, and then configuring your Web server to serve &lt;a href=&quot;../../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; at &lt;a href=&quot;../../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt;), but here are three other approaches:</source>
          <target state="translated">我们&lt;strong&gt;强烈&lt;/strong&gt;建议您使用&lt;a href=&quot;../../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;处理管理文件（如上一节中列出Web服务器一起，使用这种手段&lt;a href=&quot;../../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理命令收集的静态文件&lt;a href=&quot;../../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt;，然后配置你的Web服务器来服务&lt;a href=&quot;../../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt;，网址为&lt;a href=&quot;../../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt;），但这是其他三种方法：</target>
        </trans-unit>
        <trans-unit id="07b29f95d7b54dbb652a7863ac9ba76dc0b4b9e8" translate="yes" xml:space="preserve">
          <source>We advise against storing the literal value &lt;code&gt;None&lt;/code&gt; in the cache, because you won&amp;rsquo;t be able to distinguish between your stored &lt;code&gt;None&lt;/code&gt; value and a cache miss signified by a return value of &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">我们建议不要在缓存中存储文字值 &lt;code&gt;None&lt;/code&gt; ，因为您将无法区分存储的 &lt;code&gt;None&lt;/code&gt; 值和由 &lt;code&gt;None&lt;/code&gt; 的返回值表示的缓存未命中。</target>
        </trans-unit>
        <trans-unit id="298a1cbc241e125b5254baaec7a1c73ae729225d" translate="yes" xml:space="preserve">
          <source>We already know what the problem is: &lt;code&gt;Question.was_published_recently()&lt;/code&gt; should return &lt;code&gt;False&lt;/code&gt; if its &lt;code&gt;pub_date&lt;/code&gt; is in the future. Amend the method in &lt;code&gt;models.py&lt;/code&gt;, so that it will only return &lt;code&gt;True&lt;/code&gt; if the date is also in the past:</source>
          <target state="translated">我们已经知道问题所在：如果 &lt;code&gt;pub_date&lt;/code&gt; 在将来， &lt;code&gt;Question.was_published_recently()&lt;/code&gt; 应该返回 &lt;code&gt;False&lt;/code&gt; 。修改 &lt;code&gt;models.py&lt;/code&gt; 中的方法，使其仅在日期也为过去时才返回 &lt;code&gt;True&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5899248bb49703fd618e2fbb5d5ee585bf81ee76" translate="yes" xml:space="preserve">
          <source>We already know what we want our HTML form to look like. Our starting point for it in Django is this:</source>
          <target state="translated">我们已经知道我们想要的HTML表单是什么样子的。我们在Django中的出发点是这样的。</target>
        </trans-unit>
        <trans-unit id="1e5053ba84ae9bf771ee62969c89341da54a84c9" translate="yes" xml:space="preserve">
          <source>We also created a dummy implementation of the &lt;code&gt;vote()&lt;/code&gt; function. Let&amp;rsquo;s create a real version. Add the following to &lt;code&gt;polls/views.py&lt;/code&gt;:</source>
          <target state="translated">我们还创建了vot &lt;code&gt;vote()&lt;/code&gt; 函数的虚拟实现。让我们创建一个真实的版本。将以下内容添加到 &lt;code&gt;polls/views.py&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ab5f37e35f55eab0757ee7b44a7f137f974e6971" translate="yes" xml:space="preserve">
          <source>We are using a template for the item descriptions. It can be as minimal as this:</source>
          <target state="translated">我们是用一个模板来描述物品。可以是这样的最小化。</target>
        </trans-unit>
        <trans-unit id="f1036e5f257dd49774ce5b8738e7cf23a97247a1" translate="yes" xml:space="preserve">
          <source>We are using the &lt;a href=&quot;../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function in the &lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; constructor in this example. This function helps avoid having to hardcode a URL in the view function. It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view. In this case, using the URLconf we set up in &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;, this &lt;a href=&quot;../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; call will return a string like</source>
          <target state="translated">在此示例中，我们在&lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt; &lt;code&gt;HttpResponseRedirect&lt;/code&gt; &lt;/a&gt;构造函数中使用了&lt;a href=&quot;../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;函数。此功能有助于避免在视图功能中对URL进行硬编码。它提供了我们想要将控制权传递给的视图的名称，以及指向该视图的URL模式的可变部分。在这种情况下，使用我们在&lt;a href=&quot;tutorial03&quot;&gt;教程3中&lt;/a&gt;设置的URLconf ，此&lt;a href=&quot;../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;调用将返回类似</target>
        </trans-unit>
        <trans-unit id="3da8009532e1dddd2ecda49e5b9486015547c9a2" translate="yes" xml:space="preserve">
          <source>We assign to and retrieve from the &lt;code&gt;hand&lt;/code&gt; attribute in our model just like any other Python class. The trick is to tell Django how to handle saving and loading such an object.</source>
          <target state="translated">就像其他任何Python类一样，我们在模型中分配和获取 &lt;code&gt;hand&lt;/code&gt; 属性。诀窍是告诉Django如何处理保存和加载此类对象。</target>
        </trans-unit>
        <trans-unit id="6f810cc90b63a95ec62b929cc54f803561d191c9" translate="yes" xml:space="preserve">
          <source>We call &lt;code&gt;process_lhs&lt;/code&gt; and &lt;code&gt;process_rhs&lt;/code&gt; to convert them into the values we need for SQL using the &lt;code&gt;compiler&lt;/code&gt; object described before. These methods return tuples containing some SQL and the parameters to be interpolated into that SQL, just as we need to return from our &lt;code&gt;as_sql&lt;/code&gt; method. In the above example, &lt;code&gt;process_lhs&lt;/code&gt; returns &lt;code&gt;('&quot;author&quot;.&quot;name&quot;', [])&lt;/code&gt; and &lt;code&gt;process_rhs&lt;/code&gt; returns &lt;code&gt;('&quot;%s&quot;', ['Jack'])&lt;/code&gt;. In this example there were no parameters for the left hand side, but this would depend on the object we have, so we still need to include them in the parameters we return.</source>
          <target state="translated">我们使用前面介绍的 &lt;code&gt;compiler&lt;/code&gt; 对象调用 &lt;code&gt;process_lhs&lt;/code&gt; 和 &lt;code&gt;process_rhs&lt;/code&gt; 将它们转换为SQL所需的值。这些方法返回的元组包含一些SQL以及要插入到该SQL中的参数，就像我们需要从 &lt;code&gt;as_sql&lt;/code&gt; 方法返回一样。在上面的示例中， &lt;code&gt;process_lhs&lt;/code&gt; 返回 &lt;code&gt;('&quot;author&quot;.&quot;name&quot;', [])&lt;/code&gt; ， &lt;code&gt;process_rhs&lt;/code&gt; 返回 &lt;code&gt;('&quot;%s&quot;', ['Jack'])&lt;/code&gt; 。在此示例中，左侧没有参数，但这取决于我们拥有的对象，因此我们仍然需要将它们包括在返回的参数中。</target>
        </trans-unit>
        <trans-unit id="1b8da204b55ff9d5826452cdca58f92131b371ea" translate="yes" xml:space="preserve">
          <source>We call the form&amp;rsquo;s &lt;code&gt;is_valid()&lt;/code&gt; method; if it&amp;rsquo;s not &lt;code&gt;True&lt;/code&gt;, we go back to the template with the form. This time the form is no longer empty (&lt;em&gt;unbound&lt;/em&gt;) so the HTML form will be populated with the data previously submitted, where it can be edited and corrected as required.</source>
          <target state="translated">我们调用表单的 &lt;code&gt;is_valid()&lt;/code&gt; 方法；如果不是 &lt;code&gt;True&lt;/code&gt; ，则返回带有表单的模板。这次，表单不再是空的（&lt;em&gt;未绑定&lt;/em&gt;），因此将使用先前提交的数据填充HTML表单，可以在此处根据需要对其进行编辑和更正。</target>
        </trans-unit>
        <trans-unit id="711e9c2728d93a0d7f5aecd52cb04a7a4450ba85" translate="yes" xml:space="preserve">
          <source>We can also add the publisher into the context at the same time, so we can use it in the template:</source>
          <target state="translated">我们也可以同时将发布者添加到上下文中,这样我们就可以在模板中使用它。</target>
        </trans-unit>
        <trans-unit id="9594d66d4a2f99efb6f5c9733e7a3cad6cb9c24b" translate="yes" xml:space="preserve">
          <source>We can also ask for the oldest book of any of those managed by every publisher:</source>
          <target state="translated">我们也可以要求每个出版社管理的任何一本最古老的书。</target>
        </trans-unit>
        <trans-unit id="e35e496a83890c3c496acc86165ade68c2ef188e" translate="yes" xml:space="preserve">
          <source>We can also check if form data differs from the initial data (i.e. the form was sent without any data):</source>
          <target state="translated">我们还可以检查表单数据是否与初始数据不同(即表单发送时没有任何数据)。</target>
        </trans-unit>
        <trans-unit id="c0a02e85856e0b32637eda7d71e370ce47953d5a" translate="yes" xml:space="preserve">
          <source>We can also use &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; to increment the field value on multiple objects - which could be very much faster than pulling them all into Python from the database, looping over them, incrementing the field value of each one, and saving each one back to the database:</source>
          <target state="translated">我们还可以使用&lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt;来增加多个对象上的字段值-这可能比将它们全部从数据库中拉入Python，循环遍历，增加每个字段的字段值并将每个字段保存回的速度快得多。数据库：</target>
        </trans-unit>
        <trans-unit id="b010c0f28527c47a44980371af407815cc627c55" translate="yes" xml:space="preserve">
          <source>We can change the behavior on a specific backend by creating a subclass of &lt;code&gt;NotEqual&lt;/code&gt; with an &lt;code&gt;as_mysql&lt;/code&gt; method:</source>
          <target state="translated">我们可以通过使用 &lt;code&gt;as_mysql&lt;/code&gt; 方法创建 &lt;code&gt;NotEqual&lt;/code&gt; 的子类来更改特定后端的行为：</target>
        </trans-unit>
        <trans-unit id="267b606647e452759e42da09874ac7be88e5c880" translate="yes" xml:space="preserve">
          <source>We can create a mixin class to use in all of our views, handling the conversion to JSON once.</source>
          <target state="translated">我们可以创建一个mixin类在所有的视图中使用,处理一次转换为JSON。</target>
        </trans-unit>
        <trans-unit id="ec411184425a81fa91294f8a10570ea9fa48ca89" translate="yes" xml:space="preserve">
          <source>We can hook this into our URLs easily enough:</source>
          <target state="translated">我们可以很容易地把它挂到我们的URL中。</target>
        </trans-unit>
        <trans-unit id="e0d379d05279757935c9cc615687d7cee1cc80f0" translate="yes" xml:space="preserve">
          <source>We can improve this by stating the common path prefix only once and grouping the suffixes that differ:</source>
          <target state="translated">我们可以改进这一点,只说明一次共同的路径前缀,并对不同的后缀进行分组。</target>
        </trans-unit>
        <trans-unit id="27e67e475cc6caf59fb2d9fb135f9e98d46e4c67" translate="yes" xml:space="preserve">
          <source>We can now run the queries we had before. &lt;code&gt;Experiment.objects.filter(change__abs=27)&lt;/code&gt; will generate the following SQL:</source>
          <target state="translated">现在，我们可以运行以前的查询。 &lt;code&gt;Experiment.objects.filter(change__abs=27)&lt;/code&gt; 将生成以下SQL：</target>
        </trans-unit>
        <trans-unit id="dd71e5a512d7369a50ef1810661360cde684437b" translate="yes" xml:space="preserve">
          <source>We can now use &lt;code&gt;foo__ne&lt;/code&gt; for any field &lt;code&gt;foo&lt;/code&gt;. You will need to ensure that this registration happens before you try to create any querysets using it. You could place the implementation in a &lt;code&gt;models.py&lt;/code&gt; file, or register the lookup in the &lt;code&gt;ready()&lt;/code&gt; method of an &lt;code&gt;AppConfig&lt;/code&gt;.</source>
          <target state="translated">现在，我们可以将 &lt;code&gt;foo__ne&lt;/code&gt; 用于任何字段 &lt;code&gt;foo&lt;/code&gt; 。在尝试使用它创建任何查询集之前，您需要确保进行此注册。您可以将实现放置在 &lt;code&gt;models.py&lt;/code&gt; 文件中，或将查找注册到 &lt;code&gt;AppConfig&lt;/code&gt; 的 &lt;code&gt;ready()&lt;/code&gt; 方法中。</target>
        </trans-unit>
        <trans-unit id="7e783abdee66a0e8ca97da482ff1cc5e6c0fb351" translate="yes" xml:space="preserve">
          <source>We can recognize certain common tasks, like displaying a list of objects, and write code that displays a list of &lt;em&gt;any&lt;/em&gt; object. Then the model in question can be passed as an extra argument to the URLconf.</source>
          <target state="translated">我们可以识别某些常见任务，例如显示对象列表，并编写显示&lt;em&gt;任何&lt;/em&gt;对象列表的代码。然后，可以将所讨论的模型作为附加参数传递给URLconf。</target>
        </trans-unit>
        <trans-unit id="f0a47343146c3813275e98a1c596eadc4b54c4f8" translate="yes" xml:space="preserve">
          <source>We can reduce to just two queries using &lt;code&gt;prefetch_related&lt;/code&gt;:</source>
          <target state="translated">我们可以使用 &lt;code&gt;prefetch_related&lt;/code&gt; 减少到两个查询：</target>
        </trans-unit>
        <trans-unit id="6ce220374ed6e2c859c17174b70c0d16bde0f63a" translate="yes" xml:space="preserve">
          <source>We can then register it with &lt;code&gt;Field&lt;/code&gt;. It takes the place of the original &lt;code&gt;NotEqual&lt;/code&gt; class as it has the same &lt;code&gt;lookup_name&lt;/code&gt;.</source>
          <target state="translated">然后我们可以在 &lt;code&gt;Field&lt;/code&gt; 中注册它。它具有相同的 &lt;code&gt;lookup_name&lt;/code&gt; ,因此可以代替原始的 &lt;code&gt;NotEqual&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="4cda4919893b9d469e2023cfef7cadff866ac578" translate="yes" xml:space="preserve">
          <source>We could also improve our application in other ways, adding tests along the way. For example, it&amp;rsquo;s silly that &lt;code&gt;Questions&lt;/code&gt; can be published on the site that have no &lt;code&gt;Choices&lt;/code&gt;. So, our views could check for this, and exclude such &lt;code&gt;Questions&lt;/code&gt;. Our tests would create a &lt;code&gt;Question&lt;/code&gt; without &lt;code&gt;Choices&lt;/code&gt; and then test that it&amp;rsquo;s not published, as well as create a similar &lt;code&gt;Question&lt;/code&gt;&lt;em&gt;with&lt;/em&gt;&lt;code&gt;Choices&lt;/code&gt;, and test that it &lt;em&gt;is&lt;/em&gt; published.</source>
          <target state="translated">我们还可以通过其他方式改进应用程序，并在此过程中添加测试。例如，在没有 &lt;code&gt;Choices&lt;/code&gt; 的网站上发布 &lt;code&gt;Questions&lt;/code&gt; 是很愚蠢的。因此，我们的观点可以对此进行检查，并排除此类 &lt;code&gt;Questions&lt;/code&gt; 。我们的测试将创建一个没有 &lt;code&gt;Choices&lt;/code&gt; 的 &lt;code&gt;Question&lt;/code&gt; ，然后测试它没有发布，并创建一个类似的&lt;em&gt;带有&lt;/em&gt; &lt;code&gt;Choices&lt;/code&gt; 的 &lt;code&gt;Question&lt;/code&gt; ，并测试它&lt;em&gt;是否&lt;/em&gt;已发布。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8faacc3d5aeac8065623130300997fd23de8b122" translate="yes" xml:space="preserve">
          <source>We could write the earlier example, which only uses a last-modified function, using one of these decorators:</source>
          <target state="translated">我们可以使用这些装饰器中的一个来编写前面的例子,它只使用最后修改的函数。</target>
        </trans-unit>
        <trans-unit id="7683932b0379cee9393a53393aa64068668911b0" translate="yes" xml:space="preserve">
          <source>We define an &lt;code&gt;UpperCase&lt;/code&gt; transformer which uses the SQL function &lt;code&gt;UPPER()&lt;/code&gt; to transform the values before comparison. We define &lt;a href=&quot;../ref/models/lookups#django.db.models.Transform.bilateral&quot;&gt;&lt;code&gt;bilateral = True&lt;/code&gt;&lt;/a&gt; to indicate that this transformation should apply to both &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;:</source>
          <target state="translated">我们定义了 &lt;code&gt;UpperCase&lt;/code&gt; 转换器，该转换器使用SQL函数 &lt;code&gt;UPPER()&lt;/code&gt; 在比较之前转换值。我们将&lt;a href=&quot;../ref/models/lookups#django.db.models.Transform.bilateral&quot;&gt; &lt;code&gt;bilateral = True&lt;/code&gt; &lt;/a&gt;定义为表明此转换应同时适用于 &lt;code&gt;lhs&lt;/code&gt; 和 &lt;code&gt;rhs&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b954514e8e0a9bda83f108b7ce3235380c8a4a2d" translate="yes" xml:space="preserve">
          <source>We do not recommend altering the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting. Altering the &lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting is possible, but a bit tricky if you are using internals that make using of caching, like &lt;a href=&quot;../http/sessions#module-django.contrib.sessions&quot;&gt;&lt;code&gt;django.contrib.sessions&lt;/code&gt;&lt;/a&gt;. For example, you will have to reinitialize the session backend in a test that uses cached sessions and overrides &lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">我们不建议更改&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;设置。可以更改&lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;设置，但是如果您使用的是利用缓存的内部部件（例如&lt;a href=&quot;../http/sessions#module-django.contrib.sessions&quot;&gt; &lt;code&gt;django.contrib.sessions&lt;/code&gt; )&lt;/a&gt;，则会有些棘手。例如，您将必须在使用缓存的会话并覆盖&lt;a href=&quot;../../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;的测试中重新初始化会话后端。</target>
        </trans-unit>
        <trans-unit id="bd8db168c549c993f35ece0fd32ea0990b20ca5c" translate="yes" xml:space="preserve">
          <source>We do some basic validation on the parameters, including requiring at least 2 columns or values, and ensuring they are expressions. We are requiring &lt;code&gt;output_field&lt;/code&gt; here so that Django knows what kind of model field to assign the eventual result to.</source>
          <target state="translated">我们对参数进行一些基本验证，包括至少需要2列或值，并确保它们是表达式。我们在这里需要 &lt;code&gt;output_field&lt;/code&gt; ，以便Django知道将哪种类型的模型字段分配给最终结果。</target>
        </trans-unit>
        <trans-unit id="b97600cf10df1313b720a13fe3fe56b0957b11c3" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t have to let Django unpack the form&amp;rsquo;s fields; we can do it manually if we like (allowing us to reorder the fields, for example). Each field is available as an attribute of the form using &lt;code&gt;{{ form.name_of_field }}&lt;/code&gt;, and in a Django template, will be rendered appropriately. For example:</source>
          <target state="translated">我们不必让Django解压缩表单字段；我们可以根据需要手动进行操作（例如，允许我们对字段进行重新排序）。每个字段都可以使用 &lt;code&gt;{{ form.name_of_field }}&lt;/code&gt; 作为表单的属性提供，并且在Django模板中将适当地呈现。例如：</target>
        </trans-unit>
        <trans-unit id="73f282ce88f3a86bf8d2a3a51ee5ea14fdad7a55" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t need to do much in our &lt;code&gt;name.html&lt;/code&gt; template:</source>
          <target state="translated">我们不需要在 &lt;code&gt;name.html&lt;/code&gt; 模板中做很多事情：</target>
        </trans-unit>
        <trans-unit id="d447add9d095e2ce74e1fedd149b4fbef51cbcec" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t usually recommend allowing &lt;code&gt;null=True&lt;/code&gt; for &lt;code&gt;CharField&lt;/code&gt; since this allows the field to have two &amp;ldquo;empty values&amp;rdquo;, but it&amp;rsquo;s important for the &lt;code&gt;Coalesce&lt;/code&gt; example below.</source>
          <target state="translated">我们通常不建议为 &lt;code&gt;CharField&lt;/code&gt; 允许 &lt;code&gt;null=True&lt;/code&gt; ，因为这允许字段具有两个&amp;ldquo;空值&amp;rdquo;，但这对于下面的 &lt;code&gt;Coalesce&lt;/code&gt; 示例很重要。</target>
        </trans-unit>
        <trans-unit id="b8093131b1cf67c3786bc3e4228d6dd19b6489fd" translate="yes" xml:space="preserve">
          <source>We generate the SQL for each of the &lt;code&gt;expressions&lt;/code&gt; by using the &lt;code&gt;compiler.compile()&lt;/code&gt; method, and join the result together with commas. Then the template is filled out with our data and the SQL and parameters are returned.</source>
          <target state="translated">我们使用 &lt;code&gt;compiler.compile()&lt;/code&gt; 方法为每个 &lt;code&gt;expressions&lt;/code&gt; 生成SQL ，并将结果与​​逗号连接在一起。然后，使用我们的数据填充模板，并返回SQL和参数。</target>
        </trans-unit>
        <trans-unit id="160435c9ed5f63cbd006fc1390af74d08d92e498" translate="yes" xml:space="preserve">
          <source>We have to think carefully about &lt;code&gt;get_context_data()&lt;/code&gt;. Since both &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; will put things in the context data under the value of &lt;code&gt;context_object_name&lt;/code&gt; if it&amp;rsquo;s set, we&amp;rsquo;ll instead explicitly ensure the &lt;code&gt;Publisher&lt;/code&gt; is in the context data. &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; will add in the suitable &lt;code&gt;page_obj&lt;/code&gt; and &lt;code&gt;paginator&lt;/code&gt; for us providing we remember to call &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">我们必须仔细考虑 &lt;code&gt;get_context_data()&lt;/code&gt; 。由于&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;都将在上下文数据中将其放置在 &lt;code&gt;context_object_name&lt;/code&gt; 的值下（如果已设置），因此我们将明确确保 &lt;code&gt;Publisher&lt;/code&gt; 者位于上下文数据中。&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;将为我们添加合适的 &lt;code&gt;page_obj&lt;/code&gt; 和 &lt;code&gt;paginator&lt;/code&gt; ，前提是我们记得要调用 &lt;code&gt;super()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="609ff0c03e264cd5f484816bb06c88ec4d700408" translate="yes" xml:space="preserve">
          <source>We have to think carefully about &lt;code&gt;get_context_data()&lt;/code&gt;. Since both &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; will put things in the context data under the value of &lt;code&gt;context_object_name&lt;/code&gt; if it&amp;rsquo;s set, we&amp;rsquo;ll instead explicitly ensure the &lt;code&gt;Publisher&lt;/code&gt; is in the context data. &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; will add in the suitable &lt;code&gt;page_obj&lt;/code&gt; and &lt;code&gt;paginator&lt;/code&gt; for us providing we remember to call &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">我们必须仔细考虑 &lt;code&gt;get_context_data()&lt;/code&gt; 。由于&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;都会将上下文数据中的内容（如果已设置）设置为 &lt;code&gt;context_object_name&lt;/code&gt; 的值，因此我们将明确确保 &lt;code&gt;Publisher&lt;/code&gt; 者位于上下文数据中。&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;将为我们添加合适的 &lt;code&gt;page_obj&lt;/code&gt; 和 &lt;code&gt;paginator&lt;/code&gt; ，前提是我们记得要调用 &lt;code&gt;super()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0efbb1db19fc0d7dc8ffb262fad015a2c7b9cdf" translate="yes" xml:space="preserve">
          <source>We have to use &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse_lazy&quot;&gt;&lt;code&gt;reverse_lazy()&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;reverse()&lt;/code&gt;, as the urls are not loaded when the file is imported.</source>
          <target state="translated">我们必须使用&lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse_lazy&quot;&gt; &lt;code&gt;reverse_lazy()&lt;/code&gt; &lt;/a&gt;而不是 &lt;code&gt;reverse()&lt;/code&gt; ，因为导入文件时不会加载url。</target>
        </trans-unit>
        <trans-unit id="223d1aa414abcd011cb093db8170ef669b5d129d" translate="yes" xml:space="preserve">
          <source>We identify a bug</source>
          <target state="translated">我们发现一个错误</target>
        </trans-unit>
        <trans-unit id="03b6c402843d85d0ab3a3daabaeb0d9d9441458b" translate="yes" xml:space="preserve">
          <source>We map the URL to book list view in the URLconf:</source>
          <target state="translated">我们在URLconf中把URL映射到图书列表视图中。</target>
        </trans-unit>
        <trans-unit id="d2acb7c7d04ae7422ab94eeac7f1f6194fc4ccb8" translate="yes" xml:space="preserve">
          <source>We might require some validation to occur in the browser, even before the form is submitted; we might want to use much more complex fields, that allow the user to do things like pick dates from a calendar and so on.</source>
          <target state="translated">我们可能需要在浏览器中进行一些验证,甚至在表单提交之前就进行验证;我们可能希望使用更复杂的字段,允许用户进行诸如从日历中选择日期等操作。</target>
        </trans-unit>
        <trans-unit id="1e36022d2bd75747870a373de1ac5c360d5ec6a9" translate="yes" xml:space="preserve">
          <source>We need to amend the &lt;code&gt;get_queryset()&lt;/code&gt; method and change it so that it also checks the date by comparing it with &lt;code&gt;timezone.now()&lt;/code&gt;. First we need to add an import:</source>
          <target state="translated">我们需要修改 &lt;code&gt;get_queryset()&lt;/code&gt; 方法并对其进行更改，以便它也可以通过将其与 &lt;code&gt;timezone.now()&lt;/code&gt; 比较来检查日期。首先，我们需要添加一个导入：</target>
        </trans-unit>
        <trans-unit id="657206f41960cce5defac255a31d2bb4538ea7c8" translate="yes" xml:space="preserve">
          <source>We now have a working web form, described by a Django &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;, processed by a view, and rendered as an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">现在，我们有了一个工作的Web表单，该&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;由Django 表单描述，由视图处理，并呈现为HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2774d1c273a96860eb9d19dcdf390b8d0c84e2a" translate="yes" xml:space="preserve">
          <source>We ought to add a similar &lt;code&gt;get_queryset&lt;/code&gt; method to &lt;code&gt;ResultsView&lt;/code&gt; and create a new test class for that view. It&amp;rsquo;ll be very similar to what we have just created; in fact there will be a lot of repetition.</source>
          <target state="translated">我们应该以类似的添加 &lt;code&gt;get_queryset&lt;/code&gt; 方法 &lt;code&gt;ResultsView&lt;/code&gt; 并创建该视图的新的测试类。这将与我们刚刚创建的非常相似。实际上会有很多重复。</target>
        </trans-unit>
        <trans-unit id="e96ab7268710f2a9a19854775a022fa4250a16be" translate="yes" xml:space="preserve">
          <source>We passed in no data to the formset which is resulting in a valid form. The formset is smart enough to ignore extra forms that were not changed. If we provide an invalid article:</source>
          <target state="translated">我们没有向表单集传递任何数据,结果是一个有效的表单。表单集很聪明,可以忽略没有修改的额外表单。如果我们提供了一个无效的文章。</target>
        </trans-unit>
        <trans-unit id="89af611e787898de3046cc5f2b98307b4d09ecad" translate="yes" xml:space="preserve">
          <source>We recommend using a separate Web server &amp;ndash; i.e., one that&amp;rsquo;s not also running Django &amp;ndash; for serving media. Here are some good choices:</source>
          <target state="translated">我们建议使用单独的Web服务器（即未同时运行Django的Web服务器）来提供媒体。这里有一些不错的选择：</target>
        </trans-unit>
        <trans-unit id="9b2e5541ae2be21d3ebe970f9ffd39d29f1a7564" translate="yes" xml:space="preserve">
          <source>We set the form&amp;rsquo;s &lt;code&gt;action&lt;/code&gt; to &lt;code&gt;{% url 'polls:vote' question.id %}&lt;/code&gt;, and we set &lt;code&gt;method=&quot;post&quot;&lt;/code&gt;. Using &lt;code&gt;method=&quot;post&quot;&lt;/code&gt; (as opposed to &lt;code&gt;method=&quot;get&quot;&lt;/code&gt;) is very important, because the act of submitting this form will alter data server-side. Whenever you create a form that alters data server-side, use &lt;code&gt;method=&quot;post&quot;&lt;/code&gt;. This tip isn&amp;rsquo;t specific to Django; it&amp;rsquo;s good Web development practice in general.</source>
          <target state="translated">我们将表单的 &lt;code&gt;action&lt;/code&gt; 设置为 &lt;code&gt;{% url 'polls:vote' question.id %}&lt;/code&gt; ，并设置 &lt;code&gt;method=&quot;post&quot;&lt;/code&gt; 。使用 &lt;code&gt;method=&quot;post&quot;&lt;/code&gt; （而不是 &lt;code&gt;method=&quot;get&quot;&lt;/code&gt; ）非常重要，因为提交此表单的行为将改变服务器端的数据。每当您创建更改数据服务器端的表单时，请使用 &lt;code&gt;method=&quot;post&quot;&lt;/code&gt; 。本技巧并非特定于Django；一般来说，这是良好的Web开发实践。</target>
        </trans-unit>
        <trans-unit id="1863ec9932f733de1147e06e977d361823f53088" translate="yes" xml:space="preserve">
          <source>We should then add some tests, to check that a &lt;code&gt;Question&lt;/code&gt; whose &lt;code&gt;pub_date&lt;/code&gt; is in the past can be displayed, and that one with a &lt;code&gt;pub_date&lt;/code&gt; in the future is not:</source>
          <target state="translated">然后，我们应该增加一些测试，以检查一个 &lt;code&gt;Question&lt;/code&gt; ，其 &lt;code&gt;pub_date&lt;/code&gt; 可以显示在过去，而且一用一 &lt;code&gt;pub_date&lt;/code&gt; 在未来是不是：</target>
        </trans-unit>
        <trans-unit id="fc42be64a47b15895b31b124661f5f6bcc3acc7e" translate="yes" xml:space="preserve">
          <source>We then need to define the &lt;code&gt;as_sql&lt;/code&gt; method. This takes a &lt;code&gt;SQLCompiler&lt;/code&gt; object, called &lt;code&gt;compiler&lt;/code&gt;, and the active database connection. &lt;code&gt;SQLCompiler&lt;/code&gt; objects are not documented, but the only thing we need to know about them is that they have a &lt;code&gt;compile()&lt;/code&gt; method which returns a tuple containing an SQL string, and the parameters to be interpolated into that string. In most cases, you don&amp;rsquo;t need to use it directly and can pass it on to &lt;code&gt;process_lhs()&lt;/code&gt; and &lt;code&gt;process_rhs()&lt;/code&gt;.</source>
          <target state="translated">然后，我们需要定义 &lt;code&gt;as_sql&lt;/code&gt; 方法。这需要一个 &lt;code&gt;SQLCompiler&lt;/code&gt; 对象，被称为 &lt;code&gt;compiler&lt;/code&gt; 和活动数据库连接。没有记录 &lt;code&gt;SQLCompiler&lt;/code&gt; 对象，但是我们唯一需要了解的是它们具有 &lt;code&gt;compile()&lt;/code&gt; 方法，该方法返回包含SQL字符串的元组以及要插入该字符串的参数。在大多数情况下，您不需要直接使用它，而可以将其传递给 &lt;code&gt;process_lhs()&lt;/code&gt; 和 &lt;code&gt;process_rhs()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8d8ba68d6e0f92901090154023154f5ecaaec25" translate="yes" xml:space="preserve">
          <source>We use &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt;&lt;code&gt;FormMixin&lt;/code&gt;&lt;/a&gt; and implement &lt;code&gt;post()&lt;/code&gt; ourselves rather than try to mix &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; (which provides a suitable &lt;code&gt;post()&lt;/code&gt; already) because both of the views implement &lt;code&gt;get()&lt;/code&gt;, and things would get much more confusing.</source>
          <target state="translated">我们使用&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt; &lt;code&gt;FormMixin&lt;/code&gt; &lt;/a&gt;并自己实现 &lt;code&gt;post()&lt;/code&gt; ，而不是尝试将&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;与&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;混合使用（因为它已经提供了合适的 &lt;code&gt;post()&lt;/code&gt; ），因为这两个视图都实现了 &lt;code&gt;get()&lt;/code&gt; ，事情将变得更加混乱。</target>
        </trans-unit>
        <trans-unit id="65e266fcf6efa6e155b6dcf26f7c104e6b09b3eb" translate="yes" xml:space="preserve">
          <source>We use &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt;&lt;code&gt;FormMixin&lt;/code&gt;&lt;/a&gt; and implement &lt;code&gt;post()&lt;/code&gt; ourselves rather than try to mix &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; (which provides a suitable &lt;code&gt;post()&lt;/code&gt; already) because both of the views implement &lt;code&gt;get()&lt;/code&gt;, and things would get much more confusing.</source>
          <target state="translated">我们使用&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt; &lt;code&gt;FormMixin&lt;/code&gt; &lt;/a&gt;并自己实现 &lt;code&gt;post()&lt;/code&gt; ，而不是尝试将&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;与&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;混合（已经提供了合适的 &lt;code&gt;post()&lt;/code&gt; ），因为这两个视图都实现了 &lt;code&gt;get()&lt;/code&gt; ，事情会变得更加混乱。</target>
        </trans-unit>
        <trans-unit id="a3dc43e4be151cc2c2f7f07fc3a4db3d0d5c6c37" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;as_sqlserver()&lt;/code&gt; because &lt;code&gt;django.db.connection.vendor&lt;/code&gt; returns &lt;code&gt;sqlserver&lt;/code&gt; for the backend.</source>
          <target state="translated">我们使用 &lt;code&gt;as_sqlserver()&lt;/code&gt; ,因为 &lt;code&gt;django.db.connection.vendor&lt;/code&gt; 返回后端的 &lt;code&gt;sqlserver&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1ae934cc7e157b66945a5829fc84cf381d87a54" translate="yes" xml:space="preserve">
          <source>We use this approach to teach you how to override templates. In an actual project, you would probably use the &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.AdminSite.site_header&quot;&gt;&lt;code&gt;django.contrib.admin.AdminSite.site_header&lt;/code&gt;&lt;/a&gt; attribute to more easily make this particular customization.</source>
          <target state="translated">我们使用这种方法来教您如何覆盖模板。在实际的项目中，您可能会使用&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.AdminSite.site_header&quot;&gt; &lt;code&gt;django.contrib.admin.AdminSite.site_header&lt;/code&gt; &lt;/a&gt;属性来更轻松地进行此特定的自定义。</target>
        </trans-unit>
        <trans-unit id="7186b750b69092f1f52f97b68bb2caf43a952b80" translate="yes" xml:space="preserve">
          <source>We will also use the following example objects:</source>
          <target state="translated">我们还将使用以下示例对象。</target>
        </trans-unit>
        <trans-unit id="47682dad7df1f41009d3007a026fa2e8f5b7691e" translate="yes" xml:space="preserve">
          <source>We will assume you have done the things listed above. The rest of this document focuses on how to use Django in such a way that you are not doing unnecessary work. This document also does not address other optimization techniques that apply to all expensive operations, such as &lt;a href=&quot;../cache&quot;&gt;general purpose caching&lt;/a&gt;.</source>
          <target state="translated">我们将假定您已完成上面列出的事情。本文档的其余部分重点介绍如何以不执行不必要工作的方式使用Django。本文档也没有涉及适用于所有昂贵操作的其他优化技术，例如&lt;a href=&quot;../cache&quot;&gt;通用缓存&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b33e7cdc7a1ef731906fd6faafbf9ece40a257f5" translate="yes" xml:space="preserve">
          <source>We will start again with the &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt;, where we need to do a couple of things that won&amp;rsquo;t be necessary in &lt;code&gt;tests.py&lt;/code&gt;. The first is to set up the test environment in the &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">我们将从&lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt;再次开始，在该外壳程序中，我们需要做一些在 &lt;code&gt;tests.py&lt;/code&gt; 中不需要的事情。首先是在&lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; 中&lt;/a&gt;设置测试环境：</target>
        </trans-unit>
        <trans-unit id="e63c1d31807e5eb22db7573c7e0cd9844bb8440d" translate="yes" xml:space="preserve">
          <source>We will start by writing an &lt;code&gt;AbsoluteValue&lt;/code&gt; transformer. This will use the SQL function &lt;code&gt;ABS()&lt;/code&gt; to transform the value before comparison:</source>
          <target state="translated">我们将从编写 &lt;code&gt;AbsoluteValue&lt;/code&gt; 转换器开始。比较之前，将使用SQL函数 &lt;code&gt;ABS()&lt;/code&gt; 转换值：</target>
        </trans-unit>
        <trans-unit id="6994185dd4f0daae68ae788c5d79cf9c02209ce4" translate="yes" xml:space="preserve">
          <source>We will use the following example model:</source>
          <target state="translated">我们将使用以下示例模型。</target>
        </trans-unit>
        <trans-unit id="ea73482f7312b9913706ddd50b19565e8a02d2aa" translate="yes" xml:space="preserve">
          <source>We will use this example table:</source>
          <target state="translated">我们将使用这个示例表。</target>
        </trans-unit>
        <trans-unit id="d94a1a475857ec25945fc572e61005d3a810dcba" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll assume you have &lt;a href=&quot;install&quot;&gt;Django installed&lt;/a&gt; already. You can tell Django is installed and which version by running the following command in a shell prompt (indicated by the $ prefix):</source>
          <target state="translated">我们假设您已经&lt;a href=&quot;install&quot;&gt;安装&lt;/a&gt;了Django。您可以通过在shell提示符（以$前缀表示）中运行以下命令来告诉Django已安装以及安装了哪个版本：</target>
        </trans-unit>
        <trans-unit id="73ee0526642e1c28139dc5025721130054297320" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll be using the following model in examples of each function:</source>
          <target state="translated">在每个函数的示例中，我们将使用以下模型：</target>
        </trans-unit>
        <trans-unit id="b080e55e27e48cdce6588c57c66d42761a4c524a" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll be using the following model in math function examples:</source>
          <target state="translated">我们将在数学函数示例中使用以下模型：</target>
        </trans-unit>
        <trans-unit id="77d8af3871c48b2c62d81c710fa37fac60e443bc" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll be using the following model in the subsequent examples:</source>
          <target state="translated">在后续示例中，我们将使用以下模型：</target>
        </trans-unit>
        <trans-unit id="224362074af2bd7d6db0791cb47c69dc48f0b8df" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll be using these models:</source>
          <target state="translated">我们将使用以下模型：</target>
        </trans-unit>
        <trans-unit id="eb9c88c3107897eeaf2a76497c2477389af1543e" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll be walking you through contributing a patch to Django for the first time. By the end of this tutorial, you should have a basic understanding of both the tools and the processes involved. Specifically, we&amp;rsquo;ll be covering the following:</source>
          <target state="translated">我们将引导您首次为Django提供补丁。在本教程结束之前，您应该对所涉及的工具和过程都有基本的了解。具体来说，我们将介绍以下内容：</target>
        </trans-unit>
        <trans-unit id="0cb108c95b4580462d671212818f2a14d54e7712" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll demonstrate this with the &lt;code&gt;Author&lt;/code&gt; model we used in the &lt;a href=&quot;generic-display&quot;&gt;generic class-based views introduction&lt;/a&gt;.</source>
          <target state="translated">我们将使用在基于&lt;a href=&quot;generic-display&quot;&gt;通用类的视图简介中&lt;/a&gt;使用的 &lt;code&gt;Author&lt;/code&gt; 模型对此进行演示。</target>
        </trans-unit>
        <trans-unit id="a9d616ca20bcc0f2293ba609fc35bcb7f9fde0fb" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll discuss what you could put in that &lt;code&gt;polls/detail.html&lt;/code&gt; template a bit later, but if you&amp;rsquo;d like to quickly get the above example working, a file containing just:</source>
          <target state="translated">稍后，我们将讨论您可以在 &lt;code&gt;polls/detail.html&lt;/code&gt; 模板中添加什么，但是，如果您想快速使上述示例正常工作，则该文件仅包含：</target>
        </trans-unit>
        <trans-unit id="763ada299d1f5513368509f6164b886d2e532d64" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll keep the &lt;code&gt;GET&lt;/code&gt; handling from &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;, although we&amp;rsquo;ll have to add a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; into the context data so we can render it in the template. We&amp;rsquo;ll also want to pull in form processing from &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt;&lt;code&gt;FormMixin&lt;/code&gt;&lt;/a&gt;, and write a bit of code so that on &lt;code&gt;POST&lt;/code&gt; the form gets called appropriately.</source>
          <target state="translated">我们将保留&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;GET&lt;/code&gt; 处理，尽管我们必须将&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;添加到上下文数据中，以便可以在模板中呈现它。我们还希望从&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt; &lt;code&gt;FormMixin&lt;/code&gt; 引入&lt;/a&gt;表单处理，并编写一些代码，以便在 &lt;code&gt;POST&lt;/code&gt; 上正确调用表单。</target>
        </trans-unit>
        <trans-unit id="0ba6d8ba9541ed832aeeb2a77a509d372b81f37b" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll keep the &lt;code&gt;GET&lt;/code&gt; handling from &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;, although we&amp;rsquo;ll have to add a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; into the context data so we can render it in the template. We&amp;rsquo;ll also want to pull in form processing from &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt;&lt;code&gt;FormMixin&lt;/code&gt;&lt;/a&gt;, and write a bit of code so that on &lt;code&gt;POST&lt;/code&gt; the form gets called appropriately.</source>
          <target state="translated">我们将保留&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;GET&lt;/code&gt; 处理，尽管我们必须在上下文数据中添加一个&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;，以便可以在模板中呈现它。我们还希望从&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt; &lt;code&gt;FormMixin&lt;/code&gt; 引入&lt;/a&gt;表单处理，并编写一些代码，以便在 &lt;code&gt;POST&lt;/code&gt; 上正确调用表单。</target>
        </trans-unit>
        <trans-unit id="8c750857e385814a77a51e7359f94a4d51c414b3" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll look at senders &lt;a href=&quot;#connecting-to-signals-sent-by-specific-senders&quot;&gt;a bit later&lt;/a&gt;, but right now look at the &lt;code&gt;**kwargs&lt;/code&gt; argument. All signals send keyword arguments, and may change those keyword arguments at any time. In the case of &lt;a href=&quot;../ref/signals#django.core.signals.request_finished&quot;&gt;&lt;code&gt;request_finished&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s documented as sending no arguments, which means we might be tempted to write our signal handling as &lt;code&gt;my_callback(sender)&lt;/code&gt;.</source>
          <target state="translated">我们来看看发信人&lt;a href=&quot;#connecting-to-signals-sent-by-specific-senders&quot;&gt;晚了一点&lt;/a&gt;，但现在看 &lt;code&gt;**kwargs&lt;/code&gt; 论点。所有信号都发送关键字参数，并且可以随时更改这些关键字参数。在&lt;a href=&quot;../ref/signals#django.core.signals.request_finished&quot;&gt; &lt;code&gt;request_finished&lt;/code&gt; &lt;/a&gt;的情况下，它被记录为不发送任何参数，这意味着我们可能很想将信号处理编写为 &lt;code&gt;my_callback(sender)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c91ec2af4dfcde2a552163e5d586ec61d2a9802c" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll now implement this feature and associated tests.</source>
          <target state="translated">现在，我们将实现此功能和相关的测试。</target>
        </trans-unit>
        <trans-unit id="ecf33e599bf3a0a48c4d65bea717787559521381" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll refer to the same models used in &lt;a href=&quot;queries&quot;&gt;Making queries&lt;/a&gt;.</source>
          <target state="translated">我们将参考进行&lt;a href=&quot;queries&quot;&gt;查询中&lt;/a&gt;使用的相同模型。</target>
        </trans-unit>
        <trans-unit id="047dc08cd7b3dab69b879a2678d50f6e81394a26" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll rely on the default implementation of &lt;code&gt;get_object()&lt;/code&gt; to fetch the correct &lt;code&gt;Publisher&lt;/code&gt; object. However, we need to explicitly pass a &lt;code&gt;queryset&lt;/code&gt; argument because otherwise the default implementation of &lt;code&gt;get_object()&lt;/code&gt; would call &lt;code&gt;get_queryset()&lt;/code&gt; which we have overridden to return &lt;code&gt;Book&lt;/code&gt; objects instead of &lt;code&gt;Publisher&lt;/code&gt; ones.</source>
          <target state="translated">我们将依靠 &lt;code&gt;get_object()&lt;/code&gt; 的默认实现来获取正确的 &lt;code&gt;Publisher&lt;/code&gt; 对象。但是，我们需要显式传递一个 &lt;code&gt;queryset&lt;/code&gt; 参数，因为否则 &lt;code&gt;get_object()&lt;/code&gt; 的默认实现将调用 &lt;code&gt;get_queryset()&lt;/code&gt; ，该方法已被我们重写以返回 &lt;code&gt;Book&lt;/code&gt; 对象而不是 &lt;code&gt;Publisher&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="9c4548251e06e1886348b1aa5f683e176ef44520" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll start by defining the template to be used for SQL generation and an &lt;code&gt;__init__()&lt;/code&gt; method to set some attributes:</source>
          <target state="translated">我们将首先定义用于生成SQL的模板，并使用 &lt;code&gt;__init__()&lt;/code&gt; 方法设置一些属性：</target>
        </trans-unit>
        <trans-unit id="ecb686e654efceec8a802fe9c0c058b7d7e708f3" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re still working on async support for the ORM and other parts of Django. You can expect to see this in future releases. For now, you can use the &lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt;&lt;code&gt;sync_to_async()&lt;/code&gt;&lt;/a&gt; adapter to interact with the sync parts of Django. There is also a whole range of async-native Python libraries that you can integrate with.</source>
          <target state="translated">我们仍在为ORM和Django其他部分提供异步支持。您可以期望在将来的版本中看到这一点。现在，您可以使用&lt;a href=&quot;#asgiref.sync.sync_to_async&quot;&gt; &lt;code&gt;sync_to_async()&lt;/code&gt; &lt;/a&gt;适配器与Django的同步部分进行交互。您还可以集成各种异步Python库。</target>
        </trans-unit>
        <trans-unit id="5a84e38e1b1334463574ecdda0f68cac1a26f986" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re using this instead of simply typing &amp;ldquo;python&amp;rdquo;, because &lt;code&gt;manage.py&lt;/code&gt; sets the &lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable, which gives Django the Python import path to your &lt;code&gt;mysite/settings.py&lt;/code&gt; file.</source>
          <target state="translated">我们使用它而不是简单地键入&amp;ldquo; python&amp;rdquo;，因为 &lt;code&gt;manage.py&lt;/code&gt; 设置了&lt;a href=&quot;../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;环境变量，该变量为Django提供了Python导入 &lt;code&gt;mysite/settings.py&lt;/code&gt; 文件的路径。</target>
        </trans-unit>
        <trans-unit id="c1aeb67516976b953c5a92919bc8b866f38bb896" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re using this instead of simply typing &amp;ldquo;python&amp;rdquo;, because &lt;code&gt;manage.py&lt;/code&gt; sets the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable, which gives Django the Python import path to your &lt;code&gt;mysite/settings.py&lt;/code&gt; file.</source>
          <target state="translated">我们使用它而不是简单地键入&amp;ldquo; python&amp;rdquo;，因为 &lt;code&gt;manage.py&lt;/code&gt; 设置了 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 环境变量，该变量为Django提供了Python导入 &lt;code&gt;mysite/settings.py&lt;/code&gt; 文件的路径。</target>
        </trans-unit>
        <trans-unit id="79d7a195ab163eef181a020beabde25bf55d2a3a" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re using two generic views here: &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;. Respectively, those two views abstract the concepts of &amp;ldquo;display a list of objects&amp;rdquo; and &amp;ldquo;display a detail page for a particular type of object.&amp;rdquo;</source>
          <target state="translated">我们在这里使用两个通用视图：&lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;。这两个视图分别抽象了&amp;ldquo;显示对象列表&amp;rdquo;和&amp;ldquo;显示特定类型的对象的详细信息页面&amp;rdquo;的概念。</target>
        </trans-unit>
        <trans-unit id="d1e5b3b6d0afba152a478ef86e04c270e924cef6" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve also defined a custom implementation that is specific to the Oracle backend. The &lt;code&gt;as_oracle()&lt;/code&gt; function will be called instead of &lt;code&gt;as_sql()&lt;/code&gt; if the Oracle backend is in use.</source>
          <target state="translated">我们还定义了一个特定于Oracle后端的自定义实现。该 &lt;code&gt;as_oracle()&lt;/code&gt; 函数将被调用，而不是 &lt;code&gt;as_sql()&lt;/code&gt; 如果Oracle后端正在使用中。</target>
        </trans-unit>
        <trans-unit id="d447ba890fcc516ad78217b89db5969690d6369e" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve described HTML forms briefly, but an HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; is just one part of the machinery required.</source>
          <target state="translated">我们已经简要描述了HTML表单，但是HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 只是所需机制的一部分。</target>
        </trans-unit>
        <trans-unit id="8daaf8f525135647638730066811f34013f8ca5e" translate="yes" xml:space="preserve">
          <source>Web frameworks have to deal with URLs (which are a type of &lt;a href=&quot;https://www.ietf.org/rfc/rfc3987.txt&quot;&gt;IRI&lt;/a&gt;). One requirement of URLs is that they are encoded using only ASCII characters. However, in an international environment, you might need to construct a URL from an &lt;a href=&quot;https://www.ietf.org/rfc/rfc3987.txt&quot;&gt;IRI&lt;/a&gt; &amp;ndash; very loosely speaking, a &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;URI&lt;/a&gt; that can contain Unicode characters. Use these functions for quoting and converting an IRI to a URI:</source>
          <target state="translated">Web框架必须处理URL（这是&lt;a href=&quot;https://www.ietf.org/rfc/rfc3987.txt&quot;&gt;IRI的一种&lt;/a&gt;）。URL的一项要求是仅使用ASCII字符进行编码。但是，在国际环境中，您可能需要从&lt;a href=&quot;https://www.ietf.org/rfc/rfc3987.txt&quot;&gt;IRI&lt;/a&gt;构造一个URL &amp;ndash;粗略地说，该&lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;URL&lt;/a&gt;可以包含Unicode字符。使用以下函数来引用IRI并将其转换为URI：</target>
        </trans-unit>
        <trans-unit id="97156fa60845b31ee6a3046da33be5ed31a97d95" translate="yes" xml:space="preserve">
          <source>Web frameworks have to deal with URLs (which are a type of IRI). One requirement of URLs is that they are encoded using only ASCII characters. However, in an international environment, you might need to construct a URL from an &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;IRI&lt;/strong&gt;&lt;/a&gt; &amp;ndash; very loosely speaking, a &lt;a href=&quot;https://tools.ietf.org/html/rfc2396.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;URI&lt;/strong&gt;&lt;/a&gt; that can contain Unicode characters. Use these functions for quoting and converting an IRI to a URI:</source>
          <target state="translated">Web框架必须处理URL（这是IRI的一种）。URL的一项要求是仅使用ASCII字符进行编码。但是，在国际环境中，您可能需要从&lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;IRI&lt;/strong&gt;&lt;/a&gt;构造URL-&lt;strong&gt;粗略&lt;/strong&gt;地说，该&lt;a href=&quot;https://tools.ietf.org/html/rfc2396.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;URL&lt;/strong&gt;&lt;/a&gt;可以包含Unicode字符。使用以下函数引用IRI并将其转换为URI：</target>
        </trans-unit>
        <trans-unit id="e3cacb431dcd6f5ad84f9067d03caf8014ac077d" translate="yes" xml:space="preserve">
          <source>Web servers should automatically strip the content of responses to HEAD requests while leaving the headers unchanged, so you may handle HEAD requests exactly like GET requests in your views. Since some software, such as link checkers, rely on HEAD requests, you might prefer using &lt;code&gt;require_safe&lt;/code&gt; instead of &lt;code&gt;require_GET&lt;/code&gt;.</source>
          <target state="translated">Web服务器应自动剥离对HEAD请求的响应内容，同时保持标头不变，因此您可以像处理GET请求一样在视图中处理HEAD请求。由于某些软件（例如链接检查器）依赖HEAD请求，因此您可能更喜欢使用 &lt;code&gt;require_safe&lt;/code&gt; 而不是 &lt;code&gt;require_GET&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ced4ef0c8aff57dd4677ea5d3d1381403fa1486a" translate="yes" xml:space="preserve">
          <source>Websites generally need to serve additional files such as images, JavaScript, or CSS. In Django, we refer to these files as &amp;ldquo;static files&amp;rdquo;. Django provides &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; to help you manage them.</source>
          <target state="translated">网站通常需要提供其他文件，例如图像，JavaScript或CSS。在Django中，我们将这些文件称为&amp;ldquo;静态文件&amp;rdquo;。Django提供了&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;来帮助您管理它们。</target>
        </trans-unit>
        <trans-unit id="2486ded59242b22c93f91c0413ca9cdb8ba66c34" translate="yes" xml:space="preserve">
          <source>Weighting queries</source>
          <target state="translated">加权查询</target>
        </trans-unit>
        <trans-unit id="fe1179206f1dde85454521032eb1a8affb336433" translate="yes" xml:space="preserve">
          <source>Weighting words based on different criteria such as how frequently they appear in the text, or the importance of the fields, such as the title or keywords, that they appear in.</source>
          <target state="translated">根据不同的标准对单词进行加权,比如它们在文本中出现的频率,或者它们所出现的字段(如标题或关键词)的重要性。</target>
        </trans-unit>
        <trans-unit id="dc5c22c786fe9ac36f3c8e095c9c31ab6bb61f24" translate="yes" xml:space="preserve">
          <source>Well, if you&amp;rsquo;re dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lowercased version of the model class&amp;rsquo; name. This is provided in addition to the default &lt;code&gt;object_list&lt;/code&gt; entry, but contains exactly the same data, i.e. &lt;code&gt;publisher_list&lt;/code&gt;.</source>
          <target state="translated">好吧，如果您要处理模型对象，那么已经为您完成了。当您处理对象或查询集时，Django可以使用模型类名称的小写形式填充上下文。除了默认的 &lt;code&gt;object_list&lt;/code&gt; 条目之外，还提供了此条目，但包含的数据完全相同，即 &lt;code&gt;publisher_list&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bbe1ad8ffb0513c5ff715c6bca2c1b63bc23f395" translate="yes" xml:space="preserve">
          <source>Well, the first question is, do you really need to?</source>
          <target state="translated">那么,第一个问题是,你真的需要吗?</target>
        </trans-unit>
        <trans-unit id="fd0ee5d6d6e7da918b154e0536134f2373631aa3" translate="yes" xml:space="preserve">
          <source>What Django looks for when it loads a migration file (as a Python module) is a subclass of &lt;code&gt;django.db.migrations.Migration&lt;/code&gt; called &lt;code&gt;Migration&lt;/code&gt;. It then inspects this object for four attributes, only two of which are used most of the time:</source>
          <target state="translated">Django在加载迁移文件（作为Python模块）时寻找的是 &lt;code&gt;django.db.migrations.Migration&lt;/code&gt; 的子类，称为 &lt;code&gt;Migration&lt;/code&gt; 。然后，它将检查该对象的四个属性，大多数情况下仅使用其中两个：</target>
        </trans-unit>
        <trans-unit id="73d5a2cbae3880889ba2c36cf05438ecc4afa8c9" translate="yes" xml:space="preserve">
          <source>What are automated tests?</source>
          <target state="translated">什么是自动化测试?</target>
        </trans-unit>
        <trans-unit id="a90f741b287880d6b8238a4682cede2000d25a06" translate="yes" xml:space="preserve">
          <source>What are you optimizing &lt;em&gt;for&lt;/em&gt;?</source>
          <target state="translated">什么是你最优化&lt;em&gt;的&lt;/em&gt;？</target>
        </trans-unit>
        <trans-unit id="49d785fdf1aaeeffbaf02a3e6848571c383be3f9" translate="yes" xml:space="preserve">
          <source>What does a field class do?</source>
          <target state="translated">田园课是做什么的?</target>
        </trans-unit>
        <trans-unit id="3600de883e3134ae04e19a0fbfcb7919eacd6460" translate="yes" xml:space="preserve">
          <source>What does this mean in practice?</source>
          <target state="translated">这在实践中意味着什么?</target>
        </trans-unit>
        <trans-unit id="50059d13dad33d56222a97f97ac957c4aa6ee416" translate="yes" xml:space="preserve">
          <source>What does this tutorial cover?</source>
          <target state="translated">本教程包括哪些内容?</target>
        </trans-unit>
        <trans-unit id="209ae8aa9ffb9d033d311becbfae81206edc8933" translate="yes" xml:space="preserve">
          <source>What follows are examples of operations that can be performed using the Python API facilities.</source>
          <target state="translated">下面是使用Python API设施可以执行的操作的例子。</target>
        </trans-unit>
        <trans-unit id="2ee343555ab5a3c52abcbce735167379d27fe26c" translate="yes" xml:space="preserve">
          <source>What functions may be aliased as &lt;code&gt;_&lt;/code&gt;?</source>
          <target state="translated">哪些功能可以别名为 &lt;code&gt;_&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="ae9ab6813edb3233457948992b74de91dd6367a7" translate="yes" xml:space="preserve">
          <source>What happened is this:</source>
          <target state="translated">发生的事情是这样的。</target>
        </trans-unit>
        <trans-unit id="21359d35a68bc966b5546b0bb679ba74f497f023" translate="yes" xml:space="preserve">
          <source>What happens when you save?</source>
          <target state="translated">保存后会发生什么?</target>
        </trans-unit>
        <trans-unit id="2cfbb160725e8c3d2c4e97ea22a9c9d24194252b" translate="yes" xml:space="preserve">
          <source>What if we want to find out how many clients there are for each &lt;code&gt;account_type&lt;/code&gt;? We can use the &lt;code&gt;filter&lt;/code&gt; argument of &lt;a href=&quot;querysets#aggregation-functions&quot;&gt;aggregate functions&lt;/a&gt; to achieve this:</source>
          <target state="translated">如果我们想找出每种 &lt;code&gt;account_type&lt;/code&gt; 有多少个客户，该怎么办？我们可以使用&lt;a href=&quot;querysets#aggregation-functions&quot;&gt;聚合函数&lt;/a&gt;的 &lt;code&gt;filter&lt;/code&gt; 参数来实现此目的：</target>
        </trans-unit>
        <trans-unit id="f2f304800d05b0d7afc70e62b9335abbc72aede3" translate="yes" xml:space="preserve">
          <source>What is GEOS?</source>
          <target state="translated">什么是GEOS?</target>
        </trans-unit>
        <trans-unit id="bc86744d7c979d0ab7fd2d3f9b8fc90e9c8ded8f" translate="yes" xml:space="preserve">
          <source>What spatial reference system an integer SRID corresponds to may depend on the spatial database used. In other words, the SRID numbers used for Oracle are not necessarily the same as those used by PostGIS.</source>
          <target state="translated">一个整数SRID对应的空间参考系统可能取决于所使用的空间数据库。换句话说,Oracle使用的SRID号码不一定与PostGIS使用的相同。</target>
        </trans-unit>
        <trans-unit id="38abffa7d6e05df914d0e0cfa3a9331b7bdaaa1b" translate="yes" xml:space="preserve">
          <source>What the URLconf searches against</source>
          <target state="translated">URLconf的搜索对象</target>
        </trans-unit>
        <trans-unit id="3fae8ea3c4ffe4022a514e2fafbaaa78ddff879a" translate="yes" xml:space="preserve">
          <source>What to read next</source>
          <target state="translated">接下来要读的内容</target>
        </trans-unit>
        <trans-unit id="6eca7c9a97d2a7c5deebe98003d01aae75432333" translate="yes" xml:space="preserve">
          <source>What we have works well; however, even though future questions don&amp;rsquo;t appear in the &lt;em&gt;index&lt;/em&gt;, users can still reach them if they know or guess the right URL. So we need to add a similar constraint to &lt;code&gt;DetailView&lt;/code&gt;:</source>
          <target state="translated">我们所拥有的一切运作良好；但是，即使将来的问题没有出现在&lt;em&gt;索引中&lt;/em&gt;，只要用户知道或猜测正确的URL，用户仍然可以与他们联系。因此，我们需要向 &lt;code&gt;DetailView&lt;/code&gt; 添加类似的约束：</target>
        </trans-unit>
        <trans-unit id="df6ffeb464676f8a5b4baac3001093be8375caea" translate="yes" xml:space="preserve">
          <source>What we need is a way to calculate summary values over the objects that belong to this &lt;code&gt;QuerySet&lt;/code&gt;. This is done by appending an &lt;code&gt;aggregate()&lt;/code&gt; clause onto the &lt;code&gt;QuerySet&lt;/code&gt;:</source>
          <target state="translated">我们需要一种方法来计算属于此 &lt;code&gt;QuerySet&lt;/code&gt; 的对象的摘要值。这是通过将 &lt;code&gt;aggregate()&lt;/code&gt; 子句附加到 &lt;code&gt;QuerySet&lt;/code&gt; 上来完成的：</target>
        </trans-unit>
        <trans-unit id="ebf37cb3a8ec4afc59cdb8f8742be6dd66d19c60" translate="yes" xml:space="preserve">
          <source>What we&amp;rsquo;re really trying to do here is to use two different class based views from the same URL. So why not do just that? We have a very clear division here: &lt;code&gt;GET&lt;/code&gt; requests should get the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; (with the &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; added to the context data), and &lt;code&gt;POST&lt;/code&gt; requests should get the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;. Let&amp;rsquo;s set up those views first.</source>
          <target state="translated">我们真正要在这里做的是使用来自同一URL的两个不同的基于类的视图。那么，为什么不这样做呢？我们在这里有一个非常清楚的区分： &lt;code&gt;GET&lt;/code&gt; 请求应获取&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;（将&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;添加到上下文数据中），而 &lt;code&gt;POST&lt;/code&gt; 请求应获取&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;。让我们首先设置这些视图。</target>
        </trans-unit>
        <trans-unit id="348d61d79be33605e332ad95c2c1756cdba989fd" translate="yes" xml:space="preserve">
          <source>What we&amp;rsquo;re really trying to do here is to use two different class based views from the same URL. So why not do just that? We have a very clear division here: &lt;code&gt;GET&lt;/code&gt; requests should get the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; (with the &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; added to the context data), and &lt;code&gt;POST&lt;/code&gt; requests should get the &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;. Let&amp;rsquo;s set up those views first.</source>
          <target state="translated">我们在这里真正想做的是使用来自同一URL的两个不同的基于类的视图。那么为什么不这样做呢？我们在这里有一个非常清楚的区分： &lt;code&gt;GET&lt;/code&gt; 请求应获取&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;（将&lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;添加到上下文数据中），而 &lt;code&gt;POST&lt;/code&gt; 请求应获取&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/ref/class-based-views/flattened-index/#FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;。让我们首先设置这些视图。</target>
        </trans-unit>
        <trans-unit id="5515466b8a99342a704c54b376a52ff906321c66" translate="yes" xml:space="preserve">
          <source>What we&amp;rsquo;ve just done in the &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt; to test for the problem is exactly what we can do in an automated test, so let&amp;rsquo;s turn that into an automated test.</source>
          <target state="translated">我们在&lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt;中测试该问题所完成的工作正是我们在自动化测试中可以做的事情，因此让我们将其转变为自动化测试。</target>
        </trans-unit>
        <trans-unit id="9d4113a7d518fa0336cf182ad7bf88bbf845c70d" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s a &amp;ldquo;fixture&amp;rdquo;?</source>
          <target state="translated">什么是&amp;ldquo;灯具&amp;rdquo;？</target>
        </trans-unit>
        <trans-unit id="0f2e25adec3c48ee54304ad2c335260c06b43021" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s different in &lt;em&gt;automated&lt;/em&gt; tests is that the testing work is done for you by the system. You create a set of tests once, and then as you make changes to your app, you can check that your code still works as you originally intended, without having to perform time consuming manual testing.</source>
          <target state="translated">&lt;em&gt;自动化&lt;/em&gt;测试的不同之处在于，系统会为您完成测试工作。您只需创建一组测试，然后在对应用程序进行更改时，就可以检查代码是否仍可以按预期运行，而无需执行耗时的手动测试。</target>
        </trans-unit>
        <trans-unit id="6f1520394d28503f78dc8be072bc6cd246458d1d" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s next after creating a pull request?</source>
          <target state="translated">创建请求请求后的下一步是什么？</target>
        </trans-unit>
        <trans-unit id="0c564930a438d61179a5f862967e76654c4d3aaa" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s next?</source>
          <target state="translated">下一步是什么？</target>
        </trans-unit>
        <trans-unit id="15a658302c48a33d9ee50d1f5419c52f2f1d8034" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s the difference between a project and an app? An app is a Web application that does something &amp;ndash; e.g., a Weblog system, a database of public records or a small poll app. A project is a collection of configuration and apps for a particular website. A project can contain multiple apps. An app can be in multiple projects.</source>
          <target state="translated">项目和应用之间有什么区别？应用程序是执行某项操作的Web应用程序，例如Weblog系统，公共记录数据库或小型民意调查应用程序。项目是特定网站的配置和应用程序的集合。一个项目可以包含多个应用程序。一个应用程序可以在多个项目中。</target>
        </trans-unit>
        <trans-unit id="04f28f5d914e67c96004dd694d92258abd0c7141" translate="yes" xml:space="preserve">
          <source>Whatever features you add to your custom &lt;code&gt;Manager&lt;/code&gt;, it must be possible to make a shallow copy of a &lt;code&gt;Manager&lt;/code&gt; instance; i.e., the following code must work:</source>
          <target state="translated">无论您添加到自定义 &lt;code&gt;Manager&lt;/code&gt; 中的功能是什么，都必须能够复制 &lt;code&gt;Manager&lt;/code&gt; 实例的浅表副本；即，以下代码必须有效：</target>
        </trans-unit>
        <trans-unit id="987929f581043dd44f61bd2c584b51d10539e03a" translate="yes" xml:space="preserve">
          <source>Whatever fields you use for a natural key must be able to uniquely identify an object. This will usually mean that your model will have a uniqueness clause (either unique=True on a single field, or &lt;code&gt;unique_together&lt;/code&gt; over multiple fields) for the field or fields in your natural key. However, uniqueness doesn&amp;rsquo;t need to be enforced at the database level. If you are certain that a set of fields will be effectively unique, you can still use those fields as a natural key.</source>
          <target state="translated">无论您将哪个字段用于自然键，都必须能够唯一标识一个对象。这通常意味着您的模型将为您的自然键中的一个或多个字段具有唯一性子句（在单个字段上为unique = True，或在多个字段上为 &lt;code&gt;unique_together&lt;/code&gt; ）。但是，不需要在数据库级别强制执行唯一性。如果确定一组字段实际上是唯一的，则仍可以将这些字段用作自然键。</target>
        </trans-unit>
        <trans-unit id="780c3ac757cd456f35b4b9267755186ee7fcae8d" translate="yes" xml:space="preserve">
          <source>Whatever the data submitted with a form, once it has been successfully validated by calling &lt;code&gt;is_valid()&lt;/code&gt; (and &lt;code&gt;is_valid()&lt;/code&gt; has returned &lt;code&gt;True&lt;/code&gt;), the validated form data will be in the &lt;code&gt;form.cleaned_data&lt;/code&gt; dictionary. This data will have been nicely converted into Python types for you.</source>
          <target state="translated">无论通过表单提交的数据是什么，一旦通过调用 &lt;code&gt;is_valid()&lt;/code&gt; 成功验证了该数据（并且 &lt;code&gt;is_valid()&lt;/code&gt; 返回 &lt;code&gt;True&lt;/code&gt; ），则经过验证的表单数据将位于 &lt;code&gt;form.cleaned_data&lt;/code&gt; 字典中。这些数据将为您很好地转换为Python类型。</target>
        </trans-unit>
        <trans-unit id="4de9dbf82e7c4f1a199c68eb694c7ee30ba4708c" translate="yes" xml:space="preserve">
          <source>Whatever value is or was on &lt;code&gt;reporter.stories_filed&lt;/code&gt;, Python never gets to know about it - it is dealt with entirely by the database. All Python does, through Django&amp;rsquo;s &lt;code&gt;F()&lt;/code&gt; class, is create the SQL syntax to refer to the field and describe the operation.</source>
          <target state="translated">无论 &lt;code&gt;reporter.stories_filed&lt;/code&gt; 值是多少或曾经是什么，Python都永远不会了解它-它完全由数据库处理。通过Django的 &lt;code&gt;F()&lt;/code&gt; 类，所有Python所做的都是创建SQL语法以引用该字段并描述操作。</target>
        </trans-unit>
        <trans-unit id="54face92924e906d3eac2a3ec37de7864281ecc4" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#creating-message-files-from-js-code&quot;&gt;creating message files from JavaScript source code&lt;/a&gt; you need to use the special &lt;code&gt;djangojs&lt;/code&gt; domain, &lt;strong&gt;not&lt;/strong&gt;&lt;code&gt;-e js&lt;/code&gt;.</source>
          <target state="translated">当&lt;a href=&quot;#creating-message-files-from-js-code&quot;&gt;创建从JavaScript源代码的消息文件&lt;/a&gt;，你需要使用特殊的 &lt;code&gt;djangojs&lt;/code&gt; 域，&lt;strong&gt;不&lt;/strong&gt; &lt;code&gt;-e js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4eec7d7d5daca200324ce0e8b8d1f109846f529" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#django.contrib.admin.ModelAdmin.save_as&quot;&gt;&lt;code&gt;save_as=True&lt;/code&gt;&lt;/a&gt;, the default redirect after saving the new object is to the change view for that object. If you set &lt;code&gt;save_as_continue=False&lt;/code&gt;, the redirect will be to the changelist view.</source>
          <target state="translated">当&lt;a href=&quot;#django.contrib.admin.ModelAdmin.save_as&quot;&gt; &lt;code&gt;save_as=True&lt;/code&gt; 时&lt;/a&gt;，保存新对象后的默认重定向是到该对象的更改视图。如果您设置 &lt;code&gt;save_as_continue=False&lt;/code&gt; ，则重定向将指向更改列表视图。</target>
        </trans-unit>
        <trans-unit id="e1b58b2876ee1b53da723f34b8bf2f76d912ee9c" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt;&lt;code&gt;raise_exception&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, this method can be used to control the error message passed to the error handler for display to the user. Returns the &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.permission_denied_message&quot;&gt;&lt;code&gt;permission_denied_message&lt;/code&gt;&lt;/a&gt; attribute by default.</source>
          <target state="translated">当&lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt; &lt;code&gt;raise_exception&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时，此方法可用于控制传递给错误处理程序以显示给用户的错误消息。默认情况下返回&lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.permission_denied_message&quot;&gt; &lt;code&gt;permission_denied_message&lt;/code&gt; &lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="39edf3421230df0fe87e02d979bd6550c6912094" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.query_pk_and_slug&quot;&gt;&lt;code&gt;query_pk_and_slug&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;get_object()&lt;/code&gt; will perform its lookup using both the primary key and the slug.</source>
          <target state="translated">当&lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.query_pk_and_slug&quot;&gt; &lt;code&gt;query_pk_and_slug&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时， &lt;code&gt;get_object()&lt;/code&gt; 将同时使用主键和slug进行查找。</target>
        </trans-unit>
        <trans-unit id="0d91bc30701d631e42597ef84ba0453a04e8453b" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; is empty, the host is validated against &lt;code&gt;['.localhost', '127.0.0.1', '[::1]']&lt;/code&gt;.</source>
          <target state="translated">当&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 且 &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; 为空时，将针对 &lt;code&gt;['.localhost', '127.0.0.1', '[::1]']&lt;/code&gt; 验证主机。</target>
        </trans-unit>
        <trans-unit id="2a96433fef861e8751b38f9ad0ee8b3ab562ec74" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; is empty, the host is validated against &lt;code&gt;['localhost', '127.0.0.1', '[::1]']&lt;/code&gt;.</source>
          <target state="translated">当&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 且 &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; 为空时，将针对 &lt;code&gt;['localhost', '127.0.0.1', '[::1]']&lt;/code&gt; 验证主机。</target>
        </trans-unit>
        <trans-unit id="b786200e2e2862908e9858456e92bfd86ad34d63" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, the locale-dictated format has higher precedence and will be applied instead.</source>
          <target state="translated">当&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时，由区域设置指定的格式具有更高的优先级，并且将被应用。</target>
        </trans-unit>
        <trans-unit id="35abb370fc03c6da6e2c136a576ddf684be0ea28" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, it is an error to set this option.</source>
          <target state="translated">当&lt;a href=&quot;#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;False&lt;/code&gt; 时，设置此选项是错误的。</target>
        </trans-unit>
        <trans-unit id="a645f847d9b1f7dfe1442293862a225073b47caa" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, this is the time zone in which Django will store all datetimes. When &lt;a href=&quot;#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, this is the default time zone that Django will use to display datetimes in templates and to interpret datetimes entered in forms.</source>
          <target state="translated">当&lt;a href=&quot;#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;False&lt;/code&gt; 时，这是Django将存储所有日期时间的时区。当&lt;a href=&quot;#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时，这是Django用来在模板中显示日期时间并解释在表单中输入的日期时间的默认时区。</target>
        </trans-unit>
        <trans-unit id="7e84b7eff65b046bdf31d4c4bb666b31f1e95271" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and the database doesn&amp;rsquo;t support time zones (e.g. SQLite, MySQL, Oracle), Django reads and writes datetimes in local time according to this option if it is set and in UTC if it isn&amp;rsquo;t.</source>
          <target state="translated">当&lt;a href=&quot;#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 且数据库不支持时区（例如SQLite，MySQL，Oracle）时，如果设置了该选项，则Django会根据本地时间在本地时间读写日期时间，如果未设置，则在UTC中读写日期时间。</target>
        </trans-unit>
        <trans-unit id="52e571402d09016980c16852db8806f0f6cc2bfd" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and the database supports time zones (e.g. PostgreSQL), it is an error to set this option.</source>
          <target state="translated">当&lt;a href=&quot;#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 且数据库支持时区（例如PostgreSQL）时，设置此选项是错误的。</target>
        </trans-unit>
        <trans-unit id="09e8753af3651ddd71d69ad036321f595988c3e2" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and this option is set, reading datetimes from the database returns aware datetimes in this time zone instead of UTC. When &lt;a href=&quot;#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, it is an error to set this option.</source>
          <target state="translated">当&lt;a href=&quot;#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 且设置了此选项时，从数据库中读取日期时间将返回此时区中的已知日期时间，而不是UTC。当&lt;a href=&quot;#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;False&lt;/code&gt; 时，设置此选项是错误的。</target>
        </trans-unit>
        <trans-unit id="8ab1087dcba0b177d632f8a9fb32c9532b072a32" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; is in &lt;a href=&quot;../../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the Django development server automatically serves the static files of the admin app (and any other installed apps). This is however not the case when you use any other server arrangement. You&amp;rsquo;re responsible for setting up Apache, or whichever Web server you&amp;rsquo;re using, to serve the admin files.</source>
          <target state="translated">当&lt;a href=&quot;../../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;位于&lt;a href=&quot;../../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 中时&lt;/a&gt;，Django开发服务器会自动提供管理应用程序（以及任何其他已安装的应用程序）的静态文件。但是，当您使用任何其他服务器布置时，情况并非如此。您负责设置Apache或您使用的任何Web服务器来提供管理文件。</target>
        </trans-unit>
        <trans-unit id="3b50175f0680c819ffc7a719fe6b23a4f2af0a27" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt;&lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt;&lt;/a&gt; is enabled, it&amp;rsquo;s still possible to prevent views from running in a transaction.</source>
          <target state="translated">当&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt; &lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt; &lt;/a&gt;启用时，它仍然是可以防止的观点在一个事务中运行。</target>
        </trans-unit>
        <trans-unit id="6c2cd04fc26581cf986214f076f70474d7264eee" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG = False&lt;/code&gt;&lt;/a&gt;, Django doesn&amp;rsquo;t work at all without a suitable value for &lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG = False&lt;/code&gt; &lt;/a&gt;，如果没有&lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt;的合适值，Django根本无法工作。</target>
        </trans-unit>
        <trans-unit id="d3d8a8b962fbf0384bf1184ef985c582adc01f8f" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, you can provide a message to &lt;code&gt;Http404&lt;/code&gt; and it will appear in the standard 404 debug template. Use these messages for debugging purposes; they generally aren&amp;rsquo;t suitable for use in a production 404 template.</source>
          <target state="translated">当&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时，您可以向 &lt;code&gt;Http404&lt;/code&gt; 提供一条消息，它将出现在标准404调试模板中。使用这些消息进行调试；它们通常不适合在生产404模板中使用。</target>
        </trans-unit>
        <trans-unit id="e6d7057736e395edf7b8c0761777458f5893d5be" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, Django still accepts naive datetime objects, in order to preserve backwards-compatibility. When the database layer receives one, it attempts to make it aware by interpreting it in the &lt;a href=&quot;#default-current-time-zone&quot;&gt;default time zone&lt;/a&gt; and raises a warning.</source>
          <target state="translated">当&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时，Django仍接受朴素的datetime对象，以保持向后兼容。当数据库层收到一个时，它将尝试通过在&lt;a href=&quot;#default-current-time-zone&quot;&gt;默认时区中&lt;/a&gt;对其进行解释来使其意识到，并发出警告。</target>
        </trans-unit>
        <trans-unit id="e1e4b43eb2f5455ef3fd9052ac4d560cf74b0a7d" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, this is useful to preserve backwards-compatibility with applications that still rely on local time. However, &lt;a href=&quot;#naive-datetime-objects&quot;&gt;as explained above&lt;/a&gt;, this isn&amp;rsquo;t entirely reliable, and you should always work with aware datetimes in UTC in your own code. For instance, use &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp&quot;&gt;&lt;code&gt;fromtimestamp()&lt;/code&gt;&lt;/a&gt; and set the &lt;code&gt;tz&lt;/code&gt; parameter to &lt;a href=&quot;../../ref/utils#django.utils.timezone.utc&quot;&gt;&lt;code&gt;utc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时，这对于保持与仍依赖本地时间的应用程序的向后兼容性很有用。但是，&lt;a href=&quot;#naive-datetime-objects&quot;&gt;如上所述&lt;/a&gt;，这并不完全可靠，您应该始终在自己的代码中使用UTC中已知的日期时间进行工作。例如，使用&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp&quot;&gt; &lt;code&gt;fromtimestamp()&lt;/code&gt; &lt;/a&gt;并将 &lt;code&gt;tz&lt;/code&gt; 参数设置为&lt;a href=&quot;../../ref/utils#django.utils.timezone.utc&quot;&gt; &lt;code&gt;utc&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f31d5e090ee6d233bb5c9aa648c6b52809501fc5" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../../topics/i18n/timezones&quot;&gt;time zone support&lt;/a&gt; is enabled and &lt;code&gt;date_field&lt;/code&gt; is a &lt;code&gt;DateTimeField&lt;/code&gt;, dates are assumed to be in the current time zone. Otherwise, the queryset could include objects from the previous or the next day in the end user&amp;rsquo;s time zone.</source>
          <target state="translated">当&lt;a href=&quot;../../topics/i18n/timezones&quot;&gt;时区支持&lt;/a&gt;已启用，并且 &lt;code&gt;date_field&lt;/code&gt; 是 &lt;code&gt;DateTimeField&lt;/code&gt; 字段，日期被认为是在当前时区。否则，查询集可能包含最终用户所在时区中前一天或后一天的对象。</target>
        </trans-unit>
        <trans-unit id="72677e01e448c4a67c8b2f3229218908d4742d51" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, Django will email the users listed in the &lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; setting whenever your code raises an unhandled exception and results in an internal server error (strictly speaking, for any response with an HTTP status code of 500 or greater). This gives the administrators immediate notification of any errors. The &lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; will get a description of the error, a complete Python traceback, and details about the HTTP request that caused the error.</source>
          <target state="translated">当&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;False&lt;/code&gt; 时，只要您的代码引发未处理的异常并导致内部服务器错误（严格来说，对于HTTP状态码为500或更高的任何响应），Django都会通过电子邮件将&lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; &lt;/a&gt;设置中列出的用户发送给电子邮件。这会给管理员立即通知任何错误。该&lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; &lt;/a&gt;会得到错误的描述，一个完整的Python追踪，以及有关导致错误的HTTP请求的详细信息。</target>
        </trans-unit>
        <trans-unit id="7ebfe91d6b34d1e102da8dbfcae13c88a558dcb6" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">当&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;False&lt;/code&gt; 时：</target>
        </trans-unit>
        <trans-unit id="078008cba232f61c75acc7e754cbf66dc98202e5" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">当&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时：</target>
        </trans-unit>
        <trans-unit id="5015937ba5a6d6910d698b65098ff7bc8004ab0c" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;DjangoTemplates&lt;/code&gt; engines look for templates in the &lt;code&gt;templates&lt;/code&gt; subdirectory of installed applications. This generic name was kept for backwards-compatibility.</source>
          <target state="translated">当&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时， &lt;code&gt;DjangoTemplates&lt;/code&gt; 引擎会在已安装的应用程序的 &lt;code&gt;templates&lt;/code&gt; 子目录中查找模板。保留该通用名称是为了向后兼容。</target>
        </trans-unit>
        <trans-unit id="d2b8728dfc9f01a4852d25c45bc8d5cd20588b22" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;Jinja2&lt;/code&gt; engines look for templates in the &lt;code&gt;jinja2&lt;/code&gt; subdirectory of installed applications.</source>
          <target state="translated">当&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时， &lt;code&gt;Jinja2&lt;/code&gt; 引擎在已安装应用程序的 &lt;code&gt;jinja2&lt;/code&gt; 子目录中查找模板。</target>
        </trans-unit>
        <trans-unit id="a47be6a21b160ae4c773dc9a96f59c08e428aa57" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; then datetimes are stored in the database in UTC. If a different timezone is active in Django, the datetime is converted to that timezone before the value is extracted. The example below converts to the Melbourne timezone (UTC +10:00), which changes the day, weekday, and hour values that are returned:</source>
          <target state="translated">当&lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时,日期时间以UTC 格式存储在数据库中。如果Django中的其他时区处于活动状态，则在提取值之前将datetime转换为该时区。下面的示例将转换为墨尔本时区（UTC +10：00），该时区将更改返回的日期，工作日和小时值：</target>
        </trans-unit>
        <trans-unit id="063e498ca71858482d88e52c880934c8b218cedb" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, datetime fields are converted to the current time zone before filtering. This requires &lt;a href=&quot;#database-time-zone-definitions&quot;&gt;time zone definitions in the database&lt;/a&gt;.</source>
          <target state="translated">当&lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时，日期时间字段将在过滤之前转换为当前时区。这需要&lt;a href=&quot;#database-time-zone-definitions&quot;&gt;数据库中的时区定义&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b0306814aafd870e05a002219eaae32fd6c85471" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, fields are converted to the current time zone before filtering. This requires &lt;a href=&quot;#database-time-zone-definitions&quot;&gt;time zone definitions in the database&lt;/a&gt;.</source>
          <target state="translated">当&lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; 时，将在过滤之前将字段转换为当前时区。这需要&lt;a href=&quot;#database-time-zone-definitions&quot;&gt;数据库中的时区定义&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="01bb73f4cb5b8dbd0178f8c58e67dd4ae072bb6c" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt; is in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;../../django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;inspectdb&lt;/code&gt;&lt;/a&gt; management command is overridden with one from GeoDjango. The overridden command is spatially-aware, and places geometry fields in the auto-generated model definition, where appropriate.</source>
          <target state="translated">当&lt;a href=&quot;index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; &lt;/a&gt;位于&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 中时&lt;/a&gt;，&lt;a href=&quot;../../django-admin#django-admin-inspectdb&quot;&gt; &lt;code&gt;inspectdb&lt;/code&gt; &lt;/a&gt;管理命令将被GeoDjango中的命令覆盖。被覆盖的命令具有空间感知能力，并在适当的情况下将几何形状字段放置在自动生成的模型定义中。</target>
        </trans-unit>
        <trans-unit id="29b195d9be07b40b09610c72be5c863541e21bb5" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; contains the dotted path to an application module, Django checks for a &lt;code&gt;default_app_config&lt;/code&gt; variable in that module.</source>
          <target state="translated">当&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;包含应用程序模块的虚线路径时，Django将在该模块中检查 &lt;code&gt;default_app_config&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="398778ea614be173441f7f04a2b19bc1d3236d24" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;QuerySet&lt;/code&gt;s are evaluated</source>
          <target state="translated">当 &lt;code&gt;QuerySet&lt;/code&gt; s的评估</target>
        </trans-unit>
        <trans-unit id="fe546d84fcea8aa4dd9e239d639913333df82f4d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;QuerySet&lt;/code&gt;s are not cached</source>
          <target state="translated">当 &lt;code&gt;QuerySet&lt;/code&gt; s的高速缓存未</target>
        </trans-unit>
        <trans-unit id="76b3da3eec2f82e519b883850ccb3bff46a1b0bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;SessionMiddleware&lt;/code&gt; is activated, each &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object &amp;ndash; the first argument to any Django view function &amp;ndash; will have a &lt;code&gt;session&lt;/code&gt; attribute, which is a dictionary-like object.</source>
          <target state="translated">当 &lt;code&gt;SessionMiddleware&lt;/code&gt; 被激活时，每个&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;对象-的第一个参数的任何Django的视图函数-将有一个 &lt;code&gt;session&lt;/code&gt; 属性，它是一个类似于字典的对象。</target>
        </trans-unit>
        <trans-unit id="2281102406a3606cdc5d223c0da9b592c79085db" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;True&lt;/code&gt; and used in a model which inherits from another &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-concrete-model&quot;&gt;concrete model&lt;/a&gt;, indicates that this field should be used as the link back to the parent class, rather than the extra &lt;code&gt;OneToOneField&lt;/code&gt; which would normally be implicitly created by subclassing.</source>
          <target state="translated">当为 &lt;code&gt;True&lt;/code&gt; 并在从另一个&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-concrete-model&quot;&gt;具体模型&lt;/a&gt;继承的模型中使用时，指示该字段应用作返回父类的链接，而不是通常由子类隐式创建的多余的 &lt;code&gt;OneToOneField&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f94ffb042ca61e1df12753e346aa97d9c4c5a9f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;True&lt;/code&gt; and used in a model which inherits from another &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/glossary/#term-concrete-model&quot;&gt;concrete model&lt;/a&gt;, indicates that this field should be used as the link back to the parent class, rather than the extra &lt;code&gt;OneToOneField&lt;/code&gt; which would normally be implicitly created by subclassing.</source>
          <target state="translated">当为 &lt;code&gt;True&lt;/code&gt; 并在从另一个&lt;a href=&quot;https://docs.djangoproject.com/en/3.1/glossary/#term-concrete-model&quot;&gt;具体模型&lt;/a&gt;继承的模型中使用时，指示该字段应该用作返回父类的链接，而不是通常由子类隐式创建的多余的 &lt;code&gt;OneToOneField&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7825eb00212ddc444a2eeb11871abef04c77411f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;USE_TZ&lt;/code&gt; is False, Django will use naive datetimes in local time, except when parsing ISO 8601 formatted strings, where timezone information will always be retained if present.</source>
          <target state="translated">当 &lt;code&gt;USE_TZ&lt;/code&gt; 为False时，Django将在本地时间使用幼稚的日期时间，除非解析ISO 8601格式的字符串，否则时区信息将始终保留（如果存在）。</target>
        </trans-unit>
        <trans-unit id="6b66bc42495d61095eae0d619a166b87b76d25b5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;as_attachment=True&lt;/code&gt; is passed to &lt;code&gt;FileResponse&lt;/code&gt;, it sets the appropriate &lt;code&gt;Content-Disposition&lt;/code&gt; header and that tells Web browsers to pop-up a dialog box prompting/confirming how to handle the document even if a default is set on the machine. If the &lt;code&gt;as_attachment&lt;/code&gt; parameter is omitted, browsers will handle the PDF using whatever program/plugin they&amp;rsquo;ve been configured to use for PDFs.</source>
          <target state="translated">当 &lt;code&gt;as_attachment=True&lt;/code&gt; 传递给 &lt;code&gt;FileResponse&lt;/code&gt; 时，它将设置适当的 &lt;code&gt;Content-Disposition&lt;/code&gt; 标头，并告诉Web浏览器弹出一个对话框，提示/确认如何处理文档，即使在计算机上设置了默认设置也是如此。如果省略 &lt;code&gt;as_attachment&lt;/code&gt; 参数，则浏览器将使用已配置用于PDF的任何程序/插件来处理PDF。</target>
        </trans-unit>
        <trans-unit id="1a7c826c3d8d7a29a6926a93fc412782b2ca3288" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;condition()&lt;/code&gt; returns a conditional response, any decorators below it will be skipped and won&amp;rsquo;t apply to the response. Therefore, any decorators that need to apply to both the regular view response and a conditional response must be above &lt;code&gt;condition()&lt;/code&gt;. In particular, &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_cookie&quot;&gt;&lt;code&gt;vary_on_cookie()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;vary_on_headers()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; should come first because &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-4.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt; requires that the headers they set be present on 304 responses.</source>
          <target state="translated">当 &lt;code&gt;condition()&lt;/code&gt; 返回条件响应时，它下面的任何装饰器都将被跳过，并且不适用于该响应。因此，任何需要同时应用于常规视图响应和条件响应的装饰器都必须在 &lt;code&gt;condition()&lt;/code&gt; 之上。特别是，&lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_cookie&quot;&gt; &lt;code&gt;vary_on_cookie()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt; &lt;code&gt;vary_on_headers()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt;应该排在第一位，因为&lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-4.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt;要求它们设置的标头必须出现在304个响应中。</target>
        </trans-unit>
        <trans-unit id="e805526fe1c76d10e910a8a5c7916957633ee6c2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;condition()&lt;/code&gt; returns a conditional response, any decorators below it will be skipped and won&amp;rsquo;t apply to the response. Therefore, any decorators that need to apply to both the regular view response and a conditional response must be above &lt;code&gt;condition()&lt;/code&gt;. In particular, &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_cookie&quot;&gt;&lt;code&gt;vary_on_cookie()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;vary_on_headers()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; should come first because &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-4.1&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt; requires that the headers they set be present on 304 responses.</source>
          <target state="translated">当 &lt;code&gt;condition()&lt;/code&gt; 返回条件响应时，它下面的所有装饰器都将被跳过，并且不适用于该响应。因此，需要同时应用于常规视图响应和条件响应的任何装饰器都必须在 &lt;code&gt;condition()&lt;/code&gt; 之上。特别是，&lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_cookie&quot;&gt; &lt;code&gt;vary_on_cookie()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt; &lt;code&gt;vary_on_headers()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt;应该排在第一位，因为&lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-4.1&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt;要求它们设置的标头必须出现在304个响应中。</target>
        </trans-unit>
        <trans-unit id="97a65d5923678bf0a3bda94eb07758399a62601f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;data&lt;/code&gt; is provided, it is used as the request body, and a &lt;code&gt;Content-Type&lt;/code&gt; header is set to &lt;code&gt;content_type&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;data&lt;/code&gt; 被提供，它被用作请求主体，和一个 &lt;code&gt;Content-Type&lt;/code&gt; 首部设置为 &lt;code&gt;content_type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f36fbe34ea908e2948f6b82890c92abd7e906163" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;django.contrib.auth&lt;/code&gt; is listed in your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting, it will ensure that four default permissions &amp;ndash; add, change, delete, and view &amp;ndash; are created for each Django model defined in one of your installed applications.</source>
          <target state="translated">当 &lt;code&gt;django.contrib.auth&lt;/code&gt; 在上市&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;设置，这将确保四个默认的权限-添加，修改，删除和查看-都在您安装应用程序的一个定义的每个Django的模型创建。</target>
        </trans-unit>
        <trans-unit id="1d00448e3ca50e633908e17ad4a635b466c6dbcf" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;model_name&lt;/code&gt; is set, &lt;code&gt;hints&lt;/code&gt; normally contains the model class under the key &lt;code&gt;'model'&lt;/code&gt;. Note that it may be a &lt;a href=&quot;../migrations#historical-models&quot;&gt;historical model&lt;/a&gt;, and thus not have any custom attributes, methods, or managers. You should only rely on &lt;code&gt;_meta&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;model_name&lt;/code&gt; 设置， &lt;code&gt;hints&lt;/code&gt; 通常包含项下的模型类 &lt;code&gt;'model'&lt;/code&gt; 。请注意，它可能是&lt;a href=&quot;../migrations#historical-models&quot;&gt;历史模型&lt;/a&gt;，因此没有任何自定义属性，方法或管理器。您应该只依靠 &lt;code&gt;_meta&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97a33c629f4e24b73117e132e13d2978b18833f5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;order_with_respect_to&lt;/code&gt; is set, two additional methods are provided to retrieve and to set the order of the related objects: &lt;code&gt;get_RELATED_order()&lt;/code&gt; and &lt;code&gt;set_RELATED_order()&lt;/code&gt;, where &lt;code&gt;RELATED&lt;/code&gt; is the lowercased model name. For example, assuming that a &lt;code&gt;Question&lt;/code&gt; object has multiple related &lt;code&gt;Answer&lt;/code&gt; objects, the list returned contains the primary keys of the related &lt;code&gt;Answer&lt;/code&gt; objects:</source>
          <target state="translated">当 &lt;code&gt;order_with_respect_to&lt;/code&gt; 设置，提供了另外两种方法来检索和设置相关对象的顺序： &lt;code&gt;get_RELATED_order()&lt;/code&gt; 和 &lt;code&gt;set_RELATED_order()&lt;/code&gt; ，其中 &lt;code&gt;RELATED&lt;/code&gt; 的是小写的型号名称。例如，假设一个 &lt;code&gt;Question&lt;/code&gt; 对象具有多个相关的 &lt;code&gt;Answer&lt;/code&gt; 对象，则返回的列表包含相关 &lt;code&gt;Answer&lt;/code&gt; 对象的主键：</target>
        </trans-unit>
        <trans-unit id="1464244508e91f4433a85b30ad476d39b193ed44" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;require_ready&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;get_model()&lt;/code&gt; returns a model class that may not be fully functional (reverse accessors may be missing, for example) until the app registry is fully populated. For this reason, it&amp;rsquo;s best to leave &lt;code&gt;require_ready&lt;/code&gt; to the default value of &lt;code&gt;True&lt;/code&gt; whenever possible.</source>
          <target state="translated">当 &lt;code&gt;require_ready&lt;/code&gt; 为 &lt;code&gt;False&lt;/code&gt; 时， &lt;code&gt;get_model()&lt;/code&gt; 返回一个模型类，该模型类可能无法完全起作用（例如，可能缺少反向访问器），直到完全填充应用程序注册表为止。因此，最好尽可能将 &lt;code&gt;require_ready&lt;/code&gt; 保留为默认值 &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d1ae82005ecae97e3baad3ecd2d706ad2a25a9e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;start_migration_name&lt;/code&gt; is given, Django will only include migrations starting from and including this migration. This helps to mitigate the squashing limitation of &lt;a href=&quot;migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;migration-operations#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;django.db.migrations.operations.RunSQL&lt;/code&gt;&lt;/a&gt; migration operations.</source>
          <target state="translated">当 &lt;code&gt;start_migration_name&lt;/code&gt; 给出，Django将只包括从迁移开始，包括这个迁移。这有助于减轻&lt;a href=&quot;migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;migration-operations#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;django.db.migrations.operations.RunSQL&lt;/code&gt; &lt;/a&gt;迁移操作的压扁限制。</target>
        </trans-unit>
        <trans-unit id="bcb15caf9c8e2ad031c5694cb1b57113b550a57b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;use_natural_foreign_keys=True&lt;/code&gt; is specified, Django will use the &lt;code&gt;natural_key()&lt;/code&gt; method to serialize any foreign key reference to objects of the type that defines the method.</source>
          <target state="translated">当指定 &lt;code&gt;use_natural_foreign_keys=True&lt;/code&gt; 时，Django将使用 &lt;code&gt;natural_key()&lt;/code&gt; 方法将任何外键引用序列化为定义该方法的类型的对象。</target>
        </trans-unit>
        <trans-unit id="69c2f1096bca18408685b53cb08ccad793a09b12" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;use_natural_primary_keys=True&lt;/code&gt; is specified, Django will not provide the primary key in the serialized data of this object since it can be calculated during deserialization:</source>
          <target state="translated">当指定 &lt;code&gt;use_natural_primary_keys=True&lt;/code&gt; 时，Django不会在此对象的序列化数据中提供主键，因为可以在反序列化期间对其进行计算：</target>
        </trans-unit>
        <trans-unit id="1bd77747a087f95cbda44f8709ec4e90e31e5665" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;value&lt;/code&gt; is omitted, it defaults to &lt;a href=&quot;#django.utils.timezone.now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当 &lt;code&gt;value&lt;/code&gt; 被省略，则默认为&lt;a href=&quot;#django.utils.timezone.now&quot;&gt; &lt;code&gt;now()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3131f5060bfafb3929fde29ac384381155e1a13f" translate="yes" xml:space="preserve">
          <source>When Daphne is installed, a &lt;code&gt;daphne&lt;/code&gt; command is available which starts the Daphne server process. At its simplest, Daphne needs to be called with the location of a module containing an ASGI application object, followed by what the application is called (separated by a colon).</source>
          <target state="translated">安装Daphne时，可以使用 &lt;code&gt;daphne&lt;/code&gt; 命令启动Daphne服务器进程。最简单地，需要使用包含ASGI应用程序对象的模块的位置来调用Daphne，然后是调用该应用程序的位置（用冒号分隔）。</target>
        </trans-unit>
        <trans-unit id="fd0be0e29eeab55bae3e3c9a146a3c1d575a91da" translate="yes" xml:space="preserve">
          <source>When Django can&amp;rsquo;t find a match for the requested URL, or when an exception is raised, Django invokes an error-handling view.</source>
          <target state="translated">当Django无法找到所请求URL的匹配项时，或引发异常时，Django会调用一个错误处理视图。</target>
        </trans-unit>
        <trans-unit id="0796b7c6790a393507472022529cf27b1eb27bbb" translate="yes" xml:space="preserve">
          <source>When Django compiles a template, it splits the raw template text into &amp;lsquo;&amp;rsquo;nodes&amp;rsquo;&amp;lsquo;. Each node is an instance of &lt;code&gt;django.template.Node&lt;/code&gt; and has a &lt;code&gt;render()&lt;/code&gt; method. A compiled template is a list of &lt;code&gt;Node&lt;/code&gt; objects. When you call &lt;code&gt;render()&lt;/code&gt; on a compiled template object, the template calls &lt;code&gt;render()&lt;/code&gt; on each &lt;code&gt;Node&lt;/code&gt; in its node list, with the given context. The results are all concatenated together to form the output of the template.</source>
          <target state="translated">Django编译模板时，会将原始模板文本拆分为&amp;ldquo;节点&amp;rdquo;。每个节点都是 &lt;code&gt;django.template.Node&lt;/code&gt; 的实例，并具有 &lt;code&gt;render()&lt;/code&gt; 方法。编译模板是 &lt;code&gt;Node&lt;/code&gt; 对象的列表。当您在已编译的模板对象上调用 &lt;code&gt;render()&lt;/code&gt; 时，该模板会使用给定的上下文在其节点列表中的每个 &lt;code&gt;Node&lt;/code&gt; 上调用 &lt;code&gt;render()&lt;/code&gt; 。结果全部串联在一起形成模板的输出。</target>
        </trans-unit>
        <trans-unit id="ccfecb06224691e925d260d19074cceb0f3f9271" translate="yes" xml:space="preserve">
          <source>When Django deletes an object, by default it emulates the behavior of the SQL constraint &lt;code&gt;ON DELETE CASCADE&lt;/code&gt; &amp;ndash; in other words, any objects which had foreign keys pointing at the object to be deleted will be deleted along with it. For example:</source>
          <target state="translated">当Django删除对象时，默认情况下它会模拟 &lt;code&gt;ON DELETE CASCADE&lt;/code&gt; SQL约束的行为&amp;ndash;换句话说，任何具有外键指向要删除对象的对象都将被删除。例如：</target>
        </trans-unit>
        <trans-unit id="94ba4ccedde0d0ccf54a7ea60509089958795bac" translate="yes" xml:space="preserve">
          <source>When Django encounters an instance of &lt;code&gt;F()&lt;/code&gt;, it overrides the standard Python operators to create an encapsulated SQL expression; in this case, one which instructs the database to increment the database field represented by &lt;code&gt;reporter.stories_filed&lt;/code&gt;.</source>
          <target state="translated">当Django遇到 &lt;code&gt;F()&lt;/code&gt; 实例时，它将覆盖标准Python运算符以创建封装的SQL表达式；在这种情况下，它指示数据库增加由 &lt;code&gt;reporter.stories_filed&lt;/code&gt; 表示的数据库字段。</target>
        </trans-unit>
        <trans-unit id="c0dbb7b8673bc175a119522d511a7d7727c1c25d" translate="yes" xml:space="preserve">
          <source>When Django establishes a connection to the database, it sets up appropriate parameters, depending on the backend being used. If you enable persistent connections, this setup is no longer repeated every request. If you modify parameters such as the connection&amp;rsquo;s isolation level or time zone, you should either restore Django&amp;rsquo;s defaults at the end of each request, force an appropriate value at the beginning of each request, or disable persistent connections.</source>
          <target state="translated">Django建立与数据库的连接时，它会根据所使用的后端设置适当的参数。如果启用持久连接，则不再对每个请求重复此设置。如果您修改参数（例如连接的隔离级别或时区），则应该在每个请求结束时恢复Django的默认值，在每个请求开始时强制使用适当的值，或者禁用持久连接。</target>
        </trans-unit>
        <trans-unit id="65ecc9404e204680c3af970a5abba12007e950eb" translate="yes" xml:space="preserve">
          <source>When Django finds a matching pattern, it calls the specified view function with an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object as the first argument and any &amp;ldquo;captured&amp;rdquo; values from the route as keyword arguments. We&amp;rsquo;ll give an example of this in a bit.</source>
          <target state="translated">当Django找到匹配的模式时，它将使用&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;对象作为第一个参数，并从路由中获取的所有&amp;ldquo;捕获&amp;rdquo;值作为关键字参数来调用指定的视图函数。我们将举一个例子。</target>
        </trans-unit>
        <trans-unit id="3d951f7a17a65a289b94f27b19bbdfea34341a24" translate="yes" xml:space="preserve">
          <source>When Django finds a template that exists, it stops looking.</source>
          <target state="translated">当Django发现一个模板存在时,它就会停止寻找。</target>
        </trans-unit>
        <trans-unit id="bf9acef06aca584a21d6599b770a9002850563aa" translate="yes" xml:space="preserve">
          <source>When Django generates the schema, it doesn&amp;rsquo;t specify a storage engine, so tables will be created with whatever default storage engine your database server is configured for. The easiest solution is to set your database server&amp;rsquo;s default storage engine to the desired engine.</source>
          <target state="translated">Django生成架构时，它没有指定存储引擎，因此将使用数据库服务器配置的默认存储引擎创建表。最简单的解决方案是将数据库服务器的默认存储引擎设置为所需的引擎。</target>
        </trans-unit>
        <trans-unit id="14b089a116a4deb126a1e28310400694e7f85581" translate="yes" xml:space="preserve">
          <source>When Django handles a file upload, the file data ends up placed in &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; (for more on the &lt;code&gt;request&lt;/code&gt; object see the documentation for &lt;a href=&quot;../../ref/request-response&quot;&gt;request and response objects&lt;/a&gt;). This document explains how files are stored on disk and in memory, and how to customize the default behavior.</source>
          <target state="translated">当Django处理文件上传时，文件数据最终放置在&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; 中&lt;/a&gt;（有关 &lt;code&gt;request&lt;/code&gt; 对象的更多信息，请参见关于&lt;a href=&quot;../../ref/request-response&quot;&gt;请求和响应对象&lt;/a&gt;的文档）。本文档说明文件如何存储在磁盘和内存中，以及如何自定义默认行为。</target>
        </trans-unit>
        <trans-unit id="21639defdf0032fad512f6c56eadaa1382fe98ce" translate="yes" xml:space="preserve">
          <source>When Django processes this model, it identifies that it has a &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; on itself, and as a result, it doesn&amp;rsquo;t add a &lt;code&gt;person_set&lt;/code&gt; attribute to the &lt;code&gt;Person&lt;/code&gt; class. Instead, the &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; is assumed to be symmetrical &amp;ndash; that is, if I am your friend, then you are my friend.</source>
          <target state="translated">Django处理此模型时，会确定其自身具有&lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;，因此不会向 &lt;code&gt;Person&lt;/code&gt; 类添加 &lt;code&gt;person_set&lt;/code&gt; 属性。相反，假定&lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;是对称的-也就是说，如果我是您的朋友，那么您就是我的朋友。</target>
        </trans-unit>
        <trans-unit id="97be14b3390eb9e1c77abcd7fd95afa9cbb4690b" translate="yes" xml:space="preserve">
          <source>When Django renders a widget as HTML, it only renders very minimal markup - Django doesn&amp;rsquo;t add class names, or any other widget-specific attributes. This means, for example, that all &lt;a href=&quot;#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widgets will appear the same on your Web pages.</source>
          <target state="translated">当Django将小部件呈现为HTML时，它仅呈现非常小的标记-Django不添加类名或任何其他特定于小部件的属性。例如，这意味着所有&lt;a href=&quot;#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;小部件将在您的Web页面上显示为相同。</target>
        </trans-unit>
        <trans-unit id="0edee919db33c1a71cfc2cbe18ab4a9c760b5a41" translate="yes" xml:space="preserve">
          <source>When Django searches for a certain format, it will go through all given Python paths until it finds a module that actually defines the given format. This means that formats defined in packages farther up in the list will take precedence over the same formats in packages farther down.</source>
          <target state="translated">当Django搜索某个格式时,它将通过所有给定的Python路径,直到找到一个真正定义该格式的模块。这意味着在列表中较远处的包中定义的格式将优先于较远处的包中的格式。</target>
        </trans-unit>
        <trans-unit id="75677919e0e7b52a38682f0e8354264b3272df7a" translate="yes" xml:space="preserve">
          <source>When Django starts, &lt;a href=&quot;#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; is responsible for populating the application registry.</source>
          <target state="translated">Django启动时，&lt;a href=&quot;#django.setup&quot;&gt; &lt;code&gt;django.setup()&lt;/code&gt; &lt;/a&gt;负责填充应用程序注册表。</target>
        </trans-unit>
        <trans-unit id="c5f7f659f0efcdc3a7060fac73444677c3cf5fab" translate="yes" xml:space="preserve">
          <source>When GeoDjango can&amp;rsquo;t find GEOS, this error is raised:</source>
          <target state="translated">当GeoDjango找不到GEOS时，会出现此错误：</target>
        </trans-unit>
        <trans-unit id="3345102299d2049cd3b1889a7ab80760fe7ab357" translate="yes" xml:space="preserve">
          <source>When GeoDjango can&amp;rsquo;t find the GDAL library, configure your &lt;a href=&quot;index#libsettings&quot;&gt;Library environment settings&lt;/a&gt;&lt;em&gt;or&lt;/em&gt; set &lt;a href=&quot;#gdallibrarypath&quot;&gt;GDAL_LIBRARY_PATH&lt;/a&gt; in your settings.</source>
          <target state="translated">当GeoDjango无法找到GDAL库时，请配置您的&lt;a href=&quot;index#libsettings&quot;&gt;库环境设置&lt;/a&gt;&lt;em&gt;或&lt;/em&gt;在设置中设置&lt;a href=&quot;#gdallibrarypath&quot;&gt;GDAL_LIBRARY_PATH&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1e4c1fd5d2a871766c78499bf711d26c9f348099" translate="yes" xml:space="preserve">
          <source>When GeoDjango&amp;rsquo;s spatial backend initializes on PostGIS, it has to perform an SQL query to determine the version in order to figure out what features are available. Advanced users wishing to prevent this additional query may set the version manually using a 3-tuple of integers specifying the major, minor, and micro version numbers for PostGIS. For example, to configure for PostGIS X.Y.Z you would use:</source>
          <target state="translated">当GeoDjango的空间后端在PostGIS上初始化时，它必须执行SQL查询以确定版本，以便确定可用的功能。希望阻止此附加查询的高级用户可以使用3个整数的元组手动设置版本，这些整数指定PostGIS的主要，次要和微型版本号。例如，要为PostGIS XYZ配置，请使用：</target>
        </trans-unit>
        <trans-unit id="7e951e0c1686513e03322583b58957f6977278cc" translate="yes" xml:space="preserve">
          <source>When Gunicorn is installed, a &lt;code&gt;gunicorn&lt;/code&gt; command is available which starts the Gunicorn server process. The simplest invocation of gunicorn is to pass the location of a module containing a WSGI application object named &lt;code&gt;application&lt;/code&gt;, which for a typical Django project would look like:</source>
          <target state="translated">安装 &lt;code&gt;gunicorn&lt;/code&gt; 可以使用gunicorn命令启动Gunicorn服务器进程。gunicorn的最简单调用是传递包含名为 &lt;code&gt;application&lt;/code&gt; 的WSGI应用程序对象的模块的位置，对于典型的Django项目，该对象看起来像：</target>
        </trans-unit>
        <trans-unit id="2a50e001ef566897b5cb38bb8a22727d47e8a1f5" translate="yes" xml:space="preserve">
          <source>When Hypercorn is installed, a &lt;code&gt;hypercorn&lt;/code&gt; command is available which runs ASGI applications. Hypercorn needs to be called with the location of a module containing an ASGI application object, followed by what the application is called (separated by a colon).</source>
          <target state="translated">安装Hypercorn后，可以使用运行ASGI应用程序的 &lt;code&gt;hypercorn&lt;/code&gt; 命令。需要使用包含ASGI应用程序对象的模块的位置调用Hypercorn，然后调用该应用程序（用冒号分隔）。</target>
        </trans-unit>
        <trans-unit id="25c4eeb22683ac77d01607a524a5cc6e6abc4c76" translate="yes" xml:space="preserve">
          <source>When Uvicorn is installed, a &lt;code&gt;uvicorn&lt;/code&gt; command is available which runs ASGI applications. Uvicorn needs to be called with the location of a module containing a ASGI application object, followed by what the application is called (separated by a colon).</source>
          <target state="translated">安装Uvicorn后，可以使用 &lt;code&gt;uvicorn&lt;/code&gt; 命令运行ASGI应用程序。必须使用包含ASGI应用程序对象的模块的位置来调用Uvicorn，然后再调用该应用程序（由冒号分隔）。</target>
        </trans-unit>
        <trans-unit id="e832bfa784b428f95279d2d10ae8d748abc1b7d4" translate="yes" xml:space="preserve">
          <source>When Uvicorn is installed, a &lt;code&gt;uvicorn&lt;/code&gt; command is available which runs ASGI applications. Uvicorn needs to be called with the location of a module containing an ASGI application object, followed by what the application is called (separated by a colon).</source>
          <target state="translated">安装Uvicorn后，可以使用 &lt;code&gt;uvicorn&lt;/code&gt; 命令运行ASGI应用程序。必须使用包含ASGI应用程序对象的模块的位置来调用Uvicorn，然后再调用该应用程序（由冒号分隔）。</target>
        </trans-unit>
        <trans-unit id="b2fe4270d9bd2c70f48127f0ebf3ed244ea8bbae" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; is raised in Django, it may be handled by a component of Django (for example resetting the session data). If not specifically handled, Django will consider the current request a &amp;lsquo;bad request&amp;rsquo; instead of a server error.</source>
          <target state="translated">当&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;在Django升高时，它可通过的Django的组件（例如复位会话数据）进行处理。如果没有特别处理，Django会将当前请求视为&amp;ldquo;错误请求&amp;rdquo;，而不是服务器错误。</target>
        </trans-unit>
        <trans-unit id="44cadbde59e9ad88559b5b09a4aba4bca5882390" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;QuerySet&lt;/code&gt; is &lt;a href=&quot;#when-querysets-are-evaluated&quot;&gt;evaluated&lt;/a&gt;, it typically caches its results. If the data in the database might have changed since a &lt;code&gt;QuerySet&lt;/code&gt; was evaluated, you can get updated results for the same query by calling &lt;code&gt;all()&lt;/code&gt; on a previously evaluated &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;QuerySet&lt;/code&gt; 被&lt;a href=&quot;#when-querysets-are-evaluated&quot;&gt;评价&lt;/a&gt;时，它通常会缓存其结果。如果自评估 &lt;code&gt;QuerySet&lt;/code&gt; 以来数据库中的数据可能已更改，则可以通过调用先前评估的 &lt;code&gt;QuerySet&lt;/code&gt; 的 &lt;code&gt;all()&lt;/code&gt; 来获取同一查询的更新结果。</target>
        </trans-unit>
        <trans-unit id="3112408e34af556995bab6644c19357e93101162" translate="yes" xml:space="preserve">
          <source>When a conditional expression returns a boolean value, it is possible to use it directly in filters. This means that it will not be added to the &lt;code&gt;SELECT&lt;/code&gt; columns, but you can still use it to filter results:</source>
          <target state="translated">当条件表达式返回布尔值时，可以直接在过滤器中使用它。这意味着它不会被添加到 &lt;code&gt;SELECT&lt;/code&gt; 列中，但是您仍然可以使用它来过滤结果：</target>
        </trans-unit>
        <trans-unit id="cfb7a0ce636d4c4a2105872c97027a0e48a7b66d" translate="yes" xml:space="preserve">
          <source>When a message is given to the logger, the log level of the message is compared to the log level of the logger. If the log level of the message meets or exceeds the log level of the logger itself, the message will undergo further processing. If it doesn&amp;rsquo;t, the message will be ignored.</source>
          <target state="translated">将消息提供给记录器时，会将消息的日志级别与记录器的日志级别进行比较。如果消息的日志级别达到或超过记录器本身的日志级别，则将对消息进行进一步处理。如果没有，该消息将被忽略。</target>
        </trans-unit>
        <trans-unit id="0f0ac0c0a7dca2cb8bedfdefd255ec3ae4b5fd30" translate="yes" xml:space="preserve">
          <source>When a page is requested, Django creates an &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object that contains metadata about the request. Then Django loads the appropriate view, passing the &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; as the first argument to the view function. Each view is responsible for returning an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">当请求页面时，Django创建一个&lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;对象，该对象包含有关请求的元数据。然后Django加载适当的视图，并将&lt;a href=&quot;#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;作为第一个参数传递给视图函数。每个视图负责返回一个&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="38d44950f06c56c3f332c08d1c7449371a4004cb" translate="yes" xml:space="preserve">
          <source>When a query expression wraps another expression, it is responsible for calling the appropriate methods on the wrapped expression.</source>
          <target state="translated">当一个查询表达式包装另一个表达式时,它负责在被包装的表达式上调用相应的方法。</target>
        </trans-unit>
        <trans-unit id="a5686af260b48c0cf44d20a73aea34d9eb7e7669" translate="yes" xml:space="preserve">
          <source>When a user logs in, the user&amp;rsquo;s ID and the backend that was used for authentication are saved in the user&amp;rsquo;s session. This allows the same &lt;a href=&quot;customizing#authentication-backends&quot;&gt;authentication backend&lt;/a&gt; to fetch the user&amp;rsquo;s details on a future request. The authentication backend to save in the session is selected as follows:</source>
          <target state="translated">用户登录时，该用户的ID和用于身份验证的后端将保存在该用户的会话中。这允许相同的&lt;a href=&quot;customizing#authentication-backends&quot;&gt;身份验证后端&lt;/a&gt;在以后的请求中获取用户的详细信息。选择要保存在会话中的身份验证后端，如下所示：</target>
        </trans-unit>
        <trans-unit id="6f15763a17a0d00c2a73b845d62394d5d2fa28c8" translate="yes" xml:space="preserve">
          <source>When a user requests a page from your Django-powered site, this is the algorithm the system follows to determine which Python code to execute:</source>
          <target state="translated">当用户从你的Django网站上请求一个页面时,系统会按照这个算法来决定执行哪些Python代码。</target>
        </trans-unit>
        <trans-unit id="61f422350cb8bf6e4c1edd44dae8ccdf2fdfd346" translate="yes" xml:space="preserve">
          <source>When a user uploads a file, Django passes off the file data to an &lt;em&gt;upload handler&lt;/em&gt; &amp;ndash; a small class that handles file data as it gets uploaded. Upload handlers are initially defined in the &lt;a href=&quot;../../ref/settings#std:setting-FILE_UPLOAD_HANDLERS&quot;&gt;&lt;code&gt;FILE_UPLOAD_HANDLERS&lt;/code&gt;&lt;/a&gt; setting, which defaults to:</source>
          <target state="translated">当用户上传文件时，Django将文件数据传递给&lt;em&gt;上传处理程序&lt;/em&gt; -一个处理文件数据&lt;em&gt;上传&lt;/em&gt;的小型类。上载处理程序最初是在&lt;a href=&quot;../../ref/settings#std:setting-FILE_UPLOAD_HANDLERS&quot;&gt; &lt;code&gt;FILE_UPLOAD_HANDLERS&lt;/code&gt; &lt;/a&gt;设置中定义的，默认设置为：</target>
        </trans-unit>
        <trans-unit id="f7b1b5a53701b93325e4815678f8a0bd8b0e9368" translate="yes" xml:space="preserve">
          <source>When a view returns a &lt;a href=&quot;../../ref/request-response#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt;, reading the contents of the response will often execute code to generate the content. Since the view has already returned, such code runs outside of the transaction.</source>
          <target state="translated">当视图返回&lt;a href=&quot;../../ref/request-response#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; 时&lt;/a&gt;，读取响应的内容通常会执行代码以生成内容。由于视图已经返回，因此此类代码在事务外部运行。</target>
        </trans-unit>
        <trans-unit id="a7e6eed462fa73c861b891a675a87e3b8f1cb7d1" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; is deployed, the views provided by that site are accessible using Django&amp;rsquo;s &lt;a href=&quot;../../../topics/http/urls#naming-url-patterns&quot;&gt;URL reversing system&lt;/a&gt;.</source>
          <target state="translated">当&lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; &lt;/a&gt;部署，由该网站提供的意见是使用Django的访问&lt;a href=&quot;../../../topics/http/urls#naming-url-patterns&quot;&gt;URL倒车系统&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="82d50837bd9a76898a9d01512daa0b09a723a71f" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;annotate()&lt;/code&gt; clause is applied to a query, the annotation is computed over the state of the query up to the point where the annotation is requested. The practical implication of this is that &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;annotate()&lt;/code&gt; are not commutative operations.</source>
          <target state="translated">当将 &lt;code&gt;annotate()&lt;/code&gt; 子句应用于查询时，将在查询的状态直至请求注释的位置计算注释。实际的含义是 &lt;code&gt;filter()&lt;/code&gt; 和 &lt;code&gt;annotate()&lt;/code&gt; 不是交换操作。</target>
        </trans-unit>
        <trans-unit id="c0066b9a86902f532f6c5122ba7a98655416b06b" translate="yes" xml:space="preserve">
          <source>When an English variant is activated and English strings are missing, the fallback language will not be the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; of the project, but the original strings. For example, an English user visiting a site with &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; set to Spanish and original strings written in Russian will see Russian text rather than Spanish.</source>
          <target state="translated">激活英语变体并且缺少英语字符串时，后备语言将不是项目的&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; &lt;/a&gt;，而是原始字符串。例如，一个英语用户访问的网站将&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; &lt;/a&gt;设置为西班牙语，并且用俄语编写的原始字符串将显示俄语文本，而不是西班牙语。</target>
        </trans-unit>
        <trans-unit id="02b193dcf2b9af6d2fe916861664208e5e18d31e" translate="yes" xml:space="preserve">
          <source>When an abstract base class is created, Django makes any &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; inner class you declared in the base class available as an attribute. If a child class does not declare its own &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class, it will inherit the parent&amp;rsquo;s &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;. If the child wants to extend the parent&amp;rsquo;s &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class, it can subclass it. For example:</source>
          <target state="translated">创建抽象基类后，Django 会将您在基类中声明的任何&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;内部类用作属性。如果子类没有声明自己的&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;类，它将继承父类的&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;。如果孩子想扩展父母的&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;类，则可以对其进行子类化。例如：</target>
        </trans-unit>
        <trans-unit id="7d9702c943a452b9984773add9ad412003ffb037" translate="yes" xml:space="preserve">
          <source>When an object referenced by a &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; is deleted, Django will emulate the behavior of the SQL constraint specified by the &lt;a href=&quot;#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; argument. For example, if you have a nullable &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; and you want it to be set null when the referenced object is deleted:</source>
          <target state="translated">删除由&lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;引用的对象时，Django将模拟&lt;a href=&quot;#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt;参数指定的SQL约束的行为。例如，如果您有一个可为空的&lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; ,&lt;/a&gt;并且希望在删除引用的对象时将其设置为null：</target>
        </trans-unit>
        <trans-unit id="6d43cc5a53dee15e460ec423c1ca686e65544d6d" translate="yes" xml:space="preserve">
          <source>When auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter to each variable.</source>
          <target state="translated">当自动转义有效时，在将结果放入输出之前（但在应用任何过滤器之后），所有变量内容均已应用HTML转义。这等效于将&lt;a href=&quot;#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;过滤器手动应用于每个变量。</target>
        </trans-unit>
        <trans-unit id="cccc6b2743259572ce842852541189590bc10664" translate="yes" xml:space="preserve">
          <source>When autocommit is enabled, savepoints don&amp;rsquo;t make sense. When it&amp;rsquo;s disabled, &lt;a href=&quot;https://docs.python.org/3/library/sqlite3.html#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; commits implicitly before savepoint statements. (In fact, it commits before any statement other than &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; and &lt;code&gt;REPLACE&lt;/code&gt;.) This bug has two consequences:</source>
          <target state="translated">启用自动提交后，保存点就没有意义了。禁用后，&lt;a href=&quot;https://docs.python.org/3/library/sqlite3.html#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;在保存点语句之前隐式提交。（实际上，它在 &lt;code&gt;SELECT&lt;/code&gt; ， &lt;code&gt;INSERT&lt;/code&gt; ， &lt;code&gt;UPDATE&lt;/code&gt; ， &lt;code&gt;DELETE&lt;/code&gt; 和 &lt;code&gt;REPLACE&lt;/code&gt; 以外的任何语句之前提交。）此错误有两个后果：</target>
        </trans-unit>
        <trans-unit id="675cccfe8fa1bab73852683e00d7c4ad0534907c" translate="yes" xml:space="preserve">
          <source>When called without the &lt;code&gt;import_path&lt;/code&gt; parameter &lt;code&gt;get_storage_class&lt;/code&gt; will return the current default storage system as defined by &lt;a href=&quot;../settings#std:setting-DEFAULT_FILE_STORAGE&quot;&gt;&lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;import_path&lt;/code&gt; is provided, &lt;code&gt;get_storage_class&lt;/code&gt; will attempt to import the class or module from the given path and will return it if successful. An exception will be raised if the import is unsuccessful.</source>
          <target state="translated">当被称为没有 &lt;code&gt;import_path&lt;/code&gt; 参数 &lt;code&gt;get_storage_class&lt;/code&gt; 将返回当前的默认存储系统所界定&lt;a href=&quot;../settings#std:setting-DEFAULT_FILE_STORAGE&quot;&gt; &lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; &lt;/a&gt;。如果 &lt;code&gt;import_path&lt;/code&gt; 提供， &lt;code&gt;get_storage_class&lt;/code&gt; 将尝试从给定路径导入类或模块，如果成功将返回。如果导入不成功，将引发异常。</target>
        </trans-unit>
        <trans-unit id="2f0f632ea59f942f5eade1f689ffb654226e223b" translate="yes" xml:space="preserve">
          <source>When called, callbacks will be passed a single argument &amp;ndash; the rendered &lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt;&lt;code&gt;SimpleTemplateResponse&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">调用时，回调将传递一个参数-呈现的&lt;a href=&quot;#django.template.response.SimpleTemplateResponse&quot;&gt; &lt;code&gt;SimpleTemplateResponse&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="7fd45e0758569c65bbba8e1860deb79a579af464" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; for instances with deferred fields, only the loaded fields will be saved. See &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">当为具有延迟字段的实例调用&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; 时&lt;/a&gt;，将仅保存已加载的字段。有关更多详细信息，请参见&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bda759db08ff8c0e87bc3825b809b30fe8d238af" translate="yes" xml:space="preserve">
          <source>When choosing a name for your package, check resources like PyPI to avoid naming conflicts with existing packages. It&amp;rsquo;s often useful to prepend &lt;code&gt;django-&lt;/code&gt; to your module name when creating a package to distribute. This helps others looking for Django apps identify your app as Django specific.</source>
          <target state="translated">为软件包选择名称时，请检查PyPI等资源，以避免与现有软件包命名冲突。创建要分发的程序包时，在模块名前加上 &lt;code&gt;django-&lt;/code&gt; 通常非常有用。这有助于寻找Django应用的其他人将您的应用识别为特定于Django的应用。</target>
        </trans-unit>
        <trans-unit id="4c89f0ebd4bab6531ff03034464d7b1e1dff9d44" translate="yes" xml:space="preserve">
          <source>When combining multiple field types, Django can only determine the &lt;code&gt;output_field&lt;/code&gt; if all fields are of the same type. Otherwise, you must provide the &lt;code&gt;output_field&lt;/code&gt; yourself.</source>
          <target state="translated">当组合多个字段类型时，Django只有在所有字段都属于同一类型时才能确定 &lt;code&gt;output_field&lt;/code&gt; 。否则，您必须自己提供 &lt;code&gt;output_field&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0bfee5d0d97832a6a69ff41a9efdb8902e02017" translate="yes" xml:space="preserve">
          <source>When compiling a query, Django first looks for &lt;code&gt;as_%s % connection.vendor&lt;/code&gt; methods, and then falls back to &lt;code&gt;as_sql&lt;/code&gt;. The vendor names for the in-built backends are &lt;code&gt;sqlite&lt;/code&gt;, &lt;code&gt;postgresql&lt;/code&gt;, &lt;code&gt;oracle&lt;/code&gt; and &lt;code&gt;mysql&lt;/code&gt;.</source>
          <target state="translated">编译查询时，Django首先查找 &lt;code&gt;as_%s % connection.vendor&lt;/code&gt; 方法，然后回 &lt;code&gt;as_sql&lt;/code&gt; 。内置后端的供应商名称为 &lt;code&gt;sqlite&lt;/code&gt; ， &lt;code&gt;postgresql&lt;/code&gt; ， &lt;code&gt;oracle&lt;/code&gt; 和 &lt;code&gt;mysql&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f39ae5cdee8e6b07f7e1a6980c0f609502856e4d" translate="yes" xml:space="preserve">
          <source>When connecting to other database backends, such as MariaDB, MySQL, Oracle, or PostgreSQL, additional connection parameters will be required. See the &lt;a href=&quot;#std:setting-DATABASE-ENGINE&quot;&gt;&lt;code&gt;ENGINE&lt;/code&gt;&lt;/a&gt; setting below on how to specify other database types. This example is for PostgreSQL:</source>
          <target state="translated">当连接到其他数据库后端（例如MariaDB，MySQL，Oracle或PostgreSQL）时，将需要其他连接参数。有关如何指定其他数据库类型，请参见下面的&lt;a href=&quot;#std:setting-DATABASE-ENGINE&quot;&gt; &lt;code&gt;ENGINE&lt;/code&gt; &lt;/a&gt;设置。此示例适用于PostgreSQL：</target>
        </trans-unit>
        <trans-unit id="1c481af2084277b5e5da4bf5edff2e79752a100e" translate="yes" xml:space="preserve">
          <source>When connecting to signals sent by the user model, you should specify the custom model using the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting. For example:</source>
          <target state="translated">连接到用户模型发送的信号时，应使用&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;设置指定自定义模型。例如：</target>
        </trans-unit>
        <trans-unit id="e91cb5e7e921bf302395449394c4441d41270b44" translate="yes" xml:space="preserve">
          <source>When constructing an instance of an &lt;code&gt;AdminSite&lt;/code&gt;, you can provide a unique instance name using the &lt;code&gt;name&lt;/code&gt; argument to the constructor. This instance name is used to identify the instance, especially when &lt;a href=&quot;#admin-reverse-urls&quot;&gt;reversing admin URLs&lt;/a&gt;. If no instance name is provided, a default instance name of &lt;code&gt;admin&lt;/code&gt; will be used. See &lt;a href=&quot;#customizing-adminsite&quot;&gt;Customizing the AdminSite class&lt;/a&gt; for an example of customizing the &lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">构造 &lt;code&gt;AdminSite&lt;/code&gt; 的实例时，可以使用构造函数的 &lt;code&gt;name&lt;/code&gt; 参数提供唯一的实例名称。该实例名称用于标识实例，尤其是在&lt;a href=&quot;#admin-reverse-urls&quot;&gt;反转管理URL时&lt;/a&gt;。如果未提供实例名称，则将使用默认实例名称 &lt;code&gt;admin&lt;/code&gt; 。有关&lt;a href=&quot;#customizing-adminsite&quot;&gt;自定义AdminSite类&lt;/a&gt;的示例，请参见自定义&lt;a href=&quot;#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; &lt;/a&gt;类。</target>
        </trans-unit>
        <trans-unit id="a36e5b0713f3eb92ed4fab232160ed69eada8f4e" translate="yes" xml:space="preserve">
          <source>When context processors are applied</source>
          <target state="translated">当应用上下文处理器时</target>
        </trans-unit>
        <trans-unit id="e6b434d1741ccb871b17c69cfc35d23b04dad27a" translate="yes" xml:space="preserve">
          <source>When contributing to Django it&amp;rsquo;s very important that your code changes don&amp;rsquo;t introduce bugs into other areas of Django. One way to check that Django still works after you make your changes is by running Django&amp;rsquo;s test suite. If all the tests still pass, then you can be reasonably sure that your changes work and haven&amp;rsquo;t broken other parts Django. If you&amp;rsquo;ve never run Django&amp;rsquo;s test suite before, it&amp;rsquo;s a good idea to run it once beforehand to get familiar with its output.</source>
          <target state="translated">在为Django做出贡献时，非常重要的一点是，您所做的代码更改请勿将错误引入Django的其他区域。进行更改后，检查Django仍然有效的一种方法是运行Django的测试套件。如果所有测试仍然通过，那么您可以合理地确定所做的更改有效并且没有破坏Django的其他部分。如果您以前从未运行过Django的测试套件，则最好事先运行一次以熟悉其输出。</target>
        </trans-unit>
        <trans-unit id="27f5990305cfff13be9f49b3773c0e9320f34bb5" translate="yes" xml:space="preserve">
          <source>When contributing to Django it&amp;rsquo;s very important that your code changes don&amp;rsquo;t introduce bugs into other areas of Django. One way to check that Django still works after you make your changes is by running Django&amp;rsquo;s test suite. If all the tests still pass, then you can be reasonably sure that your changes work and haven&amp;rsquo;t broken other parts of Django. If you&amp;rsquo;ve never run Django&amp;rsquo;s test suite before, it&amp;rsquo;s a good idea to run it once beforehand to get familiar with its output.</source>
          <target state="translated">在为Django做出贡献时，非常重要的一点是，您所做的代码更改请勿将bug引入Django的其他区域。进行更改后，检查Django仍然有效的一种方法是运行Django的测试套件。如果所有测试仍然通过，那么您可以合理地确定所做的更改有效并且没有破坏Django的其他部分。如果您以前从未运行过Django的测试套件，则最好事先运行一次以熟悉其输出。</target>
        </trans-unit>
        <trans-unit id="41cebc45fe86060ffa0347f7c85715435a8081ab" translate="yes" xml:space="preserve">
          <source>When creating a SpatiaLite database, the &lt;code&gt;spatialite&lt;/code&gt; program is required. However, instead of attempting to compile the SpatiaLite tools from source, download the &lt;a href=&quot;https://www.kyngchaos.com/software/frameworks/&quot;&gt;SpatiaLite Tools&lt;/a&gt; package for macOS, and install &lt;code&gt;spatialite&lt;/code&gt; in a location available in your &lt;code&gt;PATH&lt;/code&gt;. For example:</source>
          <target state="translated">当创建一个数据库SpatiaLite的 &lt;code&gt;spatialite&lt;/code&gt; 是必需的程序。然而，而不是试图从源代码编译SpatiaLite工具，下载&lt;a href=&quot;https://www.kyngchaos.com/software/frameworks/&quot;&gt;SpatiaLite工具&lt;/a&gt;包适用于MacOS，并安装 &lt;code&gt;spatialite&lt;/code&gt; 在你可用的位置 &lt;code&gt;PATH&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="f9a84a18f5de7131514373281a4198be304cf839" translate="yes" xml:space="preserve">
          <source>When creating custom message levels you should be careful to avoid overloading existing levels. The values for the built-in levels are:</source>
          <target state="translated">当创建自定义消息级别时,你应该注意避免重载现有级别。内置级别的值是:</target>
        </trans-unit>
        <trans-unit id="80d07743261c17a24bac144259c4216c257fed12" translate="yes" xml:space="preserve">
          <source>When creating objects, where possible, use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt;&lt;code&gt;bulk_create()&lt;/code&gt;&lt;/a&gt; method to reduce the number of SQL queries. For example:</source>
          <target state="translated">创建对象时，请尽可能使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt; &lt;code&gt;bulk_create()&lt;/code&gt; &lt;/a&gt;方法减少SQL查询的数量。例如：</target>
        </trans-unit>
        <trans-unit id="10add64e768175da214899669aca285eb32afddc" translate="yes" xml:space="preserve">
          <source>When creating raster models, the raster field will implicitly convert the input into a &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; using lazy-evaluation. The raster field will therefore accept any input that is accepted by the &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">创建栅格模型时，栅格字段将使用惰性求值将输入隐式转换为&lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt;。因此，栅格字段将接受&lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt;构造函数接受的任何输入。</target>
        </trans-unit>
        <trans-unit id="2d7179c6c16598cc452029b58db0a60addb7a726" translate="yes" xml:space="preserve">
          <source>When customizing the templates for the &lt;a href=&quot;#django.contrib.sitemaps.views.index&quot;&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt;&lt;code&gt;sitemap()&lt;/code&gt;&lt;/a&gt; views, you can rely on the following context variables.</source>
          <target state="translated">自定义&lt;a href=&quot;#django.contrib.sitemaps.views.index&quot;&gt; &lt;code&gt;index()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.contrib.sitemaps.views.sitemap&quot;&gt; &lt;code&gt;sitemap()&lt;/code&gt; &lt;/a&gt;视图的模板时，可以依赖以下上下文变量。</target>
        </trans-unit>
        <trans-unit id="5401ed82a14d2c81a841459327ff53e254082021" translate="yes" xml:space="preserve">
          <source>When dealing with views that generate very large responses, you might want to consider using Django&amp;rsquo;s &lt;a href=&quot;../ref/request-response#django.http.StreamingHttpResponse&quot;&gt;&lt;code&gt;StreamingHttpResponse&lt;/code&gt;&lt;/a&gt; instead. For example, by streaming a file that takes a long time to generate you can avoid a load balancer dropping a connection that might have otherwise timed out while the server was generating the response.</source>
          <target state="translated">当处理产生很大响应的视图时，您可能需要考虑使用Django的&lt;a href=&quot;../ref/request-response#django.http.StreamingHttpResponse&quot;&gt; &lt;code&gt;StreamingHttpResponse&lt;/code&gt; &lt;/a&gt;。例如，通过流式传输需要很长时间才能生成的文件，可以避免负载均衡器断开连接，否则该连接可能在服务器生成响应时已超时。</target>
        </trans-unit>
        <trans-unit id="3f2a4fe18202a0cb7c1d27b8727cfa44ae742f2d" translate="yes" xml:space="preserve">
          <source>When defining a many-to-many relationship from a model to itself, using an intermediary model, you &lt;em&gt;must&lt;/em&gt; use &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.symmetrical&quot;&gt;&lt;code&gt;symmetrical=False&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;../../ref/models/fields#manytomany-arguments&quot;&gt;the model field reference&lt;/a&gt;).</source>
          <target state="translated">在使用中介模型定义从模型到自身的多对多关系时，&lt;em&gt;必须&lt;/em&gt;使用&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.symmetrical&quot;&gt; &lt;code&gt;symmetrical=False&lt;/code&gt; &lt;/a&gt;（请参阅&lt;a href=&quot;../../ref/models/fields#manytomany-arguments&quot;&gt;模型字段参考&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2e01b2c34b29f92f171b6918a748b31c9449cffe" translate="yes" xml:space="preserve">
          <source>When deployed with &lt;a href=&quot;#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt;, &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; will check that the HTTP referer header is set to a URL on the same origin (including subdomain and port). Because HTTPS provides additional security, it is imperative to ensure connections use HTTPS where it is available by forwarding insecure connection requests and using HSTS for supported browsers.</source>
          <target state="translated">与&lt;a href=&quot;#security-recommendation-ssl&quot;&gt;HTTPS一起&lt;/a&gt;部署时， &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; 将检查HTTP引用标头是否设置为相同来源（包括子域和端口）上的URL。因为HTTPS提供了额外的安全性，所以必须通过转发不安全的连接请求并对支持的浏览器使用HSTS来确保连接使用HTTPS可用的连接。</target>
        </trans-unit>
        <trans-unit id="30838d4e118bdb2790fbded0355406a25ac5da66" translate="yes" xml:space="preserve">
          <source>When determining the number of objects contained in &lt;code&gt;object_list&lt;/code&gt;, &lt;code&gt;Paginator&lt;/code&gt; will first try calling &lt;code&gt;object_list.count()&lt;/code&gt;. If &lt;code&gt;object_list&lt;/code&gt; has no &lt;code&gt;count()&lt;/code&gt; method, then &lt;code&gt;Paginator&lt;/code&gt; will fall back to using &lt;code&gt;len(object_list)&lt;/code&gt;. This allows objects, such as &lt;code&gt;QuerySet&lt;/code&gt;, to use a more efficient &lt;code&gt;count()&lt;/code&gt; method when available.</source>
          <target state="translated">在确定 &lt;code&gt;object_list&lt;/code&gt; 中包含的对象数时， &lt;code&gt;Paginator&lt;/code&gt; 将首先尝试调用 &lt;code&gt;object_list.count()&lt;/code&gt; 。如果 &lt;code&gt;object_list&lt;/code&gt; 没有 &lt;code&gt;count()&lt;/code&gt; 方法，则 &lt;code&gt;Paginator&lt;/code&gt; 将退回到使用 &lt;code&gt;len(object_list)&lt;/code&gt; 。这允许诸如 &lt;code&gt;QuerySet&lt;/code&gt; 之类的对象在可用时使用更有效的 &lt;code&gt;count()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="8591ac387a52a2898b08328434ec2ae27d24970c" translate="yes" xml:space="preserve">
          <source>When developing a complex query that involves both &lt;code&gt;annotate()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; clauses, pay particular attention to the order in which the clauses are applied to the &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">在开发同时包含 &lt;code&gt;annotate()&lt;/code&gt; 和 &lt;code&gt;filter()&lt;/code&gt; 子句的复杂查询时，请特别注意子句应用于 &lt;code&gt;QuerySet&lt;/code&gt; 的顺序。</target>
        </trans-unit>
        <trans-unit id="db184ffcdc7c4d2d64c33f2b5cccd1427c60b564" translate="yes" xml:space="preserve">
          <source>When distances are calculated with geodetic (angular) coordinates, as is the case with the default WGS84 (4326) SRID, you can set the &lt;code&gt;spheroid&lt;/code&gt; keyword argument to decide if the calculation should be based on a simple sphere (less accurate, less resource-intensive) or on a spheroid (more accurate, more resource-intensive).</source>
          <target state="translated">当使用大地坐标（角）坐标计算距离时（例如默认的WGS84（4326）SRID），您可以设置 &lt;code&gt;spheroid&lt;/code&gt; 关键字参数来决定是否应基于简单的球体（精度较低，资源较少，密集型）或球形（更准确，资源更多）。</target>
        </trans-unit>
        <trans-unit id="acf0a1040f202022ac1e558b1f6898ddcc50fd38" translate="yes" xml:space="preserve">
          <source>When doing spatial queries, GeoDjango automatically transforms geometries if they&amp;rsquo;re in a different coordinate system. In the following example, coordinates will be expressed in &lt;a href=&quot;https://spatialreference.org/ref/epsg/32140/&quot;&gt;EPSG SRID 32140&lt;/a&gt;, a coordinate system specific to south Texas &lt;strong&gt;only&lt;/strong&gt; and in units of &lt;strong&gt;meters&lt;/strong&gt;, not degrees:</source>
          <target state="translated">在进行空间查询时，如果几何位于其他坐标系中，则GeoDjango会自动对其进行转换。在以下示例中，坐标将以&lt;a href=&quot;https://spatialreference.org/ref/epsg/32140/&quot;&gt;EPSG SRID 32140&lt;/a&gt;表示，EPSG SRID 32140 &lt;strong&gt;仅&lt;/strong&gt;是德克萨斯州南部的坐标系，并且以&lt;strong&gt;米&lt;/strong&gt;为单位，而不是度数：</target>
        </trans-unit>
        <trans-unit id="fcf90bbef1b9b8846a55cdad056fa89091005607" translate="yes" xml:space="preserve">
          <source>When enabling HSTS, it&amp;rsquo;s a good idea to first use a small value for testing, for example, &lt;a href=&quot;settings#std:setting-SECURE_HSTS_SECONDS&quot;&gt;&lt;code&gt;SECURE_HSTS_SECONDS = 3600&lt;/code&gt;&lt;/a&gt; for one hour. Each time a Web browser sees the HSTS header from your site, it will refuse to communicate non-securely (using HTTP) with your domain for the given period of time. Once you confirm that all assets are served securely on your site (i.e. HSTS didn&amp;rsquo;t break anything), it&amp;rsquo;s a good idea to increase this value so that infrequent visitors will be protected (31536000 seconds, i.e. 1 year, is common).</source>
          <target state="translated">启用HSTS时，最好先使用一个较小的值进行测试，例如&lt;a href=&quot;settings#std:setting-SECURE_HSTS_SECONDS&quot;&gt; &lt;code&gt;SECURE_HSTS_SECONDS = 3600&lt;/code&gt; &lt;/a&gt;持续一小时。每次Web浏览器从您的站点看到HSTS标头时，在给定的时间段内，它将拒绝与您的域进行非安全通信（使用HTTP）。一旦您确认所有资产都可以安全地在您的站点上安全地服务（即HSTS不会破坏任何东西），最好增加此值，以保护不频繁访问的访客（31536000秒，即1年）。</target>
        </trans-unit>
        <trans-unit id="d223af5ce54c6fb836fe9eef9ac56b6081e73432" translate="yes" xml:space="preserve">
          <source>When exiting an &lt;code&gt;atomic&lt;/code&gt; block, Django looks at whether it&amp;rsquo;s exited normally or with an exception to determine whether to commit or roll back. If you catch and handle exceptions inside an &lt;code&gt;atomic&lt;/code&gt; block, you may hide from Django the fact that a problem has happened. This can result in unexpected behavior.</source>
          <target state="translated">退出 &lt;code&gt;atomic&lt;/code&gt; 块时，Django会查看它是正常退出还是异常退出，以确定是提交还是回退。如果您在一个 &lt;code&gt;atomic&lt;/code&gt; 块内捕获并处理异常，则可以向Django隐藏发生问题的事实。这可能会导致意外的行为。</target>
        </trans-unit>
        <trans-unit id="07b67cc9627c1897ead0d8a3ad29c379697776a3" translate="yes" xml:space="preserve">
          <source>When fields are missing from the form (for example because they have been excluded), these fields will not be set by the &lt;code&gt;save()&lt;/code&gt; method. You can find more information about this restriction, which also holds for regular &lt;code&gt;ModelForms&lt;/code&gt;, in &lt;a href=&quot;#selecting-the-fields-to-use&quot;&gt;Selecting the fields to use&lt;/a&gt;.</source>
          <target state="translated">如果表单中缺少字段（例如，因为已将其排除在外），则 &lt;code&gt;save()&lt;/code&gt; 方法将不会设置这些字段。您可以在&lt;a href=&quot;#selecting-the-fields-to-use&quot;&gt;选择要使用的字段中&lt;/a&gt;找到有关此限制的更多信息，该限制也适用于常规 &lt;code&gt;ModelForms&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f47a73938d9f8c7da11013db8ccf991c51c26bc" translate="yes" xml:space="preserve">
          <source>When filtering, if there is only one lookup name remaining to be resolved, we will look for a &lt;code&gt;Lookup&lt;/code&gt;. If there are multiple names, it will look for a &lt;code&gt;Transform&lt;/code&gt;. In the situation where there is only one name and a &lt;code&gt;Lookup&lt;/code&gt; is not found, we look for a &lt;code&gt;Transform&lt;/code&gt; and then the &lt;code&gt;exact&lt;/code&gt; lookup on that &lt;code&gt;Transform&lt;/code&gt;. All call sequences always end with a &lt;code&gt;Lookup&lt;/code&gt;. To clarify:</source>
          <target state="translated">过滤时，如果只剩下一个要解析的查询名称，我们将寻找一个 &lt;code&gt;Lookup&lt;/code&gt; 。如果有多个名称，它将查找 &lt;code&gt;Transform&lt;/code&gt; 。在只有一个名称且找不到 &lt;code&gt;Lookup&lt;/code&gt; 的情况下，我们先查找一个 &lt;code&gt;Transform&lt;/code&gt; ，然后在该 &lt;code&gt;Transform&lt;/code&gt; 上进行 &lt;code&gt;exact&lt;/code&gt; 查找。所有调用序列始终以 &lt;code&gt;Lookup&lt;/code&gt; 结尾。澄清：</target>
        </trans-unit>
        <trans-unit id="168b469a0307be68165782716e6e007ca2291fc0" translate="yes" xml:space="preserve">
          <source>When fixture files are processed, the data is saved to the database as is. Model defined &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; methods are not called, and any &lt;a href=&quot;signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals will be called with &lt;code&gt;raw=True&lt;/code&gt; since the instance only contains attributes that are local to the model. You may, for example, want to disable handlers that access related fields that aren&amp;rsquo;t present during fixture loading and would otherwise raise an exception:</source>
          <target state="translated">处理夹具文件后，数据将按原样保存到数据库。不会调用模型定义的&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;方法，并且将以 &lt;code&gt;raw=True&lt;/code&gt; 调用任何&lt;a href=&quot;signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt;信号，因为实例仅包含模型本地的属性。例如，您可能想要禁用访问在夹具加载期间不存在的相关字段的处理程序，否则将引发异常：</target>
        </trans-unit>
        <trans-unit id="21f29b0108bff6caa83fb655b3ecdaf9e063e8ae" translate="yes" xml:space="preserve">
          <source>When formatting is enabled, Django can use localized formats when parsing dates, times and numbers in forms. That means it tries different formats for different locales when guessing the format used by the user when inputting data on forms.</source>
          <target state="translated">启用格式化后,Django在解析表单中的日期、时间和数字时可以使用本地化格式。也就是说,当用户在表单中输入数据时,它在猜测用户使用的格式时,会针对不同的地域尝试不同的格式。</target>
        </trans-unit>
        <trans-unit id="4e8b1eb50d54cc332383eec9c627f9f744e3a0b6" translate="yes" xml:space="preserve">
          <source>When generating HTML from templates, there&amp;rsquo;s always a risk that a variable will include characters that affect the resulting HTML. For example, consider this template fragment:</source>
          <target state="translated">从模板生成HTML时，始终存在变量包含影响最终HTML的字符的风险。例如，考虑以下模板片段：</target>
        </trans-unit>
        <trans-unit id="b8e12ab3ef8eb81964a582ce521ab20f4d290d6e" translate="yes" xml:space="preserve">
          <source>When generating the geometry field, treat it as a geometry collection. For example, if this setting is enabled then a &lt;a href=&quot;model-api#django.contrib.gis.db.models.MultiPolygonField&quot;&gt;&lt;code&gt;MultiPolygonField&lt;/code&gt;&lt;/a&gt; will be placed in the generated model rather than &lt;a href=&quot;model-api#django.contrib.gis.db.models.PolygonField&quot;&gt;&lt;code&gt;PolygonField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">生成几何图形字段时，请将其视为几何图形集合。例如，如果启用此设置，则将在生成的模型中放置&lt;a href=&quot;model-api#django.contrib.gis.db.models.MultiPolygonField&quot;&gt; &lt;code&gt;MultiPolygonField&lt;/code&gt; &lt;/a&gt;而不是&lt;a href=&quot;model-api#django.contrib.gis.db.models.PolygonField&quot;&gt; &lt;code&gt;PolygonField&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3ee5d9c70b807f7e856b951e2d0a8f69f1b2a210" translate="yes" xml:space="preserve">
          <source>When given a class, these decorators modify the class directly and return it; they don&amp;rsquo;t create and return a modified copy of it. So if you try to tweak the above examples to assign the return value to a different name than &lt;code&gt;LoginTestCase&lt;/code&gt; or &lt;code&gt;MiddlewareTestCase&lt;/code&gt;, you may be surprised to find that the original test case classes are still equally affected by the decorator. For a given class, &lt;a href=&quot;#django.test.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; is always applied after &lt;a href=&quot;#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当给定一个类时，这些装饰器直接修改该类并返回它。他们不创建并返回其修改后的副本。因此，如果您尝试调整以上示例，以将返回值分配 &lt;code&gt;LoginTestCase&lt;/code&gt; 或 &lt;code&gt;MiddlewareTestCase&lt;/code&gt; 不同的名称，您可能会惊讶地发现原始测试用例类仍然受到装饰器的同等影响。对于给定的类，&lt;a href=&quot;#django.test.modify_settings&quot;&gt; &lt;code&gt;modify_settings()&lt;/code&gt; &lt;/a&gt;始终在&lt;a href=&quot;#django.test.override_settings&quot;&gt; &lt;code&gt;override_settings()&lt;/code&gt; &lt;/a&gt;之后应用。</target>
        </trans-unit>
        <trans-unit id="f898834e6234c818ddb9e17079c4250b400dcd76" translate="yes" xml:space="preserve">
          <source>When given a namespaced URL (e.g. &lt;code&gt;'polls:index'&lt;/code&gt;) to resolve, Django splits the fully qualified name into parts and then tries the following lookup:</source>
          <target state="translated">当给定命名空间的URL（例如 &lt;code&gt;'polls:index'&lt;/code&gt; ）进行解析时，Django将完全限定的名称拆分为多个部分，然后尝试以下查找：</target>
        </trans-unit>
        <trans-unit id="c557758565df392f118d1a6d67a3ecbe6e4c74e8" translate="yes" xml:space="preserve">
          <source>When in autocommit mode and outside of an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block, the function will run immediately, not on commit.</source>
          <target state="translated">在自动提交模式下，在&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;块之外，该函数将立即运行，而不是在提交时运行。</target>
        </trans-unit>
        <trans-unit id="e643c97aaaf745dee53483cffd548b81b20b2ce0" translate="yes" xml:space="preserve">
          <source>When inserting different pairs of objects into &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; or when the custom &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;through&lt;/code&gt;&lt;/a&gt; table is defined, use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt;&lt;code&gt;bulk_create()&lt;/code&gt;&lt;/a&gt; method to reduce the number of SQL queries. For example:</source>
          <target state="translated">将不同的对象对插入&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;或定义自定义&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;through&lt;/code&gt; &lt;/a&gt;表时，请使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt; &lt;code&gt;bulk_create()&lt;/code&gt; &lt;/a&gt;方法减少SQL查询的数量。例如：</target>
        </trans-unit>
        <trans-unit id="faa578905e0cde99e4821dc6e2893a874507c6d1" translate="yes" xml:space="preserve">
          <source>When inserting objects into &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyFields&lt;/code&gt;&lt;/a&gt;, use &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; with multiple objects to reduce the number of SQL queries. For example:</source>
          <target state="translated">将对象插入&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyFields&lt;/code&gt; 时&lt;/a&gt;，将&lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;与多个对象一起使用可减少SQL查询的数量。例如：</target>
        </trans-unit>
        <trans-unit id="9e3d2548d2d0f6c30d3418d31de7d1e55bd04e17" translate="yes" xml:space="preserve">
          <source>When installing Python on Windows, make sure you check the option &amp;ldquo;Add python.exe to Path&amp;rdquo;, so that it is always available on the command line.</source>
          <target state="translated">在Windows上安装Python时，请确保选中&amp;ldquo;将python.exe添加到路径&amp;rdquo;选项，以使其始终在命令行上可用。</target>
        </trans-unit>
        <trans-unit id="107de19ba0dc210be75fd5bab7ce5e18a0052427" translate="yes" xml:space="preserve">
          <source>When installing from source on UNIX and GNU/Linux systems, please follow the installation instructions carefully, and install the libraries in the given order. If using MySQL or Oracle as the spatial database, only GEOS is required.</source>
          <target state="translated">在UNIX和GNU/Linux系统上从源码安装时,请仔细按照安装说明,并按照给定的顺序安装库。如果使用MySQL或Oracle作为空间数据库,则只需要GEOS。</target>
        </trans-unit>
        <trans-unit id="0cb6cf870e8e9a1ccdcbe16722c8d954773b0b69" translate="yes" xml:space="preserve">
          <source>When instantiating an &lt;code&gt;Engine&lt;/code&gt; all arguments must be passed as keyword arguments:</source>
          <target state="translated">实例化 &lt;code&gt;Engine&lt;/code&gt; 时,所有参数都必须作为关键字参数传递：</target>
        </trans-unit>
        <trans-unit id="0815a0ed8bbb0b090f447f1490d9d1620b8258e4" translate="yes" xml:space="preserve">
          <source>When invoking a management command.</source>
          <target state="translated">当调用管理命令时。</target>
        </trans-unit>
        <trans-unit id="795cabcf0b9ec9c90102f5c511b1c5012e5a8949" translate="yes" xml:space="preserve">
          <source>When it&amp;rsquo;s enabled, two users accessing the same content may see dates, times and numbers formatted in different ways, depending on the formats for their current locale.</source>
          <target state="translated">启用该功能后，访问同一内容的两个用户可能会看到日期，时间和数字，格式不同，具体取决于其当前语言环境的格式。</target>
        </trans-unit>
        <trans-unit id="bc5cf0ab1fc577c96d9d9ce21bd4922437210de9" translate="yes" xml:space="preserve">
          <source>When iterated, &lt;code&gt;ModelChoiceIterator&lt;/code&gt; yields 2-tuple choices containing &lt;a href=&quot;#django.forms.ModelChoiceIteratorValue&quot;&gt;&lt;code&gt;ModelChoiceIteratorValue&lt;/code&gt;&lt;/a&gt; instances as the first &lt;code&gt;value&lt;/code&gt; element in each choice. &lt;code&gt;ModelChoiceIteratorValue&lt;/code&gt; wraps the choice value whilst maintaining a reference to the source model instance that can be used in custom widget implementations, for example, to add &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*&quot;&gt;data-* attributes&lt;/a&gt; to &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">迭代后， &lt;code&gt;ModelChoiceIterator&lt;/code&gt; 会生成2个元组的选择，其中包含&lt;a href=&quot;#django.forms.ModelChoiceIteratorValue&quot;&gt; &lt;code&gt;ModelChoiceIteratorValue&lt;/code&gt; &lt;/a&gt;实例作为每个选择中的第一个 &lt;code&gt;value&lt;/code&gt; 元素。 &lt;code&gt;ModelChoiceIteratorValue&lt;/code&gt; 包装选择值，同时保留对可在自定义小部件实现中使用的源模型实例的引用，例如，将&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*&quot;&gt;data- *属性&lt;/a&gt;添加到 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="b9999bf655fc678d33ba1fd0ba46531c92a1eb59" translate="yes" xml:space="preserve">
          <source>When loading data, &lt;a href=&quot;#django.db.models.Field.from_db_value&quot;&gt;&lt;code&gt;from_db_value()&lt;/code&gt;&lt;/a&gt; is used:</source>
          <target state="translated">加载数据时，使用&lt;a href=&quot;#django.db.models.Field.from_db_value&quot;&gt; &lt;code&gt;from_db_value()&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="b58436e4c6d75b33bc5ed1c188a3172355b5fac4" translate="yes" xml:space="preserve">
          <source>When looking for which lookups are allowable after the &lt;code&gt;Transform&lt;/code&gt; has been applied, Django uses the &lt;code&gt;output_field&lt;/code&gt; attribute. We didn&amp;rsquo;t need to specify this here as it didn&amp;rsquo;t change, but supposing we were applying &lt;code&gt;AbsoluteValue&lt;/code&gt; to some field which represents a more complex type (for example a point relative to an origin, or a complex number) then we may have wanted to specify that the transform returns a &lt;code&gt;FloatField&lt;/code&gt; type for further lookups. This can be done by adding an &lt;code&gt;output_field&lt;/code&gt; attribute to the transform:</source>
          <target state="translated">在应用了 &lt;code&gt;Transform&lt;/code&gt; 之后寻找允许哪些查找时，Django使用 &lt;code&gt;output_field&lt;/code&gt; 属性。我们不需要在这里指定它，因为它没有改变，但是假设我们将 &lt;code&gt;AbsoluteValue&lt;/code&gt; 应用到表示更复杂类型（例如，相对于原点的点或复杂数字）的某个字段，则可能想要指定转换返回 &lt;code&gt;FloatField&lt;/code&gt; 类型以进行进一步的查找。这可以通过将 &lt;code&gt;output_field&lt;/code&gt; 属性添加到转换中来完成：</target>
        </trans-unit>
        <trans-unit id="4392f60737f8c65db01e29f3b7c42b4677c2c3bc" translate="yes" xml:space="preserve">
          <source>When looping over the checkboxes, the &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt; tags include &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; attributes, respectively. Each checkbox has an &lt;code&gt;id_for_label&lt;/code&gt; attribute to output the element&amp;rsquo;s ID.</source>
          <target state="translated">遍历复选框时， &lt;code&gt;label&lt;/code&gt; 和 &lt;code&gt;input&lt;/code&gt; 标签分别包含 &lt;code&gt;for&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; 属性。每个复选框都有一个 &lt;code&gt;id_for_label&lt;/code&gt; 属性，用于输出元素的ID。</target>
        </trans-unit>
        <trans-unit id="870628b6fbeb1390517e73a74ad3698d31f3659d" translate="yes" xml:space="preserve">
          <source>When looping over the radio buttons, the &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt; tags include &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; attributes, respectively. Each radio button has an &lt;code&gt;id_for_label&lt;/code&gt; attribute to output the element&amp;rsquo;s ID.</source>
          <target state="translated">在单选按钮上循环时， &lt;code&gt;label&lt;/code&gt; 和 &lt;code&gt;input&lt;/code&gt; 标签分别包含 &lt;code&gt;for&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; 属性。每个单选按钮都有一个 &lt;code&gt;id_for_label&lt;/code&gt; 属性，用于输出元素的ID。</target>
        </trans-unit>
        <trans-unit id="40d1631cc126c8365afcbb75b7556476d4380faf" translate="yes" xml:space="preserve">
          <source>When methods return naive &lt;code&gt;datetime&lt;/code&gt; objects, the effective timezone used will be the current value of &lt;code&gt;os.environ['TZ']&lt;/code&gt;; note that this is usually set from Django&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当方法返回原始 &lt;code&gt;datetime&lt;/code&gt; 对象时，使用的有效时区将是 &lt;code&gt;os.environ['TZ']&lt;/code&gt; 的当前值；请注意，这通常是从Django的&lt;a href=&quot;../settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt;设置的。</target>
        </trans-unit>
        <trans-unit id="0e5fe2b100ff5188a0a5930e25fbe9122ecb9a42" translate="yes" xml:space="preserve">
          <source>When naming URL patterns, choose names that are unlikely to clash with other applications&amp;rsquo; choice of names. If you call your URL pattern &lt;code&gt;comment&lt;/code&gt; and another application does the same thing, the URL that &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; finds depends on whichever pattern is last in your project&amp;rsquo;s &lt;code&gt;urlpatterns&lt;/code&gt; list.</source>
          <target state="translated">在命名URL模式时，请选择不太可能与其他应用程序的名称冲突的名称。如果调用URL模式 &lt;code&gt;comment&lt;/code&gt; 而另一个应用程序执行相同的操作，则&lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt;找到的URL 取决于项目的 &lt;code&gt;urlpatterns&lt;/code&gt; 列表中的最后一个模式。</target>
        </trans-unit>
        <trans-unit id="06033c285fc959f0b03642505215cc4952f049c4" translate="yes" xml:space="preserve">
          <source>When nesting &lt;code&gt;ArrayField&lt;/code&gt;, whether you use the &lt;code&gt;size&lt;/code&gt; parameter or not, PostgreSQL requires that the arrays are rectangular:</source>
          <target state="translated">当嵌套 &lt;code&gt;ArrayField&lt;/code&gt; 时，无论是否使用 &lt;code&gt;size&lt;/code&gt; 参数，PostgreSQL都要求数组是矩形的：</target>
        </trans-unit>
        <trans-unit id="7eb30f96869e1d16507b694cc7eab76d349dc579" translate="yes" xml:space="preserve">
          <source>When overriding &lt;a href=&quot;#django.contrib.admin.ModelAdmin.save_model&quot;&gt;&lt;code&gt;ModelAdmin.save_model()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.admin.ModelAdmin.delete_model&quot;&gt;&lt;code&gt;ModelAdmin.delete_model()&lt;/code&gt;&lt;/a&gt;, your code must save/delete the object. They aren&amp;rsquo;t meant for veto purposes, rather they allow you to perform extra operations.</source>
          <target state="translated">覆盖&lt;a href=&quot;#django.contrib.admin.ModelAdmin.save_model&quot;&gt; &lt;code&gt;ModelAdmin.save_model()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.contrib.admin.ModelAdmin.delete_model&quot;&gt; &lt;code&gt;ModelAdmin.delete_model()&lt;/code&gt; 时&lt;/a&gt;，您的代码必须保存/删除对象。它们并不是出于否决目的，而是允许您执行额外的操作。</target>
        </trans-unit>
        <trans-unit id="dd8d28225a4e8254dd7eeefe85e1d12fda404710" translate="yes" xml:space="preserve">
          <source>When overriding methods on &lt;code&gt;InlineFormSet&lt;/code&gt;, you should subclass &lt;a href=&quot;#django.forms.models.BaseInlineFormSet&quot;&gt;&lt;code&gt;BaseInlineFormSet&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;#django.forms.models.BaseModelFormSet&quot;&gt;&lt;code&gt;BaseModelFormSet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在 &lt;code&gt;InlineFormSet&lt;/code&gt; 上重写方法时，应子类化&lt;a href=&quot;#django.forms.models.BaseInlineFormSet&quot;&gt; &lt;code&gt;BaseInlineFormSet&lt;/code&gt; &lt;/a&gt;而不是&lt;a href=&quot;#django.forms.models.BaseModelFormSet&quot;&gt; &lt;code&gt;BaseModelFormSet&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd49030b94b8233bc17c651f028b779552c6de15" translate="yes" xml:space="preserve">
          <source>When overriding settings, make sure to handle the cases in which your app&amp;rsquo;s code uses a cache or similar feature that retains state even if the setting is changed. Django provides the &lt;a href=&quot;../../ref/signals#django.test.signals.setting_changed&quot;&gt;&lt;code&gt;django.test.signals.setting_changed&lt;/code&gt;&lt;/a&gt; signal that lets you register callbacks to clean up and otherwise reset state when settings are changed.</source>
          <target state="translated">覆盖设置时，请确保处理您的应用代码使用即使保留设置更改也能保持状态的缓存或类似功能的情况。Django提供了&lt;a href=&quot;../../ref/signals#django.test.signals.setting_changed&quot;&gt; &lt;code&gt;django.test.signals.setting_changed&lt;/code&gt; &lt;/a&gt;信号，该信号使您可以注册回调以进行清理，或者在更改设置时重置状态。</target>
        </trans-unit>
        <trans-unit id="b5a667c4fe16280d0b8e4644f4bd5226d5d8911c" translate="yes" xml:space="preserve">
          <source>When performing a query on a string type, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. If your table contains the values &lt;code&gt;'abc'&lt;/code&gt;, &lt;code&gt;'def'&lt;/code&gt; and you query for &lt;code&gt;WHERE mycolumn=0&lt;/code&gt;, both rows will match. Similarly, &lt;code&gt;WHERE mycolumn=1&lt;/code&gt; will match the value &lt;code&gt;'abc1'&lt;/code&gt;. Therefore, string type fields included in Django will always cast the value to a string before using it in a query.</source>
          <target state="translated">当对字符串类型执行查询但使用整数值时，MySQL将在执行比较之前将表中所有值的类型强制为整数。如果您的表包含值 &lt;code&gt;'abc'&lt;/code&gt; 和 &lt;code&gt;'def'&lt;/code&gt; ,并且您查询 &lt;code&gt;WHERE mycolumn=0&lt;/code&gt; ，则两行都将匹配。同样， &lt;code&gt;WHERE mycolumn=1&lt;/code&gt; 将匹配值 &lt;code&gt;'abc1'&lt;/code&gt; 。因此，Django中包含的字符串类型字段在将其用于查询之前，始终会将值转换为字符串。</target>
        </trans-unit>
        <trans-unit id="f41484ab1fa1f63afeea48eed18424188496a529" translate="yes" xml:space="preserve">
          <source>When planning your &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass, first give some thought to which existing &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class your new field is most similar to. Can you subclass an existing Django field and save yourself some work? If not, you should subclass the &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class, from which everything is descended.</source>
          <target state="translated">在规划&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;子类时，首先要考虑一下新字段与哪个现有&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;类最相似。您可以继承现有的Django字段并为自己节省一些工作吗？如果不是，则应该对&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;类进行子类化，从该类继承所有内容。</target>
        </trans-unit>
        <trans-unit id="0e31bd6aa0a9ff46edf926454409c0907eb204b0" translate="yes" xml:space="preserve">
          <source>When querying, &lt;a href=&quot;#django.db.models.Field.get_db_prep_value&quot;&gt;&lt;code&gt;get_db_prep_value()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Field.get_prep_value&quot;&gt;&lt;code&gt;get_prep_value()&lt;/code&gt;&lt;/a&gt; are used:</source>
          <target state="translated">查询时，使用&lt;a href=&quot;#django.db.models.Field.get_db_prep_value&quot;&gt; &lt;code&gt;get_db_prep_value()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.db.models.Field.get_prep_value&quot;&gt; &lt;code&gt;get_prep_value()&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="26e36b036eecb34d9295ecbd769f18ca0bffca0a" translate="yes" xml:space="preserve">
          <source>When querying, &lt;code&gt;None&lt;/code&gt; value will always be interpreted as JSON &lt;code&gt;null&lt;/code&gt;. To query for SQL &lt;code&gt;NULL&lt;/code&gt;, use &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-isnull&quot;&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">查询时， &lt;code&gt;None&lt;/code&gt; 值将始终被解释为JSON &lt;code&gt;null&lt;/code&gt; 。要查询SQL &lt;code&gt;NULL&lt;/code&gt; ，请使用&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-isnull&quot;&gt; &lt;code&gt;isnull&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="0188e409f61b51913c9abffaede4af62ec49b3df" translate="yes" xml:space="preserve">
          <source>When reading from &lt;code&gt;stdin&lt;/code&gt;, the &lt;a href=&quot;#cmdoption-loaddata-format&quot;&gt;&lt;code&gt;--format&lt;/code&gt;&lt;/a&gt; option is required to specify the &lt;a href=&quot;../topics/serialization#serialization-formats&quot;&gt;serialization format&lt;/a&gt; of the input (e.g., &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;xml&lt;/code&gt;).</source>
          <target state="translated">从 &lt;code&gt;stdin&lt;/code&gt; 读取时，需要&lt;a href=&quot;#cmdoption-loaddata-format&quot;&gt; &lt;code&gt;--format&lt;/code&gt; &lt;/a&gt;选项来指定输入的&lt;a href=&quot;../topics/serialization#serialization-formats&quot;&gt;序列化格式&lt;/a&gt;（例如 &lt;code&gt;json&lt;/code&gt; 或 &lt;code&gt;xml&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="761e336ae74f9e6660293806ca5fc08783fafd7f" translate="yes" xml:space="preserve">
          <source>When referencing relational fields such as &lt;code&gt;ForeignKey&lt;/code&gt;, &lt;code&gt;F()&lt;/code&gt; returns the primary key value rather than a model instance:</source>
          <target state="translated">当引用诸如 &lt;code&gt;ForeignKey&lt;/code&gt; 的关系字段时， &lt;code&gt;F()&lt;/code&gt; 返回主键值而不是模型实例：</target>
        </trans-unit>
        <trans-unit id="07c490a14291e9e945c2248d2d2d4825be1a6f30" translate="yes" xml:space="preserve">
          <source>When removing different pairs of objects from &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyFields&lt;/code&gt;&lt;/a&gt;, use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; on a &lt;a href=&quot;../../ref/models/querysets#django.db.models.Q&quot;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/a&gt; expression with multiple &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;through&lt;/code&gt;&lt;/a&gt; model instances to reduce the number of SQL queries. For example:</source>
          <target state="translated">当从&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyFields&lt;/code&gt; 中&lt;/a&gt;删除不同的对象对时，对具有多个&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;through&lt;/code&gt; &lt;/a&gt;模型实例的&lt;a href=&quot;../../ref/models/querysets#django.db.models.Q&quot;&gt; &lt;code&gt;Q&lt;/code&gt; &lt;/a&gt;表达式使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;可以减少SQL查询的数量。例如：</target>
        </trans-unit>
        <trans-unit id="eaa83ceed94b004ec32e5382ced54334f70df09e" translate="yes" xml:space="preserve">
          <source>When removing objects from &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyFields&lt;/code&gt;&lt;/a&gt;, use &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; with multiple objects to reduce the number of SQL queries. For example:</source>
          <target state="translated">从&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyFields&lt;/code&gt; 中&lt;/a&gt;删除对象时，对多个对象使用&lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;可以减少SQL查询的数量。例如：</target>
        </trans-unit>
        <trans-unit id="fdb8259bf4312bcc56e6be69aee68359ea8104ec" translate="yes" xml:space="preserve">
          <source>When rendering a template &lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt;, the currently logged-in user, either a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; instance or an &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt; instance, is stored in the template variable &lt;code&gt;{{ user }}&lt;/code&gt;:</source>
          <target state="translated">呈现模板&lt;a href=&quot;../../ref/templates/api#django.template.RequestContext&quot;&gt; &lt;code&gt;RequestContext&lt;/code&gt; 时&lt;/a&gt;，当前登录的用户（&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;实例或&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;AnonymousUser&lt;/code&gt; &lt;/a&gt;实例）存储在模板变量 &lt;code&gt;{{ user }}&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="808d315e00ac7185d287c64ce35e3cc3f5fd0df6" translate="yes" xml:space="preserve">
          <source>When rendering an object in Django, we generally:</source>
          <target state="translated">在Django中渲染一个对象时,我们一般。</target>
        </trans-unit>
        <trans-unit id="856789f04d4c60c3bc73952216dc19bd3b0d46b0" translate="yes" xml:space="preserve">
          <source>When reopening a file, &lt;code&gt;mode&lt;/code&gt; will override whatever mode the file was originally opened with; &lt;code&gt;None&lt;/code&gt; means to reopen with the original mode.</source>
          <target state="translated">重新打开文件时， &lt;code&gt;mode&lt;/code&gt; 将覆盖文件最初使用的任何模式； &lt;code&gt;None&lt;/code&gt; 表示以原始模式重新打开。</target>
        </trans-unit>
        <trans-unit id="6e4af341c64d5e72990d2ecd907647bc3fc5b380" translate="yes" xml:space="preserve">
          <source>When retrieving pages, remember to specify the &lt;em&gt;path&lt;/em&gt; of the URL, not the whole domain. For example, this is correct:</source>
          <target state="translated">检索页面时，请记住指定URL 的&lt;em&gt;路径&lt;/em&gt;，而不是整个域。例如，这是正确的：</target>
        </trans-unit>
        <trans-unit id="d661d163af8ca58b6891ea992f0deb5e6637c5e0" translate="yes" xml:space="preserve">
          <source>When run interactively, this command will prompt for a password for the new superuser account. When run non-interactively, you can provide a password by setting the &lt;a href=&quot;#envvar-DJANGO_SUPERUSER_PASSWORD&quot; id=&quot;index-7&quot;&gt;&lt;code&gt;DJANGO_SUPERUSER_PASSWORD&lt;/code&gt;&lt;/a&gt; environment variable. Otherwise, no password will be set, and the superuser account will not be able to log in until a password has been manually set for it.</source>
          <target state="translated">交互式运行时，此命令将提示输入新超级用户帐户的密码。当非交互式运行时，可以通过设置&lt;a href=&quot;#envvar-DJANGO_SUPERUSER_PASSWORD&quot; id=&quot;index-7&quot;&gt; &lt;code&gt;DJANGO_SUPERUSER_PASSWORD&lt;/code&gt; &lt;/a&gt;环境变量来提供密码。否则，将不会设置密码，并且超级用户帐户将无法登录，除非为此手动设置了密码。</target>
        </trans-unit>
        <trans-unit id="14b32ffa98f1f2260ab494309b3077cd8a2888a3" translate="yes" xml:space="preserve">
          <source>When run interactively, this command will prompt for a password for the new superuser account. When run non-interactively, you can provide a password by setting the &lt;code&gt;DJANGO_SUPERUSER_PASSWORD&lt;/code&gt; environment variable. Otherwise, no password will be set, and the superuser account will not be able to log in until a password has been manually set for it.</source>
          <target state="translated">交互式运行时，此命令将提示输入新超级用户帐户的密码。当以非交互方式运行时，可以通过设置 &lt;code&gt;DJANGO_SUPERUSER_PASSWORD&lt;/code&gt; 环境变量来提供密码。否则，将不会设置密码，并且超级用户帐户将无法登录，除非为此手动设置了密码。</target>
        </trans-unit>
        <trans-unit id="5d20b8654cd731328d005adb0fca0735b38b648e" translate="yes" xml:space="preserve">
          <source>When running &lt;a href=&quot;../ref/django-admin#django-admin-loaddata&quot;&gt;&lt;code&gt;manage.py loaddata&lt;/code&gt;&lt;/a&gt;, you can also specify a path to a fixture file, which overrides searching the usual directories.</source>
          <target state="translated">运行&lt;a href=&quot;../ref/django-admin#django-admin-loaddata&quot;&gt; &lt;code&gt;manage.py loaddata&lt;/code&gt; 时&lt;/a&gt;，您还可以指定夹具文件的路径，该路径将覆盖搜索常规目录。</target>
        </trans-unit>
        <trans-unit id="ff07ba123012975f92e072d09c9476492136d884" translate="yes" xml:space="preserve">
          <source>When running &lt;code&gt;migrate&lt;/code&gt;, an &lt;code&gt;ORA-06552&lt;/code&gt; error may be encountered if certain Oracle keywords are used as the name of a model field or the value of a &lt;code&gt;db_column&lt;/code&gt; option. Django quotes all identifiers used in queries to prevent most such problems, but this error can still occur when an Oracle datatype is used as a column name. In particular, take care to avoid using the names &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;timestamp&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; as a field name.</source>
          <target state="translated">运行 &lt;code&gt;migrate&lt;/code&gt; ，如果将某些Oracle关键字用作模型字段的名称或 &lt;code&gt;db_column&lt;/code&gt; 选项的值，则可能会遇到 &lt;code&gt;ORA-06552&lt;/code&gt; 错误。Django引用所有在查询中使用的标识符以防止大多数此类问题，但是当将Oracle数据类型用作列名时，仍然会发生此错误。特别要注意避免将名称 &lt;code&gt;date&lt;/code&gt; ， &lt;code&gt;timestamp&lt;/code&gt; ， &lt;code&gt;number&lt;/code&gt; 或 &lt;code&gt;float&lt;/code&gt; 用作字段名称。</target>
        </trans-unit>
        <trans-unit id="721ec4a813cff227ffc21e0de2f449d9b7f009ca" translate="yes" xml:space="preserve">
          <source>When running an HTTP server via Django&amp;rsquo;s WSGI support.</source>
          <target state="translated">通过Django的WSGI支持运行HTTP服务器时。</target>
        </trans-unit>
        <trans-unit id="c37f24c30e901c673348f951eb749ccd2b3d1124" translate="yes" xml:space="preserve">
          <source>When running concurrent loads, database transactions from different sessions (say, separate threads handling different requests) may interact with each other. These interactions are affected by each session&amp;rsquo;s &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/innodb-transaction-isolation-levels.html&quot;&gt;transaction isolation level&lt;/a&gt;. You can set a connection&amp;rsquo;s isolation level with an &lt;code&gt;'isolation_level'&lt;/code&gt; entry in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;. Valid values for this entry are the four standard isolation levels:</source>
          <target state="translated">运行并发负载时，来自不同会话的数据库事务（例如，处理不同请求的单独线程）可能会相互影响。这些交互受每个会话的&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/innodb-transaction-isolation-levels.html&quot;&gt;事务隔离级别的影响&lt;/a&gt;。您可以使用&lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; 中&lt;/a&gt;数据库配置的&lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; &lt;/a&gt;部分中的 &lt;code&gt;'isolation_level'&lt;/code&gt; 条目来设置连接的隔离级别。该条目的有效值为四个标准隔离级别：</target>
        </trans-unit>
        <trans-unit id="dc74cc00782a8774ba914051ba14979baef93e0c" translate="yes" xml:space="preserve">
          <source>When running in a mode that does not match the view (e.g. an async view under WSGI, or a traditional sync view under ASGI), Django must emulate the other call style to allow your code to run. This context-switch causes a small performance penalty of around a millisecond.</source>
          <target state="translated">当运行在与视图不匹配的模式下时(例如WSGI下的async视图,或者ASGI下的传统同步视图),Django必须模拟另一种调用风格来允许你的代码运行。这种上下文切换会造成一小部分性能损失,大约一毫秒。</target>
        </trans-unit>
        <trans-unit id="294a23b7523ebacf26bdc672c5ce4ecd9bfa6658" translate="yes" xml:space="preserve">
          <source>When running tests that use actual HTTP requests instead of the built-in testing client (i.e. when using the built-in &lt;a href=&quot;../../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt;&lt;code&gt;LiveServerTestCase&lt;/code&gt;&lt;/a&gt;) the static assets need to be served along the rest of the content so the test environment reproduces the real one as faithfully as possible, but &lt;code&gt;LiveServerTestCase&lt;/code&gt; has only very basic static file-serving functionality: It doesn&amp;rsquo;t know about the finders feature of the &lt;code&gt;staticfiles&lt;/code&gt; application and assumes the static content has already been collected under &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当运行使用实际HTTP请求而不是内置测试客户端的测试时（即，使用内置&lt;a href=&quot;../../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt; &lt;code&gt;LiveServerTestCase&lt;/code&gt; 时&lt;/a&gt;），静态资产需要与其余内容一起使用，以便测试环境如实再现真实的内容。可能，但是 &lt;code&gt;LiveServerTestCase&lt;/code&gt; 仅具有非常基本的静态文件服务功能：它不了解 &lt;code&gt;staticfiles&lt;/code&gt; 应用程序的查找程序功能，并且假定静态内容已在&lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt;下收集。</target>
        </trans-unit>
        <trans-unit id="0ed1aad3a46b86d1700ecfe2911963f054fdf21d" translate="yes" xml:space="preserve">
          <source>When saving a model fetched through deferred model loading (&lt;a href=&quot;querysets#django.db.models.query.QuerySet.only&quot;&gt;&lt;code&gt;only()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;querysets#django.db.models.query.QuerySet.defer&quot;&gt;&lt;code&gt;defer()&lt;/code&gt;&lt;/a&gt;) only the fields loaded from the DB will get updated. In effect there is an automatic &lt;code&gt;update_fields&lt;/code&gt; in this case. If you assign or change any deferred field value, the field will be added to the updated fields.</source>
          <target state="translated">保存通过延迟模型加载（&lt;a href=&quot;querysets#django.db.models.query.QuerySet.only&quot;&gt; &lt;code&gt;only()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;querysets#django.db.models.query.QuerySet.defer&quot;&gt; &lt;code&gt;defer()&lt;/code&gt; &lt;/a&gt;）获取的模型时，只有从数据库加载的字段会被更新。实际上，在这种情况下有一个自动 &lt;code&gt;update_fields&lt;/code&gt; 。如果您分配或更改任何延迟的字段值，则该字段将被添加到更新的字段中。</target>
        </trans-unit>
        <trans-unit id="9ebf387588ca59c2753af79a53e5657c29443130" translate="yes" xml:space="preserve">
          <source>When saving, &lt;a href=&quot;#django.db.models.Field.pre_save&quot;&gt;&lt;code&gt;pre_save()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Field.get_db_prep_save&quot;&gt;&lt;code&gt;get_db_prep_save()&lt;/code&gt;&lt;/a&gt; are used:</source>
          <target state="translated">保存时，使用&lt;a href=&quot;#django.db.models.Field.pre_save&quot;&gt; &lt;code&gt;pre_save()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.db.models.Field.get_db_prep_save&quot;&gt; &lt;code&gt;get_db_prep_save()&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="51eae9a99f047d4352d7ea734c0fc842bd23b0a2" translate="yes" xml:space="preserve">
          <source>When serializing an aware datetime, the UTC offset is included, like this:</source>
          <target state="translated">当序列化一个意识到的日期时间时,会包含UTC偏移量,就像这样。</target>
        </trans-unit>
        <trans-unit id="1ae29d936e6f8d7922fe5d8e1cd4ca8cd697ab5a" translate="yes" xml:space="preserve">
          <source>When sessions are saved</source>
          <target state="translated">保存会话时</target>
        </trans-unit>
        <trans-unit id="2579bd13450f0403c4a936cf5de7ad85fdd2d2d7" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;False&lt;/code&gt;, migrations won&amp;rsquo;t run when creating the test database. This is similar to setting &lt;code&gt;None&lt;/code&gt; as a value in &lt;a href=&quot;#std:setting-MIGRATION_MODULES&quot;&gt;&lt;code&gt;MIGRATION_MODULES&lt;/code&gt;&lt;/a&gt;, but for all apps.</source>
          <target state="translated">如果设置为 &lt;code&gt;False&lt;/code&gt; ，则在创建测试数据库时不会运行迁移。这类似于在&lt;a href=&quot;#std:setting-MIGRATION_MODULES&quot;&gt; &lt;code&gt;MIGRATION_MODULES&lt;/code&gt; &lt;/a&gt;中将 &lt;code&gt;None&lt;/code&gt; 设置为值，但对于所有应用程序。</target>
        </trans-unit>
        <trans-unit id="752f427eacd231b342cb2bd792e22d3bfb22b4c0" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;False&lt;/code&gt;, the &lt;a href=&quot;#django.forms.Field.required&quot;&gt;&lt;code&gt;Field.required&lt;/code&gt;&lt;/a&gt; attribute can be set to &lt;code&gt;False&lt;/code&gt; for individual fields to make them optional. If no value is supplied for a required field, an &lt;code&gt;incomplete&lt;/code&gt; validation error will be raised.</source>
          <target state="translated">当设置为 &lt;code&gt;False&lt;/code&gt; 时，可以将单个字段的&lt;a href=&quot;#django.forms.Field.required&quot;&gt; &lt;code&gt;Field.required&lt;/code&gt; &lt;/a&gt;属性设置为 &lt;code&gt;False&lt;/code&gt; ，以使其成为可选字段。如果没有为必填字段提供任何值，则将引发 &lt;code&gt;incomplete&lt;/code&gt; 验证错误。</target>
        </trans-unit>
        <trans-unit id="027d0a97bdc9c261a0c19725496fd3cb2bf2cc9c" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;True&lt;/code&gt; (the default), required form fields will have the &lt;code&gt;required&lt;/code&gt; HTML attribute.</source>
          <target state="translated">设置为 &lt;code&gt;True&lt;/code&gt; （默认值）时，必需的表单字段将具有 &lt;code&gt;required&lt;/code&gt; HTML属性。</target>
        </trans-unit>
        <trans-unit id="c0d4e85359911049c1658d23dab7c3fa4d7ab4e7" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;True&lt;/code&gt;, if the request URL does not match any of the patterns in the URLconf and it doesn&amp;rsquo;t end in a slash, an HTTP redirect is issued to the same URL with a slash appended. Note that the redirect may cause any data submitted in a POST request to be lost.</source>
          <target state="translated">设置为 &lt;code&gt;True&lt;/code&gt; 时，如果请求URL与URLconf中的任何模式都不匹配，并且不以斜杠结尾，则将HTTP重定向发送到同一URL，并附加斜杠。请注意，重定向可能会导致POST请求中提交的所有数据丢失。</target>
        </trans-unit>
        <trans-unit id="0bfabba073780370d551059c2da67193915c5482" translate="yes" xml:space="preserve">
          <source>When set, the given fields will use a bit of JavaScript to populate from the fields assigned. The main use for this functionality is to automatically generate the value for &lt;code&gt;SlugField&lt;/code&gt; fields from one or more other fields. The generated value is produced by concatenating the values of the source fields, and then by transforming that result into a valid slug (e.g. substituting dashes for spaces; lowercasing ASCII letters; and removing various English stop words such as &amp;lsquo;a&amp;rsquo;, &amp;lsquo;an&amp;rsquo;, &amp;lsquo;as&amp;rsquo;, and similar).</source>
          <target state="translated">设置后，给定的字段将使用一些JavaScript从分配的字段中进行填充。此功能的主要用途是从一个或多个其他字段自动生成 &lt;code&gt;SlugField&lt;/code&gt; 字段的值。生成的值是通过将源字段的值连接起来，然后将结果转换为有效的子段（例如，用短划线代替空格；将ASCII字母换成小写；并删除各种英语停用词，如&amp;ldquo; a&amp;rdquo;，&amp;ldquo; an&amp;rdquo;）来产生的，&amp;ldquo; as&amp;rdquo;等）。</target>
        </trans-unit>
        <trans-unit id="be91e3ffcfb24067cff74a1c958f1030cc764fe6" translate="yes" xml:space="preserve">
          <source>When several applications provide different versions of the same resource (template, static file, management command, translation), the application listed first in &lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; has precedence.</source>
          <target state="translated">当多个应用程序提供同一资源的不同版本（模板，静态文件，管理命令，转换）时，在&lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;中首先列出的应用程序具有优先权。</target>
        </trans-unit>
        <trans-unit id="6347796946aeeedc17b3c2eefd2a1f8bc226dcdf" translate="yes" xml:space="preserve">
          <source>When somebody does a search in the admin search box, Django splits the search query into words and returns all objects that contain each of the words, case-insensitive (using the &lt;a href=&quot;../../models/querysets#std:fieldlookup-icontains&quot;&gt;&lt;code&gt;icontains&lt;/code&gt;&lt;/a&gt; lookup), where each word must be in at least one of &lt;code&gt;search_fields&lt;/code&gt;. For example, if &lt;code&gt;search_fields&lt;/code&gt; is set to &lt;code&gt;['first_name', 'last_name']&lt;/code&gt; and a user searches for &lt;code&gt;john lennon&lt;/code&gt;, Django will do the equivalent of this SQL &lt;code&gt;WHERE&lt;/code&gt; clause:</source>
          <target state="translated">当有人在admin搜索框中进行搜索时，Django会将搜索查询分为多个单词，并返回包含每个单词的所有对象，不区分大小写（使用&lt;a href=&quot;../../models/querysets#std:fieldlookup-icontains&quot;&gt; &lt;code&gt;icontains&lt;/code&gt; &lt;/a&gt;查找），其中每个单词必须至少在 &lt;code&gt;search_fields&lt;/code&gt; 中。例如，如果将 &lt;code&gt;search_fields&lt;/code&gt; 设置为 &lt;code&gt;['first_name', 'last_name']&lt;/code&gt; 并且用户搜索 &lt;code&gt;john lennon&lt;/code&gt; ，则Django将执行以下SQL &lt;code&gt;WHERE&lt;/code&gt; 子句：</target>
        </trans-unit>
        <trans-unit id="28da51b25107551649a5bee0b6ab20428b15fc11" translate="yes" xml:space="preserve">
          <source>When somebody requests a page from your website &amp;ndash; say, &amp;ldquo;/polls/34/&amp;rdquo;, Django will load the &lt;code&gt;mysite.urls&lt;/code&gt; Python module because it&amp;rsquo;s pointed to by the &lt;a href=&quot;../ref/settings#std:setting-ROOT_URLCONF&quot;&gt;&lt;code&gt;ROOT_URLCONF&lt;/code&gt;&lt;/a&gt; setting. It finds the variable named &lt;code&gt;urlpatterns&lt;/code&gt; and traverses the patterns in order. After finding the match at &lt;code&gt;'polls/'&lt;/code&gt;, it strips off the matching text (&lt;code&gt;&quot;polls/&quot;&lt;/code&gt;) and sends the remaining text &amp;ndash; &lt;code&gt;&quot;34/&quot;&lt;/code&gt; &amp;ndash; to the &amp;lsquo;polls.urls&amp;rsquo; URLconf for further processing. There it matches &lt;code&gt;'&amp;lt;int:question_id&amp;gt;/'&lt;/code&gt;, resulting in a call to the &lt;code&gt;detail()&lt;/code&gt; view like so:</source>
          <target state="translated">当有人从您的网站请求页面时（例如&amp;ldquo; / polls / 34 /&amp;rdquo;），Django将加载 &lt;code&gt;mysite.urls&lt;/code&gt; Python模块，因为它由&lt;a href=&quot;../ref/settings#std:setting-ROOT_URLCONF&quot;&gt; &lt;code&gt;ROOT_URLCONF&lt;/code&gt; &lt;/a&gt;设置指向。它找到名为 &lt;code&gt;urlpatterns&lt;/code&gt; 的变量，并按顺序遍历模式。在 &lt;code&gt;'polls/'&lt;/code&gt; 找到匹配项后，它将剥离匹配的文本（ &lt;code&gt;&quot;polls/&quot;&lt;/code&gt; ），并将其余的文本 &lt;code&gt;&quot;34/&quot;&lt;/code&gt; 发送到'polls.urls'URLconf进行进一步处理。在那里，它匹配 &lt;code&gt;'&amp;lt;int:question_id&amp;gt;/'&lt;/code&gt; ，从而导致对 &lt;code&gt;detail()&lt;/code&gt; 视图的调用，如下所示：</target>
        </trans-unit>
        <trans-unit id="057dcfb3428d9a5609848b8e3067fdd04d1f11d4" translate="yes" xml:space="preserve">
          <source>When specifying &lt;code&gt;db_index=True&lt;/code&gt; on your model fields, Django typically outputs a single &lt;code&gt;CREATE INDEX&lt;/code&gt; statement. However, if the database type for the field is either &lt;code&gt;varchar&lt;/code&gt; or &lt;code&gt;text&lt;/code&gt; (e.g., used by &lt;code&gt;CharField&lt;/code&gt;, &lt;code&gt;FileField&lt;/code&gt;, and &lt;code&gt;TextField&lt;/code&gt;), then Django will create an additional index that uses an appropriate &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-opclass.html&quot;&gt;PostgreSQL operator class&lt;/a&gt; for the column. The extra index is necessary to correctly perform lookups that use the &lt;code&gt;LIKE&lt;/code&gt; operator in their SQL, as is done with the &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;startswith&lt;/code&gt; lookup types.</source>
          <target state="translated">在模型字段上指定 &lt;code&gt;db_index=True&lt;/code&gt; 时，Django通常输出单个 &lt;code&gt;CREATE INDEX&lt;/code&gt; 语句。但是，如果该字段的数据库类型是 &lt;code&gt;varchar&lt;/code&gt; 或 &lt;code&gt;text&lt;/code&gt; （例如，由 &lt;code&gt;CharField&lt;/code&gt; ， &lt;code&gt;FileField&lt;/code&gt; 和 &lt;code&gt;TextField&lt;/code&gt; 使用），则Django将创建一个额外的索引，该索引为该列使用适当的&lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-opclass.html&quot;&gt;PostgreSQL运算符类&lt;/a&gt;。额外的索引对于正确执行在SQL 中使用 &lt;code&gt;LIKE&lt;/code&gt; 运算符的查找是必要的，就像 &lt;code&gt;contains&lt;/code&gt; 和 &lt;code&gt;startswith&lt;/code&gt; 查找类型一样。</target>
        </trans-unit>
        <trans-unit id="93c379fecdc5d0472c214382feae8f30b77b6e64" translate="yes" xml:space="preserve">
          <source>When specifying a custom form class, you must still specify the model, even though the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt;&lt;code&gt;form_class&lt;/code&gt;&lt;/a&gt; may be a &lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定自定义表单类时，即使&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_class&quot;&gt; &lt;code&gt;form_class&lt;/code&gt; &lt;/a&gt;可以是&lt;a href=&quot;../forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;，也必须指定模型。</target>
        </trans-unit>
        <trans-unit id="d6c5c02fcd017fd78dd6abd243c96f6129e667fb" translate="yes" xml:space="preserve">
          <source>When specifying the field to be aggregated in an aggregate function, Django will allow you to use the same &lt;a href=&quot;queries#field-lookups-intro&quot;&gt;double underscore notation&lt;/a&gt; that is used when referring to related fields in filters. Django will then handle any table joins that are required to retrieve and aggregate the related value.</source>
          <target state="translated">当指定要在聚合函数中聚合的字段时，Django将允许您使用在过滤器中引用相关字段时所使用的相同的&lt;a href=&quot;queries#field-lookups-intro&quot;&gt;双下划线符号&lt;/a&gt;。然后，Django将处理检索和汇总相关值所需的任何表联接。</target>
        </trans-unit>
        <trans-unit id="4285f0a70b9a43cf232f4e43936fd67c82ba521c" translate="yes" xml:space="preserve">
          <source>When staying with the same example data as before it would be serialized as JSON in the following way:</source>
          <target state="translated">当保持与之前相同的示例数据时,它将以以下方式被序列化为JSON。</target>
        </trans-unit>
        <trans-unit id="aa815810926eb615ffa41ef8b1e646f78f102179" translate="yes" xml:space="preserve">
          <source>When support for time zones is enabled, Django stores datetime information in UTC in the database, uses time-zone-aware datetime objects internally, and translates them to the end user&amp;rsquo;s time zone in templates and forms.</source>
          <target state="translated">启用对时区的支持后，Django会将日期时间信息存储在数据库中的UTC中，在内部使用可识别时区的datetime对象，并将其以模板和形式转换为最终用户的时区。</target>
        </trans-unit>
        <trans-unit id="de20bb7951f56b8554f4e028d68ec84b15495470" translate="yes" xml:space="preserve">
          <source>When switching from using &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;re_path()&lt;/code&gt;&lt;/a&gt; or vice versa, it&amp;rsquo;s particularly important to be aware that the type of the view arguments may change, and so you may need to adapt your views.</source>
          <target state="translated">从使用&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt;切换到&lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;re_path()&lt;/code&gt; &lt;/a&gt;或反之亦然时，特别重要的一点是要注意，视图参数的类型可能会更改，因此您可能需要调整视图。</target>
        </trans-unit>
        <trans-unit id="8ed1d9a8327d1fd8ec9e9674e0008132f5b500fe" translate="yes" xml:space="preserve">
          <source>When test parallelization is enabled and a test fails, Django may be unable to display the exception traceback. This can make debugging difficult. If you encounter this problem, run the affected test without parallelization to see the traceback of the failure.</source>
          <target state="translated">当启用测试并行化后,测试失败时,Django可能无法显示异常回溯。这可能会给调试带来困难。如果你遇到这个问题,请在不并行的情况下运行受影响的测试,以查看失败的回溯。</target>
        </trans-unit>
        <trans-unit id="e69d901833901b9fa4f1b39aa662469f37295910" translate="yes" xml:space="preserve">
          <source>When testing applications that support internationalization and localization, you might want to set the language for a test client request. The method for doing so depends on whether or not the &lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt;&lt;code&gt;LocaleMiddleware&lt;/code&gt;&lt;/a&gt; is enabled.</source>
          <target state="translated">在测试支持国际化和本地化的应用程序时，您可能需要为测试客户端请求设置语言。这样做的方法取决于是否启用了&lt;a href=&quot;../../ref/middleware#django.middleware.locale.LocaleMiddleware&quot;&gt; &lt;code&gt;LocaleMiddleware&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d17ab068977042b051a879f6727a9eec3d7e61fd" translate="yes" xml:space="preserve">
          <source>When testing, more is better</source>
          <target state="translated">测试时,多多益善</target>
        </trans-unit>
        <trans-unit id="1297aaa6d3078711f3af30e8a2de30ca3c79003d" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; decorator is nested, it creates a savepoint to allow partial commit or rollback. You&amp;rsquo;re strongly encouraged to use &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; rather than the functions described below, but they&amp;rsquo;re still part of the public API, and there&amp;rsquo;s no plan to deprecate them.</source>
          <target state="translated">当&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;装饰器嵌套时，它将创建一个保存点以允许部分提交或回滚。强烈建议您使用&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;而不是下面描述的函数，但是它们仍然是公共API的一部分，并且没有计划弃用它们。</target>
        </trans-unit>
        <trans-unit id="471e20a4382a873b6e21c286d787cc261af00882" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;../ref/django-admin#cmdoption-migrate-fake-initial&quot;&gt;&lt;code&gt;migrate --fake-initial&lt;/code&gt;&lt;/a&gt; option is used, these initial migrations are treated specially. For an initial migration that creates one or more tables (&lt;code&gt;CreateModel&lt;/code&gt; operation), Django checks that all of those tables already exist in the database and fake-applies the migration if so. Similarly, for an initial migration that adds one or more fields (&lt;code&gt;AddField&lt;/code&gt; operation), Django checks that all of the respective columns already exist in the database and fake-applies the migration if so. Without &lt;code&gt;--fake-initial&lt;/code&gt;, initial migrations are treated no differently from any other migration.</source>
          <target state="translated">使用&lt;a href=&quot;../ref/django-admin#cmdoption-migrate-fake-initial&quot;&gt; &lt;code&gt;migrate --fake-initial&lt;/code&gt; &lt;/a&gt;选项时，将特别对待这些初始迁移。对于创建一个或多个表的初始迁移（ &lt;code&gt;CreateModel&lt;/code&gt; 操作），Django会检查数据库中是否已存在所有这些表，如果是，则对迁移进行假应用。类似地，对于添加一个或多个字段的初始迁移（ &lt;code&gt;AddField&lt;/code&gt; 操作），Django检查数据库中是否已经存在所有相应的列，如果存在，则对迁移进行假应用。如果没有 &lt;code&gt;--fake-initial&lt;/code&gt; ，则初始迁移与任何其他迁移都没有区别。</target>
        </trans-unit>
        <trans-unit id="1ffc45b453571974a359fca6b3599059b3d056ae" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Log in&quot;&amp;gt;&lt;/code&gt; element is triggered, the data is returned to &lt;code&gt;/admin/&lt;/code&gt;.</source>
          <target state="translated">当触发 &lt;code&gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Log in&quot;&amp;gt;&lt;/code&gt; 元素时，数据将返回到 &lt;code&gt;/admin/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c3e46e4242019691fc54404ee906eebca1762446" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Form&lt;/code&gt; is valid, &lt;code&gt;cleaned_data&lt;/code&gt; will include a key and value for &lt;em&gt;all&lt;/em&gt; its fields, even if the data didn&amp;rsquo;t include a value for some optional fields. In this example, the data dictionary doesn&amp;rsquo;t include a value for the &lt;code&gt;nick_name&lt;/code&gt; field, but &lt;code&gt;cleaned_data&lt;/code&gt; includes it, with an empty value:</source>
          <target state="translated">当 &lt;code&gt;Form&lt;/code&gt; 是有效的， &lt;code&gt;cleaned_data&lt;/code&gt; 将包括键和值的&lt;em&gt;所有&lt;/em&gt;的领域，即使数据没有包括一些可选字段的值。在此示例中，数据字典不包含 &lt;code&gt;nick_name&lt;/code&gt; 字段的值，但 &lt;code&gt;cleaned_data&lt;/code&gt; 包含它，且值为空：</target>
        </trans-unit>
        <trans-unit id="4f0388451b2840bd5965e3402e06905ee1e4c8c3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;TemplateResponse&lt;/code&gt; instance is explicitly rendered, using the &lt;a href=&quot;#django.template.response.SimpleTemplateResponse.render&quot;&gt;&lt;code&gt;SimpleTemplateResponse.render()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">当 &lt;code&gt;TemplateResponse&lt;/code&gt; 实例被明确地呈现，使用&lt;a href=&quot;#django.template.response.SimpleTemplateResponse.render&quot;&gt; &lt;code&gt;SimpleTemplateResponse.render()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="beb71bb9ca9e9ddf253bd0db0a5a196f7ababf05" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;fields&lt;/code&gt; parameter is not specified, the &lt;code&gt;geojson&lt;/code&gt; serializer adds a &lt;code&gt;pk&lt;/code&gt; key to the &lt;code&gt;properties&lt;/code&gt; dictionary with the primary key of the object as the value.</source>
          <target state="translated">如果未指定 &lt;code&gt;fields&lt;/code&gt; 参数，则 &lt;code&gt;geojson&lt;/code&gt; 序列化程序将 &lt;code&gt;pk&lt;/code&gt; 键添加到 &lt;code&gt;properties&lt;/code&gt; 字典中，并以对象的主键作为值。</target>
        </trans-unit>
        <trans-unit id="a3fe3a10f08cea3e9caf55f72a5a6be6caac3616" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;raw_password&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, the password will be set to an unusable password, as if &lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt;&lt;code&gt;set_unusable_password()&lt;/code&gt;&lt;/a&gt; were used.</source>
          <target state="translated">当 &lt;code&gt;raw_password&lt;/code&gt; 为 &lt;code&gt;None&lt;/code&gt; 时，密码将设置为无法使用的密码，就像使用了&lt;a href=&quot;#django.contrib.auth.models.User.set_unusable_password&quot;&gt; &lt;code&gt;set_unusable_password()&lt;/code&gt; &lt;/a&gt;一样。</target>
        </trans-unit>
        <trans-unit id="3efe252d05546c2dfb5b54804653e58578f3f43c" translate="yes" xml:space="preserve">
          <source>When the ASGI server loads your application, Django needs to import the settings module &amp;mdash; that&amp;rsquo;s where your entire application is defined.</source>
          <target state="translated">当ASGI服务器加载您的应用程序时，Django需要导入settings模块-定义整个应用程序的位置。</target>
        </trans-unit>
        <trans-unit id="7be5534960f71045451c905d71f45bc9b28f3cc4" translate="yes" xml:space="preserve">
          <source>When the WSGI server loads your application, Django needs to import the settings module &amp;mdash; that&amp;rsquo;s where your entire application is defined.</source>
          <target state="translated">当WSGI服务器加载您的应用程序时，Django需要导入settings模块-这是整个应用程序的定义位置。</target>
        </trans-unit>
        <trans-unit id="bead5079ae32a470110abae674a71028189fd77f" translate="yes" xml:space="preserve">
          <source>When the Web server takes care of authentication it typically sets the &lt;code&gt;REMOTE_USER&lt;/code&gt; environment variable for use in the underlying application. In Django, &lt;code&gt;REMOTE_USER&lt;/code&gt; is made available in the &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.META&quot;&gt;&lt;code&gt;request.META&lt;/code&gt;&lt;/a&gt; attribute. Django can be configured to make use of the &lt;code&gt;REMOTE_USER&lt;/code&gt; value using the &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; or &lt;code&gt;PersistentRemoteUserMiddleware&lt;/code&gt;, and &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; classes found in &lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当Web服务器负责身份验证时，通常会设置 &lt;code&gt;REMOTE_USER&lt;/code&gt; 环境变量以在基础应用程序中使用。在Django中， &lt;code&gt;REMOTE_USER&lt;/code&gt; 在&lt;a href=&quot;../ref/request-response#django.http.HttpRequest.META&quot;&gt; &lt;code&gt;request.META&lt;/code&gt; &lt;/a&gt;属性中可用。可以使用 &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; 或 &lt;code&gt;PersistentRemoteUserMiddleware&lt;/code&gt; 和&lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; 中的&lt;/a&gt;&lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt;类将Django配置为使用 &lt;code&gt;REMOTE_USER&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="34c0a4324cee3a7c1d35122ff488e25d45d3432d" translate="yes" xml:space="preserve">
          <source>When the app template files are rendered with the Django template engine (by default all &lt;code&gt;*.py&lt;/code&gt; files), Django will also replace all stray template variables contained. For example, if one of the Python files contains a docstring explaining a particular feature related to template rendering, it might result in an incorrect example.</source>
          <target state="translated">当使用Django模板引擎渲染应用模板文件（默认情况下，所有 &lt;code&gt;*.py&lt;/code&gt; 文件）时，Django还将替换其中包含的所有杂散模板变量。例如，如果一个Python文件包含一个说明与模板渲染相关的特定功能的文档字符串，则可能会导致示例错误。</target>
        </trans-unit>
        <trans-unit id="4d5358f22e824499ab309dad7569732afa54b760" translate="yes" xml:space="preserve">
          <source>When the client next requests the same resource, it might send along a header such as either &lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-3.3&quot;&gt;If-modified-since&lt;/a&gt; or &lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-3.4&quot;&gt;If-unmodified-since&lt;/a&gt;, containing the date of the last modification time it was sent, or either &lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-3.1&quot;&gt;If-match&lt;/a&gt; or &lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-3.2&quot;&gt;If-none-match&lt;/a&gt;, containing the last &lt;code&gt;ETag&lt;/code&gt; it was sent. If the current version of the page matches the &lt;code&gt;ETag&lt;/code&gt; sent by the client, or if the resource has not been modified, a 304 status code can be sent back, instead of a full response, telling the client that nothing has changed. Depending on the header, if the page has been modified or does not match the &lt;code&gt;ETag&lt;/code&gt; sent by the client, a 412 status code (Precondition Failed) may be returned.</source>
          <target state="translated">当客户端下一个请求相同资源时，它可能会发送标头，例如&lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-3.3&quot;&gt;If-modified-since&lt;/a&gt;或&lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-3.4&quot;&gt;If-unmodified-since&lt;/a&gt;，其中包含发送该消息的上次修改时间的日期，或者是&lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-3.1&quot;&gt;If-match&lt;/a&gt;或&lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-3.2&quot;&gt;If- none-match&lt;/a&gt;，包含发送的最后一个 &lt;code&gt;ETag&lt;/code&gt; 。如果页面的当前版本与客户端发送的 &lt;code&gt;ETag&lt;/code&gt; 匹配，或者资源尚未修改，则可以发送304状态代码（而不是完整的响应），告诉客户端什么都没有更改。根据页眉，如果页面已被修改或与客户端发送的 &lt;code&gt;ETag&lt;/code&gt; 不匹配，则可能会返回412状态代码（前提条件失败）。</target>
        </trans-unit>
        <trans-unit id="cb4da46f797269d9ec98f394a3510ace992fdce6" translate="yes" xml:space="preserve">
          <source>When the client next requests the same resource, it might send along a header such as either &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-3.3&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;If-modified-since&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-3.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;If-unmodified-since&lt;/strong&gt;&lt;/a&gt;, containing the date of the last modification time it was sent, or either &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-3.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;If-match&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-3.2&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;If-none-match&lt;/strong&gt;&lt;/a&gt;, containing the last &lt;code&gt;ETag&lt;/code&gt; it was sent. If the current version of the page matches the &lt;code&gt;ETag&lt;/code&gt; sent by the client, or if the resource has not been modified, a 304 status code can be sent back, instead of a full response, telling the client that nothing has changed. Depending on the header, if the page has been modified or does not match the &lt;code&gt;ETag&lt;/code&gt; sent by the client, a 412 status code (Precondition Failed) may be returned.</source>
          <target state="translated">当客户端下一个请求相同的资源时，它可能会发送标头，例如&lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-3.3&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;If-modified-since&lt;/strong&gt;&lt;/a&gt;或&lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-3.4&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;If-unmodified-since&lt;/strong&gt;&lt;/a&gt;，其中包含发送该消息的最后修改时间的日期，或者是&lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-3.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;If-match&lt;/strong&gt;&lt;/a&gt;或&lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html#section-3.2&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;If- none-match&lt;/strong&gt;&lt;/a&gt;，包含发送的最后一个 &lt;code&gt;ETag&lt;/code&gt; 。如果页面的当前版本与客户端发送的 &lt;code&gt;ETag&lt;/code&gt; 匹配，或者资源尚未修改，则可以发送304状态代码（而不是完整的响应），告诉客户端什么都没有更改。根据页眉，如果页面已被修改或与客户端发送的 &lt;code&gt;ETag&lt;/code&gt; 不匹配，则可能会返回412状态代码（前提条件失败）。</target>
        </trans-unit>
        <trans-unit id="b698c2efdd478d0453e6a2965114cb34bcaeebb6" translate="yes" xml:space="preserve">
          <source>When the content of the response is explicitly set by assigning &lt;code&gt;response.content&lt;/code&gt;.</source>
          <target state="translated">通过分配 &lt;code&gt;response.content&lt;/code&gt; 显式设置响应的内容时。</target>
        </trans-unit>
        <trans-unit id="18f37817105a586812300378e9afc9a86b86f6d1" translate="yes" xml:space="preserve">
          <source>When the form is submitted, the &lt;code&gt;POST&lt;/code&gt; request which is sent to the server will contain the form data.</source>
          <target state="translated">提交表单 &lt;code&gt;POST&lt;/code&gt; ，发送到服务器的POST请求将包含表单数据。</target>
        </trans-unit>
        <trans-unit id="363fa540327867c28ec880e617b2c717b7548dfc" translate="yes" xml:space="preserve">
          <source>When the form is submitted, we reconstruct it and provide the original data so that the comparison can be done:</source>
          <target state="translated">当表格提交后,我们会重新构建表格,并提供原始数据,以便进行对比。</target>
        </trans-unit>
        <trans-unit id="034f8dc27f57cceb880d020112aadb97af830ea6" translate="yes" xml:space="preserve">
          <source>When the installer completes, it will ask to &amp;ldquo;Launch Stack Builder at exit?&amp;rdquo; &amp;ndash; keep this checked, as it is necessary to install &lt;a href=&quot;#postgisasb&quot;&gt;PostGIS&lt;/a&gt;.</source>
          <target state="translated">安装程序完成后，将询问&amp;ldquo;是否在出口启动Stack Builder？&amp;rdquo;。&amp;ndash;保持选中状态，因为有必要安装&lt;a href=&quot;#postgisasb&quot;&gt;PostGIS&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2d69996ce729092f51629e9925a7d8acaf8e3130" translate="yes" xml:space="preserve">
          <source>When the installer completes, it will ask to launch the Application Stack Builder (ASB) on exit &amp;ndash; keep this checked, as it is necessary to install &lt;a href=&quot;#postgisasb&quot;&gt;PostGIS&lt;/a&gt;.</source>
          <target state="translated">安装程序完成后，它将要求在退出时启动Application Stack Builder（ASB）&amp;ndash;保持选中状态，因为有必要安装&lt;a href=&quot;#postgisasb&quot;&gt;PostGIS&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a875fa7bf5148acf6e0840cee8d4d1c2f3db9d62" translate="yes" xml:space="preserve">
          <source>When the new environment is set up, &lt;a href=&quot;../topics/testing/overview&quot;&gt;run the full test suite&lt;/a&gt; for your application. Again, it&amp;rsquo;s useful to turn on deprecation warnings on so they&amp;rsquo;re shown in the test output (you can also use the flag if you test your app manually using &lt;code&gt;manage.py runserver&lt;/code&gt;):</source>
          <target state="translated">设置新环境后，请为您的应用程序&lt;a href=&quot;../topics/testing/overview&quot;&gt;运行完整的测试套件&lt;/a&gt;。同样，启用弃用警告以将其显示在测试输出中也很有用（如果您使用 &lt;code&gt;manage.py runserver&lt;/code&gt; 手动测试应用程序，则也可以使用该标志）：</target>
        </trans-unit>
        <trans-unit id="785471747ca8ecda2ffd40de07f7c4a2bc42595c" translate="yes" xml:space="preserve">
          <source>When the queryset is evaluated (&lt;code&gt;for entry in entries&lt;/code&gt; in this case), all matched entries will be locked until the end of the transaction block, meaning that other transactions will be prevented from changing or acquiring locks on them.</source>
          <target state="translated">当评估查询集时（在这种情况下 &lt;code&gt;for entry in entries&lt;/code&gt; ），所有匹配的条目将被锁定，直到事务块结束为止，这意味着将防止其他事务更改或获取它们上的锁。</target>
        </trans-unit>
        <trans-unit id="e7d6a1507f88ed674c7b2aaee9ac033a746dfecf" translate="yes" xml:space="preserve">
          <source>When the raw_password is &lt;code&gt;None&lt;/code&gt;, the password will be set to an unusable password, as if &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.set_unusable_password&quot;&gt;&lt;code&gt;set_unusable_password()&lt;/code&gt;&lt;/a&gt; were used.</source>
          <target state="translated">当raw_password为 &lt;code&gt;None&lt;/code&gt; 时，密码将设置为无法使用的密码，就像使用了&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.set_unusable_password&quot;&gt; &lt;code&gt;set_unusable_password()&lt;/code&gt; &lt;/a&gt;一样。</target>
        </trans-unit>
        <trans-unit id="cec1d756f8afab135911c8fdea967e7806176a26" translate="yes" xml:space="preserve">
          <source>When the save occurs in statement 2, &lt;code&gt;p&lt;/code&gt; already has a primary key value, and Django will attempt to use that primary key on the new database. If the primary key value isn&amp;rsquo;t in use in the &lt;code&gt;second&lt;/code&gt; database, then you won&amp;rsquo;t have any problems &amp;ndash; the object will be copied to the new database.</source>
          <target state="translated">当在语句2中进行保存时， &lt;code&gt;p&lt;/code&gt; 已经具有主键值，并且Django将尝试在新数据库上使用该主键。如果 &lt;code&gt;second&lt;/code&gt; 数据库中未使用主键值，则不会有任何问题-该对象将被复制到新数据库中。</target>
        </trans-unit>
        <trans-unit id="dccf9b5068c7356eb3923ff457b14ea0e80377b8" translate="yes" xml:space="preserve">
          <source>When the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of that specific cycle tag. The following template would output &lt;em&gt;nothing&lt;/em&gt;, even though the second call to &lt;code&gt;{% cycle %}&lt;/code&gt; doesn&amp;rsquo;t specify &lt;code&gt;silent&lt;/code&gt;:</source>
          <target state="translated">当在循环定义中使用silent关键字时，无声自动应用于该特定循环标签的所有后续使用。即使对 &lt;code&gt;{% cycle %}&lt;/code&gt; 的第二次调用未指定 &lt;code&gt;silent&lt;/code&gt; ，以下模板也不会输出&lt;em&gt;任何内容&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="6b60b4776b928d223d277e17de90ece841e26f95" translate="yes" xml:space="preserve">
          <source>When the test environment is configured, a test version of &lt;code&gt;replica&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be created. Instead the connection to &lt;code&gt;replica&lt;/code&gt; will be redirected to point at &lt;code&gt;default&lt;/code&gt;. As a result, writes to &lt;code&gt;default&lt;/code&gt; will appear on &lt;code&gt;replica&lt;/code&gt; &amp;ndash; but because they are actually the same database, not because there is data replication between the two databases.</source>
          <target state="translated">配置测试环境后，将&lt;em&gt;不会&lt;/em&gt;创建 &lt;code&gt;replica&lt;/code&gt; 的测试版本。相反，与 &lt;code&gt;replica&lt;/code&gt; 的连接将被重定向为指向 &lt;code&gt;default&lt;/code&gt; 。结果， &lt;code&gt;default&lt;/code&gt; 写入将出现在 &lt;code&gt;replica&lt;/code&gt; &amp;ndash;但是因为它们实际上是同一数据库，而不是因为两个数据库之间存在数据复制。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d751e321728d95b528f6707cdbd05b0666be03f7" translate="yes" xml:space="preserve">
          <source>When the value is retrieved from the database, it will be in the format chosen by the custom encoder (most often a string), so you&amp;rsquo;ll need to take extra steps to convert the value back to the initial data type (&lt;a href=&quot;../../models/instances#django.db.models.Model.from_db&quot;&gt;&lt;code&gt;Model.from_db()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../models/fields#django.db.models.Field.from_db_value&quot;&gt;&lt;code&gt;Field.from_db_value()&lt;/code&gt;&lt;/a&gt; are two possible hooks for that purpose). Your deserialization may need to account for the fact that you can&amp;rsquo;t be certain of the input type. For example, you run the risk of returning a &lt;code&gt;datetime&lt;/code&gt; that was actually a string that just happened to be in the same format chosen for &lt;code&gt;datetime&lt;/code&gt;s.</source>
          <target state="translated">从数据库中检索值时，它将采用自定义编码器选择的格式（通常是字符串），因此您需要采取额外的步骤将值转换回初始数据类型（&lt;a href=&quot;../../models/instances#django.db.models.Model.from_db&quot;&gt; &lt;code&gt;Model.from_db()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../models/fields#django.db.models.Field.from_db_value&quot;&gt; &lt;code&gt;Field.from_db_value()&lt;/code&gt; &lt;/a&gt;是用于此目的的两个可能的挂钩）。反序列化可能需要考虑以下事实：您不能确定输入类型。例如，您冒着返回 &lt;code&gt;datetime&lt;/code&gt; 时间的风险，该日期时间实际上是一个字符串，恰好与为 &lt;code&gt;datetime&lt;/code&gt; 选择的格式相同。</target>
        </trans-unit>
        <trans-unit id="2b5b1ec78c10f118e7af9fdf9899bf371a8d4ba7" translate="yes" xml:space="preserve">
          <source>When the view is called during the request/response cycle, the &lt;a href=&quot;#django.views.generic.base.View.setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; method assigns the &lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; to the view&amp;rsquo;s &lt;code&gt;request&lt;/code&gt; attribute, and any positional and/or keyword arguments &lt;a href=&quot;../../topics/http/urls#how-django-processes-a-request&quot;&gt;captured from the URL pattern&lt;/a&gt; to the &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; attributes, respectively. Then &lt;a href=&quot;#django.views.generic.base.View.dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">在请求/响应周期中调用视图时，&lt;a href=&quot;#django.views.generic.base.View.setup&quot;&gt; &lt;code&gt;setup()&lt;/code&gt; &lt;/a&gt;方法将&lt;a href=&quot;../request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;分配给视图的 &lt;code&gt;request&lt;/code&gt; 属性，并将&lt;a href=&quot;../../topics/http/urls#how-django-processes-a-request&quot;&gt;从URL模式捕获的&lt;/a&gt;所有位置和/或关键字参数分别分配给 &lt;code&gt;args&lt;/code&gt; 和 &lt;code&gt;kwargs&lt;/code&gt; 属性。然后调用&lt;a href=&quot;#django.views.generic.base.View.dispatch&quot;&gt; &lt;code&gt;dispatch()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e84181abe0512de047fe20994bb235aec2df4841" translate="yes" xml:space="preserve">
          <source>When this filter is used in a template where auto-escaping is enabled, Django will escape the output whenever the input is not already marked as &amp;ldquo;safe&amp;rdquo;.</source>
          <target state="translated">在启用了自动转义的模板中使用此过滤器时，只要输入尚未标记为&amp;ldquo;安全&amp;rdquo;，Django就会对输出进行转义。</target>
        </trans-unit>
        <trans-unit id="22e5980717f6273c1f20c30fd94e0c2b94c59917" translate="yes" xml:space="preserve">
          <source>When this flag is set, if the first argument to your filter is a time zone aware datetime, Django will convert it to the current time zone before passing it to your filter when appropriate, according to &lt;a href=&quot;../topics/i18n/timezones#time-zones-in-templates&quot;&gt;rules for time zones conversions in templates&lt;/a&gt;.</source>
          <target state="translated">设置此标志后，如果过滤器的第一个参数是可识别时区的日期时间，则Django将根据&lt;a href=&quot;../topics/i18n/timezones#time-zones-in-templates&quot;&gt;模板中时区转换的规则&lt;/a&gt;将其转换为当前时区，然后在适当时将其传递给过滤器。</target>
        </trans-unit>
        <trans-unit id="b7c128c4f37f4a951b44692e41cba49d49f20842" translate="yes" xml:space="preserve">
          <source>When this happens, Django will prompt you and give you some options. If it thinks it&amp;rsquo;s safe enough, it will offer to automatically linearize the two migrations for you. If not, you&amp;rsquo;ll have to go in and modify the migrations yourself - don&amp;rsquo;t worry, this isn&amp;rsquo;t difficult, and is explained more in &lt;a href=&quot;#migration-files&quot;&gt;Migration files&lt;/a&gt; below.</source>
          <target state="translated">发生这种情况时，Django会提示您并提供一些选项。如果它认为足够安全，它将为您自动线性化两个迁移。如果没有，则必须自己修改迁移-不用担心，这并不困难，下面的&lt;a href=&quot;#migration-files&quot;&gt;迁移文件&lt;/a&gt;中对此进行了详细说明。</target>
        </trans-unit>
        <trans-unit id="a093c4c46e5bf330ccdb0c2b616c4c47493877db" translate="yes" xml:space="preserve">
          <source>When this keyword is set, status information will be printed giving the number of features processed and successfully saved. By default, progress information will be printed every 1000 features processed, however, this default may be overridden by setting this keyword with an integer for the desired interval.</source>
          <target state="translated">当这个关键字被设置时,状态信息将被打印出来,给出处理和成功保存的特征数量。默认情况下,每处理1000个特征就会打印一次进度信息,但是,这个默认值可以通过设置这个关键字来覆盖所需的时间间隔的整数。</target>
        </trans-unit>
        <trans-unit id="0ff66661a0636a62c1caeda607ead031097067b2" translate="yes" xml:space="preserve">
          <source>When this option is set and &lt;code&gt;--verbosity&lt;/code&gt; is greater than 0 (the default), a progress bar is shown in the terminal.</source>
          <target state="translated">设置此选项并且 &lt;code&gt;--verbosity&lt;/code&gt; 大于0（默认值）时，终端中将显示进度条。</target>
        </trans-unit>
        <trans-unit id="73eec5a69cc5450d9db602d73b521439010931f7" translate="yes" xml:space="preserve">
          <source>When time zone support is disabled, Django uses naive datetime objects in local time. This is sufficient for many use cases. In this mode, to obtain the current time, you would write:</source>
          <target state="translated">当禁用时区支持时,Django使用本地时间的天真日期时间对象。这对于很多用例来说已经足够了。在这种模式下,要获取当前时间,你可以写。</target>
        </trans-unit>
        <trans-unit id="0872d0dc1ca1535e2fe23fdaa5988047ba925c91" translate="yes" xml:space="preserve">
          <source>When time zone support is enabled (&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ=True&lt;/code&gt;&lt;/a&gt;), Django uses time-zone-aware datetime objects. If your code creates datetime objects, they should be aware too. In this mode, the example above becomes:</source>
          <target state="translated">启用时区支持（&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ=True&lt;/code&gt; &lt;/a&gt;）时，Django使用可识别时区的datetime对象。如果您的代码创建了datetime对象，则它们也应该注意。在这种模式下，上面的示例变为：</target>
        </trans-unit>
        <trans-unit id="5a76084623ffeb407225eeb7cf7734eb659ccb85" translate="yes" xml:space="preserve">
          <source>When time zone support is enabled, the database layer expects to receive only aware datetimes from your code. This warning occurs when it receives a naive datetime. This indicates that you haven&amp;rsquo;t finished porting your code for time zone support. Please refer to the &lt;a href=&quot;#time-zones-migration-guide&quot;&gt;migration guide&lt;/a&gt; for tips on this process.</source>
          <target state="translated">启用时区支持后，数据库层希望仅从您的代码中接收已知的日期时间。当它收到原始日期时间时，会发生此警告。这表明您尚未为时区支持而完成代码的移植。请参阅&lt;a href=&quot;#time-zones-migration-guide&quot;&gt;迁移指南&lt;/a&gt;以获取有关此过程的提示。</target>
        </trans-unit>
        <trans-unit id="720dc315a597b2a7840587fb3646c786ec8cc55e" translate="yes" xml:space="preserve">
          <source>When to use &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">何时使用&lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c0d324dd44969dbda2d5384041d37d5cafdc4b7" translate="yes" xml:space="preserve">
          <source>When to use custom signals</source>
          <target state="translated">何时使用自定义信号</target>
        </trans-unit>
        <trans-unit id="631e54b71fc7c52854012ff86c91adc811e89ac2" translate="yes" xml:space="preserve">
          <source>When unapplying migrations, all dependent migrations will also be unapplied, regardless of &lt;code&gt;&amp;lt;app_label&amp;gt;&lt;/code&gt;. You can use &lt;code&gt;--plan&lt;/code&gt; to check which migrations will be unapplied.</source>
          <target state="translated">在取消应用迁移时，无论 &lt;code&gt;&amp;lt;app_label&amp;gt;&lt;/code&gt; 如何，所有从属迁移也将不应用。您可以使用 &lt;code&gt;--plan&lt;/code&gt; 来检查哪些迁移将不适用。</target>
        </trans-unit>
        <trans-unit id="9cdd9bcaca82d5fb22cef56f82d3b7b259cf6712" translate="yes" xml:space="preserve">
          <source>When updating objects, where possible, use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_update&quot;&gt;&lt;code&gt;bulk_update()&lt;/code&gt;&lt;/a&gt; method to reduce the number of SQL queries. Given a list or queryset of objects:</source>
          <target state="translated">在可能的情况下，更新对象时，请使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_update&quot;&gt; &lt;code&gt;bulk_update()&lt;/code&gt; &lt;/a&gt;方法减少SQL查询的数量。给定对象列表或查询集：</target>
        </trans-unit>
        <trans-unit id="f6d7a21259554b39157fe766c9cf521b1c37bb36" translate="yes" xml:space="preserve">
          <source>When used with an &lt;code&gt;aggregate()&lt;/code&gt; clause, a filter has the effect of constraining the objects over which the aggregate is calculated. For example, you can generate the average price of all books with a title that starts with &amp;ldquo;Django&amp;rdquo; using the query:</source>
          <target state="translated">与 &lt;code&gt;aggregate()&lt;/code&gt; 子句一起使用时，过滤器具有约束在其上计算聚合的对象的作用。例如，您可以使用查询生成标题为&amp;ldquo; Django&amp;rdquo;开头的所有书籍的平均价格：</target>
        </trans-unit>
        <trans-unit id="f5e7b094c4e683c6372f0932a9061afc0e3362f6" translate="yes" xml:space="preserve">
          <source>When used with an &lt;code&gt;annotate()&lt;/code&gt; clause, a filter has the effect of constraining the objects for which an annotation is calculated. For example, you can generate an annotated list of all books that have a title starting with &amp;ldquo;Django&amp;rdquo; using the query:</source>
          <target state="translated">与 &lt;code&gt;annotate()&lt;/code&gt; 子句一起使用时，过滤器具有约束为其计算注释的对象的作用。例如，您可以使用查询生成标题为&amp;ldquo; Django&amp;rdquo;开头的所有书籍的带注释的列表：</target>
        </trans-unit>
        <trans-unit id="e3d51273c36ece1653fd4d4ebacaf044f093947e" translate="yes" xml:space="preserve">
          <source>When used without a format string, the &lt;code&gt;DATE_FORMAT&lt;/code&gt; format specifier is used. Assuming the same settings as the previous example:</source>
          <target state="translated">当不带格式字符串使用时，将使用 &lt;code&gt;DATE_FORMAT&lt;/code&gt; 格式说明符。假设设置与前面的示例相同：</target>
        </trans-unit>
        <trans-unit id="12ed6ae761a6cca8e535e293dc46964d04148a68" translate="yes" xml:space="preserve">
          <source>When used without a format string, the &lt;code&gt;TIME_FORMAT&lt;/code&gt; format specifier is used:</source>
          <target state="translated">不带格式字符串使用时，将使用 &lt;code&gt;TIME_FORMAT&lt;/code&gt; 格式说明符：</target>
        </trans-unit>
        <trans-unit id="de0c859864536b75a456e5415aefa56e679e10b8" translate="yes" xml:space="preserve">
          <source>When used without an argument, rounds a floating-point number to one decimal place &amp;ndash; but only if there&amp;rsquo;s a decimal part to be displayed. For example:</source>
          <target state="translated">如果不带参数使用，则将浮点数四舍五入到小数点后一位-但仅当要显示小数部分时才如此。例如：</target>
        </trans-unit>
        <trans-unit id="7a7e5162037701750b4b87650a308b6b03f09f47" translate="yes" xml:space="preserve">
          <source>When users log in, if their passwords are stored with anything other than the preferred algorithm, Django will automatically upgrade the algorithm to the preferred one. This means that old installs of Django will get automatically more secure as users log in, and it also means that you can switch to new (and better) storage algorithms as they get invented.</source>
          <target state="translated">当用户登录时,如果他们的密码是用首选算法以外的其他算法存储的,Django会自动将算法升级为首选算法。这意味着旧的Django安装将在用户登录时自动变得更加安全,也意味着你可以在发明新的(更好的)存储算法时切换到新的算法。</target>
        </trans-unit>
        <trans-unit id="6a941cc02cd3d56c1a9e4a2f0cd5a60b53639133" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, a new database table is created for each subclass of a model. This is usually the desired behavior, since the subclass needs a place to store any additional data fields that are not present on the base class. Sometimes, however, you only want to change the Python behavior of a model &amp;ndash; perhaps to change the default manager, or add a new method.</source>
          <target state="translated">使用&lt;a href=&quot;#multi-table-inheritance&quot;&gt;多表继承时&lt;/a&gt;，将为模型的每个子类创建一个新的数据库表。这通常是所需的行为，因为子类需要一个位置来存储基类上不存在的任何其他数据字段。但是，有时您只想更改模型的Python行为&amp;ndash;可能更改默认管理器或添加新方法。</target>
        </trans-unit>
        <trans-unit id="a3513d79dca3637d2232ce2c4c10837774d9eb0e" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../../../topics/db/sql&quot;&gt;raw queries&lt;/a&gt;, you must wrap your geometry fields so that the field value can be recognized by GEOS:</source>
          <target state="translated">使用&lt;a href=&quot;../../../topics/db/sql&quot;&gt;原始查询时&lt;/a&gt;，必须包装几何字段，以便GEOS可以识别字段值：</target>
        </trans-unit>
        <trans-unit id="6ec4593435566f15455cd2694810fd5596e6f4e9" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;model forms&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;Field&lt;/code&gt; needs to know which form field it should be represented by:</source>
          <target state="translated">使用&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;model forms&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;Field&lt;/code&gt; 需要知道应该用以下哪个字段表示：</target>
        </trans-unit>
        <trans-unit id="8250762299c1a3dba6133b99366bb46738a045cd" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../class-based-views/index&quot;&gt;class-based views&lt;/a&gt;, you can achieve the same behavior as with &lt;code&gt;login_required&lt;/code&gt; by using the &lt;code&gt;LoginRequiredMixin&lt;/code&gt;. This mixin should be at the leftmost position in the inheritance list.</source>
          <target state="translated">使用&lt;a href=&quot;../class-based-views/index&quot;&gt;基于类的视图时&lt;/a&gt;，可以通过使用 &lt;code&gt;LoginRequiredMixin&lt;/code&gt; 来实现与 &lt;code&gt;login_required&lt;/code&gt; 相同的行为。此混入应该在继承列表的最左侧。</target>
        </trans-unit>
        <trans-unit id="3f771af210041f2f64f394e85d2a2e48b7bab5ea" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../class-based-views/index&quot;&gt;class-based views&lt;/a&gt;, you can use the &lt;code&gt;UserPassesTestMixin&lt;/code&gt; to do this.</source>
          <target state="translated">使用&lt;a href=&quot;../class-based-views/index&quot;&gt;基于类的视图时&lt;/a&gt;，可以使用 &lt;code&gt;UserPassesTestMixin&lt;/code&gt; 来执行此操作。</target>
        </trans-unit>
        <trans-unit id="62a14dc820acf0d2e2ce39535e3f0037dfd118aa" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../db/models#multi-table-inheritance&quot;&gt;multi-table inheritance&lt;/a&gt;, forms generated by a formset factory will contain a parent link field (by default &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt;) instead of an &lt;code&gt;id&lt;/code&gt; field.</source>
          <target state="translated">使用&lt;a href=&quot;../db/models#multi-table-inheritance&quot;&gt;多表继承时&lt;/a&gt;，由表单集工厂生成的表单将包含父链接字段（默认为 &lt;code&gt;&amp;lt;parent_model_name&amp;gt;_ptr&lt;/code&gt; ）而不是 &lt;code&gt;id&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="4d8399cf1d09eaa038bdef494ce3261154cd5f7d" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin&lt;/a&gt;, you can either set the environment variable once, or explicitly pass in the settings module each time you run the utility.</source>
          <target state="translated">使用&lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin时&lt;/a&gt;，您可以设置一次环境变量，也可以在每次运行该实用程序时显式传递设置模块。</target>
        </trans-unit>
        <trans-unit id="0437ff052879747e27beaaeb0c018478a746e97c" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt;&lt;code&gt;QuerySet.iterator()&lt;/code&gt;&lt;/a&gt;, Django opens a &lt;a href=&quot;https://www.psycopg.org/docs/usage.html#server-side-cursors&quot;&gt;server-side cursor&lt;/a&gt;. By default, PostgreSQL assumes that only the first 10% of the results of cursor queries will be fetched. The query planner spends less time planning the query and starts returning results faster, but this could diminish performance if more than 10% of the results are retrieved. PostgreSQL&amp;rsquo;s assumptions on the number of rows retrieved for a cursor query is controlled with the &lt;a href=&quot;https://www.postgresql.org/docs/current/runtime-config-query.html#GUC-CURSOR-TUPLE-FRACTION&quot;&gt;cursor_tuple_fraction&lt;/a&gt; option.</source>
          <target state="translated">使用&lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt; &lt;code&gt;QuerySet.iterator()&lt;/code&gt; 时&lt;/a&gt;，Django将打开&lt;a href=&quot;https://www.psycopg.org/docs/usage.html#server-side-cursors&quot;&gt;服务器端游标&lt;/a&gt;。默认情况下，PostgreSQL假定仅会提取游标查询结果的前10％。查询计划者花费较少的时间来计划查询，并开始更快地返回结果，但是如果检索到超过10％的结果，这可能会降低性能。PostgreSQL关于为游标查询检索的行数的假设是由&lt;a href=&quot;https://www.postgresql.org/docs/current/runtime-config-query.html#GUC-CURSOR-TUPLE-FRACTION&quot;&gt;cursor_tuple_fraction&lt;/a&gt;选项控制的。</target>
        </trans-unit>
        <trans-unit id="9659364a71d70fbf95e380c80ce6967af593e382" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;CreateView&lt;/code&gt; you have access to &lt;code&gt;self.object&lt;/code&gt;, which is the object being created. If the object hasn&amp;rsquo;t been created yet, the value will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;CreateView&lt;/code&gt; 时,您可以访问 &lt;code&gt;self.object&lt;/code&gt; ，即正在创建的对象。如果尚未创建对象，则该值为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f63903971bafa4a17ef764e5804f9f501e2686d" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;UpdateView&lt;/code&gt; you have access to &lt;code&gt;self.object&lt;/code&gt;, which is the object being updated.</source>
          <target state="translated">使用 &lt;code&gt;UpdateView&lt;/code&gt; 时,您可以访问 &lt;code&gt;self.object&lt;/code&gt; ，它是要更新的对象。</target>
        </trans-unit>
        <trans-unit id="c74977f82ed485f5a3b6a96d4ced0d7a275c4c78" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;ngettext()&lt;/code&gt;, make sure you use a single name for every extrapolated variable included in the literal. In the examples above, note how we used the &lt;code&gt;name&lt;/code&gt; Python variable in both translation strings. This example, besides being incorrect in some languages as noted above, would fail:</source>
          <target state="translated">使用 &lt;code&gt;ngettext()&lt;/code&gt; 时，请确保为文字中包含的每个外推变量使用一个名称。在上面的示例中，请注意我们如何在两个翻译字符串中使用 &lt;code&gt;name&lt;/code&gt; Python变量。除了上面提到的某些语言中的错误外，此示例还会失败：</target>
        </trans-unit>
        <trans-unit id="dcd2c60415076465633077f90e188c3f2b766bfb" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;select_for_update()&lt;/code&gt; on MySQL, make sure you filter a queryset against at least set of fields contained in unique constraints or only against fields covered by indexes. Otherwise, an exclusive write lock will be acquired over the full table for the duration of the transaction.</source>
          <target state="translated">在MySQL上使用 &lt;code&gt;select_for_update()&lt;/code&gt; 时，请确保至少针对唯一约束中包含的字段集或仅针对索引覆盖的字段来过滤查询集。否则，将在事务期间在整个表上获取排他写锁定。</target>
        </trans-unit>
        <trans-unit id="e1c08bac491c7a74901305a1ed5034d55188ef49" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;to_attr&lt;/code&gt; the prefetched result is stored in a list. This can provide a significant speed improvement over traditional &lt;code&gt;prefetch_related&lt;/code&gt; calls which store the cached result within a &lt;code&gt;QuerySet&lt;/code&gt; instance.</source>
          <target state="translated">使用 &lt;code&gt;to_attr&lt;/code&gt; 时，预取结果存储在列表中。与传统的 &lt;code&gt;prefetch_related&lt;/code&gt; 调用（将缓存的结果存储在 &lt;code&gt;QuerySet&lt;/code&gt; 实例中）相比，这可以显着提高速度。</target>
        </trans-unit>
        <trans-unit id="c2c4b1f8a8dd3759ff72b3f0c488417558fbe0eb" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;values()&lt;/code&gt; together with &lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt;, be aware that ordering can affect the results. See the note in &lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">当将 &lt;code&gt;values()&lt;/code&gt; 与&lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt; &lt;code&gt;distinct()&lt;/code&gt; &lt;/a&gt;（）一起使用时，请注意排序会影响结果。有关详细信息，请参见&lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt; &lt;code&gt;distinct()&lt;/code&gt; 中&lt;/a&gt;的注释。</target>
        </trans-unit>
        <trans-unit id="d97f54b33e2285bbb79db916423015669b5c4ffe" translate="yes" xml:space="preserve">
          <source>When using Watchman with a project that includes large non-Python directories like &lt;code&gt;node_modules&lt;/code&gt;, it&amp;rsquo;s advisable to ignore this directory for optimal performance. See the &lt;a href=&quot;https://facebook.github.io/watchman/docs/config#ignore_dirs&quot;&gt;watchman documentation&lt;/a&gt; for information on how to do this.</source>
          <target state="translated">当Watchman与包含大型非Python目录（例如 &lt;code&gt;node_modules&lt;/code&gt; )的项目一起使用时，建议忽略此目录以获得最佳性能。有关如何执行此操作的信息，请参阅&lt;a href=&quot;https://facebook.github.io/watchman/docs/config#ignore_dirs&quot;&gt;值班人员文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="87f04040b5fce1804819fd7c7d858dbfee03cb03" translate="yes" xml:space="preserve">
          <source>When using Watchman with a project that includes large non-Python directories like &lt;code&gt;node_modules&lt;/code&gt;, it&amp;rsquo;s advisable to ignore this directory for optimal performance. See the &lt;a href=&quot;https://facebook.github.io/watchman/docs/config.html#ignore_dirs&quot;&gt;watchman documentation&lt;/a&gt; for information on how to do this.</source>
          <target state="translated">将Watchman用于包含大型非Python目录（如 &lt;code&gt;node_modules&lt;/code&gt; )的项目时，建议忽略此目录以获得最佳性能。有关如何执行此操作的信息，请参阅&lt;a href=&quot;https://facebook.github.io/watchman/docs/config.html#ignore_dirs&quot;&gt;值班人员文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7af642b3e83f4d0f8f4f5c688a3abe4e01b5cff8" translate="yes" xml:space="preserve">
          <source>When using an in-memory SQLite database to run the tests, the same database connection will be shared by two threads in parallel: the thread in which the live server is run and the thread in which the test case is run. It&amp;rsquo;s important to prevent simultaneous database queries via this shared connection by the two threads, as that may sometimes randomly cause the tests to fail. So you need to ensure that the two threads don&amp;rsquo;t access the database at the same time. In particular, this means that in some cases (for example, just after clicking a link or submitting a form), you might need to check that a response is received by Selenium and that the next page is loaded before proceeding with further test execution. Do this, for example, by making Selenium wait until the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; HTML tag is found in the response (requires Selenium &amp;gt; 2.13):</source>
          <target state="translated">使用内存中的SQLite数据库运行测试时，相同的数据库连接将由两个线程并行共享：运行实时服务器的线程和运行测试用例的线程。防止两个线程通过此共享连接同时进行数据库查询非常重要，因为这有时可能会随机导致测试失败。因此，您需要确保两个线程不会同时访问数据库。特别是，这意味着在某些情况下（例如，在单击链接或提交表单之后），您可能需要检查Selenium是否收到了响应以及是否已加载下一页，然后再继续执行测试。例如，通过使Selenium等到 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 来执行此操作 在响应中找到HTML标记（需要Selenium&amp;gt; 2.13）：</target>
        </trans-unit>
        <trans-unit id="fefc5699ef431be89d5c3ca734f4848301324ee0" translate="yes" xml:space="preserve">
          <source>When using lazy translation for a plural string (&lt;code&gt;[u]n[p]gettext_lazy&lt;/code&gt;), you generally don&amp;rsquo;t know the &lt;code&gt;number&lt;/code&gt; argument at the time of the string definition. Therefore, you are authorized to pass a key name instead of an integer as the &lt;code&gt;number&lt;/code&gt; argument. Then &lt;code&gt;number&lt;/code&gt; will be looked up in the dictionary under that key during string interpolation. Here&amp;rsquo;s example:</source>
          <target state="translated">当对多个字符串（ &lt;code&gt;[u]n[p]gettext_lazy&lt;/code&gt; ）使用惰性翻译时，通常在字符串定义时不知道 &lt;code&gt;number&lt;/code&gt; 参数。因此，您被授权传递键名而不是整数作为 &lt;code&gt;number&lt;/code&gt; 参数。然后在插入字符串时，将在该键下的字典中查找 &lt;code&gt;number&lt;/code&gt; 。例子如下：</target>
        </trans-unit>
        <trans-unit id="65013efa36b6fc7b5b148f5488fdb293d4e49617" translate="yes" xml:space="preserve">
          <source>When using lazy translation for a plural string (&lt;code&gt;n[p]gettext_lazy&lt;/code&gt;), you generally don&amp;rsquo;t know the &lt;code&gt;number&lt;/code&gt; argument at the time of the string definition. Therefore, you are authorized to pass a key name instead of an integer as the &lt;code&gt;number&lt;/code&gt; argument. Then &lt;code&gt;number&lt;/code&gt; will be looked up in the dictionary under that key during string interpolation. Here&amp;rsquo;s example:</source>
          <target state="translated">当对多个字符串（ &lt;code&gt;n[p]gettext_lazy&lt;/code&gt; ）使用惰性翻译时，通常在字符串定义时不知道 &lt;code&gt;number&lt;/code&gt; 参数。因此，您被授权传递键名而不是整数作为 &lt;code&gt;number&lt;/code&gt; 参数。然后，在插入字符串期间，将在该键下的字典中查找 &lt;code&gt;number&lt;/code&gt; 。例子如下：</target>
        </trans-unit>
        <trans-unit id="c8d0fc875e7489d613f7d1d6282174d39e7a8a91" translate="yes" xml:space="preserve">
          <source>When using multiple databases with &lt;code&gt;prefetch_related_objects&lt;/code&gt;, the prefetch query will use the database associated with the model instance. This can be overridden by using a custom queryset in a related lookup.</source>
          <target state="translated">当将多个数据库与 &lt;code&gt;prefetch_related_objects&lt;/code&gt; 一起使用时，预取查询将使用与模型实例关联的数据库。可以通过在相关查找中使用自定义查询集来覆盖它。</target>
        </trans-unit>
        <trans-unit id="3181e9bcdec121db994227f3f0e2a76d1adafd59" translate="yes" xml:space="preserve">
          <source>When using multiple databases, &lt;code&gt;Prefetch&lt;/code&gt; will respect your choice of database. If the inner query does not specify a database, it will use the database selected by the outer query. All of the following are valid:</source>
          <target state="translated">当使用多个数据库时， &lt;code&gt;Prefetch&lt;/code&gt; 将尊重您选择的数据库。如果内部查询未指定数据库，它将使用外部查询选择的数据库。以下所有条件均有效：</target>
        </trans-unit>
        <trans-unit id="fbd67b7b5d6890ba55bd664ca5d74adfa55a8425" translate="yes" xml:space="preserve">
          <source>When using multiple databases, you may need to figure out whether or not to run a migration against a particular database. For example, you may want to &lt;strong&gt;only&lt;/strong&gt; run a migration on a particular database.</source>
          <target state="translated">使用多个数据库时，您可能需要弄清楚是否要对特定数据库运行迁移。例如，您可能希望&lt;strong&gt;只&lt;/strong&gt;运行特定数据库的迁移。</target>
        </trans-unit>
        <trans-unit id="75de4d9da06c6302461ce0554d1c0b43544ed3e3" translate="yes" xml:space="preserve">
          <source>When using multiple decorators</source>
          <target state="translated">当使用多个装饰器时</target>
        </trans-unit>
        <trans-unit id="77f47283c9d7575f2d9ad8ea0830ff2587f3a2a3" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; finder, make sure your apps can be found by staticfiles by adding the app to the &lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting of your site.</source>
          <target state="translated">使用 &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; Finder时，通过将应用程序添加到站点的&lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;设置中，确保可以通过静态文件找到您的应用程序。</target>
        </trans-unit>
        <trans-unit id="17fb307e8a448fb6d0dfbbbc4c65560af2581de6" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;pylibmc&lt;/code&gt; binding, do not include the &lt;code&gt;unix:/&lt;/code&gt; prefix:</source>
          <target state="translated">使用 &lt;code&gt;pylibmc&lt;/code&gt; 绑定时，请勿包含 &lt;code&gt;unix:/&lt;/code&gt; 前缀：</target>
        </trans-unit>
        <trans-unit id="c9bd7b3ed30a984b2e493fa110691e0e9f48c7c2" translate="yes" xml:space="preserve">
          <source>When using the Oracle database backend, the value &lt;code&gt;NULL&lt;/code&gt; will be stored to denote the empty string regardless of this attribute.</source>
          <target state="translated">使用Oracle数据库后端时，无论此属性如何，都将存储值 &lt;code&gt;NULL&lt;/code&gt; 表示空字符串。</target>
        </trans-unit>
        <trans-unit id="38dee66af115536410728b1affd492e9ffc234a5" translate="yes" xml:space="preserve">
          <source>When using the SQLite backend and non-ASCII strings, bear in mind the &lt;a href=&quot;../databases#sqlite-string-matching&quot;&gt;database note&lt;/a&gt; about string comparisons.</source>
          <target state="translated">使用SQLite后端和非ASCII字符串时，请记住有关字符串比较的&lt;a href=&quot;../databases#sqlite-string-matching&quot;&gt;数据库说明&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="61d4f0f76eb7fb9b2a9c6e757398b181712184c1" translate="yes" xml:space="preserve">
          <source>When using the SQLite backend and non-ASCII strings, bear in mind the &lt;a href=&quot;../databases#sqlite-string-matching&quot;&gt;database note&lt;/a&gt; about string comparisons. SQLite does not do case-insensitive matching for non-ASCII strings.</source>
          <target state="translated">使用SQLite后端和非ASCII字符串时，请记住有关字符串比较的&lt;a href=&quot;../databases#sqlite-string-matching&quot;&gt;数据库说明&lt;/a&gt;。SQLite不会对非ASCII字符串进行不区分大小写的匹配。</target>
        </trans-unit>
        <trans-unit id="d5696cc7aa1339e54989a77486231650c1ade0a9" translate="yes" xml:space="preserve">
          <source>When using the above written &lt;code&gt;abs&lt;/code&gt; lookup, the SQL produced will not use indexes efficiently in some cases. In particular, when we use &lt;code&gt;change__abs__lt=27&lt;/code&gt;, this is equivalent to &lt;code&gt;change__gt=-27&lt;/code&gt; AND &lt;code&gt;change__lt=27&lt;/code&gt;. (For the &lt;code&gt;lte&lt;/code&gt; case we could use the SQL &lt;code&gt;BETWEEN&lt;/code&gt;).</source>
          <target state="translated">使用上述书面 &lt;code&gt;abs&lt;/code&gt; 查找时，在某些情况下，生成的SQL将无法有效使用索引。特别是，当我们使用 &lt;code&gt;change__abs__lt=27&lt;/code&gt; 时，这等效于 &lt;code&gt;change__gt=-27&lt;/code&gt; AND &lt;code&gt;change__lt=27&lt;/code&gt; 。（对于 &lt;code&gt;lte&lt;/code&gt; 情况下，我们可以使用SQL &lt;code&gt;BETWEEN&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cf6290c44eb00e5e348edce760cc337e99eeda9b" translate="yes" xml:space="preserve">
          <source>When using the cookies backend the session data can be read by the client.</source>
          <target state="translated">当使用cookies后端时,客户端可以读取会话数据。</target>
        </trans-unit>
        <trans-unit id="25b1c2d093966da4974f56dc88f3d8263871967c" translate="yes" xml:space="preserve">
          <source>When using the middleware there may be some views where you do &lt;strong&gt;not&lt;/strong&gt; want the &lt;code&gt;X-Frame-Options&lt;/code&gt; header set. For those cases, you can use a view decorator that tells the middleware not to set the header:</source>
          <target state="translated">当使用中间件可能有一些意见，你也&lt;strong&gt;不会&lt;/strong&gt;希望 &lt;code&gt;X-Frame-Options&lt;/code&gt; 报头组。对于这些情况，可以使用视图装饰器告知中间件不要设置标头：</target>
        </trans-unit>
        <trans-unit id="bdddc5482e8d57e6747babb63466a78743a03b11" translate="yes" xml:space="preserve">
          <source>When using these services, the basic workflow would look a bit like the above, except that instead of using &lt;code&gt;rsync&lt;/code&gt; to transfer your static files to the server you&amp;rsquo;d need to transfer the static files to the storage provider or CDN.</source>
          <target state="translated">使用这些服务时，基本工作流程看起来与上面类似，除了需要使用静态服务将静态文件传输到存储提供程序或CDN 而不是使用 &lt;code&gt;rsync&lt;/code&gt; 将静态文件传输到服务器。</target>
        </trans-unit>
        <trans-unit id="da2df67ad09d6722cb2077ad42b8cdd1029ef430" translate="yes" xml:space="preserve">
          <source>When using this backend, you&amp;rsquo;ll likely want to customize the &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm&quot;&gt;&lt;code&gt;AuthenticationForm&lt;/code&gt;&lt;/a&gt; used by the &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt; by overriding the &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed&quot;&gt;&lt;code&gt;confirm_login_allowed()&lt;/code&gt;&lt;/a&gt; method as it rejects inactive users.</source>
          <target state="translated">使用此后端时，您可能希望通过重写&lt;a href=&quot;../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed&quot;&gt; &lt;code&gt;confirm_login_allowed()&lt;/code&gt; &lt;/a&gt;方法（因为它拒绝不活动的用户）来自定义&lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt; &lt;code&gt;LoginView&lt;/code&gt; &lt;/a&gt;使用的&lt;a href=&quot;../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm&quot;&gt; &lt;code&gt;AuthenticationForm&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dbfbd0966dad63416803e5998a1b37fadea4e021" translate="yes" xml:space="preserve">
          <source>When validating the &amp;lsquo;csrfmiddlewaretoken&amp;rsquo; field value, only the secret, not the full token, is compared with the secret in the cookie value. This allows the use of ever-changing tokens. While each request may use its own token, the secret remains common to all.</source>
          <target state="translated">验证&amp;ldquo; csrfmiddlewaretoken&amp;rdquo;字段值时，仅将秘密而不是完整令牌与cookie值中的秘密进行比较。这允许使用不断变化的令牌。尽管每个请求都可以使用其自己的令牌，但该机密仍然是所有人共有的。</target>
        </trans-unit>
        <trans-unit id="7bb5644a3fdbf354af8aaeeaca88ff24ed2e5d26" translate="yes" xml:space="preserve">
          <source>When value is &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;select_related()&lt;/code&gt; will always be called. When value is set to &lt;code&gt;False&lt;/code&gt;, Django will look at &lt;code&gt;list_display&lt;/code&gt; and call &lt;code&gt;select_related()&lt;/code&gt; if any &lt;code&gt;ForeignKey&lt;/code&gt; is present.</source>
          <target state="translated">当value为 &lt;code&gt;True&lt;/code&gt; 时，将始终调用 &lt;code&gt;select_related()&lt;/code&gt; 。当value设置为 &lt;code&gt;False&lt;/code&gt; 时，Django将查看 &lt;code&gt;list_display&lt;/code&gt; 并如果存在任何 &lt;code&gt;ForeignKey&lt;/code&gt; 则调用 &lt;code&gt;select_related()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="762bfd621a5d62b55b07395446b78f6a419696b4" translate="yes" xml:space="preserve">
          <source>When we fixed the bug above, we wrote the test first and then the code to fix it. In fact that was an example of test-driven development, but it doesn&amp;rsquo;t really matter in which order we do the work.</source>
          <target state="translated">修复上述错误后，我们首先编写了测试，然后编写了代码进行修复。实际上，这是测试驱动开发的一个示例，但实际上，我们按什么顺序进行工作并不重要。</target>
        </trans-unit>
        <trans-unit id="00ac2eac35df9778c6d2584609b70e329e17a9fc" translate="yes" xml:space="preserve">
          <source>When we instantiate a form, we can opt to leave it empty or pre-populate it, for example with:</source>
          <target state="translated">当我们实例化一个表单时,我们可以选择将其留空或预先填充,例如用。</target>
        </trans-unit>
        <trans-unit id="71861f6883f1e21a923a2557863f3ae46320a891" translate="yes" xml:space="preserve">
          <source>When working with sessions internally, Django uses a session store object from the corresponding session engine. By convention, the session store object class is named &lt;code&gt;SessionStore&lt;/code&gt; and is located in the module designated by &lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt;&lt;code&gt;SESSION_ENGINE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在内部使用会话时，Django使用来自相应会话引擎的会话存储对象。按照约定，会话存储对象类名为 &lt;code&gt;SessionStore&lt;/code&gt; ，位于&lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt; &lt;code&gt;SESSION_ENGINE&lt;/code&gt; &lt;/a&gt;指定的模块中。</target>
        </trans-unit>
        <trans-unit id="7a4661ed792f9a543282dccc2742af3143789c34" translate="yes" xml:space="preserve">
          <source>When writing a &lt;code&gt;RunPython&lt;/code&gt; function that uses models from apps other than the one in which the migration is located, the migration&amp;rsquo;s &lt;code&gt;dependencies&lt;/code&gt; attribute should include the latest migration of each app that is involved, otherwise you may get an error similar to: &lt;code&gt;LookupError: No installed app
with label 'myappname'&lt;/code&gt; when you try to retrieve the model in the &lt;code&gt;RunPython&lt;/code&gt; function using &lt;code&gt;apps.get_model()&lt;/code&gt;.</source>
          <target state="translated">编写使用来自迁移所在应用程序以外的其他应用程序的模型的 &lt;code&gt;RunPython&lt;/code&gt; 函数时，迁移 &lt;code&gt;dependencies&lt;/code&gt; 属性应包括所涉及的每个应用程序的最新迁移，否则可能会出现类似以下错误： &lt;code&gt;LookupError: No installed app with label 'myappname'&lt;/code&gt; 尝试使用 &lt;code&gt;apps.get_model()&lt;/code&gt; 在 &lt;code&gt;RunPython&lt;/code&gt; 函数中检索模型时，标签为&amp;ldquo; myappname&amp;rdquo;的app。</target>
        </trans-unit>
        <trans-unit id="a42827cc599317fa5952dd46e90497356d44296a" translate="yes" xml:space="preserve">
          <source>When writing a custom filter, give some thought to how the filter will interact with Django&amp;rsquo;s auto-escaping behavior. Note that two types of strings can be passed around inside the template code:</source>
          <target state="translated">在编写自定义过滤器时，请考虑一下过滤器将如何与Django的自动转义行为进行交互。请注意，可以在模板代码内传递两种类型的字符串：</target>
        </trans-unit>
        <trans-unit id="cb4a99691b530c61a2380d1460906787b2eb3b8e" translate="yes" xml:space="preserve">
          <source>When writing custom validation for &lt;code&gt;InlineModelAdmin&lt;/code&gt; forms, be cautious of writing validation that relies on features of the parent model. If the parent model fails to validate, it may be left in an inconsistent state as described in the warning in &lt;a href=&quot;../../../topics/forms/modelforms#validation-on-modelform&quot;&gt;Validation on a ModelForm&lt;/a&gt;.</source>
          <target state="translated">为 &lt;code&gt;InlineModelAdmin&lt;/code&gt; 表单编写自定义验证时，请谨慎编写依赖于父模型功能的验证。如果父模型无法通过验证，则可能会处于不一致状态，如&lt;a href=&quot;../../../topics/forms/modelforms#validation-on-modelform&quot;&gt;ModelForm上&amp;ldquo;验证&amp;rdquo;&lt;/a&gt;中的警告中所述。</target>
        </trans-unit>
        <trans-unit id="219296b4d360e0326b82540bb67bbcb02a0e75e1" translate="yes" xml:space="preserve">
          <source>When you &lt;a href=&quot;#running-tests&quot;&gt;run your tests&lt;/a&gt;, the default behavior of the test utility is to find all the test cases (that is, subclasses of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;) in any file whose name begins with &lt;code&gt;test&lt;/code&gt;, automatically build a test suite out of those test cases, and run that suite.</source>
          <target state="translated">在&lt;a href=&quot;#running-tests&quot;&gt;运行测试时&lt;/a&gt;，测试实用程序的默认行为是在名称以 &lt;code&gt;test&lt;/code&gt; 开头的任何文件中找到所有测试用例（即&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; 的&lt;/a&gt;子类），并自动从这些测试用例中构建测试套件，并运行该套件。</target>
        </trans-unit>
        <trans-unit id="b8afb8b8cacf61ac9ae242b3ac15583017e3fa88" translate="yes" xml:space="preserve">
          <source>When you &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; a model, its current state is pickled. When you unpickle it, it&amp;rsquo;ll contain the model instance at the moment it was pickled, rather than the data that&amp;rsquo;s currently in the database.</source>
          <target state="translated">当您&lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;的典范，其当前状态腌制。当您对其进行修补时，它将包含在被腌制的那一刻的模型实例，而不是数据库中当前的数据。</target>
        </trans-unit>
        <trans-unit id="de1ee25f95594a76c8269ace89d8d4813fc2094d" translate="yes" xml:space="preserve">
          <source>When you access a &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; on a model, you are given an instance of &lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt;&lt;code&gt;FieldFile&lt;/code&gt;&lt;/a&gt; as a proxy for accessing the underlying file.</source>
          <target state="translated">当您访问&lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt;上的模型，您将得到的实例&lt;a href=&quot;#django.db.models.fields.files.FieldFile&quot;&gt; &lt;code&gt;FieldFile&lt;/code&gt; &lt;/a&gt;作为访问底层文件的代理。</target>
        </trans-unit>
        <trans-unit id="dc0ac3f13e1aec7fcfd479235a3a77f29f00d9f7" translate="yes" xml:space="preserve">
          <source>When you add new apps to &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, be sure to run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt;, optionally making migrations for them first with &lt;a href=&quot;../../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;manage.py makemigrations&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当您将新应用添加到&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 时&lt;/a&gt;，请确保运行&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;manage.py migrate&lt;/code&gt; &lt;/a&gt; migration，可以选择先使用&lt;a href=&quot;../../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;manage.py makemigrations&lt;/code&gt; &lt;/a&gt;对其进行迁移。</target>
        </trans-unit>
        <trans-unit id="05bdc601159ef086a6a2da8c8b09a881b7c7ec48" translate="yes" xml:space="preserve">
          <source>When you are filtering an object based on a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; or a reverse &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, there are two different sorts of filter you may be interested in. Consider the &lt;code&gt;Blog&lt;/code&gt;/&lt;code&gt;Entry&lt;/code&gt; relationship (&lt;code&gt;Blog&lt;/code&gt; to &lt;code&gt;Entry&lt;/code&gt; is a one-to-many relation). We might be interested in finding blogs that have an entry which has both &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; in the headline and was published in 2008. Or we might want to find blogs that have an entry with &lt;em&gt;&amp;ldquo;Lennon&amp;rdquo;&lt;/em&gt; in the headline as well as an entry that was published in 2008. Since there are multiple entries associated with a single &lt;code&gt;Blog&lt;/code&gt;, both of these queries are possible and make sense in some situations.</source>
          <target state="translated">当您基于&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;或反向&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;过滤对象时，可能会感兴趣两种不同的过滤器。考虑 &lt;code&gt;Blog&lt;/code&gt; / &lt;code&gt;Entry&lt;/code&gt; 关系（ &lt;code&gt;Blog&lt;/code&gt; to &lt;code&gt;Entry&lt;/code&gt; 是一对多关系）。我们可能会想查找标题为&lt;em&gt;&amp;ldquo; Lennon&amp;rdquo;&lt;/em&gt;并于2008年发布的博客。或者我们希望标题为&lt;em&gt;&amp;ldquo; Lennon&amp;rdquo;的&lt;/em&gt;博客以及于2008年发布。由于单个 &lt;code&gt;Blog&lt;/code&gt; 有多个条目，这两个查询都是可能的，并且在某些情况下有意义。</target>
        </trans-unit>
        <trans-unit id="2bb3744667ab0bd820ede55958cf3ee20aeeb823" translate="yes" xml:space="preserve">
          <source>When you are sufficiently confident your app works with the new version of Django, you&amp;rsquo;re ready to go ahead and &lt;a href=&quot;deployment/index&quot;&gt;deploy&lt;/a&gt; your upgraded Django project.</source>
          <target state="translated">当您足够确信自己的应用程序可以使用新版本的Django时，就可以开始&lt;a href=&quot;deployment/index&quot;&gt;部署&lt;/a&gt;升级的Django项目了。</target>
        </trans-unit>
        <trans-unit id="c6e10bd215d5b8ce88fe2d29e14f0c3c51b28b17" translate="yes" xml:space="preserve">
          <source>When you are using management commands and wish to provide console output, you should write to &lt;code&gt;self.stdout&lt;/code&gt; and &lt;code&gt;self.stderr&lt;/code&gt;, instead of printing to &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; directly. By using these proxies, it becomes much easier to test your custom command. Note also that you don&amp;rsquo;t need to end messages with a newline character, it will be added automatically, unless you specify the &lt;code&gt;ending&lt;/code&gt; parameter:</source>
          <target state="translated">当使用管理命令并希望提供控制台输出时，应写入 &lt;code&gt;self.stdout&lt;/code&gt; 和 &lt;code&gt;self.stderr&lt;/code&gt; ，而不是直接打印到 &lt;code&gt;stdout&lt;/code&gt; 和 &lt;code&gt;stderr&lt;/code&gt; 。通过使用这些代理，测试自定义命令变得更加容易。还要注意，您不需要以换行符结尾的消息，它将自动添加，除非您指定 &lt;code&gt;ending&lt;/code&gt; 参数：</target>
        </trans-unit>
        <trans-unit id="13a5871d21107a4b7e9f3e5a544e075155803d54" translate="yes" xml:space="preserve">
          <source>When you call &lt;a href=&quot;#django.contrib.auth.logout&quot;&gt;&lt;code&gt;logout()&lt;/code&gt;&lt;/a&gt;, the session data for the current request is completely cleaned out. All existing data is removed. This is to prevent another person from using the same Web browser to log in and have access to the previous user&amp;rsquo;s session data. If you want to put anything into the session that will be available to the user immediately after logging out, do that &lt;em&gt;after&lt;/em&gt; calling &lt;a href=&quot;#django.contrib.auth.logout&quot;&gt;&lt;code&gt;django.contrib.auth.logout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当您调用&lt;a href=&quot;#django.contrib.auth.logout&quot;&gt; &lt;code&gt;logout()&lt;/code&gt; 时&lt;/a&gt;，当前请求的会话数据将被完全清除。所有现有数据都将被删除。这是为了防止其他人使用相同的Web浏览器登录并访问以前的用户的会话数据。如果要在注销后立即将任何可放入用户的会话放入会话中，请&lt;em&gt;在&lt;/em&gt;调用&lt;a href=&quot;#django.contrib.auth.logout&quot;&gt; &lt;code&gt;django.contrib.auth.logout()&lt;/code&gt; &lt;/a&gt;&lt;em&gt;之后&lt;/em&gt;执行此操作。</target>
        </trans-unit>
        <trans-unit id="0bec01b982f14d8fad8b76498a9eab958a614445" translate="yes" xml:space="preserve">
          <source>When you change running code that uses cached values, you may need to purge any existing cached values. The easiest way to do this is to flush the entire cache, but this can lead to the loss of cache values that are still valid and useful.</source>
          <target state="translated">当你改变使用缓存值的运行代码时,你可能需要清除任何现有的缓存值。最简单的方法是刷新整个缓存,但这可能导致仍然有效和有用的缓存值的丢失。</target>
        </trans-unit>
        <trans-unit id="cd67ab6234d346eaeaed46a1d06b46d489bb1f53" translate="yes" xml:space="preserve">
          <source>When you create a &lt;code&gt;Form&lt;/code&gt; class, the most important part is defining the fields of the form. Each field has custom validation logic, along with a few other hooks.</source>
          <target state="translated">创建 &lt;code&gt;Form&lt;/code&gt; 类时，最重要的部分是定义表单的字段。每个字段都有自定义验证逻辑以及其他一些挂钩。</target>
        </trans-unit>
        <trans-unit id="62699cdc477b72bf29185c2621e68c12d5731c36" translate="yes" xml:space="preserve">
          <source>When you create a new Django project using &lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;settings.py&lt;/code&gt; file is generated automatically and gets a random &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; value. This value is the key to securing signed data &amp;ndash; it is vital you keep this secure, or attackers could use it to generate their own signed values.</source>
          <target state="translated">使用&lt;a href=&quot;../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt;创建新的Django项目时，会自动生成 &lt;code&gt;settings.py&lt;/code&gt; 文件并获取一个随机的&lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;值。此值是保护签名数据的关键-保持此安全性至关重要，否则攻击者可能会使用它来生成自己的签名值。</target>
        </trans-unit>
        <trans-unit id="bca3a3d8e3eff409b97b0a424c72b4825c199f0b" translate="yes" xml:space="preserve">
          <source>When you define a foreign key or many-to-many relations to the user model, you should specify the custom model using the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting. For example:</source>
          <target state="translated">在定义与用户模型的外键或多对多关系时，应使用&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;设置指定自定义模型。例如：</target>
        </trans-unit>
        <trans-unit id="9abada09ee2a7643acb0f50bc1fb14cfd3361323" translate="yes" xml:space="preserve">
          <source>When you define a relationship in a model (i.e., a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;), instances of that model will have a convenient API to access the related object(s).</source>
          <target state="translated">当您在模型中定义关系（即&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;）时，该模型的实例将具有方便的API来访问相关对象。</target>
        </trans-unit>
        <trans-unit id="7ade15602eb4613839e7423bc150952f40c614a7" translate="yes" xml:space="preserve">
          <source>When you enable time zone support, Django converts aware datetime objects to the &lt;a href=&quot;#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; when they&amp;rsquo;re rendered in templates. This behaves very much like &lt;a href=&quot;formatting&quot;&gt;format localization&lt;/a&gt;.</source>
          <target state="translated">启用时区支持后，当在模板中呈现日期&lt;a href=&quot;#default-current-time-zone&quot;&gt;时间的&lt;/a&gt;对象时，Django会将其转换为当前时区。这非常类似于&lt;a href=&quot;formatting&quot;&gt;格式本地化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="598f93cd4b390f62ed8759df4ec3a5b17c146572" translate="yes" xml:space="preserve">
          <source>When you enable time zone support, Django interprets datetimes entered in forms in the &lt;a href=&quot;#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; and returns aware datetime objects in &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">启用时区支持后，Django会解释在&lt;a href=&quot;#default-current-time-zone&quot;&gt;当前时区中&lt;/a&gt;以表格形式输入的日期时间，并在 &lt;code&gt;cleaned_data&lt;/code&gt; 中返回可识别的日期时间对象。</target>
        </trans-unit>
        <trans-unit id="fab0c6ca61f7627dd8debe13e56e6873302f94fe" translate="yes" xml:space="preserve">
          <source>When you enable time zone support, you&amp;rsquo;ll encounter some errors because you&amp;rsquo;re using naive datetimes where Django expects aware datetimes. Such errors show up when running tests. You&amp;rsquo;ll quickly learn how to avoid invalid operations.</source>
          <target state="translated">启用时区支持时，您会遇到一些错误，因为您使用的是Django需要感知日期时间的原始日期时间。运行测试时会显示此类错误。您将快速学习如何避免无效操作。</target>
        </trans-unit>
        <trans-unit id="908372df97d370c7f6d4a09588cd8addd7a6a6b7" translate="yes" xml:space="preserve">
          <source>When you explicitly instantiate a form field like this, it is important to understand how &lt;code&gt;ModelForm&lt;/code&gt; and regular &lt;code&gt;Form&lt;/code&gt; are related.</source>
          <target state="translated">当您像这样显式实例化表单字段时，了解 &lt;code&gt;ModelForm&lt;/code&gt; 和常规 &lt;code&gt;Form&lt;/code&gt; 之间的关系非常重要。</target>
        </trans-unit>
        <trans-unit id="fd574b531e6529e9b4c184f74475a8c8c6784da6" translate="yes" xml:space="preserve">
          <source>When you have a lot of objects, the caching behavior of the &lt;code&gt;QuerySet&lt;/code&gt; can cause a large amount of memory to be used. In this case, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt;&lt;code&gt;iterator()&lt;/code&gt;&lt;/a&gt; may help.</source>
          <target state="translated">当您有很多对象时， &lt;code&gt;QuerySet&lt;/code&gt; 的缓存行为会导致使用大量内存。在这种情况下，&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt; &lt;code&gt;iterator()&lt;/code&gt; &lt;/a&gt;可能会有所帮助。</target>
        </trans-unit>
        <trans-unit id="0c88a75a0c21033676606747fa8679b116580319" translate="yes" xml:space="preserve">
          <source>When you have both &lt;code&gt;django.contrib.admin&lt;/code&gt; and &lt;code&gt;django.contrib.auth&lt;/code&gt; installed, the admin provides a convenient way to view and manage users, groups, and permissions. Users can be created and deleted like any Django model. Groups can be created, and permissions can be assigned to users or groups. A log of user edits to models made within the admin is also stored and displayed.</source>
          <target state="translated">当您同时安装了 &lt;code&gt;django.contrib.admin&lt;/code&gt; 和 &lt;code&gt;django.contrib.auth&lt;/code&gt; 时，管理员将提供一种方便的方法来查看和管理用户，组和权限。可以像创建任何Django模型一样创建和删除用户。可以创建组，并且可以将权限分配给用户或组。用户对在admin内进行的模型编辑的日志也将被存储和显示。</target>
        </trans-unit>
        <trans-unit id="e94a3a25595772d6e02a2dd78870a98c685517b6" translate="yes" xml:space="preserve">
          <source>When you have enabled formatting with &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt;, Django will try to use a locale specific format whenever it outputs a value in a template.</source>
          <target state="translated">当您启用&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;格式设置后，只要 Django在模板中输出值，它将尝试使用特定于语言环境的格式。</target>
        </trans-unit>
        <trans-unit id="0fb7161ed8a685fcfe3894909e8331cb64746c13" translate="yes" xml:space="preserve">
          <source>When you have more than one foreign key on an intermediary model to any (or even both) of the models participating in a many-to-many relationship, you &lt;em&gt;must&lt;/em&gt; specify &lt;code&gt;through_fields&lt;/code&gt;. This also applies to &lt;a href=&quot;#recursive-relationships&quot;&gt;recursive relationships&lt;/a&gt; when an intermediary model is used and there are more than two foreign keys to the model, or you want to explicitly specify which two Django should use.</source>
          <target state="translated">当您在参与多对多关系的任何（或什至两个）模型的中介模型上有多个外键时，&lt;em&gt;必须&lt;/em&gt;指定 &lt;code&gt;through_fields&lt;/code&gt; 。当使用中间模型并且该模型有两个以上外键时，或者您要明确指定应使用哪两个Django时，这也适用于&lt;a href=&quot;#recursive-relationships&quot;&gt;递归关系&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ef917a0760350a205f29f49f83a0fa869ef77e5e" translate="yes" xml:space="preserve">
          <source>When you interrogate the &lt;code&gt;media&lt;/code&gt; attribute of a widget or form, the value that is returned is a &lt;code&gt;forms.Media&lt;/code&gt; object. As we have already seen, the string representation of a &lt;code&gt;Media&lt;/code&gt; object is the HTML required to include the relevant files in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; block of your HTML page.</source>
          <target state="translated">询问窗口小部件或表单的 &lt;code&gt;media&lt;/code&gt; 属性时，返回的值是 &lt;code&gt;forms.Media&lt;/code&gt; 对象。正如我们已经看到的， &lt;code&gt;Media&lt;/code&gt; 对象的字符串表示形式是将相关文件包含在HTML页面的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 块中所需的HTML。</target>
        </trans-unit>
        <trans-unit id="92eff6980ce197131f0e2a5fe9daf993ede549cf" translate="yes" xml:space="preserve">
          <source>When you load a custom tag or filter library, the tags/filters are only made available to the current template &amp;ndash; not any parent or child templates along the template-inheritance path.</source>
          <target state="translated">加载自定义标签或过滤器库时，标签/过滤器仅可用于当前模板，而不会沿模板继承路径使用任何父模板或子模板。</target>
        </trans-unit>
        <trans-unit id="f8c9cfe0a0e3db566ebf271f111b2fee63c340fd" translate="yes" xml:space="preserve">
          <source>When you loop over the list of messages in a template, what you get are instances of the &lt;code&gt;Message&lt;/code&gt; class. They have only a few attributes:</source>
          <target state="translated">当您遍历模板中的消息列表时，得到的是 &lt;code&gt;Message&lt;/code&gt; 类的实例。它们只有几个属性：</target>
        </trans-unit>
        <trans-unit id="aef5dfe6d6895debd3712fd7bafda94fb0e9884c" translate="yes" xml:space="preserve">
          <source>When you manually render the forms yourself, be sure to render the management form as shown above. See the &lt;a href=&quot;formsets#understanding-the-managementform&quot;&gt;management form documentation&lt;/a&gt;.</source>
          <target state="translated">当您自己手动呈现表单时，请确保如上所述呈现管理表单。请参阅&lt;a href=&quot;formsets#understanding-the-managementform&quot;&gt;管理表单文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a3872769f2c93a112fe1c0dc5bdc7dde36a6b5fc" translate="yes" xml:space="preserve">
          <source>When you need more fine-grained control you may use per-view conditional processing functions.</source>
          <target state="translated">当你需要更精细的控制时,你可以使用每个视图的条件处理功能。</target>
        </trans-unit>
        <trans-unit id="a7dbc3600068917a2ca0ed37381dd462dde39596" translate="yes" xml:space="preserve">
          <source>When you only care if something happened in a particular year, hour, or day, but not the exact second, then &lt;code&gt;Trunc&lt;/code&gt; (and its subclasses) can be useful to filter or aggregate your data. For example, you can use &lt;code&gt;Trunc&lt;/code&gt; to calculate the number of sales per day.</source>
          <target state="translated">当您仅关心某件事是在特定的年，小时或日中发生的，而不是确切的秒时，则 &lt;code&gt;Trunc&lt;/code&gt; （及其子类）对于过滤或汇总数据很有用。例如，您可以使用 &lt;code&gt;Trunc&lt;/code&gt; 计算每天的销售数量。</target>
        </trans-unit>
        <trans-unit id="6a70ca33ccd762221c87694d4464849c2dccaf63" translate="yes" xml:space="preserve">
          <source>When you only want a &lt;code&gt;dict&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt; of values, and don&amp;rsquo;t need ORM model objects, make appropriate usage of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt;. These can be useful for replacing model objects in template code - as long as the dicts you supply have the same attributes as those used in the template, you are fine.</source>
          <target state="translated">当您只希望使用 &lt;code&gt;dict&lt;/code&gt; 或值 &lt;code&gt;list&lt;/code&gt; ，而又不需要ORM模型对象时，请适当地使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;。这些对于替换模板代码中的模型对象很有用-只要您提供的字典具有与模板中使用的字典相同的属性，就可以了。</target>
        </trans-unit>
        <trans-unit id="edf48e7a2c9121d0da51134dbb9264c7da638bba" translate="yes" xml:space="preserve">
          <source>When you put &lt;code&gt;'django.contrib.admin'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting, Django automatically looks for an &lt;code&gt;admin&lt;/code&gt; module in each application and imports it.</source>
          <target state="translated">当您在&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;设置中添加 &lt;code&gt;'django.contrib.admin'&lt;/code&gt; 时，Django会在每个应用程序中自动查找一个 &lt;code&gt;admin&lt;/code&gt; 模块并将其导入。</target>
        </trans-unit>
        <trans-unit id="fe4cbecc6de5bd6c365bb7d2a9ac544dac1bbf74" translate="yes" xml:space="preserve">
          <source>When you raise &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; from within a view, Django loads a special view devoted to handling 404 errors. By default, it&amp;rsquo;s the view &lt;a href=&quot;#django.views.defaults.page_not_found&quot;&gt;&lt;code&gt;django.views.defaults.page_not_found()&lt;/code&gt;&lt;/a&gt;, which either produces a &amp;ldquo;Not Found&amp;rdquo; message or loads and renders the template &lt;code&gt;404.html&lt;/code&gt; if you created it in your root template directory.</source>
          <target state="translated">当您从视图中引发&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; 时&lt;/a&gt;，Django会加载一个专门用于处理404错误的特殊视图。默认情况下，它是视图&lt;a href=&quot;#django.views.defaults.page_not_found&quot;&gt; &lt;code&gt;django.views.defaults.page_not_found()&lt;/code&gt; &lt;/a&gt;，如果您在根模板目录中创建了 &lt;code&gt;404.html&lt;/code&gt; 模板，它将生成&amp;ldquo;未找到&amp;rdquo;消息或加载并呈现模板404.html。</target>
        </trans-unit>
        <trans-unit id="3c0ada4cfb5c18cee99b9189a8d71873f89eb3ce" translate="yes" xml:space="preserve">
          <source>When you return an error such as &lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotFound&quot;&gt;&lt;code&gt;HttpResponseNotFound&lt;/code&gt;&lt;/a&gt;, you&amp;rsquo;re responsible for defining the HTML of the resulting error page:</source>
          <target state="translated">当返回诸如&lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotFound&quot;&gt; &lt;code&gt;HttpResponseNotFound&lt;/code&gt; 之类&lt;/a&gt;的错误时，您负责定义产生的错误页面的HTML：</target>
        </trans-unit>
        <trans-unit id="8ccf29e4ae1a45b659be60303b8ce7fdddcfb2c2" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;./manage.py test&lt;/code&gt;, Django looks at the &lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt;&lt;code&gt;TEST_RUNNER&lt;/code&gt;&lt;/a&gt; setting to determine what to do. By default, &lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt;&lt;code&gt;TEST_RUNNER&lt;/code&gt;&lt;/a&gt; points to &lt;code&gt;'django.test.runner.DiscoverRunner'&lt;/code&gt;. This class defines the default Django testing behavior. This behavior involves:</source>
          <target state="translated">当您运行 &lt;code&gt;./manage.py test&lt;/code&gt; 时，Django会查看&lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt; &lt;code&gt;TEST_RUNNER&lt;/code&gt; &lt;/a&gt;设置以确定要执行的操作。默认情况下，&lt;a href=&quot;../../ref/settings#std:setting-TEST_RUNNER&quot;&gt; &lt;code&gt;TEST_RUNNER&lt;/code&gt; &lt;/a&gt;指向 &lt;code&gt;'django.test.runner.DiscoverRunner'&lt;/code&gt; 。此类定义默认的Django测试行为。此行为涉及：</target>
        </trans-unit>
        <trans-unit id="a2d39420cf515d7fec774896f9e595c93550c39a" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;makemessages&lt;/code&gt; from the root directory of your project, the extracted strings will be automatically distributed to the proper message files. That is, a string extracted from a file of an app containing a &lt;code&gt;locale&lt;/code&gt; directory will go in a message file under that directory. A string extracted from a file of an app without any &lt;code&gt;locale&lt;/code&gt; directory will either go in a message file under the directory listed first in &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; or will generate an error if &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; is empty.</source>
          <target state="translated">当从项目的根目录运行 &lt;code&gt;makemessages&lt;/code&gt; 时，提取的字符串将自动分发到正确的消息文件中。也就是说，从包含 &lt;code&gt;locale&lt;/code&gt; 目录的应用程序文件中提取的字符串将进入该目录下的消息文件中。从没有任何 &lt;code&gt;locale&lt;/code&gt; 目录的应用程序文件中提取的字符串将进入消息文件，该消息文件位于&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; 中&lt;/a&gt;首先列出的目录下，或者如果&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; &lt;/a&gt;为空，则将生成错误。</target>
        </trans-unit>
        <trans-unit id="94c63f9fa31d5b90afb9266d77802185ba9ffee5" translate="yes" xml:space="preserve">
          <source>When you run migrations, Django is working from historical versions of your models stored in the migration files. If you write Python code using the &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; operation, or if you have &lt;code&gt;allow_migrate&lt;/code&gt; methods on your database routers, you &lt;strong&gt;need to use&lt;/strong&gt; these historical model versions rather than importing them directly.</source>
          <target state="translated">运行迁移时，Django正在使用存储在迁移文件中的模型的历史版本进行工作。如果使用&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt;操作编写Python代码，或者数据库路由器上具有 &lt;code&gt;allow_migrate&lt;/code&gt; 方法，则&lt;strong&gt;需要使用&lt;/strong&gt;这些历史模型版本，而不是直接导入它们。</target>
        </trans-unit>
        <trans-unit id="eef43b49ed5faa6b2a2a01758940feaac11b71b5" translate="yes" xml:space="preserve">
          <source>When you run your tests, you&amp;rsquo;ll see a number of messages as the test runner prepares itself. You can control the level of detail of these messages with the &lt;code&gt;verbosity&lt;/code&gt; option on the command line:</source>
          <target state="translated">运行测试时，在测试运行器准备工作时，您会看到许多消息。您可以在命令行上使用 &lt;code&gt;verbosity&lt;/code&gt; 选项控制这些消息的详细程度：</target>
        </trans-unit>
        <trans-unit id="f1fe5466a06d0a950808ef949155df4e132681d6" translate="yes" xml:space="preserve">
          <source>When you save an object, Django performs the following steps:</source>
          <target state="translated">当你保存一个对象时,Django会执行以下步骤。</target>
        </trans-unit>
        <trans-unit id="a72aaef0ac9be0d03bc03e6e5684667b83be8c40" translate="yes" xml:space="preserve">
          <source>When you set up the intermediary model, you explicitly specify foreign keys to the models that are involved in the many-to-many relationship. This explicit declaration defines how the two models are related.</source>
          <target state="translated">当您设置中介模型时,您显式地指定了涉及多对多关系的模型的外键。这个显式声明定义了两个模型的关系。</target>
        </trans-unit>
        <trans-unit id="af78f5580f1c6e3cbdeed59306a9995f7b05165d" translate="yes" xml:space="preserve">
          <source>When you specify an intermediary model using the &lt;code&gt;through&lt;/code&gt; argument to a &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;, the admin will not display a widget by default. This is because each instance of that intermediary model requires more information than could be displayed in a single widget, and the layout required for multiple widgets will vary depending on the intermediate model.</source>
          <target state="translated">当您使用&lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;through&lt;/code&gt; 参数指定中介模型时，默认情况下，管理员不会显示窗口小部件。这是因为该中间模型的每个实例所需的信息多于单个窗口小部件中显示的信息，并且多个窗口小部件所需的布局将根据中间模型而有所不同。</target>
        </trans-unit>
        <trans-unit id="e258e34f34049ccc90dc565864306d8cde3ec398" translate="yes" xml:space="preserve">
          <source>When you specify field names, you &lt;em&gt;must&lt;/em&gt; provide an &lt;code&gt;order_by()&lt;/code&gt; in the &lt;code&gt;QuerySet&lt;/code&gt;, and the fields in &lt;code&gt;order_by()&lt;/code&gt; must start with the fields in &lt;code&gt;distinct()&lt;/code&gt;, in the same order.</source>
          <target state="translated">当您指定字段名称，则&lt;em&gt;必须&lt;/em&gt;提供一个 &lt;code&gt;order_by()&lt;/code&gt; 在 &lt;code&gt;QuerySet&lt;/code&gt; ，并在田间 &lt;code&gt;order_by()&lt;/code&gt; 必须在田间开始 &lt;code&gt;distinct()&lt;/code&gt; 以相同的顺序。</target>
        </trans-unit>
        <trans-unit id="d06c1cbf4db99bb2919956dcde83a74e905e5efd" translate="yes" xml:space="preserve">
          <source>When you start the server, and each time you change Python code while the server is running, the system check framework will check your entire Django project for some common errors (see the &lt;a href=&quot;#django-admin-check&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; command). If any errors are found, they will be printed to standard output.</source>
          <target state="translated">启动服务器时，以及每次在服务器运行时更​​改Python代码时，系统检查框架都会检查整个Django项目是否存在一些常见错误（请参见&lt;a href=&quot;#django-admin-check&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;命令）。如果发现任何错误，它们将被打印到标准输出。</target>
        </trans-unit>
        <trans-unit id="85b733e2e5bceac5a30d09d4c8bd885c451ac3b3" translate="yes" xml:space="preserve">
          <source>When you start your project with a custom user model, stop to consider if this is the right choice for your project.</source>
          <target state="translated">当你用自定义用户模型开始你的项目时,请停下来考虑一下这是否是你项目的正确选择。</target>
        </trans-unit>
        <trans-unit id="fb58eb9d111d65c5931d5b8864ba414d93ee767f" translate="yes" xml:space="preserve">
          <source>When you subclass a custom &lt;code&gt;Form&lt;/code&gt; class, the resulting subclass will include all fields of the parent class(es), followed by the fields you define in the subclass.</source>
          <target state="translated">当您对自定义 &lt;code&gt;Form&lt;/code&gt; 类进行子类化时，生成的子类将包括父类的所有字段，然后是您在子类中定义的字段。</target>
        </trans-unit>
        <trans-unit id="26631416795e892a2a8c86d97764f07642fd08ab" translate="yes" xml:space="preserve">
          <source>When you supply &lt;code&gt;None&lt;/code&gt; as a value for an app, Django will consider the app as an app without migrations regardless of an existing &lt;code&gt;migrations&lt;/code&gt; submodule. This can be used, for example, in a test settings file to skip migrations while testing (tables will still be created for the apps&amp;rsquo; models). If this is used in your general project settings, remember to use the &lt;a href=&quot;django-admin#cmdoption-migrate-run-syncdb&quot;&gt;&lt;code&gt;migrate
--run-syncdb&lt;/code&gt;&lt;/a&gt; option if you want to create tables for the app.</source>
          <target state="translated">当您提供 &lt;code&gt;None&lt;/code&gt; 作为应用程序的值时，无论现有的 &lt;code&gt;migrations&lt;/code&gt; 子模块如何，Django都会将该应用程序视为不进行迁移的应用程序。例如，可以在测试设置文件中使用它来跳过测试过程中的迁移（仍将为应用程序的模型创建表）。如果在常规项目设置中使用了此选项，则如果要为应用程序创建表，请记住使用&lt;a href=&quot;django-admin#cmdoption-migrate-run-syncdb&quot;&gt; &lt;code&gt;migrate --run-syncdb&lt;/code&gt; &lt;/a&gt;选项。</target>
        </trans-unit>
        <trans-unit id="d5d4ad6f03f661e86cf4b4b69461f98e67cf388f" translate="yes" xml:space="preserve">
          <source>When you supply &lt;code&gt;None&lt;/code&gt; as a value for an app, Django will consider the app as an app without migrations regardless of an existing &lt;code&gt;migrations&lt;/code&gt; submodule. This can be used, for example, in a test settings file to skip migrations while testing (tables will still be created for the apps&amp;rsquo; models). To disable migrations for all apps during tests, you can set the &lt;a href=&quot;#std:setting-TEST_MIGRATE&quot;&gt;&lt;code&gt;MIGRATE&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt; instead. If &lt;code&gt;MIGRATION_MODULES&lt;/code&gt; is used in your general project settings, remember to use the &lt;a href=&quot;django-admin#cmdoption-migrate-run-syncdb&quot;&gt;&lt;code&gt;migrate --run-syncdb&lt;/code&gt;&lt;/a&gt; option if you want to create tables for the app.</source>
          <target state="translated">当您将 &lt;code&gt;None&lt;/code&gt; 作为应用程序的值提供时，Django会将该应用程序视为不进行迁移的应用程序，而与现有的 &lt;code&gt;migrations&lt;/code&gt; 子模块无关。例如，可以在测试设置文件中使用它来跳过测试过程中的迁移（仍将为应用程序的模型创建表）。要在测试期间禁用所有应用程序的迁移，可以将&lt;a href=&quot;#std:setting-TEST_MIGRATE&quot;&gt; &lt;code&gt;MIGRATE&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;False&lt;/code&gt; 。如果在常规项目设置中使用了 &lt;code&gt;MIGRATION_MODULES&lt;/code&gt; ，&lt;a href=&quot;django-admin#cmdoption-migrate-run-syncdb&quot;&gt; &lt;code&gt;migrate --run-syncdb&lt;/code&gt; &lt;/a&gt;为应用程序创建表时，请记住使用migration --run-syncdb选项。</target>
        </trans-unit>
        <trans-unit id="b4459c991a14a4fa100615fdfbd04759a6bbdda7" translate="yes" xml:space="preserve">
          <source>When you try to load this serialized data, Django will use the &lt;code&gt;get_by_natural_key()&lt;/code&gt; method to resolve &lt;code&gt;[&quot;Douglas&quot;, &quot;Adams&quot;]&lt;/code&gt; into the primary key of an actual &lt;code&gt;Person&lt;/code&gt; object.</source>
          <target state="translated">当您尝试加载此序列化数据时，Django将使用 &lt;code&gt;get_by_natural_key()&lt;/code&gt; 方法将 &lt;code&gt;[&quot;Douglas&quot;, &quot;Adams&quot;]&lt;/code&gt; 解析为实际 &lt;code&gt;Person&lt;/code&gt; 对象的主键。</target>
        </trans-unit>
        <trans-unit id="47293a3da91bf58fd7984d1ea135728a3931013e" translate="yes" xml:space="preserve">
          <source>When you use Django&amp;rsquo;s rendering shortcuts, CSS classes are used to indicate required form fields or fields that contain errors. If you&amp;rsquo;re manually rendering a form, you can access these CSS classes using the &lt;code&gt;css_classes&lt;/code&gt; method:</source>
          <target state="translated">使用Django的呈现快捷方式时，CSS类用于指示所需的表单字段或包含错误的字段。如果您手动呈现表单，则可以使用 &lt;code&gt;css_classes&lt;/code&gt; 方法访问以下CSS类：</target>
        </trans-unit>
        <trans-unit id="31d348400106f6980d491bb505f5b30d46c4b025" translate="yes" xml:space="preserve">
          <source>When you use Django, you have to tell it which settings you&amp;rsquo;re using. Do this by using an environment variable, &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用Django时，必须告诉它所使用的设置。通过使用环境变量&lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;来执行此操作。</target>
        </trans-unit>
        <trans-unit id="5ae280409351d91e2dda0008e83557801d8d50a6" translate="yes" xml:space="preserve">
          <source>When you use Django, you have to tell it which settings you&amp;rsquo;re using. Do this by using an environment variable, &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;.</source>
          <target state="translated">使用Django时，必须告诉它所使用的设置。通过使用环境变量 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 来执行此操作。</target>
        </trans-unit>
        <trans-unit id="54667b9197575a345cb73b4665c2d6cf36f5c3a7" translate="yes" xml:space="preserve">
          <source>When you use a &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, the call to &lt;a href=&quot;../forms/api#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt; will perform these validation steps for all the fields that are included on the form. See the &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;ModelForm documentation&lt;/a&gt; for more information. You should only need to call a model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt;&lt;code&gt;full_clean()&lt;/code&gt;&lt;/a&gt; method if you plan to handle validation errors yourself, or if you have excluded fields from the &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; that require validation.</source>
          <target state="translated">当您使用&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; 时&lt;/a&gt;，对&lt;a href=&quot;../forms/api#django.forms.Form.is_valid&quot;&gt; &lt;code&gt;is_valid()&lt;/code&gt; &lt;/a&gt;的调用将对表单中包括的所有字段执行这些验证步骤。有关更多信息，请参见&lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;ModelForm文档&lt;/a&gt;。仅当您计划自己处理验证错误，或者从&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;中排除了需要验证的字段时，才需要调用模型的&lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt; &lt;code&gt;full_clean()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="343ab00ce81ddd4fc99010180d70d7758bcb4fd1" translate="yes" xml:space="preserve">
          <source>When you use a &lt;a href=&quot;../ref/models/fields#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/models/fields#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt;, Django provides a set of APIs you can use to deal with that file.</source>
          <target state="translated">当您使用&lt;a href=&quot;../ref/models/fields#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../ref/models/fields#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; 时&lt;/a&gt;，Django提供了一组可用于处理该文件的API。</target>
        </trans-unit>
        <trans-unit id="8e89c93410c3cc7530bbaa3f04a9ad9466fbc95c" translate="yes" xml:space="preserve">
          <source>When you use a &lt;code&gt;FileField&lt;/code&gt; in a form, you must also remember to &lt;a href=&quot;api#binding-uploaded-files&quot;&gt;bind the file data to the form&lt;/a&gt;.</source>
          <target state="translated">在表单中使用 &lt;code&gt;FileField&lt;/code&gt; 时，还必须记住&lt;a href=&quot;api#binding-uploaded-files&quot;&gt;将文件数据绑定到表单&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0e10d7719c6936754850d348b5372edb2f6f6659" translate="yes" xml:space="preserve">
          <source>When you use a backend that lacks support for tablespaces, Django ignores all tablespace-related options.</source>
          <target state="translated">当你使用一个不支持表空间的后端时,Django会忽略所有与表空间相关的选项。</target>
        </trans-unit>
        <trans-unit id="46ea224f1406c5b2adedbe9bdf3d42ebade96a3e" translate="yes" xml:space="preserve">
          <source>When you use an &lt;code&gt;ImageField&lt;/code&gt; on a form, you must also remember to &lt;a href=&quot;api#binding-uploaded-files&quot;&gt;bind the file data to the form&lt;/a&gt;.</source>
          <target state="translated">在表单上使用 &lt;code&gt;ImageField&lt;/code&gt; 时，还必须记住&lt;a href=&quot;api#binding-uploaded-files&quot;&gt;将文件数据绑定到表单&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="320dbef19134d4c759b58f8b4e2879afff472b9c" translate="yes" xml:space="preserve">
          <source>When you use both the pluralization feature and bind values to local variables in addition to the counter value, keep in mind that the &lt;code&gt;blocktrans&lt;/code&gt; construct is internally converted to an &lt;code&gt;ngettext&lt;/code&gt; call. This means the same &lt;a href=&quot;#pluralization-var-notes&quot;&gt;notes regarding ngettext variables&lt;/a&gt; apply.</source>
          <target state="translated">当您同时使用复数功能并将除绑定值之外的值绑定到局部变量时，请记住， &lt;code&gt;blocktrans&lt;/code&gt; 构造在内部转换为 &lt;code&gt;ngettext&lt;/code&gt; 调用。这意味着&lt;a href=&quot;#pluralization-var-notes&quot;&gt;关于ngettext变量的注释&lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="e4cd01e394f2002ebbe9dae732852677b4ace208" translate="yes" xml:space="preserve">
          <source>When you use both the pluralization feature and bind values to local variables in addition to the counter value, keep in mind that the &lt;code&gt;blocktranslate&lt;/code&gt; construct is internally converted to an &lt;code&gt;ngettext&lt;/code&gt; call. This means the same &lt;a href=&quot;#pluralization-var-notes&quot;&gt;notes regarding ngettext variables&lt;/a&gt; apply.</source>
          <target state="translated">当您同时使用复数功能并将除绑定值之外的值绑定到局部变量时，请记住， &lt;code&gt;blocktranslate&lt;/code&gt; 构造在内部转换为 &lt;code&gt;ngettext&lt;/code&gt; 调用。这意味着适用于&lt;a href=&quot;#pluralization-var-notes&quot;&gt;有关ngettext变量&lt;/a&gt;的相同注释。</target>
        </trans-unit>
        <trans-unit id="cec8beaeb7e004da1aedec1b1e92232edc644827" translate="yes" xml:space="preserve">
          <source>When you use the subscript operator, the value that is returned is a new &lt;code&gt;Media&lt;/code&gt; object &amp;ndash; but one that only contains the media of interest.</source>
          <target state="translated">当您使用下标运算符时，返回的值是一个新的 &lt;code&gt;Media&lt;/code&gt; 对象，但是只包含感兴趣的媒体。</target>
        </trans-unit>
        <trans-unit id="9a0e92cde80b807eb7a9e9e0771d2bded37c3ac6" translate="yes" xml:space="preserve">
          <source>When you want to update your copy of the Django source code, run the command &lt;code&gt;git pull&lt;/code&gt; from within the &lt;code&gt;django&lt;/code&gt; directory. When you do this, Git will download any changes.</source>
          <target state="translated">当您想更新Django源代码的副本时，请从 &lt;code&gt;django&lt;/code&gt; 目录中运行命令 &lt;code&gt;git pull&lt;/code&gt; 。执行此操作时，Git将下载所有更改。</target>
        </trans-unit>
        <trans-unit id="d79bb1dd55226df569404b8960a7a9b9783bcce1" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re comfortable with forms and generic views, read &lt;a href=&quot;tutorial05&quot;&gt;part 5 of this tutorial&lt;/a&gt; to learn about testing our polls app.</source>
          <target state="translated">如果您熟悉表单和通用视图，请阅读&lt;a href=&quot;tutorial05&quot;&gt;本教程的第5部分，&lt;/a&gt;以了解有关测试民意测验应用程序的信息。</target>
        </trans-unit>
        <trans-unit id="fad2c62d53674683c06dec9c5bf83ecd5054b5a9" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re comfortable with testing Django views, read &lt;a href=&quot;tutorial06&quot;&gt;part 6 of this tutorial&lt;/a&gt; to learn about static files management.</source>
          <target state="translated">如果您愿意测试Django视图，请阅读&lt;a href=&quot;tutorial06&quot;&gt;本教程的第6部分，&lt;/a&gt;以了解静态文件管理。</target>
        </trans-unit>
        <trans-unit id="02ba9563b51cee67ba1ac84a5f027de0a6ad34d0" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re comfortable with the basic request and response flow, read &lt;a href=&quot;tutorial02&quot;&gt;part 2 of this tutorial&lt;/a&gt; to start working with the database.</source>
          <target state="translated">如果您对基本的请求和响应流程感到满意，请阅读&lt;a href=&quot;tutorial02&quot;&gt;本教程的第2部分&lt;/a&gt;以开始使用数据库。</target>
        </trans-unit>
        <trans-unit id="2847bdcdd13b53e198bfb0e43eb37e646833d96e" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re comfortable with the models API and have familiarized yourself with the admin site, read &lt;a href=&quot;tutorial03&quot;&gt;part 3 of this tutorial&lt;/a&gt; to learn about how to add more views to our polls app.</source>
          <target state="translated">当您熟悉模型API并熟悉管理站点后，请阅读&lt;a href=&quot;tutorial03&quot;&gt;本教程的第3部分，&lt;/a&gt;以了解如何向我们的民意调查应用添加更多视图。</target>
        </trans-unit>
        <trans-unit id="01c3594bd85009815b256384c703ca67a84f2aca" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re comfortable with the static files, read &lt;a href=&quot;tutorial07&quot;&gt;part 7 of this tutorial&lt;/a&gt; to learn how to customize Django&amp;rsquo;s automatically-generated admin site.</source>
          <target state="translated">当您对静态文件感到满意时，请阅读&lt;a href=&quot;tutorial07&quot;&gt;本教程的第7部分，&lt;/a&gt;以了解如何自定义Django的自动生成的管理网站。</target>
        </trans-unit>
        <trans-unit id="72973a7865804a7a4621af28424b1d31d00fbb8c" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re comfortable with writing views, read &lt;a href=&quot;tutorial04&quot;&gt;part 4 of this tutorial&lt;/a&gt; to learn the basics about form processing and generic views.</source>
          <target state="translated">当您习惯于编写视图时，请阅读&lt;a href=&quot;tutorial04&quot;&gt;本教程的第4部分，&lt;/a&gt;以了解有关表单处理和通用视图的基础知识。</target>
        </trans-unit>
        <trans-unit id="fbb75eb0d1954df8a37938afb5b511b6709d1b34" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re done previewing the patch, hit the &lt;code&gt;q&lt;/code&gt; key to return to the command line. If the patch&amp;rsquo;s content looked okay, it&amp;rsquo;s time to commit the changes.</source>
          <target state="translated">预览补丁程序后，按 &lt;code&gt;q&lt;/code&gt; 键返回到命令行。如果补丁的内容看起来还可以，那么该提交更改了。</target>
        </trans-unit>
        <trans-unit id="cb5aebe1e169914842620064134dcff194307daf" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re only dealing with many-to-many relationships such as mixing and matching pizzas and toppings, a standard &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; is all you need. However, sometimes you may need to associate data with the relationship between two models.</source>
          <target state="translated">当您仅处理多对多关系（例如混合和匹配比萨饼和浇头）时，您需要一个标准的&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;。但是，有时您可能需要将数据与两个模型之间的关系相关联。</target>
        </trans-unit>
        <trans-unit id="6b910842b365f4ef062d98c3052e31a9f5a499e3" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re refactoring or modifying old code, you can use tests to ensure your changes haven&amp;rsquo;t affected your application&amp;rsquo;s behavior unexpectedly.</source>
          <target state="translated">重构或修改旧代码时，可以使用测试来确保所做的更改不会意外影响应用程序的行为。</target>
        </trans-unit>
        <trans-unit id="0c1280baf245e43c78dd06873e878fcfc39d9796" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re running a public site you should always turn off the &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting. That will make your server run much faster, and will also prevent malicious users from seeing details of your application that can be revealed by the error pages.</source>
          <target state="translated">在运行公共站点时，应始终关闭&lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;设置。这将使您的服务器运行得更快，并且还可以防止恶意用户查看错误页面可以显示的应用程序详细信息。</target>
        </trans-unit>
        <trans-unit id="580f6ac8231fcd84a1ce95defb8bf88801dc4549" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re writing &lt;a href=&quot;../topics/testing/overview&quot;&gt;unit tests&lt;/a&gt; of how your views act with certain fixture data, you can use &lt;code&gt;testserver&lt;/code&gt; to interact with the views in a Web browser, manually.</source>
          <target state="translated">当编写关于视图如何使用某些灯具数据的&lt;a href=&quot;../topics/testing/overview&quot;&gt;单元测试&lt;/a&gt;时，可以使用 &lt;code&gt;testserver&lt;/code&gt; 在Web浏览器中手动与视图进行交互。</target>
        </trans-unit>
        <trans-unit id="fef10092b9162f12e7aaaff9ca85a5ad4f067f84" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re writing new code, you can use tests to validate your code works as expected.</source>
          <target state="translated">在编写新代码时，可以使用测试来验证代码是否按预期工作。</target>
        </trans-unit>
        <trans-unit id="042cab17a1eeb5ea2febda688598424130e722fb" translate="yes" xml:space="preserve">
          <source>When your site is served via HTTPS, &lt;a href=&quot;csrf#using-csrf&quot;&gt;Django&amp;rsquo;s CSRF protection system&lt;/a&gt; requires the &lt;code&gt;Referer&lt;/code&gt; header to be present, so completely disabling the &lt;code&gt;Referer&lt;/code&gt; header will interfere with CSRF protection. To gain most of the benefits of disabling &lt;code&gt;Referer&lt;/code&gt; headers while also keeping CSRF protection, consider enabling only same-origin referrers.</source>
          <target state="translated">通过HTTPS为您的网站提供服务时，&lt;a href=&quot;csrf#using-csrf&quot;&gt;Django的CSRF保护系统&lt;/a&gt;要求提供 &lt;code&gt;Referer&lt;/code&gt; 标头，因此完全禁用 &lt;code&gt;Referer&lt;/code&gt; 标头将干扰CSRF保护。要获得禁用 &lt;code&gt;Referer&lt;/code&gt; 标头的大部分好处，同时又保持CSRF保护，请考虑仅启用同源同源程序。</target>
        </trans-unit>
        <trans-unit id="41a1b057ed129ea2b16a82a687c98724e627a109" translate="yes" xml:space="preserve">
          <source>When your static files change, run &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; locally.</source>
          <target state="translated">当您的静态文件更改时，请在本地运行&lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="45c377f3d9fd40ff822a8edf4c63ed50ee513ab4" translate="yes" xml:space="preserve">
          <source>Whenever Django encounters &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;, it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing.</source>
          <target state="translated">每当Django遇到&lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; 时&lt;/a&gt;，它都会砍掉匹配到该点的URL的任何部分，并将剩余的字符串发送到包含的URLconf进行进一步处理。</target>
        </trans-unit>
        <trans-unit id="e3acaace95a729cf5c4732c35daeb05acc2c33db" translate="yes" xml:space="preserve">
          <source>Whenever you call &lt;code&gt;only()&lt;/code&gt; it &lt;em&gt;replaces&lt;/em&gt; the set of fields to load immediately. The method&amp;rsquo;s name is mnemonic: &lt;strong&gt;only&lt;/strong&gt; those fields are loaded immediately; the remainder are deferred. Thus, successive calls to &lt;code&gt;only()&lt;/code&gt; result in only the final fields being considered:</source>
          <target state="translated">每当您调用 &lt;code&gt;only()&lt;/code&gt; 时,它都会&lt;em&gt;替换&lt;/em&gt;要立即加载的字段集。该方法的名称为助记符：&lt;strong&gt;仅&lt;/strong&gt;立即加载这些字段；其余的则递延。因此，连续调用 &lt;code&gt;only()&lt;/code&gt; 只会导致考虑最后的字段：</target>
        </trans-unit>
        <trans-unit id="ce486967d039b16157c02bb77db966a70b5e85de" translate="yes" xml:space="preserve">
          <source>Whenever you instantiate a Django model, this signal is sent at the beginning of the model&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method.</source>
          <target state="translated">每当您实例化Django模型时，都会在模型的 &lt;code&gt;__init__()&lt;/code&gt; 方法的开始处发送此信号。</target>
        </trans-unit>
        <trans-unit id="d39ebfc1a10205b8f8d644a1e733171bb64aa708" translate="yes" xml:space="preserve">
          <source>Whenever you specify a field on a form, Django will use a default widget that is appropriate to the type of data that is to be displayed. To find which widget is used on which field, see the documentation about &lt;a href=&quot;fields#built-in-fields&quot;&gt;Built-in Field classes&lt;/a&gt;.</source>
          <target state="translated">每当您在表单上指定字段时，Django都会使用适合于要显示的数据类型的默认小部件。要查找在哪个字段上使用哪个窗口小部件，请参阅关于&lt;a href=&quot;fields#built-in-fields&quot;&gt;内置字段类&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="a108e6c3153039f249b827a17bcf2c7807ed1fec" translate="yes" xml:space="preserve">
          <source>Whenever you use strings with Django &amp;ndash; e.g., in database lookups, template rendering or anywhere else &amp;ndash; you have two choices for encoding those strings. You can use normal strings or bytestrings (starting with a &amp;lsquo;b&amp;rsquo;).</source>
          <target state="translated">每当您在Django中使用字符串时（例如，在数据库查找，模板渲染或其他任何地方），都有两种选择可以对这些字符串进行编码。您可以使用普通的字符串或字节字符串（以&amp;ldquo; b&amp;rdquo;开头）。</target>
        </trans-unit>
        <trans-unit id="ca97d1810905ddcb8ae8d76cc00f34b0b2ca2131" translate="yes" xml:space="preserve">
          <source>Where Django finds fixture files</source>
          <target state="translated">Django在哪里找到夹具文件</target>
        </trans-unit>
        <trans-unit id="94010e6a538a60d311f5adb37ade5382e690daae" translate="yes" xml:space="preserve">
          <source>Where a policy value is &lt;a href=&quot;https://w3c.github.io/webappsec-referrer-policy/#unknown-policy-values&quot;&gt;unknown&lt;/a&gt; by a user agent, it is possible to specify multiple policy values to provide a fallback. The last specified value that is understood takes precedence. To support this, an iterable or comma-separated string can be used with &lt;a href=&quot;settings#std:setting-SECURE_REFERRER_POLICY&quot;&gt;&lt;code&gt;SECURE_REFERRER_POLICY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如果用户代理&lt;a href=&quot;https://w3c.github.io/webappsec-referrer-policy/#unknown-policy-values&quot;&gt;未知&lt;/a&gt;策略值，则可以指定多个策略值以提供备用。可以理解的最后指定值优先。为此，可将可迭代或逗号分隔的字符串与&lt;a href=&quot;settings#std:setting-SECURE_REFERRER_POLICY&quot;&gt; &lt;code&gt;SECURE_REFERRER_POLICY&lt;/code&gt; &lt;/a&gt;一起使用。</target>
        </trans-unit>
        <trans-unit id="780f84e301a5ebeb3673abac337d2b0138bd3137" translate="yes" xml:space="preserve">
          <source>Where are the Django source files?</source>
          <target state="translated">Django的源文件在哪里?</target>
        </trans-unit>
        <trans-unit id="7685279f988bf6123bde6b5dc74962ce5a36e12d" translate="yes" xml:space="preserve">
          <source>Where class-based views shine is when you want to do the same thing many times. Suppose you&amp;rsquo;re writing an API, and every view should return JSON instead of rendered HTML.</source>
          <target state="translated">当您想多次执行相同的操作时，基于类的视图就会大放异彩。假设您正在编写一个API，并且每个视图都应返回JSON而不是呈现的HTML。</target>
        </trans-unit>
        <trans-unit id="d0c426d912d6eedc61d6f9899f202e87d7ddd881" translate="yes" xml:space="preserve">
          <source>Where did the name of the &lt;code&gt;Person&lt;/code&gt; table come from in that example?</source>
          <target state="translated">在该示例中， &lt;code&gt;Person&lt;/code&gt; 表的名称从何而来？</target>
        </trans-unit>
        <trans-unit id="b0c1451f3f33eafbd0ab7c1bb6ebc389f39f6c84" translate="yes" xml:space="preserve">
          <source>Where is the example template for &lt;code&gt;TodayArchiveView&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;TodayArchiveView&lt;/code&gt; 的示例模​​板在哪里？</target>
        </trans-unit>
        <trans-unit id="f83de26e3e6e554d8ceba88b133fdee619a077ed" translate="yes" xml:space="preserve">
          <source>Where should the tests live?</source>
          <target state="translated">测试应该放在哪里?</target>
        </trans-unit>
        <trans-unit id="cf3c0baf6f3077e94c2094d1f832fadd38c22a7d" translate="yes" xml:space="preserve">
          <source>Where should this code live?</source>
          <target state="translated">这个代码应该放在哪里?</target>
        </trans-unit>
        <trans-unit id="2225f87a5cff465efb1c6c4493b2a62111a8bb04" translate="yes" xml:space="preserve">
          <source>Where the band with index 2 (the third band) of the raster &lt;code&gt;rst&lt;/code&gt; would be used for the lookup.</source>
          <target state="translated">栅格 &lt;code&gt;rst&lt;/code&gt; 的索引为2的波段（第三波段）将用于查找。</target>
        </trans-unit>
        <trans-unit id="df540ecbf7130c28a69b3c12a4be8490bf9f95e3" translate="yes" xml:space="preserve">
          <source>Where to get help:</source>
          <target state="translated">哪里可以得到帮助。</target>
        </trans-unit>
        <trans-unit id="189ce02f5881b00551ca0b2dbffa725039792568" translate="yes" xml:space="preserve">
          <source>Where to look for more information.</source>
          <target state="translated">更多信息在哪里找。</target>
        </trans-unit>
        <trans-unit id="f3b501e3a5bcdf22ce18908ca175fa2f182f4c67" translate="yes" xml:space="preserve">
          <source>Where uploaded data is stored</source>
          <target state="translated">上传的数据储存在哪里</target>
        </trans-unit>
        <trans-unit id="31e7d6991b00103c12328287f6ea206aec25fa5d" translate="yes" xml:space="preserve">
          <source>Whereas indexing on a &lt;a href=&quot;#django.contrib.gis.geos.Polygon&quot;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt; will return the ring (a &lt;a href=&quot;#django.contrib.gis.geos.LinearRing&quot;&gt;&lt;code&gt;LinearRing&lt;/code&gt;&lt;/a&gt; object) corresponding to the index:</source>
          <target state="translated">而在&lt;a href=&quot;#django.contrib.gis.geos.Polygon&quot;&gt; &lt;code&gt;Polygon&lt;/code&gt; &lt;/a&gt;上进行索引将返回与索引对应的环（&lt;a href=&quot;#django.contrib.gis.geos.LinearRing&quot;&gt; &lt;code&gt;LinearRing&lt;/code&gt; &lt;/a&gt;对象）：</target>
        </trans-unit>
        <trans-unit id="91e37ed922bca17a11622976ca8b912c2e470d52" translate="yes" xml:space="preserve">
          <source>Whether or not you use &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; settings are required to render a complete web page.</source>
          <target state="translated">无论您是否使用&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;，都需要&lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt;设置来呈现完整的网页。</target>
        </trans-unit>
        <trans-unit id="51ca9c7926a06d52e6ad9a93a4aa5c48157b6617" translate="yes" xml:space="preserve">
          <source>Whether the engine should look for template source files inside installed applications.</source>
          <target state="translated">引擎是否应该在已安装的应用程序中查找模板源文件。</target>
        </trans-unit>
        <trans-unit id="5e5dc8d3952e65b2b37c9e692e3be49baa61a4f7" translate="yes" xml:space="preserve">
          <source>Whether the redirect should be permanent. The only difference here is the HTTP status code returned. If &lt;code&gt;True&lt;/code&gt;, then the redirect will use status code 301. If &lt;code&gt;False&lt;/code&gt;, then the redirect will use status code 302. By default, &lt;code&gt;permanent&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">重定向是否应该是永久的。唯一的区别是返回的HTTP状态代码。如果为 &lt;code&gt;True&lt;/code&gt; ，则重定向将使用状态码301。如果为 &lt;code&gt;False&lt;/code&gt; ，则重定向将使用状态码302。默认情况下， &lt;code&gt;permanent&lt;/code&gt; 值为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a22136c5c2960531bad6b0dfc1ec8ea91904af8a" translate="yes" xml:space="preserve">
          <source>Whether to expire the session when the user closes their browser. See &lt;a href=&quot;../topics/http/sessions#browser-length-vs-persistent-sessions&quot;&gt;Browser-length sessions vs. persistent sessions&lt;/a&gt;.</source>
          <target state="translated">用户关闭浏览器时是否使会话到期。请参阅&lt;a href=&quot;../topics/http/sessions#browser-length-vs-persistent-sessions&quot;&gt;浏览器时长会话与持久性会话&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df058eca3aa2a9c32c28750652403ab4803691ba" translate="yes" xml:space="preserve">
          <source>Whether to pass along the GET query string to the new location. If &lt;code&gt;True&lt;/code&gt;, then the query string is appended to the URL. If &lt;code&gt;False&lt;/code&gt;, then the query string is discarded. By default, &lt;code&gt;query_string&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">是否将GET查询字符串传递到新位置。如果为 &lt;code&gt;True&lt;/code&gt; ，那么查询字符串将附加到URL。如果为 &lt;code&gt;False&lt;/code&gt; ，则丢弃查询字符串。默认情况下， &lt;code&gt;query_string&lt;/code&gt; 为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97a9a41da7d27933950a7e2459e0a281648069dc" translate="yes" xml:space="preserve">
          <source>Whether to prepend the &amp;ldquo;www.&amp;rdquo; subdomain to URLs that don&amp;rsquo;t have it. This is only used if &lt;a href=&quot;middleware#django.middleware.common.CommonMiddleware&quot;&gt;&lt;code&gt;CommonMiddleware&lt;/code&gt;&lt;/a&gt; is installed (see &lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;). See also &lt;a href=&quot;#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">是否在&amp;ldquo; www。&amp;rdquo;前面加上 子域到没有它的URL。仅在安装了&lt;a href=&quot;middleware#django.middleware.common.CommonMiddleware&quot;&gt; &lt;code&gt;CommonMiddleware&lt;/code&gt; 的&lt;/a&gt;情况下才使用它（请参阅&lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;）。另请参阅&lt;a href=&quot;#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="716428ff330d008de5a07326666ca451aeafcc56" translate="yes" xml:space="preserve">
          <source>Whether to save the session data on every request. If this is &lt;code&gt;False&lt;/code&gt; (default), then the session data will only be saved if it has been modified &amp;ndash; that is, if any of its dictionary values have been assigned or deleted. Empty sessions won&amp;rsquo;t be created, even if this setting is active.</source>
          <target state="translated">是否在每个请求上保存会话数据。如果这是 &lt;code&gt;False&lt;/code&gt; （默认值），则仅在修改会话数据后即保存会话数据，也就是说，如果已分配或删除了其任何词典值。即使此设置处于活动状态，也不会创建空会话。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
