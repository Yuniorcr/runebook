<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="e752ec513dfa2b9020c4b9b1d77dff65842791cc" translate="yes" xml:space="preserve">
          <source>The decorator can also be applied to test case classes:</source>
          <target state="translated">装饰器也可以应用于测试用例类。</target>
        </trans-unit>
        <trans-unit id="08078900b7b084a713be574d3ec48dde029f0fc7" translate="yes" xml:space="preserve">
          <source>The decorator may also take an iterable of permissions, in which case the user must have all of the permissions in order to access the view.</source>
          <target state="translated">装饰者也可以取一个权限的迭代,在这种情况下,用户必须拥有所有的权限才能访问视图。</target>
        </trans-unit>
        <trans-unit id="3e6984e25abb466ab3b70b1883295bf7fdad1ae1" translate="yes" xml:space="preserve">
          <source>The decorator method</source>
          <target state="translated">装饰者方法</target>
        </trans-unit>
        <trans-unit id="7c5f3a4a1d212f664f326057c0ab4ff2bbfd5f34" translate="yes" xml:space="preserve">
          <source>The decorator sets the &lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt; headers on the response if they are not already set by the view and if the request&amp;rsquo;s method is safe (&lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt;).</source>
          <target state="translated">如果视图尚未设置装饰器，并且请求的方法是安全的（ &lt;code&gt;GET&lt;/code&gt; 或 &lt;code&gt;HEAD&lt;/code&gt; ），则装饰器在响应上设置 &lt;code&gt;ETag&lt;/code&gt; 和 &lt;code&gt;Last-Modified&lt;/code&gt; 头。</target>
        </trans-unit>
        <trans-unit id="dc20f9a0cf41d79aff3ab5d9ba049b34d9983d7f" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.cache&quot;&gt;&lt;code&gt;django.views.decorators.cache&lt;/code&gt;&lt;/a&gt; control server and client-side caching.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.cache&quot;&gt; &lt;code&gt;django.views.decorators.cache&lt;/code&gt; 中&lt;/a&gt;的装饰器控制服务器和客户端缓存。</target>
        </trans-unit>
        <trans-unit id="714400a88cce911b942d02df934f863e07f4e572" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.gzip&quot;&gt;&lt;code&gt;django.views.decorators.gzip&lt;/code&gt;&lt;/a&gt; control content compression on a per-view basis.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.gzip&quot;&gt; &lt;code&gt;django.views.decorators.gzip&lt;/code&gt; 中&lt;/a&gt;的装饰器按每个视图控制内容压缩。</target>
        </trans-unit>
        <trans-unit id="4b9631a95e4f5290b1d40c2f36db35dff973e6be" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.http&quot;&gt;&lt;code&gt;django.views.decorators.http&lt;/code&gt;&lt;/a&gt; can be used to restrict access to views based on the request method. These decorators will return a &lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt;&lt;code&gt;django.http.HttpResponseNotAllowed&lt;/code&gt;&lt;/a&gt; if the conditions are not met.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.http&quot;&gt; &lt;code&gt;django.views.decorators.http&lt;/code&gt; 中&lt;/a&gt;的装饰器可用于基于请求方法来限制对视图的访问。如果不满足条件，这些装饰器将返回&lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt; &lt;code&gt;django.http.HttpResponseNotAllowed&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="172b895ce751cf6b71596b006bab1637b49f0e3a" translate="yes" xml:space="preserve">
          <source>The decorators in &lt;a href=&quot;#module-django.views.decorators.vary&quot;&gt;&lt;code&gt;django.views.decorators.vary&lt;/code&gt;&lt;/a&gt; can be used to control caching based on specific request headers.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.vary&quot;&gt; &lt;code&gt;django.views.decorators.vary&lt;/code&gt; 中&lt;/a&gt;的装饰器可用于基于特定的请求标头控制缓存。</target>
        </trans-unit>
        <trans-unit id="d956dc320ba4030b6695d4e49373953768a303f7" translate="yes" xml:space="preserve">
          <source>The decorators use a string identifier to describe database features. This string corresponds to attributes of the database connection features class. See &lt;code&gt;django.db.backends.BaseDatabaseFeatures&lt;/code&gt; class for a full list of database features that can be used as a basis for skipping tests.</source>
          <target state="translated">装饰器使用字符串标识符来描述数据库功能。此字符串对应于数据库连接要素类的属性。有关可用作跳过测试基础的数据库功能的完整列表，请参见 &lt;code&gt;django.db.backends.BaseDatabaseFeatures&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="caaa132833461901a9846628e798fe735598a186" translate="yes" xml:space="preserve">
          <source>The decorators will process a request in the order they are passed to the decorator. In the example, &lt;code&gt;never_cache()&lt;/code&gt; will process the request before &lt;code&gt;login_required()&lt;/code&gt;.</source>
          <target state="translated">装饰者将按照传递给装饰者的顺序处理请求。在该示例中， &lt;code&gt;never_cache()&lt;/code&gt; 将在 &lt;code&gt;login_required()&lt;/code&gt; 之前处理请求。</target>
        </trans-unit>
        <trans-unit id="e9b3340f0a94e2fad729899fe10f241ec56afb5c" translate="yes" xml:space="preserve">
          <source>The default 404 view will pass two variables to the template: &lt;code&gt;request_path&lt;/code&gt;, which is the URL that resulted in the error, and &lt;code&gt;exception&lt;/code&gt;, which is a useful representation of the exception that triggered the view (e.g. containing any message passed to a specific &lt;code&gt;Http404&lt;/code&gt; instance).</source>
          <target state="translated">默认的404视图将通过两个变量到模板： &lt;code&gt;request_path&lt;/code&gt; ，这是导致错误的URL，和 &lt;code&gt;exception&lt;/code&gt; ，这是触发视图对异常的有用表示（例如含有传递给一个特定的任何消息 &lt;code&gt;Http404&lt;/code&gt; 实例）。</target>
        </trans-unit>
        <trans-unit id="8bb62d8434d62bd532ee0e74706ef31f9611e1c2" translate="yes" xml:space="preserve">
          <source>The default 500 view passes no variables to the &lt;code&gt;500.html&lt;/code&gt; template and is rendered with an empty &lt;code&gt;Context&lt;/code&gt; to lessen the chance of additional errors.</source>
          <target state="translated">默认的500视图不会将任何变量传递到 &lt;code&gt;500.html&lt;/code&gt; 模板，并使用空的 &lt;code&gt;Context&lt;/code&gt; 呈现，以减少出现其他错误的机会。</target>
        </trans-unit>
        <trans-unit id="e0ec6d270d2168d34503a29c66d65f1c626916d8" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#message-storage-backends&quot;&gt;storage backend&lt;/a&gt; relies on &lt;a href=&quot;../../topics/http/sessions&quot;&gt;sessions&lt;/a&gt;. That&amp;rsquo;s why &lt;code&gt;SessionMiddleware&lt;/code&gt; must be enabled and appear before &lt;code&gt;MessageMiddleware&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认的&lt;a href=&quot;#message-storage-backends&quot;&gt;存储后端&lt;/a&gt;依赖于&lt;a href=&quot;../../topics/http/sessions&quot;&gt;会话&lt;/a&gt;。这就是为什么必须启用 &lt;code&gt;SessionMiddleware&lt;/code&gt; 并使其出现在&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 中的&lt;/a&gt; &lt;code&gt;MessageMiddleware&lt;/code&gt; 之前的原因。</target>
        </trans-unit>
        <trans-unit id="cb25ca2a947cbc95f00df63677130dcc43190eba" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt;&lt;code&gt;startapp&lt;/code&gt;&lt;/a&gt; template creates a &lt;code&gt;tests.py&lt;/code&gt; file in the new application. This might be fine if you only have a few tests, but as your test suite grows you&amp;rsquo;ll likely want to restructure it into a tests package so you can split your tests into different submodules such as &lt;code&gt;test_models.py&lt;/code&gt;, &lt;code&gt;test_views.py&lt;/code&gt;, &lt;code&gt;test_forms.py&lt;/code&gt;, etc. Feel free to pick whatever organizational scheme you like.</source>
          <target state="translated">默认的&lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt; &lt;code&gt;startapp&lt;/code&gt; &lt;/a&gt;模板在新应用程序中创建一个 &lt;code&gt;tests.py&lt;/code&gt; 文件。如果您只有几个测试，这可能很好，但是随着测试套件的增长，您可能需要将其重组为测试包，以便将测试拆分为不同的子模块，例如 &lt;code&gt;test_models.py&lt;/code&gt; ， &lt;code&gt;test_views.py&lt;/code&gt; ， &lt;code&gt;test_forms.py&lt;/code&gt; 等。请随意选择您喜欢的任何组织方案。</target>
        </trans-unit>
        <trans-unit id="226a066fd07ef456b5e140695c147458d6199d9c" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; created by &lt;code&gt;django-admin startproject&lt;/code&gt; already contains all the settings required to enable message functionality:</source>
          <target state="translated">&lt;code&gt;django-admin startproject&lt;/code&gt; 创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 已包含启用消息功能所需的所有设置：</target>
        </trans-unit>
        <trans-unit id="15f5a864456675c86842be47238862e39ece8708" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N = True&lt;/code&gt;&lt;/a&gt; for convenience. Note, however, that to enable number formatting with thousand separators it is necessary to set &lt;a href=&quot;../../ref/settings#std:setting-USE_THOUSAND_SEPARATOR&quot;&gt;&lt;code&gt;USE_THOUSAND_SEPARATOR
= True&lt;/code&gt;&lt;/a&gt; in your settings file. Alternatively, you could use &lt;a href=&quot;../../ref/contrib/humanize#std:templatefilter-intcomma&quot;&gt;&lt;code&gt;intcomma&lt;/code&gt;&lt;/a&gt; to format numbers in your template.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 文件包括&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N = True&lt;/code&gt; &lt;/a&gt;以方便使用。但是请注意，要启用带有千位分隔符的数字格式，必须在设置文件中设置&lt;a href=&quot;../../ref/settings#std:setting-USE_THOUSAND_SEPARATOR&quot;&gt; &lt;code&gt;USE_THOUSAND_SEPARATOR = True&lt;/code&gt; &lt;/a&gt;。或者，您可以使用&lt;a href=&quot;../../ref/contrib/humanize#std:templatefilter-intcomma&quot;&gt; &lt;code&gt;intcomma&lt;/code&gt; &lt;/a&gt;在模板中设置数字格式。</target>
        </trans-unit>
        <trans-unit id="552172d0157c475ea333dec0a0e79e817476d4b4" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = True&lt;/code&gt;&lt;/a&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 文件包括&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = True&lt;/code&gt; &lt;/a&gt;以方便使用。</target>
        </trans-unit>
        <trans-unit id="37a44e663a84cee319df8611835c25940c7f1a11" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; creates a unique &lt;code&gt;SECRET_KEY&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 文件会创建一个唯一的 &lt;code&gt;SECRET_KEY&lt;/code&gt; ,以方便使用。</target>
        </trans-unit>
        <trans-unit id="13e8676c1b362fc1c1df84307e6fc7596047aa40" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_I18N = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 文件包含 &lt;code&gt;USE_I18N = True&lt;/code&gt; 以方便使用。</target>
        </trans-unit>
        <trans-unit id="229eaf04c4eefe874751764332b6248ddc79504c" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_L10N = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 文件包括 &lt;code&gt;USE_L10N = True&lt;/code&gt; 以方便使用。</target>
        </trans-unit>
        <trans-unit id="7b3298edc8e3436e091673198431668d349b4fe1" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; sets &lt;code&gt;'APP_DIRS': True&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 文件设置为 &lt;code&gt;'APP_DIRS': True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="896ebcb2f4a8b98bbc238bbcf9ec87231d75feca" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; sets &lt;code&gt;DEBUG = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 文件设置 &lt;code&gt;DEBUG = True&lt;/code&gt; 为方便起见。</target>
        </trans-unit>
        <trans-unit id="37f3c2b38e6100940f63032627821effc91e9578" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;settings.py&lt;/code&gt; file created by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin startproject&lt;/code&gt;&lt;/a&gt; includes &lt;code&gt;USE_TZ = True&lt;/code&gt; for convenience.</source>
          <target state="translated">&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 文件包括 &lt;code&gt;USE_TZ = True&lt;/code&gt; 以方便使用。</target>
        </trans-unit>
        <trans-unit id="38003d532df52d6f49eaaaa73790217a0dd7ee5b" translate="yes" xml:space="preserve">
          <source>The default HTML &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;widget&lt;/a&gt; to use when rendering a form field (e.g. &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">呈现表单字段时使用的默认HTML &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;小部件&lt;/a&gt;（例如 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; ， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="850c5f08bbd2469484fab8a1bbbdda4342749d52" translate="yes" xml:space="preserve">
          <source>The default can&amp;rsquo;t be a mutable object (model instance, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, etc.), as a reference to the same instance of that object would be used as the default value in all new model instances. Instead, wrap the desired default in a callable. For example, if you want to specify a default &lt;code&gt;dict&lt;/code&gt; for &lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.JSONField&quot;&gt;&lt;code&gt;JSONField&lt;/code&gt;&lt;/a&gt;, use a function:</source>
          <target state="translated">默认值不能是可变对象（模型实例， &lt;code&gt;list&lt;/code&gt; ， &lt;code&gt;set&lt;/code&gt; 等），因为对该对象同一实例的引用将在所有新模型实例中用作默认值。而是将所需的默认值包装在可调用中。例如，如果要为&lt;a href=&quot;../contrib/postgres/fields#django.contrib.postgres.fields.JSONField&quot;&gt; &lt;code&gt;JSONField&lt;/code&gt; &lt;/a&gt;指定默认 &lt;code&gt;dict&lt;/code&gt; ，请使用以下函数：</target>
        </trans-unit>
        <trans-unit id="c1e6e73cc63d50d83c075b1833c565029c9c3c78" translate="yes" xml:space="preserve">
          <source>The default center latitude and longitude are &lt;code&gt;47&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;, respectively, which is a location in eastern France.</source>
          <target state="translated">默认的中心纬度和经度分别是 &lt;code&gt;47&lt;/code&gt; 和 &lt;code&gt;5&lt;/code&gt; ，这是法国东部的位置。</target>
        </trans-unit>
        <trans-unit id="6dc6b98a5ad4b8a3aea09cf719d80efb10089162" translate="yes" xml:space="preserve">
          <source>The default center latitude.</source>
          <target state="translated">默认的中心纬度。</target>
        </trans-unit>
        <trans-unit id="1a8bca6211de0327a68eaeb1c2bdb33a548d22de" translate="yes" xml:space="preserve">
          <source>The default center longitude.</source>
          <target state="translated">默认的中心经度。</target>
        </trans-unit>
        <trans-unit id="47b75fca13bb5c5601d76c121b6fe2672e66398e" translate="yes" xml:space="preserve">
          <source>The default configuration is purposefully kept to a minimum. If a template is rendered with a request (e.g. when using &lt;a href=&quot;http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;Jinja2&lt;/code&gt; backend adds the globals &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;csrf_input&lt;/code&gt;, and &lt;code&gt;csrf_token&lt;/code&gt; to the context. Apart from that, this backend doesn&amp;rsquo;t create a Django-flavored environment. It doesn&amp;rsquo;t know about Django filters and tags. In order to use Django-specific APIs, you must configure them into the environment.</source>
          <target state="translated">默认配置有意保留为最低。如果模板是通过请求呈现的（例如，使用&lt;a href=&quot;http/shortcuts#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; 时&lt;/a&gt;），则 &lt;code&gt;Jinja2&lt;/code&gt; 后端会将globals &lt;code&gt;request&lt;/code&gt; ， &lt;code&gt;csrf_input&lt;/code&gt; 和 &lt;code&gt;csrf_token&lt;/code&gt; 添加到上下文中。除此之外，此后端不会创建Django风格的环境。它不了解Django过滤器和标签。为了使用特定于Django的API，您必须将其配置到环境中。</target>
        </trans-unit>
        <trans-unit id="79b75456b9d762f8c2dce9b2ae3e8175ad3db27a" translate="yes" xml:space="preserve">
          <source>The default depends on the values of &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">缺省值取决于值&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt; &lt;code&gt;APP_DIRS&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b30049a48d9bb824be0c46391448413b534fbed5" translate="yes" xml:space="preserve">
          <source>The default error views in Django should suffice for most Web applications, but can easily be overridden if you need any custom behavior. Specify the handlers as seen below in your URLconf (setting them anywhere else will have no effect).</source>
          <target state="translated">Django中默认的错误视图对于大多数Web应用来说已经足够了,但如果你需要自定义行为,可以很容易地被覆盖。在你的URLconf中指定如下所示的处理程序(在其他地方设置它们不会有任何影响)。</target>
        </trans-unit>
        <trans-unit id="bc4edfe7e2ec1bdac8450e6279fde98b4ec2a703" translate="yes" xml:space="preserve">
          <source>The default field types, as described in the &lt;a href=&quot;#field-types&quot;&gt;Field types&lt;/a&gt; table above, are sensible defaults. If you have a &lt;code&gt;DateField&lt;/code&gt; in your model, chances are you&amp;rsquo;d want that to be represented as a &lt;code&gt;DateField&lt;/code&gt; in your form. But &lt;code&gt;ModelForm&lt;/code&gt; gives you the flexibility of changing the form field for a given model.</source>
          <target state="translated">如上面的&amp;ldquo; &lt;a href=&quot;#field-types&quot;&gt;字段类型&amp;rdquo;&lt;/a&gt;表中所述，默认字段类型是明智的默认值。如果您的模型中有一个 &lt;code&gt;DateField&lt;/code&gt; ，那么您可能希望将其表示为表单中的 &lt;code&gt;DateField&lt;/code&gt; 。但是， &lt;code&gt;ModelForm&lt;/code&gt; 使您可以灵活地更改给定模型的表单字段。</target>
        </trans-unit>
        <trans-unit id="c4dd4f7c52db0ae0c51192809cd83268e43fe87b" translate="yes" xml:space="preserve">
          <source>The default for &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;的默认值为：</target>
        </trans-unit>
        <trans-unit id="134d94e39ec3e6ff60738a50fa838e784c29d613" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is &lt;a href=&quot;../forms/widgets#django.forms.CheckboxInput&quot;&gt;&lt;code&gt;CheckboxInput&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../forms/widgets#django.forms.NullBooleanSelect&quot;&gt;&lt;code&gt;NullBooleanSelect&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null=True&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此字段的默认表单窗口小部件为&lt;a href=&quot;../forms/widgets#django.forms.CheckboxInput&quot;&gt; &lt;code&gt;CheckboxInput&lt;/code&gt; &lt;/a&gt;，如果&lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null=True&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../forms/widgets#django.forms.NullBooleanSelect&quot;&gt; &lt;code&gt;NullBooleanSelect&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea631760ea98aac69af2b8f8a5256ac828ece9ff" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.ClearableFileInput&quot;&gt;&lt;code&gt;ClearableFileInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此字段的默认表单窗口小部件是&lt;a href=&quot;../forms/widgets#django.forms.ClearableFileInput&quot;&gt; &lt;code&gt;ClearableFileInput&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="60986cff79bf6fc8ec851ab689e96aed367f661f" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.NumberInput&quot;&gt;&lt;code&gt;NumberInput&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;../forms/fields#django.forms.Field.localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt; or &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">此字段的默认表单控件是一个&lt;a href=&quot;../forms/widgets#django.forms.NumberInput&quot;&gt; &lt;code&gt;NumberInput&lt;/code&gt; &lt;/a&gt;时&lt;a href=&quot;../forms/fields#django.forms.Field.localize&quot;&gt; &lt;code&gt;localize&lt;/code&gt; &lt;/a&gt;是 &lt;code&gt;False&lt;/code&gt; 或&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;其他。</target>
        </trans-unit>
        <trans-unit id="e3c6af63e65166181cbe2139ee4e69e1190626df" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该字段的默认表单小部件是&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a60df51dd0ba10657107a46e39c3e7110ad412a" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin adds a JavaScript calendar, and a shortcut for &amp;ldquo;Today&amp;rdquo;. Includes an additional &lt;code&gt;invalid_date&lt;/code&gt; error message key.</source>
          <target state="translated">该字段的默认表单小部件是&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;。管理员添加了JavaScript日历和&amp;ldquo;今天&amp;rdquo;的快捷方式。包括一个附加的 &lt;code&gt;invalid_date&lt;/code&gt; 错误消息密钥。</target>
        </trans-unit>
        <trans-unit id="2d825bc2343fa63f1211b4871b61308789330e5f" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin adds some JavaScript shortcuts.</source>
          <target state="translated">该字段的默认表单小部件是&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;。管理员添加了一些JavaScript快捷方式。</target>
        </trans-unit>
        <trans-unit id="bfc82f92434f002c14f9510457820cb464b1af98" translate="yes" xml:space="preserve">
          <source>The default form widget for this field is a single &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;. The admin uses two separate &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widgets with JavaScript shortcuts.</source>
          <target state="translated">该字段的默认表单小部件是单个&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;。管理员使用带有JavaScript快捷方式的两个单独的&lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt;小部件。</target>
        </trans-unit>
        <trans-unit id="e86b7b71b97eebfe17f27f711177ed2196a4552a" translate="yes" xml:space="preserve">
          <source>The default formatting to use for date fields on Django admin change-list pages &amp;ndash; and, possibly, by other parts of the system &amp;ndash; in cases when only the month and day are displayed.</source>
          <target state="translated">在仅显示月份和日期的情况下，Django管理员更改列表页面上（以及可能由系统的其他部分）日期字段使用的默认格式。</target>
        </trans-unit>
        <trans-unit id="f8c844f89ae57f68995ba3177973743e029db9ed" translate="yes" xml:space="preserve">
          <source>The default formatting to use for date fields on Django admin change-list pages &amp;ndash; and, possibly, by other parts of the system &amp;ndash; in cases when only the year and month are displayed.</source>
          <target state="translated">在仅显示年和月的情况下，用于Django管理员更改列表页面上日期字段的默认格式（可能还有系统其他部分的格式）。</target>
        </trans-unit>
        <trans-unit id="c3abe881263ad300827e24f23977ffeaa8fc68f5" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying date fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于在系统任何部分中显示日期字段的默认格式。请注意，如果&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;True&lt;/code&gt; ，则由区域设置指定的格式具有更高的优先级，并将被应用。请参阅&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b1b9178088242aa17794380e14db4ddb84579a8" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying datetime fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于在系统任何部分中显示日期时间字段的默认格式。请注意，如果&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;True&lt;/code&gt; ，则由区域设置指定的格式具有更高的优先级，并将被应用。请参阅&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d9a445a36c674f2a2409abce5d97ada17179d05" translate="yes" xml:space="preserve">
          <source>The default formatting to use for displaying time fields in any part of the system. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于在系统任何部分中显示时间字段的默认格式。请注意，如果&lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;True&lt;/code&gt; ，则由区域设置指定的格式具有更高的优先级，并将被应用。请参阅&lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;allowed date format strings&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf5da289a6cdbe86004e0c35417963f837bd6560" translate="yes" xml:space="preserve">
          <source>The default ignored pattern list, &lt;code&gt;['CVS', '.*', '*~']&lt;/code&gt;, can be customized in a more persistent way than providing the &lt;code&gt;--ignore&lt;/code&gt; command option at each &lt;code&gt;collectstatic&lt;/code&gt; invocation. Provide a custom &lt;a href=&quot;../applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class, override the &lt;code&gt;ignore_patterns&lt;/code&gt; attribute of this class and replace &lt;code&gt;'django.contrib.staticfiles'&lt;/code&gt; with that class path in your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">与在每个 &lt;code&gt;collectstatic&lt;/code&gt; 调用中提供 &lt;code&gt;--ignore&lt;/code&gt; 命令选项相比，可以以更持久的方式自定义默认的忽略模式列表 &lt;code&gt;['CVS', '.*', '*~']&lt;/code&gt; 。提供一个自定义&lt;a href=&quot;../applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt;类，重写 &lt;code&gt;ignore_patterns&lt;/code&gt; 属性，并在&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;设置中用该类路径替换 &lt;code&gt;'django.contrib.staticfiles'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="751eb81534ea3e24ef129517bef3e624542317ac" translate="yes" xml:space="preserve">
          <source>The default implementation for &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_valid&quot;&gt;&lt;code&gt;form_valid()&lt;/code&gt;&lt;/a&gt; simply redirects to the &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.success_url&quot;&gt;&lt;code&gt;success_url&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认实现&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.form_valid&quot;&gt; &lt;code&gt;form_valid()&lt;/code&gt; &lt;/a&gt;简单地重定向到&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin.success_url&quot;&gt; &lt;code&gt;success_url&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="58945866a1fad1e48b9997b0f3764ac1a493332d" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt;&lt;code&gt;value_from_datadict()&lt;/code&gt;&lt;/a&gt; returns a list of values corresponding to each &lt;code&gt;Widget&lt;/code&gt;. This is appropriate when using a &lt;code&gt;MultiWidget&lt;/code&gt; with a &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt;. But since we want to use this widget with a &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, which takes a single value, we have overridden this method. The implementation here combines the data from the subwidgets into a string in the format that &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; expects.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Widget.value_from_datadict&quot;&gt; &lt;code&gt;value_from_datadict()&lt;/code&gt; &lt;/a&gt;的默认实现返回与每个 &lt;code&gt;Widget&lt;/code&gt; 对应的值的列表。当将 &lt;code&gt;MultiWidget&lt;/code&gt; 与&lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; &lt;/a&gt;一起使用时，这是合适的。但是，由于我们想将此控件与带单个值的&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;一起使用，因此我们重写了此方法。此处的实现将子控件中的数据组合成&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;期望格式的字符串。</target>
        </trans-unit>
        <trans-unit id="0e767237a959c092f8fb6cc3a53857fa0dfee41b" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;HttpResponseNotAllowed&lt;/code&gt; with a list of allowed methods in plain text.</source>
          <target state="translated">默认实现以纯文本形式返回 &lt;code&gt;HttpResponseNotAllowed&lt;/code&gt; 以及允许的方法列表。</target>
        </trans-unit>
        <trans-unit id="f02a775b38d24ae9223d3fc4cbfc7456c1b2afc8" translate="yes" xml:space="preserve">
          <source>The default implementation returns &lt;code&gt;True&lt;/code&gt; if the user has either the &amp;ldquo;change&amp;rdquo; or &amp;ldquo;view&amp;rdquo; permission.</source>
          <target state="translated">如果用户具有&amp;ldquo;更改&amp;rdquo;或&amp;ldquo;查看&amp;rdquo;权限，则默认实现将返回 &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5230cab4e521089f99bf954f4c5e6041635c9ad" translate="yes" xml:space="preserve">
          <source>The default implementation searches the fields named in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;&lt;code&gt;ModelAdmin.search_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认实现搜索&lt;a href=&quot;#django.contrib.admin.ModelAdmin.search_fields&quot;&gt; &lt;code&gt;ModelAdmin.search_fields&lt;/code&gt; 中&lt;/a&gt;命名的字段。</target>
        </trans-unit>
        <trans-unit id="f761f121dfbd8beab8561f6c419883ce3457de3c" translate="yes" xml:space="preserve">
          <source>The default implementation uses &lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; as a starting string and performs expansion of &lt;code&gt;%&lt;/code&gt; named parameters in that string using the named groups captured in the URL.</source>
          <target state="translated">默认实现使用&lt;a href=&quot;#django.views.generic.base.RedirectView.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;作为起始字符串，并使用URL中捕获的命名组在该字符串中扩展 &lt;code&gt;%&lt;/code&gt; 命名参数。</target>
        </trans-unit>
        <trans-unit id="462cb49a1d90ebd40612f2de40befbba0909941d" translate="yes" xml:space="preserve">
          <source>The default implementation uses &lt;a href=&quot;https://docs.python.org/3/library/os.path.html#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt; operations. Override this method if that&amp;rsquo;s not appropriate for your storage.</source>
          <target state="translated">默认实现使用&lt;a href=&quot;https://docs.python.org/3/library/os.path.html#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; &lt;/a&gt;操作。如果不适合您的存储，请覆盖此方法。</target>
        </trans-unit>
        <trans-unit id="8ead0d1970988ee507b431d44d59913400158913" translate="yes" xml:space="preserve">
          <source>The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a &lt;code&gt;GET&lt;/code&gt; will be delegated to &lt;code&gt;get()&lt;/code&gt;, a &lt;code&gt;POST&lt;/code&gt; to &lt;code&gt;post()&lt;/code&gt;, and so on.</source>
          <target state="translated">默认实现将检查HTTP方法，并尝试委托给与HTTP方法匹配的方法；一个 &lt;code&gt;GET&lt;/code&gt; 将被委托给 &lt;code&gt;get()&lt;/code&gt; 方法，一个 &lt;code&gt;POST&lt;/code&gt; 到 &lt;code&gt;post()&lt;/code&gt; ，等等。</target>
        </trans-unit>
        <trans-unit id="1e9ec0e76f3af8986236ea7172214f311eaea0a5" translate="yes" xml:space="preserve">
          <source>The default is 64*2&lt;sup&gt;10&lt;/sup&gt; bytes, or 64 KB.</source>
          <target state="translated">默认值为64 * 2 &lt;sup&gt;10&lt;/sup&gt;字节，即64 KB。</target>
        </trans-unit>
        <trans-unit id="7b37abbc68ff24b36fc22e95104b39de87e18b06" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]&lt;/code&gt;.</source>
          <target state="translated">默认值为 &lt;code&gt;[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c97f000fcb621b26c4ca76aed228db965cece3de" translate="yes" xml:space="preserve">
          <source>The default manager on a class is either the one chosen with &lt;a href=&quot;../../ref/models/options#django.db.models.Options.default_manager_name&quot;&gt;&lt;code&gt;Meta.default_manager_name&lt;/code&gt;&lt;/a&gt;, or the first manager declared on the model, or the default manager of the first parent model.</source>
          <target state="translated">类的默认管理器是使用&lt;a href=&quot;../../ref/models/options#django.db.models.Options.default_manager_name&quot;&gt; &lt;code&gt;Meta.default_manager_name&lt;/code&gt; &lt;/a&gt;选择的，或者是在模型上声明的第一个管理器，或者是第一个父模型的默认管理器。</target>
        </trans-unit>
        <trans-unit id="983962411dff41cd368f5b7bbf421e536db1acf1" translate="yes" xml:space="preserve">
          <source>The default map zoom is &lt;code&gt;12&lt;/code&gt;.</source>
          <target state="translated">默认地图缩放为 &lt;code&gt;12&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d4e743387931bcb102440b718b5c19ee9c15f17" translate="yes" xml:space="preserve">
          <source>The default number of seconds to cache a page for the &lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;cache middleware&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../topics/cache#the-per-site-cache&quot;&gt;缓存中间件&lt;/a&gt;页面的默认秒数。</target>
        </trans-unit>
        <trans-unit id="e154f587263da05e8c0f5967db25f769f3bbd0c8" translate="yes" xml:space="preserve">
          <source>The default of &lt;code&gt;show_full_result_count=True&lt;/code&gt; generates a query to perform a full count on the table which can be expensive if the table contains a large number of rows.</source>
          <target state="translated">默认的 &lt;code&gt;show_full_result_count=True&lt;/code&gt; 生成查询以对表执行完整计数，如果表包含大量行，则该查询可能会非常昂贵。</target>
        </trans-unit>
        <trans-unit id="16c7754ef944bfa9abfbac63064b61db060480eb" translate="yes" xml:space="preserve">
          <source>The default ordering for the object, for use when obtaining lists of objects:</source>
          <target state="translated">对象的默认排序,用于获取对象列表时使用。</target>
        </trans-unit>
        <trans-unit id="238163c4cb91e826d6996578b9872f96ffb9a648" translate="yes" xml:space="preserve">
          <source>The default password change views included with Django, &lt;a href=&quot;#django.contrib.auth.views.PasswordChangeView&quot;&gt;&lt;code&gt;PasswordChangeView&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;user_change_password&lt;/code&gt; view in the &lt;a href=&quot;index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; admin, update the session with the new password hash so that a user changing their own password won&amp;rsquo;t log themselves out. If you have a custom password change view and wish to have similar behavior, use the &lt;a href=&quot;#django.contrib.auth.update_session_auth_hash&quot;&gt;&lt;code&gt;update_session_auth_hash()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt;管理员中Django附带的默认密码更改视图，&lt;a href=&quot;#django.contrib.auth.views.PasswordChangeView&quot;&gt; &lt;code&gt;PasswordChangeView&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;user_change_password&lt;/code&gt; 视图使用新的密码哈希更新会话，以便更改自己密码的用户不会注销自己。如果您具有自定义密码更改视图并希望具有类似的行为，请使用&lt;a href=&quot;#django.contrib.auth.update_session_auth_hash&quot;&gt; &lt;code&gt;update_session_auth_hash()&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="6f5fb4f1958be3d81c7def22a5a87c6baf5e9f41" translate="yes" xml:space="preserve">
          <source>The default password hasher is rather slow by design. If you&amp;rsquo;re authenticating many users in your tests, you may want to use a custom settings file and set the &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; setting to a faster hashing algorithm:</source>
          <target state="translated">默认密码哈希器在设计上相当慢。如果要在测试中对许多用户进行身份验证，则可能要使用自定义设置文件，并将&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;设置设置为更快的哈希算法：</target>
        </trans-unit>
        <trans-unit id="da45cf62bc7d278f65e85a2fb4a8777e81153cc7" translate="yes" xml:space="preserve">
          <source>The default resampling algorithm is &lt;code&gt;NearestNeighbour&lt;/code&gt; but can be changed using the &lt;code&gt;resampling&lt;/code&gt; argument. The default maximum allowed error for resampling is 0.0 and can be changed using the &lt;code&gt;max_error&lt;/code&gt; argument. Consult the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt; documentation for detail on those arguments.</source>
          <target state="translated">默认的重采样算法是 &lt;code&gt;NearestNeighbour&lt;/code&gt; ,但是可以使用 &lt;code&gt;resampling&lt;/code&gt; 参数进行更改。重采样的默认最大允许错误为0.0，可以使用 &lt;code&gt;max_error&lt;/code&gt; 参数进行更改。有关这些参数的详细信息，请查阅&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt; &lt;code&gt;warp&lt;/code&gt; &lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="7cb2f0905f6675e362944d6915dabba14930728d" translate="yes" xml:space="preserve">
          <source>The default serialization strategy for foreign keys and many-to-many relations is to serialize the value of the primary key(s) of the objects in the relation. This strategy works well for most objects, but it can cause difficulty in some circumstances.</source>
          <target state="translated">外键和多对多关系的默认序列化策略是序列化关系中对象的主键值。这个策略对大多数对象都很有效,但在某些情况下会造成困难。</target>
        </trans-unit>
        <trans-unit id="1a236475813a0e546786080257d84264c4b37364" translate="yes" xml:space="preserve">
          <source>The default spatial reference system for geometry fields is WGS84 (meaning the &lt;a href=&quot;https://en.wikipedia.org/wiki/SRID&quot;&gt;SRID&lt;/a&gt; is 4326) &amp;ndash; in other words, the field coordinates are in longitude, latitude pairs in units of degrees. To use a different coordinate system, set the SRID of the geometry field with the &lt;code&gt;srid&lt;/code&gt; argument. Use an integer representing the coordinate system&amp;rsquo;s EPSG code.</source>
          <target state="translated">几何字段的默认空间参考系统是WGS84（意味着&lt;a href=&quot;https://en.wikipedia.org/wiki/SRID&quot;&gt;SRID&lt;/a&gt;为4326）&amp;ndash;换句话说，字段坐标是经度，纬度对，以度为单位。要使用其他坐标系，请使用 &lt;code&gt;srid&lt;/code&gt; 参数设置几何字段的SRID 。使用代表坐标系的EPSG代码的整数。</target>
        </trans-unit>
        <trans-unit id="f2964cc9737c87c70cfb2ca809b7da585353cdd0" translate="yes" xml:space="preserve">
          <source>The default starting point for a frame is &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt; which is the first row of the partition. The end point is always explicitly included in the SQL generated by the ORM and is by default &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt;. The default frame includes all rows from the partition to the last row in the set.</source>
          <target state="translated">帧的默认起点是 &lt;code&gt;UNBOUNDED PRECEDING&lt;/code&gt; ，它是分区的第一行。端点始终明确包含在ORM生成的SQL中，默认情况下为 &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt; 。默认框架包括从分区到集合中最后一行的所有行。</target>
        </trans-unit>
        <trans-unit id="e264add06e3e7aafd31761cac5cd121ec1ebd13f" translate="yes" xml:space="preserve">
          <source>The default test database names are created by prepending &lt;code&gt;test_&lt;/code&gt; to the value of each &lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;. When using SQLite, the tests will use an in-memory database by default (i.e., the database will be created in memory, bypassing the filesystem entirely!). The &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; offers a number of settings to configure your test database. For example, if you want to use a different database name, specify &lt;a href=&quot;../../ref/settings#std:setting-TEST_NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt;&lt;code&gt;TEST&lt;/code&gt;&lt;/a&gt; dictionary for any given database in &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">默认的测试数据库名称是通过将 &lt;code&gt;test_&lt;/code&gt; 放在&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;中每个&lt;a href=&quot;../../ref/settings#std:setting-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;的值的前面来创建的。使用SQLite时，默认情况下，测试将使用内存数据库（即，数据库将在内存中创建，完全绕开文件系统！）。&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; 中&lt;/a&gt;的&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt;词典提供了许多设置来配置您的测试数据库。例如，如果要使用其他数据库名称，请在&lt;a href=&quot;../../ref/settings#std:setting-DATABASE-TEST&quot;&gt; &lt;code&gt;TEST&lt;/code&gt; &lt;/a&gt;字典中为&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; 中的&lt;/a&gt;任何给定数据库指定&lt;a href=&quot;../../ref/settings#std:setting-TEST_NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa3fea3a2cb7fbdc787868fa2bf10548a411c3b7" translate="yes" xml:space="preserve">
          <source>The default timeout of &lt;code&gt;Watchman&lt;/code&gt; client is 5 seconds. You can change it by setting the &lt;code&gt;DJANGO_WATCHMAN_TIMEOUT&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;Watchman&lt;/code&gt; 客户端的默认超时为5秒。您可以通过设置 &lt;code&gt;DJANGO_WATCHMAN_TIMEOUT&lt;/code&gt; 环境变量来更改它。</target>
        </trans-unit>
        <trans-unit id="daa3eede9d94a26c4d7f936a6141140eeabde446" translate="yes" xml:space="preserve">
          <source>The default value for the X-Frame-Options header used by &lt;a href=&quot;middleware#django.middleware.clickjacking.XFrameOptionsMiddleware&quot;&gt;&lt;code&gt;XFrameOptionsMiddleware&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;clickjacking&quot;&gt;clickjacking protection&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;a href=&quot;middleware#django.middleware.clickjacking.XFrameOptionsMiddleware&quot;&gt; &lt;code&gt;XFrameOptionsMiddleware&lt;/code&gt; &lt;/a&gt;使用的X-Frame-Options标头的默认值。请参阅&lt;a href=&quot;clickjacking&quot;&gt;点击劫持保护&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="3ad19aea01ce3b34c3122ad6567cba185a95789f" translate="yes" xml:space="preserve">
          <source>The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created.</source>
          <target state="translated">字段的默认值。这可以是一个值或一个可调用的对象。如果是可调用对象,则每次创建新对象时都会被调用。</target>
        </trans-unit>
        <trans-unit id="59eac11be59113cb531c77947d459e7720915510" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;0&lt;/code&gt;, preserving the historical behavior of closing the database connection at the end of each request. To enable persistent connections, set &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; to a positive number of seconds. For unlimited persistent connections, set it to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">缺省值为 &lt;code&gt;0&lt;/code&gt; ，保留了在每个请求结束时关闭数据库连接的历史行为。要启用持久连接，请将&lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt;设置为正数秒。对于无限的持久连接，请将其设置为 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b64688fe542c602b65e6e7331dbb04c49fa93838" translate="yes" xml:space="preserve">
          <source>The default value is used when new model instances are created and a value isn&amp;rsquo;t provided for the field. When the field is a primary key, the default is also used when the field is set to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">创建新模型实例且未为该字段提供值时，将使用默认值。如果该字段是主键，则当该字段设置为 &lt;code&gt;None&lt;/code&gt; 时，也会使用默认值。</target>
        </trans-unit>
        <trans-unit id="69ec1abd98185eb6970143dce73b5d12c517b2f4" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;BooleanField&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; when &lt;a href=&quot;#django.db.models.Field.default&quot;&gt;&lt;code&gt;Field.default&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t defined.</source>
          <target state="translated">默认值为 &lt;code&gt;BooleanField&lt;/code&gt; 是 &lt;code&gt;None&lt;/code&gt; 时&lt;a href=&quot;#django.db.models.Field.default&quot;&gt; &lt;code&gt;Field.default&lt;/code&gt; &lt;/a&gt;没有定义。</target>
        </trans-unit>
        <trans-unit id="382174f1bda042f076ce960d46e0b453db42cf82" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;chunk_size&lt;/code&gt;, 2000, comes from &lt;a href=&quot;https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it&quot;&gt;a calculation on the psycopg mailing list&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;chunk_size&lt;/code&gt; 的默认值2000来自&lt;a href=&quot;https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it&quot;&gt;psycopg邮件列表的计算&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7ca1bec9400ccbbb70ceb6a6128928f0a3fbc600" translate="yes" xml:space="preserve">
          <source>The default value of the &lt;a href=&quot;settings#std:setting-X_FRAME_OPTIONS&quot;&gt;&lt;code&gt;X_FRAME_OPTIONS&lt;/code&gt;&lt;/a&gt; setting was changed from &lt;code&gt;SAMEORIGIN&lt;/code&gt; to &lt;code&gt;DENY&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-X_FRAME_OPTIONS&quot;&gt; &lt;code&gt;X_FRAME_OPTIONS&lt;/code&gt; &lt;/a&gt;设置的默认值从 &lt;code&gt;SAMEORIGIN&lt;/code&gt; 更改为 &lt;code&gt;DENY&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1209fb884dca8125f9f250e873dad008e7674864" translate="yes" xml:space="preserve">
          <source>The default values of these attributes are probably fine for you. If you determine that the password hash is too fast or too slow, you can tweak it as follows:</source>
          <target state="translated">这些属性的默认值对你来说可能很好。如果你确定密码哈希值过快或过慢,你可以按以下方式调整它。</target>
        </trans-unit>
        <trans-unit id="05656151b4b0dfce0903d02dc2521c2ec32bcb69" translate="yes" xml:space="preserve">
          <source>The default version number for cache keys generated by the Django server.</source>
          <target state="translated">Django服务器生成的缓存密钥的默认版本号。</target>
        </trans-unit>
        <trans-unit id="78fb24ffc76652e03018f1dd8a29e38a6634044f" translate="yes" xml:space="preserve">
          <source>The default will find files stored in the &lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt; setting (using &lt;code&gt;django.contrib.staticfiles.finders.FileSystemFinder&lt;/code&gt;) and in a &lt;code&gt;static&lt;/code&gt; subdirectory of each app (using &lt;code&gt;django.contrib.staticfiles.finders.AppDirectoriesFinder&lt;/code&gt;). If multiple files with the same name are present, the first file that is found will be used.</source>
          <target state="translated">默认将查找存储在&lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt; &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; &lt;/a&gt;设置（使用 &lt;code&gt;django.contrib.staticfiles.finders.FileSystemFinder&lt;/code&gt; ）和每个应用程序的 &lt;code&gt;static&lt;/code&gt; 子目录（使用 &lt;code&gt;django.contrib.staticfiles.finders.AppDirectoriesFinder&lt;/code&gt; ）中的文件。如果存在多个具有相同名称的文件，则将使用找到的第一个文件。</target>
        </trans-unit>
        <trans-unit id="a64c65d5d530fbd477a00f355fb236632c2638fb" translate="yes" xml:space="preserve">
          <source>The default zoom level to use. Defaults to 4.</source>
          <target state="translated">要使用的默认缩放级别。默认值为4。</target>
        </trans-unit>
        <trans-unit id="377992fed2cb82d9664407c3569240cb12925a70" translate="yes" xml:space="preserve">
          <source>The default, output 2D WKB.</source>
          <target state="translated">默认情况下,输出2D WKB。</target>
        </trans-unit>
        <trans-unit id="1caf832ac267c397b03a907aedb144b4eaa0408e" translate="yes" xml:space="preserve">
          <source>The delete method, conveniently, is named &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;. This method immediately deletes the object and returns the number of objects deleted and a dictionary with the number of deletions per object type. Example:</source>
          <target state="translated">方便地，将delete方法命名为&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt;。此方法立即删除对象，并返回删除的对象数和带有每种对象类型的删除数的字典。例：</target>
        </trans-unit>
        <trans-unit id="beb30204d16e9db23c951318108a0ecb67ef44cb" translate="yes" xml:space="preserve">
          <source>The description can be of the form:</source>
          <target state="translated">说明的形式可以是:</target>
        </trans-unit>
        <trans-unit id="0d7adcb559f5a853b9e8a2d1c69d315b8258e572" translate="yes" xml:space="preserve">
          <source>The detailed description of the modification. In the case of an edit, for example, the message contains a list of the edited fields. The Django admin site formats this content as a JSON structure, so that &lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt;&lt;code&gt;get_change_message()&lt;/code&gt;&lt;/a&gt; can recompose a message translated in the current user language. Custom code might set this as a plain string though. You are advised to use the &lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt;&lt;code&gt;get_change_message()&lt;/code&gt;&lt;/a&gt; method to retrieve this value instead of accessing it directly.</source>
          <target state="translated">修改的详细说明。例如，在进行编辑的情况下，该消息包含已编辑字段的列表。Django管理站点将此内容格式化为JSON结构，以便&lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt; &lt;code&gt;get_change_message()&lt;/code&gt; &lt;/a&gt;可以重新组合以当前用户语言翻译的消息。自定义代码可能会将其设置为纯字符串。建议您使用&lt;a href=&quot;#django.contrib.admin.models.LogEntry.get_change_message&quot;&gt; &lt;code&gt;get_change_message()&lt;/code&gt; &lt;/a&gt;方法来检索此值，而不是直接访问它。</target>
        </trans-unit>
        <trans-unit id="85044ff6d8ec6add8fcd586dc1308888d31cb228" translate="yes" xml:space="preserve">
          <source>The development process</source>
          <target state="translated">发展进程</target>
        </trans-unit>
        <trans-unit id="37d50d4b3c28889858e66e29eb1b78542a0508a0" translate="yes" xml:space="preserve">
          <source>The development server</source>
          <target state="translated">开发服务器</target>
        </trans-unit>
        <trans-unit id="cfd3b8bf265c1a3f4338f7de1430c957570dea3e" translate="yes" xml:space="preserve">
          <source>The development server automatically reloads Python code for each request as needed. You don&amp;rsquo;t need to restart the server for code changes to take effect. However, some actions like adding files don&amp;rsquo;t trigger a restart, so you&amp;rsquo;ll have to restart the server in these cases.</source>
          <target state="translated">开发服务器会根据需要自动为每个请求重新加载Python代码。您无需重新启动服务器即可使代码更改生效。但是，某些操作（例如添加文件）不会触发重新启动，因此在这种情况下，您必须重新启动服务器。</target>
        </trans-unit>
        <trans-unit id="69d40d41fd2c7119854b55dbde3aff7f9dc4a8a6" translate="yes" xml:space="preserve">
          <source>The development server automatically reloads Python code for each request, as needed. You don&amp;rsquo;t need to restart the server for code changes to take effect. However, some actions like adding files don&amp;rsquo;t trigger a restart, so you&amp;rsquo;ll have to restart the server in these cases.</source>
          <target state="translated">开发服务器会根据需要自动为每个请求重新加载Python代码。您无需重新启动服务器即可使代码更改生效。但是，某些操作（例如添加文件）不会触发重新启动，因此在这种情况下，您必须重新启动服务器。</target>
        </trans-unit>
        <trans-unit id="f2e2c61a3bbc35c05fcee6ff83b301d727f6625e" translate="yes" xml:space="preserve">
          <source>The development server creates a new thread for each request it handles, negating the effect of persistent connections. Don&amp;rsquo;t enable them during development.</source>
          <target state="translated">开发服务器为其处理的每个请求创建一个新线程，从而消除了持久连接的影响。在开发过程中不要启用它们。</target>
        </trans-unit>
        <trans-unit id="65a8a705f321727b308c87b6df994fe9d93e089d" translate="yes" xml:space="preserve">
          <source>The difference between these two is merely the template used to render them.</source>
          <target state="translated">这两者之间的区别仅仅是用于呈现它们的模板。</target>
        </trans-unit>
        <trans-unit id="0af504d1f47d3dc1755fe98c77ffbaa71f21426a" translate="yes" xml:space="preserve">
          <source>The difference comes in &amp;ldquo;reverse&amp;rdquo; queries. The related model in a one-to-one relationship also has access to a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; object, but that &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; represents a single object, rather than a collection of objects:</source>
          <target state="translated">区别在于&amp;ldquo;反向&amp;rdquo;查询。一对一关系中的相关模型也可以访问&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;对象，但是该&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;代表单个对象，而不是对象的集合：</target>
        </trans-unit>
        <trans-unit id="aeea901ff7490fa90553479447d7a51e8ae76e53" translate="yes" xml:space="preserve">
          <source>The difference here is that &lt;code&gt;do_current_time()&lt;/code&gt; grabs the format string and the variable name, passing both to &lt;code&gt;CurrentTimeNode3&lt;/code&gt;.</source>
          <target state="translated">此处的区别在于 &lt;code&gt;do_current_time()&lt;/code&gt; 捕获格式字符串和变量名称，并将两者都传递给 &lt;code&gt;CurrentTimeNode3&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23e00239d3cd39f9bedf6ce6f53d58fb2c97897d" translate="yes" xml:space="preserve">
          <source>The different model field types (&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;) correspond to the appropriate HTML input widget. Each type of field knows how to display itself in the Django admin.</source>
          <target state="translated">不同的模型字段类型（&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;）对应于适当的HTML输入小部件。每种类型的字段都知道如何在Django管理员中显示自己。</target>
        </trans-unit>
        <trans-unit id="5a27e6d484146d270b4af242adf6d6837ab3c613" translate="yes" xml:space="preserve">
          <source>The directories listed in &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; have the highest precedence, with the ones appearing first having higher precedence than the ones appearing later.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; 中&lt;/a&gt;列出的目录具有最高优先级，首先出现的目录优先于随后出现的目录。</target>
        </trans-unit>
        <trans-unit id="f7c245d673aa06edd0292f66414c88ff2123f718" translate="yes" xml:space="preserve">
          <source>The directory path should be absolute &amp;ndash; that is, it should start at the root of your filesystem. It doesn&amp;rsquo;t matter whether you put a slash at the end of the setting.</source>
          <target state="translated">目录路径应该是绝对的-也就是说，它应该从文件系统的根目录开始。是否在设置的末尾加斜杠都没关系。</target>
        </trans-unit>
        <trans-unit id="b0c013069880559208deaffa6c2dbdd225ff8eea" translate="yes" xml:space="preserve">
          <source>The directory to store data to (typically files larger than &lt;a href=&quot;#std:setting-FILE_UPLOAD_MAX_MEMORY_SIZE&quot;&gt;&lt;code&gt;FILE_UPLOAD_MAX_MEMORY_SIZE&lt;/code&gt;&lt;/a&gt;) temporarily while uploading files. If &lt;code&gt;None&lt;/code&gt;, Django will use the standard temporary directory for the operating system. For example, this will default to &lt;code&gt;/tmp&lt;/code&gt; on *nix-style operating systems.</source>
          <target state="translated">上载文件时将数据临时存储到的目录（通常是大于&lt;a href=&quot;#std:setting-FILE_UPLOAD_MAX_MEMORY_SIZE&quot;&gt; &lt;code&gt;FILE_UPLOAD_MAX_MEMORY_SIZE&lt;/code&gt; 的&lt;/a&gt;文件）。如果为 &lt;code&gt;None&lt;/code&gt; ，Django将为操作系统使用标准的临时目录。例如，在* nix风格的操作系统上，该默认值为 &lt;code&gt;/tmp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="efe6c9d9a26f4b893a41fdd2ad38e95aa63558d5" translate="yes" xml:space="preserve">
          <source>The directory used by the &lt;a href=&quot;../topics/email#topic-email-file-backend&quot;&gt;file email backend&lt;/a&gt; to store output files.</source>
          <target state="translated">由所使用的目录&lt;a href=&quot;../topics/email#topic-email-file-backend&quot;&gt;文件的电子邮件后端&lt;/a&gt;存储输出文件。</target>
        </trans-unit>
        <trans-unit id="e16e14dcb79a4952dfb0ecb7dfccc157d53819e1" translate="yes" xml:space="preserve">
          <source>The distinction between &lt;a href=&quot;../../ref/forms/api#ref-forms-api-bound-unbound&quot;&gt;Bound and unbound forms&lt;/a&gt; is important:</source>
          <target state="translated">&lt;a href=&quot;../../ref/forms/api#ref-forms-api-bound-unbound&quot;&gt;绑定形式和未绑定形式&lt;/a&gt;之间的区别很重要：</target>
        </trans-unit>
        <trans-unit id="d0ba4fee1656fe57462feb575961e9a008b70b5c" translate="yes" xml:space="preserve">
          <source>The domain to be used when setting the CSRF cookie. This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection. It should be set to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain.</source>
          <target state="translated">设置CSRF Coo​​kie时要使用的域。这对于将跨子域请求轻松排除在正常的跨站点请求伪造保护中很有用。应该将其设置为字符串，例如 &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; 以允许来自一个子域上的表单的POST请求被另一个子域提供的视图所接受。</target>
        </trans-unit>
        <trans-unit id="f6fa4e11ee0c7e669d33883c4844543c8422b769" translate="yes" xml:space="preserve">
          <source>The domain to use for session cookies. Set this to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; for cross-domain cookies, or use &lt;code&gt;None&lt;/code&gt; for a standard domain cookie.</source>
          <target state="translated">用于会话cookie的域。将其设置为字符串，例如 &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; 用于跨域cookie，或将&amp;ldquo; &lt;code&gt;None&lt;/code&gt; 用于标准域cookie。</target>
        </trans-unit>
        <trans-unit id="68346906ed672a3e709eb8f536ba1f940cc1a0e8" translate="yes" xml:space="preserve">
          <source>The domain to use for the language cookie. Set this to a string such as &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; for cross-domain cookies, or use &lt;code&gt;None&lt;/code&gt; for a standard domain cookie.</source>
          <target state="translated">用于语言Cookie的域。将其设置为字符串，例如 &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; 用于跨域cookie，或将&amp;ldquo; &lt;code&gt;None&lt;/code&gt; 用于标准域cookie。</target>
        </trans-unit>
        <trans-unit id="5c99e78398396ac3dd4367988dfe7298ad65d032" translate="yes" xml:space="preserve">
          <source>The dotted paths of logger names define a hierarchy. The &lt;code&gt;project.interesting&lt;/code&gt; logger is considered to be a parent of the &lt;code&gt;project.interesting.stuff&lt;/code&gt; logger; the &lt;code&gt;project&lt;/code&gt; logger is a parent of the &lt;code&gt;project.interesting&lt;/code&gt; logger.</source>
          <target state="translated">记录器名称的虚线路径定义了层次结构。所述 &lt;code&gt;project.interesting&lt;/code&gt; 记录器被认为是所述的母体 &lt;code&gt;project.interesting.stuff&lt;/code&gt; 记录器; 该 &lt;code&gt;project&lt;/code&gt; 记录是一个父 &lt;code&gt;project.interesting&lt;/code&gt; 记录。</target>
        </trans-unit>
        <trans-unit id="5e13710149427fbf66cfeca797b8aff6be0c4f4b" translate="yes" xml:space="preserve">
          <source>The dynamic link will not appear if the number of currently displayed forms exceeds &lt;code&gt;max_num&lt;/code&gt;, or if the user does not have JavaScript enabled.</source>
          <target state="translated">如果当前显示的表单数超过 &lt;code&gt;max_num&lt;/code&gt; ，或者用户未启用JavaScript，则动态链接将不会出现。</target>
        </trans-unit>
        <trans-unit id="0d55a3c97d629d07660c6f636bfc19000aac89ef" translate="yes" xml:space="preserve">
          <source>The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it.</source>
          <target state="translated">解决这个问题最简单的方法是在你的视图代码中确保数据是按照你想显示的方式来排序的。</target>
        </trans-unit>
        <trans-unit id="aefa18e20124a245a37ca6a166c5d0fa5833b82b" translate="yes" xml:space="preserve">
          <source>The easiest way to configure email for local development is to use the &lt;a href=&quot;#topic-email-console-backend&quot;&gt;console&lt;/a&gt; email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail.</source>
          <target state="translated">为本地开发配置电子邮件的最简单方法是使用&lt;a href=&quot;#topic-email-console-backend&quot;&gt;控制台&lt;/a&gt;电子邮件后端。该后端将所有电子邮件重定向到标准输出，使您可以检查邮件的内容。</target>
        </trans-unit>
        <trans-unit id="b18bdad619333227fb015706761f59c6e7dce1e9" translate="yes" xml:space="preserve">
          <source>The easiest way to construct a compliant custom user model is to inherit from &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt; provides the core implementation of a user model, including hashed passwords and tokenized password resets. You must then provide some key implementation details:</source>
          <target state="translated">构造兼容的自定义用户模型的最简单方法是从&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt;继承。&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; &lt;/a&gt;提供了用户模型的核心实现，包括哈希密码和令牌化密码重置。然后，您必须提供一些关键的实现细节：</target>
        </trans-unit>
        <trans-unit id="102bc6398625e356db3cd3d1071a8edf4afe2996" translate="yes" xml:space="preserve">
          <source>The easiest way to define assets is as a static definition. Using this method, the declaration is an inner &lt;code&gt;Media&lt;/code&gt; class. The properties of the inner class define the requirements.</source>
          <target state="translated">定义资产的最简单方法是静态定义。使用此方法，声明是一个内部 &lt;code&gt;Media&lt;/code&gt; 类。内部类的属性定义了需求。</target>
        </trans-unit>
        <trans-unit id="db27be8a72981483eaa7cc9cc5a678cbb34ecd8b" translate="yes" xml:space="preserve">
          <source>The easiest way to explain actions is by example, so let&amp;rsquo;s dive in.</source>
          <target state="translated">解释动作的最简单方法是通过示例，因此让我们开始吧。</target>
        </trans-unit>
        <trans-unit id="bbbcd95919fd1ecf2e067b0fc6797a2e498acd03" translate="yes" xml:space="preserve">
          <source>The easiest way to use multiple databases is to set up a database routing scheme. The default routing scheme ensures that objects remain &amp;lsquo;sticky&amp;rsquo; to their original database (i.e., an object retrieved from the &lt;code&gt;foo&lt;/code&gt; database will be saved on the same database). The default routing scheme ensures that if a database isn&amp;rsquo;t specified, all queries fall back to the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">使用多个数据库的最简单方法是设置数据库路由方案。默认的路由方案可确保对象保持对原始数据库的&amp;ldquo;粘性&amp;rdquo;（即，从 &lt;code&gt;foo&lt;/code&gt; 数据库检索的对象将保存在同一数据库中）。默认路由方案可确保如果未指定数据库，则所有查询都将回退到 &lt;code&gt;default&lt;/code&gt; 数据库。</target>
        </trans-unit>
        <trans-unit id="5dc09f982934c220e0648dd7dc1424777a9b07ff" translate="yes" xml:space="preserve">
          <source>The email address that error messages come from, such as those sent to &lt;a href=&quot;#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-MANAGERS&quot;&gt;&lt;code&gt;MANAGERS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">错误消息来自的电子邮件地址，例如发送给&lt;a href=&quot;#std:setting-ADMINS&quot;&gt; &lt;code&gt;ADMINS&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#std:setting-MANAGERS&quot;&gt; &lt;code&gt;MANAGERS&lt;/code&gt; &lt;/a&gt;的电子邮件地址。</target>
        </trans-unit>
        <trans-unit id="b2aa2cff626dddc91132ca31ab8a805481ff856c" translate="yes" xml:space="preserve">
          <source>The email backend class has the following methods:</source>
          <target state="translated">电子邮件后台类有以下方法。</target>
        </trans-unit>
        <trans-unit id="4d71c5b436fb244d32f220ecce35712f91163ed6" translate="yes" xml:space="preserve">
          <source>The equality method is defined such that instances with the same primary key value and the same concrete class are considered equal, except that instances with a primary key value of &lt;code&gt;None&lt;/code&gt; aren&amp;rsquo;t equal to anything except themselves. For proxy models, concrete class is defined as the model&amp;rsquo;s first non-proxy parent; for all other models it&amp;rsquo;s simply the model&amp;rsquo;s class.</source>
          <target state="translated">定义相等方法，以便将具有相同主键值和相同具体类的实例视为相等，除了具有主键值&amp;ldquo; &lt;code&gt;None&lt;/code&gt; 实例除自身以外不等于任何东西。对于代理模型，将具体类定义为模型的第一个非代理父类；对于所有其他模型，它只是模型的类。</target>
        </trans-unit>
        <trans-unit id="9ebf4117d2b8a093f5d8b0d1ee0394b967c0414e" translate="yes" xml:space="preserve">
          <source>The equivalent calculation in Python is:</source>
          <target state="translated">在Python中的等价计算是:</target>
        </trans-unit>
        <trans-unit id="5efbfe2be254c3accd765a74009d40714d479343" translate="yes" xml:space="preserve">
          <source>The error code used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;invalid&quot;&lt;/code&gt;.</source>
          <target state="translated">如果验证失败，&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;使用的错误代码。默认为 &lt;code&gt;&quot;invalid&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1b5adb27a8996cdfa0262e0146f124cdf9dba05a" translate="yes" xml:space="preserve">
          <source>The error code used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;null_characters_not_allowed&quot;&lt;/code&gt;.</source>
          <target state="translated">如果验证失败，&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;使用的错误代码。默认为 &lt;code&gt;&quot;null_characters_not_allowed&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="24202a6a3b9947bb61029f3e19e5678ab0a3296e" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Enter a valid email address&quot;&lt;/code&gt;.</source>
          <target state="translated">如果验证失败，&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;使用的错误消息。默认为 &lt;code&gt;&quot;Enter a valid email address&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="79cc7e5b6a815e9ec647851b99499ab73ff67c57" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Enter a valid value&quot;&lt;/code&gt;.</source>
          <target state="translated">如果验证失败，&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;使用的错误消息。默认为 &lt;code&gt;&quot;Enter a valid value&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="057fab28e3430ed0f7b4a055703ab67be3eb226b" translate="yes" xml:space="preserve">
          <source>The error message used by &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if validation fails. Defaults to &lt;code&gt;&quot;Null characters are not allowed.&quot;&lt;/code&gt;.</source>
          <target state="translated">如果验证失败，&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;使用的错误消息。默认为 &lt;code&gt;&quot;Null characters are not allowed.&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61a770a7f28e3325a45dcd70e8e1fa45b0d96d7e" translate="yes" xml:space="preserve">
          <source>The error page, however, is not very friendly, so you may want to provide your own view for handling this condition. To do this, set the &lt;a href=&quot;settings#std:setting-CSRF_FAILURE_VIEW&quot;&gt;&lt;code&gt;CSRF_FAILURE_VIEW&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">但是，错误页面不是很友好，因此您可能需要提供自己的视图来处理这种情况。为此，请设置&lt;a href=&quot;settings#std:setting-CSRF_FAILURE_VIEW&quot;&gt; &lt;code&gt;CSRF_FAILURE_VIEW&lt;/code&gt; &lt;/a&gt;设置。</target>
        </trans-unit>
        <trans-unit id="8d65d9525c27d19f320d6dc01f0885b38569c7fc" translate="yes" xml:space="preserve">
          <source>The event is fired using the &lt;a href=&quot;index#contrib-admin-jquery&quot;&gt;django.jQuery namespace&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;index#contrib-admin-jquery&quot;&gt;django.jQuery命名空间&lt;/a&gt;触发该事件。</target>
        </trans-unit>
        <trans-unit id="1b539ba0434b08941170f2cd1f818a49da908b66" translate="yes" xml:space="preserve">
          <source>The exact URLs that will match are slightly more constrained. For example, the year 10000 will no longer match since the year integers are constrained to be exactly four digits long.</source>
          <target state="translated">匹配的确切URL会受到更多的限制。例如,10000年将不再匹配,因为年份的整数被限制为四位数长。</target>
        </trans-unit>
        <trans-unit id="b4dbb4fcb65cef76c61031d37fb2287e26d8f480" translate="yes" xml:space="preserve">
          <source>The exact output will vary depending on the database you are using. The example above is generated for PostgreSQL.</source>
          <target state="translated">确切的输出会根据你使用的数据库而有所不同。上面的例子是为PostgreSQL生成的。</target>
        </trans-unit>
        <trans-unit id="6244d10392df2eaaeb16d3a53c4aefd2551507e9" translate="yes" xml:space="preserve">
          <source>The exact type of the return value depends on the backend that loaded the template. Each backend has its own &lt;code&gt;Template&lt;/code&gt; class.</source>
          <target state="translated">返回值的确切类型取决于加载模板的后端。每个后端都有自己的 &lt;code&gt;Template&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="d258cbef311d29cf54b7972437f615ede5dab5c9" translate="yes" xml:space="preserve">
          <source>The example above is merely illustrative.</source>
          <target state="translated">上面的例子只是说明性的。</target>
        </trans-unit>
        <trans-unit id="09ae48bd2b690b219baf1e4df51329cbdd48516f" translate="yes" xml:space="preserve">
          <source>The example above shows a full &lt;code&gt;from_db()&lt;/code&gt; implementation to clarify how that is done. In this case it would of course be possible to use &lt;code&gt;super()&lt;/code&gt; call in the &lt;code&gt;from_db()&lt;/code&gt; method.</source>
          <target state="translated">上面的示例显示了完整的 &lt;code&gt;from_db()&lt;/code&gt; 实现，以阐明如何实现。在这种情况下，当然可以在 &lt;code&gt;from_db()&lt;/code&gt; 方法中使用 &lt;code&gt;super()&lt;/code&gt; 调用。</target>
        </trans-unit>
        <trans-unit id="01d04d9726b7a687dfcd3e1f1be1c2f02aa93f43" translate="yes" xml:space="preserve">
          <source>The example above shows the &lt;code&gt;make_published&lt;/code&gt; action defined as a function. That&amp;rsquo;s perfectly fine, but it&amp;rsquo;s not perfect from a code design point of view: since the action is tightly coupled to the &lt;code&gt;Article&lt;/code&gt; object, it makes sense to hook the action to the &lt;code&gt;ArticleAdmin&lt;/code&gt; object itself.</source>
          <target state="translated">上面的示例显示了定义为函数的 &lt;code&gt;make_published&lt;/code&gt; 操作。很好，但是从代码设计的角度来看，这并不是完美的：由于操作与 &lt;code&gt;Article&lt;/code&gt; 对象紧密耦合，因此将操作挂钩到 &lt;code&gt;ArticleAdmin&lt;/code&gt; 对象本身是有意义的。</target>
        </trans-unit>
        <trans-unit id="70fd6fd83f7a6415e49b18c6e810e778afba736b" translate="yes" xml:space="preserve">
          <source>The example below shows a custom database-backed session engine that includes an additional database column to store an account ID (thus providing an option to query the database for all active sessions for an account):</source>
          <target state="translated">下面的例子显示了一个自定义的数据库支持的会话引擎,它包括一个额外的数据库列来存储账户ID(从而提供了一个选项来查询数据库中一个账户的所有活动会话)。</target>
        </trans-unit>
        <trans-unit id="70d2d5dcaec3c018f486ad3a35bf450d09973557" translate="yes" xml:space="preserve">
          <source>The example output is from the cities data source, loaded above, which evidently contains one layer, called &lt;code&gt;&quot;cities&quot;&lt;/code&gt;, which contains three point features. For simplicity, the examples below assume that you&amp;rsquo;ve stored that layer in the variable &lt;code&gt;layer&lt;/code&gt;:</source>
          <target state="translated">示例输出来自上面加载的城市数据源，该数据源显然包含一层称为 &lt;code&gt;&quot;cities&quot;&lt;/code&gt; 图层，该图层包含三个点要素。为简单起见，下面的示例假定您已将该层存储在变量 &lt;code&gt;layer&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="6691f770da4c54ad86e364f335c9b091bbf02a5d" translate="yes" xml:space="preserve">
          <source>The examples below assume you are using function-based views. If you are working with class-based views, you can refer to &lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;Decorating class-based views&lt;/a&gt;.</source>
          <target state="translated">下面的示例假定您使用的是基于函数的视图。如果使用基于类的视图，则可以参考&lt;a href=&quot;../topics/class-based-views/intro#id1&quot;&gt;装饰基于类的视图&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f3acd75e8ac886e7361e65f7b3411b9fa504b1b4" translate="yes" xml:space="preserve">
          <source>The examples below show the SQL equivalent for the lookups in the different types of raster support. The same pattern applies to all spatial lookups.</source>
          <target state="translated">下面的例子显示了不同类型的栅格支持中的查找的SQL等价物。同样的模式适用于所有的空间查找。</target>
        </trans-unit>
        <trans-unit id="0381bb676822bd2c1fc32593d3eafed41c0ed3d5" translate="yes" xml:space="preserve">
          <source>The examples in the previous section have hard-coded the fact that the view is cached, because &lt;code&gt;cache_page&lt;/code&gt; alters the &lt;code&gt;my_view&lt;/code&gt; function in place. This approach couples your view to the cache system, which is not ideal for several reasons. For instance, you might want to reuse the view functions on another, cache-less site, or you might want to distribute the views to people who might want to use them without being cached. The solution to these problems is to specify the per-view cache in the URLconf rather than next to the view functions themselves.</source>
          <target state="translated">上一节中的示例对视图被缓存的事实进行了硬编码，因为 &lt;code&gt;cache_page&lt;/code&gt; 改变了 &lt;code&gt;my_view&lt;/code&gt; 函数的位置。这种方法将您的视图耦合到高速缓存系统，由于多种原因，这种方法并不理想。例如，您可能想在另一个无缓存的站点上重用视图功能，或者可能希望将视图分发给可能希望在不被缓存的情况下使用它们的人。这些问题的解决方案是在URLconf中指定每个视图的缓存，而不是在视图函数本身旁边。</target>
        </trans-unit>
        <trans-unit id="dc504c1e75f70f01937775c1721634f5639b416b" translate="yes" xml:space="preserve">
          <source>The examples in this section are designed to show how to force Django to execute a subquery. In some cases it may be possible to write an equivalent queryset that performs the same task more clearly or efficiently.</source>
          <target state="translated">本节中的例子是为了展示如何强制Django执行一个子查询。在某些情况下,可以写一个等价的查询集,更清楚或更有效地执行同样的任务。</target>
        </trans-unit>
        <trans-unit id="e3ba78a8e40dda280647c05bf08b8f045ba77f2b" translate="yes" xml:space="preserve">
          <source>The examples in this section import the &lt;code&gt;SessionStore&lt;/code&gt; object directly from the &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; backend. In your own code, you should consider importing &lt;code&gt;SessionStore&lt;/code&gt; from the session engine designated by &lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt;&lt;code&gt;SESSION_ENGINE&lt;/code&gt;&lt;/a&gt;, as below:</source>
          <target state="translated">本节中的示例直接从 &lt;code&gt;django.contrib.sessions.backends.db&lt;/code&gt; 后端导入 &lt;code&gt;SessionStore&lt;/code&gt; 对象。在您自己的代码中，应该考虑从&lt;a href=&quot;../../ref/settings#std:setting-SESSION_ENGINE&quot;&gt; &lt;code&gt;SESSION_ENGINE&lt;/code&gt; &lt;/a&gt;指定的会话引擎导入 &lt;code&gt;SessionStore&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="e35dffac0488c2561c931a83c6fe1cf1d8a50419" translate="yes" xml:space="preserve">
          <source>The exception raised when an error occurs in a call to the underlying &lt;code&gt;geoip2&lt;/code&gt; library.</source>
          <target state="translated">在对基础 &lt;code&gt;geoip2&lt;/code&gt; 库的调用中发生错误时引发的异常。</target>
        </trans-unit>
        <trans-unit id="cda3c2363ac6d38861a1a8d767657d0f57cada68" translate="yes" xml:space="preserve">
          <source>The extension of class-based views isn&amp;rsquo;t limited to using mixins. You can also use decorators. Since class-based views aren&amp;rsquo;t functions, decorating them works differently depending on if you&amp;rsquo;re using &lt;code&gt;as_view()&lt;/code&gt; or creating a subclass.</source>
          <target state="translated">基于类的视图的扩展不仅限于使用混合。您也可以使用装饰器。由于基于类的视图不是函数，因此根据您使用的是 &lt;code&gt;as_view()&lt;/code&gt; 还是创建子类，对其进行修饰的工作方式有所不同。</target>
        </trans-unit>
        <trans-unit id="f0757fbf21f596c81165c37d3764eb4cbc8188fc" translate="yes" xml:space="preserve">
          <source>The failure messages given by most of these assertion methods can be customized with the &lt;code&gt;msg_prefix&lt;/code&gt; argument. This string will be prefixed to any failure message generated by the assertion. This allows you to provide additional details that may help you to identify the location and cause of a failure in your test suite.</source>
          <target state="translated">可以使用 &lt;code&gt;msg_prefix&lt;/code&gt; 参数自定义大多数断言方法给出的故障消息。该字符串将作为断言生成的任何失败消息的前缀。这使您可以提供其他详细信息，以帮助您确定测试套件中的位置和失败原因。</target>
        </trans-unit>
        <trans-unit id="227e5834572c4e194e4fc54218042f6fd22390e4" translate="yes" xml:space="preserve">
          <source>The fastest, most efficient type of cache supported natively by Django, &lt;a href=&quot;https://memcached.org/&quot;&gt;Memcached&lt;/a&gt; is an entirely memory-based cache server, originally developed to handle high loads at LiveJournal.com and subsequently open-sourced by Danga Interactive. It is used by sites such as Facebook and Wikipedia to reduce database access and dramatically increase site performance.</source>
          <target state="translated">&lt;a href=&quot;https://memcached.org/&quot;&gt;Memcached&lt;/a&gt;是Django原生支持的最快，最高效的缓存类型，是一种完全基于内存的缓存服务器，最初是为处理LiveJournal.com上的高负载而开发的，随后由Danga Interactive开源。Facebook和Wikipedia等网站使用它来减少数据库访问并显着提高网站性能。</target>
        </trans-unit>
        <trans-unit id="b74b1508edbbb23e6a3000370c6cd096da1fa665" translate="yes" xml:space="preserve">
          <source>The field allows choosing from files inside a certain directory. It takes five extra arguments; only &lt;code&gt;path&lt;/code&gt; is required:</source>
          <target state="translated">该字段允许从某个目录内的文件中进行选择。它需要五个额外的参数。只需要 &lt;code&gt;path&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8261a27fdaafb3905c5f94eeccc1746f11d92091" translate="yes" xml:space="preserve">
          <source>The field does not support escaping of the delimiter, so be careful in cases where the delimiter is a valid character in the underlying field. The delimiter does not need to be only one character.</source>
          <target state="translated">该字段不支持定界符的转义,所以当定界符是底层字段中的有效字符时,要小心。定界符不需要只有一个字符。</target>
        </trans-unit>
        <trans-unit id="4541fd11f662c194c72fa461738a7803380d24f9" translate="yes" xml:space="preserve">
          <source>The field is only automatically updated when calling &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;. The field isn&amp;rsquo;t updated when making updates to other fields in other ways such as &lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt;&lt;code&gt;QuerySet.update()&lt;/code&gt;&lt;/a&gt;, though you can specify a custom value for the field in an update like that.</source>
          <target state="translated">该字段仅在调用&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; &lt;/a&gt;时自动更新。以其他方式（例如&lt;a href=&quot;querysets#django.db.models.query.QuerySet.update&quot;&gt; &lt;code&gt;QuerySet.update()&lt;/code&gt; )&lt;/a&gt;对其他字段进行更新时，该字段不会更新，尽管您可以像这样在更新中为该字段指定自定义值。</target>
        </trans-unit>
        <trans-unit id="38b4adec7d5052603bed698a4b8c5e5c3538d594" translate="yes" xml:space="preserve">
          <source>The field lookups that equate to &lt;code&gt;LIKE&lt;/code&gt; SQL statements (&lt;code&gt;iexact&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;icontains&lt;/code&gt;, &lt;code&gt;startswith&lt;/code&gt;, &lt;code&gt;istartswith&lt;/code&gt;, &lt;code&gt;endswith&lt;/code&gt; and &lt;code&gt;iendswith&lt;/code&gt;) will automatically escape the two special characters used in &lt;code&gt;LIKE&lt;/code&gt; statements &amp;ndash; the percent sign and the underscore. (In a &lt;code&gt;LIKE&lt;/code&gt; statement, the percent sign signifies a multiple-character wildcard and the underscore signifies a single-character wildcard.)</source>
          <target state="translated">相当于 &lt;code&gt;LIKE&lt;/code&gt; SQL语句（ &lt;code&gt;iexact&lt;/code&gt; ， &lt;code&gt;contains&lt;/code&gt; ， &lt;code&gt;icontains&lt;/code&gt; ， &lt;code&gt;startswith&lt;/code&gt; ， &lt;code&gt;istartswith&lt;/code&gt; ， &lt;code&gt;endswith&lt;/code&gt; 和 &lt;code&gt;iendswith&lt;/code&gt; ）的字段查找将自动转义 &lt;code&gt;LIKE&lt;/code&gt; 语句中使用的两个特殊字符-百分号和下划线。 （在 &lt;code&gt;LIKE&lt;/code&gt; 语句中，百分号表示多字符通配符，下划线表示单字符通配符。）</target>
        </trans-unit>
        <trans-unit id="1e41ee0c4c4e7718ea727f9a22cab41c7b40064f" translate="yes" xml:space="preserve">
          <source>The field names in &lt;code&gt;list_display&lt;/code&gt; will also appear as CSS classes in the HTML output, in the form of &lt;code&gt;column-&amp;lt;field_name&amp;gt;&lt;/code&gt; on each &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; element. This can be used to set column widths in a CSS file for example.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; 中的字段名称还将在HTML输出中显示为CSS类，在每个 &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; 元素上以 &lt;code&gt;column-&amp;lt;field_name&amp;gt;&lt;/code&gt; 的形式出现。例如，这可用于设置CSS文件中的列宽。</target>
        </trans-unit>
        <trans-unit id="d716dce5bada681604a2c53c84250caf27b95a35" translate="yes" xml:space="preserve">
          <source>The field on the current object instance that can be used to determine the name of a candidate template. If either &lt;code&gt;template_name_field&lt;/code&gt; itself or the value of the &lt;code&gt;template_name_field&lt;/code&gt; on the current object instance is &lt;code&gt;None&lt;/code&gt;, the object will not be used for a candidate template name.</source>
          <target state="translated">当前对象实例上的字段，可用于确定候选模板的名称。如果 &lt;code&gt;template_name_field&lt;/code&gt; 本身或当前对象实例上的 &lt;code&gt;template_name_field&lt;/code&gt; 的值为 &lt;code&gt;None&lt;/code&gt; ，则该对象将不用作候选模板名称。</target>
        </trans-unit>
        <trans-unit id="630d8b8702ce27d6f8645d1b86436f4a7464e445" translate="yes" xml:space="preserve">
          <source>The field on the related object that the relation is to. By default, Django uses the primary key of the related object. If you reference a different field, that field must have &lt;code&gt;unique=True&lt;/code&gt;.</source>
          <target state="translated">关系所关联的相关对象上的字段。默认情况下，Django使用相关对象的主键。如果引用其他字段，则该字段必须具有 &lt;code&gt;unique=True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e76cec744d379f4dcccb2ad310314d26fd8d60e" translate="yes" xml:space="preserve">
          <source>The field specified in a lookup has to be the name of a model field. There&amp;rsquo;s one exception though, in case of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; you can specify the field name suffixed with &lt;code&gt;_id&lt;/code&gt;. In this case, the value parameter is expected to contain the raw value of the foreign model&amp;rsquo;s primary key. For example:</source>
          <target state="translated">查找中指定的字段必须是模型字段的名称。但是，有一个例外，如果是&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;，则可以指定后缀 &lt;code&gt;_id&lt;/code&gt; 的字段名称。在这种情况下，value参数应包含外部模型的主键的原始值。例如：</target>
        </trans-unit>
        <trans-unit id="4175f90a0443952f19ac0063efac9cb36b524f33" translate="yes" xml:space="preserve">
          <source>The field&amp;rsquo;s label wrapped in the appropriate HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag. This includes the form&amp;rsquo;s &lt;a href=&quot;../../ref/forms/api#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt;. For example, the default &lt;code&gt;label_suffix&lt;/code&gt; is a colon:</source>
          <target state="translated">字段的标签包装在适当的HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 标签中。这包括表单的&lt;a href=&quot;../../ref/forms/api#django.forms.Form.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; &lt;/a&gt;。例如，默认的 &lt;code&gt;label_suffix&lt;/code&gt; 是冒号：</target>
        </trans-unit>
        <trans-unit id="448005ac819f6d743923e91d627be3453197eb30" translate="yes" xml:space="preserve">
          <source>The field&amp;rsquo;s maximum allowable length is defined by &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt;. This does two things. It puts a &lt;code&gt;maxlength=&quot;100&quot;&lt;/code&gt; on the HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; (so the browser should prevent the user from entering more than that number of characters in the first place). It also means that when Django receives the form back from the browser, it will validate the length of the data.</source>
          <target state="translated">字段的最大允许长度由&lt;a href=&quot;../../ref/forms/fields#django.forms.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;定义。这有两件事。它将 &lt;code&gt;maxlength=&quot;100&quot;&lt;/code&gt; 放在HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 上（因此浏览器应首先防止用户输入超过该数量的字符）。这也意味着，当Django从浏览器接收回表单时，它将验证数据的长度。</target>
        </trans-unit>
        <trans-unit id="cf3875fec24fc1333090caee45483067dc8d3dbb" translate="yes" xml:space="preserve">
          <source>The field-specific output honors the form object&amp;rsquo;s &lt;code&gt;auto_id&lt;/code&gt; setting:</source>
          <target state="translated">特定于字段的输出采用表单对象的 &lt;code&gt;auto_id&lt;/code&gt; 设置：</target>
        </trans-unit>
        <trans-unit id="ddb5416909036f134c988459a65406a38acce804" translate="yes" xml:space="preserve">
          <source>The fields to include can be specified using the &lt;code&gt;fields&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; keyword arguments, or the corresponding attributes on the &lt;code&gt;ModelForm&lt;/code&gt; inner &lt;code&gt;Meta&lt;/code&gt; class. Please see the &lt;code&gt;ModelForm&lt;/code&gt;&lt;a href=&quot;#modelforms-selecting-fields&quot;&gt;Selecting the fields to use&lt;/a&gt; documentation.</source>
          <target state="translated">可以使用这些 &lt;code&gt;fields&lt;/code&gt; 指定要包括的字段，并 &lt;code&gt;exclude&lt;/code&gt; 关键字参数或 &lt;code&gt;ModelForm&lt;/code&gt; 内部 &lt;code&gt;Meta&lt;/code&gt; 类上的相应属性。请参阅 &lt;code&gt;ModelForm&lt;/code&gt; &lt;a href=&quot;#modelforms-selecting-fields&quot;&gt;选择要使用&lt;/a&gt;文档的字段。</target>
        </trans-unit>
        <trans-unit id="e6b9074b6e7d23d0ad5da439d0ade59f87da165a" translate="yes" xml:space="preserve">
          <source>The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_FILE_PATH&quot;&gt;&lt;code&gt;EMAIL_FILE_PATH&lt;/code&gt;&lt;/a&gt; setting or from the &lt;code&gt;file_path&lt;/code&gt; keyword when creating a connection with &lt;a href=&quot;#django.core.mail.get_connection&quot;&gt;&lt;code&gt;get_connection()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文件后端将电子邮件写入文件。将为此后端打开的每个新会话创建一个新文件。在使用&lt;a href=&quot;#django.core.mail.get_connection&quot;&gt; &lt;code&gt;get_connection()&lt;/code&gt; &lt;/a&gt;创建连接时，可以从&lt;a href=&quot;../ref/settings#std:setting-EMAIL_FILE_PATH&quot;&gt; &lt;code&gt;EMAIL_FILE_PATH&lt;/code&gt; &lt;/a&gt;设置或从 &lt;code&gt;file_path&lt;/code&gt; 关键字获取写入文件的目录。</target>
        </trans-unit>
        <trans-unit id="d4163f6ace1ca1417ecbd010ee4e813eba341221" translate="yes" xml:space="preserve">
          <source>The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved.</source>
          <target state="translated">该文件是作为在数据库中保存模型的一部分而保存的,因此在保存模型后才能依靠磁盘上实际使用的文件名。</target>
        </trans-unit>
        <trans-unit id="41f33b596b6e1ec2465b3f2736843f4c41a196a5" translate="yes" xml:space="preserve">
          <source>The file storage engine to use when collecting static files with the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command.</source>
          <target state="translated">使用&lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理命令收集静态文件时要使用的文件存储引擎。</target>
        </trans-unit>
        <trans-unit id="035804f436f66d4afdd615a6e4e8aa06c1c2c140" translate="yes" xml:space="preserve">
          <source>The file system permissions that the directory will receive when it is saved. Defaults to &lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_DIRECTORY_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_DIRECTORY_PERMISSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">目录在保存时将收到的文件系统权限。默认为&lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_DIRECTORY_PERMISSIONS&quot;&gt; &lt;code&gt;FILE_UPLOAD_DIRECTORY_PERMISSIONS&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c25797eed4c376aabbae73535692d312a1639d96" translate="yes" xml:space="preserve">
          <source>The file system permissions that the file will receive when it is saved. Defaults to &lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">保存文件时将收到的文件系统权限。默认为&lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt; &lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6c74283db4d94eff6e28ffec0fc60afe81c7dfa3" translate="yes" xml:space="preserve">
          <source>The file will be closed automatically, so don&amp;rsquo;t open it with a context manager.</source>
          <target state="translated">该文件将自动关闭，因此请勿使用上下文管理器打开它。</target>
        </trans-unit>
        <trans-unit id="0b4c94442b294eae671b5179401a9e9dedbbf050" translate="yes" xml:space="preserve">
          <source>The file-based backend serializes and stores each cache value as a separate file. To use this backend set &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;django.core.cache.backends.filebased.FileBasedCache&quot;&lt;/code&gt; and &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt; to a suitable directory. For example, to store cached data in &lt;code&gt;/var/tmp/django_cache&lt;/code&gt;, use this setting:</source>
          <target state="translated">基于文件的后端将每个缓存值序列化并存储为单独的文件。要使用&lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt; &lt;code&gt;BACKEND&lt;/code&gt; &lt;/a&gt;，请将BACKEND设置为 &lt;code&gt;&quot;django.core.cache.backends.filebased.FileBasedCache&quot;&lt;/code&gt; 并将&lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt; &lt;code&gt;LOCATION&lt;/code&gt; 设置&lt;/a&gt;到合适的目录。例如，要将缓存的数据存储在 &lt;code&gt;/var/tmp/django_cache&lt;/code&gt; 中，请使用以下设置：</target>
        </trans-unit>
        <trans-unit id="4e75cf716c59afe86365331aee1878ffc6c24382" translate="yes" xml:space="preserve">
          <source>The filename that was originally given to the file. This may or may not be taken into account when determining the final destination path.</source>
          <target state="translated">最初给文件的文件名。在确定最终目标路径时,可能会考虑到,也可能不会考虑到。</target>
        </trans-unit>
        <trans-unit id="c7080193b49ff0446e5e91ef03b953c27eb57654" translate="yes" xml:space="preserve">
          <source>The filter returns &lt;code&gt;0&lt;/code&gt; for an undefined variable.</source>
          <target state="translated">过滤器为未定义的变量返回 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d3221c79e9c5f913b1c25c6eb2dd053b109e50e" translate="yes" xml:space="preserve">
          <source>The final query does the inversion (&lt;code&gt;27&lt;/code&gt; to &lt;code&gt;-27&lt;/code&gt;) directly in the database. The reason for doing this is that if the &lt;code&gt;self.rhs&lt;/code&gt; is something else than a plain integer value (for example an &lt;code&gt;F()&lt;/code&gt; reference) we can&amp;rsquo;t do the transformations in Python.</source>
          <target state="translated">最终查询直接在数据库中执行从 &lt;code&gt;27&lt;/code&gt; 到 &lt;code&gt;-27&lt;/code&gt; 的反转。这样做的原因是，如果 &lt;code&gt;self.rhs&lt;/code&gt; 不同于普通的整数值（例如 &lt;code&gt;F()&lt;/code&gt; 引用），我们将无法在Python中进行转换。</target>
        </trans-unit>
        <trans-unit id="7c7ca685cf1726772feb729af332bf567c40b4c5" translate="yes" xml:space="preserve">
          <source>The final step in setting up your virtual environment is to activate it:</source>
          <target state="translated">设置虚拟环境的最后一步是激活它。</target>
        </trans-unit>
        <trans-unit id="895d5d8ba62111caffdbf5c689da962e53c48cdb" translate="yes" xml:space="preserve">
          <source>The final step is to enter your password. You will be asked to enter your password twice, the second time as a confirmation of the first.</source>
          <target state="translated">最后一步是输入密码。你会被要求输入两次密码,第二次是对第一次的确认。</target>
        </trans-unit>
        <trans-unit id="26c7aa22741db0888336489a775e113abc6e5017" translate="yes" xml:space="preserve">
          <source>The first argument is a &lt;a href=&quot;../../topics/http/urls#naming-url-patterns&quot;&gt;URL pattern name&lt;/a&gt;. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax:</source>
          <target state="translated">第一个参数是&lt;a href=&quot;../../topics/http/urls#naming-url-patterns&quot;&gt;URL模式名称&lt;/a&gt;。它可以是带引号的文字或任何其他上下文变量。其他参数是可选的，并且应为以空格分隔的值，这些值将用作URL中的参数。上面的示例显示了传递位置参数。或者，您可以使用关键字语法：</target>
        </trans-unit>
        <trans-unit id="aacf6fd5691502e26079ea4443424e381b2c587d" translate="yes" xml:space="preserve">
          <source>The first argument of &lt;code&gt;MigrationWriter.register_serializer()&lt;/code&gt; is a type or iterable of types that should use the serializer.</source>
          <target state="translated">&lt;code&gt;MigrationWriter.register_serializer()&lt;/code&gt; 的第一个参数是应使用序列化程序的类型或可迭代类型。</target>
        </trans-unit>
        <trans-unit id="5d0bd8d670ec9fbf10f7f2947c26e1dc1ad83639" translate="yes" xml:space="preserve">
          <source>The first argument to the constructor is required &amp;ndash; the path to redirect to. This can be a fully qualified URL (e.g. &lt;code&gt;'https://www.yahoo.com/search/'&lt;/code&gt;), an absolute path with no domain (e.g. &lt;code&gt;'/search/'&lt;/code&gt;), or even a relative path (e.g. &lt;code&gt;'search/'&lt;/code&gt;). In that last case, the client browser will reconstruct the full URL itself according to the current path. See &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for other optional constructor arguments. Note that this returns an HTTP status code 302.</source>
          <target state="translated">构造函数的第一个参数是必需的-重定向到的路径。这可以是完全限定的URL（例如 &lt;code&gt;'https://www.yahoo.com/search/'&lt;/code&gt; ），没有域的绝对路径（例如 &lt;code&gt;'/search/'&lt;/code&gt; ）甚至是相对路径（例如 &lt;code&gt;'search/'&lt;/code&gt; ）。在最后一种情况下，客户端浏览器将根据当前路径重新构造完整的URL。有关其他可选构造函数参数，请参见&lt;a href=&quot;#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;。请注意，这将返回HTTP状态代码302。</target>
        </trans-unit>
        <trans-unit id="47a3396d450783ab28ffa716e55c53cf2e330e39" translate="yes" xml:space="preserve">
          <source>The first bit in the &lt;code&gt;WSGIScriptAlias&lt;/code&gt; line is the base URL path you want to serve your application at (&lt;code&gt;/&lt;/code&gt; indicates the root url), and the second is the location of a &amp;ldquo;WSGI file&amp;rdquo; &amp;ndash; see below &amp;ndash; on your system, usually inside of your project package (&lt;code&gt;mysite&lt;/code&gt; in this example). This tells Apache to serve any request below the given URL using the WSGI application defined in that file.</source>
          <target state="translated">&lt;code&gt;WSGIScriptAlias&lt;/code&gt; 行的第一位是您要在其上为应用程序提供服务的基本URL路径（ &lt;code&gt;/&lt;/code&gt; 表示根URL），第二位是&amp;ldquo; WSGI文件&amp;rdquo;的位置&amp;ndash;请参见下文&amp;ndash;在系统中，通常位于您的项目包（在此示例中为 &lt;code&gt;mysite&lt;/code&gt; ）。这告诉Apache使用该文件中定义的WSGI应用程序为给定URL下的任何请求提供服务。</target>
        </trans-unit>
        <trans-unit id="c4793a0d9ffadbbd52ba70700ae977d5a3072dfa" translate="yes" xml:space="preserve">
          <source>The first class is the Python object that your users will manipulate. They will assign it to the model attribute, they will read from it for displaying purposes, things like that. This is the &lt;code&gt;Hand&lt;/code&gt; class in our example.</source>
          <target state="translated">第一类是您的用户将操作的Python对象。他们将其分配给模型属性，他们将从中读取以用于显示目的，诸如此类。在我们的示例中，这是 &lt;code&gt;Hand&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="c60b8b5e1f640009f89a0558d3d9c8beda00fdc0" translate="yes" xml:space="preserve">
          <source>The first decorator doesn&amp;rsquo;t know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The &lt;code&gt;condition&lt;/code&gt; decorator uses both callback functions simultaneously to work out the right action to take.</source>
          <target state="translated">第一个装饰者对第二个装饰者一无所知，即使第二个装饰器会另外做出决定，也可能会回答未修改响应。该 &lt;code&gt;condition&lt;/code&gt; 装饰同时使用两个回调函数来制定出正确的要采取的行动。</target>
        </trans-unit>
        <trans-unit id="35cc855bb31940c21fb4d0fbf57cd5cd7a4e7137" translate="yes" xml:space="preserve">
          <source>The first defense against CSRF attacks is to ensure that GET requests (and other &amp;lsquo;safe&amp;rsquo; methods, as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231#section-4.2.1&lt;/strong&gt;&lt;/a&gt;) are side effect free. Requests via &amp;lsquo;unsafe&amp;rsquo; methods, such as POST, PUT, and DELETE, can then be protected by following the steps below.</source>
          <target state="translated">抵御CSRF攻击的第一个防御方法是确保GET请求（以及&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231＃section-4.2.1&lt;/strong&gt;&lt;/a&gt;定义的其他&amp;ldquo;安全&amp;rdquo;方法）没有副作用。然后可以按照以下步骤保护通过&amp;ldquo;不安全&amp;rdquo;方法（例如POST，PUT和DELETE）发出的请求。</target>
        </trans-unit>
        <trans-unit id="8edd716d888141d95a121f4f265c937c657c24a4" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the actual value to be set on the model, and the second element is the human-readable name. For example:</source>
          <target state="translated">每个元组中的第一个元素是要在模型上设置的实际值,第二个元素是人可读的名称。例如:</target>
        </trans-unit>
        <trans-unit id="66298df4913a918317ded3e216893558da214ecb" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the name to apply to the group. The second element is an iterable of 2-tuples, with each 2-tuple containing a value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single list (such as the &lt;code&gt;unknown&lt;/code&gt; option in this example).</source>
          <target state="translated">每个元组中的第一个元素是应用于组的名称。第二个元素是2元组的可迭代对象，每个2元组包含一个值和一个选项的易于理解的名称。可以在单个列表中将分组的选项与未分组的选项组合在一起（例如本示例中的 &lt;code&gt;unknown&lt;/code&gt; 选项）。</target>
        </trans-unit>
        <trans-unit id="65be4df7d03179170f14cf237e2177f6c9b3d953" translate="yes" xml:space="preserve">
          <source>The first element in each tuple is the value that will be stored in the database. The second element is displayed by the field&amp;rsquo;s form widget.</source>
          <target state="translated">每个元组中的第一个元素是将存储在数据库中的值。第二个元素由字段的表单小部件显示。</target>
        </trans-unit>
        <trans-unit id="01cc055b3073ebaf706ad95e612b19ff24acdce3" translate="yes" xml:space="preserve">
          <source>The first element of each tuple in &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; is the title of the fieldset. Here&amp;rsquo;s what our form looks like now:</source>
          <target state="translated">字段集中每个元组的第一个元素是&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt; &lt;code&gt;fieldsets&lt;/code&gt; &lt;/a&gt;的标题。这是我们的表格现在的样子：</target>
        </trans-unit>
        <trans-unit id="893cf1f3905d1bba0b3c66da2bd40a36666ba533" translate="yes" xml:space="preserve">
          <source>The first is the standard Python way of subclassing and overriding attributes and methods in the subclass. So that if your parent class had an attribute &lt;code&gt;greeting&lt;/code&gt; like this:</source>
          <target state="translated">第一种是子类化和覆盖子类中的属性和方法的标准Python方法。因此，如果您的父类具有这样的属性 &lt;code&gt;greeting&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="97243a4154bcf38eec0dcd770c2c093897849746" translate="yes" xml:space="preserve">
          <source>The first iteration produces HTML that refers to class &lt;code&gt;row1&lt;/code&gt;, the second to &lt;code&gt;row2&lt;/code&gt;, the third to &lt;code&gt;row1&lt;/code&gt; again, and so on for each iteration of the loop.</source>
          <target state="translated">在第一次迭代产生的HTML引用类 &lt;code&gt;row1&lt;/code&gt; ，第二至 &lt;code&gt;row2&lt;/code&gt; ，第三至 &lt;code&gt;row1&lt;/code&gt; 再次，等等用于循环的每次迭代。</target>
        </trans-unit>
        <trans-unit id="e8d8c7f5c523b475b062636295d7f8b034bdc905" translate="yes" xml:space="preserve">
          <source>The first one is the usage we&amp;rsquo;ve been discussing in the previous sections. The second one is what is known as &lt;em&gt;reverse resolution of URLs&lt;/em&gt;, &lt;em&gt;reverse URL matching&lt;/em&gt;, &lt;em&gt;reverse URL lookup&lt;/em&gt;, or simply &lt;em&gt;URL reversing&lt;/em&gt;.</source>
          <target state="translated">第一个是我们在上一节中讨论的用法。第二种是所谓&lt;em&gt;的URL反向解析&lt;/em&gt;，&lt;em&gt;反向URL匹配&lt;/em&gt;，&lt;em&gt;反向URL查找&lt;/em&gt;或简称&lt;em&gt;URL反向&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="49b581f6ea38bccdb9c24f4a993f4f33893e5dc8" translate="yes" xml:space="preserve">
          <source>The first option is to roll back the entire transaction. For example:</source>
          <target state="translated">第一个选项是回滚整个交易。例如:</target>
        </trans-unit>
        <trans-unit id="7b2f5ff0a043fddbb6e2fd41755c4546361f62a5" translate="yes" xml:space="preserve">
          <source>The first option to do so is to add the hosts to your settings file. For example, the test suite for docs.djangoproject.com includes the following:</source>
          <target state="translated">第一个选项是将主机添加到你的设置文件中。例如,docs.djangoproject.com的测试套件包括以下内容。</target>
        </trans-unit>
        <trans-unit id="90239cd9cfb1ec6714d55686d931b04d4cbfa512" translate="yes" xml:space="preserve">
          <source>The first parameter can take three forms: a string representing a file path, a dictionary with values defining a new raster, or a bytes object representing a raster file.</source>
          <target state="translated">第一个参数可以有三种形式:一个代表文件路径的字符串,一个定义新栅格的值的字典,或者一个代表栅格文件的字节对象。</target>
        </trans-unit>
        <trans-unit id="92ec3dcecb261013fdca063af558824fb0f4468e" translate="yes" xml:space="preserve">
          <source>The first parameter, &lt;code&gt;data&lt;/code&gt;, should be a &lt;code&gt;dict&lt;/code&gt; instance. If the &lt;code&gt;safe&lt;/code&gt; parameter is set to &lt;code&gt;False&lt;/code&gt; (see below) it can be any JSON-serializable object.</source>
          <target state="translated">第一个参数 &lt;code&gt;data&lt;/code&gt; 应该是一个 &lt;code&gt;dict&lt;/code&gt; 实例。如果 &lt;code&gt;safe&lt;/code&gt; 参数设置为 &lt;code&gt;False&lt;/code&gt; （请参见下文），则它可以是任何JSON可序列化的对象。</target>
        </trans-unit>
        <trans-unit id="7bb4f019dc7831708e5af533eef9bd70821b86c5" translate="yes" xml:space="preserve">
          <source>The first query asks for the average rating of all a publisher&amp;rsquo;s books for publisher&amp;rsquo;s that have at least one book with a rating exceeding 3.0. The second query asks for the average of a publisher&amp;rsquo;s book&amp;rsquo;s ratings for only those ratings exceeding 3.0.</source>
          <target state="translated">第一个查询要求所有出版商的书籍的平均评分，对于拥有至少一本书且评分超过3.0的出版商。第二个查询仅询问那些评分超过3.0的出版商的书籍评分的平均值。</target>
        </trans-unit>
        <trans-unit id="053d07bf69e6e09e648c0c4e1ae628f5afd4936e" translate="yes" xml:space="preserve">
          <source>The first step &lt;code&gt;full_clean()&lt;/code&gt; performs is to clean each individual field.</source>
          <target state="translated">&lt;code&gt;full_clean()&lt;/code&gt; 执行的第一步是清除每个单独的字段。</target>
        </trans-unit>
        <trans-unit id="5a822f06f42c65b3dd06d798e0659cde397841bd" translate="yes" xml:space="preserve">
          <source>The first step in displaying this intermediate model in the admin is to define an inline class for the &lt;code&gt;Membership&lt;/code&gt; model:</source>
          <target state="translated">在管理员中显示此中间模型的第一步是为 &lt;code&gt;Membership&lt;/code&gt; 模型定义一个内联类：</target>
        </trans-unit>
        <trans-unit id="a2fe99ac174181e80dcc066068a1954b0b7fc707" translate="yes" xml:space="preserve">
          <source>The first step is to add &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ = True&lt;/code&gt;&lt;/a&gt; to your settings file. At this point, things should mostly work. If you create naive datetime objects in your code, Django makes them aware when necessary.</source>
          <target state="translated">第一步是将&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ = True&lt;/code&gt; &lt;/a&gt;添加到您的设置文件。在这一点上，大多数情况下都应该起作用。如果您在代码中创建朴素的datetime对象，则Django会在必要时使它们知道。</target>
        </trans-unit>
        <trans-unit id="5b43c96b6c6b5067fe128e9fb080167e2c1437e8" translate="yes" xml:space="preserve">
          <source>The first step is to create a &lt;a href=&quot;index#term-message-file&quot;&gt;message file&lt;/a&gt; for a new language. A message file is a plain-text file, representing a single language, that contains all available translation strings and how they should be represented in the given language. Message files have a &lt;code&gt;.po&lt;/code&gt; file extension.</source>
          <target state="translated">第一步是为新语言创建&lt;a href=&quot;index#term-message-file&quot;&gt;消息文件&lt;/a&gt;。消息文件是纯文本文件，代表一种语言，其中包含所有可用的翻译字符串以及应如何以给定语言表示。邮件文件的扩展名为 &lt;code&gt;.po&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0458bb2ba643653473bb694c0904556d9a528344" translate="yes" xml:space="preserve">
          <source>The first step to contributing to Django is to get a copy of the source code. First, &lt;a href=&quot;https://github.com/django/django/fork&quot;&gt;fork Django on GitHub&lt;/a&gt;. Then, from the command line, use the &lt;code&gt;cd&lt;/code&gt; command to navigate to the directory where you&amp;rsquo;ll want your local copy of Django to live.</source>
          <target state="translated">对Django做出贡献的第一步是获取源代码的副本。首先，&lt;a href=&quot;https://github.com/django/django/fork&quot;&gt;在GitHub上分叉Django&lt;/a&gt;。然后，从命令行使用 &lt;code&gt;cd&lt;/code&gt; 命令导航到您希望本地Django副本存在的目录。</target>
        </trans-unit>
        <trans-unit id="8ae8d67f65acd52dbb066631338392f1a23fc452" translate="yes" xml:space="preserve">
          <source>The first step to using more than one database with Django is to tell Django about the database servers you&amp;rsquo;ll be using. This is done using the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting. This setting maps database aliases, which are a way to refer to a specific database throughout Django, to a dictionary of settings for that specific connection. The settings in the inner dictionaries are described fully in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">在Django中使用多个数据库的第一步是告诉Django您将使用的数据库服务器。这是使用&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;设置完成的。此设置将数据库别名（这是在整个Django中引用特定数据库的一种方式）映射到该特定连接的设置字典。内部字典中的设置在&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;文档中有完整描述。</target>
        </trans-unit>
        <trans-unit id="44d5bd896e8ca28673de91b965ab96d0c88f5adc" translate="yes" xml:space="preserve">
          <source>The fixtures that are named can include directory components. These directories will be included in the search path. For example:</source>
          <target state="translated">被命名的夹具可以包括目录组件。这些目录将被包含在搜索路径中。比如说:</target>
        </trans-unit>
        <trans-unit id="6c9b843427d6189b66a1ac36bd8f3b19833f6092" translate="yes" xml:space="preserve">
          <source>The flags used when compiling the regular expression string &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;. If &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt; is a pre-compiled regular expression, and &lt;a href=&quot;#django.core.validators.RegexValidator.flags&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt; is overridden, &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">编译正则表达式字符串&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;时使用的标志。如果&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;是预编译的正则表达式，并且&lt;a href=&quot;#django.core.validators.RegexValidator.flags&quot;&gt; &lt;code&gt;flags&lt;/code&gt; &lt;/a&gt;被覆盖，则会引发&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;。默认为 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e33d92dd2768ab4c50afbc85edfa029aa2f7dda" translate="yes" xml:space="preserve">
          <source>The flatpages app</source>
          <target state="translated">平板应用</target>
        </trans-unit>
        <trans-unit id="37429ca8988aa9e21619e03578a3aa7629602021" translate="yes" xml:space="preserve">
          <source>The flatpages app provides a template tag that allows you to iterate over all of the available flatpages on the &lt;a href=&quot;sites#hooking-into-current-site-from-views&quot;&gt;current site&lt;/a&gt;.</source>
          <target state="translated">Flatpages应用程序提供了一个模板标签，可让您遍历&lt;a href=&quot;sites#hooking-into-current-site-from-views&quot;&gt;当前站点&lt;/a&gt;上的所有可用Flatpage 。</target>
        </trans-unit>
        <trans-unit id="b762ecc852af7e088e75baf74cdbc6ac96db8aa4" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;../../utils#django.utils.feedgenerator.SyndicationFeed&quot;&gt;&lt;code&gt;django.utils.feedgenerator.SyndicationFeed&lt;/code&gt;&lt;/a&gt; subclasses are available:</source>
          <target state="translated">以下&lt;a href=&quot;../../utils#django.utils.feedgenerator.SyndicationFeed&quot;&gt; &lt;code&gt;django.utils.feedgenerator.SyndicationFeed&lt;/code&gt; &lt;/a&gt;子类可用：</target>
        </trans-unit>
        <trans-unit id="d0e5c1877f90f95248f71d31f5912958212979ae" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;QuerySet&lt;/code&gt; methods evaluate the &lt;code&gt;QuerySet&lt;/code&gt; and return something &lt;em&gt;other than&lt;/em&gt; a &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">以下 &lt;code&gt;QuerySet&lt;/code&gt; 方法评估 &lt;code&gt;QuerySet&lt;/code&gt; 并返回 &lt;code&gt;QuerySet&lt;/code&gt; &lt;em&gt;以外&lt;/em&gt;的&lt;em&gt;其他值&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="284c34d68eec06943f4a3d9de8968921766e55bb" translate="yes" xml:space="preserve">
          <source>The following are PostgreSQL specific &lt;a href=&quot;../../models/indexes&quot;&gt;indexes&lt;/a&gt; available from the &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; module.</source>
          <target state="translated">以下是 &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; 模块中可用的PostgreSQL特定&lt;a href=&quot;../../models/indexes&quot;&gt;索引&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b6966c34b02d72f9151d4120d3fb9804d013c97" translate="yes" xml:space="preserve">
          <source>The following are all legal:</source>
          <target state="translated">以下都是合法的。</target>
        </trans-unit>
        <trans-unit id="fb8617e614581813861e27bbbd803b31ff1f311d" translate="yes" xml:space="preserve">
          <source>The following are equivalent:</source>
          <target state="translated">以下是相等的:</target>
        </trans-unit>
        <trans-unit id="81542627868a9ffb56db58c11315f765372b892a" translate="yes" xml:space="preserve">
          <source>The following are the arguments and keywords that may be used during instantiation of &lt;code&gt;LayerMapping&lt;/code&gt; objects.</source>
          <target state="translated">以下是在实例化 &lt;code&gt;LayerMapping&lt;/code&gt; 对象期间可以使用的参数和关键字。</target>
        </trans-unit>
        <trans-unit id="ed47360c7d12e10b6c68d9808683c52ed8588691" translate="yes" xml:space="preserve">
          <source>The following arguments are available to all field types. All are optional.</source>
          <target state="translated">以下参数适用于所有字段类型。所有参数都是可选的。</target>
        </trans-unit>
        <trans-unit id="8a9bf51cbaea32fba407af879b808987c8179d02" translate="yes" xml:space="preserve">
          <source>The following attributes and methods are available on any subclass of &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下属性和方法可用于&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; 的&lt;/a&gt;任何子类：</target>
        </trans-unit>
        <trans-unit id="bc16b93aaf25c86c2e5a47839f6ba6772f8aac39" translate="yes" xml:space="preserve">
          <source>The following backends are available in &lt;a href=&quot;#module-django.contrib.auth.backends&quot;&gt;&lt;code&gt;django.contrib.auth.backends&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.auth.backends&quot;&gt; &lt;code&gt;django.contrib.auth.backends&lt;/code&gt; &lt;/a&gt;中提供了以下后端：</target>
        </trans-unit>
        <trans-unit id="27b33dc3dd8b00095e48bdd2946d661302f48b4a" translate="yes" xml:space="preserve">
          <source>The following checklist includes settings that:</source>
          <target state="translated">以下检查表包括以下设置:</target>
        </trans-unit>
        <trans-unit id="9df85d7bdd1888612b2cf87af0d7ed96d4b077c2" translate="yes" xml:space="preserve">
          <source>The following checks are performed on &lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; model fields:</source>
          <target state="translated">在&lt;a href=&quot;contrib/postgres/index#module-django.contrib.postgres&quot;&gt; &lt;code&gt;django.contrib.postgres&lt;/code&gt; &lt;/a&gt;模型字段上执行以下检查：</target>
        </trans-unit>
        <trans-unit id="d0a68f6fed3620bb3281f44c1e52da9151a8c4a5" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered as an inline on a &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下检查在任何执行&lt;a href=&quot;contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt; &lt;code&gt;InlineModelAdmin&lt;/code&gt; &lt;/a&gt;被注册为在内嵌&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc64c4f3803d970a42f815f585a9ef9266262cca" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; (or subclass) that is registered with the admin site:</source>
          <target state="translated">在向管理站点注册的任何&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;（或子类）上执行以下检查：</target>
        </trans-unit>
        <trans-unit id="fbc7a26eae3e54b89174c26b5546d6603116cb76" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered with the admin site:</source>
          <target state="translated">在向管理站点注册的任何&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;上执行以下检查：</target>
        </trans-unit>
        <trans-unit id="798b247d43f522a878f43ca529351c16150eece7" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt;&lt;code&gt;GenericInlineModelAdmin&lt;/code&gt;&lt;/a&gt; that is registered as an inline on a &lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对在&lt;a href=&quot;contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;上注册为内联的任何&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin&quot;&gt; &lt;code&gt;GenericInlineModelAdmin&lt;/code&gt; &lt;/a&gt;执行以下检查。</target>
        </trans-unit>
        <trans-unit id="772c831459e6cb84678eef9556aba5363139c510" translate="yes" xml:space="preserve">
          <source>The following checks are performed on any model using a &lt;a href=&quot;contrib/sites#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">使用&lt;a href=&quot;contrib/sites#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;在任何模型上执行以下检查：</target>
        </trans-unit>
        <trans-unit id="62c287734cdd195293b9a229ff93208bf14d1920" translate="yes" xml:space="preserve">
          <source>The following checks are performed on the default &lt;a href=&quot;contrib/admin/index#django.contrib.admin.AdminSite&quot;&gt;&lt;code&gt;AdminSite&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">在默认的&lt;a href=&quot;contrib/admin/index#django.contrib.admin.AdminSite&quot;&gt; &lt;code&gt;AdminSite&lt;/code&gt; &lt;/a&gt;上执行以下检查：</target>
        </trans-unit>
        <trans-unit id="9e37df7b44137276890a046f659bfb8ba9033c28" translate="yes" xml:space="preserve">
          <source>The following checks are performed on your URL configuration:</source>
          <target state="translated">以下是对您的URL配置进行的检查。</target>
        </trans-unit>
        <trans-unit id="b5e6a7bd9233bcb085b33c0911616d7cb121f331" translate="yes" xml:space="preserve">
          <source>The following checks are performed on your translation configuration:</source>
          <target state="translated">以下是对您的翻译配置进行的检查。</target>
        </trans-unit>
        <trans-unit id="2bc9c3b0e242eeb9303878e26142dbdb14ab08bd" translate="yes" xml:space="preserve">
          <source>The following checks are performed when a model contains a &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">当模型包含&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; &lt;/a&gt;时，将执行以下检查：</target>
        </trans-unit>
        <trans-unit id="718dd25af97d4c416215d47f19360e01f976892e" translate="yes" xml:space="preserve">
          <source>The following checks are run if you use the &lt;a href=&quot;django-admin#cmdoption-check-deploy&quot;&gt;&lt;code&gt;check --deploy&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">如果使用&lt;a href=&quot;django-admin#cmdoption-check-deploy&quot;&gt; &lt;code&gt;check --deploy&lt;/code&gt; &lt;/a&gt;选项，则会运行以下检查：</target>
        </trans-unit>
        <trans-unit id="169f8332f02f69fac3ca8c2910b09ef347510ade" translate="yes" xml:space="preserve">
          <source>The following checks verify that &lt;a href=&quot;contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; is correctly configured:</source>
          <target state="translated">以下检查可验证&lt;a href=&quot;contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;是否已正确配置：</target>
        </trans-unit>
        <trans-unit id="ab28cab160996c2304c7c158d04a89bc438663c7" translate="yes" xml:space="preserve">
          <source>The following checks verify that your &lt;a href=&quot;settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting is correctly configured:</source>
          <target state="translated">以下检查可验证您的&lt;a href=&quot;settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;设置是否正确配置：</target>
        </trans-unit>
        <trans-unit id="658ec03bf20f39893ff07a0a1a0182adf9c190fa" translate="yes" xml:space="preserve">
          <source>The following checks verify that your &lt;a href=&quot;settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting is correctly configured:</source>
          <target state="translated">以下检查可验证您的&lt;a href=&quot;settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;设置是否正确配置：</target>
        </trans-unit>
        <trans-unit id="cb1871103b4735e9f911dab6f3e2f7b9126ed436" translate="yes" xml:space="preserve">
          <source>The following code will let you examine the OGR types (e.g. integer or string) associated with each of the fields:</source>
          <target state="translated">下面的代码将让你检查与每个字段相关联的OGR类型(如整数或字符串)。</target>
        </trans-unit>
        <trans-unit id="b97899d26792490f17732aac0bbd906bcd3df4f3" translate="yes" xml:space="preserve">
          <source>The following decorators in &lt;a href=&quot;#module-django.views.decorators.http&quot;&gt;&lt;code&gt;django.views.decorators.http&lt;/code&gt;&lt;/a&gt; can be used to control caching behavior on particular views.</source>
          <target state="translated">&lt;a href=&quot;#module-django.views.decorators.http&quot;&gt; &lt;code&gt;django.views.decorators.http&lt;/code&gt; 中&lt;/a&gt;的以下装饰器可用于控制特定视图上的缓存行为。</target>
        </trans-unit>
        <trans-unit id="9d3874885283eeb637d618d85b95b428ce844660" translate="yes" xml:space="preserve">
          <source>The following distance lookups are available:</source>
          <target state="translated">以下是可用的距离查询。</target>
        </trans-unit>
        <trans-unit id="511fb6f7d86146e81a24b7522fc492bf7dd8eb25" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of savepoints:</source>
          <target state="translated">下面的例子演示了保存点的使用。</target>
        </trans-unit>
        <trans-unit id="c94672d77becd10e86518f53b48e4b0ab433ece0" translate="yes" xml:space="preserve">
          <source>The following example gets all published objects from &lt;code&gt;MyModel&lt;/code&gt;:</source>
          <target state="translated">以下示例从 &lt;code&gt;MyModel&lt;/code&gt; 获取所有已发布的对象：</target>
        </trans-unit>
        <trans-unit id="5ab8189d4a7cb9d8d6126d8824341ddfe2eef07b" translate="yes" xml:space="preserve">
          <source>The following example gets the object with the primary key of 1 from &lt;code&gt;MyModel&lt;/code&gt;:</source>
          <target state="translated">以下示例从 &lt;code&gt;MyModel&lt;/code&gt; 获取主键为1的对象：</target>
        </trans-unit>
        <trans-unit id="2f109d2e9c17671da9abe438aa5081ff23c0cfc7" translate="yes" xml:space="preserve">
          <source>The following example renders the template &lt;code&gt;myapp/index.html&lt;/code&gt; with the MIME type &lt;em&gt;application/xhtml+xml&lt;/em&gt;:</source>
          <target state="translated">以下示例使用MIME类型&lt;em&gt;application / xhtml + xml&lt;/em&gt;呈现模板 &lt;code&gt;myapp/index.html&lt;/code&gt; ：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a613041ed60555fc2269d1cc2da4bb4bdaef377e" translate="yes" xml:space="preserve">
          <source>The following example restricts overlapping reservations in the same room, not taking canceled reservations into account:</source>
          <target state="translated">下面的例子限制同一房间的重叠保留,不考虑取消的保留。</target>
        </trans-unit>
        <trans-unit id="5ae77351bd437b3ba442b7b1ed3f17c0d69fd5f2" translate="yes" xml:space="preserve">
          <source>The following example shows how rasters can be created from different input sources (using the sample data from the GeoDjango tests; see also the &lt;a href=&quot;#gdal-sample-data&quot;&gt;Sample Data&lt;/a&gt; section).</source>
          <target state="translated">以下示例显示了如何从不同的输入源创建栅格（使用来自GeoDjango测试的&lt;a href=&quot;#gdal-sample-data&quot;&gt;示例数据&lt;/a&gt;；另请参见示例数据部分）。</target>
        </trans-unit>
        <trans-unit id="c6b0d211561de68fb072b86d7bf28643ec23a1c6" translate="yes" xml:space="preserve">
          <source>The following example shows how to exclude some conventional URLs that browsers and crawlers often request:</source>
          <target state="translated">下面的例子显示了如何排除浏览器和爬虫经常请求的一些常规URL。</target>
        </trans-unit>
        <trans-unit id="d17b7184c9d112ad10af3bbd154bc9a225b3dc3b" translate="yes" xml:space="preserve">
          <source>The following example uses some of the options available for the &lt;a href=&quot;https://gdal.org/drivers/raster/gtiff.html&quot;&gt;GTiff driver&lt;/a&gt;. The result is a compressed signed byte raster with an internal tiling scheme. The internal tiles have a block size of 23 by 23:</source>
          <target state="translated">下面的示例使用一些&lt;a href=&quot;https://gdal.org/drivers/raster/gtiff.html&quot;&gt;GTiff驱动程序&lt;/a&gt;可用的选项。结果是使用内部切片方案压缩的带符号字节光栅。内部磁贴的块大小为23 x 23：</target>
        </trans-unit>
        <trans-unit id="02aa7661af1a2fa0eb1f55c6693585884acd7e85" translate="yes" xml:space="preserve">
          <source>The following example, which uses &lt;code&gt;myapp_defaults&lt;/code&gt; as a positional argument, is equivalent:</source>
          <target state="translated">以下示例使用 &lt;code&gt;myapp_defaults&lt;/code&gt; 作为位置参数，它是等效的：</target>
        </trans-unit>
        <trans-unit id="a7f4a8147d9020a9a80678a5a04a8331e9fd9b42" translate="yes" xml:space="preserve">
          <source>The following example:</source>
          <target state="translated">下面的例子。</target>
        </trans-unit>
        <trans-unit id="dbdcc10d5462ba46d9b6fc2e25ec7724d00ed9d4" translate="yes" xml:space="preserve">
          <source>The following examples are valid tests and don&amp;rsquo;t raise any &lt;code&gt;AssertionError&lt;/code&gt;:</source>
          <target state="translated">以下示例是有效的测试，并且不会引发任何 &lt;code&gt;AssertionError&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ef65fe69e1f9b55d1642608283978e9fd4dd6a5c" translate="yes" xml:space="preserve">
          <source>The following examples illustrate the difference between plain lookups and &lt;code&gt;select_related()&lt;/code&gt; lookups. Here&amp;rsquo;s standard lookup:</source>
          <target state="translated">以下示例说明了普通查找和 &lt;code&gt;select_related()&lt;/code&gt; 查找之间的区别。这是标准查询：</target>
        </trans-unit>
        <trans-unit id="a4092fa174e7a8f36074dda217b59427b9e0598b" translate="yes" xml:space="preserve">
          <source>The following forms are compatible with any subclass of &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt;&lt;code&gt;AbstractBaseUser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下形式与&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser&quot;&gt; &lt;code&gt;AbstractBaseUser&lt;/code&gt; 的&lt;/a&gt;任何子类兼容：</target>
        </trans-unit>
        <trans-unit id="adf4225ac1727ac53e1866d9bd7ebf9585a592aa" translate="yes" xml:space="preserve">
          <source>The following forms make assumptions about the user model and can be used as-is if those assumptions are met:</source>
          <target state="translated">以下表格对用户模型进行了假设,如果满足这些假设,可以按原样使用。</target>
        </trans-unit>
        <trans-unit id="03fd4939a7e630a5b2c4080424d25186843fae49" translate="yes" xml:space="preserve">
          <source>The following inner options that may be required for more complex configurations are available:</source>
          <target state="translated">以下是更复杂配置可能需要的内部选项:</target>
        </trans-unit>
        <trans-unit id="ce44bfd694d584e192c872881f893ed40f5892ce" translate="yes" xml:space="preserve">
          <source>The following input formats, along with their corresponding Python types, are accepted:</source>
          <target state="translated">接受以下输入格式,以及它们对应的Python类型。</target>
        </trans-unit>
        <trans-unit id="c5ed210269141c795e27b30d64a358ba08aee37b" translate="yes" xml:space="preserve">
          <source>The following is a unit test using the request factory:</source>
          <target state="translated">下面是一个使用请求工厂的单元测试。</target>
        </trans-unit>
        <trans-unit id="aa12bb2e2e2d43123308a3bfa9526910ae0ff4eb" translate="yes" xml:space="preserve">
          <source>The following is a unit test using the test client:</source>
          <target state="translated">以下是使用测试客户端进行的单元测试。</target>
        </trans-unit>
        <trans-unit id="fda8551c0b3bcb17fa6179ad9c7500759423e393" translate="yes" xml:space="preserve">
          <source>The following is an example &lt;code&gt;settings.py&lt;/code&gt; snippet defining two databases &amp;ndash; a default PostgreSQL database and a MySQL database called &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="translated">以下是一个示例 &lt;code&gt;settings.py&lt;/code&gt; 片段，定义了两个数据库-一个默认的PostgreSQL数据库和一个名为 &lt;code&gt;users&lt;/code&gt; 的MySQL数据库：</target>
        </trans-unit>
        <trans-unit id="b293ec95f949c27628bace57f66b95d58a3bc865" translate="yes" xml:space="preserve">
          <source>The following is an example bare-bones settings file with spatial backends that can be used to run the entire Django test suite, including those in &lt;a href=&quot;index#module-django.contrib.gis&quot;&gt;&lt;code&gt;django.contrib.gis&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下是带有空间后端的示例基本设置文件，可用于运行整个Django测试套件，包括&lt;a href=&quot;index#module-django.contrib.gis&quot;&gt; &lt;code&gt;django.contrib.gis&lt;/code&gt; 中的&lt;/a&gt;那些：</target>
        </trans-unit>
        <trans-unit id="155b13a7d360ac7ab41723483431b48699c1a83a" translate="yes" xml:space="preserve">
          <source>The following keys in the &lt;code&gt;TEST&lt;/code&gt; dictionary are available:</source>
          <target state="translated">&lt;code&gt;TEST&lt;/code&gt; 词典中的以下键可用：</target>
        </trans-unit>
        <trans-unit id="8db9385dcb2867000b18aa9ba73c14c9c95225ae" translate="yes" xml:space="preserve">
          <source>The following mixins are used to construct Django&amp;rsquo;s editing views:</source>
          <target state="translated">以下mixin用于构造Django的编辑视图：</target>
        </trans-unit>
        <trans-unit id="56bf33227ffc3fd9440f7918633d861bffc08d69" translate="yes" xml:space="preserve">
          <source>The following options are available for all backends.</source>
          <target state="translated">以下选项适用于所有后端。</target>
        </trans-unit>
        <trans-unit id="bfc330e8533debea8bfca9a1ee07bf2cd57313b0" translate="yes" xml:space="preserve">
          <source>The following path converters are available by default:</source>
          <target state="translated">以下是默认的路径转换器。</target>
        </trans-unit>
        <trans-unit id="37a9d07a5ce6b19cdb03447182319609657d2303" translate="yes" xml:space="preserve">
          <source>The following special markup can be used in your docstrings to easily create hyperlinks to other components:</source>
          <target state="translated">下面的特殊标记可以在你的docstrings中使用,以方便创建超链接到其他组件。</target>
        </trans-unit>
        <trans-unit id="ce2e60220c58a5237c89916e6739ef4fb408e2f9" translate="yes" xml:space="preserve">
          <source>The following steps install &lt;code&gt;django-polls&lt;/code&gt; as a user library. Per-user installs have a lot of advantages over installing the package system-wide, such as being usable on systems where you don&amp;rsquo;t have administrator access as well as preventing the package from affecting system services and other users of the machine.</source>
          <target state="translated">以下步骤将 &lt;code&gt;django-polls&lt;/code&gt; 安装为用户库。与在整个系统范围内安装软件包相比，每用户安装具有很多优点，例如可在没有管理员访问权限的系统上使用，以及防止软件包影响系统服务和计算机的其他用户。</target>
        </trans-unit>
        <trans-unit id="3de0e27c71a643c0167b9228ad10d92581ce566d" translate="yes" xml:space="preserve">
          <source>The following table describes all keys that can be set in the &lt;code&gt;ds_input&lt;/code&gt; dictionary.</source>
          <target state="translated">下表描述了可以在 &lt;code&gt;ds_input&lt;/code&gt; 词典中设置的所有键。</target>
        </trans-unit>
        <trans-unit id="77ddba8f9221d107fb82a68bc44f1d2ec652ddc1" translate="yes" xml:space="preserve">
          <source>The following table explains the calculation for the percentile rank of a row:</source>
          <target state="translated">下表解释了行的百分位数的计算。</target>
        </trans-unit>
        <trans-unit id="9954c85322fc76aa8231c73793448b604300eff4" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what GIS-specific aggregate functions are available on each spatial backend. Please note that MySQL does not support any of these aggregates, and is thus excluded from the table.</source>
          <target state="translated">下表提供了每个空间后端可用的GIS专用汇总功能的摘要。请注意,MySQL不支持任何这些汇总功能,因此不在表中。</target>
        </trans-unit>
        <trans-unit id="8ed03a7e1d29f617e97e3e2081eac463d8dc91b6" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what geography-specific database functions are available on each spatial backend.</source>
          <target state="translated">下表提供了每个空间后端都有哪些地理专用数据库功能的摘要。</target>
        </trans-unit>
        <trans-unit id="87a5dfe0372fbe7b676b68991bb037492b90fea7" translate="yes" xml:space="preserve">
          <source>The following table provides a summary of what spatial lookups are available for each spatial database backend. The PostGIS Raster (PGRaster) lookups are divided into the three categories described in the &lt;a href=&quot;#spatial-lookup-raster&quot;&gt;raster lookup details&lt;/a&gt;: native support &lt;code&gt;N&lt;/code&gt;, bilateral native support &lt;code&gt;B&lt;/code&gt;, and geometry conversion support &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="translated">下表总结了可用于每个空间数据库后端的空间查找。的PostGIS的光栅（PGRaster）查找被分成在所描述的三类&lt;a href=&quot;#spatial-lookup-raster&quot;&gt;光栅查找细节&lt;/a&gt;：原生支持 &lt;code&gt;N&lt;/code&gt; ，双边本地支持 &lt;code&gt;B&lt;/code&gt; ，和几何结构转换支持 &lt;code&gt;C&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17cb4e80e675b29c99328366acbf87f2bdc32c9b" translate="yes" xml:space="preserve">
          <source>The following three classes provide much of the functionality needed to create Django views. You may think of them as &lt;em&gt;parent&lt;/em&gt; views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins and Generic class-based views.</source>
          <target state="translated">以下三个类提供了创建Django视图所需的许多功能。您可能会认为它们是&lt;em&gt;父&lt;/em&gt;视图，它们可以自己使用或继承。它们可能无法提供项目所需的全部功能，在这种情况下，存在Mixins和基于通用类的视图。</target>
        </trans-unit>
        <trans-unit id="163b5f6afc0ffb26d1ffc866c1f722351d96ab02" translate="yes" xml:space="preserve">
          <source>The following views are described on this page and provide a foundation for editing content:</source>
          <target state="translated">本页介绍了以下视图,为编辑内容奠定了基础。</target>
        </trans-unit>
        <trans-unit id="3022ab1485812abddb1a35eb1aa77b23ad3cf6ee" translate="yes" xml:space="preserve">
          <source>The for loop sets a number of variables available within the loop:</source>
          <target state="translated">for循环设置了一些循环中可用的变量。</target>
        </trans-unit>
        <trans-unit id="6793037035443cca7f0f9bdde895bd5877949c0a" translate="yes" xml:space="preserve">
          <source>The foreign key relationship is made explicit by a &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint. Don&amp;rsquo;t worry about the &lt;code&gt;DEFERRABLE&lt;/code&gt; parts; it&amp;rsquo;s telling PostgreSQL to not enforce the foreign key until the end of the transaction.</source>
          <target state="translated">通过 &lt;code&gt;FOREIGN KEY&lt;/code&gt; 约束使外键关系明确。不用担心 &lt;code&gt;DEFERRABLE&lt;/code&gt; 部分；它告诉PostgreSQL在事务结束之前不要执行外键。</target>
        </trans-unit>
        <trans-unit id="c0ba7b5548e8a098c637d857954895946ddd63ea" translate="yes" xml:space="preserve">
          <source>The form &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance from the form class that this &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; wraps.</source>
          <target state="translated">此&lt;a href=&quot;#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; &lt;/a&gt;包装的表单类中的表单&lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="1534a6bb0f89c8d9e2ed69373d2903181c1f6689" translate="yes" xml:space="preserve">
          <source>The form class to instantiate.</source>
          <target state="translated">要实例化的表单类。</target>
        </trans-unit>
        <trans-unit id="b7be3637d68371b077e5ccddff05d872e662bae7" translate="yes" xml:space="preserve">
          <source>The form field class can be specified via the &lt;code&gt;form_class&lt;/code&gt; and &lt;code&gt;choices_form_class&lt;/code&gt; arguments; the latter is used if the field has choices specified, the former otherwise. If these arguments are not provided, &lt;a href=&quot;../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/forms/fields#django.forms.TypedChoiceField&quot;&gt;&lt;code&gt;TypedChoiceField&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">可以通过 &lt;code&gt;form_class&lt;/code&gt; 和 &lt;code&gt;choices_form_class&lt;/code&gt; 参数指定表单字段类；如果字段指定了选项，则使用后者；否则，则使用前者。如果未提供这些参数，则将使用&lt;a href=&quot;../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../ref/forms/fields#django.forms.TypedChoiceField&quot;&gt; &lt;code&gt;TypedChoiceField&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fa18bf982492fb4c002335a36b723ed98a5b1694" translate="yes" xml:space="preserve">
          <source>The form field class to use. Should be a subclass of &lt;a href=&quot;#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField&quot;&gt;&lt;code&gt;django.contrib.postgres.forms.BaseRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要使用的表单字段类。应该是&lt;a href=&quot;#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField&quot;&gt; &lt;code&gt;django.contrib.postgres.forms.BaseRangeField&lt;/code&gt; &lt;/a&gt;的子类。</target>
        </trans-unit>
        <trans-unit id="583c83c1cdf33703c4ff871f465e82072c61716f" translate="yes" xml:space="preserve">
          <source>The form field to use.</source>
          <target state="translated">要使用的表格字段。</target>
        </trans-unit>
        <trans-unit id="99b3e54d8c3f892d70c3092d0e22b4adc50df480" translate="yes" xml:space="preserve">
          <source>The form field&amp;rsquo;s &lt;code&gt;help_text&lt;/code&gt; is set to the &lt;code&gt;help_text&lt;/code&gt; of the model field.</source>
          <target state="translated">表单字段的 &lt;code&gt;help_text&lt;/code&gt; 设置为模型字段的 &lt;code&gt;help_text&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3831999900df601e13b4cc2b4d2801cb5e7b6676" translate="yes" xml:space="preserve">
          <source>The form field&amp;rsquo;s &lt;code&gt;label&lt;/code&gt; is set to the &lt;code&gt;verbose_name&lt;/code&gt; of the model field, with the first character capitalized.</source>
          <target state="translated">表单字段的 &lt;code&gt;label&lt;/code&gt; 设置为模型字段的 &lt;code&gt;verbose_name&lt;/code&gt; ，首字符大写。</target>
        </trans-unit>
        <trans-unit id="61e26b1e4a05cc19e5e8fffbd68fa4a669f5a318" translate="yes" xml:space="preserve">
          <source>The form is automatically generated from the &lt;code&gt;Question&lt;/code&gt; model.</source>
          <target state="translated">该表格是根据&amp;ldquo; &lt;code&gt;Question&lt;/code&gt; 模型自动生成的。</target>
        </trans-unit>
        <trans-unit id="b0384cc268ee77b3dff51bad13c22bf1aa965a02" translate="yes" xml:space="preserve">
          <source>The form rendering API</source>
          <target state="translated">表单渲染API</target>
        </trans-unit>
        <trans-unit id="f574edc6f8e7cec3302c146e9cbb412039ad54eb" translate="yes" xml:space="preserve">
          <source>The form rendering process can be customized at several levels:</source>
          <target state="translated">表单渲染过程可以在几个层次上进行定制。</target>
        </trans-unit>
        <trans-unit id="a672d2e53a1a3d13a6ab486384ed5366c7b44352" translate="yes" xml:space="preserve">
          <source>The form subclass&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method can perform validation that requires access to multiple form fields. This is where you might put in checks such as &amp;ldquo;if field &lt;code&gt;A&lt;/code&gt; is supplied, field &lt;code&gt;B&lt;/code&gt; must contain a valid email address&amp;rdquo;. This method can return a completely different dictionary if it wishes, which will be used as the &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">表单子类的 &lt;code&gt;clean()&lt;/code&gt; 方法可以执行验证，该验证需要访问多个表单字段。您可以在此处进行检查，例如&amp;ldquo;如果提供了字段 &lt;code&gt;A&lt;/code&gt; ，则字段 &lt;code&gt;B&lt;/code&gt; 必须包含有效的电子邮件地址&amp;rdquo;。如果需要，此方法可以返回完全不同的字典，该字典将用作 &lt;code&gt;cleaned_data&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f5b4becd0d7d40a52a4b429db7292b68ea7f044f" translate="yes" xml:space="preserve">
          <source>The form&amp;rsquo;s &lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_bound&quot;&gt;&lt;code&gt;is_bound&lt;/code&gt;&lt;/a&gt; attribute will tell you whether a form has data bound to it or not.</source>
          <target state="translated">表单的&lt;a href=&quot;../../ref/forms/api#django.forms.Form.is_bound&quot;&gt; &lt;code&gt;is_bound&lt;/code&gt; &lt;/a&gt;属性将告诉您表单是否绑定了数据。</target>
        </trans-unit>
        <trans-unit id="e950b68fbdaf523aa7382e18b51c8a8cef51b3e5" translate="yes" xml:space="preserve">
          <source>The format in which this field&amp;rsquo;s initial value will be displayed.</source>
          <target state="translated">将显示该字段的初始值的格式。</target>
        </trans-unit>
        <trans-unit id="8b91cfbe0bdb4e0fd3f4c62f0a068f0cc91d0411" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;credentials&lt;/code&gt; argument depends on which &lt;a href=&quot;../auth/customizing#authentication-backends&quot;&gt;authentication backend&lt;/a&gt; you&amp;rsquo;re using (which is configured by your &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting). If you&amp;rsquo;re using the standard authentication backend provided by Django (&lt;code&gt;ModelBackend&lt;/code&gt;), &lt;code&gt;credentials&lt;/code&gt; should be the user&amp;rsquo;s username and password, provided as keyword arguments:</source>
          <target state="translated">&lt;code&gt;credentials&lt;/code&gt; 参数的格式取决于您使用的&lt;a href=&quot;../auth/customizing#authentication-backends&quot;&gt;身份验证后端&lt;/a&gt;（由&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;设置配置）。如果您使用的是Django（ &lt;code&gt;ModelBackend&lt;/code&gt; ）提供的标准身份验证后端，则 &lt;code&gt;credentials&lt;/code&gt; 应为用户的用户名和密码，并作为关键字参数提供：</target>
        </trans-unit>
        <trans-unit id="807e401f2ad8a08cbbac05cb7a265a5161065192" translate="yes" xml:space="preserve">
          <source>The format passed can also be one of the predefined ones &lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt;&lt;code&gt;DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;. The predefined formats may vary depending on the current locale and if &lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;Format localization&lt;/a&gt; is enabled, e.g.:</source>
          <target state="translated">传递的格式也可以是预定义的&lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt; &lt;code&gt;DATE_FORMAT&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt; &lt;code&gt;DATETIME_FORMAT&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt; 之一&lt;/a&gt;。预定义的格式可能会根据当前的语言环境以及是否启用了&lt;a href=&quot;../../topics/i18n/formatting&quot;&gt;格式本地化&lt;/a&gt;而有所不同，例如：</target>
        </trans-unit>
        <trans-unit id="951d43a269abf1da9010e4a3a479d4e95cf3e53a" translate="yes" xml:space="preserve">
          <source>The format passed can be one of the predefined ones &lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt;&lt;code&gt;DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt;&lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt;&lt;/a&gt;, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale.</source>
          <target state="translated">传递的格式可以是预定义的&lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt; &lt;code&gt;DATE_FORMAT&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../settings#std:setting-DATETIME_FORMAT&quot;&gt; &lt;code&gt;DATETIME_FORMAT&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../settings#std:setting-SHORT_DATE_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATE_FORMAT&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../settings#std:setting-SHORT_DATETIME_FORMAT&quot;&gt; &lt;code&gt;SHORT_DATETIME_FORMAT&lt;/code&gt; 之一&lt;/a&gt;，也可以是使用上表所示格式说明符的自定义格式。请注意，预定义的格式可能会根据当前区域设置而有所不同。</target>
        </trans-unit>
        <trans-unit id="f066dbb865224cf294eed21302203dfe4cfd60fd" translate="yes" xml:space="preserve">
          <source>The formatting here is a bit simpler than with XML. The whole collection is just represented as an array and the objects are represented by JSON objects with three properties: &amp;ldquo;pk&amp;rdquo;, &amp;ldquo;model&amp;rdquo; and &amp;ldquo;fields&amp;rdquo;. &amp;ldquo;fields&amp;rdquo; is again an object containing each field&amp;rsquo;s name and value as property and property-value respectively.</source>
          <target state="translated">这里的格式比使用XML更简单。整个集合仅表示为数组，而对象则由具有三个属性的JSON对象表示：&amp;ldquo; pk&amp;rdquo;，&amp;ldquo; model&amp;rdquo;和&amp;ldquo; fields&amp;rdquo;。&amp;ldquo;字段&amp;rdquo;还是一个对象，包含每个字段的名称和值分别作为属性和属性值。</target>
        </trans-unit>
        <trans-unit id="9d586c1fb6a5074b5116ac82f29c5ec23f4cd5ce" translate="yes" xml:space="preserve">
          <source>The formatting string &lt;code&gt;'&quot;%Y-%m-%d %I:%M %p&quot;'&lt;/code&gt;. The return value from &lt;code&gt;split_contents()&lt;/code&gt; will include the leading and trailing quotes for string literals like this.</source>
          <target state="translated">格式字符串 &lt;code&gt;'&quot;%Y-%m-%d %I:%M %p&quot;'&lt;/code&gt; 。 &lt;code&gt;split_contents()&lt;/code&gt; 的返回值将包括这样的字符串文字的前后引号。</target>
        </trans-unit>
        <trans-unit id="091f61dfdc46efca63677e49711c3d2d58217566" translate="yes" xml:space="preserve">
          <source>The formatting system is disabled by default. To enable it, it&amp;rsquo;s necessary to set &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N = True&lt;/code&gt;&lt;/a&gt; in your settings file.</source>
          <target state="translated">默认情况下，格式化系统是禁用的。要启用它，必须在设置文件中设置&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N = True&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ef40a81d231b49fec1bb734bf46666ee33684758" translate="yes" xml:space="preserve">
          <source>The formset &lt;code&gt;clean&lt;/code&gt; method is called after all the &lt;code&gt;Form.clean&lt;/code&gt; methods have been called. The errors will be found using the &lt;code&gt;non_form_errors()&lt;/code&gt; method on the formset.</source>
          <target state="translated">在调用所有 &lt;code&gt;Form.clean&lt;/code&gt; 方法之后，将调用formset &lt;code&gt;clean&lt;/code&gt; 方法。将使用 &lt;code&gt;non_form_errors()&lt;/code&gt; 上的non_form_errors（）方法找到错误。</target>
        </trans-unit>
        <trans-unit id="4f08dd43eaf586c981739bb266dbdd204bdb5c7b" translate="yes" xml:space="preserve">
          <source>The framework also supports more complex feeds, via arguments.</source>
          <target state="translated">该框架还支持更复杂的feed,通过参数。</target>
        </trans-unit>
        <trans-unit id="bd84135d1e1d25338f18a04a1803130b52cbc283" translate="yes" xml:space="preserve">
          <source>The framework is flexible and allows you to write functions that perform any other kind of check you may require. The following is an example stub check function:</source>
          <target state="translated">该框架是灵活的,允许你编写执行任何其他类型的检查的函数。下面是一个存根检查函数的例子。</target>
        </trans-unit>
        <trans-unit id="d7eca4abbb429fc35f394aa077d5c08f35e91bc2" translate="yes" xml:space="preserve">
          <source>The full Python path of the WSGI application object that Django&amp;rsquo;s built-in servers (e.g. &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt;) will use. The &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt; management command will create a standard &lt;code&gt;wsgi.py&lt;/code&gt; file with an &lt;code&gt;application&lt;/code&gt; callable in it, and point this setting to that &lt;code&gt;application&lt;/code&gt;.</source>
          <target state="translated">Django的内置服务器（例如&lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;）将使用的WSGI应用程序对象的完整Python路径。在&lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;django-admin startproject&lt;/code&gt; &lt;/a&gt;管理命令将创建一个标准 &lt;code&gt;wsgi.py&lt;/code&gt; 与文件 &lt;code&gt;application&lt;/code&gt; 中调用它，并指出该设置到该 &lt;code&gt;application&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="588b867bdf3639f979cc4fb9e70120dbc5a2e050" translate="yes" xml:space="preserve">
          <source>The full documentation for &lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging-config-dictschema&quot;&gt;dictConfig format&lt;/a&gt; is the best source of information about logging configuration dictionaries. However, to give you a taste of what is possible, here are several examples.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/logging.config.html#logging-config-dictschema&quot;&gt;dictConfig格式&lt;/a&gt;的完整文档是有关记录配置字典的最佳信息来源。但是，为了让您领会到什么，这里有几个示例。</target>
        </trans-unit>
        <trans-unit id="ecb568036e6cb6bf57a247e9a736a4031dccbe19" translate="yes" xml:space="preserve">
          <source>The full list of hashers included in Django is:</source>
          <target state="translated">Django中包含的Hashers的完整列表是。</target>
        </trans-unit>
        <trans-unit id="9564ebd548a987b4d37c857948ea4148889346c2" translate="yes" xml:space="preserve">
          <source>The full list of known directives can be found in the &lt;a href=&quot;https://www.iana.org/assignments/http-cache-directives/http-cache-directives.xhtml&quot;&gt;IANA registry&lt;/a&gt; (note that not all of them apply to responses).</source>
          <target state="translated">可以在&lt;a href=&quot;https://www.iana.org/assignments/http-cache-directives/http-cache-directives.xhtml&quot;&gt;IANA注册中心中&lt;/a&gt;找到已知指令的完整列表（请注意，并非所有指令都适用于响应）。</target>
        </trans-unit>
        <trans-unit id="74fc1b13507793faaecffa2677ac4fb4d3c020f2" translate="yes" xml:space="preserve">
          <source>The full name of a template to use as defined by a string. Not defining a &lt;code&gt;template_name&lt;/code&gt; will raise a &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;django.core.exceptions.ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">字符串定义要使用的模板的全名。不定义 &lt;code&gt;template_name&lt;/code&gt; 将引发&lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt; &lt;code&gt;django.core.exceptions.ImproperlyConfigured&lt;/code&gt; &lt;/a&gt;异常。</target>
        </trans-unit>
        <trans-unit id="282a1cace02e8551ef4b6aa7ed546a316ad9259c" translate="yes" xml:space="preserve">
          <source>The full name of a template to use or sequence of template names. If a sequence is given, the first template that exists will be used. See the &lt;a href=&quot;../templates#template-loading&quot;&gt;template loading documentation&lt;/a&gt; for more information on how templates are found.</source>
          <target state="translated">要使用的模板的全名或模板名称的顺序。如果给出了序列，将使用存在的第一个模板。有关如何找到模板的更多信息，请参见&lt;a href=&quot;../templates#template-loading&quot;&gt;模板加载文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be2f6fa485a5cbe314811ad48f8b60866792a2c8" translate="yes" xml:space="preserve">
          <source>The fully qualified domain name associated with the website. For example, &lt;code&gt;www.example.com&lt;/code&gt;.</source>
          <target state="translated">与网站关联的标准域名。例如， &lt;code&gt;www.example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f59c338fdbc478e21de6ac9b4ae49b88ce0d6dcf" translate="yes" xml:space="preserve">
          <source>The function for registering a converter for use in &lt;a href=&quot;#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;route&lt;/code&gt;s.</source>
          <target state="translated">注册用于&lt;a href=&quot;#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;route&lt;/code&gt; s 的转换器的函数。</target>
        </trans-unit>
        <trans-unit id="fb7eb0e34047e0db0288d374417d8af377ec403d" translate="yes" xml:space="preserve">
          <source>The function must return a list of messages. If no problems are found as a result of the check, the check function must return an empty list.</source>
          <target state="translated">该函数必须返回一个消息列表。如果检查结果没有发现问题,检查函数必须返回一个空列表。</target>
        </trans-unit>
        <trans-unit id="c90057f940a2f81ee80c2b8670ebe400cb6cec2e" translate="yes" xml:space="preserve">
          <source>The function returns a &lt;code&gt;CurrentTimeNode&lt;/code&gt; with everything the node needs to know about this tag. In this case, it passes the argument &amp;ndash; &lt;code&gt;&quot;%Y-%m-%d %I:%M %p&quot;&lt;/code&gt;. The leading and trailing quotes from the template tag are removed in &lt;code&gt;format_string[1:-1]&lt;/code&gt;.</source>
          <target state="translated">该函数返回一个 &lt;code&gt;CurrentTimeNode&lt;/code&gt; 以及节点需要了解的有关此标记的所有信息。在这种情况下，它将传递参数&amp;ndash; &lt;code&gt;&quot;%Y-%m-%d %I:%M %p&quot;&lt;/code&gt; 。template标记中的前导和尾引号已在 &lt;code&gt;format_string[1:-1]&lt;/code&gt; 中删除。</target>
        </trans-unit>
        <trans-unit id="eb7f14311c6859368ceb4f35ff9b61602e4345d0" translate="yes" xml:space="preserve">
          <source>The function you pass in will be called immediately after a hypothetical database write made where &lt;code&gt;on_commit()&lt;/code&gt; is called would be successfully committed.</source>
          <target state="translated">您传递的函数将在成功调用 &lt;code&gt;on_commit()&lt;/code&gt; 的假设数据库写入后立即调用。</target>
        </trans-unit>
        <trans-unit id="c6b98e770683bc89d9ec646af0f2c97a7347e16e" translate="yes" xml:space="preserve">
          <source>The functions defined in this module share the following properties:</source>
          <target state="translated">本模块中定义的函数共享以下属性。</target>
        </trans-unit>
        <trans-unit id="c2710636be401ecc13a26e3bd4fbc1f235086f82" translate="yes" xml:space="preserve">
          <source>The functions documented on this page allow users to access geographic database functions to be used in annotations, aggregations, or filters in Django.</source>
          <target state="translated">本页所描述的功能允许用户访问地理数据库功能,以便在Django中使用注释、聚合或过滤器。</target>
        </trans-unit>
        <trans-unit id="af9082b19280b9d875a00f016656f474042e54b7" translate="yes" xml:space="preserve">
          <source>The general rules are:</source>
          <target state="translated">一般规则是:</target>
        </trans-unit>
        <trans-unit id="c4b513220803b7b0034ba6c52e1af721f2fb5098" translate="yes" xml:space="preserve">
          <source>The general structure of geographic lookups is described below. A complete reference can be found in the &lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;spatial lookup reference&lt;/a&gt;.</source>
          <target state="translated">地理查询的一般结构如下所述。可以在&lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;空间查找参考中&lt;/a&gt;找到完整的参考。</target>
        </trans-unit>
        <trans-unit id="6c670a462552b45fbf82a4cda1f203ea59d36eac" translate="yes" xml:space="preserve">
          <source>The general usage of the command goes as follows:</source>
          <target state="translated">该命令的一般用法如下。</target>
        </trans-unit>
        <trans-unit id="1b87d14170e903819192aed3d30ac0f90d04374c" translate="yes" xml:space="preserve">
          <source>The generated &lt;code&gt;Form&lt;/code&gt; class will have a form field for every model field specified, in the order specified in the &lt;code&gt;fields&lt;/code&gt; attribute.</source>
          <target state="translated">生成的 &lt;code&gt;Form&lt;/code&gt; 类将为每个指定的模型字段都具有一个field字段，并以 &lt;code&gt;fields&lt;/code&gt; 属性中指定的顺序。</target>
        </trans-unit>
        <trans-unit id="ebf227c2c996952dff43f13dd885130cdc09b054" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;DetailView&lt;/code&gt; class, of course, wouldn&amp;rsquo;t know anything about this field, but once again we could easily write a custom view to keep that field updated.</source>
          <target state="translated">当然，通用的 &lt;code&gt;DetailView&lt;/code&gt; 类对这个字段一无所知，但是我们可以再次轻松编写一个自定义视图来保持该字段的更新。</target>
        </trans-unit>
        <trans-unit id="e41332eadaef4d72de9aa71ff598ebf6d3d1eeab" translate="yes" xml:space="preserve">
          <source>The geographic model, &lt;em&gt;not&lt;/em&gt; an instance.</source>
          <target state="translated">地理模型，&lt;em&gt;而不是&lt;/em&gt;实例。</target>
        </trans-unit>
        <trans-unit id="f5ab5d582c0f5f70e87126bf15fc71ebc8ece26d" translate="yes" xml:space="preserve">
          <source>The geography type provides native support for spatial features represented with geographic coordinates (e.g., WGS84 longitude/latitude). &lt;a href=&quot;#fngeography&quot; id=&quot;id17&quot;&gt;[6]&lt;/a&gt; Unlike the plane used by a geometry type, the geography type uses a spherical representation of its data. Distance and measurement operations performed on a geography column automatically employ great circle arc calculations and return linear units. In other words, when &lt;code&gt;ST_Distance&lt;/code&gt; is called on two geographies, a value in meters is returned (as opposed to degrees if called on a geometry column in WGS84).</source>
          <target state="translated">地理类型为以地理坐标（例如WGS84经度/纬度）表示的空间特征提供了原生支持。&lt;a href=&quot;#fngeography&quot; id=&quot;id17&quot;&gt;[6]&lt;/a&gt;与几何类型使用的平面不同，地理类型使用其数据的球形表示。在地理列上执行的距离和测量操作自动采用大​​圆弧计算并返回线性单位。换句话说，当在两个地理区域上调用 &lt;code&gt;ST_Distance&lt;/code&gt; 时，将返回以米为单位的值（与之相反，如果在WGS84中的几何列上调用度数，则为度）。</target>
        </trans-unit>
        <trans-unit id="c57f23c04b673000485170d8d9bbff6823bba98c" translate="yes" xml:space="preserve">
          <source>The geospatial libraries required for a GeoDjango installation depends on the spatial database used. The following lists the library requirements, supported versions, and any notes for each of the supported database backends:</source>
          <target state="translated">GeoDjango安装所需的地理空间库取决于所使用的空间数据库。下面列出了每个支持的数据库后端的库需求、支持的版本和任何注释。</target>
        </trans-unit>
        <trans-unit id="1c9844a4155b9b448b9a51486d7b6f2807a8360e" translate="yes" xml:space="preserve">
          <source>The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is &lt;em&gt;always&lt;/em&gt; done (even if no arguments are passed in), any &lt;code&gt;&quot;%&quot;&lt;/code&gt; characters in the URL must be written as &lt;code&gt;&quot;%%&quot;&lt;/code&gt; so that Python will convert them to a single percent sign on output.</source>
          <target state="translated">给定的URL可能包含字典样式的字符串格式，该格式将根据URL中捕获的参数进行内插。因为&lt;em&gt;总是执行&lt;/em&gt;关键字插值（即使没有传递任何参数），所以URL中的任何 &lt;code&gt;&quot;%&quot;&lt;/code&gt; 字符都必须写为 &lt;code&gt;&quot;%%&quot;&lt;/code&gt; 以便Python将它们转换为输出时的单个百分号。</target>
        </trans-unit>
        <trans-unit id="fc191bf0febd09414996d702a9c62c8f107ede80" translate="yes" xml:space="preserve">
          <source>The goal of internationalization and localization is to allow a single Web application to offer its content in languages and formats tailored to the audience.</source>
          <target state="translated">国际化和本地化的目标是允许一个单一的网络应用程序以适合受众的语言和格式提供其内容。</target>
        </trans-unit>
        <trans-unit id="3048dc287034bf6cbc1205d1df0a759f2123e8cf" translate="yes" xml:space="preserve">
          <source>The goal of this document is to give you enough technical specifics to understand how Django works, but this isn&amp;rsquo;t intended to be a tutorial or reference &amp;ndash; but we&amp;rsquo;ve got both! When you&amp;rsquo;re ready to start a project, you can &lt;a href=&quot;tutorial01&quot;&gt;start with the tutorial&lt;/a&gt; or &lt;a href=&quot;../topics/index&quot;&gt;dive right into more detailed documentation&lt;/a&gt;.</source>
          <target state="translated">本文档的目的是为您提供足够的技术细节，以了解Django的工作方式，但这并不是要作为教程或参考，但我们两者兼而有之！当您准备开始一个项目时，可以&lt;a href=&quot;tutorial01&quot;&gt;从本教程开始，&lt;/a&gt;或者&lt;a href=&quot;../topics/index&quot;&gt;直接进入更详细的文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="959e340bc8a6ce504a6fa2603d39631b162d857f" translate="yes" xml:space="preserve">
          <source>The golden rule of Web application security is to never trust data from untrusted sources. Sometimes it can be useful to pass data through an untrusted medium. Cryptographically signed values can be passed through an untrusted channel safe in the knowledge that any tampering will be detected.</source>
          <target state="translated">Web应用安全的黄金法则是永远不要相信来自不受信任的数据。有时,通过不受信任的媒介传递数据是有用的。经过加密签名的值可以通过不受信任的渠道传递,因为知道任何篡改都会被检测到。</target>
        </trans-unit>
        <trans-unit id="2822ec0cce63f0494fd71f05e6618c21dc97532e" translate="yes" xml:space="preserve">
          <source>The handler class &amp;ndash; e.g. &lt;code&gt;django.core.handlers.wsgi.WsgiHandler&lt;/code&gt; &amp;ndash; that handled the request.</source>
          <target state="translated">处理程序类，例如 &lt;code&gt;django.core.handlers.wsgi.WsgiHandler&lt;/code&gt; -处理请求。</target>
        </trans-unit>
        <trans-unit id="06f81b72f6c93ee4ace28197d9b6617d49e82e8b" translate="yes" xml:space="preserve">
          <source>The handler class, as above.</source>
          <target state="translated">处理者类,同上。</target>
        </trans-unit>
        <trans-unit id="488883d229389a6aee790c55f7009e741dbfe9a7" translate="yes" xml:space="preserve">
          <source>The handler is the engine that determines what happens to each message in a logger. It describes a particular logging behavior, such as writing a message to the screen, to a file, or to a network socket.</source>
          <target state="translated">处理程序是决定对记录器中的每条消息进行处理的引擎,它描述了特定的记录行为,如将消息写入屏幕、文件或网络套接字。它描述了一个特定的记录行为,例如将消息写入屏幕、文件或网络套接字。</target>
        </trans-unit>
        <trans-unit id="14fa348067bababa21e545f935d5b8a24c49bb5e" translate="yes" xml:space="preserve">
          <source>The handler should return an &lt;code&gt;UploadedFile&lt;/code&gt; object that will be stored in &lt;code&gt;request.FILES&lt;/code&gt;. Handlers may also return &lt;code&gt;None&lt;/code&gt; to indicate that the &lt;code&gt;UploadedFile&lt;/code&gt; object should come from subsequent upload handlers.</source>
          <target state="translated">处理程序应返回一个 &lt;code&gt;UploadedFile&lt;/code&gt; 对象，该对象将存储在 &lt;code&gt;request.FILES&lt;/code&gt; 中。处理程序还可以返回 &lt;code&gt;None&lt;/code&gt; ,以指示 &lt;code&gt;UploadedFile&lt;/code&gt; 对象应该来自后续的上传处理程序。</target>
        </trans-unit>
        <trans-unit id="1b3fd8a933d2fa2497aaa96bb37795dd4c3f6cff" translate="yes" xml:space="preserve">
          <source>The headers sent via &lt;code&gt;**extra&lt;/code&gt; should follow &lt;a href=&quot;https://www.w3.org/CGI/&quot;&gt;CGI&lt;/a&gt; specification. For example, emulating a different &amp;ldquo;Host&amp;rdquo; header as sent in the HTTP request from the browser to the server should be passed as &lt;code&gt;HTTP_HOST&lt;/code&gt;.</source>
          <target state="translated">通过 &lt;code&gt;**extra&lt;/code&gt; 发送的标头应遵循&lt;a href=&quot;https://www.w3.org/CGI/&quot;&gt;CGI&lt;/a&gt;规范。例如，模拟从浏览器到服务器的HTTP请求中发送的不同&amp;ldquo;主机&amp;rdquo;标头应作为 &lt;code&gt;HTTP_HOST&lt;/code&gt; 传递。</target>
        </trans-unit>
        <trans-unit id="e6413e6097f1a28ecc70877c02a1bcacdde6b6a6" translate="yes" xml:space="preserve">
          <source>The headers you pass to &lt;code&gt;vary_on_headers&lt;/code&gt; are not case sensitive; &lt;code&gt;&quot;User-Agent&quot;&lt;/code&gt; is the same thing as &lt;code&gt;&quot;user-agent&quot;&lt;/code&gt;.</source>
          <target state="translated">您传递给 &lt;code&gt;vary_on_headers&lt;/code&gt; 的标头不区分大小写； &lt;code&gt;&quot;User-Agent&quot;&lt;/code&gt; 与 &lt;code&gt;&quot;user-agent&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="279004f79673f28183163fa42dab5e85a0b670aa" translate="yes" xml:space="preserve">
          <source>The height of the band in pixels (Y-axis).</source>
          <target state="translated">波段的高度,单位为像素(Y轴)。</target>
        </trans-unit>
        <trans-unit id="df9d7b5469e23f9d6713c72b23f1eeec489b3c5f" translate="yes" xml:space="preserve">
          <source>The height of the source in pixels (Y-axis).</source>
          <target state="translated">源的高度,单位为像素(Y轴)。</target>
        </trans-unit>
        <trans-unit id="38b2861a27cfa38862983e658978a491a364c2ae" translate="yes" xml:space="preserve">
          <source>The help texts and any errors from password validators are always returned in the order they are listed in &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">帮助文本和来自密码验证器的任何错误始终以&lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; &lt;/a&gt;中列出的顺序返回。</target>
        </trans-unit>
        <trans-unit id="4bc95354bdedb2bcc92a4ff72aa7b2c44670198e" translate="yes" xml:space="preserve">
          <source>The high-level feed-generating framework is supplied by the &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class. To create a feed, write a &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class and point to an instance of it in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;类提供了高级的提要生成框架。要创建一个提要，编写一个&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;类并在&lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf中&lt;/a&gt;指向它的一个实例。</target>
        </trans-unit>
        <trans-unit id="526b72f11a55f7c9d3fc861332686ce93c3ede70" translate="yes" xml:space="preserve">
          <source>The high-level framework</source>
          <target state="translated">高级别框架</target>
        </trans-unit>
        <trans-unit id="906f6ac47d9f1e1dac6594aed6295ab440c7f48d" translate="yes" xml:space="preserve">
          <source>The hints received by the database router can be used to decide which database should receive a given request.</source>
          <target state="translated">数据库路由器收到的提示可以用来决定哪个数据库应该接收某个请求。</target>
        </trans-unit>
        <trans-unit id="cd46fe4bd9ca3bc6fa098435eab462a49cd92f51" translate="yes" xml:space="preserve">
          <source>The host to use for sending email.</source>
          <target state="translated">用于发送电子邮件的主机。</target>
        </trans-unit>
        <trans-unit id="79af06a2f9e9099fc33866f54328f8b8a35bd6d6" translate="yes" xml:space="preserve">
          <source>The human-readable name of the content type. This is taken from the &lt;a href=&quot;../models/fields#django.db.models.Field.verbose_name&quot;&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/a&gt; attribute of the model.</source>
          <target state="translated">内容类型的可读名称。这取自模型的&lt;a href=&quot;../models/fields#django.db.models.Field.verbose_name&quot;&gt; &lt;code&gt;verbose_name&lt;/code&gt; &lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="a12444918c81a571d3935f2f92a06c2901301347" translate="yes" xml:space="preserve">
          <source>The idea behind &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (&lt;code&gt;polls/urls.py&lt;/code&gt;), they can be placed under &amp;ldquo;/polls/&amp;rdquo;, or under &amp;ldquo;/fun_polls/&amp;rdquo;, or under &amp;ldquo;/content/polls/&amp;rdquo;, or any other path root, and the app will still work.</source>
          <target state="translated">&lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;背后的想法是使即插即用URL变得容易。由于民意调查位于其自己的URLconf（ &lt;code&gt;polls/urls.py&lt;/code&gt; ）中，因此可以将其置于&amp;ldquo; / polls /&amp;rdquo;下，&amp;ldquo; / fun_polls /&amp;rdquo;下，&amp;ldquo; / content / polls /&amp;rdquo;下或任何其他路径根下，该应用仍然可以运行。</target>
        </trans-unit>
        <trans-unit id="827f5d73a940731ae9ae899cc29fe8b76a857dcf" translate="yes" xml:space="preserve">
          <source>The idea here is to pass a list of items to your template, and have the template output the commas in a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop.</source>
          <target state="translated">这里的想法是将项目列表传递到模板，并使模板在&lt;a href=&quot;../ref/templates/builtins#std:templatetag-for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;循环中输出逗号。</target>
        </trans-unit>
        <trans-unit id="686b249314782c8f2e3e69ba4fac0bc6cf47e3c1" translate="yes" xml:space="preserve">
          <source>The implementation is:</source>
          <target state="translated">执行情况是:</target>
        </trans-unit>
        <trans-unit id="1ce6a8179ec02fab89045ffdb995d78cf0aa55a7" translate="yes" xml:space="preserve">
          <source>The implementation provided here implements a multi-database strategy where all objects of a given type are stored on a specific database (e.g., all &lt;code&gt;User&lt;/code&gt; objects are in the &lt;code&gt;other&lt;/code&gt; database). If your usage of multiple databases is more complex, your &lt;code&gt;ModelAdmin&lt;/code&gt; will need to reflect that strategy.</source>
          <target state="translated">此处提供的实现实现了一种多数据库策略，其中，给定类型的所有对象都存储在特定的数据库中（例如，所有 &lt;code&gt;User&lt;/code&gt; 对象都位于 &lt;code&gt;other&lt;/code&gt; 数据库中）。如果对多个数据库的使用更为复杂，则 &lt;code&gt;ModelAdmin&lt;/code&gt; 将需要反映该策略。</target>
        </trans-unit>
        <trans-unit id="dfbef63857d84ecfe1d5db5997858631f5311bba" translate="yes" xml:space="preserve">
          <source>The import path of the field (e.g. &lt;code&gt;&quot;django.db.models.IntegerField&quot;&lt;/code&gt;). This should be the most portable version, so less specific may be better.</source>
          <target state="translated">字段的导入路径（例如 &lt;code&gt;&quot;django.db.models.IntegerField&quot;&lt;/code&gt; ）。这应该是最可移植的版本，因此不太具体可能会更好。</target>
        </trans-unit>
        <trans-unit id="903c7ec940f2bdc805e28cb4d1ce4a26a3cb1692" translate="yes" xml:space="preserve">
          <source>The important part here is the default ordering on the &lt;code&gt;name&lt;/code&gt; field. If you want to count how many times each distinct &lt;code&gt;data&lt;/code&gt; value appears, you might try this:</source>
          <target state="translated">这里重要的部分是 &lt;code&gt;name&lt;/code&gt; 字段的默认顺序。如果要计算每个不同 &lt;code&gt;data&lt;/code&gt; 值出现的次数，则可以尝试以下操作：</target>
        </trans-unit>
        <trans-unit id="f1dd0d68e1e337919314bda6d0e58cab51e8e98a" translate="yes" xml:space="preserve">
          <source>The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you &lt;strong&gt;should&lt;/strong&gt; use the same functions, so that the same values are returned every time.</source>
          <target state="translated">该示例显示的重要一点是，在所有情况下，都可以使用相同的函数来计算ETag和最后修改值。实际上，您&lt;strong&gt;应该&lt;/strong&gt;使用相同的函数，以便每次都返回相同的值。</target>
        </trans-unit>
        <trans-unit id="27651fe7a7b1b9a60be00d387e3d436d308ffeab" translate="yes" xml:space="preserve">
          <source>The index of the layer to use from the Data Source (defaults to 0)</source>
          <target state="translated">数据源中使用的层的索引(默认为0)。</target>
        </trans-unit>
        <trans-unit id="0505f906184c235c944c51abdcad4e4eee24921f" translate="yes" xml:space="preserve">
          <source>The index type of the constraint. Accepted values are &lt;code&gt;GIST&lt;/code&gt; or &lt;code&gt;SPGIST&lt;/code&gt;. Matching is case insensitive. If not provided, the default index type is &lt;code&gt;GIST&lt;/code&gt;.</source>
          <target state="translated">约束的索引类型。可接受的值为 &lt;code&gt;GIST&lt;/code&gt; 或 &lt;code&gt;SPGIST&lt;/code&gt; 。匹配不区分大小写。如果未提供，则默认索引类型为 &lt;code&gt;GIST&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70e18b0c6e76404c1a43fa1188b2263602d7d0d7" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;filter(...)&lt;/code&gt; limits the subquery to the relevant parameters. &lt;code&gt;order_by()&lt;/code&gt; removes the default &lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;ordering&lt;/code&gt;&lt;/a&gt; (if any) on the &lt;code&gt;Comment&lt;/code&gt; model. &lt;code&gt;values('post')&lt;/code&gt; aggregates comments by &lt;code&gt;Post&lt;/code&gt;. Finally, &lt;code&gt;annotate(...)&lt;/code&gt; performs the aggregation. The order in which these queryset methods are applied is important. In this case, since the subquery must be limited to a single column, &lt;code&gt;values('total')&lt;/code&gt; is required.</source>
          <target state="translated">初始 &lt;code&gt;filter(...)&lt;/code&gt; 将子查询限制为相关参数。 &lt;code&gt;order_by()&lt;/code&gt; 删除 &lt;code&gt;Comment&lt;/code&gt; 模型上的默认&lt;a href=&quot;options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;ordering&lt;/code&gt; &lt;/a&gt;（如果有）。 &lt;code&gt;values('post')&lt;/code&gt; 通过 &lt;code&gt;Post&lt;/code&gt; 聚合评论。最后， &lt;code&gt;annotate(...)&lt;/code&gt; 执行聚合。这些查询集方法的应用顺序很重要。在这种情况下，由于子查询必须限于单个列，因此需要 &lt;code&gt;values('total')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ae99aa0813c630c9763127e39bb49d8fbf92833" translate="yes" xml:space="preserve">
          <source>The initial serialization is usually very quick, but if you wish to exclude some apps from this process (and speed up test runs slightly), you may add those apps to &lt;a href=&quot;../../ref/settings#std:setting-TEST_NON_SERIALIZED_APPS&quot;&gt;&lt;code&gt;TEST_NON_SERIALIZED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">初始序列化通常非常快，但是如果您希望从此过程中排除某些应用程序（并稍微加快测试运行速度），则可以将这些应用程序添加到&lt;a href=&quot;../../ref/settings#std:setting-TEST_NON_SERIALIZED_APPS&quot;&gt; &lt;code&gt;TEST_NON_SERIALIZED_APPS&lt;/code&gt; 中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="13f07b685c2d3fff938a316a1d8464961248d48e" translate="yes" xml:space="preserve">
          <source>The initial size of the DATAFILE.</source>
          <target state="translated">DATAFILE的初始大小。</target>
        </trans-unit>
        <trans-unit id="c7d913fd12d44256d53ae890b7cac955386e9677" translate="yes" xml:space="preserve">
          <source>The initial size of the DATAFILE_TMP.</source>
          <target state="translated">DATAFILE_TMP的初始大小。</target>
        </trans-unit>
        <trans-unit id="3fc11f804e222ff16131d5dcfe4115f55181b7d4" translate="yes" xml:space="preserve">
          <source>The inner &lt;code&gt;mysite/&lt;/code&gt; directory is the actual Python package for your project. Its name is the Python package name you&amp;rsquo;ll need to use to import anything inside it (e.g. &lt;code&gt;mysite.urls&lt;/code&gt;).</source>
          <target state="translated">内部的 &lt;code&gt;mysite/&lt;/code&gt; 目录是项目的实际Python包。它的名称是Python包名称，在其中导入任何内容（例如 &lt;code&gt;mysite.urls&lt;/code&gt; ）时，都需要使用该名称。</target>
        </trans-unit>
        <trans-unit id="c3bd6a8f3a4add21ea334f3824942aa42870857c" translate="yes" xml:space="preserve">
          <source>The input doesn&amp;rsquo;t have to be a valid phone number. This will happily convert any string.</source>
          <target state="translated">输入的不一定是有效的电话号码。这将很乐意转换任何字符串。</target>
        </trans-unit>
        <trans-unit id="cc7d3dfc213be45fd0dda91957def3ef413d4078" translate="yes" xml:space="preserve">
          <source>The installed version of Django is now pointing at your local copy by installing in editable mode. You will immediately see any changes you make to it, which is of great help when writing your first patch.</source>
          <target state="translated">现在安装的Django版本通过以可编辑模式安装,指向你的本地副本。你会立即看到你对它的任何改动,这对你编写第一个补丁时有很大的帮助。</target>
        </trans-unit>
        <trans-unit id="3a54b2fb77ad1e2ace8e7aaa85c67e06d561a039" translate="yes" xml:space="preserve">
          <source>The instance namespace can be specified using the &lt;code&gt;namespace&lt;/code&gt; argument to &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;. If the instance namespace is not specified, it will default to the included URLconf&amp;rsquo;s application namespace. This means it will also be the default instance for that namespace.</source>
          <target state="translated">可以使用&lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;namespace&lt;/code&gt; 参数指定实例名称空间。如果未指定实例名称空间，它将默认为包含的URLconf的应用程序名称空间。这意味着它也将是该命名空间的默认实例。</target>
        </trans-unit>
        <trans-unit id="327fc239e67b05332c729a1a6dcff3532f21a85b" translate="yes" xml:space="preserve">
          <source>The instance namespace for the URL pattern that matches the URL.</source>
          <target state="translated">匹配URL模式的实例命名空间。</target>
        </trans-unit>
        <trans-unit id="b2396f9d13fca925ee1620e3dd75069cd1233334" translate="yes" xml:space="preserve">
          <source>The instance whose many-to-many relation is updated. This can be an instance of the &lt;code&gt;sender&lt;/code&gt;, or of the class the &lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; is related to.</source>
          <target state="translated">多对多关系更新的实例。这可以是 &lt;code&gt;sender&lt;/code&gt; 的实例，也可以是&lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;相关的类的实例。</target>
        </trans-unit>
        <trans-unit id="a8c670fd72acff36aba31ee0e3d8973bff0bb2ea" translate="yes" xml:space="preserve">
          <source>The intermediate model class describing the &lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. This class is automatically created when a many-to-many field is defined; you can access it using the &lt;code&gt;through&lt;/code&gt; attribute on the many-to-many field.</source>
          <target state="translated">描述&lt;a href=&quot;models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;的中间模型类。当定义了多对多字段时，将自动创建此类。您可以使用&amp;ldquo; 多对多&amp;rdquo;字段中的&amp;ldquo; &lt;code&gt;through&lt;/code&gt; 属性来访问它。</target>
        </trans-unit>
        <trans-unit id="a71d4f70fe7354d87df60818a9458133da88cbae" translate="yes" xml:space="preserve">
          <source>The key &lt;code&gt;mpoly&lt;/code&gt; for the geometry field is &lt;code&gt;MULTIPOLYGON&lt;/code&gt;, the geometry type GeoDjango will import the field as. Even simple polygons in the shapefile will automatically be converted into collections prior to insertion into the database.</source>
          <target state="translated">几何字段的关键 &lt;code&gt;mpoly&lt;/code&gt; 是 &lt;code&gt;MULTIPOLYGON&lt;/code&gt; ，几何类型GeoDjango会将字段导入为。在插入到数据库之前，即使shapefile中的简单多边形也将自动转换为集合。</target>
        </trans-unit>
        <trans-unit id="0d253cebe603f112f3f895dbf0509c3a56678625" translate="yes" xml:space="preserve">
          <source>The key concept of deploying with WSGI is the &lt;code&gt;application&lt;/code&gt; callable which the application server uses to communicate with your code. It&amp;rsquo;s commonly provided as an object named &lt;code&gt;application&lt;/code&gt; in a Python module accessible to the server.</source>
          <target state="translated">使用WSGI进行部署的关键概念是 &lt;code&gt;application&lt;/code&gt; 可调用，应用程序服务器使用它来与您的代码进行通信。它通常在服务器可访问的Python模块中作为名为 &lt;code&gt;application&lt;/code&gt; 的对象提供。</target>
        </trans-unit>
        <trans-unit id="15d36ae477bf2ee387a5946d0eaa1e5e135fd1f7" translate="yes" xml:space="preserve">
          <source>The key for specifying which layer in the OGR &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; source to use. Defaults to 0 (the first layer). May be an integer or a string identifier for the &lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt;. When inspecting databases, &lt;code&gt;layer&lt;/code&gt; is generally the table name you want to inspect.</source>
          <target state="translated">指定OGR &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;源中要使用哪一层的键。默认为0（第一层）。可以是&lt;a href=&quot;gdal#django.contrib.gis.gdal.Layer&quot;&gt; &lt;code&gt;Layer&lt;/code&gt; &lt;/a&gt;的整数或字符串标识符。检查数据库时， &lt;code&gt;layer&lt;/code&gt; 通常是要检查的表名。</target>
        </trans-unit>
        <trans-unit id="a1cd4510ad3a9d41263e923beb980ac31840cbb5" translate="yes" xml:space="preserve">
          <source>The key part to making this work is that when class-based views are called, various useful things are stored on &lt;code&gt;self&lt;/code&gt;; as well as the request (&lt;code&gt;self.request&lt;/code&gt;) this includes the positional (&lt;code&gt;self.args&lt;/code&gt;) and name-based (&lt;code&gt;self.kwargs&lt;/code&gt;) arguments captured according to the URLconf.</source>
          <target state="translated">进行这项工作的关键部分是，当调用基于类的视图时，各种有用的东西都存储在 &lt;code&gt;self&lt;/code&gt; 上。以及请求（ &lt;code&gt;self.request&lt;/code&gt; ）包括根据URLconf捕获的位置（ &lt;code&gt;self.args&lt;/code&gt; ）和基于名称的（ &lt;code&gt;self.kwargs&lt;/code&gt; ）参数。</target>
        </trans-unit>
        <trans-unit id="a3d2fd9865dee37e77f38260ea4a731c3c0639fe" translate="yes" xml:space="preserve">
          <source>The key to generating PDFs dynamically with Django is that the ReportLab API acts on file-like objects, and Django&amp;rsquo;s &lt;a href=&quot;../ref/request-response#django.http.FileResponse&quot;&gt;&lt;code&gt;FileResponse&lt;/code&gt;&lt;/a&gt; objects accept file-like objects.</source>
          <target state="translated">使用Django动态生成PDF的关键是ReportLab API作用于类似文件的对象，而Django的&lt;a href=&quot;../ref/request-response#django.http.FileResponse&quot;&gt; &lt;code&gt;FileResponse&lt;/code&gt; &lt;/a&gt;对象接受类似文件的对象。</target>
        </trans-unit>
        <trans-unit id="3b9a1387c8bd1a7371a4b2f433f8d17fd0bce075" translate="yes" xml:space="preserve">
          <source>The key-value pairs in the &lt;code&gt;data&lt;/code&gt; dictionary are used to create a GET data payload. For example:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 字典中的键值对用于创建GET数据有效负载。例如：</target>
        </trans-unit>
        <trans-unit id="c4929a8af44414d79cea8a1d7d30194782aa3382" translate="yes" xml:space="preserve">
          <source>The key-value pairs in the &lt;code&gt;data&lt;/code&gt; dictionary are used to submit POST data. For example:</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 字典中的键值对用于提交POST数据。例如：</target>
        </trans-unit>
        <trans-unit id="c9e59d34409d92156ac5184a2597b2e4eef66a0a" translate="yes" xml:space="preserve">
          <source>The keys in the dictionary are the output media types. These are the same types accepted by CSS files in media declarations: &amp;lsquo;all&amp;rsquo;, &amp;lsquo;aural&amp;rsquo;, &amp;lsquo;braille&amp;rsquo;, &amp;lsquo;embossed&amp;rsquo;, &amp;lsquo;handheld&amp;rsquo;, &amp;lsquo;print&amp;rsquo;, &amp;lsquo;projection&amp;rsquo;, &amp;lsquo;screen&amp;rsquo;, &amp;lsquo;tty&amp;rsquo; and &amp;lsquo;tv&amp;rsquo;. If you need to have different stylesheets for different media types, provide a list of CSS files for each output medium. The following example would provide two CSS options &amp;ndash; one for the screen, and one for print:</source>
          <target state="translated">词典中的键是输出媒体类型。这些是媒体声明中CSS文件所接受的相同类型：&amp;ldquo;全部&amp;rdquo;，&amp;ldquo;听觉&amp;rdquo;，&amp;ldquo;盲文&amp;rdquo;，&amp;ldquo;浮雕&amp;rdquo;，&amp;ldquo;手持&amp;rdquo;，&amp;ldquo;打印&amp;rdquo;，&amp;ldquo;投影&amp;rdquo;，&amp;ldquo;屏幕&amp;rdquo;，&amp;ldquo; tty&amp;rdquo;和&amp;ldquo;电视'。如果对于不同的媒体类型需要使用不同的样式表，请为每种输出媒体提供CSS文件列表。以下示例将提供两个CSS选项-一个用于屏幕，一个用于打印：</target>
        </trans-unit>
        <trans-unit id="d723eb23edab6a34537328903d64215a5b5e7e57" translate="yes" xml:space="preserve">
          <source>The keys of the dict correspond to the month number (1-indexed) and the values are the displayed months:</source>
          <target state="translated">dict的键对应月号(1-索引),值是显示的月份。</target>
        </trans-unit>
        <trans-unit id="dca7ffd65cac777a2f1f4df5638eef586c3cc716" translate="yes" xml:space="preserve">
          <source>The keyword arguments are made up of any named parts matched by the path expression that are provided, overridden by any arguments specified in the optional &lt;code&gt;kwargs&lt;/code&gt; argument to &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;django.urls.path()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">关键字参数由提供的路径表达式匹配的任何命名部分组成，并由&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;django.urls.path()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;django.urls.re_path()&lt;/code&gt; &lt;/a&gt;的可选 &lt;code&gt;kwargs&lt;/code&gt; 参数中指定的任何参数覆盖。</target>
        </trans-unit>
        <trans-unit id="57f5e78e547c562b097f2832efdfa9bae4d73fe8" translate="yes" xml:space="preserve">
          <source>The keyword arguments are the names of the fields you&amp;rsquo;ve defined on your model. Note that instantiating a model in no way touches your database; for that, you need to &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">关键字参数是您在模型上定义的字段的名称。请注意，实例化模型绝不会影响您的数据库。为此，您需要&lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a2e4838421587a20985c74aae54a1df8aff83e90" translate="yes" xml:space="preserve">
          <source>The keyword arguments that would be passed to the view function, as parsed from the URL.</source>
          <target state="translated">从URL中解析出的将传递给视图函数的关键字参数。</target>
        </trans-unit>
        <trans-unit id="397a7d054950e21b2c7e46349a34bdf7f4e621ef" translate="yes" xml:space="preserve">
          <source>The label of the field, e.g. &lt;code&gt;Email address&lt;/code&gt;.</source>
          <target state="translated">字段的标签，例如 &lt;code&gt;Email address&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23a2270c0c4fc0cd596055a1c5939ce8d8462b41" translate="yes" xml:space="preserve">
          <source>The last common pattern we&amp;rsquo;ll look at involves doing some extra work before or after calling the generic view.</source>
          <target state="translated">我们将看到的最后一个常见模式涉及在调用通用视图之前或之后做一些额外的工作。</target>
        </trans-unit>
        <trans-unit id="cd1af09749ab1a2fb64ffdab10d00f5c2ac04360" translate="yes" xml:space="preserve">
          <source>The last method in this example is a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-property&quot;&gt;property&lt;/a&gt;.</source>
          <target state="translated">此示例中的最后一个方法是&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/glossary/#term-property&quot;&gt;property&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ee094e288a920d1ee6d1e8f907851b28dc57dc5f" translate="yes" xml:space="preserve">
          <source>The last of these cases is the most interesting, because it&amp;rsquo;s what makes it possible for users not just to read a website, but to send information back to it too.</source>
          <target state="translated">这些情况中的最后一个是最有趣的，因为它使用户不仅可以阅读网站，而且还可以向其发送信息。</target>
        </trans-unit>
        <trans-unit id="3c9a607eff5b49e4627ffebd90e96258eb1f5054" translate="yes" xml:space="preserve">
          <source>The last step in setting up the Django admin is to hook your &lt;code&gt;AdminSite&lt;/code&gt; instance into your URLconf. Do this by pointing a given URL at the &lt;code&gt;AdminSite.urls&lt;/code&gt; method. It is not necessary to use &lt;a href=&quot;../../urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">设置Django admin的最后一步是将 &lt;code&gt;AdminSite&lt;/code&gt; 实例挂接到URLconf中。通过将给定URL指向 &lt;code&gt;AdminSite.urls&lt;/code&gt; 方法来执行此操作。不必使用&lt;a href=&quot;../../urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d2b39229a26808356444c79fae35166f8fac202c" translate="yes" xml:space="preserve">
          <source>The left-hand side - what is being looked up. The object must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;.</source>
          <target state="translated">左侧-正在查找的内容。该对象必须遵循&lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d0b77bd202a2e7aa818b9d2498b8971016e1fea3" translate="yes" xml:space="preserve">
          <source>The left-hand side - what is being transformed. It must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;.</source>
          <target state="translated">左侧-正在转换的内容。它必须遵循&lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2e3e8209a61aabc0a2a2ada2ecd908ce92ea854c" translate="yes" xml:space="preserve">
          <source>The length of the filename will not exceed &lt;code&gt;max_length&lt;/code&gt;, if provided. If a free unique filename cannot be found, a &lt;a href=&quot;../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousFileOperation&lt;/code&gt;&lt;/a&gt; exception will be raised.</source>
          <target state="translated">文件名的 &lt;code&gt;max_length&lt;/code&gt; （如果提供）将不超过max_length。如果找不到免费的唯一文件名，则会引发&lt;a href=&quot;../exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousFileOperation&lt;/code&gt; &lt;/a&gt;异常。</target>
        </trans-unit>
        <trans-unit id="8b61eb79e635aa3b16fc954aa02d7e91c66a6f94" translate="yes" xml:space="preserve">
          <source>The length of the filename will not exceed &lt;code&gt;max_length&lt;/code&gt;, if provided. If a free unique filename cannot be found, a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousFileOperation&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">文件名的 &lt;code&gt;max_length&lt;/code&gt; （如果提供）将不超过max_length。如果找不到免费的唯一文件名，则会引发&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousFileOperation&lt;/code&gt; &lt;/a&gt;异常。</target>
        </trans-unit>
        <trans-unit id="29278f4b394cdd3103ff91f8f8824b4ed2e41d8c" translate="yes" xml:space="preserve">
          <source>The lifetime of a database connection, in seconds. Use &lt;code&gt;0&lt;/code&gt; to close database connections at the end of each request &amp;mdash; Django&amp;rsquo;s historical behavior &amp;mdash; and &lt;code&gt;None&lt;/code&gt; for unlimited persistent connections.</source>
          <target state="translated">数据库连接的生存期，以秒为单位。在每个请求结束时使用 &lt;code&gt;0&lt;/code&gt; 关闭数据库连接-Django的历史行为-而在无限持续连接中使用 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8002094dcdaed13967e206ea6c596a8581f87cef" translate="yes" xml:space="preserve">
          <source>The line &lt;code&gt;{% if emails %}&lt;/code&gt; causes &lt;code&gt;QuerySet.__bool__()&lt;/code&gt; to be called, which causes the &lt;code&gt;user.emails.all()&lt;/code&gt; query to be run on the database, and at the least the first line to be turned into an ORM object. If there aren&amp;rsquo;t any results, it will return False, otherwise True.</source>
          <target state="translated">行 &lt;code&gt;{% if emails %}&lt;/code&gt; 导致 &lt;code&gt;QuerySet.__bool__()&lt;/code&gt; 调用，这导致在数据库上运行 &lt;code&gt;user.emails.all()&lt;/code&gt; 查询，至少第一行被转换为ORM对象。如果没有任何结果，它将返回False，否则返回True。</target>
        </trans-unit>
        <trans-unit id="1c0db0e2def9d1c60a37ee6be71cd32841316f4f" translate="yes" xml:space="preserve">
          <source>The list contains &lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;language codes&lt;/a&gt; for languages that are written right-to-left.</source>
          <target state="translated">该列表包含从右到左书写的&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;语言的语言代码&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cba6b90fba80dd32a8751dcf84005a9eb6cb044" translate="yes" xml:space="preserve">
          <source>The list has a CSS class of &lt;code&gt;errorlist&lt;/code&gt; to allow you to style its appearance. If you wish to further customize the display of errors you can do so by looping over them:</source>
          <target state="translated">该列表中有一个CSS类的 &lt;code&gt;errorlist&lt;/code&gt; ，让你的风格的外观。如果您希望进一步自定义错误的显示，可以通过遍历它们来实现：</target>
        </trans-unit>
        <trans-unit id="04a3a7512be2cac93b8b7366f0b94b5e1cc643c2" translate="yes" xml:space="preserve">
          <source>The list is a list of two-tuples in the format (&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;language code&lt;/a&gt;, &lt;code&gt;language name&lt;/code&gt;) &amp;ndash; for example, &lt;code&gt;('ja', 'Japanese')&lt;/code&gt;. This specifies which languages are available for language selection. See &lt;a href=&quot;../topics/i18n/index&quot;&gt;Internationalization and localization&lt;/a&gt;.</source>
          <target state="translated">该列表是格式为（&lt;a href=&quot;../topics/i18n/index#term-language-code&quot;&gt;语言代码&lt;/a&gt;， &lt;code&gt;language name&lt;/code&gt; ）的两元组列表，例如 &lt;code&gt;('ja', 'Japanese')&lt;/code&gt; 。这指定了可用于语言选择的语言。请参阅&lt;a href=&quot;../topics/i18n/index&quot;&gt;国际化和本地化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2473789b229bfa49a064e7682e7d17ab1a5ef564" translate="yes" xml:space="preserve">
          <source>The list is assumed to be in the proper format. For example, if &lt;code&gt;var&lt;/code&gt; contains &lt;code&gt;['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]&lt;/code&gt;, then &lt;code&gt;{{ var|unordered_list }}&lt;/code&gt; would return:</source>
          <target state="translated">假定该列表采用正确的格式。例如，如果 &lt;code&gt;var&lt;/code&gt; 包含 &lt;code&gt;['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]&lt;/code&gt; ，则 &lt;code&gt;{{ var|unordered_list }}&lt;/code&gt; 将返回：</target>
        </trans-unit>
        <trans-unit id="5042ef027214a35401db2a04269eeae1dcdfa277" translate="yes" xml:space="preserve">
          <source>The list of HTTP method names that this view will accept.</source>
          <target state="translated">此视图将接受的HTTP方法名称列表。</target>
        </trans-unit>
        <trans-unit id="ee0db22a92a601e8f0023ddb845b78e9fd77ffb7" translate="yes" xml:space="preserve">
          <source>The list of authentication backends to use is specified in the &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting. This should be a list of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path.</source>
          <target state="translated">在&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;设置中指定要使用的身份验证后端列表。这应该是指向知道如何进行身份验证的Python类的Python路径名的列表。这些类可以在Python路径上的任何位置。</target>
        </trans-unit>
        <trans-unit id="7fa0e4449c48fd3fa3fb75ca38f7c6c879924afd" translate="yes" xml:space="preserve">
          <source>The list of fields that should be used to validate the field&amp;rsquo;s value (in the order in which they are provided).</source>
          <target state="translated">用来验证字段值的字段列表（按提供顺序）。</target>
        </trans-unit>
        <trans-unit id="5ce66ece9f717e1a77559246ccf1c6f1bcff631e" translate="yes" xml:space="preserve">
          <source>The list of finder backends that know how to find static files in various locations.</source>
          <target state="translated">知道如何找到不同位置的静态文件的查找器后端列表。</target>
        </trans-unit>
        <trans-unit id="1a5bbf66f2e405780ce14c2a3669f31d8ee1ecbd" translate="yes" xml:space="preserve">
          <source>The list of headers to use for cache key generation is stored in the same cache as the pages themselves. If the cache ages some data out of the cache, this means that we have to build the response once to get at the Vary header and so at the list of headers to use for the cache key.</source>
          <target state="translated">用于生成缓存密钥的头列表和页面本身一样存储在缓存中。如果缓存将一些数据从缓存中老化,这意味着我们必须构建一次响应,以获得Vary头,因此也就获得了用于缓存密钥的头列表。</target>
        </trans-unit>
        <trans-unit id="8df774fc40bf98740c1da86656bf921f29444310" translate="yes" xml:space="preserve">
          <source>The list of individual namespace components in the full application namespace for the URL pattern that matches the URL. For example, if the &lt;code&gt;app_name&lt;/code&gt; is &lt;code&gt;'foo:bar'&lt;/code&gt;, then &lt;code&gt;app_names&lt;/code&gt; will be &lt;code&gt;['foo', 'bar']&lt;/code&gt;.</source>
          <target state="translated">完整应用程序名称空间中与URL匹配的URL模式的各个名称空间组件的列表。例如，如果 &lt;code&gt;app_name&lt;/code&gt; 是 &lt;code&gt;'foo:bar'&lt;/code&gt; ，则 &lt;code&gt;app_names&lt;/code&gt; 将是 &lt;code&gt;['foo', 'bar']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1f5b46e9e868a322fe41d3784408ab749a0239d" translate="yes" xml:space="preserve">
          <source>The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is &lt;code&gt;foo:bar&lt;/code&gt;, then namespaces will be &lt;code&gt;['foo', 'bar']&lt;/code&gt;.</source>
          <target state="translated">完整实例名称空间中与URL匹配的URL模式的各个名称空间组件的列表。即，如果名称空间是 &lt;code&gt;foo:bar&lt;/code&gt; ，则名称空间将是 &lt;code&gt;['foo', 'bar']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="352db1efbcfe1d21434a452de49b5bf6c094c19f" translate="yes" xml:space="preserve">
          <source>The list of objects on this page.</source>
          <target state="translated">本页的对象列表。</target>
        </trans-unit>
        <trans-unit id="38c466c9ad4dc792c07b153c84ee1b4a51f84a21" translate="yes" xml:space="preserve">
          <source>The list of polls shows polls that aren&amp;rsquo;t published yet (i.e. those that have a &lt;code&gt;pub_date&lt;/code&gt; in the future). Let&amp;rsquo;s fix that.</source>
          <target state="translated">民意调查列表显示尚未发布的民意调查（即将来具有 &lt;code&gt;pub_date&lt;/code&gt; 的民意调查）。让我们修复它。</target>
        </trans-unit>
        <trans-unit id="d32b0449e83211999f9608ac231c68d8ee1aeeeb" translate="yes" xml:space="preserve">
          <source>The list of routers that will be used to determine which database to use when performing a database query.</source>
          <target state="translated">在执行数据库查询时,将用于确定使用哪个数据库的路由器列表。</target>
        </trans-unit>
        <trans-unit id="d84dcd1f5e2293f80dda03ec41a237b17534de0c" translate="yes" xml:space="preserve">
          <source>The list of validators that are used to check the strength of user&amp;rsquo;s passwords. See &lt;a href=&quot;../topics/auth/passwords#password-validation&quot;&gt;Password validation&lt;/a&gt; for more details. By default, no validation is performed and all passwords are accepted.</source>
          <target state="translated">用于检查用户密码强度的验证器列表。有关更多详细信息，请参见&lt;a href=&quot;../topics/auth/passwords#password-validation&quot;&gt;密码验证&lt;/a&gt;。默认情况下，不执行任何验证，并且接受所有密码。</target>
        </trans-unit>
        <trans-unit id="be41c13b237df7e153278422285c9b3aae3b4560" translate="yes" xml:space="preserve">
          <source>The live server listens on &lt;code&gt;localhost&lt;/code&gt; and binds to port 0 which uses a free port assigned by the operating system. The server&amp;rsquo;s URL can be accessed with &lt;code&gt;self.live_server_url&lt;/code&gt; during the tests.</source>
          <target state="translated">实时服务器在 &lt;code&gt;localhost&lt;/code&gt; 上侦听并绑定到端口0，该端口使用操作系统分配的空闲端口。在测试期间，可以使用 &lt;code&gt;self.live_server_url&lt;/code&gt; 访问服务器的URL 。</target>
        </trans-unit>
        <trans-unit id="4f48b0167209c5587b0fe04291a526c08c33524f" translate="yes" xml:space="preserve">
          <source>The local filesystem path where the file can be opened using Python&amp;rsquo;s standard &lt;code&gt;open()&lt;/code&gt;. For storage systems that aren&amp;rsquo;t accessible from the local filesystem, this will raise &lt;code&gt;NotImplementedError&lt;/code&gt; instead.</source>
          <target state="translated">可以使用Python的标准 &lt;code&gt;open()&lt;/code&gt; 在其中打开文件的本地文件系统路径。对于无法从本地文件系统访问的存储系统，这将引发 &lt;code&gt;NotImplementedError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a1061cdc3e5384fbeb5f9f675cd2e59f22fddb4" translate="yes" xml:space="preserve">
          <source>The location of the cache to use. This might be the directory for a file system cache, a host and port for a memcache server, or an identifying name for a local memory cache. e.g.:</source>
          <target state="translated">要使用的高速缓存的位置。可能是文件系统缓存的目录,也可能是memcache服务器的主机和端口,还可能是本地内存缓存的识别名称,例如:。</target>
        </trans-unit>
        <trans-unit id="d7e2ca0e60211a0cb354f673482c031189a40c08" translate="yes" xml:space="preserve">
          <source>The logger instance contains an entry method for each of the default log levels:</source>
          <target state="translated">记录器实例包含每个默认日志级别的条目方法。</target>
        </trans-unit>
        <trans-unit id="a659c101e4877f63bce98cd3fb9fc2c0f7f25ac1" translate="yes" xml:space="preserve">
          <source>The logic here is that if you change the URL structure of your objects, even for something small like correcting a spelling error, you don&amp;rsquo;t want to have to track down every place that the URL might be created. Specify it once, in &lt;code&gt;get_absolute_url()&lt;/code&gt; and have all your other code call that one place.</source>
          <target state="translated">这里的逻辑是，如果您更改对象的URL结构，即使是纠正拼写错误之类的小事，您也不必跟踪可能会创建URL的每个位置。在 &lt;code&gt;get_absolute_url()&lt;/code&gt; 中指定一次，然后将所有其他代码都调用该位置。</target>
        </trans-unit>
        <trans-unit id="687128deb38f53e7b71652784c2690bc5851ee61" translate="yes" xml:space="preserve">
          <source>The lookup API has two components: a &lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt;&lt;code&gt;RegisterLookupMixin&lt;/code&gt;&lt;/a&gt; class that registers lookups, and the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;, a set of methods that a class has to implement to be registrable as a lookup.</source>
          <target state="translated">查找API具有两个组件：注册查找的&lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt; &lt;code&gt;RegisterLookupMixin&lt;/code&gt; &lt;/a&gt;类和&lt;a href=&quot;#query-expression&quot;&gt;查询表达式API&lt;/a&gt;（该类必须实现才能作为查找注册的一组方法）。</target>
        </trans-unit>
        <trans-unit id="0276269b885cef976968811b2edeaa225cfd17d5" translate="yes" xml:space="preserve">
          <source>The lookup key &amp;mdash; &lt;code&gt;'django'&lt;/code&gt; in this example &amp;mdash; is the engine&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">查找关键字（在此示例中为 &lt;code&gt;'django'&lt;/code&gt; )是引擎的&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt; &lt;code&gt;NAME&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4d740394561eb705a4868cc313d2df0c5ae0ff98" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt; in the above function definitions) should be in the format described in &lt;a href=&quot;#field-lookups&quot;&gt;Field lookups&lt;/a&gt; below.</source>
          <target state="translated">查找参数（上述函数定义中的 &lt;code&gt;**kwargs&lt;/code&gt; ）应采用以下&lt;a href=&quot;#field-lookups&quot;&gt;字段查找&lt;/a&gt;中所述的格式。</target>
        </trans-unit>
        <trans-unit id="c1aa2d8b25c68a3972c459d52d5d1df4453e745e" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt;) should be in the format described in &lt;a href=&quot;#id4&quot;&gt;Field lookups&lt;/a&gt; below. Multiple parameters are joined via &lt;code&gt;AND&lt;/code&gt; in the underlying SQL statement, and the whole thing is enclosed in a &lt;code&gt;NOT()&lt;/code&gt;.</source>
          <target state="translated">查找参数（ &lt;code&gt;**kwargs&lt;/code&gt; ）应采用以下&lt;a href=&quot;#id4&quot;&gt;字段查找&lt;/a&gt;中所述的格式。在基础SQL语句中，通过 &lt;code&gt;AND&lt;/code&gt; 连接多个参数，整个内容包含在 &lt;code&gt;NOT()&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="8624505a11a1f96bc7dedf399ff95d5f7f44e9a7" translate="yes" xml:space="preserve">
          <source>The lookup parameters (&lt;code&gt;**kwargs&lt;/code&gt;) should be in the format described in &lt;a href=&quot;#id4&quot;&gt;Field lookups&lt;/a&gt; below. Multiple parameters are joined via &lt;code&gt;AND&lt;/code&gt; in the underlying SQL statement.</source>
          <target state="translated">查找参数（ &lt;code&gt;**kwargs&lt;/code&gt; ）应采用以下&lt;a href=&quot;#id4&quot;&gt;字段查找&lt;/a&gt;中所述的格式。在基础SQL语句中，通过 &lt;code&gt;AND&lt;/code&gt; 连接多个参数。</target>
        </trans-unit>
        <trans-unit id="9c54a4c642c9e6f0c9ae93e6eab22d2b4de903fd" translate="yes" xml:space="preserve">
          <source>The low level APIs are only useful if you&amp;rsquo;re implementing your own transaction management.</source>
          <target state="translated">仅当您实现自己的事务管理时，低级API才有用。</target>
        </trans-unit>
        <trans-unit id="526a0d5ca4718e8069fe06342982ba02ef02340b" translate="yes" xml:space="preserve">
          <source>The low level APIs for savepoints are only usable inside a transaction ie. inside an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="translated">保存点的低级API仅在事务内可用，即。在&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;块中。</target>
        </trans-unit>
        <trans-unit id="b0ca2d43ff9da88d8e9a9e84a1dde1af555645e3" translate="yes" xml:space="preserve">
          <source>The low-level cache API</source>
          <target state="translated">低级缓存API</target>
        </trans-unit>
        <trans-unit id="3e4ac3cef9202e0612f4766b7c338a2d2967c8d9" translate="yes" xml:space="preserve">
          <source>The low-level framework</source>
          <target state="translated">低级框架</target>
        </trans-unit>
        <trans-unit id="a2521b2e894f8fd863f1d83feddb4c441a705c60" translate="yes" xml:space="preserve">
          <source>The low-level render API</source>
          <target state="translated">低级渲染API</target>
        </trans-unit>
        <trans-unit id="9a130d432120892a195d3e0022cff8a6aafc70ad" translate="yes" xml:space="preserve">
          <source>The lower-left coordinate, as a tuple.</source>
          <target state="translated">左下角坐标,作为一个元组。</target>
        </trans-unit>
        <trans-unit id="cc7f347ba6ea37d89eb064fb060fa13066ba1124" translate="yes" xml:space="preserve">
          <source>The main benefit of using &lt;a href=&quot;expressions#django.db.models.expressions.RawSQL&quot;&gt;&lt;code&gt;RawSQL&lt;/code&gt;&lt;/a&gt; is that you can set &lt;code&gt;output_field&lt;/code&gt; if needed. The main downside is that if you refer to some table alias of the queryset in the raw SQL, then it is possible that Django might change that alias (for example, when the queryset is used as a subquery in yet another query).</source>
          <target state="translated">使用&lt;a href=&quot;expressions#django.db.models.expressions.RawSQL&quot;&gt; &lt;code&gt;RawSQL&lt;/code&gt; &lt;/a&gt;的主要好处是可以根据需要设置 &lt;code&gt;output_field&lt;/code&gt; 。主要缺点是，如果您在原始SQL中引用查询集的某些表别名，则Django可能会更改该别名（例如，当查询集用作另一个查询中的子查询时）。</target>
        </trans-unit>
        <trans-unit id="029d2026069ff1a0dc50a63a4caae4c10a9f46a3" translate="yes" xml:space="preserve">
          <source>The main difference between &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; is that &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; opens a connection to the mail server each time it&amp;rsquo;s executed, while &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; uses a single connection for all of its messages. This makes &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; slightly more efficient.</source>
          <target state="translated">之间的主要区别&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;是&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;打开每一个它的执行时间的邮件服务器的连接，而&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt;使用其所有消息的单个连接。这使&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; 的&lt;/a&gt;效率稍高。</target>
        </trans-unit>
        <trans-unit id="ee849a007c2cc0544bfee8bbc54e8a9c99cb790d" translate="yes" xml:space="preserve">
          <source>The main drawbacks of &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/myisam-storage-engine.html&quot;&gt;MyISAM&lt;/a&gt; are that it doesn&amp;rsquo;t support transactions or enforce foreign-key constraints.</source>
          <target state="translated">&lt;a href=&quot;https://dev.mysql.com/doc/refman/en/myisam-storage-engine.html&quot;&gt;MyISAM&lt;/a&gt;的主要缺点是它不支持事务或强制执行外键约束。</target>
        </trans-unit>
        <trans-unit id="b716970f259f9a6cd2b19a9671b50a7df6b1fc2e" translate="yes" xml:space="preserve">
          <source>The main solution to these problems is the following &lt;code&gt;JavaScriptCatalog&lt;/code&gt; view, which generates a JavaScript code library with functions that mimic the &lt;code&gt;gettext&lt;/code&gt; interface, plus an array of translation strings.</source>
          <target state="translated">解决这些问题的主要方法是下面的 &lt;code&gt;JavaScriptCatalog&lt;/code&gt; 视图，该视图生成一个JavaScript代码库，该库具有模仿 &lt;code&gt;gettext&lt;/code&gt; 接口的功能以及翻译字符串数组。</target>
        </trans-unit>
        <trans-unit id="f336b635d846500908b16d31047dfb778ce719ad" translate="yes" xml:space="preserve">
          <source>The management form is available as an attribute of the formset itself. When rendering a formset in a template, you can include all the management data by rendering &lt;code&gt;{{ my_formset.management_form }}&lt;/code&gt; (substituting the name of your formset as appropriate).</source>
          <target state="translated">管理表单可用作表单集本身的属性。在模板中呈现 &lt;code&gt;{{ my_formset.management_form }}&lt;/code&gt; ，可以通过呈现{{my_formset.management_form}}（适当地替换表单集的名称）来包含所有管理数据。</target>
        </trans-unit>
        <trans-unit id="975428386ba20246f9798d41d057f93b042f465c" translate="yes" xml:space="preserve">
          <source>The master class-based base view. All other class-based views inherit from this base class. It isn&amp;rsquo;t strictly a generic view and thus can also be imported from &lt;code&gt;django.views&lt;/code&gt;.</source>
          <target state="translated">基于主类的基本视图。所有其他基于类的视图都从该基类继承。严格来说，它不是通用视图，因此也可以从 &lt;code&gt;django.views&lt;/code&gt; 导入。</target>
        </trans-unit>
        <trans-unit id="77d55017d73e6f752fb81670f8b49fb4a767c01e" translate="yes" xml:space="preserve">
          <source>The master router is used by Django&amp;rsquo;s database operations to allocate database usage. Whenever a query needs to know which database to use, it calls the master router, providing a model and a hint (if available). Django then tries each router in turn until a database suggestion can be found. If no suggestion can be found, it tries the current &lt;code&gt;_state.db&lt;/code&gt; of the hint instance. If a hint instance wasn&amp;rsquo;t provided, or the instance doesn&amp;rsquo;t currently have database state, the master router will allocate the &lt;code&gt;default&lt;/code&gt; database.</source>
          <target state="translated">Django的数据库操作使用主路由器来分配数据库使用量。每当查询需要知道要使用哪个数据库时，它都会调用主路由器，并提供模型和提示（如果可用）。然后Django依次尝试每个路由器，直到找到数据库建议为止。如果找不到建议，它将尝试使用提示实例的当前 &lt;code&gt;_state.db&lt;/code&gt; 。如果未提供提示实例，或者该实例当前不具有数据库状态，则主路由器将分配 &lt;code&gt;default&lt;/code&gt; 数据库。</target>
        </trans-unit>
        <trans-unit id="620f9f971ca7545e2e1072b17b40e60ee0cb0c8d" translate="yes" xml:space="preserve">
          <source>The match mode for &lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt;. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.core.validators.RegexValidator.regex&quot;&gt; &lt;code&gt;regex&lt;/code&gt; &lt;/a&gt;的匹配模式。默认为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1e513aead5b12255955659b8cf2b80be1b6b580" translate="yes" xml:space="preserve">
          <source>The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django&amp;rsquo;s validation using &lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt;&lt;code&gt;MaxLengthValidator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">字段的最大长度（以字符为单位）。max_length在数据库级别和使用&lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt; &lt;code&gt;MaxLengthValidator&lt;/code&gt; &lt;/a&gt;在Django的验证中强制执行。</target>
        </trans-unit>
        <trans-unit id="037bd1a1440adda1a291120295b62497fe60ae9e" translate="yes" xml:space="preserve">
          <source>The maximum length (in characters) of the field. The maximum length is enforced in Django&amp;rsquo;s validation using &lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt;&lt;code&gt;MaxLengthValidator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">字段的最大长度（以字符为单位）。最大长度在Django的验证中使用&lt;a href=&quot;../validators#django.core.validators.MaxLengthValidator&quot;&gt; &lt;code&gt;MaxLengthValidator&lt;/code&gt; &lt;/a&gt;强制执行。</target>
        </trans-unit>
        <trans-unit id="3f6963c8f2a731388e55b8dfecc905f73dd376bc" translate="yes" xml:space="preserve">
          <source>The maximum number of decimal places permitted.</source>
          <target state="translated">允许的最大小数位数。</target>
        </trans-unit>
        <trans-unit id="ec30906753aab508c52a426c8da02b4a98b905f8" translate="yes" xml:space="preserve">
          <source>The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value.</source>
          <target state="translated">值中允许的最大数字(小数点前的数字加上小数点后的数字,去掉前导零)。</target>
        </trans-unit>
        <trans-unit id="7a22f82bc47caf7130f3beae0f8f8e382172fe51" translate="yes" xml:space="preserve">
          <source>The maximum number of digits allowed in the number. Note that this number must be greater than or equal to &lt;code&gt;decimal_places&lt;/code&gt;.</source>
          <target state="translated">数字中允许的最大位数。请注意，此数字必须大于或等于 &lt;code&gt;decimal_places&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c167eb262474d9d7649cc6b34d6aa61157de151d" translate="yes" xml:space="preserve">
          <source>The maximum number of parameters that may be received via GET or POST before a &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;TooManyFields&lt;/code&gt;) is raised. You can set this to &lt;code&gt;None&lt;/code&gt; to disable the check. Applications that are expected to receive an unusually large number of form fields should tune this setting.</source>
          <target state="translated">在提高&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;TooManyFields&lt;/code&gt; ）之前可以通过GET或POST接收的最大参数数量。您可以将此设置为&amp;ldquo; &lt;code&gt;None&lt;/code&gt; 以禁用检查。预期会收到异常大量的表单字段的应用程序应调整此设置。</target>
        </trans-unit>
        <trans-unit id="682cb5709db5299d33be45387c00d3db6138f770" translate="yes" xml:space="preserve">
          <source>The maximum pixel value of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">频段的最大像素值（不包括&amp;ldquo;无数据&amp;rdquo;值）。</target>
        </trans-unit>
        <trans-unit id="6d57b41141db2056397f4308084ace5a47400304" translate="yes" xml:space="preserve">
          <source>The maximum size (in bytes) that an upload will be before it gets streamed to the file system. See &lt;a href=&quot;../topics/files&quot;&gt;Managing files&lt;/a&gt; for details.</source>
          <target state="translated">上载流传输到文件系统之前的最大大小（以字节为单位）。有关详细信息，请参见&lt;a href=&quot;../topics/files&quot;&gt;管理文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a98e6ed2d92323b4e4a1333e3d67c09094b6976" translate="yes" xml:space="preserve">
          <source>The maximum size in bytes that a request body may be before a &lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;RequestDataTooBig&lt;/code&gt;) is raised. The check is done when accessing &lt;code&gt;request.body&lt;/code&gt; or &lt;code&gt;request.POST&lt;/code&gt; and is calculated against the total request size excluding any file upload data. You can set this to &lt;code&gt;None&lt;/code&gt; to disable the check. Applications that are expected to receive unusually large form posts should tune this setting.</source>
          <target state="translated">引发&lt;a href=&quot;exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;RequestDataTooBig&lt;/code&gt; ）之前，请求正文可能达到的最大字节大小。该检查是在访问 &lt;code&gt;request.body&lt;/code&gt; 或 &lt;code&gt;request.POST&lt;/code&gt; 时完成的，并根据请求的总大小（不包括任何文件上传数据）计算得出。您可以将此设置为&amp;ldquo; &lt;code&gt;None&lt;/code&gt; 以禁用检查。预期会收到异常大的表单帖子的应用程序应调整此设置。</target>
        </trans-unit>
        <trans-unit id="1874b9e490548adb53b57fe2086e057e8651752c" translate="yes" xml:space="preserve">
          <source>The maximum size that the DATAFILE is allowed to grow to.</source>
          <target state="translated">DATAFILE允许增长的最大尺寸。</target>
        </trans-unit>
        <trans-unit id="7a59a68017db3ce10acbaf32799a35c947e9f15b" translate="yes" xml:space="preserve">
          <source>The maximum size that the DATAFILE_TMP is allowed to grow to.</source>
          <target state="translated">DATAFILE_TMP允许增长的最大尺寸。</target>
        </trans-unit>
        <trans-unit id="fd1fc8f8d716647e7a02404093fe6dca1f7e22bc" translate="yes" xml:space="preserve">
          <source>The mean of all pixel values of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">该频段所有像素值的平均值（不包括&amp;ldquo;无数据&amp;rdquo;值）。</target>
        </trans-unit>
        <trans-unit id="c2bb72583b48a36e3f3b76cffb04451146899512" translate="yes" xml:space="preserve">
          <source>The messages are marked to be cleared when the storage instance is iterated (and cleared when the response is processed).</source>
          <target state="translated">这些消息被标记为在存储实例迭代时清除(在处理响应时清除)。</target>
        </trans-unit>
        <trans-unit id="679921afb83b3374dbeb1f6690418b9b230e09d7" translate="yes" xml:space="preserve">
          <source>The messages framework</source>
          <target state="translated">信息框架</target>
        </trans-unit>
        <trans-unit id="bcaf4e14ba9ce595c2d57efd12477862d5fbecfc" translate="yes" xml:space="preserve">
          <source>The messages framework can use different backends to store temporary messages.</source>
          <target state="translated">消息框架可以使用不同的后端来存储临时消息。</target>
        </trans-unit>
        <trans-unit id="946da20094bf98a1fbc1a7e70434b878af7c1ec5" translate="yes" xml:space="preserve">
          <source>The messages framework is based on a configurable level architecture similar to that of the Python logging module. Message levels allow you to group messages by type so they can be filtered or displayed differently in views and templates.</source>
          <target state="translated">消息框架是基于一个类似于Python日志模块的可配置级别架构。消息级别允许你按类型对消息进行分组,以便在视图和模板中以不同的方式对它们进行过滤或显示。</target>
        </trans-unit>
        <trans-unit id="abc5ff0981a223de9d7ebc8dbe2c56ed3a022401" translate="yes" xml:space="preserve">
          <source>The metadata of this band. The functionality is identical to &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.metadata&quot;&gt;&lt;code&gt;GDALRaster.metadata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该频段的元数据。该功能与&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.metadata&quot;&gt; &lt;code&gt;GDALRaster.metadata&lt;/code&gt; &lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="05c7d47a95b26a5b7b622a8b38916086f695d65f" translate="yes" xml:space="preserve">
          <source>The metadata of this raster, represented as a nested dictionary. The first-level key is the metadata domain. The second-level contains the metadata item names and values from each domain.</source>
          <target state="translated">这个栅格的元数据,用一个嵌套的字典表示。第一级键是元数据域。第二级包含元数据项名称和每个域的值。</target>
        </trans-unit>
        <trans-unit id="7da5ce0b0d9eb842fded76cda2aa56ff0449f389" translate="yes" xml:space="preserve">
          <source>The method doesn&amp;rsquo;t need to verify that the template exists at a given path, but it should ensure the path is valid. For instance, the filesystem loader makes sure the path lies under a valid template directory.</source>
          <target state="translated">该方法不需要验证模板在给定路径中是​​否存在，但应确保该路径有效。例如，文件系统加载器确保路径位于有效模板目录下。</target>
        </trans-unit>
        <trans-unit id="2d4e0bb3536d92174306b64eb9b3f91b660fca55" translate="yes" xml:space="preserve">
          <source>The method that is used when creating the hashed name of a file. Needs to return a hash for the given file name and content. By default it calculates a MD5 hash from the content&amp;rsquo;s chunks as mentioned above. Feel free to override this method to use your own hashing algorithm.</source>
          <target state="translated">创建文件的哈希名称时使用的方法。需要返回给定文件名和内容的哈希值。默认情况下，它如上所述从内容的块中计算MD5哈希。随意重写此方法以使用您自己的哈希算法。</target>
        </trans-unit>
        <trans-unit id="e02ff96a70373150944fa3cf71734857d0e73b34" translate="yes" xml:space="preserve">
          <source>The method&amp;rsquo;s result affects whether or not a field in a model form &lt;a href=&quot;../../topics/forms/modelforms#topics-modelform-save&quot;&gt;falls back to its default&lt;/a&gt;.</source>
          <target state="translated">方法的结果影响模型形式中的字段是否&lt;a href=&quot;../../topics/forms/modelforms#topics-modelform-save&quot;&gt;回退为其默认值&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2b9e9d922de37731b658ab20d1cffacd6cb0024c" translate="yes" xml:space="preserve">
          <source>The middleware is strongly recommended for any site that does not need to have its pages wrapped in a frame by third party sites, or only needs to allow that for a small section of the site.</source>
          <target state="translated">对于任何不需要第三方网站将其页面包裹在框架中的网站,或者只需要允许网站的一小部分页面包裹在框架中的网站,强烈推荐使用中间件。</target>
        </trans-unit>
        <trans-unit id="501246c391913f153cfb889b8189b3100c025574" translate="yes" xml:space="preserve">
          <source>The middleware only gets activated for 404s &amp;ndash; not for 500s or responses of any other status code.</source>
          <target state="translated">中间件只能激活404秒，而不能激活500秒或任何其他状态码的响应。</target>
        </trans-unit>
        <trans-unit id="f71b0623a74c63465319f60222a670ec071a2028" translate="yes" xml:space="preserve">
          <source>The middleware will only add a trailing slash and redirect (by looking at the &lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; setting) if the resulting URL refers to a valid flatpage. Redirects are permanent (301 status code).</source>
          <target state="translated">如果结果URL指向有效的&lt;a href=&quot;../settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt;，则中间件将仅添加尾部斜杠和重定向（通过查看APPEND_SLASH设置）。重定向是永久性的（301状态代码）。</target>
        </trans-unit>
        <trans-unit id="c20fbe3e7feb8c8f6800c64fcd3427aa71102dbd" translate="yes" xml:space="preserve">
          <source>The migration files for each app live in a &amp;ldquo;migrations&amp;rdquo; directory inside of that app, and are designed to be committed to, and distributed as part of, its codebase. You should be making them once on your development machine and then running the same migrations on your colleagues&amp;rsquo; machines, your staging machines, and eventually your production machines.</source>
          <target state="translated">每个应用程序的迁移文件都位于该应用程序内的&amp;ldquo;迁移&amp;rdquo;目录中，并被设计为提交至其代码库并作为其代码库的一部分进行分发。您应该在开发计算机上制作一次，然后在同事的计算机，登台计算机以及最终的生产计算机上运行相同的迁移。</target>
        </trans-unit>
        <trans-unit id="2149c96c766867703d83ae08713e6f458df2b430" translate="yes" xml:space="preserve">
          <source>The migration plan that is going to be used for the migration run. While the plan is not public API, this allows for the rare cases when it is necessary to know the plan. A plan is a list of two-tuples with the first item being the instance of a migration class and the second item showing if the migration was rolled back (&lt;code&gt;True&lt;/code&gt;) or applied (&lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">将用于迁移运行的迁移计划。尽管该计划不是公共API，但是在需要了解该计划的情况下，这允许极少数情况。计划是一个由两元组组成的列表，其中第一项是迁移类的实例，第二项显示迁移是回滚（ &lt;code&gt;True&lt;/code&gt; ）还是已应用（ &lt;code&gt;False&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="12a8e64c1a85376f2269b1de4266fc493270fecd" translate="yes" xml:space="preserve">
          <source>The migration plan that was used for the migration run. While the plan is not public API, this allows for the rare cases when it is necessary to know the plan. A plan is a list of two-tuples with the first item being the instance of a migration class and the second item showing if the migration was rolled back (&lt;code&gt;True&lt;/code&gt;) or applied (&lt;code&gt;False&lt;/code&gt;).</source>
          <target state="translated">用于迁移运行的迁移计划。尽管该计划不是公共API，但是在需要了解该计划的情况下，这允许极少数情况。计划是一个由两元组组成的列表，其中第一项是迁移类的实例，第二项显示迁移是回滚（ &lt;code&gt;True&lt;/code&gt; ）还是已应用（ &lt;code&gt;False&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0251ce19e6e1513662181aba489dd0c06a5da39d" translate="yes" xml:space="preserve">
          <source>The migrations system will maintain backwards-compatibility according to the same policy as the rest of Django, so migration files generated on Django X.Y should run unchanged on Django X.Y+1. The migrations system does not promise forwards-compatibility, however. New features may be added, and migration files generated with newer versions of Django may not work on older versions.</source>
          <target state="translated">迁移系统会按照与Django其他部分相同的策略保持向后兼容,所以在Django X.Y上生成的迁移文件在Django X.Y+1上运行时应该是不变的。但是,迁移系统并不保证向前兼容。新的功能可能会被添加,而且用新版本的Django生成的迁移文件可能无法在旧版本上运行。</target>
        </trans-unit>
        <trans-unit id="04d66b29b059dd9530bfc58fdebce59ae171833c" translate="yes" xml:space="preserve">
          <source>The minimal validation requirements, used in Django&amp;rsquo;s admin and in automatically-generated forms.</source>
          <target state="translated">最低验证要求，用于Django的管理员和自动生成的形式。</target>
        </trans-unit>
        <trans-unit id="1df48ef6226a94c112197d2f533e7ea705cedf6e" translate="yes" xml:space="preserve">
          <source>The minimum number of days a password reset link is valid for. Depending on when the link is generated, it will be valid for up to a day longer.</source>
          <target state="translated">密码重置链接的最少有效天数。根据链接生成的时间,它的有效期最多可以延长一天。</target>
        </trans-unit>
        <trans-unit id="e313352f5e679e2d560c6a24206ddca8e84ac7e7" translate="yes" xml:space="preserve">
          <source>The minimum pixel value of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">频段的最小像素值（不包括&amp;ldquo;无数据&amp;rdquo;值）。</target>
        </trans-unit>
        <trans-unit id="aaed376ec9d4dae9a50bea944365a91b33edcf17" translate="yes" xml:space="preserve">
          <source>The minimum recorded level can be set per request via the &lt;code&gt;set_level&lt;/code&gt; method:</source>
          <target state="translated">可以通过 &lt;code&gt;set_level&lt;/code&gt; 方法为每个请求设置最低记录级别：</target>
        </trans-unit>
        <trans-unit id="ed8df49b558cefc42176a09c3feb3114d44b1599" translate="yes" xml:space="preserve">
          <source>The minimum similarity of a rejected password can be set on a scale of 0 to 1 with the &lt;code&gt;max_similarity&lt;/code&gt; parameter. A setting of 0 rejects all passwords, whereas a setting of 1 rejects only passwords that are identical to an attribute&amp;rsquo;s value.</source>
          <target state="translated">可以使用 &lt;code&gt;max_similarity&lt;/code&gt; 参数将拒绝密码的最小相似度设置为0到1 。设置为0会拒绝所有密码，而设置为1只会拒绝与属性值相同的密码。</target>
        </trans-unit>
        <trans-unit id="c115df3ebc9de1ceafe0429af5996f777e5d691a" translate="yes" xml:space="preserve">
          <source>The minimum version of the &lt;code&gt;gettext&lt;/code&gt; utilities supported is 0.15.</source>
          <target state="translated">支持的 &lt;code&gt;gettext&lt;/code&gt; 实用程序的最低版本为0.15。</target>
        </trans-unit>
        <trans-unit id="e04e85acc7a22de54af4c3ba1a506517688b06af" translate="yes" xml:space="preserve">
          <source>The mixin provides an &lt;code&gt;__init__()&lt;/code&gt; method that accepts an optional &lt;code&gt;get_response&lt;/code&gt; argument and stores it in &lt;code&gt;self.get_response&lt;/code&gt;.</source>
          <target state="translated">mixin提供了一个 &lt;code&gt;__init__()&lt;/code&gt; 方法，该方法接受一个可选的 &lt;code&gt;get_response&lt;/code&gt; 参数并将其存储在 &lt;code&gt;self.get_response&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="c8ce5e8bdfce92d988b4e5a30c0273642da4536c" translate="yes" xml:space="preserve">
          <source>The mod_wsgi &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/access-control-mechanisms.html&quot;&gt;access control mechanisms documentation&lt;/a&gt; provides additional details and information about alternative methods of authentication.</source>
          <target state="translated">mod_wsgi &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/access-control-mechanisms.html&quot;&gt;访问控制机制文档&lt;/a&gt;提供了其他详细信息和有关替代身份验证方法的信息。</target>
        </trans-unit>
        <trans-unit id="094b414163518a144ddd7d6e4e4a3893eb28aa55" translate="yes" xml:space="preserve">
          <source>The model &lt;code&gt;_meta&lt;/code&gt; API is at the core of the Django ORM. It enables other parts of the system such as lookups, queries, forms, and the admin to understand the capabilities of each model. The API is accessible through the &lt;code&gt;_meta&lt;/code&gt; attribute of each model class, which is an instance of an &lt;code&gt;django.db.models.options.Options&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;_meta&lt;/code&gt; 模型API是Django ORM的核心。它使系统的其他部分（例如查找，查询，表单和管理员）能够了解每个模型的功能。可通过每个模型类的 &lt;code&gt;_meta&lt;/code&gt; 属性访问该API，该属性是 &lt;code&gt;django.db.models.options.Options&lt;/code&gt; 对象的实例。</target>
        </trans-unit>
        <trans-unit id="4501983b1bda78a361bf2bab7ec3fbdf3470f6bc" translate="yes" xml:space="preserve">
          <source>The model class that just had an instance created.</source>
          <target state="translated">刚刚创建了一个实例的模型类。</target>
        </trans-unit>
        <trans-unit id="0e8e5b4a403023823b15e07666e1a54622375582" translate="yes" xml:space="preserve">
          <source>The model class which was just prepared.</source>
          <target state="translated">刚刚准备好的模型课。</target>
        </trans-unit>
        <trans-unit id="ddfb44a6f87415cb74c8189d43146202fff99692" translate="yes" xml:space="preserve">
          <source>The model class.</source>
          <target state="translated">模型类。</target>
        </trans-unit>
        <trans-unit id="78acc1600cd85ddf009d300696e3cd6fec16f262" translate="yes" xml:space="preserve">
          <source>The model field class to use.</source>
          <target state="translated">要使用的模型场类。</target>
        </trans-unit>
        <trans-unit id="1e3d4f4592baad1751f54ba7ffbbcf37038c2615" translate="yes" xml:space="preserve">
          <source>The model layer</source>
          <target state="translated">模型层</target>
        </trans-unit>
        <trans-unit id="05ea240599304250578e893321e4b253ba2ec6fe" translate="yes" xml:space="preserve">
          <source>The model name used in this setting should be all lowercase, regardless of the case of the actual model class name.</source>
          <target state="translated">在此设置中使用的模型名称应全部为小写,与实际模型类名称的大小写无关。</target>
        </trans-unit>
        <trans-unit id="fbc461ddb972315567096edb23fec8328a226003" translate="yes" xml:space="preserve">
          <source>The model save process also has some subtleties; see the sections below.</source>
          <target state="translated">模型保存过程也有一些微妙的地方,请看下面的章节。</target>
        </trans-unit>
        <trans-unit id="d8053d22db4c6d941e399872f7f604bf33b87492" translate="yes" xml:space="preserve">
          <source>The model that this view will display data for. Specifying &lt;code&gt;model
= Foo&lt;/code&gt; is effectively the same as specifying &lt;code&gt;queryset =
Foo.objects.all()&lt;/code&gt;, where &lt;code&gt;objects&lt;/code&gt; stands for &lt;code&gt;Foo&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;../../topics/db/managers#default-managers&quot;&gt;default manager&lt;/a&gt;.</source>
          <target state="translated">该视图将显示其数据的模型。指定 &lt;code&gt;model = Foo&lt;/code&gt; 实际上与指定 &lt;code&gt;queryset = Foo.objects.all()&lt;/code&gt; ，其中 &lt;code&gt;objects&lt;/code&gt; 代表 &lt;code&gt;Foo&lt;/code&gt; 的&lt;a href=&quot;../../topics/db/managers#default-managers&quot;&gt;默认管理器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f1def7a086dc7e6ef4fc0558b744537d4de33fb5" translate="yes" xml:space="preserve">
          <source>The model to use to represent a User. See &lt;a href=&quot;../topics/auth/customizing#auth-custom-user&quot;&gt;Substituting a custom User model&lt;/a&gt;.</source>
          <target state="translated">用于表示用户的模型。请参阅&lt;a href=&quot;../topics/auth/customizing#auth-custom-user&quot;&gt;替代自定义用户模型&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fc307cde0ae0d6de22cf7f623771cc5b5bbae6da" translate="yes" xml:space="preserve">
          <source>The model which the inline is using. This is required.</source>
          <target state="translated">内联使用的模型。这是必须的。</target>
        </trans-unit>
        <trans-unit id="bc0d0043169b7c7d60fd944b4757985c1bae1133" translate="yes" xml:space="preserve">
          <source>The model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method will be called before any uniqueness checks are made. See &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;Validating objects&lt;/a&gt; for more information on the model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; hook.</source>
          <target state="translated">在进行任何唯一性检查之前，将调用模型的 &lt;code&gt;clean()&lt;/code&gt; 方法。有关模型的 &lt;code&gt;clean()&lt;/code&gt; 挂钩的更多信息，请参见&lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;验证对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0a75830961803123e6e36c02e863420d3ad5a35f" translate="yes" xml:space="preserve">
          <source>The model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method will not be called, and the &lt;code&gt;pre_save&lt;/code&gt; and &lt;code&gt;post_save&lt;/code&gt; signals will not be sent.</source>
          <target state="translated">将不会调用模型的 &lt;code&gt;save()&lt;/code&gt; 方法，并且不会发送 &lt;code&gt;pre_save&lt;/code&gt; 和 &lt;code&gt;post_save&lt;/code&gt; 信号。</target>
        </trans-unit>
        <trans-unit id="2eedc03fa70b854f71fd82b6827c0841a1473ce0" translate="yes" xml:space="preserve">
          <source>The moral here is that if you are using &lt;code&gt;distinct()&lt;/code&gt; be careful about ordering by related models. Similarly, when using &lt;code&gt;distinct()&lt;/code&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; together, be careful when ordering by fields not in the &lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">这里的道理是，如果您使用 &lt;code&gt;distinct()&lt;/code&gt; ,请注意按相关模型进行排序。同样，当一起使用 &lt;code&gt;distinct()&lt;/code&gt; 和&lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;时，请注意按不在&lt;a href=&quot;#django.db.models.query.QuerySet.values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;调用中的字段进行排序。</target>
        </trans-unit>
        <trans-unit id="48c675d5043f6c3d4aae4ca0ea0f61d6c38aac55" translate="yes" xml:space="preserve">
          <source>The most common place to specify custom template tags and filters is inside a Django app. If they relate to an existing app, it makes sense to bundle them there; otherwise, they can be added to a new app. When a Django app is added to &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, any tags it defines in the conventional location described below are automatically made available to load within templates.</source>
          <target state="translated">指定自定义模板标签和过滤器的最常见位置是Django应用程序内部。如果它们与现有应用程序相关，则将它们捆绑在此处是有意义的；否则，可以将它们添加到新应用中。将Django应用添加到&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 时&lt;/a&gt;，它在以下所述的常规位置中定义的所有标签都会自动变为可加载模板。</target>
        </trans-unit>
        <trans-unit id="bef975184f8e317bf6782bf294b1f22d7c6b0904" translate="yes" xml:space="preserve">
          <source>The most common solution is to properly configure your &lt;a href=&quot;index#libsettings&quot;&gt;Library environment settings&lt;/a&gt;&lt;em&gt;or&lt;/em&gt; set &lt;a href=&quot;#geoslibrarypath&quot;&gt;GEOS_LIBRARY_PATH&lt;/a&gt; in your settings.</source>
          <target state="translated">最常见的解决方案是正确配置您的&lt;a href=&quot;index#libsettings&quot;&gt;库环境设置&lt;/a&gt;&lt;em&gt;或&lt;/em&gt;在设置中设置&lt;a href=&quot;#geoslibrarypath&quot;&gt;GEOS_LIBRARY_PATH&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9413ed3849f2b96d296bced76096f62dd8d3bff7" translate="yes" xml:space="preserve">
          <source>The most common transformation this cannot do is transforming a &lt;code&gt;ManyToManyField&lt;/code&gt; into a normal Field or vice-versa; Django cannot do this without losing data, and so it will refuse to do it. Instead, &lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field&quot;&gt;&lt;code&gt;remove_field()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field&quot;&gt;&lt;code&gt;add_field()&lt;/code&gt;&lt;/a&gt; should be called separately.</source>
          <target state="translated">这不能执行的最常见转换是将 &lt;code&gt;ManyToManyField&lt;/code&gt; 转换为普通Field，反之亦然；Django不能在不丢失数据的情况下做到这一点，因此它将拒绝这样做。而是应分别调用&lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field&quot;&gt; &lt;code&gt;remove_field()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field&quot;&gt; &lt;code&gt;add_field()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6871e2460dcc11bf73ec697d41104e7bf8e9f9ab" translate="yes" xml:space="preserve">
          <source>The most common use case is to pass a &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt;, as shown above. However, you can also pass a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; instance:</source>
          <target state="translated">如上所示，最常见的用例是传递&lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt;。但是，您也可以传递&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;实例：</target>
        </trans-unit>
        <trans-unit id="a7e69a7c6f372ddb58c9461e3bc1ab0d8ab051db" translate="yes" xml:space="preserve">
          <source>The most common use for this option is when you want to associate &lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;extra data with a many-to-many relationship&lt;/a&gt;.</source>
          <target state="translated">此选项最常见的用法是当您要将&lt;a href=&quot;../../topics/db/models#intermediary-manytomany&quot;&gt;多余的数据与多对多&lt;/a&gt;关联相关联时。</target>
        </trans-unit>
        <trans-unit id="49cd2b2b45a028209da4b23b5b49f8cf17035ca7" translate="yes" xml:space="preserve">
          <source>The most direct way to create users is to use the included &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt;&lt;code&gt;create_user()&lt;/code&gt;&lt;/a&gt; helper function:</source>
          <target state="translated">创建用户的最直接方法是使用随附的&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt; &lt;code&gt;create_user()&lt;/code&gt; &lt;/a&gt;帮助函数：</target>
        </trans-unit>
        <trans-unit id="bc20b7fc72d882052ee9067ed856631cfdb7de35" translate="yes" xml:space="preserve">
          <source>The most direct way to use generic views is to create them directly in your URLconf. If you&amp;rsquo;re only changing a few attributes on a class-based view, you can pass them into the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; method call itself:</source>
          <target state="translated">使用通用视图的最直接方法是直接在URLconf中创建它们。如果仅在基于类的视图上更改一些属性，则可以将它们传递给&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;方法调用本身：</target>
        </trans-unit>
        <trans-unit id="12de5658e8a30f241f87c363b37668f4b99dd892" translate="yes" xml:space="preserve">
          <source>The most efficient method of finding whether a model with a unique field (e.g. &lt;code&gt;primary_key&lt;/code&gt;) is a member of a &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">查找具有唯一字段（例如 &lt;code&gt;primary_key&lt;/code&gt; ）的模型是否是&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;成员的最有效方法是：</target>
        </trans-unit>
        <trans-unit id="144a79174396e3fefc8c2075717b173830a22026" translate="yes" xml:space="preserve">
          <source>The most important attribute of a model is the &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s the interface through which database query operations are provided to Django models and is used to &lt;a href=&quot;queries#retrieving-objects&quot;&gt;retrieve the instances&lt;/a&gt; from the database. If no custom &lt;code&gt;Manager&lt;/code&gt; is defined, the default name is &lt;a href=&quot;../../ref/models/class#django.db.models.Model.objects&quot;&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/a&gt;. Managers are only accessible via model classes, not the model instances.</source>
          <target state="translated">模型最重要的属性是&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;。它是用于向Django模型提供数据库查询操作的接口，用于从数据库中&lt;a href=&quot;queries#retrieving-objects&quot;&gt;检索实例&lt;/a&gt;。如果未定义自定义 &lt;code&gt;Manager&lt;/code&gt; ，则默认名称为&lt;a href=&quot;../../ref/models/class#django.db.models.Model.objects&quot;&gt; &lt;code&gt;objects&lt;/code&gt; &lt;/a&gt;。只能通过模型​​类而非模型实例访问管理器。</target>
        </trans-unit>
        <trans-unit id="954778b3768124b1c738d606ea826def4b1e867d" translate="yes" xml:space="preserve">
          <source>The most important entry in &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;'environment'&lt;/code&gt;. It&amp;rsquo;s a dotted Python path to a callable returning a Jinja2 environment. It defaults to &lt;code&gt;'jinja2.Environment'&lt;/code&gt;. Django invokes that callable and passes other options as keyword arguments. Furthermore, Django adds defaults that differ from Jinja2&amp;rsquo;s for a few options:</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-OPTIONS&quot;&gt; &lt;code&gt;OPTIONS&lt;/code&gt; 中&lt;/a&gt;最重要的条目是 &lt;code&gt;'environment'&lt;/code&gt; 。这是返回Jinja2环境的可调用对象的虚线Python路径。默认为 &lt;code&gt;'jinja2.Environment'&lt;/code&gt; 。Django调用该可调用对象并将其他选项作为关键字参数传递。此外，Django在一些选项中添加了与Jinja2不同的默认值：</target>
        </trans-unit>
        <trans-unit id="f28c701dac93ef930556fffde2698802bee6cb88" translate="yes" xml:space="preserve">
          <source>The most important part of a model &amp;ndash; and the only required part of a model &amp;ndash; is the list of database fields it defines. Fields are specified by class attributes. Be careful not to choose field names that conflict with the &lt;a href=&quot;../../ref/models/instances&quot;&gt;models API&lt;/a&gt; like &lt;code&gt;clean&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, or &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">模型最重要的部分，也是模型唯一需要的部分，是它定义的数据库字段的列表。字段由类属性指定。注意不要选择与&lt;a href=&quot;../../ref/models/instances&quot;&gt;模型API&lt;/a&gt;冲突的字段名称，例如 &lt;code&gt;clean&lt;/code&gt; ， &lt;code&gt;save&lt;/code&gt; 或 &lt;code&gt;delete&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b41ce9db625a2a4ed9a8a9294c595850ba7421c1" translate="yes" xml:space="preserve">
          <source>The most likely example is user-uploaded content in &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; by appending something like this to your URLconf:</source>
          <target state="translated">最可能的示例是&lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; 中的&lt;/a&gt;用户上载内容。 &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 用于静态资产，不具有对用户上传文件的内置处理，但是您可以让Django 通过将以下内容添加到URLconf中来为&lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;服务：</target>
        </trans-unit>
        <trans-unit id="ae124b720c5a2eb7fa0098254a579572cf5a32b3" translate="yes" xml:space="preserve">
          <source>The most powerful &amp;ndash; and thus the most complex &amp;ndash; part of Django&amp;rsquo;s template engine is template inheritance. Template inheritance allows you to build a base &amp;ldquo;skeleton&amp;rdquo; template that contains all the common elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.</source>
          <target state="translated">Django模板引擎中最强大（因此也是最复杂）的部分是模板继承。模板继承使您可以构建基本的&amp;ldquo;骨架&amp;rdquo;模板，该模板包含站点的所有常见元素并定义子模板可以覆盖的&lt;strong&gt;块&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="5277ee5619415435eebafd0e15ea3fa5a54fb13c" translate="yes" xml:space="preserve">
          <source>The most straightforward way of creating a fixture is to use the &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;manage.py dumpdata&lt;/code&gt;&lt;/a&gt; command. This assumes you already have some data in your database. See the &lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata
documentation&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">创建固定装置最直接的方法是使用&lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;manage.py dumpdata&lt;/code&gt; &lt;/a&gt;命令。假设您的数据库中已经有一些数据。有关更多详细信息，请参见&lt;a href=&quot;../../ref/django-admin#django-admin-dumpdata&quot;&gt; &lt;code&gt;dumpdata documentation&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e74ba7b39aa4607d8a6b5cb0835d9fc9b1454747" translate="yes" xml:space="preserve">
          <source>The naive way of solving the problem would be to require site producers to publish the same story twice: once for LJWorld.com and again for Lawrence.com. But that&amp;rsquo;s inefficient for site producers, and it&amp;rsquo;s redundant to store multiple copies of the same story in the database.</source>
          <target state="translated">解决问题的幼稚方法是要求网站制作者两次发布相同的故事：一次是针对LJWorld.com，另一次是Lawrence.com。但这对于网站制作者而言效率低下，并且在数据库中存储同一故事的多个副本是多余的。</target>
        </trans-unit>
        <trans-unit id="63a9b61ba166b49f916b91caaa26e694bed94aa4" translate="yes" xml:space="preserve">
          <source>The name is a string such as &lt;code&gt;'admin/index.html'&lt;/code&gt;.</source>
          <target state="translated">名称是一个字符串，例如 &lt;code&gt;'admin/index.html'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bffef68592e45f6e79a62f676bb29704f37e4a7b" translate="yes" xml:space="preserve">
          <source>The name of a &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createdatabase.html&quot;&gt;template&lt;/a&gt; (e.g. &lt;code&gt;'template0'&lt;/code&gt;) from which to create the test database.</source>
          <target state="translated">从中创建测试数据库的&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createdatabase.html&quot;&gt;模板&lt;/a&gt;的名称（例如 &lt;code&gt;'template0'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="73db5f782a0e845e926942e03c0db06b329731ce" translate="yes" xml:space="preserve">
          <source>The name of a field or a list of field names in the model, typically &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt;. This specifies the default field(s) to use in your model &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;querysets#django.db.models.query.QuerySet.latest&quot;&gt;&lt;code&gt;latest()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;querysets#django.db.models.query.QuerySet.earliest&quot;&gt;&lt;code&gt;earliest()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">模型中的字段名称或字段名称列表，通常为&lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt;。这指定了要在模型&lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;的&lt;a href=&quot;querysets#django.db.models.query.QuerySet.latest&quot;&gt; &lt;code&gt;latest()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;querysets#django.db.models.query.QuerySet.earliest&quot;&gt; &lt;code&gt;earliest()&lt;/code&gt; &lt;/a&gt;方法中使用的默认字段。</target>
        </trans-unit>
        <trans-unit id="99813423c36c5de6363e829435c1c005826c1ac0" translate="yes" xml:space="preserve">
          <source>The name of a model field. For example:</source>
          <target state="translated">模型字段的名称。例如:</target>
        </trans-unit>
        <trans-unit id="4bef0a75d3131deecd15088ae419c948bbf90d70" translate="yes" xml:space="preserve">
          <source>The name of database to use when running the test suite.</source>
          <target state="translated">运行测试套件时要使用的数据库名称。</target>
        </trans-unit>
        <trans-unit id="821a67938d763e080243d0f1a307785a2ef1fc17" translate="yes" xml:space="preserve">
          <source>The name of each &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instance (e.g. &lt;code&gt;question_text&lt;/code&gt; or &lt;code&gt;pub_date&lt;/code&gt;) is the field&amp;rsquo;s name, in machine-friendly format. You&amp;rsquo;ll use this value in your Python code, and your database will use it as the column name.</source>
          <target state="translated">每个&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;实例的名称（例如， &lt;code&gt;question_text&lt;/code&gt; 或 &lt;code&gt;pub_date&lt;/code&gt; ）是该字段的名称，采用机器友好的格式。您将在Python代码中使用此值，数据库将使用它作为列名。</target>
        </trans-unit>
        <trans-unit id="36a3902c3d36603d4e9d4186d116f22eadc68eb8" translate="yes" xml:space="preserve">
          <source>The name of each header is stylized with title-casing (e.g. &lt;code&gt;User-Agent&lt;/code&gt;) when it&amp;rsquo;s displayed. You can access headers case-insensitively:</source>
          <target state="translated">每个标题的名称在显示时都带有标题框（例如 &lt;code&gt;User-Agent&lt;/code&gt; ）。您可以不区分大小写地访问标头：</target>
        </trans-unit>
        <trans-unit id="541812330d87ae0dea0e63f087e7740f5d38bac6" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; foreign key field on the model. Defaults to &lt;code&gt;content_type&lt;/code&gt;.</source>
          <target state="translated">模型上&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;外键字段的名称。默认为 &lt;code&gt;content_type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="163de951a33070879f29f487b060a87d84befeed" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this field&amp;rsquo;s index, if this field is indexed. The default is the project&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt;&lt;/a&gt; setting, if set, or the &lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt;&lt;code&gt;db_tablespace&lt;/code&gt;&lt;/a&gt; of the model, if any. If the backend doesn&amp;rsquo;t support tablespaces for indexes, this option is ignored.</source>
          <target state="translated">如果此字段已建立索引，则用于该字段的索引的&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;数据库表空间&lt;/a&gt;的名称。缺省值是项目的&lt;a href=&quot;../settings#std:setting-DEFAULT_INDEX_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_INDEX_TABLESPACE&lt;/code&gt; &lt;/a&gt;设置（如果已设置），或者模型的&lt;a href=&quot;options#django.db.models.Options.db_tablespace&quot;&gt; &lt;code&gt;db_tablespace&lt;/code&gt; &lt;/a&gt;（如果有）。如果后端不支持索引的表空间，则忽略此选项。</target>
        </trans-unit>
        <trans-unit id="402103ec15a6bbfbcb151e22bc58a7c81df55268" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this index. For single field indexes, if &lt;code&gt;db_tablespace&lt;/code&gt; isn&amp;rsquo;t provided, the index is created in the &lt;code&gt;db_tablespace&lt;/code&gt; of the field.</source>
          <target state="translated">用于该索引的&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;数据库表空间&lt;/a&gt;的名称。对于单字段索引，如果 &lt;code&gt;db_tablespace&lt;/code&gt; 没有设置，该指数是在创建的 &lt;code&gt;db_tablespace&lt;/code&gt; 领域。</target>
        </trans-unit>
        <trans-unit id="2a8ea4f8d8b85b44e880d9d4b5b69b4fbf35a23b" translate="yes" xml:space="preserve">
          <source>The name of the &lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;database tablespace&lt;/a&gt; to use for this model. The default is the project&amp;rsquo;s &lt;a href=&quot;../settings#std:setting-DEFAULT_TABLESPACE&quot;&gt;&lt;code&gt;DEFAULT_TABLESPACE&lt;/code&gt;&lt;/a&gt; setting, if set. If the backend doesn&amp;rsquo;t support tablespaces, this option is ignored.</source>
          <target state="translated">用于该模型的&lt;a href=&quot;../../topics/db/tablespaces&quot;&gt;数据库表空间&lt;/a&gt;的名称。默认设置是项目的&lt;a href=&quot;../settings#std:setting-DEFAULT_TABLESPACE&quot;&gt; &lt;code&gt;DEFAULT_TABLESPACE&lt;/code&gt; &lt;/a&gt;设置（如果已设置）。如果后端不支持表空间，则忽略此选项。</target>
        </trans-unit>
        <trans-unit id="6b38e2c8875e8a0addbc32359b5bf513eda7259e" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;DateField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt; in the &lt;code&gt;QuerySet&lt;/code&gt;&amp;rsquo;s model that the date-based archive should use to determine the list of objects to display on the page.</source>
          <target state="translated">该名称 &lt;code&gt;DateField&lt;/code&gt; 或 &lt;code&gt;DateTimeField&lt;/code&gt; 字段的 &lt;code&gt;QuerySet&lt;/code&gt; 的模型，该模型基于日期的归档应该用它来确定对象的列表显示在页面上。</target>
        </trans-unit>
        <trans-unit id="531037582b1e0a89a3cd4e790160806c1e292558" translate="yes" xml:space="preserve">
          <source>The name of the GDAL driver used to handle the input file. For &lt;code&gt;GDALRaster&lt;/code&gt;s created from a file, the driver type is detected automatically. The creation of rasters from scratch is an in-memory raster by default (&lt;code&gt;'MEM'&lt;/code&gt;), but can be altered as needed. For instance, use &lt;code&gt;GTiff&lt;/code&gt; for a &lt;code&gt;GeoTiff&lt;/code&gt; file. For a list of file types, see also the &lt;a href=&quot;https://gdal.org/drivers/raster/&quot;&gt;GDAL Raster Formats&lt;/a&gt; list.</source>
          <target state="translated">用于处理输入文件的GDAL驱动程序的名称。对于从文件创建的 &lt;code&gt;GDALRaster&lt;/code&gt; ，将自动检测驱动程序类型。从头开始创建栅格是默认情况下的内存栅格（ &lt;code&gt;'MEM'&lt;/code&gt; ），但可以根据需要进行更改。例如，将 &lt;code&gt;GTiff&lt;/code&gt; 用于 &lt;code&gt;GeoTiff&lt;/code&gt; 文件。有关文件类型的列表，另请参见&lt;a href=&quot;https://gdal.org/drivers/raster/&quot;&gt;GDAL栅格格式&lt;/a&gt;列表。</target>
        </trans-unit>
        <trans-unit id="fd6d34b4a1da491460b73de06a8cb204420bb6f9" translate="yes" xml:space="preserve">
          <source>The name of the GeoIP city data file. Defaults to &lt;code&gt;GeoLite2-City.mmdb&lt;/code&gt;. Setting this keyword overrides the &lt;a href=&quot;#std:setting-GEOIP_CITY&quot;&gt;&lt;code&gt;GEOIP_CITY&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">GeoIP城市数据文件的名称。默认为 &lt;code&gt;GeoLite2-City.mmdb&lt;/code&gt; 。设置此关键字将覆盖&lt;a href=&quot;#std:setting-GEOIP_CITY&quot;&gt; &lt;code&gt;GEOIP_CITY&lt;/code&gt; &lt;/a&gt;设置。</target>
        </trans-unit>
        <trans-unit id="71bdecdd5ebfb290dd390f6482054ddafd78957a" translate="yes" xml:space="preserve">
          <source>The name of the GeoIP country data file. Defaults to &lt;code&gt;GeoLite2-Country.mmdb&lt;/code&gt;. Setting this keyword overrides the &lt;a href=&quot;#std:setting-GEOIP_COUNTRY&quot;&gt;&lt;code&gt;GEOIP_COUNTRY&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">GeoIP国家/地区数据文件的名称。默认为 &lt;code&gt;GeoLite2-Country.mmdb&lt;/code&gt; 。设置此关键字将覆盖&lt;a href=&quot;#std:setting-GEOIP_COUNTRY&quot;&gt; &lt;code&gt;GEOIP_COUNTRY&lt;/code&gt; &lt;/a&gt;设置。</target>
        </trans-unit>
        <trans-unit id="ccbea55b7888687d19090671fa7254a789f06402" translate="yes" xml:space="preserve">
          <source>The name of the URL pattern that matches the URL.</source>
          <target state="translated">与URL匹配的URL模式的名称。</target>
        </trans-unit>
        <trans-unit id="15004a76b9d384968d294c42ac068cb83f63de2a" translate="yes" xml:space="preserve">
          <source>The name of the URL pattern to redirect to. Reversing will be done using the same args and kwargs as are passed in for this view.</source>
          <target state="translated">要重定向到的URL模式的名称。重定向将使用与此视图传递的相同的args和kwargs来完成。</target>
        </trans-unit>
        <trans-unit id="06a14ff5827d2f5bf31a21760de21f63ef318f5b" translate="yes" xml:space="preserve">
          <source>The name of the URLConf keyword argument that contains the primary key. By default, &lt;code&gt;pk_url_kwarg&lt;/code&gt; is &lt;code&gt;'pk'&lt;/code&gt;.</source>
          <target state="translated">包含主键的URLConf关键字参数的名称。默认情况下， &lt;code&gt;pk_url_kwarg&lt;/code&gt; 是 &lt;code&gt;'pk'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="754927d5c9420d8afbde45c1c9504b6d7dd977ff" translate="yes" xml:space="preserve">
          <source>The name of the URLConf keyword argument that contains the slug. By default, &lt;code&gt;slug_url_kwarg&lt;/code&gt; is &lt;code&gt;'slug'&lt;/code&gt;.</source>
          <target state="translated">包含该段的URLConf关键字参数的名称。默认情况下， &lt;code&gt;slug_url_kwarg&lt;/code&gt; 是 &lt;code&gt;'slug'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="04c0334bbc33a2d3f0ebbc2ddb18b2e2caaaabee" translate="yes" xml:space="preserve">
          <source>The name of the application the model is part of. This is taken from the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt;&lt;code&gt;app_label&lt;/code&gt;&lt;/a&gt; attribute of the model, and includes only the &lt;em&gt;last&lt;/em&gt; part of the application&amp;rsquo;s Python import path; &lt;code&gt;django.contrib.contenttypes&lt;/code&gt;, for example, becomes an &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt;&lt;code&gt;app_label&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;contenttypes&lt;/code&gt;.</source>
          <target state="translated">模型所属的应用程序的名称。这是从模型的&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt; &lt;code&gt;app_label&lt;/code&gt; &lt;/a&gt;属性获取的，并且仅包括应用程序Python导入路径的&lt;em&gt;最后&lt;/em&gt;一部分；例如， &lt;code&gt;django.contrib.contenttypes&lt;/code&gt; 成为&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType.app_label&quot;&gt; &lt;code&gt;app_label&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;contenttypes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd9b5efa3f472b01fb89ebca97a7fbff7271ba1c" translate="yes" xml:space="preserve">
          <source>The name of the class to use for starting the test suite. See &lt;a href=&quot;../topics/testing/advanced#other-testing-frameworks&quot;&gt;Using different testing frameworks&lt;/a&gt;.</source>
          <target state="translated">用于启动测试套件的类的名称。请参阅&lt;a href=&quot;../topics/testing/advanced#other-testing-frameworks&quot;&gt;使用不同的测试框架&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="56384b66fea60ec1b78196984b095a03fc903da6" translate="yes" xml:space="preserve">
          <source>The name of the constraint.</source>
          <target state="translated">约束的名称。</target>
        </trans-unit>
        <trans-unit id="3f1cd57a734b57109d10e40c5ba2dfa0d2ec2029" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for sessions. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application).</source>
          <target state="translated">用于会话的cookie的名称。这可以是您想要的任何内容（只要它与应用程序中的其他cookie名称不同）。</target>
        </trans-unit>
        <trans-unit id="2c2454fe0834e666c008fbb3242b0a089904fcf7" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for the CSRF authentication token. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application). See &lt;a href=&quot;csrf&quot;&gt;Cross Site Request Forgery protection&lt;/a&gt;.</source>
          <target state="translated">用于CSRF身份验证令牌的cookie的名称。这可以是您想要的任何内容（只要它与应用程序中的其他cookie名称不同）。请参阅&lt;a href=&quot;csrf&quot;&gt;跨站点请求伪造保护&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab067d40b58c66b558a08c0d7a1bab9bc86750ce" translate="yes" xml:space="preserve">
          <source>The name of the cookie to use for the language cookie. This can be whatever you want (as long as it&amp;rsquo;s different from the other cookie names in your application). See &lt;a href=&quot;../topics/i18n/index&quot;&gt;Internationalization and localization&lt;/a&gt;.</source>
          <target state="translated">用于语言cookie的cookie的名称。这可以是您想要的任何内容（只要它与应用程序中的其他cookie名称不同）。请参阅&lt;a href=&quot;../topics/i18n/index&quot;&gt;国际化和本地化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e2afa5ff44dad3f7138732191e180eca493f5c2" translate="yes" xml:space="preserve">
          <source>The name of the cookie used is set by the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting. (The default name is &lt;code&gt;django_language&lt;/code&gt;.)</source>
          <target state="translated">使用的Cookie的名称由&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;设置设置。（默认名称为 &lt;code&gt;django_language&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="75bf8a6d67711f96e59407ae3331311ffcb65020" translate="yes" xml:space="preserve">
          <source>The name of the currently activated virtual environment is displayed on the command line to help you keep track of which one you are using. Anything you install through &lt;code&gt;pip&lt;/code&gt; while this name is displayed will be installed in that virtual environment, isolated from other environments and system-wide packages.</source>
          <target state="translated">当前激活的虚拟环境的名称显示在命令行上，以帮助您跟踪所使用的虚拟环境。在显示此名称时通过 &lt;code&gt;pip&lt;/code&gt; 安装的所有内容都将安装在该虚拟环境中，与其他环境和系统范围的软件包隔离。</target>
        </trans-unit>
        <trans-unit id="1dfdfbaf4a63e8ebbcc9e7a8622df6e43aaca29c" translate="yes" xml:space="preserve">
          <source>The name of the database column to use for this field. If this isn&amp;rsquo;t given, Django will use the field&amp;rsquo;s name.</source>
          <target state="translated">用于此字段的数据库列的名称。如果未指定，Django将使用该字段的名称。</target>
        </trans-unit>
        <trans-unit id="97d0ed14deca2d0aca3bba2a828e1eaac1812b7a" translate="yes" xml:space="preserve">
          <source>The name of the database table to use for the model:</source>
          <target state="translated">用于模型的数据库表的名称。</target>
        </trans-unit>
        <trans-unit id="7d8966b66925869e03e0d1ea54565dbcf8e8794d" translate="yes" xml:space="preserve">
          <source>The name of the database to use. For SQLite, it&amp;rsquo;s the full path to the database file. When specifying the path, always use forward slashes, even on Windows (e.g. &lt;code&gt;C:/homes/user/mysite/sqlite3.db&lt;/code&gt;).</source>
          <target state="translated">要使用的数据库的名称。对于SQLite，它是数据库文件的完整路径。指定路径时，即使在Windows上也要始终使用正斜杠（例如 &lt;code&gt;C:/homes/user/mysite/sqlite3.db&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="516d215a122250a87d1f8054709549ccc4cc6d88" translate="yes" xml:space="preserve">
          <source>The name of the datafile to use for the TBLSPACE. If not provided, Django will use &lt;code&gt;TBLSPACE + '.dbf'&lt;/code&gt;.</source>
          <target state="translated">用于TBLSPACE的数据文件的名称。如果未提供，Django将使用 &lt;code&gt;TBLSPACE + '.dbf'&lt;/code&gt; . dbf'。</target>
        </trans-unit>
        <trans-unit id="4d8155776d6b1dff31611c64371681f80d747b13" translate="yes" xml:space="preserve">
          <source>The name of the datafile to use for the TBLSPACE_TMP. If not provided, Django will use &lt;code&gt;TBLSPACE_TMP + '.dbf'&lt;/code&gt;.</source>
          <target state="translated">用于TBLSPACE_TMP的数据文件的名称。如果未提供，Django将使用 &lt;code&gt;TBLSPACE_TMP + '.dbf'&lt;/code&gt; . dbf'。</target>
        </trans-unit>
        <trans-unit id="c0fc93c1c94efdc38d552835c495513303bfde56" translate="yes" xml:space="preserve">
          <source>The name of the field on the model that contains the slug. By default, &lt;code&gt;slug_field&lt;/code&gt; is &lt;code&gt;'slug'&lt;/code&gt;.</source>
          <target state="translated">模型中包含该段的字段的名称。默认情况下， &lt;code&gt;slug_field&lt;/code&gt; 是 &lt;code&gt;'slug'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f19427a4ffcc78e34af4812f089e3cd61bdba7d" translate="yes" xml:space="preserve">
          <source>The name of the field on the model.</source>
          <target state="translated">模型上的字段名称。</target>
        </trans-unit>
        <trans-unit id="51daf9f1cf77252d9fe3869bbef8ccf11d71eecc" translate="yes" xml:space="preserve">
          <source>The name of the field on which you&amp;rsquo;d like to filter the relation.</source>
          <target state="translated">您要在其中过滤关系的字段的名称。</target>
        </trans-unit>
        <trans-unit id="9b7ef3aac9281ae093d53c4653571818cb5adf25" translate="yes" xml:space="preserve">
          <source>The name of the field that will be used in the input element&amp;rsquo;s name field. This takes the form prefix into account, if it has been set.</source>
          <target state="translated">输入元素的名称字段中将使用的字段名称。如果已设置，则会考虑形式前缀。</target>
        </trans-unit>
        <trans-unit id="115286c4bd3dac1e66ff95e3e000a885893df909" translate="yes" xml:space="preserve">
          <source>The name of the file including the relative path from &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文件名，包括来自&lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;的相对路径。</target>
        </trans-unit>
        <trans-unit id="e940e12da996dba1c5a77dcb9bab26a0b08caa82" translate="yes" xml:space="preserve">
          <source>The name of the file including the relative path from the root of the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; of the associated &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文件名，包括从相关&lt;a href=&quot;#django.db.models.FileField&quot;&gt; &lt;code&gt;FileField&lt;/code&gt; &lt;/a&gt;的&lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt; &lt;code&gt;Storage&lt;/code&gt; &lt;/a&gt;根目录开始的相对路径。</target>
        </trans-unit>
        <trans-unit id="fcf8ac830b40ec427f998831897f6e458d8d70ba" translate="yes" xml:space="preserve">
          <source>The name of the filter &amp;ndash; a string.</source>
          <target state="translated">过滤器的名称&amp;ndash;字符串。</target>
        </trans-unit>
        <trans-unit id="a17c3bce19075d6cc8afe07b3a0fb6ddc56df9a2" translate="yes" xml:space="preserve">
          <source>The name of the foreign key on the model. In most cases this will be dealt with automatically, but &lt;code&gt;fk_name&lt;/code&gt; must be specified explicitly if there are more than one foreign key to the same parent model.</source>
          <target state="translated">模型上的外键名称。在大多数情况下，这将自动处理，但是如果同一个父模型有多个外键，则必须显式指定 &lt;code&gt;fk_name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5272d82f31e5fd503167bca4c31dace6f8d8d35a" translate="yes" xml:space="preserve">
          <source>The name of the index. If &lt;code&gt;name&lt;/code&gt; isn&amp;rsquo;t provided Django will auto-generate a name. For compatibility with different databases, index names cannot be longer than 30 characters and shouldn&amp;rsquo;t start with a number (0-9) or underscore (_).</source>
          <target state="translated">索引名称。如果没有提供 &lt;code&gt;name&lt;/code&gt; ，Django将自动生成一个名称。为了与不同的数据库兼容，索引名称不能超过30个字符，并且不能以数字（0-9）或下划线（_）开头。</target>
        </trans-unit>
        <trans-unit id="943f67bf2cfa14fc1c956a8a429c303503414952" translate="yes" xml:space="preserve">
          <source>The name of the integer field that represents the ID of the related object. Defaults to &lt;code&gt;object_id&lt;/code&gt;.</source>
          <target state="translated">代表相关对象ID的整数字段的名称。默认为 &lt;code&gt;object_id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b2d68da7681b2cb85527bdf028c461473593353" translate="yes" xml:space="preserve">
          <source>The name of the lookup, used for identifying it on parsing query expressions. It cannot contain the string &lt;code&gt;&quot;__&quot;&lt;/code&gt;.</source>
          <target state="translated">查找的名称，用于在解析查询表达式时对其进行标识。它不能包含字符串 &lt;code&gt;&quot;__&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="befe7c84676f3dceaf4694f7b689936182bd347e" translate="yes" xml:space="preserve">
          <source>The name of the manager to use for the model&amp;rsquo;s &lt;a href=&quot;../../topics/db/managers#django.db.models.Model._default_manager&quot;&gt;&lt;code&gt;_default_manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于模型的&lt;a href=&quot;../../topics/db/managers#django.db.models.Model._default_manager&quot;&gt; &lt;code&gt;_default_manager&lt;/code&gt; &lt;/a&gt;的管理器的名称。</target>
        </trans-unit>
        <trans-unit id="d19869d8eedfb447efa1bfdccad12838895e8641" translate="yes" xml:space="preserve">
          <source>The name of the model class.</source>
          <target state="translated">模型类的名称。</target>
        </trans-unit>
        <trans-unit id="2380daaa2a5a9de1ae9bca34a18cbbe85e366f80" translate="yes" xml:space="preserve">
          <source>The name of the module used for authentication.</source>
          <target state="translated">用于认证的模块名称。</target>
        </trans-unit>
        <trans-unit id="be359ddce77b7393fb923e492c37559bd98994bd" translate="yes" xml:space="preserve">
          <source>The name of the request header used for CSRF authentication.</source>
          <target state="translated">用于CSRF认证的请求头的名称。</target>
        </trans-unit>
        <trans-unit id="e341c5d335b81eb57e7ffc160a61ac3e1291b516" translate="yes" xml:space="preserve">
          <source>The name of the setting.</source>
          <target state="translated">环境的名称。</target>
        </trans-unit>
        <trans-unit id="a6d4ed4a83958cb774c3ac1373e389717199b189" translate="yes" xml:space="preserve">
          <source>The name of the sitemap file is not important, but the location is. Search engines will only index links in your sitemap for the current URL level and below. For instance, if &lt;code&gt;sitemap.xml&lt;/code&gt; lives in your root directory, it may reference any URL in your site. However, if your sitemap lives at &lt;code&gt;/content/sitemap.xml&lt;/code&gt;, it may only reference URLs that begin with &lt;code&gt;/content/&lt;/code&gt;.</source>
          <target state="translated">站点地图文件的名称并不重要，但是位置很重要。搜索引擎只会为您的站点地图中当前URL级别及以下的链接建立索引。例如，如果 &lt;code&gt;sitemap.xml&lt;/code&gt; 位于您的根目录中，则它可以引用您网站中的任何URL。但是，如果您的站点地图位于 &lt;code&gt;/content/sitemap.xml&lt;/code&gt; ，则它只能引用以 &lt;code&gt;/content/&lt;/code&gt; 开头的URL 。</target>
        </trans-unit>
        <trans-unit id="d47e18fed83e0647ac5466b931bee36494e757ba" translate="yes" xml:space="preserve">
          <source>The name of the source which is equivalent to the input file path or the name provided upon instantiation.</source>
          <target state="translated">源的名称,相当于输入文件路径或实例化时提供的名称。</target>
        </trans-unit>
        <trans-unit id="3e9dbd9e9fbe18372a96d41f916e0d75153d57c8" translate="yes" xml:space="preserve">
          <source>The name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of: the table for the model defining the relationship and the name of the field itself.</source>
          <target state="translated">要创建的用于存储多对多数据的表的名称。如果没有提供这个表名,Django将根据以下两个表的名称来假定一个默认的表名:定义关系的模型的表和字段本身的名称。</target>
        </trans-unit>
        <trans-unit id="ea6d6389de793166a085f00581dd68187aec6087" translate="yes" xml:space="preserve">
          <source>The name of the table, &lt;code&gt;myapp_person&lt;/code&gt;, is automatically derived from some model metadata but can be overridden. See &lt;a href=&quot;../../ref/models/options#table-names&quot;&gt;Table names&lt;/a&gt; for more details.</source>
          <target state="translated">表的名称 &lt;code&gt;myapp_person&lt;/code&gt; 是自动从某些模型元数据派生的，但可以覆盖。有关更多详细信息，请&lt;a href=&quot;../../ref/models/options#table-names&quot;&gt;参见表名称&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64458b1dc8e18b2d121802fc760359372e20bf02" translate="yes" xml:space="preserve">
          <source>The name of the tablespace that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER&lt;/code&gt;.</source>
          <target state="translated">运行测试时将使用的表空间的名称。如果未提供，Django将使用 &lt;code&gt;'test_' + USER&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd3f139ecacad629770ed1798918c7edc8d69e3e" translate="yes" xml:space="preserve">
          <source>The name of the template or templates that are used for that view.</source>
          <target state="translated">用于该视图的一个或多个模板的名称。</target>
        </trans-unit>
        <trans-unit id="b189c9f24c53dc250c421f02c83ab4c15811cdf5" translate="yes" xml:space="preserve">
          <source>The name of the template tag &amp;ndash; a string. If this is left out, the name of the compilation function will be used.</source>
          <target state="translated">模板标签的名称&amp;ndash;字符串。如果不这样做，将使用编译函数的名称。</target>
        </trans-unit>
        <trans-unit id="9c839d8407c27a86056fa592e95135425afae6d1" translate="yes" xml:space="preserve">
          <source>The name of the template to be rendered. Accepts a backend-dependent template object (such as those returned by &lt;a href=&quot;../topics/templates#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;), the name of a template, or a list of template names.</source>
          <target state="translated">要渲染的模板的名称。接受依赖于后端的模板对象（例如&lt;a href=&quot;../topics/templates#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;返回的对象），模板的名称或模板名称的列表。</target>
        </trans-unit>
        <trans-unit id="db092b96cd10dd009a9b2068643f0e4bbf124a87" translate="yes" xml:space="preserve">
          <source>The name of the template to load and render. If it&amp;rsquo;s a list of template names, Django uses &lt;a href=&quot;#django.template.loader.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt; to find the template.</source>
          <target state="translated">要加载和呈现的模板的名称。如果它是模板名称的列表，则Django使用&lt;a href=&quot;#django.template.loader.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;而不是&lt;a href=&quot;#django.template.loader.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;来查找模板。</target>
        </trans-unit>
        <trans-unit id="737c0a1a6064c300d765b99ff02207d02b841895" translate="yes" xml:space="preserve">
          <source>The name of the temporary tablespace that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER + '_temp'&lt;/code&gt;.</source>
          <target state="translated">运行测试时将使用的临时表空间的名称。如果未提供，Django将使用 &lt;code&gt;'test_' + USER + '_temp'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdd22a08dce1e2aa1f23da79907b34dfd4a75476" translate="yes" xml:space="preserve">
          <source>The name of the uploaded file (e.g. &lt;code&gt;my_file.txt&lt;/code&gt;).</source>
          <target state="translated">上传文件的名称（例如， &lt;code&gt;my_file.txt&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="692f0414be004838f86345bcc951e3ccca921a62" translate="yes" xml:space="preserve">
          <source>The name of the view that matches the URL, including the namespace if there is one.</source>
          <target state="translated">匹配URL的视图名称,包括命名空间(如果有)。</target>
        </trans-unit>
        <trans-unit id="c2e349d6af9c3a29d56bc36e87d927a3c9e454d0" translate="yes" xml:space="preserve">
          <source>The name of this field in the form:</source>
          <target state="translated">表格中该字段的名称。</target>
        </trans-unit>
        <trans-unit id="489e5dd5c95e55c141e772c0467fe6b88042386c" translate="yes" xml:space="preserve">
          <source>The name of this lookup, used to identify it on parsing query expressions. It cannot contain the string &lt;code&gt;&quot;__&quot;&lt;/code&gt;.</source>
          <target state="translated">该查询的名称，用于在解析查询表达式时对其进行标识。它不能包含字符串 &lt;code&gt;&quot;__&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2e6661c9c866874e38ba2ad4ad7106f9846c235f" translate="yes" xml:space="preserve">
          <source>The name or description of the band, if any.</source>
          <target state="translated">(a)乐队的名称或说明(如有);</target>
        </trans-unit>
        <trans-unit id="a5c0b9bd80f9f5122dab4271eb7475c4a6fe368d" translate="yes" xml:space="preserve">
          <source>The name that will be used by default for the relation from a related object back to this one. The default is &lt;code&gt;&amp;lt;model_name&amp;gt;_set&lt;/code&gt;.</source>
          <target state="translated">默认情况下，将从相关对象到该对象的关系使用的名称。默认值为 &lt;code&gt;&amp;lt;model_name&amp;gt;_set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d604c0cca246c9cb2d010f998bd1dfcef585f81" translate="yes" xml:space="preserve">
          <source>The name that will be used in the widget&amp;rsquo;s HTML &lt;code&gt;name&lt;/code&gt; attribute. It takes the form &lt;a href=&quot;#django.forms.Form.prefix&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/a&gt; into account.</source>
          <target state="translated">小部件的HTML &lt;code&gt;name&lt;/code&gt; 属性中将使用的名称。它考虑了形式&lt;a href=&quot;#django.forms.Form.prefix&quot;&gt; &lt;code&gt;prefix&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b7f9f93b9b008117bc8f38248c11bc6566bcfd0e" translate="yes" xml:space="preserve">
          <source>The name to use for the relation from the related object back to this one. It&amp;rsquo;s also the default value for &lt;a href=&quot;#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt; (the name to use for the reverse filter name from the target model). See the &lt;a href=&quot;../../topics/db/queries#backwards-related-objects&quot;&gt;related objects documentation&lt;/a&gt; for a full explanation and example. Note that you must set this value when defining relations on &lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;abstract models&lt;/a&gt;; and when you do so &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;some special syntax&lt;/a&gt; is available.</source>
          <target state="translated">用于从相关对象到此对象的关系的名称。它也是&lt;a href=&quot;#django.db.models.ForeignKey.related_query_name&quot;&gt; &lt;code&gt;related_query_name&lt;/code&gt; &lt;/a&gt;的默认值（用于目标模型中反向过滤器名称的名称）。有关完整的解释和示例，请参见&lt;a href=&quot;../../topics/db/queries#backwards-related-objects&quot;&gt;相关的对象文档&lt;/a&gt;。请注意，在&lt;a href=&quot;../../topics/db/models#abstract-base-classes&quot;&gt;抽象模型&lt;/a&gt;上定义关系时必须设置此值；并且当您这样做时，可以使用&lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;一些特殊的语法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="76f23af4881ae86e69f080255f6058aa873af330" translate="yes" xml:space="preserve">
          <source>The name to use for the reverse filter name from the target model. It defaults to the value of &lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;options#django.db.models.Options.default_related_name&quot;&gt;&lt;code&gt;default_related_name&lt;/code&gt;&lt;/a&gt; if set, otherwise it defaults to the name of the model:</source>
          <target state="translated">用于目标模型的反向过滤器名称的名称。如果设置，则默认为&lt;a href=&quot;#django.db.models.ForeignKey.related_name&quot;&gt; &lt;code&gt;related_name&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;options#django.db.models.Options.default_related_name&quot;&gt; &lt;code&gt;default_related_name&lt;/code&gt; &lt;/a&gt;的值，否则默认为模型的名称：</target>
        </trans-unit>
        <trans-unit id="4d24e9bc1d06786ffe5eaadf43320d55583ce49c" translate="yes" xml:space="preserve">
          <source>The names of the &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-opclass.html&quot;&gt;PostgreSQL operator classes&lt;/a&gt; to use for this index. If you require a custom operator class, you must provide one for each field in the index.</source>
          <target state="translated">用于此索引的&lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-opclass.html&quot;&gt;PostgreSQL运算符类&lt;/a&gt;的名称。如果需要自定义运算符类，则必须为索引中的每个字段提供一个。</target>
        </trans-unit>
        <trans-unit id="8da5fbd9581cdc66ce8a3dcff91495d1cec3201f" translate="yes" xml:space="preserve">
          <source>The namespace package actually has only a single location (i.e. is not spread across more than one directory.)</source>
          <target state="translated">命名空间包实际上只有一个位置(即不分布在多个目录中)。</target>
        </trans-unit>
        <trans-unit id="d936c1aaff3b7c9c426c2ca0e9aa56c63b373007" translate="yes" xml:space="preserve">
          <source>The natural key for a &lt;code&gt;Book&lt;/code&gt; is a combination of its name and its author. This means that &lt;code&gt;Person&lt;/code&gt; must be serialized before &lt;code&gt;Book&lt;/code&gt;. To define this dependency, we add one extra line:</source>
          <target state="translated">一 &lt;code&gt;Book&lt;/code&gt; 的自然键是其名称和作者的组合。这意味着 &lt;code&gt;Person&lt;/code&gt; 必须在 &lt;code&gt;Book&lt;/code&gt; 之前序列化。为了定义这种依赖性，我们增加了一行：</target>
        </trans-unit>
        <trans-unit id="2ec556005d5c4c0ea67142f569c1ad37bf2f6b4b" translate="yes" xml:space="preserve">
          <source>The need for the &lt;code&gt;as_data()&lt;/code&gt; method is due to backwards compatibility. Previously &lt;code&gt;ValidationError&lt;/code&gt; instances were lost as soon as their &lt;strong&gt;rendered&lt;/strong&gt; error messages were added to the &lt;code&gt;Form.errors&lt;/code&gt; dictionary. Ideally &lt;code&gt;Form.errors&lt;/code&gt; would have stored &lt;code&gt;ValidationError&lt;/code&gt; instances and methods with an &lt;code&gt;as_&lt;/code&gt; prefix could render them, but it had to be done the other way around in order not to break code that expects rendered error messages in &lt;code&gt;Form.errors&lt;/code&gt;.</source>
          <target state="translated">之所以需要 &lt;code&gt;as_data()&lt;/code&gt; 方法是因为向后兼容。一旦将它们的&lt;strong&gt;呈现&lt;/strong&gt;错误消息添加到 &lt;code&gt;Form.errors&lt;/code&gt; 字典中，以前的 &lt;code&gt;ValidationError&lt;/code&gt; 实例就会丢失。理想情况下， &lt;code&gt;Form.errors&lt;/code&gt; 应该存储了 &lt;code&gt;ValidationError&lt;/code&gt; 实例，并且带有 &lt;code&gt;as_&lt;/code&gt; 前缀的方法可以呈现它们，但必须以另一种方式进行操作，以免破坏 &lt;code&gt;Form.errors&lt;/code&gt; 中期望呈现错误消息的代码。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6bf2ab30425084e7ceacc50c0aca0b93bfbe61ba" translate="yes" xml:space="preserve">
          <source>The negative sign in &lt;code&gt;'-expire_date'&lt;/code&gt; means to sort &lt;code&gt;expire_date&lt;/code&gt; in &lt;em&gt;descending&lt;/em&gt; order. Since &lt;code&gt;latest()&lt;/code&gt; gets the last result, the &lt;code&gt;Entry&lt;/code&gt; with the earliest &lt;code&gt;expire_date&lt;/code&gt; is selected.</source>
          <target state="translated">在负号 &lt;code&gt;'-expire_date'&lt;/code&gt; 的手段来排序 &lt;code&gt;expire_date&lt;/code&gt; 在&lt;em&gt;递减&lt;/em&gt;顺序。由于 &lt;code&gt;latest()&lt;/code&gt; 获得最后结果，因此选择了最早 &lt;code&gt;expire_date&lt;/code&gt; 的 &lt;code&gt;Entry&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af6a1992a04eb2938a5d3e68814007a9b6fcc00a" translate="yes" xml:space="preserve">
          <source>The new concept here: The view raises the &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; exception if a question with the requested ID doesn&amp;rsquo;t exist.</source>
          <target state="translated">此处的新概念：如果不存在具有所请求ID的问题，则视图引发&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;异常。</target>
        </trans-unit>
        <trans-unit id="a7b5c7266de3c578046f6d8c2709fa4aaabb30f2" translate="yes" xml:space="preserve">
          <source>The new custom command can be called using &lt;code&gt;python manage.py closepoll
&amp;lt;poll_ids&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">可以使用 &lt;code&gt;python manage.py closepoll &amp;lt;poll_ids&amp;gt;&lt;/code&gt; 调用新的自定义命令。</target>
        </trans-unit>
        <trans-unit id="4d9d733433b3c01c8b298774186e815b2898aeaa" translate="yes" xml:space="preserve">
          <source>The new ordering of tests may reveal unexpected dependencies on test case ordering. This is the case with doctests that relied on state left in the database by a given &lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; test, they must be updated to be able to run independently.</source>
          <target state="translated">测试的新顺序可能显示出对测试用例顺序的意外依赖性。doctest就是这种情况，它依赖于给定&lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;测试在数据库中留下的状态，因此必须对其进行更新才能独立运行。</target>
        </trans-unit>
        <trans-unit id="e8cd245d7c1883dc95dcd9278028e5ae1db797c0" translate="yes" xml:space="preserve">
          <source>The newer &lt;a href=&quot;#django.db.models.Options.indexes&quot;&gt;&lt;code&gt;indexes&lt;/code&gt;&lt;/a&gt; option provides more functionality than &lt;code&gt;index_together&lt;/code&gt;. &lt;code&gt;index_together&lt;/code&gt; may be deprecated in the future.</source>
          <target state="translated">较新的&lt;a href=&quot;#django.db.models.Options.indexes&quot;&gt; &lt;code&gt;indexes&lt;/code&gt; &lt;/a&gt;选项比 &lt;code&gt;index_together&lt;/code&gt; 提供更多功能。 &lt;code&gt;index_together&lt;/code&gt; 将来可能会被弃用。</target>
        </trans-unit>
        <trans-unit id="99e0f68f9a465dd5381f9e22fd48ae61826bd070" translate="yes" xml:space="preserve">
          <source>The next example is more advanced; it does a subquery to give each resulting &lt;code&gt;Blog&lt;/code&gt; object an &lt;code&gt;entry_count&lt;/code&gt; attribute, an integer count of associated &lt;code&gt;Entry&lt;/code&gt; objects:</source>
          <target state="translated">下一个示例更高级。它会执行一个子查询，为每个生成的 &lt;code&gt;Blog&lt;/code&gt; 对象提供一个 &lt;code&gt;entry_count&lt;/code&gt; 属性，该属性是关联的 &lt;code&gt;Entry&lt;/code&gt; 对象的整数：</target>
        </trans-unit>
        <trans-unit id="ce6b33d35f1566e3a74e19d2aea4cd6acefd7b28" translate="yes" xml:space="preserve">
          <source>The next example shows the usage of statistical aggregate functions. The underlying math will be not described (you can read about this, for example, at &lt;a href=&quot;https://en.wikipedia.org/wiki/Regression_analysis&quot;&gt;wikipedia&lt;/a&gt;):</source>
          <target state="translated">下一个示例显示了统计聚合函数的用法。不会描述基础数学（例如，您可以在&lt;a href=&quot;https://en.wikipedia.org/wiki/Regression_analysis&quot;&gt;Wikipedia上&lt;/a&gt;阅读此内容）：</target>
        </trans-unit>
        <trans-unit id="e14c54221552102a85ce433336891d5493a9c4c3" translate="yes" xml:space="preserve">
          <source>The next few sections describe a couple of common ways advanced users may want to modify this setting.</source>
          <target state="translated">接下来的几个章节描述了高级用户可能想要修改此设置的几种常见方法。</target>
        </trans-unit>
        <trans-unit id="828efe97e4e160671bd8de2059dad8573dff24d3" translate="yes" xml:space="preserve">
          <source>The next step is to point the root URLconf at the &lt;code&gt;polls.urls&lt;/code&gt; module. In &lt;code&gt;mysite/urls.py&lt;/code&gt;, add an import for &lt;code&gt;django.urls.include&lt;/code&gt; and insert an &lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;urlpatterns&lt;/code&gt; list, so you have:</source>
          <target state="translated">下一步是将根URLconf指向 &lt;code&gt;polls.urls&lt;/code&gt; 模块。在 &lt;code&gt;mysite/urls.py&lt;/code&gt; 中，为 &lt;code&gt;django.urls.include&lt;/code&gt; 添加一个导入，并在 &lt;code&gt;urlpatterns&lt;/code&gt; 列表中插入一个&lt;a href=&quot;../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;，因此您具有：</target>
        </trans-unit>
        <trans-unit id="55407ce42ace76171ba4356c8a83e24c70d2b092" translate="yes" xml:space="preserve">
          <source>The next steps are for you to &lt;a href=&quot;https://www.djangoproject.com/download/&quot;&gt;download Django&lt;/a&gt;, read &lt;a href=&quot;tutorial01&quot;&gt;the tutorial&lt;/a&gt; and join &lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;the community&lt;/a&gt;. Thanks for your interest!</source>
          <target state="translated">下一步是让您&lt;a href=&quot;https://www.djangoproject.com/download/&quot;&gt;下载Django&lt;/a&gt;，阅读&lt;a href=&quot;tutorial01&quot;&gt;教程&lt;/a&gt;并加入&lt;a href=&quot;https://www.djangoproject.com/community/&quot;&gt;社区&lt;/a&gt;。感谢您的关注！</target>
        </trans-unit>
        <trans-unit id="b331b66099d3bb9b909d08656c6ca6ec0260e35f" translate="yes" xml:space="preserve">
          <source>The notation to use a &lt;code&gt;Transform&lt;/code&gt; in a lookup expression is &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transformation&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;date__year&lt;/code&gt;).</source>
          <target state="translated">在查找表达式中使用 &lt;code&gt;Transform&lt;/code&gt; 的表示法是 &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transformation&amp;gt;&lt;/code&gt; （例如 &lt;code&gt;date__year&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3fc93828bd60e8b69b385a482cfa174bbd405403" translate="yes" xml:space="preserve">
          <source>The notation to use a lookup in an expression is &lt;code&gt;&amp;lt;lhs&amp;gt;__&amp;lt;lookup_name&amp;gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">在表达式中使用查找的表示法是 &lt;code&gt;&amp;lt;lhs&amp;gt;__&amp;lt;lookup_name&amp;gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13682a7aacefbe7b282e2b6bf69b24d557af9e50" translate="yes" xml:space="preserve">
          <source>The number of decimal places to store with the number.</source>
          <target state="translated">与数字一起存储的小数位数。</target>
        </trans-unit>
        <trans-unit id="00c59dfddf64ff7f7efb2a30b5234d67dba743c6" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0-indexed)</source>
          <target state="translated">循环结束后的迭代次数(0-indexed)。</target>
        </trans-unit>
        <trans-unit id="66c416e66d2fe43d99293bca74ef6b14e3036e51" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1-indexed)</source>
          <target state="translated">循环结束后的迭代次数(1-indexed)</target>
        </trans-unit>
        <trans-unit id="4fe342071d44857b960cd507f4be351d570cc91e" translate="yes" xml:space="preserve">
          <source>The number of request parameters is correlated to the amount of time needed to process the request and populate the GET and POST dictionaries. Large requests could be used as a denial-of-service attack vector if left unchecked. Since web servers don&amp;rsquo;t typically perform deep request inspection, it&amp;rsquo;s not possible to perform a similar check at that level.</source>
          <target state="translated">请求参数的数量与处理请求并填充GET和POST词典所需的时间量相关。如果不检查，大请求可以用作拒绝服务攻击向量。由于Web服务器通常不执行深度请求检查，因此无法在该级别执行类似的检查。</target>
        </trans-unit>
        <trans-unit id="546d5c180752491cf696f9bc101df2930192df31" translate="yes" xml:space="preserve">
          <source>The number of seconds before a cache entry is considered stale. If the value of this settings is &lt;code&gt;None&lt;/code&gt;, cache entries will not expire.</source>
          <target state="translated">缓存条目被视为过时之前的秒数。如果此设置的值为 &lt;code&gt;None&lt;/code&gt; ，则缓存条目将不会过期。</target>
        </trans-unit>
        <trans-unit id="d1457f2a74a27329cebb1009ea40b2e349137787" translate="yes" xml:space="preserve">
          <source>The number of subtle interactions between &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt;&lt;code&gt;FormMixin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; is already testing our ability to manage things. It&amp;rsquo;s unlikely you&amp;rsquo;d want to write this kind of class yourself.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.FormMixin&quot;&gt; &lt;code&gt;FormMixin&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;之间的微妙交互次数已经在测试我们管理事物的能力。您不太可能希望自己编写此类。</target>
        </trans-unit>
        <trans-unit id="aee54169fbe489f4be8a2932eda638f26f68a734" translate="yes" xml:space="preserve">
          <source>The numeric mode (i.e. &lt;code&gt;0o644&lt;/code&gt;) to set newly uploaded files to. For more information about what these modes mean, see the documentation for &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.chmod&quot;&gt;&lt;code&gt;os.chmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">数字模式（即 &lt;code&gt;0o644&lt;/code&gt; ），用于将新上传的文件设置为该模式。有关这些模式的含义的更多信息，请参见&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.chmod&quot;&gt; &lt;code&gt;os.chmod()&lt;/code&gt; &lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="b7ad979907d146b501a20d10b822273d1806b93c" translate="yes" xml:space="preserve">
          <source>The numeric mode to apply to directories created in the process of uploading files.</source>
          <target state="translated">适用于上传文件过程中创建的目录的数字模式。</target>
        </trans-unit>
        <trans-unit id="22b988dfd0f6161a0a5adc49ca1bcc5714bc4ab5" translate="yes" xml:space="preserve">
          <source>The object &lt;code&gt;django.db.connection&lt;/code&gt; represents the default database connection. To use the database connection, call &lt;code&gt;connection.cursor()&lt;/code&gt; to get a cursor object. Then, call &lt;code&gt;cursor.execute(sql, [params])&lt;/code&gt; to execute the SQL and &lt;code&gt;cursor.fetchone()&lt;/code&gt; or &lt;code&gt;cursor.fetchall()&lt;/code&gt; to return the resulting rows.</source>
          <target state="translated">对象 &lt;code&gt;django.db.connection&lt;/code&gt; 代表默认的数据库连接。要使用数据库连接，请调用 &lt;code&gt;connection.cursor()&lt;/code&gt; 以获取一个游标对象。然后，调用 &lt;code&gt;cursor.execute(sql, [params])&lt;/code&gt; 执行SQL，并 &lt;code&gt;cursor.fetchone()&lt;/code&gt; 或 &lt;code&gt;cursor.fetchall()&lt;/code&gt; 返回结果行。</target>
        </trans-unit>
        <trans-unit id="e00bf3a0502c4dc9197752dccc5c2a67f4930049" translate="yes" xml:space="preserve">
          <source>The object`s &lt;code&gt;repr()&lt;/code&gt; after the modification.</source>
          <target state="translated">修改后对象的 &lt;code&gt;repr()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f9892589134caf81b0b3fc3e3efbcd0baaac0a5" translate="yes" xml:space="preserve">
          <source>The objects in the changelist page can be filtered with lookups from the URL&amp;rsquo;s query string. This is how &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt; works, for example. The lookups are similar to what&amp;rsquo;s used in &lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;QuerySet.filter()&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;user__email=user@example.com&lt;/code&gt;). Since the lookups in the query string can be manipulated by the user, they must be sanitized to prevent unauthorized data exposure.</source>
          <target state="translated">可以使用URL的查询字符串中的查找来过滤变更列表页面中的对象。例如，这就是&lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;list_filter&lt;/code&gt; 的&lt;/a&gt;工作方式。查找类似于&lt;a href=&quot;../../models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;QuerySet.filter()&lt;/code&gt; 中&lt;/a&gt;使用的查找（例如， &lt;code&gt;user__email=user@example.com&lt;/code&gt; ）。由于用户可以操纵查询字符串中的查询，因此必须对它们进行清理以防止未经授权的数据泄露。</target>
        </trans-unit>
        <trans-unit id="891fc8ec3b599241bbcff2dce045076385cc7d5b" translate="yes" xml:space="preserve">
          <source>The one gotcha here is that you should be careful not to specify a primary-key value explicitly when saving new objects, if you cannot guarantee the primary-key value is unused. For more on this nuance, see &lt;a href=&quot;#explicitly-specifying-auto-primary-key-values&quot;&gt;Explicitly specifying auto-primary-key values&lt;/a&gt; above and &lt;a href=&quot;#forcing-an-insert-or-update&quot;&gt;Forcing an INSERT or UPDATE&lt;/a&gt; below.</source>
          <target state="translated">这里的一个陷阱是，如果不能保证未使用主键值，则在保存新对象时应注意不要显式指定主键值。有关此细微差别的更多信息，请参见上方&lt;a href=&quot;#explicitly-specifying-auto-primary-key-values&quot;&gt;明确指定自动主键值&lt;/a&gt;和下方&lt;a href=&quot;#forcing-an-insert-or-update&quot;&gt;强制执行INSERT或UPDATE&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="757c851014b010cea5120b811277066509e78ba7" translate="yes" xml:space="preserve">
          <source>The one potential gotcha is that &lt;a href=&quot;#django.db.models.FilePathField.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; applies to the base filename, not the full path. So, this example:</source>
          <target state="translated">一个潜在的难题是，&lt;a href=&quot;#django.db.models.FilePathField.match&quot;&gt; &lt;code&gt;match&lt;/code&gt; &lt;/a&gt;适用于基本文件名，而不是完整路径。因此，此示例：</target>
        </trans-unit>
        <trans-unit id="e8c61e286aa56beddb1fc2ccb35f397cdd75e322" translate="yes" xml:space="preserve">
          <source>The only caveat is that prior to PostgreSQL 11, adding columns with default values causes a full rewrite of the table, for a time proportional to its size. For this reason, it&amp;rsquo;s recommended you always create new columns with &lt;code&gt;null=True&lt;/code&gt;, as this way they will be added immediately.</source>
          <target state="translated">唯一需要注意的是，在PostgreSQL 11之前，添加具有默认值的列会导致表的完全重写，其时间与表的大小成比例。因此，建议您始终使用 &lt;code&gt;null=True&lt;/code&gt; 创建新列，因为这样将立即添加它们。</target>
        </trans-unit>
        <trans-unit id="c9c8b224a20d235aa17fd7c10c62c76504526c9a" translate="yes" xml:space="preserve">
          <source>The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models.</source>
          <target state="translated">您唯一要做的决定是,您是否想让父模型成为自己的模型(有自己的数据库表),或者父模型只是普通信息的持有者,这些信息只有通过子模型才能看到。</target>
        </trans-unit>
        <trans-unit id="2e679d2a9d1e0da3e526b09c8d435d169042d55c" translate="yes" xml:space="preserve">
          <source>The only difference between this example and the previous example is that this one uses template loading instead of the CSV module. The rest of the code &amp;ndash; such as the &lt;code&gt;content_type='text/csv'&lt;/code&gt; &amp;ndash; is the same.</source>
          <target state="translated">此示例与上一个示例之间的唯一区别是，此示例使用模板加载而不是CSV模块。其余代码（例如 &lt;code&gt;content_type='text/csv'&lt;/code&gt; ）相同。</target>
        </trans-unit>
        <trans-unit id="ccb259ef09ebc29f938af14253599fa5fc48577f" translate="yes" xml:space="preserve">
          <source>The only exceptions are variables that are already marked as &amp;ldquo;safe&amp;rdquo; from escaping, either by the code that populated the variable, or because it has had the &lt;a href=&quot;#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filters applied.</source>
          <target state="translated">唯一的例外是变量已被填充变量的代码或已应用&lt;a href=&quot;#std:templatefilter-safe&quot;&gt; &lt;code&gt;safe&lt;/code&gt; &lt;/a&gt;过滤器或&lt;a href=&quot;#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt;过滤器的代码标记为逃避转义为&amp;ldquo;安全&amp;rdquo; 。</target>
        </trans-unit>
        <trans-unit id="e121fdae28d92727bd6e8181e283ab3198bfde73" translate="yes" xml:space="preserve">
          <source>The only exceptions that are not visible to the test client are &lt;a href=&quot;../http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt;. Django catches these exceptions internally and converts them into the appropriate HTTP response codes. In these cases, you can check &lt;code&gt;response.status_code&lt;/code&gt; in your test.</source>
          <target state="translated">测试客户端不可见的唯一异常是&lt;a href=&quot;../http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.PermissionDenied&quot;&gt; &lt;code&gt;PermissionDenied&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#SystemExit&quot;&gt; &lt;code&gt;SystemExit&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;。Django在内部捕获这些异常并将其转换为适当的HTTP响应代码。在这些情况下，您可以在测试中检查 &lt;code&gt;response.status_code&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6ca94ec80dbdad447c4b8efa0935510294065af" translate="yes" xml:space="preserve">
          <source>The only new concept here is the &lt;code&gt;self.nodelist.render(context)&lt;/code&gt; in &lt;code&gt;UpperNode.render()&lt;/code&gt;.</source>
          <target state="translated">这里唯一的新概念是 &lt;code&gt;self.nodelist.render(context)&lt;/code&gt; 中的self.nodelist.render（context &lt;code&gt;UpperNode.render()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c109e1873867f26e06020a7b1a915ae80add5d2a" translate="yes" xml:space="preserve">
          <source>The only parameter that is set differently from the source raster is the name. The default value of the raster name is the name of the source raster appended with &lt;code&gt;'_copy' + source_driver_name&lt;/code&gt;. For file-based rasters it is recommended to provide the file path of the target raster.</source>
          <target state="translated">设置与源栅格不同的唯一参数是名称。栅格名称的默认值是源栅格的名称， &lt;code&gt;'_copy' + source_driver_name&lt;/code&gt; 。对于基于文件的栅格，建议提供目标栅格的文件路径。</target>
        </trans-unit>
        <trans-unit id="3eb902536903cadc270686a49f3f13cd76621106" translate="yes" xml:space="preserve">
          <source>The only place you should assign to settings is in a settings file.</source>
          <target state="translated">你应该分配到设置的唯一地方是在设置文件中。</target>
        </trans-unit>
        <trans-unit id="082d8cd7773874714658bc00d84f5caf59366dcc" translate="yes" xml:space="preserve">
          <source>The only thing this does is create those extra permissions when you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt; (the function that creates permissions is connected to the &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; signal). Your code is in charge of checking the value of these permissions when a user is trying to access the functionality provided by the application (changing the status of tasks or closing tasks.) Continuing the above example, the following checks if a user may close tasks:</source>
          <target state="translated">唯一要做的就是在运行&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;manage.py migrate&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt; &lt;code&gt;post_migrate&lt;/code&gt; &lt;/a&gt;时创建那些额外的权限（创建权限的函数连接到post_migrate信号）。当用户试图访问应用程序提供的功能（更改任务状态或关闭任务）时，您的代码将负责检查这些权限的值。继续上面的示例，以下内容检查用户是否可以关闭任务：</target>
        </trans-unit>
        <trans-unit id="994e6a000e80d66476b990aec150bb90898dd1a3" translate="yes" xml:space="preserve">
          <source>The operations are the key; they are a set of declarative instructions which tell Django what schema changes need to be made. Django scans them and builds an in-memory representation of all of the schema changes to all apps, and uses this to generate the SQL which makes the schema changes.</source>
          <target state="translated">操作是关键,它们是一组声明性的指令,告诉Django需要做哪些模式的改变。Django对它们进行扫描,并在内存中建立一个对所有应用的schema变化的表示,并使用它来生成SQL来进行schema变化。</target>
        </trans-unit>
        <trans-unit id="59b2d4ff04a59fad81f4bdd78bf742f2968f4426" translate="yes" xml:space="preserve">
          <source>The option (&lt;code&gt;delete&lt;/code&gt; in our example) is available in the options dict parameter of the handle method. See the &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; Python documentation for more about &lt;code&gt;add_argument&lt;/code&gt; usage.</source>
          <target state="translated">选项（在我们的示例中为 &lt;code&gt;delete&lt;/code&gt; ）在handle方法的dict参数中可用。有关 &lt;code&gt;add_argument&lt;/code&gt; 用法的更多信息，请参见&lt;a href=&quot;https://docs.python.org/3/library/argparse.html#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt; Python文档。</target>
        </trans-unit>
        <trans-unit id="46085a876254f9e93b8e417a3b34efa0b18250c9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;elidable&lt;/code&gt; argument determines whether or not the operation will be removed (elided) when &lt;a href=&quot;../topics/migrations#migration-squashing&quot;&gt;squashing migrations&lt;/a&gt;.</source>
          <target state="translated">可选的 &lt;code&gt;elidable&lt;/code&gt; 参数确定&lt;a href=&quot;../topics/migrations#migration-squashing&quot;&gt;挤压迁移&lt;/a&gt;时是否将操作删除（消除）。</target>
        </trans-unit>
        <trans-unit id="ae878dfc21edd876de0c4de4b1e1d4f302abd27c" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;encoding&lt;/code&gt; parameter allows you to specify a non-standard encoding of the strings in the source. This is typically useful when you obtain &lt;code&gt;DjangoUnicodeDecodeError&lt;/code&gt; exceptions while reading field values.</source>
          <target state="translated">可选的 &lt;code&gt;encoding&lt;/code&gt; 参数允许您指定源中字符串的非标准编码。当您在读取字段值时获取 &lt;code&gt;DjangoUnicodeDecodeError&lt;/code&gt; 异常时，这通常很有用。</target>
        </trans-unit>
        <trans-unit id="3ca3aa3cff8cfc19f317122bb903f43713b45ad7" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;exclude&lt;/code&gt; argument can be used to provide a list of field names that can be excluded from validation and cleaning. &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; uses this argument to exclude fields that aren&amp;rsquo;t present on your form from being validated since any errors raised could not be corrected by the user.</source>
          <target state="translated">可选的 &lt;code&gt;exclude&lt;/code&gt; 参数可用于提供可从验证和清除中排除的字段名称列表。&lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt; &lt;code&gt;ModelForm&lt;/code&gt; &lt;/a&gt;使用此参数将表单上不存在的字段排除在验证范围之外，因为用户无法纠正所引发的任何错误。</target>
        </trans-unit>
        <trans-unit id="de1b3ebb8898e95c67f73c1ce55c5514432de02b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;hints&lt;/code&gt; argument will be passed as &lt;code&gt;**hints&lt;/code&gt; to the &lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of database routers to assist them in making a routing decision. See &lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;Hints&lt;/a&gt; for more details on database hints.</source>
          <target state="translated">可选的 &lt;code&gt;hints&lt;/code&gt; 参数将作为 &lt;code&gt;**hints&lt;/code&gt; 传递给数据库路由器的&lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt; &lt;code&gt;allow_migrate()&lt;/code&gt; &lt;/a&gt;方法，以帮助它们做出路由决策。有关数据库提示的更多详细信息，请参见&lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;提示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81a6dbd25930957894307486eacb1dd37f8db26b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;hints&lt;/code&gt; argument will be passed as &lt;code&gt;**hints&lt;/code&gt; to the &lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of database routers to assist them in making routing decisions. See &lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;Hints&lt;/a&gt; for more details on database hints.</source>
          <target state="translated">可选的 &lt;code&gt;hints&lt;/code&gt; 参数将作为 &lt;code&gt;**hints&lt;/code&gt; 传递给数据库路由器的&lt;a href=&quot;../topics/db/multi-db#allow_migrate&quot;&gt; &lt;code&gt;allow_migrate()&lt;/code&gt; &lt;/a&gt;方法，以帮助他们制定路由决策。有关数据库提示的更多详细信息，请参见&lt;a href=&quot;../topics/db/multi-db#topics-db-multi-db-hints&quot;&gt;提示&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="24f6613b59b288906159fdb528e498f08daa631a" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;salt&lt;/code&gt; argument can be used to provide extra protection against brute force attacks on your secret key. If supplied, the &lt;code&gt;max_age&lt;/code&gt; argument will be checked against the signed timestamp attached to the cookie value to ensure the cookie is not older than &lt;code&gt;max_age&lt;/code&gt; seconds.</source>
          <target state="translated">可选的 &lt;code&gt;salt&lt;/code&gt; 参数可用于提供额外的保护，以防止对密钥的暴力攻击。如果提供了 &lt;code&gt;max_age&lt;/code&gt; 参数，将对照该cookie值所附的签名时间戳检查max_age参数，以确保该cookie不早于 &lt;code&gt;max_age&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="3e0beb39d35735253ce3024401bfaa5342ed782f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;save&lt;/code&gt; argument controls whether or not the model instance is saved after the file associated with this field has been deleted. Defaults to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">可选的 &lt;code&gt;save&lt;/code&gt; 参数控制在删除与该字段关联的文件之后是否保存模型实例。默认为 &lt;code&gt;True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e395df4be2b5acaec77be07da175d627106ae22" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;skip&lt;/code&gt; argument is a list of origins to ignore when extending templates. This allow templates to extend other templates of the same name. It also used to avoid recursion errors.</source>
          <target state="translated">可选的 &lt;code&gt;skip&lt;/code&gt; 参数是扩展模板时要忽略的来源列表。这允许模板扩展具有相同名称的其他模板。它还用于避免递归错误。</target>
        </trans-unit>
        <trans-unit id="dbec13ae4d38c99ea3eaf390fec6dbd0d46a405c" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;auto_now_add&lt;/code&gt;, &lt;code&gt;auto_now&lt;/code&gt;, and &lt;code&gt;default&lt;/code&gt; are mutually exclusive. Any combination of these options will result in an error.</source>
          <target state="translated">选项 &lt;code&gt;auto_now_add&lt;/code&gt; ， &lt;code&gt;auto_now&lt;/code&gt; 和 &lt;code&gt;default&lt;/code&gt; 是互斥的。这些选项的任何组合都将导致错误。</target>
        </trans-unit>
        <trans-unit id="5d4f557111c3d758e5f38590ca4f0403259c181e" translate="yes" xml:space="preserve">
          <source>The order in &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters because a middleware can depend on other middleware. For instance, &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt; stores the authenticated user in the session; therefore, it must run after &lt;a href=&quot;../../ref/middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt;&lt;code&gt;SessionMiddleware&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../../ref/middleware#middleware-ordering&quot;&gt;Middleware ordering&lt;/a&gt; for some common hints about ordering of Django middleware classes.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;中的顺序很重要，因为中间件可以依赖于其他中间件。例如，&lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt;将经过身份验证的用户存储在会话中；因此，它必须在&lt;a href=&quot;../../ref/middleware#django.contrib.sessions.middleware.SessionMiddleware&quot;&gt; &lt;code&gt;SessionMiddleware&lt;/code&gt; &lt;/a&gt;之后运行。有关Django中间件类&lt;a href=&quot;../../ref/middleware#middleware-ordering&quot;&gt;排序&lt;/a&gt;的一些常见提示，请参见中间件排序。</target>
        </trans-unit>
        <trans-unit id="bf6c603db3c6bcb6e0cdce02b8261d81d20af0bb" translate="yes" xml:space="preserve">
          <source>The order in which assets are inserted into the DOM is often important. For example, you may have a script that depends on jQuery. Therefore, combining &lt;code&gt;Media&lt;/code&gt; objects attempts to preserve the relative order in which assets are defined in each &lt;code&gt;Media&lt;/code&gt; class.</source>
          <target state="translated">资产插入DOM的顺序通常很重要。例如，您可能有一个依赖jQuery的脚本。因此，组合 &lt;code&gt;Media&lt;/code&gt; 对象会尝试保留每个 &lt;code&gt;Media&lt;/code&gt; 类中定义资产的相对顺序。</target>
        </trans-unit>
        <trans-unit id="e1925eb506b801bc393ff892c8be28e0c8894df9" translate="yes" xml:space="preserve">
          <source>The order in which fields are added to the deferred set does not matter. Calling &lt;code&gt;defer()&lt;/code&gt; with a field name that has already been deferred is harmless (the field will still be deferred).</source>
          <target state="translated">字段添加到延迟集中的顺序无关紧要。使用已被延迟的字段名称调用 &lt;code&gt;defer()&lt;/code&gt; 是无害的（该字段仍将被延迟）。</target>
        </trans-unit>
        <trans-unit id="91b05ba78c4e0ad277b8d18abd2c3f37d8c4c5b8" translate="yes" xml:space="preserve">
          <source>The order in which routers are processed is significant. Routers will be queried in the order they are listed in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; setting. In this example, the &lt;code&gt;AuthRouter&lt;/code&gt; is processed before the &lt;code&gt;PrimaryReplicaRouter&lt;/code&gt;, and as a result, decisions concerning the models in &lt;code&gt;auth&lt;/code&gt; are processed before any other decision is made. If the &lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt;&lt;code&gt;DATABASE_ROUTERS&lt;/code&gt;&lt;/a&gt; setting listed the two routers in the other order, &lt;code&gt;PrimaryReplicaRouter.allow_migrate()&lt;/code&gt; would be processed first. The catch-all nature of the PrimaryReplicaRouter implementation would mean that all models would be available on all databases.</source>
          <target state="translated">路由器的处理顺序很重要。将按照在&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;设置中列出的顺序查询路由器。在此示例中， &lt;code&gt;AuthRouter&lt;/code&gt; 在PrimaryReplicaRouter之前进行 &lt;code&gt;PrimaryReplicaRouter&lt;/code&gt; ，因此，在做出任何其他决定之前，将处理与 &lt;code&gt;auth&lt;/code&gt; 中的模型有关的决定。如果&lt;a href=&quot;../../ref/settings#std:setting-DATABASE_ROUTERS&quot;&gt; &lt;code&gt;DATABASE_ROUTERS&lt;/code&gt; &lt;/a&gt;设置以其他顺序列出了这两个路由器，则将首先处理 &lt;code&gt;PrimaryReplicaRouter.allow_migrate()&lt;/code&gt; 。 PrimaryReplicaRouter实现的包罗万象的性质意味着所有数据库上都可以使用所有模型。</target>
        </trans-unit>
        <trans-unit id="21797a53c5c3f090cf4e3abea4b784de459e747a" translate="yes" xml:space="preserve">
          <source>The order of &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match.</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt;的顺序很重要，因此，如果相同的用户名和密码在多个后端中有效，则Django将在第一个正匹配项处停止处理。</target>
        </trans-unit>
        <trans-unit id="22cdfae8dbc9bd47788fb40bf4bacd41605d32e8" translate="yes" xml:space="preserve">
          <source>The order of &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; is significant! For example, if you want to customize the Django admin, you might choose to override the standard &lt;code&gt;admin/base_site.html&lt;/code&gt; template, from &lt;code&gt;django.contrib.admin&lt;/code&gt;, with your own &lt;code&gt;admin/base_site.html&lt;/code&gt; in &lt;code&gt;myproject.polls&lt;/code&gt;. You must then make sure that your &lt;code&gt;myproject.polls&lt;/code&gt; comes &lt;em&gt;before&lt;/em&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt; in &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, otherwise &lt;code&gt;django.contrib.admin&lt;/code&gt;&amp;rsquo;s will be loaded first and yours will be ignored.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;的顺序很重要！例如，如果您想自定义admin界面，你可以选择覆盖标准 &lt;code&gt;admin/base_site.html&lt;/code&gt; 模板，从 &lt;code&gt;django.contrib.admin&lt;/code&gt; ，用自己的 &lt;code&gt;admin/base_site.html&lt;/code&gt; 在 &lt;code&gt;myproject.polls&lt;/code&gt; 。然后，您必须确保您的 &lt;code&gt;myproject.polls&lt;/code&gt; 来&lt;em&gt;之前&lt;/em&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; 在&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;，否则 &lt;code&gt;django.contrib.admin&lt;/code&gt; 的将被首先加载，你将被忽略。</target>
        </trans-unit>
        <trans-unit id="a1068ec95eaa283b6039de7f96e36b6cc7116c6d" translate="yes" xml:space="preserve">
          <source>The order of &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;select_related()&lt;/code&gt; chaining isn&amp;rsquo;t important. These querysets are equivalent:</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 和 &lt;code&gt;select_related()&lt;/code&gt; 链接的顺序并不重要。这些查询集是等效的：</target>
        </trans-unit>
        <trans-unit id="5499d8f59b9f5c13285991f2b461a09bd23ce9e8" translate="yes" xml:space="preserve">
          <source>The order of a &lt;code&gt;Question&lt;/code&gt; object&amp;rsquo;s related &lt;code&gt;Answer&lt;/code&gt; objects can be set by passing in a list of &lt;code&gt;Answer&lt;/code&gt; primary keys:</source>
          <target state="translated">可以通过传递 &lt;code&gt;Answer&lt;/code&gt; 主键列表来设置 &lt;code&gt;Question&lt;/code&gt; 对象相关的 &lt;code&gt;Answer&lt;/code&gt; 对象的顺序：</target>
        </trans-unit>
        <trans-unit id="bc04f4694d1052f69aed771a1d1c7d7ca59ef7c2" translate="yes" xml:space="preserve">
          <source>The order of fields in your query doesn&amp;rsquo;t matter. In other words, both of the following queries work identically:</source>
          <target state="translated">查询中字段的顺序无关紧要。换句话说，以下两个查询的工作原理相同：</target>
        </trans-unit>
        <trans-unit id="3bcf47b56cab432271bc226d6a899e7e79d541cc" translate="yes" xml:space="preserve">
          <source>The ordering of attributes of an HTML element is not significant.</source>
          <target state="translated">HTML元素的属性排序并不重要。</target>
        </trans-unit>
        <trans-unit id="c1727d38a54d75600eb696ce3889db4987a1853b" translate="yes" xml:space="preserve">
          <source>The ordering of lookups matters.</source>
          <target state="translated">查询的顺序很重要。</target>
        </trans-unit>
        <trans-unit id="90d54bfcd3086dd384ceebe47f26905291a11d5a" translate="yes" xml:space="preserve">
          <source>The original use case for adding context processors for Jinja2 involved:</source>
          <target state="translated">最初为Jinja2增加上下文处理器的用例涉及。</target>
        </trans-unit>
        <trans-unit id="d4147c68696bbf722f232d0a404cbe34a2e44464" translate="yes" xml:space="preserve">
          <source>The outer &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; container receives the &lt;code&gt;id&lt;/code&gt; attribute of the widget, if defined, or &lt;a href=&quot;api#django.forms.BoundField.auto_id&quot;&gt;&lt;code&gt;BoundField.auto_id&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">外部 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 容器接收小部件的 &lt;code&gt;id&lt;/code&gt; 属性（如果已定义），否则接收&lt;a href=&quot;api#django.forms.BoundField.auto_id&quot;&gt; &lt;code&gt;BoundField.auto_id&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="29161efdb3eaeebb42eedab86571ec7318d50ea3" translate="yes" xml:space="preserve">
          <source>The outer &lt;code&gt;mysite/&lt;/code&gt; root directory is a container for your project. Its name doesn&amp;rsquo;t matter to Django; you can rename it to anything you like.</source>
          <target state="translated">外部 &lt;code&gt;mysite/&lt;/code&gt; 根目录是您的项目的容器。它的名称对Django无关紧要；您可以将其重命名为您喜欢的任何名称。</target>
        </trans-unit>
        <trans-unit id="54de0cbdb7d9dca88c045cd6e8c593237a2d897b" translate="yes" xml:space="preserve">
          <source>The output differs significantly between databases.</source>
          <target state="translated">不同数据库之间的输出有很大的不同。</target>
        </trans-unit>
        <trans-unit id="7429b7db31a2412511c59b97a99a3ef5a9ef65fc" translate="yes" xml:space="preserve">
          <source>The output follows the schema described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0440&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 440&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">输出遵循&lt;a href=&quot;https://www.python.org/dev/peps/pep-0440&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 440中&lt;/strong&gt;&lt;/a&gt;描述的模式：</target>
        </trans-unit>
        <trans-unit id="59fc36f20bf8cf921717983a500874059b86e078" translate="yes" xml:space="preserve">
          <source>The output from template tags is &lt;strong&gt;not&lt;/strong&gt; automatically run through the auto-escaping filters (with the exception of &lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt;&lt;code&gt;simple_tag()&lt;/code&gt;&lt;/a&gt; as described above). However, there are still a couple of things you should keep in mind when writing a template tag.</source>
          <target state="translated">模板标记的输出&lt;strong&gt;不会&lt;/strong&gt;自动通过自动转义过滤器运行&lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt; &lt;code&gt;simple_tag()&lt;/code&gt; &lt;/a&gt;如上所述的simple_tag（）除外）。但是，编写模板标记时，您还需要牢记两件事。</target>
        </trans-unit>
        <trans-unit id="b69917dae85959287bc248cef681c58dd12476f2" translate="yes" xml:space="preserve">
          <source>The output from this property does not include the 3dm, 3dz, and 4d information that PostGIS supports in its EWKT representations.</source>
          <target state="translated">此属性的输出不包括 PostGIS 在其 EWKT 表征中支持的 3dm、3dz 和 4d 信息。</target>
        </trans-unit>
        <trans-unit id="bb0119774032b67a3035083d18e903e43f8ca2c4" translate="yes" xml:space="preserve">
          <source>The output of &lt;code&gt;dumpdata&lt;/code&gt; can be used as input for &lt;a href=&quot;#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;dumpdata&lt;/code&gt; 的输出可用作&lt;a href=&quot;#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; 的&lt;/a&gt;输入。</target>
        </trans-unit>
        <trans-unit id="19df519925d5e30f2dc8454d1801f7e49d27a0fb" translate="yes" xml:space="preserve">
          <source>The output uses HTML5 syntax, targeting &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;. For example, it uses boolean attributes such as &lt;code&gt;checked&lt;/code&gt; rather than the XHTML style of &lt;code&gt;checked='checked'&lt;/code&gt;.</source>
          <target state="translated">输出使用HTML5语法，目标为 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; 。例如，它使用布尔属性（例如， &lt;code&gt;checked&lt;/code&gt; )而不是XHTML样式的 &lt;code&gt;checked='checked'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63b6b98eefb452725af559bb477e5a59f84f7005" translate="yes" xml:space="preserve">
          <source>The package &lt;code&gt;django.shortcuts&lt;/code&gt; collects helper functions and classes that &amp;ldquo;span&amp;rdquo; multiple levels of MVC. In other words, these functions/classes introduce controlled coupling for convenience&amp;rsquo;s sake.</source>
          <target state="translated">包 &lt;code&gt;django.shortcuts&lt;/code&gt; 收集了&amp;ldquo;跨越&amp;rdquo;多个MVC级别的辅助函数和类。换句话说，为方便起见，这些功能/类引入了受控耦合。</target>
        </trans-unit>
        <trans-unit id="08ff1ee3e031110a607cd2a310c72e63027d79ab" translate="yes" xml:space="preserve">
          <source>The page shown after a user has been emailed a link to reset their password. This view is called by default if the &lt;a href=&quot;#django.contrib.auth.views.PasswordResetView&quot;&gt;&lt;code&gt;PasswordResetView&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t have an explicit &lt;code&gt;success_url&lt;/code&gt; URL set.</source>
          <target state="translated">通过电子邮件向用户发送链接以重置其密码后显示的页面。如果&lt;a href=&quot;#django.contrib.auth.views.PasswordResetView&quot;&gt; &lt;code&gt;PasswordResetView&lt;/code&gt; &lt;/a&gt;没有设置显式的 &lt;code&gt;success_url&lt;/code&gt; URL ，则默认情况下调用此视图。</target>
        </trans-unit>
        <trans-unit id="f442cc6e3cc19b929680f225edb1921a4974e320" translate="yes" xml:space="preserve">
          <source>The page shown after a user has changed their password.</source>
          <target state="translated">用户修改密码后显示的页面。</target>
        </trans-unit>
        <trans-unit id="c574ad0f3c6e85b72cff9d91ccad42ce0a72262b" translate="yes" xml:space="preserve">
          <source>The paginator class to be used for pagination. By default, &lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt; is used. If the custom paginator class doesn&amp;rsquo;t have the same constructor interface as &lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt;, you will also need to provide an implementation for &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt;&lt;code&gt;ModelAdmin.get_paginator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于分页的分页器类。默认情况下，使用&lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; &lt;/a&gt;。如果自定义paginator类与&lt;a href=&quot;../../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; &lt;/a&gt;没有相同的构造函数接口，则还需要为&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt; &lt;code&gt;ModelAdmin.get_paginator()&lt;/code&gt; &lt;/a&gt;提供一个实现。</target>
        </trans-unit>
        <trans-unit id="17531609b8ff85573cd6f907f89f88527fa66751" translate="yes" xml:space="preserve">
          <source>The paginator class to be used for pagination. By default, &lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt; is used. If the custom paginator class doesn&amp;rsquo;t have the same constructor interface as &lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt;&lt;code&gt;django.core.paginator.Paginator&lt;/code&gt;&lt;/a&gt;, you will also need to provide an implementation for &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.get_paginator&quot;&gt;&lt;code&gt;get_paginator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">用于分页的分页器类。默认情况下，使用&lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; &lt;/a&gt;。如果自定义的paginator类与&lt;a href=&quot;../paginator#django.core.paginator.Paginator&quot;&gt; &lt;code&gt;django.core.paginator.Paginator&lt;/code&gt; &lt;/a&gt;没有相同的构造函数接口，则还需要为&lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.get_paginator&quot;&gt; &lt;code&gt;get_paginator()&lt;/code&gt; &lt;/a&gt;提供一个实现。</target>
        </trans-unit>
        <trans-unit id="3260006f18bf145f7c736a90674ea43e024f7cef" translate="yes" xml:space="preserve">
          <source>The parameters sent to the wrappers are:</source>
          <target state="translated">发送给包装器的参数有:</target>
        </trans-unit>
        <trans-unit id="182f189d1c0069ab822d40cc4da3ea09d1194926" translate="yes" xml:space="preserve">
          <source>The parser for this function should grab the parameter and create a &lt;code&gt;Node&lt;/code&gt; object:</source>
          <target state="translated">此函数的解析器应获取参数并创建一个 &lt;code&gt;Node&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="a3a527b4d3e34dc895b2592b2d4fa50c5a205421" translate="yes" xml:space="preserve">
          <source>The parsing is very low-level. The Django developers have experimented with writing small frameworks on top of this parsing system, using techniques such as EBNF grammars, but those experiments made the template engine too slow. It&amp;rsquo;s low-level because that&amp;rsquo;s fastest.</source>
          <target state="translated">解析是非常低级的。Django开发人员已经尝试使用诸如EBNF语法之类的技术在此解析系统之上编写小型框架，但是这些实验使模板引擎太慢了。它是低级的，因为那是最快的。</target>
        </trans-unit>
        <trans-unit id="487ff88151bdf1b239d84c46424e5d25e63751bb" translate="yes" xml:space="preserve">
          <source>The password to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will generate a random password.</source>
          <target state="translated">连接到Oracle数据库时使用的密码。如果没有提供,Django会随机生成一个密码。</target>
        </trans-unit>
        <trans-unit id="2705988536efaa4735e5b504118d175f097cee40" translate="yes" xml:space="preserve">
          <source>The password to use when connecting to the database. Not used with SQLite.</source>
          <target state="translated">连接到数据库时使用的密码。不用于SQLite。</target>
        </trans-unit>
        <trans-unit id="f1c9798e593e20270823fbd0a0ca388a237e5744" translate="yes" xml:space="preserve">
          <source>The path is where the new environment will be saved on your computer.</source>
          <target state="translated">路径是将新环境保存在计算机上的地方。</target>
        </trans-unit>
        <trans-unit id="7c7fae6591624c2d122651744ec9edacd201c516" translate="yes" xml:space="preserve">
          <source>The path set on the CSRF cookie. This should either match the URL path of your Django installation or be a parent of that path.</source>
          <target state="translated">在CSRF cookie上设置的路径。这个路径应该与你的Django安装的URL路径相匹配,或者是该路径的父路径。</target>
        </trans-unit>
        <trans-unit id="30aa703152662bba86a65b974b1ae65ae56fa6ea" translate="yes" xml:space="preserve">
          <source>The path set on the language cookie. This should either match the URL path of your Django installation or be a parent of that path.</source>
          <target state="translated">语言cookie上设置的路径。这个路径应该与你的Django安装的URL路径相匹配,或者是该路径的父路径。</target>
        </trans-unit>
        <trans-unit id="3df2836510931320c2b34c1d3ecefc0bda16ed72" translate="yes" xml:space="preserve">
          <source>The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path.</source>
          <target state="translated">会话cookie上设置的路径。这个路径应该与你的Django安装的URL路径相匹配,或者是该路径的父路径。</target>
        </trans-unit>
        <trans-unit id="edf9850e4063fa4f015e6b00c7535e8feecd98f4" translate="yes" xml:space="preserve">
          <source>The path to the OGR-supported data source file (e.g., a shapefile). Also accepts &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;django.contrib.gis.gdal.DataSource&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">OGR支持的数据源文件（例如shapefile）的路径。还接受&lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;django.contrib.gis.gdal.DataSource&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="c5e0080aadc181c662eeb97d03dc759ed6f22623" translate="yes" xml:space="preserve">
          <source>The path to the shapefile is not absolute &amp;ndash; in other words, if you move the &lt;code&gt;world&lt;/code&gt; application (with &lt;code&gt;data&lt;/code&gt; subdirectory) to a different location, the script will still work.</source>
          <target state="translated">shapefile的路径不是绝对的-换句话说，如果将 &lt;code&gt;world&lt;/code&gt; 应用程序（带有 &lt;code&gt;data&lt;/code&gt; 子目录）移动到其他位置，该脚本仍将起作用。</target>
        </trans-unit>
        <trans-unit id="27875ff60b116b6807ef4e8715b7783696957eff" translate="yes" xml:space="preserve">
          <source>The path to the template as returned by the template loader. For loaders that read from the file system, this is the full path to the template.</source>
          <target state="translated">模板加载器返回的模板路径。对于从文件系统读取的加载器,这是模板的完整路径。</target>
        </trans-unit>
        <trans-unit id="cb2bc852dfbb65b00f5ca8102d8cb8d30d60d2d7" translate="yes" xml:space="preserve">
          <source>The people who made Django prefer to put all the SQL-affecting methods first, followed (optionally) by any output-affecting methods (such as &lt;code&gt;values()&lt;/code&gt;), but it doesn&amp;rsquo;t really matter. This is your chance to really flaunt your individualism.</source>
          <target state="translated">创建Django的人更喜欢将所有影响SQL的方法放在首位，然后（可选地）放置任何影响输出的方法（例如 &lt;code&gt;values()&lt;/code&gt; ），但这并不重要。这是您真正炫耀个人主义的机会。</target>
        </trans-unit>
        <trans-unit id="879b1ac686a10b4dfebaba971e1e117cc6a8da3e" translate="yes" xml:space="preserve">
          <source>The per-site cache</source>
          <target state="translated">每个站点的缓存</target>
        </trans-unit>
        <trans-unit id="9a71bbff13c1062726eaad14b03135b5ca7b2831" translate="yes" xml:space="preserve">
          <source>The per-view cache</source>
          <target state="translated">每个视图的缓存</target>
        </trans-unit>
        <trans-unit id="e1399dc0275fa78c29f3d3ed6f3faaabe018817a" translate="yes" xml:space="preserve">
          <source>The per-view cache, like the per-site cache, is keyed off of the URL. If multiple URLs point at the same view, each URL will be cached separately. Continuing the &lt;code&gt;my_view&lt;/code&gt; example, if your URLconf looks like this:</source>
          <target state="translated">与每个站点的缓存一样，每个视图的缓存也是从URL键入的。如果多个URL指向同一视图，则每个URL将被分别缓存。继续 &lt;code&gt;my_view&lt;/code&gt; 示例，如果您的URLconf如下所示：</target>
        </trans-unit>
        <trans-unit id="3ac37a791d273073222002613539ce45ef65fcc4" translate="yes" xml:space="preserve">
          <source>The permission can then be assigned to a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; via its &lt;code&gt;user_permissions&lt;/code&gt; attribute or to a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt; via its &lt;code&gt;permissions&lt;/code&gt; attribute.</source>
          <target state="translated">然后可以通过&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;user_permissions&lt;/code&gt; 属性将权限分配给用户，或者通过用户的 &lt;code&gt;permissions&lt;/code&gt; 属性将权限分配给&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.Group&quot;&gt; &lt;code&gt;Group&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d80ecaf5fed83bbf4bcc8f812f2286c97df69b30" translate="yes" xml:space="preserve">
          <source>The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants.</source>
          <target state="translated">给予用户的权限将是所有后端返回的所有权限的超集。也就是说,Django授予用户的权限,任何一个后端都会授予。</target>
        </trans-unit>
        <trans-unit id="3f8c4a5c551da92aeea3e86f12798d01622663dd" translate="yes" xml:space="preserve">
          <source>The philosophy here is that your site is edited by a staff, or a client, or maybe just you &amp;ndash; and you don&amp;rsquo;t want to have to deal with creating backend interfaces only to manage content.</source>
          <target state="translated">这里的理念是，您的网站是由员工，客户或什至仅由您编辑的，而您不必只为了管理内容而创建后端接口。</target>
        </trans-unit>
        <trans-unit id="b16b71c6bbd0362e0b09053ab436a7e7fb15d36c" translate="yes" xml:space="preserve">
          <source>The plural name for the object:</source>
          <target state="translated">对象的复数名称。</target>
        </trans-unit>
        <trans-unit id="64c8b0c8e17e206c38101e02c2a14524dacde157" translate="yes" xml:space="preserve">
          <source>The police beat feeds could be accessible via URLs like this:</source>
          <target state="translated">可以通过这样的网址来获取警方的节拍信息。</target>
        </trans-unit>
        <trans-unit id="eee7f514e199049047b97112ad8dbf2b39e41662" translate="yes" xml:space="preserve">
          <source>The polls application is fairly undiscriminating: it will publish any question, including ones whose &lt;code&gt;pub_date&lt;/code&gt; field lies in the future. We should improve this. Setting a &lt;code&gt;pub_date&lt;/code&gt; in the future should mean that the Question is published at that moment, but invisible until then.</source>
          <target state="translated">民意测验应用程序是相当不歧视的：它将发布任何问题，包括将来使用 &lt;code&gt;pub_date&lt;/code&gt; 字段的问题。我们应该改善这一点。在将来设置 &lt;code&gt;pub_date&lt;/code&gt; 应该意味着该问题将在那时发布，但直到那时才可见。</target>
        </trans-unit>
        <trans-unit id="84f92f101a4b194e2f608b9a7df9eb5783933e11" translate="yes" xml:space="preserve">
          <source>The populated variable (in the example above, &lt;code&gt;total&lt;/code&gt;) is only available between the &lt;code&gt;{% with %}&lt;/code&gt; and &lt;code&gt;{% endwith %}&lt;/code&gt; tags.</source>
          <target state="translated">填充的变量（在上面的示例中为 &lt;code&gt;total&lt;/code&gt; ）仅在 &lt;code&gt;{% with %}&lt;/code&gt; 和 &lt;code&gt;{% endwith %}&lt;/code&gt; 标签之间可用。</target>
        </trans-unit>
        <trans-unit id="e72422708d649e0b6436d32c86bb443780b65207" translate="yes" xml:space="preserve">
          <source>The port to use when connecting to the database. An empty string means the default port. Not used with SQLite.</source>
          <target state="translated">连接到数据库时要使用的端口。空字符串表示默认端口。不用于SQLite。</target>
        </trans-unit>
        <trans-unit id="9419a955b6cf01968f0617da8750156ef83bcda1" translate="yes" xml:space="preserve">
          <source>The possible values for &lt;a href=&quot;#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; are found in &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;on_delete&lt;/code&gt; &lt;/a&gt;的可能值在&lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt; &lt;code&gt;django.db.models&lt;/code&gt; &lt;/a&gt;中找到：</target>
        </trans-unit>
        <trans-unit id="291725821d8623d6c1f75f2f5130e7805431be00" translate="yes" xml:space="preserve">
          <source>The postmortem appears when &lt;a href=&quot;#django.template.TemplateDoesNotExist&quot;&gt;&lt;code&gt;TemplateDoesNotExist&lt;/code&gt;&lt;/a&gt; is raised. It lists the template engines and loaders that were used when trying to find a given template. For example, if two Django engines are configured, the postmortem will appear like:</source>
          <target state="translated">提出&lt;a href=&quot;#django.template.TemplateDoesNotExist&quot;&gt; &lt;code&gt;TemplateDoesNotExist&lt;/code&gt; &lt;/a&gt;后，便会显示事后检验。它列出了尝试查找给定模板时使用的模板引擎和加载程序。例如，如果配置了两个Django引擎，则验尸将显示为：</target>
        </trans-unit>
        <trans-unit id="6df9f5a4a4639499d415569145adafa647ab022d" translate="yes" xml:space="preserve">
          <source>The precedence of translations is such that the packages appearing later in the &lt;code&gt;packages&lt;/code&gt; argument have higher precedence than the ones appearing at the beginning. This is important in the case of clashing translations for the same literal.</source>
          <target state="translated">转换的优先级使得在 &lt;code&gt;packages&lt;/code&gt; 参数后面出现的软件包的优先级高于在开头出现的软件包的优先级。在相同文字的翻译冲突的情况下，这一点很重要。</target>
        </trans-unit>
        <trans-unit id="2c6033b4d2a19cc09db3f260666261632084c7bc" translate="yes" xml:space="preserve">
          <source>The preferred way to write tests in Django is using the &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module built-in to the Python standard library. This is covered in detail in the &lt;a href=&quot;overview&quot;&gt;Writing and running tests&lt;/a&gt; document.</source>
          <target state="translated">在Django中编写测试的首选方法是使用Python标准库中内置的&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;模块。&lt;a href=&quot;overview&quot;&gt;编写和运行测试&lt;/a&gt;文档中对此进行了详细介绍。</target>
        </trans-unit>
        <trans-unit id="a8da9919e5cd83b087be392e07b42dfe1a6f5719" translate="yes" xml:space="preserve">
          <source>The prefix can also be specified on the form class:</source>
          <target state="translated">也可以在表格类上指定前缀。</target>
        </trans-unit>
        <trans-unit id="1fba29e877a1a3ec872c95f6e2ddc0a201e7ca85" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;admin_password_reset&lt;/code&gt; named URL will cause a &amp;ldquo;forgotten your password?&amp;rdquo; link to appear on the default admin log-in page under the password box.</source>
          <target state="translated">名为 &lt;code&gt;admin_password_reset&lt;/code&gt; 的 URL 的存在将导致&amp;ldquo;忘记密码？&amp;rdquo; 链接显示在密码框下方的默认admin登录页面上。</target>
        </trans-unit>
        <trans-unit id="e4992a2da237e7aa20459589fd96d8aec9298182" translate="yes" xml:space="preserve">
          <source>The previous more verbose format is still supported: &lt;code&gt;{% blocktrans with book|title as book_t and author|title as author_t %}&lt;/code&gt;</source>
          <target state="translated">仍支持以前的详细格式： &lt;code&gt;{% blocktrans with book|title as book_t and author|title as author_t %}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f89a845448636f3980b0124ba642a64c603e25a8" translate="yes" xml:space="preserve">
          <source>The previous more verbose format is still supported: &lt;code&gt;{% with business.employees.count as total %}&lt;/code&gt;</source>
          <target state="translated">仍然支持以前的详细格式： &lt;code&gt;{% with business.employees.count as total %}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5428b5309178ff934e90e2596239ae9332278ea3" translate="yes" xml:space="preserve">
          <source>The previous points are written from the point of view of a single developer maintaining an application. Complex applications will be maintained by teams. Tests guarantee that colleagues don&amp;rsquo;t inadvertently break your code (and that you don&amp;rsquo;t break theirs without knowing). If you want to make a living as a Django programmer, you must be good at writing tests!</source>
          <target state="translated">前面的观点是从维护应用程序的单个开发人员的角度编写的。复杂的应用程序将由团队维护。测试确保同事不会无意间破坏您的代码（并且您不会在不知情的情况下破坏他们的代码）。如果您想以Django程序员为生，那么您必须擅长编写测试！</target>
        </trans-unit>
        <trans-unit id="bbdb577ec02ea1c36ada373d61b80bc484867ff0" translate="yes" xml:space="preserve">
          <source>The previous sections explained how validation works in general for forms. Since it can sometimes be easier to put things into place by seeing each feature in use, here are a series of small examples that use each of the previous features.</source>
          <target state="translated">前面的章节解释了一般表单的验证是如何工作的。由于有时通过看到每个功能的使用,可以更容易地将事情落实到位,这里有一系列使用前面每个功能的小例子。</target>
        </trans-unit>
        <trans-unit id="c67ffbae80b072e6bef52fb33e2d87aa94f87bfe" translate="yes" xml:space="preserve">
          <source>The primary attributes of the default user are:</source>
          <target state="translated">默认用户的主要属性是:</target>
        </trans-unit>
        <trans-unit id="93a41cfbdcb8ddb875e99ee3bc06940e24ac3283" translate="yes" xml:space="preserve">
          <source>The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one.</source>
          <target state="translated">主键字段是只读的。如果您改变了现有对象的主键值,然后将其保存,则会在旧对象旁边创建一个新对象。</target>
        </trans-unit>
        <trans-unit id="5325a72bfaed361f9e6e6ba96380c89cbda9730c" translate="yes" xml:space="preserve">
          <source>The primary key field is read-only. If you change the value of the primary key on an existing object and then save it, a new object will be created alongside the old one. For example:</source>
          <target state="translated">主键字段是只读的。如果您改变了现有对象的主键值,然后将其保存,则会在旧对象旁边创建一个新对象。例如</target>
        </trans-unit>
        <trans-unit id="9ca647f14fb3bd00cc3bce6133eeb9123bb96ad9" translate="yes" xml:space="preserve">
          <source>The primary piece of information we have available to get a URL is an identification (e.g. the name) of the view in charge of handling it. Other pieces of information that necessarily must participate in the lookup of the right URL are the types (positional, keyword) and values of the view arguments.</source>
          <target state="translated">我们获得一个URL的主要信息是负责处理该URL的视图的标识(如名称)。其他必须参与正确URL查找的信息是视图参数的类型(位置、关键字)和值。</target>
        </trans-unit>
        <trans-unit id="51c172625ce24d8f73d90f9b4091917412db8100" translate="yes" xml:space="preserve">
          <source>The primary task of a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; object is to validate data. With a bound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance, call the &lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt; method to run validation and return a boolean designating whether the data was valid:</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;对象的主要任务是验证数据。对于绑定的&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;实例，调用&lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt; &lt;code&gt;is_valid()&lt;/code&gt; &lt;/a&gt;方法以运行验证并返回一个布尔值，指示数据是否有效：</target>
        </trans-unit>
        <trans-unit id="a0283ada3aa002159af800fae9008fc484cc6639" translate="yes" xml:space="preserve">
          <source>The primary/replica (referred to as master/slave by some databases) configuration described is also flawed &amp;ndash; it doesn&amp;rsquo;t provide any solution for handling replication lag (i.e., query inconsistencies introduced because of the time taken for a write to propagate to the replicas). It also doesn&amp;rsquo;t consider the interaction of transactions with the database utilization strategy.</source>
          <target state="translated">所描述的主/副本（在某些数据库中称为主/从）配置也存在缺陷&amp;ndash;它没有提供任何解决复制滞后的解决方案（即，由于写入传播到磁盘所花费的时间而导致的查询不一致）。副本）。它还不考虑事务与数据库利用率策略的交互。</target>
        </trans-unit>
        <trans-unit id="48a78b655ec8852eae9602a405057000a5fe43f5" translate="yes" xml:space="preserve">
          <source>The problem with function-based generic views is that while they covered the simple cases well, there was no way to extend or customize them beyond some configuration options, limiting their usefulness in many real-world applications.</source>
          <target state="translated">基于函数的通用视图的问题是,虽然它们很好地覆盖了简单的案例,但除了一些配置选项之外,没有办法扩展或定制它们,这限制了它们在许多现实世界应用中的有用性。</target>
        </trans-unit>
        <trans-unit id="9788c3aa616f092ea3ce6e521eff09ea8fb6f136" translate="yes" xml:space="preserve">
          <source>The problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the &lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; functions in the &lt;code&gt;polls.urls&lt;/code&gt; module, you can remove a reliance on specific URL paths defined in your url configurations by using the &lt;code&gt;{% url %}&lt;/code&gt; template tag:</source>
          <target state="translated">这种硬编码，紧密耦合的方法的问题在于，在具有大量模板的项目上更改URL变得具有挑战性。但是，由于您在 &lt;code&gt;polls.urls&lt;/code&gt; 模块的&lt;a href=&quot;../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt;函数中定义了name参数，因此可以使用 &lt;code&gt;{% url %}&lt;/code&gt; 模板标记来消除对url配置中定义的特定URL路径的依赖：</target>
        </trans-unit>
        <trans-unit id="bcd3d259158fddca611b2e8c88a43fbfd4d14af3" translate="yes" xml:space="preserve">
          <source>The problem with this is that every time &lt;code&gt;Pizza.__str__()&lt;/code&gt; asks for &lt;code&gt;self.toppings.all()&lt;/code&gt; it has to query the database, so &lt;code&gt;Pizza.objects.all()&lt;/code&gt; will run a query on the Toppings table for &lt;strong&gt;every&lt;/strong&gt; item in the Pizza &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">问题在于，每次 &lt;code&gt;Pizza.__str__()&lt;/code&gt; 要求 &lt;code&gt;self.toppings.all()&lt;/code&gt; 都必须查询数据库，因此 &lt;code&gt;Pizza.objects.all()&lt;/code&gt; 会在Toppings表上针对其中的&lt;strong&gt;每个&lt;/strong&gt;项目运行查询。披萨 &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ece63ed4cc7dfa356db9e8e5e0cbc71116a2e60" translate="yes" xml:space="preserve">
          <source>The process can be made robust, &lt;a href=&quot;expressions#avoiding-race-conditions-using-f&quot;&gt;avoiding a race condition&lt;/a&gt;, as well as slightly faster by expressing the update relative to the original field value, rather than as an explicit assignment of a new value. Django provides &lt;a href=&quot;expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; for performing this kind of relative update. Using &lt;a href=&quot;expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt;, the previous example is expressed as:</source>
          <target state="translated">通过表示相对于原始字段值的更新，而不是作为新值的显式分配，可以使过程变得健壮，&lt;a href=&quot;expressions#avoiding-race-conditions-using-f&quot;&gt;避免争用情况&lt;/a&gt;，并且可以使其速度更快。Django提供了&lt;a href=&quot;expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;来执行这种相对更新。使用&lt;a href=&quot;expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;，前面的示例表示为：</target>
        </trans-unit>
        <trans-unit id="eb4a9b8d06947d804b9cc9c1b2a90a205c3d5923" translate="yes" xml:space="preserve">
          <source>The properties in this section export the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object into a different. This output may be in the form of a string, buffer, or even another object.</source>
          <target state="translated">本节中的属性将&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;对象导出到其他对象。此输出可以采用字符串，缓冲区甚至其他对象的形式。</target>
        </trans-unit>
        <trans-unit id="d58935e6bdb4d68d6470f9fbc5547de1501ac444" translate="yes" xml:space="preserve">
          <source>The prototype of &lt;code&gt;create_superuser()&lt;/code&gt; should accept the username field, plus all required fields as arguments. For example, if your user model uses &lt;code&gt;email&lt;/code&gt; as the username field, and has &lt;code&gt;date_of_birth&lt;/code&gt; as a required field, then &lt;code&gt;create_superuser&lt;/code&gt; should be defined as:</source>
          <target state="translated">&lt;code&gt;create_superuser()&lt;/code&gt; 的原型应接受用户名字段以及所有必填字段作为参数。例如，如果您的用户模型使用 &lt;code&gt;email&lt;/code&gt; 作为用户 &lt;code&gt;date_of_birth&lt;/code&gt; 段，并且使用date_of_birth作为必填字段，那么 &lt;code&gt;create_superuser&lt;/code&gt; 应该定义为：</target>
        </trans-unit>
        <trans-unit id="c715291f9737999ffd47c857d85e18872da10a4e" translate="yes" xml:space="preserve">
          <source>The prototype of &lt;code&gt;create_user()&lt;/code&gt; should accept the username field, plus all required fields as arguments. For example, if your user model uses &lt;code&gt;email&lt;/code&gt; as the username field, and has &lt;code&gt;date_of_birth&lt;/code&gt; as a required field, then &lt;code&gt;create_user&lt;/code&gt; should be defined as:</source>
          <target state="translated">&lt;code&gt;create_user()&lt;/code&gt; 的原型应接受用户名字段以及所有必填字段作为参数。例如，如果您的用户模型将 &lt;code&gt;email&lt;/code&gt; 用作用户名字段，并且将 &lt;code&gt;date_of_birth&lt;/code&gt; 作为必填字段，则应将 &lt;code&gt;create_user&lt;/code&gt; 定义为：</target>
        </trans-unit>
        <trans-unit id="b3f54182b42bee8873a1b07061e5e9400b5da1b1" translate="yes" xml:space="preserve">
          <source>The psycopg2 range type to use.</source>
          <target state="translated">要使用的 psycopg2 范围类型。</target>
        </trans-unit>
        <trans-unit id="453af653fdbdd85c1584b0f1f47eeb827399814f" translate="yes" xml:space="preserve">
          <source>The purpose of this storage is to keep serving the old files in case some pages still refer to those files, e.g. because they are cached by you or a 3rd party proxy server. Additionally, it&amp;rsquo;s very helpful if you want to apply &lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#expires&quot;&gt;far future Expires headers&lt;/a&gt; to the deployed files to speed up the load time for subsequent page visits.</source>
          <target state="translated">这种存储的目的是在某些页面仍引用那些文件的情况下继续提供这些旧文件，例如，因为它们是由您或第三方代理服务器缓存的。此外，如果要对部署的文件应用&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html#expires&quot;&gt;远期的Expires标头&lt;/a&gt;，以加快后续页面访问的加载时间，这将非常有帮助。</target>
        </trans-unit>
        <trans-unit id="b392afc1f2be2d1890dc368343bb9fdbd1e9dc60" translate="yes" xml:space="preserve">
          <source>The query expression API is a common set of methods that classes define to be usable in query expressions to translate themselves into SQL expressions. Direct field references, aggregates, and &lt;code&gt;Transform&lt;/code&gt; are examples that follow this API. A class is said to follow the query expression API when it implements the following methods:</source>
          <target state="translated">查询表达式API是一组通用的方法，这些类定义了可在查询表达式中使用的方法，以将其自身转换为SQL表达式。直接字段引用，聚合和 &lt;code&gt;Transform&lt;/code&gt; 是遵循此API的示例。当类实现以下方法时，可以说该类遵循查询表达式API：</target>
        </trans-unit>
        <trans-unit id="69aa5afd60c62356efa1fdfe9666e44434a5c49e" translate="yes" xml:space="preserve">
          <source>The quotes around the argument (if any) have already been stripped away, so we receive a plain string.</source>
          <target state="translated">参数周围的引号(如果有的话)已经被去掉了,所以我们收到的是一个纯字符串。</target>
        </trans-unit>
        <trans-unit id="876dbc968e75532af0aff1e56f77151583fc2b20" translate="yes" xml:space="preserve">
          <source>The raster lookup syntax is similar to the syntax for geometries. The only difference is that a band index can be specified as additional input. If no band index is specified, the first band is used by default (index &lt;code&gt;0&lt;/code&gt;). In that case the syntax is identical to the syntax for geometry lookups.</source>
          <target state="translated">栅格查找语法类似于几何的语法。唯一的区别是可以将频段索引指定为附加输入。如果未指定频段索引，则默认使用第一个频段（索引 &lt;code&gt;0&lt;/code&gt; ）。在那种情况下，语法与几何查找的语法相同。</target>
        </trans-unit>
        <trans-unit id="e8a847db8ae3747fac86c506dd71091110845347" translate="yes" xml:space="preserve">
          <source>The rationale behind &amp;ldquo;decompression&amp;rdquo; is that it is necessary to &amp;ldquo;split&amp;rdquo; the combined value of the form field into the values for each widget.</source>
          <target state="translated">&amp;ldquo;解压缩&amp;rdquo;背后的原理是，有必要将表单字段的组合值&amp;ldquo;拆分&amp;rdquo;为每个小部件的值。</target>
        </trans-unit>
        <trans-unit id="35e408a5a782fccccfa07b119894937fe134fc3a" translate="yes" xml:space="preserve">
          <source>The raw HTTP request body as a bytestring. This is useful for processing data in different ways than conventional HTML forms: binary images, XML payload etc. For processing conventional form data, use &lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;HttpRequest.POST&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">原始HTTP请求主体为字节串。这对于以不同于常规HTML格式的方式处理数据很有用：二进制图像，XML有效负载等。对于处理常规形式的数据，请使用&lt;a href=&quot;#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;HttpRequest.POST&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="715b3f9f429fb6e754020e59b8eed7539f00d149" translate="yes" xml:space="preserve">
          <source>The raw way</source>
          <target state="translated">原始方式</target>
        </trans-unit>
        <trans-unit id="f67046a869c69b3aaf280909110bbc953bfe86c8" translate="yes" xml:space="preserve">
          <source>The raw way to limit access to pages is to check &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt;&lt;code&gt;request.user.is_authenticated&lt;/code&gt;&lt;/a&gt; and either redirect to a login page:</source>
          <target state="translated">限制访问页面的原始方法是检查&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_authenticated&quot;&gt; &lt;code&gt;request.user.is_authenticated&lt;/code&gt; &lt;/a&gt;并重定向到登录页面：</target>
        </trans-unit>
        <trans-unit id="6c75648934376200140f4bf005288e7564bac759" translate="yes" xml:space="preserve">
          <source>The read/write mode for the file.</source>
          <target state="translated">文件的读/写模式。</target>
        </trans-unit>
        <trans-unit id="4c01eb817eec09ca50e33a8ba47b282978d394e4" translate="yes" xml:space="preserve">
          <source>The reader I/O classes return a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; instance from the WKB and/or WKT input given to their &lt;code&gt;read(geom)&lt;/code&gt; method.</source>
          <target state="translated">读取器I / O类从指定给其 &lt;code&gt;read(geom)&lt;/code&gt; 方法的WKB和/或WKT输入返回&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="85c204af2beee9e3ef134d6fbae39e718ebd4b51" translate="yes" xml:space="preserve">
          <source>The reason &lt;code&gt;is_safe&lt;/code&gt; is necessary is because there are plenty of normal string operations that will turn a &lt;code&gt;SafeData&lt;/code&gt; object back into a normal &lt;code&gt;str&lt;/code&gt; object and, rather than try to catch them all, which would be very difficult, Django repairs the damage after the filter has completed.</source>
          <target state="translated">&lt;code&gt;is_safe&lt;/code&gt; 必要的原因是，因为有很多正常的字符串操作会将 &lt;code&gt;SafeData&lt;/code&gt; 对象转换为普通的 &lt;code&gt;str&lt;/code&gt; 对象，而不是尝试全部捕获它们，这将非常困难，Django会在过滤器处理后修复损坏完成。</target>
        </trans-unit>
        <trans-unit id="214c03080cb7d8763e33ff5ad80d6a091a171ef5" translate="yes" xml:space="preserve">
          <source>The reason for setting a long-lived expiration time is to avoid problems in the case of a user closing a browser or bookmarking a page and then loading that page from a browser cache. Without persistent cookies, the form submission would fail in this case.</source>
          <target state="translated">设置长效过期时间的原因是为了避免在用户关闭浏览器或将某一页面作为书签,然后从浏览器缓存中加载该页面时出现问题。如果没有持久性Cookie,这种情况下表单提交会失败。</target>
        </trans-unit>
        <trans-unit id="544d10f483ba2b0003f8a634b4abb234daea28b0" translate="yes" xml:space="preserve">
          <source>The reason for this is that Django&amp;rsquo;s test runner performs a bit of black magic in order to determine which template was loaded by a given view. This black magic (essentially a patching of Django&amp;rsquo;s template system in memory) only happens during test running.</source>
          <target state="translated">这样做的原因是Django的测试运行程序执行了一些黑魔法，以便确定给定视图加载了哪个模板。这种黑魔法（本质上是内存中Django模板系统的补丁）仅在测试运行期间发生。</target>
        </trans-unit>
        <trans-unit id="4fb4e101909f33b9d9683c0bc9a13be5e852255a" translate="yes" xml:space="preserve">
          <source>The reason that there are separate commands to make and apply migrations is because you&amp;rsquo;ll commit migrations to your version control system and ship them with your app; they not only make your development easier, they&amp;rsquo;re also usable by other developers and in production.</source>
          <target state="translated">之所以使用单独的命令来进行和应用迁移，是因为您要将迁移提交到版本控制系统，并随应用程序一起交付；它们不仅使您的开发更加容易，而且还可以被其他开发人员和生产中使用。</target>
        </trans-unit>
        <trans-unit id="6aaa561d9d1c6329693a83ed1044922212be0503" translate="yes" xml:space="preserve">
          <source>The recommended convention is to put the configuration class in a submodule of the application called &lt;code&gt;apps&lt;/code&gt;. However, this isn&amp;rsquo;t enforced by Django.</source>
          <target state="translated">建议的约定是将配置类放在应用程序的子模块中，称为 &lt;code&gt;apps&lt;/code&gt; 。但是，这不是Django强制执行的。</target>
        </trans-unit>
        <trans-unit id="990ccf22fd7f716d0acf3fd1f32ff37692812367" translate="yes" xml:space="preserve">
          <source>The recommended source for the token is the &lt;code&gt;csrftoken&lt;/code&gt; cookie, which will be set if you&amp;rsquo;ve enabled CSRF protection for your views as outlined above.</source>
          <target state="translated">令牌的推荐来源是 &lt;code&gt;csrftoken&lt;/code&gt; cookie，如果您如上所述为视图启用了CSRF保护，则将设置该cookie。</target>
        </trans-unit>
        <trans-unit id="16c822e8d8ae8d31baa6ead02b9bb62819a6873e" translate="yes" xml:space="preserve">
          <source>The recommended way to create a &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; is by calling the factory methods of the &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;#django.template.Engine.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.template.Engine.select_template&quot;&gt;&lt;code&gt;select_template()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.template.Engine.from_string&quot;&gt;&lt;code&gt;from_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">推荐的创建&lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt;是调用&lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt;的工厂方法：&lt;a href=&quot;#django.template.Engine.get_template&quot;&gt; &lt;code&gt;get_template()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#django.template.Engine.select_template&quot;&gt; &lt;code&gt;select_template()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.template.Engine.from_string&quot;&gt; &lt;code&gt;from_string()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b96f4fcdecba3ec643634ed634b76d2f2457d5fc" translate="yes" xml:space="preserve">
          <source>The redirects app</source>
          <target state="translated">重定向应用程序</target>
        </trans-unit>
        <trans-unit id="798326dfff453527671b17b23eacb15ecc84f6dc" translate="yes" xml:space="preserve">
          <source>The reference documentation for Django&amp;rsquo;s &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based views&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;class-based view mixins&lt;/a&gt; will help you in understanding which attributes and methods are likely to cause conflict between different classes and mixins.</source>
          <target state="translated">Django的&lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;基于类的视图&lt;/a&gt;和基于&lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;类的视图mixin&lt;/a&gt;的参考文档将帮助您了解哪些属性和方法可能会导致不同的类和mixin之间发生冲突。</target>
        </trans-unit>
        <trans-unit id="a916639d3eb5baeb04f3b7117c968ba3dee4820f" translate="yes" xml:space="preserve">
          <source>The regular expression pattern to search for within the provided &lt;code&gt;value&lt;/code&gt;, or a pre-compiled regular expression. By default, raises a &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;#django.core.validators.RegexValidator.message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.validators.RegexValidator.code&quot;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/a&gt; if a match is not found. That standard behavior can be reversed by setting &lt;a href=&quot;#django.core.validators.RegexValidator.inverse_match&quot;&gt;&lt;code&gt;inverse_match&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;, in which case the &lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; is raised when a match &lt;strong&gt;is&lt;/strong&gt; found. By default, matches any string (including an empty string).</source>
          <target state="translated">在提供的 &lt;code&gt;value&lt;/code&gt; 内搜索的正则表达式模式，或预编译的正则表达式。默认情况下，如果未找到匹配项，则会引发带有&lt;a href=&quot;#django.core.validators.RegexValidator.message&quot;&gt; &lt;code&gt;message&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.core.validators.RegexValidator.code&quot;&gt; &lt;code&gt;code&lt;/code&gt; &lt;/a&gt;的&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;。该标准的行为可以通过设置逆转&lt;a href=&quot;#django.core.validators.RegexValidator.inverse_match&quot;&gt; &lt;code&gt;inverse_match&lt;/code&gt; &lt;/a&gt;至 &lt;code&gt;True&lt;/code&gt; ，在这种情况下&lt;a href=&quot;exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;匹配时引发&lt;strong&gt;的&lt;/strong&gt;发现。默认情况下，匹配任何字符串（包括空字符串）。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4d3851865f3b041bc8b2d98b3cdfc230892028d7" translate="yes" xml:space="preserve">
          <source>The regular expression syntax is that of the database backend in use. In the case of SQLite, which has no built in regular expression support, this feature is provided by a (Python) user-defined REGEXP function, and the regular expression syntax is therefore that of Python&amp;rsquo;s &lt;code&gt;re&lt;/code&gt; module.</source>
          <target state="translated">正则表达式语法是所使用的数据库后端的语法。对于没有内置正则表达式支持的SQLite，此功能由（Python）用户定义的REGEXP函数提供，因此正则表达式语法为Python的 &lt;code&gt;re&lt;/code&gt; 模块的语法。</target>
        </trans-unit>
        <trans-unit id="f2ce188f8603a02ad0bd740618f7d5b4f732f2bc" translate="yes" xml:space="preserve">
          <source>The related objects also get two methods, &lt;code&gt;get_next_in_order()&lt;/code&gt; and &lt;code&gt;get_previous_in_order()&lt;/code&gt;, which can be used to access those objects in their proper order. Assuming the &lt;code&gt;Answer&lt;/code&gt; objects are ordered by &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">相关对象还获得了两个方法， &lt;code&gt;get_next_in_order()&lt;/code&gt; 和 &lt;code&gt;get_previous_in_order()&lt;/code&gt; ，可用于以适当的顺序访问这些对象。假设 &lt;code&gt;Answer&lt;/code&gt; 对象按 &lt;code&gt;id&lt;/code&gt; 排序：</target>
        </trans-unit>
        <trans-unit id="a8d686cac36b66df729071ab421f1d91b4f484b3" translate="yes" xml:space="preserve">
          <source>The relation on the related object back to this object doesn&amp;rsquo;t exist by default. Setting &lt;code&gt;related_query_name&lt;/code&gt; creates a relation from the related object back to this one. This allows querying and filtering from the related object.</source>
          <target state="translated">默认情况下，不存在相关对象与该对象之间的关系。设置 &lt;code&gt;related_query_name&lt;/code&gt; 会创建一个从相关对象到该对象的关系。这允许从相关对象进行查询和过滤。</target>
        </trans-unit>
        <trans-unit id="395def1e7858b0c903e1ef9c53671f055576daec" translate="yes" xml:space="preserve">
          <source>The relationship and history of generic views, class-based views, and class-based generic views</source>
          <target state="translated">通用视图、基于类的视图和基于类的通用视图的关系和历史。</target>
        </trans-unit>
        <trans-unit id="d259b62b15cf44ff7b234cf0f2bd1e1e29ef3766" translate="yes" xml:space="preserve">
          <source>The relative path to the template as passed into the template loader.</source>
          <target state="translated">传入模板加载器的模板的相对路径。</target>
        </trans-unit>
        <trans-unit id="628dc1e654293b04802554bd23fc97503b48e57f" translate="yes" xml:space="preserve">
          <source>The reloading happens from the database the instance was loaded from, or from the default database if the instance wasn&amp;rsquo;t loaded from the database. The &lt;code&gt;using&lt;/code&gt; argument can be used to force the database used for reloading.</source>
          <target state="translated">重新加载是从加载实例的数据库开始的，或者如果未从数据库加载实例，则从默认数据库重新加载。在 &lt;code&gt;using&lt;/code&gt; 参数可以用来强制用于重装数据库。</target>
        </trans-unit>
        <trans-unit id="3649420c1724d433283ebf8ec0159bd2d21fff30" translate="yes" xml:space="preserve">
          <source>The remaining specialized &lt;a href=&quot;#django.test.TransactionTestCase.assertQuerysetEqual&quot;&gt;&lt;code&gt;assert*&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">其余的专用&lt;a href=&quot;#django.test.TransactionTestCase.assertQuerysetEqual&quot;&gt; &lt;code&gt;assert*&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="d4105885a155f0684f2efd564da42822f281117c" translate="yes" xml:space="preserve">
          <source>The rendering of form templates is controlled by a customizable renderer class. A custom renderer can be specified by updating the &lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt;&lt;code&gt;FORM_RENDERER&lt;/code&gt;&lt;/a&gt; setting. It defaults to &lt;code&gt;'&lt;/code&gt;&lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt;&lt;code&gt;django.forms.renderers.DjangoTemplates&lt;/code&gt;&lt;/a&gt;&lt;code&gt;'&lt;/code&gt;.</source>
          <target state="translated">表单模板的呈现由可自定义的呈现器类控制。可以通过更新&lt;a href=&quot;../settings#std:setting-FORM_RENDERER&quot;&gt; &lt;code&gt;FORM_RENDERER&lt;/code&gt; &lt;/a&gt;设置来指定自定义渲染器。默认为 &lt;code&gt;'&lt;/code&gt; &lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt; &lt;code&gt;django.forms.renderers.DjangoTemplates&lt;/code&gt; &lt;/a&gt; &lt;code&gt;'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f00d332bd8e835bb0d9f29f5a435c37b52b2bd4a" translate="yes" xml:space="preserve">
          <source>The rendering process</source>
          <target state="translated">渲染过程</target>
        </trans-unit>
        <trans-unit id="2b74e08a4e356bf4a91fa743c425960507371130" translate="yes" xml:space="preserve">
          <source>The request (the browser) hasn&amp;rsquo;t sent an &lt;code&gt;Accept-Encoding&lt;/code&gt; header containing &lt;code&gt;gzip&lt;/code&gt;.</source>
          <target state="translated">该请求（浏览器）尚未发送包含 &lt;code&gt;gzip&lt;/code&gt; 的 &lt;code&gt;Accept-Encoding&lt;/code&gt; 标头。</target>
        </trans-unit>
        <trans-unit id="87b9aefcbd820112e09338669560b1cdc27b0434" translate="yes" xml:space="preserve">
          <source>The request data that stimulated the response.</source>
          <target state="translated">激发响应的请求数据。</target>
        </trans-unit>
        <trans-unit id="aca14c4668cd5b5621f25092a67f3965992fab48" translate="yes" xml:space="preserve">
          <source>The request factory</source>
          <target state="translated">请求工厂</target>
        </trans-unit>
        <trans-unit id="d1f172fd54fab5fdf8cf9450d6c69da0daaf2b30" translate="yes" xml:space="preserve">
          <source>The request object used to generate this response.</source>
          <target state="translated">用于生成该响应的请求对象。</target>
        </trans-unit>
        <trans-unit id="8b1495313a0a791fb27607d327e80fe685f6a312" translate="yes" xml:space="preserve">
          <source>The required method &lt;a href=&quot;#django.forms.MultiWidget.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; breaks up a &lt;code&gt;datetime.date&lt;/code&gt; value into the day, month, and year values corresponding to each widget. If an invalid date was selected, such as the non-existent 30th February, the &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; passes this method a string instead, so that needs parsing. The final &lt;code&gt;return&lt;/code&gt; handles when &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, meaning we don&amp;rsquo;t have any defaults for our subwidgets.</source>
          <target state="translated">必需的方法&lt;a href=&quot;#django.forms.MultiWidget.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt;将 &lt;code&gt;datetime.date&lt;/code&gt; 值分解为与每个小部件相对应的日，月和年值。如果选择了无效的日期（例如，不存在的2月30日），则&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;会通过此方法为字符串传递字符串，因此需要解析。当 &lt;code&gt;value&lt;/code&gt; 为 &lt;code&gt;None&lt;/code&gt; 时，最终 &lt;code&gt;return&lt;/code&gt; 处理，这意味着我们的子小部件没有任何默认值。</target>
        </trans-unit>
        <trans-unit id="5955d10e9af56c8f4dc87bad1ae31f82927bdbcb" translate="yes" xml:space="preserve">
          <source>The resampling algorithm used for warping can be specified with the &lt;code&gt;resampling&lt;/code&gt; argument. The default is &lt;code&gt;NearestNeighbor&lt;/code&gt;, and the other allowed values are &lt;code&gt;Bilinear&lt;/code&gt;, &lt;code&gt;Cubic&lt;/code&gt;, &lt;code&gt;CubicSpline&lt;/code&gt;, &lt;code&gt;Lanczos&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, and &lt;code&gt;Mode&lt;/code&gt;.</source>
          <target state="translated">可以使用 &lt;code&gt;resampling&lt;/code&gt; 参数指定用于变形的重新采样算法。默认值为 &lt;code&gt;NearestNeighbor&lt;/code&gt; ，其他允许的值为 &lt;code&gt;Bilinear&lt;/code&gt; ， &lt;code&gt;Cubic&lt;/code&gt; ， &lt;code&gt;CubicSpline&lt;/code&gt; ， &lt;code&gt;Lanczos&lt;/code&gt; ， &lt;code&gt;Average&lt;/code&gt; 和 &lt;code&gt;Mode&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf2cec9af0d52f9fcaa5a85cdd4d838ace8e7b3b" translate="yes" xml:space="preserve">
          <source>The response class to be returned by &lt;code&gt;render_to_response&lt;/code&gt; method. Default is &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt;. The template and context of &lt;code&gt;TemplateResponse&lt;/code&gt; instances can be altered later (e.g. in &lt;a href=&quot;../../topics/http/middleware#template-response-middleware&quot;&gt;template response middleware&lt;/a&gt;).</source>
          <target state="translated">由 &lt;code&gt;render_to_response&lt;/code&gt; 方法返回的响应类。默认值为&lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;。可以稍后更改 &lt;code&gt;TemplateResponse&lt;/code&gt; 实例的模板和上下文（例如，在&lt;a href=&quot;../../topics/http/middleware#template-response-middleware&quot;&gt;模板响应中间件中&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a4670161441f4fe196b94864edd9d000edb7a23c" translate="yes" xml:space="preserve">
          <source>The response format is as follows:</source>
          <target state="translated">回复格式如下:</target>
        </trans-unit>
        <trans-unit id="d7a537914ffe8060b589033071bf0b85a4cceb6e" translate="yes" xml:space="preserve">
          <source>The response gets a special MIME type, &lt;em&gt;text/csv&lt;/em&gt;. This tells browsers that the document is a CSV file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which will result in ugly, scary gobbledygook in the browser window.</source>
          <target state="translated">响应将获得特殊的MIME类型&lt;em&gt;text / csv&lt;/em&gt;。这告诉浏览器该文档是CSV文件，而不是HTML文件。如果不选择此项，浏览器可能会将输出解释为HTML，这将在浏览器窗口中导致难看的，可怕的gobbledygook。</target>
        </trans-unit>
        <trans-unit id="88e8fd0f065cc28fd8a941930557ccba8eef9e64" translate="yes" xml:space="preserve">
          <source>The response gets an additional &lt;code&gt;Content-Disposition&lt;/code&gt; header, which contains the name of the CSV file. This filename is arbitrary; call it whatever you want. It&amp;rsquo;ll be used by browsers in the &amp;ldquo;Save as&amp;hellip;&amp;rdquo; dialog, etc.</source>
          <target state="translated">响应将获得一个附加的 &lt;code&gt;Content-Disposition&lt;/code&gt; 标头，其中包含CSV文件的名称。该文件名是任意的；随便你怎么称呼它。浏览器将在&amp;ldquo;另存为...&amp;rdquo;对话框中使用它，等等。</target>
        </trans-unit>
        <trans-unit id="20d9a12f39752374cd8ca0ae5722416047afa081" translate="yes" xml:space="preserve">
          <source>The response has already set the &lt;code&gt;Content-Encoding&lt;/code&gt; header.</source>
          <target state="translated">响应已经设置了 &lt;code&gt;Content-Encoding&lt;/code&gt; 标头。</target>
        </trans-unit>
        <trans-unit id="d088dab9aa5e290bd218d9e46e9510b5a370c8db" translate="yes" xml:space="preserve">
          <source>The response will automatically set the MIME type &lt;em&gt;application/pdf&lt;/em&gt; based on the filename extension. This tells browsers that the document is a PDF file, rather than an HTML file or a generic &lt;code&gt;application/octet-stream&lt;/code&gt; binary content.</source>
          <target state="translated">响应将基于文件扩展名自动设置MIME类型&lt;em&gt;application / pdf&lt;/em&gt;。这告诉浏览器该文档是PDF文件，而不是HTML文件或通用 &lt;code&gt;application/octet-stream&lt;/code&gt; 二进制内容。</target>
        </trans-unit>
        <trans-unit id="2e428b0f11924508a88f262351963fccf091b6c5" translate="yes" xml:space="preserve">
          <source>The result above will be ordered by &lt;code&gt;pub_date&lt;/code&gt; descending, then by &lt;code&gt;headline&lt;/code&gt; ascending. The negative sign in front of &lt;code&gt;&quot;-pub_date&quot;&lt;/code&gt; indicates &lt;em&gt;descending&lt;/em&gt; order. Ascending order is implied. To order randomly, use &lt;code&gt;&quot;?&quot;&lt;/code&gt;, like so:</source>
          <target state="translated">上面的结果将按 &lt;code&gt;pub_date&lt;/code&gt; 降序排列，然后按 &lt;code&gt;headline&lt;/code&gt; 升序排列。 &lt;code&gt;&quot;-pub_date&quot;&lt;/code&gt; 前面的负号表示&lt;em&gt;降序&lt;/em&gt;。隐含升序。要随机订购，请使用 &lt;code&gt;&quot;?&quot;&lt;/code&gt; ，就像这样：</target>
        </trans-unit>
        <trans-unit id="3538f23694ada4bbb6f9528816858d186a1b8b5c" translate="yes" xml:space="preserve">
          <source>The result obeys the following contract:</source>
          <target state="translated">结果服从以下合同。</target>
        </trans-unit>
        <trans-unit id="c14e6d591ac1c8b97d9f4c9fd6aea23af150fa40" translate="yes" xml:space="preserve">
          <source>The result of a &lt;code&gt;gettext_lazy()&lt;/code&gt; call can be used wherever you would use a string (a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object) in other Django code, but it may not work with arbitrary Python code. For example, the following won&amp;rsquo;t work because the &lt;a href=&quot;https://pypi.org/project/requests/&quot;&gt;requests&lt;/a&gt; library doesn&amp;rsquo;t handle &lt;code&gt;gettext_lazy&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;gettext_lazy()&lt;/code&gt; 调用的结果可以在其他Django代码中使用字符串（&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;对象）的任何地方使用，但可能不适用于任意Python代码。例如，以下内容将不起作用，因为&lt;a href=&quot;https://pypi.org/project/requests/&quot;&gt;请求&lt;/a&gt;库无法处理 &lt;code&gt;gettext_lazy&lt;/code&gt; 对象：</target>
        </trans-unit>
        <trans-unit id="7e7830179f43052d618c32acfea5c89d8c4fe2d6" translate="yes" xml:space="preserve">
          <source>The result of refining a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is itself a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, so it&amp;rsquo;s possible to chain refinements together. For example:</source>
          <target state="translated">优化&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;的结果本身就是&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;，因此可以将优化链在一起。例如：</target>
        </trans-unit>
        <trans-unit id="ac9654f7b6ea693576218903d8e129485c97271c" translate="yes" xml:space="preserve">
          <source>The result of the underlying &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.size&quot;&gt;&lt;code&gt;Storage.size()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">基础&lt;a href=&quot;../files/storage#django.core.files.storage.Storage.size&quot;&gt; &lt;code&gt;Storage.size()&lt;/code&gt; &lt;/a&gt;方法的结果。</target>
        </trans-unit>
        <trans-unit id="0e3d6cea04a2cfcbbe2aeef0076ec48f7c2afd31" translate="yes" xml:space="preserve">
          <source>The resulting SQL of the above example would be:</source>
          <target state="translated">上述例子的SQL结果是:。</target>
        </trans-unit>
        <trans-unit id="6188e80a07d82c2b94db9d423143039cc16f0659" translate="yes" xml:space="preserve">
          <source>The resulting data can be accessed in JavaScript like this:</source>
          <target state="translated">由此产生的数据可以用JavaScript来访问,比如这样。</target>
        </trans-unit>
        <trans-unit id="0947bc3770f747599e991dec0f778f2763925658" translate="yes" xml:space="preserve">
          <source>The return value of the &lt;code&gt;call_command()&lt;/code&gt; function is the same as the return value of the &lt;code&gt;handle()&lt;/code&gt; method of the command.</source>
          <target state="translated">所述的返回值 &lt;code&gt;call_command()&lt;/code&gt; 函数是相同的返回值 &lt;code&gt;handle()&lt;/code&gt; 命令的方法。</target>
        </trans-unit>
        <trans-unit id="3af0a38e6adad5be9bbb174e2b2e9f885c843b3f" translate="yes" xml:space="preserve">
          <source>The return value of this method replaces the existing value in &lt;code&gt;cleaned_data&lt;/code&gt;, so it must be the field&amp;rsquo;s value from &lt;code&gt;cleaned_data&lt;/code&gt; (even if this method didn&amp;rsquo;t change it) or a new cleaned value.</source>
          <target state="translated">该方法的返回值将替换现有的值 &lt;code&gt;cleaned_data&lt;/code&gt; ，所以它必须是该字段的值从 &lt;code&gt;cleaned_data&lt;/code&gt; （即使这个方法并没有改变的话）或新的清洁值。</target>
        </trans-unit>
        <trans-unit id="93e2f040a9a63e3a0e45c70d06ff09c108767c11" translate="yes" xml:space="preserve">
          <source>The return value will be the number of successfully delivered messages (which can be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; since it can only send one message).</source>
          <target state="translated">返回值将是成功传递的消息数（可以为 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;1&lt;/code&gt; ,因为它只能发送一条消息）。</target>
        </trans-unit>
        <trans-unit id="91ddd3d7a5351aa57493513cc55ee1befe42c9a0" translate="yes" xml:space="preserve">
          <source>The return value will be the number of successfully delivered messages.</source>
          <target state="translated">返回值将是成功传递的消息数量。</target>
        </trans-unit>
        <trans-unit id="28f60b84cb824b48c98f4e41bbf07ed96ebbfa63" translate="yes" xml:space="preserve">
          <source>The returned ranges are strictly greater than the passed range. In other words, the all the points in the returned range are greater than all those in the passed range.</source>
          <target state="translated">返回的范围严格大于传递的范围。换句话说,返回范围内的所有点都大于传递范围内的所有点。</target>
        </trans-unit>
        <trans-unit id="1b9185c4933c6310716ebc4a440ef9a643c8787d" translate="yes" xml:space="preserve">
          <source>The returned ranges are strictly less than the passed range. In other words, all the points in the returned range are less than all those in the passed range.</source>
          <target state="translated">返回的范围严格小于传递的范围。换句话说,返回范围内的所有点都小于传递范围内的所有点。</target>
        </trans-unit>
        <trans-unit id="a5389891829ba1d74991c292d8bbf5d732122dee" translate="yes" xml:space="preserve">
          <source>The returned ranges do not contain any points greater than the passed range, that is the upper bound of the returned range is at most the upper bound of the passed range.</source>
          <target state="translated">返回的范围不包含任何大于传递的范围的点,也就是说,返回的范围的上界最多就是传递的范围的上界。</target>
        </trans-unit>
        <trans-unit id="2d1a674c47980282cee37557270e2c208377b77f" translate="yes" xml:space="preserve">
          <source>The returned ranges do not contain any points less than the passed range, that is the lower bound of the returned range is at least the lower bound of the passed range.</source>
          <target state="translated">返回的范围不包含任何小于传递范围的点,即返回范围的下限至少是传递范围的下限。</target>
        </trans-unit>
        <trans-unit id="e2ffdb7d0ff2e146d12e60ab281a0e4ccdf8c087" translate="yes" xml:space="preserve">
          <source>The returned ranges share a bound with the passed range.</source>
          <target state="translated">返回的范围与传递的范围共享一个边界。</target>
        </trans-unit>
        <trans-unit id="b314ccbc42377f9f4d0e6c927dde27486cde1172" translate="yes" xml:space="preserve">
          <source>The returned view has &lt;code&gt;view_class&lt;/code&gt; and &lt;code&gt;view_initkwargs&lt;/code&gt; attributes.</source>
          <target state="translated">返回的视图具有 &lt;code&gt;view_class&lt;/code&gt; 和 &lt;code&gt;view_initkwargs&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="833fca1f313944a2f60c7f8c3995dc0ff4e9b274" translate="yes" xml:space="preserve">
          <source>The reverse name of the &lt;code&gt;common.ChildA.m2m&lt;/code&gt; field will be &lt;code&gt;common_childa_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;common_childas&lt;/code&gt;. The reverse name of the &lt;code&gt;common.ChildB.m2m&lt;/code&gt; field will be &lt;code&gt;common_childb_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;common_childbs&lt;/code&gt;. Finally, the reverse name of the &lt;code&gt;rare.ChildB.m2m&lt;/code&gt; field will be &lt;code&gt;rare_childb_related&lt;/code&gt; and the reverse query name will be &lt;code&gt;rare_childbs&lt;/code&gt;. It&amp;rsquo;s up to you how you use the &lt;code&gt;'%(class)s'&lt;/code&gt; and &lt;code&gt;'%(app_label)s'&lt;/code&gt; portion to construct your related name or related query name but if you forget to use it, Django will raise errors when you perform system checks (or run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;common.ChildA.m2m&lt;/code&gt; 字段的反向名称将是 &lt;code&gt;common_childa_related&lt;/code&gt; ，反向查询名称将是 &lt;code&gt;common_childas&lt;/code&gt; 。 &lt;code&gt;common.ChildB.m2m&lt;/code&gt; 字段的反向名称将是 &lt;code&gt;common_childb_related&lt;/code&gt; ，反向查询名称将是 &lt;code&gt;common_childbs&lt;/code&gt; 。最后， &lt;code&gt;rare.ChildB.m2m&lt;/code&gt; 字段的反向名称将是 &lt;code&gt;rare_childb_related&lt;/code&gt; ，反向查询名称将是 &lt;code&gt;rare_childbs&lt;/code&gt; 。由您决定如何使用 &lt;code&gt;'%(class)s'&lt;/code&gt; 和 &lt;code&gt;'%(app_label)s'&lt;/code&gt; 部分来构造您的相关名称或相关查询名称，但是如果您忘记使用它，则在执行系统检查（或运行&lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt;）时Django会引发错误。</target>
        </trans-unit>
        <trans-unit id="fae6307173a40526569fc75b21329c07eb4d27bb" translate="yes" xml:space="preserve">
          <source>The right-hand side - what &lt;code&gt;lhs&lt;/code&gt; is being compared against. It can be a plain value, or something that compiles into SQL, typically an &lt;code&gt;F()&lt;/code&gt; object or a &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">右侧- &lt;code&gt;lhs&lt;/code&gt; 进行比较。它可以是一个普通值，也可以是可编译为SQL的值，通常是 &lt;code&gt;F()&lt;/code&gt; 对象或 &lt;code&gt;QuerySet&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2eab55fb4d3686d02dfd4cea51948a189eed2720" translate="yes" xml:space="preserve">
          <source>The root directory of one of your Django apps.</source>
          <target state="translated">你的一个Django应用的根目录。</target>
        </trans-unit>
        <trans-unit id="20e5e766f6f7e052ab181f9154fd81864a8095a6" translate="yes" xml:space="preserve">
          <source>The root directory of your Django project (the one that contains &lt;code&gt;manage.py&lt;/code&gt;).</source>
          <target state="translated">Django项目的根目录（包含 &lt;code&gt;manage.py&lt;/code&gt; 的目录）。</target>
        </trans-unit>
        <trans-unit id="ca093a763edb27f597a68348671afc2524db0619" translate="yes" xml:space="preserve">
          <source>The route of the matching URL pattern.</source>
          <target state="translated">匹配URL模式的路径。</target>
        </trans-unit>
        <trans-unit id="cd1950a7fb4d436e01762b44823625a3c7a38b2e" translate="yes" xml:space="preserve">
          <source>The same &lt;code&gt;closepoll&lt;/code&gt; could be easily modified to delete a given poll instead of closing it by accepting additional command line options. These custom options can be added in the &lt;a href=&quot;#django.core.management.BaseCommand.add_arguments&quot;&gt;&lt;code&gt;add_arguments()&lt;/code&gt;&lt;/a&gt; method like this:</source>
          <target state="translated">可以轻松修改同一 &lt;code&gt;closepoll&lt;/code&gt; 以删除给定的民意调查，而不用通过接受其他命令行选项将其关闭。可以将这些自定义选项添加到&lt;a href=&quot;#django.core.management.BaseCommand.add_arguments&quot;&gt; &lt;code&gt;add_arguments()&lt;/code&gt; &lt;/a&gt;方法中，如下所示：</target>
        </trans-unit>
        <trans-unit id="8c9e104769a1a674a48a3fda24b00b9032252d95" translate="yes" xml:space="preserve">
          <source>The same field can&amp;rsquo;t be listed in both &lt;code&gt;list_editable&lt;/code&gt; and &lt;code&gt;list_display_links&lt;/code&gt; &amp;ndash; a field can&amp;rsquo;t be both a form and a link.</source>
          <target state="translated">在 &lt;code&gt;list_editable&lt;/code&gt; 和 &lt;code&gt;list_display_links&lt;/code&gt; 中都不能列出相同的字段-一个字段不能既是表单又是链接。</target>
        </trans-unit>
        <trans-unit id="5e37b2bef8ba580cd5ab541b71879acdd872421b" translate="yes" xml:space="preserve">
          <source>The same incremental upgrade approach is recommended when upgrading from one LTS to the next.</source>
          <target state="translated">从一个LTS升级到下一个LTS时,建议采用同样的渐进式升级方法。</target>
        </trans-unit>
        <trans-unit id="b3b3bfbf9c27c76140be97fd31d3c9815706e4c4" translate="yes" xml:space="preserve">
          <source>The same issue can be triggered by using a reserved sequence in filter arguments:</source>
          <target state="translated">同样的问题可以通过在过滤器参数中使用保留序列来触发。</target>
        </trans-unit>
        <trans-unit id="7d49bcf4db128a11dcf3ae24d922d2857a14a5ed" translate="yes" xml:space="preserve">
          <source>The same rules apply to the &lt;code&gt;aggregate()&lt;/code&gt; clause. If you wanted to know the lowest and highest price of any book that is available for sale in any of the stores, you could use the aggregate:</source>
          <target state="translated">相同的规则适用于 &lt;code&gt;aggregate()&lt;/code&gt; 子句。如果您想知道任何一家商店中可以出售的所有书籍的最低和最高价格，可以使用以下汇总：</target>
        </trans-unit>
        <trans-unit id="d00e6744dfe65784353ae5af25539be2f599e326" translate="yes" xml:space="preserve">
          <source>The same template context is used for subject template. Subject must be single line plain text string.</source>
          <target state="translated">主题模板使用相同的模板上下文。主题必须是单行纯文本字符串。</target>
        </trans-unit>
        <trans-unit id="58bcd3c2076a780cd37416681b0a01638fc523aa" translate="yes" xml:space="preserve">
          <source>The same type of situation arises with a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. For example, if an &lt;code&gt;Entry&lt;/code&gt; has a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; called &lt;code&gt;tags&lt;/code&gt;, we might want to find entries linked to tags called &lt;em&gt;&amp;ldquo;music&amp;rdquo;&lt;/em&gt; and &lt;em&gt;&amp;ldquo;bands&amp;rdquo;&lt;/em&gt; or we might want an entry that contains a tag with a name of &lt;em&gt;&amp;ldquo;music&amp;rdquo;&lt;/em&gt; and a status of &lt;em&gt;&amp;ldquo;public&amp;rdquo;&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 也会&lt;/a&gt;出现相同类型的情况。例如，如果一个 &lt;code&gt;Entry&lt;/code&gt; 具有一个名为 &lt;code&gt;tags&lt;/code&gt; 的&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;，我们可能想要查找链接到名为&lt;em&gt;&amp;ldquo; music&amp;rdquo;&lt;/em&gt;和&lt;em&gt;&amp;ldquo; bands&amp;rdquo;&lt;/em&gt;的标签的条目，或者我们可能想要一个包含名称为&lt;em&gt;&amp;ldquo; music&amp;rdquo;&lt;/em&gt;且状态为的标签的条目。&lt;em&gt;&amp;ldquo;公共&amp;rdquo;&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2a6911035402212023ff113841a3af05f4fc2e13" translate="yes" xml:space="preserve">
          <source>The same values can be retrieved by accessing the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/a&gt; (indices 0 and 3), &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/a&gt; (indices 1 and 5) and &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.skew&quot;&gt;&lt;code&gt;skew&lt;/code&gt;&lt;/a&gt; (indices 2 and 4) properties.</source>
          <target state="translated">通过访问&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.origin&quot;&gt; &lt;code&gt;origin&lt;/code&gt; &lt;/a&gt;（索引0和3），&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.scale&quot;&gt; &lt;code&gt;scale&lt;/code&gt; &lt;/a&gt;（索引1和5）和&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.skew&quot;&gt; &lt;code&gt;skew&lt;/code&gt; &lt;/a&gt;（索引2和4）属性可以检索相同的值。</target>
        </trans-unit>
        <trans-unit id="24a51372eb1af2fbbb9e2958f4112559e5cf0c7d" translate="yes" xml:space="preserve">
          <source>The scope of the variable created by the &lt;code&gt;as var&lt;/code&gt; syntax is the &lt;code&gt;{% block %}&lt;/code&gt; in which the &lt;code&gt;{% url %}&lt;/code&gt; tag appears.</source>
          <target state="translated">&lt;code&gt;as var&lt;/code&gt; 语法创建的变量的范围是 &lt;code&gt;{% block %}&lt;/code&gt; ，其中出现 &lt;code&gt;{% url %}&lt;/code&gt; 标签。</target>
        </trans-unit>
        <trans-unit id="d71fa59563ec81dc34bbf9805ee87b55f530b868" translate="yes" xml:space="preserve">
          <source>The script runs over your project source tree or your application source tree and pulls out all strings marked for translation (see &lt;a href=&quot;#how-django-discovers-translations&quot;&gt;How Django discovers translations&lt;/a&gt; and be sure &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; is configured correctly). It creates (or updates) a message file in the directory &lt;code&gt;locale/LANG/LC_MESSAGES&lt;/code&gt;. In the &lt;code&gt;de&lt;/code&gt; example, the file will be &lt;code&gt;locale/de/LC_MESSAGES/django.po&lt;/code&gt;.</source>
          <target state="translated">该脚本在项目源树或应用程序源树上运行，并拉出所有标记为翻译的字符串（请参阅&lt;a href=&quot;#how-django-discovers-translations&quot;&gt;Django如何发现翻译&lt;/a&gt;并确保&lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt; &lt;code&gt;LOCALE_PATHS&lt;/code&gt; &lt;/a&gt;配置正确）。它在 &lt;code&gt;locale/LANG/LC_MESSAGES&lt;/code&gt; 目录中创建（或更新）消息文件。在 &lt;code&gt;de&lt;/code&gt; 示例中，文件将是 &lt;code&gt;locale/de/LC_MESSAGES/django.po&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01d4ce0747b4bb3734054c4649bc904ba315d5e3" translate="yes" xml:space="preserve">
          <source>The script should be run from one of two places:</source>
          <target state="translated">脚本应该从两个地方之一运行。</target>
        </trans-unit>
        <trans-unit id="5a96260ec28837c3111286a3e6202d9d45a94842" translate="yes" xml:space="preserve">
          <source>The second approach for reporting validation errors might involve assigning the error message to one of the fields. In this case, let&amp;rsquo;s assign an error message to both the &amp;ldquo;subject&amp;rdquo; and &amp;ldquo;cc_myself&amp;rdquo; rows in the form display. Be careful when doing this in practice, since it can lead to confusing form output. We&amp;rsquo;re showing what is possible here and leaving it up to you and your designers to work out what works effectively in your particular situation. Our new code (replacing the previous sample) looks like this:</source>
          <target state="translated">报告验证错误的第二种方法可能涉及将错误消息分配给一个字段。在这种情况下，让我们将错误消息分配给表单显示中的&amp;ldquo;主题&amp;rdquo;和&amp;ldquo; cc_myself&amp;rdquo;行。在实践中进行此操作时要小心，因为它可能导致表单输出混乱。我们在这里展示了可能的方法，然后由您和您的设计师自行决定在特定情况下有效的方法。我们的新代码（取代了先前的示例）如下所示：</target>
        </trans-unit>
        <trans-unit id="5f7d92f7e7b0791391ff1e74b29a6f88aa82af72" translate="yes" xml:space="preserve">
          <source>The second approach is to use the &lt;code&gt;open()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; methods on the email backend to manually control the connection. &lt;code&gt;send_messages()&lt;/code&gt; will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example:</source>
          <target state="translated">第二种方法是在电子邮件后端上使用 &lt;code&gt;open()&lt;/code&gt; 和 &lt;code&gt;close()&lt;/code&gt; 方法来手动控制连接。 &lt;code&gt;send_messages()&lt;/code&gt; 将不会手动打开或关闭已打开的连接，因此，如果您手动打开连接，则可以控制何时关闭。例如：</target>
        </trans-unit>
        <trans-unit id="2e3efc24c7fd20fc9df2c7d1b679b41d5aefd2f2" translate="yes" xml:space="preserve">
          <source>The second argument of &lt;code&gt;add_error()&lt;/code&gt; can be a string, or preferably an instance of &lt;code&gt;ValidationError&lt;/code&gt;. See &lt;a href=&quot;#raising-validation-error&quot;&gt;Raising ValidationError&lt;/a&gt; for more details. Note that &lt;code&gt;add_error()&lt;/code&gt; automatically removes the field from &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_error()&lt;/code&gt; 的第二个参数可以是字符串，或者最好是 &lt;code&gt;ValidationError&lt;/code&gt; 的实例。有关更多详细信息，请参见&lt;a href=&quot;#raising-validation-error&quot;&gt;引发ValidationError&lt;/a&gt;。请注意， &lt;code&gt;add_error()&lt;/code&gt; 会自动从 &lt;code&gt;cleaned_data&lt;/code&gt; 中删除该字段。</target>
        </trans-unit>
        <trans-unit id="9231b4a9c11e46f633fc4359e4166a94d7495997" translate="yes" xml:space="preserve">
          <source>The second class is the &lt;code&gt;Field&lt;/code&gt; subclass. This is the class that knows how to convert your first class back and forth between its permanent storage form and the Python form.</source>
          <target state="translated">第二类是 &lt;code&gt;Field&lt;/code&gt; 子类。这个类知道如何在其永久存储形式和Python形式之间来回转换您的第一个类。</target>
        </trans-unit>
        <trans-unit id="2749519ed6cc287c189a583a5dbe03565b43c2dc" translate="yes" xml:space="preserve">
          <source>The second difference is that it automatically populates the context with a few variables, according to the engine&amp;rsquo;s &lt;code&gt;context_processors&lt;/code&gt; configuration option.</source>
          <target state="translated">第二个区别是，根据引擎的 &lt;code&gt;context_processors&lt;/code&gt; 配置选项，它会自动用几个变量填充上下文。</target>
        </trans-unit>
        <trans-unit id="04cdab600ff6d492b9c85e51f9ea616f0ecc41ea" translate="yes" xml:space="preserve">
          <source>The second option is to use the &lt;code&gt;force_insert&lt;/code&gt; option to &lt;code&gt;save()&lt;/code&gt; to ensure that Django does an SQL &lt;code&gt;INSERT&lt;/code&gt;:</source>
          <target state="translated">第二个选项是使用 &lt;code&gt;force_insert&lt;/code&gt; 选项 &lt;code&gt;save()&lt;/code&gt; 以确保Django执行SQL &lt;code&gt;INSERT&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f7c129f254ad0e20b2d394de09d8d68668947ea7" translate="yes" xml:space="preserve">
          <source>The second query counts the number of books that have a rating exceeding 3.0 for each publisher. The filter precedes the annotation, so the filter constrains the objects considered when calculating the annotation.</source>
          <target state="translated">第二个查询统计每个出版商的评分超过3.0的书籍数量。过滤器在注释之前,所以过滤器在计算注释时对考虑的对象进行约束。</target>
        </trans-unit>
        <trans-unit id="4df0824d3dfaf3a260f6082684e83bd9c7d628eb" translate="yes" xml:space="preserve">
          <source>The second step &lt;code&gt;full_clean()&lt;/code&gt; performs is to call &lt;a href=&quot;#django.db.models.Model.clean&quot;&gt;&lt;code&gt;Model.clean()&lt;/code&gt;&lt;/a&gt;. This method should be overridden to perform custom validation on your model.</source>
          <target state="translated">&lt;code&gt;full_clean()&lt;/code&gt; 执行的第二步是调用&lt;a href=&quot;#django.db.models.Model.clean&quot;&gt; &lt;code&gt;Model.clean()&lt;/code&gt; &lt;/a&gt;。应该重写此方法以对模型执行自定义验证。</target>
        </trans-unit>
        <trans-unit id="27e39d0116ed446f2f74eabf5549557d2e7504d9" translate="yes" xml:space="preserve">
          <source>The second step in writing custom tags is to define a &lt;code&gt;Node&lt;/code&gt; subclass that has a &lt;code&gt;render()&lt;/code&gt; method.</source>
          <target state="translated">编写自定义标签的第二步是定义一个具有 &lt;code&gt;render()&lt;/code&gt; 方法的 &lt;code&gt;Node&lt;/code&gt; 子类。</target>
        </trans-unit>
        <trans-unit id="8740e528ce3da4e64daa6a15895436729c3f000a" translate="yes" xml:space="preserve">
          <source>The second task of a &lt;code&gt;Form&lt;/code&gt; object is to render itself as HTML. To do so, &lt;code&gt;print&lt;/code&gt; it:</source>
          <target state="translated">&lt;code&gt;Form&lt;/code&gt; 对象的第二个任务是将自身呈现为HTML。为此，请 &lt;code&gt;print&lt;/code&gt; 它：</target>
        </trans-unit>
        <trans-unit id="e5e9f3d06888362216211128b4689f633ad87855" translate="yes" xml:space="preserve">
          <source>The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;). For example:</source>
          <target state="translated">Django支持的第二种类型的模型继承是层次结构中的每个模型本身都是一个模型时。每个模型都对应于其自己的数据库表，并且可以单独查询和创建。继承关系在子模型及其每个父模型之间引入了链接（通过自动创建的&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;）。例如：</target>
        </trans-unit>
        <trans-unit id="b87b4139b16c9ea6b22776990536a398a56e2ddf" translate="yes" xml:space="preserve">
          <source>The second way to generate summary values is to generate an independent summary for each object in a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="translated">生成摘要值的第二种方法是为&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 中的&lt;/a&gt;每个对象生成一个独立的摘要。例如，如果您要检索一本书的清单，则可能想知道每本书有多少作者。每本书与作者都有多对多的关系；我们要为 &lt;code&gt;QuerySet&lt;/code&gt; 中的每本书总结这种关系。</target>
        </trans-unit>
        <trans-unit id="955ce0b833e3fe1408d6ab1ea4e01cbfd029953d" translate="yes" xml:space="preserve">
          <source>The second, more powerful way to use generic views is to inherit from an existing view and override attributes (such as the &lt;code&gt;template_name&lt;/code&gt;) or methods (such as &lt;code&gt;get_context_data&lt;/code&gt;) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, &lt;code&gt;about.html&lt;/code&gt;. Django has a generic view to do this - &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; - so we can subclass it, and override the template name:</source>
          <target state="translated">使用通用视图的第二种更强大的方法是从现有视图继承并覆盖子类中的属性（例如 &lt;code&gt;template_name&lt;/code&gt; ）或方法（例如 &lt;code&gt;get_context_data&lt;/code&gt; ）以提供新的值或方法。例如，考虑一个仅显示一个模板 &lt;code&gt;about.html&lt;/code&gt; 的视图。Django有一个通用的视图可以执行此操作&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;因此我们可以对其进行子类化，并覆盖模板名称：</target>
        </trans-unit>
        <trans-unit id="ae200081256a76cf9fa5d93cdf773354b4227fa5" translate="yes" xml:space="preserve">
          <source>The secret key is used for:</source>
          <target state="translated">秘钥用于。</target>
        </trans-unit>
        <trans-unit id="1535f99b602c999783ef5365870bcf6a80a77c17" translate="yes" xml:space="preserve">
          <source>The security checks do not make your site secure. They do not audit code, do intrusion detection, or do anything particularly complex. Rather, they help perform an automated, low-hanging-fruit checklist, that can help you to improve your site&amp;rsquo;s security.</source>
          <target state="translated">安全检查不会使您的站点安全。他们不审核代码，不进行入侵检测或做任何特别复杂的事情。相反，它们有助于执行自动的，容易实现的清单，从而可以帮助您提高站点的安全性。</target>
        </trans-unit>
        <trans-unit id="9a8c017152815689248540519b1703662bd2cf98" translate="yes" xml:space="preserve">
          <source>The security loggers will receive messages on any occurrence of &lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt;&lt;code&gt;SuspiciousOperation&lt;/code&gt;&lt;/a&gt; and other security-related errors. There is a sub-logger for each subtype of security error, including all &lt;code&gt;SuspiciousOperation&lt;/code&gt;s. The level of the log event depends on where the exception is handled. Most occurrences are logged as a warning, while any &lt;code&gt;SuspiciousOperation&lt;/code&gt; that reaches the WSGI handler will be logged as an error. For example, when an HTTP &lt;code&gt;Host&lt;/code&gt; header is included in a request from a client that does not match &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt;, Django will return a 400 response, and an error message will be logged to the &lt;code&gt;django.security.DisallowedHost&lt;/code&gt; logger.</source>
          <target state="translated">安全记录器将在发生&lt;a href=&quot;../ref/exceptions#django.core.exceptions.SuspiciousOperation&quot;&gt; &lt;code&gt;SuspiciousOperation&lt;/code&gt; &lt;/a&gt;和其他与安全相关的错误时接收消息。每个安全性错误子类型都有一个子记录器，包括所有 &lt;code&gt;SuspiciousOperation&lt;/code&gt; 。日志事件的级别取决于处理异常的位置。大多数事件都被记录为警告，而到达WSGI处理程序的任何 &lt;code&gt;SuspiciousOperation&lt;/code&gt; 都将被记录为错误。例如，当来自客户端的请求中包含与&lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt;不匹配的HTTP &lt;code&gt;Host&lt;/code&gt; 标头时，Django将返回400响应，并且错误消息将记录到 &lt;code&gt;django.security.DisallowedHost&lt;/code&gt; 记录器中。</target>
        </trans-unit>
        <trans-unit id="9e0f12c094c690a80b16f07d67de5edaf7d7b072" translate="yes" xml:space="preserve">
          <source>The session dictionary accepts any &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; serializable value when using &lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt;&lt;code&gt;JSONSerializer&lt;/code&gt;&lt;/a&gt; or any picklable Python object when using &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">会话字典接受任何&lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt; &lt;code&gt;json&lt;/code&gt; &lt;/a&gt;使用时可序列化的值&lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt; &lt;code&gt;JSONSerializer&lt;/code&gt; &lt;/a&gt;使用时或任何picklable Python对象&lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; &lt;/a&gt;。有关更多信息，请参见&lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;模块。</target>
        </trans-unit>
        <trans-unit id="e35922e630f20249ec9042c300948fc643cab60b" translate="yes" xml:space="preserve">
          <source>The session is not saved if the response&amp;rsquo;s status code is 500.</source>
          <target state="translated">如果响应的状态码为500，则不会保存该会话。</target>
        </trans-unit>
        <trans-unit id="2f0eea75fa7d331e2abf0ff67f1b00aad0282a57" translate="yes" xml:space="preserve">
          <source>The set of fields to update as passed to &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;None&lt;/code&gt; if &lt;code&gt;update_fields&lt;/code&gt; wasn&amp;rsquo;t passed to &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="translated">该组字段更新为传递给&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; &lt;/a&gt;，或 &lt;code&gt;None&lt;/code&gt; 如果 &lt;code&gt;update_fields&lt;/code&gt; 没有传递到 &lt;code&gt;save()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23f815aca7be18e5c46a756945c0068e9aa45f3a" translate="yes" xml:space="preserve">
          <source>The setting must be the &lt;em&gt;full&lt;/em&gt; path to the &lt;strong&gt;C&lt;/strong&gt; shared library; in other words you want to use &lt;code&gt;libgeos_c.so&lt;/code&gt;, not &lt;code&gt;libgeos.so&lt;/code&gt;.</source>
          <target state="translated">该设置必须是&lt;strong&gt;C&lt;/strong&gt;共享库的&lt;em&gt;完整&lt;/em&gt;路径。换句话说，您要使用 &lt;code&gt;libgeos_c.so&lt;/code&gt; 而不是 &lt;code&gt;libgeos.so&lt;/code&gt; 。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43f0cb37adadfa231abd3204173b3559513b6ab8" translate="yes" xml:space="preserve">
          <source>The settings below have sensible defaults, and shouldn&amp;rsquo;t require manual setting.</source>
          <target state="translated">以下设置具有合理的默认设置，并且不需要手动设置。</target>
        </trans-unit>
        <trans-unit id="fbba6b5893b691a78597afda71719076c4e2f3d5" translate="yes" xml:space="preserve">
          <source>The settings file contains some settings that are only consulted during initialization of Django internals. If you change them with &lt;code&gt;override_settings&lt;/code&gt;, the setting is changed if you access it via the &lt;code&gt;django.conf.settings&lt;/code&gt; module, however, Django&amp;rsquo;s internals access it differently. Effectively, using &lt;a href=&quot;#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.test.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt; with these settings is probably not going to do what you expect it to do.</source>
          <target state="translated">设置文件包含一些设置，这些设置仅在Django内部初始化期间进行查询。如果使用 &lt;code&gt;override_settings&lt;/code&gt; 对其进行更改，则通过 &lt;code&gt;django.conf.settings&lt;/code&gt; 模块访问该设置会进行更改，但是，Django的内部访问方式却有所不同。实际上，对这些设置使用&lt;a href=&quot;#django.test.override_settings&quot;&gt; &lt;code&gt;override_settings()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#django.test.modify_settings&quot;&gt; &lt;code&gt;modify_settings()&lt;/code&gt; &lt;/a&gt;可能不会实现您期望的效果。</target>
        </trans-unit>
        <trans-unit id="8e4994867007b999256756ccbe1e325955a4f469" translate="yes" xml:space="preserve">
          <source>The settings handler.</source>
          <target state="translated">设置处理程序。</target>
        </trans-unit>
        <trans-unit id="d96ddc86f7a01e9214faf44f5f94c2acc7bd4806" translate="yes" xml:space="preserve">
          <source>The settings module to compare the current settings against. Leave empty to compare against Django&amp;rsquo;s default settings.</source>
          <target state="translated">用于比较当前设置的设置模块。留空以与Django的默认设置进行比较。</target>
        </trans-unit>
        <trans-unit id="daff59a2d84f51417b786ed3d47e6c6c70db8d2e" translate="yes" xml:space="preserve">
          <source>The severity of the message. Use one of the predefined values: &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;CRITICAL&lt;/code&gt;. If the level is greater or equal to &lt;code&gt;ERROR&lt;/code&gt;, then Django will prevent management commands from executing. Messages with level lower than &lt;code&gt;ERROR&lt;/code&gt; (i.e. warnings) are reported to the console, but can be silenced.</source>
          <target state="translated">消息的严重性。使用预定义的值之一： &lt;code&gt;DEBUG&lt;/code&gt; ， &lt;code&gt;INFO&lt;/code&gt; ， &lt;code&gt;WARNING&lt;/code&gt; ， &lt;code&gt;ERROR&lt;/code&gt; ， &lt;code&gt;CRITICAL&lt;/code&gt; 。如果级别大于或等于 &lt;code&gt;ERROR&lt;/code&gt; ，那么Django将阻止执行管理命令。级别低于 &lt;code&gt;ERROR&lt;/code&gt; （即警告）的消息将报告给控制台，但可以将其静音。</target>
        </trans-unit>
        <trans-unit id="c9a42097105f3fe23943b9e54d772efc8700f873" translate="yes" xml:space="preserve">
          <source>The shortcut view (&lt;code&gt;django.contrib.contenttypes.views.shortcut&lt;/code&gt;) uses the domain of the current &lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/a&gt; object when calculating an object&amp;rsquo;s URL.</source>
          <target state="translated">在计算对象的URL时，快捷方式视图（ &lt;code&gt;django.contrib.contenttypes.views.shortcut&lt;/code&gt; ）使用当前&lt;a href=&quot;#django.contrib.sites.models.Site&quot;&gt; &lt;code&gt;Site&lt;/code&gt; &lt;/a&gt;对象的域。</target>
        </trans-unit>
        <trans-unit id="a0367a435210eefa6ee3034f3399ebd2c9293c85" translate="yes" xml:space="preserve">
          <source>The signature is appended to the end of the string, following the colon. You can retrieve the original value using the &lt;code&gt;unsign&lt;/code&gt; method:</source>
          <target state="translated">签名被附加到字符串的末尾，冒号后面。您可以使用 &lt;code&gt;unsign&lt;/code&gt; 方法检索原始值：</target>
        </trans-unit>
        <trans-unit id="50ccadf7df70403760c5d064c7884bb59385dc50" translate="yes" xml:space="preserve">
          <source>The similar template tag &lt;a href=&quot;../templates/builtins#std:templatetag-get_media_prefix&quot;&gt;&lt;code&gt;get_media_prefix&lt;/code&gt;&lt;/a&gt; which works like &lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt;&lt;code&gt;get_static_prefix&lt;/code&gt;&lt;/a&gt; but uses &lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">类似的模板标签&lt;a href=&quot;../templates/builtins#std:templatetag-get_media_prefix&quot;&gt; &lt;code&gt;get_media_prefix&lt;/code&gt; &lt;/a&gt;类似于&lt;a href=&quot;../templates/builtins#std:templatetag-get_static_prefix&quot;&gt; &lt;code&gt;get_static_prefix&lt;/code&gt; ,&lt;/a&gt;但是使用&lt;a href=&quot;../settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6abe52c0ed7e3ab6a23d1047f985e8d596334cc9" translate="yes" xml:space="preserve">
          <source>The simplest possible settings file is for a single-database setup using SQLite. This can be configured using the following:</source>
          <target state="translated">最简单的设置文件是使用SQLite的单数据库设置。可以使用以下内容进行配置。</target>
        </trans-unit>
        <trans-unit id="5ace5d761f4959bafdaa5e3113f1ce313de02fef" translate="yes" xml:space="preserve">
          <source>The simplest way to retrieve objects from a table is to get all of them. To do this, use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt; method on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">从表中检索对象的最简单方法是获取所有对象。为此，请在&lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;上使用&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt; &lt;code&gt;all()&lt;/code&gt; &lt;/a&gt;方法：</target>
        </trans-unit>
        <trans-unit id="52b16d4e7b314498be9f2952398e668adf29cd4e" translate="yes" xml:space="preserve">
          <source>The sitemap framework</source>
          <target state="translated">网站地图框架</target>
        </trans-unit>
        <trans-unit id="11295cffc86f5ad19f00a1782ed37fd95420afb6" translate="yes" xml:space="preserve">
          <source>The sitemap framework also has the ability to create a sitemap index that references individual sitemap files, one per each section defined in your &lt;code&gt;sitemaps&lt;/code&gt; dictionary. The only differences in usage are:</source>
          <target state="translated">该站点地图框架还具有创建站点地图索引的能力，该索引引用各个站点地图文件，每个在 &lt;code&gt;sitemaps&lt;/code&gt; 字典中定义的部分都一个。用法的唯一区别是：</target>
        </trans-unit>
        <trans-unit id="3858d967f8980cf6e61e8ec128647b2f1879c701" translate="yes" xml:space="preserve">
          <source>The sitemap framework provides a convenience class for a common case:</source>
          <target state="translated">sitemap框架为常见的情况提供了一个方便的类。</target>
        </trans-unit>
        <trans-unit id="ef72e72951e66bb8c2edbac6e948311578859341" translate="yes" xml:space="preserve">
          <source>The sitemap view takes an extra, required argument: &lt;code&gt;{'sitemaps': sitemaps}&lt;/code&gt;. &lt;code&gt;sitemaps&lt;/code&gt; should be a dictionary that maps a short section label (e.g., &lt;code&gt;blog&lt;/code&gt; or &lt;code&gt;news&lt;/code&gt;) to its &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class (e.g., &lt;code&gt;BlogSitemap&lt;/code&gt; or &lt;code&gt;NewsSitemap&lt;/code&gt;). It may also map to an &lt;em&gt;instance&lt;/em&gt; of a &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class (e.g., &lt;code&gt;BlogSitemap(some_var)&lt;/code&gt;).</source>
          <target state="translated">Sitemap视图需要一个额外的必需参数： &lt;code&gt;{'sitemaps': sitemaps}&lt;/code&gt; 。 &lt;code&gt;sitemaps&lt;/code&gt; 应该是短款的标签（例如，映射字典 &lt;code&gt;blog&lt;/code&gt; 或 &lt;code&gt;news&lt;/code&gt; ），以它的&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;类（如 &lt;code&gt;BlogSitemap&lt;/code&gt; 或 &lt;code&gt;NewsSitemap&lt;/code&gt; ）。它也可以映射到一个&lt;em&gt;实例&lt;/em&gt;一的&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;类别（例如， &lt;code&gt;BlogSitemap(some_var)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="621dc9b224a288114cf11d09756159474c159f60" translate="yes" xml:space="preserve">
          <source>The sites framework</source>
          <target state="translated">网站框架</target>
        </trans-unit>
        <trans-unit id="ac304e3cb27724e325b549a253fc46d5fd5f134d" translate="yes" xml:space="preserve">
          <source>The sites framework is mainly based on this model:</source>
          <target state="translated">网站框架主要基于这种模式。</target>
        </trans-unit>
        <trans-unit id="0cf28a9f4765208e101d68cf21ce0fa06a19c689" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes.</source>
          <target state="translated">文件的大小,单位为字节。</target>
        </trans-unit>
        <trans-unit id="a191f66f2ff3d662e45b49c5c86e72633c70ad4b" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the uploaded file.</source>
          <target state="translated">上传文件的大小,以字节为单位。</target>
        </trans-unit>
        <trans-unit id="92141737ed37f235c75582be194bce228f33b6fa" translate="yes" xml:space="preserve">
          <source>The smallest convex polygon that contains this geometry, as a new &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt;&lt;code&gt;OGRGeometry&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">包含此几何的最小凸多边形，作为新的&lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry&quot;&gt; &lt;code&gt;OGRGeometry&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="1ac6e1b126807dd40652d6347d761ec0ecdc46f7" translate="yes" xml:space="preserve">
          <source>The solution is to indicate a page&amp;rsquo;s cache should be &amp;ldquo;private.&amp;rdquo; To do this in Django, use the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; view decorator. Example:</source>
          <target state="translated">解决方案是指示页面的缓存应为&amp;ldquo;专用&amp;rdquo;。要在Django中执行此操作，请使用&lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt;视图装饰器。例：</target>
        </trans-unit>
        <trans-unit id="8b59d72e0e3ebbc25fb8e2359b6df20989ed4f7d" translate="yes" xml:space="preserve">
          <source>The source for Django&amp;rsquo;s own &lt;code&gt;ImageField&lt;/code&gt; (in &lt;code&gt;django/db/models/fields/files.py&lt;/code&gt;) is a great example of how to subclass &lt;code&gt;FileField&lt;/code&gt; to support a particular type of file, as it incorporates all of the techniques described above.</source>
          <target state="translated">为Django自己的源 &lt;code&gt;ImageField&lt;/code&gt; （在 &lt;code&gt;django/db/models/fields/files.py&lt;/code&gt; ）是如何继承一个很好的例子 &lt;code&gt;FileField&lt;/code&gt; 以支持特定类型的文件，因为它结合了上述所有的技术进行了描述。</target>
        </trans-unit>
        <trans-unit id="91d9e632ff2a71021b352596571ac121915320b7" translate="yes" xml:space="preserve">
          <source>The source of the language information is the &lt;code&gt;django.conf.locale&lt;/code&gt; module. Similar access to this information is available for template code. See below.</source>
          <target state="translated">语言信息的来源是 &lt;code&gt;django.conf.locale&lt;/code&gt; 模块。模板代码可以使用类似的方式访问此信息。见下文。</target>
        </trans-unit>
        <trans-unit id="9f746499367e42aad9a8ada8bd6243a605585610" translate="yes" xml:space="preserve">
          <source>The spatial lookups in this section are available for &lt;a href=&quot;model-api#django.contrib.gis.db.models.GeometryField&quot;&gt;&lt;code&gt;GeometryField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;model-api#django.contrib.gis.db.models.RasterField&quot;&gt;&lt;code&gt;RasterField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">本节中的空间查找可用于&lt;a href=&quot;model-api#django.contrib.gis.db.models.GeometryField&quot;&gt; &lt;code&gt;GeometryField&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;model-api#django.contrib.gis.db.models.RasterField&quot;&gt; &lt;code&gt;RasterField&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ade382e0e188f8e963669b6d9a567b326638dea5" translate="yes" xml:space="preserve">
          <source>The spatial reference system of the raster, as a &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; instance. The SRS can be changed by setting it to an other &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; or providing any input that is accepted by the &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">栅格的空间参考系统，作为&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt;实例。可以通过将SRS设置为其他&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt;或提供&lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt; &lt;code&gt;SpatialReference&lt;/code&gt; &lt;/a&gt;构造函数接受的任何输入来更改SRS 。</target>
        </trans-unit>
        <trans-unit id="5f344776c834916f1ca5bb889c884ef362eeb5de" translate="yes" xml:space="preserve">
          <source>The standard &lt;a href=&quot;../auth/default#django.contrib.auth.logout&quot;&gt;&lt;code&gt;django.contrib.auth.logout()&lt;/code&gt;&lt;/a&gt; function actually does a bit more than this to prevent inadvertent data leakage. It calls the &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;request.session&lt;/code&gt;. We are using this example as a demonstration of how to work with session objects, not as a full &lt;code&gt;logout()&lt;/code&gt; implementation.</source>
          <target state="translated">实际上，标准的&lt;a href=&quot;../auth/default#django.contrib.auth.logout&quot;&gt; &lt;code&gt;django.contrib.auth.logout()&lt;/code&gt; &lt;/a&gt;函数可以做更多的事情，以防止意外的数据泄漏。它调用 &lt;code&gt;request.session&lt;/code&gt; 的&lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;方法。我们以该示例为例，说明如何使用会话对象，而不是完整的 &lt;code&gt;logout()&lt;/code&gt; 实现。</target>
        </trans-unit>
        <trans-unit id="9420c2daed09e06f0a2e7efc640e408af5f27e29" translate="yes" xml:space="preserve">
          <source>The standard deviation of all pixel values of the band (excluding the &amp;ldquo;no data&amp;rdquo; value).</source>
          <target state="translated">波段中所有像素值的标准偏差（&amp;ldquo;无数据&amp;rdquo;值除外）。</target>
        </trans-unit>
        <trans-unit id="52c907cfa056aa62789f972666a5ed08a998ff7c" translate="yes" xml:space="preserve">
          <source>The static files tools are mostly designed to help with getting static files successfully deployed into production. This usually means a separate, dedicated static file server, which is a lot of overhead to mess with when developing locally. Thus, the &lt;code&gt;staticfiles&lt;/code&gt; app ships with a &lt;strong&gt;quick and dirty helper view&lt;/strong&gt; that you can use to serve files locally in development.</source>
          <target state="translated">静态文件工具主要用于帮助将静态文件成功部署到生产中。这通常意味着一个单独的专用静态文件服务器，在本地进行开发时会产生很多开销。因此， &lt;code&gt;staticfiles&lt;/code&gt; 应用附带了一个&lt;strong&gt;快速而肮脏的帮助程序视图&lt;/strong&gt;，您可以使用该&lt;strong&gt;视图&lt;/strong&gt;在开发中本地提供文件。</target>
        </trans-unit>
        <trans-unit id="a25e531104e722dff8c461ee3f81b419d117e103" translate="yes" xml:space="preserve">
          <source>The staticfiles app</source>
          <target state="translated">静态文件应用程序</target>
        </trans-unit>
        <trans-unit id="f6dbb8774da05789a335009679c573a34c5db592" translate="yes" xml:space="preserve">
          <source>The statistics can also be retrieved directly by accessing the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.min&quot;&gt;&lt;code&gt;min&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.max&quot;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.mean&quot;&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.std&quot;&gt;&lt;code&gt;std&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="translated">还可以通过访问&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.min&quot;&gt; &lt;code&gt;min&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.max&quot;&gt; &lt;code&gt;max&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.mean&quot;&gt; &lt;code&gt;mean&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.std&quot;&gt; &lt;code&gt;std&lt;/code&gt; &lt;/a&gt;属性直接检索统计信息。</target>
        </trans-unit>
        <trans-unit id="747de47b831a27772126bd5ae7a678d87db52af7" translate="yes" xml:space="preserve">
          <source>The status code for the response. Defaults to &lt;code&gt;200&lt;/code&gt;.</source>
          <target state="translated">响应的状态码。默认为 &lt;code&gt;200&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0088397db0db666ae508388378a792dcf8d5ba0f" translate="yes" xml:space="preserve">
          <source>The steps in this guide have been tested with Windows 7, 8, and 10. In other versions, the steps would be similar. You will need to be familiar with using the Windows command prompt.</source>
          <target state="translated">本指南中的步骤已在Windows 7、8和10中进行了测试。在其他版本中,步骤类似。您需要熟悉使用Windows命令提示符。</target>
        </trans-unit>
        <trans-unit id="af80f94c1622d98a6374dfee9bf21cb2568e354b" translate="yes" xml:space="preserve">
          <source>The storage backend automatically replaces the paths found in the saved files matching other saved files with the path of the cached copy (using the &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process()&lt;/code&gt;&lt;/a&gt; method). The regular expressions used to find those paths (&lt;code&gt;django.contrib.staticfiles.storage.HashedFilesMixin.patterns&lt;/code&gt;) by default covers the &lt;a href=&quot;https://www.w3.org/TR/CSS2/cascade.html#at-import&quot;&gt;@import&lt;/a&gt; rule and &lt;a href=&quot;https://www.w3.org/TR/CSS2/syndata.html#uri&quot;&gt;url()&lt;/a&gt; statement of &lt;a href=&quot;https://www.w3.org/Style/CSS/&quot;&gt;Cascading Style Sheets&lt;/a&gt;. For example, the &lt;code&gt;'css/styles.css'&lt;/code&gt; file with the content</source>
          <target state="translated">存储后端自动将与其他已保存文件匹配的已保存文件中找到的路径替换为缓存副本的路径（使用&lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt; &lt;code&gt;post_process()&lt;/code&gt; &lt;/a&gt;方法）。默认情况下，用于查找这些路径的正则表达式（ &lt;code&gt;django.contrib.staticfiles.storage.HashedFilesMixin.patterns&lt;/code&gt; ）覆盖了&lt;a href=&quot;https://www.w3.org/Style/CSS/&quot;&gt;层叠样式表&lt;/a&gt;的&lt;a href=&quot;https://www.w3.org/TR/CSS2/cascade.html#at-import&quot;&gt;@import&lt;/a&gt;规则和&lt;a href=&quot;https://www.w3.org/TR/CSS2/syndata.html#uri&quot;&gt;url（）&lt;/a&gt;语句。例如，带有内容的 &lt;code&gt;'css/styles.css'&lt;/code&gt; 文件</target>
        </trans-unit>
        <trans-unit id="60d9065af769a80b59202a2967aa7ef73e6aa333" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;'blog_entry.date_updated'&lt;/code&gt; (without the surrounding quotes).</source>
          <target state="translated">字符串 &lt;code&gt;'blog_entry.date_updated'&lt;/code&gt; （不带引号）。</target>
        </trans-unit>
        <trans-unit id="3296d09e657b722396695063524cf10089799fe9" translate="yes" xml:space="preserve">
          <source>The string domain is &lt;code&gt;django&lt;/code&gt; or &lt;code&gt;djangojs&lt;/code&gt;. This string domain is used to differentiate between different programs that store their data in a common message-file library (usually &lt;code&gt;/usr/share/locale/&lt;/code&gt;). The &lt;code&gt;django&lt;/code&gt; domain is used for Python and template translation strings and is loaded into the global translation catalogs. The &lt;code&gt;djangojs&lt;/code&gt; domain is only used for JavaScript translation catalogs to make sure that those are as small as possible.</source>
          <target state="translated">字符串域是 &lt;code&gt;django&lt;/code&gt; 或 &lt;code&gt;djangojs&lt;/code&gt; 。该字符串域用于区分将程序数据存储在通用消息文件库（通常为 &lt;code&gt;/usr/share/locale/&lt;/code&gt; ）中的不同程序。该 &lt;code&gt;django&lt;/code&gt; 域名用于Python和模板翻译字符串，并加载到全局翻译目录。该 &lt;code&gt;djangojs&lt;/code&gt; 域仅用于JavaScript的转换目录，以确保这些都是尽可能的小。</target>
        </trans-unit>
        <trans-unit id="57a7cc85efc659dfc1730ee676ec740259ffab4c" translate="yes" xml:space="preserve">
          <source>The string returned by &lt;code&gt;reverse()&lt;/code&gt; is already &lt;a href=&quot;unicode#uri-and-iri-handling&quot;&gt;urlquoted&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;reverse()&lt;/code&gt; 返回的字符串已被&lt;a href=&quot;unicode#uri-and-iri-handling&quot;&gt;urlquoted&lt;/a&gt;。例如：</target>
        </trans-unit>
        <trans-unit id="94e40b5fcbc4cb11fb4796da2a9bf8789e509af7" translate="yes" xml:space="preserve">
          <source>The string to use for displaying empty values in the admin site&amp;rsquo;s change list. Defaults to a dash. The value can also be overridden on a per &lt;code&gt;ModelAdmin&lt;/code&gt; basis and on a custom field within a &lt;code&gt;ModelAdmin&lt;/code&gt; by setting an &lt;code&gt;empty_value_display&lt;/code&gt; attribute on the field. See &lt;a href=&quot;#django.contrib.admin.ModelAdmin.empty_value_display&quot;&gt;&lt;code&gt;ModelAdmin.empty_value_display&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">用于在管理站点的更改列表中显示空值的字符串。默认为破折号。该值也可以被覆盖在每个 &lt;code&gt;ModelAdmin&lt;/code&gt; 基础和上的自定义字段内 &lt;code&gt;ModelAdmin&lt;/code&gt; 通过设置 &lt;code&gt;empty_value_display&lt;/code&gt; 场上属性。有关示例，请参见&lt;a href=&quot;#django.contrib.admin.ModelAdmin.empty_value_display&quot;&gt; &lt;code&gt;ModelAdmin.empty_value_display&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90ef6c770931b884ac66544a723cb07028aea43b" translate="yes" xml:space="preserve">
          <source>The string you return from &lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; contain only ASCII characters (required by the URI specification, &lt;a href=&quot;https://tools.ietf.org/html/rfc2396.html#section-2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2396#section-2&lt;/strong&gt;&lt;/a&gt;) and be URL-encoded, if necessary.</source>
          <target state="translated">从 &lt;code&gt;get_absolute_url()&lt;/code&gt; 返回的字符串&lt;strong&gt;必须&lt;/strong&gt;仅包含ASCII字符（由URI规范&lt;a href=&quot;https://tools.ietf.org/html/rfc2396.html#section-2&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2396＃section-2要求&lt;/strong&gt;&lt;/a&gt;），并在必要时进行URL编码。</target>
        </trans-unit>
        <trans-unit id="33c0de55f0449938f6519c8e1864b1e4bb1b0444" translate="yes" xml:space="preserve">
          <source>The strings you pass to &lt;code&gt;_()&lt;/code&gt; or &lt;code&gt;gettext()&lt;/code&gt; can take placeholders, specified with Python&amp;rsquo;s standard named-string interpolation syntax. Example:</source>
          <target state="translated">传递给 &lt;code&gt;_()&lt;/code&gt; 或 &lt;code&gt;gettext()&lt;/code&gt; 的字符串可以使用占位符，这些占位符由Python的标准命名字符串插值语法指定。例：</target>
        </trans-unit>
        <trans-unit id="c4b293319b691537487b9bbd102053e5ed42c71f" translate="yes" xml:space="preserve">
          <source>The structure of &lt;code&gt;validator_config&lt;/code&gt; is identical to the structure of &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt;. The return value of this function can be passed into the &lt;code&gt;password_validators&lt;/code&gt; parameter of the functions listed above.</source>
          <target state="translated">的结构 &lt;code&gt;validator_config&lt;/code&gt; 相同的结构&lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; &lt;/a&gt;。该函数的返回值可以传递到上面列出的函数的 &lt;code&gt;password_validators&lt;/code&gt; 参数中。</target>
        </trans-unit>
        <trans-unit id="a0c818242667572561c2f757d7bf6ecd891b50a4" translate="yes" xml:space="preserve">
          <source>The subclasses are all defined as transforms, but they aren&amp;rsquo;t registered with any fields, because the obvious lookup names are already reserved by the &lt;code&gt;Extract&lt;/code&gt; subclasses.</source>
          <target state="translated">子类都定义为转换，但是它们未在任何字段中注册，因为 &lt;code&gt;Extract&lt;/code&gt; 子类已经保留了明显的查找名称。</target>
        </trans-unit>
        <trans-unit id="14c5e420f5ca625864309aed3f85309853005af3" translate="yes" xml:space="preserve">
          <source>The suffix to append to the auto-generated candidate template name. Default suffix is &lt;code&gt;_detail&lt;/code&gt;.</source>
          <target state="translated">后缀追加到自动生成的候选模板名称上。默认后缀为 &lt;code&gt;_detail&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0f1e2de32b68bf30a5bf2bab67a9c0bb7bad82e" translate="yes" xml:space="preserve">
          <source>The suffix to append to the auto-generated candidate template name. Default suffix is &lt;code&gt;_list&lt;/code&gt;.</source>
          <target state="translated">后缀追加到自动生成的候选模板名称上。默认后缀为 &lt;code&gt;_list&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee3dfc166fa26fee5916d1c5f0def15e1852ec13" translate="yes" xml:space="preserve">
          <source>The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not.</source>
          <target state="translated">权限系统中对匿名用户的支持,可以实现匿名用户有权限做某事,而不活跃的认证用户没有权限的场景。</target>
        </trans-unit>
        <trans-unit id="83d88239e2a2444a5a10ea7df5a124e18d42aca4" translate="yes" xml:space="preserve">
          <source>The syndication feed framework</source>
          <target state="translated">联合供稿框架</target>
        </trans-unit>
        <trans-unit id="eef3f1e313c0f13706c2d073f7a8b1f4ea08e558" translate="yes" xml:space="preserve">
          <source>The syntax for these annotations is identical to that used for the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.aggregate&quot;&gt;&lt;code&gt;aggregate()&lt;/code&gt;&lt;/a&gt; clause. Each argument to &lt;code&gt;annotate()&lt;/code&gt; describes an aggregate that is to be calculated. For example, to annotate books with the number of authors:</source>
          <target state="translated">这些注释的语法与用于&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.aggregate&quot;&gt; &lt;code&gt;aggregate()&lt;/code&gt; &lt;/a&gt;子句的语法相同。 &lt;code&gt;annotate()&lt;/code&gt; 的每个参数都描述了要计算的聚合。例如，要用作者人数注释书籍：</target>
        </trans-unit>
        <trans-unit id="0379bf652cddc975359eaa855da5137eb0b19458" translate="yes" xml:space="preserve">
          <source>The syntax of the Django template language involves four constructs.</source>
          <target state="translated">Django模板语言的语法涉及四个构造。</target>
        </trans-unit>
        <trans-unit id="d4504813048b000910bf4b6bbbe32178d46295d9" translate="yes" xml:space="preserve">
          <source>The system check framework is a set of static checks for validating Django projects. It detects common problems and provides hints for how to fix them. The framework is extensible so you can easily add your own checks.</source>
          <target state="translated">系统检查框架是一套用于验证Django项目的静态检查。它检测常见的问题,并提供如何修复这些问题的提示。该框架是可扩展的,所以你可以很容易地添加自己的检查。</target>
        </trans-unit>
        <trans-unit id="dbc6e6a2dc8b61ce9943917d2fe3c920967c30a1" translate="yes" xml:space="preserve">
          <source>The system check framework performs many different types of checks that are &lt;a href=&quot;checks#system-check-builtin-tags&quot;&gt;categorized with tags&lt;/a&gt;. You can use these tags to restrict the checks performed to just those in a particular category. For example, to perform only models and compatibility checks, run:</source>
          <target state="translated">系统检查框架执行&lt;a href=&quot;checks#system-check-builtin-tags&quot;&gt;按标签分类的&lt;/a&gt;许多不同类型的检查。您可以使用这些标记将执行的检查限制为仅属于特定类别的检查。例如，仅执行模型和兼容性检查，请运行：</target>
        </trans-unit>
        <trans-unit id="27b2d92f213b6416484a2f33029cdd7e87f9ba03" translate="yes" xml:space="preserve">
          <source>The system only parses your raw template code once &amp;ndash; when you create the &lt;code&gt;Template&lt;/code&gt; object. From then on, it&amp;rsquo;s stored internally as a tree structure for performance.</source>
          <target state="translated">系统在创建 &lt;code&gt;Template&lt;/code&gt; 对象时仅解析一次原始模板代码。从那时起，它就以树形结构内部存储以提高性能。</target>
        </trans-unit>
        <trans-unit id="05d2bd73761258f70fd689595b2d5c524f939ea3" translate="yes" xml:space="preserve">
          <source>The tag name &lt;code&gt;format_time&lt;/code&gt;.</source>
          <target state="translated">标签名称 &lt;code&gt;format_time&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87c98cdec407269913a37379692f0119d00836f4" translate="yes" xml:space="preserve">
          <source>The template</source>
          <target state="translated">模板</target>
        </trans-unit>
        <trans-unit id="0603523d939d16f0d9861b7054ab274e11aca8b9" translate="yes" xml:space="preserve">
          <source>The template &lt;code&gt;Context&lt;/code&gt; instance that was used to render the template that produced the response content.</source>
          <target state="translated">用于渲染生成响应内容的模板的模板 &lt;code&gt;Context&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="c5d4a2c2f425fe6eafdd8114b0a3e5e8c08d215d" translate="yes" xml:space="preserve">
          <source>The template backend instance from which the exception originated.</source>
          <target state="translated">异常产生的模板后台实例。</target>
        </trans-unit>
        <trans-unit id="3014343ddc6025c0a4c0650fc31e970e927227e8" translate="yes" xml:space="preserve">
          <source>The template backend to use. The built-in template backends are:</source>
          <target state="translated">要使用的模板后台。内置的模板后台有:</target>
        </trans-unit>
        <trans-unit id="d8c1234193ad60193b58d88d9bf278c4853403d8" translate="yes" xml:space="preserve">
          <source>The template context of all class-based generic views include a &lt;code&gt;view&lt;/code&gt; variable that points to the &lt;code&gt;View&lt;/code&gt; instance.</source>
          <target state="translated">所有基于类的通用视图的模板上下文都包含一个指向 &lt;code&gt;View&lt;/code&gt; 实例的 &lt;code&gt;view&lt;/code&gt; 变量。</target>
        </trans-unit>
        <trans-unit id="6a33e6f489580319d634f5534876d31401bbc7d5" translate="yes" xml:space="preserve">
          <source>The template layer</source>
          <target state="translated">模板层</target>
        </trans-unit>
        <trans-unit id="866a68a6ac786e14339c6c9b326e9e8ea777f5ba" translate="yes" xml:space="preserve">
          <source>The template layer provides a designer-friendly syntax for rendering the information to be presented to the user. Learn how this syntax can be used by designers and how it can be extended by programmers:</source>
          <target state="translated">模板层提供了一种设计者友好的语法,用于渲染要呈现给用户的信息。了解设计者如何使用这种语法,以及程序员如何对其进行扩展。</target>
        </trans-unit>
        <trans-unit id="e4afb1a9f1dbf211d7ed7f39b78242e41ef444ee" translate="yes" xml:space="preserve">
          <source>The template loader first looks for templates in the &lt;code&gt;DIRS&lt;/code&gt; directory. When the views in the &lt;code&gt;blog&lt;/code&gt; app ask for the &lt;code&gt;blog/post.html&lt;/code&gt; and &lt;code&gt;blog/list.html&lt;/code&gt; templates, the loader will return the files you just created.</source>
          <target state="translated">模板加载器首先在 &lt;code&gt;DIRS&lt;/code&gt; 目录中查找模板。当 &lt;code&gt;blog&lt;/code&gt; 应用程序中的视图要求提供 &lt;code&gt;blog/post.html&lt;/code&gt; 和 &lt;code&gt;blog/list.html&lt;/code&gt; 模板时，加载程序将返回您刚创建的文件。</target>
        </trans-unit>
        <trans-unit id="b49efe4f225fa59e53712110a0c7d2fcfa42ae5e" translate="yes" xml:space="preserve">
          <source>The template loader instance that constructed this &lt;code&gt;Origin&lt;/code&gt;.</source>
          <target state="translated">构造此 &lt;code&gt;Origin&lt;/code&gt; 的模板加载器实例。</target>
        </trans-unit>
        <trans-unit id="8ab85789d5407187c79a6cdea2e002debd13c9b5" translate="yes" xml:space="preserve">
          <source>The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes.</source>
          <target state="translated">模板名称可以是一个变量,也可以是一个硬编码(引号)字符串,可以是单引号或双引号。</target>
        </trans-unit>
        <trans-unit id="7d48a9ba0de096c9bfb6c7ce9ffbcbd438b4007d" translate="yes" xml:space="preserve">
          <source>The template system isn&amp;rsquo;t safe against untrusted template authors. For example, a site shouldn&amp;rsquo;t allow its users to provide their own templates, since template authors can do things like perform XSS attacks and access properties of template variables that may contain sensitive information.</source>
          <target state="translated">对于不受信任的模板作者，模板系统并不安全。例如，站点不应该允许其用户提供自己的模板，因为模板作者可以执行诸如XSS攻击和访问可能包含敏感信息的模板变量属性之类的事情。</target>
        </trans-unit>
        <trans-unit id="c98260d6327d8f1120b0c56511538089fbbdf965" translate="yes" xml:space="preserve">
          <source>The template system uses dot-lookup syntax to access variable attributes. In the example of &lt;code&gt;{{ question.question_text }}&lt;/code&gt;, first Django does a dictionary lookup on the object &lt;code&gt;question&lt;/code&gt;. Failing that, it tries an attribute lookup &amp;ndash; which works, in this case. If attribute lookup had failed, it would&amp;rsquo;ve tried a list-index lookup.</source>
          <target state="translated">模板系统使用点查找语法来访问变量属性。在 &lt;code&gt;{{ question.question_text }}&lt;/code&gt; 的示例中，首先Django对对象 &lt;code&gt;question&lt;/code&gt; 进行字典查找。如果失败，它将尝试属性查找-在这种情况下可以工作。如果属性查找失败，它将尝试进行列表索引查找。</target>
        </trans-unit>
        <trans-unit id="420014ab3ce944164753199bf59a7e1a4231c32e" translate="yes" xml:space="preserve">
          <source>The template system uses the first lookup type that works. It&amp;rsquo;s short-circuit logic. Here are a few examples:</source>
          <target state="translated">模板系统使用有效的第一种查找类型。这是短路逻辑。这里有一些例子：</target>
        </trans-unit>
        <trans-unit id="2435df0bf5cbd2d824542395abc83aab528b3f74" translate="yes" xml:space="preserve">
          <source>The template system works in a two-step process: compiling and rendering. To define a custom template tag, you specify how the compilation works and how the rendering works.</source>
          <target state="translated">模板系统的工作有两个步骤:编译和渲染。要定义一个自定义模板标签,您需要指定编译的工作方式和渲染的工作方式。</target>
        </trans-unit>
        <trans-unit id="da5ff6194094201794368aba3429c037c65e91d2" translate="yes" xml:space="preserve">
          <source>The template tag will output the string &lt;code&gt;/clients/client/123/&lt;/code&gt;.</source>
          <target state="translated">template标记将输出字符串 &lt;code&gt;/clients/client/123/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2f72233c038aef222f7387c49d03e80d4b892b3" translate="yes" xml:space="preserve">
          <source>The template to customize is &lt;code&gt;admin/index.html&lt;/code&gt;. (Do the same as with &lt;code&gt;admin/base_site.html&lt;/code&gt; in the previous section &amp;ndash; copy it from the default directory to your custom template directory). Edit the file, and you&amp;rsquo;ll see it uses a template variable called &lt;code&gt;app_list&lt;/code&gt;. That variable contains every installed Django app. Instead of using that, you can hard-code links to object-specific admin pages in whatever way you think is best.</source>
          <target state="translated">要定制的模板是 &lt;code&gt;admin/index.html&lt;/code&gt; 。（与上一部分中的 &lt;code&gt;admin/base_site.html&lt;/code&gt; 相同&amp;ndash;将其从默认目录复制到您的自定义模板目录中）。编辑文件，您将看到它使用一个名为 &lt;code&gt;app_list&lt;/code&gt; 的模板变量。该变量包含所有已安装的Django应用。您可以使用您认为最好的任何方式来硬编码指向特定于对象的管理页面的链接，而不必使用它。</target>
        </trans-unit>
        <trans-unit id="59513e3f745db68379079c908f6ea78957e13876" translate="yes" xml:space="preserve">
          <source>The template used to render the inline on the page.</source>
          <target state="translated">用于在页面上呈现内联的模板。</target>
        </trans-unit>
        <trans-unit id="c30e31e258f8031120b13df3b1446595293a79cf" translate="yes" xml:space="preserve">
          <source>The template used to render the map widget.</source>
          <target state="translated">用于渲染地图小部件的模板。</target>
        </trans-unit>
        <trans-unit id="dd2a16b1e5704d7f6d1d57161727756f051bdd76" translate="yes" xml:space="preserve">
          <source>The term &lt;strong&gt;application&lt;/strong&gt; describes a Python package that provides some set of features. Applications &lt;a href=&quot;../intro/reusable-apps&quot;&gt;may be reused&lt;/a&gt; in various projects.</source>
          <target state="translated">术语&amp;ldquo; &lt;strong&gt;应用程序&amp;rdquo;&lt;/strong&gt;描述了提供某些功能的Python软件包。应用程序&lt;a href=&quot;../intro/reusable-apps&quot;&gt;可以&lt;/a&gt;在各种项目中重复使用。</target>
        </trans-unit>
        <trans-unit id="41f52e128f63852524fd0e93b7b85919a73346cf" translate="yes" xml:space="preserve">
          <source>The term &lt;strong&gt;project&lt;/strong&gt; describes a Django web application. The project Python package is defined primarily by a settings module, but it usually contains other things. For example, when you run &lt;code&gt;django-admin startproject mysite&lt;/code&gt; you&amp;rsquo;ll get a &lt;code&gt;mysite&lt;/code&gt; project directory that contains a &lt;code&gt;mysite&lt;/code&gt; Python package with &lt;code&gt;settings.py&lt;/code&gt;, &lt;code&gt;urls.py&lt;/code&gt;, &lt;code&gt;asgi.py&lt;/code&gt; and &lt;code&gt;wsgi.py&lt;/code&gt;. The project package is often extended to include things like fixtures, CSS, and templates which aren&amp;rsquo;t tied to a particular application.</source>
          <target state="translated">&lt;strong&gt;项目&lt;/strong&gt;一词描述了Django Web应用程序。项目Python软件包主要由设置模块定义，但通常包含其他内容。例如，当您运行 &lt;code&gt;django-admin startproject mysite&lt;/code&gt; ，你会得到一个 &lt;code&gt;mysite&lt;/code&gt; 的包含项目目录 &lt;code&gt;mysite&lt;/code&gt; 的 Python包与 &lt;code&gt;settings.py&lt;/code&gt; ， &lt;code&gt;urls.py&lt;/code&gt; ， &lt;code&gt;asgi.py&lt;/code&gt; 和 &lt;code&gt;wsgi.py&lt;/code&gt; 。通常将项目包扩展为包括未绑定到特定应用程序的装置，CSS和模板之类的东西。</target>
        </trans-unit>
        <trans-unit id="81e046bdc21e5b84f8c7331c494a17bd41fbed61" translate="yes" xml:space="preserve">
          <source>The test client</source>
          <target state="translated">测试客户端</target>
        </trans-unit>
        <trans-unit id="e3b979f527b2b425b72a8eb0a4e95a3075f24a90" translate="yes" xml:space="preserve">
          <source>The test client does &lt;em&gt;not&lt;/em&gt; require the Web server to be running. In fact, it will run just fine with no Web server running at all! That&amp;rsquo;s because it avoids the overhead of HTTP and deals directly with the Django framework. This helps make the unit tests run quickly.</source>
          <target state="translated">测试客户端并&lt;em&gt;没有&lt;/em&gt;要求Web服务器正在运行。实际上，它完全没有任何Web服务器运行就可以正常运行！这是因为它避免了HTTP的开销，并且直接处理Django框架。这有助于使单元测试快速运行。</target>
        </trans-unit>
        <trans-unit id="7edfa2238cd385f19f4cdbaedc7031b5044917de" translate="yes" xml:space="preserve">
          <source>The test client is a Python class that acts as a dummy Web browser, allowing you to test your views and interact with your Django-powered application programmatically.</source>
          <target state="translated">测试客户端是一个Python类,作为一个虚拟的Web浏览器,允许你测试你的视图,并与你的Django驱动的应用程序进行编程交互。</target>
        </trans-unit>
        <trans-unit id="260f5d26017a499091b3f05fda847c924083d35c" translate="yes" xml:space="preserve">
          <source>The test client is not capable of retrieving Web pages that are not powered by your Django project. If you need to retrieve other Web pages, use a Python standard library module such as &lt;a href=&quot;https://docs.python.org/3/library/urllib.html#module-urllib&quot;&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">测试客户端无法检索不是由Django项目支持的网页。如果需要检索其他网页，请使用Python标准库模块，例如&lt;a href=&quot;https://docs.python.org/3/library/urllib.html#module-urllib&quot;&gt; &lt;code&gt;urllib&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be2d8fcf9f14d12f773d1f8dc3cc233c87658ea6" translate="yes" xml:space="preserve">
          <source>The test client is stateful. If a response returns a cookie, then that cookie will be stored in the test client and sent with all subsequent &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt; requests.</source>
          <target state="translated">测试客户端是有状态的。如果响应返回一个cookie，则该cookie将存储在测试客户端中，并与所有后续 &lt;code&gt;get()&lt;/code&gt; 和 &lt;code&gt;post()&lt;/code&gt; 请求一起发送。</target>
        </trans-unit>
        <trans-unit id="42c2425e0b5925babc301314d02604b18e55e326" translate="yes" xml:space="preserve">
          <source>The test client that was used to make the request that resulted in the response.</source>
          <target state="translated">用于发出请求并得到响应的测试客户端。</target>
        </trans-unit>
        <trans-unit id="ae899e0841724c832514fc8f24d72956660cf1e8" translate="yes" xml:space="preserve">
          <source>The test database</source>
          <target state="translated">测试数据库</target>
        </trans-unit>
        <trans-unit id="3a54f357ce1f20e1a383aa24fbd2fb3ab89dab80" translate="yes" xml:space="preserve">
          <source>The test informs us which test failed and even the line on which the failure occurred.</source>
          <target state="translated">测试会告知我们哪项测试失败了,甚至失败发生在哪条线路上。</target>
        </trans-unit>
        <trans-unit id="c97f852e959a0c3a42d10d8016db6b34eab8249f" translate="yes" xml:space="preserve">
          <source>The test runner accomplishes this by transparently replacing the normal email backend with a testing backend. (Don&amp;rsquo;t worry &amp;ndash; this has no effect on any other email senders outside of Django, such as your machine&amp;rsquo;s mail server, if you&amp;rsquo;re running one.)</source>
          <target state="translated">测试运行器通过用测试后端透明地替换普通电子邮件后端来实现此目的。（不用担心，这对Django之外的其他任何电子邮件发件人都没有影响，例如您的机器的邮件服务器，如果您正在运行的话。）</target>
        </trans-unit>
        <trans-unit id="5f4b3bdb73e61dea1dcf6f8ac003ea00f5d817cd" translate="yes" xml:space="preserve">
          <source>The text label for each field &amp;ndash; e.g. &lt;code&gt;'Subject:'&lt;/code&gt;, &lt;code&gt;'Message:'&lt;/code&gt; and &lt;code&gt;'Cc myself:'&lt;/code&gt; is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Again, note these are merely sensible defaults; you can also specify labels manually.</source>
          <target state="translated">每个字段的文本标签-例如， &lt;code&gt;'Subject:'&lt;/code&gt; ， &lt;code&gt;'Message:'&lt;/code&gt; 和 &lt;code&gt;'Cc myself:'&lt;/code&gt; 是通过将所有下划线都转换为空格并在首字母大写的方式从字段名称生成的。同样，请注意，这些仅仅是明智的默认设置。您也可以手动指定标签。</target>
        </trans-unit>
        <trans-unit id="3e151bae08e477066ce46b1c509c1cdb097aeac8" translate="yes" xml:space="preserve">
          <source>The text to put at the end of each admin page&amp;rsquo;s &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; (a string). By default, this is &amp;ldquo;Django site admin&amp;rdquo;.</source>
          <target state="translated">在每个管理页面的 &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 末尾放置的文本（字符串）。默认情况下，这是&amp;ldquo; Django site admin&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d87188fdf43052a4b4c59e2e840bff83afd8910d" translate="yes" xml:space="preserve">
          <source>The text to put at the top of each admin page, as an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; (a string). By default, this is &amp;ldquo;Django administration&amp;rdquo;.</source>
          <target state="translated">以 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; （字符串）形式放在每个管理页面顶部的文本。默认情况下，这是&amp;ldquo; Django管理&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="21f2d45cfc405073ae61fbf1f41314d2aed2b577" translate="yes" xml:space="preserve">
          <source>The text to put at the top of the admin index page (a string). By default, this is &amp;ldquo;Site administration&amp;rdquo;.</source>
          <target state="translated">要放在管理索引页面顶部的文本（字符串）。默认情况下，这是&amp;ldquo;站点管理&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="887b9e6b01f4daa315577f659e9db8c8d14d226e" translate="yes" xml:space="preserve">
          <source>The textual representation of the modified object&amp;rsquo;s primary key.</source>
          <target state="translated">修改对象的主键的文本表示形式。</target>
        </trans-unit>
        <trans-unit id="f177d17d1e1992fb5f13c75889ee51fde2e42340" translate="yes" xml:space="preserve">
          <source>The toolkit of base classes and mixins that Django uses to build class-based generic views are built for maximum flexibility, and as such have many hooks in the form of default method implementations and attributes that you are unlikely to be concerned with in the simplest use cases. For example, instead of limiting you to a class-based attribute for &lt;code&gt;form_class&lt;/code&gt;, the implementation uses a &lt;code&gt;get_form&lt;/code&gt; method, which calls a &lt;code&gt;get_form_class&lt;/code&gt; method, which in its default implementation returns the &lt;code&gt;form_class&lt;/code&gt; attribute of the class. This gives you several options for specifying what form to use, from an attribute, to a fully dynamic, callable hook. These options seem to add hollow complexity for simple situations, but without them, more advanced designs would be limited.</source>
          <target state="translated">Django用于构建基于类的泛型视图的基类和mixin工具包的构建具有最大的灵活性，因此，它们具有默认方法实现和属性形式的许多钩子，您可能不会在最简单的用法中关注它们案件。例如，而不是限制你为一个基于类的属性 &lt;code&gt;form_class&lt;/code&gt; ，实施使用 &lt;code&gt;get_form&lt;/code&gt; 方法，它调用一个 &lt;code&gt;get_form_class&lt;/code&gt; 方法，在其默认的实现返回 &lt;code&gt;form_class&lt;/code&gt; 类的属性。这为您提供了几个选项，用于指定从属性到完全动态，可调用的钩子使用哪种形式。对于简单情况，这些选项似乎增加了空心的复杂性，但是如果没有这些选项，则会限制更高级的设计。</target>
        </trans-unit>
        <trans-unit id="481ac5714230893da2f1bf5f0ce185f96d0ee8b5" translate="yes" xml:space="preserve">
          <source>The topic guide on &lt;a href=&quot;queries&quot;&gt;Django&amp;rsquo;s database-abstraction API&lt;/a&gt; described the way that you can use Django queries that create, retrieve, update and delete individual objects. However, sometimes you will need to retrieve values that are derived by summarizing or &lt;em&gt;aggregating&lt;/em&gt; a collection of objects. This topic guide describes the ways that aggregate values can be generated and returned using Django queries.</source>
          <target state="translated">&lt;a href=&quot;queries&quot;&gt;Django的数据库抽象API&lt;/a&gt;上的主题指南介绍了使用Django查询创建，检索，更新和删除单个对象的方式。但是，有时您需要检索通过汇总或&lt;em&gt;汇总&lt;/em&gt;对象集合而得出的值。本主题指南介绍了使用Django查询生成和返回聚合值的方式。</target>
        </trans-unit>
        <trans-unit id="4c4fea87a0bc41c145e253afd7a395f84ed6d233" translate="yes" xml:space="preserve">
          <source>The total number of objects, across all pages.</source>
          <target state="translated">所有页面的对象总数。</target>
        </trans-unit>
        <trans-unit id="e3e632ef0caaea6df46cd9a9b8d8297678f1e789" translate="yes" xml:space="preserve">
          <source>The total number of pages.</source>
          <target state="translated">总页数。</target>
        </trans-unit>
        <trans-unit id="5e21ac84038dc47b937cfac50696ff70df886f49" translate="yes" xml:space="preserve">
          <source>The total number of pixels in this band. Is equal to &lt;code&gt;width * height&lt;/code&gt;.</source>
          <target state="translated">该波段中的像素总数。等于 &lt;code&gt;width * height&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc487e6952abd1f9be3b8fa57f1b6b5c1d35cf6c" translate="yes" xml:space="preserve">
          <source>The tracebacks are present on the &lt;code&gt;__traceback__&lt;/code&gt; attribute of the errors returned when calling &lt;code&gt;send_robust()&lt;/code&gt;.</source>
          <target state="translated">调用 &lt;code&gt;send_robust()&lt;/code&gt; 时，返回的错误的 &lt;code&gt;__traceback__&lt;/code&gt; 属性上提供了追溯。</target>
        </trans-unit>
        <trans-unit id="afdc746ca47557d9d1aee4cd7a9b607f845bcbc6" translate="yes" xml:space="preserve">
          <source>The translation catalogs for JavaScript should be kept as small as possible.</source>
          <target state="translated">JavaScript的翻译目录应该尽可能的小。</target>
        </trans-unit>
        <trans-unit id="239e37f00ec5c27960e75b0c84e61e77f59702f7" translate="yes" xml:space="preserve">
          <source>The translations for literals included in JavaScript assets are looked up following a similar but not identical algorithm. See &lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt;&lt;code&gt;JavaScriptCatalog&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">使用相似但不相同的算法查找JavaScript资产中包含的文字的翻译。有关更多详细信息，请参见&lt;a href=&quot;#django.views.i18n.JavaScriptCatalog&quot;&gt; &lt;code&gt;JavaScriptCatalog&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d822fc1471c8616621bbd3b05485664a68d6a953" translate="yes" xml:space="preserve">
          <source>The tricky thing here is that there&amp;rsquo;s really no such thing as a &amp;ldquo;page load,&amp;rdquo; especially in modern Web apps that generate HTML dynamically after the server generates the initial document. So, checking for the presence of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; in the response might not necessarily be appropriate for all use cases. Please refer to the &lt;a href=&quot;https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa&quot;&gt;Selenium FAQ&lt;/a&gt; and &lt;a href=&quot;https://www.seleniumhq.org/docs/04_webdriver_advanced.html#explicit-waits&quot;&gt;Selenium documentation&lt;/a&gt; for more information.</source>
          <target state="translated">棘手的是，实际上没有&amp;ldquo;页面加载&amp;rdquo;之类的东西，尤其是在现代Web应用程序中，在服务器生成初始文档后动态生成HTML。因此，检查响应中是否存在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 不一定适合所有用例。请参阅&lt;a href=&quot;https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa&quot;&gt;Selenium FAQ&lt;/a&gt;和&lt;a href=&quot;https://www.seleniumhq.org/docs/04_webdriver_advanced.html#explicit-waits&quot;&gt;Selenium文档&lt;/a&gt;以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="7f90beec2a7d95089997ab3cb32ad5b86a4aa5f2" translate="yes" xml:space="preserve">
          <source>The tutorial project has just one app, &lt;code&gt;polls&lt;/code&gt;. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the &lt;code&gt;polls&lt;/code&gt; app has a &lt;code&gt;detail&lt;/code&gt; view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the &lt;code&gt;{% url %}&lt;/code&gt; template tag?</source>
          <target state="translated">该教程项目只有一个应用程序 &lt;code&gt;polls&lt;/code&gt; 。在实际的Django项目中，可能有五个，十个，二十个或更多应用程序。Django如何区分它们之间的URL名称？例如， &lt;code&gt;polls&lt;/code&gt; 应用程序具有 &lt;code&gt;detail&lt;/code&gt; 视图，同一项目中的应用程序也可能具有博客视图。如何做到这一点，以便Django在使用 &lt;code&gt;{% url %}&lt;/code&gt; 模板标记时知道为该URL创建哪个应用视图？</target>
        </trans-unit>
        <trans-unit id="58d7d2fc32c675eb57959cccbf0d46f6386fd5e2" translate="yes" xml:space="preserve">
          <source>The two SQL statements are functionally equivalent but the more explicit &lt;code&gt;FILTER&lt;/code&gt; may perform better.</source>
          <target state="translated">这两个SQL语句在功能上是等效的，但更明确的 &lt;code&gt;FILTER&lt;/code&gt; 可能会表现更好。</target>
        </trans-unit>
        <trans-unit id="674a863c89f1969cb1f6b9aa463bab50cb15db53" translate="yes" xml:space="preserve">
          <source>The two following generic class-based views are designed to display data. On many projects they are typically the most commonly used views.</source>
          <target state="translated">以下两个基于类的通用视图旨在显示数据。在许多项目中,它们通常是最常用的视图。</target>
        </trans-unit>
        <trans-unit id="b863eb1cd06b7e0eda33ebca4adf007c3ddcb435" translate="yes" xml:space="preserve">
          <source>The two functions, to compute the ETag and the last modified time, will be passed the incoming &lt;code&gt;request&lt;/code&gt; object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed &lt;code&gt;last_modified_func&lt;/code&gt; should return a standard datetime value specifying the last time the resource was modified, or &lt;code&gt;None&lt;/code&gt; if the resource doesn&amp;rsquo;t exist. The function passed to the &lt;code&gt;etag&lt;/code&gt; decorator should return a string representing the &lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-2.3&quot;&gt;ETag&lt;/a&gt; for the resource, or &lt;code&gt;None&lt;/code&gt; if it doesn&amp;rsquo;t exist.</source>
          <target state="translated">这两个用于计算ETag和最后修改时间的函数将以传入的 &lt;code&gt;request&lt;/code&gt; 对象和相同参数的顺序传递给它们，以帮助包装它们的视图函数。传递给 &lt;code&gt;last_modified_func&lt;/code&gt; 的函数应返回一个标准的datetime值，该值指定上次修改资源的时间；如果资源不存在，则返回 &lt;code&gt;None&lt;/code&gt; 。传递给 &lt;code&gt;etag&lt;/code&gt; 装饰器的函数应返回表示资源&lt;a href=&quot;https://tools.ietf.org/html/rfc7232#section-2.3&quot;&gt;ETag&lt;/a&gt;的字符串，如果不存在则返回 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc39b0594e7a35bb326c7f9d74277e40e3701521" translate="yes" xml:space="preserve">
          <source>The two-tuples are in the format &lt;code&gt;(name, field_options)&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is a string representing the title of the fieldset and &lt;code&gt;field_options&lt;/code&gt; is a dictionary of information about the fieldset, including a list of fields to be displayed in it.</source>
          <target state="translated">这两个元组的格式为 &lt;code&gt;(name, field_options)&lt;/code&gt; ，其中 &lt;code&gt;name&lt;/code&gt; 是代表 &lt;code&gt;field_options&lt;/code&gt; 标题的字符串，field_options是有关字段集的信息字典，包括要在其中显示的字段的列表。</target>
        </trans-unit>
        <trans-unit id="23a7b566b24b2453b30ea223bd752e68d45709d6" translate="yes" xml:space="preserve">
          <source>The type of action logged: &lt;code&gt;ADDITION&lt;/code&gt;, &lt;code&gt;CHANGE&lt;/code&gt;, &lt;code&gt;DELETION&lt;/code&gt;.</source>
          <target state="translated">记录的操作类型： &lt;code&gt;ADDITION&lt;/code&gt; ， &lt;code&gt;CHANGE&lt;/code&gt; ， &lt;code&gt;DELETION&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4095ba777cd566193c49b37bf9444d663c178942" translate="yes" xml:space="preserve">
          <source>The type of filter displayed depends on the type of field you&amp;rsquo;re filtering on. Because &lt;code&gt;pub_date&lt;/code&gt; is a &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, Django knows to give appropriate filter options: &amp;ldquo;Any date&amp;rdquo;, &amp;ldquo;Today&amp;rdquo;, &amp;ldquo;Past 7 days&amp;rdquo;, &amp;ldquo;This month&amp;rdquo;, &amp;ldquo;This year&amp;rdquo;.</source>
          <target state="translated">显示的过滤器类型取决于您要过滤的字段类型。因为 &lt;code&gt;pub_date&lt;/code&gt; 是&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;，所以Django知道提供适当的过滤器选项：&amp;ldquo;任何日期&amp;rdquo;，&amp;ldquo;今天&amp;rdquo;，&amp;ldquo;过去7天&amp;rdquo;，&amp;ldquo;本月&amp;rdquo;，&amp;ldquo;今年&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="b8cbbb3eb69fad73343b1cf903d7db0fb0d52de0" translate="yes" xml:space="preserve">
          <source>The type of raster support is listed for all lookups in the &lt;a href=&quot;#spatial-lookup-compatibility&quot;&gt;compatibility table&lt;/a&gt;. Lookups involving rasters are currently only available for the PostGIS backend.</source>
          <target state="translated">&lt;a href=&quot;#spatial-lookup-compatibility&quot;&gt;兼容性表中&lt;/a&gt;列出了所有查找的栅格支持类型。当前，涉及栅格的查找仅可用于PostGIS后端。</target>
        </trans-unit>
        <trans-unit id="e669aa32f58e6dad279fd73bb0ded65171dc36f8" translate="yes" xml:space="preserve">
          <source>The uWSGI docs offer a &lt;a href=&quot;https://uwsgi.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;tutorial&lt;/a&gt; covering Django, nginx, and uWSGI (one possible deployment setup of many). The docs below are focused on how to integrate Django with uWSGI.</source>
          <target state="translated">uWSGI文档提供了涵盖Django，nginx和uWSGI（许多可能的部署设置）的&lt;a href=&quot;https://uwsgi.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;教程&lt;/a&gt;。以下文档重点介绍如何将Django与uWSGI集成。</target>
        </trans-unit>
        <trans-unit id="675f9e8c48e417fc0bb62998fd4589a3c32ca0ea" translate="yes" xml:space="preserve">
          <source>The uWSGI wiki describes several &lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/Install.html&quot;&gt;installation procedures&lt;/a&gt;. Using pip, the Python package manager, you can install any uWSGI version with a single command. For example:</source>
          <target state="translated">uWSGI Wiki描述了几种&lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/Install.html&quot;&gt;安装过程&lt;/a&gt;。使用Python软件包管理器pip，您可以使用单个命令安装任何uWSGI版本。例如：</target>
        </trans-unit>
        <trans-unit id="de2f854319ec9170ef19d843cc3c65d72047a46c" translate="yes" xml:space="preserve">
          <source>The underlying &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; that this class wraps.</source>
          <target state="translated">此类包装的基础&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-file-object&quot;&gt;文件对象&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e73d577a9e8c04eba9424f78c1e81e0a00a03ffe" translate="yes" xml:space="preserve">
          <source>The underscore character (&lt;code&gt;_&lt;/code&gt;) is used to represent &amp;ldquo;the previous result&amp;rdquo; in Python&amp;rsquo;s interactive shell and doctest tests. Installing a global &lt;code&gt;_()&lt;/code&gt; function causes interference. Explicitly importing &lt;code&gt;gettext()&lt;/code&gt; as &lt;code&gt;_()&lt;/code&gt; avoids this problem.</source>
          <target state="translated">下划线字符（ &lt;code&gt;_&lt;/code&gt; ）表示Python的交互式shell和doctest测试中的&amp;ldquo;先前结果&amp;rdquo;。安装全局 &lt;code&gt;_()&lt;/code&gt; 函数会引起干扰。明确地将 &lt;code&gt;gettext()&lt;/code&gt; 导入为 &lt;code&gt;_()&lt;/code&gt; 可以避免此问题。</target>
        </trans-unit>
        <trans-unit id="c4c88b795ccf4b5b6da5f19eb483255d93a00694" translate="yes" xml:space="preserve">
          <source>The unittest library provides the &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt;&lt;code&gt;@skipIf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipUnless&quot;&gt;&lt;code&gt;@skipUnless&lt;/code&gt;&lt;/a&gt; decorators to allow you to skip tests if you know ahead of time that those tests are going to fail under certain conditions.</source>
          <target state="translated">unittest库提供&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt; &lt;code&gt;@skipIf&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipUnless&quot;&gt; &lt;code&gt;@skipUnless&lt;/code&gt; &lt;/a&gt;装饰器，如果您提前知道在某些情况下这些测试将失败，则可以跳过测试。</target>
        </trans-unit>
        <trans-unit id="274bc5c1adbaedf49290dd1ff8edc4f885dbb54d" translate="yes" xml:space="preserve">
          <source>The uploaded file&amp;rsquo;s relative URL can be obtained using the &lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; attribute. Internally, this calls the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.url&quot;&gt;&lt;code&gt;url()&lt;/code&gt;&lt;/a&gt; method of the underlying &lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">可以使用&lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt; &lt;code&gt;url&lt;/code&gt; &lt;/a&gt;属性获取上载文件的相对URL 。在内部，这将调用基础&lt;a href=&quot;../files/storage#django.core.files.storage.Storage&quot;&gt; &lt;code&gt;Storage&lt;/code&gt; &lt;/a&gt;类的&lt;a href=&quot;../files/storage#django.core.files.storage.Storage.url&quot;&gt; &lt;code&gt;url()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="ee75a7871a7d992c449384f1855eb9ba34439252" translate="yes" xml:space="preserve">
          <source>The upper-right coordinate, as a tuple.</source>
          <target state="translated">右上角的坐标,作为一个元组。</target>
        </trans-unit>
        <trans-unit id="c1a74184d8276fe24835484131ee8f29d921ba12" translate="yes" xml:space="preserve">
          <source>The url to redirect to when the nominated object has been successfully deleted.</source>
          <target state="translated">当指定对象被成功删除时,重定向到的网址。</target>
        </trans-unit>
        <trans-unit id="d39ce41ce67366d315ddf13bef1b3bc991191815" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;https://docs.python.org/3/library/enum.html#enum.unique&quot;&gt;&lt;code&gt;enum.unique()&lt;/code&gt;&lt;/a&gt; is enforced to ensure that values cannot be defined multiple times. This is unlikely to be expected in choices for a field.</source>
          <target state="translated">强制使用&lt;a href=&quot;https://docs.python.org/3/library/enum.html#enum.unique&quot;&gt; &lt;code&gt;enum.unique()&lt;/code&gt; &lt;/a&gt;以确保不能多次定义值。在选择某个字段时，这不太可能发生。</target>
        </trans-unit>
        <trans-unit id="3dc90c99fc2aa8ef655a7b4fedee59604000d447" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;WSGIApplicationGroup %{GLOBAL}&lt;/code&gt; in the configurations below presumes that your Apache instance is running only one Django application. If you are running more than one Django application, please refer to the &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/configuration-guidelines.html#defining-application-groups&quot;&gt;Defining Application Groups&lt;/a&gt; section of the mod_wsgi docs for more information about this setting.</source>
          <target state="translated">在以下配置中使用 &lt;code&gt;WSGIApplicationGroup %{GLOBAL}&lt;/code&gt; 假定您的Apache实例仅运行一个Django应用程序。如果您正在运行多个Django应用程序，请参阅mod_wsgi文档的&amp;ldquo; &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/user-guides/configuration-guidelines.html#defining-application-groups&quot;&gt;定义应用程序组&amp;rdquo;&lt;/a&gt;部分以获取有关此设置的更多信息。</target>
        </trans-unit>
        <trans-unit id="8ce9aa55ad527455a19f1fb5dee0cc5f1881171d" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;pk&lt;/code&gt; isn&amp;rsquo;t limited to &lt;code&gt;__exact&lt;/code&gt; queries &amp;ndash; any query term can be combined with &lt;code&gt;pk&lt;/code&gt; to perform a query on the primary key of a model:</source>
          <target state="translated">&lt;code&gt;pk&lt;/code&gt; 的使用不限于 &lt;code&gt;__exact&lt;/code&gt; 查询-任何查询项都可以与 &lt;code&gt;pk&lt;/code&gt; 结合使用以对模型的主键执行查询：</target>
        </trans-unit>
        <trans-unit id="273126119ad197e589386b39eb3b14737967b48f" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;{{ emails|length }}&lt;/code&gt; calls &lt;code&gt;QuerySet.__len__()&lt;/code&gt;, filling out the rest of the cache without doing another query.</source>
          <target state="translated">使用 &lt;code&gt;{{ emails|length }}&lt;/code&gt; 调用 &lt;code&gt;QuerySet.__len__()&lt;/code&gt; ，从而填充了缓存的其余部分，而无需执行其他查询。</target>
        </trans-unit>
        <trans-unit id="0b30ef555288d169dbdc087902f82ddc584ac1d8" translate="yes" xml:space="preserve">
          <source>The use-case for this is when you want to display an &amp;ldquo;empty&amp;rdquo; form in which a field is initialized to a particular value. For example:</source>
          <target state="translated">这种情况的用例是当您要显示&amp;ldquo;空&amp;rdquo;表格时，该表格将字段初始化为特定值。例如：</target>
        </trans-unit>
        <trans-unit id="f98ac9915db27d519b4f31d99e5b73b80632ede9" translate="yes" xml:space="preserve">
          <source>The user (an &lt;a href=&quot;../../settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; instance) who performed the action.</source>
          <target state="translated">执行操作的用户（&lt;a href=&quot;../../settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;实例）。</target>
        </trans-unit>
        <trans-unit id="ba7924d79d72323d07424923c90fc0caf870b08f" translate="yes" xml:space="preserve">
          <source>The user instance that just logged in.</source>
          <target state="translated">刚刚登录的用户实例。</target>
        </trans-unit>
        <trans-unit id="1d2a706cbc9d7c33b8053d9f20b4de1e3f730d1e" translate="yes" xml:space="preserve">
          <source>The user instance that just logged out or &lt;code&gt;None&lt;/code&gt; if the user was not authenticated.</source>
          <target state="translated">刚刚注销的用户实例；如果未通过身份验证，则为&amp;ldquo; &lt;code&gt;None&lt;/code&gt; &amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="fcef0c145350d4039e3d9fa5184930eb7093fb5a" translate="yes" xml:space="preserve">
          <source>The user model and its manager will delegate permission lookup functions (&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions&quot;&gt;&lt;code&gt;get_user_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions&quot;&gt;&lt;code&gt;get_group_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions&quot;&gt;&lt;code&gt;get_all_permissions()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;has_module_perms()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm&quot;&gt;&lt;code&gt;with_perm()&lt;/code&gt;&lt;/a&gt;) to any authentication backend that implements these functions.</source>
          <target state="translated">用户模型及其管理器将把权限查找功能（&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions&quot;&gt; &lt;code&gt;get_user_permissions()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions&quot;&gt; &lt;code&gt;get_group_permissions()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions&quot;&gt; &lt;code&gt;get_all_permissions()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;has_perm()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;has_module_perms()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm&quot;&gt; &lt;code&gt;with_perm()&lt;/code&gt; &lt;/a&gt;）委派给实现这些功能的任何身份验证后端。</target>
        </trans-unit>
        <trans-unit id="2a13affe6b8e618bcf30d16ab31afddb530fe513" translate="yes" xml:space="preserve">
          <source>The user will have its &lt;code&gt;backend&lt;/code&gt; attribute set to the value of the &lt;code&gt;backend&lt;/code&gt; argument (which should be a dotted Python path string), or to &lt;code&gt;settings.AUTHENTICATION_BACKENDS[0]&lt;/code&gt; if a value isn&amp;rsquo;t provided. The &lt;a href=&quot;../auth/default#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt; function called by &lt;a href=&quot;#django.test.Client.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; normally annotates the user like this.</source>
          <target state="translated">用户将其 &lt;code&gt;backend&lt;/code&gt; 属性设置为 &lt;code&gt;backend&lt;/code&gt; 参数的值（应为点分Python路径字符串）或 &lt;code&gt;settings.AUTHENTICATION_BACKENDS[0]&lt;/code&gt; 如果未提供值）。通常，由&lt;a href=&quot;#django.test.Client.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt;调用的&lt;a href=&quot;../auth/default#django.contrib.auth.authenticate&quot;&gt; &lt;code&gt;authenticate()&lt;/code&gt; &lt;/a&gt;函数会对用户进行注释。</target>
        </trans-unit>
        <trans-unit id="f40dbf0ccf66035c9ac922cb2bd495a35c214797" translate="yes" xml:space="preserve">
          <source>The username and email address for the new account can be supplied by using the &lt;code&gt;--username&lt;/code&gt; and &lt;code&gt;--email&lt;/code&gt; arguments on the command line. If either of those is not supplied, &lt;code&gt;createsuperuser&lt;/code&gt; will prompt for it when running interactively.</source>
          <target state="translated">可以使用命令行上的 &lt;code&gt;--username&lt;/code&gt; 和 &lt;code&gt;--email&lt;/code&gt; 参数来提供新帐户的用户名和电子邮件地址。如果未提供任何一个，则当交互式运行时， &lt;code&gt;createsuperuser&lt;/code&gt; 会提示您输入。</target>
        </trans-unit>
        <trans-unit id="def789175ec6313f4c3b4e21168ca6e1c1853404" translate="yes" xml:space="preserve">
          <source>The username passed as &lt;code&gt;remote_user&lt;/code&gt; is considered trusted. This method returns the user object with the given username, creating a new user object if &lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user&quot;&gt;&lt;code&gt;create_unknown_user&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">作为 &lt;code&gt;remote_user&lt;/code&gt; 传递的用户名被认为是受信任的。此方法返回具有给定用户名的用户对象，如果&lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user&quot;&gt; &lt;code&gt;create_unknown_user&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;True&lt;/code&gt; ，则创建一个新的用户对象。</target>
        </trans-unit>
        <trans-unit id="431f8cbfd1a96932abb875994c21572b89cffecb" translate="yes" xml:space="preserve">
          <source>The username to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use &lt;code&gt;'test_' + USER&lt;/code&gt;.</source>
          <target state="translated">连接到运行测试时将使用的Oracle数据库时使用的用户名。如果未提供，Django将使用 &lt;code&gt;'test_' + USER&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7786d2e6c321e6d912e2620304b49b99c56b85c5" translate="yes" xml:space="preserve">
          <source>The username to use when connecting to the database. Not used with SQLite.</source>
          <target state="translated">连接数据库时要使用的用户名。不用于SQLite。</target>
        </trans-unit>
        <trans-unit id="6c4203696b84799bcc5ae72ef84b0ea6971ab83a" translate="yes" xml:space="preserve">
          <source>The validation routines will only get called once, regardless of how many times you access &lt;a href=&quot;#django.forms.Form.errors&quot;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; or call &lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt;&lt;code&gt;is_valid()&lt;/code&gt;&lt;/a&gt;. This means that if validation has side effects, those side effects will only be triggered once.</source>
          <target state="translated">验证例程仅被调用一次，无论您访问&lt;a href=&quot;#django.forms.Form.errors&quot;&gt; &lt;code&gt;errors&lt;/code&gt; &lt;/a&gt;或调用&lt;a href=&quot;#django.forms.Form.is_valid&quot;&gt; &lt;code&gt;is_valid()&lt;/code&gt; 的&lt;/a&gt;次数如何。这意味着，如果验证具有副作用，则这些副作用将仅触发一次。</target>
        </trans-unit>
        <trans-unit id="66b0cda61ff3b53e944fdfc3dfe655c60cfbb3cd" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;form&lt;/code&gt; defaults to &lt;code&gt;ModelForm&lt;/code&gt;. This is what is passed through to &lt;a href=&quot;../../forms/models#django.forms.models.inlineformset_factory&quot;&gt;&lt;code&gt;inlineformset_factory()&lt;/code&gt;&lt;/a&gt; when creating the formset for this inline.</source>
          <target state="translated">对值 &lt;code&gt;form&lt;/code&gt; 默认 &lt;code&gt;ModelForm&lt;/code&gt; 。这是为此内联创建&lt;a href=&quot;../../forms/models#django.forms.models.inlineformset_factory&quot;&gt; &lt;code&gt;inlineformset_factory()&lt;/code&gt; &lt;/a&gt;时传递给inlineformset_factory（）的内容。</target>
        </trans-unit>
        <trans-unit id="d49f07aa3764eb2da4ea4ec37d326aa1676d45df" translate="yes" xml:space="preserve">
          <source>The value for each argument is retrieved from the matching setting if the argument is &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">如果参数为 &lt;code&gt;None&lt;/code&gt; ,则从匹配设置中检索每个参数的值：</target>
        </trans-unit>
        <trans-unit id="0a04c5a63b28da01c0855cf722eca4bd4c04656f" translate="yes" xml:space="preserve">
          <source>The value included in the HTTP &lt;code&gt;Content-Type&lt;/code&gt; header, including the MIME type specification and the character set encoding. If &lt;code&gt;content_type&lt;/code&gt; is specified, then its value is used. Otherwise, &lt;code&gt;'text/html'&lt;/code&gt; is used.</source>
          <target state="translated">HTTP &lt;code&gt;Content-Type&lt;/code&gt; 标头中包含的值，包括MIME类型规范和字符集编码。如果指定了 &lt;code&gt;content_type&lt;/code&gt; ，则使用其值。否则，将使用 &lt;code&gt;'text/html'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a8e770a05f9768e242a5e28fa732ed6e3510a68" translate="yes" xml:space="preserve">
          <source>The value must be an integer from 0 to 6, where 0 means Sunday, 1 means Monday and so on.</source>
          <target state="translated">该值必须是0到6的整数,其中0代表周日,1代表周一,以此类推。</target>
        </trans-unit>
        <trans-unit id="732620917b72ac261f1791ce97d334780ab692d8" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t respected inside of a &lt;code&gt;{% localize %}&lt;/code&gt; block.</source>
          <target state="translated">在 &lt;code&gt;{% localize %}&lt;/code&gt; 块内部不尊重&lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; &lt;/a&gt;的值。</target>
        </trans-unit>
        <trans-unit id="67ea8feda5a567ef52cb79677f9ed3e5be4f8be9" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t respected inside of a &lt;code&gt;{% localtime %}&lt;/code&gt; block.</source>
          <target state="translated">在 &lt;code&gt;{% localtime %}&lt;/code&gt; 块内部不尊重&lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt;的值。</target>
        </trans-unit>
        <trans-unit id="7b2c3507ccaa77494d0b0708dd391ba906e88b13" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; should be in Python path syntax, e.g. &lt;code&gt;mysite.settings&lt;/code&gt;. Note that the settings module should be on the Python &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;import search path&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 的值应采用Python路径语法，例如 &lt;code&gt;mysite.settings&lt;/code&gt; 。请注意，设置模块应位于Python &lt;a href=&quot;https://www.diveinto.org/python3/your-first-python-program.html#importsearchpath&quot;&gt;导入搜索路径上&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89558af8db81c21a3e4543d219a78efd19b542c6" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;config&lt;/code&gt; could also be stored in another column:</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; 的值也可以存储在另一列中：</target>
        </trans-unit>
        <trans-unit id="1d081816f701eb655ca492d6b62c0caff4611c02" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.DayMixin.day&quot;&gt;&lt;code&gt;DayMixin.day&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.DayMixin.day&quot;&gt; &lt;code&gt;DayMixin.day&lt;/code&gt; &lt;/a&gt;属性的值。</target>
        </trans-unit>
        <trans-unit id="71d1660d6f9a19e7fbfbf739d0aef9d2eeacf611" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.MonthMixin.month&quot;&gt;&lt;code&gt;MonthMixin.month&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.MonthMixin.month&quot;&gt; &lt;code&gt;MonthMixin.month&lt;/code&gt; &lt;/a&gt;属性的值。</target>
        </trans-unit>
        <trans-unit id="226f4609720f49cd94be18a77a87223bedbd64c9" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.WeekMixin.week&quot;&gt;&lt;code&gt;WeekMixin.week&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.WeekMixin.week&quot;&gt; &lt;code&gt;WeekMixin.week&lt;/code&gt; &lt;/a&gt;属性的值。</target>
        </trans-unit>
        <trans-unit id="08c239bdeb144dcf81c89832bb248fb6ac315e1f" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;#django.views.generic.dates.YearMixin.year&quot;&gt;&lt;code&gt;YearMixin.year&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">&lt;a href=&quot;#django.views.generic.dates.YearMixin.year&quot;&gt; &lt;code&gt;YearMixin.year&lt;/code&gt; &lt;/a&gt;属性的值。</target>
        </trans-unit>
        <trans-unit id="280929d455ba7974dc4c9661e146db91c8f2a5b6" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the CSRF cookie. This flag prevents the cookie from being sent in cross-site requests.</source>
          <target state="translated">CSRF cookie上&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;标志的值。此标志可防止Cookie在跨站点请求中发送。</target>
        </trans-unit>
        <trans-unit id="05f34ea833177727bf66769518bb78b95201dae9" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the language cookie. This flag prevents the cookie from being sent in cross-site requests.</source>
          <target state="translated">语言Cookie上&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;标志的值。此标志可防止Cookie在跨站点请求中发送。</target>
        </trans-unit>
        <trans-unit id="8910bb7b1c422d259507f49f930d79d5324246cc" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt; flag on the session cookie. This flag prevents the cookie from being sent in cross-site requests thus preventing CSRF attacks and making some methods of stealing session cookie impossible.</source>
          <target state="translated">会话cookie上&lt;a href=&quot;https://www.owasp.org/index.php/SameSite&quot;&gt;SameSite&lt;/a&gt;标志的值。此标志可防止cookie在跨站点请求中发送，从而防止CSRF攻击并使某些无法窃取会话cookie的方法成为可能。</target>
        </trans-unit>
        <trans-unit id="298e4586be06aa27d7f12e849b88b0f636afc6fe" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;day&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URL模式中捕获的 &lt;code&gt;day&lt;/code&gt; 参数的值。</target>
        </trans-unit>
        <trans-unit id="e64d941a32f80a7ae6df42e669a81245de42c7ba" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;day&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;day&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; 查询参数的值。</target>
        </trans-unit>
        <trans-unit id="62a6bb78ee5bb993b75f246347d0150e154db741" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;month&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URL模式中捕获的 &lt;code&gt;month&lt;/code&gt; 参数的值。</target>
        </trans-unit>
        <trans-unit id="aa12055332e36b7c6f2f35340de617e28e1e6481" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;month&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;month&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; 查询参数的值。</target>
        </trans-unit>
        <trans-unit id="6e5e7cee85906d927aea0475bdea4b6eedbf92a5" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;week&lt;/code&gt; argument captured in the URL pattern</source>
          <target state="translated">URL模式中捕获的 &lt;code&gt;week&lt;/code&gt; 参数的值</target>
        </trans-unit>
        <trans-unit id="0bfcc66cd6d3f68a5eca0a763fb4c503b7085fb3" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;week&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;week&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; 查询参数的值。</target>
        </trans-unit>
        <trans-unit id="524a33c93271d5afc33c2152361848b96ac3a3f0" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;year&lt;/code&gt; argument captured in the URL pattern.</source>
          <target state="translated">URL模式中捕获的 &lt;code&gt;year&lt;/code&gt; 参数的值。</target>
        </trans-unit>
        <trans-unit id="d560a643bb27590bcc2dec6cd5677cd787623e54" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;year&lt;/code&gt;&lt;code&gt;GET&lt;/code&gt; query argument.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; &lt;code&gt;GET&lt;/code&gt; 查询参数的值。</target>
        </trans-unit>
        <trans-unit id="f7f4f12279eeae08cedfa7a9e14d1167e6d447be" translate="yes" xml:space="preserve">
          <source>The value of the argument &amp;ndash; this can have a default value, or be left out altogether.</source>
          <target state="translated">参数的值&amp;ndash;可以具有默认值，也可以完全省略。</target>
        </trans-unit>
        <trans-unit id="ec6ac746f0b25b7b4f2cc036d47940cd2ec2aef9" translate="yes" xml:space="preserve">
          <source>The value of the field. e.g &lt;code&gt;someone@example.com&lt;/code&gt;.</source>
          <target state="translated">字段的值。例如 &lt;code&gt;someone@example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41b7516665c8b906dc40cf4c31049dcdc5069769" translate="yes" xml:space="preserve">
          <source>The value of the maximum X coordinate.</source>
          <target state="translated">最大X坐标的值。</target>
        </trans-unit>
        <trans-unit id="09c836cc6cf9cc8692f0d479cf06744b298bfe32" translate="yes" xml:space="preserve">
          <source>The value of the maximum Y coordinate.</source>
          <target state="translated">最大Y坐标的值。</target>
        </trans-unit>
        <trans-unit id="58bafdea94b9df2b451f5c666b3595a08835e5b7" translate="yes" xml:space="preserve">
          <source>The value of the minimum X coordinate.</source>
          <target state="translated">最小X坐标的值。</target>
        </trans-unit>
        <trans-unit id="e4e8025b92622c3296781e38fbecc4454c93dfc8" translate="yes" xml:space="preserve">
          <source>The value of the minimum Y coordinate.</source>
          <target state="translated">最小Y坐标的值。</target>
        </trans-unit>
        <trans-unit id="3ef01c3485565b0704310aa95c017927c8e1f354" translate="yes" xml:space="preserve">
          <source>The value of the setting after the change. For settings that initially don&amp;rsquo;t exist, in the &amp;ldquo;teardown&amp;rdquo; phase, &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">更改后的设置值。对于最初不存在的设置，在&amp;ldquo;拆卸&amp;rdquo;阶段， &lt;code&gt;value&lt;/code&gt; 是 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="880fff0eb8eb665abc6dd4c5caf39caf9fa905ce" translate="yes" xml:space="preserve">
          <source>The value of the variable (input) &amp;ndash; not necessarily a string.</source>
          <target state="translated">变量（输入）的值&amp;ndash;不一定是字符串。</target>
        </trans-unit>
        <trans-unit id="2000cde189dcec991f2548f4c0308723287567b2" translate="yes" xml:space="preserve">
          <source>The value passed into a distance lookup is a tuple; the first two values are mandatory, and are the geometry to calculate distances to, and a distance value (either a number in units of the field, a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object, or a &lt;code&gt;query expression &amp;lt;ref/models/expressions&amp;gt;&lt;/code&gt;). To pass a band index to the lookup, use a 3-tuple where the second entry is the band index.</source>
          <target state="translated">传递给距离查找的值是一个元组。前两个值是强制性的，并且是要计算距离的几何形状以及距离值（以字段为单位的数字，&lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;对象或 &lt;code&gt;query expression &amp;lt;ref/models/expressions&amp;gt;&lt;/code&gt; ）。要将波段索引传递给查找，请使用3元组，其中第二个条目是波段索引。</target>
        </trans-unit>
        <trans-unit id="53f85ce3d67bb4f844e2ebff980ba70358c2cb64" translate="yes" xml:space="preserve">
          <source>The value should be either a boolean, a list or a tuple. Default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">该值应为布尔值，列表或元组。默认值为 &lt;code&gt;False&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73f4b3072b3ddf1bb6604896db5d3d4360c70e89" translate="yes" xml:space="preserve">
          <source>The value to use to represent &amp;ldquo;empty&amp;rdquo;. Defaults to an empty string.</source>
          <target state="translated">用于表示&amp;ldquo;空&amp;rdquo;的值。默认为空字符串。</target>
        </trans-unit>
        <trans-unit id="84b9912d356e5407f1a60cc39f2fc002afd5a8ad" translate="yes" xml:space="preserve">
          <source>The value to use to represent &amp;ldquo;empty.&amp;rdquo; Defaults to the empty string; &lt;code&gt;None&lt;/code&gt; is another common choice here. Note that this value will not be coerced by the function given in the &lt;code&gt;coerce&lt;/code&gt; argument, so choose it accordingly.</source>
          <target state="translated">用于表示&amp;ldquo;空&amp;rdquo;的值。默认为空字符串；在这里 &lt;code&gt;None&lt;/code&gt; 另一个是常见的选择。请注意，该值将不会由 &lt;code&gt;coerce&lt;/code&gt; 参数中给出的函数强制转换，因此请相应地选择它。</target>
        </trans-unit>
        <trans-unit id="e726e8fcaf5eb9f16edc0e0f0220e474bb57dbda" translate="yes" xml:space="preserve">
          <source>The values are (type, value, traceback), the same as returned by Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;. Their meanings are:</source>
          <target state="translated">值是（类型，值，回溯），与Python的&lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.exc_info&quot;&gt; &lt;code&gt;sys.exc_info()&lt;/code&gt; &lt;/a&gt;返回的值相同。它们的含义是：</target>
        </trans-unit>
        <trans-unit id="1491d5d79613a9dd1811dabfb20ea96097749151" translate="yes" xml:space="preserve">
          <source>The values from the &lt;code&gt;extra&lt;/code&gt; keywords arguments passed to &lt;a href=&quot;#django.test.Client.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.test.Client.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;, etc. have precedence over the defaults passed to the class constructor.</source>
          <target state="translated">传递给&lt;a href=&quot;#django.test.Client.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#django.test.Client.post&quot;&gt; &lt;code&gt;post()&lt;/code&gt; &lt;/a&gt;等的 &lt;code&gt;extra&lt;/code&gt; 关键字参数的值优先于传递给类构造函数的默认值。</target>
        </trans-unit>
        <trans-unit id="98af89f29d056c33c0562b51657d7354cb3eeec8" translate="yes" xml:space="preserve">
          <source>The values in the dictionary are not case-sensitive and are automatically converted to the correct string format upon creation.</source>
          <target state="translated">字典中的值不区分大小写,在创建时自动转换为正确的字符串格式。</target>
        </trans-unit>
        <trans-unit id="3c149f927e02325eb3ee1fc1e3083ba72003ab17" translate="yes" xml:space="preserve">
          <source>The values in the dictionary should be a tuple/list of file names. See &lt;a href=&quot;#form-asset-paths&quot;&gt;the section on paths&lt;/a&gt; for details of how to specify paths to these files.</source>
          <target state="translated">字典中的值应为元组/文件名列表。有关如何指定这些文件的&lt;a href=&quot;#form-asset-paths&quot;&gt;路径&lt;/a&gt;的详细信息，请参见路径部分。</target>
        </trans-unit>
        <trans-unit id="bacff239831855e997d75de7d53cc0a1355cc1af" translate="yes" xml:space="preserve">
          <source>The values of a model&amp;rsquo;s fields won&amp;rsquo;t be reverted when a transaction rollback happens. This could lead to an inconsistent model state unless you manually restore the original field values.</source>
          <target state="translated">发生事务回滚时，不会还原模型字段的值。除非您手动还原原始字段值，否则这可能导致模型状态不一致。</target>
        </trans-unit>
        <trans-unit id="f0feca5eeb791aec15a7643b653585ab49aca48f" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;sitemaps&lt;/code&gt; is a list of absolute URLs to each of the sitemaps.</source>
          <target state="translated">变量 &lt;code&gt;sitemaps&lt;/code&gt; 是每个站点地图的绝对URL的列表。</target>
        </trans-unit>
        <trans-unit id="dba44adf72bdf4c5f6ac791d193ebb5f0b8c5fc2" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;urlset&lt;/code&gt; is a list of URLs that should appear in the sitemap. Each URL exposes attributes as defined in the &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">变量 &lt;code&gt;urlset&lt;/code&gt; 是应在站点地图中显示的URL列表。每个网址都会公开&lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt; &lt;code&gt;Sitemap&lt;/code&gt; &lt;/a&gt;类中定义的属性：</target>
        </trans-unit>
        <trans-unit id="727dceea2caf913539f0780046c92d2b9e3f6d6b" translate="yes" xml:space="preserve">
          <source>The variable may also be any object with a &lt;code&gt;render()&lt;/code&gt; method that accepts a context. This allows you to reference a compiled &lt;code&gt;Template&lt;/code&gt; in your context.</source>
          <target state="translated">该变量也可以是任何带有 &lt;code&gt;render()&lt;/code&gt; 方法的对象，该对象接受上下文。这使您可以在上下文中引用已编译的 &lt;code&gt;Template&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="301a88295c3faec78f34621840e7333d9530c29c" translate="yes" xml:space="preserve">
          <source>The variables are:</source>
          <target state="translated">这些变量是:</target>
        </trans-unit>
        <trans-unit id="246f1c0ac6bbda7965cd9c30be5df3fd2b48f634" translate="yes" xml:space="preserve">
          <source>The various JavaScript/JSON i18n views generate the catalog from &lt;code&gt;.mo&lt;/code&gt; files on every request. Since its output is constant, at least for a given version of a site, it&amp;rsquo;s a good candidate for caching.</source>
          <target state="translated">各种JavaScript / JSON i18n视图可在每次请求时从 &lt;code&gt;.mo&lt;/code&gt; 文件生成目录。由于其输出是恒定的，至少对于给定版本的站点而言，它是缓存的理想选择。</target>
        </trans-unit>
        <trans-unit id="5962a25a8a29bda3527775c49bc4db85e6de9af3" translate="yes" xml:space="preserve">
          <source>The version of a specific key can be incremented and decremented using the &lt;code&gt;incr_version()&lt;/code&gt; and &lt;code&gt;decr_version()&lt;/code&gt; methods. This enables specific keys to be bumped to a new version, leaving other keys unaffected. Continuing our previous example:</source>
          <target state="translated">可以使用 &lt;code&gt;incr_version()&lt;/code&gt; 和 &lt;code&gt;decr_version()&lt;/code&gt; 方法来递增和递减特定键的版本。这样可以使特定的键更改为新版本，而其他键不受影响。继续前面的示例：</target>
        </trans-unit>
        <trans-unit id="a9a808e51693db0366361c7aad4e5f6449d32f9f" translate="yes" xml:space="preserve">
          <source>The view</source>
          <target state="translated">观点</target>
        </trans-unit>
        <trans-unit id="cd8224ed55eaa958cf4e74c21a59ae030d99fa1c" translate="yes" xml:space="preserve">
          <source>The view can be constructed using a &lt;code&gt;FormView&lt;/code&gt;:</source>
          <target state="translated">可以使用 &lt;code&gt;FormView&lt;/code&gt; 构造视图：</target>
        </trans-unit>
        <trans-unit id="901e3fe2be7e0720c39df3979063c7a7927565a8" translate="yes" xml:space="preserve">
          <source>The view expects to be called via the &lt;code&gt;POST&lt;/code&gt; method, with a &lt;code&gt;language&lt;/code&gt; parameter set in request. If session support is enabled, the view saves the language choice in the user&amp;rsquo;s session. It also saves the language choice in a cookie that is named &lt;code&gt;django_language&lt;/code&gt; by default. (The name can be changed through the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting.)</source>
          <target state="translated">该视图希望通过 &lt;code&gt;POST&lt;/code&gt; 方法调用，并在请求中设置 &lt;code&gt;language&lt;/code&gt; 参数。如果启用了会话支持，则视图会将语言选择保存在用户的会话中。还将语言选择保存在默认情况下名为 &lt;code&gt;django_language&lt;/code&gt; 的cookie中。（可以通过&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt; &lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt; &lt;/a&gt;设置更改名称。）</target>
        </trans-unit>
        <trans-unit id="bc4114d1cc31dcb339e09a01279d11c64f6f337a" translate="yes" xml:space="preserve">
          <source>The view function that would be used to serve the URL</source>
          <target state="translated">用于服务URL的视图函数。</target>
        </trans-unit>
        <trans-unit id="bb60be86939f6b2b36e2ed2727e150b67f9e8568" translate="yes" xml:space="preserve">
          <source>The view layer</source>
          <target state="translated">视图层</target>
        </trans-unit>
        <trans-unit id="dc8fc1b1fb7137f588c8acafb0a93b392b4df02b" translate="yes" xml:space="preserve">
          <source>The view returns an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object that contains the generated response. Each view function is responsible for returning an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object. (There are exceptions, but we&amp;rsquo;ll get to those later.)</source>
          <target state="translated">该视图返回一个&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;对象，该对象包含生成的响应。每个视图函数负责返回&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;对象。（有例外，但是我们稍后再讨论。）</target>
        </trans-unit>
        <trans-unit id="94116e5f81191c215cce003dde4b658a52f20312" translate="yes" xml:space="preserve">
          <source>The views have optional arguments you can use to alter the behavior of the view. For example, if you want to change the template name a view uses, you can provide the &lt;code&gt;template_name&lt;/code&gt; argument. A way to do this is to provide keyword arguments in the URLconf, these will be passed on to the view. For example:</source>
          <target state="translated">视图具有可选参数，可用于更改视图的行为。例如，如果要更改视图使用的模板名称，则可以提供 &lt;code&gt;template_name&lt;/code&gt; 参数。一种方法是在URLconf中提供关键字参数，这些参数将传递给视图。例如：</target>
        </trans-unit>
        <trans-unit id="f376d289850fd07bafee76662dcd32e58c48cce0" translate="yes" xml:space="preserve">
          <source>The views provide a URL name for easier reference. See &lt;a href=&quot;../http/urls&quot;&gt;the URL documentation&lt;/a&gt; for details on using named URL patterns.</source>
          <target state="translated">这些视图提供了一个URL名称，以便于参考。有关使用命名URL模式的详细信息，请参见&lt;a href=&quot;../http/urls&quot;&gt;URL文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fe3f76fd9e00713b8425105073c566d748f4bc69" translate="yes" xml:space="preserve">
          <source>The views to use for these cases are specified by four variables. Their default values should suffice for most projects, but further customization is possible by overriding their default values.</source>
          <target state="translated">这些情况下要使用的视图由四个变量指定,它们的默认值应该足以满足大多数项目的需要,但可以通过覆盖它们的默认值来进一步定制。它们的默认值应该足以满足大多数项目的需要,但可以通过覆盖它们的默认值来进一步定制。</target>
        </trans-unit>
        <trans-unit id="6a785f499bc3a631f2bf7b4b1e252762b9891777" translate="yes" xml:space="preserve">
          <source>The virtual environment will be activated automatically and you&amp;rsquo;ll see &amp;ldquo;(myproject)&amp;rdquo; next to the command prompt to designate that. If you start a new command prompt, you&amp;rsquo;ll need to activate the environment again using:</source>
          <target state="translated">虚拟环境将被自动激活，您将在命令提示符旁边看到&amp;ldquo;（myproject）&amp;rdquo;进行指定。如果启动新的命令提示符，则需要使用以下命令再次激活环境：</target>
        </trans-unit>
        <trans-unit id="da1995eb6a0ae021fe94bdbab28494fbefd06f36" translate="yes" xml:space="preserve">
          <source>The warnings and errors raised by system checks must be instances of &lt;code&gt;CheckMessage&lt;/code&gt;. An instance encapsulates a single reportable error or warning. It also provides context and hints applicable to the message, and a unique identifier that is used for filtering purposes.</source>
          <target state="translated">系统检查引起的警告和错误必须是 &lt;code&gt;CheckMessage&lt;/code&gt; 的实例。实例封装了一个可报告的错误或警告。它还提供适用于该消息的上下文和提示，以及用于过滤目的的唯一标识符。</target>
        </trans-unit>
        <trans-unit id="13523debf05e9958026aea88f8499b35346f566f" translate="yes" xml:space="preserve">
          <source>The warnings and errors raised by the check method must be instances of &lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt;&lt;code&gt;CheckMessage&lt;/code&gt;&lt;/a&gt;. An instance of &lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt;&lt;code&gt;CheckMessage&lt;/code&gt;&lt;/a&gt; encapsulates a single reportable error or warning. It also provides context and hints applicable to the message, and a unique identifier that is used for filtering purposes.</source>
          <target state="translated">check方法引发的警告和错误必须是&lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt; &lt;code&gt;CheckMessage&lt;/code&gt; 的&lt;/a&gt;实例。&lt;a href=&quot;../ref/checks#django.core.checks.CheckMessage&quot;&gt; &lt;code&gt;CheckMessage&lt;/code&gt; &lt;/a&gt;的实例封装了一个可报告的错误或警告。它还提供适用于该消息的上下文和提示，以及用于过滤目的的唯一标识符。</target>
        </trans-unit>
        <trans-unit id="047a01eda675ea876705a7edddee40d2096e3731" translate="yes" xml:space="preserve">
          <source>The warping parameters can be specified through the &lt;code&gt;ds_input&lt;/code&gt; argument. The use of &lt;code&gt;ds_input&lt;/code&gt; is analogous to the corresponding argument of the class constructor. It is a dictionary with the characteristics of the target raster. Allowed dictionary key values are width, height, SRID, origin, scale, skew, datatype, driver, and name (filename).</source>
          <target state="translated">可以通过 &lt;code&gt;ds_input&lt;/code&gt; 参数指定翘曲参数。 &lt;code&gt;ds_input&lt;/code&gt; 的使用类似于类构造函数的相应参数。这是一本具有目标栅格特征的字典。允许的字典键值包括宽度，高度，SRID，原点，比例，歪斜，数据类型，驱动程序和名称（文件名）。</target>
        </trans-unit>
        <trans-unit id="6630d921dcfe349d2ca90ef848c6ae4f290882a5" translate="yes" xml:space="preserve">
          <source>The way &lt;code&gt;Manager&lt;/code&gt; classes work is documented in &lt;a href=&quot;queries&quot;&gt;Making queries&lt;/a&gt;; this document specifically touches on model options that customize &lt;code&gt;Manager&lt;/code&gt; behavior.</source>
          <target state="translated">进行&lt;a href=&quot;queries&quot;&gt;查询中&lt;/a&gt;记录了 &lt;code&gt;Manager&lt;/code&gt; 类的工作方式; 本文档专门涉及自定义 &lt;code&gt;Manager&lt;/code&gt; 行为的模型选项。</target>
        </trans-unit>
        <trans-unit id="3ff303e576b39fa9a0f7513fb6d078850cc8dfe3" translate="yes" xml:space="preserve">
          <source>The way this works is by looking up the URL definition as specified in the &lt;code&gt;polls.urls&lt;/code&gt; module. You can see exactly where the URL name of &amp;lsquo;detail&amp;rsquo; is defined below:</source>
          <target state="translated">它的工作方式是通过查询 &lt;code&gt;polls.urls&lt;/code&gt; 模块中指定的URL定义。您可以在下面看到&amp;ldquo; detail&amp;rdquo;的URL名称的确切定义：</target>
        </trans-unit>
        <trans-unit id="b5f886c535546dbaab7c6c4368e56d690af59622" translate="yes" xml:space="preserve">
          <source>The weight should be one of the following letters: D, C, B, A. By default, these weights refer to the numbers &lt;code&gt;0.1&lt;/code&gt;, &lt;code&gt;0.2&lt;/code&gt;, &lt;code&gt;0.4&lt;/code&gt;, and &lt;code&gt;1.0&lt;/code&gt;, respectively. If you wish to weight them differently, pass a list of four floats to &lt;a href=&quot;#django.contrib.postgres.search.SearchRank&quot;&gt;&lt;code&gt;SearchRank&lt;/code&gt;&lt;/a&gt; as &lt;code&gt;weights&lt;/code&gt; in the same order above:</source>
          <target state="translated">重量应下列字母之一：d，C，B，A。在默认情况下，这些重量是指数 &lt;code&gt;0.1&lt;/code&gt; ， &lt;code&gt;0.2&lt;/code&gt; ， &lt;code&gt;0.4&lt;/code&gt; ，和 &lt;code&gt;1.0&lt;/code&gt; 分别。如果您希望对它们进行不同的 &lt;code&gt;weights&lt;/code&gt; ，则将四个浮点的列表作为权重按上述相同顺序传递给&lt;a href=&quot;#django.contrib.postgres.search.SearchRank&quot;&gt; &lt;code&gt;SearchRank&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="cd275e6cd3bed6cfda09f5e2dad5f6e610c08076" translate="yes" xml:space="preserve">
          <source>The whole collection of objects that is either serialized or deserialized is represented by a &lt;code&gt;&amp;lt;django-objects&amp;gt;&lt;/code&gt;-tag which contains multiple &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;-elements. Each such object has two attributes: &amp;ldquo;pk&amp;rdquo; and &amp;ldquo;model&amp;rdquo;, the latter being represented by the name of the app (&amp;ldquo;sessions&amp;rdquo;) and the lowercase name of the model (&amp;ldquo;session&amp;rdquo;) separated by a dot.</source>
          <target state="translated">序列化或反序列化的对象的整个集合由 &lt;code&gt;&amp;lt;django-objects&amp;gt;&lt;/code&gt; -tag表示，其中包含多个 &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; -elements。每个此类对象都有两个属性：&amp;ldquo; pk&amp;rdquo;和&amp;ldquo;模型&amp;rdquo;，后者由应用程序的名称（&amp;ldquo;会话&amp;rdquo;）表示，模型的小写名称（&amp;ldquo;会话&amp;rdquo;）用点分隔。</target>
        </trans-unit>
        <trans-unit id="6ecf4ea4678d42a25524f691d392b104faeda828" translate="yes" xml:space="preserve">
          <source>The whole form, when rendered for the first time, will look like:</source>
          <target state="translated">整个表格,在第一次渲染的时候,会是这样的。</target>
        </trans-unit>
        <trans-unit id="77c4876350e3b5c9852f7f08b842197cd4b16ed7" translate="yes" xml:space="preserve">
          <source>The width of the band in pixels (X-axis).</source>
          <target state="translated">波段的宽度,单位为像素(X轴)。</target>
        </trans-unit>
        <trans-unit id="e89e99d483419238a22e5d2768e54ae1d1baf073" translate="yes" xml:space="preserve">
          <source>The width of the source in pixels (X-axis).</source>
          <target state="translated">源的宽度,单位为像素(X轴)。</target>
        </trans-unit>
        <trans-unit id="e0fab4bf20d39d12dca2ad89d59b567377b1bd60" translate="yes" xml:space="preserve">
          <source>The word &lt;code&gt;random&lt;/code&gt;, which if given, does not use the common paragraph (&amp;ldquo;Lorem ipsum dolor sit amet&amp;hellip;&amp;rdquo;) when generating text.</source>
          <target state="translated">生成文本时，单词 &lt;code&gt;random&lt;/code&gt; （如果给定的话）不使用普通段落（&amp;ldquo; Lorem ipsum dolor sit amet&amp;hellip;&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="2f4536762ff69418e6398c76291185956bd7e114" translate="yes" xml:space="preserve">
          <source>The words &amp;ldquo;internationalization&amp;rdquo; and &amp;ldquo;localization&amp;rdquo; often cause confusion; here&amp;rsquo;s a simplified definition:</source>
          <target state="translated">&amp;ldquo;国际化&amp;rdquo;和&amp;ldquo;本地化&amp;rdquo;这两个词经常引起混淆；这是一个简化的定义：</target>
        </trans-unit>
        <trans-unit id="b619314b82e6bd5516e142f0b55738fb6a7a0d42" translate="yes" xml:space="preserve">
          <source>The work that needs to be done</source>
          <target state="translated">需要做的工作</target>
        </trans-unit>
        <trans-unit id="e9eda613d1e3d08ad5e50e3d1b17ad7cddaed19d" translate="yes" xml:space="preserve">
          <source>The world borders ZIP file contains a set of data files collectively known as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Shapefile&quot;&gt;ESRI Shapefile&lt;/a&gt;, one of the most popular geospatial data formats. When unzipped, the world borders dataset includes files with the following extensions:</source>
          <target state="translated">世界边界ZIP文件包含一组数据文件，统称为&lt;a href=&quot;https://en.wikipedia.org/wiki/Shapefile&quot;&gt;ESRI Shapefile&lt;/a&gt;，这是最流行的地理空间数据格式之一。解压缩后，世界边界数据集包括具有以下扩展名的文件：</target>
        </trans-unit>
        <trans-unit id="bb808a0f4ccc3c226424f786d27cd223cda25037" translate="yes" xml:space="preserve">
          <source>The world borders data is available in this &lt;a href=&quot;https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip&quot;&gt;zip file&lt;/a&gt;. Create a &lt;code&gt;data&lt;/code&gt; directory in the &lt;code&gt;world&lt;/code&gt; application, download the world borders data, and unzip. On GNU/Linux platforms, use the following commands:</source>
          <target state="translated">此&lt;a href=&quot;https://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip&quot;&gt;zip文件中&lt;/a&gt;提供了世界边界数据。在 &lt;code&gt;world&lt;/code&gt; 应用程序中创建一个 &lt;code&gt;data&lt;/code&gt; 目录，下载世界边界数据，然后解压缩。在GNU / Linux平台上，使用以下命令：</target>
        </trans-unit>
        <trans-unit id="18d9f4d4b960979287f9de53c1cb361b8dbc797b" translate="yes" xml:space="preserve">
          <source>The wrappers are modeled after &lt;a href=&quot;../http/middleware&quot;&gt;middleware&lt;/a&gt; &amp;ndash; they are callables which take another callable as one of their arguments. They call that callable to invoke the (possibly wrapped) database query, and they can do what they want around that call. They are, however, created and installed by user code, and so don&amp;rsquo;t need a separate factory like middleware do.</source>
          <target state="translated">包装器是根据&lt;a href=&quot;../http/middleware&quot;&gt;中间件&lt;/a&gt;建模的-它们是可调用项，将另一个可调用项作为其参数之一。他们调用该callable来调用（可能是包装好的）数据库查询，并且他们可以围绕该调用执行所需的操作。但是，它们是由用户代码创建和安装的，因此不需要像中间件那样的单独工厂。</target>
        </trans-unit>
        <trans-unit id="b3b0fcbba295caf61bae168615e5bc75c064fb11" translate="yes" xml:space="preserve">
          <source>The year has an offset of +11:00 because the result transitioned into daylight saving time.</source>
          <target state="translated">年的偏移量为+11:00,因为结果过渡到夏令时。</target>
        </trans-unit>
        <trans-unit id="69d875fb99f9a1cf88fdf06c2a42dbb8d5880a19" translate="yes" xml:space="preserve">
          <source>The “sites” framework</source>
          <target state="translated">&quot;站点 &quot;框架</target>
        </trans-unit>
        <trans-unit id="b73acd4db8ef3e3c4621cc7bcd8969756a73f7bd" translate="yes" xml:space="preserve">
          <source>Their main use is to add common data shared by all templates to the context without repeating code in every view.</source>
          <target state="translated">它们的主要用途是将所有模板共享的通用数据添加到上下文中,而无需在每个视图中重复代码。</target>
        </trans-unit>
        <trans-unit id="7613f0c9cbe1da79dea8d1b08fe598652f58fc9c" translate="yes" xml:space="preserve">
          <source>Then Django attempts to import the &lt;code&gt;models&lt;/code&gt; submodule of each application, if there is one.</source>
          <target state="translated">然后，Django尝试导入每个应用程序的 &lt;code&gt;models&lt;/code&gt; 子模块（如果有）。</target>
        </trans-unit>
        <trans-unit id="8cdffc32c937624675ba2e46e26a4737411084f8" translate="yes" xml:space="preserve">
          <source>Then any other &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; tests (including doctests) that may alter the database without restoring it to its original state are run.</source>
          <target state="translated">然后运行可能会更改数据库而不将其还原到原始状态的任何其他&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;测试（包括doctest）。</target>
        </trans-unit>
        <trans-unit id="502a52fb85029d1c8ff0b4c968afcaa60bc804c3" translate="yes" xml:space="preserve">
          <source>Then create a virtual environment for your project:</source>
          <target state="translated">然后为你的项目创建一个虚拟环境。</target>
        </trans-unit>
        <trans-unit id="efbef5324e350d325d36775bc5ec708051767ad1" translate="yes" xml:space="preserve">
          <source>Then display the differences between your current copy of Django (with your changes) and the revision that you initially checked out earlier in the tutorial with:</source>
          <target state="translated">然后显示你当前的Django副本(包含你的修改)和你在教程中最初检查出来的版本之间的差异。</target>
        </trans-unit>
        <trans-unit id="cf59a657d29a960b8c6ff2299d16b9a8954ce898" translate="yes" xml:space="preserve">
          <source>Then distance queries may be performed as follows:</source>
          <target state="translated">那么距离查询可按如下方法进行。</target>
        </trans-unit>
        <trans-unit id="518a996ac80772a95c380d44a6264f6172fa96b5" translate="yes" xml:space="preserve">
          <source>Then either:</source>
          <target state="translated">那么无论是。</target>
        </trans-unit>
        <trans-unit id="8d5637ef3657a8dd9ff5ca6f7935fab614661684" translate="yes" xml:space="preserve">
          <source>Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign (&amp;ldquo;&lt;code&gt;=&lt;/code&gt;&amp;rdquo;) and must be provided after the positional arguments. For example:</source>
          <target state="translated">然后，可以在模板中将任意数量的参数（由空格分隔）传递给template标记。像在Python中一样，关键字参数的值使用等号（&amp;ldquo; &lt;code&gt;=&lt;/code&gt; &amp;rdquo;）设置，并且必须在位置参数之后提供。例如：</target>
        </trans-unit>
        <trans-unit id="a5d2af8626419ec977c25f8d2966a5f28f7995f5" translate="yes" xml:space="preserve">
          <source>Then override the &lt;code&gt;post&lt;/code&gt; method of your &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; subclass to handle multiple file uploads:</source>
          <target state="translated">然后重写&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;子类的 &lt;code&gt;post&lt;/code&gt; 方法以处理多个文件上载：</target>
        </trans-unit>
        <trans-unit id="821e0dad9b3ce9a76c464bf4ab6ee9319e18072c" translate="yes" xml:space="preserve">
          <source>Then set the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;'path.to.MyStaticFilesStorage'&lt;/code&gt;.</source>
          <target state="translated">然后将&lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt;设置设置为 &lt;code&gt;'path.to.MyStaticFilesStorage'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c497ab6c8915be66ef6b4fc84aaecefe40f1bdd1" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;AuthorInterest&lt;/code&gt; is a &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;, but we have to bring in &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; so we can find the author we&amp;rsquo;re talking about, and we have to remember to set &lt;code&gt;template_name&lt;/code&gt; to ensure that form errors will render the same template as &lt;code&gt;AuthorDisplay&lt;/code&gt; is using on &lt;code&gt;GET&lt;/code&gt;:</source>
          <target state="translated">然后 &lt;code&gt;AuthorInterest&lt;/code&gt; 是一个&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;，但是我们必须引入&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;以便找到我们正在谈论的作者，并且我们必须记住设置 &lt;code&gt;template_name&lt;/code&gt; 以确保表单错误将呈现与 &lt;code&gt;AuthorDisplay&lt;/code&gt; 在 &lt;code&gt;GET&lt;/code&gt; 上使用的模板相同的模板。：</target>
        </trans-unit>
        <trans-unit id="7d5ba97fa64a9e045a1200cd0038f182a8f96a1a" translate="yes" xml:space="preserve">
          <source>Then the solution is to increase the value of the &lt;code&gt;max_allowed_packet&lt;/code&gt; setting in your MySQL configuration. For example, the default value may be something low like one megabyte &amp;ndash; the setting may be modified in MySQL&amp;rsquo;s configuration file (&lt;code&gt;my.cnf&lt;/code&gt;) in the &lt;code&gt;[mysqld]&lt;/code&gt; section:</source>
          <target state="translated">然后，解决方案是增加MySQL配置中的 &lt;code&gt;max_allowed_packet&lt;/code&gt; 设置的值。例如，默认值可能低至1兆字节-可以在 &lt;code&gt;[mysqld]&lt;/code&gt; 部分的MySQL配置文件（ &lt;code&gt;my.cnf&lt;/code&gt; ）中修改设置：</target>
        </trans-unit>
        <trans-unit id="7ce5bc805c0da4a5d29a030956b60f9f7e177a95" translate="yes" xml:space="preserve">
          <source>Then we can use &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt; and friends to do the actual work. Notice how we&amp;rsquo;re just configuring the generic class-based views here; we don&amp;rsquo;t have to write any logic ourselves:</source>
          <target state="translated">然后，我们可以使用&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt;和朋友来完成实际工作。注意我们如何在这里配置基于类的通用视图；我们不必自己编写任何逻辑：</target>
        </trans-unit>
        <trans-unit id="ac322a79d9728d55382596eed7ca0b6c576e0b42" translate="yes" xml:space="preserve">
          <source>Then we need to add this new view into our URLconf. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; is a class, not a function, so we point the URL to the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; class method instead, which provides a function-like entry to class-based views:</source>
          <target state="translated">然后，我们需要将此新视图添加到我们的URLconf中。&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;是一个类，而不是一个函数，因此我们将URL指向&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;类方法，该方法为基于类的视图提供类似于函数的条目：</target>
        </trans-unit>
        <trans-unit id="5f0d290c1e4ac103aa0c383ed2483d9abcc72288" translate="yes" xml:space="preserve">
          <source>Then we&amp;rsquo;d write our new view &amp;ndash; &lt;code&gt;get_object&lt;/code&gt; is the method that retrieves the object &amp;ndash; so we override it and wrap the call:</source>
          <target state="translated">然后，我们将编写新视图&amp;ndash; &lt;code&gt;get_object&lt;/code&gt; 是检索对象的方法&amp;ndash;因此我们将其覆盖并包装调用：</target>
        </trans-unit>
        <trans-unit id="d5554ed3752b4200d515044ce6d7c75db0de7b6f" translate="yes" xml:space="preserve">
          <source>Then when you create your inline formset, pass in the optional argument &lt;code&gt;formset&lt;/code&gt;:</source>
          <target state="translated">然后，当您创建内联表单集时，传入可选参数 &lt;code&gt;formset&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="343c7250fda77c83c03efcd07fba0430ab3db162" translate="yes" xml:space="preserve">
          <source>Then you can choose which tests to run. For example, to run only fast tests:</source>
          <target state="translated">然后你可以选择要运行的测试。例如,只运行快速测试。</target>
        </trans-unit>
        <trans-unit id="ac05008cd958b2f6030c8064248e03e3a23ed979" translate="yes" xml:space="preserve">
          <source>Then you could use the following constructs in Jinja2 templates:</source>
          <target state="translated">那么你可以在Jinja2模板中使用以下结构。</target>
        </trans-unit>
        <trans-unit id="0df1f81e0f1c638996941de19f9d6ce39f0cd09a" translate="yes" xml:space="preserve">
          <source>Then, add a &lt;code&gt;LiveServerTestCase&lt;/code&gt;-based test to your app&amp;rsquo;s tests module (for example: &lt;code&gt;myapp/tests.py&lt;/code&gt;). For this example, we&amp;rsquo;ll assume you&amp;rsquo;re using the &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;staticfiles&lt;/code&gt;&lt;/a&gt; app and want to have static files served during the execution of your tests similar to what we get at development time with &lt;code&gt;DEBUG=True&lt;/code&gt;, i.e. without having to collect them using &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt;. We&amp;rsquo;ll use the &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt;&lt;code&gt;StaticLiveServerTestCase&lt;/code&gt;&lt;/a&gt; subclass which provides that functionality. Replace it with &lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt; if you don&amp;rsquo;t need that.</source>
          <target state="translated">然后，将基于 &lt;code&gt;LiveServerTestCase&lt;/code&gt; 的测试添加到应用程序的测试模块中（例如： &lt;code&gt;myapp/tests.py&lt;/code&gt; ）。对于此示例，我们假设您正在使用&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;staticfiles&lt;/code&gt; &lt;/a&gt;应用程序，并且希望在测试执行期间提供静态文件，类似于我们在开发时使用 &lt;code&gt;DEBUG=True&lt;/code&gt; 获得的文件，即不必使用&lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;收集它们。我们将使用提供该功能的&lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt; &lt;code&gt;StaticLiveServerTestCase&lt;/code&gt; &lt;/a&gt;子类。如果不需要，请用 &lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt; 替换它。</target>
        </trans-unit>
        <trans-unit id="6b8fae564640dfbcd26a65f5a5829a26b29b5e07" translate="yes" xml:space="preserve">
          <source>Then, add the following required settings to your Django settings file:</source>
          <target state="translated">然后,在你的Django设置文件中添加以下必要的设置。</target>
        </trans-unit>
        <trans-unit id="b3f78984be334ee45163950bb1bce463c55d08f8" translate="yes" xml:space="preserve">
          <source>Then, add to your stylesheet (&lt;code&gt;polls/static/polls/style.css&lt;/code&gt;):</source>
          <target state="translated">然后，将其添加到样式表（ &lt;code&gt;polls/static/polls/style.css&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="102a55bf8aed728efb3a35fad86d28040c8675ee" translate="yes" xml:space="preserve">
          <source>Then, all other Django-based tests (test cases based on &lt;a href=&quot;tools#django.test.SimpleTestCase&quot;&gt;&lt;code&gt;SimpleTestCase&lt;/code&gt;&lt;/a&gt;, including &lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt;) are run with no particular ordering guaranteed nor enforced among them.</source>
          <target state="translated">然后，所有其他基于Django的测试（基于&lt;a href=&quot;tools#django.test.SimpleTestCase&quot;&gt; &lt;code&gt;SimpleTestCase&lt;/code&gt; 的&lt;/a&gt;测试用例，包括&lt;a href=&quot;tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;）都在不保证也不强制执行任何特定顺序的情况下运行。</target>
        </trans-unit>
        <trans-unit id="a5014bb8db4f2317d93680c7f45a1d9c21eac754" translate="yes" xml:space="preserve">
          <source>Then, all the named fixtures are installed. In this example, Django will install any JSON fixture named &lt;code&gt;mammals&lt;/code&gt;, followed by any fixture named &lt;code&gt;birds&lt;/code&gt;. See the &lt;a href=&quot;../../ref/django-admin#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt; documentation for more details on defining and installing fixtures.</source>
          <target state="translated">然后，安装所有命名的灯具。在这个例子中，Django会安装一个名为任何JSON夹具 &lt;code&gt;mammals&lt;/code&gt; ，其次是任何固定装置命名 &lt;code&gt;birds&lt;/code&gt; 。有关定义和安装固定装置的更多详细信息，请参见&lt;a href=&quot;../../ref/django-admin#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; &lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="74e1fac30320b143b022b34f80b9e398b40dceb0" translate="yes" xml:space="preserve">
          <source>Then, any time you want to use that custom tag, load its library and call it without any arguments, like so:</source>
          <target state="translated">然后,当您想使用该自定义标签时,加载它的库并调用它,无需任何参数,就像这样。</target>
        </trans-unit>
        <trans-unit id="b0007cf87d64dd11382da88f432342f078f704b8" translate="yes" xml:space="preserve">
          <source>Then, create the template &lt;code&gt;my_template_name.txt&lt;/code&gt;, with this template code:</source>
          <target state="translated">然后，使用以下模板代码创建模板 &lt;code&gt;my_template_name.txt&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c6dfd5133cdcd2319a7314b1af10cdd7c87c9c63" translate="yes" xml:space="preserve">
          <source>Then, edit the file and replace &lt;code&gt;{{ site_header|default:_('Django administration') }}&lt;/code&gt; (including the curly braces) with your own site&amp;rsquo;s name as you see fit. You should end up with a section of code like:</source>
          <target state="translated">然后，编辑文件，并根据需要将 &lt;code&gt;{{ site_header|default:_('Django administration') }}&lt;/code&gt; （包括花括号）替换为您自己的站点名称。您应该以一段代码结尾：</target>
        </trans-unit>
        <trans-unit id="991367037470f8675cab7f6aa189140cd7f90dee" translate="yes" xml:space="preserve">
          <source>Then, it looks for and uses if it exists a &lt;code&gt;locale&lt;/code&gt; directory in each of the installed apps listed in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. The ones appearing first have higher precedence than the ones appearing later.</source>
          <target state="translated">然后，它查找并使用&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 中&lt;/a&gt;列出的每个已安装应用程序中是否存在 &lt;code&gt;locale&lt;/code&gt; 目录。先出现的优先级高于后出现的优先级。</target>
        </trans-unit>
        <trans-unit id="6317db8091ecc8ccfbc2928cd068941f4355f082" translate="yes" xml:space="preserve">
          <source>Then, open up the file; it should look something like this:</source>
          <target state="translated">然后,打开文件,它应该是这样的。</target>
        </trans-unit>
        <trans-unit id="b9f12e2b9930bfb78344baa7531604b32101213f" translate="yes" xml:space="preserve">
          <source>Then, pass your &lt;code&gt;BaseAuthorFormSet&lt;/code&gt; class to the factory function:</source>
          <target state="translated">然后，将 &lt;code&gt;BaseAuthorFormSet&lt;/code&gt; 类传递给工厂函数：</target>
        </trans-unit>
        <trans-unit id="d67744644efd26e6ce1181a26664d4ce860f2c4d" translate="yes" xml:space="preserve">
          <source>Then, pass your model form to the factory function:</source>
          <target state="translated">然后,将你的模型表单传递给工厂函数。</target>
        </trans-unit>
        <trans-unit id="85485b5bd858245e323a74f9ab2b04b152bb9a9b" translate="yes" xml:space="preserve">
          <source>Then, to leverage this in your migrations, do the following:</source>
          <target state="translated">然后,为了在迁移中利用这一点,请执行以下操作。</target>
        </trans-unit>
        <trans-unit id="83e5488000bfc60bf294db9f2716de673b753dd9" translate="yes" xml:space="preserve">
          <source>Then, to register this custom user model with Django&amp;rsquo;s admin, the following code would be required in the app&amp;rsquo;s &lt;code&gt;admin.py&lt;/code&gt; file:</source>
          <target state="translated">然后，要向Django的admin注册此自定义用户模型，在应用程序的 &lt;code&gt;admin.py&lt;/code&gt; 文件中将需要以下代码：</target>
        </trans-unit>
        <trans-unit id="2304d640a16ae9bfebc931161006126d186e787e" translate="yes" xml:space="preserve">
          <source>Then:</source>
          <target state="translated">Then:</target>
        </trans-unit>
        <trans-unit id="03e03cc321b5b6d9559b081ba99edb7ddf892e7d" translate="yes" xml:space="preserve">
          <source>There are &lt;a href=&quot;https://bugs.mysql.com/bug.php?id=48875&quot;&gt;known issues&lt;/a&gt; in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the &lt;a href=&quot;models/options#django.db.models.Options.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt; parameter.</source>
          <target state="translated">即使在最新版本的MySQL中，也存在一些&lt;a href=&quot;https://bugs.mysql.com/bug.php?id=48875&quot;&gt;已知问题&lt;/a&gt;，当在某些条件下执行某些SQL语句时，这些问题可能导致表名的大小写发生变化。建议使用小写的表名（如果可能），以避免此行为可能引起的任何问题。 Django从模型自动生成表名时使用小写的表名，因此，如果要通过&lt;a href=&quot;models/options#django.db.models.Options.db_table&quot;&gt; &lt;code&gt;db_table&lt;/code&gt; &lt;/a&gt;参数覆盖表名，则主要要考虑这一点。</target>
        </trans-unit>
        <trans-unit id="04b75c61ec9baf5aabbeaca16361184e7040c82f" translate="yes" xml:space="preserve">
          <source>There are a couple of notable things going on. First, &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; isn&amp;rsquo;t calling &lt;code&gt;process_lhs()&lt;/code&gt;. Instead it skips the transformation of the &lt;code&gt;lhs&lt;/code&gt; done by &lt;code&gt;AbsoluteValue&lt;/code&gt; and uses the original &lt;code&gt;lhs&lt;/code&gt;. That is, we want to get &lt;code&gt;&quot;experiments&quot;.&quot;change&quot;&lt;/code&gt; not &lt;code&gt;ABS(&quot;experiments&quot;.&quot;change&quot;)&lt;/code&gt;. Referring directly to &lt;code&gt;self.lhs.lhs&lt;/code&gt; is safe as &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; can be accessed only from the &lt;code&gt;AbsoluteValue&lt;/code&gt; lookup, that is the &lt;code&gt;lhs&lt;/code&gt; is always an instance of &lt;code&gt;AbsoluteValue&lt;/code&gt;.</source>
          <target state="translated">有几件事值得注意。首先， &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; 不调用 &lt;code&gt;process_lhs()&lt;/code&gt; 。相反，它跳过由 &lt;code&gt;AbsoluteValue&lt;/code&gt; 完成的 &lt;code&gt;lhs&lt;/code&gt; 转换，并使用原始的 &lt;code&gt;lhs&lt;/code&gt; 。也就是说，我们要获取 &lt;code&gt;&quot;experiments&quot;.&quot;change&quot;&lt;/code&gt; 而不是 &lt;code&gt;ABS(&quot;experiments&quot;.&quot;change&quot;)&lt;/code&gt; 。直接参照 &lt;code&gt;self.lhs.lhs&lt;/code&gt; 是安全的，因为 &lt;code&gt;AbsoluteValueLessThan&lt;/code&gt; 只能从访问 &lt;code&gt;AbsoluteValue&lt;/code&gt; 查找，即 &lt;code&gt;lhs&lt;/code&gt; 始终的一个实例 &lt;code&gt;AbsoluteValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb953915ffbd104c695705a592a46d68f3ef2b39" translate="yes" xml:space="preserve">
          <source>There are a couple of options, and you may use any combination of them together:</source>
          <target state="translated">有几个选项,你可以将它们任意组合在一起使用。</target>
        </trans-unit>
        <trans-unit id="121a33293b10ada586c2e4b5754a225a451b7da6" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note, however.</source>
          <target state="translated">不过,有几点需要注意。</target>
        </trans-unit>
        <trans-unit id="731a3d5cd5ff4039694cb924c720d645ebbd8e3f" translate="yes" xml:space="preserve">
          <source>There are a few functions in &lt;code&gt;django.contrib.auth.password_validation&lt;/code&gt; that you can call from your own forms or other code to integrate password validation. This can be useful if you use custom forms for password setting, or if you have API calls that allow passwords to be set, for example.</source>
          <target state="translated">&lt;code&gt;django.contrib.auth.password_validation&lt;/code&gt; 中有一些函数，您可以从自己的表单或其他代码中调用这些函数来集成密码验证。例如，如果您使用自定义表单进行密码设置，或者如果您有允许设置密码的API调用，这将很有用。</target>
        </trans-unit>
        <trans-unit id="c8d0a38a5ac631e82cb27b704ccf2fa8a951bf4d" translate="yes" xml:space="preserve">
          <source>There are a few other helpers outside of the &lt;a href=&quot;#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;staticfiles&lt;/code&gt;&lt;/a&gt; app to work with static files:</source>
          <target state="translated">&lt;a href=&quot;#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;staticfiles&lt;/code&gt; &lt;/a&gt;应用程序之外还有其他一些帮助程序可用于处理静态文件：</target>
        </trans-unit>
        <trans-unit id="386424d5f4079becf6d133836bac41414fc383a7" translate="yes" xml:space="preserve">
          <source>There are a few other methods and attributes available on &lt;code&gt;UploadedFile&lt;/code&gt; objects; see &lt;a href=&quot;../../ref/files/uploads#django.core.files.uploadedfile.UploadedFile&quot;&gt;&lt;code&gt;UploadedFile&lt;/code&gt;&lt;/a&gt; for a complete reference.</source>
          <target state="translated">&lt;code&gt;UploadedFile&lt;/code&gt; 对象还有其他一些方法和属性。有关完整参考，请参见&lt;a href=&quot;../../ref/files/uploads#django.core.files.uploadedfile.UploadedFile&quot;&gt; &lt;code&gt;UploadedFile&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b20fdd0663aa959be618e8605e33bd6a99ce8d3c" translate="yes" xml:space="preserve">
          <source>There are a few restrictions on the intermediate model:</source>
          <target state="translated">中间模式有一些限制。</target>
        </trans-unit>
        <trans-unit id="8ad305b3c6b245efb4e16125a98bf9cbdba76d76" translate="yes" xml:space="preserve">
          <source>There are a few settings which control Django&amp;rsquo;s file upload behavior. See &lt;a href=&quot;../../ref/settings#file-upload-settings&quot;&gt;File Upload Settings&lt;/a&gt; for details.</source>
          <target state="translated">有一些设置可以控制Django的文件上传行为。有关详细信息，请参见&lt;a href=&quot;../../ref/settings#file-upload-settings&quot;&gt;文件上传设置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e0f843549ffbd0e46b24f96a7dee9b3678f8848" translate="yes" xml:space="preserve">
          <source>There are a number of custom lookups and transforms for &lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt;&lt;code&gt;ArrayField&lt;/code&gt;&lt;/a&gt;. We will use the following example model:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.postgres.fields.ArrayField&quot;&gt; &lt;code&gt;ArrayField&lt;/code&gt; &lt;/a&gt;有许多自定义查找和转换。我们将使用以下示例模型：</target>
        </trans-unit>
        <trans-unit id="00d8108092f7f1fa9cee59beb2088dc32ed6ae5c" translate="yes" xml:space="preserve">
          <source>There are a number of custom lookups and transforms for range fields. They are available on all the above fields, but we will use the following example model:</source>
          <target state="translated">有许多自定义的查找和转换用于范围字段。它们在上述所有字段中都是可用的,但我们将使用下面的示例模型。</target>
        </trans-unit>
        <trans-unit id="87b4ac75bf5a1dbf81d6ae6f9252c6978b312484" translate="yes" xml:space="preserve">
          <source>There are a number of free services that will analyze and report on the performance of your site&amp;rsquo;s pages from the perspective of a remote HTTP client, in effect simulating the experience of an actual user.</source>
          <target state="translated">有许多免费服务可以从远程HTTP客户端的角度分析并报告您站点页面的性能，实际上是在模拟实际用户的体验。</target>
        </trans-unit>
        <trans-unit id="b1b17eafe5de2d1ae75237122f28ee93b1cb3a59" translate="yes" xml:space="preserve">
          <source>There are a number of functions to use in a &lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; expression for computing the rank of elements or the &lt;a href=&quot;#django.db.models.functions.Ntile&quot;&gt;&lt;code&gt;Ntile&lt;/code&gt;&lt;/a&gt; of some rows.</source>
          <target state="translated">在&lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; &lt;/a&gt;表达式中可以使用许多函数来计算元素的行或某些行的&lt;a href=&quot;#django.db.models.functions.Ntile&quot;&gt; &lt;code&gt;Ntile&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c0759129393d1e4adb6fede723af7e2e3dd13e86" translate="yes" xml:space="preserve">
          <source>There are a variety of techniques and tools that can help get your code running more efficiently - faster, and using fewer system resources.</source>
          <target state="translated">有各种技术和工具可以帮助你的代码更有效地运行--更快,使用更少的系统资源。</target>
        </trans-unit>
        <trans-unit id="ba3254d467d0968aeb0dacc8b00212e7fcbf3246" translate="yes" xml:space="preserve">
          <source>There are additional options available for Geometry fields. All the following options are optional.</source>
          <target state="translated">几何学字段还有其他选项。以下所有选项都是可选的。</target>
        </trans-unit>
        <trans-unit id="67d1e490be9044c5f767856617ff952784c76fee" translate="yes" xml:space="preserve">
          <source>There are also a number of &lt;a href=&quot;#third-party-notes&quot;&gt;database backends provided by third parties&lt;/a&gt;.</source>
          <target state="translated">也有许多&lt;a href=&quot;#third-party-notes&quot;&gt;第三方提供&lt;/a&gt;的数据库后端。</target>
        </trans-unit>
        <trans-unit id="7733319a183b2ee7a3a47058a440e107178b649c" translate="yes" xml:space="preserve">
          <source>There are also mixins involved in the generic edit views (&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt;, and the model-specific views &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.CreateView&quot;&gt;&lt;code&gt;CreateView&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.UpdateView&quot;&gt;&lt;code&gt;UpdateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.DeleteView&quot;&gt;&lt;code&gt;DeleteView&lt;/code&gt;&lt;/a&gt;), and in the date-based generic views. These are covered in the &lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;mixin reference documentation&lt;/a&gt;.</source>
          <target state="translated">通用编辑视图（&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt; &lt;code&gt;FormView&lt;/code&gt; &lt;/a&gt;和特定于模型的视图&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.CreateView&quot;&gt; &lt;code&gt;CreateView&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.UpdateView&quot;&gt; &lt;code&gt;UpdateView&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.DeleteView&quot;&gt; &lt;code&gt;DeleteView&lt;/code&gt; &lt;/a&gt;）以及基于日期的通用视图中也涉及到mixin 。这些已在&lt;a href=&quot;../../ref/class-based-views/mixins&quot;&gt;mixin参考文档中介绍&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="73b2f2b9ac2904460e5497a84584103e8ab333cf" translate="yes" xml:space="preserve">
          <source>There are also more specialized &lt;code&gt;Operation&lt;/code&gt; objects which are for things like &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migrations&lt;/a&gt; and for advanced manual database manipulation. You can also write your own &lt;code&gt;Operation&lt;/code&gt; classes if you want to encapsulate a custom change you commonly make.</source>
          <target state="translated">还有更专门的 &lt;code&gt;Operation&lt;/code&gt; 对象，用于&lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;数据迁移&lt;/a&gt;和高级手动数据库操作。如果要封装通常进行的自定义更改，也可以编写自己的 &lt;code&gt;Operation&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="4ac5aa2bab85a8f18fd4efe916be287503958a99" translate="yes" xml:space="preserve">
          <source>There are also several paid-for services that perform a similar analysis, including some that are Django-aware and can integrate with your codebase to profile its performance far more comprehensively.</source>
          <target state="translated">也有一些付费的服务可以进行类似的分析,包括一些具有Django意识的服务,可以与你的代码库集成,以更全面地描述其性能。</target>
        </trans-unit>
        <trans-unit id="6a54fd245d9a51c76dba8315fff5ff4f7b82a346" translate="yes" xml:space="preserve">
          <source>There are also shortcuts to make creating messages with common levels easier. When using these classes you can omit the &lt;code&gt;level&lt;/code&gt; argument because it is implied by the class name.</source>
          <target state="translated">还有一些快捷方式可以使创建具有通用级别的消息更加容易。使用这些类时，可以省略 &lt;code&gt;level&lt;/code&gt; 参数，因为它由类名隐含。</target>
        </trans-unit>
        <trans-unit id="5760de18cd4d5787da36c2d619fa8bc63c3bab39" translate="yes" xml:space="preserve">
          <source>There are also some filters available for convenience:</source>
          <target state="translated">为了方便,还可以使用一些过滤器。</target>
        </trans-unit>
        <trans-unit id="f4f52d7538b08c4512077ec4f0de3a634ca2114c" translate="yes" xml:space="preserve">
          <source>There are cases when &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form.</source>
          <target state="translated">在某些情况下，运行视图之前可能未运行 &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; -例如404和500处理程序-但是您仍然需要表单中的CSRF令牌。</target>
        </trans-unit>
        <trans-unit id="e261a626c16d3a9f7d6292e32002bd7c73699094" translate="yes" xml:space="preserve">
          <source>There are different methods to implement these views in your project. The easiest way is to include the provided URLconf in &lt;code&gt;django.contrib.auth.urls&lt;/code&gt; in your own URLconf, for example:</source>
          <target state="translated">有多种方法可以在项目中实现这些视图。最简单的方法是在您自己的URLconf 中的 &lt;code&gt;django.contrib.auth.urls&lt;/code&gt; 中包含提供的URLconf，例如：</target>
        </trans-unit>
        <trans-unit id="fba4a4e75d1df7b5e57f01418bced5773b17e19d" translate="yes" xml:space="preserve">
          <source>There are five range field types, corresponding to the built-in range types in PostgreSQL. These fields are used to store a range of values; for example the start and end timestamps of an event, or the range of ages an activity is suitable for.</source>
          <target state="translated">有五种范围字段类型,对应PostgreSQL中内置的范围类型。这些字段用来存储一个范围的值,例如一个事件的开始和结束时间戳,或者一个活动适合的年龄范围。</target>
        </trans-unit>
        <trans-unit id="a9b9fb85e3e9211029bf261389ce28a69c628512" translate="yes" xml:space="preserve">
          <source>There are four types of values that can be used in &lt;code&gt;list_display&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; 中可以使用四种类型的值：</target>
        </trans-unit>
        <trans-unit id="1f98148510509194e859c01be9e11e92768de57c" translate="yes" xml:space="preserve">
          <source>There are many alternatives for using searching software, some of the most prominent are &lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elastic&lt;/a&gt; and &lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt;. These are full document-based search solutions. To use them with data from Django models, you&amp;rsquo;ll need a layer which translates your data into a textual document, including back-references to the database ids. When a search using the engine returns a certain document, you can then look it up in the database. There are a variety of third-party libraries which are designed to help with this process.</source>
          <target state="translated">使用搜索软件的方法很多，其中最著名的是&lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elastic&lt;/a&gt;和&lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt;。这些是基于文档的完整搜索解决方案。要将它们与Django模型中的数据一起使用，您需要一个将数据转换为文本文档的层，其中包括对数据库ID的反向引用。当使用引擎进行的搜索返回某个文档时，您可以在数据库中查找该文档。有各种各样的第三方库旨在帮助此过程。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
