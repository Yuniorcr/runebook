<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="7b9b9769e53002854792a4a2aef63e323f7eb217" translate="yes" xml:space="preserve">
          <source>Django distributes test cases &amp;mdash; &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; subclasses &amp;mdash; to subprocesses. If there are fewer test cases than configured processes, Django will reduce the number of processes accordingly.</source>
          <target state="translated">Django将测试用例（&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt;子类）分发到子流程。如果测试用例少于已配置的进程，则Django将相应地减少进程数量。</target>
        </trans-unit>
        <trans-unit id="c20a67bd4e7d540c86cace9b5093dadacefe0411" translate="yes" xml:space="preserve">
          <source>Django documentation</source>
          <target state="translated">Django文档</target>
        </trans-unit>
        <trans-unit id="a54e2388db184e0be01389aa4f540db554e32ffc" translate="yes" xml:space="preserve">
          <source>Django does &lt;em&gt;not&lt;/em&gt; provide automatic purging of expired sessions. Therefore, it&amp;rsquo;s your job to purge expired sessions on a regular basis. Django provides a clean-up management command for this purpose: &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt;&lt;code&gt;clearsessions&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s recommended to call this command on a regular basis, for example as a daily cron job.</source>
          <target state="translated">Django的并&lt;em&gt;不能&lt;/em&gt;提供过期会话自动清除。因此，定期清除过期的会话是您的工作。 Django为此提供了一个清理管理命令：&lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt; &lt;code&gt;clearsessions&lt;/code&gt; &lt;/a&gt;。建议定期调用此命令，例如，作为日常cron作业。</target>
        </trans-unit>
        <trans-unit id="4cf9cb6045fc195aa253bbb8684ec026054536d9" translate="yes" xml:space="preserve">
          <source>Django does make one adjustment to the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; class of an abstract base class: before installing the &lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt; attribute, it sets &lt;code&gt;abstract=False&lt;/code&gt;. This means that children of abstract base classes don&amp;rsquo;t automatically become abstract classes themselves. Of course, you can make an abstract base class that inherits from another abstract base class. You just need to remember to explicitly set &lt;code&gt;abstract=True&lt;/code&gt; each time.</source>
          <target state="translated">Django确实对抽象基类的&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;类进行了一种调整：在安装&lt;a href=&quot;#meta-options&quot;&gt;Meta&lt;/a&gt;属性之前，它会设置 &lt;code&gt;abstract=False&lt;/code&gt; 。这意味着抽象基类的子代本身不会自动成为抽象类。当然，您可以创建一个从另一个抽象基类继承的抽象基类。您只需要记住每次都明确地设置 &lt;code&gt;abstract=True&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a593c7c70f8899a734509f16aa5a08087294d76" translate="yes" xml:space="preserve">
          <source>Django does not create the tablespaces for you. Please refer to your database engine&amp;rsquo;s documentation for details on creating and managing tablespaces.</source>
          <target state="translated">Django不会为您创建表空间。有关创建和管理表空间的详细信息，请参考数据库引擎的文档。</target>
        </trans-unit>
        <trans-unit id="4bd1d6376f8e33273a3f445bbb0bd6eccb658bab" translate="yes" xml:space="preserve">
          <source>Django does not decode the data of file uploads, because that data is normally treated as collections of bytes, rather than strings. Any automatic decoding there would alter the meaning of the stream of bytes.</source>
          <target state="translated">Django不会对文件上传的数据进行解码,因为这些数据通常被视为字节的集合,而不是字符串。任何自动解码都会改变字节流的含义。</target>
        </trans-unit>
        <trans-unit id="0f4122f1bab004b5a2004ece4957893cb6542add" translate="yes" xml:space="preserve">
          <source>Django does not provide a shortcut function which returns a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; because the constructor of &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; offers the same level of convenience as &lt;a href=&quot;#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django不提供返回一个快捷功能&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;由于构造&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;提供方便同一级别&lt;a href=&quot;#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf7486cb1405ce982c266da7b1d379cd457fc359" translate="yes" xml:space="preserve">
          <source>Django does not store raw (clear text) passwords on the user model, but only a hash (see &lt;a href=&quot;passwords&quot;&gt;documentation of how passwords are managed&lt;/a&gt; for full details). Because of this, do not attempt to manipulate the password attribute of the user directly. This is why a helper function is used when creating a user.</source>
          <target state="translated">Django不会在用户模型上存储原始（明文）密码，而仅存储一个哈希（有关详细信息，请参阅&lt;a href=&quot;passwords&quot;&gt;有关如何管理密码的文档&lt;/a&gt;）。因此，请勿尝试直接操作用户的密码属性。这就是为什么在创建用户时使用辅助功能的原因。</target>
        </trans-unit>
        <trans-unit id="65bc3cefde3e8cc25b3e343e7b2f91618d07f26f" translate="yes" xml:space="preserve">
          <source>Django does not support custom plural equations in po files. As all translation catalogs are merged, only the plural form for the main Django po file (in &lt;code&gt;django/conf/locale/&amp;lt;lang_code&amp;gt;/LC_MESSAGES/django.po&lt;/code&gt;) is considered. Plural forms in all other po files are ignored. Therefore, you should not use different plural equations in your project or application po files.</source>
          <target state="translated">Django在po文件中不支持自定义复数方程。在合并所有翻译目录时，仅考虑主Django po文件的复数形式（在 &lt;code&gt;django/conf/locale/&amp;lt;lang_code&amp;gt;/LC_MESSAGES/django.po&lt;/code&gt; 中）。所有其他po文件中的复数形式都将被忽略。因此，您不应在项目或应用程序po文件中使用不同的复数方程式。</target>
        </trans-unit>
        <trans-unit id="7cc1197185c10a4fad7e1b8592975a401d9e6130" translate="yes" xml:space="preserve">
          <source>Django does not throttle requests to authenticate users. To protect against brute-force attacks against the authentication system, you may consider deploying a Django plugin or Web server module to throttle these requests.</source>
          <target state="translated">Django不会对用户认证的请求进行节流。为了防止针对认证系统的暴力攻击,你可以考虑部署一个Django插件或Web服务器模块来节流这些请求。</target>
        </trans-unit>
        <trans-unit id="37fb55e326c8ef6d4f90489c74d66848e9dbfff1" translate="yes" xml:space="preserve">
          <source>Django does this by taking all of your existing migrations, extracting their &lt;code&gt;Operation&lt;/code&gt;s and putting them all in sequence, and then running an optimizer over them to try and reduce the length of the list - for example, it knows that &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt;&lt;code&gt;CreateModel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.DeleteModel&quot;&gt;&lt;code&gt;DeleteModel&lt;/code&gt;&lt;/a&gt; cancel each other out, and it knows that &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.AddField&quot;&gt;&lt;code&gt;AddField&lt;/code&gt;&lt;/a&gt; can be rolled into &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt;&lt;code&gt;CreateModel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django通过执行所有现有迁移，提取它们的 &lt;code&gt;Operation&lt;/code&gt; 并将它们按顺序放置，然后在它们之上运行优化程序来尝试减少列表的长度，以实现此目的，例如，它知道&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt; &lt;code&gt;CreateModel&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.DeleteModel&quot;&gt; &lt;code&gt;DeleteModel&lt;/code&gt; 会&lt;/a&gt;取消每个迁移其他，它知道&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.AddField&quot;&gt; &lt;code&gt;AddField&lt;/code&gt; &lt;/a&gt;可以放入&lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.CreateModel&quot;&gt; &lt;code&gt;CreateModel&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="82ae71e67ae963b1dd7a92e07ea16260462f15d1" translate="yes" xml:space="preserve">
          <source>Django does this to allow context data to override context processors in APIs such as &lt;a href=&quot;../../topics/http/shortcuts#django.shortcuts.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django这样做是为了允许上下文数据覆盖API（例如&lt;a href=&quot;../../topics/http/shortcuts#django.shortcuts.render&quot;&gt; &lt;code&gt;render()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;）中的上下文处理器。</target>
        </trans-unit>
        <trans-unit id="ac6fcc4bb4c4e7f1aa9254bd445c8658d6b99fa6" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t convert naive datetime objects, because they could be ambiguous, and because your code should never produce naive datetimes when time zone support is enabled. However, you can force conversion with the template filters described below.</source>
          <target state="translated">Django不会转换原始日期时间对象，因为它们可能是模棱两可的，并且在启用时区支持时，您的代码绝不会产生原始日期时间。但是，您可以使用下面描述的模板过滤器强制进行转换。</target>
        </trans-unit>
        <trans-unit id="00781acfb4fdfcf177022756c672306ef41d0562" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t create database defaults when a &lt;a href=&quot;models/fields#django.db.models.Field.default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; is specified on a model field. Similarly, database defaults aren&amp;rsquo;t translated to model field defaults or detected in any fashion by &lt;code&gt;inspectdb&lt;/code&gt;.</source>
          <target state="translated">当Django不创建数据库默认&lt;a href=&quot;models/fields#django.db.models.Field.default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;模型上的字段中指定。同样，数据库默认值不会转换为模型字段默认值，也不会由 &lt;code&gt;inspectdb&lt;/code&gt; 以任何方式检测到。</target>
        </trans-unit>
        <trans-unit id="e5ab3f7567f91c6a56929b75b65f0567ee1880ed" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t currently provide any support for foreign key or many-to-many relationships spanning multiple databases. If you have used a router to partition models to different databases, any foreign key and many-to-many relationships defined by those models must be internal to a single database.</source>
          <target state="translated">Django当前不支持跨多个数据库的外键或多对多关系。如果使用路由器将模型分区到不同的数据库，则这些模型定义的任何外键和多对多关系必须在单个数据库内部。</target>
        </trans-unit>
        <trans-unit id="b3f503fa4adb7b8d4f85851af2d68a21bad94839" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t provide an API to start a transaction. The expected way to start a transaction is to disable autocommit with &lt;a href=&quot;#django.db.transaction.set_autocommit&quot;&gt;&lt;code&gt;set_autocommit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django不提供启动交易的API。启动事务的预期方式是使用&lt;a href=&quot;#django.db.transaction.set_autocommit&quot;&gt; &lt;code&gt;set_autocommit()&lt;/code&gt; &lt;/a&gt;禁用自动提交。</target>
        </trans-unit>
        <trans-unit id="9c146dfca214fe96d9d6cba06eebec828a3171d2" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t serve files itself; it leaves that job to whichever Web server you choose.</source>
          <target state="translated">Django本身不提供文件；它将工作交给您选择的任何Web服务器。</target>
        </trans-unit>
        <trans-unit id="1325d36f47045355942f2d52af7d62ead86d0315" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t set these attributes itself but makes use of them if set by your application.</source>
          <target state="translated">Django不会自行设置这些属性，但会在您的应用程序设置时使用它们。</target>
        </trans-unit>
        <trans-unit id="17994fac69363539ee8b3c389265fa06ec1c378a" translate="yes" xml:space="preserve">
          <source>Django doesn&amp;rsquo;t use &lt;code&gt;xgettext&lt;/code&gt; alone. It uses Python wrappers around &lt;code&gt;xgettext&lt;/code&gt; and &lt;code&gt;msgfmt&lt;/code&gt;. This is mostly for convenience.</source>
          <target state="translated">Django并不单独使用 &lt;code&gt;xgettext&lt;/code&gt; 。它使用围绕 &lt;code&gt;xgettext&lt;/code&gt; 和 &lt;code&gt;msgfmt&lt;/code&gt; 的 Python包装器。这主要是为了方便。</target>
        </trans-unit>
        <trans-unit id="7f43d4b968d4ed4a00af207bb46310a7796bead5" translate="yes" xml:space="preserve">
          <source>Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity. It is important to be aware of the fact that the two latter ones aren&amp;rsquo;t actually enforced by MySQL when using the MyISAM storage engine, see the next section.</source>
          <target state="translated">Django期望数据库支持Unicode（UTF-8编码），并将执行事务和引用完整性的任务委托给它。重要的是要意识到以下事实：使用MyISAM存储引擎时，后者实际上并没有由MySQL强制执行，请参阅下一节。</target>
        </trans-unit>
        <trans-unit id="f9e8972bb2f165186e29e9ae744af7e73e9a6c15" translate="yes" xml:space="preserve">
          <source>Django generally prefers to use the empty string (&lt;code&gt;''&lt;/code&gt;) rather than &lt;code&gt;NULL&lt;/code&gt;, but Oracle treats both identically. To get around this, the Oracle backend ignores an explicit &lt;code&gt;null&lt;/code&gt; option on fields that have the empty string as a possible value and generates DDL as if &lt;code&gt;null=True&lt;/code&gt;. When fetching from the database, it is assumed that a &lt;code&gt;NULL&lt;/code&gt; value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption.</source>
          <target state="translated">Django通常更喜欢使用空字符串（ &lt;code&gt;''&lt;/code&gt; ）而不是 &lt;code&gt;NULL&lt;/code&gt; ，但是Oracle对待它们的方式相同。为了解决这个问题，Oracle后端会忽略将空字符串作为可能值的字段上的显式 &lt;code&gt;null&lt;/code&gt; 选项，并生成DDL，就像 &lt;code&gt;null=True&lt;/code&gt; 一样。从数据库中获取数据时，假定这些字段之一中的 &lt;code&gt;NULL&lt;/code&gt; 值实际上表示空字符串，并且将数据进行静默转换以反映此假设。</target>
        </trans-unit>
        <trans-unit id="536b57203973a94f32f1a4d6dc9ecb4600d00792" translate="yes" xml:space="preserve">
          <source>Django gives you a few ways to control how database transactions are managed.</source>
          <target state="translated">Django提供了几种方法来控制数据库事务的管理方式。</target>
        </trans-unit>
        <trans-unit id="015dea89431c59127f3fdcd0b32f55fdb3a28299" translate="yes" xml:space="preserve">
          <source>Django gives you two ways of performing raw SQL queries: you can use &lt;a href=&quot;#django.db.models.Manager.raw&quot;&gt;&lt;code&gt;Manager.raw()&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#performing-raw-queries&quot;&gt;perform raw queries and return model instances&lt;/a&gt;, or you can avoid the model layer entirely and &lt;a href=&quot;#executing-custom-sql-directly&quot;&gt;execute custom SQL directly&lt;/a&gt;.</source>
          <target state="translated">Django为您提供了两种执行原始SQL查询的方式：您可以使用&lt;a href=&quot;#django.db.models.Manager.raw&quot;&gt; &lt;code&gt;Manager.raw()&lt;/code&gt; &lt;/a&gt;来&lt;a href=&quot;#performing-raw-queries&quot;&gt;执行原始查询并返回模型实例&lt;/a&gt;，或者可以完全避开模型层并&lt;a href=&quot;#executing-custom-sql-directly&quot;&gt;直接执行自定义SQL&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f52479f9485c0077d52232ebe731fa3caa0197d" translate="yes" xml:space="preserve">
          <source>Django handles three distinct parts of the work involved in forms:</source>
          <target state="translated">Django处理了表单中涉及的三个不同部分的工作。</target>
        </trans-unit>
        <trans-unit id="27a8816ff05147db4a9535f197841dee85c6acc5" translate="yes" xml:space="preserve">
          <source>Django has a lot of documentation. A high-level overview of how it&amp;rsquo;s organized will help you know where to look for certain things:</source>
          <target state="translated">Django有很多文档。有关其组织方式的高层概述将帮助您知道在哪里寻找某些东西：</target>
        </trans-unit>
        <trans-unit id="e79f00c9808b4f3ff76b0675616d3189e6dca217" translate="yes" xml:space="preserve">
          <source>Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates with &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;. If a template doesn&amp;rsquo;t exist in the first directory, it checks the second, and so on.</source>
          <target state="translated">Django有一个模板搜索路径，可让您最大程度地减少模板之间的冗余。在Django设置中，您指定目录列表以使用&lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;检查模板。如果第一个目录中没有模板，它将检查第二个目录，依此类推。</target>
        </trans-unit>
        <trans-unit id="29c1d05d19207dd8b9bb99458e65acfb0689326d" translate="yes" xml:space="preserve">
          <source>Django has built-in protection against most types of CSRF attacks, providing you have &lt;a href=&quot;../ref/csrf#using-csrf&quot;&gt;enabled and used it&lt;/a&gt; where appropriate. However, as with any mitigation technique, there are limitations. For example, it is possible to disable the CSRF module globally or for particular views. You should only do this if you know what you are doing. There are other &lt;a href=&quot;../ref/csrf#csrf-limitations&quot;&gt;limitations&lt;/a&gt; if your site has subdomains that are outside of your control.</source>
          <target state="translated">Django具有针对大多数CSRF攻击的内置保护，只要您在适当的地方&lt;a href=&quot;../ref/csrf#using-csrf&quot;&gt;启用和使用它即可&lt;/a&gt;。但是，与任何缓解技术一样，存在局限性。例如，可以全局禁用CSRF模块或针对特定视图禁用CSRF模块。只有知道自己在做什么，才应该这样做。如果您的站点具有您无法控制的子域，则还有其他&lt;a href=&quot;../ref/csrf#csrf-limitations&quot;&gt;限制&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dccebfb5c2856dd5dc59701f84c7494e4ddc8e3a" translate="yes" xml:space="preserve">
          <source>Django has developing support for asynchronous (&amp;ldquo;async&amp;rdquo;) Python, but does not yet support asynchronous views or middleware; they will be coming in a future release.</source>
          <target state="translated">Django已开发了对异步（&amp;ldquo; async&amp;rdquo;）Python的支持，但尚不支持异步视图或中间件。他们将在将来的版本中发布。</target>
        </trans-unit>
        <trans-unit id="70171ba1481e458bdd6f4ea8f7ba4ccc3bcb0412" translate="yes" xml:space="preserve">
          <source>Django has full support for &lt;a href=&quot;translation&quot;&gt;translation of text&lt;/a&gt;, &lt;a href=&quot;formatting&quot;&gt;formatting of dates, times and numbers&lt;/a&gt;, and &lt;a href=&quot;timezones&quot;&gt;time zones&lt;/a&gt;.</source>
          <target state="translated">Django的具有全面支持&lt;a href=&quot;translation&quot;&gt;文本翻译&lt;/a&gt;，&lt;a href=&quot;formatting&quot;&gt;日期，时间和数字格式&lt;/a&gt;，以及&lt;a href=&quot;timezones&quot;&gt;时区&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="02212fe30cb464bd0cb4d2f5c7255cb588a37675" translate="yes" xml:space="preserve">
          <source>Django has the concept of &amp;ldquo;views&amp;rdquo; to encapsulate the logic responsible for processing a user&amp;rsquo;s request and for returning the response. Find all you need to know about views via the links below:</source>
          <target state="translated">Django具有&amp;ldquo;视图&amp;rdquo;的概念，用于封装负责处理用户请求和返回响应的逻辑。通过下面的链接找到所有您需要了解的视图：</target>
        </trans-unit>
        <trans-unit id="8f6f29879aaa7b24e5eddf6585895a4b12c3f27f" translate="yes" xml:space="preserve">
          <source>Django has two base classes that follow the query expression API and from where all Django builtin lookups are derived:</source>
          <target state="translated">Django有两个遵循查询表达式API的基类,所有Django内置的查找都是从这里派生出来的。</target>
        </trans-unit>
        <trans-unit id="be84eb125a834e74b80c2e3097a204ff36350539" translate="yes" xml:space="preserve">
          <source>Django includes a &amp;ldquo;signal dispatcher&amp;rdquo; which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain &lt;em&gt;senders&lt;/em&gt; to notify a set of &lt;em&gt;receivers&lt;/em&gt; that some action has taken place. They&amp;rsquo;re especially useful when many pieces of code may be interested in the same events.</source>
          <target state="translated">Django包含一个&amp;ldquo;信号分配器&amp;rdquo;，当在框架中其他位置发生操作时，该信号分配器可以帮助通知已分离的应用程序。简而言之，信号使某些&lt;em&gt;发送者&lt;/em&gt;可以通知一组&lt;em&gt;接收者&lt;/em&gt;已经采取了某些措施。当许多代码片段可能对同一事件感兴趣时，它们特别有用。</target>
        </trans-unit>
        <trans-unit id="95c98177d04c670efd39a48328d99ce1c912aeb0" translate="yes" xml:space="preserve">
          <source>Django includes a &lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;contenttypes&lt;/code&gt;&lt;/a&gt; application that can track all of the models installed in your Django-powered project, providing a high-level, generic interface for working with your models.</source>
          <target state="translated">Django包含一个&lt;a href=&quot;#module-django.contrib.contenttypes&quot;&gt; &lt;code&gt;contenttypes&lt;/code&gt; &lt;/a&gt;应用程序，该应用程序可以跟踪Django驱动的项目中安装的所有模型，并提供了用于处理模型的高级通用接口。</target>
        </trans-unit>
        <trans-unit id="8f052430bd328242c3971f45fe45b01bbd6079d7" translate="yes" xml:space="preserve">
          <source>Django includes a &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting that defaults to &lt;code&gt;America/Chicago&lt;/code&gt;. This probably isn&amp;rsquo;t where you live, so you might want to change it in your settings file.</source>
          <target state="translated">Django包含&lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt;设置，默认设置为 &lt;code&gt;America/Chicago&lt;/code&gt; 。这可能不是您的住所，因此您可能需要在设置文件中进行更改。</target>
        </trans-unit>
        <trans-unit id="458388d11f65fde27fe771afc19b0bb7b7ebe648" translate="yes" xml:space="preserve">
          <source>Django includes a number of &lt;code&gt;HttpResponse&lt;/code&gt; subclasses that handle different types of HTTP responses. Like &lt;code&gt;HttpResponse&lt;/code&gt;, these subclasses live in &lt;a href=&quot;#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django包含许多 &lt;code&gt;HttpResponse&lt;/code&gt; 子类，它们处理不同类型的HTTP响应。像 &lt;code&gt;HttpResponse&lt;/code&gt; 一样，这些子类位于&lt;a href=&quot;#module-django.http&quot;&gt; &lt;code&gt;django.http&lt;/code&gt; 中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="889426a65b3fcbafa209dd0d2e2335cd4097af62" translate="yes" xml:space="preserve">
          <source>Django includes default views and templates for several HTTP error codes. You may want to override the default templates by creating the following templates in your root template directory: &lt;code&gt;404.html&lt;/code&gt;, &lt;code&gt;500.html&lt;/code&gt;, &lt;code&gt;403.html&lt;/code&gt;, and &lt;code&gt;400.html&lt;/code&gt;. The &lt;a href=&quot;../../ref/views#error-views&quot;&gt;default error views&lt;/a&gt; that use these templates should suffice for 99% of Web applications, but you can &lt;a href=&quot;../../topics/http/views#customizing-error-views&quot;&gt;customize them&lt;/a&gt; as well.</source>
          <target state="translated">Django包含一些HTTP错误代码的默认视图和模板。您可能需要通过在根模板目录中创建以下模板来覆盖默认模板： &lt;code&gt;404.html&lt;/code&gt; ， &lt;code&gt;500.html&lt;/code&gt; ， &lt;code&gt;403.html&lt;/code&gt; 和 &lt;code&gt;400.html&lt;/code&gt; 。使用这些模板的&lt;a href=&quot;../../ref/views#error-views&quot;&gt;默认错误视图&lt;/a&gt;足以满足99％的Web应用程序的要求，但是您也可以对其进行&lt;a href=&quot;../../topics/http/views#customizing-error-views&quot;&gt;自定义&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4b1ddc4008820604470f2b37fdb58cc12683176d" translate="yes" xml:space="preserve">
          <source>Django includes four validators:</source>
          <target state="translated">Django包含四个验证器。</target>
        </trans-unit>
        <trans-unit id="d982af0e146a95c3fdad2da04478ab52508cee2e" translate="yes" xml:space="preserve">
          <source>Django includes getting-started documentation for the following ASGI servers:</source>
          <target state="translated">Django包含以下ASGI服务器的入门文档。</target>
        </trans-unit>
        <trans-unit id="f4e3a0f6836080b1a437607ead12ee23154d9bb7" translate="yes" xml:space="preserve">
          <source>Django includes getting-started documentation for the following WSGI servers:</source>
          <target state="translated">Django包含以下WSGI服务器的入门文档。</target>
        </trans-unit>
        <trans-unit id="0ab315223bded83f350627251bec56c9651e75dd" translate="yes" xml:space="preserve">
          <source>Django includes many &lt;a href=&quot;../../topics/security&quot;&gt;security features&lt;/a&gt;. Some are built-in and always enabled. Others are optional because they aren&amp;rsquo;t always appropriate, or because they&amp;rsquo;re inconvenient for development. For example, forcing HTTPS may not be suitable for all websites, and it&amp;rsquo;s impractical for local development.</source>
          <target state="translated">Django包含许多&lt;a href=&quot;../../topics/security&quot;&gt;安全功能&lt;/a&gt;。有些是内置的并且始终启用。其他选项是可选的，因为它们并不总是合适的，或者因为它们不方便开发。例如，强制HTTPS可能不适用于所有网站，并且对于本地开发而言是不切实际的。</target>
        </trans-unit>
        <trans-unit id="19f1d90d2f2adb78cf256194f312c4801f7a5470" translate="yes" xml:space="preserve">
          <source>Django initializes your middleware with only the &lt;code&gt;get_response&lt;/code&gt; argument, so you can&amp;rsquo;t define &lt;code&gt;__init__()&lt;/code&gt; as requiring any other arguments.</source>
          <target state="translated">Django仅使用 &lt;code&gt;get_response&lt;/code&gt; 参数初始化中间件，因此您无法将 &lt;code&gt;__init__()&lt;/code&gt; 定义为需要任何其他参数。</target>
        </trans-unit>
        <trans-unit id="a3fea8dbbe7a338b352bdae1f450b071ec197f74" translate="yes" xml:space="preserve">
          <source>Django inserts the given SQL snippet directly into the &lt;code&gt;SELECT&lt;/code&gt; statement, so the resulting SQL of the above example would be something like:</source>
          <target state="translated">Django将给定的SQL代码段直接插入 &lt;code&gt;SELECT&lt;/code&gt; 语句中，因此上述示例的结果SQL类似于：</target>
        </trans-unit>
        <trans-unit id="afdb59ef1b6ee4ec4f5cb447427cc133e45be7f6" translate="yes" xml:space="preserve">
          <source>Django is a Python Web framework. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;What Python version can I use with Django?&lt;/a&gt; for details.</source>
          <target state="translated">Django是Python Web框架。请参阅&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;我可以在Django中使用哪个Python版本？&lt;/a&gt;有关详细信息。</target>
        </trans-unit>
        <trans-unit id="482ea90df7eed9b987c7c25b2f922c8b9edb5bca" translate="yes" xml:space="preserve">
          <source>Django is a Python web framework, thus requiring Python to be installed on your machine. At the time of writing, Python 3.7 is the latest version.</source>
          <target state="translated">Django是一个Python网络框架,因此需要在你的机器上安装Python。在撰写本文时,Python 3.7是最新版本。</target>
        </trans-unit>
        <trans-unit id="e1f335da822bd02cbc874978d6f8f3baa1622b97" translate="yes" xml:space="preserve">
          <source>Django is designed for short-lived requests. Streaming responses will tie a worker process for the entire duration of the response. This may result in poor performance.</source>
          <target state="translated">Django是为短时请求设计的。流式响应会在整个响应期间绑定一个工人进程。这可能导致性能不佳。</target>
        </trans-unit>
        <trans-unit id="b2bac1d86c0e2adfea324586f9103faccfe93125" translate="yes" xml:space="preserve">
          <source>Django is full of shortcuts to make Web developers&amp;rsquo; lives easier, but all those tools are of no use if you can&amp;rsquo;t easily deploy your sites. Since Django&amp;rsquo;s inception, ease of deployment has been a major goal.</source>
          <target state="translated">Django充满了使Web开发人员的生活更轻松的捷径，但是如果您不能轻松地部署站点，那么所有这些工具都没有用。自Django诞生以来，易于部署一直是主要目标。</target>
        </trans-unit>
        <trans-unit id="201fd29496e4248c34f32949f8bac670ba3b1dc2" translate="yes" xml:space="preserve">
          <source>Django is itself quite lazy. A good example of this can be found in the evaluation of &lt;code&gt;QuerySets&lt;/code&gt;. &lt;a href=&quot;db/queries#querysets-are-lazy&quot;&gt;QuerySets are lazy&lt;/a&gt;. Thus a &lt;code&gt;QuerySet&lt;/code&gt; can be created, passed around and combined with other &lt;code&gt;QuerySets&lt;/code&gt;, without actually incurring any trips to the database to fetch the items it describes. What gets passed around is the &lt;code&gt;QuerySet&lt;/code&gt; object, not the collection of items that - eventually - will be required from the database.</source>
          <target state="translated">Django本身很懒。在 &lt;code&gt;QuerySets&lt;/code&gt; 的评估中可以找到一个很好的例子。&lt;a href=&quot;db/queries#querysets-are-lazy&quot;&gt;QuerySet是惰性的&lt;/a&gt;。因此，一个 &lt;code&gt;QuerySet&lt;/code&gt; 可以被创建，传来传去，并结合其他 &lt;code&gt;QuerySets&lt;/code&gt; ，实际上并没有产生任何行程到数据库来获取它所描述的项目。传递的是 &lt;code&gt;QuerySet&lt;/code&gt; 对象，而不是数据库最终需要的项目集合。</target>
        </trans-unit>
        <trans-unit id="0549ee619ca20fd5aa3ed339b9b900d280cdf7f0" translate="yes" xml:space="preserve">
          <source>Django is, and will continue to be, a database-agnostic web framework. We would encourage those writing reusable applications for the Django community to write database-agnostic code where practical. However, we recognize that real world projects written using Django need not be database-agnostic. In fact, once a project reaches a given size changing the underlying data store is already a significant challenge and is likely to require changing the code base in some ways to handle differences between the data stores.</source>
          <target state="translated">Django是,并将继续是一个与数据库无关的网络框架。我们鼓励那些为Django社区编写可重用的应用程序的人,在可行的情况下编写数据库无关的代码。然而,我们也认识到,在现实世界中,使用Django编写的项目不一定是数据库无关的。事实上,一旦一个项目达到一定的规模,改变底层数据存储已经是一个重大的挑战,很可能需要通过一些方式改变代码库来处理数据存储之间的差异。</target>
        </trans-unit>
        <trans-unit id="912735e93e4352d0c76bd3908101b4394a009011" translate="yes" xml:space="preserve">
          <source>Django itself uses this signal to reset various data:</source>
          <target state="translated">Django自己也使用这个信号来重置各种数据。</target>
        </trans-unit>
        <trans-unit id="f85ad78c669804577f4d4ad5aff882094205b842" translate="yes" xml:space="preserve">
          <source>Django loads that Python module and looks for the variable &lt;code&gt;urlpatterns&lt;/code&gt;. This should be a &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-sequence&quot;&gt;sequence&lt;/a&gt; of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;django.urls.path()&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">Django加载该Python模块并查找变量 &lt;code&gt;urlpatterns&lt;/code&gt; 。这应该是一个&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-sequence&quot;&gt;序列&lt;/a&gt;的&lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt; &lt;code&gt;django.urls.path()&lt;/code&gt; &lt;/a&gt;和/或&lt;a href=&quot;../../ref/urls#django.urls.re_path&quot;&gt; &lt;code&gt;django.urls.re_path()&lt;/code&gt; &lt;/a&gt;的实例。</target>
        </trans-unit>
        <trans-unit id="afe265878847e6456e60bb211412bcf9f5e8a9a6" translate="yes" xml:space="preserve">
          <source>Django makes shallow copies of manager objects during certain queries; if your Manager cannot be copied, those queries will fail.</source>
          <target state="translated">Django在某些查询过程中会对Manager对象进行浅层复制,如果你的Manager不能被复制,这些查询就会失败。</target>
        </trans-unit>
        <trans-unit id="1443579652f5e31fe2c79e4157d5c6b3e1651319" translate="yes" xml:space="preserve">
          <source>Django makes the general assumption that the original strings in a translatable project are written in English. You can choose another language, but you must be aware of certain limitations:</source>
          <target state="translated">Django一般假设可翻译项目中的原始字符串是用英语编写的。你可以选择其他语言,但你必须意识到某些限制。</target>
        </trans-unit>
        <trans-unit id="32cc1a9e9f5ff0bce01dc2b97faef8a991337ac5" translate="yes" xml:space="preserve">
          <source>Django may, from time to time, extend the capabilities of the test runner by adding new arguments. The &lt;code&gt;**kwargs&lt;/code&gt; declaration allows for this expansion. If you subclass &lt;code&gt;DiscoverRunner&lt;/code&gt; or write your own test runner, ensure it accepts &lt;code&gt;**kwargs&lt;/code&gt;.</source>
          <target state="translated">Django可能会不时地通过添加新参数来扩展测试运行程序的功能。该 &lt;code&gt;**kwargs&lt;/code&gt; 声明允许这种扩张。如果您将 &lt;code&gt;DiscoverRunner&lt;/code&gt; 子类化或编写自己的测试运行程序，请确保它接受 &lt;code&gt;**kwargs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a513cb8ffab9733ecd73df9e0a66010c51c48d6a" translate="yes" xml:space="preserve">
          <source>Django model fields for &lt;a href=&quot;https://www.opengeospatial.org/&quot;&gt;OGC&lt;/a&gt; geometries and raster data.</source>
          <target state="translated">用于&lt;a href=&quot;https://www.opengeospatial.org/&quot;&gt;OGC&lt;/a&gt;几何形状和栅格数据的Django模型字段。</target>
        </trans-unit>
        <trans-unit id="7cf3763979c17f97ec99497d74346dba8c6758fd" translate="yes" xml:space="preserve">
          <source>Django must be able to instantiate your storage system without any arguments. This means that any settings should be taken from &lt;code&gt;django.conf.settings&lt;/code&gt;:</source>
          <target state="translated">Django必须能够在没有任何参数的情况下实例化您的存储系统。这意味着任何设置都应来自 &lt;code&gt;django.conf.settings&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="466871cc514f71197f88e028032acda78b9b0ca9" translate="yes" xml:space="preserve">
          <source>Django needs the following parameters for its database connections:</source>
          <target state="translated">Django的数据库连接需要以下参数。</target>
        </trans-unit>
        <trans-unit id="c394ebc68a36eb9d6dafc0d188b124f5baafb688" translate="yes" xml:space="preserve">
          <source>Django needs to fetch objects into memory to send signals and handle cascades. However, if there are no cascades and no signals, then Django may take a fast-path and delete objects without fetching into memory. For large deletes this can result in significantly reduced memory usage. The amount of executed queries can be reduced, too.</source>
          <target state="translated">Django需要将对象获取到内存中来发送信号和处理级联。但是,如果没有级联和信号,那么Django可能会采取快速路径删除对象,而不需要将其获取到内存中。对于大面积的删除,这可以使内存使用量大大降低。也可以减少执行查询的数量。</target>
        </trans-unit>
        <trans-unit id="1e21e7c06bd542c742f4ee927b87acbd91923002" translate="yes" xml:space="preserve">
          <source>Django offers a powerful and intuitive way to &amp;ldquo;follow&amp;rdquo; relationships in lookups, taking care of the SQL &lt;code&gt;JOIN&lt;/code&gt;s for you automatically, behind the scenes. To span a relationship, use the field name of related fields across models, separated by double underscores, until you get to the field you want.</source>
          <target state="translated">Django提供了一种强大且直观的方式来&amp;ldquo;跟踪&amp;rdquo;查找中的关系，并在幕后自动为您处理SQL &lt;code&gt;JOIN&lt;/code&gt; 。要扩展关系，请在各个模型之间使用相关字段的字段名称，并用双下划线将其分隔，直到找到所需的字段。</target>
        </trans-unit>
        <trans-unit id="38857e15171289c6b27e191218d8922ef0f1087b" translate="yes" xml:space="preserve">
          <source>Django offers a robust internationalization and localization framework to assist you in the development of applications for multiple languages and world regions:</source>
          <target state="translated">Django提供了一个强大的国际化和本地化框架,以帮助你开发多语言和世界地区的应用程序。</target>
        </trans-unit>
        <trans-unit id="065b923b03b2418a3da24efd7e3d3a6309039242" translate="yes" xml:space="preserve">
          <source>Django offers a wide variety of &lt;a href=&quot;../ref/models/querysets#field-lookups&quot;&gt;built-in lookups&lt;/a&gt; for filtering (for example, &lt;code&gt;exact&lt;/code&gt; and &lt;code&gt;icontains&lt;/code&gt;). This documentation explains how to write custom lookups and how to alter the working of existing lookups. For the API references of lookups, see the &lt;a href=&quot;../ref/models/lookups&quot;&gt;Lookup API reference&lt;/a&gt;.</source>
          <target state="translated">Django提供了各种各样的&lt;a href=&quot;../ref/models/querysets#field-lookups&quot;&gt;内置查找&lt;/a&gt;来进行过滤（例如， &lt;code&gt;exact&lt;/code&gt; 和 &lt;code&gt;icontains&lt;/code&gt; ）。本文档说明了如何编写自定义查找以及如何更改现有查找的工作方式。有关查找的API参考，请参阅&lt;a href=&quot;../ref/models/lookups&quot;&gt;查阅API参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7b4e0858a1b6a38d004b95b8c4f3b2ff1cbf1dc0" translate="yes" xml:space="preserve">
          <source>Django offers many different ways of approaching things, but just because it&amp;rsquo;s possible to do something in a certain way doesn&amp;rsquo;t mean that it&amp;rsquo;s the most appropriate way to do it. For example, you might find that you could calculate the same thing - the number of items in a collection, perhaps - in a &lt;code&gt;QuerySet&lt;/code&gt;, in Python, or in a template.</source>
          <target state="translated">Django提供了许多不同的处理方式，但是仅仅因为可以以某种方式做某事并不意味着这是最合适的方式。例如，您可能会发现可以计算出相同的值-可能是 &lt;code&gt;QuerySet&lt;/code&gt; ，Python或模板中的集合中项目的数量。</target>
        </trans-unit>
        <trans-unit id="b430bec41e83521a629bc376b17e0920bc5b746f" translate="yes" xml:space="preserve">
          <source>Django offers many utility functions (particularly in &lt;code&gt;django.utils&lt;/code&gt;) that take a string as their first argument and do something to that string. These functions are used by template filters as well as directly in other code.</source>
          <target state="translated">Django提供了许多实用程序功能（尤其是在 &lt;code&gt;django.utils&lt;/code&gt; 中），这些功能将字符串作为第一个参数，并对字符串进行某些处理。模板过滤器以及直接在其他代码中使用这些功能。</target>
        </trans-unit>
        <trans-unit id="bfd5e374353e7a52d69c6d0ed581c985971ea0cb" translate="yes" xml:space="preserve">
          <source>Django offers multiple tools commonly needed in the development of Web applications:</source>
          <target state="translated">Django提供了Web应用开发中常用的多种工具。</target>
        </trans-unit>
        <trans-unit id="ca7421cba4913cb5ffd18cdd485cbc39228370a7" translate="yes" xml:space="preserve">
          <source>Django officially supports the following databases:</source>
          <target state="translated">Django官方支持以下数据库。</target>
        </trans-unit>
        <trans-unit id="72e1a567d5808522e00acf5e6b2302c7dfa107c3" translate="yes" xml:space="preserve">
          <source>Django only sends a cookie if it needs to. If you don&amp;rsquo;t set any session data, it won&amp;rsquo;t send a session cookie.</source>
          <target state="translated">Django仅在需要时发送cookie。如果您未设置任何会话数据，则不会发送会话Cookie。</target>
        </trans-unit>
        <trans-unit id="7371c7560496705b6d1494e4c2ec548e4c73969d" translate="yes" xml:space="preserve">
          <source>Django only supports &lt;code&gt;.po&lt;/code&gt; files encoded in UTF-8 and without any BOM (Byte Order Mark) so if your text editor adds such marks to the beginning of files by default then you will need to reconfigure it.</source>
          <target state="translated">Django仅支持以UTF-8编码且没有任何BOM（字节顺序标记）的 &lt;code&gt;.po&lt;/code&gt; 文件，因此，如果您的文本编辑器默认将此类标记添加到文件的开头，则需要重新配置它。</target>
        </trans-unit>
        <trans-unit id="59038bedeeccc68721f3a09563a4a60aed17f4a7" translate="yes" xml:space="preserve">
          <source>Django only supports naive time objects and will raise an exception if you attempt to save an aware time object, as a timezone for a time with no associated date does not make sense.</source>
          <target state="translated">Django只支持naive时间对象,如果你试图保存一个有意识的时间对象,会引发一个异常,因为一个没有关联日期的时间的时区是没有意义的。</target>
        </trans-unit>
        <trans-unit id="d1d610f1ca06a37a878ee870e9e36e1b72357940" translate="yes" xml:space="preserve">
          <source>Django opens a connection to the database when it first makes a database query. It keeps this connection open and reuses it in subsequent requests. Django closes the connection once it exceeds the maximum age defined by &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; or when it isn&amp;rsquo;t usable any longer.</source>
          <target state="translated">Django首次进行数据库查询时会打开与数据库的连接。它使该连接保持打开状态，并在后续请求中重用它。一旦超过&lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt;定义的最大使用期限或不再可用时，Django将关闭连接。</target>
        </trans-unit>
        <trans-unit id="a7e4a4de870ba8d22db27d84b17b4be68dca17b4" translate="yes" xml:space="preserve">
          <source>Django originally accepted only ASCII letters and numbers in usernames. Although it wasn&amp;rsquo;t a deliberate choice, Unicode characters have always been accepted when using Python 3. Django 1.10 officially added Unicode support in usernames, keeping the ASCII-only behavior on Python 2.</source>
          <target state="translated">Django最初仅接受用户名中的ASCII字母和数字。尽管不是故意的选择，但在使用Python 3时始终会接受Unicode字符。Django1.10正式在用户名中添加了Unicode支持，从而在Python 2上保留了纯ASCII行为。</target>
        </trans-unit>
        <trans-unit id="cf7c86e8f2e5255a9c61751a7333e5a4179d5575" translate="yes" xml:space="preserve">
          <source>Django places some restrictions on model field names:</source>
          <target state="translated">Django对模型字段名做了一些限制。</target>
        </trans-unit>
        <trans-unit id="ecf8b16feb49633256657cbf500f8e8e8e2904de" translate="yes" xml:space="preserve">
          <source>Django projects generally rely on the &lt;a href=&quot;../../topics/templates#template-engines&quot;&gt;high level, backend agnostic APIs&lt;/a&gt; for each of these steps instead of the template system&amp;rsquo;s lower level APIs:</source>
          <target state="translated">Django项目通常针对每个步骤都使用&lt;a href=&quot;../../topics/templates#template-engines&quot;&gt;高级后端不可知API&lt;/a&gt;，而不是模板系统的较低级API：</target>
        </trans-unit>
        <trans-unit id="c163a316487f40e600f330cb480ac88813dc8584" translate="yes" xml:space="preserve">
          <source>Django provides &lt;a href=&quot;../../ref/models/expressions#django.db.models.F&quot;&gt;&lt;code&gt;F expressions&lt;/code&gt;&lt;/a&gt; to allow such comparisons. Instances of &lt;code&gt;F()&lt;/code&gt; act as a reference to a model field within a query. These references can then be used in query filters to compare the values of two different fields on the same model instance.</source>
          <target state="translated">Django提供了&lt;a href=&quot;../../ref/models/expressions#django.db.models.F&quot;&gt; &lt;code&gt;F expressions&lt;/code&gt; &lt;/a&gt;以允许进行这种比较。 &lt;code&gt;F()&lt;/code&gt; 的实例充当对查询中模型字段的引用。然后，可以在查询过滤器中使用这些引用来比较同一模型实例上两个不同字段的值。</target>
        </trans-unit>
        <trans-unit id="2d33c0a6ab0b5b41c0ecd931abf601d0dda8a342" translate="yes" xml:space="preserve">
          <source>Django provides &lt;code&gt;django.utils.deprecation.MiddlewareMixin&lt;/code&gt; to ease creating middleware classes that are compatible with both &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and the old &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;. All middleware classes included with Django are compatible with both settings.</source>
          <target state="translated">Django提供了 &lt;code&gt;django.utils.deprecation.MiddlewareMixin&lt;/code&gt; 来简化创建与&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;和旧 &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 兼容的中间件类。Django随附的所有中间件类均与这两种设置兼容。</target>
        </trans-unit>
        <trans-unit id="fffbaba5fcd2e12de14512168b98ad31016399e3" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;a href=&quot;../ref/signals&quot;&gt;set of built-in signals&lt;/a&gt; that let user code get notified by Django itself of certain actions. These include some useful notifications:</source>
          <target state="translated">Django提供了一&lt;a href=&quot;../ref/signals&quot;&gt;组内置信号&lt;/a&gt;，这些信号使Django自身可以将某些操作通知给用户代码。其中包括一些有用的通知：</target>
        </trans-unit>
        <trans-unit id="d0d5dd43b0db8640a538b2b65f90fc54a95d58f1" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;code&gt;DoesNotExist&lt;/code&gt; exception as an attribute of each model class to identify the class of object that could not be found and to allow you to catch a particular model class with &lt;code&gt;try/except&lt;/code&gt;. The exception is a subclass of &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django提供了 &lt;code&gt;DoesNotExist&lt;/code&gt; 异常作为每个模型类的属性，以标识找不到的对象类，并允许您使用 &lt;code&gt;try/except&lt;/code&gt; 捕获特定的模型类。异常是&lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt; &lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt; &lt;/a&gt;的子类。</target>
        </trans-unit>
        <trans-unit id="afcf7ff55371a1b5f2c0e1c4e5d7b6d5ed01daa3" translate="yes" xml:space="preserve">
          <source>Django provides a &lt;code&gt;File&lt;/code&gt; class, which is used as a proxy to the file&amp;rsquo;s contents and operations. This can be subclassed to customize how the file is accessed, and what methods are available. It lives at &lt;code&gt;django.db.models.fields.files&lt;/code&gt;, and its default behavior is explained in the &lt;a href=&quot;../ref/files/file&quot;&gt;file documentation&lt;/a&gt;.</source>
          <target state="translated">Django提供了一个 &lt;code&gt;File&lt;/code&gt; 类，该类用作文件内容和操作的代理。可以将其子类化，以自定义文件的访问方式以及可用的方法。它位于 &lt;code&gt;django.db.models.fields.files&lt;/code&gt; 中，其默认行为在&lt;a href=&quot;../ref/files/file&quot;&gt;文件文档&lt;/a&gt;中进行了说明。</target>
        </trans-unit>
        <trans-unit id="d87f0c21e43cf137c5c5913a067cb9e9fee79678" translate="yes" xml:space="preserve">
          <source>Django provides a better way to target individual cache values. Django&amp;rsquo;s cache framework has a system-wide version identifier, specified using the &lt;a href=&quot;../ref/settings#std:setting-CACHES-VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; cache setting. The value of this setting is automatically combined with the cache prefix and the user-provided cache key to obtain the final cache key.</source>
          <target state="translated">Django提供了一种更好的方法来定位各个缓存值。Django的缓存框架具有系统范围的版本标识符，该标识符使用&lt;a href=&quot;../ref/settings#std:setting-CACHES-VERSION&quot;&gt; &lt;code&gt;VERSION&lt;/code&gt; &lt;/a&gt;缓存设置指定。此设置的值会自动与缓存前缀和用户提供的缓存键组合在一起，以获取最终的缓存键。</target>
        </trans-unit>
        <trans-unit id="76f69c24cb1ecd4dbb5cc96356e68d931549edee" translate="yes" xml:space="preserve">
          <source>Django provides a built-in class specifically for images. &lt;a href=&quot;#django.core.files.images.ImageFile&quot;&gt;&lt;code&gt;django.core.files.images.ImageFile&lt;/code&gt;&lt;/a&gt; inherits all the attributes and methods of &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, and additionally provides the following:</source>
          <target state="translated">Django提供了一个专门用于图像的内置类。&lt;a href=&quot;#django.core.files.images.ImageFile&quot;&gt; &lt;code&gt;django.core.files.images.ImageFile&lt;/code&gt; &lt;/a&gt;继承&lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; 的&lt;/a&gt;所有属性和方法，并另外提供以下内容：</target>
        </trans-unit>
        <trans-unit id="6fc258af471fb89687c86135d46ce81ed7533981" translate="yes" xml:space="preserve">
          <source>Django provides a couple ways to validate the minimum or maximum number of submitted forms. Applications which need more customizable validation of the number of forms should use custom formset validation.</source>
          <target state="translated">Django提供了几种方法来验证提交表单的最小或最大数量。需要更多自定义表单数量验证的应用应该使用自定义表单集验证。</target>
        </trans-unit>
        <trans-unit id="56c0922e2f585fd6ac9ae530e7ece3cfa064f63c" translate="yes" xml:space="preserve">
          <source>Django provides a few classes that help you manage paginated data &amp;ndash; that is, data that&amp;rsquo;s split across several pages, with &amp;ldquo;Previous/Next&amp;rdquo; links. These classes live in &lt;a href=&quot;https://github.com/django/django/blob/master/django/core/paginator.py&quot;&gt;django/core/paginator.py&lt;/a&gt;.</source>
          <target state="translated">Django提供了一些类来帮助您管理分页数据，即通过&amp;ldquo;上一页/下一页&amp;rdquo;链接拆分到多个页面的数据。这些类位于&lt;a href=&quot;https://github.com/django/django/blob/master/django/core/paginator.py&quot;&gt;django / core / paginator.py中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="269e9b744906a5b197eff615842d6d1498729aaa" translate="yes" xml:space="preserve">
          <source>Django provides a few ways to include this header in responses from your site:</source>
          <target state="translated">Django提供了一些方法来在你的网站的响应中包含这个头。</target>
        </trans-unit>
        <trans-unit id="fe622209e103a952cc331d8dc8b6c5d56a15c715" translate="yes" xml:space="preserve">
          <source>Django provides a flexible password storage system and uses PBKDF2 by default.</source>
          <target state="translated">Django提供了一个灵活的密码存储系统,默认使用PBKDF2。</target>
        </trans-unit>
        <trans-unit id="7ee43670dc572d1aac1eff315b82c300cf4998ea" translate="yes" xml:space="preserve">
          <source>Django provides a handler to allow Apache to authenticate users directly against Django&amp;rsquo;s authentication backends. See the &lt;a href=&quot;apache-auth&quot;&gt;mod_wsgi authentication documentation&lt;/a&gt;.</source>
          <target state="translated">Django提供了一个处理程序，允许Apache直接针对Django的身份验证后端对用户进行身份验证。请参阅&lt;a href=&quot;apache-auth&quot;&gt;mod_wsgi身份验证文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bb4497fa4435f105e8224322a33656b81d743114" translate="yes" xml:space="preserve">
          <source>Django provides a number of utilities to handle the unique requirements of logging in Web server environment.</source>
          <target state="translated">Django提供了一些实用工具来处理Web服务器环境中的独特的日志记录需求。</target>
        </trans-unit>
        <trans-unit id="ef8a3b092c4b1e1f92d62cfed7df38c2aaaab816" translate="yes" xml:space="preserve">
          <source>Django provides a range of &lt;code&gt;QuerySet&lt;/code&gt; refinement methods that modify either the types of results returned by the &lt;code&gt;QuerySet&lt;/code&gt; or the way its SQL query is executed.</source>
          <target state="translated">Django提供了一系列 &lt;code&gt;QuerySet&lt;/code&gt; 优化方法，这些方法可以修改 &lt;code&gt;QuerySet&lt;/code&gt; 返回的结果类型或执行SQL查询的方式。</target>
        </trans-unit>
        <trans-unit id="ec994ccadcee6e397535c4907b10f52a106fb071" translate="yes" xml:space="preserve">
          <source>Django provides a range of tools and libraries to help you build forms to accept input from site visitors, and then process and respond to the input.</source>
          <target state="translated">Django提供了一系列的工具和库来帮助你建立表单来接受网站访问者的输入,然后对输入进行处理和响应。</target>
        </trans-unit>
        <trans-unit id="21d87a32da8e65d9a2c0ba5c79397addb4e73fb6" translate="yes" xml:space="preserve">
          <source>Django provides a representation of all the basic HTML widgets, plus some commonly used groups of widgets in the &lt;code&gt;django.forms.widgets&lt;/code&gt; module, including &lt;a href=&quot;#text-widgets&quot;&gt;the input of text&lt;/a&gt;, &lt;a href=&quot;#selector-widgets&quot;&gt;various checkboxes and selectors&lt;/a&gt;, &lt;a href=&quot;#file-upload-widgets&quot;&gt;uploading files&lt;/a&gt;, and &lt;a href=&quot;#composite-widgets&quot;&gt;handling of multi-valued input&lt;/a&gt;.</source>
          <target state="translated">Django提供了所有基本HTML小部件的表示形式，以及 &lt;code&gt;django.forms.widgets&lt;/code&gt; 模块中的一些常用小部件组，包括&lt;a href=&quot;#text-widgets&quot;&gt;文本输入&lt;/a&gt;，&lt;a href=&quot;#selector-widgets&quot;&gt;各种复选框和选择器&lt;/a&gt;，&lt;a href=&quot;#file-upload-widgets&quot;&gt;上传文件&lt;/a&gt;以及&lt;a href=&quot;#composite-widgets&quot;&gt;多值输入的处理&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c13f1fcd1a6612a07e5e2d5f81fc255b7a4c3994" translate="yes" xml:space="preserve">
          <source>Django provides a rich framework to facilitate the creation of forms and the manipulation of form data.</source>
          <target state="translated">Django提供了一个丰富的框架来方便创建表单和操作表单数据。</target>
        </trans-unit>
        <trans-unit id="a91c4b0029d235b1ffc6fcf7ac24293dbc66ef69" translate="yes" xml:space="preserve">
          <source>Django provides a single API to control database transactions.</source>
          <target state="translated">Django提供了一个单一的API来控制数据库事务。</target>
        </trans-unit>
        <trans-unit id="cc4c340b55cb0d94068045413022265cafe50e6b" translate="yes" xml:space="preserve">
          <source>Django provides a small set of tools that come in handy when writing tests.</source>
          <target state="translated">Django提供了一个小工具集,在编写测试时很方便。</target>
        </trans-unit>
        <trans-unit id="203fd3530c69d681d45b9141d4b0374f388c1f5c" translate="yes" xml:space="preserve">
          <source>Django provides a solution such that the URL mapper is the only repository of the URL design. You feed it with your URLconf and then it can be used in both directions:</source>
          <target state="translated">Django提供了一个解决方案,即URL映射器是URL设计的唯一存储库。你用你的URLconf喂它,然后它可以双向使用。</target>
        </trans-unit>
        <trans-unit id="bd2ca52ded4b2ebf6286531ba385c4fc7cc04d68" translate="yes" xml:space="preserve">
          <source>Django provides a test &lt;a href=&quot;../topics/testing/tools#django.test.Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; to simulate a user interacting with the code at the view level. We can use it in &lt;code&gt;tests.py&lt;/code&gt; or even in the &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django提供了一个测试&lt;a href=&quot;../topics/testing/tools#django.test.Client&quot;&gt; &lt;code&gt;Client&lt;/code&gt; &lt;/a&gt;，以在视图级别模拟用户与代码进行交互。我们可以在 &lt;code&gt;tests.py&lt;/code&gt; 甚至&lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; 中&lt;/a&gt;使用它。</target>
        </trans-unit>
        <trans-unit id="3f42e2428b8c3625df3c569af84ecf16d26754d4" translate="yes" xml:space="preserve">
          <source>Django provides about sixty built-in template filters. You can read all about them in the &lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;built-in filter reference&lt;/a&gt;. To give you a taste of what&amp;rsquo;s available, here are some of the more commonly used template filters:</source>
          <target state="translated">Django提供了大约60种内置模板过滤器。您可以在&lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;内置过滤器参考中&lt;/a&gt;阅读有关它们的全部信息。为了让您了解可用的功能，以下是一些更常用的模板过滤器：</target>
        </trans-unit>
        <trans-unit id="6f7bd7f6928fbb5902c2c4341257511fab266880" translate="yes" xml:space="preserve">
          <source>Django provides an API in the &lt;a href=&quot;#module-django.db.transaction&quot;&gt;&lt;code&gt;django.db.transaction&lt;/code&gt;&lt;/a&gt; module to manage the autocommit state of each database connection.</source>
          <target state="translated">Django在&lt;a href=&quot;#module-django.db.transaction&quot;&gt; &lt;code&gt;django.db.transaction&lt;/code&gt; &lt;/a&gt;模块中提供了一个API，用于管理每个数据库连接的自动提交状态。</target>
        </trans-unit>
        <trans-unit id="a32767bd4d0c9fc108a948f6717476c963141f89" translate="yes" xml:space="preserve">
          <source>Django provides an abstraction layer (the &amp;ldquo;models&amp;rdquo;) for structuring and manipulating the data of your Web application. Learn more about it below:</source>
          <target state="translated">Django提供了一个抽象层（&amp;ldquo;模型&amp;rdquo;）来构造和处理Web应用程序的数据。在下面了解更多有关它的信息：</target>
        </trans-unit>
        <trans-unit id="89020375ab6678903ef78729454c331204c641c1" translate="yes" xml:space="preserve">
          <source>Django provides an integrated solution for these problems: It passes the translations into JavaScript, so you can call &lt;code&gt;gettext&lt;/code&gt;, etc., from within JavaScript.</source>
          <target state="translated">Django为这些问题提供了一个集成的解决方案：它将翻译传递到JavaScript中，因此您可以从JavaScript中调用 &lt;code&gt;gettext&lt;/code&gt; 等。</target>
        </trans-unit>
        <trans-unit id="baebd7fed17bcc93678585e187478c84d03a5462" translate="yes" xml:space="preserve">
          <source>Django provides base view classes which will suit a wide range of applications. All views inherit from the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; class, which handles linking the view into the URLs, HTTP method dispatching and other common features. &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt;&lt;code&gt;RedirectView&lt;/code&gt;&lt;/a&gt; provides a HTTP redirect, and &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; extends the base class to make it also render a template.</source>
          <target state="translated">Django提供了适合各种应用程序的基本视图类。所有视图都继承自&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;类，该类负责将视图链接到URL，HTTP方法分派和其他常见功能。&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt; &lt;code&gt;RedirectView&lt;/code&gt; &lt;/a&gt;提供了HTTP重定向，而&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;扩展了基类以使其也呈现模板。</target>
        </trans-unit>
        <trans-unit id="ebe1289f34b09e4748813c32a5f6b3074969829b" translate="yes" xml:space="preserve">
          <source>Django provides both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications.</source>
          <target state="translated">Django提供了一个低级的API用于签署值,以及一个高级的API用于设置和读取已签名的Cookie,这是Web应用中最常见的签名用途之一。</target>
        </trans-unit>
        <trans-unit id="6cb3e10cb2e4e4a3317ce648af6a268698716359" translate="yes" xml:space="preserve">
          <source>Django provides both uncompressed and &amp;lsquo;minified&amp;rsquo; versions of jQuery, as &lt;code&gt;jquery.js&lt;/code&gt; and &lt;code&gt;jquery.min.js&lt;/code&gt; respectively.</source>
          <target state="translated">Django提供未压缩版本和&amp;ldquo;最小化&amp;rdquo;版本的jQuery，分别为 &lt;code&gt;jquery.js&lt;/code&gt; 和 &lt;code&gt;jquery.min.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bcc2f13e517e50891e5b0b052a1df534f72a4144" translate="yes" xml:space="preserve">
          <source>Django provides conditional &lt;code&gt;GET&lt;/code&gt; handling via &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;django.middleware.http.ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt;. While being suitable for many situations, the middleware has limitations for advanced usage:</source>
          <target state="translated">Django 通过&lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;django.middleware.http.ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt;提供条件 &lt;code&gt;GET&lt;/code&gt; 处理。中间件虽然适用于许多情况，但对于高级用法有一些限制：</target>
        </trans-unit>
        <trans-unit id="3584ae010ba6d37b431c12353df2a6917447ee96" translate="yes" xml:space="preserve">
          <source>Django provides format definitions for many locales, but sometimes you might want to create your own, because a format files doesn&amp;rsquo;t exist for your locale, or because you want to overwrite some of the values.</source>
          <target state="translated">Django为许多语言环境提供了格式定义，但是有时您可能想要创建自己的格式，因为您的语言环境不存在格式文件，或者因为您想覆盖某些值。</target>
        </trans-unit>
        <trans-unit id="d76675761bed792ed66907e3ba908ff83a66e5d4" translate="yes" xml:space="preserve">
          <source>Django provides full support for anonymous sessions. The session framework lets you store and retrieve arbitrary data on a per-site-visitor basis. It stores data on the server side and abstracts the sending and receiving of cookies. Cookies contain a session ID &amp;ndash; not the data itself (unless you&amp;rsquo;re using the &lt;a href=&quot;#cookie-session-backend&quot;&gt;cookie based backend&lt;/a&gt;).</source>
          <target state="translated">Django为匿名会话提供全面支持。会话框架使您可以基于每个站点访问者存储和检索任意数据。它在服务器端存储数据，并抽象化cookie的发送和接收。Cookies包含一个会话ID，而不是数据本身（除非您使用的是&lt;a href=&quot;#cookie-session-backend&quot;&gt;基于cookie的后端&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d13982cecba63af89d54f4d9f5c2a4dbc337040f" translate="yes" xml:space="preserve">
          <source>Django provides help for returning HTTP error codes. There are subclasses of &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; for a number of common HTTP status codes other than 200 (which means &lt;em&gt;&amp;ldquo;OK&amp;rdquo;&lt;/em&gt;). You can find the full list of available subclasses in the &lt;a href=&quot;../../ref/request-response#ref-httpresponse-subclasses&quot;&gt;request/response&lt;/a&gt; documentation. Return an instance of one of those subclasses instead of a normal &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; in order to signify an error. For example:</source>
          <target state="translated">Django提供了有关返回HTTP错误代码的帮助。&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; 的&lt;/a&gt;子类具有许多非200的常见HTTP状态代码（表示&lt;em&gt;&amp;ldquo; OK&amp;rdquo;&lt;/em&gt;）。您可以在&lt;a href=&quot;../../ref/request-response#ref-httpresponse-subclasses&quot;&gt;请求/响应&lt;/a&gt;文档中找到可用子类的完整列表。返回这些子类之一的实例，而不是普通的&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;，以表示错误。例如：</target>
        </trans-unit>
        <trans-unit id="e7e623cd0a65fdb34ac196e0263a90a4486a5061" translate="yes" xml:space="preserve">
          <source>Django provides high-level and low-level ways to help you manage paginated data &amp;ndash; that is, data that&amp;rsquo;s split across several pages, with &amp;ldquo;Previous/Next&amp;rdquo; links.</source>
          <target state="translated">Django提供了高级和低级方法来帮助您管理分页数据，即通过&amp;ldquo;上一页/下一页&amp;rdquo;链接分为几页的数据。</target>
        </trans-unit>
        <trans-unit id="cb2a96ee010fd92e519a793895ee707755c12c9d" translate="yes" xml:space="preserve">
          <source>Django provides many &lt;a href=&quot;../ref/templates/api#context-processors&quot;&gt;built-in context processors&lt;/a&gt;, and you can implement your own additional context processors, too.</source>
          <target state="translated">Django提供了许多&lt;a href=&quot;../ref/templates/api#context-processors&quot;&gt;内置的上下文处理器&lt;/a&gt;，您也可以实现自己的其他上下文处理器。</target>
        </trans-unit>
        <trans-unit id="6b68fe178578110adf1388883f9221959ef62525" translate="yes" xml:space="preserve">
          <source>Django provides no default template for the authentication views. You should create your own templates for the views you want to use. The template context is documented in each view, see &lt;a href=&quot;#all-authentication-views&quot;&gt;All authentication views&lt;/a&gt;.</source>
          <target state="translated">Django没有为身份验证视图提供默认模板。您应该为要使用的视图创建自己的模板。模板上下文记录在每个视图中，请参阅&amp;ldquo; &lt;a href=&quot;#all-authentication-views&quot;&gt;所有身份验证视图&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d3b7ad0bf3171df5c782be59e46e7c22fd6698e" translate="yes" xml:space="preserve">
          <source>Django provides one log handler in addition to those provided by the Python logging module.</source>
          <target state="translated">除了Python日志模块提供的日志处理程序外,Django还提供了一个日志处理程序。</target>
        </trans-unit>
        <trans-unit id="f095f2ea1ba0f91831463ed7164a94160389c5ae" translate="yes" xml:space="preserve">
          <source>Django provides several &lt;a href=&quot;../ref/templates/api#template-loaders&quot;&gt;built-in template loaders&lt;/a&gt; and supports &lt;a href=&quot;../ref/templates/api#custom-template-loaders&quot;&gt;custom template loaders&lt;/a&gt;.</source>
          <target state="translated">Django提供了几种&lt;a href=&quot;../ref/templates/api#template-loaders&quot;&gt;内置的模板加载器，&lt;/a&gt;并支持&lt;a href=&quot;../ref/templates/api#custom-template-loaders&quot;&gt;自定义模板加载器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0b2892296cb76329248fedc7b71b6f5b29389d40" translate="yes" xml:space="preserve">
          <source>Django provides several built-in loggers.</source>
          <target state="translated">Django提供了几个内置的记录器。</target>
        </trans-unit>
        <trans-unit id="5b8414e1444eff8f67ea496dd791284f5622f30e" translate="yes" xml:space="preserve">
          <source>Django provides several decorators that can be applied to views to support various HTTP features.</source>
          <target state="translated">Django提供了几个可以应用于视图的装饰器,以支持各种HTTP特性。</target>
        </trans-unit>
        <trans-unit id="4530faecff10b6d2b6b88078080e7ad972c578cb" translate="yes" xml:space="preserve">
          <source>Django provides several views that you can use for handling login, logout, and password management. These make use of the &lt;a href=&quot;#built-in-auth-forms&quot;&gt;stock auth forms&lt;/a&gt; but you can pass in your own forms as well.</source>
          <target state="translated">Django提供了一些视图，可用于处理登录，注销和密码管理。这些利用了&lt;a href=&quot;#built-in-auth-forms&quot;&gt;股票身份验证表单，&lt;/a&gt;但您也可以传递自己的表单。</target>
        </trans-unit>
        <trans-unit id="11811524ae794731163bd005c4b9bed3192ed447" translate="yes" xml:space="preserve">
          <source>Django provides some GIS-specific aggregate functions. For details on how to use these aggregate functions, see &lt;a href=&quot;../../../topics/db/aggregation&quot;&gt;the topic guide on aggregation&lt;/a&gt;.</source>
          <target state="translated">Django提供了一些特定于GIS的聚合函数。有关如何使用这些聚合函数的详细信息，请参阅&lt;a href=&quot;../../../topics/db/aggregation&quot;&gt;有关聚合的主题指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64e6d540e127f68fa5d08d7f58433aecd642a4fa" translate="yes" xml:space="preserve">
          <source>Django provides some log filters in addition to those provided by the Python logging module.</source>
          <target state="translated">除了Python日志模块提供的日志过滤器外,Django还提供了一些日志过滤器。</target>
        </trans-unit>
        <trans-unit id="8e64c7491d90fba19aa2fa8d21df9cbc7d6d5fe3" translate="yes" xml:space="preserve">
          <source>Django provides support for a number of data types which will only work with PostgreSQL. There is no fundamental reason why (for example) a &lt;code&gt;contrib.mysql&lt;/code&gt; module does not exist, except that PostgreSQL has the richest feature set of the supported databases so its users have the most to gain.</source>
          <target state="translated">Django提供了对仅适用于PostgreSQL的许多数据类型的支持。没有根本的理由（例如）不存在 &lt;code&gt;contrib.mysql&lt;/code&gt; 模块，只是PostgreSQL具有受支持的数据库中功能最丰富的功能集，因此其用户受益最多。</target>
        </trans-unit>
        <trans-unit id="e1db1078c7aaafc378714b8340d34c03fc9909fa" translate="yes" xml:space="preserve">
          <source>Django provides template tags and filters to control each aspect of &lt;a href=&quot;../../topics/i18n/index&quot;&gt;internationalization&lt;/a&gt; in templates. They allow for granular control of translations, formatting, and time zone conversions.</source>
          <target state="translated">Django提供了模板标签和过滤器，以控制模板中&lt;a href=&quot;../../topics/i18n/index&quot;&gt;国际化的&lt;/a&gt;各个方面。它们允许对翻译，格式和时区转换进行精细控制。</target>
        </trans-unit>
        <trans-unit id="d05aef02eba0cd157e896f166af042311b081442" translate="yes" xml:space="preserve">
          <source>Django provides the &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; function to register callback functions that should be executed after a transaction is successfully committed:</source>
          <target state="translated">Django提供了&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;函数来注册在成功提交事务后应执行的回调函数：</target>
        </trans-unit>
        <trans-unit id="fbe76be4d505943ff7bab3112b8df33e7b8bb139" translate="yes" xml:space="preserve">
          <source>Django provides the following aggregation functions in the &lt;code&gt;django.db.models&lt;/code&gt; module. For details on how to use these aggregate functions, see &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;the topic guide on aggregation&lt;/a&gt;. See the &lt;a href=&quot;expressions#django.db.models.Aggregate&quot;&gt;&lt;code&gt;Aggregate&lt;/code&gt;&lt;/a&gt; documentation to learn how to create your aggregates.</source>
          <target state="translated">Django在 &lt;code&gt;django.db.models&lt;/code&gt; 模块中提供了以下聚合函数。有关如何使用这些聚合函数的详细信息，请参阅&lt;a href=&quot;../../topics/db/aggregation&quot;&gt;有关聚合的主题指南&lt;/a&gt;。请参阅&amp;ldquo; &lt;a href=&quot;expressions#django.db.models.Aggregate&quot;&gt; &lt;code&gt;Aggregate&lt;/code&gt; &lt;/a&gt;文档以了解如何创建聚合。</target>
        </trans-unit>
        <trans-unit id="47fe69a6c98d96a184b867c7ebb77d024f5cba3c" translate="yes" xml:space="preserve">
          <source>Django provides three built-in storage classes in &lt;a href=&quot;#module-django.contrib.messages&quot;&gt;&lt;code&gt;django.contrib.messages&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Django在&lt;a href=&quot;#module-django.contrib.messages&quot;&gt; &lt;code&gt;django.contrib.messages&lt;/code&gt; 中&lt;/a&gt;提供了三个内置的存储类：</target>
        </trans-unit>
        <trans-unit id="0b522abb77e8f87c47579c596cdd1fe68e94ed9a" translate="yes" xml:space="preserve">
          <source>Django provides tools for performing URL reversing that match the different layers where URLs are needed:</source>
          <target state="translated">Django提供了执行URL反转的工具,可以匹配不同层级需要URL的地方。</target>
        </trans-unit>
        <trans-unit id="944941e13cb778be81173f0e8fef7304972092af" translate="yes" xml:space="preserve">
          <source>Django provides two convenient ways to access the current storage class:</source>
          <target state="translated">Django提供了两种方便的方式来访问当前的存储类。</target>
        </trans-unit>
        <trans-unit id="d320699d1c44d06ae3bae26c3b9e4f2e64f45d08" translate="yes" xml:space="preserve">
          <source>Django provides two mechanisms to internationalize URL patterns:</source>
          <target state="translated">Django提供了两种国际化URL模式的机制。</target>
        </trans-unit>
        <trans-unit id="340699ff26a5116fa00f5e3dfe6144babb87f05e" translate="yes" xml:space="preserve">
          <source>Django provides two methods on a form that allow you to loop over the hidden and visible fields independently: &lt;code&gt;hidden_fields()&lt;/code&gt; and &lt;code&gt;visible_fields()&lt;/code&gt;. Here&amp;rsquo;s a modification of an earlier example that uses these two methods:</source>
          <target state="translated">Django在表单上提供了两种方法，可让您独立地 &lt;code&gt;hidden_fields()&lt;/code&gt; 隐藏字段和可见字段：hidden_​​fields（）和 &lt;code&gt;visible_fields()&lt;/code&gt; 。这是对使用这两种方法的先前示例的修改：</target>
        </trans-unit>
        <trans-unit id="18c628edefb609a4b8914442627bfa042187cdb9" translate="yes" xml:space="preserve">
          <source>Django provides two subclasses of &lt;code&gt;InlineModelAdmin&lt;/code&gt; and they are:</source>
          <target state="translated">Django提供了 &lt;code&gt;InlineModelAdmin&lt;/code&gt; 的两个子类，它们是：</target>
        </trans-unit>
        <trans-unit id="d2c1370de81fd0332b3b73e5fd59e98b5198239f" translate="yes" xml:space="preserve">
          <source>Django provides two ways to generate aggregates. The first way is to generate summary values over an entire &lt;code&gt;QuerySet&lt;/code&gt;. For example, say you wanted to calculate the average price of all books available for sale. Django&amp;rsquo;s query syntax provides a means for describing the set of all books:</source>
          <target state="translated">Django提供了两种生成聚合的方法。第一种方法是在整个 &lt;code&gt;QuerySet&lt;/code&gt; 上生成摘要值。例如，假设您要计算所有可出售书籍的平均价格。Django的查询语法提供了一种描述所有书籍集的方法：</target>
        </trans-unit>
        <trans-unit id="9f90034bc6e1c847f2b74d5ff06433691749de06" translate="yes" xml:space="preserve">
          <source>Django raises built-in Python exceptions when appropriate as well. See the Python documentation for further information on the &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&quot;&gt;Built-in Exceptions&lt;/a&gt;.</source>
          <target state="translated">Django在适当时也会引发内置的Python异常。有关&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&quot;&gt;内建异常的&lt;/a&gt;更多信息，请参见Python文档。</target>
        </trans-unit>
        <trans-unit id="aa1473355818c546b308428d597e0b5644e0ff28" translate="yes" xml:space="preserve">
          <source>Django raises some of its own exceptions as well as standard Python exceptions.</source>
          <target state="translated">Django会引发一些自己的异常以及标准的Python异常。</target>
        </trans-unit>
        <trans-unit id="dc931280e842400715a8f7987fc65cdaa1dcce93" translate="yes" xml:space="preserve">
          <source>Django registers the built-in commands and then searches for commands in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; in reverse. During the search, if a command name duplicates an already registered command, the newly discovered command overrides the first.</source>
          <target state="translated">Django注册内置命令，然后反向搜索&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;中的命令。在搜索过程中，如果命令名称与已经注册的命令重复，则新发现的命令将覆盖第一个。</target>
        </trans-unit>
        <trans-unit id="5dd7344fedd3e6a321263f87973ecb7417d5e1e9" translate="yes" xml:space="preserve">
          <source>Django requires &lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;mysqlclient&lt;/a&gt; 1.3.13 or later.</source>
          <target state="translated">Django需要&lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;mysqlclient&lt;/a&gt; 1.3.13或更高版本。</target>
        </trans-unit>
        <trans-unit id="8fd623d2467ac594b3c7a50eb786f5468c2d1503" translate="yes" xml:space="preserve">
          <source>Django runs through each URL pattern, in order, and stops at the first one that matches the requested URL, matching against &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.path_info&quot;&gt;&lt;code&gt;path_info&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django按顺序运行每个URL模式，并在与请求的URL匹配的第一个URL模式处停止，并与&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.path_info&quot;&gt; &lt;code&gt;path_info&lt;/code&gt; &lt;/a&gt;匹配。</target>
        </trans-unit>
        <trans-unit id="829c30a8fe28093e58fea553b23e9aa974b14a93" translate="yes" xml:space="preserve">
          <source>Django searches for template directories in a number of places, depending on your template loading settings (see &amp;ldquo;Loader types&amp;rdquo; below), but the most basic way of specifying template directories is by using the &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">Django在许多地方搜索模板目录，具体取决于您的模板加载设置（请参见下面的&amp;ldquo;加载程序类型&amp;rdquo;），但是指定模板目录的最基本方法是使用&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt;选项。</target>
        </trans-unit>
        <trans-unit id="aa0ee472cd6b16ff397aa72db48401303311dfb5" translate="yes" xml:space="preserve">
          <source>Django sets up a test database corresponding to every database that is defined in the &lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; definition in your settings and referred to by at least one test through &lt;code&gt;databases&lt;/code&gt;.</source>
          <target state="translated">Django会设置一个测试数据库，该&lt;a href=&quot;../../ref/settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;与您设置中DATABASES定义中定义的每个数据库相对应，并且至少有一个测试通过 &lt;code&gt;databases&lt;/code&gt; 引用。</target>
        </trans-unit>
        <trans-unit id="33b94bd6298c35ae0e9eca86e8b6159f64ee5419" translate="yes" xml:space="preserve">
          <source>Django settings</source>
          <target state="translated">Django设置</target>
        </trans-unit>
        <trans-unit id="456e01a7bcba6b0c93da961f30a4e584e674d0a8" translate="yes" xml:space="preserve">
          <source>Django ships with a &lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt;&lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt;&lt;/a&gt; class which implements basic local filesystem file storage.</source>
          <target state="translated">Django随附了&lt;a href=&quot;../ref/files/storage#django.core.files.storage.FileSystemStorage&quot;&gt; &lt;code&gt;django.core.files.storage.FileSystemStorage&lt;/code&gt; &lt;/a&gt;类，该类实现基本的本地文件系统文件存储。</target>
        </trans-unit>
        <trans-unit id="7f9fe9d496c9dce38d63612a82cbfd72a311b738" translate="yes" xml:space="preserve">
          <source>Django ships with a variety of extra, optional tools that solve common problems (&lt;code&gt;contrib.*&lt;/code&gt;). For easier maintenance and to trim the size of the codebase, a few of those applications have been moved out to separate projects.</source>
          <target state="translated">Django随附了各种额外的可选工具来解决常见问题（ &lt;code&gt;contrib.*&lt;/code&gt; ）。为了简化维护并减小代码库的大小，其中一些应用程序已移至单独的项目中。</target>
        </trans-unit>
        <trans-unit id="410b2b56049c5d642f406f6c25ee3553ceb96d3b" translate="yes" xml:space="preserve">
          <source>Django ships with about two dozen built-in template tags. You can read all about them in the &lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;built-in tag reference&lt;/a&gt;. To give you a taste of what&amp;rsquo;s available, here are some of the more commonly used tags:</source>
          <target state="translated">Django附带了大约两打内置模板标签。您可以在&lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;内置标签参考中&lt;/a&gt;阅读有关它们的全部信息。为了让您了解可用的功能，以下是一些更常用的标签：</target>
        </trans-unit>
        <trans-unit id="0cb2371b7c25122d96e086f393d5c588c9e2395d" translate="yes" xml:space="preserve">
          <source>Django ships with an easy-to-use &lt;a href=&quot;../../ref/csrf&quot;&gt;protection against Cross Site Request Forgeries&lt;/a&gt;. When submitting a form via &lt;code&gt;POST&lt;/code&gt; with CSRF protection enabled you must use the &lt;a href=&quot;../../ref/templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag as in the preceding example. However, since CSRF protection is not directly tied to forms in templates, this tag is omitted from the following examples in this document.</source>
          <target state="translated">Django随附了易于使用的&lt;a href=&quot;../../ref/csrf&quot;&gt;跨站点请求伪造保护&lt;/a&gt;。通过启用了CSRF保护的 &lt;code&gt;POST&lt;/code&gt; 提交表单时，必须像前面的示例一样使用&lt;a href=&quot;../../ref/templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt;模板标签。但是，由于CSRF保护没有直接与模板中的表单相关联，因此在本文档的以下示例中省略了此标签。</target>
        </trans-unit>
        <trans-unit id="fd45f46c98a612f8dc8b396396164415ac872c46" translate="yes" xml:space="preserve">
          <source>Django ships with dozens of built-in field types; you can find the complete list in the &lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;model field reference&lt;/a&gt;. You can easily write your own fields if Django&amp;rsquo;s built-in ones don&amp;rsquo;t do the trick; see &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="translated">Django附带了数十种内置字段类型。您可以在&lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;模型字段参考中&lt;/a&gt;找到完整列表。如果Django的内置字段不起作用，则可以轻松编写自己的字段；请参阅&lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;编写自定义模型字段&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="364f75771074e80e3e50c4c4157a132bde772ae4" translate="yes" xml:space="preserve">
          <source>Django ships with generic views to do the following:</source>
          <target state="translated">Django自带的通用视图可以实现以下功能。</target>
        </trans-unit>
        <trans-unit id="1f29bcceed31bae8388ab05612a2a8047d2c3c9c" translate="yes" xml:space="preserve">
          <source>Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can &lt;a href=&quot;#topic-custom-email-backend&quot;&gt;write your own email backend&lt;/a&gt;.</source>
          <target state="translated">Django随附了多个电子邮件发送后端。除了SMTP后端（默认设置）外，这些后端仅在测试和开发期间有用。如果您有特殊的电子邮件发送要求，则可以&lt;a href=&quot;#topic-custom-email-backend&quot;&gt;编写自己的电子邮件后端&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="531d409914a0040f724fbd9f78a6a5401443f559" translate="yes" xml:space="preserve">
          <source>Django shortcut functions</source>
          <target state="translated">Django快捷功能</target>
        </trans-unit>
        <trans-unit id="258a02ace60da0c37c63a38e0b6c7e57de46e6f7" translate="yes" xml:space="preserve">
          <source>Django should provide a function &lt;code&gt;django.shortcuts.make_toast()&lt;/code&gt; that returns &lt;code&gt;'toast'&lt;/code&gt;.</source>
          <target state="translated">Django应该提供一个函数 &lt;code&gt;django.shortcuts.make_toast()&lt;/code&gt; 返回 &lt;code&gt;'toast'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ea0bfbd077dc4bf18ca92802861bce1821dc025" translate="yes" xml:space="preserve">
          <source>Django supports &lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle Database Server&lt;/a&gt; versions 12.2 and higher. Version 6.0 or higher of the &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt; Python driver is required.</source>
          <target state="translated">Django支持&lt;a href=&quot;https://www.oracle.com/&quot;&gt;Oracle Database Server&lt;/a&gt; 12.2和更高版本。需要6.0或更高版本的&lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt; Python驱动程序。</target>
        </trans-unit>
        <trans-unit id="a610f9dc7c34e4dc5cbf7009a7a3732b40bbc6d3" translate="yes" xml:space="preserve">
          <source>Django supports MariaDB 10.1 and higher.</source>
          <target state="translated">Django支持MariaDB 10.1及以上版本。</target>
        </trans-unit>
        <trans-unit id="0b1f44d2fd17087954c6556b0112920427a6881c" translate="yes" xml:space="preserve">
          <source>Django supports MySQL 5.6 and higher.</source>
          <target state="translated">Django支持MySQL5.6及以上版本。</target>
        </trans-unit>
        <trans-unit id="c94d5d79be3679d0e14f6104436721ee7f2b1c14" translate="yes" xml:space="preserve">
          <source>Django supports PostgreSQL 9.5 and higher. &lt;a href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; 2.5.4 or higher is required, though the latest release is recommended.</source>
          <target state="translated">Django支持PostgreSQL 9.5和更高版本。&lt;a href=&quot;https://www.psycopg.org/&quot;&gt;需要psycopg2&lt;/a&gt; 2.5.4或更高版本，尽管建议使用最新版本。</target>
        </trans-unit>
        <trans-unit id="9a7435837143f0c3fc00103b8997b0cbc04e7620" translate="yes" xml:space="preserve">
          <source>Django supports SQLite 3.8.3 and later.</source>
          <target state="translated">Django支持SQLite 3.8.3及以后的版本。</target>
        </trans-unit>
        <trans-unit id="e489bcfa9f420e1c998b47004d5194a20faf9200" translate="yes" xml:space="preserve">
          <source>Django supports Unicode data everywhere.</source>
          <target state="translated">Django处处支持Unicode数据。</target>
        </trans-unit>
        <trans-unit id="f521679c1edf54471df209a63e1ada77d83984bd" translate="yes" xml:space="preserve">
          <source>Django supports a number of serialization formats, some of which require you to install third-party Python modules:</source>
          <target state="translated">Django支持多种序列化格式,其中一些需要你安装第三方Python模块。</target>
        </trans-unit>
        <trans-unit id="f8f74ffa1be0a5698bd3f7c376e9c74761ab98f5" translate="yes" xml:space="preserve">
          <source>Django supports negation, addition, subtraction, multiplication, division, modulo arithmetic, and the power operator on query expressions, using Python constants, variables, and even other expressions.</source>
          <target state="translated">Django支持否定、加、减、乘、除、模数运算,以及对查询表达式的幂运算符,使用Python常量、变量,甚至其他表达式。</target>
        </trans-unit>
        <trans-unit id="fe060dabf1b2fb59f4fc59d63303d444184f2beb" translate="yes" xml:space="preserve">
          <source>Django supports the use of addition, subtraction, multiplication, division, modulo, and power arithmetic with &lt;code&gt;F()&lt;/code&gt; objects, both with constants and with other &lt;code&gt;F()&lt;/code&gt; objects. To find all the blog entries with more than &lt;em&gt;twice&lt;/em&gt; as many comments as pingbacks, we modify the query:</source>
          <target state="translated">Django支持对 &lt;code&gt;F()&lt;/code&gt; 对象（常数和其他 &lt;code&gt;F()&lt;/code&gt; 对象）使用加，减，乘，除，取模和幂运算。要查找所有博客条目，其评论数是pingback的&lt;em&gt;两倍&lt;/em&gt;以上，我们修改查询：</target>
        </trans-unit>
        <trans-unit id="55ae8d5eff7ba3246a5c9c0b17251f54dccc547a" translate="yes" xml:space="preserve">
          <source>Django takes care of the quoting for you; the resulting SQL will look something like this:</source>
          <target state="translated">Django会帮你处理好引号,生成的SQL会像这样。</target>
        </trans-unit>
        <trans-unit id="3b4071b220737a0f26087eb6de9dab97662aed8e" translate="yes" xml:space="preserve">
          <source>Django templates &lt;a href=&quot;../ref/templates/language#automatic-html-escaping&quot;&gt;escape specific characters&lt;/a&gt; which are particularly dangerous to HTML. While this protects users from most malicious input, it is not entirely foolproof. For example, it will not protect the following:</source>
          <target state="translated">Django模板会&lt;a href=&quot;../ref/templates/language#automatic-html-escaping&quot;&gt;转义特定字符&lt;/a&gt;，这对于HTML来说尤其危险。尽管这可以保护用户免受大多数恶意输入的侵害，但这并不是绝对安全的。例如，它不会保护以下内容：</target>
        </trans-unit>
        <trans-unit id="6b4a07402b130a9b2f9e23ac2de564e70ec64e25" translate="yes" xml:space="preserve">
          <source>Django templates have an &lt;a href=&quot;../ref/templates/api#django.template.base.Origin&quot;&gt;&lt;code&gt;Origin&lt;/code&gt;&lt;/a&gt; object available through the &lt;code&gt;template.origin&lt;/code&gt; attribute. This enables debug information to be displayed in the &lt;a href=&quot;#template-postmortem&quot;&gt;template postmortem&lt;/a&gt;, as well as in 3rd-party libraries, like the &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;Django Debug Toolbar&lt;/a&gt;.</source>
          <target state="translated">Django模板具有可通过 &lt;code&gt;template.origin&lt;/code&gt; 属性使用的&lt;a href=&quot;../ref/templates/api#django.template.base.Origin&quot;&gt; &lt;code&gt;Origin&lt;/code&gt; &lt;/a&gt;对象。这使调试信息可以显示在&lt;a href=&quot;#template-postmortem&quot;&gt;模板验尸&lt;/a&gt;中以及第三方库（例如&lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar&quot;&gt;Django Debug Toolbar）中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7c82addec3ff08349c87561407a89fb2ec7931b7" translate="yes" xml:space="preserve">
          <source>Django then provides utilities to extract the translation strings into a &lt;a href=&quot;index#term-message-file&quot;&gt;message file&lt;/a&gt;. This file is a convenient way for translators to provide the equivalent of the translation strings in the target language. Once the translators have filled in the message file, it must be compiled. This process relies on the GNU gettext toolset.</source>
          <target state="translated">然后Django提供实用程序以将翻译字符串提取到&lt;a href=&quot;index#term-message-file&quot;&gt;消息文件中&lt;/a&gt;。该文件是翻译人员提供与目标语言等效的翻译字符串的便捷方式。翻译人员填写完消息文件后，必须对其进行编译。此过程依赖于GNU gettext工具集。</target>
        </trans-unit>
        <trans-unit id="0e98551210f7666c434ac21da3edbf033bb7c7e5" translate="yes" xml:space="preserve">
          <source>Django tools</source>
          <target state="translated">Django工具</target>
        </trans-unit>
        <trans-unit id="c2606e74dbf27895737aed64ebe1471c02fbbb6c" translate="yes" xml:space="preserve">
          <source>Django uses &lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt;&lt;code&gt;RegisterLookupMixin&lt;/code&gt;&lt;/a&gt; to give a class the interface to register lookups on itself. The two prominent examples are &lt;a href=&quot;fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;, the base class of all model fields, and &lt;a href=&quot;#django.db.models.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;, the base class of all Django transforms.</source>
          <target state="translated">Django使用&lt;a href=&quot;#django.db.models.lookups.RegisterLookupMixin&quot;&gt; &lt;code&gt;RegisterLookupMixin&lt;/code&gt; &lt;/a&gt;给类提供接口以在其自身上注册查询。两个突出的示例是&lt;a href=&quot;fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;（所有模型字段的基类）和&lt;a href=&quot;#django.db.models.Transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;（所有Django转换的基类）。</target>
        </trans-unit>
        <trans-unit id="4b020133fce5a78a3c62cb3e55c3a546b7844a09" translate="yes" xml:space="preserve">
          <source>Django uses &lt;a href=&quot;../http/sessions&quot;&gt;sessions&lt;/a&gt; and middleware to hook the authentication system into &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;request objects&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django使用&lt;a href=&quot;../http/sessions&quot;&gt;会话&lt;/a&gt;和中间件将身份验证系统挂接到&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;request objects&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c1bbb57f43afa18d955b69b4939855d1f5e943f8" translate="yes" xml:space="preserve">
          <source>Django uses PostgreSQL&amp;rsquo;s &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL&quot;&gt;SERIAL data type&lt;/a&gt; to store auto-incrementing primary keys. A &lt;code&gt;SERIAL&lt;/code&gt; column is populated with values from a &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createsequence.html&quot;&gt;sequence&lt;/a&gt; that keeps track of the next available value. Manually assigning a value to an auto-incrementing field doesn&amp;rsquo;t update the field&amp;rsquo;s sequence, which might later cause a conflict. For example:</source>
          <target state="translated">Django使用PostgreSQL的&lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-numeric.html#DATATYPE-SERIAL&quot;&gt;SERIAL数据类型&lt;/a&gt;存储自动递增的主键。甲 &lt;code&gt;SERIAL&lt;/code&gt; 列中填充与来自值&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createsequence.html&quot;&gt;序列&lt;/a&gt;，用于跟踪下一个可用的值的。手动将值分配给自动递增字段不会更新字段的顺序，这以后可能会引起冲突。例如：</target>
        </trans-unit>
        <trans-unit id="cc1b7de389b6a28717a6ad0640e14d1b9f7222eb" translate="yes" xml:space="preserve">
          <source>Django uses Python&amp;rsquo;s builtin &lt;a href=&quot;https://docs.python.org/3/library/logging.html#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module to perform system logging. The usage of this module is discussed in detail in Python&amp;rsquo;s own documentation. However, if you&amp;rsquo;ve never used Python&amp;rsquo;s logging framework (or even if you have), here&amp;rsquo;s a quick primer.</source>
          <target state="translated">Django使用Python的内置&lt;a href=&quot;https://docs.python.org/3/library/logging.html#module-logging&quot;&gt; &lt;code&gt;logging&lt;/code&gt; &lt;/a&gt;模块执行系统日志记录。Python自己的文档中详细讨论了该模块的用法。但是，如果您从未使用过Python的日志记录框架（即使您从未使用过），也可以快速入门。</target>
        </trans-unit>
        <trans-unit id="11e8c9fb7e6d1086b4a0a16bc606074e3aa169b0" translate="yes" xml:space="preserve">
          <source>Django uses different formats for displaying data to those it uses for parsing data. Most notably, the formats for parsing dates can&amp;rsquo;t use the &lt;code&gt;%a&lt;/code&gt; (abbreviated weekday name), &lt;code&gt;%A&lt;/code&gt; (full weekday name), &lt;code&gt;%b&lt;/code&gt; (abbreviated month name), &lt;code&gt;%B&lt;/code&gt; (full month name), or &lt;code&gt;%p&lt;/code&gt; (AM/PM).</source>
          <target state="translated">Django使用的数据显示格式与解析数据时使用的格式不同。最值得注意的是，解析日期的格式不能使用 &lt;code&gt;%a&lt;/code&gt; （工作日全名）， &lt;code&gt;%A&lt;/code&gt; （工作日全名）， &lt;code&gt;%b&lt;/code&gt; （月全名）， &lt;code&gt;%B&lt;/code&gt; （月全名）或 &lt;code&gt;%p&lt;/code&gt; （上午） /下午）。</target>
        </trans-unit>
        <trans-unit id="dee3e4e1b8a6f18127bee8cbc26a33dd27e873ec" translate="yes" xml:space="preserve">
          <source>Django uses request and response objects to pass state through the system.</source>
          <target state="translated">Django使用请求和响应对象在系统中传递状态。</target>
        </trans-unit>
        <trans-unit id="74e4b2cb8b9f7cbf98f6e94166cbaeaf7166d42e" translate="yes" xml:space="preserve">
          <source>Django uses the &lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; environment variable to locate the appropriate settings module. It must contain the dotted path to the settings module. You can use a different value for development and production; it all depends on how you organize your settings.</source>
          <target state="translated">Django使用&lt;a href=&quot;../../../topics/settings#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; &lt;/a&gt;环境变量来找到适当的设置模块。它必须包含设置模块的虚线路径。您可以将不同的值用于开发和生产。这完全取决于您如何组织设置。</target>
        </trans-unit>
        <trans-unit id="96825e21fe7eebdc64f0447ba13b15b55be158c5" translate="yes" xml:space="preserve">
          <source>Django uses the &lt;code&gt;Host&lt;/code&gt; header provided by the client to construct URLs in certain cases. While these values are sanitized to prevent Cross Site Scripting attacks, a fake &lt;code&gt;Host&lt;/code&gt; value can be used for Cross-Site Request Forgery, cache poisoning attacks, and poisoning links in emails.</source>
          <target state="translated">在某些情况下，Django使用客户端提供的 &lt;code&gt;Host&lt;/code&gt; 标头构造URL。虽然清除了这些值以防止跨站点脚本攻击，但可以将伪造的 &lt;code&gt;Host&lt;/code&gt; 值用于跨站点请求伪造，缓存中毒攻击以及电子邮件中的中毒链接。</target>
        </trans-unit>
        <trans-unit id="dfdcaf50698743fc2c62e7ab90864b970a62d950" translate="yes" xml:space="preserve">
          <source>Django uses the template loaders in order according to the &lt;code&gt;'loaders'&lt;/code&gt; option. It uses each loader until a loader finds a match.</source>
          <target state="translated">Django根据 &lt;code&gt;'loaders'&lt;/code&gt; 选项按顺序使用模板加载器。它使用每个加载程序，直到加载程序找到匹配项为止。</target>
        </trans-unit>
        <trans-unit id="13125eefa99f1a553f7321dbebbe143047447ad9" translate="yes" xml:space="preserve">
          <source>Django uses transactions or savepoints automatically to guarantee the integrity of ORM operations that require multiple queries, especially &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;delete()&lt;/a&gt; and &lt;a href=&quot;queries#topics-db-queries-update&quot;&gt;update()&lt;/a&gt; queries.</source>
          <target state="translated">Django自动使用事务或保存点来保证需要多个查询（尤其是&lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;delete（）&lt;/a&gt;和&lt;a href=&quot;queries#topics-db-queries-update&quot;&gt;update（）&lt;/a&gt;查询）的ORM操作的完整性。</target>
        </trans-unit>
        <trans-unit id="fe5d6c967da6067e8b951d118acb5d66501f04a1" translate="yes" xml:space="preserve">
          <source>Django view for the model instance addition page. See note below.</source>
          <target state="translated">模型实例添加页面的Django视图。见下面的说明。</target>
        </trans-unit>
        <trans-unit id="f1de7ea809eadd74a7127c3388dae72fcaefdf18" translate="yes" xml:space="preserve">
          <source>Django view for the model instance editing page. See note below.</source>
          <target state="translated">模型实例编辑页面的Django视图。见下面的说明。</target>
        </trans-unit>
        <trans-unit id="c5b507d34513606e3c77d80672992d6a9fbe4d85" translate="yes" xml:space="preserve">
          <source>Django view for the model instance(s) deletion confirmation page. See note below.</source>
          <target state="translated">模型实例删除确认页面的Django视图。见下面的说明。</target>
        </trans-unit>
        <trans-unit id="9bba4285700873e8482c72855cc2e15507194841" translate="yes" xml:space="preserve">
          <source>Django view for the model instances change list/actions page. See note below.</source>
          <target state="translated">模型实例变更列表/动作页面的Django视图。见下面的说明。</target>
        </trans-unit>
        <trans-unit id="05a08aba7068d7cfa268366bc4dd726cddb37ccd" translate="yes" xml:space="preserve">
          <source>Django view for the page that shows the modification history for a given model instance.</source>
          <target state="translated">Django视图用于显示给定模型实例的修改历史的页面。</target>
        </trans-unit>
        <trans-unit id="aface9e79a99d1bd6e90a2d9d86a2521fd584daa" translate="yes" xml:space="preserve">
          <source>Django was written in a newsroom environment, with a very clear separation between &amp;ldquo;content publishers&amp;rdquo; and the &amp;ldquo;public&amp;rdquo; site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content.</source>
          <target state="translated">Django是在新闻编辑室环境中编写的，&amp;ldquo;内容发布者&amp;rdquo;和&amp;ldquo;公共&amp;rdquo;网站之间有非常明显的分隔。站点管理员使用该系统添加新闻报道，事件，体育比分等，并且该内容显示在公共站点上。Django解决了为站点管理员创建统一界面来编辑内容的问题。</target>
        </trans-unit>
        <trans-unit id="c249cea2d49b123b871ddda6c0f9d9096c91012e" translate="yes" xml:space="preserve">
          <source>Django will also accept URLs (&lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;) to compressed archives with the app template files, downloading and extracting them on the fly.</source>
          <target state="translated">Django还将接受URL（ &lt;code&gt;http&lt;/code&gt; ， &lt;code&gt;https&lt;/code&gt; ， &lt;code&gt;ftp&lt;/code&gt; ）以及包含应用模板文件的压缩档案，并即时下载和提取它们。</target>
        </trans-unit>
        <trans-unit id="f34cdfbe3c704a28a71a702407979112a1698861" translate="yes" xml:space="preserve">
          <source>Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the &lt;a href=&quot;#django.db.models.ManyToManyField.through&quot;&gt;&lt;code&gt;through&lt;/code&gt;&lt;/a&gt; option to specify the Django model that represents the intermediate table that you want to use.</source>
          <target state="translated">Django会自动生成一个表来管理多对多关系。但是，如果要手动指定中间表，则可以使用&lt;a href=&quot;#django.db.models.ManyToManyField.through&quot;&gt; &lt;code&gt;through&lt;/code&gt; &lt;/a&gt;选项来指定表示要使用的中间表的Django模型。</target>
        </trans-unit>
        <trans-unit id="507919a3033980b57da5011d52afea805b15f8a9" translate="yes" xml:space="preserve">
          <source>Django will complain if you try to assign or add an object of the wrong type.</source>
          <target state="translated">如果你试图分配或添加一个错误类型的对象,Django会抱怨。</target>
        </trans-unit>
        <trans-unit id="5a5d62d27edcbee960ffc21f9af77ca8c5c6bac2" translate="yes" xml:space="preserve">
          <source>Django will load any and all fixtures it finds in these locations that match the provided fixture names.</source>
          <target state="translated">Django将加载它在这些位置找到的与所提供的夹具名称相匹配的任何和所有夹具。</target>
        </trans-unit>
        <trans-unit id="2eeeec049cc49d604124c2e230da601af1d4b644" translate="yes" xml:space="preserve">
          <source>Django will look within each of these paths for the &lt;code&gt;&amp;lt;locale_code&amp;gt;/LC_MESSAGES&lt;/code&gt; directories containing the actual translation files.</source>
          <target state="translated">Django将在每个路径中查找包含实际翻译文件的 &lt;code&gt;&amp;lt;locale_code&amp;gt;/LC_MESSAGES&lt;/code&gt; 目录。</target>
        </trans-unit>
        <trans-unit id="69c9ddb244e623af7fd8c28de3ea8b30265e013b" translate="yes" xml:space="preserve">
          <source>Django will make migrations for any change to your models or fields - even options that don&amp;rsquo;t affect the database - as the only way it can reconstruct a field correctly is to have all the changes in the history, and you might need those options in some data migrations later on (for example, if you&amp;rsquo;ve set custom validators).</source>
          <target state="translated">Django会针对您的模型或字段的任何更改（甚至是不影响数据库的选项）进行迁移，因为它可以正确地重建字段的唯一方法是在历史记录中进行所有更改，并且您可能需要稍后进行一些数据迁移（例如，如果您设置了自定义验证器）。</target>
        </trans-unit>
        <trans-unit id="ab39643216ffdee5b859edda52519f804c62de11" translate="yes" xml:space="preserve">
          <source>Django will not upgrade existing columns to include fractional seconds if the database server supports it. If you want to enable them on an existing database, it&amp;rsquo;s up to you to either manually update the column on the target database, by executing a command like:</source>
          <target state="translated">如果数据库服务器支持，Django不会将现有列升级为包括小数秒。如果要在现有数据库上启用它们，则可以通过执行以下命令来手动更新目标数据库上的列：</target>
        </trans-unit>
        <trans-unit id="69c85270deabe31c7b43879b240a74cebde092ef" translate="yes" xml:space="preserve">
          <source>Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to &lt;code&gt;save()&lt;/code&gt; a &lt;code&gt;ModelForm&lt;/code&gt; with missing fields will fail. To avoid this failure, you must instantiate your model with initial values for the missing, but required fields:</source>
          <target state="translated">Django会阻止保存不完整模型的任何尝试，因此，如果模型不允许丢失的字段为空，并且不为丢失的字段提供默认值，则任何尝试 &lt;code&gt;save()&lt;/code&gt; 带有丢失字段的 &lt;code&gt;ModelForm&lt;/code&gt; 的尝试都会失败。为避免此失败，必须使用缺少但必填字段的初始值实例化模型：</target>
        </trans-unit>
        <trans-unit id="9fbe6d99ecf16e8da28fb0ffdd1cf7b139887990" translate="yes" xml:space="preserve">
          <source>Django will raise a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.FieldError&quot;&gt;&lt;code&gt;FieldError&lt;/code&gt;&lt;/a&gt; if you override any model field in any ancestor model.</source>
          <target state="translated">如果您覆盖任何祖先模型中的任何模型字段，则Django都会引发&lt;a href=&quot;../../ref/exceptions#django.core.exceptions.FieldError&quot;&gt; &lt;code&gt;FieldError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dbcc154345ed2510bfe53ff63e8cf1858d225c6e" translate="yes" xml:space="preserve">
          <source>Django will refuse to commit or to rollback when an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block is active, because that would break atomicity.</source>
          <target state="translated">当&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;块处于活动状态时，Django将拒绝提交或回滚，因为这会破坏原子性。</target>
        </trans-unit>
        <trans-unit id="db38942103d59241f879f426cd2c0794bfc5eb1b" translate="yes" xml:space="preserve">
          <source>Django will refuse to start if &lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is not set.</source>
          <target state="translated">如果未设置&lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; ,&lt;/a&gt; Django将拒绝启动。</target>
        </trans-unit>
        <trans-unit id="4859e0fca340dbae94d83636af216965eef435bb" translate="yes" xml:space="preserve">
          <source>Django will refuse to turn autocommit off when an &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block is active, because that would break atomicity.</source>
          <target state="translated">当&lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt;块处于活动状态时，Django将拒绝关闭自动提交功能，因为这会破坏原子性。</target>
        </trans-unit>
        <trans-unit id="4be90a7594fec0dbc33baa895d7967f30e6d541e" translate="yes" xml:space="preserve">
          <source>Django will search in three locations for fixtures:</source>
          <target state="translated">Django会在三个位置搜索固定装置。</target>
        </trans-unit>
        <trans-unit id="37ae767f8ada23cc47bb26821b2df6b11cd9164c" translate="yes" xml:space="preserve">
          <source>Django will then include the extra attributes in the rendered output:</source>
          <target state="translated">Django会将额外的属性包含在渲染的输出中。</target>
        </trans-unit>
        <trans-unit id="ed5841bbce46f4f9419a7f3b8b000f957f2d23ac" translate="yes" xml:space="preserve">
          <source>Django will try to interpret every element of &lt;code&gt;list_display&lt;/code&gt; in this order:</source>
          <target state="translated">Django将尝试按以下顺序解释 &lt;code&gt;list_display&lt;/code&gt; 的每个元素：</target>
        </trans-unit>
        <trans-unit id="a2a14675af6ac7d908a6528c911cb4f15f14a729" translate="yes" xml:space="preserve">
          <source>Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters.</source>
          <target state="translated">如果没有这个优化,Django也能正常工作,但每个新的连接都会做一些额外的查询来设置这些参数。</target>
        </trans-unit>
        <trans-unit id="7b206d6c2beb156f8de4cec936ba46196f6c27ce" translate="yes" xml:space="preserve">
          <source>Django will write out the value as an instantiation of your class with the given arguments, similar to the way it writes out references to Django fields.</source>
          <target state="translated">Django会用给定的参数将值作为你的类的实例化写出来,类似于它写出对Django字段的引用的方式。</target>
        </trans-unit>
        <trans-unit id="2759ae53890b7a98975739f7ef39fb0b14e63b90" translate="yes" xml:space="preserve">
          <source>Django wraps the standard database exceptions so that your Django code has a guaranteed common implementation of these classes.</source>
          <target state="translated">Django封装了标准的数据库异常,这样你的Django代码就可以保证这些类的通用实现。</target>
        </trans-unit>
        <trans-unit id="b1799e33f80b801898b145ad03d20b706d5e108f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt;&lt;code&gt;send_mass_mail()&lt;/code&gt;&lt;/a&gt; functions are actually thin wrappers that make use of the &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">Django的&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.core.mail.send_mass_mail&quot;&gt; &lt;code&gt;send_mass_mail()&lt;/code&gt; &lt;/a&gt;函数实际上是使用&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;类的精简包装。</target>
        </trans-unit>
        <trans-unit id="e89d5a99f035a42d1b4cb7550e1b97ae200be3ca" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class is a more commonly used subclass of &lt;code&gt;TransactionTestCase&lt;/code&gt; that makes use of database transaction facilities to speed up the process of resetting the database to a known state at the beginning of each test. A consequence of this, however, is that some database behaviors cannot be tested within a Django &lt;code&gt;TestCase&lt;/code&gt; class. For instance, you cannot test that a block of code is executing within a transaction, as is required when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_for_update&quot;&gt;&lt;code&gt;select_for_update()&lt;/code&gt;&lt;/a&gt;. In those cases, you should use &lt;code&gt;TransactionTestCase&lt;/code&gt;.</source>
          <target state="translated">Django的&lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;类是 &lt;code&gt;TransactionTestCase&lt;/code&gt; 的更常用子类，它利用数据库事务工具在每次测试开始时加快将数据库重置为已知状态的过程。但是，这样做的结果是，某些数据库行为无法在Django &lt;code&gt;TestCase&lt;/code&gt; 类中进行测试。例如，您不能测试使用事务&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_for_update&quot;&gt; &lt;code&gt;select_for_update()&lt;/code&gt; &lt;/a&gt;时所需的代码块是否在事务中正在执行。在这种情况下，应使用 &lt;code&gt;TransactionTestCase&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d79ad7f6cf42b357c51ff33c8c4f0b5e46b4d87" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;admindocs&lt;/code&gt;&lt;/a&gt; app pulls documentation from the docstrings of models, views, template tags, and template filters for any app in &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; and makes that documentation available from the &lt;a href=&quot;index#module-django.contrib.admin&quot;&gt;&lt;code&gt;Django admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django的&lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt; &lt;code&gt;admindocs&lt;/code&gt; &lt;/a&gt;应用程序从&lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 中&lt;/a&gt;任何应用程序的模型，视图，模板标签和模板过滤器的文档字符串中提取文档，并从&lt;a href=&quot;index#module-django.contrib.admin&quot;&gt; &lt;code&gt;Django admin&lt;/code&gt; 中&lt;/a&gt;提供该文档。</target>
        </trans-unit>
        <trans-unit id="c15c991d80d99f5b9a1f228350167f8fdbc3f7fe" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; management command sets up a default ASGI configuration for you, which you can tweak as needed for your project, and direct any ASGI-compliant application server to use.</source>
          <target state="translated">Django的&lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt; management命令为您设置了一个默认的ASGI配置，您可以根据项目的需要对其进行调整，并指导任何符合ASGI的应用服务器使用。</target>
        </trans-unit>
        <trans-unit id="994bf05863eaac2613f0ea1f041b7a85c5d5d6a3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; management command sets up a minimal default WSGI configuration for you, which you can tweak as needed for your project, and direct any WSGI-compliant application server to use.</source>
          <target state="translated">Django的&lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt; management命令为您设置了一个最小的默认WSGI配置，您可以根据项目的需要对其进行调整，并指导任何符合WSGI的应用程序服务器使用。</target>
        </trans-unit>
        <trans-unit id="8ea79764ba28d220b09cc0a578c919ee36858cca" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;authentication framework&lt;/code&gt;&lt;/a&gt; uses it to tie user permissions to specific models.</source>
          <target state="translated">Django的&lt;a href=&quot;../../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;authentication framework&lt;/code&gt; &lt;/a&gt;使用它来将用户权限绑定到特定模型。</target>
        </trans-unit>
        <trans-unit id="5501327b4152ed104dcfc3eafa228646f92164c1" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../ref/settings#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;&lt;/a&gt; setting contains a list of finders that know how to discover static files from various sources. One of the defaults is &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; which looks for a &amp;ldquo;static&amp;rdquo; subdirectory in each of the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, like the one in &lt;code&gt;polls&lt;/code&gt; we just created. The admin site uses the same directory structure for its static files.</source>
          <target state="translated">Django的&lt;a href=&quot;../ref/settings#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt; &lt;/a&gt;设置包含一个查找器列表，这些查找器知道如何从各种来源发现静态文件。默认值之一是 &lt;code&gt;AppDirectoriesFinder&lt;/code&gt; ，它在每个&lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 中&lt;/a&gt;查找一个&amp;ldquo;静态&amp;rdquo;子目录，就像我们刚刚创建的 &lt;code&gt;polls&lt;/code&gt; 的那个一样。管理站点对其静态文件使用相同的目录结构。</target>
        </trans-unit>
        <trans-unit id="795ddb6474a20a69af41740fd9a7e5047e556521" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class also wraps each test in a transaction for performance reasons.</source>
          <target state="translated">出于性能原因，Django的&lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;类还将每个测试包装在事务中。</target>
        </trans-unit>
        <trans-unit id="5e8bdbb577636b4a2bdd4bb5d022bd93bdede080" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class wraps each test in a transaction and rolls back that transaction after each test, in order to provide test isolation. This means that no transaction is ever actually committed, thus your &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; callbacks will never be run. If you need to test the results of an &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; callback, use a &lt;a href=&quot;../testing/tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Django的&lt;a href=&quot;../testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;类将每个测试包装在一个事务中，并在每个测试后回滚该事务，以提供测试隔离。这意味着实际上没有事务被提交，因此您的&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;回调将永远不会运行。如果您需要测试&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt;回调的结果，请改用&lt;a href=&quot;../testing/tools#django.test.TransactionTestCase&quot;&gt; &lt;code&gt;TransactionTestCase&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0e815a29fe4e32e45a3cf584f461952c96a347c0" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/a&gt; template backend adds &lt;code&gt;{{ csrf_input }}&lt;/code&gt; to the context of all templates which is equivalent to &lt;code&gt;{% csrf_token %}&lt;/code&gt; in the Django template language. For example:</source>
          <target state="translated">Django的&lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt; &lt;code&gt;Jinja2&lt;/code&gt; &lt;/a&gt;模板后端将 &lt;code&gt;{{ csrf_input }}&lt;/code&gt; 到所有模板的上下文中，相当于Django模板语言中的 &lt;code&gt;{% csrf_token %}&lt;/code&gt; 。例如：</target>
        </trans-unit>
        <trans-unit id="c834e900b75917432290d52ebad384ccbf6991d8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;cache&quot;&gt;caching framework&lt;/a&gt; offers very significant opportunities for performance gains, by saving dynamic content so that it doesn&amp;rsquo;t need to be calculated for each request.</source>
          <target state="translated">Django的&lt;a href=&quot;cache&quot;&gt;缓存框架&lt;/a&gt;通过保存动态内容，因此无需为每个请求进行计算，就为提高性能提供了非常重要的机会。</target>
        </trans-unit>
        <trans-unit id="ac46317d500f8a03cbf11d8c05b66555fd03d7b8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;code&gt;get_absolute_url()&lt;/code&gt; convention is nice for getting your objects&amp;rsquo; URL without the domain name, but in some cases you might want to display the full URL &amp;ndash; with &lt;code&gt;http://&lt;/code&gt; and the domain and everything &amp;ndash; for an object. To do this, you can use the sites framework. An example:</source>
          <target state="translated">Django的 &lt;code&gt;get_absolute_url()&lt;/code&gt; 约定非常适合获取没有域名的对象的URL，但是在某些情况下，您可能希望显示对象的完整URL（包括 &lt;code&gt;http://&lt;/code&gt; 和域以及所有内容）。为此，您可以使用站点框架。一个例子：</target>
        </trans-unit>
        <trans-unit id="06e2f42b7cd7083eb3d4f27bbd9c5fd9034e7965" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;code&gt;inspectdb&lt;/code&gt; feature uses the &lt;code&gt;information_schema&lt;/code&gt; database, which contains detailed data on all database schemas.</source>
          <target state="translated">Django的 &lt;code&gt;inspectdb&lt;/code&gt; 功能使用 &lt;code&gt;information_schema&lt;/code&gt; 数据库，其中包含有关所有数据库模式的详细数据。</target>
        </trans-unit>
        <trans-unit id="38b9d130fb7255bf29868f334ba2b430052190bc" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;em&gt;generic views&lt;/em&gt; were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code.</source>
          <target state="translated">开发了Django的&lt;em&gt;通用视图&lt;/em&gt;来缓解这种痛苦。它们采用了视图开发中发现的某些常见习语和模式，并对它们进行了抽象，以便您可以快速编写数据的通用视图而不必编写过多的代码。</target>
        </trans-unit>
        <trans-unit id="cd7326a4a9f258d96327edf15b2c1c3bb1869ff3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s Time Zone</source>
          <target state="translated">Django的时区</target>
        </trans-unit>
        <trans-unit id="7e23f2e0db7a88fb2ab35f2591f30d699ef16b58" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s admin doesn&amp;rsquo;t have any explicit support for multiple databases. If you want to provide an admin interface for a model on a database other than that specified by your router chain, you&amp;rsquo;ll need to write custom &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; classes that will direct the admin to use a specific database for content.</source>
          <target state="translated">Django的管理员对多个数据库没有任何明确的支持。如果要为路由器链上未指定的模型上的模型提供管理界面，则需要编写自定义&lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;类，该类将指导管理员将特定数据库用于内容。</target>
        </trans-unit>
        <trans-unit id="462512a8d3dafad0ba0fdf29eac4dd233fb8a4a6" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s admin interface can include a complete reference of all template tags and filters available for a given site. See &lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;The Django admin documentation generator&lt;/a&gt;.</source>
          <target state="translated">Django的管理界面可以包含给定站点可用的所有模板标签和过滤器的完整参考。请参阅&lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;Django管理文档生成器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be7079be76e03d4f891dc4dc896f16cc29ee7c5b" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s authentication framework.</source>
          <target state="translated">Django的身份验证框架。</target>
        </trans-unit>
        <trans-unit id="c30c0231b27735ad55bf3eb7dc0c9161f0be1775" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in &lt;a href=&quot;default#built-in-auth-forms&quot;&gt;forms&lt;/a&gt; and &lt;a href=&quot;default#built-in-auth-views&quot;&gt;views&lt;/a&gt; make certain assumptions about the user model that they are working with.</source>
          <target state="translated">Django的内置&lt;a href=&quot;default#built-in-auth-forms&quot;&gt;表单&lt;/a&gt;和&lt;a href=&quot;default#built-in-auth-views&quot;&gt;视图&lt;/a&gt;对他们使用的用户模型做出了某些假设。</target>
        </trans-unit>
        <trans-unit id="6667b78f3d5498eb1e51da938b18e5b8029f8c6c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in class-based views provide a lot of functionality, but some of it you may want to use separately. For instance, you may want to write a view that renders a template to make the HTTP response, but you can&amp;rsquo;t use &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;; perhaps you need to render a template only on &lt;code&gt;POST&lt;/code&gt;, with &lt;code&gt;GET&lt;/code&gt; doing something else entirely. While you could use &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; directly, this will likely result in duplicate code.</source>
          <target state="translated">Django的内置基于类的视图提供了许多功能，但您可能需要单独使用其中的一些功能。例如，您可能想编写一个渲染模板的视图以进行HTTP响应，但是您不能使用&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;；也许您只需要在 &lt;code&gt;POST&lt;/code&gt; 上呈现模板，而 &lt;code&gt;GET&lt;/code&gt; 完全可以做其他事情。虽然您可以直接使用&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;，但这可能会导致代码重复。</target>
        </trans-unit>
        <trans-unit id="3351fe369c4dafda28aefabb25d378def8b5e6c2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in field types don&amp;rsquo;t cover every possible database column type &amp;ndash; only the common types, such as &lt;code&gt;VARCHAR&lt;/code&gt; and &lt;code&gt;INTEGER&lt;/code&gt;. For more obscure column types, such as geographic polygons or even user-created types such as &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtype.html&quot;&gt;PostgreSQL custom types&lt;/a&gt;, you can define your own Django &lt;code&gt;Field&lt;/code&gt; subclasses.</source>
          <target state="translated">Django的内置字段类型并不涵盖所有可能的数据库列类型，而仅涵盖常见类型，例如 &lt;code&gt;VARCHAR&lt;/code&gt; 和 &lt;code&gt;INTEGER&lt;/code&gt; 。对于更晦涩的列类型（例如地理多边形）或什至用户创建的类型（例如&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-createtype.html&quot;&gt;PostgreSQL自定义类型）&lt;/a&gt;，您可以定义自己的Django &lt;code&gt;Field&lt;/code&gt; 子类。</target>
        </trans-unit>
        <trans-unit id="8cbc91017f9715973c1de43f85f5d9a73f2e8225" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in filters have &lt;code&gt;autoescape=True&lt;/code&gt; by default in order to get the proper autoescaping behavior and avoid a cross-site script vulnerability.</source>
          <target state="translated">Django的内置过滤器默认情况下具有 &lt;code&gt;autoescape=True&lt;/code&gt; ，以获取正确的自动转义行为并避免跨站点脚本漏洞。</target>
        </trans-unit>
        <trans-unit id="d26d318f2fd9e35732c375544c3f2d36aeee5a78" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s built-in lookups are listed below. It is also possible to write &lt;a href=&quot;../../howto/custom-lookups&quot;&gt;custom lookups&lt;/a&gt; for model fields.</source>
          <target state="translated">Django的内置查询在下面列出。也可以为模型字段编写&lt;a href=&quot;../../howto/custom-lookups&quot;&gt;自定义查找&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83a2b4e1815e57ec0e068ac9705117e9c68a5a1f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s cache framework</source>
          <target state="translated">Django的缓存框架</target>
        </trans-unit>
        <trans-unit id="8b0208438688c87f01fc9957b7e09e357bb00e7e" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s database layer provides various ways to help developers get the best performance from their databases. The &lt;a href=&quot;db/optimization&quot;&gt;database optimization documentation&lt;/a&gt; gathers together links to the relevant documentation and adds various tips that outline the steps to take when attempting to optimize your database usage.</source>
          <target state="translated">Django的数据库层提供了多种方法来帮助开发人员从其数据库中获得最佳性能。该&lt;a href=&quot;db/optimization&quot;&gt;数据库优化文档&lt;/a&gt;汇聚链接到相关文件，并增加了各种技巧，大纲的步骤尝试优化数据库使用情况时服用。</target>
        </trans-unit>
        <trans-unit id="43495845a3dbc72cde0c9f49548a7d0ccf563ed2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s database layer provides various ways to help developers get the most out of their databases. This document gathers together links to the relevant documentation, and adds various tips, organized under a number of headings that outline the steps to take when attempting to optimize your database usage.</source>
          <target state="translated">Django的数据库层提供了多种方法来帮助开发人员充分利用其数据库。本文档收集了与相关文档的链接，并添加了各种技巧，这些技巧按照许多标题进行了概述，概述了尝试优化数据库使用时应采取的步骤。</target>
        </trans-unit>
        <trans-unit id="0475c07d5782ed4b2001b68d7d809a32e56ec47a" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default behavior is to run in autocommit mode. Each query is immediately committed to the database, unless a transaction is active. &lt;a href=&quot;#autocommit-details&quot;&gt;See below for details&lt;/a&gt;.</source>
          <target state="translated">Django的默认行为是在自动提交模式下运行。除非事务处于活动状态，否则每个查询都会立即提交到数据库。&lt;a href=&quot;#autocommit-details&quot;&gt;有关详细信息，请参见下文&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b8cbf3b174d1ffa16e55b47feec2bab4b713d089" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default file storage is given by the &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_FILE_STORAGE&quot;&gt;&lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt;&lt;/a&gt; setting; if you don&amp;rsquo;t explicitly provide a storage system, this is the one that will be used.</source>
          <target state="translated">Django的默认文件存储由&lt;a href=&quot;../ref/settings#std:setting-DEFAULT_FILE_STORAGE&quot;&gt; &lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; &lt;/a&gt;设置提供；如果您未明确提供存储系统，则将使用该存储系统。</target>
        </trans-unit>
        <trans-unit id="99476d04c00fd862c3aafcc3d210514bfb63bf87" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default logging configuration</source>
          <target state="translated">Django的默认日志记录配置</target>
        </trans-unit>
        <trans-unit id="2fa97b6c90915a3c003302b386b76e6031e5510b" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s default transaction behavior</source>
          <target state="translated">Django的默认交易行为</target>
        </trans-unit>
        <trans-unit id="a0edabcecfdfb4326c1402d6f616e4d2fa0593d7" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form (and model) fields support use of utility functions and classes known as validators. A validator is a callable object or function that takes a value and returns nothing if the value is valid or raises a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if not. These can be passed to a field&amp;rsquo;s constructor, via the field&amp;rsquo;s &lt;code&gt;validators&lt;/code&gt; argument, or defined on the &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class itself with the &lt;code&gt;default_validators&lt;/code&gt; attribute.</source>
          <target state="translated">Django的form（和model）字段支持使用实用程序功能和称为验证器的类。验证器是一个可调用的对象或函数，它采用一个值，如果该值有效则不返回任何值，否则返回一个&lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;。这些可以通过字段的 &lt;code&gt;validators&lt;/code&gt; 参数传递给字段的构造函数，也可以使用 &lt;code&gt;default_validators&lt;/code&gt; 属性在&lt;a href=&quot;fields#django.forms.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;类本身上定义。</target>
        </trans-unit>
        <trans-unit id="db77d8abc5a3a6967c3bb882d9fd7586a55e2353" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form functionality can simplify and automate vast portions of this work, and can also do it more securely than most programmers would be able to do in code they wrote themselves.</source>
          <target state="translated">Django的表单功能可以简化和自动化大部分工作，并且比大多数程序员在编写自己的代码中所能做到的更加安全。</target>
        </trans-unit>
        <trans-unit id="ce888d5b65df1849ab662435057511804109799e" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s form widgets are rendered using Django&amp;rsquo;s &lt;a href=&quot;../../topics/templates&quot;&gt;template engines system&lt;/a&gt;.</source>
          <target state="translated">Django的表单小部件是使用Django的&lt;a href=&quot;../../topics/templates&quot;&gt;模板引擎系统&lt;/a&gt;呈现的。</target>
        </trans-unit>
        <trans-unit id="863790eee5d2670b4a0d6b89f1145795fe22f204" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s formatting system is capable of displaying dates, times and numbers in templates using the format specified for the current &lt;a href=&quot;index#term-locale-name&quot;&gt;locale&lt;/a&gt;. It also handles localized input in forms.</source>
          <target state="translated">Django的格式化系统可以使用为当前&lt;a href=&quot;index#term-locale-name&quot;&gt;语言环境&lt;/a&gt;指定的格式在模板中显示日期，时间和数字。它还处理表单中的本地化输入。</target>
        </trans-unit>
        <trans-unit id="251ea674371562fd351a4ff63c9428379eb62098" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s generic views are built off of those base views, and were developed as a shortcut for common usage patterns such as displaying the details of an object. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself.</source>
          <target state="translated">Django的通用视图是在这些基本视图的基础上构建的，并被开发为通用用法（如显示对象的详细信息）的快捷方式。它们采用了视图开发中发现的某些常见习语和模式，并对它们进行了抽象，以便您可以快速编写数据的通用视图而不必重复自己的工作。</target>
        </trans-unit>
        <trans-unit id="f570d4bfdc4e4d59d977de0beb89aa51768a12c1" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s internationalization hooks are on by default, and that means there&amp;rsquo;s a bit of i18n-related overhead in certain places of the framework. If you don&amp;rsquo;t use internationalization, you should take the two seconds to set &lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N = False&lt;/code&gt;&lt;/a&gt; in your settings file. Then Django will make some optimizations so as not to load the internationalization machinery.</source>
          <target state="translated">Django的国际化挂钩默认情况下处于启用状态，这意味着在框架的某些位置存在一些与i18n相关的开销。如果不使用国际化，则应花两秒钟在设置文件中设置&lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt; &lt;code&gt;USE_I18N = False&lt;/code&gt; &lt;/a&gt;。然后Django将进行一些优化，以免加载国际化机制。</target>
        </trans-unit>
        <trans-unit id="95ce703bb76725592ba243d7b90ca6530d51f3e4" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s logging extensions</source>
          <target state="translated">Django的日志记录扩展</target>
        </trans-unit>
        <trans-unit id="4c6d7373d459c31ef450694489b14ceea4c53c6c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s login form is returned using the &lt;code&gt;POST&lt;/code&gt; method, in which the browser bundles up the form data, encodes it for transmission, sends it to the server, and then receives back its response.</source>
          <target state="translated">Django的登录表单是使用 &lt;code&gt;POST&lt;/code&gt; 方法返回的，其中浏览器将表单数据打包，编码以进行传输，将其发送到服务器，然后接收其响应。</target>
        </trans-unit>
        <trans-unit id="d1e32b9d45e6840e0ff22da85d1b13d24c925144" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s media upload handling poses some vulnerabilities when that media is served in ways that do not follow security best practices. Specifically, an HTML file can be uploaded as an image if that file contains a valid PNG header followed by malicious HTML. This file will pass verification of the library that Django uses for &lt;a href=&quot;../ref/models/fields#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; image processing (Pillow). When this file is subsequently displayed to a user, it may be displayed as HTML depending on the type and configuration of your web server.</source>
          <target state="translated">当以不遵循安全性最佳做法的方式提供媒体时，Django的媒体上传处理会带来一些漏洞。具体来说，如果HTML文件包含有效的PNG标头和恶意HTML，则该HTML文件可以作为图像上传。该文件将通过Django用于&lt;a href=&quot;../ref/models/fields#django.db.models.ImageField&quot;&gt; &lt;code&gt;ImageField&lt;/code&gt; &lt;/a&gt;图像处理的库的验证（枕头）。随后将该文件显示给用户时，根据您的Web服务器的类型和配置，它可能会显示为HTML。</target>
        </trans-unit>
        <trans-unit id="0407633c251ef705f61c28c08d2693776c28ec73" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s migration system is split into two parts; the logic for calculating and storing what operations should be run (&lt;code&gt;django.db.migrations&lt;/code&gt;), and the database abstraction layer that turns things like &amp;ldquo;create a model&amp;rdquo; or &amp;ldquo;delete a field&amp;rdquo; into SQL - which is the job of the &lt;code&gt;SchemaEditor&lt;/code&gt;.</source>
          <target state="translated">Django的迁移系统分为两个部分：用于计算和存储应运行的操作的逻辑（ &lt;code&gt;django.db.migrations&lt;/code&gt; ），以及将&amp;ldquo;创建模型&amp;rdquo;或&amp;ldquo;删除字段&amp;rdquo;之类的内容转换为SQL的数据库抽象层-这是 &lt;code&gt;SchemaEditor&lt;/code&gt; 的工作。</target>
        </trans-unit>
        <trans-unit id="362c6abb37eea505de938917ab50ce947d4a7060" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;django.contrib.auth.models.AnonymousUser&lt;/code&gt;&lt;/a&gt; object, allowing the backend to specify custom authorization behavior for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access.</source>
          <target state="translated">Django的权限框架没有存储匿名用户权限的地方。但是，传递给身份验证后端的用户对象可以是&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt; &lt;code&gt;django.contrib.auth.models.AnonymousUser&lt;/code&gt; &lt;/a&gt;对象，允许后端为匿名用户指定自定义授权行为。这对于可重复使用的应用程序的作者特别有用，他们可以将所有授权问题委派给auth后端，而无需进行设置（例如控制匿名访问）。</target>
        </trans-unit>
        <trans-unit id="7e3aac4afedc8a398da48052b9846fe5f1fe5f17" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return &lt;code&gt;False&lt;/code&gt; or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;user_obj&lt;/code&gt; for each object related authorization method and can return the object level permission as appropriate.</source>
          <target state="translated">Django的权限框架为对象权限奠定了基础，尽管核心没有实现。这意味着检查对象权限将始终返回 &lt;code&gt;False&lt;/code&gt; 或空白列表（取决于执行的检查）。身份验证后端将为每个与对象相关的授权方法接收关键字参数 &lt;code&gt;obj&lt;/code&gt; 和 &lt;code&gt;user_obj&lt;/code&gt; ，并且可以适当地返回对象级别权限。</target>
        </trans-unit>
        <trans-unit id="acc360c1a49ada4ffe66147b3cdee88b9e43ff8f" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s primary deployment platform is &lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/&quot;&gt;WSGI&lt;/a&gt;, the Python standard for web servers and applications.</source>
          <target state="translated">Django的主要部署平台是&lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/&quot;&gt;WSGI&lt;/a&gt;，这是Web服务器和应用程序的Python标准。</target>
        </trans-unit>
        <trans-unit id="63601f1ad840db8b2efb29625e0649a08b663687" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s querysets are protected from SQL injection since their queries are constructed using query parameterization. A query&amp;rsquo;s SQL code is defined separately from the query&amp;rsquo;s parameters. Since parameters may be user-provided and therefore unsafe, they are escaped by the underlying database driver.</source>
          <target state="translated">由于Django的查询集是使用查询参数化构造的，因此可以防止SQL注入。查询的SQL代码是与查询的参数分开定义的。由于参数可能是用户提供的，因此是不安全的，因此底层数据库驱动程序会对其进行转义。</target>
        </trans-unit>
        <trans-unit id="4591ca5ee8a8ce7333c2269b9a17b51f8da27b15" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s role in forms</source>
          <target state="translated">Django在表单中的角色</target>
        </trans-unit>
        <trans-unit id="42238be0cf582e1445e069b6343801f5e6533820" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s serialization framework provides a mechanism for &amp;ldquo;translating&amp;rdquo; Django models into other formats. Usually these other formats will be text-based and used for sending Django data over a wire, but it&amp;rsquo;s possible for a serializer to handle any format (text-based or not).</source>
          <target state="translated">Django的序列化框架提供了一种将Django模型&amp;ldquo;翻译&amp;rdquo;为其他格式的机制。通常，这些其他格式将基于文本，并用于通过电线发送Django数据，但是序列化程序可以处理任何格式（无论是否基于文本）。</target>
        </trans-unit>
        <trans-unit id="8703506b81ae70fa19e59f2770d83f1eb9e3ffa3" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s signing methods live in the &lt;code&gt;django.core.signing&lt;/code&gt; module. To sign a value, first instantiate a &lt;code&gt;Signer&lt;/code&gt; instance:</source>
          <target state="translated">Django的签名方法位于 &lt;code&gt;django.core.signing&lt;/code&gt; 模块中。要对值进行 &lt;code&gt;Signer&lt;/code&gt; ，请首先实例化Signer实例：</target>
        </trans-unit>
        <trans-unit id="53aec50e7654838c12a9c469c57de58ef443c013" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s system checks are organized using the following tags:</source>
          <target state="translated">Django的系统检查使用以下标记进行组织：</target>
        </trans-unit>
        <trans-unit id="a160f352e5f8d5b134c9dbf569e10561cda10003" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template engine provides a powerful mini-language for defining the user-facing layer of your application, encouraging a clean separation of application and presentation logic. Templates can be maintained by anyone with an understanding of HTML; no knowledge of Python is required. For introductory material, see &lt;a href=&quot;../../topics/templates&quot;&gt;Templates&lt;/a&gt; topic guide.</source>
          <target state="translated">Django的模板引擎提供了一种强大的迷你语言，用于定义应用程序的面向用户层，从而促进了应用程序和表示逻辑的清晰分离。懂HTML的任何人都可以维护模板；不需要Python的知识。有关入门资料，请参见&lt;a href=&quot;../../topics/templates&quot;&gt;模板&lt;/a&gt;主题指南。</target>
        </trans-unit>
        <trans-unit id="e19640dc6772dc6363b4a0d75bcc3ca278373e92" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language comes with a wide variety of &lt;a href=&quot;../ref/templates/builtins&quot;&gt;built-in tags and filters&lt;/a&gt; designed to address the presentation logic needs of your application. Nevertheless, you may find yourself needing functionality that is not covered by the core set of template primitives. You can extend the template engine by defining custom tags and filters using Python, and then make them available to your templates using the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">Django的模板语言带有多种&lt;a href=&quot;../ref/templates/builtins&quot;&gt;内置标签和过滤器，&lt;/a&gt;旨在满足您应用程序的表示逻辑需求。但是，您可能会发现自己需要的功能不在模板原语的核心集中。您可以通过使用Python定义自定义标签和过滤器来扩展模板引擎，然后使用&lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt; &lt;code&gt;{% load %}&lt;/code&gt; &lt;/a&gt;标签将其提供给模板。</target>
        </trans-unit>
        <trans-unit id="6b39e75e3b386c23fbff875c361b07353d376fb8" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language has no way to escape the characters used for its own syntax. For example, the &lt;a href=&quot;builtins#std:templatetag-templatetag&quot;&gt;&lt;code&gt;templatetag&lt;/code&gt;&lt;/a&gt; tag is required if you need to output character sequences like &lt;code&gt;{%&lt;/code&gt; and &lt;code&gt;%}&lt;/code&gt;.</source>
          <target state="translated">Django的模板语言无法转义用于其自身语法的字符。例如，如果您需要输出 &lt;code&gt;{%&lt;/code&gt; 和 &lt;code&gt;%}&lt;/code&gt; 之类的字符序列，则需要&lt;a href=&quot;builtins#std:templatetag-templatetag&quot;&gt; &lt;code&gt;templatetag&lt;/code&gt; &lt;/a&gt;标签。</target>
        </trans-unit>
        <trans-unit id="14555b2e3ae04bcae362be6734a260a81cd471b2" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s template language is designed to strike a balance between power and ease. It&amp;rsquo;s designed to feel comfortable to those used to working with HTML. If you have any exposure to other text-based template languages, such as &lt;a href=&quot;https://www.smarty.net/&quot;&gt;Smarty&lt;/a&gt; or &lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja2&lt;/a&gt;, you should feel right at home with Django&amp;rsquo;s templates.</source>
          <target state="translated">Django的模板语言旨在在功能和便捷之间取得平衡。它的设计使那些曾经使用HTML的人感到舒适。如果您接触过其他基于文本的模板语言（例如&lt;a href=&quot;https://www.smarty.net/&quot;&gt;Smarty&lt;/a&gt;或&lt;a href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja2）&lt;/a&gt;，则应该对Django的模板感到宾至如归。</target>
        </trans-unit>
        <trans-unit id="ad452e06fc5584f4e2b1539eb2e854800b62138c" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s translation machinery uses the standard &lt;code&gt;gettext&lt;/code&gt; module that comes with Python. If you know &lt;code&gt;gettext&lt;/code&gt;, you might note these specialties in the way Django does translation:</source>
          <target state="translated">Django的翻译机制使用Python随附的标准 &lt;code&gt;gettext&lt;/code&gt; 模块。如果您知道 &lt;code&gt;gettext&lt;/code&gt; ，那么您可能会按照Django进行翻译的方式来记下这些专业：</target>
        </trans-unit>
        <trans-unit id="65be3002faaabd9496fc535a56e83b3f0d75a1c6" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s unit tests use a Python standard library module: &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;. This module defines tests using a class-based approach.</source>
          <target state="translated">Django的单元测试使用Python标准库模块：&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;。该模块使用基于类的方法定义测试。</target>
        </trans-unit>
        <trans-unit id="4fc143fc0eda0cf077c0ed8bc159a7d57fe70378" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s user management, such as the views in &lt;code&gt;contrib.admin&lt;/code&gt; and the &lt;a href=&quot;../ref/django-admin#django-admin-createsuperuser&quot;&gt;&lt;code&gt;createsuperuser&lt;/code&gt;&lt;/a&gt; management command, doesn&amp;rsquo;t integrate with remote users. These interfaces work with users stored in the database regardless of &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;.</source>
          <target state="translated">Django的用户管理（例如 &lt;code&gt;contrib.admin&lt;/code&gt; 中的视图和&lt;a href=&quot;../ref/django-admin#django-admin-createsuperuser&quot;&gt; &lt;code&gt;createsuperuser&lt;/code&gt; &lt;/a&gt;管理命令）不与远程用户集成。这些接口可与存储在数据库中的用户一起使用，而与 &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 无关。</target>
        </trans-unit>
        <trans-unit id="f8d33492936d18c83b291c750d67dfd47e5d6706" translate="yes" xml:space="preserve">
          <source>Django, being a web framework, needs a web server in order to operate. And since most web servers don&amp;rsquo;t natively speak Python, we need an interface to make that communication happen.</source>
          <target state="translated">Django是一个网络框架，需要一台网络服务器才能运行。而且由于大多数Web服务器都不是本地语言，所以我们需要一个接口来进行通信。</target>
        </trans-unit>
        <trans-unit id="934f62e1aea889201d007374ce24f016befee47a" translate="yes" xml:space="preserve">
          <source>Django’s cache framework</source>
          <target state="translated">Django的缓存框架</target>
        </trans-unit>
        <trans-unit id="df1004360a164221004a52561cd1348571cf4ffb" translate="yes" xml:space="preserve">
          <source>Do NOT prompt the user for input of any kind.</source>
          <target state="translated">不要提示用户进行任何形式的输入。</target>
        </trans-unit>
        <trans-unit id="d858235a9d9177bc29759cd56d9c29dfa7aaf9e1" translate="yes" xml:space="preserve">
          <source>Do database work in the database rather than in Python</source>
          <target state="translated">在数据库中进行数据库工作,而不是在Python中进行。</target>
        </trans-unit>
        <trans-unit id="ec3428b70f0216459788d56a2bf4e57a021ea83d" translate="yes" xml:space="preserve">
          <source>Do everything except modify the filesystem.</source>
          <target state="translated">除了修改文件系统外,其他都要做。</target>
        </trans-unit>
        <trans-unit id="8a74368967a74b54aeea265389bca22fa5f39931" translate="yes" xml:space="preserve">
          <source>Do not call blocking synchronous functions or libraries in any async code. Django prevents you from doing this with the parts of Django that are not async-safe, but the same may not be true of third-party apps or Python libraries.</source>
          <target state="translated">不要在任何异步代码中调用阻塞的同步函数或库。Django可以防止你对Django中不具备异步安全的部分进行这样的操作,但对于第三方应用或Python库来说,可能就不是这样了。</target>
        </trans-unit>
        <trans-unit id="e006986f81b7f13767a655a42e602b79e72a8e72" translate="yes" xml:space="preserve">
          <source>Do not forget to test for the &lt;code&gt;is_active&lt;/code&gt; attribute of the user in your own backend permission methods.</source>
          <target state="translated">不要忘记在您自己的后端许可方法中测试用户的 &lt;code&gt;is_active&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="fe4580b9f0b2c4dc29c7bea0ad1d859a75195e5d" translate="yes" xml:space="preserve">
          <source>Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present.</source>
          <target state="translated">不要在一次调用中同时混合使用位置词和关键字语法。URLconf所要求的所有参数都应该存在。</target>
        </trans-unit>
        <trans-unit id="21e98a44ac336e561e6d3687d6c1ab4e4830fa35" translate="yes" xml:space="preserve">
          <source>Do this for your own sanity. Storing all templates in the root level of a single directory gets messy.</source>
          <target state="translated">为了自己的理智,这样做。将所有模板存储在单个目录的根级中会变得很乱。</target>
        </trans-unit>
        <trans-unit id="c0baec4f12b614c0b62754a64bec9c43897a3317" translate="yes" xml:space="preserve">
          <source>Do you need a &lt;code&gt;ModelAdmin&lt;/code&gt; object at all?</source>
          <target state="translated">您 &lt;code&gt;ModelAdmin&lt;/code&gt; 不需要ModelAdmin对象吗？</target>
        </trans-unit>
        <trans-unit id="a90f2006b2a268ba81790f237bfac91e8405fd2b" translate="yes" xml:space="preserve">
          <source>Document-based search</source>
          <target state="translated">基于文件的搜索</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="f754fbc2d6c8d414319d31d01fcee89191f5d416" translate="yes" xml:space="preserve">
          <source>Documentation for this page</source>
          <target state="translated">本页的文件</target>
        </trans-unit>
        <trans-unit id="99370224b715d587c92b553574529efe53c6ebb8" translate="yes" xml:space="preserve">
          <source>Documentation helpers</source>
          <target state="translated">文件助手</target>
        </trans-unit>
        <trans-unit id="d0c1a860c36aaaee3e92942f291fcaaacf4f6797" translate="yes" xml:space="preserve">
          <source>Documenting your custom field</source>
          <target state="translated">记录您的自定义字段</target>
        </trans-unit>
        <trans-unit id="2580bd626b0ae0ba7498e008f2c81fdbbc7f9673" translate="yes" xml:space="preserve">
          <source>Doing the following is potentially quite slow:</source>
          <target state="translated">做以下工作可能会相当慢。</target>
        </trans-unit>
        <trans-unit id="d4762f076dd7573f28f1168a5f133a10a062c343" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t be fooled into thinking that if your &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting is set to something other than &lt;code&gt;'utf-8'&lt;/code&gt; you can use that other encoding in your bytestrings! &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; only applies to the strings generated as the result of template rendering (and email). Django will always assume UTF-8 encoding for internal bytestrings. The reason for this is that the &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting is not actually under your control (if you are the application developer). It&amp;rsquo;s under the control of the person installing and using your application &amp;ndash; and if that person chooses a different setting, your code must still continue to work. Ergo, it cannot rely on that setting.</source>
          <target state="translated">不要误以为，如果将&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt;设置设置为 &lt;code&gt;'utf-8'&lt;/code&gt; 以外的其他值，则可以在字节串中使用该其他编码！&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt;仅适用于模板渲染（和电子邮件）结果生成的字符串。 Django将始终对内部字节串采用UTF-8编码。原因是&lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt; &lt;code&gt;DEFAULT_CHARSET&lt;/code&gt; &lt;/a&gt;设置实际上不受您控制（如果您是应用程序开发人员）。它由安装和使用您的应用程序的人控制&amp;ndash;如果该人选择其他设置，则您的代码仍必须继续工作。因此，它不能依赖该设置。</target>
        </trans-unit>
        <trans-unit id="dd837b46e4cb5b6df914ad062a51d4553c8fdeda" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The &lt;code&gt;defer()&lt;/code&gt; and &lt;code&gt;only()&lt;/code&gt; methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize.</source>
          <target state="translated">不要在不进行概要分析的情况下对字段进行太激进的操作，因为数据库必须从磁盘读取结果中的大多数非文本，非VARCHAR数据，以获取结果中的一行，即使它最终仅使用了几列也是如此。在 &lt;code&gt;defer()&lt;/code&gt; 和 &lt;code&gt;only()&lt;/code&gt; 方法时，你可以避免加载大量的文本数据或可能需要大量的处理转换回Python的领域非常有用。与往常一样，首先进行概要分析，然后进行优化。</target>
        </trans-unit>
        <trans-unit id="37d4f8a03b5d54ce0ebe33f4ce5874e1c95cd3ee" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t call the &lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt;&lt;code&gt;post_process()&lt;/code&gt;&lt;/a&gt; method of the configured &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; storage backend.</source>
          <target state="translated">不要调用已配置的&lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt;存储后端的&lt;a href=&quot;#django.contrib.staticfiles.storage.StaticFilesStorage.post_process&quot;&gt; &lt;code&gt;post_process()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="04f2777234dd12de239b6354c8139f864a2f436b" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t coerce variables into the message; use placeholders and the &lt;code&gt;params&lt;/code&gt; argument of the constructor:</source>
          <target state="translated">不要强迫变量进入消息；使用占位符和构造函数的 &lt;code&gt;params&lt;/code&gt; 参数：</target>
        </trans-unit>
        <trans-unit id="bf90a5e446cb7ac1d8d42f9a3604f7e3fe48aff9" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t filter away any results in this type of manager subclass</source>
          <target state="translated">不要过滤掉此类管理器子类中的任何结果</target>
        </trans-unit>
        <trans-unit id="1080e6ac5115215a7c4ae04338549fc4bb6ecc24" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget that a form&amp;rsquo;s output does &lt;em&gt;not&lt;/em&gt; include the surrounding &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, or the form&amp;rsquo;s &lt;code&gt;submit&lt;/code&gt; control. You will have to provide these yourself.</source>
          <target state="translated">不要忘了，一个形式的输出并&lt;em&gt;没有&lt;/em&gt;包括周围 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标签，或窗体的 &lt;code&gt;submit&lt;/code&gt; 控制。您必须自己提供这些。</target>
        </trans-unit>
        <trans-unit id="0d38ac7c0c138856285fba16e184d4c9a468c217" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to also include in &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; any hashing algorithm used in fixtures, if any.</source>
          <target state="translated">别忘了在&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; 中&lt;/a&gt;还包括用于灯具的任何哈希算法（如果有）。</target>
        </trans-unit>
        <trans-unit id="2f5f8c73c25fa365b527edc9a5116f7165a6724e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to point &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; to it. Do this before creating any migrations or running &lt;code&gt;manage.py migrate&lt;/code&gt; for the first time.</source>
          <target state="translated">不要忘记将&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;指向它。在创建任何迁移或首次运行 &lt;code&gt;manage.py migrate&lt;/code&gt; 之前，请执行此操作。</target>
        </trans-unit>
        <trans-unit id="bbe1f2a043cf6719396e432a5b929b89643ddb91" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to put quotes around the URL pattern &lt;code&gt;name&lt;/code&gt;, otherwise the value will be interpreted as a context variable!</source>
          <target state="translated">不要忘了在URL模式 &lt;code&gt;name&lt;/code&gt; 周围加上引号，否则该值将被解释为上下文变量！</target>
        </trans-unit>
        <trans-unit id="90097552d3e60614d6a41d5308c000e5db1bc750" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t ignore the common private glob-style patterns &lt;code&gt;'CVS'&lt;/code&gt;, &lt;code&gt;'.*'&lt;/code&gt; and &lt;code&gt;'*~'&lt;/code&gt;.</source>
          <target state="translated">不要忽略常见的私有glob样式模式 &lt;code&gt;'CVS'&lt;/code&gt; ， &lt;code&gt;'.*'&lt;/code&gt; 和 &lt;code&gt;'*~'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e645d3e04d11607862655540ae491b84e64b1c5e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t include a field in &lt;code&gt;radio_fields&lt;/code&gt; unless it&amp;rsquo;s a &lt;code&gt;ForeignKey&lt;/code&gt; or has &lt;code&gt;choices&lt;/code&gt; set.</source>
          <target state="translated">不要在现场 &lt;code&gt;radio_fields&lt;/code&gt; 除非它是一个 &lt;code&gt;ForeignKey&lt;/code&gt; 的或有 &lt;code&gt;choices&lt;/code&gt; 设置。</target>
        </trans-unit>
        <trans-unit id="2d2d13739ffa2f2cccadad953eef95c05fcaa3f6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t order results if you don&amp;rsquo;t care</source>
          <target state="translated">如果您不在乎，请勿订购结果</target>
        </trans-unit>
        <trans-unit id="4e04470a576f55f60d263fe4d293f22d36777c5e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t override &lt;code&gt;request.session&lt;/code&gt; with a new object, and don&amp;rsquo;t access or set its attributes. Use it like a Python dictionary.</source>
          <target state="translated">不要用新对象覆盖 &lt;code&gt;request.session&lt;/code&gt; ，也不要访问或设置其属性。像Python字典一样使用它。</target>
        </trans-unit>
        <trans-unit id="a32ee18dbc41da8dbcacf123cfc922b331780ddf" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t overuse &lt;code&gt;count()&lt;/code&gt; and &lt;code&gt;exists()&lt;/code&gt;</source>
          <target state="translated">不要过度使用 &lt;code&gt;count()&lt;/code&gt; 和 &lt;code&gt;exists()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d3bab11a7fec0a18517d185cd3f1a8c51b26c74" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t reinvent an already-existing setting.</source>
          <target state="translated">不要重新发明已经存在的设置。</target>
        </trans-unit>
        <trans-unit id="a7acff519f6c52e3a05506eb49f697f029f21dfa" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t rely on validation of the file extension to determine a file&amp;rsquo;s type. Files can be renamed to have any extension no matter what data they contain.</source>
          <target state="translated">不要依靠验证文件扩展名来确定文件的类型。无论文件包含什么数据，都可以将文件重命名为具有任何扩展名。</target>
        </trans-unit>
        <trans-unit id="011e95a05e1af4dd1169209d67a68f9568e24b66" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t retrieve things you don&amp;rsquo;t need</source>
          <target state="translated">不要找回不需要的东西</target>
        </trans-unit>
        <trans-unit id="79096f7ad978e3a224aa3b6df8877f6a1249d8e6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t try to implement your own singular-or-plural logic; it won&amp;rsquo;t be correct. In a case like this, consider something like the following:</source>
          <target state="translated">不要尝试实现自己的单数或复数逻辑；这是不正确的。在这种情况下，请考虑以下内容：</target>
        </trans-unit>
        <trans-unit id="506b22a0c66a1ec18715058b5f42651679dfb375" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t worry - the numbers are just there for developers&amp;rsquo; reference, Django just cares that each migration has a different name. Migrations specify which other migrations they depend on - including earlier migrations in the same app - in the file, so it&amp;rsquo;s possible to detect when there&amp;rsquo;s two new migrations for the same app that aren&amp;rsquo;t ordered.</source>
          <target state="translated">不用担心-数字只是供开发人员参考，Django只是在乎每个迁移都有不同的名称。迁移会在文件中指定它们所依赖的其他迁移-包括同一应用程序中的较早迁移-因此可以检测到同一应用程序何时有两个新迁移未排序。</target>
        </trans-unit>
        <trans-unit id="a56c023f45429bfc6a50ff3204b3fd583d247c9a" translate="yes" xml:space="preserve">
          <source>Dots have a special meaning in template rendering. A dot in a variable name signifies a &lt;strong&gt;lookup&lt;/strong&gt;. Specifically, when the template system encounters a dot in a variable name, it tries the following lookups, in this order:</source>
          <target state="translated">点在模板渲染中具有特殊含义。变量名称中的点表示&lt;strong&gt;查找&lt;/strong&gt;。具体来说，当模板系统遇到变量名称中的点时，它将按以下顺序尝试以下查找：</target>
        </trans-unit>
        <trans-unit id="1a17bd0d0ebe6d43d919344c0ed0bf7892398df2" translate="yes" xml:space="preserve">
          <source>Download the Django source code repository using the following command:</source>
          <target state="translated">使用以下命令下载Django源码库。</target>
        </trans-unit>
        <trans-unit id="c07cff8ea64814f9659f9257d838b13f1332774e" translate="yes" xml:space="preserve">
          <source>Download the framework packages for:</source>
          <target state="translated">下载框架包,用于:</target>
        </trans-unit>
        <trans-unit id="ce9c94ce55f4b81bf7c5ab4649a6e438d33bc2dc" translate="yes" xml:space="preserve">
          <source>Downloading a copy of Django&amp;rsquo;s development version.</source>
          <target state="translated">下载Django开发版本的副本。</target>
        </trans-unit>
        <trans-unit id="ae229acecefae48e2d586f58b60aab4716783ae0" translate="yes" xml:space="preserve">
          <source>Downstream caches</source>
          <target state="translated">下游缓存</target>
        </trans-unit>
        <trans-unit id="a04885144d1d3c7ca4889715038a442e51697122" translate="yes" xml:space="preserve">
          <source>Downstream caching is a nice efficiency boost, but there&amp;rsquo;s a danger to it: Many Web pages&amp;rsquo; contents differ based on authentication and a host of other variables, and cache systems that blindly save pages based purely on URLs could expose incorrect or sensitive data to subsequent visitors to those pages.</source>
          <target state="translated">下游缓存可以极大地提高效率，但是却存在危险：许多网页的内容基于身份验证和许多其他变量而有所不同，并且仅基于URL盲目保存页面的缓存系统可能会将错误或敏感数据暴露给后续这些页面的访问者。</target>
        </trans-unit>
        <trans-unit id="17ae1fddd2d8c6715a91a748d906239a019eb35a" translate="yes" xml:space="preserve">
          <source>Dropping the old table</source>
          <target state="translated">丢弃旧桌子</target>
        </trans-unit>
        <trans-unit id="4c9ff3ef54852685fbf9ac86adc087462ef7cbc0" translate="yes" xml:space="preserve">
          <source>Drops the model&amp;rsquo;s table in the database along with any unique constraints or indexes it has.</source>
          <target state="translated">将模型的表及其所具有的任何唯一约束或索引删除。</target>
        </trans-unit>
        <trans-unit id="0e5497096a9bb3625b3fdfb98617c05676b3ba07" translate="yes" xml:space="preserve">
          <source>Due to an &lt;a href=&quot;../databases#oracle-null-empty-strings&quot;&gt;Oracle convention&lt;/a&gt;, this function returns the empty string instead of &lt;code&gt;None&lt;/code&gt; when the expressions are of type &lt;a href=&quot;fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">根据&lt;a href=&quot;../databases#oracle-null-empty-strings&quot;&gt;Oracle的约定&lt;/a&gt;，当表达式的类型为&lt;a href=&quot;fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;时，此函数返回空字符串，而不是 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3512999ad7d2bc5d6f258859c80b387be2a3125" translate="yes" xml:space="preserve">
          <source>Due to how inheritance works, you have to set both &lt;code&gt;pk&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; to None:</source>
          <target state="translated">由于继承的工作原理，您必须将 &lt;code&gt;pk&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; 都设置为None：</target>
        </trans-unit>
        <trans-unit id="142738f166f91c02513294d697c43a5cf3c8ebac" translate="yes" xml:space="preserve">
          <source>Due to limitations of Django&amp;rsquo;s dynamic dependency feature for swappable models, the model referenced by &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; must be created in the first migration of its app (usually called &lt;code&gt;0001_initial&lt;/code&gt;); otherwise, you&amp;rsquo;ll have dependency issues.</source>
          <target state="translated">由于Django的动态依赖项功能对可交换模型的限制，必须在其应用的首次迁移（通常称为 &lt;code&gt;0001_initial&lt;/code&gt; ）中创建&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;引用的模型；否则，您将遇到依赖性问题。</target>
        </trans-unit>
        <trans-unit id="87513fd904b2b5bd40f6944839696ca0360d1f3c" translate="yes" xml:space="preserve">
          <source>Due to the requirement of running &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt;, this storage typically shouldn&amp;rsquo;t be used when running tests as &lt;code&gt;collectstatic&lt;/code&gt; isn&amp;rsquo;t run as part of the normal test setup. During testing, ensure that the &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; setting is set to something else like &lt;code&gt;'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt; (the default).</source>
          <target state="translated">由于需要运行&lt;a href=&quot;#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;，因此在运行测试时通常不应该使用此存储，因为 &lt;code&gt;collectstatic&lt;/code&gt; 没有作为正常测试设置的一部分运行。在测试期间，请确保将&lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt;设置设置为 &lt;code&gt;'django.contrib.staticfiles.storage.StaticFilesStorage'&lt;/code&gt; （默认值）之类的其他设置。</target>
        </trans-unit>
        <trans-unit id="a44740c0ae275073e9fad20647ab08194486fb6b" translate="yes" xml:space="preserve">
          <source>Due to the way &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; is implemented, you cannot use such fields directly with filters (&lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;exclude()&lt;/code&gt;, for example) via the database API. Because a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t a normal field object, these examples will &lt;em&gt;not&lt;/em&gt; work:</source>
          <target state="translated">由于&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt;的实现方式，您不能通过数据库API 将此类字段直接用于过滤器（例如 &lt;code&gt;filter()&lt;/code&gt; 和 &lt;code&gt;exclude()&lt;/code&gt; ）。由于&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt;不正常的域对象，这些例子&lt;em&gt;不&lt;/em&gt;工作：</target>
        </trans-unit>
        <trans-unit id="5f3f6be92c2e8d6e8a0a50295137151db408aed3" translate="yes" xml:space="preserve">
          <source>Due to the way &lt;code&gt;UserPassesTestMixin&lt;/code&gt; is implemented, you cannot stack them in your inheritance list. The following does NOT work:</source>
          <target state="translated">由于 &lt;code&gt;UserPassesTestMixin&lt;/code&gt; 的实现方式，您不能将它们堆叠在继承列表中。以下内容不起作用：</target>
        </trans-unit>
        <trans-unit id="5d8b9b4d3b5864b0cc136a162b00ab1fc2e1ee6d" translate="yes" xml:space="preserve">
          <source>Due to the way cookies (and hence sessions) work, &lt;strong&gt;the behavior of any backends that make use of cookies or sessions is undefined when the same client makes multiple requests that set or get messages in parallel&lt;/strong&gt;. For example, if a client initiates a request that creates a message in one window (or tab) and then another that fetches any uniterated messages in another window, before the first window redirects, the message may appear in the second window instead of the first window where it may be expected.</source>
          <target state="translated">由于cookie（以及会话）的工作方式，&lt;strong&gt;当同一客户端发出多个并行设置或获取消息的请求时，使用cookie或会话的任何后端的行为都是不确定的&lt;/strong&gt;。例如，如果客户端发起一个请求，该请求在一个窗口（或选项卡）中创建一条消息，然后在另一个窗口中获取另一个联合消息的请求，则在第一个窗口重定向之前，该消息可能会出现在第二个窗口中，而不是第一个窗口中预期的窗口。</target>
        </trans-unit>
        <trans-unit id="894217d8773bdddf4249d7092d6f81fdab57d6c3" translate="yes" xml:space="preserve">
          <source>Due to the way cookies work, &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;domain&lt;/code&gt; should be the same values you used in &lt;code&gt;set_cookie()&lt;/code&gt; &amp;ndash; otherwise the cookie may not be deleted.</source>
          <target state="translated">由于cookie的工作方式， &lt;code&gt;path&lt;/code&gt; 和 &lt;code&gt;domain&lt;/code&gt; 应与 &lt;code&gt;set_cookie()&lt;/code&gt; 中使用的值相同-否则可能不会删除cookie。</target>
        </trans-unit>
        <trans-unit id="4da407a463807c566435d7980512d91958059606" translate="yes" xml:space="preserve">
          <source>Due to the way the &lt;code&gt;gettext&lt;/code&gt; tools work internally and because we want to allow non-ASCII source strings in Django&amp;rsquo;s core and your applications, you &lt;strong&gt;must&lt;/strong&gt; use UTF-8 as the encoding for your PO files (the default when PO files are created). This means that everybody will be using the same encoding, which is important when Django processes the PO files.</source>
          <target state="translated">由于 &lt;code&gt;gettext&lt;/code&gt; 工具在内部工作的方式，并且由于我们希望在Django核心和应用程序中允许使用非ASCII源字符串，因此&lt;strong&gt;必须&lt;/strong&gt;将UTF-8用作PO文件的编码（创建PO文件时的默认设置）。这意味着每个人都将使用相同的编码，这在Django处理PO文件时非常重要。</target>
        </trans-unit>
        <trans-unit id="c946825c30a3d3b910e6a6d60b450b15937b5aa1" translate="yes" xml:space="preserve">
          <source>Dummy backend</source>
          <target state="translated">虛擬後端</target>
        </trans-unit>
        <trans-unit id="5ccde08306833310ac7bc87bd8551bf7af688470" translate="yes" xml:space="preserve">
          <source>Dummy caching (for development)</source>
          <target state="translated">虚拟缓存(用于开发</target>
        </trans-unit>
        <trans-unit id="32af6bc3a612ca0d7c5f0eefc40cd8fb9a04115c" translate="yes" xml:space="preserve">
          <source>Duplicate file names are by default resolved in a similar way to how template resolution works: the file that is first found in one of the specified locations will be used. If you&amp;rsquo;re confused, the &lt;a href=&quot;#django-admin-findstatic&quot;&gt;&lt;code&gt;findstatic&lt;/code&gt;&lt;/a&gt; command can help show you which files are found.</source>
          <target state="translated">默认情况下，重复文件名的解析方式与模板解析的工作方式类似：将使用在指定位置之一中首先找到的文件。如果您感到困惑，&lt;a href=&quot;#django-admin-findstatic&quot;&gt; &lt;code&gt;findstatic&lt;/code&gt; &lt;/a&gt;命令可以帮助您显示找到了哪些文件。</target>
        </trans-unit>
        <trans-unit id="e1b8c9c169cb26e56fb4f7bb79dbf8ffc27a2a8d" translate="yes" xml:space="preserve">
          <source>During development, if you use &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, this will be done automatically by &lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; when &lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt; (see &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.views.serve&quot;&gt;&lt;code&gt;django.contrib.staticfiles.views.serve()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">在开发过程中，如果使用&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;，则在&lt;a href=&quot;../../ref/settings#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;True&lt;/code&gt; 时，&lt;a href=&quot;../../ref/django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt;将自动完成此操作（请参阅&lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.views.serve&quot;&gt; &lt;code&gt;django.contrib.staticfiles.views.serve()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5392b98b896eef841805541091324600b40da6c7" translate="yes" xml:space="preserve">
          <source>During development, you can serve user-uploaded media files from &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; using the &lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt;&lt;code&gt;django.views.static.serve()&lt;/code&gt;&lt;/a&gt; view.</source>
          <target state="translated">在开发期间，可以使用&lt;a href=&quot;../../ref/views#django.views.static.serve&quot;&gt; &lt;code&gt;django.views.static.serve()&lt;/code&gt; &lt;/a&gt;视图从&lt;a href=&quot;../../ref/settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;提供用户上传的媒体文件。</target>
        </trans-unit>
        <trans-unit id="2e59b7fe1682b2315e1b722475fe22d4725a51e7" translate="yes" xml:space="preserve">
          <source>During development, you can turn such warnings into exceptions and get a traceback by adding the following to your settings file:</source>
          <target state="translated">在开发过程中,你可以通过在你的设置文件中添加以下内容,将这种警告转为异常,并获得回溯。</target>
        </trans-unit>
        <trans-unit id="bd2d2705a16e3544e088a53bdc1390d8dc8b7ede" translate="yes" xml:space="preserve">
          <source>During file uploads, the actual file data is stored in &lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt;. Each entry in this dictionary is an &lt;code&gt;UploadedFile&lt;/code&gt; object (or a subclass) &amp;ndash; a wrapper around an uploaded file. You&amp;rsquo;ll usually use one of these methods to access the uploaded content:</source>
          <target state="translated">在文件上载期间，实际的文件数据存储在&lt;a href=&quot;../request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; 中&lt;/a&gt;。该词典中的每个条目都是一个 &lt;code&gt;UploadedFile&lt;/code&gt; 对象（或子类）&amp;ndash;上载文件的包装器。通常，您将使用以下方法之一来访问上传的内容：</target>
        </trans-unit>
        <trans-unit id="da7f2a1d813bf08e462baf7575acbb9f73f6752a" translate="yes" xml:space="preserve">
          <source>During test running, each outgoing email is saved in &lt;code&gt;django.core.mail.outbox&lt;/code&gt;. This is a list of all &lt;a href=&quot;../email#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances that have been sent. The &lt;code&gt;outbox&lt;/code&gt; attribute is a special attribute that is created &lt;em&gt;only&lt;/em&gt; when the &lt;code&gt;locmem&lt;/code&gt; email backend is used. It doesn&amp;rsquo;t normally exist as part of the &lt;a href=&quot;../email#module-django.core.mail&quot;&gt;&lt;code&gt;django.core.mail&lt;/code&gt;&lt;/a&gt; module and you can&amp;rsquo;t import it directly. The code below shows how to access this attribute correctly.</source>
          <target state="translated">在测试运行期间，每个外发电子邮件都保存在 &lt;code&gt;django.core.mail.outbox&lt;/code&gt; 中。这是已发送的所有&lt;a href=&quot;../email#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;实例的列表。发件 &lt;code&gt;outbox&lt;/code&gt; 属性是一个特殊属性，&lt;em&gt;仅&lt;/em&gt;当使用 &lt;code&gt;locmem&lt;/code&gt; 电子邮件后端&lt;em&gt;时才&lt;/em&gt;创建。它通常不存在于&lt;a href=&quot;../email#module-django.core.mail&quot;&gt; &lt;code&gt;django.core.mail&lt;/code&gt; &lt;/a&gt;模块中，因此您不能直接将其导入。下面的代码显示了如何正确访问此属性。</target>
        </trans-unit>
        <trans-unit id="bdd123be59c168c6f3bccd21d6435ebbcbdb8509" translate="yes" xml:space="preserve">
          <source>During the request phase, before calling the view, Django applies middleware in the order it&amp;rsquo;s defined in &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;, top-down.</source>
          <target state="translated">在请求阶段，Django在调用视图之前，按照自上而下在&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 中&lt;/a&gt;定义的顺序应用中间件。</target>
        </trans-unit>
        <trans-unit id="27552287462b9c13ae08a4c4e7a6f728c36a7a43" translate="yes" xml:space="preserve">
          <source>Dynamic filtering</source>
          <target state="translated">动态过滤</target>
        </trans-unit>
        <trans-unit id="5780062daeeafdad8a39c791724757a86c83ea05" translate="yes" xml:space="preserve">
          <source>Dynamic initial values</source>
          <target state="translated">动态初始值</target>
        </trans-unit>
        <trans-unit id="801d2536d6ef9c3052bb5a78e0150cb56dea123b" translate="yes" xml:space="preserve">
          <source>EPSG code (integer or string)</source>
          <target state="translated">EPSG代码(整数或字符串)</target>
        </trans-unit>
        <trans-unit id="76ab0ace3be14b1fb28b5ed52435fd50e72a1da0" translate="yes" xml:space="preserve">
          <source>Each &amp;ldquo;reverse&amp;rdquo; operation described in this section has an immediate effect on the database. Every addition, creation and deletion is immediately and automatically saved to the database.</source>
          <target state="translated">本节中描述的每个&amp;ldquo;反向&amp;rdquo;操作都会对数据库产生直接影响。每次添加，创建和删除都会立即自动保存到数据库中。</target>
        </trans-unit>
        <trans-unit id="a5e64be2a7207ba8bef85f4ef6e7ae87d9fb7d60" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; instance provides an additional set of named URLs:</source>
          <target state="translated">每个&lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt;实例都提供了一组附加的命名URL：</target>
        </trans-unit>
        <trans-unit id="9766496e75a79e60962729490d93f126a3160185" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; instance has methods that allow you to get from a &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; instance to the model it represents, or to retrieve objects from that model:</source>
          <target state="translated">每个&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;实例都具有允许您从&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;实例获取其表示的模型或从该模型检索对象的方法：</target>
        </trans-unit>
        <trans-unit id="0c5c3367ad793a5788c176654bfbe6e35768e37f" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; contains a cache to minimize database access. Understanding how it works will allow you to write the most efficient code.</source>
          <target state="translated">每个&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 都&lt;/a&gt;包含一个缓存，以最大程度地减少对数据库的访问。了解它的工作原理将使您能够编写最有效的代码。</target>
        </trans-unit>
        <trans-unit id="3e79741c463fe87a232c3759d0079b05fc47d7af" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; gets free JavaScript shortcuts. Dates get a &amp;ldquo;Today&amp;rdquo; shortcut and calendar popup, and times get a &amp;ldquo;Now&amp;rdquo; shortcut and a convenient popup that lists commonly entered times.</source>
          <target state="translated">每个&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;都会获得免费的JavaScript快捷方式。日期具有&amp;ldquo;今天&amp;rdquo;快捷方式和日历弹出窗口，时间具有&amp;ldquo;现在&amp;rdquo;快捷方式和列出常用输入时间的便捷弹出窗口。</target>
        </trans-unit>
        <trans-unit id="8cfe157f3eaacd4d68610b1d7c765a08a2344557" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;.po&lt;/code&gt; file contains a small bit of metadata, such as the translation maintainer&amp;rsquo;s contact information, but the bulk of the file is a list of &lt;strong&gt;messages&lt;/strong&gt; &amp;ndash; mappings between translation strings and the actual translated text for the particular language.</source>
          <target state="translated">每个 &lt;code&gt;.po&lt;/code&gt; 文件都包含一小部分元数据，例如翻译维护人员的联系信息，但是该文件的大部分是&lt;strong&gt;消息&lt;/strong&gt;列表-翻译字符串与特定语言的实际翻译文本之间的映射。</target>
        </trans-unit>
        <trans-unit id="688945d75fa2e05589b1677dc42f50edd5252b98" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Author&lt;/code&gt; in the result set will have the &lt;code&gt;num_books&lt;/code&gt; and &lt;code&gt;highly_rated_books&lt;/code&gt; attributes.</source>
          <target state="translated">结果集中的每个 &lt;code&gt;Author&lt;/code&gt; 将具有 &lt;code&gt;num_books&lt;/code&gt; 和 &lt;code&gt;highly_rated_books&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="b1b89e4d6e6136b5834754f28761cb32b9b6eae7" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Field&lt;/code&gt; class constructor takes at least these arguments. Some &lt;code&gt;Field&lt;/code&gt; classes take additional, field-specific arguments, but the following should &lt;em&gt;always&lt;/em&gt; be accepted:</source>
          <target state="translated">每个 &lt;code&gt;Field&lt;/code&gt; 类构造函数都至少接受这些参数。某些 &lt;code&gt;Field&lt;/code&gt; 类采用其他特定于字段的参数，但&lt;em&gt;始终&lt;/em&gt;应接受以下内容：</target>
        </trans-unit>
        <trans-unit id="2d00d418aed53bd6ea62d464212bccc3ae807a67" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;kind&lt;/code&gt; above has a corresponding &lt;code&gt;Trunc&lt;/code&gt; subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use &lt;code&gt;TruncYear(...)&lt;/code&gt; rather than &lt;code&gt;Trunc(..., kind='year')&lt;/code&gt;.</source>
          <target state="translated">上面的每种 &lt;code&gt;kind&lt;/code&gt; 都有一个对应的 &lt;code&gt;Trunc&lt;/code&gt; 子类（在下面列出），通常应使用它而不是更冗长的等效类，例如，使用 &lt;code&gt;TruncYear(...)&lt;/code&gt; 而不是 &lt;code&gt;Trunc(..., kind='year')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3c685b6fd9d85172ad5a1c165c29c7caf685f8b" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;lookup_name&lt;/code&gt; above has a corresponding &lt;code&gt;Extract&lt;/code&gt; subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use &lt;code&gt;ExtractYear(...)&lt;/code&gt; rather than &lt;code&gt;Extract(..., lookup_name='year')&lt;/code&gt;.</source>
          <target state="translated">上面的每个 &lt;code&gt;lookup_name&lt;/code&gt; 都有一个对应的 &lt;code&gt;Extract&lt;/code&gt; 子类（下面列出），通常应使用它而不是更冗长的等效子类，例如，使用 &lt;code&gt;ExtractYear(...)&lt;/code&gt; 而不是 &lt;code&gt;Extract(..., lookup_name='year')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad79a172be1b33a602d540b88bbf8ca154c77ebf" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;order_by()&lt;/code&gt; call will clear any previous ordering. For example, this query will be ordered by &lt;code&gt;pub_date&lt;/code&gt; and not &lt;code&gt;headline&lt;/code&gt;:</source>
          <target state="translated">每个 &lt;code&gt;order_by()&lt;/code&gt; 调用都会清除以前的所有顺序。例如，此查询将按 &lt;code&gt;pub_date&lt;/code&gt; 而不是 &lt;code&gt;headline&lt;/code&gt; 进行排序：</target>
        </trans-unit>
        <trans-unit id="e2f4d9f2b9b74db4b6d827c55fdf5161198d932b" translate="yes" xml:space="preserve">
          <source>Each URL in your site has a separate entry in the &lt;code&gt;admindocs&lt;/code&gt; page, and clicking on a given URL will show you the corresponding view. Helpful things you can document in your view function docstrings include:</source>
          <target state="translated">您网站中的每个URL在 &lt;code&gt;admindocs&lt;/code&gt; 页面中都有一个单独的条目，单击给定的URL将显示相应的视图。您可以在视图函数文档字符串中记录的有用内容包括：</target>
        </trans-unit>
        <trans-unit id="c8a281ad456c737111458e2c94f5436d80b055ba" translate="yes" xml:space="preserve">
          <source>Each application you write in Django consists of a Python package that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories.</source>
          <target state="translated">你在Django中写的每一个应用程序都是由一个遵循一定约定的Python包组成的。Django自带的实用工具可以自动生成应用程序的基本目录结构,因此你可以专注于编写代码而不是创建目录。</target>
        </trans-unit>
        <trans-unit id="aa4fd7bf7f5007d16f79d0ae47e2a803fc1e4720" translate="yes" xml:space="preserve">
          <source>Each argument to &lt;code&gt;annotate()&lt;/code&gt; is an annotation that will be added to each object in the &lt;code&gt;QuerySet&lt;/code&gt; that is returned.</source>
          <target state="translated">&lt;code&gt;annotate()&lt;/code&gt; 的每个参数都是一个注释，它将添加到返回的 &lt;code&gt;QuerySet&lt;/code&gt; 中的每个对象中。</target>
        </trans-unit>
        <trans-unit id="85fb851c67a013ae1f0822c2b2bb9a798a089842" translate="yes" xml:space="preserve">
          <source>Each attribute of the model represents a database field.</source>
          <target state="translated">模型的每个属性代表一个数据库字段。</target>
        </trans-unit>
        <trans-unit id="f57bfa2bd48cf413a7c116a20f197643ad588956" translate="yes" xml:space="preserve">
          <source>Each cache backend can be given additional arguments to control caching behavior. These arguments are provided as additional keys in the &lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt;&lt;code&gt;CACHES&lt;/code&gt;&lt;/a&gt; setting. Valid arguments are as follows:</source>
          <target state="translated">可以为每个缓存后端提供其他参数来控制缓存行为。这些参数在&lt;a href=&quot;../ref/settings#std:setting-CACHES&quot;&gt; &lt;code&gt;CACHES&lt;/code&gt; &lt;/a&gt;设置中作为附加键提供。有效参数如下：</target>
        </trans-unit>
        <trans-unit id="620f46e8c01f87612d6d23b7db50f9b485fd19e8" translate="yes" xml:space="preserve">
          <source>Each captured argument is sent to the view as a string, regardless of what sort of match the regular expression makes.</source>
          <target state="translated">无论正则表达式进行何种匹配,每个捕获的参数都会作为一个字符串发送到视图中。</target>
        </trans-unit>
        <trans-unit id="539ffdd55f9eedf7d87d2c22a18246e642f1b360" translate="yes" xml:space="preserve">
          <source>Each database backend in Django supplies its own version of &lt;code&gt;SchemaEditor&lt;/code&gt;, and it&amp;rsquo;s always accessible via the &lt;code&gt;connection.schema_editor()&lt;/code&gt; context manager:</source>
          <target state="translated">Django中的每个数据库后端都提供其自己的 &lt;code&gt;SchemaEditor&lt;/code&gt; 版本，并且始终可以通过 &lt;code&gt;connection.schema_editor()&lt;/code&gt; 上下文管理器进行访问：</target>
        </trans-unit>
        <trans-unit id="c6cb49419d1db840c199e9fa3db903485963c747" translate="yes" xml:space="preserve">
          <source>Each field in a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class is responsible not only for validating data, but also for &amp;ldquo;cleaning&amp;rdquo; it &amp;ndash; normalizing it to a consistent format. This is a nice feature, because it allows data for a particular field to be input in a variety of ways, always resulting in consistent output.</source>
          <target state="translated">&lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt;类中的每个字段不仅负责验证数据，还负责&amp;ldquo;清理&amp;rdquo;数据-将其标准化为一致的格式。这是一个很好的功能，因为它允许以多种方式输入特定字段的数据，从而始终产生一致的输出。</target>
        </trans-unit>
        <trans-unit id="0ac8b93180f13debf16addf1647f7b56fb43e61d" translate="yes" xml:space="preserve">
          <source>Each field in your model should be an instance of the appropriate &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class. Django uses the field class types to determine a few things:</source>
          <target state="translated">模型中的每个字段都应该是适当的&lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;类的实例。Django使用字段类类型来确定一些事项：</target>
        </trans-unit>
        <trans-unit id="97f07afff761bf72cc77ab8683a688a6a291a54c" translate="yes" xml:space="preserve">
          <source>Each field is represented by an instance of a &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; class &amp;ndash; e.g., &lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for character fields and &lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; for datetimes. This tells Django what type of data each field holds.</source>
          <target state="translated">每个字段都由&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;类的实例表示&amp;ndash;例如，&lt;a href=&quot;../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;用于字符字段，&lt;a href=&quot;../ref/models/fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;用于日期时间。这告诉Django每个字段保存什么类型的数据。</target>
        </trans-unit>
        <trans-unit id="c095429de58ab9d3299f78866a6b060ccb94caed" translate="yes" xml:space="preserve">
          <source>Each field of the object is serialized as a &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt;-element sporting the fields &amp;ldquo;type&amp;rdquo; and &amp;ldquo;name&amp;rdquo;. The text content of the element represents the value that should be stored.</source>
          <target state="translated">对象的每个字段都序列化为 &lt;code&gt;&amp;lt;field&amp;gt;&lt;/code&gt; -元素，使用字段&amp;ldquo; type&amp;rdquo;和&amp;ldquo; name&amp;rdquo;。元素的文本内容表示应存储的值。</target>
        </trans-unit>
        <trans-unit id="1972c5dd0646867610014d61e83a3b0c8961cba4" translate="yes" xml:space="preserve">
          <source>Each field takes a certain set of field-specific arguments (documented in the &lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;model field reference&lt;/a&gt;). For example, &lt;a href=&quot;../../ref/models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; (and its subclasses) require a &lt;a href=&quot;../../ref/models/fields#django.db.models.CharField.max_length&quot;&gt;&lt;code&gt;max_length&lt;/code&gt;&lt;/a&gt; argument which specifies the size of the &lt;code&gt;VARCHAR&lt;/code&gt; database field used to store the data.</source>
          <target state="translated">每个字段采用一组特定于字段的参数（在&lt;a href=&quot;../../ref/models/fields#model-field-types&quot;&gt;模型字段参考中记录&lt;/a&gt;）。例如，&lt;a href=&quot;../../ref/models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;（及其子类）需要一个&lt;a href=&quot;../../ref/models/fields#django.db.models.CharField.max_length&quot;&gt; &lt;code&gt;max_length&lt;/code&gt; &lt;/a&gt;参数，该参数指定用于存储数据的 &lt;code&gt;VARCHAR&lt;/code&gt; 数据库字段的大小。</target>
        </trans-unit>
        <trans-unit id="c137305d95c771e8e629f2933ba68157919aa2c8" translate="yes" xml:space="preserve">
          <source>Each field type has a default HTML representation. &lt;code&gt;CharField&lt;/code&gt; is represented by an &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;EmailField&lt;/code&gt; by an &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt;. &lt;code&gt;BooleanField&lt;/code&gt; is represented by an &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;. Note these are merely sensible defaults; you can specify which HTML to use for a given field by using widgets, which we&amp;rsquo;ll explain shortly.</source>
          <target state="translated">每个字段类型都有一个默认的HTML表示形式。 &lt;code&gt;CharField&lt;/code&gt; 由 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 而 &lt;code&gt;EmailField&lt;/code&gt; 由 &lt;code&gt;&amp;lt;input type=&quot;email&quot;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;BooleanField&lt;/code&gt; 由 &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; 。注意，这些仅仅是明智的默认设置。您可以使用小部件指定用于给定字段的HTML，我们将在稍后对此进行说明。</target>
        </trans-unit>
        <trans-unit id="e14f18351eaa233804a5daef45c4b94975f5efbf" translate="yes" xml:space="preserve">
          <source>Each field type, except for &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;, takes an optional first positional argument &amp;ndash; a verbose name. If the verbose name isn&amp;rsquo;t given, Django will automatically create it using the field&amp;rsquo;s attribute name, converting underscores to spaces.</source>
          <target state="translated">除&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;之外，每种字段类型都采用可选的第一个位置参数&amp;ndash;详细名称。如果未提供详细名称，则Django将使用字段的属性名称自动创建，将下划线转换为空格。</target>
        </trans-unit>
        <trans-unit id="859598c7310b1f5089ed2f6873b65f573d112539" translate="yes" xml:space="preserve">
          <source>Each form field has a corresponding &lt;a href=&quot;../../ref/forms/widgets&quot;&gt;Widget class&lt;/a&gt;, which in turn corresponds to an HTML form widget such as &lt;code&gt;&amp;lt;input
type=&quot;text&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">每个表单字段都有一个对应的&lt;a href=&quot;../../ref/forms/widgets&quot;&gt;Widget类&lt;/a&gt;，该类又对应于HTML表单窗口小部件，例如 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b0612a3e32277f65135ad8c4897584ec5ca41024" translate="yes" xml:space="preserve">
          <source>Each formset&amp;rsquo;s &lt;a href=&quot;#formset-prefix&quot;&gt;prefix&lt;/a&gt; replaces the default &lt;code&gt;form&lt;/code&gt; prefix that&amp;rsquo;s added to each field&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; HTML attributes.</source>
          <target state="translated">每个 &lt;code&gt;form&lt;/code&gt; 的&lt;a href=&quot;#formset-prefix&quot;&gt;前缀&lt;/a&gt;将替换添加到每个字段的 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; HTML属性的默认表单前缀。</target>
        </trans-unit>
        <trans-unit id="fff5391512c038f2b4e64d54c07e48105bfce7c4" translate="yes" xml:space="preserve">
          <source>Each generic view needs to know what model it will be acting upon. This is provided using the &lt;code&gt;model&lt;/code&gt; attribute.</source>
          <target state="translated">每个通用视图都需要知道它将作用于什么模型。这是使用 &lt;code&gt;model&lt;/code&gt; 属性提供的。</target>
        </trans-unit>
        <trans-unit id="1131db22fb2a7190b5ce4af70c7cfe02840ab48d" translate="yes" xml:space="preserve">
          <source>Each header is only added if it isn&amp;rsquo;t already set.</source>
          <target state="translated">仅在尚未设置每个标头的情况下才添加它们。</target>
        </trans-unit>
        <trans-unit id="38d5627e4e0ba8d9b21de91076af41f922be934d" translate="yes" xml:space="preserve">
          <source>Each instance of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; has two fields which, taken together, uniquely describe an installed model:</source>
          <target state="translated">每个&lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt; &lt;code&gt;ContentType&lt;/code&gt; &lt;/a&gt;实例都有两个字段，它们共同描述了一个已安装的模型：</target>
        </trans-unit>
        <trans-unit id="2e96f75a376fb76c4502355beb0c1ad3d49d0b65" translate="yes" xml:space="preserve">
          <source>Each item in the list should be a tuple of (Full name, email address). Example:</source>
          <target state="translated">列表中的每个项目应该是一个元组(全名,电子邮件地址)。例如:</target>
        </trans-unit>
        <trans-unit id="6dd106fb7a577fb1382f2aa83a3ef60687cff619" translate="yes" xml:space="preserve">
          <source>Each key in the &lt;code&gt;world_mapping&lt;/code&gt; dictionary corresponds to a field in the &lt;code&gt;WorldBorder&lt;/code&gt; model. The value is the name of the shapefile field that data will be loaded from.</source>
          <target state="translated">&lt;code&gt;world_mapping&lt;/code&gt; 词典中的每个键都对应于 &lt;code&gt;WorldBorder&lt;/code&gt; 模型中的一个字段。该值是将从中加载数据的shapefile字段的名称。</target>
        </trans-unit>
        <trans-unit id="d36d465283db1a2bb444e69b1af68bb008deada9" translate="yes" xml:space="preserve">
          <source>Each lookup function that takes keyword-arguments (e.g. &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;) can also be passed one or more &lt;code&gt;Q&lt;/code&gt; objects as positional (not-named) arguments. If you provide multiple &lt;code&gt;Q&lt;/code&gt; object arguments to a lookup function, the arguments will be &amp;ldquo;AND&amp;rdquo;ed together. For example:</source>
          <target state="translated">每个采用关键字参数（例如&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;）的查找函数也可以传递一个或多个 &lt;code&gt;Q&lt;/code&gt; 对象作为位置（未命名）参数。如果为查找函数提供多个 &lt;code&gt;Q&lt;/code&gt; 对象参数，则这些参数将&amp;ldquo;与&amp;rdquo;在一起。例如：</target>
        </trans-unit>
        <trans-unit id="fa8404429a25ac913e8d1c1a59d0ca04f9086cfa" translate="yes" xml:space="preserve">
          <source>Each message that is written to the logger is a &lt;em&gt;Log Record&lt;/em&gt;. Each log record also has a &lt;em&gt;log level&lt;/em&gt; indicating the severity of that specific message. A log record can also contain useful metadata that describes the event that is being logged. This can include details such as a stack trace or an error code.</source>
          <target state="translated">写入记录器的每条消息都是一个&lt;em&gt;日志记录&lt;/em&gt;。每个日志记录还具有指示该特定消息的严重性的&lt;em&gt;日志级别&lt;/em&gt;。日志记录还可以包含有用的元数据，用于描述正在记录的事件。这可以包括详细信息，例如堆栈跟踪或错误代码。</target>
        </trans-unit>
        <trans-unit id="41accbc06c8ee59bb922ed8ceb6e0b56fe9da1ac" translate="yes" xml:space="preserve">
          <source>Each middleware component is responsible for doing some specific function. For example, Django includes a middleware component, &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt;, that associates users with requests using sessions.</source>
          <target state="translated">每个中间件组件负责执行某些特定功能。例如，Django包括一个中间件组件&lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt;，该组件将用户与使用会话的请求相关联。</target>
        </trans-unit>
        <trans-unit id="1829ba4bd042fd766754294e83af9afe6753b6ff" translate="yes" xml:space="preserve">
          <source>Each model field has a corresponding default form field. For example, a &lt;code&gt;CharField&lt;/code&gt; on a model is represented as a &lt;code&gt;CharField&lt;/code&gt; on a form. A model &lt;code&gt;ManyToManyField&lt;/code&gt; is represented as a &lt;code&gt;MultipleChoiceField&lt;/code&gt;. Here is the full list of conversions:</source>
          <target state="translated">每个模型字段都有一个对应的默认表单字段。例如，一个 &lt;code&gt;CharField&lt;/code&gt; 上的模型被表示为 &lt;code&gt;CharField&lt;/code&gt; 窗体上。模型 &lt;code&gt;ManyToManyField&lt;/code&gt; 表示为 &lt;code&gt;MultipleChoiceField&lt;/code&gt; 。以下是转换的完整列表：</target>
        </trans-unit>
        <trans-unit id="91b5ae9254e2ac5afa0c4eaff5d5f2d60936c9ed" translate="yes" xml:space="preserve">
          <source>Each model is a Python class that subclasses &lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt;&lt;code&gt;django.db.models.Model&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">每个模型都是一个python类，该类&lt;a href=&quot;../../ref/models/instances#django.db.models.Model&quot;&gt; &lt;code&gt;django.db.models.Model&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="03a511e1bc7ba6f7d581f711a0805128b922cdc6" translate="yes" xml:space="preserve">
          <source>Each model is a dict with the following keys:</source>
          <target state="translated">每个模型都是一个带有以下键的dict。</target>
        </trans-unit>
        <trans-unit id="ef0f53c1fe432c399d62918a936d1408900beccd" translate="yes" xml:space="preserve">
          <source>Each model requires exactly one field to have &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key=True&lt;/code&gt;&lt;/a&gt; (either explicitly declared or automatically added).</source>
          <target state="translated">每个模型只需要一个字段就具有&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key=True&lt;/code&gt; &lt;/a&gt;（显式声明或自动添加）。</target>
        </trans-unit>
        <trans-unit id="3b5e96572b7a649638e0790b74b3d829e4140c62" translate="yes" xml:space="preserve">
          <source>Each model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method isn&amp;rsquo;t called, and the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals aren&amp;rsquo;t sent.</source>
          <target state="translated">不会调用每个模型的 &lt;code&gt;save()&lt;/code&gt; 方法，并且不会发送&lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt;信号。</target>
        </trans-unit>
        <trans-unit id="a86ca17597a0c77ac19ec2049f0d08f2cf163a3b" translate="yes" xml:space="preserve">
          <source>Each non-abstract &lt;a href=&quot;instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; class must have a &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance added to it. Django ensures that in your model class you have at least a default &lt;code&gt;Manager&lt;/code&gt; specified. If you don&amp;rsquo;t add your own &lt;code&gt;Manager&lt;/code&gt;, Django will add an attribute &lt;code&gt;objects&lt;/code&gt; containing default &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance. If you add your own &lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; instance attribute, the default one does not appear. Consider the following example:</source>
          <target state="translated">每个非抽象&lt;a href=&quot;instances#django.db.models.Model&quot;&gt; &lt;code&gt;Model&lt;/code&gt; &lt;/a&gt;类都必须添加一个&lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;实例。Django确保在模型类中至少指定了一个默认 &lt;code&gt;Manager&lt;/code&gt; 。如果您不添加自己的 &lt;code&gt;Manager&lt;/code&gt; ，则Django将添加一个包含默认&lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;实例的属性 &lt;code&gt;objects&lt;/code&gt; 。如果添加自己的&lt;a href=&quot;../../topics/db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;实例属性，则默认属性不会出现。考虑以下示例：</target>
        </trans-unit>
        <trans-unit id="4c965682013aa01088fe8e446892e0f9d0d780ad" translate="yes" xml:space="preserve">
          <source>Each of these colors can then be modified by using the following display options:</source>
          <target state="translated">然后可以通过使用以下显示选项来修改这些颜色。</target>
        </trans-unit>
        <trans-unit id="c032813e1c75b7e9b318fb7720ad63166a3f87ec" translate="yes" xml:space="preserve">
          <source>Each of these functions takes a &lt;code&gt;using&lt;/code&gt; argument which should be the name of a database for which the behavior applies. If no &lt;code&gt;using&lt;/code&gt; argument is provided then the &lt;code&gt;&quot;default&quot;&lt;/code&gt; database is used.</source>
          <target state="translated">这些函数中的每个函数都 &lt;code&gt;using&lt;/code&gt; 参数，该参数应该是行为适用于的数据库的名称。如果未提供 &lt;code&gt;using&lt;/code&gt; 参数，则使用 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 数据库。</target>
        </trans-unit>
        <trans-unit id="e71525bfc762897383bda646cbf09e5d8a136b30" translate="yes" xml:space="preserve">
          <source>Each of these roles can be assigned a specific foreground and background color, from the following list:</source>
          <target state="translated">这些角色中的每一个都可以从以下列表中指定特定的前景和背景颜色。</target>
        </trans-unit>
        <trans-unit id="7287771fc549f9e43d41c8c05aa164f2529da8e2" translate="yes" xml:space="preserve">
          <source>Each of these three classes knows how to render a certain type of feed as XML. They share this interface:</source>
          <target state="translated">这三个类中的每一个都知道如何将某种类型的feed渲染成XML。它们共享这个接口。</target>
        </trans-unit>
        <trans-unit id="aa51370ee76a04abf238ec0dc182012982f950ef" translate="yes" xml:space="preserve">
          <source>Each of those dictionaries represents an object, with the keys corresponding to the attribute names of model objects.</source>
          <target state="translated">其中每一个字典都代表一个对象,键与模型对象的属性名相对应。</target>
        </trans-unit>
        <trans-unit id="9eacdbeaab596f61277ce2954ed4688d28a31011" translate="yes" xml:space="preserve">
          <source>Each of your views should use only mixins or views from one of the groups of generic class-based views: &lt;a href=&quot;generic-display&quot;&gt;detail, list&lt;/a&gt;, &lt;a href=&quot;generic-editing&quot;&gt;editing&lt;/a&gt; and date. For example it&amp;rsquo;s fine to combine &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; (built in view) with &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt; (generic list), but you&amp;rsquo;re likely to have problems combining &lt;code&gt;SingleObjectMixin&lt;/code&gt; (generic detail) with &lt;code&gt;MultipleObjectMixin&lt;/code&gt; (generic list).</source>
          <target state="translated">您的每个视图都应仅使用混合或来自基于类的通用视图组之一的视图：&lt;a href=&quot;generic-display&quot;&gt;详细信息，列表&lt;/a&gt;，&lt;a href=&quot;generic-editing&quot;&gt;编辑&lt;/a&gt;和日期。例如，将&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;（内置于视图中）与&lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt; &lt;code&gt;MultipleObjectMixin&lt;/code&gt; &lt;/a&gt;（通用列表）组合在一起是很好的选择，但是将 &lt;code&gt;SingleObjectMixin&lt;/code&gt; （通用详细信息）与 &lt;code&gt;MultipleObjectMixin&lt;/code&gt; （通用列表）组合在一起可能会遇到问题。</target>
        </trans-unit>
        <trans-unit id="db4988c586ad32ef3c472055aeb47e9bdb3ce09e" translate="yes" xml:space="preserve">
          <source>Each password validator must provide a help text to explain the requirements to the user, validate a given password and return an error message if it does not meet the requirements, and optionally receive passwords that have been set. Validators can also have optional settings to fine tune their behavior.</source>
          <target state="translated">每个密码验证器必须提供一个帮助文本来向用户解释要求,验证一个给定的密码,如果不符合要求就返回一个错误信息,并且可以选择接收已经设置的密码。验证器还可以有可选的设置来微调其行为。</target>
        </trans-unit>
        <trans-unit id="0a0d953c395cf521ce411dd374006420611373ad" translate="yes" xml:space="preserve">
          <source>Each process gets its own database. You must ensure that different test cases don&amp;rsquo;t access the same resources. For instance, test cases that touch the filesystem should create a temporary directory for their own use.</source>
          <target state="translated">每个进程都有自己的数据库。您必须确保不同的测试用例不会访问相同的资源。例如，接触文件系统的测试用例应创建一个临时目录供自己使用。</target>
        </trans-unit>
        <trans-unit id="6a5f004865d9534800031cee803c75541f12dd1a" translate="yes" xml:space="preserve">
          <source>Each processor is applied in order. That means, if one processor adds a variable to the context and a second processor adds a variable with the same name, the second will override the first. The default processors are explained below.</source>
          <target state="translated">每个处理器都是按顺序应用的。这意味着,如果一个处理器向上下文添加了一个变量,而第二个处理器添加了一个同名的变量,第二个处理器将覆盖第一个处理器。下面解释默认的处理器。</target>
        </trans-unit>
        <trans-unit id="7b74e5b7277908149647c4e254a2c9dd8743981d" translate="yes" xml:space="preserve">
          <source>Each regular expression in a &lt;code&gt;urlpatterns&lt;/code&gt; is compiled the first time it&amp;rsquo;s accessed. This makes the system blazingly fast.</source>
          <target state="translated">&lt;code&gt;urlpatterns&lt;/code&gt; 中的每个正则表达式都是在首次访问时进行编译的。这使系统运行异常迅速。</target>
        </trans-unit>
        <trans-unit id="5b20a40de7eb1c60cfbf06733545a162ebbcd9a6" translate="yes" xml:space="preserve">
          <source>Each request served by a class-based view has an independent state; therefore, it is safe to store state variables on the instance (i.e., &lt;code&gt;self.foo = 3&lt;/code&gt; is a thread-safe operation).</source>
          <target state="translated">基于类的视图所服务的每个请求都具有独立的状态。因此，将状态变量存储在实例上是安全的（即 &lt;code&gt;self.foo = 3&lt;/code&gt; 是线程安全的操作）。</target>
        </trans-unit>
        <trans-unit id="b98e5ef49465e6036280ceba699e82a100cb1a12" translate="yes" xml:space="preserve">
          <source>Each separate element of &lt;code&gt;datatuple&lt;/code&gt; results in a separate email message. As in &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt;, recipients in the same &lt;code&gt;recipient_list&lt;/code&gt; will all see the other addresses in the email messages&amp;rsquo; &amp;ldquo;To:&amp;rdquo; field.</source>
          <target state="translated">数据元组的每个单独的元素 &lt;code&gt;datatuple&lt;/code&gt; 产生单独的电子邮件。与&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; 中一样&lt;/a&gt;，同一收件人列表中的 &lt;code&gt;recipient_list&lt;/code&gt; 都将在电子邮件的&amp;ldquo;收件人：&amp;rdquo;字段中看到其他地址。</target>
        </trans-unit>
        <trans-unit id="a6fbfb728501832e282561cf179231e692040728" translate="yes" xml:space="preserve">
          <source>Each text label is surrounded in an HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag, which points to the appropriate form field via its &lt;code&gt;id&lt;/code&gt;. Its &lt;code&gt;id&lt;/code&gt;, in turn, is generated by prepending &lt;code&gt;'id_'&lt;/code&gt; to the field name. The &lt;code&gt;id&lt;/code&gt; attributes and &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tags are included in the output by default, to follow best practices, but you can change that behavior.</source>
          <target state="translated">每个文本标签都被HTML &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 标记包围，该标记通过其 &lt;code&gt;id&lt;/code&gt; 指向相应的表单字段。反过来，通过在字段名称前添加 &lt;code&gt;'id_'&lt;/code&gt; 来生成其 &lt;code&gt;id&lt;/code&gt; 。该 &lt;code&gt;id&lt;/code&gt; 属性和 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 标签包含在默认情况下，输出，遵循最佳实践，但你可以改变这种行为。</target>
        </trans-unit>
        <trans-unit id="03cf68270e68ac2d25d52ff5b90148366ce83c6d" translate="yes" xml:space="preserve">
          <source>Each time any Django application raises a 404 error, this middleware checks the flatpages database for the requested URL as a last resort. Specifically, it checks for a flatpage with the given URL with a site ID that corresponds to the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">每当任何Django应用程序引发404错误时，该中间件都会在平面数据库中检查请求的URL，作为最后的选择。具体来说，它将检查具有给定URL和与&lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt; &lt;code&gt;SITE_ID&lt;/code&gt; &lt;/a&gt;设置相对应的站点ID的平面。</target>
        </trans-unit>
        <trans-unit id="c443e45c5333145cdfad53ce7ea35e2193a52752" translate="yes" xml:space="preserve">
          <source>Each time you refine a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, you get a brand-new &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that is in no way bound to the previous &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;. Each refinement creates a separate and distinct &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; that can be stored, used and reused.</source>
          <target state="translated">每次优化&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 时&lt;/a&gt;，都将获得一个全新的&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;，而该&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;绝不会绑定到以前的QuerySet。每次优化都会创建一个单独的，独特的&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;，可以存储，使用和重用它。</target>
        </trans-unit>
        <trans-unit id="c1b9ec330548b55821336d0e0a09dc8b23578112" translate="yes" xml:space="preserve">
          <source>Each view is responsible for doing one of two things: Returning an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object containing the content for the requested page, or raising an exception such as &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;. The rest is up to you.</source>
          <target state="translated">每个视图负责执行以下两项操作之一：返回包含请求页面内容的&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;对象，或引发诸如&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; 之类&lt;/a&gt;的异常。其余的取决于您。</target>
        </trans-unit>
        <trans-unit id="3733c1d6c9f30952606a37e9580bed51ce98a268" translate="yes" xml:space="preserve">
          <source>Each view is responsible for doing one of two things: returning an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object containing the content for the requested page, or raising an exception such as &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt;. The rest is up to you.</source>
          <target state="translated">每个视图负责执行以下两项操作之一：返回包含请求页面内容的&lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;对象，或引发诸如&lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt; &lt;code&gt;Http404&lt;/code&gt; 之类&lt;/a&gt;的异常。其余的取决于您。</target>
        </trans-unit>
        <trans-unit id="19339908359150f3c88841413b986756ead6f3f2" translate="yes" xml:space="preserve">
          <source>Each widget has a &lt;code&gt;template_name&lt;/code&gt; attribute with a value such as &lt;code&gt;input.html&lt;/code&gt;. Built-in widget templates are stored in the &lt;code&gt;django/forms/widgets&lt;/code&gt; path. You can provide a custom template for &lt;code&gt;input.html&lt;/code&gt; by defining &lt;code&gt;django/forms/widgets/input.html&lt;/code&gt;, for example. See &lt;a href=&quot;widgets#built-in-widgets&quot;&gt;Built-in widgets&lt;/a&gt; for the name of each widget&amp;rsquo;s template.</source>
          <target state="translated">每个窗口小部件都有一个 &lt;code&gt;template_name&lt;/code&gt; 属性，该属性的值如 &lt;code&gt;input.html&lt;/code&gt; 。内置窗口小部件模板存储在 &lt;code&gt;django/forms/widgets&lt;/code&gt; 路径中。您可以通过定义 &lt;code&gt;django/forms/widgets/input.html&lt;/code&gt; 来为 &lt;code&gt;input.html&lt;/code&gt; 提供自定义模板。有关每个窗口小部件模板的名称，请参见&lt;a href=&quot;widgets#built-in-widgets&quot;&gt;内置窗口小部件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7d137bed7bd0b56e4bb03ffef2d3a3de46a3105e" translate="yes" xml:space="preserve">
          <source>Earlier, we installed the polls app as a user library. This has some disadvantages:</source>
          <target state="translated">此前,我们将投票应用作为用户库安装。这有一些缺点。</target>
        </trans-unit>
        <trans-unit id="c4387183f8ade46ecb53c704c50d0df3fb94f91e" translate="yes" xml:space="preserve">
          <source>Earlier, you used &lt;code&gt;ogrinfo&lt;/code&gt; to examine the contents of the world borders shapefile. GeoDjango also includes a Pythonic interface to GDAL&amp;rsquo;s powerful OGR library that can work with all the vector data sources that OGR supports.</source>
          <target state="translated">之前，您使用 &lt;code&gt;ogrinfo&lt;/code&gt; 检查了world borders shapefile的内容。GeoDjango还为GDAL强大的OGR库提供了Pythonic接口，该接口可与OGR支持的所有矢量数据源一起使用。</target>
        </trans-unit>
        <trans-unit id="bc9c6519bdc3961580bd7cb191e4981472f2333a" translate="yes" xml:space="preserve">
          <source>Early on it was recognized that there were common idioms and patterns found in view development. Function-based generic views were introduced to abstract these patterns and ease view development for the common cases.</source>
          <target state="translated">早期人们就认识到,在视图开发中发现了一些常见的习惯和模式。引入了基于功能的通用视图,以抽象这些模式,并简化常见情况下的视图开发。</target>
        </trans-unit>
        <trans-unit id="8440b9eb7d03917b2509b5baeab2a299ce257eb0" translate="yes" xml:space="preserve">
          <source>Edge</source>
          <target state="translated">Edge</target>
        </trans-unit>
        <trans-unit id="c6733d2b92d7770bb88a12c0c1edfd4c3f203cc3" translate="yes" xml:space="preserve">
          <source>Edge cases</source>
          <target state="translated">边缘案例</target>
        </trans-unit>
        <trans-unit id="fcacfe8059c533d705b517a6c55a078d9064cb53" translate="yes" xml:space="preserve">
          <source>Edit the &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting and make sure it contains &lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/code&gt;. The default &lt;code&gt;settings.py&lt;/code&gt; created by &lt;code&gt;django-admin startproject&lt;/code&gt; has &lt;code&gt;SessionMiddleware&lt;/code&gt; activated.</source>
          <target state="translated">编辑&lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;设置，并确保它包含 &lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/code&gt; 。 &lt;code&gt;django-admin startproject&lt;/code&gt; 创建的默认 &lt;code&gt;settings.py&lt;/code&gt; 已激活 &lt;code&gt;SessionMiddleware&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="120d7e35a9158c943b2c8a0baffc1d9a5d047061" translate="yes" xml:space="preserve">
          <source>Edit the first migration file. The generated migration class should look similar to this:</source>
          <target state="translated">编辑第一个迁移文件。生成的迁移类应该类似于这样。</target>
        </trans-unit>
        <trans-unit id="adc1fc0762121272aead6562a1016cdc3fdc52b5" translate="yes" xml:space="preserve">
          <source>Edit your &lt;code&gt;polls/admin.py&lt;/code&gt; file again and add an improvement to the &lt;code&gt;Question&lt;/code&gt; change list page: filters using the &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt;. Add the following line to &lt;code&gt;QuestionAdmin&lt;/code&gt;:</source>
          <target state="translated">再次编辑您的 &lt;code&gt;polls/admin.py&lt;/code&gt; 文件，并在&amp;ldquo; &lt;code&gt;Question&lt;/code&gt; 更改列表&amp;rdquo;页面上进行改进：使用&lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;list_filter&lt;/code&gt; 进行&lt;/a&gt;过滤。将以下行添加到 &lt;code&gt;QuestionAdmin&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="4a904e746236c62c2090168a9b6b3c53dcc0cb34" translate="yes" xml:space="preserve">
          <source>Editing geometry fields from the admin.</source>
          <target state="translated">从管理界面编辑几何字段。</target>
        </trans-unit>
        <trans-unit id="e2395732ea8675a07a0aa660461d0546a2f98443" translate="yes" xml:space="preserve">
          <source>Editing mixins</source>
          <target state="translated">编辑混音器</target>
        </trans-unit>
        <trans-unit id="de2e6231f78baa73c76471d5ec0cddc3ae1c0109" translate="yes" xml:space="preserve">
          <source>Editing views</source>
          <target state="translated">编辑意见</target>
        </trans-unit>
        <trans-unit id="ed63036d8730b34c2af3aa53fe984d9883388a1c" translate="yes" xml:space="preserve">
          <source>Editors</source>
          <target state="translated">Editors</target>
        </trans-unit>
        <trans-unit id="bfdc74a5613fa59c62fbb63e18eb1bda60d76e6c" translate="yes" xml:space="preserve">
          <source>Eight bit unsigned integer</source>
          <target state="translated">八位无符号整数</target>
        </trans-unit>
        <trans-unit id="388808032cce004f2fd096dd884a17cdb879a076" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;configure()&lt;/code&gt; or &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; is required</source>
          <target state="translated">任一 &lt;code&gt;configure()&lt;/code&gt; 或 &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; 需要</target>
        </trans-unit>
        <trans-unit id="419dc9dd1c54d38f5ec5aa2e1b27fb8737ff28a9" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;w&lt;/code&gt; for words, &lt;code&gt;p&lt;/code&gt; for HTML paragraphs or &lt;code&gt;b&lt;/code&gt; for plain-text paragraph blocks (default is &lt;code&gt;b&lt;/code&gt;).</source>
          <target state="translated">任一 &lt;code&gt;w&lt;/code&gt; 为词语， &lt;code&gt;p&lt;/code&gt; 为HTML段落或 &lt;code&gt;b&lt;/code&gt; 为纯文本段落块（默认为 &lt;code&gt;b&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a86aed67785d59198e1613f04cc0261e636bd947" translate="yes" xml:space="preserve">
          <source>Either an &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; of 2-tuples to use as choices for this field, or a callable that returns such an iterable. This argument accepts the same formats as the &lt;code&gt;choices&lt;/code&gt; argument to a model field. See the &lt;a href=&quot;../models/fields#field-choices&quot;&gt;model field reference documentation on choices&lt;/a&gt; for more details. If the argument is a callable, it is evaluated each time the field&amp;rsquo;s form is initialized. Defaults to an empty list.</source>
          <target state="translated">一个2元组的&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;可迭代对象&lt;/a&gt;用作此字段的选择，或者返回一个此类的可调用对象。该参数接受与模型字段的 &lt;code&gt;choices&lt;/code&gt; 参数相同的格式。有关更多详细信息，请参见&lt;a href=&quot;../models/fields#field-choices&quot;&gt;有关选择&lt;/a&gt;的模型字段参考文档。如果参数是可调用的，则每次初始化字段的表单时都会对其进行评估。默认为空列表。</target>
        </trans-unit>
        <trans-unit id="d28c6bffe8103ed860fd407d206bead335523716" translate="yes" xml:space="preserve">
          <source>Either way, &lt;code&gt;authenticate()&lt;/code&gt; should check the credentials it gets and return a user object that matches those credentials if the credentials are valid. If they&amp;rsquo;re not valid, it should return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">无论哪种方式， &lt;code&gt;authenticate()&lt;/code&gt; 都应检查其获取的凭据，如果凭据有效，则返回与这些凭据匹配的用户对象。如果它们无效，则应返回 &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53c3513d99230dc97ffc8b8f980549485993a2ec" translate="yes" xml:space="preserve">
          <source>Elements of &lt;code&gt;list_display&lt;/code&gt; can also be properties. Please note however, that due to the way properties work in Python, setting &lt;code&gt;short_description&lt;/code&gt; or &lt;code&gt;admin_order_field&lt;/code&gt; on a property is only possible when using the &lt;code&gt;property()&lt;/code&gt; function and &lt;strong&gt;not&lt;/strong&gt; with the &lt;code&gt;@property&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;list_display&lt;/code&gt; 的元素也可以是属性。但是，请注意，由于性能在Python工作，设置方式 &lt;code&gt;short_description&lt;/code&gt; 或 &lt;code&gt;admin_order_field&lt;/code&gt; 使用时，一个属性是唯一可能的 &lt;code&gt;property()&lt;/code&gt; 函数，并&lt;strong&gt;没有&lt;/strong&gt;与 &lt;code&gt;@property&lt;/code&gt; 装饰。</target>
        </trans-unit>
        <trans-unit id="84add5b2952787581cb9a8851eef63d1ec75d22b" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="translated">Email</target>
        </trans-unit>
        <trans-unit id="6cac061f8a6ca61d9516c210bf88971b1a0c84b8" translate="yes" xml:space="preserve">
          <source>Email backends</source>
          <target state="translated">电子邮件后端</target>
        </trans-unit>
        <trans-unit id="cfcd5bdbfc61a80a3bc82b1a180b9ae066631ccf" translate="yes" xml:space="preserve">
          <source>Email reports</source>
          <target state="translated">电子邮件报告</target>
        </trans-unit>
        <trans-unit id="c83154634fd437155495c0f041307d91481c46ec" translate="yes" xml:space="preserve">
          <source>Email services</source>
          <target state="translated">电子邮件服务</target>
        </trans-unit>
        <trans-unit id="ab4a5c4f2b9f04d70f2f5f01c085f3c83e7460f6" translate="yes" xml:space="preserve">
          <source>Email the package to a friend.</source>
          <target state="translated">通过电子邮件将包裹发送给朋友。</target>
        </trans-unit>
        <trans-unit id="2fde6da6e9f22b3fc4d2b65fa9c356bb50336ad9" translate="yes" xml:space="preserve">
          <source>Empty &lt;code&gt;LineString&lt;/code&gt; objects may be instantiated by passing no arguments or an empty sequence. The following are equivalent:</source>
          <target state="translated">空的 &lt;code&gt;LineString&lt;/code&gt; 对象可以通过不传递任何参数或空序列来实例化。以下是等效的：</target>
        </trans-unit>
        <trans-unit id="c84fe32a01993fdbb6c286dbbb1991ee1e076aae" translate="yes" xml:space="preserve">
          <source>Empty &lt;code&gt;Point&lt;/code&gt; objects may be instantiated by passing no arguments or an empty sequence. The following are equivalent:</source>
          <target state="translated">空 &lt;code&gt;Point&lt;/code&gt; 对象可以通过不传递任何参数或空序列来实例化。以下是等效的：</target>
        </trans-unit>
        <trans-unit id="5a5a25b0e6a2dea811dce4133791baef09918529" translate="yes" xml:space="preserve">
          <source>Empty tags are equivalent to their self-closing version.</source>
          <target state="translated">空标签相当于其自闭版。</target>
        </trans-unit>
        <trans-unit id="0307d363ba40241197b833e90f5f8291ed6b6340" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;''&lt;/code&gt; (an empty string)</source>
          <target state="translated">空值： &lt;code&gt;''&lt;/code&gt; （空字符串）</target>
        </trans-unit>
        <trans-unit id="f305673b9e3e33782f5d33084c85ee33ec06b8bd" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;False&lt;/code&gt;</source>
          <target state="translated">空值： &lt;code&gt;False&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bdeeba3b3a7689ffd1d89122a0dc8dd2b4e03911" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">空值： &lt;code&gt;None&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5cfd18f5a597ab2f02625b842bcf36919154a90" translate="yes" xml:space="preserve">
          <source>Empty value: &lt;code&gt;[]&lt;/code&gt; (an empty list)</source>
          <target state="translated">空值： &lt;code&gt;[]&lt;/code&gt; （一个空列表）</target>
        </trans-unit>
        <trans-unit id="de23653036c65c4ef1abe722a3ef494baebd9bbd" translate="yes" xml:space="preserve">
          <source>Empty value: An empty &lt;code&gt;QuerySet&lt;/code&gt; (self.queryset.none())</source>
          <target state="translated">空值：空的 &lt;code&gt;QuerySet&lt;/code&gt; （self.queryset.none（））</target>
        </trans-unit>
        <trans-unit id="4225eee1d66c233c244a726ad49434d5db23844e" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">空值：无论您提供的是&lt;a href=&quot;#django.forms.CharField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="66c5b7a862ad2f791a0ebb9ae117b975b1c72e3f" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt;&lt;code&gt;empty_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">空值：无论您提供的是&lt;a href=&quot;#django.forms.TypedChoiceField.empty_value&quot;&gt; &lt;code&gt;empty_value&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bba37e157e65a36194be07698f01f611e533d1aa" translate="yes" xml:space="preserve">
          <source>Empty value: Whatever you&amp;rsquo;ve given as &lt;code&gt;empty_value&lt;/code&gt;</source>
          <target state="translated">空值：无论您提供为 &lt;code&gt;empty_value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b430c70ab9871e221b28ef1c4c585dcde8982154" translate="yes" xml:space="preserve">
          <source>Emptying the test outbox</source>
          <target state="translated">清空测试发件箱</target>
        </trans-unit>
        <trans-unit id="11c3f094b02b2299b7aef55682fa0533134d3da8" translate="yes" xml:space="preserve">
          <source>Emulating built-in field types</source>
          <target state="translated">模拟内置字段类型</target>
        </trans-unit>
        <trans-unit id="51587e5c16a3a99c5b5a235b51466d22e53e91b3" translate="yes" xml:space="preserve">
          <source>Enable the site-wide cache. If these are enabled, each Django-powered page will be cached for as long as the &lt;a href=&quot;settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;&lt;/a&gt; setting defines. See the &lt;a href=&quot;../topics/cache&quot;&gt;cache documentation&lt;/a&gt;.</source>
          <target state="translated">启用站点范围的缓存。如果启用了这些功能，则将在&lt;a href=&quot;settings#std:setting-CACHE_MIDDLEWARE_SECONDS&quot;&gt; &lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; &lt;/a&gt;设置定义的时间内缓存每个Django驱动的页面。请参阅&lt;a href=&quot;../topics/cache&quot;&gt;缓存文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a606c31d5bd9855b6f96d89eb26d4037f8e142e" translate="yes" xml:space="preserve">
          <source>Enables &lt;a href=&quot;../topics/logging#django-db-logger&quot;&gt;SQL logging&lt;/a&gt; for failing tests. If &lt;code&gt;--verbosity&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, then queries in passing tests are also output.</source>
          <target state="translated">为失败的测试启用&lt;a href=&quot;../topics/logging#django-db-logger&quot;&gt;SQL日志记录&lt;/a&gt;。如果 &lt;code&gt;--verbosity&lt;/code&gt; 为 &lt;code&gt;2&lt;/code&gt; ，那么还将输出通过测试的查询。</target>
        </trans-unit>
        <trans-unit id="7a4463d651ed0661984979afe199ae5b0f721a19" translate="yes" xml:space="preserve">
          <source>Enables cookie- and session-based message support. See the &lt;a href=&quot;contrib/messages&quot;&gt;messages documentation&lt;/a&gt;.</source>
          <target state="translated">启用基于cookie和会话的消息支持。请参阅&lt;a href=&quot;contrib/messages&quot;&gt;消息文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b697bc7a93f37da137a7d81c38c1b3456d64c1e7" translate="yes" xml:space="preserve">
          <source>Enables fixing of migration conflicts.</source>
          <target state="translated">可以修复迁移冲突。</target>
        </trans-unit>
        <trans-unit id="facf40aee4c34cb8e86957e26fbeb8686d6d7927" translate="yes" xml:space="preserve">
          <source>Enables handling of the &lt;code&gt;DELETE&lt;/code&gt; http action.</source>
          <target state="translated">启用对 &lt;code&gt;DELETE&lt;/code&gt; http操作的处理。</target>
        </trans-unit>
        <trans-unit id="adf9ba6da093f7b831abeb1094dfef28604e5d4c" translate="yes" xml:space="preserve">
          <source>Enables language selection based on data from the request. It customizes content for each user. See the &lt;a href=&quot;../topics/i18n/translation&quot;&gt;internationalization documentation&lt;/a&gt;.</source>
          <target state="translated">根据请求中的数据启用语言选择。它为每个用户定制内容。请参阅&lt;a href=&quot;../topics/i18n/translation&quot;&gt;国际化文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="de9c23f636a149ae61bc116fbee349e97a8aca92" translate="yes" xml:space="preserve">
          <source>Enables or disables conversion of aware datetime objects to the current time zone in the contained block.</source>
          <target state="translated">启用或禁用将意识到的日期时间对象转换为包含块中的当前时区。</target>
        </trans-unit>
        <trans-unit id="c770732c1fcd44d857f9fb3dfac99ec20c9986b4" translate="yes" xml:space="preserve">
          <source>Enables or disables localization of template variables in the contained block.</source>
          <target state="translated">启用或禁用包含在块中的模板变量的本地化。</target>
        </trans-unit>
        <trans-unit id="d18445bb9393ddbd76cbe6f830c69633db71cb33" translate="yes" xml:space="preserve">
          <source>Enables session support. See the &lt;a href=&quot;../topics/http/sessions&quot;&gt;session documentation&lt;/a&gt;.</source>
          <target state="translated">启用会话支持。请参阅&lt;a href=&quot;../topics/http/sessions&quot;&gt;会话文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2bf30bf5a21dc3907ce5334c0e5a65db129f6fb4" translate="yes" xml:space="preserve">
          <source>Enabling &lt;a href=&quot;../../ref/databases#persistent-database-connections&quot;&gt;persistent database connections&lt;/a&gt; can result in a nice speed-up when connecting to the database accounts for a significant part of the request processing time.</source>
          <target state="translated">当连接到数据库帐户占请求处理时间的很大一部分时，启用&lt;a href=&quot;../../ref/databases#persistent-database-connections&quot;&gt;持久性数据库连接&lt;/a&gt;可以大大提高速度。</target>
        </trans-unit>
        <trans-unit id="71954675171c44278797f899903b3e2642b83e23" translate="yes" xml:space="preserve">
          <source>Enabling &lt;a href=&quot;../ref/databases#persistent-database-connections&quot;&gt;Persistent connections&lt;/a&gt; can speed up connections to the database accounts for a significant part of the request processing time.</source>
          <target state="translated">启用&lt;a href=&quot;../ref/databases#persistent-database-connections&quot;&gt;持久连接&lt;/a&gt;可以在大部分请求处理时间中加快与数据库帐户的连接。</target>
        </trans-unit>
        <trans-unit id="43b8ca6e4533276ccf1161f4a1ce0109e081a732" translate="yes" xml:space="preserve">
          <source>Enabling &lt;code&gt;redirect_authenticated_user&lt;/code&gt; can also result in a redirect loop when using the &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt;&lt;code&gt;permission_required()&lt;/code&gt;&lt;/a&gt; decorator unless the &lt;code&gt;raise_exception&lt;/code&gt; parameter is used.</source>
          <target state="translated">除非使用了 &lt;code&gt;raise_exception&lt;/code&gt; 参数，否则在使用&lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt; &lt;code&gt;permission_required()&lt;/code&gt; &lt;/a&gt;装饰器时，启用 &lt;code&gt;redirect_authenticated_user&lt;/code&gt; 也会导致重定向循环。</target>
        </trans-unit>
        <trans-unit id="52c0ff5fd427daa4a693b2ccb871551aaa56e684" translate="yes" xml:space="preserve">
          <source>Enabling localization for fields with &lt;code&gt;localized_fields&lt;/code&gt;</source>
          <target state="translated">为具有 &lt;code&gt;localized_fields&lt;/code&gt; 的字段启用本地化</target>
        </trans-unit>
        <trans-unit id="7c44415ef04c9dc27e89d08c69f6c89a1f2df7b8" translate="yes" xml:space="preserve">
          <source>Enabling localization of fields</source>
          <target state="translated">使外地的本地化成为可能</target>
        </trans-unit>
        <trans-unit id="24f48cd3340e42cc782120d001737c383d262bd1" translate="yes" xml:space="preserve">
          <source>Enabling messages</source>
          <target state="translated">启用信息</target>
        </trans-unit>
        <trans-unit id="40b4b522e7058574bba73ee6635f391d5ff14ccd" translate="yes" xml:space="preserve">
          <source>Enabling password validation</source>
          <target state="translated">启用密码验证</target>
        </trans-unit>
        <trans-unit id="da39d8e40cf6638ff9704974b2fffd7f905079bf" translate="yes" xml:space="preserve">
          <source>Enabling sessions</source>
          <target state="translated">启用会议</target>
        </trans-unit>
        <trans-unit id="ffcf0e1bfe0a923964066354315ae55d3fcb3672" translate="yes" xml:space="preserve">
          <source>Enabling the &lt;a href=&quot;../ref/templates/api#django.template.loaders.cached.Loader&quot;&gt;&lt;code&gt;cached template loader&lt;/code&gt;&lt;/a&gt; often improves performance drastically, as it avoids compiling each template every time it needs to be rendered.</source>
          <target state="translated">启用&lt;a href=&quot;../ref/templates/api#django.template.loaders.cached.Loader&quot;&gt; &lt;code&gt;cached template loader&lt;/code&gt; &lt;/a&gt;通常会极大地提高性能，因为它避免了每次需要渲染每个模板时就对其进行编译。</target>
        </trans-unit>
        <trans-unit id="e85527a7c01ac6109965c64231b072b0688e9926" translate="yes" xml:space="preserve">
          <source>Enabling the cached template loader often improves performance drastically, as it avoids compiling each template every time it needs to be rendered. See the &lt;a href=&quot;../../ref/templates/api#template-loaders&quot;&gt;template loaders docs&lt;/a&gt; for more information.</source>
          <target state="translated">启用缓存的模板加载器通常会极大地提高性能，因为它避免了每次需要渲染每个模板时就对其进行编译。有关更多信息，请参见&lt;a href=&quot;../../ref/templates/api#template-loaders&quot;&gt;模板加载器文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="799115455303da7f3d39067dfa0f486ce1f0713a" translate="yes" xml:space="preserve">
          <source>Enabling the sites framework</source>
          <target state="translated">启用网站框架</target>
        </trans-unit>
        <trans-unit id="7a308792271b11195677870b19719b9711eafb15" translate="yes" xml:space="preserve">
          <source>Enclosures</source>
          <target state="translated">Enclosures</target>
        </trans-unit>
        <trans-unit id="b2654296c78ff5612050a6b55e48157650da3a15" translate="yes" xml:space="preserve">
          <source>Encodes a bytestring to a base64 string for use in URLs, stripping any trailing equal signs.</source>
          <target state="translated">将一个bytestring编码为base64字符串,用于URL中,去掉所有尾部的等号。</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="1cae75f67b9a5d3653fc5bf98e9ce1ed2fc1ad66" translate="yes" xml:space="preserve">
          <source>Encoding is performed by the session store class tied to a model class.</source>
          <target state="translated">编码由与模型类绑定的会话存储类执行。</target>
        </trans-unit>
        <trans-unit id="b7de20e88c7be00748af86ec4625129cb62f7543" translate="yes" xml:space="preserve">
          <source>Enforce running test classes sequentially</source>
          <target state="translated">强制按顺序运行测试类</target>
        </trans-unit>
        <trans-unit id="c1f65ddb75ed7d97e701168af35171410be8f9e7" translate="yes" xml:space="preserve">
          <source>Engine</source>
          <target state="translated">Engine</target>
        </trans-unit>
        <trans-unit id="12f9801d010eb18e980abf817ce7d35a66c7a8da" translate="yes" xml:space="preserve">
          <source>English ordinal suffix for day of the month, 2 characters.</source>
          <target state="translated">英文序号后缀为每月的一天,2个字符。</target>
        </trans-unit>
        <trans-unit id="9b4cacfea65f0df81bbb70bb79d368cdf7430114" translate="yes" xml:space="preserve">
          <source>Enjoy the free API</source>
          <target state="translated">享受免费的API</target>
        </trans-unit>
        <trans-unit id="ac6dcbd1edf399d18ef1b83f882fa42a8c50157d" translate="yes" xml:space="preserve">
          <source>Ensure that the &lt;code&gt;django.contrib.sites&lt;/code&gt; framework &lt;a href=&quot;sites#enabling-the-sites-framework&quot;&gt;is installed&lt;/a&gt;.</source>
          <target state="translated">确保&lt;a href=&quot;sites#enabling-the-sites-framework&quot;&gt;已安装&lt;/a&gt; &lt;code&gt;django.contrib.sites&lt;/code&gt; 框架。</target>
        </trans-unit>
        <trans-unit id="a9d0d26333dfab249cb912e803a58cf912711deb" translate="yes" xml:space="preserve">
          <source>Ensure that you don&amp;rsquo;t have non-prefixed URL patterns that might collide with an automatically-added language prefix.</source>
          <target state="translated">确保您没有非前缀的URL模式，这些模式可能会与自动添加的语言前缀冲突。</target>
        </trans-unit>
        <trans-unit id="f5fe186aacd25033e987d7d2a2b2d8b3ba48a8dc" translate="yes" xml:space="preserve">
          <source>Ensure that your 404 template works</source>
          <target state="translated">确保你的404模板工作</target>
        </trans-unit>
        <trans-unit id="e003ef03051149f4675d37c9f9c6ea748cf9b4b2" translate="yes" xml:space="preserve">
          <source>Ensuring data stored in hidden form fields has not been tampered with.</source>
          <target state="translated">确保存储在隐藏表格字段中的数据没有被篡改。</target>
        </trans-unit>
        <trans-unit id="bf229c276c6f0527217bafda1bcd533d80e8835b" translate="yes" xml:space="preserve">
          <source>Enter the admin site</source>
          <target state="translated">进入管理网站</target>
        </trans-unit>
        <trans-unit id="29de63a391bb614dc4854aefcd579dcff322b235" translate="yes" xml:space="preserve">
          <source>Enter your desired username and press enter.</source>
          <target state="translated">输入你想要的用户名,然后按回车键。</target>
        </trans-unit>
        <trans-unit id="1a7e9db17fab5ba33617fdefd7d19a4dba92b592" translate="yes" xml:space="preserve">
          <source>Entry &amp;ldquo;detail&amp;rdquo; page &amp;ndash; permalink page for a single entry.</source>
          <target state="translated">条目&amp;ldquo;详细&amp;rdquo;页面&amp;ndash;单个条目的永久链接页面。</target>
        </trans-unit>
        <trans-unit id="ecfb1fec2b4374598ab0844cc33d5f900bf57b03" translate="yes" xml:space="preserve">
          <source>Entry point to add parser arguments to handle command line arguments passed to the command. Custom commands should override this method to add both positional and optional arguments accepted by the command. Calling &lt;code&gt;super()&lt;/code&gt; is not needed when directly subclassing &lt;code&gt;BaseCommand&lt;/code&gt;.</source>
          <target state="translated">添加解析器参数以处理传递给命令的命令行参数的入口点。定制命令应覆盖此方法，以添加该命令接受的位置参数和可选参数。直接子类化 &lt;code&gt;BaseCommand&lt;/code&gt; 时，不需要调用 &lt;code&gt;super()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b896542742a065357c73e3cda28f2c5161db4fc" translate="yes" xml:space="preserve">
          <source>Enum member values are a tuple of arguments to use when constructing the concrete data type. Django supports adding an extra string value to the end of this tuple to be used as the human-readable name, or &lt;code&gt;label&lt;/code&gt;. The &lt;code&gt;label&lt;/code&gt; can be a lazy translatable string. Thus, in most cases, the member value will be a &lt;code&gt;(value, label)&lt;/code&gt; two-tuple. See below for &lt;a href=&quot;#field-choices-enum-subclassing&quot;&gt;an example of subclassing choices&lt;/a&gt; using a more complex data type. If a tuple is not provided, or the last item is not a (lazy) string, the &lt;code&gt;label&lt;/code&gt; is &lt;a href=&quot;#field-choices-enum-auto-label&quot;&gt;automatically generated&lt;/a&gt; from the member name.</source>
          <target state="translated">枚举成员值是构造具体数据类型时要使用的参数的元组。Django支持在该元组的末尾添加一个额外的字符串值，以用作人类可读的名称或 &lt;code&gt;label&lt;/code&gt; 。该 &lt;code&gt;label&lt;/code&gt; 可以是懒惰的翻译字符串。因此，在大多数情况下，成员值将是一个 &lt;code&gt;(value, label)&lt;/code&gt; 二元组。有关使用更复杂的数据类型&lt;a href=&quot;#field-choices-enum-subclassing&quot;&gt;进行子分类选择的示例，&lt;/a&gt;请参见下文。如果未提供元组，或最后一个项目是不是一个（懒惰）字符串，该 &lt;code&gt;label&lt;/code&gt; 被&lt;a href=&quot;#field-choices-enum-auto-label&quot;&gt;自动生成，&lt;/a&gt;从成员名称。</target>
        </trans-unit>
        <trans-unit id="3e2bf03a268096db9df6b0465b51da16d0d1910a" translate="yes" xml:space="preserve">
          <source>Enumeration types</source>
          <target state="translated">枚举类型</target>
        </trans-unit>
        <trans-unit id="d0d2d65b25c8a65fe873c8d4778ec8d7466d7c4d" translate="yes" xml:space="preserve">
          <source>Enumeration types (e.g. &lt;code&gt;TextChoices&lt;/code&gt; or &lt;code&gt;IntegerChoices&lt;/code&gt;) instances.</source>
          <target state="translated">枚举类型（例如 &lt;code&gt;TextChoices&lt;/code&gt; 或 &lt;code&gt;IntegerChoices&lt;/code&gt; ）实例。</target>
        </trans-unit>
        <trans-unit id="05722a0a94d0ab771b3054a95a14401717ebd671" translate="yes" xml:space="preserve">
          <source>Enumeration types do not support &lt;a href=&quot;#field-choices-named-groups&quot;&gt;named groups&lt;/a&gt;.</source>
          <target state="translated">枚举类型不支持&lt;a href=&quot;#field-choices-named-groups&quot;&gt;命名组&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="899820d6bb7dd8f201ce3114a20b9edd5eadca86" translate="yes" xml:space="preserve">
          <source>Environment-specific settings</source>
          <target state="translated">特定环境设置</target>
        </trans-unit>
        <trans-unit id="d2180d5f1d2667ed48d18bce20de1c4557efdc3f" translate="yes" xml:space="preserve">
          <source>Equality operator doesn&amp;rsquo;t check spatial equality</source>
          <target state="translated">相等运算符不检查空间相等</target>
        </trans-unit>
        <trans-unit id="1d596485761d5add25928047878c2cf87248f6ff" translate="yes" xml:space="preserve">
          <source>Equality. Example:</source>
          <target state="translated">平等性。例如:</target>
        </trans-unit>
        <trans-unit id="bfd6961ac8cd0324fee27aae000bed2e4593ea3d" translate="yes" xml:space="preserve">
          <source>Equally we could use our mixin with one of the generic views. We can make our own version of &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; by mixing &lt;code&gt;JSONResponseMixin&lt;/code&gt; with the &lt;code&gt;django.views.generic.detail.BaseDetailView&lt;/code&gt; &amp;ndash; (the &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; before template rendering behavior has been mixed in):</source>
          <target state="translated">同样，我们可以将我们的mixin与通用视图之一一起使用。我们可以通过将 &lt;code&gt;JSONResponseMixin&lt;/code&gt; 与 &lt;code&gt;django.views.generic.detail.BaseDetailView&lt;/code&gt; 混合使用来制作自己的&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;版本-（混合了模板渲染行为之前的&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="054f9b7adbd87826f0e569062c8223fc7d4fd73d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#django.db.models.functions.Rank&quot;&gt;&lt;code&gt;Rank&lt;/code&gt;&lt;/a&gt; but does not have gaps.</source>
          <target state="translated">等同于&lt;a href=&quot;#django.db.models.functions.Rank&quot;&gt; &lt;code&gt;Rank&lt;/code&gt; &lt;/a&gt;但没有差距。</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">错误处理</target>
        </trans-unit>
        <trans-unit id="e7c9e508fdad3eb918b64d9cdee86194dc2bf6b7" translate="yes" xml:space="preserve">
          <source>Error message keys include &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;blank&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;unique&lt;/code&gt;, and &lt;code&gt;unique_for_date&lt;/code&gt;. Additional error message keys are specified for each field in the &lt;a href=&quot;#field-types&quot;&gt;Field types&lt;/a&gt; section below.</source>
          <target state="translated">错误消息键包括 &lt;code&gt;null&lt;/code&gt; ， &lt;code&gt;blank&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt; ， &lt;code&gt;invalid_choice&lt;/code&gt; ， &lt;code&gt;unique&lt;/code&gt; 和 &lt;code&gt;unique_for_date&lt;/code&gt; 。在下面的&amp;ldquo; &lt;a href=&quot;#field-types&quot;&gt;字段类型&amp;rdquo;&lt;/a&gt;部分中为每个字段指定了其他错误消息键。</target>
        </trans-unit>
        <trans-unit id="644e9c593a9ecca24a4a97f3e6f7c7d76b1c31ff" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a79adbe1d1427d81e105f8c7179c73ff061a0bb5" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d5038afff8413f2bff0c221ff6adac550860d58" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;incomplete&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt; ， &lt;code&gt;incomplete&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e70007c93c1cfef205c43d89968dd0d47da150ad" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;invalid_date&lt;/code&gt;, &lt;code&gt;invalid_time&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt; ， &lt;code&gt;invalid_date&lt;/code&gt; ， &lt;code&gt;invalid_time&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="33bafb140501080fe19092f94f16941ba6af5c7c" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;max_value&lt;/code&gt;, &lt;code&gt;min_value&lt;/code&gt;</source>
          <target state="translated">错误信息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt; ， &lt;code&gt;max_value&lt;/code&gt; ， &lt;code&gt;min_value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e89c2ad7213fda599cbab4454bde5268d62b08f4" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;max_value&lt;/code&gt;, &lt;code&gt;min_value&lt;/code&gt;, &lt;code&gt;max_digits&lt;/code&gt;, &lt;code&gt;max_decimal_places&lt;/code&gt;, &lt;code&gt;max_whole_digits&lt;/code&gt;</source>
          <target state="translated">错误消息密钥： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt; ， &lt;code&gt;max_value&lt;/code&gt; ， &lt;code&gt;min_value&lt;/code&gt; ， &lt;code&gt;max_digits&lt;/code&gt; ， &lt;code&gt;max_decimal_places&lt;/code&gt; ， &lt;code&gt;max_whole_digits&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="25421ddec12a744730d96d703e242516406cf2f7" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;missing&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;invalid_image&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt; ， &lt;code&gt;missing&lt;/code&gt; ， &lt;code&gt;empty&lt;/code&gt; ， &lt;code&gt;invalid_image&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="034a2ab0cf71e7e73bcf4a72c75f29c823563e38" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;missing&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt; ， &lt;code&gt;missing&lt;/code&gt; ， &lt;code&gt;empty&lt;/code&gt; ， &lt;code&gt;max_length&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1055f9a35a1305672ed5041e9a8ad077f65a71e" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;, &lt;code&gt;overflow&lt;/code&gt;.</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt; ， &lt;code&gt;overflow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="815f2e18308655c9e84818e293b91dad53e00d11" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid_choice&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c1a7f18421dd40169c4b79efcd7d78b4e84f388" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;invalid_list&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid_choice&lt;/code&gt; ， &lt;code&gt;invalid_list&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21f173fe77916ce6e2e59f50f2240b50cefe55ca" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;invalid_choice&lt;/code&gt;, &lt;code&gt;invalid_pk_value&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;list&lt;/code&gt; ， &lt;code&gt;invalid_choice&lt;/code&gt; ， &lt;code&gt;invalid_pk_value&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e52b5fe8383214c45bcaeef65be3fe9c82e064e" translate="yes" xml:space="preserve">
          <source>Error message keys: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;min_length&lt;/code&gt;</source>
          <target state="translated">错误消息键： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;max_length&lt;/code&gt; ， &lt;code&gt;min_length&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed2c55d7d1d4d4b54462e06cab6ef3e63f41b795" translate="yes" xml:space="preserve">
          <source>Error messages defined at the &lt;a href=&quot;../../ref/forms/fields#django.forms.Field.error_messages&quot;&gt;&lt;code&gt;form field&lt;/code&gt;&lt;/a&gt; level or at the &lt;a href=&quot;#modelforms-overriding-default-fields&quot;&gt;form Meta&lt;/a&gt; level always take precedence over the error messages defined at the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt;&lt;code&gt;model field&lt;/code&gt;&lt;/a&gt; level.</source>
          <target state="translated">在&lt;a href=&quot;../../ref/forms/fields#django.forms.Field.error_messages&quot;&gt; &lt;code&gt;form field&lt;/code&gt; &lt;/a&gt;级别或&lt;a href=&quot;#modelforms-overriding-default-fields&quot;&gt;表单元&lt;/a&gt;级别定义的错误消息始终优先于在&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt; &lt;code&gt;model field&lt;/code&gt; &lt;/a&gt;级别定义的错误消息。</target>
        </trans-unit>
        <trans-unit id="c25f6d4974538593d74fc8a9b515e9aacca2854a" translate="yes" xml:space="preserve">
          <source>Error messages defined on &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt;&lt;code&gt;model fields&lt;/code&gt;&lt;/a&gt; are only used when the &lt;code&gt;ValidationError&lt;/code&gt; is raised during the &lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;model validation&lt;/a&gt; step and no corresponding error messages are defined at the form level.</source>
          <target state="translated">仅当在&lt;a href=&quot;../../ref/models/instances#validating-objects&quot;&gt;模型验证&lt;/a&gt;步骤中引发 &lt;code&gt;ValidationError&lt;/code&gt; 且在表单级别未定义相应的错误消息时，才使用在&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.error_messages&quot;&gt; &lt;code&gt;model fields&lt;/code&gt; &lt;/a&gt;上定义的错误消息。</target>
        </trans-unit>
        <trans-unit id="cc46903da8f77602e39b5106b4c3c0830121b2ce" translate="yes" xml:space="preserve">
          <source>Error messages: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;invalid&lt;/code&gt;</source>
          <target state="translated">错误消息： &lt;code&gt;required&lt;/code&gt; ， &lt;code&gt;invalid&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c933b897af92835c337f8c15d042afda6a862cd4" translate="yes" xml:space="preserve">
          <source>Error reporting</source>
          <target state="translated">错误报告</target>
        </trans-unit>
        <trans-unit id="091bcdc3a075191969217351978c7120e66c3bb9" translate="yes" xml:space="preserve">
          <source>Error reporting by email doesn&amp;rsquo;t scale very well</source>
          <target state="translated">通过电子邮件报告的错误无法很好地扩展</target>
        </trans-unit>
        <trans-unit id="5930f76d487b628cabe814b6bf08fb2cef5cf6fa" translate="yes" xml:space="preserve">
          <source>Error reports are really helpful for debugging errors, so it is generally useful to record as much relevant information about those errors as possible. For example, by default Django records the &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_trace&quot;&gt;full traceback&lt;/a&gt; for the exception raised, each &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_frame&quot;&gt;traceback frame&lt;/a&gt;&amp;rsquo;s local variables, and the &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;../ref/request-response#httprequest-attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="translated">错误报告对于调试错误确实很有帮助，因此通常记录尽可能多的有关这些错误的相关信息非常有用。例如，默认情况下，Django会记录引发的异常的&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_trace&quot;&gt;完整追溯&lt;/a&gt;，每个&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_frame&quot;&gt;追溯框架&lt;/a&gt;的局部变量以及&lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;的&lt;a href=&quot;../ref/request-response#httprequest-attributes&quot;&gt;属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f05266842a08aa86bb6c0c2ba9682c438aca4a39" translate="yes" xml:space="preserve">
          <source>Error views</source>
          <target state="translated">错误观点</target>
        </trans-unit>
        <trans-unit id="072bd41bf754ef5147e3351ad808e9b39d15ee67" translate="yes" xml:space="preserve">
          <source>Escapes a string&amp;rsquo;s HTML. Specifically, it makes these replacements:</source>
          <target state="translated">转义字符串的HTML。具体来说，它将进行以下替换：</target>
        </trans-unit>
        <trans-unit id="99795a321d97625012d4cc2793a4db9c8993a8f4" translate="yes" xml:space="preserve">
          <source>Escapes a value for use in a URL.</source>
          <target state="translated">逃逸一个值用于URL。</target>
        </trans-unit>
        <trans-unit id="081bacb05feac121b0a11f486fde42d84ddcd2e4" translate="yes" xml:space="preserve">
          <source>Escapes characters for use in JavaScript strings. This does &lt;em&gt;not&lt;/em&gt; make the string safe for use in HTML or JavaScript template literals, but does protect you from syntax errors when using templates to generate JavaScript/JSON.</source>
          <target state="translated">转义用于JavaScript字符串的字符。这并&lt;em&gt;没有&lt;/em&gt;让在HTML或JavaScript模板文字使用字符串安全，但使用模板来生成JavaScript / JSON什么时候保护你的语法错误。</target>
        </trans-unit>
        <trans-unit id="2799518eaabe0894626afc825e79ca8ce72f1623" translate="yes" xml:space="preserve">
          <source>Escapes the unsafe characters from the path portion of a Uniform Resource Identifier (URI).</source>
          <target state="translated">从统一资源标识符(URI)的路径部分转出不安全字符。</target>
        </trans-unit>
        <trans-unit id="e3f5661168cd287de832a0a23973ac35fdf2f4d2" translate="yes" xml:space="preserve">
          <source>Escaping percent signs and underscores in &lt;code&gt;LIKE&lt;/code&gt; statements</source>
          <target state="translated">在 &lt;code&gt;LIKE&lt;/code&gt; 语句中转义百分号和下划线</target>
        </trans-unit>
        <trans-unit id="0b7957a226b11ed2d0338bfb81d7c21199344e65" translate="yes" xml:space="preserve">
          <source>Essentially, Django does two things:</source>
          <target state="translated">本质上,Django做了两件事。</target>
        </trans-unit>
        <trans-unit id="e09cd8f1120244b4cc85dbc74429b80692595661" translate="yes" xml:space="preserve">
          <source>Essentially, the &lt;code&gt;Vary&lt;/code&gt; HTTP header defines which headers a cache should take into account when building its cache key. Requests with the same path but different header content for headers named in &lt;code&gt;Vary&lt;/code&gt; need to get different cache keys to prevent delivery of wrong content.</source>
          <target state="translated">本质上， &lt;code&gt;Vary&lt;/code&gt; HTTP标头定义了在构建其高速缓存键时高速缓存应考虑的标头。对于 &lt;code&gt;Vary&lt;/code&gt; 中命名的标头，具有相同路径但标头内容不同的请求需要获取不同的缓存键，以防止传递错误的内容。</target>
        </trans-unit>
        <trans-unit id="287879ba8471d4b806339a94d25d38412ac21d3b" translate="yes" xml:space="preserve">
          <source>Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email.</source>
          <target state="translated">建立和关闭一个SMTP连接(或任何其他网络连接,就此而言)是一个昂贵的过程。如果你有很多邮件要发送,重用一个SMTP连接是有意义的,而不是每次要发送邮件时都要创建和破坏一个连接。</target>
        </trans-unit>
        <trans-unit id="b83e4e341012948cf2fb9b604a33b40907efac1c" translate="yes" xml:space="preserve">
          <source>Evaluates a variable, and if that variable is &amp;ldquo;true&amp;rdquo; the contents of the block are displayed:</source>
          <target state="translated">计算一个变量，如果该变量为&amp;ldquo; true&amp;rdquo;，则显示块的内容：</target>
        </trans-unit>
        <trans-unit id="fb95acc4512c80f8216948471f026d38a16023ae" translate="yes" xml:space="preserve">
          <source>Evaluates the &lt;code&gt;QuerySet&lt;/code&gt; (by performing the query) and returns an iterator (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0234&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 234&lt;/strong&gt;&lt;/a&gt;) over the results. A &lt;code&gt;QuerySet&lt;/code&gt; typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, &lt;code&gt;iterator()&lt;/code&gt; will read results directly, without doing any caching at the &lt;code&gt;QuerySet&lt;/code&gt; level (internally, the default iterator calls &lt;code&gt;iterator()&lt;/code&gt; and caches the return value). For a &lt;code&gt;QuerySet&lt;/code&gt; which returns a large number of objects that you only need to access once, this can result in better performance and a significant reduction in memory.</source>
          <target state="translated">评估 &lt;code&gt;QuerySet&lt;/code&gt; （通过执行查询），并在结果上返回迭代器（请参阅&lt;a href=&quot;https://www.python.org/dev/peps/pep-0234&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 234&lt;/strong&gt;&lt;/a&gt;）。一个 &lt;code&gt;QuerySet&lt;/code&gt; 通常缓存其结果在内部这样反复评估不会导致额外的查询。相反， &lt;code&gt;iterator()&lt;/code&gt; 将直接读取结果，而无需在 &lt;code&gt;QuerySet&lt;/code&gt; 级别进行任何缓存（在内部，默认的iterator调用 &lt;code&gt;iterator()&lt;/code&gt; 并缓存返回值）。对于返回大量对象而只需要访问一次的 &lt;code&gt;QuerySet&lt;/code&gt; ，这可以提高性能并显着减少内存。</target>
        </trans-unit>
        <trans-unit id="2adda768975d7029f15f1b9f17f8447fdb930b3f" translate="yes" xml:space="preserve">
          <source>Evaluating a queryset with &lt;code&gt;select_for_update()&lt;/code&gt; in autocommit mode on backends which support &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; is a &lt;a href=&quot;../exceptions#django.db.transaction.TransactionManagementError&quot;&gt;&lt;code&gt;TransactionManagementError&lt;/code&gt;&lt;/a&gt; error because the rows are not locked in that case. If allowed, this would facilitate data corruption and could easily be caused by calling code that expects to be run in a transaction outside of one.</source>
          <target state="translated">在支持 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 后端上，在自动提交模式下使用 &lt;code&gt;select_for_update()&lt;/code&gt; 评估查询集是一个&lt;a href=&quot;../exceptions#django.db.transaction.TransactionManagementError&quot;&gt; &lt;code&gt;TransactionManagementError&lt;/code&gt; &lt;/a&gt;错误，因为在这种情况下行未锁定。如果允许，这将促进数据损坏，并且很容易由调用期望在一个事务之外的事务中运行的代码引起。</target>
        </trans-unit>
        <trans-unit id="f88758a6f67c0caf62d19bdc3d8155dae92773ed" translate="yes" xml:space="preserve">
          <source>Evaluating a single-attribute lookup of &lt;code&gt;{{ perms }}&lt;/code&gt; as a boolean is a proxy to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt;&lt;code&gt;User.has_module_perms()&lt;/code&gt;&lt;/a&gt;. For example, to check if the logged-in user has any permissions in the &lt;code&gt;foo&lt;/code&gt; app:</source>
          <target state="translated">将 &lt;code&gt;{{ perms }}&lt;/code&gt; 的单属性查找评估为布尔值是&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_module_perms&quot;&gt; &lt;code&gt;User.has_module_perms()&lt;/code&gt; &lt;/a&gt;的代理。例如，要检查登录用户是否对 &lt;code&gt;foo&lt;/code&gt; 应用程序具有任何权限：</target>
        </trans-unit>
        <trans-unit id="d1133bf78b0580da1f366db575a5d6fbe79195ea" translate="yes" xml:space="preserve">
          <source>Evaluating a two-level-attribute lookup as a boolean is a proxy to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;User.has_perm()&lt;/code&gt;&lt;/a&gt;. For example, to check if the logged-in user has the permission &lt;code&gt;foo.can_vote&lt;/code&gt;:</source>
          <target state="translated">将两级属性查找评估为布尔值是&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.has_perm&quot;&gt; &lt;code&gt;User.has_perm()&lt;/code&gt; &lt;/a&gt;的代理。例如，检查登录用户是否具有 &lt;code&gt;foo.can_vote&lt;/code&gt; 权限：</target>
        </trans-unit>
        <trans-unit id="9c2b1a4c6880e872ef577b0c34b8759f737014cd" translate="yes" xml:space="preserve">
          <source>Even if you know there is only one message, you should still iterate over the &lt;code&gt;messages&lt;/code&gt; sequence, because otherwise the message storage will not be cleared for the next request.</source>
          <target state="translated">即使知道只有一条消息，也应该遍历 &lt;code&gt;messages&lt;/code&gt; 序列，因为否则将不会为下一个请求清除消息存储。</target>
        </trans-unit>
        <trans-unit id="e1e489f8009c7015eedaf4af9c0443016c384820" translate="yes" xml:space="preserve">
          <source>Even if you think you are in the advanced use-case situation, &lt;strong&gt;only use defer() when you cannot, at queryset load time, determine if you will need the extra fields or not&lt;/strong&gt;. If you are frequently loading and using a particular subset of your data, the best choice you can make is to normalize your models and put the non-loaded data into a separate model (and database table). If the columns &lt;em&gt;must&lt;/em&gt; stay in the one table for some reason, create a model with &lt;code&gt;Meta.managed = False&lt;/code&gt; (see the &lt;a href=&quot;options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed attribute&lt;/code&gt;&lt;/a&gt; documentation) containing just the fields you normally need to load and use that where you might otherwise call &lt;code&gt;defer()&lt;/code&gt;. This makes your code more explicit to the reader, is slightly faster and consumes a little less memory in the Python process.</source>
          <target state="translated">即使您认为自己处于高级用例情况下，也&lt;strong&gt;只能在无法在queryset加载时确定是否需要额外字段&lt;/strong&gt;的情况下&lt;strong&gt;使用defer（）&lt;/strong&gt;。如果您经常加载和使用数据的特定子集，那么最好的选择是对模型进行规范化，然后将未加载的数据放入单独的模型（和数据库表）中。如果由于某种原因这些列&lt;em&gt;必须&lt;/em&gt;保留在一个表中，请使用 &lt;code&gt;Meta.managed = False&lt;/code&gt; （请参阅&lt;a href=&quot;options#django.db.models.Options.managed&quot;&gt; &lt;code&gt;managed attribute&lt;/code&gt; &lt;/a&gt;文档）创建一个模型，该模型仅包含您通常需要加载的字段，并在可能会调用 &lt;code&gt;defer()&lt;/code&gt; 的地方使用它。这使您的代码对读者来说更加明确，速度更快，并且在Python进程中消耗的内存更少。</target>
        </trans-unit>
        <trans-unit id="6c5a8bd558d017c0183f278904625b9f201223ac" translate="yes" xml:space="preserve">
          <source>Even if your website is available in only one time zone, it&amp;rsquo;s still good practice to store data in UTC in your database. The main reason is Daylight Saving Time (DST). Many countries have a system of DST, where clocks are moved forward in spring and backward in autumn. If you&amp;rsquo;re working in local time, you&amp;rsquo;re likely to encounter errors twice a year, when the transitions happen. (The &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; documentation discusses &lt;a href=&quot;http://pytz.sourceforge.net/#problems-with-localtime&quot;&gt;these issues&lt;/a&gt; in greater detail.) This probably doesn&amp;rsquo;t matter for your blog, but it&amp;rsquo;s a problem if you over-bill or under-bill your customers by one hour, twice a year, every year. The solution to this problem is to use UTC in the code and use local time only when interacting with end users.</source>
          <target state="translated">即使您的网站仅在一个时区中可用，将数据存储在数据库中的UTC仍然是一种好习惯。主要原因是夏令时（DST）。许多国家/地区采用夏令时制，时钟在春季向前移动，在秋季向后移动。如果您是在当地时间工作，那么转换时每年可能会遇到两次错误。 （&lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt;文档更详细地讨论了&lt;a href=&quot;http://pytz.sourceforge.net/#problems-with-localtime&quot;&gt;这些问题&lt;/a&gt;。）这对您的博客可能并不重要，但是如果您每年向客户多收费或少收费一小时，两次，则是一个问题。解决此问题的方法是在代码中使用UTC，并且仅在与最终用户进行交互时使用本地时间。</target>
        </trans-unit>
        <trans-unit id="212225fac176022a07c0ae2acb00063a1ec1c7be" translate="yes" xml:space="preserve">
          <source>Even the parsing itself is quite fast. Most of the parsing happens via a single call to a single, short, regular expression.</source>
          <target state="translated">即使是解析本身也是相当快的。大部分的解析工作都是通过调用一个简短的正则表达式来完成的。</target>
        </trans-unit>
        <trans-unit id="0e3d8f7c1e310b2e909ef932159834ac5ca6ae3a" translate="yes" xml:space="preserve">
          <source>Even though users may use strong passwords, attackers might be able to eavesdrop on their connections. Use &lt;a href=&quot;../security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt; to avoid sending passwords (or any other sensitive data) over plain HTTP connections because they will be vulnerable to password sniffing.</source>
          <target state="translated">即使用户可能使用强密码，攻击者也可能能够窃听其连接。使用&lt;a href=&quot;../security#security-recommendation-ssl&quot;&gt;HTTPS&lt;/a&gt;避免通过纯HTTP连接发送密码（或任何其他敏感数据），因为它们很容易受到密码嗅探的影响。</target>
        </trans-unit>
        <trans-unit id="fbe337a7f388b3f15d78a8d0c1c5bcb514d31b24" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;Field&lt;/code&gt; instance contains several attributes that allow introspecting its behavior. Use these attributes instead of &lt;code&gt;isinstance&lt;/code&gt; checks when you need to write code that depends on a field&amp;rsquo;s functionality. These attributes can be used together with the &lt;a href=&quot;meta#model-meta-field-api&quot;&gt;Model._meta API&lt;/a&gt; to narrow down a search for specific field types. Custom model fields should implement these flags.</source>
          <target state="translated">每个 &lt;code&gt;Field&lt;/code&gt; 实例都包含几个允许自省其行为的属性。当您需要编写依赖于字段功能的代码时，请使用这些属性代替 &lt;code&gt;isinstance&lt;/code&gt; 检查。这些属性可以与&lt;a href=&quot;meta#model-meta-field-api&quot;&gt;Model._meta API&lt;/a&gt;一起使用，以缩小对特定字段类型的搜索范围。自定义模型字段应实现这些标志。</target>
        </trans-unit>
        <trans-unit id="8cab4213d5333e4700a03738c0ef52d1d3d03aff" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;ModelForm&lt;/code&gt; also has a &lt;code&gt;save()&lt;/code&gt; method. This method creates and saves a database object from the data bound to the form. A subclass of &lt;code&gt;ModelForm&lt;/code&gt; can accept an existing model instance as the keyword argument &lt;code&gt;instance&lt;/code&gt;; if this is supplied, &lt;code&gt;save()&lt;/code&gt; will update that instance. If it&amp;rsquo;s not supplied, &lt;code&gt;save()&lt;/code&gt; will create a new instance of the specified model:</source>
          <target state="translated">每个 &lt;code&gt;ModelForm&lt;/code&gt; 都有一个 &lt;code&gt;save()&lt;/code&gt; 方法。此方法从绑定到表单的数据创建并保存数据库对象。 &lt;code&gt;ModelForm&lt;/code&gt; 的子类可以接受现有的模型实例作为关键字参数 &lt;code&gt;instance&lt;/code&gt; ；如果提供了此参数，则 &lt;code&gt;save()&lt;/code&gt; 将更新该实例。如果未提供，则 &lt;code&gt;save()&lt;/code&gt; 将创建指定模型的新实例：</target>
        </trans-unit>
        <trans-unit id="6e14299cc96f60aa1c07ca94a21853cb29fed03f" translate="yes" xml:space="preserve">
          <source>Every built in view which needs context data, such as for rendering a template (including &lt;code&gt;TemplateResponseMixin&lt;/code&gt; above), should call &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt; passing any data they want to ensure is in there as keyword arguments. &lt;code&gt;get_context_data()&lt;/code&gt; returns a dictionary; in &lt;code&gt;ContextMixin&lt;/code&gt; it returns its keyword arguments, but it is common to override this to add more members to the dictionary. You can also use the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.extra_context&quot;&gt;&lt;code&gt;extra_context&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">每个需要上下文数据的内置视图（例如用于渲染模板（包括上面的 &lt;code&gt;TemplateResponseMixin&lt;/code&gt; ）的&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt; &lt;code&gt;get_context_data()&lt;/code&gt; &lt;/a&gt;都应调用get_context_data（），并传递它们要确保存在的任何数据作为关键字参数。 &lt;code&gt;get_context_data()&lt;/code&gt; 返回一个字典；在 &lt;code&gt;ContextMixin&lt;/code&gt; 中,它返回其关键字参数，但是通常会覆盖此参数以将更多成员添加到字典中。您也可以使用&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.extra_context&quot;&gt; &lt;code&gt;extra_context&lt;/code&gt; &lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="5abebf72cfdd05f18339a23f0931f3ed011cb582" translate="yes" xml:space="preserve">
          <source>Every built in view which returns a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; will call the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; method that &lt;code&gt;TemplateResponseMixin&lt;/code&gt; provides. Most of the time this will be called for you (for instance, it is called by the &lt;code&gt;get()&lt;/code&gt; method implemented by both &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;); similarly, it&amp;rsquo;s unlikely that you&amp;rsquo;ll need to override it, although if you want your response to return something not rendered via a Django template then you&amp;rsquo;ll want to do it. For an example of this, see the &lt;a href=&quot;#jsonresponsemixin-example&quot;&gt;JSONResponseMixin example&lt;/a&gt;.</source>
          <target state="translated">每个返回&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; 的&lt;/a&gt;内置视图都将调用 &lt;code&gt;TemplateResponseMixin&lt;/code&gt; 提供的&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt;方法。在大多数情况下，都会为您调用此方法（例如，它由&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt;都实现的 &lt;code&gt;get()&lt;/code&gt; 方法调用）；同样，不太可能需要覆盖它，尽管如果您希望响应返回的内容不是通过Django模板呈现的，那么您就需要这样做。有关此示例，请参见&lt;a href=&quot;#jsonresponsemixin-example&quot;&gt;JSONResponseMixin示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="838377ef62b2a13f1fbf0182fad7718968983771" translate="yes" xml:space="preserve">
          <source>Every context contains &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt;. As you would expect, these variables resolve to the corresponding Python objects.</source>
          <target state="translated">每个上下文都包含 &lt;code&gt;True&lt;/code&gt; ， &lt;code&gt;False&lt;/code&gt; 和 &lt;code&gt;None&lt;/code&gt; 。如您所料，这些变量解析为相应的Python对象。</target>
        </trans-unit>
        <trans-unit id="cc165a96655702c427116e9a4000f936b0928cff" translate="yes" xml:space="preserve">
          <source>Every field may not have the same relevance in a query, so you can set weights of various vectors before you combine them:</source>
          <target state="translated">每个字段在查询中的相关性可能不一样,所以你可以在组合各种向量之前设置它们的权重。</target>
        </trans-unit>
        <trans-unit id="814f57a7e3d59960cd808a38ef7f0be36d102202" translate="yes" xml:space="preserve">
          <source>Every form that uses this field will have these methods run before anything else can be done with the field&amp;rsquo;s data. This is cleaning that is specific to this type of field, regardless of how it is subsequently used.</source>
          <target state="translated">在使用该字段的数据进行任何其他操作之前，使用该字段的每种表单都将运行这些方法。这种清洁特定于此类型的字段，而不管其后如何使用。</target>
        </trans-unit>
        <trans-unit id="febded2a5a77188a733c6e2df64beb637d1d5f06" translate="yes" xml:space="preserve">
          <source>Every point of the other geometry is a point of this geometry.</source>
          <target state="translated">其他几何体的每一点都是这个几何体的一点。</target>
        </trans-unit>
        <trans-unit id="d4fd9230a184529361a8aa2b1f74ae7d996efd91" translate="yes" xml:space="preserve">
          <source>Every test case in a &lt;code&gt;django.test.*TestCase&lt;/code&gt; instance has access to an instance of a Django test client. This client can be accessed as &lt;code&gt;self.client&lt;/code&gt;. This client is recreated for each test, so you don&amp;rsquo;t have to worry about state (such as cookies) carrying over from one test to another.</source>
          <target state="translated">&lt;code&gt;django.test.*TestCase&lt;/code&gt; 实例中的每个测试用例都可以访问Django测试客户端的实例。该客户端可以作为 &lt;code&gt;self.client&lt;/code&gt; 访问。每次测试都会重新创建此客户端，因此您不必担心状态（例如cookie）会从一个测试转移到另一个测试。</target>
        </trans-unit>
        <trans-unit id="84522da20960008d9269f89064583fa5016e208a" translate="yes" xml:space="preserve">
          <source>Everything should pass. If it doesn&amp;rsquo;t, make sure you correctly added the function to the correct file.</source>
          <target state="translated">一切都会过去。如果不是，请确保已正确将功能添加到正确的文件中。</target>
        </trans-unit>
        <trans-unit id="8ded99c8d5128f39a1c73fd90b9c2d8406aebbdc" translate="yes" xml:space="preserve">
          <source>Everything you need to know about Django.</source>
          <target state="translated">你需要了解的关于Django的一切。</target>
        </trans-unit>
        <trans-unit id="9295771949fc387c8fcf92dd81a4a7538ac618f8" translate="yes" xml:space="preserve">
          <source>Exact match is implied here:</source>
          <target state="translated">这里隐含着完全匹配的意思。</target>
        </trans-unit>
        <trans-unit id="37e84456a4b965872015a2d820a64fe49edfcfc5" translate="yes" xml:space="preserve">
          <source>Exact match. If the value provided for comparison is &lt;code&gt;None&lt;/code&gt;, it will be interpreted as an SQL &lt;code&gt;NULL&lt;/code&gt; (see &lt;a href=&quot;#std:fieldlookup-isnull&quot;&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/a&gt; for more details).</source>
          <target state="translated">完全符合。如果为比较提供的值是 &lt;code&gt;None&lt;/code&gt; ，它将被解释为SQL &lt;code&gt;NULL&lt;/code&gt; （有关更多详细信息，请参见&lt;a href=&quot;#std:fieldlookup-isnull&quot;&gt; &lt;code&gt;isnull&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="ee3bc6da95e46e47e40c64bd6f76e0cb531a9597" translate="yes" xml:space="preserve">
          <source>Example (Unix Bash shell):</source>
          <target state="translated">示例(Unix Bash shell)。</target>
        </trans-unit>
        <trans-unit id="830e9bb39dc11d651c286095d97e45f79c2b0e49" translate="yes" xml:space="preserve">
          <source>Example (Windows shell):</source>
          <target state="translated">例子(Windows shell):</target>
        </trans-unit>
        <trans-unit id="718077cd1b2df7e94503d45c26299c5d0631a6ab" translate="yes" xml:space="preserve">
          <source>Example URL patterns:</source>
          <target state="translated">URL模式示例:</target>
        </trans-unit>
        <trans-unit id="4ddfbe0d0e205cc34c63998eb2f3530c73357994" translate="yes" xml:space="preserve">
          <source>Example ini configuration file usage:</source>
          <target state="translated">ini配置文件使用实例。</target>
        </trans-unit>
        <trans-unit id="e55c1df3f1be39c6d4a0ad98f09af1bb75f240e4" translate="yes" xml:space="preserve">
          <source>Example ini configuration file:</source>
          <target state="translated">ini配置文件示例。</target>
        </trans-unit>
        <trans-unit id="68446ab28449935e5edad544cffc5513c9ecfec5" translate="yes" xml:space="preserve">
          <source>Example of a full DSN string:</source>
          <target state="translated">一个完整的DSN字符串的例子。</target>
        </trans-unit>
        <trans-unit id="544998f7dc15d439cd9df97040aa14b1d77d294a" translate="yes" xml:space="preserve">
          <source>Example of an Easy Connect string:</source>
          <target state="translated">Easy Connect字符串的例子。</target>
        </trans-unit>
        <trans-unit id="9286acafb078f79b84d482451216c995453f2280" translate="yes" xml:space="preserve">
          <source>Example output</source>
          <target state="translated">输出示例</target>
        </trans-unit>
        <trans-unit id="44bccea698ca2be671739b7a3fcd4d079ab17ab8" translate="yes" xml:space="preserve">
          <source>Example purposes only!</source>
          <target state="translated">仅供参考</target>
        </trans-unit>
        <trans-unit id="cfab20a31ea6ebe2113f2ab4004ec8c0183bc431" translate="yes" xml:space="preserve">
          <source>Example requests:</source>
          <target state="translated">请求示例:</target>
        </trans-unit>
        <trans-unit id="27bc36e0446b72c6d8b0d1c7963a0c60bb412de6" translate="yes" xml:space="preserve">
          <source>Example to retrieve entries in the second quarter (April 1 to June 30):</source>
          <target state="translated">例如,检索第二季度(4月1日至6月30日)的条目。</target>
        </trans-unit>
        <trans-unit id="1ae307cf1c7af477bc7be93199f6087908b13cc0" translate="yes" xml:space="preserve">
          <source>Example tuple for &lt;code&gt;en_IN&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;en_IN&lt;/code&gt; 的示例元组：</target>
        </trans-unit>
        <trans-unit id="861245b8779c3c0a240081e66f72046983ca7d16" translate="yes" xml:space="preserve">
          <source>Example usage</source>
          <target state="translated">使用实例</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用实例。</target>
        </trans-unit>
        <trans-unit id="bd6bf677fc2c19ecd5c9a4987ff244376dcf1f86" translate="yes" xml:space="preserve">
          <source>Example values for &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;0.4&lt;/code&gt;, &lt;code&gt;1.0&lt;/code&gt;. The default priority of a page is &lt;code&gt;0.5&lt;/code&gt;. See the &lt;a href=&quot;https://www.sitemaps.org/protocol.html#prioritydef&quot;&gt;sitemaps.org documentation&lt;/a&gt; for more.</source>
          <target state="translated">示例值用于&lt;a href=&quot;#django.contrib.sitemaps.Sitemap.priority&quot;&gt; &lt;code&gt;priority&lt;/code&gt; &lt;/a&gt;： &lt;code&gt;0.4&lt;/code&gt; ， &lt;code&gt;1.0&lt;/code&gt; 。页面的默认优先级为 &lt;code&gt;0.5&lt;/code&gt; 。有关更多信息，请参见&lt;a href=&quot;https://www.sitemaps.org/protocol.html#prioritydef&quot;&gt;sitemaps.org文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="4abec658fdfd9e9a464f07db749b7dcf5b090fff" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/minfo/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&quot;/minfo/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e0e421429dc643e0f735f688ff2d3ed31efc05c5" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3048949b449ad0bad266e1c13cd317d901b918eb" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&quot;/music/bands/the_beatles/?print=true&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1448bb2dcf37d023890aa1c988027f69aa5be549" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/static/&quot;&lt;/code&gt; or &lt;code&gt;&quot;http://static.example.com/&quot;&lt;/code&gt;</source>
          <target state="translated">例如： &lt;code&gt;&quot;/static/&quot;&lt;/code&gt; 或 &lt;code&gt;&quot;http://static.example.com/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a158e625f2490c15b070e880c2742cac84d61ba" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/var/www/example.com/media/&quot;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&quot;/var/www/example.com/media/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="674ecfac8279532bba06cb9b28401fcad49da205" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;/var/www/example.com/static/&quot;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&quot;/var/www/example.com/static/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="901b1775848a8c936123642ddfbc15cb328f22d8" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;127.0.0.1:8000&quot;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&quot;127.0.0.1:8000&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6637efee609c9b823f9e22e77caa9c24efbce712" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&quot;http://media.example.com/&quot;&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;&quot;http://media.example.com/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66fd61cbedb1c0ed762d4fa6da3ef9a09345b041" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;'fav_color' in request.session&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;'fav_color' in request.session&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2232e75e309ae667ab6470ec0fd2380b7137dd39" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;['foo.html', 'path/to/bar.html']&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;['foo.html', 'path/to/bar.html']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26a5d71ed4ad77f4763a621ca8e293ce771f5765" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;del request.session['fav_color']&lt;/code&gt;. This raises &lt;code&gt;KeyError&lt;/code&gt; if the given &lt;code&gt;key&lt;/code&gt; isn&amp;rsquo;t already in the session.</source>
          <target state="translated">示例： &lt;code&gt;del request.session['fav_color']&lt;/code&gt; 。如果给定的 &lt;code&gt;key&lt;/code&gt; 不在会话中，则会引发 &lt;code&gt;KeyError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1afe81d1569194467a9e77bc63ab878055b15243" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session.get('fav_color', 'red')&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;fav_color = request.session.get('fav_color', 'red')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6b75cd9eec29e2fa11559ca64410670d455e31f" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session.pop('fav_color', 'blue')&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;fav_color = request.session.pop('fav_color', 'blue')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad520d77a5091665d30d5ad78a18889b6fa202da" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;fav_color = request.session['fav_color']&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;fav_color = request.session['fav_color']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a743ca139173ed672e946091b7fdc945370a9ef8" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;request.session['fav_color'] = 'blue'&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;request.session['fav_color'] = 'blue'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="59f981e918510438b42c8cc8b1ee243eefe83ad2" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;{'foo': 123}&lt;/code&gt;</source>
          <target state="translated">示例： &lt;code&gt;{'foo': 123}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="769914c627afb45406c3bf3ee2b71d5c808b0276" translate="yes" xml:space="preserve">
          <source>Examples (those after the first will only work on PostgreSQL):</source>
          <target state="translated">例子(第一个例子之后的例子只适用于PostgreSQL)。</target>
        </trans-unit>
        <trans-unit id="80f00b6a8f7e561eaf3206a451011d467b1bef0b" translate="yes" xml:space="preserve">
          <source>Examples (when &amp;lsquo;now&amp;rsquo; is 17 Feb 2007 16:30:00):</source>
          <target state="translated">示例（&amp;ldquo;现在&amp;rdquo;为2007年2月17日16:30:00时）：</target>
        </trans-unit>
        <trans-unit id="63d3c77fab43af705105a71ea0d3c62c1a4fec72" translate="yes" xml:space="preserve">
          <source>Examples (when &amp;lsquo;today&amp;rsquo; is 17 Feb 2007):</source>
          <target state="translated">示例（&amp;ldquo;今天&amp;rdquo;是2007年2月17日）：</target>
        </trans-unit>
        <trans-unit id="2676bb86273e80946e94a560787333f069255095" translate="yes" xml:space="preserve">
          <source>Examples are the same as for &lt;a href=&quot;#django.contrib.postgres.aggregates.ArrayAgg.ordering&quot;&gt;&lt;code&gt;ArrayAgg.ordering&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">示例与&lt;a href=&quot;#django.contrib.postgres.aggregates.ArrayAgg.ordering&quot;&gt; &lt;code&gt;ArrayAgg.ordering&lt;/code&gt; &lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="5d679a1bfd09bffa49249ebfc0da6c5751df2b5d" translate="yes" xml:space="preserve">
          <source>Examples of each of these methods are provided below.</source>
          <target state="translated">以下是这些方法的例子。</target>
        </trans-unit>
        <trans-unit id="e552f4ff74f5c9b402c0ac5a84814156fb03c7f3" translate="yes" xml:space="preserve">
          <source>Examples of how these are combined into editing views can be found at the documentation on &lt;a href=&quot;generic-editing&quot;&gt;Generic editing views&lt;/a&gt;.</source>
          <target state="translated">有关如何将它们组合到编辑视图中的示例，请参见&amp;ldquo; &lt;a href=&quot;generic-editing&quot;&gt;通用编辑视图&amp;rdquo;&lt;/a&gt;的文档。</target>
        </trans-unit>
        <trans-unit id="af9f7f41e63f57592e364cfc474ca225a505321a" translate="yes" xml:space="preserve">
          <source>Examples of model relationship API usage</source>
          <target state="translated">模型关系API使用实例</target>
        </trans-unit>
        <trans-unit id="77e71bb9ca949ae82bf5265846d018ec415f78b3" translate="yes" xml:space="preserve">
          <source>Examples of using different ports and addresses</source>
          <target state="translated">使用不同端口和地址的例子</target>
        </trans-unit>
        <trans-unit id="573199b07f4a7e07cec7a264bef08ffde99fe40a" translate="yes" xml:space="preserve">
          <source>Examples of using the different keys when creating rasters can be found in the documentation of the corresponding attributes and methods of the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt;&lt;code&gt;GDALBand&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">创建栅格时使用不同键的示例可以在&lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.contrib.gis.gdal.GDALBand&quot;&gt; &lt;code&gt;GDALBand&lt;/code&gt; &lt;/a&gt;类的相应属性和方法的文档中找到。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="130647020df08e0c6d075ab91d12bbeaf0d9c689" translate="yes" xml:space="preserve">
          <source>Exception class indicating a problem while executing a management command.</source>
          <target state="translated">表示在执行管理命令时出现问题的异常类。</target>
        </trans-unit>
        <trans-unit id="b4b0dfe7027c1d349ba13a7e79558e44ec341bd8" translate="yes" xml:space="preserve">
          <source>Exception handling</source>
          <target state="translated">异常处理</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="979977b0dc6898f6b99545124ffdccce5f51ee4c" translate="yes" xml:space="preserve">
          <source>Exceptions provided by the &lt;code&gt;django.test&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;django.test&lt;/code&gt; 软件包提供的异常。</target>
        </trans-unit>
        <trans-unit id="637c2d4ceffcb049dfd98479442ba6e5e51bc245" translate="yes" xml:space="preserve">
          <source>Excludes loading the fixtures from the given applications and/or models (in the form of &lt;code&gt;app_label&lt;/code&gt; or &lt;code&gt;app_label.ModelName&lt;/code&gt;). Use the option multiple times to exclude more than one app or model.</source>
          <target state="translated">不从给定的应用程序和/或模型（以 &lt;code&gt;app_label&lt;/code&gt; 或 &lt;code&gt;app_label.ModelName&lt;/code&gt; 的形式）加载灯具。多次使用该选项可排除多个应用程序或模型。</target>
        </trans-unit>
        <trans-unit id="e224f3054a528b9a8ad37aa70ee3bafba104e86e" translate="yes" xml:space="preserve">
          <source>Excludes tests &lt;a href=&quot;../topics/testing/tools#topics-tagging-tests&quot;&gt;marked with the specified tags&lt;/a&gt;. May be specified multiple times and combined with &lt;a href=&quot;#cmdoption-test-tag&quot;&gt;&lt;code&gt;test --tag&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">不包括&lt;a href=&quot;../topics/testing/tools#topics-tagging-tests&quot;&gt;标记有指定标签的&lt;/a&gt;测试。可以多次指定，并与&lt;a href=&quot;#cmdoption-test-tag&quot;&gt; &lt;code&gt;test --tag&lt;/code&gt; &lt;/a&gt;结合使用。</target>
        </trans-unit>
        <trans-unit id="0a7127cf360079d11d23a48c161b510f1596728e" translate="yes" xml:space="preserve">
          <source>Excluding a related item works as you would expect, too (although the SQL involved is a little complex):</source>
          <target state="translated">排除相关的项目也能像你期望的那样工作(尽管涉及的SQL有点复杂)。</target>
        </trans-unit>
        <trans-unit id="f9e9d0c5641e5220429dd5b410450d6a9a678599" translate="yes" xml:space="preserve">
          <source>Executes the SQL statement passed in, with parameters if supplied. This is a wrapper around the normal database cursors that allows capture of the SQL to a &lt;code&gt;.sql&lt;/code&gt; file if the user wishes.</source>
          <target state="translated">执行传入的SQL语句，并提供参数（如果提供）。这是普通数据库游标的包装，如果用户愿意，可以将SQL捕获到 &lt;code&gt;.sql&lt;/code&gt; 文件中。</target>
        </trans-unit>
        <trans-unit id="89a2df8a7a14bd458b9ce8bd658118c5a982cc19" translate="yes" xml:space="preserve">
          <source>Executing custom SQL</source>
          <target state="translated">执行自定义SQL</target>
        </trans-unit>
        <trans-unit id="00ee02034434ef9dd4163fe8af361d4c52e32055" translate="yes" xml:space="preserve">
          <source>Executing custom SQL directly</source>
          <target state="translated">直接执行自定义SQL</target>
        </trans-unit>
        <trans-unit id="6052e7f00cb0087825a4bffdb83956e8eb1e628c" translate="yes" xml:space="preserve">
          <source>Executing database queries with the ORM at import time in models modules will also trigger this exception. The ORM cannot function properly until all models are available.</source>
          <target state="translated">在模型模块中导入时用ORM执行数据库查询也会触发此异常。在所有模型都可用之前,ORM无法正常工作。</target>
        </trans-unit>
        <trans-unit id="b2beefb2d0c22d3314ba644a1b0d378cbe4fa9b0" translate="yes" xml:space="preserve">
          <source>Execution of the model mapping will cease upon the first error encountered. The default value (&lt;code&gt;False&lt;/code&gt;) behavior is to attempt to continue.</source>
          <target state="translated">在遇到第一个错误时，将停止执行模型映射。默认值（ &lt;code&gt;False&lt;/code&gt; ）行为是尝试继续。</target>
        </trans-unit>
        <trans-unit id="945e7b04d14c6db74d71e5bc18f1c281db5f3f58" translate="yes" xml:space="preserve">
          <source>Expanding the accepted referers beyond the current host or cookie domain can be done with the &lt;a href=&quot;settings#std:setting-CSRF_TRUSTED_ORIGINS&quot;&gt;&lt;code&gt;CSRF_TRUSTED_ORIGINS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">可以使用&lt;a href=&quot;settings#std:setting-CSRF_TRUSTED_ORIGINS&quot;&gt; &lt;code&gt;CSRF_TRUSTED_ORIGINS&lt;/code&gt; &lt;/a&gt;设置将接受的引荐来源扩展到当前主机或cookie域之外。</target>
        </trans-unit>
        <trans-unit id="d630fe6c0dbe56806d5eee2d891d3f4097da07d4" translate="yes" xml:space="preserve">
          <source>Expects data in the format &lt;code&gt;&quot;DD HH:MM:SS.uuuuuu&quot;&lt;/code&gt; or as specified by ISO 8601 (e.g. &lt;code&gt;P4DT1H15M20S&lt;/code&gt; which is equivalent to &lt;code&gt;4 1:15:20&lt;/code&gt;) or PostgreSQL&amp;rsquo;s day-time interval format (e.g. &lt;code&gt;3 days 04:05:06&lt;/code&gt;).</source>
          <target state="translated">预期数据格式为 &lt;code&gt;&quot;DD HH:MM:SS.uuuuuu&quot;&lt;/code&gt; 或ISO 8601指定的数据（例如 &lt;code&gt;P4DT1H15M20S&lt;/code&gt; ，它等效于 &lt;code&gt;4 1:15:20&lt;/code&gt; ）或PostgreSQL的日间时间间隔格式（例如 &lt;code&gt;3 days 04:05:06&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="02badd5c782845228bccae7b87567640893eea55" translate="yes" xml:space="preserve">
          <source>Expiration of messages</source>
          <target state="translated">信息的失效</target>
        </trans-unit>
        <trans-unit id="825e83f1ae786ec7612f738560afd76d510d34f2" translate="yes" xml:space="preserve">
          <source>Expiration policies for these cookies are not followed. If you want a cookie to expire, either delete it manually or create a new &lt;code&gt;Client&lt;/code&gt; instance (which will effectively delete all cookies).</source>
          <target state="translated">不遵循这些cookie的过期策略。如果您希望Cookie过期，请手动将其删除或创建一个新的 &lt;code&gt;Client&lt;/code&gt; 实例（这将有效删除所有cookie）。</target>
        </trans-unit>
        <trans-unit id="96c25ea7982a1802b1f2648ff749f6154cf0fd3e" translate="yes" xml:space="preserve">
          <source>Expired sessions are not available to a user, however, they may still be stored in the database until the &lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt;&lt;code&gt;clearsessions&lt;/code&gt;&lt;/a&gt; management command is run.</source>
          <target state="translated">过期的会话对用户不可用，但是，它们可能仍存储在数据库中，直到运行&lt;a href=&quot;../../ref/django-admin#django-admin-clearsessions&quot;&gt; &lt;code&gt;clearsessions&lt;/code&gt; &lt;/a&gt; management命令为止。</target>
        </trans-unit>
        <trans-unit id="8b0e56471ca8bdbedccf8f159a012f178e4bafee" translate="yes" xml:space="preserve">
          <source>Explains how to structure and write database migrations for different scenarios you might encounter.</source>
          <target state="translated">讲解如何针对你可能遇到的不同场景进行数据库迁移的结构和编写。</target>
        </trans-unit>
        <trans-unit id="d94592778e731505956708d49b7db2ad5a88dd27" translate="yes" xml:space="preserve">
          <source>Explicitly importing each model rather than using &lt;code&gt;from .models import *&lt;/code&gt; has the advantages of not cluttering the namespace, making code more readable, and keeping code analysis tools useful.</source>
          <target state="translated">显式导入每个模型而不是 &lt;code&gt;from .models import *&lt;/code&gt; 具有以下优点：不会使名称空间混乱，使代码更具可读性，并保持代码分析工具有用。</target>
        </trans-unit>
        <trans-unit id="6fb817f9ee738b2a8b27e7516ee544fd6f8dba04" translate="yes" xml:space="preserve">
          <source>Explicitly mark a string as safe for (HTML) output purposes. The returned object can be used everywhere a string is appropriate.</source>
          <target state="translated">为(HTML)输出目的明确标记一个字符串为安全的。返回的对象可以用在任何适合字符串的地方。</target>
        </trans-unit>
        <trans-unit id="874f563ca10bc56af8814bb8cfc17a69095a4254" translate="yes" xml:space="preserve">
          <source>Explicitly passing the timezone to the &lt;code&gt;Extract&lt;/code&gt; function behaves in the same way, and takes priority over an active timezone:</source>
          <target state="translated">将时区显式传递给 &lt;code&gt;Extract&lt;/code&gt; 函数的行为相同，并且优先于活动时区：</target>
        </trans-unit>
        <trans-unit id="9accba3377caa879d2411f253c32d40f50c05c64" translate="yes" xml:space="preserve">
          <source>Explicitly setting the active language</source>
          <target state="translated">明确设置主动语言</target>
        </trans-unit>
        <trans-unit id="f4f5831bca5be105fc675670edb3ed008d4f5aa6" translate="yes" xml:space="preserve">
          <source>Explicitly specifying auto-primary-key values</source>
          <target state="translated">明确指定自动主键值。</target>
        </trans-unit>
        <trans-unit id="2a388f76aa5ea04c1d289a276ec7b4fa562a89ee" translate="yes" xml:space="preserve">
          <source>Explicitly specifying auto-primary-key values is mostly useful for bulk-saving objects, when you&amp;rsquo;re confident you won&amp;rsquo;t have primary-key collision.</source>
          <target state="translated">当您确定不会发生主键冲突时，显式指定自动主键值对于批量保存对象最有用。</target>
        </trans-unit>
        <trans-unit id="0581a134daecddc957761672c1987cd91186f2a4" translate="yes" xml:space="preserve">
          <source>Explore the ORM before using raw SQL!</source>
          <target state="translated">在使用原始SQL之前,先探索一下ORM</target>
        </trans-unit>
        <trans-unit id="816a1c591197b5d90919fa323137ee77dfdedebb" translate="yes" xml:space="preserve">
          <source>Explore the free admin functionality</source>
          <target state="translated">探索免费的管理功能</target>
        </trans-unit>
        <trans-unit id="de31fd22a0f8e99b352dbde9fc9b3c0a8b00ac76" translate="yes" xml:space="preserve">
          <source>Exposing multiple databases in Django&amp;rsquo;s admin interface</source>
          <target state="translated">在Django的管理界面中公开多个数据库</target>
        </trans-unit>
        <trans-unit id="dc348b7addd2c3af4465f15822bcf88a0780f26c" translate="yes" xml:space="preserve">
          <source>Expression API</source>
          <target state="translated">表达式API</target>
        </trans-unit>
        <trans-unit id="3a741732bbc54a44141f91d238840f2ab0bb786b" translate="yes" xml:space="preserve">
          <source>Extending Django&amp;rsquo;s default &lt;code&gt;User&lt;/code&gt;</source>
          <target state="translated">扩展Django的默认 &lt;code&gt;User&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8cd7b3f9fec9e30658f341d79e32760ffc714990" translate="yes" xml:space="preserve">
          <source>Extending database-backed session engines</source>
          <target state="translated">扩展数据库支持的会话引擎</target>
        </trans-unit>
        <trans-unit id="ededa0d12d32cb3f876751175473cd30889d24bb" translate="yes" xml:space="preserve">
          <source>Extending generic views</source>
          <target state="translated">扩大一般性意见</target>
        </trans-unit>
        <trans-unit id="b816961d84a34706e850fb49a6d02a03b3e40ac9" translate="yes" xml:space="preserve">
          <source>Extending the existing &lt;code&gt;User&lt;/code&gt; model</source>
          <target state="translated">扩展现有的 &lt;code&gt;User&lt;/code&gt; 模型</target>
        </trans-unit>
        <trans-unit id="9327a207b1aa9ff41fc53fada2bdafbfd0dabaf1" translate="yes" xml:space="preserve">
          <source>Extensions to Django&amp;rsquo;s ORM for querying and manipulating spatial data.</source>
          <target state="translated">Django ORM的扩展，用于查询和操作空间数据。</target>
        </trans-unit>
        <trans-unit id="dae651c4da4bb405bf79d80b0eb4ab583a7ba230" translate="yes" xml:space="preserve">
          <source>Extent (boundary values) of the raster source, as a 4-tuple &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt; in the spatial reference system of the source.</source>
          <target state="translated">栅格源的范围（边界值），在源空间参考系统中为4元组 &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad951d5067b4277d0ccfa1b48de4e084d9986632" translate="yes" xml:space="preserve">
          <source>External packages</source>
          <target state="translated">外部配套</target>
        </trans-unit>
        <trans-unit id="1afc103e2a5f0f4caa7ca899f5745dcd5f729da1" translate="yes" xml:space="preserve">
          <source>Extra &amp;ldquo;help&amp;rdquo; text to be displayed with the form widget. It&amp;rsquo;s useful for documentation even if your field isn&amp;rsquo;t used on a form.</source>
          <target state="translated">额外的&amp;ldquo;帮助&amp;rdquo;文本将与表单窗口小部件一起显示。即使您的字段未在表单上使用，它对于文档记录也很有用。</target>
        </trans-unit>
        <trans-unit id="413d7f50b095c5f333be42cec2f2b2facaf1d4fd" translate="yes" xml:space="preserve">
          <source>Extra fields on many-to-many relationships</source>
          <target state="translated">多对多关系的额外字段</target>
        </trans-unit>
        <trans-unit id="c94217b7743f4d934ed32a5947bdaa5ccfdc2f38" translate="yes" xml:space="preserve">
          <source>Extra instance methods</source>
          <target state="translated">额外的实例方法</target>
        </trans-unit>
        <trans-unit id="2bc192fff945387981281bee55249580a3cb8ac8" translate="yes" xml:space="preserve">
          <source>Extra keyword arguments will be stored for &lt;a href=&quot;#custom-feed-generators&quot;&gt;custom feed generators&lt;/a&gt;.</source>
          <target state="translated">额外的关键字参数将为&lt;a href=&quot;#custom-feed-generators&quot;&gt;自定义的提要生成器&lt;/a&gt;存储。</target>
        </trans-unit>
        <trans-unit id="1de60cebc8b1c2a913565910ef4c0681de5f5f09" translate="yes" xml:space="preserve">
          <source>Extra niceties</source>
          <target state="translated">额外礼遇</target>
        </trans-unit>
        <trans-unit id="18e0a564566ba2e992d00abe4bc3f66763d44ffd" translate="yes" xml:space="preserve">
          <source>Extra parameters to pass to the cache backend. Available parameters vary depending on your cache backend.</source>
          <target state="translated">传递给缓存后端的额外参数。可用的参数根据你的缓存后端不同而不同。</target>
        </trans-unit>
        <trans-unit id="7c3df0ba9527c8c878a3bebf0f957c9aa10bdd2e" translate="yes" xml:space="preserve">
          <source>Extra parameters to pass to the template backend. Available parameters vary depending on the template backend. See &lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/a&gt; for the options of the built-in backends.</source>
          <target state="translated">额外的参数传递给模板后端。可用参数取决于模板后端。有关内置后端的选项，请参见&lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt; &lt;code&gt;Jinja2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bfa77cda43c1228e4bba903dc9f4d09a520cdc91" translate="yes" xml:space="preserve">
          <source>Extra parameters to use when connecting to the database. Available parameters vary depending on your database backend.</source>
          <target state="translated">连接到数据库时要使用的额外参数。可用的参数根据你的数据库后端不同而不同。</target>
        </trans-unit>
        <trans-unit id="06f7ef32cde32c6af7e519db64658b977f7290ac" translate="yes" xml:space="preserve">
          <source>Extra permissions to enter into the permissions table when creating this object. Add, change, delete, and view permissions are automatically created for each model. This example specifies an extra permission, &lt;code&gt;can_deliver_pizzas&lt;/code&gt;:</source>
          <target state="translated">创建此对象时，要在权限表中输入额外的权限。将自动为每个模型创建添加，更改，删除和查看权限。此示例指定了一个额外的权限 &lt;code&gt;can_deliver_pizzas&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2b6d70cb8317da99e429494a2ef7ef0755767b37" translate="yes" xml:space="preserve">
          <source>Extra tags are added before the default tag for that level and are space separated.</source>
          <target state="translated">额外的标签添加在该级别的默认标签之前,并以空格分隔。</target>
        </trans-unit>
        <trans-unit id="7602339dd97389b55ed253c20219c34578dbdfde" translate="yes" xml:space="preserve">
          <source>Extracts a component of a date as a number.</source>
          <target state="translated">提取日期的一个组成部分作为一个数字。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="b45dfb8afe0c5e5bb27f803732560474bc45d849" translate="yes" xml:space="preserve">
          <source>Failing silently when the message framework is disabled</source>
          <target state="translated">当消息框架被禁用时,默默地失败了。</target>
        </trans-unit>
        <trans-unit id="47c2e227ef9914d7b093af5d1a2cd029c8ab17ac" translate="yes" xml:space="preserve">
          <source>Failing that, it looks at the &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations.</source>
          <target state="translated">如果失败，它将查看 &lt;code&gt;Accept-Language&lt;/code&gt; HTTP标头。此标头由您的浏览器发送，并按优先级告诉服务器您喜欢哪种语言。Django尝试在标头中使用每种语言，直到找到可用翻译的语言为止。</target>
        </trans-unit>
        <trans-unit id="b7709fb038886d0057fcdcfbfa7447b5510c88d1" translate="yes" xml:space="preserve">
          <source>Failing that, it looks for a cookie.</source>
          <target state="translated">如果没有,它就会寻找一个cookie。</target>
        </trans-unit>
        <trans-unit id="bd1403582a93eae6afc78ba671eb7bfd29e1a41c" translate="yes" xml:space="preserve">
          <source>Failing that, it tries to call a method with no arguments.</source>
          <target state="translated">如果失败了,它就会尝试调用一个没有参数的方法。</target>
        </trans-unit>
        <trans-unit id="78f2e4cd01251a37129c61231869ef7cd447bba6" translate="yes" xml:space="preserve">
          <source>Failing that, it uses the class attribute.</source>
          <target state="translated">否则,它就会使用类属性。</target>
        </trans-unit>
        <trans-unit id="daba93200f9881fcb90a858f1083e7b233503da4" translate="yes" xml:space="preserve">
          <source>Failing that, it uses the global &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">如果失败，它将使用全局&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGE_CODE&quot;&gt; &lt;code&gt;LANGUAGE_CODE&lt;/code&gt; &lt;/a&gt;设置。</target>
        </trans-unit>
        <trans-unit id="9376bd2640685d30a49f2800924a129239f3145d" translate="yes" xml:space="preserve">
          <source>Failure to do this may result in crashes and other odd behavior.</source>
          <target state="translated">如果不这样做,可能会导致崩溃和其他奇怪的行为。</target>
        </trans-unit>
        <trans-unit id="867930b7270d0a26287c69169778dcde1c78652a" translate="yes" xml:space="preserve">
          <source>Falling back to raw SQL</source>
          <target state="translated">回归到原始SQL</target>
        </trans-unit>
        <trans-unit id="3c507d35c8f807782c5814cb5c74433546913b36" translate="yes" xml:space="preserve">
          <source>Fathom</source>
          <target state="translated">Fathom</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="18e57197e43d3fe68f8e721d2e84d9ac95a73d3a" translate="yes" xml:space="preserve">
          <source>Feed classes subclass &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt;&lt;/a&gt;. They can live anywhere in your codebase.</source>
          <target state="translated">Feed类是&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;django.contrib.syndication.views.Feed&lt;/code&gt; &lt;/a&gt;子类。它们可以存在于您的代码库中的任何位置。</target>
        </trans-unit>
        <trans-unit id="ae2a87fa257d65ef465975910173b2832c69bc9b" translate="yes" xml:space="preserve">
          <source>Feeds created by the syndication framework automatically include the appropriate &lt;code&gt;&amp;lt;language&amp;gt;&lt;/code&gt; tag (RSS 2.0) or &lt;code&gt;xml:lang&lt;/code&gt; attribute (Atom). By default, this is &lt;a href=&quot;../utils#django.utils.translation.get_language&quot;&gt;&lt;code&gt;django.utils.translation.get_language()&lt;/code&gt;&lt;/a&gt;. You can change it by setting the &lt;code&gt;language&lt;/code&gt; class attribute.</source>
          <target state="translated">联合框架创建的提要自动包含适当的 &lt;code&gt;&amp;lt;language&amp;gt;&lt;/code&gt; 标记（RSS 2.0）或 &lt;code&gt;xml:lang&lt;/code&gt; 属性（Atom）。默认情况下，这是&lt;a href=&quot;../utils#django.utils.translation.get_language&quot;&gt; &lt;code&gt;django.utils.translation.get_language()&lt;/code&gt; &lt;/a&gt;。您可以通过设置 &lt;code&gt;language&lt;/code&gt; class属性来更改它。</target>
        </trans-unit>
        <trans-unit id="6a089a3455a9132618b650edc1b4b63342d919da" translate="yes" xml:space="preserve">
          <source>Fetches the translation object for a given language and activates it as the current translation object for the current thread.</source>
          <target state="translated">获取给定语言的翻译对象,并将其激活为当前线程的当前翻译对象。</target>
        </trans-unit>
        <trans-unit id="45a974c13aedb33cff91f2d14787eef2943d0e13" translate="yes" xml:space="preserve">
          <source>Field API reference</source>
          <target state="translated">字段API参考</target>
        </trans-unit>
        <trans-unit id="a76e02cbf32999a29e1b2b1585645a9926ddc707" translate="yes" xml:space="preserve">
          <source>Field access API</source>
          <target state="translated">外地访问API</target>
        </trans-unit>
        <trans-unit id="282aaa04aad4c1c7bd5570bd49d88ec663e21324" translate="yes" xml:space="preserve">
          <source>Field arguments</source>
          <target state="translated">字段参数</target>
        </trans-unit>
        <trans-unit id="e71fe26990b7a34495c8ffcbd682b9c85ef4c500" translate="yes" xml:space="preserve">
          <source>Field attribute reference</source>
          <target state="translated">字段属性参考</target>
        </trans-unit>
        <trans-unit id="1e5d6ae38bba9092fbe0789f613d8ff5f70af916" translate="yes" xml:space="preserve">
          <source>Field data</source>
          <target state="translated">外地数据</target>
        </trans-unit>
        <trans-unit id="c0d3f0c4a7826daabb87e544c07e16ae9a1aae25" translate="yes" xml:space="preserve">
          <source>Field deconstruction</source>
          <target state="translated">外地解体</target>
        </trans-unit>
        <trans-unit id="e9a1f3162e984c22776c04000f60154f1ea2d6b7" translate="yes" xml:space="preserve">
          <source>Field lookups</source>
          <target state="translated">字段查询</target>
        </trans-unit>
        <trans-unit id="8ba1e33ebf2d161e319e0f55bd5ed96a5be22912" translate="yes" xml:space="preserve">
          <source>Field lookups are how you specify the meat of an SQL &lt;code&gt;WHERE&lt;/code&gt; clause. They&amp;rsquo;re specified as keyword arguments to the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">字段查找是您如何指定SQL &lt;code&gt;WHERE&lt;/code&gt; 子句的内容。它们被指定为&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt;方法&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; 的&lt;/a&gt;关键字参数。</target>
        </trans-unit>
        <trans-unit id="de02473788e53e5314ba20e745a81a059534078a" translate="yes" xml:space="preserve">
          <source>Field lookups are how you specify the meat of an SQL &lt;code&gt;WHERE&lt;/code&gt; clause. They&amp;rsquo;re specified as keyword arguments to the &lt;code&gt;QuerySet&lt;/code&gt; methods &lt;a href=&quot;#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">字段查找是您如何指定SQL &lt;code&gt;WHERE&lt;/code&gt; 子句的内容。它们被指定为 &lt;code&gt;QuerySet&lt;/code&gt; 方法&lt;a href=&quot;#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; 的&lt;/a&gt;关键字参数。</target>
        </trans-unit>
        <trans-unit id="edd206db8bde7bd496ee0a188e1b235db841d06e" translate="yes" xml:space="preserve">
          <source>Field name &amp;ldquo;hiding&amp;rdquo; is not permitted</source>
          <target state="translated">字段名称&amp;ldquo;隐藏&amp;rdquo;是不允许的</target>
        </trans-unit>
        <trans-unit id="9f84cd5b8686ba36d2da6cdcdf6560cb8c808bc7" translate="yes" xml:space="preserve">
          <source>Field name restrictions</source>
          <target state="translated">字段名限制</target>
        </trans-unit>
        <trans-unit id="6c79fbefec29de2b101946780ef45e1143ad0b98" translate="yes" xml:space="preserve">
          <source>Field names in &lt;code&gt;list_filter&lt;/code&gt; can also span relations using the &lt;code&gt;__&lt;/code&gt; lookup, for example:</source>
          <target state="translated">&lt;code&gt;list_filter&lt;/code&gt; 中的字段名称也可以使用 &lt;code&gt;__&lt;/code&gt; 查找来跨越关系，例如：</target>
        </trans-unit>
        <trans-unit id="be3f93fdeca716d06ed041ec33499ba88ce49e88" translate="yes" xml:space="preserve">
          <source>Field options</source>
          <target state="translated">字段选项</target>
        </trans-unit>
        <trans-unit id="3d706d3e63f5c876c490f7bad6178a61d0e1fe44" translate="yes" xml:space="preserve">
          <source>Field types</source>
          <target state="translated">字段类型</target>
        </trans-unit>
        <trans-unit id="c746afbe662ca1098fcbb794dd1cc489ba49c934" translate="yes" xml:space="preserve">
          <source>Field, model, manager, and database checks</source>
          <target state="translated">领域、模型、管理者和数据库检查</target>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="d687c0519153fa97398989418fffd131cb65322d" translate="yes" xml:space="preserve">
          <source>Fields can also define their own &lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt;&lt;code&gt;label_suffix&lt;/code&gt;&lt;/a&gt;. This will take precedence over &lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt;&lt;code&gt;Form.label_suffix&lt;/code&gt;&lt;/a&gt;. The suffix can also be overridden at runtime using the &lt;code&gt;label_suffix&lt;/code&gt; parameter to &lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt;&lt;code&gt;label_tag()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">字段也可以定义自己的&lt;a href=&quot;fields#django.forms.Field.label_suffix&quot;&gt; &lt;code&gt;label_suffix&lt;/code&gt; &lt;/a&gt;。这将优先于&lt;a href=&quot;#django.forms.Form.label_suffix&quot;&gt; &lt;code&gt;Form.label_suffix&lt;/code&gt; &lt;/a&gt;。也可以在运行时使用&lt;a href=&quot;#django.forms.BoundField.label_tag&quot;&gt; &lt;code&gt;label_tag()&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;label_suffix&lt;/code&gt; 参数覆盖后缀。</target>
        </trans-unit>
        <trans-unit id="8c31c1b8a22e80178c8f35c1a32489ad6b27fe89" translate="yes" xml:space="preserve">
          <source>Fields defined declaratively are left as-is, therefore any customizations made to &lt;code&gt;Meta&lt;/code&gt; attributes such as &lt;code&gt;widgets&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;help_texts&lt;/code&gt;, or &lt;code&gt;error_messages&lt;/code&gt; are ignored; these only apply to fields that are generated automatically.</source>
          <target state="translated">声明性定义的字段保持原样，因此将忽略对 &lt;code&gt;Meta&lt;/code&gt; 属性（如 &lt;code&gt;widgets&lt;/code&gt; ， &lt;code&gt;labels&lt;/code&gt; ， &lt;code&gt;help_texts&lt;/code&gt; 或 &lt;code&gt;error_messages&lt;/code&gt; )进行的任何自定义；这些仅适用于自动生成的字段。</target>
        </trans-unit>
        <trans-unit id="2e4b54398209b421c31d866803a092dc90d5f00e" translate="yes" xml:space="preserve">
          <source>Fields in a model must somehow be converted to fit into an existing database column type. Different databases provide different sets of valid column types, but the rule is still the same: those are the only types you have to work with. Anything you want to store in the database must fit into one of those types.</source>
          <target state="translated">模型中的字段必须以某种方式转换为适合现有数据库的列类型。不同的数据库提供了不同的有效列类型集,但规则仍然是一样的:这些是你必须使用的唯一类型。你想在数据库中存储的任何东西都必须适合这些类型之一。</target>
        </trans-unit>
        <trans-unit id="a1ce3604b2bea58b4cfbd39c366a9f2a49f3af6f" translate="yes" xml:space="preserve">
          <source>Fields inherited from abstract base classes can be overridden with another field or value, or be removed with &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">从抽象基类继承的字段可以用另一个字段或值覆盖，也可以用 &lt;code&gt;None&lt;/code&gt; 删除。</target>
        </trans-unit>
        <trans-unit id="ab3bfc05c4cd1e813b9d0f7e2113e49dbffe2ad8" translate="yes" xml:space="preserve">
          <source>Fields may also be left out:</source>
          <target state="translated">字段也可以不写。</target>
        </trans-unit>
        <trans-unit id="735f77b3cf32e7c5bd2499b099e098b496222116" translate="yes" xml:space="preserve">
          <source>Fields often receive their values as a different type, either from serialization or from forms.</source>
          <target state="translated">字段经常以不同的类型接收它们的值,要么来自序列化,要么来自表单。</target>
        </trans-unit>
        <trans-unit id="649dca6dab9c7c229f6569d38d4d5b19292672ac" translate="yes" xml:space="preserve">
          <source>Fields part (e.g. &lt;code&gt;Book.objects.filter(author__best_friends__first_name...&lt;/code&gt;);</source>
          <target state="translated">字段部分（例如 &lt;code&gt;Book.objects.filter(author__best_friends__first_name...&lt;/code&gt; ）;</target>
        </trans-unit>
        <trans-unit id="6b0b0df8fdb846cd8048a567025b5eaea5d1a48e" translate="yes" xml:space="preserve">
          <source>Fields that are mentioned in the &lt;code&gt;order_by()&lt;/code&gt; part of a queryset (or which are used in the default ordering on a model) are used when selecting the output data, even if they are not otherwise specified in the &lt;code&gt;values()&lt;/code&gt; call. These extra fields are used to group &amp;ldquo;like&amp;rdquo; results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things.</source>
          <target state="translated">选择输出数据时，将使用在查询集的 &lt;code&gt;order_by()&lt;/code&gt; 部分中提到的字段（或在模型的默认排序中使用的 &lt;code&gt;values()&lt;/code&gt; ，即使未在values（）调用中另行指定这些字段。这些额外的字段用于将&amp;ldquo;喜欢&amp;rdquo;的结果分组在一起，否则它们会使相同的结果行看起来是分开的。特别是在计数时，会显示出来。</target>
        </trans-unit>
        <trans-unit id="411569bb97e7d67430cbe51d6736a6ce69285486" translate="yes" xml:space="preserve">
          <source>Fields which handle relationships</source>
          <target state="translated">处理关系的领域</target>
        </trans-unit>
        <trans-unit id="c86a640297208576f75bdb7a600c45029133d4ec" translate="yes" xml:space="preserve">
          <source>Fields, models, model managers, and database backends all implement a &lt;code&gt;check()&lt;/code&gt; method that is already registered with the check framework. If you want to add extra checks, you can extend the implementation on the base class, perform any extra checks you need, and append any messages to those generated by the base class. It&amp;rsquo;s recommended that you delegate each check to separate methods.</source>
          <target state="translated">字段，模型，模型管理器和数据库后端都实现了已经在检查框架中注册的 &lt;code&gt;check()&lt;/code&gt; 方法。如果要添加额外的检查，则可以在基类上扩展实现，执行所需的任何额外的检查，并将任何消息追加到由基类生成的消息中。建议您将每个检查委托给单独的方法。</target>
        </trans-unit>
        <trans-unit id="c09ab9ea91985578fea6798c7cff8723d2b9441b" translate="yes" xml:space="preserve">
          <source>File Uploads</source>
          <target state="translated">文件上传</target>
        </trans-unit>
        <trans-unit id="1d9e62a1fedfedfcb20115ceea1d374d7dda8495" translate="yes" xml:space="preserve">
          <source>File a ticket on the &lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;Django trac&lt;/a&gt; if you think there&amp;rsquo;s a bug. Make sure to provide a complete description of the problem, versions used, and specify the component as &amp;ldquo;GIS&amp;rdquo;.</source>
          <target state="translated">如果您认为存在错误，请在&lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;Django跟踪&lt;/a&gt;上提交票证。确保提供问题的完整描述，使用的版本，并将组件指定为&amp;ldquo; GIS&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="1a7ab172756297721d64b7156ecbe6a065edd437" translate="yes" xml:space="preserve">
          <source>File backend</source>
          <target state="translated">文件后端</target>
        </trans-unit>
        <trans-unit id="b4af38cf5f37ffcfc2b4fe1a33a1925a531bb6b9" translate="yes" xml:space="preserve">
          <source>File fields</source>
          <target state="translated">文件领域</target>
        </trans-unit>
        <trans-unit id="f315ee9e3108a80c179abb06fe33569d756f7ff5" translate="yes" xml:space="preserve">
          <source>File handling</source>
          <target state="translated">文件处理</target>
        </trans-unit>
        <trans-unit id="1ac64f740855657dfcf61583d119bf59cfc9325e" translate="yes" xml:space="preserve">
          <source>File sizes and SI units</source>
          <target state="translated">文件大小和SI单位</target>
        </trans-unit>
        <trans-unit id="4fbddfd9eb12271294f00a76c9a60f72b6ebe149" translate="yes" xml:space="preserve">
          <source>File storage</source>
          <target state="translated">文件存储</target>
        </trans-unit>
        <trans-unit id="71025f778a7a21d0f22a6af0bc522d944a87f0ea" translate="yes" xml:space="preserve">
          <source>File storage API</source>
          <target state="translated">文件存储API</target>
        </trans-unit>
        <trans-unit id="f9c9e67f41f3c2b222b70fa3cecb8fce951b7d30" translate="yes" xml:space="preserve">
          <source>File upload handler to stream uploads into memory (used for small files).</source>
          <target state="translated">文件上传处理程序,将上传的文件以流式传输到内存中(用于小文件)。</target>
        </trans-unit>
        <trans-unit id="ba4a0b1594c6d040cfba60824c3d79e33345a5ba" translate="yes" xml:space="preserve">
          <source>File upload widgets</source>
          <target state="translated">文件上传小部件</target>
        </trans-unit>
        <trans-unit id="1034ff014ad9c6d1a9f554317aa69386237c2716" translate="yes" xml:space="preserve">
          <source>File uploads</source>
          <target state="translated">文件上传</target>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="5a808ab38206da493d5c1218c6fc2ffc7b0a7b8d" translate="yes" xml:space="preserve">
          <source>Files are not placed directly in this directory, but in a directory named as the locale, and must be named &lt;code&gt;formats.py&lt;/code&gt;. Be careful not to put sensitive information in these files as values inside can be exposed if you pass the string to &lt;code&gt;django.utils.formats.get_format()&lt;/code&gt; (used by the &lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; template filter).</source>
          <target state="translated">文件不是直接放置在此目录中，而是放置在名为语言环境的目录中，并且必须命名为 &lt;code&gt;formats.py&lt;/code&gt; 。注意不要将敏感信息放在这些文件中，因为如果将字符串传递给 &lt;code&gt;django.utils.formats.get_format()&lt;/code&gt; （由&lt;a href=&quot;../../ref/templates/builtins#std:templatefilter-date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;模板过滤器使用），则可能暴露其中的值。</target>
        </trans-unit>
        <trans-unit id="b332b7daf9a3a02657d8c693e3a869fe55fa2105" translate="yes" xml:space="preserve">
          <source>Files are searched by using the &lt;a href=&quot;../settings#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;enabled finders&lt;/code&gt;&lt;/a&gt;. The default is to look in all locations defined in &lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt; and in the &lt;code&gt;'static'&lt;/code&gt; directory of apps specified by the &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">使用&lt;a href=&quot;../settings#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;enabled finders&lt;/code&gt; &lt;/a&gt;搜索文件。默认设置是在&lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt; &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;设置指定的应用程序的 &lt;code&gt;'static'&lt;/code&gt; 目录中定义的所有位置中查找。</target>
        </trans-unit>
        <trans-unit id="2c4cb9ddfc80d249fbc6e428155e2ef6130c9fde" translate="yes" xml:space="preserve">
          <source>Filesystem caching</source>
          <target state="translated">文件系统缓存</target>
        </trans-unit>
        <trans-unit id="bd3f98a9ded8f39a59250120171f66eaa1a37658" translate="yes" xml:space="preserve">
          <source>Filesystem path to the application directory, e.g. &lt;code&gt;'/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'&lt;/code&gt;.</source>
          <target state="translated">应用程序目录的文件系统路径，例如 &lt;code&gt;'/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dec2af05161a7d1f37defc8ce43fa042e1b1e142" translate="yes" xml:space="preserve">
          <source>Filesystem support for UTF-8 file names varies and might depend on the environment. Check your current configuration in an interactive Python shell by running:</source>
          <target state="translated">文件系统对UTF-8文件名的支持有所不同,可能取决于环境。在交互式的Python shell中运行以下命令来检查当前的配置。</target>
        </trans-unit>
        <trans-unit id="064a6ecd0c2f43e9d807415fbc454164583413f8" translate="yes" xml:space="preserve">
          <source>Filter arguments that contain spaces must be quoted; for example, to join a list with commas and spaces you&amp;rsquo;d use &lt;code&gt;{{ list|join:&quot;, &quot; }}&lt;/code&gt;.</source>
          <target state="translated">包含空格的过滤器参数必须用引号引起来；例如，要使用逗号和空格连接列表，可以使用 &lt;code&gt;{{ list|join:&quot;, &quot; }}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="baa5a4aff7498791cba3132ca42f419049e06250" translate="yes" xml:space="preserve">
          <source>Filtered &lt;code&gt;QuerySet&lt;/code&gt;s are unique</source>
          <target state="translated">过滤后的 &lt;code&gt;QuerySet&lt;/code&gt; 是唯一的</target>
        </trans-unit>
        <trans-unit id="b894cdef7d89584d0c37e80b41e691627b9792b3" translate="yes" xml:space="preserve">
          <source>Filtering a &lt;code&gt;DateTimeField&lt;/code&gt; with dates won&amp;rsquo;t include items on the last day, because the bounds are interpreted as &amp;ldquo;0am on the given date&amp;rdquo;. If &lt;code&gt;pub_date&lt;/code&gt; was a &lt;code&gt;DateTimeField&lt;/code&gt;, the above expression would be turned into this SQL:</source>
          <target state="translated">用日期过滤 &lt;code&gt;DateTimeField&lt;/code&gt; 不会包含最后一天的项目，因为边界被解释为&amp;ldquo;给定日期的凌晨0点&amp;rdquo;。如果 &lt;code&gt;pub_date&lt;/code&gt; 是 &lt;code&gt;DateTimeField&lt;/code&gt; ，则上面的表达式将变为以下SQL：</target>
        </trans-unit>
        <trans-unit id="21c21863ced6fea985f370603935cf40144ee066" translate="yes" xml:space="preserve">
          <source>Filtering based on related fields is still possible, though:</source>
          <target state="translated">不过还是可以根据相关字段进行过滤。</target>
        </trans-unit>
        <trans-unit id="c125011ee5e71a5527fd017471a1ab6ae4a0a8f3" translate="yes" xml:space="preserve">
          <source>Filtering error reports</source>
          <target state="translated">过滤错误报告</target>
        </trans-unit>
        <trans-unit id="ec57d8e8dc39b85d41897169a222ce9aca885b3d" translate="yes" xml:space="preserve">
          <source>Filtering on a &lt;code&gt;Subquery()&lt;/code&gt; or &lt;code&gt;Exists()&lt;/code&gt; expressions</source>
          <target state="translated">在 &lt;code&gt;Subquery()&lt;/code&gt; 或 &lt;code&gt;Exists()&lt;/code&gt; 表达式上进行过滤</target>
        </trans-unit>
        <trans-unit id="bbeb1a129ed00a4be852142a445f31b431d9e37f" translate="yes" xml:space="preserve">
          <source>Filtering on annotations</source>
          <target state="translated">筛选注释</target>
        </trans-unit>
        <trans-unit id="d4d2a915bbe6eae704a47051c5580987e9df5f97" translate="yes" xml:space="preserve">
          <source>Filtering sensitive data is a hard problem, and it&amp;rsquo;s nearly impossible to guarantee that sensitive data won&amp;rsquo;t leak into an error report. Therefore, error reports should only be available to trusted team members and you should avoid transmitting error reports unencrypted over the Internet (such as through email).</source>
          <target state="translated">筛选敏感数据是一个难题，几乎不可能保证敏感数据不会泄漏到错误报告中。因此，错误报告仅应提供给受信任的团队成员，并且您应避免通过Internet（例如通过电子邮件）传输未经加密的错误报告。</target>
        </trans-unit>
        <trans-unit id="b300bf2848881dd005ab05cfb5d3067621063178" translate="yes" xml:space="preserve">
          <source>Filtering sensitive information</source>
          <target state="translated">过滤敏感信息</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="37d1a04fb6ac0e4121a6fbe09fb442246515bc5f" translate="yes" xml:space="preserve">
          <source>Filters and auto-escaping</source>
          <target state="translated">滤镜和自动收尾</target>
        </trans-unit>
        <trans-unit id="c2ec981eb8d58b3ef43b299478b6a29120b322e3" translate="yes" xml:space="preserve">
          <source>Filters and time zones</source>
          <target state="translated">滤波器和时区</target>
        </trans-unit>
        <trans-unit id="df17e555b6c3a6eea091cba497e7a85d2fbb7246" translate="yes" xml:space="preserve">
          <source>Filters can also be used to modify the logging record prior to being emitted. For example, you could write a filter that downgrades &lt;code&gt;ERROR&lt;/code&gt; log records to &lt;code&gt;WARNING&lt;/code&gt; records if a particular set of criteria are met.</source>
          <target state="translated">过滤器还可以用于在发出之前修改日志记录。例如，您可以编写一个过滤器，如果满足一组特定的条件，则将 &lt;code&gt;ERROR&lt;/code&gt; 日志记录降级为 &lt;code&gt;WARNING&lt;/code&gt; 记录。</target>
        </trans-unit>
        <trans-unit id="a8964d1e419845ad4c18fd2f8649fc00791c6f00" translate="yes" xml:space="preserve">
          <source>Filters can be &amp;ldquo;chained.&amp;rdquo; The output of one filter is applied to the next. &lt;code&gt;{{ text|escape|linebreaks }}&lt;/code&gt; is a common idiom for escaping text contents, then converting line breaks to &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">过滤器可以&amp;ldquo;链接&amp;rdquo;。一个滤波器的输出将应用于下一个。 &lt;code&gt;{{ text|escape|linebreaks }}&lt;/code&gt; 是用于转义文本内容，然后将换行符转换为 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标签的常见用法。</target>
        </trans-unit>
        <trans-unit id="e738b480fb11b865a70faf1e8e3799fdf968de6e" translate="yes" xml:space="preserve">
          <source>Filters can be installed on loggers or on handlers; multiple filters can be used in a chain to perform multiple filtering actions.</source>
          <target state="translated">过滤器可安装在记录仪或处理机上;多个过滤器可在一个链中使用,以执行多个过滤操作。</target>
        </trans-unit>
        <trans-unit id="02d84f01927ff49807c91015e758e0823bc84dd0" translate="yes" xml:space="preserve">
          <source>Filters can reference fields on the model</source>
          <target state="translated">过滤器可以引用模型上的字段</target>
        </trans-unit>
        <trans-unit id="36ecc47b08bb577fdfadae1bfa24d7ce8abdc25f" translate="yes" xml:space="preserve">
          <source>Filters look like this: &lt;code&gt;{{ name|lower }}&lt;/code&gt;. This displays the value of the &lt;code&gt;{{ name }}&lt;/code&gt; variable after being filtered through the &lt;a href=&quot;builtins#std:templatefilter-lower&quot;&gt;&lt;code&gt;lower&lt;/code&gt;&lt;/a&gt; filter, which converts text to lowercase. Use a pipe (&lt;code&gt;|&lt;/code&gt;) to apply a filter.</source>
          <target state="translated">过滤器如下所示： &lt;code&gt;{{ name|lower }}&lt;/code&gt; 。通过&lt;a href=&quot;builtins#std:templatefilter-lower&quot;&gt; &lt;code&gt;lower&lt;/code&gt; &lt;/a&gt;过滤器过滤后，这将显示 &lt;code&gt;{{ name }}&lt;/code&gt; 变量的值，该变量将文本转换为小写。使用管道（ &lt;code&gt;|&lt;/code&gt; ）应用过滤器。</target>
        </trans-unit>
        <trans-unit id="0e1b2c782245e2ea1e80ac7aa3a8a9f94d0ac56d" translate="yes" xml:space="preserve">
          <source>Filters on &amp;lsquo;normal&amp;rsquo; fields (e.g. &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;) may be chained with those on geographic fields. Geographic lookups accept geometry and raster input on both sides and input types can be mixed freely.</source>
          <target state="translated">&amp;ldquo;常规&amp;rdquo;字段（例如&lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;）上的过滤器可以与地理字段上的过滤器链接在一起。地理查询在两侧均接受几何图形和栅格输入，并且可以自由混合输入类型。</target>
        </trans-unit>
        <trans-unit id="a4cada1706385afc3adccbac6d998fce15b35325" translate="yes" xml:space="preserve">
          <source>Filters that are applied to an invalid variable will only be applied if &lt;code&gt;string_if_invalid&lt;/code&gt; is set to &lt;code&gt;''&lt;/code&gt; (the empty string). If &lt;code&gt;string_if_invalid&lt;/code&gt; is set to any other value, variable filters will be ignored.</source>
          <target state="translated">仅当 &lt;code&gt;string_if_invalid&lt;/code&gt; 设置为 &lt;code&gt;''&lt;/code&gt; （空字符串）时，才会应用应用于无效变量的过滤器。如果 &lt;code&gt;string_if_invalid&lt;/code&gt; 设置为任何其他值，则变量过滤器将被忽略。</target>
        </trans-unit>
        <trans-unit id="afc3b1fa886539f440b0ef0b2454da8bac2d0877" translate="yes" xml:space="preserve">
          <source>Filters the contents of the block through one or more filters. Multiple filters can be specified with pipes and filters can have arguments, just as in variable syntax.</source>
          <target state="translated">通过一个或多个过滤器过滤块的内容。可以用管道指定多个过滤器,过滤器可以有参数,就像变量语法一样。</target>
        </trans-unit>
        <trans-unit id="74f6dad66e444f0ae376477bab0028a633de518a" translate="yes" xml:space="preserve">
          <source>Filters transform the values of variables and tag arguments.</source>
          <target state="translated">过滤器转换变量和标记参数的值。</target>
        </trans-unit>
        <trans-unit id="e479ba056762d32f930830c86c57db13e38da04f" translate="yes" xml:space="preserve">
          <source>Finally Django runs the &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method of each application configuration.</source>
          <target state="translated">最后，Django运行每个应用程序配置的&lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt; &lt;code&gt;ready()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="7484b10d5859089fb94b711d3a65b9931217660f" translate="yes" xml:space="preserve">
          <source>Finally for this example, suppose you want to add extra managers to the child class, but still use the default from &lt;code&gt;AbstractBase&lt;/code&gt;. You can&amp;rsquo;t add the new manager directly in the child class, as that would override the default and you would have to also explicitly include all the managers from the abstract base class. The solution is to put the extra managers in another base class and introduce it into the inheritance hierarchy &lt;em&gt;after&lt;/em&gt; the defaults:</source>
          <target state="translated">最后，对于此示例，假设您要向子类添加额外的管理器，但仍使用 &lt;code&gt;AbstractBase&lt;/code&gt; 的默认管理器。您不能直接在子类中添加新管理器，因为这将覆盖默认值，并且还必须显式包括抽象基类中的所有管理器。解决方案是将额外的管理器放在另一个基类中，并将其引入默认值&lt;em&gt;之后&lt;/em&gt;的继承层次结构中：</target>
        </trans-unit>
        <trans-unit id="f252f3912ee8270c9c6e056b75c1aae80ee0ac41" translate="yes" xml:space="preserve">
          <source>Finally hook that view into your urls:</source>
          <target state="translated">最后把这个视图挂到你的urls里。</target>
        </trans-unit>
        <trans-unit id="b745f09072b34c554b7e55654dd490d47a16da00" translate="yes" xml:space="preserve">
          <source>Finally we bring this together in a new &lt;code&gt;AuthorDetail&lt;/code&gt; view. We already know that calling &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; on a class-based view gives us something that behaves exactly like a function based view, so we can do that at the point we choose between the two subviews.</source>
          <target state="translated">最后，我们在一个新的 &lt;code&gt;AuthorDetail&lt;/code&gt; 视图中将它们组合在一起。我们已经知道，在基于类的视图上调用&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt; &lt;code&gt;as_view()&lt;/code&gt; &lt;/a&gt;可以使我们的行为完全类似于基于函数的视图，因此我们可以在两个子视图之间进行选择。</target>
        </trans-unit>
        <trans-unit id="66c9ccae10ed2b23694f765b4228417a4924e330" translate="yes" xml:space="preserve">
          <source>Finally we combine the parts into an SQL expression with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, and supply all the parameters for the query. We then return a tuple containing the generated SQL string and the parameters.</source>
          <target state="translated">最后，我们将这些部分与 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 组合成一个SQL表达式，并提供查询的所有参数。然后，我们返回一个包含生成的SQL字符串和参数的元组。</target>
        </trans-unit>
        <trans-unit id="d2eb2a2b36ade57b93d5586d25a607a90abeb603" translate="yes" xml:space="preserve">
          <source>Finally, &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;install Django&lt;/a&gt; on your system.</source>
          <target state="translated">最后，在系统上&lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;安装Django&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5484ec9866989dbfac8528bb6dd3db714dd1ddce" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;as_table()&lt;/code&gt; outputs the form as an HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;. This is exactly the same as &lt;code&gt;print&lt;/code&gt;. In fact, when you &lt;code&gt;print&lt;/code&gt; a form object, it calls its &lt;code&gt;as_table()&lt;/code&gt; method behind the scenes:</source>
          <target state="translated">最后， &lt;code&gt;as_table()&lt;/code&gt; 将表单输出为HTML &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 。这与 &lt;code&gt;print&lt;/code&gt; 完全相同。实际上，当您 &lt;code&gt;print&lt;/code&gt; 表单对象时，它会在 &lt;code&gt;as_table()&lt;/code&gt; 调用其as_table（）方法：</target>
        </trans-unit>
        <trans-unit id="f6603469a430fe7317c80ca09845bcdc21b75157" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;full_clean()&lt;/code&gt; will check any unique constraints on your model.</source>
          <target state="translated">最后， &lt;code&gt;full_clean()&lt;/code&gt; 将检查模型上的所有唯一约束。</target>
        </trans-unit>
        <trans-unit id="2019efad06892eaf93b5bf539df6adb0e0145d27" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;register.filter()&lt;/code&gt; also accepts three keyword arguments, &lt;code&gt;is_safe&lt;/code&gt;, &lt;code&gt;needs_autoescape&lt;/code&gt;, and &lt;code&gt;expects_localtime&lt;/code&gt;. These arguments are described in &lt;a href=&quot;#filters-auto-escaping&quot;&gt;filters and auto-escaping&lt;/a&gt; and &lt;a href=&quot;#filters-timezones&quot;&gt;filters and time zones&lt;/a&gt; below.</source>
          <target state="translated">最后， &lt;code&gt;register.filter()&lt;/code&gt; 也接受三个关键字参数， &lt;code&gt;is_safe&lt;/code&gt; ， &lt;code&gt;needs_autoescape&lt;/code&gt; 和 &lt;code&gt;expects_localtime&lt;/code&gt; 。这些参数在下面的&lt;a href=&quot;#filters-auto-escaping&quot;&gt;过滤器和自动转义&lt;/a&gt;以及&lt;a href=&quot;#filters-timezones&quot;&gt;过滤器和时区&lt;/a&gt;中进行了描述。</target>
        </trans-unit>
        <trans-unit id="306b5cee8ba18e692cafa08cb4f14f745f2e0c11" translate="yes" xml:space="preserve">
          <source>Finally, Django comes with a &amp;ldquo;dummy&amp;rdquo; cache that doesn&amp;rsquo;t actually cache &amp;ndash; it just implements the cache interface without doing anything.</source>
          <target state="translated">最后，Django带有一个&amp;ldquo;虚拟&amp;rdquo;缓存，该缓存实际上并没有缓存-它只是实现了缓存接口而无所事事。</target>
        </trans-unit>
        <trans-unit id="40267a26a72668706858d04af947447e24d778f6" translate="yes" xml:space="preserve">
          <source>Finally, Django uses the concept of &amp;ldquo;template inheritance&amp;rdquo;. That&amp;rsquo;s what the &lt;code&gt;{% extends &quot;base.html&quot; %}&lt;/code&gt; does. It means &amp;ldquo;First load the template called &amp;lsquo;base&amp;rsquo;, which has defined a bunch of blocks, and fill the blocks with the following blocks.&amp;rdquo; In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what&amp;rsquo;s unique to that template.</source>
          <target state="translated">最后，Django使用&amp;ldquo;模板继承&amp;rdquo;的概念。这就是 &lt;code&gt;{% extends &quot;base.html&quot; %}&lt;/code&gt; 作用。它的意思是&amp;ldquo;首先加载名为'base'的模板，该模板已定义了许多块，并在随后的块中填充了这些块。&amp;rdquo; 简而言之，这使您可以大大减少模板中的冗余：每个模板只需要定义该模板唯一的内容。</target>
        </trans-unit>
        <trans-unit id="82301c6099c024cf55f29af10873bbd58c163855" translate="yes" xml:space="preserve">
          <source>Finally, MySQL has relatively small limits on name lengths for columns, tables and indexes, as well as a limit on the combined size of all columns an index covers. This means that indexes that are possible on other backends will fail to be created under MySQL.</source>
          <target state="translated">最后,MySQL对列、表和索引的名称长度限制相对较小,对索引覆盖的所有列的组合大小也有限制。这意味着,在其他后端上可以创建的索引在MySQL下将无法创建。</target>
        </trans-unit>
        <trans-unit id="e1fe06beb5b184511b52b82db0d899291a197824" translate="yes" xml:space="preserve">
          <source>Finally, a word on using &lt;code&gt;get_or_create()&lt;/code&gt; in Django views. Please make sure to use it only in &lt;code&gt;POST&lt;/code&gt; requests unless you have a good reason not to. &lt;code&gt;GET&lt;/code&gt; requests shouldn&amp;rsquo;t have any effect on data. Instead, use &lt;code&gt;POST&lt;/code&gt; whenever a request to a page has a side effect on your data. For more, see &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;Safe methods&lt;/strong&gt;&lt;/a&gt; in the HTTP spec.</source>
          <target state="translated">最后， &lt;code&gt;get_or_create()&lt;/code&gt; 在Django视图中使用get_or_create（）的方法。除非有充分的理由，否则请确保仅在 &lt;code&gt;POST&lt;/code&gt; 请求中使用它。 &lt;code&gt;GET&lt;/code&gt; 请求不应对数据有任何影响。相反，只要对页面的请求对数据有副作用，请使用 &lt;code&gt;POST&lt;/code&gt; 。有关更多信息，请参见HTTP规范中的&lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-4.2.1&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;安全方法&lt;/strong&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c40eaec225e59882f800eba203e6c05081d41e93" translate="yes" xml:space="preserve">
          <source>Finally, avoid aliasing your settings as module-level constants as &lt;code&gt;override_settings()&lt;/code&gt; won&amp;rsquo;t work on such values since they are only evaluated the first time the module is imported.</source>
          <target state="translated">最后，避免将您的设置别名为模块级常量，因为 &lt;code&gt;override_settings()&lt;/code&gt; 不适用于此类值，因为它们仅在首次导入模块时才进行评估。</target>
        </trans-unit>
        <trans-unit id="ff9baca2e992a0e98a104ea1b4ce704e7121cf14" translate="yes" xml:space="preserve">
          <source>Finally, before you deploy your application to production, you should run through our &lt;a href=&quot;checklist&quot;&gt;deployment checklist&lt;/a&gt; to ensure that your configurations are suitable.</source>
          <target state="translated">最后，在将应用程序部署到生产环境之前，应运行我们的&lt;a href=&quot;checklist&quot;&gt;部署清单，&lt;/a&gt;以确保您的配置合适。</target>
        </trans-unit>
        <trans-unit id="12e5c631fd09eda57ca89fcce607cf3f3163a88e" translate="yes" xml:space="preserve">
          <source>Finally, browse to &lt;code&gt;http://localhost:8000/admin/&lt;/code&gt;, and log in with the user you just created. Browse to any of the &lt;code&gt;WorldBorder&lt;/code&gt; entries &amp;ndash; the borders may be edited by clicking on a polygon and dragging the vertices to the desired position.</source>
          <target state="translated">最后，浏览至 &lt;code&gt;http://localhost:8000/admin/&lt;/code&gt; ，然后以刚刚创建的用户身份登录。浏览到任何 &lt;code&gt;WorldBorder&lt;/code&gt; 条目-可以通过单击多边形并将顶点拖动到所需位置来编辑边框。</target>
        </trans-unit>
        <trans-unit id="75df61e6676393f69526cf860e9d09ffe21f5dcf" translate="yes" xml:space="preserve">
          <source>Finally, configure, make and install PROJ.4:</source>
          <target state="translated">最后,配置、制作并安装PROJ.4。</target>
        </trans-unit>
        <trans-unit id="7a496304035024f7826ec5200acb03a7378bec7f" translate="yes" xml:space="preserve">
          <source>Finally, determine which of your application&amp;rsquo;s models should be editable in the admin interface. For each of those models, register them with the admin as described in &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最后，确定您的应用程序模型中的哪些模型应在管理界面中可编辑。对于每个模型，请按照&lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; 中的说明&lt;/a&gt;向管理员注册。</target>
        </trans-unit>
        <trans-unit id="82548b98e5f57caa40011e280e83e68504a44c79" translate="yes" xml:space="preserve">
          <source>Finally, edit your WSGI script &lt;code&gt;mysite.wsgi&lt;/code&gt; to tie Apache&amp;rsquo;s authentication to your site&amp;rsquo;s authentication mechanisms by importing the &lt;code&gt;check_password&lt;/code&gt; function:</source>
          <target state="translated">最后，通过导入 &lt;code&gt;check_password&lt;/code&gt; 函数，编辑WSGI脚本 &lt;code&gt;mysite.wsgi&lt;/code&gt; 以将Apache的身份验证与站点的身份验证机制联系起来：</target>
        </trans-unit>
        <trans-unit id="f4fbe23a0a4f1a1a7ad82d1bd5a261c78f914005" translate="yes" xml:space="preserve">
          <source>Finally, for GeoDjango to be able to find the KyngChaos SpatiaLite library, add the following to your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">最后，为了使GeoDjango能够找到KyngChaos SpatiaLite库，请将以下内容添加到 &lt;code&gt;settings.py&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="cc4c9bcb1cd46b0188d3f07b8a9f37d4a11b76c8" translate="yes" xml:space="preserve">
          <source>Finally, for GeoDjango to be able to find the SpatiaLite library, add the following to your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">最后，为了使GeoDjango能够找到SpatiaLite库，请将以下内容添加到您的 &lt;code&gt;settings.py&lt;/code&gt; 中：</target>
        </trans-unit>
        <trans-unit id="b144dd9ec36c070dc34d112ead2d5addb8133986" translate="yes" xml:space="preserve">
          <source>Finally, here&amp;rsquo;s an example of a fairly complex logging setup:</source>
          <target state="translated">最后，这是一个相当复杂的日志记录设置的示例：</target>
        </trans-unit>
        <trans-unit id="855b6d5f1ccab213dc5b32608617816a33cf5443" translate="yes" xml:space="preserve">
          <source>Finally, if &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;, you also need to properly set the &lt;a href=&quot;#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting. Failing to do so will result in all requests being returned as &amp;ldquo;Bad Request (400)&amp;rdquo;.</source>
          <target state="translated">最后，如果&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt;为 &lt;code&gt;False&lt;/code&gt; ，则还需要正确设置&lt;a href=&quot;#std:setting-ALLOWED_HOSTS&quot;&gt; &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; &lt;/a&gt;设置。否则，所有请求都将作为&amp;ldquo;错误请求（400）&amp;rdquo;返回。</target>
        </trans-unit>
        <trans-unit id="d465d68a14cb885607a31e7005a4de85bcfdddcc" translate="yes" xml:space="preserve">
          <source>Finally, if you only need to have a simple syntax for your custom context-updating template tag, consider using the &lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt;&lt;code&gt;simple_tag()&lt;/code&gt;&lt;/a&gt; shortcut, which supports assigning the tag results to a template variable.</source>
          <target state="translated">最后，如果只需要对自定义上下文更新模板标签使用简单的语法，请考虑使用&lt;a href=&quot;#django.template.Library.simple_tag&quot;&gt; &lt;code&gt;simple_tag()&lt;/code&gt; &lt;/a&gt;快捷方式，该快捷方式支持将标签结果分配给模板变量。</target>
        </trans-unit>
        <trans-unit id="9fdd2ae212537eaacac0577eae9438d74381650f" translate="yes" xml:space="preserve">
          <source>Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields in any way, you can use &lt;a href=&quot;#proxy-models&quot;&gt;Proxy models&lt;/a&gt;.</source>
          <target state="translated">最后，如果您只想修改模型的Python级行为，而又不以任何方式更改models字段，则可以使用&lt;a href=&quot;#proxy-models&quot;&gt;Proxy模型&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bd4ebdb64c40e31366b0e2c24cb39052f3a86668" translate="yes" xml:space="preserve">
          <source>Finally, if you want complete control over of a field &amp;ndash; including its type, validators, required, etc. &amp;ndash; you can do this by declaratively specifying fields like you would in a regular &lt;code&gt;Form&lt;/code&gt;.</source>
          <target state="translated">最后，如果您想完全控制某个字段（包括字段的类型，验证器，必填项等），则可以像在常规 &lt;code&gt;Form&lt;/code&gt; 中一样，声明性地指定字段来做到这一点。</target>
        </trans-unit>
        <trans-unit id="dfcbb1d9824d6d47858c41668312ca8ed762220a" translate="yes" xml:space="preserve">
          <source>Finally, if you want to delete all the keys in the cache, use &lt;code&gt;cache.clear()&lt;/code&gt;. Be careful with this; &lt;code&gt;clear()&lt;/code&gt; will remove &lt;em&gt;everything&lt;/em&gt; from the cache, not just the keys set by your application.</source>
          <target state="translated">最后，如果要删除缓存中的所有键，请使用 &lt;code&gt;cache.clear()&lt;/code&gt; 。注意这一点。 &lt;code&gt;clear()&lt;/code&gt; 将从缓存中删除&lt;em&gt;所有内容&lt;/em&gt;，而不仅仅是您的应用程序设置的键。</target>
        </trans-unit>
        <trans-unit id="4e79f320cb0240d33a245677392be00e0e634041" translate="yes" xml:space="preserve">
          <source>Finally, if your column requires truly complex SQL setup, return &lt;code&gt;None&lt;/code&gt; from &lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt;&lt;code&gt;db_type()&lt;/code&gt;&lt;/a&gt;. This will cause Django&amp;rsquo;s SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, of course, but this gives you a way to tell Django to get out of the way.</source>
          <target state="translated">最后，如果您的列需要真正复杂的SQL设置，请从&lt;a href=&quot;../ref/models/fields#django.db.models.Field.db_type&quot;&gt; &lt;code&gt;db_type()&lt;/code&gt; &lt;/a&gt;返回 &lt;code&gt;None&lt;/code&gt; 。这将导致Django的SQL创建代码跳过该字段。然后，您负责以其他某种方式在右表中创建该列，但是，这为您提供了一种告诉Django摆脱困境的方法。</target>
        </trans-unit>
        <trans-unit id="4b372199964e2fb24560340217adf39c6cb2e9b6" translate="yes" xml:space="preserve">
          <source>Finally, in order to help you locate code that needs upgrading, Django raises a warning when you attempt to save a naive datetime to the database:</source>
          <target state="translated">最后,为了帮助你找到需要升级的代码,当你试图将一个naive datetime保存到数据库时,Django会发出警告。</target>
        </trans-unit>
        <trans-unit id="a8ceea170904d12a1b2a305076f5373f10971acf" translate="yes" xml:space="preserve">
          <source>Finally, in the above example, we remember to mark the result as safe so that our HTML is inserted directly into the template without further escaping.</source>
          <target state="translated">最后,在上面的例子中,我们记得将结果标记为安全,这样我们的HTML就会直接插入到模板中,而不需要进一步转义。</target>
        </trans-unit>
        <trans-unit id="3b58b4fc0d37b0500904ca859d6f665a75001b2b" translate="yes" xml:space="preserve">
          <source>Finally, in the settings file, we add the following (substituting &lt;code&gt;path.to.&lt;/code&gt; with the actual Python path to the module(s) where the routers are defined):</source>
          <target state="translated">最后，在设置文件中，添加以下内容（将 &lt;code&gt;path.to.&lt;/code&gt; 替换为定义路由器的模块的实际Python路径）：</target>
        </trans-unit>
        <trans-unit id="18faf076ef353dea3341f0a68404cd92fe6d44d6" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s important to call &lt;code&gt;showPage()&lt;/code&gt; and &lt;code&gt;save()&lt;/code&gt; on the PDF file.</source>
          <target state="translated">最后，在PDF文件上调用 &lt;code&gt;showPage()&lt;/code&gt; 和 &lt;code&gt;save()&lt;/code&gt; 很重要。</target>
        </trans-unit>
        <trans-unit id="d710d1ce0f9f49d4bfebd253087693a7db1b18cf" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s important to note that the Django database layer is merely an interface to your database. You can access your database via other tools, programming languages or database frameworks; there&amp;rsquo;s nothing Django-specific about your database.</source>
          <target state="translated">最后，需要注意的是，Django数据库层仅仅是数据库的接口。您可以通过其他工具，编程语言或数据库框架来访问数据库；没有关于您的数据库的特定于Django的信息。</target>
        </trans-unit>
        <trans-unit id="855182574bd0f55fdd45d0ca39998798d4c219a1" translate="yes" xml:space="preserve">
          <source>Finally, note a relationship is defined, using &lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;. That tells Django each &lt;code&gt;Choice&lt;/code&gt; is related to a single &lt;code&gt;Question&lt;/code&gt;. Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one.</source>
          <target state="translated">最后，注意使用&lt;a href=&quot;../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;定义了一个关系。这就告诉Django每个 &lt;code&gt;Choice&lt;/code&gt; 与一个 &lt;code&gt;Question&lt;/code&gt; 。Django支持所有常见的数据库关系：多对一，多对多和一对一。</target>
        </trans-unit>
        <trans-unit id="6314e42c3f9470281aa2864e7c7681c40b8c6ccf" translate="yes" xml:space="preserve">
          <source>Finally, note that you can call &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;order_by()&lt;/code&gt;, etc. after the &lt;code&gt;values()&lt;/code&gt; call, that means that these two calls are identical:</source>
          <target state="translated">最后，请注意，可以在 &lt;code&gt;values()&lt;/code&gt; 调用之后调用 &lt;code&gt;filter()&lt;/code&gt; ， &lt;code&gt;order_by()&lt;/code&gt; 等，这意味着这两个调用是相同的：</target>
        </trans-unit>
        <trans-unit id="e9e0c432d4c1c0f324717c7c1003e36a61fecea4" translate="yes" xml:space="preserve">
          <source>Finally, note that you can override the form field used for a given model field. See &lt;a href=&quot;#overriding-the-default-fields&quot;&gt;Overriding the default fields&lt;/a&gt; below.</source>
          <target state="translated">最后，请注意，您可以覆盖用于给定模型字段的表单字段。请参阅下面的&lt;a href=&quot;#overriding-the-default-fields&quot;&gt;覆盖默认字段&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9743b898367474965ebf376aa3504c5be173f876" translate="yes" xml:space="preserve">
          <source>Finally, note that you can&amp;rsquo;t define multiple &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tags with the same name in the same template. This limitation exists because a block tag works in &amp;ldquo;both&amp;rdquo; directions. That is, a block tag doesn&amp;rsquo;t just provide a hole to fill &amp;ndash; it also defines the content that fills the hole in the &lt;em&gt;parent&lt;/em&gt;. If there were two similarly-named &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tags in a template, that template&amp;rsquo;s parent wouldn&amp;rsquo;t know which one of the blocks&amp;rsquo; content to use.</source>
          <target state="translated">最后，请注意，您不能在同一模板中定义多个具有相同名称的&lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt;标签。存在此限制的原因是，块标签在&amp;ldquo;两个&amp;rdquo;方向上均起作用。也就是说，block标签不仅提供填充孔，还定义了填充&lt;em&gt;父级&lt;/em&gt;孔中的内容。如果模板中有两个名称相似的&lt;a href=&quot;builtins#std:templatetag-block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt;标签，则该模板的父级将不知道要使用哪个块内容。</target>
        </trans-unit>
        <trans-unit id="09b7888ce3860953a8e97b5c6c5cb529ccb8ba65" translate="yes" xml:space="preserve">
          <source>Finally, note that you&amp;rsquo;ll probably want to keep a normal (non-site-specific) &lt;code&gt;Manager&lt;/code&gt; on your model, even if you use &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;. As explained in the &lt;a href=&quot;../../topics/db/managers&quot;&gt;manager documentation&lt;/a&gt;, if you define a manager manually, then Django won&amp;rsquo;t create the automatic &lt;code&gt;objects = models.Manager()&lt;/code&gt; manager for you. Also note that certain parts of Django &amp;ndash; namely, the Django admin site and generic views &amp;ndash; use whichever manager is defined &lt;em&gt;first&lt;/em&gt; in the model, so if you want your admin site to have access to all objects (not just site-specific ones), put &lt;code&gt;objects = models.Manager()&lt;/code&gt; in your model, before you define &lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt;&lt;code&gt;CurrentSiteManager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最后，请注意，即使使用&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;，您也可能希望在模型上保留普通的（非特定于站点的） &lt;code&gt;Manager&lt;/code&gt; 。如&lt;a href=&quot;../../topics/db/managers&quot;&gt;管理员文档&lt;/a&gt;中所述，如果您手动定义管理员，则Django不会为您创建自动 &lt;code&gt;objects = models.Manager()&lt;/code&gt; 管理员。还要注意，Django的某些部分（即Django管理站点和通用视图）使用模型中&lt;em&gt;首先&lt;/em&gt;定义的管理器，因此，如果您希望管理站点可以访问所有对象（而不仅仅是特定于站点的对象），在定义&lt;a href=&quot;#django.contrib.sites.managers.CurrentSiteManager&quot;&gt; &lt;code&gt;CurrentSiteManager&lt;/code&gt; &lt;/a&gt;之前，将 &lt;code&gt;objects = models.Manager()&lt;/code&gt; 放入模型中。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="597d26c9a6435c4d3d729d8b833ba9daedca211d" translate="yes" xml:space="preserve">
          <source>Finally, our calendar system contains interesting traps for computers:</source>
          <target state="translated">最后,我们的日历系统包含了计算机的有趣陷阱。</target>
        </trans-unit>
        <trans-unit id="5c2802a46ddcce0d4a717df48b205688d98ef322" translate="yes" xml:space="preserve">
          <source>Finally, realize that &lt;code&gt;update()&lt;/code&gt; does an update at the SQL level and, thus, does not call any &lt;code&gt;save()&lt;/code&gt; methods on your models, nor does it emit the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals (which are a consequence of calling &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;Model.save()&lt;/code&gt;&lt;/a&gt;). If you want to update a bunch of records for a model that has a custom &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method, loop over them and call &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, like this:</source>
          <target state="translated">最后，意识到 &lt;code&gt;update()&lt;/code&gt; 在SQL级别进行更新，因此不会在模型上调用任何 &lt;code&gt;save()&lt;/code&gt; 方法，也不会发出&lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt;信号（这是调用&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;Model.save()&lt;/code&gt; &lt;/a&gt;）。如果要为具有自定义&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;方法的模型更新一堆记录，请遍历它们并调用&lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt;，如下所示：</target>
        </trans-unit>
        <trans-unit id="cef327d837a6ebcf77f58945fc7da002005d28f4" translate="yes" xml:space="preserve">
          <source>Finally, register the tag with your module&amp;rsquo;s &lt;code&gt;Library&lt;/code&gt; instance, as explained in &lt;a href=&quot;#howto-writing-custom-template-tags&quot;&gt;writing custom template tags&lt;/a&gt; above. Example:</source>
          <target state="translated">最后，按照上面&lt;a href=&quot;#howto-writing-custom-template-tags&quot;&gt;编写自定义模板标签中的&lt;/a&gt;说明，将标签注册到模块的 &lt;code&gt;Library&lt;/code&gt; 实例中。例：</target>
        </trans-unit>
        <trans-unit id="8b84b5ca6b61dd7ec3e13cb87b04368b16c3e016" translate="yes" xml:space="preserve">
          <source>Finally, register your &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; models with the admin site:</source>
          <target state="translated">最后，在管理站点上注册您的 &lt;code&gt;Person&lt;/code&gt; 和 &lt;code&gt;Group&lt;/code&gt; 模型：</target>
        </trans-unit>
        <trans-unit id="9ae59f1cd4f96cc1501fbd570f2103e93dd7c909" translate="yes" xml:space="preserve">
          <source>Finally, specify the custom model as the default user model for your project using the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt;&lt;code&gt;AUTH_USER_MODEL&lt;/code&gt;&lt;/a&gt; setting in your &lt;code&gt;settings.py&lt;/code&gt;:</source>
          <target state="translated">最后，使用 &lt;code&gt;settings.py&lt;/code&gt; 中的&lt;a href=&quot;../../ref/settings#std:setting-AUTH_USER_MODEL&quot;&gt; &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; &lt;/a&gt;设置将自定义模型指定为项目的默认用户模型：</target>
        </trans-unit>
        <trans-unit id="1de580b6192d9e344a15d96680c32ba2b8d2caae" translate="yes" xml:space="preserve">
          <source>Finally, the Django-provided base translation in &lt;code&gt;django/conf/locale&lt;/code&gt; is used as a fallback.</source>
          <target state="translated">最后， &lt;code&gt;django/conf/locale&lt;/code&gt; 中由Django提供的基础翻译被用作后备。</target>
        </trans-unit>
        <trans-unit id="c63e577d01012c7cf8876a70c793515073c96915" translate="yes" xml:space="preserve">
          <source>Finally, the following forms are tied to &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; and need to be rewritten or extended to work with a custom user model:</source>
          <target state="translated">最后，以下形式与&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; &lt;/a&gt;，需要重写或扩展以与自定义用户模型一起使用：</target>
        </trans-unit>
        <trans-unit id="329cb001d49bddce33496c86e763e7caf7228133" translate="yes" xml:space="preserve">
          <source>Finally, the size of a cookie can have an impact on the &lt;a href=&quot;https://yuiblog.com/blog/2007/03/01/performance-research-part-3/&quot;&gt;speed of your site&lt;/a&gt;.</source>
          <target state="translated">最后，cookie的大小可能会影响&lt;a href=&quot;https://yuiblog.com/blog/2007/03/01/performance-research-part-3/&quot;&gt;您网站&lt;/a&gt;的速度。</target>
        </trans-unit>
        <trans-unit id="9a9fb92891ed9e384c8c066d50ed2e6aa79110ed" translate="yes" xml:space="preserve">
          <source>Finally, there is the &lt;a href=&quot;#django.contrib.gis.geos.fromfile&quot;&gt;&lt;code&gt;fromfile()&lt;/code&gt;&lt;/a&gt; factory method which returns a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object from a file:</source>
          <target state="translated">最后，有一个&lt;a href=&quot;#django.contrib.gis.geos.fromfile&quot;&gt; &lt;code&gt;fromfile()&lt;/code&gt; &lt;/a&gt;工厂方法，该方法从文件中返回&lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt;对象：</target>
        </trans-unit>
        <trans-unit id="4e4bdea9995161777366d8c1c03e09daac66d940" translate="yes" xml:space="preserve">
          <source>Finally, to avoid repetitive fallback code, the framework provides a &lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt;&lt;code&gt;django.contrib.sites.shortcuts.get_current_site()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">最后，为避免重复的后备代码，该框架提供了&lt;a href=&quot;#django.contrib.sites.shortcuts.get_current_site&quot;&gt; &lt;code&gt;django.contrib.sites.shortcuts.get_current_site()&lt;/code&gt; &lt;/a&gt;函数。</target>
        </trans-unit>
        <trans-unit id="ea48d70c9f2a1aeff3913cc638d5e4f3d64cde28" translate="yes" xml:space="preserve">
          <source>Finally, we hook these new views into the URLconf:</source>
          <target state="translated">最后,我们将这些新视图挂到URLconf中。</target>
        </trans-unit>
        <trans-unit id="554f9eb64d754ccae5e2a1ca7de1048bc404dc95" translate="yes" xml:space="preserve">
          <source>Finally, we implement the rest of the methods that allow our query expression to play nice with other query expressions:</source>
          <target state="translated">最后,我们实现了其余的方法,使我们的查询表达式能够与其他查询表达式很好地配合。</target>
        </trans-unit>
        <trans-unit id="f96555ce97c75bd6adcf9e62917e490f288ab96b" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ll add a &lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt;&lt;code&gt;PASSWORD_HASHERS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">最后，我们将添加&lt;a href=&quot;../../ref/settings#std:setting-PASSWORD_HASHERS&quot;&gt; &lt;code&gt;PASSWORD_HASHERS&lt;/code&gt; &lt;/a&gt;设置：</target>
        </trans-unit>
        <trans-unit id="a88fe2f705ab58ff5303b4a2b755e83de2f7b0ff" translate="yes" xml:space="preserve">
          <source>Finally, you can also use a &lt;a href=&quot;../db/managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt;. This is useful for example if you have a &lt;a href=&quot;../db/managers#custom-managers&quot;&gt;custom manager&lt;/a&gt;:</source>
          <target state="translated">最后，您还可以使用&lt;a href=&quot;../db/managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt;。例如，如果您有一个&lt;a href=&quot;../db/managers#custom-managers&quot;&gt;自定义管理器，&lt;/a&gt;这将非常有用：</target>
        </trans-unit>
        <trans-unit id="c2a581eaa73c38481020b614fe636e3f569653d5" translate="yes" xml:space="preserve">
          <source>Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_actions&quot;&gt;&lt;code&gt;ModelAdmin.get_actions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最后，您可以通过重写&lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_actions&quot;&gt; &lt;code&gt;ModelAdmin.get_actions()&lt;/code&gt; &lt;/a&gt;来有条件地基于每个请求（因此基于每个用户）启用或禁用操作。</target>
        </trans-unit>
        <trans-unit id="64e614e36dff5fc2ddcd15c0ac50da2771ffe25d" translate="yes" xml:space="preserve">
          <source>Finally, you can pass &lt;code&gt;HttpResponse&lt;/code&gt; an iterator rather than strings. &lt;code&gt;HttpResponse&lt;/code&gt; will consume the iterator immediately, store its content as a string, and discard it. Objects with a &lt;code&gt;close()&lt;/code&gt; method such as files and generators are immediately closed.</source>
          <target state="translated">最后，您可以将迭代器而不是字符串传递给 &lt;code&gt;HttpResponse&lt;/code&gt; 。 &lt;code&gt;HttpResponse&lt;/code&gt; 将立即使用迭代器，将其内容存储为字符串，然后将其丢弃。具有 &lt;code&gt;close()&lt;/code&gt; 方法的对象（例如文件和生成器）将立即关闭。</target>
        </trans-unit>
        <trans-unit id="24082142a7bee0d7266eae78b1faddd1c1cc9fa6" translate="yes" xml:space="preserve">
          <source>Finally, you can use configured engines directly:</source>
          <target state="translated">最后,你可以直接使用配置好的引擎。</target>
        </trans-unit>
        <trans-unit id="e37d4b35a277a40229c7c1b83fd098e99922b7fa" translate="yes" xml:space="preserve">
          <source>Finally, you may run the test as follows:</source>
          <target state="translated">最后,您可以按以下方式进行测试。</target>
        </trans-unit>
        <trans-unit id="ef950eb0217067af3f081ee9a17610cab8bc677b" translate="yes" xml:space="preserve">
          <source>Finally, you must specify a &lt;a href=&quot;settings#std:setting-DATABASE-ENGINE&quot;&gt;&lt;code&gt;DATABASE-ENGINE&lt;/code&gt;&lt;/a&gt; in your &lt;code&gt;settings.py&lt;/code&gt; file:</source>
          <target state="translated">最后，您必须在 &lt;code&gt;settings.py&lt;/code&gt; 文件中指定一个&lt;a href=&quot;settings#std:setting-DATABASE-ENGINE&quot;&gt; &lt;code&gt;DATABASE-ENGINE&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="9a832465bbf151d241d327e71e691160848f2552" translate="yes" xml:space="preserve">
          <source>Finally, you&amp;rsquo;ll have to actually set the header on your AJAX request, while protecting the CSRF token from being sent to other domains using &lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;settings.crossDomain&lt;/a&gt; in jQuery 1.5.1 and newer:</source>
          <target state="translated">最后，您必须在AJAX请求上实际设置标头，同时使用jQuery 1.5.1及更高版本中的&lt;a href=&quot;https://api.jquery.com/jQuery.ajax/&quot;&gt;settings.crossDomain&lt;/a&gt;保护CSRF令牌不被发送到其他域：</target>
        </trans-unit>
        <trans-unit id="ef7c278ab8519615bb5ecd8737b7187faccc3ca3" translate="yes" xml:space="preserve">
          <source>Finally, you&amp;rsquo;ll need to remember to create user accounts before you can use this method. As we explained above, the test runner is executed using a test database, which contains no users by default. As a result, user accounts that are valid on your production site will not work under test conditions. You&amp;rsquo;ll need to create users as part of the test suite &amp;ndash; either manually (using the Django model API) or with a test fixture. Remember that if you want your test user to have a password, you can&amp;rsquo;t set the user&amp;rsquo;s password by setting the password attribute directly &amp;ndash; you must use the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt;&lt;code&gt;set_password()&lt;/code&gt;&lt;/a&gt; function to store a correctly hashed password. Alternatively, you can use the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt;&lt;code&gt;create_user()&lt;/code&gt;&lt;/a&gt; helper method to create a new user with a correctly hashed password.</source>
          <target state="translated">最后，您需要记住要创建用户帐户，然后才能使用此方法。如上所述，测试运行器是使用测试数据库执行的，默认情况下该数据库不包含任何用户。因此，在测试条件下，在生产站点上有效的用户帐户将无法使用。您需要将用户创建为测试套件的一部分-手动（使用Django模型API）或使用测试夹具。请记住，如果您希望测试用户具有密码，则不能通过直接设置password属性来设置用户的密码&amp;ndash;必须使用&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.set_password&quot;&gt; &lt;code&gt;set_password()&lt;/code&gt; &lt;/a&gt;函数来存储正确的哈希密码。另外，您可以使用&lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.UserManager.create_user&quot;&gt; &lt;code&gt;create_user()&lt;/code&gt; &lt;/a&gt;帮助程序方法来创建具有正确哈希密码的新用户。</target>
        </trans-unit>
        <trans-unit id="ca2f376257418ebbe42c6bba7c397875f4d0b018" translate="yes" xml:space="preserve">
          <source>Find all you need to know about the automated admin interface, one of Django&amp;rsquo;s most popular features:</source>
          <target state="translated">查找您需要了解的有关自动管理界面的所有信息，这是Django最受欢迎的功能之一：</target>
        </trans-unit>
        <trans-unit id="83be5a14f83b93bd2f267cd5495799f028c405bd" translate="yes" xml:space="preserve">
          <source>Finders Module</source>
          <target state="translated">查找模块</target>
        </trans-unit>
        <trans-unit id="10038fb951c11f2f94be750c35ea01b826bd98ad" translate="yes" xml:space="preserve">
          <source>Finding data from your production database when running tests?</source>
          <target state="translated">运行测试时从生产数据库中查找数据?</target>
        </trans-unit>
        <trans-unit id="c719c26326806dda05be19d8dcf178818036ad21" translate="yes" xml:space="preserve">
          <source>Finding your first real ticket</source>
          <target state="translated">找到你的第一张真票</target>
        </trans-unit>
        <trans-unit id="1f9e8d29ca99e765d9e5e9965a3b638f47f8c831" translate="yes" xml:space="preserve">
          <source>Fink</source>
          <target state="translated">Fink</target>
        </trans-unit>
        <trans-unit id="e427d7820cf1b8e5b50925cc386518036005e42d" translate="yes" xml:space="preserve">
          <source>Firebird</source>
          <target state="translated">Firebird</target>
        </trans-unit>
        <trans-unit id="6571073e23c4fa6e884ba21f0900816b1dbee48f" translate="yes" xml:space="preserve">
          <source>Firefox 3.6.9+</source>
          <target state="translated">火狐3.6.9+</target>
        </trans-unit>
        <trans-unit id="4dcec4af22f6f720c7f8f4e9497fe78324b1246c" translate="yes" xml:space="preserve">
          <source>First Django imports each item in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">首先，Django将每个项目导入&lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ee7d23eafc97724f82981c3dc7c888430666917" translate="yes" xml:space="preserve">
          <source>First download the latest GDAL release version and untar the archive:</source>
          <target state="translated">首先下载最新的GDAL版本,并解压存档。</target>
        </trans-unit>
        <trans-unit id="c88843d149751ca2a972950ccc6152817e00f53b" translate="yes" xml:space="preserve">
          <source>First is a question shortcut function, &lt;code&gt;create_question&lt;/code&gt;, to take some repetition out of the process of creating questions.</source>
          <target state="translated">首先是一个问题快捷功能 &lt;code&gt;create_question&lt;/code&gt; ，用于在创建问题的过程中进行一些重复。</target>
        </trans-unit>
        <trans-unit id="43035eab990cc69bcd9f23d2944f973548270b12" translate="yes" xml:space="preserve">
          <source>First of all, &lt;code&gt;headline&lt;/code&gt; is not indexed, which will make the underlying database fetch slower.</source>
          <target state="translated">首先，不对 &lt;code&gt;headline&lt;/code&gt; 进行索引，这将使底层数据库的获取速度变慢。</target>
        </trans-unit>
        <trans-unit id="99290d59716a55c82e8b063db8bf7f05e1a4b00b" translate="yes" xml:space="preserve">
          <source>First steps</source>
          <target state="translated">初步步骤</target>
        </trans-unit>
        <trans-unit id="20699b2a5803a6e614a59a724943eb463171c0f3" translate="yes" xml:space="preserve">
          <source>First time contributors should also read Django&amp;rsquo;s &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/new-contributors/&quot;&gt;documentation for first time contributors&lt;/a&gt;. It has lots of good advice for those of us who are new to helping out with Django.</source>
          <target state="translated">初次贡献者还应该阅读Django的&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/new-contributors/&quot;&gt;初次贡献者文档&lt;/a&gt;。对于刚接触Django的新手来说，它有很多很好的建议。</target>
        </trans-unit>
        <trans-unit id="77213d5813b86668ea11f1f10608d43f8d41acba" translate="yes" xml:space="preserve">
          <source>First we need to add &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; to our &lt;code&gt;Author&lt;/code&gt; class:</source>
          <target state="translated">首先，我们需要将&lt;a href=&quot;../../ref/models/instances#django.db.models.Model.get_absolute_url&quot;&gt; &lt;code&gt;get_absolute_url()&lt;/code&gt; &lt;/a&gt;添加到我们的 &lt;code&gt;Author&lt;/code&gt; 类中：</target>
        </trans-unit>
        <trans-unit id="bc39948ba4573e7943c3bf60f22272eb1d430136" translate="yes" xml:space="preserve">
          <source>First we&amp;rsquo;ll need to create a user who can login to the admin site. Run the following command:</source>
          <target state="translated">首先，我们需要创建一个可以登录到管理站点的用户。运行以下命令：</target>
        </trans-unit>
        <trans-unit id="b8fec17a2b622381f0a4b41161e6bbe4d8bdb609" translate="yes" xml:space="preserve">
          <source>First, Django looks for a matching &lt;a href=&quot;#term-application-namespace&quot;&gt;application namespace&lt;/a&gt; (in this example, &lt;code&gt;'polls'&lt;/code&gt;). This will yield a list of instances of that application.</source>
          <target state="translated">首先，Django寻找匹配的&lt;a href=&quot;#term-application-namespace&quot;&gt;应用程序名称空间&lt;/a&gt;（在本示例中为 &lt;code&gt;'polls'&lt;/code&gt; ）。这将产生该应用程序实例的列表。</target>
        </trans-unit>
        <trans-unit id="ef70a6cfb1e8f430c465869e59c076034923c444" translate="yes" xml:space="preserve">
          <source>First, check if you can install SpatiaLite from system packages or binaries.</source>
          <target state="translated">首先,检查是否可以从系统包或二进制文件中安装SpatiaLite。</target>
        </trans-unit>
        <trans-unit id="95251784875a5e4d20dd8450c9b80410ac635a7f" translate="yes" xml:space="preserve">
          <source>First, create a directory called &lt;code&gt;static&lt;/code&gt; in your &lt;code&gt;polls&lt;/code&gt; directory. Django will look for static files there, similarly to how Django finds templates inside &lt;code&gt;polls/templates/&lt;/code&gt;.</source>
          <target state="translated">首先，在 &lt;code&gt;polls&lt;/code&gt; 目录中创建一个名为 &lt;code&gt;static&lt;/code&gt; 的目录。Django将在此处查找静态文件，类似于Django在 &lt;code&gt;polls/templates/&lt;/code&gt; 查找模板的方式。</target>
        </trans-unit>
        <trans-unit id="f96e5da4a1149d193b2bdcddd8b25aef2a1fc28b" translate="yes" xml:space="preserve">
          <source>First, create a directory called &lt;code&gt;templates&lt;/code&gt; in your &lt;code&gt;polls&lt;/code&gt; directory. Django will look for templates in there.</source>
          <target state="translated">首先，在 &lt;code&gt;polls&lt;/code&gt; 目录中创建一个名为 &lt;code&gt;templates&lt;/code&gt; 的目录。Django将在其中查找模板。</target>
        </trans-unit>
        <trans-unit id="1f90c2c681abf881963f9d053d00ec47ee328d19" translate="yes" xml:space="preserve">
          <source>First, create a parent directory for &lt;code&gt;polls&lt;/code&gt;, outside of your Django project. Call this directory &lt;code&gt;django-polls&lt;/code&gt;.</source>
          <target state="translated">首先，在Django项目之外为 &lt;code&gt;polls&lt;/code&gt; 创建一个父目录。将此目录 &lt;code&gt;django-polls&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07c0c655fdb6b481e371840e5383fd9133c1a098" translate="yes" xml:space="preserve">
          <source>First, define the function that takes the argument and produces a dictionary of data for the result. The important point here is we only need to return a dictionary, not anything more complex. This will be used as a template context for the template fragment. Example:</source>
          <target state="translated">首先,定义接受参数并产生结果的数据字典的函数。这里重要的一点是我们只需要返回一个字典,而不是更复杂的东西。这将被用作模板片段的模板上下文。例子:</target>
        </trans-unit>
        <trans-unit id="40a6ca6ac1151f0eec3cdc666ba2d0dcfb692276" translate="yes" xml:space="preserve">
          <source>First, download GEOS from the GEOS website and untar the source archive:</source>
          <target state="translated">首先,从GEOS网站下载GEOS,并解开源码存档。</target>
        </trans-unit>
        <trans-unit id="05ac470b0f07720d2a10c844d43976a668aacc11" translate="yes" xml:space="preserve">
          <source>First, download the PROJ.4 source code and datum shifting files &lt;a href=&quot;#id9&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;:</source>
          <target state="translated">首先，下载PROJ.4源代码和基准移动文件&lt;a href=&quot;#id9&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="4e268d6f08ea9c850920ac60f90e7a12aac80aa6" translate="yes" xml:space="preserve">
          <source>First, download the latest &lt;a href=&quot;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&quot;&gt;PostgreSQL 9.x installer&lt;/a&gt; from the &lt;a href=&quot;https://www.enterprisedb.com&quot;&gt;EnterpriseDB&lt;/a&gt; website. After downloading, run the installer, follow the on-screen directions, and keep the default options unless you know the consequences of changing them.</source>
          <target state="translated">首先，从&lt;a href=&quot;https://www.enterprisedb.com&quot;&gt;EnterpriseDB&lt;/a&gt;网站下载最新的&lt;a href=&quot;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&quot;&gt;PostgreSQL 9.x安装程序&lt;/a&gt;。下载后，运行安装程序，按照屏幕上的说明进行操作，并保留默认选项，除非您知道更改它们的后果。</target>
        </trans-unit>
        <trans-unit id="da3b0283ec00b2d4fdd63bac9b59bf3e759edc72" translate="yes" xml:space="preserve">
          <source>First, follow the instructions in the &lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos packages&lt;/a&gt; section.</source>
          <target state="translated">首先，按照&lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos软件包&lt;/a&gt;部分中的说明进行操作。</target>
        </trans-unit>
        <trans-unit id="64c0574de613a5a5d855304b6002948bbfb18e08" translate="yes" xml:space="preserve">
          <source>First, here&amp;rsquo;s a configuration which writes all logging from the &lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt; logger to a local file:</source>
          <target state="translated">首先，这是一个配置，它将所有日志记录从&lt;a href=&quot;#django-logger&quot;&gt;django&lt;/a&gt;记录器写入本地文件：</target>
        </trans-unit>
        <trans-unit id="4065a170cb0a7fcfc755d6ce0c9d5d28c68c14e5" translate="yes" xml:space="preserve">
          <source>First, invoke the Django shell:</source>
          <target state="translated">首先,调用Django shell。</target>
        </trans-unit>
        <trans-unit id="72e9467116dd2961d61a735a8c47c0bc77e85890" translate="yes" xml:space="preserve">
          <source>First, it looks for the language prefix in the requested URL. This is only performed when you are using the &lt;code&gt;i18n_patterns&lt;/code&gt; function in your root URLconf. See &lt;a href=&quot;#url-internationalization&quot;&gt;Internationalization: in URL patterns&lt;/a&gt; for more information about the language prefix and how to internationalize URL patterns.</source>
          <target state="translated">首先，它在请求的URL中查找语言前缀。仅当您在根URLconf 中使用 &lt;code&gt;i18n_patterns&lt;/code&gt; 函数时才执行此操作。请参阅&lt;a href=&quot;#url-internationalization&quot;&gt;国际化：URL模式&lt;/a&gt;中的有关语言前缀以及如何国际化URL模式的更多信息。</target>
        </trans-unit>
        <trans-unit id="f6bfabb8d777bbdb47935b9c331aa5bdea0d0a3c" translate="yes" xml:space="preserve">
          <source>First, it tries to call a method, passing the &lt;code&gt;obj&lt;/code&gt; argument, where &lt;code&gt;obj&lt;/code&gt; is the object returned by &lt;code&gt;get_object()&lt;/code&gt;.</source>
          <target state="translated">首先，它尝试通过传递 &lt;code&gt;obj&lt;/code&gt; 参数来调用方法，其中 &lt;code&gt;obj&lt;/code&gt; 是 &lt;code&gt;get_object()&lt;/code&gt; 返回的对象。</target>
        </trans-unit>
        <trans-unit id="f1c355f311bddfd7d6f814d29cbf65fae7c521e3" translate="yes" xml:space="preserve">
          <source>First, make sure your template settings are checking inside app directories:</source>
          <target state="translated">首先,确保你的模板设置在检查应用目录里面。</target>
        </trans-unit>
        <trans-unit id="4bbd700df3056ac3723d7fcd139048bbfde7bbcc" translate="yes" xml:space="preserve">
          <source>First, open the &lt;code&gt;polls/urls.py&lt;/code&gt; URLconf and change it like so:</source>
          <target state="translated">首先，打开 &lt;code&gt;polls/urls.py&lt;/code&gt; URLconf并进行如下更改：</target>
        </trans-unit>
        <trans-unit id="43dd5d61895190dc15dd5b6148805d46a692e3ef" translate="yes" xml:space="preserve">
          <source>First, we import the class &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;../../ref/request-response#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt; module, along with Python&amp;rsquo;s &lt;code&gt;datetime&lt;/code&gt; library.</source>
          <target state="translated">首先，我们从&lt;a href=&quot;../../ref/request-response#module-django.http&quot;&gt; &lt;code&gt;django.http&lt;/code&gt; &lt;/a&gt;模块导入类&lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;，以及Python的 &lt;code&gt;datetime&lt;/code&gt; 库。</target>
        </trans-unit>
        <trans-unit id="145a1430fd08e0dbf0cb33c1604421f8f2437c3d" translate="yes" xml:space="preserve">
          <source>First, we need to define a receiver function. A receiver can be any Python function or method:</source>
          <target state="translated">首先,我们需要定义一个接收器函数。接收器可以是任何 Python 函数或方法。</target>
        </trans-unit>
        <trans-unit id="13baffa2f5f7de1c46ad5da632df46aaaa24a8de" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;d need to add an author detail bit in the URLconf to point to a custom view:</source>
          <target state="translated">首先，我们需要在URLconf中添加作者详细信息位以指向自定义视图：</target>
        </trans-unit>
        <trans-unit id="8454a5ec130fde2ddf69d758a0b9cacddf54e6f8" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll add the custom hasher:</source>
          <target state="translated">首先，我们将添加自定义哈希器：</target>
        </trans-unit>
        <trans-unit id="c2a03644e55ef699e43555777f47af59c4cf407e" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll explore overriding templates by creating replacement templates in your project&amp;rsquo;s templates directory.</source>
          <target state="translated">首先，我们将通过在项目的模板目录中创建替换模板来探索覆盖模板。</target>
        </trans-unit>
        <trans-unit id="fdf45d6a678bfbb18d68f2f58940017b92430b08" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll need to write a function that gets called when the action is triggered from the admin. Action functions are regular functions that take three arguments:</source>
          <target state="translated">首先，我们需要编写一个在管理员触发操作时调用的函数。动作函数是带有三个参数的常规函数​​：</target>
        </trans-unit>
        <trans-unit id="4e7eccbd6c4b76c9e1f9ca2b9a2f55acb81f48d2" translate="yes" xml:space="preserve">
          <source>First, you can let the formset do most of the work:</source>
          <target state="translated">首先,你可以让表格集做大部分的工作。</target>
        </trans-unit>
        <trans-unit id="5bf556882e52bc156e88cba7a5467001923ad11e" translate="yes" xml:space="preserve">
          <source>First, you must add the &lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.RemoteUserMiddleware&lt;/code&gt;&lt;/a&gt; to the &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting &lt;strong&gt;after&lt;/strong&gt; the &lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt;&lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">首先，必须在&lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.RemoteUserMiddleware&lt;/code&gt; &lt;/a&gt;&lt;strong&gt;之后&lt;/strong&gt;将&lt;a href=&quot;../ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware&quot;&gt; &lt;code&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/code&gt; &lt;/a&gt;添加到&lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt;设置中：&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73abbbb12778e4c863b4cfddcc6f67ea55cc0130" translate="yes" xml:space="preserve">
          <source>First, you must get the CSRF token. How to do that depends on whether or not the &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt;&lt;/a&gt; settings are enabled.</source>
          <target state="translated">首先，您必须获取CSRF令牌。具体操作取决于是否启用&lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt; &lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;settings#std:setting-CSRF_COOKIE_HTTPONLY&quot;&gt; &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; &lt;/a&gt;设置。</target>
        </trans-unit>
        <trans-unit id="3436659d0b5e771764d4e0fb1222b0bbb9e16717" translate="yes" xml:space="preserve">
          <source>Firstly - the &lt;code&gt;MembershipInline&lt;/code&gt; class references &lt;code&gt;Group.members.through&lt;/code&gt;. The &lt;code&gt;through&lt;/code&gt; attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field.</source>
          <target state="translated">首先-在 &lt;code&gt;MembershipInline&lt;/code&gt; 类引用 &lt;code&gt;Group.members.through&lt;/code&gt; 。在 &lt;code&gt;through&lt;/code&gt; 属性是用于管理许多一对多关系模型的参考。当您定义多对多字段时，此模型由Django自动创建。</target>
        </trans-unit>
        <trans-unit id="47a2156582e62c3760eb7ba24dc66644c3150981" translate="yes" xml:space="preserve">
          <source>Firstly, in a real-life case you need to consider what is happening before and after your count to work out what&amp;rsquo;s an optimal way of doing it &lt;em&gt;in that particular context&lt;/em&gt;. The database optimization documents describes &lt;a href=&quot;db/optimization#overuse-of-count-and-exists&quot;&gt;a case where counting in the template would be better&lt;/a&gt;.</source>
          <target state="translated">首先，在现实生活中，您需要考虑计数前后发生的事情，以找出&lt;em&gt;在特定情况下&lt;/em&gt;执行此操作的最佳方法。数据库优化文档描述&lt;a href=&quot;db/optimization#overuse-of-count-and-exists&quot;&gt;了一种情况，在这种情况下，最好在模板中进行计数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="654babb9ef1f86c0cc82cbdc43ce71dd33c0363f" translate="yes" xml:space="preserve">
          <source>Firstly, in order to upload files, you&amp;rsquo;ll need to make sure that your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element correctly defines the &lt;code&gt;enctype&lt;/code&gt; as &lt;code&gt;&quot;multipart/form-data&quot;&lt;/code&gt;:</source>
          <target state="translated">首先，为了上传文件，您需要确保您的 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 元素正确地将 &lt;code&gt;enctype&lt;/code&gt; 定义为 &lt;code&gt;&quot;multipart/form-data&quot;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ceb459ef79103d51bc85693c0b6aa6118973366d" translate="yes" xml:space="preserve">
          <source>Firstly, you can set an &lt;code&gt;app_name&lt;/code&gt; attribute in the included URLconf module, at the same level as the &lt;code&gt;urlpatterns&lt;/code&gt; attribute. You have to pass the actual module, or a string reference to the module, to &lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt;, not the list of &lt;code&gt;urlpatterns&lt;/code&gt; itself.</source>
          <target state="translated">首先，您可以在随附的URLconf模块中将 &lt;code&gt;app_name&lt;/code&gt; 属性设置为与 &lt;code&gt;urlpatterns&lt;/code&gt; 属性相同的级别。您必须将实际模块或对该模块的字符串引用传递给&lt;a href=&quot;../../ref/urls#django.urls.include&quot;&gt; &lt;code&gt;include()&lt;/code&gt; &lt;/a&gt;，而不是 &lt;code&gt;urlpatterns&lt;/code&gt; 本身的列表。</target>
        </trans-unit>
        <trans-unit id="952d6d50050346e8e9fde3f473baa28e0cf1643d" translate="yes" xml:space="preserve">
          <source>Firstly, you can use the &lt;code&gt;send_messages()&lt;/code&gt; method. &lt;code&gt;send_messages()&lt;/code&gt; takes a list of &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances (or subclasses), and sends them all using a single connection.</source>
          <target state="translated">首先，您可以使用 &lt;code&gt;send_messages()&lt;/code&gt; 方法。 &lt;code&gt;send_messages()&lt;/code&gt; 获取&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;实例（或子类）的列表，并使用单个连接将它们全部发送出去。</target>
        </trans-unit>
        <trans-unit id="1d0e1d4e72315bbc94817bd7e1994f363c26f394" translate="yes" xml:space="preserve">
          <source>Fixing &lt;code&gt;UnicodeEncodeError&lt;/code&gt; for file uploads</source>
          <target state="translated">修复文件上传的 &lt;code&gt;UnicodeEncodeError&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8975443fcef2a9c2e02d4a2b02c41dba5c20d6fe" translate="yes" xml:space="preserve">
          <source>Fixing the bug</source>
          <target state="translated">修正错误</target>
        </trans-unit>
        <trans-unit id="d580141077874f18b73dcfdda86434ddde71ab28" translate="yes" xml:space="preserve">
          <source>Fixture loading</source>
          <target state="translated">夹具负荷</target>
        </trans-unit>
        <trans-unit id="93a9d4b62c49df4936d5f701755ab05d3a9187a5" translate="yes" xml:space="preserve">
          <source>Fixtures</source>
          <target state="translated">Fixtures</target>
        </trans-unit>
        <trans-unit id="649f72a93abda9c49a9ca63c86342bb63ae6a485" translate="yes" xml:space="preserve">
          <source>Fixtures are also used by the &lt;a href=&quot;../topics/testing/tools#topics-testing-fixtures&quot;&gt;testing framework&lt;/a&gt; to help set up a consistent test environment.</source>
          <target state="translated">&lt;a href=&quot;../topics/testing/tools#topics-testing-fixtures&quot;&gt;测试框架&lt;/a&gt;还使用夹具来帮助建立一致的测试环境。</target>
        </trans-unit>
        <trans-unit id="cc1b2f853c73dd2ef4af83d5cc672056528796fb" translate="yes" xml:space="preserve">
          <source>Fixtures generated with &lt;code&gt;USE_TZ = False&lt;/code&gt;, or before Django 1.4, use the &amp;ldquo;naive&amp;rdquo; format. If your project contains such fixtures, after you enable time zone support, you&amp;rsquo;ll see &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#RuntimeWarning&quot;&gt;&lt;code&gt;RuntimeWarning&lt;/code&gt;&lt;/a&gt;s when you load them. To get rid of the warnings, you must convert your fixtures to the &amp;ldquo;aware&amp;rdquo; format.</source>
          <target state="translated">使用 &lt;code&gt;USE_TZ = False&lt;/code&gt; 生成的夹具，或者在Django 1.4之前的夹具，使用&amp;ldquo; 纯朴 &amp;rdquo;格式。如果您的项目包含此类固定装置，则在启用时区支持后，在加载时会看到&lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#RuntimeWarning&quot;&gt; &lt;code&gt;RuntimeWarning&lt;/code&gt; &lt;/a&gt;。为了摆脱警告，您必须将灯具转换为&amp;ldquo;意识&amp;rdquo;格式。</target>
        </trans-unit>
        <trans-unit id="31f4fad7b21527024016324c7145b53c88b4f070" translate="yes" xml:space="preserve">
          <source>Fixtures may be compressed in &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;gz&lt;/code&gt;, or &lt;code&gt;bz2&lt;/code&gt; format. For example:</source>
          <target state="translated">灯具可以 &lt;code&gt;zip&lt;/code&gt; ， &lt;code&gt;gz&lt;/code&gt; 或 &lt;code&gt;bz2&lt;/code&gt; 格式压缩。例如：</target>
        </trans-unit>
        <trans-unit id="0c5b989c2d6e6bdd59d22e11ad3c1993e41d8ac8" translate="yes" xml:space="preserve">
          <source>Flatpage templates</source>
          <target state="translated">平页模板</target>
        </trans-unit>
        <trans-unit id="ca8db34dc5820ff17af7ddc9a31f107d898dc72a" translate="yes" xml:space="preserve">
          <source>Flatpage templates are passed a single context variable, &lt;code&gt;flatpage&lt;/code&gt;, which is the flatpage object.</source>
          <target state="translated">简单页面模板传递单一上下文变量， &lt;code&gt;flatpage&lt;/code&gt; ，这是简单页面对象。</target>
        </trans-unit>
        <trans-unit id="7de6b24fcf1c2acb2cf38c3564995c617c021e83" translate="yes" xml:space="preserve">
          <source>Flatpages</source>
          <target state="translated">Flatpages</target>
        </trans-unit>
        <trans-unit id="1805c01f84a571eb39718db2b5c9de479ccb1b0b" translate="yes" xml:space="preserve">
          <source>Flatpages are represented by a standard &lt;a href=&quot;../../topics/db/models&quot;&gt;Django model&lt;/a&gt;, which lives in &lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/flatpages/models.py&quot;&gt;django/contrib/flatpages/models.py&lt;/a&gt;. You can access flatpage objects via the &lt;a href=&quot;../../topics/db/queries&quot;&gt;Django database API&lt;/a&gt;.</source>
          <target state="translated">Flatpage由标准&lt;a href=&quot;../../topics/db/models&quot;&gt;Django模型&lt;/a&gt;表示，该模型位于&lt;a href=&quot;https://github.com/django/django/blob/master/django/contrib/flatpages/models.py&quot;&gt;django / contrib / flatpages / models.py中&lt;/a&gt;。您可以通过&lt;a href=&quot;../../topics/db/queries&quot;&gt;Django数据库API&lt;/a&gt;访问平面对象。</target>
        </trans-unit>
        <trans-unit id="76bac1a4adf8a73eecc7c5cd6ace5a3ef38fbb8e" translate="yes" xml:space="preserve">
          <source>Flatpages will not apply view middleware</source>
          <target state="translated">Flatpages不会应用视图中间件</target>
        </trans-unit>
        <trans-unit id="be50bf019784d62df9e76ade29eac060efd356c2" translate="yes" xml:space="preserve">
          <source>Following relationships &amp;ldquo;backward&amp;rdquo;</source>
          <target state="translated">跟随关系&amp;ldquo;向后&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="72a2f7f3de2f03aa6bed21060ae26fa0ec8ee75a" translate="yes" xml:space="preserve">
          <source>Following relationships backwards</source>
          <target state="translated">逆向关系</target>
        </trans-unit>
        <trans-unit id="2962af366a6a17e326ab4f60b0fbf6a0f052eefd" translate="yes" xml:space="preserve">
          <source>Following these guidelines is particularly necessary if you write reusable forms, form fields, and model fields.</source>
          <target state="translated">如果你写的是可重用的表单、表单字段和模型字段,那么遵循这些准则是特别必要的。</target>
        </trans-unit>
        <trans-unit id="8799db14a19349173c508b9e0760c066a41322c9" translate="yes" xml:space="preserve">
          <source>Follows symlinks to directories when looking for new translation strings.</source>
          <target state="translated">在寻找新的翻译字符串时,跟踪指向目录的符号链接。</target>
        </trans-unit>
        <trans-unit id="4c9800d93f6eb82531c506a8502d3a682cbf8592" translate="yes" xml:space="preserve">
          <source>Foot, Foot (International)</source>
          <target state="translated">脚,脚(国际)</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="8778e38c267b25f48a4d77bf61008d34682f3180" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;default=date.today&lt;/code&gt; - from &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date.today&quot;&gt;&lt;code&gt;datetime.date.today()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">对于&lt;a href=&quot;#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;： &lt;code&gt;default=date.today&lt;/code&gt; -从&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date.today&quot;&gt; &lt;code&gt;datetime.date.today()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="110b4938ed9062f37b2508210c9e670f18a44565" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;default=timezone.now&lt;/code&gt; - from &lt;a href=&quot;../utils#django.utils.timezone.now&quot;&gt;&lt;code&gt;django.utils.timezone.now()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">对于&lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;： &lt;code&gt;default=timezone.now&lt;/code&gt; -来自&lt;a href=&quot;../utils#django.utils.timezone.now&quot;&gt; &lt;code&gt;django.utils.timezone.now()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="741319df59ed93ce505c7c02877f25b3ed1aaea2" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, the &lt;code&gt;bulk&lt;/code&gt; argument is passed on to &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">对于&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;对象，将 &lt;code&gt;bulk&lt;/code&gt; 参数传递给&lt;a href=&quot;#django.db.models.fields.related.RelatedManager.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.db.models.fields.related.RelatedManager.remove&quot;&gt; &lt;code&gt;remove()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c9651ca2921e2480cd0c28bb2f088f3b4e6a026c" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, this method accepts a &lt;code&gt;bulk&lt;/code&gt; argument to control how to perform the operation. If &lt;code&gt;True&lt;/code&gt; (the default), &lt;code&gt;QuerySet.update()&lt;/code&gt; is used. If &lt;code&gt;bulk=False&lt;/code&gt;, the &lt;code&gt;save()&lt;/code&gt; method of each individual model instance is called instead. This triggers the &lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt;&lt;code&gt;pre_save&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;post_save&lt;/code&gt;&lt;/a&gt; signals and comes at the expense of performance.</source>
          <target state="translated">对于&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;对象，此方法接受 &lt;code&gt;bulk&lt;/code&gt; 参数来控制如何执行操作。如果为 &lt;code&gt;True&lt;/code&gt; （默认值），则使用 &lt;code&gt;QuerySet.update()&lt;/code&gt; 。如果 &lt;code&gt;bulk=False&lt;/code&gt; ，则改为调用每个单独的模型实例的 &lt;code&gt;save()&lt;/code&gt; 方法。这会触发&lt;a href=&quot;../signals#django.db.models.signals.pre_save&quot;&gt; &lt;code&gt;pre_save&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../signals#django.db.models.signals.post_save&quot;&gt; &lt;code&gt;post_save&lt;/code&gt; &lt;/a&gt;信号，并以牺牲性能为代价。</target>
        </trans-unit>
        <trans-unit id="7b7f862e3c2a20b574e8eef35fee476492f18603" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; objects, this method only exists if &lt;code&gt;null=True&lt;/code&gt;. If the related field can&amp;rsquo;t be set to &lt;code&gt;None&lt;/code&gt; (&lt;code&gt;NULL&lt;/code&gt;), then an object can&amp;rsquo;t be removed from a relation without being added to another. In the above example, removing &lt;code&gt;e&lt;/code&gt; from &lt;code&gt;b.entry_set()&lt;/code&gt; is equivalent to doing &lt;code&gt;e.blog = None&lt;/code&gt;, and because the &lt;code&gt;blog&lt;/code&gt;&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t have &lt;code&gt;null=True&lt;/code&gt;, this is invalid.</source>
          <target state="translated">对于&lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;对象，此方法仅在 &lt;code&gt;null=True&lt;/code&gt; 时存在。如果相关字段不能设置为 &lt;code&gt;None&lt;/code&gt; （ &lt;code&gt;NULL&lt;/code&gt; ），则无法从一个关系中删除一个对象而不将其添加到另一个对象中。在上面的示例中，从 &lt;code&gt;b.entry_set()&lt;/code&gt; 中删除 &lt;code&gt;e&lt;/code&gt; 等同于执行 &lt;code&gt;e.blog = None&lt;/code&gt; ，并且由于 &lt;code&gt;blog&lt;/code&gt; &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt;没有 &lt;code&gt;null=True&lt;/code&gt; ，因此这是无效的。</target>
        </trans-unit>
        <trans-unit id="7ec8fef3dc57b8e1919c123ac5e02c80e887f7f1" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;UserAttributeSimilarityValidator&lt;/code&gt; and &lt;code&gt;CommonPasswordValidator&lt;/code&gt;, we&amp;rsquo;re using the default settings in this example. &lt;code&gt;NumericPasswordValidator&lt;/code&gt; has no settings.</source>
          <target state="translated">对于 &lt;code&gt;UserAttributeSimilarityValidator&lt;/code&gt; 和 &lt;code&gt;CommonPasswordValidator&lt;/code&gt; ，我们在此示例中使用默认设置。 &lt;code&gt;NumericPasswordValidator&lt;/code&gt; 没有设置。</target>
        </trans-unit>
        <trans-unit id="cbe7a4654f6563b054d500267f83512db264635c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;to_python()&lt;/code&gt;, if anything goes wrong during value conversion, you should raise a &lt;a href=&quot;../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">对于 &lt;code&gt;to_python()&lt;/code&gt; ，如果在值转换期间发生任何错误，则应引发&lt;a href=&quot;../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt; &lt;code&gt;ValidationError&lt;/code&gt; &lt;/a&gt;异常。</target>
        </trans-unit>
        <trans-unit id="9c6a88e5cfef39cc8e6590be619ddb6e98c6c41d" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;measuring&lt;/em&gt;, rather than querying on distances, use the &lt;a href=&quot;functions#django.contrib.gis.db.models.functions.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">要进行&lt;em&gt;测量&lt;/em&gt;，而不是查询距离，请使用&lt;a href=&quot;functions#django.contrib.gis.db.models.functions.Distance&quot;&gt; &lt;code&gt;Distance&lt;/code&gt; &lt;/a&gt;功能。</target>
        </trans-unit>
        <trans-unit id="ea0876de4dccf03bdae9009efcce83719085e5c0" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;text/*&lt;/em&gt; content-types, the character set (i.e. &lt;code&gt;utf8&lt;/code&gt;) supplied by the browser. Again, &amp;ldquo;trust but verify&amp;rdquo; is the best policy here.</source>
          <target state="translated">对于&lt;em&gt;text / *&lt;/em&gt;内容类型，是浏览器提供的字符集（即 &lt;code&gt;utf8&lt;/code&gt; ）。同样，&amp;ldquo;信任但验证&amp;rdquo;是此处的最佳策略。</target>
        </trans-unit>
        <trans-unit id="32b317d6f38f95199b66a362e3f52af6e0ffa8d9" translate="yes" xml:space="preserve">
          <source>For AJAX requests, the fallback will be performed only if the &lt;code&gt;next&lt;/code&gt; parameter was set. Otherwise a 204 status code (No Content) will be returned.</source>
          <target state="translated">对于AJAX请求，仅在设置了 &lt;code&gt;next&lt;/code&gt; 参数时才执行回退。否则，将返回204状态代码（无内容）。</target>
        </trans-unit>
        <trans-unit id="fd8d1898b2475523fa3b4c8d7e783aaa6ca7a841" translate="yes" xml:space="preserve">
          <source>For MIME types starting with &lt;code&gt;text/&lt;/code&gt;, binary data is handled as in &lt;code&gt;attach()&lt;/code&gt;.</source>
          <target state="translated">对于以 &lt;code&gt;text/&lt;/code&gt; 开头的MIME类型，二进制数据的处理方式与 &lt;code&gt;attach()&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="fb31c5f02b352bb580243f60983f2e82fd5cdc95" translate="yes" xml:space="preserve">
          <source>For MyISAM tables, &lt;code&gt;SPATIAL INDEX&lt;/code&gt; creates an R-tree index. For storage engines that support nonspatial indexing of spatial columns, the engine creates a B-tree index. A B-tree index on spatial values will be useful for exact-value lookups, but not for range scans.</source>
          <target state="translated">对于MyISAM表， &lt;code&gt;SPATIAL INDEX&lt;/code&gt; 创建一个R树索引。对于支持空间列的非空间索引的存储引擎，该引擎将创建B树索引。空间值的B树索引对于精确值查找很有用，但对于范围扫描则无用。</target>
        </trans-unit>
        <trans-unit id="114241fe165523586156c3d9b8b72468673e5a4e" translate="yes" xml:space="preserve">
          <source>For MySQL, this runs the &lt;code&gt;mysql&lt;/code&gt; command-line client.</source>
          <target state="translated">对于MySQL，这将运行 &lt;code&gt;mysql&lt;/code&gt; 命令行客户端。</target>
        </trans-unit>
        <trans-unit id="01e48f4df2874fe3eaa026122b760ee523ebd8e5" translate="yes" xml:space="preserve">
          <source>For OpenSolaris users, the system library path may be modified using the &lt;code&gt;crle&lt;/code&gt; utility. Run &lt;code&gt;crle&lt;/code&gt; with no options to see the current configuration and use &lt;code&gt;crle -l&lt;/code&gt; to set with the new library path. Be &lt;em&gt;very&lt;/em&gt; careful when modifying the system library path:</source>
          <target state="translated">对于OpenSolaris用户，可以使用 &lt;code&gt;crle&lt;/code&gt; 实用程序修改系统库路径。运行不带任何选项的 &lt;code&gt;crle&lt;/code&gt; 以查看当前配置，并使用 &lt;code&gt;crle -l&lt;/code&gt; 设置新的库路径。修改系统库路径时要&lt;em&gt;非常&lt;/em&gt;小心：</target>
        </trans-unit>
        <trans-unit id="3eeded676ad457b8d591af8ff3281ca437900ed1" translate="yes" xml:space="preserve">
          <source>For Oracle, this runs the &lt;code&gt;sqlplus&lt;/code&gt; command-line client.</source>
          <target state="translated">对于Oracle，这将运行 &lt;code&gt;sqlplus&lt;/code&gt; 命令行客户端。</target>
        </trans-unit>
        <trans-unit id="a982ff9d1e3163260b354c31d72394140bbcb2f3" translate="yes" xml:space="preserve">
          <source>For PostgreSQL, this runs the &lt;code&gt;psql&lt;/code&gt; command-line client.</source>
          <target state="translated">对于PostgreSQL， &lt;code&gt;psql&lt;/code&gt; 运行psql命令行客户端。</target>
        </trans-unit>
        <trans-unit id="bd417a019713a6904e3b18dff92248c76cc5011c" translate="yes" xml:space="preserve">
          <source>For SQLite, this runs the &lt;code&gt;sqlite3&lt;/code&gt; command-line client.</source>
          <target state="translated">对于SQLite， &lt;code&gt;sqlite3&lt;/code&gt; 运行sqlite3命令行客户端。</target>
        </trans-unit>
        <trans-unit id="fd5567ff92e75db4f3301c5a20e84775b7c0a7eb" translate="yes" xml:space="preserve">
          <source>For Windows users</source>
          <target state="translated">对于Windows用户</target>
        </trans-unit>
        <trans-unit id="cd102962a99ab92625c89315dc500f0b617135ca" translate="yes" xml:space="preserve">
          <source>For Windows users, who do not have symlinking functionality available, you can copy &lt;code&gt;django-admin.exe&lt;/code&gt; to a location on your existing path or edit the &lt;code&gt;PATH&lt;/code&gt; settings (under &lt;code&gt;Settings - Control Panel - System - Advanced -
Environment...&lt;/code&gt;) to point to its installed location.</source>
          <target state="translated">对于没有符号链接功能的Windows用户，您可以将 &lt;code&gt;django-admin.exe&lt;/code&gt; 复制到现有路径上的某个位置，或编辑 &lt;code&gt;PATH&lt;/code&gt; 设置（在 &lt;code&gt;Settings - Control Panel - System - Advanced - Environment...&lt;/code&gt; ）以指向到其安装位置。</target>
        </trans-unit>
        <trans-unit id="d15786dfcbe8be325214a68d56dd2416df64952e" translate="yes" xml:space="preserve">
          <source>For Windows, you may find binaries on the &lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/&quot;&gt;Gaia-SINS&lt;/a&gt; home page.</source>
          <target state="translated">对于Windows，您可以在&lt;a href=&quot;https://www.gaia-gis.it/gaia-sins/&quot;&gt;Gaia-SINS&lt;/a&gt;主页上找到二进制文件。</target>
        </trans-unit>
        <trans-unit id="c0e34ff26a96c16c70436cafdd6406725c407716" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt;&lt;code&gt;USERNAME_FIELD&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt;&lt;code&gt;REQUIRED_FIELDS&lt;/code&gt;&lt;/a&gt;, these methods receive the value of the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.to_field&quot;&gt;&lt;code&gt;to_field&lt;/code&gt;&lt;/a&gt; (the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt;&lt;code&gt;primary_key&lt;/code&gt;&lt;/a&gt; by default) of an existing instance.</source>
          <target state="translated">对于&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; 的&lt;/a&gt;在&lt;a href=&quot;#django.contrib.auth.models.CustomUser.USERNAME_FIELD&quot;&gt; &lt;code&gt;USERNAME_FIELD&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS&quot;&gt; &lt;code&gt;REQUIRED_FIELDS&lt;/code&gt; &lt;/a&gt;，这些方法接收的值&lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.to_field&quot;&gt; &lt;code&gt;to_field&lt;/code&gt; &lt;/a&gt;（所述&lt;a href=&quot;../../ref/models/fields#django.db.models.Field.primary_key&quot;&gt; &lt;code&gt;primary_key&lt;/code&gt; &lt;/a&gt;现有实例的默认情况下）。</target>
        </trans-unit>
        <trans-unit id="a7695186a713f16de82312fa1c5040b7c4108194" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;OneToOneField&lt;/code&gt;, you must duplicate the related object and assign it to the new object&amp;rsquo;s field to avoid violating the one-to-one unique constraint. For example, assuming &lt;code&gt;entry&lt;/code&gt; is already duplicated as above:</source>
          <target state="translated">对于 &lt;code&gt;OneToOneField&lt;/code&gt; ，您必须复制相关对象并将其分配给新对象的字段，以避免违反一对一的唯一约束。例如，假设 &lt;code&gt;entry&lt;/code&gt; 已经如上所述重复：</target>
        </trans-unit>
        <trans-unit id="9cc905172b60f8825495c9572f3c39b3a30f5ebc" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;mimetype&lt;/code&gt; starting with &lt;code&gt;text/&lt;/code&gt;, content is expected to be a string. Binary data will be decoded using UTF-8, and if that fails, the MIME type will be changed to &lt;code&gt;application/octet-stream&lt;/code&gt; and the data will be attached unchanged.</source>
          <target state="translated">对于以 &lt;code&gt;text/&lt;/code&gt; 开头的 &lt;code&gt;mimetype&lt;/code&gt; ，内容应为字符串。二进制数据将使用UTF-8解码，如果失败，则MIME类型将更改为 &lt;code&gt;application/octet-stream&lt;/code&gt; ，并且数据将保持不变。</target>
        </trans-unit>
        <trans-unit id="aa5aa7c50d88712d846e66564756210e95dfb768" translate="yes" xml:space="preserve">
          <source>For a class to be a lookup, it must follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Lookup&quot;&gt;&lt;code&gt;Lookup&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; naturally follow this API.</source>
          <target state="translated">要使一个类成为查找类，它必须遵循&lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;。&lt;a href=&quot;#django.db.models.Lookup&quot;&gt; &lt;code&gt;Lookup&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#django.db.models.Transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;自然遵循此API。</target>
        </trans-unit>
        <trans-unit id="82837fb615d6fc0b73c8eb4b55c29471490a59c4" translate="yes" xml:space="preserve">
          <source>For a complete discussion on the usage of the following see the &lt;a href=&quot;../topics/i18n/translation&quot;&gt;translation documentation&lt;/a&gt;.</source>
          <target state="translated">有关以下用法的完整讨论，请参见&lt;a href=&quot;../topics/i18n/translation&quot;&gt;翻译文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bf48592cadcf03f73184b0bc732d907e2a1368ac" translate="yes" xml:space="preserve">
          <source>For a complete list of attributes and methods, see &lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关属性和方法的完整列表，请参见&lt;a href=&quot;../../ref/forms/api#django.forms.BoundField&quot;&gt; &lt;code&gt;BoundField&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="011f4946a4eac47d187c0cf11d388cc5cd400310" translate="yes" xml:space="preserve">
          <source>For a detailed description of how to create rasters using dictionary input, see &lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;Creating rasters from data&lt;/a&gt;. For a detailed description of how to create rasters in the virtual filesystem, see &lt;a href=&quot;#gdal-raster-vsimem&quot;&gt;Using GDAL&amp;rsquo;s Virtual Filesystem&lt;/a&gt;.</source>
          <target state="translated">有关如何使用字典输入创建栅格的详细说明，请参见&lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;从数据创建栅格&lt;/a&gt;。有关如何在虚拟文件系统中创建栅格的详细说明，请参见《&lt;a href=&quot;#gdal-raster-vsimem&quot;&gt;使用GDAL的虚拟文件系统》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c0f2ca82bf7e80689578e1ccca6faf93f53a9e5f" translate="yes" xml:space="preserve">
          <source>For a full list of available settings, see the &lt;a href=&quot;../ref/settings&quot;&gt;settings reference&lt;/a&gt;.</source>
          <target state="translated">有关可用设置的完整列表，请参阅&lt;a href=&quot;../ref/settings&quot;&gt;设置参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b2bc5ac4a588fc66b6d4b867455953ec02cdd543" translate="yes" xml:space="preserve">
          <source>For a full list of options, refer to the commands own help by running:</source>
          <target state="translated">完整的选项列表,请参考命令本身的帮助,运行。</target>
        </trans-unit>
        <trans-unit id="25df3eb01267dee01663d3ac00097ce51467a7f3" translate="yes" xml:space="preserve">
          <source>For a high-level overview of searching, see the &lt;a href=&quot;../../../topics/db/search&quot;&gt;topic documentation&lt;/a&gt;.</source>
          <target state="translated">有关搜索的高级概述，请参阅&lt;a href=&quot;../../../topics/db/search&quot;&gt;主题文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c9dd739b05280b0b463ac62a5aa753bebf48ca31" translate="yes" xml:space="preserve">
          <source>For a list of PostgreSQL-specific indexes, see &lt;a href=&quot;../contrib/postgres/indexes#module-django.contrib.postgres.indexes&quot;&gt;&lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">有关PostgreSQL特定索引的列表，请参见&lt;a href=&quot;../contrib/postgres/indexes#module-django.contrib.postgres.indexes&quot;&gt; &lt;code&gt;django.contrib.postgres.indexes&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4891edfe9764d3a86746a95b02d8917cc69f1971" translate="yes" xml:space="preserve">
          <source>For a model which has a many-to-many relationship to itself through an intermediary model, two foreign keys to the same model are permitted, but they will be treated as the two (different) sides of the many-to-many relationship. If there are &lt;em&gt;more&lt;/em&gt; than two foreign keys though, you must also specify &lt;code&gt;through_fields&lt;/code&gt; as above, or a validation error will be raised.</source>
          <target state="translated">对于通过中介模型与其自身具有多对多关系的模型，允许使用同一模型的两个外键，但是它们将被视为多对多关系的两个（不同）方面。如果有&lt;em&gt;更多的&lt;/em&gt;比两个外键虽然，你还必须指定 &lt;code&gt;through_fields&lt;/code&gt; 如上，或验证错误将得到提升。</target>
        </trans-unit>
        <trans-unit id="d4589e3c17ea70bbb0bb53aa9f87352a326c8e0e" translate="yes" xml:space="preserve">
          <source>For a more complete example, a query logger could look like this:</source>
          <target state="translated">对于一个更完整的例子,一个查询记录器可以是这样的。</target>
        </trans-unit>
        <trans-unit id="c2705e09efedad5461b1eac01061451c6e4e8c3b" translate="yes" xml:space="preserve">
          <source>For a production environment, though, this is a really bad idea, because it leaks lots of information about your project: excerpts of your source code, local variables, settings, libraries used, etc.</source>
          <target state="translated">但对于生产环境来说,这是一个非常糟糕的主意,因为它泄露了很多关于你的项目的信息:你的源代码的摘录,本地变量,设置,使用的库等等。</target>
        </trans-unit>
        <trans-unit id="f9e4028e7889232ea20ffa255e19e88ae4589784" translate="yes" xml:space="preserve">
          <source>For a ton of examples, read the source code for Django&amp;rsquo;s default filters and tags. They&amp;rsquo;re in &lt;code&gt;django/template/defaultfilters.py&lt;/code&gt; and &lt;code&gt;django/template/defaulttags.py&lt;/code&gt;, respectively.</source>
          <target state="translated">有关大量示例，请阅读Django默认过滤器和标签的源代码。它们分别在 &lt;code&gt;django/template/defaultfilters.py&lt;/code&gt; 和 &lt;code&gt;django/template/defaulttags.py&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="245c192c3f0ca7c1f6c78ffc80a037f82e16bd32" translate="yes" xml:space="preserve">
          <source>For a typical Django project, invoking Daphne would look like:</source>
          <target state="translated">对于一个典型的Django项目来说,调用Daphne会是这样的。</target>
        </trans-unit>
        <trans-unit id="c59fdc8b86b62e3b1b65f5e777983d4f7cbaa527" translate="yes" xml:space="preserve">
          <source>For a typical Django project, invoking Uvicorn would look like:</source>
          <target state="translated">对于一个典型的Django项目来说,调用Uvicorn会是这样的。</target>
        </trans-unit>
        <trans-unit id="497b37841c09436a3f988aae8b8beb478ba72f8d" translate="yes" xml:space="preserve">
          <source>For a window frame, you can choose either a range-based sequence of rows or an ordinary sequence of rows.</source>
          <target state="translated">对于一个窗口框架,你可以选择基于范围的行序列或普通的行序列。</target>
        </trans-unit>
        <trans-unit id="01530861bb300440f6bf560ef6b0beca305c2166" translate="yes" xml:space="preserve">
          <source>For advanced usage you might want both a custom &lt;code&gt;Manager&lt;/code&gt; and a custom &lt;code&gt;QuerySet&lt;/code&gt;. You can do that by calling &lt;code&gt;Manager.from_queryset()&lt;/code&gt; which returns a &lt;em&gt;subclass&lt;/em&gt; of your base &lt;code&gt;Manager&lt;/code&gt; with a copy of the custom &lt;code&gt;QuerySet&lt;/code&gt; methods:</source>
          <target state="translated">对于高级用法，您可能需要自定义 &lt;code&gt;Manager&lt;/code&gt; 和自定义 &lt;code&gt;QuerySet&lt;/code&gt; 。您可以通过调用 &lt;code&gt;Manager.from_queryset()&lt;/code&gt; 来实现，该方法返回基本 &lt;code&gt;Manager&lt;/code&gt; 的&lt;em&gt;子类&lt;/em&gt;以及自定义 &lt;code&gt;QuerySet&lt;/code&gt; 方法的副本：</target>
        </trans-unit>
        <trans-unit id="114718eb9675b5c8dfa5883eba3eeb3ec318f68e" translate="yes" xml:space="preserve">
          <source>For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings. These are triggered when using the &lt;a href=&quot;models/querysets#std:fieldlookup-iexact&quot;&gt;&lt;code&gt;iexact&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;models/querysets#std:fieldlookup-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; filters in Querysets. The behavior splits into two cases:</source>
          <target state="translated">对于所有SQLite版本，尝试匹配某些类型的字符串时，都有一些违反直觉的行为。这些在使用&lt;a href=&quot;models/querysets#std:fieldlookup-iexact&quot;&gt; &lt;code&gt;iexact&lt;/code&gt; &lt;/a&gt;时触发，或在查询集中&lt;a href=&quot;models/querysets#std:fieldlookup-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt;过滤器。该行为分为两种情况：</target>
        </trans-unit>
        <trans-unit id="7091b793897c8691205b09008506e6f08af46e43" translate="yes" xml:space="preserve">
          <source>For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the &amp;lsquo;csrfmiddlewaretoken&amp;rsquo; field must be present and correct. If it isn&amp;rsquo;t, the user will get a 403 error.</source>
          <target state="translated">对于所有未使用HTTP GET，HEAD，OPTIONS或TRACE的传入请求，必须存在CSRF cookie，并且&amp;ldquo; csrfmiddlewaretoken&amp;rdquo;字段必须存在且正确。如果不是，则用户将收到403错误。</target>
        </trans-unit>
        <trans-unit id="e0536ba6b20984cd0e9e8b8216082fb8626aab8d" translate="yes" xml:space="preserve">
          <source>For an example see the section &lt;a href=&quot;#admin-custom-validation&quot;&gt;Adding custom validation to the admin&lt;/a&gt;.</source>
          <target state="translated">有关示例，请参阅&lt;a href=&quot;#admin-custom-validation&quot;&gt;将自定义验证添加到admin一节&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cbd2efdcd0a5182eb99fe1c3c5af8e661cbb3c3b" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;a href=&quot;../howto/static-files/deployment#staticfiles-from-cdn&quot;&gt;Serving static files from a cloud service or CDN&lt;/a&gt;.</source>
          <target state="translated">有关示例，请参阅&lt;a href=&quot;../howto/static-files/deployment#staticfiles-from-cdn&quot;&gt;从云服务或CDN提供静态文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e877fbbeaae4ebb5d6aaa8f8b9c8ab1b4e07bde" translate="yes" xml:space="preserve">
          <source>For an in-depth discussion of aggregation, see &lt;a href=&quot;../../topics/db/aggregation&quot;&gt;the topic guide on Aggregation&lt;/a&gt;.</source>
          <target state="translated">有关聚合的深入讨论，请参阅&lt;a href=&quot;../../topics/db/aggregation&quot;&gt;有关聚合的主题指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="57ec81e3704c6febf6a79630fa1ee31a957b3292" translate="yes" xml:space="preserve">
          <source>For an introduction to the static files app and some usage examples, see &lt;a href=&quot;../../howto/static-files/index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;. For guidelines on deploying static files, see &lt;a href=&quot;../../howto/static-files/deployment&quot;&gt;Deploying static files&lt;/a&gt;.</source>
          <target state="translated">有关静态文件应用程序的介绍和一些用法示例，请参阅&lt;a href=&quot;../../howto/static-files/index&quot;&gt;管理静态文件（例如，图像，JavaScript，CSS）&lt;/a&gt;。有关部署静态文件的指导，请参阅&lt;a href=&quot;../../howto/static-files/deployment&quot;&gt;部署静态文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5b6e366f307e30cbc012445b0d5d8194205dfaf5" translate="yes" xml:space="preserve">
          <source>For an introduction to the use of &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;.</source>
          <target state="translated">有关&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; &lt;/a&gt;的使用的简介，请参阅&lt;a href=&quot;index&quot;&gt;管理静态文件（例如，图像，JavaScript，CSS）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff33af586de20dcc9dc963235e63d160e339357a" translate="yes" xml:space="preserve">
          <source>For an introduction, see &lt;a href=&quot;../../topics/db/queries#field-lookups-intro&quot;&gt;models and database queries documentation&lt;/a&gt;.</source>
          <target state="translated">有关介绍，请参见&lt;a href=&quot;../../topics/db/queries#field-lookups-intro&quot;&gt;模型和数据库查询文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="91f45c0b4fdd79cf441093caaf95e3a639c7bf7e" translate="yes" xml:space="preserve">
          <source>For an introduction, see the &lt;a href=&quot;db-api#spatial-lookups-intro&quot;&gt;spatial lookups introduction&lt;/a&gt;. For an overview of what lookups are compatible with a particular spatial backend, refer to the &lt;a href=&quot;db-api#spatial-lookup-compatibility&quot;&gt;spatial lookup compatibility table&lt;/a&gt;.</source>
          <target state="translated">有关介绍，请参见&lt;a href=&quot;db-api#spatial-lookups-intro&quot;&gt;空间查找介绍&lt;/a&gt;。有关与特定空间后端兼容的查找的概述，请参考&lt;a href=&quot;db-api#spatial-lookup-compatibility&quot;&gt;空间查找兼容性表&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e566430cd1a2affb5f5c262cc70d975407c98c38" translate="yes" xml:space="preserve">
          <source>For an overview on performing distance queries, please refer to the &lt;a href=&quot;db-api#distance-queries&quot;&gt;distance queries introduction&lt;/a&gt;.</source>
          <target state="translated">有关执行距离查询的概述，请参阅&lt;a href=&quot;db-api#distance-queries&quot;&gt;距离查询简介&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="032e1a321d9ffc6c2146932f576a128a8e65fa68" translate="yes" xml:space="preserve">
          <source>For any other case where you would like to delay the translation, but have to pass the translatable string as argument to another function, you can wrap this function inside a lazy call yourself. For example:</source>
          <target state="translated">对于任何其他情况,如果你想延迟翻译,但必须将可翻译的字符串作为参数传递给另一个函数,你可以将这个函数包裹在自己的懒惰调用中。例如</target>
        </trans-unit>
        <trans-unit id="085ed960d0740bd94ea40506cfce694cfddc0a2f" translate="yes" xml:space="preserve">
          <source>For application authors</source>
          <target state="translated">给申请者</target>
        </trans-unit>
        <trans-unit id="7cec9e84482bc35d6c78faa794917c557d1e76eb" translate="yes" xml:space="preserve">
          <source>For application users</source>
          <target state="translated">对于应用程序用户</target>
        </trans-unit>
        <trans-unit id="73f138ffe9108c4f660de4277273d1ef1b89e005" translate="yes" xml:space="preserve">
          <source>For backends that use cookies, the settings for the cookie are taken from the session cookie settings:</source>
          <target state="translated">对于使用cookie的后台,cookie的设置来自会话cookie设置。</target>
        </trans-unit>
        <trans-unit id="57ad3cfd168ba96bdfced612c26a2ee2a767e407" translate="yes" xml:space="preserve">
          <source>For better performance, you may want to use a cache-based session backend.</source>
          <target state="translated">为了获得更好的性能,你可能希望使用基于缓存的会话后端。</target>
        </trans-unit>
        <trans-unit id="91bce32b94c71f60016d6667344912312df9c907" translate="yes" xml:space="preserve">
          <source>For both string-based and non-string-based fields, you will also need to set &lt;code&gt;blank=True&lt;/code&gt; if you wish to permit empty values in forms, as the &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; parameter only affects database storage (see &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">对于基于字符串的字段和基于非字符串的字段，如果您希望在表单中允许使用空值，则还需要设置 &lt;code&gt;blank=True&lt;/code&gt; ，因为&lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt;参数仅影响数据库存储（请参见&lt;a href=&quot;#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3b0ab1dd7f1f1a3114560cdef94eeb046fe6b282" translate="yes" xml:space="preserve">
          <source>For building up fragments of HTML, you should normally be using &lt;a href=&quot;#django.utils.html.format_html&quot;&gt;&lt;code&gt;django.utils.html.format_html()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">为了构建HTML片段，通常应该改为使用&lt;a href=&quot;#django.utils.html.format_html&quot;&gt; &lt;code&gt;django.utils.html.format_html()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bd8eb4334d88a862d55ca5bac3a26a9a7a016bf0" translate="yes" xml:space="preserve">
          <source>For caches that don&amp;rsquo;t implement &lt;code&gt;close&lt;/code&gt; methods it is a no-op.</source>
          <target state="translated">对于没有实现 &lt;code&gt;close&lt;/code&gt; 方法的缓存，它是无操作的。</target>
        </trans-unit>
        <trans-unit id="79ba2e8a0fe994e51d4c92f58e97e335cd098d33" translate="yes" xml:space="preserve">
          <source>For cases like this, Django exposes a low-level cache API. You can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely: strings, dictionaries, lists of model objects, and so forth. (Most common Python objects can be pickled; refer to the Python documentation for more information about pickling.)</source>
          <target state="translated">对于这样的情况,Django提供了一个低级别的缓存API。你可以使用这个API在缓存中存储你喜欢的任何粒度的对象。你可以缓存任何可以安全腌制的Python对象:字符串、字典、模型对象列表等等。(大多数常见的 Python 对象都可以被腌制,请参考 Python 文档以获得更多关于腌制的信息)。</target>
        </trans-unit>
        <trans-unit id="1fb48d8079dbe45b84226c3cadf04b90ce81a61a" translate="yes" xml:space="preserve">
          <source>For cases like this, use the &lt;code&gt;django.utils.functional.keep_lazy()&lt;/code&gt; decorator. It modifies the function so that &lt;em&gt;if&lt;/em&gt; it&amp;rsquo;s called with a lazy translation as one of its arguments, the function evaluation is delayed until it needs to be converted to a string.</source>
          <target state="translated">对于这种情况，请使用 &lt;code&gt;django.utils.functional.keep_lazy()&lt;/code&gt; 装饰器。它修改了函数，以便&lt;em&gt;如果&lt;/em&gt;以惰性翻译作为其参数之一调用函数，则函数求值将延迟到需要将其转换为字符串为止。</target>
        </trans-unit>
        <trans-unit id="994ead3f1356d2b1dba54966dd67fa94889eed63" translate="yes" xml:space="preserve">
          <source>For common setups with multiple databases, it isn&amp;rsquo;t useful to have these objects in more than one database. Common setups include primary/replica and connecting to external databases. Therefore, it&amp;rsquo;s recommended to write a &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;database router&lt;/a&gt; that allows synchronizing these three models to only one database. Use the same approach for contrib and third-party apps that don&amp;rsquo;t need their tables in multiple databases.</source>
          <target state="translated">对于具有多个数据库的常见设置，将这些对象包含在多个数据库中没有用。常见设置包括主数据库/副本数据库和连接到外部数据库。因此，建议编写一个&lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;数据库路由器&lt;/a&gt;，以允许将这三个模型仅同步到一个数据库。对不需要多个数据库中的表的contrib和第三方应用程序使用相同的方法。</target>
        </trans-unit>
        <trans-unit id="9008520a23cc5398ce6e6e03cb58a6c8452a5ef0" translate="yes" xml:space="preserve">
          <source>For complete details on all the settings, commands, template tags, and other pieces included in &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;the staticfiles reference&lt;/a&gt;.</source>
          <target state="translated">有关&lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 中&lt;/a&gt;包含的所有设置，命令，模板标记和其他部分的完整详细信息，请参见&lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;staticfiles参考&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1ab98fe2e9e6c5b8dac81734119f6a96694f9705" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides a &lt;code&gt;send()&lt;/code&gt; method for sending a single email. If you need to send multiple messages, the email backend API &lt;a href=&quot;#topics-sending-multiple-emails&quot;&gt;provides an alternative&lt;/a&gt;.</source>
          <target state="translated">为了方便起见，&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;提供了 &lt;code&gt;send()&lt;/code&gt; 方法来发送一封电子邮件。如果您需要发送多个消息，则电子邮件后端API &lt;a href=&quot;#topics-sending-multiple-emails&quot;&gt;提供了一种替代方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd6bc939b24142ba0e1fff49a7e3dd24af2f2dbe" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;code&gt;index_together&lt;/code&gt; can be a single list when dealing with a single set of fields:</source>
          <target state="translated">为了方便起见，在处理单个字段集时， &lt;code&gt;index_together&lt;/code&gt; 可以是单个列表：</target>
        </trans-unit>
        <trans-unit id="ce4cdf927e9d3f5bcc2a4d900ae3b68bcd958626" translate="yes" xml:space="preserve">
          <source>For convenience, &lt;code&gt;unique_together&lt;/code&gt; can be a single list when dealing with a single set of fields:</source>
          <target state="translated">为了方便起见，在处理单个字段集时， &lt;code&gt;unique_together&lt;/code&gt; 可以是单个列表：</target>
        </trans-unit>
        <trans-unit id="07080c385504623c0179d481408b47986bcaa26b" translate="yes" xml:space="preserve">
          <source>For convenience, Django offers different levels of cache granularity: you can cache the output of specific views, or only the pieces that are difficult to produce, or even an entire site.</source>
          <target state="translated">为了方便起见,Django提供了不同级别的缓存粒度:你可以缓存特定视图的输出,也可以只缓存难产的片段,甚至可以缓存整个网站。</target>
        </trans-unit>
        <trans-unit id="a33658bc26b48121cd01e6c62ea8102f8c745111" translate="yes" xml:space="preserve">
          <source>For convenience, Django provides a &lt;code&gt;pk&lt;/code&gt; lookup shortcut, which stands for &amp;ldquo;primary key&amp;rdquo;.</source>
          <target state="translated">为了方便起见，Django提供了一个 &lt;code&gt;pk&lt;/code&gt; 查找快捷方式，它代表&amp;ldquo;主键&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="8ba2fecb762785a1f98e5db46660c8f03323d035" translate="yes" xml:space="preserve">
          <source>For convenience, and because it&amp;rsquo;s a good idea to have a consistent 404 error page across your site, Django provides an &lt;code&gt;Http404&lt;/code&gt; exception. If you raise &lt;code&gt;Http404&lt;/code&gt; at any point in a view function, Django will catch it and return the standard error page for your application, along with an HTTP error code 404.</source>
          <target state="translated">为了方便起见，并且在整个网站上都具有一致的404错误页面是一个好主意，因此Django提供了 &lt;code&gt;Http404&lt;/code&gt; 异常。如果您在视图函数中的任何时候引发 &lt;code&gt;Http404&lt;/code&gt; ，Django都会捕获它并返回应用程序的标准错误页面以及HTTP错误代码404。</target>
        </trans-unit>
        <trans-unit id="6f355d7307dc13d50c50cd78d6a431ad52fb3a16" translate="yes" xml:space="preserve">
          <source>For convenience, each model has an &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; named &lt;code&gt;id&lt;/code&gt; by default unless you explicitly specify &lt;code&gt;primary_key=True&lt;/code&gt; on a field in your model. See the documentation for &lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">为方便起见，每个模型默认都有一个名为 &lt;code&gt;id&lt;/code&gt; 的&lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;，除非您在模型中的字段上明确指定 &lt;code&gt;primary_key=True&lt;/code&gt; 。有关更多详细信息，请参见&lt;a href=&quot;fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="00b6f399568caf034f2bd9baf36652b9633df6c5" translate="yes" xml:space="preserve">
          <source>For conversions, access the preferred unit attribute to get a converted distance quantity:</source>
          <target state="translated">对于换算,访问首选单位属性以获得换算后的距离量。</target>
        </trans-unit>
        <trans-unit id="17f5ab1e933cc3767d56d79b5fda1bc30762cc06" translate="yes" xml:space="preserve">
          <source>For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant.</source>
          <target state="translated">对于创建条形图等,该标签计算给定值与最大值的比率,然后将该比率应用于一个常数。</target>
        </trans-unit>
        <trans-unit id="9d659ee2de0bfab758a3c6297904c71bd25ed4d2" translate="yes" xml:space="preserve">
          <source>For databases other than SQLite</source>
          <target state="translated">对于SQLite以外的数据库</target>
        </trans-unit>
        <trans-unit id="26b228b856ac1e345526c8b4f3d28d81b09acc58" translate="yes" xml:space="preserve">
          <source>For date and date/time fields, you can add or subtract a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object. The following would return all entries that were modified more than 3 days after they were published:</source>
          <target state="translated">对于日期和日期/时间字段，您可以添加或减去&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;对象。以下内容将返回所有已发布的修改超过3天的条目：</target>
        </trans-unit>
        <trans-unit id="c3ea98e4b4088a980b262038c9f53cd940a2574a" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, a &amp;lsquo;day of the week&amp;rsquo; match. Allows chaining additional field lookups.</source>
          <target state="translated">对于日期和日期时间字段，&amp;ldquo;星期几&amp;rdquo;匹配。允许链接其他字段查找。</target>
        </trans-unit>
        <trans-unit id="a59621a4297e6672557ed775eda5c37a1765e762" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, a &amp;lsquo;quarter of the year&amp;rsquo; match. Allows chaining additional field lookups. Takes an integer value between 1 and 4 representing the quarter of the year.</source>
          <target state="translated">对于日期和日期时间字段，&amp;ldquo;一年的四分之一&amp;rdquo;匹配。允许链接其他字段查找。取一个介于1到4之间的整数值，代表一年的四分之一。</target>
        </trans-unit>
        <trans-unit id="42dd2feb45b5f660ff3b9a6d4074634986a29ee0" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact ISO 8601 week-numbering year match. Allows chaining additional field lookups. Takes an integer year.</source>
          <target state="translated">对于日期和日期时间字段,精确的ISO 8601周号年份匹配。允许链接其他字段的查询。取整数年。</target>
        </trans-unit>
        <trans-unit id="1593cffc96d622049ccdc42f7bb0f2a1ae8036b1" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact day match. Allows chaining additional field lookups. Takes an integer day.</source>
          <target state="translated">对于日期和日期时间字段,精确匹配日期。允许链接其他字段的查询。取整数日。</target>
        </trans-unit>
        <trans-unit id="49d38ad7fe93c4540c3f229ec62ec695a94c44d4" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact month match. Allows chaining additional field lookups. Takes an integer 1 (January) through 12 (December).</source>
          <target state="translated">对于日期和日期时间字段,精确的月份匹配。允许链接其他字段的查询。取整数1(1月)到12(12月)。</target>
        </trans-unit>
        <trans-unit id="606db62e280330ab2e78af535232722c97f0ff10" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, an exact year match. Allows chaining additional field lookups. Takes an integer year.</source>
          <target state="translated">对于日期和日期时间字段,精确匹配年份。允许链接其他字段的查询。取整数年。</target>
        </trans-unit>
        <trans-unit id="5e7ddbc21aec55ccdb748d213426101dce95eb9c" translate="yes" xml:space="preserve">
          <source>For date and datetime fields, return the week number (1-52 or 53) according to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt;, i.e., weeks start on a Monday and the first week contains the year&amp;rsquo;s first Thursday.</source>
          <target state="translated">对于日期和日期时间字段，根据&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO-8601&quot;&gt;ISO-8601&lt;/a&gt;返回星期数（1-52或53），即，星期从星期一开始，而第一周包含年份的第一个星期四。</target>
        </trans-unit>
        <trans-unit id="dcf2e4875fa50e3add0a11dd7c345c91e31164aa" translate="yes" xml:space="preserve">
          <source>For dates that are the current day or within one day, return &amp;ldquo;today&amp;rdquo;, &amp;ldquo;tomorrow&amp;rdquo; or &amp;ldquo;yesterday&amp;rdquo;, as appropriate. Otherwise, format the date using the passed in format string.</source>
          <target state="translated">对于当天或一天之内的日期，请酌情返回&amp;ldquo;今天&amp;rdquo;，&amp;ldquo;明天&amp;rdquo;或&amp;ldquo;昨天&amp;rdquo;。否则，请使用传入的格式字符串设置日期格式。</target>
        </trans-unit>
        <trans-unit id="522a331d5225fa66def9fc3bd2e8fac66fc5b772" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact hour match. Allows chaining additional field lookups. Takes an integer between 0 and 23.</source>
          <target state="translated">对于日期时间和时间字段,精确的小时匹配。允许链式查找其他字段。取0到23之间的整数。</target>
        </trans-unit>
        <trans-unit id="ac89f2c106463643fd9699cf90f5e9127b0da47c" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact minute match. Allows chaining additional field lookups. Takes an integer between 0 and 59.</source>
          <target state="translated">对于日期时间和时间字段,精确的分钟匹配。允许链式查找其他字段。取0到59之间的整数。</target>
        </trans-unit>
        <trans-unit id="cb253c63a93a7f34a17bfff1bcace0dc8609b145" translate="yes" xml:space="preserve">
          <source>For datetime and time fields, an exact second match. Allows chaining additional field lookups. Takes an integer between 0 and 59.</source>
          <target state="translated">对于日期时间和时间字段,完全秒配。允许链式查找其他字段。取0到59之间的整数。</target>
        </trans-unit>
        <trans-unit id="065ccdbf361bd445a3ea9b16f5af4220346cf69e" translate="yes" xml:space="preserve">
          <source>For datetime fields, casts the value as date. Allows chaining additional field lookups. Takes a date value.</source>
          <target state="translated">对于日期时间字段,将值投射为日期。允许链接其他字段的查找。取一个日期值。</target>
        </trans-unit>
        <trans-unit id="5cb754f1dcc8bef12a5572feace62cc16ce3e1ad" translate="yes" xml:space="preserve">
          <source>For datetime fields, casts the value as time. Allows chaining additional field lookups. Takes a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt;&lt;code&gt;datetime.time&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">对于日期时间字段，将值强制转换为时间。允许链接其他字段查找。带有&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt; &lt;code&gt;datetime.time&lt;/code&gt; &lt;/a&gt;值。</target>
        </trans-unit>
        <trans-unit id="287a99b6d2ccfdfa613eb3ea97b6c9626d6505b7" translate="yes" xml:space="preserve">
          <source>For datetime values, returns a string representing how many seconds, minutes or hours ago it was &amp;ndash; falling back to the &lt;a href=&quot;../templates/builtins#std:templatefilter-timesince&quot;&gt;&lt;code&gt;timesince&lt;/code&gt;&lt;/a&gt; format if the value is more than a day old. In case the datetime value is in the future the return value will automatically use an appropriate phrase.</source>
          <target state="translated">对于datetime值，返回一个字符串，该字符串表示该日期之前是多少秒，分钟或几小时&amp;ndash; 如果该值超过一天，则使用&lt;a href=&quot;../templates/builtins#std:templatefilter-timesince&quot;&gt; &lt;code&gt;timesince&lt;/code&gt; &lt;/a&gt;格式。如果datetime值在将来，则返回值将自动使用适当的短语。</target>
        </trans-unit>
        <trans-unit id="ce8b44858ceebee50a15dccd632d32f06ba831f7" translate="yes" xml:space="preserve">
          <source>For debug purposes only!</source>
          <target state="translated">仅供调试使用!</target>
        </trans-unit>
        <trans-unit id="1e5e8cc6373625d6ede780576c6909b6713e5dda" translate="yes" xml:space="preserve">
          <source>For definitions of the different versions of RSS, see: &lt;a href=&quot;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&quot;&gt;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&lt;/a&gt;</source>
          <target state="translated">有关不同版本的RSS的定义，请参阅：&lt;a href=&quot;https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss&quot;&gt;https&lt;/a&gt; : //web.archive.org/web/20110718035220/http : //diveintomark.org/archives/2004/02/04/incompatible-rss</target>
        </trans-unit>
        <trans-unit id="0dc5d40b5d2ee131a558d783f74733735bef205e" translate="yes" xml:space="preserve">
          <source>For detailed description how names passed in &lt;code&gt;kwargs&lt;/code&gt; are resolved see &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">为了详细说明，通过名称如何 &lt;code&gt;kwargs&lt;/code&gt; 都解决了看&lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt; &lt;code&gt;get_or_create()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7f6c3c45c81cb288d50532a438e4c2e1de010cf9" translate="yes" xml:space="preserve">
          <source>For details on accessing backwards-related objects, see the &lt;a href=&quot;queries#backwards-related-objects&quot;&gt;Following relationships backward example&lt;/a&gt;.</source>
          <target state="translated">有关访问向后相关对象的详细信息，请参见&lt;a href=&quot;queries#backwards-related-objects&quot;&gt;以下向后关系示例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="163379e03ba2cf1b5d26dfdc8ca39d2b4c17c2a4" translate="yes" xml:space="preserve">
          <source>For details on how to add your own checks and integrate them with Django&amp;rsquo;s system checks, see the &lt;a href=&quot;../topics/checks&quot;&gt;System check topic guide&lt;/a&gt;.</source>
          <target state="translated">有关如何添加您自己的检查并将其与Django的系统检查集成的详细信息，请参见&lt;a href=&quot;../topics/checks&quot;&gt;系统检查主题指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5dc195be6c74605240dd1d253de36726e6d6d316" translate="yes" xml:space="preserve">
          <source>For details on how you&amp;rsquo;d write one of these backends, see &lt;a href=&quot;../custom-file-storage&quot;&gt;Writing a custom storage system&lt;/a&gt;. There are 3rd party apps available that provide storage backends for many common file storage APIs. A good starting point is the &lt;a href=&quot;https://djangopackages.org/grids/g/storage-backends/&quot;&gt;overview at djangopackages.org&lt;/a&gt;.</source>
          <target state="translated">有关如何编写这些后端之一的详细信息，请参阅《&lt;a href=&quot;../custom-file-storage&quot;&gt;编写自定义存储系统》&lt;/a&gt;。有可用的第三方应用程序为许多常见文件存储API提供存储后端。&lt;a href=&quot;https://djangopackages.org/grids/g/storage-backends/&quot;&gt;djangopackages.org&lt;/a&gt;上的概述是一个很好的起点。</target>
        </trans-unit>
        <trans-unit id="52957ba84f98b1d5cee6b3fcf986ebb5e0aeef4b" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;#playing-with-context&quot;&gt;Playing with Context objects&lt;/a&gt; below.</source>
          <target state="translated">有关详细信息，请参见下面的&amp;ldquo; &lt;a href=&quot;#playing-with-context&quot;&gt;使用上下文对象播放&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ca13a30dff65815da18fa43605645bf867c1ee7" translate="yes" xml:space="preserve">
          <source>For each &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting, Django instantiates an &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; wraps &lt;a href=&quot;#django.template.Engine&quot;&gt;&lt;code&gt;Engine&lt;/code&gt;&lt;/a&gt; and adapts it to the common template backend API.</source>
          <target state="translated">对于&lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt;设置中的每个&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;后端，Django实例化&lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt; &lt;code&gt;DjangoTemplates&lt;/code&gt; &lt;/a&gt;包装了&lt;a href=&quot;#django.template.Engine&quot;&gt; &lt;code&gt;Engine&lt;/code&gt; ,&lt;/a&gt;并将其调整为适用于通用模板后端API。</target>
        </trans-unit>
        <trans-unit id="091dadf61f9a776beb554812fdfed65ad59f5923" translate="yes" xml:space="preserve">
          <source>For each action, you can supply either a list of values or a string. When the value already exists in the list, &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;prepend&lt;/code&gt; have no effect; neither does &lt;code&gt;remove&lt;/code&gt; when the value doesn&amp;rsquo;t exist.</source>
          <target state="translated">对于每个操作，您都可以提供值列表或字符串。如果该值已存在于列表中，则 &lt;code&gt;append&lt;/code&gt; 和 &lt;code&gt;prepend&lt;/code&gt; 不起作用；当值不存在时，两个都不会 &lt;code&gt;remove&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb987d0190d5c3530e37b746933ad08afcfcfcbc" translate="yes" xml:space="preserve">
          <source>For each field, we describe the default widget used if you don&amp;rsquo;t specify &lt;code&gt;widget&lt;/code&gt;. We also specify the value returned when you provide an empty value (see the section on &lt;code&gt;required&lt;/code&gt; above to understand what that means).</source>
          <target state="translated">对于每个字段，如果您不指定 &lt;code&gt;widget&lt;/code&gt; ，我们将描述使用的默认控件。当您提供空值时，我们还会指定返回的值（请参阅上面 &lt;code&gt;required&lt;/code&gt; 的部分以了解其含义）。</target>
        </trans-unit>
        <trans-unit id="d87202ef729a6cdd9bbc8a5b5c66e91ce34e02ed" translate="yes" xml:space="preserve">
          <source>For each model field that has &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; set, Django will add a method to retrieve the human-readable name for the field&amp;rsquo;s current value. See &lt;a href=&quot;instances#django.db.models.Model.get_FOO_display&quot;&gt;&lt;code&gt;get_FOO_display()&lt;/code&gt;&lt;/a&gt; in the database API documentation.</source>
          <target state="translated">对于每个设置了&lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt;模型字段，Django将添加一个方法来检索该字段的当前值的可读名称。请参阅数据库API文档中的&lt;a href=&quot;instances#django.db.models.Model.get_FOO_display&quot;&gt; &lt;code&gt;get_FOO_display()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b819f24d3cbd85ac1143152ab6d80ae072da700c" translate="yes" xml:space="preserve">
          <source>For each page (response) that Django sends back from a view, it might provide two HTTP headers: the &lt;code&gt;ETag&lt;/code&gt; header and the &lt;code&gt;Last-Modified&lt;/code&gt; header. These headers are optional on HTTP responses. They can be set by your view function, or you can rely on the &lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt;&lt;code&gt;ConditionalGetMiddleware&lt;/code&gt;&lt;/a&gt; middleware to set the &lt;code&gt;ETag&lt;/code&gt; header.</source>
          <target state="translated">对于Django从视图发送回的每个页面（响应），它可能提供两个HTTP标头： &lt;code&gt;ETag&lt;/code&gt; 标头和 &lt;code&gt;Last-Modified&lt;/code&gt; 标头。这些标头在HTTP响应中是可选的。可以通过您的视图函数来设置它们，或者您可以依靠&lt;a href=&quot;../ref/middleware#django.middleware.http.ConditionalGetMiddleware&quot;&gt; &lt;code&gt;ConditionalGetMiddleware&lt;/code&gt; &lt;/a&gt;中间件来设置 &lt;code&gt;ETag&lt;/code&gt; 头。</target>
        </trans-unit>
        <trans-unit id="56f104ebb00413a98694e90de1856d9319998a8a" translate="yes" xml:space="preserve">
          <source>For each row in your CSV file, call &lt;code&gt;writer.writerow&lt;/code&gt;, passing it an &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt;.</source>
          <target state="translated">对于CSV文件中的每一行，请调用 &lt;code&gt;writer.writerow&lt;/code&gt; ，并将其传递给&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cab83a5a714010f9187f9c6425c8314cf762fc1" translate="yes" xml:space="preserve">
          <source>For each template tag the template parser encounters, it calls a Python function with the tag contents and the parser object itself. This function is responsible for returning a &lt;code&gt;Node&lt;/code&gt; instance based on the contents of the tag.</source>
          <target state="translated">对于模板解析器遇到的每个模板标签，它将调用带有标签内容和解析器对象本身的Python函数。该函数负责根据标签的内容返回 &lt;code&gt;Node&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="ca1d72c8182315b714de1b3cc74b5c3db54b95aa" translate="yes" xml:space="preserve">
          <source>For empty bands (where all pixel values are &amp;ldquo;no data&amp;rdquo;), all statistics are returned as &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">对于空波段（所有像素值均为&amp;ldquo;无数据&amp;rdquo;），所有统计信息均作为 &lt;code&gt;None&lt;/code&gt; 返回。</target>
        </trans-unit>
        <trans-unit id="86553258332baa0d4dd5dd4328d0faa7deb87755" translate="yes" xml:space="preserve">
          <source>For every &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; that does not have &lt;a href=&quot;fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null=True&lt;/code&gt;&lt;/a&gt;, the object will have &lt;code&gt;get_next_by_FOO()&lt;/code&gt; and &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; methods, where &lt;code&gt;FOO&lt;/code&gt; is the name of the field. This returns the next and previous object with respect to the date field, raising a &lt;a href=&quot;#django.db.models.Model.DoesNotExist&quot;&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;&lt;/a&gt; exception when appropriate.</source>
          <target state="translated">对于每个不具有&lt;a href=&quot;fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null=True&lt;/code&gt; 的&lt;/a&gt;&lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt;，该对象将具有 &lt;code&gt;get_next_by_FOO()&lt;/code&gt; 和 &lt;code&gt;get_previous_by_FOO()&lt;/code&gt; 方法，其中 &lt;code&gt;FOO&lt;/code&gt; 是字段的名称。这将返回有关日期字段的下一个和上一个对象，并在适当时引发&lt;a href=&quot;#django.db.models.Model.DoesNotExist&quot;&gt; &lt;code&gt;DoesNotExist&lt;/code&gt; &lt;/a&gt;异常。</target>
        </trans-unit>
        <trans-unit id="c6af115638455b1658d0ace819b2ffe32487193f" translate="yes" xml:space="preserve">
          <source>For every field that has &lt;a href=&quot;fields#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; set, the object will have a &lt;code&gt;get_FOO_display()&lt;/code&gt; method, where &lt;code&gt;FOO&lt;/code&gt; is the name of the field. This method returns the &amp;ldquo;human-readable&amp;rdquo; value of the field.</source>
          <target state="translated">对于每个设置了&lt;a href=&quot;fields#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt;字段，该对象将具有 &lt;code&gt;get_FOO_display()&lt;/code&gt; 方法，其中 &lt;code&gt;FOO&lt;/code&gt; 是字段的名称。此方法返回该字段的&amp;ldquo;人类可读&amp;rdquo;值。</target>
        </trans-unit>
        <trans-unit id="a9d8934a0281dff5b47483effb2b261b49b28dd4" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;Index(fields=['headline', '-pub_date'])&lt;/code&gt; would create SQL with &lt;code&gt;(headline, pub_date DESC)&lt;/code&gt;. Index ordering isn&amp;rsquo;t supported on MySQL. In that case, a descending index is created as a normal index.</source>
          <target state="translated">例如， &lt;code&gt;Index(fields=['headline', '-pub_date'])&lt;/code&gt; 将使用 &lt;code&gt;(headline, pub_date DESC)&lt;/code&gt; 创建SQL 。MySQL不支持索引排序。在这种情况下，将创建一个降序索引作为普通索引。</target>
        </trans-unit>
        <trans-unit id="a28eb7a67fa4fb46ad0e0b99179060eb9054ee2d" translate="yes" xml:space="preserve">
          <source>For example if you have &lt;code&gt;first_name&lt;/code&gt; as a model field and as a &lt;code&gt;ModelAdmin&lt;/code&gt; attribute, the model field will be used.</source>
          <target state="translated">例如，如果您具有 &lt;code&gt;first_name&lt;/code&gt; 作为模型字段和 &lt;code&gt;ModelAdmin&lt;/code&gt; 属性，则将使用模型字段。</target>
        </trans-unit>
        <trans-unit id="06db7318354368de96f4145dda37303d15869be2" translate="yes" xml:space="preserve">
          <source>For example if you wanted to customize the wording of all user facing strings for the &lt;code&gt;name&lt;/code&gt; field:</source>
          <target state="translated">例如，如果您想为 &lt;code&gt;name&lt;/code&gt; 字段自定义所有面向用户的字符串的措词：</target>
        </trans-unit>
        <trans-unit id="7cdc6afd51e180f7d936e985484811415dc36686" translate="yes" xml:space="preserve">
          <source>For example if you wanted to display a particular inline only in the change view, you could override &lt;code&gt;get_formsets_with_inlines&lt;/code&gt; as follows:</source>
          <target state="translated">例如，如果您只想在更改视图中显示特定的内联，则可以按如下所示覆盖 &lt;code&gt;get_formsets_with_inlines&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f77c456b474676c048010c32ab9b46790e583436" translate="yes" xml:space="preserve">
          <source>For example to attach &lt;code&gt;request.user&lt;/code&gt; to the object prior to saving:</source>
          <target state="translated">例如，在保存之前将 &lt;code&gt;request.user&lt;/code&gt; 附加到对象：</target>
        </trans-unit>
        <trans-unit id="9ad3936c55afd72b17f1bad1033bbc892e0fb5f4" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;../topics/i18n/index&quot;&gt;internationalization&lt;/a&gt; middleware would need to distinguish caches by the &lt;code&gt;Accept-language&lt;/code&gt; header.</source>
          <target state="translated">例如，&lt;a href=&quot;../topics/i18n/index&quot;&gt;国际化&lt;/a&gt;中间件将需要通过 &lt;code&gt;Accept-language&lt;/code&gt; 标头区分缓存。</target>
        </trans-unit>
        <trans-unit id="9f50938580412245d851907183f7cbae1c995a73" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;fields#django.db.models.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; fields use a Python &lt;code&gt;datetime&lt;/code&gt; object to store data. Databases don&amp;rsquo;t store &lt;code&gt;datetime&lt;/code&gt; objects, so the field value must be converted into an ISO-compliant date string for insertion into the database.</source>
          <target state="translated">例如，&lt;a href=&quot;fields#django.db.models.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;字段使用Python &lt;code&gt;datetime&lt;/code&gt; 对象存储数据。数据库不存储 &lt;code&gt;datetime&lt;/code&gt; 对象，因此必须将字段值转换为符合ISO要求的日期字符串才能插入数据库。</target>
        </trans-unit>
        <trans-unit id="3a27bf38226ab7ff07f5623795efbd9cac29bd85" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; normalizes input into a Python &lt;code&gt;datetime.date&lt;/code&gt; object. Regardless of whether you pass it a string in the format &lt;code&gt;'1994-07-15'&lt;/code&gt;, a &lt;code&gt;datetime.date&lt;/code&gt; object, or a number of other formats, &lt;code&gt;DateField&lt;/code&gt; will always normalize it to a &lt;code&gt;datetime.date&lt;/code&gt; object as long as it&amp;rsquo;s valid.</source>
          <target state="translated">例如，&lt;a href=&quot;fields#django.forms.DateField&quot;&gt; &lt;code&gt;DateField&lt;/code&gt; &lt;/a&gt;将输入标准化为Python &lt;code&gt;datetime.date&lt;/code&gt; 对象。无论您以 &lt;code&gt;'1994-07-15'&lt;/code&gt; 格式传递字符串， &lt;code&gt;datetime.date&lt;/code&gt; 对象还是其他多种格式，只要 &lt;code&gt;DateField&lt;/code&gt; 有效，DateField都会始终将其标准化为 &lt;code&gt;datetime.date&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="a7d3d035b67f52b99c390681f0df8036d9d1284d" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;i18n/translation#lazy-translations&quot;&gt;lazy translation&lt;/a&gt; can be used before the target language is even known, because it doesn&amp;rsquo;t take place until the translated string is actually required, such as in a rendered template.</source>
          <target state="translated">例如，可以在甚至不知道目标语言之前就使用&lt;a href=&quot;i18n/translation#lazy-translations&quot;&gt;惰性翻译&lt;/a&gt;，因为直到真正需要翻译后的字符串（例如在渲染的模板中）时，它才发生。</target>
        </trans-unit>
        <trans-unit id="65626bcffc97252495c52e838ec35256fdf62bcb" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; uses the app registry to look up translation catalogs in applications. To translate at import time, you need &lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt;&lt;code&gt;gettext_lazy()&lt;/code&gt;&lt;/a&gt; instead. (Using &lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; would be a bug, because the translation would happen at import time, rather than at each request depending on the active language.)</source>
          <target state="translated">例如，&lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt;使用应用程序注册表在应用程序中查找翻译目录。要在导入时进行翻译，您需要使用&lt;a href=&quot;utils#django.utils.translation.gettext_lazy&quot;&gt; &lt;code&gt;gettext_lazy()&lt;/code&gt; &lt;/a&gt;代替。（使用&lt;a href=&quot;utils#django.utils.translation.gettext&quot;&gt; &lt;code&gt;gettext()&lt;/code&gt; &lt;/a&gt;将是一个错误，因为翻译将在导入时发生，而不是根据活动语言在每次请求时进行。）</target>
        </trans-unit>
        <trans-unit id="f5be2fd2ea1a9ec8e596aeedb6d085b373362255" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;CheckConstraint(check=Q(age__gte=18), name='age_gte_18')&lt;/code&gt; ensures the age field is never less than 18.</source>
          <target state="translated">例如， &lt;code&gt;CheckConstraint(check=Q(age__gte=18), name='age_gte_18')&lt;/code&gt; 可确保年龄字段不小于18。</target>
        </trans-unit>
        <trans-unit id="12d159ad663a37fc7486d7d61ec051e5cf1aeeac" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;GinIndex(name='json_index', fields=['jsonfield'],
opclasses=['jsonb_path_ops'])&lt;/code&gt; creates a gin index on &lt;code&gt;jsonfield&lt;/code&gt; using &lt;code&gt;jsonb_path_ops&lt;/code&gt;.</source>
          <target state="translated">例如， &lt;code&gt;GinIndex(name='json_index', fields=['jsonfield'], opclasses=['jsonb_path_ops'])&lt;/code&gt; 使用 &lt;code&gt;jsonb_path_ops&lt;/code&gt; 在 &lt;code&gt;jsonfield&lt;/code&gt; 上创建gin索引。</target>
        </trans-unit>
        <trans-unit id="8529ce07a1126b744d3c5ea07ee62908bb7f707a" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;SELECT DISTINCT ON (a)&lt;/code&gt; gives you the first row for each value in column &lt;code&gt;a&lt;/code&gt;. If you don&amp;rsquo;t specify an order, you&amp;rsquo;ll get some arbitrary row.</source>
          <target state="translated">例如， &lt;code&gt;SELECT DISTINCT ON (a)&lt;/code&gt; 给出了你的第一行中的列中的每个值 &lt;code&gt;a&lt;/code&gt; 。如果您不指定订单，则会得到一些任意行。</target>
        </trans-unit>
        <trans-unit id="390b16cd2cf8e734568d834589997b24d4d5756d" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;UniqueConstraint(fields=['room', 'date'],
name='unique_booking')&lt;/code&gt; ensures each room can only be booked once for each date.</source>
          <target state="translated">例如， &lt;code&gt;UniqueConstraint(fields=['room', 'date'], name='unique_booking')&lt;/code&gt; 确保每个房间每个日期只能预订一次。</target>
        </trans-unit>
        <trans-unit id="daa52bee5674e99acfc849dbcff198f33e258e7e" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;foo.com/bar&lt;/code&gt; will be redirected to &lt;code&gt;foo.com/bar/&lt;/code&gt; if you don&amp;rsquo;t have a valid URL pattern for &lt;code&gt;foo.com/bar&lt;/code&gt; but &lt;em&gt;do&lt;/em&gt; have a valid pattern for &lt;code&gt;foo.com/bar/&lt;/code&gt;.</source>
          <target state="translated">例如，如果您没有 &lt;code&gt;foo.com/bar/&lt;/code&gt; 的有效URL模式，但&lt;em&gt;确实&lt;/em&gt;有 &lt;code&gt;foo.com/bar&lt;/code&gt; /的有效模式，则 &lt;code&gt;foo.com/bar&lt;/code&gt; 将被重定向到 &lt;code&gt;foo.com/bar/&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="acda421e62fa57606e2437699da05abac72b152b" translate="yes" xml:space="preserve">
          <source>For example, Django uses the following method for its &lt;a href=&quot;../ref/models/fields#django.db.models.BinaryField&quot;&gt;&lt;code&gt;BinaryField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">例如，Django对其&lt;a href=&quot;../ref/models/fields#django.db.models.BinaryField&quot;&gt; &lt;code&gt;BinaryField&lt;/code&gt; &lt;/a&gt;使用以下方法：</target>
        </trans-unit>
        <trans-unit id="8e172ef87663d0b86cc887111ff1dc787b57de3f" translate="yes" xml:space="preserve">
          <source>For example, Django was used at &lt;a href=&quot;http://www.kusports.com/&quot;&gt;kusports.com&lt;/a&gt; to generate customized, printer-friendly NCAA tournament brackets, as PDF files, for people participating in a March Madness contest.</source>
          <target state="translated">例如，在&lt;a href=&quot;http://www.kusports.com/&quot;&gt;kusports.com&lt;/a&gt;上使用Django 为参加March Madness竞赛的人们生成了定制的，打印机友好的NCAA锦标赛括号，为PDF文件。</target>
        </trans-unit>
        <trans-unit id="80943883f7d984a6641475f505bdfdd86703d93d" translate="yes" xml:space="preserve">
          <source>For example, a JSON mixin might look something like this:</source>
          <target state="translated">例如,一个JSON mixin可能看起来像这样。</target>
        </trans-unit>
        <trans-unit id="d622b054a138b10227a9f803d572d5e5a50d59f0" translate="yes" xml:space="preserve">
          <source>For example, a website could offer an RSS feed of recent crimes for every police beat in a city. It&amp;rsquo;d be silly to create a separate &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class for each police beat; that would violate the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#dry&quot;&gt;DRY principle&lt;/a&gt; and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; so feeds can output items based on information in the feed&amp;rsquo;s URL.</source>
          <target state="translated">例如，一个网站可以为城市中每一个被警察殴打的人提供近期犯罪的RSS提要。为每个警察节拍创建一个单独的&lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt; &lt;code&gt;Feed&lt;/code&gt; &lt;/a&gt;类是很愚蠢的。这将违反&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/misc/design-philosophies/#dry&quot;&gt;DRY原理&lt;/a&gt;，并将数据耦合到编程逻辑。相反，联合框架允许您访问从&lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;传递的参数，以便提要可以根据提要URL中的信息输出项目。</target>
        </trans-unit>
        <trans-unit id="32c09ab0d99cab3d599659013ef2ae359d32fd04" translate="yes" xml:space="preserve">
          <source>For example, an attacker could log into &lt;code&gt;good.example.com&lt;/code&gt; and get a valid session for their account. If the attacker has control over &lt;code&gt;bad.example.com&lt;/code&gt;, they can use it to send their session key to you since a subdomain is permitted to set cookies on &lt;code&gt;*.example.com&lt;/code&gt;. When you visit &lt;code&gt;good.example.com&lt;/code&gt;, you&amp;rsquo;ll be logged in as the attacker and might inadvertently enter your sensitive personal data (e.g. credit card info) into the attacker&amp;rsquo;s account.</source>
          <target state="translated">例如，攻击者可以登录 &lt;code&gt;good.example.com&lt;/code&gt; 并获得其帐户的有效会话。如果攻击者可以控制 &lt;code&gt;bad.example.com&lt;/code&gt; ，则可以使用它向您发送会话密钥，因为允许子域在 &lt;code&gt;*.example.com&lt;/code&gt; 上设置cookie 。当您访问 &lt;code&gt;good.example.com&lt;/code&gt; 时，您将以攻击者身份登录，并且可能无意中将您的敏感个人数据（例如信用卡信息）输入到攻击者的帐户中。</target>
        </trans-unit>
        <trans-unit id="a246838b4dded87ebc8eaa300c816133a80d83cb" translate="yes" xml:space="preserve">
          <source>For example, assuming an Email model that has a &lt;code&gt;body&lt;/code&gt; attribute and a many-to-many relation to User, the following template code is optimal:</source>
          <target state="translated">例如，假设电子邮件模型具有 &lt;code&gt;body&lt;/code&gt; 属性和与用户的多对多关系，则以下模板代码是最佳的：</target>
        </trans-unit>
        <trans-unit id="1d722e1124a3a5f8ff5fb6e2d47961555ceb8107" translate="yes" xml:space="preserve">
          <source>For example, assuming the following class-based view:</source>
          <target state="translated">例如,假设以下基于类的观点。</target>
        </trans-unit>
        <trans-unit id="f24493d60cc4ff3745f2d26d5246cb69bda1d13d" translate="yes" xml:space="preserve">
          <source>For example, assuming you have &lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;'/static/'&lt;/code&gt;, the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command would collect the &amp;ldquo;stats&amp;rdquo; files in a &lt;code&gt;'downloads'&lt;/code&gt; subdirectory of &lt;a href=&quot;#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">例如，假设您将&lt;a href=&quot;#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;'/static/'&lt;/code&gt; ，&lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt;管理命令将在&lt;a href=&quot;#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;'downloads'&lt;/code&gt; 子目录中收集&amp;ldquo;统计&amp;rdquo;文件。</target>
        </trans-unit>
        <trans-unit id="b76b34053dc515346add887966fae4b47621b177" translate="yes" xml:space="preserve">
          <source>For example, both of these models use the same underlying database table:</source>
          <target state="translated">例如,这两种模式都使用相同的基础数据库表。</target>
        </trans-unit>
        <trans-unit id="be04b24d7f1f643fa63e9892d175c3cc722c423b" translate="yes" xml:space="preserve">
          <source>For example, consider an author query that attempts to find out the average rating of books written by each author:</source>
          <target state="translated">例如,考虑一个作者查询,试图找出每个作者所写书籍的平均评分。</target>
        </trans-unit>
        <trans-unit id="4d41e3a123d0a71ac27a375044995f1535e74d7c" translate="yes" xml:space="preserve">
          <source>For example, consider the case of an application tracking the musical groups which musicians belong to. There is a many-to-many relationship between a person and the groups of which they are a member, so you could use a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to represent this relationship. However, there is a lot of detail about the membership that you might want to collect, such as the date at which the person joined the group.</source>
          <target state="translated">例如，考虑应用程序跟踪音乐家所属的音乐团体的情况。一个人与其所属的组之间存在多对多关系，因此您可以使用&lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt;表示这种关系。但是，关于您可能希望收集的成员资格，有很多详细信息，例如该人加入该组的日期。</target>
        </trans-unit>
        <trans-unit id="1ee6868d72ee360f060d928e04a60f0b6da77184" translate="yes" xml:space="preserve">
          <source>For example, consider the following exchange between the client and server:</source>
          <target state="translated">例如,考虑以下客户端和服务器之间的交流。</target>
        </trans-unit>
        <trans-unit id="50dfca05afb0b864e6e367b2f5b53711b365f279" translate="yes" xml:space="preserve">
          <source>For example, for a GitHub-like website this would mean that if a logged-in user follows a link to a private GitHub project posted on a corporate discussion forum or email, GitHub will not receive the session cookie and the user won&amp;rsquo;t be able to access the project. A bank website, however, most likely doesn&amp;rsquo;t want to allow any transactional pages to be linked from external sites so the &lt;code&gt;'Strict'&lt;/code&gt; flag would be appropriate.</source>
          <target state="translated">例如，对于类似GitHub的网站，这意味着，如果已登录的用户跟随指向在公司讨论论坛或电子邮件上发布的私有GitHub项目的链接，则GitHub将不会收到会话Cookie，并且该用户将不会能够访问该项目。但是，银行网站很可能不希望从外部站点链接任何交易页面，因此使用 &lt;code&gt;'Strict'&lt;/code&gt; 标记是合适的。</target>
        </trans-unit>
        <trans-unit id="8b8d15a169d7dd783fadfe82b49729567dc09a23" translate="yes" xml:space="preserve">
          <source>For example, for this setting:</source>
          <target state="translated">例如,对于这种设置。</target>
        </trans-unit>
        <trans-unit id="30bca72fc5eb012eefb4e2af9f75a79bc0ea52c8" translate="yes" xml:space="preserve">
          <source>For example, given &lt;code&gt;MyModel&lt;/code&gt; with an &lt;code&gt;active&lt;/code&gt; field, this snippet ensures that the &lt;code&gt;if obj.active&lt;/code&gt; check at the end uses the correct value if updating &lt;code&gt;active&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; fails in the transaction:</source>
          <target state="translated">例如，给定 &lt;code&gt;MyModel&lt;/code&gt; 带有 &lt;code&gt;active&lt;/code&gt; 字段，此代码段可确保 &lt;code&gt;if obj.active&lt;/code&gt; 在事务中将 &lt;code&gt;active&lt;/code&gt; 更新为 &lt;code&gt;True&lt;/code&gt; 失败，最后的if obj.active检查使用正确的值：</target>
        </trans-unit>
        <trans-unit id="8fca2e153a6817b31175cf122ed1bf76d7dbff22" translate="yes" xml:space="preserve">
          <source>For example, given an app &lt;code&gt;common/models.py&lt;/code&gt;:</source>
          <target state="translated">例如，给定一个应用 &lt;code&gt;common/models.py&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="82c068a3348e9335855de4571fd3358289bf5be2" translate="yes" xml:space="preserve">
          <source>For example, given this stored procedure in an Oracle database:</source>
          <target state="translated">例如,给定Oracle数据库中的这个存储过程。</target>
        </trans-unit>
        <trans-unit id="5e0f6022b0d932e3ce9cc4127fab69a392204cda" translate="yes" xml:space="preserve">
          <source>For example, here is the partial definition for a user model that defines two required fields - a date of birth and height:</source>
          <target state="translated">例如,这里是一个用户模型的部分定义,定义了两个必填字段--出生日期和身高。</target>
        </trans-unit>
        <trans-unit id="f080380cc91321db18be0ed5e5b2815307b9d0ca" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s a custom template tag, &lt;code&gt;{% upper %}&lt;/code&gt;, that capitalizes everything between itself and &lt;code&gt;{% endupper %}&lt;/code&gt;.</source>
          <target state="translated">例如，这是一个自定义模板标签 &lt;code&gt;{% upper %}&lt;/code&gt; ，它大写了它自己和 &lt;code&gt;{% endupper %}&lt;/code&gt; 之间的所有内容。</target>
        </trans-unit>
        <trans-unit id="9b9d735b9c5b8d870234e558bacbf34dd9c85bd5" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s a validator that only allows even numbers:</source>
          <target state="translated">例如，这是一个仅允许偶数的验证器：</target>
        </trans-unit>
        <trans-unit id="cd701cbfd16d3186e327aaf9b1f84400d53c091b" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s an attack scenario if you use &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; to serialize session data. If you&amp;rsquo;re using the &lt;a href=&quot;#cookie-session-backend&quot;&gt;signed cookie session backend&lt;/a&gt; and &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; is known by an attacker (there isn&amp;rsquo;t an inherent vulnerability in Django that would cause it to leak), the attacker could insert a string into their session which, when unpickled, executes arbitrary code on the server. The technique for doing so is simple and easily available on the internet. Although the cookie session storage signs the cookie-stored data to prevent tampering, a &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; leak immediately escalates to a remote code execution vulnerability.</source>
          <target state="translated">例如，如果您使用&lt;a href=&quot;https://docs.python.org/3/library/pickle.html#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;序列化会话数据，这是一种攻击情形。如果您使用&lt;a href=&quot;#cookie-session-backend&quot;&gt;签名的Cookie会话后端，&lt;/a&gt;并且攻击者知道&lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;（Django中没有一个固有的漏洞会导致其泄漏），则攻击者可以在其会话中插入一个字符串，该字符串在未腌制时将执行服务器上的任意代码。这样做的技术很简单，并且可以在Internet上轻松获得。尽管cookie会话存储对cookie存储的数据进行签名以防止篡改，但是&lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt; &lt;code&gt;SECRET_KEY&lt;/code&gt; &lt;/a&gt;泄漏立即升级为远程代码执行漏洞。</target>
        </trans-unit>
        <trans-unit id="a9b99d628c1b69952232a27efb8b776dffa490e3" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s an excerpt of the URLconf for the &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django website&lt;/a&gt; itself. It includes a number of other URLconfs:</source>
          <target state="translated">例如，这是&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django网站&lt;/a&gt;本身的URLconf的摘录。它包括许多其他URLconf：</target>
        </trans-unit>
        <trans-unit id="e64d241ee6301d9415a0df7e9b9bd01aead3c6f9" translate="yes" xml:space="preserve">
          <source>For example, here&amp;rsquo;s how sending our &lt;code&gt;pizza_done&lt;/code&gt; signal might look:</source>
          <target state="translated">例如，这是发送我们的 &lt;code&gt;pizza_done&lt;/code&gt; 信号的样子：</target>
        </trans-unit>
        <trans-unit id="d11541a9d468d4cd46d6175644e9833e8b842148" translate="yes" xml:space="preserve">
          <source>For example, if &lt;a href=&quot;#std:setting-FORMAT_MODULE_PATH&quot;&gt;&lt;code&gt;FORMAT_MODULE_PATH&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;mysite.formats&lt;/code&gt;, and current language is &lt;code&gt;en&lt;/code&gt; (English), Django will expect a directory tree like:</source>
          <target state="translated">例如，如果&lt;a href=&quot;#std:setting-FORMAT_MODULE_PATH&quot;&gt; &lt;code&gt;FORMAT_MODULE_PATH&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;mysite.formats&lt;/code&gt; ，并且当前语言为 &lt;code&gt;en&lt;/code&gt; （英语），则Django将期望使用以下目录树：</target>
        </trans-unit>
        <trans-unit id="6a2c4dfd529a15047ff27aa7ebeab7fae04103b1" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;path('users/&amp;lt;id&amp;gt;/', ...)&lt;/code&gt; is the matching pattern, &lt;code&gt;route&lt;/code&gt; will contain &lt;code&gt;'users/&amp;lt;id&amp;gt;/'&lt;/code&gt;.</source>
          <target state="translated">例如，如果 &lt;code&gt;path('users/&amp;lt;id&amp;gt;/', ...)&lt;/code&gt; 是匹配模式，则 &lt;code&gt;route&lt;/code&gt; 将包含 &lt;code&gt;'users/&amp;lt;id&amp;gt;/'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19d132541d20fc7bb2eb3a1a61268013dfbd96b2" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;substring&lt;/code&gt; is user-provided, this function is vulnerable to SQL injection:</source>
          <target state="translated">例如，如果用户提供了 &lt;code&gt;substring&lt;/code&gt; ，则此函数容易受到SQL注入的攻击：</target>
        </trans-unit>
        <trans-unit id="7160212d78e297bff74fb80841aa3967df415bb3" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Car&lt;/code&gt; model has a &lt;code&gt;Manufacturer&lt;/code&gt; &amp;ndash; that is, a &lt;code&gt;Manufacturer&lt;/code&gt; makes multiple cars but each &lt;code&gt;Car&lt;/code&gt; only has one &lt;code&gt;Manufacturer&lt;/code&gt; &amp;ndash; use the following definitions:</source>
          <target state="translated">例如，如果一个 &lt;code&gt;Car&lt;/code&gt; 模型有一个 &lt;code&gt;Manufacturer&lt;/code&gt; （即 &lt;code&gt;Manufacturer&lt;/code&gt; 制造多辆汽车，但每辆 &lt;code&gt;Car&lt;/code&gt; 只有一个 &lt;code&gt;Manufacturer&lt;/code&gt; ，则使用以下定义：</target>
        </trans-unit>
        <trans-unit id="497cc39ebcbf9a72f2dc078c2f7c50e504273f18" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Pizza&lt;/code&gt; can have multiple &lt;code&gt;Topping&lt;/code&gt; objects, modeled like this:</source>
          <target state="translated">例如，如果一个 &lt;code&gt;Pizza&lt;/code&gt; 可以有多个&amp;ldquo; &lt;code&gt;Topping&lt;/code&gt; 对象，则建模如下：</target>
        </trans-unit>
        <trans-unit id="88a926ad96f67f15047715985b0884ddf137184c" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;code&gt;Pizza&lt;/code&gt; has multiple &lt;code&gt;Topping&lt;/code&gt; objects &amp;ndash; that is, a &lt;code&gt;Topping&lt;/code&gt; can be on multiple pizzas and each &lt;code&gt;Pizza&lt;/code&gt; has multiple toppings &amp;ndash; here&amp;rsquo;s how you&amp;rsquo;d represent that:</source>
          <target state="translated">例如，如果一个 &lt;code&gt;Pizza&lt;/code&gt; 有多个 &lt;code&gt;Topping&lt;/code&gt; 对象-即 &lt;code&gt;Topping&lt;/code&gt; 可以在多个比萨饼，每个 &lt;code&gt;Pizza&lt;/code&gt; 具有多种配料-这里是你要如何表示：</target>
        </trans-unit>
        <trans-unit id="959fca095f33dfcfecd28d18457fa30c5abdbc45" translate="yes" xml:space="preserve">
          <source>For example, if a template &lt;code&gt;foo.html&lt;/code&gt; has &lt;code&gt;{% load humanize %}&lt;/code&gt;, a child template (e.g., one that has &lt;code&gt;{% extends &quot;foo.html&quot; %}&lt;/code&gt;) will &lt;em&gt;not&lt;/em&gt; have access to the humanize template tags and filters. The child template is responsible for its own &lt;code&gt;{% load humanize %}&lt;/code&gt;.</source>
          <target state="translated">例如，如果模板 &lt;code&gt;foo.html&lt;/code&gt; 具有 &lt;code&gt;{% load humanize %}&lt;/code&gt; ，则子模板（例如，具有 &lt;code&gt;{% extends &quot;foo.html&quot; %}&lt;/code&gt; 的子模板）将&lt;em&gt;无法&lt;/em&gt;访问人性化模板标签和过滤器。子模板负责自己的 &lt;code&gt;{% load humanize %}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd0e16779d42e07a7aabddc148bbb9f4e659913c" translate="yes" xml:space="preserve">
          <source>For example, if a user requested the URL &amp;ldquo;/articles/2005/05/39323/&amp;rdquo;, Django would call the function &lt;code&gt;news.views.article_detail(request,
year=2005, month=5, pk=39323)&lt;/code&gt;.</source>
          <target state="translated">例如，如果用户请求URL&amp;ldquo; / articles / 2005/05/39323 /&amp;rdquo;，则Django将调用函数 &lt;code&gt;news.views.article_detail(request, year=2005, month=5, pk=39323)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ad997f20e49acf7a66e8c036a9a971fcba2d02b" translate="yes" xml:space="preserve">
          <source>For example, if an article is only allowed on a single site, you&amp;rsquo;d use a model like this:</source>
          <target state="translated">例如，如果只允许在单个站点上发表文章，则可以使用如下模型：</target>
        </trans-unit>
        <trans-unit id="73ec1fd7ebab8cecdff688bce69fda29e88b07f3" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;Article&lt;/code&gt; model looks like this:</source>
          <target state="translated">例如，如果 &lt;code&gt;Article&lt;/code&gt; 模型如下所示：</target>
        </trans-unit>
        <trans-unit id="7644c6b385544646926cd0a3a90e3256cdd6c0dd" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;WSGIScriptAlias&lt;/code&gt; for your application is set to &lt;code&gt;&quot;/minfo&quot;&lt;/code&gt;, then &lt;code&gt;path&lt;/code&gt; might be &lt;code&gt;&quot;/minfo/music/bands/the_beatles/&quot;&lt;/code&gt; and &lt;code&gt;path_info&lt;/code&gt; would be &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt;.</source>
          <target state="translated">例如，如果您的应用程序的 &lt;code&gt;WSGIScriptAlias&lt;/code&gt; 设置为 &lt;code&gt;&quot;/minfo&quot;&lt;/code&gt; ，则 &lt;code&gt;path&lt;/code&gt; 可能是 &lt;code&gt;&quot;/minfo/music/bands/the_beatles/&quot;&lt;/code&gt; 而 &lt;code&gt;path_info&lt;/code&gt; 将是 &lt;code&gt;&quot;/music/bands/the_beatles/&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77e90f3bf3275646db6a9c846ad34e0a66e6d861" translate="yes" xml:space="preserve">
          <source>For example, if the default ordering is by a non-unique &lt;code&gt;name&lt;/code&gt; field, then the changelist is sorted by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;pk&lt;/code&gt;. This could perform poorly if you have a lot of rows and don&amp;rsquo;t have an index on &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;pk&lt;/code&gt;.</source>
          <target state="translated">例如，如果默认排序是通过非唯一 &lt;code&gt;name&lt;/code&gt; 字段进行的，那么更改列表将按 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;pk&lt;/code&gt; 排序。如果您有很多行并且在 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;pk&lt;/code&gt; 上没有索引，则此方法的性能可能会很差。</target>
        </trans-unit>
        <trans-unit id="f4e149bd799a81643324e12a0b823ee09731d37e" translate="yes" xml:space="preserve">
          <source>For example, if the models for your application live in the module &lt;code&gt;myapp.models&lt;/code&gt; (the package structure that is created for an application by the &lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt;&lt;code&gt;manage.py startapp&lt;/code&gt;&lt;/a&gt; script), &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; should read, in part:</source>
          <target state="translated">例如，如果您的应用程序模型位于模块 &lt;code&gt;myapp.models&lt;/code&gt; （由&lt;a href=&quot;../../ref/django-admin#django-admin-startapp&quot;&gt; &lt;code&gt;manage.py startapp&lt;/code&gt; &lt;/a&gt;脚本为应用程序创建的包结构）中，则&lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt;应该部分读取：</target>
        </trans-unit>
        <trans-unit id="a575ad3908796268e9301813f7ae313228b6b010" translate="yes" xml:space="preserve">
          <source>For example, if we have:</source>
          <target state="translated">例如,如果我们有:</target>
        </trans-unit>
        <trans-unit id="37ed5ab15784ebdc941be2c5c6bcc94f7a13da2b" translate="yes" xml:space="preserve">
          <source>For example, if we reverse the order of the &lt;code&gt;values()&lt;/code&gt; and &lt;code&gt;annotate()&lt;/code&gt; clause from our previous example:</source>
          <target state="translated">例如，如果我们反转上一个示例中的 &lt;code&gt;values()&lt;/code&gt; 和 &lt;code&gt;annotate()&lt;/code&gt; 子句的顺序：</target>
        </trans-unit>
        <trans-unit id="aaa31c7d83e5e9be08f7ea4cf3e1d382a5057f9c" translate="yes" xml:space="preserve">
          <source>For example, if we wanted to add a tool to the change list view for all the models in an app named &lt;code&gt;my_app&lt;/code&gt;, we would copy &lt;code&gt;contrib/admin/templates/admin/change_list.html&lt;/code&gt; to the &lt;code&gt;templates/admin/my_app/&lt;/code&gt; directory of our project, and make any necessary changes.</source>
          <target state="translated">例如，如果我们想在名为 &lt;code&gt;my_app&lt;/code&gt; 的应用程序中为所有模型的更改列表视图添加工具，则可以将 &lt;code&gt;contrib/admin/templates/admin/change_list.html&lt;/code&gt; 复制到我们的 &lt;code&gt;templates/admin/my_app/&lt;/code&gt; 目录中项目，并进行必要的更改。</target>
        </trans-unit>
        <trans-unit id="5206cd2a79a8ce28494c927b4f754f4f6ab560c0" translate="yes" xml:space="preserve">
          <source>For example, if you had &lt;code&gt;organic.py&lt;/code&gt; and &lt;code&gt;synthetic.py&lt;/code&gt; in the &lt;code&gt;models&lt;/code&gt; directory:</source>
          <target state="translated">例如，如果您在 &lt;code&gt;models&lt;/code&gt; 目录中包含了 &lt;code&gt;organic.py&lt;/code&gt; 和 &lt;code&gt;synthetic.py&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ec78701bb6d07ca8380a8fb2def8939d712743f8" translate="yes" xml:space="preserve">
          <source>For example, if you have a Blog object &lt;code&gt;b&lt;/code&gt; with &lt;code&gt;id=5&lt;/code&gt;, the following three queries would be identical:</source>
          <target state="translated">例如，如果你有博客对象 &lt;code&gt;b&lt;/code&gt; 与 &lt;code&gt;id=5&lt;/code&gt; ，以下三个查询将是相同的：</target>
        </trans-unit>
        <trans-unit id="7c53aafc3c0c25befc980a17c0988fd3884989b3" translate="yes" xml:space="preserve">
          <source>For example, if you have a blog entry with an author, the following definition would enable searching blog entries by the email address of the author:</source>
          <target state="translated">例如,如果你有一个带有作者的博客条目,下面的定义就可以通过作者的电子邮件地址搜索博客条目。</target>
        </trans-unit>
        <trans-unit id="95a33ccea96a9b29633c8c3693475d86bc4201f8" translate="yes" xml:space="preserve">
          <source>For example, if you have a field &lt;code&gt;title&lt;/code&gt; that has &lt;code&gt;unique_for_date=&quot;pub_date&quot;&lt;/code&gt;, then Django wouldn&amp;rsquo;t allow the entry of two records with the same &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;pub_date&lt;/code&gt;.</source>
          <target state="translated">例如，如果您的字段 &lt;code&gt;title&lt;/code&gt; 具有 &lt;code&gt;unique_for_date=&quot;pub_date&quot;&lt;/code&gt; ，则Django将不允许输入两个具有相同 &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;pub_date&lt;/code&gt; 的记录。</target>
        </trans-unit>
        <trans-unit id="a451065bc00e41b11f720e0f717367308b091faf" translate="yes" xml:space="preserve">
          <source>For example, if you have a function called &lt;code&gt;get_notification_email()&lt;/code&gt; that returns a list of &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages:</source>
          <target state="translated">例如，如果您有一个名为 &lt;code&gt;get_notification_email()&lt;/code&gt; 的函数，该函数返回代表您希望发送的某些定期电子邮件的&lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;对象列表，则可以通过一次调用send_messages来发送这些电子邮件：</target>
        </trans-unit>
        <trans-unit id="17eafc2b5422a055d91b931d67499186a4200fbf" translate="yes" xml:space="preserve">
          <source>For example, if you have an app &lt;code&gt;bookstore&lt;/code&gt; (as created by &lt;code&gt;manage.py startapp bookstore&lt;/code&gt;), a model defined as &lt;code&gt;class Book&lt;/code&gt; will have a database table named &lt;code&gt;bookstore_book&lt;/code&gt;.</source>
          <target state="translated">例如，如果您有一个应用程序 &lt;code&gt;bookstore&lt;/code&gt; （由 &lt;code&gt;manage.py startapp bookstore&lt;/code&gt; 创建），则定义为 &lt;code&gt;class Book&lt;/code&gt; 的模型将具有一个名为 &lt;code&gt;bookstore_book&lt;/code&gt; 的数据库表。</target>
        </trans-unit>
        <trans-unit id="63fbca3270dc92aa2768b890a6cb1d33f7c76b6d" translate="yes" xml:space="preserve">
          <source>For example, if you only want users whose names begin with &amp;lsquo;J&amp;rsquo; to be able to delete objects in bulk:</source>
          <target state="translated">例如，如果仅希望名称以&amp;ldquo; J&amp;rdquo;开头的用户能够批量删除对象：</target>
        </trans-unit>
        <trans-unit id="dffc16ac6f5a1235e2ff5c1c9590e976974355a8" translate="yes" xml:space="preserve">
          <source>For example, if you operate a Web email system, then the contents of the &amp;ldquo;inbox&amp;rdquo; page depend on which user is logged in. If an ISP blindly cached your site, then the first user who logged in through that ISP would have their user-specific inbox page cached for subsequent visitors to the site. That&amp;rsquo;s not cool.</source>
          <target state="translated">例如，如果您运行Web电子邮件系统，则&amp;ldquo;收件箱&amp;rdquo;页面的内容取决于登录的用户。如果ISP盲目地缓存了您的站点，则第一个通过该ISP登录的用户将拥有他们的用户。特定的收件箱页面已缓存，以供该站点的后续访问者使用。那不酷。</target>
        </trans-unit>
        <trans-unit id="0318688c9cbfbc9a1af11ad338883da37e732245" translate="yes" xml:space="preserve">
          <source>For example, if you want the &lt;code&gt;CharField&lt;/code&gt; for the &lt;code&gt;name&lt;/code&gt; attribute of &lt;code&gt;Author&lt;/code&gt; to be represented by a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; instead of its default &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, you can override the field&amp;rsquo;s widget:</source>
          <target state="translated">例如，如果希望 &lt;code&gt;Author&lt;/code&gt; 的 &lt;code&gt;name&lt;/code&gt; 属性的 &lt;code&gt;CharField&lt;/code&gt; 用 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 而不是默认的 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; ，则可以覆盖该字段的小部件：</target>
        </trans-unit>
        <trans-unit id="d3c8260ce0cd8a75ee9020cf48382605726d0d9d" translate="yes" xml:space="preserve">
          <source>For example, if you want to allow generic relations to models with either &lt;a href=&quot;../models/fields#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; primary key fields, you can use &lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; for the &amp;ldquo;object_id&amp;rdquo; field on your model since integers can be coerced to strings by &lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt;&lt;code&gt;get_db_prep_value()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">例如，如果要允许具有&lt;a href=&quot;../models/fields#django.db.models.IntegerField&quot;&gt; &lt;code&gt;IntegerField&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;主键字段的模型具有通用关系，则可以将&lt;a href=&quot;../models/fields#django.db.models.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt;用作模型上的&amp;ldquo; object_id&amp;rdquo;字段，因为可以通过&lt;a href=&quot;../models/fields#django.db.models.Field.get_db_prep_value&quot;&gt; &lt;code&gt;get_db_prep_value()&lt;/code&gt; &lt;/a&gt;将整数强制转换为字符串。</target>
        </trans-unit>
        <trans-unit id="c0412d92da41464198926ae62a16c47b911add00" translate="yes" xml:space="preserve">
          <source>For example, if you want to catch the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; HTML elements created by the &lt;a href=&quot;#std:templatefilter-linebreaks&quot;&gt;&lt;code&gt;linebreaks&lt;/code&gt;&lt;/a&gt; filter:</source>
          <target state="translated">例如，如果要捕获由&lt;a href=&quot;#std:templatefilter-linebreaks&quot;&gt; &lt;code&gt;linebreaks&lt;/code&gt; &lt;/a&gt;过滤器创建的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; HTML元素：</target>
        </trans-unit>
        <trans-unit id="287184b56a2079bc77936a467ffcb12bb2b8886c" translate="yes" xml:space="preserve">
          <source>For example, if you want to override &lt;code&gt;clean()&lt;/code&gt;:</source>
          <target state="translated">例如，如果要覆盖 &lt;code&gt;clean()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3efb9b9ef08765dd8e6f0b121687a407972caf70" translate="yes" xml:space="preserve">
          <source>For example, if you want to return a custom &lt;code&gt;QuerySet&lt;/code&gt; class from the &lt;code&gt;get_queryset&lt;/code&gt; method, you could do this:</source>
          <target state="translated">例如，如果要从 &lt;code&gt;get_queryset&lt;/code&gt; 方法返回自定义 &lt;code&gt;QuerySet&lt;/code&gt; 类，则可以执行以下操作：</target>
        </trans-unit>
        <trans-unit id="063ebc3924841e6968434234faec07eb5ca9e33b" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field:</source>
          <target state="translated">例如,如果你想计算每本书的平均作者数,你首先用作者数来注释这套书,然后汇总这个作者数,参考注释字段。</target>
        </trans-unit>
        <trans-unit id="bfc09bcbb025c7c07130736bf333d3d02ac80e5f" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to use &lt;code&gt;MySlugFormField&lt;/code&gt; for the &lt;code&gt;slug&lt;/code&gt; field, you could do the following:</source>
          <target state="translated">例如，如果你想使用 &lt;code&gt;MySlugFormField&lt;/code&gt; 的 &lt;code&gt;slug&lt;/code&gt; 场，你可以做到以下几点：</target>
        </trans-unit>
        <trans-unit id="c7aa460ec5e420ac634048bfa3fc527ceb63585d" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to validate that the contents of a &lt;code&gt;CharField&lt;/code&gt; called &lt;code&gt;serialnumber&lt;/code&gt; was unique, &lt;code&gt;clean_serialnumber()&lt;/code&gt; would be the right place to do this. You don&amp;rsquo;t need a specific field (it&amp;rsquo;s a &lt;code&gt;CharField&lt;/code&gt;), but you want a formfield-specific piece of validation and, possibly, cleaning/normalizing the data.</source>
          <target state="translated">例如，如果您想验证一个内容 &lt;code&gt;CharField&lt;/code&gt; 称为 &lt;code&gt;serialnumber&lt;/code&gt; 是独一无二的， &lt;code&gt;clean_serialnumber()&lt;/code&gt; 是做这个正确的地方。您不需要特定的字段（它是 &lt;code&gt;CharField&lt;/code&gt; ），但是您需要特定于表单字段的验证，并且可能需要清理/规范化数据。</target>
        </trans-unit>
        <trans-unit id="812e0ac86e0af9354376f7614bdda8d6eaf87eef" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to write a custom filter called &lt;code&gt;urlize_and_linebreaks&lt;/code&gt; that combined the &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-urlize&quot;&gt;&lt;code&gt;urlize&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-linebreaksbr&quot;&gt;&lt;code&gt;linebreaksbr&lt;/code&gt;&lt;/a&gt; filters, the filter would look like:</source>
          <target state="translated">例如，如果您要编写一个名为 &lt;code&gt;urlize_and_linebreaks&lt;/code&gt; 的自定义过滤器，该过滤器将&lt;a href=&quot;../ref/templates/builtins#std:templatefilter-urlize&quot;&gt; &lt;code&gt;urlize&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;../ref/templates/builtins#std:templatefilter-linebreaksbr&quot;&gt; &lt;code&gt;linebreaksbr&lt;/code&gt; &lt;/a&gt;过滤器组合在一起，则该过滤器将如下所示：</target>
        </trans-unit>
        <trans-unit id="62aa2739230ebf126047b21a8ee5eb70e0f6ad83" translate="yes" xml:space="preserve">
          <source>For example, if you were building a database of &amp;ldquo;places&amp;rdquo;, you would build pretty standard stuff such as address, phone number, etc. in the database. Then, if you wanted to build a database of restaurants on top of the places, instead of repeating yourself and replicating those fields in the &lt;code&gt;Restaurant&lt;/code&gt; model, you could make &lt;code&gt;Restaurant&lt;/code&gt; have a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;Place&lt;/code&gt; (because a restaurant &amp;ldquo;is a&amp;rdquo; place; in fact, to handle this you&amp;rsquo;d typically use &lt;a href=&quot;#model-inheritance&quot;&gt;inheritance&lt;/a&gt;, which involves an implicit one-to-one relation).</source>
          <target state="translated">例如，如果您要建立&amp;ldquo;地点&amp;rdquo;数据库，则可以在数据库中建立相当标准的内容，例如地址，电话号码等。然后，如果您想在地点的顶部建立一个餐厅数据库，而不是重复自己并在 &lt;code&gt;Restaurant&lt;/code&gt; 模型中复制这些字段，则可以使 &lt;code&gt;Restaurant&lt;/code&gt; 拥有一个&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;来 &lt;code&gt;Place&lt;/code&gt; （因为餐厅&amp;ldquo;是&amp;rdquo;地点；在实际上，要处理此问题，通常需要使用&lt;a href=&quot;#model-inheritance&quot;&gt;继承&lt;/a&gt;，该继承涉及隐式一对一关系。</target>
        </trans-unit>
        <trans-unit id="ac564798e14976b158868774b55c30a2ce8047f9" translate="yes" xml:space="preserve">
          <source>For example, if you were manipulating a list of blogs, you may want to determine how many entries have been made in each blog:</source>
          <target state="translated">例如,如果你在操作一个博客列表,你可能想确定每个博客有多少条目。</target>
        </trans-unit>
        <trans-unit id="48b33e9a548fb4951086a93d4cccbb51cee21337" translate="yes" xml:space="preserve">
          <source>For example, if you&amp;rsquo;re migrating a user from the &lt;code&gt;legacy_users&lt;/code&gt; database to the &lt;code&gt;new_users&lt;/code&gt; database, you might use these commands:</source>
          <target state="translated">例如，如果要将用户从 &lt;code&gt;legacy_users&lt;/code&gt; 数据库迁移到 &lt;code&gt;new_users&lt;/code&gt; 数据库，则可以使用以下命令：</target>
        </trans-unit>
        <trans-unit id="25f618583a6cd0fc97af3000d8f1c63e4d2ec20e" translate="yes" xml:space="preserve">
          <source>For example, if you&amp;rsquo;ve written an S3 storage backend in &lt;code&gt;myproject.storage.S3Storage&lt;/code&gt; you could use it with:</source>
          <target state="translated">例如，如果您已在 &lt;code&gt;myproject.storage.S3Storage&lt;/code&gt; 中编写了S3存储后端，则可以将其与以下项一起使用：</target>
        </trans-unit>
        <trans-unit id="c7dec5e7f20c3fb00b261664622da3f6bfce814b" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; is defined as &lt;code&gt;/media/&lt;/code&gt;, you can do this by adding the following snippet to your urls.py:</source>
          <target state="translated">例如，如果您的&lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt;定义为 &lt;code&gt;/media/&lt;/code&gt; ，则可以通过将以下代码段添加到urls.py中来实现：</target>
        </trans-unit>
        <trans-unit id="573973612596761249845c2b92e7229999296031" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; is defined as &lt;code&gt;/static/&lt;/code&gt;, you can do this by adding the following snippet to your urls.py:</source>
          <target state="translated">例如，如果您的&lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt;定义为 &lt;code&gt;/static/&lt;/code&gt; ，则可以通过将以下代码段添加到urls.py中来做到这一点：</target>
        </trans-unit>
        <trans-unit id="382da25e234ff543ced0d60c81998fd1b64dec8a" translate="yes" xml:space="preserve">
          <source>For example, if your &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; setting has a &amp;lsquo;master&amp;rsquo; database defined, name the fixture &lt;code&gt;mydata.master.json&lt;/code&gt; or &lt;code&gt;mydata.master.json.gz&lt;/code&gt; and the fixture will only be loaded when you specify you want to load data into the &lt;code&gt;master&lt;/code&gt; database.</source>
          <target state="translated">例如，如果您的&lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt;设置定义了&amp;ldquo; master&amp;rdquo;数据库，则将夹具命名为 &lt;code&gt;mydata.master.json&lt;/code&gt; 或 &lt;code&gt;mydata.master.json.gz&lt;/code&gt; ,并且仅当您指定要将数据加载到 &lt;code&gt;master&lt;/code&gt; 数据库中时才加载夹具。</target>
        </trans-unit>
        <trans-unit id="b38b053424f30ca9abf3de537773f7fbaf83bc53" translate="yes" xml:space="preserve">
          <source>For example, if your Django app contained a translation string for the text &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt;, like so:</source>
          <target state="translated">例如，如果您的Django应用程序包含文本 &lt;code&gt;&quot;Welcome to my site.&quot;&lt;/code&gt; 的翻译字符串。，就像这样：</target>
        </trans-unit>
        <trans-unit id="ba64113bb54dcbe956d54f2cdb1242079b313974" translate="yes" xml:space="preserve">
          <source>For example, if your custom tags/filters are in a file called &lt;code&gt;poll_extras.py&lt;/code&gt;, your app layout might look like this:</source>
          <target state="translated">例如，如果您的自定义标签/过滤器位于名为 &lt;code&gt;poll_extras.py&lt;/code&gt; 的文件中，则您的应用布局可能如下所示：</target>
        </trans-unit>
        <trans-unit id="3ce9954afa977e8d25528c0d4c5d3e44545946e0" translate="yes" xml:space="preserve">
          <source>For example, if your test requires a particular optional library in order to succeed, you could decorate the test case with &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt;&lt;code&gt;@skipIf&lt;/code&gt;&lt;/a&gt;. Then, the test runner will report that the test wasn&amp;rsquo;t executed and why, instead of failing the test or omitting the test altogether.</source>
          <target state="translated">例如，如果您的测试需要特定的可选库才能成功，则可以使用&lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.skipIf&quot;&gt; &lt;code&gt;@skipIf&lt;/code&gt; &lt;/a&gt;装饰测试用例。然后，测试运行人员将报告未执行测试及其原因，而不是使测试失败或完全省略测试。</target>
        </trans-unit>
        <trans-unit id="d89c6f1f9c3485c512a5c12dbc88ece425a8d0a9" translate="yes" xml:space="preserve">
          <source>For example, in a request to &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt;, the URLconf will look for &lt;code&gt;myapp/&lt;/code&gt;.</source>
          <target state="translated">例如，在对 &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt; 的请求中，URLconf将寻找 &lt;code&gt;myapp/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5c01bd511b40c972c539e07cb7adec6680d41f2c" translate="yes" xml:space="preserve">
          <source>For example, in our &lt;code&gt;HandField&lt;/code&gt; class we&amp;rsquo;re always forcibly setting max_length in &lt;code&gt;__init__()&lt;/code&gt;. The &lt;code&gt;deconstruct()&lt;/code&gt; method on the base &lt;code&gt;Field&lt;/code&gt; class will see this and try to return it in the keyword arguments; thus, we can drop it from the keyword arguments for readability:</source>
          <target state="translated">例如，在我们的 &lt;code&gt;HandField&lt;/code&gt; 类中，我们总是在 &lt;code&gt;__init__()&lt;/code&gt; 强制设置max_length 。在 &lt;code&gt;deconstruct()&lt;/code&gt; 的基础上法 &lt;code&gt;Field&lt;/code&gt; 类将看到这一点，并试图在关键字参数返回它; 因此，我们可以从关键字参数中删除它以提高可读性：</target>
        </trans-unit>
        <trans-unit id="3982a7f971cb56decef776cf27f6c9f258416465" translate="yes" xml:space="preserve">
          <source>For example, in the default case, you might see:</source>
          <target state="translated">例如,在默认情况下,你可能会看到。</target>
        </trans-unit>
        <trans-unit id="be8dcf1e5a2d50703a2c513aadf6082398124606" translate="yes" xml:space="preserve">
          <source>For example, in the filter &lt;code&gt;{{ var|foo:&quot;bar&quot; }}&lt;/code&gt;, the filter &lt;code&gt;foo&lt;/code&gt; would be passed the variable &lt;code&gt;var&lt;/code&gt; and the argument &lt;code&gt;&quot;bar&quot;&lt;/code&gt;.</source>
          <target state="translated">例如，在过滤器 &lt;code&gt;{{ var|foo:&quot;bar&quot; }}&lt;/code&gt; ，将为过滤器 &lt;code&gt;foo&lt;/code&gt; 传递变量 &lt;code&gt;var&lt;/code&gt; 和参数 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bfaf4d814db0b662c240dee53377b51532d7b2c" translate="yes" xml:space="preserve">
          <source>For example, in the generic class-based views there is a mixin called &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt; whose primary purpose is to define the method &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt;. When combined with the behavior of the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; base class, the result is a &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt; class that will dispatch requests to the appropriate matching methods (a behavior defined in the &lt;code&gt;View&lt;/code&gt; base class), and that has a &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; method that uses a &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; attribute to return a &lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; object (a behavior defined in the &lt;code&gt;TemplateResponseMixin&lt;/code&gt;).</source>
          <target state="translated">例如，在基于类的通用视图中，有一个名为&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt; &lt;code&gt;TemplateResponseMixin&lt;/code&gt; &lt;/a&gt;的混合，其主要目的是定义方法&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt;。与&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;基类的行为组合时，结果是&lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.TemplateView&quot;&gt; &lt;code&gt;TemplateView&lt;/code&gt; &lt;/a&gt;类，该类会将请求分派到适当的匹配方法（ &lt;code&gt;View&lt;/code&gt; 基类中定义的行为），并且具有使用&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt; &lt;code&gt;template_name&lt;/code&gt; &lt;/a&gt;属性的&lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt; &lt;code&gt;render_to_response()&lt;/code&gt; &lt;/a&gt;方法。返回一个&lt;a href=&quot;../../ref/template-response#django.template.response.TemplateResponse&quot;&gt; &lt;code&gt;TemplateResponse&lt;/code&gt; &lt;/a&gt;对象（在限定的行为 &lt;code&gt;TemplateResponseMixin&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bee7838323c7513cb8f79ec775b4a84e3faed67e" translate="yes" xml:space="preserve">
          <source>For example, it could be used for a tagging system like so:</source>
          <target state="translated">例如,它可以用于这样的标签系统。</target>
        </trans-unit>
        <trans-unit id="6f017e4860d5bdcebab0f0fb119e76168400ff70" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s add a natural key to the &lt;code&gt;Book&lt;/code&gt; model from the example above:</source>
          <target state="translated">例如，让我们从上面的示例向 &lt;code&gt;Book&lt;/code&gt; 模型添加一个自然键：</target>
        </trans-unit>
        <trans-unit id="981e0acc47eeefb4090a6114b26b34b9a8900b87" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s consider the following model:</source>
          <target state="translated">例如，让我们考虑以下模型：</target>
        </trans-unit>
        <trans-unit id="3f7ab8aab4e41f4721a9deee7d51f3b5b448fb6c" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say we have a &lt;code&gt;SouthTexasCity&lt;/code&gt; model (from the &lt;a href=&quot;https://github.com/django/django/blob/master/tests/gis_tests/distapp/models.py&quot;&gt;GeoDjango distance tests&lt;/a&gt; ) on a &lt;em&gt;projected&lt;/em&gt; coordinate system valid for cities in southern Texas:</source>
          <target state="translated">例如，假设我们有一个对德克萨斯州南部城市有效的&lt;em&gt;投影&lt;/em&gt;坐标系上的 &lt;code&gt;SouthTexasCity&lt;/code&gt; 模型（来自&lt;a href=&quot;https://github.com/django/django/blob/master/tests/gis_tests/distapp/models.py&quot;&gt;GeoDjango距离测试&lt;/a&gt;）：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6632db7f2d16495f99973c14b8ca361212c07908" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s write a filter that emphasizes the first character of a string:</source>
          <target state="translated">例如，让我们编写一个强调字符串第一个字符的过滤器：</target>
        </trans-unit>
        <trans-unit id="fd27f1d7a84788999d8f9705306d16767267018a" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s write a full implementation of our template tag, &lt;code&gt;{% current_time %}&lt;/code&gt;, that displays the current date/time, formatted according to a parameter given in the tag, in &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; syntax. It&amp;rsquo;s a good idea to decide the tag syntax before anything else. In our case, let&amp;rsquo;s say the tag should be used like this:</source>
          <target state="translated">例如，让我们写一个模板标签 &lt;code&gt;{% current_time %}&lt;/code&gt; 的完整实现，它以&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt;语法显示根据标签中给定的参数格式化的当前日期/时间。最好先决定标签语法。在我们的例子中，假设标签应像这样使用：</target>
        </trans-unit>
        <trans-unit id="faa7baeec61827390806b1f3bb4cccabe076d811" translate="yes" xml:space="preserve">
          <source>For example, notice the behavior when querying across a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">例如，在&lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; 上&lt;/a&gt;查询时，请注意行为：</target>
        </trans-unit>
        <trans-unit id="ac6f5569362b9037e98acf2f0c9ebe5969f083c9" translate="yes" xml:space="preserve">
          <source>For example, on Debian-based distributions that package SpatiaLite 4.2+, try to install the &lt;code&gt;libsqlite3-mod-spatialite&lt;/code&gt; package. For older releases install &lt;code&gt;spatialite-bin&lt;/code&gt;.</source>
          <target state="translated">例如，在打包SpatiaLite 4.2+的基于Debian的发行版上，尝试安装 &lt;code&gt;libsqlite3-mod-spatialite&lt;/code&gt; 软件包。对于较旧的版本，请安装 &lt;code&gt;spatialite-bin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cfd8c872d8f2916e92e073391899fa52d0e6b5c4" translate="yes" xml:space="preserve">
          <source>For example, repeatedly getting a certain index in a queryset object will query the database each time:</source>
          <target state="translated">例如,重复获取查询集对象中的某个索引,每次都会查询数据库。</target>
        </trans-unit>
        <trans-unit id="e8ada1817d3c3e6aea32546f2fc1f0f5b452cf40" translate="yes" xml:space="preserve">
          <source>For example, say you have a custom manager method that touches the database &amp;ndash; &lt;code&gt;User.objects.create_user()&lt;/code&gt;. Because &lt;code&gt;create_user()&lt;/code&gt; is a manager method, not a &lt;code&gt;QuerySet&lt;/code&gt; method, you can&amp;rsquo;t do &lt;code&gt;User.objects.using('new_users').create_user()&lt;/code&gt;. (The &lt;code&gt;create_user()&lt;/code&gt; method is only available on &lt;code&gt;User.objects&lt;/code&gt;, the manager, not on &lt;code&gt;QuerySet&lt;/code&gt; objects derived from the manager.) The solution is to use &lt;code&gt;db_manager()&lt;/code&gt;, like this:</source>
          <target state="translated">例如，假设您有一个接触数据库的自定义管理器方法&amp;ndash; &lt;code&gt;User.objects.create_user()&lt;/code&gt; 。由于 &lt;code&gt;create_user()&lt;/code&gt; 是管理器方法，而不是 &lt;code&gt;QuerySet&lt;/code&gt; 方法，因此无法执行 &lt;code&gt;User.objects.using('new_users').create_user()&lt;/code&gt; 。（ &lt;code&gt;create_user()&lt;/code&gt; 方法仅在管理器 &lt;code&gt;User.objects&lt;/code&gt; 上可用，而不适用于从管理器派生的 &lt;code&gt;QuerySet&lt;/code&gt; 对象。）解决方案是使用 &lt;code&gt;db_manager()&lt;/code&gt; ，如下所示：</target>
        </trans-unit>
        <trans-unit id="b12427337defaf610be79af10716c83a674c8723" translate="yes" xml:space="preserve">
          <source>For example, say you&amp;rsquo;re writing an inclusion tag that will always be used in a context that contains &lt;code&gt;home_link&lt;/code&gt; and &lt;code&gt;home_title&lt;/code&gt; variables that point back to the main page. Here&amp;rsquo;s what the Python function would look like:</source>
          <target state="translated">例如，假设您正在编写一个包含标记，该标记将始终在包含 &lt;code&gt;home_link&lt;/code&gt; 和 &lt;code&gt;home_title&lt;/code&gt; 变量的上下文中使用。这是Python函数的样子：</target>
        </trans-unit>
        <trans-unit id="837db34e268679acb26d08abc40f8ec66566edea" translate="yes" xml:space="preserve">
          <source>For example, say your &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'/home/media'&lt;/code&gt;, and &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;'photos/%Y/%m/%d'&lt;/code&gt;. The &lt;code&gt;'%Y/%m/%d'&lt;/code&gt; part of &lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; formatting; &lt;code&gt;'%Y'&lt;/code&gt; is the four-digit year, &lt;code&gt;'%m'&lt;/code&gt; is the two-digit month and &lt;code&gt;'%d'&lt;/code&gt; is the two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in the directory &lt;code&gt;/home/media/photos/2007/01/15&lt;/code&gt;.</source>
          <target state="translated">例如，假设您的&lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt; &lt;code&gt;MEDIA_ROOT&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;'/home/media'&lt;/code&gt; ，而&lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt;设置为 &lt;code&gt;'photos/%Y/%m/%d'&lt;/code&gt; 。&lt;a href=&quot;#django.db.models.FileField.upload_to&quot;&gt; &lt;code&gt;upload_to&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;'%Y/%m/%d'&lt;/code&gt; 部分为&lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt;格式； &lt;code&gt;'%Y'&lt;/code&gt; 是四位数的年份， &lt;code&gt;'%m'&lt;/code&gt; 是两位数的月份， &lt;code&gt;'%d'&lt;/code&gt; 是两位数的日期。如果您在2007年1月15日上传文件，该文件将保存在目录 &lt;code&gt;/home/media/photos/2007/01/15&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="efd483a59754f0aaac0b780515e3d32175b4ce1a" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a filter that adds the string &lt;code&gt;xx&lt;/code&gt; to the end of any input. Since this introduces no dangerous HTML characters to the result (aside from any that were already present), you should mark your filter with &lt;code&gt;is_safe&lt;/code&gt;:</source>
          <target state="translated">例如，假设您有一个过滤器，将字符串 &lt;code&gt;xx&lt;/code&gt; 添加到任何输入的末尾。由于这不会在结果中引入任何危险的HTML字符（除了已存在的HTML字符之外），因此应使用 &lt;code&gt;is_safe&lt;/code&gt; 标记过滤器：</target>
        </trans-unit>
        <trans-unit id="f0b46b2ac3f51513f40f2ba0e075ad6daaca6f59" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a view, &lt;code&gt;app_views.client&lt;/code&gt;, whose URLconf takes a client ID (here, &lt;code&gt;client()&lt;/code&gt; is a method inside the views file &lt;code&gt;app_views.py&lt;/code&gt;). The URLconf line might look like this:</source>
          <target state="translated">例如，假设您有一个视图 &lt;code&gt;app_views.client&lt;/code&gt; ，其URLconf带有一个客户端ID（此处， &lt;code&gt;client()&lt;/code&gt; 是视图文件 &lt;code&gt;app_views.py&lt;/code&gt; 中的一种方法）。URLconf行可能如下所示：</target>
        </trans-unit>
        <trans-unit id="75689940cb99e5a3c78be96bc95b910bb9da78b2" translate="yes" xml:space="preserve">
          <source>For example, suppose you have these models:</source>
          <target state="translated">例如,假设你有这些模型。</target>
        </trans-unit>
        <trans-unit id="adb68cda65641acffb5513c00ebc8792adf26e87" translate="yes" xml:space="preserve">
          <source>For example, suppose you want to add a method to the &lt;code&gt;Person&lt;/code&gt; model. You can do it like this:</source>
          <target state="translated">例如，假设您要向 &lt;code&gt;Person&lt;/code&gt; 模型添加一个方法。您可以这样做：</target>
        </trans-unit>
        <trans-unit id="66b36bd8f3d737b326cd36b2698766934c40eb1b" translate="yes" xml:space="preserve">
          <source>For example, take the following form:</source>
          <target state="translated">例如,采取以下形式:</target>
        </trans-unit>
        <trans-unit id="4deafec385d3e444a3bb56c6350f690c558fa83f" translate="yes" xml:space="preserve">
          <source>For example, taking advantage of GitHub&amp;rsquo;s feature to expose repositories as zip files, you can use a URL like:</source>
          <target state="translated">例如，利用GitHub的功能将存储库公开为zip文件，您可以使用如下网址：</target>
        </trans-unit>
        <trans-unit id="2cee46bd342b10491add882e66c9a5b078ff05c4" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;../intro/tutorial02&quot;&gt;tutorial&lt;/a&gt; has this line:</source>
          <target state="translated">例如，本&lt;a href=&quot;../intro/tutorial02&quot;&gt;教程的&lt;/a&gt;这一行：</target>
        </trans-unit>
        <trans-unit id="5b4e2e42e3429923389b83d267729df072153c91" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt;&lt;code&gt;django.contrib.auth&lt;/code&gt;&lt;/a&gt; app only prompts to create a superuser when &lt;code&gt;interactive&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">例如，&lt;a href=&quot;../topics/auth/index#module-django.contrib.auth&quot;&gt; &lt;code&gt;django.contrib.auth&lt;/code&gt; &lt;/a&gt;应用仅在 &lt;code&gt;interactive&lt;/code&gt; 为 &lt;code&gt;True&lt;/code&gt; 时提示创建超级用户。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
