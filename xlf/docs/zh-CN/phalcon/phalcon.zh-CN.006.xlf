<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="phalcon">
    <body>
      <group id="phalcon">
        <trans-unit id="22116d670ed08e270d8c37842a6399ff3e53407c" translate="yes" xml:space="preserve">
          <source>Stops the frontend without store any cached content</source>
          <target state="translated">停止前端,不存储任何缓存内容。</target>
        </trans-unit>
        <trans-unit id="0ef789a3f158e41e77fe32317205bb0b6e67f069" translate="yes" xml:space="preserve">
          <source>Stops the middleware execution avoiding than other middlewares be executed</source>
          <target state="translated">停止中间件的执行,避免其他中间件被执行。</target>
        </trans-unit>
        <trans-unit id="4ae73fac483864f9b9b7ec6510194d9e457a7f00" translate="yes" xml:space="preserve">
          <source>Stores a reusable record in the internal list</source>
          <target state="translated">在内部列表中存储一个可重复使用的记录。</target>
        </trans-unit>
        <trans-unit id="27870b8d63ad17dca5cc1b760005a78891cc72dd" translate="yes" xml:space="preserve">
          <source>Stores cached content into all backends and stops the frontend</source>
          <target state="translated">将缓存的内容存储到所有后端,并停止前台</target>
        </trans-unit>
        <trans-unit id="7c2679018205e0799a9d5ede5f56a375d1b688b8" translate="yes" xml:space="preserve">
          <source>Stores cached content into the APC backend and stops the frontend</source>
          <target state="translated">将缓存的内容存储到APC后台,并停止前台。</target>
        </trans-unit>
        <trans-unit id="cd1ca60db0703b091f4280ca022825d572807db9" translate="yes" xml:space="preserve">
          <source>Stores cached content into the backend and stops the frontend</source>
          <target state="translated">将缓存的内容存储到后台,并停止前台。</target>
        </trans-unit>
        <trans-unit id="2dea636e4b8a0cc14e7316c37ed52f868e286389" translate="yes" xml:space="preserve">
          <source>Stores cached content into the file backend and stops the frontend</source>
          <target state="translated">将缓存的内容存储到文件后端,并停止前台。</target>
        </trans-unit>
        <trans-unit id="b5f20d5c44b468c5eaca660235aa24ccddc46086" translate="yes" xml:space="preserve">
          <source>Stores content in memory. Data is lost when the request is finished</source>
          <target state="translated">将内容存储在内存中。请求完成后,数据会丢失</target>
        </trans-unit>
        <trans-unit id="15cc08f8409907be1e4f91e76dab7e8f32ec6a40" translate="yes" xml:space="preserve">
          <source>Stores data in Redis</source>
          <target state="translated">在Redis中存储数据</target>
        </trans-unit>
        <trans-unit id="5f2adab9f775b7f66a87e867cae87e172473aab1" translate="yes" xml:space="preserve">
          <source>Stores data in XCache</source>
          <target state="translated">在XCache中存储数据</target>
        </trans-unit>
        <trans-unit id="97ffc3896709bb1bc2087f8fedea0e3957e9aca9" translate="yes" xml:space="preserve">
          <source>Stores data to Mongo Database</source>
          <target state="translated">将数据存储到Mongo数据库</target>
        </trans-unit>
        <trans-unit id="54ef813fde7dceb993cb9fee2707a208ae31805e" translate="yes" xml:space="preserve">
          <source>Stores data to a memcached server</source>
          <target state="translated">将数据存储到memcached服务器</target>
        </trans-unit>
        <trans-unit id="821f939c44272a76a86c9e10dc5a903c82819a03" translate="yes" xml:space="preserve">
          <source>Stores data to local plain files</source>
          <target state="translated">将数据存储到本地普通文件中</target>
        </trans-unit>
        <trans-unit id="97e48226d7609cb1c927e3823f35c798295c5448" translate="yes" xml:space="preserve">
          <source>Stores data to the Alternative PHP Cache (APC)</source>
          <target state="translated">将数据存储到替代性PHP缓存(APC)。</target>
        </trans-unit>
        <trans-unit id="c0fb597f50f463f23298295e5edf4246cc871a9c" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in PHP files.</source>
          <target state="translated">在PHP文件中存储模型元数据。</target>
        </trans-unit>
        <trans-unit id="b3f5e27bca280d6c7b036a63f263a9dfed53ef03" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in memory. Data will be erased when the request finishes</source>
          <target state="translated">在内存中存储模型元数据。数据将在请求完成后被删除。</target>
        </trans-unit>
        <trans-unit id="410b8605ddf31d7c11b6a99fe3a2d6a344f65cb4" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in session. Data will erased when the session finishes. Meta-data are permanent while the session is active.</source>
          <target state="translated">在会话中存储模型元数据。会话结束时,数据将被删除。当会话处于活动状态时,元数据是永久的。</target>
        </trans-unit>
        <trans-unit id="628e0032ac83b7d413ecab8f0a6fc13e6ad0eda3" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the APC cache. Data will erased if the web server is restarted</source>
          <target state="translated">在APC缓存中存储模型元数据。如果重新启动Web服务器,数据将被删除。</target>
        </trans-unit>
        <trans-unit id="6c0caa2d754423d2eff7541716fe0df2a430a92a" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the Memcache.</source>
          <target state="translated">在Memcache中存储模型元数据。</target>
        </trans-unit>
        <trans-unit id="9fbf4f7616f82636fb774c96a045dff78841ac67" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the Redis.</source>
          <target state="translated">在Redis中存储模型元数据。</target>
        </trans-unit>
        <trans-unit id="9d76715afae8671a303ba04023bd4fb2045c02a8" translate="yes" xml:space="preserve">
          <source>Stores model meta-data in the XCache cache. Data will erased if the web server is restarted</source>
          <target state="translated">在XCache缓存中存储模型元数据。如果重新启动Web服务器,数据将被删除。</target>
        </trans-unit>
        <trans-unit id="b474f0b6044b0ccd35dea616380da348f209e9da" translate="yes" xml:space="preserve">
          <source>Stores the messages in session</source>
          <target state="translated">储存会话中的信息</target>
        </trans-unit>
        <trans-unit id="35fa959d8b4c871f3aaec786b254843fd2116021" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in APC. This adapter is suitable for production</source>
          <target state="translated">将解析后的注释存储在APC中。该适配器适用于生产</target>
        </trans-unit>
        <trans-unit id="6813e560de298fdee0841704994c7517923fc362" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in files. This adapter is suitable for production</source>
          <target state="translated">将解析后的注释存储在文件中。该适配器适用于生产</target>
        </trans-unit>
        <trans-unit id="8237773cfa25bf1ba3fb116d89d8410dbe0ede8c" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations in memory. This adapter is the suitable development/testing</source>
          <target state="translated">将解析后的注释存储在内存中。该适配器是适合开发/测试的</target>
        </trans-unit>
        <trans-unit id="3141ba9d9f670f757e95aa1f7deefdba345bb829" translate="yes" xml:space="preserve">
          <source>Stores the parsed annotations to XCache. This adapter is suitable for production</source>
          <target state="translated">将解析后的注释存储到XCache。该适配器适用于生产</target>
        </trans-unit>
        <trans-unit id="fcc8ee9ff0fd170ce113cd3549956d264ec06f54" translate="yes" xml:space="preserve">
          <source>Storing Related Records</source>
          <target state="translated">存储相关记录</target>
        </trans-unit>
        <trans-unit id="caa9d9430c4b2cca39a0288a4bb2d666fd0cf68d" translate="yes" xml:space="preserve">
          <source>Storing data in Session</source>
          <target state="translated">在会话中存储日期</target>
        </trans-unit>
        <trans-unit id="52778c4502611fe0399cd796754eaf9c6522f765" translate="yes" xml:space="preserve">
          <source>Storing data using models</source>
          <target state="translated">使用模型存储数据</target>
        </trans-unit>
        <trans-unit id="2c58fe26d4f9ff645b20ee6b6ea9ddf8a1298dc2" translate="yes" xml:space="preserve">
          <source>Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods &amp;ldquo;&lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;md5&lt;/a&gt;&amp;rdquo; and &amp;ldquo;&lt;a href=&quot;http://php.net/manual/en/function.sha1.php&quot;&gt;sha1&lt;/a&gt;&amp;rdquo;. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as &lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;rainbow tables&lt;/a&gt;.</source>
          <target state="translated">以纯文本格式存储密码是一种不良的安全做法。有权访问数据库的任何人都将立即有权访问所有用户帐户，从而能够从事未经授权的活动。为了解决这个问题，许多应用程序使用了熟悉的一种哈希方法&amp;ldquo; &lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;md5&lt;/a&gt; &amp;rdquo;和&amp;ldquo; &lt;a href=&quot;http://php.net/manual/en/function.sha1.php&quot;&gt;sha1&lt;/a&gt; &amp;rdquo;。但是，硬件每天都在发展，并且变得越来越快，这些算法变得容易受到暴力攻击。这些攻击也称为&lt;a href=&quot;http://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;彩虹表&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab4dcedb56a938b1e1a57014ee6255c14c1c6f63" translate="yes" xml:space="preserve">
          <source>Storing/Retrieving data in Session</source>
          <target state="translated">在会话中存储/检索数据</target>
        </trans-unit>
        <trans-unit id="7d0ca5bbbfa5e2a24acfc853c016c25aa964363b" translate="yes" xml:space="preserve">
          <source>Strategies based on namespaces/prefixes are faster than the directories strategy</source>
          <target state="translated">基于名字空间/前缀的策略比目录策略更快。</target>
        </trans-unit>
        <trans-unit id="5a3da383da3c790dfba613e05cc8cb31718a93f2" translate="yes" xml:space="preserve">
          <source>Stream Logger</source>
          <target state="translated">溪流记录仪</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="73380655baa7199522367c8dc81cddd93b39709d" translate="yes" xml:space="preserve">
          <source>String representation of the exception</source>
          <target state="translated">异常的字符串表示</target>
        </trans-unit>
        <trans-unit id="4988a588475323fe417945edd9fce105282066ec" translate="yes" xml:space="preserve">
          <source>Strings are automatically escaped using &lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot;&gt;PDO&lt;/a&gt;. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</source>
          <target state="translated">字符串使用&lt;a href=&quot;http://php.net/manual/en/pdo.prepared-statements.php&quot;&gt;PDO&lt;/a&gt;自动转义。此功能考虑了连接字符集，因此建议在连接参数或数据库配置中定义正确的字符集，因为错误的字符集会在存储或检索数据时产生不良影响。</target>
        </trans-unit>
        <trans-unit id="f31b334d852b22c74733a70e7260e6cc69dc7e46" translate="yes" xml:space="preserve">
          <source>Strings to be inserted into JavaScript code also must be properly escaped:</source>
          <target state="translated">要插入到JavaScript代码中的字符串也必须进行适当的转义。</target>
        </trans-unit>
        <trans-unit id="53d55b5ff420c0816955984dd87581fd1e61ee87" translate="yes" xml:space="preserve">
          <source>Strip tags and encode HTML entities, including single and double quotes.</source>
          <target state="translated">剥离标签并对HTML实体进行编码,包括单引号和双引号。</target>
        </trans-unit>
        <trans-unit id="9482c5d5bfbed584fddcc442794dd8d3d9813064" translate="yes" xml:space="preserve">
          <source>Structure</source>
          <target state="translated">Structure</target>
        </trans-unit>
        <trans-unit id="688931069f0df1b7dcf0babe5808ec7762322394" translate="yes" xml:space="preserve">
          <source>Stylesheets</source>
          <target state="translated">Stylesheets</target>
        </trans-unit>
        <trans-unit id="c26b71ada72dda0caa098081b6d86bfd9925fa6e" translate="yes" xml:space="preserve">
          <source>Subtraction assignment</source>
          <target state="translated">减法作业</target>
        </trans-unit>
        <trans-unit id="0a9c88c404e840eea584b78c2e43d52616275ada" translate="yes" xml:space="preserve">
          <source>Sum examples:</source>
          <target state="translated">总的例子。</target>
        </trans-unit>
        <trans-unit id="8e213dbbc62f3af9ac6d0d6b2a3e60481eb1e1aa" translate="yes" xml:space="preserve">
          <source>Supported parameter types include the following:</source>
          <target state="translated">支持的参数类型包括:</target>
        </trans-unit>
        <trans-unit id="aab99de5b0e2aa1fe84b089a9be44764807aecd6" translate="yes" xml:space="preserve">
          <source>Syslog Logger</source>
          <target state="translated">系统日志记录器</target>
        </trans-unit>
        <trans-unit id="621ec9aeec552c6404f2e8b2fcbf58feeb4b482e" translate="yes" xml:space="preserve">
          <source>TENSILE</source>
          <target state="translated">TENSILE</target>
        </trans-unit>
        <trans-unit id="92db13efcb630c92ecf1220fd763e9d0e237c97e" translate="yes" xml:space="preserve">
          <source>Table name</source>
          <target state="translated">表名</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目录</target>
        </trans-unit>
        <trans-unit id="982963c1c41cbed8cab073724749592fe35c532b" translate="yes" xml:space="preserve">
          <source>Tag</source>
          <target state="translated">Tag</target>
        </trans-unit>
        <trans-unit id="16dddf9b3f7ffb63ab6de9577fd8376b2c68584d" translate="yes" xml:space="preserve">
          <source>Tag Service</source>
          <target state="translated">标签服务</target>
        </trans-unit>
        <trans-unit id="05bd8a3e039c41ec95edf9ce86a05f8774ec9476" translate="yes" xml:space="preserve">
          <source>Tag::HTML5</source>
          <target state="translated">Tag::HTML5</target>
        </trans-unit>
        <trans-unit id="72368908a60e4e918e3f09acd19ec0d46f9bb494" translate="yes" xml:space="preserve">
          <source>Tag::form</source>
          <target state="translated">Tag::form</target>
        </trans-unit>
        <trans-unit id="1115dbd74d3d5e690eaf4587de1c857fe91944cb" translate="yes" xml:space="preserve">
          <source>Tag::getDI</source>
          <target state="translated">Tag::getDI</target>
        </trans-unit>
        <trans-unit id="7fe14034e30da467e00514aab9e5d1e5ecddea71" translate="yes" xml:space="preserve">
          <source>Tag::image</source>
          <target state="translated">Tag::image</target>
        </trans-unit>
        <trans-unit id="4e1c3a4df8f370f6ce1b0ee3f446c116d6171744" translate="yes" xml:space="preserve">
          <source>Tag::setDI</source>
          <target state="translated">Tag::setDI</target>
        </trans-unit>
        <trans-unit id="f86e8392aea55fea072ab303f4f0e657a02c3cb4" translate="yes" xml:space="preserve">
          <source>Take into consideration the following the next when renaming your columns:</source>
          <target state="translated">在重命名你的列时,要考虑到以下几点。</target>
        </trans-unit>
        <trans-unit id="18bfaed5b1ce26bdb87c7de7ff4f25a4b55707ea" translate="yes" xml:space="preserve">
          <source>Take the following into consideration when using models in namespaces:</source>
          <target state="translated">在命名空间中使用模型时要考虑到以下几点。</target>
        </trans-unit>
        <trans-unit id="29a99a5e779bd4cdcd72ffb92c34393fdfc58bff" translate="yes" xml:space="preserve">
          <source>Taking advantage of relationships</source>
          <target state="translated">利用关系</target>
        </trans-unit>
        <trans-unit id="d08d6b799a189132167569c9b9575a9c3d1d03fb" translate="yes" xml:space="preserve">
          <source>Taking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion:</source>
          <target state="translated">以数据为JSON字符串插入到请求的主体中,我们也使用PHQL进行插入。</target>
        </trans-unit>
        <trans-unit id="090ec5f560fc50377fcd95e5cda128e91b276e98" translate="yes" xml:space="preserve">
          <source>Tasks</source>
          <target state="translated">Tasks</target>
        </trans-unit>
        <trans-unit id="9b211cc3fb0ce80a7b8879374863349b704f60f6" translate="yes" xml:space="preserve">
          <source>Tasks work similar to controllers. Any CLI application needs at least a MainTask and a mainAction and every task needs to have a mainAction which will run if no action is given explicitly.</source>
          <target state="translated">任务的工作原理类似于控制器。任何CLI应用程序至少需要一个MainTask和一个mainAction,每个任务都需要有一个mainAction,如果没有明确给出动作,它就会运行。</target>
        </trans-unit>
        <trans-unit id="0f0e821c7af95b911b352f7ffcc3d6fdf25fbada" translate="yes" xml:space="preserve">
          <source>Tell Volt if the templates must be compiled in each request or only when they change</source>
          <target state="translated">告诉Volt是否必须在每次请求中编译模板,还是只在模板变化时才编译。</target>
        </trans-unit>
        <trans-unit id="51f8b618847e77f6c47abb3ec67bfc3fa3b1fb55" translate="yes" xml:space="preserve">
          <source>Tell if the resultset if fresh or an old one cached</source>
          <target state="translated">判断结果集是新鲜的还是缓存的旧结果集</target>
        </trans-unit>
        <trans-unit id="07c68a987a2a82194395446be4e070aa26e043fb" translate="yes" xml:space="preserve">
          <source>Tells the event manager if it needs to collect all the responses returned by every registered listener in a single fire</source>
          <target state="translated">告诉事件管理器是否需要收集每个注册的监听器在一次火灾中返回的所有响应。</target>
        </trans-unit>
        <trans-unit id="c53741f169658ed3efed0bde7907825a325adcc4" translate="yes" xml:space="preserve">
          <source>Tells to the query if only the first row in the resultset must be returned</source>
          <target state="translated">告诉查询是否只需要返回结果集中的第一条记录。</target>
        </trans-unit>
        <trans-unit id="9f0f081938b45532b9a06d2fe6ae91a6400ff65f" translate="yes" xml:space="preserve">
          <source>Template &amp;ldquo;layout.volt&amp;rdquo; extends &amp;ldquo;main.volt&amp;rdquo;</source>
          <target state="translated">模板&amp;ldquo; layout.volt&amp;rdquo;扩展为&amp;ldquo; main.volt&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="83835aacfc22a8fe5f638a1fe70168a059a2eaa0" translate="yes" xml:space="preserve">
          <source>Template Engines</source>
          <target state="translated">模板引擎</target>
        </trans-unit>
        <trans-unit id="b48e7d23038b00a8503586cf24fabd3575478638" translate="yes" xml:space="preserve">
          <source>Template Engines help designers to create views without the use of a complicated syntax. Phalcon includes a powerful and fast templating engine called &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">模板引擎可帮助设计人员创建视图而无需使用复杂的语法。Phalcon包括功能强大且快速的模板引擎，称为&lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d6b6bb3a1a939adefc8ad08e7880baf39f4c9d7b" translate="yes" xml:space="preserve">
          <source>Template Inheritance</source>
          <target state="translated">模板继承</target>
        </trans-unit>
        <trans-unit id="710f6e8edf259591cf13929be325362a8d98ae50" translate="yes" xml:space="preserve">
          <source>Templates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.</source>
          <target state="translated">模板是可以用来共享通用视图代码的视图。它们作为控制器布局,所以你需要把它们放在布局目录中。</target>
        </trans-unit>
        <trans-unit id="dd89ca4755469e05cfd31d69efe2d6ca435e3408" translate="yes" xml:space="preserve">
          <source>Templates can be rendered before the layout (using &lt;code&gt;$this-&amp;gt;view-&amp;gt;setTemplateBefore()&lt;/code&gt;) or they can be rendered after the layout (using &lt;code&gt;this-&amp;gt;view-&amp;gt;setTemplateAfter()&lt;/code&gt;). In the following example the template (layouts/common.phtml) is rendered after the main layout (layouts/posts.phtml):</source>
          <target state="translated">模板可以在布局之前渲染（使用 &lt;code&gt;$this-&amp;gt;view-&amp;gt;setTemplateBefore()&lt;/code&gt; ），也可以在布局之后渲染（使用 &lt;code&gt;this-&amp;gt;view-&amp;gt;setTemplateAfter()&lt;/code&gt; ）。在以下示例中，模板（layouts / common.phtml）在主布局（layouts / posts.phtml）之后呈现：</target>
        </trans-unit>
        <trans-unit id="2d395054e7c6d2382fe6d3eb0027da7d8754d6ac" translate="yes" xml:space="preserve">
          <source>Temporarily stores the messages in session, then messages can be printed in the next request</source>
          <target state="translated">暂时将信息存储在会话中,然后在下一个请求中打印信息。</target>
        </trans-unit>
        <trans-unit id="f751f7ff2664c07ccd41030bdac28000de5b50eb" translate="yes" xml:space="preserve">
          <source>Ternary operator. The same as the PHP ternary operator</source>
          <target state="translated">三元操作符。与PHP的三元运算符相同。</target>
        </trans-unit>
        <trans-unit id="640ab2bae07bedc4c163f679a746f7ab7fb5d1fa" translate="yes" xml:space="preserve">
          <source>Test</source>
          <target state="translated">Test</target>
        </trans-unit>
        <trans-unit id="187d7f0e42c8896aec49083528a238217cfdec49" translate="yes" xml:space="preserve">
          <source>Testing for LibreSSL</source>
          <target state="translated">测试 LibreSSL</target>
        </trans-unit>
        <trans-unit id="e267c714edaa7ae77c73ad90e2209e1c15637d60" translate="yes" xml:space="preserve">
          <source>Testing our Application</source>
          <target state="translated">测试我们的应用</target>
        </trans-unit>
        <trans-unit id="d25847938c5e0e592aa242dc61fe4085b0e63aeb" translate="yes" xml:space="preserve">
          <source>Testing your routes</source>
          <target state="translated">测试您的路线</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="fca3bec5e5be0110636120d1394f6f126524ecb0" translate="yes" xml:space="preserve">
          <source>Tests can be used to test if a variable has a valid expected value. The operator &amp;ldquo;is&amp;rdquo; is used to perform the tests:</source>
          <target state="translated">测试可用于测试变量是否具有有效的期望值。运算符&amp;ldquo; is&amp;rdquo;用于执行测试：</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="d7863878fdf9bfff5a31254f098f95b0ff954267" translate="yes" xml:space="preserve">
          <source>Text between double quotes or single quotes are handled as strings</source>
          <target state="translated">双引号或单引号之间的文本作为字符串处理</target>
        </trans-unit>
        <trans-unit id="a59b2b0709cc425881c7593938f321695ffaf092" translate="yes" xml:space="preserve">
          <source>Text::lower</source>
          <target state="translated">Text::lower</target>
        </trans-unit>
        <trans-unit id="c018d2906b3c08f2e733525a27d466d655a442e1" translate="yes" xml:space="preserve">
          <source>Text::upper</source>
          <target state="translated">Text::upper</target>
        </trans-unit>
        <trans-unit id="76bf04f1cd20d76a5d71687ac2e675f8ce2d4908" translate="yes" xml:space="preserve">
          <source>Thanks to &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;, the underlying component of &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt;, it&amp;rsquo;s possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. With this you can diagnose performance problems and to discover bottlenecks.</source>
          <target state="translated">多亏了&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;的基础组件&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;，可以分析由ORM生成的SQL语句，以便分析数据库操作的性能。使用此工具，您可以诊断性能问题并发现瓶颈。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2b98bed80b3f36a2aa542bc1fc2e9c1fae99a60" translate="yes" xml:space="preserve">
          <source>Thanks to the hooks points provided by &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt; you can easily adapt your application to any URL schema:</source>
          <target state="translated">借助&lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher&lt;/em&gt;&lt;/a&gt;提供的挂钩点，您可以轻松地使您的应用程序适应任何URL模式：</target>
        </trans-unit>
        <trans-unit id="ae1c98ebc213cfb61481f8af68db4b3630761d6e" translate="yes" xml:space="preserve">
          <source>That is the same as:</source>
          <target state="translated">这和。</target>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="cd0ed545c494fce6e80c9d9d9ec09829aaa6bf14" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;_id&amp;rdquo; property is automatically updated with the &lt;a href=&quot;http://www.php.net/manual/en/class.mongoid.php&quot;&gt;MongoId&lt;/a&gt; object created by the driver:</source>
          <target state="translated">&amp;ldquo; _id&amp;rdquo;属性会自动使用驱动程序创建的&lt;a href=&quot;http://www.php.net/manual/en/class.mongoid.php&quot;&gt;MongoId&lt;/a&gt;对象进行更新：</target>
        </trans-unit>
        <trans-unit id="01bceab06c21a4c6198886dc568d5e3ab46c3ece" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;create page&amp;rdquo; allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.</source>
          <target state="translated">&amp;ldquo;创建页面&amp;rdquo;使您可以创建对产品模型进行验证的产品。Phalcon将自动验证非null字段，如果需要警告，则会产生警告。</target>
        </trans-unit>
        <trans-unit id="9c148d8e93884d309cd23fc3895f5888152fa076" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;get&amp;rdquo; method indicates that the associated HTTP method is GET. The route &lt;code&gt;/say/hello/{name}&lt;/code&gt; also has a parameter &lt;code&gt;{$name}&lt;/code&gt; that is passed directly to the route handler (the anonymous function). Handlers are executed when a route is matched. A handler could be any callable item in the PHP userland. The following example shows how to define different types of handlers:</source>
          <target state="translated">&amp;ldquo; get&amp;rdquo;方法表示关联的HTTP方法是GET。路由 &lt;code&gt;/say/hello/{name}&lt;/code&gt; 还具有一个参数 &lt;code&gt;{$name}&lt;/code&gt; ，该参数直接传递给路由处理程序（匿名函数）。路由匹配时执行处理程序。处理程序可以是PHP用户区中的任何可调用项。以下示例显示如何定义不同类型的处理程序：</target>
        </trans-unit>
        <trans-unit id="b5ff4b822f5ea91f1310d2c23ac4fa5605ccb4ef" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;notSave&amp;rdquo; event is triggered whenever a &amp;ldquo;creating&amp;rdquo; or &amp;ldquo;updating&amp;rdquo; action fails. We&amp;rsquo;re flashing the validation messages obtaining the &amp;ldquo;flash&amp;rdquo; service from the DI container. By doing this, we don&amp;rsquo;t have to print messages after each saving.</source>
          <target state="translated">每当&amp;ldquo;创建&amp;rdquo;或&amp;ldquo;更新&amp;rdquo;操作失败时，就会触发&amp;ldquo; notSave&amp;rdquo;事件。我们正在刷新验证消息，以从DI容器中获取&amp;ldquo; flash&amp;rdquo;服务。这样，我们不必在每次保存后打印消息。</target>
        </trans-unit>
        <trans-unit id="21d5938c8a72fc8550bee017d569e007c426e698" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;notSaved&amp;rdquo; event is triggered every time that a &amp;ldquo;create&amp;rdquo; or &amp;ldquo;update&amp;rdquo; action fails. So we&amp;rsquo;re flashing the validation messages obtaining the &amp;ldquo;flash&amp;rdquo; service from the DI container. By doing this, we don&amp;rsquo;t have to print messages after each save.</source>
          <target state="translated">每当&amp;ldquo;创建&amp;rdquo;或&amp;ldquo;更新&amp;rdquo;操作失败时，都会触发&amp;ldquo;未保存&amp;rdquo;事件。因此，我们正在刷新验证消息，以从DI容器中获取&amp;ldquo; flash&amp;rdquo;服务。这样，我们不必在每次保存后打印消息。</target>
        </trans-unit>
        <trans-unit id="77ee47a33f445448789241b680893db76e26dfa3" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;robots_similar&amp;rdquo; table has the function to define what robots are similar to others:</source>
          <target state="translated">&amp;ldquo; robots_similar&amp;rdquo;表具有定义哪些机器人与其他机器人相似的功能：</target>
        </trans-unit>
        <trans-unit id="ea2b86e4bda0f5783c49938a5dd65ba12505b41c" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;search&amp;rdquo; action has two behaviors. When accessed via POST, it performs a search based on the data sent from the form but when accessed via GET it moves the current page in the paginator. To differentiate HTTP methods, we check it using the &lt;a href=&quot;request&quot;&gt;&lt;em&gt;Request&lt;/em&gt;&lt;/a&gt; component:</source>
          <target state="translated">&amp;ldquo;搜索&amp;rdquo;动作具有两种行为。通过POST访问时，它将根据表单发送的数据执行搜索，但是通过GET访问时，它将在分页器中移动当前页面。为了区分HTTP方法，我们使用&lt;a href=&quot;request&quot;&gt;&lt;em&gt;Request&lt;/em&gt;&lt;/a&gt;组件对其进行检查：</target>
        </trans-unit>
        <trans-unit id="1fd6f2ce905ee0f83b80c6cd55d49bc9e6be69e4" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;break&amp;rsquo; and &amp;lsquo;continue&amp;rsquo; statements can be used to exit from a loop or force an iteration in the current block:</source>
          <target state="translated">'break'和'continue'语句可用于退出循环或在当前块中强制执行迭代：</target>
        </trans-unit>
        <trans-unit id="7499d27ef92b27826affe3e8405eb660574f1381" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;elseif&amp;rsquo; control flow structure can be used together with if to emulate a &amp;lsquo;switch&amp;rsquo; block:</source>
          <target state="translated">'elseif'控制流结构可与if一起使用，以模拟'switch'块：</target>
        </trans-unit>
        <trans-unit id="79027116a502e75b3e7ca66a8e8178ad2315a3a4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_acl_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Acl\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own ACL adapters or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_acl_adapterinterface&quot;&gt;&lt;em&gt;尔康\的Acl \ AdapterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的ACL适配器或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="6fc695aa57ffcffb35d9ed406ed8ef47c4236453" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_annotations_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Annotations\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own annotations adapters or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_annotations_adapterinterface&quot;&gt;&lt;em&gt;尔康\注解\ AdapterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的注释适配器或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="248a79e8b769c05279c613c3945adbd3c2256768" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_cache_backendinterface&quot;&gt;&lt;em&gt;Phalcon\Cache\BackendInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own backend adapters or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_cache_backendinterface&quot;&gt;&lt;em&gt;尔康\缓存\ BackendInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的后端适配器或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="49de24ecb8b52454235e50683c74c5591fa127df" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_cache_frontendinterface&quot;&gt;&lt;em&gt;Phalcon\Cache\FrontendInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own frontend adapters or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_cache_frontendinterface&quot;&gt;&lt;em&gt;尔康\缓存\ FrontendInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的前端适配器或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="bc25ef4deef406445a89d074c16b5b0db3672dd7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_db_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Db\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own database adapters or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_db_adapterinterface&quot;&gt;&lt;em&gt;尔康\ DB \ AdapterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的数据库适配器或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="8824e2b7e246a51b87e48c5be39a10a091f23929" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_db_dialectinterface&quot;&gt;&lt;em&gt;Phalcon\Db\DialectInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own database dialects or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_db_dialectinterface&quot;&gt;&lt;em&gt;尔康\ DB \ DialectInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的数据库方言或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="008b3684f5fa467ac98159ab816074f7a370ff6c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_diinterface&quot;&gt;&lt;em&gt;Phalcon\DiInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_diinterface&quot;&gt;&lt;em&gt;尔康\ DiInterface&lt;/em&gt;&lt;/a&gt;接口必须实现创建自己的DI替换由惠尔康提供的一个或扩展当前的一个。</target>
        </trans-unit>
        <trans-unit id="a13ddac50478c3fca52015f18575edb94fbc33de" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_events_managerinterface&quot;&gt;&lt;em&gt;Phalcon\Events\ManagerInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own EventsManager replacing the one provided by Phalcon.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_events_managerinterface&quot;&gt;&lt;em&gt;尔康\活动\ ManagerInterface&lt;/em&gt;&lt;/a&gt;接口必须实现创建自己的事件管理替换由惠尔康提供的一个。</target>
        </trans-unit>
        <trans-unit id="edc3844ac3db04e78a2efa08615718a6fe9f28f3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_filter&quot;&gt;&lt;em&gt;Phalcon\Filter&lt;/em&gt;&lt;/a&gt; component provides a set of commonly used filters and data sanitizing helpers. It provides object-oriented wrappers around the PHP filter extension.</source>
          <target state="translated">所述&lt;a href=&quot;../api/phalcon_filter&quot;&gt;&lt;em&gt;费尔康\过滤器&lt;/em&gt;&lt;/a&gt;组件提供了一系列常用的过滤器和数据消毒助手。它围绕PHP过滤器扩展提供了面向对象的包装器。</target>
        </trans-unit>
        <trans-unit id="01420fd643f8ddfab533a90c23d356dbea80761d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_filterinterface&quot;&gt;&lt;em&gt;Phalcon\FilterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own filtering service replacing the one provided by Phalcon.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_filterinterface&quot;&gt;&lt;em&gt;尔康\ FilterInterface&lt;/em&gt;&lt;/a&gt;接口必须实现创建自己的过滤服务，通过更换尔康提供的一个。</target>
        </trans-unit>
        <trans-unit id="9ee65ba2023052cf456fc6668f9730107fb481cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_image_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Image\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own image adapters or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_image_adapterinterface&quot;&gt;&lt;em&gt;尔康\图片\ AdapterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的形象适配器或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="44c4566bcb1677a0e419a1616e34fe09abff0ad7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_logger_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Logger\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own logger adapters or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_logger_adapterinterface&quot;&gt;&lt;em&gt;尔康\记录仪\ AdapterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的记录器适配器或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="5db0e924eeefb9ef71e9ef79c1aaa59a1021499c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_logger_formatterinterface&quot;&gt;&lt;em&gt;Phalcon\Logger\FormatterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own logger formatter or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_logger_formatterinterface&quot;&gt;&lt;em&gt;尔康\记录仪\ FormatterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的记录格式或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="139a2bbf2913924532bcfdaab0e081c6dd7d3134" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_dispatcherinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\DispatcherInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own dispatcher replacing the one provided by Phalcon.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_mvc_dispatcherinterface&quot;&gt;&lt;em&gt;尔康\的mvc \ DispatcherInterface&lt;/em&gt;&lt;/a&gt;接口必须实现创建自己的调度员通过更换尔康提供的一个。</target>
        </trans-unit>
        <trans-unit id="5c49976e68ee45ed7d4ec3e27a84268f62ef9161" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_routerinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\RouterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own router replacing the one provided by Phalcon.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_mvc_routerinterface&quot;&gt;&lt;em&gt;尔康\的mvc \ RouterInterface&lt;/em&gt;&lt;/a&gt;接口必须实现创建自己的路由器更换由惠尔康提供的一个。</target>
        </trans-unit>
        <trans-unit id="fcf451dadaa517d822373c3d935aabf7bdce9fdc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_mvc_urlinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\UrlInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented to create your own URL generator replacing the one provided by Phalcon.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_mvc_urlinterface&quot;&gt;&lt;em&gt;尔康\的mvc \ UrlInterface&lt;/em&gt;&lt;/a&gt;接口必须实现创建自己的URL发电机更换由惠尔康提供的一个。</target>
        </trans-unit>
        <trans-unit id="e5c3fd9626b63b05835e4803e55dd6de0e3d47a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_paginator_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Paginator\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own paginator adapters or extend the existing ones:</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_paginator_adapterinterface&quot;&gt;&lt;em&gt;尔康\分页程序\ AdapterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的分页程序适配器或扩展现有的实现：</target>
        </trans-unit>
        <trans-unit id="89796f9f04a1ddb2276d8ef55876111d13e26967" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_security_random&quot;&gt;&lt;em&gt;Phalcon\Security\Random&lt;/em&gt;&lt;/a&gt; class makes it really easy to generate lots of types of random data.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_security_random&quot;&gt;&lt;em&gt;尔康\安全\随机&lt;/em&gt;&lt;/a&gt;类使得它很容易产生大量的类型的随机数据。</target>
        </trans-unit>
        <trans-unit id="7c48ba54a9d6e0ed604b72e7fef2e2b80ad96fcb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_session_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Session\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own session adapters or extend the existing ones.</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_session_adapterinterface&quot;&gt;&lt;em&gt;尔康\会议\ AdapterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建您自己的会话适配器或扩展现有的实现。</target>
        </trans-unit>
        <trans-unit id="3ccbb2db292060343b3570cfd0bc29bb70272a32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/phalcon_translate_adapterinterface&quot;&gt;&lt;em&gt;Phalcon\Translate\AdapterInterface&lt;/em&gt;&lt;/a&gt; interface must be implemented in order to create your own translate adapters or extend the existing ones:</source>
          <target state="translated">该&lt;a href=&quot;../api/phalcon_translate_adapterinterface&quot;&gt;&lt;em&gt;尔康\翻译\ AdapterInterface&lt;/em&gt;&lt;/a&gt;接口必须以创建自己的翻译适配器或扩展现有的实现：</target>
        </trans-unit>
        <trans-unit id="6f9c60d2d1799da10bc8985b7bda1380905ea75f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; (FastCGI Process Manager) is usually used to allow &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; to process PHP files. Nowadays, &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; is bundled with any Unix PHP distribution. Phalcon + &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; + &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt; provides a powerful set of tools that offer maximum performance for your PHP applications.</source>
          <target state="translated">的&lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt;（FastCGI进程管理器）通常被用来允许&lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx的&lt;/a&gt;工艺PHP文件。如今，&lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt;与任何Unix PHP发行版捆绑在一起。Phalcon + &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; + &lt;a href=&quot;http://php-fpm.org/&quot;&gt;PHP-FPM&lt;/a&gt;提供了一套功能强大的工具，可为您的PHP应用程序提供最佳性能。</target>
        </trans-unit>
        <trans-unit id="9c0ebd4185cec6f6fc2d8e775f34f681d31d3dec" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.php.net/manual/en/class.collator.php&quot;&gt;Collator&lt;/a&gt; class provides string comparison capability with support for appropriate locale-sensitive sort orderings. Check the examples below on the usage of this class:</source>
          <target state="translated">该&lt;a href=&quot;http://www.php.net/manual/en/class.collator.php&quot;&gt;校书郎&lt;/a&gt;类提供了相应的语言环境敏感的排序顺序支持字符串比较能力。检查以下有关此类用法的示例：</target>
        </trans-unit>
        <trans-unit id="a9e772f2e18a90221f33af09ccbe01c99e32982f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/phalcon/php-site&quot;&gt;PHP alternative site&lt;/a&gt; is an example of implementing the caching of fragments.</source>
          <target state="translated">的&lt;a href=&quot;https://github.com/phalcon/php-site&quot;&gt;PHP替换部位&lt;/a&gt;是实施片段的高速缓存的一个示例。</target>
        </trans-unit>
        <trans-unit id="b1f23ef9c07fd7fb2d94749f844c61009067dd08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tools&quot;&gt;&lt;em&gt;Phalcon Developer Tools&lt;/em&gt;&lt;/a&gt; provides scripts to manage migrations (generation, running and rollback).</source>
          <target state="translated">该&lt;a href=&quot;tools&quot;&gt;&lt;em&gt;尔康开发工具&lt;/em&gt;&lt;/a&gt;提供的脚本来管理迁移（生成，运行和回滚）。</target>
        </trans-unit>
        <trans-unit id="f0b9efe7eac181ed3392a383d5e1ce5b6c8e6bf8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tutorial-invo&quot;&gt;&lt;em&gt;INVO&lt;/em&gt;&lt;/a&gt; tutorial shows how to take advantage of dispatching events implementing a security filter with &lt;a href=&quot;acl&quot;&gt;&lt;em&gt;Acl&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">该&lt;a href=&quot;tutorial-invo&quot;&gt;&lt;em&gt;INVO&lt;/em&gt;&lt;/a&gt;教程演示如何采取实现了安全过滤器调度事件优势&lt;a href=&quot;acl&quot;&gt;&lt;em&gt;的Acl&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="31d25365acc53c3c39e27ac49ffb32efe5232ef7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$currentPage&lt;/code&gt; variable controls the page to be displayed. The &lt;code&gt;$paginator-&amp;gt;getPaginate()&lt;/code&gt; returns a &lt;code&gt;$page&lt;/code&gt; object that contains the paginated data. It can be used for generating the pagination:</source>
          <target state="translated">在 &lt;code&gt;$currentPage&lt;/code&gt; 可变控制显示的页面。在 &lt;code&gt;$paginator-&amp;gt;getPaginate()&lt;/code&gt; 返回 &lt;code&gt;$page&lt;/code&gt; 包含分页数据对象。它可以用于生成分页：</target>
        </trans-unit>
        <trans-unit id="f451a7a01be383fb6f5d3a78b71d81e282befc52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$page&lt;/code&gt; object also contains navigation data:</source>
          <target state="translated">在 &lt;code&gt;$page&lt;/code&gt; 对象还包含导航数据：</target>
        </trans-unit>
        <trans-unit id="0d72027df2636f41333c12a2a5328aefa5e420b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$page&lt;/code&gt; object has the following attributes:</source>
          <target state="translated">在 &lt;code&gt;$page&lt;/code&gt; 对象具有以下属性：</target>
        </trans-unit>
        <trans-unit id="9e89feded734eb468077b751566a7bfd7bc9dd9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NONE&lt;/code&gt; constant ignores the original image&amp;rsquo;s ratio. Neither width and height are required. If a dimension is not specified, the original dimension will be used. If the new proportions differ from the original proportions, the image may be distorted and stretched.</source>
          <target state="translated">在 &lt;code&gt;NONE&lt;/code&gt; 恒定忽略了原始图像的比例。宽度和高度都不是必需的。如果未指定尺寸，则将使用原始尺寸。如果新比例与原始比例不同，则图像可能会变形和拉伸。</target>
        </trans-unit>
        <trans-unit id="963ebaed1e76b8d66d5f70709513eb0b12801623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Db::query()&lt;/code&gt; returns an instance of &lt;a href=&quot;../api/phalcon_db_result_pdo&quot;&gt;&lt;em&gt;Phalcon\Db\Result\Pdo&lt;/em&gt;&lt;/a&gt;. These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.</source>
          <target state="translated">该 &lt;code&gt;Phalcon\Db::query()&lt;/code&gt; 返回的实例&lt;a href=&quot;../api/phalcon_db_result_pdo&quot;&gt;&lt;em&gt;尔康\ DB \结果\ PDO&lt;/em&gt;&lt;/a&gt;。这些对象封装了与返回的结果集相关的所有功能，即遍历，查找特定记录，计数等。</target>
        </trans-unit>
        <trans-unit id="7c31e3cbbb1ec7bdff29033d6f1c50304601e0ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Collection::delete()&lt;/code&gt; method allows you to delete a document. You can use it as follows:</source>
          <target state="translated">该 &lt;code&gt;Phalcon\Mvc\Collection::delete()&lt;/code&gt; 方法可以让你删除的文件。您可以按以下方式使用它：</target>
        </trans-unit>
        <trans-unit id="8e294d1f17663ff8a329817a651be22765db80a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Collection::save()&lt;/code&gt; method allows you to create/update documents according to whether they already exist in the collection associated with a model. The &lt;code&gt;save()&lt;/code&gt; method is called internally by the create and update methods of &lt;a href=&quot;../api/phalcon_mvc_collection&quot;&gt;&lt;em&gt;Phalcon\Mvc\Collection&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;Phalcon\Mvc\Collection::save()&lt;/code&gt; 方法可以让你根据自己是否已经与模型关联集合中存在创建/更新文档。在 &lt;code&gt;save()&lt;/code&gt; 方法是通过创建和更新方法内部调用&lt;a href=&quot;../api/phalcon_mvc_collection&quot;&gt;&lt;em&gt;尔康\的mvc \收藏&lt;/em&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="378098a63a48af6a9d6c7c649c464195d868701f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Model::delete()&lt;/code&gt; method allows to delete a record. You can use it as follows:</source>
          <target state="translated">该 &lt;code&gt;Phalcon\Mvc\Model::delete()&lt;/code&gt; 方法可以删除记录。您可以按以下方式使用它：</target>
        </trans-unit>
        <trans-unit id="da5d5a58620443cbf7213a635ae112abf46ccf8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; method allows you to create/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt;. For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be updated or created.</source>
          <target state="translated">通过 &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; 方法，您可以根据与模型关联的表中是否已存在的记录来创建/更新记录。save方法由&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;的create和update方法在内部调用。为了使此功能按预期工作，有必要在实体中正确定义一个主键，以确定是否应更新或创建记录。</target>
        </trans-unit>
        <trans-unit id="9ca380c73bb35350a9e4dec6c400d4eda63d04e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phalcon\Tag::form()&lt;/code&gt; method receives only one parameter for instance, a relative URI to a controller/action in the application.</source>
          <target state="translated">所述 &lt;code&gt;Phalcon\Tag::form()&lt;/code&gt; 方法接收只有一个实例参数，相对URI到应用控制器/动作。</target>
        </trans-unit>
        <trans-unit id="3e0b30339709b1c2cc64d626a0c56b3493311c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SessionController::startAction&lt;/code&gt; function (app/controllers/SessionController.php) has the task of validating the data entered in the form including checking for a valid user in the database:</source>
          <target state="translated">所述 &lt;code&gt;SessionController::startAction&lt;/code&gt; 功能（应用程序/控制器/ SessionController.php）具有验证在形式，包括检查所述数据库中的有效用户输入的数据的任务：</target>
        </trans-unit>
        <trans-unit id="2969e182118ba9160fd3715be75ef65ba3ebeb09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_()&lt;/code&gt; method is returning the translated string based on the index passed. Some strings need to incorporate placeholders for calculated data i.e. Hello %name%. These placeholders can be replaced with passed parameters in the &lt;code&gt;_()&lt;/code&gt; method. The passed parameters are in the form of a key/value array, where the key matches the placeholder name and the value is the actual data to be replaced:</source>
          <target state="translated">的 &lt;code&gt;_()&lt;/code&gt; 方法是基于传入的索引返回翻译的串。一些字符串需要为计算数据合并占位符，即Hello％name％。可以在 &lt;code&gt;_()&lt;/code&gt; 方法中将这些占位符替换为传递的参数。传递的参数采用键/值数组的形式，其中键与占位符名称匹配，并且值是要替换的实际数据：</target>
        </trans-unit>
        <trans-unit id="d129377c0bd6815a802ad3db286298e6eb3186ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_getTranslation()&lt;/code&gt; method is available for all actions that require translations. The &lt;code&gt;$t&lt;/code&gt; variable is passed to the views, and with it, we can translate strings in that layer:</source>
          <target state="translated">该 &lt;code&gt;_getTranslation()&lt;/code&gt; 方法可用于需要翻译的所有操作。在 &lt;code&gt;$t&lt;/code&gt; 变量传递的意见，有了它，我们可以翻译在该层的字符串：</target>
        </trans-unit>
        <trans-unit id="fae4d9b0996e71ae01a8407a92cb723bd2ddb1e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add()&lt;/code&gt; method receives a pattern that can optionally have predefined placeholders and regular expression modifiers. All the routing patterns must start with a forward slash character (/). The regular expression syntax used is the same as the &lt;a href=&quot;http://www.php.net/manual/en/book.pcre.php&quot;&gt;PCRE regular expressions&lt;/a&gt;. Note that, it is not necessary to add regular expression delimiters. All route patterns are case-insensitive.</source>
          <target state="translated">所述 &lt;code&gt;add()&lt;/code&gt; 方法接收可任选具有预定义的占位符和正则表达式改性剂的图案。所有路由模式都必须以正斜杠字符（/）开头。使用的正则表达式语法与&lt;a href=&quot;http://www.php.net/manual/en/book.pcre.php&quot;&gt;PCRE正则表达式&lt;/a&gt;相同。注意，没有必要添加正则表达式定界符。所有路由模式均不区分大小写。</target>
        </trans-unit>
        <trans-unit id="214ec92b15cc2b9a220ea18d7ff96c41b6c5369d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow()&lt;/code&gt; method designates that a particular role has granted access to a particular resource. The &lt;code&gt;deny()&lt;/code&gt; method does the opposite.</source>
          <target state="translated">在 &lt;code&gt;allow()&lt;/code&gt; 方法指定将特定角色授予访问特定的资源。的 &lt;code&gt;deny()&lt;/code&gt; 方法执行相反。</target>
        </trans-unit>
        <trans-unit id="602c51283debd0ca3ec78eeb2bf073f357e9f521" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blur()&lt;/code&gt; method takes a single parameter - an integer between 0 (no effect) and 100 (very blurry):</source>
          <target state="translated">的 &lt;code&gt;blur()&lt;/code&gt; 方法采用单个参数- 0（无影响）和100（非常模糊）之间的整数：</target>
        </trans-unit>
        <trans-unit id="616853c00129638bdf7764ef5dea80502a276951" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMessages()&lt;/code&gt; method can be overridden in a model to replace/translate the default messages generated automatically by the ORM:</source>
          <target state="translated">在 &lt;code&gt;getMessages()&lt;/code&gt; 方法可在模型被重载以替换/翻译由ORM自动生成的默认消息：</target>
        </trans-unit>
        <trans-unit id="9c3d614b069fe50e3463f7360500b1a78853b6c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize()&lt;/code&gt; method is only called if the &amp;lsquo;beforeExecuteRoute&amp;rsquo; event is executed with success. This avoid that application logic in the initializer cannot be executed without authorization.</source>
          <target state="translated">的 &lt;code&gt;initialize()&lt;/code&gt; 如果成功执行了&amp;ldquo;beforeExecuteRoute&amp;rdquo;事件方法仅调用。这样避免了未经授权就无法执行初始化程序中的应用程序逻辑。</target>
        </trans-unit>
        <trans-unit id="094113803fcd3e519956b1c6037393f8ed966cb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize()&lt;/code&gt; method is only called once during the request, it&amp;rsquo;s intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can use the &lt;code&gt;onConstruct()&lt;/code&gt; method:</source>
          <target state="translated">在 &lt;code&gt;initialize()&lt;/code&gt; 一旦请求时，它意在执行申请应用程序中创建的模型的所有实例的初始化方法只调用。如果要对创建的每个实例执行初始化任务，则可以使用 &lt;code&gt;onConstruct()&lt;/code&gt; 方法：</target>
        </trans-unit>
        <trans-unit id="8c841d83372e3b4388a080f64e8e8e8a7e557cb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputJs()&lt;/code&gt; and &lt;code&gt;outputCss()&lt;/code&gt; methods are available to generate the necessary HTML code according to each type of resources. You can override this method or print the resources manually in the following way:</source>
          <target state="translated">所述 &lt;code&gt;outputJs()&lt;/code&gt; 和 &lt;code&gt;outputCss()&lt;/code&gt; 方法可根据每种类型的资源，以产生必要的HTML代码。您可以重写此方法或通过以下方式手动打印资源：</target>
        </trans-unit>
        <trans-unit id="c8827777279c34a41f52717e074d92ee380cef7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;partial()&lt;/code&gt; method does accept a second parameter as an array of variables/parameters that only will exists in the scope of the partial:</source>
          <target state="translated">的 &lt;code&gt;partial()&lt;/code&gt; 方法执行接受第二参数作为变量/参数，只有将在该部分的范围中存在的数组：</target>
        </trans-unit>
        <trans-unit id="4949ea5e5a4562f6aa5f40d56ae930b104e0f3ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pixelate()&lt;/code&gt; method takes a single parameter - the higher the integer, the more pixelated the image becomes:</source>
          <target state="translated">所述 &lt;code&gt;pixelate()&lt;/code&gt; 方法采用单个参数-越高整数，越像素化图像变得：</target>
        </trans-unit>
        <trans-unit id="1757ebefe50f25661654ec55178596b924935115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;selectReadConnection()&lt;/code&gt; method is called to choose the right connection, this method intercepts any new query executed:</source>
          <target state="translated">该 &lt;code&gt;selectReadConnection()&lt;/code&gt; 方法被调用来选择合适的连接，这种方法截取任何新的查询执行：</target>
        </trans-unit>
        <trans-unit id="af29239dee3c130d50b965bdc6c999b1487f9634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setVar()&lt;/code&gt; method allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the &lt;code&gt;$postId&lt;/code&gt; parameter to the respective view template.</source>
          <target state="translated">该 &lt;code&gt;setVar()&lt;/code&gt; 方法允许我们根据需要创建视图变量，使他们可以在视图模板中使用。上面的示例演示了如何将 &lt;code&gt;$postId&lt;/code&gt; 参数传递给相应的视图模板。</target>
        </trans-unit>
        <trans-unit id="a65c782374f2ae72e81cee1da77cd3699008d634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sharpen()&lt;/code&gt; method takes a single parameter - an integer between 0 (no effect) and 100 (very sharp):</source>
          <target state="translated">的 &lt;code&gt;sharpen()&lt;/code&gt; 方法采用单个参数- 0（无影响）和100（非常尖锐的）之间的整数：</target>
        </trans-unit>
        <trans-unit id="a9ea6012711c89cb795bdf7ffed343307d803854" translate="yes" xml:space="preserve">
          <source>The ACL now have knowledge of the existing controllers and their related actions. Role &amp;ldquo;Users&amp;rdquo; has access to all the resources of both frontend and backend. The role &amp;ldquo;Guests&amp;rdquo; only has access to the public area:</source>
          <target state="translated">现在，ACL可以了解现有控制器及其相关操作。角色&amp;ldquo;用户&amp;rdquo;有权访问前端和后端的所有资源。&amp;ldquo;来宾&amp;rdquo;角色只能访问公共区域：</target>
        </trans-unit>
        <trans-unit id="20573a1f950447f4fc418663b03aa4e7efb2589d" translate="yes" xml:space="preserve">
          <source>The API consists of the following methods:</source>
          <target state="translated">该API由以下方法组成。</target>
        </trans-unit>
        <trans-unit id="0a5e4009919ae3c60011e43378018ea5a19209ef" translate="yes" xml:space="preserve">
          <source>The Dispatch Loop</source>
          <target state="translated">调度环路</target>
        </trans-unit>
        <trans-unit id="bfe1632cbbbd1aeb51120af60301c4e5eea4b59b" translate="yes" xml:space="preserve">
          <source>The IR is converted to valid SQL according to the database system associated to the model</source>
          <target state="translated">根据与模型相关联的数据库系统,IR被转换为有效的SQL。</target>
        </trans-unit>
        <trans-unit id="8f6d5fe3939c4ac95f99ed020a571dcd0ca6c48c" translate="yes" xml:space="preserve">
          <source>The MVC Architecture</source>
          <target state="translated">MVC架构</target>
        </trans-unit>
        <trans-unit id="ee5ee8733bfe4d9dd27fef0440919c5216014a98" translate="yes" xml:space="preserve">
          <source>The ORM also provides Horizontal Sharding facilities, by allowing you to implement a &amp;lsquo;shard&amp;rsquo; selection according to the current query conditions:</source>
          <target state="translated">通过允许您根据当前查询条件实现&amp;ldquo;碎片&amp;rdquo;选择，ORM还提供了&amp;ldquo;水平碎片&amp;rdquo;功能：</target>
        </trans-unit>
        <trans-unit id="e63769e92de028b2301a820b04302c1ddf23d8aa" translate="yes" xml:space="preserve">
          <source>The ORM automatically escapes the input preventing SQL injections so we only need to pass the request to the &lt;code&gt;save()&lt;/code&gt; method.</source>
          <target state="translated">ORM自动转义输入以防止SQL注入，因此我们只需要将请求传递给 &lt;code&gt;save()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="3e1abd3779dcdd8a216fdca33a393a42a898748c" translate="yes" xml:space="preserve">
          <source>The ORM automatically validate the not null columns present in the mapped table</source>
          <target state="translated">ORM自动验证映射表中的非空列</target>
        </trans-unit>
        <trans-unit id="8f43729f0ddcb7d1f7a386bf25b144028b89dc0a" translate="yes" xml:space="preserve">
          <source>The ORM provides an API to create your own behaviors. A behavior must be a class implementing the &lt;a href=&quot;../api/phalcon_mvc_model_behaviorinterface&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\BehaviorInterface&lt;/em&gt;&lt;/a&gt;. Also, &lt;a href=&quot;../api/phalcon_mvc_model_behavior&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Behavior&lt;/em&gt;&lt;/a&gt; provides most of the methods needed to ease the implementation of behaviors.</source>
          <target state="translated">ORM提供了一个API来创建您自己的行为。行为必须是实现&lt;a href=&quot;../api/phalcon_mvc_model_behaviorinterface&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ BehaviorInterface的类&lt;/em&gt;&lt;/a&gt;。而且，&lt;a href=&quot;../api/phalcon_mvc_model_behavior&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Behavior&lt;/em&gt;&lt;/a&gt;提供了缓解行为实现所需的大多数方法。</target>
        </trans-unit>
        <trans-unit id="72b8f5a7fccc687d1fd8317b210cd603f2999806" translate="yes" xml:space="preserve">
          <source>The ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. A change in the column map in the model will take care of the rest. For example:</source>
          <target state="translated">ORM支持独立的列图,允许开发人员在模型中使用与表中不同的列名。Phalcon将识别新的列名,并将相应地重命名它们,以匹配数据库中相应的列名。当人们需要重命名数据库中的字段时,这是一个很好的功能,而不必担心代码中的所有查询。在模型中改变列图就可以解决剩下的问题。比如说</target>
        </trans-unit>
        <trans-unit id="bff718c5a5a8b130ef20666b4a47aebc3241d3d9" translate="yes" xml:space="preserve">
          <source>The PHPunit helper file</source>
          <target state="translated">PHPunit帮助文件</target>
        </trans-unit>
        <trans-unit id="bf6dec633862a48857130651309b77c6e67f6972" translate="yes" xml:space="preserve">
          <source>The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system</source>
          <target state="translated">PHQL被解析并转换为独立于数据库系统实现的SQL的中间表示(IR)。</target>
        </trans-unit>
        <trans-unit id="cbf50e9263ee70e10f3dafaba154cd39a2429f4d" translate="yes" xml:space="preserve">
          <source>The Phalcon PHP extension is required to run Phalcon Tools. If you haven&amp;rsquo;t installed it yet, please see the &lt;a href=&quot;install&quot;&gt;&lt;em&gt;Installation&lt;/em&gt;&lt;/a&gt; section for instructions.</source>
          <target state="translated">要运行Phalcon工具，需要Phalcon PHP扩展。如果尚未安装，请参阅&amp;ldquo; &lt;a href=&quot;install&quot;&gt;&lt;em&gt;安装&amp;rdquo;&lt;/em&gt;&lt;/a&gt;部分以获取说明。</target>
        </trans-unit>
        <trans-unit id="cbb8870a54d36c8926d46e328a8cd7f68027e74e" translate="yes" xml:space="preserve">
          <source>The Phalcon extension should appear as part of the output:</source>
          <target state="translated">Phalcon扩展应该作为输出的一部分出现。</target>
        </trans-unit>
        <trans-unit id="3f6059c4243d966e2bd10e6221e3d12686cc894d" translate="yes" xml:space="preserve">
          <source>The Phalcon\Filter component provides a set of commonly needed data filters. It provides object oriented wrappers to the php filter extension. Also allows the developer to define his/her own filters</source>
          <target state="translated">Phalcon\Filter组件提供了一组常用的数据过滤器。它为php过滤器扩展提供了面向对象的封装器。也允许开发者定义自己的过滤器。</target>
        </trans-unit>
        <trans-unit id="4c96474e86551b2bb2ad2874c280f54c99a4dce8" translate="yes" xml:space="preserve">
          <source>The Products controller</source>
          <target state="translated">产品控制器</target>
        </trans-unit>
        <trans-unit id="d084942fc15393170283c68aa493d216fc5e9931" translate="yes" xml:space="preserve">
          <source>The Products model</source>
          <target state="translated">产品模型</target>
        </trans-unit>
        <trans-unit id="7b84d7d242437b8ad059adc6cbe50673a1604d4c" translate="yes" xml:space="preserve">
          <source>The Response component automatically shows the date in GMT timezone as expected in an Expires header.</source>
          <target state="translated">响应组件会自动在Expires头中以GMT时区显示日期。</target>
        </trans-unit>
        <trans-unit id="4dac4842bfd245df80e9e2e906baaca72614e53a" translate="yes" xml:space="preserve">
          <source>The RobotsPart model can be changed to demonstrate this feature:</source>
          <target state="translated">可以改变RobotsPart模型来展示这个功能。</target>
        </trans-unit>
        <trans-unit id="88f4f59230105e7ac7590612263649c4a1405188" translate="yes" xml:space="preserve">
          <source>The Search Form</source>
          <target state="translated">搜索表格</target>
        </trans-unit>
        <trans-unit id="e389ba38a75d52dc02fa2e78aa50c7e886cbeaaf" translate="yes" xml:space="preserve">
          <source>The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.</source>
          <target state="translated">Volt编译器允许你扩展它,在现有的基础上增加更多的函数、测试或过滤器。</target>
        </trans-unit>
        <trans-unit id="f908d39a4b7e07929be8bcf4713a26dbf4f0f43a" translate="yes" xml:space="preserve">
          <source>The above auto-loader lacks any kind of security. If a function mistakenly launches the auto-loader and a malicious prepared string is used as parameter this would allow to execute any file accessible by the application:</source>
          <target state="translated">上述自动加载器缺乏任何安全保障。如果一个函数错误地启动了自动加载器,并且使用了一个恶意准备的字符串作为参数,这将允许执行应用程序可以访问的任何文件。</target>
        </trans-unit>
        <trans-unit id="1afb3126a0d13465741161e97e508446121bdee3" translate="yes" xml:space="preserve">
          <source>The above class implements the method &amp;lsquo;compileFunction&amp;rsquo; which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn&amp;rsquo;t return an string the compilation is done using the default behavior provided by the engine.</source>
          <target state="translated">上面的类实现了方法'compileFunction'，该方法在任何尝试编译任何模板中的函数调用之前被调用。扩展的目的是验证要编译的函数是否是允许从模板调用它的PHP函数。扩展中的事件必须返回有效的PHP代码，这将用作编译结果，而不是由Volt生成的代码。如果事件未返回字符串，则使用引擎提供的默认行为完成编译。</target>
        </trans-unit>
        <trans-unit id="9720c9600f499b56f47dab7827ec2a059d7d9fa3" translate="yes" xml:space="preserve">
          <source>The above code produces the following:</source>
          <target state="translated">上面的代码会产生以下结果。</target>
        </trans-unit>
        <trans-unit id="641e222caaf8eb49dae693949f9eb22119b80a56" translate="yes" xml:space="preserve">
          <source>The above code set up to delete all the referenced records (parts) if the master record (robot) is deleted.</source>
          <target state="translated">上面的代码设置,如果主记录(机器人)被删除,则删除所有引用的记录(部分)。</target>
        </trans-unit>
        <trans-unit id="998ee14c2c1e8630250397f0b08c5c615346c4b8" translate="yes" xml:space="preserve">
          <source>The above example changes slightly (especially in terms of configuration) when we are using a Memcached backend.</source>
          <target state="translated">当我们使用Memcached后端时,上面的例子略有变化(特别是在配置方面)。</target>
        </trans-unit>
        <trans-unit id="640608739372a9af2b9ee4537a2576930fe25c19" translate="yes" xml:space="preserve">
          <source>The above example has been simplified for academic purposes. A developer can improve it to inject any kind of dependency or model in actions before be executed.</source>
          <target state="translated">上面的例子是为了学术目的而简化的。开发者可以对其进行改进,在执行动作前注入任何类型的依赖或模型。</target>
        </trans-unit>
        <trans-unit id="8970b88176bf860cd77533b16c929217f6e1bce8" translate="yes" xml:space="preserve">
          <source>The above example performs a validation using the built-in validator &amp;ldquo;InclusionIn&amp;rdquo;. It checks the value of the field &amp;ldquo;type&amp;rdquo; in a domain list. If the value is not included in the method then the validator will fail and return false.</source>
          <target state="translated">上面的示例使用内置的验证程序&amp;ldquo; InclusionIn&amp;rdquo;执行验证。它检查域列表中字段&amp;ldquo;类型&amp;rdquo;的值。如果该方法未包含该值，则验证器将失败并返回false。</target>
        </trans-unit>
        <trans-unit id="1cddbdb647c9cf3d91ab7760eb687ea08af15055" translate="yes" xml:space="preserve">
          <source>The above example produces:</source>
          <target state="translated">上述例子产生。</target>
        </trans-unit>
        <trans-unit id="7baa14afb1f4a2376ce7b38c378d92022ee78db6" translate="yes" xml:space="preserve">
          <source>The above findByRawSql could be used as follows:</source>
          <target state="translated">上面的findByRawSql可以这样使用。</target>
        </trans-unit>
        <trans-unit id="33e998d267e4b2b372efe4046de348544b11e369" translate="yes" xml:space="preserve">
          <source>The above recommended project structure was generated:</source>
          <target state="translated">以上推荐项目结构生成。</target>
        </trans-unit>
        <trans-unit id="739f94fc0e64c663df6c8e309d02dc4171ba3d81" translate="yes" xml:space="preserve">
          <source>The adapters available are:</source>
          <target state="translated">现有的适配器有:</target>
        </trans-unit>
        <trans-unit id="5dcb2f1b16c2056033a570a80c8b0558d26b28e6" translate="yes" xml:space="preserve">
          <source>The aliases allow us to rename both relationships to solve these problems:</source>
          <target state="translated">别名允许我们重命名这两种关系来解决这些问题。</target>
        </trans-unit>
        <trans-unit id="e2f1609839d5b29f0c21013dd97ccda8358c834f" translate="yes" xml:space="preserve">
          <source>The annotation @Column supports the following parameters:</source>
          <target state="translated">注解@Column支持以下参数。</target>
        </trans-unit>
        <trans-unit id="758f73022349b310629caf499314a3f520e72d48" translate="yes" xml:space="preserve">
          <source>The annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter. Adapters cache the processed annotations avoiding the need of parse the annotations again and again.</source>
          <target state="translated">注释读取过程非常快,但是,出于性能考虑,建议使用适配器存储解析后的注释。适配器可以缓存处理过的注解,避免了反复解析注解的需要。</target>
        </trans-unit>
        <trans-unit id="5c76e8172935d5b329f08c5b299accff8c615d00" translate="yes" xml:space="preserve">
          <source>The annotations are cached only in memory. When the request ends the cache is cleaned reloading the annotations in each request. This adapter is suitable for a development stage</source>
          <target state="translated">注释只缓存在内存中。当请求结束时,缓存会被清理,在每个请求中重新加载注释。该适配器适用于开发阶段</target>
        </trans-unit>
        <trans-unit id="6489c89aa81d883b6f5e7d30115e951632e6e54c" translate="yes" xml:space="preserve">
          <source>The annotations can be defined in the following way:</source>
          <target state="translated">注释可以用以下方式定义。</target>
        </trans-unit>
        <trans-unit id="217a0fa6ec74990c9fc55a740b87f1fcd9517720" translate="yes" xml:space="preserve">
          <source>The annotations strategy could be set up this way:</source>
          <target state="translated">注释策略可以这样设置。</target>
        </trans-unit>
        <trans-unit id="0b1a1d81b44d757bcb9eb9f88e7f4d77325623bd" translate="yes" xml:space="preserve">
          <source>The application is divided into two parts, a frontend, where visitors can sign up the service and a backend where administrative users can manage registered users. Both frontend and backend are combined in a single module.</source>
          <target state="translated">应用分为两个部分,一个是前台,访客可以注册服务,一个是后台,管理用户可以管理注册用户。前端和后端都结合在一个模块中。</target>
        </trans-unit>
        <trans-unit id="a103c5e2df3df30008218b767a0f8bef72a0c5df" translate="yes" xml:space="preserve">
          <source>The application is divided into two parts: a frontend and a backend. The frontend is a public area where visitors can receive information about INVO and request contact information. The backend is an administrative area where registered users can manage their products and customers.</source>
          <target state="translated">该应用程序分为两部分:前端和后端。前台是一个公共区域,访问者可以在此接收有关英沃的信息,并要求提供联系信息;后台是一个管理区域,注册用户可以在此管理产品和客户。后台是一个管理区域,注册用户可在此管理其产品和客户。</target>
        </trans-unit>
        <trans-unit id="27f0e60f6d37271ac41d122aa11b30652511bcfe" translate="yes" xml:space="preserve">
          <source>The array syntax is also allowed to register services:</source>
          <target state="translated">数组语法也允许注册服务。</target>
        </trans-unit>
        <trans-unit id="e9a0d5d2766bf8fe44bf74cc2c452ada5b1b3a13" translate="yes" xml:space="preserve">
          <source>The array-syntax is allowed to easily set/get services in the internal services container:</source>
          <target state="translated">Array-syntax允许在内部服务容器中轻松设置/获取服务。</target>
        </trans-unit>
        <trans-unit id="abb8526b44ef24e06e2347eba17fba2e572b137c" translate="yes" xml:space="preserve">
          <source>The associated entity added to the form in the initialization and custom user options are passed to the form constructor:</source>
          <target state="translated">在初始化中添加到表单中的关联实体和自定义用户选项被传递给表单构造函数。</target>
        </trans-unit>
        <trans-unit id="32e1a1370216ee1811d0355624c36261b1d13de3" translate="yes" xml:space="preserve">
          <source>The associative array passed in &lt;code&gt;Phalcon\Db::createTable()&lt;/code&gt; can have the possible keys:</source>
          <target state="translated">在 &lt;code&gt;Phalcon\Db::createTable()&lt;/code&gt; 传递的关联数组可以具有可能的键：</target>
        </trans-unit>
        <trans-unit id="86d4c1e8b7362f7b37fb25781cecab08320eb2e5" translate="yes" xml:space="preserve">
          <source>The attribute &amp;lsquo;flashSession&amp;rsquo; is how the flash was previously set into the dependency injection container. You need to start the &lt;a href=&quot;session&quot;&gt;&lt;em&gt;session&lt;/em&gt;&lt;/a&gt; first to successfully use the flashSession messenger.</source>
          <target state="translated">属性&amp;ldquo; flashSession&amp;rdquo;是先前将闪存设置到依赖项注入容器中的方式。您需要先启动&lt;a href=&quot;session&quot;&gt;&lt;em&gt;会话&lt;/em&gt;&lt;/a&gt;才能成功使用flashSession Messenger。</target>
        </trans-unit>
        <trans-unit id="d814687055e28b0a1816b4042f54e0cf7b63bb38" translate="yes" xml:space="preserve">
          <source>The autoloader registers a set of directories in which the application will look for the classes that it will eventually need.</source>
          <target state="translated">自动加载器注册了一组目录,应用程序将在其中寻找最终需要的类。</target>
        </trans-unit>
        <trans-unit id="57392386089b122414f354b2c8a4aab9ebcab9a9" translate="yes" xml:space="preserve">
          <source>The available frontend adapters that are used as interfaces or input sources to the cache are:</source>
          <target state="translated">作为缓存的接口或输入源的可用前端适配器有:。</target>
        </trans-unit>
        <trans-unit id="54ed46c150718473d8504c434e30cd577b337e90" translate="yes" xml:space="preserve">
          <source>The available options are:</source>
          <target state="translated">可用的选项有:</target>
        </trans-unit>
        <trans-unit id="cd780c7581f0647f835fbe37ae0fc02775cf0ed9" translate="yes" xml:space="preserve">
          <source>The available options for generating migrations are:</source>
          <target state="translated">产生迁移的可用选项有:</target>
        </trans-unit>
        <trans-unit id="492a577b9447713db2560afab6b2ac84e1874693" translate="yes" xml:space="preserve">
          <source>The available query options are:</source>
          <target state="translated">可用的查询选项有:</target>
        </trans-unit>
        <trans-unit id="43062c2300a1e8a68f6d57cbee5a67f7f9cd70ad" translate="yes" xml:space="preserve">
          <source>The available render levels are:</source>
          <target state="translated">可用的渲染级别有:</target>
        </trans-unit>
        <trans-unit id="dcf1b99c8bb38ac468afca8f27e6d74afd3a4c5e" translate="yes" xml:space="preserve">
          <source>The backend adapters available to store cache data are:</source>
          <target state="translated">可用于存储缓存数据的后端适配器有:。</target>
        </trans-unit>
        <trans-unit id="a34dcd281686b81342de96a0ead185c94fbba819" translate="yes" xml:space="preserve">
          <source>The backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you aren&amp;rsquo;t logged into the application and you try to access, for example, the products controller (which is private) you will see a screen like this:</source>
          <target state="translated">后端是专用区域，只有注册用户可以访问。因此，有必要检查只有注册用户才能访问这些控制器。如果您尚未登录该应用程序，并且尝试访问产品控制器（私有），则将看到类似以下的屏幕：</target>
        </trans-unit>
        <trans-unit id="bbc47f6cb36efc8d9ccba4db4548bdedd6989c6f" translate="yes" xml:space="preserve">
          <source>The behavior of this component is based on the PHP&amp;rsquo;s capability of &lt;a href=&quot;http://www.php.net/manual/en/language.oop5.autoload.php&quot;&gt;autoloading classes&lt;/a&gt;. If a class that does not yet exist is used in any part of the code, a special handler will try to load it. &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; serves as the special handler for this operation. By loading classes on a need-to-load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;lazy initialization&lt;/a&gt;.</source>
          <target state="translated">该组件的行为基于PHP &lt;a href=&quot;http://www.php.net/manual/en/language.oop5.autoload.php&quot;&gt;自动加载类&lt;/a&gt;的能力。如果代码的任何部分都使用了尚不存在的类，则特殊的处理程序将尝试加载它。&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;充当此操作的特殊处理程序。通过按需加载类来加载类，可以提高整体性能，因为发生的唯一文件读取是针对所需文件的。这种技术称为&lt;a href=&quot;http://en.wikipedia.org/wiki/Lazy_initialization&quot;&gt;延迟初始化&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9c2d350d8d50d11db8a1ead417f1eb124b2f5e9e" translate="yes" xml:space="preserve">
          <source>The best solution here is to implement background jobs. The web application puts jobs into a queue and which will be processed separately.</source>
          <target state="translated">这里最好的解决方案是实现后台作业。Web应用程序将作业放入一个队列中,哪些作业将被单独处理。</target>
        </trans-unit>
        <trans-unit id="3f7f304234b60ec1a67f38ce4676252110b1cedb" translate="yes" xml:space="preserve">
          <source>The best way to use this guide is to follow each step in turn. You can get the complete code &lt;a href=&quot;https://github.com/phalcon/tutorial&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">使用本指南的最佳方法是依次执行每个步骤。您可以在&lt;a href=&quot;https://github.com/phalcon/tutorial&quot;&gt;此处&lt;/a&gt;获取完整的代码。</target>
        </trans-unit>
        <trans-unit id="3e4b2b54f278b9b747c7d0d271bff5e48ff50235" translate="yes" xml:space="preserve">
          <source>The bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.</source>
          <target state="translated">双向关系在两个模型中建立关系,每个模型都定义了另一个模型的反向关系。</target>
        </trans-unit>
        <trans-unit id="eae0c2b78cdb25e725d441899d1f8fba5aaf5fa7" translate="yes" xml:space="preserve">
          <source>The browser output should remain the same. The &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; static component is automatically created when the action execution has ended. Learn more about &lt;a href=&quot;views&quot;&gt;&lt;em&gt;views usage here&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">浏览器输出应保持不变。该&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;尔康\的mvc \查看&lt;/em&gt;&lt;/a&gt;时动作执行结束时自动创建静态组件。&lt;a href=&quot;views&quot;&gt;&lt;em&gt;在此处&lt;/em&gt;&lt;/a&gt;了解有关&lt;em&gt;视图用法的&lt;/em&gt;更多信息。</target>
        </trans-unit>
        <trans-unit id="b129a27dc5a0498cb8eb1af9902614353c32d2c7" translate="yes" xml:space="preserve">
          <source>The bury command puts a job into the &amp;ldquo;buried&amp;rdquo; state. Buried jobs are put into a FIFO linked list and will not be touched by the server again until a client kicks them with the &amp;ldquo;kick&amp;rdquo; command.</source>
          <target state="translated">bury命令将作业置于&amp;ldquo;埋入&amp;rdquo;状态。埋入的作业将放入FIFO链接列表中，直到客户端用&amp;ldquo; kick&amp;rdquo;命令将其踢除，服务器才会再次对其进行触摸。</target>
        </trans-unit>
        <trans-unit id="335f0ffe68bcc5fc2746f4bb42dbaa9723a35ed6" translate="yes" xml:space="preserve">
          <source>The caching is done by the &lt;a href=&quot;cache&quot;&gt;&lt;em&gt;Phalcon\Cache&lt;/em&gt;&lt;/a&gt; component via the view component. Learn more about how this integration works in the section &lt;a href=&quot;views&quot;&gt;&lt;em&gt;&amp;ldquo;Caching View Fragments&amp;rdquo;&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">缓存由&lt;a href=&quot;cache&quot;&gt;&lt;em&gt;Phalcon \ Cache&lt;/em&gt;&lt;/a&gt;组件通过view组件完成。在&lt;a href=&quot;views&quot;&gt;&lt;em&gt;&amp;ldquo;缓存视图片段&amp;rdquo;&lt;/em&gt;&lt;/a&gt;一节中了解有关此集成如何工作的更多信息。</target>
        </trans-unit>
        <trans-unit id="ff855939b43755bb953ed6627ef485ac1db5a0e9" translate="yes" xml:space="preserve">
          <source>The caching process is divided into 2 parts:</source>
          <target state="translated">缓存过程分为2个部分。</target>
        </trans-unit>
        <trans-unit id="a26592d06aade67b6e4cd592b7700ec609f9454a" translate="yes" xml:space="preserve">
          <source>The cipher is one of the encryption algorithms supported by openssl. You can see a list &lt;a href=&quot;http://www.php.net/manual/en/function.openssl-get-cipher-methods.php&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">密码是openssl支持的加密算法之一。你可以&lt;a href=&quot;http://www.php.net/manual/en/function.openssl-get-cipher-methods.php&quot;&gt;在这里&lt;/a&gt;看到清单</target>
        </trans-unit>
        <trans-unit id="4b092ff6523de7f09bb773159a22676adf4cb05b" translate="yes" xml:space="preserve">
          <source>The class is called &amp;ldquo;ProductsMigration_100&amp;rdquo;. Suffix 100 refers to the version 1.0.0. &lt;code&gt;morphTable()&lt;/code&gt; receives an associative array with 4 possible sections:</source>
          <target state="translated">该类称为&amp;ldquo; ProductsMigration_100&amp;rdquo;。后缀100表示​​版本1.0.0。 &lt;code&gt;morphTable()&lt;/code&gt; 接收具有四个可能部分的关联数组：</target>
        </trans-unit>
        <trans-unit id="88009ad71950018345710cfc6b1fb63c7e9f9cda" translate="yes" xml:space="preserve">
          <source>The code above lacks validations, filters and additional checks, but it demonstrates the normal flow of operation in the dispatcher.</source>
          <target state="translated">上面的代码缺乏验证、过滤器和额外的检查,但它展示了调度器的正常操作流程。</target>
        </trans-unit>
        <trans-unit id="a33e8692c452d874d4895193f46dd7917c2c3082" translate="yes" xml:space="preserve">
          <source>The column map is used in the case to get real column name</source>
          <target state="translated">在案例中使用列图来获得真实的列名。</target>
        </trans-unit>
        <trans-unit id="d4fbb33db4dfe92b8516d704ce0f4e73bc091263" translate="yes" xml:space="preserve">
          <source>The column&amp;rsquo;s length if any</source>
          <target state="translated">列的长度（如果有）</target>
        </trans-unit>
        <trans-unit id="f21c33ab37e48ce86c42f76a057a6e8c4917c18f" translate="yes" xml:space="preserve">
          <source>The column&amp;rsquo;s type (string, integer, decimal, boolean)</source>
          <target state="translated">列的类型（字符串，整数，十进制，布尔值）</target>
        </trans-unit>
        <trans-unit id="240b986000f547b691054ee0ddf1eb97f650dfa1" translate="yes" xml:space="preserve">
          <source>The command &amp;ldquo;create-controller&amp;rdquo; generates controller skeleton structures. It&amp;rsquo;s important to invoke this command inside a directory that already has a Phalcon project.</source>
          <target state="translated">命令&amp;ldquo; create-controller&amp;rdquo;生成控制器骨架结构。在已经有Phalcon项目的目录中调用此命令很重要。</target>
        </trans-unit>
        <trans-unit id="22758567a992d04bd6d3bec79b5c5d086494ffe5" translate="yes" xml:space="preserve">
          <source>The compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:</source>
          <target state="translated">编译路径是根据上述选项生成的,如果开发者希望完全自由定义编译路径,可以使用一个匿名函数来生成,这个函数接收模板在views目录下的相对路径。下面的例子展示了如何动态地改变编译路径。</target>
        </trans-unit>
        <trans-unit id="0a2f323cf07e70e7303548eedb3c6cc854c97c55" translate="yes" xml:space="preserve">
          <source>The component &lt;a href=&quot;../api/phalcon_translate&quot;&gt;&lt;em&gt;Phalcon\Translate&lt;/em&gt;&lt;/a&gt; aids in creating multilingual applications. Applications using this component, display content in different languages, based on the user&amp;rsquo;s chosen language supported by the application.</source>
          <target state="translated">&lt;a href=&quot;../api/phalcon_translate&quot;&gt;&lt;em&gt;Phalcon \ Translate&lt;/em&gt;&lt;/a&gt;组件有助于创建多语言应用程序。使用此组件的应用程序将根据应用程序支持的用户选择的语言，以不同的语言显示内容。</target>
        </trans-unit>
        <trans-unit id="037f3a0d2dcaf8618f010ebbb25b1032b4480e8f" translate="yes" xml:space="preserve">
          <source>The component can now simply access the service it requires when it needs it, if it does not require a service it is not even initialized, saving resources. The component is now highly decoupled. For example, we can replace the manner in which connections are created, their behavior or any other aspect of them and that would not affect the component.</source>
          <target state="translated">现在组件只需在需要的时候访问它所需要的服务即可,如果不需要服务,甚至不需要初始化,节省了资源。现在组件是高度解耦的。例如,我们可以替换创建连接的方式、行为或其他任何方面,而这不会影响组件。</target>
        </trans-unit>
        <trans-unit id="26cd35b196908d68d844d7d8503bb274711d34a4" translate="yes" xml:space="preserve">
          <source>The controller &amp;lsquo;PostsController&amp;rsquo; might look like this:</source>
          <target state="translated">控制器&amp;ldquo; PostsController&amp;rdquo;可能看起来像这样：</target>
        </trans-unit>
        <trans-unit id="62e98a9d7859dd3d36707fa5bfb5a60a1a54d28e" translate="yes" xml:space="preserve">
          <source>The controller classes must have the suffix &amp;ldquo;Controller&amp;rdquo; and controller actions must have the suffix &amp;ldquo;Action&amp;rdquo;. If you access the application from your browser, you should see something like this:</source>
          <target state="translated">控制器类的后缀必须为&amp;ldquo; Controller&amp;rdquo;，控制器动作的后缀必须为&amp;ldquo; Action&amp;rdquo;。如果从浏览器访问该应用程序，则应看到类似以下内容的内容：</target>
        </trans-unit>
        <trans-unit id="27bc7f79ecc8f708a6973080cbae902f382666c1" translate="yes" xml:space="preserve">
          <source>The controller looks like:</source>
          <target state="translated">控制器看起来像。</target>
        </trans-unit>
        <trans-unit id="695080a458c8dc299a21674792e6db9d7d25c88e" translate="yes" xml:space="preserve">
          <source>The controllers provide the &amp;ldquo;flow&amp;rdquo; between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.</source>
          <target state="translated">控制器提供模型和视图之间的&amp;ldquo;流程&amp;rdquo;。控制器负责处理来自Web浏览器的传入请求，询问数据模型，并将该数据传递给视图以进行呈现。</target>
        </trans-unit>
        <trans-unit id="a043bde7e802ebf9e0287f39524cf9fa525fbb23" translate="yes" xml:space="preserve">
          <source>The controllers provide the &amp;ldquo;flow&amp;rdquo; between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation. &lt;a href=&quot;controllers&quot;&gt;&lt;em&gt;Learn more&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">控制器提供模型和视图之间的&amp;ldquo;流程&amp;rdquo;。控制器负责处理来自Web浏览器的传入请求，询问数据模型，并将该数据传递给视图以进行呈现。&lt;a href=&quot;controllers&quot;&gt;&lt;em&gt;学到更多&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8ec1481b94a60e812c15283d7aeaa12db79cc8c" translate="yes" xml:space="preserve">
          <source>The core of all the work of the controller occurs when handle() is invoked:</source>
          <target state="translated">当handle()被调用时,控制器的所有工作的核心就发生了。</target>
        </trans-unit>
        <trans-unit id="b75761bd813f44788ddffff0dbe11c55ec23f29c" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (0 indexed)</source>
          <target state="translated">循环的当前迭代。(0索引)</target>
        </trans-unit>
        <trans-unit id="2ae957376dd8bf52f87cded346b35444762a2644" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (1 indexed)</source>
          <target state="translated">循环的当前迭代。(1个索引)</target>
        </trans-unit>
        <trans-unit id="e27ba8c82917a6694e416f728ca89e006ddad051" translate="yes" xml:space="preserve">
          <source>The current page</source>
          <target state="translated">当前页面</target>
        </trans-unit>
        <trans-unit id="265fe3c06f41ac0ab4c6a5bf9a0d86a4dde10c06" translate="yes" xml:space="preserve">
          <source>The data added to the session (&lt;code&gt;$this-&amp;gt;session&lt;/code&gt;) are available throughout the application, while persistent (&lt;code&gt;$this-&amp;gt;persistent&lt;/code&gt;) can only be accessed in the scope of the current class.</source>
          <target state="translated">添加到会话（ &lt;code&gt;$this-&amp;gt;session&lt;/code&gt; ）的数据在整个应用程序中都可用，而持久性（ &lt;code&gt;$this-&amp;gt;persistent&lt;/code&gt; ）只能在当前类的范围内访问。</target>
        </trans-unit>
        <trans-unit id="e31876e03480aa2decc195335f0bd9132b1635c0" translate="yes" xml:space="preserve">
          <source>The data delete is similar to update. The &amp;ldquo;id&amp;rdquo; passed as parameter indicates what robot must be deleted:</source>
          <target state="translated">数据删除类似于更新。作为参数传递的&amp;ldquo; id&amp;rdquo;表示必须删除的机器人：</target>
        </trans-unit>
        <trans-unit id="31af5c90088ff139199cd6f1b57cbc89a1e15aff" translate="yes" xml:space="preserve">
          <source>The data found is bound to the form by passing the model as first parameter. Thanks to this, the user can change any value and then sent it back to the database through to the &amp;ldquo;save&amp;rdquo; action:</source>
          <target state="translated">通过将模型作为第一个参数传递，将找到的数据绑定到表单。因此，用户可以更改任何值，然后将其发送回数据库，直到执行&amp;ldquo;保存&amp;rdquo;操作：</target>
        </trans-unit>
        <trans-unit id="9dac5debd217f13ac2afe1ea766dd5d3fae5c641" translate="yes" xml:space="preserve">
          <source>The data update is similar to insertion. The &amp;ldquo;id&amp;rdquo; passed as parameter indicates what robot must be updated:</source>
          <target state="translated">数据更新类似于插入。作为参数传递的&amp;ldquo; id&amp;rdquo;表示必须更新哪些机器人：</target>
        </trans-unit>
        <trans-unit id="47b66defe420a397d1f8646e9628469ad4fb127f" translate="yes" xml:space="preserve">
          <source>The default component must be replaced in the service container:</source>
          <target state="translated">必须在服务容器中替换默认组件。</target>
        </trans-unit>
        <trans-unit id="d8e9847c195df851fa955bb534e7c7bb655507e5" translate="yes" xml:space="preserve">
          <source>The delimiters are dynamically translated to valid delimiters depending on the database system where the application is currently running on.</source>
          <target state="translated">根据应用程序当前运行的数据库系统,定界符被动态转换为有效的定界符。</target>
        </trans-unit>
        <trans-unit id="8ecf8153b66916aa27a468057e37f66328bf67a0" translate="yes" xml:space="preserve">
          <source>The developer also has the option of define the metadata manually. This strategy overrides any strategy set in the metadata manager. New columns added/modified/removed to/from the mapped table must be added/modified/removed also for everything to work properly.</source>
          <target state="translated">开发者还可以选择手动定义元数据。这个策略会覆盖元数据管理器中设置的任何策略。添加/修改/删除到/从映射表中的新列也必须添加/修改/删除,这样一切才能正常工作。</target>
        </trans-unit>
        <trans-unit id="56fd8a0a0599b40cd24a6a9dc32384edcf560fab" translate="yes" xml:space="preserve">
          <source>The dispatch loop allows us to forward the execution flow to another controller/action. This is very useful to check if the user can access to certain options, redirect users to other screens or simply reuse code.</source>
          <target state="translated">派遣循环允许我们将执行流程转发给另一个控制器/动作。这对于检查用户是否可以访问某些选项、将用户重定向到其他屏幕或简单地重用代码非常有用。</target>
        </trans-unit>
        <trans-unit id="acbcc5d4d02d8ab92f318c20169bc48bbb28e29c" translate="yes" xml:space="preserve">
          <source>The dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the previous example only one action was executed. Now we&amp;rsquo;ll see how the &lt;code&gt;forward()&lt;/code&gt; method can provide a more complex flow of operation in the dispatch loop, by forwarding execution to a different controller/action.</source>
          <target state="translated">分派循环将在分派器中执行，直到没有剩余要执行的动作为止。在前面的示例中，仅执行了一个动作。现在，我们将看到 &lt;code&gt;forward()&lt;/code&gt; 方法如何通过将执行转发给其他控制器/动作来提供更复杂的操作流程。</target>
        </trans-unit>
        <trans-unit id="76886823153907bf40544494702447e5e1a325cd" translate="yes" xml:space="preserve">
          <source>The dispatcher will look for a &amp;ldquo;PostsController&amp;rdquo; and its action &amp;ldquo;showAction&amp;rdquo;. A simple controller file for this example:</source>
          <target state="translated">调度程序将查找&amp;ldquo; PostsController&amp;rdquo;及其动作&amp;ldquo; showAction&amp;rdquo;。此示例的简单控制器文件：</target>
        </trans-unit>
        <trans-unit id="4ef74f56eabf997798500112d0972ca4617268dc" translate="yes" xml:space="preserve">
          <source>The easier way to make a model react to events is to implement a method with the same name of the event in the model&amp;rsquo;s class:</source>
          <target state="translated">使模型对事件做出反应的更简单方法是在模型的类中实现与事件名称相同的方法：</target>
        </trans-unit>
        <trans-unit id="71cbbae88315b0023f0684d64734ca4cfbdf1c29" translate="yes" xml:space="preserve">
          <source>The easiest way to achieve this is by adding a static method to the model that chooses the right cache to be used:</source>
          <target state="translated">最简单的方法就是在模型中添加一个静态方法,选择合适的缓存来实现。</target>
        </trans-unit>
        <trans-unit id="782c40dc49cc31f80a5496eee22fdcbd14e30824" translate="yes" xml:space="preserve">
          <source>The elements added to the cache are uniquely identified by a key. In the case of the File backend, the key is the actual filename. To retrieve data from the cache, we just have to call it using the unique key. If the key does not exist, the get method will return null.</source>
          <target state="translated">添加到缓存中的元素由一个密钥唯一标识。在文件后端的情况下,键是实际的文件名。要从缓存中检索数据,我们只需要使用唯一的键来调用它。如果key不存在,get方法将返回null。</target>
        </trans-unit>
        <trans-unit id="375a36e5f73924eaf00aa8d999e1dbf8d1b2eb03" translate="yes" xml:space="preserve">
          <source>The else clause is also supported:</source>
          <target state="translated">也支持 else 子句。</target>
        </trans-unit>
        <trans-unit id="11a863ac19bdc8bc671da5a6a86c18026b14fec4" translate="yes" xml:space="preserve">
          <source>The empty index action gives the clean pass to a view with the form definition (app/views/signup/index.phtml):</source>
          <target state="translated">空索引动作给了一个带有表单定义的视图(app/views/signup/index.phtml)干净的通行证。</target>
        </trans-unit>
        <trans-unit id="f6da63b6908de3f65ab9afe52a33c6e281276dd2" translate="yes" xml:space="preserve">
          <source>The events manager can collect every response returned by every notified listener. This example explains how it works:</source>
          <target state="translated">事件管理器可以收集每个通知的监听器返回的每个响应。这个例子解释了它是如何工作的。</target>
        </trans-unit>
        <trans-unit id="0044a2250ff99f1838c14513d0181c4b476493f5" translate="yes" xml:space="preserve">
          <source>The example below demonstrates how to define names to route parameters:</source>
          <target state="translated">下面的例子说明了如何为路由参数定义名称。</target>
        </trans-unit>
        <trans-unit id="dd7eaf10308a74f9be5c1bd38d199121a992c831" translate="yes" xml:space="preserve">
          <source>The example below shows how to change the log format:</source>
          <target state="translated">下面的例子显示了如何改变日志格式。</target>
        </trans-unit>
        <trans-unit id="a87f6f459009a4d8546d700de51d951e839e7c86" translate="yes" xml:space="preserve">
          <source>The example below shows how to create a log and add messages to it:</source>
          <target state="translated">下面的例子展示了如何创建一个日志并添加消息。</target>
        </trans-unit>
        <trans-unit id="3d107c5010f6e8c180cccd434fe2d8fce60f9654" translate="yes" xml:space="preserve">
          <source>The example given above performs a validation using the built-in validator &amp;ldquo;InclusionIn&amp;rdquo;. It checks the value of the field &amp;ldquo;type&amp;rdquo; in a domain list. If the value is not included in the method, then the validator will fail and return false.</source>
          <target state="translated">上面给出的示例使用内置的验证器&amp;ldquo; InclusionIn&amp;rdquo;执行验证。它检查域列表中字段&amp;ldquo;类型&amp;rdquo;的值。如果该方法未包含该值，则验证器将失败并返回false。</target>
        </trans-unit>
        <trans-unit id="0d944ebff41e551dc367881730a51e215f7b687e" translate="yes" xml:space="preserve">
          <source>The expiration date is one of the easiest and most effective ways to cache a page in the client (browser). Starting from the current date we add the amount of time the page will be stored in the browser cache. Until this date expires no new content will be requested from the server:</source>
          <target state="translated">过期日期是在客户端(浏览器)缓存页面最简单有效的方法之一。从当前日期开始,我们添加页面在浏览器缓存中存储的时间量。在这个日期到期之前,不会从服务器上请求新的内容。</target>
        </trans-unit>
        <trans-unit id="84350c2d6ed57558903fa70dd517a921495b2125" translate="yes" xml:space="preserve">
          <source>The field &amp;ldquo;price&amp;rdquo; is printed by its formatted using a Volt filter:</source>
          <target state="translated">&amp;ldquo;价格&amp;rdquo;字段是使用伏特过滤器格式化的：</target>
        </trans-unit>
        <trans-unit id="7924fb45026d39b023bc91ded7d7f81fca13465a" translate="yes" xml:space="preserve">
          <source>The field is an auto_increment/serial column</source>
          <target state="translated">该字段是一个自动递增/序列列。</target>
        </trans-unit>
        <trans-unit id="4040102c2d612c234b07faa096ee296ae2a16509" translate="yes" xml:space="preserve">
          <source>The final output will be the following:</source>
          <target state="translated">最后的输出将是以下内容。</target>
        </trans-unit>
        <trans-unit id="4f50e5975bcb7c034434ae156ec3a42bf4c365b4" translate="yes" xml:space="preserve">
          <source>The first &amp;ldquo;handler&amp;rdquo; that we will implement is which by method GET returns all available robots. Let&amp;rsquo;s use PHQL to perform this simple query returning the results as JSON:</source>
          <target state="translated">我们将实现的第一个&amp;ldquo;处理程序&amp;rdquo;是GET方法返回所有可用的机械手。让我们使用PHQL执行此简单查询，以JSON格式返回结果：</target>
        </trans-unit>
        <trans-unit id="1117bbb377915135371644cc4e0c10d28e69d569" translate="yes" xml:space="preserve">
          <source>The first example shows how to convert native arrays into &lt;a href=&quot;../api/phalcon_config&quot;&gt;&lt;em&gt;Phalcon\Config&lt;/em&gt;&lt;/a&gt; objects. This option offers the best performance since no files are read during this request.</source>
          <target state="translated">第一个示例显示了如何将本机数组转换为&lt;a href=&quot;../api/phalcon_config&quot;&gt;&lt;em&gt;Phalcon \ Config&lt;/em&gt;&lt;/a&gt;对象。此选项提供最佳性能，因为在此请求期间未读取任何文件。</target>
        </trans-unit>
        <trans-unit id="d2219d950a500ff3778fc9dcc313112ee94e85ff" translate="yes" xml:space="preserve">
          <source>The first file you need to create is the bootstrap file. This file is very important; since it serves as the base of your application, giving you control of all aspects of it. In this file you can implement initialization of components as well as application behavior.</source>
          <target state="translated">你需要创建的第一个文件是bootstrap文件。这个文件非常重要,因为它是你的应用程序的基础,让你控制它的所有方面。在这个文件中,你可以实现组件的初始化以及应用程序的行为。</target>
        </trans-unit>
        <trans-unit id="725475d9c0d5071783fbc7945759bcf370b06c0e" translate="yes" xml:space="preserve">
          <source>The first is create a custom builder, so we can generate a totally customized query:</source>
          <target state="translated">首先是创建一个自定义构建器,这样我们就可以生成一个完全自定义的查询。</target>
        </trans-unit>
        <trans-unit id="3af785d8925068e11b1d45eaf8a8df5f5ab0b2aa" translate="yes" xml:space="preserve">
          <source>The first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.</source>
          <target state="translated">第一个参数表示关系中使用的本地模型的字段;第二个参数表示被引用模型的名称,第三个参数表示被引用模型中的字段名称。你也可以使用数组来定义关系中的多个字段。</target>
        </trans-unit>
        <trans-unit id="31f8c9f176d9fb9f55754c986ba99a409a8adda0" translate="yes" xml:space="preserve">
          <source>The first parameter of the &lt;code&gt;add()&lt;/code&gt; method is the pattern you want to match and, optionally, the second parameter is a set of paths. In this case, if the URI is /admin/users/my-profile, then the &amp;ldquo;users&amp;rdquo; controller with its action &amp;ldquo;profile&amp;rdquo; will be executed. It&amp;rsquo;s important to remember that the router does not execute the controller and action, it only collects this information to inform the correct component (ie. &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt;) that this is the controller/action it should execute.</source>
          <target state="translated">&lt;code&gt;add()&lt;/code&gt; 方法的第一个参数是您要匹配的模式，第二个参数（可选）是一组路径。在这种情况下，如果URI为/ admin / users / my-profile，则将执行带有操作&amp;ldquo; profile&amp;rdquo;的&amp;ldquo; users&amp;rdquo;控制器。重要的是要记住，路由器不会执行控制器和操作，它只会收集此信息以通知正确的组件（即&lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher&lt;/em&gt;&lt;/a&gt;）这是它应执行的控制器/操作。</target>
        </trans-unit>
        <trans-unit id="cde287917aac27b3e22cbb3b304b4b95b633ba88" translate="yes" xml:space="preserve">
          <source>The first part that we find in the bootstrap is registering an autoloader. This will be used to load classes as controllers and models in the application. For example we may register one or more directories of controllers increasing the flexibility of the application. In our example we have used the component &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">我们在引导程序中找到的第一部分是注册自动加载器。这将用于在应用程序中将类作为控制器和模型加载。例如，我们可以注册一个或多个控制器目录，以增加应用程序的灵活性。在我们的示例中，我们使用了组件&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a70e98b10b64a7d236cca419dd88c5eba70add4d" translate="yes" xml:space="preserve">
          <source>The first validator has the option &amp;lsquo;cancelOnFail&amp;rsquo; with a value of true, therefore if that validator fails the remaining validators in the chain are not executed.</source>
          <target state="translated">第一个验证器的选项'cancelOnFail'的值为true，因此，如果该验证器失败，则不会执行链中其余的验证器。</target>
        </trans-unit>
        <trans-unit id="8c192661ae891c40c2c4dc6aa2d23784b81aadec" translate="yes" xml:space="preserve">
          <source>The following HTML is generated:</source>
          <target state="translated">生成以下HTML。</target>
        </trans-unit>
        <trans-unit id="6a79a5e08d671144eb20ac02ddd2c6c35c70e4e7" translate="yes" xml:space="preserve">
          <source>The following HTML will be produced.</source>
          <target state="translated">将产生以下HTML。</target>
        </trans-unit>
        <trans-unit id="c7b68eee79f7970464df5d16275110a11055a7ca" translate="yes" xml:space="preserve">
          <source>The following HTML will generated:</source>
          <target state="translated">将生成以下HTML。</target>
        </trans-unit>
        <trans-unit id="c37ebf97320060675dab01784957db49ad95ac12" translate="yes" xml:space="preserve">
          <source>The following NoSQL databases are supported:</source>
          <target state="translated">支持以下NoSQL数据库。</target>
        </trans-unit>
        <trans-unit id="36a17f56d5a7eff4dd2c7092e033ba6305566528" translate="yes" xml:space="preserve">
          <source>The following PHP is generated:</source>
          <target state="translated">生成以下PHP。</target>
        </trans-unit>
        <trans-unit id="056ffe62284c716da0acd06843f2f476427886f4" translate="yes" xml:space="preserve">
          <source>The following annotations are supported:</source>
          <target state="translated">支持以下注释:</target>
        </trans-unit>
        <trans-unit id="7103263c3de1403ce6e5486157265ec887bd8932" translate="yes" xml:space="preserve">
          <source>The following are examples of custom routes:</source>
          <target state="translated">以下是自定义路线的例子。</target>
        </trans-unit>
        <trans-unit id="c476eb1478af5a0ac4719ae3a2656de74d990174" translate="yes" xml:space="preserve">
          <source>The following are potential configurations you can use to setup Apache with Phalcon. These notes are primarily focused on the configuration of the mod_rewrite module allowing to use friendly URLs and the &lt;a href=&quot;routing&quot;&gt;&lt;em&gt;router component&lt;/em&gt;&lt;/a&gt;. Commonly an application has the following structure:</source>
          <target state="translated">以下是可用于通过Phalcon设置Apache的潜在配置。这些说明主要集中在mod_rewrite模块的配置上，该模块允许使用友好的URL和&lt;a href=&quot;routing&quot;&gt;&lt;em&gt;路由器组件&lt;/em&gt;&lt;/a&gt;。通常，应用程序具有以下结构：</target>
        </trans-unit>
        <trans-unit id="46b684bf814f4fd787f7b792c7356759543c503a" translate="yes" xml:space="preserve">
          <source>The following are potential configurations you can use to setup nginx with Phalcon:</source>
          <target state="translated">以下是你可以使用Phalcon设置nginx的潜在配置。</target>
        </trans-unit>
        <trans-unit id="96bbbbb8367c85dccb708eb013f3f45dae5b3d13" translate="yes" xml:space="preserve">
          <source>The following are the built-in filters provided by this component:</source>
          <target state="translated">以下是该组件提供的内置过滤器。</target>
        </trans-unit>
        <trans-unit id="1a2471eac57641cd6d1feedf39e502784d1dcbe4" translate="yes" xml:space="preserve">
          <source>The following behavior is an example, it implements the Blameable behavior which helps identify the user that is performed operations over a model:</source>
          <target state="translated">下面的行为是一个例子,它实现了Blameable行为,有助于识别对模型进行操作的用户。</target>
        </trans-unit>
        <trans-unit id="938575ec8e7fa75440eee1b86a632a24fd89a8d7" translate="yes" xml:space="preserve">
          <source>The following built-in behaviors are provided by the framework:</source>
          <target state="translated">框架提供了以下内置行为。</target>
        </trans-unit>
        <trans-unit id="1096011c0794f94e3f2405fd01e25c73c8d86476" translate="yes" xml:space="preserve">
          <source>The following built-in functions are available in Volt:</source>
          <target state="translated">Volt的内置功能如下。</target>
        </trans-unit>
        <trans-unit id="59540566cedd2e58b9d5ddd1accc3f81a5d74db9" translate="yes" xml:space="preserve">
          <source>The following built-in tests are available in Volt:</source>
          <target state="translated">以下是Volt的内置测试。</target>
        </trans-unit>
        <trans-unit id="96828b04cfe484f6490ca9e7f3ee81a83d0e7b79" translate="yes" xml:space="preserve">
          <source>The following code is generated by the script:</source>
          <target state="translated">下面的代码是由脚本生成的。</target>
        </trans-unit>
        <trans-unit id="e89ce9c96530816ce65e4ec43b256535c9bb7a06" translate="yes" xml:space="preserve">
          <source>The following comparison operators are available:</source>
          <target state="translated">以下是比较运算符:</target>
        </trans-unit>
        <trans-unit id="02d49a4a892062eac28318a072e40c0ef6738c92" translate="yes" xml:space="preserve">
          <source>The following compilation events are available to be implemented in extensions:</source>
          <target state="translated">以下编译事件可在扩展中实现。</target>
        </trans-unit>
        <trans-unit id="888d47dd60f828aafca5323807c544a7340ab904" translate="yes" xml:space="preserve">
          <source>The following events are available to define custom business rules that can be executed when a delete operation is performed:</source>
          <target state="translated">以下事件可用于定义执行删除操作时可执行的自定义业务规则。</target>
        </trans-unit>
        <trans-unit id="8e6144552c3b65547ee5055192e3963dd1922146" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to attach listeners to this component:</source>
          <target state="translated">下面的例子演示了如何将监听器附加到这个组件上。</target>
        </trans-unit>
        <trans-unit id="e2f6ffb0c750c58c9db09200af7e5cfcdc9a230e" translate="yes" xml:space="preserve">
          <source>The following example explains how to create additional validators for this component:</source>
          <target state="translated">下面的例子解释了如何为该组件创建额外的验证器。</target>
        </trans-unit>
        <trans-unit id="35c19ec7e65f13d0c065afa15b52977bcef322ea" translate="yes" xml:space="preserve">
          <source>The following example implements &lt;a href=&quot;http://xdebug.org/docs/stack_trace&quot;&gt;xdebug_print_function_stack&lt;/a&gt; to stop the execution and generate a backtrace:</source>
          <target state="translated">以下示例实现&lt;a href=&quot;http://xdebug.org/docs/stack_trace&quot;&gt;xdebug_print_function_stack&lt;/a&gt;以停止执行并生成回溯：</target>
        </trans-unit>
        <trans-unit id="d9fa4125661936b8ae0faaa2ef9333b634ce57d7" translate="yes" xml:space="preserve">
          <source>The following example implements an event that validates the year cannot be smaller than 0 on update or insert:</source>
          <target state="translated">下面的例子实现了在更新或插入时验证年份不能小于0的事件。</target>
        </trans-unit>
        <trans-unit id="4ed79d99f2a2aa3f62168c130d23ae90f66c1894" translate="yes" xml:space="preserve">
          <source>The following example is a bit lengthy, but it attempts to explain why Phalcon uses service location and dependency injection. First, let&amp;rsquo;s pretend we are developing a component called SomeComponent. This performs a task that is not important now. Our component has some dependency that is a connection to a database.</source>
          <target state="translated">下面的示例有点冗长，但是它试图解释为什么Phalcon使用服务位置和依赖注入。首先，让我们假设我们正在开发一个名为SomeComponent的组件。这执行的任务现在并不重要。我们的组件具有某种依赖关系，即与数据库的连接。</target>
        </trans-unit>
        <trans-unit id="3d4fc6fe3d1daa7b5df27aa839e675ff9a728bc0" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a plugin that clean/repair the HTML produced by the render process using &lt;a href=&quot;http://www.php.net/manual/en/book.tidy.php&quot;&gt;Tidy&lt;/a&gt;:</source>
          <target state="translated">以下示例显示了如何创建一个插件，该插件使用&lt;a href=&quot;http://www.php.net/manual/en/book.tidy.php&quot;&gt;Tidy&lt;/a&gt;清理/修复渲染过程产生的HTML ：</target>
        </trans-unit>
        <trans-unit id="eea363145d813c8f6f5ba5b208fe99b52e36dac5" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a table:</source>
          <target state="translated">下面的例子显示了如何创建一个表。</target>
        </trans-unit>
        <trans-unit id="016ee7af4c2c1178ed33fbeeef80097407e78e47" translate="yes" xml:space="preserve">
          <source>The following example shows how to define the metadata manually:</source>
          <target state="translated">下面的例子显示了如何手动定义元数据。</target>
        </trans-unit>
        <trans-unit id="71efad2e6b7be51cc3bf2aa1fe4c0b65f74bfa8e" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement a controller that use namespaces:</source>
          <target state="translated">下面的例子展示了如何实现一个使用命名空间的控制器。</target>
        </trans-unit>
        <trans-unit id="d2f8cebee311e0944cc8282a092650a4aefd8928" translate="yes" xml:space="preserve">
          <source>The following example shows how to minify a collection of resources:</source>
          <target state="translated">下面的例子展示了如何对资源集合进行最小化。</target>
        </trans-unit>
        <trans-unit id="d43e47ddc225405cc248a3ee3d2cea285dfca6bb" translate="yes" xml:space="preserve">
          <source>The following example shows how to use it:</source>
          <target state="translated">下面的例子说明了如何使用它。</target>
        </trans-unit>
        <trans-unit id="a5567bb1e6209095e27db87f2b146796587de8f8" translate="yes" xml:space="preserve">
          <source>The following example shows how to use operators:</source>
          <target state="translated">下面的例子展示了如何使用运算符。</target>
        </trans-unit>
        <trans-unit id="5942e1b1a8541035a9e380c1f55d4da5f5fc297f" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this component in stand-alone mode:</source>
          <target state="translated">下面的例子展示了如何在独立模式下使用该组件。</target>
        </trans-unit>
        <trans-unit id="3de69a9ffbce252a9645f5a616b7f8dc1a564784" translate="yes" xml:space="preserve">
          <source>The following example shows how to write a jQuery &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;ajax request&lt;/a&gt; using a URL with the framework conventions. The service &amp;ldquo;url&amp;rdquo; (usually &lt;a href=&quot;url&quot;&gt;&lt;em&gt;Phalcon\Mvc\Url&lt;/em&gt;&lt;/a&gt;) is injected in the view by accessing a property with the same name:</source>
          <target state="translated">下面的示例演示如何使用带有框架约定的URL 编写jQuery &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;ajax请求&lt;/a&gt;。通过访问具有相同名称的属性，将服务&amp;ldquo; url&amp;rdquo;（通常为&lt;a href=&quot;url&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Url&lt;/em&gt;&lt;/a&gt;）注入视图中：</target>
        </trans-unit>
        <trans-unit id="c2d8e80c423e8866859e2fe9a70261b0e8d8044e" translate="yes" xml:space="preserve">
          <source>The following example shows its basic usage:</source>
          <target state="translated">下面的例子显示了它的基本用法。</target>
        </trans-unit>
        <trans-unit id="7d5f9fcdd984cdd94d67c177a6c833b0cfab8a88" translate="yes" xml:space="preserve">
          <source>The following examples show how to use aggregations in PHQL:</source>
          <target state="translated">下面的例子展示了如何在PHQL中使用聚合。</target>
        </trans-unit>
        <trans-unit id="3ced74a6bbe4ef2f27f066f9fe0cb655bf55a495" translate="yes" xml:space="preserve">
          <source>The following examples show the basic use of each adapter:</source>
          <target state="translated">下面的例子显示了每个适配器的基本用途。</target>
        </trans-unit>
        <trans-unit id="08aa594dbd84d098b5621651c51b29acbd6bce12" translate="yes" xml:space="preserve">
          <source>The following file structure is more than enough:</source>
          <target state="translated">下面的文件结构已经足够了。</target>
        </trans-unit>
        <trans-unit id="84946c4972b2747bf1dfff3f55bce9afc794748b" translate="yes" xml:space="preserve">
          <source>The following is the list of available built-in filters in Volt:</source>
          <target state="translated">以下是Volt中可用的内置过滤器列表。</target>
        </trans-unit>
        <trans-unit id="1ad06e84018c730b225ae736038842ca2842b3c4" translate="yes" xml:space="preserve">
          <source>The following literals are supported:</source>
          <target state="translated">支持以下字数:</target>
        </trans-unit>
        <trans-unit id="098d105043969720f5a86e25e7dd4f1b3367ac1e" translate="yes" xml:space="preserve">
          <source>The following middleware events are available:</source>
          <target state="translated">以下是中间件事件。</target>
        </trans-unit>
        <trans-unit id="164b6537d2474a14fef0f85a823ee99233a1f0c1" translate="yes" xml:space="preserve">
          <source>The following operators are available:</source>
          <target state="translated">有以下操作人员:</target>
        </trans-unit>
        <trans-unit id="ad24f899602796ce93c81adbcb154217c8eeedfb" translate="yes" xml:space="preserve">
          <source>The following options are available in Volt:</source>
          <target state="translated">以下选项以伏特为单位提供。</target>
        </trans-unit>
        <trans-unit id="d64a6ebec0366ee471d4004cc231da2091386a0c" translate="yes" xml:space="preserve">
          <source>The following options are available to change the encryption behavior:</source>
          <target state="translated">以下选项可用于更改加密行为。</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">有以下选项:</target>
        </trans-unit>
        <trans-unit id="65824cd3e175d3ab525e3b266ab8d83c89b948ce" translate="yes" xml:space="preserve">
          <source>The following replacement of &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; lacks of a view component making it suitable for Rest APIs:</source>
          <target state="translated">以下&lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Application的&lt;/em&gt;&lt;/a&gt;替换缺少一个视图组件，使其适合于Rest API：</target>
        </trans-unit>
        <trans-unit id="62665cb920f4d4ff7e1f14fed3d0ae0d73b428b3" translate="yes" xml:space="preserve">
          <source>The following route</source>
          <target state="translated">途径如下</target>
        </trans-unit>
        <trans-unit id="f5b64f889ffc2f5de75a44ea60a301ceedc3f2fe" translate="yes" xml:space="preserve">
          <source>The following rules can be used together with Apache to rewrite the URis:</source>
          <target state="translated">以下规则可以和Apache一起使用,重写URis。</target>
        </trans-unit>
        <trans-unit id="ec2bdad2b5d69c3e1d956bda673810b8075735d9" translate="yes" xml:space="preserve">
          <source>The following schema shows 3 tables whose relations will serve us as an example regarding relationships:</source>
          <target state="translated">下面的模式显示了3张表,其关系将作为我们关于关系的例子。</target>
        </trans-unit>
        <trans-unit id="c17907192fac506ad13748546735f0b6aa231cf6" translate="yes" xml:space="preserve">
          <source>The following screencast explains how it works:</source>
          <target state="translated">下面的屏幕直播解释了它是如何工作的。</target>
        </trans-unit>
        <trans-unit id="5a2f49ec85eb7950024bbd531770ef8ed900bf5c" translate="yes" xml:space="preserve">
          <source>The following screencast is a step by step guide to install Phalcon on Windows:</source>
          <target state="translated">下面的截图是一步步指导在Windows上安装Phalcon。</target>
        </trans-unit>
        <trans-unit id="0729818f552eadea9288f705d3306d8f210601b5" translate="yes" xml:space="preserve">
          <source>The following screencast is a step-by-step guide to install Phalcon on Windows:</source>
          <target state="translated">下面的截图是一步步指导在Windows上安装Phalcon。</target>
        </trans-unit>
        <trans-unit id="7499af1d7976c6dc21cdf07d251e55035fda0ff6" translate="yes" xml:space="preserve">
          <source>The following screencast shows a Xdebug session with Phalcon:</source>
          <target state="translated">下面的截图显示了一个使用Phalcon的Xdebug会话。</target>
        </trans-unit>
        <trans-unit id="5f640dcd926218c7155e48c1f08fcc6563e5c45b" translate="yes" xml:space="preserve">
          <source>The following simple form (app/views/session/index.volt) requests the login information. We&amp;rsquo;ve removed some HTML code to make the example more concise:</source>
          <target state="translated">以下简单形式（app / views / session / index.volt）要求登录信息。我们删除了一些HTML代码以使示例更简洁：</target>
        </trans-unit>
        <trans-unit id="9cf04bd229f848b379151a1afc6d846823388f32" translate="yes" xml:space="preserve">
          <source>The form is declared using an object-oriented scheme based on the elements provided by the &lt;a href=&quot;forms&quot;&gt;&lt;em&gt;forms&lt;/em&gt;&lt;/a&gt; component. Every element follows almost the same structure:</source>
          <target state="translated">基于&lt;a href=&quot;forms&quot;&gt;&lt;em&gt;表单&lt;/em&gt;&lt;/a&gt;组件提供的元素，使用面向对象的方案声明&lt;em&gt;表单&lt;/em&gt;。每个元素都遵循几乎相同的结构：</target>
        </trans-unit>
        <trans-unit id="2b6bd48d33ed4aa2020afd5a4279752a5d505408" translate="yes" xml:space="preserve">
          <source>The former is a very simple behavior, but it illustrates how to create a behavior, now let&amp;rsquo;s add this behavior to a model:</source>
          <target state="translated">前者是一个非常简单的行为，但是它说明了如何创建行为，现在让我们将该行为添加到模型中：</target>
        </trans-unit>
        <trans-unit id="5bd297a0e70eb6e873df2410ed0985738ec86674" translate="yes" xml:space="preserve">
          <source>The framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.</source>
          <target state="translated">框架本身或开发者可以注册服务。当组件A需要组件B(或其类的一个实例)来操作时,它可以从容器中请求组件B,而不是创建一个新的实例组件B。</target>
        </trans-unit>
        <trans-unit id="36cda7152738aec75422ab1d382f9660d8d09ada" translate="yes" xml:space="preserve">
          <source>The frontend must always be &lt;a href=&quot;../api/phalcon_cache_frontend_output&quot;&gt;&lt;em&gt;Phalcon\Cache\Frontend\Output&lt;/em&gt;&lt;/a&gt; and the service &amp;lsquo;viewCache&amp;rsquo; must be registered as always open (not shared) in the services container (DI).</source>
          <target state="translated">前端必须始终为&lt;a href=&quot;../api/phalcon_cache_frontend_output&quot;&gt;&lt;em&gt;Phalcon \ Cache \ Frontend \ Output&lt;/em&gt;&lt;/a&gt;，并且服务&amp;ldquo; viewCache&amp;rdquo;必须在服务容器（DI）中注册为始终打开（不共享）。</target>
        </trans-unit>
        <trans-unit id="498c85f259dea9d5fb570f2c0b384b60ef081ca2" translate="yes" xml:space="preserve">
          <source>The function &amp;ldquo;url&amp;rdquo; is available in volt to generate URLs using this component:</source>
          <target state="translated">伏特函数&amp;ldquo; url&amp;rdquo;可用于使用此组件生成URL：</target>
        </trans-unit>
        <trans-unit id="6962aaad50348f91185bb994dd9b134daf948e99" translate="yes" xml:space="preserve">
          <source>The generated HTML by the request will be:</source>
          <target state="translated">请求生成的HTML将是:</target>
        </trans-unit>
        <trans-unit id="1f2ab72292ec548dd9087e02a668a530cb0557a4" translate="yes" xml:space="preserve">
          <source>The generated HTML code displays an anchor (&amp;ldquo;a&amp;rdquo;) HTML tag linking to a new controller:</source>
          <target state="translated">生成的HTML代码显示链接到新控制器的锚点（&amp;ldquo; a&amp;rdquo;）HTML标签：</target>
        </trans-unit>
        <trans-unit id="8888acecfb13dd662e4103fcee00b4dba8d07621" translate="yes" xml:space="preserve">
          <source>The height will automatically be generated to keep the proportions the same; if you specify a height, it will be ignored.</source>
          <target state="translated">高度会自动生成,保持比例不变;如果你指定了高度,则会被忽略。</target>
        </trans-unit>
        <trans-unit id="222271409e67871dcbb654a0245b3d55a21b796a" translate="yes" xml:space="preserve">
          <source>The hook events always receive a first parameter that contains contextual information of the event produced (&lt;code&gt;$event&lt;/code&gt;) and a second one that is the object that produced the event itself (&lt;code&gt;$dispatcher&lt;/code&gt;). It is not mandatory that plugins extend the class &lt;a href=&quot;../api/phalcon_mvc_user_plugin&quot;&gt;&lt;em&gt;Phalcon\Mvc\User\Plugin&lt;/em&gt;&lt;/a&gt;, but by doing this they gain easier access to the services available in the application.</source>
          <target state="translated">钩子事件始终会接收第一个参数，该参数包含所产生的事件的上下文信息（ &lt;code&gt;$event&lt;/code&gt; ），第二个参数是产生事件本身的对象（ &lt;code&gt;$dispatcher&lt;/code&gt; ）。插件不是必须扩展类&lt;a href=&quot;../api/phalcon_mvc_user_plugin&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ User \ Plugin&lt;/em&gt;&lt;/a&gt;，但是通过这样做，它们可以更轻松地访问应用程序中可用的服务。</target>
        </trans-unit>
        <trans-unit id="e7e69c7bc7e6e699f1567b4aca638e41c418d460" translate="yes" xml:space="preserve">
          <source>The hostname can also be passed as a regular expressions:</source>
          <target state="translated">主机名也可以作为正则表达式传递。</target>
        </trans-unit>
        <trans-unit id="11ceebdbda78b846dd3f17cb24463066d0837432" translate="yes" xml:space="preserve">
          <source>The idea is to prevent the form values from being sent outside our application. To fix this, we generate a &lt;a href=&quot;http://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;random nonce&lt;/a&gt; (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:</source>
          <target state="translated">这样做的目的是防止将表单值发送到我们的应用程序之外。为了解决这个问题，我们会在每种表单中生成一个&lt;a href=&quot;http://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;随机的随机数&lt;/a&gt;（令牌），在会话中添加令牌，然后在表单将数据发布回我们的应用程序后，通过将会话中存储的令牌与令牌提交的令牌进行比较，来验证令牌形成：</target>
        </trans-unit>
        <trans-unit id="6e32ccf8ab7341d89b65a2f3eb4aedfd35830453" translate="yes" xml:space="preserve">
          <source>The idea of creating validators is make them reusable between several models. A validator can also be as simple as:</source>
          <target state="translated">创建验证器的想法是让它们在多个模型之间可以重用。一个验证器也可以很简单。</target>
        </trans-unit>
        <trans-unit id="b66d9a811b39ce12ac4f0a78c8a6e309922a4ee3" translate="yes" xml:space="preserve">
          <source>The implementation of this caching mechanism allows us to gain performance by not executing the helper &lt;code&gt;Phalcon\Tag::linkTo()&lt;/code&gt; call whenever this piece of code is called.</source>
          <target state="translated">此缓存机制的实现使我们可以通过在每次调用这段代码时不执行辅助 &lt;code&gt;Phalcon\Tag::linkTo()&lt;/code&gt; 调用来获得性能。</target>
        </trans-unit>
        <trans-unit id="869563099e222665ee75ec7b831c5c774d34807a" translate="yes" xml:space="preserve">
          <source>The important part is:</source>
          <target state="translated">重要的是。</target>
        </trans-unit>
        <trans-unit id="1007d15259f25bfa736a3cd7fea04682b02c0175" translate="yes" xml:space="preserve">
          <source>The independent column map allow you to:</source>
          <target state="translated">独立列图允许你。</target>
        </trans-unit>
        <trans-unit id="4080af0e1013534d8f126c625fd12721cffc74fa" translate="yes" xml:space="preserve">
          <source>The index of the Redis database to use</source>
          <target state="translated">要使用的Redis数据库的索引</target>
        </trans-unit>
        <trans-unit id="5bcbdf81eda918e42cbfa9c24226b9201a959008" translate="yes" xml:space="preserve">
          <source>The kick command applies only to the currently used tube.</source>
          <target state="translated">踢腿命令只适用于当前使用的管子。</target>
        </trans-unit>
        <trans-unit id="ea2e0917867ca07d427a644fa2f01da8f1dea851" translate="yes" xml:space="preserve">
          <source>The last option is to register the class name and its path. This autoloader can be very useful when the folder convention of the project does not allow for easy retrieval of the file using the path and the class name. This is the fastest method of autoloading. However the more your application grows, the more classes/files need to be added to this autoloader, which will effectively make maintenance of the class list very cumbersome and it is not recommended.</source>
          <target state="translated">最后一个选项是注册类名和它的路径。当项目的文件夹惯例不允许使用路径和类名轻松检索文件时,这种自动加载器非常有用。这是最快的自动加载方法。然而随着你的应用程序的增长,需要添加到这个自动加载器的类/文件越多,这将有效地使类列表的维护变得非常繁琐,不推荐使用这种方法。</target>
        </trans-unit>
        <trans-unit id="b7015af822dc3a00792f4a60e43d40f56046c23c" translate="yes" xml:space="preserve">
          <source>The last page in the set of records</source>
          <target state="translated">这组记录的最后一页</target>
        </trans-unit>
        <trans-unit id="ee2118b0047b275c26d109ab538d233a4ffaea11" translate="yes" xml:space="preserve">
          <source>The log generated is below:</source>
          <target state="translated">生成的日志如下。</target>
        </trans-unit>
        <trans-unit id="10ac6817f5099c3c8012aeb58f939a27e4d939c8" translate="yes" xml:space="preserve">
          <source>The loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.</source>
          <target state="translated">该组件的松散耦合设计允许你创建自己的验证器以及框架提供的验证器。</target>
        </trans-unit>
        <trans-unit id="17387fea085091021c6127cd0a6738dcae08adaa" translate="yes" xml:space="preserve">
          <source>The main method is just called, at this point the application doesn&amp;rsquo;t know if there is some matched route</source>
          <target state="translated">只是调用了main方法，此时应用程序不知道是否存在某些匹配的路由</target>
        </trans-unit>
        <trans-unit id="ffa0fb429c966a003cea06335f50f034f15a8485" translate="yes" xml:space="preserve">
          <source>The message itself expected to be logged</source>
          <target state="translated">预计要记录的信息本身</target>
        </trans-unit>
        <trans-unit id="4593fb6d0f8cdd7077829b2ca8dc9c0071bdd490" translate="yes" xml:space="preserve">
          <source>The messages are sent to the handlers in the order they were registered.</source>
          <target state="translated">消息按照登记的顺序发送给处理者。</target>
        </trans-unit>
        <trans-unit id="fe33b3972c61249c5b200feacf61ba6947506674" translate="yes" xml:space="preserve">
          <source>The meta-data is obtained by reading the column descriptions from the database information schema</source>
          <target state="translated">元数据是通过读取数据库信息模式中的列描述获得的。</target>
        </trans-unit>
        <trans-unit id="aaf23f9f172af4939a80bda83acecad0c00b3037" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;render()&lt;/code&gt; accepts an absolute path to the view file and the view parameters set using &lt;code&gt;$this-&amp;gt;view-&amp;gt;setVar()&lt;/code&gt;. You could read or require it when it&amp;rsquo;s necessary.</source>
          <target state="translated">方法 &lt;code&gt;render()&lt;/code&gt; 接受视图文件的绝对路径以及使用 &lt;code&gt;$this-&amp;gt;view-&amp;gt;setVar()&lt;/code&gt; 设置的视图参数。您可以在必要时阅读或要求它。</target>
        </trans-unit>
        <trans-unit id="3bb11de9c5d33808b6bd974a3ff129c0a6421437" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Parts&amp;rdquo; has many &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">模型&amp;ldquo;零件&amp;rdquo;具有许多&amp;ldquo;机器人零件&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="c3919dab3fb9098bb29e1dafc60aa2df00504cb7" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Robots&amp;rdquo; has a relation many-to-many to &amp;ldquo;Parts&amp;rdquo; through &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">模型&amp;ldquo;机器人&amp;rdquo;通过&amp;ldquo;机器人零件&amp;rdquo;与&amp;ldquo;零件&amp;rdquo;具有多对多关系。</target>
        </trans-unit>
        <trans-unit id="3c8678d499ec6ba9faf98a5d27ceb929aad11ca4" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;Robots&amp;rdquo; has many &amp;ldquo;RobotsParts&amp;rdquo;.</source>
          <target state="translated">&amp;ldquo;机器人&amp;rdquo;模型具有许多&amp;ldquo;机器人零件&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="53c43ba7b0c284cb7944f3b7c0b27039d3d5d755" translate="yes" xml:space="preserve">
          <source>The model &amp;ldquo;RobotsParts&amp;rdquo; belongs to both &amp;ldquo;Robots&amp;rdquo; and &amp;ldquo;Parts&amp;rdquo; models as a many-to-one relation.</source>
          <target state="translated">模型&amp;ldquo; RobotsParts&amp;rdquo;属于多对一关系，同时属于&amp;ldquo;机器人&amp;rdquo;和&amp;ldquo;零件&amp;rdquo;模型。</target>
        </trans-unit>
        <trans-unit id="3d6f37701acbe604c98ca7e51f2ffc1a0f6c9798" translate="yes" xml:space="preserve">
          <source>The model RobotParts now maps to &amp;ldquo;toys_robot_parts&amp;rdquo; table. The &lt;code&gt;initialize()&lt;/code&gt; method aids in setting up the model with a custom behavior i.e. a different table.</source>
          <target state="translated">模型RobotParts现在映射到&amp;ldquo; toys_robot_parts&amp;rdquo;表。的 &lt;code&gt;initialize()&lt;/code&gt; 中建立模型，即不同的表自定义行为的方法助剂。</target>
        </trans-unit>
        <trans-unit id="055fbbd518c555cda60a780d640babcfd88a53db" translate="yes" xml:space="preserve">
          <source>The models with their relations could be implemented as follows:</source>
          <target state="translated">模型及其关系可实现如下:</target>
        </trans-unit>
        <trans-unit id="fcfe1b4eb43169359be51314a9e1125f97cd246e" translate="yes" xml:space="preserve">
          <source>The most common place to access the request environment is in an action of a controller. To access the &lt;a href=&quot;../api/phalcon_http_request&quot;&gt;&lt;em&gt;Phalcon\Http\Request&lt;/em&gt;&lt;/a&gt; object from a controller you will need to use the &lt;code&gt;$this-&amp;gt;request&lt;/code&gt; public property of the controller:</source>
          <target state="translated">访问请求环境的最常见位置是控制器的动作。要从控制器访问&lt;a href=&quot;../api/phalcon_http_request&quot;&gt;&lt;em&gt;Phalcon \ Http \ Request&lt;/em&gt;&lt;/a&gt;对象，您将需要使用控制器的 &lt;code&gt;$this-&amp;gt;request&lt;/code&gt; 公共属性：</target>
        </trans-unit>
        <trans-unit id="dec19fbe9072c91403411b1df4b6d19244827b60" translate="yes" xml:space="preserve">
          <source>The most common situation when inserting unsafe data is between HTML tags:</source>
          <target state="translated">在插入不安全数据时,最常见的情况是在HTML标签之间。</target>
        </trans-unit>
        <trans-unit id="de6d0a13cf598b5775bea988393fc547fa336478" translate="yes" xml:space="preserve">
          <source>The most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP using any resource that is not available in the database:</source>
          <target state="translated">过滤数据最有效的方法是设置一些搜索条件,数据库会使用设置在表上的索引来更快的返回数据。Phalcon另外允许你使用PHP使用任何数据库中没有的资源来过滤数据。</target>
        </trans-unit>
        <trans-unit id="655ddaeb1e9988b859ff1555e4af29206ae06a20" translate="yes" xml:space="preserve">
          <source>The next example shows how to use the MySQL now() function as a field value.</source>
          <target state="translated">下一个例子展示了如何使用MySQL的now()函数作为字段值。</target>
        </trans-unit>
        <trans-unit id="300df99f4a40af8520f4d4ed4496f5f4f8c552d5" translate="yes" xml:space="preserve">
          <source>The next example shows you how to sanitize the action parameters within a controller action:</source>
          <target state="translated">下一个例子展示了如何在控制器动作中对动作参数进行消毒。</target>
        </trans-unit>
        <trans-unit id="74445c083ec02da524f934e7b1118f77c26d3249" translate="yes" xml:space="preserve">
          <source>The next page to the current one</source>
          <target state="translated">当前页面的下一页</target>
        </trans-unit>
        <trans-unit id="6889afb145fa237708c104badd5670058c9aaadc" translate="yes" xml:space="preserve">
          <source>The number of items in the source data</source>
          <target state="translated">源数据中的项目数</target>
        </trans-unit>
        <trans-unit id="29c3835e9086427febe1a418ab3f41b581305542" translate="yes" xml:space="preserve">
          <source>The number of items to iterate</source>
          <target state="translated">迭代的项目数</target>
        </trans-unit>
        <trans-unit id="f55c0141f00d125146e625b42450cdd91a9bd7e1" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0 indexed)</source>
          <target state="translated">循环结束后的迭代次数(0为索引)。</target>
        </trans-unit>
        <trans-unit id="e4908293726276d229be0d3d16697517841de110" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1 indexed)</source>
          <target state="translated">循环结束后的迭代次数(1次为索引)</target>
        </trans-unit>
        <trans-unit id="a33c34f4e66cd6c15e09c8c4c91db1004534ed0c" translate="yes" xml:space="preserve">
          <source>The number of pages</source>
          <target state="translated">页数</target>
        </trans-unit>
        <trans-unit id="cd82762e9bab3141dcc703011a704f3a1bce813c" translate="yes" xml:space="preserve">
          <source>The operation will result in the following data in the table:</source>
          <target state="translated">该操作将在表中得到以下数据。</target>
        </trans-unit>
        <trans-unit id="c44226fc1ccbc6d605ec42320f2e660c616c1d61" translate="yes" xml:space="preserve">
          <source>The opposite effect (avoid page caching) is achieved in this way:</source>
          <target state="translated">通过这种方式可以达到相反的效果(避免页面缓存)。</target>
        </trans-unit>
        <trans-unit id="e95ef52f5eb685c92410561b4d9dba6efecf75d8" translate="yes" xml:space="preserve">
          <source>The order that the template engines are defined with &lt;code&gt;Phalcon\Mvc\View::registerEngines()&lt;/code&gt; defines the relevance of execution. If &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; finds two views with the same name but different extensions, it will only render the first one.</source>
          <target state="translated">使用 &lt;code&gt;Phalcon\Mvc\View::registerEngines()&lt;/code&gt; 定义模板引擎的顺序定义了执行的相关性。如果&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt;找到两个名称相同但扩展名不同的视图，则它将仅呈现第一个。</target>
        </trans-unit>
        <trans-unit id="0d9c825d7164f82dca8f22ee53e88a58b646e6d6" translate="yes" xml:space="preserve">
          <source>The parser first checks the syntax of the pass PHQL statement, then builds an intermediate representation of the statement and finally it converts it to the respective SQL dialect of the target RDBMS.</source>
          <target state="translated">解析器首先检查pass PHQL语句的语法,然后建立语句的中间表示,最后它将其转换为目标RDBMS的相应SQL方言。</target>
        </trans-unit>
        <trans-unit id="74337ae4d0d9c7813bad5c0e85d87080041a0182" translate="yes" xml:space="preserve">
          <source>The parser is highly flexible, the following docblock is valid:</source>
          <target state="translated">解析器是非常灵活的,下面的docblock是有效的。</target>
        </trans-unit>
        <trans-unit id="39adb0dc278da7c36d838e17d1aeb0c2a5b1c664" translate="yes" xml:space="preserve">
          <source>The peek commands let the client inspect a job in the system.</source>
          <target state="translated">窥视命令让客户端检查系统中的作业。</target>
        </trans-unit>
        <trans-unit id="9c076accb0f967599bc1c727ac0fa185b9f21d61" translate="yes" xml:space="preserve">
          <source>The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.</source>
          <target state="translated">gettext()的复数版本。有些语言对复数信息有不止一种形式,取决于计数。</target>
        </trans-unit>
        <trans-unit id="f2ef676ee7e587fe7e492969ca86deccb350cd9a" translate="yes" xml:space="preserve">
          <source>The prefix &amp;ldquo;get&amp;rdquo; is used to &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt; related records. Depending on the type of relation it will use &lt;code&gt;find()&lt;/code&gt; or &lt;code&gt;findFirst()&lt;/code&gt;:</source>
          <target state="translated">前缀&amp;ldquo; get&amp;rdquo;用于 &lt;code&gt;find()&lt;/code&gt; 与find（） / &lt;code&gt;findFirst()&lt;/code&gt; 相关的记录。根据关系的类型，它将使用 &lt;code&gt;find()&lt;/code&gt; 或 &lt;code&gt;findFirst()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fdc917719c66e51d0501cc8c3631c511017143ef" translate="yes" xml:space="preserve">
          <source>The previous page to the current one</source>
          <target state="translated">上一页到当前页</target>
        </trans-unit>
        <trans-unit id="9ffd39464e5dda629e4917c6874eb39307098ba9" translate="yes" xml:space="preserve">
          <source>The process of pagination takes place when we need to present big groups of arbitrary data gradually. &lt;code&gt;Phalcon\Paginator&lt;/code&gt; offers a fast and convenient way to split these sets of data into browsable pages.</source>
          <target state="translated">分页的过程发生在我们需要逐步呈现大量任意数据的时候。 &lt;code&gt;Phalcon\Paginator&lt;/code&gt; 提供了一种快速方便的方法来将这些数据集拆分为可浏览的页面。</target>
        </trans-unit>
        <trans-unit id="5c4e9584fd73b0f13cd2b0e07649c16ebb8980fe" translate="yes" xml:space="preserve">
          <source>The produced routes would look like:</source>
          <target state="translated">产生的路线是这样的:</target>
        </trans-unit>
        <trans-unit id="bc4f7a09df206abef1af972172d101ccb163117e" translate="yes" xml:space="preserve">
          <source>The purpose of this component is to intercept the execution of most of the other components of the framework by creating &amp;ldquo;hook points&amp;rdquo;. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component.</source>
          <target state="translated">该组件的目的是通过创建&amp;ldquo;挂钩&amp;rdquo;来拦截框架中大多数其他组件的执行。这些挂钩点使开发人员可以在组件处理过程中获取状态信息，操纵数据或更改执行流程。</target>
        </trans-unit>
        <trans-unit id="6427d1f8cee51c53d914db31e6f0a2bf8751f1db" translate="yes" xml:space="preserve">
          <source>The recently added virtual server must appear at the left bar of the screen. In the &amp;lsquo;Behaviors&amp;rsquo; tab you will see a set of default behaviors for this virtual server. Click the &amp;lsquo;Rule Management&amp;rsquo; button. Remove those labeled as &amp;lsquo;Directory /cherokee_themes&amp;rsquo; and &amp;lsquo;Directory /icons&amp;rsquo;:</source>
          <target state="translated">最近添加的虚拟服务器必须出现在屏幕的左侧栏中。在&amp;ldquo;行为&amp;rdquo;选项卡中，您将看到此虚拟服务器的一组默认行为。点击&amp;ldquo;规则管理&amp;rdquo;按钮。删除标有&amp;ldquo; Directory / cherokee_themes&amp;rdquo;和&amp;ldquo; Directory / icons&amp;rdquo;的标签：</target>
        </trans-unit>
        <trans-unit id="d4050674ebe892a579201b057237751afd7c12a1" translate="yes" xml:space="preserve">
          <source>The referenced table maybe is on another schema or database. This option allows you to define that.</source>
          <target state="translated">被引用的表可能在另一个模式或数据库中。这个选项允许你定义这个问题。</target>
        </trans-unit>
        <trans-unit id="6c41550b95fee4e286b038e5f683c124d82612cd" translate="yes" xml:space="preserve">
          <source>The release command puts a reserved job back into the ready queue (and marks its state as &amp;ldquo;ready&amp;rdquo;) to be run by any client. It is normally used when the job fails because of a transitory error.</source>
          <target state="translated">release命令将保留的作业放回就绪队列（并将其状态标记为&amp;ldquo;就绪&amp;rdquo;）以由任何客户端运行。通常在作业由于暂时性错误而失败时使用。</target>
        </trans-unit>
        <trans-unit id="b3b53263b17bede65278a39c76d8bc83619e518e" translate="yes" xml:space="preserve">
          <source>The request object is a simple value object that is passed between the dispatcher and controller classes. It packages the HTTP request environment.</source>
          <target state="translated">请求对象是一个简单的值对象,在调度器和控制器类之间传递。它封装了HTTP请求环境。</target>
        </trans-unit>
        <trans-unit id="07270402619c1e3fcfcd00b2b14b963a2729e06a" translate="yes" xml:space="preserve">
          <source>The response object is not usually used directly, but is built up before the execution of the action, sometimes - like in an afterDispatch event - it can be useful to access the response directly:</source>
          <target state="translated">响应对象通常不直接使用,而是在执行动作之前建立,有时--比如在afterDispatch事件中--可以直接访问响应。</target>
        </trans-unit>
        <trans-unit id="9b0108c2553b456f6b365fb0890c4d0557156382" translate="yes" xml:space="preserve">
          <source>The result in this case is an object &lt;a href=&quot;../api/phalcon_mvc_model_resultset_complex&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset\Complex&lt;/em&gt;&lt;/a&gt;. This allows access to both complete objects and scalars at once:</source>
          <target state="translated">在这种情况下，结果是对象&lt;a href=&quot;../api/phalcon_mvc_model_resultset_complex&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset \ Complex&lt;/em&gt;&lt;/a&gt;。这允许一次访问完整的对象和标量：</target>
        </trans-unit>
        <trans-unit id="2180157d0c021e7031d14eed7af7fcb68a967448" translate="yes" xml:space="preserve">
          <source>The resulting profile data can be obtained from the listener:</source>
          <target state="translated">由此产生的配置文件数据可以从监听器中获得。</target>
        </trans-unit>
        <trans-unit id="84549226db7bc9e7032c1fb58bcf6f049fc2cf71" translate="yes" xml:space="preserve">
          <source>The router allows you to set hostname constraints, this means that specific routes or a group of routes can be restricted to only match if the route also meets the hostname constraint:</source>
          <target state="translated">路由器允许您设置主机名约束,这意味着可以限制特定路由或一组路由只有在路由也满足主机名约束的情况下才能匹配。</target>
        </trans-unit>
        <trans-unit id="2bea01b20fc829fa30ad08c99566f6901cb13fb9" translate="yes" xml:space="preserve">
          <source>The router component allows you to define routes that are mapped to controllers or handlers that should receive the request. A router simply parses a URI to determine this information. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.</source>
          <target state="translated">路由器组件允许你定义路由,这些路由被映射到应该接收请求的控制器或处理程序。路由器简单地解析URI来确定这些信息。路由器有两种模式:MVC模式和只匹配模式。MVC模式和只匹配模式。第一种模式是处理MVC应用程序的理想选择。</target>
        </trans-unit>
        <trans-unit id="f3c6f628ff825d3b97c91169c0a1f93c3be5fd97" translate="yes" xml:space="preserve">
          <source>The salt is generated using pseudo-random bytes with the PHP&amp;rsquo;s function &lt;a href=&quot;http://php.net/manual/en/function.openssl-random-pseudo-bytes.php&quot;&gt;openssl_random_pseudo_bytes&lt;/a&gt; so is required to have the &lt;a href=&quot;http://php.net/manual/en/book.openssl.php&quot;&gt;openssl&lt;/a&gt; extension loaded.</source>
          <target state="translated">该盐是使用伪随机字节和PHP函数&lt;a href=&quot;http://php.net/manual/en/function.openssl-random-pseudo-bytes.php&quot;&gt;openssl_random_pseudo_bytes生成的，&lt;/a&gt;因此需要加载&lt;a href=&quot;http://php.net/manual/en/book.openssl.php&quot;&gt;openssl&lt;/a&gt;扩展。</target>
        </trans-unit>
        <trans-unit id="5f77ef71dde823162c77d9b38930f98bed08312b" translate="yes" xml:space="preserve">
          <source>The scaffold generator will build several files in your application, along with some folders. Here&amp;rsquo;s a quick overview of what will be generated:</source>
          <target state="translated">支架生成器将在您的应用程序中构建几个文件以及一些文件夹。以下是将要生成的内容的快速概述：</target>
        </trans-unit>
        <trans-unit id="f2fdc450f693256bf8c5e18edd680e2adbc7df94" translate="yes" xml:space="preserve">
          <source>The screencast below shows how to integrate developer tools with the &lt;a href=&quot;http://www.jetbrains.com/phpstorm/&quot;&gt;PhpStorm IDE&lt;/a&gt;. The configuration steps could be easily adapted to other IDEs for PHP.</source>
          <target state="translated">下面的截屏视频显示了如何将开发人员工具与&lt;a href=&quot;http://www.jetbrains.com/phpstorm/&quot;&gt;PhpStorm IDE集成&lt;/a&gt;。配置步骤可以很容易地适应其他PHP的IDE。</target>
        </trans-unit>
        <trans-unit id="b7473aacfc01a21ff682debe2af4ccaab52174a6" translate="yes" xml:space="preserve">
          <source>The searching by name handler would look like:</source>
          <target state="translated">按名称搜索的处理程序是这样的:</target>
        </trans-unit>
        <trans-unit id="db7ee111afbceeca0678b201a7f5d5588c50e683" translate="yes" xml:space="preserve">
          <source>The second parameter defines how the matched parts should bind to the controller/action/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (&lt;code&gt;:controller&lt;/code&gt;) is the controller part of the route, the second the action and so on.</source>
          <target state="translated">第二个参数定义了匹配的部分应如何绑定到控制器/动作/参数。匹配的部分是占位符或子模式，用括号（圆括号）定界。在上面给出的示例中，匹配的第一个子模式（ &lt;code&gt;:controller&lt;/code&gt; ）是路由的控制器部分，第二个子模式是action，依此类推。</target>
        </trans-unit>
        <trans-unit id="a9c2c7856caa748d8385441b00891f00fa7d8050" translate="yes" xml:space="preserve">
          <source>The second parameter of &lt;code&gt;addCss()&lt;/code&gt; and &lt;code&gt;addJs()&lt;/code&gt; says whether the resource is local or not (&lt;code&gt;true&lt;/code&gt; is local, &lt;code&gt;false&lt;/code&gt; is remote). By default, the assets manager will assume the resource is local:</source>
          <target state="translated">&lt;code&gt;addCss()&lt;/code&gt; 和 &lt;code&gt;addJs()&lt;/code&gt; 的第二个参数表示资源是否为本地（ &lt;code&gt;true&lt;/code&gt; 为本地， &lt;code&gt;false&lt;/code&gt; 为远程）。默认情况下，资产管理器将假定资源为本地资源：</target>
        </trans-unit>
        <trans-unit id="2a640fbf902a77e97a110b0e315a02da4aff6f9d" translate="yes" xml:space="preserve">
          <source>The second part that appears in the bootstrap file (public/index.php) is the autoloader:</source>
          <target state="translated">在bootstrap文件(public/index.php)中出现的第二部分是自动加载器。</target>
        </trans-unit>
        <trans-unit id="a1d41c9e55b2d9adc4da93b7bcf273e75f15189b" translate="yes" xml:space="preserve">
          <source>The service &amp;ldquo;response&amp;rdquo; (&lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon\Http\Response&lt;/em&gt;&lt;/a&gt;) is resolved to be passed as the first argument of the constructor, while the second is a boolean value (true) that is passed as it is.</source>
          <target state="translated">服务&amp;ldquo;响应&amp;rdquo;（&lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon \ Http \ Response&lt;/em&gt;&lt;/a&gt;）被解析为作为构造函数的第一个参数传递，而第二个是按原样传递的布尔值（true）。</target>
        </trans-unit>
        <trans-unit id="44c8ff2d1e2a37bdcc5a6d555e627a8cd905b245" translate="yes" xml:space="preserve">
          <source>The service can be registered this way:</source>
          <target state="translated">可以这样注册服务。</target>
        </trans-unit>
        <trans-unit id="f34f8afbb06952201854130020cf7b5d803de79d" translate="yes" xml:space="preserve">
          <source>The session component provides object-oriented wrappers to access session data.</source>
          <target state="translated">会话组件提供了面向对象的包装器来访问会话数据。</target>
        </trans-unit>
        <trans-unit id="45ddc0d19d0ce3e3c88641f9d5c7f19eece5ce72" translate="yes" xml:space="preserve">
          <source>The set of records to be displayed at the current page</source>
          <target state="translated">当前页面要显示的记录集。</target>
        </trans-unit>
        <trans-unit id="68ff5f3943b9220b14c20812acb6444f0c203143" translate="yes" xml:space="preserve">
          <source>The simplest way to generate a model is:</source>
          <target state="translated">最简单的生成模型的方法是。</target>
        </trans-unit>
        <trans-unit id="7169a30e6fcac8a96a81d58ce29b3e996a8a69f5" translate="yes" xml:space="preserve">
          <source>The static method &lt;code&gt;query()&lt;/code&gt; returns a &lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Criteria&lt;/em&gt;&lt;/a&gt; object that is friendly with IDE autocompleters.</source>
          <target state="translated">静态方法 &lt;code&gt;query()&lt;/code&gt; 返回与IDE自动完成程序友好的&lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Criteria&lt;/em&gt;&lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="206c1870c71eedf927d0d9d9b33b73e5b406e2a4" translate="yes" xml:space="preserve">
          <source>The stream logger writes messages to a valid registered stream in PHP. A list of streams is available &lt;a href=&quot;http://php.net/manual/en/wrappers.php&quot;&gt;here&lt;/a&gt;:</source>
          <target state="translated">流记录器将消息写入PHP中的有效注册流。流的列表在&lt;a href=&quot;http://php.net/manual/en/wrappers.php&quot;&gt;这里&lt;/a&gt;可用：</target>
        </trans-unit>
        <trans-unit id="d4e71be2a610859aea39b3283c82ec6f4ed37055" translate="yes" xml:space="preserve">
          <source>The third option is to register directories, in which classes could be found. This option is not recommended in terms of performance, since Phalcon will need to perform a significant number of file stats on each folder, looking for the file with the same name as the class. It&amp;rsquo;s important to register the directories in relevance order. Remember always add a trailing slash at the end of the paths.</source>
          <target state="translated">第三种选择是注册可以在其中找到类的目录。就性能而言，不建议使用此选项，因为Phalcon将需要在每个文件夹上执行大量文件统计，以查找与该类同名的文件。按相关顺序注册目录很重要。请记住，始终在路径的末尾添加斜杠。</target>
        </trans-unit>
        <trans-unit id="68b9e757284ab8063f70b4c319b15587dace100d" translate="yes" xml:space="preserve">
          <source>The tutorial/public/index.php file should look like:</source>
          <target state="translated">tutorial/public/index.php文件应该是这样的。</target>
        </trans-unit>
        <trans-unit id="2ede9cc265a4ae92b974fd69dbab1a4867da3137" translate="yes" xml:space="preserve">
          <source>The watch command adds the named tube to the watch list for the current connection.</source>
          <target state="translated">观察命令将命名的管子添加到当前连接的观察列表中。</target>
        </trans-unit>
        <trans-unit id="b7985639cc5dbecebf4f03f7e6fef048f19c2ca1" translate="yes" xml:space="preserve">
          <source>The whole &amp;lsquo;for&amp;rsquo; block provides the following:</source>
          <target state="translated">整个&amp;ldquo; for&amp;rdquo;块提供以下内容：</target>
        </trans-unit>
        <trans-unit id="ad054c8adc2bb57e38e1fed871bb484f8e840b8f" translate="yes" xml:space="preserve">
          <source>The width will automatically be generated to keep the proportions the same; if you specify a width, it will be ignored.</source>
          <target state="translated">宽度会自动生成,保持比例不变;如果你指定了宽度,则会被忽略。</target>
        </trans-unit>
        <trans-unit id="7524e6f72459769b9b36a148116e4951f69cc97e" translate="yes" xml:space="preserve">
          <source>Then access it from a controller or view:</source>
          <target state="translated">然后从控制器或视图访问它。</target>
        </trans-unit>
        <trans-unit id="ff4b6575493df8beb472461b4a1a30b4b13cba67" translate="yes" xml:space="preserve">
          <source>Then add the instance to the application:</source>
          <target state="translated">然后将实例添加到应用程序中。</target>
        </trans-unit>
        <trans-unit id="d5b50c70f1fae058a1ee853af6fba5b7ca36dcc5" translate="yes" xml:space="preserve">
          <source>Then at the end of the file save the profiled data:</source>
          <target state="translated">然后在文件的最后保存剖析数据。</target>
        </trans-unit>
        <trans-unit id="54310a877111d1f2d52c4e8b4553f414f3ecb8ca" translate="yes" xml:space="preserve">
          <source>Then change the definition of the service &amp;lsquo;tag&amp;rsquo;:</source>
          <target state="translated">然后更改服务&amp;ldquo;标签&amp;rdquo;的定义：</target>
        </trans-unit>
        <trans-unit id="8dc94009acacb8cf175159db42621b363f418a45" translate="yes" xml:space="preserve">
          <source>Then enter the folder where the tools were cloned and execute &amp;rdquo;. ./phalcon.sh&amp;rdquo;, (don&amp;rsquo;t forget the dot at beginning of the command):</source>
          <target state="translated">然后进入克隆工具的文件夹并执行&amp;rdquo;。./phalcon.sh&amp;rdquo;，（不要忘记命令开头的点）：</target>
        </trans-unit>
        <trans-unit id="b3fc331171b0c09fd3e6682cf75f09c17b30f43e" translate="yes" xml:space="preserve">
          <source>Then in a view, these resources can be printed:</source>
          <target state="translated">然后在视图中,可以打印这些资源。</target>
        </trans-unit>
        <trans-unit id="9916530577ab1f3fb4a0cf919520abb32061a73a" translate="yes" xml:space="preserve">
          <source>Then in the controller&amp;rsquo;s action you can check if the CSRF token is valid:</source>
          <target state="translated">然后，在控制器的操作中，您可以检查CSRF令牌是否有效：</target>
        </trans-unit>
        <trans-unit id="d8af8224d3445163f95feffb675cea7d63e3c93e" translate="yes" xml:space="preserve">
          <source>Then in the file (&amp;rdquo;../app/config/routes.php&amp;rdquo;) return the object resolved:</source>
          <target state="translated">然后在文件（&amp;ldquo; ../app/config/routes.php&amp;rdquo;）中返回已解析的对象：</target>
        </trans-unit>
        <trans-unit id="05f90620b12254709e2be5034b8872a54136e8d2" translate="yes" xml:space="preserve">
          <source>Then in the views:</source>
          <target state="translated">然后在意见。</target>
        </trans-unit>
        <trans-unit id="8ab8d8dd4fcc76ea212b51c07a66796abf6ae9c1" translate="yes" xml:space="preserve">
          <source>Then initialize and use your own validator:</source>
          <target state="translated">然后初始化并使用自己的验证器。</target>
        </trans-unit>
        <trans-unit id="55939291b853bc6f6085968b04fc70c6233a6778" translate="yes" xml:space="preserve">
          <source>Then mount the group in the router:</source>
          <target state="translated">然后在路由器中挂载组。</target>
        </trans-unit>
        <trans-unit id="37e71e3e8c13501ba856fb7dc8ae0ee5425a671f" translate="yes" xml:space="preserve">
          <source>Then once the service is resolved, the &lt;code&gt;$di&lt;/code&gt; will be passed to &lt;code&gt;setDi()&lt;/code&gt; automatically:</source>
          <target state="translated">然后，一旦服务解析， &lt;code&gt;$di&lt;/code&gt; 将自动传递给 &lt;code&gt;setDi()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9f47aa8758370a6e1b8fd4275d310dc68cc3ed9b" translate="yes" xml:space="preserve">
          <source>Then point your browser to &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt; to check if everything is working.</source>
          <target state="translated">然后将浏览器指向&lt;a href=&quot;http://localhost:8000/&quot;&gt;http：// localhost：8000 /&lt;/a&gt;以检查是否一切正常。</target>
        </trans-unit>
        <trans-unit id="538073cd80ef8d06ab958d26036f06c560556c22" translate="yes" xml:space="preserve">
          <source>Then the messages would be printed as follows:</source>
          <target state="translated">然后,信息将打印如下:</target>
        </trans-unit>
        <trans-unit id="cfda689fa31933494625e59195abe2c32f978d34" translate="yes" xml:space="preserve">
          <source>Then use this class as base class for each &amp;lsquo;Cacheable&amp;rsquo; model:</source>
          <target state="translated">然后将此类用作每个&amp;ldquo;可缓存&amp;rdquo;模型的基类：</target>
        </trans-unit>
        <trans-unit id="afdd124d62510eb32daf08bea2c782a2d3a03c62" translate="yes" xml:space="preserve">
          <source>Then you can use it in your model as follows:</source>
          <target state="translated">那么你可以在你的模型中使用它,如下。</target>
        </trans-unit>
        <trans-unit id="906b503bfcf6342ec99dbd223196fe688d55cd98" translate="yes" xml:space="preserve">
          <source>Then you can use the console inside of any task. Below is an example of a modified MainTask.php:</source>
          <target state="translated">然后你就可以在任何任务中使用控制台。下面是一个修改后的MainTask.php的例子:</target>
        </trans-unit>
        <trans-unit id="925b299dd77d3502b2f745f8dcea94babe9c2aee" translate="yes" xml:space="preserve">
          <source>Then you can use the new names naturally in your code:</source>
          <target state="translated">然后,你可以在你的代码中自然地使用新的名字。</target>
        </trans-unit>
        <trans-unit id="306e0595f3d456f04bafedb0d313c0517b4dead5" translate="yes" xml:space="preserve">
          <source>Then you can use them in &lt;code&gt;isAllowed()&lt;/code&gt; method.</source>
          <target state="translated">然后可以在 &lt;code&gt;isAllowed()&lt;/code&gt; 方法中使用它们。</target>
        </trans-unit>
        <trans-unit id="c4e7a988c7d7de2760a6805a0929a4d75393523a" translate="yes" xml:space="preserve">
          <source>Then you can validate the form according to the input entered by the user:</source>
          <target state="translated">然后就可以根据用户输入的内容对表单进行验证。</target>
        </trans-unit>
        <trans-unit id="3fae2094d2c0056729934905452ddd9be2c5bedd" translate="yes" xml:space="preserve">
          <source>Then, based on the built params we perform the query:</source>
          <target state="translated">然后,根据建立的参数,我们进行查询。</target>
        </trans-unit>
        <trans-unit id="966d7db8462d18e7802b380f599c5e6454d64917" translate="yes" xml:space="preserve">
          <source>Then, for example, in a controller you can use it as follows:</source>
          <target state="translated">然后,例如,在控制器中,你可以使用它,如下所示。</target>
        </trans-unit>
        <trans-unit id="f424f5e6498d52f151311f6044a0f2c82b8b2830" translate="yes" xml:space="preserve">
          <source>Then, in the &lt;code&gt;initialize()&lt;/code&gt; method, we define the connection service for the model:</source>
          <target state="translated">然后，在 &lt;code&gt;initialize()&lt;/code&gt; 方法中，为模型定义连接服务：</target>
        </trans-unit>
        <trans-unit id="e562fac41f70749489fb3e4d4398e0a303241136" translate="yes" xml:space="preserve">
          <source>Then, in the index.php file we create the following:</source>
          <target state="translated">然后,在index.php文件中,我们创建以下内容。</target>
        </trans-unit>
        <trans-unit id="ecd1a03c064ef34dca7c1c339895bb65af68fc94" translate="yes" xml:space="preserve">
          <source>Then, using for example the component &lt;a href=&quot;../api/phalcon_mvc_url&quot;&gt;&lt;em&gt;Phalcon\Mvc\Url&lt;/em&gt;&lt;/a&gt; we can build routes from its name:</source>
          <target state="translated">然后，使用例如组件&lt;a href=&quot;../api/phalcon_mvc_url&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Url，&lt;/em&gt;&lt;/a&gt;我们可以根据其名称构建路由：</target>
        </trans-unit>
        <trans-unit id="59afa63f971fca28362eb60fad0121e70ac908d4" translate="yes" xml:space="preserve">
          <source>Then, we can access that service in several ways:</source>
          <target state="translated">那么,我们可以通过以下几种方式获取该服务。</target>
        </trans-unit>
        <trans-unit id="7446f447abca3160f234be91641477f3cb442a99" translate="yes" xml:space="preserve">
          <source>Then, we receive the parameters from the form:</source>
          <target state="translated">然后,我们从表格中接收参数。</target>
        </trans-unit>
        <trans-unit id="31ee64bf8c9cdaf438def702ad0d2c0457d6af04" translate="yes" xml:space="preserve">
          <source>There are adapters available for several template engines on the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/View/Engine&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/View/Engine&quot;&gt;Phalcon孵化器&lt;/a&gt;上有几个模板引擎可用的适配器</target>
        </trans-unit>
        <trans-unit id="ff0fc815ad41baab0d8f4f17c8e664735080351e" translate="yes" xml:space="preserve">
          <source>There are four built-in message types supported:</source>
          <target state="translated">支持的内置消息类型有四种。</target>
        </trans-unit>
        <trans-unit id="b5ce5a7204ec525fcfe42f6b5d9ecad0a84c80a9" translate="yes" xml:space="preserve">
          <source>There are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many. The relationship may be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from each record in a uniform way.</source>
          <target state="translated">关系有四种类型:一对一、一对多、多对一和多对多。这种关系可能是单向的,也可能是双向的,每种关系可以是简单的(一对一的模型),也可以是比较复杂的(模型的组合)。模型管理器对这些关系的外键约束进行管理,这些关系的定义有助于引用的完整性以及相关记录对模型的简单快速访问。通过关系的实现,可以方便地从每个记录中统一访问相关模型中的数据。</target>
        </trans-unit>
        <trans-unit id="e0c161bf5bfe5a3eddbc40c8f4dd28b02cad78e0" translate="yes" xml:space="preserve">
          <source>There are many template engines, which you might want to integrate or create one of your own. The first step to start using an external template engine is create an adapter for it.</source>
          <target state="translated">有许多模板引擎,你可能想整合或创建一个自己的模板引擎。开始使用外部模板引擎的第一步是为它创建一个适配器。</target>
        </trans-unit>
        <trans-unit id="00c569522300977f433a02b96854621ebecc85b5" translate="yes" xml:space="preserve">
          <source>There are many things in the above example that worth detailing. First of all, active items in the current page are traversed using a Volt&amp;rsquo;s &amp;lsquo;for&amp;rsquo;. Volt provides a simpler syntax for a PHP &amp;lsquo;foreach&amp;rsquo;.</source>
          <target state="translated">上面的示例中有很多东西值得详细说明。首先，使用伏特的&amp;ldquo; for&amp;rdquo;遍历当前页面中的活动项目。Volt为PHP&amp;ldquo; foreach&amp;rdquo;提供了一种更简单的语法。</target>
        </trans-unit>
        <trans-unit id="c5703657932090b6a77b0095d9951353bc6a78f3" translate="yes" xml:space="preserve">
          <source>There are many ways of registering services in the container. In INVO, most services have been registered using anonymous functions/closures. Thanks to this, the objects are instantiated in a lazy way, reducing the resources needed by the application.</source>
          <target state="translated">在容器中注册服务的方法有很多。在INVO中,大多数服务都是使用匿名函数/closures注册的。多亏了这一点,对象是以一种懒惰的方式实例化的,减少了应用程序所需的资源。</target>
        </trans-unit>
        <trans-unit id="49e2cedf2ec8bf8109dad5c71505b481a9d6bed7" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;Phalcon孵化器中&lt;/a&gt;有更多用于此组件的适配器</target>
        </trans-unit>
        <trans-unit id="54b11530167977d1d7f96e69e502ca767cb35aa4" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Session/Adapter&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Session/Adapter&quot;&gt;Phalcon孵化器中&lt;/a&gt;有更多用于此组件的适配器</target>
        </trans-unit>
        <trans-unit id="0536e18658f821eeef26b28ce359e0fecad6b1d3" translate="yes" xml:space="preserve">
          <source>There are more adapters available for this components in the &lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Translate/Adapter&quot;&gt;Phalcon Incubator&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Translate/Adapter&quot;&gt;Phalcon孵化器中&lt;/a&gt;有更多用于此组件的适配器</target>
        </trans-unit>
        <trans-unit id="00edd0039107929b21b55053efc1f94ae0155d38" translate="yes" xml:space="preserve">
          <source>There are several modes of resizing:</source>
          <target state="translated">有几种调整大小的模式。</target>
        </trans-unit>
        <trans-unit id="5ad06d8a760406dd09b1f3b1ead784f16066138a" translate="yes" xml:space="preserve">
          <source>There are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters/getters can be used.</source>
          <target state="translated">有几种方法可以创建模型。您可以从默认的数据库连接中创建所有模型,也可以选择性地创建一些模型。模型可以拥有字段表示的公共属性,也可以使用设置器/获取器。</target>
        </trans-unit>
        <trans-unit id="f90c8e6cb71c2d02568c3a6e7a126a96359d4803" translate="yes" xml:space="preserve">
          <source>There are several ways to find out the best available locale using &lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt;. One of them is to check the HTTP &amp;ldquo;Accept-Language&amp;rdquo; header:</source>
          <target state="translated">有几种方法可以使用&lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt;找出最佳的语言环境。其中之一是检查HTTP&amp;ldquo; Accept-Language&amp;rdquo;标头：</target>
        </trans-unit>
        <trans-unit id="6aa2c789c4dda9fcddfedb9bc78df76cc093fcfb" translate="yes" xml:space="preserve">
          <source>There are times where you will need to forcibly invalidate a cache entry (due to an update in the cached data). The only requirement is to know the key that the data have been stored with.</source>
          <target state="translated">有时您需要强制取消一个缓存条目(由于缓存数据的更新)。唯一的要求是知道数据被存储的密钥。</target>
        </trans-unit>
        <trans-unit id="cc640701d23560bde1c179090af7d1870024608e" translate="yes" xml:space="preserve">
          <source>There is no limit on the &amp;ldquo;forwards&amp;rdquo; you can have in your application, so long as they do not result in circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">只要不导致循环引用，您的应用程序中的&amp;ldquo;转发&amp;rdquo;就没有限制，此时您的应用程序将停止。如果没有其他动作要由分发循环调度，则调度程序将自动调用由&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt;管理的MVC的视图层。</target>
        </trans-unit>
        <trans-unit id="6fc26e9224d68bfceaf2bf9bb6680286f6717a8b" translate="yes" xml:space="preserve">
          <source>These are detailed instructions on how to install the developer tools on different platforms:</source>
          <target state="translated">这些都是关于如何在不同平台上安装开发者工具的详细说明。</target>
        </trans-unit>
        <trans-unit id="84b8e8bf4670fde36081b87b5b3a2c0b25ed0072" translate="yes" xml:space="preserve">
          <source>These files are automatically loaded in the &lt;code&gt;register()&lt;/code&gt; method.</source>
          <target state="translated">这些文件会自动加载到 &lt;code&gt;register()&lt;/code&gt; 方法中。</target>
        </trans-unit>
        <trans-unit id="20db73437c0afcbf8da97c3717848e5d984052b6" translate="yes" xml:space="preserve">
          <source>These methods &amp;ldquo;create&amp;rdquo; and &amp;ldquo;update&amp;rdquo; also accept an array of values as parameter.</source>
          <target state="translated">这些&amp;ldquo;创建&amp;rdquo;和&amp;ldquo;更新&amp;rdquo;方法也接受值数组作为参数。</target>
        </trans-unit>
        <trans-unit id="fe06e857db4634b6b553dacd43b41024850f0999" translate="yes" xml:space="preserve">
          <source>These objects are more powerful than standard arrays. One of the greatest features of the &lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset&lt;/em&gt;&lt;/a&gt; is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.</source>
          <target state="translated">这些对象比标准数组更强大。&lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset&lt;/em&gt;&lt;/a&gt;的最大功能之一是在任何时候内存中只有一条记录。这极大地帮助了内存管理，尤其是在处理大量数据时。</target>
        </trans-unit>
        <trans-unit id="99003b4d86374d1db754a8a05fa9b336031a7f0d" translate="yes" xml:space="preserve">
          <source>These placeholders help writing regular expressions that are more readable for developers and easier to understand. The following placeholders are supported:</source>
          <target state="translated">这些占位符有助于编写正则表达式,使开发者更易读懂,更容易理解。支持以下占位符。</target>
        </trans-unit>
        <trans-unit id="04adcf526c1ca679ba020b063572ff500b25d78c" translate="yes" xml:space="preserve">
          <source>These services are &amp;ldquo;shared&amp;rdquo;, which means that we are always accessing the same instance regardless of the place where we invoke them.</source>
          <target state="translated">这些服务是&amp;ldquo;共享的&amp;rdquo;，这意味着我们总是在访问同一实例，而不管调用它们的位置如何。</target>
        </trans-unit>
        <trans-unit id="b709aa40588ea230a4951ae58ebe0179f7e12ac7" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for Linux.</source>
          <target state="translated">这些步骤将指导你完成安装Phalcon Developer Tools for Linux的过程。</target>
        </trans-unit>
        <trans-unit id="e153b0cf1ac6d9302550217ce4aabb5398fb1a56" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for OS/X.</source>
          <target state="translated">这些步骤将指导您完成Phalcon Developer Tools for OS/X的安装过程。</target>
        </trans-unit>
        <trans-unit id="fc57a74fc589ddda2ae6439a445e5e59506e0d36" translate="yes" xml:space="preserve">
          <source>These steps will guide you through the process of installing Phalcon Developer Tools for Windows.</source>
          <target state="translated">这些步骤将指导您完成安装Phalcon Developer Tools for Windows的过程。</target>
        </trans-unit>
        <trans-unit id="2e43de4e6bb39804486fff9914534c12d071166f" translate="yes" xml:space="preserve">
          <source>These tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.</source>
          <target state="translated">这些工具是一个生成骨架代码的有用脚本的集合。您的应用程序的核心组件可以通过一个简单的命令生成,使您可以轻松地使用Phalcon开发应用程序。</target>
        </trans-unit>
        <trans-unit id="98cdb2149c058a667eabccfb71880ab06044889d" translate="yes" xml:space="preserve">
          <source>These values that don&amp;rsquo;t represent complete objects are what we call scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:</source>
          <target state="translated">这些不代表完整对象的值就是我们所说的标量。PHQL允许您查询所有类型的标量：字段，函数，文字，表达式等。</target>
        </trans-unit>
        <trans-unit id="26f3a3cbd1b01bb43f507a531e45d5df16068bee" translate="yes" xml:space="preserve">
          <source>Think if we had to create this object in many parts of our application. In the future, if we do not require any of the dependencies, we need to go through the entire code base to remove the parameter in any constructor or setter where we injected the code. To solve this, we return again to a global registry to create the component. However, it adds a new layer of abstraction before creating the object:</source>
          <target state="translated">想一想,如果我们在应用程序的很多地方都要创建这个对象。在未来,如果我们不需要任何的依赖,我们需要通过整个代码库来删除我们注入代码的任何构造函数或setter中的参数。为了解决这个问题,我们再次返回全局注册表来创建组件。然而,它在创建对象之前增加了一层新的抽象。</target>
        </trans-unit>
        <trans-unit id="e0d2d7fef2379d33a3251636b6ac166e493d28ee" translate="yes" xml:space="preserve">
          <source>This action simply pass a form instance of SignUpForm to the view, which itself is rendered to allow the user enter the login details:</source>
          <target state="translated">这个动作只是简单地传递一个SignUpForm的表单实例给视图,视图本身会被渲染,让用户输入登录信息。</target>
        </trans-unit>
        <trans-unit id="3c7108bdab1f42e451ee574de6cd54f788d3b726" translate="yes" xml:space="preserve">
          <source>This adapter allows to paginate data using a Phalcon\Mvc\Model resultset as a base.</source>
          <target state="translated">该适配器允许使用Phalcon/Mvc/Model结果集作为基础对数据进行分页。</target>
        </trans-unit>
        <trans-unit id="f7a676fff406fd66a0774db2362e2d3277e91cbb" translate="yes" xml:space="preserve">
          <source>This adapter is the default. The metadata is cached only during the request. When the request is completed, the metadata are released as part of the normal memory of the request. This adapter is perfect when the application is in development so as to refresh the metadata in each request containing the new and/or modified fields.</source>
          <target state="translated">这个适配器是默认的。元数据只在请求过程中被缓存。当请求完成后,元数据作为请求的正常内存的一部分被释放。当应用程序处于开发阶段时,这个适配器是完美的,以便在每个包含新的和/或修改的字段的请求中刷新元数据。</target>
        </trans-unit>
        <trans-unit id="3b8d79fb24893f0b90ee4553a4c7df953b3a7699" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in Redis</source>
          <target state="translated">该适配器在Redis中存储会话</target>
        </trans-unit>
        <trans-unit id="a4859dd02fc83e785c7447b63f383157b9f3c4ef" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in libmemcached</source>
          <target state="translated">该适配器在libmemcached中存储会话。</target>
        </trans-unit>
        <trans-unit id="c8e7b6a5442e53f751446fd561fe4151e4a0d4b9" translate="yes" xml:space="preserve">
          <source>This adapter store sessions in memcache</source>
          <target state="translated">该适配器在memcache中存储会话</target>
        </trans-unit>
        <trans-unit id="0ef9ec927d9d921a283bad925fb5381b3542da3d" translate="yes" xml:space="preserve">
          <source>This adapter stores metadata in the &lt;code&gt;$_SESSION&lt;/code&gt; superglobal. This adapter is recommended only when the application is actually using a small number of models. The metadata are refreshed every time a new session starts. This also requires the use of &lt;code&gt;session_start()&lt;/code&gt; to start the session before using any models.</source>
          <target state="translated">该适配器将元数据存储在 &lt;code&gt;$_SESSION&lt;/code&gt; 超全局变量中。仅当应用程序实际使用少量模型时才建议使用此适配器。每当新的会话开始时，元数据都会刷新。这也需要使用 &lt;code&gt;session_start()&lt;/code&gt; 在使用任何模型之前启动会话。</target>
        </trans-unit>
        <trans-unit id="8c54a77f3d8fb22ad443613f0a0de6e7df15ffeb" translate="yes" xml:space="preserve">
          <source>This adapter uses &lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt; to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.</source>
          <target state="translated">该适配器使用&lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt;来存储表元数据。您可以使用选项指定元数据的生存期。当应用程序处于生产阶段时，这是最推荐的存储元数据的方式。</target>
        </trans-unit>
        <trans-unit id="454247304d2cb37d9698895a5eeaa091f9a09e26" translate="yes" xml:space="preserve">
          <source>This adapter uses plain files to store metadata. By using this adapter the disk-reading is increased but the database access is reduced.</source>
          <target state="translated">该适配器使用纯文件来存储元数据。通过使用该适配器,磁盘读取量增加,但数据库访问量减少。</target>
        </trans-unit>
        <trans-unit id="ac6a633007b292928b94ae4d440788afd472c176" translate="yes" xml:space="preserve">
          <source>This adapter uses the &lt;a href=&quot;http://www.php.net/manual/en/book.apc.php&quot;&gt;Alternative PHP Cache (APC)&lt;/a&gt; to store the table metadata. You can specify the lifetime of the metadata with options. This is the most recommended way to store metadata when the application is in production stage.</source>
          <target state="translated">该适配器使用&lt;a href=&quot;http://www.php.net/manual/en/book.apc.php&quot;&gt;备用PHP缓存（APC）&lt;/a&gt;存储表元数据。您可以使用选项指定元数据的生存期。当应用程序处于生产阶段时，这是最推荐的存储元数据的方式。</target>
        </trans-unit>
        <trans-unit id="613dcec271cd0bca5d506e9e5dc25022113c0203" translate="yes" xml:space="preserve">
          <source>This adapter uses the base64_encode/base64_decode PHP&amp;rsquo;s functions</source>
          <target state="translated">该适配器使用base64_encode / base64_decode PHP的函数</target>
        </trans-unit>
        <trans-unit id="8407319adc0108601b3ac31705dcc1fe40f9fe84" translate="yes" xml:space="preserve">
          <source>This adapter uses the json_encode/json_decode PHP&amp;rsquo;s functions</source>
          <target state="translated">此适配器使用PHP的json_encode / json_decode函数</target>
        </trans-unit>
        <trans-unit id="a5c7a136f590c470fd4b417f248b5016a7e38a2d" translate="yes" xml:space="preserve">
          <source>This adapter uses the special memcached key &amp;ldquo;_PHCM&amp;rdquo; to store all the keys internally used by the adapter</source>
          <target state="translated">该适配器使用特殊的内存缓存密钥&amp;ldquo; _PHCM&amp;rdquo;来存储适配器内部使用的所有密钥</target>
        </trans-unit>
        <trans-unit id="932f02077c71f103e556b3ed13bfbb7d4a5c2ee6" translate="yes" xml:space="preserve">
          <source>This adapter uses the special redis key &amp;ldquo;_PHCR&amp;rdquo; to store all the keys internally used by the adapter</source>
          <target state="translated">该适配器使用特殊的redis密钥&amp;ldquo; _PHCR&amp;rdquo;来存储适配器内部使用的所有密钥</target>
        </trans-unit>
        <trans-unit id="ae6758c24cff2059f114ae5181e6d8557ad9631c" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to DELETE</source>
          <target state="translated">这个注解将一个方法标记为限制HTTP方法DELETE的路由。</target>
        </trans-unit>
        <trans-unit id="3a25e503d16ee8c141af4d667b256e757f7f5b96" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to GET</source>
          <target state="translated">这个注解将一个方法标记为限制HTTP方法为GET的路由。</target>
        </trans-unit>
        <trans-unit id="3aa9a48bc5c37bcf35ecc290651b8715cdc88076" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to OPTIONS</source>
          <target state="translated">这个注解将一个方法标记为限制HTTP方法的OPTIONS的路由。</target>
        </trans-unit>
        <trans-unit id="b0c693dfac24ee45df3abc3d716fbbc9b8be74e0" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to POST</source>
          <target state="translated">这个注解将一个方法标记为限制HTTP方法为POST的路由。</target>
        </trans-unit>
        <trans-unit id="c9a59a6a96069c517edfb611fe9ab09371111ee6" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route restricting the HTTP method to PUT</source>
          <target state="translated">这个注解将一个方法标记为限制HTTP方法为PUT的路由。</target>
        </trans-unit>
        <trans-unit id="5b48a807bc25cb1ae5f659e06c27fd5b00067ae6" translate="yes" xml:space="preserve">
          <source>This annotation marks a method as a route. This annotation must be placed in a method docblock</source>
          <target state="translated">这个注解将一个方法标记为路径。这个注解必须放在方法的 docblock 中。</target>
        </trans-unit>
        <trans-unit id="46f7e60c29c9ceed4dfe8bf927e3a8c3f7416c80" translate="yes" xml:space="preserve">
          <source>This approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt;:</source>
          <target state="translated">这种方法解决了问题，但是，如果我们要添加其他参数（例如顺序或条件），则必须创建一个更复杂的方法。此外，如果使用相关记录或 &lt;code&gt;find()&lt;/code&gt; / &lt;code&gt;findFirst()&lt;/code&gt; 获得数据，则此方法不起作用：</target>
        </trans-unit>
        <trans-unit id="e5a39e469e8f6bb6325aef6274da00593959ec2c" translate="yes" xml:space="preserve">
          <source>This backend will store cached content into files in the local server. The available options for this backend are:</source>
          <target state="translated">该后端将缓存的内容存储到本地服务器的文件中。该后端可用的选项有:</target>
        </trans-unit>
        <trans-unit id="2ed3eb13db1459fed5baf8b485ac81c019356c37" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on Alternative PHP Cache (&lt;a href=&quot;http://php.net/apc&quot;&gt;APC&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">该后端将在替代PHP缓存（&lt;a href=&quot;http://php.net/apc&quot;&gt;APC&lt;/a&gt;）上存储缓存的内容。该后端的可用选项是：</target>
        </trans-unit>
        <trans-unit id="ba5b6d56c377f767a52770c27dde4c262315f70a" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on XCache (&lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">该后端将在XCache（&lt;a href=&quot;http://xcache.lighttpd.net/&quot;&gt;XCache&lt;/a&gt;）上存储缓存的内容。该后端的可用选项是：</target>
        </trans-unit>
        <trans-unit id="34bdada41ca5545b1a66be4b2b020b39d65e94ac" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a MongoDB server. The available options for this backend are:</source>
          <target state="translated">这个后端将在MongoDB服务器上存储缓存的内容。这个后端可用的选项有:</target>
        </trans-unit>
        <trans-unit id="cc511a3c0b4431d2627f7457b7b348e9559bb04e" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a Redis server (&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;). The available options for this backend are:</source>
          <target state="translated">该后端会将缓存的内容存储在Redis服务器（&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;）上。该后端的可用选项是：</target>
        </trans-unit>
        <trans-unit id="09e8bd2072de5f7e32b8cdf951e153bb18b0bbe1" translate="yes" xml:space="preserve">
          <source>This backend will store cached content on a memcached server. The available options for this backend are:</source>
          <target state="translated">该后端将在memcached服务器上存储缓存内容。这个后端可用的选项有:</target>
        </trans-unit>
        <trans-unit id="dd5dfa74e5dfced4703c2b625c7a82bc4c7f710f" translate="yes" xml:space="preserve">
          <source>This behavior accepts two options: &amp;lsquo;field&amp;rsquo; and &amp;lsquo;value&amp;rsquo;, &amp;lsquo;field&amp;rsquo; determines what field must be updated and &amp;lsquo;value&amp;rsquo; the value to be deleted. Let&amp;rsquo;s pretend the table &amp;lsquo;users&amp;rsquo; has the following data:</source>
          <target state="translated">此行为接受两个选项：&amp;ldquo;字段&amp;rdquo;和&amp;ldquo;值&amp;rdquo;，&amp;ldquo;字段&amp;rdquo;确定必须更新的字段，&amp;ldquo;值&amp;rdquo;确定要删除的值。让我们假设表&amp;ldquo;用户&amp;rdquo;具有以下数据：</target>
        </trans-unit>
        <trans-unit id="5b222b7ae9dfefc2f2bd6d17faa445d59e3d03b0" translate="yes" xml:space="preserve">
          <source>This behavior can be used in the following way:</source>
          <target state="translated">这种行为可以通过以下方式使用。</target>
        </trans-unit>
        <trans-unit id="4a19dca43cacc4d2e970fb0da09eb1bd83cd30db" translate="yes" xml:space="preserve">
          <source>This behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:</source>
          <target state="translated">该行为接收一个选项数组,第一级键必须是一个事件名称,表示何时必须分配该列。</target>
        </trans-unit>
        <trans-unit id="28d347b4ed48d3a2b8c7ceecd8625d2bd915fba7" translate="yes" xml:space="preserve">
          <source>This being the most common case, the application is installed in any directory under the document root. In this case, we use two .htaccess files, the first one to hide the application code forwarding all requests to the application&amp;rsquo;s document root (public/).</source>
          <target state="translated">这是最常见的情况，该应用程序安装在文档根目录下的任何目录中。在这种情况下，我们使用两个.htaccess文件，第一个隐藏了将所有请求转发到应用程序文档根目录（public /）的应用程序代码。</target>
        </trans-unit>
        <trans-unit id="9dea2d4f6f2833b4bf4fbd936d0817b6658313b0" translate="yes" xml:space="preserve">
          <source>This chapter explains the possible points where it is possible to implement caching to improve performance. The framework gives you the tools to implement the cache where you demand of it according to the architecture of your application.</source>
          <target state="translated">这一章解释了可能实现缓存以提高性能的地方。该框架为您提供了工具,让您可以根据应用程序的架构在您需要的地方实现缓存。</target>
        </trans-unit>
        <trans-unit id="359602167f12084580340e70d0d185dea0eeb081" translate="yes" xml:space="preserve">
          <source>This class allows to access services in the services container by just only accessing a public property with the same name of a registered service</source>
          <target state="translated">该类只需访问与注册服务同名的公共属性,就可以访问服务容器中的服务。</target>
        </trans-unit>
        <trans-unit id="98d85fe07e7cb9ff6790512d5dcde77adfe369a9" translate="yes" xml:space="preserve">
          <source>This class allows to get the installed version of the framework</source>
          <target state="translated">该类允许获取框架的安装版本。</target>
        </trans-unit>
        <trans-unit id="78f1581244d0ec60243b5bb84c6ce68674511e1d" translate="yes" xml:space="preserve">
          <source>This class allows to insert/update raw data without quoting or formatting.</source>
          <target state="translated">该类允许插入/更新原始数据,无需引用或格式化。</target>
        </trans-unit>
        <trans-unit id="74b9aaa8649940873da1b9bd772f6eb9cdfb0472" translate="yes" xml:space="preserve">
          <source>This class builds instances based on complex definitions</source>
          <target state="translated">该类基于复杂的定义建立实例。</target>
        </trans-unit>
        <trans-unit id="9a8f32e7ed9387cbf3a753073bda2637b2955be4" translate="yes" xml:space="preserve">
          <source>This class defines resource entity and its description</source>
          <target state="translated">该类定义了资源实体及其描述</target>
        </trans-unit>
        <trans-unit id="46099886800a795d451a3b96391177e45b3db15e" translate="yes" xml:space="preserve">
          <source>This class defines role entity and its description</source>
          <target state="translated">该类定义了角色实体及其描述</target>
        </trans-unit>
        <trans-unit id="17232dbed8386c9f8d78b0d20c4017f8f28df4d7" translate="yes" xml:space="preserve">
          <source>This class extends the &lt;a href=&quot;../api/phalcon_mvc_user_component&quot;&gt;&lt;em&gt;Phalcon\Mvc\User\Component&lt;/em&gt;&lt;/a&gt;. It is not imposed to extend a component with this class, but it helps to get access more quickly to the application services. Now, we are going to register our first user component in the services container:</source>
          <target state="translated">此类扩展了&lt;a href=&quot;../api/phalcon_mvc_user_component&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ User \ Component&lt;/em&gt;&lt;/a&gt;。无需使用此类来扩展组件，但它有助于更​​快地访问应用程序服务。现在，我们将在服务容器中注册我们的第一个用户组件：</target>
        </trans-unit>
        <trans-unit id="a7967b846c882713793b78a5442adefc228d51cb" translate="yes" xml:space="preserve">
          <source>This class identifies each profile in a Phalcon\Db\Profiler</source>
          <target state="translated">该类识别Phalcon/Db/Profiler中的每个配置文件</target>
        </trans-unit>
        <trans-unit id="091f08cb4cf3b07ee8c2f8b05a578e3fd0b0e681" translate="yes" xml:space="preserve">
          <source>This class implements common functionality for backend adapters. A backend cache adapter may extend this class</source>
          <target state="translated">这个类实现了后端适配器的通用功能。后端缓存适配器可以扩展这个类。</target>
        </trans-unit>
        <trans-unit id="b9e3627fcf244de7360bead6dfa7616e2eb4870d" translate="yes" xml:space="preserve">
          <source>This class is a bag to manage the cookies A cookies bag is automatically registered as part of the &amp;lsquo;response&amp;rsquo; service in the DI</source>
          <target state="translated">此类是用于管理cookie的包。cookie包将作为DI中&amp;ldquo;响应&amp;rdquo;服务的一部分自动注册。</target>
        </trans-unit>
        <trans-unit id="716e405825e91f8cc0169ab58e76abbfc8272d47" translate="yes" xml:space="preserve">
          <source>This class is a bag to manage the response headers</source>
          <target state="translated">这个类是一个管理响应头的袋子。</target>
        </trans-unit>
        <trans-unit id="fcdd9aba9fa6cb2fe70972b68ca2b22b67e5da33" translate="yes" xml:space="preserve">
          <source>This class is only for backward compatibility reasons to use with Phalcon\Mvc\Collection. Otherwise please use the validators provided by Phalcon\Validation.</source>
          <target state="translated">这个类只是为了与Phalcon/Mvc/Collection向后兼容。否则请使用Phalcon\Validation提供的验证器。</target>
        </trans-unit>
        <trans-unit id="39f61ef4f1999b7e3f1cfd948e6983d319f31631" translate="yes" xml:space="preserve">
          <source>This class is used to build the array parameter required by Phalcon\Mvc\Model::find() and Phalcon\Mvc\Model::findFirst() using an object-oriented interface.</source>
          <target state="translated">该类用于使用面向对象的接口来构建Phalcon/Mvc/\Model::find()和Phalcon/Mvc/\Model::findFirst()所需的数组参数。</target>
        </trans-unit>
        <trans-unit id="cba36a0eedc905b6f646a4aa33b823e12a5331af" translate="yes" xml:space="preserve">
          <source>This class manages the objects that compose a transaction. A transaction produces a unique connection that is passed to every object part of the transaction.</source>
          <target state="translated">这个类管理组成事务的对象。一个事务产生一个唯一的连接,这个连接被传递给事务的每个对象部分。</target>
        </trans-unit>
        <trans-unit id="d0f9a7183a44f8d969371c4637d1ff1b06b30fd4" translate="yes" xml:space="preserve">
          <source>This class offers contextual information of a fired event in the EventsManager</source>
          <target state="translated">该类在EventsManager中提供了一个发射事件的上下文信息。</target>
        </trans-unit>
        <trans-unit id="148ea82ff93879fe00b01ec2cbcee467d27bc3af" translate="yes" xml:space="preserve">
          <source>This class partially borrows SecureRandom library from Ruby</source>
          <target state="translated">该类部分借用了Ruby中的SecureRandom库。</target>
        </trans-unit>
        <trans-unit id="0e12f8bf99108b5cf596556402bf49c3529703eb" translate="yes" xml:space="preserve">
          <source>This class reads and compiles Volt templates into PHP plain code</source>
          <target state="translated">该类读取并将Volt模板编译成PHP纯代码。</target>
        </trans-unit>
        <trans-unit id="26ff527a8cbf00ea3e0fa2de97940526a1b2c2fe" translate="yes" xml:space="preserve">
          <source>This class represents a relationship between two models</source>
          <target state="translated">该类表示两个模型之间的关系</target>
        </trans-unit>
        <trans-unit id="e6fb8a3c415089544ba83a5d567fe718e5d729af" translate="yes" xml:space="preserve">
          <source>This class represents every route added to the router</source>
          <target state="translated">这个类代表每一条添加到路由器的路由。</target>
        </trans-unit>
        <trans-unit id="ae9b2cb497909d3a27ae689a3268c8734ec22fc0" translate="yes" xml:space="preserve">
          <source>This class represents the status returned by a PHQL statement like INSERT, UPDATE or DELETE. It offers context information and the related messages produced by the model which finally executes the operations when it fails</source>
          <target state="translated">该类表示PHQL语句返回的状态,如INSERT、UPDATE或DELETE。它提供了上下文信息和模型产生的相关消息,当操作失败时,模型最终会执行这些操作</target>
        </trans-unit>
        <trans-unit id="0b1ac4270f7af78c43a08eaa98e3022f43189a46" translate="yes" xml:space="preserve">
          <source>This class takes a PHQL intermediate representation and executes it.</source>
          <target state="translated">该类采用PHQL的中间表示法并执行它。</target>
        </trans-unit>
        <trans-unit id="b9b523d5957a0504d6203583341a6205c3ddfa79" translate="yes" xml:space="preserve">
          <source>This class will be thrown to exit a try/catch block for isolated transactions</source>
          <target state="translated">该类将被抛出,以退出隔离交易的try/catch块。</target>
        </trans-unit>
        <trans-unit id="a65dd3bc941d55b2949f417965c47cd65cf54889" translate="yes" xml:space="preserve">
          <source>This code executes the following SQL in MySQL:</source>
          <target state="translated">这段代码在MySQL中执行以下SQL。</target>
        </trans-unit>
        <trans-unit id="473b5168ccd8ab26f187d274d209118dc3866027" translate="yes" xml:space="preserve">
          <source>This component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF).</source>
          <target state="translated">该组件帮助开发人员完成常见的安全任务,如密码散列和跨站点请求伪造保护(CSRF)。</target>
        </trans-unit>
        <trans-unit id="9dc8b5d404ce74e95646276c04583f6e773cc076" translate="yes" xml:space="preserve">
          <source>This component allow you to set up a different base URI for static resources in the application:</source>
          <target state="translated">该组件允许你为应用程序中的静态资源设置不同的基本URI。</target>
        </trans-unit>
        <trans-unit id="60de99e77ce46a6ce7a566092e127c9ce576a037" translate="yes" xml:space="preserve">
          <source>This component allows Phalcon\Mvc\Collection to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&amp;gt;x or array[x].</source>
          <target state="translated">该组件允许Phalcon \ Mvc \ Collection返回没有关联实体的行。该对象实现ArrayAccess接口，以允许以object-&amp;gt; x或array [x]的形式访问对象。</target>
        </trans-unit>
        <trans-unit id="7fbd64c6ec777f6d87d93bd3120aa1a1bd3b797a" translate="yes" xml:space="preserve">
          <source>This component allows Phalcon\Mvc\Model to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&amp;gt;x or array[x].</source>
          <target state="translated">该组件允许Phalcon \ Mvc \ Model返回没有关联实体的行。该对象实现ArrayAccess接口，以允许以object-&amp;gt; x或array [x]的形式访问对象。</target>
        </trans-unit>
        <trans-unit id="fb6cd78133f4615eb573574f6630e832ff8f5753" translate="yes" xml:space="preserve">
          <source>This component allows for a lower level database manipulation than using traditional models.</source>
          <target state="translated">与使用传统模型相比,该组件可以进行低级别的数据库操作。</target>
        </trans-unit>
        <trans-unit id="57955ffda639b9f9495f02aecd4310b55cc311cc" translate="yes" xml:space="preserve">
          <source>This component allows the developer to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; and others.</source>
          <target state="translated">该组件使开发人员可以控制何时渲染视图及其位置。另外，该组件可以利用模板引擎（例如&lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;等）中可用的视图继承。</target>
        </trans-unit>
        <trans-unit id="3f899e2efd4bab87c5eeef75386e8e6b0978a82f" translate="yes" xml:space="preserve">
          <source>This component allows to Phalcon\Mvc\Model returns large resultsets with the minimum memory consumption Resultsets can be traversed using a standard foreach or a while statement. If a resultset is serialized it will dump all the rows into a big array. Then unserialize will retrieve the rows as they were before serializing.</source>
          <target state="translated">该组件允许Phalcon/Mvc/Model以最小的内存消耗返回大的结果集。 结果集可以使用标准的foreach或while语句来遍历。如果一个结果集被序列化,它将把所有的行转储到一个大数组中。然后unserialize将检索序列化之前的行。</target>
        </trans-unit>
        <trans-unit id="29aa9758ff123fff9b470dcd7614f188311f779e" translate="yes" xml:space="preserve">
          <source>This component allows to build forms using an object-oriented interface</source>
          <target state="translated">该组件允许使用一个面向对象的接口来构建表单。</target>
        </trans-unit>
        <trans-unit id="5a7a6de9087fbf1f38ae20c038fd86ec757e7aed" translate="yes" xml:space="preserve">
          <source>This component allows to create CLI applications using Phalcon</source>
          <target state="translated">该组件允许使用Phalcon创建CLI应用程序。</target>
        </trans-unit>
        <trans-unit id="abb34ff83add7eb77eecb7823a9f33f5e28d432c" translate="yes" xml:space="preserve">
          <source>This component allows to render views without hierarchical levels</source>
          <target state="translated">该组件允许呈现没有层次的视图。</target>
        </trans-unit>
        <trans-unit id="7e9790e5d876bd18b44479d314aaf0ac156fc011" translate="yes" xml:space="preserve">
          <source>This component can be used in a plain HTML+PHP view or in a &lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt; template.</source>
          <target state="translated">该组件可以在纯HTML + PHP视图或&lt;a href=&quot;volt&quot;&gt;&lt;em&gt;Volt&lt;/em&gt;&lt;/a&gt;模板中使用。</target>
        </trans-unit>
        <trans-unit id="ad15f4dbf16e4acdb17f5ad6a44a01c9846b33bc" translate="yes" xml:space="preserve">
          <source>This component encapsulates all the complex operations behind instantiating every component needed and integrating it with the rest to allow the MVC pattern to operate as desired.</source>
          <target state="translated">该组件封装了实例化每个所需组件背后的所有复杂操作,并将其与其他组件集成在一起,以使MVC模式能够按需运行。</target>
        </trans-unit>
        <trans-unit id="ba5e79ff5cc358b4232729ced529d0a114038be6" translate="yes" xml:space="preserve">
          <source>This component gives you the ability to use this algorithm in a simple way:</source>
          <target state="translated">这个组件让你能够以一种简单的方式使用这种算法。</target>
        </trans-unit>
        <trans-unit id="e7fc3a64877f951d3fa117dfb9258db003e56d03" translate="yes" xml:space="preserve">
          <source>This component helps to load your project classes automatically based on some conventions</source>
          <target state="translated">这个组件可以帮助你根据一些约定自动加载你的项目类。</target>
        </trans-unit>
        <trans-unit id="e070e940109b44807ff320b67e664c774b3e1c19" translate="yes" xml:space="preserve">
          <source>This component helps to separate session data into &amp;ldquo;namespaces&amp;rdquo;. Working by this way you can easily create groups of session variables into the application</source>
          <target state="translated">该组件有助于将会话数据分成&amp;ldquo;命名空间&amp;rdquo;。通过这种方式，您可以轻松地在应用程序中创建会话变量组</target>
        </trans-unit>
        <trans-unit id="d213cda49c9ae1e533ad6b2e4c659562703f5c2c" translate="yes" xml:space="preserve">
          <source>This component implements a high level abstraction for NoSQL databases which works with documents</source>
          <target state="translated">这个组件实现了NoSQL数据库的高级抽象,它可以与文档一起工作。</target>
        </trans-unit>
        <trans-unit id="5889d45be839fbfe9ad24313fd86f22690a993bf" translate="yes" xml:space="preserve">
          <source>This component is automatically registered in the services container as &amp;lsquo;security&amp;rsquo;, you can re-register it to setup its options:</source>
          <target state="translated">此组件会自动在服务容器中注册为&amp;ldquo;安全性&amp;rdquo;，您可以重新注册以设置其选项：</target>
        </trans-unit>
        <trans-unit id="f5060d4355e0c5d915d79aaf1f0a0ba4ab661096" translate="yes" xml:space="preserve">
          <source>This component is designed to initially work in memory. This provides ease of use and speed in accessing every aspect of the list. The &lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon\Acl&lt;/em&gt;&lt;/a&gt; constructor takes as its first parameter an adapter used to retrieve the information related to the control list. An example using the memory adapter is below:</source>
          <target state="translated">该组件旨在最初在内存中工作。这在访问列表的每个方面都提供了易用性和速度。该&lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;尔康\的Acl&lt;/em&gt;&lt;/a&gt;的构造函数作为其第一个参数用于获取有关控制列表中的信息的适配器。下面是使用内存适配器的示例：</target>
        </trans-unit>
        <trans-unit id="3848a008ccbbe55f15e7c2ac89ed7964356544ae" translate="yes" xml:space="preserve">
          <source>This component is designed to provide a very simple usage:</source>
          <target state="translated">该组件的设计提供了一个非常简单的用法。</target>
        </trans-unit>
        <trans-unit id="65fd853b534b215347f20e65c96493b242e6a400" translate="yes" xml:space="preserve">
          <source>This component is intended to lower level database operations. If you want to interact with databases using higher level of abstraction use Phalcon\Mvc\Model.</source>
          <target state="translated">这个组件是为了低级的数据库操作。如果你想使用更高层次的抽象与数据库交互,请使用Phalcon\Mvc\Model。</target>
        </trans-unit>
        <trans-unit id="844c07fb8c8cb6cdfcf04c379ad8a310e96a6605" translate="yes" xml:space="preserve">
          <source>This component makes use of &amp;lsquo;formatters&amp;rsquo; to format messages before sending them to the backend. The formatters available are:</source>
          <target state="translated">该组件利用&amp;ldquo;格式化程序&amp;rdquo;来格式化消息，然后再将其发送到后端。可用的格式化程序有：</target>
        </trans-unit>
        <trans-unit id="88a56cd957ec22a13fa9980a15a9f9d41e74dc45" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to cache or no cache the parsed and processed annotations thus improving the performance or providing facilities to development/testing:</source>
          <target state="translated">该组件利用适配器来缓存或不缓存解析和处理的注释,从而提高性能或为开发/测试提供便利。</target>
        </trans-unit>
        <trans-unit id="56334adc443c140a461831ec9ee7f12d6c794b33" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to define the behavior of the messages after being passed to the Flasher:</source>
          <target state="translated">该组件利用适配器来定义消息传递给Flasher后的行为。</target>
        </trans-unit>
        <trans-unit id="517e14ec7a89f08d1acfe0ef6e14677d02f833f7" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate different sources of data:</source>
          <target state="translated">该组件利用适配器来封装不同的数据源。</target>
        </trans-unit>
        <trans-unit id="3da0c844f394f08f0a5031cd073730894c94417d" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate specific database system details. Phalcon uses &lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; to connect to databases. The following database engines are supported:</source>
          <target state="translated">该组件利用适配器来封装特定的数据库系统详细信息。Phalcon使用&lt;a href=&quot;http://www.php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt;连接到数据库。支持以下数据库引擎：</target>
        </trans-unit>
        <trans-unit id="787c5efada82518da613b927b0bccf18456c3001" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to encapsulate specific image manipulator programs. The following image manipulator programs are supported:</source>
          <target state="translated">该组件使用适配器来封装特定的图像处理程序。支持以下图像处理程序。</target>
        </trans-unit>
        <trans-unit id="3bfebc589c44d12bc8b6341706a00d9bf5529a03" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to read translation messages from different sources in a unified way.</source>
          <target state="translated">该组件利用适配器以统一的方式读取不同来源的翻译信息。</target>
        </trans-unit>
        <trans-unit id="933b3b7248b648cf06cea9e05a7eb935605cd065" translate="yes" xml:space="preserve">
          <source>This component makes use of adapters to store the logged messages. The use of adapters allows for a common logging interface which provides the ability to easily switch backends if necessary. The adapters supported are:</source>
          <target state="translated">该组件利用适配器来存储记录的消息。适配器的使用允许一个通用的日志接口,它提供了在必要时轻松切换后端的能力。支持的适配器有:</target>
        </trans-unit>
        <trans-unit id="bf6a83dfb16de5400201ec766c16294f2a9d4a6d" translate="yes" xml:space="preserve">
          <source>This component only works with UTF-8. The PREG extension needs to be compiled with UTF-8 support.</source>
          <target state="translated">该组件仅适用于UTF-8。PREG扩展需要在编译时支持UTF-8。</target>
        </trans-unit>
        <trans-unit id="4e12c85bfc194575eba8772fe50703d5e960f97b" translate="yes" xml:space="preserve">
          <source>This component provides a forms manager that can be used by the developer to register forms and access them via the service locator:</source>
          <target state="translated">该组件提供了一个表单管理器,开发者可以使用它来注册表单并通过服务定位器来访问它们。</target>
        </trans-unit>
        <trans-unit id="75a4b9f8fdfae59ff4fcfafdb602ccca218d0c49" translate="yes" xml:space="preserve">
          <source>This component provides a set of functions to improve the security in Phalcon applications</source>
          <target state="translated">该组件提供了一组功能,以提高Phalcon应用程序的安全性。</target>
        </trans-unit>
        <trans-unit id="2aeb5f841025bc13bd8a61f244b4336c820c30e9" translate="yes" xml:space="preserve">
          <source>This component provides a variant that&amp;rsquo;s integrated with the &lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;annotations&lt;/em&gt;&lt;/a&gt; service. Using this strategy you can write the routes directly in the controllers instead of adding them in the service registration:</source>
          <target state="translated">该组件提供了与&lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;注释&lt;/em&gt;&lt;/a&gt;服务集成的变体。使用此策略，您可以直接在控制器中编写路由，而不是将其添加到服务注册中：</target>
        </trans-unit>
        <trans-unit id="2f8ab349e815e292a5085fe67b3765f479307ada" translate="yes" xml:space="preserve">
          <source>This component uses adapters, these help Phalcon to speak with those external template engines in a unified way, let&amp;rsquo;s see how to do that integration.</source>
          <target state="translated">该组件使用适配器，这些适配器帮助Phalcon以统一的方式与那些外部模板引擎进行通信，让我们看看如何进行集成。</target>
        </trans-unit>
        <trans-unit id="923658f7cd92c6657709ad391fa808d718c68d4b" translate="yes" xml:space="preserve">
          <source>This component uses by default PHP itself as the template engine, therefore views should have the .phtml extension. If the views directory is &lt;em&gt;app/views&lt;/em&gt; then view component will find automatically for these 3 view files.</source>
          <target state="translated">默认情况下，此组件使用PHP本身作为模板引擎，因此视图应具有.phtml扩展名。如果views目录为&lt;em&gt;app / views，&lt;/em&gt;则视图组件将自动为这3个视图文件查找。</target>
        </trans-unit>
        <trans-unit id="0ba79abaa8bc3f21c6954270a50f4e8887099925" translate="yes" xml:space="preserve">
          <source>This components controls the initialization of models, keeping record of relations between the different models of the application.</source>
          <target state="translated">该组件控制模型的初始化,记录应用中不同模型之间的关系。</target>
        </trans-unit>
        <trans-unit id="054f6c1a642c815bc404481c4107e391831a950f" translate="yes" xml:space="preserve">
          <source>This components helps in the generation of: URIs, URLs and Paths</source>
          <target state="translated">该组件有助于生成:URIs,URLs 和 Paths</target>
        </trans-unit>
        <trans-unit id="2e0b3a781af669b521cf14a3ce41ea8a0552cb1d" translate="yes" xml:space="preserve">
          <source>This example does not contain a config file, most test cases however, do need one. You can add it to the DI to get the UnitTestCase file.</source>
          <target state="translated">这个例子不包含配置文件,但是大多数测试用例都需要一个。你可以把它添加到DI中去获取UnitTestCase文件。</target>
        </trans-unit>
        <trans-unit id="6e74ee3d94516279f32e29514cabd9f52556ed4e" translate="yes" xml:space="preserve">
          <source>This example is very simple, a customer is queried and can be used as required, for example, to show its name. This also applies if we retrieve a set of invoices to show customers that correspond to these invoices:</source>
          <target state="translated">这个例子非常简单,查询到一个客户,可以根据需要,比如显示其名称。如果我们检索一组发票,显示与这些发票对应的客户,也适用于此。</target>
        </trans-unit>
        <trans-unit id="20fbfec333f4c3fae2d3a558a6f47201f7cbb0ad" translate="yes" xml:space="preserve">
          <source>This exception is generated when a model fails to save a record Phalcon\Mvc\Model must be set up to have this behavior</source>
          <target state="translated">当一个模型无法保存记录时就会产生这个异常,Phalcon/Mvc/Model必须被设置为具有这种行为。</target>
        </trans-unit>
        <trans-unit id="7e2b39c04f77cf35046d6632b65c3e6428170e9e" translate="yes" xml:space="preserve">
          <source>This feature of the cache component, allows the developer to implement a multi-level cache. This new feature is very useful because you can save the same data in several cache locations with different lifetimes, reading first from the one with the faster adapter and ending with the slowest one until the data expires:</source>
          <target state="translated">缓存组件的这一功能,允许开发者实现多级缓存。这个新功能非常有用,因为你可以将相同的数据保存在多个不同寿命的缓存位置,先从适配器速度较快的那个位置读取,然后从最慢的那个位置结束,直到数据过期。</target>
        </trans-unit>
        <trans-unit id="ca5fd106e60c429f965ed2e9d8b871253f1d1cdc" translate="yes" xml:space="preserve">
          <source>This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in your database server configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</source>
          <target state="translated">这个功能考虑到了连接字符集,所以建议在连接参数或数据库服务器配置中定义正确的字符集,因为错误的字符集会在存储或检索数据时产生不必要的影响。</target>
        </trans-unit>
        <trans-unit id="46ed69629e29dcfc8db4ac20cb2f66ebefdb61e4" translate="yes" xml:space="preserve">
          <source>This gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the &lt;code&gt;find()/:code:`findFirst()&lt;/code&gt; method to force every query to be cached:</source>
          <target state="translated">这使我们可以自由缓存特定的查询，但是，如果要全局缓存对模型执行的每个查询，我们可以覆盖 &lt;code&gt;find()/:code:`findFirst()&lt;/code&gt; 方法来强制每个查询被缓存：</target>
        </trans-unit>
        <trans-unit id="7a64e8b2e52980f676e4d01664bc97e642bf173e" translate="yes" xml:space="preserve">
          <source>This gives you full control on how the cache should be implemented for each model. If this strategy is common to several models you can create a base class for all of them:</source>
          <target state="translated">这让您可以完全控制每个模型的缓存应该如何实现。如果这个策略是几个模型共同的,你可以为所有的模型创建一个基类。</target>
        </trans-unit>
        <trans-unit id="95553944413a4c19699e0802809d78c431b5d899" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of available helpers and their arguments. Please visit the &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt; page in the API for a complete reference.</source>
          <target state="translated">本指南无意成为可用助手及其参数的完整文档。请访问API中的&lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt;页面以获取完整参考。</target>
        </trans-unit>
        <trans-unit id="972d5f64e94ba9f517fe3c6f02e96c293557ecb1" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of available methods and their arguments. Please visit the &lt;a href=&quot;https://docs.phalconphp.com/en/latest/api/index.html&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt; for a complete reference.</source>
          <target state="translated">本指南无意成为可用方法及其参数的完整文档。请访问&lt;a href=&quot;https://docs.phalconphp.com/en/latest/api/index.html&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;以获取完整参考。</target>
        </trans-unit>
        <trans-unit id="79e598174d7941389a0cec0834ec0d74ff072ff5" translate="yes" xml:space="preserve">
          <source>This guide is not intended to be a complete documentation of the &lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt; extension. Please visit its the &lt;a href=&quot;http://www.php.net/manual/en/book.intl.php&quot;&gt;documentation&lt;/a&gt; of the extension for a reference.</source>
          <target state="translated">本指南无意作为&lt;a href=&quot;http://pecl.php.net/package/intl&quot;&gt;intl&lt;/a&gt;扩展的完整文档。请访问其扩展&lt;a href=&quot;http://www.php.net/manual/en/book.intl.php&quot;&gt;文档&lt;/a&gt;以获取参考。</target>
        </trans-unit>
        <trans-unit id="9221f7d158a322a1486f5e0ded6b00336daed2c9" translate="yes" xml:space="preserve">
          <source>This header provides a safer way to cache the pages served. We simply must specify a time in seconds telling the browser how long it must keep the page in its cache:</source>
          <target state="translated">这个头提供了一个更安全的方式来缓存所服务的页面。我们只需指定一个以秒为单位的时间,告诉浏览器必须在缓存中保留页面多长时间。</target>
        </trans-unit>
        <trans-unit id="b042172520ee5079c8c8a6e32acda4525f4aaf40" translate="yes" xml:space="preserve">
          <source>This injection type passes the dependencies/arguments to the class constructor. Let&amp;rsquo;s pretend we have the following component:</source>
          <target state="translated">这种注入类型将依赖项/参数传递给类构造函数。假设我们具有以下组件：</target>
        </trans-unit>
        <trans-unit id="6728335fc949382ab9e6060c37f62eeb2c9f5d57" translate="yes" xml:space="preserve">
          <source>This is a base class for Phalcon\Mvc\Model validators</source>
          <target state="translated">这是Phalcon/Mvc/Model验证器的一个基类</target>
        </trans-unit>
        <trans-unit id="93ac1feb3a735c0aa48e71454ca5b2c62f752765" translate="yes" xml:space="preserve">
          <source>This is a base class for form elements</source>
          <target state="translated">这是一个表单元素的基类</target>
        </trans-unit>
        <trans-unit id="3b382497354525cfcf087e3a6af2524d9e649105" translate="yes" xml:space="preserve">
          <source>This is a base class for logger formatters</source>
          <target state="translated">这是一个用于记录仪格式化的基类。</target>
        </trans-unit>
        <trans-unit id="0e879c38c0c253de79cc69d48ffe9cc40331035b" translate="yes" xml:space="preserve">
          <source>This is a base class for validators</source>
          <target state="translated">这是一个验证器的基类</target>
        </trans-unit>
        <trans-unit id="f04c34626fe098ee852f468631503956c5eeefdd" translate="yes" xml:space="preserve">
          <source>This is a variant of the Phalcon\Flash that immediately outputs any message passed to it</source>
          <target state="translated">这是Phalcon/Flash的一个变体,它可以立即输出任何传递给它的消息。</target>
        </trans-unit>
        <trans-unit id="0e5071b40d037749facf654c45ca6003940b48bb" translate="yes" xml:space="preserve">
          <source>This is a variant of the standard Phalcon\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually providing a full stack framework</source>
          <target state="translated">这是标准Phalcon/Di的一个变体。默认情况下,它自动注册框架提供的所有服务。多亏了这一点,开发者不需要单独注册每个服务,提供一个完整的堆栈框架。</target>
        </trans-unit>
        <trans-unit id="6ac9406ecaee3c942f18333d21e4e3ef61a978af" translate="yes" xml:space="preserve">
          <source>This is a variant of the standard Phalcon\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually. This class is specially suitable for CLI applications</source>
          <target state="translated">这是标准Phalcon/Di的一个变体。默认情况下,它自动注册框架提供的所有服务。因此,开发者不需要单独注册每个服务。这个类特别适合CLI应用</target>
        </trans-unit>
        <trans-unit id="98a4d435692b40ac5a405d35ef669e3f6edc73ca" translate="yes" xml:space="preserve">
          <source>This is a very simple tutorial and as you can see, it&amp;rsquo;s easy to start building an application using Phalcon. The fact that Phalcon is an extension on your web server has not interfered with the ease of development or features available. We invite you to continue reading the manual so that you can discover additional features offered by Phalcon!</source>
          <target state="translated">这是一个非常简单的教程，如您所见，使用Phalcon开始构建应用程序很容易。Phalcon是您的Web服务器上的扩展，这一事实并未干扰开发或可用功能的简便性。我们邀请您继续阅读手册，以便发现Phalcon提供的其他功能！</target>
        </trans-unit>
        <trans-unit id="f890b6649305471bcdb05fac8b384cf7261d4e16" translate="yes" xml:space="preserve">
          <source>This is an class for binding models into params for handler</source>
          <target state="translated">这是一个用于将模型绑定到处理程序的参数的类。</target>
        </trans-unit>
        <trans-unit id="b76f8288491593c4919f5a43a017a463d109a1c7" translate="yes" xml:space="preserve">
          <source>This is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within &lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon\Mvc\Dispatcher&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">这是一个重要的过程，与MVC流程本身（尤其是控制器部分）有很大关系。该工作发生在控制器调度程序内。读取，加载和实例化控制器文件。然后执行所需的动作。如果某个动作将流转发到另一个控制器/动作，则控制器调度程序将再次启动。为了更好地说明这一点，下面的示例大致显示了在&lt;a href=&quot;../api/phalcon_mvc_dispatcher&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Dispatcher&lt;/em&gt;&lt;/a&gt;中执行的过程：</target>
        </trans-unit>
        <trans-unit id="339ff50b6e1d69f191929ec709b7dc8598d57cf4" translate="yes" xml:space="preserve">
          <source>This is an optional base class for ORM behaviors</source>
          <target state="translated">这是ORM行为的一个可选的基类。</target>
        </trans-unit>
        <trans-unit id="778f1e2e771c01560c51d970903c4f513a79a17f" translate="yes" xml:space="preserve">
          <source>This is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.</source>
          <target state="translated">这是另一种针对网站和应用程序的常见攻击。设计用于执行用户注册或添加评论等任务的表单容易受到这种攻击。</target>
        </trans-unit>
        <trans-unit id="6783275361b83c486657bbfd997dce35c6221009" translate="yes" xml:space="preserve">
          <source>This is different to &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; who&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method uses controllers and actions as parameters:</source>
          <target state="translated">这与&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt;的 &lt;code&gt;render()&lt;/code&gt; 方法使用控制器和操作作为参数不同：</target>
        </trans-unit>
        <trans-unit id="1323ae3621b03444ef40592d920a99e3788e04fe" translate="yes" xml:space="preserve">
          <source>This is exactly the same as:</source>
          <target state="translated">这与。</target>
        </trans-unit>
        <trans-unit id="3c10453a61f4b28f8a2bea093ecead722ddb3422" translate="yes" xml:space="preserve">
          <source>This is main action it will be shown for every controller or action executed within the application.</source>
          <target state="translated">这是主要的操作,它将被显示在应用程序中的每个控制器或操作上。</target>
        </trans-unit>
        <trans-unit id="7dd45a8fe13eb1a6696442a16bf78160319ab740" translate="yes" xml:space="preserve">
          <source>This is the base class for Phalcon\Annotations adapters</source>
          <target state="translated">这是Phalcon/Annotations适配器的基础类。</target>
        </trans-unit>
        <trans-unit id="c6d15058011c3edbf657f7cd3e13f9d5723f3539" translate="yes" xml:space="preserve">
          <source>This is the base class for Phalcon\Mvc\Dispatcher and Phalcon\Cli\Dispatcher. This class can&amp;rsquo;t be instantiated directly, you can use it to create your own dispatchers.</source>
          <target state="translated">这是Phalcon \ Mvc \ Dispatcher和Phalcon \ Cli \ Dispatcher的基类。此类不能直接实例化，可以使用它来创建自己的调度程序。</target>
        </trans-unit>
        <trans-unit id="8a63a2f46376f02432dd399a3e626280005d62e1" translate="yes" xml:space="preserve">
          <source>This is the base class to each database dialect. This implements common methods to transform intermediate code into its RDBMS related syntax</source>
          <target state="translated">这是每个数据库方言的基类。它实现了将中间代码转换为RDBMS相关语法的通用方法。</target>
        </trans-unit>
        <trans-unit id="ae180daab3cf6681e5f67f27da6605b8d4cf9703" translate="yes" xml:space="preserve">
          <source>This is the view related to the action. It only will be shown when the &amp;ldquo;show&amp;rdquo; action was executed.</source>
          <target state="translated">这是与操作有关的视图。仅在执行&amp;ldquo;显示&amp;rdquo;操作时才会显示。</target>
        </trans-unit>
        <trans-unit id="078602b533c42e9f995174b49ea32f3c744540cc" translate="yes" xml:space="preserve">
          <source>This is the view related to the controller. It only will be shown for every action executed within the controller &amp;ldquo;posts&amp;rdquo;. All the code implemented in the layout will be reused for all the actions in this controller.</source>
          <target state="translated">这是与控制器相关的视图。仅针对控制器&amp;ldquo;发布&amp;rdquo;中执行的每个动作显示该消息。布局中实现的所有代码将被该控制器中的所有操作重用。</target>
        </trans-unit>
        <trans-unit id="296f086b11e18e03d147e09abce9bc0fb136f68f" translate="yes" xml:space="preserve">
          <source>This is typically for an Error 404 page.</source>
          <target state="translated">这通常是针对错误的404页面。</target>
        </trans-unit>
        <trans-unit id="edf2e70e936fea7bc0b55ba78b92471bce9274e7" translate="yes" xml:space="preserve">
          <source>This last code will generate the following HTML:</source>
          <target state="translated">最后这段代码将生成以下HTML。</target>
        </trans-unit>
        <trans-unit id="074754306382420c872d60c3d848ca5b455c9bc9" translate="yes" xml:space="preserve">
          <source>This logger sends messages in HTTP response headers that are displayed by &lt;a href=&quot;http://www.firephp.org/&quot;&gt;FirePHP&lt;/a&gt;, a &lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt; extension for Firefox.</source>
          <target state="translated">该记录器在由&lt;a href=&quot;http://www.firephp.org/&quot;&gt;FirePHP&lt;/a&gt;（Firefox 的&lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt;扩展）显示的HTTP响应标头中发送消息。</target>
        </trans-unit>
        <trans-unit id="ecbb4085e5d93e6aadd8a622ba3e88ee3598d34b" translate="yes" xml:space="preserve">
          <source>This logger sends messages to the system logger. The syslog behavior may vary from one operating system to another.</source>
          <target state="translated">这个记录器向系统记录器发送消息。不同的操作系统,syslog行为可能有所不同。</target>
        </trans-unit>
        <trans-unit id="07f8c3d8ddadaa85446a6ec3f2d15b889fa9ff4e" translate="yes" xml:space="preserve">
          <source>This logger uses plain files to log any kind of data. By default all logger files are opened using append mode which opens the files for writing only; placing the file pointer at the end of the file. If the file does not exist, an attempt will be made to create it. You can change this mode by passing additional options to the constructor:</source>
          <target state="translated">该记录仪使用普通文件来记录任何类型的数据。默认情况下,所有记录仪文件均使用追加模式打开,该模式仅打开用于写入的文件;将文件指针放在文件末尾。如果文件不存在,将尝试创建该文件。您可以通过向构造函数传递附加选项来更改该模式。</target>
        </trans-unit>
        <trans-unit id="ece6527fe732dfda662c3c9afc159c4492b9bf96" translate="yes" xml:space="preserve">
          <source>This marks an attribute as a mapped column</source>
          <target state="translated">这标志着一个属性是一个映射的列。</target>
        </trans-unit>
        <trans-unit id="6b79b358e48cb0e4ca2449465053985869cedd70" translate="yes" xml:space="preserve">
          <source>This means that when you get a related record you could intercept how the data is obtained by implementing the corresponding method:</source>
          <target state="translated">这意味着,当你得到一个相关记录时,你可以通过实现相应的方法来截取数据的获取方式。</target>
        </trans-unit>
        <trans-unit id="52b125ed0f20b235e80dddbe6339f27a2b991a79" translate="yes" xml:space="preserve">
          <source>This method can be invoked from the controller or from a superior view layer to interfere with the rendering process.</source>
          <target state="translated">该方法可以从控制器或从上级视图层调用,以干扰渲染过程。</target>
        </trans-unit>
        <trans-unit id="02f8002624e6995308ae18f1b73f35a074e2091f" translate="yes" xml:space="preserve">
          <source>This method is automatically called in Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.</source>
          <target state="translated">这个方法在Phalcon/Db/Adapter/Pdo构造函数中被自动调用。当你需要恢复数据库连接时调用它。</target>
        </trans-unit>
        <trans-unit id="6931118845ad954b3b234f2d870b572eaab6aa9c" translate="yes" xml:space="preserve">
          <source>This method is automatically called in \Phalcon\Db\Adapter\Pdo constructor. Call it when you need to restore a database connection.</source>
          <target state="translated">这个方法在Phalcon/Db/Adapter/Pdo构造函数中被自动调用。当你需要恢复数据库连接时调用它。</target>
        </trans-unit>
        <trans-unit id="2947348e2526cd515fa2fc10b6db7ef47e6c560a" translate="yes" xml:space="preserve">
          <source>This method is defined in the model.</source>
          <target state="translated">此方法在模型中定义。</target>
        </trans-unit>
        <trans-unit id="4a05a1e4b20c32aa5dbffc7c19383275d9d6193c" translate="yes" xml:space="preserve">
          <source>This method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:</source>
          <target state="translated">这种方法提供了更大的自由度,可以随心所欲地构建依赖关系,但是,如果不需要完全改变依赖关系的定义,就很难从外部改变一些参数。</target>
        </trans-unit>
        <trans-unit id="dcdc165c04c56a7d62b6ed6091c0c6f8e98065ae" translate="yes" xml:space="preserve">
          <source>This method receives the notifications from the EventsManager</source>
          <target state="translated">该方法从EventsManager接收通知。</target>
        </trans-unit>
        <trans-unit id="c9ae1e3659012aa285d2a7017c27198ec13ab5a4" translate="yes" xml:space="preserve">
          <source>This method scales the images using liquid rescaling method. Only support Imagick</source>
          <target state="translated">本方法使用液体重缩放方法缩放图像。仅支持Imagick</target>
        </trans-unit>
        <trans-unit id="cee14822dc1453334bbb996683bbb2049f35d4d1" translate="yes" xml:space="preserve">
          <source>This method verifies which values are different from &amp;ldquo;&amp;rdquo; (empty string) and null and takes them into account to create the search criteria:</source>
          <target state="translated">此方法验证哪些值不同于&amp;ldquo;&amp;rdquo;（空字符串）和null，然后将它们考虑在内以创建搜索条件：</target>
        </trans-unit>
        <trans-unit id="75984b880e523cf39008dc85797a72f99c41d7b0" translate="yes" xml:space="preserve">
          <source>This only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds.</source>
          <target state="translated">这只需要做一次,除非你的发行版发生变化,或者你想从稳定版切换到夜间构建。</target>
        </trans-unit>
        <trans-unit id="6ae575ddc4f0bfa38ad163525c2b97cfef09164b" translate="yes" xml:space="preserve">
          <source>This part of the application is implemented in the component &amp;ldquo;Elements&amp;rdquo; (app/library/Elements.php).</source>
          <target state="translated">该应用程序的这一部分在组件&amp;ldquo;元素&amp;rdquo;（app / library / Elements.php）中实现。</target>
        </trans-unit>
        <trans-unit id="b1d291fd2c806a8d9fd93db189578bd0167ef86e" translate="yes" xml:space="preserve">
          <source>This piece of code can be run using:</source>
          <target state="translated">这段代码可以用以下方法运行。</target>
        </trans-unit>
        <trans-unit id="2a2b77307f40f6e987fe950b380d6677090d841d" translate="yes" xml:space="preserve">
          <source>This produces the following HTML:</source>
          <target state="translated">这将产生以下HTML。</target>
        </trans-unit>
        <trans-unit id="b3ab1502b876ba83255b3b2c9b07616d49384d2e" translate="yes" xml:space="preserve">
          <source>This project follows a quite similar structure to INVO. Once you open the application in your browser &lt;a href=&quot;http://localhost/vokuro&quot;&gt;http://localhost/vokuro&lt;/a&gt; you&amp;rsquo;ll see something like this:</source>
          <target state="translated">该项目遵循与INVO非常相似的结构。在浏览器&lt;a href=&quot;http://localhost/vokuro&quot;&gt;http：// localhost / vokuro中&lt;/a&gt;打开应用程序后，您将看到以下内容：</target>
        </trans-unit>
        <trans-unit id="c93c53294bff863df933975dd1ebe66004332145" translate="yes" xml:space="preserve">
          <source>This project uses &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; to load controllers, models, forms, etc. within the project and &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt; to load the project&amp;rsquo;s dependencies. So, the first thing you have to do before execute V&amp;ouml;kur&amp;oacute; is install its dependencies via &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt;. Assuming you have it correctly installed, type the following command in the console:</source>
          <target state="translated">本项目采用&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;尔康\装载机&lt;/em&gt;&lt;/a&gt;负载控制器，模型，表格等项目和内&lt;a href=&quot;https://getcomposer.org/&quot;&gt;作曲家&lt;/a&gt;加载项目的依赖。因此，在执行V&amp;ouml;kur&amp;oacute;之前，您要做的第一件事就是通过&lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt;安装其依赖项。假设您已正确安装它，请在控制台中键入以下命令：</target>
        </trans-unit>
        <trans-unit id="2ae7ca43916d1f0a39c0210ee8dde6d270108192" translate="yes" xml:space="preserve">
          <source>This strategy doesn&amp;rsquo;t require any customization and is implicitly used by all the metadata adapters.</source>
          <target state="translated">此策略不需要任何自定义，并且被所有元数据适配器隐式使用。</target>
        </trans-unit>
        <trans-unit id="ddf179c5fca66ac15d0e269e9aebed60899b4dca" translate="yes" xml:space="preserve">
          <source>This strategy makes use of &lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;annotations&lt;/em&gt;&lt;/a&gt; to describe the columns in a model:</source>
          <target state="translated">此策略利用&lt;a href=&quot;annotations&quot;&gt;&lt;em&gt;注释&lt;/em&gt;&lt;/a&gt;来描述模型中的列：</target>
        </trans-unit>
        <trans-unit id="bf4e7cf28dc691044b305d6a74c9ab85db126264" translate="yes" xml:space="preserve">
          <source>This tool is very useful because it help you to get the real time used to render the whole page including HTML parsing, Javascript evaluation and CSS styling.</source>
          <target state="translated">这个工具非常有用,因为它可以帮助你获得实时用于渲染整个页面,包括HTML解析、Javascript评估和CSS样式。</target>
        </trans-unit>
        <trans-unit id="51d91aa8bb94455aa75c06c78ccbbe5e7f0ebf53" translate="yes" xml:space="preserve">
          <source>This type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object/value:</source>
          <target state="translated">这个类型期望一个对象。由于object不需要解析,因为它已经是一个对象,可以说它不是真正的依赖注入,但是如果你想强制返回的依赖总是相同的对象/值,那么它是有用的。</target>
        </trans-unit>
        <trans-unit id="08ce1d12f02317c0340961a8e92f785e297101be" translate="yes" xml:space="preserve">
          <source>This type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:</source>
          <target state="translated">该类型期望一个有效的类的名称,返回一个指定类的对象,如果该类没有被加载,将使用自动加载器实例化。这种类型的定义不允许为类的构造函数或参数指定参数。</target>
        </trans-unit>
        <trans-unit id="815e82d39f7d6cfb40291ffc06b6a0f3fe8a2163" translate="yes" xml:space="preserve">
          <source>This validator is only for use with Phalcon\Mvc\Collection. If you are using Phalcon\Mvc\Model, please use the validators provided by Phalcon\Validation.</source>
          <target state="translated">该验证器仅用于Phalcon\Mvc\Collection。如果你正在使用Phalcon/Mvc/Model,请使用Phalcon/Validation提供的验证器。</target>
        </trans-unit>
        <trans-unit id="acadb8380f8ddb1bcaff63d4c4c224151325499d" translate="yes" xml:space="preserve">
          <source>This way of operation allows that events, virtual foreign keys and validations take part of the updating process. In summary, the following code:</source>
          <target state="translated">这种操作方式使得事件、虚拟外键和验证都能参与更新过程。综上所述,如下代码。</target>
        </trans-unit>
        <trans-unit id="667044c3f38d6fb8b5c0033c27c1b397807e2452" translate="yes" xml:space="preserve">
          <source>This way of working gives us many advantages:</source>
          <target state="translated">这种工作方式给我们带来了很多好处。</target>
        </trans-unit>
        <trans-unit id="9700195cde7a1ce0a408f387bf9c7e181ebaa429" translate="yes" xml:space="preserve">
          <source>This way, you can use it in controllers or views:</source>
          <target state="translated">这样,你可以在控制器或视图中使用它。</target>
        </trans-unit>
        <trans-unit id="9be5aceae203ac8ec7bc64d329ab7c76b584dc37" translate="yes" xml:space="preserve">
          <source>This will generate the following select tag with the value &amp;ldquo;Blue&amp;rdquo; selected:</source>
          <target state="translated">这将生成以下选择标签，并选择&amp;ldquo; Blue&amp;rdquo;值：</target>
        </trans-unit>
        <trans-unit id="e87a39e80ea5b673fdf20b0ead9826f21f51d475" translate="yes" xml:space="preserve">
          <source>This will ignore globally these fields on each INSERT/UPDATE operation on the whole application. If you want to ignore different attributes on different INSERT/UPDATE operations, you can specify the second parameter (boolean) - true for replacement. Forcing a default value can be done in the following way:</source>
          <target state="translated">这将在整个应用程序的每个INSERT/UPDATE操作中全局忽略这些字段。如果你想在不同的INSERT/UPDATE操作中忽略不同的属性,你可以指定第二个参数(boolean)--替换为true。强制使用默认值可以通过以下方式进行。</target>
        </trans-unit>
        <trans-unit id="33afe4cb861f5adc6e23901850b6e0127addcc7e" translate="yes" xml:space="preserve">
          <source>This will run any tests under the tests/ directory.</source>
          <target state="translated">这将运行test/目录下的任何测试。</target>
        </trans-unit>
        <trans-unit id="38554087b78ad00628f8a20a1d4196f43fc2e046" translate="yes" xml:space="preserve">
          <source>Though Phalcon\Registry exposes methods like __get(), offsetGet(), count() etc, it is not recommended to invoke them manually (these methods exist mainly to match the interfaces the registry implements): $registry-&amp;gt;__get(&amp;ldquo;property&amp;rdquo;) is several times slower than $registry-&amp;gt;property.</source>
          <target state="translated">尽管Phalcon \ Registry公开了__get（），offsetGet（），count（）等方法，但建议您不要手动调用它们（这些方法主要是为了匹配注册表实现的接口）：$ registry-&amp;gt; __ get（&amp;ldquo; property &amp;rdquo;）要比$ registry-&amp;gt; property慢几倍。</target>
        </trans-unit>
        <trans-unit id="9b933484e92a6c129a7a30257877978f9a07f527" translate="yes" xml:space="preserve">
          <source>Throughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try/catch block:</source>
          <target state="translated">在Phalcon文档的整个教程和示例中,有一个共同的元素就是捕获异常。这是一个try/catch块。</target>
        </trans-unit>
        <trans-unit id="d861c62f98b923688b9b92b880ed671374f9cc39" translate="yes" xml:space="preserve">
          <source>Throughout this first tutorial, we&amp;rsquo;ll walk you through the creation of an application with a simple registration form from the ground up. We will also explain the basic aspects of the framework&amp;rsquo;s behavior. If you are interested in automatic code generation tools for Phalcon, you can check our &lt;a href=&quot;tools&quot;&gt;&lt;em&gt;developer tools&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">在第一个教程中，我们将从头开始，通过简单的注册表单指导您创建应用程序。我们还将解释框架行为的基本方面。如果您对Phalcon的自动代码生成工具感兴趣，可以查看我们的&lt;a href=&quot;tools&quot;&gt;&lt;em&gt;开发人员工具&lt;/em&gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b92f659e297c6345e69b64c0a5a5095ad7190920" translate="yes" xml:space="preserve">
          <source>Throws an exception when a notice or warning is raised</source>
          <target state="translated">当发出通知或警告时,抛出一个异常。</target>
        </trans-unit>
        <trans-unit id="991e3e0d8e45ec64cbd223820ae67ab323e7e15c" translate="yes" xml:space="preserve">
          <source>Throws an internal exception</source>
          <target state="translated">抛出一个内部异常</target>
        </trans-unit>
        <trans-unit id="bfdba0dc305bd8fbe4070ad66a0462ef37429197" translate="yes" xml:space="preserve">
          <source>Time to run &amp;ndash; is an integer number of seconds to allow a worker to run this job. This time is counted from the moment a worker reserves this job.</source>
          <target state="translated">运行时间&amp;ndash;是允许工人运行此作业的秒数的整数。此时间从工人保留这份工作的那一刻开始计算。</target>
        </trans-unit>
        <trans-unit id="0153174ca6dc4520c8728a194d64aa96dc40ff58" translate="yes" xml:space="preserve">
          <source>Timestamp when the profile ended</source>
          <target state="translated">档案结束的时间戳</target>
        </trans-unit>
        <trans-unit id="6d6c67d0e04f994ae9a15b2fbe4df0fd9a9c290f" translate="yes" xml:space="preserve">
          <source>Timestamp when the profile started</source>
          <target state="translated">档案开始的时间戳</target>
        </trans-unit>
        <trans-unit id="c4669833bdb680864e7acb55854a917be661e229" translate="yes" xml:space="preserve">
          <source>Timestampable</source>
          <target state="translated">Timestampable</target>
        </trans-unit>
        <trans-unit id="d0fbecf7432369f3f03b530b6b74f3bf2bdd65df" translate="yes" xml:space="preserve">
          <source>To access the HTTP method data &lt;code&gt;$app&lt;/code&gt; needs to be passed into the closure:</source>
          <target state="translated">要访问HTTP方法，需要将数据 &lt;code&gt;$app&lt;/code&gt; 传递到闭包中：</target>
        </trans-unit>
        <trans-unit id="9e9bfab430386c08104d376189546534e47eb163" translate="yes" xml:space="preserve">
          <source>To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as &lt;a href=&quot;http://en.wikipedia.org/wiki/Lemon_Parser_Generator&quot;&gt;SQLite&lt;/a&gt;. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</source>
          <target state="translated">为了获得最高的性能，Phalcon提供了一种解析器，该解析器使用与&lt;a href=&quot;http://en.wikipedia.org/wiki/Lemon_Parser_Generator&quot;&gt;SQLite&lt;/a&gt;相同的技术。这项技术提供了一个内存较小的解析器，具有非常低的内存占用空间，而且也是线程安全的。</target>
        </trans-unit>
        <trans-unit id="069086dbb55fca04911b0b00d044f3c85dd00855" translate="yes" xml:space="preserve">
          <source>To achieve the highest performance possible, we wrote a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</source>
          <target state="translated">为了实现最高的性能,我们编写了一个使用与SQLite相同技术的解析器。这种技术提供了一个小型的内存解析器,内存占用率非常低,而且也是线程安全的。</target>
        </trans-unit>
        <trans-unit id="3ed61dee08e97fd9d1741370edf92e999a9932db" translate="yes" xml:space="preserve">
          <source>To achieve this we must identify uniquely each cache with a key. First we verify that the cache does not exist or has expired to make the calculations/queries to display data in the view:</source>
          <target state="translated">为了实现这个目标,我们必须用一个密钥唯一地识别每个缓存。首先我们要验证缓存是否存在或已经过期,以便在视图中进行计算/查询以显示数据。</target>
        </trans-unit>
        <trans-unit id="61f390cd27026bd98be4f873e3ffe482f28f1559" translate="yes" xml:space="preserve">
          <source>To achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and thus customize the cache everything possible:</source>
          <target state="translated">为了达到这个目的,我们需要拦截PHQL解析器生成的中间表示(IR),从而定制缓存的一切可能。</target>
        </trans-unit>
        <trans-unit id="652e27c6907eaf79df10671621f0e8bd2d4cdbeb" translate="yes" xml:space="preserve">
          <source>To add the repository to our distribution:</source>
          <target state="translated">要将仓库添加到我们的发行版中。</target>
        </trans-unit>
        <trans-unit id="c1e15a0b91e12bbff2dc2ba730b25e90ba6fb4bd" translate="yes" xml:space="preserve">
          <source>To add the repository to your distribution:</source>
          <target state="translated">要将版本库添加到您的发行版中。</target>
        </trans-unit>
        <trans-unit id="3ca468880d9950f2aa78f05dc9e22b0ce9a5aa49" translate="yes" xml:space="preserve">
          <source>To avoid these or most sophisticated attacks, &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt; removes invalid characters from the class name, reducing the possibility of being attacked.</source>
          <target state="translated">为避免这些或最复杂的攻击，&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;将从类名称中删除无效字符，从而降低了被攻击的可能性。</target>
        </trans-unit>
        <trans-unit id="dd1b0bc6ff61abfee71c3315a15ff80e063f7232" translate="yes" xml:space="preserve">
          <source>To better explain how PHQL works consider the following example. We have two models &amp;ldquo;Cars&amp;rdquo; and &amp;ldquo;Brands&amp;rdquo;:</source>
          <target state="translated">为了更好地解释PHQL的工作原理，请考虑以下示例。我们有&amp;ldquo;汽车&amp;rdquo;和&amp;ldquo;品牌&amp;rdquo;两个模型：</target>
        </trans-unit>
        <trans-unit id="5f0715ec3acdb5a6d1e2b8e7f86f09e7521e364c" translate="yes" xml:space="preserve">
          <source>To call a &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt; helper, you only need to call an uncamelized version of the method:</source>
          <target state="translated">要调用&lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt;帮助器，只需要调用该方法的未修饰版本：</target>
        </trans-unit>
        <trans-unit id="25ed8e96931eea81d59de969d56332ea08cf02c5" translate="yes" xml:space="preserve">
          <source>To check if an expression is contained into other expressions &lt;code&gt;if &quot;a&quot; in &quot;abc&quot;&lt;/code&gt;</source>
          <target state="translated">检查 &lt;code&gt;if &quot;a&quot; in &quot;abc&quot;&lt;/code&gt; 是否包含在其他表达式中</target>
        </trans-unit>
        <trans-unit id="bdfb9be0c6a2e6b9a99c146e3abe0618cb59f95e" translate="yes" xml:space="preserve">
          <source>To create a connection it&amp;rsquo;s necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:</source>
          <target state="translated">要创建连接，必须实例化适配器类。它只需要一个带有连接参数的数组。下面的示例显示如何创建同时传递必需和可选参数的连接：</target>
        </trans-unit>
        <trans-unit id="e4ed4f5ba84743da9ac7abae431a014f1ad76e8a" translate="yes" xml:space="preserve">
          <source>To enable it, add the following to your bootstrap:</source>
          <target state="translated">要启用它,请在你的bootstrap中添加以下内容。</target>
        </trans-unit>
        <trans-unit id="cea533b0a305a7d4f6e4c0395758b6368d6cc799" translate="yes" xml:space="preserve">
          <source>To enter the system, users must have a valid username and password. Users are stored in the table &amp;ldquo;users&amp;rdquo; in the database &amp;ldquo;invo&amp;rdquo;.</source>
          <target state="translated">要进入系统，用户必须具有有效的用户名和密码。用户存储在数据库&amp;ldquo; invo&amp;rdquo;中的&amp;ldquo;用户&amp;rdquo;表中。</target>
        </trans-unit>
        <trans-unit id="ec772510098b0aa9f1025e9dc4191dc11ed08d97" translate="yes" xml:space="preserve">
          <source>To explain better how aliases work, let&amp;rsquo;s check the following example:</source>
          <target state="translated">为了更好地解释别名的工作方式，让我们检查以下示例：</target>
        </trans-unit>
        <trans-unit id="44fd6ca866d0fbe1d929e905d0150fff173013d6" translate="yes" xml:space="preserve">
          <source>To finish the detailed explanation of INVO we are going to explain how to customize INVO adding UI elements and changing the title according to the controller executed.</source>
          <target state="translated">在完成对INVO的详细讲解后,我们将介绍如何自定义INVO添加UI元素,并根据执行的控制器改变标题。</target>
        </trans-unit>
        <trans-unit id="37600b957d7219dde1b26a326d28f6079f329b7e" translate="yes" xml:space="preserve">
          <source>To generate the tag we use the class &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt;. This is a utility class that allows us to build HTML tags with framework conventions in mind. As this class is a also a service registered in the DI we use &lt;code&gt;$this-&amp;gt;tag&lt;/code&gt; to access it.</source>
          <target state="translated">要生成标签，我们使用&lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt;类。这是一个实用程序类，它使我们可以在考虑框架约定的情况下构建HTML标签。由于此类也是在DI中注册的服务，因此我们使用 &lt;code&gt;$this-&amp;gt;tag&lt;/code&gt; 进行访问。</target>
        </trans-unit>
        <trans-unit id="26182241982e97dc8a2e1d412852ce1179b93a93" translate="yes" xml:space="preserve">
          <source>To help you build the unit tests, we made a few abstract classes you can use to bootstrap the unit tests themselves. These files exist in the Phalcon incubator @ &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;https://github.com/phalcon/incubator&lt;/a&gt;.</source>
          <target state="translated">为了帮助您构建单元测试，我们制作了一些抽象类，您可以使用它们来引导单元测试本身。这些文件存在于Phalcon孵化器@ &lt;a href=&quot;https://github.com/phalcon/incubator&quot;&gt;https://github.com/phalcon/incubator中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dab8089343f48252917bb494c56a038c1827e91a" translate="yes" xml:space="preserve">
          <source>To illustrate how this component works and why it is important, consider the following example:</source>
          <target state="translated">为了说明这个组件是如何工作的以及为什么它是重要的,请考虑下面的例子。</target>
        </trans-unit>
        <trans-unit id="0af1c8a3a4a64f306d82abb89897a4be3109465f" translate="yes" xml:space="preserve">
          <source>To improve performance &lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon\Acl&lt;/em&gt;&lt;/a&gt; instances can be serialized and stored in APC, session, text files or a database table so that they can be loaded at will without having to redefine the whole list. You can do that as follows:</source>
          <target state="translated">为了提高性能，可以对&lt;a href=&quot;../api/phalcon_acl&quot;&gt;&lt;em&gt;Phalcon \ Acl&lt;/em&gt;&lt;/a&gt;实例进行序列化并将其存储在APC，会话，文本文件或数据库表中，这样就可以随意加载它们而不必重新定义整个列表。您可以按照以下步骤进行操作：</target>
        </trans-unit>
        <trans-unit id="ac03ae219ca9a5cf8bf8aa2ae18c9dbf846fa529" translate="yes" xml:space="preserve">
          <source>To insert, update or delete rows, you can use raw SQL or use the preset functions provided by the class:</source>
          <target state="translated">要插入、更新或删除行,可以使用原始SQL或使用该类提供的预设函数。</target>
        </trans-unit>
        <trans-unit id="d074982dd1c4e6eff4099cb5a1f534c92acb86f5" translate="yes" xml:space="preserve">
          <source>To install Phalcon:</source>
          <target state="translated">要安装Phalcon。</target>
        </trans-unit>
        <trans-unit id="20d0e2d61b095d45c795e18704dbc2d1ad796495" translate="yes" xml:space="preserve">
          <source>To make a model to react to an event, we must to implement a method with the same name of the event:</source>
          <target state="translated">要使一个模型对一个事件做出反应,我们必须实现一个与事件同名的方法。</target>
        </trans-unit>
        <trans-unit id="e66563d54c2e30d266f168e610fd11be9a14db63" translate="yes" xml:space="preserve">
          <source>To render a view it&amp;rsquo;s necessary to call the render method explicitly indicating the relative path to the view you want to display:</source>
          <target state="translated">要渲染视图，必须显式调用render方法，以指示要显示的视图的相对路径：</target>
        </trans-unit>
        <trans-unit id="3759350713699f06bd6061541884a99f500d7252" translate="yes" xml:space="preserve">
          <source>To run any unit tests you need to define them. The autoloader will make sure the proper files are loaded so all you need to do is create the files and phpunit will run the tests for you.</source>
          <target state="translated">要运行任何单元测试,你需要定义它们。自动加载器会确保加载正确的文件,所以你只需要创建文件,phpunit就会为你运行测试。</target>
        </trans-unit>
        <trans-unit id="c3a808c1883119f9963bc0c3a60407ef0b07581f" translate="yes" xml:space="preserve">
          <source>To solve this problem we can use hash algorithms as &lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;. Why bcrypt? Thanks to its &amp;ldquo;&lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt#Algorithm&quot;&gt;Eksblowfish&lt;/a&gt;&amp;rdquo; key setup algorithm we can make the password encryption as &amp;ldquo;slow&amp;rdquo; as we want. Slow algorithms make the process to calculate the real password behind a hash extremely difficult if not impossible. This will protect your for a long time from a possible attack using rainbow tables.</source>
          <target state="translated">为了解决这个问题，我们可以使用哈希算法作为&lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;。为什么选择bcrypt？&lt;a href=&quot;http://en.wikipedia.org/wiki/Bcrypt#Algorithm&quot;&gt;借助&lt;/a&gt;其&amp;ldquo; Eksblowfish &amp;rdquo;密钥设置算法，我们可以根据需要使密码加密为&amp;ldquo;慢速&amp;rdquo;。缓慢的算法使计算哈希后面的真实密码的过程非常困难，即使不是不可能。这样可以长时间保护您免受使用Rainbow表的攻击。</target>
        </trans-unit>
        <trans-unit id="d4de767dac285a80a7f9c1a40d22809f9260736a" translate="yes" xml:space="preserve">
          <source>To solve this, we have created a setter that injects the dependency externally before using it. For now, this seems to be a good solution:</source>
          <target state="translated">为了解决这个问题,我们创建了一个setter,在使用依赖关系之前从外部注入它。目前,这似乎是一个不错的解决方案。</target>
        </trans-unit>
        <trans-unit id="f87bd9bada571af7b99001f7df34d00cd912435c" translate="yes" xml:space="preserve">
          <source>To speed up development &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; helps you to query fields and constraints from tables related to models. To achieve this, &lt;a href=&quot;../api/phalcon_mvc_model_metadata&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\MetaData&lt;/em&gt;&lt;/a&gt; is available to manage and cache table metadata.</source>
          <target state="translated">为了加快开发速度，&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;可帮助您从与模型相关的表中查询字段和约束。为此，&lt;a href=&quot;../api/phalcon_mvc_model_metadata&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ MetaData&lt;/em&gt;&lt;/a&gt;可用于管理和缓存表元数据。</target>
        </trans-unit>
        <trans-unit id="e8f1f0940482506aaea0b6bf788a727888ef5681" translate="yes" xml:space="preserve">
          <source>To start the server type:</source>
          <target state="translated">要启动服务器类型。</target>
        </trans-unit>
        <trans-unit id="3837251fa7d6aba69ab40fa0c93d4708f77f0e23" translate="yes" xml:space="preserve">
          <source>To tell &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; that always omits some fields in the creation and/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:</source>
          <target state="translated">告诉&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;在创建和/或更新记录时总是忽略某些字段，以便通过触发器或默认值委派数据库系统值的分配：</target>
        </trans-unit>
        <trans-unit id="780c36acfac49dfb61b51f062fc2264e4540f8c9" translate="yes" xml:space="preserve">
          <source>To use phalcon on Windows you can &lt;a href=&quot;http://phalconphp.com/en/download&quot;&gt;download&lt;/a&gt; a DLL library. Edit your php.ini file and then append at the end:</source>
          <target state="translated">要在Windows上使用phalcon，您可以&lt;a href=&quot;http://phalconphp.com/en/download&quot;&gt;下载&lt;/a&gt; DLL库。编辑您的php.ini文件，然后在末尾附加：</target>
        </trans-unit>
        <trans-unit id="1e3281a962e6db2e54e787f796eb7d2b1582389a" translate="yes" xml:space="preserve">
          <source>Transactions</source>
          <target state="translated">Transactions</target>
        </trans-unit>
        <trans-unit id="11382adf7f930e1cf6c7df6759438407fceeedaa" translate="yes" xml:space="preserve">
          <source>Transactions and Nested Transactions</source>
          <target state="translated">交易和嵌套交易</target>
        </trans-unit>
        <trans-unit id="eefb3f32b18a981f2ae957a4043235e6142bfadf" translate="yes" xml:space="preserve">
          <source>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. Phalcon\Transaction is intended to be used with Phalcon_Model_Base. Phalcon Transactions should be created using Phalcon\Transaction\Manager.</source>
          <target state="translated">事务是保护性的块,其中SQL语句只有在作为一个原子动作都能成功的情况下才是永久的。Phalcon/Transaction旨在与Phalcon_Model_Base一起使用。PhalconTransaction应该使用Phalcon/Transaction/Manager来创建。</target>
        </trans-unit>
        <trans-unit id="32fe84f033c5e32cdf533a9e92bdf935b55b1b54" translate="yes" xml:space="preserve">
          <source>Transactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a &lt;code&gt;commit()&lt;/code&gt; or &lt;code&gt;rollback()&lt;/code&gt; is performed. You can use the service container to create the global transaction manager for the entire application:</source>
          <target state="translated">无论在何处检索事务对象，都将重用事务。仅在执行 &lt;code&gt;commit()&lt;/code&gt; 或 &lt;code&gt;rollback()&lt;/code&gt; 时才生成新事务。您可以使用服务容器为整个应用程序创建全局事务管理器：</target>
        </trans-unit>
        <trans-unit id="c654ef6c72dbf4416e10195dc7cdaae5b75be077" translate="yes" xml:space="preserve">
          <source>Transactions can be used to delete many records in a consistent way:</source>
          <target state="translated">交易可以用于以一致的方式删除许多记录。</target>
        </trans-unit>
        <trans-unit id="8d472fa3c1df986be8ef5ba049cfc4415ffad880" translate="yes" xml:space="preserve">
          <source>Transactions in Phalcon allow you to commit all operations if they were executed successfully or rollback all operations if something went wrong.</source>
          <target state="translated">Phalcon中的事务允许你在成功执行的情况下提交所有操作,或者在出错时回滚所有操作。</target>
        </trans-unit>
        <trans-unit id="b90f50d9020aeb9c40c81caeea9b6a601a228d86" translate="yes" xml:space="preserve">
          <source>Transfer values from the controller to views</source>
          <target state="translated">将数值从控制器传输到视图</target>
        </trans-unit>
        <trans-unit id="64e165805cfe4500c1caa1fc8d4ee87bde4c2e4a" translate="yes" xml:space="preserve">
          <source>Transform an intermediate representation of a schema/table into a database system valid expression</source>
          <target state="translated">将模式/表的中间表示转化为数据库系统的有效表达式。</target>
        </trans-unit>
        <trans-unit id="d823923fdb814280eb08288d0aa9d27921cf2539" translate="yes" xml:space="preserve">
          <source>Transforms an intermediate representation for an expression into a database system valid expression</source>
          <target state="translated">将一个表达式的中间表示转换为数据库系统的有效表达式。</target>
        </trans-unit>
        <trans-unit id="2be17aa181d8226bfad83ce993e838fa79dcce4d" translate="yes" xml:space="preserve">
          <source>Translate</source>
          <target state="translated">Translate</target>
        </trans-unit>
        <trans-unit id="906c7e761305e15578a705d785d9ff1566f2d194" translate="yes" xml:space="preserve">
          <source>Translates a number to a special release If Special release = 1 this function will return ALPHA</source>
          <target state="translated">将一个数字转换为一个特殊的释放值 如果Special release=1,这个函数将返回ALPHA。</target>
        </trans-unit>
        <trans-unit id="450f4444d95c81537e0426d2f725e75300dd547d" translate="yes" xml:space="preserve">
          <source>Translation strings are stored in files. The structure of these files could vary depending of the adapter used. Phalcon gives you the freedom to organize your translation strings. A simple structure could be:</source>
          <target state="translated">翻译字符串存储在文件中。这些文件的结构可能会因所使用的适配器而有所不同。Phalcon 让您可以自由组织您的翻译字符串。一个简单的结构可以是:</target>
        </trans-unit>
        <trans-unit id="8c7c31764c79068f7f5e6babe81f624dce0688f8" translate="yes" xml:space="preserve">
          <source>Transliteration</source>
          <target state="translated">Transliteration</target>
        </trans-unit>
        <trans-unit id="d918d2176a004c85265664657907beec1ca4a4f6" translate="yes" xml:space="preserve">
          <source>Traverses a collection and generate its HTML</source>
          <target state="translated">遍历一个集合并生成其HTML</target>
        </trans-unit>
        <trans-unit id="ab0d264989633be7d8ffc51a35e0abfdbaef9b76" translate="yes" xml:space="preserve">
          <source>Traverses a collection calling the callback to generate its HTML</source>
          <target state="translated">遍历一个集合,调用回调来生成它的HTML。</target>
        </trans-unit>
        <trans-unit id="7e63a2afc929c94b6241ae1575a1bc1d9a6ca4ee" translate="yes" xml:space="preserve">
          <source>Traverses a statement list compiling each of its nodes</source>
          <target state="translated">遍历语句列表,编译其每个节点。</target>
        </trans-unit>
        <trans-unit id="63b038591b30891f280d2f38cf327459577ec09f" translate="yes" xml:space="preserve">
          <source>Treat the arguments independently and unresolved:</source>
          <target state="translated">独立对待争论,无解。</target>
        </trans-unit>
        <trans-unit id="5885444e4c987798290ed05fb3fbda2b638caedc" translate="yes" xml:space="preserve">
          <source>Tries to render the view with every engine registered in the component</source>
          <target state="translated">尝试用组件中注册的每个引擎来渲染视图。</target>
        </trans-unit>
        <trans-unit id="933f5e3506fb96ccd72bc34a478e861ce00143b4" translate="yes" xml:space="preserve">
          <source>Triggered</source>
          <target state="translated">Triggered</target>
        </trans-unit>
        <trans-unit id="cb532357ecb4f237ed7ad5704db288fb36739070" translate="yes" xml:space="preserve">
          <source>Triggered after checking if a role/resource has access</source>
          <target state="translated">检查角色/资源是否有访问权限后触发。</target>
        </trans-unit>
        <trans-unit id="ddc074a6066aa034e429f20d6684b6907ebedf21" translate="yes" xml:space="preserve">
          <source>Triggered after completing the render process</source>
          <target state="translated">在完成渲染过程后触发</target>
        </trans-unit>
        <trans-unit id="ef7191df075dca57e229be26493b539be0c59836" translate="yes" xml:space="preserve">
          <source>Triggered after completing the whole process in a successful way</source>
          <target state="translated">在成功完成整个流程后触发。</target>
        </trans-unit>
        <trans-unit id="da0c02b71dd7addf6c8125c706da276c9a14806c" translate="yes" xml:space="preserve">
          <source>Triggered after finish the autoloading process. If this event is launched the autoloader didn&amp;rsquo;t find the class file</source>
          <target state="translated">完成自动加载过程后触发。如果启动此事件，则自动加载器找不到类文件</target>
        </trans-unit>
        <trans-unit id="5b8bcbcfd6928a897747cd31eafb5720e109411e" translate="yes" xml:space="preserve">
          <source>Triggered after models are bound but before executing the handler</source>
          <target state="translated">在模型被绑定后但在执行处理程序之前触发。</target>
        </trans-unit>
        <trans-unit id="2f588bd3f7eb4dc44168006f616e08ccef7f0567" translate="yes" xml:space="preserve">
          <source>Triggered after rendering an existing view</source>
          <target state="translated">渲染现有视图后触发</target>
        </trans-unit>
        <trans-unit id="c125835be686d247c0e309735c44fb50c3932e7a" translate="yes" xml:space="preserve">
          <source>Triggered after resolve service. Listeners receive the service name, instance, and the parameters passed to it.</source>
          <target state="translated">在resolve服务后触发,监听者收到服务名、实例和传递给它的参数。监听者接收服务名、实例和传递给它的参数。</target>
        </trans-unit>
        <trans-unit id="68d6b219812dfe17b7402de245c6cd0115be9a15" translate="yes" xml:space="preserve">
          <source>Triggered after running the handler</source>
          <target state="translated">运行处理程序后触发</target>
        </trans-unit>
        <trans-unit id="6eea1c309b23bf41243acf5d09ba88a0e3721697" translate="yes" xml:space="preserve">
          <source>Triggered before checking if a role/resource has access</source>
          <target state="translated">在检查角色/资源是否有访问权限之前触发。</target>
        </trans-unit>
        <trans-unit id="463819417be76d27e79733f311be07b509c55c58" translate="yes" xml:space="preserve">
          <source>Triggered before rendering an existing view</source>
          <target state="translated">在渲染现有视图之前触发</target>
        </trans-unit>
        <trans-unit id="03dd7642b124e313e097b36cd1231a0927d88664" translate="yes" xml:space="preserve">
          <source>Triggered before resolve service. Listeners receive the service name and the parameters passed to it.</source>
          <target state="translated">在resolve服务之前触发。监听者接收服务名和传递给它的参数。</target>
        </trans-unit>
        <trans-unit id="316a6e8892c4e8a052ef398b52bf1476ba61a16d" translate="yes" xml:space="preserve">
          <source>Triggered before starting the autoloading process</source>
          <target state="translated">在开始自动加载过程之前触发。</target>
        </trans-unit>
        <trans-unit id="eb4930b4d128cd593fd565aba31010c65561a28b" translate="yes" xml:space="preserve">
          <source>Triggered before starting the render process</source>
          <target state="translated">在开始渲染过程之前触发</target>
        </trans-unit>
        <trans-unit id="abda0d70fa203e32d24672c60e2db3d7c68ee25e" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any expression. This allows the developer to override any statement</source>
          <target state="translated">在尝试编译任何表达式之前被触发。这允许开发者覆盖任何语句</target>
        </trans-unit>
        <trans-unit id="b551575f8bb798bc59fd5bda1189480cc37c9834" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any expression. This allows the developer to override operators</source>
          <target state="translated">在尝试编译任何表达式之前被触发。这允许开发者覆盖操作符</target>
        </trans-unit>
        <trans-unit id="5b7b52275cabcbbeef1d32e08691463283bd3515" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any filter call in a template</source>
          <target state="translated">在试图编译模板中的任何过滤器调用之前触发。</target>
        </trans-unit>
        <trans-unit id="7120c27cd819fac6d9729f0766a0d805cba9b000" translate="yes" xml:space="preserve">
          <source>Triggered before trying to compile any function call in a template</source>
          <target state="translated">在试图编译模板中的任何函数调用之前触发。</target>
        </trans-unit>
        <trans-unit id="15821d6dbce6d0d3dce5bdfc1d582ecc5c72a79d" translate="yes" xml:space="preserve">
          <source>Triggered on</source>
          <target state="translated">触发时间</target>
        </trans-unit>
        <trans-unit id="86158daf77d46f3064a253b5096894a5da9e9ad9" translate="yes" xml:space="preserve">
          <source>Triggered when a view was not found</source>
          <target state="translated">未找到视图时触发</target>
        </trans-unit>
        <trans-unit id="a17f09938b6a70e08ba804e25b680f46936a9e44" translate="yes" xml:space="preserve">
          <source>Triggered when any data manipulation operation fails</source>
          <target state="translated">当任何数据处理操作失败时触发。</target>
        </trans-unit>
        <trans-unit id="ebac15dcf9d12aeaad72ea91260a4b8b387dc5f8" translate="yes" xml:space="preserve">
          <source>Triggered when any of the defined routes match the requested URI</source>
          <target state="translated">当任何一个定义的路由符合请求的URI时,就会触发。</target>
        </trans-unit>
        <trans-unit id="14f53ce50fecd9b8172350af491801536ba2f381" translate="yes" xml:space="preserve">
          <source>Triggered when the INSERT or UPDATE operation fails for any reason</source>
          <target state="translated">当INSERT或UPDATE操作因任何原因失败时触发。</target>
        </trans-unit>
        <trans-unit id="9b310f8f6f3620d1b0599a693bf6b084fd2f6f4f" translate="yes" xml:space="preserve">
          <source>Triggered when the insert/update operation fails for any reason</source>
          <target state="translated">当插入/更新操作因任何原因失败时触发。</target>
        </trans-unit>
        <trans-unit id="6978a39c72ef60d66c8de3a0885b4f00340f4175" translate="yes" xml:space="preserve">
          <source>Triggered when the loader locate a class</source>
          <target state="translated">当加载器定位到一个类时触发。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="7299bc9384c3f4b3f3652390b548749c6885c25c" translate="yes" xml:space="preserve">
          <source>True if in the first iteration.</source>
          <target state="translated">如果在第一次迭代中,真。</target>
        </trans-unit>
        <trans-unit id="f1fe047289f785e6662e651c035e055c87b5ca6a" translate="yes" xml:space="preserve">
          <source>True if in the last iteration.</source>
          <target state="translated">如果在最后一次迭代中为真。</target>
        </trans-unit>
        <trans-unit id="3dc59609dd3b6d112601a11d076b32f731529ba7" translate="yes" xml:space="preserve">
          <source>True if the column is part of the table&amp;rsquo;s primary key</source>
          <target state="translated">如果列是表主键的一部分，则为True</target>
        </trans-unit>
        <trans-unit id="6fb354bb8e96930923aff8e141cd43ee49d9c6a2" translate="yes" xml:space="preserve">
          <source>Try to check if the query must invoke a finder</source>
          <target state="translated">试着检查查询是否必须调用查找器</target>
        </trans-unit>
        <trans-unit id="eea5e79911964297e4d474c87aa35daa44e85929" translate="yes" xml:space="preserve">
          <source>Try to insert a new robot with the name of an existing robot:</source>
          <target state="translated">尝试用现有机器人的名称插入一个新的机器人。</target>
        </trans-unit>
        <trans-unit id="0bcfcbd28dd4d293b288a30b5f9bf248ab9e7e76" translate="yes" xml:space="preserve">
          <source>Tutorial 1: Let&amp;rsquo;s learn by example</source>
          <target state="translated">教程1：让我们通过示例学习</target>
        </trans-unit>
        <trans-unit id="bc30ce024db531465a1b512702d1c7b0e9dd6015" translate="yes" xml:space="preserve">
          <source>Tutorial 1: Let’s learn by example</source>
          <target state="translated">教程一:让我们举一反三</target>
        </trans-unit>
        <trans-unit id="41d7d729359e8d2124aecc3beee907c89fbde35c" translate="yes" xml:space="preserve">
          <source>Tutorial 2: Introducing INVO</source>
          <target state="translated">教程2:介绍INVO</target>
        </trans-unit>
        <trans-unit id="0d58a4c1b9fa5fc405f671db9d666c62ff6006bd" translate="yes" xml:space="preserve">
          <source>Tutorial 3: Securing INVO</source>
          <target state="translated">教程3:确保INVO的安全</target>
        </trans-unit>
        <trans-unit id="7b34231465746b24f0905ad161aa97dbae4cad3c" translate="yes" xml:space="preserve">
          <source>Tutorial 4: Working with the CRUD</source>
          <target state="translated">教程4:使用CRUD</target>
        </trans-unit>
        <trans-unit id="565b204cc47bf9fec203e9f8af249ce01c3ba71a" translate="yes" xml:space="preserve">
          <source>Tutorial 5: Customizing INVO</source>
          <target state="translated">教程5:自定义INVO</target>
        </trans-unit>
        <trans-unit id="80e3f9aa01ad61cc355e997b00dba9b949d74204" translate="yes" xml:space="preserve">
          <source>Tutorial 6: V&amp;ouml;kur&amp;oacute;</source>
          <target state="translated">教程6：V&amp;ouml;kur&amp;oacute;</target>
        </trans-unit>
        <trans-unit id="db5f91c5a1448ec10b2b240cadee156ec8f9f590" translate="yes" xml:space="preserve">
          <source>Tutorial 6: Vökuró</source>
          <target state="translated">教程6:Vökuró</target>
        </trans-unit>
        <trans-unit id="ee559adbaa46bb061d9d4857d2c19a1b792786a7" translate="yes" xml:space="preserve">
          <source>Tutorial 7: Creating a Simple REST API</source>
          <target state="translated">教程7:创建一个简单的REST API</target>
        </trans-unit>
        <trans-unit id="92e88e7ca29accd87dcda0f6b5cf5bc3a5c00fc1" translate="yes" xml:space="preserve">
          <source>Tutorial: Creating a custom model&amp;rsquo;s initializer with Annotations</source>
          <target state="translated">教程：使用注释创建自定义模型的初始化程序</target>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">Tutorials</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="c2a42d00a3f5c47212f19ff3175d697f781dd834" translate="yes" xml:space="preserve">
          <source>Type &amp;ldquo;cmd&amp;rdquo; and press enter to open the windows command line utility:</source>
          <target state="translated">键入&amp;ldquo; cmd&amp;rdquo;，然后按Enter键以打开Windows命令行实用程序：</target>
        </trans-unit>
        <trans-unit id="aa5e0677877c45f227bd2eedf1da83f98bb56e28" translate="yes" xml:space="preserve">
          <source>Type of database system the adapter is used for</source>
          <target state="translated">适配器使用的数据库系统类型</target>
        </trans-unit>
        <trans-unit id="a32cb32d39ea4758b2c6279930b4310caaa1cbc1" translate="yes" xml:space="preserve">
          <source>Type the command &amp;ldquo;phalcon&amp;rdquo; and you will see something like this:</source>
          <target state="translated">输入命令&amp;ldquo; phalcon&amp;rdquo;，您将看到类似以下内容：</target>
        </trans-unit>
        <trans-unit id="b600f85412140a288e08bc6707a8b41cef4cd646" translate="yes" xml:space="preserve">
          <source>Type the commands &amp;ldquo;php -v&amp;rdquo; and &amp;ldquo;phalcon&amp;rdquo; and you will see something like this:</source>
          <target state="translated">输入命令&amp;ldquo; php -v&amp;rdquo;和&amp;ldquo; phalcon&amp;rdquo;，您将看到类似以下内容：</target>
        </trans-unit>
        <trans-unit id="4c1566366121eae749da1b5a1f9ef2fadf786bee" translate="yes" xml:space="preserve">
          <source>Types of Annotations</source>
          <target state="translated">附加说明的类型</target>
        </trans-unit>
        <trans-unit id="7716c3cb2d711937c0af826c81ad7af1398f4fa5" translate="yes" xml:space="preserve">
          <source>Types of Built-in Filters</source>
          <target state="translated">内置过滤器的类型</target>
        </trans-unit>
        <trans-unit id="425948cb3f22f2449521275f5180922bb3aa4d60" translate="yes" xml:space="preserve">
          <source>URI Sources</source>
          <target state="translated">URI来源</target>
        </trans-unit>
        <trans-unit id="dff72e92309dedc2a99a90045b42933818b2cc70" translate="yes" xml:space="preserve">
          <source>URI_SOURCE_GET_URL</source>
          <target state="translated">URI_SOURCE_GET_URL</target>
        </trans-unit>
        <trans-unit id="396ef204b69c681c236a224dddf27607ce4a2958" translate="yes" xml:space="preserve">
          <source>URI_SOURCE_SERVER_REQUEST_URI</source>
          <target state="translated">URI_SOURCE_SERVER_REQUEST_URI</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="377515a0f4469bcb66cd5573148e14b0426064fd" translate="yes" xml:space="preserve">
          <source>URL Generator Service</source>
          <target state="translated">URL生成器服务</target>
        </trans-unit>
        <trans-unit id="3b601fefed4b7cf12498641f8b3d5ce9a4864fcc" translate="yes" xml:space="preserve">
          <source>URL Prefixes</source>
          <target state="translated">URL前缀</target>
        </trans-unit>
        <trans-unit id="f91fe8205b19d940a2c9481737ee7712afbd9375" translate="yes" xml:space="preserve">
          <source>Ultimately, it is responsible for doing 3 things:</source>
          <target state="translated">最终,它负责做3件事。</target>
        </trans-unit>
        <trans-unit id="f1e86724baf521ff59137620d71a2956ed26fae2" translate="yes" xml:space="preserve">
          <source>Uncamelize strings which are camelized</source>
          <target state="translated">解除已驼峰化的字符串。</target>
        </trans-unit>
        <trans-unit id="5781388802e2bc107ab685cd34e1d2c1c7561bb3" translate="yes" xml:space="preserve">
          <source>Underscores in property names can be problematic when using getters and setters.</source>
          <target state="translated">当使用getter和setter时,属性名中的下划线可能会有问题。</target>
        </trans-unit>
        <trans-unit id="4a67c5244cefc33e87dea708e27782496a777bb4" translate="yes" xml:space="preserve">
          <source>Understanding Documents To Objects</source>
          <target state="translated">了解文件到对象</target>
        </trans-unit>
        <trans-unit id="3aa537405b51e95e49cb04ce1fadbb6c73e49a40" translate="yes" xml:space="preserve">
          <source>Understanding How Phalcon Applications Work</source>
          <target state="translated">了解Phalcon应用如何工作</target>
        </trans-unit>
        <trans-unit id="96a75e6d29f841d597f8c948a2332be0c5fb0305" translate="yes" xml:space="preserve">
          <source>Understanding Records To Objects</source>
          <target state="translated">了解记录到对象</target>
        </trans-unit>
        <trans-unit id="68022da377986d04179b6302a6ce30be10770d8a" translate="yes" xml:space="preserve">
          <source>Unidirectional relations are those that are generated in relation to one another but not vice versa.</source>
          <target state="translated">单向关系是指相互之间产生的关系,而不是反之。</target>
        </trans-unit>
        <trans-unit id="5ea25cce3dd2352dc10b35e014056ebf6560c42b" translate="yes" xml:space="preserve">
          <source>Unidirectional relationships</source>
          <target state="translated">单向关系</target>
        </trans-unit>
        <trans-unit id="e6bb9b2dc1ab73cf360b066ecb8c25cc770b4619" translate="yes" xml:space="preserve">
          <source>Uniqueness method used for collection</source>
          <target state="translated">用于收集的唯一性方法</target>
        </trans-unit>
        <trans-unit id="60067126f8023f4d7d68d87f2b2dd9438eaaf8cf" translate="yes" xml:space="preserve">
          <source>Uniqueness method used for model</source>
          <target state="translated">用于模型的唯一性方法</target>
        </trans-unit>
        <trans-unit id="81a4be7e010cb6daabd6b2dab1722b9ed0372269" translate="yes" xml:space="preserve">
          <source>Unit testing</source>
          <target state="translated">单元测试</target>
        </trans-unit>
        <trans-unit id="b13d52a947b3f3a8aea0d0276de9a6481f708103" translate="yes" xml:space="preserve">
          <source>Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.</source>
          <target state="translated">与其他模板引擎不同,Volt本身不需要运行编译后的模板。一旦模板被编译,就不需要依赖Volt。考虑到性能的独立性,Volt只作为PHP模板的编译器。</target>
        </trans-unit>
        <trans-unit id="74ac9561943638bab40b0aa8bdfbd2a88c47148b" translate="yes" xml:space="preserve">
          <source>Unregister the autoload method</source>
          <target state="translated">取消注册自动加载方法</target>
        </trans-unit>
        <trans-unit id="ea95c362ff67ab8c924f97cd7ecb71f06f5fe592" translate="yes" xml:space="preserve">
          <source>Unserializes data after retrieval</source>
          <target state="translated">检索后的数据未序列化</target>
        </trans-unit>
        <trans-unit id="857792f695e7bde398ffc51e5e12af3943ac4b5c" translate="yes" xml:space="preserve">
          <source>Unserializes the object from a serialized string</source>
          <target state="translated">从序列化的字符串中解串化对象。</target>
        </trans-unit>
        <trans-unit id="95925d3396a398448a83c913598afdfedbb94de6" translate="yes" xml:space="preserve">
          <source>Unserializing a resultset will allow to only works on the rows present in the saved state</source>
          <target state="translated">未序列化的结果集将允许只在保存状态下的行上工作。</target>
        </trans-unit>
        <trans-unit id="47875f85fa1e698444f636e3f262c3907e6c06d2" translate="yes" xml:space="preserve">
          <source>Unsets a translation from the dictionary</source>
          <target state="translated">取消设置字典中的翻译</target>
        </trans-unit>
        <trans-unit id="36f19a6803d9477e4829957222ba60ff2a20f9f6" translate="yes" xml:space="preserve">
          <source>Unsets an attribute using the array-syntax</source>
          <target state="translated">使用数组语法取消设置一个属性。</target>
        </trans-unit>
        <trans-unit id="b4dce3f7a140aaa9e38c3e7e125655d63445b450" translate="yes" xml:space="preserve">
          <source>Unsets an element in the registry</source>
          <target state="translated">取消设置注册表中的一个元素</target>
        </trans-unit>
        <trans-unit id="440359ee6a87bfb84c2e8fee1dd0114cb9f51428" translate="yes" xml:space="preserve">
          <source>Updates a model instance. If the instance doesn&amp;rsquo;t exist in the persistence it will throw an exception Returning true on success or false otherwise.</source>
          <target state="translated">更新模型实例。如果实例在持久性中不存在，它将抛出异常，成功则返回true，否则返回false。</target>
        </trans-unit>
        <trans-unit id="7102580ad22989761580fc11a70361a123ee0b25" translate="yes" xml:space="preserve">
          <source>Updates data on a table using custom RBDM SQL syntax</source>
          <target state="translated">使用自定义的RBDM SQL语法更新表的数据。</target>
        </trans-unit>
        <trans-unit id="54cb61830bd584c0a66ab46fd07027989ccc4c26" translate="yes" xml:space="preserve">
          <source>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</source>
          <target state="translated">使用自定义的RBDM SQL语法更新表的数据 另一种更方便的语法是</target>
        </trans-unit>
        <trans-unit id="793ec242bb2241e46a7f74dadfc66be0fa720540" translate="yes" xml:space="preserve">
          <source>Updates every record in the resultset</source>
          <target state="translated">更新结果集中的每条记录</target>
        </trans-unit>
        <trans-unit id="aff2b2c772edbef0443c8309e624b6d176624b96" translate="yes" xml:space="preserve">
          <source>Updates robots based on primary key</source>
          <target state="translated">根据主键更新机器人</target>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="translated">Updating</target>
        </trans-unit>
        <trans-unit id="dd8ce06e479993fd7940ea48abaafb1c49415931" translate="yes" xml:space="preserve">
          <source>Updating Data</source>
          <target state="translated">更新数据</target>
        </trans-unit>
        <trans-unit id="acde98b288df53ae73a7100ffb565427414530ea" translate="yes" xml:space="preserve">
          <source>Updating related records</source>
          <target state="translated">更新相关记录</target>
        </trans-unit>
        <trans-unit id="dc00a9bd433cb0364ba445dbc4d88b4f5eb76c2d" translate="yes" xml:space="preserve">
          <source>Updating rows is very similar than inserting rows. As you may know, the instruction to update records is UPDATE. When a record is updated the events related to the update operation will be executed for each row.</source>
          <target state="translated">更新记录与插入记录非常相似。大家可能知道,更新记录的指令是UPDATE。当更新记录时,与更新操作相关的事件将对每条记录执行。</target>
        </trans-unit>
        <trans-unit id="943e26649b772824ba55708d2fd502f15bc84dd0" translate="yes" xml:space="preserve">
          <source>Uploading Files</source>
          <target state="translated">上传文件</target>
        </trans-unit>
        <trans-unit id="50af22368c133d885a1686402ab432dd4db6298b" translate="yes" xml:space="preserve">
          <source>Uppercase string with message type</source>
          <target state="translated">信息类型的大写字符串</target>
        </trans-unit>
        <trans-unit id="41985785bf31a8a5e3923d6e3fc7a220a9e5f874" translate="yes" xml:space="preserve">
          <source>Uppercases a string, this function makes use of the mbstring extension if available</source>
          <target state="translated">大写一个字符串,如果有的话,这个函数会使用mbstring扩展。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="translated">使用实例</target>
        </trans-unit>
        <trans-unit id="31fdeb34a4f4bc8a7b882018ab434e09d2defd44" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
          <target state="translated">使用实例</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="14d7a6351adcc22650767cc1f7ee198ae2b1ccac" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;../api/phalcon_mvc_model_query_builder&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Query\Builder&lt;/em&gt;&lt;/a&gt; object as source data</source>
          <target state="translated">使用&lt;a href=&quot;../api/phalcon_mvc_model_query_builder&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Query \ Builder&lt;/em&gt;&lt;/a&gt;对象作为源数据</target>
        </trans-unit>
        <trans-unit id="6fc00fcce2b4941974d4ca3ecaaa8a854bad9a0a" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset&lt;/em&gt;&lt;/a&gt; object as source data. Since PDO doesn&amp;rsquo;t support scrollable cursors this adapter shouldn&amp;rsquo;t be used to paginate a large number of records</source>
          <target state="translated">使用&lt;a href=&quot;../api/phalcon_mvc_model_resultset&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset&lt;/em&gt;&lt;/a&gt;对象作为源数据。由于PDO不支持可滚动游标，因此不应使用此适配器分页大量记录</target>
        </trans-unit>
        <trans-unit id="b70ab34d7572569f24f105a5f5a9bda8a7fc019a" translate="yes" xml:space="preserve">
          <source>Use a PHP Bytecode Cache</source>
          <target state="translated">使用字节码缓存PHP</target>
        </trans-unit>
        <trans-unit id="10a6eee5ae64882fdfe1c7009b211d6d743ee383" translate="yes" xml:space="preserve">
          <source>Use a PHP array as source data</source>
          <target state="translated">使用一个PHP数组作为源数据</target>
        </trans-unit>
        <trans-unit id="758cccbfcc842d3be58defb02b33adf3ec049acc" translate="yes" xml:space="preserve">
          <source>Use a recent PHP version</source>
          <target state="translated">使用最新的PHP版本</target>
        </trans-unit>
        <trans-unit id="c669639dd7c3641f2a1d3929fa9376fd9f67fdd4" translate="yes" xml:space="preserve">
          <source>Use an autoload strategy that takes into account the namespaces, for example with &lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon\Loader&lt;/em&gt;&lt;/a&gt;:</source>
          <target state="translated">使用考虑名称空间的自动加载策略，例如使用&lt;a href=&quot;../api/phalcon_loader&quot;&gt;&lt;em&gt;Phalcon \ Loader&lt;/em&gt;&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="b1e98c12f27064aebc399e12c8fffe5317a655b3" translate="yes" xml:space="preserve">
          <source>Use the standard &amp;rdquo;.phtml&amp;rdquo; extension:</source>
          <target state="translated">使用标准的&amp;ldquo; .phtml&amp;rdquo;扩展名：</target>
        </trans-unit>
        <trans-unit id="d7e52f13f173bfcb186b02d736c570c9e14f61f6" translate="yes" xml:space="preserve">
          <source>User Components</source>
          <target state="translated">用户组件</target>
        </trans-unit>
        <trans-unit id="d344f36624c7db42ecd83caaa46d642e7b352960" translate="yes" xml:space="preserve">
          <source>Uses INI files to store settings. Internally the adapter uses the PHP function parse_ini_file.</source>
          <target state="translated">使用INI文件来存储设置。在内部,适配器使用PHP函数parse_ini_file。</target>
        </trans-unit>
        <trans-unit id="1588d242d5ad8402d0e51acefc3161494a00ce89" translate="yes" xml:space="preserve">
          <source>Uses JSON files to store settings.</source>
          <target state="translated">使用JSON文件来存储设置。</target>
        </trans-unit>
        <trans-unit id="cf25bb876cb3f454b7c9486dfc8c4dd22c87f27d" translate="yes" xml:space="preserve">
          <source>Uses PHP arrays to store the messages. This is the best option in terms of performance.</source>
          <target state="translated">使用PHP数组来存储消息。这是性能方面的最佳选择。</target>
        </trans-unit>
        <trans-unit id="b886b3130f808eb47b6196131fb759b63124809c" translate="yes" xml:space="preserve">
          <source>Uses PHP multidimensional arrays to store settings. This adapter offers the best performance.</source>
          <target state="translated">使用PHP多维数组来存储设置。该适配器提供了最好的性能。</target>
        </trans-unit>
        <trans-unit id="cdf24a6eeb448005fc6c86e216ef8eae5711c446" translate="yes" xml:space="preserve">
          <source>Uses YAML files to store settings.</source>
          <target state="translated">使用YAML文件来存储设置。</target>
        </trans-unit>
        <trans-unit id="3e5fab69483d85d0637c6b3177fec6952dd950a4" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">可以在独立模式下使用&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View&lt;/em&gt;&lt;/a&gt;进行演示：</target>
        </trans-unit>
        <trans-unit id="34e75d1ef6d457a1ed2a410e96c6436c782214af" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon\Mvc\View&lt;/em&gt;&lt;/a&gt; you can pass variables from the controller to the views. In the above example, four variables were passed to the view: &lt;code&gt;show_navigation&lt;/code&gt;, &lt;code&gt;menu&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt;:</source>
          <target state="translated">使用&lt;a href=&quot;../api/phalcon_mvc_view&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View，&lt;/em&gt;&lt;/a&gt;您可以将变量从控制器传递到视图。在上面的示例中，向视图传递了四个变量： &lt;code&gt;show_navigation&lt;/code&gt; ， &lt;code&gt;menu&lt;/code&gt; ， &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;post&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fefcd1d46ecea495272355aafbd32b2de35ad2b3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/phalcon_mvc_view_simple&quot;&gt;&lt;em&gt;Phalcon\Mvc\View\Simple&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">可以在独立模式下使用&lt;a href=&quot;../api/phalcon_mvc_view_simple&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ View \ Simple&lt;/em&gt;&lt;/a&gt;进行演示：</target>
        </trans-unit>
        <trans-unit id="fa2bd1e51e64b7795a575f7a12e3a2784f1c72a5" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://en.wikipedia.org/wiki/CURL&quot;&gt;curl&lt;/a&gt; we&amp;rsquo;ll test every route in our application verifying its proper operation.</source>
          <target state="translated">使用&lt;a href=&quot;http://en.wikipedia.org/wiki/CURL&quot;&gt;curl，&lt;/a&gt;我们将测试应用程序中的每条路线，以验证其正确的操作。</target>
        </trans-unit>
        <trans-unit id="b2f23878b1d7e5dcc33c15971b656330b14432f4" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;models&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">可以在独立模式下使用&lt;a href=&quot;models&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;进行演示：</target>
        </trans-unit>
        <trans-unit id="57605863f91d6afc1bcf7d1ffdafe1bacf4a048c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$_GET['_url']&lt;/code&gt; as source of URIs:</source>
          <target state="translated">使用 &lt;code&gt;$_GET['_url']&lt;/code&gt; 作为URI的来源：</target>
        </trans-unit>
        <trans-unit id="b50f09cafe370a77b4903e3455e1be35fbff36b2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$_SERVER['REQUEST_URI']&lt;/code&gt; as source of URIs:</source>
          <target state="translated">使用 &lt;code&gt;$_SERVER['REQUEST_URI']&lt;/code&gt; 作为URI的来源：</target>
        </trans-unit>
        <trans-unit id="d1bab01d60a9e89a547752c6962b5e54e2601a39" translate="yes" xml:space="preserve">
          <source>Using Controllers</source>
          <target state="translated">使用控制器</target>
        </trans-unit>
        <trans-unit id="351aabc33d8513008e93393f1cc8419e0425c928" translate="yes" xml:space="preserve">
          <source>Using Controllers as Handlers</source>
          <target state="translated">将控制器用作处理程序</target>
        </trans-unit>
        <trans-unit id="588c359296585ea708ddd4793d4f606e3909661c" translate="yes" xml:space="preserve">
          <source>Using PHP Built-in webserver</source>
          <target state="translated">使用PHP内置的webserver</target>
        </trans-unit>
        <trans-unit id="dd4669ca9c2fe5d3bc7226103f94706530f82eb9" translate="yes" xml:space="preserve">
          <source>Using Partials</source>
          <target state="translated">使用对偶数</target>
        </trans-unit>
        <trans-unit id="3069441f79ae6a7f25e785c04b30c78d241bd59e" translate="yes" xml:space="preserve">
          <source>Using Raw SQL</source>
          <target state="translated">使用原始SQL</target>
        </trans-unit>
        <trans-unit id="2dfdff9babf39b8c5711494190419fd6967d2d2b" translate="yes" xml:space="preserve">
          <source>Using Services From The DI</source>
          <target state="translated">使用DI的服务</target>
        </trans-unit>
        <trans-unit id="589d42f04f1518dc454ae79b971f929c57733d04" translate="yes" xml:space="preserve">
          <source>Using Services as Controllers</source>
          <target state="translated">将服务用作控制器</target>
        </trans-unit>
        <trans-unit id="58cef50934545f6b19bfc272e4732512274db4c0" translate="yes" xml:space="preserve">
          <source>Using Tag Helpers</source>
          <target state="translated">使用标签助手</target>
        </trans-unit>
        <trans-unit id="2bdcb486fee8f928e6c7e37223e07b0f33283cc7" translate="yes" xml:space="preserve">
          <source>Using Templates</source>
          <target state="translated">使用模板</target>
        </trans-unit>
        <trans-unit id="0947a90a8e69f702eacc627176e66b602d4b3c69" translate="yes" xml:space="preserve">
          <source>Using Traits as behaviors</source>
          <target state="translated">将特征作为行为</target>
        </trans-unit>
        <trans-unit id="56a90897779592deadbdbc99979f674bd92a7405" translate="yes" xml:space="preserve">
          <source>Using Views</source>
          <target state="translated">使用视图</target>
        </trans-unit>
        <trans-unit id="c418f8ec32d68ec2f2f60f97430872d34b4dbeb1" translate="yes" xml:space="preserve">
          <source>Using Volt in a stand-alone mode can be demonstrated below:</source>
          <target state="translated">下面可以演示在独立模式下使用Volt。</target>
        </trans-unit>
        <trans-unit id="6f8449787a74e1ce921d54d058cc629ca224812a" translate="yes" xml:space="preserve">
          <source>Using XDebug</source>
          <target state="translated">使用XDebug</target>
        </trans-unit>
        <trans-unit id="7c05453f03bd0dc68f7fbd0c40b5627017c7c2e3" translate="yes" xml:space="preserve">
          <source>Using a custom Events Manager</source>
          <target state="translated">使用自定义的事件管理器</target>
        </trans-unit>
        <trans-unit id="436ca32c9faf4089e26c447e696ab5b1a773be61" translate="yes" xml:space="preserve">
          <source>Using a different template engine, usually requires complex text parsing using external PHP libraries in order to generate the final output for the user. This usually increases the number of resources that your application will use.</source>
          <target state="translated">使用不同的模板引擎,通常需要使用外部PHP库进行复杂的文本解析,以便为用户生成最终的输出。这通常会增加你的应用程序使用的资源数量。</target>
        </trans-unit>
        <trans-unit id="c7786b422ff512cc03b04a2554ab449d72d57da1" translate="yes" xml:space="preserve">
          <source>Using a tool like &lt;a href=&quot;https://github.com/jokkedk/webgrind/&quot;&gt;Webgrind&lt;/a&gt; you can see which functions/methods are slower than others:</source>
          <target state="translated">使用&lt;a href=&quot;https://github.com/jokkedk/webgrind/&quot;&gt;Webgrind之&lt;/a&gt;类的工具，您可以看到哪些功能/方法比其他的慢一些：</target>
        </trans-unit>
        <trans-unit id="1c01ee9c01b6017148f9cb829ad4a6913dc10054" translate="yes" xml:space="preserve">
          <source>Using conversors</source>
          <target state="translated">使用对话者</target>
        </trans-unit>
        <trans-unit id="e57549a4bc19901d6e510959e1c7ccc2964ad81d" translate="yes" xml:space="preserve">
          <source>Using high-level abstraction components such as &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt; to access a database, it is difficult to understand which statements are sent to the database system. &lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon\Logger&lt;/em&gt;&lt;/a&gt; interacts with &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;, providing logging capabilities on the database abstraction layer.</source>
          <target state="translated">使用诸如&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db之&lt;/em&gt;&lt;/a&gt;类的高级抽象组件来访问数据库，很难理解哪些语句发送到了数据库系统。&lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon \ Logger&lt;/em&gt;&lt;/a&gt;与&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;进行交互，在数据库抽象层提供日志记录功能。</target>
        </trans-unit>
        <trans-unit id="1d128ac661df982402abb983ac231b97884e8528" translate="yes" xml:space="preserve">
          <source>Using namespaces has some implications when loading the appropriate controller. To adjust the framework behavior to namespaces is necessary to perform one or all of the following tasks:</source>
          <target state="translated">使用命名空间在加载相应的控制器时有一些影响。为了调整框架行为以适应命名空间,有必要执行以下一个或全部任务。</target>
        </trans-unit>
        <trans-unit id="8a5ba25655351e4366f72db55501f7260dc5ded1" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt; it&amp;rsquo;s possible to insert a hook point before the dispatcher throws an exception when the controller/action combination wasn&amp;rsquo;t found:</source>
          <target state="translated">使用&lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt;可以在找不到控制器/动作组合时在调度程序抛出异常之前插入一个挂钩点：</target>
        </trans-unit>
        <trans-unit id="e022cbde3f76b6597bcb2be152ca8342512bf0f7" translate="yes" xml:space="preserve">
          <source>Using the unique name, forms can be accessed in any part of the application:</source>
          <target state="translated">使用唯一的名称,可以在应用程序的任何部分访问表单。</target>
        </trans-unit>
        <trans-unit id="6acdb6f02a643c7fdd2ddfd8357c54babe5d3c7c" translate="yes" xml:space="preserve">
          <source>Using this class as entity, allows the form to take the default values from it:</source>
          <target state="translated">将该类作为实体,可以让表单从中获取默认值。</target>
        </trans-unit>
        <trans-unit id="d060595ac9b24a27c2c469c945f6d549ce922240" translate="yes" xml:space="preserve">
          <source>Usually the Flash Messaging service is requested from the services container. If you&amp;rsquo;re using &lt;a href=&quot;../api/phalcon_di_factorydefault&quot;&gt;&lt;em&gt;Phalcon\Di\FactoryDefault&lt;/em&gt;&lt;/a&gt; then &lt;a href=&quot;../api/phalcon_flash_direct&quot;&gt;&lt;em&gt;Phalcon\Flash\Direct&lt;/em&gt;&lt;/a&gt; is automatically registered as &amp;ldquo;flash&amp;rdquo; service and &lt;a href=&quot;../api/phalcon_flash_session&quot;&gt;&lt;em&gt;Phalcon\Flash\Session&lt;/em&gt;&lt;/a&gt; is automatically registered as &amp;ldquo;flashSession&amp;rdquo; service. You can also manually register it:</source>
          <target state="translated">通常，从服务容器请求Flash Messaging服务。如果您使用的是&lt;a href=&quot;../api/phalcon_di_factorydefault&quot;&gt;&lt;em&gt;Phalcon \ Di \ FactoryDe​​fault，&lt;/em&gt;&lt;/a&gt;则&lt;a href=&quot;../api/phalcon_flash_direct&quot;&gt;&lt;em&gt;Phalcon \ Flash \ Direct&lt;/em&gt;&lt;/a&gt;将自动注册为&amp;ldquo; flash&amp;rdquo;服务，而&lt;a href=&quot;../api/phalcon_flash_session&quot;&gt;&lt;em&gt;Phalcon \ Flash \ Session&lt;/em&gt;&lt;/a&gt;将自动注册为&amp;ldquo; flashSession&amp;rdquo;服务。您也可以手动注册：</target>
        </trans-unit>
        <trans-unit id="afd552a9fc7485f6bcb11d28c84e40b2740ea1bd" translate="yes" xml:space="preserve">
          <source>Usually, this component must be registered in the Dependency Injector container, so you can set up it there:</source>
          <target state="translated">通常,这个组件必须在Dependency Injector容器中注册,所以你可以在那里设置它。</target>
        </trans-unit>
        <trans-unit id="7235465090646f5304f0a22a72a273472cdd6ff4" translate="yes" xml:space="preserve">
          <source>Utility to normalize a string&amp;rsquo;s encoding to UTF-32.</source>
          <target state="translated">实用程序，用于将字符串的编码标准化为UTF-32。</target>
        </trans-unit>
        <trans-unit id="e18f42d3097ac4903fde0081de3efaa3b3e02188" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute; is another sample application you can use to learn more about Phalcon. V&amp;ouml;kur&amp;oacute; is a small website that shows how to implement a security features and management of users and permissions. You can clone its code from &lt;a href=&quot;https://github.com/phalcon/vokuro&quot;&gt;Github&lt;/a&gt;.</source>
          <target state="translated">V&amp;ouml;kur&amp;oacute;是另一个示例应用程序，您可以使用它来了解有关Phalcon的更多信息。V&amp;ouml;kur&amp;oacute;是一个小型网站，显示了如何实施安全功能以及用户和权限的管理。您可以从&lt;a href=&quot;https://github.com/phalcon/vokuro&quot;&gt;Github&lt;/a&gt;克隆其代码。</target>
        </trans-unit>
        <trans-unit id="03557dc8a5e878b3d82989cd0d208e8c15ff9291" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute; sends emails to confirm the sign up of registered users using Swift, the composer.json looks like:</source>
          <target state="translated">V&amp;ouml;kur&amp;oacute;发送电子邮件以确认使用Swift的注册用户，composer.json如下所示：</target>
        </trans-unit>
        <trans-unit id="48740c2e0eba7a4489cd530438565f589a7f9f78" translate="yes" xml:space="preserve">
          <source>V&amp;ouml;kur&amp;oacute;: Security, Authentication, Authorization and more</source>
          <target state="translated">V&amp;ouml;kur&amp;oacute;：安全性，身份验证，授权等</target>
        </trans-unit>
        <trans-unit id="7672694253ca92e0dce69184fdeec37f709db3c3" translate="yes" xml:space="preserve">
          <source>VERSION_MAJOR</source>
          <target state="translated">VERSION_MAJOR</target>
        </trans-unit>
        <trans-unit id="9f4043bc6087635a4144a1b9e9481b30e44b62ee" translate="yes" xml:space="preserve">
          <source>VERSION_MEDIUM</source>
          <target state="translated">VERSION_MEDIUM</target>
        </trans-unit>
        <trans-unit id="3225bf508a5f7898b6242e8edb4d3664899f1c67" translate="yes" xml:space="preserve">
          <source>VERSION_MINOR</source>
          <target state="translated">VERSION_MINOR</target>
        </trans-unit>
        <trans-unit id="ca59e520f4a9c68edf021711bd307d285c599494" translate="yes" xml:space="preserve">
          <source>VERSION_SPECIAL</source>
          <target state="translated">VERSION_SPECIAL</target>
        </trans-unit>
        <trans-unit id="ddc72638e6da7c773007a44ac58c1b250f69f173" translate="yes" xml:space="preserve">
          <source>VERSION_SPECIAL_NUMBER</source>
          <target state="translated">VERSION_SPECIAL_NUMBER</target>
        </trans-unit>
        <trans-unit id="433bc92f0786ed6903790ac07a5aa6aac6fcf35c" translate="yes" xml:space="preserve">
          <source>VERTICAL</source>
          <target state="translated">VERTICAL</target>
        </trans-unit>
        <trans-unit id="648dd0d84cb56188904dc8a7f1b1f05dd0288f21" translate="yes" xml:space="preserve">
          <source>Validate a set of data according to a set of rules</source>
          <target state="translated">根据一组规则验证一组数据。</target>
        </trans-unit>
        <trans-unit id="2f1b38e434103e4cd88b17cf35e500d1dbf27b52" translate="yes" xml:space="preserve">
          <source>Validates that a field or a combination of a set of fields are not present more than once in the existing records of the related table</source>
          <target state="translated">验证一个字段或一组字段的组合在相关表的现有记录中没有出现过一次以上。</target>
        </trans-unit>
        <trans-unit id="09954265ae786532ceffb5502e9f1cc0152b31a1" translate="yes" xml:space="preserve">
          <source>Validates that a string has the specified maximum and minimum constraints The test is passed if for a string&amp;rsquo;s length L, min&amp;lt;=L&amp;lt;=max, i.e. L must be at least min, and at most max.</source>
          <target state="translated">验证字符串是否具有指定的最大和最小约束。如果字符串的长度L为min &amp;lt;= L &amp;lt;= max，即L必须至少为min，且最大为max，则通过测试。</target>
        </trans-unit>
        <trans-unit id="49467d80d7d2350ce8b5a3a3b2f5ece88e0c45a4" translate="yes" xml:space="preserve">
          <source>Validates that a value is between an inclusive range of two values. For a value x, the test is passed if minimum&amp;lt;=x&amp;lt;=maximum.</source>
          <target state="translated">验证一个值是否在两个值的包含范围之间。对于x值，如果最小值&amp;lt;= x &amp;lt;=最大值，则通过测试。</target>
        </trans-unit>
        <trans-unit id="be6f99a44675c56da59d2c2c8387de6f19cb7040" translate="yes" xml:space="preserve">
          <source>Validates that a value is ipv4 address in valid range</source>
          <target state="translated">验证一个值是否在有效范围内的ipv4地址。</target>
        </trans-unit>
        <trans-unit id="c31bf4a8ab5e77008ba24f8d78ce48fa187b74cd" translate="yes" xml:space="preserve">
          <source>Validates that a value is not null or empty string</source>
          <target state="translated">验证一个值是否为空或空字符串。</target>
        </trans-unit>
        <trans-unit id="eb86e39b625cc355f8fd303e616b77bfc6e3b88b" translate="yes" xml:space="preserve">
          <source>Validates the form</source>
          <target state="translated">验证表格</target>
        </trans-unit>
        <trans-unit id="3f025ac4cddf2343fd061b333fd0f1bd45353a90" translate="yes" xml:space="preserve">
          <source>Validating Data Integrity</source>
          <target state="translated">验证数据完整性</target>
        </trans-unit>
        <trans-unit id="8bb20ec2ad79ee9bedf554ba015b63a8388aec1e" translate="yes" xml:space="preserve">
          <source>Validating Models</source>
          <target state="translated">验证模型</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="7c3ffd6c63c688ef2084a3c36c96682569d2dcbb" translate="yes" xml:space="preserve">
          <source>Validation Events</source>
          <target state="translated">验证事件</target>
        </trans-unit>
        <trans-unit id="900aacdde971f44b1426d3b6340bd08cbd3b4dd7" translate="yes" xml:space="preserve">
          <source>Validation Events and Events Manager</source>
          <target state="translated">验证事件和事件管理器</target>
        </trans-unit>
        <trans-unit id="7e557e2d327fddfa102d879d6bdc30443e867e89" translate="yes" xml:space="preserve">
          <source>Validation Failed Events</source>
          <target state="translated">验证失败事件</target>
        </trans-unit>
        <trans-unit id="5366680967ce29b04fb76e3e149a5470eb6ac85c" translate="yes" xml:space="preserve">
          <source>Validation Messages</source>
          <target state="translated">验证信息</target>
        </trans-unit>
        <trans-unit id="ce98834f2a88e04569c9daef3bce486b573f341b" translate="yes" xml:space="preserve">
          <source>Validation chains can be initialized in a direct manner by just adding validators to the &lt;a href=&quot;../api/phalcon_validation&quot;&gt;&lt;em&gt;Phalcon\Validation&lt;/em&gt;&lt;/a&gt; object. You can put your validations in a separate file for better re-use code and organization:</source>
          <target state="translated">只需将验证器添加到&lt;a href=&quot;../api/phalcon_validation&quot;&gt;&lt;em&gt;Phalcon \ Validation&lt;/em&gt;&lt;/a&gt;对象，就可以直接初始化验证链。您可以将验证放在单独的文件中，以便更好地重用代码和组织：</target>
        </trans-unit>
        <trans-unit id="dd3cabda743ab6483370dceda59fb215daccbbe9" translate="yes" xml:space="preserve">
          <source>Validation::add</source>
          <target state="translated">Validation::add</target>
        </trans-unit>
        <trans-unit id="6c9b30a09c38d59d9bf0bf1bc804e012aac46126" translate="yes" xml:space="preserve">
          <source>Validation::bind</source>
          <target state="translated">Validation::bind</target>
        </trans-unit>
        <trans-unit id="9c063eb19cc440d0c9caa2de461fcd34e7cd3684" translate="yes" xml:space="preserve">
          <source>Validation::rule</source>
          <target state="translated">Validation::rule</target>
        </trans-unit>
        <trans-unit id="3e84ed0cd5c796ba2eb4714c69cc8ec35372caf0" translate="yes" xml:space="preserve">
          <source>Validation::rules</source>
          <target state="translated">Validation::rules</target>
        </trans-unit>
        <trans-unit id="159641a1957efa3a36a65b6c5b7c0b7488185b43" translate="yes" xml:space="preserve">
          <source>ValidationInterface</source>
          <target state="translated">ValidationInterface</target>
        </trans-unit>
        <trans-unit id="dd59033aa12ada554a1c25f8851bc3d6e3a2d956" translate="yes" xml:space="preserve">
          <source>ValidationInterface::add</source>
          <target state="translated">ValidationInterface::add</target>
        </trans-unit>
        <trans-unit id="f1f23d405e2387721e5f18e46aa204eb202c56f5" translate="yes" xml:space="preserve">
          <source>ValidationInterface::bind</source>
          <target state="translated">ValidationInterface::bind</target>
        </trans-unit>
        <trans-unit id="eee63c67f859d993f0b4ee2656290d3d2500f2de" translate="yes" xml:space="preserve">
          <source>ValidationInterface::rule</source>
          <target state="translated">ValidationInterface::rule</target>
        </trans-unit>
        <trans-unit id="fba406979e79121cd8379fa33a77da57f9b29c70" translate="yes" xml:space="preserve">
          <source>ValidationInterface::rules</source>
          <target state="translated">ValidationInterface::rules</target>
        </trans-unit>
        <trans-unit id="fde59d48335d49f417fc33cd95a5a3142c134b76" translate="yes" xml:space="preserve">
          <source>Validator for constructor</source>
          <target state="translated">构造函数的验证器</target>
        </trans-unit>
        <trans-unit id="762f13c2259b5fbab6d8f1bdbab081fc48bc558f" translate="yes" xml:space="preserve">
          <source>Validators</source>
          <target state="translated">Validators</target>
        </trans-unit>
        <trans-unit id="55c30890de2d7c85ab7e07ceb6f8a58a307aee46" translate="yes" xml:space="preserve">
          <source>Validators are executed in the same order as they were registered.</source>
          <target state="translated">验证器的执行顺序与注册时相同。</target>
        </trans-unit>
        <trans-unit id="8b7671b4544a1d24b546c8a61c280ac36052cdff" translate="yes" xml:space="preserve">
          <source>Values assigned directly or via the array of attributes are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:</source>
          <target state="translated">直接或通过属性数组分配的值会根据相关属性数据类型进行转义/消毒。所以你可以传递一个不安全的数组,而不用担心可能的SQL注入。</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="cf664dcb3f96e917eac3ac7c908c6636e242c5e9" translate="yes" xml:space="preserve">
          <source>Variables can be formatted or modified using filters. The pipe operator &lt;code&gt;|&lt;/code&gt; is used to apply filters to variables:</source>
          <target state="translated">可以使用过滤器格式化或修改变量。管道操作员 &lt;code&gt;|&lt;/code&gt; 用于将过滤器应用于变量：</target>
        </trans-unit>
        <trans-unit id="a1a41d011bab75f71a15cbcbb3d94b28d344505e" translate="yes" xml:space="preserve">
          <source>Variables may be changed in a template using the instruction &amp;ldquo;set&amp;rdquo;:</source>
          <target state="translated">可以使用&amp;ldquo; set&amp;rdquo;指令在模板中更改变量：</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="04ffb3231e59562188fc8f108c230ac222d9437a" translate="yes" xml:space="preserve">
          <source>Version::get</source>
          <target state="translated">Version::get</target>
        </trans-unit>
        <trans-unit id="8940b448766b16ed73688efb8b28b7702b7a9386" translate="yes" xml:space="preserve">
          <source>Version::getId</source>
          <target state="translated">Version::getId</target>
        </trans-unit>
        <trans-unit id="a77e6decaadbd6c9dba17ef5c3aebc35f9567bb7" translate="yes" xml:space="preserve">
          <source>View Events</source>
          <target state="translated">查看活动</target>
        </trans-unit>
        <trans-unit id="da3633a5062991c64406645f3085c2afb88d974c" translate="yes" xml:space="preserve">
          <source>View Helpers (Tags)</source>
          <target state="translated">查看助手(标签</target>
        </trans-unit>
        <trans-unit id="df87007ce55fe78b1319363d1af1e25cfbe4e64f" translate="yes" xml:space="preserve">
          <source>View Integration</source>
          <target state="translated">查看集成</target>
        </trans-unit>
        <trans-unit id="92bb86680269cfc3c05ec1efe0677acb8488357d" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;edit&amp;rdquo;</source>
          <target state="translated">查看动作&amp;ldquo;编辑&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="5d481a1e5f54e5121d29b7fa23c21e33f56b69a8" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;new&amp;rdquo;</source>
          <target state="translated">查看&amp;ldquo;新&amp;rdquo;操作</target>
        </trans-unit>
        <trans-unit id="d0a26a1d1073393d8537e46bde795d21d124d33c" translate="yes" xml:space="preserve">
          <source>View for the action &amp;ldquo;search&amp;rdquo;</source>
          <target state="translated">查看动作&amp;ldquo;搜索&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="80332c88172f9213f51a820b8882d3d3adbdd3c6" translate="yes" xml:space="preserve">
          <source>Viewing the form in your browser will show something like this:</source>
          <target state="translated">在浏览器中查看表格会显示这样的内容。</target>
        </trans-unit>
        <trans-unit id="24be61285e096fa817d4cdb0a0ed8294ea5bd2fb" translate="yes" xml:space="preserve">
          <source>Views</source>
          <target state="translated">Views</target>
        </trans-unit>
        <trans-unit id="d6f947482b9450eb74d3204d5cc2058bdc206164" translate="yes" xml:space="preserve">
          <source>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.</source>
          <target state="translated">视图代表了应用程序的用户界面。视图通常是带有嵌入式PHP代码的HTML文件,它只执行与数据展示相关的任务。视图处理向网络浏览器或其他工具提供数据的工作,这些工具用于从你的应用程序发出请求。</target>
        </trans-unit>
        <trans-unit id="863c19a1bce484a4a2cbf9c819cfda6fee47b454" translate="yes" xml:space="preserve">
          <source>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application. &lt;a href=&quot;views&quot;&gt;&lt;em&gt;Learn more&lt;/em&gt;&lt;/a&gt;</source>
          <target state="translated">视图代表应用程序的用户界面。视图通常是带有嵌入式PHP代码的HTML文件，它们执行仅与数据表示有关的任务。视图处理将数据提供给Web浏览器或其他用于从应用程序发出请求的工具的工作。&lt;a href=&quot;views&quot;&gt;&lt;em&gt;学到更多&lt;/em&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8d3bdc9e0aa545f3d7ed337c515034b08b1f93e9" translate="yes" xml:space="preserve">
          <source>Virtual Foreign Keys</source>
          <target state="translated">虚拟外键</target>
        </trans-unit>
        <trans-unit id="80e002ac7b12d3f2cdf65aa829a437c692675c0a" translate="yes" xml:space="preserve">
          <source>Virtual Hosts</source>
          <target state="translated">虚拟主机</target>
        </trans-unit>
        <trans-unit id="47c87dcdeab336547b1440686574aa3e94242f2f" translate="yes" xml:space="preserve">
          <source>Volt Syntax:</source>
          <target state="translated">伏特语法。</target>
        </trans-unit>
        <trans-unit id="d44c73bc03848019950b28084d702fd40073a3de" translate="yes" xml:space="preserve">
          <source>Volt extensions must be in registered in the compiler making them available in compile time:</source>
          <target state="translated">Volt扩展必须在编译器中注册,使其在编译时可用。</target>
        </trans-unit>
        <trans-unit id="718b4897f7ab62cfcc4c95d9ec69a8961addcade" translate="yes" xml:space="preserve">
          <source>Volt function</source>
          <target state="translated">伏特功能</target>
        </trans-unit>
        <trans-unit id="171f261607f9e9ed2076709b44a8a1c1314dfbee" translate="yes" xml:space="preserve">
          <source>Volt is an ultra-fast and designer friendly templating language written in C for PHP. It provides you a set of helpers to write views in an easy way. Volt is highly integrated with other components of Phalcon, just as you can use it as a stand-alone component in your applications.</source>
          <target state="translated">Volt是一个超快的和设计师友好的模板语言,用C语言为PHP编写。它为你提供了一组助手,让你以一种简单的方式编写视图。Volt与Phalcon的其他组件高度集成,就像你可以在你的应用程序中使用它作为一个独立的组件一样。</target>
        </trans-unit>
        <trans-unit id="7fbe6d43364c9af50b25f30e7cdab05c17cf4306" translate="yes" xml:space="preserve">
          <source>Volt is highly integrated with &lt;a href=&quot;tags&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt;, so it&amp;rsquo;s easy to use the helpers provided by that component in a Volt template:</source>
          <target state="translated">Volt与&lt;a href=&quot;tags&quot;&gt;&lt;em&gt;Phalcon \ Tag&lt;/em&gt;&lt;/a&gt;高度集成，因此很容易在Volt模板中使用该组件提供的帮助程序：</target>
        </trans-unit>
        <trans-unit id="1f1573239882775081ffcf6a2a75112153b9c1fb" translate="yes" xml:space="preserve">
          <source>Volt is inspired by &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja&lt;/a&gt;, originally created by &lt;a href=&quot;https://github.com/mitsuhiko&quot;&gt;Armin Ronacher&lt;/a&gt;. Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt&amp;rsquo;s syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.</source>
          <target state="translated">Volt的灵感来自于&lt;a href=&quot;https://github.com/mitsuhiko&quot;&gt;Armin Ronacher&lt;/a&gt;最初创建的&lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;Jinja&lt;/a&gt;。因此，许多开发人员将使用与相似模板引擎相同的语法来熟悉领域。Volt的语法和功能得到了增强，增加了更多的元素，当然还增加了开发人员在使用Phalcon时所习惯的性能。</target>
        </trans-unit>
        <trans-unit id="c09c8ea2c5624bedf366e6757e65b13e9d3933a2" translate="yes" xml:space="preserve">
          <source>Volt provides a basic set of expression support, including literals and common operators.</source>
          <target state="translated">Volt提供了一套基本的表达式支持,包括字元和常用操作符。</target>
        </trans-unit>
        <trans-unit id="fa8efd625bffd44725937e19994cc3fd3db8aa11" translate="yes" xml:space="preserve">
          <source>Volt provides a set of basic but powerful control structures for use in templates:</source>
          <target state="translated">Volt提供了一套基本但功能强大的控制结构供模板使用。</target>
        </trans-unit>
        <trans-unit id="d2d6b19d64ebb1ed52ab54681fe12b5d0345c985" translate="yes" xml:space="preserve">
          <source>Volt replaces the directory separators / and \ by this separator in order to create a single file in the compiled directory</source>
          <target state="translated">Volt用这个分隔符替换了目录分隔符/和\,以便在编译后的目录中创建一个单独的文件。</target>
        </trans-unit>
        <trans-unit id="99d6de0808fa5b25bcd868554b81132c038cf55c" translate="yes" xml:space="preserve">
          <source>Volt syntax for above example:</source>
          <target state="translated">上述例子的伏特语法。</target>
        </trans-unit>
        <trans-unit id="b442d8d2ab0e3968889e9050bcd7b9f4d113f740" translate="yes" xml:space="preserve">
          <source>Volt syntax:</source>
          <target state="translated">伏特语法。</target>
        </trans-unit>
        <trans-unit id="7c62a74f4f15525b20a0882d892436c503cafb70" translate="yes" xml:space="preserve">
          <source>Volt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:</source>
          <target state="translated">Volt视图是编译成纯PHP代码的,所以基本上省去了手动编写PHP代码的精力。</target>
        </trans-unit>
        <trans-unit id="abea67996538f26cdbb8b3c042969e4610100054" translate="yes" xml:space="preserve">
          <source>Volt: Template Engine</source>
          <target state="translated">伏。模板引擎</target>
        </trans-unit>
        <trans-unit id="eed413c23de930642a8830a5163813faffd163f7" translate="yes" xml:space="preserve">
          <source>WAMP has both 32 and 64 bit versions. From the download section, you can choose the Phalcon for Windows accordingly to your desired architecture.</source>
          <target state="translated">WAMP有32位和64位两种版本。从下载部分,你可以根据你所需的架构选择相应的Phalcon for Windows。</target>
        </trans-unit>
        <trans-unit id="fd3edc641024a335a508fdacefb5f51ded5905cc" translate="yes" xml:space="preserve">
          <source>WARNING</source>
          <target state="translated">WARNING</target>
        </trans-unit>
        <trans-unit id="2ab399961fd26c807a88e24b93a90dbd5e9c4828" translate="yes" xml:space="preserve">
          <source>Warning! If $whereCondition is string it not escaped.</source>
          <target state="translated">警告!如果$whereCondition是字符串,它没有被转义。如果$whereCondition是字符串,则不能转义。</target>
        </trans-unit>
        <trans-unit id="a6a4c8779b4638d9db523ac724e341adbb438987" translate="yes" xml:space="preserve">
          <source>We are only requesting some fields in the table, therefore those cannot be considered an entire object, so the returned object is still a resultset of type &lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset\Simple&lt;/em&gt;&lt;/a&gt;. However, each element is a standard object that only contain the two columns that were requested.</source>
          <target state="translated">我们仅请求表中的某些字段，因此不能将其视为整个对象，因此返回的对象仍然是&lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset \ Simple&lt;/em&gt;&lt;/a&gt;类型的结果集。但是，每个元素都是一个标准对象，仅包含所请求的两列。</target>
        </trans-unit>
        <trans-unit id="6dc5e527ad908d431aff76e1e3057d93353909f5" translate="yes" xml:space="preserve">
          <source>We can easily replace a component with one created by ourselves or a third party.</source>
          <target state="translated">我们可以很容易地用我们自己或第三方创建的组件替换。</target>
        </trans-unit>
        <trans-unit id="8487fa49fd46d5d4890fbd5cf7f033823e6fcc8e" translate="yes" xml:space="preserve">
          <source>We can get global instances of components in a structured and unified way.</source>
          <target state="translated">我们可以通过结构化的统一方式获得组件的全局实例。</target>
        </trans-unit>
        <trans-unit id="b35a97299e7e593f88ee7e9eed86ceb8f1055da0" translate="yes" xml:space="preserve">
          <source>We can then run the following command:</source>
          <target state="translated">然后我们可以运行以下命令。</target>
        </trans-unit>
        <trans-unit id="64a4453fce2d2e5a038b3d755131f48af305ef87" translate="yes" xml:space="preserve">
          <source>We designed this component based on the &lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;XSS (Cross Site Scripting) Prevention Cheat Sheet&lt;/a&gt; created by the &lt;a href=&quot;https://www.owasp.org&quot;&gt;OWASP&lt;/a&gt;.</source>
          <target state="translated">我们基于&lt;a href=&quot;https://www.owasp.org&quot;&gt;OWASP&lt;/a&gt;创建的&lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;XSS（跨站点脚本）预防备忘单&lt;/a&gt;设计了该组件。</target>
        </trans-unit>
        <trans-unit id="4ca3d01eb07dbc10b588c408884a252d0fabe687" translate="yes" xml:space="preserve">
          <source>We have full control of the object initialization, allowing us to set these objects, as needed before delivering them to components.</source>
          <target state="translated">我们可以完全控制对象的初始化,允许我们在将对象交付给组件之前,根据需要设置这些对象。</target>
        </trans-unit>
        <trans-unit id="60032c772215d295fdf6747b75f8a69b36eb8141" translate="yes" xml:space="preserve">
          <source>We have seen how Phalcon lets you create forms and bind data from a database in a structured way. In next chapter, we will see how to add custom HTML elements like a menu.</source>
          <target state="translated">我们已经看到了Phalcon是如何让你创建表单并以结构化的方式从数据库中绑定数据的。在下一章中,我们将看到如何添加像菜单这样的自定义HTML元素。</target>
        </trans-unit>
        <trans-unit id="fdc8023ffd1ed509710069e501840ef11718420a" translate="yes" xml:space="preserve">
          <source>We have three properties to work with here: &lt;code&gt;$id&lt;/code&gt;, &lt;code&gt;$name&lt;/code&gt; and &lt;code&gt;$price&lt;/code&gt;. So, let&amp;rsquo;s say you want to retrieve the first record in the table with the name &amp;lsquo;Terminator&amp;rsquo;. This could be written like:</source>
          <target state="translated">我们在这里可以使用三个属性： &lt;code&gt;$id&lt;/code&gt; ， &lt;code&gt;$name&lt;/code&gt; 和 &lt;code&gt;$price&lt;/code&gt; 。因此，假设您要检索表中名称为&amp;ldquo;终结者&amp;rdquo;的第一条记录。可以这样写：</target>
        </trans-unit>
        <trans-unit id="ba53ea8a96bc92a21ee78e4d19c66857d5d2fd21" translate="yes" xml:space="preserve">
          <source>We have to cast values manually because parse_ini_file() has a poor implementation.</source>
          <target state="translated">因为parse_ini_file()的实现效果不好,所以我们必须手动投值。</target>
        </trans-unit>
        <trans-unit id="101f02e76e3961165c981bdd2dee708e7ce0e9f2" translate="yes" xml:space="preserve">
          <source>We highly recommend use at least XDebug 2.2.3 for a better compatibility with Phalcon</source>
          <target state="translated">我们强烈建议至少使用XDebug 2.2.3,以便更好地与Phalcon兼容。</target>
        </trans-unit>
        <trans-unit id="e5ab3ec73b979fb665134e5eb25bfa72a9866b15" translate="yes" xml:space="preserve">
          <source>We now have total control over the Dispatcher used in the application. Many components in the framework trigger events that allow us to modify their internal flow of operation. As the Dependency Injector component acts as glue for components, a new component called &lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt; allows us to intercept the events produced by a component, routing the events to listeners.</source>
          <target state="translated">现在，我们可以完全控制该应用程序中使用的Dispatcher。框架中的许多组件都会触发事件，这些事件使我们能够修改其内部操作流程。由于Dependency Injector组件充当了组件的黏合剂，因此一个名为&lt;a href=&quot;events&quot;&gt;&lt;em&gt;EventsManager&lt;/em&gt;&lt;/a&gt;的新组件使我们能够拦截由组件产生的事件，并将事件路由到侦听器。</target>
        </trans-unit>
        <trans-unit id="b478404bc66a4a86803031b387b99ce4dc40508c" translate="yes" xml:space="preserve">
          <source>We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.</source>
          <target state="translated">我们建议将验证方法声明为保护方法,以防止该业务逻辑实现被公开暴露。</target>
        </trans-unit>
        <trans-unit id="4ae108358e5e7ca2b27a24c918f0fe4f40f9b800" translate="yes" xml:space="preserve">
          <source>We saved the password hashed with a default work factor. A higher work factor will make the password less vulnerable as its encryption will be slow. We can check if the password is correct as follows:</source>
          <target state="translated">我们用默认的工作因子保存密码哈希。工作因子越高,密码的加密速度越慢,越不容易被破解。我们可以通过以下方式检查密码是否正确。</target>
        </trans-unit>
        <trans-unit id="00f6e189471a0234ca8d48b9c3b67aa322762e6e" translate="yes" xml:space="preserve">
          <source>We then instantiate the Users class, which corresponds to a User record. The class public properties map to the fields of the record in the users table. Setting the relevant values in the new record and calling &lt;code&gt;save()&lt;/code&gt; will store the data in the database for that record. The &lt;code&gt;save()&lt;/code&gt; method returns a boolean value which indicates whether the storing of the data was successful or not.</source>
          <target state="translated">然后，我们实例化与用户记录相对应的Users类。类公共属性映射到users表中记录的字段。在新记录中设置相关值并调用 &lt;code&gt;save()&lt;/code&gt; 会将数据存储在该记录的数据库中。的 &lt;code&gt;save()&lt;/code&gt; 方法返回一个布尔值，表示该数据的存储是否成功与否。</target>
        </trans-unit>
        <trans-unit id="213afb66383780cdfcaced5e887cbfa83be867f9" translate="yes" xml:space="preserve">
          <source>We will discuss this file in depth later.</source>
          <target state="translated">我们将在后面深入讨论这个文件。</target>
        </trans-unit>
        <trans-unit id="a12d67b5faebe21420c30ef4dc2ffc828ae1c90e" translate="yes" xml:space="preserve">
          <source>Web Interface to Tools</source>
          <target state="translated">工具的网络界面</target>
        </trans-unit>
        <trans-unit id="1394e7b6f6a882f83b939bd25fe6045be3137ede" translate="yes" xml:space="preserve">
          <source>Websites and web applications are vulnerable to &lt;a href=&quot;https://www.owasp.org/index.php/XSS&quot;&gt;XSS&lt;/a&gt; attacks and although PHP provides escaping functionality, in some contexts it is not sufficient/appropriate. &lt;a href=&quot;../api/phalcon_escaper&quot;&gt;&lt;em&gt;Phalcon\Escaper&lt;/em&gt;&lt;/a&gt; provides contextual escaping and is written in Zephir, providing the minimal overhead when escaping different kinds of texts.</source>
          <target state="translated">网站和Web应用程序容易受到&lt;a href=&quot;https://www.owasp.org/index.php/XSS&quot;&gt;XSS&lt;/a&gt;攻击，尽管PHP提供了转义功能，但在某些情况下，它还不够/适当。&lt;a href=&quot;../api/phalcon_escaper&quot;&gt;&lt;em&gt;Phalcon \ Escaper&lt;/em&gt;&lt;/a&gt;提供上下文转义，并使用Zephir编写，在转义不同种类的文本时提供最小的开销。</target>
        </trans-unit>
        <trans-unit id="5a879434c5b881453fe7cc36b00a5e77e2a4d03e" translate="yes" xml:space="preserve">
          <source>Welcome to Phalcon framework. Our mission is to give you an advanced tool for developing the faster web sites and applications with PHP.</source>
          <target state="translated">欢迎来到Phalcon框架。我们的使命是给你提供一个先进的工具,让你用PHP开发更快的网站和应用程序。</target>
        </trans-unit>
        <trans-unit id="48b2a0860f516f17b913a9ef7e464c196ffe7efc" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; have modules registered, always is necessary that every matched route returns a valid module. Each registered module has an associated class offering functions to set the module itself up. Each module class definition must implement two methods: registerAutoloaders() and registerServices(), they will be called by &lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon\Mvc\Application&lt;/em&gt;&lt;/a&gt; according to the module to be executed.</source>
          <target state="translated">当&lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Application&lt;/em&gt;&lt;/a&gt;已注册模块时，始终必须使每个匹配的路由都返回一个有效的模块。每个注册的模块都有一个相关的类，提供了设置模块本身的功能。每个模块类定义必须实现两个方法：registerAutoloaders（）和registerServices（），它们将由&lt;a href=&quot;../api/phalcon_mvc_application&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Application&lt;/em&gt;&lt;/a&gt;根据要执行的模块进行调用。</target>
        </trans-unit>
        <trans-unit id="ed7590ad45bfe779b48c989fb4557ae448739d9b" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; requires a service to cache resultsets, it will request it to the Dependency Injector Container with the convention name &amp;ldquo;modelsCache&amp;rdquo;.</source>
          <target state="translated">当&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;需要一个服务来缓存结果集时，它将以约定名称&amp;ldquo; modelsCache&amp;rdquo;将其请求给Dependency Injector容器。</target>
        </trans-unit>
        <trans-unit id="66da09db49599d47b2fdd910d705bdfe6e56fc56" translate="yes" xml:space="preserve">
          <source>When a &amp;ldquo;beforeException&amp;rdquo; is triggered then other plugin is notified:</source>
          <target state="translated">当触发&amp;ldquo; beforeException&amp;rdquo;时，将通知其他插件：</target>
        </trans-unit>
        <trans-unit id="81450a68f459508d0308b3b4bda5d83d41491d30" translate="yes" xml:space="preserve">
          <source>When a cached resultset needs to be invalidated, you can simply delete it from the cache using the previously specified key.</source>
          <target state="translated">当缓存的结果集需要失效时,你可以简单地使用之前指定的键从缓存中删除它。</target>
        </trans-unit>
        <trans-unit id="93ff54f94640ed8d5a8514b8abd3b2ea4030551c" translate="yes" xml:space="preserve">
          <source>When a defined route matches the requested URI then the application executes the corresponding handler.</source>
          <target state="translated">当定义的路由与请求的URI匹配时,应用程序就会执行相应的处理程序。</target>
        </trans-unit>
        <trans-unit id="1b7fab5e643427d626439833c19237ade0fe0a86" translate="yes" xml:space="preserve">
          <source>When a migration is generated a set of classes are created to describe how your database is structured at that particular moment. These classes can be used to synchronize the schema structure on remote databases setting your database ready to work with the new changes that your application implements. Migrations describe these transformations using plain PHP.</source>
          <target state="translated">当迁移生成时,会创建一组类来描述数据库在那个特定时刻的结构。这些类可以用来同步远程数据库的模式结构,使你的数据库准备好与你的应用程序实现的新变化一起工作。Migrations使用纯PHP描述这些转换。</target>
        </trans-unit>
        <trans-unit id="7a117e8f0284043f8f2ed5e4d374f96be60d6401" translate="yes" xml:space="preserve">
          <source>When a migration is generated, instructions are displayed on the console to describe the different steps of the migration and the execution time of those statements. At the end, a migration version is generated.</source>
          <target state="translated">当迁移生成时,控制台上会显示指令,描述迁移的不同步骤和这些语句的执行时间。最后,会生成一个迁移版本。</target>
        </trans-unit>
        <trans-unit id="79b9e95b09c0e01026c813f47087d535012422f4" translate="yes" xml:space="preserve">
          <source>When a process performs multiple database operations, it might be important that each step is completed successfully so that data integrity can be maintained. Transactions offer the ability to ensure that all database operations have been executed successfully before the data is committed to the database.</source>
          <target state="translated">当一个进程执行多个数据库操作时,可能重要的是每一步都要成功完成,这样才能保持数据的完整性。事务提供了一种能力,以确保在数据提交到数据库之前,所有的数据库操作都已成功执行。</target>
        </trans-unit>
        <trans-unit id="83d8481043d76b2ee30a0021395065329e166852" translate="yes" xml:space="preserve">
          <source>When a project is generated using developer tools. A configuration file can be found in &lt;em&gt;app/config/config.ini&lt;/em&gt; To generate models or scaffold, you will need to change the settings used to connect to your database.</source>
          <target state="translated">使用开发人员工具生成项目时。可以在&lt;em&gt;app / config / config.ini中&lt;/em&gt;找到一个配置文件。要生成模型或支架，您将需要更改用于连接数据库的设置。</target>
        </trans-unit>
        <trans-unit id="9abdb8793956c91fcef548daf7794e4b7abb4207" translate="yes" xml:space="preserve">
          <source>When a record is deleted the events related to the delete operation will be executed for each row:</source>
          <target state="translated">当一条记录被删除时,与删除操作相关的事件将对每条记录执行。</target>
        </trans-unit>
        <trans-unit id="53ac2eb71b16d6a3bcdf3374ba548256b038323a" translate="yes" xml:space="preserve">
          <source>When a related record is queried, the ORM internally builds the appropriate condition and gets the required records using &lt;code&gt;find()&lt;/code&gt;/&lt;code&gt;findFirst()&lt;/code&gt; in the target model according to the following table:</source>
          <target state="translated">当查询相关记录时，ORM在内部根据下表建立适当的条件并使用 &lt;code&gt;find()&lt;/code&gt; / &lt;code&gt;findFirst()&lt;/code&gt; 获取所需的记录：</target>
        </trans-unit>
        <trans-unit id="f9f91827fe3aea528053a947e385c41b4eaea2e1" translate="yes" xml:space="preserve">
          <source>When a route provides named parameters you can receive them in a controller, a view or any other component that extends &lt;a href=&quot;../api/phalcon_di_injectable&quot;&gt;&lt;em&gt;Phalcon\Di\Injectable&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">当路由提供命名参数时，您可以在控制器，视图或扩展&lt;a href=&quot;../api/phalcon_di_injectable&quot;&gt;&lt;em&gt;Phalcon \ Di \ Injectable的&lt;/em&gt;&lt;/a&gt;任何其他组件中接收它们。</target>
        </trans-unit>
        <trans-unit id="f3f639dd02c2fae8127af70190790d7e33b38a37" translate="yes" xml:space="preserve">
          <source>When a user tries to access a route that is not defined, the micro application will try to execute the &amp;ldquo;Not-Found&amp;rdquo; handler. An example of that behavior is below:</source>
          <target state="translated">当用户尝试访问未定义的路由时，微型应用程序将尝试执行&amp;ldquo;未找到&amp;rdquo;处理程序。下面是该行为的一个示例：</target>
        </trans-unit>
        <trans-unit id="e1302708d125a1d1494fdf0afece1a9b8d85b82b" translate="yes" xml:space="preserve">
          <source>When activating this feature the application consumes a bit more of memory to keep track of the original values obtained from the persistence. In models that have this feature activated you can check what fields changed:</source>
          <target state="translated">当激活此功能时,应用程序会消耗多一点的内存来跟踪从持久化中获得的原始值。在已激活此功能的模型中,您可以检查哪些字段发生了变化。</target>
        </trans-unit>
        <trans-unit id="a66a8ba1457958d3970a66adcdd6ef1bf026312c" translate="yes" xml:space="preserve">
          <source>When an application has a lot of competition, we could be expecting create a record but it is actually updated. This could happen if we use &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; to persist the records in the database. If we want to be absolutely sure that a record is created or updated, we can change the &lt;code&gt;save()&lt;/code&gt; call with &lt;code&gt;create()&lt;/code&gt; or &lt;code&gt;update()&lt;/code&gt;:</source>
          <target state="translated">当应用程序竞争激烈时，我们可以期望创建一个记录，但实际上它是更新的。如果我们使用 &lt;code&gt;Phalcon\Mvc\Model::save()&lt;/code&gt; 将记录持久保存在数据库中，则会发生这种情况。如果我们要绝对确定要创建或更新记录，则可以使用 &lt;code&gt;create()&lt;/code&gt; 或 &lt;code&gt;update()&lt;/code&gt; 更改 &lt;code&gt;save()&lt;/code&gt; 调用：</target>
        </trans-unit>
        <trans-unit id="1dce8aec9f5e9e2f5c14631c397228ef7b01d92e" translate="yes" xml:space="preserve">
          <source>When an event called &amp;ldquo;beforeExecuteRoute&amp;rdquo; is triggered the following plugin will be notified:</source>
          <target state="translated">触发名为&amp;ldquo; beforeExecuteRoute&amp;rdquo;的事件时，将通知以下插件：</target>
        </trans-unit>
        <trans-unit id="f70ccec20c61618e4e1059449b34ddbd092cd739" translate="yes" xml:space="preserve">
          <source>When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.</source>
          <target state="translated">当执行插入、更新或删除时,模型会验证是否有任何方法具有上表中列出的事件名称。</target>
        </trans-unit>
        <trans-unit id="8a072b22e0402fdb6130f12448bff9fd168f10d0" translate="yes" xml:space="preserve">
          <source>When attaching event listeners to the events manager, you can use &amp;ldquo;component&amp;rdquo; to catch all events from that component (eg. &amp;ldquo;db&amp;rdquo; to catch all of the &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt; events) or &amp;ldquo;component:event&amp;rdquo; to target a specific event (eg. &amp;ldquo;db:afterQuery&amp;rdquo;).</source>
          <target state="translated">将事件侦听器附加到事件管理器时，可以使用&amp;ldquo;组件&amp;rdquo;来捕获该组件中的所有事件（例如，&amp;ldquo; db&amp;rdquo;来捕获所有&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;事件）或使用&amp;ldquo; component：event&amp;rdquo;来定位特定事件（例如&amp;ldquo; db：afterQuery&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="1892e9d28f351af1945cddeee3b22114cd4f49fe" translate="yes" xml:space="preserve">
          <source>When attaching listeners you can set a specific priority. With this feature you can attach listeners indicating the order in which they must be called:</source>
          <target state="translated">当附加听筒时,您可以设置特定的优先级。有了这个功能,您可以附加监听器,并指明它们必须被调用的顺序。</target>
        </trans-unit>
        <trans-unit id="d37edcdc619066b9f070f376210d8a9941305f88" translate="yes" xml:space="preserve">
          <source>When binding parameters, you can use this parameter to define additional casting to the bound parameters increasing even more the security</source>
          <target state="translated">当绑定参数时,你可以使用这个参数来定义额外的铸造到绑定的参数,以增加更多的安全性。</target>
        </trans-unit>
        <trans-unit id="f06239b7fc2b18c290b17b16d4892ed94c895d10" translate="yes" xml:space="preserve">
          <source>When browsing the recently generated controller, you will see a search form and a link to create a new Product:</source>
          <target state="translated">当浏览最近生成的控制器时,你会看到一个搜索表单和一个创建新产品的链接。</target>
        </trans-unit>
        <trans-unit id="a6e0a4658eedab23d0867226d7a45d482a0d8d30" translate="yes" xml:space="preserve">
          <source>When calling macros, parameters can be passed by name:</source>
          <target state="translated">在调用宏时,可以通过名称传递参数。</target>
        </trans-unit>
        <trans-unit id="21f0698fa823f2a978b92186f1f463b65748f407" translate="yes" xml:space="preserve">
          <source>When explicitly defining the relationships between models, it is easy to find related records for a particular record.</source>
          <target state="translated">当明确定义模型之间的关系时,很容易找到某条记录的相关记录。</target>
        </trans-unit>
        <trans-unit id="22c911d1707a940ee40464d719df6c336ec9b9d8" translate="yes" xml:space="preserve">
          <source>When saving as a JPEG, you can also specify the quality as the second parameter:</source>
          <target state="translated">当保存为JPEG时,您也可以将质量指定为第二个参数。</target>
        </trans-unit>
        <trans-unit id="b2fa5992497a5378fbf0aca298da9fc880a29cd6" translate="yes" xml:space="preserve">
          <source>When saving, we&amp;rsquo;ll know whether the data conforms to the business rules and validations implemented in the form ProductsForm form (app/forms/ProductsForm.php):</source>
          <target state="translated">保存时，我们将知道数据是否符合以ProductsForm表单（app / forms / ProductsForm.php）形式实现的业务规则和验证：</target>
        </trans-unit>
        <trans-unit id="fdec3e2bb77fc0eda5c7d6a940def6bab66d3c82" translate="yes" xml:space="preserve">
          <source>When the View component needs to cache something it will request a cache service from the services container. The service name convention for this service is &amp;ldquo;viewCache&amp;rdquo;:</source>
          <target state="translated">当View组件需要缓存某些内容时，它将向services容器请求缓存服务。该服务的服务名称约定为&amp;ldquo; viewCache&amp;rdquo;：</target>
        </trans-unit>
        <trans-unit id="98be2cd9ceb8d75498179e0406327155d6cc8ea9" translate="yes" xml:space="preserve">
          <source>When the form is submitted, the &amp;ldquo;search&amp;rdquo; action is executed in the controller performing the search based on the data entered by the user.</source>
          <target state="translated">提交表单后，将在控制器中执行&amp;ldquo;搜索&amp;rdquo;操作，控制器将根据用户输入的数据进行搜索。</target>
        </trans-unit>
        <trans-unit id="273b9e868727ea4d0c70e72e4d7a7b664816675d" translate="yes" xml:space="preserve">
          <source>When the joined model has a many-to-many relation to the &amp;lsquo;from&amp;rsquo; model, the intermediate model is implicitly added to the generated query:</source>
          <target state="translated">当联接的模型与&amp;ldquo;发件人&amp;rdquo;模型具有多对多关系时，中间模型将隐式添加到生成的查询中：</target>
        </trans-unit>
        <trans-unit id="c72ca045b0c87407ac0c63ae0f1b4fff2846d5d7" translate="yes" xml:space="preserve">
          <source>When to implement cache?</source>
          <target state="translated">什么时候实现缓存?</target>
        </trans-unit>
        <trans-unit id="51b53d6eeffdd56febef427d67e5b5901bc92fd1" translate="yes" xml:space="preserve">
          <source>When using high-level abstraction components such as &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; to access a database, it is difficult to understand which statements are finally sent to the database system. &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; is supported internally by &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;. &lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon\Logger&lt;/em&gt;&lt;/a&gt; interacts with &lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon\Db&lt;/em&gt;&lt;/a&gt;, providing logging capabilities on the database abstraction layer, thus allowing us to log SQL statements as they happen.</source>
          <target state="translated">当使用诸如&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model之&lt;/em&gt;&lt;/a&gt;类的高级抽象组件访问数据库时，很难理解最终将哪些语句发送到数据库系统。&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon &lt;/em&gt;&lt;/a&gt;&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;\ Db&lt;/em&gt;&lt;/a&gt;内部支持&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;。&lt;a href=&quot;../api/phalcon_logger&quot;&gt;&lt;em&gt;Phalcon \ Logger&lt;/em&gt;&lt;/a&gt;与&lt;a href=&quot;../api/phalcon_db&quot;&gt;&lt;em&gt;Phalcon \ Db&lt;/em&gt;&lt;/a&gt;进行交互，在数据库抽象层上提供日志记录功能，从而使我们能够在SQL语句发生时对其进行日志记录。</target>
        </trans-unit>
        <trans-unit id="9099f7b9508534d2195e522e1a7c638c11ded441" translate="yes" xml:space="preserve">
          <source>When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case &amp;ldquo;1&amp;rdquo; or &amp;ldquo;2&amp;rdquo; are considered strings and not numbers, so the placeholder could not be successfully replaced.</source>
          <target state="translated">使用数字占位符时，需要将它们定义为整数，即1或2。在这种情况下，&amp;ldquo; 1&amp;rdquo;或&amp;ldquo; 2&amp;rdquo;被视为字符串而不是数字，因此无法成功替换占位符。</target>
        </trans-unit>
        <trans-unit id="eecf2112ef106256653a842d086b063145e5f399" translate="yes" xml:space="preserve">
          <source>When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case &amp;ldquo;1&amp;rdquo; or &amp;ldquo;2&amp;rdquo; are considered strings and not numbers, so the placeholder could not be successfully replaced. With any adapter data are automatically escaped using &lt;a href=&quot;http://www.php.net/manual/en/pdo.quote.php&quot;&gt;PDO Quote&lt;/a&gt;.</source>
          <target state="translated">使用数字占位符时，需要将它们定义为整数，即1或2。在这种情况下，&amp;ldquo; 1&amp;rdquo;或&amp;ldquo; 2&amp;rdquo;被视为字符串而不是数字，因此无法成功替换占位符。对于任何适配器，使用&lt;a href=&quot;http://www.php.net/manual/en/pdo.quote.php&quot;&gt;PDO Quote&lt;/a&gt;会自动转义数据。</target>
        </trans-unit>
        <trans-unit id="02bceea3a6b0fe66bc77ea9213c2e1006343c9e2" translate="yes" xml:space="preserve">
          <source>When using views, caching can be used to prevent controllers from needing to generate view data on each request.</source>
          <target state="translated">当使用视图时,可以使用缓存来防止控制器需要在每个请求上生成视图数据。</target>
        </trans-unit>
        <trans-unit id="828151ae998ddcd95f506ef6e3053bea94e46e26" translate="yes" xml:space="preserve">
          <source>When validations are organized in classes, you can implement the &lt;code&gt;beforeValidation()&lt;/code&gt; and &lt;code&gt;afterValidation()&lt;/code&gt; methods to perform additional checks, filters, clean-up, etc. If the &lt;code&gt;beforeValidation()&lt;/code&gt; method returns false the validation is automatically cancelled:</source>
          <target state="translated">当将验证组织在类中时，您可以实现 &lt;code&gt;beforeValidation()&lt;/code&gt; 和 &lt;code&gt;afterValidation()&lt;/code&gt; 方法以执行其他检查，过滤器，清理等操作。如果 &lt;code&gt;beforeValidation()&lt;/code&gt; 方法返回false，则验证将自动取消：</target>
        </trans-unit>
        <trans-unit id="24dd4c7e19bec284cf1e635f7f52f8f127abf6a7" translate="yes" xml:space="preserve">
          <source>When we do not define a key to the cache, the component automatically creates one using an &lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;MD5&lt;/a&gt; hash of the name of the controller and view currently being rendered in the format of &amp;ldquo;controller/view&amp;rdquo;. It is a good practice to define a key for each action so you can easily identify the cache associated with each view.</source>
          <target state="translated">当我们没有为缓存定义键时，该组件会使用控制器名称和当前以&amp;ldquo;控制器/视图&amp;rdquo;格式呈现的视图的&lt;a href=&quot;http://php.net/manual/en/function.md5.php&quot;&gt;MD5&lt;/a&gt;哈希自动创建一个密钥。为每个操作定义一个键是一个好习惯，这样您就可以轻松识别与每个视图关联的缓存。</target>
        </trans-unit>
        <trans-unit id="931532183d0626b70f06de9bcaab71671d7e94da" translate="yes" xml:space="preserve">
          <source>When you add a route using simply &lt;code&gt;add()&lt;/code&gt;, the route will be enabled for any HTTP method. Sometimes we can restrict a route to a specific method, this is especially useful when creating RESTful applications:</source>
          <target state="translated">当您仅使用 &lt;code&gt;add()&lt;/code&gt; 添加路由时，该路由将为任何HTTP方法启用。有时我们可以将路由限制为特定的方法，这在创建RESTful应用程序时特别有用：</target>
        </trans-unit>
        <trans-unit id="4f8e1fdc9785ec989884c7f57773e6313bc1ee0e" translate="yes" xml:space="preserve">
          <source>When you browse between one option and another will see that the title changes dynamically indicating where we are currently working. This is achieved in each controller initializer:</source>
          <target state="translated">当你在一个选项和另一个选项之间浏览时,会看到标题会动态变化,表明我们目前正在哪里工作。这是在每个控制器初始化器中实现的。</target>
        </trans-unit>
        <trans-unit id="f7e3eb525f2bbab45c87a529b6dda380398bcae0" translate="yes" xml:space="preserve">
          <source>When you request a service to the service container, if it can&amp;rsquo;t find out a service with the same name it&amp;rsquo;ll try to load a class with the same name. With this behavior we can replace any class by another simply by registering a service with its name:</source>
          <target state="translated">当您向服务容器请求服务时，如果无法找到具有相同名称的服务，它将尝试加载具有相同名称的类。通过这种行为，我们可以简单地通过用名称注册服务来替换任何类：</target>
        </trans-unit>
        <trans-unit id="34667f95a0339c56cd8154cf50e3440321a73cfd" translate="yes" xml:space="preserve">
          <source>When your application is accessed without any route, the &amp;lsquo;/&amp;rsquo; route is used to determine what paths must be used to show the initial page in your website/application:</source>
          <target state="translated">如果没有任何途径访问您的应用程序，则使用'/'路由来确定必须使用哪些路径来显示网站/应用程序中的初始页面：</target>
        </trans-unit>
        <trans-unit id="1606eca12141234961e1df0b106114b4df560613" translate="yes" xml:space="preserve">
          <source>Whenever forms are implemented as classes, the callbacks: &lt;code&gt;beforeValidation()&lt;/code&gt; and &lt;code&gt;afterValidation()&lt;/code&gt; can be implemented in the form&amp;rsquo;s class to perform pre-validations and post-validations:</source>
          <target state="translated">每当将表单作为类实现时，都可以在表单的类中实现回调： &lt;code&gt;beforeValidation()&lt;/code&gt; 和 &lt;code&gt;afterValidation()&lt;/code&gt; ，以执行预验证和后验证：</target>
        </trans-unit>
        <trans-unit id="2a38b806ff1b3ec2d27698282e6b051b898d6aaf" translate="yes" xml:space="preserve">
          <source>Whether Phalcon must check if exists differences between the template file and its compiled path</source>
          <target state="translated">Phalcon是否必须检查模板文件与其编译路径之间是否存在差异。</target>
        </trans-unit>
        <trans-unit id="bd3de0c7aee8353bf60f998b53e1a2e1f3a03c86" translate="yes" xml:space="preserve">
          <source>Whether automatic rendering is enabled</source>
          <target state="translated">是否启用自动渲染</target>
        </trans-unit>
        <trans-unit id="b7d114908a004134a3b37a72f5bd703bf94a8cb8" translate="yes" xml:space="preserve">
          <source>Whether you&amp;rsquo;re using PHP 5.3 or &amp;gt;= 5.4 you can create arrays by enclosing a list of values in square brackets:</source>
          <target state="translated">无论您使用的是PHP 5.3还是&amp;gt; = 5.4，都可以通过将值列表括在方括号中来创建数组：</target>
        </trans-unit>
        <trans-unit id="29569e76fa063671e1b8a375c0f45fe0a204829c" translate="yes" xml:space="preserve">
          <source>Which in PHP is the same as:</source>
          <target state="translated">在PHP中,这与。</target>
        </trans-unit>
        <trans-unit id="64637b75ea59137e99115ec01ab0bd538357587c" translate="yes" xml:space="preserve">
          <source>Which is always true no matter what the login stored in the database is.</source>
          <target state="translated">无论数据库中存储的登录名是什么,都是如此。</target>
        </trans-unit>
        <trans-unit id="62c2db48d1e343de6e5ce709ea8a8676a24609fa" translate="yes" xml:space="preserve">
          <source>Which means, the local attribute &amp;ldquo;product_types_id&amp;rdquo; in &amp;ldquo;Products&amp;rdquo; has an one-to-many relation to the &amp;ldquo;ProductTypes&amp;rdquo; model in its attribute &amp;ldquo;id&amp;rdquo;. By defining this relationship we can access the name of the product type by using:</source>
          <target state="translated">这意味着&amp;ldquo;产品&amp;rdquo;中的本地属性&amp;ldquo; product_types_id&amp;rdquo;与属性&amp;ldquo; id&amp;rdquo;中的&amp;ldquo; ProductTypes&amp;rdquo;模型具有一对多关系。通过定义这种关系，我们可以使用以下方式访问产品类型的名称：</target>
        </trans-unit>
        <trans-unit id="62c5f4811908a48931ab40201b42105cd044fe2b" translate="yes" xml:space="preserve">
          <source>Which produces the following:</source>
          <target state="translated">其结果如下:</target>
        </trans-unit>
        <trans-unit id="3631991286d3139c1de9a41ef4982f8e5d886ce2" translate="yes" xml:space="preserve">
          <source>Which produces:</source>
          <target state="translated">这就产生了:</target>
        </trans-unit>
        <trans-unit id="de703a0d0791b6ae1c5272f119f8f1791f8c7326" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;findFirst()&lt;/code&gt; returns directly an instance of the called class (when there is data to be returned), the &lt;code&gt;find()&lt;/code&gt; method returns a &lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Resultset\Simple&lt;/em&gt;&lt;/a&gt;. This is an object that encapsulates all the functionality a resultset has like traversing, seeking specific records, counting, etc.</source>
          <target state="translated">当 &lt;code&gt;findFirst()&lt;/code&gt; 直接返回被调用类的实例时（当有数据要返回时）， &lt;code&gt;find()&lt;/code&gt; 方法返回&lt;a href=&quot;../api/phalcon_mvc_model_resultset_simple&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Resultset \ Simple&lt;/em&gt;&lt;/a&gt;。这个对象封装了结果集具有的所有功能，例如遍历，查找特定记录，计数等。</target>
        </trans-unit>
        <trans-unit id="331840c0871c992edf687856e384f05f57fa492d" translate="yes" xml:space="preserve">
          <source>While a transaction is active, the transaction manager will always return the same transaction across the application.</source>
          <target state="translated">当一个事务处于活动状态时,事务管理器将始终在整个应用程序中返回相同的事务。</target>
        </trans-unit>
        <trans-unit id="f7f185ab98fab28518c0e3c431d9cbc97a4e3dc4" translate="yes" xml:space="preserve">
          <source>While you can find more sophisticated PHP extensions to address queueing in your applications like &lt;a href=&quot;http://pecl.php.net/package/amqp&quot;&gt;RabbitMQ&lt;/a&gt;; Phalcon provides a client for &lt;a href=&quot;http://www.igvita.com/2010/05/20/scalable-work-queues-with-beanstalk/&quot;&gt;Beanstalk&lt;/a&gt;, a job queueing backend inspired by &lt;a href=&quot;http://memcached.org/&quot;&gt;Memcache&lt;/a&gt;. It&amp;rsquo;s simple, lightweight, and completely specialized for job queueing.</source>
          <target state="translated">虽然您可以找到更复杂的PHP扩展来解决您的应用程序（例如&lt;a href=&quot;http://pecl.php.net/package/amqp&quot;&gt;RabbitMQ）中的&lt;/a&gt;排队问题；Phalcon为&lt;a href=&quot;http://www.igvita.com/2010/05/20/scalable-work-queues-with-beanstalk/&quot;&gt;Beanstalk&lt;/a&gt;提供了一个客户端，Beanstalk是一个受&lt;a href=&quot;http://memcached.org/&quot;&gt;Memcache&lt;/a&gt;启发的工作排队后端。它简单，轻巧，并且完全专门用于作业队列。</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="b150eb9ffcffc7f979e49a9779092b9119236b54" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon\Http\Response&lt;/em&gt;&lt;/a&gt; you can also execute HTTP redirections:</source>
          <target state="translated">使用&lt;a href=&quot;../api/phalcon_http_response&quot;&gt;&lt;em&gt;Phalcon \ Http \ Response，&lt;/em&gt;&lt;/a&gt;您还可以执行HTTP重定向：</target>
        </trans-unit>
        <trans-unit id="12aee04efa3f16cc579e0fcefad279d543b4450e" translate="yes" xml:space="preserve">
          <source>With PHQL it&amp;rsquo;s possible to insert data using the familiar INSERT statement:</source>
          <target state="translated">使用PHQL，可以使用熟悉的INSERT语句插入数据：</target>
        </trans-unit>
        <trans-unit id="9ae89758dcd28a96539b17005927284fa9fca0b0" translate="yes" xml:space="preserve">
          <source>With Phalcon you can create &amp;ldquo;Micro-Framework like&amp;rdquo; applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to implement small applications, APIs and prototypes in a practical way.</source>
          <target state="translated">使用Phalcon，您可以创建&amp;ldquo;类似Micro-Framework&amp;rdquo;的应用程序。这样，您只需要编写最少的代码即可创建一个PHP应用程序。微型应用程序适合以实用的方式实现小型应用程序，API和原型。</target>
        </trans-unit>
        <trans-unit id="2dd3e303a2830f06ede5a5e28fc32f5a2ebebc3e" translate="yes" xml:space="preserve">
          <source>With Phalcon you can create &amp;ldquo;Micro-Framework like&amp;rdquo; applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to small applications, APIs and prototypes in a practical way.</source>
          <target state="translated">使用Phalcon，您可以创建&amp;ldquo;类似Micro-Framework&amp;rdquo;的应用程序。这样，您只需要编写最少的代码即可创建PHP应用程序。微型应用程序以实用的方式适合于小型应用程序，API和原型。</target>
        </trans-unit>
        <trans-unit id="c1394c3e92839dc7281bd2db9b88733ef982e3b1" translate="yes" xml:space="preserve">
          <source>With Volt it&amp;rsquo;s easy cache view fragments. This caching improves performance preventing that the contents of a block from being executed by PHP each time the view is displayed:</source>
          <target state="translated">使用Volt可以轻松地缓存视图片段。这种缓存提高了性能，防止了每次显示视图时PHP都执行块的内容：</target>
        </trans-unit>
        <trans-unit id="9ab515e1617e9e326951ad81fcd2bba9133648a8" translate="yes" xml:space="preserve">
          <source>With extensions the developer has more flexibility to extend the template engine, and override the compilation of a specific instruction, change the behavior of an expression or operator, add functions/filters, and more.</source>
          <target state="translated">通过扩展,开发者可以更灵活地扩展模板引擎,并覆盖特定指令的编译,改变表达式或运算符的行为,添加函数/过滤器等。</target>
        </trans-unit>
        <trans-unit id="92017a806c5172f20bdafbc8c56b626f811a509e" translate="yes" xml:space="preserve">
          <source>With it, we can load classes using various strategies but for this example we have chosen to locate classes based on predefined directories:</source>
          <target state="translated">有了它,我们可以使用不同的策略来加载类,但在这个例子中,我们选择了基于预定义目录来定位类。</target>
        </trans-unit>
        <trans-unit id="fc3f927e511cb6838afcbd0beadc2e8452ec2fa5" translate="yes" xml:space="preserve">
          <source>With template inheritance you can create base templates that can be extended by others templates allowing to reuse code. A base template define &lt;em&gt;blocks&lt;/em&gt; than can be overridden by a child template. Let&amp;rsquo;s pretend that we have the following base template:</source>
          <target state="translated">通过模板继承，您可以创建基础模板，其他模板可以扩展这些基础模板，从而允许重用代码。基本模板定义的&lt;em&gt;块&lt;/em&gt;不能被子模板覆盖。假设我们有以下基本模板：</target>
        </trans-unit>
        <trans-unit id="e8b35e26f5beb22e6df9b1d2a9d5e63af83045d8" translate="yes" xml:space="preserve">
          <source>With the above events can also define business rules in the models:</source>
          <target state="translated">通过以上事件也可以在模型中定义业务规则。</target>
        </trans-unit>
        <trans-unit id="fdba615370ea766f79fec6393be6063d846819c0" translate="yes" xml:space="preserve">
          <source>With the aliasing we can get the related records easily:</source>
          <target state="translated">通过别名,我们可以很容易地获得相关记录。</target>
        </trans-unit>
        <trans-unit id="3b9b2f7fc46cfd267a2407ec3b4d02af4cee9f26" translate="yes" xml:space="preserve">
          <source>With the correct database parameters, our models are ready to work and interact with the rest of the application.</source>
          <target state="translated">有了正确的数据库参数,我们的模型就可以工作并与应用程序的其他部分进行交互。</target>
        </trans-unit>
        <trans-unit id="571f13ccb674431d92ad5e4ca0266d2737454c6b" translate="yes" xml:space="preserve">
          <source>With the help of &lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model\Criteria&lt;/em&gt;&lt;/a&gt;, we can create the search conditions intelligently based on the data types and values sent from the form:</source>
          <target state="translated">借助于&lt;a href=&quot;../api/phalcon_mvc_model_criteria&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model \ Criteria&lt;/em&gt;&lt;/a&gt;，我们可以根据从表单发送的数据类型和值智能地创建搜索条件：</target>
        </trans-unit>
        <trans-unit id="6bb74d931f0e201329dc454c44084cc0fd611a2b" translate="yes" xml:space="preserve">
          <source>With this attribute column will filled automatically with an auto-increment integer. Only one column in the table can have this attribute.</source>
          <target state="translated">有了这个属性,列会自动用一个自动递增的整数来填充。表中只有一列可以有这个属性。</target>
        </trans-unit>
        <trans-unit id="bca183d5ff03edbab0f9b54bf38dcc0ae4c9f229" translate="yes" xml:space="preserve">
          <source>With this component you can load files from other projects or vendors, this autoloader is &lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt; and &lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4.md&quot;&gt;PSR-4&lt;/a&gt; compliant.</source>
          <target state="translated">使用此组件，您可以从其他项目或供应商加载文件，该自动加载器符合&lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt;和&lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4.md&quot;&gt;PSR-4&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="59c33bb3490b69b2f0875fb0be78e0c4548b8c58" translate="yes" xml:space="preserve">
          <source>With this component you can run various types of MVC structures:</source>
          <target state="translated">通过该组件,你可以运行各种类型的MVC结构。</target>
        </trans-unit>
        <trans-unit id="65047449eb33f65b77689b66f45e12c90886be9c" translate="yes" xml:space="preserve">
          <source>With this option, &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; reads the latest available data, setting exclusive locks on each row it reads</source>
          <target state="translated">使用此选项，&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;读取最新的可用数据，并在读取的每一行上设置排他锁</target>
        </trans-unit>
        <trans-unit id="92525f41f347b8ad687f3969a45f0cf0fb479dc9" translate="yes" xml:space="preserve">
          <source>With this option, &lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon\Mvc\Model&lt;/em&gt;&lt;/a&gt; reads the latest available data, setting shared locks on each row it reads</source>
          <target state="translated">使用此选项，&lt;a href=&quot;../api/phalcon_mvc_model&quot;&gt;&lt;em&gt;Phalcon \ Mvc \ Model&lt;/em&gt;&lt;/a&gt;读取最新的可用数据，并在读取的每一行上设置共享锁</target>
        </trans-unit>
        <trans-unit id="92bf7ef7eee904f2e84abe225b76f4c9f60f0717" translate="yes" xml:space="preserve">
          <source>Without precautions mass assignment could allow attackers to set any database column&amp;rsquo;s value. Only use this feature if you want to permit a user to insert/update every column in the model, even if those fields are not in the submitted form.</source>
          <target state="translated">在没有预防措施的情况下，大规模分配可能会使攻击者设置任何数据库列的值。仅当您要允许用户插入/更新模型中的每个列（即使这些字段不在提交的表单中）时，才使用此功能。</target>
        </trans-unit>
        <trans-unit id="37fe0177d606cfa59a4d93ee1d2bad664a844cdf" translate="yes" xml:space="preserve">
          <source>Working with Headers</source>
          <target state="translated">使用头文件</target>
        </trans-unit>
        <trans-unit id="8c84ada7a717287fe901f3bfb7ddb5cf18ca4b52" translate="yes" xml:space="preserve">
          <source>Working with Models</source>
          <target state="translated">使用模型</target>
        </trans-unit>
        <trans-unit id="fd17756158efb6178fb9a1acbd538178df3fe877" translate="yes" xml:space="preserve">
          <source>Working with Models (Advanced)</source>
          <target state="translated">使用模型工作(高级</target>
        </trans-unit>
        <trans-unit id="2e75b91a6f60621dd5a0eded58a02477b1eca721" translate="yes" xml:space="preserve">
          <source>Working with Namespaces</source>
          <target state="translated">使用命名空间</target>
        </trans-unit>
        <trans-unit id="fb1c38649c98ffe87ba118a08aca2a91c6784f10" translate="yes" xml:space="preserve">
          <source>Working with Responses</source>
          <target state="translated">使用回應</target>
        </trans-unit>
        <trans-unit id="3c4a52354dd70484dde6a923fb77add43ecd69ca" translate="yes" xml:space="preserve">
          <source>Working with transactions is supported as it is with PDO. Perform data manipulation inside transactions often increase the performance on most database systems:</source>
          <target state="translated">与PDO一样支持使用事务工作。在事务中执行数据操作通常会提高大多数数据库系统的性能。</target>
        </trans-unit>
        <trans-unit id="a517b8972e98c5f7adba281ad2953a061afad91c" translate="yes" xml:space="preserve">
          <source>Write applications using your own conventions</source>
          <target state="translated">使用自己的惯例编写应用程序</target>
        </trans-unit>
        <trans-unit id="836d04846c01e01379bf603269db22ee38f2873a" translate="yes" xml:space="preserve">
          <source>Writes an attribute value by its name</source>
          <target state="translated">用它的名字写入一个属性值</target>
        </trans-unit>
        <trans-unit id="062dc9589e27c09b89acf3ae037a02dc25024c51" translate="yes" xml:space="preserve">
          <source>Writes data to the socket. Performs a connection if none is available</source>
          <target state="translated">向套接字写入数据。如果没有可用的数据,则执行连接。</target>
        </trans-unit>
        <trans-unit id="50842e02142d8a91c92cb804adf228035e04887c" translate="yes" xml:space="preserve">
          <source>Writes meta-data for certain model using a MODEL_* constant</source>
          <target state="translated">使用MODEL_*常数为某个模型写入元数据。</target>
        </trans-unit>
        <trans-unit id="3be275e88f204322412720a3337406b5ff8a075d" translate="yes" xml:space="preserve">
          <source>Writes parsed annotations to APC</source>
          <target state="translated">将解析后的注释写入APC。</target>
        </trans-unit>
        <trans-unit id="7e2a1df7a4bcc8ab4123d1ce42a0895cc3b8a750" translate="yes" xml:space="preserve">
          <source>Writes parsed annotations to XCache</source>
          <target state="translated">将解析后的注释写入XCache。</target>
        </trans-unit>
        <trans-unit id="ef182e395b91120238d05beedb86f74808d61f62" translate="yes" xml:space="preserve">
          <source>Writes parsed annotations to files</source>
          <target state="translated">将解析后的注释写入文件。</target>
        </trans-unit>
        <trans-unit id="26abb6ffa31c55b38e96d2a83b54732a712c3a05" translate="yes" xml:space="preserve">
          <source>Writes parsed annotations to memory</source>
          <target state="translated">将解析后的注释写入内存。</target>
        </trans-unit>
        <trans-unit id="44ce4593952ee58144509a16b320c7e7afc45b32" translate="yes" xml:space="preserve">
          <source>Writes the log to the file itself</source>
          <target state="translated">将日志写入文件本身</target>
        </trans-unit>
        <trans-unit id="0582f5f68c7721bd461ab1efa01979b2ff0a5f81" translate="yes" xml:space="preserve">
          <source>Writes the log to the stream itself</source>
          <target state="translated">将日志写入流本身</target>
        </trans-unit>
        <trans-unit id="c2120fd43f7ca0c179ba2da9ddc3a4edda59defb" translate="yes" xml:space="preserve">
          <source>Writes the meta-data to $_SESSION</source>
          <target state="translated">将元数据写入$_SESSION中。</target>
        </trans-unit>
        <trans-unit id="7627f86e35255d21b31efe2c1ba2d12810c4cc47" translate="yes" xml:space="preserve">
          <source>Writes the meta-data to APC</source>
          <target state="translated">将元数据写入APC。</target>
        </trans-unit>
        <trans-unit id="ff08857312de067edc5ed687a8407106d077ccb5" translate="yes" xml:space="preserve">
          <source>Writes the meta-data to files</source>
          <target state="translated">将元数据写入文件</target>
        </trans-unit>
        <trans-unit id="de1e61413fcea62f007afad4ffbaca8157a51bdc" translate="yes" xml:space="preserve">
          <source>Writes the meta-data to temporal memory</source>
          <target state="translated">将元数据写入时间记忆。</target>
        </trans-unit>
        <trans-unit id="0722f28a63e893b49c8f44e0627f865ec8af24f7" translate="yes" xml:space="preserve">
          <source>Writes the metadata to Memcache</source>
          <target state="translated">将元数据写入Memcache。</target>
        </trans-unit>
        <trans-unit id="63e44ab7d41bfd2ca4d7a3cf3098053d54c5ec56" translate="yes" xml:space="preserve">
          <source>Writes the metadata to Redis</source>
          <target state="translated">将元数据写入Redis</target>
        </trans-unit>
        <trans-unit id="aaaa237864f82f7bf4f80a7ca3f2564027408745" translate="yes" xml:space="preserve">
          <source>Writes the metadata to XCache</source>
          <target state="translated">将元数据写入XCache</target>
        </trans-unit>
        <trans-unit id="9219890d4f87c407bc45c311d4a444948868d9ed" translate="yes" xml:space="preserve">
          <source>Writing Migrations</source>
          <target state="translated">编写迁移</target>
        </trans-unit>
        <trans-unit id="9a0b840a58215e14e46da70d6a476cbd645ffa98" translate="yes" xml:space="preserve">
          <source>Writing and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to be taken into consideration. Phalcon deals with this complexity by offering &lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon\Tag&lt;/em&gt;&lt;/a&gt;, which in turn offers view helpers to generate HTML markup.</source>
          <target state="translated">由于必须遵循命名约定和众多属性，因此编写和维护HTML标记可能很快就变得乏味。Phalcon通过提供&lt;a href=&quot;../api/phalcon_tag&quot;&gt;&lt;em&gt;Phalcon \ Tag来&lt;/em&gt;&lt;/a&gt;解决这种复杂性，而&lt;em&gt;Phalcon \ Tag&lt;/em&gt;又提供了视图助手来生成HTML标记。</target>
        </trans-unit>
        <trans-unit id="903531ec8049bd12e60cb7af94a1e6b9912eee88" translate="yes" xml:space="preserve">
          <source>Writing proper tests can assist in writing better software. If you set up proper test cases you can eliminate most functional bugs and better maintain your software.</source>
          <target state="translated">编写适当的测试可以协助编写更好的软件。如果你设置了适当的测试用例,你就可以消除大部分的功能错误,更好地维护你的软件。</target>
        </trans-unit>
        <trans-unit id="649794435dcda7b54370c60849e79139c2b220ff" translate="yes" xml:space="preserve">
          <source>XAMPP is always releasing 32 bit versions of Apache and PHP. You will need to download the x86 version of Phalcon for Windows from the download section.</source>
          <target state="translated">XAMPP一直在发布32位版本的Apache和PHP。你需要从下载区下载x86版本的Phalcon for Windows。</target>
        </trans-unit>
        <trans-unit id="cc093308deea83fd2aeaa3af8cbd83fe96fd0d08" translate="yes" xml:space="preserve">
          <source>XCache</source>
          <target state="translated">XCache</target>
        </trans-unit>
        <trans-unit id="3a6f1b4093fa70ccee926f4bbe00ed450305de6c" translate="yes" xml:space="preserve">
          <source>XCache Backend Options</source>
          <target state="translated">XCache后端选项</target>
        </trans-unit>
        <trans-unit id="b35e5f7ba4a7c37d8a2ae3d634058efc3b3a617a" translate="yes" xml:space="preserve">
          <source>XCode</source>
          <target state="translated">XCode</target>
        </trans-unit>
        <trans-unit id="e52fc4f86a5c0add8ff97f5b705fb94972f63b77" translate="yes" xml:space="preserve">
          <source>XHTML 1.0 Frameset</source>
          <target state="translated">XHTML 1.0框架集</target>
        </trans-unit>
        <trans-unit id="b01425e5f9319514d337f3d865afaabab7c357fd" translate="yes" xml:space="preserve">
          <source>XHTML 1.0 Strict</source>
          <target state="translated">XHTML 1.0 严格</target>
        </trans-unit>
        <trans-unit id="bf19195a1f391c057de833f7d9ff8facbdd4b827" translate="yes" xml:space="preserve">
          <source>XHTML 1.0 Transitional</source>
          <target state="translated">XHTML 1.0过渡期</target>
        </trans-unit>
        <trans-unit id="fde3e74e5ca9a39d0634e83ec34394d9d6034656" translate="yes" xml:space="preserve">
          <source>XHTML 1.1</source>
          <target state="translated">XHTML 1.1</target>
        </trans-unit>
        <trans-unit id="a0048077fbb7a26bc7816e856de6f4e35f56d09b" translate="yes" xml:space="preserve">
          <source>XHTML 2.0</source>
          <target state="translated">XHTML 2.0</target>
        </trans-unit>
        <trans-unit id="a5b23d6fc7ce7d7571a890f116dcceaefab3b83c" translate="yes" xml:space="preserve">
          <source>XHTML 5</source>
          <target state="translated">XHTML 5</target>
        </trans-unit>
        <trans-unit id="b8f0a77cb55fa4c63d43c1fbfc0d0be409630b1e" translate="yes" xml:space="preserve">
          <source>XHTML10_FRAMESET</source>
          <target state="translated">XHTML10_FRAMESET</target>
        </trans-unit>
        <trans-unit id="315afe7220ca2781fc95d4633d84b9bd7531dae4" translate="yes" xml:space="preserve">
          <source>XHTML10_STRICT</source>
          <target state="translated">XHTML10_STRICT</target>
        </trans-unit>
        <trans-unit id="3de06fc60e3450108ee5ad9375cf5c87b4c1a357" translate="yes" xml:space="preserve">
          <source>XHTML10_TRANSITIONAL</source>
          <target state="translated">XHTML10_TRANSITIONAL</target>
        </trans-unit>
        <trans-unit id="65f40dc271253cbbd4c7b589f20970dbcb38aaaa" translate="yes" xml:space="preserve">
          <source>XHTML11</source>
          <target state="translated">XHTML11</target>
        </trans-unit>
        <trans-unit id="593f24d0aa4d3ef04ca75325d134a134eb97cf82" translate="yes" xml:space="preserve">
          <source>XHTML20</source>
          <target state="translated">XHTML20</target>
        </trans-unit>
        <trans-unit id="23de615f0189ee5a69173344d9cc40519804ba3d" translate="yes" xml:space="preserve">
          <source>XHTML5</source>
          <target state="translated">XHTML5</target>
        </trans-unit>
        <trans-unit id="aa569942278f615a6b3fd0fb262d5b661ff27759" translate="yes" xml:space="preserve">
          <source>Xdebug provides several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the &lt;a href=&quot;http://xdebug.org/docs&quot;&gt;XDebug documentation&lt;/a&gt; for more information.</source>
          <target state="translated">Xdebug提供了几种使用Phalcon获取有关应用程序执行的调试和跟踪信息的方法。您可以查看&lt;a href=&quot;http://xdebug.org/docs&quot;&gt;XDebug文档&lt;/a&gt;以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="6deeea2ec4a85675e737b739eada89c02e1cf8b1" translate="yes" xml:space="preserve">
          <source>Xhprof provides a built-in HTML viewer to analyze the profiled data:</source>
          <target state="translated">Xhprof提供了一个内置的HTML查看器来分析剖析数据。</target>
        </trans-unit>
        <trans-unit id="8fff039853f5c2bbb8a28d056b579c7dcb7d137f" translate="yes" xml:space="preserve">
          <source>YES</source>
          <target state="translated">YES</target>
        </trans-unit>
        <trans-unit id="5128e0f852026daee6c173fef45d8de1506f0606" translate="yes" xml:space="preserve">
          <source>YES (already stopped)</source>
          <target state="translated">是(已经停止)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
