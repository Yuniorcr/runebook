<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="babel">
    <body>
      <group id="babel">
        <trans-unit id="379240a25ae0d23d9724e5d7ed2381dbe2728ac8" translate="yes" xml:space="preserve">
          <source>Babel tries using the least amount of code possible with no dependence on a bulky runtime.</source>
          <target state="translated">Babel尝试使用尽可能少的代码,不依赖庞大的运行时。</target>
        </trans-unit>
        <trans-unit id="3904a0c1ae1128880e4776722249758915f9b601" translate="yes" xml:space="preserve">
          <source>Babel types</source>
          <target state="translated">巴贝尔类型</target>
        </trans-unit>
        <trans-unit id="42693e04179e92e463f6a212e7c5459f05c90f6d" translate="yes" xml:space="preserve">
          <source>Babel uses very small helpers for common functions such as &lt;code&gt;_extend&lt;/code&gt;. By default this will be added to every file that requires it. This duplication is sometimes unnecessary, especially when your application is spread out over multiple files.</source>
          <target state="translated">Babel使用很小的辅助函数来实现 &lt;code&gt;_extend&lt;/code&gt; 等常用功能。默认情况下，它将被添加到需要它的每个文件中。有时不需要重复，特别是当您的应用程序分布在多个文件中时。</target>
        </trans-unit>
        <trans-unit id="101d9f414e9a4e9a8417b4b97d297168978a6529" translate="yes" xml:space="preserve">
          <source>Babel will look for a &lt;code&gt;.babelrc&lt;/code&gt; in the current directory of the file being transpiled. If one does not exist, it will travel up the directory tree until it finds either a &lt;code&gt;.babelrc&lt;/code&gt;, or a &lt;code&gt;package.json&lt;/code&gt; with a &lt;code&gt;&quot;babel&quot;: {}&lt;/code&gt; hash within.</source>
          <target state="translated">巴贝尔将寻找一个 &lt;code&gt;.babelrc&lt;/code&gt; 在文件的当前目录被transpiled。如果不存在，它将沿目录树向上移动，直到找到 &lt;code&gt;.babelrc&lt;/code&gt; 或其中带有 &lt;code&gt;&quot;babel&quot;: {}&lt;/code&gt; 哈希值的 &lt;code&gt;package.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f18649b04be94e6b198a8e2b9de0ea642230460" translate="yes" xml:space="preserve">
          <source>Babel will make an effort to generate code such that items are printed on the same line that they were on in the original file. This option exists so that users who cannot use source maps can get vaguely useful error line numbers, but it is only a best-effort, and is not guaranteed in all cases with all plugins.</source>
          <target state="translated">巴别将努力生成代码,使项目被打印在原始文件中的同一行。这个选项的存在是为了让不能使用源码图的用户可以得到模糊有用的错误行号,但这只是一个最好的努力,并不能保证在所有插件的所有情况下都能使用。</target>
        </trans-unit>
        <trans-unit id="fffddfdbae5b11d780eff65e84431172a62a5737" translate="yes" xml:space="preserve">
          <source>Babel&amp;#x27;s core packages</source>
          <target state="translated">Babel的核心套餐</target>
        </trans-unit>
        <trans-unit id="601857da685af5b67174dbbbbe5e3303ed8931e3" translate="yes" xml:space="preserve">
          <source>Babel's configuration merging is relatively straightforward. Options will overwrite existing options when they are present, and their value is not &lt;code&gt;undefined&lt;/code&gt;, with a few special cases:</source>
          <target state="translated">Babel的配置合并相对简单。选项会覆盖现有选项（如果存在），并且其值不是 &lt;code&gt;undefined&lt;/code&gt; ，其中有一些特殊情况：</target>
        </trans-unit>
        <trans-unit id="0ebab7e3a9b348a4d92a8284db9232e2ca473729" translate="yes" xml:space="preserve">
          <source>Babel's core packages</source>
          <target state="translated">Babel的核心包</target>
        </trans-unit>
        <trans-unit id="baa73566a905dd7fed85eaaa94c1cd53228b1225" translate="yes" xml:space="preserve">
          <source>Babel's default is to generate a string and a sourcemap, but in some contexts it can be useful to get the AST itself. The primary use case for this would be a chain of multiple transform passes, along the lines of</source>
          <target state="translated">Babel的默认值是生成一个字符串和一个源码图,但在某些情况下,获取AST本身也是有用的。主要的用例是多个转换传递的链子,如</target>
        </trans-unit>
        <trans-unit id="69d6564ad66d2796c1c13114e9ecf880ef8a4f30" translate="yes" xml:space="preserve">
          <source>Babel's default return value includes &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; properties with the resulting generated code. In some contexts where multiple calls to Babel are being made, it can be helpful to disable code generation and instead use &lt;code&gt;ast: true&lt;/code&gt; to get the AST directly in order to avoid doing unnecessary work.</source>
          <target state="translated">Babel的默认返回值包括 &lt;code&gt;code&lt;/code&gt; 和 &lt;code&gt;map&lt;/code&gt; 属性以及生成的生成代码。在对Babel进行多次调用的某些情况下，禁用代码生成而改用 &lt;code&gt;ast: true&lt;/code&gt; 可以直接获取AST，以避免进行不必要的工作，这很有帮助。</target>
        </trans-unit>
        <trans-unit id="08b98c5731597d2d0b3c4f1c384dd9d81d6e36fa" translate="yes" xml:space="preserve">
          <source>Babylon</source>
          <target state="translated">Babylon</target>
        </trans-unit>
        <trans-unit id="be996920ad81d1c4ac2d2e16c1044eb68ab80916" translate="yes" xml:space="preserve">
          <source>Babylon has been moved into the main Babel mono-repo.</source>
          <target state="translated">巴比伦已经被移到了巴比伦主单体仓库。</target>
        </trans-unit>
        <trans-unit id="aa2c96dacf00c451ef465f6115a45a20bccf1256" translate="yes" xml:space="preserve">
          <source>Basic</source>
          <target state="translated">Basic</target>
        </trans-unit>
        <trans-unit id="8219c582fa60d438a56387fd2d16642a90ef7fab" translate="yes" xml:space="preserve">
          <source>Basic Setup (with the CLI)</source>
          <target state="translated">基本设置(使用CLI</target>
        </trans-unit>
        <trans-unit id="725963522f2eb417caa0383e1819691b020029ca" translate="yes" xml:space="preserve">
          <source>Because it is your own code that triggered the load, and not the logic within &lt;code&gt;@babel/register&lt;/code&gt; itself, this should successfully compile any plugin/preset that loads synchronously.</source>
          <target state="translated">因为触发加载的是您自己的代码，而不是 &lt;code&gt;@babel/register&lt;/code&gt; 本身的逻辑，所以这应该可以成功编译任何同步加载的插件/预设。</target>
        </trans-unit>
        <trans-unit id="5cdb0376c0dc44c6278ddc402cf5ee802ab30996" translate="yes" xml:space="preserve">
          <source>Because of this, &lt;code&gt;preset-env&lt;/code&gt;'s behavior is different than &lt;a href=&quot;https://github.com/browserslist/browserslist#queries&quot;&gt;browserslist&lt;/a&gt;: it does &lt;em&gt;not&lt;/em&gt; use the &lt;code&gt;defaults&lt;/code&gt; query when there are no targets are found in your Babel &lt;em&gt;or&lt;/em&gt; browserslist config(s). If you want to use the &lt;code&gt;defaults&lt;/code&gt; query, you will need to explicitly pass it as a target:</source>
          <target state="translated">正因为如此， &lt;code&gt;preset-env&lt;/code&gt; 的行为是不同于&lt;a href=&quot;https://github.com/browserslist/browserslist#queries&quot;&gt;browserslist&lt;/a&gt;：它并&lt;em&gt;没有&lt;/em&gt;使用 &lt;code&gt;defaults&lt;/code&gt; 时，有没有在你的巴贝尔被发现的目标查询&lt;em&gt;或&lt;/em&gt;browserslist配置（S）。如果要使用 &lt;code&gt;defaults&lt;/code&gt; 查询，则需要显式将其作为目标传递：</target>
        </trans-unit>
        <trans-unit id="cafa2576d8f564be6ac739256485989e5290115a" translate="yes" xml:space="preserve">
          <source>Because project-wide config files are separated from the physical location of the config file, they can be ideal for configuration that must apply broadly, even allowing plugins and presets to easily apply to files in &lt;code&gt;node_modules&lt;/code&gt; or in symlinked packages, which were traditionally quite painful to configure in Babel 6.x.</source>
          <target state="translated">由于项目范围内的配置文件与配置文件的物理位置是分开的，因此它们对于必须广泛应用的配置非常理想，甚至允许插件和预设轻松应用于 &lt;code&gt;node_modules&lt;/code&gt; 或符号链接包中的文件，这在传统上是很痛苦的在Babel 6.x中进行配置。</target>
        </trans-unit>
        <trans-unit id="4764ada5ee422e07fb3adef476ac8e8db1920bde" translate="yes" xml:space="preserve">
          <source>Because the output code includes private class properties, if you are already using other class feature plugins (e.g. &lt;a href=&quot;../babel-plugin-proposal-class-properties/index&quot;&gt;`@babel/plugin-proposal-class-properties&lt;/a&gt;), be sure to place it &lt;em&gt;before&lt;/em&gt; the others.</source>
          <target state="translated">因为输出代码包含私有类属性，所以如果您已经在使用其他类功能插件（例如，&lt;a href=&quot;../babel-plugin-proposal-class-properties/index&quot;&gt;@ babel / plugin-proposal-class-properties&lt;/a&gt;），请确保将其放置&lt;em&gt;在&lt;/em&gt;其他类&lt;em&gt;之前&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1edd5361cd0cf1a5782a82ab9e652db1330377ab" translate="yes" xml:space="preserve">
          <source>Because there are features of the TypeScript language which rely on the full type-system to be available to make changes at runtime. This section of caveats is quite long, however, it's worth noting that a few of these features are only found in older TypeScript codebases and have modern JavaScript equivalents which you are probably already using.</source>
          <target state="translated">因为TypeScript语言有一些功能是依靠完整的类型系统在运行时进行修改的。这一节的注意事项是相当长的,然而,值得注意的是,其中一些特性只在旧的TypeScript代码库中找到,并且有现代的JavaScript等价物,你可能已经在使用。</target>
        </trans-unit>
        <trans-unit id="473de2a486fbea7ae9aedf4b81495269c3a18fc9" translate="yes" xml:space="preserve">
          <source>Because this is a polyfill (which will run before your source code), we need it to be a &lt;code&gt;dependency&lt;/code&gt;, not a &lt;code&gt;devDependency&lt;/code&gt;</source>
          <target state="translated">因为这是一个polyfill（将在您的源代码之前运行），所以我们需要它是一个 &lt;code&gt;dependency&lt;/code&gt; ，而不是 &lt;code&gt;devDependency&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89e57b525917b10d6bd98d42f155269376a4e7b4" translate="yes" xml:space="preserve">
          <source>Below is a class with four class properties which will be transformed.</source>
          <target state="translated">下面是一个有四个类属性的类,将对其进行改造。</target>
        </trans-unit>
        <trans-unit id="69bf89f03b1d348057bb1c3c509bac8c26ec4135" translate="yes" xml:space="preserve">
          <source>Binary Literals</source>
          <target state="translated">二进制文字</target>
        </trans-unit>
        <trans-unit id="cfa6c49e938034ce97eeb81dcdbb8690fa633065" translate="yes" xml:space="preserve">
          <source>Blog post: ECMAScript proposal: function-callable classes</source>
          <target state="translated">博客文章。ECMAScript建议:可调用功能的类。</target>
        </trans-unit>
        <trans-unit id="e8caa24080830c63941c3db02aa35eeb78855ae0" translate="yes" xml:space="preserve">
          <source>Bluebird non-promise runtime error</source>
          <target state="translated">蓝鸟非承诺运行时错误。</target>
        </trans-unit>
        <trans-unit id="9ce1b0e2a30a6da1a72b4b5ebf1b03db8fc8ad23" translate="yes" xml:space="preserve">
          <source>Both Runtimes</source>
          <target state="translated">两个运行时</target>
        </trans-unit>
        <trans-unit id="525a179edb2e85348c0ec089a6652ea3f005255d" translate="yes" xml:space="preserve">
          <source>Both plugins and presets can have options specified by wrapping the name and an options object in an array inside your config.</source>
          <target state="translated">插件和预设都可以通过在配置中的数组中封装名称和选项对象来指定选项。</target>
        </trans-unit>
        <trans-unit id="54a2cf5e634dbba0be2bf8a55f79252f5c790bdb" translate="yes" xml:space="preserve">
          <source>Browser</source>
          <target state="translated">Browser</target>
        </trans-unit>
        <trans-unit id="7c524caa259f8fbc9f6ca9b8aee12478a4e42732" translate="yes" xml:space="preserve">
          <source>Browserslist Integration</source>
          <target state="translated">浏览器列表集成</target>
        </trans-unit>
        <trans-unit id="48d3d0e05bfbeea5d2059a8c2102b33713b34090" translate="yes" xml:space="preserve">
          <source>Built-in classes such as &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;DOM&lt;/code&gt; etc cannot be properly subclassed due to limitations in ES5 (for the &lt;a href=&quot;../../plugins/transform-es2015-classes/index&quot;&gt;es2015-classes&lt;/a&gt; plugin). You can try to use &lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;babel-plugin-transform-builtin-extend&lt;/a&gt; based on &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; and &lt;code&gt;Reflect.construct&lt;/code&gt;, but it also has some limitations.</source>
          <target state="translated">由于ES5的限制（对于&lt;a href=&quot;../../plugins/transform-es2015-classes/index&quot;&gt;es2015-classes&lt;/a&gt;插件），无法正确地将内置类（如 &lt;code&gt;Date&lt;/code&gt; ， &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;DOM&lt;/code&gt; 等）归类。您可以尝试使用基于 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; 和 &lt;code&gt;Reflect.construct&lt;/code&gt; 的&lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;babel-plugin-transform-b​​uiltin-extend&lt;/a&gt;，但它也有一些限制。</target>
        </trans-unit>
        <trans-unit id="3f3b7c3987987bd1f028fd4f6d87b70346fae239" translate="yes" xml:space="preserve">
          <source>Built-in classes such as &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;DOM&lt;/code&gt; etc cannot be properly subclassed due to limitations in ES5 (for the &lt;a href=&quot;index&quot;&gt;es2015-classes&lt;/a&gt; plugin). You can try to use &lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;babel-plugin-transform-builtin-extend&lt;/a&gt; based on &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; and &lt;code&gt;Reflect.construct&lt;/code&gt;, but it also has some limitations.</source>
          <target state="translated">由于ES5的限制（对于&lt;a href=&quot;index&quot;&gt;es2015-classes&lt;/a&gt;插件），无法正确地将内置类（如 &lt;code&gt;Date&lt;/code&gt; ， &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;DOM&lt;/code&gt; 等）归类。您可以尝试使用基于 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; 和 &lt;code&gt;Reflect.construct&lt;/code&gt; 的&lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;babel-plugin-transform-b​​uiltin-extend&lt;/a&gt;，但它也有一些限制。</target>
        </trans-unit>
        <trans-unit id="8e5b02a96f7d68bf1715fc5013859924374f56d5" translate="yes" xml:space="preserve">
          <source>Built-ins (both for &lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-preset-env/src/polyfills/corejs2/built-in-definitions.js&quot;&gt;core-js@2&lt;/a&gt; and &lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-preset-env/src/polyfills/corejs3/built-in-definitions.js&quot;&gt;core-js@3&lt;/a&gt;, such as &lt;code&gt;es.map&lt;/code&gt;, &lt;code&gt;es.set&lt;/code&gt;, or &lt;code&gt;es.object.assign&lt;/code&gt;.</source>
          <target state="translated">内置插件（用于&lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-preset-env/src/polyfills/corejs2/built-in-definitions.js&quot;&gt;core-js @ 2&lt;/a&gt;和&lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-preset-env/src/polyfills/corejs3/built-in-definitions.js&quot;&gt;core-js @ 3&lt;/a&gt;，例如 &lt;code&gt;es.map&lt;/code&gt; ， &lt;code&gt;es.set&lt;/code&gt; 或 &lt;code&gt;es.object.assign&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a9dba4a63fe7441577c517e974b19d4d9a7806a" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;@babel/node&lt;/code&gt; cli and &lt;code&gt;@babel/register&lt;/code&gt; will save to a json cache in your temporary directory.</source>
          <target state="translated">默认情况下， &lt;code&gt;@babel/node&lt;/code&gt; cli和 &lt;code&gt;@babel/register&lt;/code&gt; 将保存到临时目录中的json缓存中。</target>
        </trans-unit>
        <trans-unit id="ad6278a86b2c0370ba06c0454fbf7b5b71a788dd" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;@babel/preset-env&lt;/code&gt; uses &lt;a href=&quot;../options/index#caller&quot;&gt;&lt;code&gt;caller&lt;/code&gt;&lt;/a&gt; data to determine whether ES modules and module features (e.g. &lt;code&gt;import()&lt;/code&gt;) should be transformed. Generally &lt;code&gt;caller&lt;/code&gt; data will be specified in the bundler plugins (e.g. &lt;code&gt;babel-loader&lt;/code&gt;, &lt;code&gt;@rollup/plugin-babel&lt;/code&gt;) and thus it is not recommended to pass &lt;code&gt;caller&lt;/code&gt; data yourself -- The passed &lt;code&gt;caller&lt;/code&gt; may overwrite the one from bundler plugins and in the future you may get suboptimal results if bundlers supports new module features.</source>
          <target state="translated">默认情况下， &lt;code&gt;@babel/preset-env&lt;/code&gt; 使用&lt;a href=&quot;../options/index#caller&quot;&gt; &lt;code&gt;caller&lt;/code&gt; &lt;/a&gt;数据来确定是否应转换ES模块和模块功能（例如 &lt;code&gt;import()&lt;/code&gt; ）。通常， &lt;code&gt;caller&lt;/code&gt; 数据将在捆绑程序插件中指定（例如 &lt;code&gt;babel-loader&lt;/code&gt; ， &lt;code&gt;@rollup/plugin-babel&lt;/code&gt; ），因此不建议您自己传递 &lt;code&gt;caller&lt;/code&gt; 数据-传递的 &lt;code&gt;caller&lt;/code&gt; 可能会覆盖捆绑程序插件中的那个，并在将来如果捆绑器支持新的模块功能，则可能会导致效果不理想。</target>
        </trans-unit>
        <trans-unit id="5d1f6ca0b9afce0ac494767992af76a74b8cf9c2" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;@babel/preset-env&lt;/code&gt; will use &lt;a href=&quot;https://github.com/ai/browserslist#queries&quot;&gt;browserslist config sources&lt;/a&gt;&lt;em&gt;unless&lt;/em&gt; either the &lt;a href=&quot;#targets&quot;&gt;targets&lt;/a&gt; or &lt;a href=&quot;#ignorebrowserslistconfig&quot;&gt;ignoreBrowserslistConfig&lt;/a&gt; options are set.</source>
          <target state="translated">默认情况下，&lt;em&gt;除非&lt;/em&gt;设置了&lt;a href=&quot;#targets&quot;&gt;target&lt;/a&gt;或&lt;a href=&quot;#ignorebrowserslistconfig&quot;&gt;ignoreBrowserslistConfig&lt;/a&gt;选项，&lt;em&gt;否则&lt;/em&gt; &lt;code&gt;@babel/preset-env&lt;/code&gt; 将使用&lt;a href=&quot;https://github.com/ai/browserslist#queries&quot;&gt;browserslist配置源&lt;/a&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a11fdb83181691c36ed3ebbe017c4f3cfb0123d5" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;@babel/template&lt;/code&gt; returns a &lt;code&gt;function&lt;/code&gt; which is invoked with an optional object of replacements. See the usage section for an example.</source>
          <target state="translated">默认情况下， &lt;code&gt;@babel/template&lt;/code&gt; 返回一个 &lt;code&gt;function&lt;/code&gt; ，该函数由可选的替换对象调用。有关示例，请参见用法部分。</target>
        </trans-unit>
        <trans-unit id="ae466d001181dcadd6bb2e0c702e7a64910572e9" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;babel-node&lt;/code&gt; and &lt;code&gt;babel-register&lt;/code&gt; will save to a json cache in your temporary directory.</source>
          <target state="translated">默认情况下， &lt;code&gt;babel-node&lt;/code&gt; 和 &lt;code&gt;babel-register&lt;/code&gt; 将保存到临时目录中的json缓存中。</target>
        </trans-unit>
        <trans-unit id="96222ae8252cc72fc86e91ff7df979134a1914c6" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;babel.transformFromAst&lt;/code&gt; will clone the input AST to avoid mutations. Specifying &lt;code&gt;cloneInputAst: false&lt;/code&gt; can improve parsing performance if the input AST is not used elsewhere.</source>
          <target state="translated">默认情况下， &lt;code&gt;babel.transformFromAst&lt;/code&gt; 将克隆输入的AST以避免突变。如果未在其他地方使用输入AST，则指定 &lt;code&gt;cloneInputAst: false&lt;/code&gt; 可以提高解析性能。</target>
        </trans-unit>
        <trans-unit id="cc876eb4977bbbb25961710e289b521114093c22" translate="yes" xml:space="preserve">
          <source>By default this plugin will ignore the &lt;em&gt;temporal dead zone (TDZ)&lt;/em&gt; for block-scoped variables. The following code will &lt;strong&gt;not throw an error when transpiled with Babel, which is not spec compliant&lt;/strong&gt;:</source>
          <target state="translated">默认情况下，此插件将忽略块作用域变量的&lt;em&gt;时间盲区（TDZ）&lt;/em&gt;。使用&lt;strong&gt;不符合规范的Babel进行编译时&lt;/strong&gt;，以下代码&lt;strong&gt;不会引发错误&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="1d636b707cfa46824af221288a87e5049e623a41" translate="yes" xml:space="preserve">
          <source>By default transform-runtime assumes that &lt;code&gt;@babel/runtime@7.0.0&lt;/code&gt; is installed. If you have later versions of &lt;code&gt;@babel/runtime&lt;/code&gt; (or their corejs counterparts e.g. &lt;code&gt;@babel/runtime-corejs3&lt;/code&gt;) installed or listed as a dependency, transform-runtime can use more advanced features.</source>
          <target state="translated">默认情况下，transform-runtime假定已安装 &lt;code&gt;@babel/runtime@7.0.0&lt;/code&gt; 。如果您已安装或列出了更高版本的 &lt;code&gt;@babel/runtime&lt;/code&gt; （或与之对应的corejs副本，例如 &lt;code&gt;@babel/runtime-corejs3&lt;/code&gt; ），则transform-runtime可以使用更高级的功能。</target>
        </trans-unit>
        <trans-unit id="90677a83f21430097e76701b8f40312dfd813e14" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; doesn't polyfill proposals. If you are using &lt;code&gt;corejs: 3&lt;/code&gt;, you can opt into this by enabling using the &lt;code&gt;proposals: true&lt;/code&gt; option.</source>
          <target state="translated">默认情况下， &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; 不会强制填充建议。如果您正在使用 &lt;code&gt;corejs: 3&lt;/code&gt; ，则可以通过使用 &lt;code&gt;proposals: true&lt;/code&gt; 选项启用该功能。</target>
        </trans-unit>
        <trans-unit id="7e38f1686a55cec6986211d653cc9c26363172f9" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;@babel/preset-env&lt;/code&gt; (and Babel plugins in general) grouped ECMAScript syntax features into collections of closely related smaller features. These groups can be large and include a lot of edge cases, for example &quot;function arguments&quot; includes destructured, default and rest parameters. From this grouping information, Babel enables or disables each group based on the browser support target you specify to &lt;code&gt;@babel/preset-env&lt;/code&gt;&amp;rsquo;s &lt;code&gt;targets&lt;/code&gt; option.</source>
          <target state="translated">默认情况下， &lt;code&gt;@babel/preset-env&lt;/code&gt; （和一般的Babel插件）将ECMAScript语法功能分组为紧密相关的较小功能的集合。这些组可能很大，并且包含很多边缘情况，例如&amp;ldquo;函数参数&amp;rdquo;包含解构的，默认和其余参数。根据您的分组信息，Babel会根据您在 &lt;code&gt;@babel/preset-env&lt;/code&gt; 的 &lt;code&gt;targets&lt;/code&gt; 选项中指定的浏览器支持目标来启用或禁用每个组。</target>
        </trans-unit>
        <trans-unit id="9f1121ea8389509a5918fe98c327d4fb39af15c7" translate="yes" xml:space="preserve">
          <source>By default, Babel expects plugins to have a &lt;code&gt;babel-plugin-&lt;/code&gt; or &lt;code&gt;babel-preset-&lt;/code&gt; prefix in their name. To avoid repetition, Babel has a name normalization phase will automatically add these prefixes when loading items. This boils down to a few primary rules:</source>
          <target state="translated">默认情况下，Babel希望插件名称中带有 &lt;code&gt;babel-plugin-&lt;/code&gt; 或 &lt;code&gt;babel-preset-&lt;/code&gt; preset-前缀。为避免重复，Babel的名称规范化阶段将在加载项目时自动添加这些前缀。这归结为一些主要规则：</target>
        </trans-unit>
        <trans-unit id="a6508e9380c90c6ca0f0b10fee38bd8424b80af5" translate="yes" xml:space="preserve">
          <source>By default, Babel will only search for &lt;code&gt;.babelrc.json&lt;/code&gt; files within the &lt;a href=&quot;#root&quot;&gt;&lt;code&gt;&quot;root&quot;&lt;/code&gt;&lt;/a&gt; package because otherwise Babel cannot know if a given &lt;code&gt;.babelrc.json&lt;/code&gt; is meant to be loaded, or if it's &lt;a href=&quot;#plugins&quot;&gt;&lt;code&gt;&quot;plugins&quot;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#presets&quot;&gt;&lt;code&gt;&quot;presets&quot;&lt;/code&gt;&lt;/a&gt; have even been installed, since the file being compiled could be inside &lt;code&gt;node_modules&lt;/code&gt;, or have been symlinked into the project.</source>
          <target state="translated">默认情况下，Babel只会在&lt;a href=&quot;#root&quot;&gt; &lt;code&gt;&quot;root&quot;&lt;/code&gt; &lt;/a&gt;包中搜索 &lt;code&gt;.babelrc.json&lt;/code&gt; 文件，因为否则Babel无法知道是否要加载给定的 &lt;code&gt;.babelrc.json&lt;/code&gt; ，或者甚至已经加载了&lt;a href=&quot;#plugins&quot;&gt; &lt;code&gt;&quot;plugins&quot;&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#presets&quot;&gt; &lt;code&gt;&quot;presets&quot;&lt;/code&gt; &lt;/a&gt;已安装，因为要编译的文件可能位于 &lt;code&gt;node_modules&lt;/code&gt; 内，或者已被符号链接到项目中。</target>
        </trans-unit>
        <trans-unit id="07111aef2b33077e65daff05a578d79e3a2fb45f" translate="yes" xml:space="preserve">
          <source>By default, Babel will override the extension of the transpiled file and use &lt;code&gt;.js&lt;/code&gt; instead.</source>
          <target state="translated">默认情况下，Babel将覆盖已编译文件的扩展名，并改用 &lt;code&gt;.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5014d56c07e427da8154b5065bd8b081943e7e4" translate="yes" xml:space="preserve">
          <source>By default, only polyfills for stable ECMAScript features are injected: if you want to polyfill them, you have three different options:</source>
          <target state="translated">默认情况下,只注入稳定的ECMAScript功能的polyfills:如果你想polyfills,你有三个不同的选项。</target>
        </trans-unit>
        <trans-unit id="11028631346d84064eea028d5bb217130b860e3f" translate="yes" xml:space="preserve">
          <source>By default, this becomes:</source>
          <target state="translated">默认情况下,这成为。</target>
        </trans-unit>
        <trans-unit id="148dd5d00d7c587ce21e7a0cc3f45fcffab6cfcb" translate="yes" xml:space="preserve">
          <source>By default, this plugin uses Babel&amp;rsquo;s &lt;code&gt;extends&lt;/code&gt; helper which polyfills &lt;code&gt;Object.assign&lt;/code&gt;. Enabling this option will use &lt;code&gt;Object.assign&lt;/code&gt; directly.</source>
          <target state="translated">默认情况下，此插件使用Babel的 &lt;code&gt;extends&lt;/code&gt; 助手，该助手会填充 &lt;code&gt;Object.assign&lt;/code&gt; 。启用此选项将直接使用 &lt;code&gt;Object.assign&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2a7c8cf1c9abc9b6d5fdb64ff2136d9a7b86e66" translate="yes" xml:space="preserve">
          <source>By default, this plugin will produce spec compliant code by using Babel's &lt;code&gt;objectSpread&lt;/code&gt; helper.</source>
          <target state="translated">默认情况下，此插件将使用Babel的 &lt;code&gt;objectSpread&lt;/code&gt; 帮助程序生成符合规范的代码。</target>
        </trans-unit>
        <trans-unit id="9fcd607ee53a92b0d26499881dbeda54c808eb4a" translate="yes" xml:space="preserve">
          <source>By default, this preset will run all the transforms needed for the targeted environment(s). Enable this option if you want to force running &lt;em&gt;all&lt;/em&gt; transforms, which is useful if the output will be run through UglifyJS or an environment that only supports ES5.</source>
          <target state="translated">默认情况下，此预设将运行目标环境所需的所有转换。如果要强制运行&lt;em&gt;所有&lt;/em&gt;转换，请启用此选项，如果输出将通过UglifyJS或仅支持ES5的环境运行，则很有用。</target>
        </trans-unit>
        <trans-unit id="a5e7af16b08f771412b5a0a7993f38b85dc512ed" translate="yes" xml:space="preserve">
          <source>By default, when using exports with babel a non-enumerable &lt;code&gt;__esModule&lt;/code&gt; property is exported.</source>
          <target state="translated">默认情况下，将导出与babel一起使用时，将导出不可枚举的 &lt;code&gt;__esModule&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="e5a61d96b9d6e731e3d29c784b62946fb92e92a1" translate="yes" xml:space="preserve">
          <source>By default, when using exports with babel a non-enumerable &lt;code&gt;__esModule&lt;/code&gt; property is exported. In some cases this property is used to determine if the import &lt;em&gt;is&lt;/em&gt; the default export or if it &lt;em&gt;contains&lt;/em&gt; the default export.</source>
          <target state="translated">默认情况下，将导出与babel一起使用时，将导出不可枚举的 &lt;code&gt;__esModule&lt;/code&gt; 属性。在某些情况下，此属性用于确定导入&lt;em&gt;是&lt;/em&gt;默认导出还是&lt;em&gt;包含&lt;/em&gt;默认导出。</target>
        </trans-unit>
        <trans-unit id="8deb9674e74cfb94f7b293b7669d21def622254a" translate="yes" xml:space="preserve">
          <source>By default, when using exports with babel a non-enumerable &lt;code&gt;__esModule&lt;/code&gt; property is exported. This property is then used to determine if the import &lt;em&gt;is&lt;/em&gt; the default export or if it &lt;em&gt;contains&lt;/em&gt; the default export.</source>
          <target state="translated">默认情况下，将导出与babel一起使用时，将导出不可枚举的 &lt;code&gt;__esModule&lt;/code&gt; 属性。然后，可以使用此属性确定导入&lt;em&gt;是&lt;/em&gt;默认导出还是&lt;em&gt;包含&lt;/em&gt;默认导出。</target>
        </trans-unit>
        <trans-unit id="f40fdab70e6edf09970028ceab95f8a24ddfbde9" translate="yes" xml:space="preserve">
          <source>By default, when using modules with Babel a non-enumerable &lt;code&gt;__esModule&lt;/code&gt; property is exported. This is done through the use of &lt;code&gt;Object.defineProperty&lt;/code&gt; which is unsupported in IE8 and below. A workaround for this is to enable the &lt;code&gt;loose&lt;/code&gt; option in your corresponding module plugin.</source>
          <target state="translated">默认情况下，将模块与Babel一起使用时，会导出不可枚举的 &lt;code&gt;__esModule&lt;/code&gt; 属性。这是通过使用IE8及更低版本中不支持的 &lt;code&gt;Object.defineProperty&lt;/code&gt; 来完成的。一种解决方法是在相应的模块插件中启用 &lt;code&gt;loose&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="translated">CLI</target>
        </trans-unit>
        <trans-unit id="8fb0a95a29caf4d9f8830f6bcf5188d8bcb5304a" translate="yes" xml:space="preserve">
          <source>Callable class constructor transform</source>
          <target state="translated">可调用的类构造函数transform</target>
        </trans-unit>
        <trans-unit id="8936ccdf6f9c06d56fa9ea5685e9303179916c09" translate="yes" xml:space="preserve">
          <source>Callbacks should be small and side-effect free.</source>
          <target state="translated">回调应该是小而无副作用的。</target>
        </trans-unit>
        <trans-unit id="3e0700a4fd5d6df7c078e753b93b930950e24413" translate="yes" xml:space="preserve">
          <source>Callbacks should return values with the smallest range possible. For example, the &lt;code&gt;.using(() =&amp;gt; process.env.NODE_ENV)&lt;/code&gt; usage above is not ideal because it would create an unknown number of cache entries depending on how many values of &lt;code&gt;NODE_ENV&lt;/code&gt; are detected. It would be safer to do &lt;code&gt;.using(() =&amp;gt; process.env.NODE_ENV === &quot;development&quot;)&lt;/code&gt; because then the cache entry can only ever be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">回调应返回尽可能小的范围内的值。例如，上面的 &lt;code&gt;.using(() =&amp;gt; process.env.NODE_ENV)&lt;/code&gt; 用法并不理想，因为它会根据检测到的 &lt;code&gt;NODE_ENV&lt;/code&gt; 值的数量而创建未知数量的缓存条目。使用 &lt;code&gt;.using(() =&amp;gt; process.env.NODE_ENV === &quot;development&quot;)&lt;/code&gt; 会更安全，因为这样缓存条目只能是 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73cea33e7859c1fb02bc85a29e35b9a6694d14c6" translate="yes" xml:space="preserve">
          <source>Calling deeply nested functions</source>
          <target state="translated">调用深嵌套函数</target>
        </trans-unit>
        <trans-unit id="283fc8151fa3242c647dabe54d01d15031db1d53" translate="yes" xml:space="preserve">
          <source>Can be useful when you just want a for-of loop to represent a basic for loop over an array.</source>
          <target state="translated">当你只想用for-of循环来表示一个数组上的基本for循环时,可以很有用。</target>
        </trans-unit>
        <trans-unit id="ef938c69c3666cc0671863d70f5ced8320393fd0" translate="yes" xml:space="preserve">
          <source>Can use &lt;code&gt;core-js&lt;/code&gt; for helpers if necessary instead of assuming it will be polyfilled by the user (toggleable with the &lt;code&gt;corejs&lt;/code&gt; option)</source>
          <target state="translated">如有必要，可以使用 &lt;code&gt;core-js&lt;/code&gt; 作为助手，而不是假设它会被用户 &lt;code&gt;corejs&lt;/code&gt; （可通过corejs选项切换）</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="feecaabdb4896766aef2466d794d881a35c9ec7a" translate="yes" xml:space="preserve">
          <source>Change &lt;code&gt;copyeIgnored&lt;/code&gt; option default to &lt;code&gt;true&lt;/code&gt;, it can be disabled by &lt;code&gt;--no-copy-ignored&lt;/code&gt;</source>
          <target state="translated">将 &lt;code&gt;copyeIgnored&lt;/code&gt; 选项更改为 &lt;code&gt;true&lt;/code&gt; ，可以通过 &lt;code&gt;--no-copy-ignored&lt;/code&gt; 禁用</target>
        </trans-unit>
        <trans-unit id="8aa57de6dce6ee1c35c6aba7426503281876b258" translate="yes" xml:space="preserve">
          <source>Changes</source>
          <target state="translated">Changes</target>
        </trans-unit>
        <trans-unit id="068f089a5e47ffdcdd143ed71516591330d8e26b" translate="yes" xml:space="preserve">
          <source>Changes Babel's compiled &lt;code&gt;import&lt;/code&gt; statements to be lazily evaluated when their imported bindings are used for the first time.</source>
          <target state="translated">更改Babel的已编译 &lt;code&gt;import&lt;/code&gt; 语句，以便在首次使用其导入的绑定时进行延迟计算。</target>
        </trans-unit>
        <trans-unit id="9063dd961c45aa5e0fad3be4c3992e90fd27d441" translate="yes" xml:space="preserve">
          <source>Changes to your &lt;code&gt;tsconfig.json&lt;/code&gt; are not reflected in babel. The build process will always behave as though &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;&lt;code&gt;isolatedModules&lt;/code&gt;&lt;/a&gt; is turned on, there are Babel-native alternative ways to set a lot of the &lt;a href=&quot;#typescript-compiler-options&quot;&gt;&lt;code&gt;tsconfig.json&lt;/code&gt; options&lt;/a&gt; however.</source>
          <target state="translated">对 &lt;code&gt;tsconfig.json&lt;/code&gt; 的更改不会反映在babel中。构建过程将始终像打开&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt; &lt;code&gt;isolatedModules&lt;/code&gt; &lt;/a&gt;一样运行，但是有Babel本机替代方法来设置许多&lt;a href=&quot;#typescript-compiler-options&quot;&gt; &lt;code&gt;tsconfig.json&lt;/code&gt; 选项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b9c5952f6a885772d2553d85d12458e717e719db" translate="yes" xml:space="preserve">
          <source>Chapter &quot;&lt;a href=&quot;http://exploringjs.com/es2016-es2017/ch_tc39-process.html&quot;&gt;The TC39 process for ECMAScript features&lt;/a&gt;&quot; in &quot;Exploring ES2016 and ES2017&quot; by Axel Rauschmayer</source>
          <target state="translated">Axel Rauschmayer的&amp;ldquo;探索ES2016和ES2017&amp;rdquo;中的&amp;ldquo; &lt;a href=&quot;http://exploringjs.com/es2016-es2017/ch_tc39-process.html&quot;&gt;ECMAScript功能的TC39流程&lt;/a&gt;&amp;rdquo;一章</target>
        </trans-unit>
        <trans-unit id="d330bb9961e795be64ae18f9bf3fab8d610cb498" translate="yes" xml:space="preserve">
          <source>Chapter &amp;ldquo;&lt;a href=&quot;http://exploringjs.com/es2016-es2017/ch_tc39-process.html&quot;&gt;The TC39 process for ECMAScript features&lt;/a&gt;&amp;rdquo; in &amp;ldquo;Exploring ES2016 and ES2017&amp;rdquo; by Axel Rauschmayer</source>
          <target state="translated">Axel Rauschmayer的&amp;ldquo;探索ES2016和ES2017&amp;rdquo;中的&amp;ldquo; &lt;a href=&quot;http://exploringjs.com/es2016-es2017/ch_tc39-process.html&quot;&gt;ECMAScript功能的TC39流程&lt;/a&gt; &amp;rdquo;一章</target>
        </trans-unit>
        <trans-unit id="6b56ab26bb5e06a7487d15952a7e6f3b2dbd0e03" translate="yes" xml:space="preserve">
          <source>Check out our &lt;a href=&quot;https://github.com/babel/minify&quot;&gt;minifier based on Babel&lt;/a&gt;!</source>
          <target state="translated">查看我们&lt;a href=&quot;https://github.com/babel/minify&quot;&gt;基于Babel&lt;/a&gt;的粉碎机！</target>
        </trans-unit>
        <trans-unit id="b4a9258583961cced969966fac942ad55fd991be" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;https://github.com/babel/example-node-server&quot;&gt;example Node.js server with Babel&lt;/a&gt; for an idea of how to use Babel in a production deployment.</source>
          <target state="translated">查看&lt;a href=&quot;https://github.com/babel/example-node-server&quot;&gt;带有Babel&lt;/a&gt;的示例Node.js服务器，以了解如何在生产部署中使用Babel。</target>
        </trans-unit>
        <trans-unit id="d2849b5fa6121b6cd58275e1f32cab0ebe90bef8" translate="yes" xml:space="preserve">
          <source>Check out the many options (especially &lt;code&gt;useBuiltIns&lt;/code&gt; to polyfill less)!</source>
          <target state="translated">&lt;code&gt;useBuiltIns&lt;/code&gt; 出许多选项（尤其是使用BuiltIns减少polyfill）！</target>
        </trans-unit>
        <trans-unit id="337ec475333034328b8f1a262fdadc8ee5a9d74d" translate="yes" xml:space="preserve">
          <source>Class constructor call</source>
          <target state="translated">类构造函数调用</target>
        </trans-unit>
        <trans-unit id="203937ea898968ac2571d7f7731714224cf8a07c" translate="yes" xml:space="preserve">
          <source>Class constructor call is a deprecated feature</source>
          <target state="translated">类构造函数的调用是一个废弃的功能。</target>
        </trans-unit>
        <trans-unit id="dc430092c6b8baefc4cb23154c76a895c27f74a3" translate="yes" xml:space="preserve">
          <source>Class decorator</source>
          <target state="translated">级装饰师</target>
        </trans-unit>
        <trans-unit id="de2c7176799e20865b88394ca6eb276039568616" translate="yes" xml:space="preserve">
          <source>Class function decorator</source>
          <target state="translated">类功能装饰器</target>
        </trans-unit>
        <trans-unit id="c60885fb1717625a7d6994c89d86ba53fe8fa37d" translate="yes" xml:space="preserve">
          <source>Class properties are compiled to use &lt;code&gt;Object.defineProperty&lt;/code&gt;. Static fields are now defined even if they are not initialized.</source>
          <target state="translated">类属性被编译为使用 &lt;code&gt;Object.defineProperty&lt;/code&gt; 。现在即使未初始化静态字段，也可以定义它们。</target>
        </trans-unit>
        <trans-unit id="31e4e81c7ef311491c63e166d53bf63aea06590e" translate="yes" xml:space="preserve">
          <source>Class properties transform</source>
          <target state="translated">类属性转换</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="8bbb3f45bee80a4784c68f2cc2271533782a59ad" translate="yes" xml:space="preserve">
          <source>Classes (10 and below)</source>
          <target state="translated">班级(10岁及以下)</target>
        </trans-unit>
        <trans-unit id="f69b44c15b7380d5a98da000b0dc75d9d981037f" translate="yes" xml:space="preserve">
          <source>Classic runtime adds:</source>
          <target state="translated">经典运行时增加。</target>
        </trans-unit>
        <trans-unit id="793167d6c61f0a82f866ad95958693b98155a954" translate="yes" xml:space="preserve">
          <source>Code Example</source>
          <target state="translated">代码示例</target>
        </trans-unit>
        <trans-unit id="588e11b0e3f293d238c946707e12a4d9106de85b" translate="yes" xml:space="preserve">
          <source>Code Generator options</source>
          <target state="translated">代码生成器选项</target>
        </trans-unit>
        <trans-unit id="f1fef530acca1a2fe2e8b32cbe06d822f655075f" translate="yes" xml:space="preserve">
          <source>Collection of helper functions used by Babel transforms</source>
          <target state="translated">巴别变换使用的辅助函数集合</target>
        </trans-unit>
        <trans-unit id="17b4fc7c6bb8c3169eaa521fb668ad635d81d3e0" translate="yes" xml:space="preserve">
          <source>Comma-separated list of &lt;a href=&quot;../../plugins/index&quot;&gt;plugins&lt;/a&gt; to load and use.</source>
          <target state="translated">以逗号分隔的要加载和使用的&lt;a href=&quot;../../plugins/index&quot;&gt;插件&lt;/a&gt;列表。</target>
        </trans-unit>
        <trans-unit id="ab0e7a471f78e2e93ac161b7aa23629be52758eb" translate="yes" xml:space="preserve">
          <source>Comma-separated list of &lt;a href=&quot;../../plugins/index#presets&quot;&gt;presets&lt;/a&gt; (a set of plugins) to load and use.</source>
          <target state="translated">以逗号分隔的要加载和使用的&lt;a href=&quot;../../plugins/index#presets&quot;&gt;预设&lt;/a&gt;列表（一组插件）。</target>
        </trans-unit>
        <trans-unit id="015f72812ba7acd2052a3409cb7bc0b57ff678f2" translate="yes" xml:space="preserve">
          <source>Comment attachment.</source>
          <target state="translated">评论附件:</target>
        </trans-unit>
        <trans-unit id="e79872de8b36d3c79640f5053e689e0f7cb05544" translate="yes" xml:space="preserve">
          <source>CommonJS (CJS) Modules/1.1</source>
          <target state="translated">通用JS(CJS)模块/1.1</target>
        </trans-unit>
        <trans-unit id="1df39aa58ad4033d56b836b47d7830d400029d70" translate="yes" xml:space="preserve">
          <source>Compact</source>
          <target state="translated">Compact</target>
        </trans-unit>
        <trans-unit id="b40f6b5ae64ebbb46478cfa54b8293b638cde485" translate="yes" xml:space="preserve">
          <source>Compat Note:</source>
          <target state="translated">兼容性说明。</target>
        </trans-unit>
        <trans-unit id="a05f4d1d170dc67e7d6629b2d193b399f236930b" translate="yes" xml:space="preserve">
          <source>Compile Directories</source>
          <target state="translated">编制目录</target>
        </trans-unit>
        <trans-unit id="7768ee95feaf6bb08f05545cf8f2a74f0ec73a2b" translate="yes" xml:space="preserve">
          <source>Compile ES2015 Unicode escapes to ES5</source>
          <target state="translated">将ES2015的Unicode转义编译成ES5</target>
        </trans-unit>
        <trans-unit id="3b451fca311427c8d88c7e6093af453db143454e" translate="yes" xml:space="preserve">
          <source>Compile ES2015 arrow functions to ES5</source>
          <target state="translated">将ES2015的箭头函数编译成ES5</target>
        </trans-unit>
        <trans-unit id="dc6c5765407633fe67f0ae5a8d92862cda191280" translate="yes" xml:space="preserve">
          <source>Compile ES2015 block scoping (const and let) to ES5</source>
          <target state="translated">将ES2015块范围(const和let)编译成ES5。</target>
        </trans-unit>
        <trans-unit id="cae47f09a1be81122749ec04120355dfc84ed5fd" translate="yes" xml:space="preserve">
          <source>Compile ES2015 classes to ES5</source>
          <target state="translated">将ES2015类编译成ES5</target>
        </trans-unit>
        <trans-unit id="76a143eec3143af77259c4590bb07a225e7322a7" translate="yes" xml:space="preserve">
          <source>Compile ES2015 computed properties to ES5</source>
          <target state="translated">将ES2015计算的属性编译成ES5。</target>
        </trans-unit>
        <trans-unit id="294ac4b45dec7de7492a1fb1b5a2de20ef1fbd46" translate="yes" xml:space="preserve">
          <source>Compile ES2015 default and rest parameters to ES5</source>
          <target state="translated">将ES2015默认参数和其余参数编译成ES5。</target>
        </trans-unit>
        <trans-unit id="559587b8ca36d380edd73eda54c907e76fec21f9" translate="yes" xml:space="preserve">
          <source>Compile ES2015 destructuring to ES5</source>
          <target state="translated">将ES2015解构编译为ES5。</target>
        </trans-unit>
        <trans-unit id="3890d5819fedbe2b82956ca5553e0353c01b9935" translate="yes" xml:space="preserve">
          <source>Compile ES2015 for...of to ES5</source>
          <target state="translated">编译ES2015为...的到ES5。</target>
        </trans-unit>
        <trans-unit id="e0efe59337605f59032b16be346b850492a839aa" translate="yes" xml:space="preserve">
          <source>Compile ES2015 integer and unicode literals to ES5</source>
          <target state="translated">将ES2015的整数和unicode字元编译成ES5。</target>
        </trans-unit>
        <trans-unit id="cc841217cc7fbd63326338c8dbe1095f91edcd85" translate="yes" xml:space="preserve">
          <source>Compile ES2015 object super to ES5</source>
          <target state="translated">将ES2015对象超级编译成ES5</target>
        </trans-unit>
        <trans-unit id="fc97fe69fe140a2d00c99972405ce056d4b41f48" translate="yes" xml:space="preserve">
          <source>Compile ES2015 shorthand properties and methods to ES5</source>
          <target state="translated">将ES2015速记属性和方法编译成ES5。</target>
        </trans-unit>
        <trans-unit id="70bc5f8b8b23084524f510e44248c82d74460e94" translate="yes" xml:space="preserve">
          <source>Compile ES2015 spread to ES5</source>
          <target state="translated">编译ES2015传播到ES5</target>
        </trans-unit>
        <trans-unit id="ab4a39a50645106badd27fc931303f1019d3eba7" translate="yes" xml:space="preserve">
          <source>Compile ES2015 sticky regex to an ES5 RegExp constructor</source>
          <target state="translated">将ES2015粘性正则编译成ES5正则构造函数。</target>
        </trans-unit>
        <trans-unit id="c1e3a9dd8a9bb2e9ccc679ed18f75561d59c8575" translate="yes" xml:space="preserve">
          <source>Compile ES2015 template literals to ES5</source>
          <target state="translated">将ES2015模板字元编译为ES5。</target>
        </trans-unit>
        <trans-unit id="2f28d222161c403e6ddaf1468848689d6dc189f1" translate="yes" xml:space="preserve">
          <source>Compile ES2015 unicode regex to ES5</source>
          <target state="translated">将ES2015的unicode regex编译成ES5。</target>
        </trans-unit>
        <trans-unit id="2a9535175274a766832f9fe2616ae4b9ef463f86" translate="yes" xml:space="preserve">
          <source>Compile Files</source>
          <target state="translated">编译文件</target>
        </trans-unit>
        <trans-unit id="5f8e73f622dc3b7bc8b6c246ee987749d9f7d096" translate="yes" xml:space="preserve">
          <source>Compile `do` expressions to ES5</source>
          <target state="translated">将 &quot;do &quot;表达式编译成ES5。</target>
        </trans-unit>
        <trans-unit id="2a9eadac42acf2b849bf8720f998b842df76aaa9" translate="yes" xml:space="preserve">
          <source>Compile additional export-from statements to ES2015</source>
          <target state="translated">编制更多的输出-输出报表到ES2015。</target>
        </trans-unit>
        <trans-unit id="17c202e1e6620fcf2142e7f527f35202141328e7" translate="yes" xml:space="preserve">
          <source>Compile and run &lt;code&gt;test.js&lt;/code&gt;.</source>
          <target state="translated">编译并运行 &lt;code&gt;test.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ff27d207b976d871032cb0fd8e19ba6eab584a0" translate="yes" xml:space="preserve">
          <source>Compile class and object decorators to ES5</source>
          <target state="translated">编译类和对象装饰器到ES5。</target>
        </trans-unit>
        <trans-unit id="d5f76bcce7f16ceb09c56984410f905079b4cf8d" translate="yes" xml:space="preserve">
          <source>Compile eval calls with string literals</source>
          <target state="translated">编译带有字符串字面意义的评价调用</target>
        </trans-unit>
        <trans-unit id="3bacd54971ab58dd10dceebfaa9d0cb86c95b6fc" translate="yes" xml:space="preserve">
          <source>Compile exponentiation operator to ES5</source>
          <target state="translated">编译指数运算符到ES5。</target>
        </trans-unit>
        <trans-unit id="b4c656460349361e856b6d461705d6e824511148" translate="yes" xml:space="preserve">
          <source>Compile objects with duplicate keys to valid strict ES5.</source>
          <target state="translated">将带有重复键的对象编译成有效的严格的ES5。</target>
        </trans-unit>
        <trans-unit id="2b24cfbdacc4238faff28b5cfcbaabc4d30d949b" translate="yes" xml:space="preserve">
          <source>Compile the entire &lt;code&gt;src&lt;/code&gt; directory and output it as a single concatenated file.</source>
          <target state="translated">编译整个 &lt;code&gt;src&lt;/code&gt; 目录，并将其输出为单个串联文件。</target>
        </trans-unit>
        <trans-unit id="04ebadd732c2d3e6b35d4a50c370af8c4daaa75d" translate="yes" xml:space="preserve">
          <source>Compile the entire &lt;code&gt;src&lt;/code&gt; directory and output it to the &lt;code&gt;lib&lt;/code&gt; directory by using either &lt;code&gt;--out-dir&lt;/code&gt; or &lt;code&gt;-d&lt;/code&gt;. This doesn't overwrite any other files or directories in &lt;code&gt;lib&lt;/code&gt;.</source>
          <target state="translated">编译整个 &lt;code&gt;src&lt;/code&gt; 目录，并使用 &lt;code&gt;--out-dir&lt;/code&gt; 或 &lt;code&gt;-d&lt;/code&gt; 将其输出到 &lt;code&gt;lib&lt;/code&gt; 目录。这不会覆盖 &lt;code&gt;lib&lt;/code&gt; 中的任何其他文件或目录。</target>
        </trans-unit>
        <trans-unit id="056299ed6f536159ab425cf4aeb0ca6f57edc56a" translate="yes" xml:space="preserve">
          <source>Compile the entire &lt;code&gt;src&lt;/code&gt; directory and output it to the &lt;code&gt;lib&lt;/code&gt; directory. You may use &lt;code&gt;--out-dir&lt;/code&gt; or &lt;code&gt;-d&lt;/code&gt;. This doesn&amp;rsquo;t overwrite any other files or directories in &lt;code&gt;lib&lt;/code&gt;.</source>
          <target state="translated">编译整个 &lt;code&gt;src&lt;/code&gt; 目录，并将其输出到 &lt;code&gt;lib&lt;/code&gt; 目录。您可以使用 &lt;code&gt;--out-dir&lt;/code&gt; 或 &lt;code&gt;-d&lt;/code&gt; 。这不会覆盖 &lt;code&gt;lib&lt;/code&gt; 中的任何其他文件或目录。</target>
        </trans-unit>
        <trans-unit id="52540a0fac2ef42874564e90ffa0358b1862f9f0" translate="yes" xml:space="preserve">
          <source>Compile the entire &lt;code&gt;src&lt;/code&gt; directory and output it to the one concatenated file.</source>
          <target state="translated">编译整个 &lt;code&gt;src&lt;/code&gt; 目录，并将其输出到一个连接的文件。</target>
        </trans-unit>
        <trans-unit id="9f4253e1079052a5ed9f1d9b3faac43064ab36d9" translate="yes" xml:space="preserve">
          <source>Compile the file &lt;code&gt;script.js&lt;/code&gt; and &lt;strong&gt;output to stdout&lt;/strong&gt;.</source>
          <target state="translated">编译文件 &lt;code&gt;script.js&lt;/code&gt; 并&lt;strong&gt;输出到stdout&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="39c7c7e0e250d151d01f520f5867f23f705ee092" translate="yes" xml:space="preserve">
          <source>Compile the new function bind operator `::` to ES5.</source>
          <target state="translated">将新的函数绑定操作符`::`编译到ES5中。</target>
        </trans-unit>
        <trans-unit id="7e3535b323bb996f44cc2f1a57f219d1a31d9957" translate="yes" xml:space="preserve">
          <source>Compile with Source Maps</source>
          <target state="translated">用源地图编译</target>
        </trans-unit>
        <trans-unit id="d991b96d91dc790c1669315c5f1fd044ca660392" translate="yes" xml:space="preserve">
          <source>Compiling plugins and presets on the fly</source>
          <target state="translated">在飞行中编译插件和预设。</target>
        </trans-unit>
        <trans-unit id="d282aaadf4f34eb6a05d7a31619f2469daceaeac" translate="yes" xml:space="preserve">
          <source>Config Files</source>
          <target state="translated">配置文件</target>
        </trans-unit>
        <trans-unit id="359b10e8496ee8e0e1f2f6592225667ff8d4e062" translate="yes" xml:space="preserve">
          <source>Config Function API</source>
          <target state="translated">配置功能API</target>
        </trans-unit>
        <trans-unit id="4bd6141dc81cfcc6d4c69e70b4094afa67019c20" translate="yes" xml:space="preserve">
          <source>Config Loading options</source>
          <target state="translated">配置加载选项</target>
        </trans-unit>
        <trans-unit id="3f1041570aba489a4cd94618b05c04394cb1fbc1" translate="yes" xml:space="preserve">
          <source>Config Merging options</source>
          <target state="translated">配置合并选项</target>
        </trans-unit>
        <trans-unit id="9e96fdfb2b7af81eee449313671aa63187b32450" translate="yes" xml:space="preserve">
          <source>Configs may &quot;extend&quot; other configuration files. Config fields in the current config will be &lt;a href=&quot;#merging&quot;&gt;merged&lt;/a&gt; on top of the extended file's configuration.</source>
          <target state="translated">配置可以&amp;ldquo;扩展&amp;rdquo;其他配置文件。当前配置中的配置字段将在扩展文件的配置之上&lt;a href=&quot;#merging&quot;&gt;合并&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a767b7a1a363870af3919b2baa1ecb3b4a2206fe" translate="yes" xml:space="preserve">
          <source>Configurable &quot;search and replace&quot; plugin. Replaces matching nodes in the tree with a given replacement node</source>
          <target state="translated">可配置的 &quot;搜索和替换 &quot;插件。用给定的替换节点替换树中的匹配节点。</target>
        </trans-unit>
        <trans-unit id="d05734245107580c9061123a1144d7ee61641df4" translate="yes" xml:space="preserve">
          <source>Configuration File Types</source>
          <target state="translated">配置文件类型</target>
        </trans-unit>
        <trans-unit id="00c5252c394597f9ca37e455c6ff334c93f1a9f0" translate="yes" xml:space="preserve">
          <source>Consider this code:</source>
          <target state="translated">考虑一下这个代码。</target>
        </trans-unit>
        <trans-unit id="22487b6338c1d621397911da35c185c395b6925d" translate="yes" xml:space="preserve">
          <source>Constant checks</source>
          <target state="translated">不断检查</target>
        </trans-unit>
        <trans-unit id="bee2ff6d635881f73444e74aefcc2552bb4c9da1" translate="yes" xml:space="preserve">
          <source>Constructing deeply nested classes</source>
          <target state="translated">构造深嵌套类</target>
        </trans-unit>
        <trans-unit id="2834898a37c5fabc90f3b81a1d1d45e75f90ef05" translate="yes" xml:space="preserve">
          <source>Context - and scope - aware variable renaming</source>
          <target state="translated">上下文--和范围--感知变量的重命名。</target>
        </trans-unit>
        <trans-unit id="58fea5634a5158bc42ca3400c089205949395eb2" translate="yes" xml:space="preserve">
          <source>Convert === and !== to == and != if their types are inferred to be the same</source>
          <target state="translated">如果推断它们的类型相同,则将 ===和 !==转换为 ==和 !==。</target>
        </trans-unit>
        <trans-unit id="973406c8de34273ae4d0f023653159a9f7b432bc" translate="yes" xml:space="preserve">
          <source>Convert to using &lt;code&gt;export default&lt;/code&gt; and &lt;code&gt;export const&lt;/code&gt;, and &lt;code&gt;import x, {y} from &quot;z&quot;&lt;/code&gt;.</source>
          <target state="translated">转换为使用 &lt;code&gt;export default&lt;/code&gt; 和 &lt;code&gt;export const&lt;/code&gt; ，并 &lt;code&gt;import x, {y} from &quot;z&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ba094d6199002b380e24998514c0780204c05cc" translate="yes" xml:space="preserve">
          <source>Copy files</source>
          <target state="translated">复制文件</target>
        </trans-unit>
        <trans-unit id="7018c0638077c6439424b1e444bd712a32bce178" translate="yes" xml:space="preserve">
          <source>Copy files that will not be compiled</source>
          <target state="translated">复制不会被编译的文件</target>
        </trans-unit>
        <trans-unit id="68836c550ee20fae0e06b2994e76a40348d2fc30" translate="yes" xml:space="preserve">
          <source>Core</source>
          <target state="translated">Core</target>
        </trans-unit>
        <trans-unit id="24bb424baf86cc99f2394bd6057d031b9d9cc958" translate="yes" xml:space="preserve">
          <source>Core Packages</source>
          <target state="translated">核心包</target>
        </trans-unit>
        <trans-unit id="aa44bc450517875a1fd9c51a20f5e3daed2c1e0c" translate="yes" xml:space="preserve">
          <source>Create a file to run on</source>
          <target state="translated">创建一个文件,以运行在</target>
        </trans-unit>
        <trans-unit id="80b26c7076239bb8ef796c91ca3504ef81710f2b" translate="yes" xml:space="preserve">
          <source>Create a plugin on the fly with &lt;a href=&quot;https://astexplorer.net/#/KJ8AjD6maa&quot;&gt;astexplorer.net&lt;/a&gt; or use &lt;a href=&quot;https://github.com/babel/generator-babel-plugin&quot;&gt;generator-babel-plugin&lt;/a&gt; to generate a plugin template.</source>
          <target state="translated">使用&lt;a href=&quot;https://astexplorer.net/#/KJ8AjD6maa&quot;&gt;astexplorer.net快速&lt;/a&gt;创建插件，或使用&lt;a href=&quot;https://github.com/babel/generator-babel-plugin&quot;&gt;generator-babel-plugin&lt;/a&gt;生成插件模板。</target>
        </trans-unit>
        <trans-unit id="6c907a8ae57971217efa7e648c2eef56305259de" translate="yes" xml:space="preserve">
          <source>Creating a Preset</source>
          <target state="translated">创建预设</target>
        </trans-unit>
        <trans-unit id="bfac50d6424b5166c3ee2808c85ae7c139b5182f" translate="yes" xml:space="preserve">
          <source>Credits</source>
          <target state="translated">Credits</target>
        </trans-unit>
        <trans-unit id="ec1a5ea984d0c9a38d9ebac0f7fc14143a0309c4" translate="yes" xml:space="preserve">
          <source>Currently located at &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js&quot;&gt;plugin-features.js&lt;/a&gt;.</source>
          <target state="translated">当前位于&lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js&quot;&gt;plugin-features.js&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0722804ab68c5c5e0e175e23eed8c4de123adea9" translate="yes" xml:space="preserve">
          <source>Currently, &lt;code&gt;@babel/preset-env&lt;/code&gt; is unaware that using &lt;code&gt;import()&lt;/code&gt; with &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/#dynamic-imports&quot;&gt;Webpack relies on &lt;code&gt;Promise&lt;/code&gt; internally&lt;/a&gt;. Environments which do not have builtin support for &lt;code&gt;Promise&lt;/code&gt;, like Internet Explorer, will require both the &lt;code&gt;promise&lt;/code&gt; and &lt;code&gt;iterator&lt;/code&gt; polyfills be added manually.</source>
          <target state="translated">当前， &lt;code&gt;@babel/preset-env&lt;/code&gt; &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/#dynamic-imports&quot;&gt;尚未&lt;/a&gt;意识到在Webpack中使用 &lt;code&gt;import()&lt;/code&gt; 内部依赖于 &lt;code&gt;Promise&lt;/code&gt; 。不支持 &lt;code&gt;Promise&lt;/code&gt; 的环境（例如Internet Explorer）将需要手动添加 &lt;code&gt;promise&lt;/code&gt; 和 &lt;code&gt;iterator&lt;/code&gt; polyfill。</target>
        </trans-unit>
        <trans-unit id="081ae3fdc403609cf6e760849ebb14117b7a50cb" translate="yes" xml:space="preserve">
          <source>Custom</source>
          <target state="translated">Custom</target>
        </trans-unit>
        <trans-unit id="966088c4d40e5de861b041b470e8d535ad5efb42" translate="yes" xml:space="preserve">
          <source>Custom config path</source>
          <target state="translated">自定义配置路径</target>
        </trans-unit>
        <trans-unit id="3771504cd487b1645c83ded02cf6dff88769e45a" translate="yes" xml:space="preserve">
          <source>Customizing the Automatic Runtime Import</source>
          <target state="translated">自定义自动运行时导入</target>
        </trans-unit>
        <trans-unit id="53418d117a2338c1ddd6cb89c8ccdfa3cdc6657a" translate="yes" xml:space="preserve">
          <source>Customizing the Classic Runtime Import</source>
          <target state="translated">自定义经典运行时导入</target>
        </trans-unit>
        <trans-unit id="d28820f51e36e1d649e226c383eb10d91d46c407" translate="yes" xml:space="preserve">
          <source>Customizing with the Classic Runtime</source>
          <target state="translated">使用经典运行时自定义</target>
        </trans-unit>
        <trans-unit id="ba174c647d068d0bb4907395c1090b6d88abf070" translate="yes" xml:space="preserve">
          <source>DEFAULT_EXTENSIONS</source>
          <target state="translated">DEFAULT_EXTENSIONS</target>
        </trans-unit>
        <trans-unit id="4601396c170521f6fe27f1ad010e8963101c1915" translate="yes" xml:space="preserve">
          <source>Date example</source>
          <target state="translated">日期示例</target>
        </trans-unit>
        <trans-unit id="9d77aa25155c632b418484c91d8781ba78aed21c" translate="yes" xml:space="preserve">
          <source>Debuggable</source>
          <target state="translated">Debuggable</target>
        </trans-unit>
        <trans-unit id="e69ff149a275fbd813da9033cdbbc3b36153d760" translate="yes" xml:space="preserve">
          <source>Decides which runtime to use.</source>
          <target state="translated">决定使用哪个运行时。</target>
        </trans-unit>
        <trans-unit id="addf2e413eefd2244ca594f26ceb84ada3a8ef39" translate="yes" xml:space="preserve">
          <source>Decimal Literals</source>
          <target state="translated">小数字</target>
        </trans-unit>
        <trans-unit id="57708ad646592a274ee26681d12714f7f9cfac89" translate="yes" xml:space="preserve">
          <source>Decorators are not currently supported</source>
          <target state="translated">目前不支持装饰器</target>
        </trans-unit>
        <trans-unit id="405537039d86a69abc3ab145d5acb84a690d41d7" translate="yes" xml:space="preserve">
          <source>Decorators transform</source>
          <target state="translated">装修工改造</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="07da7e6e81c3973bd74771310c0e6ae65d56747f" translate="yes" xml:space="preserve">
          <source>Default behavior without options is the same as &lt;code&gt;babel-preset-latest&lt;/code&gt;.</source>
          <target state="translated">不带选项的默认行为与 &lt;code&gt;babel-preset-latest&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="a9000eb05897147ae92de90fbc771b0e33766037" translate="yes" xml:space="preserve">
          <source>Default parameters</source>
          <target state="translated">默认参数</target>
        </trans-unit>
        <trans-unit id="9fe196278e4691f1dcb119c5869bdbea7c3de295" translate="yes" xml:space="preserve">
          <source>Default parameters desugar into &lt;code&gt;let&lt;/code&gt; declarations to retain proper semantics. If this is not supported in your environment then you&amp;rsquo;ll need the &lt;a href=&quot;../transform-es2015-block-scoping/index&quot;&gt;transform-block-scoping&lt;/a&gt; plugin.</source>
          <target state="translated">默认参数将desugar放到 &lt;code&gt;let&lt;/code&gt; 声明中以保留适当的语义。如果您的环境不支持此功能，则需要使用&lt;a href=&quot;../transform-es2015-block-scoping/index&quot;&gt;transform-b​​lock-scoping&lt;/a&gt;插件。</target>
        </trans-unit>
        <trans-unit id="489500dadefcc6e2f104f0a12689c2b96b5a5f6f" translate="yes" xml:space="preserve">
          <source>Default parameters desugar into &lt;code&gt;let&lt;/code&gt; declarations to retain proper semantics. If this is not supported in your environment then you'll need the &lt;a href=&quot;../babel-plugin-transform-block-scoping/index&quot;&gt;@babel/plugin-transform-block-scoping&lt;/a&gt; plugin.</source>
          <target state="translated">默认参数将desugar放到 &lt;code&gt;let&lt;/code&gt; 声明中以保留适当的语义。如果您的环境不支持此功能，则需要&lt;a href=&quot;../babel-plugin-transform-block-scoping/index&quot;&gt;@ babel / plugin-transform-b​​lock-scoping&lt;/a&gt;插件。</target>
        </trans-unit>
        <trans-unit id="49698b98fd08464385b83efa2e8ab9d1c7239a80" translate="yes" xml:space="preserve">
          <source>Default semantics</source>
          <target state="translated">默认语义</target>
        </trans-unit>
        <trans-unit id="ba13fab225537b2e8ad317b47d26f25239fffb57" translate="yes" xml:space="preserve">
          <source>Default with &lt;code&gt;minified&lt;/code&gt;: &lt;code&gt;() =&amp;gt; opts.comments&lt;/code&gt;</source>
          <target state="translated">使用默认 &lt;code&gt;minified&lt;/code&gt; ： &lt;code&gt;() =&amp;gt; opts.comments&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06a20b463de2bfd6d3430f9ed28a087919f186cb" translate="yes" xml:space="preserve">
          <source>Default without &lt;code&gt;minified&lt;/code&gt;: &lt;code&gt;(val) =&amp;gt; opts.comments || /@license|@preserve/.test(val)&lt;/code&gt;</source>
          <target state="translated">默认值不带 &lt;code&gt;minified&lt;/code&gt; ： &lt;code&gt;(val) =&amp;gt; opts.comments || /@license|@preserve/.test(val)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95039da08251ff4851fc01bcf59fbc9a42780e5e" translate="yes" xml:space="preserve">
          <source>Default: &quot;module&quot;</source>
          <target state="translated">默认:&quot;模块&quot;</target>
        </trans-unit>
        <trans-unit id="d564789ce3821e381cee1067628517f3921c23c2" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;!!opts.moduleId&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;!!opts.moduleId&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c0319a04b59aee70c01dd69ca4da144f391ca6f" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;&quot;auto&quot;&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;&quot;auto&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="139a728b5862f3c6856a976bc32736eb430035bd" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;&quot;root&quot;&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;&quot;root&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ffa1281e650e63433a7c2437e7f3068376e6c83" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="614188609a5c964071cad1f8bd6a9a468d7e820f" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f158c138f0cba5a2f81ac8c93a42b714b48f6f18" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;opts.cwd&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;opts.cwd&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b693e132925b7b3b96e41d64e26f6bc2a763527d" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;opts.root&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;opts.root&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04db333f90a6bd474ef636fe8fd812fc83c12cf0" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;path.basename(opts.filenameRelative)&lt;/code&gt; when available, or &lt;code&gt;&quot;unknown&quot;&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;path.basename(opts.filenameRelative)&lt;/code&gt; (如果可用），或 &lt;code&gt;&quot;unknown&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f59fc5d078047d10117532a3bc31ad20a13b6c0" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;path.relative(opts.cwd, opts.filename)&lt;/code&gt; (if &lt;a href=&quot;#filename&quot;&gt;&lt;code&gt;&quot;filename&quot;&lt;/code&gt;&lt;/a&gt; was passed)</source>
          <target state="translated">默认值： &lt;code&gt;path.relative(opts.cwd, opts.filename)&lt;/code&gt; （如果传递了&lt;a href=&quot;#filename&quot;&gt; &lt;code&gt;&quot;filename&quot;&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="91a670111cf3485f5fc9973d75d82b33803d8a87" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;path.resolve(opts.root, &quot;babel.config.json&quot;)&lt;/code&gt;, if it exists, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">默认值： &lt;code&gt;path.resolve(opts.root, &quot;babel.config.json&quot;)&lt;/code&gt; ，如果存在的话， &lt;code&gt;false&lt;/code&gt; 以其他方式</target>
        </trans-unit>
        <trans-unit id="f6dc4a20396c4536635d72a50ecc7f202fdedec2" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;process.cwd()&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;process.cwd()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5453be3e453d7201a0161eb68a2d5f8fffa5a6cf" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;process.env.BABEL_ENV || process.env.NODE_ENV || &quot;development&quot;&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;process.env.BABEL_ENV || process.env.NODE_ENV || &quot;development&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d0b83b26a1706be41ebbd280d1bc7d8f1a895a8" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">默认值： &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c352a4dec2fb507a4bd541f2e24c075fddb2744" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;true&lt;/code&gt; as long as the &lt;code&gt;filename&lt;/code&gt; option has been specified</source>
          <target state="translated">默认值： &lt;code&gt;true&lt;/code&gt; 只要 &lt;code&gt;filename&lt;/code&gt; 已指定的选项</target>
        </trans-unit>
        <trans-unit id="f31fe269815918f712169608f580cc65818800f3" translate="yes" xml:space="preserve">
          <source>DefaultValue</source>
          <target state="translated">DefaultValue</target>
        </trans-unit>
        <trans-unit id="404e7f4a481cc2d375ce5b1ccef7d7fd8daf157f" translate="yes" xml:space="preserve">
          <source>Defaults to searching for a default &lt;code&gt;babel.config.json&lt;/code&gt; file, but can be passed the path of any JS or JSON5 config file.</source>
          <target state="translated">默认为搜索默认的 &lt;code&gt;babel.config.json&lt;/code&gt; 文件，但可以将其传递给任何JS或JSON5配置文件的路径。</target>
        </trans-unit>
        <trans-unit id="316eb8ea4fe1340941f53b87f3f4e944ed852fad" translate="yes" xml:space="preserve">
          <source>Defining Helpers</source>
          <target state="translated">定义帮助者</target>
        </trans-unit>
        <trans-unit id="8b776c269090f7389d50fc4d01c5a439f7911c25" translate="yes" xml:space="preserve">
          <source>Deleting deeply nested properties</source>
          <target state="translated">删除深度嵌套的属性</target>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="1668a1fb8d2e3c3892779b8f5a4295075f99c3ff" translate="yes" xml:space="preserve">
          <source>Describes the environments you support/target for your project.</source>
          <target state="translated">描述您对项目的支持/目标环境。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="884d1d1e74872cf675e1c3666c856c18941a8ec6" translate="yes" xml:space="preserve">
          <source>Destructuring parameters</source>
          <target state="translated">销毁参数</target>
        </trans-unit>
        <trans-unit id="7c9a7c0610c1bc20abb9c9d07094daa33576a8f8" translate="yes" xml:space="preserve">
          <source>Detail</source>
          <target state="translated">Detail</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="60101d6789fa16c835f442d6d0a9b314eeac31fd" translate="yes" xml:space="preserve">
          <source>Determine environment support for ECMAScript features</source>
          <target state="translated">确定环境对ECMAScript功能的支持。</target>
        </trans-unit>
        <trans-unit id="6140c3b994a977cb87a258dc0fe5856d666e0ddd" translate="yes" xml:space="preserve">
          <source>Determine the lowest common denominator of plugins to be included in the preset</source>
          <target state="translated">确定要包含在预设中的插件的最低共同点。</target>
        </trans-unit>
        <trans-unit id="496d00b327c3bf20d9610f16c05306afbf8b7f86" translate="yes" xml:space="preserve">
          <source>Difference from &lt;code&gt;@babel/runtime&lt;/code&gt;</source>
          <target state="translated">与 &lt;code&gt;@babel/runtime&lt;/code&gt; 区别</target>
        </trans-unit>
        <trans-unit id="7c5a4a0dbbc65b431e383ad1c480b6b2deda1055" translate="yes" xml:space="preserve">
          <source>Different projects on the same machine can depend on different versions of Babel allowing you to update one at a time.</source>
          <target state="translated">同一台机器上的不同项目可以依赖不同版本的Babel,允许您一次更新一个。</target>
        </trans-unit>
        <trans-unit id="b6cda8f6852343d25a7931240018e9c84d8d1bfb" translate="yes" xml:space="preserve">
          <source>Different projects on the same machine can depend on different versions of Babel allowing you to update them individually.</source>
          <target state="translated">同一台机器上的不同项目可以依赖不同版本的Babel,允许您单独更新它们。</target>
        </trans-unit>
        <trans-unit id="cf384b876862598d0744eb321b26898c945ff096" translate="yes" xml:space="preserve">
          <source>Direct:</source>
          <target state="translated">Direct:</target>
        </trans-unit>
        <trans-unit id="f89cc17e20b2596e3a7acba6b760b95a34ee0393" translate="yes" xml:space="preserve">
          <source>Disable the cache.</source>
          <target state="translated">禁用缓存。</target>
        </trans-unit>
        <trans-unit id="3c36de8d21d1688c6ab3b0d157084b6a73456065" translate="yes" xml:space="preserve">
          <source>Do expressions transform</source>
          <target state="translated">表达式是否会转换</target>
        </trans-unit>
        <trans-unit id="a0d55ac0be57897dbf450219aa1e97628df025d6" translate="yes" xml:space="preserve">
          <source>Do not include superfluous whitespace characters and line terminators. When set to &lt;code&gt;&quot;auto&quot;&lt;/code&gt; compact is set to &lt;code&gt;true&lt;/code&gt; on input sizes of &amp;gt;500KB.</source>
          <target state="translated">不要包含多余的空格字符和行终止符。设置为 &lt;code&gt;&quot;auto&quot;&lt;/code&gt; ，在输入大小&amp;gt; 500KB时，compact设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d01c8e9ec47e3b7b6bf3940330c536685956c81" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t know where to start? Check out some of our &lt;a href=&quot;#presets&quot;&gt;presets&lt;/a&gt;.</source>
          <target state="translated">不知道从哪里开始？查看我们的一些&lt;a href=&quot;#presets&quot;&gt;预设&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6c6c32c62b4b2023b74bc2e4ad193bd26d8dcfe9" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t want to assemble your own set of plugins? No problem! Presets are sharable &lt;a href=&quot;../usage/babelrc/index&quot;&gt;&lt;code&gt;.babelrc&lt;/code&gt;&lt;/a&gt; configs or simply an array of babel plugins.</source>
          <target state="translated">不想组装自己的插件集？没问题！预设是可共享的&lt;a href=&quot;../usage/babelrc/index&quot;&gt; &lt;code&gt;.babelrc&lt;/code&gt; &lt;/a&gt;配置，或者只是一组babel插件。</target>
        </trans-unit>
        <trans-unit id="4824dc181a3ba8c954a2c7b930f6f8265baa7def" translate="yes" xml:space="preserve">
          <source>Don't add polyfills automatically per file, and don't transform &lt;code&gt;import &quot;core-js&quot;&lt;/code&gt; or &lt;code&gt;import &quot;@babel/polyfill&quot;&lt;/code&gt; to individual polyfills.</source>
          <target state="translated">不要为每个文件自动添加polyfill，也不要将 &lt;code&gt;import &quot;core-js&quot;&lt;/code&gt; 或 &lt;code&gt;import &quot;@babel/polyfill&quot;&lt;/code&gt; 为单独的polyfill。</target>
        </trans-unit>
        <trans-unit id="c9dc83df73777426be22936c8541de242e13f90e" translate="yes" xml:space="preserve">
          <source>Due to technical limitations ES6-style module-loading is not fully supported in a &lt;code&gt;babel-node REPL&lt;/code&gt;.</source>
          <target state="translated">由于技术限制， &lt;code&gt;babel-node REPL&lt;/code&gt; 中不完全支持ES6样式的模块加载。</target>
        </trans-unit>
        <trans-unit id="f65fdd0bbe12e961ec522ae94b691835b3be2642" translate="yes" xml:space="preserve">
          <source>ECMAScript &lt;a href=&quot;https://github.com/babel/proposals&quot;&gt;proposals&lt;/a&gt;</source>
          <target state="translated">ECMAScript&lt;a href=&quot;https://github.com/babel/proposals&quot;&gt;建议&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5a62de10aadb8cafd6513263458b577c21a6962a" translate="yes" xml:space="preserve">
          <source>ECMAScript Proposal: export default from</source>
          <target state="translated">ECMAScript建议:从以下地方导出默认值。</target>
        </trans-unit>
        <trans-unit id="ba0b34117ea532667fd5e1f04d2c3fbd8616b8fb" translate="yes" xml:space="preserve">
          <source>ECMAScript Proposal: export ns from</source>
          <target state="translated">ECMAScript建议:从以下地方导出ns。</target>
        </trans-unit>
        <trans-unit id="5be8585e8dda5d16a9d3e66f70a40dc596a018af" translate="yes" xml:space="preserve">
          <source>ES2015</source>
          <target state="translated">ES2015</target>
        </trans-unit>
        <trans-unit id="7a22e0573f5b28fb6ddd37c9d2a4c5390e39e691" translate="yes" xml:space="preserve">
          <source>ES2015 and beyond</source>
          <target state="translated">ES2015及以后</target>
        </trans-unit>
        <trans-unit id="4faadfabb285147f29c19ff0afdcb21347b17b4d" translate="yes" xml:space="preserve">
          <source>ES2015 arrow functions transform</source>
          <target state="translated">ES2015箭头函数转换</target>
        </trans-unit>
        <trans-unit id="271153e004b0eb349255d0c80ff68b9fc80cd324" translate="yes" xml:space="preserve">
          <source>ES2015 block scoped functions transform</source>
          <target state="translated">ES2015块范围内函数转换</target>
        </trans-unit>
        <trans-unit id="7e7b173b41eaf394765badc7407f1a1f9f5eb279" translate="yes" xml:space="preserve">
          <source>ES2015 block scoping transform</source>
          <target state="translated">ES2015区块范围改造</target>
        </trans-unit>
        <trans-unit id="d39c9de2e8ab300705d7924a3d16f85a936ad10c" translate="yes" xml:space="preserve">
          <source>ES2015 classes transform</source>
          <target state="translated">ES2015班级转型</target>
        </trans-unit>
        <trans-unit id="d8314611d77a09f1b29062400d749366ddb88e32" translate="yes" xml:space="preserve">
          <source>ES2015 computed properties transform</source>
          <target state="translated">ES2015计算属性转换</target>
        </trans-unit>
        <trans-unit id="f4ac71fece95398546ca5dbcca1337b67a69dad9" translate="yes" xml:space="preserve">
          <source>ES2015 constants check</source>
          <target state="translated">ES2015常量检查</target>
        </trans-unit>
        <trans-unit id="c7981d5a4404ebed53b1445bd256fd457c8f26d1" translate="yes" xml:space="preserve">
          <source>ES2015 destructuring transform</source>
          <target state="translated">ES2015解构改造</target>
        </trans-unit>
        <trans-unit id="1dd1a7fd564bc97cbcddcfce9313c65979c8e69a" translate="yes" xml:space="preserve">
          <source>ES2015 duplicate keys transform</source>
          <target state="translated">ES2015重复键转换</target>
        </trans-unit>
        <trans-unit id="b8bb6601255fdb7eb18c3bede7db9fa346c2b045" translate="yes" xml:space="preserve">
          <source>ES2015 for-of transform</source>
          <target state="translated">ES2015 for-of transform</target>
        </trans-unit>
        <trans-unit id="23c8a72f620fc2696cdf6dcfbc1de479b5686de9" translate="yes" xml:space="preserve">
          <source>ES2015 function name transform</source>
          <target state="translated">ES2015函数名称变换</target>
        </trans-unit>
        <trans-unit id="dbe20b3148c25ebffb18ab11bb09f20e9989d6d3" translate="yes" xml:space="preserve">
          <source>ES2015 literals transform</source>
          <target state="translated">ES2015读写器改造</target>
        </trans-unit>
        <trans-unit id="3cfa7942e75e0782d78ed84a5ffbee191fbbd2bc" translate="yes" xml:space="preserve">
          <source>ES2015 modules to AMD transform</source>
          <target state="translated">ES2015模块向AMD转型</target>
        </trans-unit>
        <trans-unit id="cdbf36c5dcaab853703176574830ec2dfd0fac80" translate="yes" xml:space="preserve">
          <source>ES2015 modules to CommonJS transform</source>
          <target state="translated">ES2015模块向CommonJS转化</target>
        </trans-unit>
        <trans-unit id="681d6f25a45513d8fd4a94811bdb434e29e0d4e2" translate="yes" xml:space="preserve">
          <source>ES2015 modules to SystemJS transform</source>
          <target state="translated">ES2015模块到SystemJS的转换</target>
        </trans-unit>
        <trans-unit id="73bb2048af584335cd3bc44d92e98e21963a45be" translate="yes" xml:space="preserve">
          <source>ES2015 modules to UMD transform</source>
          <target state="translated">ES2015模块到UMD转换</target>
        </trans-unit>
        <trans-unit id="88582df07975e678e523e207aecef879cd79d8fe" translate="yes" xml:space="preserve">
          <source>ES2015 object super transform</source>
          <target state="translated">ES2015对象超级变换</target>
        </trans-unit>
        <trans-unit id="88343ef1951e8127fffc9d1d85c8f7777d649c66" translate="yes" xml:space="preserve">
          <source>ES2015 parameters transform</source>
          <target state="translated">ES2015参数转换</target>
        </trans-unit>
        <trans-unit id="d62da8a5449161d7be5ea9add6e1e9aebbb40779" translate="yes" xml:space="preserve">
          <source>ES2015 preset</source>
          <target state="translated">ES2015预设</target>
        </trans-unit>
        <trans-unit id="74db20092a008efed864816c03a3ffb62b764785" translate="yes" xml:space="preserve">
          <source>ES2015 shorthand properties transform</source>
          <target state="translated">ES2015速记属性转换</target>
        </trans-unit>
        <trans-unit id="1d45dd8757c23fc9b5e9d26f01aa21326a9e935c" translate="yes" xml:space="preserve">
          <source>ES2015 spread transform</source>
          <target state="translated">ES2015价差变换</target>
        </trans-unit>
        <trans-unit id="bd732e78e0d28433b0c60fb3d377f59b90391d3c" translate="yes" xml:space="preserve">
          <source>ES2015 sticky regex transform</source>
          <target state="translated">ES2015粘稠的regex变换</target>
        </trans-unit>
        <trans-unit id="3de2635d339d2e4cf10202f3984e72b2af063dc9" translate="yes" xml:space="preserve">
          <source>ES2015 template literals transform</source>
          <target state="translated">ES2015模板字数转换</target>
        </trans-unit>
        <trans-unit id="cec09f8d475686cd9e43f6b86d4d366e8c5d2f4c" translate="yes" xml:space="preserve">
          <source>ES2015 typeof symbol transform</source>
          <target state="translated">ES2015类型的符号转换</target>
        </trans-unit>
        <trans-unit id="464d76ab81ed8f954aadbe46020c71d9c0e5b8da" translate="yes" xml:space="preserve">
          <source>ES2015 unicode regex transform</source>
          <target state="translated">ES2015 unicode regex转换</target>
        </trans-unit>
        <trans-unit id="746a1b02ae4a12ed2eeab0a62e0f203064342709" translate="yes" xml:space="preserve">
          <source>ES2016</source>
          <target state="translated">ES2016</target>
        </trans-unit>
        <trans-unit id="ed8ab89b6dc372539fa9eae1b704c86553857d3e" translate="yes" xml:space="preserve">
          <source>ES2016 preset</source>
          <target state="translated">ES2016预设</target>
        </trans-unit>
        <trans-unit id="9382ceb72b7d2b96416ef9af1ad9441b156bfc32" translate="yes" xml:space="preserve">
          <source>ES2017</source>
          <target state="translated">ES2017</target>
        </trans-unit>
        <trans-unit id="5ca358f6b2d46aaae68bfbb5f13abb3a32af7150" translate="yes" xml:space="preserve">
          <source>ES2017 preset</source>
          <target state="translated">ES2017预设</target>
        </trans-unit>
        <trans-unit id="0902d6a2a224e9fbbfdd0412fa0d70d4144919e3" translate="yes" xml:space="preserve">
          <source>ES2018</source>
          <target state="translated">ES2018</target>
        </trans-unit>
        <trans-unit id="eb92a68dae1564a1043fd9dfccd948d252089a8f" translate="yes" xml:space="preserve">
          <source>ES3</source>
          <target state="translated">ES3</target>
        </trans-unit>
        <trans-unit id="caa0a5a511c459d521f26205418a2c79c2be2703" translate="yes" xml:space="preserve">
          <source>ES3 Spec: Future Reserved Words</source>
          <target state="translated">ES3规格 未来保留字数</target>
        </trans-unit>
        <trans-unit id="baefc731bd9ce837eb3df395782d25cefcf1c26b" translate="yes" xml:space="preserve">
          <source>ES3 member expressions literals transform</source>
          <target state="translated">ES3成员表达式 字符转换</target>
        </trans-unit>
        <trans-unit id="29166cece5641ec6d8566c5c8c8af89072a60b1b" translate="yes" xml:space="preserve">
          <source>ES3 property literals transform</source>
          <target state="translated">ES3属性字元转换</target>
        </trans-unit>
        <trans-unit id="02957381f086d7a70ffa685322ea2b1f8bb72d3d" translate="yes" xml:space="preserve">
          <source>ES5</source>
          <target state="translated">ES5</target>
        </trans-unit>
        <trans-unit id="2993aee40224f7d111292fef2d0b30964619b94a" translate="yes" xml:space="preserve">
          <source>ES5 property mutators transform</source>
          <target state="translated">ES5属性突变器转换</target>
        </trans-unit>
        <trans-unit id="bbda466a1ebb7394abc35b769e0254a905c0e6b8" translate="yes" xml:space="preserve">
          <source>ES6 Spec: InstanceOf Operator Semantics</source>
          <target state="translated">ES6 Spec:操作者语义的InstanceOf</target>
        </trans-unit>
        <trans-unit id="0597cfc61dd49b54788474879cf5a721ffdb936c" translate="yes" xml:space="preserve">
          <source>ES6-style module-loading may not function as expected</source>
          <target state="translated">ES6风格的模块加载可能无法达到预期效果。</target>
        </trans-unit>
        <trans-unit id="a5843637d209ee27e70c47c08403d3fd1c3f6b8e" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;ConfigItem&lt;/code&gt; exposes all of the information Babel knows. The fields are:</source>
          <target state="translated">每个 &lt;code&gt;ConfigItem&lt;/code&gt; 公开Babel知道的所有信息。字段是：</target>
        </trans-unit>
        <trans-unit id="0dafe8fcdb20951e9279a548bb17487cb012b6ae" translate="yes" xml:space="preserve">
          <source>Each target environment takes a number or a string (we recommend using a string when specifying minor versions like &lt;code&gt;node: &quot;6.10&quot;&lt;/code&gt;).</source>
          <target state="translated">每个目标环境都使用数字或字符串（在指定次要版本（例如 &lt;code&gt;node: &quot;6.10&quot;&lt;/code&gt; ）时，建议使用字符串）。</target>
        </trans-unit>
        <trans-unit id="bf54f8a00b29a0ff326a1962a75a8b148b9ce6a2" translate="yes" xml:space="preserve">
          <source>Each yearly preset only compiles what was ratified in that year. &lt;code&gt;babel-preset-env&lt;/code&gt; replaces es2015, es2016, es2017 and latest</source>
          <target state="translated">每个年度预设仅编译当年批准的内容。 &lt;code&gt;babel-preset-env&lt;/code&gt; 替代es2015，es2016，es2017和最新版本</target>
        </trans-unit>
        <trans-unit id="600f04beb3b8ee41b35b50006b107b712b217eb5" translate="yes" xml:space="preserve">
          <source>Enable &quot;loose&quot; transformations for any plugins in this preset that allow them.</source>
          <target state="translated">为该预设中任何允许进行 &quot;松散 &quot;变换的插件启用。</target>
        </trans-unit>
        <trans-unit id="7a5bc3c40f4d06b65753f4baef2abfe63cd48b3e" translate="yes" xml:space="preserve">
          <source>Enable &amp;ldquo;loose&amp;rdquo; transformations for any plugins in this preset that allow them.</source>
          <target state="translated">为该预设中允许它们的所有插件启用&amp;ldquo;宽松&amp;rdquo;转换。</target>
        </trans-unit>
        <trans-unit id="bf18fdac7b04ab28da149802fb908fcdd1f7991b" translate="yes" xml:space="preserve">
          <source>Enable &amp;ldquo;spec&amp;rdquo; transformations for any plugins in this preset that allow them.</source>
          <target state="translated">为该预设中允许它们的所有插件启用&amp;ldquo;规范&amp;rdquo;转换。</target>
        </trans-unit>
        <trans-unit id="b11f719d6fa4c0bac003dbe0c3ae63cc46d2f24e" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;http://2ality.com/2015/12/babel6-loose-mode.html&quot;&gt;&quot;loose&quot; transformations&lt;/a&gt; for any plugins in this preset that allow them.</source>
          <target state="translated">为该预设中允许它们的所有插件启用&lt;a href=&quot;http://2ality.com/2015/12/babel6-loose-mode.html&quot;&gt;&amp;ldquo;宽松&amp;rdquo;转换&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="995b24c935ce57d3d7d50081fb224daec0e4753b" translate="yes" xml:space="preserve">
          <source>Enable code generation</source>
          <target state="translated">启用代码生成</target>
        </trans-unit>
        <trans-unit id="0177a0537f1d88fd1ce91263a016aa6a0440e5bd" translate="yes" xml:space="preserve">
          <source>Enable generating source maps</source>
          <target state="translated">启用生成源地图</target>
        </trans-unit>
        <trans-unit id="b82b62b38226b4638cbb7a8cf22519fcbbf1fbd8" translate="yes" xml:space="preserve">
          <source>Enable more spec compliant, but potentially slower, transformations for any plugins in this preset that support them.</source>
          <target state="translated">为该预设中支持的任何插件启用更符合规范但可能更慢的转换。</target>
        </trans-unit>
        <trans-unit id="35a26baaf04b4f73ed272409028196f0af629883" translate="yes" xml:space="preserve">
          <source>Enable this to forcibly syntax highlight the code as JavaScript (for non-terminals); overrides &lt;code&gt;highlightCode&lt;/code&gt;.</source>
          <target state="translated">启用此选项可以强制语法将代码突出显示为JavaScript（对于非终端）；覆盖 &lt;code&gt;highlightCode&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fbc30c181cb96ea046b0c65058d4ac71ab4a95c" translate="yes" xml:space="preserve">
          <source>Enable transformation of ES module syntax to another module type. Note that &lt;code&gt;cjs&lt;/code&gt; is just an alias for &lt;code&gt;commonjs&lt;/code&gt;.</source>
          <target state="translated">启用将ES模块语法转换为其他模块类型的功能。请注意， &lt;code&gt;cjs&lt;/code&gt; 只是 &lt;code&gt;commonjs&lt;/code&gt; 的别名。</target>
        </trans-unit>
        <trans-unit id="34a3e69595f5caad0c407c49f5933fd7b1614ef8" translate="yes" xml:space="preserve">
          <source>Enable transformation of ES6 module syntax to another module type.</source>
          <target state="translated">允许将ES6模块语法转换为另一种模块类型。</target>
        </trans-unit>
        <trans-unit id="d6b855ae2744ae36716fe740b8a3996585f285c6" translate="yes" xml:space="preserve">
          <source>Enabled by default</source>
          <target state="translated">默认为启用。</target>
        </trans-unit>
        <trans-unit id="a2e92a80ca0dd2acd9c0998067300ac1543f7e72" translate="yes" xml:space="preserve">
          <source>Enables compilation of TypeScript namespaces.</source>
          <target state="translated">启用TypeScript命名空间的编译。</target>
        </trans-unit>
        <trans-unit id="a4163843ef6f60b43a2144fcaa64d9e7c13083c8" translate="yes" xml:space="preserve">
          <source>Enables module ID generation.</source>
          <target state="translated">启用模块ID生成。</target>
        </trans-unit>
        <trans-unit id="6b8b8be9e032757e3d02fa8a30f108ed7fa64ff7" translate="yes" xml:space="preserve">
          <source>Enabling this option will assume that what you want to destructure is an array and won't use &lt;code&gt;Array.from&lt;/code&gt; on other iterables.</source>
          <target state="translated">启用此选项将假定您要解构的是数组，并且不会在其他可迭代 &lt;code&gt;Array.from&lt;/code&gt; 上使用Array.from。</target>
        </trans-unit>
        <trans-unit id="d24b486fd7141d5180b9ec3e15f0e99f080d4bb3" translate="yes" xml:space="preserve">
          <source>Enabling this option will use &lt;code&gt;Object.assign&lt;/code&gt; directly instead of the Babel's &lt;code&gt;extends&lt;/code&gt; helper.</source>
          <target state="translated">启用此选项将直接使用 &lt;code&gt;Object.assign&lt;/code&gt; 而不是Babel的 &lt;code&gt;extends&lt;/code&gt; 助手。</target>
        </trans-unit>
        <trans-unit id="284ad5162cbe960e54ea19bcf0f6b1b3c680d5fa" translate="yes" xml:space="preserve">
          <source>Enabling this option will use Babel's &lt;code&gt;extends&lt;/code&gt; helper, which is basically the same as &lt;code&gt;Object.assign&lt;/code&gt; (see &lt;code&gt;useBuiltIns&lt;/code&gt; below to use it directly).</source>
          <target state="translated">启用此选项将使用Babel的 &lt;code&gt;extends&lt;/code&gt; 助手，该助手与 &lt;code&gt;Object.assign&lt;/code&gt; 基本上相同（请参见下面的 &lt;code&gt;useBuiltIns&lt;/code&gt; 直接使用它）。</target>
        </trans-unit>
        <trans-unit id="e68e13a0a8c34ae2cc260e1f6fce7aeb8774fa55" translate="yes" xml:space="preserve">
          <source>Ensure function declarations at the block level are block scoped</source>
          <target state="translated">确保区块级的函数声明在区块范围内。</target>
        </trans-unit>
        <trans-unit id="879685f604c191805daedbd37a31e493be710fa8" translate="yes" xml:space="preserve">
          <source>Ensure that reserved words are quoted in object property keys</source>
          <target state="translated">确保在对象属性键中引用保留字。</target>
        </trans-unit>
        <trans-unit id="31e783eed8ed2cc6e02195ff112e75ba570cf5df" translate="yes" xml:space="preserve">
          <source>Ensure that reserved words are quoted in property accesses</source>
          <target state="translated">确保在属性访问中引用保留字。</target>
        </trans-unit>
        <trans-unit id="61eaed52f8ecb1df8e5e9bf29aa7eff665040732" translate="yes" xml:space="preserve">
          <source>Env preset</source>
          <target state="translated">环境预设</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">环境变量</target>
        </trans-unit>
        <trans-unit id="18666207ebdd98b91b64afab0628ba157e1d4d1c" translate="yes" xml:space="preserve">
          <source>Eval transform</source>
          <target state="translated">评价变换</target>
        </trans-unit>
        <trans-unit id="82d6c7305385edce344c780d5e3c7f2d515b6f3f" translate="yes" xml:space="preserve">
          <source>Evaluate code.</source>
          <target state="translated">评估代码。</target>
        </trans-unit>
        <trans-unit id="8e65b3ba405f82bd625764a31d53f37e0a72eff8" translate="yes" xml:space="preserve">
          <source>Evaluate script</source>
          <target state="translated">脚本评估</target>
        </trans-unit>
        <trans-unit id="1b674a599ccbcb7307fee7ac748d6aa6d7a5bf12" translate="yes" xml:space="preserve">
          <source>Evaluate script and print result</source>
          <target state="translated">评估脚本并打印结果</target>
        </trans-unit>
        <trans-unit id="f2f7dbdf271ec6862cd0a294841f4e2372f7df81" translate="yes" xml:space="preserve">
          <source>Even if &lt;code&gt;['@babel/plugin-transform-runtime', { helpers: true, polyfill: false }]&lt;/code&gt; is specified, it might still break, since &lt;code&gt;helpers&lt;/code&gt; come precompiled.</source>
          <target state="translated">即使指定了 &lt;code&gt;['@babel/plugin-transform-runtime', { helpers: true, polyfill: false }]&lt;/code&gt; ，它也可能会中断，因为 &lt;code&gt;helpers&lt;/code&gt; 是预先编译的。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="4edbe57adbbcf1d065cfea8f04b7750a122dd9fb" translate="yes" xml:space="preserve">
          <source>Example environments: &lt;code&gt;chrome&lt;/code&gt;, &lt;code&gt;opera&lt;/code&gt;, &lt;code&gt;edge&lt;/code&gt;, &lt;code&gt;firefox&lt;/code&gt;, &lt;code&gt;safari&lt;/code&gt;, &lt;code&gt;ie&lt;/code&gt;, &lt;code&gt;ios&lt;/code&gt;, &lt;code&gt;android&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;electron&lt;/code&gt;.</source>
          <target state="translated">实施例的环境中： &lt;code&gt;chrome&lt;/code&gt; ， &lt;code&gt;opera&lt;/code&gt; ， &lt;code&gt;edge&lt;/code&gt; ， &lt;code&gt;firefox&lt;/code&gt; ， &lt;code&gt;safari&lt;/code&gt; ， &lt;code&gt;ie&lt;/code&gt; ， &lt;code&gt;ios&lt;/code&gt; ， &lt;code&gt;android&lt;/code&gt; ， &lt;code&gt;node&lt;/code&gt; ， &lt;code&gt;electron&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="b718f8c3a83788b1b360cc38380401a994fb4892" translate="yes" xml:space="preserve">
          <source>Experimental</source>
          <target state="translated">Experimental</target>
        </trans-unit>
        <trans-unit id="2b46de0891d8c6527ecec289188088f7d38b1674" translate="yes" xml:space="preserve">
          <source>Exponentiation operator transform</source>
          <target state="translated">指数运算符变换</target>
        </trans-unit>
        <trans-unit id="c1360f7150e06159acd385fcaa1a3b3f3a7721c6" translate="yes" xml:space="preserve">
          <source>Export extensions transform</source>
          <target state="translated">出口扩展转换</target>
        </trans-unit>
        <trans-unit id="ef4f2d906c0cb61e67db3aeaf752f25009fffe63" translate="yes" xml:space="preserve">
          <source>Export with various targets</source>
          <target state="translated">有不同目标的出口</target>
        </trans-unit>
        <trans-unit id="c52ea525e90c972efd13641737386b8eea5bb842" translate="yes" xml:space="preserve">
          <source>External helpers</source>
          <target state="translated">外部助手</target>
        </trans-unit>
        <trans-unit id="5572beaeea85c2ad7ddba76f355105cf25411574" translate="yes" xml:space="preserve">
          <source>Externalise references to helpers and builtins, automatically polyfilling your code without polluting globals</source>
          <target state="translated">外部化对帮助程序和内置程序的引用,自动填充你的代码而不污染globals。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">Feature</target>
        </trans-unit>
        <trans-unit id="8a9aac8f2d975be70b7b2fa45117e5d98c4ec83e" translate="yes" xml:space="preserve">
          <source>File-relative configuration</source>
          <target state="translated">文件相关配置</target>
        </trans-unit>
        <trans-unit id="8572ede0fccccc0268e1cf19fdb3fffee40b1a8a" translate="yes" xml:space="preserve">
          <source>Filename for use in errors etc.</source>
          <target state="translated">错误等情况下使用的文件名。</target>
        </trans-unit>
        <trans-unit id="d009a3fc36f76a7db4af1f0ea2014883b1cd9ff1" translate="yes" xml:space="preserve">
          <source>Filename relative to &lt;code&gt;sourceRoot&lt;/code&gt;.</source>
          <target state="translated">相对于 &lt;code&gt;sourceRoot&lt;/code&gt; 的文件名。</target>
        </trans-unit>
        <trans-unit id="f963ded8bfd9916d4dcf8b2543c97db391e2d256" translate="yes" xml:space="preserve">
          <source>Finally, with the plugin options set to:</source>
          <target state="translated">最后,在插件选项设置为。</target>
        </trans-unit>
        <trans-unit id="36fa62a2d9fd498605ae54a4091e390aa16283ec" translate="yes" xml:space="preserve">
          <source>Flow Comments Blog Post</source>
          <target state="translated">流量评论博客文章</target>
        </trans-unit>
        <trans-unit id="fd8e4a0af9dc6095d3b37351d60c7e91ea3e22ff" translate="yes" xml:space="preserve">
          <source>Flow comments</source>
          <target state="translated">流程评论</target>
        </trans-unit>
        <trans-unit id="cbbed77d0739683a8576e06e26b0471bc4e6fc44" translate="yes" xml:space="preserve">
          <source>Flow preset</source>
          <target state="translated">流量预设</target>
        </trans-unit>
        <trans-unit id="c886e17da212b69a49859d1bd49a6e7c1f78ab5e" translate="yes" xml:space="preserve">
          <source>Flow will only parse Flow-specific features if a &lt;code&gt;@flow&lt;/code&gt; pragma is present atop the file, or the &lt;a href=&quot;https://flow.org/en/docs/config/options/#toc-all-boolean&quot;&gt;&lt;code&gt;all&lt;/code&gt; option&lt;/a&gt; is set inside the &lt;code&gt;.flowconfig&lt;/code&gt;.</source>
          <target state="translated">仅当文件顶部出现 &lt;code&gt;@flow&lt;/code&gt; 编译指示，或者在 &lt;code&gt;.flowconfig&lt;/code&gt; 中设置了&lt;a href=&quot;https://flow.org/en/docs/config/options/#toc-all-boolean&quot;&gt; &lt;code&gt;all&lt;/code&gt; 选项时&lt;/a&gt;，Flow才会解析特定于Flow的功能。</target>
        </trans-unit>
        <trans-unit id="a7d37a72a29f242d707eacb183017f2e6eeedced" translate="yes" xml:space="preserve">
          <source>Following is a table of the options you can use:</source>
          <target state="translated">以下是您可以使用的选项表。</target>
        </trans-unit>
        <trans-unit id="4dafb5167cffea3269e75a6e7b4fad6e4a6e2709" translate="yes" xml:space="preserve">
          <source>For an awesome tutorial on compilers, check out &lt;a href=&quot;https://github.com/thejameskyle/the-super-tiny-compiler&quot;&gt;the-super-tiny-compiler&lt;/a&gt;, which also explains how Babel itself works on a high level.</source>
          <target state="translated">要获得关于编译器的出色教程，请查看&lt;a href=&quot;https://github.com/thejameskyle/the-super-tiny-compiler&quot;&gt;the-super-tiny-compiler&lt;/a&gt;，它还解释了Babel本身如何在更高层次上工作。</target>
        </trans-unit>
        <trans-unit id="84f91624f5a40203ca6d2b0478e19bee4e27f7c0" translate="yes" xml:space="preserve">
          <source>For an awesome/simple tutorial on compilers, check out &lt;a href=&quot;https://github.com/thejameskyle/the-super-tiny-compiler&quot;&gt;the-super-tiny-compiler&lt;/a&gt;, which also explains how Babel itself works on a high level.</source>
          <target state="translated">要获得关于编译器的出色/简单教程，请查看&lt;a href=&quot;https://github.com/thejameskyle/the-super-tiny-compiler&quot;&gt;super-tiny-compiler&lt;/a&gt;，它也解释了Babel本身如何在更高层次上工作。</target>
        </trans-unit>
        <trans-unit id="8384f6db3de68bd7b1bcb0677c95c6548088181e" translate="yes" xml:space="preserve">
          <source>For an explanation of the consequences of using either, see &lt;a href=&quot;http://2ality.com/2012/08/property-definition-assignment.html&quot;&gt;Definition vs. Assignment&lt;/a&gt; (TL;DR in Part 5)</source>
          <target state="translated">有关使用这两种方法的后果的解释，请参见&amp;ldquo;&lt;a href=&quot;http://2ality.com/2012/08/property-definition-assignment.html&quot;&gt;定义与赋值&amp;rdquo;&lt;/a&gt;（第5部分中的TL; DR）。</target>
        </trans-unit>
        <trans-unit id="ec8e3252a28275d83854436f93f1bede96492da5" translate="yes" xml:space="preserve">
          <source>For available parser options, see &lt;a href=&quot;../babel-parser/index#options&quot;&gt;Parser Options&lt;/a&gt;.</source>
          <target state="translated">有关可用的解析器选项，请参阅&lt;a href=&quot;../babel-parser/index#options&quot;&gt;解析器选项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9795501a2eaea2bdf5f0d9a97d481381a12d7af8" translate="yes" xml:space="preserve">
          <source>For await example</source>
          <target state="translated">对于等待的例子</target>
        </trans-unit>
        <trans-unit id="451fe73f55a51e8e820ea799ab11bff7fab9864d" translate="yes" xml:space="preserve">
          <source>For browser- or Electron-based projects, we recommend using a &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;&lt;code&gt;.browserslistrc&lt;/code&gt;&lt;/a&gt; file to specify targets. You may already have this configuration file as it is used by many tools in the ecosystem, like &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;autoprefixer&lt;/a&gt;, &lt;a href=&quot;https://stylelint.io/&quot;&gt;stylelint&lt;/a&gt;, &lt;a href=&quot;https://github.com/amilajack/eslint-plugin-compat&quot;&gt;eslint-plugin-compat&lt;/a&gt; and many others.</source>
          <target state="translated">对于基于浏览器或Electron的项目，建议使用&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt; &lt;code&gt;.browserslistrc&lt;/code&gt; &lt;/a&gt;文件指定目标。您可能已经有了此配置文件，因为该文件已被生态系统中的许多工具所使用，例如&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;autoprefixer&lt;/a&gt;，&lt;a href=&quot;https://stylelint.io/&quot;&gt;stylelint&lt;/a&gt;，&lt;a href=&quot;https://github.com/amilajack/eslint-plugin-compat&quot;&gt;eslint-plugin-compat&lt;/a&gt;等。</target>
        </trans-unit>
        <trans-unit id="c438a2274183e0ca9c491ffca8806398a978f99a" translate="yes" xml:space="preserve">
          <source>For classes that have &lt;code&gt;super&lt;/code&gt;s, the super class won&amp;rsquo;t resolve correctly. You can get around this by enabling the &lt;code&gt;loose&lt;/code&gt; option in the &lt;a href=&quot;../../plugins/transform-es2015-classes/index&quot;&gt;es2015-classes&lt;/a&gt; plugin.</source>
          <target state="translated">对于具有 &lt;code&gt;super&lt;/code&gt; 的类，super类将无法正确解析。您可以通过启用&lt;a href=&quot;../../plugins/transform-es2015-classes/index&quot;&gt;es2015-classes&lt;/a&gt;插件中的 &lt;code&gt;loose&lt;/code&gt; 选项来解决此问题。</target>
        </trans-unit>
        <trans-unit id="544fdfbfc353245327ec11dc33174d191f554c21" translate="yes" xml:space="preserve">
          <source>For compatibility reasons, &lt;code&gt;.babelrc&lt;/code&gt; is an alias for &lt;code&gt;.babelrc.json&lt;/code&gt;.</source>
          <target state="translated">出于兼容性考虑， &lt;code&gt;.babelrc&lt;/code&gt; 是一个别名 &lt;code&gt;.babelrc.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d0ca80948d677b21fb3093cd15d1dc5891afdef" translate="yes" xml:space="preserve">
          <source>For convenience, you can use &lt;code&gt;&quot;node&quot;: &quot;current&quot;&lt;/code&gt; to only include the necessary polyfills and transforms for the Node.js version that you use to run Babel:</source>
          <target state="translated">为了方便起见，您可以使用 &lt;code&gt;&quot;node&quot;: &quot;current&quot;&lt;/code&gt; 仅包括用于运行Babel的Node.js版本所需的polyfill和转换：</target>
        </trans-unit>
        <trans-unit id="c66a9f49dc9e914a264eddfa5154c75b6423020c" translate="yes" xml:space="preserve">
          <source>For detailed information please check out &lt;a href=&quot;http://2ality.com/2016/10/rest-spread-properties.html#spreading-objects-versus-objectassign&quot;&gt;Spread VS. Object.assign&lt;/a&gt; and &lt;a href=&quot;http://exploringjs.com/es6/ch_oop-besides-classes.html#sec_assigning-vs-defining-properties&quot;&gt;Assigning VS. defining properties&lt;/a&gt;.</source>
          <target state="translated">有关详细信息，请查看&lt;a href=&quot;http://2ality.com/2016/10/rest-spread-properties.html#spreading-objects-versus-objectassign&quot;&gt;SpreadVS。Object.assign&lt;/a&gt;和&lt;a href=&quot;http://exploringjs.com/es6/ch_oop-besides-classes.html#sec_assigning-vs-defining-properties&quot;&gt;分配VS。定义属性&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fd632863e11d45e4ae11612cf65a6f172e867e1f" translate="yes" xml:space="preserve">
          <source>For dynamic import support (&lt;code&gt;import('./lazy.js').then(m =&amp;gt; ...)&lt;/code&gt;), enable the &lt;a href=&quot;../babel-plugin-syntax-dynamic-import/index&quot;&gt;@babel/plugin-syntax-dynamic-import&lt;/a&gt; plugin before this one.</source>
          <target state="translated">为了获得动态导入支持（ &lt;code&gt;import('./lazy.js').then(m =&amp;gt; ...)&lt;/code&gt; ），请在此插件之前启用&lt;a href=&quot;../babel-plugin-syntax-dynamic-import/index&quot;&gt;@ babel / plugin-syntax-dynamic-import&lt;/a&gt;插件。</target>
        </trans-unit>
        <trans-unit id="9d84fdfec2a0e7549fecc0e4321b24470927c607" translate="yes" xml:space="preserve">
          <source>For example if you depend on &lt;code&gt;@babel/runtime-corejs2@7.7.4&lt;/code&gt; you can transpile your code with</source>
          <target state="translated">例如，如果您依赖 &lt;code&gt;@babel/runtime-corejs2@7.7.4&lt;/code&gt; ，则可以使用以下命令转换代码</target>
        </trans-unit>
        <trans-unit id="4ec77ecd46953385c63fefa2746fddd05a762fec" translate="yes" xml:space="preserve">
          <source>For example, Node 4 supports native classes but not spread. If &lt;code&gt;super&lt;/code&gt; is used with a spread argument, then the &lt;code&gt;@babel/plugin-transform-classes&lt;/code&gt; transform needs to be &lt;code&gt;include&lt;/code&gt;d, as it is not possible to transpile a spread with &lt;code&gt;super&lt;/code&gt; otherwise.</source>
          <target state="translated">例如，节点4支持本机类，但不扩展。如果将 &lt;code&gt;super&lt;/code&gt; 与spread参数一起使用，则 &lt;code&gt;@babel/plugin-transform-classes&lt;/code&gt; 转换需要 &lt;code&gt;include&lt;/code&gt; d，否则将无法使用 &lt;code&gt;super&lt;/code&gt; 转换spread 。</target>
        </trans-unit>
        <trans-unit id="d778d381269b567ffa293214569edb2f9378c0d6" translate="yes" xml:space="preserve">
          <source>For example, Node 4 supports native classes but not spread. If &lt;code&gt;super&lt;/code&gt; is used with a spread argument, then the &lt;code&gt;transform-es2015-classes&lt;/code&gt; transform needs to be &lt;code&gt;include&lt;/code&gt;d, as it is not possible to transpile a spread with &lt;code&gt;super&lt;/code&gt; otherwise.</source>
          <target state="translated">例如，节点4支持本机类，但不扩展。如果将 &lt;code&gt;super&lt;/code&gt; 与spread参数一起使用，则 &lt;code&gt;transform-es2015-classes&lt;/code&gt; 转换需要 &lt;code&gt;include&lt;/code&gt; d，否则将无法使用 &lt;code&gt;super&lt;/code&gt; 转换spread 。</target>
        </trans-unit>
        <trans-unit id="c31a87f5dfc202290bd7b4df48b8c41c1b734b52" translate="yes" xml:space="preserve">
          <source>For example, a monorepo setup that wishes to allow individual packages to have their own configs might want to do</source>
          <target state="translated">例如,一个单机版的设置,如果希望允许单个软件包拥有自己的配置,可以这样做。</target>
        </trans-unit>
        <trans-unit id="cb803de46edfdbfc3949c13dbe32514787c5495b" translate="yes" xml:space="preserve">
          <source>For example, here is the &lt;code&gt;classCallCheck&lt;/code&gt; helper with &lt;code&gt;useESModules&lt;/code&gt; disabled:</source>
          <target state="translated">例如，这是禁用了 &lt;code&gt;classCallCheck&lt;/code&gt; 帮助 &lt;code&gt;useESModules&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0b89f36b56f69bfa15e45e682cc15fad9b2fda33" translate="yes" xml:space="preserve">
          <source>For example, if you are building on Node 6, arrow functions won&amp;rsquo;t be converted, but they will if you build on Node 0.12.</source>
          <target state="translated">例如，如果您在Node 6上构建，则不会转换箭头函数，但是如果您在Node 0.12上构建，则将转换箭头函数。</target>
        </trans-unit>
        <trans-unit id="6fc21edf383ecfa27827beddb812726e5371dc96" translate="yes" xml:space="preserve">
          <source>For example, to only include polyfills and code transforms needed for users whose browsers have &amp;gt;0.25% market share (ignoring browsers without security updates like IE 10 and BlackBerry):</source>
          <target state="translated">例如，仅包括浏览器具有&amp;gt; 0.25％市场份额的用户所需的polyfill和代码转换（忽略没有安全更新的浏览器，如IE 10和BlackBerry）：</target>
        </trans-unit>
        <trans-unit id="6739842f0889cba71fbbcf23762fbb95b6b41625" translate="yes" xml:space="preserve">
          <source>For example, with &lt;code&gt;core-js@3&lt;/code&gt;:</source>
          <target state="translated">例如，使用 &lt;code&gt;core-js@3&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="84577557d6fbf93a42504d3933d32d08ab52b738" translate="yes" xml:space="preserve">
          <source>For example, with the class transform (without loose mode):</source>
          <target state="translated">例如,用类转换(无松散模式)。</target>
        </trans-unit>
        <trans-unit id="c77aaa108dd24b1c2cdb55e498e27525c2952597" translate="yes" xml:space="preserve">
          <source>For example, without either of the above set, the following call expression with a type argument:</source>
          <target state="translated">例如,如果不使用上述任何一个集合,就可以使用以下带有类型参数的调用表达式。</target>
        </trans-unit>
        <trans-unit id="9b8183ad2092b5333005c891b940845d2dfd892d" translate="yes" xml:space="preserve">
          <source>For example, without either of the above, the following call expression with a type argument:</source>
          <target state="translated">例如,如果不使用上述任何一种方法,就可以使用以下带有类型参数的调用表达式。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如:</target>
        </trans-unit>
        <trans-unit id="b26309ebd034ae1978f08904e994b8b5aa3dd1a5" translate="yes" xml:space="preserve">
          <source>For example: We push a fix to early error on something like &lt;a href=&quot;https://github.com/babel/babylon/pull/107&quot;&gt;#107&lt;/a&gt; - multiple default exports per file. That would be considered a bug fix even though it would cause a build to fail.</source>
          <target state="translated">例如：我们将问题修复到&lt;a href=&quot;https://github.com/babel/babylon/pull/107&quot;&gt;＃107之&lt;/a&gt;类的早期错误-每个文件有多个默认导出。即使它将导致构建失败，也可以将其视为错误修复。</target>
        </trans-unit>
        <trans-unit id="6bdacd8ed427d67a3dec51f944d4f975481f1f2c" translate="yes" xml:space="preserve">
          <source>For functions, this removes return arguments that evaluate to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">对于函数，这将删除返回值为 &lt;code&gt;undefined&lt;/code&gt; 的返回参数。</target>
        </trans-unit>
        <trans-unit id="1c983ad96a482c68194be60017ba238e5e648b8f" translate="yes" xml:space="preserve">
          <source>For instance, &lt;a href=&quot;../babel-plugin-transform-runtime/index&quot;&gt;&lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt;&lt;/a&gt; relies on the type of the current document to decide whether to insert an &lt;code&gt;import&lt;/code&gt; declaration, or a &lt;code&gt;require()&lt;/code&gt; call. &lt;a href=&quot;../babel-preset-env/index&quot;&gt;&lt;code&gt;@babel/preset-env&lt;/code&gt;&lt;/a&gt; also does the same for its &lt;a href=&quot;../babel-preset-env/index#usebuiltins&quot;&gt;&lt;code&gt;&quot;useBuiltIns&quot;&lt;/code&gt;&lt;/a&gt; option. Since Babel defaults to treating files are ES modules, generally these plugins/presets will insert &lt;code&gt;import&lt;/code&gt; statements. Setting the correct &lt;code&gt;sourceType&lt;/code&gt; can be important because having the wrong type can lead to cases where Babel would insert &lt;code&gt;import&lt;/code&gt; statements into files that are meant to be CommonJS files. This can be particularly important in projects where compilation of &lt;code&gt;node_modules&lt;/code&gt; dependencies is being performed, because inserting an &lt;code&gt;import&lt;/code&gt; statements can cause Webpack and other tooling to see a file as an ES module, breaking what would otherwise be a functional CommonJS file.</source>
          <target state="translated">例如，&lt;a href=&quot;../babel-plugin-transform-runtime/index&quot;&gt; &lt;code&gt;@babel/plugin-transform-runtime&lt;/code&gt; &lt;/a&gt;依赖于当前文档的类型来决定是插入 &lt;code&gt;import&lt;/code&gt; 声明还是 &lt;code&gt;require()&lt;/code&gt; 调用。&lt;a href=&quot;../babel-preset-env/index&quot;&gt; &lt;code&gt;@babel/preset-env&lt;/code&gt; &lt;/a&gt;也对其&lt;a href=&quot;../babel-preset-env/index#usebuiltins&quot;&gt; &lt;code&gt;&quot;useBuiltIns&quot;&lt;/code&gt; &lt;/a&gt;选项执行相同的操作。由于Babel默认将文件视为ES模块，因此通常这些插件/预设将插入 &lt;code&gt;import&lt;/code&gt; 语句。设置正确的 &lt;code&gt;sourceType&lt;/code&gt; 可能很重要，因为错误的类型可能导致Babel将 &lt;code&gt;import&lt;/code&gt; 语句插入本应为CommonJS文件的文件中的情况。这在编译 &lt;code&gt;node_modules&lt;/code&gt; 的项目中尤其重要正在执行依赖项，因为插入 &lt;code&gt;import&lt;/code&gt; 语句会导致Webpack和其他工具将文件视为ES模块，从而破坏了原本可以正常运行的CommonJS文件。</target>
        </trans-unit>
        <trans-unit id="2ed151066b90af07e212aabbfb8187e3783f2b4b" translate="yes" xml:space="preserve">
          <source>For more code generator options, see &lt;a href=&quot;../babel-generator/index#options&quot;&gt;Generator Options&lt;/a&gt;.</source>
          <target state="translated">有关更多代码生成器选项，请参见&lt;a href=&quot;../babel-generator/index#options&quot;&gt;生成器选项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d59a50eccfe209b0fecea0d21be2d83a04de7829" translate="yes" xml:space="preserve">
          <source>For more info, check out the &lt;a href=&quot;https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/user-handbook.md#making-your-own-preset&quot;&gt;babel handbook&lt;/a&gt; section on presets or just look at the &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-preset-es2015&quot;&gt;es2015&lt;/a&gt; preset repo as an example.</source>
          <target state="translated">有关更多信息，请查看关于预设的&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/user-handbook.md#making-your-own-preset&quot;&gt;babel手册&lt;/a&gt;部分，或仅以&lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-preset-es2015&quot;&gt;es2015&lt;/a&gt;预设存储库为例。</target>
        </trans-unit>
        <trans-unit id="08fd9043006f6d12eea7d4a544523dbeabbdec1d" translate="yes" xml:space="preserve">
          <source>For more info, check out the setup page on the &lt;a href=&quot;http://babeljs.io/docs/setup/&quot;&gt;cli&lt;/a&gt; and the &lt;a href=&quot;../../usage/cli/index&quot;&gt;usage&lt;/a&gt; docs.</source>
          <target state="translated">有关更多信息，请查看&lt;a href=&quot;http://babeljs.io/docs/setup/&quot;&gt;cli&lt;/a&gt;和&lt;a href=&quot;../../usage/cli/index&quot;&gt;用法&lt;/a&gt;文档上的设置页面。</target>
        </trans-unit>
        <trans-unit id="7562ded98d546e0e323141731cda6b3788a39e4e" translate="yes" xml:space="preserve">
          <source>For more information on setting options for a preset, refer to the &lt;a href=&quot;../index#plugin-preset-options&quot;&gt;plugin/preset options&lt;/a&gt; documentation.</source>
          <target state="translated">有关为预设设置选项的更多信息，请参阅&lt;a href=&quot;../index#plugin-preset-options&quot;&gt;插件/预设选项&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="6cc0e9174670f7c2b9c49acf889fa995279b2029" translate="yes" xml:space="preserve">
          <source>For more information on setting options for a preset, refer to the &lt;a href=&quot;https://babeljs.io/docs/en/presets#preset-options&quot;&gt;preset options&lt;/a&gt; documentation.</source>
          <target state="translated">有关为预设设置选项的更多信息，请参阅&lt;a href=&quot;https://babeljs.io/docs/en/presets#preset-options&quot;&gt;预设选项&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="8eb7903a6bc0170453eba6c09190d706e990e927" translate="yes" xml:space="preserve">
          <source>For more information, be sure to check out the &lt;a href=&quot;https://github.com/tc39/proposals&quot;&gt;current TC39 proposals&lt;/a&gt; and its &lt;a href=&quot;https://tc39.github.io/process-document&quot;&gt;process document&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请确保查看&lt;a href=&quot;https://github.com/tc39/proposals&quot;&gt;当前的TC39提案&lt;/a&gt;及其&lt;a href=&quot;https://tc39.github.io/process-document&quot;&gt;过程文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e327f5ea707424504135e8c053376d205f3282f3" translate="yes" xml:space="preserve">
          <source>For more information, check out: &lt;a href=&quot;https://github.com/tc39/proposal-decorators/issues/69&quot;&gt;tc39/proposal-decorators#69&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请查看：&lt;a href=&quot;https://github.com/tc39/proposal-decorators/issues/69&quot;&gt;tc39 / proposal-decorators＃69&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d3aac0276aff21d5bc9ae7bacf5af861b2deb63e" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;#core-js-aliasing&quot;&gt;&lt;code&gt;core-js&lt;/code&gt; aliasing&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;#core-js-aliasing&quot;&gt; &lt;code&gt;core-js&lt;/code&gt; aliasing&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac60b5b5455d98083d03e674ccd4ee45f8d7914d" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;#helper-aliasing&quot;&gt;Helper aliasing&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;#helper-aliasing&quot;&gt;辅助别名&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cdc6ce1cb40bcb759031301d614dedf2cbadf4ae" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;#regenerator-aliasing&quot;&gt;Regenerator aliasing&lt;/a&gt;.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;#regenerator-aliasing&quot;&gt;Regenerator别名&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f59878bcb3d290c970d0f2ea42f3e1bb7be00987" translate="yes" xml:space="preserve">
          <source>For specifying no options, these are all equivalent:</source>
          <target state="translated">对于没有指定选项,这些都是等价的。</target>
        </trans-unit>
        <trans-unit id="981bac65670aaf2ca86eb9a1dbd56507e593d91c" translate="yes" xml:space="preserve">
          <source>For upgrade instructions, see &lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-preset-stage-3/README.md&quot;&gt;the README&lt;/a&gt;.</source>
          <target state="translated">有关升级说明，请参见&lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-preset-stage-3/README.md&quot;&gt;自述文件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="786901fb39a846fe2d057b4f5102c31239140356" translate="yes" xml:space="preserve">
          <source>Forcibly enables &lt;code&gt;jsx&lt;/code&gt; parsing. Otherwise angle brackets will be treated as TypeScript's legacy type assertion &lt;code&gt;var foo = &amp;lt;string&amp;gt;bar;&lt;/code&gt;. Also, &lt;code&gt;isTSX: true&lt;/code&gt; requires &lt;code&gt;allExtensions: true&lt;/code&gt;.</source>
          <target state="translated">强制启用 &lt;code&gt;jsx&lt;/code&gt; 解析。否则，尖括号将被视为TypeScript的旧式类型断言 &lt;code&gt;var foo = &amp;lt;string&amp;gt;bar;&lt;/code&gt; 。另外， &lt;code&gt;isTSX: true&lt;/code&gt; 需要 &lt;code&gt;allExtensions: true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="37240f7a705019848ad86ef3f328d102f3dad9ce" translate="yes" xml:space="preserve">
          <source>Forcibly enables &lt;code&gt;jsx&lt;/code&gt; parsing. Otherwise angle brackets will be treated as typescript's legacy type assertion &lt;code&gt;var foo = &amp;lt;string&amp;gt;bar;&lt;/code&gt;. Also, &lt;code&gt;isTSX: true&lt;/code&gt; requires &lt;code&gt;allExtensions: true&lt;/code&gt;.</source>
          <target state="translated">强制启用 &lt;code&gt;jsx&lt;/code&gt; 解析。否则，尖括号将被视为打字稿的旧式类型断言 &lt;code&gt;var foo = &amp;lt;string&amp;gt;bar;&lt;/code&gt; 。另外， &lt;code&gt;isTSX: true&lt;/code&gt; 需要 &lt;code&gt;allExtensions: true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d45089940ca38bf48726ea01710791bffa1dee6e" translate="yes" xml:space="preserve">
          <source>Fragments</source>
          <target state="translated">Fragments</target>
        </trans-unit>
        <trans-unit id="665f3dbcc01fec0bb52040a39b5bff0a8a67594f" translate="yes" xml:space="preserve">
          <source>Full name (&lt;code&gt;string&lt;/code&gt;): &lt;code&gt;&quot;es.math.sign&quot;&lt;/code&gt;</source>
          <target state="translated">全名（ &lt;code&gt;string&lt;/code&gt; ）： &lt;code&gt;&quot;es.math.sign&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0148e7de1e715ba3cb83bd3285965d0cc3b14636" translate="yes" xml:space="preserve">
          <source>Function bind transform</source>
          <target state="translated">函数bind transform</target>
        </trans-unit>
        <trans-unit id="303ccd19d095aa1d86690069e095cfac434e9b52" translate="yes" xml:space="preserve">
          <source>Function that takes a comment (as a string) and returns &lt;code&gt;true&lt;/code&gt; if the comment should be included in the output. By default, comments are included if &lt;code&gt;opts.comments&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; or if &lt;code&gt;opts.minified&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; and the comment contains &lt;code&gt;@preserve&lt;/code&gt; or &lt;code&gt;@license&lt;/code&gt;</source>
          <target state="translated">该函数接受注释（作为字符串），如果注释应包含在输出中，则返回 &lt;code&gt;true&lt;/code&gt; 。默认情况下，如果 &lt;code&gt;opts.comments&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;opts.minified&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; 且注释包含 &lt;code&gt;@preserve&lt;/code&gt; 或 &lt;code&gt;@license&lt;/code&gt; ，则包含注释</target>
        </trans-unit>
        <trans-unit id="f204b7b0f9351f1334f9d37c0aa903406000e84b" translate="yes" xml:space="preserve">
          <source>Generate an AST from a string template</source>
          <target state="translated">从字符串模板生成一个AST</target>
        </trans-unit>
        <trans-unit id="a9d261f07ef7f16dd35043b2b7ab11ea8167acb9" translate="yes" xml:space="preserve">
          <source>Generate errors that contain a code frame that point to source locations</source>
          <target state="translated">生成包含指向源位置的代码框架的错误。</target>
        </trans-unit>
        <trans-unit id="060fc08765af9f44217d9a16bef1e3208e644e72" translate="yes" xml:space="preserve">
          <source>Getters/setters (8 and below)</source>
          <target state="translated">获取器/设置器(8及以下)</target>
        </trans-unit>
        <trans-unit id="83673fd595ab8088d7991998475db4b3cd5509d2" translate="yes" xml:space="preserve">
          <source>Getting the external helpers</source>
          <target state="translated">获取外部助手</target>
        </trans-unit>
        <trans-unit id="cd12652cc722bda8766a1e079f9f3f148fe3f871" translate="yes" xml:space="preserve">
          <source>Given an &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST&lt;/a&gt;, transform it.</source>
          <target state="translated">给定&lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST&lt;/a&gt;，对其进行转换。</target>
        </trans-unit>
        <trans-unit id="2cc90d1e5ab415a32f60f01243cab0fe96fb32c0" translate="yes" xml:space="preserve">
          <source>Given some code, parse it using Babel's standard behavior. Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.</source>
          <target state="translated">给定一些代码,使用巴别的标准行为来解析它。引用的预设和插件将被加载,从而自动启用可选的语法插件。</target>
        </trans-unit>
        <trans-unit id="b554a1c3b90b2daf3ebca6ba208e382c64c23792" translate="yes" xml:space="preserve">
          <source>Given that, it may be more desirable to rename the &lt;code&gt;.babelrc&lt;/code&gt; to be a &lt;a href=&quot;#project-wide-configuration&quot;&gt;project-wide &quot;babel.config.json&quot;&lt;/a&gt;. As mentioned in the project-wide section above, this may then require explicitly setting &lt;a href=&quot;../options/index#configfile&quot;&gt;&quot;configFile&quot;&lt;/a&gt; since Babel will not find the config file if the working directory isn't correct.</source>
          <target state="translated">鉴于此，可能更希望将 &lt;code&gt;.babelrc&lt;/code&gt; 重命名为&lt;a href=&quot;#project-wide-configuration&quot;&gt;项目范围的&amp;ldquo; babel.config.json&amp;rdquo;&lt;/a&gt;。如以上在项目范围内的部分所述，然后可能需要显式设置&lt;a href=&quot;../options/index#configfile&quot;&gt;&amp;ldquo; configFile&amp;rdquo;，&lt;/a&gt;因为如果工作目录不正确，Babel将找不到配置文件。</target>
        </trans-unit>
        <trans-unit id="f705784a39fbd28748cd9267501e877b17bb3f7a" translate="yes" xml:space="preserve">
          <source>Given the babel-generated module name, return the name to use. Returning a falsy value will use the original &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">给定babel生成的模块名称，返回要使用的名称。返回伪造的值将使用原始 &lt;code&gt;name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d2f433019d0f06a91b3753520b49f5389a533da" translate="yes" xml:space="preserve">
          <source>Given, an &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST&lt;/a&gt;, transform it.</source>
          <target state="translated">给定一个&lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST&lt;/a&gt;，对其进行转换。</target>
        </trans-unit>
        <trans-unit id="6ba3c24b35c7936537b751537cbb26b3fbfdda5c" translate="yes" xml:space="preserve">
          <source>Heavily based on &lt;a href=&quot;https://github.com/marijnh/acorn&quot;&gt;acorn&lt;/a&gt; and &lt;a href=&quot;https://github.com/RReverser/acorn-jsx&quot;&gt;acorn-jsx&lt;/a&gt;, thanks to the awesome work of &lt;a href=&quot;https://github.com/RReverser&quot;&gt;@RReverser&lt;/a&gt; and &lt;a href=&quot;https://github.com/marijnh&quot;&gt;@marijnh&lt;/a&gt;.</source>
          <target state="translated">由于&lt;a href=&quot;https://github.com/RReverser&quot;&gt;@RReverser&lt;/a&gt;和&lt;a href=&quot;https://github.com/marijnh&quot;&gt;@marijnh的出色&lt;/a&gt;工作，因此很大程度上基于&lt;a href=&quot;https://github.com/marijnh/acorn&quot;&gt;acorn&lt;/a&gt;和&lt;a href=&quot;https://github.com/RReverser/acorn-jsx&quot;&gt;acorn- &lt;/a&gt;jsx。</target>
        </trans-unit>
        <trans-unit id="19aa24fd46f662457609d2e59b9bfe78fb9e3603" translate="yes" xml:space="preserve">
          <source>Helper aliasing</source>
          <target state="translated">助手别名</target>
        </trans-unit>
        <trans-unit id="f70ce30769c06bc90e8ea0fa894614948d74f182" translate="yes" xml:space="preserve">
          <source>Helpers are defined in the &lt;code&gt;src/helpers.js&lt;/code&gt; file, and they must be valid modules which follow these guidelines:</source>
          <target state="translated">帮助器在 &lt;code&gt;src/helpers.js&lt;/code&gt; 文件中定义，它们必须是遵循以下准则的有效模块：</target>
        </trans-unit>
        <trans-unit id="b5d94cc76c60ad11c60e27276ac073ddb70e16d2" translate="yes" xml:space="preserve">
          <source>Here are some examples, when applied in a plugin context:</source>
          <target state="translated">这里有一些例子,当应用在一个插件上下文中。</target>
        </trans-unit>
        <trans-unit id="2dfd592d08b432daec99831034be9bedae99ccd1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an online demo.</source>
          <target state="translated">这是一个在线演示。</target>
        </trans-unit>
        <trans-unit id="8b7eca0ceda99dbdd67b1d9a37e281b4c19c8209" translate="yes" xml:space="preserve">
          <source>Here's an example of what that might look like:</source>
          <target state="translated">下面是一个例子,说明这可能是什么样子的。</target>
        </trans-unit>
        <trans-unit id="a36782c348aa6312b50abb41c4a165c777707253" translate="yes" xml:space="preserve">
          <source>Hex Literal</source>
          <target state="translated">十六进制字面意思</target>
        </trans-unit>
        <trans-unit id="ec6a48cccdcd09f70af872e9f27a815af68fdc11" translate="yes" xml:space="preserve">
          <source>Highlight tokens in code snippets in Babel's error messages to make them easier to read.</source>
          <target state="translated">在Babel的错误信息中,高亮显示代码片段中的标记,使其更容易阅读。</target>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">History</target>
        </trans-unit>
        <trans-unit id="14d8fc83d123dc15a9bd58d9f59bd3fbcab99c20" translate="yes" xml:space="preserve">
          <source>Hoists element creation to the top level for subtrees that are fully static, which reduces call to &lt;code&gt;React.createElement&lt;/code&gt; and the resulting allocations. More importantly, it tells React that the subtree hasn&amp;rsquo;t changed so React can completely skip it when reconciling.</source>
          <target state="translated">将元素创建提升到完全静态的子树的顶层，从而减少了对 &lt;code&gt;React.createElement&lt;/code&gt; 的调用和生成的分配。更重要的是，它告诉React子树没有改变，因此React协调时可以完全跳过它。</target>
        </trans-unit>
        <trans-unit id="cbc7eee99a589a4b71bb1820b952d9a1e1767fb0" translate="yes" xml:space="preserve">
          <source>How Does it Work?</source>
          <target state="translated">它是如何工作的?</target>
        </trans-unit>
        <trans-unit id="100cb0b9b76cf128bd36c57de623e9519f3f1a9c" translate="yes" xml:space="preserve">
          <source>How it Works</source>
          <target state="translated">它是如何工作的</target>
        </trans-unit>
        <trans-unit id="9327469c8c62010cbf8f679ce7619fc1dc50ba10" translate="yes" xml:space="preserve">
          <source>How to use the .babelrc</source>
          <target state="translated">如何使用.babelrc</target>
        </trans-unit>
        <trans-unit id="4fcbf4134045fec0b44f59524e70be902b2a9222" translate="yes" xml:space="preserve">
          <source>How to use the CLI tools.</source>
          <target state="translated">如何使用CLI工具。</target>
        </trans-unit>
        <trans-unit id="92d098f60cc4a434a1f4d5f9022d4928016c592f" translate="yes" xml:space="preserve">
          <source>How to use the Node.js API.</source>
          <target state="translated">如何使用Node.js API。</target>
        </trans-unit>
        <trans-unit id="39e1dd2507cdbe88ebfe22e37cb397832aa78f55" translate="yes" xml:space="preserve">
          <source>How to use the Polyfill.</source>
          <target state="translated">如何使用宝利丰。</target>
        </trans-unit>
        <trans-unit id="b641cf8a487811a8b9eb80ea56984221856ac9e6" translate="yes" xml:space="preserve">
          <source>How you set this value varies by project, but here are a few examples:</source>
          <target state="translated">如何设置这个值因项目而异,但这里有几个例子。</target>
        </trans-unit>
        <trans-unit id="c464459d67a60583d39390e5bedf025fc605609a" translate="yes" xml:space="preserve">
          <source>However, it may not match how Node eventually implements ES modules natively given the &lt;a href=&quot;https://github.com/nodejs/node-eps/blob/master/002-es-modules.md#46-es-consuming-commonjs&quot;&gt;the current proposal&lt;/a&gt;.</source>
          <target state="translated">但是，&lt;a href=&quot;https://github.com/nodejs/node-eps/blob/master/002-es-modules.md#46-es-consuming-commonjs&quot;&gt;在当前提议的&lt;/a&gt;情况下，Node最终如何本地实现ES模块的方式可能不匹配。</target>
        </trans-unit>
        <trans-unit id="2372620ce1e8aadcd7d70c2092e1c27dce0f1646" translate="yes" xml:space="preserve">
          <source>However, with &lt;code&gt;{ &quot;loose&quot;: true }&lt;/code&gt;, it will compile using assignment expressions:</source>
          <target state="translated">但是，使用 &lt;code&gt;{ &quot;loose&quot;: true }&lt;/code&gt; ，它将使用赋值表达式进行编译：</target>
        </trans-unit>
        <trans-unit id="5c5a87fda56cd7677ec9367c1976412bd65814bb" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../babel-preset-env/index&quot;&gt;&lt;code&gt;@babel/preset-env&lt;/code&gt;&lt;/a&gt; is not used then add &lt;code&gt;@babel/polyfill&lt;/code&gt; to webpack entry array as discussed above. It can still be added at the top of the entry point to application via &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt;, but this is not recommended.</source>
          <target state="translated">如果不使用&lt;a href=&quot;../babel-preset-env/index&quot;&gt; &lt;code&gt;@babel/preset-env&lt;/code&gt; &lt;/a&gt;则如上所述将 &lt;code&gt;@babel/polyfill&lt;/code&gt; polyfill添加到webpack条目数组中。仍然可以通过 &lt;code&gt;import&lt;/code&gt; 或 &lt;code&gt;require&lt;/code&gt; 将其添加到应用程序的入口点的顶部，但是不建议这样做。</target>
        </trans-unit>
        <trans-unit id="5b4ebe6785244a29ee91e09bf408fa4695f1b2fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;useBuiltIns: 'entry'&lt;/code&gt; is specified in &lt;code&gt;.babelrc&lt;/code&gt; then include &lt;code&gt;@babel/polyfill&lt;/code&gt; at the top of the entry point to your application via &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; as discussed above.</source>
          <target state="translated">如果在 &lt;code&gt;.babelrc&lt;/code&gt; 中指定了 &lt;code&gt;useBuiltIns: 'entry'&lt;/code&gt; 则如上所述，通过 &lt;code&gt;require&lt;/code&gt; 或 &lt;code&gt;import&lt;/code&gt; 在应用程序入口点的顶部包含 &lt;code&gt;@babel/polyfill&lt;/code&gt; polyfill。</target>
        </trans-unit>
        <trans-unit id="86174d0ac2f50c2d5ccea9a70a731abaddf8458a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;useBuiltIns: 'usage'&lt;/code&gt; is specified in &lt;code&gt;.babelrc&lt;/code&gt; then do not include &lt;code&gt;@babel/polyfill&lt;/code&gt; in either &lt;code&gt;webpack.config.js&lt;/code&gt; entry array nor source. Note, &lt;code&gt;@babel/polyfill&lt;/code&gt; still needs to be installed.</source>
          <target state="translated">如果在 &lt;code&gt;.babelrc&lt;/code&gt; 中指定了 &lt;code&gt;useBuiltIns: 'usage'&lt;/code&gt; 则在 &lt;code&gt;webpack.config.js&lt;/code&gt; 条目数组或源文件中都不包含 &lt;code&gt;@babel/polyfill&lt;/code&gt; polyfill。注意，仍需要安装 &lt;code&gt;@babel/polyfill&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f2b501bfa3258be0d2ba9c9eab555a29ffd9632" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;useBuiltIns&lt;/code&gt; key is not specified or it is explicitly set with &lt;code&gt;useBuiltIns: false&lt;/code&gt; in your .babelrc, add &lt;code&gt;@babel/polyfill&lt;/code&gt; directly to the entry array in your &lt;code&gt;webpack.config.js&lt;/code&gt;.</source>
          <target state="translated">如果未指定 &lt;code&gt;useBuiltIns&lt;/code&gt; 键，或者在.babelrc中使用 &lt;code&gt;useBuiltIns: false&lt;/code&gt; 对其进行了显式设置，则将 &lt;code&gt;@babel/polyfill&lt;/code&gt; polyfill直接添加到 &lt;code&gt;webpack.config.js&lt;/code&gt; 中的条目数组中。</target>
        </trans-unit>
        <trans-unit id="363102006ca6adc80ad0eb0e9302d4d29d079189" translate="yes" xml:space="preserve">
          <source>If a basic array is used, Babel will compile the for-of loop down to a regular for loop.</source>
          <target state="translated">如果使用了基本数组,Babel会将for-of循环编译成一个常规的for循环。</target>
        </trans-unit>
        <trans-unit id="5b88a77bc666a55e699367a6bb5e420529b2ab7e" translate="yes" xml:space="preserve">
          <source>If all of the patterns fail to match, Babel will immediately stop all processing of the current build. For example, a user may want to do something like</source>
          <target state="translated">如果所有的模式都不匹配,巴别将立即停止对当前构建的所有处理。举例来说,用户可能会想做一些类似于</target>
        </trans-unit>
        <trans-unit id="e4aeb47ab72599b32b06514e7d54c6efd99d2661" translate="yes" xml:space="preserve">
          <source>If all of your build scripts run relative to your repository root, things should already work, but if you are running your Babel compilation process from within a subpackage, you need to tell Babel where to look for the config. There are a few ways to do that, but the recommended way is the &lt;a href=&quot;../options/index#rootmode&quot;&gt;&quot;rootMode&quot;&lt;/a&gt; option with &lt;code&gt;&quot;upward&quot;&lt;/code&gt;, which will make Babel search from the working directory upward looking for your &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; file, and will use its location as the &lt;a href=&quot;../options/index#root&quot;&gt;&quot;root&quot;&lt;/a&gt; value.</source>
          <target state="translated">如果所有构建脚本都相对于存储库根目录运行，那么一切应该已经有效，但是如果您正在子包中运行Babel编译过程，则需要告诉Babel在哪里寻找配置。有几个方法可以做到这一点，但推荐的方法是&lt;a href=&quot;../options/index#rootmode&quot;&gt;&amp;ldquo;rootMode&amp;rdquo;&lt;/a&gt;选项和 &lt;code&gt;&quot;upward&quot;&lt;/code&gt; ，这将使得从工作目录巴贝尔搜索向上寻找你&lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt;文件，并且将使用它的位置作为的&lt;a href=&quot;../options/index#root&quot;&gt;&amp;ldquo;根&amp;rdquo;&lt;/a&gt;的值。</target>
        </trans-unit>
        <trans-unit id="fcbe4455b250b32f7c53af645cdae2a756f1e1d6" translate="yes" xml:space="preserve">
          <source>If all patterns fail to match, the current configuration object is considered inactive and is ignored during config processing. This option is most useful when used within an &lt;code&gt;overrides&lt;/code&gt; option object, but it's allowed anywhere.</source>
          <target state="translated">如果所有模式均不匹配，则当前配置对象被认为是不活动的，并且在配置处理期间将被忽略。在 &lt;code&gt;overrides&lt;/code&gt; 选项对象中使用时，此选项最有用，但可以在任何地方使用。</target>
        </trans-unit>
        <trans-unit id="4532fff4215d3667974b8dc740042d3833a6a47a" translate="yes" xml:space="preserve">
          <source>If an object is provided, it will be treated as the source map object itself.</source>
          <target state="translated">如果提供了一个对象,它将被视为源地图对象本身。</target>
        </trans-unit>
        <trans-unit id="2604c7d04554aba23bd136d3a2f8c6e9e254a737" translate="yes" xml:space="preserve">
          <source>If any of patterns match, the current configuration object is considered inactive and is ignored during config processing. This option is most useful when used within an &lt;code&gt;overrides&lt;/code&gt; option object, but it's allowed anywhere.</source>
          <target state="translated">如果任何模式匹配，则当前配置对象被认为是非活动的，并且在配置处理期间将被忽略。在 &lt;code&gt;overrides&lt;/code&gt; 选项对象中使用时，此选项最有用，但可以在任何地方使用。</target>
        </trans-unit>
        <trans-unit id="2925873579dd4fc60b4def0b29a4eb23c72558c1" translate="yes" xml:space="preserve">
          <source>If any of the patterns match, Babel will immediately stop all processing of the current build. For example, a user may want to do something like</source>
          <target state="translated">如果任何一个模式匹配,Babel将立即停止当前构建的所有处理。例如,用户可能会想做一些像这样的事情</target>
        </trans-unit>
        <trans-unit id="4607f478193c72aed94f852f133e23385847b792" translate="yes" xml:space="preserve">
          <source>If no placeholders are in use and you just want a simple way to parse a string into an AST, you can use the &lt;code&gt;.ast&lt;/code&gt; version of the template.</source>
          <target state="translated">如果没有使用占位符，并且您只想使用一种简单的方法将字符串解析为AST，则可以使用模板的 &lt;code&gt;.ast&lt;/code&gt; 版本。</target>
        </trans-unit>
        <trans-unit id="aa32a46ead83e1d4ec8330b38170dcdedbb5fe56" translate="yes" xml:space="preserve">
          <source>If passing options via &lt;code&gt;@babel/cli&lt;/code&gt; you'll need to &lt;code&gt;kebab-case&lt;/code&gt; the names. i.e.</source>
          <target state="translated">如果通过 &lt;code&gt;@babel/cli&lt;/code&gt; 传递选项，则需要对名称进行 &lt;code&gt;kebab-case&lt;/code&gt; 。即</target>
        </trans-unit>
        <trans-unit id="8497d4479e36941856c1ec25cd318681528307d3" translate="yes" xml:space="preserve">
          <source>If the column number is not known, you may omit it.</source>
          <target state="translated">如果不知道列号,可以省略。</target>
        </trans-unit>
        <trans-unit id="878913bed3e71bbc17967c62a5f7c2211873c931" translate="yes" xml:space="preserve">
          <source>If the column number is not known, you may pass &lt;code&gt;null&lt;/code&gt; instead.</source>
          <target state="translated">如果列号未知，则可以改为传递 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a6c539837c8679821070ff3b901b2df5c100e27" translate="yes" xml:space="preserve">
          <source>If the name of the package is prefixed with &lt;code&gt;babel-plugin-&lt;/code&gt;, you can use a shorthand:</source>
          <target state="translated">如果软件包的名称带有 &lt;code&gt;babel-plugin-&lt;/code&gt; 前缀，则可以使用简写形式：</target>
        </trans-unit>
        <trans-unit id="a429f3bf0a31f44223fa18ac553a7dc1e63015e7" translate="yes" xml:space="preserve">
          <source>If the plugin is on npm, you can pass in the name of the plugin and babel will check that it&amp;rsquo;s installed in &lt;code&gt;node_modules&lt;/code&gt;</source>
          <target state="translated">如果插件在npm上，则可以输入插件的名称，然后babel将检查它是否已安装在 &lt;code&gt;node_modules&lt;/code&gt; 中</target>
        </trans-unit>
        <trans-unit id="eb85449b76d38246985a35024de83bda6048ce5b" translate="yes" xml:space="preserve">
          <source>If the plugin is on npm, you can pass in the name of the plugin and babel will check that it's installed in &lt;code&gt;node_modules&lt;/code&gt;</source>
          <target state="translated">如果插件在npm上，则可以输入插件的名称，然后babel将检查它是否已安装在 &lt;code&gt;node_modules&lt;/code&gt; 中</target>
        </trans-unit>
        <trans-unit id="1668cf1d4e156e6d18d73898a19fafa870f112d5" translate="yes" xml:space="preserve">
          <source>If truthy, adds a &lt;code&gt;map&lt;/code&gt; property to returned output. If set to &lt;code&gt;&quot;inline&quot;&lt;/code&gt;, a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to &lt;code&gt;&quot;both&quot;&lt;/code&gt; then a &lt;code&gt;map&lt;/code&gt; property is returned as well as a source map comment appended. &lt;strong&gt;This does not emit sourcemap files by itself!&lt;/strong&gt; To have sourcemaps emitted using the CLI, you must pass it the &lt;code&gt;--source-maps&lt;/code&gt; option.</source>
          <target state="translated">如果为真，则将 &lt;code&gt;map&lt;/code&gt; 属性添加到返回的输出中。如果设置为 &lt;code&gt;&quot;inline&quot;&lt;/code&gt; ，则将带有sourceMappingURL指令的注释添加到返回代码的底部。如果设置为 &lt;code&gt;&quot;both&quot;&lt;/code&gt; 和&amp;ldquo; both&amp;rdquo;，则返回 &lt;code&gt;map&lt;/code&gt; 属性以及附加的源地图注释。&lt;strong&gt;这本身不会发出sourcemap文件！&lt;/strong&gt;要使用CLI发出 &lt;code&gt;--source-maps&lt;/code&gt; ，必须将--source-maps选项传递给它。</target>
        </trans-unit>
        <trans-unit id="ca14626779a2f269adf97a65dcc8ec8d54bf13ae" translate="yes" xml:space="preserve">
          <source>If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for &lt;code&gt;common&lt;/code&gt; modules)</source>
          <target state="translated">如果是，请为模块插入一个明确的ID。默认情况下，所有模块都是匿名的。（不适用于 &lt;code&gt;common&lt;/code&gt; 模块）</target>
        </trans-unit>
        <trans-unit id="0d094c6d08d1d75abba3286f1146fa4e6d2426bc" translate="yes" xml:space="preserve">
          <source>If you actually &lt;em&gt;do&lt;/em&gt; want to instantiate two separate instances of a plugin, you must assign each one a name to disambiguate them. For example:</source>
          <target state="translated">如果你真的&lt;em&gt;不&lt;/em&gt;想要实例化一个插件的两个独立的情况下，你必须指定每一个名称的歧义他们。例如：</target>
        </trans-unit>
        <trans-unit id="068db3a0d2255e79c77d666650eacd0bfe4d22b5" translate="yes" xml:space="preserve">
          <source>If you are authoring an application, rather than a library, it is recommended that you use the &lt;code&gt;Object.assign&lt;/code&gt; polyfill instead.</source>
          <target state="translated">如果要编写应用程序而不是库，则建议改用 &lt;code&gt;Object.assign&lt;/code&gt; polyfill。</target>
        </trans-unit>
        <trans-unit id="26f82c549bd0f6d82c621c7b08692080acc3808a" translate="yes" xml:space="preserve">
          <source>If you are including your plugins manually and using &lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt;, make sure that &lt;code&gt;@babel/plugin-proposal-decorators&lt;/code&gt; comes &lt;em&gt;before&lt;/em&gt;&lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt;.</source>
          <target state="translated">如果要手动包括您的插件和使用 &lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt; ，确保 &lt;code&gt;@babel/plugin-proposal-decorators&lt;/code&gt; 来&lt;em&gt;之前&lt;/em&gt; &lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e1839e5ca4cb71f744e8a1ba7b2acb67efe61d3e" translate="yes" xml:space="preserve">
          <source>If you are looking for something that won't modify globals to be used in a tool/library, checkout the &lt;a href=&quot;../babel-plugin-transform-runtime/index&quot;&gt;&lt;code&gt;transform-runtime&lt;/code&gt;&lt;/a&gt; plugin. This means you won't be able to use the instance methods mentioned above like &lt;code&gt;Array.prototype.includes&lt;/code&gt;.</source>
          <target state="translated">如果您正在寻找不会修改要在工具/库中使用的全局变量的东西，请签出&lt;a href=&quot;../babel-plugin-transform-runtime/index&quot;&gt; &lt;code&gt;transform-runtime&lt;/code&gt; &lt;/a&gt;插件。这意味着您将无法使用 &lt;code&gt;Array.prototype.includes&lt;/code&gt; 之类的上述实例方法。</target>
        </trans-unit>
        <trans-unit id="a2af0b4e30cb79ca06f9857304cad53750ee7a9c" translate="yes" xml:space="preserve">
          <source>If you are looking for something that won't modify globals to be used in a tool/library, checkout the &lt;code&gt;transform-runtime&lt;/code&gt; plugin. This means you won't be able to use the instance methods mentioned above like &lt;code&gt;Array.prototype.includes&lt;/code&gt;.</source>
          <target state="translated">如果您正在寻找不会修改全局变量以在工具/库中使用的东西，请签出 &lt;code&gt;transform-runtime&lt;/code&gt; 插件。这意味着您将无法使用 &lt;code&gt;Array.prototype.includes&lt;/code&gt; 之类的上述实例方法。</target>
        </trans-unit>
        <trans-unit id="e4408cc3774a104869ee9f7797fc9e975e3dc63c" translate="yes" xml:space="preserve">
          <source>If you are targeting IE 8 and Chrome 55 it will include all plugins required by IE 8 since you would need to support both still.</source>
          <target state="translated">如果你的目标是IE 8和Chrome 55,它将包括IE 8所需的所有插件,因为你仍然需要支持这两个。</target>
        </trans-unit>
        <trans-unit id="ab986d0ebb2763464209bb9de3c8d2ff81b2a343" translate="yes" xml:space="preserve">
          <source>If you are using ES6&amp;rsquo;s &lt;code&gt;import&lt;/code&gt; syntax in your application&amp;rsquo;s &lt;strong&gt;entry point&lt;/strong&gt;, you should instead import the polyfill at the top of the &lt;strong&gt;entry point&lt;/strong&gt; to ensure the polyfills are loaded first:</source>
          <target state="translated">如果在应用程序的&lt;strong&gt;入口点&lt;/strong&gt;中使用ES6的 &lt;code&gt;import&lt;/code&gt; 语法，则应该在&lt;strong&gt;入口点&lt;/strong&gt;的顶部导入polyfill，以确保首先加载polyfill：&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfc704ca669bc4ff24468c3be82b380b893b1b96" translate="yes" xml:space="preserve">
          <source>If you are using ES6's &lt;code&gt;import&lt;/code&gt; syntax in your application's &lt;strong&gt;entry point&lt;/strong&gt;, you should instead import the polyfill at the top of the &lt;strong&gt;entry point&lt;/strong&gt; to ensure the polyfills are loaded first:</source>
          <target state="translated">如果在应用程序的&lt;strong&gt;入口点&lt;/strong&gt;中使用ES6的 &lt;code&gt;import&lt;/code&gt; 语法，则应在&lt;strong&gt;入口点&lt;/strong&gt;的顶部导入polyfill，以确保首先加载polyfill：&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfe6242d41b1405491e9b69babd85070daf1ddac" translate="yes" xml:space="preserve">
          <source>If you are using a particular library (like react-intl) that uses object properties, and you are sure that the element won't modify its own props, you can whitelist the element so that objects are allowed.</source>
          <target state="translated">如果你使用的是一个特定的使用对象属性的库(比如react-intl),并且你确定元素不会修改自己的道具,你可以将元素列入白名单,这样就可以允许对象。</target>
        </trans-unit>
        <trans-unit id="49af10fb5329098c7c5c5c5cfe05f08ebc130346" translate="yes" xml:space="preserve">
          <source>If you are using the &lt;code&gt;all&lt;/code&gt; option in your Flow config, be sure to set this option to &lt;code&gt;true&lt;/code&gt; to get matching behavior.</source>
          <target state="translated">如果您在Flow配置中使用 &lt;code&gt;all&lt;/code&gt; 选项，请确保将此选项设置为 &lt;code&gt;true&lt;/code&gt; 以获得匹配行为。</target>
        </trans-unit>
        <trans-unit id="b21e82452e5568e5b27ffe18949437596def7c6b" translate="yes" xml:space="preserve">
          <source>If you do not want (or cannot use) auto importing, you can use the classic runtime, which is the default behavior for v7 and prior.</source>
          <target state="translated">如果你不想(或不能使用)自动导入,你可以使用经典的运行时,这是v7和之前的默认行为。</target>
        </trans-unit>
        <trans-unit id="c2eb7a09bbfa2223475c63a1850e4b8bdc00a1f5" translate="yes" xml:space="preserve">
          <source>If you don't want to copy ignored JavaScript files:</source>
          <target state="translated">如果你不想复制被忽略的JavaScript文件。</target>
        </trans-unit>
        <trans-unit id="0694a0e40cac16d9325130452321ef41ed6ac15e" translate="yes" xml:space="preserve">
          <source>If you get a &lt;code&gt;SyntaxError: Unexpected token ...&lt;/code&gt; error when using the &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-object-rest-spread&quot;&gt;object-rest-spread&lt;/a&gt; transform then make sure the plugin has been updated to, at least, &lt;code&gt;v6.19.0&lt;/code&gt;.</source>
          <target state="translated">如果使用&lt;a href=&quot;https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-object-rest-spread&quot;&gt;object-rest-spread&lt;/a&gt;转换时出现 &lt;code&gt;SyntaxError: Unexpected token ...&lt;/code&gt; 错误，则请确保插件至少已更新为 &lt;code&gt;v6.19.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bde2f3b7361fc7ed0bc7855bc8db6c614d9754f" translate="yes" xml:space="preserve">
          <source>If you had your function defined with trailing commas:</source>
          <target state="translated">如果你用逗号定义了你的函数。</target>
        </trans-unit>
        <trans-unit id="8aabfe0eecaea566f4751fcb7c6ef7a9e49df97f" translate="yes" xml:space="preserve">
          <source>If you have existing code which uses the TypeScript-only &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/namespaces.html&quot;&gt;namespace&lt;/a&gt; features. Babel supports a subset of TypeScript's namespace features. If you are considering writing new code which uses namespace, using the ES2015 &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;export&lt;/code&gt; is recommended instead. It's &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/30994#issuecomment-484150549&quot;&gt;not going away&lt;/a&gt;, but there are modern alternatives.</source>
          <target state="translated">如果您已有使用仅TypeScript&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/namespaces.html&quot;&gt;名称空间&lt;/a&gt;功能的代码。Babel支持TypeScript命名空间功能的子集。如果您正在考虑编写使用名称空间的新代码，则建议改为使用ES2015 &lt;code&gt;import&lt;/code&gt; / &lt;code&gt;export&lt;/code&gt; 。它并&lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/30994#issuecomment-484150549&quot;&gt;没有消失&lt;/a&gt;，但是有现代的选择。</target>
        </trans-unit>
        <trans-unit id="2cea30e07d6d4f8a1c605e282d481d26c77173c4" translate="yes" xml:space="preserve">
          <source>If you need these errors you can tell Babel to try and find them by setting &lt;code&gt;&quot;tdz&quot;: true&lt;/code&gt; for this plugin. However, the current implementation might not get all edge cases right and its best to just avoid code like this in the first place.</source>
          <target state="translated">如果您需要这些错误，则可以通过为该插件设置 &lt;code&gt;&quot;tdz&quot;: true&lt;/code&gt; 来告诉Babel尝试查找它们。但是，当前的实现可能无法正确解决所有极端情况，最好是首先避免这种代码。</target>
        </trans-unit>
        <trans-unit id="65f5070da13e2f9ffb5a42c15b7bdb4057dd48b0" translate="yes" xml:space="preserve">
          <source>If you need to further compile ES2015 Decimal, Binary, Hex and Octal number representations to their pre-ES2015 numeric literal form, add the &lt;a href=&quot;../babel-plugin-transform-literals/index&quot;&gt;&lt;code&gt;&quot;@babel/plugin-transform-literals&quot;&lt;/code&gt;&lt;/a&gt; plugin:</source>
          <target state="translated">如果需要将ES2015小数，二进制，十六进制和八进制数字表示形式进一步编译为ES2015之前的数字文字形式，请添加&lt;a href=&quot;../babel-plugin-transform-literals/index&quot;&gt; &lt;code&gt;&quot;@babel/plugin-transform-literals&quot;&lt;/code&gt; &lt;/a&gt;插件：</target>
        </trans-unit>
        <trans-unit id="95dd9322c491b6219ee85781fe7ead0f941fb033" translate="yes" xml:space="preserve">
          <source>If you need to use a proposal that is not Stage 4, &lt;code&gt;@babel/polyfill&lt;/code&gt; will not automatically import those for you. You will have to import those from another polyfill like &lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;&lt;code&gt;core-js&lt;/code&gt;&lt;/a&gt; individually. We may work towards including this as separate files in &lt;code&gt;@babel/polyfill&lt;/code&gt; soon.</source>
          <target state="translated">如果您需要使用不是第4阶段的投标， &lt;code&gt;@babel/polyfill&lt;/code&gt; 将不会自动为您导入那些投标。您将必须分别从另一个polyfill（如&lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt; &lt;code&gt;core-js&lt;/code&gt; )&lt;/a&gt;导入那些。我们可能会尽快将其作为单独的文件包含在 &lt;code&gt;@babel/polyfill&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3b73555e3f625874e64c3fa6419439ec00f6560" translate="yes" xml:space="preserve">
          <source>If you prefix the plugin with &lt;code&gt;babel-plugin-&lt;/code&gt;, you can use a shorthand to leave out that prefix</source>
          <target state="translated">如果为插件加上 &lt;code&gt;babel-plugin-&lt;/code&gt; 前缀，则可以使用简写形式省略该前缀</target>
        </trans-unit>
        <trans-unit id="906f848694a089db7517b9a32e45dbede1155d48" translate="yes" xml:space="preserve">
          <source>If you set the plugin options to:</source>
          <target state="translated">如果你把插件选项设置为:</target>
        </trans-unit>
        <trans-unit id="c45f42da7a5eeaf597f94ab81aed275455cdb180" translate="yes" xml:space="preserve">
          <source>If you want to compile against the &lt;a href=&quot;https://developer.apple.com/safari/technology-preview/&quot;&gt;technology preview&lt;/a&gt; version of Safari, you can specify &lt;code&gt;&quot;safari&quot;: &quot;tp&quot;&lt;/code&gt;.</source>
          <target state="translated">如果要针对Safari的&lt;a href=&quot;https://developer.apple.com/safari/technology-preview/&quot;&gt;技术预览&lt;/a&gt;版进行编译，则可以指定 &lt;code&gt;&quot;safari&quot;: &quot;tp&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3baab91c0577301128b6e71f863f456587bf2066" translate="yes" xml:space="preserve">
          <source>If you want to compile against the current node version, you can specify &lt;code&gt;&quot;node&quot;: true&lt;/code&gt; or &lt;code&gt;&quot;node&quot;: &quot;current&quot;&lt;/code&gt;, which would be the same as &lt;code&gt;&quot;node&quot;: process.versions.node&lt;/code&gt;.</source>
          <target state="translated">如果要针对当前节点版本进行编译，则可以指定 &lt;code&gt;&quot;node&quot;: true&lt;/code&gt; 或 &lt;code&gt;&quot;node&quot;: &quot;current&quot;&lt;/code&gt; ，与 &lt;code&gt;&quot;node&quot;: process.versions.node&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="475c0b0fe7f5d966a036740be6b457cce16b06a4" translate="yes" xml:space="preserve">
          <source>If you want to have a new parameter called &lt;code&gt;param3&lt;/code&gt;, the diff output would be like that:</source>
          <target state="translated">如果要使用名为 &lt;code&gt;param3&lt;/code&gt; 的新参数，则diff输出将如下所示：</target>
        </trans-unit>
        <trans-unit id="4eebfacf7bd42286e8d82b080c3220e513d8960b" translate="yes" xml:space="preserve">
          <source>If you want to stay up to date, use the &lt;a href=&quot;../preset-env/index&quot;&gt;env preset&lt;/a&gt;</source>
          <target state="translated">如果要保持最新状态，请使用&lt;a href=&quot;../preset-env/index&quot;&gt;env预设&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba3cefc44fe66884ffa4a30400e93d6ae7721a1b" translate="yes" xml:space="preserve">
          <source>If you want your command to work across platforms, you can use &lt;a href=&quot;https://www.npmjs.com/package/cross-env&quot;&gt;&lt;code&gt;cross-env&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">如果您希望命令跨平台运行，则可以使用&lt;a href=&quot;https://www.npmjs.com/package/cross-env&quot;&gt; &lt;code&gt;cross-env&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0d08a05b79178a0b1525b46f5f65809aa98cee90" translate="yes" xml:space="preserve">
          <source>If you would like to &lt;strong&gt;output to a file&lt;/strong&gt; you may use &lt;code&gt;--out-file&lt;/code&gt; or &lt;code&gt;-o&lt;/code&gt;.</source>
          <target state="translated">如果要&lt;strong&gt;输出到文件&lt;/strong&gt;，可以使用 &lt;code&gt;--out-file&lt;/code&gt; 或 &lt;code&gt;-o&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="10ff008d152f340d93be17b9ca6cbdcd5c937558" translate="yes" xml:space="preserve">
          <source>If you would rather have &lt;strong&gt;inline source maps&lt;/strong&gt;, you may use &lt;code&gt;--source-maps inline&lt;/code&gt;.</source>
          <target state="translated">如果您希望使用&lt;strong&gt;内联源地图&lt;/strong&gt;，则可以使用 &lt;code&gt;--source-maps inline&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08fe4dca2da33294bbec9b3c7d4c3a001d65be8f" translate="yes" xml:space="preserve">
          <source>If you would then like to add a &lt;strong&gt;source map file&lt;/strong&gt; you can use &lt;code&gt;--source-maps&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt;. &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;Learn more about source maps&lt;/a&gt;.</source>
          <target state="translated">如果然后要添加&lt;strong&gt;源映射文件&lt;/strong&gt;，则可以使用 &lt;code&gt;--source-maps&lt;/code&gt; 或 &lt;code&gt;-s&lt;/code&gt; 。&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;了解有关源地图的更多信息&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f192ba03c9b3b113ddbd2e5cca4b298738bc2cd3" translate="yes" xml:space="preserve">
          <source>If you would then like to add a &lt;strong&gt;source map file&lt;/strong&gt; you can use &lt;code&gt;--source-maps&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt;. &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;Learn more about source maps&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3533a2fa56a8066de9ec5e3a45e22d82d361ac" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re inheriting from a class then static properties are inherited from it via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto&quot;&gt;__proto__&lt;/a&gt;, this is widely supported but you may run into problems with much older browsers.</source>
          <target state="translated">如果您要从类继承，则可以通过&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto&quot;&gt;__proto__&lt;/a&gt;从其继承静态属性，这被广泛支持，但是您可能会遇到旧版本浏览器的问题。</target>
        </trans-unit>
        <trans-unit id="f5d3f7539754399759c1a1bed68dfc69d49286da" translate="yes" xml:space="preserve">
          <source>Ignore all files that match this regex when using the require hook</source>
          <target state="translated">当使用require钩子时,忽略所有符合这个regex的文件。</target>
        </trans-unit>
        <trans-unit id="61dbcb4b24575d906db7d56beaf67990cd7c43da" translate="yes" xml:space="preserve">
          <source>Ignore files</source>
          <target state="translated">忽略文件</target>
        </trans-unit>
        <trans-unit id="d6b434f4bf46f90cfe8e7ad26daef7a9fdfa1317" translate="yes" xml:space="preserve">
          <source>Ignore spec and test files</source>
          <target state="translated">忽略规格和测试文件</target>
        </trans-unit>
        <trans-unit id="33d76edad06d2cbec2e0521e509b4ecf6da2de7d" translate="yes" xml:space="preserve">
          <source>Ignore the configuration from the project's &lt;code&gt;.babelrc&lt;/code&gt; or &lt;code&gt;.babelrc.json&lt;/code&gt; file and use the cli options e.g. for a custom build</source>
          <target state="translated">忽略项目的 &lt;code&gt;.babelrc&lt;/code&gt; 或 &lt;code&gt;.babelrc.json&lt;/code&gt; 文件中的配置，并使用cli选项，例如用于自定义构建</target>
        </trans-unit>
        <trans-unit id="0ce94a4fec4e021fcf1b4db7762f149544e916e8" translate="yes" xml:space="preserve">
          <source>Ignore the configuration from the projects .babelrc file and use the cli options e.g. for a custom build</source>
          <target state="translated">忽略项目中的.babelrc文件的配置,而使用cli选项,例如自定义构建。</target>
        </trans-unit>
        <trans-unit id="936391eec29649207ee86a1efb14f8b9bf204231" translate="yes" xml:space="preserve">
          <source>Ignores &lt;code&gt;node_modules&lt;/code&gt; by default</source>
          <target state="translated">默认情况下忽略 &lt;code&gt;node_modules&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b28b4cd86b7780743e08f71857b02fb2d2cb8e0" translate="yes" xml:space="preserve">
          <source>Ignoring .babelrc</source>
          <target state="translated">忽略.babelrc</target>
        </trans-unit>
        <trans-unit id="f07a401f1938f4569acc857def37d2567a996a90" translate="yes" xml:space="preserve">
          <source>Ignoring .babelrc.json or .babelrc</source>
          <target state="translated">忽略.babelrc.json或.babelrc。</target>
        </trans-unit>
        <trans-unit id="6b5a3389b2afa6f8a207f4917e0d41ca4b3179ae" translate="yes" xml:space="preserve">
          <source>Impartial Namespace Support</source>
          <target state="translated">公正的命名空间支持</target>
        </trans-unit>
        <trans-unit id="abdc259d23c27abc017f6d58970d6e3142e73d0f" translate="yes" xml:space="preserve">
          <source>Importantly, if either of these are used, Babel requires that the &lt;code&gt;filename&lt;/code&gt; option be present, and will consider it an error otherwise.</source>
          <target state="translated">重要的是，如果使用这两种方法中的任何一种，Babel都要求提供 &lt;code&gt;filename&lt;/code&gt; 选项，否则将认为它是错误。</target>
        </trans-unit>
        <trans-unit id="b6aa44e4b2f31a5eca068dc8f4a60ca6e14065c4" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;&quot;core-js&quot;&lt;/code&gt; loads polyfills for every possible ECMAScript feature: what if you know that you only need some of them? When using &lt;code&gt;core-js@3&lt;/code&gt;, &lt;code&gt;@babel/preset-env&lt;/code&gt; is able to optimize every single &lt;code&gt;core-js&lt;/code&gt; entrypoint and their combinations. For example, you might want to only polyfill array methods and new &lt;code&gt;Math&lt;/code&gt; proposals:</source>
          <target state="translated">导入 &lt;code&gt;&quot;core-js&quot;&lt;/code&gt; 会为每种可能的ECMAScript功能加载polyfill：如果您知道只需要其中的一部分，该怎么办？使用 &lt;code&gt;core-js@3&lt;/code&gt; ， &lt;code&gt;@babel/preset-env&lt;/code&gt; 能够优化每个单个 &lt;code&gt;core-js&lt;/code&gt; 入口点及其组合。例如，您可能只想使用polyfill数组方法和新的 &lt;code&gt;Math&lt;/code&gt; 建议：</target>
        </trans-unit>
        <trans-unit id="aef36502d67b0520654deb764dd055a7e905cfdd" translate="yes" xml:space="preserve">
          <source>In</source>
          <target state="translated">In</target>
        </trans-unit>
        <trans-unit id="e0de0a5f6f9d808d59bfaa9dee6d1f7678bd8730" translate="yes" xml:space="preserve">
          <source>In Babel 6, this method was synchronous and &lt;code&gt;transformFromAstSync&lt;/code&gt; did not exist. For backward-compatibility, this function will behave synchronously if no callback is given. If you're starting with Babel 7 and need synchronous behavior, please use &lt;code&gt;transformFromAstSync&lt;/code&gt; since this backward-compat may be dropped in future major versions of Babel.</source>
          <target state="translated">在Babel 6中，此方法是同步的，并且不存在 &lt;code&gt;transformFromAstSync&lt;/code&gt; 。为了向后兼容，如果未提供回调，则此函数将同步运行。如果您从Babel 7开始并且需要同步行为，请使用 &lt;code&gt;transformFromAstSync&lt;/code&gt; ,因为在向后的Babel主要版本中可能会删除此向后兼容。</target>
        </trans-unit>
        <trans-unit id="955b9015124e91f983661bc1d4b04dc72c2c4ae5" translate="yes" xml:space="preserve">
          <source>In Babel 6, this method was synchronous and &lt;code&gt;transformSync&lt;/code&gt; did not exist. For backward-compatibility, this function will behave synchronously if no callback is given. If you're starting with Babel 7 and need synchronous behavior, please use &lt;code&gt;transformSync&lt;/code&gt; since this backward-compat may be dropped in future major versions of Babel.</source>
          <target state="translated">在Babel 6中，此方法是同步的，并且不存在 &lt;code&gt;transformSync&lt;/code&gt; 。为了向后兼容，如果未提供回调，则此函数将同步运行。如果您从Babel 7开始并且需要同步行为，请使用 &lt;code&gt;transformSync&lt;/code&gt; ,因为在Babel的未来主要版本中可能会删除此向后兼容。</target>
        </trans-unit>
        <trans-unit id="22545e15529997e8c5daa95bf3f969e11c7f5663" translate="yes" xml:space="preserve">
          <source>In Babel 7's early betas, this method was synchronous and &lt;code&gt;parseSync&lt;/code&gt; did not exist. For backward-compatibility, this function will behave synchronously if no callback is given. If you're starting with Babel 7 stable and need synchronous behavior, please use &lt;code&gt;parseSync&lt;/code&gt; since this backward-compat may be dropped in future major versions of Babel.</source>
          <target state="translated">在Babel 7的早期 &lt;code&gt;parseSync&lt;/code&gt; ，此方法是同步的，并且parseSync不存在。为了向后兼容，如果未提供回调，则此函数将同步运行。如果您是从Babel 7稳定版开始并且需要同步行为，请使用 &lt;code&gt;parseSync&lt;/code&gt; ,因为在Babel的未来主要版本中可能会删除此向后兼容。</target>
        </trans-unit>
        <trans-unit id="0505866ffc7772d9c2b96a0a358c758c6f7532f0" translate="yes" xml:space="preserve">
          <source>In Babel 7, &lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy&quot;&gt;transform-decorators-legacy&lt;/a&gt; will be the default plugin in Stage-0.</source>
          <target state="translated">在Babel 7中，&lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy&quot;&gt;transform-decorators-legacy&lt;/a&gt;将是Stage-0中的默认插件。</target>
        </trans-unit>
        <trans-unit id="f8968b35ad46c81786588fb49ef46dccc681245e" translate="yes" xml:space="preserve">
          <source>In Babel 7, &lt;code&gt;transform-async-to-module-method&lt;/code&gt; was merged into this plugin</source>
          <target state="translated">在Babel 7中， &lt;code&gt;transform-async-to-module-method&lt;/code&gt; 合并到此插件中</target>
        </trans-unit>
        <trans-unit id="d21c9bffcb7a16366fca94c71658613fba3d2c75" translate="yes" xml:space="preserve">
          <source>In IE8 &lt;code&gt;Object.defineProperty&lt;/code&gt; can only be used on DOM objects. This is unfortunate as it&amp;rsquo;s required to set getters and setters. Due to this if you plan on supporting IE8 or below then the usage of getters and setters isn&amp;rsquo;t recommended.</source>
          <target state="translated">在IE8中， &lt;code&gt;Object.defineProperty&lt;/code&gt; 仅可用于DOM对象。这是不幸的，因为它需要设置getter和setter。因此，如果您计划支持IE8或更低版本，则不建议使用getter和setter。</target>
        </trans-unit>
        <trans-unit id="dcdcf9fc4c521c65348944f4b623ce1eab3440c0" translate="yes" xml:space="preserve">
          <source>In JSX</source>
          <target state="translated">在JSX中</target>
        </trans-unit>
        <trans-unit id="f289aa2902a01091e5d0294d82b2d94bdffd83ba" translate="yes" xml:space="preserve">
          <source>In a browser environment you can use a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to inject the &lt;code&gt;babelHelpers&lt;/code&gt; into the &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="translated">在浏览器环境中，可以使用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记将 &lt;code&gt;babelHelpers&lt;/code&gt; 注入到 &lt;code&gt;window&lt;/code&gt; 对象中。</target>
        </trans-unit>
        <trans-unit id="c1d4fb2104efb0e445cde45875e6bf916cf985d6" translate="yes" xml:space="preserve">
          <source>In addition, various entry point scripts live in the top-level package at &lt;code&gt;@babel/cli/bin&lt;/code&gt;. There is a shell-executable utility script, &lt;code&gt;babel-external-helpers.js&lt;/code&gt;, and the main Babel cli script, &lt;code&gt;babel.js&lt;/code&gt;.</source>
          <target state="translated">另外，各种入口点脚本位于 &lt;code&gt;@babel/cli/bin&lt;/code&gt; 的顶级包中。有一个shell可执行的实用程序脚本 &lt;code&gt;babel-external-helpers.js&lt;/code&gt; 和主要的Babel cli脚本 &lt;code&gt;babel.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f042f0b61a97ede3c5b8ba83391797caa50459f0" translate="yes" xml:space="preserve">
          <source>In cases such as the following it&amp;rsquo;s impossible to rewrite let/const without adding an additional function and closure while transforming:</source>
          <target state="translated">在以下情况下，在转换时不添加其他函数和闭包就不可能重写let / const：</target>
        </trans-unit>
        <trans-unit id="f980518f58cc5afc7e49901a0152b6afba865403" translate="yes" xml:space="preserve">
          <source>In cases such as the following it's impossible to rewrite let/const without adding an additional function and closure while transforming:</source>
          <target state="translated">在下面这种情况下,如果不在转换时增加一个额外的函数和闭包,就无法重写let/const。</target>
        </trans-unit>
        <trans-unit id="5a513542fd36b064c5a073bfc7a234aba04a5d81" translate="yes" xml:space="preserve">
          <source>In cases where the auto-unwrapping of &lt;code&gt;default&lt;/code&gt; is not needed, you can set the &lt;code&gt;noInterop&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; to avoid the usage of the &lt;code&gt;interopRequireDefault&lt;/code&gt; helper (shown in inline form above).</source>
          <target state="translated">如果不需要 &lt;code&gt;default&lt;/code&gt; 的自动展开功能，则可以将 &lt;code&gt;noInterop&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; ,以避免使用 &lt;code&gt;interopRequireDefault&lt;/code&gt; 帮助器（如上内联形式所示）。</target>
        </trans-unit>
        <trans-unit id="7c0559261aede0b467410c1aca5945640dc3b5b5" translate="yes" xml:space="preserve">
          <source>In computer science, this is known as an implementation of quasiquotes.</source>
          <target state="translated">在计算机科学中,这被称为准引号的实现。</target>
        </trans-unit>
        <trans-unit id="4044c4db56208991e24b6c533bc89fab602562c2" translate="yes" xml:space="preserve">
          <source>In environments that don&amp;rsquo;t support this you can enable loose mode on &lt;code&gt;babel-plugin-transform-es2015-modules-commonjs&lt;/code&gt; and instead of using &lt;code&gt;Object.defineProperty&lt;/code&gt; an assignment will be used instead.</source>
          <target state="translated">在不支持此功能的环境中，您可以在 &lt;code&gt;babel-plugin-transform-es2015-modules-commonjs&lt;/code&gt; 上启用宽松模式，而不是使用 &lt;code&gt;Object.defineProperty&lt;/code&gt; 来代替分配。</target>
        </trans-unit>
        <trans-unit id="f3c525f9c7f94dcd3801c9521054bb7cb4233c24" translate="yes" xml:space="preserve">
          <source>In environments that don't support this you can enable loose mode on &lt;code&gt;@babel/plugin-transform-modules-commonjs&lt;/code&gt; and instead of using &lt;code&gt;Object.defineProperty&lt;/code&gt; an assignment will be used instead.</source>
          <target state="translated">在不支持此功能的环境中，您可以在 &lt;code&gt;@babel/plugin-transform-modules-commonjs&lt;/code&gt; 上启用宽松模式，而不是使用 &lt;code&gt;Object.defineProperty&lt;/code&gt; ，而是使用分配。</target>
        </trans-unit>
        <trans-unit id="56c0ead114115a82b8ffabd0d119a4ad2a1cc421" translate="yes" xml:space="preserve">
          <source>In extremely performance-sensitive code, this can be undesirable. If &lt;code&gt;&quot;throwIfClosureRequired&quot;: true&lt;/code&gt; is set, Babel throws when transforming these patterns instead of automatically adding an additional function.</source>
          <target state="translated">在对性能非常敏感的代码中，这可能是不希望的。如果设置为 &lt;code&gt;&quot;throwIfClosureRequired&quot;: true&lt;/code&gt; ，则Babel会在转换这些模式时抛出而不是自动添加其他功能。</target>
        </trans-unit>
        <trans-unit id="49508ef417b75db5464d1d282ddefcbcb0136564" translate="yes" xml:space="preserve">
          <source>In loose mode an iterator&amp;rsquo;s &lt;code&gt;return&lt;/code&gt; method will not be called on abrupt completions caused by thrown errors.</source>
          <target state="translated">在松散模式下，迭代器的 &lt;code&gt;return&lt;/code&gt; 方法将不会在抛出错误导致的突然完成中被调用。</target>
        </trans-unit>
        <trans-unit id="15e1d3c8b7c5a13331d9210911aea11c72bba23a" translate="yes" xml:space="preserve">
          <source>In loose mode an iterator's &lt;code&gt;return&lt;/code&gt; method will not be called on abrupt completions caused by thrown errors.</source>
          <target state="translated">在松散模式下，迭代器的 &lt;code&gt;return&lt;/code&gt; 方法将不会在抛出错误导致的突然完成中被调用。</target>
        </trans-unit>
        <trans-unit id="f7de983fba7f868162b7131db8c76dc3a5a396e1" translate="yes" xml:space="preserve">
          <source>In loose mode, &lt;strong&gt;all&lt;/strong&gt; iterables are assumed to be arrays.</source>
          <target state="translated">在松散模式下，&lt;strong&gt;所有&lt;/strong&gt;可迭代对象均假定为数组。</target>
        </trans-unit>
        <trans-unit id="6afdc7c9d236798c055c29d6e5c352fb97366fdb" translate="yes" xml:space="preserve">
          <source>In loose mode, arrays are put in a fast path, thus heavily increasing performance. All other iterables will continue to work fine.</source>
          <target state="translated">在松散模式下,数组被置于快速路径中,从而极大地提高了性能。所有其他的迭代器将继续正常工作。</target>
        </trans-unit>
        <trans-unit id="ffa0084dc9824bfbaf57a8a208aea63b7c8643f9" translate="yes" xml:space="preserve">
          <source>In loose mode, parameters with default values will be counted into the arity of the function. This is not spec behavior where these parameters do not add to function arity.</source>
          <target state="translated">在松散模式下,具有默认值的参数将被计入函数的arity。这不是规范的行为,在这里,这些参数不会加到函数的arity中。</target>
        </trans-unit>
        <trans-unit id="1037099bdba64762501aa56fbb76f8d15dd2901e" translate="yes" xml:space="preserve">
          <source>In loose mode, tagged template literal objects aren&amp;rsquo;t frozen.</source>
          <target state="translated">在松散模式下，不会冻结带标签的模板文字对象。</target>
        </trans-unit>
        <trans-unit id="0bc8998cbdf3aefe0a77333549f6ec1f3e176c9c" translate="yes" xml:space="preserve">
          <source>In most cases, Babel does a 1:1 transformation of input-file to output-file. However, you may be dealing with AST constructed from multiple sources - JS files, templates, etc. If this is the case, and you want the sourcemaps to reflect the correct sources, you'll need to pass an object to &lt;code&gt;generate&lt;/code&gt; as the &lt;code&gt;code&lt;/code&gt; parameter. Keys should be the source filenames, and values should be the source content.</source>
          <target state="translated">在大多数情况下，Babel会将输入文件与输出文件进行1：1转换。但是，您可能正在处理由多个源（包括JS文件，模板等）构造的AST。如果是这种情况，并且您希望源映射反映正确的源，则需要传递一个对象以作为 &lt;code&gt;code&lt;/code&gt; &lt;code&gt;generate&lt;/code&gt; 参数。键应该是源文件名，值应该是源内容。</target>
        </trans-unit>
        <trans-unit id="8de1e0ee15bdc60abf98a6290abd5e87b7afc852" translate="yes" xml:space="preserve">
          <source>In most cases, you should install &lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt; as a development dependency (with &lt;code&gt;--save-dev&lt;/code&gt;).</source>
          <target state="translated">在大多数情况下，应将 &lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt; 安装为开发依赖项（使用 &lt;code&gt;--save-dev&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="aa0e2d172383444f1170040e062d8f4aba2b6bc0" translate="yes" xml:space="preserve">
          <source>In order for certain features to work they require certain polyfills. You can satisfy &lt;strong&gt;all&lt;/strong&gt; Babel feature requirements by using &lt;a href=&quot;../polyfill/index&quot;&gt;babel-polyfill&lt;/a&gt;.</source>
          <target state="translated">为了使某些功能正常工作，它们需要某些polyfill。您可以使用&lt;a href=&quot;../polyfill/index&quot;&gt;babel-polyfill&lt;/a&gt;满足&lt;strong&gt;所有&lt;/strong&gt; Babel功能要求。</target>
        </trans-unit>
        <trans-unit id="dab5cdb94e840112fe09536115a6bb2bbfbf235b" translate="yes" xml:space="preserve">
          <source>In order to prevent the &lt;code&gt;__esModule&lt;/code&gt; property from being exported, you can set the &lt;code&gt;strict&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">为了防止 &lt;code&gt;__esModule&lt;/code&gt; 属性被导出，可以将 &lt;code&gt;strict&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68188c7584bc64b8a46a6131574eedc80a57ab87" translate="yes" xml:space="preserve">
          <source>In the end, your diff output will be cleaner and easier to read, it would be much quicker to add a new parameter to your functions, it also makes it easier to copy paste elements and move code around.</source>
          <target state="translated">最后,你的diff输出会更干净,更容易阅读,在你的函数中添加一个新的参数会更快,这也使得复制粘贴元素和移动代码更容易。</target>
        </trans-unit>
        <trans-unit id="cfcb4e3640e0d6f67da24178b9593d0fdbb8ffa7" translate="yes" xml:space="preserve">
          <source>In this case, we recommend importing/requiring &lt;code&gt;@babel/polyfill&lt;/code&gt; in the entry point of your application and using &lt;code&gt;@babel/preset-env&lt;/code&gt; with the &lt;code&gt;useBuiltIns&lt;/code&gt; option to only include the polyfills your targets need. Alternatively, you can also import/require &lt;code&gt;core-js/modules/es6.symbol&lt;/code&gt; by itself.</source>
          <target state="translated">在这种情况下，我们建议在应用程序的入口点导入/要求 &lt;code&gt;@babel/polyfill&lt;/code&gt; ，并将 &lt;code&gt;@babel/preset-env&lt;/code&gt; 与 &lt;code&gt;useBuiltIns&lt;/code&gt; 选项一起使用，以仅包括目标所需的polyfill。另外，您也可以 &lt;code&gt;core-js/modules/es6.symbol&lt;/code&gt; 导入/需要core-js / modules / es6.symbol。</target>
        </trans-unit>
        <trans-unit id="fb035856e03aff85aea3e2a1be965c0955e60d77" translate="yes" xml:space="preserve">
          <source>In total, you have to change 2 lines for the function declaration and 2 lines for each usage.</source>
          <target state="translated">一共要改2行函数声明和2行用法。</target>
        </trans-unit>
        <trans-unit id="77879fa653f4d146bcf559edacba568e01822114" translate="yes" xml:space="preserve">
          <source>Inactive Proposals</source>
          <target state="translated">不活跃的提案</target>
        </trans-unit>
        <trans-unit id="5734a96bb7c8015d358c2772370daed3c5a33dda" translate="yes" xml:space="preserve">
          <source>Include and exclude specific plugins/built-ins</source>
          <target state="translated">包括和排除特定的插件/内置程序。</target>
        </trans-unit>
        <trans-unit id="6753a5568ba6c204cdda91995f115f0824340fde" translate="yes" xml:space="preserve">
          <source>Include class properties and private methods</source>
          <target state="translated">包括类属性和私有方法</target>
        </trans-unit>
        <trans-unit id="a5fc8afc1b19a096dd35dac7d21b434a0393ad74" translate="yes" xml:space="preserve">
          <source>Include class static block and import assertions</source>
          <target state="translated">包括类静态块和导入断言。</target>
        </trans-unit>
        <trans-unit id="c9c0200e5e5973b1106b3c4eeceebb1e2ade09f5" translate="yes" xml:space="preserve">
          <source>Include numeric separator</source>
          <target state="translated">包括数字分隔符</target>
        </trans-unit>
        <trans-unit id="a6a894e7505c25eb7b90f5207a2676da2420eea9" translate="yes" xml:space="preserve">
          <source>Include the AST in the returned object</source>
          <target state="translated">在返回的对象中包含AST</target>
        </trans-unit>
        <trans-unit id="a3aa48e75f460f2323c642f271036cd3fda56db7" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;compact: true&lt;/code&gt;, omits block-end semicolons, omits &lt;code&gt;()&lt;/code&gt; from &lt;code&gt;new Foo()&lt;/code&gt; when possible, and may output shorter versions of literals.</source>
          <target state="translated">包括 &lt;code&gt;compact: true&lt;/code&gt; ，省略了块端分号，省略了 &lt;code&gt;()&lt;/code&gt; 从 &lt;code&gt;new Foo()&lt;/code&gt; 时可能的，并且可以输出更短的版本文字的。</target>
        </trans-unit>
        <trans-unit id="83bf669220fda133e50689018c2e1f56687ed0fd" translate="yes" xml:space="preserve">
          <source>Indicate the mode the code should be parsed in. Can be either &amp;ldquo;script&amp;rdquo; or &amp;ldquo;module&amp;rdquo;.</source>
          <target state="translated">指示代码应解析的模式。可以是&amp;ldquo;脚本&amp;rdquo;或&amp;ldquo;模块&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="6d18be0ee292c7c62f40acd431e4134c6c6ba8ba" translate="yes" xml:space="preserve">
          <source>Indicates that every file should be parsed as TS or TSX (depending on the &lt;code&gt;isTSX&lt;/code&gt; option).</source>
          <target state="translated">指示应将每个文件解析为TS或TSX（取决于 &lt;code&gt;isTSX&lt;/code&gt; 选项）。</target>
        </trans-unit>
        <trans-unit id="d3b7c1a6f8b968333b68d462673d149649d97d3a" translate="yes" xml:space="preserve">
          <source>Individual plugin/preset items can have several different structures:</source>
          <target state="translated">单个插件/预设项目可以有几种不同的结构。</target>
        </trans-unit>
        <trans-unit id="19268c095beccb5734ca6892225539be141424fd" translate="yes" xml:space="preserve">
          <source>Ineffective browserslist queries</source>
          <target state="translated">无效的浏览器列表查询</target>
        </trans-unit>
        <trans-unit id="f9eda89fd4f110e5f3aa22a4c0afe3e54b7d02ca" translate="yes" xml:space="preserve">
          <source>Initial Release</source>
          <target state="translated">首发</target>
        </trans-unit>
        <trans-unit id="a9f0f84dbe96bbebe9f82aa24b6e7f14a4a757d5" translate="yes" xml:space="preserve">
          <source>Injecting the external helpers</source>
          <target state="translated">注入外部助手</target>
        </trans-unit>
        <trans-unit id="1687a35fe45ca68ba45a317d224acb841abf769f" translate="yes" xml:space="preserve">
          <source>Inline consecutive adds transform</source>
          <target state="translated">内联连续添加变换</target>
        </trans-unit>
        <trans-unit id="df0b0261ad6f5b31df43fdee43fd1760484d1d61" translate="yes" xml:space="preserve">
          <source>Inline environment variables</source>
          <target state="translated">内联环境变量</target>
        </trans-unit>
        <trans-unit id="52c43ef30bd5fa742b8846897abde8068b576f18" translate="yes" xml:space="preserve">
          <source>Inline environment variables transform</source>
          <target state="translated">内联环境变量转换</target>
        </trans-unit>
        <trans-unit id="d72fdfb4c75599673acac566bff134774be9625c" translate="yes" xml:space="preserve">
          <source>Inline the NODE_ENV environment variable and if it's a part of a binary expression</source>
          <target state="translated">内联NODE_ENV环境变量,如果它是一个二进制表达式的一部分</target>
        </trans-unit>
        <trans-unit id="f14ccfc7185f951d3936fd38e5b27b17cd5ef40b" translate="yes" xml:space="preserve">
          <source>Inlines bindings when possible. Tries to evaluate expressions and prunes unreachable as a result</source>
          <target state="translated">尽可能内联绑定。试图评估表达式,并对无法到达的表达式进行修剪。</target>
        </trans-unit>
        <trans-unit id="b568d47f2e244743b1fd7472db836ef9769c21f8" translate="yes" xml:space="preserve">
          <source>Input</source>
          <target state="translated">Input</target>
        </trans-unit>
        <trans-unit id="2ee20587aa27dc8735a8d01a155352c28453ef1f" translate="yes" xml:space="preserve">
          <source>Input (identifier placeholders):</source>
          <target state="translated">输入(标识符占位符):</target>
        </trans-unit>
        <trans-unit id="b703b1039b911e4c34b53034834b894e26aabb21" translate="yes" xml:space="preserve">
          <source>Input (syntactic placeholders):</source>
          <target state="translated">输入(语法占位符)。</target>
        </trans-unit>
        <trans-unit id="3541d8fcf37c4248973bc326305580fd790ff8ee" translate="yes" xml:space="preserve">
          <source>Inside a plugin:</source>
          <target state="translated">在一个插件里面。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">Install</target>
        </trans-unit>
        <trans-unit id="d277ab8fcfe1921ec018dae7bd72a54b1c3d04c8" translate="yes" xml:space="preserve">
          <source>Install command</source>
          <target state="translated">安装命令</target>
        </trans-unit>
        <trans-unit id="2f995679d2e34524737a3a8f08a2e9d73df6ae85" translate="yes" xml:space="preserve">
          <source>Install it as development dependency.</source>
          <target state="translated">将其作为开发依赖安装。</target>
        </trans-unit>
        <trans-unit id="f0a7ac0bb8ad5f5621a49677c8fe336df7abb815" translate="yes" xml:space="preserve">
          <source>Install the CLI and this preset</source>
          <target state="translated">安装CLI和此预设</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="03e5b8ead1a42b8781c6be0395396c7a473dab43" translate="yes" xml:space="preserve">
          <source>Instead of individual plugins, you can also enable a set of plugins in a &lt;a href=&quot;https://babeljs.io/docs/en/presets&quot;&gt;preset&lt;/a&gt;.</source>
          <target state="translated">除了单独的插件，您还可以在&lt;a href=&quot;https://babeljs.io/docs/en/presets&quot;&gt;预设中&lt;/a&gt;启用一组插件。</target>
        </trans-unit>
        <trans-unit id="ac7e138dd15738dd6a829b66e962be465e51631d" translate="yes" xml:space="preserve">
          <source>Instructs Babel to run each of the presets in the &lt;code&gt;presets&lt;/code&gt; array as an independent pass. This option tends to introduce a lot of confusion around the exact ordering of plugins, but can be useful if you absolutely need to run a set of operations as independent compilation passes.</source>
          <target state="translated">指示Babel作为独立遍历来运行 &lt;code&gt;presets&lt;/code&gt; 数组中的每个预设。此选项会给插件的确切顺序带来很多混乱，但是如果您在独立编译过程中绝对需要运行一组操作时，此选项将很有用。</target>
        </trans-unit>
        <trans-unit id="76d5733b82b9b85e7c7c9538c8b1cbf395dc743e" translate="yes" xml:space="preserve">
          <source>Internet Explorer</source>
          <target state="translated">互联网浏览器</target>
        </trans-unit>
        <trans-unit id="0e26b9058f90e8eb5b897459898d4c7755539da5" translate="yes" xml:space="preserve">
          <source>Invalid Usage</source>
          <target state="translated">无效使用</target>
        </trans-unit>
        <trans-unit id="480466d26bb15e9f1e93044698c8c7548ebb60a5" translate="yes" xml:space="preserve">
          <source>Is compiled roughly to</source>
          <target state="translated">大致编制为</target>
        </trans-unit>
        <trans-unit id="f277429ad963d2b0e8b8e96707df10d75555da89" translate="yes" xml:space="preserve">
          <source>It basically allows to use the &lt;a href=&quot;http://mdn.io/new.target&quot;&gt;new.target&lt;/a&gt; feature on ES2015 classes:</source>
          <target state="translated">它基本上允许在ES2015类上使用&lt;a href=&quot;http://mdn.io/new.target&quot;&gt;new.target&lt;/a&gt;功能：</target>
        </trans-unit>
        <trans-unit id="517e25037c301e39d5942b32476cde5c97ab6e95" translate="yes" xml:space="preserve">
          <source>It can be safely passed back to Babel. Fields like &lt;a href=&quot;../options/index#babelrc&quot;&gt;&lt;code&gt;&quot;babelrc&quot;&lt;/code&gt;&lt;/a&gt; have been set to &lt;code&gt;false&lt;/code&gt; so that later calls to Babel will not make a second attempt to load config files.</source>
          <target state="translated">它可以安全地传递回Babel。诸如&lt;a href=&quot;../options/index#babelrc&quot;&gt; &lt;code&gt;&quot;babelrc&quot;&lt;/code&gt; &lt;/a&gt;类的字段已设置为 &lt;code&gt;false&lt;/code&gt; ,以便以后对Babel的调用不会再次尝试加载配置文件。</target>
        </trans-unit>
        <trans-unit id="ae3110b68fe3d671e423787b420151da4d411ae9" translate="yes" xml:space="preserve">
          <source>It can be safely passed back to Babel. Options like &lt;a href=&quot;../options/index#babelrc&quot;&gt;&lt;code&gt;&quot;babelrc&quot;&lt;/code&gt;&lt;/a&gt; have been set to false so that later calls to Babel will not make a second attempt to load config files.</source>
          <target state="translated">它可以安全地传递回Babel。诸如&lt;a href=&quot;../options/index#babelrc&quot;&gt; &lt;code&gt;&quot;babelrc&quot;&lt;/code&gt; &lt;/a&gt;类的选项已设置为false，以便以后对Babel的调用不会再次尝试加载配置文件。</target>
        </trans-unit>
        <trans-unit id="96d6457a96dfc60487936ca1667200555a4d77f7" translate="yes" xml:space="preserve">
          <source>It can be seen as a complex version of the &lt;a href=&quot;http://mdn.io/ternary&quot;&gt;ternary operator&lt;/a&gt;:</source>
          <target state="translated">可以将其视为&lt;a href=&quot;http://mdn.io/ternary&quot;&gt;三元运算符&lt;/a&gt;的复杂版本：</target>
        </trans-unit>
        <trans-unit id="8823803980e84ec9c176a779a235397af711e23d" translate="yes" xml:space="preserve">
          <source>It can be very handy when used with &lt;code&gt;document.querySelectorAll&lt;/code&gt;:</source>
          <target state="translated">与 &lt;code&gt;document.querySelectorAll&lt;/code&gt; 一起使用时可以非常方便：</target>
        </trans-unit>
        <trans-unit id="b6598c808239dddedb570292dbd442653c18e4db" translate="yes" xml:space="preserve">
          <source>It currently includes:</source>
          <target state="translated">它目前包括:</target>
        </trans-unit>
        <trans-unit id="e3f218f5e5aa27ef441255fc58d3adaba9418025" translate="yes" xml:space="preserve">
          <source>It has a few different forms:</source>
          <target state="translated">它有几种不同的形式。</target>
        </trans-unit>
        <trans-unit id="2d3b4249bdc2a6a6c8d009563f4b17860390e47e" translate="yes" xml:space="preserve">
          <source>It is currently possible to implement something like that using &lt;a href=&quot;http://mdn.io/new.target&quot;&gt;new.target&lt;/a&gt; (see &lt;a href=&quot;https://github.com/tc39/ecma262/blob/master/workingdocs/callconstructor.md#motivating-example&quot;&gt;example in proposal&lt;/a&gt;) and this new feature makes it available for ES2015 classes.</source>
          <target state="translated">当前可以使用&lt;a href=&quot;http://mdn.io/new.target&quot;&gt;new.target&lt;/a&gt;来实现类似的功能（请参阅&lt;a href=&quot;https://github.com/tc39/ecma262/blob/master/workingdocs/callconstructor.md#motivating-example&quot;&gt;proposal中的示例&lt;/a&gt;），并且此新功能使其可用于ES2015类。</target>
        </trans-unit>
        <trans-unit id="5b9047ccca756daf5463cce67988e55011970c4f" translate="yes" xml:space="preserve">
          <source>It is important to note that &lt;code&gt;@babel/preset-env&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; support &lt;code&gt;stage-x&lt;/code&gt; plugins.</source>
          <target state="translated">这是需要注意的重要 &lt;code&gt;@babel/preset-env&lt;/code&gt; 并&lt;em&gt;不能&lt;/em&gt;支持 &lt;code&gt;stage-x&lt;/code&gt; 插件。</target>
        </trans-unit>
        <trans-unit id="299a8dd3c998f2a70a6335c5050e028a215763fe" translate="yes" xml:space="preserve">
          <source>It is important to remember that with presets, the order is &lt;em&gt;reversed&lt;/em&gt;. The following:</source>
          <target state="translated">重要的是要记住，对于预设，顺序是&lt;em&gt;相反的&lt;/em&gt;。下列：</target>
        </trans-unit>
        <trans-unit id="9e38850b4955f3fdb55fe7cfe1c16063cef56001" translate="yes" xml:space="preserve">
          <source>It means you do not have an implicit dependency on the environment you are working in. Making your project far more portable and easier to setup.</source>
          <target state="translated">这意味着你对你工作的环境没有隐性依赖。使你的项目更加可移植,更容易设置。</target>
        </trans-unit>
        <trans-unit id="79770b61b7e39bfcc05e9c90acca7c43ca192577" translate="yes" xml:space="preserve">
          <source>It replaces &lt;code&gt;&quot;@babel/polyfill&quot;&lt;/code&gt; entry imports</source>
          <target state="translated">它替代了 &lt;code&gt;&quot;@babel/polyfill&quot;&lt;/code&gt; 条目的导入</target>
        </trans-unit>
        <trans-unit id="40750f1b3698522f3f29ceaab086d637440995c3" translate="yes" xml:space="preserve">
          <source>It replaces &lt;code&gt;&quot;core-js/stable&quot;&lt;/code&gt; and &lt;code&gt;&quot;regenerator-runtime/runtime&quot;&lt;/code&gt; entry imports</source>
          <target state="translated">它替换了 &lt;code&gt;&quot;core-js/stable&quot;&lt;/code&gt; 和 &lt;code&gt;&quot;regenerator-runtime/runtime&quot;&lt;/code&gt; 条目导入</target>
        </trans-unit>
        <trans-unit id="ff864085d74dc2fcef8ca7ad4b662df3e7f63cbe" translate="yes" xml:space="preserve">
          <source>It won&amp;rsquo;t include &lt;code&gt;stage-x&lt;/code&gt; plugins. env will support all plugins in what we consider the latest version of JavaScript (by matching what we do in &lt;a href=&quot;../preset-latest/index&quot;&gt;&lt;code&gt;babel-preset-latest&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">它不包括 &lt;code&gt;stage-x&lt;/code&gt; 插件。 env将支持我们认为最新版本的JavaScript中的所有插件（通过匹配我们在&lt;a href=&quot;../preset-latest/index&quot;&gt; &lt;code&gt;babel-preset-latest&lt;/code&gt; 中&lt;/a&gt;所做的工作）。</target>
        </trans-unit>
        <trans-unit id="55346da4d9d78340bf07a12dc0d7a5096be24cb1" translate="yes" xml:space="preserve">
          <source>JS config files may export a function that will be passed config function API:</source>
          <target state="translated">JS配置文件可以导出一个函数,该函数将通过配置函数API。</target>
        </trans-unit>
        <trans-unit id="c2d55a667be19087aff85d483d213ee38b41fcfb" translate="yes" xml:space="preserve">
          <source>JS configs are great because they can compute a config on the fly, but the downside there is that it makes caching harder. Babel wants to avoid re-executing the config function every time a file is compiled, because then it would also need to re-execute any plugin and preset functions referenced in that config.</source>
          <target state="translated">JS configs是很好的,因为它们可以在飞行中计算出一个config,但那里的缺点是,它使缓存变得更难。Babel希望避免在每次编译文件时重新执行config函数,因为这样一来,它还需要重新执行该config中引用的任何插件和预设函数。</target>
        </trans-unit>
        <trans-unit id="f17807a2d69cbb718ba55f793f82c675ac80e8e7" translate="yes" xml:space="preserve">
          <source>JSX and React</source>
          <target state="translated">JSX和React</target>
        </trans-unit>
        <trans-unit id="8bcaccaca9f3b3d56f4cab92b0b4817d771ed95e" translate="yes" xml:space="preserve">
          <source>JScript transform</source>
          <target state="translated">JScript转换</target>
        </trans-unit>
        <trans-unit id="7d01aa9c03f248e94b3a29c51d2d3eb36e7fe35b" translate="yes" xml:space="preserve">
          <source>JavaScript configuration files can either export an object, or a function that when called will return the generated configuration. Function-returning configs are given a few special powers because they can access an API exposed by Babel itself. See &lt;a href=&quot;#config-function-api&quot;&gt;Config Function API&lt;/a&gt; for more information.</source>
          <target state="translated">JavaScript配置文件可以导出对象，也可以导出一个函数，该函数在调用时将返回生成的配置。函数返回配置具有一些特殊的功能，因为它们可以访问Babel本身公开的API。有关更多信息，请参见&lt;a href=&quot;#config-function-api&quot;&gt;Config Function API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c7afff3f789cd350ad5ef2e0ccd58b4b677f1d64" translate="yes" xml:space="preserve">
          <source>Jest</source>
          <target state="translated">Jest</target>
        </trans-unit>
        <trans-unit id="d8b0ed66ac33f16d9c260b437c782d6487c25f06" translate="yes" xml:space="preserve">
          <source>Jest is often installed at the root of the monorepo and may not require configuration, but if it is installed per-package it can unfortunately be more complex to configure.</source>
          <target state="translated">Jest 通常安装在 monorepo 的根目录下,可能不需要配置,但如果按包安装,则不幸的是配置起来会比较复杂。</target>
        </trans-unit>
        <trans-unit id="5e5366c4e24619ac93385787444deec04c8032d6" translate="yes" xml:space="preserve">
          <source>Just like method assignment in classes, in loose mode, computed property names use simple assignments instead of being defined. This is unlikely to be an issue in production code.</source>
          <target state="translated">就像类中的方法赋值一样,在松散模式下,计算出的属性名使用简单的赋值而不是被定义。这在生产代码中不太可能是一个问题。</target>
        </trans-unit>
        <trans-unit id="c148024e2676e59f4ceef4dc3fa9b852c4ae5a63" translate="yes" xml:space="preserve">
          <source>Just some things to keep in mind when using Babel.</source>
          <target state="translated">只是在使用Babel时需要注意的一些事项。</target>
        </trans-unit>
        <trans-unit id="819f46032d151fbc83b888fce06e8becbc1ba90d" translate="yes" xml:space="preserve">
          <source>Language extensions</source>
          <target state="translated">语言扩展</target>
        </trans-unit>
        <trans-unit id="d054ee089b94e9b7d7628ad9595d7ed176bff718" translate="yes" xml:space="preserve">
          <source>Latest ECMAScript features</source>
          <target state="translated">最新ECMAScript功能</target>
        </trans-unit>
        <trans-unit id="d4b97aded89004461a65d6222604bd9e8f6ec0ae" translate="yes" xml:space="preserve">
          <source>Latest preset</source>
          <target state="translated">最新预设</target>
        </trans-unit>
        <trans-unit id="b6ae8cd5b9d8efbb303d420973879821f0ef8594" translate="yes" xml:space="preserve">
          <source>Launch a REPL (Read-Eval-Print-Loop).</source>
          <target state="translated">启动REPL(Read-Eval-Print-Loop)。</target>
        </trans-unit>
        <trans-unit id="c85a18aba352f9fa16d26629bb92bf138d2a8cd9" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;https://facebook.github.io/jsx/&quot;&gt;JSX&lt;/a&gt;</source>
          <target state="translated">了解有关&lt;a href=&quot;https://facebook.github.io/jsx/&quot;&gt;JSX的&lt;/a&gt;更多信息</target>
        </trans-unit>
        <trans-unit id="ba40f49cfcdad3d4b4438e3e9e8d80f730c577f5" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt; and &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;</source>
          <target state="translated">了解有关&lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt;和&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript的&lt;/a&gt;更多信息</target>
        </trans-unit>
        <trans-unit id="3dd631f9f93df8060b00ae3f338145143d8b0734" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say you have this function:</source>
          <target state="translated">假设您具有以下功能：</target>
        </trans-unit>
        <trans-unit id="703d2894605d209f4c6494ddcd874dfd0e2ad1e6" translate="yes" xml:space="preserve">
          <source>Let's use the following as an example:</source>
          <target state="translated">我们用下面的例子来说明。</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">根据麻省理工学院许可证授权。</target>
        </trans-unit>
        <trans-unit id="c2843c8e0a404c479b6d192eb1485803b9c51b6a" translate="yes" xml:space="preserve">
          <source>List of &lt;a href=&quot;https://babeljs.io/docs/plugins/&quot;&gt;plugins&lt;/a&gt; to load and use.</source>
          <target state="translated">加载和使用的&lt;a href=&quot;https://babeljs.io/docs/plugins/&quot;&gt;插件&lt;/a&gt;列表。</target>
        </trans-unit>
        <trans-unit id="7c3bda5f86d92680774977b56483fb413d47fb36" translate="yes" xml:space="preserve">
          <source>List of &lt;a href=&quot;https://babeljs.io/docs/plugins/#presets&quot;&gt;presets&lt;/a&gt; (a set of plugins) to load and use.</source>
          <target state="translated">要加载和使用的&lt;a href=&quot;https://babeljs.io/docs/plugins/#presets&quot;&gt;预设&lt;/a&gt;列表（一组插件）。</target>
        </trans-unit>
        <trans-unit id="dcbbff2b3646b9436fd83339e8bbcc6c676ff4ab" translate="yes" xml:space="preserve">
          <source>List of extensions to hook into</source>
          <target state="translated">钩入的扩展列表</target>
        </trans-unit>
        <trans-unit id="cd1453c216a81292066ba156f884a62c601b9732" translate="yes" xml:space="preserve">
          <source>Loading configuration can get a little complex as environments can have several types of configuration files, and those configuration files can have various nested configuration objects that apply depending on the configuration.</source>
          <target state="translated">加载配置可能会变得有点复杂,因为环境可以有几种类型的配置文件,而这些配置文件可以有各种嵌套的配置对象,根据配置的不同而适用。</target>
        </trans-unit>
        <trans-unit id="a8d93ca988bf586152bce64f44acae82e0836785" translate="yes" xml:space="preserve">
          <source>Local paths are much more likely to have circular dependencies, which may break if loaded lazily, so they are not lazy by default, whereas dependencies between independent modules are rarely cyclical.</source>
          <target state="translated">本地路径更容易出现循环依赖,如果懒加载可能会断裂,所以默认不懒,而独立模块之间的依赖很少是循环的。</target>
        </trans-unit>
        <trans-unit id="ab6d9f7a623997c94fc2dc1befb28e9c9cd56961" translate="yes" xml:space="preserve">
          <source>Lookup behavior</source>
          <target state="translated">查找行为</target>
        </trans-unit>
        <trans-unit id="f397823ca895bfd31cace4e386f017ddb2062f01" translate="yes" xml:space="preserve">
          <source>Loose mode preserves &quot;holes&quot; when spreading an array (for example, &lt;code&gt;[ ...Array(2) ]&lt;/code&gt; produces &lt;code&gt;[ (hole), (hole) ]&lt;/code&gt;). Set loose to &lt;code&gt;false&lt;/code&gt; to avoid this behaviour.</source>
          <target state="translated">散布模式在散布数组时保留&amp;ldquo;空洞&amp;rdquo;（例如 &lt;code&gt;[ ...Array(2) ]&lt;/code&gt; 产生 &lt;code&gt;[ (hole), (hole) ]&lt;/code&gt; ）。设置为 &lt;code&gt;false&lt;/code&gt; 可以避免这种行为。</target>
        </trans-unit>
        <trans-unit id="255c904cd0071f687aa2731911da584b7d82d878" translate="yes" xml:space="preserve">
          <source>MDN: Destructuring assignment</source>
          <target state="translated">MDN:破坏性转让</target>
        </trans-unit>
        <trans-unit id="6a2e056a1497a00df6461737f8bc3cb67eb4851b" translate="yes" xml:space="preserve">
          <source>MDN: Object.prototype.__proto__</source>
          <target state="translated">DND:Object.prototype.__proto__。</target>
        </trans-unit>
        <trans-unit id="08a5a5fac8870633e025c00728e2ceb6c1559c1c" translate="yes" xml:space="preserve">
          <source>MDN: Spread syntax</source>
          <target state="translated">MDN:扩散语法</target>
        </trans-unit>
        <trans-unit id="318659b09f6e49f66a531299be77bc0acb6583b6" translate="yes" xml:space="preserve">
          <source>MDN: Symbol.hasInstance</source>
          <target state="translated">MDN:Symbol.hasInstance</target>
        </trans-unit>
        <trans-unit id="cf54b9f0dee7e1751e1c11675c51b8d726e0c08b" translate="yes" xml:space="preserve">
          <source>Maintain a mapping between JavaScript features and Babel plugins</source>
          <target state="translated">维护JavaScript功能和巴别插件之间的映射。</target>
        </trans-unit>
        <trans-unit id="4a9f48146ab614d83e80774e54c10857fb150663" translate="yes" xml:space="preserve">
          <source>Make a .babelrc config file with the preset</source>
          <target state="translated">在.babelrc配置文件中加入预设值。</target>
        </trans-unit>
        <trans-unit id="0f6f5f3603b3cb061b81f492e5066723abb8afe3" translate="yes" xml:space="preserve">
          <source>Make expression as uniform as possible for better compressibility</source>
          <target state="translated">使表达方式尽量统一,以提高可压缩性。</target>
        </trans-unit>
        <trans-unit id="ea309b43f577ace44e647ab0db41ab266315b805" translate="yes" xml:space="preserve">
          <source>Make sure it is called before all other code/require statements!</source>
          <target state="translated">确保它在所有其他代码/require语句之前被调用!</target>
        </trans-unit>
        <trans-unit id="99ae1257acce2d6c72289f78ef727e3bdd7829bb" translate="yes" xml:space="preserve">
          <source>Make sure you include &lt;code&gt;@babel/runtime&lt;/code&gt; as a dependency.</source>
          <target state="translated">确保包括 &lt;code&gt;@babel/runtime&lt;/code&gt; 作为依赖项。</target>
        </trans-unit>
        <trans-unit id="31d53d50d191c14fa58473c076a6a35ec3309200" translate="yes" xml:space="preserve">
          <source>Make sure you include &lt;code&gt;babel-runtime&lt;/code&gt; as a dependency.</source>
          <target state="translated">确保将 &lt;code&gt;babel-runtime&lt;/code&gt; 包含为依赖项。</target>
        </trans-unit>
        <trans-unit id="6a4de8d7e33a9a77cee183f3a0ba84ec8d89bb60" translate="yes" xml:space="preserve">
          <source>Many other community maintained presets are available &lt;a href=&quot;https://www.npmjs.com/search?q=babel-preset&quot;&gt;on npm&lt;/a&gt;!</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/search?q=babel-preset&quot;&gt;npm上&lt;/a&gt;还有许多其他社区维护的预设！</target>
        </trans-unit>
        <trans-unit id="418c3253efe65a76d92fbf13378793011cd9c309" translate="yes" xml:space="preserve">
          <source>Many systems that wrap Babel like to automatically inject plugins and presets, or override options. To accomplish this goal, Babel exposes several functions that aid in loading the configuration part-way without transforming.</source>
          <target state="translated">许多包裹Babel的系统喜欢自动注入插件和预设,或者覆盖选项。为了实现这个目标,Babel公开了几个函数,帮助加载配置部分,而不需要转换。</target>
        </trans-unit>
        <trans-unit id="5219858ccb3ededc3ed33f248e946a9a39444afe" translate="yes" xml:space="preserve">
          <source>Mathias Bynens</source>
          <target state="translated">Mathias Bynens</target>
        </trans-unit>
        <trans-unit id="79a110feb6ff2584fd99cc977038822f2225dd10" translate="yes" xml:space="preserve">
          <source>Member expression literals transform</source>
          <target state="translated">成员表达式变换</target>
        </trans-unit>
        <trans-unit id="83be517978ed6c6473c01c37c1e7e6fa43b8b57c" translate="yes" xml:space="preserve">
          <source>Merge sibling variables into one</source>
          <target state="translated">将同级变量合并为一个变量</target>
        </trans-unit>
        <trans-unit id="2a276dbb2414ff15d2abcf731f4fb7232e51eef8" translate="yes" xml:space="preserve">
          <source>Merge sibling variables transform</source>
          <target state="translated">合并同级变量转换</target>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="627b40d588faf4c4737c18ba997aaf80c07250a2" translate="yes" xml:space="preserve">
          <source>Method assignment</source>
          <target state="translated">方法分配</target>
        </trans-unit>
        <trans-unit id="5c95ae5ee6ef1292b9407054a8ec1326b39177af" translate="yes" xml:space="preserve">
          <source>Method enumerability</source>
          <target state="translated">方法的可枚举性</target>
        </trans-unit>
        <trans-unit id="7a3ea5ae4bbcb0b6c68d07df01c97a3626e4c95d" translate="yes" xml:space="preserve">
          <source>Minification</source>
          <target state="translated">Minification</target>
        </trans-unit>
        <trans-unit id="98f2c3cd3539c15828288b1f2efdc22ef6546665" translate="yes" xml:space="preserve">
          <source>Minify booleans transform</source>
          <target state="translated">最小化booleans变换</target>
        </trans-unit>
        <trans-unit id="9f1dcb1fd876955efdd4aeba77e72b3bc0fd527c" translate="yes" xml:space="preserve">
          <source>Minify constant folding</source>
          <target state="translated">最小化常数折叠</target>
        </trans-unit>
        <trans-unit id="93134d7ba57d8aad9b1a0456e226a526274ee089" translate="yes" xml:space="preserve">
          <source>Minify dead code elimination</source>
          <target state="translated">消除死码的最小化</target>
        </trans-unit>
        <trans-unit id="b2ea1043f8777e68ca8ee74784e8bf16d7846d1e" translate="yes" xml:space="preserve">
          <source>Minify flip comparisons</source>
          <target state="translated">最小化翻转比较</target>
        </trans-unit>
        <trans-unit id="d02e47f66e908f189d9971e9ed6ed24d9dd9e616" translate="yes" xml:space="preserve">
          <source>Minify guarded expressions</source>
          <target state="translated">最小化受保护的表达方式</target>
        </trans-unit>
        <trans-unit id="4a43b98112023381001ade25ef02fc302f4c5485" translate="yes" xml:space="preserve">
          <source>Minify infinity</source>
          <target state="translated">缩小无限大</target>
        </trans-unit>
        <trans-unit id="8db7f30ccc398f29dfe8b7e4297432f0e375df25" translate="yes" xml:space="preserve">
          <source>Minify mangle names</source>
          <target state="translated">最小化杂音名称</target>
        </trans-unit>
        <trans-unit id="48e7dd3dc98d62a3d06665cabac3fdc28aff12a4" translate="yes" xml:space="preserve">
          <source>Minify numeric literals</source>
          <target state="translated">最小化数字文字</target>
        </trans-unit>
        <trans-unit id="f6db95f916ddd76848b917b2ee64bdc7129388d4" translate="yes" xml:space="preserve">
          <source>Minify replace</source>
          <target state="translated">最小化替换</target>
        </trans-unit>
        <trans-unit id="d9b0bb558c05b2493e76fa0f7dd2765a867670aa" translate="yes" xml:space="preserve">
          <source>Minify simplify</source>
          <target state="translated">简化</target>
        </trans-unit>
        <trans-unit id="7c8ebc563914b66aa079b03f40dcc696096097f8" translate="yes" xml:space="preserve">
          <source>Minify type constructors</source>
          <target state="translated">最小化类型构造函数</target>
        </trans-unit>
        <trans-unit id="3f1523752c39c960ebf848f91915bad0f013a319" translate="yes" xml:space="preserve">
          <source>Misc Plugins</source>
          <target state="translated">其他插件</target>
        </trans-unit>
        <trans-unit id="049aa9083162e345f3d2dbf0f0c03260b08d4334" translate="yes" xml:space="preserve">
          <source>Misc options</source>
          <target state="translated">其他选项</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="2e4f9b66f3c39da0f751c71c8d36fe71a8852ec4" translate="yes" xml:space="preserve">
          <source>Monorepo-structured repositories usually contain many packages, which means that they frequently run into the caveats mentioned in &lt;a href=&quot;#file-relative-configuration&quot;&gt;file-relative configuration&lt;/a&gt; and config file loading in general. This section is aimed at helping users understand how to approach monorepo configuration.</source>
          <target state="translated">Monorepo结构的存储库通常包含许多软件包，这意味着它们经常会遇到&lt;a href=&quot;#file-relative-configuration&quot;&gt;文件相对配置&lt;/a&gt;和配置文件加载中提到的警告。本部分旨在帮助用户了解如何进行Monorepo配置。</target>
        </trans-unit>
        <trans-unit id="6122ad169357dae2c8973b34a420927c450a3780" translate="yes" xml:space="preserve">
          <source>Monorepos</source>
          <target state="translated">Monorepos</target>
        </trans-unit>
        <trans-unit id="c173ceb3a4ff5f2d1d86b1d5f9f2515aa14b29be" translate="yes" xml:space="preserve">
          <source>More flexible semantics with &lt;code&gt;exactGlobals: true&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;exactGlobals: true&lt;/code&gt; 更灵活的语义：true</target>
        </trans-unit>
        <trans-unit id="b197071bf538802d6215dcf1d8213c91ebe94d1f" translate="yes" xml:space="preserve">
          <source>NODE_ENV inline transform</source>
          <target state="translated">NODE_ENV inline transform</target>
        </trans-unit>
        <trans-unit id="909bea29b0f17e7e129179effccfea641666f6a6" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;targets.uglify&lt;/code&gt; is deprecated and will be removed in the next major in favor of this.</source>
          <target state="translated">注意： &lt;code&gt;targets.uglify&lt;/code&gt; 已被弃用，并将在下一个主要版本中删除，以支持此操作。</target>
        </trans-unit>
        <trans-unit id="803499e4906ca1f1690e43e011898898d8024015" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;whitelist&lt;/code&gt; is deprecated and will be removed in the next major in favor of this.</source>
          <target state="translated">注意：不赞成使用 &lt;code&gt;whitelist&lt;/code&gt; ，因此将在下一个主要版本中将其删除。</target>
        </trans-unit>
        <trans-unit id="2468da0c03105f2c6006f18304e97f6d8329e59c" translate="yes" xml:space="preserve">
          <source>NOTE: Compatibility with &lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt;</source>
          <target state="translated">注意：与 &lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt; 兼容性</target>
        </trans-unit>
        <trans-unit id="bc2fd32cc66067004aba0b3d7880b15893967d2d" translate="yes" xml:space="preserve">
          <source>NOTE: Instance methods such as &lt;code&gt;&quot;foobar&quot;.includes(&quot;foo&quot;)&lt;/code&gt; will not work since that would require modification of existing built-ins (Use &lt;a href=&quot;../../usage/polyfill/index&quot;&gt;&lt;code&gt;babel-polyfill&lt;/code&gt;&lt;/a&gt; for that).</source>
          <target state="translated">注意：诸如 &lt;code&gt;&quot;foobar&quot;.includes(&quot;foo&quot;)&lt;/code&gt; 类的实例方法将不起作用，因为这将需要修改现有内置组件（为此使用&lt;a href=&quot;../../usage/polyfill/index&quot;&gt; &lt;code&gt;babel-polyfill&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="74cd88077799bfb69fb84bf89de0b261134b42c0" translate="yes" xml:space="preserve">
          <source>NOTE: Instance methods such as &lt;code&gt;&quot;foobar&quot;.includes(&quot;foo&quot;)&lt;/code&gt; will only work with &lt;code&gt;core-js@3&lt;/code&gt;. If you need to polyfill them, you can directly import &lt;code&gt;&quot;core-js&quot;&lt;/code&gt; or use &lt;code&gt;@babel/preset-env&lt;/code&gt;'s &lt;code&gt;useBuiltIns&lt;/code&gt; option.</source>
          <target state="translated">注意：诸如 &lt;code&gt;&quot;foobar&quot;.includes(&quot;foo&quot;)&lt;/code&gt; 类的实例方法仅适用于 &lt;code&gt;core-js@3&lt;/code&gt; 。如果需要填充它们，可以直接导入 &lt;code&gt;&quot;core-js&quot;&lt;/code&gt; 或使用 &lt;code&gt;@babel/preset-env&lt;/code&gt; 的 &lt;code&gt;useBuiltIns&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="b2123fbe853b36753dc1eca452a5658c785c89e7" translate="yes" xml:space="preserve">
          <source>NOTE: Only use &lt;code&gt;import &quot;core-js&quot;;&lt;/code&gt; and &lt;code&gt;import &quot;regenerator-runtime/runtime&quot;;&lt;/code&gt; once in your whole app. If you are using &lt;code&gt;@babel/polyfill&lt;/code&gt;, it already includes both &lt;code&gt;core-js&lt;/code&gt; and &lt;code&gt;regenerator-runtime&lt;/code&gt;: importing it twice will throw an error. Multiple imports or requires of those packages might cause global collisions and other issues that are hard to trace. We recommend creating a single entry file that only contains the &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="translated">注意：仅使用 &lt;code&gt;import &quot;core-js&quot;;&lt;/code&gt; 并 &lt;code&gt;import &quot;regenerator-runtime/runtime&quot;;&lt;/code&gt; 一次在您的整个应用中。如果您使用 &lt;code&gt;@babel/polyfill&lt;/code&gt; ，它已经包含 &lt;code&gt;core-js&lt;/code&gt; 和 &lt;code&gt;regenerator-runtime&lt;/code&gt; ：两次导入将引发错误。多次导入或需要这些软件包可能会导致全局冲突和其他难以跟踪的问题。我们建议创建一个仅包含 &lt;code&gt;import&lt;/code&gt; 语句的单个条目文件。</target>
        </trans-unit>
        <trans-unit id="f1dffbc12dce55c98a2cc67b563294dac98f10b4" translate="yes" xml:space="preserve">
          <source>NOTE: Only use &lt;code&gt;require(&quot;babel-polyfill&quot;);&lt;/code&gt; once in your whole app. Multiple imports or requires of &lt;code&gt;babel-polyfill&lt;/code&gt; will throw an error since it can cause global collisions and other issues that are hard to trace. We recommend creating a single entry file that only contains the &lt;code&gt;require&lt;/code&gt; statement.</source>
          <target state="translated">注意：仅使用 &lt;code&gt;require(&quot;babel-polyfill&quot;);&lt;/code&gt; 一次出现在您的整个应用中。多次导入或需要 &lt;code&gt;babel-polyfill&lt;/code&gt; 都会引发错误，因为它可能导致全局冲突和其他难以跟踪的问题。我们建议创建一个仅包含 &lt;code&gt;require&lt;/code&gt; 语句的单个条目文件。</target>
        </trans-unit>
        <trans-unit id="6f512c5c7bb9885699e7fd1d5536bd01b8fbca70" translate="yes" xml:space="preserve">
          <source>NOTE: The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; options &lt;em&gt;only&lt;/em&gt; work with the &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js&quot;&gt;plugins included with this preset&lt;/a&gt;; so, for example, including &lt;code&gt;transform-do-expressions&lt;/code&gt; or excluding &lt;code&gt;transform-function-bind&lt;/code&gt; will throw errors. To use a plugin &lt;em&gt;not&lt;/em&gt; included with this preset, add them to your &lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;config&lt;/a&gt; directly.</source>
          <target state="translated">注意： &lt;code&gt;include&lt;/code&gt; 和 &lt;code&gt;exclude&lt;/code&gt; 选项&lt;em&gt;仅&lt;/em&gt;适用&lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js&quot;&gt;于此预设所包含&lt;/a&gt;的插件；因此，例如，包含 &lt;code&gt;transform-do-expressions&lt;/code&gt; 或不包含 &lt;code&gt;transform-function-bind&lt;/code&gt; 都将引发错误。要使用此预设&lt;em&gt;不&lt;/em&gt;附带的插件，请将其直接添加到您的&lt;a href=&quot;https://babeljs.io/docs/usage/babelrc/&quot;&gt;配置中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e5f63009fa05d57dba999b909f45ca9c2f2478b" translate="yes" xml:space="preserve">
          <source>NOTE: The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; options &lt;em&gt;only&lt;/em&gt; work with the &lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-compat-data/scripts/data/plugin-features.js&quot;&gt;plugins included with this preset&lt;/a&gt;; so, for example, including &lt;code&gt;@babel/plugin-proposal-do-expressions&lt;/code&gt; or excluding &lt;code&gt;@babel/plugin-proposal-function-bind&lt;/code&gt; will throw errors. To use a plugin &lt;em&gt;not&lt;/em&gt; included with this preset, add them to your &lt;a href=&quot;../options/index#plugins&quot;&gt;&quot;plugins&quot;&lt;/a&gt; directly.</source>
          <target state="translated">注意： &lt;code&gt;include&lt;/code&gt; 和 &lt;code&gt;exclude&lt;/code&gt; 选项&lt;em&gt;仅&lt;/em&gt;适用&lt;a href=&quot;https://github.com/babel/babel/blob/master/packages/babel-compat-data/scripts/data/plugin-features.js&quot;&gt;于此预设所包含&lt;/a&gt;的插件；因此，例如，包含 &lt;code&gt;@babel/plugin-proposal-do-expressions&lt;/code&gt; 或排除 &lt;code&gt;@babel/plugin-proposal-function-bind&lt;/code&gt; 都会引发错误。要使用此预设&lt;em&gt;不&lt;/em&gt;附带的插件，请将其直接添加到您的&lt;a href=&quot;../options/index#plugins&quot;&gt;&amp;ldquo;插件&amp;rdquo;中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd0cd77c75466359ad438c518fe8d04b98256b17" translate="yes" xml:space="preserve">
          <source>NOTE: This does not currently polyfill experimental/stage-x built-ins like the regular &amp;ldquo;babel-polyfill&amp;rdquo; does. This will only work with npm &amp;gt;= 3 (which should be used with Babel 6 anyway)</source>
          <target state="translated">注意：目前，它不像常规的&amp;ldquo; babel-polyfill&amp;rdquo;那样，polyfill实验性/ stage-x内置函数。这仅适用于npm&amp;gt; = 3（无论如何应与Babel 6一起使用）</target>
        </trans-unit>
        <trans-unit id="d3fd5fa87145163be32ac714f083da9db23057e4" translate="yes" xml:space="preserve">
          <source>NOTE: This option does &lt;em&gt;not&lt;/em&gt; affect loading of &lt;a href=&quot;../config-files/index#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt; files, so while it may be tempting to do &lt;code&gt;configFile: &quot;./foo/.babelrc.json&quot;&lt;/code&gt;, it is not recommended. If the given &lt;a href=&quot;../config-files/index#file-relative-configuration&quot;&gt;&lt;code&gt;.babelrc.json&lt;/code&gt;&lt;/a&gt; is loaded via the standard file-relative logic, you'll end up loading the same config file twice, merging it with itself. If you are linking a specific config file, it is recommended to stick with a naming scheme that is independent of the &quot;babelrc&quot; name.</source>
          <target state="translated">注：此选项并&lt;em&gt;不会&lt;/em&gt;影响装载&lt;a href=&quot;../config-files/index#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt;文件，所以虽然它可能是很有诱惑力的做 &lt;code&gt;configFile: &quot;./foo/.babelrc.json&quot;&lt;/code&gt; ，所以不推荐。如果给定的&lt;a href=&quot;../config-files/index#file-relative-configuration&quot;&gt; &lt;code&gt;.babelrc.json&lt;/code&gt; &lt;/a&gt;是通过标准的相对文件逻辑加载的，则最终将加载相同的配置文件两次，并将其与自身合并。如果要链接特定的配置文件，建议坚持使用与&amp;ldquo; babelrc&amp;rdquo;名称无关的命名方案。</target>
        </trans-unit>
        <trans-unit id="df9980d75cb3880a56d10233cb9d75b6544d78e0" translate="yes" xml:space="preserve">
          <source>NOTE: This plugin generates code that needs ES6 regular expressions functionalities. If you need to support older browsers, use either the &lt;code&gt;runtime: false&lt;/code&gt; option or import a proper polyfill (e.g. &lt;code&gt;core-js&lt;/code&gt;).</source>
          <target state="translated">注意：此插件生成需要ES6正则表达式功能的代码。如果需要支持较旧的浏览器，请使用 &lt;code&gt;runtime: false&lt;/code&gt; 选项或导入适当的polyfill（例如 &lt;code&gt;core-js&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6f6801a480ba902d742082bf48c6e9a016c11695" translate="yes" xml:space="preserve">
          <source>NOTE: This will be enabled by default in Babel 8</source>
          <target state="translated">注意:在Babel 8中默认启用。</target>
        </trans-unit>
        <trans-unit id="681cec7aa9eb71d220811ed7886395a29aa8d835" translate="yes" xml:space="preserve">
          <source>NOTE: Transform plugins automatically inherit/use the syntax plugins so you don&amp;rsquo;t need to specify the syntax plugin if the corresponding transform plugin is used already.</source>
          <target state="translated">注意：转换插件会自动继承/使用语法插件，因此，如果已经使用了相应的转换插件，则无需指定语法插件。</target>
        </trans-unit>
        <trans-unit id="5caa5682e7d712ae19fdba1ac2d9ae111c4a6490" translate="yes" xml:space="preserve">
          <source>NOTE: Uglify has a work-in-progress &quot;Harmony&quot; branch to address the lack of ES6 support, but it is not yet stable. You can follow its progress in &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/issues/448&quot;&gt;UglifyJS2 issue #448&lt;/a&gt;. If you require an alternative minifier which &lt;em&gt;does&lt;/em&gt; support ES6 syntax, we recommend using &lt;a href=&quot;../babel-preset-minify/index&quot;&gt;babel-minify&lt;/a&gt;.</source>
          <target state="translated">注意：Uglify有一个进行中的&amp;ldquo; Harmony&amp;rdquo;分支来解决缺少ES6支持的问题，但是它还不稳定。您可以在&lt;a href=&quot;https://github.com/mishoo/UglifyJS2/issues/448&quot;&gt;UglifyJS2问题＃448中&lt;/a&gt;了解其进度。如果你需要一个替代minifier它&lt;em&gt;确实&lt;/em&gt;支持ES6语法，我们推荐使用&lt;a href=&quot;../babel-preset-minify/index&quot;&gt;巴贝尔-缩小&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ef285bfca8b1154cf2662dbe70de9352070814ce" translate="yes" xml:space="preserve">
          <source>NOTE: When a plugin is specified multiple times, only the first options are considered.</source>
          <target state="translated">注意:当一个插件被多次指定时,只考虑第一个选项。</target>
        </trans-unit>
        <trans-unit id="92811491304e455bf0756d6f2202ad5bd1d0f902" translate="yes" xml:space="preserve">
          <source>NOTE: When using &lt;code&gt;core-js@2&lt;/code&gt; (either explicitly using the &lt;a href=&quot;#corejs&quot;&gt;&lt;code&gt;corejs: 2&lt;/code&gt;&lt;/a&gt; option or implicitly), &lt;code&gt;@babel/preset-env&lt;/code&gt; will also transform imports and requires of &lt;code&gt;@babel/polyfill&lt;/code&gt;. This behavior is deprecated because it isn't possible to use &lt;code&gt;@babel/polyfill&lt;/code&gt; with different &lt;code&gt;core-js&lt;/code&gt; versions.</source>
          <target state="translated">注意：使用 &lt;code&gt;core-js@2&lt;/code&gt; （显式使用&lt;a href=&quot;#corejs&quot;&gt; &lt;code&gt;corejs: 2&lt;/code&gt; &lt;/a&gt;选项或隐式使用）时， &lt;code&gt;@babel/preset-env&lt;/code&gt; 还将转换 &lt;code&gt;@babel/polyfill&lt;/code&gt; 。不建议使用此行为，因为无法将 &lt;code&gt;@babel/polyfill&lt;/code&gt; 与不同的 &lt;code&gt;core-js&lt;/code&gt; 版本一起使用。</target>
        </trans-unit>
        <trans-unit id="89c1ac1903116872539b2b5e05beff937aa4293c" translate="yes" xml:space="preserve">
          <source>NOTE: transform plugins automatically enable the syntax plugins. So you don't need to specify the syntax plugin if the corresponding transform plugin is used already.</source>
          <target state="translated">注意:变换插件会自动启用语法插件。所以如果已经使用了相应的transform插件,就不需要再指定语法插件。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="84e86ce695fd266b90f412737d63be7ebe5ef7f1" translate="yes" xml:space="preserve">
          <source>Name Normalization</source>
          <target state="translated">名称标准化</target>
        </trans-unit>
        <trans-unit id="0417e4668ace8ab5aabb2750a978639f5e98d009" translate="yes" xml:space="preserve">
          <source>New in Babel 7.x, Babel has a concept of a &lt;a href=&quot;../options/index#root&quot;&gt;&quot;root&quot;&lt;/a&gt; directory, which defaults to the current working directory. For project-wide configuration, Babel will automatically search for a &lt;code&gt;babel.config.json&lt;/code&gt; file, or an equivalent one using the &lt;a href=&quot;#supported-file-extensions&quot;&gt;supported extensions&lt;/a&gt;, in this root directory. Alternatively, users can use an explicit &lt;a href=&quot;../options/index#configfile&quot;&gt;&quot;configFile&quot;&lt;/a&gt; value to override the default config file search behavior.</source>
          <target state="translated">Babel 7.x中的新增功能，Babel具有&lt;a href=&quot;../options/index#root&quot;&gt;&amp;ldquo;根&amp;rdquo;&lt;/a&gt;目录的概念，该目录默认为当前工作目录。对于项目范围的配置，Babel将在此根目录中自动搜索 &lt;code&gt;babel.config.json&lt;/code&gt; 文件或使用受&lt;a href=&quot;#supported-file-extensions&quot;&gt;支持的扩展名&lt;/a&gt;的等效文件。或者，用户可以使用显式的&lt;a href=&quot;../options/index#configfile&quot;&gt;&amp;ldquo; configFile&amp;rdquo;&lt;/a&gt;值来覆盖默认的配置文件搜索行为。</target>
        </trans-unit>
        <trans-unit id="e8c002e69131ee867e0d73281258bb859bd88916" translate="yes" xml:space="preserve">
          <source>No targets</source>
          <target state="translated">无目标</target>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="39208c598f8f515fde64f9754eb85c702248a1b1" translate="yes" xml:space="preserve">
          <source>Normalized</source>
          <target state="translated">Normalized</target>
        </trans-unit>
        <trans-unit id="b42acea1bb30f17e97d4c5487f3a4f58a4983558" translate="yes" xml:space="preserve">
          <source>Not having an implicit dependency on the environment you are working in makes your project far more portable and easier to setup.</source>
          <target state="translated">在你工作的环境中没有隐含的依赖性,使得你的项目更加可移植,更容易设置。</target>
        </trans-unit>
        <trans-unit id="e322e6a9eff09e6f0aa0038f44da6305e6062fe0" translate="yes" xml:space="preserve">
          <source>Not meant for production use</source>
          <target state="translated">不用于生产用途</target>
        </trans-unit>
        <trans-unit id="21609b7b4bc55129f239a4c8441cd0e8d75f291a" translate="yes" xml:space="preserve">
          <source>Not recommended if full support for IE8 and lower is required</source>
          <target state="translated">如果需要完全支持IE8及以下版本,不建议使用。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="8c914181c1395dbbc88303e791c4bc0e07cf0965" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;--keep-file-extension&lt;/code&gt; and &lt;code&gt;--out-file-extension&lt;/code&gt; cannot be used together.</source>
          <target state="translated">请注意，-- &lt;code&gt;--keep-file-extension&lt;/code&gt; 和 &lt;code&gt;--out-file-extension&lt;/code&gt; 不能一起使用。</target>
        </trans-unit>
        <trans-unit id="259649786a634da6ce8bc64fcbae012115b77f02" translate="yes" xml:space="preserve">
          <source>Note that if a custom pragma is specified, then a custom fragment pragma must also be specified if the fragment sytnax &lt;code&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/code&gt; is used. Otherwise, an error will be thrown.</source>
          <target state="translated">请注意，如果指定了定制的编译指示，那么如果使用片段sytnax &lt;code&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/code&gt; ，则还必须指定定制的片段编译指示。否则，将引发错误。</target>
        </trans-unit>
        <trans-unit id="d5c4968139d11c51c40d09801f9e494d568d81ad" translate="yes" xml:space="preserve">
          <source>Note that placeholders can be passed directly as part of the template literal in order to make things as readable as possible, or they can be passed into the template function.</source>
          <target state="translated">请注意,占位符可以作为模板文字的一部分直接传递,以使事情尽可能的可读,也可以将它们传递到模板函数中。</target>
        </trans-unit>
        <trans-unit id="6e95ae176f7c30c4abec5906f124230642721be9" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;@jsx React.DOM&lt;/code&gt; pragma has been deprecated as of React v0.12</source>
          <target state="translated">请注意，自 &lt;code&gt;@jsx React.DOM&lt;/code&gt; 起已弃用@jsx React.DOM pragma</target>
        </trans-unit>
        <trans-unit id="4a23a594d3349991d8f1c60e451d26111e2cd55d" translate="yes" xml:space="preserve">
          <source>Note that the above &lt;code&gt;.&lt;/code&gt; is the &lt;code&gt;RegExp&lt;/code&gt; equivalent to match any character, and not the actual &lt;code&gt;'.'&lt;/code&gt; character. Also note that to match any character &lt;code&gt;.*&lt;/code&gt; is used in &lt;code&gt;RegExp&lt;/code&gt; as opposed to &lt;code&gt;*&lt;/code&gt; in &lt;code&gt;glob&lt;/code&gt; format.</source>
          <target state="translated">注意上面 &lt;code&gt;.&lt;/code&gt; 是 &lt;code&gt;RegExp&lt;/code&gt; 等效项，可以匹配任何字符，而不是实际的 &lt;code&gt;'.'&lt;/code&gt; 字符。还要注意的是，以匹配任何字符 &lt;code&gt;.*&lt;/code&gt; 在使用 &lt;code&gt;RegExp&lt;/code&gt; ，而不是 &lt;code&gt;*&lt;/code&gt; 的 &lt;code&gt;glob&lt;/code&gt; 格式。</target>
        </trans-unit>
        <trans-unit id="a88ca6b278b274dd28fd0ab2eb0cf26e3b833ca7" translate="yes" xml:space="preserve">
          <source>Note, browsers&amp;rsquo; results are overridden by explicit items from &lt;code&gt;targets&lt;/code&gt;.</source>
          <target state="translated">注意，浏览器的结果被 &lt;code&gt;targets&lt;/code&gt; 的显式项覆盖。</target>
        </trans-unit>
        <trans-unit id="c963f9feabd169d66d305e2002725158d0d13b03" translate="yes" xml:space="preserve">
          <source>Note, browsers' results are overridden by explicit items from &lt;code&gt;targets&lt;/code&gt;.</source>
          <target state="translated">请注意，浏览器的结果被 &lt;code&gt;targets&lt;/code&gt; 的显式项所覆盖。</target>
        </trans-unit>
        <trans-unit id="ce8b464075f0b78773b753c7841249d65e4ba0fb" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;.babelrc.json&lt;/code&gt; files are only loaded if the current &lt;a href=&quot;#filename&quot;&gt;&lt;code&gt;&quot;filename&quot;&lt;/code&gt;&lt;/a&gt; is inside of a package that matches one of the &lt;a href=&quot;#babelrcroots&quot;&gt;&lt;code&gt;&quot;babelrcRoots&quot;&lt;/code&gt;&lt;/a&gt; packages.</source>
          <target state="translated">注意：仅当当前&lt;a href=&quot;#filename&quot;&gt; &lt;code&gt;&quot;filename&quot;&lt;/code&gt; &lt;/a&gt;在与&lt;a href=&quot;#babelrcroots&quot;&gt; &lt;code&gt;&quot;babelrcRoots&quot;&lt;/code&gt; &lt;/a&gt;软件包之一匹配的软件包中时，才会加载 &lt;code&gt;.babelrc.json&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="16163b60cd223c396146117f80caff84c995f953" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;babel.config.json&lt;/code&gt; is supported from Babel 7.8.0. In older Babel 7 versions, only &lt;code&gt;babel.config.js&lt;/code&gt; is supported.</source>
          <target state="translated">注意：Babel 7.8.0支持 &lt;code&gt;babel.config.json&lt;/code&gt; 。在较旧的Babel 7版本中，仅支持 &lt;code&gt;babel.config.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c644ead9477b78d76af8fe1dd11c0668a18a91b5" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;env[envKey]&lt;/code&gt; options will be &lt;a href=&quot;#merging&quot;&gt;merged&lt;/a&gt; on top of the options specified in the root object.</source>
          <target state="translated">注意： &lt;code&gt;env[envKey]&lt;/code&gt; 选项将在根对象中指定的选项之上&lt;a href=&quot;#merging&quot;&gt;合并&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf1255753b3fbe9541e007fbb7de4cdfbb646eac" translate="yes" xml:space="preserve">
          <source>Note: Depending on what ES2015 methods you actually use, you may not need to use &lt;code&gt;@babel/polyfill&lt;/code&gt; or the runtime plugin. You may want to only &lt;a href=&quot;https://github.com/zloirock/core-js#commonjs&quot;&gt;load the specific polyfills you are using&lt;/a&gt; (like &lt;code&gt;Object.assign&lt;/code&gt;) or just document that the environment the library is being loaded in should include certain polyfills.</source>
          <target state="translated">注意：根据您实际使用的ES2015方法，您可能不需要使用 &lt;code&gt;@babel/polyfill&lt;/code&gt; 或运行时插件。您可能只想&lt;a href=&quot;https://github.com/zloirock/core-js#commonjs&quot;&gt;加载正在使用的特定polyfill&lt;/a&gt;（例如 &lt;code&gt;Object.assign&lt;/code&gt; ），或者仅记录正在加载库的环境应包含某些polyfill的文档。</target>
        </trans-unit>
        <trans-unit id="112a952cef77603d24ff81c6e41a61b06d7bd499" translate="yes" xml:space="preserve">
          <source>Note: Depending on what ES2015 methods you actually use, you may not need to use &lt;code&gt;babel-polyfill&lt;/code&gt; or the runtime plugin. You may want to only &lt;a href=&quot;https://github.com/zloirock/core-js#commonjs&quot;&gt;load the specific polyfills you are using&lt;/a&gt; (like &lt;code&gt;Object.assign&lt;/code&gt;) or just document that the environment the library is being loaded in should include certain polyfills.</source>
          <target state="translated">注意：根据您实际使用的ES2015方法，您可能不需要使用 &lt;code&gt;babel-polyfill&lt;/code&gt; 或运行时插件。您可能只想&lt;a href=&quot;https://github.com/zloirock/core-js#commonjs&quot;&gt;加载正在使用的特定polyfill&lt;/a&gt;（例如 &lt;code&gt;Object.assign&lt;/code&gt; ），或者仅记录正在加载库的环境应包含某些polyfill的文档。</target>
        </trans-unit>
        <trans-unit id="b561f55324bcf43a0a7825e5559314e1446a436b" translate="yes" xml:space="preserve">
          <source>Note: Flow syntax support is no longer enabled in v7. For that, you will need to add the &lt;a href=&quot;../babel-preset-flow/index&quot;&gt;Flow preset&lt;/a&gt;.</source>
          <target state="translated">注意：v7中不再启用流语法支持。为此，您将需要添加&lt;a href=&quot;../babel-preset-flow/index&quot;&gt;Flow预设&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="020c8207f924c76530ec8992f2c2b4a30ef5b4fb" translate="yes" xml:space="preserve">
          <source>Note: The &lt;code&gt;loose&lt;/code&gt; mode configuration setting &lt;em&gt;must&lt;/em&gt; be the same as &lt;a href=&quot;../babel-plugin-proposal-class-properties/index&quot;&gt;&lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注意： &lt;code&gt;loose&lt;/code&gt; 模式配置设置&lt;em&gt;必须&lt;/em&gt;与&lt;a href=&quot;../babel-plugin-proposal-class-properties/index&quot;&gt; &lt;code&gt;@babel/plugin-proposal-class-properties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="185ad4d1c3ee1132867ee8e1641663f3b0477977" translate="yes" xml:space="preserve">
          <source>Note: The &lt;code&gt;loose&lt;/code&gt; mode configuration setting &lt;em&gt;must&lt;/em&gt; be the same as &lt;a href=&quot;../babel-plugin-proposal-class-properties/index&quot;&gt;&lt;code&gt;@babel/proposal-class-properties&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注意： &lt;code&gt;loose&lt;/code&gt; 模式配置设置&lt;em&gt;必须&lt;/em&gt;与&lt;a href=&quot;../babel-plugin-proposal-class-properties/index&quot;&gt; &lt;code&gt;@babel/proposal-class-properties&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9530d7c05d10585d830d39a8b50b821f2242837a" translate="yes" xml:space="preserve">
          <source>Note: The definition of what is and isn't present in the original file can get a little ugly, so usage of this option is &lt;em&gt;not recommended&lt;/em&gt;. If you need to annotate code somehow, it is better to do so using a Babel plugin.</source>
          <target state="translated">注意：原始文件中存在和不存在的定义可能会有些难看，因此&lt;em&gt;不建议&lt;/em&gt;使用此选项。如果您需要以某种方式注释代码，则最好使用Babel插件进行注释。</target>
        </trans-unit>
        <trans-unit id="3f1e8278555cc763c9caceb0d687a11157c9d423" translate="yes" xml:space="preserve">
          <source>Note: The format of presets is identical to plugins, except for the fact that name normalization expects &quot;preset-&quot; instead of &quot;plugin-&quot;, and presets cannot be instances of &lt;code&gt;Plugin&lt;/code&gt;.</source>
          <target state="translated">注意：预设的格式与插件相同，除了名称规范化期望使用&amp;ldquo; preset-&amp;rdquo;而不是&amp;ldquo; plugin-&amp;rdquo;，并且预设不能是 &lt;code&gt;Plugin&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="570bc3f80179c135e1bc3bf7722f83b3bf9786b4" translate="yes" xml:space="preserve">
          <source>Note: The option also allows &lt;code&gt;Plugin&lt;/code&gt; instances from Babel itself, but using these directly is not recommended. If you need to create a persistent representation of a plugin or preset, you should use &lt;a href=&quot;../babel-core/index#createconfigitem&quot;&gt;&lt;code&gt;babel.createConfigItem()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注意：该选项还允许Babel本身使用 &lt;code&gt;Plugin&lt;/code&gt; 实例，但是不建议直接使用它们。如果需要创建插件或预设的持久表示，则应使用&lt;a href=&quot;../babel-core/index#createconfigitem&quot;&gt; &lt;code&gt;babel.createConfigItem()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4217bbc030b73a5019cc674d5f30e33e00cc5d23" translate="yes" xml:space="preserve">
          <source>Note: These optimizations will be enabled by default in Babel 8</source>
          <target state="translated">注意:这些优化将在巴别8中默认启用。</target>
        </trans-unit>
        <trans-unit id="d1f47d47c2600003416565f80637fb51d6aaf92c" translate="yes" xml:space="preserve">
          <source>Note: These options are bit weird, so it may make the most sense to just use &lt;code&gt;true&lt;/code&gt; and handle the rest in your own code, depending on your use case.</source>
          <target state="translated">注意：这些选项有些奇怪，因此根据使用情况，仅使用 &lt;code&gt;true&lt;/code&gt; 并在自己的代码中处理其余部分可能最有意义。</target>
        </trans-unit>
        <trans-unit id="a950257d9536977ef3a662e95ab19ee586057993" translate="yes" xml:space="preserve">
          <source>Note: These toggles do not affect the programmatic and config-loading options in earlier sections, since they are taken into account long before the configuration that is prepared for merging.</source>
          <target state="translated">注意:这些切换不会影响前面章节中的程序和配置加载选项,因为它们早在准备合并的配置之前就被考虑到了。</target>
        </trans-unit>
        <trans-unit id="c5549d56e1ff0868db07d75858d0e49443fcf304" translate="yes" xml:space="preserve">
          <source>Note: This option disables &lt;em&gt;all&lt;/em&gt; Babel processing of a file. While that has its uses, it is also worth considering the &lt;a href=&quot;#exclude&quot;&gt;&lt;code&gt;&quot;exclude&quot;&lt;/code&gt;&lt;/a&gt; option as a less aggressive alternative.</source>
          <target state="translated">注意：此选项禁用文件的&lt;em&gt;所有&lt;/em&gt;Babel处理。尽管有其用途，但也值得考虑将&lt;a href=&quot;#exclude&quot;&gt; &lt;code&gt;&quot;exclude&quot;&lt;/code&gt; &lt;/a&gt;选项作为较不积极的选择。</target>
        </trans-unit>
        <trans-unit id="88140aa54aa9153c7ba3925368af606e38b91239" translate="yes" xml:space="preserve">
          <source>Note: This option disables &lt;em&gt;all&lt;/em&gt; Babel processing of a file. While that has its uses, it is also worth considering the &lt;a href=&quot;#test&quot;&gt;&lt;code&gt;&quot;test&quot;&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#include&quot;&gt;&lt;code&gt;&quot;include&quot;&lt;/code&gt;&lt;/a&gt; options as a less aggressive alternative.</source>
          <target state="translated">注意：此选项禁用文件的&lt;em&gt;所有&lt;/em&gt;Babel处理。尽管有其用途，但也值得考虑将&lt;a href=&quot;#test&quot;&gt; &lt;code&gt;&quot;test&quot;&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#include&quot;&gt; &lt;code&gt;&quot;include&quot;&lt;/code&gt; &lt;/a&gt;选项作为不太积极的选择。</target>
        </trans-unit>
        <trans-unit id="6bef51bd8fc436fa38495629005f0eb00d7c383c" translate="yes" xml:space="preserve">
          <source>Note: This option is deprecated in 2.x and replaced with a &lt;a href=&quot;https://github.com/babel/babel-preset-env/pull/264&quot;&gt;&lt;code&gt;forceAllTransforms&lt;/code&gt; option&lt;/a&gt;.</source>
          <target state="translated">注意：此选项在2.x中已弃用，&lt;a href=&quot;https://github.com/babel/babel-preset-env/pull/264&quot;&gt; &lt;code&gt;forceAllTransforms&lt;/code&gt; 选项&lt;/a&gt;替代。</target>
        </trans-unit>
        <trans-unit id="66c422d3040fbd373e86b7632ced6be27a28b54f" translate="yes" xml:space="preserve">
          <source>Note: This option is not on by default because the majority of users won't need it and because we'd like to eventually add a caching layer to Babel. Having to cache the AST structure will take significantly more space.</source>
          <target state="translated">注意:这个选项默认没有打开,因为大多数用户不需要它,而且我们希望最终为Babel添加一个缓存层。必须缓存AST结构将大大增加空间。</target>
        </trans-unit>
        <trans-unit id="3ad4cffd4600335f0c5755f2ef1bd07e60921e03" translate="yes" xml:space="preserve">
          <source>Note: This option may be removed in future Babel versions as we add better support for defining ordering between plugins.</source>
          <target state="translated">注意:这个选项可能会在未来的Babel版本中被删除,因为我们增加了对插件之间定义顺序的更好支持。</target>
        </trans-unit>
        <trans-unit id="e48b5835d980001729d827d7032fb0655de7cbe7" translate="yes" xml:space="preserve">
          <source>Note: This option will not affect parsing of &lt;code&gt;.mjs&lt;/code&gt; files, as they are currently hard-coded to always parse as &lt;code&gt;&quot;module&quot;&lt;/code&gt; files.</source>
          <target state="translated">注意：此选项不会影响 &lt;code&gt;.mjs&lt;/code&gt; 文件的解析，因为它们目前已被硬编码为始终解析为 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="f458028169beeabb98fe4dacfc526aa3f39c24f7" translate="yes" xml:space="preserve">
          <source>Note: the &lt;code&gt;env&lt;/code&gt; option will likely get deprecated soon</source>
          <target state="translated">注意： &lt;code&gt;env&lt;/code&gt; 选项可能很快就会被弃用</target>
        </trans-unit>
        <trans-unit id="54770cf69326cb3d621afc5bfe871ca513f20b9f" translate="yes" xml:space="preserve">
          <source>Note: this will be removed in later version in favor of just setting &quot;targets&quot; to a query directly.</source>
          <target state="translated">注意:在以后的版本中,这个将被删除,改为直接将 &quot;目标 &quot;设置为查询。</target>
        </trans-unit>
        <trans-unit id="1d7870a6a40b31052195b925bc25119478d160e7" translate="yes" xml:space="preserve">
          <source>Now, out of the box Babel doesn&amp;rsquo;t do anything. It basically acts like &lt;code&gt;const babel = code =&amp;gt; code;&lt;/code&gt; by parsing the code and then generating the same code back out again.</source>
          <target state="translated">现在，Babel不会执行任何操作。它基本上就像 &lt;code&gt;const babel = code =&amp;gt; code;&lt;/code&gt; 通过解析代码，然后再次生成相同的代码。</target>
        </trans-unit>
        <trans-unit id="74fd48896c334d075011498fee23f4cd2fe32f1e" translate="yes" xml:space="preserve">
          <source>Now, out of the box Babel doesn't do anything. It basically acts like &lt;code&gt;const babel = code =&amp;gt; code;&lt;/code&gt; by parsing the code and then generating the same code back out again. You will need to add plugins for Babel to do anything.</source>
          <target state="translated">现在，Babel不会执行任何操作。它基本上就像 &lt;code&gt;const babel = code =&amp;gt; code;&lt;/code&gt; 通过解析代码，然后再次生成相同的代码。您需要为Babel添加插件才能执行任何操作。</target>
        </trans-unit>
        <trans-unit id="1c9e8f5c78b5e193645f35c670591afbcab42233" translate="yes" xml:space="preserve">
          <source>Object rest spread transform</source>
          <target state="translated">物体休止符变换</target>
        </trans-unit>
        <trans-unit id="5a3523b04d7a615fcce24fe2e2e54e5600219df4" translate="yes" xml:space="preserve">
          <source>Object set prototype of to assign transform</source>
          <target state="translated">赋值变换的对象集原型</target>
        </trans-unit>
        <trans-unit id="f19823b3b303978c94b0a8ca30b931e1cf520fe2" translate="yes" xml:space="preserve">
          <source>Object.assign transform</source>
          <target state="translated">Object.assign transform</target>
        </trans-unit>
        <trans-unit id="e14e11f124fbe00726d92f4f975e14be3a0c6f47" translate="yes" xml:space="preserve">
          <source>Octal Literal</source>
          <target state="translated">八角形字面意思</target>
        </trans-unit>
        <trans-unit id="e308eabccfcc201e03e4ebb92eebb396eca126f8" translate="yes" xml:space="preserve">
          <source>Octals are great for permissions, but also look better when represented in &lt;code&gt;0o0000&lt;/code&gt; form. No real benefit with separators here.</source>
          <target state="translated">八进制非常适合权限，但以 &lt;code&gt;0o0000&lt;/code&gt; 形式表示时看起来也更好。使用分隔符没有真正的好处。</target>
        </trans-unit>
        <trans-unit id="e3ba7a47f452eea839023f7d2422f46467071fdc" translate="yes" xml:space="preserve">
          <source>Official Presets</source>
          <target state="translated">官方预设</target>
        </trans-unit>
        <trans-unit id="9021e9cf3dc6241310c08f86a81245dbb96d4eee" translate="yes" xml:space="preserve">
          <source>On some platforms (like OSX), extra arguments may be required for &lt;code&gt;rlwrap&lt;/code&gt; to function properly, eg:</source>
          <target state="translated">在某些平台（例如OSX）上，可能需要额外的参数才能使 &lt;code&gt;rlwrap&lt;/code&gt; 正常运行，例如：</target>
        </trans-unit>
        <trans-unit id="9030b009ed500625672c1e5d6b772ed2dd283529" translate="yes" xml:space="preserve">
          <source>One alternative would be to create a &lt;code&gt;.babelrc&lt;/code&gt; in each sub-package that uses &lt;a href=&quot;../options/index#extends&quot;&gt;&quot;extends&quot;&lt;/a&gt; as</source>
          <target state="translated">一种替代方法是在每个使用&lt;a href=&quot;../options/index#extends&quot;&gt;&amp;ldquo; extends&amp;rdquo;&lt;/a&gt;作为扩展名的子包中创建一个 &lt;code&gt;.babelrc&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf72f7b0b9ff2a70a07e6fa2e0a78e29d6dce5aa" translate="yes" xml:space="preserve">
          <source>One helpful way to test if your config is being detected is to place a &lt;code&gt;console.log()&lt;/code&gt; call inside of it if it is a &lt;a href=&quot;#project-wide-configuration&quot;&gt;&lt;code&gt;babel.config.json&lt;/code&gt;&lt;/a&gt; JavaScript file: the log will execute the first time Babel loads it.</source>
          <target state="translated">测试配置是否被检测到的一种有用方法是，如果它是&lt;a href=&quot;#project-wide-configuration&quot;&gt; &lt;code&gt;babel.config.json&lt;/code&gt; &lt;/a&gt; JavaScript文件，则将 &lt;code&gt;console.log()&lt;/code&gt; 调用放入其中：日志将在Babel首次加载时执行。</target>
        </trans-unit>
        <trans-unit id="62b004ff51f6f0c037ba9d9b07745d36ee74c41b" translate="yes" xml:space="preserve">
          <source>One of the most useful usage of the &lt;code&gt;do&lt;/code&gt; expression is inside JSX. If we want to conditionally display a component we usually have to call another function which would implement the condition and return the correct value, for example:</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; 表达式最有用的用法之一是在JSX内部。如果要有条件地显示组件，通常必须调用另一个函数，该函数将实现条件并返回正确的值，例如：</target>
        </trans-unit>
        <trans-unit id="62839531df85d9263b586236378ba4f2ec18717c" translate="yes" xml:space="preserve">
          <source>One of the ways you can use Babel is through the require hook. The require hook will bind itself to node&amp;rsquo;s &lt;code&gt;require&lt;/code&gt; and automatically compile files on the fly. This is equivalent to CoffeeScript&amp;rsquo;s &lt;a href=&quot;http://coffeescript.org/v2/annotated-source/register.html&quot;&gt;coffee-script/register&lt;/a&gt;.</source>
          <target state="translated">使用Babel的方法之一是通过require挂钩。require钩子将自身绑定到节点的 &lt;code&gt;require&lt;/code&gt; 并即时自动编译文件。这等效于CoffeeScript的&lt;a href=&quot;http://coffeescript.org/v2/annotated-source/register.html&quot;&gt;coffee-script / register&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="419c4d77a0ca4fee6f157b7510d85f29376b22ce" translate="yes" xml:space="preserve">
          <source>One of the ways you can use Babel is through the require hook. The require hook will bind itself to node's &lt;code&gt;require&lt;/code&gt; and automatically compile files on the fly. This is equivalent to CoffeeScript's &lt;a href=&quot;http://coffeescript.org/v2/annotated-source/register.html&quot;&gt;coffee-script/register&lt;/a&gt;.</source>
          <target state="translated">使用Babel的方法之一是通过require挂钩。require钩子将自身绑定到节点的 &lt;code&gt;require&lt;/code&gt; 并动态地自动编译文件。这等效于CoffeeScript的&lt;a href=&quot;http://coffeescript.org/v2/annotated-source/register.html&quot;&gt;coffee-script / register&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="caa01a568b669844795f5c56a5cf5f29c748c86e" translate="yes" xml:space="preserve">
          <source>One way to do this is by manually writing &lt;code&gt;React.createElement&lt;/code&gt;, or aliasing it to something like &lt;code&gt;$&lt;/code&gt;</source>
          <target state="translated">一种方法是手动编写 &lt;code&gt;React.createElement&lt;/code&gt; 或将其别名为 &lt;code&gt;$&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9d97f3fdc65f5ad79d9e080d6468eff714331b2" translate="yes" xml:space="preserve">
          <source>Only compiles ES2015 to ES5</source>
          <target state="translated">只编译ES2015至ES5</target>
        </trans-unit>
        <trans-unit id="3913ce84c721edacee9b8739747d231620a4b977" translate="yes" xml:space="preserve">
          <source>Only compiles what's in ES2016 to ES2015</source>
          <target state="translated">只将ES2016中的内容编译成ES2015。</target>
        </trans-unit>
        <trans-unit id="3fcb2ba85b59af1d9f52355f65b61dccf68aee17" translate="yes" xml:space="preserve">
          <source>Only compiles what's in ES2017 to ES2016</source>
          <target state="translated">只将ES2017中的内容编译成ES2016。</target>
        </trans-unit>
        <trans-unit id="f7ae859fd0f4da8cb08002dfcae61111aa671465" translate="yes" xml:space="preserve">
          <source>Opposite to the &lt;code&gt;only&lt;/code&gt; option. &lt;code&gt;ignore&lt;/code&gt; is disregarded if &lt;code&gt;only&lt;/code&gt; is specified.</source>
          <target state="translated">与 &lt;code&gt;only&lt;/code&gt; 选择相反。如果 &lt;code&gt;only&lt;/code&gt; 指定，则忽略 &lt;code&gt;ignore&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fdf5e093149fa15365c797b12b39a00d5ec3a138" translate="yes" xml:space="preserve">
          <source>Optimization</source>
          <target state="translated">Optimization</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="23edca5b0cb206179a50b3a70a37583bebf2dc73" translate="yes" xml:space="preserve">
          <source>Option concepts</source>
          <target state="translated">期权概念</target>
        </trans-unit>
        <trans-unit id="333ad5a4e12a8bd91095ecad04b95c24d11f4805" translate="yes" xml:space="preserve">
          <source>OptionName</source>
          <target state="translated">OptionName</target>
        </trans-unit>
        <trans-unit id="7cce10da03bdaebc9f1fd56c88b27efe0c8941f7" translate="yes" xml:space="preserve">
          <source>Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions.</source>
          <target state="translated">可选的AMD模块格式化器前缀,将在模块定义的文件名前加上。</target>
        </trans-unit>
        <trans-unit id="8bab5c7d70d58d0ce4a7c781b385c9bc80b8d770" translate="yes" xml:space="preserve">
          <source>Optional string to add as a block comment at the end of the output file</source>
          <target state="translated">可选的字符串,作为块注释添加到输出文件的结尾。</target>
        </trans-unit>
        <trans-unit id="1df58b2a2b2ae9b4cbc947f06f8b93c428e46f2c" translate="yes" xml:space="preserve">
          <source>Optional string to add as a block comment at the start of the output file</source>
          <target state="translated">可选的字符串,作为区块注释添加在输出文件的开始。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="ca75d896aba35369c229e9a247583764d7551663" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;throwIfClosureRequired&lt;/code&gt;</source>
          <target state="translated">选项 &lt;code&gt;throwIfClosureRequired&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a074944c02501f4a51d04d5d8e9d3d7bd2cf97c" translate="yes" xml:space="preserve">
          <source>Options Concepts</source>
          <target state="translated">期权概念</target>
        </trans-unit>
        <trans-unit id="463223dc11e76c33c264e52568b594e1c80dbb00" translate="yes" xml:space="preserve">
          <source>Options are passed through to each plugin/preset when they are executed. &lt;code&gt;undefined&lt;/code&gt; will be normalized to an empty object.</source>
          <target state="translated">选项在执行时会传递给每个插件/预设。 &lt;code&gt;undefined&lt;/code&gt; 将被标准化为一个空对象。</target>
        </trans-unit>
        <trans-unit id="05540feebda48ee7eb41d9966f940cf6721d40e7" translate="yes" xml:space="preserve">
          <source>Options can be passed to Babel in a variety of ways. When passed directly to Babel, you can just pass the objects object. When Babel is used via a wrapper, it may also be necessary, or at least more useful, to pass the options via &lt;a href=&quot;../config-files/index&quot;&gt;configuration files&lt;/a&gt;.</source>
          <target state="translated">选项可以通过多种方式传递给Babel。当直接传递给Babel时，您可以传递对象对象。通过包装器使用Babel时，通过&lt;a href=&quot;../config-files/index&quot;&gt;配置文件&lt;/a&gt;传递选项可能也有必要，或者至少更有用。</target>
        </trans-unit>
        <trans-unit id="dd756626b94482fe68b13d66af323adfb7dc66bd" translate="yes" xml:space="preserve">
          <source>Options for formatting output:</source>
          <target state="translated">格式化输出的选项。</target>
        </trans-unit>
        <trans-unit id="95e8496cd8a8c4e4b31b436720e0ee48d9a58ebd" translate="yes" xml:space="preserve">
          <source>Options for source maps:</source>
          <target state="translated">源地图的选择。</target>
        </trans-unit>
        <trans-unit id="14312dbef9a4cace5c351fb7d2eb74ad04432735" translate="yes" xml:space="preserve">
          <source>Options like &lt;a href=&quot;#test&quot;&gt;&lt;code&gt;&quot;test&quot;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#exclude&quot;&gt;&lt;code&gt;&quot;exclude&quot;&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ignore&quot;&gt;&lt;code&gt;&quot;ignore&quot;&lt;/code&gt;&lt;/a&gt; require the filename for string/RegExp matching.</source>
          <target state="translated">诸如&lt;a href=&quot;#test&quot;&gt; &lt;code&gt;&quot;test&quot;&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#exclude&quot;&gt; &lt;code&gt;&quot;exclude&quot;&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#ignore&quot;&gt; &lt;code&gt;&quot;ignore&quot;&lt;/code&gt; &lt;/a&gt;需要字符串/ RegExp匹配的文件名。</target>
        </trans-unit>
        <trans-unit id="a4bc35c565ddbcbc95c19f165a3375fed298c85a" translate="yes" xml:space="preserve">
          <source>Options specific to a certain environment are merged into and overwrite non-env specific options.</source>
          <target state="translated">特定环境下的选项会被并入并覆盖非环境下的选项。</target>
        </trans-unit>
        <trans-unit id="f72e970281499dd2d5a843d2b436d54ead1850b8" translate="yes" xml:space="preserve">
          <source>Or &lt;a href=&quot;https://yarnpkg.com&quot;&gt;yarn&lt;/a&gt;:</source>
          <target state="translated">或&lt;a href=&quot;https://yarnpkg.com&quot;&gt;纱&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="f2d799f1c60d47957d7957f95f76723ac0a98cac" translate="yes" xml:space="preserve">
          <source>Or an object of minimum environment versions to support:</source>
          <target state="translated">或支持最小环境版本的对象。</target>
        </trans-unit>
        <trans-unit id="23f9b1992610da362eb7232c1945580345d3d0e8" translate="yes" xml:space="preserve">
          <source>Or as a separate command:</source>
          <target state="translated">或者作为一个单独的命令。</target>
        </trans-unit>
        <trans-unit id="17118d207cb3b5f8f332d2fc81e7554f28a1b1f0" translate="yes" xml:space="preserve">
          <source>Or, if you'd rather have &lt;strong&gt;inline source maps&lt;/strong&gt;, use &lt;code&gt;--source-maps inline&lt;/code&gt; instead.</source>
          <target state="translated">或者，如果您希望使用&lt;strong&gt;内联源地图&lt;/strong&gt;，请改用 &lt;code&gt;--source-maps inline&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="afd4b3a9a2e30921b2de751ec7473d56738de100" translate="yes" xml:space="preserve">
          <source>Ordering matters for each visitor in the plugin.</source>
          <target state="translated">插件中每个访客的排序事项。</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="b5ca343bbbb27face5595d8ca3cad0171fddf6c4" translate="yes" xml:space="preserve">
          <source>Other Cool Projects</source>
          <target state="translated">其他酷炫项目</target>
        </trans-unit>
        <trans-unit id="f1e707a84ef80cbf09799934b4668c87355d20ea" translate="yes" xml:space="preserve">
          <source>Other Plugins</source>
          <target state="translated">其他插件</target>
        </trans-unit>
        <trans-unit id="aa4d97b3571d62fa73ceb918bc9a47b9937e01e1" translate="yes" xml:space="preserve">
          <source>Other packages</source>
          <target state="translated">其他配套</target>
        </trans-unit>
        <trans-unit id="8d7bf5bf136e81f9388c1f4eca050d6d94e965d7" translate="yes" xml:space="preserve">
          <source>Others</source>
          <target state="translated">Others</target>
        </trans-unit>
        <trans-unit id="265eaaad651432fa0e0c4ff1df732880517a8b8c" translate="yes" xml:space="preserve">
          <source>Our current recommendation for those that want to create their own custom syntax is for users to fork the parser.</source>
          <target state="translated">对于那些想要创建自己的自定义语法的用户,我们目前的建议是让用户分叉解析器。</target>
        </trans-unit>
        <trans-unit id="220e06ba2fee80b4bcad90f5feda8bd52bbc2667" translate="yes" xml:space="preserve">
          <source>Out</source>
          <target state="translated">Out</target>
        </trans-unit>
        <trans-unit id="f6bc6b2a3578da818c4ab321caa2f73a0201b2ed" translate="yes" xml:space="preserve">
          <source>Out (&lt;code&gt;loose === false&lt;/code&gt;)</source>
          <target state="translated">出（ &lt;code&gt;loose === false&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ca4cf87da5630fe544519a8f8ad8c9f4dfae9f63" translate="yes" xml:space="preserve">
          <source>Out (&lt;code&gt;loose === true&lt;/code&gt;)</source>
          <target state="translated">出（ &lt;code&gt;loose === true&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="6473c6df393098f9e5d567256bb21e2a70bc18c7" translate="yes" xml:space="preserve">
          <source>Output JSX into pre-v0.12 React syntax.</source>
          <target state="translated">将JSX输出为v0.12之前的React语法。</target>
        </trans-unit>
        <trans-unit id="62dacf6c61ae274d75522e00e0ec2d033e41e54a" translate="yes" xml:space="preserve">
          <source>Output comments in generated output.</source>
          <target state="translated">在生成的输出中输出注释。</target>
        </trans-unit>
        <trans-unit id="6677bdd8d516d0ed52f946117430bb6f6f5c1bbf" translate="yes" xml:space="preserve">
          <source>Output formats</source>
          <target state="translated">输出格式</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="b58fc4ac411a962c37f51b15dcf3abda105035cc" translate="yes" xml:space="preserve">
          <source>Outputs the targets/plugins used and the version specified in &lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugins.json&quot;&gt;plugin data version&lt;/a&gt; to &lt;code&gt;console.log&lt;/code&gt;.</source>
          <target state="translated">将使用的目标/插件以及&lt;a href=&quot;https://github.com/babel/babel-preset-env/blob/master/data/plugins.json&quot;&gt;插件数据版本中&lt;/a&gt;指定的版本输出到 &lt;code&gt;console.log&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1299bcf5c9d7bc0771503b5574027cff440279c9" translate="yes" xml:space="preserve">
          <source>Outputs to &lt;code&gt;console.log&lt;/code&gt; the polyfills and transform plugins enabled by &lt;code&gt;preset-env&lt;/code&gt; and, if applicable, which one of your targets that needed it.</source>
          <target state="translated">输出到 &lt;code&gt;console.log&lt;/code&gt; 的，由 &lt;code&gt;preset-env&lt;/code&gt; 启用的polyfills和transform插件，以及（如果适用）需要哪个目标的插件。</target>
        </trans-unit>
        <trans-unit id="5b634e5c01931fb3415bf46b849b96a9033aea62" translate="yes" xml:space="preserve">
          <source>Partial name (&lt;code&gt;string&lt;/code&gt;): &lt;code&gt;&quot;es.math.*&quot;&lt;/code&gt; (resolves to all plugins with &lt;code&gt;es.math&lt;/code&gt; prefix)</source>
          <target state="translated">部分名称（ &lt;code&gt;string&lt;/code&gt; ）： &lt;code&gt;&quot;es.math.*&quot;&lt;/code&gt; （解析为所有带有 &lt;code&gt;es.math&lt;/code&gt; 前缀的插件）</target>
        </trans-unit>
        <trans-unit id="60aeac25a4d892c96784ff89f6aa6d4d559a9a33" translate="yes" xml:space="preserve">
          <source>Pass in a string to be displayed inline (if possible) next to the highlighted location in the code. If it can't be positioned inline, it will be placed above the code frame.</source>
          <target state="translated">传入一个字符串,在代码中的高亮位置旁边显示(如果可能的话)。如果不能内嵌显示,它将被放置在代码框架的上方。</target>
        </trans-unit>
        <trans-unit id="e288854ec25dabda8cfac2dd0ab39342be70dbf6" translate="yes" xml:space="preserve">
          <source>Passed to &lt;a href=&quot;babel-plugin-minify-builtins/index&quot;&gt;builtIns&lt;/a&gt;, &lt;a href=&quot;babel-plugin-minify-constant-folding/index&quot;&gt;evaluate&lt;/a&gt;, &lt;a href=&quot;babel-plugin-minify-dead-code-elimination/index&quot;&gt;deadcode&lt;/a&gt;, &lt;a href=&quot;babel-plugin-transform-remove-undefined/index&quot;&gt;removeUndefined&lt;/a&gt;</source>
          <target state="translated">传递给&lt;a href=&quot;babel-plugin-minify-builtins/index&quot;&gt;builtIns&lt;/a&gt;，&lt;a href=&quot;babel-plugin-minify-constant-folding/index&quot;&gt;evaluate&lt;/a&gt;，&lt;a href=&quot;babel-plugin-minify-dead-code-elimination/index&quot;&gt;deadcode&lt;/a&gt;，&lt;a href=&quot;babel-plugin-transform-remove-undefined/index&quot;&gt;removeUndefined&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="25f79ed455312f74e68ec773ae26b15256a0188d" translate="yes" xml:space="preserve">
          <source>Passed to &lt;a href=&quot;babel-plugin-minify-mangle-names/index&quot;&gt;mangle&lt;/a&gt; &amp;amp; &lt;a href=&quot;babel-plugin-minify-dead-code-elimination/index&quot;&gt;deadcode&lt;/a&gt;</source>
          <target state="translated">传递给&lt;a href=&quot;babel-plugin-minify-mangle-names/index&quot;&gt;mangle&lt;/a&gt;和&lt;a href=&quot;babel-plugin-minify-dead-code-elimination/index&quot;&gt;Deadcode&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea6c0fe51145bb3946b86cf41ce6e15ee1991986" translate="yes" xml:space="preserve">
          <source>Pipe a file in via stdin and output it to &lt;code&gt;script-compiled.js&lt;/code&gt;</source>
          <target state="translated">通过stdin传输文件并将其输出到 &lt;code&gt;script-compiled.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="56fc9ac8e47159f1d45ac8bf413a0adb7c69d325" translate="yes" xml:space="preserve">
          <source>Piping Files</source>
          <target state="translated">管道文件</target>
        </trans-unit>
        <trans-unit id="bf10c07db4c0cc87cb43df6a722bd7e88e87e752" translate="yes" xml:space="preserve">
          <source>Placement: Allowed in Babel's programmatic options, or inside of the loaded &lt;a href=&quot;#configfile&quot;&gt;&lt;code&gt;&quot;configFile&quot;&lt;/code&gt;&lt;/a&gt;. A programmatic option will override a config file one.</source>
          <target state="translated">放置：在Babel的编程选项中允许，或在加载的&lt;a href=&quot;#configfile&quot;&gt; &lt;code&gt;&quot;configFile&quot;&lt;/code&gt; &lt;/a&gt;。编程选项将覆盖一个配置文件。</target>
        </trans-unit>
        <trans-unit id="2c17e0186d1044ae0dd56bbb3cf479d9ef220b84" translate="yes" xml:space="preserve">
          <source>Placement: Allowed in Babel's programmatic options, or inside of the loaded &lt;code&gt;configFile&lt;/code&gt;. A programmatic option will override a config file one.</source>
          <target state="translated">放置：在Babel的编程选项中允许，也可以在已加载的 &lt;code&gt;configFile&lt;/code&gt; 内部。编程选项将覆盖一个配置文件。</target>
        </trans-unit>
        <trans-unit id="15a12120cc2f67477bcb2f5c7536b7ea8b79e30b" translate="yes" xml:space="preserve">
          <source>Placement: May not be nested inside of another &lt;code&gt;env&lt;/code&gt; block.</source>
          <target state="translated">放置：不得嵌套在另一个 &lt;code&gt;env&lt;/code&gt; 块内。</target>
        </trans-unit>
        <trans-unit id="92e1fca6034fdad471e7b37af9d470091352f22b" translate="yes" xml:space="preserve">
          <source>Placement: May not be nested inside of another &lt;code&gt;overrides&lt;/code&gt; object, or within an &lt;code&gt;env&lt;/code&gt; block.</source>
          <target state="translated">放置：不得嵌套在另一个 &lt;code&gt;overrides&lt;/code&gt; 对象内或 &lt;code&gt;env&lt;/code&gt; 块内。</target>
        </trans-unit>
        <trans-unit id="152b53243659c59e88fc5ec41931a20b02e7bca2" translate="yes" xml:space="preserve">
          <source>Placement: Not allowed inside of presets</source>
          <target state="translated">放置。不允许在预设内放置</target>
        </trans-unit>
        <trans-unit id="8b752cb51edea6a391a9828c3d2e6126ebb1e343" translate="yes" xml:space="preserve">
          <source>Placement: Only allowed in Babel's programmatic options</source>
          <target state="translated">放置。只允许在巴别的程序选项中使用</target>
        </trans-unit>
        <trans-unit id="2dfdeda60da2b1b162089128e519594e407c8107" translate="yes" xml:space="preserve">
          <source>Please note that Babel allows destructuring &lt;code&gt;arguments&lt;/code&gt; in old engines even if this option is disabled, because it's defined as &lt;em&gt;iterable&lt;/em&gt; in the ECMAScript specification.</source>
          <target state="translated">请注意，即使禁用了此选项，Babel仍允许在旧引擎中分解 &lt;code&gt;arguments&lt;/code&gt; ，因为在ECMAScript规范中将其定义为&lt;em&gt;可迭代&lt;/em&gt;的。</target>
        </trans-unit>
        <trans-unit id="61c57b2a0e544310db7cccb898d585d2b58f3a00" translate="yes" xml:space="preserve">
          <source>Please note that Babel allows iterating &lt;code&gt;arguments&lt;/code&gt; in old engines even if this option is disabled, because it's defined as &lt;em&gt;iterable&lt;/em&gt; in the ECMAScript specification.</source>
          <target state="translated">请注意，即使禁用了此选项，Babel仍允许在旧引擎中迭代 &lt;code&gt;arguments&lt;/code&gt; ，因为在ECMAScript规范中将其定义为&lt;em&gt;可迭代&lt;/em&gt;的。</target>
        </trans-unit>
        <trans-unit id="c94942a26545b63975a32213d620bae004152099" translate="yes" xml:space="preserve">
          <source>Please note that Babel allows spreading &lt;code&gt;arguments&lt;/code&gt; in old engines even if this option is disabled, because it's defined as &lt;em&gt;iterable&lt;/em&gt; in the ECMAScript specification.</source>
          <target state="translated">请注意，即使禁用了此选项，Babel仍允许在旧引擎中传播 &lt;code&gt;arguments&lt;/code&gt; ，因为在ECMAScript规范中将其定义为&lt;em&gt;可迭代&lt;/em&gt;的。</target>
        </trans-unit>
        <trans-unit id="2db26dde26086e1dc1f705fb47b0ce53ef9408a0" translate="yes" xml:space="preserve">
          <source>Please note that if you are relying on browserslist's defaults query (either explicitly or by having no browserslist config), you will want to check out the &lt;a href=&quot;#no-targets&quot;&gt;No targets&lt;/a&gt; section for information on preset-env's behavior.</source>
          <target state="translated">请注意，如果您依赖于browserslist的默认查询（显式或不具有browserslist配置），则需要检出&amp;ldquo;&lt;a href=&quot;#no-targets&quot;&gt;无目标&amp;rdquo;&lt;/a&gt;部分，以获取有关预置环境行为的信息。</target>
        </trans-unit>
        <trans-unit id="d289b27078ffa86855ea3ff10200b2cee2808cd2" translate="yes" xml:space="preserve">
          <source>Please note that in loose mode class methods &lt;strong&gt;are&lt;/strong&gt; enumerable. This is not in line with the spec and you may run into issues.</source>
          <target state="translated">请注意，在松散模式下，类方法&lt;strong&gt;是&lt;/strong&gt;可枚举的。这与规范不符，您可能会遇到问题。</target>
        </trans-unit>
        <trans-unit id="7835d88804d141c4e15a3929a363f3010fe34546" translate="yes" xml:space="preserve">
          <source>Please note that since &lt;code&gt;v7.4.5&lt;/code&gt; the browserslist query is resolved with &lt;a href=&quot;https://github.com/browserslist/browserslist#js-api&quot;&gt;&lt;code&gt;mobileToDesktop: true&lt;/code&gt;&lt;/a&gt;. For example, if you want to create a snapshot of a query run &lt;code&gt;npx browserslist --mobile-to-desktop &quot;&amp;gt;0.25%, not dead&quot;&lt;/code&gt;.</source>
          <target state="translated">请注意，从 &lt;code&gt;v7.4.5&lt;/code&gt; 开始，使用&lt;a href=&quot;https://github.com/browserslist/browserslist#js-api&quot;&gt; &lt;code&gt;mobileToDesktop: true&lt;/code&gt; &lt;/a&gt;解决了browserslist查询。例如，如果要创建查询的快照，请运行 &lt;code&gt;npx browserslist --mobile-to-desktop &quot;&amp;gt;0.25%, not dead&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb6a7cb7997bf36fc243429066bdfc8298f86d1c" translate="yes" xml:space="preserve">
          <source>Please note that syntactic placeholders were introduced in Babel 7.4.0. If you don't control the &lt;code&gt;@babel/template&lt;/code&gt; version (for example, when importing it from a &lt;code&gt;@babel/core@^7.0.0&lt;/code&gt; peer dependency), you must use identifier placeholders. On the other hand, syntactic placeholders have some advantages: they can be used where identifiers would be a syntax error (e.g. in place of function bodies, or in export declarations), and they don't conflict with uppercase variables (e.g., &lt;code&gt;new URL()&lt;/code&gt;).</source>
          <target state="translated">请注意，语法占位符是在Babel 7.4.0中引入的。如果您不控制 &lt;code&gt;@babel/template&lt;/code&gt; 版本（例如，从 &lt;code&gt;@babel/core@^7.0.0&lt;/code&gt; 对等依赖项导入），则必须使用标识符占位符。另一方面，语法占位符具有一些优点：它们可用于标识符可能出现语法错误的地方（例如，代替函数体或在导出声明中使用），并且它们不与大写变量（例如， &lt;code&gt;new URL()&lt;/code&gt; 冲突。（））。</target>
        </trans-unit>
        <trans-unit id="d3908f0ecd50c096ba0e2d07b2033fd17939c8ec" translate="yes" xml:space="preserve">
          <source>Please refer to the excellent &lt;a href=&quot;https://github.com/thejameskyle/babel-handbook&quot;&gt;babel-handbook&lt;/a&gt; to learn how to create your own plugins.</source>
          <target state="translated">请参考优秀的&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook&quot;&gt;babel手册，&lt;/a&gt;以了解如何创建自己的插件。</target>
        </trans-unit>
        <trans-unit id="7ab561cb91871b574bb2274940c1b3e6454abe68" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;https://github.com/google/traceur-compiler/issues/1773&quot;&gt;google/traceur-compiler#1773&lt;/a&gt; and &lt;a href=&quot;https://github.com/babel/babel/issues/838&quot;&gt;babel/babel#838&lt;/a&gt; for more information.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/google/traceur-compiler/issues/1773&quot;&gt;google / traceur-compiler＃1773&lt;/a&gt;和&lt;a href=&quot;https://github.com/babel/babel/issues/838&quot;&gt;babel / babel＃838&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9b1d9a20f815e3a7af594e87551b6290649399cc" translate="yes" xml:space="preserve">
          <source>Pluggable</source>
          <target state="translated">Pluggable</target>
        </trans-unit>
        <trans-unit id="8dc208f8ebe86aa9ee6a37d49d48058be5364bff" translate="yes" xml:space="preserve">
          <source>Plugin</source>
          <target state="translated">Plugin</target>
        </trans-unit>
        <trans-unit id="a8e6b040fcb7ec7cd8c687219d9feff34a6153ee" translate="yes" xml:space="preserve">
          <source>Plugin Development</source>
          <target state="translated">插件开发</target>
        </trans-unit>
        <trans-unit id="1919972ec1dd4693c387449ffdc80e4f8d7b507d" translate="yes" xml:space="preserve">
          <source>Plugin Options</source>
          <target state="translated">插件选项</target>
        </trans-unit>
        <trans-unit id="4109269a98f30b239aff21a1e5d2fc5e3ebe25c9" translate="yes" xml:space="preserve">
          <source>Plugin Ordering</source>
          <target state="translated">插件订购</target>
        </trans-unit>
        <trans-unit id="1c69ce87ea21ef1893acaaed88264bc7735a9ff4" translate="yes" xml:space="preserve">
          <source>Plugin Shorthand</source>
          <target state="translated">插件速记</target>
        </trans-unit>
        <trans-unit id="ccf19b86053b238a95b3ddf2fade20933a2d7fee" translate="yes" xml:space="preserve">
          <source>Plugin and Preset configuration</source>
          <target state="translated">插件和预设配置</target>
        </trans-unit>
        <trans-unit id="86e5dc1df64b8460f767e7774bf8dd6e1b8b73ef" translate="yes" xml:space="preserve">
          <source>Plugin and Preset options</source>
          <target state="translated">插件和预设选项</target>
        </trans-unit>
        <trans-unit id="00bb62388ab1d0c20b3fcf87e617609a77d0838b" translate="yes" xml:space="preserve">
          <source>Plugin names can be fully or partially specified (or using &lt;code&gt;RegExp&lt;/code&gt;).</source>
          <target state="translated">插件名称可以全部或部分指定（或使用 &lt;code&gt;RegExp&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c22a7e2572148d12c0e356f879096149455fd46b" translate="yes" xml:space="preserve">
          <source>Plugin ordering is first to last.</source>
          <target state="translated">插件的顺序是先到最后。</target>
        </trans-unit>
        <trans-unit id="a47c569c2f98f8352e02645bc59d1fc60fe1d9a5" translate="yes" xml:space="preserve">
          <source>Plugin/Preset Options</source>
          <target state="translated">插件/预设选项</target>
        </trans-unit>
        <trans-unit id="d2430d7eadac31931ae926e4cc72af553d7376e7" translate="yes" xml:space="preserve">
          <source>Plugin/Preset Ordering</source>
          <target state="translated">插件/预设订单</target>
        </trans-unit>
        <trans-unit id="f690803e5e9fe3135f2d7515a5b5bb463915962e" translate="yes" xml:space="preserve">
          <source>Plugin/Preset Paths</source>
          <target state="translated">插件/预设路径</target>
        </trans-unit>
        <trans-unit id="5f134b5d3e8a070d1cf2f1e1b9ce804a0515435b" translate="yes" xml:space="preserve">
          <source>Plugin/Preset Shorthand</source>
          <target state="translated">插件/预设速记</target>
        </trans-unit>
        <trans-unit id="54a6234ee33bbeefa85df24464f61c75ddbb45dc" translate="yes" xml:space="preserve">
          <source>Plugin/Preset entries</source>
          <target state="translated">插件/预设条目</target>
        </trans-unit>
        <trans-unit id="783d379b9ff036ca15a97d2682a5ab7c9a8c0c25" translate="yes" xml:space="preserve">
          <source>Plugin/Preset merging</source>
          <target state="translated">插件/预设合并</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="f50e95f63af77e9bc203cfec47fd248abe8d4fe0" translate="yes" xml:space="preserve">
          <source>Plugins options</source>
          <target state="translated">插件选项</target>
        </trans-unit>
        <trans-unit id="94a3fc8d42bc2a04c70470a26d664a6edcc54cb1" translate="yes" xml:space="preserve">
          <source>Plugins run before Presets.</source>
          <target state="translated">插件运行在预设之前。</target>
        </trans-unit>
        <trans-unit id="861260cecd797e42301015d1972945d6ccce6883" translate="yes" xml:space="preserve">
          <source>Polyfill</source>
          <target state="translated">Polyfill</target>
        </trans-unit>
        <trans-unit id="0d530cdb98c144887d31b20b1edf5690529d28cd" translate="yes" xml:space="preserve">
          <source>Polyfill features that are missing in your target environment (through &lt;a href=&quot;babel-polyfill/index&quot;&gt;@babel/polyfill&lt;/a&gt;)</source>
          <target state="translated">目标环境中缺少的Polyfill功能（通过&lt;a href=&quot;babel-polyfill/index&quot;&gt;@ babel / polyfill&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="cf24b43a7a34b28de3cc9a2b7432d98297e318ba" translate="yes" xml:space="preserve">
          <source>Polyfill not included</source>
          <target state="translated">填充物不包括在内</target>
        </trans-unit>
        <trans-unit id="c65de7239130b2221dc156af1c9b5fa8125b9bf3" translate="yes" xml:space="preserve">
          <source>Polyfills</source>
          <target state="translated">Polyfills</target>
        </trans-unit>
        <trans-unit id="660209421bd2be726a8a745449e941fa9d17477f" translate="yes" xml:space="preserve">
          <source>Preset ordering is reversed (last to first).</source>
          <target state="translated">预设顺序是相反的(从最后一个到第一个)。</target>
        </trans-unit>
        <trans-unit id="e709e76ff5425bd59879423588e80e67d778fa57" translate="yes" xml:space="preserve">
          <source>Presets</source>
          <target state="translated">Presets</target>
        </trans-unit>
        <trans-unit id="35cc7b95048f8bfe2052f5dc9f6357eead13b1a0" translate="yes" xml:space="preserve">
          <source>Previous issues: &lt;a href=&quot;https://github.com/babel/babel/issues/1351&quot;&gt;#1351&lt;/a&gt;, &lt;a href=&quot;https://github.com/babel/babel/issues/6694&quot;&gt;#6694&lt;/a&gt;.</source>
          <target state="translated">先前的问题：&lt;a href=&quot;https://github.com/babel/babel/issues/1351&quot;&gt;＃1351&lt;/a&gt;，&lt;a href=&quot;https://github.com/babel/babel/issues/6694&quot;&gt;＃6694&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0197ed9186dcbac46b3008ae34791e1b57d0c7a7" translate="yes" xml:space="preserve">
          <source>Primary options</source>
          <target state="translated">主要选择</target>
        </trans-unit>
        <trans-unit id="6bb2c0d9eeead1624170a74e551ddb9f9c31641a" translate="yes" xml:space="preserve">
          <source>Prior to version 7, the only API exposed by this module was for a single line and optional column pointer. The old API will now log a deprecation warning.</source>
          <target state="translated">在第7版之前,该模块暴露的唯一API是单行和可选的列指针。旧的API现在会记录一个废弃的警告。</target>
        </trans-unit>
        <trans-unit id="7a6db4f2f5b13a6f7e73bd31695867e836cc3396" translate="yes" xml:space="preserve">
          <source>Project-wide configs can also be disabled by setting &lt;a href=&quot;../options/index#configfile&quot;&gt;&quot;configFile&quot;&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">也可以通过将&lt;a href=&quot;../options/index#configfile&quot;&gt;&amp;ldquo; configFile&amp;rdquo;&lt;/a&gt;设置为 &lt;code&gt;false&lt;/code&gt; 来禁用项目范围的配置。</target>
        </trans-unit>
        <trans-unit id="8494c75c9d0c2074034ec39cf9f932e81ad5c295" translate="yes" xml:space="preserve">
          <source>Project-wide configuration</source>
          <target state="translated">全项目配置</target>
        </trans-unit>
        <trans-unit id="fed06e85af91f6e6d677c2217ce6145f63101ae6" translate="yes" xml:space="preserve">
          <source>Promise version of &lt;code&gt;babel.transformFile&lt;/code&gt;. Returns a promise for the transformed contents of the &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;babel.transformFile&lt;/code&gt; 的承诺版本。返回 &lt;code&gt;filename&lt;/code&gt; 转换后的内容的承诺。</target>
        </trans-unit>
        <trans-unit id="f55a038f0097428fffbec8bc2b62d5a60a24b84d" translate="yes" xml:space="preserve">
          <source>Property literals transform</source>
          <target state="translated">属性字数转换</target>
        </trans-unit>
        <trans-unit id="929017ada05ac8077c3ebc10b0f695a210b9db02" translate="yes" xml:space="preserve">
          <source>Proposal</source>
          <target state="translated">Proposal</target>
        </trans-unit>
        <trans-unit id="fd73cdde9229b6a26119cb4a367431844c3a9ad0" translate="yes" xml:space="preserve">
          <source>Proposal: Async Functions for ECMAScript</source>
          <target state="translated">提议。ECMAScript的异步函数</target>
        </trans-unit>
        <trans-unit id="4669a6eab2ab6682f5781822886965d43202d490" translate="yes" xml:space="preserve">
          <source>Proposal: Asynchronous iteration for ECMAScript</source>
          <target state="translated">提议。ECMAScript的异步迭代问题</target>
        </trans-unit>
        <trans-unit id="18931e025afdf3d0c80c98b327a74dc0a600ab4c" translate="yes" xml:space="preserve">
          <source>Proposal: Call Constructor</source>
          <target state="translated">建议。调用构造函数</target>
        </trans-unit>
        <trans-unit id="962455362295e67d1c22abd17f43976aac9a2f69" translate="yes" xml:space="preserve">
          <source>Proposal: Class Static Block</source>
          <target state="translated">提议。类静态块</target>
        </trans-unit>
        <trans-unit id="354bf25a4b04947aca1944c3c46a8969e92e33f7" translate="yes" xml:space="preserve">
          <source>Proposal: ECMAScript throw expressions</source>
          <target state="translated">提议。ECMAScript抛出表达式</target>
        </trans-unit>
        <trans-unit id="2b40e441b68cf7e9a7596859b37e780d8c455da2" translate="yes" xml:space="preserve">
          <source>Proposal: ES Class Fields &amp;amp; Static Properties</source>
          <target state="translated">提案：ES类字段和静态属性</target>
        </trans-unit>
        <trans-unit id="338159d5e9f6ff2f0ce8e8ac40c53e18feee1186" translate="yes" xml:space="preserve">
          <source>Proposal: Ergonomic brand checks for Private Fields</source>
          <target state="translated">提议。私人领域的人体工程学品牌检查</target>
        </trans-unit>
        <trans-unit id="9784b042d0160d7dfc8fb08caef6fdcdc956d0cb" translate="yes" xml:space="preserve">
          <source>Proposal: Exponentiation Operator</source>
          <target state="translated">提议。指数运算符</target>
        </trans-unit>
        <trans-unit id="07f1f842c1cc5959b5d276d01355218cbdd6e0c9" translate="yes" xml:space="preserve">
          <source>Proposal: JavaScript Decorators</source>
          <target state="translated">提议。JavaScript Decorators</target>
        </trans-unit>
        <trans-unit id="9cd89b60d1eeaa3a1a99696ec74b7f8b5afdc106" translate="yes" xml:space="preserve">
          <source>Proposal: Javascript Decorators</source>
          <target state="translated">提议。Javascript Decorators</target>
        </trans-unit>
        <trans-unit id="afb4b2f3f0fb481c0581e2f82b58bd6400932b30" translate="yes" xml:space="preserve">
          <source>Proposal: Logical Assignment Operators</source>
          <target state="translated">提议。逻辑赋值运算符</target>
        </trans-unit>
        <trans-unit id="34bc25fd71f5f37ada933a022f699e4154c2643f" translate="yes" xml:space="preserve">
          <source>Proposal: Nullish Coalescing</source>
          <target state="translated">提议。虚无凝聚</target>
        </trans-unit>
        <trans-unit id="dc0e6ea21253c0de195d054f16e4d867f956965e" translate="yes" xml:space="preserve">
          <source>Proposal: Numeric Separators</source>
          <target state="translated">提议。数字分隔符</target>
        </trans-unit>
        <trans-unit id="a0c73c9b993110821b2b025f790e954d940470c8" translate="yes" xml:space="preserve">
          <source>Proposal: Object Rest/Spread Properties for ECMAScript</source>
          <target state="translated">提议。ECMAScript的对象静止/展开属性。</target>
        </trans-unit>
        <trans-unit id="4c80cd4d972803f81947e59ffe9891ef2214bdbc" translate="yes" xml:space="preserve">
          <source>Proposal: Optional Catch Binding for ECMAScript</source>
          <target state="translated">提议。ECMAScript的可选Catch Binding</target>
        </trans-unit>
        <trans-unit id="9d55a7ae9c70f2f784d383b7e6aa0a061e7d8825" translate="yes" xml:space="preserve">
          <source>Proposal: Optional Chaining</source>
          <target state="translated">提议:任择链</target>
        </trans-unit>
        <trans-unit id="3a4e8cdf8347e6e7c0c3cc075a9e333fba80212d" translate="yes" xml:space="preserve">
          <source>Proposal: Partial Application</source>
          <target state="translated">提议。部分申请</target>
        </trans-unit>
        <trans-unit id="1cf4ab2851c0f9ba59d92b911af4204f7f26f5dd" translate="yes" xml:space="preserve">
          <source>Proposal: Private methods and getter/setters for JavaScript classes</source>
          <target state="translated">提议。JavaScript类的私有方法和getter/setter。</target>
        </trans-unit>
        <trans-unit id="adc184b20d737a05b6034447362e3c695c3a78fa" translate="yes" xml:space="preserve">
          <source>Proposal: Public and private instance fields</source>
          <target state="translated">提议。公共和私人实例领域</target>
        </trans-unit>
        <trans-unit id="7136b882afde140716b97a487469bfd89d03dba4" translate="yes" xml:space="preserve">
          <source>Proposal: Static class features</source>
          <target state="translated">提议。静态类特征</target>
        </trans-unit>
        <trans-unit id="f5637afd638ab133a3d837c9bbf8262197dd7c23" translate="yes" xml:space="preserve">
          <source>Proto to assign transform</source>
          <target state="translated">分配变换的Proto</target>
        </trans-unit>
        <trans-unit id="bee41b1f66559eebd3ccf0d24972d1e30a00fac2" translate="yes" xml:space="preserve">
          <source>Provides a default comment state for &lt;code&gt;shouldPrintComment&lt;/code&gt; if no function is given. See the default value of that option for more info.</source>
          <target state="translated">如果未提供任何功能， &lt;code&gt;shouldPrintComment&lt;/code&gt; 提供默认的注释状态。有关更多信息，请参见该选项的默认值。</target>
        </trans-unit>
        <trans-unit id="3f4e9c3230cfae5c80682141499a272a0904425c" translate="yes" xml:space="preserve">
          <source>Re-exporting all names requires up-front execution because otherwise there is no way to know what names need to be exported.</source>
          <target state="translated">重新导出所有的名字需要前期执行,因为否则无法知道哪些名字需要导出。</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="b45abef89c5a7eb6315daebc4260c369549eff96" translate="yes" xml:space="preserve">
          <source>React Automatic Runtime</source>
          <target state="translated">React自动运行时</target>
        </trans-unit>
        <trans-unit id="4a584a81dcda57cee3406c3007e45d153a07e913" translate="yes" xml:space="preserve">
          <source>React Classic Runtime</source>
          <target state="translated">React经典运行时</target>
        </trans-unit>
        <trans-unit id="a5c9c800f5a75a166b6db93451a773913f12633b" translate="yes" xml:space="preserve">
          <source>React JSX compat transform</source>
          <target state="translated">React JSX兼容转换</target>
        </trans-unit>
        <trans-unit id="794f6527a906dfbb2c5e2317360c08233416de4c" translate="yes" xml:space="preserve">
          <source>React JSX self transform</source>
          <target state="translated">React JSX自转换</target>
        </trans-unit>
        <trans-unit id="699051c85586512f96e0d0b6139156d8b609358b" translate="yes" xml:space="preserve">
          <source>React JSX source transform</source>
          <target state="translated">React JSX源码转换</target>
        </trans-unit>
        <trans-unit id="dbd832ff5b7ad512cf542a7af89d1979449a3569" translate="yes" xml:space="preserve">
          <source>React JSX transform</source>
          <target state="translated">React JSX转换</target>
        </trans-unit>
        <trans-unit id="03bf7c929f6a1568ed23513b7357acc7bbbb37ca" translate="yes" xml:space="preserve">
          <source>React constant elements transformer</source>
          <target state="translated">反应式恒定元件变压器</target>
        </trans-unit>
        <trans-unit id="6d513275e76bf7a930cefc3b8feb201289e66d12" translate="yes" xml:space="preserve">
          <source>React display name transformer</source>
          <target state="translated">React显示名称变换器</target>
        </trans-unit>
        <trans-unit id="e01718d70371dddf6e0317b51fb57682f4b8dffc" translate="yes" xml:space="preserve">
          <source>React inline elements transform</source>
          <target state="translated">React内嵌元素转换</target>
        </trans-unit>
        <trans-unit id="73f5ad7ced257db41a470bccfc5f94ee94eaaf62" translate="yes" xml:space="preserve">
          <source>React preset</source>
          <target state="translated">反应式预设</target>
        </trans-unit>
        <trans-unit id="71bddba0cbfaee07ec13cd5c53ea806bd5f20994" translate="yes" xml:space="preserve">
          <source>React users should enable this transform in dev mode.</source>
          <target state="translated">React用户应该在开发模式下启用这个变换。</target>
        </trans-unit>
        <trans-unit id="0b5238d454df10539f8fc9c6c4f0e0b5b42daa8e" translate="yes" xml:space="preserve">
          <source>Record Example</source>
          <target state="translated">记录示例</target>
        </trans-unit>
        <trans-unit id="bd8dcf99b75345b2b1fd21a94c14240d829cdc35" translate="yes" xml:space="preserve">
          <source>Reduce statement into expression</source>
          <target state="translated">将语句转化为表达式</target>
        </trans-unit>
        <trans-unit id="0d7cf200c4f6c96acc86615854fc6afbe346cb59" translate="yes" xml:space="preserve">
          <source>Ref: &lt;a href=&quot;https://github.com/babel/babel-preset-env/issues/14&quot;&gt;#14&lt;/a&gt;</source>
          <target state="translated">参考：&lt;a href=&quot;https://github.com/babel/babel-preset-env/issues/14&quot;&gt;＃14&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="168530f80454b697207445264213c78393bb96a6" translate="yes" xml:space="preserve">
          <source>Ref: &lt;a href=&quot;https://github.com/babel/babel-preset-env/issues/7&quot;&gt;#7&lt;/a&gt;</source>
          <target state="translated">参考：&lt;a href=&quot;https://github.com/babel/babel-preset-env/issues/7&quot;&gt;＃7&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba673c42c0344afa92ab3d44ab6f63a97ab83252" translate="yes" xml:space="preserve">
          <source>Ref: &lt;a href=&quot;https://github.com/babel/babel-preset-env/pull/19&quot;&gt;#19&lt;/a&gt;</source>
          <target state="translated">参考：&lt;a href=&quot;https://github.com/babel/babel-preset-env/pull/19&quot;&gt;＃19&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="d98492c93417cb074f0fefeac6f43e7a1c51e4e6" translate="yes" xml:space="preserve">
          <source>References to files &lt;em&gt;within&lt;/em&gt; a package are untouched.</source>
          <target state="translated">引用文件&lt;em&gt;中的&lt;/em&gt;一个包都不变。</target>
        </trans-unit>
        <trans-unit id="2bc1057f98f8b2f31736aee1c43c7d980af0d1a8" translate="yes" xml:space="preserve">
          <source>Regenerator aliasing</source>
          <target state="translated">再生器别名</target>
        </trans-unit>
        <trans-unit id="20ca2e2a0081e7840f7cd791b76fb130fe639e1a" translate="yes" xml:space="preserve">
          <source>Regenerator transform</source>
          <target state="translated">再生器改造</target>
        </trans-unit>
        <trans-unit id="4e91bb7baad4854886f89b1342fb77f27cfbed48" translate="yes" xml:space="preserve">
          <source>Regexp constructors transform</source>
          <target state="translated">重述法构造器转换</target>
        </trans-unit>
        <trans-unit id="ea54affc2e2dc64cf05462c600bf8eb34b49a6c1" translate="yes" xml:space="preserve">
          <source>Relative paths starting with &lt;code&gt;./&lt;/code&gt; pass through untouched.</source>
          <target state="translated">以 &lt;code&gt;./&lt;/code&gt; 开头的相对路径保持不变。</target>
        </trans-unit>
        <trans-unit id="b9a734a1eb839f8b2181707de2b35eadc3ebcbc3" translate="yes" xml:space="preserve">
          <source>Remove console transform</source>
          <target state="translated">移除控制台转换</target>
        </trans-unit>
        <trans-unit id="5c11a0a8bd569b7275af565c51452716e45edeff" translate="yes" xml:space="preserve">
          <source>Remove debugger transform</source>
          <target state="translated">移除调试器转换</target>
        </trans-unit>
        <trans-unit id="433a90dc0e5646b71cd5ef201c2c8d20cda2dc11" translate="yes" xml:space="preserve">
          <source>Remove the &lt;code&gt;const&lt;/code&gt;, which makes it available at runtime.</source>
          <target state="translated">删除 &lt;code&gt;const&lt;/code&gt; ，使其在运行时可用。</target>
        </trans-unit>
        <trans-unit id="8007e74469927912b1997eb757d557f992dcca9e" translate="yes" xml:space="preserve">
          <source>Removes the inline Babel helpers and uses the module &lt;code&gt;babel-runtime/helpers&lt;/code&gt; instead.</source>
          <target state="translated">删除内联Babel帮助程序，而是使用模块 &lt;code&gt;babel-runtime/helpers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58ba32ec61d6fed7ed388a59da67a31ccc058037" translate="yes" xml:space="preserve">
          <source>Replace Object.assign with an inline helper</source>
          <target state="translated">将Object.assign替换为一个内联帮助程序。</target>
        </trans-unit>
        <trans-unit id="4731097db302e5523324b9a68bbdc0480bd6207f" translate="yes" xml:space="preserve">
          <source>Replace the component used when compiling JSX fragments.</source>
          <target state="translated">替换编译JSX片段时使用的组件。</target>
        </trans-unit>
        <trans-unit id="a0d506ce00ea1d14abd3f376bd8255422056e6bf" translate="yes" xml:space="preserve">
          <source>Replace the function used when compiling JSX expressions.</source>
          <target state="translated">替换编译JAX表达式时使用的函数。</target>
        </trans-unit>
        <trans-unit id="c38e70318d6aa312f0bf90ba875bbcabd03b0073" translate="yes" xml:space="preserve">
          <source>Replace the function used when compiling JSX expressions. This is so that we know that the import is not a type import, and should not be removed.</source>
          <target state="translated">替换编译JAX表达式时使用的函数。这是为了让我们知道导入的不是类型导入,不应该被删除。</target>
        </trans-unit>
        <trans-unit id="82829cd219dd9839569f9e95a98782a3417a67e1" translate="yes" xml:space="preserve">
          <source>Replaces the React.createElement function with babelHelpers.jsx.</source>
          <target state="translated">用babelHelpers.jsx替换React.createElement函数。</target>
        </trans-unit>
        <trans-unit id="1a9c920042d457196d4b0abad1870f3b8869645e" translate="yes" xml:space="preserve">
          <source>Replaces the import source when importing functions.</source>
          <target state="translated">当导入函数时,替换导入源。</target>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="0c645c2138ca5f87d0d6805cebdef6a5f571410f" translate="yes" xml:space="preserve">
          <source>Resolve Babel's options fully, resulting in an options object where:</source>
          <target state="translated">完全解析巴别的选项,产生一个选项对象,其中:</target>
        </trans-unit>
        <trans-unit id="594941af302aef564303a751346b200b67a32b11" translate="yes" xml:space="preserve">
          <source>Resolve a module source ie. &lt;code&gt;import &quot;SOURCE&quot;;&lt;/code&gt; to a custom value. Called as &lt;code&gt;resolveModuleSource(source, filename)&lt;/code&gt;.</source>
          <target state="translated">解决模块源，即。 &lt;code&gt;import &quot;SOURCE&quot;;&lt;/code&gt; 到自定义值。称为 &lt;code&gt;resolveModuleSource(source, filename)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0bdb9f1acc19caa50b226362f5a5de7219b11d9" translate="yes" xml:space="preserve">
          <source>Rest Properties</source>
          <target state="translated">休息属性</target>
        </trans-unit>
        <trans-unit id="857f43908069f727967016e1d2761040d0696202" translate="yes" xml:space="preserve">
          <source>Rest parameters</source>
          <target state="translated">休息参数</target>
        </trans-unit>
        <trans-unit id="8c72173bf1c16dd93b1e8c81f0ff9f02929387bb" translate="yes" xml:space="preserve">
          <source>Retain line numbers. This will lead to wacky code but is handy for scenarios where you can&amp;rsquo;t use source maps. (&lt;strong&gt;NOTE:&lt;/strong&gt; This will not retain the columns)</source>
          <target state="translated">保留行号。这将导致古怪的代码，但是在您无法使用源映射的情况下非常方便。（&lt;strong&gt;注意：&lt;/strong&gt;这不会保留列）</target>
        </trans-unit>
        <trans-unit id="dacb2ce0c2bc781b2b1467e5e90b56a69246d3cd" translate="yes" xml:space="preserve">
          <source>Retain parens around function expressions (could be used to change engine parsing behavior)</source>
          <target state="translated">保留函数表达式周围的分隔符(可用于改变引擎解析行为)。</target>
        </trans-unit>
        <trans-unit id="232f3db04c4faa620bfbfc11fd3689a472ef9881" translate="yes" xml:space="preserve">
          <source>Return value</source>
          <target state="translated">返回值</target>
        </trans-unit>
        <trans-unit id="7bc141d2727a0c74a41c9577fc818bb2ee3a1c1f" translate="yes" xml:space="preserve">
          <source>Returns a promise for an AST.</source>
          <target state="translated">返回一个AST的承诺。</target>
        </trans-unit>
        <trans-unit id="a7941782392d322d605ab88d25588fb0ab5503ff" translate="yes" xml:space="preserve">
          <source>Returns an AST.</source>
          <target state="translated">返回一个AST。</target>
        </trans-unit>
        <trans-unit id="3a82310ae4a4a1ff8cf7bb25797ac2e05c9ad4f1" translate="yes" xml:space="preserve">
          <source>Right:</source>
          <target state="translated">Right:</target>
        </trans-unit>
        <trans-unit id="955e3c5c2827f76a1843453b7dcb648d92beed69" translate="yes" xml:space="preserve">
          <source>Root &lt;code&gt;babel.config.json&lt;/code&gt; file</source>
          <target state="translated">根 &lt;code&gt;babel.config.json&lt;/code&gt; 文件</target>
        </trans-unit>
        <trans-unit id="bcc9984a00a58f6ffc0341eb85ee3e95f6120615" translate="yes" xml:space="preserve">
          <source>Run it</source>
          <target state="translated">运行它</target>
        </trans-unit>
        <trans-unit id="d5d9a1cf1082b825fe532976edbc1251e87ab197" translate="yes" xml:space="preserve">
          <source>Runtime required</source>
          <target state="translated">所需运行时间</target>
        </trans-unit>
        <trans-unit id="e3895b75f50a861d4a6d98b9f9f404b89bee705a" translate="yes" xml:space="preserve">
          <source>Runtime transform</source>
          <target state="translated">运行时转换</target>
        </trans-unit>
        <trans-unit id="ee26eca4d167d2b8d502c7e70e990cccefaf0044" translate="yes" xml:space="preserve">
          <source>Same with presets</source>
          <target state="translated">预设也是如此</target>
        </trans-unit>
        <trans-unit id="5e57be20a53387eabb6c735ba3e356ac430940d1" translate="yes" xml:space="preserve">
          <source>Searching will stop once a directory containing a &lt;code&gt;package.json&lt;/code&gt; is found, so a relative config only applies within a single package.</source>
          <target state="translated">一旦找到包含 &lt;code&gt;package.json&lt;/code&gt; 的目录，搜索就会停止，因此相对配置仅适用于单个包。</target>
        </trans-unit>
        <trans-unit id="b0f96acb4f0db0e2e5bfb9350436771f215b38c4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../options/index&quot;&gt;the full option list here&lt;/a&gt;.</source>
          <target state="translated">请&lt;a href=&quot;../options/index&quot;&gt;在此处&lt;/a&gt;查看完整的选项列表。</target>
        </trans-unit>
        <trans-unit id="782e8743f656de7c4e27f76b69c1b5afcb8ad24a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../transform-decorators/index&quot;&gt;transform-decorators&lt;/a&gt; for more information.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;../transform-decorators/index&quot;&gt;转换修饰器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7d960c375cb7251d8b4646884af101d13b96bda" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/facebook/react/issues/3226&quot;&gt;https://github.com/facebook/react/issues/3226&lt;/a&gt; for more on this</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/facebook/react/issues/3226&quot;&gt;https://github.com/facebook/react/issues/3226&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02e59a7c05324ada08873fd858a89eb86349adb0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/tc39/proposal-record-tuple/issues/10&quot;&gt;Ergonomics of &lt;code&gt;#{}&lt;/code&gt;/&lt;code&gt;#[]&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">有关更多信息，请参见&lt;a href=&quot;https://github.com/tc39/proposal-record-tuple/issues/10&quot;&gt; &lt;code&gt;#{}&lt;/code&gt; &lt;/a&gt; / &lt;code&gt;#[]&lt;/code&gt; 的人体工程学。</target>
        </trans-unit>
        <trans-unit id="433651bdfcbf9e9647e325f1e7fb7692f13dfc81" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://kangax.github.io/nfe/#jscript-bugs&quot;&gt;particularly nasty JScript bugs&lt;/a&gt;.</source>
          <target state="translated">请参阅&lt;a href=&quot;https://kangax.github.io/nfe/#jscript-bugs&quot;&gt;特别讨厌的JScript错误&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="870b22b7dfe9d6fb03822ab7f33061f42cf0583b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isAnyTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertAnyTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isAnyTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertAnyTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5373aa9a32f3308ef8b1335d1ad254e4ed4988d" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isArgumentPlaceholder(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertArgumentPlaceholder(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isArgumentPlaceholder(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertArgumentPlaceholder(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fcf0b8aaa4133ac004f7fcd752ff51cccccad903" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isArrayExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertArrayExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isArrayExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertArrayExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06e475169d06d0c69130944c92ec323873872616" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isArrayPattern(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertArrayPattern(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isArrayPattern(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertArrayPattern(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="655455daa41a7ead8bf74b6d1da734fb1cc0706e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isArrayTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertArrayTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isArrayTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertArrayTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="165cb12827cd9fe76ece9cebf0c794b66790d56f" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isArrowFunctionExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertArrowFunctionExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isArrowFunctionExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertArrowFunctionExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e71d9ce9a342348822d358f78e660c24c7058d0c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isAssignmentExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertAssignmentExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isAssignmentExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertAssignmentExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d409c05c2810a632fc3dda637da2ad46c544e8fa" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isAssignmentPattern(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertAssignmentPattern(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isAssignmentPattern(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertAssignmentPattern(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88ceac5118f01b771bbb850d33948643e7bf6699" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isAwaitExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertAwaitExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isAwaitExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertAwaitExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6dec535df4885463bfd6242b8f3f922a087ea0ea" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isBigIntLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertBigIntLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isBigIntLiteral(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertBigIntLiteral(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59d9ce0dbf07166fd9ff88cd8cf33071c3b2fdd1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isBinaryExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertBinaryExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isBinaryExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertBinaryExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69364643cbbbf5438a1892061dcd0e3850b65018" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isBindExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertBindExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isBindExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertBindExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b0fff97fa59a46b774bbd5be298736a64c7dbe48" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isBlockStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertBlockStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isBlockStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertBlockStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41dc2fc74c17070eaa1513d2c3d45265ab2a66c1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isBooleanLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertBooleanLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isBooleanLiteral(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertBooleanLiteral(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e2db9694e643c139ec50452d772c90f1f9ff069" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isBooleanLiteralTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertBooleanLiteralTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isBooleanLiteralTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertBooleanLiteralTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b566125fd71553b0218ba7e36fe05e8e1b5394d" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isBooleanTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertBooleanTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isBooleanTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertBooleanTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0229f4f1e73999910a844e5e3d0991941cd220dc" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isBreakStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertBreakStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isBreakStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertBreakStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5c1765109b9661f87a7200c927aa7c782a6170a7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isCallExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertCallExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isCallExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertCallExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="824ecb45a3226fd6426b7c174be155dee55abd8e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isCatchClause(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertCatchClause(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isCatchClause(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertCatchClause(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4e927fb5ca0fcaf2b3e3d787b365fa0d2aeed12" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isClassBody(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertClassBody(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isClassBody(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertClassBody(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b03c87e016d41d3e42547edf66cc154f6647c55" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isClassDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertClassDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isClassDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertClassDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2eb41071f7b7e77bce06dd67a77e9060f1e40055" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isClassExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertClassExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isClassExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertClassExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2112c483cd26b2e1769512c192ab2a40806c315b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isClassImplements(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertClassImplements(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isClassImplements(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertClassImplements(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78c0523e0d42f5e51c19d00acb84528f6e6b2372" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isClassMethod(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertClassMethod(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isClassMethod(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertClassMethod(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3e3b5aa046adf4033cf95fcd31cbbd408f7683e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isClassPrivateProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertClassPrivateProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isClassPrivateProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertClassPrivateProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="876e3872a4bce5c65b9cdb881c6dc86dca32803e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isClassProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertClassProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isClassProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertClassProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e23b3ada10bf86ca5b2c02e0bfc876b9b98e484" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isConditionalExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertConditionalExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isConditionalExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertConditionalExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7f7e024a3994a2b50c7ad1d11a10288ab95bab7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isContinueStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertContinueStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isContinueStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertContinueStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="544c62649d68be65258536f0efe4831529720198" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDebuggerStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDebuggerStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDebuggerStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDebuggerStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8305608d298df3ea806816e8116868b4f9bf8c91" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareClass(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareClass(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareClass(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareClass(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dafc7ae9f7007a6376a0c6edf939873df6a916c5" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareExportAllDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareExportAllDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareExportAllDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareExportAllDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8dbc29d9d17b84990abe4fa90c23220c0e7d5d19" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareExportDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareExportDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareExportDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareExportDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="943a26b19fc786b4a824d5bd7ddf5122e75419c0" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareFunction(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareFunction(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareFunction(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareFunction(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4da2deafbc683cfabec2e5b43beeaf83a3e58d0e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareInterface(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareInterface(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareInterface(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareInterface(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1469f4267b573921e7cdbecfdd021233df1a4b96" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareModule(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareModule(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareModule(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareModule(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0830e8bf50803bb451c4631727f4331a60b06ebc" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareModuleExports(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareModuleExports(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareModuleExports(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareModuleExports(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="207cdea57fbba7c88595ffa136c5b9634a68b713" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareOpaqueType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareOpaqueType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareOpaqueType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareOpaqueType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bae1875996703f96f6309c5e56a82209664a34b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareTypeAlias(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareTypeAlias(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareTypeAlias(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareTypeAlias(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c2534e95623d270ec72b31ad63f1ee858dfac4c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclareVariable(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclareVariable(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclareVariable(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclareVariable(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5be8c9defd2181d09e6f68db860c69743dffb2bc" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDeclaredPredicate(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDeclaredPredicate(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDeclaredPredicate(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDeclaredPredicate(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e36b2eba13b8f7cacbe7aee28b23467a2361e2cc" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDecorator(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDecorator(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDecorator(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDecorator(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34989f34bf06ce546d85ad1f60a2476263fcb2b0" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDirective(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDirective(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDirective(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDirective(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b21fb1dfd29a2e1da5ce8753bcdf030f907d2d5" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDirectiveLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDirectiveLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDirectiveLiteral(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDirectiveLiteral(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31b5ce1cf0b3d4280745b725d2a78006701cd09b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDoExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDoExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDoExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDoExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="954a717723d022f4b25bdbc5be9aef172a71b088" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isDoWhileStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertDoWhileStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isDoWhileStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertDoWhileStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="618572b10254a100b87faaf6400fef7533ee49c7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isEmptyStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertEmptyStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isEmptyStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertEmptyStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de4c4861085f814faed8e5313a2df8e88aef9028" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isEmptyTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertEmptyTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isEmptyTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertEmptyTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d5bd051fcf51cc6d486990010328197b23565db" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExistentialTypeParam(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExistentialTypeParam(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExistentialTypeParam(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExistentialTypeParam(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6b0bc62b6b2d40458cb84f5be2b9667be718ea0" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExistsTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExistsTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExistsTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExistsTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9644b9ed655480dd13cb3e7ecbbb16c2c837ffef" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExportAllDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExportAllDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExportAllDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExportAllDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5036ca480ba5deeed41a477e25441b02afb5034" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExportDefaultDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExportDefaultDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExportDefaultDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExportDefaultDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17086c3b6d99485ab08cd0ef741ddc1277433b4f" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExportDefaultSpecifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExportDefaultSpecifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExportDefaultSpecifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExportDefaultSpecifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a9f4bbbc581a9d8913a900823ee36d647312be1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExportNamedDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExportNamedDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExportNamedDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExportNamedDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97cf670187fedce73f9ebeed644b62260cb7c794" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExportNamespaceSpecifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExportNamespaceSpecifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExportNamespaceSpecifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExportNamespaceSpecifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e6bb3f2de62f28f82144e106cb81d6a9afd2678" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExportSpecifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExportSpecifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExportSpecifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExportSpecifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3283e35e804fd228e2ead889120af63844d7c2ac" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isExpressionStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertExpressionStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isExpressionStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertExpressionStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76c115a3031553a609a79a812e98d00a2a00652e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isFile(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertFile(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isFile(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertFile(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b445fddc49fe73a6082ced7e575abcc7693f8467" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isForAwaitStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertForAwaitStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isForAwaitStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertForAwaitStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ef90fb181a11fc3f08e0d578b7229cc393a7f40" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isForInStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertForInStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isForInStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertForInStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7a7c72c74fba9f240a55c7420727e620b7c45ee" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isForOfStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertForOfStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isForOfStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertForOfStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b069a1f8f96c4893799842f9520f5499ec03c02" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isForStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertForStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isForStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertForStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da0c125a04d87b97818cff1555ffc45dfd1927f3" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isFunctionDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertFunctionDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isFunctionDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertFunctionDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="979006a64335eacf105e5932b2ba3211ffc46b41" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isFunctionExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertFunctionExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isFunctionExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertFunctionExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1203b8cdb46a832d8e91ced5f3d1f40061d3770" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isFunctionTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertFunctionTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isFunctionTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertFunctionTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9546c6b9256ac8894f9caee95717be4edccd8d43" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isFunctionTypeParam(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertFunctionTypeParam(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isFunctionTypeParam(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertFunctionTypeParam(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62c273c1c241d65f35ab80c3b25f76da97072c39" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isGenericTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertGenericTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isGenericTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertGenericTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="961ac529223bdc36fc70cdc5bbb4fb7cbcf9fbfb" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isIdentifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertIdentifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isIdentifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertIdentifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7083243323ddafaedb6ab0ac57470161587f3a2a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isIfStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertIfStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isIfStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertIfStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa455037266b8990bd6f33fce0cb2b0e4022afb8" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isImport(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertImport(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isImport(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertImport(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df192e760a9709011882eadb394f0485a2d5e7df" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isImportDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertImportDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isImportDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertImportDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="269ce2bd1c10f9598012f97f19fb05743487789a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isImportDefaultSpecifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertImportDefaultSpecifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isImportDefaultSpecifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertImportDefaultSpecifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c98a691c7509d3564ec6cab12085773b2f13f32" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isImportNamespaceSpecifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertImportNamespaceSpecifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isImportNamespaceSpecifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertImportNamespaceSpecifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61d8569437ae9293405487526c5304a8b17c0116" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isImportSpecifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertImportSpecifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isImportSpecifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertImportSpecifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09a951486ae530e8888fa88bc927e633f84fd7b7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isInferredPredicate(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertInferredPredicate(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isInferredPredicate(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertInferredPredicate(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa720f380fb5b16e2047be93ac4dfc65f82a32f7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isInterfaceDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertInterfaceDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isInterfaceDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertInterfaceDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36836020ab5102988d5c4af15f82cd4e5aa2b22c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isInterfaceExtends(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertInterfaceExtends(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isInterfaceExtends(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertInterfaceExtends(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8f50749c1a04ec12029799758589f939eb8d3ce" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isInterfaceTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertInterfaceTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isInterfaceTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertInterfaceTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fcaa31adc084f096a03e16369ff0f27c8dbe53c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isInterpreterDirective(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertInterpreterDirective(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isInterpreterDirective(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertInterpreterDirective(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="977912aec1e07edb16082e08174d76dc5f70706a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isIntersectionTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertIntersectionTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isIntersectionTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertIntersectionTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6852db58790746e0c20723b6bc3c496283f2a4db" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXAttribute(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXAttribute(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXAttribute(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXAttribute(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8995fd8024d19e7787f17d19293e8248d5ce1e66" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXClosingElement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXClosingElement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXClosingElement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXClosingElement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71bbc0b95bfa8b3b564bf84c44b3566b983b7719" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXClosingFragment(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXClosingFragment(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXClosingFragment(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXClosingFragment(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7935cfa91e3f1bd99b7eed9b4c3cedc237f3497" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXElement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXElement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXElement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXElement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23457d58cbd8e1b5339b0fc9b250624641522b0b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXEmptyExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXEmptyExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXEmptyExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXEmptyExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f52085727e0cfcb9cb8e2f3f9889c892cdb1c99" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXExpressionContainer(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXExpressionContainer(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXExpressionContainer(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXExpressionContainer(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2fa160080673f76197490671fe195b1a6df97152" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXFragment(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXFragment(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXFragment(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXFragment(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ba26d5d57042b305f5ae42f0830cdec036301fd" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXIdentifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXIdentifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXIdentifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXIdentifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8663ef28f2bfd6eeb7ed633a096cd16c4416139" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXMemberExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXMemberExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXMemberExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXMemberExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d01489207dfabaa062d0196f60c51ecb842cb82" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXNamespacedName(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXNamespacedName(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXNamespacedName(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXNamespacedName(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f730f26526ef8ae50a3e6931ceb7c2f1c0111bc1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXOpeningElement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXOpeningElement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXOpeningElement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXOpeningElement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="37b7c6666a8e9c332cb61c99b4289ab617e8a88c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXOpeningFragment(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXOpeningFragment(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXOpeningFragment(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXOpeningFragment(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fc10493e048d2dbc00a87d14f04d4f42812287c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXSpreadAttribute(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXSpreadAttribute(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXSpreadAttribute(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXSpreadAttribute(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44fa957004a9d3a93881dc311439ba21d67cf9c1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXSpreadChild(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXSpreadChild(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXSpreadChild(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXSpreadChild(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="363de3e3850fbc32f2477eaf0200ef749a70a0c9" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isJSXText(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertJSXText(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isJSXText(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertJSXText(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3cdf32f72884bcf20daea118f06cdc659923300" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isLabeledStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertLabeledStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isLabeledStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertLabeledStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c317f260035e0905972703955dff5bdc83dfcf2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isLogicalExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertLogicalExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isLogicalExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertLogicalExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db22f78c723f7106f847c4ce9884364a55de7ffa" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isMemberExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertMemberExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isMemberExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertMemberExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d41b6057c9177c9b445a8b4e29c8323393e71e2b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isMetaProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertMetaProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isMetaProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertMetaProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a85f0bbb590a9df50d31f4b9cc7aeda0b0b0466" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isMixedTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertMixedTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isMixedTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertMixedTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22df840d5a15c2d999be1138cca07f20c11ada16" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNewExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNewExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNewExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNewExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd9f9f64143617771923dc94317fc252fea785f0" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNoop(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNoop(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNoop(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNoop(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02e4d77baec422b9fbae1a2f1da96e9903290d9f" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNullLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNullLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNullLiteral(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNullLiteral(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c499b8c614b2feccaeedb4eb517eac035cc2e72c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNullLiteralTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNullLiteralTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNullLiteralTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNullLiteralTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7aed92e69956b012cc15556f532292329f33c0c9" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNullableTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNullableTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNullableTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNullableTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="610c4b2c7e7246ad1f9f687346dd9123fe8e5f81" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNumberLiteralTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNumberLiteralTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNumberLiteralTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNumberLiteralTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7880492e6dc81207b1f9a127527f1435a2630021" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNumberTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNumberTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNumberTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNumberTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd33d973ac92df63b718cf877d3d07e6a6128290" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNumericLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNumericLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNumericLiteral(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNumericLiteral(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb69c2cbb406a1c7ad51b481ca68aec7c9bc81ae" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isNumericLiteralTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertNumericLiteralTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isNumericLiteralTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertNumericLiteralTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="536052a6d6ab9acaabe8b49979b216279e2f4345" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1cd2925bbc4a010d10e4425a150011e2550bdcd5" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectMethod(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectMethod(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectMethod(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectMethod(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78d89b01d3d6c6678a40911c1849bc11a8f2c470" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectPattern(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectPattern(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectPattern(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectPattern(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbe605d3cbc36f65adcb1f7e328a953c3069e3fd" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="759f6c8bbf0184ef8fb216b95efcdd702fba9d93" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b772dcd565a4c8f4a0764dc44254530f38e1c9c1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectTypeCallProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectTypeCallProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectTypeCallProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectTypeCallProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9498edeb569263c06da95fa3b700d18c33c64138" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectTypeIndexer(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectTypeIndexer(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectTypeIndexer(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectTypeIndexer(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e31116c1653eea84a691dd26496ed83156718ede" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectTypeInternalSlot(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectTypeInternalSlot(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectTypeInternalSlot(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectTypeInternalSlot(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2435767fc296c3f09dbd82ede0c3cf2a2fb6643e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectTypeProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectTypeProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectTypeProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectTypeProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9de0ac7ef8146f4e1edc0f5d1cfe265bf64d4ab0" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isObjectTypeSpreadProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertObjectTypeSpreadProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isObjectTypeSpreadProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertObjectTypeSpreadProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7642a6aecf0fa3d34dbfbb43e4fdd660847f33a2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isOpaqueType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertOpaqueType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isOpaqueType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertOpaqueType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="940b054c76f8e8180530b2f30c1b3b2177308b2a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isOptionalCallExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertOptionalCallExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isOptionalCallExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertOptionalCallExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="89276daf8a4405f1cccd10bc69675f87c44d5014" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isOptionalMemberExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertOptionalMemberExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isOptionalMemberExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertOptionalMemberExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b73406cc27f1ea9cfeada8a8e9e0000f0ca6b14e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isParenthesizedExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertParenthesizedExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isParenthesizedExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertParenthesizedExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="abd1c452804668acef63744afc5aa2e9747abf03" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isPrivateName(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertPrivateName(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isPrivateName(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertPrivateName(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e4a6f4b0ff35f6c6d987635a50d105ca7f2990f1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isProgram(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertProgram(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isProgram(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertProgram(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c79f27233b949dea0c4c6819079b383de117ef8" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isQualifiedTypeIdentifier(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertQualifiedTypeIdentifier(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isQualifiedTypeIdentifier(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertQualifiedTypeIdentifier(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d61af4d98414a662c47e26cef08ef035aad97f1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isRegExpLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertRegExpLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isRegExpLiteral(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertRegExpLiteral(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fda6fa8deb041268436632d8a3f5b4e903b77430" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isRestElement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertRestElement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isRestElement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertRestElement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e8f7040cc621df568b18e166024ddc6b7077b9e4" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isRestProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertRestProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isRestProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertRestProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29e2e1cc433de9f6168f93ad897726e8ef7f38f2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isReturnStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertReturnStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isReturnStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertReturnStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03d510098fb483aa83544e89f387366ed3b88299" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isSequenceExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertSequenceExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isSequenceExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertSequenceExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="636c80b02edd264218865bbd88bc586a32de394d" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isSpreadElement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertSpreadElement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isSpreadElement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertSpreadElement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1418ec9acc23ba5f96a4ea72d7596d52490e15f7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isSpreadProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertSpreadProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isSpreadProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertSpreadProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ee124cc39f0b3eedfe79651bca3f2f6fe23655a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isStringLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertStringLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isStringLiteral(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertStringLiteral(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d516c5ce89bf61320ba43f47f6f24baf5ea30ff0" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isStringLiteralTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertStringLiteralTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isStringLiteralTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertStringLiteralTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12050566a51d0a2a96a61e644a0a3e5de6617d74" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isStringTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertStringTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isStringTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertStringTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59ac6b6098c59b670cffe30d17f61781838aa815" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isSuper(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertSuper(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isSuper(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertSuper(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b50d111ac502662061c47511f74488200b36ee85" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isSwitchCase(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertSwitchCase(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isSwitchCase(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertSwitchCase(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ff16c509102c3c6fe070d501c2ee71692b5a23b" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isSwitchStatement(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertSwitchStatement(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isSwitchStatement(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertSwitchStatement(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fdf44ac0cb992bbf8211b8f06dfe14022b08778f" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSAnyKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSAnyKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSAnyKeyword(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSAnyKeyword(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65b75a8557d8fb8cb5e72b15e31d32eb958e5594" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSArrayType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSArrayType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSArrayType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSArrayType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d78ed7140a13f8584b6bd148ed0c5b0e5a1b0f2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSAsExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSAsExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSAsExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSAsExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a33a6887bdbb621217e7d1c669fce885962d7db" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSBooleanKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSBooleanKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSBooleanKeyword(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSBooleanKeyword(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00b2d2a0f76c155ac3c6857f59ba9b83ca80f889" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSCallSignatureDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSCallSignatureDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSCallSignatureDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSCallSignatureDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5847fe9a17b8e8b42779ed1e575961862e26f8c2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSConditionalType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSConditionalType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSConditionalType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSConditionalType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="568142e4108b543c70744cd0e8f34e4dc5ebdc1f" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSConstructSignatureDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSConstructSignatureDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSConstructSignatureDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSConstructSignatureDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f26596e27aa64635f9e3a7d9ecdb589bcb3402c1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSConstructorType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSConstructorType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSConstructorType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSConstructorType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70d6e284612c1898b405e3b3352e3cc7b236d281" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSDeclareFunction(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSDeclareFunction(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSDeclareFunction(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSDeclareFunction(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="04be4b3098e9bb511e507763196a27ffc4c24b01" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSDeclareMethod(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSDeclareMethod(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSDeclareMethod(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSDeclareMethod(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf064dd7b386c5994dbf7bcaf8ab277a6720aff1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSEnumDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSEnumDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSEnumDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSEnumDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7eaa851ceff03ff383747818f35f800416b550a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSEnumMember(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSEnumMember(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSEnumMember(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSEnumMember(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0cda249e873ba3b1e8e8f6b22f393983b4fab89" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSExportAssignment(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSExportAssignment(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSExportAssignment(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSExportAssignment(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="115838f977acc9169e50284d8feacc6747f4607d" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSExpressionWithTypeArguments(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSExpressionWithTypeArguments(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSExpressionWithTypeArguments(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSExpressionWithTypeArguments(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e875f9a66b708e950a1289c7a5169720a49adf3a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSExternalModuleReference(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSExternalModuleReference(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSExternalModuleReference(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSExternalModuleReference(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ed3125cb27233a3a97b4ea3e55a1771e5c7fb52" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSFunctionType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSFunctionType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSFunctionType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSFunctionType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e3d3d2e58c6d7475e1c806c5cd7d24e3da4dada" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSImportEqualsDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSImportEqualsDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSImportEqualsDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSImportEqualsDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c97fb2bcb628d9f9ec0628f738b34e9f1d68f67" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSIndexSignature(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSIndexSignature(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSIndexSignature(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSIndexSignature(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f996e07c87ed9916c2cf57d7b1394d5c8934fbac" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSIndexedAccessType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSIndexedAccessType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSIndexedAccessType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSIndexedAccessType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce8030540d00f0094c5e2ce20233f6d0e73e28a2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSInferType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSInferType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSInferType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSInferType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aad808c3a61a114c8761477b46733b019aaac562" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSInterfaceBody(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSInterfaceBody(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSInterfaceBody(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSInterfaceBody(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4edf4d7806976ec42502253bdf6eb350e4e393e5" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSInterfaceDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSInterfaceDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSInterfaceDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSInterfaceDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eafc14a714e2a5709064d9d3b0d22e86772c9f4c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSIntersectionType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSIntersectionType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSIntersectionType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSIntersectionType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="707620581e10bb4a9c845114336a348d5206b2c8" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSLiteralType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSLiteralType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSLiteralType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSLiteralType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2edfbea0849010495e2d3a238d80b6a67f01f68" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSMappedType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSMappedType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSMappedType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSMappedType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3af30dd35521d0f1e4621d592d1713faa4f77983" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSMethodSignature(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSMethodSignature(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSMethodSignature(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSMethodSignature(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca4973a75b77c473ccc217f9c9945711b5d50de1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSModuleBlock(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSModuleBlock(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSModuleBlock(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSModuleBlock(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="044d31ab2a48e6b8dda0c7993f2acc6ac2178926" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSModuleDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSModuleDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSModuleDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSModuleDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8af30420107b0230bd7e440480269b7ecb6a6b25" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSNamespaceExportDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSNamespaceExportDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSNamespaceExportDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSNamespaceExportDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db4e4057d4d8dababe395c1b52830697889ef335" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSNeverKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSNeverKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSNeverKeyword(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSNeverKeyword(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53dade3a1433b839ea45b6de64dde85830070b1a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSNonNullExpression(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSNonNullExpression(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSNonNullExpression(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSNonNullExpression(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8a4a1e3623a9025930196229c27d5e949c3f205" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSNullKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSNullKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSNullKeyword(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSNullKeyword(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35d688f9ddd5ced5c00f9d17d583acef341e6de2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSNumberKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSNumberKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSNumberKeyword(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSNumberKeyword(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="752e98120b435b6046a8c59bf186dd47dac73d35" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSObjectKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSObjectKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSObjectKeyword(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSObjectKeyword(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d59ed66de666407731dd5516fb58ccbb15323539" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSParameterProperty(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSParameterProperty(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSParameterProperty(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSParameterProperty(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72bc70743b14056e0001ba758ed683c9e6b3ea37" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSParenthesizedType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSParenthesizedType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSParenthesizedType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSParenthesizedType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ad3afb72e49b418fe3f256457b232ca67a78e17" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSPropertySignature(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSPropertySignature(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSPropertySignature(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSPropertySignature(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49f8fbe197bb5b34df1231e4b24f1c576deae58c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSQualifiedName(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSQualifiedName(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSQualifiedName(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSQualifiedName(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="120fabe1a6286ae48131b175bfea3af4fcd9173c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSStringKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSStringKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSStringKeyword(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSStringKeyword(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="428cddf8ca8bad6487b447164104b037f908e8b8" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSSymbolKeyword(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSSymbolKeyword(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSSymbolKeyword(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSSymbolKeyword(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e7620ed487f201ae5bb26b0637cc0249cfa3337" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSThisType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSThisType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSThisType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSThisType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8c70599765c73c189dc59ba658a879080dc2268" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTupleType(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTupleType(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTupleType(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTupleType(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e2bf771afe2ec898a8a2cc25c474172078c14c1" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeAliasDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeAliasDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTypeAliasDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTypeAliasDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="122b9f6a162209e8287b8043083e47b0c6cd679e" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeAnnotation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeAnnotation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTypeAnnotation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTypeAnnotation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23468e7ca7969dea780db5c6ec7b50999522654c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeAssertion(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeAssertion(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTypeAssertion(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTypeAssertion(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd1ec5f4236e0209f6b1faa769df06c0e92d7e4a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeLiteral(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeLiteral(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTypeLiteral(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTypeLiteral(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b663ae459d836c7afad45c4b8d96a4e536d7412" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeOperator(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeOperator(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTypeOperator(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTypeOperator(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9954762b5071c2f88378f3ecc35f4db5e5c09865" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeParameter(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeParameter(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTypeParameter(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTypeParameter(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fd30d8f12f7d49cd058ea8e877ba7ba01ffc9a5" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeParameterDeclaration(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeParameterDeclaration(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTypeParameterDeclaration(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTypeParameterDeclaration(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd28d166ebba53f138b260c32231d97f063874de" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;t.isTSTypeParameterInstantiation(node, opts)&lt;/code&gt; and &lt;code&gt;t.assertTSTypeParameterInstantiation(node, opts)&lt;/code&gt;.</source>
          <target state="translated">另请参见 &lt;code&gt;t.isTSTypeParameterInstantiation(node, opts)&lt;/code&gt; 和 &lt;code&gt;t.assertTSTypeParameterInstantiation(node, opts)&lt;/code&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
