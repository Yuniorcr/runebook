<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="aeb21b2c31f6138a4349f1a26ef1d10d1b5ff1a6" translate="yes" xml:space="preserve">
          <source>The following example compiles and executes different scripts using a single &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt; object:</source>
          <target state="translated">以下示例使用单个&lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;上下文&lt;/a&gt;对象编译并执行不同的脚本：</target>
        </trans-unit>
        <trans-unit id="8f13b054eec7d30bcee88681b33d31aab6a969d5" translate="yes" xml:space="preserve">
          <source>The following example compiles code that increments a &lt;code&gt;global&lt;/code&gt; variable then executes that code multiple times:</source>
          <target state="translated">下面的示例编译递增 &lt;code&gt;global&lt;/code&gt; 变量的代码，然后多次执行该代码：</target>
        </trans-unit>
        <trans-unit id="033ddb37af06940fdfca9e1c7a5b5c7c2dfe050a" translate="yes" xml:space="preserve">
          <source>The following example compiles code that increments a global variable, sets the value of another global variable, then execute the code multiple times. The globals are contained in the &lt;code&gt;context&lt;/code&gt; object.</source>
          <target state="translated">下面的示例编译使一个全局变量递增的代码，设置另一个全局变量的值，然后多次执行该代码。全局变量包含在 &lt;code&gt;context&lt;/code&gt; 对象中。</target>
        </trans-unit>
        <trans-unit id="c9fb83581f94c76b9a4108a24f049b5e7c53bec4" translate="yes" xml:space="preserve">
          <source>The following example compiles code that increments a global variable, sets the value of another global variable, then execute the code multiple times. The globals are contained in the &lt;code&gt;sandbox&lt;/code&gt; object.</source>
          <target state="translated">下面的示例编译增加全局变量的代码，设置另一个全局变量的值，然后多次执行该代码。全局变量包含在 &lt;code&gt;sandbox&lt;/code&gt; 对象中。</target>
        </trans-unit>
        <trans-unit id="c30a474bf85aab9a3621e91ad586681f6b319dc3" translate="yes" xml:space="preserve">
          <source>The following example compiles code that sets a global variable, then executes the code multiple times in different contexts. The globals are set on and contained within each individual &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">下面的示例编译设置全局变量的代码，然后在不同的上下文中多次执行该代码。全局变量设置在每个单独的 &lt;code&gt;context&lt;/code&gt; 并包含在其中。</target>
        </trans-unit>
        <trans-unit id="fb8961b14a215e78e30d4006961e83cb3d04b94d" translate="yes" xml:space="preserve">
          <source>The following example compiles code that sets a global variable, then executes the code multiple times in different contexts. The globals are set on and contained within each individual &lt;code&gt;sandbox&lt;/code&gt;.</source>
          <target state="translated">下面的示例编译设置全局变量的代码，然后在不同的上下文中多次执行该代码。全局变量设置在每个单独的 &lt;code&gt;sandbox&lt;/code&gt; 并包含在其中。</target>
        </trans-unit>
        <trans-unit id="b6f986012547f55866f8561b75f9f2da61192ba5" translate="yes" xml:space="preserve">
          <source>The following example creates a server that supports both protocols:</source>
          <target state="translated">下面的例子创建了一个支持两种协议的服务器。</target>
        </trans-unit>
        <trans-unit id="8d5bd432616e2fe84714c6f75ee1a73d75ab165a" translate="yes" xml:space="preserve">
          <source>The following example creates an HTTP/2 server using the compatibility API:</source>
          <target state="translated">下面的示例使用兼容性API创建了一个HTTP/2服务器。</target>
        </trans-unit>
        <trans-unit id="01801e4e9732878c6e3ab9f18eb68e69d7d0ed10" translate="yes" xml:space="preserve">
          <source>The following example does not throw an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; because the primitives are considered equal by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ).</source>
          <target state="translated">下面的示例不会引发&lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; ,&lt;/a&gt;因为&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象相等比较&lt;/a&gt;（ &lt;code&gt;==&lt;/code&gt; ）将这些原语视为相等。</target>
        </trans-unit>
        <trans-unit id="5fdc377e86e677c416598d64a5cdb1c3693d42a9" translate="yes" xml:space="preserve">
          <source>The following example does not throw an &lt;code&gt;AssertionError&lt;/code&gt; because the primitives are considered equal by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ).</source>
          <target state="translated">下面的示例不会引发 &lt;code&gt;AssertionError&lt;/code&gt; ,因为&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象相等比较&lt;/a&gt;（ &lt;code&gt;==&lt;/code&gt; ）将这些原语视为相等。</target>
        </trans-unit>
        <trans-unit id="f4910ba61ee0506c832df25c6d6d2b10e0d93c59" translate="yes" xml:space="preserve">
          <source>The following example highlights the effect of the &lt;code&gt;compact&lt;/code&gt; option:</source>
          <target state="translated">下面的示例突出显示了 &lt;code&gt;compact&lt;/code&gt; 选项的效果：</target>
        </trans-unit>
        <trans-unit id="a3cceb0a29e3538da1352100db1b933d040903e8" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to read function arguments passed from JavaScript and how to return a result:</source>
          <target state="translated">下面的例子说明了如何读取从JavaScript传递过来的函数参数以及如何返回结果。</target>
        </trans-unit>
        <trans-unit id="e8d76a07c420ceb5f2c6bd3c8d7ed97b0dd6c6ce" translate="yes" xml:space="preserve">
          <source>The following example illustrates the implementation of a context-aware addon:</source>
          <target state="translated">下面的例子说明了一个上下文感知插件的实现。</target>
        </trans-unit>
        <trans-unit id="3bde9b74bffc2aa8a07a370885dc11bc36948754" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;code&gt;readline.Interface&lt;/code&gt; class to implement a small command-line interface:</source>
          <target state="translated">以下示例说明了使用 &lt;code&gt;readline.Interface&lt;/code&gt; 类来实现一个小的命令行界面：</target>
        </trans-unit>
        <trans-unit id="0ca7e485a9304684ecdb6dc7e265702277ba1084" translate="yes" xml:space="preserve">
          <source>The following example illustrates the warning that is printed to &lt;code&gt;stderr&lt;/code&gt; when too many listeners have been added to an event:</source>
          <target state="translated">以下示例说明了向事件添加太多侦听器时向 &lt;code&gt;stderr&lt;/code&gt; 发出的警告：</target>
        </trans-unit>
        <trans-unit id="c2c0eed2e03aa1a50cbb2152ccfcb53aa848063d" translate="yes" xml:space="preserve">
          <source>The following example illustrates using both &lt;code&gt;vm.runInThisContext()&lt;/code&gt; and the JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; function to run the same code:</source>
          <target state="translated">以下示例说明了使用 &lt;code&gt;vm.runInThisContext()&lt;/code&gt; 和JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt;函数来运行相同的代码：</target>
        </trans-unit>
        <trans-unit id="44a4f9b856247d478fe10097bd422d102e448df8" translate="yes" xml:space="preserve">
          <source>The following example inspects all properties of the &lt;code&gt;util&lt;/code&gt; object:</source>
          <target state="translated">以下示例检查 &lt;code&gt;util&lt;/code&gt; 对象的所有属性：</target>
        </trans-unit>
        <trans-unit id="32b8fa73b8f407954ac2a664ce62506942474b5e" translate="yes" xml:space="preserve">
          <source>The following example measures the duration of &lt;code&gt;require()&lt;/code&gt; operations to load dependencies:</source>
          <target state="translated">以下示例测量了 &lt;code&gt;require()&lt;/code&gt; 操作加载依赖项的持续时间：</target>
        </trans-unit>
        <trans-unit id="ffe20b77ecdc88ce611eba4945ab9591bd34956b" translate="yes" xml:space="preserve">
          <source>The following example of an ES module exports a function:</source>
          <target state="translated">下面是一个ES模块导出函数的例子。</target>
        </trans-unit>
        <trans-unit id="a92600e7d0fb3463a2a8166fb0fbaa2cc2528188" translate="yes" xml:space="preserve">
          <source>The following example of an ES module imports the function from &lt;code&gt;addTwo.mjs&lt;/code&gt;:</source>
          <target state="translated">以下ES模块示例从 &lt;code&gt;addTwo.mjs&lt;/code&gt; 导入函数：</target>
        </trans-unit>
        <trans-unit id="c1c9dcf75697e35586b5a5bb4b1ec0edd1f63f75" translate="yes" xml:space="preserve">
          <source>The following example pipes all of the data from the &lt;code&gt;readable&lt;/code&gt; into a file named &lt;code&gt;file.txt&lt;/code&gt;:</source>
          <target state="translated">以下示例将所有来自 &lt;code&gt;readable&lt;/code&gt; 数据的数据通过管道传输到名为 &lt;code&gt;file.txt&lt;/code&gt; 的文件中：</target>
        </trans-unit>
        <trans-unit id="c41becda6c6ddadb16cb7c297ead592bada0bfdb" translate="yes" xml:space="preserve">
          <source>The following example shows a simple &lt;code&gt;EventEmitter&lt;/code&gt; instance with a single listener. The &lt;code&gt;eventEmitter.on()&lt;/code&gt; method is used to register listeners, while the &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method is used to trigger the event.</source>
          <target state="translated">以下示例显示了具有单个侦听器的简单 &lt;code&gt;EventEmitter&lt;/code&gt; 实例。所述 &lt;code&gt;eventEmitter.on()&lt;/code&gt; 方法用于注册监听器，而 &lt;code&gt;eventEmitter.emit()&lt;/code&gt; 方法被用于触发事件。</target>
        </trans-unit>
        <trans-unit id="b1e0d5b2d0494b2a5b663eced98cf1623d0cd438" translate="yes" xml:space="preserve">
          <source>The following example shows how these can be set up. Some class names are from the &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;v8&lt;/code&gt; C++ namespaces, respectively.</source>
          <target state="translated">以下示例显示了如何设置它们。一些类名称分别来自 &lt;code&gt;node&lt;/code&gt; 和 &lt;code&gt;v8&lt;/code&gt; C ++名称空间。</target>
        </trans-unit>
        <trans-unit id="77cc6a960e261ea5fe0a8851994c70667c7dbf65" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the &lt;code&gt;AsyncResource&lt;/code&gt; class to properly associate an event listener with the correct execution context. The same approach can be applied to a &lt;a href=&quot;stream#stream_stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; or a similar event-driven class.</source>
          <target state="translated">下面的示例演示如何使用 &lt;code&gt;AsyncResource&lt;/code&gt; 类将事件侦听器与正确的执行上下文正确关联。可以将相同的方法应用于&lt;a href=&quot;stream#stream_stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;或类似的事件驱动类。</target>
        </trans-unit>
        <trans-unit id="d0cc0d557e4540fd1a8ec224fa26115df645a069" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the &lt;code&gt;AsyncResource&lt;/code&gt; class to properly provide async tracking for a &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; pool. Other resource pools, such as database connection pools, can follow a similar model.</source>
          <target state="translated">下面的示例演示如何使用 &lt;code&gt;AsyncResource&lt;/code&gt; 类为&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;池正确提供异步跟踪。其他资源池（例如数据库连接池）可以遵循类似的模型。</target>
        </trans-unit>
        <trans-unit id="d2ad747c3e73cbd8af737ecbbdd22c1b787abaf4" translate="yes" xml:space="preserve">
          <source>The following example shows the basic use of the &lt;code&gt;StringDecoder&lt;/code&gt; class.</source>
          <target state="translated">下面的示例显示 &lt;code&gt;StringDecoder&lt;/code&gt; 类的基本用法。</target>
        </trans-unit>
        <trans-unit id="1551aa3acf990613538e77ac486dca4770207f7d" translate="yes" xml:space="preserve">
          <source>The following example shows two new commands added to the REPL instance:</source>
          <target state="translated">下面的例子显示了两个添加到 REPL 实例的新命令。</target>
        </trans-unit>
        <trans-unit id="31b7cf0757ca94b16ecb681a09b153f7b1cc69ee" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;AsyncLocalStorage&lt;/code&gt; to build a simple logger that assigns IDs to incoming HTTP requests and includes them in messages logged within each request.</source>
          <target state="translated">以下示例使用 &lt;code&gt;AsyncLocalStorage&lt;/code&gt; 构建一个简单的记录器，该记录器将ID分配给传入的HTTP请求，并将其包括在每个请求中记录的消息中。</target>
        </trans-unit>
        <trans-unit id="96a9bcfb92a0b7ab67cff41af2105cc6ae699957" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;async_hooks&quot;&gt;Async Hooks&lt;/a&gt; and Performance APIs to measure the actual duration of a Timeout operation (including the amount of time it to execute the callback).</source>
          <target state="translated">下面的示例使用&lt;a href=&quot;async_hooks&quot;&gt;Async Hooks&lt;/a&gt;和Performance API来衡量Timeout操作的实际持续时间（包括执行回调的时间）。</target>
        </trans-unit>
        <trans-unit id="57452bee9d2dd671ae96443564724740da3fdf5f" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;async_hooks&quot;&gt;Async Hooks&lt;/a&gt; and Performance APIs to measure the actual duration of a Timeout operation (including the amount of time it took to execute the callback).</source>
          <target state="translated">下面的示例使用&lt;a href=&quot;async_hooks&quot;&gt;Async Hooks&lt;/a&gt;和Performance API来衡量Timeout操作的实际持续时间（包括执行回调所花费的时间）。</target>
        </trans-unit>
        <trans-unit id="754e48d5c1d68cbdb209a06be78e522c57e6261b" translate="yes" xml:space="preserve">
          <source>The following example, for instance, provides separate REPLs on &lt;code&gt;stdin&lt;/code&gt;, a Unix socket, and a TCP socket:</source>
          <target state="translated">例如，以下示例在 &lt;code&gt;stdin&lt;/code&gt; ，Unix套接字和TCP套接字上提供了单独的REPL ：</target>
        </trans-unit>
        <trans-unit id="9bc222382a2fde60cd8be2c8364dcbf4c457ed07" translate="yes" xml:space="preserve">
          <source>The following example, would allow access to &lt;code&gt;fs&lt;/code&gt; for all &lt;code&gt;data:&lt;/code&gt; resources:</source>
          <target state="translated">以下示例将允许访问所有 &lt;code&gt;data:&lt;/code&gt; &lt;code&gt;fs&lt;/code&gt; ：资源：</target>
        </trans-unit>
        <trans-unit id="a898290ebd369fbfc83b297e55a672221417ee31" translate="yes" xml:space="preserve">
          <source>The following example, would allow access to &lt;code&gt;fs&lt;/code&gt; for all resources within &lt;code&gt;./app/&lt;/code&gt;:</source>
          <target state="translated">以下示例将允许访问 &lt;code&gt;./app/&lt;/code&gt; 中所有资源的 &lt;code&gt;fs&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="47d4020d4b2c5df833275503f11d8bfe8b6a062a" translate="yes" xml:space="preserve">
          <source>The following fields in &lt;code&gt;package.json&lt;/code&gt; files are used in Node.js:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 文件中的以下字段在Node.js中使用：</target>
        </trans-unit>
        <trans-unit id="cf5ff269334eb6c7517b0c927c79fe7139b193e8" translate="yes" xml:space="preserve">
          <source>The following flags are available wherever the &lt;code&gt;flag&lt;/code&gt; option takes a string.</source>
          <target state="translated">无论 &lt;code&gt;flag&lt;/code&gt; 选项采用字符串是什么，都可以使用以下标志。</target>
        </trans-unit>
        <trans-unit id="4d9c42618de47c08d507d4fd8b458fff43a93df5" translate="yes" xml:space="preserve">
          <source>The following flags are available wherever the &lt;code&gt;flag&lt;/code&gt; option takes a string:</source>
          <target state="translated">无论 &lt;code&gt;flag&lt;/code&gt; 选项采用字符串是什么，都可以使用以下标志：</target>
        </trans-unit>
        <trans-unit id="7a1c76d837f36a3ef7e701cb998880b118d16c09" translate="yes" xml:space="preserve">
          <source>The following flags can be passed as hints to &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可以将以下标志作为提示传递给&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a38f3d5894a095d8dc07f60288425cccca1e58c" translate="yes" xml:space="preserve">
          <source>The following flags can be set for advanced control over the compression algorithm and memory usage tuning:</source>
          <target state="translated">以下标志可以被设置为对压缩算法和内存使用调整的高级控制。</target>
        </trans-unit>
        <trans-unit id="4019f64a0bae27f5870fc15735a413e010398918" translate="yes" xml:space="preserve">
          <source>The following illustrates a client for the echo server example from &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">下面说明了&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; 中&lt;/a&gt;回显服务器示例的客户端：</target>
        </trans-unit>
        <trans-unit id="d983e488f945092b2073ba9beaf4353b05639e59" translate="yes" xml:space="preserve">
          <source>The following illustrates a hypothetical example of a REPL that performs translation of text from one language to another:</source>
          <target state="translated">下面举例说明了一个REPL的假设性例子,该REPL执行从一种语言到另一种语言的文本翻译。</target>
        </trans-unit>
        <trans-unit id="fc3d12a58aaf804115d14b65f68e56175aecdec4" translate="yes" xml:space="preserve">
          <source>The following illustrates a rather simplistic (and somewhat pointless) custom &lt;code&gt;Writable&lt;/code&gt; stream implementation. While this specific &lt;code&gt;Writable&lt;/code&gt; stream instance is not of any real particular usefulness, the example illustrates each of the required elements of a custom &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream instance:</source>
          <target state="translated">下面说明了一个相当简单（有些毫无意义）的自定义 &lt;code&gt;Writable&lt;/code&gt; 流实现。尽管此特定的 &lt;code&gt;Writable&lt;/code&gt; 流实例没有任何实际的特殊用途，但该示例说明了自定义&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;流实例的每个必需元素：</target>
        </trans-unit>
        <trans-unit id="ab0b3748bcc9f54c4bae9761c0f15c2ce5f381bc" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple HTTP/2 server using the Core API. Since there are no browsers known that support &lt;a href=&quot;https://http2.github.io/faq/#does-http2-require-encryption&quot;&gt;unencrypted HTTP/2&lt;/a&gt;, the use of &lt;a href=&quot;#http2_http2_createsecureserver_options_onrequesthandler&quot;&gt;&lt;code&gt;http2.createSecureServer()&lt;/code&gt;&lt;/a&gt; is necessary when communicating with browser clients.</source>
          <target state="translated">下面说明了一个使用Core API的简单HTTP / 2服务器。由于没有已知的浏览器支持&lt;a href=&quot;https://http2.github.io/faq/#does-http2-require-encryption&quot;&gt;未加密的HTTP / 2&lt;/a&gt;，因此在与浏览器客户端进行通信时必须使用&lt;a href=&quot;#http2_http2_createsecureserver_options_onrequesthandler&quot;&gt; &lt;code&gt;http2.createSecureServer()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="af191c6114a1642c6a84dbbd336a0f54f29f788f" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple echo server:</source>
          <target state="translated">下面说明了一个简单的回音服务器。</target>
        </trans-unit>
        <trans-unit id="4341b6b6e9ceda6da3825b7318e4cb410bd82903" translate="yes" xml:space="preserve">
          <source>The following illustrates a simple example of a &lt;code&gt;Duplex&lt;/code&gt; stream that wraps a hypothetical lower-level source object to which data can be written, and from which data can be read, albeit using an API that is not compatible with Node.js streams. The following illustrates a simple example of a &lt;code&gt;Duplex&lt;/code&gt; stream that buffers incoming written data via the &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interface that is read back out via the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">以下示例说明了一个 &lt;code&gt;Duplex&lt;/code&gt; 流的简单示例，该双工流包装了一个假设的较低级源对象，尽管使用了与Node.js流不兼容的API，但该对象可以向其中写入数据，也可以从中读取数据。以下是一个 &lt;code&gt;Duplex&lt;/code&gt; 流的简单示例，该流通过&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;接口缓冲传入的写入数据，而Writable接口则通过&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;接口将其读出。</target>
        </trans-unit>
        <trans-unit id="ad5273689c2d2292d7ff4ac3bb67b226d3d1e973" translate="yes" xml:space="preserve">
          <source>The following illustrates an HTTP/2 client:</source>
          <target state="translated">以下是一个HTTP/2客户端的示例。</target>
        </trans-unit>
        <trans-unit id="09d2a922ad3dab12111210bf177cd900efbbaafc" translate="yes" xml:space="preserve">
          <source>The following illustrates resuming a TLS session:</source>
          <target state="translated">以下是恢复TLS会话的示例。</target>
        </trans-unit>
        <trans-unit id="278f598f1053fbfcdd5ef1743a8a49fb3459a4b2" translate="yes" xml:space="preserve">
          <source>The following is a basic example of a &lt;code&gt;Readable&lt;/code&gt; stream that emits the numerals from 1 to 1,000,000 in ascending order, and then ends.</source>
          <target state="translated">以下是 &lt;code&gt;Readable&lt;/code&gt; 流的基本示例，该流按升序发出1到1,000,000的数字，然后结束。</target>
        </trans-unit>
        <trans-unit id="867f597fcc104be5181f22b330bf67d8352af244" translate="yes" xml:space="preserve">
          <source>The following is a simple demonstration of &lt;code&gt;triggerAsyncId&lt;/code&gt;:</source>
          <target state="translated">以下是 &lt;code&gt;triggerAsyncId&lt;/code&gt; 的简单演示：</target>
        </trans-unit>
        <trans-unit id="260f262e327d647faa2a4e5840f83101f8eba105" translate="yes" xml:space="preserve">
          <source>The following is an example with additional information about the calls to &lt;code&gt;init&lt;/code&gt; between the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; calls, specifically what the callback to &lt;code&gt;listen()&lt;/code&gt; will look like. The output formatting is slightly more elaborate to make calling context easier to see.</source>
          <target state="translated">以下是一个示例，其中包含有关在调用 &lt;code&gt;before&lt;/code&gt; 和 &lt;code&gt;after&lt;/code&gt; 之间对 &lt;code&gt;init&lt;/code&gt; 的调用的其他信息，尤其是 &lt;code&gt;listen()&lt;/code&gt; 的回调是什么样的。输出格式稍微复杂一些，以使调用上下文更易于查看。</target>
        </trans-unit>
        <trans-unit id="1256eca8571fc116738506ae5b4d0e9994bd1d62" translate="yes" xml:space="preserve">
          <source>The following is an overview of the &lt;code&gt;AsyncResource&lt;/code&gt; API.</source>
          <target state="translated">以下是 &lt;code&gt;AsyncResource&lt;/code&gt; API 的概述。</target>
        </trans-unit>
        <trans-unit id="e4bc83cc4db6270d1ad82593b194f6f877bcf5a6" translate="yes" xml:space="preserve">
          <source>The following is the approximate equivalent of the N-API counterpart:</source>
          <target state="translated">以下是N-API对应的近似值。</target>
        </trans-unit>
        <trans-unit id="6d649a0ac4bec9151f47c63711d19dadbe0acbb7" translate="yes" xml:space="preserve">
          <source>The following key combinations in the REPL have these special effects:</source>
          <target state="translated">REPL中的以下按键组合具有这些特殊效果。</target>
        </trans-unit>
        <trans-unit id="64d7d8e310bc919990b2824c08a86076aaf5ac1c" translate="yes" xml:space="preserve">
          <source>The following legacy character encodings are also supported:</source>
          <target state="translated">还支持以下传统的字符编码。</target>
        </trans-unit>
        <trans-unit id="49c2fdba97add89a1173ca36a3193d8ce2992ef9" translate="yes" xml:space="preserve">
          <source>The following methods are exposed by the V8 engine in the general API but do not display anything unless used in conjunction with the &lt;a href=&quot;debugger&quot;&gt;inspector&lt;/a&gt; (&lt;code&gt;--inspect&lt;/code&gt; flag).</source>
          <target state="translated">V8引擎在通用API中公开了以下方法，但除非与&lt;a href=&quot;debugger&quot;&gt;检查器&lt;/a&gt;一起使用（ &lt;code&gt;--inspect&lt;/code&gt; 标志），否则它们不会显示任何内容。</target>
        </trans-unit>
        <trans-unit id="df2f010a82793abfb4a9d63d3276fee7701f3dcd" translate="yes" xml:space="preserve">
          <source>The following methods from the &lt;code&gt;dns&lt;/code&gt; module are available:</source>
          <target state="translated">&lt;code&gt;dns&lt;/code&gt; 模块中的以下方法可用：</target>
        </trans-unit>
        <trans-unit id="7b6cdbd66510df63c1ecb7d5213f3039eedea610" translate="yes" xml:space="preserve">
          <source>The following methods from the &lt;code&gt;dnsPromises&lt;/code&gt; API are available:</source>
          <target state="translated">&lt;code&gt;dnsPromises&lt;/code&gt; API中的以下方法可用：</target>
        </trans-unit>
        <trans-unit id="0b1984db9a35068fa08e4ea234970603e837d517" translate="yes" xml:space="preserve">
          <source>The following process scheduling constants are exported by &lt;code&gt;os.constants.priority&lt;/code&gt;.</source>
          <target state="translated">以下流程调度常量由 &lt;code&gt;os.constants.priority&lt;/code&gt; 导出。</target>
        </trans-unit>
        <trans-unit id="eac28d8f1b469011af588c78e77fb6ab775d28c2" translate="yes" xml:space="preserve">
          <source>The following process scheduling constants are exported by &lt;code&gt;os.constants.priority&lt;/code&gt;:</source>
          <target state="translated">以下流程调度常量由 &lt;code&gt;os.constants.priority&lt;/code&gt; 导出：</target>
        </trans-unit>
        <trans-unit id="05e8e35bc8738a6c9e6ba2f51d2e103a8fe9ff86" translate="yes" xml:space="preserve">
          <source>The following sections will provide an overview over how to use these APIs to create an application from scratch that will perform the equivalent of &lt;code&gt;node -e &amp;lt;code&amp;gt;&lt;/code&gt;, i.e. that will take a piece of JavaScript and run it in a Node.js-specific environment.</source>
          <target state="translated">以下各节将概述如何使用这些API从头开始创建应用程序，该应用程序将执行与 &lt;code&gt;node -e &amp;lt;code&amp;gt;&lt;/code&gt; 等效的操作，即，将使用一段JavaScript并在特定于Node.js的情况下运行它环境。</target>
        </trans-unit>
        <trans-unit id="3a03d721aedc7dfabfb213b9567f34b8b8ff2d75" translate="yes" xml:space="preserve">
          <source>The following signal constants are exported by &lt;code&gt;os.constants.signals&lt;/code&gt;.</source>
          <target state="translated">以下信号常量由 &lt;code&gt;os.constants.signals&lt;/code&gt; 导出。</target>
        </trans-unit>
        <trans-unit id="c23710ea5bb9ea17b12e61f234bea0f2bdf42b4d" translate="yes" xml:space="preserve">
          <source>The following signal constants are exported by &lt;code&gt;os.constants.signals&lt;/code&gt;:</source>
          <target state="translated">以下信号常量由 &lt;code&gt;os.constants.signals&lt;/code&gt; 导出：</target>
        </trans-unit>
        <trans-unit id="fe0c0661c70aca40b78bbbed90aaded64a1d7b2b" translate="yes" xml:space="preserve">
          <source>The following simple example illustrates the basic use of the &lt;code&gt;readline&lt;/code&gt; module.</source>
          <target state="translated">以下简单示例说明了 &lt;code&gt;readline&lt;/code&gt; 模块的基本用法。</target>
        </trans-unit>
        <trans-unit id="8b095df75d6e5f3132d17f5e1853a984cc4a69d7" translate="yes" xml:space="preserve">
          <source>The following snippet installs a listener on the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/Debugger#event-paused&quot;&gt;&lt;code&gt;'Debugger.paused'&lt;/code&gt;&lt;/a&gt; event, and prints the reason for program suspension whenever program execution is suspended (through breakpoints, for example):</source>
          <target state="translated">以下代码段在&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/Debugger#event-paused&quot;&gt; &lt;code&gt;'Debugger.paused'&lt;/code&gt; &lt;/a&gt;事件上安装了一个侦听器，并在程序执行被暂停时（例如，通过断点）打印出程序暂停的原因：</target>
        </trans-unit>
        <trans-unit id="02e62b9cc67d1377899aa5cca1cf3adcd03bb0ba" translate="yes" xml:space="preserve">
          <source>The following special commands are supported by all REPL instances:</source>
          <target state="translated">所有 REPL 实例都支持以下特殊命令。</target>
        </trans-unit>
        <trans-unit id="f011333da1f4a77a0b91e406152a711edff558ba" translate="yes" xml:space="preserve">
          <source>The following three variables may be used inside the function body following an invocation of &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt;:</source>
          <target state="translated">在调用 &lt;code&gt;NODE_MODULE_INIT()&lt;/code&gt; 之后，可以在函数体内使用以下三个变量：</target>
        </trans-unit>
        <trans-unit id="24b55f4e401abc1ed4f27290d5b75f7d33dac225" translate="yes" xml:space="preserve">
          <source>The following utility functions are also available in case native code needs to create an &lt;code&gt;Error&lt;/code&gt; object: &lt;a href=&quot;#n_api_napi_create_error&quot;&gt;&lt;code&gt;napi_create_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_create_type_error&quot;&gt;&lt;code&gt;napi_create_type_error&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#n_api_napi_create_range_error&quot;&gt;&lt;code&gt;napi_create_range_error&lt;/code&gt;&lt;/a&gt;, where result is the &lt;code&gt;napi_value&lt;/code&gt; that refers to the newly created JavaScript &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">在本机代码需要创建 &lt;code&gt;Error&lt;/code&gt; 对象的情况下，以下实用程序函数也可用：&lt;a href=&quot;#n_api_napi_create_error&quot;&gt; &lt;code&gt;napi_create_error&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#n_api_napi_create_type_error&quot;&gt; &lt;code&gt;napi_create_type_error&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#n_api_napi_create_range_error&quot;&gt; &lt;code&gt;napi_create_range_error&lt;/code&gt; &lt;/a&gt;，其中result是引用新创建的JavaScript &lt;code&gt;Error&lt;/code&gt; 对象的 &lt;code&gt;napi_value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1621e464e04069d36635d065a53f19f9b7f89297" translate="yes" xml:space="preserve">
          <source>The following utility functions are also available in case native code needs to throw an exception or determine if a &lt;code&gt;napi_value&lt;/code&gt; is an instance of a JavaScript &lt;code&gt;Error&lt;/code&gt; object: &lt;a href=&quot;#n_api_napi_throw_error&quot;&gt;&lt;code&gt;napi_throw_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_throw_type_error&quot;&gt;&lt;code&gt;napi_throw_type_error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#n_api_napi_throw_range_error&quot;&gt;&lt;code&gt;napi_throw_range_error&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_is_error&quot;&gt;&lt;code&gt;napi_is_error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">如果本机代码需要引发异常或确定 &lt;code&gt;napi_value&lt;/code&gt; 是否是JavaScript &lt;code&gt;Error&lt;/code&gt; 对象的实例，则以下实用程序功能也可用：&lt;a href=&quot;#n_api_napi_throw_error&quot;&gt; &lt;code&gt;napi_throw_error&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#n_api_napi_throw_type_error&quot;&gt; &lt;code&gt;napi_throw_type_error&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#n_api_napi_throw_range_error&quot;&gt; &lt;code&gt;napi_throw_range_error&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#n_api_napi_is_error&quot;&gt; &lt;code&gt;napi_is_error&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cdd856e5e213c478e5acd13b2d714aebc9d6ad2d" translate="yes" xml:space="preserve">
          <source>The following values are valid flush operations for Brotli-based streams:</source>
          <target state="translated">以下数值是基于Brotli的流的有效刷新操作。</target>
        </trans-unit>
        <trans-unit id="3f3a4515c9bdd9d75efcfd65fcf52a6b5a6fde1f" translate="yes" xml:space="preserve">
          <source>The following values are valid for &lt;code&gt;mode&lt;/code&gt;:</source>
          <target state="translated">以下值对于 &lt;code&gt;mode&lt;/code&gt; 有效：</target>
        </trans-unit>
        <trans-unit id="738a7c908290a06b8479e3e2410554e41554f7c5" translate="yes" xml:space="preserve">
          <source>The following values are valid for this property (as defined in &lt;code&gt;constants&lt;/code&gt; module):</source>
          <target state="translated">以下值对此属性有效（如在 &lt;code&gt;constants&lt;/code&gt; 模块中定义）：</target>
        </trans-unit>
        <trans-unit id="49edf49d19b5c17b9340b245b83c7fca4b031913" translate="yes" xml:space="preserve">
          <source>The following will also trigger the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted:</source>
          <target state="translated">以下还会触发 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 事件的发出：</target>
        </trans-unit>
        <trans-unit id="7016b7143d75a886c451f603cf021c125c604f1b" translate="yes" xml:space="preserve">
          <source>The following, for instance, will throw the &lt;a href=&quot;errors#errors_class_typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; because there is no matching error type in the assertion:</source>
          <target state="translated">例如，以下内容将引发&lt;a href=&quot;errors#errors_class_typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; ,&lt;/a&gt;因为断言中没有匹配的错误类型：</target>
        </trans-unit>
        <trans-unit id="1239b452afe3e8c9353f8cf2237202dd13539cb8" translate="yes" xml:space="preserve">
          <source>The format is backward-compatible (i.e. safe to store to disk). Equal JavaScript values may result in different serialized output.</source>
          <target state="translated">该格式是向后兼容的(即安全地存储到磁盘)。相同的JavaScript值可能导致不同的序列化输出。</target>
        </trans-unit>
        <trans-unit id="7cb81ba7cf7f60d6a47251a809d57c4185d8503f" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;alt&lt;/code&gt; parameter is strictly defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7838&quot;&gt;RFC 7838&lt;/a&gt; as an ASCII string containing a comma-delimited list of &quot;alternative&quot; protocols associated with a specific host and port.</source>
          <target state="translated">&lt;code&gt;alt&lt;/code&gt; 参数的格式由&lt;a href=&quot;https://tools.ietf.org/html/rfc7838&quot;&gt;RFC 7838&lt;/a&gt;严格定义为ASCII字符串，其中包含与特定主机和端口关联的逗号分隔的&amp;ldquo;替代&amp;rdquo;协议列表。</target>
        </trans-unit>
        <trans-unit id="c8075960e310ff5b1e3a882d6650a2409b78086b" translate="yes" xml:space="preserve">
          <source>The format of the object that the returned Promise may resolve with is specific to the V8 engine and may change from one version of V8 to the next.</source>
          <target state="translated">返回的Promise可能解析的对象格式是V8引擎所特有的,可能会因V8的不同版本而改变。</target>
        </trans-unit>
        <trans-unit id="ad732213f9b3400abc0c0e9b66ef4d024bf4da4c" translate="yes" xml:space="preserve">
          <source>The formatting process operates as follows:</source>
          <target state="translated">格式化过程操作如下:</target>
        </trans-unit>
        <trans-unit id="30abb2b37913e247d0ec5e3759ca44af61effca5" translate="yes" xml:space="preserve">
          <source>The fulfilled value of a linking promise is not a &lt;code&gt;vm.Module&lt;/code&gt; object.</source>
          <target state="translated">链接承诺的实现值不是 &lt;code&gt;vm.Module&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="f337814fcd91de3a7556e75eda9add23e7ee1277" translate="yes" xml:space="preserve">
          <source>The fulfilled value of a linking promise is not a &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object.</source>
          <target state="translated">链接承诺的实现值不是 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="eb7f4cc5ccf8ca2620d736b7829436f81776654e" translate="yes" xml:space="preserve">
          <source>The full code can be found &lt;a href=&quot;https://github.com/nodejs/node/blob/master/test/embedding/embedtest.cc&quot;&gt;in the Node.js source tree&lt;/a&gt;.</source>
          <target state="translated">完整的代码可以&lt;a href=&quot;https://github.com/nodejs/node/blob/master/test/embedding/embedtest.cc&quot;&gt;在Node.js源代码树中找到&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50b13dc828820a8586bad1f2362690306cda5b10" translate="yes" xml:space="preserve">
          <source>The full set of possible &lt;code&gt;napi_status&lt;/code&gt; values is defined in &lt;code&gt;napi_api_types.h&lt;/code&gt;.</source>
          <target state="translated">全套可能的 &lt;code&gt;napi_status&lt;/code&gt; 值被定义 &lt;code&gt;napi_api_types.h&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c714d055cf64b4d18934498a66680f7181dff0ed" translate="yes" xml:space="preserve">
          <source>The fully resolved filename of the module.</source>
          <target state="translated">模块的全解析文件名。</target>
        </trans-unit>
        <trans-unit id="9b507486ca1a6dcd2b0885675ab7c24ab99d378e" translate="yes" xml:space="preserve">
          <source>The function call does not return, the process will be terminated.</source>
          <target state="translated">函数调用不返回,进程将被终止。</target>
        </trans-unit>
        <trans-unit id="b122914b230c847485ca349abc7360f05a5492f8" translate="yes" xml:space="preserve">
          <source>The function is expected to return a &lt;code&gt;Module&lt;/code&gt; object or a &lt;code&gt;Promise&lt;/code&gt; that eventually resolves to a &lt;code&gt;Module&lt;/code&gt; object. The returned &lt;code&gt;Module&lt;/code&gt; must satisfy the following two invariants:</source>
          <target state="translated">该函数应返回一个 &lt;code&gt;Module&lt;/code&gt; 对象或一个 &lt;code&gt;Promise&lt;/code&gt; ，该Promise最终将解析为 &lt;code&gt;Module&lt;/code&gt; 对象。返回的 &lt;code&gt;Module&lt;/code&gt; 必须满足以下两个不变式：</target>
        </trans-unit>
        <trans-unit id="3a6d8c40f84a833fb329f2cae8f5efb837bf68c4" translate="yes" xml:space="preserve">
          <source>The function must have originally been registered with &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt;, otherwise the process will abort.</source>
          <target state="translated">该函数必须最初已在 &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt; 中注册，否则该过程将中止。</target>
        </trans-unit>
        <trans-unit id="f268afb017b2dfe54dae374d2c1d5066522cf9d7" translate="yes" xml:space="preserve">
          <source>The function must return &lt;code&gt;true&lt;/code&gt; to indicate all internal validations passed. It will otherwise fail with an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该函数必须返回 &lt;code&gt;true&lt;/code&gt; 以指示已通过所有内部验证。否则它将失败，并显示&lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74b9b9f191b8a04197be696e6514330b1c5ba291" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;this&lt;/code&gt; for consistency with other Readable streams.</source>
          <target state="translated">该函数返回 &lt;code&gt;this&lt;/code&gt; 为了与其他Readable流保持一致。</target>
        </trans-unit>
        <trans-unit id="2e6bbef96f8b05fe994e169f24ac0b9bcca8e67b" translate="yes" xml:space="preserve">
          <source>The functions available and how to use them are documented in &lt;a href=&quot;n-api&quot;&gt;C/C++ addons with N-API&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;n-api&quot;&gt;带有N-API的C / C ++插件&lt;/a&gt;记录了可用的功能以及如何使用它们。</target>
        </trans-unit>
        <trans-unit id="3c483586a4f9507cbc3d3fd24d9b71ec8af1eb54" translate="yes" xml:space="preserve">
          <source>The functions available and how to use them are documented in the section titled &lt;a href=&quot;n-api&quot;&gt;C/C++ Addons - N-API&lt;/a&gt;.</source>
          <target state="translated">标题为&lt;a href=&quot;n-api&quot;&gt;C / C ++插件-N-API&lt;/a&gt;的部分中介绍了可用的功能以及如何使用它们。</target>
        </trans-unit>
        <trans-unit id="c73e5b48c342bebc80a4170c898186da78c1202a" translate="yes" xml:space="preserve">
          <source>The given callback is registered as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event.</source>
          <target state="translated">给定的回调在 &lt;code&gt;'timeout'&lt;/code&gt; 事件中注册为侦听器。</target>
        </trans-unit>
        <trans-unit id="a0434bbb6d598e35c8b0d5e01cd6743bb08d18b3" translate="yes" xml:space="preserve">
          <source>The given crypto key object's type is invalid for the attempted operation.</source>
          <target state="translated">给定的加密密钥对象的类型对试图进行的操作是无效的。</target>
        </trans-unit>
        <trans-unit id="c643bb78ec82b592d55c33129cdd02c0ee3eb507" translate="yes" xml:space="preserve">
          <source>The given crypto keys are incompatible with the attempted operation.</source>
          <target state="translated">给定的加密密钥与尝试的操作不兼容。</target>
        </trans-unit>
        <trans-unit id="ac3e3f397f73d5e18840408ac7c7de7a4f0bfb44" translate="yes" xml:space="preserve">
          <source>The given sequence of paths is processed from right to left, with each subsequent &lt;code&gt;path&lt;/code&gt; prepended until an absolute path is constructed. For instance, given the sequence of path segments: &lt;code&gt;/foo&lt;/code&gt;, &lt;code&gt;/bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt;, calling &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; would return &lt;code&gt;/bar/baz&lt;/code&gt; because &lt;code&gt;'baz'&lt;/code&gt; is not an absolute path but &lt;code&gt;'/bar' + '/' + 'baz'&lt;/code&gt; is.</source>
          <target state="translated">给定的路径顺序从右到左进行处理，随后的每个 &lt;code&gt;path&lt;/code&gt; 优先放置，直到构造出绝对路径为止。例如，给定路径段的顺序： &lt;code&gt;/foo&lt;/code&gt; ， &lt;code&gt;/bar&lt;/code&gt; ， &lt;code&gt;baz&lt;/code&gt; ，调用 &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; 将返回 &lt;code&gt;/bar/baz&lt;/code&gt; ,因为 &lt;code&gt;'baz'&lt;/code&gt; 不是绝对路径，但是 &lt;code&gt;'/bar' + '/' + 'baz'&lt;/code&gt; 是。</target>
        </trans-unit>
        <trans-unit id="15355f464703eae74bd506a06b7ddeaa6e863a42" translate="yes" xml:space="preserve">
          <source>The given sequence of paths is processed from right to left, with each subsequent &lt;code&gt;path&lt;/code&gt; prepended until an absolute path is constructed. For instance, given the sequence of path segments: &lt;code&gt;/foo&lt;/code&gt;, &lt;code&gt;/bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt;, calling &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; would return &lt;code&gt;/bar/baz&lt;/code&gt;.</source>
          <target state="translated">给定的路径顺序从右到左进行处理，随后的每个 &lt;code&gt;path&lt;/code&gt; 优先放置，直到构造出绝对路径为止。例如，给定路径段的顺序： &lt;code&gt;/foo&lt;/code&gt; ， &lt;code&gt;/bar&lt;/code&gt; ， &lt;code&gt;baz&lt;/code&gt; ，调用 &lt;code&gt;path.resolve('/foo', '/bar', 'baz')&lt;/code&gt; 将返回 &lt;code&gt;/bar/baz&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="116c1174f7b0374b189bdc248ad51e1a1c759ce8" translate="yes" xml:space="preserve">
          <source>The global &lt;code&gt;console&lt;/code&gt; is a special &lt;code&gt;Console&lt;/code&gt; whose output is sent to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt;. It is equivalent to calling:</source>
          <target state="translated">全局 &lt;code&gt;console&lt;/code&gt; 是一个特殊的 &lt;code&gt;Console&lt;/code&gt; 其输出发送到&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;。它等效于调用：</target>
        </trans-unit>
        <trans-unit id="c8071093900b9cffe0f9d5d764501c77193fb3b5" translate="yes" xml:space="preserve">
          <source>The graph only shows &lt;em&gt;when&lt;/em&gt; a resource was created, not &lt;em&gt;why&lt;/em&gt;, so to track the &lt;em&gt;why&lt;/em&gt; use &lt;code&gt;triggerAsyncId&lt;/code&gt;.</source>
          <target state="translated">只有该图显示&lt;em&gt;，当&lt;/em&gt;创建一个资源，不&lt;em&gt;为什么&lt;/em&gt;，所以跟踪&lt;em&gt;为什么&lt;/em&gt;使用 &lt;code&gt;triggerAsyncId&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d61da0b479d948a06a70f90da06d8355d300955" translate="yes" xml:space="preserve">
          <source>The graph only shows &lt;em&gt;when&lt;/em&gt; a resource was created, not &lt;em&gt;why&lt;/em&gt;, so to track the &lt;em&gt;why&lt;/em&gt; use &lt;code&gt;triggerAsyncId&lt;/code&gt;. Which can be represented with the following graph:</source>
          <target state="translated">只有该图显示&lt;em&gt;，当&lt;/em&gt;创建一个资源，不&lt;em&gt;为什么&lt;/em&gt;，所以跟踪&lt;em&gt;为什么&lt;/em&gt;使用 &lt;code&gt;triggerAsyncId&lt;/code&gt; 。可以用下图表示：</target>
        </trans-unit>
        <trans-unit id="78c2df2630147331ef167e43f5bfee36cfe7ff49" translate="yes" xml:space="preserve">
          <source>The group may read and write the file.</source>
          <target state="translated">该组可以读写文件。</target>
        </trans-unit>
        <trans-unit id="de647ee3bee7edc8c8e05a3fc4ad18d8916c3943" translate="yes" xml:space="preserve">
          <source>The handler function will be invoked with two arguments:</source>
          <target state="translated">处理函数将以两个参数被调用。</target>
        </trans-unit>
        <trans-unit id="f120041c159476fa76d1281443ab71e42f4fb65f" translate="yes" xml:space="preserve">
          <source>The hazards described in the previous section are avoided or minimized.</source>
          <target state="translated">避免或减少上一节所述的危害。</target>
        </trans-unit>
        <trans-unit id="ba78c097f5014bcc5443343dc28bab106befcb25" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js environment was initialized.</source>
          <target state="translated">Node.js环境被初始化时的高分辨率毫秒时间戳。</target>
        </trans-unit>
        <trans-unit id="64b8c9ee8fc1b0b78b060b35f917660bed2faee1" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js event loop exited. If the event loop has not yet exited, the property has the value of -1. It can only have a value of not -1 in a handler of the &lt;a href=&quot;process#process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">Node.js事件循环退出时的高分辨率毫秒时间戳。如果尚未退出事件循环，则该属性的值为-1。在&lt;a href=&quot;process#process_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; &lt;/a&gt;事件的处理程序中，它只能具有不为-1的值。</target>
        </trans-unit>
        <trans-unit id="04181966da212756623d143ee5508e37cfa98637" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js event loop started. If the event loop has not yet started (e.g., in the first tick of the main script), the property has the value of -1.</source>
          <target state="translated">Node.js事件循环开始的高分辨率毫秒时间戳。如果事件循环还没有启动(例如,在主脚本的第一个tick),该属性的值为-1。</target>
        </trans-unit>
        <trans-unit id="a8ae321117af7a2e6dc9e7505340ff9e12463a1c" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js process completed bootstrapping. If bootstrapping has not yet finished, the property has the value of -1.</source>
          <target state="translated">Node.js进程完成引导的高分辨率毫秒时间戳。如果尚未完成引导,则该属性的值为-1。</target>
        </trans-unit>
        <trans-unit id="071df5fd57717fbd6090f443bfda8ce228353c66" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the Node.js process was initialized.</source>
          <target state="translated">Node.js进程被初始化时的高分辨率毫秒时间戳。</target>
        </trans-unit>
        <trans-unit id="4c67dbbf7296ae4aa2f9c5436c0e093271dafc64" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp at which the V8 platform was initialized.</source>
          <target state="translated">V8平台初始化时的高分辨率毫秒时间戳。</target>
        </trans-unit>
        <trans-unit id="70f903809143489fbc93090cbbcce31200a3d632" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp marking the starting time of the Performance Entry.</source>
          <target state="translated">高分辨率的毫秒时间戳,标志着性能条目的开始时间。</target>
        </trans-unit>
        <trans-unit id="b552b812c8d4eb7775ff7d7c0096788c1219ffa7" translate="yes" xml:space="preserve">
          <source>The high resolution millisecond timestamp of the amount of time the event loop has been idle within the event loop's event provider (e.g. &lt;code&gt;epoll_wait&lt;/code&gt;). This does not take CPU usage into consideration. If the event loop has not yet started (e.g., in the first tick of the main script), the property has the value of 0.</source>
          <target state="translated">事件循环在事件循环的事件提供程序（例如 &lt;code&gt;epoll_wait&lt;/code&gt; ）内处于空闲状态的时间的高分辨率毫秒时间戳。这没有考虑CPU使用率。如果事件循环尚未开始（例如，在主脚本的第一个刻度中），则该属性的值为0。</target>
        </trans-unit>
        <trans-unit id="de4e70665d46e6d1357630ab3e77e4fa6d270e20" translate="yes" xml:space="preserve">
          <source>The highest acknowledged data offset received for this &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">为此 &lt;code&gt;QuicStream&lt;/code&gt; 接收的最高确认数据偏移量。</target>
        </trans-unit>
        <trans-unit id="0296958ef85e1f2b12f2a8e3864fc6d548324150" translate="yes" xml:space="preserve">
          <source>The highest cumulative number of bidirectional and unidirectional streams that can currently be opened. The values are set initially by configuration parameters when the &lt;code&gt;QuicSession&lt;/code&gt; is created, then updated over the lifespan of the &lt;code&gt;QuicSession&lt;/code&gt; as the connected peer allows new streams to be created.</source>
          <target state="translated">当前可以打开的双向和单向流的最大累积数。在创建 &lt;code&gt;QuicSession&lt;/code&gt; 时，这些值最初是由配置参数设置的，然后在 &lt;code&gt;QuicSession&lt;/code&gt; 的生命周期内进行更新，因为已连接的对等方允许创建新的流。</target>
        </trans-unit>
        <trans-unit id="3d718b76cc617048137f79b76b3096eb28ab803f" translate="yes" xml:space="preserve">
          <source>The highest process scheduling priority. This corresponds to &lt;code&gt;REALTIME_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-20&lt;/code&gt; on all other platforms.</source>
          <target state="translated">最高的进程调度优先级。这对应于Windows 上的 &lt;code&gt;REALTIME_PRIORITY_CLASS&lt;/code&gt; ，在所有其他平台上则为 &lt;code&gt;-20&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88efed373aad8c0a32d816872573d22440d5f941" translate="yes" xml:space="preserve">
          <source>The hooks will be called in reverse order, i.e. the most recently added one will be called first.</source>
          <target state="translated">钩子将以相反的顺序被调用,即最近添加的钩子将被首先调用。</target>
        </trans-unit>
        <trans-unit id="fbe35588d2e0f56ae4c4254cfae039f3d4a9c4e1" translate="yes" xml:space="preserve">
          <source>The host is not accessible from public networks.</source>
          <target state="translated">该主机无法从公共网络访问。</target>
        </trans-unit>
        <trans-unit id="70c45254dfbe7a98e1f87576c63ddee48c0ed2ca" translate="yes" xml:space="preserve">
          <source>The identifier for the module. Typically this is the fully resolved filename.</source>
          <target state="translated">模块的标识符。通常是完全解析的文件名。</target>
        </trans-unit>
        <trans-unit id="3e1f78558e83eb29a15f6d30742ba0cef1977a01" translate="yes" xml:space="preserve">
          <source>The identifier of the current module, as set in the constructor.</source>
          <target state="translated">当前模块的标识符,在构造函数中设置。</target>
        </trans-unit>
        <trans-unit id="4e46e4c795af885884ca96415b2f4fd958aa35fa" translate="yes" xml:space="preserve">
          <source>The implementation code for a stream should &lt;em&gt;never&lt;/em&gt; call the &quot;public&quot; methods of a stream that are intended for use by consumers (as described in the &lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;API for Stream Consumers&lt;/a&gt; section). Doing so may lead to adverse side effects in application code consuming the stream.</source>
          <target state="translated">流的实现代码应&lt;em&gt;永远不要&lt;/em&gt;调用旨在供使用者使用的流的&amp;ldquo;公共&amp;rdquo;方法（如&amp;ldquo; &lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;用于流使用者&lt;/a&gt;的API&amp;rdquo;部分所述）。这样做可能导致应用程序代码消耗流的不利副作用。</target>
        </trans-unit>
        <trans-unit id="b1197a4b12b03caf7b97c692a4469a4dde201f02" translate="yes" xml:space="preserve">
          <source>The implementation code for a stream should &lt;em&gt;never&lt;/em&gt; call the &quot;public&quot; methods of a stream that are intended for use by consumers (as described in the &lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;API for stream consumers&lt;/a&gt; section). Doing so may lead to adverse side effects in application code consuming the stream.</source>
          <target state="translated">流的实现代码应&lt;em&gt;永远不要&lt;/em&gt;调用旨在供使用者使用的流的&amp;ldquo;公共&amp;rdquo;方法（如&amp;ldquo;&lt;a href=&quot;#stream_api_for_stream_consumers&quot;&gt;用于流使用者&lt;/a&gt;的API&amp;rdquo;部分中所述）。这样做可能会导致应用程序代码消耗流的不利副作用。</target>
        </trans-unit>
        <trans-unit id="d7b68703a9e2dcb076edca10edad1d01a02d8f51" translate="yes" xml:space="preserve">
          <source>The implementation in &lt;code&gt;myobject.cc&lt;/code&gt; is similar to the previous example:</source>
          <target state="translated">&lt;code&gt;myobject.cc&lt;/code&gt; 中的实现与前面的示例相似：</target>
        </trans-unit>
        <trans-unit id="0a52a7d9fa897ef7b7e7265d41af6393190e98f2" translate="yes" xml:space="preserve">
          <source>The implementation is now spec compliant and does not throw anymore.</source>
          <target state="translated">现在的实现已经符合规范,不会再抛出。</target>
        </trans-unit>
        <trans-unit id="6e06a2129159e07eb26204cbfea1eda2335fc973" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;crypto.createCipher()&lt;/code&gt; derives keys using the OpenSSL function &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.</source>
          <target state="translated">&lt;code&gt;crypto.createCipher()&lt;/code&gt; 的实现使用OpenSSL函数&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt; &lt;code&gt;EVP_BytesToKey&lt;/code&gt; &lt;/a&gt;导出密钥，并将摘要算法设置为MD5，一次迭代，并且不添加盐。缺少盐会使字典受到攻击，因为相同的密码始终会创建相同的密钥。低迭代次数和非加密安全的哈希算法允许非常快速地测试密码。</target>
        </trans-unit>
        <trans-unit id="ca7f9e52a3626b1b50d6b554e45c94d3cc8682bf" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;crypto.createDecipher()&lt;/code&gt; derives keys using the OpenSSL function &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.</source>
          <target state="translated">&lt;code&gt;crypto.createDecipher()&lt;/code&gt; 的实现使用OpenSSL函数&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt; &lt;code&gt;EVP_BytesToKey&lt;/code&gt; &lt;/a&gt;导出密钥，并将摘要算法设置为MD5，一次迭代且无盐。缺少盐会使字典受到攻击，因为相同的密码始终会创建相同的密钥。低迭代次数和非加密安全的哈希算法允许非常快速地测试密码。</target>
        </trans-unit>
        <trans-unit id="822ad7efe07c30c235e9d7962160db8b807dca79" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;myobject.cc&lt;/code&gt; is similar to before:</source>
          <target state="translated">&lt;code&gt;myobject.cc&lt;/code&gt; 的实现与之前类似：</target>
        </trans-unit>
        <trans-unit id="51779778d26eca6a63eb3f028558111d37c56cec" translate="yes" xml:space="preserve">
          <source>The implications of this are a common source of confusion. In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.</source>
          <target state="translated">这其中的含义是一个常见的困惑。在文件描述符的情况下,文件并没有被替换! 数据不一定写到文件的开头,文件的原始数据可能在新写的数据之前和/或之后保留。</target>
        </trans-unit>
        <trans-unit id="524e8d550227d344d26a7706fc43d6ded573a77c" translate="yes" xml:space="preserve">
          <source>The importance of the distinction between &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; can vary based on platform. On Unix-type operating systems (Unix, Linux, macOS) &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; can be more efficient because it does not spawn a shell by default. On Windows, however, &lt;code&gt;.bat&lt;/code&gt; and &lt;code&gt;.cmd&lt;/code&gt; files are not executable on their own without a terminal, and therefore cannot be launched using &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt;. When running on Windows, &lt;code&gt;.bat&lt;/code&gt; and &lt;code&gt;.cmd&lt;/code&gt; files can be invoked using &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;shell&lt;/code&gt; option set, with &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, or by spawning &lt;code&gt;cmd.exe&lt;/code&gt; and passing the &lt;code&gt;.bat&lt;/code&gt; or &lt;code&gt;.cmd&lt;/code&gt; file as an argument (which is what the &lt;code&gt;shell&lt;/code&gt; option and &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; do). In any case, if the script filename contains spaces it needs to be quoted.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;之间区别的重要性可能因平台而异。在Unix类型的操作系统（Unix，Linux，macOS）上，&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;效率更高，因为默认情况下它不会生成shell。但是，在Windows上， &lt;code&gt;.bat&lt;/code&gt; 和 &lt;code&gt;.cmd&lt;/code&gt; 文件在没有终端的情况下无法单独执行，因此无法使用&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;启动。当在Windows上运行 &lt;code&gt;.bat&lt;/code&gt; 和 &lt;code&gt;.cmd&lt;/code&gt; 文件可以通过调用&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;与 &lt;code&gt;shell&lt;/code&gt; 选项设置，与&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;，或通过生成 &lt;code&gt;cmd.exe&lt;/code&gt; 并将 &lt;code&gt;.bat&lt;/code&gt; 或 &lt;code&gt;.cmd&lt;/code&gt; 文件作为参数传递（这是 &lt;code&gt;shell&lt;/code&gt; 选项和&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; 的&lt;/a&gt;作用）。无论如何，如果脚本文件名包含空格，则需要用引号引起来。</target>
        </trans-unit>
        <trans-unit id="068740fb1221112979549812bcb846baefe051e1" translate="yes" xml:space="preserve">
          <source>The important concept to remember is that a &lt;code&gt;Readable&lt;/code&gt; will not generate data until a mechanism for either consuming or ignoring that data is provided. If the consuming mechanism is disabled or taken away, the &lt;code&gt;Readable&lt;/code&gt; will &lt;em&gt;attempt&lt;/em&gt; to stop generating the data.</source>
          <target state="translated">要记住的重要概念是，除非提供了一种使用或忽略该数据的机制，否则 &lt;code&gt;Readable&lt;/code&gt; 不会生成数据。如果使用机制被禁用或取消，则 &lt;code&gt;Readable&lt;/code&gt; 将&lt;em&gt;尝试&lt;/em&gt;停止生成数据。</target>
        </trans-unit>
        <trans-unit id="93273fa910f64fa7a93e386a6b91c90451e5c871" translate="yes" xml:space="preserve">
          <source>The imported JSON only exposes a &lt;code&gt;default&lt;/code&gt;. There is no support for named exports. A cache entry is created in the CommonJS cache, to avoid duplication. The same object will be returned in CommonJS if the JSON module has already been imported from the same path.</source>
          <target state="translated">导入的JSON仅公开 &lt;code&gt;default&lt;/code&gt; 。不支持命名出口。为了避免重复，在CommonJS缓存中创建了一个缓存条目。如果已经从同一路径导入JSON模块，则将在CommonJS中返回相同的对象。</target>
        </trans-unit>
        <trans-unit id="ecca56901d1b3c35ef96c4a1d6e394d8409589d6" translate="yes" xml:space="preserve">
          <source>The imported module string is an invalid URL, package name, or package subpath specifier.</source>
          <target state="translated">导入的模块字符串是一个无效的URL、包名或包子路径指定器。</target>
        </trans-unit>
        <trans-unit id="5bfeded4e40086fb8d54687b4f3019eb1ad6070e" translate="yes" xml:space="preserve">
          <source>The index operator &lt;code&gt;[index]&lt;/code&gt; can be used to get and set the octet at position &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;buf&lt;/code&gt;. The values refer to individual bytes, so the legal value range is between &lt;code&gt;0x00&lt;/code&gt; and &lt;code&gt;0xFF&lt;/code&gt; (hex) or &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt; (decimal).</source>
          <target state="translated">索引操作符 &lt;code&gt;[index]&lt;/code&gt; 可用于获取和设置在位置八位字节 &lt;code&gt;index&lt;/code&gt; 中 &lt;code&gt;buf&lt;/code&gt; 。这些值是指各个字节，因此合法值范围在 &lt;code&gt;0x00&lt;/code&gt; 和 &lt;code&gt;0xFF&lt;/code&gt; （十六进制）之间或 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;255&lt;/code&gt; （十进制）之间。</target>
        </trans-unit>
        <trans-unit id="aa8783bd5a72320d3042c6afeac6f466ffaac6d1" translate="yes" xml:space="preserve">
          <source>The initial value of &lt;code&gt;process.throwDeprecation&lt;/code&gt; indicates whether the &lt;code&gt;--throw-deprecation&lt;/code&gt; flag is set on the current Node.js process. &lt;code&gt;process.throwDeprecation&lt;/code&gt; is mutable, so whether or not deprecation warnings result in errors may be altered at runtime. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;process.throwDeprecation&lt;/code&gt; 的初始值指示是否在当前Node.js进程上设置了 &lt;code&gt;--throw-deprecation&lt;/code&gt; 标志。 &lt;code&gt;process.throwDeprecation&lt;/code&gt; 是可变的，因此可以在运行时更改过时警告是否导致错误。有关更多信息，请参见&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; 事件&lt;/a&gt;的文档和&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; 方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2c9aa8e521694fac24a9f4d3007352fe01738e0c" translate="yes" xml:space="preserve">
          <source>The initial value of the counter block. This must be exactly 16 bytes long.</source>
          <target state="translated">计数块的初始值。该值必须正好是16个字节长。</target>
        </trans-unit>
        <trans-unit id="d5d1bc7a978c5a6ebd7e5c67234a0454072f41c9" translate="yes" xml:space="preserve">
          <source>The initialization of a TTY failed due to a system error.</source>
          <target state="translated">由于系统错误,TTY的初始化失败。</target>
        </trans-unit>
        <trans-unit id="522b3167c9f2ef2260c5d3d191d063b5a24982bb" translate="yes" xml:space="preserve">
          <source>The initialization vector must be unique for every encryption operation using a given key. It is recommended by the AES-GCM specification that this contain at least 12 random bytes.</source>
          <target state="translated">初始化向量对于使用给定密钥的每次加密操作必须是唯一的。AES-GCM规范建议初始化向量至少包含12个随机字节。</target>
        </trans-unit>
        <trans-unit id="4b928ce33eba8c7ba3b1cbf7ff98058e999c34bc" translate="yes" xml:space="preserve">
          <source>The input may not be used in the &lt;a href=&quot;repl&quot;&gt;&lt;code&gt;REPL&lt;/code&gt;&lt;/a&gt;. All prohibited inputs are documented in the &lt;a href=&quot;repl&quot;&gt;&lt;code&gt;REPL&lt;/code&gt;&lt;/a&gt;'s documentation.</source>
          <target state="translated">输入不能在&lt;a href=&quot;repl&quot;&gt; &lt;code&gt;REPL&lt;/code&gt; 中使用&lt;/a&gt;。所有禁止的输入都记录在&lt;a href=&quot;repl&quot;&gt; &lt;code&gt;REPL&lt;/code&gt; &lt;/a&gt;的文档中。</target>
        </trans-unit>
        <trans-unit id="6e7964aa0613bd0f93baa04a82c9130ed51a122b" translate="yes" xml:space="preserve">
          <source>The inspection output is now limited to about 128 MB. Data above that size will not be fully inspected.</source>
          <target state="translated">检查输出现在被限制在128 MB左右。超过这个大小的数据将不会被完全检查。</target>
        </trans-unit>
        <trans-unit id="0b37df37c8a857d71e292563896d967bae6c8fd4" translate="yes" xml:space="preserve">
          <source>The inspector console does not have API parity with Node.js console.</source>
          <target state="translated">检查员控制台与Node.js控制台不具有API对等性。</target>
        </trans-unit>
        <trans-unit id="6d1d24c1edf52323ba588ddcf5bd806599c68a19" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;path._makeLong()&lt;/code&gt; was not intended for public use. However, userland modules have found it useful. The internal API is deprecated and replaced with an identical, public &lt;code&gt;path.toNamespacedPath()&lt;/code&gt; method.</source>
          <target state="translated">内部 &lt;code&gt;path._makeLong()&lt;/code&gt; 不适用于公共用途。但是，用户级模块发现它很有用。内部API已弃用，并用相同的公共 &lt;code&gt;path.toNamespacedPath()&lt;/code&gt; 方法代替。</target>
        </trans-unit>
        <trans-unit id="1e578f1d016d9eb07bdba0965c0f4724a9faff93" translate="yes" xml:space="preserve">
          <source>The key can also be an ArrayBuffer or CryptoKey. The encoding option was added. The key cannot contain more than 2 ** 32 - 1 bytes.</source>
          <target state="translated">密钥也可以是一个ArrayBuffer或CryptoKey。增加了编码选项。密钥不能包含超过2 **32-1个字节。</target>
        </trans-unit>
        <trans-unit id="78821379fcad26564201d21dcc4208081721bd53" translate="yes" xml:space="preserve">
          <source>The key can also be an ArrayBuffer or string. The encoding argument was added. The key cannot contain more than 2 ** 32 - 1 bytes.</source>
          <target state="translated">键也可以是一个ArrayBuffer或字符串。增加了编码参数。密钥不能包含超过2 **32-1个字节。</target>
        </trans-unit>
        <trans-unit id="0fb67165e86b968195550d65a2c4666dad756b06" translate="yes" xml:space="preserve">
          <source>The key can also be an ArrayBuffer. The encoding option was added. The key cannot contain more than 2 ** 32 - 1 bytes.</source>
          <target state="translated">键也可以是一个ArrayBuffer。增加了编码选项。密钥不能包含超过2 **32-1个字节。</target>
        </trans-unit>
        <trans-unit id="e43746a4a6e9a39d1451d57a3a425511033f2b46" translate="yes" xml:space="preserve">
          <source>The key can now be a private key.</source>
          <target state="translated">现在的密钥可以是一个私钥。</target>
        </trans-unit>
        <trans-unit id="cdfa394de2adea1a9dffe9daa48cb7c8f6bea746" translate="yes" xml:space="preserve">
          <source>The key used with RSA, DSA, and DH algorithms is recommended to have at least 2048 bits and that of the curve of ECDSA and ECDH at least 224 bits, to be safe to use for several years.</source>
          <target state="translated">RSA、DSA、DH算法使用的密钥建议至少有2048位,ECDSA和ECDH的曲线至少有224位,这样才能安全使用几年。</target>
        </trans-unit>
        <trans-unit id="682daccc97ee42ee651db4bcf2c6e94124c3b1fc" translate="yes" xml:space="preserve">
          <source>The keys and values are in the same list. It is &lt;em&gt;not&lt;/em&gt; a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets are the associated values.</source>
          <target state="translated">键和值在同一列表中。它&lt;em&gt;不是&lt;/em&gt;元组列表。因此，偶数偏移是键值，而奇数偏移是关联值。</target>
        </trans-unit>
        <trans-unit id="1ee648142cd6bc2a91d3ff824c7754d33d3fb978" translate="yes" xml:space="preserve">
          <source>The last three bytes are null bytes (&lt;code&gt;'\0'&lt;/code&gt;), to compensate the over-truncation.</source>
          <target state="translated">最后三个字节为空字节（ &lt;code&gt;'\0'&lt;/code&gt; ），以补偿过度截断。</target>
        </trans-unit>
        <trans-unit id="a1a047e356026001e5862f4364bf432f3f5b8f57" translate="yes" xml:space="preserve">
          <source>The latest version of the V8 inspector protocol is published on the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/&quot;&gt;Chrome DevTools Protocol Viewer&lt;/a&gt;.</source>
          <target state="translated">V8检查器协议的最新版本已发布在&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/v8/&quot;&gt;Chrome DevTools协议查看器中&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="029ac052f9dfea1ffb83480d085a03712a847eb9" translate="yes" xml:space="preserve">
          <source>The left hand matching pattern must always end in &lt;code&gt;*&lt;/code&gt;. All instances of &lt;code&gt;*&lt;/code&gt; on the right hand side will then be replaced with this value, including if it contains any &lt;code&gt;/&lt;/code&gt; separators.</source>
          <target state="translated">左侧匹配模式必须始终以 &lt;code&gt;*&lt;/code&gt; 结尾。右侧的所有 &lt;code&gt;*&lt;/code&gt; 实例将被替换为该值，包括是否包含 &lt;code&gt;/&lt;/code&gt; 分隔符。</target>
        </trans-unit>
        <trans-unit id="a2f65f898a1cabdd99c1f9b5338355a88f889890" translate="yes" xml:space="preserve">
          <source>The legacy &lt;code&gt;node debug&lt;/code&gt; command was removed.</source>
          <target state="translated">遗留 &lt;code&gt;node debug&lt;/code&gt; 命令已删除。</target>
        </trans-unit>
        <trans-unit id="ab6fe4cc54f3bbbf6cc2f2a8e1a7af78f281efdc" translate="yes" xml:space="preserve">
          <source>The legacy &lt;code&gt;urlObject&lt;/code&gt; (&lt;code&gt;require('url').Url&lt;/code&gt;) is created and returned by the &lt;code&gt;url.parse()&lt;/code&gt; function.</source>
          <target state="translated">旧版 &lt;code&gt;urlObject&lt;/code&gt; （ &lt;code&gt;require('url').Url&lt;/code&gt; ）由 &lt;code&gt;url.parse()&lt;/code&gt; 函数创建并返回。</target>
        </trans-unit>
        <trans-unit id="58c6a85d434b83fbb1efbf358a6c2cba85b1ec53" translate="yes" xml:space="preserve">
          <source>The legacy HTTP parser, used by default in versions of Node.js prior to 12.0.0, is deprecated and has been removed in v13.0.0. Prior to v13.0.0, the &lt;code&gt;--http-parser=legacy&lt;/code&gt; command-line flag could be used to revert to using the legacy parser.</source>
          <target state="translated">在12.0.0之前的Node.js版本中默认使用的旧版HTTP解析器已弃用，并已在v13.0.0中删除。在v13.0.0之前，-- &lt;code&gt;--http-parser=legacy&lt;/code&gt; 命令行标志可用于恢复为使用旧式解析器。</target>
        </trans-unit>
        <trans-unit id="b59b0da974ef3079a4d02ad543fa1a44b9facbea" translate="yes" xml:space="preserve">
          <source>The legacy HTTP parser, used by default in versions of Node.js prior to 12.0.0, is deprecated. This deprecation applies to users of the &lt;a href=&quot;cli#cli_http_parser_library&quot;&gt;&lt;code&gt;--http-parser=legacy&lt;/code&gt;&lt;/a&gt; command-line flag.</source>
          <target state="translated">不推荐使用旧版HTTP解析器，默认情况下，该解析器在12.0.0之前的Node.js版本中使用。此弃用适用于&lt;a href=&quot;cli#cli_http_parser_library&quot;&gt; &lt;code&gt;--http-parser=legacy&lt;/code&gt; &lt;/a&gt;命令行标志的用户。</target>
        </trans-unit>
        <trans-unit id="6bbe7e69c63f7e6b32f81f17886f135b752649d0" translate="yes" xml:space="preserve">
          <source>The length (in bytes) of the random salt to use.</source>
          <target state="translated">要使用的随机盐的长度(以字节为单位)。</target>
        </trans-unit>
        <trans-unit id="68b0510d2a6ce01bd134853b5379592f7fa5e53d" translate="yes" xml:space="preserve">
          <source>The length in bits of the DSA modulus. As a best practice, this should be at least &lt;code&gt;2048&lt;/code&gt;.</source>
          <target state="translated">DSA模数的长度（以位为单位）。最佳做法是至少为 &lt;code&gt;2048&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe142b986868d01a9929e27dc821bf4fc8044df3" translate="yes" xml:space="preserve">
          <source>The length in bits of the RSA modulus. As a best practice, this should be at least &lt;code&gt;2048&lt;/code&gt;.</source>
          <target state="translated">RSA模数的长度（以位为单位）。最佳做法是至少为 &lt;code&gt;2048&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1fdce0746d97b2bc04aa61c6ce847e5b294bb612" translate="yes" xml:space="preserve">
          <source>The length of the AES key to be generated. This must be either &lt;code&gt;128&lt;/code&gt;, &lt;code&gt;192&lt;/code&gt;, or &lt;code&gt;256&lt;/code&gt;.</source>
          <target state="translated">要生成的AES密钥的长度。这必须是 &lt;code&gt;128&lt;/code&gt; ， &lt;code&gt;192&lt;/code&gt; ，或 &lt;code&gt;256&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b839c62c200fcce6c9f9f11222c1ee0341b1bf83" translate="yes" xml:space="preserve">
          <source>The length of the initialization vector (nonce) &lt;code&gt;N&lt;/code&gt; must be between 7 and 13 bytes (&lt;code&gt;7 &amp;le; N &amp;le; 13&lt;/code&gt;).</source>
          <target state="translated">初始化向量的长度（随机数） &lt;code&gt;N&lt;/code&gt; 必须是7和13之间的字节（ &lt;code&gt;7 &amp;le; N &amp;le; 13&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e5f8159583783dde7b4028e859056232836bcfe3" translate="yes" xml:space="preserve">
          <source>The length of the plaintext is limited to &lt;code&gt;2 ** (8 * (15 - N))&lt;/code&gt; bytes.</source>
          <target state="translated">明文的长度限制为 &lt;code&gt;2 ** (8 * (15 - N))&lt;/code&gt; 个字节。</target>
        </trans-unit>
        <trans-unit id="44311c2c680818ab60609335245e7fecece40098" translate="yes" xml:space="preserve">
          <source>The length of time taken to complete the TLS handshake.</source>
          <target state="translated">完成TLS握手的时间长度。</target>
        </trans-unit>
        <trans-unit id="6b6f7fa9b5f4d3215529fb1ac8d3f6af26d58092" translate="yes" xml:space="preserve">
          <source>The length of time the &lt;code&gt;QuicSession&lt;/code&gt; was active.</source>
          <target state="translated">&lt;code&gt;QuicSession&lt;/code&gt; 处于活动状态的时间长度。</target>
        </trans-unit>
        <trans-unit id="cabf5569d05ea5e98f7b7208240a2f0408f028f3" translate="yes" xml:space="preserve">
          <source>The length of time the &lt;code&gt;QuicStream&lt;/code&gt; has been active.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; 处于活动状态的时间长度。</target>
        </trans-unit>
        <trans-unit id="13707eeb5173bdf8520f07114b4e5bc1599e10c7" translate="yes" xml:space="preserve">
          <source>The length of time this &lt;code&gt;QuicSocket&lt;/code&gt; has been active,</source>
          <target state="translated">此 &lt;code&gt;QuicSocket&lt;/code&gt; 处于活动状态的时间长度，</target>
        </trans-unit>
        <trans-unit id="d20284b93553b189150e66b2fddfa0318d161243" translate="yes" xml:space="preserve">
          <source>The length of time this &lt;code&gt;QuicSocket&lt;/code&gt; has been bound to a local port.</source>
          <target state="translated">此 &lt;code&gt;QuicSocket&lt;/code&gt; 已绑定到本地端口的时间长度。</target>
        </trans-unit>
        <trans-unit id="00d38eb8e755a3a994c5682275563d4352b99345" translate="yes" xml:space="preserve">
          <source>The length of time this &lt;code&gt;QuicSocket&lt;/code&gt; has been listening for connections.</source>
          <target state="translated">该 &lt;code&gt;QuicSocket&lt;/code&gt; 监听连接的时间长度。</target>
        </trans-unit>
        <trans-unit id="79c10884ec660ee1fbd32c6308348d654832331d" translate="yes" xml:space="preserve">
          <source>The linker function is allowed to be asynchronous while &lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; is synchronous.</source>
          <target state="translated">&lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;同步时，允许链接器函数异步。</target>
        </trans-unit>
        <trans-unit id="d963973bdd341e8c9654a7439d48f73aa9ce4c3c" translate="yes" xml:space="preserve">
          <source>The linker function is allowed to be asynchronous while &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; is synchronous.</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;同步时，允许链接器函数异步。</target>
        </trans-unit>
        <trans-unit id="715536f634e876d37fa2fab56b440dbae4eab00f" translate="yes" xml:space="preserve">
          <source>The linker function is executed during linking, a Node.js-specific stage before instantiation, while &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; is called during instantiation.</source>
          <target state="translated">链接器函数在链接期间执行，即实例化之前的Node.js特定阶段，而在实例化期间调用&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7e1c54f4d0339ef4fb4064416f1d268d5b877ada" translate="yes" xml:space="preserve">
          <source>The linker function returned a module for which linking has failed.</source>
          <target state="translated">链接器函数返回一个链接失败的模块。</target>
        </trans-unit>
        <trans-unit id="8ea2cca89fe5f4c5f58820b496f469742151fc50" translate="yes" xml:space="preserve">
          <source>The linker function roughly corresponds to the implementation-defined &lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; abstract operation in the ECMAScript specification, with a few key differences:</source>
          <target state="translated">链接器函数大致对应于ECMAScript规范中实现定义的&lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;抽象操作，但有一些主要区别：</target>
        </trans-unit>
        <trans-unit id="7bc61c4465b811b422205aff9e099a7532eea396" translate="yes" xml:space="preserve">
          <source>The linker function roughly corresponds to the implementation-defined &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; abstract operation in the ECMAScript specification, with a few key differences:</source>
          <target state="translated">链接器函数大致对应于ECMAScript规范中实现定义的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;抽象操作，但有一些主要区别：</target>
        </trans-unit>
        <trans-unit id="0d230ead665d331eb10732b52823f902a70923db" translate="yes" xml:space="preserve">
          <source>The list of rules added to the blocklist.</source>
          <target state="translated">添加到blocklist的规则列表。</target>
        </trans-unit>
        <trans-unit id="fb5cdf801db65ab26ab02fec82d66df22c6e7c37" translate="yes" xml:space="preserve">
          <source>The listener callback function is invoked with the exit code specified either by the &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; property, or the &lt;code&gt;exitCode&lt;/code&gt; argument passed to the &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">使用由&lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt;属性指定的退出代码或传递给&lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;方法的 &lt;code&gt;exitCode&lt;/code&gt; 参数指定的退出代码来调用侦听器回调函数。</target>
        </trans-unit>
        <trans-unit id="d70ff3ea096a9215253d68eeebe5c29488a92a9f" translate="yes" xml:space="preserve">
          <source>The listener callback function is invoked with the value of &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; passed as the only argument.</source>
          <target state="translated">使用作为唯一参数传递的&lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt;值来调用侦听器回调函数。</target>
        </trans-unit>
        <trans-unit id="055837d3b4ae741c1c2bb6eeb05d26cac3fdcde4" translate="yes" xml:space="preserve">
          <source>The listener callback gets two arguments &lt;code&gt;(eventType, filename)&lt;/code&gt;. &lt;code&gt;eventType&lt;/code&gt; is either &lt;code&gt;'rename'&lt;/code&gt; or &lt;code&gt;'change'&lt;/code&gt;, and &lt;code&gt;filename&lt;/code&gt; is the name of the file which triggered the event.</source>
          <target state="translated">侦听器回调获取两个参数 &lt;code&gt;(eventType, filename)&lt;/code&gt; 。 &lt;code&gt;eventType&lt;/code&gt; 是 &lt;code&gt;'rename'&lt;/code&gt; 或 &lt;code&gt;'change'&lt;/code&gt; ， &lt;code&gt;filename&lt;/code&gt; 是触发事件的文件的名称。</target>
        </trans-unit>
        <trans-unit id="0d25269254663bac508549031b78553911b28a42" translate="yes" xml:space="preserve">
          <source>The listener callback is attached to the &lt;code&gt;'change'&lt;/code&gt; event fired by &lt;a href=&quot;#fs_class_fs_fswatcher&quot;&gt;&lt;code&gt;fs.FSWatcher&lt;/code&gt;&lt;/a&gt;, but it is not the same thing as the &lt;code&gt;'change'&lt;/code&gt; value of &lt;code&gt;eventType&lt;/code&gt;.</source>
          <target state="translated">侦听器回调附加到&lt;a href=&quot;#fs_class_fs_fswatcher&quot;&gt; &lt;code&gt;fs.FSWatcher&lt;/code&gt; &lt;/a&gt;触发的 &lt;code&gt;'change'&lt;/code&gt; 事件，但与 &lt;code&gt;eventType&lt;/code&gt; 的 &lt;code&gt;'change'&lt;/code&gt; 值不同。</target>
        </trans-unit>
        <trans-unit id="3428a49f4a9aef927962af400c0a27d96f893bb5" translate="yes" xml:space="preserve">
          <source>The listener callback is passed three arguments when called:</source>
          <target state="translated">调用监听器回调时,会传递三个参数。</target>
        </trans-unit>
        <trans-unit id="0bd489f8ec0206d465fe90b95b4b651b6b4e3293" translate="yes" xml:space="preserve">
          <source>The listener callback will be passed a single &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">侦听器回调将传递一个 &lt;code&gt;Error&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="ab5b9928c3b053bac6cf69ed39e46e765a674622" translate="yes" xml:space="preserve">
          <source>The listener callback will be passed the chunk of data as a string if a default encoding has been specified for the stream using the &lt;code&gt;readable.setEncoding()&lt;/code&gt; method; otherwise the data will be passed as a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">如果使用 &lt;code&gt;readable.setEncoding()&lt;/code&gt; 方法为流指定了默认编码，则侦听器回调将作为字符串传递数据块；否则，数据将作为 &lt;code&gt;Buffer&lt;/code&gt; 传递。</target>
        </trans-unit>
        <trans-unit id="8cb29c94ac667b5168cac94eb1be7ed4650a37d8" translate="yes" xml:space="preserve">
          <source>The listener function is called with a string containing the single line of received input.</source>
          <target state="translated">调用监听函数时,会有一个包含接收到的单行输入的字符串。</target>
        </trans-unit>
        <trans-unit id="75c52c037d844d9260cda2c263ecc1633937eb4a" translate="yes" xml:space="preserve">
          <source>The listener function is called without passing any arguments.</source>
          <target state="translated">调用监听函数时不需要传递任何参数。</target>
        </trans-unit>
        <trans-unit id="4eec06a2464b63bfe43f85145310f598d4dd67e9" translate="yes" xml:space="preserve">
          <source>The listener function is invoked without passing any arguments.</source>
          <target state="translated">监听函数在不传递任何参数的情况下被调用。</target>
        </trans-unit>
        <trans-unit id="6aae998a9956fa4170ac3e55b9cc618bd7d7dcbc" translate="yes" xml:space="preserve">
          <source>The literal string &lt;code&gt;:&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;, and</source>
          <target state="translated">文字字符串 &lt;code&gt;:&lt;/code&gt; 附加到 &lt;code&gt;result&lt;/code&gt; ，和</target>
        </trans-unit>
        <trans-unit id="8c0f261769e8eadc7e0487404f29a1a8ee87daf3" translate="yes" xml:space="preserve">
          <source>The load average is a Unix-specific concept with no real equivalent on Windows platforms. On Windows, the return value is always &lt;code&gt;[0, 0, 0]&lt;/code&gt;.</source>
          <target state="translated">平均负载是特定于Unix的概念，在Windows平台上没有真正的等效概念。在Windows上，返回值始终为 &lt;code&gt;[0, 0, 0]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="79de82bb559d39f0837e25e2dbe2e15b4146db2f" translate="yes" xml:space="preserve">
          <source>The load average is a Unix-specific concept. On Windows, the return value is always &lt;code&gt;[0, 0, 0]&lt;/code&gt;.</source>
          <target state="translated">平均负载是Unix特定的概念。在Windows上，返回值始终为 &lt;code&gt;[0, 0, 0]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5220aad6715b03d4155641d22d38555a93ae8727" translate="yes" xml:space="preserve">
          <source>The load average is a measure of system activity calculated by the operating system and expressed as a fractional number.</source>
          <target state="translated">负载平均值是由操作系统计算出的系统活动度量,用小数表示。</target>
        </trans-unit>
        <trans-unit id="e35d013f19eb56251ea330d71e084299ad93abf7" translate="yes" xml:space="preserve">
          <source>The load average is a measure of system activity, calculated by the operating system and expressed as a fractional number. As a rule of thumb, the load average should ideally be less than the number of logical CPUs in the system.</source>
          <target state="translated">负载平均数是衡量系统活动的一个指标,由操作系统计算,并以小数表示。作为经验法则,平均负载最好小于系统中逻辑CPU的数量。</target>
        </trans-unit>
        <trans-unit id="70f0d18d4c3698c55e755528941f4ab02364f269" translate="yes" xml:space="preserve">
          <source>The location information will be one of:</source>
          <target state="translated">位置信息将是其中之一。</target>
        </trans-unit>
        <trans-unit id="2eed34e4bcd621bb071798baa263b1f365323ad1" translate="yes" xml:space="preserve">
          <source>The logging file is by default called &lt;code&gt;node_trace.${rotation}.log&lt;/code&gt;, where &lt;code&gt;${rotation}&lt;/code&gt; is an incrementing log-rotation id. The filepath pattern can be specified with &lt;code&gt;--trace-event-file-pattern&lt;/code&gt; that accepts a template string that supports &lt;code&gt;${rotation}&lt;/code&gt; and &lt;code&gt;${pid}&lt;/code&gt;:</source>
          <target state="translated">默认情况下，日志文件名为 &lt;code&gt;node_trace.${rotation}.log&lt;/code&gt; ，其中 &lt;code&gt;${rotation}&lt;/code&gt; 是递增的日志旋转ID。可以使用 &lt;code&gt;--trace-event-file-pattern&lt;/code&gt; 指定文件路径模式，该模式接受支持 &lt;code&gt;${rotation}&lt;/code&gt; 和 &lt;code&gt;${pid}&lt;/code&gt; 的模板字符串：</target>
        </trans-unit>
        <trans-unit id="800bc2d84885d9da35fe90b70427fd11a65d6618" translate="yes" xml:space="preserve">
          <source>The lowest process scheduling priority. This corresponds to &lt;code&gt;IDLE_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;19&lt;/code&gt; on all other platforms.</source>
          <target state="translated">最低的进程调度优先级。这与Windows 上的 &lt;code&gt;IDLE_PRIORITY_CLASS&lt;/code&gt; 对应，在所有其他平台上的值为 &lt;code&gt;19&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c302db5d052a1fa5e3772f8e3404338707c0ae6" translate="yes" xml:space="preserve">
          <source>The maximum extended data offset that has been reported to the connected peer.</source>
          <target state="translated">已报告给连接的对等体的最大扩展数据偏移量。</target>
        </trans-unit>
        <trans-unit id="b760f7ccb1d6be2e047bdcc423ab12ccf111d220" translate="yes" xml:space="preserve">
          <source>The maximum length of a string instance (in UTF-16 code units) is available as &lt;a href=&quot;#buffer_buffer_constants_max_string_length&quot;&gt;&lt;code&gt;buffer.constants.MAX_STRING_LENGTH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">字符串实例的最大长度（以UTF-16代码为单位）可作为&lt;a href=&quot;#buffer_buffer_constants_max_string_length&quot;&gt; &lt;code&gt;buffer.constants.MAX_STRING_LENGTH&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7710b91b4e824721af667b53f202a7871d88bd9f" translate="yes" xml:space="preserve">
          <source>The maximum number of in-flight bytes recorded for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">为此 &lt;code&gt;QuicSession&lt;/code&gt; 记录的最大运行中字节数。</target>
        </trans-unit>
        <trans-unit id="75b02915ee04745312429bee12a59d46f9b7698d" translate="yes" xml:space="preserve">
          <source>The maximum number of outstanding (unacknowledged) pings is determined by the &lt;code&gt;maxOutstandingPings&lt;/code&gt; configuration option. The default maximum is 10.</source>
          <target state="translated">未完成（未确认）的ping的最大数目由 &lt;code&gt;maxOutstandingPings&lt;/code&gt; 配置选项确定。默认最大值为10。</target>
        </trans-unit>
        <trans-unit id="d26eb8053627d47554ec8e4748dd4a8bcdd49e7f" translate="yes" xml:space="preserve">
          <source>The maximum number of symbolic links is platform-independent and generally (much) higher than what the native &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt; implementation supports.</source>
          <target state="translated">符号链接的最大数量与平台无关，并且通常比本机&lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt;实现支持的数量高很多。</target>
        </trans-unit>
        <trans-unit id="7551489ca91d948e80c3cc8c57954d2e3e6c5eb9" translate="yes" xml:space="preserve">
          <source>The maximum received offset for this &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicStream&lt;/code&gt; 的最大接收偏移量。</target>
        </trans-unit>
        <trans-unit id="f94ad0cb0a50f3f5bdf9cda632f12e11fe8b2d3c" translate="yes" xml:space="preserve">
          <source>The maximum recorded event loop delay.</source>
          <target state="translated">最大记录的事件循环延迟。</target>
        </trans-unit>
        <trans-unit id="647c52fe290a7aa0392bcd60aa3e9e2f4dab2700" translate="yes" xml:space="preserve">
          <source>The maximum size of an &lt;code&gt;IPv4/v6&lt;/code&gt; datagram depends on the &lt;code&gt;MTU&lt;/code&gt; (&lt;em&gt;Maximum Transmission Unit&lt;/em&gt;) and on the &lt;code&gt;Payload Length&lt;/code&gt; field size.</source>
          <target state="translated">&lt;code&gt;IPv4/v6&lt;/code&gt; 数据报的最大大小取决于 &lt;code&gt;MTU&lt;/code&gt; （&lt;em&gt;最大传输单位&lt;/em&gt;）和 &lt;code&gt;Payload Length&lt;/code&gt; 字段的大小。</target>
        </trans-unit>
        <trans-unit id="0d464d166d747ed47c4d6acd41204b884aa6bb55" translate="yes" xml:space="preserve">
          <source>The maximum size of an IPv4/v6 datagram depends on the &lt;code&gt;MTU&lt;/code&gt; (Maximum Transmission Unit) and on the &lt;code&gt;Payload Length&lt;/code&gt; field size.</source>
          <target state="translated">IPv4 / v6数据报的最大大小取决于 &lt;code&gt;MTU&lt;/code&gt; （最大传输单元）和 &lt;code&gt;Payload Length&lt;/code&gt; 字段的大小。</target>
        </trans-unit>
        <trans-unit id="02c3f8c7f0bd7f8db827a8ebcb0ca9509efeb97a" translate="yes" xml:space="preserve">
          <source>The mean of the recorded event loop delays.</source>
          <target state="translated">记录的事件循环延迟的平均值。</target>
        </trans-unit>
        <trans-unit id="5f193e4b5fc479c115e65c9999a21010d722c79d" translate="yes" xml:space="preserve">
          <source>The memory requirements for deflate are (in bytes):</source>
          <target state="translated">放气的内存需求是(单位:字节)。</target>
        </trans-unit>
        <trans-unit id="6eacc04002b65ca67778dff1de5027c712ab8e1a" translate="yes" xml:space="preserve">
          <source>The memory requirements for inflate are (in bytes) &lt;code&gt;1 &amp;lt;&amp;lt; windowBits&lt;/code&gt;. That is, 32K for &lt;code&gt;windowBits&lt;/code&gt; = 15 (default value) plus a few kilobytes for small objects.</source>
          <target state="translated">膨胀的内存要求是（以字节为单位） &lt;code&gt;1 &amp;lt;&amp;lt; windowBits&lt;/code&gt; 。也就是说， &lt;code&gt;windowBits&lt;/code&gt; = 15（默认值）为32K ，小对象则为几千字节。</target>
        </trans-unit>
        <trans-unit id="7c881f56c61219eddbd5d1710886ef6e2c313ce3" translate="yes" xml:space="preserve">
          <source>The message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.</source>
          <target state="translated">消息经过序列化和解析。由此产生的信息可能与最初发送的信息不一样。</target>
        </trans-unit>
        <trans-unit id="e16e104e27f59656b3b7eb456a8a9c66415b600f" translate="yes" xml:space="preserve">
          <source>The message object is cloned immediately, and can be modified after posting without having side effects.</source>
          <target state="translated">消息对象立即被克隆,发布后可以修改,不会产生副作用。</target>
        </trans-unit>
        <trans-unit id="e37151c2ac4132bcfb25dd3c68d1938f51160451" translate="yes" xml:space="preserve">
          <source>The message object will be cloned immediately, and can be modified after posting without having side effects.</source>
          <target state="translated">消息对象会立即被克隆,发布后可以修改,不会有副作用。</target>
        </trans-unit>
        <trans-unit id="c0d1ac7e35b326d112fee222e33f843490785590" translate="yes" xml:space="preserve">
          <source>The method takes an optional callback argument which will be called when finished.</source>
          <target state="translated">该方法需要一个可选的回调参数,当完成后将被调用。</target>
        </trans-unit>
        <trans-unit id="58f75c96647031bfac78ad1d4823f09b1f79aebc" translate="yes" xml:space="preserve">
          <source>The method was changed to an asynchronous execution model. Legacy code would need to be changed to pass a callback function to the method call.</source>
          <target state="translated">该方法被改为异步执行模式。需要修改遗留代码,为方法调用传递一个回调函数。</target>
        </trans-unit>
        <trans-unit id="e0afa109747da35e840872d11340eff9b15a2a35" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt; of &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; do nothing, and will fail silently.</source>
          <target state="translated">该方法 &lt;code&gt;add()&lt;/code&gt; ， &lt;code&gt;clear()&lt;/code&gt; 和 &lt;code&gt;delete()&lt;/code&gt; 的 &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; 什么也不做，将会默默地失败。</target>
        </trans-unit>
        <trans-unit id="a65996ffdf606c98d77d22fda6e8263c7bed158b" translate="yes" xml:space="preserve">
          <source>The methods available to open/close escapable scopes are &lt;a href=&quot;#n_api_napi_open_escapable_handle_scope&quot;&gt;&lt;code&gt;napi_open_escapable_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_escapable_handle_scope&quot;&gt;&lt;code&gt;napi_close_escapable_handle_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可打开/关闭可转义范围的方法是&lt;a href=&quot;#n_api_napi_open_escapable_handle_scope&quot;&gt; &lt;code&gt;napi_open_escapable_handle_scope&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#n_api_napi_close_escapable_handle_scope&quot;&gt; &lt;code&gt;napi_close_escapable_handle_scope&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6f7f17950f4eb3a239490edb84d05cd598355449" translate="yes" xml:space="preserve">
          <source>The microtask queue is managed by V8 and may be used in a similar manner to the &lt;a href=&quot;process#process_process_nexttick_callback_args&quot;&gt;&lt;code&gt;process.nextTick()&lt;/code&gt;&lt;/a&gt; queue, which is managed by Node.js. The &lt;code&gt;process.nextTick()&lt;/code&gt; queue is always processed before the microtask queue within each turn of the Node.js event loop.</source>
          <target state="translated">微任务队列由V8管理，并且可以与由Node.js管理的&lt;a href=&quot;process#process_process_nexttick_callback_args&quot;&gt; &lt;code&gt;process.nextTick()&lt;/code&gt; &lt;/a&gt;队列类似的方式使用。所述 &lt;code&gt;process.nextTick()&lt;/code&gt; 队列Node.js的事件循环的每一圈中的microtask队列之前总是处理。</target>
        </trans-unit>
        <trans-unit id="48978cb836606d29afe552cc44843b645d6fd309" translate="yes" xml:space="preserve">
          <source>The millisecond timestamp when the &lt;code&gt;Event&lt;/code&gt; object was created.</source>
          <target state="translated">创建 &lt;code&gt;Event&lt;/code&gt; 对象时的毫秒时间戳。</target>
        </trans-unit>
        <trans-unit id="3cd62f6b358ecfd9441cc015b81b41f31b4033ac" translate="yes" xml:space="preserve">
          <source>The minimum RTT recorded so far for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">到目前为止，此 &lt;code&gt;QuicSession&lt;/code&gt; 记录的最小RTT 。</target>
        </trans-unit>
        <trans-unit id="05947aeb4f6c9d9feac9d8917230029f87168411" translate="yes" xml:space="preserve">
          <source>The minimum recorded event loop delay.</source>
          <target state="translated">最小记录的事件循环延迟。</target>
        </trans-unit>
        <trans-unit id="c8ab56714435040a644302000b0772076b3a18cc" translate="yes" xml:space="preserve">
          <source>The modified RTT calculated for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">为此 &lt;code&gt;QuicSession&lt;/code&gt; 计算的修改后的RTT 。</target>
        </trans-unit>
        <trans-unit id="3be72cf9e2e6df44acaf71ac6c27e3da259cdcc2" translate="yes" xml:space="preserve">
          <source>The module &lt;code&gt;circle.js&lt;/code&gt; has exported the functions &lt;code&gt;area()&lt;/code&gt; and &lt;code&gt;circumference()&lt;/code&gt;. Functions and objects are added to the root of a module by specifying additional properties on the special &lt;code&gt;exports&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;circle.js&lt;/code&gt; 模块已导出功能 &lt;code&gt;area()&lt;/code&gt; 和围栏 &lt;code&gt;circumference()&lt;/code&gt; 。通过在特殊 &lt;code&gt;exports&lt;/code&gt; 对象上指定其他属性，可以将函数和对象添加到模块的根目录中。</target>
        </trans-unit>
        <trans-unit id="3dd317962ef868748c6e477d31e0f52215463c2e" translate="yes" xml:space="preserve">
          <source>The module attempted to be linked is not eligible for linking, because of one of the following reasons:</source>
          <target state="translated">由于下列原因之一,试图链接的模块不符合链接条件:</target>
        </trans-unit>
        <trans-unit id="6117dfe73589e1d686592596ca5b97da3586b173" translate="yes" xml:space="preserve">
          <source>The module being returned from the linker function is from a different context than the parent module. Linked modules must share the same context.</source>
          <target state="translated">链接函数返回的模块与父模块的上下文不同。被链接的模块必须共享同一个上下文。</target>
        </trans-unit>
        <trans-unit id="4be65968fa64f9f3415d7e7899fb6ad4d2a42a64" translate="yes" xml:space="preserve">
          <source>The module exports two specific components:</source>
          <target state="translated">该模块输出了两个特定的组件。</target>
        </trans-unit>
        <trans-unit id="5e3241b3dc4fc159dd6e2590373d2f6edcaca405" translate="yes" xml:space="preserve">
          <source>The module must be successfully linked before instantiation.</source>
          <target state="translated">该模块必须在实例化前链接成功。</target>
        </trans-unit>
        <trans-unit id="edecdd64b4818b59b9da919865b135b48e57f0bb" translate="yes" xml:space="preserve">
          <source>The module objects required for the first time by this one.</source>
          <target state="translated">这个第一次所需要的模块对象。</target>
        </trans-unit>
        <trans-unit id="fa0efd9dd4962ae01761dcb591cc702fc4f262e3" translate="yes" xml:space="preserve">
          <source>The module scope</source>
          <target state="translated">模块范围</target>
        </trans-unit>
        <trans-unit id="783407a2289306a27cdc3bf69c55122205f1e40d" translate="yes" xml:space="preserve">
          <source>The module system is implemented in the &lt;code&gt;require('module')&lt;/code&gt; module.</source>
          <target state="translated">该模块系统是在 &lt;code&gt;require('module')&lt;/code&gt; 模块中实现的。</target>
        </trans-unit>
        <trans-unit id="6971340cb6f1d59cb77b1d572ec263f32087c9e5" translate="yes" xml:space="preserve">
          <source>The module that first required this one, or &lt;code&gt;null&lt;/code&gt; if the current module is the entry point of the current process, or &lt;code&gt;undefined&lt;/code&gt; if the module was loaded by something that is not a CommonJS module (E.G.: REPL or &lt;code&gt;import&lt;/code&gt;).</source>
          <target state="translated">首先需要此功能的模块；如果当前模块是当前进程的入口点，则为 &lt;code&gt;null&lt;/code&gt; ;如果该模块是由非CommonJS模块（例如：REPL或 &lt;code&gt;import&lt;/code&gt; ）加载的，则为 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca030e9e59563188e9d15b093eec01f36cca3aa6" translate="yes" xml:space="preserve">
          <source>The module that first required this one.</source>
          <target state="translated">首先需要这个模块。</target>
        </trans-unit>
        <trans-unit id="0ad9c14b8f764d47a4fb23c7484512d125b92fd5" translate="yes" xml:space="preserve">
          <source>The module was just created.</source>
          <target state="translated">该模块刚刚创建。</target>
        </trans-unit>
        <trans-unit id="082e3484f6cb16e77ed0dc3f94403f9c18a5ec0a" translate="yes" xml:space="preserve">
          <source>The module wrapper</source>
          <target state="translated">模块封装器</target>
        </trans-unit>
        <trans-unit id="18aaff3433da4c58d496f8db6bf908cfd48e4f29" translate="yes" xml:space="preserve">
          <source>The most important aspect of a &lt;code&gt;Duplex&lt;/code&gt; stream is that the &lt;code&gt;Readable&lt;/code&gt; and &lt;code&gt;Writable&lt;/code&gt; sides operate independently of one another despite co-existing within a single object instance.</source>
          <target state="translated">&lt;code&gt;Duplex&lt;/code&gt; 流的最重要方面是，尽管在单个对象实例中共存，但 &lt;code&gt;Readable&lt;/code&gt; 侧和 &lt;code&gt;Writable&lt;/code&gt; 侧彼此独立运行。</target>
        </trans-unit>
        <trans-unit id="99f36b77ff922a2403a1b2438e1910c61bbb93ec" translate="yes" xml:space="preserve">
          <source>The most important options are:</source>
          <target state="translated">最重要的选择是:</target>
        </trans-unit>
        <trans-unit id="1232e3ea25059583d07d1ec1b191aa093f524eb2" translate="yes" xml:space="preserve">
          <source>The most recently recorded RTT for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicSession&lt;/code&gt; 的最新记录RTT 。</target>
        </trans-unit>
        <trans-unit id="7a91b5a7f101c727c39dcfae1c0be6d89c0e6303" translate="yes" xml:space="preserve">
          <source>The name of each event will be the uppercase common name for the signal (e.g. &lt;code&gt;'SIGINT'&lt;/code&gt; for &lt;code&gt;SIGINT&lt;/code&gt; signals).</source>
          <target state="translated">每个事件的名称将是信号的大写公用名（例如，对于 &lt;code&gt;SIGINT&lt;/code&gt; 信号为 &lt;code&gt;'SIGINT'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="34cd701586e7eaa9dfde58572cc7c8d826dd60dc" translate="yes" xml:space="preserve">
          <source>The name of the performance entry.</source>
          <target state="translated">性能条目的名称。</target>
        </trans-unit>
        <trans-unit id="3ec39d8bbebcb83f8210715189a3aea03a7b994d" translate="yes" xml:space="preserve">
          <source>The namespace object of the module. This is only available after instantiation (&lt;code&gt;module.instantiate()&lt;/code&gt;) has completed.</source>
          <target state="translated">模块的名称空间对象。这仅在实例化（ &lt;code&gt;module.instantiate()&lt;/code&gt; ）完成后才可用。</target>
        </trans-unit>
        <trans-unit id="8b4b639052abd770744009595bada860b5a488d0" translate="yes" xml:space="preserve">
          <source>The namespace object of the module. This is only available after linking (&lt;code&gt;module.link()&lt;/code&gt;) has completed.</source>
          <target state="translated">模块的名称空间对象。仅在链接（ &lt;code&gt;module.link()&lt;/code&gt; ）完成后才可用。</target>
        </trans-unit>
        <trans-unit id="fd84ef951114b730ce5684383645649d6a6845e0" translate="yes" xml:space="preserve">
          <source>The native call from &lt;code&gt;process.cpuUsage&lt;/code&gt; could not be processed.</source>
          <target state="translated">无法处理来自 &lt;code&gt;process.cpuUsage&lt;/code&gt; 的本地调用。</target>
        </trans-unit>
        <trans-unit id="6e9a568acffaeb1567db940433c6597ecc643f6c" translate="yes" xml:space="preserve">
          <source>The nearest parent &lt;code&gt;package.json&lt;/code&gt; is defined as the first &lt;code&gt;package.json&lt;/code&gt; found when searching in the current folder, that folder&amp;rsquo;s parent, and so on up until a node_modules folder or the volume root is reached.</source>
          <target state="translated">最接近的父 &lt;code&gt;package.json&lt;/code&gt; 定义为在当前文件夹，该文件夹的父文件夹中进行搜索时找到的第一个 &lt;code&gt;package.json&lt;/code&gt; ，依此类推，直到到达node_modules文件夹或卷根为止。</target>
        </trans-unit>
        <trans-unit id="2b7b61be8fe480e6e6c7b99bd03833436cc52bb9" translate="yes" xml:space="preserve">
          <source>The nearest parent &lt;code&gt;package.json&lt;/code&gt; is defined as the first &lt;code&gt;package.json&lt;/code&gt; found when searching in the current folder, that folder&amp;rsquo;s parent, and so on up until the root of the volume is reached.</source>
          <target state="translated">最接近的父 &lt;code&gt;package.json&lt;/code&gt; 定义为在当前文件夹，该文件夹的父文件夹中搜索时找到的第一个 &lt;code&gt;package.json&lt;/code&gt; ，依此类推，直到到达卷的根为止。</target>
        </trans-unit>
        <trans-unit id="47af3d50d7c8bfe981c9b403f0861c45f375cb81" translate="yes" xml:space="preserve">
          <source>The new commands can then be used from within the REPL instance:</source>
          <target state="translated">然后可以在 REPL 实例中使用新命令。</target>
        </trans-unit>
        <trans-unit id="104e36e764dd9d0fb07447c31dcb417f6bea33e2" translate="yes" xml:space="preserve">
          <source>The new settings will not become effective until the &lt;code&gt;SETTINGS&lt;/code&gt; acknowledgment is received and the &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted. It is possible to send multiple &lt;code&gt;SETTINGS&lt;/code&gt; frames while acknowledgment is still pending.</source>
          <target state="translated">在接收到 &lt;code&gt;SETTINGS&lt;/code&gt; 确认并发出 &lt;code&gt;'localSettings'&lt;/code&gt; 事件之前，新设置将不会生效。在确认仍未完成的情况下，可以发送多个 &lt;code&gt;SETTINGS&lt;/code&gt; 帧。</target>
        </trans-unit>
        <trans-unit id="010aa406081834f99277106d0000f1552dc8125a" translate="yes" xml:space="preserve">
          <source>The new stream class must then implement one or more specific methods, depending on the type of stream being created, as detailed in the chart below:</source>
          <target state="translated">然后,新的流类必须根据正在创建的流的类型,实现一个或多个特定的方法,详见下图。</target>
        </trans-unit>
        <trans-unit id="bc4c6fb13126abaa4bc413e810cd00b6053f1ddd" translate="yes" xml:space="preserve">
          <source>The newly created function is not automatically visible from script after this call. Instead, a property must be explicitly set on any object that is visible to JavaScript, in order for the function to be accessible from script.</source>
          <target state="translated">新创建的函数在此调用后不会自动从脚本中可见。相反,必须在任何对JavaScript可见的对象上显式地设置一个属性,以使函数能够从脚本中被访问。</target>
        </trans-unit>
        <trans-unit id="27b9c478ea5e686312bd5f0cfbbb2ae1c6a164ca" translate="yes" xml:space="preserve">
          <source>The newly created socket can be either a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint, depending on what it &lt;a href=&quot;#net_socket_connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">新创建的套接字可以是TCP套接字，也可以是流式&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;终结点，具体取决于它的&lt;a href=&quot;#net_socket_connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; 所&lt;/a&gt;针对的对象。</target>
        </trans-unit>
        <trans-unit id="762b7516f06acc39fd303e873da3eae3984842c2" translate="yes" xml:space="preserve">
          <source>The next difference is the signature for the &lt;code&gt;Init&lt;/code&gt; method. For a N-API module it is as follows:</source>
          <target state="translated">下一个区别是 &lt;code&gt;Init&lt;/code&gt; 方法的签名。对于N-API模块，如下所示：</target>
        </trans-unit>
        <trans-unit id="51f47c77d786656094e158322f5944ac67692ac6" translate="yes" xml:space="preserve">
          <source>The next program will check for the stats of the given paths:</source>
          <target state="translated">下一个程序将检查给定路径的统计信息。</target>
        </trans-unit>
        <trans-unit id="b79627d819fdf1ba438e5679d480db0ea9d3d58f" translate="yes" xml:space="preserve">
          <source>The number of &lt;code&gt;QuicSession&lt;/code&gt; instances rejected due to server busy status.</source>
          <target state="translated">由于服务器繁忙状态而被拒绝的 &lt;code&gt;QuicSession&lt;/code&gt; 实例数。</target>
        </trans-unit>
        <trans-unit id="00dcde3350568519617569602e42884411ad01fd" translate="yes" xml:space="preserve">
          <source>The number of bits to generate for the HMAC key. If omitted, the length will be determined by the hash algorithm used. This is optional and should be omitted for most cases.</source>
          <target state="translated">HMAC密钥要生成的位数。如果省略,长度将由使用的散列算法决定。这是可选的,在大多数情况下应省略。</target>
        </trans-unit>
        <trans-unit id="707e00467eb1024ad6a41e2d7fd76cd835c436ed" translate="yes" xml:space="preserve">
          <source>The number of blocks allocated for this file.</source>
          <target state="translated">为该文件分配的块数。</target>
        </trans-unit>
        <trans-unit id="d6e9890c34bed9796b4ceb97682790f3922219b9" translate="yes" xml:space="preserve">
          <source>The number of bytes received by this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicSocket&lt;/code&gt; 接收的字节数。</target>
        </trans-unit>
        <trans-unit id="451b27e016cce4c0bc96b5118b87e6d20a59ba4d" translate="yes" xml:space="preserve">
          <source>The number of bytes sent by this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicSocket&lt;/code&gt; 发送的字节数。</target>
        </trans-unit>
        <trans-unit id="90a2027f23d852082230368e8e225b949453c0da" translate="yes" xml:space="preserve">
          <source>The number of bytes that have been read so far.</source>
          <target state="translated">迄今已读取的字节数。</target>
        </trans-unit>
        <trans-unit id="95a86f54b7a1f2469bc5f5667c33947867d66d1f" translate="yes" xml:space="preserve">
          <source>The number of bytes written so far. Does not include data that is still queued for writing.</source>
          <target state="translated">迄今为止写入的字节数。不包括仍在等待写入的数据。</target>
        </trans-unit>
        <trans-unit id="e0e41268616721f1fca89739ee51de57404e4fb1" translate="yes" xml:space="preserve">
          <source>The number of client &lt;code&gt;QuicSession&lt;/code&gt; instances that have been associated with this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">与此 &lt;code&gt;QuicSocket&lt;/code&gt; 关联的客户端 &lt;code&gt;QuicSession&lt;/code&gt; 实例的数量。</target>
        </trans-unit>
        <trans-unit id="83db9368d81b7eaf94d6048ec32eddfadddf804d" translate="yes" xml:space="preserve">
          <source>The number of concurrent connections on the server.</source>
          <target state="translated">服务器上的并发连接数。</target>
        </trans-unit>
        <trans-unit id="b897cc45a35e5f5bff42b399899953585ae33b16" translate="yes" xml:space="preserve">
          <source>The number of frames captured by the stack trace is bounded by the smaller of &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; or the number of available frames on the current event loop tick.</source>
          <target state="translated">堆栈跟踪捕获的帧数由 &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; 中的较小者或当前事件循环刻度上的可用帧数限制。</target>
        </trans-unit>
        <trans-unit id="6549fcc0f129140e66512a1427b7f4614faf5cbc" translate="yes" xml:space="preserve">
          <source>The number of hard-links that exist for the file.</source>
          <target state="translated">文件存在的硬链接数量。</target>
        </trans-unit>
        <trans-unit id="78bc2183886d295e0dfc4c9a45139251fa0866f5" translate="yes" xml:space="preserve">
          <source>The number of iterations the PBKDF2 algorithm should make when deriving bits.</source>
          <target state="translated">PBKDF2算法在推导位时应进行的迭代次数。</target>
        </trans-unit>
        <trans-unit id="75ea2a989eab02b42949109ba5ea2b821d783082" translate="yes" xml:space="preserve">
          <source>The number of key update operations that have occurred.</source>
          <target state="translated">已发生的密钥更新操作次数。</target>
        </trans-unit>
        <trans-unit id="666280d68d6a792c31cb2051481e2a0a83229e9e" translate="yes" xml:space="preserve">
          <source>The number of lost-packet retransmissions that have been performed on this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">在此 &lt;code&gt;QuicSession&lt;/code&gt; 上执行的丢失数据包重传的次数。</target>
        </trans-unit>
        <trans-unit id="adda133b3952499899f6f3919881bfa0307c4d10" translate="yes" xml:space="preserve">
          <source>The number of milliseconds of inactivity a server needs to wait for additional incoming data, after it has finished writing the last response, before a socket will be destroyed. If the server receives new data before the keep-alive timeout has fired, it will reset the regular inactivity timeout, i.e., &lt;a href=&quot;#http_server_timeout&quot;&gt;&lt;code&gt;server.timeout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在完成写入最后一个响应之后，在销毁套接字之前，服务器需要等待不活动的毫秒数，以等待其他传入数据。如果服务器在触发保持活动超时之前收到新数据，它将重置常规的不活动超时，即&lt;a href=&quot;#http_server_timeout&quot;&gt; &lt;code&gt;server.timeout&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="03ad62fcca99d252c1246acfaf3c6b73cd75231d" translate="yes" xml:space="preserve">
          <source>The number of milliseconds of inactivity before a socket is presumed to have timed out.</source>
          <target state="translated">推定一个套接字超时前的不活动毫秒数。</target>
        </trans-unit>
        <trans-unit id="3977e5c0af88431e5b4e33b9e2dbc4b5de0879ae" translate="yes" xml:space="preserve">
          <source>The number of packets received by this &lt;code&gt;QuicSocket&lt;/code&gt; that have been ignored.</source>
          <target state="translated">此 &lt;code&gt;QuicSocket&lt;/code&gt; 收到的已被忽略的数据包数。</target>
        </trans-unit>
        <trans-unit id="88dfd671fda640fb284dea057c9fc3bda63c3cd5" translate="yes" xml:space="preserve">
          <source>The number of packets sent by this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicSocket&lt;/code&gt; 发送的数据包数。</target>
        </trans-unit>
        <trans-unit id="57c2ce7c604c61cc73961e484de47af48608ac24" translate="yes" xml:space="preserve">
          <source>The number of packets successfully received by this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicSocket&lt;/code&gt; 成功接收的数据包数。</target>
        </trans-unit>
        <trans-unit id="da8ac587e867ec7b873ba123e43810a9f2c4b30d" translate="yes" xml:space="preserve">
          <source>The number of retransmissions caused by delayed acknowledgments.</source>
          <target state="translated">因延迟确认而造成的重传次数。</target>
        </trans-unit>
        <trans-unit id="137be968007ab2546a36979ca3b6cb65cd52e77a" translate="yes" xml:space="preserve">
          <source>The number of server &lt;code&gt;QuicSession&lt;/code&gt; instances that have been associated with this &lt;code&gt;QuicSocket&lt;/code&gt;.</source>
          <target state="translated">与此 &lt;code&gt;QuicSocket&lt;/code&gt; 关联的服务器 &lt;code&gt;QuicSession&lt;/code&gt; 实例的数量。</target>
        </trans-unit>
        <trans-unit id="86e7462480a7d0627eea84f3d1a614b44db3e9d9" translate="yes" xml:space="preserve">
          <source>The number of stateless resets that have been sent.</source>
          <target state="translated">发出的无状态重置次数。</target>
        </trans-unit>
        <trans-unit id="e172dc32b60a311b65c6eb277f6b79d272de8ad1" translate="yes" xml:space="preserve">
          <source>The number of streams created on a single HTTP/2 session reached the maximum limit.</source>
          <target state="translated">单个HTTP/2会话上创建的流的数量达到了最大限制。</target>
        </trans-unit>
        <trans-unit id="485571648f798cc1149fe3dc79decc281b4c7db7" translate="yes" xml:space="preserve">
          <source>The number of times the event loop delay exceeded the maximum 1 hour event loop delay threshold.</source>
          <target state="translated">事件循环延迟超过最大1小时事件循环延迟阈值的次数。</target>
        </trans-unit>
        <trans-unit id="ac86f8862e149dadb72b2dbeec6eb8381b8ba41a" translate="yes" xml:space="preserve">
          <source>The numeric group identifier of the group that owns the file (POSIX).</source>
          <target state="translated">拥有文件的组的数字组标识符(POSIX)。</target>
        </trans-unit>
        <trans-unit id="0515e305805e98af62a3f52bc545b427528c9133" translate="yes" xml:space="preserve">
          <source>The numeric identifier of the &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; 的数字标识符。</target>
        </trans-unit>
        <trans-unit id="95fbb303d7117ac0cc3ddd8c21e8aa6323d739de" translate="yes" xml:space="preserve">
          <source>The numeric identifier of the device containing the file.</source>
          <target state="translated">包含文件的设备的数字标识符。</target>
        </trans-unit>
        <trans-unit id="5bcfd36761a1de493eeb09cab611d6b7581ca7fe" translate="yes" xml:space="preserve">
          <source>The numeric representation of the local port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="translated">本地端口的数字表示。例如， &lt;code&gt;80&lt;/code&gt; 或 &lt;code&gt;21&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="042883a8dd9e1f35f72278a7a8626cb40d0978ea" translate="yes" xml:space="preserve">
          <source>The numeric representation of the remote port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="translated">远程端口的数字表示。例如， &lt;code&gt;80&lt;/code&gt; 或 &lt;code&gt;21&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b62dd787bc222e91a4a0ed4bf6ba392d5a6fb778" translate="yes" xml:space="preserve">
          <source>The numeric stream identifier of this &lt;code&gt;Http2Stream&lt;/code&gt; instance. Set to &lt;code&gt;undefined&lt;/code&gt; if the stream identifier has not yet been assigned.</source>
          <target state="translated">此 &lt;code&gt;Http2Stream&lt;/code&gt; 实例的数字流标识符。如果尚未分配流标识符，则设置为 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa8f383702a5ceae99ce4b389c67ad72755ba3f7" translate="yes" xml:space="preserve">
          <source>The numeric user identifier of the user that owns the file (POSIX).</source>
          <target state="translated">拥有文件的用户的数字用户标识符(POSIX)。</target>
        </trans-unit>
        <trans-unit id="d4d406b789ddb9b5e19c751f22e7d2dcb831b944" translate="yes" xml:space="preserve">
          <source>The object can also be an ArrayBuffer and CryptoKey.</source>
          <target state="translated">该对象也可以是一个ArrayBuffer和CryptoKey。</target>
        </trans-unit>
        <trans-unit id="5cb1b68058d104a308062e11d73d1e40f866b4ff" translate="yes" xml:space="preserve">
          <source>The object no longer accidentally exposes native C++ bindings.</source>
          <target state="translated">该对象不再意外暴露原生C++绑定。</target>
        </trans-unit>
        <trans-unit id="9383b10ddf25c0ce6d97c93198a1bf00d5916ca1" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;querystring.parse()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.parse()&lt;/code&gt; 方法返回的对象在原型&lt;em&gt;上并不&lt;/em&gt;继承自JavaScript &lt;code&gt;Object&lt;/code&gt; 。这意味着 &lt;code&gt;obj.toString()&lt;/code&gt; 典型的 &lt;code&gt;Object&lt;/code&gt; 方法，例如obj.toString（）， &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt; 和其他方法，这些方法&lt;em&gt;将不起作用&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="be819bdae9121513238d1f9a8e195544167c627a" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;response.getHeaders()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="translated">由 &lt;code&gt;response.getHeaders()&lt;/code&gt; 方法返回的对象在原型&lt;em&gt;上并不&lt;/em&gt;继承自JavaScript &lt;code&gt;Object&lt;/code&gt; 。这意味着 &lt;code&gt;obj.toString()&lt;/code&gt; 典型的 &lt;code&gt;Object&lt;/code&gt; 方法，例如obj.toString（）， &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt; 和其他方法，这些方法&lt;em&gt;将不起作用&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4ebb203e4256fb19d4ef99599ca9b09d60bab677" translate="yes" xml:space="preserve">
          <source>The object that acts as the namespace for all W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt; related functionality. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla Developer Network&lt;/a&gt; for usage and compatibility.</source>
          <target state="translated">充当所有W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt;相关功能的名称空间的对象。有关用法和兼容性，请参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla开发人员网络&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74489c6bc5e2589b31724813aed93341ee4501d7" translate="yes" xml:space="preserve">
          <source>The object will contain the properties:</source>
          <target state="translated">该对象将包含属性。</target>
        </trans-unit>
        <trans-unit id="b541c74cc18aaa314b7c832f7d31793b35808668" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="translated">此处列出的对象特定于Node.js。有些&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;内置对象&lt;/a&gt;是JavaScript语言本身的一部分，也可以全局访问。</target>
        </trans-unit>
        <trans-unit id="a5307f8ae4e7b8daeba7438d364931e5ea281096" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are a number of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="translated">此处列出的对象特定于Node.js。JavaScript语言本身有很多&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;内置对象&lt;/a&gt;，这些对象也可以全局访问。</target>
        </trans-unit>
        <trans-unit id="499501b23d67779dbab01a6a26119c1c65a4262b" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt;&lt;code&gt;.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">无法通过 &lt;code&gt;.setupMaster()&lt;/code&gt; 设置的worker的唯一属性是传递给&lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt; &lt;code&gt;.fork()&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc78f21c4e5c2db90b51724d6195216ddadfbc62" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;code&gt;.fork()&lt;/code&gt;.</source>
          <target state="translated">无法通过 &lt;code&gt;.setupMaster()&lt;/code&gt; 设置的worker的唯一属性是传递给 &lt;code&gt;.fork()&lt;/code&gt; 的 &lt;code&gt;env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c18120e27e4c6e292bcb271ec4406958e025cda8" translate="yes" xml:space="preserve">
          <source>The only way to know for sure that the datagram has been sent is by using a &lt;code&gt;callback&lt;/code&gt;. If an error occurs and a &lt;code&gt;callback&lt;/code&gt; is given, the error will be passed as the first argument to the &lt;code&gt;callback&lt;/code&gt;. If a &lt;code&gt;callback&lt;/code&gt; is not given, the error is emitted as an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;socket&lt;/code&gt; object.</source>
          <target state="translated">唯一确定已发送数据报的方法是使用 &lt;code&gt;callback&lt;/code&gt; 。如果发生错误并给出了 &lt;code&gt;callback&lt;/code&gt; ，则该错误将作为第一个参数传递给 &lt;code&gt;callback&lt;/code&gt; 。如果未提供 &lt;code&gt;callback&lt;/code&gt; ，则错误将作为 &lt;code&gt;socket&lt;/code&gt; 对象上的 &lt;code&gt;'error'&lt;/code&gt; 事件发出。</target>
        </trans-unit>
        <trans-unit id="7647e89cb4fdb8b632085740a5be4e8b940e567a" translate="yes" xml:space="preserve">
          <source>The operating system CPU architecture for which the Node.js binary was compiled. Possible values are: &lt;code&gt;'arm'&lt;/code&gt;, &lt;code&gt;'arm64'&lt;/code&gt;, &lt;code&gt;'ia32'&lt;/code&gt;, &lt;code&gt;'mips'&lt;/code&gt;,&lt;code&gt;'mipsel'&lt;/code&gt;, &lt;code&gt;'ppc'&lt;/code&gt;, &lt;code&gt;'ppc64'&lt;/code&gt;, &lt;code&gt;'s390'&lt;/code&gt;, &lt;code&gt;'s390x'&lt;/code&gt;, &lt;code&gt;'x32'&lt;/code&gt;, and &lt;code&gt;'x64'&lt;/code&gt;.</source>
          <target state="translated">为其编译Node.js二进制文件的操作系统CPU体系结构。可能的值为： &lt;code&gt;'arm'&lt;/code&gt; ， &lt;code&gt;'arm64'&lt;/code&gt; ， &lt;code&gt;'ia32'&lt;/code&gt; ， &lt;code&gt;'mips'&lt;/code&gt; ， &lt;code&gt;'mipsel'&lt;/code&gt; ， &lt;code&gt;'ppc'&lt;/code&gt; ， &lt;code&gt;'ppc64'&lt;/code&gt; ， &lt;code&gt;'s390'&lt;/code&gt; ， &lt;code&gt;'s390x'&lt;/code&gt; ， &lt;code&gt;'x32'&lt;/code&gt; 和 &lt;code&gt;'x64'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="576168f18bf6a9c771bad8bf0ef707c41bacf3dc" translate="yes" xml:space="preserve">
          <source>The operating system-specific end-of-line marker.</source>
          <target state="translated">操作系统特有的线端标记。</target>
        </trans-unit>
        <trans-unit id="7ad3e7e145c0e7190f2d6920ff4570771b7cd38d" translate="yes" xml:space="preserve">
          <source>The opposite of &lt;a href=&quot;#domain_domain_add_emitter&quot;&gt;&lt;code&gt;domain.add(emitter)&lt;/code&gt;&lt;/a&gt;. Removes domain handling from the specified emitter.</source>
          <target state="translated">与&lt;a href=&quot;#domain_domain_add_emitter&quot;&gt; &lt;code&gt;domain.add(emitter)&lt;/code&gt; &lt;/a&gt;相反。从指定的发射器中删除域处理。</target>
        </trans-unit>
        <trans-unit id="caab31fb22afb4b240d3935cb5134e9f4f33d038" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; arguments specify a memory range within the &lt;code&gt;arrayBuffer&lt;/code&gt; that will be shared by the &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">可选的 &lt;code&gt;byteOffset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 参数指定 &lt;code&gt;arrayBuffer&lt;/code&gt; 中将由 &lt;code&gt;Buffer&lt;/code&gt; 共享的内存范围。</target>
        </trans-unit>
        <trans-unit id="f4cce0bb94cb39d36b419142e4a7c61c1067e805" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; argument can be used to replace the logging function with a different function that doesn't have any initialization or unnecessary wrapping.</source>
          <target state="translated">可选的 &lt;code&gt;callback&lt;/code&gt; 参数可用于将日志记录功能替换为没有任何初始化或不必要包装的其他函数。</target>
        </trans-unit>
        <trans-unit id="8b96aca949c2dfad90f34208e151d92d5c4e3782" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; is a function that is invoked after the message is sent but before the child may have received it. The function is called with a single argument: &lt;code&gt;null&lt;/code&gt; on success, or an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object on failure.</source>
          <target state="translated">可选的 &lt;code&gt;callback&lt;/code&gt; 函数是在消息发送之后但子级可能尚未接收到消息之前调用的函数。使用单个参数调用该函数：成功时为 &lt;code&gt;null&lt;/code&gt; ，失败时为&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="0f4bda021a4230b873e23262d38a21e96fd815c9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">可选的 &lt;code&gt;callback&lt;/code&gt; 参数将作为&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;事件的一次性侦听器添加。</target>
        </trans-unit>
        <trans-unit id="4f75dfbd1ccb81dcb45cc7787f70bf228fab77d5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">可选的 &lt;code&gt;callback&lt;/code&gt; 参数将添加为&lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt;事件的一次性侦听器。</target>
        </trans-unit>
        <trans-unit id="7a388a3c8ef1c6891f4bc45f8cf75c4ca428eb38" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out - this may not be immediately.</source>
          <target state="translated">最终将数据写出后，将执行可选的 &lt;code&gt;callback&lt;/code&gt; 参数-可能不会立即执行。</target>
        </trans-unit>
        <trans-unit id="3f398da22b9a537a80ef95f6587773ea48b8d1eb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out, which may not be immediately.</source>
          <target state="translated">可选的 &lt;code&gt;callback&lt;/code&gt; 参数将在最终写出数据时执行，该参数可能不会立即写出。</target>
        </trans-unit>
        <trans-unit id="4848a2877fc4fdda35fdaabacb12c2f613d9bff6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;constructorOpt&lt;/code&gt; argument accepts a function. If given, all frames above &lt;code&gt;constructorOpt&lt;/code&gt;, including &lt;code&gt;constructorOpt&lt;/code&gt;, will be omitted from the generated stack trace.</source>
          <target state="translated">可选的 &lt;code&gt;constructorOpt&lt;/code&gt; 参数接受一个函数。如果给定的，上述所有的帧 &lt;code&gt;constructorOpt&lt;/code&gt; ，包括 &lt;code&gt;constructorOpt&lt;/code&gt; ，将从生成的堆栈跟踪被省略。</target>
        </trans-unit>
        <trans-unit id="1ad586a6a1c5973d95690ca8fdc184bb4c8b9ce9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;endMark&lt;/code&gt; argument must identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline or any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. &lt;code&gt;endMark&lt;/code&gt; will be &lt;code&gt;performance.now()&lt;/code&gt; if no parameter is passed, otherwise if the named &lt;code&gt;endMark&lt;/code&gt; does not exist, an error will be thrown.</source>
          <target state="translated">可选的 &lt;code&gt;endMark&lt;/code&gt; 参数必须标识Performance Timeline中的任何&lt;em&gt;现有&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; 或 &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; 类提供的任何时间戳属性。如果未传递任何参数，则 &lt;code&gt;endMark&lt;/code&gt; 将为 &lt;code&gt;performance.now()&lt;/code&gt; ；否则，如果命名的 &lt;code&gt;endMark&lt;/code&gt; 不存在，则将引发错误。</target>
        </trans-unit>
        <trans-unit id="ebd4f60ba39ba1f7450156da76a6991f33b60f2b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;flags&lt;/code&gt; argument uses &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; by default. The &lt;code&gt;flags&lt;/code&gt; is a bit field taking one of or a mix of the following flags (defined in &lt;code&gt;crypto.constants&lt;/code&gt;):</source>
          <target state="translated">默认情况下，可选的 &lt;code&gt;flags&lt;/code&gt; 参数使用 &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; 。这些 &lt;code&gt;flags&lt;/code&gt; 是一个位字段，其中包含以下标志之一（或在 &lt;code&gt;crypto.constants&lt;/code&gt; 中定义）的混合：</target>
        </trans-unit>
        <trans-unit id="cc9f65c30553afbd1b4d82c484f88aa304441ee3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given fd. If the &lt;code&gt;statCheck&lt;/code&gt; function is provided, the &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; method will perform an &lt;code&gt;fs.fstat()&lt;/code&gt; call to collect details on the provided file descriptor.</source>
          <target state="translated">可以指定可选的 &lt;code&gt;options.statCheck&lt;/code&gt; 函数，以使用户代码有机会基于给定fd 的 &lt;code&gt;fs.Stat&lt;/code&gt; 详细信息设置其他内容标头。如果提供了 &lt;code&gt;statCheck&lt;/code&gt; 函数，则 &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; 方法将执行 &lt;code&gt;fs.fstat()&lt;/code&gt; 调用以收集有关所提供文件描述符的详细信息。</target>
        </trans-unit>
        <trans-unit id="b8ca99509b25a6ab5ee70308bafe39a1b71f3d06" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given file:</source>
          <target state="translated">可以指定可选的 &lt;code&gt;options.statCheck&lt;/code&gt; 函数，以使用户代码有机会基于给定文件的 &lt;code&gt;fs.Stat&lt;/code&gt; 详细信息设置其他内容标头：</target>
        </trans-unit>
        <trans-unit id="30b397372595487a1e26df98289fea04b5b45c5e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定用于传递给回调的文件名的字符编码。如果 &lt;code&gt;encoding&lt;/code&gt; 设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，则返回的文件名将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象传递。</target>
        </trans-unit>
        <trans-unit id="72091fa8c95571c209adee473c28da126c9baae6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定用于返回的文件名的字符编码。如果 &lt;code&gt;encoding&lt;/code&gt; 设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，则返回的文件名将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象传递。</target>
        </trans-unit>
        <trans-unit id="1a3104057b5c38fd9e4bdac45532ce193dd2ed26" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定用于文件名的字符编码。如果 &lt;code&gt;encoding&lt;/code&gt; 设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，则返回的文件名将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象传递。</target>
        </trans-unit>
        <trans-unit id="3fb2522fc8cd80845e2a3e2842ca468e7ddb1fc0" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定用于传递给回调的链接路径的字符编码。如果将 &lt;code&gt;encoding&lt;/code&gt; 设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，则返回的链接路径将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象传递。</target>
        </trans-unit>
        <trans-unit id="bc5b6bb3218a1bc4526850c82e33474df9261f0f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定用于返回的链接路径的字符编码。如果将 &lt;code&gt;encoding&lt;/code&gt; 设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，则返回的链接路径将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象传递。</target>
        </trans-unit>
        <trans-unit id="4eb7ec41225ab0c4c453df7c72a1c959224af868" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定用于传递给回调的路径的字符编码。如果将 &lt;code&gt;encoding&lt;/code&gt; 设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，则返回的路径将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象传递。</target>
        </trans-unit>
        <trans-unit id="cbb0aa1d9d2894d118c49c7e7622ffb29c1d85fd" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定用于返回路径的字符编码。如果将 &lt;code&gt;encoding&lt;/code&gt; 设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，则返回的路径将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象传递。</target>
        </trans-unit>
        <trans-unit id="e5a60b46a69ed6136f940f53c21b10d9760164ad" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定用于路径的字符编码。如果将 &lt;code&gt;encoding&lt;/code&gt; 设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，则返回的路径将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象传递。</target>
        </trans-unit>
        <trans-unit id="e9b1ce0f8bd5bffe9b99b0262eb3a242c5e14124" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use.</source>
          <target state="translated">可选 &lt;code&gt;options&lt;/code&gt; 参数可以是指定编码的字符串，也可以是具有 &lt;code&gt;encoding&lt;/code&gt; 属性的对象，该对象指定要使用的字符编码。</target>
        </trans-unit>
        <trans-unit id="aadca4acdf449aec7197e7dc17a104a173c63dbb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying &lt;code&gt;mode&lt;/code&gt; (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent directories should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定 &lt;code&gt;mode&lt;/code&gt; （权限和粘性位）的整数，也可以是具有 &lt;code&gt;mode&lt;/code&gt; 属性和 &lt;code&gt;recursive&lt;/code&gt; 属性的对象，该对象指示是否应创建父目录。当 &lt;code&gt;path&lt;/code&gt; 是存在的目录时调用 &lt;code&gt;fs.mkdir()&lt;/code&gt; 只会在 &lt;code&gt;recursive&lt;/code&gt; 为false时导致错误。</target>
        </trans-unit>
        <trans-unit id="c72f65bfd27c29868388c460c4fee4a3c00dfdde" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying &lt;code&gt;mode&lt;/code&gt; (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent directories should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定 &lt;code&gt;mode&lt;/code&gt; （权限和粘性位）的整数，也可以是具有 &lt;code&gt;mode&lt;/code&gt; 属性和 &lt;code&gt;recursive&lt;/code&gt; 属性的对象，该属性指示是否应创建父目录。当 &lt;code&gt;path&lt;/code&gt; 是存在的目录时调用 &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; 仅在 &lt;code&gt;recursive&lt;/code&gt; 为false时才导致拒绝。</target>
        </trans-unit>
        <trans-unit id="c29432448e6ca0758f3927cc455e95393816652f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定模式（权限和粘性位）的整数，也可以是具有 &lt;code&gt;mode&lt;/code&gt; 属性和 &lt;code&gt;recursive&lt;/code&gt; 属性的对象，该属性指示是否应创建父文件夹。当 &lt;code&gt;path&lt;/code&gt; 是存在的目录时调用 &lt;code&gt;fs.mkdir()&lt;/code&gt; 只会在 &lt;code&gt;recursive&lt;/code&gt; 为false 时导致错误。</target>
        </trans-unit>
        <trans-unit id="fe44a69d963c148c4578bad831ce5ae5a6ff0b73" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数可以是指定模式（权限和粘性位）的整数，也可以是具有 &lt;code&gt;mode&lt;/code&gt; 属性和 &lt;code&gt;recursive&lt;/code&gt; 属性的对象，该对象指示是否应创建父文件夹。当 &lt;code&gt;path&lt;/code&gt; 是存在的目录时调用 &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; 仅在 &lt;code&gt;recursive&lt;/code&gt; 为false 时才导致拒绝。</target>
        </trans-unit>
        <trans-unit id="8df1775ddf99a0878d244350e8f9f93ec0727826" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument controls stream behavior. For XOF hash functions such as &lt;code&gt;'shake256'&lt;/code&gt;, the &lt;code&gt;outputLength&lt;/code&gt; option can be used to specify the desired output length in bytes.</source>
          <target state="translated">可选的 &lt;code&gt;options&lt;/code&gt; 参数控制流的行为。对于XOF散列函数（例如 &lt;code&gt;'shake256'&lt;/code&gt; )，可以使用 &lt;code&gt;outputLength&lt;/code&gt; 选项指定所需的输出长度（以字节为单位）。</target>
        </trans-unit>
        <trans-unit id="261827080f081a265d9518c196a9756632d4c999" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;sendHandle&lt;/code&gt; argument that may be passed to &lt;code&gt;subprocess.send()&lt;/code&gt; is for passing a TCP server or socket object to the child process. The child will receive the object as the second argument passed to the callback function registered on the &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Any data that is received and buffered in the socket will not be sent to the child.</source>
          <target state="translated">可以传递给 &lt;code&gt;sendHandle&lt;/code&gt; &lt;code&gt;subprocess.send()&lt;/code&gt; 的可选sendHandle参数用于将TCP服务器或套接字对象传递给子进程。子级将接收该对象作为传递给在&lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt;事件上注册的回调函数的第二个参数。套接字中接收和缓冲的任何数据都不会发送给子级。</target>
        </trans-unit>
        <trans-unit id="21776c2a95a91147668e079bc279b294e52498a6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;size&lt;/code&gt; argument specifies a specific number of bytes to read. If &lt;code&gt;size&lt;/code&gt; bytes are not available to be read, &lt;code&gt;null&lt;/code&gt; will be returned &lt;em&gt;unless&lt;/em&gt; the stream has ended, in which case all of the data remaining in the internal buffer will be returned.</source>
          <target state="translated">可选的 &lt;code&gt;size&lt;/code&gt; 参数指定要读取的特定字节数。如果不能读取 &lt;code&gt;size&lt;/code&gt; 字节，则&lt;em&gt;除非&lt;/em&gt;流已结束，&lt;em&gt;否则&lt;/em&gt;将返回 &lt;code&gt;null&lt;/code&gt; ，在这种情况下，将返回内部缓冲区中剩余的所有数据。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7dcc1ff991ba74f3e2341e794b5bd2a7209b9bd5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;targetStart&lt;/code&gt;, &lt;code&gt;targetEnd&lt;/code&gt;, &lt;code&gt;sourceStart&lt;/code&gt;, and &lt;code&gt;sourceEnd&lt;/code&gt; arguments can be used to limit the comparison to specific ranges within &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; respectively.</source>
          <target state="translated">可选的 &lt;code&gt;targetStart&lt;/code&gt; ， &lt;code&gt;targetEnd&lt;/code&gt; ， &lt;code&gt;sourceStart&lt;/code&gt; 和 &lt;code&gt;sourceEnd&lt;/code&gt; 参数可用于将比较分别限制为 &lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;buf&lt;/code&gt; 内的特定范围。</target>
        </trans-unit>
        <trans-unit id="9ae334afbff89ea524e6a92b60e3ba277d8fe499" translate="yes" xml:space="preserve">
          <source>The optional length in bits of the DSA divisor.</source>
          <target state="translated">DSA除数的可选长度,以比特为单位。</target>
        </trans-unit>
        <trans-unit id="50f2a22b0119c9c0ee62a594dab9c340c71fcf3f" translate="yes" xml:space="preserve">
          <source>The optional number of bits in the HMAC key. This is optional and should be omitted for most cases.</source>
          <target state="translated">HMAC密钥中可选的位数。这是可选的,在大多数情况下应该省略。</target>
        </trans-unit>
        <trans-unit id="de8fd304a1c7493a27d13d17ca2a7665914145e8" translate="yes" xml:space="preserve">
          <source>The optional returned reference is initially a weak reference, meaning it has a reference count of 0. Typically this reference count would be incremented temporarily during async operations that require the instance to remain valid.</source>
          <target state="translated">可选返回的引用最初是一个弱引用,这意味着它的引用计数为0,通常这个引用计数会在需要实例保持有效的异步操作中临时增加。</target>
        </trans-unit>
        <trans-unit id="95012178c5c225ea89ef66f257a490e5add9d4a7" translate="yes" xml:space="preserve">
          <source>The options argument may include an AbortSignal to abort an ongoing readFile request.</source>
          <target state="translated">选项参数可能包括一个AbortSignal,用于中止正在进行的读文件请求。</target>
        </trans-unit>
        <trans-unit id="0d065929bd052704ead38211ed19949b20dc647b" translate="yes" xml:space="preserve">
          <source>The options argument may include an AbortSignal to abort an ongoing writeFile request.</source>
          <target state="translated">选项参数可能包括一个AbortSignal,用于中止正在进行的writeFile请求。</target>
        </trans-unit>
        <trans-unit id="2bf5d71ef6bb11c383df71dca6fed4c4d1e8880f" translate="yes" xml:space="preserve">
          <source>The output of running this script is:</source>
          <target state="translated">运行这个脚本的输出是:</target>
        </trans-unit>
        <trans-unit id="45989adee27623dee9b58303d643cfed64b9aa3e" translate="yes" xml:space="preserve">
          <source>The owner may read, write and execute the file.</source>
          <target state="translated">主人可以读取、写入和执行文件。</target>
        </trans-unit>
        <trans-unit id="517ac29bd131c47e197bd8fc05c9d28ca40c950c" translate="yes" xml:space="preserve">
          <source>The package has other packages that depend on it, and the end user might install both this package and those other packages. For example a &lt;code&gt;utilities&lt;/code&gt; package is used directly in an application, and a &lt;code&gt;utilities-plus&lt;/code&gt; package adds a few more functions to &lt;code&gt;utilities&lt;/code&gt;. Because the wrapper exports underlying CommonJS files, it doesn&amp;rsquo;t matter if &lt;code&gt;utilities-plus&lt;/code&gt; is written in CommonJS or ES module syntax; it will work either way.</source>
          <target state="translated">该程序包还有其他依赖于它的程序包，最终用户可能会同时安装此程序包和那些其他程序包。例如，一个 &lt;code&gt;utilities&lt;/code&gt; 包直接用在一个应用程序和一个 &lt;code&gt;utilities-plus&lt;/code&gt; 包增加了一些更多的功能到 &lt;code&gt;utilities&lt;/code&gt; 。由于包装程序会导出底层的CommonJS文件，因此，Utility &lt;code&gt;utilities-plus&lt;/code&gt; 是用CommonJS还是ES模块语法编写的都没有关系。它将以任何一种方式工作。</target>
        </trans-unit>
        <trans-unit id="3c7c3379f9a3a1dd43b0b8ecadf6bccf074d2619" translate="yes" xml:space="preserve">
          <source>The package is currently written in CommonJS and the author would prefer not to refactor it into ES module syntax, but wishes to provide named exports for ES module consumers.</source>
          <target state="translated">该包目前是用CommonJS编写的,作者不希望将其重构为ES模块语法,但希望为ES模块消费者提供命名的导出。</target>
        </trans-unit>
        <trans-unit id="31b0024acb48a149085084509c8a806870ff66f8" translate="yes" xml:space="preserve">
          <source>The package is currently written in ES module syntax and the package author wants that version to be used wherever such syntax is supported.</source>
          <target state="translated">这个包目前是用ES模块语法编写的,包作者希望在支持这种语法的地方使用这个版本。</target>
        </trans-unit>
        <trans-unit id="1653061800bc7124d50604a932bd1ca7ec2660bf" translate="yes" xml:space="preserve">
          <source>The package is potentially usable in other ES module environments such as browsers.</source>
          <target state="translated">该包有可能在其他ES模块环境中使用,如浏览器。</target>
        </trans-unit>
        <trans-unit id="54d3f256e54bf6fe0ab2aa1953baa1017f5e2eb6" translate="yes" xml:space="preserve">
          <source>The package is stateless or its state can be isolated without too much difficulty.</source>
          <target state="translated">包是无状态的,或者它的状态可以被隔离,没有太大难度。</target>
        </trans-unit>
        <trans-unit id="dfbd06db2467295627871b765dc528c77dec8951" translate="yes" xml:space="preserve">
          <source>The package is unlikely to have other public packages that depend on it, or if it does, the package is stateless or has state that need not be shared between dependencies or with the overall application.</source>
          <target state="translated">该包不太可能有其他公共包依赖它,或者如果有,该包是无状态的,或者其状态不需要在依赖者之间或与整体应用程序共享。</target>
        </trans-unit>
        <trans-unit id="59c8d206740a43c94700e96a8931ad57c9ba90c5" translate="yes" xml:space="preserve">
          <source>The package is usable in both current Node.js and older versions of Node.js that lack support for ES modules.</source>
          <target state="translated">该包在当前的Node.js和缺乏ES模块支持的旧版本Node.js中都可以使用。</target>
        </trans-unit>
        <trans-unit id="b7450ca0d9ad8be5b3a960f82133a52e42f67a0c" translate="yes" xml:space="preserve">
          <source>The package is usable via both &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">该包可通过 &lt;code&gt;require&lt;/code&gt; 和 &lt;code&gt;import&lt;/code&gt; 一起使用。</target>
        </trans-unit>
        <trans-unit id="e56fadbaf7c7d71c8ec96e1cc5b81e4fbcac2193" translate="yes" xml:space="preserve">
          <source>The package main entry point, e.g. &lt;code&gt;'pkg'&lt;/code&gt; can be used by both &lt;code&gt;require&lt;/code&gt; to resolve to a CommonJS file and by &lt;code&gt;import&lt;/code&gt; to resolve to an ES module file. (And likewise for exported paths, e.g. &lt;code&gt;'pkg/feature'&lt;/code&gt;.)</source>
          <target state="translated">包主入口点（例如 &lt;code&gt;'pkg'&lt;/code&gt; 既可以用于 &lt;code&gt;require&lt;/code&gt; 解析为CommonJS文件，也可以通过 &lt;code&gt;import&lt;/code&gt; 来解析为ES模块文件。（同样对于导出的路径，例如 &lt;code&gt;'pkg/feature'&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="d03a77440027451b07d4ef43d40339d99f11570a" translate="yes" xml:space="preserve">
          <source>The package provides named exports, e.g. &lt;code&gt;import { name } from 'pkg'&lt;/code&gt; rather than &lt;code&gt;import pkg from 'pkg'; pkg.name&lt;/code&gt;.</source>
          <target state="translated">该软件包提供了命名的导出，例如 &lt;code&gt;import { name } from 'pkg'&lt;/code&gt; 而不是 &lt;code&gt;import pkg from 'pkg'; pkg.name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="705e766de26998db30b9b74945357c8783455fd0" translate="yes" xml:space="preserve">
          <source>The package scope applies not only to initial entry points (&lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt;) but also to files referenced by &lt;code&gt;import&lt;/code&gt; statements and &lt;code&gt;import()&lt;/code&gt; expressions.</source>
          <target state="translated">包范围不仅适用于初始入口点（ &lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt; ），而且适用于 &lt;code&gt;import&lt;/code&gt; 语句和 &lt;code&gt;import()&lt;/code&gt; 表达式引用的文件。</target>
        </trans-unit>
        <trans-unit id="93032b37cb39b3833c5570355d978a112bc70c06" translate="yes" xml:space="preserve">
          <source>The package stores internal state, and the package author would prefer not to refactor the package to isolate its state management. See the next section.</source>
          <target state="translated">包中存储了内部状态,包的作者不希望重构包来隔离其状态管理。请看下一节。</target>
        </trans-unit>
        <trans-unit id="f7564c3f9eff583a58e8d21cd99ee8d14688a3bf" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object can be a string now.</source>
          <target state="translated">传递的 &lt;code&gt;options&lt;/code&gt; 对象现在可以是字符串。</target>
        </trans-unit>
        <trans-unit id="b59339c89766317598c7665c33ea20dd610e99de" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object will never be modified.</source>
          <target state="translated">传递的 &lt;code&gt;options&lt;/code&gt; 对象将永远不会被修改。</target>
        </trans-unit>
        <trans-unit id="939527b58789779d9d34145343a0e6334803be84" translate="yes" xml:space="preserve">
          <source>The password and iv arguments can be an ArrayBuffer and are each limited to a maximum of 2 ** 31 - 1 bytes.</source>
          <target state="translated">密码和iv参数可以是一个ArrayBuffer,每个参数最多限制为2**31-1个字节。</target>
        </trans-unit>
        <trans-unit id="d534ec7b3822d754232fa5b3593c154f79889a25" translate="yes" xml:space="preserve">
          <source>The password and salt arguments can also be ArrayBuffer instances.</source>
          <target state="translated">密码和盐的参数也可以是ArrayBuffer实例。</target>
        </trans-unit>
        <trans-unit id="a5e1164fa9f95d40ca3c91b7e6ec1e9743cca5e2" translate="yes" xml:space="preserve">
          <source>The password argument can be an ArrayBuffer and is limited to a maximum of 2 ** 31 - 1 bytes.</source>
          <target state="translated">密码参数可以是一个ArrayBuffer,最大限制为2 **31-1个字节。</target>
        </trans-unit>
        <trans-unit id="fb2d39c4340f5b4b6c986cba1d575aa90762c3be" translate="yes" xml:space="preserve">
          <source>The path for the main script of a worker is neither an absolute path nor a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt;.</source>
          <target state="translated">工作人员主脚本的路径既不是绝对路径，也不是以 &lt;code&gt;./&lt;/code&gt; 或 &lt;code&gt;../&lt;/code&gt; 开头的相对路径。</target>
        </trans-unit>
        <trans-unit id="3a68f2ecb4bd3f38847a7eeccce766303a522feb" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is reading from as specified in the first argument to &lt;code&gt;fs.createReadStream()&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;readStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;readStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">流所读取的文件的路径，如 &lt;code&gt;fs.createReadStream()&lt;/code&gt; 的第一个参数所指定。如果 &lt;code&gt;path&lt;/code&gt; 作为字符串传递，则 &lt;code&gt;readStream.path&lt;/code&gt; 将是一个字符串。如果 &lt;code&gt;path&lt;/code&gt; 作为 &lt;code&gt;Buffer&lt;/code&gt; 传递，则 &lt;code&gt;readStream.path&lt;/code&gt; 将是 &lt;code&gt;Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3bb0d95641a2afd52bb195881c3abca28b19aa5" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is writing to as specified in the first argument to &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">流正在写入的文件的路径，如&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt;的第一个参数所指定。如果 &lt;code&gt;path&lt;/code&gt; 作为字符串传递，则 &lt;code&gt;writeStream.path&lt;/code&gt; 将是一个字符串。如果 &lt;code&gt;path&lt;/code&gt; 作为 &lt;code&gt;Buffer&lt;/code&gt; 传递，则 &lt;code&gt;writeStream.path&lt;/code&gt; 将是 &lt;code&gt;Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5303b9030ddafd814201239d3425172e5de09971" translate="yes" xml:space="preserve">
          <source>The pathname used for the main script of a worker has an unknown file extension.</source>
          <target state="translated">工人的主脚本使用的路径名有一个未知的文件扩展名。</target>
        </trans-unit>
        <trans-unit id="842995cd8000d0efb4e4627b63f283405c9de9df" translate="yes" xml:space="preserve">
          <source>The policy manifest will be used to enforce constraints on code loaded by Node.js.</source>
          <target state="translated">策略清单将用于对Node.js加载的代码实施约束。</target>
        </trans-unit>
        <trans-unit id="f37ced12d39d64c1acd89371245e9dd2d45e0ac9" translate="yes" xml:space="preserve">
          <source>The port used by Node.js's debugger when enabled.</source>
          <target state="translated">启用Node.js的调试器时使用的端口。</target>
        </trans-unit>
        <trans-unit id="dec6b7a7b66dcadd093ce17f9ff0d5581242e4cb" translate="yes" xml:space="preserve">
          <source>The port used by the Node.js debugger when enabled.</source>
          <target state="translated">启用Node.js调试器时使用的端口。</target>
        </trans-unit>
        <trans-unit id="e95b5aab3ab3fba91f054dea6c27fd9fd3c7181c" translate="yes" xml:space="preserve">
          <source>The port value can be an empty string in which case the port depends on the protocol/scheme:</source>
          <target state="translated">端口值可以是一个空字符串,在这种情况下,端口取决于协议/方案。</target>
        </trans-unit>
        <trans-unit id="35240f5bbe9b687669eb3a21a6d605183b197a00" translate="yes" xml:space="preserve">
          <source>The port value may be a number or a string containing a number in the range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt; (inclusive). Setting the value to the default port of the &lt;code&gt;URL&lt;/code&gt; objects given &lt;code&gt;protocol&lt;/code&gt; will result in the &lt;code&gt;port&lt;/code&gt; value becoming the empty string (&lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">端口值可以是数字，也可以是包含 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;65535&lt;/code&gt; （含）之间数字的字符串。该值设置为默认的端口 &lt;code&gt;URL&lt;/code&gt; 给对象 &lt;code&gt;protocol&lt;/code&gt; 将导致 &lt;code&gt;port&lt;/code&gt; 值成为空字符串（ &lt;code&gt;''&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="898d07f22023448193f5c32c21494c7cc90a1be1" translate="yes" xml:space="preserve">
          <source>The possible usages are:</source>
          <target state="translated">可能的用途是:</target>
        </trans-unit>
        <trans-unit id="495be20fbcb5125b43428178be42b36d58c99204" translate="yes" xml:space="preserve">
          <source>The preceding example uses explicit extensions &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt;. If your files use the &lt;code&gt;.js&lt;/code&gt; extension, &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; will cause such files to be treated as ES modules, just as &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; would cause them to be treated as CommonJS. See &lt;a href=&quot;#esm_enabling&quot;&gt;Enabling&lt;/a&gt;.</source>
          <target state="translated">前面的示例使用显式扩展名 &lt;code&gt;.mjs&lt;/code&gt; 和 &lt;code&gt;.cjs&lt;/code&gt; 。如果文件使用 &lt;code&gt;.js&lt;/code&gt; 扩展名，则 &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; 会将此类文件视为ES模块，就像 &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 会将其视为CommonJS一样。请参阅&lt;a href=&quot;#esm_enabling&quot;&gt;启用&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="516b367bb725dc118632a0063079984861a1c67f" translate="yes" xml:space="preserve">
          <source>The preceding module supports named imports in ES modules:</source>
          <target state="translated">前面的模块支持ES模块中的命名导入。</target>
        </trans-unit>
        <trans-unit id="f5e1752bb85ccb2347cdba3385d98029d5ceffb3" translate="yes" xml:space="preserve">
          <source>The predefined color codes are: &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt; and &lt;code&gt;yellow&lt;/code&gt;. There are also &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt; and &lt;code&gt;inverse&lt;/code&gt; codes.</source>
          <target state="translated">预定义的颜色代码是： &lt;code&gt;white&lt;/code&gt; ， &lt;code&gt;grey&lt;/code&gt; ， &lt;code&gt;black&lt;/code&gt; ， &lt;code&gt;blue&lt;/code&gt; ， &lt;code&gt;cyan&lt;/code&gt; ， &lt;code&gt;green&lt;/code&gt; ， &lt;code&gt;magenta&lt;/code&gt; ， &lt;code&gt;red&lt;/code&gt; 和 &lt;code&gt;yellow&lt;/code&gt; 。还有 &lt;code&gt;bold&lt;/code&gt; ， &lt;code&gt;italic&lt;/code&gt; ， &lt;code&gt;underline&lt;/code&gt; 和 &lt;code&gt;inverse&lt;/code&gt; 码。</target>
        </trans-unit>
        <trans-unit id="a8feec306734bdd21e98aea495e525ccece43f81" translate="yes" xml:space="preserve">
          <source>The previously undocumented &lt;code&gt;timers.active()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If re-referencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_ref&quot;&gt;&lt;code&gt;timeout.ref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="translated">以前未记录的 &lt;code&gt;timers.active()&lt;/code&gt; 已弃用。请改用公开记录的&lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt; &lt;code&gt;timeout.refresh()&lt;/code&gt; &lt;/a&gt;。如果需要重新引用超时，&lt;a href=&quot;timers#timers_timeout_ref&quot;&gt; &lt;code&gt;timeout.ref()&lt;/code&gt; &lt;/a&gt; Node.js 10开始，可以使用timeout.ref（）而不会对性能造成影响。</target>
        </trans-unit>
        <trans-unit id="8fa2c8b129174c0fc077a4918a3e4b0112acc742" translate="yes" xml:space="preserve">
          <source>The previously undocumented and &quot;private&quot; &lt;code&gt;timers._unrefActive()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If unreferencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_unref&quot;&gt;&lt;code&gt;timeout.unref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="translated">不推荐使用以前未记录的&amp;ldquo;私有&amp;rdquo; &lt;code&gt;timers._unrefActive()&lt;/code&gt; 。请改用公开记录的&lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt; &lt;code&gt;timeout.refresh()&lt;/code&gt; &lt;/a&gt;。如果需要取消引用超时，&lt;a href=&quot;timers#timers_timeout_unref&quot;&gt; &lt;code&gt;timeout.unref()&lt;/code&gt; &lt;/a&gt; Node.js 10开始，可以使用timeout.unref（）而不会对性能造成影响。</target>
        </trans-unit>
        <trans-unit id="c7e811ac507e899887eadb3b761ab472eb68ab19" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to accommodate a situation in which several small chunks are written to the stream in rapid succession. Instead of immediately forwarding them to the underlying destination, &lt;code&gt;writable.cork()&lt;/code&gt; buffers all the chunks until &lt;code&gt;writable.uncork()&lt;/code&gt; is called, which will pass them all to &lt;code&gt;writable._writev()&lt;/code&gt;, if present. This prevents a head-of-line blocking situation where data is being buffered while waiting for the first small chunk to be processed. However, use of &lt;code&gt;writable.cork()&lt;/code&gt; without implementing &lt;code&gt;writable._writev()&lt;/code&gt; may have an adverse effect on throughput.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; 的主要目的是为了适应将几个小块快速连续写入流中的情况。 &lt;code&gt;writable.cork()&lt;/code&gt; 不会立即将它们转发到底层目标，而是缓冲所有块，直到调用 &lt;code&gt;writable.uncork()&lt;/code&gt; 为止，这会将它们全部传递给 &lt;code&gt;writable._writev()&lt;/code&gt; （如果存在）。这可以防止出现行头阻塞的情况，即在等待第一个小块被处理的同时对数据进行缓冲。但是，在未实现 &lt;code&gt;writable.cork()&lt;/code&gt; 情况下使用 &lt;code&gt;writable._writev()&lt;/code&gt; 可能会对吞吐量产生不利影响。</target>
        </trans-unit>
        <trans-unit id="301d6f86720b7caebae0c21957576c82619859d7" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to avoid a situation where writing many small chunks of data to a stream do not cause a backup in the internal buffer that would have an adverse impact on performance. In such situations, implementations that implement the &lt;code&gt;writable._writev()&lt;/code&gt; method can perform buffered writes in a more optimized manner.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; 的主要目的是避免这样的情况：将许多小数据块写入流不会导致内部缓冲区中的备份对性能产生不利影响。在这种情况下，实现 &lt;code&gt;writable._writev()&lt;/code&gt; 方法的实现可以以更优化的方式执行缓冲的写入。</target>
        </trans-unit>
        <trans-unit id="63b684f9ac0d7ab67676394b5e6d4348d8377d2f" translate="yes" xml:space="preserve">
          <source>The privateKey can also be an ArrayBuffer and CryptoKey.</source>
          <target state="translated">privateKey也可以是一个ArrayBuffer和CryptoKey。</target>
        </trans-unit>
        <trans-unit id="64985acfc6f181ff488fc6817834027a19e84721" translate="yes" xml:space="preserve">
          <source>The process could not be killed, or</source>
          <target state="translated">这个过程不能被杀死,或者</target>
        </trans-unit>
        <trans-unit id="e873e5b18616841f05efdd386c89f6ba201225db" translate="yes" xml:space="preserve">
          <source>The process could not be spawned, or</source>
          <target state="translated">进程无法产生,或。</target>
        </trans-unit>
        <trans-unit id="4bfa64f515a1b0181d935c05f6c69ffff6fbfd05" translate="yes" xml:space="preserve">
          <source>The process object. See the &lt;a href=&quot;process#process_process&quot;&gt;&lt;code&gt;process&lt;/code&gt; object&lt;/a&gt; section.</source>
          <target state="translated">流程对象。请参阅&lt;a href=&quot;process#process_process&quot;&gt; &lt;code&gt;process&lt;/code&gt; 对象&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="19a87c186d9fc90f05f38ed4cba9e32faeadbae9" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt;. This corresponds to &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-14&lt;/code&gt; on all other platforms.</source>
          <target state="translated">高于 &lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; 和低于 &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; 的进程调度优先级。在Windows上，这对应于 &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; ，在所有其他平台上，则对应值为 &lt;code&gt;-14&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8b5e718648dcd24e1f04e65ec6ef9126189b362" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_LOW&lt;/code&gt; and below &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt;. This corresponds to &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;10&lt;/code&gt; on all other platforms.</source>
          <target state="translated">高于 &lt;code&gt;PRIORITY_LOW&lt;/code&gt; 和低于 &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; 的进程调度优先级。这对应于Windows 上的 &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; ，而在所有其他平台上则为 &lt;code&gt;10&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07f606e78cf90aabba4bf4bb1ef36128cea4c14f" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;. This corresponds to &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-7&lt;/code&gt; on all other platforms.</source>
          <target state="translated">高于 &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; 和低于 &lt;code&gt;PRIORITY_HIGH&lt;/code&gt; 的进程调度优先级。这对应于Windows 上的 &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; ，在所有其他平台上则为 &lt;code&gt;-7&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="681821ab96576ebe60cbcdd765ffba967ab60b31" translate="yes" xml:space="preserve">
          <source>The properties available on the assigned network address object include:</source>
          <target state="translated">分配的网络地址对象上的可用属性包括:</target>
        </trans-unit>
        <trans-unit id="15089f6598bc6c72817c26575069415cd75bbb85" translate="yes" xml:space="preserve">
          <source>The properties included on each object include:</source>
          <target state="translated">每个对象上包括的属性包括:</target>
        </trans-unit>
        <trans-unit id="819ed450a8f3e467ad95194cc6e4b3855ad9ff3c" translate="yes" xml:space="preserve">
          <source>The property of exports being statically enumerable is maintained with exports patterns since the individual exports for a package can be determined by treating the right hand side target pattern as a &lt;code&gt;**&lt;/code&gt; glob against the list of files within the package. Because &lt;code&gt;node_modules&lt;/code&gt; paths are forbidden in exports targets, this expansion is dependent on only the files of the package itself.</source>
          <target state="translated">由于可以通过将右侧目标模式作为与程序包中文件列表相对应的 &lt;code&gt;**&lt;/code&gt; 处理来确定程序包的单个导出，因此可以通过导出模式来保持静态可枚举的导出属性。因为在导出目标中禁止使用 &lt;code&gt;node_modules&lt;/code&gt; 路径，所以此扩展仅依赖于包本身的文件。</target>
        </trans-unit>
        <trans-unit id="32cbb03653d9c062d765fd9dedb500b4ce391d11" translate="yes" xml:space="preserve">
          <source>The protocol identifier (&lt;code&gt;'h2'&lt;/code&gt; in the examples) may be any valid &lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPN Protocol ID&lt;/a&gt;.</source>
          <target state="translated">协议标识符（示例中为 &lt;code&gt;'h2'&lt;/code&gt; ）可以是任何有效的&lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPN协议ID&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="682dd72da7ec2fc2dd775aaa85fc979fb00717b6" translate="yes" xml:space="preserve">
          <source>The provided &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;origin&lt;/code&gt; of the context are made visible through the Inspector API.</source>
          <target state="translated">通过Inspector API可以看到提供的上下文 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;origin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c874b3f599c2f388ee9adaf7c51cc16c6ca9ab2" translate="yes" xml:space="preserve">
          <source>The provided address family is not understood by the Node.js API.</source>
          <target state="translated">提供的地址族不被Node.js API理解。</target>
        </trans-unit>
        <trans-unit id="0d5a7141a0afa24f729a66e2573aa9e735d8af9e" translate="yes" xml:space="preserve">
          <source>The range (&lt;code&gt;max - min&lt;/code&gt;) must be less than 2&lt;sup&gt;48&lt;/sup&gt;. &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; must be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot;&gt;safe integers&lt;/a&gt;.</source>
          <target state="translated">范围（ &lt;code&gt;max - min&lt;/code&gt; ）必须小于2 &lt;sup&gt;48&lt;/sup&gt;。 &lt;code&gt;min&lt;/code&gt; 和 &lt;code&gt;max&lt;/code&gt; 必须是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot;&gt;安全整数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a6ce53307f0479c8ec03dffd96128613abfed0ef" translate="yes" xml:space="preserve">
          <source>The raw headers as they were received are retained in the &lt;code&gt;rawHeaders&lt;/code&gt; property, which is an array of &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt;. For example, the previous message header object might have a &lt;code&gt;rawHeaders&lt;/code&gt; list like the following:</source>
          <target state="translated">收到的原始标头保留在 &lt;code&gt;rawHeaders&lt;/code&gt; 属性中，该属性是 &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt; 的数组。例如，先前的消息头对象可能具有如下的 &lt;code&gt;rawHeaders&lt;/code&gt; 列表：</target>
        </trans-unit>
        <trans-unit id="83f581d673868d237fedae3567c8e5ca1905d79d" translate="yes" xml:space="preserve">
          <source>The raw request/response headers list exactly as they were received.</source>
          <target state="translated">原始的请求/响应标题与收到的请求/响应标题一模一样。</target>
        </trans-unit>
        <trans-unit id="b985d4474679d7d8436722ff0ebeff67e3eb82aa" translate="yes" xml:space="preserve">
          <source>The raw request/response trailer keys and values exactly as they were received. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="translated">原始请求/响应预告片键和值与接收到的键和值完全相同。仅在 &lt;code&gt;'end'&lt;/code&gt; 事件中填充。</target>
        </trans-unit>
        <trans-unit id="5d9dff5cd0c71c07633537409b66578e6b80505c" translate="yes" xml:space="preserve">
          <source>The read-only path of this directory as was provided to &lt;a href=&quot;#fs_fs_opendir_path_options_callback&quot;&gt;&lt;code&gt;fs.opendir()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_opendirsync_path_options&quot;&gt;&lt;code&gt;fs.opendirSync()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#fs_fspromises_opendir_path_options&quot;&gt;&lt;code&gt;fsPromises.opendir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">提供给&lt;a href=&quot;#fs_fs_opendir_path_options_callback&quot;&gt; &lt;code&gt;fs.opendir()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#fs_fs_opendirsync_path_options&quot;&gt; &lt;code&gt;fs.opendirSync()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#fs_fspromises_opendir_path_options&quot;&gt; &lt;code&gt;fsPromises.opendir()&lt;/code&gt; &lt;/a&gt;的此目录的只读路径。</target>
        </trans-unit>
        <trans-unit id="34df59cd5882c36bd6c67c750c332e85dde52821" translate="yes" xml:space="preserve">
          <source>The reading will begin at the current position. For example, if the file already had &lt;code&gt;'Hello World&lt;/code&gt;' and six bytes are read with the file descriptor, the call to &lt;code&gt;fs.readFile()&lt;/code&gt; with the same file descriptor, would give &lt;code&gt;'World'&lt;/code&gt;, rather than &lt;code&gt;'Hello World'&lt;/code&gt;.</source>
          <target state="translated">读数将从当前位置开始。例如，如果文件已经具有 &lt;code&gt;'Hello World&lt;/code&gt; &amp;rdquo;并且使用文件描述符读取了六个字节，则使用相同文件描述符对 &lt;code&gt;fs.readFile()&lt;/code&gt; 的调用将给出 &lt;code&gt;'World'&lt;/code&gt; ，而不是 &lt;code&gt;'Hello World'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a5389685a663870c4323e668ef2d2e417308f1a" translate="yes" xml:space="preserve">
          <source>The reason for this error handling behavior is that these callbacks are running at potentially volatile points in an object's lifetime, for example during class construction and destruction. Because of this, it is deemed necessary to bring down the process quickly in order to prevent an unintentional abort in the future. This is subject to change in the future if a comprehensive analysis is performed to ensure an exception can follow the normal control flow without unintentional side effects.</source>
          <target state="translated">这种错误处理行为的原因是,这些回调是在对象生命周期中潜在的不稳定点运行的,例如在类的构建和销毁过程中。正因为如此,我们认为有必要快速关闭进程,以防止将来发生意外中止。如果进行综合分析,确保异常可以按照正常的控制流程进行,而不会产生意外的副作用,这一点在将来会有所改变。</target>
        </trans-unit>
        <trans-unit id="6fee581e1391dedfda9cb1c8042e894cd3728419" translate="yes" xml:space="preserve">
          <source>The reason that state is an issue is because both the CommonJS and ES module versions of the package might get used within an application; for example, the user&amp;rsquo;s application code could &lt;code&gt;import&lt;/code&gt; the ES module version while a dependency &lt;code&gt;require&lt;/code&gt;s the CommonJS version. If that were to occur, two copies of the package would be loaded in memory and therefore two separate states would be present. This would likely cause hard-to-troubleshoot bugs.</source>
          <target state="translated">状态成为问题的原因是因为程序包的CommonJS和ES模块版本都可能在应用程序中使用；例如，用户的应用程序代码可以 &lt;code&gt;import&lt;/code&gt; ES模块版本，而依赖项 &lt;code&gt;require&lt;/code&gt; CommonJS版本。如果发生这种情况，该包的两个副本将被加载到内存中，因此将出现两个单独的状态。这可能会导致难以解决的错误。</target>
        </trans-unit>
        <trans-unit id="7e95038a9c64315188042fc9eab57e4956f07d72" translate="yes" xml:space="preserve">
          <source>The reason this is problematic is because writes to &lt;code&gt;process.stdout&lt;/code&gt; in Node.js are sometimes &lt;em&gt;asynchronous&lt;/em&gt; and may occur over multiple ticks of the Node.js event loop. Calling &lt;code&gt;process.exit()&lt;/code&gt;, however, forces the process to exit &lt;em&gt;before&lt;/em&gt; those additional writes to &lt;code&gt;stdout&lt;/code&gt; can be performed.</source>
          <target state="translated">之所以有问题，是因为有时Node.js中对 &lt;code&gt;process.stdout&lt;/code&gt; 的写入是&lt;em&gt;异步的，&lt;/em&gt;并且可能在Node.js事件循环的多个滴答中发生。但是，调用 &lt;code&gt;process.exit()&lt;/code&gt; 会强制该进程退出，&lt;em&gt;然后&lt;/em&gt;再执行对 &lt;code&gt;stdout&lt;/code&gt; 的其他写入操作。</target>
        </trans-unit>
        <trans-unit id="882e863942bbfdb2c275d570776a56f3cb7eed13" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows.</source>
          <target state="translated">递归选项只在MacOS和Windows上支持。</target>
        </trans-unit>
        <trans-unit id="0d5da93cf7c47ffd68713f07c2a2d70da3b7c85f" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows. An &lt;code&gt;ERR_FEATURE_UNAVAILABLE_ON_PLATFORM&lt;/code&gt; exception will be thrown when the option is used on a platform that does not support it.</source>
          <target state="translated">递归选项仅在macOS和Windows上受支持。一个 &lt;code&gt;ERR_FEATURE_UNAVAILABLE_ON_PLATFORM&lt;/code&gt; 当选项不支持它的平台上使用，会引发异常。</target>
        </trans-unit>
        <trans-unit id="96411a8d35be2600a6fa3cb907c90d1ed0ea5379" translate="yes" xml:space="preserve">
          <source>The reference must be freed once it is no longer needed.</source>
          <target state="translated">一旦不再需要,就必须释放引用。</target>
        </trans-unit>
        <trans-unit id="6cc848b653807d38e0a4cbaec6143db941486dc6" translate="yes" xml:space="preserve">
          <source>The registered event listeners is synchronously invoked in the order they were registered.</source>
          <target state="translated">已注册的事件监听器是按照注册的顺序同步调用的。</target>
        </trans-unit>
        <trans-unit id="6da8026af719b1ab6b55c12dbb1cb53a3be6fd63" translate="yes" xml:space="preserve">
          <source>The report is intended for development, test and production use, to capture and preserve information for problem determination. It includes JavaScript and native stack traces, heap statistics, platform information, resource usage etc. With the report option enabled, diagnostic reports can be triggered on unhandled exceptions, fatal errors and user signals, in addition to triggering programmatically through API calls.</source>
          <target state="translated">该报告旨在供开发、测试和生产使用,为问题判断捕捉和保存信息。它包括JavaScript和本机堆栈痕迹、堆统计、平台信息、资源使用情况等。启用报告选项后,除了通过API调用编程触发外,还可以对未处理的异常、致命错误和用户信号触发诊断报告。</target>
        </trans-unit>
        <trans-unit id="bf4ab5f8ad9a5033c480cb18cedbac706e596643" translate="yes" xml:space="preserve">
          <source>The request authority pseudo header field. Because HTTP/2 allows requests to set either &lt;code&gt;:authority&lt;/code&gt; or &lt;code&gt;host&lt;/code&gt;, this value is derived from &lt;code&gt;req.headers[':authority']&lt;/code&gt; if present. Otherwise, it is derived from &lt;code&gt;req.headers['host']&lt;/code&gt;.</source>
          <target state="translated">请求权限伪头字段。因为HTTP / 2允许请求设置 &lt;code&gt;:authority&lt;/code&gt; 或 &lt;code&gt;host&lt;/code&gt; ，所以此值从 &lt;code&gt;req.headers[':authority']&lt;/code&gt; 如果存在）派生。否则，它是从 &lt;code&gt;req.headers['host']&lt;/code&gt; 派生的。</target>
        </trans-unit>
        <trans-unit id="02f104dfa09be26fcee1ec1287c9793da8d202a7" translate="yes" xml:space="preserve">
          <source>The request authority pseudo header field. It can also be accessed via &lt;code&gt;req.headers[':authority']&lt;/code&gt;.</source>
          <target state="translated">请求权限伪头字段。也可以通过 &lt;code&gt;req.headers[':authority']&lt;/code&gt; 进行访问。</target>
        </trans-unit>
        <trans-unit id="f8cc8ec77eab284c5b1d9a9e8bee79b0a4e96211" translate="yes" xml:space="preserve">
          <source>The request inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="translated">该请求继承自&lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;，并另外实现了以下内容：</target>
        </trans-unit>
        <trans-unit id="d2f1ed5fc05d92917b60ebf9072ab11385b53fc9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="translated">请求方法为字符串。只读。示例： &lt;code&gt;'GET'&lt;/code&gt; ， &lt;code&gt;'DELETE'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b820a151f8af96f9a8410852cebe4b9fce928d9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read-only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="translated">请求方法为字符串。只读。示例： &lt;code&gt;'GET'&lt;/code&gt; ， &lt;code&gt;'DELETE'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf2b93920ae2dda23261c83e7efa9025f30a8059" translate="yes" xml:space="preserve">
          <source>The request scheme pseudo header field indicating the scheme portion of the target URL.</source>
          <target state="translated">请求方案伪头字段,表示目标URL的方案部分。</target>
        </trans-unit>
        <trans-unit id="d62ea70efeb08e31455b4542aaf477b0d2b0fbb4" translate="yes" xml:space="preserve">
          <source>The request to promote a handle is made through &lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt;&lt;code&gt;napi_escape_handle&lt;/code&gt;&lt;/a&gt; which can only be called once.</source>
          <target state="translated">提升句柄的请求是通过&lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt; &lt;code&gt;napi_escape_handle&lt;/code&gt; 发出的&lt;/a&gt;，只能调用一次。</target>
        </trans-unit>
        <trans-unit id="c35bb861539c1d20772a3a4da4e40cab1b2864ac" translate="yes" xml:space="preserve">
          <source>The request/response headers object.</source>
          <target state="translated">请求/响应头对象。</target>
        </trans-unit>
        <trans-unit id="efa13e0d6f5d17d44de1820e6c6f833cd6533735" translate="yes" xml:space="preserve">
          <source>The request/response trailers object. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="translated">请求/响应尾部对象。仅在 &lt;code&gt;'end'&lt;/code&gt; 事件中填充。</target>
        </trans-unit>
        <trans-unit id="76afa09b3c9e4455c22d150e86e0a878c83b5f18" translate="yes" xml:space="preserve">
          <source>The requested functionality is not supported in worker threads.</source>
          <target state="translated">工作线程中不支持所请求的功能。</target>
        </trans-unit>
        <trans-unit id="023f045e1ba7c064b230a5815cf96e2c57cfb567" translate="yes" xml:space="preserve">
          <source>The resolution rules for the imports field are otherwise analogous to the exports field.</source>
          <target state="translated">进口领域的解析规则在其他方面与出口领域类似。</target>
        </trans-unit>
        <trans-unit id="130c49b75db4d5f28d69526125533d14026a98f8" translate="yes" xml:space="preserve">
          <source>The resolve hook returns the resolved file URL and module format for a given module specifier and parent file URL:</source>
          <target state="translated">resolve钩子会返回给定模块指定者和父文件URL的解析文件URL和模块格式。</target>
        </trans-unit>
        <trans-unit id="01c7f5cd9e64e948205f4e8da34e92946ac36c24" translate="yes" xml:space="preserve">
          <source>The resolver can throw the following errors:</source>
          <target state="translated">解析器会抛出以下错误。</target>
        </trans-unit>
        <trans-unit id="6ad6fadfeabaeb9c9c66df7b9fd54f216fa3d3aa" translate="yes" xml:space="preserve">
          <source>The resolver has the following properties:</source>
          <target state="translated">该解析器具有以下属性:</target>
        </trans-unit>
        <trans-unit id="0438675d90a63b76080df556206479f1a06b4dbd" translate="yes" xml:space="preserve">
          <source>The resolver instance will send its requests from the specified IP address. This allows programs to specify outbound interfaces when used on multi-homed systems.</source>
          <target state="translated">解析器实例将从指定的IP地址发送请求。这允许程序在多主机系统上使用时指定出站接口。</target>
        </trans-unit>
        <trans-unit id="d33ef3bb76a3d98e8f08717970d86722bbc1a3ef" translate="yes" xml:space="preserve">
          <source>The resolver will use the v4 local address when making requests to IPv4 DNS servers, and the v6 local address when making requests to IPv6 DNS servers. The &lt;code&gt;rrtype&lt;/code&gt; of resolution requests has no impact on the local address used.</source>
          <target state="translated">解析器在向IPv4 DNS服务器发出请求时将使用v4本地地址，而在向IPv6 DNS服务器发出请求时将使用v6本地地址。解析请求的 &lt;code&gt;rrtype&lt;/code&gt; 对使用的本地地址没有影响。</target>
        </trans-unit>
        <trans-unit id="965055eab4b20e712cee07e74d7e15f1dc310a7e" translate="yes" xml:space="preserve">
          <source>The response inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="translated">响应继承自&lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;，并另外实现了以下内容：</target>
        </trans-unit>
        <trans-unit id="b18e030ec3ca1714e02a7b098543adb935c78705" translate="yes" xml:space="preserve">
          <source>The result generally does not make any guarantees about what kinds of properties or behavior a value exposes in JavaScript. They are primarily useful for addon developers who prefer to do type checking in JavaScript.</source>
          <target state="translated">结果一般不对一个值在JavaScript中暴露出什么样的属性或行为做任何保证。它们主要对喜欢在JavaScript中进行类型检查的addon开发者有用。</target>
        </trans-unit>
        <trans-unit id="b8b8022504a26ffb5513f898bea8594dd091a830" translate="yes" xml:space="preserve">
          <source>The result of a previous call to &lt;code&gt;process.cpuUsage()&lt;/code&gt; can be passed as the argument to the function, to get a diff reading.</source>
          <target state="translated">先前调用 &lt;code&gt;process.cpuUsage()&lt;/code&gt; 的结果可以作为该函数的参数传递，以获取差异读数。</target>
        </trans-unit>
        <trans-unit id="0c970c11e0a87e0dc98113377ad10bd2ef4c395a" translate="yes" xml:space="preserve">
          <source>The result of this function no longer contains a fraction component on Windows.</source>
          <target state="translated">在Windows上,这个函数的结果不再包含分数成分。</target>
        </trans-unit>
        <trans-unit id="350b994c82684bd0c40d5f8bba62015f9d892265" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;BigInt&lt;/code&gt; is calculated as: (&amp;ndash;1)&lt;sup&gt;&lt;code&gt;sign_bit&lt;/code&gt;&lt;/sup&gt; (&lt;code&gt;words[0]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;1&lt;/sup&gt; + &amp;hellip;)</source>
          <target state="translated">生成的 &lt;code&gt;BigInt&lt;/code&gt; 计算为：（&amp;ndash;1）&lt;sup&gt; &lt;code&gt;sign_bit&lt;/code&gt; &lt;/sup&gt;（ &lt;code&gt;words[0]&lt;/code&gt; &amp;times;（2 &lt;sup&gt;64&lt;/sup&gt;）&lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times;（2 &lt;sup&gt;64&lt;/sup&gt;）&lt;sup&gt;1&lt;/sup&gt; +&amp;hellip;）</target>
        </trans-unit>
        <trans-unit id="090264918bf0db3d97f15783938c5710acd286f9" translate="yes" xml:space="preserve">
          <source>The resulting output will resemble:</source>
          <target state="translated">结果输出将类似于:</target>
        </trans-unit>
        <trans-unit id="6592f1ecacf5d99cad7d854240afeddc010dff43" translate="yes" xml:space="preserve">
          <source>The resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory.</source>
          <target state="translated">生成的路径会被归一化,除非路径被解析到根目录,否则会去掉尾部的斜杠。</target>
        </trans-unit>
        <trans-unit id="6755c8e673605ed2b394bffd53b16e00aa04ed50" translate="yes" xml:space="preserve">
          <source>The return value &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; represents the generated key pair. When PEM encoding was selected, the respective key will be a string, otherwise it will be a buffer containing the data encoded as DER.</source>
          <target state="translated">返回值 &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; 表示生成的密钥对。选择PEM编码后，相应的键将是一个字符串，否则将是一个包含编码为DER的数据的缓冲区。</target>
        </trans-unit>
        <trans-unit id="8540d6f242c1449e741beb63b74e073fc037812e" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns &lt;code&gt;NULL&lt;/code&gt;, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="translated">&lt;code&gt;Init&lt;/code&gt; 的返回值被视为模块的 &lt;code&gt;exports&lt;/code&gt; 对象。为了方便起见， &lt;code&gt;Init&lt;/code&gt; 方法通过 &lt;code&gt;exports&lt;/code&gt; 参数传递了一个空对象。如果 &lt;code&gt;Init&lt;/code&gt; 返回 &lt;code&gt;NULL&lt;/code&gt; ，因为传递的参数 &lt;code&gt;exports&lt;/code&gt; 由模块输出。N-API模块不能修改 &lt;code&gt;module&lt;/code&gt; 对象，但可以指定任何内容作为模块的 &lt;code&gt;exports&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="74d46df7105ceb22c98097c79674b8da75df0880" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns NULL, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="translated">&lt;code&gt;Init&lt;/code&gt; 的返回值被视为模块的 &lt;code&gt;exports&lt;/code&gt; 对象。为了方便起见， &lt;code&gt;Init&lt;/code&gt; 方法通过 &lt;code&gt;exports&lt;/code&gt; 参数传递了一个空对象。如果 &lt;code&gt;Init&lt;/code&gt; 返回NULL，则作为 &lt;code&gt;exports&lt;/code&gt; 导出的参数将由模块导出。N-API模块不能修改 &lt;code&gt;module&lt;/code&gt; 对象，但可以指定任何内容作为模块的 &lt;code&gt;exports&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="b7768bae4378835321f00405e40f7b2cd7232e22" translate="yes" xml:space="preserve">
          <source>The return value includes fractions of a second. Use &lt;code&gt;Math.floor()&lt;/code&gt; to get whole seconds.</source>
          <target state="translated">返回值包括几分之一秒。使用 &lt;code&gt;Math.floor()&lt;/code&gt; 获得整秒。</target>
        </trans-unit>
        <trans-unit id="97d244151a2074f335e80ec7c64b042a2a7bf155" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;true&lt;/code&gt; if the internal buffer is less than the &lt;code&gt;highWaterMark&lt;/code&gt; configured when the stream was created after admitting &lt;code&gt;chunk&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt; is returned, further attempts to write data to the stream should stop until the &lt;a href=&quot;#stream_event_drain&quot;&gt;&lt;code&gt;'drain'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">如果内部缓冲区小于允许 &lt;code&gt;chunk&lt;/code&gt; 之后创建流时配置的 &lt;code&gt;highWaterMark&lt;/code&gt; ,则返回值为 &lt;code&gt;true&lt;/code&gt; 。如果返回 &lt;code&gt;false&lt;/code&gt; ，则应停止进一步尝试向流中写入数据，直到发出&lt;a href=&quot;#stream_event_drain&quot;&gt; &lt;code&gt;'drain'&lt;/code&gt; &lt;/a&gt;事件为止。</target>
        </trans-unit>
        <trans-unit id="26d76acade904502d2ab1c10b9e6ee013a9e7a40" translate="yes" xml:space="preserve">
          <source>The return value is equivalent to &lt;a href=&quot;process#process_process_arch&quot;&gt;&lt;code&gt;process.arch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返回值等效于&lt;a href=&quot;process#process_process_arch&quot;&gt; &lt;code&gt;process.arch&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d2cc4b1ac76c7772ee2e1e982aae790cb286904e" translate="yes" xml:space="preserve">
          <source>The return value is equivalent to &lt;a href=&quot;process#process_process_platform&quot;&gt;&lt;code&gt;process.platform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返回值等效于&lt;a href=&quot;process#process_process_platform&quot;&gt; &lt;code&gt;process.platform&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e1ee035941771511703ba74230eaf82a6d8a77f" translate="yes" xml:space="preserve">
          <source>The return value of a handler function is ignored.</source>
          <target state="translated">处理函数的返回值会被忽略。</target>
        </trans-unit>
        <trans-unit id="5a297e4c1534ad58591aefd1896f05fb34a3b663" translate="yes" xml:space="preserve">
          <source>The return value will be &lt;code&gt;napi_ok&lt;/code&gt; if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the &lt;code&gt;napi_status&lt;/code&gt; value for the error will be returned. If an exception was thrown, and no error occurred, &lt;code&gt;napi_pending_exception&lt;/code&gt; will be returned.</source>
          <target state="translated">如果请求成功并且未引发未捕获的JavaScript异常，则返回值为 &lt;code&gt;napi_ok&lt;/code&gt; 。如果发生错误并且引发了异常，则将返回该错误的 &lt;code&gt;napi_status&lt;/code&gt; 值。如果抛出异常，并且未发生任何错误，则将返回 &lt;code&gt;napi_pending_exception&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bed1a6886c03f40d8370bf7edbf2cdfc154c254" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;MessagePort&lt;/code&gt; is an object in the target context and inherits from its global &lt;code&gt;Object&lt;/code&gt; class. Objects passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt;&lt;code&gt;port.onmessage()&lt;/code&gt;&lt;/a&gt; listener are also created in the target context and inherit from its global &lt;code&gt;Object&lt;/code&gt; class.</source>
          <target state="translated">返回的 &lt;code&gt;MessagePort&lt;/code&gt; 是目标上下文中的对象，并从其全局 &lt;code&gt;Object&lt;/code&gt; 类继承。传递给&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt; &lt;code&gt;port.onmessage()&lt;/code&gt; &lt;/a&gt;侦听器的对象也在目标上下文中创建，并从其全局 &lt;code&gt;Object&lt;/code&gt; 类继承。</target>
        </trans-unit>
        <trans-unit id="a30bf17d9b1e59d4e5f5069fa0021e31e3506815" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;MessagePort&lt;/code&gt; will be an object in the target context, and will inherit from its global &lt;code&gt;Object&lt;/code&gt; class. Objects passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt;&lt;code&gt;port.onmessage()&lt;/code&gt;&lt;/a&gt; listener will also be created in the target context and inherit from its global &lt;code&gt;Object&lt;/code&gt; class.</source>
          <target state="translated">返回的 &lt;code&gt;MessagePort&lt;/code&gt; 将是目标上下文中的对象，并将从其全局 &lt;code&gt;Object&lt;/code&gt; 类继承。传递给&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt; &lt;code&gt;port.onmessage()&lt;/code&gt; &lt;/a&gt;侦听器的对象也将在目标上下文中创建，并从其全局 &lt;code&gt;Object&lt;/code&gt; 类继承。</target>
        </trans-unit>
        <trans-unit id="dfc70b1227f01401a4b050e13257206410687bd0" translate="yes" xml:space="preserve">
          <source>The returned buffer is statically allocated and does not need to be freed.</source>
          <target state="translated">返回的缓冲区是静态分配的,不需要释放。</target>
        </trans-unit>
        <trans-unit id="38fcc6c2ece2cf3c7e594688e04adf2e09823305" translate="yes" xml:space="preserve">
          <source>The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">返回的函数将是提供的回调函数的包装。调用返回的函数时，引发的任何错误都将路由到域的 &lt;code&gt;'error'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="2d318eb946457587672c9d9705f3cc85af1dd775" translate="yes" xml:space="preserve">
          <source>The returned function will have an &lt;code&gt;asyncResource&lt;/code&gt; property referencing the &lt;code&gt;AsyncResource&lt;/code&gt; to which the function is bound.</source>
          <target state="translated">返回的函数将具有 &lt;code&gt;asyncResource&lt;/code&gt; 属性，该属性引用该函数绑定到的 &lt;code&gt;AsyncResource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a03e4b5f6edfce2e491d26c75c656ecf3f9be2a9" translate="yes" xml:space="preserve">
          <source>The returned object no longer inherits from &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="translated">返回的对象不再继承自 &lt;code&gt;Object.prototype&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="efca954612151fbe49aeec68bf42cb1165e6aba5" translate="yes" xml:space="preserve">
          <source>The returned object will have the following properties:</source>
          <target state="translated">返回的对象将具有以下属性。</target>
        </trans-unit>
        <trans-unit id="44bb5d6c3855220369956ba8708ec28034c18d86" translate="yes" xml:space="preserve">
          <source>The returned result is different from the statistics returned by &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; in that &lt;code&gt;vm.measureMemory()&lt;/code&gt; measure the memory reachable by each V8 specific contexts in the current instance of the V8 engine, while the result of &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; measure the memory occupied by each heap space in the current V8 instance.</source>
          <target state="translated">返回的结果是从由返回的统计不同 &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; 在 &lt;code&gt;vm.measureMemory()&lt;/code&gt; 测量由在V8发动机的当前实例中的每个V8特定上下文存储器访问，而结果 &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; 测量当前V8实例中每个堆空间占用的内存。</target>
        </trans-unit>
        <trans-unit id="2663bc23f657359a1e5a0d9802b2b8ab09e2c133" translate="yes" xml:space="preserve">
          <source>The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.</source>
          <target state="translated">应对抛出的错误,最安全的方法就是关闭进程。当然,在正常的Web服务器中,可能会有很多开放的连接,如果因为别人触发了错误而突然关闭这些连接是不合理的。</target>
        </trans-unit>
        <trans-unit id="b7ee599fb3ddb2bcc3b0c4f04382a22f7cf99d6b" translate="yes" xml:space="preserve">
          <source>The salt value significantly improves the strength of the HKDF algorithm. It should be random or pseudo-random and should be the same length as the output of the digest function (for instance, if using &lt;code&gt;'SHA-256'&lt;/code&gt; as the digest, the salt should be 256-bits of random data).</source>
          <target state="translated">盐值显着提高了HKDF算法的强度。它应该是随机的或伪随机的，并且应与摘要函数的输出长度相同（例如，如果使用 &lt;code&gt;'SHA-256'&lt;/code&gt; 作为摘要，则salt应该是256位随机数据​​）。</target>
        </trans-unit>
        <trans-unit id="2e3944f7c88aadcaffed0ee6e91d5164e0bc64f0" translate="yes" xml:space="preserve">
          <source>The same call as &lt;a href=&quot;perf_hooks#perf_hooks_performance_eventlooputilization_utilization1_utilization2&quot;&gt;&lt;code&gt;perf_hooks&lt;/code&gt; &lt;code&gt;eventLoopUtilization()&lt;/code&gt;&lt;/a&gt;, except the values of the worker instance are returned.</source>
          <target state="translated">除了返回工作实例的值之外，其他与&lt;a href=&quot;perf_hooks#perf_hooks_performance_eventlooputilization_utilization1_utilization2&quot;&gt; &lt;code&gt;perf_hooks&lt;/code&gt; &lt;code&gt;eventLoopUtilization()&lt;/code&gt; &lt;/a&gt;相同的调用。</target>
        </trans-unit>
        <trans-unit id="17642e3dfd2688c6cd67e72a34c50952e74d46ec" translate="yes" xml:space="preserve">
          <source>The same options as &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; are supported. Since a shell is not spawned, behaviors such as I/O redirection and file globbing are not supported.</source>
          <target state="translated">支持与&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;相同的选项。由于未生成外壳程序，因此不支持诸如I / O重定向和文件Globing之类的行为。</target>
        </trans-unit>
        <trans-unit id="b5c131d6859b462a4ccc2f3ff1ca448377cb2782" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt;&lt;code&gt;.setupMaster()&lt;/code&gt;&lt;/a&gt; is called, whichever comes first.</source>
          <target state="translated">调度策略，或者使用 &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; 进行轮询，或者使用 &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; 保留给操作系统。这是一个全局设置，并在生成第一个工作程序或&lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt; &lt;code&gt;.setupMaster()&lt;/code&gt; &lt;/a&gt;（以先到者为准）后有效冻结。</target>
        </trans-unit>
        <trans-unit id="61aae47bb566b3e756d07254aa9ebf2e27b0d263" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;code&gt;cluster.setupMaster()&lt;/code&gt; is called, whichever comes first.</source>
          <target state="translated">调度策略，无论是 &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; 用于循环或 &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; 离开它的操作系统。这是一个全局设置，并在生成第一个工作程序或调用 &lt;code&gt;cluster.setupMaster()&lt;/code&gt; （以先到者为准）后有效冻结。</target>
        </trans-unit>
        <trans-unit id="63a1fd5ff7e904920063e0290d10c7a247d4d75f" translate="yes" xml:space="preserve">
          <source>The scheme &quot;gopher&quot; is no longer special and &lt;code&gt;url.origin&lt;/code&gt; now returns &lt;code&gt;'null'&lt;/code&gt; for it.</source>
          <target state="translated">方案&amp;ldquo; gopher&amp;rdquo;不再特殊，并且 &lt;code&gt;url.origin&lt;/code&gt; 现在为其返回 &lt;code&gt;'null'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72999a4403b7836c32c156209372d0352bc0043c" translate="yes" xml:space="preserve">
          <source>The scheme &quot;gopher&quot; is no longer special.</source>
          <target state="translated">&quot;打地鼠 &quot;的方案不再特殊。</target>
        </trans-unit>
        <trans-unit id="a1108ba05be7f85b2c2a446fb6ad5e88bb3a3f9d" translate="yes" xml:space="preserve">
          <source>The script can access the &lt;a href=&quot;globals&quot;&gt;global scope&lt;/a&gt;. Function and &lt;code&gt;var&lt;/code&gt; declarations in the script will be added to the &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; object. Variable declarations made using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; will be visible globally, but will not be added to the &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">该脚本可以访问&lt;a href=&quot;globals&quot;&gt;全局范围&lt;/a&gt;。脚本中的函数和 &lt;code&gt;var&lt;/code&gt; 声明将添加到&lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt;对象中。使用 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; 进行的变量声明将在全局可见，但不会添加到&lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="478005d19999ae183e0f7a9bb0ae6f007bd16fbb" translate="yes" xml:space="preserve">
          <source>The search paths for the module.</source>
          <target state="translated">该模块的搜索路径。</target>
        </trans-unit>
        <trans-unit id="0cfd0df8336c867963656caf2b437c62fdf98b4d" translate="yes" xml:space="preserve">
          <source>The second approach is to try to handle the exception. There will be cases where the native code can catch the exception, take the appropriate action, and then continue. This is only recommended in specific cases where it is known that the exception can be safely handled. In these cases &lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt;&lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt;&lt;/a&gt; can be used to get and clear the exception. On success, result will contain the handle to the last JavaScript &lt;code&gt;Object&lt;/code&gt; thrown. If it is determined, after retrieving the exception, the exception cannot be handled after all it can be re-thrown it with &lt;a href=&quot;#n_api_napi_throw&quot;&gt;&lt;code&gt;napi_throw&lt;/code&gt;&lt;/a&gt; where error is the JavaScript &lt;code&gt;Error&lt;/code&gt; object to be thrown.</source>
          <target state="translated">第二种方法是尝试处理异常。在某些情况下，本机代码可以捕获异常，采取适当的措施，然后继续。仅在已知可以安全处理异常的特定情况下才建议这样做。在这些情况下，可以使用&lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt; &lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt; &lt;/a&gt;获取和清除异常。成功后，结果将包含最后抛出的JavaScript &lt;code&gt;Object&lt;/code&gt; 的句柄。如果确定，则在检索到异常之后，在可以使用&lt;a href=&quot;#n_api_napi_throw&quot;&gt; &lt;code&gt;napi_throw&lt;/code&gt; &lt;/a&gt;将异常全部重新抛出后，无法处理该异常，其中error是要抛出的JavaScript &lt;code&gt;Error&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="dc926d997d4c579499bbdcda07f643f7920bddbb" translate="yes" xml:space="preserve">
          <source>The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.</source>
          <target state="translated">第二种方法是主进程创建监听套接字,并将其发送给感兴趣的工作者。然后工人直接接受传入的连接。</target>
        </trans-unit>
        <trans-unit id="338ae710bded6a0f6fd004eec96b553cb3dbb378" translate="yes" xml:space="preserve">
          <source>The second approach should, in theory, give the best performance. In practice however, distribution tends to be very unbalanced due to operating system scheduler vagaries. Loads have been observed where over 70% of all connections ended up in just two processes, out of a total of eight.</source>
          <target state="translated">理论上讲,第二种方法应该能获得最佳性能。但在实践中,由于操作系统调度器的变化,分配往往非常不平衡。据观察,在总共8个进程中,有70%以上的连接最终只在两个进程中完成。</target>
        </trans-unit>
        <trans-unit id="a15f3c8ca4baed085ff4f00bb83df9df5112dc61" translate="yes" xml:space="preserve">
          <source>The second argument can now be an &lt;code&gt;options&lt;/code&gt; object with &lt;code&gt;recursive&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; properties.</source>
          <target state="translated">现在，第二个参数可以是具有 &lt;code&gt;recursive&lt;/code&gt; 和 &lt;code&gt;mode&lt;/code&gt; 属性的 &lt;code&gt;options&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="056385b629217bf4d47083a5cf61e4dbc958e791" translate="yes" xml:space="preserve">
          <source>The second argument is optional. If &lt;code&gt;options&lt;/code&gt; is provided as a string, it specifies the &lt;code&gt;encoding&lt;/code&gt;. Otherwise &lt;code&gt;options&lt;/code&gt; should be passed as an object.</source>
          <target state="translated">第二个参数是可选的。如果 &lt;code&gt;options&lt;/code&gt; 作为字符串提供，则它指定 &lt;code&gt;encoding&lt;/code&gt; 。否则，应将 &lt;code&gt;options&lt;/code&gt; 作为对象传递。</target>
        </trans-unit>
        <trans-unit id="9dafbecade7b94f6c57417ea5afec4a5bc9790e3" translate="yes" xml:space="preserve">
          <source>The sections below describe the additional tools available for developing and deploying Node.js native addons.</source>
          <target state="translated">下面的章节描述了可用于开发和部署Node.js本地插件的其他工具。</target>
        </trans-unit>
        <trans-unit id="9e19e2fd3684a2ee8b1c503085e8dc2cb74704b7" translate="yes" xml:space="preserve">
          <source>The selected public or private key encoding is incompatible with other options.</source>
          <target state="translated">所选的公钥或私钥编码与其他选项不兼容。</target>
        </trans-unit>
        <trans-unit id="d2b9aebdd568a045c5581d3668edfbe15a6a2bea" translate="yes" xml:space="preserve">
          <source>The semantics of Node.js's &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support a number of reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="translated">Node.js的 &lt;code&gt;require()&lt;/code&gt; 函数的语义被设计为足够通用，以支持许多合理的目录结构。软件包管理器程序（例如 &lt;code&gt;dpkg&lt;/code&gt; ， &lt;code&gt;rpm&lt;/code&gt; 和 &lt;code&gt;npm&lt;/code&gt; )将有望发现无需修改即可从Node.js模块构建本机软件包。</target>
        </trans-unit>
        <trans-unit id="c9e7e477b28102f006aa9e1ae786b6e5fff1d8ea" translate="yes" xml:space="preserve">
          <source>The semantics of the Node.js &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="translated">Node.js &lt;code&gt;require()&lt;/code&gt; 函数的语义设计得足够通用，以支持合理的目录结构。软件包管理器程序（例如 &lt;code&gt;dpkg&lt;/code&gt; ， &lt;code&gt;rpm&lt;/code&gt; 和 &lt;code&gt;npm&lt;/code&gt; )将有望发现无需修改即可从Node.js模块构建本机软件包。</target>
        </trans-unit>
        <trans-unit id="765c907408a72b7c359b1e6e3c2a44d833e954e0" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;.</source>
          <target state="translated">序列化API提供了以与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML结构化克隆算法&lt;/a&gt;兼容的方式序列化JavaScript值的方法。</target>
        </trans-unit>
        <trans-unit id="1dd892ccc6dffe2bd093abfe21edcd6594062c97" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;. The format is backward-compatible (i.e. safe to store to disk).</source>
          <target state="translated">序列化API提供了以与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML结构化克隆算法&lt;/a&gt;兼容的方式序列化JavaScript值的方法。该格式是向后兼容的（即可以安全存储到磁盘）。</target>
        </trans-unit>
        <trans-unit id="6375e172794a973dd431fe6fb6d9d47672ad78be" translate="yes" xml:space="preserve">
          <source>The server can be a TCP server or an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server, depending on what it &lt;a href=&quot;#net_server_listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">该服务器可以是TCP服务器或&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;服务器，具体取决于它的&lt;a href=&quot;#net_server_listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2404f9b86c98cba231fff8bebda45b2ca16649b5" translate="yes" xml:space="preserve">
          <source>The server can be tested by connecting to it using the example client from &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可以使用&lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt; &lt;code&gt;tls.connect()&lt;/code&gt; 中&lt;/a&gt;的示例客户端通过连接服务器来测试服务器。</target>
        </trans-unit>
        <trans-unit id="aede112d180e1d47ab7a08eaa5b0ea3c6ed75bc2" translate="yes" xml:space="preserve">
          <source>The server's current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, &lt;code&gt;callback(null, resp)&lt;/code&gt; is then invoked, where &lt;code&gt;resp&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; instance containing the OCSP response. Both &lt;code&gt;certificate&lt;/code&gt; and &lt;code&gt;issuer&lt;/code&gt; are &lt;code&gt;Buffer&lt;/code&gt; DER-representations of the primary and issuer's certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.</source>
          <target state="translated">可以解析服务器的当前证书以获得OCSP URL和证书ID。获取OCSP响应后，将 &lt;code&gt;callback(null, resp)&lt;/code&gt; ，其中 &lt;code&gt;resp&lt;/code&gt; 是包含OCSP响应的 &lt;code&gt;Buffer&lt;/code&gt; 实例。这两种 &lt;code&gt;certificate&lt;/code&gt; 和 &lt;code&gt;issuer&lt;/code&gt; 是 &lt;code&gt;Buffer&lt;/code&gt; 主要和发行人的证书DER-表示。这些可用于获取OCSP证书ID和OCSP端点URL。</target>
        </trans-unit>
        <trans-unit id="ea711def7d72186a6796edc378b6d6298bc4d28d" translate="yes" xml:space="preserve">
          <source>The servers encrypt the entire session state and send it to the client as a &quot;ticket&quot;. When reconnecting, the state is sent to the server in the initial connection. This mechanism avoids the need for server-side session cache. If the server doesn't use the ticket, for any reason (failure to decrypt it, it's too old, etc.), it will create a new session and send a new ticket. See &lt;a href=&quot;https://tools.ietf.org/html/rfc5077&quot;&gt;RFC 5077&lt;/a&gt; for more information.</source>
          <target state="translated">服务器对整个会话状态进行加密，然后将其作为&amp;ldquo;票证&amp;rdquo;发送给客户端。重新连接时，状态将在初始连接中发送到服务器。这种机制避免了服务器端会话缓存的需要。如果服务器由于某种原因（无法解密，太旧等）不使用票证，它将创建一个新会话并发送一个新票证。有关更多信息，请参见&lt;a href=&quot;https://tools.ietf.org/html/rfc5077&quot;&gt;RFC 5077&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="76accd0d371c0c87373d40be1eddae24ddb6507b" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command line parsing should be compatible.</source>
          <target state="translated">外壳程序应该了解 &lt;code&gt;-c&lt;/code&gt; 开关。如果外壳是 &lt;code&gt;'cmd.exe'&lt;/code&gt; ，则它应该了解 &lt;code&gt;/d /s /c&lt;/code&gt; 开关，并且命令行解析应该兼容。</target>
        </trans-unit>
        <trans-unit id="aeb000fbdb4d2424b01088fd13f9a5381e396488" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command-line parsing should be compatible.</source>
          <target state="translated">外壳程序应该了解 &lt;code&gt;-c&lt;/code&gt; 开关。如果外壳是 &lt;code&gt;'cmd.exe'&lt;/code&gt; ，则它应该了解 &lt;code&gt;/d /s /c&lt;/code&gt; 开关，并且命令行解析应该兼容。</target>
        </trans-unit>
        <trans-unit id="21be831d3adf2892b25eaf65824eb2c524ecba41" translate="yes" xml:space="preserve">
          <source>The shell that executed Node.js should see the exit code as &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">执行Node.js的外壳应该将退出代码视为 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05c0d6d3b494c3c20fef212dff014249c946a65b" translate="yes" xml:space="preserve">
          <source>The signal handler will receive the signal's name (&lt;code&gt;'SIGINT'&lt;/code&gt;, &lt;code&gt;'SIGTERM'&lt;/code&gt;, etc.) as the first argument.</source>
          <target state="translated">信号处理程序将接收信号名称（ &lt;code&gt;'SIGINT'&lt;/code&gt; ， &lt;code&gt;'SIGTERM'&lt;/code&gt; 等）作为第一个参数。</target>
        </trans-unit>
        <trans-unit id="47e574501f3a0d99059119864ec3279d3f9294c3" translate="yes" xml:space="preserve">
          <source>The signal used to trigger the creation of a diagnostic report. Defaults to &lt;code&gt;'SIGUSR2'&lt;/code&gt;.</source>
          <target state="translated">用于触发诊断报告创建的信号。默认为 &lt;code&gt;'SIGUSR2'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d52541ad62fc4e1c6ca8683f187715851a92c6fd" translate="yes" xml:space="preserve">
          <source>The simple asynchronous work APIs above may not be appropriate for every scenario. When using any other asynchronous mechanism, the following APIs are necessary to ensure an asynchronous operation is properly tracked by the runtime.</source>
          <target state="translated">以上简单的异步工作API可能并不适合每个场景。当使用任何其他异步机制时,以下API是必要的,以确保异步操作被运行时正确跟踪。</target>
        </trans-unit>
        <trans-unit id="0cf28a9f4765208e101d68cf21ce0fa06a19c689" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes.</source>
          <target state="translated">文件的大小,单位为字节。</target>
        </trans-unit>
        <trans-unit id="ad6acc1011912704e9b85abb2b99512ef52fda88" translate="yes" xml:space="preserve">
          <source>The socket timeout in milliseconds as set by &lt;a href=&quot;#net_socket_settimeout_timeout_callback&quot;&gt;&lt;code&gt;socket.setTimeout()&lt;/code&gt;&lt;/a&gt;. It is &lt;code&gt;undefined&lt;/code&gt; if a timeout has not been set.</source>
          <target state="translated">由&lt;a href=&quot;#net_socket_settimeout_timeout_callback&quot;&gt; &lt;code&gt;socket.setTimeout()&lt;/code&gt; &lt;/a&gt;设置的套接字超时（以毫秒为单位）。如果尚未设置超时，则 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a5cdd3536fe2bed3772a134a40f524b1ba55908" translate="yes" xml:space="preserve">
          <source>The socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.</source>
          <target state="translated">套接字超时逻辑是在连接时设置的,所以改变这个值只影响新的连接到服务器,而不影响任何现有的连接。</target>
        </trans-unit>
        <trans-unit id="a7bb8f2e0eabe5972b0e59beda073808bf66d7ba" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;'node.keyObject'&lt;/code&gt; value for &lt;code&gt;format&lt;/code&gt; is a Node.js-specific extension that allows converting a &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; into a Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 的特殊 &lt;code&gt;'node.keyObject'&lt;/code&gt; 值是特定于Node.js的扩展名，该扩展名允许将&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;转换为Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="687b0f4473f640453c7fbad3cd71f2dc3b2451df" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;'node.keyObject'&lt;/code&gt; value for &lt;code&gt;format&lt;/code&gt; is a Node.js-specific extension that allows converting a Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt; into a &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 的特殊 &lt;code&gt;'node.keyObject'&lt;/code&gt; 值是特定于Node.js的扩展名，它允许将Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt;转换为&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6c1c5af86acdb2cbdf7981b86ae3b974f13c3df2" translate="yes" xml:space="preserve">
          <source>The special handling of the &lt;code&gt;'error'&lt;/code&gt; event is only used when &lt;code&gt;events.once()&lt;/code&gt; is used to wait for another event. If &lt;code&gt;events.once()&lt;/code&gt; is used to wait for the '&lt;code&gt;error'&lt;/code&gt; event itself, then it is treated as any other kind of event without special handling:</source>
          <target state="translated">仅在使用 &lt;code&gt;events.once()&lt;/code&gt; 等待另一个事件时才使用对 &lt;code&gt;'error'&lt;/code&gt; 事件的特殊处理。如果使用 &lt;code&gt;events.once()&lt;/code&gt; 等待&amp;ldquo; &lt;code&gt;error'&lt;/code&gt; 事件本身，则将其视为任何其他类型的事件，而无需特殊处理：</target>
        </trans-unit>
        <trans-unit id="471976270e8935af1d178909e020a76781b88bf1" translate="yes" xml:space="preserve">
          <source>The specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;对象是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfcfaca3f84262ad37f21835b36d6a8ca0a1720e" translate="yes" xml:space="preserve">
          <source>The specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; object is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;对象是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e9568eb7140ccc6f348c4550a9426056f00bc293" translate="yes" xml:space="preserve">
          <source>The specific operation of &lt;code&gt;console.clear()&lt;/code&gt; can vary across operating systems and terminal types. For most Linux operating systems, &lt;code&gt;console.clear()&lt;/code&gt; operates similarly to the &lt;code&gt;clear&lt;/code&gt; shell command. On Windows, &lt;code&gt;console.clear()&lt;/code&gt; will clear only the output in the current terminal viewport for the Node.js binary.</source>
          <target state="translated">&lt;code&gt;console.clear()&lt;/code&gt; 的特定操作可能会因操作系统和终端类型而异。对于大多数Linux操作系统， &lt;code&gt;console.clear()&lt;/code&gt; 的操作类似于 &lt;code&gt;clear&lt;/code&gt; shell命令。在Windows上， &lt;code&gt;console.clear()&lt;/code&gt; 将仅清除Node.js二进制文件在当前终端视口中的输出。</target>
        </trans-unit>
        <trans-unit id="26f56414b822e235f350940f03c7fed02c4a3f19" translate="yes" xml:space="preserve">
          <source>The specified &lt;code&gt;secureProtocol&lt;/code&gt; method is invalid. It is either unknown, or disabled because it is insecure.</source>
          <target state="translated">指定的 &lt;code&gt;secureProtocol&lt;/code&gt; 方法无效。它是未知的，或者因为不安全而被禁用。</target>
        </trans-unit>
        <trans-unit id="d4404d9ad06af7978ed7f6400d6bff8448f52f29" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if it uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="translated">说明符字符串不执行任何搜索，并且必须与提供给 &lt;code&gt;require()&lt;/code&gt; 或 &lt;code&gt;import&lt;/code&gt; 的内容完全匹配。因此，如果策略使用多个不同的字符串指向相同的模块（例如，不包括扩展名），则该策略中可能需要多个说明符。</target>
        </trans-unit>
        <trans-unit id="7d1dd38b3953bad12ed9a2d4c03e49e9322e0421" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if &lt;code&gt;require()&lt;/code&gt; uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="translated">该说明符字符串不执行任何搜索，并且必须与提供给 &lt;code&gt;require()&lt;/code&gt; 的内容完全匹配。因此，如果 &lt;code&gt;require()&lt;/code&gt; 使用多个不同的字符串指向同一模块（例如，不包括扩展名），则策略中可能需要多个说明符。</target>
        </trans-unit>
        <trans-unit id="71c55e13b6ab04144ed0ca0148cd676f281a362f" translate="yes" xml:space="preserve">
          <source>The specifiers of all dependencies of this module. The returned array is frozen to disallow any changes to it.</source>
          <target state="translated">该模块所有依赖关系的指定者。返回的数组被冻结,不允许对其进行任何修改。</target>
        </trans-unit>
        <trans-unit id="6712a27a78d38007f4db6badef0327b5c9f247ac" translate="yes" xml:space="preserve">
          <source>The speed of &lt;code&gt;zlib&lt;/code&gt; compression is affected most dramatically by the &lt;code&gt;level&lt;/code&gt; setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster.</source>
          <target state="translated">&lt;code&gt;level&lt;/code&gt; 设置对 &lt;code&gt;zlib&lt;/code&gt; 压缩速度的影响最大。较高的级别将导致更好的压缩，但需要更长的时间才能完成。较低的级别将导致较少的压缩，但是会更快。</target>
        </trans-unit>
        <trans-unit id="9f140bd77b59dd2bfa3880ec33f46f0f9a65f847" translate="yes" xml:space="preserve">
          <source>The spkac argument can be an ArrayBuffer. Added encoding. Limited the size of the spkac argument to a maximum of 2**31 - 1 bytes.</source>
          <target state="translated">spkac参数可以是一个ArrayBuffer。增加了编码。限制了spkac参数的大小,最大为2**31-1字节。</target>
        </trans-unit>
        <trans-unit id="f3c3471750476207bc92fe6af34fa69f0f5ad275" translate="yes" xml:space="preserve">
          <source>The spkac argument can be an ArrayBuffer. Limited the size of the spkac argument to a maximum of 2**31 - 1 bytes.</source>
          <target state="translated">spkac参数可以是一个ArrayBuffer。限制spkac参数的大小,最大为2**31-1字节。</target>
        </trans-unit>
        <trans-unit id="baae50c19885878970af46308a9fcef6e3ca5413" translate="yes" xml:space="preserve">
          <source>The stack trace is extended to include the point in time at which the &lt;code&gt;domain&lt;/code&gt; module had been loaded.</source>
          <target state="translated">堆栈跟踪已扩展为包括 &lt;code&gt;domain&lt;/code&gt; 模块已加载的时间点。</target>
        </trans-unit>
        <trans-unit id="d04dab8c062b60270fff8951733a2c1bf12db8dc" translate="yes" xml:space="preserve">
          <source>The standard deviation of the recorded event loop delays.</source>
          <target state="translated">记录的事件循环延迟的标准偏差。</target>
        </trans-unit>
        <trans-unit id="12d4241096406199958bcd38c41ce903d3de3859" translate="yes" xml:space="preserve">
          <source>The stream is closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;false&lt;/code&gt; when creating the stream.</source>
          <target state="translated">发出 &lt;code&gt;'error'&lt;/code&gt; 事件时，将关闭流，除非在创建流时将&lt;a href=&quot;#stream_new_stream_writable_options&quot;&gt; &lt;code&gt;autoDestroy&lt;/code&gt; &lt;/a&gt;选项设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f2ac76df98dbcdd434e991056889f9574990f71" translate="yes" xml:space="preserve">
          <source>The stream is not closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;true&lt;/code&gt; when creating the stream.</source>
          <target state="translated">发出 &lt;code&gt;'error'&lt;/code&gt; 事件时，不会关闭流，除非在创建流时将&lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt; &lt;code&gt;autoDestroy&lt;/code&gt; &lt;/a&gt;选项设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a44550d4120786eeeb6f0da72c77067c943d5e7f" translate="yes" xml:space="preserve">
          <source>The stream is not piped to any writable destination.</source>
          <target state="translated">该流没有被传送到任何可写的目的地。</target>
        </trans-unit>
        <trans-unit id="138b0e7f3ba481dfbd0c57d82fdbac0b326fefae" translate="yes" xml:space="preserve">
          <source>The stream's write() callback and return value are exposed.</source>
          <target state="translated">流的write()回调和返回值被暴露。</target>
        </trans-unit>
        <trans-unit id="350def31fd9875bd3d581c4fbb2b29aebcde0c4d" translate="yes" xml:space="preserve">
          <source>The string passed to &lt;code&gt;require()&lt;/code&gt; is the name of the target in &lt;code&gt;binding.gyp&lt;/code&gt; responsible for creating the &lt;code&gt;.node&lt;/code&gt; file.</source>
          <target state="translated">传递给 &lt;code&gt;require()&lt;/code&gt; 的字符串是 &lt;code&gt;binding.gyp&lt;/code&gt; 中负责创建 &lt;code&gt;.node&lt;/code&gt; 文件的目标的名称。</target>
        </trans-unit>
        <trans-unit id="1f4858a294cb8f6108238742da8a2f702b4e7800" translate="yes" xml:space="preserve">
          <source>The string representation of the local IP address the remote client is connecting on. For example, in a server listening on &lt;code&gt;'0.0.0.0'&lt;/code&gt;, if a client connects on &lt;code&gt;'192.168.1.1'&lt;/code&gt;, the value of &lt;code&gt;socket.localAddress&lt;/code&gt; would be &lt;code&gt;'192.168.1.1'&lt;/code&gt;.</source>
          <target state="translated">远程客户端正在连接的本地IP地址的字符串表示形式。例如，在侦听 &lt;code&gt;'0.0.0.0'&lt;/code&gt; 的服务器中，如果客户端在 &lt;code&gt;'192.168.1.1'&lt;/code&gt; 上连接，则 &lt;code&gt;socket.localAddress&lt;/code&gt; 的值将为 &lt;code&gt;'192.168.1.1'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c907e196491aec5b81c0d022d86f6e906bde2939" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP address. For example, &lt;code&gt;'74.125.127.100'&lt;/code&gt; or &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt;. Value may be &lt;code&gt;undefined&lt;/code&gt; if the socket is destroyed (for example, if the client disconnected).</source>
          <target state="translated">远程IP地址的字符串表示形式。例如，&amp;ldquo; &lt;code&gt;'74.125.127.100'&lt;/code&gt; 或 &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt; 。如果套接字被破坏（例如，如果客户端断开连接），则值可能 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2179deb625958e34cb0c9470426542821e19d005" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP family. &lt;code&gt;'IPv4'&lt;/code&gt; or &lt;code&gt;'IPv6'&lt;/code&gt;.</source>
          <target state="translated">远程IP系列的字符串表示形式。 &lt;code&gt;'IPv4'&lt;/code&gt; 或 &lt;code&gt;'IPv6'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b14d2cbabe1d821f1fe19c891d331b602e974058" translate="yes" xml:space="preserve">
          <source>The string representing the stack trace is lazily generated when the &lt;code&gt;error.stack&lt;/code&gt; property is &lt;strong&gt;accessed&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;访问&lt;/strong&gt; &lt;code&gt;error.stack&lt;/code&gt; 属性时，会延迟生成表示堆栈跟踪的字符串。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98fe85fdbe508ef6c827c907e5d2f1831bd9b29d" translate="yes" xml:space="preserve">
          <source>The substring that was used for the matching.</source>
          <target state="translated">用于匹配的子串。</target>
        </trans-unit>
        <trans-unit id="18a71b7db5e7d874fe3ff9bf678c83abda8ee04e" translate="yes" xml:space="preserve">
          <source>The successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be returned as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">成功生成的 &lt;code&gt;derivedKey&lt;/code&gt; 将作为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt;返回。</target>
        </trans-unit>
        <trans-unit id="d4576fd7cf24c54c52dedbc9e9bd4dfe7af6d9fe" translate="yes" xml:space="preserve">
          <source>The supplied &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. If an error occurs while deriving the key, &lt;code&gt;err&lt;/code&gt; will be set; otherwise &lt;code&gt;err&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. By default, the successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. An error will be thrown if any of the input arguments specify invalid values or types.</source>
          <target state="translated">使用两个参数调用提供的 &lt;code&gt;callback&lt;/code&gt; 函数： &lt;code&gt;err&lt;/code&gt; 和 &lt;code&gt;derivedKey&lt;/code&gt; 。如果在导出密钥时发生 &lt;code&gt;err&lt;/code&gt; 则会设置err；否则 &lt;code&gt;err&lt;/code&gt; 将为 &lt;code&gt;null&lt;/code&gt; 。默认情况下，成功生成的 &lt;code&gt;derivedKey&lt;/code&gt; 将作为&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;传递给回调。如果任何输入参数指定了无效的值或类型，将引发错误。</target>
        </trans-unit>
        <trans-unit id="e92c186f0d3e427b1fda626ba5b74b244585c6c2" translate="yes" xml:space="preserve">
          <source>The supplied &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. If an errors occurs while deriving the key, &lt;code&gt;err&lt;/code&gt; will be set; otherwise &lt;code&gt;err&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. The successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be passed to the callback as an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt;. An error will be thrown if any of the input aguments specify invalid values or types.</source>
          <target state="translated">使用两个参数调用提供的 &lt;code&gt;callback&lt;/code&gt; 函数： &lt;code&gt;err&lt;/code&gt; 和 &lt;code&gt;derivedKey&lt;/code&gt; 。如果在导出密钥时发生 &lt;code&gt;err&lt;/code&gt; 将设置err；否则，将设置为err。否则 &lt;code&gt;err&lt;/code&gt; 将为 &lt;code&gt;null&lt;/code&gt; 。成功生成的 &lt;code&gt;derivedKey&lt;/code&gt; 将作为&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt;传递给回调。如果任何输入参数指定了无效的值或类型，将引发错误。</target>
        </trans-unit>
        <trans-unit id="0957fe6b3d636aed70380ea3ee84cc5c69bf4bee" translate="yes" xml:space="preserve">
          <source>The synchronous form blocks the Node.js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using &lt;code&gt;try&amp;hellip;catch&lt;/code&gt;, or can be allowed to bubble up.</source>
          <target state="translated">同步表单会阻止Node.js事件循环和进一步的JavaScript执行，直到操作完成。异常会立即抛出，可以使用 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 进行处理，也可以使其冒泡。</target>
        </trans-unit>
        <trans-unit id="13b6f6c400f32e4c15818f48380024fa6f42a8c5" translate="yes" xml:space="preserve">
          <source>The syntax of these values is not validated by the Node.js implementation and are passed through as provided by the user or received from the peer.</source>
          <target state="translated">这些值的语法并没有被Node.js实现验证,而是通过用户提供或从对等体接收的方式传递。</target>
        </trans-unit>
        <trans-unit id="44801cbc2f250176d3045ff342a32034dd4a8bbc" translate="yes" xml:space="preserve">
          <source>The system file descriptor the &lt;code&gt;QuicEndpoint&lt;/code&gt; is bound to. This property is not set on Windows.</source>
          <target state="translated">&lt;code&gt;QuicEndpoint&lt;/code&gt; 绑定到的系统文件描述符。在Windows上未设置此属性。</target>
        </trans-unit>
        <trans-unit id="d09f488f14ab2a8621a7dca26286a0858222bd2c" translate="yes" xml:space="preserve">
          <source>The table details the algorithms supported by the Node.js Web Crypto API implementation and the APIs supported for each:</source>
          <target state="translated">该表详细介绍了Node.js Web Crypto API实现所支持的算法以及每个算法所支持的API。</target>
        </trans-unit>
        <trans-unit id="6225c4c4ebdc288d3a2d4ec23c52209f6023bf46" translate="yes" xml:space="preserve">
          <source>The term &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;Forward Secrecy&lt;/a&gt;&quot; or &quot;Perfect Forward Secrecy&quot; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="translated">术语&amp;ldquo; &lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;正向保密&lt;/a&gt; &amp;rdquo;或&amp;ldquo;完全正向保密&amp;rdquo;描述了密钥协商（即密钥交换）方法的功能。即，服务器和客户端密钥用于协商专门用于并且仅用于当前通信会话的新临时密钥。实际上，这意味着即使服务器的私钥遭到破坏，如果攻击者设法获得为会话专门生成的密钥对，则通信只能由窃听者解密。</target>
        </trans-unit>
        <trans-unit id="e930ba3f37adc9345f4bcca9cb555bc0b2e00b12" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;forward secrecy&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;perfect forward secrecy&lt;/em&gt; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="translated">术语&amp;ldquo;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;向前保密&amp;rdquo;&lt;/a&gt;&lt;/em&gt;或&amp;ldquo;&lt;em&gt;完全向前保密&amp;rdquo;&lt;/em&gt;描述了密钥协商（即密钥交换）方法的功能。即，服务器和客户端密钥用于协商专门用于且仅用于当前通信会话的新临时密钥。实际上，这意味着即使服务器的私钥受到破坏，如果攻击者设法获得专门为会话生成的密钥对，则通信只能由窃听者解密。</target>
        </trans-unit>
        <trans-unit id="0bad6d5ba86517581ea93518756b284caea90d77" translate="yes" xml:space="preserve">
          <source>The thread id as given by &lt;a href=&quot;worker_threads#worker_threads_worker_threadid&quot;&gt;&lt;code&gt;worker_threads.threadId&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">由&lt;a href=&quot;worker_threads#worker_threads_worker_threadid&quot;&gt; &lt;code&gt;worker_threads.threadId&lt;/code&gt; &lt;/a&gt;给出的线程ID</target>
        </trans-unit>
        <trans-unit id="644b7390ff4919cf711608e29230a6b5cd65c540" translate="yes" xml:space="preserve">
          <source>The thread which is generating the report will wait for the reports from Worker threads to finish. However, the latency for this will usually be low, as both running JavaScript and the event loop are interrupted to generate the report.</source>
          <target state="translated">正在生成报告的线程将等待Worker线程的报告完成。然而,这种延迟通常会很低,因为运行中的JavaScript和事件循环都会被打断以生成报告。</target>
        </trans-unit>
        <trans-unit id="5027f2889856b5eff5759ff3a0048ebbb10df85e" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must make no further use of the thread-safe function because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="translated">通过将 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 的值 &lt;code&gt;napi_tsfn_abort&lt;/code&gt; napi_release_threadsafe_function（）可以&amp;ldquo;中止&amp;rdquo;线程安全函数。这将导致除 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 之外的所有与线程安全功能关联的后续API 甚至在其引用计数达到零之前都返回 &lt;code&gt;napi_closing&lt;/code&gt; 。特别是， &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 将返回 &lt;code&gt;napi_closing&lt;/code&gt; ，从而通知线程不再可以对线程安全函数进行异步调用。这可以用作终止线程的标准。&lt;strong&gt;当接收的返回值 &lt;code&gt;napi_closing&lt;/code&gt; 从 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 线程不能再使用线程安全功能，因为不再保证它会被分配。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c593e7d8b94b3676794e201f5b57070222f901e3" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must not use the thread-safe function anymore because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="translated">通过将 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 的值 &lt;code&gt;napi_tsfn_abort&lt;/code&gt; napi_release_threadsafe_function（）可以&amp;ldquo;中止&amp;rdquo;线程安全函数。这将导致除 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; 之外的所有与线程安全功能关联的后续API甚至在其引用计数达到零之前都返回 &lt;code&gt;napi_closing&lt;/code&gt; 。特别是， &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 将返回 &lt;code&gt;napi_closing&lt;/code&gt; ，从而通知线程不再可以对线程安全函数进行异步调用。这可以用作终止线程的标准。&lt;strong&gt;当接收的返回值 &lt;code&gt;napi_closing&lt;/code&gt; 从 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 线程不再可以使用线程安全功能，因为不再保证可以分配该功能。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63541238aa26564d51eb28716b3e8da2eb477a58" translate="yes" xml:space="preserve">
          <source>The three tools listed here permit native addon developers and maintainers to create and upload binaries to public or private servers. These tools are typically integrated with CI/CD build systems like &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; and &lt;a href=&quot;https://www.appveyor.com&quot;&gt;AppVeyor&lt;/a&gt; to build and upload binaries for a variety of platforms and architectures. These binaries are then available for download by users who do not need to have a C/C++ toolchain installed.</source>
          <target state="translated">此处列出的三个工具允许本地插件开发人员和维护人员创建二进制文件并将其上传到公共或私有服务器。这些工具通常与CI / CD构建系统（例如&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt;和&lt;a href=&quot;https://www.appveyor.com&quot;&gt;AppVeyor）&lt;/a&gt;集成在一起，以构建和上传适用于各种平台和体系结构的二进制文件。这些二进制文件可供不需要安装C / C ++工具链的用户下载。</target>
        </trans-unit>
        <trans-unit id="ae69600838324998125805013d93da028ccbe298" translate="yes" xml:space="preserve">
          <source>The timeout passed to &lt;code&gt;Atomics.wait&lt;/code&gt;</source>
          <target state="translated">超时已传递给 &lt;code&gt;Atomics.wait&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e67c9640ec1fa6137f83769ae5b65b87eb23576" translate="yes" xml:space="preserve">
          <source>The timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around the Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;Event Loop&lt;/a&gt;.</source>
          <target state="translated">Node.js中的计时器函数实现了与Web浏览器提供的计时器API类似的API，但是使用了围绕Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;事件循环&lt;/a&gt;构建的不同内部实现。</target>
        </trans-unit>
        <trans-unit id="24142a2f59af56bc69ad24cdd8ff0eb028144072" translate="yes" xml:space="preserve">
          <source>The times in the stat object have the following semantics:</source>
          <target state="translated">统计对象中的时间具有以下语义。</target>
        </trans-unit>
        <trans-unit id="11338b33321f7c1210af69f2e5b2929e07ab4a7f" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">表示该文件创建时间的时间戳,以POSIX纪元后的毫秒数表示。</target>
        </trans-unit>
        <trans-unit id="17b34123fd039eac484c0932d35c7d243a87f909" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file.</source>
          <target state="translated">表示该文件创建时间的时间戳。</target>
        </trans-unit>
        <trans-unit id="724e46ddf25f0bcf42fa24bc37ddf8c0097582d7" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">表示自POSIX纪元以来最后一次改变文件状态的时间戳,用毫秒表示。</target>
        </trans-unit>
        <trans-unit id="61773109ba1c85f4ebece132711c5158b722aa5c" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed.</source>
          <target state="translated">表示文件状态最后一次改变的时间戳。</target>
        </trans-unit>
        <trans-unit id="069fd01b27a0105d764e62a925be9ce027926e36" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">表示自POSIX纪元以来最后一次访问该文件的时间戳,用毫秒表示。</target>
        </trans-unit>
        <trans-unit id="bb6699921685ac3e2dd128110a9aa9134e05fa52" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed.</source>
          <target state="translated">表示该文件最后一次被访问的时间戳。</target>
        </trans-unit>
        <trans-unit id="97c50105501bb2bfd22cb492162a0f85fc156c0e" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">表示该文件最后一次被修改的时间戳,以POSIX纪元后的毫秒数表示。</target>
        </trans-unit>
        <trans-unit id="d04d4005b317a67d275b64117bfd954f165821eb" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified.</source>
          <target state="translated">表示该文件最后一次被修改的时间戳。</target>
        </trans-unit>
        <trans-unit id="fa4ea6618725082058aed69700de61738cdcb766" translate="yes" xml:space="preserve">
          <source>The total number of &lt;code&gt;QuicStream&lt;/code&gt; instances initiated by this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicStream&lt;/code&gt; 发起的QuicStream实例的 &lt;code&gt;QuicSession&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f80e50ad05f84120e3f82d9edb13ee8b9bf8db30" translate="yes" xml:space="preserve">
          <source>The total number of &lt;code&gt;QuicStreams&lt;/code&gt; initiated by the connected peer.</source>
          <target state="translated">连接的对等 &lt;code&gt;QuicStreams&lt;/code&gt; 发起的QuicStream的总数。</target>
        </trans-unit>
        <trans-unit id="ed9310449a1c923f9594c7b9b3e0d6f018ffdde1" translate="yes" xml:space="preserve">
          <source>The total number of bidirectional streams created for this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">为此 &lt;code&gt;QuicSession&lt;/code&gt; 创建的双向流的总数。</target>
        </trans-unit>
        <trans-unit id="3c277c6c2e9062d3c4b2cbd21de24a70a38eb2bc" translate="yes" xml:space="preserve">
          <source>The total number of bytes received for this &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicStream&lt;/code&gt; 接收到的字节总数。</target>
        </trans-unit>
        <trans-unit id="e36702511f4f441012c25987ca73257efd6133c0" translate="yes" xml:space="preserve">
          <source>The total number of bytes received from the peer.</source>
          <target state="translated">从对等体收到的总字节数。</target>
        </trans-unit>
        <trans-unit id="dcc81a97e64406ee68f0964a4d72b73fa842e5d5" translate="yes" xml:space="preserve">
          <source>The total number of bytes sent by this &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">此 &lt;code&gt;QuicStream&lt;/code&gt; 发送的字节总数。</target>
        </trans-unit>
        <trans-unit id="6bf5d1e89e865692221c84e09c917fe61b4235c0" translate="yes" xml:space="preserve">
          <source>The total number of bytes sent to the peer.</source>
          <target state="translated">发送给对等体的总字节数。</target>
        </trans-unit>
        <trans-unit id="e3a6c7b85aebeca99e33b8f243261b1ebb8b27d0" translate="yes" xml:space="preserve">
          <source>The total number of bytes successfully received by the &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; 成功接收的字节总数。</target>
        </trans-unit>
        <trans-unit id="9dbb9f1bf89467a1935b1e2851b35542f463ba39" translate="yes" xml:space="preserve">
          <source>The total number of bytes the &lt;code&gt;QuicSession&lt;/code&gt; is &lt;em&gt;currently&lt;/em&gt; allowed to send to the connected peer.</source>
          <target state="translated">的字节总数 &lt;code&gt;QuicSession&lt;/code&gt; 是&lt;em&gt;目前&lt;/em&gt;允许发送到所连接的对等体。</target>
        </trans-unit>
        <trans-unit id="4ee4420a40bacb4b309040070a2a109b60250f40" translate="yes" xml:space="preserve">
          <source>The total number of milliseconds elapsed for this entry. This value will not be meaningful for all Performance Entry types.</source>
          <target state="translated">该条目经过的总毫秒数。此值并非对所有性能条目类型都有意义。</target>
        </trans-unit>
        <trans-unit id="6ffcad6baa7c9ab26cd45de6a0b3b953f96da782" translate="yes" xml:space="preserve">
          <source>The total number of times the &lt;code&gt;QuicSession&lt;/code&gt; has been blocked from sending stream data due to flow control.</source>
          <target state="translated">由于流控制， &lt;code&gt;QuicSession&lt;/code&gt; 被阻止发送流数据的总数。</target>
        </trans-unit>
        <trans-unit id="2aa09ac906eb5cb5ca920f79c7af8ba4ab849087" translate="yes" xml:space="preserve">
          <source>The total number of unacknowledged bytes this QUIC endpoint has transmitted to the connected peer.</source>
          <target state="translated">这个QUIC端点传送给连接的对等体的未确认字节总数。</target>
        </trans-unit>
        <trans-unit id="953b42ada5f329f49daadb64f49e565478963451" translate="yes" xml:space="preserve">
          <source>The total number of unidirectional streams created on this &lt;code&gt;QuicSession&lt;/code&gt;.</source>
          <target state="translated">在此 &lt;code&gt;QuicSession&lt;/code&gt; 上创建的单向流的总数。</target>
        </trans-unit>
        <trans-unit id="dceaa4442e4a67a592b8e691c590ea3c3a720f78" translate="yes" xml:space="preserve">
          <source>The tracing system uses the same time source as the one used by &lt;code&gt;process.hrtime()&lt;/code&gt;. However the trace-event timestamps are expressed in microseconds, unlike &lt;code&gt;process.hrtime()&lt;/code&gt; which returns nanoseconds.</source>
          <target state="translated">跟踪系统使用与 &lt;code&gt;process.hrtime()&lt;/code&gt; 相同的时间源。但是，跟踪事件时间戳以微秒表示，与 &lt;code&gt;process.hrtime()&lt;/code&gt; 返回纳秒不同。</target>
        </trans-unit>
        <trans-unit id="abafe3c3983a12616d3ab9d5970201bbaeddb49e" translate="yes" xml:space="preserve">
          <source>The transcoding process will use substitution characters if a given byte sequence cannot be adequately represented in the target encoding. For instance:</source>
          <target state="translated">如果一个给定的字节序列在目标编码中不能充分表示,转码过程将使用替换字符。例如:</target>
        </trans-unit>
        <trans-unit id="580e806012432ab96eb065a247141bef72a7f774" translate="yes" xml:space="preserve">
          <source>The type of an asynchronous resource was invalid. Users are also able to define their own types if using the public embedder API.</source>
          <target state="translated">异步资源的类型无效。如果使用公共的embedder API,用户也可以定义自己的类型。</target>
        </trans-unit>
        <trans-unit id="c4fe24a1a4412575d21267293d8a210703d96afd" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. Currently it may be one of: &lt;code&gt;'node'&lt;/code&gt;, &lt;code&gt;'mark'&lt;/code&gt;, &lt;code&gt;'measure'&lt;/code&gt;, &lt;code&gt;'gc'&lt;/code&gt;, &lt;code&gt;'function'&lt;/code&gt;, &lt;code&gt;'http2'&lt;/code&gt; or &lt;code&gt;'http'&lt;/code&gt;.</source>
          <target state="translated">性能条目的类型。当前，它可能是以下之一： &lt;code&gt;'node'&lt;/code&gt; ， &lt;code&gt;'mark'&lt;/code&gt; ， &lt;code&gt;'measure'&lt;/code&gt; ， &lt;code&gt;'gc'&lt;/code&gt; ， &lt;code&gt;'function'&lt;/code&gt; ， &lt;code&gt;'http2'&lt;/code&gt; 或 &lt;code&gt;'http'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a75304b33d14797ab764eb8c4c7d32f6e108038" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. It may be one of:</source>
          <target state="translated">业绩条目的类型。它可以是以下类型之一:</target>
        </trans-unit>
        <trans-unit id="5b5e053536c481a8b50ecd5b068ee7fcf0ba2c2e" translate="yes" xml:space="preserve">
          <source>The type tags are now properly compared and there are a couple minor comparison adjustments to make the check less surprising.</source>
          <target state="translated">现在,类型标签已经正确地进行了比较,并且有几个小的比较调整,使检查不那么令人惊讶。</target>
        </trans-unit>
        <trans-unit id="d1ae4d26f68ff9e770ba1c7b9fe1bb317ab919ab" translate="yes" xml:space="preserve">
          <source>The typical flow of an OCSP Request is as follows:</source>
          <target state="translated">一个OCSP请求的典型流程如下。</target>
        </trans-unit>
        <trans-unit id="ed60e000342dc962c9266db500477f9e994c8a86" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize such &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">以这种方式创建的 &lt;code&gt;Buffer&lt;/code&gt; 实例的基础内存&lt;em&gt;未初始化&lt;/em&gt;。新创建的 &lt;code&gt;Buffer&lt;/code&gt; 的内容是未知的，并且&lt;em&gt;可能包含敏感数据&lt;/em&gt;。使用&lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt; &lt;code&gt;buf.fill(0)&lt;/code&gt; &lt;/a&gt;初始化此类 &lt;code&gt;Buffer&lt;/code&gt; 实例为零。</target>
        </trans-unit>
        <trans-unit id="58b7a5f60ed15b149caff061065151e09d20b14b" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">以这种方式创建的 &lt;code&gt;Buffer&lt;/code&gt; 实例的基础内存&lt;em&gt;未初始化&lt;/em&gt;。新创建的 &lt;code&gt;Buffer&lt;/code&gt; 的内容是未知的，并且&lt;em&gt;可能包含敏感数据&lt;/em&gt;。使用&lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt;代替以零初始化 &lt;code&gt;Buffer&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="4ef9fd7dad9eaa34841c0f3a9cab53f8a8cb3e58" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">以这种方式创建的 &lt;code&gt;Buffer&lt;/code&gt; 实例的基础内存&lt;em&gt;未初始化&lt;/em&gt;。新创建的 &lt;code&gt;Buffer&lt;/code&gt; 的内容是未知的，并且&lt;em&gt;可能包含敏感数据&lt;/em&gt;。使用&lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt;代替以零初始化 &lt;code&gt;Buffer&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="8a787b77e22fb6f3e77127ec8593459c30794b75" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;SlowBuffer&lt;/code&gt; instances is &lt;em&gt;not initialized&lt;/em&gt;. The contents of a newly created &lt;code&gt;SlowBuffer&lt;/code&gt; are unknown and may contain sensitive data. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize a &lt;code&gt;SlowBuffer&lt;/code&gt; with zeroes.</source>
          <target state="translated">&lt;code&gt;SlowBuffer&lt;/code&gt; 实例的基础内存&lt;em&gt;未初始化&lt;/em&gt;。新创建的 &lt;code&gt;SlowBuffer&lt;/code&gt; 的内容是未知的，并且可能包含敏感数据。使用&lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt; &lt;code&gt;buf.fill(0)&lt;/code&gt; &lt;/a&gt;初始化为零的 &lt;code&gt;SlowBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="867a8f54f53cc42a74637197afdab6fff988978b" translate="yes" xml:space="preserve">
          <source>The undocumented &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; function was originally intended for debugging and performance tuning when using the &lt;code&gt;child_process&lt;/code&gt; and &lt;code&gt;cluster&lt;/code&gt; modules on Windows. The function is not generally useful and is being removed. See discussion here: &lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https://github.com/nodejs/node/issues/18391&lt;/a&gt;</source>
          <target state="translated">未记录的 &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; 函数最初旨在在Windows上使用 &lt;code&gt;child_process&lt;/code&gt; 和 &lt;code&gt;cluster&lt;/code&gt; 模块时进行调试和性能调整。该功能通常没有用，将被删除。请参阅此处的讨论：&lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https&lt;/a&gt; : //github.com/nodejs/node/issues/18391</target>
        </trans-unit>
        <trans-unit id="f23d948afe211552dd615d56c748e645934ac592" translate="yes" xml:space="preserve">
          <source>The unwrapped key algorithms supported include:</source>
          <target state="translated">支持的解包密钥算法包括:。</target>
        </trans-unit>
        <trans-unit id="4b521521f75103faccb7d51cd9d2f1b5e0e6ccaf" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;readable.setEncoding()&lt;/code&gt; will change the behavior of how the &lt;code&gt;highWaterMark&lt;/code&gt; operates in non-object mode.</source>
          <target state="translated">&lt;code&gt;highWaterMark&lt;/code&gt; &lt;code&gt;readable.setEncoding()&lt;/code&gt; 的使用将改变highWaterMark在非对象模式下的操作方式。</target>
        </trans-unit>
        <trans-unit id="27af502777cc48272ed80adad79f83defdbec1fe" translate="yes" xml:space="preserve">
          <source>The use of the &lt;code&gt;'error'&lt;/code&gt; event mechanism is most common for &lt;a href=&quot;stream&quot;&gt;stream-based&lt;/a&gt; and &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;event emitter-based&lt;/a&gt; APIs, which themselves represent a series of asynchronous operations over time (as opposed to a single operation that may pass or fail).</source>
          <target state="translated">使用的 &lt;code&gt;'error'&lt;/code&gt; 事件机制是最常见的用于&lt;a href=&quot;stream&quot;&gt;基于数据流&lt;/a&gt;和&lt;a href=&quot;events#events_class_eventemitter&quot;&gt;基于事件的发射极-&lt;/a&gt; API，它们本身代表随时间的一系列异步操作的（相对于可通过或失败的单个操作）。</target>
        </trans-unit>
        <trans-unit id="f9afa630637657eabbb89a3f52ab510d1fb28688" translate="yes" xml:space="preserve">
          <source>The use of the Extended CONNECT Protocol is enabled by HTTP/2 servers by using the &lt;code&gt;enableConnectProtocol&lt;/code&gt; setting:</source>
          <target state="translated">HTTP / 2服务器通过使用 &lt;code&gt;enableConnectProtocol&lt;/code&gt; 设置来启用扩展连接协议的使用：</target>
        </trans-unit>
        <trans-unit id="300d2118e20daa8e0f1e2f8f53ad243a96013499" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if Node.js is built on the Android operating system. &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;Android support is experimental&lt;/a&gt;.</source>
          <target state="translated">如果Node.js构建在Android操作系统上，则也可能返回值 &lt;code&gt;'android'&lt;/code&gt; 。&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;Android支持是试验性的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="59f4a988511ad2f772cdb10a461f62d9115d066c" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;is experimental&lt;/a&gt;.</source>
          <target state="translated">如果Node.js构建在Android操作系统上，则也可能返回值 &lt;code&gt;'android'&lt;/code&gt; 。但是，Node.js对Android的支持&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;是试验性的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c07b4ef549b464279da1a098d4302bead0c3d309" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js is considered &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;to be experimental&lt;/a&gt; at this time.</source>
          <target state="translated">如果Node.js构建在Android操作系统上，则也可能返回值 &lt;code&gt;'android'&lt;/code&gt; 。但是，目前认为Node.js中的Android支持&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;是试验性的&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="941fe2cec88cb061344cd4ca3f47041ec7d3d800" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;0&lt;/code&gt; is now accepted as a file descriptor.</source>
          <target state="translated">现在接受值 &lt;code&gt;0&lt;/code&gt; 作为文件描述符。</target>
        </trans-unit>
        <trans-unit id="ddbfd621c854ebb6c9668e80ef6194f125b93fb8" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;undefined&lt;/code&gt; cannot be used for cases where there is not a thrown exception due to possible ambiguity with &lt;code&gt;throw undefined;&lt;/code&gt;.</source>
          <target state="translated">该值 &lt;code&gt;undefined&lt;/code&gt; 不能使用情况下，有没有因为与不确定性可能抛出的异常 &lt;code&gt;throw undefined;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a47e663aba60ac6e53c0368dd88e44d713b4b29" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;clientHelloHandler&lt;/code&gt; is an async function that is called at the start of a new &lt;code&gt;QuicServerSession&lt;/code&gt;. It is invoked with three arguments:</source>
          <target state="translated">&lt;code&gt;clientHelloHandler&lt;/code&gt; 的值是一个异步函数，该函数在新 &lt;code&gt;QuicServerSession&lt;/code&gt; 的开始处调用。它由三个参数调用：</target>
        </trans-unit>
        <trans-unit id="d78b331e35be7b21a30c47f32e06a07819b550e7" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries environment variables for the home directory before falling back to the operating system response.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; 返回的 &lt;code&gt;homedir&lt;/code&gt; 的值由操作系统提供。这与 &lt;code&gt;os.homedir()&lt;/code&gt; 的结果不同，os.homedir（）在回落到操作系统响应之前先查询环境变量的主目录。</target>
        </trans-unit>
        <trans-unit id="c22adcf410f61546f4cf7752ab0362f5a6a5606a" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries several environment variables for the home directory before falling back to the operating system response.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; 返回的 &lt;code&gt;homedir&lt;/code&gt; 的值由操作系统提供。这与 &lt;code&gt;os.homedir()&lt;/code&gt; 的结果不同，os.homedir（）在回退到操作系统响应之前，先查询几个环境变量以获取主目录。</target>
        </trans-unit>
        <trans-unit id="6329830cca711ff7e90b6ad78fe1cb5caa3423e1" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; is &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; within the script.</source>
          <target state="translated">值 &lt;code&gt;this&lt;/code&gt; 是&lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt;的脚本中。</target>
        </trans-unit>
        <trans-unit id="f4c400444128a7253063ab3d3ca508cbfb8b9928" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.hash&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlObject.hash&lt;/code&gt; 的值附加到 &lt;code&gt;result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f11b40efff2f11ec85da3f23b35a76cc6588c477" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.pathname&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlObject.pathname&lt;/code&gt; 的值附加到 &lt;code&gt;result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5ee59ce8058895b38d6200c77460df3494139ea" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.port&lt;/code&gt; is coerced to a string and appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlObject.port&lt;/code&gt; 的值被强制为字符串，并附加到 &lt;code&gt;result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9a81e556419112a8d0a931ecf395dd3247be233" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.search&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlObject.search&lt;/code&gt; 的值附加到 &lt;code&gt;result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7948e802953d66c2402ca8fa5d1b25f66c1e5b8" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;code&gt;postMessage()&lt;/code&gt; contained an object that is not supported for transferring.</source>
          <target state="translated">传递给 &lt;code&gt;postMessage()&lt;/code&gt; 的值包含一个不支持传输的对象。</target>
        </trans-unit>
        <trans-unit id="e79bd05eced9303cb66ff355ac9f577ee93b88c0" translate="yes" xml:space="preserve">
          <source>The value returned is an array of objects containing the following properties:</source>
          <target state="translated">返回的值是一个包含以下属性的对象数组。</target>
        </trans-unit>
        <trans-unit id="ca7dd665e8fdfe267d513d08093ce8bedbca4171" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if decoding errors result in a &lt;code&gt;TypeError&lt;/code&gt; being thrown.</source>
          <target state="translated">如果解码错误导致 &lt;code&gt;TypeError&lt;/code&gt; ，则该值为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1ca85b3627e52d634af29f4b8a623574861fb2b" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if the decoding result will include the byte order mark.</source>
          <target state="translated">如果解码结果包含字节顺序标记，则该值为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="104132237db0b7ecb17081ab083c9af7c1d419d4" translate="yes" xml:space="preserve">
          <source>The variables &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; will be available inside the function body following the macro invocation.</source>
          <target state="translated">宏调用之后，变量 &lt;code&gt;env&lt;/code&gt; 和 &lt;code&gt;exports&lt;/code&gt; 将在函数体内可用。</target>
        </trans-unit>
        <trans-unit id="1ca2642bb4155ee750ac00797ce4a46dc67ac445" translate="yes" xml:space="preserve">
          <source>The various loader hooks can be used together to accomplish wide-ranging customizations of Node.js&amp;rsquo; code loading and evaluation behaviors.</source>
          <target state="translated">各种加载器挂钩可一起使用，以完成Node.js代码加载和评估行为的广泛自定义。</target>
        </trans-unit>
        <trans-unit id="b4d706806806ea43c9c128b45cdecd01ed8d570e" translate="yes" xml:space="preserve">
          <source>The vm context passed into the API is not yet initialized. This could happen when an error occurs (and is caught) during the creation of the context, for example, when the allocation fails or the maximum call stack size is reached when the context is created.</source>
          <target state="translated">传入API的vm上下文尚未初始化。这种情况可能发生在创建上下文的过程中发生错误(并被捕获),例如,当分配失败或创建上下文时达到最大调用栈大小时。</target>
        </trans-unit>
        <trans-unit id="5db8a3896318b6c0ba6edb751fb3c96e7c3235a0" translate="yes" xml:space="preserve">
          <source>The volume root may be referenced via &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;file:///&lt;/code&gt;. Given the differences between &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;URL&lt;/a&gt; and path resolution (such as percent encoding details), it is recommended to use &lt;a href=&quot;url#url_url_pathtofileurl_path&quot;&gt;url.pathToFileURL&lt;/a&gt; when importing a path.</source>
          <target state="translated">卷根可以通过 &lt;code&gt;/&lt;/code&gt; ， &lt;code&gt;//&lt;/code&gt; 或 &lt;code&gt;file:///&lt;/code&gt; 来引用。考虑到&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;URL&lt;/a&gt;和路径分辨率之间的差异（例如百分比编码详细信息），建议在导入路径时使用&lt;a href=&quot;url#url_url_pathtofileurl_path&quot;&gt;url.pathToFileURL&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1a3768d673fbfe9fe1a8bf340a95d76c85f8f437" translate="yes" xml:space="preserve">
          <source>The workaround in this situation is to call the &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method to begin the flow of data:</source>
          <target state="translated">在这种情况下，解决方法是调用&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt;方法开始数据流：</target>
        </trans-unit>
        <trans-unit id="4d6edeb8cb0fc86e77857d0fda8d129467b2e13b" translate="yes" xml:space="preserve">
          <source>The worker processes are spawned using the &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.</source>
          <target state="translated">使用&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;方法生成工作进程，以便它们可以通过IPC与父进程通信并来回传递服务器句柄。</target>
        </trans-unit>
        <trans-unit id="aaa2d3ce72e4b3a43da91c13bc4934c0350da0af" translate="yes" xml:space="preserve">
          <source>The wrapper function is expected to be called exactly &lt;code&gt;exact&lt;/code&gt; times. If the function has not been called exactly &lt;code&gt;exact&lt;/code&gt; times when &lt;a href=&quot;#assert_tracker_verify&quot;&gt;&lt;code&gt;tracker.verify()&lt;/code&gt;&lt;/a&gt; is called, then &lt;a href=&quot;#assert_tracker_verify&quot;&gt;&lt;code&gt;tracker.verify()&lt;/code&gt;&lt;/a&gt; will throw an error.</source>
          <target state="translated">包装函数应 &lt;code&gt;exact&lt;/code&gt; 地称为精确时间。如果在调用&lt;a href=&quot;#assert_tracker_verify&quot;&gt; &lt;code&gt;tracker.verify()&lt;/code&gt; &lt;/a&gt;时未 &lt;code&gt;exact&lt;/code&gt; 调用该函数，则&lt;a href=&quot;#assert_tracker_verify&quot;&gt; &lt;code&gt;tracker.verify()&lt;/code&gt; &lt;/a&gt;将引发错误。</target>
        </trans-unit>
        <trans-unit id="c9e54715173213ef9c83146469b98fdbe2d4b0be" translate="yes" xml:space="preserve">
          <source>The wrapping algorithms currently supported include:</source>
          <target state="translated">目前支持的封装算法包括:</target>
        </trans-unit>
        <trans-unit id="052d8814bbbc21731431f0d8bff6bf49f919c5ba" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;request.url&lt;/code&gt; will be:</source>
          <target state="translated">然后 &lt;code&gt;request.url&lt;/code&gt; 将是：</target>
        </trans-unit>
        <trans-unit id="a61cfdea6d9cf8368ee65114d036782e86c7ccd2" translate="yes" xml:space="preserve">
          <source>Then any module &lt;em&gt;in that package&lt;/em&gt; can reference an export in the package itself:</source>
          <target state="translated">然后&lt;em&gt;，该软件包中的&lt;/em&gt;任何模块都可以引用该软件包本身中的导出：</target>
        </trans-unit>
        <trans-unit id="0c414cc316bb380ca834b2610259a592dc194ac7" translate="yes" xml:space="preserve">
          <source>Then in another file we could do:</source>
          <target state="translated">然后在另一个文件中,我们可以做。</target>
        </trans-unit>
        <trans-unit id="0bfbe586e02fe7477b1253341534ea2bb9055af6" translate="yes" xml:space="preserve">
          <source>Then, in &lt;code&gt;myobject.h&lt;/code&gt;, the wrapper class inherits from &lt;code&gt;node::ObjectWrap&lt;/code&gt;:</source>
          <target state="translated">然后，在 &lt;code&gt;myobject.h&lt;/code&gt; 中，包装器类继承自 &lt;code&gt;node::ObjectWrap&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="90426bdb684915cfaf8776137e646120a460c1af" translate="yes" xml:space="preserve">
          <source>Then, the above function can be invoked from a native add-on using the following code:</source>
          <target state="translated">然后,可以使用以下代码从本地插件中调用上述功能。</target>
        </trans-unit>
        <trans-unit id="73571d4285a148f8c850321e41ee7538063e9a0e" translate="yes" xml:space="preserve">
          <source>There are a few design considerations when declaring a module that may be loaded multiple times. The documentation of &lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;context-aware addons&lt;/a&gt; provides more details.</source>
          <target state="translated">在声明一个可以多次加载的模块时，需要考虑一些设计注意事项。&lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;上下文相关插件&lt;/a&gt;的文档提供了更多详细信息。</target>
        </trans-unit>
        <trans-unit id="ba61ede2581496949913fe44efcbd9784cfd62d9" translate="yes" xml:space="preserve">
          <source>There are a few special headers that should be noted.</source>
          <target state="translated">有几个特殊的标题需要注意。</target>
        </trans-unit>
        <trans-unit id="136d6e7557a4d34635921dd2991584bcb620088d" translate="yes" xml:space="preserve">
          <source>There are cases (for example, resolving promises) where it is necessary to have the equivalent of the scope associated with a callback in place when making certain N-API calls. If there is no other script on the stack the &lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt;&lt;code&gt;napi_open_callback_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt;&lt;code&gt;napi_close_callback_scope&lt;/code&gt;&lt;/a&gt; functions can be used to open/close the required scope.</source>
          <target state="translated">在某些情况下（例如，解决承诺），在进行某些N-API调用时，必须具有与回调关联的作用域的等效项。如果堆栈上没有其他脚本，则可以使用&lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt; &lt;code&gt;napi_open_callback_scope&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt; &lt;code&gt;napi_close_callback_scope&lt;/code&gt; &lt;/a&gt;函数打开/关闭所需的作用域。</target>
        </trans-unit>
        <trans-unit id="dbf25be1fb4ee565e1f98036a323d619cf26ae97" translate="yes" xml:space="preserve">
          <source>There are environments in which Node.js addons may need to be loaded multiple times in multiple contexts. For example, the &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; runtime runs multiple instances of Node.js in a single process. Each instance will have its own &lt;code&gt;require()&lt;/code&gt; cache, and thus each instance will need a native addon to behave correctly when loaded via &lt;code&gt;require()&lt;/code&gt;. From the addon's perspective, this means that it must support multiple initializations.</source>
          <target state="translated">在某些环境中，可能需要在多个上下文中多次加载Node.js插件。例如，&lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt;运行时在单个进程中运行Node.js的多个实例。每个实例都有其自己的 &lt;code&gt;require()&lt;/code&gt; 缓存，因此，每个实例都需要一个本机插件，以便在通过 &lt;code&gt;require()&lt;/code&gt; 加载时正确运行。从插件的角度来看，这意味着它必须支持多个初始化。</target>
        </trans-unit>
        <trans-unit id="02916d0d2e172dc9132cfe0f3dc885c486e1871f" translate="yes" xml:space="preserve">
          <source>There are environments in which Node.js addons may need to be loaded multiple times in multiple contexts. For example, the &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; runtime runs multiple instances of Node.js in a single process. Each instance will have its own &lt;code&gt;require()&lt;/code&gt; cache, and thus each instance will need a native addon to behave correctly when loaded via &lt;code&gt;require()&lt;/code&gt;. This means that the addon must support multiple initializations.</source>
          <target state="translated">在某些环境中，可能需要在多个上下文中多次加载Node.js插件。例如，&lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt;运行时在单个进程中运行Node.js的多个实例。每个实例都有其自己的 &lt;code&gt;require()&lt;/code&gt; 缓存，因此，每个实例都需要一个本机插件，才能在通过 &lt;code&gt;require()&lt;/code&gt; 加载时正常运行。这意味着该插件必须支持多个初始化。</target>
        </trans-unit>
        <trans-unit id="efb4ff938e74b88ea0e6e30ab328bd442468ef8f" translate="yes" xml:space="preserve">
          <source>There are equivalents to the zlib options for Brotli-based streams, although these options have different ranges than the zlib ones:</source>
          <target state="translated">对于基于Brotli的流,有相当于zlib的选项,尽管这些选项的范围与zlib的不同。</target>
        </trans-unit>
        <trans-unit id="9941613492520ff34cf0deb38e791800ee7a5c07" translate="yes" xml:space="preserve">
          <source>There are four fundamental stream types within Node.js:</source>
          <target state="translated">Node.js内有四种基本的流类型。</target>
        </trans-unit>
        <trans-unit id="fc4dbbcc7e66991e2b95ea58b7a4fa29fa2b495b" translate="yes" xml:space="preserve">
          <source>There are four kinds of headers that the Node.js QUIC implementation is capable of handling dependent entirely on known application protocol support:</source>
          <target state="translated">Node.js QUIC实现能够处理四种完全依赖于已知应用协议支持的头文件。</target>
        </trans-unit>
        <trans-unit id="dde1500fca17353440ae8484822501b542d81fb1" translate="yes" xml:space="preserve">
          <source>There are four types of specifiers:</source>
          <target state="translated">有四种类型的指定人。</target>
        </trans-unit>
        <trans-unit id="8a931ff5d55f1c3afbe2f95105c6e77b48277bb0" translate="yes" xml:space="preserve">
          <source>There are many stream objects provided by Node.js. For instance, a &lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;request to an HTTP server&lt;/a&gt; and &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; are both stream instances.</source>
          <target state="translated">Node.js提供了许多流对象。例如，&lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;对HTTP服务器&lt;/a&gt;的请求和&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;都是流实例。</target>
        </trans-unit>
        <trans-unit id="489828fe1e889442eeda5f8face869dde3d76a80" translate="yes" xml:space="preserve">
          <source>There are occasions where &lt;code&gt;napi_instanceof()&lt;/code&gt; is insufficient for ensuring that a JavaScript object is a wrapper for a certain native type. This is the case especially when wrapped JavaScript objects are passed back into the addon via static methods rather than as the &lt;code&gt;this&lt;/code&gt; value of prototype methods. In such cases there is a chance that they may be unwrapped incorrectly.</source>
          <target state="translated">在某些情况下， &lt;code&gt;napi_instanceof()&lt;/code&gt; 不足以确保JavaScript对象是某种本机类型的包装。当包装的JavaScript对象通过静态方法而不是作为原型方法的 &lt;code&gt;this&lt;/code&gt; 值传递回附加组件时，尤其是这种情况。在这种情况下，它们可能会被错误地解开包装。</target>
        </trans-unit>
        <trans-unit id="1b08753e896dc3b6a7c1f8c73d6f29652afc9286" translate="yes" xml:space="preserve">
          <source>There are ongoing efforts to make the latter code possible.</source>
          <target state="translated">目前正在努力使后一种代码成为可能。</target>
        </trans-unit>
        <trans-unit id="cca70f7a24329f2fb4b95221882a8404c5c05645" translate="yes" xml:space="preserve">
          <source>There are only 5 TLSv1.3 cipher suites:</source>
          <target state="translated">只有5个TLSv1.3密码套件。</target>
        </trans-unit>
        <trans-unit id="5431d0afa6129bcba426cef1e17c022c359e7b17" translate="yes" xml:space="preserve">
          <source>There are several options and other constants available for Brotli-based streams:</source>
          <target state="translated">对于基于Brotli的流,有几个选项和其他常量可用。</target>
        </trans-unit>
        <trans-unit id="42e16077da0035c3069c49856eb3033b4b72553d" translate="yes" xml:space="preserve">
          <source>There are several options that can be set on Brotli encoders, affecting compression efficiency and speed. Both the keys and the values can be accessed as properties of the &lt;code&gt;zlib.constants&lt;/code&gt; object.</source>
          <target state="translated">Brotli编码器上可以设置几个选项，这些选项会影响压缩效率和速度。键和值都可以作为 &lt;code&gt;zlib.constants&lt;/code&gt; 对象的属性访问。</target>
        </trans-unit>
        <trans-unit id="68a19ad87ed88b1d5cfb1b645ade3d15711bd59d" translate="yes" xml:space="preserve">
          <source>There are several types of error conditions that may arise when using the &lt;code&gt;http2&lt;/code&gt; module:</source>
          <target state="translated">使用 &lt;code&gt;http2&lt;/code&gt; 模块时，可能会出现几种错误情况：</target>
        </trans-unit>
        <trans-unit id="26c7f747d478773cb0c7b9fd07d4c61acf3a4a1f" translate="yes" xml:space="preserve">
          <source>There are some cases where it is necessary to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In such cases, it is possible to call &lt;code&gt;readable.read(0)&lt;/code&gt;, which will always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">在某些情况下，有必要在不实际消耗任何数据的情况下触发底层可读流机制的刷新。在这种情况下，可以调用 &lt;code&gt;readable.read(0)&lt;/code&gt; ，该方法将始终返回 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd9ef41883fe3bdd2c2207efb8d44bad0186fe1c" translate="yes" xml:space="preserve">
          <source>There are subtle consequences in choosing one over the other, please consult the &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;Implementation considerations section&lt;/a&gt; for more information.</source>
          <target state="translated">选择其中一种会有细微的后果，请参阅&amp;ldquo; &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;实施注意事项&amp;rdquo;部分&lt;/a&gt;以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="6d6fbe184691d2e54bbf5609f598f34c9f95c95a" translate="yes" xml:space="preserve">
          <source>There are three options for implementing Addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless you need direct access to functionality which is not exposed by N-API, use N-API. Refer to the section &lt;a href=&quot;n-api&quot;&gt;C/C++ Addons - N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="translated">有三种实现插件的选项：N-API，nan或直接使用内部V8，libuv和Node.js库。除非您需要直接访问N-API未公开的功能，否则请使用N-API。有关&lt;a href=&quot;n-api&quot;&gt;N-API&lt;/a&gt;的更多信息，请参阅C / C ++插件 -N-API部分。</target>
        </trans-unit>
        <trans-unit id="6a84e67ac6afa19b0bb7e32d3243ac6912e617a6" translate="yes" xml:space="preserve">
          <source>There are three options for implementing addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless there is a need for direct access to functionality which is not exposed by N-API, use N-API. Refer to &lt;a href=&quot;n-api&quot;&gt;C/C++ addons with N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="translated">有三种实现插件的选项：N-API，nan或直接使用内部V8，libuv和Node.js库。除非需要直接访问N-API未公开的功能，否则请使用N-API。&lt;a href=&quot;n-api&quot;&gt;有关N-API&lt;/a&gt;的更多信息，请参考带有N-API的C / C ++插件。</target>
        </trans-unit>
        <trans-unit id="251427a9d9da4e15ad8dfa31a1e443fc8d8344b9" translate="yes" xml:space="preserve">
          <source>There are three types of specifiers:</source>
          <target state="translated">指定人有三种类型。</target>
        </trans-unit>
        <trans-unit id="e769f43d8b2c2a24eea5250cfae5e60ed961a3d5" translate="yes" xml:space="preserve">
          <source>There are two key differences between the Node.js &lt;code&gt;EventTarget&lt;/code&gt; and the &lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt; Web API&lt;/a&gt;:</source>
          <target state="translated">Node.js &lt;code&gt;EventTarget&lt;/code&gt; 和&lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; Web API&lt;/a&gt;之间有两个主要区别：</target>
        </trans-unit>
        <trans-unit id="9db4014699f46bd5890e62e4dba34c251b486d78" translate="yes" xml:space="preserve">
          <source>There are two ways to create new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instances from a &lt;code&gt;Buffer&lt;/code&gt;:</source>
          <target state="translated">有两种方法可以从 &lt;code&gt;Buffer&lt;/code&gt; 创建新的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;实例：</target>
        </trans-unit>
        <trans-unit id="8f793dc4fcaeca43b4ba873686274c2e8f8925a7" translate="yes" xml:space="preserve">
          <source>There can be multiple persistent references created which refer to the same object, each of which will either keep the object live or not based on its individual count.</source>
          <target state="translated">可以创建多个指向同一个对象的持久化引用,每一个引用都会根据对象的个体计数来保持对象的存活或不存活。</target>
        </trans-unit>
        <trans-unit id="0fe3f1751523750e75dcc6278c56537ba6011fcb" translate="yes" xml:space="preserve">
          <source>There is a special case when sending a &lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; message. Messages containing a &lt;code&gt;NODE_&lt;/code&gt; prefix in the &lt;code&gt;cmd&lt;/code&gt; property are reserved for use within Node.js core and will not be emitted in the child's &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Rather, such messages are emitted using the &lt;code&gt;'internalMessage'&lt;/code&gt; event and are consumed internally by Node.js. Applications should avoid using such messages or listening for &lt;code&gt;'internalMessage'&lt;/code&gt; events as it is subject to change without notice.</source>
          <target state="translated">发送 &lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; 消息时有一种特殊情况。 &lt;code&gt;cmd&lt;/code&gt; 属性中包含 &lt;code&gt;NODE_&lt;/code&gt; 前缀的消息保留供在Node.js内核中使用，并且不会在子代的&lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt;事件中发出。相反，此类消息是使用 &lt;code&gt;'internalMessage'&lt;/code&gt; 事件发出的，并由Node.js在内部使用。应用程序应避免使用此类消息或监听 &lt;code&gt;'internalMessage'&lt;/code&gt; 事件，因为它可能随时更改，恕不另行通知。</target>
        </trans-unit>
        <trans-unit id="7f4a67800306ac64b920c2be0c83ae4d3007f584" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;PROMISE&lt;/code&gt; resource type, which is used to track &lt;code&gt;Promise&lt;/code&gt; instances and asynchronous work scheduled by them.</source>
          <target state="translated">还有 &lt;code&gt;PROMISE&lt;/code&gt; 资源类型，用于跟踪 &lt;code&gt;Promise&lt;/code&gt; 实例和由它们安排的异步工作。</target>
        </trans-unit>
        <trans-unit id="e31048695af7ec9e8cc2c7c604352f23bc3184d4" translate="yes" xml:space="preserve">
          <source>There is an edge case worth noting when using the &lt;code&gt;events.once()&lt;/code&gt; function to await multiple events emitted on in the same batch of &lt;code&gt;process.nextTick()&lt;/code&gt; operations, or whenever multiple events are emitted synchronously. Specifically, because the &lt;code&gt;process.nextTick()&lt;/code&gt; queue is drained before the &lt;code&gt;Promise&lt;/code&gt; microtask queue, and because &lt;code&gt;EventEmitter&lt;/code&gt; emits all events synchronously, it is possible for &lt;code&gt;events.once()&lt;/code&gt; to miss an event.</source>
          <target state="translated">在使用 &lt;code&gt;events.once()&lt;/code&gt; 函数等待在同一批 &lt;code&gt;process.nextTick()&lt;/code&gt; 操作中发出的多个事件时，或者在多个事件被同步发出时，有一个值得注意的极端情况。具体来说，由于 &lt;code&gt;process.nextTick()&lt;/code&gt; 队列在 &lt;code&gt;Promise&lt;/code&gt; 微任务队列之前被清空，并且因为 &lt;code&gt;EventEmitter&lt;/code&gt; 同步发出所有事件，所以 &lt;code&gt;events.once()&lt;/code&gt; 可能会丢失事件。</target>
        </trans-unit>
        <trans-unit id="741d73c54f957fe61e35c6abd8637dba21b785cc" translate="yes" xml:space="preserve">
          <source>There is no equivalent to this API in browsers.</source>
          <target state="translated">浏览器中没有与之对应的API。</target>
        </trans-unit>
        <trans-unit id="3a7ccafeacce74e97b6782160f11feb38555669c" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using asynchronous methods. So the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation may complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">使用异步方法时，不能保证排序。因此以下内容很容易出错，因为 &lt;code&gt;fs.stat()&lt;/code&gt; 操作可能在 &lt;code&gt;fs.rename()&lt;/code&gt; 操作之前完成：</target>
        </trans-unit>
        <trans-unit id="70935f1d3d5e4fd62d42c2c159e6aea9b6c95079" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using either the callback or promise-based methods. For example, the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation might complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">使用回调或基于Promise的方法时，不能保证排序。例如，以下内容容易出错，因为 &lt;code&gt;fs.stat()&lt;/code&gt; 操作可能在 &lt;code&gt;fs.rename()&lt;/code&gt; 操作之前完成：</target>
        </trans-unit>
        <trans-unit id="9499af4d83f7a3933b926f5089a91e801e6f9b3b" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time &amp;mdash; possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="translated">对于 &lt;code&gt;Promise&lt;/code&gt; 链没有最高级别的概念，在该级别上总是可以处理拒绝。由于本质上是异步的，因此 &lt;code&gt;Promise&lt;/code&gt; 拒绝可以在将来的某个时间点进行处理-可能比发出 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 事件所需的事件循环要晚得多。</target>
        </trans-unit>
        <trans-unit id="3485b253ac4903049655572c6b7db990c6f6ad19" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time, possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="translated">对于 &lt;code&gt;Promise&lt;/code&gt; 链没有最高级别的概念，在该级别上总是可以处理拒绝。由于本质上是异步的，因此可以在将来的某个时间点处理 &lt;code&gt;Promise&lt;/code&gt; 拒绝，它可能比发出 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 事件所需的事件循环要晚得多。</target>
        </trans-unit>
        <trans-unit id="d41af3e735ab2e346b33ec05065393fa3da84547" translate="yes" xml:space="preserve">
          <source>There is no requirement that the output be the same size as the input, the same number of chunks, or arrive at the same time. For example, a &lt;code&gt;Hash&lt;/code&gt; stream will only ever have a single chunk of output which is provided when the input is ended. A &lt;code&gt;zlib&lt;/code&gt; stream will produce output that is either much smaller or much larger than its input.</source>
          <target state="translated">不需要输出与输入大小相同，块数量相同或到达时间相同。例如， &lt;code&gt;Hash&lt;/code&gt; 流将永远只具有输入结束时提供的单个输出块。甲 &lt;code&gt;zlib&lt;/code&gt; 流将产生输出，或者小得多或者比其输入大得多。</target>
        </trans-unit>
        <trans-unit id="f6752fbe1232a75370c52187c18b0bfebe5cef5a" translate="yes" xml:space="preserve">
          <source>There is no semi-colon after &lt;code&gt;NODE_MODULE&lt;/code&gt; as it's not a function (see &lt;code&gt;node.h&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;NODE_MODULE&lt;/code&gt; 后没有分号，因为它不是函数（请参见 &lt;code&gt;node.h&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1761405f7560e0613a6cad3aca984566accc5d24" translate="yes" xml:space="preserve">
          <source>There is no way to prevent the exiting of the event loop at this point, and once all &lt;code&gt;'exit'&lt;/code&gt; listeners have finished running the Node.js process will terminate.</source>
          <target state="translated">目前无法阻止事件循环退出，一旦所有 &lt;code&gt;'exit'&lt;/code&gt; 侦听器完成运行，Node.js进程将终止。</target>
        </trans-unit>
        <trans-unit id="c8d9cd97680b932da70dad66e0e134e8da83ab30" translate="yes" xml:space="preserve">
          <source>There is not normally a reason to call this method because &lt;code&gt;ECDH&lt;/code&gt; only requires a private key and the other party's public key to compute the shared secret. Typically either &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt;&lt;code&gt;ecdh.generateKeys()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; will be called. The &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; method attempts to generate the public point/key associated with the private key being set.</source>
          <target state="translated">通常没有理由调用此方法，因为 &lt;code&gt;ECDH&lt;/code&gt; 仅需要一个私钥和另一方的公钥来计算共享密钥。通常，将&lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt; &lt;code&gt;ecdh.generateKeys()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt;。所述&lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt;方法的尝试以产生与所述专用密钥集相关联的公共点/键。</target>
        </trans-unit>
        <trans-unit id="3f3585e14ee5cd0674d2bfffe8a62484838e8f1d" translate="yes" xml:space="preserve">
          <source>There may be a delay between the &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'exit'&lt;/code&gt; events. These events can be used to detect if the process is stuck in a cleanup or if there are long-living connections.</source>
          <target state="translated">&lt;code&gt;'disconnect'&lt;/code&gt; 和 &lt;code&gt;'exit'&lt;/code&gt; 事件之间可能会有延迟。这些事件可用于检测进程是否陷入清理或是否存在长期连接。</target>
        </trans-unit>
        <trans-unit id="bba3543dee9ea91f94206f53de987930f9874179" translate="yes" xml:space="preserve">
          <source>There was a bug in Node.js or incorrect usage of Node.js internals. To fix the error, open an issue at &lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https://github.com/nodejs/node/issues&lt;/a&gt;.</source>
          <target state="translated">Node.js中存在错误或Node.js内部使用不正确。要解决该错误，请在&lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https://github.com/nodejs/node/issues&lt;/a&gt;处打开一个问题。</target>
        </trans-unit>
        <trans-unit id="db2fa69bb8b4d9e6a5a4775222f61ead5ed51450" translate="yes" xml:space="preserve">
          <source>There was an attempt to use a &lt;code&gt;MessagePort&lt;/code&gt; instance in a closed state, usually after &lt;code&gt;.close()&lt;/code&gt; has been called.</source>
          <target state="translated">尝试在关闭状态下使用 &lt;code&gt;MessagePort&lt;/code&gt; 实例，通常是在 &lt;code&gt;.close()&lt;/code&gt; 之后。</target>
        </trans-unit>
        <trans-unit id="8c2872699c52fca493a736da697cd1c55a7b7f65" translate="yes" xml:space="preserve">
          <source>Therefore to read a file's whole contents from a &lt;code&gt;readable&lt;/code&gt;, it is necessary to collect chunks across multiple &lt;code&gt;'readable'&lt;/code&gt; events:</source>
          <target state="translated">因此，要从 &lt;code&gt;readable&lt;/code&gt; 读取文件的全部内容，必须跨多个 &lt;code&gt;'readable'&lt;/code&gt; 事件收集块：</target>
        </trans-unit>
        <trans-unit id="754f342c55d3348d9516f90760098a1bea3cfcb1" translate="yes" xml:space="preserve">
          <source>These APIs provide the type &lt;code&gt;napi_threadsafe_function&lt;/code&gt; as well as APIs to create, destroy, and call objects of this type. &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; creates a persistent reference to a &lt;code&gt;napi_value&lt;/code&gt; that holds a JavaScript function which can be called from multiple threads. The calls happen asynchronously. This means that values with which the JavaScript callback is to be called will be placed in a queue, and, for each value in the queue, a call will eventually be made to the JavaScript function.</source>
          <target state="translated">这些API提供了 &lt;code&gt;napi_threadsafe_function&lt;/code&gt; 类型以及用于创建，销毁和调用此类型对象的API。 &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; 创建对 &lt;code&gt;napi_value&lt;/code&gt; 的持久引用，该引用包含可从多个线程调用的JavaScript函数。调用异步发生。这意味着将使用其调用JavaScript回调的值放置在队列中，并且对于队列中的每个值，最终将对JavaScript函数进行调用。</target>
        </trans-unit>
        <trans-unit id="a36e985e57f05c7e84c751dd0c4673cc6bb7e955" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following:</source>
          <target state="translated">这些API支持做以下事情之一。</target>
        </trans-unit>
        <trans-unit id="ab3247d3394f4459aabb0d5e7cfa8d13e0f7db8b" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following: 1. Coerce JavaScript values to specific JavaScript types (such as &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;). 2. Check the type of a JavaScript value. 3. Check for equality between two JavaScript values.</source>
          <target state="translated">这些API支持执行以下操作之一：1.将JavaScript值强制转换为特定的JavaScript类型（例如 &lt;code&gt;Number&lt;/code&gt; 或 &lt;code&gt;String&lt;/code&gt; ）。2.检查JavaScript值的类型。3.检查两个JavaScript值之间的相等性。</target>
        </trans-unit>
        <trans-unit id="f7a10234d3fe5a51cc4325ae088318cfc712a583" translate="yes" xml:space="preserve">
          <source>These CommonJS variables are not available in ES modules.</source>
          <target state="translated">这些CommonJS变量在ES模块中不可用。</target>
        </trans-unit>
        <trans-unit id="749928e253ba002f7186e912db98b776c93c0d85" translate="yes" xml:space="preserve">
          <source>These advanced options are available for controlling decompression:</source>
          <target state="translated">这些高级选项可用于控制减压。</target>
        </trans-unit>
        <trans-unit id="0b9f62edc3aaf20d90f4845d04676a42b04260ea" translate="yes" xml:space="preserve">
          <source>These are mostly for historic reasons.</source>
          <target state="translated">这些主要是出于历史原因。</target>
        </trans-unit>
        <trans-unit id="487b22b66f8d184a53a9dcfbab6f9a187dd0c70a" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backward incompatibility, but they are also expected by some users.</source>
          <target state="translated">这些行为部分是出于历史原因,因为改变它们会造成落后的不兼容,但它们也是一些用户所期望的。</target>
        </trans-unit>
        <trans-unit id="f723d23d902d3dc9557352556e6b5d454055d450" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backwards incompatibility, but they are also expected by some users.</source>
          <target state="translated">这些行为部分是出于历史的原因,因为改变它们会造成向后的不兼容,但它们也是一些用户所期望的。</target>
        </trans-unit>
        <trans-unit id="6601594dc0d69faf63c5eff08f5605677bfc46ff" translate="yes" xml:space="preserve">
          <source>These categories correlate exactly with the equivalent HTTP concepts:</source>
          <target state="translated">这些类别与等同的HTTP概念完全对应。</target>
        </trans-unit>
        <trans-unit id="6a5b136b6b60c4ed00d8df2d82c0a6a7ad030249" translate="yes" xml:space="preserve">
          <source>These errors have never been released, but had been present on master between releases.</source>
          <target state="translated">这些错误从未发布过,但在发布之间的母版上一直存在。</target>
        </trans-unit>
        <trans-unit id="d444a6c59b18503b6828306190b3da244c05eaa9" translate="yes" xml:space="preserve">
          <source>These functions are implemented quite differently than &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;. They do not use &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; and they &lt;em&gt;always&lt;/em&gt; perform a DNS query on the network. This network communication is always done asynchronously, and does not use libuv's threadpool.</source>
          <target state="translated">这些功能的实现与&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;完全不同。他们不使用&lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt; &lt;code&gt;getaddrinfo(3)&lt;/code&gt; &lt;/a&gt;，并且&lt;em&gt;总是&lt;/em&gt;在网络上执行DNS查询。这种网络通信总是异步完成的，并且不使用libuv的线程池。</target>
        </trans-unit>
        <trans-unit id="24cdde9c4ce42694fdfee71a149f5983befb138f" translate="yes" xml:space="preserve">
          <source>These functions implement the following interfaces:</source>
          <target state="translated">这些功能实现了以下接口:</target>
        </trans-unit>
        <trans-unit id="067e9ba51bba0fff71ca73b5284b6b724824a791" translate="yes" xml:space="preserve">
          <source>These objects are available in all modules. The following variables may appear to be global but are not. They exist only in the scope of modules, see the &lt;a href=&quot;modules&quot;&gt;module system documentation&lt;/a&gt;:</source>
          <target state="translated">这些对象在所有模块中均可用。以下变量似乎是全局变量，但不是全局变量。它们仅存在于模块范围内，请参阅&lt;a href=&quot;modules&quot;&gt;模块系统文档&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a92a2040e1759234554eb3d95876ef117287affb" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;.</source>
          <target state="translated">这些stat对象是 &lt;code&gt;fs.Stat&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="81ffaa5610a923a366ff2fb68c7b7ae7e89cef81" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;. If the &lt;code&gt;bigint&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, the numeric values in these objects are specified as &lt;code&gt;BigInt&lt;/code&gt;s.</source>
          <target state="translated">这些stat对象是 &lt;code&gt;fs.Stat&lt;/code&gt; 的实例。如果 &lt;code&gt;bigint&lt;/code&gt; 选项为 &lt;code&gt;true&lt;/code&gt; ，则将这些对象中的数字值指定为 &lt;code&gt;BigInt&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7f5c6bb153f7ecd9533f0a1d47aa3444a5f2641" translate="yes" xml:space="preserve">
          <source>These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals:</source>
          <target state="translated">这些时间是相对于过去的某个任意时间而言的,与一天的时间无关,因此不受时钟漂移的影响。主要用途是测量各时间间隔之间的性能。</target>
        </trans-unit>
        <trans-unit id="3a4c89847fdcc01daf5d153c985d924f1c40748c" translate="yes" xml:space="preserve">
          <source>These will also be available using the &lt;code&gt;quicsession.servername&lt;/code&gt;, &lt;code&gt;quicsession.alpnProtocol&lt;/code&gt;, and &lt;code&gt;quicsession.cipher&lt;/code&gt; properties.</source>
          <target state="translated">使用 &lt;code&gt;quicsession.servername&lt;/code&gt; ， &lt;code&gt;quicsession.alpnProtocol&lt;/code&gt; 和 &lt;code&gt;quicsession.cipher&lt;/code&gt; 属性也可以使用这些属性。</target>
        </trans-unit>
        <trans-unit id="0406dde620b7e64bbd32e4cb8c0bbc3121260bb2" translate="yes" xml:space="preserve">
          <source>They are used internally by &lt;a href=&quot;console#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;console#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">它们分别由&lt;a href=&quot;console#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;console#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;内部使用。</target>
        </trans-unit>
        <trans-unit id="b30b2dac4cfcbca285a7b7116de61f5f1237d363" translate="yes" xml:space="preserve">
          <source>They do not use the same set of configuration files than what &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses. For instance, &lt;em&gt;they do not use the configuration from &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">它们使用的配置文件集与&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;使用的集不同。例如，&lt;em&gt;他们不使用 &lt;code&gt;/etc/hosts&lt;/code&gt; 中&lt;/em&gt;&lt;em&gt;的配置&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2ea56235428b28cef1f2f9acfba69b76b619221b" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple Addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="translated">这个 &quot;Hello world &quot;的例子是一个简单的Addon,用C++编写,相当于下面的JavaScript代码。</target>
        </trans-unit>
        <trans-unit id="692dfc84db615cfec92e46e7af4aeebc4271f4fe" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="translated">这个 &quot;Hello world &quot;的例子是一个简单的插件,用C++编写,相当于下面的JavaScript代码。</target>
        </trans-unit>
        <trans-unit id="b9a3d5020dd4ab8583f35392a361607c39fac607" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;'busy'&lt;/code&gt; event may be emitted multiple times.</source>
          <target state="translated">此 &lt;code&gt;'busy'&lt;/code&gt; 事件可能会多次发出。</target>
        </trans-unit>
        <trans-unit id="66e9a4260b22fdad1a565eaa4103d9039fdbf381" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;ArrayBuffer&lt;/code&gt; is not guaranteed to correspond exactly to the original &lt;code&gt;Buffer&lt;/code&gt;. See the notes on &lt;code&gt;buf.byteOffset&lt;/code&gt; for details.</source>
          <target state="translated">不能保证此 &lt;code&gt;ArrayBuffer&lt;/code&gt; 与原始 &lt;code&gt;Buffer&lt;/code&gt; 完全对应。有关详细信息，请参见 &lt;code&gt;buf.byteOffset&lt;/code&gt; 上的注释。</target>
        </trans-unit>
        <trans-unit id="2512370bd56df49b594b7a713133b58f497c3cd9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Error&lt;/code&gt; is thrown when a read is attempted on a TTY &lt;code&gt;WriteStream&lt;/code&gt;, such as &lt;code&gt;process.stdout.on('data')&lt;/code&gt;.</source>
          <target state="translated">尝试对TTY &lt;code&gt;WriteStream&lt;/code&gt; 进行读取（例如 &lt;code&gt;process.stdout.on('data')&lt;/code&gt; )时，抛出此 &lt;code&gt;Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39742e84897b18f0eedc2af5e9fd8236a7c65b9b" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data backed by the passed in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">该API分配一个 &lt;code&gt;node::Buffer&lt;/code&gt; 对象，并使用传入缓冲区支持的数据对其进行初始化。尽管这仍然是完全受支持的数据结构，但是在大多数情况下，使用 &lt;code&gt;TypedArray&lt;/code&gt; 就足够了。</target>
        </trans-unit>
        <trans-unit id="9f9f6383f8d100211478dc2ef9a8cec62954908a" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data copied from the passed-in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">该API分配一个 &lt;code&gt;node::Buffer&lt;/code&gt; 对象，并使用从传入缓冲区复制的数据对其进行初始化。尽管这仍然是完全受支持的数据结构，但是在大多数情况下，使用 &lt;code&gt;TypedArray&lt;/code&gt; 就足够了。</target>
        </trans-unit>
        <trans-unit id="735a91d83874cde7676b3e25ee0191cf41805cb1" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">该API分配一个 &lt;code&gt;node::Buffer&lt;/code&gt; 对象。尽管这仍然是完全受支持的数据结构，但是在大多数情况下，使用 &lt;code&gt;TypedArray&lt;/code&gt; 就足够了。</target>
        </trans-unit>
        <trans-unit id="6b77dc094889eb2692e801516cd866717730e4b3" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="translated">该API分配一个JavaScript &lt;code&gt;Date&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="c196cb0b40fe69112ca66200c4a74b7260d08ead" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code using &lt;a href=&quot;#n_api_napi_get_value_external&quot;&gt;&lt;code&gt;napi_get_value_external&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该API分配带有附加外部数据的JavaScript值。这用于通过JavaScript代码传递外部数据，因此以后可以由本机代码使用&lt;a href=&quot;#n_api_napi_get_value_external&quot;&gt; &lt;code&gt;napi_get_value_external&lt;/code&gt; &lt;/a&gt;检索。</target>
        </trans-unit>
        <trans-unit id="7998ea99d1cc838811e0d8df86d28e4a62bc8591" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code. The API allows the caller to pass in a finalize callback, in case the underlying native resource needs to be cleaned up when the external JavaScript value gets collected.</source>
          <target state="translated">这个API分配一个附加了外部数据的JavaScript值。这用于通过JavaScript代码传递外部数据,以便以后可以由本地代码检索。该API允许调用者传递一个finalize回调,以备在收集外部JavaScript值时需要清理底层本地资源。</target>
        </trans-unit>
        <trans-unit id="363266f752f8dea9471bad2f288fed6c4c06c654" translate="yes" xml:space="preserve">
          <source>This API allocates a default JavaScript &lt;code&gt;Object&lt;/code&gt;. It is the equivalent of doing &lt;code&gt;new Object()&lt;/code&gt; in JavaScript.</source>
          <target state="translated">该API分配默认的JavaScript &lt;code&gt;Object&lt;/code&gt; 。这等效于在JavaScript 中执行 &lt;code&gt;new Object()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a39488fe93d490d5976e523becbfa7322dd2f6d7" translate="yes" xml:space="preserve">
          <source>This API allocates a work object that is used to execute logic asynchronously. It should be freed using &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt; once the work is no longer required.</source>
          <target state="translated">该API分配用于异步执行逻辑的工作对象。一旦不再需要工作，则应使用&lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt; &lt;code&gt;napi_delete_async_work&lt;/code&gt; &lt;/a&gt;将其释放。</target>
        </trans-unit>
        <trans-unit id="d63e8ba62f11bb852241a2b0aa7b58d201a30b7b" translate="yes" xml:space="preserve">
          <source>This API allows an add-on author to create a function object in native code. This is the primary mechanism to allow calling &lt;em&gt;into&lt;/em&gt; the add-on's native code &lt;em&gt;from&lt;/em&gt; JavaScript.</source>
          <target state="translated">该API允许附加组件作者使用本机代码创建函数对象。这是主要的机制，允许调用&lt;em&gt;到&lt;/em&gt;了附加的本地代码&lt;em&gt;从&lt;/em&gt; JavaScript的。</target>
        </trans-unit>
        <trans-unit id="8dd5fc62dd12610ddf00da4580f78086ea7a8a67" translate="yes" xml:space="preserve">
          <source>This API associates &lt;code&gt;data&lt;/code&gt; with the currently running Agent. &lt;code&gt;data&lt;/code&gt; can later be retrieved using &lt;code&gt;napi_get_instance_data()&lt;/code&gt;. Any existing data associated with the currently running Agent which was set by means of a previous call to &lt;code&gt;napi_set_instance_data()&lt;/code&gt; will be overwritten. If a &lt;code&gt;finalize_cb&lt;/code&gt; was provided by the previous call, it will not be called.</source>
          <target state="translated">该API将 &lt;code&gt;data&lt;/code&gt; 与当前正在运行的代理相关联。以后可以使用 &lt;code&gt;napi_get_instance_data()&lt;/code&gt; 检索 &lt;code&gt;data&lt;/code&gt; 。通过先前对 &lt;code&gt;napi_set_instance_data()&lt;/code&gt; 的调用而设置的与当前运行的代理相关联的所有现有数据将被覆盖。如果上一次调用提供了 &lt;code&gt;finalize_cb&lt;/code&gt; ，则不会调用它。</target>
        </trans-unit>
        <trans-unit id="bb9807accb784346da4b294170dca41195385db4" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the &lt;code&gt;key&lt;/code&gt; own property from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">此API尝试从 &lt;code&gt;object&lt;/code&gt; 删除 &lt;code&gt;key&lt;/code&gt; 拥有的属性。</target>
        </trans-unit>
        <trans-unit id="c14effd61c957bf8b764c352d4e546b6d39372bb" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the specified &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">该API尝试从 &lt;code&gt;object&lt;/code&gt; 删除指定的 &lt;code&gt;index&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eefd9d0b3eff1797f4ec8fa9a473e7edc0d2a2cb" translate="yes" xml:space="preserve">
          <source>This API can be called even if there is a pending JavaScript exception.</source>
          <target state="translated">即使有一个待定的JavaScript异常,也可以调用这个API。</target>
        </trans-unit>
        <trans-unit id="2de8f84612348b342d10646507923c0aa5b2c0a3" translate="yes" xml:space="preserve">
          <source>This API cancels queued work if it has not yet been started. If it has already started executing, it cannot be cancelled and &lt;code&gt;napi_generic_failure&lt;/code&gt; will be returned. If successful, the &lt;code&gt;complete&lt;/code&gt; callback will be invoked with a status value of &lt;code&gt;napi_cancelled&lt;/code&gt;. The work should not be deleted before the &lt;code&gt;complete&lt;/code&gt; callback invocation, even if it has been successfully cancelled.</source>
          <target state="translated">如果尚未开始，此API会取消排队的工作。如果已经开始执行，则无法取消它， &lt;code&gt;napi_generic_failure&lt;/code&gt; 将返回napi_generic_failure。如果成功，将使用状态值 &lt;code&gt;napi_cancelled&lt;/code&gt; 调用 &lt;code&gt;complete&lt;/code&gt; 回调。即使已成功取消，也不应在 &lt;code&gt;complete&lt;/code&gt; 回调之前删除该工作。</target>
        </trans-unit>
        <trans-unit id="57431dbca7e08b81d45fb5a6037ae282b5c085fc" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named own property. &lt;code&gt;key&lt;/code&gt; must be a string or a &lt;code&gt;Symbol&lt;/code&gt;, or an error will be thrown. N-API will not perform any conversion between data types.</source>
          <target state="translated">此API检查传入的 &lt;code&gt;Object&lt;/code&gt; 是否具有命名的own属性。 &lt;code&gt;key&lt;/code&gt; 必须是字符串或 &lt;code&gt;Symbol&lt;/code&gt; ，否则将引发错误。N-API不会在数据类型之间执行任何转换。</target>
        </trans-unit>
        <trans-unit id="df00668a39c6c8f23284d619d34702ee2bdec177" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named property.</source>
          <target state="translated">此API检查传入的 &lt;code&gt;Object&lt;/code&gt; 是否具有named属性。</target>
        </trans-unit>
        <trans-unit id="77017a1b76496c7920bf9d3ddbbe51f4eec0e781" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">此API检查传入的 &lt;code&gt;Object&lt;/code&gt; 是否为 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85cd50d093b265fd67db2b9b8fc771fec5f784aa" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a buffer.</source>
          <target state="translated">此API检查传入的 &lt;code&gt;Object&lt;/code&gt; 是否为缓冲区。</target>
        </trans-unit>
        <trans-unit id="8b04720a7d7ea49d3d60de79014fb69fa8491a06" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a date.</source>
          <target state="translated">此API检查传入的 &lt;code&gt;Object&lt;/code&gt; 是否为日期。</target>
        </trans-unit>
        <trans-unit id="5e43a0f69097cd9621e0e8616fc96ff13206b854" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a typed array.</source>
          <target state="translated">此API检查传入的 &lt;code&gt;Object&lt;/code&gt; 是否为类型数组。</target>
        </trans-unit>
        <trans-unit id="b1512ceb15a56445f12edb557bed0d491dd21b2b" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">此API检查传入的 &lt;code&gt;Object&lt;/code&gt; 是否为 &lt;code&gt;Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23864b8fd9618610d06ad4c9de555c8fc662e0f9" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an array buffer.</source>
          <target state="translated">此API检查传入的 &lt;code&gt;Object&lt;/code&gt; 是否为数组缓冲区。</target>
        </trans-unit>
        <trans-unit id="e8c7e3fe1e7df4ee3d1c160136ec8c8b57a30461" translate="yes" xml:space="preserve">
          <source>This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.</source>
          <target state="translated">这个API关闭传入的作用域。必须按照创建时的相反顺序关闭作用域。</target>
        </trans-unit>
        <trans-unit id="5d1aae2a2f436ea48d9c7acff12819c96b4925cc" translate="yes" xml:space="preserve">
          <source>This API converts a single &lt;code&gt;BigInt&lt;/code&gt; value into a sign bit, 64-bit little-endian array, and the number of elements in the array. &lt;code&gt;sign_bit&lt;/code&gt; and &lt;code&gt;words&lt;/code&gt; may be both set to &lt;code&gt;NULL&lt;/code&gt;, in order to get only &lt;code&gt;word_count&lt;/code&gt;.</source>
          <target state="translated">该API将单个 &lt;code&gt;BigInt&lt;/code&gt; 值转换为符号位，64位little-endian数组以及该数组中元素的数量。为了仅获取 &lt;code&gt;word_count&lt;/code&gt; ， &lt;code&gt;sign_bit&lt;/code&gt; 和 &lt;code&gt;words&lt;/code&gt; 都可以设置为 &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce0e25291cf2e6b501788d49eeebff5721c4a9c8" translate="yes" xml:space="preserve">
          <source>This API converts an array of unsigned 64-bit words into a single &lt;code&gt;BigInt&lt;/code&gt; value.</source>
          <target state="translated">此API将无符号的64位字数组转换为单个 &lt;code&gt;BigInt&lt;/code&gt; 值。</target>
        </trans-unit>
        <trans-unit id="4dacc40682bb28b50a6f0c8a84eaeb75999988ac" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="translated">该API将C &lt;code&gt;int64_t&lt;/code&gt; 类型转换为JavaScript &lt;code&gt;BigInt&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="39a65c954085e0b75e67379733eefa4137788a57" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;uint64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="translated">该API将C &lt;code&gt;uint64_t&lt;/code&gt; 类型转换为JavaScript &lt;code&gt;BigInt&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="872b6fbfcb10c1766c01c033a11510d812c343c5" translate="yes" xml:space="preserve">
          <source>This API create a new reference with the specified reference count to the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">此API使用对传入 &lt;code&gt;Object&lt;/code&gt; 的指定引用计数创建一个新引用。</target>
        </trans-unit>
        <trans-unit id="bb7a9e00501915d315dc9db028de926ed4735c81" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;DataView&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;DataView&lt;/code&gt; objects provide an array-like view over an underlying data buffer, but one which allows items of different size and type in the &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">该API 在现有 &lt;code&gt;ArrayBuffer&lt;/code&gt; 上创建一个JavaScript &lt;code&gt;DataView&lt;/code&gt; 对象。 &lt;code&gt;DataView&lt;/code&gt; 对象提供了有关基础数据缓冲区的类似数组的视图，但是允许在 &lt;code&gt;ArrayBuffer&lt;/code&gt; 中使用不同大小和类型的项。</target>
        </trans-unit>
        <trans-unit id="c2689ecf9af46ba39953d951567d6520bf653ba1" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF16-LE-encoded C string. The native string is copied.</source>
          <target state="translated">此API 从UTF16-LE编码的C字符串创建JavaScript &lt;code&gt;String&lt;/code&gt; 对象。本机字符串被复制。</target>
        </trans-unit>
        <trans-unit id="5d7c7b178115d5c2e4337be18e30534c47276b07" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF8-encoded C string. The native string is copied.</source>
          <target state="translated">该API通过UTF8编码的C字符串创建JavaScript &lt;code&gt;String&lt;/code&gt; 对象。本机字符串被复制。</target>
        </trans-unit>
        <trans-unit id="f8feb6065755866e5b518ec3409fce83787d5f3d" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from an ISO-8859-1-encoded C string. The native string is copied.</source>
          <target state="translated">该API通过ISO-8859-1编码的C字符串创建JavaScript &lt;code&gt;String&lt;/code&gt; 对象。本机字符串被复制。</target>
        </trans-unit>
        <trans-unit id="78e932bf060993a76782b2993b8d0e5d90ca6cbe" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;Symbol&lt;/code&gt; object from a UTF8-encoded C string.</source>
          <target state="translated">该API通过UTF8编码的C字符串创建JavaScript &lt;code&gt;Symbol&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="dd3e74bf0ee6bf2199a6c976eeb4432bd41d78cf" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;TypedArray&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;TypedArray&lt;/code&gt; objects provide an array-like view over an underlying data buffer where each element has the same underlying binary scalar datatype.</source>
          <target state="translated">此API 在现有 &lt;code&gt;ArrayBuffer&lt;/code&gt; 上创建一个JavaScript &lt;code&gt;TypedArray&lt;/code&gt; 对象。 &lt;code&gt;TypedArray&lt;/code&gt; 对象在基础数据缓冲区上提供了类似数组的视图，其中每个元素都具有相同的基础二进制标量数据类型。</target>
        </trans-unit>
        <trans-unit id="eb7871e3b46d5ec2a3996e81a299debc3b8ecc76" translate="yes" xml:space="preserve">
          <source>This API creates a deferred object and a JavaScript promise.</source>
          <target state="translated">这个API创建了一个延迟对象和一个JavaScript承诺。</target>
        </trans-unit>
        <trans-unit id="25573620c7961f244c4fcf1ec2dc339f590285c9" translate="yes" xml:space="preserve">
          <source>This API decrements the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="translated">这个API为传递进来的引用递减引用计数,并返回结果的引用计数。</target>
        </trans-unit>
        <trans-unit id="8eff332e350a0e574536ca03420ca38be0ab632a" translate="yes" xml:space="preserve">
          <source>This API deletes the reference passed in.</source>
          <target state="translated">这个API会删除传入的引用。</target>
        </trans-unit>
        <trans-unit id="23a2cb69e25f56f3c362034320b9ab3929281f96" translate="yes" xml:space="preserve">
          <source>This API does not observe leap seconds; they are ignored, as ECMAScript aligns with POSIX time specification.</source>
          <target state="translated">这个API不观察闰秒,它们被忽略,因为ECMAScript与POSIX时间规范一致。</target>
        </trans-unit>
        <trans-unit id="dd6fca0a073178b69d2f39a3d83f5c7410fddeac" translate="yes" xml:space="preserve">
          <source>This API frees a previously allocated work object.</source>
          <target state="translated">这个API可以释放之前分配的工作对象。</target>
        </trans-unit>
        <trans-unit id="dd8d73286c93051c5ede6fc340006b9e8edcb1b1" translate="yes" xml:space="preserve">
          <source>This API gets the element at the requested index.</source>
          <target state="translated">该API在请求的索引处获取元素。</target>
        </trans-unit>
        <trans-unit id="7f0b9e72b1ac3277c4602c64072072238f09ab14" translate="yes" xml:space="preserve">
          <source>This API gets the requested property from the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">该API从传入的 &lt;code&gt;Object&lt;/code&gt; 获取请求的属性。</target>
        </trans-unit>
        <trans-unit id="98a5e0c385afa6d2fa9a179e263dfa1942ac13cb" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToBoolean()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;Section 7.1.2&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">此API实现ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;7.1.2节中&lt;/a&gt;定义的抽象操作 &lt;code&gt;ToBoolean()&lt;/code&gt; 。如果在传入的 &lt;code&gt;Object&lt;/code&gt; 上定义了getter，则该API可以重新输入。</target>
        </trans-unit>
        <trans-unit id="d25a05e4ed2a43028a62b36f7a945008651ab9c6" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToNumber()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;Section 7.1.3&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">此API实现ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;7.1.3节中&lt;/a&gt;定义的抽象操作 &lt;code&gt;ToNumber()&lt;/code&gt; 。如果在传入的 &lt;code&gt;Object&lt;/code&gt; 上定义了吸气剂，则该API可以重新输入。</target>
        </trans-unit>
        <trans-unit id="4dcbf1148507fc0d2cb75126a083441bb025a61e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToObject()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">该API实现了ECMAScript语言规范&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;第7.1.13节中&lt;/a&gt;定义的抽象操作 &lt;code&gt;ToObject()&lt;/code&gt; 。如果在传入的 &lt;code&gt;Object&lt;/code&gt; 上定义了吸气剂，则该API可以重新输入。</target>
        </trans-unit>
        <trans-unit id="fddc49ca9e6f7884f4f7402d158c3562d69f3dad" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">该API实现了ECMAScript语言规范&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;第7.1.13节中&lt;/a&gt;定义的抽象操作 &lt;code&gt;ToString()&lt;/code&gt; 。如果在传入的 &lt;code&gt;Object&lt;/code&gt; 上定义了吸气剂，则该API可以重新输入。</target>
        </trans-unit>
        <trans-unit id="96806471eb397aab399550c79244f2cb6c1c198e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">该API实现了ECMAScript语言规范&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;第7.1.13节中&lt;/a&gt;定义的抽象操作 &lt;code&gt;ToString()&lt;/code&gt; 。如果在传入的 &lt;code&gt;Object&lt;/code&gt; 上定义了吸气剂，则该API可以重新输入。</target>
        </trans-unit>
        <trans-unit id="f06230c0740f7b63f1615ff39e6c8deed4c8847d" translate="yes" xml:space="preserve">
          <source>This API increments the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="translated">这个API为传递进来的引用递增引用计数,并返回结果的引用计数。</target>
        </trans-unit>
        <trans-unit id="b8c58ad460418d4b4b95ff2da9afea0a0ec2d635" translate="yes" xml:space="preserve">
          <source>This API is hazardous because in the following case:</source>
          <target state="translated">这个API是危险的,因为在以下情况下。</target>
        </trans-unit>
        <trans-unit id="bb85535a8220d4eff8e0e3a7ee1e3a079d312053" translate="yes" xml:space="preserve">
          <source>This API is no longer deprecated.</source>
          <target state="translated">这个API已经不再适用了。</target>
        </trans-unit>
        <trans-unit id="d0c5024828803462de5995e87af9efa3f1777afa" translate="yes" xml:space="preserve">
          <source>This API is no longer experimental.</source>
          <target state="translated">这个API不再是实验性的。</target>
        </trans-unit>
        <trans-unit id="7b50ba3deb9c757f50c565d78f7795d1c47285df" translate="yes" xml:space="preserve">
          <source>This API is optional but helpful when trying to publish messages from very performance-senstive code.</source>
          <target state="translated">这个API是可选的,但在试图从性能非常敏感的代码中发布消息时很有帮助。</target>
        </trans-unit>
        <trans-unit id="cd41e783eaf560ec51e472abe82e76eb74feeda5" translate="yes" xml:space="preserve">
          <source>This API is under development, and changes (including incompatible changes to the API or wire format) may occur until this warning is removed.</source>
          <target state="translated">这个API正在开发中,在这个警告被删除之前,可能会发生变化(包括API或线格式的不兼容变化)。</target>
        </trans-unit>
        <trans-unit id="3dfa3ff17965f642d6a192310726a8f5b8b20e85" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;double&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">此API用于将C &lt;code&gt;double&lt;/code&gt; 类型转换为JavaScript &lt;code&gt;Number&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="49877d21ef96ccd14727aaa7c002c5ffab88048a" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">该API用于将C &lt;code&gt;int32_t&lt;/code&gt; 类型转换为JavaScript &lt;code&gt;Number&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="92bc6f15a322ff8b07f019e96a8cdf7d530c3029" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">此API用于将C &lt;code&gt;int64_t&lt;/code&gt; 类型转换为JavaScript &lt;code&gt;Number&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="6503e99b292474ebaf2bcc59e2356b6df0fa3d82" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;uint32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">该API用于将C &lt;code&gt;uint32_t&lt;/code&gt; 类型转换为JavaScript &lt;code&gt;Number&lt;/code&gt; 类型。</target>
        </trans-unit>
        <trans-unit id="942e3ae495c5a4657aae15a037f4e246e6f8be57" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">该API用于指示在 &lt;code&gt;func&lt;/code&gt; 被销毁之前，在主线程上运行的事件循环可能会退出。与&lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt; &lt;code&gt;uv_unref&lt;/code&gt; &lt;/a&gt;相似，它也是幂等的。</target>
        </trans-unit>
        <trans-unit id="69d5e56003b7f8cb4d12ffc8eab17a293a3dc17b" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">该API用于指示在 &lt;code&gt;func&lt;/code&gt; 被销毁之前，在主线程上运行的事件循环可能会退出。与&lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt; &lt;code&gt;uv_unref&lt;/code&gt; &lt;/a&gt;相似，它也是幂等的。</target>
        </trans-unit>
        <trans-unit id="0b33e42364a61da332e3e2db27d345503de5d1d5" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">此API用于指示在主线程上运行的事件循环在 &lt;code&gt;func&lt;/code&gt; 被销毁之前不应该退出。与&lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt; &lt;code&gt;uv_ref&lt;/code&gt; &lt;/a&gt;相似，它也是幂等的。</target>
        </trans-unit>
        <trans-unit id="0c0b66e358caa382c17ce63f4a5db0114fdfabe6" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">该API用于指示在主线程上运行的事件循环在 &lt;code&gt;func&lt;/code&gt; 被销毁之前不应该退出。与&lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt; &lt;code&gt;uv_ref&lt;/code&gt; &lt;/a&gt;相似，它也是幂等的。</target>
        </trans-unit>
        <trans-unit id="587cd767b10603c8d3213430b7152df4d2279b2e" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of a &lt;code&gt;node::Buffer&lt;/code&gt; and it's length.</source>
          <target state="translated">该API用于检索 &lt;code&gt;node::Buffer&lt;/code&gt; 的基础数据缓冲区及其长度。</target>
        </trans-unit>
        <trans-unit id="0254baecc8eba4b547466faecb90c78e6d68158b" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of an &lt;code&gt;ArrayBuffer&lt;/code&gt; and its length.</source>
          <target state="translated">此API用于检索 &lt;code&gt;ArrayBuffer&lt;/code&gt; 的基础数据缓冲区及其长度。</target>
        </trans-unit>
        <trans-unit id="36b58192525902070d2c0a7c428788e7464512e3" translate="yes" xml:space="preserve">
          <source>This API is used to return the JavaScript singleton object that is used to represent the given boolean value.</source>
          <target state="translated">该API用于返回用于表示给定布尔值的JavaScript单子对象。</target>
        </trans-unit>
        <trans-unit id="2b8a478e9e4ad0ba2b83ceb79f6fe8b2726590f0" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which makes use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">可以从任何使用 &lt;code&gt;func&lt;/code&gt; 的线程中调用此API 。</target>
        </trans-unit>
        <trans-unit id="3a193c4c7abe861db8905fcb50538ab5a608deb2" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will start making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">可以从将开始使用 &lt;code&gt;func&lt;/code&gt; 的任何线程中调用此API 。</target>
        </trans-unit>
        <trans-unit id="6266d5dc6d62f9a22ff00a8bf12ea4d6477e4048" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will stop making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">可以从任何将停止使用 &lt;code&gt;func&lt;/code&gt; 的线程中调用此API 。</target>
        </trans-unit>
        <trans-unit id="ab533709169cd3a484819689ba1c7142adf5ce42" translate="yes" xml:space="preserve">
          <source>This API may only be called from the main thread.</source>
          <target state="translated">这个API只能从主线程调用。</target>
        </trans-unit>
        <trans-unit id="319b4e36a7ead231d4ea80e0de94d083ff5268fa" translate="yes" xml:space="preserve">
          <source>This API open a new scope from which one object can be promoted to the outer scope.</source>
          <target state="translated">这个API打开一个新的作用域,从这个作用域中可以将一个对象推广到外部作用域。</target>
        </trans-unit>
        <trans-unit id="1d428023fa95497e48d68ac408f843d544e50ef9" translate="yes" xml:space="preserve">
          <source>This API open a new scope.</source>
          <target state="translated">这个API打开了一个新的范围。</target>
        </trans-unit>
        <trans-unit id="a93e16643b3e03345deb8f8210fcb379c0d37099" translate="yes" xml:space="preserve">
          <source>This API opens a new scope from which one object can be promoted to the outer scope.</source>
          <target state="translated">这个API打开一个新的作用域,从这个作用域中可以将一个对象推广到外部作用域。</target>
        </trans-unit>
        <trans-unit id="52465275dd21628e32d7a1dd63399f75db334558" translate="yes" xml:space="preserve">
          <source>This API opens a new scope.</source>
          <target state="translated">这个API打开了一个新的范围。</target>
        </trans-unit>
        <trans-unit id="12f3e0e9a51f400dccede73be29a7a7dc94bdbcc" translate="yes" xml:space="preserve">
          <source>This API promotes the handle to the JavaScript object so that it is valid for the lifetime of the outer scope. It can only be called once per scope. If it is called more than once an error will be returned.</source>
          <target state="translated">这个API将句柄推广到JavaScript对象,使其在外层作用域的生命周期内有效。每个作用域只能调用一次。如果它被调用超过一次,将返回一个错误。</target>
        </trans-unit>
        <trans-unit id="c5d285a239d764c227e486f18daf3332cdb1bfa0" translate="yes" xml:space="preserve">
          <source>This API queries a &lt;code&gt;napi_value&lt;/code&gt; to check if it represents an error object.</source>
          <target state="translated">此API查询 &lt;code&gt;napi_value&lt;/code&gt; 以检查其是否代表错误对象。</target>
        </trans-unit>
        <trans-unit id="07a858ab5884aa274ef23a00e2dbfc7bb56465d0" translate="yes" xml:space="preserve">
          <source>This API rejects a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to reject JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="translated">该API通过与其关联的延迟对象拒绝JavaScript承诺。因此，它只能用于拒绝具有相应延迟对象的JavaScript承诺。这实际上意味着必须使用 &lt;code&gt;napi_create_promise()&lt;/code&gt; 创建了promise ，并且必须保留从该调用返回的延迟对象才能传递给此API。</target>
        </trans-unit>
        <trans-unit id="bdfac549e19d0fd3951aa268d2754e865e81e0fd" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, it has support for detecting an External value. If &lt;code&gt;value&lt;/code&gt; has a type that is invalid, an error is returned.</source>
          <target state="translated">此API表示的行为类似于在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;12.5.5节中&lt;/a&gt;定义的在对象上调用 &lt;code&gt;typeof&lt;/code&gt; 运算符。但是，它支持检测外部值。如果 &lt;code&gt;value&lt;/code&gt; 的类型无效，则返回错误。</target>
        </trans-unit>
        <trans-unit id="37b45f96b0b997e3a98523c6bb3d2db3bf4f8b51" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, there are some differences:</source>
          <target state="translated">此API表示的行为类似于在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;12.5.5节中&lt;/a&gt;定义的在对象上调用 &lt;code&gt;typeof&lt;/code&gt; 运算符。但是，有一些区别：</target>
        </trans-unit>
        <trans-unit id="d52bdf433c534f2133fcb54ff7c6f2707cbe4de1" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;IsArray&lt;/code&gt; operation on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;Section 7.2.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">该API表示在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;7.2.2节中&lt;/a&gt;定义的对象上调用 &lt;code&gt;IsArray&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="071bc6a2988b5ec1974c804b6e1314b62d4f8f5f" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;instanceof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;Section 12.10.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">此API表示在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;12.10.4节中&lt;/a&gt;定义的对象上调用 &lt;code&gt;instanceof&lt;/code&gt; 运算符。</target>
        </trans-unit>
        <trans-unit id="0c169ebc6223ec0195007a1a8dddc814e6e1bb9f" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the &lt;code&gt;ArrayBuffer&lt;/code&gt; detach operation as defined in &lt;a href=&quot;https://tc39.es/ecma262/#sec-detacharraybuffer&quot;&gt;Section 24.1.1.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">该API表示对ECMAScript语言规范&lt;a href=&quot;https://tc39.es/ecma262/#sec-detacharraybuffer&quot;&gt;第24.1.1.3节中&lt;/a&gt;定义的 &lt;code&gt;ArrayBuffer&lt;/code&gt; 分离操作的调用。</target>
        </trans-unit>
        <trans-unit id="cb8244e2d276441f1fdca1221750307d283ca0d4" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the &lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;code&gt;IsDetachedBuffer&lt;/code&gt; operation as defined in &lt;a href=&quot;https://tc39.es/ecma262/#sec-isdetachedbuffer&quot;&gt;Section 24.1.1.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">此API表示对ECMAScript语言规范的&lt;a href=&quot;https://tc39.es/ecma262/#sec-isdetachedbuffer&quot;&gt;24.1.1.2节中&lt;/a&gt;定义的 &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;code&gt;IsDetachedBuffer&lt;/code&gt; 操作的调用。</target>
        </trans-unit>
        <trans-unit id="1d161386d078bae13e76126f77747e5f73c7af9e" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the Strict Equality algorithm as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;Section 7.2.14&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">此API表示对ECMAScript语言规范&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;第7.2.14节中&lt;/a&gt;定义的严格相等算法的调用。</target>
        </trans-unit>
        <trans-unit id="9985bed5b2b909c86b4c219b81b72403588f5ec9" translate="yes" xml:space="preserve">
          <source>This API requests that the previously allocated work be scheduled for execution. Once it returns successfully, this API must not be called again with the same &lt;code&gt;napi_async_work&lt;/code&gt; item or the result will be undefined.</source>
          <target state="translated">该API请求将先前分配的工作安排为执行。成功返回后，不得再使用相同的 &lt;code&gt;napi_async_work&lt;/code&gt; 项目再次调用此API，否则结果将不确定。</target>
        </trans-unit>
        <trans-unit id="06d16e5f9910adb2bd8786d4e2bb452ed0ff9dff" translate="yes" xml:space="preserve">
          <source>This API resolves a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to resolve JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="translated">该API通过与其关联的延迟对象来解析JavaScript承诺。因此，它只能用于解析相应的延迟对象可用的JavaScript Promise。这实际上意味着必须使用 &lt;code&gt;napi_create_promise()&lt;/code&gt; 创建了promise ，并且必须保留从该调用返回的延迟对象才能传递给此API。</target>
        </trans-unit>
        <trans-unit id="27002effa854efa84116cc6ba528e82a613dccf1" translate="yes" xml:space="preserve">
          <source>This API retrieves a &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure with information about the last error that occurred.</source>
          <target state="translated">该API检索 &lt;code&gt;napi_extended_error_info&lt;/code&gt; 结构，其中包含有关最近发生的错误的信息。</target>
        </trans-unit>
        <trans-unit id="c54fae2ce18788face29f37c323cbd4a9728444f" translate="yes" xml:space="preserve">
          <source>This API retrieves data that was previously associated with the currently running Agent via &lt;code&gt;napi_set_instance_data()&lt;/code&gt;. If no data is set, the call will succeed and &lt;code&gt;data&lt;/code&gt; will be set to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">该API通过 &lt;code&gt;napi_set_instance_data()&lt;/code&gt; 检索以前与当前正在运行的代理相关联的数据。如果未设置任何数据，则调用将成功，并且 &lt;code&gt;data&lt;/code&gt; 将设置为 &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65239448f493d9f6ef4cbb9fa475b6583cc8a2fc" translate="yes" xml:space="preserve">
          <source>This API retrieves the external data pointer that was previously passed to &lt;code&gt;napi_create_external()&lt;/code&gt;.</source>
          <target state="translated">该API检索以前传递给 &lt;code&gt;napi_create_external()&lt;/code&gt; 的外部数据指针。</target>
        </trans-unit>
        <trans-unit id="f0eee031ab3af3225681355d84afe4145095683c" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="translated">该API返回JavaScript &lt;code&gt;Error&lt;/code&gt; 以及提供的文本。</target>
        </trans-unit>
        <trans-unit id="db44d290a91d87cc4443be06ede8203a66b55369" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">该API返回带有所提供文本的JavaScript &lt;code&gt;RangeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa81b73ac735abebb0edffd8561f17aa7d32742e" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">该API返回带有所提供文本的JavaScript &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eac49581d384370c2fd8061e8992f383a07a12f6" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. JavaScript arrays are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;Section 22.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">该API返回与JavaScript &lt;code&gt;Array&lt;/code&gt; 类型相对应的N-API值。JavaScript数组在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;22.1节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="5ebdcd06ac50a711b98eac9ad3ba26e473236254" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created - that behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该API返回与JavaScript &lt;code&gt;Array&lt;/code&gt; 类型相对应的N-API值。所述 &lt;code&gt;Array&lt;/code&gt; 的长度属性设置为传入的长度参数。但是，创建阵列时，VM不能保证基础缓冲区会预先分配-该行为留给基础VM实现。如果缓冲区必须是可以通过C直接读取和/或写入的连续内存块，请考虑使用&lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt; &lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6f1e1ad010526c6b95577249e9d20e0bd898f13" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created. That behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该API返回与JavaScript &lt;code&gt;Array&lt;/code&gt; 类型相对应的N-API值。所述 &lt;code&gt;Array&lt;/code&gt; 的长度属性设置为传入的长度参数。但是，创建阵列时，VM不能保证基础缓冲区会预先分配。该行为留给了基础VM实施。如果缓冲区必须是可以通过C直接读取和/或写入的连续内存块，请考虑使用&lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt; &lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74bae849b3abb7d0a846a00b3211719de9de8557" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;ArrayBuffer&lt;/code&gt;s are used to represent fixed-length binary data buffers. They are normally used as a backing-buffer for &lt;code&gt;TypedArray&lt;/code&gt; objects. The &lt;code&gt;ArrayBuffer&lt;/code&gt; allocated will have an underlying byte buffer whose size is determined by the &lt;code&gt;length&lt;/code&gt; parameter that's passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or &lt;code&gt;DataView&lt;/code&gt; object would need to be created.</source>
          <target state="translated">该API返回与JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; 相对应的N-API值。 &lt;code&gt;ArrayBuffer&lt;/code&gt; 用来表示固定长度的二进制数据缓冲区。它们通常用作 &lt;code&gt;TypedArray&lt;/code&gt; 对象的后备缓冲区。分配的 &lt;code&gt;ArrayBuffer&lt;/code&gt; 将具有一个基础的字节缓冲区，其大小由传入的 &lt;code&gt;length&lt;/code&gt; 参数确定。如果调用方希望直接操作该缓冲区，则可以选择将基础缓冲区返回给调用方。该缓冲区只能直接从本机代码写入。要从JavaScript写入此缓冲区，需要创建一个类型化的数组或 &lt;code&gt;DataView&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="5abde2fefb489242a6fbaf801b7da355c609cf82" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. The underlying byte buffer of the &lt;code&gt;ArrayBuffer&lt;/code&gt; is externally allocated and managed. The caller must ensure that the byte buffer remains valid until the finalize callback is called.</source>
          <target state="translated">该API返回与JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; 相对应的N-API值。 &lt;code&gt;ArrayBuffer&lt;/code&gt; 的基础字节缓冲区是在外部分配和管理的。调用者必须确保字节缓冲区保持有效，直到调用finalize回调为止。</target>
        </trans-unit>
        <trans-unit id="54dc707b3f198fc07141776bb634e4e4e63b2b8f" translate="yes" xml:space="preserve">
          <source>This API returns an array containing the names of the available properties of this object.</source>
          <target state="translated">该API返回一个包含该对象可用属性名称的数组。</target>
        </trans-unit>
        <trans-unit id="aa79ae1b37565525274506b36dd7fc40477368cb" translate="yes" xml:space="preserve">
          <source>This API returns if the &lt;code&gt;Object&lt;/code&gt; passed in has an element at the requested index.</source>
          <target state="translated">如果传入的 &lt;code&gt;Object&lt;/code&gt; 在请求的索引处有一个元素，则此API返回。</target>
        </trans-unit>
        <trans-unit id="c604c612d96a87d8101af3ddf6bfc01f4b4d68ec" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;global&lt;/code&gt; object.</source>
          <target state="translated">该API返回 &lt;code&gt;global&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="48a7f0383f00e9573b596f72e50a2cb7b8d0000d" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;new.target&lt;/code&gt; of the constructor call. If the current callback is not a constructor call, the result is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">此API返回构造函数调用的 &lt;code&gt;new.target&lt;/code&gt; 。如果当前回调不是构造函数调用，则结果为 &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca0876caff75d7fcb5c27bc7d32784621271953f" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">该API返回 &lt;code&gt;null&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="6f4b499dfda4f2e7f389bb8a459c0442468d26c5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int32&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">此API返回给定JavaScript &lt;code&gt;Number&lt;/code&gt; 的C &lt;code&gt;int32&lt;/code&gt; 原语等效项。</target>
        </trans-unit>
        <trans-unit id="827d0e5a4fe902762d8fdbd2a59f01ff491412f5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">此API返回与给定JavaScript &lt;code&gt;Number&lt;/code&gt; 等效的C &lt;code&gt;int64&lt;/code&gt; 原语。</target>
        </trans-unit>
        <trans-unit id="2df8e3cc2f4a8dd457d5502a718bb8bd98790b34" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">该API返回与给定JavaScript &lt;code&gt;BigInt&lt;/code&gt; 等效的C &lt;code&gt;int64_t&lt;/code&gt; 原语。如果需要，它将截断该值，将 &lt;code&gt;lossless&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="accfb9b3a000444a53160665ebc8ad9cca255ff1" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;uint64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">该API返回与给定JavaScript &lt;code&gt;BigInt&lt;/code&gt; 等效的C &lt;code&gt;uint64_t&lt;/code&gt; 原语。如果需要，它将截断该值，将 &lt;code&gt;lossless&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a1a204e8e4a5df3c6cc124c41060a09c140f51d" translate="yes" xml:space="preserve">
          <source>This API returns the C boolean primitive equivalent of the given JavaScript &lt;code&gt;Boolean&lt;/code&gt;.</source>
          <target state="translated">此API返回给定JavaScript &lt;code&gt;Boolean&lt;/code&gt; 的C布尔基元等效项。</target>
        </trans-unit>
        <trans-unit id="ca2b5220b79fdd14c56eb3008d7a5c1f99fb540c" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">此API返回给定JavaScript &lt;code&gt;Number&lt;/code&gt; 的C double原语等效项。</target>
        </trans-unit>
        <trans-unit id="76fc91334d0e8e6d7cd76625caa8bac8a9d82ab4" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive of time value for the given JavaScript &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="translated">该API返回给定JavaScript &lt;code&gt;Date&lt;/code&gt; 的C double of time值。</target>
        </trans-unit>
        <trans-unit id="a89a951199f81c03153d5318b6b870955ad2668b" translate="yes" xml:space="preserve">
          <source>This API returns the C primitive equivalent of the given &lt;code&gt;napi_value&lt;/code&gt; as a &lt;code&gt;uint32_t&lt;/code&gt;.</source>
          <target state="translated">该API将给定 &lt;code&gt;napi_value&lt;/code&gt; 的C原语等效为 &lt;code&gt;uint32_t&lt;/code&gt; 返回。</target>
        </trans-unit>
        <trans-unit id="252de5913968c0e14b8dc66ec544741c0d2689fb" translate="yes" xml:space="preserve">
          <source>This API returns the ISO-8859-1-encoded string corresponding the value passed in.</source>
          <target state="translated">该API返回与传入值相对应的ISO-8859-1编码的字符串。</target>
        </trans-unit>
        <trans-unit id="84ae74192a0873baca176de8e267018dc4cfbd5a" translate="yes" xml:space="preserve">
          <source>This API returns the UTF16-encoded string corresponding the value passed in.</source>
          <target state="translated">该API返回与传入值相对应的UTF16编码字符串。</target>
        </trans-unit>
        <trans-unit id="2c87b6403f35f26e7404749f214ce41091747843" translate="yes" xml:space="preserve">
          <source>This API returns the UTF8-encoded string corresponding the value passed in.</source>
          <target state="translated">该API返回与传入值相对应的UTF8编码字符串。</target>
        </trans-unit>
        <trans-unit id="c0b748b497bba3eb1c898153dfbd929b87db172b" translate="yes" xml:space="preserve">
          <source>This API returns the Undefined object.</source>
          <target state="translated">该API返回Undefined对象。</target>
        </trans-unit>
        <trans-unit id="adba2f90399935e0690e7ea6510c317990dbccfb" translate="yes" xml:space="preserve">
          <source>This API returns the highest N-API version supported by the Node.js runtime. N-API is planned to be additive such that newer releases of Node.js may support additional API functions. In order to allow an addon to use a newer function when running with versions of Node.js that support it, while providing fallback behavior when running with Node.js versions that don't support it:</source>
          <target state="translated">该API返回Node.js运行时支持的最高N-API版本。N-API计划是一个附加的版本,因此Node.js的新版本可能会支持更多的API功能。为了让addon在运行支持较新功能的Node.js版本时使用较新的功能,同时在运行不支持该功能的Node.js版本时提供回退行为。</target>
        </trans-unit>
        <trans-unit id="522d2a776db00199579b4671e9a78264576e9097" translate="yes" xml:space="preserve">
          <source>This API returns the length of an array.</source>
          <target state="translated">该API返回一个数组的长度。</target>
        </trans-unit>
        <trans-unit id="62dde4493dbecb32a8daa6b7073d93a0a48999a4" translate="yes" xml:space="preserve">
          <source>This API returns the names of the enumerable properties of &lt;code&gt;object&lt;/code&gt; as an array of strings. The properties of &lt;code&gt;object&lt;/code&gt; whose key is a symbol will not be included.</source>
          <target state="translated">此API 以字符串数组形式返回 &lt;code&gt;object&lt;/code&gt; 的可枚举属性的名称。键为符号的 &lt;code&gt;object&lt;/code&gt; 的属性将不包括在内。</target>
        </trans-unit>
        <trans-unit id="40720472b0f1b38ae83da6f85669c9b6c99e9e15" translate="yes" xml:space="preserve">
          <source>This API returns true if an exception is pending.</source>
          <target state="translated">如果一个异常正在等待,这个API返回true。</target>
        </trans-unit>
        <trans-unit id="70f8fc304edc0eb1ff4bd3a9bd31242f6e63b866" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">该API返回 &lt;code&gt;DataView&lt;/code&gt; 的各种属性。</target>
        </trans-unit>
        <trans-unit id="094bf686b8d41acd51551e48f0d5506a78066bcd" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a typed array.</source>
          <target state="translated">这个API返回一个类型化数组的各种属性。</target>
        </trans-unit>
        <trans-unit id="8443a100e796e230e9a632cdd639d47a8dd0c30e" translate="yes" xml:space="preserve">
          <source>This API set a property on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">此API在传入的 &lt;code&gt;Object&lt;/code&gt; 上设置属性。</target>
        </trans-unit>
        <trans-unit id="055ca98bb19b6d2b39f8280d72632e38436dcde6" translate="yes" xml:space="preserve">
          <source>This API sets and element on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">该API集和传入的 &lt;code&gt;Object&lt;/code&gt; 上的元素。</target>
        </trans-unit>
        <trans-unit id="f3259243731814fd2604630f35f7dc1e7cb7967f" translate="yes" xml:space="preserve">
          <source>This API should not be called with &lt;code&gt;napi_tsfn_blocking&lt;/code&gt; from a JavaScript thread, because, if the queue is full, it may cause the JavaScript thread to deadlock.</source>
          <target state="translated">不应通过JavaScript线程使用 &lt;code&gt;napi_tsfn_blocking&lt;/code&gt; 调用此API ，因为如果队列已满，则可能导致JavaScript线程死锁。</target>
        </trans-unit>
        <trans-unit id="d1442d6affa3740f89af3af8d557d700b4757238" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="translated">该API使用提供的文本引发JavaScript &lt;code&gt;Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3dd51c041226d76a52e71a99edd9a2f1b9f2b71" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">此API会使用提供的文本引发JavaScript &lt;code&gt;RangeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be4f91f940ec94f29555da2de8b293137ec65b17" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">此API会使用提供的文本引发JavaScript &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1e9614bea2e91f427dd259be89411bcf53308e40" translate="yes" xml:space="preserve">
          <source>This API throws the JavaScript value provided.</source>
          <target state="translated">这个API会抛出提供的JavaScript值。</target>
        </trans-unit>
        <trans-unit id="99f41202181c70e315d0fe22903a8a88e874c6f3" translate="yes" xml:space="preserve">
          <source>This API uses libuv's threadpool, which can have surprising and negative performance implications for some applications; see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">该API使用libuv的线程池，这对于某些应用程序可能具有令人惊讶的负面性能影响。有关更多信息，请参见&lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt; &lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt; &lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="5421be1b58e3a5f37657e78acf463c299fc19571" translate="yes" xml:space="preserve">
          <source>This API will return &lt;code&gt;napi_closing&lt;/code&gt; if &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; was called with &lt;code&gt;abort&lt;/code&gt; set to &lt;code&gt;napi_tsfn_abort&lt;/code&gt; from any thread. The value is only added to the queue if the API returns &lt;code&gt;napi_ok&lt;/code&gt;.</source>
          <target state="translated">如果在从任何线程将 &lt;code&gt;abort&lt;/code&gt; 设置为 &lt;code&gt;napi_tsfn_abort&lt;/code&gt; 的情况下调用 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; ,则此API将返回 &lt;code&gt;napi_closing&lt;/code&gt; 。仅当API返回 &lt;code&gt;napi_ok&lt;/code&gt; 时,该值才添加到队列中。</target>
        </trans-unit>
        <trans-unit id="ca4d7acb60577ff5a3d284f73b617fe9d4f84288" translate="yes" xml:space="preserve">
          <source>This Module Namespace Exotic Object can be directly observed either when using &lt;code&gt;import * as m from 'cjs'&lt;/code&gt; or a dynamic import:</source>
          <target state="translated">使用 &lt;code&gt;import * as m from 'cjs'&lt;/code&gt; 或动态导入时，可以直接观察到此Module Namespace Exotic Object ：</target>
        </trans-unit>
        <trans-unit id="0484acdcfb56a632e947996df777e0189ffd6889" translate="yes" xml:space="preserve">
          <source>This allows programs to localize their dependencies, so that they do not clash.</source>
          <target state="translated">这使得程序可以将它们的依赖关系本地化,这样它们就不会发生冲突。</target>
        </trans-unit>
        <trans-unit id="8849f713925ba1f9a6b09df33af235ddaf81cd16" translate="yes" xml:space="preserve">
          <source>This also works with timers that are returned from &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;. If their callback function throws, it will be caught by the domain &lt;code&gt;'error'&lt;/code&gt; handler.</source>
          <target state="translated">这也适用于从&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;返回的计时器。如果他们的回调函数抛出，它将被域 &lt;code&gt;'error'&lt;/code&gt; 处理程序捕获。</target>
        </trans-unit>
        <trans-unit id="ea76098f7bf18a2c68b3090aef859627c5b998c5" translate="yes" xml:space="preserve">
          <source>This approach is appropriate for any of the following use cases:</source>
          <target state="translated">这种方法适合以下任何一种用例。</target>
        </trans-unit>
        <trans-unit id="820157915a230f72b4dfebbb307e744ce07bc105" translate="yes" xml:space="preserve">
          <source>This becomes &lt;code&gt;null&lt;/code&gt; when sending a socket to a child with &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;. To poll forks and get current number of active connections, use asynchronous &lt;a href=&quot;#net_server_getconnections_callback&quot;&gt;&lt;code&gt;server.getConnections()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">这将成为 &lt;code&gt;null&lt;/code&gt; 与发送插座一个孩子时&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;。要轮询派生并获取当前的活动连接数，请改用异步&lt;a href=&quot;#net_server_getconnections_callback&quot;&gt; &lt;code&gt;server.getConnections()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0403c54b19cf7c518c743ac412f170084964d2d4" translate="yes" xml:space="preserve">
          <source>This behavior can be observed by doing something like opening a resource then closing it before the resource can be used. The following snippet demonstrates this.</source>
          <target state="translated">这种行为可以通过做一些事情来观察,比如打开一个资源,然后在资源被使用之前关闭它。下面的片段演示了这一点。</target>
        </trans-unit>
        <trans-unit id="4d3be871fb0a41430f8168f7829d357513f35f9e" translate="yes" xml:space="preserve">
          <source>This behavior matches how &lt;code&gt;import&lt;/code&gt; behaves in browser environments, assuming a typically configured server.</source>
          <target state="translated">此行为与假设在典型配置的服务器上的 &lt;code&gt;import&lt;/code&gt; 行为在浏览器环境中的行为匹配。</target>
        </trans-unit>
        <trans-unit id="88491dff6c51b120ea1b1d70767ea3bf8c1f612b" translate="yes" xml:space="preserve">
          <source>This can be addressed by passing &lt;code&gt;microtaskMode: 'afterEvaluate'&lt;/code&gt; to the code that creates the &lt;code&gt;Context&lt;/code&gt;:</source>
          <target state="translated">这可以通过将 &lt;code&gt;microtaskMode: 'afterEvaluate'&lt;/code&gt; 传递给创建 &lt;code&gt;Context&lt;/code&gt; 的代码来解决：</target>
        </trans-unit>
        <trans-unit id="c09d684d7a4d21b175c08bdd339dca1134e4b755" translate="yes" xml:space="preserve">
          <source>This can be called many times with new data as it is streamed.</source>
          <target state="translated">当新的数据流入时,可以多次调用该功能。</target>
        </trans-unit>
        <trans-unit id="22a8e93c7e3dbc06e636a58f0d2909de2f9f3464" translate="yes" xml:space="preserve">
          <source>This can be done if both the CommonJS and ES module versions of the package are equivalent, for example because one is the transpiled output of the other; and the package&amp;rsquo;s management of state is carefully isolated (or the package is stateless).</source>
          <target state="translated">如果该软件包的CommonJS和ES模块版本是等效的，则可以这样做，例如，因为一个是另一种的编译输出；并且程序包的状态管理被仔细隔离（或者程序包是无状态的）。</target>
        </trans-unit>
        <trans-unit id="7c491563022589b8a9b5c79a33442425c69e8e3b" translate="yes" xml:space="preserve">
          <source>This can be overridden for servers and client requests by passing the &lt;code&gt;maxHeaderSize&lt;/code&gt; option.</source>
          <target state="translated">通过传递 &lt;code&gt;maxHeaderSize&lt;/code&gt; 选项，可以为服务器和客户端请求覆盖此设置。</target>
        </trans-unit>
        <trans-unit id="c880dd4ffae1216437534bad1ef14743456d2388" translate="yes" xml:space="preserve">
          <source>This can be used primarily to re-initialize REPL context to some pre-defined state:</source>
          <target state="translated">这主要可以用来重新初始化 REPL 上下文到一些预定义的状态。</target>
        </trans-unit>
        <trans-unit id="cdf292923a244ea9d67a38073716924be27282d5" translate="yes" xml:space="preserve">
          <source>This can be used to implement continuation local storage without the use of a tracking &lt;code&gt;Map&lt;/code&gt; to store the metadata:</source>
          <target state="translated">这可以用于实现连续本地存储，而无需使用跟踪 &lt;code&gt;Map&lt;/code&gt; 来存储元数据：</target>
        </trans-unit>
        <trans-unit id="7f813d16b38829c4c7b83c4595769721b0e2f9aa" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt;&lt;code&gt;.fork()&lt;/code&gt;&lt;/a&gt; again.</source>
          <target state="translated">可以通过再次调用&lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt; &lt;code&gt;.fork()&lt;/code&gt; &lt;/a&gt;来重新启动工作程序。</target>
        </trans-unit>
        <trans-unit id="884b5d2f2fb4791a811ef2a6aa11b44f1d059e43" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;code&gt;.fork()&lt;/code&gt; again.</source>
          <target state="translated">可以通过再次调用 &lt;code&gt;.fork()&lt;/code&gt; 来重新启动工作程序。</target>
        </trans-unit>
        <trans-unit id="adb47d3b708ed81016472d29ae643286daa0d023" translate="yes" xml:space="preserve">
          <source>This can be used when collecting input from a TTY stream to retrieve the current value that has been processed thus far, prior to the &lt;code&gt;line&lt;/code&gt; event being emitted. Once the &lt;code&gt;line&lt;/code&gt; event has been emitted, this property will be an empty string.</source>
          <target state="translated">当从TTY流中收集输入以检索发出 &lt;code&gt;line&lt;/code&gt; 事件之前到目前为止已处理的当前值时，可以使用此方法。一旦 &lt;code&gt;line&lt;/code&gt; 事件已发出，此属性将是一个空字符串。</target>
        </trans-unit>
        <trans-unit id="81cb9ba6df123ad25e5c1f7880d8d7faab015f8c" translate="yes" xml:space="preserve">
          <source>This can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument.</source>
          <target state="translated">这对于原始函数不遵循将错误优先回调作为最后一个参数的标准格式的情况下很有用。</target>
        </trans-unit>
        <trans-unit id="cc26040f8f9ecbf7bbd37bcaa328d37dfb1dd0f1" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as other parts of the &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;Buffer&lt;/code&gt; object itself.</source>
          <target state="translated">当使用 &lt;code&gt;buf.buffer&lt;/code&gt; 直接访问基础 &lt;code&gt;ArrayBuffer&lt;/code&gt; 时，这可能会导致问题，因为 &lt;code&gt;ArrayBuffer&lt;/code&gt; 的其他部分可能与 &lt;code&gt;Buffer&lt;/code&gt; 对象本身无关。</target>
        </trans-unit>
        <trans-unit id="6a2698ef50db0dc91fafb011a769f5cfdfc45098" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as the first bytes in this &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;buf&lt;/code&gt; object itself.</source>
          <target state="translated">当直接使用 &lt;code&gt;buf.buffer&lt;/code&gt; 访问底层 &lt;code&gt;ArrayBuffer&lt;/code&gt; 时，这可能会导致问题，因为此 &lt;code&gt;ArrayBuffer&lt;/code&gt; 中的第一个字节可能与 &lt;code&gt;buf&lt;/code&gt; 对象本身无关。</target>
        </trans-unit>
        <trans-unit id="94c39157bbaadfeac0740fd2bddc3c5a9e18fe2b" translate="yes" xml:space="preserve">
          <source>This can only be called from the master process.</source>
          <target state="translated">这只能从主进程中调用。</target>
        </trans-unit>
        <trans-unit id="2bf60ae930ac6615a4d1242e8315c9eb04f632ba" translate="yes" xml:space="preserve">
          <source>This can only happen when native addons create &lt;code&gt;SharedArrayBuffer&lt;/code&gt;s in &quot;externalized&quot; mode, or put existing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; into externalized mode.</source>
          <target state="translated">仅当本机插件在&amp;ldquo;外部化&amp;rdquo;模式下创建 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 或将现有 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 置于外部化模式时，才会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="6199ec1544ac620470d1eb68d66a477d9db98885" translate="yes" xml:space="preserve">
          <source>This change was made while &lt;code&gt;async_hooks&lt;/code&gt; was an experimental API.</source>
          <target state="translated">在 &lt;code&gt;async_hooks&lt;/code&gt; 是实验性API 时进行了此更改。</target>
        </trans-unit>
        <trans-unit id="f5c8587a30eab7a428dcbb7513f0b815a15706fa" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;net#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt; and has the following additional events:</source>
          <target state="translated">此类从&lt;a href=&quot;net#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; &lt;/a&gt;继承，并具有以下其他事件：</target>
        </trans-unit>
        <trans-unit id="bb154621216808fa548d91e360e57e7c8109d9f7" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt;&lt;code&gt;stream.Transform&lt;/code&gt;&lt;/a&gt;, allowing &lt;code&gt;zlib&lt;/code&gt; objects to be used in pipes and similar stream operations.</source>
          <target state="translated">此类继承自&lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt; &lt;code&gt;stream.Transform&lt;/code&gt; &lt;/a&gt;，允许 &lt;code&gt;zlib&lt;/code&gt; 对象用于管道和类似的流操作中。</target>
        </trans-unit>
        <trans-unit id="8e88b64435ae0d469109330906f76139a67a2d71" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;code&gt;tls.Server&lt;/code&gt; and emits events same as &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">此类是 &lt;code&gt;tls.Server&lt;/code&gt; 的子类，并且发出与&lt;a href=&quot;http#http_class_http_server&quot;&gt; &lt;code&gt;http.Server&lt;/code&gt; &lt;/a&gt;相同的事件。有关更多信息，请参见&lt;a href=&quot;http#http_class_http_server&quot;&gt; &lt;code&gt;http.Server&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="16c329449b1b3c4b04d85f37f6e6b48c47ddc4d5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). A &lt;code&gt;net.Socket&lt;/code&gt; is also a &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;duplex stream&lt;/a&gt;, so it can be both readable and writable, and it is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此类是TCP套接字或流式&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;终结点的抽象（在Windows上使用命名管道，在Unix域上使用命名管道）。甲 &lt;code&gt;net.Socket&lt;/code&gt; 也是&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;双工流&lt;/a&gt;，因此它可以是可读可写的，并且它也是一个&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bb6db2a0d099fbb5e70fab688511fc3b030d22f5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). It is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此类是TCP套接字或流&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;终结点的抽象（在Windows上使用命名管道，在Unix域上使用命名管道）。它也是一个&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9cb39e860eb677e256cb393655fda70a7c3d4eaa" translate="yes" xml:space="preserve">
          <source>This class is now exported.</source>
          <target state="translated">这个类现在已经输出了。</target>
        </trans-unit>
        <trans-unit id="44e839a369fec339f5305657a162e8136375a579" translate="yes" xml:space="preserve">
          <source>This class is used to create a TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server.</source>
          <target state="translated">此类用于创建TCP或&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;服务器。</target>
        </trans-unit>
        <trans-unit id="fd4c4aa236c69d8176bdaffd55ffe16275814e30" translate="yes" xml:space="preserve">
          <source>This class is used to create asynchronous state within callbacks and promise chains. It allows storing data throughout the lifetime of a web request or any other asynchronous duration. It is similar to thread-local storage in other languages.</source>
          <target state="translated">该类用于在回调和承诺链中创建异步状态。它允许在一个web请求的整个生命周期或任何其他异步持续时间内存储数据。它类似于其他语言中的线程本地存储。</target>
        </trans-unit>
        <trans-unit id="42f1546ea4056ef007c2a73d3fbe93902826cb60" translate="yes" xml:space="preserve">
          <source>This class now inherits from &lt;code&gt;EventTarget&lt;/code&gt; rather than from &lt;code&gt;EventEmitter&lt;/code&gt;.</source>
          <target state="translated">此类现在从 &lt;code&gt;EventTarget&lt;/code&gt; 继承，而不是从 &lt;code&gt;EventEmitter&lt;/code&gt; 继承。</target>
        </trans-unit>
        <trans-unit id="a92b7b6bb57bdc44b8ea493af6aace2149818803" translate="yes" xml:space="preserve">
          <source>This class was renamed from &lt;code&gt;Zlib&lt;/code&gt; to &lt;code&gt;ZlibBase&lt;/code&gt;.</source>
          <target state="translated">此类从 &lt;code&gt;Zlib&lt;/code&gt; 重命名为 &lt;code&gt;ZlibBase&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca97ea3802a37189503195b033c0894a87a14b4c" translate="yes" xml:space="preserve">
          <source>This code does not use the regular &lt;code&gt;ERR_*&lt;/code&gt; convention Node.js errors use in order to be compatible with the web platform's &lt;code&gt;AbortError&lt;/code&gt;.</source>
          <target state="translated">此代码不使用常规 &lt;code&gt;ERR_*&lt;/code&gt; 约定Node.js错误，以便与Web平台的 &lt;code&gt;AbortError&lt;/code&gt; 兼容。</target>
        </trans-unit>
        <trans-unit id="de024a70044896351480dcb7c1b1ad560f5c6459" translate="yes" xml:space="preserve">
          <source>This configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt;, or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">这会将Node.js配置为将字符串输入解释为CommonJS或ES模块。字符串输入是通过输入 &lt;code&gt;--eval&lt;/code&gt; ， &lt;code&gt;--print&lt;/code&gt; ，或 &lt;code&gt;STDIN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="244101b103efaee2124df7a27e0b69d17a4c72b4" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">这将创建&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;的视图，而不复制基础内存。例如，当传递对&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;实例的 &lt;code&gt;.buffer&lt;/code&gt; 属性的引用时，新创建的 &lt;code&gt;Buffer&lt;/code&gt; 将与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;共享相同的分配内存。</target>
        </trans-unit>
        <trans-unit id="642feea22e99d5b86e730cd2666b24ed829c2acf" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">这将创建&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;的视图，而不复制基础内存。例如，当传递对&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;实例的 &lt;code&gt;.buffer&lt;/code&gt; 属性的引用时，新创建的 &lt;code&gt;Buffer&lt;/code&gt; 将与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;共享相同的分配内存。</target>
        </trans-unit>
        <trans-unit id="f70a9e943eb437948e2007e44c804669a3a635f8" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="translated">可以使用&lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt; &lt;code&gt;--tls-cipher-list&lt;/code&gt; &lt;/a&gt;命令行开关完全替换该默认值（直接或通过&lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt;环境变量）。例如，以下内容使 &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; 成为默认的TLS密码套件：</target>
        </trans-unit>
        <trans-unit id="c3e306cc187ad3b8c8c5117038d5c054feb07697" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command-line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="translated">可以使用&lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt; &lt;code&gt;--tls-cipher-list&lt;/code&gt; &lt;/a&gt;命令行开关完全替换该默认值（直接或通过&lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt;环境变量）。例如，以下内容使 &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; 成为默认的TLS密码套件：</target>
        </trans-unit>
        <trans-unit id="d52314f1ca567086d94d0b2153e5c443a8d5ccef" translate="yes" xml:space="preserve">
          <source>This deprecation has been superseded by the deprecation of the &lt;code&gt;process.binding()&lt;/code&gt; API (&lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt;).</source>
          <target state="translated">弃用了 &lt;code&gt;process.binding()&lt;/code&gt; API（&lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt;）的弃用。</target>
        </trans-unit>
        <trans-unit id="8c190b3f34fae908925a1a6be8e8afe5048e36e2" translate="yes" xml:space="preserve">
          <source>This document contains two primary sections and a third section for notes. The first section explains how to use existing streams within an application. The second section explains how to create new types of streams.</source>
          <target state="translated">本文档包含两个主要部分和第三部分注释。第一部分解释了如何在应用程序中使用现有的流。第二部分解释了如何创建新类型的流。</target>
        </trans-unit>
        <trans-unit id="62e0d03e950af6c192f429106a4d7a544db728f4" translate="yes" xml:space="preserve">
          <source>This doesn't turn &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fsPromises.open()&lt;/code&gt; into a synchronous blocking call. If synchronous operation is desired, something like &lt;code&gt;fs.openSync()&lt;/code&gt; should be used.</source>
          <target state="translated">这不会将 &lt;code&gt;fs.open()&lt;/code&gt; 或 &lt;code&gt;fsPromises.open()&lt;/code&gt; 变成同步阻塞调用。如果需要同步操作，则应使用 &lt;code&gt;fs.openSync()&lt;/code&gt; 之类的东西。</target>
        </trans-unit>
        <trans-unit id="7d7155916c3b5f40672e5071e001ad88f1433bf7" translate="yes" xml:space="preserve">
          <source>This enables useful patterns such as relative file loading:</source>
          <target state="translated">这可以实现诸如相对文件加载等有用的模式。</target>
        </trans-unit>
        <trans-unit id="2a7d3a4824a32afb05e10223ba91eb879a7fd252" translate="yes" xml:space="preserve">
          <source>This encapsulation of exports provides more reliable guarantees about package interfaces for tools and when handling semver upgrades for a package. It is not a strong encapsulation since a direct require of any absolute subpath of the package such as &lt;code&gt;require('/path/to/node_modules/pkg/subpath.js')&lt;/code&gt; will still load &lt;code&gt;subpath.js&lt;/code&gt;.</source>
          <target state="translated">导出的封装为工具的软件包接口以及处理软件包的semver升级提供了更可靠的保证。这不是一个很强的封装，因为对包的任何绝对子路径（例如 &lt;code&gt;require('/path/to/node_modules/pkg/subpath.js')&lt;/code&gt; )的直接需求仍然会加载 &lt;code&gt;subpath.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="511c5720a26dc7d320da43671cc5b1fecc46d7b6" translate="yes" xml:space="preserve">
          <source>This environment variable is ignored when &lt;code&gt;node&lt;/code&gt; runs as setuid root or has Linux file capabilities set.</source>
          <target state="translated">当 &lt;code&gt;node&lt;/code&gt; 以setuid根身份运行或设置了Linux文件功能时，将忽略此环境变量。</target>
        </trans-unit>
        <trans-unit id="9ebd080238c77b1ee805c11a34bb22abc42b3369" translate="yes" xml:space="preserve">
          <source>This error code was replaced by &lt;a href=&quot;#ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST&quot;&gt;&lt;code&gt;ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST&lt;/code&gt;&lt;/a&gt; in Node.js v15.0.0, because it is no longer accurate as other types of transferable objects also exist now.</source>
          <target state="translated">在Node.js v15.0.0中，此错误代码已替换为&lt;a href=&quot;#ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST&quot;&gt; &lt;code&gt;ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST&lt;/code&gt; &lt;/a&gt;，因为它不再准确，因为现在还存在其他类型的可传输对象。</target>
        </trans-unit>
        <trans-unit id="6e6ca02ed62b1234e7dfc3664b35ddb769fa981f" translate="yes" xml:space="preserve">
          <source>This error is designed to prevent accidentally overwriting a callback registered from another module.</source>
          <target state="translated">这个错误的设计是为了防止意外覆盖从其他模块注册的回调。</target>
        </trans-unit>
        <trans-unit id="b9977cdce2fd4b47c0997cc9ad3729a7f41f972a" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="translated">用户也可以显式发出此事件，以将连接注入HTTP服务器。在这种情况下，任何&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;流都可以通过。</target>
        </trans-unit>
        <trans-unit id="5c553b5e91dff230374b24a70b3a2617cfe02603" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the TLS server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="translated">用户也可以显式发出此事件，以将连接注入TLS服务器。在这种情况下，任何&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;流都可以通过。</target>
        </trans-unit>
        <trans-unit id="10a0c432576c88ea7fd6ac6682ca82473146468d" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established, before the TLS handshake begins. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event.</source>
          <target state="translated">在TLS握手开始之前，当建立新的TCP流时，将发出此事件。 &lt;code&gt;socket&lt;/code&gt; 通常是&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;类型的对象。通常，用户将不希望访问此事件。</target>
        </trans-unit>
        <trans-unit id="b8b0d428fb2bcfd24f28cd7691efd806371c187e" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event.</source>
          <target state="translated">建立新的TCP流时，将发出此事件。 &lt;code&gt;socket&lt;/code&gt; 通常是&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;类型的对象。通常，用户将不希望访问此事件。</target>
        </trans-unit>
        <trans-unit id="0e2d4b6cd4a5729a1807f57603f4e80b4da71d69" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.connection&lt;/code&gt;.</source>
          <target state="translated">建立新的TCP流时，将发出此事件。 &lt;code&gt;socket&lt;/code&gt; 通常是&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;类型的对象。通常，用户将不希望访问此事件。特别是，由于协议解析器如何附加到套接字，套接字将不会发出 &lt;code&gt;'readable'&lt;/code&gt; 事件。该 &lt;code&gt;socket&lt;/code&gt; 也可以在访问 &lt;code&gt;request.connection&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66fa4ee297e42f821aa6c5e39bfbf8cf100dc851" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.socket&lt;/code&gt;.</source>
          <target state="translated">建立新的TCP流时，将发出此事件。 &lt;code&gt;socket&lt;/code&gt; 通常是&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;类型的对象。通常，用户将不希望访问此事件。特别是，由于协议解析器如何附加到套接字，套接字将不会发出 &lt;code&gt;'readable'&lt;/code&gt; 事件。该 &lt;code&gt;socket&lt;/code&gt; 也可以在访问 &lt;code&gt;request.socket&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f345cc8a09df280597dfb6653ff618e979ce58bb" translate="yes" xml:space="preserve">
          <source>This event is guaranteed to be passed an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">此事件是保证将通过实例&lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;类，一个子类&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt; &lt;/a&gt;，除非用户指定的套接字比其他类型的&lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75422882f2f82b5d0be7feca6a3f569c0c1ba060" translate="yes" xml:space="preserve">
          <source>This event is purely informational and will be emitted only when &lt;code&gt;preferredAddressPolicy&lt;/code&gt; is set to &lt;code&gt;'accept'&lt;/code&gt;.</source>
          <target state="translated">此事件纯粹是信息性的，仅当 &lt;code&gt;preferredAddressPolicy&lt;/code&gt; 设置为 &lt;code&gt;'accept'&lt;/code&gt; 时才会发出此事件。</target>
        </trans-unit>
        <trans-unit id="a8a890977d51324cd393c8898f763d1cb6d447e8" translate="yes" xml:space="preserve">
          <source>This event is the same as the one provided by &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此事件与&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;提供的事件相同。</target>
        </trans-unit>
        <trans-unit id="8091d5c0132da2ce578d23516bf7b26daf3174a5" translate="yes" xml:space="preserve">
          <source>This event might not be emitted if &lt;code&gt;http2stream.end()&lt;/code&gt; is called before trailers are received and the incoming data is not being read or listened for.</source>
          <target state="translated">如果在接收预告片之前未调用 &lt;code&gt;http2stream.end()&lt;/code&gt; 且未读取或监听传入的数据，则可能不会发出此事件。</target>
        </trans-unit>
        <trans-unit id="6e42e31a1c6291ea1620368f27b2644f12f5bfaa" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the Addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="translated">本示例使用 &lt;code&gt;Init()&lt;/code&gt; 的两个参数形式，该形式将完整的 &lt;code&gt;module&lt;/code&gt; 对象作为第二个参数。这使得附加组件完全覆盖 &lt;code&gt;exports&lt;/code&gt; 与单一功能的，而不是添加功能的属性 &lt;code&gt;exports&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d0a35cc513f8432ce78b0f093625a881d170862" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="translated">本示例使用 &lt;code&gt;Init()&lt;/code&gt; 的两个参数形式，该形式将完整的 &lt;code&gt;module&lt;/code&gt; 对象作为第二个参数接收。这样，插件就可以使用单个函数完全覆盖 &lt;code&gt;exports&lt;/code&gt; ，而不是将函数添加为 &lt;code&gt;exports&lt;/code&gt; 的属性。</target>
        </trans-unit>
        <trans-unit id="c53e228887749d0c0419e29bc7e571d4700538a6" translate="yes" xml:space="preserve">
          <source>This example will echo back all messages from the master:</source>
          <target state="translated">本例将回传所有来自主站的信息。</target>
        </trans-unit>
        <trans-unit id="a85c797866ee7d1ad692e8f7298750e061674f0a" translate="yes" xml:space="preserve">
          <source>This feature depends on the underlying operating system providing a way to be notified of filesystem changes.</source>
          <target state="translated">这个功能取决于底层操作系统是否提供了一种通知文件系统变化的方式。</target>
        </trans-unit>
        <trans-unit id="eacad87587423d69625ed5d43b2a928821b829b6" translate="yes" xml:space="preserve">
          <source>This feature has been removed.</source>
          <target state="translated">此功能已被删除。</target>
        </trans-unit>
        <trans-unit id="0fe4cf3e3f69627b03a85ed87c00d5a21b561899" translate="yes" xml:space="preserve">
          <source>This feature is currently experimental and behavior might still change.</source>
          <target state="translated">这个功能目前是实验性的,行为可能还会改变。</target>
        </trans-unit>
        <trans-unit id="8b9672c5c130d16069c2cb01cb9a6fb0915f6961" translate="yes" xml:space="preserve">
          <source>This feature is currently experimental and the name might change or it might be completely removed again.</source>
          <target state="translated">这个功能目前是实验性的,名称可能会改变,也可能会再次完全删除。</target>
        </trans-unit>
        <trans-unit id="de2bb0948bf98b0d72951fab0d71632f50f1639c" translate="yes" xml:space="preserve">
          <source>This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">该功能在&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;线程中不可用。</target>
        </trans-unit>
        <trans-unit id="318da36545ca71c8357ead6931515e132410af72" translate="yes" xml:space="preserve">
          <source>This feature is only available if the &lt;code&gt;node&lt;/code&gt; executable was compiled with &lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICU&lt;/a&gt; enabled. If not, the domain names are passed through unchanged.</source>
          <target state="translated">仅当 &lt;code&gt;node&lt;/code&gt; 可执行文件在启用&lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICU的情况&lt;/a&gt;下编译时，此功能才可用。如果不是，域名将原样传递。</target>
        </trans-unit>
        <trans-unit id="24575865cd6d6f55d849bfe1f2634b05ebf883a9" translate="yes" xml:space="preserve">
          <source>This field defines &lt;a href=&quot;#packages_subpath_imports&quot;&gt;subpath imports&lt;/a&gt; for the current package.</source>
          <target state="translated">该字段定义当前程序包的&lt;a href=&quot;#packages_subpath_imports&quot;&gt;子路径导入&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="353351e40895571a9fe1a94d54ee8ac76890b44d" translate="yes" xml:space="preserve">
          <source>This flag exists so that the main module can be opted-in to the same behavior that &lt;code&gt;--preserve-symlinks&lt;/code&gt; gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions.</source>
          <target state="translated">这个标志的存在使主模块可以选择 &lt;code&gt;--preserve-symlinks&lt;/code&gt; 提供给所有其他导入的相同行为。它们是单独的标志，但是，用于与较旧的Node.js版本向后兼容。</target>
        </trans-unit>
        <trans-unit id="22fd36e23827a3db1f425306badbacaded4ffb64" translate="yes" xml:space="preserve">
          <source>This flag exists to aid in experimentation with the internal implementation of the Node.js http parser. This flag is likely to become a no-op and removed at some point in the future.</source>
          <target state="translated">这个标志的存在是为了帮助实验Node.js http解析器的内部实现。这个标志很可能在未来的某个时候被删除。</target>
        </trans-unit>
        <trans-unit id="62d2caffde3a99f9ad79f9ef28e6d3f1fc2ba015" translate="yes" xml:space="preserve">
          <source>This flag is inherited from V8 and is subject to change upstream. It may disappear in a non-semver-major release.</source>
          <target state="translated">这个标志是从 V8 继承的,在上游可能会有变化。它可能会在非Semver-major版本中消失。</target>
        </trans-unit>
        <trans-unit id="0ef0d9ec3e79a5d118740d96d95026bba3f19b0a" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Readable&lt;/code&gt; class methods only.</source>
          <target state="translated">此功能不得由应用程序代码直接调用。它应该由子类实现，并且只能由内部 &lt;code&gt;Readable&lt;/code&gt; 类方法调用。</target>
        </trans-unit>
        <trans-unit id="49a676e99b324309fcea6e9319c1afc529b01374" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="translated">此功能不得由应用程序代码直接调用。它应该由子类实现，并且只能由内部 &lt;code&gt;Writable&lt;/code&gt; 类方法调用。</target>
        </trans-unit>
        <trans-unit id="1f33ccfcd0f74d271bd116cb4c56da77fb246945" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed before they are run using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt;, which has the same signature. Callbacks are run in last-in first-out order.</source>
          <target state="translated">此函数添加了一个挂钩，该挂钩将在给定的Node.js实例关闭之前运行。如有必要，可以使用具有相同签名的 &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; 在运行之前删除此类挂钩。回调以后进先出的顺序运行。</target>
        </trans-unit>
        <trans-unit id="3de80300bdb948c051cf6cc4090a49b1df7ff897" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; before they are run, which has the same signature.</source>
          <target state="translated">此函数添加了一个挂钩，该挂钩将在给定的Node.js实例关闭之前运行。如有必要，可以在运行具有相同签名的钩子之前使用 &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; 删除它们。</target>
        </trans-unit>
        <trans-unit id="90ca9c092fb3cd108c85d11cc79640ed5f5ff9ea" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;, with some exceptions:</source>
          <target state="translated">该函数的行为类似于&lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt;，但有一些例外：</target>
        </trans-unit>
        <trans-unit id="b68ec689236f9a0971c9dc975d6d90cad1215953" translate="yes" xml:space="preserve">
          <source>This function can be overwritten by providing alternative function as part of the &lt;code&gt;options.checkServerIdentity&lt;/code&gt; option passed to &lt;code&gt;tls.connect()&lt;/code&gt;. The overwriting function can call &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; of course, to augment the checks done with additional verification.</source>
          <target state="translated">通过提供替代功能作为传递给 &lt;code&gt;tls.connect()&lt;/code&gt; 的 &lt;code&gt;options.checkServerIdentity&lt;/code&gt; 选项的一部分，可以覆盖此功能。覆盖函数当然可以调用 &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; ，以通过附加验证来扩大检查范围。</target>
        </trans-unit>
        <trans-unit id="19be6f8a2996df1dc3d420cff41c083dff365e49" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt;&lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="translated">此函数创建一个新的&lt;a href=&quot;#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;，将所有选项设置为默认值，立即使用&lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt; &lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt; &lt;/a&gt;发起连接，然后返回启动连接的 &lt;code&gt;net.Socket&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e1ad29049dcb1287306ecc15dd61f9a7c9096e21" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt;&lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="translated">此函数创建一个新的&lt;a href=&quot;#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;并将所有选项设置为默认值，立即使用&lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt; &lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt; &lt;/a&gt;发起连接，然后返回 &lt;code&gt;net.Socket&lt;/code&gt; 来启动连接。</target>
        </trans-unit>
        <trans-unit id="cb7a012e16cda321f95feeb4747e891fbb16db52" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will resolve the &lt;code&gt;Promise&lt;/code&gt; with an error using code &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="translated">该功能在7.1之前的AIX版本上不起作用，它将使用代码 &lt;code&gt;UV_ENOSYS&lt;/code&gt; 来解决 &lt;code&gt;Promise&lt;/code&gt; 并出现错误。</target>
        </trans-unit>
        <trans-unit id="42b8c900f932b0d2bf423ef68b4068f49e84544a" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will return the error &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="translated">该函数在7.1之前的AIX版本上不起作用，它将返回错误 &lt;code&gt;UV_ENOSYS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5697cdda4de768e2cf54b723a122efe5653b963a" translate="yes" xml:space="preserve">
          <source>This function ensures that &lt;code&gt;path&lt;/code&gt; is resolved absolutely, and that the URL control characters are correctly encoded when converting into a File URL.</source>
          <target state="translated">此功能可确保绝对解析 &lt;code&gt;path&lt;/code&gt; ，并在转换为文件URL时正确编码URL控制字符。</target>
        </trans-unit>
        <trans-unit id="1108aee998992248b38802c507c72b2ed7d96209" translate="yes" xml:space="preserve">
          <source>This function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.</source>
          <target state="translated">该函数确保百分数编码字符的正确解码,同时确保跨平台的有效绝对路径字符串。</target>
        </trans-unit>
        <trans-unit id="a70fc6c3e16322065cdff0ce2620dd70b68cc89b" translate="yes" xml:space="preserve">
          <source>This function executes a string of JavaScript code and returns its result with the following caveats:</source>
          <target state="translated">该函数执行一串JavaScript代码,并返回其结果,但有以下注意事项。</target>
        </trans-unit>
        <trans-unit id="c6da0e5af272e064260e3498115fb5e36dc75e6f" translate="yes" xml:space="preserve">
          <source>This function fills the &lt;code&gt;version&lt;/code&gt; struct with the major, minor, and patch version of Node.js that is currently running, and the &lt;code&gt;release&lt;/code&gt; field with the value of &lt;a href=&quot;process#process_process_release&quot;&gt;&lt;code&gt;process.release.name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此函数使用当前正在运行的Node.js的主要，次要和补丁版本填充 &lt;code&gt;version&lt;/code&gt; 结构，并使用&lt;a href=&quot;process#process_process_release&quot;&gt; &lt;code&gt;process.release.name&lt;/code&gt; &lt;/a&gt;的值填充 &lt;code&gt;release&lt;/code&gt; 字段。</target>
        </trans-unit>
        <trans-unit id="4badebe3055deecf26d575320a5dc0d908bb82ac" translate="yes" xml:space="preserve">
          <source>This function gives V8 an indication of the amount of externally allocated memory that is kept alive by JavaScript objects (i.e. a JavaScript object that points to its own memory allocated by a native module). Registering externally allocated memory will trigger global garbage collections more often than it would otherwise.</source>
          <target state="translated">这个函数给V8提供了JavaScript对象(即一个指向本地模块分配的自己的内存的JavaScript对象)所保持的外部分配内存的数量。注册外部分配的内存会比其他方式更频繁地触发全局垃圾收集。</target>
        </trans-unit>
        <trans-unit id="b17195473e810af1aa1ea35771a8d98831afcd81" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readBigUint64BE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readBigUint64BE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="daa92f9057f7e94696ed20cc3e8e5783964bde9d" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readBigUint64LE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readBigUint64LE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="5c87095fe78fe415ecf76676138daab46f795497" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint16BE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readUint16BE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="a599fe2ebb6e0c90f94e70d45ed6a6288849ec55" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint16LE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readUint16LE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="9ddf061751bfc021947a9bb28f05d5f92b30e724" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint32BE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readUint32BE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="d062235ab556e4b8b487be4c2cbf719bc71bb59c" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint32LE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readUint32LE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="4ca68f13ed6e5def2798c66c6ee71a5996cfd8f9" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint8()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readUint8()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="ba4f4188ecc0c8acd718f14536ebb52296b31683" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUintBE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readUintBE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="acda940e611ac5151444acf58a6c596bc91a4ff5" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUintLE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.readUintLE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="eae0c648e7e8b4c6c06ab3bdc166c10fd01a29bc" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeBigUint64BE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeBigUint64BE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="d989597ca83ce92b2ebc974227e030f79836246b" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeBigUint64LE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeBigUint64LE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="7882fe6b12a08ba2ecedc0ac073aa0c6926d56e8" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint16BE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeUint16BE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="dd4ede003e84631aa7ba9cf2c18f90f4daa2ea5b" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint16LE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeUint16LE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="ca2a193ac4613205dba1af950bb14e9c274d1578" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint32BE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeUint32BE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="bc823e61d2d24573479596ab4f4b6978195712b4" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint32LE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeUint32LE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="41d2df3a4f68377357ed939a55b364d4097c457c" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint8()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeUint8()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="402a6fa5e58d03fc7bbe60b46e8a7c35f0c26ebd" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUintBE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeUintBE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="03a24117e8fc9cb06efe4145ec7da0fd24e48708" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUintLE()&lt;/code&gt;.</source>
          <target state="translated">此函数也可以作为 &lt;code&gt;buf.writeUintLE()&lt;/code&gt; 使用。</target>
        </trans-unit>
        <trans-unit id="b21315d0885d32ae17e3f8adb7e9b7d15b184de6" translate="yes" xml:space="preserve">
          <source>This function is asynchronous because the ES module resolver in Node.js is allowed to be asynchronous.</source>
          <target state="translated">这个函数是异步的,因为Node.js中的ES模块解析器是允许异步的。</target>
        </trans-unit>
        <trans-unit id="857c61c4553c47ab5c22be99637b828b0046272f" translate="yes" xml:space="preserve">
          <source>This function is asynchronous because the ES module resolver in Node.js is asynchronous. With the introduction of &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;Top-Level Await&lt;/a&gt;, these use cases will be easier as they won't require an async function wrapper.</source>
          <target state="translated">此功能是异步的，因为Node.js中的ES模块解析器是异步的。随着&amp;ldquo;&lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;顶级等待&amp;rdquo;&lt;/a&gt;的引入，这些用例将变得更容易，因为它们不需要异步函数包装器。</target>
        </trans-unit>
        <trans-unit id="aa1a128b76492cea694295767529e32daed47241" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the connection is established, the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event will be emitted. If there is a problem connecting, instead of a &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event, an &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event will be emitted with the error passed to the &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; listener. The last parameter &lt;code&gt;connectListener&lt;/code&gt;, if supplied, will be added as a listener for the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event &lt;strong&gt;once&lt;/strong&gt;.</source>
          <target state="translated">该功能是异步的。建立&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;将发出&amp;ldquo;连接&amp;rdquo;事件。如果连接有问题，则将发出&lt;a href=&quot;#net_event_error_1&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt;事件，而不是&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;事件，并将错误传递给&lt;a href=&quot;#net_event_error_1&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt;侦听器。最后一个参数 &lt;code&gt;connectListener&lt;/code&gt; ，如果提供，将被添加为一个监听器&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;事件&lt;strong&gt;一次&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04d4248379ca91265c113f72fb881941a2bc6374" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the server starts listening, the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event will be emitted. The last parameter &lt;code&gt;callback&lt;/code&gt; will be added as a listener for the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">该功能是异步的。服务器开始监听时，将发出&lt;a href=&quot;#net_event_listening&quot;&gt; &lt;code&gt;'listening'&lt;/code&gt; &lt;/a&gt;事件。最后一个参数 &lt;code&gt;callback&lt;/code&gt; 将添加为&lt;a href=&quot;#net_event_listening&quot;&gt; &lt;code&gt;'listening'&lt;/code&gt; &lt;/a&gt;事件的侦听器。</target>
        </trans-unit>
        <trans-unit id="2bee66a03f4e0be219c5798f053d5e9b9c3e847d" translate="yes" xml:space="preserve">
          <source>This function is based on a constant-time algorithm. Returns true if &lt;code&gt;a&lt;/code&gt; is equal to &lt;code&gt;b&lt;/code&gt;, without leaking timing information that would allow an attacker to guess one of the values. This is suitable for comparing HMAC digests or secret values like authentication cookies or &lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;capability urls&lt;/a&gt;.</source>
          <target state="translated">此功能基于恒定时间算法。如果 &lt;code&gt;a&lt;/code&gt; 等于 &lt;code&gt;b&lt;/code&gt; ，则返回true ，而不会泄漏会使攻击者猜测其中一个值的定时信息。这适用于比较HMAC摘要或身份验证cookie或&lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;功能url之&lt;/a&gt;类的秘密值。</target>
        </trans-unit>
        <trans-unit id="7f26bf91d7cc00bfeb0aad8763630fd384b5df2c" translate="yes" xml:space="preserve">
          <source>This function is identical to &lt;a href=&quot;#util_util_format_format_args&quot;&gt;&lt;code&gt;util.format()&lt;/code&gt;&lt;/a&gt;, except in that it takes an &lt;code&gt;inspectOptions&lt;/code&gt; argument which specifies options that are passed along to &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该函数与&lt;a href=&quot;#util_util_format_format_args&quot;&gt; &lt;code&gt;util.format()&lt;/code&gt; &lt;/a&gt;相同，不同之处在于它采用了 &lt;code&gt;inspectOptions&lt;/code&gt; 参数，该参数指定了传递给&lt;a href=&quot;#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; 的选项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="617bb9f000f555b14d080241e1d35366b287a613" translate="yes" xml:space="preserve">
          <source>This function is not completely equivalent to &lt;code&gt;querystring.parse()&lt;/code&gt;. One difference is that &lt;code&gt;querystring.parse()&lt;/code&gt; does url decoding:</source>
          <target state="translated">此函数并不完全等同于 &lt;code&gt;querystring.parse()&lt;/code&gt; 。一个区别是 &lt;code&gt;querystring.parse()&lt;/code&gt; 进行 URL解码：</target>
        </trans-unit>
        <trans-unit id="eb6a3e28055b4eb1c155f9eed1a1ea921b27b662" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform</source>
          <target state="translated">这个函数现在是跨平台的,不再在任何平台上返回一个带有斜线的路径。</target>
        </trans-unit>
        <trans-unit id="547b61aa8084b6f0d2b8892c94a1327d80d9a29d" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform.</source>
          <target state="translated">这个函数现在是跨平台的,在任何平台上都不再返回带有斜线的路径。</target>
        </trans-unit>
        <trans-unit id="e0d18b4c1d734142a1855c74af4c046ac1c0027b" translate="yes" xml:space="preserve">
          <source>This function is only available for zlib-based streams, i.e. not Brotli.</source>
          <target state="translated">这个功能只适用于基于zlib的流,即不适用Brotli。</target>
        </trans-unit>
        <trans-unit id="8a50b04599b1f0639a100cf46f5d1c6f9b45123c" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android).</source>
          <target state="translated">此功能仅在POSIX平台上可用(即不是Windows或Android)。</target>
        </trans-unit>
        <trans-unit id="dcddf4c38c715eb9dc19e1f8b915629007eb9f86" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">该功能仅在POSIX平台（即Windows或Android）上不可用。该功能在&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;线程中不可用。</target>
        </trans-unit>
        <trans-unit id="9b8337051652d8cca59af0a3ee06f51154cfa9f8" translate="yes" xml:space="preserve">
          <source>This function is only called if the certificate passed all other checks, such as being issued by trusted CA (&lt;code&gt;options.ca&lt;/code&gt;).</source>
          <target state="translated">仅当证书通过所有其他检查（例如由受信任的CA颁发）时，才调用此函数（ &lt;code&gt;options.ca&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4dd8d9762971f53a0f4b9c54c5b91e951886daa4" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; but requires the first argument to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; that will be filled. It also requires that a callback is passed in.</source>
          <target state="translated">此函数类似于&lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt; &lt;code&gt;crypto.randomBytes()&lt;/code&gt; ,&lt;/a&gt;但要求第一个参数是将要填充的&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;。它还要求传递回调。</target>
        </trans-unit>
        <trans-unit id="a0be84b52a05de61cb37d8e8aafedfc9056c383b" translate="yes" xml:space="preserve">
          <source>This function now returns a Promise. Passing a callback is deprecated, and was useless up to this version, as the Worker was actually terminated synchronously. Terminating is now a fully asynchronous operation.</source>
          <target state="translated">这个函数现在返回一个 Promise。传递回调已被废弃,在这个版本之前是没有用的,因为Worker实际上是同步终止的。终止现在是一个完全异步的操作。</target>
        </trans-unit>
        <trans-unit id="adc390dbb0e012efb77ff501c95f1aa407517c06" translate="yes" xml:space="preserve">
          <source>This function now supports IEEE-P1363 DSA and ECDSA signatures.</source>
          <target state="translated">该功能现在支持IEEE-P1363 DSA和ECDSA签名。</target>
        </trans-unit>
        <trans-unit id="894173e491bab80c84c852bbf2fd895d54ca239e" translate="yes" xml:space="preserve">
          <source>This function now supports RSA-PSS keys.</source>
          <target state="translated">该功能现在支持RSA-PSS密钥。</target>
        </trans-unit>
        <trans-unit id="1d299f2177608180223cfccb77b867a0f516eab6" translate="yes" xml:space="preserve">
          <source>This function now supports key objects.</source>
          <target state="translated">该功能现在支持关键对象。</target>
        </trans-unit>
        <trans-unit id="91771921fecce0493df003c3b93efccae8cfb43d" translate="yes" xml:space="preserve">
          <source>This function operates asynchronously. The &lt;code&gt;'close'&lt;/code&gt; event will be emitted when the server has no more open connections.</source>
          <target state="translated">此功能异步运行。在 &lt;code&gt;'close'&lt;/code&gt; 时，服务器不再有打开的连接事件将被发射。</target>
        </trans-unit>
        <trans-unit id="0516587396d5bc4b5aea745b473a81786e9cfdf7" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker is connected to its master via its IPC channel, &lt;code&gt;false&lt;/code&gt; otherwise. A worker is connected to its master after it has been created. It is disconnected after the &lt;code&gt;'disconnect'&lt;/code&gt; event is emitted.</source>
          <target state="translated">如果工作者通过其IPC通道连接到其主服务器，则此函数返回 &lt;code&gt;true&lt;/code&gt; ,否则返回 &lt;code&gt;false&lt;/code&gt; 。创建工作服务器后，该工作服务器将连接到其主服务器。发出 &lt;code&gt;'disconnect'&lt;/code&gt; 事件后断开连接。</target>
        </trans-unit>
        <trans-unit id="a3544713b214d05ed5bf6d144fbd49ea7c59cdb9" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker's process has terminated (either because of exiting or being signaled). Otherwise, it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">如果工作进程终止（由于退出或被通知），则此函数返回 &lt;code&gt;true&lt;/code&gt; 。否则，它返回 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28d972587f7fd8928ac54fe47aed457c4167ba5b" translate="yes" xml:space="preserve">
          <source>This function should only be used for reconnecting a socket after &lt;code&gt;'close'&lt;/code&gt; has been emitted or otherwise it may lead to undefined behavior.</source>
          <target state="translated">此功能仅应在发出 &lt;code&gt;'close'&lt;/code&gt; 后用于重新连接套接字，否则可能导致不确定的行为。</target>
        </trans-unit>
        <trans-unit id="af382458c7c1694962f7272d5dc6257cee21c759" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="translated">此函数使用一个可选的附加参数 &lt;code&gt;err&lt;/code&gt; -一个 &lt;code&gt;Error&lt;/code&gt; 对象，它将用作报告中打印的JavaScript堆栈的上下文。</target>
        </trans-unit>
        <trans-unit id="85a6696b2b5e9ad1b7f6b1c4ddafeb81b81510f6" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="translated">此函数使用一个可选的附加参数 &lt;code&gt;err&lt;/code&gt; -一个 &lt;code&gt;Error&lt;/code&gt; 对象，它将用作报告中打印的JavaScript堆栈的上下文。当使用报表处理回调或异常处理程序中的错误时，这使报表可以包括原始错误的位置以及处理的位置。</target>
        </trans-unit>
        <trans-unit id="2598594008e308c577b78ccab80128ea1021d684" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="translated">此函数采用可选的附加参数 &lt;code&gt;err&lt;/code&gt; ，它是一个 &lt;code&gt;Error&lt;/code&gt; 对象，将用作报表中打印的JavaScript堆栈的上下文。使用报表处理回调或异常处理程序中的错误时，这使报表可以包含原始错误的位置以及处理的位置。</target>
        </trans-unit>
        <trans-unit id="5aed6487576d7dd9ad1eb9e85fc412600a086575" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt;, which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="translated">此函数采用可选的附加参数 &lt;code&gt;err&lt;/code&gt; ，该参数是一个 &lt;code&gt;Error&lt;/code&gt; 对象，它将用作报告中打印的JavaScript堆栈的上下文。</target>
        </trans-unit>
        <trans-unit id="77ea37c691223737f81084a936fc91467e04f445" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;filename&lt;/code&gt;, which is the name of a file into which the report is written.</source>
          <target state="translated">此函数采用可选的附加参数 &lt;code&gt;filename&lt;/code&gt; ，这是将报告写入其中的文件的名称。</target>
        </trans-unit>
        <trans-unit id="5f1d19a17165c41d2e0284a1b5c28f86bd5da3dc" translate="yes" xml:space="preserve">
          <source>This function will kill the worker. In the master, it does this by disconnecting the &lt;code&gt;worker.process&lt;/code&gt;, and once disconnected, killing with &lt;code&gt;signal&lt;/code&gt;. In the worker, it does it by disconnecting the channel, and then exiting with code &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">此功能将杀死工人。在主服务器中，它是通过断开 &lt;code&gt;worker.process&lt;/code&gt; 的连接来实现的，一旦断开连接，则用 &lt;code&gt;signal&lt;/code&gt; 杀死它。在worker中，它是通过断开通道连接，然后以代码 &lt;code&gt;0&lt;/code&gt; 退出来完成此操作的。</target>
        </trans-unit>
        <trans-unit id="fc334c0e240796cb69b50cfdf422e85bbfb6b48c" translate="yes" xml:space="preserve">
          <source>This functionality has been removed.</source>
          <target state="translated">该功能已被删除。</target>
        </trans-unit>
        <trans-unit id="36e8179328462918849467415bc6e47b53741e6f" translate="yes" xml:space="preserve">
          <source>This happens when:</source>
          <target state="translated">这种情况发生在:</target>
        </trans-unit>
        <trans-unit id="c6a7c9955e027e73c53547cdbc2c54fa7e69027d" translate="yes" xml:space="preserve">
          <source>This has the same false positives and negatives as described in &lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt;&lt;code&gt;writeStream.getColorDepth()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">它具有与&lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt; &lt;code&gt;writeStream.getColorDepth()&lt;/code&gt; 中&lt;/a&gt;所述相同的错误肯定和否定。</target>
        </trans-unit>
        <trans-unit id="af19c7ad3abc63f1d8cfd897e2ce7c93b37d4059" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also currently no way to interact with the Loader, though support is planned.</source>
          <target state="translated">与&lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScript模块加载器&lt;/a&gt;相比，此实现的层次较低。尽管已经计划了支持，但是目前还没有办法与Loader进行交互。</target>
        </trans-unit>
        <trans-unit id="4cc43cf5c93c4064080045c3dcadfc716ce173eb" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_modules_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also no way to interact with the Loader yet, though support is planned.</source>
          <target state="translated">与&lt;a href=&quot;esm#esm_modules_ecmascript_modules&quot;&gt;ECMAScript模块加载器&lt;/a&gt;相比，此实现的层次较低。尽管已经计划了支持，但是还没有办法与Loader进行交互。</target>
        </trans-unit>
        <trans-unit id="21807510feb784cd93fc683e3bd54b0664e06913" translate="yes" xml:space="preserve">
          <source>This implementation matches &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;browser &lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">此实现与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;浏览器 &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;相匹配。</target>
        </trans-unit>
        <trans-unit id="7a7d6f9a64fbfdcb7e7c59dad106536b0e46b04e" translate="yes" xml:space="preserve">
          <source>This integration is in line with the &lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;ES Module Integration Proposal for Web Assembly&lt;/a&gt;.</source>
          <target state="translated">该集成符合&lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;Web组件&lt;/a&gt;的ES模块集成建议。</target>
        </trans-unit>
        <trans-unit id="6b04d8ad3ebc5af27ac4b4e1c10756739a2d2124" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the socket is not connected yet, either because &lt;code&gt;.connect()&lt;/code&gt; has not yet been called or because it is still in the process of connecting (see &lt;a href=&quot;#net_socket_connecting&quot;&gt;&lt;code&gt;socket.connecting&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">如果尚未连接套接字，这是 &lt;code&gt;true&lt;/code&gt; 的，这是因为尚未调用 &lt;code&gt;.connect()&lt;/code&gt; 或因为它仍在连接过程中（请参见&lt;a href=&quot;#net_socket_connecting&quot;&gt; &lt;code&gt;socket.connecting&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="44a2b92c720faf1d8972e612940550448cb632ce" translate="yes" xml:space="preserve">
          <source>This is a direct static replacement without any special handling for file extensions. In the previous example, &lt;code&gt;pkg/features/x.json&lt;/code&gt; would be resolved to &lt;code&gt;./src/features/x.json.js&lt;/code&gt; in the mapping.</source>
          <target state="translated">这是直接的静态替换，无需对文件扩展名进行任何特殊处理。在前面的示例中，将在映射 &lt;code&gt;pkg/features/x.json&lt;/code&gt; 解析为 &lt;code&gt;./src/features/x.json.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c6a303413dae5cf2f56522f80094d23bc472745a" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="translated">这是编写Node.js程序时经常遇到的系统错误的列表。有关完整列表，请参见&lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt; &lt;code&gt;errno&lt;/code&gt; （3）手册页&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6384af73049677961508c308274b10195affbf33" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;https://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="translated">这是编写Node.js程序时经常遇到的系统错误的列表。有关完整列表，请参见&lt;a href=&quot;https://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt; &lt;code&gt;errno&lt;/code&gt; （3）手册页&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="615981803bb95c92778608ec98aa86e6b7bec7bb" translate="yes" xml:space="preserve">
          <source>This is a property on the &lt;code&gt;buffer&lt;/code&gt; module returned by &lt;code&gt;require('buffer')&lt;/code&gt;, not on the &lt;code&gt;Buffer&lt;/code&gt; global or a &lt;code&gt;Buffer&lt;/code&gt; instance.</source>
          <target state="translated">这是 &lt;code&gt;require('buffer')&lt;/code&gt; 返回的 &lt;code&gt;buffer&lt;/code&gt; 模块上的属性，而不是 &lt;code&gt;Buffer&lt;/code&gt; 全局或 &lt;code&gt;Buffer&lt;/code&gt; 实例上的属性。</target>
        </trans-unit>
        <trans-unit id="8e9c8d44f5ae37ba8f8822ae889f6fbab37889e9" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stderr: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data is piped to the parent thread's &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">这是一个可读流，其中包含在工作线程内写入&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; 的&lt;/a&gt;数据。如果未将 &lt;code&gt;stderr: true&lt;/code&gt; 传递给&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;构造函数，则将数据通过管道传递到父线程的&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="22812016d42b8d66cb470ae9bc87b4d2aece8842" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stderr: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">这是一个可读流，其中包含在工作线程内写入&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; 的&lt;/a&gt;数据。如果未将 &lt;code&gt;stderr: true&lt;/code&gt; 传递给&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;构造函数，则数据将通过管道传递到父线程的&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="4977112dc8895492fcdb336f69df176a64b12c69" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stdout: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data is piped to the parent thread's &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">这是一个可读流，其中包含在工作线程内写入&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 的&lt;/a&gt;数据。如果未将 &lt;code&gt;stdout: true&lt;/code&gt; 传递给&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;构造函数，则将数据通过管道传递到父线程的&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="ef6edca8b742a017994b5d4c4977f24985399057" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stdout: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">这是一个可读流，其中包含在工作线程内写入&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; 的&lt;/a&gt;数据。如果未将 &lt;code&gt;stdout: true&lt;/code&gt; 传递给&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;构造函数，则数据将通过管道传递到父线程的&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="6afd75c5ddd399af67dafff5027ffe863f1e6152" translate="yes" xml:space="preserve">
          <source>This is also emitted in case this &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream emits an error when a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream pipes into it.</source>
          <target state="translated">这也发射在情况下，这&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;流发出错误时，&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;流管道进去。</target>
        </trans-unit>
        <trans-unit id="7266000cead4bb9d2f0e14e9324975faa9eb3a46" translate="yes" xml:space="preserve">
          <source>This is an abstraction used to control and modify the lifetime of objects created within a particular scope. In general, N-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, N-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values.</source>
          <target state="translated">这是一个用于控制和修改特定作用域内创建的对象的寿命的抽象。一般来说,N-API值是在句柄范围的上下文中创建的。当从JavaScript调用本地方法时,将存在一个默认的句柄作用域。如果用户没有明确地创建一个新的句柄范围,N-API值将在默认的句柄范围内创建。对于在执行本地方法之外的任何代码调用(例如,在libuv回调调用期间),模块需要在调用任何可能导致创建JavaScript值的函数之前创建一个范围。</target>
        </trans-unit>
        <trans-unit id="ac28259e1a0df374cd212eac367f298bb33dcf21" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that is used to represent a JavaScript value.</source>
          <target state="translated">这是一个不透明的指针,用来表示一个JavaScript值。</target>
        </trans-unit>
        <trans-unit id="9f727952d85916df43ab81b94013dad46a0ffb66" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that represents a JavaScript function which can be called asynchronously from multiple threads via &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt;.</source>
          <target state="translated">这是一个不透明的指针，表示一个JavaScript函数，可以通过 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; 从多个线程异步调用该函数。</target>
        </trans-unit>
        <trans-unit id="a4d7f80ddbb26766196c61aca550b0031231b661" translate="yes" xml:space="preserve">
          <source>This is automatically called by any readline instance on its &lt;code&gt;input&lt;/code&gt; if the &lt;code&gt;input&lt;/code&gt; is a terminal. Closing the &lt;code&gt;readline&lt;/code&gt; instance does not stop the &lt;code&gt;input&lt;/code&gt; from emitting &lt;code&gt;'keypress'&lt;/code&gt; events.</source>
          <target state="translated">如果 &lt;code&gt;input&lt;/code&gt; 是终端，则任何readline实例都会在其 &lt;code&gt;input&lt;/code&gt; 上自动调用它。关闭 &lt;code&gt;readline&lt;/code&gt; 实例并不会阻止 &lt;code&gt;input&lt;/code&gt; 发出 &lt;code&gt;'keypress'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="7e70153317996f40a0e9f1af6e059c6c6470fbd1" translate="yes" xml:space="preserve">
          <source>This is defined exactly the same as it is in browsers providing the URL of the current module file.</source>
          <target state="translated">这个定义和浏览器中提供当前模块文件的URL完全一样。</target>
        </trans-unit>
        <trans-unit id="513ca07430a1834e15b4c394a7795cf89cbe75bd" translate="yes" xml:space="preserve">
          <source>This is important when developing APIs in order to give users the opportunity to assign event handlers &lt;em&gt;after&lt;/em&gt; an object has been constructed but before any I/O has occurred:</source>
          <target state="translated">在开发API时，这一点很重要，以便使用户有机会在构造对象&lt;em&gt;之后&lt;/em&gt;但在发生任何I / O之前分配事件处理程序：</target>
        </trans-unit>
        <trans-unit id="357a4cb22700e3b307528201a96ec4a2b0b9733a" translate="yes" xml:space="preserve">
          <source>This is in addition to a single internal output slab buffer of size &lt;code&gt;chunkSize&lt;/code&gt;, which defaults to 16K.</source>
          <target state="translated">这是除了尺寸的单个内部输出平板缓冲器 &lt;code&gt;chunkSize&lt;/code&gt; ，缺省值为16K。</target>
        </trans-unit>
        <trans-unit id="0e3d91f0352da1646e45574d84c00b75bddafb4b" translate="yes" xml:space="preserve">
          <source>This is less performant than transpiling source files before running Node.js; a transpiler loader should only be used for development and testing purposes.</source>
          <target state="translated">这比在运行Node.js之前移植源文件的性能要差;移植器加载器应该只用于开发和测试目的。</target>
        </trans-unit>
        <trans-unit id="07ba21f3ad7e7c13655130ea573064167080a992" translate="yes" xml:space="preserve">
          <source>This is not a hard limit. The &lt;code&gt;EventEmitter&lt;/code&gt; instance will allow more listeners to be added but will output a trace warning to stderr indicating that a &quot;possible EventEmitter memory leak&quot; has been detected. For any single &lt;code&gt;EventEmitter&lt;/code&gt;, the &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; and &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; methods can be used to temporarily avoid this warning:</source>
          <target state="translated">这不是硬性限制。该 &lt;code&gt;EventEmitter&lt;/code&gt; 实例将允许添加更多的听众但指示&amp;ldquo;可能EventEmitter内存泄漏&amp;rdquo;已经检测到将输出一个跟踪警告到stderr。对于任何单个 &lt;code&gt;EventEmitter&lt;/code&gt; ，可以使用 &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; 和 &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; 方法暂时避免此警告：</target>
        </trans-unit>
        <trans-unit id="3d247546ea140a0078a900e014d8747b999296d6" translate="yes" xml:space="preserve">
          <source>This is not a problem in common cases with &lt;code&gt;latin1&lt;/code&gt; or &lt;code&gt;ascii&lt;/code&gt;. But it is advised to be mindful about this behavior when working with strings that could contain multi-byte characters.</source>
          <target state="translated">在 &lt;code&gt;latin1&lt;/code&gt; 或 &lt;code&gt;ascii&lt;/code&gt; 的常见情况下，这不是问题。但是建议在使用可能包含多字节字符的字符串时，请注意此行为。</target>
        </trans-unit>
        <trans-unit id="3d02f8a61048e89839ba3d326aaa6f920c92db2d" translate="yes" xml:space="preserve">
          <source>This is not used in Node.js and is provided purely for completeness.</source>
          <target state="translated">这在Node.js中没有使用,纯粹是为了完整而提供的。</target>
        </trans-unit>
        <trans-unit id="1c66676dbad5fdaa521ab930e256e4fa335eadac" translate="yes" xml:space="preserve">
          <source>This is now defined as a shared symbol.</source>
          <target state="translated">现在这被定义为一个共享符号。</target>
        </trans-unit>
        <trans-unit id="f5242dbc0ccf6b9ae1f9550732bf4ac3daf1ddd8" translate="yes" xml:space="preserve">
          <source>This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.</source>
          <target state="translated">这主要是对在NFS挂载上打开文件有用,因为它允许跳过潜在的本地缓存。它对I/O性能有很大的影响,所以除非需要,否则不建议使用这个标志。</target>
        </trans-unit>
        <trans-unit id="13659d9d635a0bb9731d74ddaa44ccbacf7114d8" translate="yes" xml:space="preserve">
          <source>This is the abstraction to use to reference a &lt;code&gt;napi_value&lt;/code&gt;. This allows for users to manage the lifetimes of JavaScript values, including defining their minimum lifetimes explicitly.</source>
          <target state="translated">这是用于引用 &lt;code&gt;napi_value&lt;/code&gt; 的抽象。这允许用户管理JavaScript值的生存期，包括明确定义其最小生存期。</target>
        </trans-unit>
        <trans-unit id="34a774ab2a4921da0fd743e3684fff94908d9756" translate="yes" xml:space="preserve">
          <source>This is the extent of Node.js's awareness of &lt;code&gt;package.json&lt;/code&gt; files.</source>
          <target state="translated">这就是Node.js对 &lt;code&gt;package.json&lt;/code&gt; 文件的了解程度。</target>
        </trans-unit>
        <trans-unit id="1b5770f4a8b8d2b91b8b89200402bfc85d1d9ae4" translate="yes" xml:space="preserve">
          <source>This is the extent of the awareness of &lt;code&gt;package.json&lt;/code&gt; files within Node.js.</source>
          <target state="translated">这是对Node.js中 &lt;code&gt;package.json&lt;/code&gt; 文件的了解程度。</target>
        </trans-unit>
        <trans-unit id="3d91ef4e57195bccfb6358ea28c6511e77bda4df" translate="yes" xml:space="preserve">
          <source>This is the final event emitted by any &lt;code&gt;Worker&lt;/code&gt; instance.</source>
          <target state="translated">这是任何 &lt;code&gt;Worker&lt;/code&gt; 实例发出的最终事件。</target>
        </trans-unit>
        <trans-unit id="7b4dc164d26c00c2e0663b4d38c3db42c8434ee4" translate="yes" xml:space="preserve">
          <source>This is the legacy version of &lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt;&lt;code&gt;process.hrtime.bigint()&lt;/code&gt;&lt;/a&gt; before &lt;code&gt;bigint&lt;/code&gt; was introduced in JavaScript.</source>
          <target state="translated">这是在JavaScript中引入 &lt;code&gt;bigint&lt;/code&gt; 之前的&lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt; &lt;code&gt;process.hrtime.bigint()&lt;/code&gt; &lt;/a&gt;的旧版本。</target>
        </trans-unit>
        <trans-unit id="2525459183823536083e4ebd1435d86bbd1b85ed" translate="yes" xml:space="preserve">
          <source>This is the most basic way to use a domain.</source>
          <target state="translated">这是最基本的使用域名的方式。</target>
        </trans-unit>
        <trans-unit id="1676fe37f0f693d20c9747f533e8a540bc92910a" translate="yes" xml:space="preserve">
          <source>This is the primary entry-point for anyone wanting to interact with a named channel. It produces a channel object which is optimized to reduce overhead at publish time as much as possible.</source>
          <target state="translated">对于任何想要与命名通道交互的人来说,这是一个主要的入口。它产生一个通道对象,这个对象经过优化,尽可能地减少发布时的开销。</target>
        </trans-unit>
        <trans-unit id="80b89f0e469cc98dfba15cb1d10494441d90a747" translate="yes" xml:space="preserve">
          <source>This is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.</source>
          <target state="translated">这是原始的HTTP主体,与可能使用的更高级别的多部分主体编码无关。</target>
        </trans-unit>
        <trans-unit id="538139721ac2a46c540659479840eaa7091999c5" translate="yes" xml:space="preserve">
          <source>This is the same behavior as &lt;code&gt;buf.subarray()&lt;/code&gt;.</source>
          <target state="translated">这与 &lt;code&gt;buf.subarray()&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="8885bf9fac1f550c45c516012648aa0d3c485186" translate="yes" xml:space="preserve">
          <source>This is the size (in bytes) of pre-allocated internal &lt;code&gt;Buffer&lt;/code&gt; instances used for pooling. This value may be modified.</source>
          <target state="translated">这是用于池化的预分配内部 &lt;code&gt;Buffer&lt;/code&gt; 实例的大小（以字节为单位）。该值可以修改。</target>
        </trans-unit>
        <trans-unit id="48967cae6d1c2b0c2a13e4b791916ed7e65a4ccd" translate="yes" xml:space="preserve">
          <source>This is useful for tracking potential errors in an application while using the &lt;code&gt;Promise&lt;/code&gt; constructor, as multiple resolutions are silently swallowed. However, the occurrence of this event does not necessarily indicate an error. For example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt;&lt;code&gt;Promise.race()&lt;/code&gt;&lt;/a&gt; can trigger a &lt;code&gt;'multipleResolves'&lt;/code&gt; event.</source>
          <target state="translated">这对于在使用 &lt;code&gt;Promise&lt;/code&gt; 构造函数时跟踪应用程序中的潜在错误很有用，因为无声地吞没了多种分辨率。但是，此事件的发生并不一定表示错误。例如，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt; &lt;code&gt;Promise.race()&lt;/code&gt; &lt;/a&gt;可以触发 &lt;code&gt;'multipleResolves'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="01763a87bcd722e13be0664e3816427229bb3d32" translate="yes" xml:space="preserve">
          <source>This issue also occurs when the &lt;code&gt;loop()&lt;/code&gt; call is scheduled using the &lt;code&gt;process.nextTick()&lt;/code&gt; and &lt;code&gt;queueMicrotask()&lt;/code&gt; functions.</source>
          <target state="translated">当使用 &lt;code&gt;process.nextTick()&lt;/code&gt; 和 &lt;code&gt;queueMicrotask()&lt;/code&gt; 函数调度 &lt;code&gt;loop()&lt;/code&gt; 调用时，也会发生此问题。</target>
        </trans-unit>
        <trans-unit id="c84e6ba5ec93b3229b046976c5bb2ea3de0008df" translate="yes" xml:space="preserve">
          <source>This issue occurs because all contexts share the same microtask and nextTick queues.</source>
          <target state="translated">出现这个问题是因为所有的上下文共享相同的微任务和nextTick队列。</target>
        </trans-unit>
        <trans-unit id="087b80944dc12b408a7190bd19a55dd80487fba1" translate="yes" xml:space="preserve">
          <source>This macro includes &lt;code&gt;NAPI_MODULE&lt;/code&gt;, and declares an &lt;code&gt;Init&lt;/code&gt; function with a special name and with visibility beyond the addon. This will allow Node.js to initialize the module even if it is loaded multiple times.</source>
          <target state="translated">该宏包括 &lt;code&gt;NAPI_MODULE&lt;/code&gt; ，并声明一个具有特殊名称且在附加组件之外还具有可见性的 &lt;code&gt;Init&lt;/code&gt; 函数。即使模块多次加载，这也将允许Node.js初始化模块。</target>
        </trans-unit>
        <trans-unit id="65b6d753134ef1843140e701dbcf7c6cf6f1c011" translate="yes" xml:space="preserve">
          <source>This mainly adds some input validation on top of &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt;. As an additional convenience, &lt;code&gt;superConstructor&lt;/code&gt; will be accessible through the &lt;code&gt;constructor.super_&lt;/code&gt; property.</source>
          <target state="translated">这主要是在 &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt; 之上添加一些输入验证。作为额外的便利，可以通过 &lt;code&gt;constructor.super_&lt;/code&gt; &lt;code&gt;superConstructor&lt;/code&gt; 属性访问superConstructor。</target>
        </trans-unit>
        <trans-unit id="bbe38e8ab91654a3718be6a69fd1e9049d8a23cf" translate="yes" xml:space="preserve">
          <source>This method adds HTTP trailing headers (a header but at the end of the message) to the response.</source>
          <target state="translated">此方法在响应中添加HTTP尾部头(一个头,但在消息的最后)。</target>
        </trans-unit>
        <trans-unit id="65a6ac889d5d3a2216eb8e367915333b528d1f56" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This API is similar to &lt;code&gt;napi_call_function&lt;/code&gt;. However, it is used to call &lt;em&gt;from&lt;/em&gt; native code back &lt;em&gt;into&lt;/em&gt; JavaScript &lt;em&gt;after&lt;/em&gt; returning from an async operation (when there is no other script on the stack). It is a fairly simple wrapper around &lt;code&gt;node::MakeCallback&lt;/code&gt;.</source>
          <target state="translated">此方法允许从本机加载项调用JavaScript函数对象。该API与 &lt;code&gt;napi_call_function&lt;/code&gt; 相似。但是，它用来调用&lt;em&gt;由&lt;/em&gt;本机代码回&lt;em&gt;成&lt;/em&gt;的JavaScript &lt;em&gt;后，&lt;/em&gt;从异步操作返回（当有堆栈上没有其他脚本）。这是一个围绕 &lt;code&gt;node::MakeCallback&lt;/code&gt; 的相当简单的包装器。</target>
        </trans-unit>
        <trans-unit id="314d268cd28ce9b140b0dded93860db9fb90479e" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This is the primary mechanism of calling back &lt;em&gt;from&lt;/em&gt; the add-on's native code &lt;em&gt;into&lt;/em&gt; JavaScript. For the special case of calling into JavaScript after an async operation, see &lt;a href=&quot;#n_api_napi_make_callback&quot;&gt;&lt;code&gt;napi_make_callback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此方法允许从本机加载项调用JavaScript函数对象。这是&lt;em&gt;从&lt;/em&gt;附加组件的本机代码回调&lt;em&gt;到&lt;/em&gt; JavaScript 的主要机制。有关在异步操作后调用JavaScript的特殊情况，请参见&lt;a href=&quot;#n_api_napi_make_callback&quot;&gt; &lt;code&gt;napi_make_callback&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5b47fa157850c2f5703ae846bb53e6699d8248ed" translate="yes" xml:space="preserve">
          <source>This method allows the efficient definition of multiple properties on a given object. The properties are defined using property descriptors (see &lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt;&lt;code&gt;napi_property_descriptor&lt;/code&gt;&lt;/a&gt;). Given an array of such property descriptors, this API will set the properties on the object one at a time, as defined by &lt;code&gt;DefineOwnProperty()&lt;/code&gt; (described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;Section 9.1.6&lt;/a&gt; of the ECMA-262 specification).</source>
          <target state="translated">这种方法可以有效地定义给定对象上的多个属性。使用属性描述符定义属性（请参见&lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt; &lt;code&gt;napi_property_descriptor&lt;/code&gt; &lt;/a&gt;）。给定这样的属性描述符数组，此API将一次定义对象上的属性，这由 &lt;code&gt;DefineOwnProperty()&lt;/code&gt; 定义（在ECMA-262规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;9.1.6节中&lt;/a&gt;进行了描述）。</target>
        </trans-unit>
        <trans-unit id="3024bc40da0e8b2f8456ff7b850738108b0ba432" translate="yes" xml:space="preserve">
          <source>This method calls &lt;code&gt;console.log()&lt;/code&gt; passing it the arguments received. This method does not produce any XML formatting.</source>
          <target state="translated">该方法调用 &lt;code&gt;console.log()&lt;/code&gt; ，将接收到的参数传递给它。此方法不会产生任何XML格式。</target>
        </trans-unit>
        <trans-unit id="a58dad5fbe14785fff61707964fc0d135efd16a6" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass.</source>
          <target state="translated">特定的 &lt;code&gt;Agent&lt;/code&gt; 子类可以覆盖此方法。</target>
        </trans-unit>
        <trans-unit id="044476cda3ae03b23c22f5aa1722fe2c9153e73c" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass. If this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.</source>
          <target state="translated">特定的 &lt;code&gt;Agent&lt;/code&gt; 子类可以覆盖此方法。如果此方法返回一个伪造的值，则套接字将被销毁，而不是持久保存以供下一个请求使用。</target>
        </trans-unit>
        <trans-unit id="411dbf433a68f70422dbaf488ba5f65a2beaeff4" translate="yes" xml:space="preserve">
          <source>This method can be used to request a peer's certificate after the secure connection has been established.</source>
          <target state="translated">此方法可用于在建立安全连接后请求对等体的证书。</target>
        </trans-unit>
        <trans-unit id="880393178dbd75cbd21c9662d8dee3698a77a077" translate="yes" xml:space="preserve">
          <source>This method can be used, in particular, to increase cache hits.</source>
          <target state="translated">这种方法可以用来,特别是增加缓存点击率。</target>
        </trans-unit>
        <trans-unit id="5f4cb1d7d9a937c696a9d3a130cc76d5f3a14117" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;) to prevent infinite recursion.</source>
          <target state="translated">在评估模块（ &lt;code&gt;module.status&lt;/code&gt; 为 &lt;code&gt;'evaluating'&lt;/code&gt; ）时，不能调用此方法以防止无限递归。</target>
        </trans-unit>
        <trans-unit id="ae61ef6fb5c5e0b2e4e9dd9285bb0ec91b77d7af" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;).</source>
          <target state="translated">在评估模块时，无法调用此方法（ &lt;code&gt;module.status&lt;/code&gt; 为 &lt;code&gt;'evaluating'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ce10b9da65b616da4694a90a9e7a21235864fb9b" translate="yes" xml:space="preserve">
          <source>This method defaults to the &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; constructor and can be overridden on subclasses.</source>
          <target state="translated">此方法默认为&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;构造函数，并且可以在子类上重写。</target>
        </trans-unit>
        <trans-unit id="fe24c9359e77ab155e2cf5807443c493af258ac7" translate="yes" xml:space="preserve">
          <source>This method disables the instance of &lt;code&gt;AsyncLocalStorage&lt;/code&gt;. All subsequent calls to &lt;code&gt;asyncLocalStorage.getStore()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; until &lt;code&gt;asyncLocalStorage.run()&lt;/code&gt; is called again.</source>
          <target state="translated">此方法禁用 &lt;code&gt;AsyncLocalStorage&lt;/code&gt; 实例。所有后续调用 &lt;code&gt;asyncLocalStorage.getStore()&lt;/code&gt; 将返回 &lt;code&gt;undefined&lt;/code&gt; ，直到 &lt;code&gt;asyncLocalStorage.run()&lt;/code&gt; 被再次调用。</target>
        </trans-unit>
        <trans-unit id="d59adf1d819f06dbe25fb548331d4b223442948c" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. Stops the current JavaScript CPU profiling session if one has been started and prints the report to the &lt;strong&gt;Profiles&lt;/strong&gt; panel of the inspector. See &lt;a href=&quot;#console_console_profile_label&quot;&gt;&lt;code&gt;console.profile()&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="translated">除非在检查器中使用，否则此方法不会显示任何内容。如果已经开始，则停止当前的JavaScript CPU分析会话，并将报告打印到检查器的&amp;ldquo; &lt;strong&gt;个人档案&amp;rdquo;&lt;/strong&gt;面板。有关示例，请参见&lt;a href=&quot;#console_console_profile_label&quot;&gt; &lt;code&gt;console.profile()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8ec4a52764354b50bcb9a5cfff971e55a8182917" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.markTimeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timestamp_label&quot;&gt;&lt;code&gt;console.timeStamp()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">除非在检查器中使用，否则此方法不会显示任何内容。所述 &lt;code&gt;console.markTimeline()&lt;/code&gt; 方法是弃用形式&lt;a href=&quot;#console_console_timestamp_label&quot;&gt; &lt;code&gt;console.timeStamp()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c9644bae39bdc4b2a06283995736aff4accc9db" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.profile()&lt;/code&gt; method starts a JavaScript CPU profile with an optional label until &lt;a href=&quot;#console_console_profileend_label&quot;&gt;&lt;code&gt;console.profileEnd()&lt;/code&gt;&lt;/a&gt; is called. The profile is then added to the &lt;strong&gt;Profile&lt;/strong&gt; panel of the inspector.</source>
          <target state="translated">除非在检查器中使用，否则此方法不会显示任何内容。所述 &lt;code&gt;console.profile()&lt;/code&gt; 方法开始于可选标签一个JavaScript CPU姿态直到&lt;a href=&quot;#console_console_profileend_label&quot;&gt; &lt;code&gt;console.profileEnd()&lt;/code&gt; &lt;/a&gt;被调用。然后将配置文件添加到检查器的&amp;ldquo; &lt;strong&gt;配置文件&amp;rdquo;&lt;/strong&gt;面板。</target>
        </trans-unit>
        <trans-unit id="66b73ac52f9f87f1e288fc8b5563d582410feaa9" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeStamp()&lt;/code&gt; method adds an event with the label &lt;code&gt;'label'&lt;/code&gt; to the &lt;strong&gt;Timeline&lt;/strong&gt; panel of the inspector.</source>
          <target state="translated">除非在检查器中使用，否则此方法不会显示任何内容。所述 &lt;code&gt;console.timeStamp()&lt;/code&gt; 方法增加了与标签的事件 &lt;code&gt;'label'&lt;/code&gt; 的&lt;strong&gt;时间轴&lt;/strong&gt;检查员的面板。</target>
        </trans-unit>
        <trans-unit id="902c866e4222a0e01ce48bdc721e0e086336e617" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_time_label&quot;&gt;&lt;code&gt;console.time()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">除非在检查器中使用，否则此方法不会显示任何内容。所述 &lt;code&gt;console.timeline()&lt;/code&gt; 方法是弃用形式&lt;a href=&quot;#console_console_time_label&quot;&gt; &lt;code&gt;console.time()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89dc19b7a95d7304b45400b37628fe89d51d2642" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timelineEnd()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timeend_label&quot;&gt;&lt;code&gt;console.timeEnd()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">除非在检查器中使用，否则此方法不会显示任何内容。所述 &lt;code&gt;console.timelineEnd()&lt;/code&gt; 方法是弃用形式&lt;a href=&quot;#console_console_timeend_label&quot;&gt; &lt;code&gt;console.timeEnd()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8f0d63d0d5a3ff9814f2a3fcabd14a01c8fd9857" translate="yes" xml:space="preserve">
          <source>This method exists for parity with the Web &lt;code&gt;MessagePort&lt;/code&gt; API. In Node.js, it is only useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of &lt;code&gt;.onmessage&lt;/code&gt;. Setting it automatically calls &lt;code&gt;.start()&lt;/code&gt;, but unsetting it lets messages queue up until a new handler is set or the port is discarded.</source>
          <target state="translated">存在此方法是为了与Web &lt;code&gt;MessagePort&lt;/code&gt; API保持奇偶校验。在Node.js中，仅当不存在事件侦听器时，它才可用于忽略消息。 Node.js在处理 &lt;code&gt;.onmessage&lt;/code&gt; 方面也有所不同。设置它会自动调用 &lt;code&gt;.start()&lt;/code&gt; ，但是取消设置它会使消息排队，直到设置了新的处理程序或端口被丢弃为止。</target>
        </trans-unit>
        <trans-unit id="9ee1a742255ec0013c5a3a66d547b57b65aa47b9" translate="yes" xml:space="preserve">
          <source>This method exists for parity with the Web &lt;code&gt;MessagePort&lt;/code&gt; API. In Node.js, it is only useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of &lt;code&gt;.onmessage&lt;/code&gt;. Setting it will automatically call &lt;code&gt;.start()&lt;/code&gt;, but unsetting it will let messages queue up until a new handler is set or the port is discarded.</source>
          <target state="translated">存在与Web &lt;code&gt;MessagePort&lt;/code&gt; API 奇偶校验的此方法。在Node.js中，仅当不存在事件侦听器时，它才可用于忽略消息。Node.js在处理 &lt;code&gt;.onmessage&lt;/code&gt; 方面也有所不同。设置它会自动调用 &lt;code&gt;.start()&lt;/code&gt; ，但是取消设置它会使消息排队，直到设置了新的处理程序或端口被丢弃为止。</target>
        </trans-unit>
        <trans-unit id="1bd0e8798533a40b472a574de3407e9a7b72f42b" translate="yes" xml:space="preserve">
          <source>This method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.freeze&quot;&gt;Section 19.1.2.6&lt;/a&gt; of the ECMA-262 specification.</source>
          <target state="translated">此方法冻结给定的对象。这样可以防止向其添加新属性，删除现有属性，防止更改现有属性的可枚举性，可配置性或可写性，并防止更改现有属性的值。它还可以防止更改对象的原型。这在ECMA-262规范的&lt;a href=&quot;https://tc39.es/ecma262/#sec-object.freeze&quot;&gt;19.1.2.6节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="3bfb7ad344e3264e6f56ee6b803df6669da02258" translate="yes" xml:space="preserve">
          <source>This method has a custom variant for promises that is available using &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">此方法具有可使用&lt;a href=&quot;util#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt;提供的promise的自定义变体：</target>
        </trans-unit>
        <trans-unit id="ebe369db9ddb8e7879390ef6464dc095b38a390a" translate="yes" xml:space="preserve">
          <source>This method is &lt;em&gt;not&lt;/em&gt; to be used in production applications.</source>
          <target state="translated">此方法&lt;em&gt;不可&lt;/em&gt;用于生产应用程序。</target>
        </trans-unit>
        <trans-unit id="d57d1e099a57589123cef0225673441664e1e377" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backward compatibility.</source>
          <target state="translated">为了向后兼容，此方法别名为 &lt;code&gt;worker.destroy()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb57dbb6c324bb36be5d114bc6d97130ad87632c" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backwards compatibility.</source>
          <target state="translated">为了向后兼容，此方法别名为 &lt;code&gt;worker.destroy()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e775a3566b8847c710d9cc718838379fe8af31e8" translate="yes" xml:space="preserve">
          <source>This method is almost identical to &lt;a href=&quot;#domain_domain_bind_callback&quot;&gt;&lt;code&gt;domain.bind(callback)&lt;/code&gt;&lt;/a&gt;. However, in addition to catching thrown errors, it will also intercept &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; objects sent as the first argument to the function.</source>
          <target state="translated">此方法几乎与&lt;a href=&quot;#domain_domain_bind_callback&quot;&gt; &lt;code&gt;domain.bind(callback)&lt;/code&gt; &lt;/a&gt;相同。但是，除了捕获引发的错误外，它还将拦截作为第一个参数发送给函数的&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="55fe8b47083e44662b3b21e0205abdb2450ff04a" translate="yes" xml:space="preserve">
          <source>This method is automatically called when an &lt;code&gt;URL&lt;/code&gt; object is serialized with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; &lt;/a&gt;序列化 &lt;code&gt;URL&lt;/code&gt; 对象时，将自动调用此方法。</target>
        </trans-unit>
        <trans-unit id="28801c3e02284a4ad1c8e05607ca10e063aca0d7" translate="yes" xml:space="preserve">
          <source>This method is called to generate error objects that will be thrown when an object can not be cloned.</source>
          <target state="translated">这个方法被调用来生成错误对象,当一个对象不能被克隆时,将被抛出。</target>
        </trans-unit>
        <trans-unit id="700f32b0f67ecb7c4ac4e3ae91ec634c886d4a35" translate="yes" xml:space="preserve">
          <source>This method is called to read some kind of host object, i.e. an object that is created by native C++ bindings. If it is not possible to deserialize the data, a suitable exception should be thrown.</source>
          <target state="translated">这个方法被调用来读取某种宿主对象,即一个由本地C++绑定创建的对象。如果无法反序列化数据,则应抛出一个适当的异常。</target>
        </trans-unit>
        <trans-unit id="b50d7fb37c7e66d40b59fce47a8cf43fd69d830e" translate="yes" xml:space="preserve">
          <source>This method is called to write some kind of host object, i.e. an object created by native C++ bindings. If it is not possible to serialize &lt;code&gt;object&lt;/code&gt;, a suitable exception should be thrown.</source>
          <target state="translated">调用此方法以编写某种宿主对象，即由本机C ++绑定创建的对象。如果无法序列​​化 &lt;code&gt;object&lt;/code&gt; ，则应引发适当的异常。</target>
        </trans-unit>
        <trans-unit id="cc90c26b3f24d636637240e71fd082c904e9c070" translate="yes" xml:space="preserve">
          <source>This method is called when the serializer is going to serialize a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object. It must return an unsigned 32-bit integer ID for the object, using the same ID if this &lt;code&gt;SharedArrayBuffer&lt;/code&gt; has already been serialized. When deserializing, this ID will be passed to &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当序列化程序要序列化 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 对象时，将调用此方法。如果此 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 已被序列化，则它必须使用相同的ID返回该对象的无符号32位整数ID 。反序列化时，此ID将传递给&lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt; &lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a90ca117688b90f4f93a88c2020c612e45a213fe" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_get_property&quot;&gt;&lt;code&gt;napi_get_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">该方法等效于调用&lt;a href=&quot;#n_api_napi_get_property&quot;&gt; &lt;code&gt;napi_get_property&lt;/code&gt; &lt;/a&gt;与 &lt;code&gt;napi_value&lt;/code&gt; 从在作为传递的字符串创建 &lt;code&gt;utf8Name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff0f235c75ab596d17873611663abac578a666d2" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_has_property&quot;&gt;&lt;code&gt;napi_has_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">该方法等效于调用&lt;a href=&quot;#n_api_napi_has_property&quot;&gt; &lt;code&gt;napi_has_property&lt;/code&gt; &lt;/a&gt;与 &lt;code&gt;napi_value&lt;/code&gt; 从在作为传递的字符串创建 &lt;code&gt;utf8Name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fffe0150f23e478ffc2985c081f396a015cdadd" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_set_property&quot;&gt;&lt;code&gt;napi_set_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">该方法等效于调用&lt;a href=&quot;#n_api_napi_set_property&quot;&gt; &lt;code&gt;napi_set_property&lt;/code&gt; &lt;/a&gt;与 &lt;code&gt;napi_value&lt;/code&gt; 从在作为传递的字符串创建 &lt;code&gt;utf8Name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19464a10e7ec85fab298874a00280da292ea3dfb" translate="yes" xml:space="preserve">
          <source>This method is guaranteed to return an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">此方法保证返回的实例&lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;类，的一个子类&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt; &lt;/a&gt;，除非用户指定的套接字比其他类型的&lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="79406247f664fad5db62dc93aae5d2cdf35f025d" translate="yes" xml:space="preserve">
          <source>This method is inherited from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt;&lt;code&gt;TypedArray#subarray()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此方法继承自&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt; &lt;code&gt;TypedArray#subarray()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b2b2abbf6b99b52821177c95dfb1032a424b6a78" translate="yes" xml:space="preserve">
          <source>This method is intentionally generic and works with the web platform &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-eventtarget&quot;&gt;EventTarget&lt;/a&gt; interface, which has no special &lt;code&gt;'error'&lt;/code&gt; event semantics and does not listen to the &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">此方法是有意通用的，并且可与Web平台&lt;a href=&quot;https://dom.spec.whatwg.org/#interface-eventtarget&quot;&gt;EventTarget&lt;/a&gt;接口配合使用，该接口没有特殊的 &lt;code&gt;'error'&lt;/code&gt; 事件语义，并且不侦听 &lt;code&gt;'error'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="3517d618f187f767a89b4300a1b63a8e5b17cacd" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows system. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="translated">此方法仅在Windows系统上有意义。在POSIX系统上，该方法不可操作，并且始终返回未经修改的 &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25056a0846e91f46d370fe64132434ed4f7def8b" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="translated">此方法仅在Windows系统上有意义。在POSIX系统上，该方法不可操作，并且始终返回未经修改的 &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c983f46e76b9dd0433799a448f5bdb19ed94b9c5" translate="yes" xml:space="preserve">
          <source>This method is not compatible with the &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;, which is a superclass of &lt;code&gt;Buffer&lt;/code&gt;. To copy the slice, use &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;.</source>
          <target state="translated">此方法与 &lt;code&gt;Buffer&lt;/code&gt; 的超类 &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt; 不兼容。要复制切片，请使用 &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b32b22b8c3858f8f2465d3884aa82bd24680b6ec" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Deserializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="translated">该方法在 &lt;code&gt;Deserializer&lt;/code&gt; 类本身上不存在，但是可以由子类提供。</target>
        </trans-unit>
        <trans-unit id="9f595b58310133998e11cc3f534439b34974ab0b" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Serializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="translated">该方法在 &lt;code&gt;Serializer&lt;/code&gt; 类本身上不存在，但是可以由子类提供。</target>
        </trans-unit>
        <trans-unit id="c26e9b3b06705355d77378147bd81e2be0268ac9" translate="yes" xml:space="preserve">
          <source>This method is only available if &lt;code&gt;http2session.type&lt;/code&gt; is equal to &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt;.</source>
          <target state="translated">仅当 &lt;code&gt;http2session.type&lt;/code&gt; 等于 &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; 时,此方法才可用。</target>
        </trans-unit>
        <trans-unit id="1cc56a973921f1c8e3418ef2a7ab83893408b1d1" translate="yes" xml:space="preserve">
          <source>This method is only valid when using &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">此方法仅在使用&lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt; &lt;code&gt;fs.lstat()&lt;/code&gt; &lt;/a&gt;时有效。</target>
        </trans-unit>
        <trans-unit id="0f78dbde2f747ddef4d4559acc66df6ead53e6a5" translate="yes" xml:space="preserve">
          <source>This method is to be used when the &lt;code&gt;asyncLocalStorage&lt;/code&gt; is not in use anymore in the current process.</source>
          <target state="translated">当当前进程中不再使用 &lt;code&gt;asyncLocalStorage&lt;/code&gt; 时，将使用此方法。</target>
        </trans-unit>
        <trans-unit id="bf2ae0bdcbd8efcf11842d83c6ae7c582606fc85" translate="yes" xml:space="preserve">
          <source>This method is used after the module is linked to set the values of exports. If it is called before the module is linked, an &lt;a href=&quot;errors#ERR_VM_MODULE_STATUS&quot;&gt;&lt;code&gt;ERR_VM_MODULE_STATUS&lt;/code&gt;&lt;/a&gt; error will be thrown.</source>
          <target state="translated">链接模块以设置导出值后使用此方法。如果在链接模块之前调用它，则将引发&lt;a href=&quot;errors#ERR_VM_MODULE_STATUS&quot;&gt; &lt;code&gt;ERR_VM_MODULE_STATUS&lt;/code&gt; &lt;/a&gt;错误。</target>
        </trans-unit>
        <trans-unit id="c79bf54fc2158426a1f13109023fc9410f485037" translate="yes" xml:space="preserve">
          <source>This method is used to instantiate a new JavaScript value using a given &lt;code&gt;napi_value&lt;/code&gt; that represents the constructor for the object. For example, consider the following snippet:</source>
          <target state="translated">此方法用于使用代表对象构造函数的给定 &lt;code&gt;napi_value&lt;/code&gt; 实例化新的JavaScript值。例如，考虑以下代码片段：</target>
        </trans-unit>
        <trans-unit id="137f79d3611d70d649552c51bbc155deba38dbc3" translate="yes" xml:space="preserve">
          <source>This method is used within a callback function to retrieve details about the call like the arguments and the &lt;code&gt;this&lt;/code&gt; pointer from a given callback info.</source>
          <target state="translated">在回调函数中使用此方法可从给定的回调信息中检索有关调用的详细信息，例如参数和 &lt;code&gt;this&lt;/code&gt; 指针。</target>
        </trans-unit>
        <trans-unit id="60fde3ca8666014eb1362597c31de1875933d209" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel keep the event loop of the parent process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</source>
          <target state="translated">如果之前已调用 &lt;code&gt;.unref()&lt;/code&gt; ,则此方法使IPC通道保持父进程的事件循环运行。</target>
        </trans-unit>
        <trans-unit id="251db73775a8b3eb3fd6d9fbf270dcd66e16a1b7" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel keep the event loop of the process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</source>
          <target state="translated">如果之前已调用 &lt;code&gt;.unref()&lt;/code&gt; ,则此方法使IPC通道保持进程的事件循环运行。</target>
        </trans-unit>
        <trans-unit id="81a4b339f84ffd2a9b0ba60d97efea903da7fe04" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel not keep the event loop of the parent process running, and lets it finish even while the channel is open.</source>
          <target state="translated">此方法使IPC通道不保持父进程的事件循环运行,即使在通道打开的情况下,也让它完成。</target>
        </trans-unit>
        <trans-unit id="df073da75d6db77d3f3df5fbdcc741763d5d7bc9" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.</source>
          <target state="translated">这种方法使IPC通道不保持进程的事件循环运行,即使在通道打开的情况下,也让它完成。</target>
        </trans-unit>
        <trans-unit id="f55f033607e44dce887582c62c0f096d380f7f0b" translate="yes" xml:space="preserve">
          <source>This method may be called at most one time on a message before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">在调用&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;之前，最多只能在一条消息上调用此方法。</target>
        </trans-unit>
        <trans-unit id="3526009bcd91f17d5aa041034e585a5c485866dd" translate="yes" xml:space="preserve">
          <source>This method must only be called once on a message and it must be called before &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">只能在消息上调用此方法一次，并且必须在调用&lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;之前调用此方法。</target>
        </trans-unit>
        <trans-unit id="dec2a56a8fed198bcdf723bd5b7ecf90cb7dc580" translate="yes" xml:space="preserve">
          <source>This method no longer supports multiple calls that don&amp;rsquo;t map to individual &lt;code&gt;console.time()&lt;/code&gt; calls; see below for details.</source>
          <target state="translated">此方法不再支持多个不映射到单个 &lt;code&gt;console.time()&lt;/code&gt; 调用的调用。有关详情，请参见下文。</target>
        </trans-unit>
        <trans-unit id="f6f47d3b4379f25f04e6a25df0b8f764ba8d8b4d" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ClientRequest&lt;/code&gt;.</source>
          <target state="translated">现在，此方法返回对 &lt;code&gt;ClientRequest&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="a29f826336bbe3debd8646a229b260cfd3ea8a80" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ServerResponse&lt;/code&gt;.</source>
          <target state="translated">现在，此方法返回对 &lt;code&gt;ServerResponse&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="2bead6ce0f903b94b3581fba9b0c460760d9b196" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;decipher&lt;/code&gt;.</source>
          <target state="translated">现在，此方法返回对 &lt;code&gt;decipher&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="326608dac58b4293b056bd095e3a8d421c4657b5" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;worker&lt;/code&gt;.</source>
          <target state="translated">现在，此方法返回对 &lt;code&gt;worker&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="eccd72d8d3bfb8524959d772fbf00e2e2ccd4284" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;writable&lt;/code&gt;.</source>
          <target state="translated">现在，此方法返回对 &lt;code&gt;writable&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="f736dde7b82e9ca5487f277a3fc447dc5f614522" translate="yes" xml:space="preserve">
          <source>This method now supports passing &lt;code&gt;options&lt;/code&gt;, specifically &lt;code&gt;options.ttl&lt;/code&gt;.</source>
          <target state="translated">此方法现在支持传递 &lt;code&gt;options&lt;/code&gt; ，特别是 &lt;code&gt;options.ttl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="edb4af30902bebe24d30824096149434c6b8e2b5" translate="yes" xml:space="preserve">
          <source>This method now throws if the GCM tag length is invalid.</source>
          <target state="translated">如果GCM标签长度无效,该方法现在会抛出。</target>
        </trans-unit>
        <trans-unit id="0970dd484b399eb1d57fb730f0ead071cb410ad4" translate="yes" xml:space="preserve">
          <source>This method relies on &lt;code&gt;Object.prototype.toString()&lt;/code&gt; behavior. It is possible to obtain an incorrect result when the &lt;code&gt;object&lt;/code&gt; argument manipulates &lt;code&gt;@@toStringTag&lt;/code&gt;.</source>
          <target state="translated">此方法依赖于 &lt;code&gt;Object.prototype.toString()&lt;/code&gt; 行为。当 &lt;code&gt;object&lt;/code&gt; 参数操纵 &lt;code&gt;@@toStringTag&lt;/code&gt; 时，可能会得到错误的结果。</target>
        </trans-unit>
        <trans-unit id="6e9bf5991fa9c748c4ddd11e088d41c09880c593" translate="yes" xml:space="preserve">
          <source>This method returns a boolean for flow control now.</source>
          <target state="translated">此方法返回一个布尔值,用于现在的流量控制。</target>
        </trans-unit>
        <trans-unit id="049623077d54205258c2f93454b1d1ee06027dbc" translate="yes" xml:space="preserve">
          <source>This method returns the current store. If this method is called outside of an asynchronous context initialized by calling &lt;code&gt;asyncLocalStorage.run&lt;/code&gt;, it will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">此方法返回当前商店。如果在通过调用 &lt;code&gt;asyncLocalStorage.run&lt;/code&gt; 初始化的异步上下文之外调用此方法，则它将返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="718308cf0c5761b550f5d72b6cf7018c6b6197ad" translate="yes" xml:space="preserve">
          <source>This method seals a given object. This prevents new properties from being added to it, as well as marking all existing properties as non-configurable. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.seal&quot;&gt;Section 19.1.2.20&lt;/a&gt; of the ECMA-262 specification.</source>
          <target state="translated">此方法密封给定的对象。这样可以防止向其添加新属性，以及将所有现有属性标记为不可配置。ECMA-262规范的&lt;a href=&quot;https://tc39.es/ecma262/#sec-object.seal&quot;&gt;19.1.2.20节对此&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="b9df835392f53f83cbf43706f5a9c14ab012c2f6" translate="yes" xml:space="preserve">
          <source>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, &lt;code&gt;response.end()&lt;/code&gt;, MUST be called on each response.</source>
          <target state="translated">此方法向服务器发出信号，指示所有响应头和主体已发送。该服务器应认为此消息已完成。必须在每个响应上调用方法 &lt;code&gt;response.end()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed78b55e754e7fa16630f5733386b1ad180489e2" translate="yes" xml:space="preserve">
          <source>This method throws &lt;a href=&quot;errors#errors_err_socket_bad_port&quot;&gt;&lt;code&gt;ERR_SOCKET_BAD_PORT&lt;/code&gt;&lt;/a&gt; if called on an unbound socket.</source>
          <target state="translated">如果在未绑定的套接字上调用，此方法将引发&lt;a href=&quot;errors#errors_err_socket_bad_port&quot;&gt; &lt;code&gt;ERR_SOCKET_BAD_PORT&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e295612b73a29336c23b8ca6f269cd989dccbf9" translate="yes" xml:space="preserve">
          <source>This method throws &lt;a href=&quot;errors#errors_err_socket_buffer_size&quot;&gt;&lt;code&gt;ERR_SOCKET_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if called on an unbound socket.</source>
          <target state="translated">如果在未绑定的套接字上调用，此方法将引发&lt;a href=&quot;errors#errors_err_socket_buffer_size&quot;&gt; &lt;code&gt;ERR_SOCKET_BUFFER_SIZE&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cfa965434bb457984be24fcb690fab82b4955073" translate="yes" xml:space="preserve">
          <source>This method throws &lt;code&gt;EBADF&lt;/code&gt; if called on an unbound socket.</source>
          <target state="translated">如果在未绑定的套接字上调用，此方法将抛出 &lt;code&gt;EBADF&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91894603a2d6878685230629c869c5cc4c825298" translate="yes" xml:space="preserve">
          <source>This method will throw an error if the target &lt;code&gt;pid&lt;/code&gt; does not exist. As a special case, a signal of &lt;code&gt;0&lt;/code&gt; can be used to test for the existence of a process. Windows platforms will throw an error if the &lt;code&gt;pid&lt;/code&gt; is used to kill a process group.</source>
          <target state="translated">如果目标 &lt;code&gt;pid&lt;/code&gt; 不存在，则此方法将引发错误。作为一种特殊情况，可以使用信号 &lt;code&gt;0&lt;/code&gt; 来测试过程的存在。如果使用 &lt;code&gt;pid&lt;/code&gt; 杀死进程组，则Windows平台将引发错误。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
