<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="ad3d4bf25a943f14d92312b632da4e7e0d35d840" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchown.2.html&quot;&gt;&lt;code&gt;fchown(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchown.2.html&quot;&gt; &lt;code&gt;fchown(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f4b4d270194625e7b141610ff1e518b1aac200ab" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt;&lt;code&gt;fdatasync(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt; &lt;code&gt;fdatasync(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc39dd69b8256834e2fb98fb94182119266e1cc6" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fstat.2.html&quot;&gt;&lt;code&gt;fstat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fstat.2.html&quot;&gt; &lt;code&gt;fstat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="44b7f718e15200946f4623cb4b4e33834eb6e7a9" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt;&lt;code&gt;fsync(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt; &lt;code&gt;fsync(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33c888ae72d3a8a0bb50ca36afa4781566c3ea80" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lchown.2.html&quot;&gt;&lt;code&gt;lchown(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lchown.2.html&quot;&gt; &lt;code&gt;lchown(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e18926f8587a2af308112d7b0c8264f16748a840" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt;&lt;code&gt;link(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt; &lt;code&gt;link(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f75f3e28a706c2c6bb9568227b94b6acf713aa2" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt;&lt;code&gt;lstat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt; &lt;code&gt;lstat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6b1b75f489a2cb3ba4ed80adbdbf5ca21bba1eb" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt;&lt;code&gt;readlink(2)&lt;/code&gt;&lt;/a&gt;. Returns the symbolic link's string value.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt; &lt;code&gt;readlink(2)&lt;/code&gt; &lt;/a&gt;。返回符号链接的字符串值。</target>
        </trans-unit>
        <trans-unit id="5ffc41f4f1ee61edfc49a65b31715d78d7ffe20f" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt;&lt;code&gt;rename(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt; &lt;code&gt;rename(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17d3d4c89e4d85e653eafb3177f41259ef26e22c" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rmdir.2.html&quot;&gt;&lt;code&gt;rmdir(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/rmdir.2.html&quot;&gt; &lt;code&gt;rmdir(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28ee7ed0e188ac9f7826666bd674ecefca61b2c1" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/stat.2.html&quot;&gt;&lt;code&gt;stat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/stat.2.html&quot;&gt; &lt;code&gt;stat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac126ea425f6a1c40039329050a0f61304da05ae" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/truncate.2.html&quot;&gt;&lt;code&gt;truncate(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;. A file descriptor can also be passed as the first argument. In this case, &lt;code&gt;fs.ftruncateSync()&lt;/code&gt; is called.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/truncate.2.html&quot;&gt; &lt;code&gt;truncate(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。文件描述符也可以作为第一个参数传递。在这种情况下，将调用 &lt;code&gt;fs.ftruncateSync()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dac8f3ceb4b160d897767d30f7f2d623ed374f45" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt;&lt;code&gt;unlink(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt; &lt;code&gt;unlink(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11fd402af8cf61e990e467e592b5310749a1fdd5" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt;&lt;code&gt;readdir(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt; &lt;code&gt;readdir(3)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2ed53469e7b073c0706036b264bf98d6a1d5c91b" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f9b10e55ac57c52c342c6cc931a99b72c4550bed" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;amp;sektion=2&quot;&gt;&lt;code&gt;lchmod(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同步&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;amp;sektion=2&quot;&gt; &lt;code&gt;lchmod(2)&lt;/code&gt; &lt;/a&gt;。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65e85fe7c1541edcf47592ce96e8d466cd76d7e6" translate="yes" xml:space="preserve">
          <source>Synchronous Process Creation</source>
          <target state="translated">同步流程创建</target>
        </trans-unit>
        <trans-unit id="cd9ec333e1e72b40b26740fa15e34a3e6d550f69" translate="yes" xml:space="preserve">
          <source>Synchronous version of &lt;a href=&quot;#crypto_crypto_randomfill_buffer_offset_size_callback&quot;&gt;&lt;code&gt;crypto.randomFill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_randomfill_buffer_offset_size_callback&quot;&gt; &lt;code&gt;crypto.randomFill()&lt;/code&gt; 的&lt;/a&gt;同步版本。</target>
        </trans-unit>
        <trans-unit id="5dff00a5c04808239d9aada5c4ca18cb5e7ce49d" translate="yes" xml:space="preserve">
          <source>Synchronous version of &lt;a href=&quot;#fs_fs_futimes_fd_atime_mtime_callback&quot;&gt;&lt;code&gt;fs.futimes()&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_futimes_fd_atime_mtime_callback&quot;&gt; &lt;code&gt;fs.futimes()&lt;/code&gt; 的&lt;/a&gt;同步版本。返回 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="001890af4b81357646bdfb6c882059353a682a82" translate="yes" xml:space="preserve">
          <source>Synchronous writes avoid problems such as output written with &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;console.error()&lt;/code&gt; being unexpectedly interleaved, or not written at all if &lt;code&gt;process.exit()&lt;/code&gt; is called before an asynchronous write completes. See &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">同步写避免了诸如用 &lt;code&gt;console.log()&lt;/code&gt; 或 &lt;code&gt;console.error()&lt;/code&gt; 编写的输出被意外交错的问题，或者如果在异步写完成之前调用了 &lt;code&gt;process.exit()&lt;/code&gt; 则根本不会写这些问题。有关更多信息，请参见&lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="706e7214b2ee4d1df2b9c103d93e993b58d94846" translate="yes" xml:space="preserve">
          <source>Synchronously append data to a file, creating the file if it does not yet exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同步将数据追加到文件，如果该文件尚不存在，则创建该文件。 &lt;code&gt;data&lt;/code&gt; 可以是字符串或&lt;a href=&quot;buffer#buffer_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="caf29ea2fd4cca23c3642744d5dcee4b64efd42f" translate="yes" xml:space="preserve">
          <source>Synchronously calls each of the listeners registered for the event named &lt;code&gt;eventName&lt;/code&gt;, in the order they were registered, passing the supplied arguments to each.</source>
          <target state="translated">同步调用每一个名为事件注册的侦听器 &lt;code&gt;eventName&lt;/code&gt; 的，他们的顺序进行了登记，通过所提供的参数，以每个。</target>
        </trans-unit>
        <trans-unit id="87ab9cfcea2b82a6a54ad0e2a1be518d6d0377f0" translate="yes" xml:space="preserve">
          <source>Synchronously changes owner and group of a file. Returns &lt;code&gt;undefined&lt;/code&gt;. This is the synchronous version of &lt;a href=&quot;#fs_fs_chown_path_uid_gid_callback&quot;&gt;&lt;code&gt;fs.chown()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同步更改文件的所有者和组。返回 &lt;code&gt;undefined&lt;/code&gt; 。这是&lt;a href=&quot;#fs_fs_chown_path_uid_gid_callback&quot;&gt; &lt;code&gt;fs.chown()&lt;/code&gt; &lt;/a&gt;的同步版本。</target>
        </trans-unit>
        <trans-unit id="d3dc8169080cad4aad57268fbcf6dd615144282b" translate="yes" xml:space="preserve">
          <source>Synchronously copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. By default, &lt;code&gt;dest&lt;/code&gt; is overwritten if it already exists. Returns &lt;code&gt;undefined&lt;/code&gt;. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</source>
          <target state="translated">同步将 &lt;code&gt;src&lt;/code&gt; 复制到 &lt;code&gt;dest&lt;/code&gt; 。默认情况下， &lt;code&gt;dest&lt;/code&gt; 如果已存在，将被覆盖。返回 &lt;code&gt;undefined&lt;/code&gt; 。Node.js不保证复制操作的原子性。如果在打开目标文件进行写入后发生错误，Node.js将尝试删除目标。</target>
        </trans-unit>
        <trans-unit id="30f949ad2b29c685875d038d9ad67d8db2d3042f" translate="yes" xml:space="preserve">
          <source>Synchronously creates a directory. Returns &lt;code&gt;undefined&lt;/code&gt;. This is the synchronous version of &lt;a href=&quot;#fs_fs_mkdir_path_options_callback&quot;&gt;&lt;code&gt;fs.mkdir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同步创建目录。返回 &lt;code&gt;undefined&lt;/code&gt; 。这是&lt;a href=&quot;#fs_fs_mkdir_path_options_callback&quot;&gt; &lt;code&gt;fs.mkdir()&lt;/code&gt; &lt;/a&gt;的同步版本。</target>
        </trans-unit>
        <trans-unit id="f76562e0906091f860d2cdc0acfa15b0fc73ae1a" translate="yes" xml:space="preserve">
          <source>Synchronously tests a user's permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).</source>
          <target state="translated">同步测试用户对 &lt;code&gt;path&lt;/code&gt; 指定的文件或目录的权限。所述 &lt;code&gt;mode&lt;/code&gt; 参数是可选的整数，它指定要执行的辅助功能的检查。检查&amp;ldquo; &lt;a href=&quot;#fs_file_access_constants&quot;&gt;文件访问常量&amp;rdquo;&lt;/a&gt;以获取可能的 &lt;code&gt;mode&lt;/code&gt; 值。可以创建由两个或多个值的按位或组成的掩码（例如 &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="614fbaf6f3d8aa1997a48d7bc9f7c4c3b4540998" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGABRT&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SIGABRT&lt;/code&gt; 的同义词</target>
        </trans-unit>
        <trans-unit id="0d05d361c5d3f5f2c9904e5d32dcd2d56476fed0" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGIO&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SIGIO&lt;/code&gt; 的同义词</target>
        </trans-unit>
        <trans-unit id="4f380113053857d9adf18e38f7f28450d82bfa95" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGPWR&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SIGPWR&lt;/code&gt; 的同义词</target>
        </trans-unit>
        <trans-unit id="60d41a9e703a8da02013c9f0bc6fb1550a2b1d32" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGSYS&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SIGSYS&lt;/code&gt; 的同义词</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="1c1e69b645db3a0139b0bc89f68507bb8ecc8a8c" translate="yes" xml:space="preserve">
          <source>Syntax check the script without executing.</source>
          <target state="translated">语法 检查脚本而不执行。</target>
        </trans-unit>
        <trans-unit id="de4af2ff6c0bd31526ce7f5f8ca08783d0cc5ed7" translate="yes" xml:space="preserve">
          <source>SyntaxError</source>
          <target state="translated">SyntaxError</target>
        </trans-unit>
        <trans-unit id="79c1d6466cbd55165c23ed590e3c50259baeceb4" translate="yes" xml:space="preserve">
          <source>System errors triggered by underlying operating system constraints such as attempting to open a file that does not exist or attempting to send data over a closed socket.</source>
          <target state="translated">由底层操作系统约束引发的系统错误,如试图打开一个不存在的文件或试图通过一个封闭的套接字发送数据。</target>
        </trans-unit>
        <trans-unit id="47e68638ef3b94e3c34563e1179f97e827fb9bec" translate="yes" xml:space="preserve">
          <source>SystemError</source>
          <target state="translated">SystemError</target>
        </trans-unit>
        <trans-unit id="7ed3ab6b248830bb34b14b34d5f1d70744e12132" translate="yes" xml:space="preserve">
          <source>TCP sockets</source>
          <target state="translated">TCP套接字</target>
        </trans-unit>
        <trans-unit id="d3aadd31313f9a9074b62457e4b8d729d92dc3de" translate="yes" xml:space="preserve">
          <source>TLS (SSL)</source>
          <target state="translated">TLS (SSL)</target>
        </trans-unit>
        <trans-unit id="e2c513359710071e9f304f670426d7854aaf2267" translate="yes" xml:space="preserve">
          <source>TLS/SSL</source>
          <target state="translated">TLS/SSL</target>
        </trans-unit>
        <trans-unit id="fe30f2453beadbea9e17d4259abd3bb4c69ba8e0" translate="yes" xml:space="preserve">
          <source>TLS/SSL Concepts</source>
          <target state="translated">TLS/SSL概念</target>
        </trans-unit>
        <trans-unit id="ad92e12207ad9494936c8629c6bf39a6c5c799e5" translate="yes" xml:space="preserve">
          <source>TLSv1.3 does not support renegotiation.</source>
          <target state="translated">TLSv1.3不支持重新协商。</target>
        </trans-unit>
        <trans-unit id="e6b1c6a14b3bdb56139962cae23fd38d0a437fb1" translate="yes" xml:space="preserve">
          <source>TLSv1.3 support added.</source>
          <target state="translated">增加了 TLSv1.3 支持。</target>
        </trans-unit>
        <trans-unit id="8318d6da10486926e0a8f69e39f6a29153e435fc" translate="yes" xml:space="preserve">
          <source>TTY</source>
          <target state="translated">TTY</target>
        </trans-unit>
        <trans-unit id="a14aa46e32a3b69ad4422aaabfff5efd16d76e92" translate="yes" xml:space="preserve">
          <source>TTYs (Terminals): &lt;em&gt;asynchronous&lt;/em&gt; on Windows, &lt;em&gt;synchronous&lt;/em&gt; on POSIX</source>
          <target state="translated">TTY（终端）：在Windows 上&lt;em&gt;异步&lt;/em&gt;，在POSIX 上&lt;em&gt;同步&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10cc80972b3b7b3bc0d6f88a871f489f6df934e7" translate="yes" xml:space="preserve">
          <source>Take caution when setting the &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; because the change affects &lt;em&gt;all&lt;/em&gt;&lt;code&gt;EventEmitter&lt;/code&gt; instances, including those created before the change is made. However, calling &lt;a href=&quot;#events_emitter_setmaxlisteners_n&quot;&gt;&lt;code&gt;emitter.setMaxListeners(n)&lt;/code&gt;&lt;/a&gt; still has precedence over &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt;.</source>
          <target state="translated">设置 &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; 时请小心，因为更改会影响&lt;em&gt;所有&lt;/em&gt; &lt;code&gt;EventEmitter&lt;/code&gt; 实例，包括在更改之前创建的实例。但是，调用&lt;a href=&quot;#events_emitter_setmaxlisteners_n&quot;&gt; &lt;code&gt;emitter.setMaxListeners(n)&lt;/code&gt; &lt;/a&gt;仍然优先于 &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5cf9760f1796a44472ed2a2b443da483fbd7afbc" translate="yes" xml:space="preserve">
          <source>Takes a function following the common error-first callback style, i.e. taking an &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; callback as the last argument, and returns a version that returns promises.</source>
          <target state="translated">采用遵循常见错误优先回调样式的函数，即，将 &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; 回调作为最后一个参数，并返回一个返回promise的版本。</target>
        </trans-unit>
        <trans-unit id="32db24d9bf8ce36a03b9817eec0f05540b3a0a17" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;async&lt;/code&gt; function (or a function that returns a &lt;code&gt;Promise&lt;/code&gt;) and returns a function following the error-first callback style, i.e. taking an &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; callback as the last argument. In the callback, the first argument will be the rejection reason (or &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;Promise&lt;/code&gt; resolved), and the second argument will be the resolved value.</source>
          <target state="translated">采用 &lt;code&gt;async&lt;/code&gt; 函数（或返回 &lt;code&gt;Promise&lt;/code&gt; 的函数）并按照错误优先的回调样式返回函数，即以 &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; 回调作为最后一个参数。在回调中，第一个参数是拒绝原因（如果 &lt;code&gt;Promise&lt;/code&gt; 被解析，则为 &lt;code&gt;null&lt;/code&gt; ），第二个参数是解析的值。</target>
        </trans-unit>
        <trans-unit id="7d54b5d8e8aa77fc6ce6677ac24c516b5da46028" translate="yes" xml:space="preserve">
          <source>Taking the earlier example, adding calls to &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt;&lt;code&gt;napi_open_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt;&lt;code&gt;napi_close_handle_scope&lt;/code&gt;&lt;/a&gt; would ensure that at most a single handle is valid throughout the execution of the loop:</source>
          <target state="translated">以前面的示例为例，将调用添加到&lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt; &lt;code&gt;napi_open_handle_scope&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt; &lt;code&gt;napi_close_handle_scope&lt;/code&gt; &lt;/a&gt;将确保在整个循环执行过程中，最多只有一个句柄有效：</target>
        </trans-unit>
        <trans-unit id="dd51a810606018ddf94cd16af005343caaa48e2c" translate="yes" xml:space="preserve">
          <source>Tells the kernel to join a multicast group at the given &lt;code&gt;multicastAddress&lt;/code&gt; and &lt;code&gt;multicastInterface&lt;/code&gt; using the &lt;code&gt;IP_ADD_MEMBERSHIP&lt;/code&gt; socket option. If the &lt;code&gt;multicastInterface&lt;/code&gt; argument is not specified, the operating system will choose one interface and will add membership to it. To add membership to every available interface, call &lt;code&gt;addMembership&lt;/code&gt; multiple times, once per interface.</source>
          <target state="translated">告诉内核使用 &lt;code&gt;IP_ADD_MEMBERSHIP&lt;/code&gt; 套接字选项在给定的 &lt;code&gt;multicastAddress&lt;/code&gt; 和 &lt;code&gt;multicastInterface&lt;/code&gt; 处加入多播组。如果未指定 &lt;code&gt;multicastInterface&lt;/code&gt; 参数，则操作系统将选择一个接口并向其添加成员资格。要将成员资格添加到每个可用接口，请多次调用 &lt;code&gt;addMembership&lt;/code&gt; ，每个接口一次。</target>
        </trans-unit>
        <trans-unit id="68526cb3fb1e6211c4ac6b9eaf5494ac56cc4442" translate="yes" xml:space="preserve">
          <source>Template string specifying the filepath for the trace event data, it supports &lt;code&gt;${rotation}&lt;/code&gt; and &lt;code&gt;${pid}&lt;/code&gt;.</source>
          <target state="translated">指定跟踪事件数据的文件路径的模板字符串，它支持 &lt;code&gt;${rotation}&lt;/code&gt; 和 &lt;code&gt;${pid}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="a2aec777fa0c378671997b287a782c6e4b1c8a21" translate="yes" xml:space="preserve">
          <source>Test in JavaScript by running:</source>
          <target state="translated">在JavaScript中运行测试。</target>
        </trans-unit>
        <trans-unit id="0aca118537d18c7e7d8980c89a0c419fa4ceca6a" translate="yes" xml:space="preserve">
          <source>Test it with:</source>
          <target state="translated">测试它与。</target>
        </trans-unit>
        <trans-unit id="57ab06e2fee2425b84ed4812cf6062520ce6f01a" translate="yes" xml:space="preserve">
          <source>Test this by using &lt;code&gt;telnet&lt;/code&gt;:</source>
          <target state="translated">使用 &lt;code&gt;telnet&lt;/code&gt; 对此进行测试：</target>
        </trans-unit>
        <trans-unit id="cf3a0b9ac49cdb286e37c2aa858d35d24b131508" translate="yes" xml:space="preserve">
          <source>Test whether or not the given path exists by checking with the file system. Then call the &lt;code&gt;callback&lt;/code&gt; argument with either true or false:</source>
          <target state="translated">通过检查文件系统来测试给定路径是否存在。然后使用true或false 调用 &lt;code&gt;callback&lt;/code&gt; 参数：</target>
        </trans-unit>
        <trans-unit id="373f76c3b48e3efa4da67e53a0ad70970dd592e8" translate="yes" xml:space="preserve">
          <source>Tests a user's permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).</source>
          <target state="translated">测试用户对 &lt;code&gt;path&lt;/code&gt; 指定的文件或目录的权限。所述 &lt;code&gt;mode&lt;/code&gt; 参数是可选的整数，它指定要执行的辅助功能的检查。检查&amp;ldquo; &lt;a href=&quot;#fs_file_access_constants&quot;&gt;文件访问常量&amp;rdquo;&lt;/a&gt;以获取可能的 &lt;code&gt;mode&lt;/code&gt; 值。可以创建由两个或多个值的按位或组成的掩码（例如 &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="30c798d1cba4352fa5aa1995447937b01d2c89d8" translate="yes" xml:space="preserve">
          <source>Tests for any deep inequality. Opposite of &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">测试是否存在任何严重的不平等。与&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt;相反。</target>
        </trans-unit>
        <trans-unit id="cca6c7dab0d67fd704d887e9ca5c9c5c95a18254" translate="yes" xml:space="preserve">
          <source>Tests for deep equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters. &quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects are recursively evaluated also by the following rules.</source>
          <target state="translated">测试 &lt;code&gt;actual&lt;/code&gt; 参数和 &lt;code&gt;expected&lt;/code&gt; 参数之间的深度相等性。&amp;ldquo;深层&amp;rdquo;相等意味着子对象的可枚举&amp;ldquo;自身&amp;rdquo;属性也将通过以下规则进行递归求值。</target>
        </trans-unit>
        <trans-unit id="9dd71746b3ea99569a2d24241a5052d08ebd5d84" translate="yes" xml:space="preserve">
          <source>Tests for deep equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters. Consider using &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt; instead. &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt; can have potentially surprising results.</source>
          <target state="translated">测试 &lt;code&gt;actual&lt;/code&gt; 参数和 &lt;code&gt;expected&lt;/code&gt; 参数之间的深度相等性。考虑改用&lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepStrictEqual()&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt;可能会产生令人惊讶的结果。</target>
        </trans-unit>
        <trans-unit id="395ce90a87d755e27601a56cb1b664b84baea384" translate="yes" xml:space="preserve">
          <source>Tests for deep strict inequality. Opposite of &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">测试是否存在严格的不平等现象。与&lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepStrictEqual()&lt;/code&gt; &lt;/a&gt;相反。</target>
        </trans-unit>
        <trans-unit id="463cc035e99c394930e6645776f0a53b43c38377" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;value&lt;/code&gt; is truthy. It is equivalent to &lt;code&gt;assert.equal(!!value, true, message)&lt;/code&gt;.</source>
          <target state="translated">测试 &lt;code&gt;value&lt;/code&gt; 是否真实。它等效于 &lt;code&gt;assert.equal(!!value, true, message)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a4ea6c5211e7b80703161d41055ac764abd80da" translate="yes" xml:space="preserve">
          <source>Tests if input is an IP address. Returns &lt;code&gt;0&lt;/code&gt; for invalid strings, returns &lt;code&gt;4&lt;/code&gt; for IP version 4 addresses, and returns &lt;code&gt;6&lt;/code&gt; for IP version 6 addresses.</source>
          <target state="translated">测试输入是否为IP地址。对于无效的字符串返回 &lt;code&gt;0&lt;/code&gt; ，对于IP版本4地址返回 &lt;code&gt;4&lt;/code&gt; ，对于IP版本6地址返回 &lt;code&gt;6&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="feefa8a364493389f53430a6de0b21850fee011d" translate="yes" xml:space="preserve">
          <source>Tests shallow, coercive equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters using the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ).</source>
          <target state="translated">使用&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象相等比较&lt;/a&gt;（ &lt;code&gt;==&lt;/code&gt; ）测试 &lt;code&gt;actual&lt;/code&gt; 参数和 &lt;code&gt;expected&lt;/code&gt; 参数之间的浅强制性相等。</target>
        </trans-unit>
        <trans-unit id="44f7e9972b6e6f7c5298385f4b7873077939044b" translate="yes" xml:space="preserve">
          <source>Tests shallow, coercive inequality with the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;!=&lt;/code&gt; ).</source>
          <target state="translated">使用&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象相等比较&lt;/a&gt;（ &lt;code&gt;!=&lt;/code&gt; ）测试浅强制性不平等。</target>
        </trans-unit>
        <trans-unit id="5fa3dfda75c4503246ff098aae7b36a9a376efbc" translate="yes" xml:space="preserve">
          <source>Tests strict equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters as determined by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue Comparison&lt;/a&gt;.</source>
          <target state="translated">测试由&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue比较&lt;/a&gt;确定的 &lt;code&gt;actual&lt;/code&gt; 参数与 &lt;code&gt;expected&lt;/code&gt; 参数之间的严格相等性。</target>
        </trans-unit>
        <trans-unit id="c3ef22ea86f89b85e92603495ca3f1838f321b32" translate="yes" xml:space="preserve">
          <source>Tests strict inequality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters as determined by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue Comparison&lt;/a&gt;.</source>
          <target state="translated">测试由&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue比较&lt;/a&gt;确定的 &lt;code&gt;actual&lt;/code&gt; 参数与 &lt;code&gt;expected&lt;/code&gt; 参数之间的严格不等式。</target>
        </trans-unit>
        <trans-unit id="840c7e38544dbd613fa0b1f9a59f6f627ea3dd88" translate="yes" xml:space="preserve">
          <source>TextDecoder</source>
          <target state="translated">TextDecoder</target>
        </trans-unit>
        <trans-unit id="b1ec439dd8ac6da12ff0821c5bfa7393b4881faa" translate="yes" xml:space="preserve">
          <source>TextEncoder</source>
          <target state="translated">TextEncoder</target>
        </trans-unit>
        <trans-unit id="c42248b8074b4f949d55e28e0d79c0c0d4a648dd" translate="yes" xml:space="preserve">
          <source>That is possible via explicit binding.</source>
          <target state="translated">这可以通过显式绑定来实现。</target>
        </trans-unit>
        <trans-unit id="0b16cd002f41de26f1ea4e18f3c9e90c00d1246b" translate="yes" xml:space="preserve">
          <source>That is: 128K for &lt;code&gt;windowBits&lt;/code&gt; = 15 + 128K for &lt;code&gt;memLevel&lt;/code&gt; = 8 (default values) plus a few kilobytes for small objects.</source>
          <target state="translated">也就是说： &lt;code&gt;windowBits&lt;/code&gt; = 15K为128K + &lt;code&gt;memLevel&lt;/code&gt; = 8（默认值）为128K + 小对象为几千字节。</target>
        </trans-unit>
        <trans-unit id="a68ade3fe43251a8bf4b61f8712e096777291c78" translate="yes" xml:space="preserve">
          <source>That's usually desired (it saves a TCP round-trip), but not when the first data is not sent until possibly much later. &lt;code&gt;request.flushHeaders()&lt;/code&gt; bypasses the optimization and kickstarts the request.</source>
          <target state="translated">通常这是需要的（它节省了TCP往返），但是直到第一个数据要等到很久以后才发送时才需要。 &lt;code&gt;request.flushHeaders()&lt;/code&gt; 绕过优化并启动请求。</target>
        </trans-unit>
        <trans-unit id="2ebc326079e65f383e5f73a385a4c2437e971919" translate="yes" xml:space="preserve">
          <source>The &quot;(not locale-aware)&quot; designation denotes that the function carries out its operation just like the non-&lt;code&gt;Locale&lt;/code&gt; version of the function, if one exists. For example, under &lt;code&gt;none&lt;/code&gt; mode, &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt;'s operation is identical to that of &lt;code&gt;Date.prototype.toString()&lt;/code&gt;.</source>
          <target state="translated">&amp;ldquo;（不支持区域设置）&amp;rdquo;标记表示该功能将执行其操作，就像该功能的非 &lt;code&gt;Locale&lt;/code&gt; 版本一样（如果存在）。例如，在 &lt;code&gt;none&lt;/code&gt; 模式， &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt; 的操作是相同的的 &lt;code&gt;Date.prototype.toString()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac095a03ae1997aefcc713236808ca5097ddd1d7" translate="yes" xml:space="preserve">
          <source>The &quot;not recommended&quot; examples above check for accessibility and then use the file; the &quot;recommended&quot; examples are better because they use the file directly and handle the error, if any.</source>
          <target state="translated">上面 &quot;不推荐 &quot;的例子是检查可访问性,然后使用文件;&quot;推荐 &quot;的例子更好,因为它们直接使用文件并处理错误(如果有)。</target>
        </trans-unit>
        <trans-unit id="6e811cd4964e5f70132f577a1acb4f7a72db2bab" translate="yes" xml:space="preserve">
          <source>The &quot;not recommended&quot; examples above check for existence and then use the file; the &quot;recommended&quot; examples are better because they use the file directly and handle the error, if any.</source>
          <target state="translated">上面 &quot;不推荐 &quot;的例子是检查是否存在,然后使用文件;&quot;推荐 &quot;的例子更好,因为它们直接使用文件,如果有错误,也会处理。</target>
        </trans-unit>
        <trans-unit id="94c8ce5178b6bb7d28badf9f2a4281414fb8f41e" translate="yes" xml:space="preserve">
          <source>The &quot;two modes&quot; of operation for a &lt;code&gt;Readable&lt;/code&gt; stream are a simplified abstraction for the more complicated internal state management that is happening within the &lt;code&gt;Readable&lt;/code&gt; stream implementation.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; 流的&amp;ldquo;两种模式&amp;rdquo;操作是 &lt;code&gt;Readable&lt;/code&gt; 流实现中发生的更为复杂的内部状态管理的简化抽象。</target>
        </trans-unit>
        <trans-unit id="56aa934142cd588e17bf9c1e16e0d637af9ba820" translate="yes" xml:space="preserve">
          <source>The 3-digit HTTP response status code. E.G. &lt;code&gt;404&lt;/code&gt;.</source>
          <target state="translated">3位数字的HTTP响应状态代码。EG &lt;code&gt;404&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48e656032fb575261b8d316d8062bd83e8216921" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object may emit an &lt;a href=&quot;#child_process_event_error&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event if the signal cannot be delivered. Sending a signal to a child process that has already exited is not an error but may have unforeseen consequences. Specifically, if the process identifier (PID) has been reassigned to another process, the signal will be delivered to that process instead which can have unexpected results.</source>
          <target state="translated">的&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;对象可以发出一个&lt;a href=&quot;#child_process_event_error&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt;事件，如果信号无法传递。向已经退出的子进程发送信号不是错误，但可能会导致无法预料的后果。具体来说，如果已将进程标识符（PID）重新分配给另一个进程，则信号将传递给该进程，而这可能会产生意外结果。</target>
        </trans-unit>
        <trans-unit id="40e3287737f4479f804d16c44337bd5db18657bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; methods additionally allow for an optional &lt;code&gt;callback&lt;/code&gt; function to be specified that is invoked when the child process terminates.</source>
          <target state="translated">所述&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;方法另外允许的可选 &lt;code&gt;callback&lt;/code&gt; 时调用子进程终止时要被指定的功能。</target>
        </trans-unit>
        <trans-unit id="657b6c299886316eee3bc58094bef1e2370f9d36" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; method spawns the child process asynchronously, without blocking the Node.js event loop. The &lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt; function provides equivalent functionality in a synchronous manner that blocks the event loop until the spawned process either exits or is terminated.</source>
          <target state="translated">所述&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;方法产卵子进程异步，而不阻塞Node.js的事件循环。所述&lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt; &lt;code&gt;child_process.spawnSync()&lt;/code&gt; &lt;/a&gt;函数以同步的方式提供等效的功能，块中的事件循环，直到生成的进程要么退出或终止。</target>
        </trans-unit>
        <trans-unit id="1688011690fb4378a7719266ac1063b2799fdb70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; methods all follow the idiomatic asynchronous programming pattern typical of other Node.js APIs.</source>
          <target state="translated">该&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;，和&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;方法都遵循惯用的异步编程模式等典型Node.js的API集。</target>
        </trans-unit>
        <trans-unit id="182b836ee1769bfedc16b78015980cd0b36abc0a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_execsync_command_options&quot;&gt;&lt;code&gt;child_process.execSync()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_child_process_execfilesync_file_args_options&quot;&gt;&lt;code&gt;child_process.execFileSync()&lt;/code&gt;&lt;/a&gt; methods are synchronous and will block the Node.js event loop, pausing execution of any additional code until the spawned process exits.</source>
          <target state="translated">所述&lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt; &lt;code&gt;child_process.spawnSync()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#child_process_child_process_execsync_command_options&quot;&gt; &lt;code&gt;child_process.execSync()&lt;/code&gt; &lt;/a&gt;，和&lt;a href=&quot;#child_process_child_process_execfilesync_file_args_options&quot;&gt; &lt;code&gt;child_process.execFileSync()&lt;/code&gt; &lt;/a&gt;方法是同步的并且将阻止Node.js的事件循环，暂停的任何额外的代码执行，直到生成的进程退出。</target>
        </trans-unit>
        <trans-unit id="b3a665070f0e5b8d887ba5e44bc0316e93d97deb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createcipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createCipher()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createCipheriv()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;Cipher&lt;/code&gt; instances. &lt;code&gt;Cipher&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">所述&lt;a href=&quot;#crypto_crypto_createcipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createCipher()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createCipheriv()&lt;/code&gt; &lt;/a&gt;方法被用来创建 &lt;code&gt;Cipher&lt;/code&gt; 实例。 &lt;code&gt;Cipher&lt;/code&gt; 对象不能使用 &lt;code&gt;new&lt;/code&gt; 关键字直接创建。</target>
        </trans-unit>
        <trans-unit id="1d8f2ca3fcde3d31aafb5b8d15b5bf8726d59896" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createDecipher()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createDecipheriv()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;Decipher&lt;/code&gt; instances. &lt;code&gt;Decipher&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">所述&lt;a href=&quot;#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createDecipher()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createDecipheriv()&lt;/code&gt; &lt;/a&gt;方法被用来创建 &lt;code&gt;Decipher&lt;/code&gt; 实例。 &lt;code&gt;Decipher&lt;/code&gt; 对象不能使用 &lt;code&gt;new&lt;/code&gt; 关键字直接创建。</target>
        </trans-unit>
        <trans-unit id="60a0dc8a28700375d6bd094fcb58b82f89d22e4d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createhash_algorithm_options&quot;&gt;&lt;code&gt;crypto.createHash()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Hash&lt;/code&gt; instances. &lt;code&gt;Hash&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">所述&lt;a href=&quot;#crypto_crypto_createhash_algorithm_options&quot;&gt; &lt;code&gt;crypto.createHash()&lt;/code&gt; &lt;/a&gt;方法被用来创建 &lt;code&gt;Hash&lt;/code&gt; 实例。不要使用 &lt;code&gt;new&lt;/code&gt; 关键字直接创建 &lt;code&gt;Hash&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="272aeced5bc0e4813efac50b5c1bc84cdc6fe849" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createhmac_algorithm_key_options&quot;&gt;&lt;code&gt;crypto.createHmac()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Hmac&lt;/code&gt; instances. &lt;code&gt;Hmac&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">所述&lt;a href=&quot;#crypto_crypto_createhmac_algorithm_key_options&quot;&gt; &lt;code&gt;crypto.createHmac()&lt;/code&gt; &lt;/a&gt;方法被用来创建 &lt;code&gt;Hmac&lt;/code&gt; 实例。不能使用 &lt;code&gt;new&lt;/code&gt; 关键字直接创建 &lt;code&gt;Hmac&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="d72bf2ca2aeb5175891eb19c6679170377973cd3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createsign_algorithm_options&quot;&gt;&lt;code&gt;crypto.createSign()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Sign&lt;/code&gt; instances. The argument is the string name of the hash function to use. &lt;code&gt;Sign&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">所述&lt;a href=&quot;#crypto_crypto_createsign_algorithm_options&quot;&gt; &lt;code&gt;crypto.createSign()&lt;/code&gt; &lt;/a&gt;方法被用来创建 &lt;code&gt;Sign&lt;/code&gt; 的实例。参数是要使用的哈希函数的字符串名称。不能使用 &lt;code&gt;new&lt;/code&gt; 关键字直接创建 &lt;code&gt;Sign&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="2f487e5e25b84ed0186cf99140719bc8c0beea5d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createverify_algorithm_options&quot;&gt;&lt;code&gt;crypto.createVerify()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Verify&lt;/code&gt; instances. &lt;code&gt;Verify&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">所述&lt;a href=&quot;#crypto_crypto_createverify_algorithm_options&quot;&gt; &lt;code&gt;crypto.createVerify()&lt;/code&gt; &lt;/a&gt;方法被用来创建 &lt;code&gt;Verify&lt;/code&gt; 实例。 &lt;code&gt;Verify&lt;/code&gt; 不要使用 &lt;code&gt;new&lt;/code&gt; 关键字直接创建对象。</target>
        </trans-unit>
        <trans-unit id="b1a7a1032abf97db10645fe578c6a3a0c928005f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; method is now deprecated as its inclusion in the API is not useful. Either a previously stored private key should be set, which automatically generates the associated public key, or &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt;&lt;code&gt;ecdh.generateKeys()&lt;/code&gt;&lt;/a&gt; should be called. The main drawback of using &lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; is that it can be used to put the ECDH key pair into an inconsistent state.</source>
          <target state="translated">所述&lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt;方法现在已经过时作为其列入在API中是没有用的。应该设置先前存储的私钥，该私钥会自动生成关联的公钥，或者应调用&lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt; &lt;code&gt;ecdh.generateKeys()&lt;/code&gt; &lt;/a&gt;。使用&lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt;的主要缺点是可以用来将ECDH密钥对置于不一致状态。</target>
        </trans-unit>
        <trans-unit id="af1ea3bd65833e08bbbbcc0fac2f7e6540b19747" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#dns_dns_setservers_servers&quot;&gt;&lt;code&gt;dns.setServers()&lt;/code&gt;&lt;/a&gt; method affects only &lt;a href=&quot;#dns_dns_resolve_hostname_rrtype_callback&quot;&gt;&lt;code&gt;dns.resolve()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;dns.resolve*()&lt;/code&gt; and &lt;a href=&quot;#dns_dns_reverse_ip_callback&quot;&gt;&lt;code&gt;dns.reverse()&lt;/code&gt;&lt;/a&gt; (and specifically &lt;em&gt;not&lt;/em&gt;&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">在&lt;a href=&quot;#dns_dns_setservers_servers&quot;&gt; &lt;code&gt;dns.setServers()&lt;/code&gt; &lt;/a&gt;方法仅影响&lt;a href=&quot;#dns_dns_resolve_hostname_rrtype_callback&quot;&gt; &lt;code&gt;dns.resolve()&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;dns.resolve*()&lt;/code&gt; 和&lt;a href=&quot;#dns_dns_reverse_ip_callback&quot;&gt; &lt;code&gt;dns.reverse()&lt;/code&gt; &lt;/a&gt;（并且具体地&lt;em&gt;不&lt;/em&gt;&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a5eaca6b7dcaf2d83d377c33b354cdfe71f471cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; object backing the request.</source>
          <target state="translated">支持该请求的&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="8ad81abf7e88f6be9cbd14b6e2a603f4c0d4dea9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; object backing the response.</source>
          <target state="translated">支持响应的&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="a55f9b45e6e60de3065281239cb831e2bfae2a74" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#n_api_napi_define_class&quot;&gt;&lt;code&gt;napi_define_class&lt;/code&gt;&lt;/a&gt; API defines a JavaScript class with constructor, static properties and methods, and instance properties and methods that correspond to the C++ class.</source>
          <target state="translated">所述&lt;a href=&quot;#n_api_napi_define_class&quot;&gt; &lt;code&gt;napi_define_class&lt;/code&gt; &lt;/a&gt; API定义与构造，静态属性和方法，和实例属性和方法对应于C ++类JavaScript类。</target>
        </trans-unit>
        <trans-unit id="23794a3cdf8807a3dc8d04944e8b307aeb2170fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#net_net_connect&quot;&gt;&lt;code&gt;net.connect()&lt;/code&gt;&lt;/a&gt; function is an alias to this function.</source>
          <target state="translated">所述&lt;a href=&quot;#net_net_connect&quot;&gt; &lt;code&gt;net.connect()&lt;/code&gt; &lt;/a&gt;函数是一个别名给此函数。</target>
        </trans-unit>
        <trans-unit id="81b4b6a978521cef7f07c53b8c5d3a6500dabb8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; events are from the &lt;code&gt;stream.Writable&lt;/code&gt; and &lt;code&gt;stream.Readable&lt;/code&gt; classes, respectively. The &lt;code&gt;'finish'&lt;/code&gt; event is emitted after &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; is called and all chunks have been processed by &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream._transform()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;'end'&lt;/code&gt; event is emitted after all data has been output, which occurs after the callback in &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt;&lt;code&gt;transform._flush()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">的&lt;a href=&quot;#stream_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;事件是从 &lt;code&gt;stream.Writable&lt;/code&gt; 和 &lt;code&gt;stream.Readable&lt;/code&gt; 分别类。所述 &lt;code&gt;'finish'&lt;/code&gt; 事件后射出&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;被调用，所有组块已被处理&lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream._transform()&lt;/code&gt; &lt;/a&gt;。该 &lt;code&gt;'end'&lt;/code&gt; 事件被发射之后的所有数据被输出，在回调之后所出现&lt;a href=&quot;#stream_transform_flush_callback&quot;&gt; &lt;code&gt;transform._flush()&lt;/code&gt; &lt;/a&gt;被调用。</target>
        </trans-unit>
        <trans-unit id="a91b62e06ce5ed810007ac4394a54ee2b2a2526f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; method was advisory, rather than guaranteed. This meant that it was still necessary to be prepared to receive &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events &lt;em&gt;even when the stream was in a paused state&lt;/em&gt;.</source>
          <target state="translated">所述&lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; &lt;/a&gt;方法是咨询，而不是保证。这意味着&lt;em&gt;即使流处于暂停状态&lt;/em&gt;，仍然有必要准备接收&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;事件。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="00ef3a2a185dea6ac7cc3de21b4d4ec335893dc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method is never called.</source>
          <target state="translated">该&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt;方法不会被调用。</target>
        </trans-unit>
        <trans-unit id="ea078fae0cc509318f581c1ffd530ada67fd8ed7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_event_close&quot;&gt;&lt;code&gt;'close'&lt;/code&gt; event&lt;/a&gt; will be emitted on both &lt;code&gt;MessagePort&lt;/code&gt; instances that are part of the channel.</source>
          <target state="translated">在&lt;a href=&quot;#worker_threads_event_close&quot;&gt; &lt;code&gt;'close'&lt;/code&gt; 的事件&lt;/a&gt;将在两个被发射 &lt;code&gt;MessagePort&lt;/code&gt; 实例是通道的一部分。</target>
        </trans-unit>
        <trans-unit id="2a562b02e59b86e28885161e100a090fa5e871e5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_worker_ismainthread&quot;&gt;&lt;code&gt;require('worker_threads').isMainThread&lt;/code&gt;&lt;/a&gt; property is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">该&lt;a href=&quot;#worker_threads_worker_ismainthread&quot;&gt; &lt;code&gt;require('worker_threads').isMainThread&lt;/code&gt; &lt;/a&gt;属性设置为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b47ce78c8cdb1996966bbb7ad92caede8246ea0b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_worker_parentport&quot;&gt;&lt;code&gt;require('worker_threads').parentPort&lt;/code&gt;&lt;/a&gt; message port is available.</source>
          <target state="translated">的&lt;a href=&quot;#worker_threads_worker_parentport&quot;&gt; &lt;code&gt;require('worker_threads').parentPort&lt;/code&gt; &lt;/a&gt;消息端口可用。</target>
        </trans-unit>
        <trans-unit id="a0788405a7f0d1d62586e574567272093df3cb23" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt;&lt;code&gt;SlowBuffer&lt;/code&gt;&lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;buffer#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">该&lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt; &lt;code&gt;SlowBuffer&lt;/code&gt; &lt;/a&gt;类已被弃用。请改用&lt;a href=&quot;buffer#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4a2d10b9b1ed99815980887ff9b6b63ad7fa368a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_force_fips&quot;&gt;&lt;code&gt;--force-fips&lt;/code&gt;&lt;/a&gt; command-line argument was used but there was an attempt to enable or disable FIPS mode in the &lt;code&gt;crypto&lt;/code&gt; module.</source>
          <target state="translated">使用了&lt;a href=&quot;cli#cli_force_fips&quot;&gt; &lt;code&gt;--force-fips&lt;/code&gt; &lt;/a&gt;命令行参数，但是尝试在 &lt;code&gt;crypto&lt;/code&gt; 模块中启用或禁用FIPS模式。</target>
        </trans-unit>
        <trans-unit id="e983a50c7e4bc0702b1c113981673fe3ac4bc071" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_icu_data_dir_file&quot;&gt;&lt;code&gt;--icu-data-dir&lt;/code&gt;&lt;/a&gt; CLI parameter:</source>
          <target state="translated">该&lt;a href=&quot;cli#cli_icu_data_dir_file&quot;&gt; &lt;code&gt;--icu-data-dir&lt;/code&gt; 来&lt;/a&gt; CLI参数：</target>
        </trans-unit>
        <trans-unit id="3269de477ec16db6d3e4e2e4ec9e89547e253b9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_node_icu_data_file&quot;&gt;&lt;code&gt;NODE_ICU_DATA&lt;/code&gt;&lt;/a&gt; environment variable:</source>
          <target state="translated">该&lt;a href=&quot;cli#cli_node_icu_data_file&quot;&gt; &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; &lt;/a&gt;环境变量：</target>
        </trans-unit>
        <trans-unit id="55cdbfc05e62c6d410e5122eb1c4b31915a547ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_trace_warnings&quot;&gt;&lt;code&gt;--trace-warnings&lt;/code&gt;&lt;/a&gt; command line flag can be used to display the stack trace for such warnings.</source>
          <target state="translated">所述&lt;a href=&quot;cli#cli_trace_warnings&quot;&gt; &lt;code&gt;--trace-warnings&lt;/code&gt; &lt;/a&gt;命令行标志可用于显示这样的警告堆栈跟踪。</target>
        </trans-unit>
        <trans-unit id="bf5cc0b37d8fefcbb53b715018d9c8c57743b787" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_crypto_default_encoding&quot;&gt;&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt;&lt;/a&gt; property is deprecated.</source>
          <target state="translated">该&lt;a href=&quot;crypto#crypto_crypto_default_encoding&quot;&gt; &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; &lt;/a&gt;属性已被弃用。</target>
        </trans-unit>
        <trans-unit id="62412f82af2fabb1917c397d074f13965837ec0c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_crypto_fips&quot;&gt;&lt;code&gt;crypto.fips&lt;/code&gt;&lt;/a&gt; property is deprecated. Please use &lt;code&gt;crypto.setFips()&lt;/code&gt; and &lt;code&gt;crypto.getFips()&lt;/code&gt; instead.</source>
          <target state="translated">该&lt;a href=&quot;crypto#crypto_crypto_fips&quot;&gt; &lt;code&gt;crypto.fips&lt;/code&gt; &lt;/a&gt;属性已被弃用。请改用 &lt;code&gt;crypto.setFips()&lt;/code&gt; 和 &lt;code&gt;crypto.getFips()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4d433d17fd0d11353c66c15c886e318a5f1dbe0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; method is now deprecated as its inclusion in the API is not useful.</source>
          <target state="translated">所述&lt;a href=&quot;crypto#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt;方法现在已经过时作为其列入在API中是没有用的。</target>
        </trans-unit>
        <trans-unit id="3ddb42db48b459691d26c606a371305e9962646c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module is deprecated and should not be used.</source>
          <target state="translated">该&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;模块已被弃用，不应该使用。</target>
        </trans-unit>
        <trans-unit id="6b715676783ff70f39d153dfbf49c8d7a8d95c6c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;events#events_eventemitter_listenercount_emitter_eventname&quot;&gt;&lt;code&gt;EventEmitter.listenerCount(emitter, eventName)&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;events#events_emitter_listenercount_eventname&quot;&gt;&lt;code&gt;emitter.listenerCount(eventName)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">所述&lt;a href=&quot;events#events_eventemitter_listenercount_emitter_eventname&quot;&gt; &lt;code&gt;EventEmitter.listenerCount(emitter, eventName)&lt;/code&gt; &lt;/a&gt; API被弃用。请改用&lt;a href=&quot;events#events_emitter_listenercount_eventname&quot;&gt; &lt;code&gt;emitter.listenerCount(eventName)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4787b47a4047863e2178c993d4ef966741994d96" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_exists_path_callback&quot;&gt;&lt;code&gt;fs.exists(path, callback)&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;fs#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;fs.stat()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fs#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">不建议使用&lt;a href=&quot;fs#fs_fs_exists_path_callback&quot;&gt; &lt;code&gt;fs.exists(path, callback)&lt;/code&gt; &lt;/a&gt; API。请改用&lt;a href=&quot;fs#fs_fs_stat_path_options_callback&quot;&gt; &lt;code&gt;fs.stat()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;fs#fs_fs_access_path_mode_callback&quot;&gt; &lt;code&gt;fs.access()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5450f8e3e61962987f25b85a6df69634e3d21306" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchmod_path_mode_callback&quot;&gt;&lt;code&gt;fs.lchmod(path, mode, callback)&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">不建议使用&lt;a href=&quot;fs#fs_fs_lchmod_path_mode_callback&quot;&gt; &lt;code&gt;fs.lchmod(path, mode, callback)&lt;/code&gt; &lt;/a&gt; API。</target>
        </trans-unit>
        <trans-unit id="f4197c2b634ea325f5f0b8697daf943e117c2877" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchmodsync_path_mode&quot;&gt;&lt;code&gt;fs.lchmodSync(path, mode)&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">不建议使用&lt;a href=&quot;fs#fs_fs_lchmodsync_path_mode&quot;&gt; &lt;code&gt;fs.lchmodSync(path, mode)&lt;/code&gt; &lt;/a&gt; API。</target>
        </trans-unit>
        <trans-unit id="0ab933eb3e9ecab8394da97c6d83154c68804b34" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchown_path_uid_gid_callback&quot;&gt;&lt;code&gt;fs.lchown(path, uid, gid, callback)&lt;/code&gt;&lt;/a&gt; API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.</source>
          <target state="translated">不建议使用&lt;a href=&quot;fs#fs_fs_lchown_path_uid_gid_callback&quot;&gt; &lt;code&gt;fs.lchown(path, uid, gid, callback)&lt;/code&gt; &lt;/a&gt; API。弃用已被取消，因为在libuv中添加了必需的支持API。</target>
        </trans-unit>
        <trans-unit id="17547f204a4a8cd3dd8b5f1b43c67f63b8b73057" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchownsync_path_uid_gid&quot;&gt;&lt;code&gt;fs.lchownSync(path, uid, gid)&lt;/code&gt;&lt;/a&gt; API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.</source>
          <target state="translated">不建议使用&lt;a href=&quot;fs#fs_fs_lchownsync_path_uid_gid&quot;&gt; &lt;code&gt;fs.lchownSync(path, uid, gid)&lt;/code&gt; &lt;/a&gt; API。弃用已被取消，因为在libuv中添加了必需的支持API。</target>
        </trans-unit>
        <trans-unit id="c804325c82ccdd29bbeee83eb71644618ad1c016" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_read_fd_buffer_offset_length_position_callback&quot;&gt;&lt;code&gt;fs.read()&lt;/code&gt;&lt;/a&gt; legacy &lt;code&gt;String&lt;/code&gt; interface is deprecated. Use the &lt;code&gt;Buffer&lt;/code&gt; API as mentioned in the documentation instead.</source>
          <target state="translated">不建议使用&lt;a href=&quot;fs#fs_fs_read_fd_buffer_offset_length_position_callback&quot;&gt; &lt;code&gt;fs.read()&lt;/code&gt; &lt;/a&gt;旧式 &lt;code&gt;String&lt;/code&gt; 接口。改用文档中提到的 &lt;code&gt;Buffer&lt;/code&gt; API。</target>
        </trans-unit>
        <trans-unit id="3d0b2e1271980488fd62bebefbbcafb3a8039b6b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_readsync_fd_buffer_offset_length_position&quot;&gt;&lt;code&gt;fs.readSync()&lt;/code&gt;&lt;/a&gt; legacy &lt;code&gt;String&lt;/code&gt; interface is deprecated. Use the &lt;code&gt;Buffer&lt;/code&gt; API as mentioned in the documentation instead.</source>
          <target state="translated">不建议使用&lt;a href=&quot;fs#fs_fs_readsync_fd_buffer_offset_length_position&quot;&gt; &lt;code&gt;fs.readSync()&lt;/code&gt; &lt;/a&gt;旧式 &lt;code&gt;String&lt;/code&gt; 接口。改用文档中提到的 &lt;code&gt;Buffer&lt;/code&gt; API。</target>
        </trans-unit>
        <trans-unit id="7e0e15dd5c7ff4e12c91a264536fb48be906367c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; (or &lt;code&gt;nan&lt;/code&gt;) provide a set of tools that Addon developers are recommended to use to keep compatibility between past and future releases of V8 and Node.js. See the &lt;code&gt;nan&lt;/code&gt;&lt;a href=&quot;https://github.com/nodejs/nan/tree/master/examples/&quot;&gt;examples&lt;/a&gt; for an illustration of how it can be used.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Node.js&lt;/a&gt;（或 &lt;code&gt;nan&lt;/code&gt; ）的本机抽象提供了一组建议Addon开发人员使用的工具，以保持V8和Node.js的过去和将来版本之间的兼容性。请参阅 &lt;code&gt;nan&lt;/code&gt; &lt;a href=&quot;https://github.com/nodejs/nan/tree/master/examples/&quot;&gt;示例&lt;/a&gt;以获取有关如何使用它的说明。</target>
        </trans-unit>
        <trans-unit id="e6d4615e7da1a5be9752109051385fe95c802bdc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; considers a handful of URL protocol schemes to be &lt;em&gt;special&lt;/em&gt; in terms of how they are parsed and serialized. When a URL is parsed using one of these special protocols, the &lt;code&gt;url.protocol&lt;/code&gt; property may be changed to another special protocol but cannot be changed to a non-special protocol, and vice versa.</source>
          <target state="translated">在&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL标准&lt;/a&gt;认为URL协议方案极少数是&lt;em&gt;特殊&lt;/em&gt;的，他们是如何解析和序列化方面。使用这些特殊协议之一解析URL时， &lt;code&gt;url.protocol&lt;/code&gt; 属性可以更改为另一个特殊协议，但不能更改为非特殊协议，反之亦然。</target>
        </trans-unit>
        <trans-unit id="fd206683a8c090e699b1fa58c29c9efcca8e48d1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; uses a more selective and fine grained approach to selecting encoded characters than that used by the Legacy API.</source>
          <target state="translated">所述&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL标准&lt;/a&gt;采用了更具选择性和细粒的方法来选择比由旧版API用于编码的字符。</target>
        </trans-unit>
        <trans-unit id="c145134bbf712c2e7b8b2f2e5174f2f626bfc168" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt;&lt;code&gt;timeOrigin&lt;/code&gt;&lt;/a&gt; specifies the high resolution millisecond timestamp at which the current &lt;code&gt;node&lt;/code&gt; process began, measured in Unix time.</source>
          <target state="translated">所述&lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt; &lt;code&gt;timeOrigin&lt;/code&gt; &lt;/a&gt;指定在当前高分辨率毫秒的时间戳 &lt;code&gt;node&lt;/code&gt; 处理开始后，在Unix时间测量。</target>
        </trans-unit>
        <trans-unit id="7d2adb934d58d4e06962a615ed42864be6eca7c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/full-icu&quot;&gt;full-icu&lt;/a&gt; npm module can greatly simplify ICU data installation by detecting the ICU version of the running &lt;code&gt;node&lt;/code&gt; executable and downloading the appropriate data file. After installing the module through &lt;code&gt;npm i full-icu&lt;/code&gt;, the data file will be available at &lt;code&gt;./node_modules/full-icu&lt;/code&gt;. This path can be then passed either to &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; or &lt;code&gt;--icu-data-dir&lt;/code&gt; as shown above to enable full &lt;code&gt;Intl&lt;/code&gt; support.</source>
          <target state="translated">的&lt;a href=&quot;https://www.npmjs.com/package/full-icu&quot;&gt;全ICU&lt;/a&gt; NPM模块可以通过检测运行的ICU版本大大简化ICU数据安装 &lt;code&gt;node&lt;/code&gt; 可执行文件和下载适当的数据文件中。通过 &lt;code&gt;npm i full-icu&lt;/code&gt; 安装模块后，数据文件将位于 &lt;code&gt;./node_modules/full-icu&lt;/code&gt; 中。然后可以将此路径传递到 &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; 或 &lt;code&gt;--icu-data-dir&lt;/code&gt; ,如上所示，以启用完整的 &lt;code&gt;Intl&lt;/code&gt; 支持。</target>
        </trans-unit>
        <trans-unit id="416895945590576bea45ae4f6c939de8d5ff3cfb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules#modules_require_extensions&quot;&gt;&lt;code&gt;require.extensions&lt;/code&gt;&lt;/a&gt; property is deprecated.</source>
          <target state="translated">该&lt;a href=&quot;modules#modules_require_extensions&quot;&gt; &lt;code&gt;require.extensions&lt;/code&gt; &lt;/a&gt;属性已被弃用。</target>
        </trans-unit>
        <trans-unit id="f57857361da91519c1768f3f7d53e717a06f8e5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; object associated with the connection.</source>
          <target state="translated">与连接关联的&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="24877f198cc1c87a0e4b125d95b2a45703e83804" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_close_callback&quot;&gt;&lt;code&gt;server.close()&lt;/code&gt;&lt;/a&gt; method was called when a &lt;code&gt;net.Server&lt;/code&gt; was not running. This applies to all instances of &lt;code&gt;net.Server&lt;/code&gt;, including HTTP, HTTPS, and HTTP/2 &lt;code&gt;Server&lt;/code&gt; instances.</source>
          <target state="translated">该&lt;a href=&quot;net#net_server_close_callback&quot;&gt; &lt;code&gt;server.close()&lt;/code&gt; &lt;/a&gt;时被调用方法 &lt;code&gt;net.Server&lt;/code&gt; 未运行。这适用于 &lt;code&gt;net.Server&lt;/code&gt; 的所有实例，包括HTTP，HTTPS和HTTP / 2 &lt;code&gt;Server&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="915652e40670b66703d29e0c38256d973f8431d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_connections&quot;&gt;&lt;code&gt;Server.connections&lt;/code&gt;&lt;/a&gt; property is deprecated. Please use the &lt;a href=&quot;net#net_server_getconnections_callback&quot;&gt;&lt;code&gt;Server.getConnections()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">该&lt;a href=&quot;net#net_server_connections&quot;&gt; &lt;code&gt;Server.connections&lt;/code&gt; &lt;/a&gt;属性已被弃用。请改用&lt;a href=&quot;net#net_server_getconnections_callback&quot;&gt; &lt;code&gt;Server.getConnections()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="6f265d2883e4f676e4cd3c41d8c488642a4b375b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_listen&quot;&gt;&lt;code&gt;server.listen()&lt;/code&gt;&lt;/a&gt; method was called while a &lt;code&gt;net.Server&lt;/code&gt; was already listening. This applies to all instances of &lt;code&gt;net.Server&lt;/code&gt;, including HTTP, HTTPS, and HTTP/2 &lt;code&gt;Server&lt;/code&gt; instances.</source>
          <target state="translated">该&lt;a href=&quot;net#net_server_listen&quot;&gt; &lt;code&gt;server.listen()&lt;/code&gt; &lt;/a&gt;而方法被称为 &lt;code&gt;net.Server&lt;/code&gt; 已经听。这适用于 &lt;code&gt;net.Server&lt;/code&gt; 的所有实例，包括HTTP，HTTPS和HTTP / 2 &lt;code&gt;Server&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="253d6a8397e34f584d1c9745f688c4be697f41d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perf_hooks&quot;&gt;Performance Observer&lt;/a&gt; API can be used to collect basic performance metrics for each &lt;code&gt;Http2Session&lt;/code&gt; and &lt;code&gt;Http2Stream&lt;/code&gt; instance.</source>
          <target state="translated">在&lt;a href=&quot;perf_hooks&quot;&gt;性能观察员&lt;/a&gt; API可用于收集每个基本性能指标 &lt;code&gt;Http2Session&lt;/code&gt; 和 &lt;code&gt;Http2Stream&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="59c7a2c5551f71a682899eef7cf74848de899dae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Writable&lt;/code&gt; streams are never closed until the Node.js process exits, regardless of the specified options.</source>
          <target state="translated">该&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Writable&lt;/code&gt; 流从不关闭，直到Node.js的进程退出，不管指定的选项。</target>
        </trans-unit>
        <trans-unit id="3151c4db34282a1b8e07fe931c2f1458a047f718" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; may be redirected by the parent thread.</source>
          <target state="translated">该&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;可以通过父线程被重定向。</target>
        </trans-unit>
        <trans-unit id="a0fc212c8a2ea41febc29bc21f4ef2413d4927ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;punycode&quot;&gt;&lt;code&gt;punycode&lt;/code&gt;&lt;/a&gt; module is deprecated. Please use a userland alternative instead.</source>
          <target state="translated">该&lt;a href=&quot;punycode&quot;&gt; &lt;code&gt;punycode&lt;/code&gt; &lt;/a&gt;模块已被弃用。请改用userland。</target>
        </trans-unit>
        <trans-unit id="6431daf4d0142dfe7df617e9d6645252b47e70c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; methods each return objects that represent the scheduled timers. These can be used to cancel the timer and prevent it from triggering.</source>
          <target state="translated">该&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt;，和&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;方法表示预定的定时器每个返回的对象。这些可用于取消计时器并防止其触发。</target>
        </trans-unit>
        <trans-unit id="f0b1ce5dcc2782ce2b6b05b8c6a481feb1f34cdb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tls#tls_class_cryptostream&quot;&gt;&lt;code&gt;tls.CryptoStream&lt;/code&gt;&lt;/a&gt; class was removed. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">该&lt;a href=&quot;tls#tls_class_cryptostream&quot;&gt; &lt;code&gt;tls.CryptoStream&lt;/code&gt; &lt;/a&gt;除去类。请改用&lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="67a4449b6148b1eda8420ac93777441f9f6ce373" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tls#tls_class_securepair&quot;&gt;&lt;code&gt;tls.SecurePair&lt;/code&gt;&lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">该&lt;a href=&quot;tls#tls_class_securepair&quot;&gt; &lt;code&gt;tls.SecurePair&lt;/code&gt; &lt;/a&gt;类已被弃用。请改用&lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ca41300a47e657b9bac3334f3cc7b04056458915" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tracing&quot;&gt;&lt;code&gt;trace_events&lt;/code&gt;&lt;/a&gt; module is not supported.</source>
          <target state="translated">该&lt;a href=&quot;tracing&quot;&gt; &lt;code&gt;trace_events&lt;/code&gt; &lt;/a&gt;不支持模块。</target>
        </trans-unit>
        <trans-unit id="bfb5ba2ace2f4a0028e1da1ece0bf9daee144b06" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;url#url_legacy_url_api&quot;&gt;Legacy URL API&lt;/a&gt; is deprecated. This includes &lt;a href=&quot;url#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;url#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;url#url_url_resolve_from_to&quot;&gt;&lt;code&gt;url.resolve()&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;url#url_legacy_urlobject&quot;&gt;legacy &lt;code&gt;urlObject&lt;/code&gt;&lt;/a&gt;. Please use the &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL API&lt;/a&gt; instead.</source>
          <target state="translated">在&lt;a href=&quot;url#url_legacy_url_api&quot;&gt;传统URL API&lt;/a&gt;已被弃用。这包括&lt;a href=&quot;url#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;url#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;url#url_url_resolve_from_to&quot;&gt; &lt;code&gt;url.resolve()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;url#url_legacy_urlobject&quot;&gt;旧版 &lt;code&gt;urlObject&lt;/code&gt; &lt;/a&gt;。请改用&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d0bb3959cb2b9ede93d359620e31194deb615b69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL parser&lt;/a&gt;'s &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalized_domain_name&quot;&gt;internationalized domain names&lt;/a&gt; (IDNs) support</source>
          <target state="translated">在&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL解析器&lt;/a&gt;的&lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalized_domain_name&quot;&gt;国际化域名&lt;/a&gt;（IDN的）支持</target>
        </trans-unit>
        <trans-unit id="bad9bfd66bb55ba2235dd85e59e1613b40fb48ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_extend_target_source&quot;&gt;&lt;code&gt;util._extend()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_extend_target_source&quot;&gt; &lt;code&gt;util._extend()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="24fb8e08f0115ee31b604e3d9cb707532a7f3d68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isarray_object&quot;&gt;&lt;code&gt;util.isArray()&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;code&gt;Array.isArray()&lt;/code&gt; instead.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isarray_object&quot;&gt; &lt;code&gt;util.isArray()&lt;/code&gt; &lt;/a&gt; API被弃用。请改用 &lt;code&gt;Array.isArray()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e357fd30970802fa574d6b5b018c648beb3398d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isboolean_object&quot;&gt;&lt;code&gt;util.isBoolean()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isboolean_object&quot;&gt; &lt;code&gt;util.isBoolean()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="e6acacafcb035b94942a2a97144ad31539c3f91c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isbuffer_object&quot;&gt;&lt;code&gt;util.isBuffer()&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;buffer#buffer_class_method_buffer_isbuffer_obj&quot;&gt;&lt;code&gt;Buffer.isBuffer()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isbuffer_object&quot;&gt; &lt;code&gt;util.isBuffer()&lt;/code&gt; &lt;/a&gt; API被弃用。请改用&lt;a href=&quot;buffer#buffer_class_method_buffer_isbuffer_obj&quot;&gt; &lt;code&gt;Buffer.isBuffer()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1fadb3df5f078ded7af9eb07eb0540836ed20330" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isdate_object&quot;&gt;&lt;code&gt;util.isDate()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isdate_object&quot;&gt; &lt;code&gt;util.isDate()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="cba186e269ab30db0f4997204ac2665f30745036" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_iserror_object&quot;&gt;&lt;code&gt;util.isError()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_iserror_object&quot;&gt; &lt;code&gt;util.isError()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="3eae527fa2790271252e26061067d5b6be5eba03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isfunction_object&quot;&gt;&lt;code&gt;util.isFunction()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isfunction_object&quot;&gt; &lt;code&gt;util.isFunction()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="a70e6c3de90a6ac2102583f433feed90cb85843a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnull_object&quot;&gt;&lt;code&gt;util.isNull()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isnull_object&quot;&gt; &lt;code&gt;util.isNull()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="26b9c813be7a79f319a8271e4f548a90e22e1c86" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnullorundefined_object&quot;&gt;&lt;code&gt;util.isNullOrUndefined()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isnullorundefined_object&quot;&gt; &lt;code&gt;util.isNullOrUndefined()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="f6505ee51314d52f61c0c4e024960bccd690bc39" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnumber_object&quot;&gt;&lt;code&gt;util.isNumber()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isnumber_object&quot;&gt; &lt;code&gt;util.isNumber()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="fc675f14e28a144b49f3304e6cc66846864e1ffb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isobject_object&quot;&gt;&lt;code&gt;util.isObject()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isobject_object&quot;&gt; &lt;code&gt;util.isObject()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="1eea74d5193199e9a450d57d153735b76a2b3466" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isprimitive_object&quot;&gt;&lt;code&gt;util.isPrimitive()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isprimitive_object&quot;&gt; &lt;code&gt;util.isPrimitive()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="85fb68081b5c8745039db57d4cf2885c55d9fb26" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isregexp_object&quot;&gt;&lt;code&gt;util.isRegExp()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isregexp_object&quot;&gt; &lt;code&gt;util.isRegExp()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="3ef6a66e04fa8965d8501d2c259ea2dca7cf679c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isstring_object&quot;&gt;&lt;code&gt;util.isString()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isstring_object&quot;&gt; &lt;code&gt;util.isString()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="6ef8b7b760bc341d4a2aba646dd105a36af4be18" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_issymbol_object&quot;&gt;&lt;code&gt;util.isSymbol()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_issymbol_object&quot;&gt; &lt;code&gt;util.isSymbol()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="bda29f3bc4445a30ae931de9d8ecc252ad7751eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isundefined_object&quot;&gt;&lt;code&gt;util.isUndefined()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_isundefined_object&quot;&gt; &lt;code&gt;util.isUndefined()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="1a5825539b9e279df51e00a04c9ffe0d213f05a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_log_string&quot;&gt;&lt;code&gt;util.log()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">所述&lt;a href=&quot;util#util_util_log_string&quot;&gt; &lt;code&gt;util.log()&lt;/code&gt; &lt;/a&gt; API被弃用。</target>
        </trans-unit>
        <trans-unit id="1ae316081841cbae85e514ff3e35cb1804302a11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;main&quot;&lt;/code&gt; field can point to exactly one file, regardless of whether the package is referenced via &lt;code&gt;require&lt;/code&gt; (in a CommonJS context) or &lt;code&gt;import&lt;/code&gt; (in an ES module context). Package authors who want to publish a package to be used in both contexts can do so by setting &lt;code&gt;&quot;main&quot;&lt;/code&gt; to point to the CommonJS entry point and informing the package&amp;rsquo;s users of the path to the ES module entry point. Such a package would be accessible like &lt;code&gt;require('pkg')&lt;/code&gt; and &lt;code&gt;import 'pkg/module.mjs'&lt;/code&gt;. Alternatively the package &lt;code&gt;&quot;main&quot;&lt;/code&gt; could point to the ES module entry point and legacy users could be informed of the CommonJS entry point path, e.g. &lt;code&gt;require('pkg/commonjs')&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;&quot;main&quot;&lt;/code&gt; 字段可以指向正好一个文件，而不考虑的包是否经由引用 &lt;code&gt;require&lt;/code&gt; （在CommonJS的上下文中）或 &lt;code&gt;import&lt;/code&gt; （在ES模块上下文）。想要发布要在两种情况下使用的软件包的软件包作者可以通过将 &lt;code&gt;&quot;main&quot;&lt;/code&gt; 设置为指向CommonJS入口点，并向软件包的用户告知ES模块入口点的路径来实现。这样的软件包可以像 &lt;code&gt;require('pkg')&lt;/code&gt; 一样访问，并 &lt;code&gt;import 'pkg/module.mjs'&lt;/code&gt; 。或者，包 &lt;code&gt;&quot;main&quot;&lt;/code&gt; 可以指向ES模块的入口点，并且可以向旧用户通知CommonJS入口点路径，例如 &lt;code&gt;require('pkg/commonjs')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61c9ebe3c11e206914190083d08bd0af4fef8102" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%d&lt;/code&gt; and &lt;code&gt;%i&lt;/code&gt; specifiers now support BigInt.</source>
          <target state="translated">在 &lt;code&gt;%d&lt;/code&gt; 和 &lt;code&gt;%i&lt;/code&gt; 符现在支持BigInt有。</target>
        </trans-unit>
        <trans-unit id="7ea800961e1445a983637a3fa0d8d83a67bc4be6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%f&lt;/code&gt; and &lt;code&gt;%i&lt;/code&gt; specifiers now support Symbols properly.</source>
          <target state="translated">现在， &lt;code&gt;%d&lt;/code&gt; ， &lt;code&gt;%f&lt;/code&gt; 和 &lt;code&gt;%i&lt;/code&gt; 说明符正确支持Symbols。</target>
        </trans-unit>
        <trans-unit id="24aed4099e7c845ded6fe13351fadb51a5d791de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; and &lt;code&gt;%O&lt;/code&gt; specifiers are supported now.</source>
          <target state="translated">在 &lt;code&gt;%o&lt;/code&gt; 和 &lt;code&gt;%O&lt;/code&gt; 符现在支持。</target>
        </trans-unit>
        <trans-unit id="4e831b601d6d2d5d9f79cd2a24fcde96c59f5781" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; specifier's &lt;code&gt;depth&lt;/code&gt; has default depth of 4 again.</source>
          <target state="translated">在 &lt;code&gt;%o&lt;/code&gt; 符的 &lt;code&gt;depth&lt;/code&gt; 再次有4默认深度。</target>
        </trans-unit>
        <trans-unit id="ea86e9d20de063b4c7fd031b6c0ac213659ff329" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; specifier's &lt;code&gt;depth&lt;/code&gt; option will now fall back to the default depth.</source>
          <target state="translated">现在， &lt;code&gt;%o&lt;/code&gt; 说明符的&amp;ldquo; &lt;code&gt;depth&lt;/code&gt; 选项将恢复为默认深度。</target>
        </trans-unit>
        <trans-unit id="4d5b0636a67f459e393ebbe414afd5f20c75036c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'ERR_UNKNOWN_BUILTIN_MODULE'&lt;/code&gt; error code is used to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself.</source>
          <target state="translated">该 &lt;code&gt;'ERR_UNKNOWN_BUILTIN_MODULE'&lt;/code&gt; 错误代码是用来识别特定种类不应通常由用户代码触发内部Node.js的错误。该错误的实例指向Node.js二进制文件内部的内部错误。</target>
        </trans-unit>
        <trans-unit id="11ab7ececfa28aafc4aa19ae6385b7c2b8a0cd5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'OCSPRequest'&lt;/code&gt; event is emitted when the client sends a certificate status request. The listener callback is passed three arguments when called:</source>
          <target state="translated">该 &lt;code&gt;'OCSPRequest'&lt;/code&gt; 当客户端发送的证书状态请求被发射事件。调用时，将向侦听器回调传递三个参数：</target>
        </trans-unit>
        <trans-unit id="8bfe430c226f0a9e2efdb6fcc488124fa32e49cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'OCSPResponse'&lt;/code&gt; event is emitted if the &lt;code&gt;requestOCSP&lt;/code&gt; option was set when the &lt;code&gt;tls.TLSSocket&lt;/code&gt; was created and an OCSP response has been received. The listener callback is passed a single argument when called:</source>
          <target state="translated">该 &lt;code&gt;'OCSPResponse'&lt;/code&gt; 如果被发射事件 &lt;code&gt;requestOCSP&lt;/code&gt; 的当选项设置 &lt;code&gt;tls.TLSSocket&lt;/code&gt; 创建一个OCSP响应已被接收和。调用时，侦听器回调将传递一个参数：</target>
        </trans-unit>
        <trans-unit id="d3e25a4d64e0a457f91b49f6a798068c9d2d9beb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGCONT'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; supported on Windows.</source>
          <target state="translated">该 &lt;code&gt;'SIGCONT'&lt;/code&gt; 的事件&lt;em&gt;不&lt;/em&gt;支持Windows。</target>
        </trans-unit>
        <trans-unit id="ea03decaaaca5df5498dcceb04679c155e8445b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGCONT'&lt;/code&gt; event is emitted when a Node.js process previously moved into the background using &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; (i.e. &lt;code&gt;SIGTSTP&lt;/code&gt;) is then brought back to the foreground using &lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt;&lt;code&gt;fg(1p)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;'SIGCONT'&lt;/code&gt; 当Node.js的过程中使用预先移动到背景发射事件 &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; （即 &lt;code&gt;SIGTSTP&lt;/code&gt; ）然后被带回使用前景&lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt; &lt;code&gt;fg(1p)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="99e824d272e95adde2be812dc78ea63b0e40b3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGINT'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; input, known typically as &lt;code&gt;SIGINT&lt;/code&gt;. If there are no &lt;code&gt;'SIGINT'&lt;/code&gt; event listeners registered when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;SIGINT&lt;/code&gt;, the &lt;code&gt;'pause'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">该 &lt;code&gt;'SIGINT'&lt;/code&gt; 每当发射事件 &lt;code&gt;input&lt;/code&gt; 流接收 &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; 输入，典型地被称为 &lt;code&gt;SIGINT&lt;/code&gt; 。如果在 &lt;code&gt;input&lt;/code&gt; 流接收到 &lt;code&gt;SIGINT&lt;/code&gt; 时没有注册 &lt;code&gt;'SIGINT'&lt;/code&gt; 事件侦听器，则将发出 &lt;code&gt;'pause'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="58fa1888e379ec7a6b536027558fb242e1b348f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGTSTP'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; supported on Windows.</source>
          <target state="translated">该 &lt;code&gt;'SIGTSTP'&lt;/code&gt; 的事件&lt;em&gt;不&lt;/em&gt;支持Windows。</target>
        </trans-unit>
        <trans-unit id="a2425fdaa44366773b7902f6c2a4bc3c1298d1db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGTSTP'&lt;/code&gt; event is emitted when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; input, typically known as &lt;code&gt;SIGTSTP&lt;/code&gt;. If there are no &lt;code&gt;'SIGTSTP'&lt;/code&gt; event listeners registered when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;SIGTSTP&lt;/code&gt;, the Node.js process will be sent to the background.</source>
          <target state="translated">该 &lt;code&gt;'SIGTSTP'&lt;/code&gt; 当被发射事件 &lt;code&gt;input&lt;/code&gt; 流接收 &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; 输入，典型地被称为 &lt;code&gt;SIGTSTP&lt;/code&gt; 。如果在 &lt;code&gt;input&lt;/code&gt; 流接收到 &lt;code&gt;SIGTSTP&lt;/code&gt; 时没有注册 &lt;code&gt;'SIGTSTP'&lt;/code&gt; 事件侦听器，则Node.js进程将被发送到后台。</target>
        </trans-unit>
        <trans-unit id="c3d458cf8941bf210e3472a7ed859272579c7bd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Http2ServerRequest&lt;/code&gt; instance is abnormally aborted in mid-communication.</source>
          <target state="translated">该 &lt;code&gt;'aborted'&lt;/code&gt; 每当发射事件 &lt;code&gt;Http2ServerRequest&lt;/code&gt; 实例在通信中间异常中止。</target>
        </trans-unit>
        <trans-unit id="49e33cc3abfe5a6aff3be8850a5c7b241d82bc6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Http2Stream&lt;/code&gt; instance is abnormally aborted in mid-communication.</source>
          <target state="translated">该 &lt;code&gt;'aborted'&lt;/code&gt; 每当发射事件 &lt;code&gt;Http2Stream&lt;/code&gt; 实例在通信中间异常中止。</target>
        </trans-unit>
        <trans-unit id="329a98287275acec9b408010e3e11c457f416dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event will only be emitted if the &lt;code&gt;Http2ServerRequest&lt;/code&gt; writable side has not been ended.</source>
          <target state="translated">在 &lt;code&gt;'aborted'&lt;/code&gt; ，如果事件只发射 &lt;code&gt;Http2ServerRequest&lt;/code&gt; 写边尚未结束。</target>
        </trans-unit>
        <trans-unit id="16cba63c2e802f270ef416ef55a58c2b5601d3b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event will only be emitted if the &lt;code&gt;Http2Stream&lt;/code&gt; writable side has not been ended.</source>
          <target state="translated">在 &lt;code&gt;'aborted'&lt;/code&gt; ，如果事件只发射 &lt;code&gt;Http2Stream&lt;/code&gt; 写边尚未结束。</target>
        </trans-unit>
        <trans-unit id="5881a0fcae4dcd20ddaa53a05727df7900384be1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'altsvc'&lt;/code&gt; event is emitted whenever an &lt;code&gt;ALTSVC&lt;/code&gt; frame is received by the client. The event is emitted with the &lt;code&gt;ALTSVC&lt;/code&gt; value, origin, and stream ID. If no &lt;code&gt;origin&lt;/code&gt; is provided in the &lt;code&gt;ALTSVC&lt;/code&gt; frame, &lt;code&gt;origin&lt;/code&gt; will be an empty string.</source>
          <target state="translated">该 &lt;code&gt;'altsvc'&lt;/code&gt; 每当发射事件 &lt;code&gt;ALTSVC&lt;/code&gt; 由客户机接收到的帧。该事件与 &lt;code&gt;ALTSVC&lt;/code&gt; 值，来源和流ID 一起发出。如果 &lt;code&gt;ALTSVC&lt;/code&gt; 框架中未提供任何 &lt;code&gt;origin&lt;/code&gt; ，则 &lt;code&gt;origin&lt;/code&gt; 将为空字符串。</target>
        </trans-unit>
        <trans-unit id="431c27fffcc5c3515200d9aa796f1881ad21eaaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; emitted for conditions causing explicit termination, such as calling &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; or uncaught exceptions.</source>
          <target state="translated">该 &lt;code&gt;'beforeExit'&lt;/code&gt; 事件&lt;em&gt;不是&lt;/em&gt;发出的用于使显式的终止条件，诸如主叫&lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;或捕获的异常。</target>
        </trans-unit>
        <trans-unit id="49bb5c86196c564b79661579857a5af05a391ac9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; event is emitted when Node.js empties its event loop and has no additional work to schedule. Normally, the Node.js process will exit when there is no work scheduled, but a listener registered on the &lt;code&gt;'beforeExit'&lt;/code&gt; event can make asynchronous calls, and thereby cause the Node.js process to continue.</source>
          <target state="translated">该 &lt;code&gt;'beforeExit'&lt;/code&gt; 时的Node.js清空其事件循环，并且没有额外的工作时间表发出的事件。通常，没有安排任何工作时，Node.js进程将退出，但是在 &lt;code&gt;'beforeExit'&lt;/code&gt; 事件上注册的侦听器可以进行异步调用，从而导致Node.js进程继续进行。</target>
        </trans-unit>
        <trans-unit id="aaeeb5f96ebb59c101927056a12ccfc0f7339c45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be used as an alternative to the &lt;code&gt;'exit'&lt;/code&gt; event unless the intention is to schedule additional work.</source>
          <target state="translated">该 &lt;code&gt;'beforeExit'&lt;/code&gt; 应当&lt;em&gt;不&lt;/em&gt;被用作替代 &lt;code&gt;'exit'&lt;/code&gt; ，除非其意图是安排额外的工作的事件。</target>
        </trans-unit>
        <trans-unit id="b146ae0e412e32595d3ffe601ee1b5e9eba7dc42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted after a socket is closed with &lt;a href=&quot;#dgram_socket_close_callback&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. Once triggered, no new &lt;code&gt;'message'&lt;/code&gt; events will be emitted on this socket.</source>
          <target state="translated">在 &lt;code&gt;'close'&lt;/code&gt; 的插座与关闭之后被发射事件&lt;a href=&quot;#dgram_socket_close_callback&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;。一旦触发，此套接字将不会发出新的 &lt;code&gt;'message'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="e348d7100af21e4929d2a05d5e7b4db74635a645" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted once either side of the channel has been disconnected.</source>
          <target state="translated">在 &lt;code&gt;'close'&lt;/code&gt; 一旦信道的任一侧已经断开发射事件。</target>
        </trans-unit>
        <trans-unit id="6453811996b62b86754fbcde8172369282b1c44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted once the &lt;code&gt;Http2Session&lt;/code&gt; has been destroyed. Its listener does not expect any arguments.</source>
          <target state="translated">在 &lt;code&gt;'close'&lt;/code&gt; ，一旦被发射事件 &lt;code&gt;Http2Session&lt;/code&gt; 已被破坏。它的侦听器不期望任何参数。</target>
        </trans-unit>
        <trans-unit id="bdc3f031b1bc01954f0e23bc22110442e0956b49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when one of the following occur:</source>
          <target state="translated">在 &lt;code&gt;'close'&lt;/code&gt; 时会发生以下的一个事件发出：</target>
        </trans-unit>
        <trans-unit id="c7c841e158dd9c22dac46ce613efd65d9aa7cf19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the &lt;code&gt;Http2Stream&lt;/code&gt; is destroyed. Once this event is emitted, the &lt;code&gt;Http2Stream&lt;/code&gt; instance is no longer usable.</source>
          <target state="translated">在 &lt;code&gt;'close'&lt;/code&gt; 的时候发射事件 &lt;code&gt;Http2Stream&lt;/code&gt; 被破坏。发出此事件后， &lt;code&gt;Http2Stream&lt;/code&gt; 实例将不再可用。</target>
        </trans-unit>
        <trans-unit id="ba41a6efcf176543cb43f3bd282ed0424f69070a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the stdio streams of a child process have been closed. This is distinct from the &lt;a href=&quot;#child_process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event, since multiple processes might share the same stdio streams.</source>
          <target state="translated">在 &lt;code&gt;'close'&lt;/code&gt; 时，子进程的标准输入输出流已经关闭发射事件。这与&lt;a href=&quot;#child_process_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; &lt;/a&gt;事件不同，因为多个进程可能共享相同的stdio流。</target>
        </trans-unit>
        <trans-unit id="70155d5dbfc4d7b6f0fa0f01c52f6e2d104d629f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur.</source>
          <target state="translated">在 &lt;code&gt;'close'&lt;/code&gt; 时，流和任何其底层资源（文件描述符，例如）已关闭被发射事件。该事件表明将不再发出事件，并且不会进行进一步的计算。</target>
        </trans-unit>
        <trans-unit id="908f10fad57d5bf5706478e0ac6d3587a72a3e64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'connect'&lt;/code&gt; event is emitted after a socket is associated to a remote address as a result of a successful &lt;a href=&quot;#dgram_socket_connect_port_address_callback&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">所述 &lt;code&gt;'connect'&lt;/code&gt; 的插座关联到远程地址后作为一个成功的结果，发出事件&lt;a href=&quot;#dgram_socket_connect_port_address_callback&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt;调用。</target>
        </trans-unit>
        <trans-unit id="883d87058dd9ee15031c28136444e2fe9937f941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'connect'&lt;/code&gt; event is emitted once the &lt;code&gt;Http2Session&lt;/code&gt; has been successfully connected to the remote peer and communication may begin.</source>
          <target state="translated">所述 &lt;code&gt;'connect'&lt;/code&gt; ，一旦被发射事件 &lt;code&gt;Http2Session&lt;/code&gt; 已成功地连接到远端对等体和通信可以开始。</target>
        </trans-unit>
        <trans-unit id="89b2d33ff189c9e8a7cdd81471945bff2164caa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'data'&lt;/code&gt; event is emitted whenever the stream is relinquishing ownership of a chunk of data to a consumer. This may occur whenever the stream is switched in flowing mode by calling &lt;code&gt;readable.pipe()&lt;/code&gt;, &lt;code&gt;readable.resume()&lt;/code&gt;, or by attaching a listener callback to the &lt;code&gt;'data'&lt;/code&gt; event. The &lt;code&gt;'data'&lt;/code&gt; event will also be emitted whenever the &lt;code&gt;readable.read()&lt;/code&gt; method is called and a chunk of data is available to be returned.</source>
          <target state="translated">的 &lt;code&gt;'data'&lt;/code&gt; 每当流被放弃的数据块给消费者的所有权事件被发射。每当通过调用 &lt;code&gt;readable.pipe()&lt;/code&gt; ， &lt;code&gt;readable.resume()&lt;/code&gt; 或将侦听器回调附加到 &lt;code&gt;'data'&lt;/code&gt; 事件而将流切换为流模式时，都可能发生这种情况。的 &lt;code&gt;'data'&lt;/code&gt; 每当事件也将发射 &lt;code&gt;readable.read()&lt;/code&gt; 方法被调用和数据块是可用于被返回。</target>
        </trans-unit>
        <trans-unit id="f3585a0a88cd8b90d12afe8d08d50e684e44726e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'disconnect'&lt;/code&gt; event is emitted after calling the &lt;a href=&quot;#child_process_subprocess_disconnect&quot;&gt;&lt;code&gt;subprocess.disconnect()&lt;/code&gt;&lt;/a&gt; method in parent process or &lt;a href=&quot;process#process_process_disconnect&quot;&gt;&lt;code&gt;process.disconnect()&lt;/code&gt;&lt;/a&gt; in child process. After disconnecting it is no longer possible to send or receive messages, and the &lt;a href=&quot;#child_process_subprocess_connected&quot;&gt;&lt;code&gt;subprocess.connected&lt;/code&gt;&lt;/a&gt; property is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;'disconnect'&lt;/code&gt; 事件被调用后射出&lt;a href=&quot;#child_process_subprocess_disconnect&quot;&gt; &lt;code&gt;subprocess.disconnect()&lt;/code&gt; &lt;/a&gt;在父进程或方法&lt;a href=&quot;process#process_process_disconnect&quot;&gt; &lt;code&gt;process.disconnect()&lt;/code&gt; &lt;/a&gt;在子进程。断开连接后，将无法再发送或接收消息，并且&lt;a href=&quot;#child_process_subprocess_connected&quot;&gt; &lt;code&gt;subprocess.connected&lt;/code&gt; &lt;/a&gt;属性为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="520fdf29c3a9aae399e9ad386de9244085c3f35d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'disconnect'&lt;/code&gt; event will be emitted when there are no messages in the process of being received. This will most often be triggered immediately after calling &lt;code&gt;subprocess.disconnect()&lt;/code&gt;.</source>
          <target state="translated">如果在接收过程中没有任何消息，则将发出 &lt;code&gt;'disconnect'&lt;/code&gt; 事件。这通常会在调用 &lt;code&gt;subprocess.disconnect()&lt;/code&gt; 之后立即触发。</target>
        </trans-unit>
        <trans-unit id="6261bd58ea0cfd3a238560b3c12048c5182bb79f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'end'&lt;/code&gt; event &lt;strong&gt;will not be emitted&lt;/strong&gt; unless the data is completely consumed. This can be accomplished by switching the stream into flowing mode, or by calling &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt; repeatedly until all data has been consumed.</source>
          <target state="translated">该 &lt;code&gt;'end'&lt;/code&gt; 事件&lt;strong&gt;将不发射&lt;/strong&gt;，除非数据被完全消耗。这可以通过将流切换到流模式或重复调用&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;stream.read()&lt;/code&gt; &lt;/a&gt;直到所有数据都用完来实现。</target>
        </trans-unit>
        <trans-unit id="f34ffb418ae39563b461a7f6daafc853f64a2b38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'end'&lt;/code&gt; event is emitted when there is no more data to be consumed from the stream.</source>
          <target state="translated">该 &lt;code&gt;'end'&lt;/code&gt; 时，有没有更多的数据，以从流中消耗的发射事件。</target>
        </trans-unit>
        <trans-unit id="d605acf2596ab22046861a707f88f2343acbbdf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted if an error occurred while writing or piping data. The listener callback is passed a single &lt;code&gt;Error&lt;/code&gt; argument when called.</source>
          <target state="translated">的 &lt;code&gt;'error'&lt;/code&gt; ，如果在写或管道数据发生错误事件被发射。调用时，将向侦听器回调传递单个 &lt;code&gt;Error&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="6a83a8802a571046e766d6e8ee09056733af749e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted if the worker thread throws an uncaught exception. In that case, the worker will be terminated.</source>
          <target state="translated">在 &lt;code&gt;'error'&lt;/code&gt; ，如果工作者线程抛出一个未捕获的异常发出事件。在这种情况下，工人将被解雇。</target>
        </trans-unit>
        <trans-unit id="d397d55086b73ef66d35bd212162ce2c03c17242" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted when an error occurs during the processing of an &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;'error'&lt;/code&gt; 时的处理过程中发生错误，则发出事件 &lt;code&gt;Http2Session&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="413e3c65c79844f13c63eb7655c4bf843861f36a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted when an error occurs during the processing of an &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;'error'&lt;/code&gt; 时的处理过程中发生错误，则发出事件 &lt;code&gt;Http2Stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01d6ac5911dfcf76ad7712a935d4826f69712a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted whenever any error occurs. The event handler function is passed a single &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">的 &lt;code&gt;'error'&lt;/code&gt; ，每当发生任何错误被发射事件。事件处理函数传递给单个 &lt;code&gt;Error&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="b649c1dab21ce0af6e720c11d2fadb9d7a9e499b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted whenever:</source>
          <target state="translated">该 &lt;code&gt;'error'&lt;/code&gt; 事件发出每当：</target>
        </trans-unit>
        <trans-unit id="2fa272f6420b73087035e5ec70afa54b433648bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event may be emitted by a &lt;code&gt;Readable&lt;/code&gt; implementation at any time. Typically, this may occur if the underlying stream is unable to generate data due to an underlying internal failure, or when a stream implementation attempts to push an invalid chunk of data.</source>
          <target state="translated">的 &lt;code&gt;'error'&lt;/code&gt; 事件可以由一个发射 &lt;code&gt;Readable&lt;/code&gt; 随时执行。通常，如果基础流由于基础内部故障而无法生成数据，或者流实现尝试推送无效数据块时，可能会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="0ae56452417c810dcf262ae98ea22d57c7405134" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted after the child process ends. If the process exited, &lt;code&gt;code&lt;/code&gt; is the final exit code of the process, otherwise &lt;code&gt;null&lt;/code&gt;. If the process terminated due to receipt of a signal, &lt;code&gt;signal&lt;/code&gt; is the string name of the signal, otherwise &lt;code&gt;null&lt;/code&gt;. One of the two will always be non-null.</source>
          <target state="translated">在 &lt;code&gt;'exit'&lt;/code&gt; 事件的子进程结束后发出的。如果该进程已退出，则 &lt;code&gt;code&lt;/code&gt; 是该进程的最终退出代码，否则为 &lt;code&gt;null&lt;/code&gt; 。如果进程由于接收到信号而终止，则 &lt;code&gt;signal&lt;/code&gt; 是信号的字符串名称，否则为 &lt;code&gt;null&lt;/code&gt; 。两者之一将始终为非null。</target>
        </trans-unit>
        <trans-unit id="123f48934839bfe2588cb02108ecd112f832ccc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted once the worker has stopped. If the worker exited by calling &lt;a href=&quot;process#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;exitCode&lt;/code&gt; parameter will be the passed exit code. If the worker was terminated, the &lt;code&gt;exitCode&lt;/code&gt; parameter will be &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;'exit'&lt;/code&gt; ，一旦工人已经停止了发射活动。如果工作人员通过调用&lt;a href=&quot;process#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;退出，则 &lt;code&gt;exitCode&lt;/code&gt; 参数将是传递的退出代码。如果工作程序已终止，则 &lt;code&gt;exitCode&lt;/code&gt; 参数将为 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="afee462ecbee216bfce98bfc1bb4dd2bd3b53065" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted when the Node.js process is about to exit as a result of either:</source>
          <target state="translated">的 &lt;code&gt;'exit'&lt;/code&gt; 时Node.js的进程即将作为出口的任一个结果事件被发射：</target>
        </trans-unit>
        <trans-unit id="9a6f422bb8de57a4477a93475d1191faaff75e7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted when the REPL is exited either by receiving the &lt;code&gt;.exit&lt;/code&gt; command as input, the user pressing &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; twice to signal &lt;code&gt;SIGINT&lt;/code&gt;, or by pressing &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; to signal &lt;code&gt;'end'&lt;/code&gt; on the input stream. The listener callback is invoked without any arguments.</source>
          <target state="translated">的 &lt;code&gt;'exit'&lt;/code&gt; 当REPL通过接收任一退出发射事件 &lt;code&gt;.exit&lt;/code&gt; 命令作为输入时，用户按下 &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; 两次信号 &lt;code&gt;SIGINT&lt;/code&gt; ，或按 &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; 到信号 &lt;code&gt;'end'&lt;/code&gt; 上的输入流。没有任何参数的情况下调用侦听器回调。</target>
        </trans-unit>
        <trans-unit id="1f963075b240042211e93f34948383cfbb0b6a1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event may or may not fire after an error has occurred. When listening to both the &lt;code&gt;'exit'&lt;/code&gt; and &lt;code&gt;'error'&lt;/code&gt; events, it is important to guard against accidentally invoking handler functions multiple times.</source>
          <target state="translated">发生错误后， &lt;code&gt;'exit'&lt;/code&gt; 事件可能会触发，也可能不会触发。在侦听 &lt;code&gt;'exit'&lt;/code&gt; 和 &lt;code&gt;'error'&lt;/code&gt; 事件时，重要的是要防止多次意外调用处理程序功能。</target>
        </trans-unit>
        <trans-unit id="5c045b95a3f3d67c739999dde8aadc99426902a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'finish'&lt;/code&gt; event is emitted after the &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; method has been called, and all data has been flushed to the underlying system.</source>
          <target state="translated">所述 &lt;code&gt;'finish'&lt;/code&gt; 事件在后发射&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;方法被调用，并且所有数据已被刷新到底层系统。</target>
        </trans-unit>
        <trans-unit id="b6a22727c894fadd448a7f390fe47d103feecab5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'frameError'&lt;/code&gt; event is emitted when an error occurs while attempting to send a frame on the session. If the frame that could not be sent is associated with a specific &lt;code&gt;Http2Stream&lt;/code&gt;, an attempt to emit a &lt;code&gt;'frameError'&lt;/code&gt; event on the &lt;code&gt;Http2Stream&lt;/code&gt; is made.</source>
          <target state="translated">该 &lt;code&gt;'frameError'&lt;/code&gt; 时，同时尝试在会话发送一个帧中发生错误被发射事件。如果无法发送帧与特定关联 &lt;code&gt;Http2Stream&lt;/code&gt; ，试图发出 &lt;code&gt;'frameError'&lt;/code&gt; 上的事件 &lt;code&gt;Http2Stream&lt;/code&gt; 制成。</target>
        </trans-unit>
        <trans-unit id="760233dbfe4d62c71e85e5b64f2e79daec0b7d57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'frameError'&lt;/code&gt; event is emitted when an error occurs while attempting to send a frame. When invoked, the handler function will receive an integer argument identifying the frame type, and an integer argument identifying the error code. The &lt;code&gt;Http2Stream&lt;/code&gt; instance will be destroyed immediately after the &lt;code&gt;'frameError'&lt;/code&gt; event is emitted.</source>
          <target state="translated">该 &lt;code&gt;'frameError'&lt;/code&gt; 当同时试图发送一个帧中发生错误被发射事件。调用时，处理函数将接收一个标识帧类型的整数参数和一个标识错误代码的整数参数。该 &lt;code&gt;Http2Stream&lt;/code&gt; 实例将立即后销毁 &lt;code&gt;'frameError'&lt;/code&gt; 事件被发出。</target>
        </trans-unit>
        <trans-unit id="bc5d72127b4de031733972dd5c7ac0bf407ee9ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'goaway'&lt;/code&gt; event is emitted when a &lt;code&gt;GOAWAY&lt;/code&gt; frame is received.</source>
          <target state="translated">该 &lt;code&gt;'goaway'&lt;/code&gt; 一个当被发射事件 &lt;code&gt;GOAWAY&lt;/code&gt; 接收帧。</target>
        </trans-unit>
        <trans-unit id="06fde462f19c33854aa53df976784a61259a9435" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'headers'&lt;/code&gt; event is emitted when an additional block of headers is received for a stream, such as when a block of &lt;code&gt;1xx&lt;/code&gt; informational headers is received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">该 &lt;code&gt;'headers'&lt;/code&gt; 当接收到用于流报头的附加块，当一个块例如发射事件 &lt;code&gt;1xx&lt;/code&gt; 接收信息的标头。侦听器回调将传递&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2标头对象&lt;/a&gt;和与标头关联的标志。</target>
        </trans-unit>
        <trans-unit id="79520eba2a068a4c7e9f8acddb2d688f2b3c92e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'iso-8859-16'&lt;/code&gt; encoding listed in the &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG Encoding Standard&lt;/a&gt; is not supported.</source>
          <target state="translated">不支持&lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG编码标准中&lt;/a&gt;列出的 &lt;code&gt;'iso-8859-16'&lt;/code&gt; 编码。</target>
        </trans-unit>
        <trans-unit id="a7281f72a178bef00207240f8d3d065f64e94f09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'line'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream receives an end-of-line input (&lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, or &lt;code&gt;\r\n&lt;/code&gt;). This usually occurs when the user presses the &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;Return&amp;gt;&lt;/code&gt; keys.</source>
          <target state="translated">的 &lt;code&gt;'line'&lt;/code&gt; 每当发射事件 &lt;code&gt;input&lt;/code&gt; 流接收端的行的输入（ &lt;code&gt;\n&lt;/code&gt; ， &lt;code&gt;\r&lt;/code&gt; 或 &lt;code&gt;\r\n&lt;/code&gt; ）。当用户按下 &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;Return&amp;gt;&lt;/code&gt; 键时，通常会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="d1dd53c8b8c5a418dd3a58ccaf51adcf802a8dca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'listening'&lt;/code&gt; event is emitted whenever a socket begins listening for datagram messages. This occurs as soon as UDP sockets are created.</source>
          <target state="translated">在 &lt;code&gt;'listening'&lt;/code&gt; 每当一个套接字开始监听数据报的消息发出事件。一旦创建UDP套接字，就会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="cbdbadeefb4cce49c686eaa4d3978db3435a7c97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted when an acknowledgment &lt;code&gt;SETTINGS&lt;/code&gt; frame has been received.</source>
          <target state="translated">该 &lt;code&gt;'localSettings'&lt;/code&gt; 当确认发出事件 &lt;code&gt;SETTINGS&lt;/code&gt; 已接收的帧。</target>
        </trans-unit>
        <trans-unit id="f5ca50004941181eea8f74d0fc68816de2de7201" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted for any incoming message, containing the cloned input of &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;port.postMessage()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;'message'&lt;/code&gt; 事件被射出的任何传入的消息，含有克隆的输入&lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt; &lt;code&gt;port.postMessage()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81b3bdbadfae1e3264119b629189aba2112399d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted when a new datagram is available on a socket. The event handler function is passed two arguments: &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;rinfo&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;'message'&lt;/code&gt; 事件时，发出一个新的数据包可用的插座上。事件处理函数传递了两个参数： &lt;code&gt;msg&lt;/code&gt; 和 &lt;code&gt;rinfo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d138cd76d2b496029c2982956fead778e703deb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted when the worker thread has invoked &lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt;&lt;code&gt;require('worker_threads').parentPort.postMessage()&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;#worker_threads_event_message&quot;&gt;&lt;code&gt;port.on('message')&lt;/code&gt;&lt;/a&gt; event for more details.</source>
          <target state="translated">在 &lt;code&gt;'message'&lt;/code&gt; 时，工作线程已经调用被发射事件&lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt; &lt;code&gt;require('worker_threads').parentPort.postMessage()&lt;/code&gt; &lt;/a&gt;。有关更多详细信息，请参见&lt;a href=&quot;#worker_threads_event_message&quot;&gt; &lt;code&gt;port.on('message')&lt;/code&gt; &lt;/a&gt;事件。</target>
        </trans-unit>
        <trans-unit id="82ba8dd138e86b900fa9975500671c42d475acfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is triggered when a child process uses &lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;process.send()&lt;/code&gt;&lt;/a&gt; to send messages.</source>
          <target state="translated">该 &lt;code&gt;'message'&lt;/code&gt; 事件被触发时，子进程用途&lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;process.send()&lt;/code&gt; &lt;/a&gt;来发送邮件。</target>
        </trans-unit>
        <trans-unit id="974ad0e64fe6296b3b090d56a32c0565a97e1803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'multipleResolves'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; has been either:</source>
          <target state="translated">该 &lt;code&gt;'multipleResolves'&lt;/code&gt; 发射事件每当 &lt;code&gt;Promise&lt;/code&gt; 一直之一：</target>
        </trans-unit>
        <trans-unit id="a80b6d5de14633d665d01a9e2512f0b611fd2f7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'newSession'&lt;/code&gt; event is emitted upon creation of a new TLS session. This may be used to store sessions in external storage. The data should be provided to the &lt;a href=&quot;#tls_event_resumesession&quot;&gt;&lt;code&gt;'resumeSession'&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">该 &lt;code&gt;'newSession'&lt;/code&gt; 事件是在创建一个新的TLS会话发出。这可用于将会话存储在外部存储中。数据应提供给&lt;a href=&quot;#tls_event_resumesession&quot;&gt; &lt;code&gt;'resumeSession'&lt;/code&gt; &lt;/a&gt;回调。</target>
        </trans-unit>
        <trans-unit id="b0fee03b9371081a1b7ac033a2811eb25d701512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'online'&lt;/code&gt; event is emitted when the worker thread has started executing JavaScript code.</source>
          <target state="translated">在 &lt;code&gt;'online'&lt;/code&gt; 时，工作线程开始执行JavaScript代码发出的事件。</target>
        </trans-unit>
        <trans-unit id="61b0a905df713569973ce617c63dea32723865a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'origin'&lt;/code&gt; event is emitted whenever an &lt;code&gt;ORIGIN&lt;/code&gt; frame is received by the client. The event is emitted with an array of &lt;code&gt;origin&lt;/code&gt; strings. The &lt;code&gt;http2session.originSet&lt;/code&gt; will be updated to include the received origins.</source>
          <target state="translated">的 &lt;code&gt;'origin'&lt;/code&gt; 每当发射事件 &lt;code&gt;ORIGIN&lt;/code&gt; 由客户机接收到的帧。该事件与 &lt;code&gt;origin&lt;/code&gt; 字符串数组一起发出。该 &lt;code&gt;http2session.originSet&lt;/code&gt; 将更新为包括接收的起源。</target>
        </trans-unit>
        <trans-unit id="f65018cab56b4ae93ba24fd445ffd1c49d1f068d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'origin'&lt;/code&gt; event is only emitted when using a secure TLS connection.</source>
          <target state="translated">在 &lt;code&gt;'origin'&lt;/code&gt; 使用安全TLS连接时，事件只发射。</target>
        </trans-unit>
        <trans-unit id="ba81bca8b322e658babfec33ee6b3baa6c478b46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; and &lt;code&gt;'SIGCONT'&lt;/code&gt; events will not be emitted if the &lt;code&gt;input&lt;/code&gt; was paused before the process was sent to the background.</source>
          <target state="translated">该 &lt;code&gt;'pause'&lt;/code&gt; 和 &lt;code&gt;'SIGCONT'&lt;/code&gt; 如果事件将不发射 &lt;code&gt;input&lt;/code&gt; 之前的过程中被发送到后台暂停。</target>
        </trans-unit>
        <trans-unit id="a637b3ce402e4c17d1a124eacd504ebc99f3eb16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; event is emitted when &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; is called and &lt;code&gt;readableFlowing&lt;/code&gt; is not &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;'pause'&lt;/code&gt; 时事件被发射&lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; &lt;/a&gt;被调用， &lt;code&gt;readableFlowing&lt;/code&gt; 不是 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4e5586adc19c1a578afc50547341cbae3ad8c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; event is emitted when one of the following occur:</source>
          <target state="translated">所述 &lt;code&gt;'pause'&lt;/code&gt; 时会发生以下的一个事件发出：</target>
        </trans-unit>
        <trans-unit id="048ea341b0571ea4393ad72e671351d7d6053bdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'ping'&lt;/code&gt; event is emitted whenever a &lt;code&gt;PING&lt;/code&gt; frame is received from the connected peer.</source>
          <target state="translated">该 &lt;code&gt;'ping'&lt;/code&gt; 每当发射事件 &lt;code&gt;PING&lt;/code&gt; 从所连接的对等体接收到的帧。</target>
        </trans-unit>
        <trans-unit id="0b5d77dd469f50b5abf03bcacf58c2b55cf6c3b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pipe'&lt;/code&gt; event is emitted when the &lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt; method is called on a readable stream, adding this writable to its set of destinations.</source>
          <target state="translated">所述 &lt;code&gt;'pipe'&lt;/code&gt; 当事件被发射&lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt; &lt;code&gt;stream.pipe()&lt;/code&gt; &lt;/a&gt;方法被调用上的可读流，添加该可写至其目的地集合。</target>
        </trans-unit>
        <trans-unit id="743cd45272e3e81930c50026e225cdc079b474a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'push'&lt;/code&gt; event is emitted when response headers for a Server Push stream are received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">在 &lt;code&gt;'push'&lt;/code&gt; 当接收到针对服务器推送流响应头发射事件。侦听器回调将传递&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2标头对象&lt;/a&gt;和与标头关联的标志。</target>
        </trans-unit>
        <trans-unit id="c590ad720763b332369a839ca3aeb58adbd53461" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; event is emitted when there is data available to be read from the stream. In some cases, attaching a listener for the &lt;code&gt;'readable'&lt;/code&gt; event will cause some amount of data to be read into an internal buffer.</source>
          <target state="translated">所述 &lt;code&gt;'readable'&lt;/code&gt; 当存在要被从该流读取可用的数据被发射事件。在某些情况下，为 &lt;code&gt;'readable'&lt;/code&gt; 事件附加侦听器将导致一定数量的数据被读取到内部缓冲区中。</target>
        </trans-unit>
        <trans-unit id="3f321790d8533ee1575d152841b2014bbb9a9e1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; event will also be emitted once the end of the stream data has been reached but before the &lt;code&gt;'end'&lt;/code&gt; event is emitted.</source>
          <target state="translated">所述 &lt;code&gt;'readable'&lt;/code&gt; 一旦流数据的结尾已经到达，但之前的事件也将发出 &lt;code&gt;'end'&lt;/code&gt; 被发射事件。</target>
        </trans-unit>
        <trans-unit id="6a33c06469b5000b45fd1ff75e2103ea23711d04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; is always emitted in the next tick after &lt;code&gt;.push()&lt;/code&gt; is called.</source>
          <target state="translated">所述 &lt;code&gt;'readable'&lt;/code&gt; 总是在下一蜱发射之后 &lt;code&gt;.push()&lt;/code&gt; 被调用。</target>
        </trans-unit>
        <trans-unit id="331814408ad22b9e15f1f826850a2f2b6d57b17e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'rejectionHandled'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; has been rejected and an error handler was attached to it (using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;promise.catch()&lt;/code&gt;&lt;/a&gt;, for example) later than one turn of the Node.js event loop.</source>
          <target state="translated">该 &lt;code&gt;'rejectionHandled'&lt;/code&gt; 每当发射事件 &lt;code&gt;Promise&lt;/code&gt; 已被拒绝和一个错误处理程序被连接到它（使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt; &lt;code&gt;promise.catch()&lt;/code&gt; &lt;/a&gt;后，例如）比Node.js的事件循环的一匝。</target>
        </trans-unit>
        <trans-unit id="cdffe035f7f5e8eeb5025bc5fb803a0ce34a6ec9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'remoteSettings'&lt;/code&gt; event is emitted when a new &lt;code&gt;SETTINGS&lt;/code&gt; frame is received from the connected peer.</source>
          <target state="translated">该 &lt;code&gt;'remoteSettings'&lt;/code&gt; 当一个新的发射事件 &lt;code&gt;SETTINGS&lt;/code&gt; 从所连接的对等体接收到的帧。</target>
        </trans-unit>
        <trans-unit id="e7bab2cbef5a8084fcc62f25ae893aa63ee29422" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'removeListener'&lt;/code&gt; event is emitted &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;listener&lt;/code&gt; is removed.</source>
          <target state="translated">该 &lt;code&gt;'removeListener'&lt;/code&gt; 事件被发射&lt;em&gt;之后&lt;/em&gt;的 &lt;code&gt;listener&lt;/code&gt; 被去除。</target>
        </trans-unit>
        <trans-unit id="2f15eb3db706956bc4a77474ff2fa5c7906f8192" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'request'&lt;/code&gt; event works identically on both &lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt; and HTTP/2.</source>
          <target state="translated">所述 &lt;code&gt;'request'&lt;/code&gt; 的事件同样工作在两个&lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt;和HTTP / 2。</target>
        </trans-unit>
        <trans-unit id="67038f9420ce56b7d4d983221318c5c2eea5002d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'reset'&lt;/code&gt; event is emitted when the REPL's context is reset. This occurs whenever the &lt;code&gt;.clear&lt;/code&gt; command is received as input &lt;em&gt;unless&lt;/em&gt; the REPL is using the default evaluator and the &lt;code&gt;repl.REPLServer&lt;/code&gt; instance was created with the &lt;code&gt;useGlobal&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. The listener callback will be called with a reference to the &lt;code&gt;context&lt;/code&gt; object as the only argument.</source>
          <target state="translated">该 &lt;code&gt;'reset'&lt;/code&gt; 当REPL的上下文是复位事件被发射。出现这种情况每当 &lt;code&gt;.clear&lt;/code&gt; 接收命令的输入&lt;em&gt;，除非&lt;/em&gt;在REPL使用默认评估和 &lt;code&gt;repl.REPLServer&lt;/code&gt; 实例与所创建的 &lt;code&gt;useGlobal&lt;/code&gt; 选项设置为 &lt;code&gt;true&lt;/code&gt; 。将使用对 &lt;code&gt;context&lt;/code&gt; 对象的引用作为唯一参数来调用侦听器回调。</target>
        </trans-unit>
        <trans-unit id="20a4a05f2093abc18166b110dcd5b70ad9f00eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resize'&lt;/code&gt; event is emitted whenever either of the &lt;code&gt;writeStream.columns&lt;/code&gt; or &lt;code&gt;writeStream.rows&lt;/code&gt; properties have changed. No arguments are passed to the listener callback when called.</source>
          <target state="translated">所述 &lt;code&gt;'resize'&lt;/code&gt; 每当任一的发射事件 &lt;code&gt;writeStream.columns&lt;/code&gt; 或 &lt;code&gt;writeStream.rows&lt;/code&gt; 性质已经改变。调用时不会将任何参数传递给侦听器回调。</target>
        </trans-unit>
        <trans-unit id="f8dd7100f65e5be48fd853e4911e57e22c4b6451" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'response'&lt;/code&gt; event is emitted when a response &lt;code&gt;HEADERS&lt;/code&gt; frame has been received for this stream from the connected HTTP/2 server. The listener is invoked with two arguments: an &lt;code&gt;Object&lt;/code&gt; containing the received &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt;, and flags associated with the headers.</source>
          <target state="translated">所述 &lt;code&gt;'response'&lt;/code&gt; 时的响应被发出的事件 &lt;code&gt;HEADERS&lt;/code&gt; 已接收从所连接的HTTP / 2服务器这个流帧。听者调用使用两个参数：一个 &lt;code&gt;Object&lt;/code&gt; 包含接收到的&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2头对象&lt;/a&gt;，以及与所述相关联的报头标志。</target>
        </trans-unit>
        <trans-unit id="54582df4bb78540744ceeaff58f63d87fc95c5ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resume'&lt;/code&gt; event is emitted when &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; is called and &lt;code&gt;readableFlowing&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;'resume'&lt;/code&gt; 当事件发出&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt;被调用， &lt;code&gt;readableFlowing&lt;/code&gt; 是不是 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c6dd9b71ac7098f6ea0b70c58c682488ceb44d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resume'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream is resumed.</source>
          <target state="translated">在 &lt;code&gt;'resume'&lt;/code&gt; 每当发射事件 &lt;code&gt;input&lt;/code&gt; 流被恢复。</target>
        </trans-unit>
        <trans-unit id="bef01c7015ad884d3d793c89e4e856737e7f0a19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resumeSession'&lt;/code&gt; event is emitted when the client requests to resume a previous TLS session. The listener callback is passed two arguments when called:</source>
          <target state="translated">该 &lt;code&gt;'resumeSession'&lt;/code&gt; 事件发出当客户端请求恢复先前的TLS会话。调用时，侦听器回调将传递两个参数：</target>
        </trans-unit>
        <trans-unit id="2cc0eb4e717982dea937c4e766c505133e21862f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secure'&lt;/code&gt; event is emitted by the &lt;code&gt;SecurePair&lt;/code&gt; object once a secure connection has been established.</source>
          <target state="translated">在 &lt;code&gt;'secure'&lt;/code&gt; 事件是由发射 &lt;code&gt;SecurePair&lt;/code&gt; 对象一旦一个安全的连接已经建立。</target>
        </trans-unit>
        <trans-unit id="2341e93879ce8f12981105ab49853749cc7e0163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secureConnect'&lt;/code&gt; event is emitted after the handshaking process for a new connection has successfully completed. The listener callback will be called regardless of whether or not the server's certificate has been authorized. It is the client's responsibility to check the &lt;code&gt;tlsSocket.authorized&lt;/code&gt; property to determine if the server certificate was signed by one of the specified CAs. If &lt;code&gt;tlsSocket.authorized === false&lt;/code&gt;, then the error can be found by examining the &lt;code&gt;tlsSocket.authorizationError&lt;/code&gt; property. If ALPN was used, the &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; property can be checked to determine the negotiated protocol.</source>
          <target state="translated">该 &lt;code&gt;'secureConnect'&lt;/code&gt; 后新连接的握手过程已成功完成发射事件。无论服务器的证书是否已被授权，都将调用侦听器回调。客户有责任检查 &lt;code&gt;tlsSocket.authorized&lt;/code&gt; 属性，以确定服务器证书是否由指定的CA之一签名。如果 &lt;code&gt;tlsSocket.authorized === false&lt;/code&gt; ，则可以通过检查 &lt;code&gt;tlsSocket.authorizationError&lt;/code&gt; 属性来找到错误。如果使用ALPN，则可以检查 &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; 属性以确定协商的协议。</target>
        </trans-unit>
        <trans-unit id="4cdfa01e16e883f668e8dcde46ecb8537a05aa84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secureConnection'&lt;/code&gt; event is emitted after the handshaking process for a new connection has successfully completed. The listener callback is passed a single argument when called:</source>
          <target state="translated">该 &lt;code&gt;'secureConnection'&lt;/code&gt; 后新连接的握手过程已成功完成发射事件。调用时，侦听器回调将传递一个参数：</target>
        </trans-unit>
        <trans-unit id="2c12fc6f19cad46e27778cdbde243418fc2aa32f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted on a client &lt;code&gt;tls.TLSSocket&lt;/code&gt; when a new session or TLS ticket is available. This may or may not be before the handshake is complete, depending on the TLS protocol version that was negotiated. The event is not emitted on the server, or if a new session was not created, for example, when the connection was resumed. For some TLS protocol versions the event may be emitted multiple times, in which case all the sessions can be used for resumption.</source>
          <target state="translated">在 &lt;code&gt;'session'&lt;/code&gt; 事件被发射到客户端 &lt;code&gt;tls.TLSSocket&lt;/code&gt; 当一个新的会话或TLS票可用。这可能在握手完成之前完成，也可能不会完成，具体取决于所协商的TLS协议版本。该事件不会在服务器上发出，或者例如在恢复连接时是否未创建新的会话。对于某些TLS协议版本，该事件可能会多次发出，在这种情况下，所有会话都可以用于恢复。</target>
        </trans-unit>
        <trans-unit id="d5381be7496a12105803cfef7e039de8630e7cd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Session&lt;/code&gt; is created by the &lt;code&gt;Http2SecureServer&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;'session'&lt;/code&gt; 当一个新的事件发出 &lt;code&gt;Http2Session&lt;/code&gt; 由创建 &lt;code&gt;Http2SecureServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e1eaf0ed898b0fca1a226411fff348f74b7ff52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Session&lt;/code&gt; is created by the &lt;code&gt;Http2Server&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;'session'&lt;/code&gt; 当一个新的事件发出 &lt;code&gt;Http2Session&lt;/code&gt; 由创建 &lt;code&gt;Http2Server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="238f72829ecaec928f578a773e5441d6c4659596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'sessionError'&lt;/code&gt; event is emitted when an &lt;code&gt;'error'&lt;/code&gt; event is emitted by an &lt;code&gt;Http2Session&lt;/code&gt; object associated with the &lt;code&gt;Http2SecureServer&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;'sessionError'&lt;/code&gt; 当被发射事件 &lt;code&gt;'error'&lt;/code&gt; 事件由发射 &lt;code&gt;Http2Session&lt;/code&gt; 与相关联的对象 &lt;code&gt;Http2SecureServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14cd694c9317db24ce6afc17f5aca349dd385bfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'sessionError'&lt;/code&gt; event is emitted when an &lt;code&gt;'error'&lt;/code&gt; event is emitted by an &lt;code&gt;Http2Session&lt;/code&gt; object associated with the &lt;code&gt;Http2Server&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;'sessionError'&lt;/code&gt; 当被发射事件 &lt;code&gt;'error'&lt;/code&gt; 事件由发射 &lt;code&gt;Http2Session&lt;/code&gt; 与相关联的对象 &lt;code&gt;Http2Server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51ea0e301e0ed929a3b9724d7a5f4ae527be5562" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'stream'&lt;/code&gt; event is emitted when a &lt;code&gt;'stream'&lt;/code&gt; event has been emitted by an &lt;code&gt;Http2Session&lt;/code&gt; associated with the server.</source>
          <target state="translated">在 &lt;code&gt;'stream'&lt;/code&gt; 当一个被发射事件 &lt;code&gt;'stream'&lt;/code&gt; 事件已经由发射 &lt;code&gt;Http2Session&lt;/code&gt; 与服务器相关联。</target>
        </trans-unit>
        <trans-unit id="65e49bda1180537406c13d55823d09a48f6f4669" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'stream'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Stream&lt;/code&gt; is created.</source>
          <target state="translated">在 &lt;code&gt;'stream'&lt;/code&gt; 一个新的事件时发出 &lt;code&gt;Http2Stream&lt;/code&gt; 创建。</target>
        </trans-unit>
        <trans-unit id="09e6820161ddb001a04c2443f06c7b6df3cbae18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted after no activity is received for this &lt;code&gt;Http2Stream&lt;/code&gt; within the number of milliseconds set using &lt;code&gt;http2stream.setTimeout()&lt;/code&gt;.</source>
          <target state="translated">在使用 &lt;code&gt;http2stream.setTimeout()&lt;/code&gt; 设置的毫秒数内未收到此 &lt;code&gt;Http2Stream&lt;/code&gt; 的任何活动后，发出 &lt;code&gt;'timeout'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="7fe5fc81abcb2aae6b9dc8f2243d24b1d7188c7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2secureServer.setTimeout()&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt; 2 minutes.</source>
          <target state="translated">如果服务器上没有使用 &lt;code&gt;http2secureServer.setTimeout()&lt;/code&gt; 设置的给定毫秒数的活动，则发出 &lt;code&gt;'timeout'&lt;/code&gt; 事件。&lt;strong&gt;默认值：&lt;/strong&gt; 2分钟。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="108936544aea63f28d9a60ebe957d6a7f1889efd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2server.setTimeout()&lt;/code&gt;.</source>
          <target state="translated">如果服务器上没有使用 &lt;code&gt;http2server.setTimeout()&lt;/code&gt; 设置的给定毫秒数的活动，则发出 &lt;code&gt;'timeout'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="39ed4884868474d1d719d77f6fcff51e968f3d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2server.setTimeout()&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt; 2 minutes.</source>
          <target state="translated">如果服务器上没有使用 &lt;code&gt;http2server.setTimeout()&lt;/code&gt; 设置的给定毫秒数的活动，则发出 &lt;code&gt;'timeout'&lt;/code&gt; 事件。&lt;strong&gt;默认值：&lt;/strong&gt; 2分钟。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6fb78b74b7bacfc18783789bfee8f7f7e26fbb38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'tlsClientError'&lt;/code&gt; event is emitted when an error occurs before a secure connection is established. The listener callback is passed two arguments when called:</source>
          <target state="translated">该 &lt;code&gt;'tlsClientError'&lt;/code&gt; 当建立安全连接之前发生错误被发射事件。调用时，侦听器回调将传递两个参数：</target>
        </trans-unit>
        <trans-unit id="4fe8033442d93b36467a9592e5b48ab0e305d9e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'trailers'&lt;/code&gt; event is emitted when a block of headers associated with trailing header fields is received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">该 &lt;code&gt;'trailers'&lt;/code&gt; 当接收尾随的报头字段相关联的报头的块被发射事件。侦听器回调将传递&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2标头对象&lt;/a&gt;和与标头关联的标志。</target>
        </trans-unit>
        <trans-unit id="23673d04eae7b0bc5661bdbcf6403ecf29c7b20d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted when an uncaught JavaScript exception bubbles all the way back to the event loop. By default, Node.js handles such exceptions by printing the stack trace to &lt;code&gt;stderr&lt;/code&gt; and exiting with code 1, overriding any previously set &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt;. Adding a handler for the &lt;code&gt;'uncaughtException'&lt;/code&gt; event overrides this default behavior. Alternatively, change the &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;'uncaughtException'&lt;/code&gt; handler which will result in the process exiting with the provided exit code. Otherwise, in the presence of such handler the process will exit with 0.</source>
          <target state="translated">该 &lt;code&gt;'uncaughtException'&lt;/code&gt; 时，未捕获的JavaScript异常气泡一路回到事件循环发出的事件。默认情况下，Node.js通过将堆栈跟踪打印到 &lt;code&gt;stderr&lt;/code&gt; 并以代码1退出来处理此类异常，从而覆盖任何先前设置的&lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt;。为 &lt;code&gt;'uncaughtException'&lt;/code&gt; 事件添加处理程序将覆盖此默认行为。或者，在 &lt;code&gt;'uncaughtException'&lt;/code&gt; 处理程序中更改&lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt;，这将导致进程使用提供的退出代码退出。否则，在存在此类处理程序的情况下，该过程将以0退出。</target>
        </trans-unit>
        <trans-unit id="093aa13b2c97a6032857fa6ea423e7921815103a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'uncaughtException'&lt;/code&gt; event is from now on triggered if the repl is used as standalone program.</source>
          <target state="translated">该 &lt;code&gt;'uncaughtException'&lt;/code&gt; 事件是从现在开始，如果REPL作为独立的程序触发。</target>
        </trans-unit>
        <trans-unit id="9a07847bc26be18865a3248444066bcc64a6386e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unhandledRejection'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; is rejected and no error handler is attached to the promise within a turn of the event loop. When programming with Promises, exceptions are encapsulated as &quot;rejected promises&quot;. Rejections can be caught and handled using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;promise.catch()&lt;/code&gt;&lt;/a&gt; and are propagated through a &lt;code&gt;Promise&lt;/code&gt; chain. The &lt;code&gt;'unhandledRejection'&lt;/code&gt; event is useful for detecting and keeping track of promises that were rejected whose rejections have not yet been handled.</source>
          <target state="translated">该 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 每当发射事件 &lt;code&gt;Promise&lt;/code&gt; 被拒绝，并且没有错误处理程序安装到事件循环的一转内的承诺。使用Promises进行编程时，异常被封装为&amp;ldquo;拒绝的承诺&amp;rdquo;。可以使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt; &lt;code&gt;promise.catch()&lt;/code&gt; &lt;/a&gt;捕获和处理拒绝，并通过 &lt;code&gt;Promise&lt;/code&gt; 链进行传播。该 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 事件是检测并保持该被拒绝其拒绝尚未办理承诺的轨道有用。</target>
        </trans-unit>
        <trans-unit id="5e17ef7fa41c6032423aa7e11ccf9b80fe4dd1eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unknownProtocol'&lt;/code&gt; event is emitted when a connecting client fails to negotiate an allowed protocol (i.e. HTTP/2 or HTTP/1.1). The event handler receives the socket for handling. If no listener is registered for this event, the connection is terminated. See the &lt;a href=&quot;#http2_compatibility_api&quot;&gt;Compatibility API&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;'unknownProtocol'&lt;/code&gt; 事件的照射时的连接客户端无法协商允许的协议（即，HTTP / 2或HTTP / 1.1）。事件处理程序接收套接字进行处理。如果没有为该事件注册任何侦听器，则连接终止。请参阅&lt;a href=&quot;#http2_compatibility_api&quot;&gt;兼容性API&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9bc1afb0dc467971e7c8c541f29dc0ce77428191" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unpipe'&lt;/code&gt; event is emitted when the &lt;a href=&quot;#stream_readable_unpipe_destination&quot;&gt;&lt;code&gt;stream.unpipe()&lt;/code&gt;&lt;/a&gt; method is called on a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream, removing this &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; from its set of destinations.</source>
          <target state="translated">该 &lt;code&gt;'unpipe'&lt;/code&gt; 当事件被发射&lt;a href=&quot;#stream_readable_unpipe_destination&quot;&gt; &lt;code&gt;stream.unpipe()&lt;/code&gt; &lt;/a&gt;方法被调用上的&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;流，除去该&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;从其设定目的地。</target>
        </trans-unit>
        <trans-unit id="9ad68df74b203249636785fbbb8f31130efe9650" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted when the &lt;code&gt;Http2Stream&lt;/code&gt; has queued the final &lt;code&gt;DATA&lt;/code&gt; frame to be sent on a frame and the &lt;code&gt;Http2Stream&lt;/code&gt; is ready to send trailing headers. When initiating a request or response, the &lt;code&gt;waitForTrailers&lt;/code&gt; option must be set for this event to be emitted.</source>
          <target state="translated">该 &lt;code&gt;'wantTrailers'&lt;/code&gt; 当事件被发射 &lt;code&gt;Http2Stream&lt;/code&gt; 已排队的最终 &lt;code&gt;DATA&lt;/code&gt; 被一个帧上发送的帧和 &lt;code&gt;Http2Stream&lt;/code&gt; 准备发送拖尾头。启动请求或响应时，必须设置 &lt;code&gt;waitForTrailers&lt;/code&gt; 选项，以便发出此事件。</target>
        </trans-unit>
        <trans-unit id="f77fe3ae22d5c805b787b388eccf38ff6d236031" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'warning'&lt;/code&gt; event is emitted whenever Node.js emits a process warning.</source>
          <target state="translated">在 &lt;code&gt;'warning'&lt;/code&gt; 每当Node.js的发射过程警告发出事件。</target>
        </trans-unit>
        <trans-unit id="9e9f48e2643df52ffddfef6f3c88d585dc1364b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*-deprecation&lt;/code&gt; command line flags only affect warnings that use the name &lt;code&gt;'DeprecationWarning'&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;*-deprecation&lt;/code&gt; 命令行标志仅影响使用该名称的警告 &lt;code&gt;'DeprecationWarning'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38d4545050dbc2c8a080a726ad5533c98d06ab51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--entry-type=...&lt;/code&gt; flag is not compatible with the Node.js REPL.</source>
          <target state="translated">在 &lt;code&gt;--entry-type=...&lt;/code&gt; 标志无法与Node.js的REPL兼容。</target>
        </trans-unit>
        <trans-unit id="c4cc81479fbee805579102393c38c6cc511dd6a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--entry-type=commonjs&lt;/code&gt; flag was used to attempt to execute an &lt;code&gt;.mjs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file where the nearest parent &lt;code&gt;package.json&lt;/code&gt; contains &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt;; or the &lt;code&gt;--entry-type=module&lt;/code&gt; flag was used to attempt to execute a &lt;code&gt;.cjs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file where the nearest parent &lt;code&gt;package.json&lt;/code&gt; either lacks a &lt;code&gt;&quot;type&quot;&lt;/code&gt; field or contains &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;--entry-type=commonjs&lt;/code&gt; 标志被用来试图执行 &lt;code&gt;.mjs&lt;/code&gt; 文件或 &lt;code&gt;.js&lt;/code&gt; 文件，其中最近的父 &lt;code&gt;package.json&lt;/code&gt; 包含 &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; ;或 &lt;code&gt;--entry-type=module&lt;/code&gt; 标志用于尝试执行 &lt;code&gt;.cjs&lt;/code&gt; 文件或最近的父 &lt;code&gt;package.json&lt;/code&gt; 缺少 &lt;code&gt;&quot;type&quot;&lt;/code&gt; 字段或包含 &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 的 &lt;code&gt;.js&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="a26e5cbc4d1f28001634ae58ba9f86157fc53853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--es-module-specifier-resolution=[mode]&lt;/code&gt; flag can be used to customize the extension resolution algorithm. The default mode is &lt;code&gt;explicit&lt;/code&gt;, which requires the full path to a module be provided to the loader. To enable the automatic extension resolution and importing from directories that include an index file use the &lt;code&gt;node&lt;/code&gt; mode.</source>
          <target state="translated">所述 &lt;code&gt;--es-module-specifier-resolution=[mode]&lt;/code&gt; 标志可用于定制扩展分辨率算法。默认模式是 &lt;code&gt;explicit&lt;/code&gt; ，它要求将模块的完整路径提供给加载程序。要启用自动扩展名解析并从包含索引文件的目录中导入，请使用 &lt;code&gt;node&lt;/code&gt; 模式。</target>
        </trans-unit>
        <trans-unit id="7d96684c5374525fe5f2896a118c35d100dd9f80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--experimental-modules&lt;/code&gt; flag can be used to enable support for ECMAScript modules (ES modules).</source>
          <target state="translated">所述 &lt;code&gt;--experimental-modules&lt;/code&gt; 标志可用于启用ECMAScript的模块（ES模块）的支持。</target>
        </trans-unit>
        <trans-unit id="ee3284f640f748accb037052d5de9540a6b3c2c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--experimental-policy&lt;/code&gt; flag can be used to enable features for policies when loading modules.</source>
          <target state="translated">该 &lt;code&gt;--experimental-policy&lt;/code&gt; 标志可用于加载模块时启用功能的策略。</target>
        </trans-unit>
        <trans-unit id="45f8d4be1b16580af36211eb2184e713f2cb9f2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--input-type&lt;/code&gt; flag was used to attempt to execute a file. This flag can only be used with input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt; or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;--input-type&lt;/code&gt; 标志来试图执行一个文件。该标志只能与输入通过使用 &lt;code&gt;--eval&lt;/code&gt; ， &lt;code&gt;--print&lt;/code&gt; 或 &lt;code&gt;STDIN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48ee988f6a0b4b3cc241bf5e59e36e5337844ca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--preserve-symlinks&lt;/code&gt; command line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found.</source>
          <target state="translated">所述 &lt;code&gt;--preserve-symlinks&lt;/code&gt; 命令行标记指示的Node.js使用符号链接路径的模块，而不是真正的路径，从而可以发现符号链接对等体的依赖关系。</target>
        </trans-unit>
        <trans-unit id="dd2428085953e3e18c912f639e577dc736a3e57d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--preserve-symlinks&lt;/code&gt; flag does not apply to the main module, which allows &lt;code&gt;node --preserve-symlinks node_module/.bin/&amp;lt;foo&amp;gt;&lt;/code&gt; to work. To apply the same behavior for the main module, also use &lt;code&gt;--preserve-symlinks-main&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;--preserve-symlinks&lt;/code&gt; 标志不适到主模块，它允许 &lt;code&gt;node --preserve-symlinks node_module/.bin/&amp;lt;foo&amp;gt;&lt;/code&gt; 工作。要对主模块应用相同的行为，请使用 &lt;code&gt;--preserve-symlinks-main&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="60f5204e6156c13b879f75bc2bdeb77cd740b764" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--require&lt;/code&gt; option is now supported when checking a file.</source>
          <target state="translated">该 &lt;code&gt;--require&lt;/code&gt; 检查文件时，现在支持的选项。</target>
        </trans-unit>
        <trans-unit id="03afc2a2819725a665ff93384497c5a6dd67974e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--throw-deprecation&lt;/code&gt; command line flag and &lt;code&gt;process.throwDeprecation&lt;/code&gt; property take precedence over &lt;code&gt;--trace-deprecation&lt;/code&gt; and &lt;code&gt;process.traceDeprecation&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;--throw-deprecation&lt;/code&gt; 命令行标记和 &lt;code&gt;process.throwDeprecation&lt;/code&gt; 属性优先于 &lt;code&gt;--trace-deprecation&lt;/code&gt; 和 &lt;code&gt;process.traceDeprecation&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7748e47658d28f465e0f702908443bffd47e5677" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--trace-warnings&lt;/code&gt; command-line option can be used to have the default console output for warnings include the full stack trace of the warning.</source>
          <target state="translated">该 &lt;code&gt;--trace-warnings&lt;/code&gt; 命令行选项可用于具有默认的控制台输出的警告包括警告的完整堆栈跟踪。</target>
        </trans-unit>
        <trans-unit id="910fc4fb3a34a12cbb451f186082373ce6a56fd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--with-lttng&lt;/code&gt; compile-time option has been removed.</source>
          <target state="translated">该 &lt;code&gt;--with-lttng&lt;/code&gt; 编译时间选项已被删除。</target>
        </trans-unit>
        <trans-unit id="49ec27d09eca7302b82dba6c21ef5b6de51165b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command line option</source>
          <target state="translated">该 &lt;code&gt;--zero-fill-buffers&lt;/code&gt; 命令行选项</target>
        </trans-unit>
        <trans-unit id="d44bdf199493a6f91f2c55bd7a0d4dafee53ad3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; are not considered equal anymore.</source>
          <target state="translated">在 &lt;code&gt;-0&lt;/code&gt; 和 &lt;code&gt;+0&lt;/code&gt; 是不相等了。</target>
        </trans-unit>
        <trans-unit id="64c98a5e7ac18374fc6663c8752491fc56a08fa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt; extensions may be used to mix types within the same package scope:</source>
          <target state="translated">的 &lt;code&gt;.mjs&lt;/code&gt; 和 &lt;code&gt;.cjs&lt;/code&gt; 扩展可以被用于相同的封装范围内的混合类型：</target>
        </trans-unit>
        <trans-unit id="d9f9c6fe1bda6cb495fc50c09400d829c18834be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:method&lt;/code&gt; and &lt;code&gt;:path&lt;/code&gt; pseudo-headers are not specified within &lt;code&gt;headers&lt;/code&gt;, they respectively default to:</source>
          <target state="translated">的 &lt;code&gt;:method&lt;/code&gt; 和 &lt;code&gt;:path&lt;/code&gt; 伪标头不内指定的 &lt;code&gt;headers&lt;/code&gt; ，它们分别预设为：</target>
        </trans-unit>
        <trans-unit id="0fbdd10cf14e123063f1ad68f662b994e5b14f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:status&lt;/code&gt; header is converted to &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;:status&lt;/code&gt; 报头转换为 &lt;code&gt;number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19b2b078e03ca61c0c3a2ac02bbf791223c851cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ALPNProtocols&lt;/code&gt; option can be a &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt; now.</source>
          <target state="translated">该 &lt;code&gt;ALPNProtocols&lt;/code&gt; 选项可以是 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 现在。</target>
        </trans-unit>
        <trans-unit id="03c0a26d735adb90e83ae84b4b23b480f2bb6077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AsyncHook&lt;/code&gt; instance is disabled by default. If the &lt;code&gt;AsyncHook&lt;/code&gt; instance should be enabled immediately after creation, the following pattern can be used.</source>
          <target state="translated">默认情况下， &lt;code&gt;AsyncHook&lt;/code&gt; 实例是禁用的。如果创建后应立即启用 &lt;code&gt;AsyncHook&lt;/code&gt; 实例，则可以使用以下模式。</target>
        </trans-unit>
        <trans-unit id="92482e3afbb86a30bca701deea5ef5e1aa3b1852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer()&lt;/code&gt; function and &lt;code&gt;new Buffer()&lt;/code&gt; constructor are deprecated due to API usability issues that can lead to accidental security issues.</source>
          <target state="translated">该 &lt;code&gt;Buffer()&lt;/code&gt; 函数和 &lt;code&gt;new Buffer()&lt;/code&gt; 构造函数已被弃用，由于API可用性问题，可能导致意外的安全问题。</target>
        </trans-unit>
        <trans-unit id="17975c7ac6c9252a591d0f88b25f283db9f71165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer.from()&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from&quot;&gt;&lt;code&gt;TypedArray.from()&lt;/code&gt;&lt;/a&gt; have different signatures and implementations. Specifically, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; variants accept a second argument that is a mapping function that is invoked on every element of the typed array:</source>
          <target state="translated">该 &lt;code&gt;Buffer.from()&lt;/code&gt; 和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from&quot;&gt; &lt;code&gt;TypedArray.from()&lt;/code&gt; &lt;/a&gt;有不同的签名和实现。具体来说，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;变体接受第二个参数，该参数是在类型数组的每个元素上调用的映射函数：</target>
        </trans-unit>
        <trans-unit id="e3314f82d53657bb32c8b0bf63f070d1a392cb08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer.from()&lt;/code&gt; method, however, does not support the use of a mapping function:</source>
          <target state="translated">所述 &lt;code&gt;Buffer.from()&lt;/code&gt; 方法，但是，不支持使用的映射函数的：</target>
        </trans-unit>
        <trans-unit id="3d48187fc23c783eaffae70401964e0da90c39c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.</source>
          <target state="translated">该 &lt;code&gt;Buffer&lt;/code&gt; 类是用二进制数据直接处理全局类型。它可以以多种方式构造。</target>
        </trans-unit>
        <trans-unit id="585f3b86fff89664ab6131088e4c31921218b060" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; class is within the global scope, making it unlikely that one would need to ever use &lt;code&gt;require('buffer').Buffer&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Buffer&lt;/code&gt; 类是在全球范围内，因此不太可能是一个需要永远使用 &lt;code&gt;require('buffer').Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="684e7abad764687ae152e1366f4fcfb15875aae7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; module pre-allocates an internal &lt;code&gt;Buffer&lt;/code&gt; instance of size &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt; that is used as a pool for the fast allocation of new &lt;code&gt;Buffer&lt;/code&gt; instances created using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;code&gt;new Buffer(size)&lt;/code&gt; constructor only when &lt;code&gt;size&lt;/code&gt; is less than or equal to &lt;code&gt;Buffer.poolSize &amp;gt;&amp;gt; 1&lt;/code&gt; (floor of &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt; divided by two).</source>
          <target state="translated">所述 &lt;code&gt;Buffer&lt;/code&gt; 模块预分配的内部 &lt;code&gt;Buffer&lt;/code&gt; 大小的实例&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; &lt;/a&gt;被用作一个池为新的快速分配 &lt;code&gt;Buffer&lt;/code&gt; 实例使用创建&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;和弃用 &lt;code&gt;new Buffer(size)&lt;/code&gt; 的构造，只有当 &lt;code&gt;size&lt;/code&gt; 小于等于或等于 &lt;code&gt;Buffer.poolSize &amp;gt;&amp;gt; 1&lt;/code&gt; （&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; 的底数&lt;/a&gt;除以二）。</target>
        </trans-unit>
        <trans-unit id="c34c1579f9d3091d1c40fe60dbec8ff7528291ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; object's memory is copied to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;, not shared.</source>
          <target state="translated">该 &lt;code&gt;Buffer&lt;/code&gt; 对象的内存被复制到&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;，不共享。</target>
        </trans-unit>
        <trans-unit id="704b960d42ce6ee4bea2be6057aa3c3ef4d88b3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; object's memory is interpreted as an array of distinct elements, and not as a byte array of the target type. That is, &lt;code&gt;new Uint32Array(Buffer.from([1, 2, 3, 4]))&lt;/code&gt; creates a 4-element &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt;&lt;code&gt;Uint32Array&lt;/code&gt;&lt;/a&gt; with elements &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;, not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt;&lt;code&gt;Uint32Array&lt;/code&gt;&lt;/a&gt; with a single element &lt;code&gt;[0x1020304]&lt;/code&gt; or &lt;code&gt;[0x4030201]&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Buffer&lt;/code&gt; 对象的内存被解释为不同的元件的阵列，而不是作为目标类型的一个字节数组。也就是说， &lt;code&gt;new Uint32Array(Buffer.from([1, 2, 3, 4]))&lt;/code&gt; 创建了一个4元件&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt; &lt;code&gt;Uint32Array&lt;/code&gt; &lt;/a&gt;具有元素 &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt; ，而不是一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt; &lt;code&gt;Uint32Array&lt;/code&gt; &lt;/a&gt;与单个元素 &lt;code&gt;[0x1020304]&lt;/code&gt; 或 &lt;code&gt;[0x4030201]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11eb58ed11164726ce6d21f520f0f89a5b64939a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt;s class now inherits from &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Buffer&lt;/code&gt; 现在的类继承自 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0cf8ace03d30403e070d9de4de22190c4288a09e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CONNECT&lt;/code&gt; method is used to allow an HTTP/2 server to be used as a proxy for TCP/IP connections.</source>
          <target state="translated">该 &lt;code&gt;CONNECT&lt;/code&gt; 方法用于允许HTTP / 2服务器被用作用于TCP / IP连接的代理。</target>
        </trans-unit>
        <trans-unit id="961a4f20e145645fc8ffca7ac16191a131fc024d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ClientHttp2Stream&lt;/code&gt; class is an extension of &lt;code&gt;Http2Stream&lt;/code&gt; that is used exclusively on HTTP/2 Clients. &lt;code&gt;Http2Stream&lt;/code&gt; instances on the client provide events such as &lt;code&gt;'response'&lt;/code&gt; and &lt;code&gt;'push'&lt;/code&gt; that are only relevant on the client.</source>
          <target state="translated">所述 &lt;code&gt;ClientHttp2Stream&lt;/code&gt; 类是一个扩展 &lt;code&gt;Http2Stream&lt;/code&gt; 被专门用于对HTTP / 2客户端。客户端上的 &lt;code&gt;Http2Stream&lt;/code&gt; 实例提供仅与客户端相关的事件，例如 &lt;code&gt;'response'&lt;/code&gt; 和 &lt;code&gt;'push'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="237dfac99ceb30113262b74862ab7b982fdd765f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Console&lt;/code&gt; class can be used to create a simple logger with configurable output streams and can be accessed using either &lt;code&gt;require('console').Console&lt;/code&gt; or &lt;code&gt;console.Console&lt;/code&gt; (or their destructured counterparts):</source>
          <target state="translated">所述 &lt;code&gt;Console&lt;/code&gt; 类可用于创建具有可配置的输出流的简单记录器，并且可以使用任一访问 &lt;code&gt;require('console').Console&lt;/code&gt; 或 &lt;code&gt;console.Console&lt;/code&gt; （或它们的解构对应物）：</target>
        </trans-unit>
        <trans-unit id="b3479b91f4a9f06b22b5fca034870dcb3c3d2180" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Console&lt;/code&gt; constructor now supports an &lt;code&gt;options&lt;/code&gt; argument, and the &lt;code&gt;colorMode&lt;/code&gt; option was introduced.</source>
          <target state="translated">现在， &lt;code&gt;Console&lt;/code&gt; 构造函数支持 &lt;code&gt;options&lt;/code&gt; 参数，并且引入了 &lt;code&gt;colorMode&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="95647c259880f4c6867e28a035da609cf9f22a98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CryptoStream.prototype.readyState&lt;/code&gt; property was removed.</source>
          <target state="translated">该 &lt;code&gt;CryptoStream.prototype.readyState&lt;/code&gt; 移除属性。</target>
        </trans-unit>
        <trans-unit id="9e1415e933cffef1a94867e2ba597a959a2e5d9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DiffieHellman&lt;/code&gt; class is a utility for creating Diffie-Hellman key exchanges.</source>
          <target state="translated">该 &lt;code&gt;DiffieHellman&lt;/code&gt; 类是用于创建DiffieHellman密钥交换的工具。</target>
        </trans-unit>
        <trans-unit id="9548581b93240d640677667523fd0ee94db7798f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DiffieHellmanGroup&lt;/code&gt; class takes a well-known modp group as its argument but otherwise works the same as &lt;code&gt;DiffieHellman&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DiffieHellmanGroup&lt;/code&gt; 类将众所周知的modp组作为其参数，但其他方面与 &lt;code&gt;DiffieHellman&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="cec2a1fa9c52fe93d5184901be8bdb624d2dbeb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Domain&lt;/code&gt; class encapsulates the functionality of routing errors and uncaught exceptions to the active &lt;code&gt;Domain&lt;/code&gt; object.</source>
          <target state="translated">该 &lt;code&gt;Domain&lt;/code&gt; 类封装路由错误和未捕获的异常到活动的功能 &lt;code&gt;Domain&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="5c6c84190a5e08be666ab662c685f538c6bff7f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ECDH&lt;/code&gt; class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH) key exchanges.</source>
          <target state="translated">该 &lt;code&gt;ECDH&lt;/code&gt; 类是用于创建椭圆曲线的Diffie-Hellman（ECDH）密钥交换的工具。</target>
        </trans-unit>
        <trans-unit id="a60e7d3da510710daa286f535baa3630ec9f2729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; property specifies the number of stack frames collected by a stack trace (whether generated by &lt;code&gt;new Error().stack&lt;/code&gt; or &lt;code&gt;Error.captureStackTrace(obj)&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; 属性指定栈跟踪收集堆栈帧的数目（无论是通过产生 &lt;code&gt;new Error().stack&lt;/code&gt; 或 &lt;code&gt;Error.captureStackTrace(obj)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5591cd885f1b8837637fc0c070419a2cc4315071" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error&lt;/code&gt; names and messages are now properly compared</source>
          <target state="translated">该 &lt;code&gt;Error&lt;/code&gt; 的名称和消息是现在比较正确</target>
        </trans-unit>
        <trans-unit id="74c3defd6a5b6deb5cd891de560ee91dc83a92e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; calls all listeners synchronously in the order in which they were registered. This is important to ensure the proper sequencing of events and to avoid race conditions or logic errors. When appropriate, listener functions can switch to an asynchronous mode of operation using the &lt;code&gt;setImmediate()&lt;/code&gt; or &lt;code&gt;process.nextTick()&lt;/code&gt; methods:</source>
          <target state="translated">该 &lt;code&gt;EventEmitter&lt;/code&gt; 呼吁所有听众同步在它们注册的顺序。这对于确保事件的正确顺序并避免竞争条件或逻辑错误很重要。适当时，侦听器函数可以使用 &lt;code&gt;setImmediate()&lt;/code&gt; 或 &lt;code&gt;process.nextTick()&lt;/code&gt; 方法切换到异步操作模式：</target>
        </trans-unit>
        <trans-unit id="510d148ff0fbe98acf30ab9a2081857d2a93f0da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; class is defined and exposed by the &lt;code&gt;events&lt;/code&gt; module:</source>
          <target state="translated">所述 &lt;code&gt;EventEmitter&lt;/code&gt; 类被定义并暴露由所述 &lt;code&gt;events&lt;/code&gt; 模块：</target>
        </trans-unit>
        <trans-unit id="f6e23e7067c0e5dbaa40a250b4e464457e7b388e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; instance will emit its own &lt;code&gt;'newListener'&lt;/code&gt; event &lt;em&gt;before&lt;/em&gt; a listener is added to its internal array of listeners.</source>
          <target state="translated">在将侦听器添加到其内部侦听器数组&lt;em&gt;之前&lt;/em&gt;， &lt;code&gt;EventEmitter&lt;/code&gt; 实例将发出自己的 &lt;code&gt;'newListener'&lt;/code&gt; 事件。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dfeb1c49ebfaf5bf934d6b81d566edb3d8c7c526" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; has to support reading.</source>
          <target state="translated">该 &lt;code&gt;FileHandle&lt;/code&gt; 必须支持读取。</target>
        </trans-unit>
        <trans-unit id="0012f3238be8c04c425f3363b4025fdc1063a019" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; has to support writing.</source>
          <target state="translated">该 &lt;code&gt;FileHandle&lt;/code&gt; 必须支持写入。</target>
        </trans-unit>
        <trans-unit id="0c94a51970f81440252550d4c9273fb0d1f4f92b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; must have been opened for appending.</source>
          <target state="translated">该 &lt;code&gt;FileHandle&lt;/code&gt; 必须已打开追加。</target>
        </trans-unit>
        <trans-unit id="11154ab149b6892234ea37a705b7295182b7ed53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GLOBAL&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; aliases for the &lt;code&gt;global&lt;/code&gt; property are deprecated and should no longer be used.</source>
          <target state="translated">在 &lt;code&gt;GLOBAL&lt;/code&gt; 和 &lt;code&gt;root&lt;/code&gt; 别名为 &lt;code&gt;global&lt;/code&gt; 物业已过时，不应再使用。</target>
        </trans-unit>
        <trans-unit id="0e9e7f936801f2c6f1cd03b0afd04159b01fbe53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hash&lt;/code&gt; class is a utility for creating hash digests of data. It can be used in one of two ways:</source>
          <target state="translated">该 &lt;code&gt;Hash&lt;/code&gt; 类是用于创建数据的散列摘要的工具。可以通过以下两种方式之一使用它：</target>
        </trans-unit>
        <trans-unit id="5b0e3b2329da4f0248f2e06ac742acc1bb19364e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hash&lt;/code&gt; object can not be used again after &lt;code&gt;hash.digest()&lt;/code&gt; method has been called. Multiple calls will cause an error to be thrown.</source>
          <target state="translated">该 &lt;code&gt;Hash&lt;/code&gt; 对象不能之后再次使用 &lt;code&gt;hash.digest()&lt;/code&gt; 方法被调用。多次调用将引发错误。</target>
        </trans-unit>
        <trans-unit id="4d73cdb3a8800f6f58788222cf6b09a4e16e9704" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hmac&lt;/code&gt; class is a utility for creating cryptographic HMAC digests. It can be used in one of two ways:</source>
          <target state="translated">该 &lt;code&gt;Hmac&lt;/code&gt; 类是创建加密的HMAC摘要的工具。可以通过以下两种方式之一使用它：</target>
        </trans-unit>
        <trans-unit id="34a6f3c385334289cc8dca5ad57af1aa934cc351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hmac&lt;/code&gt; object can not be used again after &lt;code&gt;hmac.digest()&lt;/code&gt; has been called. Multiple calls to &lt;code&gt;hmac.digest()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">该 &lt;code&gt;Hmac&lt;/code&gt; 对象后不能再次使用 &lt;code&gt;hmac.digest()&lt;/code&gt; 被调用。多次调用 &lt;code&gt;hmac.digest()&lt;/code&gt; 将导致引发错误。</target>
        </trans-unit>
        <trans-unit id="fdd188407a46759b1ee1c35887ef9c7a825bdfd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; closed with a non-zero error code.</source>
          <target state="translated">所述 &lt;code&gt;Http2Session&lt;/code&gt; 封闭非零错误代码。</target>
        </trans-unit>
        <trans-unit id="5d76c8b39de5b7fc902fab8ede861ae4cc2fc88c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; instance will be shut down automatically when the &lt;code&gt;'goaway'&lt;/code&gt; event is emitted.</source>
          <target state="translated">该 &lt;code&gt;Http2Session&lt;/code&gt; 当实例将被自动关闭 &lt;code&gt;'goaway'&lt;/code&gt; 发出的事件。</target>
        </trans-unit>
        <trans-unit id="d7caf622fab7b5caf40c57aeb0f0bd26ae301dc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; settings canceled.</source>
          <target state="translated">该 &lt;code&gt;Http2Session&lt;/code&gt; 设置取消。</target>
        </trans-unit>
        <trans-unit id="51e143abb35647df3e2b943997a955c876171f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Stream&lt;/code&gt; class is a base for the &lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt;&lt;code&gt;ServerHttp2Stream&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt;&lt;code&gt;ClientHttp2Stream&lt;/code&gt;&lt;/a&gt; classes, each of which is used specifically by either the Server or Client side, respectively.</source>
          <target state="translated">所述 &lt;code&gt;Http2Stream&lt;/code&gt; 类是碱&lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt; &lt;code&gt;ServerHttp2Stream&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt; &lt;code&gt;ClientHttp2Stream&lt;/code&gt; &lt;/a&gt;类，其中的每一个分别由服务器或客户端，具体地使用。</target>
        </trans-unit>
        <trans-unit id="598e51e3af2bb4e6222164b78922892e71acb6ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MTU&lt;/code&gt; is the largest size a given link layer technology can support for datagram messages. For any link, &lt;code&gt;IPv4&lt;/code&gt; mandates a minimum &lt;code&gt;MTU&lt;/code&gt; of &lt;code&gt;68&lt;/code&gt; octets, while the recommended &lt;code&gt;MTU&lt;/code&gt; for IPv4 is &lt;code&gt;576&lt;/code&gt; (typically recommended as the &lt;code&gt;MTU&lt;/code&gt; for dial-up type applications), whether they arrive whole or in fragments.</source>
          <target state="translated">的 &lt;code&gt;MTU&lt;/code&gt; 是一个给定链路层技术可以为数据报消息支持的最大尺寸。对于任何链路， &lt;code&gt;IPv4&lt;/code&gt; 强制要求最小 &lt;code&gt;MTU&lt;/code&gt; 为 &lt;code&gt;68&lt;/code&gt; 个八位位组，而IPv4 的建议 &lt;code&gt;MTU&lt;/code&gt; 为 &lt;code&gt;576&lt;/code&gt; （通常建议作为拨号类型应用程序的 &lt;code&gt;MTU&lt;/code&gt; ），无论它们是整体到达还是分段到达。</target>
        </trans-unit>
        <trans-unit id="3d73d38a7b4edc972c4eca60995c75fac0b6f4da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module._debug()&lt;/code&gt; function was never documented as an officially supported API.</source>
          <target state="translated">从未将 &lt;code&gt;Module._debug()&lt;/code&gt; 函数记录为官方支持的API。</target>
        </trans-unit>
        <trans-unit id="3902051e46408eac3f37f5cbedc575dbfa43f481" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module&lt;/code&gt; Object</source>
          <target state="translated">该 &lt;code&gt;Module&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="91d8733f70a3ed59c4e362014169d60d93f70694" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module&lt;/code&gt; object representing the entry script loaded when the Node.js process launched. See &lt;a href=&quot;#modules_accessing_the_main_module&quot;&gt;&quot;Accessing the main module&quot;&lt;/a&gt;.</source>
          <target state="translated">表示启动Node.js进程时加载的入口脚本的 &lt;code&gt;Module&lt;/code&gt; 对象。请参阅&lt;a href=&quot;#modules_accessing_the_main_module&quot;&gt;&amp;ldquo;访问主模块&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f548961702fbdaa669c57caf04ec1584e86af9ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NODE_REPL_HISTORY_FILE&lt;/code&gt; environment variable was removed. Please use &lt;code&gt;NODE_REPL_HISTORY&lt;/code&gt; instead.</source>
          <target state="translated">该 &lt;code&gt;NODE_REPL_HISTORY_FILE&lt;/code&gt; 移除环境变量。请改用 &lt;code&gt;NODE_REPL_HISTORY&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07a5ed6c3b03bfe0f86b3d27a6b9e92fabe92726" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NODE_REPL_MODE&lt;/code&gt; environment variable is used to set the underlying &lt;code&gt;replMode&lt;/code&gt; of an interactive &lt;code&gt;node&lt;/code&gt; session. Its value, &lt;code&gt;magic&lt;/code&gt;, is also removed. Please use &lt;code&gt;sloppy&lt;/code&gt; instead.</source>
          <target state="translated">所述 &lt;code&gt;NODE_REPL_MODE&lt;/code&gt; 环境变量用于设置底层 &lt;code&gt;replMode&lt;/code&gt; 交互式的 &lt;code&gt;node&lt;/code&gt; 会话。它的值 &lt;code&gt;magic&lt;/code&gt; 也会被删除。请改用 &lt;code&gt;sloppy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f57d31fa24c9ab8fa6b54112c6d279905574a10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NaN&lt;/code&gt; is now compared using the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevaluezero&quot;&gt;SameValueZero&lt;/a&gt; comparison.</source>
          <target state="translated">该 &lt;code&gt;NaN&lt;/code&gt; 的现在使用比较&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevaluezero&quot;&gt;SameValueZero&lt;/a&gt;比较。</target>
        </trans-unit>
        <trans-unit id="f25d757bb0437c0808e30a2c56e76be0fefee1b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; and &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; properties were never documented as officially supported properties.</source>
          <target state="translated">从未将 &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; 和 &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; 属性记录为正式支持的属性。</target>
        </trans-unit>
        <trans-unit id="25fe5fbbbdb21df3c56b73ffd31d112176c4a754" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype._renderHeaders&lt;/code&gt; property was never documented as an officially supported API.</source>
          <target state="translated">从未将 &lt;code&gt;OutgoingMessage.prototype._renderHeaders&lt;/code&gt; 属性记录为官方支持的API。</target>
        </trans-unit>
        <trans-unit id="85be1dae89516e838a638d632c276365895d2cca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype.flush()&lt;/code&gt; method is deprecated. Use &lt;code&gt;OutgoingMessage.prototype.flushHeaders()&lt;/code&gt; instead.</source>
          <target state="translated">所述 &lt;code&gt;OutgoingMessage.prototype.flush()&lt;/code&gt; 方法被弃用。请改用 &lt;code&gt;OutgoingMessage.prototype.flushHeaders()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7583c7bd3ce3415e55d127bad13f53b600328ee0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Payload Length&lt;/code&gt; field is &lt;code&gt;16 bits&lt;/code&gt; wide, which means that a normal payload exceed 64K octets &lt;em&gt;including&lt;/em&gt; the internet header and data (65,507 bytes = 65,535 &amp;minus; 8 bytes UDP header &amp;minus; 20 bytes IP header); this is generally true for loopback interfaces, but such long datagram messages are impractical for most hosts and networks.</source>
          <target state="translated">的 &lt;code&gt;Payload Length&lt;/code&gt; 字段是 &lt;code&gt;16 bits&lt;/code&gt; 宽，这意味着正常有效载荷超过64K个八位位组&lt;em&gt;，包括&lt;/em&gt;互联网头和数据（65507个字节= 65535 - 8字节的UDP头- 20个字节的IP报头）; 对于环回接口通常是这样，但是对于大多数主机和网络来说，如此长的数据报消息是不切实际的。</target>
        </trans-unit>
        <trans-unit id="11322df6e8f3a45b7544ddbfd8fe2899ff90b6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; class is used to provide access to the &lt;code&gt;PerformanceEntry&lt;/code&gt; instances passed to a &lt;code&gt;PerformanceObserver&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; 类用于提供通向 &lt;code&gt;PerformanceEntry&lt;/code&gt; 传递给实例 &lt;code&gt;PerformanceObserver&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2150c40d137a3a78d9e3de9caaadd190bb01b4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is not necessarily fulfilled or rejected at this point if the &lt;code&gt;Promise&lt;/code&gt; was resolved by assuming the state of another &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;Promise&lt;/code&gt; 不一定兑现或在这一点拒绝，如果 &lt;code&gt;Promise&lt;/code&gt; 被冒用他人的状态解决 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f10ae6e72704999927267fee59194a33c04c7c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffer&lt;/code&gt; property containing a reference to the &lt;code&gt;buffer&lt;/code&gt; written.</source>
          <target state="translated">该 &lt;code&gt;Promise&lt;/code&gt; 通过一个对象进行解析，该对象包含一个 &lt;code&gt;bytesWritten&lt;/code&gt; 属性，该属性标识所写入的字节数，而 &lt;code&gt;buffer&lt;/code&gt; 属性包含对所写入 &lt;code&gt;buffer&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="c3eb603b33fa227474bbe36e7372860ecd829661" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffer&lt;/code&gt; property containing a reference to the &lt;code&gt;string&lt;/code&gt; written.</source>
          <target state="translated">该 &lt;code&gt;Promise&lt;/code&gt; 通过一个对象进行解析，该对象包含一个 &lt;code&gt;bytesWritten&lt;/code&gt; 属性（用于标识所写入的字节数），以及一个 &lt;code&gt;buffer&lt;/code&gt; 属性，该属性包含对所写入 &lt;code&gt;string&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="825a385ef4de609d746584469c7c195733f4d069" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffers&lt;/code&gt; property containing a reference to the &lt;code&gt;buffers&lt;/code&gt; input.</source>
          <target state="translated">该 &lt;code&gt;Promise&lt;/code&gt; 通过一个对象进行解析，该对象包含一个 &lt;code&gt;bytesWritten&lt;/code&gt; 属性（用于标识写入的字节数），以及一个 &lt;code&gt;buffers&lt;/code&gt; 属性，该属性包含对 &lt;code&gt;buffers&lt;/code&gt; 输入的引用。</target>
        </trans-unit>
        <trans-unit id="7ad21b404605628659537719b01daa3fa49e3b78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object for the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">使用给定 &lt;code&gt;path&lt;/code&gt; 的&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;对象解析 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b34c55f6af90344499f9227fbf0f7703ad16276b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with the contents of the file. If no encoding is specified (using &lt;code&gt;options.encoding&lt;/code&gt;), the data is returned as a &lt;code&gt;Buffer&lt;/code&gt; object. Otherwise, the data will be a string.</source>
          <target state="translated">使用文件的内容解决了 &lt;code&gt;Promise&lt;/code&gt; 。如果未指定编码（使用 &lt;code&gt;options.encoding&lt;/code&gt; ），则数据作为 &lt;code&gt;Buffer&lt;/code&gt; 对象返回。否则，数据将为字符串。</target>
        </trans-unit>
        <trans-unit id="d92a386de646198c7629bbf0e8bcfcbbee8353a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; object would have previously been emitted in an &lt;code&gt;'unhandledRejection'&lt;/code&gt; event, but during the course of processing gained a rejection handler.</source>
          <target state="translated">的 &lt;code&gt;Promise&lt;/code&gt; 对象将先前已发出在 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 的事件，但处理获得了拒绝处理程序过程中。</target>
        </trans-unit>
        <trans-unit id="95b84d2eeaef21bd512e6f651c98a85d0c11f349" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPLServer.bufferedCommand&lt;/code&gt; property was deprecated in favor of &lt;a href=&quot;repl#repl_replserver_clearbufferedcommand&quot;&gt;&lt;code&gt;REPLServer.clearBufferedCommand()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;REPLServer.bufferedCommand&lt;/code&gt; 属性，而不赞成的&lt;a href=&quot;repl#repl_replserver_clearbufferedcommand&quot;&gt; &lt;code&gt;REPLServer.clearBufferedCommand()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7deb4358683108a00dc65d360c2e1eea2ad2e71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPLServer.prototype.convertToContext()&lt;/code&gt; API has been removed.</source>
          <target state="translated">该 &lt;code&gt;REPLServer.prototype.convertToContext()&lt;/code&gt; API已被删除。</target>
        </trans-unit>
        <trans-unit id="8ec680d58ff39833b259e02131642979355b3954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPL_MAGIC_MODE&lt;/code&gt;&lt;code&gt;replMode&lt;/code&gt; was removed.</source>
          <target state="translated">该 &lt;code&gt;REPL_MAGIC_MODE&lt;/code&gt; &lt;code&gt;replMode&lt;/code&gt; 被删除。</target>
        </trans-unit>
        <trans-unit id="35cb8009f6996f2fb52a4b2bab6a52d304d25322" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; can switch back to paused mode using one of the following:</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; 可以使用以下方法之一切换回暂停模式：</target>
        </trans-unit>
        <trans-unit id="d455be01e46d6bff48f7600c93471266c9edc7cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; stream API evolved across multiple Node.js versions and provides multiple methods of consuming stream data. In general, developers should choose &lt;em&gt;one&lt;/em&gt; of the methods of consuming data and &lt;em&gt;should never&lt;/em&gt; use multiple methods to consume data from a single stream. Specifically, using a combination of &lt;code&gt;on('data')&lt;/code&gt;, &lt;code&gt;on('readable')&lt;/code&gt;, &lt;code&gt;pipe()&lt;/code&gt;, or async iterators could lead to unintuitive behavior.</source>
          <target state="translated">的 &lt;code&gt;Readable&lt;/code&gt; 流API跨多个版本的Node.js演变，并提供消耗的流数据的多种方法。通常，开发人员应选择&lt;em&gt;一种&lt;/em&gt;使用数据的方法，并且&lt;em&gt;切勿&lt;/em&gt;使用多种方法从单个流中使用数据。具体来说，结合使用 &lt;code&gt;on('data')&lt;/code&gt; ， &lt;code&gt;on('readable')&lt;/code&gt; ， &lt;code&gt;pipe()&lt;/code&gt; 或异步迭代器可能会导致不直观的行为。</target>
        </trans-unit>
        <trans-unit id="dc6ef70e5e44b5c5fd7cbeb40c7b98befd8c1d32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; stream will properly handle multi-byte characters delivered through the stream that would otherwise become improperly decoded if simply pulled from the stream as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">该 &lt;code&gt;Readable&lt;/code&gt; 流会妥善处理，否则将成为不正确解码。如果简单地从流拉为流传送多字节字符 &lt;code&gt;Buffer&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="ba77f1dd7afa6162e4c23e525d9abfc526ccbe76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Server.listenFD()&lt;/code&gt; method was deprecated and removed. Please use &lt;a href=&quot;net#net_server_listen_handle_backlog_callback&quot;&gt;&lt;code&gt;Server.listen({fd: &amp;lt;number&amp;gt;})&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">所述 &lt;code&gt;Server.listenFD()&lt;/code&gt; 方法被废弃并除去。请改用&lt;a href=&quot;net#net_server_listen_handle_backlog_callback&quot;&gt; &lt;code&gt;Server.listen({fd: &amp;lt;number&amp;gt;})&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e5bbee4c5ac3953d02808c1af81a251e062b54bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServerHttp2Stream&lt;/code&gt; class is an extension of &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; that is used exclusively on HTTP/2 Servers. &lt;code&gt;Http2Stream&lt;/code&gt; instances on the server provide additional methods such as &lt;code&gt;http2stream.pushStream()&lt;/code&gt; and &lt;code&gt;http2stream.respond()&lt;/code&gt; that are only relevant on the server.</source>
          <target state="translated">所述 &lt;code&gt;ServerHttp2Stream&lt;/code&gt; 类是一个扩展&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;被专门用于对HTTP / 2服务器。服务器上的 &lt;code&gt;Http2Stream&lt;/code&gt; 实例提供仅在服务器上相关的其他方法，例如 &lt;code&gt;http2stream.pushStream()&lt;/code&gt; 和 &lt;code&gt;http2stream.respond()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="260f5173c9b0e346f6c8e494ec720490f9e8f18d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; method was never documented as an officially supported API.</source>
          <target state="translated">从未将 &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; 方法记录为官方支持的API。</target>
        </trans-unit>
        <trans-unit id="d6322d71cca5de7fd95668cd54c4afd6280dda05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; content is also compared</source>
          <target state="translated">该 &lt;code&gt;Set&lt;/code&gt; 和 &lt;code&gt;Map&lt;/code&gt; 的内容还比较</target>
        </trans-unit>
        <trans-unit id="2bb21f70161ab7849ecd22c378497788620b4580" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sign&lt;/code&gt; class is a utility for generating signatures. It can be used in one of two ways:</source>
          <target state="translated">该 &lt;code&gt;Sign&lt;/code&gt; 类是用于生成签名的工具。可以通过以下两种方式之一使用它：</target>
        </trans-unit>
        <trans-unit id="763e027dea1785f195a0fb8439e7699ec0a13aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sign&lt;/code&gt; object can not be again used after &lt;code&gt;sign.sign()&lt;/code&gt; method has been called. Multiple calls to &lt;code&gt;sign.sign()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">该 &lt;code&gt;Sign&lt;/code&gt; 对象不能之后再次使用 &lt;code&gt;sign.sign()&lt;/code&gt; 方法被调用。多次调用 &lt;code&gt;sign.sign()&lt;/code&gt; 将导致引发错误。</target>
        </trans-unit>
        <trans-unit id="067224cdaedb01555047e368ecfaed450b4b9d71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; is not part of this graph, even though it was the reason for &lt;code&gt;console.log()&lt;/code&gt; being called. This is because binding to a port without a hostname is a &lt;em&gt;synchronous&lt;/em&gt; operation, but to maintain a completely asynchronous API the user's callback is placed in a &lt;code&gt;process.nextTick()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; 是不是这个图的一部分，即使它是原因 &lt;code&gt;console.log()&lt;/code&gt; 被调用。这是因为绑定到没有主机名的端口是&lt;em&gt;同步&lt;/em&gt;操作，但是为了维护完全异步的API，用户的回调将放置在 &lt;code&gt;process.nextTick()&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="97bc03b082ece96085c82400600ceae8fe714235" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; is the server which receives the connections.</source>
          <target state="translated">所述 &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; 是接收的连接服务器。</target>
        </trans-unit>
        <trans-unit id="fc1c7554594dc402923925ed657aa3cde810e524" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPWRAP&lt;/code&gt; is the new connection from the client. When a new connection is made, the &lt;code&gt;TCPWrap&lt;/code&gt; instance is immediately constructed. This happens outside of any JavaScript stack. (An &lt;code&gt;executionAsyncId()&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; means that it is being executed from C++ with no JavaScript stack above it.) With only that information, it would be impossible to link resources together in terms of what caused them to be created, so &lt;code&gt;triggerAsyncId&lt;/code&gt; is given the task of propagating what resource is responsible for the new resource's existence.</source>
          <target state="translated">该 &lt;code&gt;TCPWRAP&lt;/code&gt; 是来自客户端的新连接。建立新连接后，将立即构造 &lt;code&gt;TCPWrap&lt;/code&gt; 实例。这发生在任何JavaScript堆栈之外。（ &lt;code&gt;executionAsyncId()&lt;/code&gt; 为 &lt;code&gt;0&lt;/code&gt; 表示它是从C ++执行的，上面没有JavaScript堆栈。）仅具有该信息，就无法将导致资源创建的原因链接在一起，因此给出了 &lt;code&gt;triggerAsyncId&lt;/code&gt; 传播什么资源负责新资源的存在的任务。</target>
        </trans-unit>
        <trans-unit id="c8b4a848ccb8bd223a9110350ff0ff3b72da2390" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextDecoder&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">该 &lt;code&gt;TextDecoder&lt;/code&gt; 类也可在全局对象上。</target>
        </trans-unit>
        <trans-unit id="4386ce8178a330d40567e2509372c3cf7b2a95a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextEncoder&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">该 &lt;code&gt;TextEncoder&lt;/code&gt; 类也可在全局对象上。</target>
        </trans-unit>
        <trans-unit id="15b7afb5cb9a7558bf2c7c32915c8456523d10ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tracing&lt;/code&gt; object is used to enable or disable tracing for sets of categories. Instances are created using the &lt;code&gt;trace_events.createTracing()&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;Tracing&lt;/code&gt; 对象用于启用或套类禁用跟踪。使用 &lt;code&gt;trace_events.createTracing()&lt;/code&gt; 方法创建实例。</target>
        </trans-unit>
        <trans-unit id="02f95b3badbd05241aa901e088ab499ccb3aac01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Trailer&lt;/code&gt; header was set even though the transfer encoding does not support that.</source>
          <target state="translated">该 &lt;code&gt;Trailer&lt;/code&gt; 头设置，即使传输编码不支持。</target>
        </trans-unit>
        <trans-unit id="aa40c498c08a9c2a43b3f98536108d6c36888450" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URLSearchParams&lt;/code&gt; API provides read and write access to the query of a &lt;code&gt;URL&lt;/code&gt;. The &lt;code&gt;URLSearchParams&lt;/code&gt; class can also be used standalone with one of the four following constructors. The &lt;code&gt;URLSearchParams&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">该 &lt;code&gt;URLSearchParams&lt;/code&gt; API提供了读取和一的查询写访问 &lt;code&gt;URL&lt;/code&gt; 。该 &lt;code&gt;URLSearchParams&lt;/code&gt; 类也可以单独使用与四个下面的构造函数。该 &lt;code&gt;URLSearchParams&lt;/code&gt; 类也可在全局对象上。</target>
        </trans-unit>
        <trans-unit id="0bdbb24616ccb50106340987aec8e6ea082fa341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Verify&lt;/code&gt; class is a utility for verifying signatures. It can be used in one of two ways:</source>
          <target state="translated">该 &lt;code&gt;Verify&lt;/code&gt; 类是验证签名的工具。可以通过以下两种方式之一使用它：</target>
        </trans-unit>
        <trans-unit id="5383ec704ee7dc45a94fb456043b3654dc8669de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakMap&lt;/code&gt; and &lt;code&gt;WeakSet&lt;/code&gt; entries can now be inspected as well.</source>
          <target state="translated">该 &lt;code&gt;WeakMap&lt;/code&gt; 和 &lt;code&gt;WeakSet&lt;/code&gt; 条目现在可以检查为好。</target>
        </trans-unit>
        <trans-unit id="9b55d7cf0291e64976ef5c1cd7ee77b82c96e07b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Worker&lt;/code&gt; class represents an independent JavaScript execution thread. Most Node.js APIs are available inside of it.</source>
          <target state="translated">该 &lt;code&gt;Worker&lt;/code&gt; 类代表一个独立的JavaScript执行线程。大多数Node.js API都在其中可用。</target>
        </trans-unit>
        <trans-unit id="debf2dcd1404efcdcc721a3846b17e40ea921f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_channel&lt;/code&gt; property of child process objects returned by &lt;code&gt;spawn()&lt;/code&gt; and similar functions is not intended for public use. Use &lt;code&gt;ChildProcess.channel&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;spawn()&lt;/code&gt; 和类似函数返回的子流程对象的 &lt;code&gt;_channel&lt;/code&gt; 属性不适合公共使用。请改用 &lt;code&gt;ChildProcess.channel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5075c4bc60a5cfdceb4a171eb24743398afe3236" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_destroy()&lt;/code&gt; method is called by &lt;a href=&quot;#stream_readable_destroy_error&quot;&gt;&lt;code&gt;readable.destroy()&lt;/code&gt;&lt;/a&gt;. It can be overridden by child classes but it &lt;strong&gt;must not&lt;/strong&gt; be called directly.</source>
          <target state="translated">所述 &lt;code&gt;_destroy()&lt;/code&gt; 方法的调用&lt;a href=&quot;#stream_readable_destroy_error&quot;&gt; &lt;code&gt;readable.destroy()&lt;/code&gt; &lt;/a&gt;。子类可以覆盖它，但是&lt;strong&gt;不能&lt;/strong&gt;直接调用它。</target>
        </trans-unit>
        <trans-unit id="8e72d0f6fb0b490c3fdabbf1b786ae5d46602187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_destroy()&lt;/code&gt; method is called by &lt;a href=&quot;#stream_writable_destroy_error&quot;&gt;&lt;code&gt;writable.destroy()&lt;/code&gt;&lt;/a&gt;. It can be overridden by child classes but it &lt;strong&gt;must not&lt;/strong&gt; be called directly.</source>
          <target state="translated">所述 &lt;code&gt;_destroy()&lt;/code&gt; 方法的调用&lt;a href=&quot;#stream_writable_destroy_error&quot;&gt; &lt;code&gt;writable.destroy()&lt;/code&gt; &lt;/a&gt;。子类可以覆盖它，但是&lt;strong&gt;不能&lt;/strong&gt;直接调用它。</target>
        </trans-unit>
        <trans-unit id="84dfdbc1e4803c46906daad4e04f8b1930dfa32d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_final()&lt;/code&gt; method &lt;strong&gt;must not&lt;/strong&gt; be called directly. It may be implemented by child classes, and if so, will be called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="translated">所述 &lt;code&gt;_final()&lt;/code&gt; 方法&lt;strong&gt;不能&lt;/strong&gt;直接调用。它可以由子类实现，如果是，则只能由内部 &lt;code&gt;Writable&lt;/code&gt; 类方法调用。</target>
        </trans-unit>
        <trans-unit id="6481baedf3e3bdf741a09ffad002a9db9f046d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linklist&lt;/code&gt; module is deprecated. Please use a userland alternative.</source>
          <target state="translated">该 &lt;code&gt;_linklist&lt;/code&gt; 模块已被弃用。请使用userland替代方法。</target>
        </trans-unit>
        <trans-unit id="60118404f8ad4fa8dd8afc9f383d20f4a34244eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_stream_wrap&lt;/code&gt; module is deprecated.</source>
          <target state="translated">该 &lt;code&gt;_stream_wrap&lt;/code&gt; 模块已被弃用。</target>
        </trans-unit>
        <trans-unit id="ce85dabf9709d0fdeca06663508b85b7d88af6c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_writableState.buffer&lt;/code&gt; property is deprecated. Use the &lt;code&gt;_writableState.getBuffer()&lt;/code&gt; method instead.</source>
          <target state="translated">该 &lt;code&gt;_writableState.buffer&lt;/code&gt; 属性已被弃用。请改用 &lt;code&gt;_writableState.getBuffer()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="17864e9884718d6d34787016fba6b3c036adf024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aborted&lt;/code&gt; property is no longer a timestamp number.</source>
          <target state="translated">已 &lt;code&gt;aborted&lt;/code&gt; 属性不再是时间戳记号。</target>
        </trans-unit>
        <trans-unit id="523d60058c4d000c1f8113952c6858ae8be22de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;address&lt;/code&gt; argument is a string. If the value of &lt;code&gt;address&lt;/code&gt; is a host name, DNS will be used to resolve the address of the host. If &lt;code&gt;address&lt;/code&gt; is not provided or otherwise falsy, &lt;code&gt;'127.0.0.1'&lt;/code&gt; (for &lt;code&gt;udp4&lt;/code&gt; sockets) or &lt;code&gt;'::1'&lt;/code&gt; (for &lt;code&gt;udp6&lt;/code&gt; sockets) will be used by default.</source>
          <target state="translated">该 &lt;code&gt;address&lt;/code&gt; 参数是一个字符串。如果 &lt;code&gt;address&lt;/code&gt; 的值是主机名，则将使用DNS解析主机的地址。如果未提供 &lt;code&gt;address&lt;/code&gt; 或其他错误，默认情况下将使用 &lt;code&gt;'127.0.0.1'&lt;/code&gt; （对于 &lt;code&gt;udp4&lt;/code&gt; 套接字）或 &lt;code&gt;'::1'&lt;/code&gt; （对于 &lt;code&gt;udp6&lt;/code&gt; 套接字）。</target>
        </trans-unit>
        <trans-unit id="0c15e300f4f1ce65070e7ce40a6d7a8e129b3ea0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;address&lt;/code&gt; parameter is always optional now.</source>
          <target state="translated">现在， &lt;code&gt;address&lt;/code&gt; 参数始终是可选的。</target>
        </trans-unit>
        <trans-unit id="7e65a68e4b6dbb69fc77cbd51e46debd22b71448" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addressType&lt;/code&gt; is one of:</source>
          <target state="translated">该 &lt;code&gt;addressType&lt;/code&gt; 为以下之一：</target>
        </trans-unit>
        <trans-unit id="c6af5995c277a4d9845542e6926ac54af7d4e41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;algorithm&lt;/code&gt; is dependent on OpenSSL, examples are &lt;code&gt;'aes192'&lt;/code&gt;, etc. On recent OpenSSL releases, &lt;code&gt;openssl list -cipher-algorithms&lt;/code&gt; (&lt;code&gt;openssl list-cipher-algorithms&lt;/code&gt; for older versions of OpenSSL) will display the available cipher algorithms.</source>
          <target state="translated">该 &lt;code&gt;algorithm&lt;/code&gt; 取决于OpenSSL，例如 &lt;code&gt;'aes192'&lt;/code&gt; 等。在最新的OpenSSL发行版中， &lt;code&gt;openssl list -cipher-algorithms&lt;/code&gt; （对于较旧版本的OpenSSL， &lt;code&gt;openssl list-cipher-algorithms&lt;/code&gt; ）将显示可用的密码算法。</target>
        </trans-unit>
        <trans-unit id="5cf75b3efb8f1b7be9a886e494566b373165e669" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;algorithm&lt;/code&gt; is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are &lt;code&gt;'sha256'&lt;/code&gt;, &lt;code&gt;'sha512'&lt;/code&gt;, etc. On recent releases of OpenSSL, &lt;code&gt;openssl list -digest-algorithms&lt;/code&gt; (&lt;code&gt;openssl list-message-digest-algorithms&lt;/code&gt; for older versions of OpenSSL) will display the available digest algorithms.</source>
          <target state="translated">该 &lt;code&gt;algorithm&lt;/code&gt; 取决于平台上OpenSSL版本支持的可用算法。示例为 &lt;code&gt;'sha256'&lt;/code&gt; ， &lt;code&gt;'sha512'&lt;/code&gt; 等。在OpenSSL的最新版本中， &lt;code&gt;openssl list -digest-algorithms&lt;/code&gt; （对于较旧版本的OpenSSL， &lt;code&gt;openssl list-message-digest-algorithms&lt;/code&gt; ）将显示可用的摘要算法。</target>
        </trans-unit>
        <trans-unit id="bb522ecae4930018820842e1866a5f7f41282121" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;all&lt;/code&gt; option is supported now.</source>
          <target state="translated">在 &lt;code&gt;all&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="fe34a1e6e8c173cd3e3b36c3c3fe5e15935de821" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alt&lt;/code&gt; and origin string &lt;em&gt;must&lt;/em&gt; contain only ASCII bytes and are strictly interpreted as a sequence of ASCII bytes. The special value &lt;code&gt;'clear'&lt;/code&gt; may be passed to clear any previously set alternative service for a given domain.</source>
          <target state="translated">该 &lt;code&gt;alt&lt;/code&gt; 和起源字符串&lt;em&gt;必须&lt;/em&gt;只包含ASCII字节都严格解释为ASCII字节序列。可以传递特殊值 &lt;code&gt;'clear'&lt;/code&gt; 以清除给定域的任何先前设置的替代服务。</target>
        </trans-unit>
        <trans-unit id="c533ce6fc04b00d6aa6151f9b741b524ad6aab18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argv0&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;argv0&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="d455d0ed53effe3b25db43d1fe5eecafa0a53ae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;as+&lt;/code&gt; modes are supported now.</source>
          <target state="translated">该 &lt;code&gt;as&lt;/code&gt; 和 &lt;code&gt;as+&lt;/code&gt; 模式现在支持。</target>
        </trans-unit>
        <trans-unit id="25878abdfa306ca7e7dc57e75fe59999862d0b04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert.ok()&lt;/code&gt; (no arguments) will now use a predefined error message.</source>
          <target state="translated">该 &lt;code&gt;assert.ok()&lt;/code&gt; （无参数）现在将使用预定义的错误消息。</target>
        </trans-unit>
        <trans-unit id="bf53a8640f6c440fb3875834f8fcdab85c39b1b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert&lt;/code&gt; module provides a set of assertion functions for verifying invariants. The module provides a recommended &lt;a href=&quot;#assert_strict_mode&quot;&gt;&lt;code&gt;strict&lt;/code&gt; mode&lt;/a&gt; and a more lenient legacy mode.</source>
          <target state="translated">该 &lt;code&gt;assert&lt;/code&gt; 模块提供用于验证不变量的一组断言功能。该模块提供了建议的&lt;a href=&quot;#assert_strict_mode&quot;&gt; &lt;code&gt;strict&lt;/code&gt; 模式&lt;/a&gt;和更宽松的旧模式。</target>
        </trans-unit>
        <trans-unit id="a6e4e80944c676b9dad7cb6791bc191cf400c222" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_hooks&lt;/code&gt; module provides an API to register callbacks tracking the lifetime of asynchronous resources created inside a Node.js application. It can be accessed using:</source>
          <target state="translated">所述 &lt;code&gt;async_hooks&lt;/code&gt; 模块提供一个API来注册回调跟踪的Node.js应用内部产生异步资源的寿命。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="4ed6459e77932d2b602c852c8885a4589027cf94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_resource_name&lt;/code&gt; identifier is provided by the user and should be representative of the type of async work being performed. It is also recommended to apply namespacing to the identifier, e.g. by including the module name. See the &lt;a href=&quot;async_hooks#async_hooks_type&quot;&gt;&lt;code&gt;async_hooks&lt;/code&gt; documentation&lt;/a&gt; for more information.</source>
          <target state="translated">所述 &lt;code&gt;async_resource_name&lt;/code&gt; 正在执行标识符由用户提供的和应该代表异步工作的类型。还建议对标识符使用命名空间，例如，通过包含模块名称。有关更多信息，请参见&lt;a href=&quot;async_hooks#async_hooks_type&quot;&gt; &lt;code&gt;async_hooks&lt;/code&gt; 文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d33f473978e21b579a16a230075abfec085ea1a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atime&lt;/code&gt; and &lt;code&gt;mtime&lt;/code&gt; arguments follow these rules:</source>
          <target state="translated">该 &lt;code&gt;atime&lt;/code&gt; 和 &lt;code&gt;mtime&lt;/code&gt; 参数遵循下列规则：</target>
        </trans-unit>
        <trans-unit id="449376bcbb92e36dfd1c08d24ffab6c86585eab0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atimeMs&lt;/code&gt;, &lt;code&gt;mtimeMs&lt;/code&gt;, &lt;code&gt;ctimeMs&lt;/code&gt;, &lt;code&gt;birthtimeMs&lt;/code&gt; properties are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;numbers&lt;/a&gt; that hold the corresponding times in milliseconds. Their precision is platform specific. &lt;code&gt;atime&lt;/code&gt;, &lt;code&gt;mtime&lt;/code&gt;, &lt;code&gt;ctime&lt;/code&gt;, and &lt;code&gt;birthtime&lt;/code&gt; are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object alternate representations of the various times. The &lt;code&gt;Date&lt;/code&gt; and number values are not connected. Assigning a new number value, or mutating the &lt;code&gt;Date&lt;/code&gt; value, will not be reflected in the corresponding alternate representation.</source>
          <target state="translated">该 &lt;code&gt;atimeMs&lt;/code&gt; ， &lt;code&gt;mtimeMs&lt;/code&gt; ， &lt;code&gt;ctimeMs&lt;/code&gt; ， &lt;code&gt;birthtimeMs&lt;/code&gt; 性质&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;的数字&lt;/a&gt;，在毫秒持有相应的时间。它们的精度取决于平台。 &lt;code&gt;atime&lt;/code&gt; ， &lt;code&gt;mtime&lt;/code&gt; ， &lt;code&gt;ctime&lt;/code&gt; 和 &lt;code&gt;birthtime&lt;/code&gt; 是各个时间的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;对象的备用表示形式。该 &lt;code&gt;Date&lt;/code&gt; 和数值未连接。分配新的数字值或更改 &lt;code&gt;Date&lt;/code&gt; 值将不会反映在相应的备用表示形式中。</target>
        </trans-unit>
        <trans-unit id="d1fb10de5b21bd96b1861ce448f3dabf1c6cc6ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; fields are now kept intact when &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; refer to the same host.</source>
          <target state="translated">该 &lt;code&gt;auth&lt;/code&gt; 现在字段保持不变时， &lt;code&gt;from&lt;/code&gt; 和 &lt;code&gt;to&lt;/code&gt; 指代相同的主机。</target>
        </trans-unit>
        <trans-unit id="4953e8b11cad93b7b9ea12f21981198e9f7d206b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; fields is cleared now the &lt;code&gt;to&lt;/code&gt; parameter contains a hostname.</source>
          <target state="translated">现在， &lt;code&gt;to&lt;/code&gt; 参数包含主机名， &lt;code&gt;auth&lt;/code&gt; 字段已清除。</target>
        </trans-unit>
        <trans-unit id="2cb6e6c52db18c0a11d623417542b47591dd51a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; property is the username and password portion of the URL, also referred to as &lt;em&gt;userinfo&lt;/em&gt;. This string subset follows the &lt;code&gt;protocol&lt;/code&gt; and double slashes (if present) and precedes the &lt;code&gt;host&lt;/code&gt; component, delimited by &lt;code&gt;@&lt;/code&gt;. The string is either the username, or it is the username and password separated by &lt;code&gt;:&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;auth&lt;/code&gt; 属性是该URL的用户名和密码部分，也被称为&lt;em&gt;用户信息&lt;/em&gt;。此字符串子集遵循 &lt;code&gt;protocol&lt;/code&gt; 和双斜杠（如果存在），并位于 &lt;code&gt;host&lt;/code&gt; 组件之前，并以 &lt;code&gt;@&lt;/code&gt; 分隔。字符串可以是用户名，也可以是用户名和密码，以 &lt;code&gt;:&lt;/code&gt; 分隔。</target>
        </trans-unit>
        <trans-unit id="1f38f1de37b0bf494f218ed7c511911f13fa69ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authTagLength&lt;/code&gt; option can now be used to produce shorter authentication tags in GCM mode and defaults to 16 bytes.</source>
          <target state="translated">该 &lt;code&gt;authTagLength&lt;/code&gt; 选项现在可以用于生产在GCM模式更短的认证标签，缺省值为16个字节。</target>
        </trans-unit>
        <trans-unit id="4717ac0a129595a7b0ba8362f889d2eb111be7f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authTagLength&lt;/code&gt; option can now be used to restrict accepted GCM authentication tag lengths.</source>
          <target state="translated">该 &lt;code&gt;authTagLength&lt;/code&gt; 选项现在可用于限制接受的GCM认证标签的长度。</target>
        </trans-unit>
        <trans-unit id="f892ccf9ac759a08f758b755e272a341ca380048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoClose&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;autoClose&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="3fe354e440db4d021a80a4a1de3cb0bd0379f9e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;before&lt;/code&gt; callback will be called 0 to N times. The &lt;code&gt;before&lt;/code&gt; callback will typically be called 0 times if the asynchronous operation was cancelled or, for example, if no connections are received by a TCP server. Persistent asynchronous resources like a TCP server will typically call the &lt;code&gt;before&lt;/code&gt; callback multiple times, while other operations like &lt;code&gt;fs.open()&lt;/code&gt; will call it only once.</source>
          <target state="translated">在 &lt;code&gt;before&lt;/code&gt; 的回调将被称为0到N倍。的 &lt;code&gt;before&lt;/code&gt; 回调将典型地或者叫0次如果异步操作被取消，例如，如果是由TCP服务器收到任何连接。持久性异步资源（如TCP服务器）通常会多次调用 &lt;code&gt;before&lt;/code&gt; 回调，而其他操作（如 &lt;code&gt;fs.open()&lt;/code&gt; )只会调用一次。</target>
        </trans-unit>
        <trans-unit id="d2865411787013147736e7c6528d110aada6c506" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bigint&lt;/code&gt; version of the &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt; method returning the current high-resolution real time in a &lt;code&gt;bigint&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;bigint&lt;/code&gt; 版本的&lt;a href=&quot;#process_process_hrtime_time&quot;&gt; &lt;code&gt;process.hrtime()&lt;/code&gt; &lt;/a&gt;方法的返回当前高分辨率实时 &lt;code&gt;bigint&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c48b4d08ed330264b4f8eb1e7a3005009bd60630" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;breakLength&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;breakLength&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="afb9ab51848289ab8d0bcbcce7912894768d7275" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;breakOnSigint&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;breakOnSigint&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="a4c4b22335ca3e1d7d0ed289d2587b07f1094bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buf.parent&lt;/code&gt; property is a deprecated alias for &lt;code&gt;buf.buffer&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;buf.parent&lt;/code&gt; 属性是一个过时的别名 &lt;code&gt;buf.buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="751a13b39d085a2e801df110ee05aac2a34358bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; argument may be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;buffer&lt;/code&gt; 的参数可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33c35cc0fd059f671ea5de074af24f81f56719ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;buffer&lt;/code&gt; 参数可以是一个 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94a104be39c9bc13bef36af071c42ce0cf501caf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">现在， &lt;code&gt;buffer&lt;/code&gt; 参数可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f24d6e585cea302eee1c5b8b0d24308bd5f95739" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;buffer&lt;/code&gt; 参数可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13347ff52ee272031d0dfa2402f16202165de828" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;buffer&lt;/code&gt; 参数可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6c7846f24666db70fe163eb55c7b74fbe223c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;</source>
          <target state="translated">现在， &lt;code&gt;buffer&lt;/code&gt; 参数可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e7550ba45ded2a07645252a3e6d651b429ee3b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;buffer&lt;/code&gt; 参数可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc2fa30b3b806b4b669461c2fcdca26d15195f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;buffer&lt;/code&gt; 参数可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0becffa6e00a391d07ddcfd44821e7c5551acaa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are supported now.</source>
          <target state="translated">该 &lt;code&gt;byteOffset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 参数现在支持。</target>
        </trans-unit>
        <trans-unit id="26dde646bc9d6b4b4c3d1dee9bcfb39db3b93a23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ca:&lt;/code&gt; option now supports &lt;code&gt;BEGIN TRUSTED CERTIFICATE&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;ca:&lt;/code&gt; 选项，支持 &lt;code&gt;BEGIN TRUSTED CERTIFICATE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50abb0a253c600119fb0b706154a2d9856c65812" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ca&lt;/code&gt; option can now be a single string containing multiple CA certificates.</source>
          <target state="translated">该 &lt;code&gt;ca&lt;/code&gt; 现在选项可能包含多个CA证书的单一字符串。</target>
        </trans-unit>
        <trans-unit id="6b641d22b2c014aa622b9b93bee1c68784632570" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cache&lt;/code&gt; parameter was removed.</source>
          <target state="translated">该 &lt;code&gt;cache&lt;/code&gt; 取出参数。</target>
        </trans-unit>
        <trans-unit id="9f1c69c38d8e38e5b17ae605ab46f393e7a823c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cachedData&lt;/code&gt; and &lt;code&gt;produceCachedData&lt;/code&gt; options are supported now.</source>
          <target state="translated">该 &lt;code&gt;cachedData&lt;/code&gt; 和 &lt;code&gt;produceCachedData&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="1c0e007effbbc122cf39880451c0a560d0bbab07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; argument is optional and will be called when this chunk of data is flushed, but only if the chunk is non-empty.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 参数是可选的，数据的这个块被刷新会被调用，但只有当块非空。</target>
        </trans-unit>
        <trans-unit id="ba29b709f3d8b858f0b327068e0a74f6852badbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. &lt;code&gt;err&lt;/code&gt; is an exception object when key derivation fails, otherwise &lt;code&gt;err&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;derivedKey&lt;/code&gt; is passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 函数被调用有两个参数： &lt;code&gt;err&lt;/code&gt; 和 &lt;code&gt;derivedKey&lt;/code&gt; 。当密钥派生失败时， &lt;code&gt;err&lt;/code&gt; 是一个异常对象，否则 &lt;code&gt;err&lt;/code&gt; 为 &lt;code&gt;null&lt;/code&gt; 。 &lt;code&gt;derivedKey&lt;/code&gt; 作为&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;传递给回调。</target>
        </trans-unit>
        <trans-unit id="5f9f155ba1bd27d006253becd5a6ecb00b817468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function must be called only when the current chunk is completely consumed. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be an &lt;code&gt;Error&lt;/code&gt; object if an error occurred while processing the input or &lt;code&gt;null&lt;/code&gt; otherwise. If a second argument is passed to the &lt;code&gt;callback&lt;/code&gt;, it will be forwarded on to the &lt;code&gt;readable.push()&lt;/code&gt; method. In other words, the following are equivalent:</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 函数必须仅在当前块被完全消耗被调用。如果在处理输入时发生 &lt;code&gt;Error&lt;/code&gt; 则传递给 &lt;code&gt;callback&lt;/code&gt; 的第一个参数必须为Error对象，否则为 &lt;code&gt;null&lt;/code&gt; 。如果将第二个参数传递给 &lt;code&gt;callback&lt;/code&gt; ，则它将被转发到 &lt;code&gt;readable.push()&lt;/code&gt; 方法。换句话说，以下是等效的：</target>
        </trans-unit>
        <trans-unit id="ce46ebb800e17eebebaf8f9d46987e9d2dd4f325" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function passed to &lt;code&gt;rl.question()&lt;/code&gt; does not follow the typical pattern of accepting an &lt;code&gt;Error&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt; as the first argument. The &lt;code&gt;callback&lt;/code&gt; is called with the provided answer as the only argument.</source>
          <target state="translated">传递给 &lt;code&gt;rl.question()&lt;/code&gt; 的 &lt;code&gt;callback&lt;/code&gt; 函数并不遵循接受 &lt;code&gt;Error&lt;/code&gt; 对象或将 &lt;code&gt;null&lt;/code&gt; 作为第一个参数的典型模式。在 &lt;code&gt;callback&lt;/code&gt; 时调用提供答案作为唯一的参数。</target>
        </trans-unit>
        <trans-unit id="652f37b1b2968e2ab32c3881e04612dc419eb654" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function, if specified, will be added as a listener for the &lt;a href=&quot;#tls_event_secureconnect&quot;&gt;&lt;code&gt;'secureConnect'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 函数，如果指定，将被添加为一个监听器&lt;a href=&quot;#tls_event_secureconnect&quot;&gt; &lt;code&gt;'secureConnect'&lt;/code&gt; &lt;/a&gt;事件。</target>
        </trans-unit>
        <trans-unit id="48896b41d9279e5711e050c3ebf37d6393767a0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 有两个参数 &lt;code&gt;(err, resolvedPath)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb5d819e0cd349728bee11ce5e3538fc8b3951ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;. May use &lt;code&gt;process.cwd&lt;/code&gt; to resolve relative paths.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 有两个参数 &lt;code&gt;(err, resolvedPath)&lt;/code&gt; 。可以使用 &lt;code&gt;process.cwd&lt;/code&gt; 来解析相对路径。</target>
        </trans-unit>
        <trans-unit id="253886ac3350139a2e4de4d0e7575141b9659fc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked when a &lt;code&gt;PerformanceObserver&lt;/code&gt; is notified about new &lt;code&gt;PerformanceEntry&lt;/code&gt; instances. The callback receives a &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; instance and a reference to the &lt;code&gt;PerformanceObserver&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;callback&lt;/code&gt; 时被调用 &lt;code&gt;PerformanceObserver&lt;/code&gt; 被通知新 &lt;code&gt;PerformanceEntry&lt;/code&gt; 实例。回调接收 &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; 实例和对 &lt;code&gt;PerformanceObserver&lt;/code&gt; 的引用。</target>
        </trans-unit>
        <trans-unit id="9b72dba06513971ab2b899eb65fab8c7b2b0f850" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked with a single argument that is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 被调用，那就是一个实例一个参数&lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt; &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50db4a4272c90529a835c1153eb71e463f38c65c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; method must be called to signal either that the write completed successfully or failed with an error. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be the &lt;code&gt;Error&lt;/code&gt; object if the call failed or &lt;code&gt;null&lt;/code&gt; if the write succeeded.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 方法必须调用任何信号，即写入成功完成或因错误而失败。如果调用失败，则传递给 &lt;code&gt;callback&lt;/code&gt; 的第一个参数必须为 &lt;code&gt;Error&lt;/code&gt; 对象；如果写入成功，则为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="179014424211e6954e7ae18e22c66302ded36897" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 参数不再是可有可无的。不通过它会发出ID为DEP0013的弃用警告。</target>
        </trans-unit>
        <trans-unit id="5938acd6c222b936a76d043fe7bef6a5ee523eb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is no longer optional. Not passing it will throw a &lt;code&gt;TypeError&lt;/code&gt; at runtime.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 参数不再是可有可无的。不通过它会在运行时引发 &lt;code&gt;TypeError&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80d8feeb9e26a94d3dde87faf723b7d3903dbfca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 参数现在是可选的。</target>
        </trans-unit>
        <trans-unit id="ba70c7e9c871db219c8a222ad10026562b6f4eae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 参数现在支持。</target>
        </trans-unit>
        <trans-unit id="ff62e0bdb25bf6e3167f8d2e71d5dcb26d11520e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will always be called with &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;error&lt;/code&gt; parameter in case of success.</source>
          <target state="translated">如果成功，将始终使用 &lt;code&gt;null&lt;/code&gt; 作为 &lt;code&gt;error&lt;/code&gt; 参数来调用 &lt;code&gt;callback&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc1c85ca488c98544bc81bd9a9e01e47ef3bacd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will likely not be invoked in precisely &lt;code&gt;delay&lt;/code&gt; milliseconds. Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering. The callback will be called as close as possible to the time specified.</source>
          <target state="translated">该 &lt;code&gt;callback&lt;/code&gt; 可能不会在精确地调用 &lt;code&gt;delay&lt;/code&gt; 毫秒。Node.js不能保证触发回调的确切时间及其顺序。回调将在尽可能接近指定时间的位置被调用。</target>
        </trans-unit>
        <trans-unit id="1922dd3f5d83e12adee6b2b757d0739f0ad27dfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execFile()&lt;/code&gt; function is similar to &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; except that it does not spawn a shell by default. Rather, the specified executable &lt;code&gt;file&lt;/code&gt; is spawned directly as a new process making it slightly more efficient than &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;child_process.execFile()&lt;/code&gt; 函数类似于&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;不同之处在于它不通过缺省生成一个壳。而是直接将指定的可执行 &lt;code&gt;file&lt;/code&gt; 作为新进程生成，从而使其效率比&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;略高。</target>
        </trans-unit>
        <trans-unit id="2a4a0a2c850eea5f5dfb7d502a45c3991da5e300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execFileSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited.</source>
          <target state="translated">该 &lt;code&gt;child_process.execFileSync()&lt;/code&gt; 方法大致相同&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;，不同的是该方法不会返回，直到子进程已完全关闭。当遇到超时并发送 &lt;code&gt;killSignal&lt;/code&gt; 时，该方法将在进程完全退出之前不会返回。</target>
        </trans-unit>
        <trans-unit id="43e339d998d6a81aa79698538c93cb46b8fd4348" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited. If the child process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and doesn't exit, the parent process will wait until the child process has exited.</source>
          <target state="translated">该 &lt;code&gt;child_process.execSync()&lt;/code&gt; 方法大致相同&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;，不同的是该方法不会返回，直到子进程已完全关闭。当遇到超时并发送 &lt;code&gt;killSignal&lt;/code&gt; 时，该方法将在进程完全退出之前不会返回。如果子进程拦截并处理 &lt;code&gt;SIGTERM&lt;/code&gt; 信号并且没有退出，则父进程将等待直到子进程退出。</target>
        </trans-unit>
        <trans-unit id="79ab2f31fa112d0a33071b52bf3919603eb10e38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.fork()&lt;/code&gt; method is a special case of &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; used specifically to spawn new Node.js processes. Like &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object is returned. The returned &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; will have an additional communication channel built-in that allows messages to be passed back and forth between the parent and child. See &lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;subprocess.send()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">所述 &lt;code&gt;child_process.fork()&lt;/code&gt; 方法是一个特殊情形&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;专门用于产生新的Node.js过程。与&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;类似，将返回&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;对象。返回的&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;将内置一个附加的通信通道，该通道允许在父级和子级之间来回传递消息。有关详细信息，请参见&lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;subprocess.send()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="baf57fba487307b776480db4b6f5caa8f5c57761" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawn()&lt;/code&gt; method spawns a new process using the given &lt;code&gt;command&lt;/code&gt;, with command line arguments in &lt;code&gt;args&lt;/code&gt;. If omitted, &lt;code&gt;args&lt;/code&gt; defaults to an empty array.</source>
          <target state="translated">所述 &lt;code&gt;child_process.spawn()&lt;/code&gt; 方法产卵使用给定一个新的过程 &lt;code&gt;command&lt;/code&gt; ，在命令行参数 &lt;code&gt;args&lt;/code&gt; 。如果省略，则 &lt;code&gt;args&lt;/code&gt; 默认为空数组。</target>
        </trans-unit>
        <trans-unit id="ff2c5a22e3f39b38bd7778f858fd5a2731fa71b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawnSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; with the exception that the function will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited. If the process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and doesn't exit, the parent process will wait until the child process has exited.</source>
          <target state="translated">该 &lt;code&gt;child_process.spawnSync()&lt;/code&gt; 方法大致相同&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;不同之处在于该函数不会返回，直到子进程已完全关闭。当遇到超时并发送 &lt;code&gt;killSignal&lt;/code&gt; 时，该方法将在进程完全退出之前不会返回。如果该进程拦截并处理了 &lt;code&gt;SIGTERM&lt;/code&gt; 信号，但没有退出，则父进程将等待直到子进程退出。</target>
        </trans-unit>
        <trans-unit id="7e4066aabced91d6898f68577001b144876c3550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process&lt;/code&gt; module provides the ability to spawn child processes in a manner that is similar, but not identical, to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt;&lt;code&gt;popen(3)&lt;/code&gt;&lt;/a&gt;. This capability is primarily provided by the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">所述 &lt;code&gt;child_process&lt;/code&gt; 模块提供的能力，spawn子进程的方式，是类似的，但不完全相同，&lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt; &lt;code&gt;popen(3)&lt;/code&gt; &lt;/a&gt;。此功能主要由&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;函数提供：</target>
        </trans-unit>
        <trans-unit id="7ab6bb247d807aa99f0d1ad8784b0eb604c5e644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunk&lt;/code&gt; argument can now be a &lt;code&gt;Uint8Array&lt;/code&gt; instance.</source>
          <target state="translated">现在， &lt;code&gt;chunk&lt;/code&gt; 参数可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="59a049e2241d0e91f8119efebfab57152070fdcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.getAuthTag()&lt;/code&gt; method should only be called after encryption has been completed using the &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">该 &lt;code&gt;cipher.getAuthTag()&lt;/code&gt; 加密后一直使用完整的方法只能被称为&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="fc2e9e0a05a5ea6249159718bf69662d588f281e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.setAAD()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;cipher.update()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;cipher.setAAD()&lt;/code&gt; 方法必须之前调用&lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;cipher.update()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a674ee975c802867ef81a7453297330883d95c2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.setAutoPadding()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;cipher.setAutoPadding()&lt;/code&gt; 方法必须之前调用&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bb4365192a6a89f79bcda437a280cc2772a31e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.update()&lt;/code&gt; method can be called multiple times with new data until &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; is called. Calling &lt;code&gt;cipher.update()&lt;/code&gt; after &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; will result in an error being thrown.</source>
          <target state="translated">所述 &lt;code&gt;cipher.update()&lt;/code&gt; 方法可以与直到新的数据被多次调用&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;被调用。调用 &lt;code&gt;cipher.update()&lt;/code&gt; 后&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;将导致抛出一个错误。</target>
        </trans-unit>
        <trans-unit id="eab25cea22e5e6d0a936bebbeff627b02e836ed7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;codeGeneration&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;codeGeneration&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="a6544e8c92f9b1421cb39964549a6fba71ba9b10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; option accepts numbers for a new output mode.</source>
          <target state="translated">该 &lt;code&gt;compact&lt;/code&gt; 选项接受一个新的输出模式的数字。</target>
        </trans-unit>
        <trans-unit id="4e0fd9c17389d34407b63c9830ee6259874d3554" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; option is supported now.</source>
          <target state="translated">在 &lt;code&gt;compact&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="9c60993429a8283c8b6bb30d9d486cf8be30652b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; options default is changed to &lt;code&gt;3&lt;/code&gt; and the &lt;code&gt;breakLength&lt;/code&gt; options default is changed to &lt;code&gt;80&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;compact&lt;/code&gt; 默认选项更改为 &lt;code&gt;3&lt;/code&gt; 和 &lt;code&gt;breakLength&lt;/code&gt; 选项默认值更改为 &lt;code&gt;80&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c8daef3b2446d622017a6e79a063c5bb6f4079c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completer&lt;/code&gt; function can be called asynchronously if it accepts two arguments:</source>
          <target state="translated">如果 &lt;code&gt;completer&lt;/code&gt; 函数接受两个参数，则可以异步调用它：</target>
        </trans-unit>
        <trans-unit id="978d498a3782c9fe0dec8c9101e02b8242d86778" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completer&lt;/code&gt; function takes the current line entered by the user as an argument, and returns an &lt;code&gt;Array&lt;/code&gt; with 2 entries:</source>
          <target state="translated">在 &lt;code&gt;completer&lt;/code&gt; 函数接受由所述用户作为参数输入的当前行，并返回一个 &lt;code&gt;Array&lt;/code&gt; 与2项：</target>
        </trans-unit>
        <trans-unit id="fc31eb91c139ef8d491acdbbebec616d5484155f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.debug()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;console.debug()&lt;/code&gt; 函数是一个别名&lt;a href=&quot;#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="defb8cff6c1e951f6de2d07f458d2babac7ba2a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.info()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;console.info()&lt;/code&gt; 函数是一个别名&lt;a href=&quot;#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cecd0aff03a02528c4539c7c9f56be627a6fd0bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.warn()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;console.warn()&lt;/code&gt; 函数是一个别名&lt;a href=&quot;#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f9c8303533d153fb137daa18d249448d01467f1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console&lt;/code&gt; module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.</source>
          <target state="translated">所述 &lt;code&gt;console&lt;/code&gt; 模块提供了一个简单的调试控制台是类似于由web浏览器所提供的JavaScript控制台机制。</target>
        </trans-unit>
        <trans-unit id="764cd16bca065f3cc69ab4d8a92233579209fc99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constants&lt;/code&gt; module is deprecated. When requiring access to constants relevant to specific Node.js builtin modules, developers should instead refer to the &lt;code&gt;constants&lt;/code&gt; property exposed by the relevant module. For instance, &lt;code&gt;require('fs').constants&lt;/code&gt; and &lt;code&gt;require('os').constants&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;constants&lt;/code&gt; 模块已被弃用。当需要访问与特定Node.js内置模块相关的常量时，开发人员应改为引用相关模块公开的 &lt;code&gt;constants&lt;/code&gt; 属性。例如， &lt;code&gt;require('fs').constants&lt;/code&gt; 和 &lt;code&gt;require('os').constants&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6d5392b0ffb88c2d741b4a827845f941c5aa7e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; parameter can refer to an ES6 class now.</source>
          <target state="translated">现在， &lt;code&gt;constructor&lt;/code&gt; 参数可以引用ES6类。</target>
        </trans-unit>
        <trans-unit id="91794b1474f58b591b318c4eb4de0f99f69c42fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructorOpt&lt;/code&gt; argument is useful for hiding implementation details of error generation from an end user. For instance:</source>
          <target state="translated">所述 &lt;code&gt;constructorOpt&lt;/code&gt; 参数是从最终用户隐藏误差生成的实现细节是有用的。例如：</target>
        </trans-unit>
        <trans-unit id="3f58213ab25c95853528316189bfb6d69406e28a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;content-length&lt;/code&gt; header field will be automatically set.</source>
          <target state="translated">的 &lt;code&gt;content-length&lt;/code&gt; 报头字段将被自动设定。</target>
        </trans-unit>
        <trans-unit id="54297810109a40e006edcdd14b8aa735a9c0830f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; given during the call to &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; can be retrieved from any thread with a call to &lt;code&gt;napi_get_threadsafe_function_context()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;context&lt;/code&gt; 在调用期间给予 &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; 可以从任何线程中检索与呼叫到 &lt;code&gt;napi_get_threadsafe_function_context()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ed0f099bbb846c6a8d341dea02523807f589314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contextCodeGeneration&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;contextCodeGeneration&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="d724f5e9ffe9edd754ed243abdbb481de04378bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cost&lt;/code&gt;, &lt;code&gt;blockSize&lt;/code&gt; and &lt;code&gt;parallelization&lt;/code&gt; option names have been added.</source>
          <target state="translated">在 &lt;code&gt;cost&lt;/code&gt; ， &lt;code&gt;blockSize&lt;/code&gt; 和 &lt;code&gt;parallelization&lt;/code&gt; 选项的名称已被添加。</target>
        </trans-unit>
        <trans-unit id="2ebacbab8ba40ddb7c2a01713d06a73151a28484" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crlfDelay&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;crlfDelay&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="4f76355cd575f0ec09649052dbc2cc2c523a151b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.Credentials&lt;/code&gt; class was removed. Please use &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.SecureContext&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">该 &lt;code&gt;crypto.Credentials&lt;/code&gt; 除去类。请改用&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.SecureContext&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="496c02ce2af63849a303e1f5ac12f7c5f3707e06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; mechanism is provided for backwards compatibility with legacy programs that expect &lt;code&gt;'latin1'&lt;/code&gt; to be the default encoding.</source>
          <target state="translated">该 &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; 提供机制的向后兼容性与期望传统节目 &lt;code&gt;'latin1'&lt;/code&gt; 是默认的编码。</target>
        </trans-unit>
        <trans-unit id="09a09563094e226c530650f4b442648579a0291b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; property can be used to change the way the &lt;code&gt;derivedKey&lt;/code&gt; is passed to the callback. This property, however, has been deprecated and use should be avoided.</source>
          <target state="translated">该 &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; 属性可以用来改变的方式 &lt;code&gt;derivedKey&lt;/code&gt; 被传递给回调。但是，此属性已被弃用，应避免使用。</target>
        </trans-unit>
        <trans-unit id="252e5ce33b7a0494ca5705dfa01113826b19a5dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; property may be used to change the way the &lt;code&gt;derivedKey&lt;/code&gt; is returned. This property, however, is deprecated and use should be avoided.</source>
          <target state="translated">该 &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; 属性可以用来改变的方式 &lt;code&gt;derivedKey&lt;/code&gt; 返回。但是，此属性已被弃用，应避免使用。</target>
        </trans-unit>
        <trans-unit id="145e6ed1d4b3ecb5175a68c99648976754551213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto._toBuf()&lt;/code&gt; function was not designed to be used by modules outside of Node.js core and was removed.</source>
          <target state="translated">所述 &lt;code&gt;crypto._toBuf()&lt;/code&gt; 函数不被设计为通过模块的Node.js芯以外使用和除去。</target>
        </trans-unit>
        <trans-unit id="decbf0573b73333da4f753cecb890dd944596753" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.createCredentials()&lt;/code&gt; API was removed. Please use &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">所述 &lt;code&gt;crypto.createCredentials()&lt;/code&gt; 除去API。请改用&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfb78b96f9539bdae500b0c828afd631df6535c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.randomBytes()&lt;/code&gt; method will not complete until there is sufficient entropy available. This should normally never take longer than a few milliseconds. The only time when generating the random bytes may conceivably block for a longer period of time is right after boot, when the whole system is still low on entropy.</source>
          <target state="translated">在没有足够的熵可用之前， &lt;code&gt;crypto.randomBytes()&lt;/code&gt; 方法将不会完成。通常，这应该不会花费超过几毫秒的时间。可以想象，当整个系统的熵仍然很低时，生成随机字节的唯一时间可能是在引导后立即阻塞更长的时间。</target>
        </trans-unit>
        <trans-unit id="8339e284a971532b7d28d05ffe582daa5f7966b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.</source>
          <target state="translated">所述 &lt;code&gt;crypto&lt;/code&gt; 模块提供加密功能，其包括一组包装器OpenSSL的散列，HMAC，加密，解密，签名，以及验证功能。</target>
        </trans-unit>
        <trans-unit id="480ec0b6a393327edcc239ebe43596e74863e8c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module provides the &lt;code&gt;Certificate&lt;/code&gt; class for working with SPKAC data. The most common usage is handling output generated by the HTML5 &lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt; element. Node.js uses &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html&quot;&gt;OpenSSL's SPKAC implementation&lt;/a&gt; internally.</source>
          <target state="translated">该 &lt;code&gt;crypto&lt;/code&gt; 模块提供的 &lt;code&gt;Certificate&lt;/code&gt; 类与SPKAC数据的工作。最常见的用法是处理HTML5 &lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt; 元素生成的输出。Node.js在内部使用&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html&quot;&gt;OpenSSL的SPKAC实现&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a2dac1ece53434551141ebdd9ed53915ef72940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module still supports some algorithms which are already compromised and are not currently recommended for use. The API also allows the use of ciphers and hashes with a small key size that are too weak for safe use.</source>
          <target state="translated">该 &lt;code&gt;crypto&lt;/code&gt; 模块仍然支持这些已经受损，目前已不再推荐使用一些算法。该API还允许使用密钥太小的密码和哈希值，这些密码和哈希值太弱，无法安全使用。</target>
        </trans-unit>
        <trans-unit id="012c7bdf0d9689e836fec05c286230617e01c04a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cryptoStream.bytesWritten&lt;/code&gt; property returns the total number of bytes written to the underlying socket &lt;em&gt;including&lt;/em&gt; the bytes required for the implementation of the TLS protocol.</source>
          <target state="translated">所述 &lt;code&gt;cryptoStream.bytesWritten&lt;/code&gt; 属性返回写入基础插座的总字节数&lt;em&gt;，包括&lt;/em&gt;在所需的TLS协议的执行字节。</target>
        </trans-unit>
        <trans-unit id="a4ffdb22912634d83f537b8778b7f78372135d6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cwd&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;cwd&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="a785322575851f3cbfa6c65e6bc51bc7994b4d6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;data&lt;/code&gt; 现在参数可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="059fb205840fb573709992ff65937e48e8c47ccd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;data&lt;/code&gt; 现在参数可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d699a8e66e291d4dbb66069406e56fa6a3bdbd56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAAD()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;decipher.setAAD()&lt;/code&gt; 方法之前，必须调用&lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd0108662c04d88926a087d2bc8bf093bc824eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; and can only be called once.</source>
          <target state="translated">该 &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; 方法必须之前调用&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;，只能被调用一次。</target>
        </trans-unit>
        <trans-unit id="e84318ad593602027e542c7e5bfeb9cd812b2a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAutoPadding()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;decipher.setAutoPadding()&lt;/code&gt; 方法之前，必须调用&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6ed87d0293868649e057451f66f944a2b809c18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.update()&lt;/code&gt; method can be called multiple times with new data until &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; is called. Calling &lt;code&gt;decipher.update()&lt;/code&gt; after &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; will result in an error being thrown.</source>
          <target state="translated">所述 &lt;code&gt;decipher.update()&lt;/code&gt; 方法可以被调用用新数据多次，直到&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;被调用。调用 &lt;code&gt;decipher.update()&lt;/code&gt; 后&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;将导致一个错误被抛出。</target>
        </trans-unit>
        <trans-unit id="a0770c4cae4c4f8a3dc5664ccd10e0ca3a8b2e11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defaultOptions&lt;/code&gt; value allows customization of the default options used by &lt;code&gt;util.inspect&lt;/code&gt;. This is useful for functions like &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;util.format&lt;/code&gt; which implicitly call into &lt;code&gt;util.inspect&lt;/code&gt;. It shall be set to an object containing one or more valid &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; options. Setting option properties directly is also supported.</source>
          <target state="translated">该 &lt;code&gt;defaultOptions&lt;/code&gt; 值允许的所使用的默认选项定制 &lt;code&gt;util.inspect&lt;/code&gt; 。这对于隐式调用 &lt;code&gt;util.inspect&lt;/code&gt; 的 &lt;code&gt;console.log&lt;/code&gt; 或 &lt;code&gt;util.format&lt;/code&gt; 之类的功能很有用。它应设置为包含一个或多个有效&lt;a href=&quot;#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;选项的对象。还支持直接设置选项属性。</target>
        </trans-unit>
        <trans-unit id="ef6cc6afd4679ef76190a9f15f4f9a33f7099fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depth&lt;/code&gt; default changed back to &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;depth&lt;/code&gt; 默认改回 &lt;code&gt;2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a51131897a7f510936321ce110be4936110e773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depth&lt;/code&gt; default changed to &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;depth&lt;/code&gt; 默认更改为 &lt;code&gt;20&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b84842f945868c618332d4e911b58899660aa5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram.Socket&lt;/code&gt; object is an &lt;a href=&quot;events&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; that encapsulates the datagram functionality.</source>
          <target state="translated">所述 &lt;code&gt;dgram.Socket&lt;/code&gt; 对象是&lt;a href=&quot;events&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;封装数据报的功能。</target>
        </trans-unit>
        <trans-unit id="86b0893a7f189daf0b825fd662edb92ff8ee749b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module previously contained several APIs that were never meant to accessed outside of Node.js core: &lt;code&gt;Socket.prototype._handle&lt;/code&gt;, &lt;code&gt;Socket.prototype._receiving&lt;/code&gt;, &lt;code&gt;Socket.prototype._bindState&lt;/code&gt;, &lt;code&gt;Socket.prototype._queue&lt;/code&gt;, &lt;code&gt;Socket.prototype._reuseAddr&lt;/code&gt;, &lt;code&gt;Socket.prototype._healthCheck()&lt;/code&gt;, &lt;code&gt;Socket.prototype._stopReceiving()&lt;/code&gt;, and &lt;code&gt;dgram._createSocketHandle()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;dgram&lt;/code&gt; 模块原先包含多种API，这从来没有准备的Node.js核心的外部访问的： &lt;code&gt;Socket.prototype._handle&lt;/code&gt; ， &lt;code&gt;Socket.prototype._receiving&lt;/code&gt; ， &lt;code&gt;Socket.prototype._bindState&lt;/code&gt; ， &lt;code&gt;Socket.prototype._queue&lt;/code&gt; ， &lt;code&gt;Socket.prototype._reuseAddr&lt;/code&gt; ， &lt;code&gt;Socket.prototype._healthCheck()&lt;/code&gt; ， &lt;code&gt;Socket.prototype._stopReceiving()&lt;/code&gt; 和 &lt;code&gt;dgram._createSocketHandle()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4f59c7eb695d24e543b8bf8e05bcf31a8bb305b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module provides an implementation of UDP Datagram sockets.</source>
          <target state="translated">该 &lt;code&gt;dgram&lt;/code&gt; 模块提供UDP数据报套接字的实现。</target>
        </trans-unit>
        <trans-unit id="e49cb4f4a826367eb475ccde83a8070b593f0ec6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dictionary&lt;/code&gt; option can be an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;dictionary&lt;/code&gt; 选项可以是一个 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd508cc93689322f1c77c76b0ee7e9bb1098555a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dictionary&lt;/code&gt; option can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">现在， &lt;code&gt;dictionary&lt;/code&gt; 选项可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f15d09ab57639a0bbd963ccdc2d326537fb64d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; parameter is always required now.</source>
          <target state="translated">本 &lt;code&gt;digest&lt;/code&gt; 参数总是现在要求。</target>
        </trans-unit>
        <trans-unit id="ea73cbcffb6d3d2f70aa60b49f9b6128e82ab354" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.promises&lt;/code&gt; API provides an alternative set of asynchronous DNS methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('dns').promises&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;dns.promises&lt;/code&gt; API提供了另一套返回异步DNS方法 &lt;code&gt;Promise&lt;/code&gt; 对象，而不是使用回调。可通过 &lt;code&gt;require('dns').promises&lt;/code&gt; 访问该API 。</target>
        </trans-unit>
        <trans-unit id="ebf732de7db900928d3336c4bb8043ad1b55b006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.setServers()&lt;/code&gt; method must not be called while a DNS query is in progress.</source>
          <target state="translated">该 &lt;code&gt;dns.setServers()&lt;/code&gt; 而DNS查询过程中方法不能被调用。</target>
        </trans-unit>
        <trans-unit id="51cfea11e5b64abbc7488234cdc0f7e71e59f882" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns&lt;/code&gt; module contains functions belonging to two different categories:</source>
          <target state="translated">的 &lt;code&gt;dns&lt;/code&gt; 模块包含属于两个不同的类别的功能：</target>
        </trans-unit>
        <trans-unit id="db764debbedbbc99da97635f28c98936c8927a81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dnsPromises.setServers()&lt;/code&gt; method must not be called while a DNS query is in progress.</source>
          <target state="translated">该 &lt;code&gt;dnsPromises.setServers()&lt;/code&gt; 而DNS查询过程中方法不能被调用。</target>
        </trans-unit>
        <trans-unit id="679e20c13d5a3c302673244281bcd94fae6b6f09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;domain&lt;/code&gt; module was not usable since it could not establish the required error handling hooks, because &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; had been called at an earlier point in time.</source>
          <target state="translated">该 &lt;code&gt;domain&lt;/code&gt; 模块无法使用，因为它无法建立所需的错误处理挂钩，因为&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; &lt;/a&gt;在较早的时间被调用。</target>
        </trans-unit>
        <trans-unit id="04d4ce38eb55867a1f7955e0fe695cba0c0dd698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; cannot be set to &lt;code&gt;false&lt;/code&gt; anymore due to a change in OpenSSL.</source>
          <target state="translated">该 &lt;code&gt;ecdhCurve&lt;/code&gt; 不能设置为 &lt;code&gt;false&lt;/code&gt; 了由于OpenSSL的变化。</target>
        </trans-unit>
        <trans-unit id="742b9fe51501d348db258ff24896c339ef5c45a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; option can now be multiple &lt;code&gt;':'&lt;/code&gt; separated curve names or &lt;code&gt;'auto'&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;ecdhCurve&lt;/code&gt; 选项现在可多发 &lt;code&gt;':'&lt;/code&gt; 分隔曲线名称或 &lt;code&gt;'auto'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a892c664f54e9e71b866fc1d18e553d9a45ee0de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; option to &lt;code&gt;tls.createSecureContext()&lt;/code&gt; and &lt;code&gt;tls.TLSSocket&lt;/code&gt; could be set to &lt;code&gt;false&lt;/code&gt; to disable ECDH entirely on the server only. This mode was deprecated in preparation for migrating to OpenSSL 1.1.0 and consistency with the client and is now unsupported. Use the &lt;code&gt;ciphers&lt;/code&gt; parameter instead.</source>
          <target state="translated">可以将 &lt;code&gt;tls.createSecureContext()&lt;/code&gt; 和 &lt;code&gt;tls.TLSSocket&lt;/code&gt; 的 &lt;code&gt;ecdhCurve&lt;/code&gt; 选项设置为 &lt;code&gt;false&lt;/code&gt; ,以仅在服务器上完全禁用ECDH。为准备迁移到OpenSSL 1.1.0以及与客户端保持一致，不建议使用此模式，现在不支持该模式。请改用 &lt;code&gt;ciphers&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="2946f4082b1f02b207349af665cbc73adc1f9552" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enableTrace&lt;/code&gt; option is now supported.</source>
          <target state="translated">该 &lt;code&gt;enableTrace&lt;/code&gt; 现在支持选项。</target>
        </trans-unit>
        <trans-unit id="357c0a04ac7d9b56fc95efc24a727a047b1c2cd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; argument is optional and only applies when &lt;code&gt;chunk&lt;/code&gt; is a string. Defaults to &lt;code&gt;'utf8'&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;encoding&lt;/code&gt; 参数是可选的，只有当适用 &lt;code&gt;chunk&lt;/code&gt; 是一个字符串。默认为 &lt;code&gt;'utf8'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef7385768a7559ac9db4c147901248a0ed8b3a9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option can now explicitly be set to &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">现在可以将 &lt;code&gt;encoding&lt;/code&gt; 选项显式设置为 &lt;code&gt;buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b949d0b7f0849d139bac2ef42775cb8a31f70428" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer.</source>
          <target state="translated">该 &lt;code&gt;encoding&lt;/code&gt; ，如果选项被忽略 &lt;code&gt;data&lt;/code&gt; 是一个缓冲区。</target>
        </trans-unit>
        <trans-unit id="b82c726c3a2d2cdae71f022dd63da3f76e7b51f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">该 &lt;code&gt;encoding&lt;/code&gt; 参数现在支持。</target>
        </trans-unit>
        <trans-unit id="f494a34f4cd91e5259dbe4178555f1b760f38c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endMark&lt;/code&gt; argument must identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline or any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. If the named &lt;code&gt;endMark&lt;/code&gt; does not exist, an error will be thrown.</source>
          <target state="translated">该 &lt;code&gt;endMark&lt;/code&gt; 参数必须找出任何&lt;em&gt;现有&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; 在性能时间轴或任何由提供时间戳属性 &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; 类。如果命名的 &lt;code&gt;endMark&lt;/code&gt; 不存在，将引发错误。</target>
        </trans-unit>
        <trans-unit id="035516361da0b390a8068076aae888f97126f601" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enter()&lt;/code&gt; method is plumbing used by the &lt;code&gt;run()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, and &lt;code&gt;intercept()&lt;/code&gt; methods to set the active domain. It sets &lt;code&gt;domain.active&lt;/code&gt; and &lt;code&gt;process.domain&lt;/code&gt; to the domain, and implicitly pushes the domain onto the domain stack managed by the domain module (see &lt;a href=&quot;#domain_domain_exit&quot;&gt;&lt;code&gt;domain.exit()&lt;/code&gt;&lt;/a&gt; for details on the domain stack). The call to &lt;code&gt;enter()&lt;/code&gt; delimits the beginning of a chain of asynchronous calls and I/O operations bound to a domain.</source>
          <target state="translated">的 &lt;code&gt;enter()&lt;/code&gt; 方法是由所使用的管道 &lt;code&gt;run()&lt;/code&gt; ， &lt;code&gt;bind()&lt;/code&gt; ，和 &lt;code&gt;intercept()&lt;/code&gt; 方法来设置活性结构域。它将 &lt;code&gt;domain.active&lt;/code&gt; 和 &lt;code&gt;process.domain&lt;/code&gt; 设置为该域，并将该域隐式推送到由域模块管理的域堆栈上（有关域堆栈的详细信息，请参阅&lt;a href=&quot;#domain_domain_exit&quot;&gt; &lt;code&gt;domain.exit()&lt;/code&gt; &lt;/a&gt;）。对 &lt;code&gt;enter()&lt;/code&gt; 的调用界定了绑定到域的一系列异步调用和I / O操作的开始。</target>
        </trans-unit>
        <trans-unit id="878c228a3891a931f577debd9834c0775a12f11d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entryType&lt;/code&gt; property of the &lt;code&gt;PerformanceEntry&lt;/code&gt; will be equal to &lt;code&gt;'http2'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceEntry&lt;/code&gt; 的 &lt;code&gt;entryType&lt;/code&gt; 属性将等于 &lt;code&gt;'http2'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="617453f3174a055bf920718631ceba8eb76b661c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eq&lt;/code&gt; parameter may now have a length of more than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;eq&lt;/code&gt; 参数现在可具有多于一个的长度 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64d6d95c1dd980f5b3c2e4b04d2297f9d27e6386" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string label that identifies the kind of error. &lt;code&gt;error.code&lt;/code&gt; is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, &lt;code&gt;error.message&lt;/code&gt; strings may change between any versions of Node.js. See &lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js Error Codes&lt;/a&gt; for details about specific codes.</source>
          <target state="translated">该 &lt;code&gt;error.code&lt;/code&gt; 属性是一个字符串标签标识错误类型。 &lt;code&gt;error.code&lt;/code&gt; 是识别错误的最稳定的方法。它将仅在主要版本的Node.js之间更改。相反，在任何版本的Node.js之间， &lt;code&gt;error.message&lt;/code&gt; 字符串可能都会更改。有关特定代码的详细信息，请参见&lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js错误&lt;/a&gt;代码。</target>
        </trans-unit>
        <trans-unit id="3da77ca9b7d80cdbbc4b9941df09bb518dfe59ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string representing the error code.</source>
          <target state="translated">该 &lt;code&gt;error.code&lt;/code&gt; 属性是表示错误代码的字符串。</target>
        </trans-unit>
        <trans-unit id="c17e79c636fe0fafffb682716e2b3876c8f191fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.errno&lt;/code&gt; property is a number or a string. If it is a number, it is a negative value which corresponds to the error code defined in &lt;a href=&quot;http://docs.libuv.org/en/v1.x/errors.html&quot;&gt;&lt;code&gt;libuv Error handling&lt;/code&gt;&lt;/a&gt;. See the libuv &lt;code&gt;errno.h&lt;/code&gt; header file (&lt;code&gt;deps/uv/include/uv/errno.h&lt;/code&gt; in the Node.js source tree) for details. In case of a string, it is the same as &lt;code&gt;error.code&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;error.errno&lt;/code&gt; 属性是一个数字或一个字符串。如果是数字，则为负值，它对应于&lt;a href=&quot;http://docs.libuv.org/en/v1.x/errors.html&quot;&gt; &lt;code&gt;libuv Error handling&lt;/code&gt; &lt;/a&gt;定义的错误代码。有关详细信息，请参见libuv &lt;code&gt;errno.h&lt;/code&gt; 头文件（在Node.js源代码树中的 &lt;code&gt;deps/uv/include/uv/errno.h&lt;/code&gt; ）。如果是字符串，则与 &lt;code&gt;error.code&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="c80fb4345ad46d4df0a661a74199f2ed642ab2a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.message&lt;/code&gt; property is the string description of the error as set by calling &lt;code&gt;new Error(message)&lt;/code&gt;. The &lt;code&gt;message&lt;/code&gt; passed to the constructor will also appear in the first line of the stack trace of the &lt;code&gt;Error&lt;/code&gt;, however changing this property after the &lt;code&gt;Error&lt;/code&gt; object is created &lt;em&gt;may not&lt;/em&gt; change the first line of the stack trace (for example, when &lt;code&gt;error.stack&lt;/code&gt; is read before this property is changed).</source>
          <target state="translated">该 &lt;code&gt;error.message&lt;/code&gt; 属性是通过调用误差集的串描述 &lt;code&gt;new Error(message)&lt;/code&gt; 。传递给构造函数的 &lt;code&gt;message&lt;/code&gt; 也将出现在 &lt;code&gt;Error&lt;/code&gt; 的堆栈跟踪的第一行中，但是在创建 &lt;code&gt;Error&lt;/code&gt; 对象之后更改此属性&lt;em&gt;可能不会&lt;/em&gt;更改堆栈跟踪的第一行（例如，当 &lt;code&gt;error.stack&lt;/code&gt; 为在更改此属性之前读取）。</target>
        </trans-unit>
        <trans-unit id="25a415e8d164701e31d0b96126983bc43065fc68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.stack&lt;/code&gt; property is a string describing the point in the code at which the &lt;code&gt;Error&lt;/code&gt; was instantiated.</source>
          <target state="translated">所述 &lt;code&gt;error.stack&lt;/code&gt; 属性是描述在其中的代码的点串 &lt;code&gt;Error&lt;/code&gt; 被实例化。</target>
        </trans-unit>
        <trans-unit id="d5acdef4005210a3526de3c7d5bda753b7e60335" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.syscall&lt;/code&gt; property is a string describing the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;syscall&lt;/a&gt; that failed.</source>
          <target state="translated">该 &lt;code&gt;error.syscall&lt;/code&gt; 属性是描述一个字符串，&lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;系统调用&lt;/a&gt;失败。</target>
        </trans-unit>
        <trans-unit id="a80d7026184c56cb488e8de9fb1edb33c83fa941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can be an object containing regular expressions now.</source>
          <target state="translated">该 &lt;code&gt;error&lt;/code&gt; 参数可以是含有现在正则表达式中的对象。</target>
        </trans-unit>
        <trans-unit id="23ad1e5536984136751e24c5beb50e064c8e1314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can now be an arrow function.</source>
          <target state="translated">该 &lt;code&gt;error&lt;/code&gt; 现在参数可以是一个箭头的功能。</target>
        </trans-unit>
        <trans-unit id="b920ead4094b0b12297c0fe4c240d5ed11034b0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can now be an object as well.</source>
          <target state="translated">的 &lt;code&gt;error&lt;/code&gt; 现在参数可以是对象为好。</target>
        </trans-unit>
        <trans-unit id="2075e684d8f10b167c2b70e099103394abc86151" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method allows an arbitrary set of arguments to be passed to the listener functions. It is important to keep in mind that when an ordinary listener function is called, the standard &lt;code&gt;this&lt;/code&gt; keyword is intentionally set to reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance to which the listener is attached.</source>
          <target state="translated">所述 &lt;code&gt;eventEmitter.emit()&lt;/code&gt; 方法允许的参数的任意集合被传递到听者的功能。重要的是要记住，当调用普通的侦听器函数时，有意将标准 &lt;code&gt;this&lt;/code&gt; 关键字设置为引用侦听器所附加的 &lt;code&gt;EventEmitter&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="8fd11c7fea7eabceaea846d7b9ea1f99d450ca58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execArgv&lt;/code&gt; option passed to the &lt;code&gt;Worker&lt;/code&gt; constructor contains invalid flags.</source>
          <target state="translated">传递给 &lt;code&gt;Worker&lt;/code&gt; 构造函数的 &lt;code&gt;execArgv&lt;/code&gt; 选项包含无效标志。</target>
        </trans-unit>
        <trans-unit id="e789f0770a175e554087330639eaebd93b4880ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; callbacks are functions that will be invoked when the executor is ready to execute and when it completes its task respectively.</source>
          <target state="translated">在 &lt;code&gt;execute&lt;/code&gt; 和 &lt;code&gt;complete&lt;/code&gt; 回调是函数会被调用时，执行准备好执行，并分别在其完成任务。</target>
        </trans-unit>
        <trans-unit id="0d3d4486e4b536fc372bcf42a2a03816737fda87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; function should avoid making any N-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make N-API calls should be made in &lt;code&gt;complete&lt;/code&gt; callback instead. Avoid using the &lt;code&gt;napi_env&lt;/code&gt; parameter in the execute callback as it will likely execute JavaScript.</source>
          <target state="translated">在 &lt;code&gt;execute&lt;/code&gt; 函数应避免可能导致的JavaScript的执行或JavaScript对象的交互任何N API调用。通常，需要进行N-API调用的任何代码都应在 &lt;code&gt;complete&lt;/code&gt; 回调中进行。避免在execute回调中使用 &lt;code&gt;napi_env&lt;/code&gt; 参数，因为它可能会执行JavaScript。</target>
        </trans-unit>
        <trans-unit id="6d9348413b98a81a0cf3dd07ab0db2e379200c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;existingPath&lt;/code&gt; and &lt;code&gt;newPath&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">可以使用 &lt;code&gt;file:&lt;/code&gt; 协议将 &lt;code&gt;existingPath&lt;/code&gt; 和 &lt;code&gt;newPath&lt;/code&gt; 参数作为WHATWG &lt;code&gt;URL&lt;/code&gt; 对象。支持目前仍在&lt;em&gt;试验中&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="77a9639aa0f385798a0047ae8b69bbc802072163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit()&lt;/code&gt; method exits the current domain, popping it off the domain stack. Any time execution is going to switch to the context of a different chain of asynchronous calls, it's important to ensure that the current domain is exited. The call to &lt;code&gt;exit()&lt;/code&gt; delimits either the end of or an interruption to the chain of asynchronous calls and I/O operations bound to a domain.</source>
          <target state="translated">所述 &lt;code&gt;exit()&lt;/code&gt; 方法退出当前域，弹出它关闭域栈。每当执行将要切换到不同的异步调用链的上下文时，确保退出当前域很重要。对 &lt;code&gt;exit()&lt;/code&gt; 的调用限制了绑定到域的异步调用和I / O操作链的结束或中断。</target>
        </trans-unit>
        <trans-unit id="48733cf26ae9be875c167b92318f9677041ff285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; variable is available within a module's file-level scope, and is assigned the value of &lt;code&gt;module.exports&lt;/code&gt; before the module is evaluated.</source>
          <target state="translated">该 &lt;code&gt;exports&lt;/code&gt; 变量是一个模块的文件级范围内可用，并且被赋予的价值 &lt;code&gt;module.exports&lt;/code&gt; 模块进行评估之前。</target>
        </trans-unit>
        <trans-unit id="d4838da588ca8557b0914d534154a3d490886ef3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; parameter can be a file descriptor now.</source>
          <target state="translated">该 &lt;code&gt;file&lt;/code&gt; 的参数可以是文件描述了。</target>
        </trans-unit>
        <trans-unit id="22d5077a20466a9b9f6e10fc0c1adc2b51f64e0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; argument may not be provided depending on operating system support. If &lt;code&gt;filename&lt;/code&gt; is provided, it will be provided as a &lt;code&gt;Buffer&lt;/code&gt; if &lt;code&gt;fs.watch()&lt;/code&gt; is called with its &lt;code&gt;encoding&lt;/code&gt; option set to &lt;code&gt;'buffer'&lt;/code&gt;, otherwise &lt;code&gt;filename&lt;/code&gt; will be a UTF-8 string.</source>
          <target state="translated">该 &lt;code&gt;filename&lt;/code&gt; 取决于操作系统的支持也可以不设置参数。如果 &lt;code&gt;filename&lt;/code&gt; 被设置，它将被提供作为 &lt;code&gt;Buffer&lt;/code&gt; 如果 &lt;code&gt;fs.watch()&lt;/code&gt; 被调用，其 &lt;code&gt;encoding&lt;/code&gt; 选项设置为 &lt;code&gt;'buffer'&lt;/code&gt; ，否则 &lt;code&gt;filename&lt;/code&gt; 将是UTF-8字符串。</target>
        </trans-unit>
        <trans-unit id="a28f201faddf9b917438ff36a93787eb3029e6b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">该 &lt;code&gt;filename&lt;/code&gt; 参数可以是WHATWG &lt;code&gt;URL&lt;/code&gt; 利用对象 &lt;code&gt;file:&lt;/code&gt; 协议。支持目前仍在&lt;em&gt;试验中&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4a5de3e0e6bce547b220fb8ea3feb03044f739ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finishFlush&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;finishFlush&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="2d229be81ffd2afb7635ff4b2f3c0698eb23aefb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finished&lt;/code&gt; API is promisify-able as well;</source>
          <target state="translated">在 &lt;code&gt;finished&lt;/code&gt; API是promisify，能为好;</target>
        </trans-unit>
        <trans-unit id="706527d904b2fb4969305ef115835923a10d6a55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is an integer that allows to specify dlopen behavior. See the &lt;a href=&quot;os#os_dlopen_constants&quot;&gt;&lt;code&gt;os.constants.dlopen&lt;/code&gt;&lt;/a&gt; documentation for details.</source>
          <target state="translated">该 &lt;code&gt;flags&lt;/code&gt; 参数是一个整数，允许指定的dlopen行为。有关详细信息，请参见&lt;a href=&quot;os#os_dlopen_constants&quot;&gt; &lt;code&gt;os.constants.dlopen&lt;/code&gt; &lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="27367d1d92b5697db0227446413f596428537264" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is now optional and defaults to &lt;code&gt;'r'&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;flags&lt;/code&gt; 参数现在是可选的，默认为 &lt;code&gt;'r'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09526397e956ee47b394baf26977ccd216515483" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is now only taken as such if it actually contains format specifiers.</source>
          <target state="translated">现在仅当 &lt;code&gt;format&lt;/code&gt; 参数实际包含格式说明符时才采用格式参数。</target>
        </trans-unit>
        <trans-unit id="7bc8c5937b73a750bd5e5600d26b1093e5e39a91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument specifies point encoding and can be &lt;code&gt;'compressed'&lt;/code&gt; or &lt;code&gt;'uncompressed'&lt;/code&gt;. If &lt;code&gt;format&lt;/code&gt; is not specified the point will be returned in &lt;code&gt;'uncompressed'&lt;/code&gt; format.</source>
          <target state="translated">该 &lt;code&gt;format&lt;/code&gt; 参数指定点编码，并且可以 &lt;code&gt;'compressed'&lt;/code&gt; 或 &lt;code&gt;'uncompressed'&lt;/code&gt; 。如果未指定 &lt;code&gt;format&lt;/code&gt; 则该点将以 &lt;code&gt;'uncompressed'&lt;/code&gt; 格式返回。</target>
        </trans-unit>
        <trans-unit id="97b07dd8ca3daf75d2585bd7953e09981f85d3b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument specifies point encoding and can be &lt;code&gt;'compressed'&lt;/code&gt; or &lt;code&gt;'uncompressed'&lt;/code&gt;. If &lt;code&gt;format&lt;/code&gt; is not specified, the point will be returned in &lt;code&gt;'uncompressed'&lt;/code&gt; format.</source>
          <target state="translated">该 &lt;code&gt;format&lt;/code&gt; 参数指定点编码，并且可以 &lt;code&gt;'compressed'&lt;/code&gt; 或 &lt;code&gt;'uncompressed'&lt;/code&gt; 。如果未指定 &lt;code&gt;format&lt;/code&gt; ，则该点将以 &lt;code&gt;'uncompressed'&lt;/code&gt; 格式返回。</target>
        </trans-unit>
        <trans-unit id="512d1e9cf419c61f987590abd4eda55a0aaece8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.SyncWriteStream&lt;/code&gt; class was never intended to be a publicly accessible API and has been removed. No alternative API is available. Please use a userland alternative.</source>
          <target state="translated">该 &lt;code&gt;fs.SyncWriteStream&lt;/code&gt; 类是从未打算成为一个公开访问的API，并已被删除。没有其他可用的API。请使用userland替代方法。</target>
        </trans-unit>
        <trans-unit id="3b3969f60cc471802155198406af45024556947d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.mkdtemp()&lt;/code&gt; method will append the six randomly selected characters directly to the &lt;code&gt;prefix&lt;/code&gt; string. For instance, given a directory &lt;code&gt;/tmp&lt;/code&gt;, if the intention is to create a temporary directory &lt;em&gt;within&lt;/em&gt;&lt;code&gt;/tmp&lt;/code&gt;, the &lt;code&gt;prefix&lt;/code&gt; must end with a trailing platform-specific path separator (&lt;code&gt;require('path').sep&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;fs.mkdtemp()&lt;/code&gt; 方法将六个随机选择的字符直接附加到 &lt;code&gt;prefix&lt;/code&gt; 字符串。例如，给定目录 &lt;code&gt;/tmp&lt;/code&gt; ，如果打算&lt;em&gt;在&lt;/em&gt; &lt;code&gt;/tmp&lt;/code&gt; &lt;em&gt;内&lt;/em&gt;创建一个临时目录，则该 &lt;code&gt;prefix&lt;/code&gt; 必须以特定于平台的尾随路径分隔符（ &lt;code&gt;require('path').sep&lt;/code&gt; ）结尾。</target>
        </trans-unit>
        <trans-unit id="b43021409dbaf79c3301901e3b3cddb0257dfdc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.open()&lt;/code&gt; method is used to allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.</source>
          <target state="translated">所述 &lt;code&gt;fs.open()&lt;/code&gt; 方法用于分配一个新的文件描述符。一旦分配，文件描述符可用于从文件读取数据，向文件写入数据或请求有关文件的信息。</target>
        </trans-unit>
        <trans-unit id="5050f06a70041a240f048ae3b245e2727e08d273" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.promises&lt;/code&gt; API provides an alternative set of asynchronous file system methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('fs').promises&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;fs.promises&lt;/code&gt; API提供了一种替代组异步文件系统的方法返回 &lt;code&gt;Promise&lt;/code&gt; 对象，而不是使用回调。可通过 &lt;code&gt;require('fs').promises&lt;/code&gt; 访问该API 。</target>
        </trans-unit>
        <trans-unit id="69891f9554e4820439907262af47444c9b3b47fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.readFile()&lt;/code&gt; function buffers the entire file. To minimize memory costs, when possible prefer streaming via &lt;code&gt;fs.createReadStream()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;fs.readFile()&lt;/code&gt; 函数缓冲整个文件。为了最大程度地减少内存成本，请尽可能通过 &lt;code&gt;fs.createReadStream()&lt;/code&gt; 流式传输。</target>
        </trans-unit>
        <trans-unit id="71b074ffe9a2bdeb0c4bfd802e18206b5fbec371" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.watch&lt;/code&gt; API is not 100% consistent across platforms, and is unavailable in some situations.</source>
          <target state="translated">该 &lt;code&gt;fs.watch&lt;/code&gt; API是跨平台不是100％一致，在某些情况下无法使用。</target>
        </trans-unit>
        <trans-unit id="d74ffda80caae1884220c03a1ff7a7eb0f46a69d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs&lt;/code&gt; module provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions.</source>
          <target state="translated">该 &lt;code&gt;fs&lt;/code&gt; 模块提供了与在仿照周围标准POSIX功能的方式的文件系统交互的API。</target>
        </trans-unit>
        <trans-unit id="bbd0e2e565c661b9a3e00926ebd169d183ba557f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fsPromises.mkdtemp()&lt;/code&gt; method will append the six randomly selected characters directly to the &lt;code&gt;prefix&lt;/code&gt; string. For instance, given a directory &lt;code&gt;/tmp&lt;/code&gt;, if the intention is to create a temporary directory &lt;em&gt;within&lt;/em&gt;&lt;code&gt;/tmp&lt;/code&gt;, the &lt;code&gt;prefix&lt;/code&gt; must end with a trailing platform-specific path separator (&lt;code&gt;require('path').sep&lt;/code&gt;).</source>
          <target state="translated">所述 &lt;code&gt;fsPromises.mkdtemp()&lt;/code&gt; 方法将六个随机选择的字符直接附加到 &lt;code&gt;prefix&lt;/code&gt; 字符串。例如，给定目录 &lt;code&gt;/tmp&lt;/code&gt; ，如果打算&lt;em&gt;在&lt;/em&gt; &lt;code&gt;/tmp&lt;/code&gt; &lt;em&gt;内&lt;/em&gt;创建一个临时目录，则该 &lt;code&gt;prefix&lt;/code&gt; 必须以特定于平台的尾随路径分隔符（ &lt;code&gt;require('path').sep&lt;/code&gt; ）结尾。</target>
        </trans-unit>
        <trans-unit id="e6bed20438607157322dcd80d8999ccaf445c93a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;generateKeyPair&lt;/code&gt; and &lt;code&gt;generateKeyPairSync&lt;/code&gt; functions now produce key objects if no encoding was specified.</source>
          <target state="translated">该 &lt;code&gt;generateKeyPair&lt;/code&gt; 和 &lt;code&gt;generateKeyPairSync&lt;/code&gt; 如果没有指定编码功能，现在生产的关键对象。</target>
        </trans-unit>
        <trans-unit id="cf3b6cd25ee8891e4d83936876a193907e6a7ee6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;generator&lt;/code&gt; argument can be a number, string, or &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;generator&lt;/code&gt; is not specified, the value &lt;code&gt;2&lt;/code&gt; is used.</source>
          <target state="translated">该 &lt;code&gt;generator&lt;/code&gt; 参数可以是数字，字符串或&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;。如果未指定 &lt;code&gt;generator&lt;/code&gt; ，则使用值 &lt;code&gt;2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7fb03f9df2774a668f92936850f17f31a33d9c3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getters&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;getters&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="c414c011c27eaa196a1f2f35222b45256f28f22a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;groups&lt;/code&gt; array can contain numeric group IDs, group names or both.</source>
          <target state="translated">该 &lt;code&gt;groups&lt;/code&gt; 阵列可包含数字组ID，组名或两者。</target>
        </trans-unit>
        <trans-unit id="3a833b425252dc97918bfb21e6854a976c340208" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; object can be either a server, a socket (anything with an underlying &lt;code&gt;_handle&lt;/code&gt; member), or an object with an &lt;code&gt;fd&lt;/code&gt; member that is a valid file descriptor.</source>
          <target state="translated">所述 &lt;code&gt;handle&lt;/code&gt; 对象可以是一个服务器，一个插座（与下面任何 &lt;code&gt;_handle&lt;/code&gt; 部件），或与物体 &lt;code&gt;fd&lt;/code&gt; 部件，是一个有效的文件描述符。</target>
        </trans-unit>
        <trans-unit id="5fe58b45e79c330bacba8ef6c3d083eec4ad1d42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hash&lt;/code&gt; property is the fragment identifier portion of the URL including the leading &lt;code&gt;#&lt;/code&gt; character.</source>
          <target state="translated">所述 &lt;code&gt;hash&lt;/code&gt; 属性是URL包括前导的片段标识符部分 &lt;code&gt;#&lt;/code&gt; 字符。</target>
        </trans-unit>
        <trans-unit id="9b971a2c3fa7c4ee351bc0962b6dd290b13d2a41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option defaults to &lt;code&gt;0&lt;/code&gt; in all cases now. Previously, in the absence of the &lt;code&gt;family&lt;/code&gt; option it would default to &lt;code&gt;dns.ADDRCONFIG | dns.V4MAPPED&lt;/code&gt;.</source>
          <target state="translated">现在，在所有情况下， &lt;code&gt;hints&lt;/code&gt; 选项默认为 &lt;code&gt;0&lt;/code&gt; 。以前，在没有 &lt;code&gt;family&lt;/code&gt; 选项的情况下，它将默认为 &lt;code&gt;dns.ADDRCONFIG | dns.V4MAPPED&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18653303895ce097a5504ae43d5170d72df3c34a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option is now supported.</source>
          <target state="translated">该 &lt;code&gt;hints&lt;/code&gt; 现在支持选项。</target>
        </trans-unit>
        <trans-unit id="053e6bd05fa0fbb307a5d54eb6487d94b8a85e2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option is supported now.</source>
          <target state="translated">在 &lt;code&gt;hints&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="04278f1b07d014dfdc021e46e970ec2ad3bb52d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;historySize&lt;/code&gt; option can be &lt;code&gt;0&lt;/code&gt; now.</source>
          <target state="translated">该 &lt;code&gt;historySize&lt;/code&gt; 选项可以是 &lt;code&gt;0&lt;/code&gt; 了。</target>
        </trans-unit>
        <trans-unit id="bd637527f354d50e0755926a886a0e485028e79e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">该 &lt;code&gt;host&lt;/code&gt; 参数现在支持。</target>
        </trans-unit>
        <trans-unit id="2749f6daae838de15678cf4dd488bcb1358def17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; property is the full lower-cased host portion of the URL, including the &lt;code&gt;port&lt;/code&gt; if specified.</source>
          <target state="translated">的 &lt;code&gt;host&lt;/code&gt; 属性是URL的全小写主机部分，包括 &lt;code&gt;port&lt;/code&gt; ，如果指定。</target>
        </trans-unit>
        <trans-unit id="6c0c38e22555230472f06d34eb68eaf5ce24d077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostname&lt;/code&gt; property is the lower-cased host name portion of the &lt;code&gt;host&lt;/code&gt; component &lt;em&gt;without&lt;/em&gt; the &lt;code&gt;port&lt;/code&gt; included.</source>
          <target state="translated">的 &lt;code&gt;hostname&lt;/code&gt; 属性是的套管下主机名部分 &lt;code&gt;host&lt;/code&gt; 部件&lt;em&gt;而不&lt;/em&gt;所述 &lt;code&gt;port&lt;/code&gt; 包括在内。</target>
        </trans-unit>
        <trans-unit id="998060cae450269301b689074185c6d9c3eb67ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;href&lt;/code&gt; property is the full URL string that was parsed with both the &lt;code&gt;protocol&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; components converted to lower-case.</source>
          <target state="translated">的 &lt;code&gt;href&lt;/code&gt; 属性是用两个解析完整的URL字符串 &lt;code&gt;protocol&lt;/code&gt; 和 &lt;code&gt;host&lt;/code&gt; 组件转换为小写。</target>
        </trans-unit>
        <trans-unit id="030f78ddaf21d184576156325eba98bebd2bd148" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2.getDefaultSettings()&lt;/code&gt;, &lt;code&gt;http2.getPackedSettings()&lt;/code&gt;, &lt;code&gt;http2.createServer()&lt;/code&gt;, &lt;code&gt;http2.createSecureServer()&lt;/code&gt;, &lt;code&gt;http2session.settings()&lt;/code&gt;, &lt;code&gt;http2session.localSettings&lt;/code&gt;, and &lt;code&gt;http2session.remoteSettings&lt;/code&gt; APIs either return or receive as input an object that defines configuration settings for an &lt;code&gt;Http2Session&lt;/code&gt; object. These objects are ordinary JavaScript objects containing the following properties.</source>
          <target state="translated">所述 &lt;code&gt;http2.getDefaultSettings()&lt;/code&gt; ， &lt;code&gt;http2.getPackedSettings()&lt;/code&gt; ， &lt;code&gt;http2.createServer()&lt;/code&gt; ， &lt;code&gt;http2.createSecureServer()&lt;/code&gt; ， &lt;code&gt;http2session.settings()&lt;/code&gt; ， &lt;code&gt;http2session.localSettings&lt;/code&gt; 和 &lt;code&gt;http2session.remoteSettings&lt;/code&gt; 的API或者返回或接收作为输入的对象定义 &lt;code&gt;Http2Session&lt;/code&gt; 对象的配置设置。这些对象是包含以下属性的普通JavaScript对象。</target>
        </trans-unit>
        <trans-unit id="49f7803f945b28f0689831e69895b549945bf369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2&lt;/code&gt; Core API is much more symmetric between client and server than the &lt;code&gt;http&lt;/code&gt; API. For instance, most events, like &lt;code&gt;'error'&lt;/code&gt;, &lt;code&gt;'connect'&lt;/code&gt; and &lt;code&gt;'stream'&lt;/code&gt;, can be emitted either by client-side code or server-side code.</source>
          <target state="translated">该 &lt;code&gt;http2&lt;/code&gt; 核心API是客户端和服务器比之间更加对称的 &lt;code&gt;http&lt;/code&gt; API。例如，大多数事件，例如 &lt;code&gt;'error'&lt;/code&gt; ， &lt;code&gt;'connect'&lt;/code&gt; 和 &lt;code&gt;'stream'&lt;/code&gt; ，都可以由客户端代码或服务器端代码发出。</target>
        </trans-unit>
        <trans-unit id="17b1e503059e1af4f65e309d49229e66e8fc0e50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2&lt;/code&gt; module provides an implementation of the &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;HTTP/2&lt;/a&gt; protocol. It can be accessed using:</source>
          <target state="translated">所述 &lt;code&gt;http2&lt;/code&gt; 模块提供的实现&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;HTTP / 2&lt;/a&gt;协议。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="221ef6633a5b5159ca7a2ec64108549b9b1ee05c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2session.type&lt;/code&gt; will be equal to &lt;code&gt;http2.constants.NGHTTP2_SESSION_SERVER&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance is a server, and &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; if the instance is a client.</source>
          <target state="translated">该 &lt;code&gt;http2session.type&lt;/code&gt; 将等于 &lt;code&gt;http2.constants.NGHTTP2_SESSION_SERVER&lt;/code&gt; 如果这 &lt;code&gt;Http2Session&lt;/code&gt; 实例的服务器，并且 &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; 如果实例是一个客户端。</target>
        </trans-unit>
        <trans-unit id="de2ccc067c77f440a48986ade62790f284e7b4db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.close()&lt;/code&gt; method is called, and pending data has been read.</source>
          <target state="translated">所述 &lt;code&gt;http2stream.close()&lt;/code&gt; 方法被调用，并且待处理的数据已被读出。</target>
        </trans-unit>
        <trans-unit id="77560b2b0d8bbfb538a8a3ebe0e37ff202a3f8fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.destroy()&lt;/code&gt; or &lt;code&gt;http2session.destroy()&lt;/code&gt; methods are called.</source>
          <target state="translated">该 &lt;code&gt;http2stream.destroy()&lt;/code&gt; 或 &lt;code&gt;http2session.destroy()&lt;/code&gt; 方法被调用。</target>
        </trans-unit>
        <trans-unit id="c91e96a400ed5b707a5db055d844cc0bc3b12ca9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.pushStream()&lt;/code&gt; method is called.</source>
          <target state="translated">所述 &lt;code&gt;http2stream.pushStream()&lt;/code&gt; 方法被调用。</target>
        </trans-unit>
        <trans-unit id="c24866f2679c9a1b2b7618cf886b9fc0b058641d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method cannot be called until after the &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted on an &lt;code&gt;Http2Stream&lt;/code&gt; object. The &lt;code&gt;'wantTrailers'&lt;/code&gt; event will only be emitted if the &lt;code&gt;waitForTrailers&lt;/code&gt; option is set for the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; 方法不能被调用，直到后 &lt;code&gt;'wantTrailers'&lt;/code&gt; 事件被发射的上 &lt;code&gt;Http2Stream&lt;/code&gt; 对象。该 &lt;code&gt;'wantTrailers'&lt;/code&gt; 如果事件只发射 &lt;code&gt;waitForTrailers&lt;/code&gt; 选项设置为 &lt;code&gt;Http2Stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="358c32f4bc69cf40fd7e6290a30048c00cc82993" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; and &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; properties are deprecated. Use one of the public methods (e.g. &lt;code&gt;OutgoingMessage.prototype.getHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.getHeaders()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.getHeaderNames()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.hasHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.removeHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.setHeader()&lt;/code&gt;) for working with outgoing headers.</source>
          <target state="translated">不建议使用 &lt;code&gt;http&lt;/code&gt; 模块 &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; 和 &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; 属性。使用公共方法之一（例如， &lt;code&gt;OutgoingMessage.prototype.getHeader()&lt;/code&gt; ， &lt;code&gt;OutgoingMessage.prototype.getHeaders()&lt;/code&gt; ， &lt;code&gt;OutgoingMessage.prototype.getHeaderNames()&lt;/code&gt; ， &lt;code&gt;OutgoingMessage.prototype.hasHeader()&lt;/code&gt; ， &lt;code&gt;OutgoingMessage.prototype.removeHeader()&lt;/code&gt; ， &lt;code&gt;OutgoingMessage.prototype.setHeader()&lt;/code&gt; ）用于处理传出标头。</target>
        </trans-unit>
        <trans-unit id="637eb8d39fd696e261d53ed71950da5b93479796" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;OutgoingMessage.prototype._renderHeaders()&lt;/code&gt; API is deprecated.</source>
          <target state="translated">不建议使用 &lt;code&gt;http&lt;/code&gt; 模块 &lt;code&gt;OutgoingMessage.prototype._renderHeaders()&lt;/code&gt; API。</target>
        </trans-unit>
        <trans-unit id="646d914a75a6436a127ce9860c30e69de08491ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; API is deprecated. Please use &lt;code&gt;ServerResponse.prototype.writeHead()&lt;/code&gt; instead.</source>
          <target state="translated">不建议使用 &lt;code&gt;http&lt;/code&gt; 模块 &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; API。请改用 &lt;code&gt;ServerResponse.prototype.writeHead()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7261c4b49ac7812caefc611e5afe4d784b89feb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;icu&lt;/code&gt; property is now supported.</source>
          <target state="translated">在 &lt;code&gt;icu&lt;/code&gt; 现在支持的属性。</target>
        </trans-unit>
        <trans-unit id="e7890dd47100cfd73eb85b14133b651e0037d68a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreErrors&lt;/code&gt; option was introduced.</source>
          <target state="translated">该 &lt;code&gt;ignoreErrors&lt;/code&gt; 介绍选项。</target>
        </trans-unit>
        <trans-unit id="4ac2e36d27344790e2460b7911af062bfb314225" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import.meta&lt;/code&gt; metaproperty is an &lt;code&gt;Object&lt;/code&gt; that contains the following property:</source>
          <target state="translated">该 &lt;code&gt;import.meta&lt;/code&gt; 元属性是一个 &lt;code&gt;Object&lt;/code&gt; ，它包含以下属性：</target>
        </trans-unit>
        <trans-unit id="49a0c2f363f6d983a8eada0b6fedc41926fc28c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; hook will trigger when an &lt;code&gt;AsyncResource&lt;/code&gt; is instantiated.</source>
          <target state="translated">在 &lt;code&gt;init&lt;/code&gt; 时的钩子将触发 &lt;code&gt;AsyncResource&lt;/code&gt; 被实例化。</target>
        </trans-unit>
        <trans-unit id="db4a0b3a2e021f4bdfad5bc1d5a6e56641914872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; option can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;input&lt;/code&gt; 选项现在可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af5c3e4a87313354ccf9f4aa00c92f59b988d2c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; option can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;input&lt;/code&gt; 选项现在可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df7edb459abfc8207448861fb6d62addd3407892" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream is not paused and receives the &lt;code&gt;'SIGCONT'&lt;/code&gt; event. (See events &lt;a href=&quot;readline#readline_event_sigtstp&quot;&gt;&lt;code&gt;'SIGTSTP'&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;readline#readline_event_sigcont&quot;&gt;&lt;code&gt;'SIGCONT'&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">该 &lt;code&gt;input&lt;/code&gt; 流不暂停并接收 &lt;code&gt;'SIGCONT'&lt;/code&gt; 事件。（请参见事件&lt;a href=&quot;readline#readline_event_sigtstp&quot;&gt; &lt;code&gt;'SIGTSTP'&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;readline#readline_event_sigcont&quot;&gt; &lt;code&gt;'SIGCONT'&lt;/code&gt; &lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="3ee5822dcfd304c76a5ffa2f5d4b728db3799dc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream is paused.</source>
          <target state="translated">将 &lt;code&gt;input&lt;/code&gt; 流被暂停。</target>
        </trans-unit>
        <trans-unit id="2df9f73cfc483053aab32bfe5533e1a25c271a1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; to signal &lt;code&gt;SIGINT&lt;/code&gt; and there is no &lt;code&gt;'SIGINT'&lt;/code&gt; event listener registered on the &lt;code&gt;readline.Interface&lt;/code&gt; instance.</source>
          <target state="translated">该 &lt;code&gt;input&lt;/code&gt; 流接收 &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; 到信号 &lt;code&gt;SIGINT&lt;/code&gt; 并且没有 &lt;code&gt;'SIGINT'&lt;/code&gt; 上注册的事件侦听器 &lt;code&gt;readline.Interface&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="19ffd24b7be2889cd9b67fc0e30774377bb486cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; to signal end-of-transmission (EOT);</source>
          <target state="translated">该 &lt;code&gt;input&lt;/code&gt; 流接收 &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; 到信号传输结束-（EOT）;</target>
        </trans-unit>
        <trans-unit id="fb307dffe6f05523d47993892fbcc5b1b86d93e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives its &lt;code&gt;'end'&lt;/code&gt; event;</source>
          <target state="translated">该 &lt;code&gt;input&lt;/code&gt; 流接收其 &lt;code&gt;'end'&lt;/code&gt; 事件;</target>
        </trans-unit>
        <trans-unit id="d04877e5405a4dc1c1a71d8fe62cd536eaf0588e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspectOptions&lt;/code&gt; option is introduced.</source>
          <target state="translated">该 &lt;code&gt;inspectOptions&lt;/code&gt; 选项介绍。</target>
        </trans-unit>
        <trans-unit id="c8e3f99c777e534b0710502a380d35e942192366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspectPort&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;inspectPort&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="f2a23f09be367ac5c32f81df1e0be355bca0f3ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector.Session&lt;/code&gt; is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications.</source>
          <target state="translated">所述 &lt;code&gt;inspector.Session&lt;/code&gt; 用于调度消息到V8检查员后端和接收消息响应和通知。</target>
        </trans-unit>
        <trans-unit id="1673d36b6d4ff5339c7cdf1c8ca2771a52789638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; is not active when &lt;code&gt;inspector.waitForDebugger()&lt;/code&gt; is called.</source>
          <target state="translated">调用 &lt;code&gt;inspector.waitForDebugger()&lt;/code&gt; 时， &lt;code&gt;inspector&lt;/code&gt; 器未处于活动状态。</target>
        </trans-unit>
        <trans-unit id="8f150b7dcc586beef8809bc0c329c872df4c6450" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; module is not available for use.</source>
          <target state="translated">该 &lt;code&gt;inspector&lt;/code&gt; 模块是不可用。</target>
        </trans-unit>
        <trans-unit id="43c935ccd266c90668fafe79ecf59bfac32471dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; module provides an API for interacting with the V8 inspector.</source>
          <target state="translated">该 &lt;code&gt;inspector&lt;/code&gt; 模块提供与V8检查交互的API。</target>
        </trans-unit>
        <trans-unit id="9a3568429cf6b04a52b84c92f6edb033b6d2d0fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ipv6Only&lt;/code&gt; option is supported.</source>
          <target state="translated">该 &lt;code&gt;ipv6Only&lt;/code&gt; 选项的支持。</target>
        </trans-unit>
        <trans-unit id="eabb45d71a6ceccea5ae6288c84a3112b1682ea5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;issuer&lt;/code&gt; can be &lt;code&gt;null&lt;/code&gt; if the certificate is either self-signed or the issuer is not in the root certificates list. (An issuer may be provided via the &lt;code&gt;ca&lt;/code&gt; option when establishing the TLS connection.)</source>
          <target state="translated">该 &lt;code&gt;issuer&lt;/code&gt; 可以为 &lt;code&gt;null&lt;/code&gt; ，如果该证书是自签名或发行人不在根证书列表。（建立TLS连接时，可以通过 &lt;code&gt;ca&lt;/code&gt; 选项提供颁发者。）</target>
        </trans-unit>
        <trans-unit id="bfbc853b74447076da49fbe1f1ba5e8d12545de7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iterations&lt;/code&gt; argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete.</source>
          <target state="translated">该 &lt;code&gt;iterations&lt;/code&gt; 参数必须是一个数设置尽可能高。迭代次数越多，派生密钥将越安全，但是完成所需的时间将更长。</target>
        </trans-unit>
        <trans-unit id="03868ecb29ac859681e14576c1131d0017356374" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iv&lt;/code&gt; parameter may now be &lt;code&gt;null&lt;/code&gt; for ciphers which do not need an initialization vector.</source>
          <target state="translated">该 &lt;code&gt;iv&lt;/code&gt; 参数现在可能是 &lt;code&gt;null&lt;/code&gt; 的，其不需要初始化向量密码。</target>
        </trans-unit>
        <trans-unit id="8921fa68940edce16e188119827079689fd8187d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a &lt;code&gt;KeyObject&lt;/code&gt; with type &lt;code&gt;private&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;key&lt;/code&gt; 参数可以是类型为 &lt;code&gt;private&lt;/code&gt; 的 &lt;code&gt;KeyObject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cafd672d3c4665a35d1633dd54172928bcbe5641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a &lt;code&gt;KeyObject&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;key&lt;/code&gt; 参数现在可以是 &lt;code&gt;KeyObject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f026eccc533fce80be766457d2fbda4c0a108025" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a private key.</source>
          <target state="translated">在 &lt;code&gt;key&lt;/code&gt; 参数，现在可以私钥。</target>
        </trans-unit>
        <trans-unit id="b9014c3f8163dbd4b28bba211ee7ff2c9d8473c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; is the HMAC key used to generate the cryptographic HMAC hash. If it is a &lt;a href=&quot;#crypto_class_keyobject&quot;&gt;&lt;code&gt;KeyObject&lt;/code&gt;&lt;/a&gt;, its type must be &lt;code&gt;secret&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;key&lt;/code&gt; 是用来生成加密哈希HMAC HMAC密钥。如果它是&lt;a href=&quot;#crypto_class_keyobject&quot;&gt; &lt;code&gt;KeyObject&lt;/code&gt; &lt;/a&gt;，则其类型必须是 &lt;code&gt;secret&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29ef7b348c30af429329ae739855eee669bfa054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; is the raw key used by the &lt;code&gt;algorithm&lt;/code&gt; and &lt;code&gt;iv&lt;/code&gt; is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Initialization_vector&quot;&gt;initialization vector&lt;/a&gt;. Both arguments must be &lt;code&gt;'utf8'&lt;/code&gt; encoded strings, &lt;a href=&quot;buffer&quot;&gt;Buffers&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;s. The &lt;code&gt;key&lt;/code&gt; may optionally be a &lt;a href=&quot;#crypto_class_keyobject&quot;&gt;&lt;code&gt;KeyObject&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;secret&lt;/code&gt;. If the cipher does not need an initialization vector, &lt;code&gt;iv&lt;/code&gt; may be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;key&lt;/code&gt; 是由所使用的原始密钥 &lt;code&gt;algorithm&lt;/code&gt; 和 &lt;code&gt;iv&lt;/code&gt; 是一个&lt;a href=&quot;https://en.wikipedia.org/wiki/Initialization_vector&quot;&gt;初始化向量&lt;/a&gt;。两个参数都必须是 &lt;code&gt;'utf8'&lt;/code&gt; 编码的字符串，&lt;a href=&quot;buffer&quot;&gt;Buffers&lt;/a&gt;， &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。所述 &lt;code&gt;key&lt;/code&gt; 可以任选是&lt;a href=&quot;#crypto_class_keyobject&quot;&gt; &lt;code&gt;KeyObject&lt;/code&gt; &lt;/a&gt;类型的 &lt;code&gt;secret&lt;/code&gt; 。如果密码不需要初始化向量，则 &lt;code&gt;iv&lt;/code&gt; 可以为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bafa8e5f7656a13a7f0bf36422494a865effaa99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keylog&lt;/code&gt; event is emitted on a client &lt;code&gt;tls.TLSSocket&lt;/code&gt; when key material is generated or received by the socket. This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times, before or after the handshake completes.</source>
          <target state="translated">所述 &lt;code&gt;keylog&lt;/code&gt; 事件被发射上的客户端 &lt;code&gt;tls.TLSSocket&lt;/code&gt; 当产生或由插座接收到的密钥材料。可以存储此密钥材料以进行调试，因为它可以对捕获的TLS通信进行解密。在握手完成之前或之后，它可能会发出多次。</target>
        </trans-unit>
        <trans-unit id="1b5c9959237d932a1dd90e1d5e7ccd6afbcaa1bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keylog&lt;/code&gt; event is emitted when key material is generated or received by a connection to this server (typically before handshake has completed, but not necessarily). This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times for each socket.</source>
          <target state="translated">所述 &lt;code&gt;keylog&lt;/code&gt; 时生成的密钥材料或通过到该服务器的连接接收（握手完成之前通常，但不是必须）被发射事件。可以存储此密钥材料以进行调试，因为它可以对捕获的TLS通信进行解密。每个插槽可能会发出多次。</target>
        </trans-unit>
        <trans-unit id="8e25eb3ce4cc53afe7df92ff2547e9ea6c1abd85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; parameter can now be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;length&lt;/code&gt; 现在参数可以是 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8474fcae614a88cc1859b34f296796c04ff4a24b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; gets two arguments the current stat object and the previous stat object:</source>
          <target state="translated">该 &lt;code&gt;listener&lt;/code&gt; 有两个参数当前统计对象和统计以前的对象：</target>
        </trans-unit>
        <trans-unit id="b95fd1fb410073e13c6931880070a9ae7e41ec9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; option is supported now.</source>
          <target state="translated">在 &lt;code&gt;lookup&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="0661e96f6a1fa8202e0885fe2e819d379f5b3c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; option is supported.</source>
          <target state="translated">在 &lt;code&gt;lookup&lt;/code&gt; 选项的支持。</target>
        </trans-unit>
        <trans-unit id="a263c4d70f3c9893353d874e8b88eb6a65c7562d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lts&lt;/code&gt; property is now supported.</source>
          <target state="translated">该 &lt;code&gt;lts&lt;/code&gt; 现在支持的属性。</target>
        </trans-unit>
        <trans-unit id="b5b4dafcc9dd09a489be54c49427119ae4eacbe5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxArrayLength&lt;/code&gt; option is supported now; in particular, long arrays are truncated by default.</source>
          <target state="translated">该 &lt;code&gt;maxArrayLength&lt;/code&gt; 选项现在支持; 特别是长数组在默认情况下会被截断。</target>
        </trans-unit>
        <trans-unit id="9f0e93d57c97db265be6481e8ebb1720a769436b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxBuffer&lt;/code&gt; option specifies the largest number of bytes allowed on &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt;. If this value is exceeded, then the child process is terminated. This impacts output that includes multibyte character encodings such as UTF-8 or UTF-16. For instance, &lt;code&gt;console.log('中文测试')&lt;/code&gt; will send 13 UTF-8 encoded bytes to &lt;code&gt;stdout&lt;/code&gt; although there are only 4 characters.</source>
          <target state="translated">该 &lt;code&gt;maxBuffer&lt;/code&gt; 选项指定允许的字节数量最多的 &lt;code&gt;stdout&lt;/code&gt; 或 &lt;code&gt;stderr&lt;/code&gt; 。如果超过该值，则子进程终止。这会影响包括多字节字符编码（例如UTF-8或UTF-16）的输出。例如， &lt;code&gt;console.log('中文测试')&lt;/code&gt; 会将13个UTF-8编码的字节发送到 &lt;code&gt;stdout&lt;/code&gt; ,尽管只有4个字符。</target>
        </trans-unit>
        <trans-unit id="bdf828d79d9c65c3d2308f93d966b829b5353cb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxHeaderListSize&lt;/code&gt; setting is now strictly enforced.</source>
          <target state="translated">该 &lt;code&gt;maxHeaderListSize&lt;/code&gt; 设置现在被严格执行。</target>
        </trans-unit>
        <trans-unit id="1a220a1dff3522aa6ba343896510506f310f7309" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxmem&lt;/code&gt; value can now be any safe integer.</source>
          <target state="translated">现在， &lt;code&gt;maxmem&lt;/code&gt; 值可以是任何安全整数。</target>
        </trans-unit>
        <trans-unit id="2910047a49f404706f3c278c96a92461ef2d5246" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message.aborted&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if the request has been aborted.</source>
          <target state="translated">该 &lt;code&gt;message.aborted&lt;/code&gt; 属性将是 &lt;code&gt;true&lt;/code&gt; ，如果该请求已经中止。</target>
        </trans-unit>
        <trans-unit id="c78b424a8fdbcfde8dcaaaf45220f24d0c8c92ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message.complete&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if a complete HTTP message has been received and successfully parsed.</source>
          <target state="translated">该 &lt;code&gt;message.complete&lt;/code&gt; 属性将是 &lt;code&gt;true&lt;/code&gt; ，如果已经接收到完整的HTTP消息，并成功地解析。</target>
        </trans-unit>
        <trans-unit id="6ea2ab0f1116b6046fd1c04b56051fcdef1efe04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message&lt;/code&gt; parameter is respected now.</source>
          <target state="translated">该 &lt;code&gt;message&lt;/code&gt; 现在参数被尊重。</target>
        </trans-unit>
        <trans-unit id="95cafa66742d9a54e282f1f89e2ac2a52f93ac10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;minVersion&lt;/code&gt; and &lt;code&gt;maxVersion&lt;/code&gt; can be used to restrict the allowed TLS protocol versions.</source>
          <target state="translated">的 &lt;code&gt;minVersion&lt;/code&gt; 和 &lt;code&gt;maxVersion&lt;/code&gt; 可以用来限制所允许的TLS协议的版本。</target>
        </trans-unit>
        <trans-unit id="85196439ab75a01651afe6c358739c962e8b4142" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; argument used in both the &lt;code&gt;fs.chmod()&lt;/code&gt; and &lt;code&gt;fs.chmodSync()&lt;/code&gt; methods is a numeric bitmask created using a logical OR of the following constants:</source>
          <target state="translated">在 &lt;code&gt;fs.chmod()&lt;/code&gt; 和 &lt;code&gt;fs.chmodSync()&lt;/code&gt; 方法中使用的 &lt;code&gt;mode&lt;/code&gt; 参数是使用以下常量的逻辑或创建的数字位掩码：</target>
        </trans-unit>
        <trans-unit id="2ec0556bd164fb5f6f007e756d8a286bbf69595a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.exports&lt;/code&gt; object is created by the &lt;code&gt;Module&lt;/code&gt; system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to &lt;code&gt;module.exports&lt;/code&gt;. Assigning the desired object to &lt;code&gt;exports&lt;/code&gt; will simply rebind the local &lt;code&gt;exports&lt;/code&gt; variable, which is probably not what is desired.</source>
          <target state="translated">所述 &lt;code&gt;module.exports&lt;/code&gt; 目的是通过创建 &lt;code&gt;Module&lt;/code&gt; 系统。有时这是不可接受的；许多人希望他们的模块成为某个类的实例。为此，请将所需的导出对象分配给 &lt;code&gt;module.exports&lt;/code&gt; 。将期望的对象分配给 &lt;code&gt;exports&lt;/code&gt; 将仅重新绑定本地 &lt;code&gt;exports&lt;/code&gt; 变量，这可能不是所希望的。</target>
        </trans-unit>
        <trans-unit id="7741269d9ec5a257707126dc0b6412895ee24cc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.exports&lt;/code&gt; property can be assigned a new value (such as a function or object).</source>
          <target state="translated">所述 &lt;code&gt;module.exports&lt;/code&gt; 属性可以分配一个新的值（例如，功能或对象）。</target>
        </trans-unit>
        <trans-unit id="83b552f2fcab82083bd52fcea2777b5d1ccc766c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.require()&lt;/code&gt; method provides a way to load a module as if &lt;code&gt;require()&lt;/code&gt; was called from the original module.</source>
          <target state="translated">所述 &lt;code&gt;module.require()&lt;/code&gt; 方法提供了一种方式来加载一个仿佛模块 &lt;code&gt;require()&lt;/code&gt; 从原始模块调用。</target>
        </trans-unit>
        <trans-unit id="0c2cea094d99b8a6b21113410956face81228b7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; Object</source>
          <target state="translated">该 &lt;code&gt;module&lt;/code&gt; 对象</target>
        </trans-unit>
        <trans-unit id="7e7a0f9b045b1ebc95a32e313c720c988b31f8ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; objects that the implementor can use to export values from the module.</source>
          <target state="translated">该 &lt;code&gt;module&lt;/code&gt; 和 &lt;code&gt;exports&lt;/code&gt; 对象的实现者可以用它来从模块输出值。</target>
        </trans-unit>
        <trans-unit id="a7d0cfde8c11c32a565d5356d3d6a5250d5da0da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module_name&lt;/code&gt; must match the filename of the final binary (excluding the &lt;code&gt;.node&lt;/code&gt; suffix).</source>
          <target state="translated">所述 &lt;code&gt;module_name&lt;/code&gt; 必须最终二进制的文件名（不包括匹配 &lt;code&gt;.node&lt;/code&gt; 后缀）。</target>
        </trans-unit>
        <trans-unit id="4327ee27361cd2e73d674b05a8d012bb50878667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; argument contains the message to be sent. Depending on its type, different behavior can apply. If &lt;code&gt;msg&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; or &lt;code&gt;Uint8Array&lt;/code&gt;, the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; specify the offset within the &lt;code&gt;Buffer&lt;/code&gt; where the message begins and the number of bytes in the message, respectively. If &lt;code&gt;msg&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;, then it is automatically converted to a &lt;code&gt;Buffer&lt;/code&gt; with &lt;code&gt;'utf8'&lt;/code&gt; encoding. With messages that contain multi-byte characters, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; will be calculated with respect to &lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;byte length&lt;/a&gt; and not the character position. If &lt;code&gt;msg&lt;/code&gt; is an array, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; must not be specified.</source>
          <target state="translated">该 &lt;code&gt;msg&lt;/code&gt; 参数包含要发送的消息。根据其类型，可以应用不同的行为。如果 &lt;code&gt;msg&lt;/code&gt; 是一个 &lt;code&gt;Buffer&lt;/code&gt; 或 &lt;code&gt;Uint8Array&lt;/code&gt; 中， &lt;code&gt;offset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 指定内的偏移 &lt;code&gt;Buffer&lt;/code&gt; 的消息开始处分别在该消息中的字节数，和。如果 &lt;code&gt;msg&lt;/code&gt; 是 &lt;code&gt;String&lt;/code&gt; ，则它将自动转换为具有 &lt;code&gt;'utf8'&lt;/code&gt; 编码的 &lt;code&gt;Buffer&lt;/code&gt; 。与包含多字节字符的消息， &lt;code&gt;offset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 将相对于要计算&lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;字节长度&lt;/a&gt;而不是角色位置。如果 &lt;code&gt;msg&lt;/code&gt; 是一个数组，则不得指定 &lt;code&gt;offset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2075a60413e8276b59620a4d198fc1c48b94d2fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; parameter can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">该 &lt;code&gt;msg&lt;/code&gt; 参数可以是一个 &lt;code&gt;Uint8Array&lt;/code&gt; 现在。</target>
        </trans-unit>
        <trans-unit id="0d6ec7207b4873c92fc17dd896ab5164bb27bddb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; parameter can be an array now. Also, the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are optional now.</source>
          <target state="translated">该 &lt;code&gt;msg&lt;/code&gt; 参数可以是现在的阵列。另外， &lt;code&gt;offset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 参数现在是可选的。</target>
        </trans-unit>
        <trans-unit id="5ce94e146f1bee23f4a19a2c9729e94ce4ff608c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property of the &lt;code&gt;PerformanceEntry&lt;/code&gt; will be equal to either &lt;code&gt;'Http2Stream'&lt;/code&gt; or &lt;code&gt;'Http2Session'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceEntry&lt;/code&gt; 的 &lt;code&gt;name&lt;/code&gt; 属性将等于 &lt;code&gt;'Http2Stream'&lt;/code&gt; 或 &lt;code&gt;'Http2Session'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fead3a1b10f1cd1219ecd83f4f5309be607d6bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;napi_status&lt;/code&gt; return value provides a VM-independent representation of the error which occurred. In some cases it is useful to be able to get more detailed information, including a string representing the error as well as VM (engine)-specific information.</source>
          <target state="translated">所述 &lt;code&gt;napi_status&lt;/code&gt; 返回值提供了发生错误的VM无关的表示。在某些情况下，获取更详细的信息（包括表示错误的字符串以及特定于VM（引擎）的信息）很有用。</target>
        </trans-unit>
        <trans-unit id="a5592b5c4bb94af8a694920848a14649e29bdb54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net&lt;/code&gt; module provides an asynchronous network API for creating stream-based TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; servers (&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt;&lt;code&gt;net.createServer()&lt;/code&gt;&lt;/a&gt;) and clients (&lt;a href=&quot;#net_net_createconnection&quot;&gt;&lt;code&gt;net.createConnection()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">所述 &lt;code&gt;net&lt;/code&gt; 模块提供了用于创建基于数据流的TCP或异步网络API &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;服务器（&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt; &lt;code&gt;net.createServer()&lt;/code&gt; &lt;/a&gt;）和客户端（&lt;a href=&quot;#net_net_createconnection&quot;&gt; &lt;code&gt;net.createConnection()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="afe70f2afea81de2ad39fdbdca8f06a2bf7b7881" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net&lt;/code&gt; module supports IPC with named pipes on Windows, and Unix domain sockets on other operating systems.</source>
          <target state="translated">该 &lt;code&gt;net&lt;/code&gt; 模块支持IPC与Windows命名管道和在其他操作系统的Unix域套接字。</target>
        </trans-unit>
        <trans-unit id="c99c66ffa459f318d34b430b1960b9ec1ec032dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Buffer(size)&lt;/code&gt; will return zero-filled memory by default.</source>
          <target state="translated">默认情况下， &lt;code&gt;new Buffer(size)&lt;/code&gt; 将返回零填充的内存。</target>
        </trans-unit>
        <trans-unit id="ad7337a8c889e7d305644a015405dea9b202ed4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oaepHash&lt;/code&gt; option was added.</source>
          <target state="translated">该 &lt;code&gt;oaepHash&lt;/code&gt; 加入选项。</target>
        </trans-unit>
        <trans-unit id="885ca29403d392148790862294f2104b877b5980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; options may be used to limit the response to a specific range subset. This can be used, for instance, to support HTTP Range requests.</source>
          <target state="translated">的 &lt;code&gt;offset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 的选择可被用于限制到特定的范围的子集的响应。例如，它可以用于支持HTTP Range请求。</target>
        </trans-unit>
        <trans-unit id="3912ef30ca5bc4619350e3a871983ad1a82598df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are optional now.</source>
          <target state="translated">的 &lt;code&gt;offset&lt;/code&gt; 和 &lt;code&gt;length&lt;/code&gt; 参数现在是可选的。</target>
        </trans-unit>
        <trans-unit id="a23df2f613658facfd004babcb0062fd4ef3fab7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oldPath&lt;/code&gt; and &lt;code&gt;newPath&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">使用 &lt;code&gt;file:&lt;/code&gt; 协议， &lt;code&gt;oldPath&lt;/code&gt; 和 &lt;code&gt;newPath&lt;/code&gt; 参数可以是WHATWG &lt;code&gt;URL&lt;/code&gt; 对象。支持目前仍在&lt;em&gt;试验中&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b91336e152d266abaf56acd5db6edb3d059c4ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.onError&lt;/code&gt; function may also be used to handle all the errors that could happen before the delivery of the file is initiated. The default behavior is to destroy the stream.</source>
          <target state="translated">该 &lt;code&gt;options.onError&lt;/code&gt; 功能也可以用来处理所有的启动文件的传送之前可能发生的错误。默认行为是销毁流。</target>
        </trans-unit>
        <trans-unit id="88725ed0c752fd2e0d3d7eb4b4fa2aac4684e747" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.selectPadding()&lt;/code&gt; function is invoked once for &lt;em&gt;every&lt;/em&gt;&lt;code&gt;HEADERS&lt;/code&gt; and &lt;code&gt;DATA&lt;/code&gt; frame. This has a definite noticeable impact on performance.</source>
          <target state="translated">所述 &lt;code&gt;options.selectPadding()&lt;/code&gt; 函数被调用一次&lt;em&gt;每&lt;/em&gt; &lt;code&gt;HEADERS&lt;/code&gt; 和 &lt;code&gt;DATA&lt;/code&gt; 帧。这对性能有明显的影响。</target>
        </trans-unit>
        <trans-unit id="58c22594cb8dda9afe65bb4ffe82eac94dae29bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.selectPadding()&lt;/code&gt; function receives two numeric arguments, &lt;code&gt;frameLen&lt;/code&gt; and &lt;code&gt;maxFrameLen&lt;/code&gt; and must return a number &lt;code&gt;N&lt;/code&gt; such that &lt;code&gt;frameLen &amp;lt;= N &amp;lt;= maxFrameLen&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;options.selectPadding()&lt;/code&gt; 函数接收两个数值参数， &lt;code&gt;frameLen&lt;/code&gt; 和 &lt;code&gt;maxFrameLen&lt;/code&gt; 和必须返回一个数 &lt;code&gt;N&lt;/code&gt; 使得 &lt;code&gt;frameLen &amp;lt;= N &amp;lt;= maxFrameLen&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1c0d85ce19cd9d1ce4392696fd5cac8f4203d86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.statCheck&lt;/code&gt; function may also be used to cancel the send operation by returning &lt;code&gt;false&lt;/code&gt;. For instance, a conditional request may check the stat results to determine if the file has been modified to return an appropriate &lt;code&gt;304&lt;/code&gt; response:</source>
          <target state="translated">该 &lt;code&gt;options.statCheck&lt;/code&gt; 功能也可用于通过返回取消发送操作 &lt;code&gt;false&lt;/code&gt; 。例如，条件请求可以检查统计信息结果，以确定文件是否已被修改以返回适当的 &lt;code&gt;304&lt;/code&gt; 响应：</target>
        </trans-unit>
        <trans-unit id="7a08e01016b2c2502c2e42198c75f2bc1cff02d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.stdio&lt;/code&gt; option is used to configure the pipes that are established between the parent and child process. By default, the child's stdin, stdout, and stderr are redirected to corresponding &lt;a href=&quot;#child_process_subprocess_stdin&quot;&gt;&lt;code&gt;subprocess.stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_subprocess_stdout&quot;&gt;&lt;code&gt;subprocess.stdout&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_subprocess_stderr&quot;&gt;&lt;code&gt;subprocess.stderr&lt;/code&gt;&lt;/a&gt; streams on the &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object. This is equivalent to setting the &lt;code&gt;options.stdio&lt;/code&gt; equal to &lt;code&gt;['pipe', 'pipe', 'pipe']&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;options.stdio&lt;/code&gt; 选项用于配置父子进程之间建立的管道。默认情况下，孩子的标准输入，标准输出，和stderr被重定向到相应的&lt;a href=&quot;#child_process_subprocess_stdin&quot;&gt; &lt;code&gt;subprocess.stdin&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#child_process_subprocess_stdout&quot;&gt; &lt;code&gt;subprocess.stdout&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#child_process_subprocess_stderr&quot;&gt; &lt;code&gt;subprocess.stderr&lt;/code&gt; &lt;/a&gt;上流&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;对象。这等效于将 &lt;code&gt;options.stdio&lt;/code&gt; 设置为 &lt;code&gt;['pipe', 'pipe', 'pipe']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8dd4ab4f071e2989533d5f91caa4e4a34ce887c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">在 &lt;code&gt;options&lt;/code&gt; 参数控制流的行为和是当CCM或OCB模式中的密码被使用（例如，除了可选的 &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。在这种情况下， &lt;code&gt;authTagLength&lt;/code&gt; 选项是必需的，它指定身份验证标签的长度（以字节为单位），请参阅&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM模式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="70db3910480442bf6b039c30dead899f0e07b3e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;. In GCM mode, the &lt;code&gt;authTagLength&lt;/code&gt; option is not required but can be used to restrict accepted authentication tags to those with the specified length.</source>
          <target state="translated">在 &lt;code&gt;options&lt;/code&gt; 参数控制流的行为和是当CCM或OCB模式中的密码被使用（例如，除了可选的 &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。在这种情况下， &lt;code&gt;authTagLength&lt;/code&gt; 选项是必需的，它指定身份验证标签的长度（以字节为单位），请参阅&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM模式&lt;/a&gt;。在GCM模式下， &lt;code&gt;authTagLength&lt;/code&gt; 选项不是必需的，但可用于将接受的身份验证标签限制为具有指定长度的那些。</target>
        </trans-unit>
        <trans-unit id="1f07368952df0b4d175cfc6577e347d6c1e59d58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;. In GCM mode, the &lt;code&gt;authTagLength&lt;/code&gt; option is not required but can be used to set the length of the authentication tag that will be returned by &lt;code&gt;getAuthTag()&lt;/code&gt; and defaults to 16 bytes.</source>
          <target state="translated">在 &lt;code&gt;options&lt;/code&gt; 参数控制流的行为和是当CCM或OCB模式中的密码被使用（例如，除了可选的 &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。在这种情况下， &lt;code&gt;authTagLength&lt;/code&gt; 选项是必需的，它指定身份验证标签的长度（以字节为单位），请参阅&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM模式&lt;/a&gt;。在GCM模式下， &lt;code&gt;authTagLength&lt;/code&gt; 选项，但可以使用它来设置将由 &lt;code&gt;getAuthTag()&lt;/code&gt; 返回的身份验证标签的长度，默认为16个字节。</target>
        </trans-unit>
        <trans-unit id="b388a3d7d0f9bca878571c8a6039e4ada05c0bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is optional for &lt;code&gt;GCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt;. When using &lt;code&gt;CCM&lt;/code&gt;, the &lt;code&gt;plaintextLength&lt;/code&gt; option must be specified and its value must match the length of the plaintext in bytes. See &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 参数是可选的 &lt;code&gt;GCM&lt;/code&gt; 和 &lt;code&gt;OCB&lt;/code&gt; 。使用 &lt;code&gt;CCM&lt;/code&gt; 时，必须指定 &lt;code&gt;plaintextLength&lt;/code&gt; 选项，并且其值必须与以字节为单位的纯文本长度匹配。请参阅&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM模式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04d1fc8ede515595f0022bbcb95640413bd973e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is optional for &lt;code&gt;GCM&lt;/code&gt;. When using &lt;code&gt;CCM&lt;/code&gt;, the &lt;code&gt;plaintextLength&lt;/code&gt; option must be specified and its value must match the length of the plaintext in bytes. See &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 参数是可选的 &lt;code&gt;GCM&lt;/code&gt; 。使用 &lt;code&gt;CCM&lt;/code&gt; 时，必须指定 &lt;code&gt;plaintextLength&lt;/code&gt; 选项，并且其值必须与以字节为单位的纯文本长度匹配。请参阅&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM模式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ffcc3d1f21652c8051ddf089c67bff61f63a2cb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is supported now.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 参数现在支持。</target>
        </trans-unit>
        <trans-unit id="8c18426cec8944bfcba4ea3507d2515508ff8326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument may be omitted. If provided, it should be an object. The &lt;code&gt;options&lt;/code&gt; object may contain a boolean named &lt;code&gt;persistent&lt;/code&gt; that indicates whether the process should continue to run as long as files are being watched. The &lt;code&gt;options&lt;/code&gt; object may specify an &lt;code&gt;interval&lt;/code&gt; property indicating how often the target should be polled in milliseconds.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 的参数可以省略。如果提供，它应该是一个对象。该 &lt;code&gt;options&lt;/code&gt; 对象可能会包含一个布尔值 &lt;code&gt;persistent&lt;/code&gt; 指示工艺是否应该继续，只要文件被监视运行。该 &lt;code&gt;options&lt;/code&gt; 对象可指定 &lt;code&gt;interval&lt;/code&gt; 属性指示如何经常目标应该以毫秒为单位被轮询。</target>
        </trans-unit>
        <trans-unit id="3ecccc5808da944ebe14cfab94721d12f71b2cf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; object may contain a &lt;code&gt;fd&lt;/code&gt; property. When a &lt;code&gt;fd&lt;/code&gt; greater than &lt;code&gt;0&lt;/code&gt; is set, it will wrap around an existing socket with the given file descriptor. In this case, the properties of &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; will be ignored.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 对象可能包含 &lt;code&gt;fd&lt;/code&gt; 财产。当 &lt;code&gt;fd&lt;/code&gt; 设置为大于 &lt;code&gt;0&lt;/code&gt; 时，它将使用给定的文件描述符环绕现有套接字。在这种情况下， &lt;code&gt;port&lt;/code&gt; 和 &lt;code&gt;address&lt;/code&gt; 的属性将被忽略。</target>
        </trans-unit>
        <trans-unit id="f185bba23af7cf7637b219df23160a83316f0b66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; object may contain an additional &lt;code&gt;exclusive&lt;/code&gt; property that is used when using &lt;code&gt;dgram.Socket&lt;/code&gt; objects with the &lt;a href=&quot;cluster&quot;&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/a&gt; module. When &lt;code&gt;exclusive&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; (the default), cluster workers will use the same underlying socket handle allowing connection handling duties to be shared. When &lt;code&gt;exclusive&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, however, the handle is not shared and attempted port sharing results in an error.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 对象可能包含一个额外的 &lt;code&gt;exclusive&lt;/code&gt; 时使用用于属性 &lt;code&gt;dgram.Socket&lt;/code&gt; 与对象&lt;a href=&quot;cluster&quot;&gt; &lt;code&gt;cluster&lt;/code&gt; &lt;/a&gt;模块。当 &lt;code&gt;exclusive&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; （默认值）时，集群工作人员将使用相同的基础套接字句柄，以共享连接处理职责。但是，当 &lt;code&gt;exclusive&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时，将不共享该句柄，并且尝试进行端口共享会导致错误。</target>
        </trans-unit>
        <trans-unit id="6fbf7471b69b1732468b84a8b5cd6c3bbd820fbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 参数可以是WHATWG &lt;code&gt;URL&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="f310b73d29091e1115b087085826cee5193689cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter can now include &lt;code&gt;clientCertEngine&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;options&lt;/code&gt; 参数可以包含 &lt;code&gt;clientCertEngine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c04ccd742cb846d729c46db1c92d993bda691af3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 的参数现在是可选的。</target>
        </trans-unit>
        <trans-unit id="1544d0a25361e0102480911c75332cf1faf9847a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter now supports &lt;code&gt;net.createServer()&lt;/code&gt; options.</source>
          <target state="translated">现在， &lt;code&gt;options&lt;/code&gt; 参数支持 &lt;code&gt;net.createServer()&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="11a0da7077baf241c7325863b0e43935555f3a40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter was added.</source>
          <target state="translated">该 &lt;code&gt;options&lt;/code&gt; 添加参数。</target>
        </trans-unit>
        <trans-unit id="7e73cb4a761c64c133dbf1f7850ece9925d2eed6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter, and the &lt;code&gt;keepOpen&lt;/code&gt; option in particular, is supported now.</source>
          <target state="translated">现在支持 &lt;code&gt;options&lt;/code&gt; 参数，尤其是 &lt;code&gt;keepOpen&lt;/code&gt; 选项。</target>
        </trans-unit>
        <trans-unit id="2763cd5beff3c94cee8b93fbe274c8b2cdd696ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;originSet&lt;/code&gt; property is only available when using a secure TLS connection.</source>
          <target state="translated">该 &lt;code&gt;originSet&lt;/code&gt; 使用安全TLS连接时属性才可用。</target>
        </trans-unit>
        <trans-unit id="0ee9a44acc588d2b0ac4bfb8cdbe73ea5d2ad84c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.arch()&lt;/code&gt; method returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled.</source>
          <target state="translated">所述 &lt;code&gt;os.arch()&lt;/code&gt; 方法返回一个字符串识别所述操作系统的CPU体系结构的量，Node.js的二进制编译的。</target>
        </trans-unit>
        <trans-unit id="fd4b8a513a4015a14ac01295145fcd7349422760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.cpus()&lt;/code&gt; method returns an array of objects containing information about each logical CPU core.</source>
          <target state="translated">所述 &lt;code&gt;os.cpus()&lt;/code&gt; 方法返回包含关于每个逻辑CPU核心信息的对象的阵列。</target>
        </trans-unit>
        <trans-unit id="dd819e9d7af1fe616adb3dde7cf03a235051f4d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.endianness()&lt;/code&gt; method returns a string identifying the endianness of the CPU &lt;em&gt;for which the Node.js binary was compiled&lt;/em&gt;.</source>
          <target state="translated">所述 &lt;code&gt;os.endianness()&lt;/code&gt; 方法返回一个字符串识别CPU的字节序&lt;em&gt;的量，Node.js的二进制编译&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9a88232839cef7e552682cd4db9e7d869e81ce93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.freemem()&lt;/code&gt; method returns the amount of free system memory in bytes as an integer.</source>
          <target state="translated">所述 &lt;code&gt;os.freemem()&lt;/code&gt; 方法返回以字节为单位作为一个整数的自由系统内存量。</target>
        </trans-unit>
        <trans-unit id="e9589b6e8570ce552b673c7c3286ac69d95ca7d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.getNetworkInterfaces()&lt;/code&gt; method is deprecated. Please use the &lt;a href=&quot;os#os_os_networkinterfaces&quot;&gt;&lt;code&gt;os.networkInterfaces()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">不建议使用 &lt;code&gt;os.getNetworkInterfaces()&lt;/code&gt; 方法。请改用&lt;a href=&quot;os#os_os_networkinterfaces&quot;&gt; &lt;code&gt;os.networkInterfaces()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="68455ecd26853fd1c43efff0e0b76dba1707b26e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.getPriority()&lt;/code&gt; method returns the scheduling priority for the process specified by &lt;code&gt;pid&lt;/code&gt;. If &lt;code&gt;pid&lt;/code&gt; is not provided, or is &lt;code&gt;0&lt;/code&gt;, the priority of the current process is returned.</source>
          <target state="translated">所述 &lt;code&gt;os.getPriority()&lt;/code&gt; 方法用于通过指定的处理返回调度优先级 &lt;code&gt;pid&lt;/code&gt; 。如果 &lt;code&gt;pid&lt;/code&gt; 不设置，或者是 &lt;code&gt;0&lt;/code&gt; ，则返回当前进程的优先级。</target>
        </trans-unit>
        <trans-unit id="ff202cb94fa55d86ebbf8be59a9fe425b0365415" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.homedir()&lt;/code&gt; method returns the home directory of the current user as a string.</source>
          <target state="translated">该 &lt;code&gt;os.homedir()&lt;/code&gt; 方法返回当前用户作为一个字符串的主目录。</target>
        </trans-unit>
        <trans-unit id="08ccc46f0c89757856f0de672fdae7d519bc7bb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.hostname()&lt;/code&gt; method returns the hostname of the operating system as a string.</source>
          <target state="translated">所述 &lt;code&gt;os.hostname()&lt;/code&gt; 方法返回操作系统作为字符串的主机名。</target>
        </trans-unit>
        <trans-unit id="5c9a1431d7ea068ec0c902acf347c2518816ee86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.loadavg()&lt;/code&gt; method returns an array containing the 1, 5, and 15 minute load averages.</source>
          <target state="translated">所述 &lt;code&gt;os.loadavg()&lt;/code&gt; 方法返回包含1,5，和15分钟的负载量的平均值的阵列。</target>
        </trans-unit>
        <trans-unit id="d194900a3e2e0f96f28e2fc9905489cd527a1b9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.networkInterfaces()&lt;/code&gt; method returns an object containing only network interfaces that have been assigned a network address.</source>
          <target state="translated">所述 &lt;code&gt;os.networkInterfaces()&lt;/code&gt; 方法返回只包含已分配的网络地址的网络接口的对象。</target>
        </trans-unit>
        <trans-unit id="e76c72da5ce1666431d22cdc5b11e7141d7dee80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.platform()&lt;/code&gt; method returns a string identifying the operating system platform as set during compile time of Node.js.</source>
          <target state="translated">所述 &lt;code&gt;os.platform()&lt;/code&gt; 方法返回一个字符串识别期间Node.js的编译时间的操作系统平台作为集</target>
        </trans-unit>
        <trans-unit id="8f2147ad23c2ec0f83d80f4078e3e27a91e6857f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.release()&lt;/code&gt; method returns a string identifying the operating system release.</source>
          <target state="translated">所述 &lt;code&gt;os.release()&lt;/code&gt; 方法返回一个字符串识别所述操作系统释放。</target>
        </trans-unit>
        <trans-unit id="fbfd957e2f788604cd2a912c9f703622e4c74d1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.setPriority()&lt;/code&gt; method attempts to set the scheduling priority for the process specified by &lt;code&gt;pid&lt;/code&gt;. If &lt;code&gt;pid&lt;/code&gt; is not provided, or is &lt;code&gt;0&lt;/code&gt;, the priority of the current process is used.</source>
          <target state="translated">所述 &lt;code&gt;os.setPriority()&lt;/code&gt; 方法尝试设置调度优先级通过指定的进程 &lt;code&gt;pid&lt;/code&gt; 。如果未提供 &lt;code&gt;pid&lt;/code&gt; 或将其设置为 &lt;code&gt;0&lt;/code&gt; ，则使用当前进程的优先级。</target>
        </trans-unit>
        <trans-unit id="2381f4505912aa2a83ede87b6e353a245af8bce9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.tmpDir()&lt;/code&gt; API is deprecated. Please use &lt;a href=&quot;os#os_os_tmpdir&quot;&gt;&lt;code&gt;os.tmpdir()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">所述 &lt;code&gt;os.tmpDir()&lt;/code&gt; API被弃用。请改用&lt;a href=&quot;os#os_os_tmpdir&quot;&gt; &lt;code&gt;os.tmpdir()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b4c8d89820967edb5a86cf15fc4f3223e85cb656" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.tmpdir()&lt;/code&gt; method returns a string specifying the operating system's default directory for temporary files.</source>
          <target state="translated">该 &lt;code&gt;os.tmpdir()&lt;/code&gt; 方法返回一个字符串指定操作系统的默认目录为临时文件。</target>
        </trans-unit>
        <trans-unit id="fa88528ec6a826f144023495a7b003de6458571a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.totalmem()&lt;/code&gt; method returns the total amount of system memory in bytes as an integer.</source>
          <target state="translated">所述 &lt;code&gt;os.totalmem()&lt;/code&gt; 方法返回以字节为单位作为一个整数的系统存储器的总量。</target>
        </trans-unit>
        <trans-unit id="704218fb38cc5fde83230e8b7f548bf48215777f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.type()&lt;/code&gt; method returns a string identifying the operating system name as returned by &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;'Linux'&lt;/code&gt; on Linux, &lt;code&gt;'Darwin'&lt;/code&gt; on macOS, and &lt;code&gt;'Windows_NT'&lt;/code&gt; on Windows.</source>
          <target state="translated">所述 &lt;code&gt;os.type()&lt;/code&gt; 方法返回的字符串识别操作系统的名称由作为返回&lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt; &lt;code&gt;uname(3)&lt;/code&gt; &lt;/a&gt;。例如， &lt;code&gt;'Linux'&lt;/code&gt; Linux &lt;code&gt;'Darwin'&lt;/code&gt; ，macOS 上的&amp;ldquo; Darwin&amp;rdquo;和Windows上的 &lt;code&gt;'Windows_NT'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c622a09d0f16bb6ec01b41edf064ab83a149100" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.uptime()&lt;/code&gt; method returns the system uptime in number of seconds.</source>
          <target state="translated">所述 &lt;code&gt;os.uptime()&lt;/code&gt; 方法返回以秒为单位的系统正常运行时间。</target>
        </trans-unit>
        <trans-unit id="bfeef8c91f8d956e86c7a531b06a7f532f2035ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.userInfo()&lt;/code&gt; method returns information about the currently effective user &amp;mdash; on POSIX platforms, this is typically a subset of the password file. The returned object includes the &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;uid&lt;/code&gt;, &lt;code&gt;gid&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, and &lt;code&gt;homedir&lt;/code&gt;. On Windows, the &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt; fields are &lt;code&gt;-1&lt;/code&gt;, and &lt;code&gt;shell&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;os.userInfo()&lt;/code&gt; 有关当前有效用户的方法返回信息-关于POSIX平台上，这通常是密码文件的子集。返回的对象包括 &lt;code&gt;username&lt;/code&gt; ， &lt;code&gt;uid&lt;/code&gt; ， &lt;code&gt;gid&lt;/code&gt; ， &lt;code&gt;shell&lt;/code&gt; 和 &lt;code&gt;homedir&lt;/code&gt; 。在Windows上， &lt;code&gt;uid&lt;/code&gt; 和 &lt;code&gt;gid&lt;/code&gt; 字段为 &lt;code&gt;-1&lt;/code&gt; ，而 &lt;code&gt;shell&lt;/code&gt; 为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4cb17d14194660fd3cf9cfa11482a196f87f429" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os&lt;/code&gt; module provides a number of operating system-related utility methods. It can be accessed using:</source>
          <target state="translated">所述 &lt;code&gt;os&lt;/code&gt; 模块提供了许多操作系统相关的实用方法。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="eae6c5263eb3a3adb56e5c667edc4c110678a119" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputEncoding&lt;/code&gt; specifies the output format of the enciphered data. If the &lt;code&gt;outputEncoding&lt;/code&gt; is specified, a string using the specified encoding is returned. If no &lt;code&gt;outputEncoding&lt;/code&gt; is provided, a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">所述 &lt;code&gt;outputEncoding&lt;/code&gt; 指定加密数据的输出格式。如果指定了 &lt;code&gt;outputEncoding&lt;/code&gt; ，则返回使用指定编码的字符串。如果未提供 &lt;code&gt;outputEncoding&lt;/code&gt; ，则返回&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="05eb17785bdeb53b18850ce2ab3ab0ff99d9b5ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputLength&lt;/code&gt; option was added for XOF hash functions.</source>
          <target state="translated">该 &lt;code&gt;outputLength&lt;/code&gt; 为XOF散列函数中添加选项。</target>
        </trans-unit>
        <trans-unit id="fdafd20e01a0d40cc24f829e01b07007772132ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt;&lt;code&gt;&quot;main&quot;&lt;/code&gt; field defines the entry point for a package, whether the package is included into CommonJS via &lt;code&gt;require&lt;/code&gt; or into an ES module via &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;&quot;main&quot;&lt;/code&gt; 字段定义的入口点一个包，包是否包括通过成CommonJS的 &lt;code&gt;require&lt;/code&gt; 或成ES模块经由 &lt;code&gt;import&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f71aede9a83547ad5a39786ee9673bf753810698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parentModuleURL&lt;/code&gt; is provided as &lt;code&gt;undefined&lt;/code&gt; when performing main Node.js load itself.</source>
          <target state="translated">所述 &lt;code&gt;parentModuleURL&lt;/code&gt; 作为设置 &lt;code&gt;undefined&lt;/code&gt; 执行主Node.js的负载本身时。</target>
        </trans-unit>
        <trans-unit id="40c6fcca460251f4d4fb83bc801b49111c66163b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password&lt;/code&gt; is used to derive the cipher key and initialization vector (IV). The value must be either a &lt;code&gt;'latin1'&lt;/code&gt; encoded string, a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;password&lt;/code&gt; 被用于导出所述加密密钥和初始化向量（IV）。该值必须是 &lt;code&gt;'latin1'&lt;/code&gt; 编码的字符串，&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="188bb6063b9cc56f886f4feab1c8df1de8a2c2ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.basename()&lt;/code&gt; methods returns the last portion of a &lt;code&gt;path&lt;/code&gt;, similar to the Unix &lt;code&gt;basename&lt;/code&gt; command. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;path.basename()&lt;/code&gt; 方法返回的最后部分 &lt;code&gt;path&lt;/code&gt; ，类似于Unix &lt;code&gt;basename&lt;/code&gt; 命令。尾部目录分隔符将被忽略，请参阅&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a46c55b6aac880d7bc1592bfe28b266a7b1031c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.dirname()&lt;/code&gt; method returns the directory name of a &lt;code&gt;path&lt;/code&gt;, similar to the Unix &lt;code&gt;dirname&lt;/code&gt; command. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;path.dirname()&lt;/code&gt; 方法返回的目录名 &lt;code&gt;path&lt;/code&gt; ，类似于Unix &lt;code&gt;dirname&lt;/code&gt; 命令。尾部目录分隔符将被忽略，请参阅&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a3f6292e5cd1e0345df138f65b07d3563d7ad4f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.extname()&lt;/code&gt; method returns the extension of the &lt;code&gt;path&lt;/code&gt;, from the last occurrence of the &lt;code&gt;.&lt;/code&gt; (period) character to end of string in the last portion of the &lt;code&gt;path&lt;/code&gt;. If there is no &lt;code&gt;.&lt;/code&gt; in the last portion of the &lt;code&gt;path&lt;/code&gt;, or if there are no &lt;code&gt;.&lt;/code&gt; characters other than the first character of the basename of &lt;code&gt;path&lt;/code&gt; (see &lt;code&gt;path.basename()&lt;/code&gt;) , an empty string is returned.</source>
          <target state="translated">所述 &lt;code&gt;path.extname()&lt;/code&gt; 方法返回的扩展 &lt;code&gt;path&lt;/code&gt; ，从的最后一次出现 &lt;code&gt;.&lt;/code&gt; （句点）字符到 &lt;code&gt;path&lt;/code&gt; 最后部分中字符串的结尾。如果没有 &lt;code&gt;.&lt;/code&gt; 在 &lt;code&gt;path&lt;/code&gt; 的最后一部分，或者如果没有 &lt;code&gt;.&lt;/code&gt; 除了 &lt;code&gt;path&lt;/code&gt; 基本名称的第一个字符之外的其他字符（请参阅 &lt;code&gt;path.basename()&lt;/code&gt; ），将返回一个空字符串。</target>
        </trans-unit>
        <trans-unit id="8e0e67a46c436cf5fe841f17ec165a43522a8571" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.format()&lt;/code&gt; method returns a path string from an object. This is the opposite of &lt;a href=&quot;#path_path_parse_path&quot;&gt;&lt;code&gt;path.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;path.format()&lt;/code&gt; 方法返回来自物体的路径串。这与&lt;a href=&quot;#path_path_parse_path&quot;&gt; &lt;code&gt;path.parse()&lt;/code&gt; &lt;/a&gt;相反。</target>
        </trans-unit>
        <trans-unit id="252cfc98db637fc3e0bc47e764b59687b1c5ae77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.isAbsolute()&lt;/code&gt; method determines if &lt;code&gt;path&lt;/code&gt; is an absolute path.</source>
          <target state="translated">所述 &lt;code&gt;path.isAbsolute()&lt;/code&gt; 方法确定是否 &lt;code&gt;path&lt;/code&gt; 是绝对路径。</target>
        </trans-unit>
        <trans-unit id="23d1f7bebec278f9d7e734b9f87e77484ef62d91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.join()&lt;/code&gt; method joins all given &lt;code&gt;path&lt;/code&gt; segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.</source>
          <target state="translated">所述 &lt;code&gt;path.join()&lt;/code&gt; 方法加入所有给定 &lt;code&gt;path&lt;/code&gt; 段使用平台的具体分离器作为分隔符一起，然后归一化所得到的路径。</target>
        </trans-unit>
        <trans-unit id="fccc035b7e3371f3ec57061631961afe47bacedc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.normalize()&lt;/code&gt; method normalizes the given &lt;code&gt;path&lt;/code&gt;, resolving &lt;code&gt;'..'&lt;/code&gt; and &lt;code&gt;'.'&lt;/code&gt; segments.</source>
          <target state="translated">所述 &lt;code&gt;path.normalize()&lt;/code&gt; 方法标准化给定 &lt;code&gt;path&lt;/code&gt; ，解决 &lt;code&gt;'..'&lt;/code&gt; 和 &lt;code&gt;'.'&lt;/code&gt; 段。</target>
        </trans-unit>
        <trans-unit id="54cf59d346f9b6392b2a87a5566d28221bcb562a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.parse()&lt;/code&gt; method returns an object whose properties represent significant elements of the &lt;code&gt;path&lt;/code&gt;. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;path.parse()&lt;/code&gt; 方法返回的对象，其属性表示的显著元素 &lt;code&gt;path&lt;/code&gt; 。尾部目录分隔符将被忽略，请参阅&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="37668729a1da9d1c73a91abba8181fc015734cb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.posix&lt;/code&gt; property provides access to POSIX specific implementations of the &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">该 &lt;code&gt;path.posix&lt;/code&gt; 属性提供的POSIX具体实现 &lt;code&gt;path&lt;/code&gt; 的方法。</target>
        </trans-unit>
        <trans-unit id="10a83fa0396ec811505daa5cde984be16592ee0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.relative()&lt;/code&gt; method returns the relative path from &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt; based on the current working directory. If &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; each resolve to the same path (after calling &lt;code&gt;path.resolve()&lt;/code&gt; on each), a zero-length string is returned.</source>
          <target state="translated">所述 &lt;code&gt;path.relative()&lt;/code&gt; 方法从返回的相对路径 &lt;code&gt;from&lt;/code&gt; 到 &lt;code&gt;to&lt;/code&gt; 基于当前工作目录。如果 &lt;code&gt;from&lt;/code&gt; 和 &lt;code&gt;to&lt;/code&gt; 每个解析到相同的路径（在每个上调用 &lt;code&gt;path.resolve()&lt;/code&gt; 之后），则返回零长度的字符串。</target>
        </trans-unit>
        <trans-unit id="581183ca669de52def1090661675d2069384bfd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.resolve()&lt;/code&gt; method resolves a sequence of paths or path segments into an absolute path.</source>
          <target state="translated">所述 &lt;code&gt;path.resolve()&lt;/code&gt; 方法解决的路径或路径段的序列为绝对路径。</target>
        </trans-unit>
        <trans-unit id="fc46e1af8b2b47418d0b18b69062f0e559b72294" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.win32&lt;/code&gt; property provides access to Windows-specific implementations of the &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">该 &lt;code&gt;path.win32&lt;/code&gt; 属性提供的Windows的具体实现访问 &lt;code&gt;path&lt;/code&gt; 的方法。</target>
        </trans-unit>
        <trans-unit id="f63bee69cffa8c7230b8d83b01ff643325fa158e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; may be specified as a &lt;code&gt;FileHandle&lt;/code&gt; that has been opened for appending (using &lt;code&gt;fsPromises.open()&lt;/code&gt;).</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 可以被指定为一个 &lt;code&gt;FileHandle&lt;/code&gt; 已经打开了追加（使用 &lt;code&gt;fsPromises.open()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6e44c0aaf70d7f280a84fa02cdd1307c2a8b5325" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; may be specified as a numeric file descriptor that has been opened for appending (using &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fs.openSync()&lt;/code&gt;). The file descriptor will not be closed automatically.</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 可以被指定为已打开，用于附加数字文件描述符（使用 &lt;code&gt;fs.open()&lt;/code&gt; 或 &lt;code&gt;fs.openSync()&lt;/code&gt; ）。文件描述符不会自动关闭。</target>
        </trans-unit>
        <trans-unit id="54784f8d6788b2b1af616c6de7cd51656da924fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; module provides utilities for working with file and directory paths. It can be accessed using:</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 模块提供实用程序与文件和目录路径工作。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="0891b7522aea49dbbbd5c5d2e3ee6703a2df6b14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 参数可以是WHATWG &lt;code&gt;URL&lt;/code&gt; 利用对象 &lt;code&gt;file:&lt;/code&gt; 协议。支持目前仍在&lt;em&gt;试验中&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="753c6c336baca793a6760ebb70f8457b1c8d3709" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter can be a file descriptor now.</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 参数可以是文件描述符现在。</target>
        </trans-unit>
        <trans-unit id="8226322163fdae4413c7f4db24d0461e11583e74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameters can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 参数可以是WHATWG &lt;code&gt;URL&lt;/code&gt; 利用对象 &lt;code&gt;file:&lt;/code&gt; 协议。支持目前仍在&lt;em&gt;试验中&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a636f6e53d1a384050820e5a3525c5fd15f2d5b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; property is a concatenation of the &lt;code&gt;pathname&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; components.</source>
          <target state="translated">该 &lt;code&gt;path&lt;/code&gt; 属性是的串联 &lt;code&gt;pathname&lt;/code&gt; 和 &lt;code&gt;search&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="cd8b1b1230d3106b94a572ac3ffbd6f8548b801e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathname&lt;/code&gt; property consists of the entire path section of the URL. This is everything following the &lt;code&gt;host&lt;/code&gt; (including the &lt;code&gt;port&lt;/code&gt;) and before the start of the &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;hash&lt;/code&gt; components, delimited by either the ASCII question mark (&lt;code&gt;?&lt;/code&gt;) or hash (&lt;code&gt;#&lt;/code&gt;) characters.</source>
          <target state="translated">该 &lt;code&gt;pathname&lt;/code&gt; 属性包含的URL的完整路径部分。这就是 &lt;code&gt;host&lt;/code&gt; （包括 &lt;code&gt;port&lt;/code&gt; ）之后， &lt;code&gt;query&lt;/code&gt; 或 &lt;code&gt;hash&lt;/code&gt; 组件开始之前的所有内容，它们由ASCII问号（ &lt;code&gt;?&lt;/code&gt; ）或哈希（ &lt;code&gt;#&lt;/code&gt; ）字符分隔。</target>
        </trans-unit>
        <trans-unit id="919f87148245100aefaf59182626d3fc677bc928" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paths&lt;/code&gt; option is now supported.</source>
          <target state="translated">该 &lt;code&gt;paths&lt;/code&gt; 现在支持选项。</target>
        </trans-unit>
        <trans-unit id="d69b64872e4dabf952d6da7f4c96857f30589a2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pipeline&lt;/code&gt; API is promisify-able as well:</source>
          <target state="translated">该 &lt;code&gt;pipeline&lt;/code&gt; API是promisify-能，以及：</target>
        </trans-unit>
        <trans-unit id="6fb265fd07a0d7f8e8e2a9f431c481837d8fb7fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;port&lt;/code&gt; field is copied correctly now.</source>
          <target state="translated">在 &lt;code&gt;port&lt;/code&gt; 字段被正确地复制。</target>
        </trans-unit>
        <trans-unit id="5ed15aa76dd58bec9add6b4d7a2c2f7a8bf30e61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;port&lt;/code&gt; property is the numeric port portion of the &lt;code&gt;host&lt;/code&gt; component.</source>
          <target state="translated">的 &lt;code&gt;port&lt;/code&gt; 的属性是的数字端口部 &lt;code&gt;host&lt;/code&gt; 组件。</target>
        </trans-unit>
        <trans-unit id="8b7858034d75ee3f2b3b2de7c9b9a05146723800" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;position&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">现在， &lt;code&gt;position&lt;/code&gt; 参数是可选的。</target>
        </trans-unit>
        <trans-unit id="a762a27d128ae739b16dec3315cf9d688d7132bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prime&lt;/code&gt; argument can be a &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">在 &lt;code&gt;prime&lt;/code&gt; 参数可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 现在。</target>
        </trans-unit>
        <trans-unit id="5e0e02f6628331bc85eaeb22e4681f24afb59013" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prime&lt;/code&gt; argument can be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt; now.</source>
          <target state="translated">在 &lt;code&gt;prime&lt;/code&gt; 参数可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 现在。</target>
        </trans-unit>
        <trans-unit id="9ef3092e9402a32d8a11faf19f4c8bd27014d4d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;priority&lt;/code&gt; input must be an integer between &lt;code&gt;-20&lt;/code&gt; (high priority) and &lt;code&gt;19&lt;/code&gt; (low priority). Due to differences between Unix priority levels and Windows priority classes, &lt;code&gt;priority&lt;/code&gt; is mapped to one of six priority constants in &lt;code&gt;os.constants.priority&lt;/code&gt;. When retrieving a process priority level, this range mapping may cause the return value to be slightly different on Windows. To avoid confusion, it is recommended to set &lt;code&gt;priority&lt;/code&gt; to one of the priority constants.</source>
          <target state="translated">的 &lt;code&gt;priority&lt;/code&gt; 输入必须之间的整数 &lt;code&gt;-20&lt;/code&gt; （高优先级）和 &lt;code&gt;19&lt;/code&gt; （低优先级）。由于Unix优先级级别和Windows优先级级别之间的差异， &lt;code&gt;priority&lt;/code&gt; 映射到 &lt;code&gt;os.constants.priority&lt;/code&gt; 中的六个优先级常量之一。检索进程优先级时，此范围映射可能导致Windows上的返回值略有不同。为避免混淆，建议将 &lt;code&gt;priority&lt;/code&gt; 设置为优先级常量之一。</target>
        </trans-unit>
        <trans-unit id="3622698fdbf850cdcfea82b10e7031c7e9a98213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.abort()&lt;/code&gt; method causes the Node.js process to exit immediately and generate a core file.</source>
          <target state="translated">所述 &lt;code&gt;process.abort()&lt;/code&gt; 方法使Node.js的处理立即退出，并产生一个核心文件。</target>
        </trans-unit>
        <trans-unit id="256cd1c7845a467da45db4ea069ac1d3173efd8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; property is a special, read-only &lt;code&gt;Set&lt;/code&gt; of flags allowable within the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable.</source>
          <target state="translated">该 &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; 属性是一个特殊的，只读 &lt;code&gt;Set&lt;/code&gt; 标志允许的范围内的&lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt;环境变量。</target>
        </trans-unit>
        <trans-unit id="2a727071fefe2a18d8e379badd7dad07fd67f002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.arch&lt;/code&gt; property returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled.</source>
          <target state="translated">所述 &lt;code&gt;process.arch&lt;/code&gt; 属性返回一个字符串识别所述操作系统的CPU体系结构的量，Node.js的二进制编译的。</target>
        </trans-unit>
        <trans-unit id="cbb573355c9a987424098eb4d1b59d8d159b0580" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.argv0&lt;/code&gt; property stores a read-only copy of the original value of &lt;code&gt;argv[0]&lt;/code&gt; passed when Node.js starts.</source>
          <target state="translated">该 &lt;code&gt;process.argv0&lt;/code&gt; 属性存储一个只读的原始值的复制 &lt;code&gt;argv[0]&lt;/code&gt; Node.js的启动时通过。</target>
        </trans-unit>
        <trans-unit id="ea07aeb7f928579452477082622dac424365d23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.argv&lt;/code&gt; property returns an array containing the command line arguments passed when the Node.js process was launched. The first element will be &lt;a href=&quot;#process_process_execpath&quot;&gt;&lt;code&gt;process.execPath&lt;/code&gt;&lt;/a&gt;. See &lt;code&gt;process.argv0&lt;/code&gt; if access to the original value of &lt;code&gt;argv[0]&lt;/code&gt; is needed. The second element will be the path to the JavaScript file being executed. The remaining elements will be any additional command line arguments.</source>
          <target state="translated">所述 &lt;code&gt;process.argv&lt;/code&gt; 属性返回时Node.js的过程被发射含有该命令行参数的阵列通过。第一个元素是&lt;a href=&quot;#process_process_execpath&quot;&gt; &lt;code&gt;process.execPath&lt;/code&gt; &lt;/a&gt;。如果需要访问 &lt;code&gt;argv[0]&lt;/code&gt; 的原始值，请参见 &lt;code&gt;process.argv0&lt;/code&gt; 。第二个元素将是要执行的JavaScript文件的路径。其余元素将是任何其他命令行参数。</target>
        </trans-unit>
        <trans-unit id="c6b4b1de939aef4af9e8fcf89d17bebffa3f7e86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.chdir()&lt;/code&gt; method changes the current working directory of the Node.js process or throws an exception if doing so fails (for instance, if the specified &lt;code&gt;directory&lt;/code&gt; does not exist).</source>
          <target state="translated">该 &lt;code&gt;process.chdir()&lt;/code&gt; 方法改变了Node.js的进程的当前工作目录，或者，如果这样做失败，抛出异常（例如，如果指定的 &lt;code&gt;directory&lt;/code&gt; 不存在）。</target>
        </trans-unit>
        <trans-unit id="506618ff24992beaaf170321a3e3e38432597bf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.config&lt;/code&gt; property is &lt;strong&gt;not&lt;/strong&gt; read-only and there are existing modules in the ecosystem that are known to extend, modify, or entirely replace the value of &lt;code&gt;process.config&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;process.config&lt;/code&gt; 属性&lt;strong&gt;不&lt;/strong&gt;只读和有在已知会延长，修改或完全替代的值生态系统现有模块 &lt;code&gt;process.config&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f3323519b7dfe1f96d4694e734f3bc092e9dc8cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.config&lt;/code&gt; property returns an &lt;code&gt;Object&lt;/code&gt; containing the JavaScript representation of the configure options used to compile the current Node.js executable. This is the same as the &lt;code&gt;config.gypi&lt;/code&gt; file that was produced when running the &lt;code&gt;./configure&lt;/code&gt; script.</source>
          <target state="translated">所述 &lt;code&gt;process.config&lt;/code&gt; 属性返回一个 &lt;code&gt;Object&lt;/code&gt; 包含用于编译当前Node.js的可执行配置选项JavaScript的表示。这与运行 &lt;code&gt;./configure&lt;/code&gt; 脚本时生成的 &lt;code&gt;config.gypi&lt;/code&gt; 文件相同。</target>
        </trans-unit>
        <trans-unit id="cf7ff57c67040bc13dfbab7e1084e880809f8679" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.cpuUsage()&lt;/code&gt; method returns the user and system CPU time usage of the current process, in an object with properties &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt;, whose values are microsecond values (millionth of a second). These values measure time spent in user and system code respectively, and may end up being greater than actual elapsed time if multiple CPU cores are performing work for this process.</source>
          <target state="translated">所述 &lt;code&gt;process.cpuUsage()&lt;/code&gt; 方法返回的当前进程的用户和系统的CPU使用时间，在具有属性的对象 &lt;code&gt;user&lt;/code&gt; 和 &lt;code&gt;system&lt;/code&gt; ，其值为微秒值（百万分之一秒）。这些值分别测量在用户代码和系统代码中花费的时间，如果多个CPU内核正在为此过程执行工作，则这些值可能最终大于实际经过的时间。</target>
        </trans-unit>
        <trans-unit id="771947b36c2b55fee12b3a836b78cc4c4e13363f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.cwd()&lt;/code&gt; method returns the current working directory of the Node.js process.</source>
          <target state="translated">该 &lt;code&gt;process.cwd()&lt;/code&gt; 方法返回的Node.js进程的当前工作目录。</target>
        </trans-unit>
        <trans-unit id="789be1f7f1a58a4f8e41dc6a7207677908b728fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.dlopen()&lt;/code&gt; method allows to dynamically load shared objects. It is primarily used by &lt;code&gt;require()&lt;/code&gt; to load C++ Addons, and should not be used directly, except in special cases. In other words, &lt;a href=&quot;globals#globals_require&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; should be preferred over &lt;code&gt;process.dlopen()&lt;/code&gt;, unless there are specific reasons.</source>
          <target state="translated">所述 &lt;code&gt;process.dlopen()&lt;/code&gt; 方法允许动态地负载共享对象。它主要由 &lt;code&gt;require()&lt;/code&gt; 用来加载C ++插件，除非特殊情况，否则不应直接使用。换句话说，除非有特殊原因，&lt;a href=&quot;globals#globals_require&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;应该比 &lt;code&gt;process.dlopen()&lt;/code&gt; 更可取。</target>
        </trans-unit>
        <trans-unit id="b810960a380dde20678d8a762550d496b7d4904f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.emitWarning()&lt;/code&gt; method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">所述 &lt;code&gt;process.emitWarning()&lt;/code&gt; 方法可用于以发射定制或专用处理的警告。可以通过在&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt;事件中添加处理程序来监听这些事件。</target>
        </trans-unit>
        <trans-unit id="a363e8af022e5aace7bd4cc8489cc4b12d310a86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.env&lt;/code&gt; property returns an object containing the user environment. See &lt;a href=&quot;http://man7.org/linux/man-pages/man7/environ.7.html&quot;&gt;&lt;code&gt;environ(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;process.env&lt;/code&gt; 属性返回包含用户环境中的对象。参见&lt;a href=&quot;http://man7.org/linux/man-pages/man7/environ.7.html&quot;&gt; &lt;code&gt;environ(7)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2735db157a5cf0d02b3e84dbefe75992b18a6f02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.execArgv&lt;/code&gt; property returns the set of Node.js-specific command-line options passed when the Node.js process was launched. These options do not appear in the array returned by the &lt;a href=&quot;#process_process_argv&quot;&gt;&lt;code&gt;process.argv&lt;/code&gt;&lt;/a&gt; property, and do not include the Node.js executable, the name of the script, or any options following the script name. These options are useful in order to spawn child processes with the same execution environment as the parent.</source>
          <target state="translated">该 &lt;code&gt;process.execArgv&lt;/code&gt; 属性返回时Node.js的过程中推出了一套Node.js的特定命令行选项传递。这些选项不会出现在由&lt;a href=&quot;#process_process_argv&quot;&gt; &lt;code&gt;process.argv&lt;/code&gt; &lt;/a&gt;属性返回的数组中，并且不包括Node.js可执行文件，脚本名称或脚本名称之后的任何选项。这些选项对于以与父级相同的执行环境生成子进程很有用。</target>
        </trans-unit>
        <trans-unit id="04f3674cccb81b4b3df6feff774a9785180339eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.execPath&lt;/code&gt; property returns the absolute pathname of the executable that started the Node.js process.</source>
          <target state="translated">该 &lt;code&gt;process.execPath&lt;/code&gt; 属性返回启动Node.js的进程可执行文件的绝对路径。</target>
        </trans-unit>
        <trans-unit id="bd34beaf709be80f72dd5d32da45aab42c5ff969" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method being called explicitly;</source>
          <target state="translated">所述 &lt;code&gt;process.exit()&lt;/code&gt; 方法的显式调用;</target>
        </trans-unit>
        <trans-unit id="fb84d9b3c71243bbeeef4ef8f2352da9dd648c25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method instructs Node.js to terminate the process synchronously with an exit status of &lt;code&gt;code&lt;/code&gt;. If &lt;code&gt;code&lt;/code&gt; is omitted, exit uses either the 'success' code &lt;code&gt;0&lt;/code&gt; or the value of &lt;code&gt;process.exitCode&lt;/code&gt; if it has been set. Node.js will not terminate until all the &lt;a href=&quot;#process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event listeners are called.</source>
          <target state="translated">所述 &lt;code&gt;process.exit()&lt;/code&gt; 方法指示的Node.js与一个退出状态同步地终止处理 &lt;code&gt;code&lt;/code&gt; 。如果省略 &lt;code&gt;code&lt;/code&gt; ，则退出将使用&amp;ldquo;成功&amp;rdquo;代码 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;process.exitCode&lt;/code&gt; 的值（如果已设置）。在调用所有&lt;a href=&quot;#process_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; &lt;/a&gt;事件侦听器之前，Node.js不会终止。</target>
        </trans-unit>
        <trans-unit id="62d6b7f5898a28e30f2d6fe157c331fd123ade49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getegid()&lt;/code&gt; method returns the numerical effective group identity of the Node.js process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getegid.2.html&quot;&gt;&lt;code&gt;getegid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">所述 &lt;code&gt;process.getegid()&lt;/code&gt; 方法返回的Node.js过程的数值有效组标识。（请参阅&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getegid.2.html&quot;&gt; &lt;code&gt;getegid(2)&lt;/code&gt; &lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="ed73c7c214cd4dee204193e3a7ae59aec83c4add" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.geteuid()&lt;/code&gt; method returns the numerical effective user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/geteuid.2.html&quot;&gt;&lt;code&gt;geteuid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">所述 &lt;code&gt;process.geteuid()&lt;/code&gt; 方法返回的过程中的数值有效用户身份。（请参阅&lt;a href=&quot;http://man7.org/linux/man-pages/man2/geteuid.2.html&quot;&gt; &lt;code&gt;geteuid(2)&lt;/code&gt; &lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="af132ca481dc153ef9ccfdc5f748fae75cd7e730" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getgid()&lt;/code&gt; method returns the numerical group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getgid.2.html&quot;&gt;&lt;code&gt;getgid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">所述 &lt;code&gt;process.getgid()&lt;/code&gt; 方法返回的过程中的数值组身份。（请参阅&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getgid.2.html&quot;&gt; &lt;code&gt;getgid(2)&lt;/code&gt; &lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="3708eae157d7c0dac42a7a30fd0c9654eb1a1766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getgroups()&lt;/code&gt; method returns an array with the supplementary group IDs. POSIX leaves it unspecified if the effective group ID is included but Node.js ensures it always is.</source>
          <target state="translated">所述 &lt;code&gt;process.getgroups()&lt;/code&gt; 方法返回与补充组ID的数组。如果包含有效的组ID，则POSIX对其保持不确定状态，但是Node.js确保始终存在。</target>
        </trans-unit>
        <trans-unit id="d5dca59d0c62895f4a7bb800e388aa9d94396a7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getuid()&lt;/code&gt; method returns the numeric user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getuid.2.html&quot;&gt;&lt;code&gt;getuid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">所述 &lt;code&gt;process.getuid()&lt;/code&gt; 方法返回的过程中的数字用户身份。（请参阅&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getuid.2.html&quot;&gt; &lt;code&gt;getuid(2)&lt;/code&gt; &lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="211a725b7d93a1ec88ccf7daa8269658983d8aac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.hrtime()&lt;/code&gt; method returns the current high-resolution real time in a &lt;code&gt;[seconds, nanoseconds]&lt;/code&gt; tuple &lt;code&gt;Array&lt;/code&gt;, where &lt;code&gt;nanoseconds&lt;/code&gt; is the remaining part of the real time that can't be represented in second precision.</source>
          <target state="translated">所述 &lt;code&gt;process.hrtime()&lt;/code&gt; 方法返回的当前高分辨率实时在 &lt;code&gt;[seconds, nanoseconds]&lt;/code&gt; 元组 &lt;code&gt;Array&lt;/code&gt; ，其中 &lt;code&gt;nanoseconds&lt;/code&gt; 是不能在第二精度来表示的实时的剩余部分。</target>
        </trans-unit>
        <trans-unit id="4be5514b03bd6fa1959b502b9f965ad001625a88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.initgroups()&lt;/code&gt; method reads the &lt;code&gt;/etc/group&lt;/code&gt; file and initializes the group access list, using all groups of which the user is a member. This is a privileged operation that requires that the Node.js process either have &lt;code&gt;root&lt;/code&gt; access or the &lt;code&gt;CAP_SETGID&lt;/code&gt; capability.</source>
          <target state="translated">所述 &lt;code&gt;process.initgroups()&lt;/code&gt; 方法读取 &lt;code&gt;/etc/group&lt;/code&gt; 文件，并初始化组访问列表，使用所有基团的用户是其成员。这是一项特权操作，要求Node.js进程具有 &lt;code&gt;root&lt;/code&gt; 访问权限或 &lt;code&gt;CAP_SETGID&lt;/code&gt; 功能。</target>
        </trans-unit>
        <trans-unit id="762e81bf5ea587278c34db5c315aa6c7bd3317a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.kill()&lt;/code&gt; method sends the &lt;code&gt;signal&lt;/code&gt; to the process identified by &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;process.kill()&lt;/code&gt; 方法发送 &lt;code&gt;signal&lt;/code&gt; 到由所标识的过程 &lt;code&gt;pid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75f6018d6315d0eee16c17c8d7ee72c0c45f37fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.mainModule&lt;/code&gt; property provides an alternative way of retrieving &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt;. The difference is that if the main module changes at runtime, &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt; may still refer to the original main module in modules that were required before the change occurred. Generally, it's safe to assume that the two refer to the same module.</source>
          <target state="translated">该 &lt;code&gt;process.mainModule&lt;/code&gt; 属性提供检索的另一种方式&lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt; &lt;code&gt;require.main&lt;/code&gt; &lt;/a&gt;。区别在于，如果主模块在运行时发生更改，则&lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt; &lt;code&gt;require.main&lt;/code&gt; &lt;/a&gt;仍可以引用更改发生之前所需模块中的原始主模块。通常，可以安全地假定两者都引用相同的模块。</target>
        </trans-unit>
        <trans-unit id="191b911b521fd16f873a9320d9b6eb03a484f7d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.memoryUsage()&lt;/code&gt; method returns an object describing the memory usage of the Node.js process measured in bytes.</source>
          <target state="translated">所述 &lt;code&gt;process.memoryUsage()&lt;/code&gt; 方法返回描述的Node.js的内存使用情况的目标处理以字节为单位来测量。</target>
        </trans-unit>
        <trans-unit id="a8983e937ed2efcfdac105808395486f4b6cda97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.noDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--no-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">该 &lt;code&gt;process.noDeprecation&lt;/code&gt; 属性指示是否 &lt;code&gt;--no-deprecation&lt;/code&gt; 标志被设置在当前Node.js的过程。有关此标志的行为的更多信息，请参见&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; 事件&lt;/a&gt;的文档和&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; 方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1df30c5c00fda9c639114a7d3b1c2f2d35df2248" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.pid&lt;/code&gt; property returns the PID of the process.</source>
          <target state="translated">该 &lt;code&gt;process.pid&lt;/code&gt; 属性返回进程的PID。</target>
        </trans-unit>
        <trans-unit id="acaa47049ce31949c1b04bc4f40b7065fb80a583" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.platform&lt;/code&gt; property returns a string identifying the operating system platform on which the Node.js process is running.</source>
          <target state="translated">所述 &lt;code&gt;process.platform&lt;/code&gt; 属性返回一个字符串识别在其上的Node.js进程正在运行的操作系统平台。</target>
        </trans-unit>
        <trans-unit id="eff9bdee5852ccca216f17f3c7f3889a21c51dc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.ppid&lt;/code&gt; property returns the PID of the current parent process.</source>
          <target state="translated">该 &lt;code&gt;process.ppid&lt;/code&gt; 属性返回当前的父进程的PID。</target>
        </trans-unit>
        <trans-unit id="b5be56c986bb2a57fe5b74e3d4ff21efc9a8bc0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.release&lt;/code&gt; property returns an &lt;code&gt;Object&lt;/code&gt; containing metadata related to the current release, including URLs for the source tarball and headers-only tarball.</source>
          <target state="translated">所述 &lt;code&gt;process.release&lt;/code&gt; 属性返回一个 &lt;code&gt;Object&lt;/code&gt; 相关的当前版本包含元数据，包括网址的源码包和报头只压缩包。</target>
        </trans-unit>
        <trans-unit id="811c638aa90d3dc585a7798554c7019e09390dc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; function sets a function that will be invoked when an uncaught exception occurs, which will receive the exception value itself as its first argument.</source>
          <target state="translated">所述 &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; 函数设置时未捕获的异常发生时将被调用的函数，这将收到异常值本身作为第一个参数。</target>
        </trans-unit>
        <trans-unit id="2fc2a8eeb7c653eb83e8bcad3bd6133d002b2e9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setegid()&lt;/code&gt; method sets the effective group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setegid.2.html&quot;&gt;&lt;code&gt;setegid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated a numeric ID.</source>
          <target state="translated">所述 &lt;code&gt;process.setegid()&lt;/code&gt; 方法设置过程的有效组标识。（请参阅&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setegid.2.html&quot;&gt; &lt;code&gt;setegid(2)&lt;/code&gt; &lt;/a&gt;。） &lt;code&gt;id&lt;/code&gt; 可以作为数字ID或组名字符串传递。如果指定了组名，则此方法将在解析关联的数字ID时阻塞。</target>
        </trans-unit>
        <trans-unit id="b5076a0f2622ac5941128ba5a36bf507f3fb4978" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.seteuid()&lt;/code&gt; method sets the effective user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/seteuid.2.html&quot;&gt;&lt;code&gt;seteuid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.</source>
          <target state="translated">所述 &lt;code&gt;process.seteuid()&lt;/code&gt; 方法设置过程的有效用户标识。（请参阅&lt;a href=&quot;http://man7.org/linux/man-pages/man2/seteuid.2.html&quot;&gt; &lt;code&gt;seteuid(2)&lt;/code&gt; &lt;/a&gt;。） &lt;code&gt;id&lt;/code&gt; 可以作为数字ID或用户名字符串传递。如果指定了用户名，则该方法将在解析关联的数字ID时阻塞。</target>
        </trans-unit>
        <trans-unit id="fa29192faf11ea969773313f63af6ca30198b281" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setgid()&lt;/code&gt; method sets the group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setgid.2.html&quot;&gt;&lt;code&gt;setgid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated numeric ID.</source>
          <target state="translated">所述 &lt;code&gt;process.setgid()&lt;/code&gt; 方法设置过程的组标识。（请参阅&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setgid.2.html&quot;&gt; &lt;code&gt;setgid(2)&lt;/code&gt; &lt;/a&gt;。） &lt;code&gt;id&lt;/code&gt; 可以作为数字ID或组名字符串传递。如果指定了组名，则此方法将在解析关联的数字ID时阻塞。</target>
        </trans-unit>
        <trans-unit id="71c4c145094b051c684076f71f43e6e3e387e712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setgroups()&lt;/code&gt; method sets the supplementary group IDs for the Node.js process. This is a privileged operation that requires the Node.js process to have &lt;code&gt;root&lt;/code&gt; or the &lt;code&gt;CAP_SETGID&lt;/code&gt; capability.</source>
          <target state="translated">所述 &lt;code&gt;process.setgroups()&lt;/code&gt; 方法集Node.js的过程中辅助组标识。这是一项特权操作，需要Node.js进程具有 &lt;code&gt;root&lt;/code&gt; 或 &lt;code&gt;CAP_SETGID&lt;/code&gt; 功能。</target>
        </trans-unit>
        <trans-unit id="548e1236f80bd23b2ec686e399bbc916d2cb95ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setuid(id)&lt;/code&gt; method sets the user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setuid.2.html&quot;&gt;&lt;code&gt;setuid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.</source>
          <target state="translated">所述 &lt;code&gt;process.setuid(id)&lt;/code&gt; 方法设置过程的用户的身份。（请参阅&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setuid.2.html&quot;&gt; &lt;code&gt;setuid(2)&lt;/code&gt; &lt;/a&gt;。） &lt;code&gt;id&lt;/code&gt; 可以作为数字ID或用户名字符串传递。如果指定了用户名，则该方法将在解析关联的数字ID时阻塞。</target>
        </trans-unit>
        <trans-unit id="5081fd6ebb2403afeaea915b7bd21a31860635b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stderr&lt;/code&gt; property returns a stream connected to &lt;code&gt;stderr&lt;/code&gt; (fd &lt;code&gt;2&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;2&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream.</source>
          <target state="translated">所述 &lt;code&gt;process.stderr&lt;/code&gt; 属性返回连接到流 &lt;code&gt;stderr&lt;/code&gt; 的（FD &lt;code&gt;2&lt;/code&gt; ）。除非fd &lt;code&gt;2&lt;/code&gt; 引用文件，否则它是&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;双工&lt;/a&gt;流），在这种情况下，它是&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;可写&lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="a1fcfbce9ab7065707f5aa8853282b67206fe402" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stdin&lt;/code&gt; property returns a stream connected to &lt;code&gt;stdin&lt;/code&gt; (fd &lt;code&gt;0&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;0&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream.</source>
          <target state="translated">所述 &lt;code&gt;process.stdin&lt;/code&gt; 属性返回连接到流 &lt;code&gt;stdin&lt;/code&gt; （FD &lt;code&gt;0&lt;/code&gt; ）。除非fd &lt;code&gt;0&lt;/code&gt; 指向文件，否则它是一个&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（它是一个&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;双工&lt;/a&gt;流），在这种情况下，它是一个&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="eb08e01031c16b9aa9d0024fe2532eb2e3e999a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stdout&lt;/code&gt; property returns a stream connected to &lt;code&gt;stdout&lt;/code&gt; (fd &lt;code&gt;1&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;1&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream.</source>
          <target state="translated">所述 &lt;code&gt;process.stdout&lt;/code&gt; 属性返回连接到流 &lt;code&gt;stdout&lt;/code&gt; （FD &lt;code&gt;1&lt;/code&gt; ）。除非fd &lt;code&gt;1&lt;/code&gt; 引用文件，否则它是&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;双工&lt;/a&gt;流），在这种情况下，它是&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;可写&lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="9cd576ae3e4876157374a35dbd6210172c5e9640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.throwDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--throw-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">该 &lt;code&gt;process.throwDeprecation&lt;/code&gt; 属性指示是否 &lt;code&gt;--throw-deprecation&lt;/code&gt; 标志被设置在当前Node.js的过程。有关此标志的行为的更多信息，请参见&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; 事件&lt;/a&gt;的文档和&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; 方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a15c02c35a18d0437643387e177371d9e6917b1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.title&lt;/code&gt; property returns the current process title (i.e. returns the current value of &lt;code&gt;ps&lt;/code&gt;). Assigning a new value to &lt;code&gt;process.title&lt;/code&gt; modifies the current value of &lt;code&gt;ps&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;process.title&lt;/code&gt; 属性返回当前进程标题（即返回的当前值 &lt;code&gt;ps&lt;/code&gt; ）。为 &lt;code&gt;process.title&lt;/code&gt; 分配新值将修改 &lt;code&gt;ps&lt;/code&gt; 的当前值。</target>
        </trans-unit>
        <trans-unit id="b9b5bc60b8b13672f1ce76e6ac6f0e3f1ed8658c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.traceDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--trace-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">该 &lt;code&gt;process.traceDeprecation&lt;/code&gt; 属性指示是否 &lt;code&gt;--trace-deprecation&lt;/code&gt; 标志被设置在当前Node.js的过程。有关此标志的行为的更多信息，请参见&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; 事件&lt;/a&gt;的文档和&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; 方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="694d48572e7659a3c90fe3f65ec90ed80b9a9e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.umask()&lt;/code&gt; method sets or returns the Node.js process's file mode creation mask. Child processes inherit the mask from the parent process. Invoked without an argument, the current mask is returned, otherwise the umask is set to the argument value and the previous mask is returned.</source>
          <target state="translated">该 &lt;code&gt;process.umask()&lt;/code&gt; 方法设置或返回Node.js的进程的文件模式创建掩码。子进程从父进程继承掩码。调用时不带参数，则返回当前掩码，否则将umask设置为参数值并返回前一个掩码。</target>
        </trans-unit>
        <trans-unit id="d1a2bae7c8b84dc3492873bd48e3d5fc03d34913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.uptime()&lt;/code&gt; method returns the number of seconds the current Node.js process has been running.</source>
          <target state="translated">所述 &lt;code&gt;process.uptime()&lt;/code&gt; 方法返回的当前Node.js的进程已运行的秒数。</target>
        </trans-unit>
        <trans-unit id="a55e19423be1cf5e5fd45f377c01fd1c5c5c7be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.version&lt;/code&gt; property returns the Node.js version string.</source>
          <target state="translated">该 &lt;code&gt;process.version&lt;/code&gt; 属性返回Node.js的版本字符串。</target>
        </trans-unit>
        <trans-unit id="5cd91315fa24f2e5fb1ec6c0fe3012d7b04a6c87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.versions&lt;/code&gt; property returns an object listing the version strings of Node.js and its dependencies. &lt;code&gt;process.versions.modules&lt;/code&gt; indicates the current ABI version, which is increased whenever a C++ API changes. Node.js will refuse to load modules that were compiled against a different module ABI version.</source>
          <target state="translated">该 &lt;code&gt;process.versions&lt;/code&gt; 属性返回一个对象列表的Node.js及其依赖的版本字符串。 &lt;code&gt;process.versions.modules&lt;/code&gt; 指示当前的ABI版本，每当C ++ API更改时，该版本就会增加。Node.js将拒绝加载针对不同模块ABI版本编译的模块。</target>
        </trans-unit>
        <trans-unit id="ccc599c540c487983716c87164c83eff4013c0e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process&lt;/code&gt; object is a &lt;code&gt;global&lt;/code&gt; that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using &lt;code&gt;require()&lt;/code&gt;. It can also be explicitly accessed using &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="translated">该 &lt;code&gt;process&lt;/code&gt; 对象是一个 &lt;code&gt;global&lt;/code&gt; 的是在提供有关信息和控制，目前Node.js的过程。全局而言，它始终可用于Node.js应用程序，而无需使用 &lt;code&gt;require()&lt;/code&gt; 。也可以使用 &lt;code&gt;require()&lt;/code&gt; 显式访问它：</target>
        </trans-unit>
        <trans-unit id="bc3750100f2cebbb32bfd75aab8de7089d8ecadb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process&lt;/code&gt; object is an instance of &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;process&lt;/code&gt; 对象是一个实例&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="16d89af6e6069a7f2da9647bc46587a5e575bc24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;produceCachedData&lt;/code&gt; is deprecated in favour of &lt;code&gt;script.createCachedData()&lt;/code&gt;</source>
          <target state="translated">该 &lt;code&gt;produceCachedData&lt;/code&gt; 是赞成不赞成的 &lt;code&gt;script.createCachedData()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d20471aca1c68e2609119fc1a3be70dd8ae453d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;produceCachedData&lt;/code&gt; option is deprecated. Use &lt;a href=&quot;vm#vm_script_createcacheddata&quot;&gt;&lt;code&gt;script.createCachedData()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">该 &lt;code&gt;produceCachedData&lt;/code&gt; 选项已被弃用。请改用&lt;a href=&quot;vm#vm_script_createcacheddata&quot;&gt; &lt;code&gt;script.createCachedData()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="826f7bd6fc7391d89e12f247d46ccc2f906c4e5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prompt&lt;/code&gt; option is supported now.</source>
          <target state="translated">在 &lt;code&gt;prompt&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="a98c7c4f83c7e514f693d9bddfce7f7e87772c91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;protocol&lt;/code&gt; property identifies the URL's lower-cased protocol scheme.</source>
          <target state="translated">该 &lt;code&gt;protocol&lt;/code&gt; 属性标识的URL的是小写字母协议方案。</target>
        </trans-unit>
        <trans-unit id="228c4ac856e053044883415e7373842750fd563f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.decode()&lt;/code&gt; method converts a &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; string of ASCII-only characters to the equivalent string of Unicode codepoints.</source>
          <target state="translated">所述 &lt;code&gt;punycode.decode()&lt;/code&gt; 方法转换一个&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;的Punycode&lt;/a&gt;的仅ASCII字符的字符串为Unicode码点的等效串。</target>
        </trans-unit>
        <trans-unit id="408bbc431e16aec56b6b6e8fb9712fe1f4b62965" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.encode()&lt;/code&gt; method converts a string of Unicode codepoints to a &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; string of ASCII-only characters.</source>
          <target state="translated">所述 &lt;code&gt;punycode.encode()&lt;/code&gt; 方法转换Unicode代码点的一个字符串&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;的Punycode&lt;/a&gt;的仅ASCII字符的字符串。</target>
        </trans-unit>
        <trans-unit id="91875f6288f895ce3a2a09be67905a3132039dee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.toASCII()&lt;/code&gt; method converts a Unicode string representing an Internationalized Domain Name to &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt;. Only the non-ASCII parts of the domain name will be converted. Calling &lt;code&gt;punycode.toASCII()&lt;/code&gt; on a string that already only contains ASCII characters will have no effect.</source>
          <target state="translated">所述 &lt;code&gt;punycode.toASCII()&lt;/code&gt; 方法将表示国际化域名为Unicode字符串&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;的Punycode&lt;/a&gt;。仅域名的非ASCII部分将被转换。在仅包含ASCII字符的字符串上调用 &lt;code&gt;punycode.toASCII()&lt;/code&gt; 将无效。</target>
        </trans-unit>
        <trans-unit id="cc4b8dfe8ceb6a10ad2abdbc92c91f0d4a7f2f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.toUnicode()&lt;/code&gt; method converts a string representing a domain name containing &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; encoded characters into Unicode. Only the &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; encoded parts of the domain name are be converted.</source>
          <target state="translated">所述 &lt;code&gt;punycode.toUnicode()&lt;/code&gt; 方法将表示包含一个域名字符串&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;的Punycode&lt;/a&gt;编码字符为Unicode。仅转换域名的&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt;编码部分。</target>
        </trans-unit>
        <trans-unit id="0befa44f7babd888957b6e36c930438b76ffd9ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.ucs2.decode()&lt;/code&gt; method returns an array containing the numeric codepoint values of each Unicode symbol in the string.</source>
          <target state="translated">所述 &lt;code&gt;punycode.ucs2.decode()&lt;/code&gt; 方法返回包含字符串中每个Unicode符号的数字码点值的数组。</target>
        </trans-unit>
        <trans-unit id="267a9d0ce3eff929cfb8ef044cf76a59b55c9c1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.ucs2.encode()&lt;/code&gt; method returns a string based on an array of numeric code point values.</source>
          <target state="translated">所述 &lt;code&gt;punycode.ucs2.encode()&lt;/code&gt; 方法返回基于数字码点值的阵列上的字符串。</target>
        </trans-unit>
        <trans-unit id="8e23d6e8be896f3734158314b4e9867f3ad47751" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module is a bundled version of the &lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt; module. It can be accessed using:</source>
          <target state="translated">该 &lt;code&gt;punycode&lt;/code&gt; 模块是一个捆绑版本&lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt;模块。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="d808670b3cd55126d38e22493d03f04db2cf6c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module is a third-party dependency used by Node.js and made available to developers as a convenience. Fixes or other modifications to the module must be directed to the &lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt; project.</source>
          <target state="translated">该 &lt;code&gt;punycode&lt;/code&gt; 模块是Node.js的使用，并提供给开发者一个方便第三方的依赖。对模块的修复或其他修改必须定向到&lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt;项目。</target>
        </trans-unit>
        <trans-unit id="41de5cb0574f2fba4ee155fa5a1b2a348c0df173" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module provides a simple implementation of the Punycode standard.</source>
          <target state="translated">该 &lt;code&gt;punycode&lt;/code&gt; 模块提供一个简单实现的Punycode标准。</target>
        </trans-unit>
        <trans-unit id="73bb1f54941b1b2bcfe26b1faa1939a3272676d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; property is either the query string without the leading ASCII question mark (&lt;code&gt;?&lt;/code&gt;), or an object returned by the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module's &lt;code&gt;parse()&lt;/code&gt; method. Whether the &lt;code&gt;query&lt;/code&gt; property is a string or object is determined by the &lt;code&gt;parseQueryString&lt;/code&gt; argument passed to &lt;code&gt;url.parse()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;query&lt;/code&gt; 属性是没有前导ASCII问号（查询字符串 &lt;code&gt;?&lt;/code&gt; ），或者通过返回的对象&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;模块的 &lt;code&gt;parse()&lt;/code&gt; 方法。无论 &lt;code&gt;query&lt;/code&gt; 属性是字符串或目的是通过确定 &lt;code&gt;parseQueryString&lt;/code&gt; 传递给自变量 &lt;code&gt;url.parse()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2153550243326c160d012c291015912a1ad6a730" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.decode()&lt;/code&gt; function is an alias for &lt;code&gt;querystring.parse()&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;querystring.decode()&lt;/code&gt; 函数是一个别名 &lt;code&gt;querystring.parse()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bed9c0e3a6a05f53d9ef96d274c51de9ef8679c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.encode()&lt;/code&gt; function is an alias for &lt;code&gt;querystring.stringify()&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;querystring.encode()&lt;/code&gt; 函数是一个别名 &lt;code&gt;querystring.stringify()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6132c47d28eb2786bc7bb47dc7d4db7a3c2ff1d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.escape()&lt;/code&gt; method is used by &lt;code&gt;querystring.stringify()&lt;/code&gt; and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement percent-encoding implementation if necessary by assigning &lt;code&gt;querystring.escape&lt;/code&gt; to an alternative function.</source>
          <target state="translated">所述 &lt;code&gt;querystring.escape()&lt;/code&gt; 方法用于通过 &lt;code&gt;querystring.stringify()&lt;/code&gt; ，并且通常不期望直接使用。它的主要输出目的是允许应用程序代码在必要时通过将 &lt;code&gt;querystring.escape&lt;/code&gt; 分配给替代函数来提供替代的百分比编码实现。</target>
        </trans-unit>
        <trans-unit id="c5224c380629537428e0e4f4c27dbf51ea35016e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.escape()&lt;/code&gt; method performs URL percent-encoding on the given &lt;code&gt;str&lt;/code&gt; in a manner that is optimized for the specific requirements of URL query strings.</source>
          <target state="translated">所述 &lt;code&gt;querystring.escape()&lt;/code&gt; 百分号编码给定的方法进行URL &lt;code&gt;str&lt;/code&gt; 的方式，是为URL的查询字符串的具体要求进行优化。</target>
        </trans-unit>
        <trans-unit id="5a10b77992e833bb7410543f2bec62c4ac5b0e9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.parse()&lt;/code&gt; method parses a URL query string (&lt;code&gt;str&lt;/code&gt;) into a collection of key and value pairs.</source>
          <target state="translated">该 &lt;code&gt;querystring.parse()&lt;/code&gt; 方法解析一个URL查询字符串（ &lt;code&gt;str&lt;/code&gt; ）成键和值对的集合。</target>
        </trans-unit>
        <trans-unit id="e5a1960ba5fd4e2b74aca2fe1c165907f1f0d579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.stringify()&lt;/code&gt; method produces a URL query string from a given &lt;code&gt;obj&lt;/code&gt; by iterating through the object's &quot;own properties&quot;.</source>
          <target state="translated">所述 &lt;code&gt;querystring.stringify()&lt;/code&gt; 方法从给定的产生URL查询字符串 &lt;code&gt;obj&lt;/code&gt; 通过该对象的&amp;ldquo;自己的属性&amp;rdquo;迭代。</target>
        </trans-unit>
        <trans-unit id="c5307406ea6fa7bf57e06f70c0174467f51d9697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.unescape()&lt;/code&gt; method is used by &lt;code&gt;querystring.parse()&lt;/code&gt; and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement decoding implementation if necessary by assigning &lt;code&gt;querystring.unescape&lt;/code&gt; to an alternative function.</source>
          <target state="translated">所述 &lt;code&gt;querystring.unescape()&lt;/code&gt; 方法用于通过 &lt;code&gt;querystring.parse()&lt;/code&gt; ，并且通常不期望直接使用。导出它主要是为了允许应用程序代码在必要时通过将 &lt;code&gt;querystring.unescape&lt;/code&gt; 分配给替代函数来提供替代解码实现。</target>
        </trans-unit>
        <trans-unit id="3dfebb02c6228ac8a5328e125126812feb5b89f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.unescape()&lt;/code&gt; method performs decoding of URL percent-encoded characters on the given &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;querystring.unescape()&lt;/code&gt; 方法执行的URL百分比编码字符在给定的解码 &lt;code&gt;str&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6d1c0ca34aa769ac9ddc016377ff8b652b08575" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring&lt;/code&gt; module provides utilities for parsing and formatting URL query strings. It can be accessed using:</source>
          <target state="translated">该 &lt;code&gt;querystring&lt;/code&gt; 模块提供工具，用于分析和格式化URL查询字符串。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="30245987a4dc60e4e4ad7243ddad02cac4a76463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queueMicrotask()&lt;/code&gt; method queues a microtask to invoke &lt;code&gt;callback&lt;/code&gt;. If &lt;code&gt;callback&lt;/code&gt; throws an exception, the &lt;a href=&quot;process#process_process&quot;&gt;&lt;code&gt;process&lt;/code&gt; object&lt;/a&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">所述 &lt;code&gt;queueMicrotask()&lt;/code&gt; 方法队列一个microtask调用 &lt;code&gt;callback&lt;/code&gt; 。如果 &lt;code&gt;callback&lt;/code&gt; 引发异常，则将发出&lt;a href=&quot;process#process_process&quot;&gt; &lt;code&gt;process&lt;/code&gt; 对象&lt;/a&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="39930c61db776c2617ebaa27b1b42a4bdf7d2790" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rawPacket&lt;/code&gt; is the current buffer that just parsed. Adding this buffer to the error object of &lt;code&gt;'clientError'&lt;/code&gt; event is to make it possible that developers can log the broken packet.</source>
          <target state="translated">该 &lt;code&gt;rawPacket&lt;/code&gt; 是，仅仅解析当前缓冲区。将此缓冲区添加到 &lt;code&gt;'clientError'&lt;/code&gt; 事件的错误对象中是为了使开发人员可以记录损坏的数据包。</target>
        </trans-unit>
        <trans-unit id="93ee6743dbfa8019b82c97cbc7225730ee7f7113" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable._read()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">所述 &lt;code&gt;readable._read()&lt;/code&gt; 方法的前缀以下划线，因为它是内部的定义它的类，并且不应该被用户程序直接调用。</target>
        </trans-unit>
        <trans-unit id="10cec6d0c6d91f034eb6cec16dd30e3ca6d38432" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.isPaused()&lt;/code&gt; method returns the current operating state of the &lt;code&gt;Readable&lt;/code&gt;. This is used primarily by the mechanism that underlies the &lt;code&gt;readable.pipe()&lt;/code&gt; method. In most typical cases, there will be no reason to use this method directly.</source>
          <target state="translated">所述 &lt;code&gt;readable.isPaused()&lt;/code&gt; 方法返回的当前操作状态 &lt;code&gt;Readable&lt;/code&gt; 。这主要由read.pipe &lt;code&gt;readable.pipe()&lt;/code&gt; 方法基础的机制使用。在大多数典型情况下，没有理由直接使用此方法。</target>
        </trans-unit>
        <trans-unit id="b31cf177473ce29edcad6d40ce117be0e7f14407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pause()&lt;/code&gt; method has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listener.</source>
          <target state="translated">所述 &lt;code&gt;readable.pause()&lt;/code&gt; 方法没有效果，如果有一个 &lt;code&gt;'readable'&lt;/code&gt; 事件侦听器。</target>
        </trans-unit>
        <trans-unit id="b002965c32b67e9b46208135e46530c174b4fc54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pause()&lt;/code&gt; method will cause a stream in flowing mode to stop emitting &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer.</source>
          <target state="translated">所述 &lt;code&gt;readable.pause()&lt;/code&gt; 方法将在流动模式停止发射引起流&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;的事件时，流模式的切换进行。任何可用的数据将保留在内部缓冲区中。</target>
        </trans-unit>
        <trans-unit id="4eb396a0c95f297e4817955f466c443654703ac3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pipe()&lt;/code&gt; method attaches a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream to the &lt;code&gt;readable&lt;/code&gt;, causing it to switch automatically into flowing mode and push all of its data to the attached &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt;. The flow of data will be automatically managed so that the destination &lt;code&gt;Writable&lt;/code&gt; stream is not overwhelmed by a faster &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="translated">所述 &lt;code&gt;readable.pipe()&lt;/code&gt; 方法附加一个&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;流至 &lt;code&gt;readable&lt;/code&gt; ，使其自动切换到流模式和推它的所有数据到连接的&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;。数据流将被自动管理，以使目标 &lt;code&gt;Writable&lt;/code&gt; 流不会被更快的 &lt;code&gt;Readable&lt;/code&gt; 流淹没。</target>
        </trans-unit>
        <trans-unit id="40beb50c9579d94c270f6b6fd52c38e624a46fb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pipe()&lt;/code&gt; method returns a reference to the &lt;em&gt;destination&lt;/em&gt; stream making it possible to set up chains of piped streams:</source>
          <target state="translated">所述 &lt;code&gt;readable.pipe()&lt;/code&gt; 方法返回到一个参考&lt;em&gt;目的地&lt;/em&gt;使得能够建立管道流的链流：</target>
        </trans-unit>
        <trans-unit id="df0ca1507c102328f0c4d38e0061a85b34869b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.push()&lt;/code&gt; method is designed to be as flexible as possible. For example, when wrapping a lower-level source that provides some form of pause/resume mechanism, and a data callback, the low-level source can be wrapped by the custom &lt;code&gt;Readable&lt;/code&gt; instance:</source>
          <target state="translated">所述 &lt;code&gt;readable.push()&lt;/code&gt; 方法被设计为尽可能地灵活。例如，当包装提供某种形式的暂停/恢复机制的低级源和数据回调时，可以通过自定义 &lt;code&gt;Readable&lt;/code&gt; 实例包装低级源：</target>
        </trans-unit>
        <trans-unit id="3f5e547595479ed3384e0eb249b538f6f2836384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.push()&lt;/code&gt; method is intended be called only by &lt;code&gt;Readable&lt;/code&gt; implementers, and only from within the &lt;code&gt;readable._read()&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;readable.push()&lt;/code&gt; 方法旨在仅由称为 &lt;code&gt;Readable&lt;/code&gt; 实施者，只有从内 &lt;code&gt;readable._read()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="7524ab06bd3d9013528b860fd7928c96bab32f50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.read()&lt;/code&gt; method pulls some data out of the internal buffer and returns it. If no data available to be read, &lt;code&gt;null&lt;/code&gt; is returned. By default, the data will be returned as a &lt;code&gt;Buffer&lt;/code&gt; object unless an encoding has been specified using the &lt;code&gt;readable.setEncoding()&lt;/code&gt; method or the stream is operating in object mode.</source>
          <target state="translated">所述 &lt;code&gt;readable.read()&lt;/code&gt; 方法拉出一些数据从内部缓冲器，并返回它的。如果没有可读取的数据，则返回 &lt;code&gt;null&lt;/code&gt; 。默认情况下，除非使用 &lt;code&gt;readable.setEncoding()&lt;/code&gt; 方法指定了编码或流在对象模式下运行，否则数据将作为 &lt;code&gt;Buffer&lt;/code&gt; 对象返回。</target>
        </trans-unit>
        <trans-unit id="6d01a823a8005400d55db78dcbbecbca4b2d2630" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.read()&lt;/code&gt; method should only be called on &lt;code&gt;Readable&lt;/code&gt; streams operating in paused mode. In flowing mode, &lt;code&gt;readable.read()&lt;/code&gt; is called automatically until the internal buffer is fully drained.</source>
          <target state="translated">所述 &lt;code&gt;readable.read()&lt;/code&gt; 方法应该只被称为 &lt;code&gt;Readable&lt;/code&gt; 在暂停模式下操作流。在流模式下，将自动调用 &lt;code&gt;readable.read()&lt;/code&gt; 直到内部缓冲区完全耗尽为止。</target>
        </trans-unit>
        <trans-unit id="deed8c40399d92ccac8f49f87f78ca29453829e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method can be used to fully consume the data from a stream without actually processing any of that data:</source>
          <target state="translated">所述 &lt;code&gt;readable.resume()&lt;/code&gt; 方法可用于完全消耗从一个流的数据，而无需实际处理任何数据的：</target>
        </trans-unit>
        <trans-unit id="67b8504af943e24f27cd912b4a2f12f128f2a1ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method causes an explicitly paused &lt;code&gt;Readable&lt;/code&gt; stream to resume emitting &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events, switching the stream into flowing mode.</source>
          <target state="translated">所述 &lt;code&gt;readable.resume()&lt;/code&gt; 方法导致明确地暂停 &lt;code&gt;Readable&lt;/code&gt; 流以恢复发射&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;事件，流交换到流模式。</target>
        </trans-unit>
        <trans-unit id="385656b7c5ea9118f2532b255395a4a4185c8bf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listener.</source>
          <target state="translated">所述 &lt;code&gt;readable.resume()&lt;/code&gt; 方法没有效果，如果有一个 &lt;code&gt;'readable'&lt;/code&gt; 事件侦听器。</target>
        </trans-unit>
        <trans-unit id="c040a86eed6518119372b49051a74bee86060ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.setEncoding()&lt;/code&gt; method sets the character encoding for data read from the &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="translated">所述 &lt;code&gt;readable.setEncoding()&lt;/code&gt; 方法集的字符编码数据从读 &lt;code&gt;Readable&lt;/code&gt; 流。</target>
        </trans-unit>
        <trans-unit id="346734afb05ca4e259af67e729481a1570cc346e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.unpipe()&lt;/code&gt; method detaches a &lt;code&gt;Writable&lt;/code&gt; stream previously attached using the &lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;readable.unpipe()&lt;/code&gt; 方法分离一个 &lt;code&gt;Writable&lt;/code&gt; 使用先前连接流&lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt; &lt;code&gt;stream.pipe()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="3c3b8b68124246bfe57ac4975a1c8937cd39a32e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.unshift()&lt;/code&gt; method pushes a chunk of data back into the internal buffer. This is useful in certain situations where a stream is being consumed by code that needs to &quot;un-consume&quot; some amount of data that it has optimistically pulled out of the source, so that the data can be passed on to some other party.</source>
          <target state="translated">所述 &lt;code&gt;readable.unshift()&lt;/code&gt; 方法推动数据块回内部缓冲器。这在某些情况下非常有用，在某些情况下，流正在被需要&amp;ldquo;取消使用&amp;rdquo;从乐观地从源中拉出的大量数据的代码使用，以便可以将数据传递给另一方。</target>
        </trans-unit>
        <trans-unit id="af39af0d7243c6f7a04b6565b68a4532aecaac6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readableHighWaterMark&lt;/code&gt; and &lt;code&gt;writableHighWaterMark&lt;/code&gt; options are supported now.</source>
          <target state="translated">该 &lt;code&gt;readableHighWaterMark&lt;/code&gt; 和 &lt;code&gt;writableHighWaterMark&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="caf7cf20b5829c60b2ece6960157ef5b46432184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.Interface&lt;/code&gt; instance is finished once the &lt;code&gt;'close'&lt;/code&gt; event is emitted.</source>
          <target state="translated">一旦发出 &lt;code&gt;'close'&lt;/code&gt; 事件， &lt;code&gt;readline.Interface&lt;/code&gt; 实例即告完成。</target>
        </trans-unit>
        <trans-unit id="e4bd58e1c634bfc6e7a4aea91a5e49231b1c0690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.clearLine()&lt;/code&gt; method clears current line of given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; stream in a specified direction identified by &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;readline.clearLine()&lt;/code&gt; 方法清除给定的电流线&lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;在所标识的指定方向流 &lt;code&gt;dir&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4426aa47fac03cd3a3473ed655e8669aed5da5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.clearScreenDown()&lt;/code&gt; method clears the given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; stream from the current position of the cursor down.</source>
          <target state="translated">所述 &lt;code&gt;readline.clearScreenDown()&lt;/code&gt; 方法清除所述给定&lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;从光标向下的当前位置流。</target>
        </trans-unit>
        <trans-unit id="5fc664c5790e107254a94b5912d0bd3240885968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.createInterface()&lt;/code&gt; method creates a new &lt;code&gt;readline.Interface&lt;/code&gt; instance.</source>
          <target state="translated">该 &lt;code&gt;readline.createInterface()&lt;/code&gt; 方法创建一个新 &lt;code&gt;readline.Interface&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="5836c4f9ce7c37e68b431dba356d7f48120837c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.cursorTo()&lt;/code&gt; method moves cursor to the specified position in a given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;&lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;readline.cursorTo()&lt;/code&gt; 方法把光标移到在给定的指定位置&lt;a href=&quot;tty&quot;&gt;TTY &lt;/a&gt; &lt;code&gt;stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07bae1b92e44b9c284369abc211727c51537a250" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.emitKeypressEvents()&lt;/code&gt; method causes the given &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream to begin emitting &lt;code&gt;'keypress'&lt;/code&gt; events corresponding to received input.</source>
          <target state="translated">所述 &lt;code&gt;readline.emitKeypressEvents()&lt;/code&gt; 方法使给定的&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;可读&lt;/a&gt;流以开始发光 &lt;code&gt;'keypress'&lt;/code&gt; 对应于接收到的输入事件。</target>
        </trans-unit>
        <trans-unit id="17e092a48964934cca04dfb7cdd8d3238574e8df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.moveCursor()&lt;/code&gt; method moves the cursor &lt;em&gt;relative&lt;/em&gt; to its current position in a given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;&lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;readline.moveCursor()&lt;/code&gt; 方法将光标移动&lt;em&gt;相&lt;/em&gt;，以在给定其当前位置&lt;a href=&quot;tty&quot;&gt;TTY &lt;/a&gt; &lt;code&gt;stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e79db115dc200fa9356a7c5ef91d8c9284c30f2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline&lt;/code&gt; module provides an interface for reading data from a &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream (such as &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt;) one line at a time. It can be accessed using:</source>
          <target state="translated">所述 &lt;code&gt;readline&lt;/code&gt; 模块提供用于读取从数据的接口&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;可读&lt;/a&gt;流（如&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;）在一次一行。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="91a37ef88760a1e1055abebacad77b336f36d8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recvBufferSize&lt;/code&gt; and &lt;code&gt;sendBufferSize&lt;/code&gt; options are supported now.</source>
          <target state="translated">该 &lt;code&gt;recvBufferSize&lt;/code&gt; 和 &lt;code&gt;sendBufferSize&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="297f39796ec740fbf6ca8c7b4f53526f22394916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl.REPLServer&lt;/code&gt; class inherits from the &lt;a href=&quot;readline#readline_class_interface&quot;&gt;&lt;code&gt;readline.Interface&lt;/code&gt;&lt;/a&gt; class. Instances of &lt;code&gt;repl.REPLServer&lt;/code&gt; are created using the &lt;code&gt;repl.start()&lt;/code&gt; method and &lt;em&gt;should not&lt;/em&gt; be created directly using the JavaScript &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">该 &lt;code&gt;repl.REPLServer&lt;/code&gt; 类继承了&lt;a href=&quot;readline#readline_class_interface&quot;&gt; &lt;code&gt;readline.Interface&lt;/code&gt; &lt;/a&gt;类。 &lt;code&gt;repl.REPLServer&lt;/code&gt; 的实例是使用 &lt;code&gt;repl.start()&lt;/code&gt; 方法创建的，&lt;em&gt;不应&lt;/em&gt;直接使用JavaScript &lt;code&gt;new&lt;/code&gt; 关键字创建。</target>
        </trans-unit>
        <trans-unit id="046929e0c4d6f589b8a544a51cc42f7fb89edf9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl.start()&lt;/code&gt; method creates and starts a &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">该 &lt;code&gt;repl.start()&lt;/code&gt; 方法创建并启动&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="90f98e1e7da501cb08e226bfb8ef8830de8da4f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; command allows code to be evaluated remotely. The &lt;code&gt;next&lt;/code&gt; command steps to the next line. Type &lt;code&gt;help&lt;/code&gt; to see what other commands are available.</source>
          <target state="translated">的 &lt;code&gt;repl&lt;/code&gt; 命令允许代码被远程评估。的 &lt;code&gt;next&lt;/code&gt; 命令步骤到下一行。输入 &lt;code&gt;help&lt;/code&gt; 以查看其他可用命令。</target>
        </trans-unit>
        <trans-unit id="0c7e83295655ebdff0b8c9ba68d0bc6b523483cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module exports the &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; class. While running, instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; will accept individual lines of user input, evaluate those according to a user-defined evaluation function, then output the result. Input and output may be from &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;, respectively, or may be connected to any Node.js &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;repl&lt;/code&gt; 模块导出&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt;类。在运行时，&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; 的&lt;/a&gt;实例将接受用户输入的各个行，并根据用户定义的评估功能对其进行评估，然后输出结果。输入和输出可以分别来自 &lt;code&gt;stdin&lt;/code&gt; 和 &lt;code&gt;stdout&lt;/code&gt; ，或者可以连接到任何Node.js &lt;a href=&quot;stream&quot;&gt;流&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1951a81b0b8f762a64a14d642731c2b48d00965d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications. It can be accessed using:</source>
          <target state="translated">该 &lt;code&gt;repl&lt;/code&gt; 模块提供了一个阅读-EVAL-打印循环（REPL）实现，可作为一个独立的程序或includible在其他应用程序。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="cf27f1073da71855d9a610f1a35c2a529c179f5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module was unable to parse data from the REPL history file.</source>
          <target state="translated">该 &lt;code&gt;repl&lt;/code&gt; 模块无法从REPL历史文件解析的数据。</target>
        </trans-unit>
        <trans-unit id="1a2ad03c80c14a3c16014aedd8e247faf5bc99d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module's &lt;code&gt;REPL_MODE_MAGIC&lt;/code&gt; constant, used for &lt;code&gt;replMode&lt;/code&gt; option, has been removed. Its behavior has been functionally identical to that of &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; since Node.js 6.0.0, when V8 5.0 was imported. Please use &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; instead.</source>
          <target state="translated">用于 &lt;code&gt;replMode&lt;/code&gt; 选项的 &lt;code&gt;repl&lt;/code&gt; 模块的 &lt;code&gt;REPL_MODE_MAGIC&lt;/code&gt; 常数已被删除。自从导入V8 5.0以来的Node.js 6.0.0起，其行为在功能上与 &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; 相同。请改用 &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7623117240409b0ce2003070bd63b8fe2d453bbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.clearBufferedCommand()&lt;/code&gt; method clears any command that has been buffered but not yet executed. This method is primarily intended to be called from within the action function for commands registered using the &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;replServer.clearBufferedCommand()&lt;/code&gt; 方法清除已被缓冲但尚未执行的任何命令。此方法主要用于从操作函数中为使用 &lt;code&gt;replServer.defineCommand()&lt;/code&gt; 方法注册的命令调用。</target>
        </trans-unit>
        <trans-unit id="8f32cec1ea1335c2f16445f6aac3c850821e3c78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method is used to add new &lt;code&gt;.&lt;/code&gt;-prefixed commands to the REPL instance. Such commands are invoked by typing a &lt;code&gt;.&lt;/code&gt; followed by the &lt;code&gt;keyword&lt;/code&gt;. The &lt;code&gt;cmd&lt;/code&gt; is either a &lt;code&gt;Function&lt;/code&gt; or an &lt;code&gt;Object&lt;/code&gt; with the following properties:</source>
          <target state="translated">所述 &lt;code&gt;replServer.defineCommand()&lt;/code&gt; 方法用来添加新的 &lt;code&gt;.&lt;/code&gt; -REPL实例的前缀命令。这些命令通过键入来调用 &lt;code&gt;.&lt;/code&gt; 其次是 &lt;code&gt;keyword&lt;/code&gt; 。的 &lt;code&gt;cmd&lt;/code&gt; 可以是一个 &lt;code&gt;Function&lt;/code&gt; 或一个 &lt;code&gt;Object&lt;/code&gt; 具有以下属性：</target>
        </trans-unit>
        <trans-unit id="77d9fdd8690bcc5161c48aab54bfce43107e70ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.displayPrompt()&lt;/code&gt; method readies the REPL instance for input from the user, printing the configured &lt;code&gt;prompt&lt;/code&gt; to a new line in the &lt;code&gt;output&lt;/code&gt; and resuming the &lt;code&gt;input&lt;/code&gt; to accept new input.</source>
          <target state="translated">所述 &lt;code&gt;replServer.displayPrompt()&lt;/code&gt; 方法从用户准备迎接的REPL实例进行输入，打印配置 &lt;code&gt;prompt&lt;/code&gt; 在一个新行 &lt;code&gt;output&lt;/code&gt; 和恢复的 &lt;code&gt;input&lt;/code&gt; 来接受新的输入。</target>
        </trans-unit>
        <trans-unit id="8ae31ac41f2a61484f03761b32d79b09d1466453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.displayPrompt&lt;/code&gt; method is primarily intended to be called from within the action function for commands registered using the &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method.</source>
          <target state="translated">该 &lt;code&gt;replServer.displayPrompt&lt;/code&gt; 方法主要意在从动作功能中调用用于命令使用注册 &lt;code&gt;replServer.defineCommand()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="9023f3594f56fc3e26b7898032e35aeb28ef142f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request.aborted&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if the request has been aborted.</source>
          <target state="translated">该 &lt;code&gt;request.aborted&lt;/code&gt; 属性将是 &lt;code&gt;true&lt;/code&gt; ，如果该请求已经中止。</target>
        </trans-unit>
        <trans-unit id="b59052072d1351f3c90fcf75636c42d307d6014a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request.finished&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt; has been called. &lt;code&gt;request.end()&lt;/code&gt; will automatically be called if the request was initiated via &lt;a href=&quot;#http_http_get_options_callback&quot;&gt;&lt;code&gt;http.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;request.finished&lt;/code&gt; 属性将是 &lt;code&gt;true&lt;/code&gt; ，如果&lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; &lt;/a&gt;被调用。如果请求是通过&lt;a href=&quot;#http_http_get_options_callback&quot;&gt; &lt;code&gt;http.get()&lt;/code&gt; &lt;/a&gt;启动的，则 &lt;code&gt;request.end()&lt;/code&gt; 将自动被调用。</target>
        </trans-unit>
        <trans-unit id="e3099fd656b83e7763a54f364082aa1b15553996" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;requestListener&lt;/code&gt; is a function which is automatically added to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">所述 &lt;code&gt;requestListener&lt;/code&gt; 是被自动添加到一个函数&lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;的事件。</target>
        </trans-unit>
        <trans-unit id="d168aa9bbd7ab8c6e86509d8b2cf46cf229b468d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require()&lt;/code&gt; in the above case shares the state with the context it is passed from. This may introduce risks when untrusted code is executed, e.g. altering objects in the context in unwanted ways.</source>
          <target state="translated">在上述情况下， &lt;code&gt;require()&lt;/code&gt; 与它所传递的上下文共享状态。当执行不受信任的代码时，这可能会带来风险，例如，以不需要的方式更改上下文中的对象。</target>
        </trans-unit>
        <trans-unit id="d31c7e3af9a3b7c6102a0abc6c34e55dcd58c775" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;response.finished&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">该 &lt;code&gt;response.finished&lt;/code&gt; 属性将是 &lt;code&gt;true&lt;/code&gt; ，如果&lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;被调用。</target>
        </trans-unit>
        <trans-unit id="751ee92ece3e1bd8851491d0e6d3476f732d18c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resume()&lt;/code&gt; has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listening.</source>
          <target state="translated">该 &lt;code&gt;resume()&lt;/code&gt; 没有任何影响，如果有一个 &lt;code&gt;'readable'&lt;/code&gt; 事件监听。</target>
        </trans-unit>
        <trans-unit id="4a799f1ab032fc1a6cef82fa1afa0ac7e9f6b4a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.close()&lt;/code&gt; method closes the &lt;code&gt;readline.Interface&lt;/code&gt; instance and relinquishes control over the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; streams. When called, the &lt;code&gt;'close'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">所述 &lt;code&gt;rl.close()&lt;/code&gt; 方法关闭 &lt;code&gt;readline.Interface&lt;/code&gt; 实例并放弃控制在 &lt;code&gt;input&lt;/code&gt; 和 &lt;code&gt;output&lt;/code&gt; 流。调用时，将发出 &lt;code&gt;'close'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="e7d58ebe0c855404a134dd7d4758bbda83411900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.close()&lt;/code&gt; method is called and the &lt;code&gt;readline.Interface&lt;/code&gt; instance has relinquished control over the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; streams;</source>
          <target state="translated">所述 &lt;code&gt;rl.close()&lt;/code&gt; 方法被调用和 &lt;code&gt;readline.Interface&lt;/code&gt; 实例已放弃在控制 &lt;code&gt;input&lt;/code&gt; 和 &lt;code&gt;output&lt;/code&gt; 数据流;</target>
        </trans-unit>
        <trans-unit id="656cec055c1e88ac7b7963397456f2fd3d5ac25f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.pause()&lt;/code&gt; method pauses the &lt;code&gt;input&lt;/code&gt; stream, allowing it to be resumed later if necessary.</source>
          <target state="translated">所述 &lt;code&gt;rl.pause()&lt;/code&gt; 方法暂停 &lt;code&gt;input&lt;/code&gt; 流，允许其以后如果需要的话恢复。</target>
        </trans-unit>
        <trans-unit id="231ef0fff60ee1f800adb18b7cdccf12c25eeea1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.prompt()&lt;/code&gt; method writes the &lt;code&gt;readline.Interface&lt;/code&gt; instances configured &lt;code&gt;prompt&lt;/code&gt; to a new line in &lt;code&gt;output&lt;/code&gt; in order to provide a user with a new location at which to provide input.</source>
          <target state="translated">所述 &lt;code&gt;rl.prompt()&lt;/code&gt; 方法写入 &lt;code&gt;readline.Interface&lt;/code&gt; 配置的实例 &lt;code&gt;prompt&lt;/code&gt; 给在一个新行 &lt;code&gt;output&lt;/code&gt; ，以向用户提供一个新的位置处，以提供输入。</target>
        </trans-unit>
        <trans-unit id="f854a6ae33efe012164ab999bb636997ed8412a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.question()&lt;/code&gt; method displays the &lt;code&gt;query&lt;/code&gt; by writing it to the &lt;code&gt;output&lt;/code&gt;, waits for user input to be provided on &lt;code&gt;input&lt;/code&gt;, then invokes the &lt;code&gt;callback&lt;/code&gt; function passing the provided input as the first argument.</source>
          <target state="translated">所述 &lt;code&gt;rl.question()&lt;/code&gt; 的方法的显示器 &lt;code&gt;query&lt;/code&gt; 通过将其写入到 &lt;code&gt;output&lt;/code&gt; ，就可以提供用于用户输入等待 &lt;code&gt;input&lt;/code&gt; ，然后调用 &lt;code&gt;callback&lt;/code&gt; 通过所提供的输入作为第一个参数函数。</target>
        </trans-unit>
        <trans-unit id="cd58e2912673539288897b48fb7e4e51af8d97da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.resume()&lt;/code&gt; method resumes the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">所述 &lt;code&gt;rl.resume()&lt;/code&gt; 方法恢复 &lt;code&gt;input&lt;/code&gt; ，如果它已暂停流。</target>
        </trans-unit>
        <trans-unit id="d7e0ca70a4694f620324f931a7c614e9530d97e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.setPrompt()&lt;/code&gt; method sets the prompt that will be written to &lt;code&gt;output&lt;/code&gt; whenever &lt;code&gt;rl.prompt()&lt;/code&gt; is called.</source>
          <target state="translated">所述 &lt;code&gt;rl.setPrompt()&lt;/code&gt; 方法设置将被写入到提示 &lt;code&gt;output&lt;/code&gt; 每当 &lt;code&gt;rl.prompt()&lt;/code&gt; 被调用。</target>
        </trans-unit>
        <trans-unit id="f6c1a88a49e8590ead87e513bf92a8f632c1befb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.write()&lt;/code&gt; method will write either &lt;code&gt;data&lt;/code&gt; or a key sequence identified by &lt;code&gt;key&lt;/code&gt; to the &lt;code&gt;output&lt;/code&gt;. The &lt;code&gt;key&lt;/code&gt; argument is supported only if &lt;code&gt;output&lt;/code&gt; is a &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; text terminal.</source>
          <target state="translated">所述 &lt;code&gt;rl.write()&lt;/code&gt; 方法将写入任一 &lt;code&gt;data&lt;/code&gt; 通过识别或键序列 &lt;code&gt;key&lt;/code&gt; 的 &lt;code&gt;output&lt;/code&gt; 。的 &lt;code&gt;key&lt;/code&gt; 参数，才支持 &lt;code&gt;output&lt;/code&gt; 是一个&lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;文本终端。</target>
        </trans-unit>
        <trans-unit id="41196dd89a1deba404d8e0e8e0fdd66883bb26af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.write()&lt;/code&gt; method will write the data to the &lt;code&gt;readline&lt;/code&gt;&lt;code&gt;Interface&lt;/code&gt;'s &lt;code&gt;input&lt;/code&gt;&lt;em&gt;as if it were provided by the user&lt;/em&gt;.</source>
          <target state="translated">所述 &lt;code&gt;rl.write()&lt;/code&gt; 方法将数据写入所述 &lt;code&gt;readline&lt;/code&gt; &lt;code&gt;Interface&lt;/code&gt; 的 &lt;code&gt;input&lt;/code&gt; &lt;em&gt;，就好像它是由用户提供的&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9c337047522d177bda79f124489b56c36c33708b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;salt&lt;/code&gt; should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf&quot;&gt;NIST SP 800-132&lt;/a&gt; for details.</source>
          <target state="translated">该 &lt;code&gt;salt&lt;/code&gt; 应尽可能独特。建议盐是随机的并且至少16个字节长。有关详细信息，请参见&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf&quot;&gt;NIST SP 800-132&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa589028c96e71c62e9b586d1f0c2ca62d142cdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; object can no longer be a function.</source>
          <target state="translated">该 &lt;code&gt;sandbox&lt;/code&gt; 对象不再是一个函数。</target>
        </trans-unit>
        <trans-unit id="d10ba4e8a0c1d8c98f308b168ec8ec270bca7c1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search&lt;/code&gt; property consists of the entire &quot;query string&quot; portion of the URL, including the leading ASCII question mark (&lt;code&gt;?&lt;/code&gt;) character.</source>
          <target state="translated">该 &lt;code&gt;search&lt;/code&gt; 属性包含的URL的整个&amp;ldquo;查询字符串&amp;rdquo;部分，包括领先的ASCII问号（的 &lt;code&gt;?&lt;/code&gt; ）字符。</target>
        </trans-unit>
        <trans-unit id="40b486985304f73099b4f78d5aefc122c98b347a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search&lt;/code&gt; property on the returned URL object is now &lt;code&gt;null&lt;/code&gt; when no query string is present.</source>
          <target state="translated">该 &lt;code&gt;search&lt;/code&gt; 返回的URL对象的属性现在是 &lt;code&gt;null&lt;/code&gt; 当没有查询字符串是存在的。</target>
        </trans-unit>
        <trans-unit id="8cb34b8f1b3871d967141e43f1347b28b5e1825d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;section&lt;/code&gt; supports wildcard also:</source>
          <target state="translated">本 &lt;code&gt;section&lt;/code&gt; 还支持通配符：</target>
        </trans-unit>
        <trans-unit id="b06a6d57aafd3cfb2973ecfafdf82702f3df1908" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;secureContext&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;secureContext&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="d7d56b9261eb176b23d8762ecf8514431701b001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sendHandle&lt;/code&gt; argument can be used, for instance, to pass the handle of a TCP server object to the child process as illustrated in the example below:</source>
          <target state="translated">所述 &lt;code&gt;sendHandle&lt;/code&gt; 参数可以用来，例如，通过TCP服务器对象子进程的手柄，如下面的例子所示：</target>
        </trans-unit>
        <trans-unit id="f5657ee72d6362cb4513b8953d78d812b4bca85c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.addContext()&lt;/code&gt; method adds a secure context that will be used if the client request's SNI name matches the supplied &lt;code&gt;hostname&lt;/code&gt; (or wildcard).</source>
          <target state="translated">所述 &lt;code&gt;server.addContext()&lt;/code&gt; 方法增加了如果客户端请求的SNI名称所提供的匹配将要使用安全上下文 &lt;code&gt;hostname&lt;/code&gt; （或通配符）。</target>
        </trans-unit>
        <trans-unit id="7baac3bdf0594cf99c87594fd0400053a3626b59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.close()&lt;/code&gt; method stops the server from accepting new connections.</source>
          <target state="translated">所述 &lt;code&gt;server.close()&lt;/code&gt; 方法从接受新连接停止服务器。</target>
        </trans-unit>
        <trans-unit id="00e9fa32d099affec4d987cebd08a43b32bbda61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.listen()&lt;/code&gt; method can be called again if and only if there was an error during the first &lt;code&gt;server.listen()&lt;/code&gt; call or &lt;code&gt;server.close()&lt;/code&gt; has been called. Otherwise, an &lt;code&gt;ERR_SERVER_ALREADY_LISTEN&lt;/code&gt; error will be thrown.</source>
          <target state="translated">该 &lt;code&gt;server.listen()&lt;/code&gt; 方法可以再次当且仅当第一时发生了错误被称为 &lt;code&gt;server.listen()&lt;/code&gt; 调用或 &lt;code&gt;server.close()&lt;/code&gt; 被调用。否则，将引发 &lt;code&gt;ERR_SERVER_ALREADY_LISTEN&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="0de5d1141e84be1cc2fe33a3c4dc10fab6bffb22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.setSecureContext()&lt;/code&gt; method replaces the secure context of an existing server. Existing connections to the server are not interrupted.</source>
          <target state="translated">所述 &lt;code&gt;server.setSecureContext()&lt;/code&gt; 方法替换现有的服务器的安全上下文。与服务器的现有连接不会中断。</target>
        </trans-unit>
        <trans-unit id="4f3fbe161e0f031b5a8998231ac65e19553efbb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;settings&lt;/code&gt; object is the &lt;code&gt;cluster.settings&lt;/code&gt; object at the time &lt;code&gt;.setupMaster()&lt;/code&gt; was called and is advisory only, since multiple calls to &lt;code&gt;.setupMaster()&lt;/code&gt; can be made in a single tick.</source>
          <target state="translated">的 &lt;code&gt;settings&lt;/code&gt; 对象是 &lt;code&gt;cluster.settings&lt;/code&gt; 当时对象 &lt;code&gt;.setupMaster()&lt;/code&gt; 被调用，并且仅是建议性的，因为多次调用 &lt;code&gt;.setupMaster()&lt;/code&gt; 可以在单个蜱制成。</target>
        </trans-unit>
        <trans-unit id="ca40305874430184f507d1ff1620b98dee2a13a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell&lt;/code&gt; option available in &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; is not supported by &lt;code&gt;child_process.fork()&lt;/code&gt; and will be ignored if set.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;不支持 &lt;code&gt;child_process.fork()&lt;/code&gt; 可用的 &lt;code&gt;shell&lt;/code&gt; 选项，如果设置，它将被忽略。</target>
        </trans-unit>
        <trans-unit id="789309d654799197d595dae31587b32fcbc40e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;shell&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="131086e035ed08bcd6abed9542fab8e2099a0739" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showHidden&lt;/code&gt; option allows &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt;&lt;code&gt;WeakSet&lt;/code&gt;&lt;/a&gt; entries to be inspected. If there are more entries than &lt;code&gt;maxArrayLength&lt;/code&gt;, there is no guarantee which entries are displayed. That means retrieving the same &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt;&lt;code&gt;WeakSet&lt;/code&gt;&lt;/a&gt; entries twice may result in different output. Furthermore, entries with no remaining strong references may be garbage collected at any time.</source>
          <target state="translated">该 &lt;code&gt;showHidden&lt;/code&gt; 选项允许&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt; &lt;code&gt;WeakSet&lt;/code&gt; &lt;/a&gt;条目进行检查。如果条目多于 &lt;code&gt;maxArrayLength&lt;/code&gt; ，则不能保证显示哪些条目。这意味着两次检索相同的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt; &lt;code&gt;WeakSet&lt;/code&gt; &lt;/a&gt;条目可能会导致不同的输出。此外，没有剩余强引用的条目可以随时被垃圾收集。</target>
        </trans-unit>
        <trans-unit id="aeeffd142a8b58ab3fd25d52eb6a1a38c53837e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showProxy&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;showProxy&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="02fe55ea31407e76877facbc15d9a22a0783d097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; argument is the previously calculated signature for the &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;signature&lt;/code&gt; 的说法是对先前计算的签名 &lt;code&gt;data&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ec046491bd12670eae5fc18363137ed9fe01460" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; argument is the previously calculated signature for the data, in the &lt;code&gt;signatureEncoding&lt;/code&gt;. If a &lt;code&gt;signatureEncoding&lt;/code&gt; is specified, the &lt;code&gt;signature&lt;/code&gt; is expected to be a string; otherwise &lt;code&gt;signature&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;signature&lt;/code&gt; 参数是数据之前计算的签名，在 &lt;code&gt;signatureEncoding&lt;/code&gt; 。如果 &lt;code&gt;signatureEncoding&lt;/code&gt; 指定，则 &lt;code&gt;signature&lt;/code&gt; 预计将是一个字符串;否则， &lt;code&gt;signature&lt;/code&gt; 应该是&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;， &lt;code&gt;TypedArray&lt;/code&gt; 或 &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68695d428776a7c74fee782fa95bbce0abf2687f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; argument is advisory. For implementations where a &quot;read&quot; is a single operation that returns data can use the &lt;code&gt;size&lt;/code&gt; argument to determine how much data to fetch. Other implementations may ignore this argument and simply provide data whenever it becomes available. There is no need to &quot;wait&quot; until &lt;code&gt;size&lt;/code&gt; bytes are available before calling &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">该 &lt;code&gt;size&lt;/code&gt; 参数是咨询。对于&amp;ldquo;读取&amp;rdquo;是返回数据的单个操作的实现，可以使用 &lt;code&gt;size&lt;/code&gt; 参数确定要提取多少数据。其他实现可能会忽略此参数，并仅在可用时提供数据。在调用&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push(chunk)&lt;/code&gt; &lt;/a&gt;之前，无需&amp;ldquo;等待&amp;rdquo; &lt;code&gt;size&lt;/code&gt; 字节可用。</target>
        </trans-unit>
        <trans-unit id="b98eea67c5cf6a231230babe352bdbf93c4d8c03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slashes&lt;/code&gt; property is a &lt;code&gt;boolean&lt;/code&gt; with a value of &lt;code&gt;true&lt;/code&gt; if two ASCII forward-slash characters (&lt;code&gt;/&lt;/code&gt;) are required following the colon in the &lt;code&gt;protocol&lt;/code&gt;.</source>
          <target state="translated">的 &lt;code&gt;slashes&lt;/code&gt; 属性是 &lt;code&gt;boolean&lt;/code&gt; ，值为 &lt;code&gt;true&lt;/code&gt; 如果两个ASCII正斜杠字符（ &lt;code&gt;/&lt;/code&gt; ）都必须在结肠以下 &lt;code&gt;protocol&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cde32729934909632dd7d9f932044a842cfeda60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socket.ref()&lt;/code&gt; method returns a reference to the socket so calls can be chained.</source>
          <target state="translated">所述 &lt;code&gt;socket.ref()&lt;/code&gt; 方法返回到插座的引用，以便呼叫可被链接。</target>
        </trans-unit>
        <trans-unit id="0e152e8a099033c1331c3bdd0de17b53ae3059c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socket.unref()&lt;/code&gt; method returns a reference to the socket so calls can be chained.</source>
          <target state="translated">所述 &lt;code&gt;socket.unref()&lt;/code&gt; 方法返回到插座的引用，以便呼叫可被链接。</target>
        </trans-unit>
        <trans-unit id="f29bc2fa372e5d9603c756477069df5000ce63d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sorted&lt;/code&gt; option ensures that an object's property insertion order does not impact the result of &lt;code&gt;util.inspect()&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;sorted&lt;/code&gt; 选项可以确保对象的属性插入顺序不影响结果 &lt;code&gt;util.inspect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ac7cb97a611c457d3799d39f5df6768a67cb545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sorted&lt;/code&gt; option is supported now.</source>
          <target state="translated">在 &lt;code&gt;sorted&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="0c7015e16b23c8277a7108a06694c98bf45cc13b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;source&lt;/code&gt; 参数可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5d97670c9965eb774646bb1cacca1be0ca0fad8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;square&lt;/code&gt; module is defined in &lt;code&gt;square.js&lt;/code&gt;:</source>
          <target state="translated">的 &lt;code&gt;square&lt;/code&gt; 模块中定义 &lt;code&gt;square.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5ef2d45d0dcdb5acc0bbf694fece9d91abd0220c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;startMark&lt;/code&gt; argument may identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline, or &lt;em&gt;may&lt;/em&gt; identify any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. If the named &lt;code&gt;startMark&lt;/code&gt; does not exist, then &lt;code&gt;startMark&lt;/code&gt; is set to &lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt;&lt;code&gt;timeOrigin&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">所述 &lt;code&gt;startMark&lt;/code&gt; 参数可以识别任何&lt;em&gt;现有&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; 在Performance时间轴中，或&lt;em&gt;可以&lt;/em&gt;识别任何通过所提供的时间戳属性 &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; 类。如果命名的 &lt;code&gt;startMark&lt;/code&gt; 不存在，则默认情况下， &lt;code&gt;startMark&lt;/code&gt; 设置为&lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt; &lt;code&gt;timeOrigin&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dcf43343004244fdc72aeb9f8e96c8f8036d6b2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdio&lt;/code&gt; option can now be a string.</source>
          <target state="translated">现在， &lt;code&gt;stdio&lt;/code&gt; 选项可以是字符串。</target>
        </trans-unit>
        <trans-unit id="c1e6b684183674552223009944114d387d473b05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdio&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;stdio&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="26ad0d1530bfcc93190d959f0cb08e32179fc25a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The &lt;code&gt;encoding&lt;/code&gt; option can be used to specify the character encoding used to decode the stdout and stderr output. If &lt;code&gt;encoding&lt;/code&gt; is &lt;code&gt;'buffer'&lt;/code&gt;, or an unrecognized character encoding, &lt;code&gt;Buffer&lt;/code&gt; objects will be passed to the callback instead.</source>
          <target state="translated">传递给回调的 &lt;code&gt;stdout&lt;/code&gt; 和 &lt;code&gt;stderr&lt;/code&gt; 参数将包含子进程的stdout和stderr输出。默认情况下，Node.js将输出解码为UTF-8并将字符串传递给回调。的 &lt;code&gt;encoding&lt;/code&gt; 选项可用于指定用于将stdout和stderr输出解码的字符编码。如果 &lt;code&gt;encoding&lt;/code&gt; 为 &lt;code&gt;'buffer'&lt;/code&gt; 或无法识别的字符编码，则将 &lt;code&gt;Buffer&lt;/code&gt; 对象传递给回调。</target>
        </trans-unit>
        <trans-unit id="084bb7b91e83379175c5022e9cf46939ee8a02bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Duplex&lt;/code&gt; class prototypically inherits from &lt;code&gt;stream.Readable&lt;/code&gt; and parasitically from &lt;code&gt;stream.Writable&lt;/code&gt;, but &lt;code&gt;instanceof&lt;/code&gt; will work properly for both base classes due to overriding &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance&quot;&gt;&lt;code&gt;Symbol.hasInstance&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;stream.Writable&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;stream.Duplex&lt;/code&gt; 类prototypically继承自 &lt;code&gt;stream.Readable&lt;/code&gt; 和寄生从 &lt;code&gt;stream.Writable&lt;/code&gt; ，但 &lt;code&gt;instanceof&lt;/code&gt; 将正常工作两个基类由于重载&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance&quot;&gt; &lt;code&gt;Symbol.hasInstance&lt;/code&gt; &lt;/a&gt;上 &lt;code&gt;stream.Writable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd0c7035d5887c79e724c63625e2a2fa4f4e00ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.PassThrough&lt;/code&gt; class is a trivial implementation of a &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; stream that simply passes the input bytes across to the output. Its purpose is primarily for examples and testing, but there are some use cases where &lt;code&gt;stream.PassThrough&lt;/code&gt; is useful as a building block for novel sorts of streams.</source>
          <target state="translated">所述 &lt;code&gt;stream.PassThrough&lt;/code&gt; 类是一个简单的实现一个的&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;对面的输出简单地将输入流的字节。它的目的主要是用于示例和测试，但在某些用例中， &lt;code&gt;stream.PassThrough&lt;/code&gt; 可用作新型流的构建块。</target>
        </trans-unit>
        <trans-unit id="ae66ead56bbe01b337d36c610bb9e26b4cd98960" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Readable&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">该 &lt;code&gt;stream.Readable&lt;/code&gt; 类扩展到实现&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="0ea09bbb39789ea3cc0eaf44ddee45dcc419148d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Transform&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">该 &lt;code&gt;stream.Transform&lt;/code&gt; 类扩展来实现&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="c3c1c3a30f04ae9a0da36c430d696738f058704c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Transform&lt;/code&gt; class prototypically inherits from &lt;code&gt;stream.Duplex&lt;/code&gt; and implements its own versions of the &lt;code&gt;writable._write()&lt;/code&gt; and &lt;code&gt;readable._read()&lt;/code&gt; methods. Custom &lt;code&gt;Transform&lt;/code&gt; implementations &lt;em&gt;must&lt;/em&gt; implement the &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt;&lt;code&gt;transform._transform()&lt;/code&gt;&lt;/a&gt; method and &lt;em&gt;may&lt;/em&gt; also implement the &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt;&lt;code&gt;transform._flush()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">该 &lt;code&gt;stream.Transform&lt;/code&gt; 类prototypically继承自 &lt;code&gt;stream.Duplex&lt;/code&gt; 并实现了自己的版本 &lt;code&gt;writable._write()&lt;/code&gt; 和 &lt;code&gt;readable._read()&lt;/code&gt; 方法。自定义 &lt;code&gt;Transform&lt;/code&gt; 实现&lt;em&gt;必须&lt;/em&gt;实现&lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt; &lt;code&gt;transform._transform()&lt;/code&gt; &lt;/a&gt;方法，&lt;em&gt;并且&lt;/em&gt;还&lt;em&gt;可能&lt;/em&gt;实现&lt;a href=&quot;#stream_transform_flush_callback&quot;&gt; &lt;code&gt;transform._flush()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="c260d8fd0dab360e2d5844ae6a472872447a2f9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Writable&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">该 &lt;code&gt;stream.Writable&lt;/code&gt; 类扩展到实现&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="8af51137bee18dc37e015969a47dd4a588a34b6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; method cannot be called after the &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; event has been emitted or a runtime error will be thrown.</source>
          <target state="translated">所述 &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; 的后方法不能被称为&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;事件已经发射或运行时错误将被抛出。</target>
        </trans-unit>
        <trans-unit id="691f4859d654b4c9ab45f33157afe7c5bac57435" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; module API has been designed to make it possible to easily implement streams using JavaScript's prototypal inheritance model.</source>
          <target state="translated">该 &lt;code&gt;stream&lt;/code&gt; 模块API的设计，使其能够容易地实现使用JavaScript的原型继承模型流。</target>
        </trans-unit>
        <trans-unit id="bc56a2c1de4b9e87e59ac1c30d9a0c0a5259ebda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; module is useful for creating new types of stream instances. It is usually not necessary to use the &lt;code&gt;stream&lt;/code&gt; module to consume streams.</source>
          <target state="translated">该 &lt;code&gt;stream&lt;/code&gt; 模块是用于创建新类型的流实例的有用。通常不需要使用 &lt;code&gt;stream&lt;/code&gt; 模块来消耗流。</target>
        </trans-unit>
        <trans-unit id="357321edbc1568fd30c17cfc80ff0748b6db2542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt;, &lt;code&gt;DataView&lt;/code&gt; or &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;string&lt;/code&gt; 参数可以是任何 &lt;code&gt;TypedArray&lt;/code&gt; ， &lt;code&gt;DataView&lt;/code&gt; 或 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a45d51c7cabfc0ab2ba5e3dff6526f12a49bf66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string_decoder&lt;/code&gt; module provides an API for decoding &lt;code&gt;Buffer&lt;/code&gt; objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using:</source>
          <target state="translated">所述 &lt;code&gt;string_decoder&lt;/code&gt; 模块提供用于解码的API &lt;code&gt;Buffer&lt;/code&gt; 对象到字符串的方式，蜜饯编码的多字节UTF-8和UTF-16字符。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="c5126690fac33fb4d5387e26eb565d04e69d7adb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.channel&lt;/code&gt; property is a reference to the child's IPC channel. If no IPC channel currently exists, this property is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;subprocess.channel&lt;/code&gt; 属性是对孩子的IPC通道的参考。如果当前不存在IPC通道，则此属性为 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="630496965672d7d17bca3ce951936e1a7f96b9fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.connected&lt;/code&gt; property indicates whether it is still possible to send and receive messages from a child process. When &lt;code&gt;subprocess.connected&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it is no longer possible to send or receive messages.</source>
          <target state="translated">该 &lt;code&gt;subprocess.connected&lt;/code&gt; 属性指示是否仍然可以从一个子进程发送和接收消息。如果 &lt;code&gt;subprocess.connected&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ，则不再可能发送或接收消息。</target>
        </trans-unit>
        <trans-unit id="85f59425a9992636760b8d033dc4606abef401d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.js&lt;/code&gt; would receive the socket handle as the second argument passed to the event callback function:</source>
          <target state="translated">该 &lt;code&gt;subprocess.js&lt;/code&gt; 将接受套接字句柄作为第二个参数传递给事件回调函数：</target>
        </trans-unit>
        <trans-unit id="f43b8450ff014c705fd9bc6ad073773c1c9f1baf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.kill()&lt;/code&gt; method sends a signal to the child process. If no argument is given, the process will be sent the &lt;code&gt;'SIGTERM'&lt;/code&gt; signal. See &lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt;&lt;code&gt;signal(7)&lt;/code&gt;&lt;/a&gt; for a list of available signals.</source>
          <target state="translated">所述 &lt;code&gt;subprocess.kill()&lt;/code&gt; 方法将信号发送到子进程。如果未提供任何参数，则将向过程发送 &lt;code&gt;'SIGTERM'&lt;/code&gt; 信号。有关可用信号的列表，请参见&lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt; &lt;code&gt;signal(7)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="00e0cd67de99d7123ac0bb29d2796973028616a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.killed&lt;/code&gt; property indicates whether the child process successfully received a signal from &lt;code&gt;subprocess.kill()&lt;/code&gt;. The &lt;code&gt;killed&lt;/code&gt; property does not indicate that the child process has been terminated.</source>
          <target state="translated">所述 &lt;code&gt;subprocess.killed&lt;/code&gt; 属性指示子进程是否成功地接收到来自信号 &lt;code&gt;subprocess.kill()&lt;/code&gt; 。被 &lt;code&gt;killed&lt;/code&gt; 属性并不表示子进程已终止。</target>
        </trans-unit>
        <trans-unit id="5e369294cd449eb3ac8bc8f7b44bdac1cbfcf71b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sys&lt;/code&gt; module is deprecated. Please use the &lt;a href=&quot;util&quot;&gt;&lt;code&gt;util&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">该 &lt;code&gt;sys&lt;/code&gt; 模块已被弃用。请改用&lt;a href=&quot;util&quot;&gt; &lt;code&gt;util&lt;/code&gt; &lt;/a&gt;模块。</target>
        </trans-unit>
        <trans-unit id="905f8dec56ddaba13188a29c248c1808e84bc5bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">的 &lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;path&lt;/code&gt; 参数可以是WHATWG &lt;code&gt;URL&lt;/code&gt; 使用对象 &lt;code&gt;file:&lt;/code&gt; 协议。支持目前仍在&lt;em&gt;试验中&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="21d47e71ab93ab29a6486089ea585020c6b859dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">现在， &lt;code&gt;target&lt;/code&gt; 参数可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c294ea3b5974cb0ba7306f25aabde6ec0f217395" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;terminal&lt;/code&gt; option now follows the default description in all cases and &lt;code&gt;useColors&lt;/code&gt; checks &lt;code&gt;hasColors()&lt;/code&gt; if available.</source>
          <target state="translated">该 &lt;code&gt;terminal&lt;/code&gt; 选项现在遵循在所有情况下，默认的描述 &lt;code&gt;useColors&lt;/code&gt; 检查 &lt;code&gt;hasColors()&lt;/code&gt; （如果可用）。</target>
        </trans-unit>
        <trans-unit id="e53093313524ff1c7d2c347705f27f9f9f795a5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ticketKeys&lt;/code&gt; options is automatically shared between &lt;code&gt;cluster&lt;/code&gt; module workers.</source>
          <target state="translated">所述 &lt;code&gt;ticketKeys&lt;/code&gt; 选项被自动之间共享 &lt;code&gt;cluster&lt;/code&gt; 模块工人。</target>
        </trans-unit>
        <trans-unit id="3f81955b3836a057f5c7a7aaa5ed0a6ca9bc0d2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeout&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;timeout&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="17ce97197b4e737e60d8c154549d0fd35ce67577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timer&lt;/code&gt; module exposes a global API for scheduling functions to be called at some future period of time. Because the timer functions are globals, there is no need to call &lt;code&gt;require('timers')&lt;/code&gt; to use the API.</source>
          <target state="translated">该 &lt;code&gt;timer&lt;/code&gt; 模块为暴露调度功能在未来的某个时间段被称为一个全球性的API。由于计时器函数是全局函数，因此无需调用 &lt;code&gt;require('timers')&lt;/code&gt; 即可使用API​​。</target>
        </trans-unit>
        <trans-unit id="cf7b4966e78b3bf9c81ea7b37f0cbce3a2e65f24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.CryptoStream&lt;/code&gt; class represents a stream of encrypted data. This class is deprecated and should no longer be used.</source>
          <target state="translated">所述 &lt;code&gt;tls.CryptoStream&lt;/code&gt; 类代表加密数据流。此类已弃用，不应再使用。</target>
        </trans-unit>
        <trans-unit id="4924f51a594e62a3e48926493b0830358f972820" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.Server&lt;/code&gt; class is a subclass of &lt;code&gt;net.Server&lt;/code&gt; that accepts encrypted connections using TLS or SSL.</source>
          <target state="translated">所述 &lt;code&gt;tls.Server&lt;/code&gt; 类是的一个子类 &lt;code&gt;net.Server&lt;/code&gt; 接受使用TLS或SSL加密的连接。</target>
        </trans-unit>
        <trans-unit id="3759526aec41e16a038394bb7b88557096ed9d0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.TLSSocket&lt;/code&gt; is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that performs transparent encryption of written data and all required TLS negotiation.</source>
          <target state="translated">所述 &lt;code&gt;tls.TLSSocket&lt;/code&gt; 是的一个子类&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;执行写入的数据的透明加密和所有必需的TLS协商。</target>
        </trans-unit>
        <trans-unit id="a53fcb9eccbc70ba28e31c4dc6d95605701391e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecureContext()&lt;/code&gt; method creates a &lt;code&gt;SecureContext&lt;/code&gt; object. It is usable as an argument to several &lt;code&gt;tls&lt;/code&gt; APIs, such as &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tls_server_addcontext_hostname_context&quot;&gt;&lt;code&gt;server.addContext()&lt;/code&gt;&lt;/a&gt;, but has no public methods.</source>
          <target state="translated">所述 &lt;code&gt;tls.createSecureContext()&lt;/code&gt; 方法创建一个 &lt;code&gt;SecureContext&lt;/code&gt; 对象。它可用作多个 &lt;code&gt;tls&lt;/code&gt; API 的参数，例如&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#tls_server_addcontext_hostname_context&quot;&gt; &lt;code&gt;server.addContext()&lt;/code&gt; &lt;/a&gt;，但没有公共方法。</target>
        </trans-unit>
        <trans-unit id="ff58d2e25dc0b6be6c3c7b6f5498a0e15391844f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecurePair()&lt;/code&gt; API was deprecated in documentation in Node.js 0.11.3. Users should use &lt;code&gt;tls.Socket&lt;/code&gt; instead.</source>
          <target state="translated">该 &lt;code&gt;tls.createSecurePair()&lt;/code&gt; API已被废弃在文档中的Node.js 0.11.3。用户应改用 &lt;code&gt;tls.Socket&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56f1c8824e6bac97724ac9136c4d20ffd2f71ff6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecurePair()&lt;/code&gt; method is now deprecated in favor of &lt;code&gt;tls.TLSSocket()&lt;/code&gt;. For example, the code:</source>
          <target state="translated">该 &lt;code&gt;tls.createSecurePair()&lt;/code&gt; 方法现在已经过时，有利于 &lt;code&gt;tls.TLSSocket()&lt;/code&gt; 。例如，代码：</target>
        </trans-unit>
        <trans-unit id="3bfd9e2e5bf7e913bcaa90224b9ac1d690880f7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls&lt;/code&gt; module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using:</source>
          <target state="translated">该 &lt;code&gt;tls&lt;/code&gt; 模块提供传输层安全（TLS）和安全套接字层（SSL）协议是建立在OpenSSL的顶部的实现。可以使用以下命令访问该模块：</target>
        </trans-unit>
        <trans-unit id="27a8b91851aa82c6e1d1daa2ba743d969facb149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; property is a string that contains the selected ALPN protocol. When ALPN has no selected protocol, &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; equals &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; 属性是包含所选ALPN协议的字符串。当ALPN没有选定的协议时， &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; 等于 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1e3716500e3efcbc06eb8c1971be5b3031aefbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.authorized&lt;/code&gt; property is a &lt;code&gt;boolean&lt;/code&gt; indicating whether the client has been verified by one of the supplied Certificate Authorities for the server. If &lt;code&gt;tlsSocket.authorized&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;socket.authorizationError&lt;/code&gt; is set to describe how authorization failed. Depending on the settings of the TLS server, unauthorized connections may still be accepted.</source>
          <target state="translated">该 &lt;code&gt;tlsSocket.authorized&lt;/code&gt; 属性是一个 &lt;code&gt;boolean&lt;/code&gt; ，指示客户端是否已经被服务器所提供的证书颁发机构之一验证。如果 &lt;code&gt;tlsSocket.authorized&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ，则设置 &lt;code&gt;socket.authorizationError&lt;/code&gt; 以描述授权失败的方式。根据TLS服务器的设置，未经授权的连接可能仍会被接受。</target>
        </trans-unit>
        <trans-unit id="c1560315e66506c9f14f682158610897048f54b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.renegotiate()&lt;/code&gt; method initiates a TLS renegotiation process. Upon completion, the &lt;code&gt;callback&lt;/code&gt; function will be passed a single argument that is either an &lt;code&gt;Error&lt;/code&gt; (if the request failed) or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;tlsSocket.renegotiate()&lt;/code&gt; 方法用于启动TLS再谈判进程。完成后，将向 &lt;code&gt;callback&lt;/code&gt; 函数传递一个参数，该参数可以是 &lt;code&gt;Error&lt;/code&gt; （如果请求失败）或 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9855f343755bbd2595b4c8293c76e9a18177c3d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.servername&lt;/code&gt; property is a string containing the server name requested via SNI.</source>
          <target state="translated">该 &lt;code&gt;tlsSocket.servername&lt;/code&gt; 属性是一个包含通过SNI要求的服务器名称的字符串。</target>
        </trans-unit>
        <trans-unit id="dcac01a659e106d52ac484f3d471c86b4c378df4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.setMaxSendFragment()&lt;/code&gt; method sets the maximum TLS fragment size. Returns &lt;code&gt;true&lt;/code&gt; if setting the limit succeeded; &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">所述 &lt;code&gt;tlsSocket.setMaxSendFragment()&lt;/code&gt; 方法设置最大TLS片段大小。如果成功设置限制，则返回 &lt;code&gt;true&lt;/code&gt; ;否则，返回false。否则为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29428f13863882ea8f4f96a9c253ed79502b3724" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toJSON()&lt;/code&gt; method on the &lt;code&gt;URL&lt;/code&gt; object returns the serialized URL. The value returned is equivalent to that of &lt;a href=&quot;#url_url_href&quot;&gt;&lt;code&gt;url.href&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_tostring&quot;&gt;&lt;code&gt;url.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;toJSON()&lt;/code&gt; 的上方法 &lt;code&gt;URL&lt;/code&gt; 对象返回的序列化URL。返回的值等于&lt;a href=&quot;#url_url_href&quot;&gt; &lt;code&gt;url.href&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#url_url_tostring&quot;&gt; &lt;code&gt;url.toString()&lt;/code&gt; 的值&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b9818ab352d22b2510640724d3e91a12f02f0866" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method on the &lt;code&gt;URL&lt;/code&gt; object returns the serialized URL. The value returned is equivalent to that of &lt;a href=&quot;#url_url_href&quot;&gt;&lt;code&gt;url.href&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_tojson&quot;&gt;&lt;code&gt;url.toJSON()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;toString()&lt;/code&gt; 的上方法 &lt;code&gt;URL&lt;/code&gt; 对象返回的序列化URL。返回的值等于&lt;a href=&quot;#url_url_href&quot;&gt; &lt;code&gt;url.href&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#url_url_tojson&quot;&gt; &lt;code&gt;url.toJSON()&lt;/code&gt; 的值&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c3ff3398b1379b4f9e70c0f0e2112b898e772d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events.createTracing()&lt;/code&gt; method requires at least one trace event category.</source>
          <target state="translated">所述 &lt;code&gt;trace_events.createTracing()&lt;/code&gt; 方法需要至少一个跟踪事件类别。</target>
        </trans-unit>
        <trans-unit id="eb5f88aac5c15422dad13cd22ae5517d8aff25af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events&lt;/code&gt; module</source>
          <target state="translated">该 &lt;code&gt;trace_events&lt;/code&gt; 模块</target>
        </trans-unit>
        <trans-unit id="7b1b3b869aeb1da79b5e47ed6a53675c303384d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events&lt;/code&gt; module could not be loaded because Node.js was compiled with the &lt;code&gt;--without-v8-platform&lt;/code&gt; flag.</source>
          <target state="translated">该 &lt;code&gt;trace_events&lt;/code&gt; 的模块无法加载，因为Node.js的是与编译 &lt;code&gt;--without-v8-platform&lt;/code&gt; 标志。</target>
        </trans-unit>
        <trans-unit id="d662971594b3afbe87ef697171174048eaa66120" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform._flush()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">所述 &lt;code&gt;transform._flush()&lt;/code&gt; 方法的前缀以下划线，因为它是内部的定义它的类，并且不应该被用户程序直接调用。</target>
        </trans-unit>
        <trans-unit id="d2e2e92ce7d02c1bfbe2c3e0c42828de5b57fbd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform._transform()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">所述 &lt;code&gt;transform._transform()&lt;/code&gt; 方法的前缀以下划线，因为它是内部的定义它的类，并且不应该被用户程序直接调用。</target>
        </trans-unit>
        <trans-unit id="06b291008924c93d17c8a25ddc24cabe42e20aab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform.push()&lt;/code&gt; method may be called zero or more times to generate output from a single input chunk, depending on how much is to be output as a result of the chunk.</source>
          <target state="translated">可以将 &lt;code&gt;transform.push()&lt;/code&gt; 方法调用零次或更多次，以从单个输入块生成输出，这取决于作为该块的结果要输出多少。</target>
        </trans-unit>
        <trans-unit id="1482cb6354978fe69afb35af6b169257783355b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.ReadStream&lt;/code&gt; class is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that represents the readable side of a TTY. In normal circumstances &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt; will be the only &lt;code&gt;tty.ReadStream&lt;/code&gt; instance in a Node.js process and there should be no reason to create additional instances.</source>
          <target state="translated">所述 &lt;code&gt;tty.ReadStream&lt;/code&gt; 类是的子类&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;表示一个TTY的可读侧。在正常情况下，&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;将是Node.js进程中唯一的 &lt;code&gt;tty.ReadStream&lt;/code&gt; 实例，因此没有理由创建其他实例。</target>
        </trans-unit>
        <trans-unit id="fea75197a06554fdf7484bfce8f391405a82e45b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.WriteStream&lt;/code&gt; class is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that represents the writable side of a TTY. In normal circumstances, &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; will be the only &lt;code&gt;tty.WriteStream&lt;/code&gt; instances created for a Node.js process and there should be no reason to create additional instances.</source>
          <target state="translated">所述 &lt;code&gt;tty.WriteStream&lt;/code&gt; 类是的子类&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;表示一个TTY的可写入侧。在正常情况下，&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;将是为Node.js进程创建的唯一 &lt;code&gt;tty.WriteStream&lt;/code&gt; 实例，因此没有理由创建其他实例。</target>
        </trans-unit>
        <trans-unit id="089ab25de4c5531a8932bd899316bf978f71777c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.isatty()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;fd&lt;/code&gt; is associated with a TTY and &lt;code&gt;false&lt;/code&gt; if it is not, including whenever &lt;code&gt;fd&lt;/code&gt; is not a non-negative integer.</source>
          <target state="translated">所述 &lt;code&gt;tty.isatty()&lt;/code&gt; 方法返回 &lt;code&gt;true&lt;/code&gt; ，如果给定 &lt;code&gt;fd&lt;/code&gt; 与TTY和相关联的 &lt;code&gt;false&lt;/code&gt; 如果不是，包括每当 &lt;code&gt;fd&lt;/code&gt; 是不是一个非负整数。</target>
        </trans-unit>
        <trans-unit id="068c426f71f2a19cdc04cd090bc890bdef7f3df9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty&lt;/code&gt; module provides the &lt;code&gt;tty.ReadStream&lt;/code&gt; and &lt;code&gt;tty.WriteStream&lt;/code&gt; classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using:</source>
          <target state="translated">的 &lt;code&gt;tty&lt;/code&gt; 模块提供 &lt;code&gt;tty.ReadStream&lt;/code&gt; 和 &lt;code&gt;tty.WriteStream&lt;/code&gt; 类。在大多数情况下，没有必要或不可能直接使用此模块。但是，可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="546cf5cc6e4aec10268e918a7bb80559934e24b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument is only used on Windows platforms and can be one of &lt;code&gt;'dir'&lt;/code&gt;, &lt;code&gt;'file'&lt;/code&gt;, or &lt;code&gt;'junction'&lt;/code&gt;. Windows junction points require the destination path to be absolute. When using &lt;code&gt;'junction'&lt;/code&gt;, the &lt;code&gt;target&lt;/code&gt; argument will automatically be normalized to absolute path.</source>
          <target state="translated">该 &lt;code&gt;type&lt;/code&gt; 参数仅用于在Windows平台上，可以是一个 &lt;code&gt;'dir'&lt;/code&gt; ， &lt;code&gt;'file'&lt;/code&gt; 或 &lt;code&gt;'junction'&lt;/code&gt; 。Windows连接点要求目标路径是绝对路径。使用 &lt;code&gt;'junction'&lt;/code&gt; 时， &lt;code&gt;target&lt;/code&gt; 参数将自动归一化为绝对路径。</target>
        </trans-unit>
        <trans-unit id="b36cf89ae792607998f6c3f6881cfde3bdb33430" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; is a string identifying the type of resource that caused &lt;code&gt;init&lt;/code&gt; to be called. Generally, it will correspond to the name of the resource's constructor.</source>
          <target state="translated">的 &lt;code&gt;type&lt;/code&gt; 是标识导致资源的类型的字符串 &lt;code&gt;init&lt;/code&gt; 被调用。通常，它将对应于资源的构造函数的名称。</target>
        </trans-unit>
        <trans-unit id="b0713047630355050ba416d88406e08da301a3de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.format()&lt;/code&gt; method returns a formatted URL string derived from &lt;code&gt;urlObject&lt;/code&gt;.</source>
          <target state="translated">所述 &lt;code&gt;url.format()&lt;/code&gt; 方法返回衍生自一个格式化的URL字符串 &lt;code&gt;urlObject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55ca44190456823e04f99f6ae22a8f57d60ffc3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.parse()&lt;/code&gt; method takes a URL string, parses it, and returns a URL object.</source>
          <target state="translated">所述 &lt;code&gt;url.parse()&lt;/code&gt; 方法把URL信息串，解析它，并返回一个URL对象。</target>
        </trans-unit>
        <trans-unit id="11718d46d4cfbae5181595bd7c3fbe94462715cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.resolve()&lt;/code&gt; method resolves a target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF.</source>
          <target state="translated">所述 &lt;code&gt;url.resolve()&lt;/code&gt; 方法解决相对于目标URL到基座URL的方式类似于Web浏览器解析一个锚定标记的HREF。</target>
        </trans-unit>
        <trans-unit id="2a3b4947c1330d3bfc1effd6af4af13f7b8bf1df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; module provides two APIs for working with URLs: a legacy API that is Node.js specific, and a newer API that implements the same &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; used by web browsers.</source>
          <target state="translated">该 &lt;code&gt;url&lt;/code&gt; 模块提供了使用URL两种API：遗留API是特定的Node.js，以及新的API实现相同&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL标准&lt;/a&gt;所使用的网络浏览器。</target>
        </trans-unit>
        <trans-unit id="821dfbb0ad8f8f3a555df6573ebbf7275fd65916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; module provides utilities for URL resolution and parsing. It can be accessed using:</source>
          <target state="translated">该 &lt;code&gt;url&lt;/code&gt; 模块提供URL解析和分析工具。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="71ce52dc87ff4abf938e11b26b7ef8b7207b6d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; parameter can now be passed along with a separate &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="translated">现在可以将 &lt;code&gt;url&lt;/code&gt; 参数与一个单独的 &lt;code&gt;options&lt;/code&gt; 对象一起传递。</target>
        </trans-unit>
        <trans-unit id="4c169a8e8d2679d88714d8feee5146867d802475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useColors&lt;/code&gt; boolean option can be specified at construction to instruct the default writer to use ANSI style codes to colorize the output from the &lt;code&gt;util.inspect()&lt;/code&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;useColors&lt;/code&gt; 布尔选项可以在施工被指定为指示缺省写入器使用ANSI样式代码从上色输出 &lt;code&gt;util.inspect()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="2071213609146bc9b4c2fbc006a6de7d9ec04a31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util._extend()&lt;/code&gt; method was never intended to be used outside of internal Node.js modules. The community found and used it anyway.</source>
          <target state="translated">所述 &lt;code&gt;util._extend()&lt;/code&gt; 方法从来没有打算是内部的Node.js模块的使用之外。社区仍然找到并使用了它。</target>
        </trans-unit>
        <trans-unit id="ec8f575e1fba436442088c542aab95d0b244c3e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.debuglog()&lt;/code&gt; method is used to create a function that conditionally writes debug messages to &lt;code&gt;stderr&lt;/code&gt; based on the existence of the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable. If the &lt;code&gt;section&lt;/code&gt; name appears within the value of that environment variable, then the returned function operates similar to &lt;a href=&quot;console#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;. If not, then the returned function is a no-op.</source>
          <target state="translated">所述 &lt;code&gt;util.debuglog()&lt;/code&gt; 方法被用来创建有条件地写入调试消息的功能 &lt;code&gt;stderr&lt;/code&gt; 的基础上，存在 &lt;code&gt;NODE_DEBUG&lt;/code&gt; 环境变量。如果 &lt;code&gt;section&lt;/code&gt; 名称出现在该环境变量的值内，则返回的函数的操作类似于&lt;a href=&quot;console#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;。如果不是，则返回的函数为空操作。</target>
        </trans-unit>
        <trans-unit id="db7faf5cee157b8c4fc83b2ad07bd0dcc0dd44f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.deprecate()&lt;/code&gt; method wraps &lt;code&gt;fn&lt;/code&gt; (which may be a function or class) in such a way that it is marked as deprecated.</source>
          <target state="translated">所述 &lt;code&gt;util.deprecate()&lt;/code&gt; 方法包裹 &lt;code&gt;fn&lt;/code&gt; （其可以是一个函数或类）以这样的方式，作为弃用它被标记。</target>
        </trans-unit>
        <trans-unit id="cf1a8d7ed63b25fd7017c632a33bdb344f9c97f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.format()&lt;/code&gt; method returns a formatted string using the first argument as a &lt;code&gt;printf&lt;/code&gt;-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument. Supported specifiers are:</source>
          <target state="translated">所述 &lt;code&gt;util.format()&lt;/code&gt; 方法返回使用第一参数作为格式化的字符串 &lt;code&gt;printf&lt;/code&gt; 样格式串可以包含零个或多个格式说明。每个说明符都将替换为来自相应参数的转换后的值。支持的说明符包括：</target>
        </trans-unit>
        <trans-unit id="3efb2da17a664e762687da8a1d0e5cfa3ac78852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.inspect()&lt;/code&gt; method returns a string representation of &lt;code&gt;object&lt;/code&gt; that is intended for debugging. The output of &lt;code&gt;util.inspect&lt;/code&gt; may change at any time and should not be depended upon programmatically. Additional &lt;code&gt;options&lt;/code&gt; may be passed that alter the result. &lt;code&gt;util.inspect()&lt;/code&gt; will use the constructor's name and/or &lt;code&gt;@@toStringTag&lt;/code&gt; to make an identifiable tag for an inspected value.</source>
          <target state="translated">所述 &lt;code&gt;util.inspect()&lt;/code&gt; 方法返回的字符串表示 &lt;code&gt;object&lt;/code&gt; 被用于调试。 &lt;code&gt;util.inspect&lt;/code&gt; 的输出可能随时更改，因此不应以编程方式依赖它。可能会传递其他 &lt;code&gt;options&lt;/code&gt; 来更改结果。 &lt;code&gt;util.inspect()&lt;/code&gt; 将使用构造函数的名称和/或 &lt;code&gt;@@toStringTag&lt;/code&gt; 为可检查的值制作可识别的标签。</target>
        </trans-unit>
        <trans-unit id="c9ea59fe3a0c4080140d9df673a1e5787423603d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.log()&lt;/code&gt; method prints the given &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;stdout&lt;/code&gt; with an included timestamp.</source>
          <target state="translated">所述 &lt;code&gt;util.log()&lt;/code&gt; 方法打印给定的 &lt;code&gt;string&lt;/code&gt; 到 &lt;code&gt;stdout&lt;/code&gt; 与所包括的时间戳。</target>
        </trans-unit>
        <trans-unit id="b4480b5c9011c8675aadaf047b35b79505297227" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util&lt;/code&gt; module is primarily designed to support the needs of Node.js' own internal APIs. However, many of the utilities are useful for application and module developers as well. It can be accessed using:</source>
          <target state="translated">该 &lt;code&gt;util&lt;/code&gt; 模块主要用来支持Node.js的的自己的内部API的需求。但是，许多实用程序对应用程序和模块开发人员也很有用。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="ed55dce7d35fbae9a5ace55d3e9058bc7dbc420e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8.setFlagsFromString()&lt;/code&gt; method can be used to programmatically set V8 command line flags. This method should be used with care. Changing settings after the VM has started may result in unpredictable behavior, including crashes and data loss; or it may simply do nothing.</source>
          <target state="translated">所述 &lt;code&gt;v8.setFlagsFromString()&lt;/code&gt; 方法可用于以编程方式设置V8命令行标志。应谨慎使用此方法。VM启动后更改设置可能会导致无法预料的行为，包括崩溃和数据丢失；否则它可能什么都不做。</target>
        </trans-unit>
        <trans-unit id="eb12b9f59b42f9a78781aeae6fde23e91affcd74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8/*&lt;/code&gt; modules do not have any exports, and if not imported in a specific order would in fact throw errors. As such there are virtually no legitimate use cases for importing them through &lt;code&gt;require()&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;v8/*&lt;/code&gt; 模块没有任何出口，如果没有特定的顺序进口实际上将引发错误。因此，实际上没有合法的用例可以通过 &lt;code&gt;require()&lt;/code&gt; 导入它们。</target>
        </trans-unit>
        <trans-unit id="42e8f90c8521f98a85d97ecfb9c316de5a897439" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8&lt;/code&gt; module exposes APIs that are specific to the version of &lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8&lt;/a&gt; built into the Node.js binary. It can be accessed using:</source>
          <target state="translated">该 &lt;code&gt;v8&lt;/code&gt; 模块的API自曝所特有的版本&lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8&lt;/a&gt;内置到Node.js的二进制文件。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="e9150ac5d17e860569baf146b36a5690bb0aff13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8&lt;/code&gt; property now includes a Node.js specific suffix.</source>
          <target state="translated">该 &lt;code&gt;v8&lt;/code&gt; 属性现在包括Node.js的特定后缀。</target>
        </trans-unit>
        <trans-unit id="139ccc74ec513db3084c8d6e65e3c1ebda6b2995" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">该 &lt;code&gt;value&lt;/code&gt; 现在可以是 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab730178ebe2836e29d19f2ab82c52f4762c6a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbatim&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;verbatim&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="0af2d856dfcd7dd69eac4ee3adf4d77a3dc20392" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verify&lt;/code&gt; object can not be used again after &lt;code&gt;verify.verify()&lt;/code&gt; has been called. Multiple calls to &lt;code&gt;verify.verify()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">该 &lt;code&gt;verify&lt;/code&gt; 对象后不能再次使用 &lt;code&gt;verify.verify()&lt;/code&gt; 被调用。多次调用 &lt;code&gt;verify.verify()&lt;/code&gt; 将导致引发错误。</target>
        </trans-unit>
        <trans-unit id="97ecc00ca544db7063b1c36bded215825f2053c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.SourceTextModule&lt;/code&gt; class provides a low-level interface for using ECMAScript modules in VM contexts. It is the counterpart of the &lt;code&gt;vm.Script&lt;/code&gt; class that closely mirrors &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;s as defined in the ECMAScript specification.</source>
          <target state="translated">所述 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; 类提供一个低级别的界面，用于在VM环境中使用ECMAScript模块。它是 &lt;code&gt;vm.Script&lt;/code&gt; 类的对应物，它与ECMAScript规范中定义的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;紧密相关。</target>
        </trans-unit>
        <trans-unit id="316cf355e3db60036a581e7c99d2d0bf9e7002ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.createContext()&lt;/code&gt; method is primarily useful for creating a single sandbox that can be used to run multiple scripts. For instance, if emulating a web browser, the method can be used to create a single sandbox representing a window's global object, then run all &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags together within the context of that sandbox.</source>
          <target state="translated">所述 &lt;code&gt;vm.createContext()&lt;/code&gt; 方法是用于创建可用于运行多个脚本单个沙箱主要是有用的。例如，如果模拟Web浏览器，则该方法可用于创建代表窗口全局对象的单个沙箱，然后在该沙箱的上下文中一起运行所有 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="1cd62965c9c05e11b962409555d5994f7ff4e77d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.runInContext()&lt;/code&gt; method compiles &lt;code&gt;code&lt;/code&gt;, runs it within the context of the &lt;code&gt;contextifiedSandbox&lt;/code&gt;, then returns the result. Running code does not have access to the local scope. The &lt;code&gt;contextifiedSandbox&lt;/code&gt; object &lt;em&gt;must&lt;/em&gt; have been previously &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt; using the &lt;a href=&quot;#vm_vm_createcontext_sandbox_options&quot;&gt;&lt;code&gt;vm.createContext()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">所述 &lt;code&gt;vm.runInContext()&lt;/code&gt; 方法的编译 &lt;code&gt;code&lt;/code&gt; ，运行它的范围内 &lt;code&gt;contextifiedSandbox&lt;/code&gt; ，然后返回结果。正在运行的代码无权访问本地范围。所述 &lt;code&gt;contextifiedSandbox&lt;/code&gt; 对象&lt;em&gt;必须&lt;/em&gt;先前已经&lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt;使用&lt;a href=&quot;#vm_vm_createcontext_sandbox_options&quot;&gt; &lt;code&gt;vm.createContext()&lt;/code&gt; &lt;/a&gt;方法。</target>
        </trans-unit>
        <trans-unit id="62d126cd1ce5c7f3fa39dc697a697511d07be670" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.runInNewContext()&lt;/code&gt; first contextifies the given &lt;code&gt;sandbox&lt;/code&gt; object (or creates a new &lt;code&gt;sandbox&lt;/code&gt; if passed as &lt;code&gt;undefined&lt;/code&gt;), compiles the &lt;code&gt;code&lt;/code&gt;, runs it within the context of the created context, then returns the result. Running code does not have access to the local scope.</source>
          <target state="translated">所述 &lt;code&gt;vm.runInNewContext()&lt;/code&gt; 第一contextifies给定的 &lt;code&gt;sandbox&lt;/code&gt; 对象（或创建一个新的 &lt;code&gt;sandbox&lt;/code&gt; 如果它被传递 &lt;code&gt;undefined&lt;/code&gt; ），编译 &lt;code&gt;code&lt;/code&gt; ，运行它的创建的上下文的范围内，那么返回结果。正在运行的代码无权访问本地范围。</target>
        </trans-unit>
        <trans-unit id="8610a6d7f3470d50f371fbbe335752bef43b3dbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm&lt;/code&gt; module provides APIs for compiling and running code within V8 Virtual Machine contexts. &lt;strong&gt;The &lt;code&gt;vm&lt;/code&gt; module is not a security mechanism. Do not use it to run untrusted code&lt;/strong&gt;. The term &quot;sandbox&quot; is used throughout these docs simply to refer to a separate context, and does not confer any security guarantees.</source>
          <target state="translated">该 &lt;code&gt;vm&lt;/code&gt; 模块提供API编译和V8虚拟机环境中运行代码。&lt;strong&gt;该 &lt;code&gt;vm&lt;/code&gt; 模块是不是一种安全机制。不要使用它来运行不受信任的代码&lt;/strong&gt;。在所有这些文档中，术语&amp;ldquo;沙盒&amp;rdquo;仅用于指代单独的上下文，并不提供任何安全保证。</target>
        </trans-unit>
        <trans-unit id="e7c0e915e0cfd3fade1eb273a105095235eaa65a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; loop is necessary when processing data with &lt;code&gt;readable.read()&lt;/code&gt;. Only after &lt;code&gt;readable.read()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;, &lt;a href=&quot;#stream_event_readable&quot;&gt;&lt;code&gt;'readable'&lt;/code&gt;&lt;/a&gt; will be emitted.</source>
          <target state="translated">的 &lt;code&gt;while&lt;/code&gt; 处理具有数据时环路是必要 &lt;code&gt;readable.read()&lt;/code&gt; 。只有在 &lt;code&gt;readable.read()&lt;/code&gt; 返回 &lt;code&gt;null&lt;/code&gt; 之后，才会发出&lt;a href=&quot;#stream_event_readable&quot;&gt; &lt;code&gt;'readable'&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="91c664db964a38815c9aa3275cf5c899ae5335ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;windowsHide&lt;/code&gt; option is supported now.</source>
          <target state="translated">该 &lt;code&gt;windowsHide&lt;/code&gt; 选项现在支持。</target>
        </trans-unit>
        <trans-unit id="d1d677ab19d955f0c42d4fec78bf4b048f05f716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;worker&lt;/code&gt; parameter is passed now; see below for details.</source>
          <target state="translated">该 &lt;code&gt;worker&lt;/code&gt; 现在参数传递; 有关详情，请参见下文。</target>
        </trans-unit>
        <trans-unit id="2ced211b65867946e8189c44a339cd943b18be51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;worker_threads&lt;/code&gt; module enables the use of threads that execute JavaScript in parallel. To access it:</source>
          <target state="translated">所述 &lt;code&gt;worker_threads&lt;/code&gt; 模块使得能够使用在并行执行JavaScript线程。要访问它：</target>
        </trans-unit>
        <trans-unit id="b5fc9fe76f26aead960a92945f78d6f11a6c11c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._write()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">所述 &lt;code&gt;writable._write()&lt;/code&gt; 方法的前缀以下划线，因为它是内部的定义它的类，并且不应该被用户程序直接调用。</target>
        </trans-unit>
        <trans-unit id="27fe9b62a347651c87f5964623a298ba8e0d3b63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._writev()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">所述 &lt;code&gt;writable._writev()&lt;/code&gt; 方法的前缀以下划线，因为它是内部的定义它的类，并且不应该被用户程序直接调用。</target>
        </trans-unit>
        <trans-unit id="7c6691c92a237bbbd878643214ec8297403742e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._writev()&lt;/code&gt; method may be implemented in addition to &lt;code&gt;writable._write()&lt;/code&gt; in stream implementations that are capable of processing multiple chunks of data at once. If implemented, the method will be called with all chunks of data currently buffered in the write queue.</source>
          <target state="translated">所述 &lt;code&gt;writable._writev()&lt;/code&gt; 方法可在除了实施 &lt;code&gt;writable._write()&lt;/code&gt; 在流实现了能够同时处理多个数据块。如果实现，将使用写入队列中当前缓冲的所有数据块调用该方法。</target>
        </trans-unit>
        <trans-unit id="294df34f36d025c8b6233b4ffb2e44e160eeae61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.cork()&lt;/code&gt; method forces all written data to be buffered in memory. The buffered data will be flushed when either the &lt;a href=&quot;#stream_writable_uncork&quot;&gt;&lt;code&gt;stream.uncork()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; methods are called.</source>
          <target state="translated">所述 &lt;code&gt;writable.cork()&lt;/code&gt; 方法将强制所有数据写入存储器中进行缓冲。当&lt;a href=&quot;#stream_writable_uncork&quot;&gt; &lt;code&gt;stream.uncork()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;方法时，将刷新缓冲的数据。</target>
        </trans-unit>
        <trans-unit id="3cf311be2cf76a9013540e79f17530ebd02d755c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.setDefaultEncoding()&lt;/code&gt; method sets the default &lt;code&gt;encoding&lt;/code&gt; for a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">所述 &lt;code&gt;writable.setDefaultEncoding()&lt;/code&gt; 方法设置默认 &lt;code&gt;encoding&lt;/code&gt; 为一个&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;流。</target>
        </trans-unit>
        <trans-unit id="671ed8c8319213450ede72423dbb05201859e81a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.uncork()&lt;/code&gt; method flushes all data buffered since &lt;a href=&quot;#stream_writable_cork&quot;&gt;&lt;code&gt;stream.cork()&lt;/code&gt;&lt;/a&gt; was called.</source>
          <target state="translated">自&lt;a href=&quot;#stream_writable_cork&quot;&gt; &lt;code&gt;stream.cork()&lt;/code&gt; &lt;/a&gt;以来， &lt;code&gt;writable.uncork()&lt;/code&gt; 方法将刷新所有缓冲数据。</target>
        </trans-unit>
        <trans-unit id="ae096348e9037ff2e10f68360c0ee59961ba8a2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.write()&lt;/code&gt; method writes some data to the stream, and calls the supplied &lt;code&gt;callback&lt;/code&gt; once the data has been fully handled. If an error occurs, the &lt;code&gt;callback&lt;/code&gt;&lt;em&gt;may or may not&lt;/em&gt; be called with the error as its first argument. To reliably detect write errors, add a listener for the &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">所述 &lt;code&gt;writable.write()&lt;/code&gt; 方法中的一些的数据写入到该流，并调用所提供的 &lt;code&gt;callback&lt;/code&gt; 一旦数据已被完全处理。如果发生错误，则&lt;em&gt;可能会或可能不会&lt;/em&gt;以该错误作为其第一个参数来调用该 &lt;code&gt;callback&lt;/code&gt; 。为了可靠地检测到写错误，请为 &lt;code&gt;'error'&lt;/code&gt; 事件添加一个侦听器。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c114b95c94baec67e1dca89c5c1cbc3b54e1d47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib.bytesWritten&lt;/code&gt; property specifies the number of bytes written to the engine, before the bytes are processed (compressed or decompressed, as appropriate for the derived class).</source>
          <target state="translated">所述 &lt;code&gt;zlib.bytesWritten&lt;/code&gt; 属性指定写入到发动机的字节数，这些字节被处理之前（压缩或解压缩，以适合派生类）。</target>
        </trans-unit>
        <trans-unit id="f4d9425ffe5e7209df632d44375adca39b3fbaf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib&lt;/code&gt; module can be used to implement support for the &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;deflate&lt;/code&gt; and &lt;code&gt;br&lt;/code&gt; content-encoding mechanisms defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-4.2&quot;&gt;HTTP&lt;/a&gt;.</source>
          <target state="translated">所述 &lt;code&gt;zlib&lt;/code&gt; 模块可用于实现用于支撑 &lt;code&gt;gzip&lt;/code&gt; 的， &lt;code&gt;deflate&lt;/code&gt; 和 &lt;code&gt;br&lt;/code&gt; 由定义的内容编码机制&lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-4.2&quot;&gt;HTTP&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff312da231febfae7bc07450e11dc58ffa83a66e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib&lt;/code&gt; module provides compression functionality implemented using Gzip and Deflate/Inflate, as well as Brotli. It can be accessed using:</source>
          <target state="translated">所述 &lt;code&gt;zlib&lt;/code&gt; 模块提供使用gzip和deflate /膨胀压缩的功能实现，以及Brotli。可以使用以下命令访问它：</target>
        </trans-unit>
        <trans-unit id="0d3fb2c750dea4c18daf95518433459481d23f29" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&quot;module&quot;&lt;/em&gt; format is returned for an ECMAScript Module, while the &lt;em&gt;&quot;commonjs&quot;&lt;/em&gt; format is used to indicate loading through the legacy CommonJS loader. Additional formats such as &lt;em&gt;&quot;addon&quot;&lt;/em&gt; can be extended in future updates.</source>
          <target state="translated">的&lt;em&gt;&amp;ldquo;模块&amp;rdquo;&lt;/em&gt;格式被返回以用于一个模块的ECMAScript，而&lt;em&gt;&amp;ldquo;CommonJS的&amp;rdquo;&lt;/em&gt;格式用于指示通过遗留CommonJS的装载机加载。其他格式（例如&lt;em&gt;&amp;ldquo;插件&amp;rdquo;）&lt;/em&gt;可以在将来的更新中扩展。</target>
        </trans-unit>
        <trans-unit id="4b26d60c8c267e33ceec9eb3cb25823659216c18" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;C0 control percent-encode set&lt;/em&gt; includes code points in range U+0000 to U+001F (inclusive) and all code points greater than U+007E.</source>
          <target state="translated">在&lt;em&gt;C0控制百分比编码组&lt;/em&gt;包括代码点范围U + 0000至U + 001F（含）和所有代码点比U + 007E更大。</target>
        </trans-unit>
        <trans-unit id="0672d673b74190fd9fba201b783b6f34f40080c2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;fragment percent-encode set&lt;/em&gt; includes the &lt;em&gt;C0 control percent-encode set&lt;/em&gt; and code points U+0020, U+0022, U+003C, U+003E, and U+0060.</source>
          <target state="translated">该&lt;em&gt;片段百分比编码组&lt;/em&gt;包括&lt;em&gt;C0控制百分比编码组&lt;/em&gt;和代码点U + 0020，U + 0022，U + 003C，U + 003E，和U + 0060。</target>
        </trans-unit>
        <trans-unit id="e22ab329bdd24668cc59f8fef8dc30760c4de96d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;heap&lt;/em&gt; is where objects, strings, and closures are stored. Variables are stored in the &lt;em&gt;stack&lt;/em&gt; and the actual JavaScript code resides in the &lt;em&gt;code segment&lt;/em&gt;.</source>
          <target state="translated">该&lt;em&gt;堆&lt;/em&gt;是一个对象，字符串和封闭的存储位置。变量存储在&lt;em&gt;堆栈中&lt;/em&gt;，而实际的JavaScript代码驻留在&lt;em&gt;代码段中&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d7375464a38257a226cb87f262dcb3be552b7358" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;path percent-encode set&lt;/em&gt; includes the &lt;em&gt;C0 control percent-encode set&lt;/em&gt; and code points U+0020, U+0022, U+0023, U+003C, U+003E, U+003F, U+0060, U+007B, and U+007D.</source>
          <target state="translated">的&lt;em&gt;路径百分比编码组&lt;/em&gt;包括&lt;em&gt;C0控制百分比编码组&lt;/em&gt;和代码点U + 0020，U + 0022，U + 0023，U + 003C，U + 003E，U + 003F，U + 0060，U + 007B，和U + 007D。</target>
        </trans-unit>
        <trans-unit id="e16b65952ade126f6a18c1bc1edf6665c9b2398f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;specifier&lt;/em&gt; of an &lt;code&gt;import&lt;/code&gt; statement (the string after the &lt;code&gt;from&lt;/code&gt; keyword) can either be an URL-style relative path like &lt;code&gt;'./file.mjs'&lt;/code&gt; or a package name like &lt;code&gt;'fs'&lt;/code&gt;.</source>
          <target state="translated">该&lt;em&gt;说明符&lt;/em&gt;的的 &lt;code&gt;import&lt;/code&gt; 语句（后弦 &lt;code&gt;from&lt;/code&gt; 关键字）可以是像一个URL风格的相对路径 &lt;code&gt;'./file.mjs'&lt;/code&gt; 或类似的包名 &lt;code&gt;'fs'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d70f6b9c96199d8fff3d7061feed1cf128c3ca54" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;specifier&lt;/em&gt; of an &lt;code&gt;import&lt;/code&gt; statement is the string after the &lt;code&gt;from&lt;/code&gt; keyword, e.g. &lt;code&gt;'path'&lt;/code&gt; in &lt;code&gt;import { sep } from 'path'&lt;/code&gt;. Specifiers are also used in &lt;code&gt;export from&lt;/code&gt; statements, and as the argument to an &lt;code&gt;import()&lt;/code&gt; expression.</source>
          <target state="translated">该&lt;em&gt;说明符&lt;/em&gt;的的 &lt;code&gt;import&lt;/code&gt; 语句后的字符串 &lt;code&gt;from&lt;/code&gt; 关键字，如 &lt;code&gt;'path'&lt;/code&gt; 在 &lt;code&gt;import { sep } from 'path'&lt;/code&gt; 。说明符还用于 &lt;code&gt;export from&lt;/code&gt; 语句导出，并用作 &lt;code&gt;import()&lt;/code&gt; 表达式的参数。</target>
        </trans-unit>
        <trans-unit id="6ee6720e4d6848bc402c87158eb6ba5b1413a59b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;userinfo encode set&lt;/em&gt; includes the &lt;em&gt;path percent-encode set&lt;/em&gt; and code points U+002F, U+003A, U+003B, U+003D, U+0040, U+005B, U+005C, U+005D, U+005E, and U+007C.</source>
          <target state="translated">所述&lt;em&gt;用户信息编码组&lt;/em&gt;包括&lt;em&gt;路径％的编码组&lt;/em&gt;和代码点U + 002F，U + 003A，U + 003B，U + 003D，U + 0040，U + 005B，U + 005C，U + 005D，U + 005E，和U + 007C。</target>
        </trans-unit>
        <trans-unit id="23386f556b00f0799b7c78c24407776a22e27dd3" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;userinfo percent-encode set&lt;/em&gt; is used exclusively for username and passwords encoded within the URL. The &lt;em&gt;path percent-encode set&lt;/em&gt; is used for the path of most URLs. The &lt;em&gt;fragment percent-encode set&lt;/em&gt; is used for URL fragments. The &lt;em&gt;C0 control percent-encode set&lt;/em&gt; is used for host and path under certain specific conditions, in addition to all other cases.</source>
          <target state="translated">的&lt;em&gt;用户信息百分比编码组&lt;/em&gt;专门用于用户名和URL内编码的密码。该&lt;em&gt;路径％的编码设置&lt;/em&gt;用于大多数的URL路径。该&lt;em&gt;片段百分比编码组&lt;/em&gt;用于URL片段。在&lt;em&gt;C0控制百分比编码集&lt;/em&gt;被用于在特定条件下主机和路径，除了所有其他情况。</target>
        </trans-unit>
        <trans-unit id="fc483ce66d0abc03fd32e445e705d973f26da1ef" translate="yes" xml:space="preserve">
          <source>The API versions are useful when inspecting the runtime state from within the application, in expectation of self-adjusting the resource consumption, load balancing, monitoring etc.</source>
          <target state="translated">当从应用程序内部检查运行时状态时,API版本非常有用,期望能自我调整资源消耗、负载平衡、监控等。</target>
        </trans-unit>
        <trans-unit id="0951fdaa95308bec1dfbfa8d404c92c357929728" translate="yes" xml:space="preserve">
          <source>The API's return value is passed via an out parameter.</source>
          <target state="translated">API的返回值是通过一个out参数传递的。</target>
        </trans-unit>
        <trans-unit id="09062a80a94152f8f1768c599ae619e0e76b8acf" translate="yes" xml:space="preserve">
          <source>The APIs and implementation are subject to change at any time.</source>
          <target state="translated">API和实现方式可能会随时改变。</target>
        </trans-unit>
        <trans-unit id="53f0c757b52397f8f07d9a59faa43b0b19cacf07" translate="yes" xml:space="preserve">
          <source>The APIs documented in this section provide a simple interface to get and set properties on arbitrary JavaScript objects represented by &lt;code&gt;napi_value&lt;/code&gt;.</source>
          <target state="translated">本节中介绍的API提供了一个简单的接口，用于获取和设置由 &lt;code&gt;napi_value&lt;/code&gt; 表示的任意JavaScript对象的属性。</target>
        </trans-unit>
        <trans-unit id="7b41c34ea62e101d148225b05038df05cdb06c85" translate="yes" xml:space="preserve">
          <source>The AsyncHooks Sensitive API was never documented and had various minor issues. Use the &lt;code&gt;AsyncResource&lt;/code&gt; API instead. See &lt;a href=&quot;https://github.com/nodejs/node/issues/15572&quot;&gt;https://github.com/nodejs/node/issues/15572&lt;/a&gt;.</source>
          <target state="translated">从未记录过AsyncHooks Sensitive API，并且存在各种小问题。请改用 &lt;code&gt;AsyncResource&lt;/code&gt; API。参见&lt;a href=&quot;https://github.com/nodejs/node/issues/15572&quot;&gt;https://github.com/nodejs/node/issues/15572&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d1b6f5984ae9585871ec63a04fbea85e35a8f15" translate="yes" xml:space="preserve">
          <source>The C++ constructor callback should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See &lt;code&gt;napi_wrap()&lt;/code&gt; for details.</source>
          <target state="translated">C ++构造函数回调应该是调用实际类构造函数的类上的静态方法，然后将新的C ++实例包装在JavaScript对象中，并返回包装对象。有关详细信息，请参见 &lt;code&gt;napi_wrap()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75c226dff34c132b4dadda02d210de7f84a216ce" translate="yes" xml:space="preserve">
          <source>The Compatibility API has the goal of providing a similar developer experience of HTTP/1 when using HTTP/2, making it possible to develop applications that support both &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt; and HTTP/2. This API targets only the &lt;strong&gt;public API&lt;/strong&gt; of the &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt;. However many modules use internal methods or state, and those &lt;em&gt;are not supported&lt;/em&gt; as it is a completely different implementation.</source>
          <target state="translated">兼容性API的目标是在使用HTTP / 2时为HTTP / 1提供类似的开发人员体验，从而使开发支持&lt;a href=&quot;http&quot;&gt;HTTP / 1&lt;/a&gt;和HTTP / 2的应用程序成为可能。该API仅针对&lt;a href=&quot;http&quot;&gt;HTTP / 1&lt;/a&gt;的&lt;strong&gt;公共API&lt;/strong&gt;。但是，许多模块使用内部方法或状态，&lt;em&gt;因此不支持&lt;/em&gt;这些方法或状态，因为它是完全不同的实现。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="961d6df9bb778b72464f79d4e4386ab4894e1c10" translate="yes" xml:space="preserve">
          <source>The Core API provides a low-level interface designed specifically around support for HTTP/2 protocol features. It is specifically &lt;em&gt;not&lt;/em&gt; designed for compatibility with the existing &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt; module API. However, the &lt;a href=&quot;#http2_compatibility_api&quot;&gt;Compatibility API&lt;/a&gt; is.</source>
          <target state="translated">核心API提供了专门针对对HTTP / 2协议功能的支持而设计的低级接口。它&lt;em&gt;不是&lt;/em&gt;专门为与现有&lt;a href=&quot;http&quot;&gt;HTTP / 1&lt;/a&gt;模块API 兼容&lt;em&gt;而&lt;/em&gt;设计的。但是，&lt;a href=&quot;#http2_compatibility_api&quot;&gt;兼容性API&lt;/a&gt;是。</target>
        </trans-unit>
        <trans-unit id="279de7517da4ff67656c3cc6b5f838ad1ce8305b" translate="yes" xml:space="preserve">
          <source>The Crypto module was added to Node.js before there was the concept of a unified Stream API, and before there were &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects for handling binary data. As such, the many of the &lt;code&gt;crypto&lt;/code&gt; defined classes have methods not typically found on other Node.js classes that implement the &lt;a href=&quot;stream&quot;&gt;streams&lt;/a&gt; API (e.g. &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;final()&lt;/code&gt;, or &lt;code&gt;digest()&lt;/code&gt;). Also, many methods accepted and returned &lt;code&gt;'latin1'&lt;/code&gt; encoded strings by default rather than &lt;code&gt;Buffer&lt;/code&gt;s. This default was changed after Node.js v0.8 to use &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects by default instead.</source>
          <target state="translated">在出现统一流API的概念之前，在存在用于处理二进制数据的&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;对象之前，将Crypto模块添加到Node.js中。这样，许多 &lt;code&gt;crypto&lt;/code&gt; 定义的类具有通常在其他实现&lt;a href=&quot;stream&quot;&gt;流&lt;/a&gt; API的Node.js类上找不到的方法（例如， &lt;code&gt;update()&lt;/code&gt; ， &lt;code&gt;final()&lt;/code&gt; 或 &lt;code&gt;digest()&lt;/code&gt; ）。同样，许多方法默认情况下接受并返回 &lt;code&gt;'latin1'&lt;/code&gt; 编码的字符串，而不是 &lt;code&gt;Buffer&lt;/code&gt; 。在Node.js v0.8之后，此默认值已更改为默认使用&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;对象。</target>
        </trans-unit>
        <trans-unit id="1255dfc8cbf2ee8aad0ef2d6ca18a8d1643d8eb7" translate="yes" xml:space="preserve">
          <source>The DH groups of &lt;code&gt;modp1&lt;/code&gt;, &lt;code&gt;modp2&lt;/code&gt; and &lt;code&gt;modp5&lt;/code&gt; have a key size smaller than 2048 bits and are not recommended.</source>
          <target state="translated">&lt;code&gt;modp1&lt;/code&gt; ， &lt;code&gt;modp2&lt;/code&gt; 和 &lt;code&gt;modp5&lt;/code&gt; 的DH组的密钥大小小于2048位，因此不建议这样做。</target>
        </trans-unit>
        <trans-unit id="16029571d08814879fd5ceff7ac0b6026da87458" translate="yes" xml:space="preserve">
          <source>The Extended CONNECT Protocol</source>
          <target state="translated">扩展的CONNECT协议</target>
        </trans-unit>
        <trans-unit id="5b3b2456b76fd5373a47d7c0f25c7408ab474e91" translate="yes" xml:space="preserve">
          <source>The HTTP &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3&quot;&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;&lt;/a&gt; header is used within an http request to identify the compression encodings accepted by the client. The &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11&quot;&gt;&lt;code&gt;Content-Encoding&lt;/code&gt;&lt;/a&gt; header is used to identify the compression encodings actually applied to a message.</source>
          <target state="translated">HTTP 请求中使用HTTP &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3&quot;&gt; &lt;code&gt;Accept-Encoding&lt;/code&gt; &lt;/a&gt;标头来标识客户端接受的压缩编码。的&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11&quot;&gt; &lt;code&gt;Content-Encoding&lt;/code&gt; &lt;/a&gt;报头被用于识别实际施加到一个消息中的压缩编码。</target>
        </trans-unit>
        <trans-unit id="ed4090b42f4c6ce4fe634a7a6f88509a67714c4c" translate="yes" xml:space="preserve">
          <source>The HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses &amp;mdash; the user is able to stream data.</source>
          <target state="translated">Node.js中的HTTP接口旨在支持协议的许多传统上难以使用的功能。特别是大的，可能是块编码的消息。该界面非常小心，永远不要缓冲整个请求或响应-用户能够流式传输数据。</target>
        </trans-unit>
        <trans-unit id="772600c21e3faa346b0496ef8be7d5364935abae" translate="yes" xml:space="preserve">
          <source>The HTTP response status message (reason phrase). E.G. &lt;code&gt;OK&lt;/code&gt; or &lt;code&gt;Internal Server Error&lt;/code&gt;.</source>
          <target state="translated">HTTP响应状态消息（原因短语）。EG &lt;code&gt;OK&lt;/code&gt; 或 &lt;code&gt;Internal Server Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40c5a5bee4534201d7b876c219ec7fc5d4463481" translate="yes" xml:space="preserve">
          <source>The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header fields (e.g. &lt;code&gt;':method'&lt;/code&gt;, &lt;code&gt;':path'&lt;/code&gt;, etc).</source>
          <target state="translated">HTTP / 1规范禁止预告片包含HTTP / 2伪标头字段（例如 &lt;code&gt;':method'&lt;/code&gt; ， &lt;code&gt;':path'&lt;/code&gt; 等）。</target>
        </trans-unit>
        <trans-unit id="135fed06aa5bbc41c44688e5c372775c7bdee37f" translate="yes" xml:space="preserve">
          <source>The HTTP/2 compatibility API is composed of &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2ServerRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2ServerResponse&lt;/code&gt;&lt;/a&gt;. They aim at API compatibility with HTTP/1, but they do not hide the differences between the protocols. As an example, the status message for HTTP codes is ignored.</source>
          <target state="translated">HTTP / 2兼容性API由&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2ServerRequest&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2ServerResponse&lt;/code&gt; &lt;/a&gt;组成。它们旨在实现与HTTP / 1的API兼容性，但是它们并未隐藏协议之间的差异。例如，将忽略HTTP代码的状态消息。</target>
        </trans-unit>
        <trans-unit id="162977f5d469e9a6540d7b02728763fc461aff28" translate="yes" xml:space="preserve">
          <source>The HTTP/2 error code used when closing the stream can be retrieved using the &lt;code&gt;http2stream.rstCode&lt;/code&gt; property. If the code is any value other than &lt;code&gt;NGHTTP2_NO_ERROR&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt;), an &lt;code&gt;'error'&lt;/code&gt; event will have also been emitted.</source>
          <target state="translated">可以使用 &lt;code&gt;http2stream.rstCode&lt;/code&gt; 属性检索关闭流时使用的HTTP / 2错误代码。如果代码是 &lt;code&gt;NGHTTP2_NO_ERROR&lt;/code&gt; （ &lt;code&gt;0&lt;/code&gt; ）以外的任何其他值，则还将发出 &lt;code&gt;'error'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="7a1bae8c706dfc594960961ddd5385024803aeda" translate="yes" xml:space="preserve">
          <source>The HTTP/2 implementation applies stricter handling of invalid characters in HTTP header names and values than the HTTP/1 implementation.</source>
          <target state="translated">HTTP/2的实现比HTTP/1的实现更严格地处理HTTP头名和值中的无效字符。</target>
        </trans-unit>
        <trans-unit id="2f96b2b47131be95c297bad382f063d4a1945e24" translate="yes" xml:space="preserve">
          <source>The ID returned from &lt;code&gt;executionAsyncId()&lt;/code&gt; is related to execution timing, not causality (which is covered by &lt;code&gt;triggerAsyncId()&lt;/code&gt;):</source>
          <target state="translated">从 &lt;code&gt;executionAsyncId()&lt;/code&gt; 返回的ID 与执行时间有关，而不与因果关系（由 &lt;code&gt;triggerAsyncId()&lt;/code&gt; 涵盖）：</target>
        </trans-unit>
        <trans-unit id="47ac560e8f84993ade1da5a6679e57c4013bc4f7" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Number&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;Section 6.1.6&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Number&lt;/code&gt; 类型在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="58a08f1fccd82b78e4fa42d492a99a1e83b02718" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Number&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;Section 6.1.6&lt;/a&gt; of the ECMAScript Language Specification. Note the complete range of &lt;code&gt;int64_t&lt;/code&gt; cannot be represented with full precision in JavaScript. Integer values outside the range of &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.min_safe_integer&quot;&gt;&lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; -(2^53 - 1) - &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; (2^53 - 1) will lose precision.</source>
          <target state="translated">JavaScript &lt;code&gt;Number&lt;/code&gt; 类型在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6节中&lt;/a&gt;进行了描述。注意， &lt;code&gt;int64_t&lt;/code&gt; 的完整范围无法在JavaScript中完全精确地表示。在&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.min_safe_integer&quot;&gt; &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; -&lt;/a&gt;（2 ^ &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.max_safe_integer&quot;&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt;）-Number.MAX_SAFE_INTEGER（2 ^ 53-1）范围之外的整数值将失去精度。</target>
        </trans-unit>
        <trans-unit id="49efb0950474a63e8a2561d0a785571f7a4d0f11" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Object&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object-type&quot;&gt;Section 6.1.7&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Object&lt;/code&gt; 类型在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object-type&quot;&gt;6.1.7节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="6d58498aa5f597c1ecf0a744aef261db4f31bc92" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;String&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type&quot;&gt;Section 6.1.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;String&lt;/code&gt; 类型在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type&quot;&gt;6.1.4节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="e2d5ab3fbb2a9670eda6b4f6fe619f423b95b3da" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Symbol&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-symbol-objects&quot;&gt;Section 19.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Symbol&lt;/code&gt; 类型在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-symbol-objects&quot;&gt;19.4节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="8a9e4c46b3f1d21c0585bb00657cd3b4952dbae7" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; mechanism &lt;strong&gt;cannot&lt;/strong&gt; be used to intercept errors generated by asynchronous APIs. A common mistake for beginners is to try to use &lt;code&gt;throw&lt;/code&gt; inside an error-first callback:</source>
          <target state="translated">JavaScript &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 机制&lt;strong&gt;不能&lt;/strong&gt;用于拦截异步API生成的错误。初学者常见的错误是尝试在错误优先的回调中使用 &lt;code&gt;throw&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c410bef1bfc9aa5063d237d54175e04472c4cef2" translate="yes" xml:space="preserve">
          <source>The JavaScript constructor function returned from &lt;a href=&quot;#n_api_napi_define_class&quot;&gt;&lt;code&gt;napi_define_class&lt;/code&gt;&lt;/a&gt; is often saved and used later, to construct new instances of the class from native code, and/or check whether provided values are instances of the class. In that case, to prevent the function value from being garbage-collected, create a persistent reference to it using &lt;a href=&quot;#n_api_napi_create_reference&quot;&gt;&lt;code&gt;napi_create_reference&lt;/code&gt;&lt;/a&gt; and ensure the reference count is kept &amp;gt;= 1.</source>
          <target state="translated">从&lt;a href=&quot;#n_api_napi_define_class&quot;&gt; &lt;code&gt;napi_define_class&lt;/code&gt; &lt;/a&gt;返回的JavaScript构造函数经常被保存并在以后使用，以便从本机代码构造该类的新实例，和/或检查提供的值是否为该类的实例。在这种情况下，为防止函数值被垃圾回收，请使用&lt;a href=&quot;#n_api_napi_create_reference&quot;&gt; &lt;code&gt;napi_create_reference&lt;/code&gt; &lt;/a&gt;创建对其的持久引用，并确保引用计数保持&amp;gt; = 1。</target>
        </trans-unit>
        <trans-unit id="657216a379465090b22847c0560ff9e628279283" translate="yes" xml:space="preserve">
          <source>The Legacy URL API is deprecated. Use the WHATWG URL API.</source>
          <target state="translated">传统的URL API已经过时了,请使用WHATWG的URL API。使用 WHATWG URL API。</target>
        </trans-unit>
        <trans-unit id="c9bcb6aef5fbe5e6c4c49d6ca50a7775ad79058d" translate="yes" xml:space="preserve">
          <source>The N-API is a C API that ensures ABI stability across Node.js versions and different compiler levels. A C++ API can be easier to use. To support using C++, the project maintains a C++ wrapper module called &lt;a href=&quot;https://github.com/nodejs/node-addon-api&quot;&gt;node-addon-api&lt;/a&gt;. This wrapper provides an inlineable C++ API. Binaries built with &lt;code&gt;node-addon-api&lt;/code&gt; will depend on the symbols for the N-API C-based functions exported by Node.js. &lt;code&gt;node-addon-api&lt;/code&gt; is a more efficient way to write code that calls N-API. Take, for example, the following &lt;code&gt;node-addon-api&lt;/code&gt; code. The first section shows the &lt;code&gt;node-addon-api&lt;/code&gt; code and the second section shows what actually gets used in the addon.</source>
          <target state="translated">N-API是一种C API，可确保Node.js版本和不同编译器级别的ABI稳定性。 C ++ API可能更易于使用。为了支持使用C ++，项目维护了一个名为&lt;a href=&quot;https://github.com/nodejs/node-addon-api&quot;&gt;node-addon-api&lt;/a&gt;的C ++包装器模块。该包装器提供了一个可内联的C ++ API。使用 &lt;code&gt;node-addon-api&lt;/code&gt; 构建的二进制文件将取决于Node.js导出的基于N-API C的函数的符号。 &lt;code&gt;node-addon-api&lt;/code&gt; 是编写调用N-API的代码的更有效方法。以下面的 &lt;code&gt;node-addon-api&lt;/code&gt; 代码为例。第一部分显示 &lt;code&gt;node-addon-api&lt;/code&gt; 代码，第二部分显示实际在插件中使用的内容。</target>
        </trans-unit>
        <trans-unit id="7fbeecff23b86e6f00bb89f0d12dd0bfed507713" translate="yes" xml:space="preserve">
          <source>The N-APIs associated strictly with accessing ECMAScript features from native code can be found separately in &lt;code&gt;js_native_api.h&lt;/code&gt; and &lt;code&gt;js_native_api_types.h&lt;/code&gt;. The APIs defined in these headers are included in &lt;code&gt;node_api.h&lt;/code&gt; and &lt;code&gt;node_api_types.h&lt;/code&gt;. The headers are structured in this way in order to allow implementations of N-API outside of Node.js. For those implementations the Node.js specific APIs may not be applicable.</source>
          <target state="translated">可以从 &lt;code&gt;js_native_api.h&lt;/code&gt; 和 &lt;code&gt;js_native_api_types.h&lt;/code&gt; 中单独找到与从本机代码访问ECMAScript功能严格相关的N-API 。这些标头中定义的API包含在 &lt;code&gt;node_api.h&lt;/code&gt; 和 &lt;code&gt;node_api_types.h&lt;/code&gt; 中。头以这种方式构造，以便允许在Node.js外部实现N-API。对于那些实现，Node.js特定的API可能不适用。</target>
        </trans-unit>
        <trans-unit id="3bdef6c72992d8c5e5ff5c885a73a68885fd6ad0" translate="yes" xml:space="preserve">
          <source>The Node.js REPL</source>
          <target state="translated">Node.js REPL</target>
        </trans-unit>
        <trans-unit id="e3c044365d34cf9a28d8db2d3ac2cd94ca4a34e6" translate="yes" xml:space="preserve">
          <source>The Node.js event loop no longer having any additional work to perform.</source>
          <target state="translated">Node.js事件循环不再有任何额外的工作要执行。</target>
        </trans-unit>
        <trans-unit id="7e65b631311436d7e53c5dbb3d80a7085dab5a90" translate="yes" xml:space="preserve">
          <source>The Node.js project is adding error codes to all of the errors generated internally. The goal is for applications to use these error codes for all error checking. The associated error messages will remain, but will only be meant to be used for logging and display with the expectation that the message can change without SemVer applying. In order to support this model with N-API, both in internal functionality and for module specific functionality (as its good practice), the &lt;code&gt;throw_&lt;/code&gt; and &lt;code&gt;create_&lt;/code&gt; functions take an optional code parameter which is the string for the code to be added to the error object. If the optional parameter is NULL then no code will be associated with the error. If a code is provided, the name associated with the error is also updated to be:</source>
          <target state="translated">Node.js项目正在向内部生成的所有错误添加错误代码。目的是使应用程序将这些错误代码用于所有错误检查。关联的错误消息将保留，但仅用于日志记录和显示，并期望在不应用SemVer的情况下，消息可以更改。为了在内部功能和特定于模块的功能（作为最佳做法）中都使用N-API支持此模型， &lt;code&gt;throw_&lt;/code&gt; 和 &lt;code&gt;create_&lt;/code&gt; 函数采用可选的code参数，该参数是要添加到错误中的代码的字符串目的。如果可选参数为NULL，则没有代码与错误关联。如果提供了代码，则与错误关联的名称也将更新为：</target>
        </trans-unit>
        <trans-unit id="bdcbdbacfe81b80e870cab0c5a70fe82807a94ad" translate="yes" xml:space="preserve">
          <source>The Node.js-specific parts of an addon can be separated from the code that exposes the actual functionality to the JavaScript environment so that the latter may be used with multiple implementations of N-API. In the example below, &lt;code&gt;addon.c&lt;/code&gt; and &lt;code&gt;addon.h&lt;/code&gt; refer only to &lt;code&gt;js_native_api.h&lt;/code&gt;. This ensures that &lt;code&gt;addon.c&lt;/code&gt; can be reused to compile against either the Node.js implementation of N-API or any implementation of N-API outside of Node.js.</source>
          <target state="translated">可以将附加组件中特定于Node.js的部分与将实际功能暴露给JavaScript环境的代码分开，以便后者可以与N-API的多种实现一起使用。在下面的示例中， &lt;code&gt;addon.c&lt;/code&gt; 和 &lt;code&gt;addon.h&lt;/code&gt; 仅引用 &lt;code&gt;js_native_api.h&lt;/code&gt; 。这样可以确保 &lt;code&gt;addon.c&lt;/code&gt; 可以重复使用，以针对N.API的Node.js实现或在Node.js之外的任何N-API实现进行编译。</target>
        </trans-unit>
        <trans-unit id="552d0c830ce2aa539ac168b242bbc027a66f4008" translate="yes" xml:space="preserve">
          <source>The OpenSSL command-line interface can be used to generate a CSR for a private key:</source>
          <target state="translated">OpenSSL命令行接口可以用来生成私钥的CSR。</target>
        </trans-unit>
        <trans-unit id="91cfbd995886d282297192748688dbaa4166ed28" translate="yes" xml:space="preserve">
          <source>The OpenSSL function the error originates in.</source>
          <target state="translated">错误产生的OpenSSL函数。</target>
        </trans-unit>
        <trans-unit id="a1e80bf18d0319ba48b28be867e8b0e1d8c12952" translate="yes" xml:space="preserve">
          <source>The OpenSSL library the error originates in.</source>
          <target state="translated">错误产生的OpenSSL库。</target>
        </trans-unit>
        <trans-unit id="8acbb56d9d8d4d4648cc4c93a9173dfb379ab8ef" translate="yes" xml:space="preserve">
          <source>The PBKDF2 algorithm failed for unspecified reasons. OpenSSL does not provide more details and therefore neither does Node.js.</source>
          <target state="translated">PBKDF2算法失败的原因不明。OpenSSL没有提供更多的细节,因此Node.js也没有提供。</target>
        </trans-unit>
        <trans-unit id="5afe86aa9575a5298ab1d62fb451e96c8518364c" translate="yes" xml:space="preserve">
          <source>The Performance Timing API provides an implementation of the &lt;a href=&quot;https://w3c.github.io/performance-timeline/&quot;&gt;W3C Performance Timeline&lt;/a&gt; specification. The purpose of the API is to support collection of high resolution performance metrics. This is the same Performance API as implemented in modern Web browsers.</source>
          <target state="translated">Performance Timing API提供了&lt;a href=&quot;https://w3c.github.io/performance-timeline/&quot;&gt;W3C Performance Timeline&lt;/a&gt;规范的实现。该API的目的是支持高分辨率性能指标的收集。这与现代Web浏览器中实现的Performance API相同。</target>
        </trans-unit>
        <trans-unit id="468e3b5bc8a586f299c6cc20a15e70c9d5278376" translate="yes" xml:space="preserve">
          <source>The REPL uses the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module to catch all uncaught exceptions for that REPL session.</source>
          <target state="translated">REPL使用&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;模块来捕获该REPL会话的所有未捕获的异常。</target>
        </trans-unit>
        <trans-unit id="8c0c176203397da1a1a71fa900815154369f9aaa" translate="yes" xml:space="preserve">
          <source>The TLS protocol allows clients to renegotiate certain aspects of the TLS session. Unfortunately, session renegotiation requires a disproportionate amount of server-side resources, making it a potential vector for denial-of-service attacks.</source>
          <target state="translated">TLS协议允许客户端对TLS会话的某些方面进行重新协商。不幸的是,会话重新协商需要大量的服务器端资源,使其成为拒绝服务攻击的潜在载体。</target>
        </trans-unit>
        <trans-unit id="7ca92e1a8e1a69feb461c9b09be13473fdf946f9" translate="yes" xml:space="preserve">
          <source>The TLS/SSL is a public/private key infrastructure (PKI). For most common cases, each client and server must have a &lt;em&gt;private key&lt;/em&gt;.</source>
          <target state="translated">TLS / SSL是公共/专用密钥基础结构（PKI）。在大多数情况下，每个客户端和服务器都必须具有一个&lt;em&gt;私钥&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="45b677ccb54927c1003b316f56811247ed5f73cf" translate="yes" xml:space="preserve">
          <source>The URL object has both a &lt;code&gt;toString()&lt;/code&gt; method and &lt;code&gt;href&lt;/code&gt; property that return string serializations of the URL. These are not, however, customizable in any way. The &lt;code&gt;url.format(URL[, options])&lt;/code&gt; method allows for basic customization of the output.</source>
          <target state="translated">URL对象同时具有 &lt;code&gt;toString()&lt;/code&gt; 方法和 &lt;code&gt;href&lt;/code&gt; 属性，这些属性返回URL的字符串序列化。但是，这些都不能以任何方式自定义。所述 &lt;code&gt;url.format(URL[, options])&lt;/code&gt; 方法允许输出的基本定制。</target>
        </trans-unit>
        <trans-unit id="6734cf0089aff7197648c315082814fcb791c116" translate="yes" xml:space="preserve">
          <source>The URL of the current module, as set in the constructor.</source>
          <target state="translated">当前模块的URL,在构造函数中设置。</target>
        </trans-unit>
        <trans-unit id="37eb375188b0bcfc1a769a5733533ca6a019e9c3" translate="yes" xml:space="preserve">
          <source>The UTF-16 encoding was used with &lt;a href=&quot;crypto#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest()&lt;/code&gt;&lt;/a&gt;. While the &lt;code&gt;hash.digest()&lt;/code&gt; method does allow an &lt;code&gt;encoding&lt;/code&gt; argument to be passed in, causing the method to return a string rather than a &lt;code&gt;Buffer&lt;/code&gt;, the UTF-16 encoding (e.g. &lt;code&gt;ucs&lt;/code&gt; or &lt;code&gt;utf16le&lt;/code&gt;) is not supported.</source>
          <target state="translated">UTF-16编码与&lt;a href=&quot;crypto#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest()&lt;/code&gt; 一起使用&lt;/a&gt;。尽管 &lt;code&gt;hash.digest()&lt;/code&gt; 方法确实允许传入 &lt;code&gt;encoding&lt;/code&gt; 参数，从而导致该方法返回字符串而不是 &lt;code&gt;Buffer&lt;/code&gt; ，但不支持UTF-16编码（例如 &lt;code&gt;ucs&lt;/code&gt; 或 &lt;code&gt;utf16le&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0707fea87e96404333ec61633fb2b6e0bae25d52" translate="yes" xml:space="preserve">
          <source>The V8 &lt;code&gt;BreakIterator&lt;/code&gt; API was used but the full ICU data set is not installed.</source>
          <target state="translated">使用了V8 &lt;code&gt;BreakIterator&lt;/code&gt; API，但未安装完整的ICU数据集。</target>
        </trans-unit>
        <trans-unit id="f32b99c9224cb051847362e060819b2b4c50c079" translate="yes" xml:space="preserve">
          <source>The V8 options available for a version of Node.js may be determined by running &lt;code&gt;node --v8-options&lt;/code&gt;.</source>
          <target state="translated">可通过运行 &lt;code&gt;node --v8-options&lt;/code&gt; 来确定可用于Node.js版本的V8 选项。</target>
        </trans-unit>
        <trans-unit id="1376e8a42784ef291882a0614dae5e571b33be74" translate="yes" xml:space="preserve">
          <source>The V8 platform used by this instance of Node.js does not support creating Workers. This is caused by lack of embedder support for Workers. In particular, this error will not occur with standard builds of Node.js.</source>
          <target state="translated">这个Node.js实例使用的V8平台不支持创建Worker。这是由于缺乏对Worker的嵌入器支持造成的。特别是,这个错误在Node.js的标准构建中不会发生。</target>
        </trans-unit>
        <trans-unit id="c7aa4e7f9c86be387463308a7aa43274019989e8" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;TextDecoder&lt;/code&gt; class. See the &lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt;&lt;code&gt;TextDecoder&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;TextDecoder&lt;/code&gt; 类。请参阅&lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt; &lt;code&gt;TextDecoder&lt;/code&gt; &lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="2c77f6c4c5072baf3631c95fcc538d6de133b14d" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;TextEncoder&lt;/code&gt; class. See the &lt;a href=&quot;util#util_class_util_textencoder&quot;&gt;&lt;code&gt;TextEncoder&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;TextEncoder&lt;/code&gt; 类。请参阅&lt;a href=&quot;util#util_class_util_textencoder&quot;&gt; &lt;code&gt;TextEncoder&lt;/code&gt; &lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="8477a4551f71f9abb4cb2cf82ea30bda851328a6" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URL&lt;/code&gt; class. See the &lt;a href=&quot;url#url_class_url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;URL&lt;/code&gt; 类。请参阅&lt;a href=&quot;url#url_class_url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="bbd5c13ca2d2f6a88b82622750c83bf478985f68" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; class. See the &lt;a href=&quot;url#url_class_urlsearchparams&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; 类。请参阅&lt;a href=&quot;url#url_class_urlsearchparams&quot;&gt; &lt;code&gt;URLSearchParams&lt;/code&gt; &lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="8f9bdac2cd843e3fcae98a8d5e15b498e52ce639" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; interface and the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module have similar purpose, but the purpose of the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module is more general, as it allows the customization of delimiter characters (&lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;). On the other hand, this API is designed purely for URL query strings.</source>
          <target state="translated">WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; 接口和&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;模块具有相似的用途，但是&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;模块的用途更为通用，因为它允许自定义分隔符（ &lt;code&gt;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;=&lt;/code&gt; ）。另一方面，此API纯粹是为URL查询字符串设计的。</target>
        </trans-unit>
        <trans-unit id="b05ee11c49a49c40741a840c0cf9acf09965de08" translate="yes" xml:space="preserve">
          <source>The WHATWG URL API</source>
          <target state="translated">WHATWG URL API</target>
        </trans-unit>
        <trans-unit id="303b85623f10249b2f174883bd7c66ad4a31337f" translate="yes" xml:space="preserve">
          <source>The WHATWG algorithm defines four &quot;percent-encode sets&quot; that describe ranges of characters that must be percent-encoded:</source>
          <target state="translated">WHATWG算法定义了四个 &quot;百分比编码集&quot;,描述了必须进行百分比编码的字符范围。</target>
        </trans-unit>
        <trans-unit id="1d0d078594f6a4548f54d230b92788f44dad0c47" translate="yes" xml:space="preserve">
          <source>The above applies &lt;em&gt;only&lt;/em&gt; to server connections, client connections are not automatically closed by workers, and disconnect does not wait for them to close before exiting.</source>
          <target state="translated">上述适用&lt;em&gt;只&lt;/em&gt;到服务器的连接，客户端连接不会自动关闭的工人，并断开不会等待他们退出之前关闭。</target>
        </trans-unit>
        <trans-unit id="ef4541443acbac2ca975fcae7469aa7ccd5761dd" translate="yes" xml:space="preserve">
          <source>The above example spawns a Worker thread for each &lt;code&gt;parse()&lt;/code&gt; call. In actual practice, use a pool of Workers instead for these kinds of tasks. Otherwise, the overhead of creating Workers would likely exceed their benefit.</source>
          <target state="translated">上面的示例为每个 &lt;code&gt;parse()&lt;/code&gt; 调用生成一个Worker线程。在实际实践中，使用工作者池代替这些任务。否则，创建Workers的开销可能会超出其收益。</target>
        </trans-unit>
        <trans-unit id="036ff3fbd8810caec3fac26115b25dea2af31c08" translate="yes" xml:space="preserve">
          <source>The above function &lt;code&gt;do_something_asynchronous()&lt;/code&gt; would perform its asynchronous action and then it would resolve or reject the deferred, thereby concluding the promise and freeing the deferred:</source>
          <target state="translated">上面的函数 &lt;code&gt;do_something_asynchronous()&lt;/code&gt; 将执行其异步操作，然后将解析或拒绝延迟的操作，从而完成promise并释放延迟的操作：</target>
        </trans-unit>
        <trans-unit id="1f204e8b1fde824583e61cdcdb79c21b74961dd3" translate="yes" xml:space="preserve">
          <source>The actual &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; implementation used during module instantiation is one that returns the modules linked during linking. Since at that point all modules would have been fully linked already, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; implementation is fully synchronous per specification.</source>
          <target state="translated">在模块实例化期间使用的实际&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;实现是一种返回在链接期间链接的模块的实现。由于到那时所有模块都已经被完全链接，因此&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;实现根据规范是完全同步的。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
