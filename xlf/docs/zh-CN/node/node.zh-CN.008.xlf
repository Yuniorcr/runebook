<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="7185c658579d422e7eba6cdc07f4b4cbe8004f1d" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;bytesRead&lt;/code&gt; and &lt;code&gt;buffers&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d137547d5ca92dc63e7c2007a92f1e7211e167ad" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;bytesWritten&lt;/code&gt; and &lt;code&gt;buffer&lt;/code&gt; properties.</source>
          <target state="translated">如果将此方法作为其&lt;a href=&quot;util#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt;版本调用，则它将返回具有 &lt;code&gt;bytesWritten&lt;/code&gt; 和 &lt;code&gt;buffer&lt;/code&gt; 属性的 &lt;code&gt;Object&lt;/code&gt; 的 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd5bb143ee298fdd24e036558635695a1e0cd676" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;hostname&lt;/code&gt; and &lt;code&gt;service&lt;/code&gt; properties.</source>
          <target state="translated">如果将此方法作为其&lt;a href=&quot;util#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt;版本调用，它将返回一个带有 &lt;code&gt;hostname&lt;/code&gt; 和 &lt;code&gt;service&lt;/code&gt; 属性的 &lt;code&gt;Object&lt;/code&gt; 的 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="603337fd667fc9ebe65d8742a13478c7c173636d" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;publicKey&lt;/code&gt; and &lt;code&gt;privateKey&lt;/code&gt; properties.</source>
          <target state="translated">如果将此方法作为其&lt;a href=&quot;util#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt;版本调用，它将返回带有 &lt;code&gt;publicKey&lt;/code&gt; 和 &lt;code&gt;privateKey&lt;/code&gt; 属性的 &lt;code&gt;Object&lt;/code&gt; 的 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3f19615a76df308a4eaaa08102fe8029d4cd7da" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; properties. The returned &lt;code&gt;ChildProcess&lt;/code&gt; instance is attached to the &lt;code&gt;Promise&lt;/code&gt; as a &lt;code&gt;child&lt;/code&gt; property. In case of an error (including any error resulting in an exit code other than 0), a rejected promise is returned, with the same &lt;code&gt;error&lt;/code&gt; object given in the callback, but with two additional properties &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="translated">如果将此方法作为其&lt;a href=&quot;util#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt;版本调用，它将返回具有 &lt;code&gt;stdout&lt;/code&gt; 和 &lt;code&gt;stderr&lt;/code&gt; 属性的 &lt;code&gt;Object&lt;/code&gt; 的 &lt;code&gt;Promise&lt;/code&gt; 。返回的 &lt;code&gt;ChildProcess&lt;/code&gt; 实例作为 &lt;code&gt;child&lt;/code&gt; 属性附加到 &lt;code&gt;Promise&lt;/code&gt; 。如果发生错误（包括导致退出代码不为0的任何错误），则返回被拒绝的promise，在回调中给出相同的 &lt;code&gt;error&lt;/code&gt; 对象，但具有两个附加属性 &lt;code&gt;stdout&lt;/code&gt; 和 &lt;code&gt;stderr&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="325b0754bdd6596fd481b9c1fd1a89b41adcb29d" translate="yes" xml:space="preserve">
          <source>If this option is chosen, ICU is disabled and most internationalization features mentioned above will be &lt;strong&gt;unavailable&lt;/strong&gt; in the resulting &lt;code&gt;node&lt;/code&gt; binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19ad792e4d182ce79c59a9ca23b96f01cbba405" translate="yes" xml:space="preserve">
          <source>If this option is chosen, most internationalization features mentioned above will be &lt;strong&gt;unavailable&lt;/strong&gt; in the resulting &lt;code&gt;node&lt;/code&gt; binary.</source>
          <target state="translated">如果选择此选项，则上面提到的大多数国际化功能将在结果 &lt;code&gt;node&lt;/code&gt; 二进制文件中&lt;strong&gt;不可用&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="500c44aa740b1f808b7a0f2ab5d42a89495c80b0" translate="yes" xml:space="preserve">
          <source>If this program is run with &lt;code&gt;NODE_DEBUG=foo&lt;/code&gt; in the environment, then it will output something like:</source>
          <target state="translated">如果此程序在环境中以 &lt;code&gt;NODE_DEBUG=foo&lt;/code&gt; 运行，则它将输出如下内容：</target>
        </trans-unit>
        <trans-unit id="ae04778b2127a4288d498c5fee83b1c180563316" translate="yes" xml:space="preserve">
          <source>If this thread was spawned as a &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;, this will be a &lt;a href=&quot;#worker_threads_class_messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; allowing communication with the parent thread. Messages sent using &lt;code&gt;parentPort.postMessage()&lt;/code&gt; will be available in the parent thread using &lt;code&gt;worker.on('message')&lt;/code&gt;, and messages sent from the parent thread using &lt;code&gt;worker.postMessage()&lt;/code&gt; will be available in this thread using &lt;code&gt;parentPort.on('message')&lt;/code&gt;.</source>
          <target state="translated">如果此线程是作为&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;产生的，则它将是一个&lt;a href=&quot;#worker_threads_class_messageport&quot;&gt; &lt;code&gt;MessagePort&lt;/code&gt; ,&lt;/a&gt;允许与父线程进行通信。使用 &lt;code&gt;parentPort.postMessage()&lt;/code&gt; 发送的消息将在使用 &lt;code&gt;worker.on('message')&lt;/code&gt; 的父线程中可用，而使用 &lt;code&gt;worker.postMessage()&lt;/code&gt; 从父线程发送的消息将在该线程中使用 &lt;code&gt;parentPort.on('message')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc56c6fa0ffaae3cb37166a046e6a592fac511fd" translate="yes" xml:space="preserve">
          <source>If this was in a folder at &lt;code&gt;./some-library&lt;/code&gt;, then &lt;code&gt;require('./some-library')&lt;/code&gt; would attempt to load &lt;code&gt;./some-library/lib/some-library.js&lt;/code&gt;.</source>
          <target state="translated">如果它位于 &lt;code&gt;./some-library&lt;/code&gt; 的文件夹中，则 &lt;code&gt;require('./some-library')&lt;/code&gt; 将尝试加载 &lt;code&gt;./some-library/lib/some-library.js&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f24447a04296622991f6bf6fd22ce1eff8075cb0" translate="yes" xml:space="preserve">
          <source>If true, the &lt;code&gt;Immediate&lt;/code&gt; object will keep the Node.js event loop active.</source>
          <target state="translated">如果为true，则 &lt;code&gt;Immediate&lt;/code&gt; 对象将使Node.js事件循环保持活动状态。</target>
        </trans-unit>
        <trans-unit id="6bfdfe9d5a5d4ec04917fff9485b8abe04f4523b" translate="yes" xml:space="preserve">
          <source>If true, the &lt;code&gt;Timeout&lt;/code&gt; object will keep the Node.js event loop active.</source>
          <target state="translated">如果为true，则 &lt;code&gt;Timeout&lt;/code&gt; 对象将使Node.js事件循环保持活动状态。</target>
        </trans-unit>
        <trans-unit id="4d30f4ae940d81fef9d58173f937c6e90488a310" translate="yes" xml:space="preserve">
          <source>If using Perfect Forward Secrecy using &lt;code&gt;ECDHE&lt;/code&gt;, Diffie-Hellman parameters are not required and a default ECDHE curve will be used. The &lt;code&gt;ecdhCurve&lt;/code&gt; property can be used when creating a TLS Server to specify the list of names of supported curves to use, see &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="translated">如果通过 &lt;code&gt;ECDHE&lt;/code&gt; 使用完全正向保密，则不需要Diffie-Hellman参数，并且将使用默认的ECDHE曲线。该 &lt;code&gt;ecdhCurve&lt;/code&gt; 属性可以创建一个TLS服务器指定支持的曲线，使用的名称列表时，可以使用，见&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; &lt;/a&gt;获取更多信息。</target>
        </trans-unit>
        <trans-unit id="7141d84e2c2fdb717376d2b2569b6326aa7d2535" translate="yes" xml:space="preserve">
          <source>If using perfect forward secrecy using &lt;code&gt;ECDHE&lt;/code&gt;, Diffie-Hellman parameters are not required and a default ECDHE curve will be used. The &lt;code&gt;ecdhCurve&lt;/code&gt; property can be used when creating a TLS Server to specify the list of names of supported curves to use, see &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f435cf016bb3848af3be13125a0963095befa409" translate="yes" xml:space="preserve">
          <source>If wait is &lt;code&gt;true&lt;/code&gt;, will block until a client has connected to the inspect port and flow control has been passed to the debugger client.</source>
          <target state="translated">如果wait为 &lt;code&gt;true&lt;/code&gt; ，则将阻塞，直到客户端已连接到检查端口并且流控制已传递给调试器客户端为止。</target>
        </trans-unit>
        <trans-unit id="2d91ae8c7344f438f4b68baa4585ffcdbd09f34f" translate="yes" xml:space="preserve">
          <source>If you need to keep using callback-based API, or your code assumes a custom thenable implementation, use the &lt;a href=&quot;#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; class to associate the asynchronous operation with the correct execution context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121d2a133df529636a3133c7f19553410022ce10" translate="yes" xml:space="preserve">
          <source>If your code is callback-based, it is enough to promisify it with &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;, so it starts working with native promises.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff92bf6b6790ad5534e9adfe6cd542093ec41214" translate="yes" xml:space="preserve">
          <source>If, after processing all given &lt;code&gt;path&lt;/code&gt; segments, an absolute path has not yet been generated, the current working directory is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb55778c3d32ddfa125fd33521937cb25ae4bdce" translate="yes" xml:space="preserve">
          <source>If, within an async function, only one &lt;code&gt;await&lt;/code&gt; call is to run within a context, the following pattern should be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868930280894191b54d63d2127ac6fdebf557223" translate="yes" xml:space="preserve">
          <source>Immediate</source>
          <target state="translated">Immediate</target>
        </trans-unit>
        <trans-unit id="ef70f1951457da5e8c2ceb794366acfb2b9f1c46" translate="yes" xml:space="preserve">
          <source>Immediately close the session. All pending message callbacks will be called with an error. &lt;a href=&quot;#inspector_session_connect&quot;&gt;&lt;code&gt;session.connect()&lt;/code&gt;&lt;/a&gt; will need to be called to be able to send messages again. Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.</source>
          <target state="translated">立即关闭会话。所有待处理的消息回调将被调用，并显示一个错误。需要调用&lt;a href=&quot;#inspector_session_connect&quot;&gt; &lt;code&gt;session.connect()&lt;/code&gt; &lt;/a&gt;才能再次发送消息。重新连接的会话将丢失所有检查器状态，例如启用的代理或配置的断点。</target>
        </trans-unit>
        <trans-unit id="a99a34a2338aa3ca62a62f452af4cdab32edc49b" translate="yes" xml:space="preserve">
          <source>Immediately terminates the &lt;code&gt;Http2Session&lt;/code&gt; and the associated &lt;code&gt;net.Socket&lt;/code&gt; or &lt;code&gt;tls.TLSSocket&lt;/code&gt;.</source>
          <target state="translated">立即终止 &lt;code&gt;Http2Session&lt;/code&gt; 和关联的 &lt;code&gt;net.Socket&lt;/code&gt; 或 &lt;code&gt;tls.TLSSocket&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7830d9e83bdb571cca1e50f542e8516184aeb2bf" translate="yes" xml:space="preserve">
          <source>Implementation considerations</source>
          <target state="translated">执行方面的考虑</target>
        </trans-unit>
        <trans-unit id="634778886a41465d653b4d3a526333668ae37b90" translate="yes" xml:space="preserve">
          <source>Implementation does not test the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots&quot;&gt;&lt;code&gt;[[Prototype]]&lt;/code&gt;&lt;/a&gt; of objects.</source>
          <target state="translated">实现不测试对象的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots&quot;&gt; &lt;code&gt;[[Prototype]]&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ebd8293192193a3da2c48647fd3b6fba3cc9add9" translate="yes" xml:space="preserve">
          <source>Implementations of this function must avoid making N-API calls that execute JavaScript or interact with JavaScript objects. N-API calls should be in the &lt;code&gt;napi_async_complete_callback&lt;/code&gt; instead. Do not use the &lt;code&gt;napi_env&lt;/code&gt; parameter as it will likely result in execution of JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6d9cd007a22716a471f704b1a6cc1b7798fc03" translate="yes" xml:space="preserve">
          <source>Implementations of this type of function should avoid making any N-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make N-API calls should be made in &lt;code&gt;napi_async_complete_callback&lt;/code&gt; instead. Avoid using the &lt;code&gt;napi_env&lt;/code&gt; parameter in the execute callback as it will likely execute JavaScript.</source>
          <target state="translated">此类函数的实现应避免进行任何可能导致JavaScript执行或与JavaScript对象交互的N-API调用。通常，任何需要进行N-API调用的代码 &lt;code&gt;napi_async_complete_callback&lt;/code&gt; 改为在napi_async_complete_callback中进行。避免在execute回调中使用 &lt;code&gt;napi_env&lt;/code&gt; 参数，因为它可能会执行JavaScript。</target>
        </trans-unit>
        <trans-unit id="faf48c742a3c8cab6d288870f7e9087dc4b107e3" translate="yes" xml:space="preserve">
          <source>Implementing a Duplex Stream</source>
          <target state="translated">实现双工流</target>
        </trans-unit>
        <trans-unit id="db85aacb4826a9682bbc4755f7b18287b8212229" translate="yes" xml:space="preserve">
          <source>Implementing a Readable Stream</source>
          <target state="translated">实现可读流</target>
        </trans-unit>
        <trans-unit id="a5a17668a54393ad9d8a2818f383b3289899b323" translate="yes" xml:space="preserve">
          <source>Implementing a Transform Stream</source>
          <target state="translated">实现一个转换流</target>
        </trans-unit>
        <trans-unit id="03961dad0ca35871550bb64b77b7602fe30a905c" translate="yes" xml:space="preserve">
          <source>Implementing a Writable Stream</source>
          <target state="translated">实现一个可写流</target>
        </trans-unit>
        <trans-unit id="facde054e9e2d009e7af73a9afa36e32825f5448" translate="yes" xml:space="preserve">
          <source>Implementing a duplex stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3a6269a6abcc8faa06ed8949790459f3fb4dcb" translate="yes" xml:space="preserve">
          <source>Implementing a readable stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8937f8c725f3f756c80a6fc4c454f66ce4301e3" translate="yes" xml:space="preserve">
          <source>Implementing a transform stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac478c96bba4b13f55b149b0bc50ffaa26643e6" translate="yes" xml:space="preserve">
          <source>Implementing a writable stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24158ac8b52526396a1d846f3f7fe2a89a3207a1" translate="yes" xml:space="preserve">
          <source>Implementors should not override this method, but instead implement &lt;a href=&quot;#stream_readable_destroy_err_callback&quot;&gt;&lt;code&gt;readable._destroy()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414c6b495e83ad2649c91b0478470c80a912e404" translate="yes" xml:space="preserve">
          <source>Implementors should not override this method, but instead implement &lt;a href=&quot;#stream_writable_destroy_err_callback&quot;&gt;&lt;code&gt;writable._destroy()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b72b192149e114c030ffa08bb6d7f33fa1da0cd" translate="yes" xml:space="preserve">
          <source>Implications of ABI Stability</source>
          <target state="translated">ABI稳定性的影响</target>
        </trans-unit>
        <trans-unit id="c58283f97ee77608c6bf6b2d12793df5d7e1d959" translate="yes" xml:space="preserve">
          <source>Implications of ABI stability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5868306e35f5ed89a827d7088b357d35fdb7d9c" translate="yes" xml:space="preserve">
          <source>Implicit Binding</source>
          <target state="translated">隐性约束</target>
        </trans-unit>
        <trans-unit id="1755f85cb8b44fb3483bbcb74852f951b95f7a93" translate="yes" xml:space="preserve">
          <source>Implicit binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c43897c9e7ad17a3fff4ee301c220a1f8ca4ce" translate="yes" xml:space="preserve">
          <source>Implicit binding routes thrown errors and &lt;code&gt;'error'&lt;/code&gt; events to the &lt;code&gt;Domain&lt;/code&gt;'s &lt;code&gt;'error'&lt;/code&gt; event, but does not register the &lt;code&gt;EventEmitter&lt;/code&gt; on the &lt;code&gt;Domain&lt;/code&gt;. Implicit binding only takes care of thrown errors and &lt;code&gt;'error'&lt;/code&gt; events.</source>
          <target state="translated">隐式绑定将抛出的错误和 &lt;code&gt;'error'&lt;/code&gt; 事件路由到 &lt;code&gt;Domain&lt;/code&gt; 的 &lt;code&gt;'error'&lt;/code&gt; 事件，但未在 &lt;code&gt;Domain&lt;/code&gt; 上注册 &lt;code&gt;EventEmitter&lt;/code&gt; 。隐式绑定仅处理引发的错误和 &lt;code&gt;'error'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="7eccc8d808af7ec8041e3741f9d5bd71307f86ba" translate="yes" xml:space="preserve">
          <source>Implicit conversion of variable value to string is deprecated.</source>
          <target state="translated">隐式将变量值转换为字符串已被废弃。</target>
        </trans-unit>
        <trans-unit id="fac758850e503d7a4b5403c1e169e629ed31d72d" translate="yes" xml:space="preserve">
          <source>Importing Web Assembly modules is supported under the &lt;code&gt;--experimental-wasm-modules&lt;/code&gt; flag, allowing any &lt;code&gt;.wasm&lt;/code&gt; files to be imported as normal modules while also supporting their module imports.</source>
          <target state="translated">&lt;code&gt;--experimental-wasm-modules&lt;/code&gt; 标志下支持导入Web Assembly模块，允许将任何 &lt;code&gt;.wasm&lt;/code&gt; 文件作为常规模块导入，同时还支持其模块导入。</target>
        </trans-unit>
        <trans-unit id="5d0995ca6d1b678abda226f52f7ccf1e681292bd" translate="yes" xml:space="preserve">
          <source>Importing assert directly was not recommended as the exposed functions use loose equality checks. The deprecation was revoked because use of the &lt;code&gt;assert&lt;/code&gt; module is not discouraged, and the deprecation caused developer confusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7345227f7378a415d72e584bcb83fb5f70dfbf9d" translate="yes" xml:space="preserve">
          <source>Importing assert directly was not recommended as the exposed functions use loose equality checks. The deprecation was revoked because use of the &lt;code&gt;assert&lt;/code&gt; module is not discouraged, and the deprecation caused end user confusion.</source>
          <target state="translated">不建议直接导入断言，因为公开的函数使用松散的相等性检查。由于不鼓励使用 &lt;code&gt;assert&lt;/code&gt; 模块，因此取消了弃用，并且弃用导致最终用户感到困惑。</target>
        </trans-unit>
        <trans-unit id="719f27a57e84457bcd0681fc9a845a1f86dcefe3" translate="yes" xml:space="preserve">
          <source>Impose new restrictions on &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, throwing more appropriate errors in cases when we cannot reasonably handle the input values.</source>
          <target state="translated">对 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;end&lt;/code&gt; 施加新的限制，在无法合理处理输入值的情况下引发更适当的错误。</target>
        </trans-unit>
        <trans-unit id="fc0a6a13b4155e379d15b548250d87be9841ca3e" translate="yes" xml:space="preserve">
          <source>In &quot;old&quot; streams mode the &lt;code&gt;stdin&lt;/code&gt; stream is paused by default, so one must call &lt;code&gt;process.stdin.resume()&lt;/code&gt; to read from it. Note also that calling &lt;code&gt;process.stdin.resume()&lt;/code&gt; itself would switch stream to &quot;old&quot; mode.</source>
          <target state="translated">在&amp;ldquo;旧&amp;rdquo;流模式下，默认情况下 &lt;code&gt;stdin&lt;/code&gt; 流已暂停，因此必须调用 &lt;code&gt;process.stdin.resume()&lt;/code&gt; 进行读取。还要注意，调用 &lt;code&gt;process.stdin.resume()&lt;/code&gt; 本身会将流切换到&amp;ldquo;旧&amp;rdquo;模式。</target>
        </trans-unit>
        <trans-unit id="83410f354c55a4241f9c563148181123808a776c" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, &lt;code&gt;process.umask(mask)&lt;/code&gt; will throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27679f0db56c1c9325293a60e2506baf9182ffc5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this function stops the current thread rather than the current process.</source>
          <target state="translated">在&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;线程中，此函数将停止当前线程，而不是当前进程。</target>
        </trans-unit>
        <trans-unit id="2b5b31a009a869ce0f6f2aa3aa25bde8d5d67b27" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;entry.js&lt;/code&gt; script:</source>
          <target state="translated">在 &lt;code&gt;entry.js&lt;/code&gt; 脚本中：</target>
        </trans-unit>
        <trans-unit id="83ea6fb909458a63c93528b9278d2aea405239a1" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;myobject.cc&lt;/code&gt;, implement the various methods that are to be exposed. Below, the method &lt;code&gt;plusOne()&lt;/code&gt; is exposed by adding it to the constructor's prototype:</source>
          <target state="translated">在 &lt;code&gt;myobject.cc&lt;/code&gt; 中，实现要公开的各种方法。下面，通过将方法 &lt;code&gt;plusOne()&lt;/code&gt; 添加到构造函数的原型中来进行展示：</target>
        </trans-unit>
        <trans-unit id="b569f0f01f808badd954c94c4b5ec2b3df4219a8" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;myobject.h&lt;/code&gt;, a new public method is added to allow access to private values after unwrapping the object.</source>
          <target state="translated">在 &lt;code&gt;myobject.h&lt;/code&gt; 中，添加了一个新的public方法，以允许在展开对象后访问私有值。</target>
        </trans-unit>
        <trans-unit id="0bd614b7bbedcda99d367f704661d8a38b80d19b" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;myobject.h&lt;/code&gt;, the static method &lt;code&gt;NewInstance()&lt;/code&gt; is added to handle instantiating the object. This method takes the place of using &lt;code&gt;new&lt;/code&gt; in JavaScript:</source>
          <target state="translated">在 &lt;code&gt;myobject.h&lt;/code&gt; 中，添加了静态方法 &lt;code&gt;NewInstance()&lt;/code&gt; 来处理实例化该对象。此方法代替了在JavaScript 中使用 &lt;code&gt;new&lt;/code&gt; 的方法：</target>
        </trans-unit>
        <trans-unit id="8b7f16901fb8e1d9d147d2658de11399ce8f4cc3" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;recursive&lt;/code&gt; mode, the callback now receives the first created path as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7911bdacbc7cdb4fd6e24333b5a68b6b0e94c6" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;recursive&lt;/code&gt; mode, the first created path is returned now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a521caf867f14b672bcba06c835d82f3666953" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;strict&lt;/code&gt; mode, &lt;code&gt;assert&lt;/code&gt; functions use the comparison in the corresponding strict functions. For example, &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt; will behave like &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在 &lt;code&gt;strict&lt;/code&gt; 模式下， &lt;code&gt;assert&lt;/code&gt; 函数在相应的严格函数中使用比较。例如，&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; 的&lt;/a&gt;行为类似于&lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepStrictEqual()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cbda2fb906abaf4d990f04c00aee85dda9e4e31b" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;strict&lt;/code&gt; mode, error messages for objects display a diff. In legacy mode, error messages for objects display the objects, often truncated.</source>
          <target state="translated">在 &lt;code&gt;strict&lt;/code&gt; 模式下，对象的错误消息显示差异。在传统模式下，对象的错误消息显示对象，通常将其截断。</target>
        </trans-unit>
        <trans-unit id="43a752735db76822b3df812a4e23e21c8db8bd00" translate="yes" xml:space="preserve">
          <source>In HTTP/2, the request path, host name, protocol, and method are represented as special headers prefixed with the &lt;code&gt;:&lt;/code&gt; character (e.g. &lt;code&gt;':path'&lt;/code&gt;). These special headers will be included in the &lt;code&gt;request.headers&lt;/code&gt; object. Care must be taken not to inadvertently modify these special headers or errors may occur. For instance, removing all headers from the request will cause errors to occur:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cedb49bba43339d6f4d8ab4643cc70bc8770d4d" translate="yes" xml:space="preserve">
          <source>In HTTP/2, the request path, hostname, protocol, and method are represented as special headers prefixed with the &lt;code&gt;:&lt;/code&gt; character (e.g. &lt;code&gt;':path'&lt;/code&gt;). These special headers will be included in the &lt;code&gt;request.headers&lt;/code&gt; object. Care must be taken not to inadvertently modify these special headers or errors may occur. For instance, removing all headers from the request will cause errors to occur:</source>
          <target state="translated">在HTTP / 2中，请求路径，主机名，协议和方法表示为以 &lt;code&gt;:&lt;/code&gt; 字符为前缀的特殊标头（例如 &lt;code&gt;':path'&lt;/code&gt; ）。这些特殊的标头将包含在 &lt;code&gt;request.headers&lt;/code&gt; 对象中。必须注意不要无意间修改这些特殊标题，否则可能会发生错误。例如，从请求中删除所有标头将导致发生错误：</target>
        </trans-unit>
        <trans-unit id="e2cd10f4ffa78b420a67631c95f5747ddf8e5371" translate="yes" xml:space="preserve">
          <source>In Node.js 0.10, the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; class was added. For backward compatibility with older Node.js programs, &lt;code&gt;Readable&lt;/code&gt; streams switch into &quot;flowing mode&quot; when a &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; event handler is added, or when the &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method is called. The effect is that, even when not using the new &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt; method and &lt;a href=&quot;#stream_event_readable&quot;&gt;&lt;code&gt;'readable'&lt;/code&gt;&lt;/a&gt; event, it is no longer necessary to worry about losing &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; chunks.</source>
          <target state="translated">在Node.js 0.10中，添加了&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;类。为了与较旧的Node.js程序向后兼容，当添加&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;事件处理程序或调用&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt;方法时， &lt;code&gt;Readable&lt;/code&gt; 流将切换为&amp;ldquo;流模式&amp;rdquo; 。结果是，即使不使用新的&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;stream.read()&lt;/code&gt; &lt;/a&gt;方法和&lt;a href=&quot;#stream_event_readable&quot;&gt; &lt;code&gt;'readable'&lt;/code&gt; &lt;/a&gt;事件，也不必担心丢失&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;块。</target>
        </trans-unit>
        <trans-unit id="d2907f0887fd67060d1c8b859ffab65821bd5c8a" translate="yes" xml:space="preserve">
          <source>In V8, a context is an execution environment that allows separate, unrelated, JavaScript applications to run in a single instance of V8. You must explicitly specify the context in which you want any JavaScript code to be run.</source>
          <target state="translated">在V8中,上下文是一种执行环境,它允许单独的、不相关的JavaScript应用程序在V8的单个实例中运行。你必须明确地指定要运行任何JavaScript代码的上下文。</target>
        </trans-unit>
        <trans-unit id="9f608ecc99c06cfa50baaffc2c3cd8fff338f4fc" translate="yes" xml:space="preserve">
          <source>In a successful request, the following events will be emitted in the following order:</source>
          <target state="translated">在一个成功的请求中,以下事件将按以下顺序发出。</target>
        </trans-unit>
        <trans-unit id="cf790810b2507f884c03af267a9c95a2dbc7ba26" translate="yes" xml:space="preserve">
          <source>In a worker this sends a message to the master. It is identical to &lt;code&gt;process.send()&lt;/code&gt;.</source>
          <target state="translated">在工作者中，这会向主服务器发送一条消息。它与 &lt;code&gt;process.send()&lt;/code&gt; 相同。</target>
        </trans-unit>
        <trans-unit id="89f9cefb5509de84f4d3b8e9ae50db89a7da0b91" translate="yes" xml:space="preserve">
          <source>In a worker, &lt;code&gt;process.disconnect&lt;/code&gt; exists, but it is not this function; it is &lt;a href=&quot;child_process#child_process_subprocess_disconnect&quot;&gt;&lt;code&gt;disconnect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在工作 &lt;code&gt;process.disconnect&lt;/code&gt; 存在process.disconnect，但这不是此功能；它是&lt;a href=&quot;child_process#child_process_subprocess_disconnect&quot;&gt; &lt;code&gt;disconnect()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6635bab64752609670a0d11b7b0ac6ba30c036b1" translate="yes" xml:space="preserve">
          <source>In a worker, &lt;code&gt;process.kill()&lt;/code&gt; exists, but it is not this function; it is &lt;a href=&quot;process#process_process_kill_pid_signal&quot;&gt;&lt;code&gt;kill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在工作程序中，存在 &lt;code&gt;process.kill()&lt;/code&gt; ，但它不是此函数；它是&lt;a href=&quot;process#process_process_kill_pid_signal&quot;&gt; &lt;code&gt;kill()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="188dc51b267f1ce409fcd61f18bf1777940cfa1c" translate="yes" xml:space="preserve">
          <source>In a worker, this function will close all servers, wait for the &lt;code&gt;'close'&lt;/code&gt; event on those servers, and then disconnect the IPC channel.</source>
          <target state="translated">在工作服务器中，此功能将关闭所有服务器，等待这些服务器上的 &lt;code&gt;'close'&lt;/code&gt; 事件，然后断开IPC通道。</target>
        </trans-unit>
        <trans-unit id="c45585efffb25f706fc168893be3eee9fb3732c3" translate="yes" xml:space="preserve">
          <source>In accordance with browser conventions, all properties of &lt;code&gt;URL&lt;/code&gt; objects are implemented as getters and setters on the class prototype, rather than as data properties on the object itself. Thus, unlike &lt;a href=&quot;#url_legacy_urlobject&quot;&gt;legacy &lt;code&gt;urlObject&lt;/code&gt;&lt;/a&gt;s, using the &lt;code&gt;delete&lt;/code&gt; keyword on any properties of &lt;code&gt;URL&lt;/code&gt; objects (e.g. &lt;code&gt;delete myURL.protocol&lt;/code&gt;, &lt;code&gt;delete myURL.pathname&lt;/code&gt;, etc) has no effect but will still return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">根据浏览器约定， &lt;code&gt;URL&lt;/code&gt; 对象的所有属性都实现为类原型上的getter和setter，而不是对象本身的数据属性。因此，与&lt;a href=&quot;#url_legacy_urlobject&quot;&gt;旧版 &lt;code&gt;urlObject&lt;/code&gt; &lt;/a&gt;不同，在 &lt;code&gt;URL&lt;/code&gt; 对象的任何属性（例如 &lt;code&gt;delete myURL.protocol&lt;/code&gt; ， &lt;code&gt;delete myURL.pathname&lt;/code&gt; 等）上使用 &lt;code&gt;delete&lt;/code&gt; 关键字无效，但仍会返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c7734f0b3567b3c7b9193631a31766ec4ead09b" translate="yes" xml:space="preserve">
          <source>In addition to being accessible through &lt;code&gt;util.inspect.custom&lt;/code&gt;, this symbol is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for&quot;&gt;registered globally&lt;/a&gt; and can be accessed in any environment as &lt;code&gt;Symbol.for('nodejs.util.inspect.custom')&lt;/code&gt;.</source>
          <target state="translated">除了可以通过 &lt;code&gt;util.inspect.custom&lt;/code&gt; 进行访问之外，该符号是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for&quot;&gt;全局注册的，&lt;/a&gt;并且可以在任何环境中作为 &lt;code&gt;Symbol.for('nodejs.util.inspect.custom')&lt;/code&gt; 进行访问。</target>
        </trans-unit>
        <trans-unit id="bb42d431dbb8dd60cb5da5552ac7c99e0c05dcb2" translate="yes" xml:space="preserve">
          <source>In addition to being accessible through &lt;code&gt;util.promisify.custom&lt;/code&gt;, this symbol is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for&quot;&gt;registered globally&lt;/a&gt; and can be accessed in any environment as &lt;code&gt;Symbol.for('nodejs.util.promisify.custom')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a017a14a50b8af7f35bbfe35a7128002e7b0433" translate="yes" xml:space="preserve">
          <source>In addition to defining an alias, subpaths not defined by &lt;code&gt;&quot;exports&quot;&lt;/code&gt; will throw when an attempt is made to import them:</source>
          <target state="translated">除了定义别名之外，当尝试导入它们时，未由 &lt;code&gt;&quot;exports&quot;&lt;/code&gt; 定义的子路径也会抛出：</target>
        </trans-unit>
        <trans-unit id="87788a1c64b835765d4d327b936fd17de0ba8095" translate="yes" xml:space="preserve">
          <source>In addition to new &lt;code&gt;Readable&lt;/code&gt; streams switching into flowing mode, pre-0.10 style streams can be wrapped in a &lt;code&gt;Readable&lt;/code&gt; class using the &lt;a href=&quot;#stream_readable_wrap_stream&quot;&gt;&lt;code&gt;readable.wrap()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">除了新的 &lt;code&gt;Readable&lt;/code&gt; 流切换为流动模式外，还可以使用&lt;a href=&quot;#stream_readable_wrap_stream&quot;&gt; &lt;code&gt;readable.wrap()&lt;/code&gt; &lt;/a&gt;方法将0.10之前的样式流包装到 &lt;code&gt;Readable&lt;/code&gt; 类中。</target>
        </trans-unit>
        <trans-unit id="531fe4364b08e0a91d004f6c008a9907fd321d5e" translate="yes" xml:space="preserve">
          <source>In addition to returning the resolved file URL value, the resolve hook also returns a &lt;code&gt;format&lt;/code&gt; property specifying the module format of the resolved module. This can be one of the following:</source>
          <target state="translated">除了返回解析的文件URL值之外，解析挂钩还返回一个 &lt;code&gt;format&lt;/code&gt; 属性，该属性指定解析模块的模块格式。可以是以下之一：</target>
        </trans-unit>
        <trans-unit id="c9b72f820929e77bac018c0ca5b3cc4d77951c0c" translate="yes" xml:space="preserve">
          <source>In addition to wrapping and returning C++ objects, it is possible to pass wrapped objects around by unwrapping them with the Node.js helper function &lt;code&gt;node::ObjectWrap::Unwrap&lt;/code&gt;. The following examples shows a function &lt;code&gt;add()&lt;/code&gt; that can take two &lt;code&gt;MyObject&lt;/code&gt; objects as input arguments:</source>
          <target state="translated">除了包装和返回C ++对象之外，还可以通过使用Node.js帮助器函数 &lt;code&gt;node::ObjectWrap::Unwrap&lt;/code&gt; 包装的对象来传递包装的对象。下面的示例显示一个函数 &lt;code&gt;add()&lt;/code&gt; ，该函数可以将两个 &lt;code&gt;MyObject&lt;/code&gt; 对象用作输入参数：</target>
        </trans-unit>
        <trans-unit id="3250b3c9156a53b11995d8b61bc7651346b38dd6" translate="yes" xml:space="preserve">
          <source>In an earlier version of the Node.js &lt;code&gt;cluster&lt;/code&gt;, a boolean property with the name &lt;code&gt;suicide&lt;/code&gt; was added to the &lt;code&gt;Worker&lt;/code&gt; object. The intent of this property was to provide an indication of how and why the &lt;code&gt;Worker&lt;/code&gt; instance exited. In Node.js 6.0.0, the old property was deprecated and replaced with a new &lt;a href=&quot;cluster#cluster_worker_exitedafterdisconnect&quot;&gt;&lt;code&gt;worker.exitedAfterDisconnect&lt;/code&gt;&lt;/a&gt; property. The old property name did not precisely describe the actual semantics and was unnecessarily emotion-laden.</source>
          <target state="translated">在Node.js &lt;code&gt;cluster&lt;/code&gt; 的早期版本中，将名为 &lt;code&gt;suicide&lt;/code&gt; 的布尔属性添加到 &lt;code&gt;Worker&lt;/code&gt; 对象。此属性的目的是提供有关 &lt;code&gt;Worker&lt;/code&gt; 实例如何以及为何退出的指示。在Node.js 6.0.0中，旧的属性已弃用，并用新的&lt;a href=&quot;cluster#cluster_worker_exitedafterdisconnect&quot;&gt; &lt;code&gt;worker.exitedAfterDisconnect&lt;/code&gt; &lt;/a&gt;属性代替。旧的属性名称无法准确描述实际的语义，并且不必要地充满了情感。</target>
        </trans-unit>
        <trans-unit id="45f34b6c8dddeb170b4ea2c2a91a4f0f3bf29b30" translate="yes" xml:space="preserve">
          <source>In asynchronous code, the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event is emitted when the list of unhandled rejections grows, and the &lt;code&gt;'rejectionHandled'&lt;/code&gt; event is emitted when the list of unhandled rejections shrinks.</source>
          <target state="translated">在异步代码中，当未处理拒绝的列表增加时，将发出 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 事件，而当未处理拒绝的列表缩小时，将发出 &lt;code&gt;'rejectionHandled'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="30fe6e0dbb3ad0e70ec0d1b125ead1922456d17e" translate="yes" xml:space="preserve">
          <source>In browsers, the top-level scope is the global scope. This means that within the browser &lt;code&gt;var something&lt;/code&gt; will define a new global variable. In Node.js this is different. The top-level scope is not the global scope; &lt;code&gt;var something&lt;/code&gt; inside a Node.js module will be local to that module.</source>
          <target state="translated">在浏览器中，顶级范围是全局范围。这意味着在浏览器 &lt;code&gt;var something&lt;/code&gt; 中将定义新的全局变量。在Node.js中，这是不同的。顶级范围不是全局范围； &lt;code&gt;var something&lt;/code&gt; Node.js模块内部的某些内容对于该模块而言是本地的。</target>
        </trans-unit>
        <trans-unit id="6d0d858774c88480d91a106fadc1779bc8dd52cc" translate="yes" xml:space="preserve">
          <source>In busy processes, use the asynchronous versions of these calls. The synchronous versions will block the entire process until they complete, halting all connections.</source>
          <target state="translated">在繁忙的进程中,使用这些调用的异步版本。同步版本会阻塞整个进程,直到它们完成,停止所有连接。</target>
        </trans-unit>
        <trans-unit id="a6dde02e444feeff7342a6c14a7993d14efd44e6" translate="yes" xml:space="preserve">
          <source>In case an option value happens to contain a space (for example a path listed in &lt;code&gt;--require&lt;/code&gt;), it must be escaped using double quotes. For example:</source>
          <target state="translated">如果选项值恰好包含空格（例如 &lt;code&gt;--require&lt;/code&gt; 中列出的路径），则必须使用双引号将其转义。例如：</target>
        </trans-unit>
        <trans-unit id="15c9b09b7cd71bda560724b30fa35f7d291b25b6" translate="yes" xml:space="preserve">
          <source>In case if &lt;code&gt;callback&lt;/code&gt; is not a function, a new &lt;code&gt;ERR_INVALID_CALLBACK&lt;/code&gt; error will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a549d05af2ccfc0ca015a5a981e3076d4f98a52b" translate="yes" xml:space="preserve">
          <source>In case of an error status code, additional information can be obtained using &lt;code&gt;napi_get_last_error_info&lt;/code&gt;. More information can be found in the error handling section &lt;a href=&quot;#n_api_error_handling&quot;&gt;Error Handling&lt;/a&gt;.</source>
          <target state="translated">如果有错误状态代码，则可以使用 &lt;code&gt;napi_get_last_error_info&lt;/code&gt; 获得其他信息。可以在错误处理部分&amp;ldquo; &lt;a href=&quot;#n_api_error_handling&quot;&gt;错误处理&amp;rdquo;中&lt;/a&gt;找到更多信息。</target>
        </trans-unit>
        <trans-unit id="9788bf70d68a70d51e5e80b5a843e841d7c07e6d" translate="yes" xml:space="preserve">
          <source>In case of an error status code, additional information can be obtained using &lt;code&gt;napi_get_last_error_info&lt;/code&gt;. More information can be found in the error handling section &lt;a href=&quot;#n_api_error_handling&quot;&gt;Error handling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a7a3354fb49e4ea54bdc9ce39be38347f08d3e" translate="yes" xml:space="preserve">
          <source>In case of an error, the &lt;code&gt;err.code&lt;/code&gt; will be one of &lt;a href=&quot;errors#errors_common_system_errors&quot;&gt;Common System Errors&lt;/a&gt;.</source>
          <target state="translated">如果发生错误，则 &lt;code&gt;err.code&lt;/code&gt; 将是&lt;a href=&quot;errors#errors_common_system_errors&quot;&gt;Common System Errors之一&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83638801ee92420c039136960543463b06296385" translate="yes" xml:space="preserve">
          <source>In case of inactivity, the rules defined in &lt;a href=&quot;#http_server_timeout&quot;&gt;&lt;code&gt;server.timeout&lt;/code&gt;&lt;/a&gt; apply. However, that inactivity based timeout would still allow the connection to be kept open if the headers are being sent very slowly (by default, up to a byte per 2 minutes). In order to prevent this, whenever header data arrives an additional check is made that more than &lt;code&gt;server.headersTimeout&lt;/code&gt; milliseconds has not passed since the connection was established. If the check fails, a &lt;code&gt;'timeout'&lt;/code&gt; event is emitted on the server object, and (by default) the socket is destroyed. See &lt;a href=&quot;#http_server_timeout&quot;&gt;&lt;code&gt;server.timeout&lt;/code&gt;&lt;/a&gt; for more information on how timeout behavior can be customized.</source>
          <target state="translated">在不活动的情况下，将应用&lt;a href=&quot;#http_server_timeout&quot;&gt; &lt;code&gt;server.timeout&lt;/code&gt; 中&lt;/a&gt;定义的规则。但是，如果报头的发送速度非常慢（默认情况下，每2分钟最多发送一个字节），则基于不活动的超时仍将使连接保持打开状态。为了防止这种情况，每当头数据到达时，都要进行一次额外的检查，即自建立连接以来，还没有超过 &lt;code&gt;server.headersTimeout&lt;/code&gt; 毫秒。如果检查失败，则会在服务器对象上发出 &lt;code&gt;'timeout'&lt;/code&gt; 事件，并且（默认情况下）套接字被破坏。有关如何自定义超时行为的更多信息，请参见&lt;a href=&quot;#http_server_timeout&quot;&gt; &lt;code&gt;server.timeout&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8fe24f759353e3c9ef13728cf5d98486ed424be5" translate="yes" xml:space="preserve">
          <source>In case of no callback function were assigned, a new &lt;code&gt;ERR_INVALID_CALLBACK&lt;/code&gt; error will be thrown.</source>
          <target state="translated">如果未分配回调函数，则将引发新的 &lt;code&gt;ERR_INVALID_CALLBACK&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="a6d18d7e0676cf5071ee5c355fa6cde45cfbf4f6" translate="yes" xml:space="preserve">
          <source>In case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Probably either &lt;code&gt;'1.1'&lt;/code&gt; or &lt;code&gt;'1.0'&lt;/code&gt;.</source>
          <target state="translated">如果有服务器请求，则由客户端发送HTTP版本。如果是客户端响应，则为连接服务器的HTTP版本。可能是 &lt;code&gt;'1.1'&lt;/code&gt; 或 &lt;code&gt;'1.0'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="288453ee826f1533d87079e6da5e8a9939a1c3c7" translate="yes" xml:space="preserve">
          <source>In case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Returns &lt;code&gt;'2.0'&lt;/code&gt;.</source>
          <target state="translated">如果有服务器请求，则由客户端发送HTTP版本。如果是客户端响应，则为连接服务器的HTTP版本。返回 &lt;code&gt;'2.0'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a083755276d9eeea7f1c7589a28aafc0f42f80d" translate="yes" xml:space="preserve">
          <source>In cases where a return value other than &lt;code&gt;napi_ok&lt;/code&gt; or &lt;code&gt;napi_pending_exception&lt;/code&gt; is returned, &lt;a href=&quot;#n_api_napi_is_exception_pending&quot;&gt;&lt;code&gt;napi_is_exception_pending&lt;/code&gt;&lt;/a&gt; must be called to check if an exception is pending. See the section on exceptions for more details.</source>
          <target state="translated">如果返回的返回值不是 &lt;code&gt;napi_ok&lt;/code&gt; 或 &lt;code&gt;napi_pending_exception&lt;/code&gt; ，&lt;a href=&quot;#n_api_napi_is_exception_pending&quot;&gt; &lt;code&gt;napi_is_exception_pending&lt;/code&gt; &lt;/a&gt;必须调用napi_is_exception_pending来检查异常是否未决。有关更多详细信息，请参见异常部分。</target>
        </trans-unit>
        <trans-unit id="3352c4c1cafe79135726b64a02a391ead0f41a7a" translate="yes" xml:space="preserve">
          <source>In cases where it is not known in advance if &lt;code&gt;input&lt;/code&gt; is an absolute URL and a &lt;code&gt;base&lt;/code&gt; is provided, it is advised to validate that the &lt;code&gt;origin&lt;/code&gt; of the &lt;code&gt;URL&lt;/code&gt; object is what is expected.</source>
          <target state="translated">在如果事先不知道的情况下， &lt;code&gt;input&lt;/code&gt; 是一个绝对的URL和 &lt;code&gt;base&lt;/code&gt; 提供，建议以验证 &lt;code&gt;origin&lt;/code&gt; 的的 &lt;code&gt;URL&lt;/code&gt; 对象的期望是什么。</target>
        </trans-unit>
        <trans-unit id="64ee0f45e9598117687157f2af97b1b0166cabde" translate="yes" xml:space="preserve">
          <source>In cases where there is more than one &lt;code&gt;.cc&lt;/code&gt; file, simply add the additional filename to the &lt;code&gt;sources&lt;/code&gt; array:</source>
          <target state="translated">如果存在多个 &lt;code&gt;.cc&lt;/code&gt; 文件，只需将其他文件名添加到 &lt;code&gt;sources&lt;/code&gt; 数组中：</target>
        </trans-unit>
        <trans-unit id="a54ba662593323ae67f27f49552b1bb4dbd0fd34" translate="yes" xml:space="preserve">
          <source>In certain cases, &lt;code&gt;require('.')&lt;/code&gt; could resolve outside the package directory. This behavior has been removed.</source>
          <target state="translated">在某些情况下， &lt;code&gt;require('.')&lt;/code&gt; 可以在包目录之外进行解析。此行为已被删除。</target>
        </trans-unit>
        <trans-unit id="6bf7779b67ab0aad41f5916dd6b3a65b83dcba67" translate="yes" xml:space="preserve">
          <source>In contrast, the following example turns off the default warning output and adds a custom handler to the &lt;code&gt;'warning'&lt;/code&gt; event:</source>
          <target state="translated">相反，以下示例关闭了默认警告输出，并向 &lt;code&gt;'warning'&lt;/code&gt; 事件添加了自定义处理程序：</target>
        </trans-unit>
        <trans-unit id="dd982c8835710e676f97498aa2a426f67aae0d05" translate="yes" xml:space="preserve">
          <source>In current Node.js, specifiers starting with &lt;code&gt;https://&lt;/code&gt; are unsupported. The loader below registers hooks to enable rudimentary support for such specifiers. While this may seem like a significant improvement to Node.js core functionality, there are substantial downsides to actually using this loader: performance is much slower than loading files from disk, there is no caching, and there is no security.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3587bc97949af37236db6b9a0a1d14eae323d5" translate="yes" xml:space="preserve">
          <source>In custom builds from non-release versions of the source tree, only the &lt;code&gt;name&lt;/code&gt; property may be present. The additional properties should not be relied upon to exist.</source>
          <target state="translated">在源树的非发行版的自定义生成中，可能仅存在 &lt;code&gt;name&lt;/code&gt; 属性。不应依赖其他属性。</target>
        </trans-unit>
        <trans-unit id="327449f48d0f91fc55b3b3b7eb5d0b9b76cc0b33" translate="yes" xml:space="preserve">
          <source>In each module, the &lt;code&gt;module&lt;/code&gt; free variable is a reference to the object representing the current module. For convenience, &lt;code&gt;module.exports&lt;/code&gt; is also accessible via the &lt;code&gt;exports&lt;/code&gt; module-global. &lt;code&gt;module&lt;/code&gt; is not actually a global but rather local to each module.</source>
          <target state="translated">在每个模块中， &lt;code&gt;module&lt;/code&gt; 自由变量是对表示当前模块的对象的引用。为了方便起见，也可以通过 &lt;code&gt;exports&lt;/code&gt; -global来访问 &lt;code&gt;module.exports&lt;/code&gt; 。实际上， &lt;code&gt;module&lt;/code&gt; 不是每个模块的全局变量，而是局部的。</target>
        </trans-unit>
        <trans-unit id="37db4cd4b343ff7b0d4d0a02ce9acc6d525c6d68" translate="yes" xml:space="preserve">
          <source>In each of the previous examples, an &lt;code&gt;Error&lt;/code&gt; object is generated internally by &lt;code&gt;process.emitWarning()&lt;/code&gt; and passed through to the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="translated">在前面的每个示例中， &lt;code&gt;Error&lt;/code&gt; 对象都是由 &lt;code&gt;process.emitWarning()&lt;/code&gt; 内部生成的，并传递给&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt;处理程序。</target>
        </trans-unit>
        <trans-unit id="820400607edfb4a60ac510c205956515ea9fa75c" translate="yes" xml:space="preserve">
          <source>In either case, the handler function is invoked with the &lt;code&gt;event&lt;/code&gt; argument passed to the &lt;code&gt;eventTarget.dispatchEvent()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6707c880c79f3eb01db7774cdf36344d80a74bb4" translate="yes" xml:space="preserve">
          <source>In flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">在流动模式下，会通过&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;接口使用事件自动从底层系统读取数据并将其尽快提供给应用程序。</target>
        </trans-unit>
        <trans-unit id="409446af31735d46729e6eb84ac5244d78721628" translate="yes" xml:space="preserve">
          <source>In future versions of Node.js, &lt;code&gt;fs.rmdir(path, { recursive: true })&lt;/code&gt; will throw on nonexistent paths, or when given a file as a target. Use &lt;code&gt;fs.rm(path, { recursive: true, force: true })&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd353fe48ae2599b92caa0441615c03958d5543e" translate="yes" xml:space="preserve">
          <source>In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process.</source>
          <target state="translated">一般来说,只有在文件不会被直接使用的情况下才会检查文件的可访问性,例如当文件的可访问性是来自另一个进程的信号时。</target>
        </trans-unit>
        <trans-unit id="087f71387196c21047e8de00ada98ef5f02eb85e" translate="yes" xml:space="preserve">
          <source>In general, check for the existence of a file only if the file won&amp;rsquo;t be used directly, for example when its existence is a signal from another process.</source>
          <target state="translated">通常，仅当不直接使用文件时（例如，文件的存在是来自另一个进程的信号），才检查文件的存在。</target>
        </trans-unit>
        <trans-unit id="0780a6d7f3a8d6f30bfe170e7ebcad79382accb5" translate="yes" xml:space="preserve">
          <source>In general, greater memory usage options will mean that Node.js has to make fewer calls to &lt;code&gt;zlib&lt;/code&gt; because it will be able to process more data on each &lt;code&gt;write&lt;/code&gt; operation. So, this is another factor that affects the speed, at the cost of memory usage.</source>
          <target state="translated">通常，更大的内存使用选项将意味着Node.js只需对 &lt;code&gt;zlib&lt;/code&gt; 进行较少的调用，因为它可以在每次 &lt;code&gt;write&lt;/code&gt; 操作中处理更多的数据。因此，这是另一个影响速度的因素，但会消耗内存。</target>
        </trans-unit>
        <trans-unit id="45a19be887817fbe3d3f39ecc27f73a30b8611a2" translate="yes" xml:space="preserve">
          <source>In general, the &lt;code&gt;readable.pipe()&lt;/code&gt; and &lt;code&gt;'data'&lt;/code&gt; event mechanisms are easier to understand than the &lt;code&gt;'readable'&lt;/code&gt; event. However, handling &lt;code&gt;'readable'&lt;/code&gt; might result in increased throughput.</source>
          <target state="translated">通常，与 &lt;code&gt;'readable'&lt;/code&gt; 事件相比， &lt;code&gt;readable.pipe()&lt;/code&gt; 和 &lt;code&gt;'data'&lt;/code&gt; 事件机制更易于理解。但是，处理 &lt;code&gt;'readable'&lt;/code&gt; 可能会导致吞吐量增加。</target>
        </trans-unit>
        <trans-unit id="e29f7ea80cfdc8edcce7cf9808c9e14cd5f2e801" translate="yes" xml:space="preserve">
          <source>In line with OpenSSL's recommendation to use a more modern algorithm instead of &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; it is recommended that developers derive a key and IV on their own using &lt;a href=&quot;#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt;&lt;code&gt;crypto.scrypt()&lt;/code&gt;&lt;/a&gt; and to use &lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createCipheriv()&lt;/code&gt;&lt;/a&gt; to create the &lt;code&gt;Cipher&lt;/code&gt; object. Users should not use ciphers with counter mode (e.g. CTR, GCM, or CCM) in &lt;code&gt;crypto.createCipher()&lt;/code&gt;. A warning is emitted when they are used in order to avoid the risk of IV reuse that causes vulnerabilities. For the case when IV is reused in GCM, see &lt;a href=&quot;https://github.com/nonce-disrespect/nonce-disrespect&quot;&gt;Nonce-Disrespecting Adversaries&lt;/a&gt; for details.</source>
          <target state="translated">与OpenSSL建议使用更现代的算法而不是&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt; &lt;code&gt;EVP_BytesToKey&lt;/code&gt; 一致&lt;/a&gt;，建议开发人员使用&lt;a href=&quot;#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt; &lt;code&gt;crypto.scrypt()&lt;/code&gt; &lt;/a&gt;自行派生密钥和IV，并使用&lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createCipheriv()&lt;/code&gt; &lt;/a&gt;创建 &lt;code&gt;Cipher&lt;/code&gt; 对象。用户不应在 &lt;code&gt;crypto.createCipher()&lt;/code&gt; 中使用具有计数器模式的密码（例如CTR，GCM或CCM ）。使用它们时会发出警告，以避免IV重用导致漏洞的风险。对于在GCM中重用IV的情况，请参阅&lt;a href=&quot;https://github.com/nonce-disrespect/nonce-disrespect&quot;&gt;不敬拜对手&lt;/a&gt;以获取详细信息。</target>
        </trans-unit>
        <trans-unit id="4427809c2da46e37a477a14b3a6dae947f069aba" translate="yes" xml:space="preserve">
          <source>In line with OpenSSL's recommendation to use a more modern algorithm instead of &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; it is recommended that developers derive a key and IV on their own using &lt;a href=&quot;#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt;&lt;code&gt;crypto.scrypt()&lt;/code&gt;&lt;/a&gt; and to use &lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createDecipheriv()&lt;/code&gt;&lt;/a&gt; to create the &lt;code&gt;Decipher&lt;/code&gt; object.</source>
          <target state="translated">与OpenSSL建议使用更现代的算法而不是&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt; &lt;code&gt;EVP_BytesToKey&lt;/code&gt; 一致&lt;/a&gt;，建议开发人员使用&lt;a href=&quot;#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt; &lt;code&gt;crypto.scrypt()&lt;/code&gt; &lt;/a&gt;自行派生密钥和IV，并使用&lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createDecipheriv()&lt;/code&gt; &lt;/a&gt;创建 &lt;code&gt;Decipher&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="f16244b364da53115174b4fd4f6aa18f7d9fb44a" translate="yes" xml:space="preserve">
          <source>In many cases when an N-API function is called and an exception is already pending, the function will return immediately with a &lt;code&gt;napi_status&lt;/code&gt; of &lt;code&gt;napi_pending_exception&lt;/code&gt;. However, this is not the case for all functions. N-API allows a subset of the functions to be called to allow for some minimal cleanup before returning to JavaScript. In that case, &lt;code&gt;napi_status&lt;/code&gt; will reflect the status for the function. It will not reflect previous pending exceptions. To avoid confusion, check the error status after every function call.</source>
          <target state="translated">在许多情况下，当调用N-API函数并且一个异常已经挂起时，该函数将立即以 &lt;code&gt;napi_status&lt;/code&gt; 的 &lt;code&gt;napi_pending_exception&lt;/code&gt; 。但是，并非所有功能都如此。N-API允许调用函数的子集，以便在返回JavaScript之前进行一些最小的清理。在这种情况下， &lt;code&gt;napi_status&lt;/code&gt; 将反映该功能的状态。它不会反映以前的未决异常。为避免混淆，请在每次函数调用后检查错误状态。</target>
        </trans-unit>
        <trans-unit id="4d4aeb489e9e86e74a64fc02a38fd7bd2ebbd390" translate="yes" xml:space="preserve">
          <source>In many cases, however, it is necessary that the handles remain valid for either a shorter or longer lifespan than that of the native method. The sections which follow describe the N-API functions that can be used to change the handle lifespan from the default.</source>
          <target state="translated">然而,在许多情况下,有必要让句柄的有效期比本地方法的有效期短或长。下面的章节描述了可以用来改变默认句柄寿命的N-API函数。</target>
        </trans-unit>
        <trans-unit id="4b34bf1445c109117747980b5d96ac739f8c0f64" translate="yes" xml:space="preserve">
          <source>In most cases your application or library code should have no issues with &lt;code&gt;AsyncLocalStorage&lt;/code&gt;. But in rare cases you may face situations when the current store is lost in one of asynchronous operations. In those cases, consider the following options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd8e7e54f1e17d20c23615bc834dee206f45159" translate="yes" xml:space="preserve">
          <source>In most cases, there should be little to no reason for an application to manually create instances of the &lt;code&gt;tty.ReadStream&lt;/code&gt; and &lt;code&gt;tty.WriteStream&lt;/code&gt; classes.</source>
          <target state="translated">在大多数情况下，应用程序几乎没有理由手动创建 &lt;code&gt;tty.ReadStream&lt;/code&gt; 和 &lt;code&gt;tty.WriteStream&lt;/code&gt; 类的实例。</target>
        </trans-unit>
        <trans-unit id="5bc3a0789b533753ef17917c6e76c2314768199f" translate="yes" xml:space="preserve">
          <source>In most operating systems, listening to the &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address&quot;&gt;unspecified IPv6 address&lt;/a&gt; (&lt;code&gt;::&lt;/code&gt;) may cause the &lt;code&gt;net.Server&lt;/code&gt; to also listen on the &lt;a href=&quot;https://en.wikipedia.org/wiki/0.0.0.0&quot;&gt;unspecified IPv4 address&lt;/a&gt; (&lt;code&gt;0.0.0.0&lt;/code&gt;).</source>
          <target state="translated">在大多数操作系统中，听着&lt;a href=&quot;https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address&quot;&gt;不特定的IPv6地址&lt;/a&gt;（ &lt;code&gt;::&lt;/code&gt; ）可能会导致 &lt;code&gt;net.Server&lt;/code&gt; 也听在&lt;a href=&quot;https://en.wikipedia.org/wiki/0.0.0.0&quot;&gt;未指定的IPv4地址&lt;/a&gt;（ &lt;code&gt;0.0.0.0&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7a9fa045058fbc4f76eea96849e5ca18e4b0477e" translate="yes" xml:space="preserve">
          <source>In most situations, it is not actually necessary to call &lt;code&gt;process.exit()&lt;/code&gt; explicitly. The Node.js process will exit on its own &lt;em&gt;if there is no additional work pending&lt;/em&gt; in the event loop. The &lt;code&gt;process.exitCode&lt;/code&gt; property can be set to tell the process which exit code to use when the process exits gracefully.</source>
          <target state="translated">在大多数情况下，实际上没有必要显式调用 &lt;code&gt;process.exit()&lt;/code&gt; 。&lt;em&gt;如果&lt;/em&gt;事件循环中&lt;em&gt;没有其他待处理&lt;/em&gt;的&lt;em&gt;工作&lt;/em&gt;，则Node.js进程将自行退出。该 &lt;code&gt;process.exitCode&lt;/code&gt; 属性可以设置来告诉进程使用，当进程退出其正常退出代码。</target>
        </trans-unit>
        <trans-unit id="8ba73ffda62f255ad07619c0e3bdc1d844b17d1f" translate="yes" xml:space="preserve">
          <source>In order to avoid the garbage collection overhead of creating many individually allocated &lt;code&gt;Buffer&lt;/code&gt; instances, by default allocations under 4KB are sliced from a single larger allocated object.</source>
          <target state="translated">为了避免创建许多单独分配的 &lt;code&gt;Buffer&lt;/code&gt; 实例的垃圾回收开销，默认情况下，从单个较大的分配对象中分割4KB以下的分配。</target>
        </trans-unit>
        <trans-unit id="07817ef1abfbcf964409ae72ee3eff00eaa052ac" translate="yes" xml:space="preserve">
          <source>In order to be loaded from multiple Node.js environments, such as a main thread and a Worker thread, an add-on needs to either:</source>
          <target state="translated">为了从多个Node.js环境中加载,比如一个主线程和一个Worker线程,一个插件需要或者。</target>
        </trans-unit>
        <trans-unit id="30b26d492c1627fc6654e900f98b2c495fce1ecb" translate="yes" xml:space="preserve">
          <source>In order to create a mixed &lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt; and HTTP/2 server, refer to the &lt;a href=&quot;#http2_alpn_negotiation&quot;&gt;ALPN negotiation&lt;/a&gt; section. Upgrading from non-tls HTTP/1 servers is not supported.</source>
          <target state="translated">为了创建混合的&lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt;和HTTP / 2服务器，请参考&lt;a href=&quot;#http2_alpn_negotiation&quot;&gt;ALPN协商&lt;/a&gt;部分。不支持从非tls HTTP / 1服务器升级。</target>
        </trans-unit>
        <trans-unit id="9608ef8288365a7cade4d998db1fc0243461174f" translate="yes" xml:space="preserve">
          <source>In order to do this, it is necessary to get a reference to the &lt;code&gt;module&lt;/code&gt; object. Since &lt;code&gt;require()&lt;/code&gt; returns the &lt;code&gt;module.exports&lt;/code&gt;, and the &lt;code&gt;module&lt;/code&gt; is typically &lt;em&gt;only&lt;/em&gt; available within a specific module's code, it must be explicitly exported in order to be used.</source>
          <target state="translated">为此，必须获取对 &lt;code&gt;module&lt;/code&gt; 对象的引用。由于 &lt;code&gt;require()&lt;/code&gt; 返回 &lt;code&gt;module.exports&lt;/code&gt; ，并且该 &lt;code&gt;module&lt;/code&gt; 通常&lt;em&gt;仅&lt;/em&gt;在特定模块的代码中可用，因此必须显式导出该模块才能使用。</target>
        </trans-unit>
        <trans-unit id="34523f8cc30ff0b87b5cd5c6314ffe804fe892b1" translate="yes" xml:space="preserve">
          <source>In order to expose a function as part of the add-on's module exports, set the newly created function on the exports object. A sample module might look as follows:</source>
          <target state="translated">为了将一个函数作为附加组件的模块导出的一部分,请在导出对象上设置新创建的函数。一个示例模块可能如下所示。</target>
        </trans-unit>
        <trans-unit id="5be94aad2d7524c4d29b1665cfabd8e1b693ef9b" translate="yes" xml:space="preserve">
          <source>In order to make modules available to the Node.js REPL, it might be useful to also add the &lt;code&gt;/usr/lib/node_modules&lt;/code&gt; folder to the &lt;code&gt;$NODE_PATH&lt;/code&gt; environment variable. Since the module lookups using &lt;code&gt;node_modules&lt;/code&gt; folders are all relative, and based on the real path of the files making the calls to &lt;code&gt;require()&lt;/code&gt;, the packages themselves can be anywhere.</source>
          <target state="translated">为了使模块可用于Node.js REPL，将 &lt;code&gt;/usr/lib/node_modules&lt;/code&gt; 文件夹也添加到 &lt;code&gt;$NODE_PATH&lt;/code&gt; 环境变量中可能会很有用。由于使用 &lt;code&gt;node_modules&lt;/code&gt; 文件夹的模块查找都是相对的，并且基于调用 &lt;code&gt;require()&lt;/code&gt; 的文件的真实路径，因此包本身可以在任何地方。</target>
        </trans-unit>
        <trans-unit id="34fc5ed6a9101bb04240e52968cc6d46716398a6" translate="yes" xml:space="preserve">
          <source>In order to prevent excessive memory usage, &lt;code&gt;Domain&lt;/code&gt; objects themselves are not implicitly added as children of the active domain. If they were, then it would be too easy to prevent request and response objects from being properly garbage collected.</source>
          <target state="translated">为了防止过多使用内存，不会将 &lt;code&gt;Domain&lt;/code&gt; 对象本身隐式添加为活动域的子级。如果它们是这样，那么防止请求和响应对象被正确地垃圾回收太容易了。</target>
        </trans-unit>
        <trans-unit id="1872d37dd99da69f48fff6e8ea85d653766d0af1" translate="yes" xml:space="preserve">
          <source>In order to retrieve this information &lt;a href=&quot;#n_api_napi_get_last_error_info&quot;&gt;&lt;code&gt;napi_get_last_error_info&lt;/code&gt;&lt;/a&gt; is provided which returns a &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure. The format of the &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure is as follows:</source>
          <target state="translated">为了检索这些信息&lt;a href=&quot;#n_api_napi_get_last_error_info&quot;&gt; &lt;code&gt;napi_get_last_error_info&lt;/code&gt; &lt;/a&gt;提供它返回一个 &lt;code&gt;napi_extended_error_info&lt;/code&gt; 结构。 &lt;code&gt;napi_extended_error_info&lt;/code&gt; 结构的格式如下：</target>
        </trans-unit>
        <trans-unit id="1ba193044958a2078ac8148d7933406e9ff8c99a" translate="yes" xml:space="preserve">
          <source>In order to run a simple web server using the &lt;code&gt;http&lt;/code&gt; module the code passed to the context must either call &lt;code&gt;require('http')&lt;/code&gt; on its own, or have a reference to the &lt;code&gt;http&lt;/code&gt; module passed to it. For instance:</source>
          <target state="translated">为了使用 &lt;code&gt;http&lt;/code&gt; 模块运行简单的Web服务器，传递给上下文的代码必须自行调用 &lt;code&gt;require('http')&lt;/code&gt; ，或者对传递给它的 &lt;code&gt;http&lt;/code&gt; 模块进行引用。例如：</target>
        </trans-unit>
        <trans-unit id="dcb69e44c062ea7704f38e703e2936582cc9f855" translate="yes" xml:space="preserve">
          <source>In order to support &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, addons need to clean up any resources they may have allocated when such a thread exists. This can be achieved through the usage of the &lt;code&gt;AddEnvironmentCleanupHook()&lt;/code&gt; function:</source>
          <target state="translated">为了支持&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;线程，附加组件需要清理在存在此类线程时可能已分配的所有资源。这可以通过使用 &lt;code&gt;AddEnvironmentCleanupHook()&lt;/code&gt; 函数来实现：</target>
        </trans-unit>
        <trans-unit id="6e43ad63b79dd141d986e828eceee78812aec282" translate="yes" xml:space="preserve">
          <source>In order to support the full spectrum of possible HTTP applications, Node.js's HTTP API is very low-level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body.</source>
          <target state="translated">为了支持所有可能的HTTP应用,Node.js的HTTP API是非常低级的。它只处理流处理和消息解析。它将消息解析为头部和主体,但它不解析实际的头部或主体。</target>
        </trans-unit>
        <trans-unit id="cacbbe490b57fd8bf29c6d4c231226a0b14306b9" translate="yes" xml:space="preserve">
          <source>In order to support the full spectrum of possible HTTP applications, the Node.js HTTP API is very low-level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3632f1db32bf01741e5bbea082ca20145fb38f" translate="yes" xml:space="preserve">
          <source>In order to use the N-API functions, include the file &lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/node_api.h&quot;&gt;&lt;code&gt;node_api.h&lt;/code&gt;&lt;/a&gt; which is located in the src directory in the node development tree:</source>
          <target state="translated">为了使用N-API功能，请包括位于节点开发树的src目录中的文件&lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/node_api.h&quot;&gt; &lt;code&gt;node_api.h&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="4ac594a0cf5cfa895ed35f6b2ef04dc94e26df89" translate="yes" xml:space="preserve">
          <source>In particular, the significant differences to &lt;code&gt;JSON&lt;/code&gt; are:</source>
          <target state="translated">特别是，与 &lt;code&gt;JSON&lt;/code&gt; 的显着区别是：</target>
        </trans-unit>
        <trans-unit id="8f2a5459c07d70896c8081dfc8b2f3407dcb02df" translate="yes" xml:space="preserve">
          <source>In particular, this makes sense for objects that can be cloned, rather than transferred, and which are used by other objects on the sending side. For example, Node.js marks the &lt;code&gt;ArrayBuffer&lt;/code&gt;s it uses for its &lt;a href=&quot;buffer#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt; pool&lt;/a&gt; with this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b654969e8b0fb9bedec078843fc01697a0cd123" translate="yes" xml:space="preserve">
          <source>In particular:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d252f3d1a06c3b2a3ae5ad98ef71487c919a9c51" translate="yes" xml:space="preserve">
          <source>In paused mode, the &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt; method must be called explicitly to read chunks of data from the stream.</source>
          <target state="translated">在暂停模式下，必须显式调用&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;stream.read()&lt;/code&gt; &lt;/a&gt;方法以从流中读取数据块。</target>
        </trans-unit>
        <trans-unit id="9a5c41117e426ba3a059f25450d02c56bbffe674" translate="yes" xml:space="preserve">
          <source>In recent versions of Node.js, there is no difference between &lt;a href=&quot;crypto#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;crypto.pseudoRandomBytes()&lt;/code&gt;. The latter is deprecated along with the undocumented aliases &lt;code&gt;crypto.prng()&lt;/code&gt; and &lt;code&gt;crypto.rng()&lt;/code&gt; in favor of &lt;a href=&quot;crypto#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; and may be removed in a future release.</source>
          <target state="translated">在最新版本的Node.js中，&lt;a href=&quot;crypto#crypto_crypto_randombytes_size_callback&quot;&gt; &lt;code&gt;crypto.randomBytes()&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;crypto.pseudoRandomBytes()&lt;/code&gt; 之间没有区别。不推荐使用后者， &lt;code&gt;crypto.rng()&lt;/code&gt; 别名 &lt;code&gt;crypto.prng()&lt;/code&gt; 和crypto.rng（）则支持&lt;a href=&quot;crypto#crypto_crypto_randombytes_size_callback&quot;&gt; &lt;code&gt;crypto.randomBytes()&lt;/code&gt; ,&lt;/a&gt;并且可能在将来的版本中删除。</target>
        </trans-unit>
        <trans-unit id="482c092668220dab66fd94c51463dcf51a819a39" translate="yes" xml:space="preserve">
          <source>In recent versions of Node.js, there is no difference between &lt;a href=&quot;crypto#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;crypto.pseudoRandomBytes()&lt;/code&gt;. The latter is deprecated along with the undocumented aliases &lt;code&gt;crypto.prng()&lt;/code&gt; and &lt;code&gt;crypto.rng()&lt;/code&gt; in favor of &lt;a href=&quot;crypto#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; and might be removed in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177049c3930ff3f87e8368c6c3d05d129ef44094" translate="yes" xml:space="preserve">
          <source>In some cases an addon will need to be able to create and reference objects with a lifespan longer than that of a single native method invocation. For example, to create a constructor and later use that constructor in a request to creates instances, it must be possible to reference the constructor object across many different instance creation requests. This would not be possible with a normal handle returned as a &lt;code&gt;napi_value&lt;/code&gt; as described in the earlier section. The lifespan of a normal handle is managed by scopes and all scopes must be closed before the end of a native method.</source>
          <target state="translated">在某些情况下，附加组件将需要能够创建和引用寿命比单个本机方法调用更长的对象。例如，要创建构造函数，然后在请求中使用该构造函数创建实例，必须有可能在许多不同的实例创建请求中引用构造函数对象。如前面部分所述，使用正常的句柄作为 &lt;code&gt;napi_value&lt;/code&gt; 返回这是不可能的。普通句柄的寿命由作用域管理，并且所有作用域必须在本机方法结束之前关闭。</target>
        </trans-unit>
        <trans-unit id="e22a93062d451b249b9309c60af8192dbe28ccd1" translate="yes" xml:space="preserve">
          <source>In some cases the resource object is reused for performance reasons, it is thus not safe to use it as a key in a &lt;code&gt;WeakMap&lt;/code&gt; or add properties to it.</source>
          <target state="translated">在某些情况下，由于性能原因，资源对象被重用，因此将其用作 &lt;code&gt;WeakMap&lt;/code&gt; 的键或为其添加属性是不安全的。</target>
        </trans-unit>
        <trans-unit id="4ad5e1a1929b5b0a41cfc844642f2414d2f858a5" translate="yes" xml:space="preserve">
          <source>In some cases, a &lt;code&gt;Sign&lt;/code&gt; instance can be created using the name of a signature algorithm, such as &lt;code&gt;'RSA-SHA256'&lt;/code&gt;, instead of a digest algorithm. This will use the corresponding digest algorithm. This does not work for all signature algorithms, such as &lt;code&gt;'ecdsa-with-SHA256'&lt;/code&gt;, so it is best to always use digest algorithm names.</source>
          <target state="translated">在某些情况下，可以使用签名算法（例如 &lt;code&gt;'RSA-SHA256'&lt;/code&gt; ）的名称而不是摘要算法来创建 &lt;code&gt;Sign&lt;/code&gt; 实例。这将使用相应的摘要算法。这不适用于所有签名算法，例如 &lt;code&gt;'ecdsa-with-SHA256'&lt;/code&gt; ，因此最好始终使用摘要算法名称。</target>
        </trans-unit>
        <trans-unit id="e37ebca3d8b767295ac2a49a166fe5a6bbb405cb" translate="yes" xml:space="preserve">
          <source>In some cases, a &lt;code&gt;Verify&lt;/code&gt; instance can be created using the name of a signature algorithm, such as &lt;code&gt;'RSA-SHA256'&lt;/code&gt;, instead of a digest algorithm. This will use the corresponding digest algorithm. This does not work for all signature algorithms, such as &lt;code&gt;'ecdsa-with-SHA256'&lt;/code&gt;, so it is best to always use digest algorithm names.</source>
          <target state="translated">在某些情况下，可以使用签名算法（例如 &lt;code&gt;'RSA-SHA256'&lt;/code&gt; ）的名称而不是摘要算法来创建 &lt;code&gt;Verify&lt;/code&gt; 实例。这将使用相应的摘要算法。这不适用于所有签名算法，例如 &lt;code&gt;'ecdsa-with-SHA256'&lt;/code&gt; ，因此最好始终使用摘要算法名称。</target>
        </trans-unit>
        <trans-unit id="715189038eeefcaa56acee7c2e2873a2e151a84e" translate="yes" xml:space="preserve">
          <source>In some cases, a transform operation may need to emit an additional bit of data at the end of the stream. For example, a &lt;code&gt;zlib&lt;/code&gt; compression stream will store an amount of internal state used to optimally compress the output. When the stream ends, however, that additional data needs to be flushed so that the compressed data will be complete.</source>
          <target state="translated">在某些情况下，转换操作可能需要在流的末尾发射额外的数据位。例如， &lt;code&gt;zlib&lt;/code&gt; 压缩流将存储用于最佳压缩输出的内部状态量。但是，当流结束时，需要刷新其他数据，以便完成压缩数据。</target>
        </trans-unit>
        <trans-unit id="60c6c3683d6de9acfc87a92e7bab5fb89fe40cef" translate="yes" xml:space="preserve">
          <source>In some cases, the client has already received the response and/or the socket has already been destroyed, like in case of &lt;code&gt;ECONNRESET&lt;/code&gt; errors. Before trying to send data to the socket, it is better to check that it is still writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449c40eda8a931307bfa01c725cde16111359434" translate="yes" xml:space="preserve">
          <source>In strict assertion mode, error messages for objects display a diff. In legacy assertion mode, error messages for objects display the objects, often truncated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f6b941385c959247bdc6909616b44376b1d8ef" translate="yes" xml:space="preserve">
          <source>In strict assertion mode, non-strict methods behave like their corresponding strict methods. For example, &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt; will behave like &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0648c6c88ba0416f92bbc79ff87e571aa792e5c" translate="yes" xml:space="preserve">
          <source>In synchronous code, the &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted when the list of unhandled exceptions grows.</source>
          <target state="translated">在同步代码中，当未处理的异常列表增加时，将发出 &lt;code&gt;'uncaughtException'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="621f9ba64d0f93481000b51697b0e8e212cfe125" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;hello.cc&lt;/code&gt; example, then, the initialization function is &lt;code&gt;Initialize&lt;/code&gt; and the addon module name is &lt;code&gt;addon&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;hello.cc&lt;/code&gt; 示例中，初始化函数为 &lt;code&gt;Initialize&lt;/code&gt; ，插件模块名称为 &lt;code&gt;addon&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34a1a029b73f14872b97df7d8a65365950b239dc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;http&lt;/code&gt; module, the response body is omitted when the request is a HEAD request. Similarly, the &lt;code&gt;204&lt;/code&gt; and &lt;code&gt;304&lt;/code&gt; responses &lt;em&gt;must not&lt;/em&gt; include a message body.</source>
          <target state="translated">在 &lt;code&gt;http&lt;/code&gt; 模块中，当请求是HEAD请求时，将省略响应主体。同样， &lt;code&gt;204&lt;/code&gt; 和 &lt;code&gt;304&lt;/code&gt; 响应&lt;em&gt;必须不&lt;/em&gt;包含消息正文。</target>
        </trans-unit>
        <trans-unit id="e51ffedc5aa7b802f39e0dbd76ccacf085da1acf" translate="yes" xml:space="preserve">
          <source>In the Node.js &lt;code&gt;EventTarget&lt;/code&gt;, if an event listener is an async function or returns a &lt;code&gt;Promise&lt;/code&gt;, and the returned &lt;code&gt;Promise&lt;/code&gt; rejects, the rejection is automatically captured and handled the same way as a listener that throws synchronously (see &lt;a href=&quot;#events_eventtarget_error_handling&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt; error handling&lt;/a&gt; for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6a5d641d8bc637062b7f84d566dcbd208d5b73" translate="yes" xml:space="preserve">
          <source>In the Node.js module system, each file is treated as a separate module. For example, consider a file named &lt;code&gt;foo.js&lt;/code&gt;:</source>
          <target state="translated">在Node.js模块系统中，每个文件都被视为一个单独的模块。例如，考虑一个名为 &lt;code&gt;foo.js&lt;/code&gt; 的文件：</target>
        </trans-unit>
        <trans-unit id="5efe8184649f8e9b88e3c4673bc7122c9bf741b4" translate="yes" xml:space="preserve">
          <source>In the above example &lt;code&gt;myAddon.queryHasRecords()&lt;/code&gt; is a method that accepts two arguments. The first is a database handle and the second is a query handle. Internally, it unwraps the first argument and casts the resulting pointer to a native database handle. It then unwraps the second argument and casts the resulting pointer to a query handle. If the arguments are passed in the wrong order, the casts will work, however, there is a good chance that the underlying database operation will fail, or will even cause an invalid memory access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e2be294d408b9afdcf261478d35f9f2c3215e8" translate="yes" xml:space="preserve">
          <source>In the above, errors on the write stream would be caught and thrown by the two &lt;code&gt;once()&lt;/code&gt; listeners, since &lt;code&gt;once()&lt;/code&gt; will also handle &lt;code&gt;'error'&lt;/code&gt; events.</source>
          <target state="translated">在上面，写流中的错误将被两个 &lt;code&gt;once()&lt;/code&gt; 侦听器捕获并抛出，因为 &lt;code&gt;once()&lt;/code&gt; 也将处理 &lt;code&gt;'error'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="5261e070003e9d4318beec94c3cf4ba4e3cbd884" translate="yes" xml:space="preserve">
          <source>In the case of Promises, the &lt;code&gt;resource&lt;/code&gt; object will have an &lt;code&gt;isChainedPromise&lt;/code&gt; property, set to &lt;code&gt;true&lt;/code&gt; if the promise has a parent promise, and &lt;code&gt;false&lt;/code&gt; otherwise. For example, in the case of &lt;code&gt;b = a.then(handler)&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is considered a parent &lt;code&gt;Promise&lt;/code&gt; of &lt;code&gt;b&lt;/code&gt;. Here, &lt;code&gt;b&lt;/code&gt; is considered a chained promise.</source>
          <target state="translated">对于Promises， &lt;code&gt;resource&lt;/code&gt; 对象将具有 &lt;code&gt;isChainedPromise&lt;/code&gt; 属性，如果Promise具有父Promise，则将其设置为 &lt;code&gt;true&lt;/code&gt; ,否则将其设置为 &lt;code&gt;false&lt;/code&gt; 。例如，在的情况下， &lt;code&gt;b = a.then(handler)&lt;/code&gt; ， &lt;code&gt;a&lt;/code&gt; 被认为是一个父 &lt;code&gt;Promise&lt;/code&gt; 的 &lt;code&gt;b&lt;/code&gt; 。在此， &lt;code&gt;b&lt;/code&gt; 被视为链式承诺。</target>
        </trans-unit>
        <trans-unit id="b68963099522536bfb9d03e74439ba262a06acfe" translate="yes" xml:space="preserve">
          <source>In the case of a connection error, the following events will be emitted:</source>
          <target state="translated">如果发生连接错误,将发出以下事件。</target>
        </trans-unit>
        <trans-unit id="03a5e4309fc1c7ad9fcbe06a809e4b2569683624" translate="yes" xml:space="preserve">
          <source>In the case of a premature connection close after the response is received, the following events will be emitted in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bb0b42ce2a493aa297335691f09d8aec6a1679" translate="yes" xml:space="preserve">
          <source>In the case of a premature connection close before the response is received, the following events will be emitted in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918cb5bc54bb7c658a3c96576889997c72299bef" translate="yes" xml:space="preserve">
          <source>In the case where a developer may need to retain a small chunk of memory from a pool for an indeterminate amount of time, it may be appropriate to create an un-pooled &lt;code&gt;Buffer&lt;/code&gt; instance using &lt;code&gt;SlowBuffer&lt;/code&gt; then copy out the relevant bits.</source>
          <target state="translated">如果开发人员可能需要在不确定的时间内从池中保留一小块内存，则可以使用 &lt;code&gt;SlowBuffer&lt;/code&gt; 创建一个非池化的 &lt;code&gt;Buffer&lt;/code&gt; 实例，然后复制出相关的位，这是合适的。</target>
        </trans-unit>
        <trans-unit id="02ef5ea159bcc99b4a4ae1f2a88941efdfec9000" translate="yes" xml:space="preserve">
          <source>In the event of an unrecoverable error in a native module, a fatal error can be thrown to immediately terminate the process.</source>
          <target state="translated">在原生模块发生不可恢复的错误时,可以抛出一个致命的错误来立即终止进程。</target>
        </trans-unit>
        <trans-unit id="2b5ef3b0128e137344ad3cbe4a5087a73a781f41" translate="yes" xml:space="preserve">
          <source>In the example &lt;code&gt;req.end()&lt;/code&gt; was called. With &lt;code&gt;http.request()&lt;/code&gt; one must always call &lt;code&gt;req.end()&lt;/code&gt; to signify the end of the request - even if there is no data being written to the request body.</source>
          <target state="translated">在示例中，调用了 &lt;code&gt;req.end()&lt;/code&gt; 。使用 &lt;code&gt;http.request()&lt;/code&gt; ,必须始终调用 &lt;code&gt;req.end()&lt;/code&gt; 来表示请求结束-即使没有数据写入请求主体。</target>
        </trans-unit>
        <trans-unit id="ee4ef00df3b73a5938a813feaf72104024931ba1" translate="yes" xml:space="preserve">
          <source>In the following algorithms, all subroutine errors are propagated as errors of these top-level routines unless stated otherwise.</source>
          <target state="translated">在以下算法中,除非另有说明,否则所有的子程序错误都会作为这些顶层例程的错误进行传播。</target>
        </trans-unit>
        <trans-unit id="fa725afe5295f20910c112028ae94f2b56a1a734" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;flush()&lt;/code&gt; is used to write a compressed partial HTTP response to the client:</source>
          <target state="translated">在下面的示例中， &lt;code&gt;flush()&lt;/code&gt; 用于向客户端写入压缩的部分HTTP响应：</target>
        </trans-unit>
        <trans-unit id="bf82ec3610a7aca0a8ed51fb8b215927e85734d4" translate="yes" xml:space="preserve">
          <source>In the following example, for instance, a new &lt;code&gt;Transform&lt;/code&gt; stream (which is a type of &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream) is created that has an object mode &lt;code&gt;Writable&lt;/code&gt; side that accepts JavaScript numbers that are converted to hexadecimal strings on the &lt;code&gt;Readable&lt;/code&gt; side.</source>
          <target state="translated">在下面的示例中，例如，一个新的 &lt;code&gt;Transform&lt;/code&gt; 流（其是一种类型的&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;流）被创建，其具有对象模式 &lt;code&gt;Writable&lt;/code&gt; 接受被转换为十六进制字符串上JavaScript的数字侧 &lt;code&gt;Readable&lt;/code&gt; 侧。</target>
        </trans-unit>
        <trans-unit id="7c0fb3c9414cf1c8a8bda6e4b07edf6163cccd34" translate="yes" xml:space="preserve">
          <source>In the following example, only the child's fd &lt;code&gt;1&lt;/code&gt; (stdout) is configured as a pipe, so only the parent's &lt;code&gt;subprocess.stdio[1]&lt;/code&gt; is a stream, all other values in the array are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">在以下示例中，仅将子级的fd &lt;code&gt;1&lt;/code&gt; （stdout）配置为管道，因此只有父级的 &lt;code&gt;subprocess.stdio[1]&lt;/code&gt; 是流，数组中的所有其他值均为 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0de61ebd59a8526600cd416227b8b1e35a46645a" translate="yes" xml:space="preserve">
          <source>In the following example, the three UTF-8 encoded bytes of the European Euro symbol (&lt;code&gt;&amp;euro;&lt;/code&gt;) are written over three separate operations:</source>
          <target state="translated">在以下示例中，欧洲欧元符号（ &lt;code&gt;&amp;euro;&lt;/code&gt; ）的三个UTF-8编码字节是通过三个单独的操作编写的：</target>
        </trans-unit>
        <trans-unit id="67b32ff656d65a26d312747226fead13fb28eaac" translate="yes" xml:space="preserve">
          <source>In the last three cases &lt;code&gt;actual&lt;/code&gt;, &lt;code&gt;expected&lt;/code&gt;, and &lt;code&gt;operator&lt;/code&gt; have no influence on the error message.</source>
          <target state="translated">在最后三种情况下， &lt;code&gt;actual&lt;/code&gt; ， &lt;code&gt;expected&lt;/code&gt; 和 &lt;code&gt;operator&lt;/code&gt; 对错误消息没有影响。</target>
        </trans-unit>
        <trans-unit id="fb96692d68fa67ba34d26bf28629f0c68833dc44" translate="yes" xml:space="preserve">
          <source>In the master this sends a message to a specific worker. It is identical to &lt;a href=&quot;child_process#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;ChildProcess.send()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在主服务器中，这会将消息发送给特定的工作人员。它与&lt;a href=&quot;child_process#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;ChildProcess.send()&lt;/code&gt; &lt;/a&gt;相同。</target>
        </trans-unit>
        <trans-unit id="f382762e386304b924761ff709bc435737f82042" translate="yes" xml:space="preserve">
          <source>In the master, an internal message is sent to the worker causing it to call &lt;code&gt;.disconnect()&lt;/code&gt; on itself.</source>
          <target state="translated">在主服务器中，内部消息被发送给工作程序，导致其自身调用 &lt;code&gt;.disconnect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="47d8c3363f2d2eb56cc1c395f156dd4f776263e2" translate="yes" xml:space="preserve">
          <source>In the preceding example, 30,000 deflate instances are created concurrently. Because of how some operating systems handle memory allocation and deallocation, this may lead to to significant memory fragmentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fb2a46c3495adde1bdbd6a72aa0fe0f5338274" translate="yes" xml:space="preserve">
          <source>In the scenario of writing to a writable stream from an async iterator, it is important to ensure the correct handling of backpressure and errors.</source>
          <target state="translated">在从异步迭代器写入可写流的场景中,确保正确处理背压和错误很重要。</target>
        </trans-unit>
        <trans-unit id="0ce5fad120b64ee42264f01dfdc44ee7b983178a" translate="yes" xml:space="preserve">
          <source>In this case the entire API surface, including any experimental APIs, will be available to the module code.</source>
          <target state="translated">在这种情况下,整个API表面,包括任何实验性的API,将被模块代码所使用。</target>
        </trans-unit>
        <trans-unit id="8211aa9015b5d9d4b17ecb481815c6ab35412ee7" translate="yes" xml:space="preserve">
          <source>In this case, the microtask scheduled through &lt;code&gt;promise.then()&lt;/code&gt; will be run before returning from &lt;code&gt;vm.runInNewContext()&lt;/code&gt;, and will be interrupted by the &lt;code&gt;timeout&lt;/code&gt; functionality. This applies only to code running in a &lt;code&gt;vm.Context&lt;/code&gt;, so e.g. &lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt;&lt;code&gt;vm.runInThisContext()&lt;/code&gt;&lt;/a&gt; does not take this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3340c556f6543bec062f3b2ed6d553b3150156a1" translate="yes" xml:space="preserve">
          <source>In this example case, it is possible to track the rejection as a developer error as would typically be the case for other &lt;code&gt;'unhandledRejection'&lt;/code&gt; events. To address such failures, a non-operational &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;.catch(() =&amp;gt; { })&lt;/code&gt;&lt;/a&gt; handler may be attached to &lt;code&gt;resource.loaded&lt;/code&gt;, which would prevent the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event from being emitted.</source>
          <target state="translated">在此示例情况下，可以像其他 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 的拒绝&amp;rdquo;事件通常那样，将拒绝作为开发人员错误进行跟踪。为了解决此类故障，可以将非操作性&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt; &lt;code&gt;.catch(() =&amp;gt; { })&lt;/code&gt; &lt;/a&gt;处理函数附加到 &lt;code&gt;resource.loaded&lt;/code&gt; ，这将防止发出 &lt;code&gt;'unhandledRejection'&lt;/code&gt; 事件。</target>
        </trans-unit>
        <trans-unit id="b30d924ce86ebcb8be4941fadb4d24eb63050b49" translate="yes" xml:space="preserve">
          <source>In this example, adding any actual hook function enabled the tracking of promises. There are two promises in the example above; the promise created by &lt;code&gt;Promise.resolve()&lt;/code&gt; and the promise returned by the call to &lt;code&gt;then()&lt;/code&gt;. In the example above, the first promise got the &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;6&lt;/code&gt; and the latter got &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;7&lt;/code&gt;. During the execution of the &lt;code&gt;then()&lt;/code&gt; callback, we are executing in the context of promise with &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;7&lt;/code&gt;. This promise was triggered by async resource &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">在此示例中，添加任何实际的挂钩函数都可以跟踪承诺。上面的示例中有两个承诺：通过创建的承诺 &lt;code&gt;Promise.resolve()&lt;/code&gt; 并通过调用返回的承诺 &lt;code&gt;then()&lt;/code&gt; 。在上面的示例中，第一个承诺获得 &lt;code&gt;asyncId&lt;/code&gt; &lt;code&gt;6&lt;/code&gt; ，而后者获得 &lt;code&gt;asyncId&lt;/code&gt; &lt;code&gt;7&lt;/code&gt; 。在执行 &lt;code&gt;then()&lt;/code&gt; 回调期间，我们在 &lt;code&gt;asyncId&lt;/code&gt; &lt;code&gt;7&lt;/code&gt; 的promise上下文中执行。这个承诺是由异步资源 &lt;code&gt;6&lt;/code&gt; 触发的。</target>
        </trans-unit>
        <trans-unit id="f2c1f79c71778e1324e95e72ef55b00fad51c2b3" translate="yes" xml:space="preserve">
          <source>In this example, an &lt;code&gt;Error&lt;/code&gt; object is generated internally by &lt;code&gt;process.emitWarning()&lt;/code&gt; and passed through to the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="translated">在此示例中， &lt;code&gt;Error&lt;/code&gt; 对象由 &lt;code&gt;process.emitWarning()&lt;/code&gt; 内部生成，并传递给&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt;处理程序。</target>
        </trans-unit>
        <trans-unit id="75d63ff46a64b4f575facc6bfa8055c873dc89f8" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;d.on('error')&lt;/code&gt; handler will be triggered, rather than crashing the program.</source>
          <target state="translated">在此示例中，将触发 &lt;code&gt;d.on('error')&lt;/code&gt; 处理函数，而不是使程序崩溃。</target>
        </trans-unit>
        <trans-unit id="4a2f4cd6b751dfe743b9e57f92471b943ba9aa8e" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;unhandledRejections&lt;/code&gt;&lt;code&gt;Map&lt;/code&gt; will grow and shrink over time, reflecting rejections that start unhandled and then become handled. It is possible to record such errors in an error log, either periodically (which is likely best for long-running application) or upon process exit (which is likely most convenient for scripts).</source>
          <target state="translated">在此示例中， &lt;code&gt;unhandledRejections&lt;/code&gt; &lt;code&gt;Map&lt;/code&gt; 将随时间增长和收缩，反映出拒绝是在未处理的情况下开始处理然后被处理的。可以定期（对于长期运行的应用程序最好）或在进程退出时（对于脚本最方便）将此类错误记录在错误日志中。</target>
        </trans-unit>
        <trans-unit id="f2a9e0f5e7284af8b7d1cd8e4c8dee1cd1759793" translate="yes" xml:space="preserve">
          <source>In this example, the callback function is invoked synchronously.</source>
          <target state="translated">在这个例子中,回调函数是同步调用的。</target>
        </trans-unit>
        <trans-unit id="b1ae140087d25d149461331902a072314e871a3f" translate="yes" xml:space="preserve">
          <source>In this example, the store is only available in the callback function and the functions called by &lt;code&gt;foo&lt;/code&gt;. Outside of &lt;code&gt;run&lt;/code&gt;, calling &lt;code&gt;getStore&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4031e8bbffadc3eeaaece5bccec619b8b40c5fe2" translate="yes" xml:space="preserve">
          <source>In this way, &lt;code&gt;domain&lt;/code&gt; usage goes hand-in-hand with the cluster module, since the master process can fork a new worker when a worker encounters an error. For Node.js programs that scale to multiple machines, the terminating proxy or service registry can take note of the failure, and react accordingly.</source>
          <target state="translated">这样， &lt;code&gt;domain&lt;/code&gt; 使用与群集模块紧密结合，因为当工作进程遇到错误时，主进程可以派生新的工作进程。对于可扩展到多台计算机的Node.js程序，终止代理或服务注册表可以记录故障并做出相应反应。</target>
        </trans-unit>
        <trans-unit id="f3c8ce86c05cf45e881c8b88dcfc90bac15ce63e" translate="yes" xml:space="preserve">
          <source>In this way, the common &lt;code&gt;if (err) return callback(err);&lt;/code&gt; pattern can be replaced with a single error handler in a single place.</source>
          <target state="translated">这样，常见的 &lt;code&gt;if (err) return callback(err);&lt;/code&gt; 模式可以在单个位置替换为单个错误处理程序。</target>
        </trans-unit>
        <trans-unit id="8f1593e2fa0de1cde7649f366647211411e84269" translate="yes" xml:space="preserve">
          <source>In versions of Node.js prior to 6.0.0, &lt;code&gt;Buffer&lt;/code&gt; instances were created using the &lt;code&gt;Buffer&lt;/code&gt; constructor function, which allocates the returned &lt;code&gt;Buffer&lt;/code&gt; differently based on what arguments are provided:</source>
          <target state="translated">在6.0.0之前的Node.js版本中，使用 &lt;code&gt;Buffer&lt;/code&gt; 构造函数创建 &lt;code&gt;Buffer&lt;/code&gt; 实例，该函数根据提供的参数不同地分配返回的 &lt;code&gt;Buffer&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="832c4629f7e8996e07e8102ea0fa28b91da7e64c" translate="yes" xml:space="preserve">
          <source>Inadequate Security</source>
          <target state="translated">安全性不足</target>
        </trans-unit>
        <trans-unit id="a04fbe86378e32032371c210b82217db52298dd6" translate="yes" xml:space="preserve">
          <source>Increases indentation of subsequent lines by spaces for &lt;code&gt;groupIndentation&lt;/code&gt; length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00695bb607f52dab548ebe840966ef926ce5e82c" translate="yes" xml:space="preserve">
          <source>Increases indentation of subsequent lines by two spaces.</source>
          <target state="translated">将后续行的缩进增加两个空格。</target>
        </trans-unit>
        <trans-unit id="1d70be8dce5ba727bab7ab54dcd1d8109b04da3a" translate="yes" xml:space="preserve">
          <source>Indexed properties can be set in a similar manner. Consider the following JavaScript snippet:</source>
          <target state="translated">索引属性也可以用类似的方式进行设置。考虑以下JavaScript片段。</target>
        </trans-unit>
        <trans-unit id="6a9226b31bce95d0e64d3b93d51517a2e18a0695" translate="yes" xml:space="preserve">
          <source>Indicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval/print script is supplied prior to this, then the next argument is used as a script filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe35ae027c5117ae3dcbc4f4499564544b6855c" translate="yes" xml:space="preserve">
          <source>Indicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval/print script is supplied prior to this, then the next argument will be used as a script filename.</source>
          <target state="translated">表示节点选项的结束。将其余的参数传递给脚本,如果在这之前没有提供脚本文件名或eval/print脚本,那么下一个参数将作为脚本文件名。如果在此之前没有提供脚本文件名或 eval/print 脚本,那么下一个参数将被用作脚本文件名。</target>
        </trans-unit>
        <trans-unit id="99d425840951d8be042af09d1dcf66a17ffc427c" translate="yes" xml:space="preserve">
          <source>Indicate whether to treat &lt;code&gt;TypedArray&lt;/code&gt; and &lt;code&gt;DataView&lt;/code&gt; objects as host objects, i.e. pass them to &lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt;&lt;code&gt;serializer._writeHostObject()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指示是否将 &lt;code&gt;TypedArray&lt;/code&gt; 和 &lt;code&gt;DataView&lt;/code&gt; 对象视为宿主对象，即将它们传递给&lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt; &lt;code&gt;serializer._writeHostObject()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb592b621da88223e8c8eeaa77068b4a45722a59" translate="yes" xml:space="preserve">
          <source>Indicates a bad protocol option.</source>
          <target state="translated">表示协议选项不好。</target>
        </trans-unit>
        <trans-unit id="8ce04c2ac7352b9f26f40319a3e76118d2aa0de4" translate="yes" xml:space="preserve">
          <source>Indicates a broken pipe.</source>
          <target state="translated">表示管道破损。</target>
        </trans-unit>
        <trans-unit id="af50c58faad8a1bc38a6c9a13abb8207dd6be3b4" translate="yes" xml:space="preserve">
          <source>Indicates a protocol error.</source>
          <target state="translated">表示协议错误。</target>
        </trans-unit>
        <trans-unit id="ed6600816a977d05967d85edb3fba53ca13ec802" translate="yes" xml:space="preserve">
          <source>Indicates a stale file handle reference.</source>
          <target state="translated">表示文件句柄引用已过期。</target>
        </trans-unit>
        <trans-unit id="970e3b5809af80329b70563fbfeafb59b12d099d" translate="yes" xml:space="preserve">
          <source>Indicates a system call failure.</source>
          <target state="translated">表示系统呼叫失败。</target>
        </trans-unit>
        <trans-unit id="47f9d21b2e00f4702c7ba7173aab1e2e364d4334" translate="yes" xml:space="preserve">
          <source>Indicates an exec format error.</source>
          <target state="translated">表示执行格式错误。</target>
        </trans-unit>
        <trans-unit id="7cc6e95cd367c61b66f24c7fe172fdd4c8923fd1" translate="yes" xml:space="preserve">
          <source>Indicates an expired timer.</source>
          <target state="translated">表示定时器过期。</target>
        </trans-unit>
        <trans-unit id="1c6d7b9adaac7927a8389d72c9d49641a39dfb73" translate="yes" xml:space="preserve">
          <source>Indicates an illegal byte sequence.</source>
          <target state="translated">表示一个非法的字节序列。</target>
        </trans-unit>
        <trans-unit id="c2399784693d157cc9db6a7d56a6802acafd3410" translate="yes" xml:space="preserve">
          <source>Indicates an improper link.</source>
          <target state="translated">表示链接不当。</target>
        </trans-unit>
        <trans-unit id="f5096800752c0124499ffda65a06e130ca52bf58" translate="yes" xml:space="preserve">
          <source>Indicates an inappropriate I/O control operation.</source>
          <target state="translated">表示不适当的I/O控制操作。</target>
        </trans-unit>
        <trans-unit id="47bec5da438c0efb0d77c5a830b93909367a15cd" translate="yes" xml:space="preserve">
          <source>Indicates an interrupted function call.</source>
          <target state="translated">表示函数调用中断。</target>
        </trans-unit>
        <trans-unit id="f90c9f7ea77891094deecf8791df2b6a6f6e7be0" translate="yes" xml:space="preserve">
          <source>Indicates an invalid data message.</source>
          <target state="translated">表示无效的数据信息。</target>
        </trans-unit>
        <trans-unit id="9c88760d39d665b5ee4f2cedcdae333c06a2e638" translate="yes" xml:space="preserve">
          <source>Indicates an invalid file handle.</source>
          <target state="translated">表示无效的文件句柄。</target>
        </trans-unit>
        <trans-unit id="e973fa6216cda928d3b1ff9110620c4c3f989631" translate="yes" xml:space="preserve">
          <source>Indicates an invalid pointer address.</source>
          <target state="translated">表示无效的指针地址。</target>
        </trans-unit>
        <trans-unit id="542f438ea8fb2199f934997e9825630c4ad77ec3" translate="yes" xml:space="preserve">
          <source>Indicates an invalid seek operation.</source>
          <target state="translated">表示无效的寻找操作。</target>
        </trans-unit>
        <trans-unit id="ec1cddd818d2d11c606513689ef95576ae628a23" translate="yes" xml:space="preserve">
          <source>Indicates an invalid service provider.</source>
          <target state="translated">表示无效的服务提供者。</target>
        </trans-unit>
        <trans-unit id="ca69bd9871d6b4b835be2cc5b7e303a5aeb76ba5" translate="yes" xml:space="preserve">
          <source>Indicates an otherwise unspecified I/O error.</source>
          <target state="translated">表示一个未指明的I/O错误。</target>
        </trans-unit>
        <trans-unit id="93e1ce7f1ec33ca5400e5c2d49688b755daf62ba" translate="yes" xml:space="preserve">
          <source>Indicates insufficient permissions to complete the operation.</source>
          <target state="translated">表示权限不足,无法完成操作。</target>
        </trans-unit>
        <trans-unit id="1ea06b534d77b7af671ce8399f89fdee2b70e93d" translate="yes" xml:space="preserve">
          <source>Indicates no such device or address.</source>
          <target state="translated">表示无此设备或地址。</target>
        </trans-unit>
        <trans-unit id="b3bb95ecdaaf6e1c491e89dc55bdf4ada5917b17" translate="yes" xml:space="preserve">
          <source>Indicates that a class type was not found.</source>
          <target state="translated">表示没有找到一个类的类型。</target>
        </trans-unit>
        <trans-unit id="a078deb966b1f0dbb2923905efd3bfa3c6936245" translate="yes" xml:space="preserve">
          <source>Indicates that a database query was refused.</source>
          <target state="translated">表示数据库查询被拒绝。</target>
        </trans-unit>
        <trans-unit id="5b0136ce90dcbd9af267c4da8409264b6bd7ceca" translate="yes" xml:space="preserve">
          <source>Indicates that a destination address is required.</source>
          <target state="translated">表示需要一个目的地址。</target>
        </trans-unit>
        <trans-unit id="65b88689f4254cf59cbd36c90757eba4ed54d095" translate="yes" xml:space="preserve">
          <source>Indicates that a device or resource is busy.</source>
          <target state="translated">表示设备或资源繁忙。</target>
        </trans-unit>
        <trans-unit id="9096f517c393ffbea05056d33a410bb9d60b9052" translate="yes" xml:space="preserve">
          <source>Indicates that a file descriptor is not valid.</source>
          <target state="translated">表示文件描述符无效。</target>
        </trans-unit>
        <trans-unit id="077d00dbf6c0ccd17eaf6e1e436cd24460670b70" translate="yes" xml:space="preserve">
          <source>Indicates that a function call was interrupted.</source>
          <target state="translated">表示函数调用被中断。</target>
        </trans-unit>
        <trans-unit id="32434c08cff7624431ad07e73db693f189e5d592" translate="yes" xml:space="preserve">
          <source>Indicates that a function has not been implemented.</source>
          <target state="translated">表示某函数尚未执行。</target>
        </trans-unit>
        <trans-unit id="74b21789e4d047a87bbefcae69e223e57c0e7bc1" translate="yes" xml:space="preserve">
          <source>Indicates that a given operation is not supported.</source>
          <target state="translated">表示不支持某项操作。</target>
        </trans-unit>
        <trans-unit id="08aa9ba556ae45765e72b0f04829db3b1e21a970" translate="yes" xml:space="preserve">
          <source>Indicates that a given protocol is not available.</source>
          <target state="translated">表示某项协议不可用。</target>
        </trans-unit>
        <trans-unit id="9ccae215e314e41ad23dfb2f6f21781ee668e8a7" translate="yes" xml:space="preserve">
          <source>Indicates that a given resource is not a stream.</source>
          <target state="translated">表示给定资源不是流。</target>
        </trans-unit>
        <trans-unit id="922181aef7cb91ecc745d786636e602f8d8746de" translate="yes" xml:space="preserve">
          <source>Indicates that a graceful shutdown is in progress.</source>
          <target state="translated">表示正在进行优雅的关闭。</target>
        </trans-unit>
        <trans-unit id="2cfcd2648b9d53561c3025491875a16bef0d4576" translate="yes" xml:space="preserve">
          <source>Indicates that a multihop was attempted.</source>
          <target state="translated">表示已尝试多跳。</target>
        </trans-unit>
        <trans-unit id="372b49dc7ed23c93af3008079025984775b9a0a1" translate="yes" xml:space="preserve">
          <source>Indicates that a name cannot be translated.</source>
          <target state="translated">表示不能翻译名称。</target>
        </trans-unit>
        <trans-unit id="cb0450ee237990615ef0438fa979bfc59059b2b2" translate="yes" xml:space="preserve">
          <source>Indicates that a name was too long.</source>
          <target state="translated">表示一个名字太长。</target>
        </trans-unit>
        <trans-unit id="b454765c5ab209985df1dbfb4d65a1bff4292245" translate="yes" xml:space="preserve">
          <source>Indicates that a network host is down.</source>
          <target state="translated">表示网络主机宕机。</target>
        </trans-unit>
        <trans-unit id="5bcf54d6293dc7770b625573d31b031e6f7b608c" translate="yes" xml:space="preserve">
          <source>Indicates that a program is not valid JavaScript. These errors may only be generated and propagated as a result of code evaluation. Code evaluation may happen as a result of &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, or &lt;a href=&quot;vm&quot;&gt;vm&lt;/a&gt;. These errors are almost always indicative of a broken program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830228d8de255623ef067539c11b71452b1b48e0" translate="yes" xml:space="preserve">
          <source>Indicates that a protocol is not supported.</source>
          <target state="translated">表示不支持某个协议。</target>
        </trans-unit>
        <trans-unit id="fb0db3310f6fa82a141f97f8c665cfadbcabb020" translate="yes" xml:space="preserve">
          <source>Indicates that a provided argument is not an allowable type. For example, passing a function to a parameter which expects a string would be a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97014940f0f7f3168721a0513da09d5c372e74a" translate="yes" xml:space="preserve">
          <source>Indicates that a provided argument was not within the set or range of acceptable values for a function; whether that is a numeric range, or outside the set of options for a given function parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d0760b68dc2b9e3234f32c458f8a15a66f253a" translate="yes" xml:space="preserve">
          <source>Indicates that a resource deadlock has been avoided.</source>
          <target state="translated">表示已经避免了资源死锁。</target>
        </trans-unit>
        <trans-unit id="57423d447a54dca4cdf2140de632822c67c31e39" translate="yes" xml:space="preserve">
          <source>Indicates that a resource is temporarily unavailable.</source>
          <target state="translated">表示资源暂时不可用。</target>
        </trans-unit>
        <trans-unit id="c0b30d5efeba61a960acda84ef5df098d46eae0f" translate="yes" xml:space="preserve">
          <source>Indicates that a service was not found.</source>
          <target state="translated">表示未找到服务。</target>
        </trans-unit>
        <trans-unit id="2128a64f48d84403ea51f2253aaedfb90b12afd6" translate="yes" xml:space="preserve">
          <source>Indicates that a text file is busy.</source>
          <target state="translated">表示文本文件繁忙。</target>
        </trans-unit>
        <trans-unit id="3789cc087d5c8e5368437244d2068b7da97884fe" translate="yes" xml:space="preserve">
          <source>Indicates that a value is too large to be stored in a given data type.</source>
          <target state="translated">表示一个值太大,无法存储在给定的数据类型中。</target>
        </trans-unit>
        <trans-unit id="119dde472605c62e07c67fc1eb210d45a22024ad" translate="yes" xml:space="preserve">
          <source>Indicates that an argument is out of the domain of the function.</source>
          <target state="translated">表示一个参数在函数的域外。</target>
        </trans-unit>
        <trans-unit id="ba87fc5d415a17cd82523be1ea2df374e0511f76" translate="yes" xml:space="preserve">
          <source>Indicates that an attempt is being made to access a variable that is not defined. Such errors commonly indicate typos in code, or an otherwise broken program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206c12d38e5f031ad2d2a6389b829af57d9dcd48" translate="yes" xml:space="preserve">
          <source>Indicates that an invalid argument was passed.</source>
          <target state="translated">表示传递了一个无效的参数。</target>
        </trans-unit>
        <trans-unit id="18f885333d175807022b890e71c998dfc2743f45" translate="yes" xml:space="preserve">
          <source>Indicates that an invalid argument was provided.</source>
          <target state="translated">表示提供了一个无效的参数。</target>
        </trans-unit>
        <trans-unit id="39125118a5a05fdb14d46044b0ea226b675a9877" translate="yes" xml:space="preserve">
          <source>Indicates that an operation has been canceled.</source>
          <target state="translated">表示操作已被取消。</target>
        </trans-unit>
        <trans-unit id="a1d4a2a79fb94045c9c939b6febc16183fe9de98" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is already in progress.</source>
          <target state="translated">表示操作已在进行中。</target>
        </trans-unit>
        <trans-unit id="948ed5bc8d3bcef9cb214d0bff38ef1f9cbb6092" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is currently in progress.</source>
          <target state="translated">表示当前正在进行的操作。</target>
        </trans-unit>
        <trans-unit id="986c5f3c1884501bbd01dbd74ec96d7ee20da1ba" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is not supported on the socket. Although &lt;code&gt;ENOTSUP&lt;/code&gt; and &lt;code&gt;EOPNOTSUPP&lt;/code&gt; have the same value on Linux, according to POSIX.1 these error values should be distinct.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9fc2a88443f1bd9bcd796a3c09a586342edc14" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is not supported on the socket. Note that while &lt;code&gt;ENOTSUP&lt;/code&gt; and &lt;code&gt;EOPNOTSUPP&lt;/code&gt; have the same value on Linux, according to POSIX.1 these error values should be distinct.)</source>
          <target state="translated">指示套接字不支持该操作。请注意，虽然 &lt;code&gt;ENOTSUP&lt;/code&gt; 和 &lt;code&gt;EOPNOTSUPP&lt;/code&gt; 在Linux上具有相同的值，但根据POSIX.1，这些错误值应该是不同的。）</target>
        </trans-unit>
        <trans-unit id="4c078047af5f70ba3758bfb52a630d790c966eef" translate="yes" xml:space="preserve">
          <source>Indicates that an operation was canceled.</source>
          <target state="translated">表示操作被取消。</target>
        </trans-unit>
        <trans-unit id="4e4c46f02c3fe5b062d6dee34e96956cdbf1d2ef" translate="yes" xml:space="preserve">
          <source>Indicates that data cannot be sent after the socket has been shutdown.</source>
          <target state="translated">表示套接字关闭后不能发送数据。</target>
        </trans-unit>
        <trans-unit id="5d4b71c7fe6eb8dcca0374a54346d6d8ee080a7d" translate="yes" xml:space="preserve">
          <source>Indicates that no buffer space is available.</source>
          <target state="translated">表示没有缓冲空间可用。</target>
        </trans-unit>
        <trans-unit id="fb5fe0bc009a449b0c131d1b39cee3df3ec53be6" translate="yes" xml:space="preserve">
          <source>Indicates that no message is available on the stream head read queue.</source>
          <target state="translated">表示流头读取队列中没有消息。</target>
        </trans-unit>
        <trans-unit id="76b762b35b459e2a3f4130aaecebcc05d526dd1d" translate="yes" xml:space="preserve">
          <source>Indicates that successful WSAStartup has not yet been performed.</source>
          <target state="translated">表示尚未成功启动WSAStartup。</target>
        </trans-unit>
        <trans-unit id="48d443e903069b79fc6fc8e876cd1f59a55ab321" translate="yes" xml:space="preserve">
          <source>Indicates that the &lt;code&gt;winsock.dll&lt;/code&gt; version is out of range.</source>
          <target state="translated">表示 &lt;code&gt;winsock.dll&lt;/code&gt; 版本超出范围。</target>
        </trans-unit>
        <trans-unit id="f8b67731347b7d3d1a2fb104a016252967ec1f8a" translate="yes" xml:space="preserve">
          <source>Indicates that the address family is not supported.</source>
          <target state="translated">表示不支持地址族。</target>
        </trans-unit>
        <trans-unit id="5593d5f8a211a9b9a1628f4eb1448ba6b26682d7" translate="yes" xml:space="preserve">
          <source>Indicates that the call was canceled.</source>
          <target state="translated">表示该电话被取消。</target>
        </trans-unit>
        <trans-unit id="e0a53ecfeb6b859c1766e6952e74ee72db93b25b" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been aborted by the network.</source>
          <target state="translated">表示连接已被网络中止。</target>
        </trans-unit>
        <trans-unit id="695ee1b1d84ae237c8c3346f15676398969a0d84" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been aborted.</source>
          <target state="translated">表示连接已被中止。</target>
        </trans-unit>
        <trans-unit id="a8362bc4ab7de1fd6ca1112c54f2f53624fc425a" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been refused.</source>
          <target state="translated">表示连接已被拒绝。</target>
        </trans-unit>
        <trans-unit id="757641a9b638d2123741484401860c5f6d474ad0" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been reset by the peer.</source>
          <target state="translated">表示连接已被对等体重置。</target>
        </trans-unit>
        <trans-unit id="e3ae37829bc190196d8da2831b4c0f75007675de" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has timed out.</source>
          <target state="translated">表示连接已超时。</target>
        </trans-unit>
        <trans-unit id="7b4be4d3afaa2e5f45d481ca27450e687b555f25" translate="yes" xml:space="preserve">
          <source>Indicates that the connection timed out.</source>
          <target state="translated">表示连接已超时。</target>
        </trans-unit>
        <trans-unit id="63d73aaa34d8df5ee63adbb0894f6278dfec083d" translate="yes" xml:space="preserve">
          <source>Indicates that the directory is not empty.</source>
          <target state="translated">表示该目录不是空的。</target>
        </trans-unit>
        <trans-unit id="e46d1e52d341e3f224dfa62b18df35ba474687e5" translate="yes" xml:space="preserve">
          <source>Indicates that the disk quota has been exceeded.</source>
          <target state="translated">表示已经超过了磁盘配额。</target>
        </trans-unit>
        <trans-unit id="161c3595104196dd948b18febc343f1bd46f25c7" translate="yes" xml:space="preserve">
          <source>Indicates that the file already exists.</source>
          <target state="translated">表示该文件已经存在。</target>
        </trans-unit>
        <trans-unit id="a60ba5dd633cddcea59d035cdabd5b096d7d3e9a" translate="yes" xml:space="preserve">
          <source>Indicates that the file handle is stale.</source>
          <target state="translated">表示文件句柄已失效。</target>
        </trans-unit>
        <trans-unit id="855b2f5e83d5f45403266942ed6a78a8e48438fd" translate="yes" xml:space="preserve">
          <source>Indicates that the file is too large.</source>
          <target state="translated">表示文件过大。</target>
        </trans-unit>
        <trans-unit id="40663f45ce87393265672016c54db313ad1a6e64" translate="yes" xml:space="preserve">
          <source>Indicates that the file system is read only.</source>
          <target state="translated">表示文件系统只读。</target>
        </trans-unit>
        <trans-unit id="e2436e26e43b92563a743feba4b113fa8a275c36" translate="yes" xml:space="preserve">
          <source>Indicates that the filename is too long.</source>
          <target state="translated">表示文件名太长。</target>
        </trans-unit>
        <trans-unit id="089cc30b91254f5c76ce11943c070ea4bb9e4ffe" translate="yes" xml:space="preserve">
          <source>Indicates that the given item is not a socket.</source>
          <target state="translated">表示该项目不是插座。</target>
        </trans-unit>
        <trans-unit id="55d9efc8d6c36c8b3a99098120e3624ebd4ee169" translate="yes" xml:space="preserve">
          <source>Indicates that the host is unreachable.</source>
          <target state="translated">表示主机无法连接。</target>
        </trans-unit>
        <trans-unit id="6deb274595ac102e6a95cf0fda8844325c2402b2" translate="yes" xml:space="preserve">
          <source>Indicates that the identifier has been removed.</source>
          <target state="translated">表示该标识符已被删除。</target>
        </trans-unit>
        <trans-unit id="16385ed77106de084d977545579771db76e25687" translate="yes" xml:space="preserve">
          <source>Indicates that the item is remote.</source>
          <target state="translated">表示该项目是远程的。</target>
        </trans-unit>
        <trans-unit id="cd0453304f970d9c1105ea3bd64f4cc2e4c65c32" translate="yes" xml:space="preserve">
          <source>Indicates that the list of arguments is longer than expected.</source>
          <target state="translated">表示参数列表比预期长。</target>
        </trans-unit>
        <trans-unit id="bfafda04ebb20ac0339f69bfb2547f21a46f2b4c" translate="yes" xml:space="preserve">
          <source>Indicates that the message size is too long.</source>
          <target state="translated">表示信息大小太长。</target>
        </trans-unit>
        <trans-unit id="28f8f8a59da191885b3db8e166955be99443a142" translate="yes" xml:space="preserve">
          <source>Indicates that the network address family is not supported.</source>
          <target state="translated">表示不支持网络地址族。</target>
        </trans-unit>
        <trans-unit id="b1b3a54983042b769b394e9481c90955db44eede" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is already in use.</source>
          <target state="translated">表示网络地址已经在使用中。</target>
        </trans-unit>
        <trans-unit id="8f10c1721305ff9e8e66fc7ac1a7b82f41551e9d" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is currently unavailable for use.</source>
          <target state="translated">表示网络地址目前不可用。</target>
        </trans-unit>
        <trans-unit id="a794b8e798681860dc3c2cd356736564119b7aaa" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is not available.</source>
          <target state="translated">表示网络地址不可用。</target>
        </trans-unit>
        <trans-unit id="b452c6966555edcc5055e10c8498f2a68f0760bc" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been aborted.</source>
          <target state="translated">表示网络连接已被中止。</target>
        </trans-unit>
        <trans-unit id="4764d277de78c1ce7c30015888e50a4502c04cda" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been refused.</source>
          <target state="translated">表示网络连接已被拒绝。</target>
        </trans-unit>
        <trans-unit id="9b9818c6db8926eb6f8490fe27a113f4e4f48bd3" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been reset.</source>
          <target state="translated">表示网络连接已被重置。</target>
        </trans-unit>
        <trans-unit id="0e4630ae08750c7cc87ea20c36c05978a40c3365" translate="yes" xml:space="preserve">
          <source>Indicates that the network is down.</source>
          <target state="translated">表示网络瘫痪。</target>
        </trans-unit>
        <trans-unit id="4af29b3221c7857a372f20709460cf0cf423ed12" translate="yes" xml:space="preserve">
          <source>Indicates that the network is unreachable.</source>
          <target state="translated">表示网络无法到达。</target>
        </trans-unit>
        <trans-unit id="368c2e27b0922fb850ee9cc185aaaabf0f6f0c72" translate="yes" xml:space="preserve">
          <source>Indicates that the network subsystem is not ready.</source>
          <target state="translated">表示网络子系统尚未准备好。</target>
        </trans-unit>
        <trans-unit id="383ae045925743a63505cb92d9281c853dfbcc7c" translate="yes" xml:space="preserve">
          <source>Indicates that the operation did not have sufficient permissions.</source>
          <target state="translated">表示该操作没有足够的权限。</target>
        </trans-unit>
        <trans-unit id="2bcee5ac45f4a21f13696f8ffe7c93a2d766ac8a" translate="yes" xml:space="preserve">
          <source>Indicates that the operation is not permitted.</source>
          <target state="translated">表示不允许操作。</target>
        </trans-unit>
        <trans-unit id="65f9f362c2c3c2f761dab77a4a911af304ad3f33" translate="yes" xml:space="preserve">
          <source>Indicates that the operation is not supported.</source>
          <target state="translated">表示不支持该操作。</target>
        </trans-unit>
        <trans-unit id="776c0d89c093c17f22b7b6705dc7e7960302d908" translate="yes" xml:space="preserve">
          <source>Indicates that the operation would block.</source>
          <target state="translated">表示该操作将被阻止。</target>
        </trans-unit>
        <trans-unit id="e117af40033e88e685ebc9243ba8656b98dee296" translate="yes" xml:space="preserve">
          <source>Indicates that the path is a directory.</source>
          <target state="translated">表示该路径是一个目录。</target>
        </trans-unit>
        <trans-unit id="701e0fe25025bc13b6c3ae1b84ed6ee66e9cf69e" translate="yes" xml:space="preserve">
          <source>Indicates that the path is not a directory.</source>
          <target state="translated">表示该路径不是目录。</target>
        </trans-unit>
        <trans-unit id="2d5bc9d82c613e54c1df8c0723a4c03f1298377f" translate="yes" xml:space="preserve">
          <source>Indicates that the procedure call table is invalid.</source>
          <target state="translated">表示过程调用表无效。</target>
        </trans-unit>
        <trans-unit id="03a40bb10c80e6514013b0ad35fa8d777655f104" translate="yes" xml:space="preserve">
          <source>Indicates that the protocol family is not supported.</source>
          <target state="translated">表示不支持协议族。</target>
        </trans-unit>
        <trans-unit id="71af43ae58a0ce69e6cde0af5f6e86a43cb92527" translate="yes" xml:space="preserve">
          <source>Indicates that the protocol is not supported.</source>
          <target state="translated">表示不支持该协议。</target>
        </trans-unit>
        <trans-unit id="96a23e49b5ed1e325f70e865582ab8264afc3fa6" translate="yes" xml:space="preserve">
          <source>Indicates that the provided message is too long.</source>
          <target state="translated">表示提供的信息太长。</target>
        </trans-unit>
        <trans-unit id="74bff985c66849e5fa9d2c2e0ac7cfbb7ceeaf1f" translate="yes" xml:space="preserve">
          <source>Indicates that the resource is not a socket.</source>
          <target state="translated">表示该资源不是套接字。</target>
        </trans-unit>
        <trans-unit id="d33c873c0e43a3d1c20a25c9f226c7397de4abc4" translate="yes" xml:space="preserve">
          <source>Indicates that the results are too large.</source>
          <target state="translated">表示结果太大。</target>
        </trans-unit>
        <trans-unit id="bcf3dc9f9254b168e5ca41afd9d2992ac56a9e00" translate="yes" xml:space="preserve">
          <source>Indicates that the service provider failed to initialized.</source>
          <target state="translated">表示服务提供者初始化失败。</target>
        </trans-unit>
        <trans-unit id="ef5ae11922fe267f93483559945ea71416b14b63" translate="yes" xml:space="preserve">
          <source>Indicates that the socket already has a pending connection in progress.</source>
          <target state="translated">表示该套接字已经有一个正在进行的待定连接。</target>
        </trans-unit>
        <trans-unit id="da9a9c897b5c353995793f4224f6105691fd33a8" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is already connected.</source>
          <target state="translated">表示该插座已经连接。</target>
        </trans-unit>
        <trans-unit id="d63328104df6e2b2399694396579fe9ce96abe0f" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is connected.</source>
          <target state="translated">表示该插座已连接。</target>
        </trans-unit>
        <trans-unit id="8a4539fe8fe18ebf237948a7033f92ffe07cf5b8" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is not connected.</source>
          <target state="translated">表示插座没有连接。</target>
        </trans-unit>
        <trans-unit id="4574e95a6c77d72a0a44c095218843f94a28bb70" translate="yes" xml:space="preserve">
          <source>Indicates that the socket type is not supported.</source>
          <target state="translated">表示不支持套接字类型。</target>
        </trans-unit>
        <trans-unit id="3f8a7729a563a492b558759c17c48de2ac002c94" translate="yes" xml:space="preserve">
          <source>Indicates that the the response is completed, or its underlying connection was terminated prematurely (before the response completion).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14389542f80e2a560b89ba1bb7a23334b01d4c1" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; was closed. Just like &lt;code&gt;'end'&lt;/code&gt;, this event occurs only once per response.</source>
          <target state="translated">指示基础&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;已关闭。就像 &lt;code&gt;'end'&lt;/code&gt; 一样，此事件每个响应仅发生一次。</target>
        </trans-unit>
        <trans-unit id="dfe895c11954545a14b05bd8ad28fa8a7ef0c8b5" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; was terminated before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; was called or able to flush.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4be62dc021781f1f7331af72972eee9db55491" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; was terminated before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; was called or able to flush.</source>
          <target state="translated">指示底层&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;在调用&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;或能够刷新之前被终止。</target>
        </trans-unit>
        <trans-unit id="7d37a8f24a3523e9d164fbb58172c9cd00aa98d6" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying connection was closed.</source>
          <target state="translated">表示基础连接已关闭。</target>
        </trans-unit>
        <trans-unit id="19e0d6007f4cfb102172b1f94dcbf1507928863f" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying connection was terminated.</source>
          <target state="translated">表示基础连接被终止。</target>
        </trans-unit>
        <trans-unit id="260e1df33ddcd4e82330898db6a7ca89ab095d5c" translate="yes" xml:space="preserve">
          <source>Indicates that the user quota has been exceeded.</source>
          <target state="translated">表示已经超过了用户配额。</target>
        </trans-unit>
        <trans-unit id="c18f1d989cebb9a5ccb0014b0a3b804ab18c29c8" translate="yes" xml:space="preserve">
          <source>Indicates that there are no child processes.</source>
          <target state="translated">表示没有子进程。</target>
        </trans-unit>
        <trans-unit id="89b994954e043610752ae496b165c4ad0cfacabb" translate="yes" xml:space="preserve">
          <source>Indicates that there are no locks available.</source>
          <target state="translated">表示没有可用的锁。</target>
        </trans-unit>
        <trans-unit id="6614378fd3d8db903142159b891610453273befe" translate="yes" xml:space="preserve">
          <source>Indicates that there are no more results.</source>
          <target state="translated">表示没有更多的结果。</target>
        </trans-unit>
        <trans-unit id="9c2f963abe2e3b2191a35765acbcd9088625836c" translate="yes" xml:space="preserve">
          <source>Indicates that there are no stream resources available.</source>
          <target state="translated">表示没有可用的溪流资源。</target>
        </trans-unit>
        <trans-unit id="f9a897a9242c6f8deaa685d649f1f37446fe4f32" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many hard links to a file.</source>
          <target state="translated">表示文件的硬链接太多。</target>
        </trans-unit>
        <trans-unit id="e28f98082ba14f699b932ee58bac27df4cf4769d" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many open files.</source>
          <target state="translated">表示打开的文件太多。</target>
        </trans-unit>
        <trans-unit id="f92b6f438bbbad6dd4b5c6e5240708cfc537fc1f" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many processes.</source>
          <target state="translated">表示流程太多。</target>
        </trans-unit>
        <trans-unit id="71d85f876e9626a6491e65d612e9b483bfa7b9cd" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many references.</source>
          <target state="translated">表示参考文献太多。</target>
        </trans-unit>
        <trans-unit id="61082c259368a9f710adafe9a304001eb1fee6c5" translate="yes" xml:space="preserve">
          <source>Indicates that there is currently no data available and to try the operation again later.</source>
          <target state="translated">表示目前没有数据,以后再尝试操作。</target>
        </trans-unit>
        <trans-unit id="b83fced05951abf5691548b4cd2103feaf2c694a" translate="yes" xml:space="preserve">
          <source>Indicates that there is no buffer space available.</source>
          <target state="translated">表示没有可用的缓冲空间。</target>
        </trans-unit>
        <trans-unit id="82fb1de123b047874668f6b2b7144fbdb954fcea" translate="yes" xml:space="preserve">
          <source>Indicates that there is no data available and to try the operation again later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976457834d5fc65d10eefc909f9b879b0f79e739" translate="yes" xml:space="preserve">
          <source>Indicates that there is no message of the desired type.</source>
          <target state="translated">表示没有所需类型的信息。</target>
        </trans-unit>
        <trans-unit id="22073a072089d5c0ffc9dce772a1a7ec08c2c53f" translate="yes" xml:space="preserve">
          <source>Indicates that there is no route to a network host.</source>
          <target state="translated">表示没有通往网络主机的路径。</target>
        </trans-unit>
        <trans-unit id="ee2f6e7184bd083b8b8ad9d4456fd58b427c7808" translate="yes" xml:space="preserve">
          <source>Indicates that there is no space available on the device.</source>
          <target state="translated">表示设备上没有可用空间。</target>
        </trans-unit>
        <trans-unit id="7853ff79915590151db29acfe2f8a05e4231bf78" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such device.</source>
          <target state="translated">表示没有这种设备。</target>
        </trans-unit>
        <trans-unit id="feb99cc3620ddf00d8a100209370656211892cda" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such file or directory.</source>
          <target state="translated">表示没有这样的文件或目录。</target>
        </trans-unit>
        <trans-unit id="46c76f2198f24358bd4c816200de1fcb8af12a78" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such process.</source>
          <target state="translated">表示没有这种程序。</target>
        </trans-unit>
        <trans-unit id="27353c844a6a35a27649ab175b0eb68661ef531a" translate="yes" xml:space="preserve">
          <source>Indicates that there is not enough space.</source>
          <target state="translated">表示没有足够的空间。</target>
        </trans-unit>
        <trans-unit id="915ee7ece9b652c3f36d18624a65020ff4d4c2dc" translate="yes" xml:space="preserve">
          <source>Indicates the failure of an assertion. All errors thrown by the &lt;code&gt;assert&lt;/code&gt; module will be instances of the &lt;code&gt;AssertionError&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cff06c2c1c9eb44ded32d50b847319e14be81c0" translate="yes" xml:space="preserve">
          <source>Indicates the failure of an assertion. For details, see &lt;a href=&quot;assert#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;Class: assert.AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5e1a3736d4e24ec12fb4f0df216bed85b2f1b8" translate="yes" xml:space="preserve">
          <source>Indicates the wrong protocol type for the socket.</source>
          <target state="translated">表示该套接字的协议类型错误。</target>
        </trans-unit>
        <trans-unit id="e8d7594bb044a48ce5960ed97b1c5e185a94eb43" translate="yes" xml:space="preserve">
          <source>Indicates the wrong type of protocol for a socket.</source>
          <target state="translated">表示一个套接字的协议类型错误。</target>
        </trans-unit>
        <trans-unit id="33cd43c392b2eaab3b1a94dfcc9ae9f8cb85a5fb" translate="yes" xml:space="preserve">
          <source>Indicates too many levels of symbolic links in a path.</source>
          <target state="translated">表示路径中的符号链接层次太多。</target>
        </trans-unit>
        <trans-unit id="a1121a0a8baa36b282377bd118336f82d59471e5" translate="yes" xml:space="preserve">
          <source>Indicates too many open files in the system.</source>
          <target state="translated">表示系统中打开的文件太多。</target>
        </trans-unit>
        <trans-unit id="f793ef295cef1dc50901d3c108997d4015097940" translate="yes" xml:space="preserve">
          <source>Indicates whether a callback has been set using &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指示是否已使用&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; &lt;/a&gt;设置了回调。</target>
        </trans-unit>
        <trans-unit id="84abc9bf3d68bcff752515aa207501469e0aa0e9" translate="yes" xml:space="preserve">
          <source>Indicates whether the &lt;code&gt;Http2Session&lt;/code&gt; is currently waiting for acknowledgment of a sent &lt;code&gt;SETTINGS&lt;/code&gt; frame. Will be &lt;code&gt;true&lt;/code&gt; after calling the &lt;code&gt;http2session.settings()&lt;/code&gt; method. Will be &lt;code&gt;false&lt;/code&gt; once all sent &lt;code&gt;SETTINGS&lt;/code&gt; frames have been acknowledged.</source>
          <target state="translated">指示 &lt;code&gt;Http2Session&lt;/code&gt; 当前是否正在等待发送的 &lt;code&gt;SETTINGS&lt;/code&gt; 帧的确认。调用 &lt;code&gt;http2session.settings()&lt;/code&gt; 方法后将为 &lt;code&gt;true&lt;/code&gt; 。一旦所有发送的 &lt;code&gt;SETTINGS&lt;/code&gt; 帧都被确认，将为 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42c22cb8018104ad4a34b76968a323a00574ca11" translate="yes" xml:space="preserve">
          <source>Indications that a link has been severed.</source>
          <target state="translated">表明一个链接已被切断。</target>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="translated">Information</target>
        </trans-unit>
        <trans-unit id="2c6d1039846355bb3c61f905e9d3ba65581c1937" translate="yes" xml:space="preserve">
          <source>Informational HTTP status codes (&lt;code&gt;1xx&lt;/code&gt;) may not be set as the response status code on HTTP/2 responses.</source>
          <target state="translated">信息性HTTP状态代码（ &lt;code&gt;1xx&lt;/code&gt; ）可能未设置为HTTP / 2响应上的响应状态代码。</target>
        </trans-unit>
        <trans-unit id="10f35ea53e49802f840775c3d4b91ff4f9c6035d" translate="yes" xml:space="preserve">
          <source>Inherit the prototype methods from one &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor&quot;&gt;constructor&lt;/a&gt; into another. The prototype of &lt;code&gt;constructor&lt;/code&gt; will be set to a new object created from &lt;code&gt;superConstructor&lt;/code&gt;.</source>
          <target state="translated">将原型方法从一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor&quot;&gt;构造函数&lt;/a&gt;继承到另一个构造函数。 &lt;code&gt;constructor&lt;/code&gt; 的原型将设置为从 &lt;code&gt;superConstructor&lt;/code&gt; 创建的新对象。</target>
        </trans-unit>
        <trans-unit id="1c605479b3766044fe5d8c5e766dca7dfa29eac8" translate="yes" xml:space="preserve">
          <source>Initialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; it is important to remember that an attacker must not be able to predict ahead of time what a given IV will be.</source>
          <target state="translated">初始化向量应该是不可预测和唯一的;理想的情况是,它们将是加密随机的。它们不一定是秘密的:IVs通常只是被添加到未加密的密文信息中。听起来可能很矛盾,有些东西必须是不可预测和唯一的,但不一定是秘密的;重要的是要记住,攻击者一定不能提前预测某个IV会是什么。</target>
        </trans-unit>
        <trans-unit id="c95e5b0cef8d79d14d3cfbaa8b47cbfec97c8155" translate="yes" xml:space="preserve">
          <source>Initialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; remember that an attacker must not be able to predict ahead of time what a given IV will be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81cf0d3001b974f4ab0ead2bdb88c2f9cb54eeb" translate="yes" xml:space="preserve">
          <source>Initializes a history log file for the REPL instance. When executing the Node.js binary and using the command line REPL, a history file is initialized by default. However, this is not the case when creating a REPL programmatically. Use this method to initialize a history log file when working with REPL instances programmatically.</source>
          <target state="translated">为 REPL 实例初始化一个历史日志文件。当执行 Node.js 二进制文件并使用命令行 REPL 时,默认情况下会初始化一个历史文件。然而,当以编程方式创建 REPL 时,情况并非如此。当以编程方式处理 REPL 实例时,请使用此方法初始化历史日志文件。</target>
        </trans-unit>
        <trans-unit id="424343ae6998b53b7b5197e4547912f100930a60" translate="yes" xml:space="preserve">
          <source>Initializes a history log file for the REPL instance. When executing the Node.js binary and using the command-line REPL, a history file is initialized by default. However, this is not the case when creating a REPL programmatically. Use this method to initialize a history log file when working with REPL instances programmatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cdbd02ba690df84da7adc74e183f564120378f" translate="yes" xml:space="preserve">
          <source>Initiate a TCP connection on the given socket.</source>
          <target state="translated">在给定的套接字上发起一个TCP连接。</target>
        </trans-unit>
        <trans-unit id="0d5479f7f1139e75134b5638b844d0e258a74f35" translate="yes" xml:space="preserve">
          <source>Initiate a connection on a given socket.</source>
          <target state="translated">在给定的套接字上发起一个连接。</target>
        </trans-unit>
        <trans-unit id="810ba9b70df6c10d966779b0bafa88ded886aa59" translate="yes" xml:space="preserve">
          <source>Initiate a connection on a given socket. Normally this method is not needed, the socket should be created and opened with &lt;a href=&quot;#net_net_createconnection&quot;&gt;&lt;code&gt;net.createConnection()&lt;/code&gt;&lt;/a&gt;. Use this only when implementing a custom Socket.</source>
          <target state="translated">在给定的套接字上启动连接。通常不需要此方法，应使用&lt;a href=&quot;#net_net_createconnection&quot;&gt; &lt;code&gt;net.createConnection()&lt;/code&gt; &lt;/a&gt;创建和打开套接字。仅在实现自定义Socket时使用此选项。</target>
        </trans-unit>
        <trans-unit id="6043ac861d8556db1f1186a96ea25461c657c5ba" translate="yes" xml:space="preserve">
          <source>Initiate an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; connection on the given socket.</source>
          <target state="translated">在给定的套接字上启动&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;连接。</target>
        </trans-unit>
        <trans-unit id="586faf8bd3a03c92f8cb24c136ad18b37d24ab58" translate="yes" xml:space="preserve">
          <source>Initiates a TCP connection.</source>
          <target state="translated">启动一个TCP连接。</target>
        </trans-unit>
        <trans-unit id="53a4de7eba42de63d90bb804549dc818d7f966d1" translate="yes" xml:space="preserve">
          <source>Initiates a push stream. The callback is invoked with the new &lt;code&gt;Http2Stream&lt;/code&gt; instance created for the push stream passed as the second argument, or an &lt;code&gt;Error&lt;/code&gt; passed as the first argument.</source>
          <target state="translated">启动推送流。使用为作为第二个参数传递的推送流或作为第一个参数传递的 &lt;code&gt;Error&lt;/code&gt; 创建的新 &lt;code&gt;Http2Stream&lt;/code&gt; 实例调用该回调。</target>
        </trans-unit>
        <trans-unit id="9c2bf8ae9d7cffd1a2491dca9b8c27dd7928ed38" translate="yes" xml:space="preserve">
          <source>Initiates a response whose data is read from the given file descriptor. No validation is performed on the given file descriptor. If an error occurs while attempting to read data using the file descriptor, the &lt;code&gt;Http2Stream&lt;/code&gt; will be closed using an &lt;code&gt;RST_STREAM&lt;/code&gt; frame using the standard &lt;code&gt;INTERNAL_ERROR&lt;/code&gt; code.</source>
          <target state="translated">启动一个响应，该响应的数据是从给定的文件描述符中读取的。没有对给定的文件描述符执行验证。如果在试图使用文件描述符来读取数据中出现错误时， &lt;code&gt;Http2Stream&lt;/code&gt; 将使用封闭 &lt;code&gt;RST_STREAM&lt;/code&gt; 使用标准的帧 &lt;code&gt;INTERNAL_ERROR&lt;/code&gt; 代码。</target>
        </trans-unit>
        <trans-unit id="35fb6e9a05f63492052bc71c81678318b03c33a7" translate="yes" xml:space="preserve">
          <source>Initiates an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; connection.</source>
          <target state="translated">启动&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;连接。</target>
        </trans-unit>
        <trans-unit id="26d4e2e6f7bc72aa1b7fe9902a5761b23f342bb5" translate="yes" xml:space="preserve">
          <source>Inodes</source>
          <target state="translated">Inodes</target>
        </trans-unit>
        <trans-unit id="720c091ce87a13844611624e3c634ce2ed5d326a" translate="yes" xml:space="preserve">
          <source>Input &lt;code&gt;Buffer&lt;/code&gt; and &lt;code&gt;Uint8Array&lt;/code&gt; instances passed to the &lt;code&gt;http2.getUnpackedSettings()&lt;/code&gt; API must have a length that is a multiple of six.</source>
          <target state="translated">传递给 &lt;code&gt;http2.getUnpackedSettings()&lt;/code&gt; API的Input &lt;code&gt;Buffer&lt;/code&gt; 和 &lt;code&gt;Uint8Array&lt;/code&gt; 实例的长度必须是6的倍数。</target>
        </trans-unit>
        <trans-unit id="08ab03b761f96fdd2c5da59a100ff5730e9c4009" translate="yes" xml:space="preserve">
          <source>Inserting the statement &lt;code&gt;debugger;&lt;/code&gt; into the source code of a script will enable a breakpoint at that position in the code:</source>
          <target state="translated">插入语句 &lt;code&gt;debugger;&lt;/code&gt; 进入脚本的源代码将在代码中的该位置启用断点：</target>
        </trans-unit>
        <trans-unit id="051747894e566bebff8a6f6ae4afde9c862d5e6c" translate="yes" xml:space="preserve">
          <source>Inspecting linked lists and similar objects is now possible up to the maximum call stack size.</source>
          <target state="translated">现在可以检查链接列表和类似对象,最大调用堆栈大小。</target>
        </trans-unit>
        <trans-unit id="8222c902ae0723e8bb352bb17ed76809e4688165" translate="yes" xml:space="preserve">
          <source>Inspector</source>
          <target state="translated">Inspector</target>
        </trans-unit>
        <trans-unit id="ad8db003f59f527184ade10382360155f5682949" translate="yes" xml:space="preserve">
          <source>Inspector only methods</source>
          <target state="translated">仅检查员方法</target>
        </trans-unit>
        <trans-unit id="d4894011e9b416e24cf4f9f064f29c68ac3eac26" translate="yes" xml:space="preserve">
          <source>Installing a listener using this symbol does not change the behavior once an &lt;code&gt;'error'&lt;/code&gt; event is emitted, therefore the process will still crash if no regular &lt;code&gt;'error'&lt;/code&gt; listener is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e83acb3d25252952bd8f79f736885ae0f9595f" translate="yes" xml:space="preserve">
          <source>Installing an &lt;code&gt;'uncaughtExceptionMonitor'&lt;/code&gt; listener does not change the behavior once an &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted. The process will still crash if no &lt;code&gt;'uncaughtException'&lt;/code&gt; listener is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0cf2d5cc76825e10c97a10dd59da6837fcc0666" translate="yes" xml:space="preserve">
          <source>Installing async hooks via &lt;code&gt;async_hooks.createHook&lt;/code&gt; enables promise execution tracking:</source>
          <target state="translated">通过 &lt;code&gt;async_hooks.createHook&lt;/code&gt; 安装异步钩子可启用承诺执行跟踪：</target>
        </trans-unit>
        <trans-unit id="0ffd36feafce2d27574b6db79c98b71558f382af" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; support automatic completion of inputs, completion preview, simplistic Emacs-style line editing, multi-line inputs, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt;-like reverse-i-search, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt;-like substring-based history search, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions. Terminals that do not support ANSI styles and Emacs-style line editing automatically fall back to a limited feature set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5458ffc182cdf6836a16e2f16d8f4bd6d79f5c4e" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; support automatic completion of inputs, simplistic Emacs-style line editing, multi-line inputs, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions.</source>
          <target state="translated">&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; 的&lt;/a&gt;实例支持输入的自动完成，简单的Emacs风格的行编辑，多行输入，ANSI风格的输出，保存和恢复当前REPL会话状态，错误恢复以及可自定义的评估功能。</target>
        </trans-unit>
        <trans-unit id="b89a320c3f62e6b6ba8e85b021337befc0641078" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;ChildProcess&lt;/code&gt; are not intended to be created directly. Rather, use the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt; methods to create instances of &lt;code&gt;ChildProcess&lt;/code&gt;.</source>
          <target state="translated">不打算直接创建 &lt;code&gt;ChildProcess&lt;/code&gt; 的实例。而是使用&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;方法创建 &lt;code&gt;ChildProcess&lt;/code&gt; 的实例。</target>
        </trans-unit>
        <trans-unit id="db1b65a0d3c2528e965754146fd9d0a86600f551" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Duplex&lt;/code&gt; now return &lt;code&gt;true&lt;/code&gt; when checking &lt;code&gt;instanceof stream.Writable&lt;/code&gt;.</source>
          <target state="translated">现在，在检查 &lt;code&gt;instanceof stream.Writable&lt;/code&gt; 时， &lt;code&gt;Duplex&lt;/code&gt; 实例将返回 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8fdd2c2c9379faa14d448a471b59a6faffffb1ed" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Http2SecureServer&lt;/code&gt; are created using the &lt;code&gt;http2.createSecureServer()&lt;/code&gt; function. The &lt;code&gt;Http2SecureServer&lt;/code&gt; class is not exported directly by the &lt;code&gt;http2&lt;/code&gt; module.</source>
          <target state="translated">使用 &lt;code&gt;http2.createSecureServer()&lt;/code&gt; 函数创建 &lt;code&gt;Http2SecureServer&lt;/code&gt; 的实例。该 &lt;code&gt;Http2SecureServer&lt;/code&gt; 类不是由直接出口 &lt;code&gt;http2&lt;/code&gt; 模块。</target>
        </trans-unit>
        <trans-unit id="e618cc6bee9611e42d99ee69ae677154195e8043" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Http2Server&lt;/code&gt; are created using the &lt;code&gt;http2.createServer()&lt;/code&gt; function. The &lt;code&gt;Http2Server&lt;/code&gt; class is not exported directly by the &lt;code&gt;http2&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;Http2Server&lt;/code&gt; 的实例是使用 &lt;code&gt;http2.createServer()&lt;/code&gt; 函数创建的。该 &lt;code&gt;Http2Server&lt;/code&gt; 类不是由直接出口 &lt;code&gt;http2&lt;/code&gt; 模块。</target>
        </trans-unit>
        <trans-unit id="800ee83c789ca3173d0e98447fc49ae8f796f1ae" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;fs.ReadStream&lt;/code&gt; are created and returned using the &lt;a href=&quot;#fs_fs_createreadstream_path_options&quot;&gt;&lt;code&gt;fs.createReadStream()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adf135f2541749ab0e6b0d183f3e69d29f0948e" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;fs.WriteStream&lt;/code&gt; are created and returned using the &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369f68f902069850f471888346c26c220953855e" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;repl.REPLServer&lt;/code&gt; are created using the &lt;a href=&quot;#repl_repl_start_options&quot;&gt;&lt;code&gt;repl.start()&lt;/code&gt;&lt;/a&gt; method or directly using the JavaScript &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c931f1541982a4495922666b7b5bc642601cc990" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;tls.TLSSocket&lt;/code&gt; implement the duplex &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt; interface.</source>
          <target state="translated">&lt;code&gt;tls.TLSSocket&lt;/code&gt; 的实例实现双工&lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;接口。</target>
        </trans-unit>
        <trans-unit id="35783666b090e1bcb188e0ff52ae2b546eb2a159" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Buffer&lt;/code&gt; class are similar to arrays of integers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt; (other integers are coerced to this range by &lt;code&gt;&amp;amp; 255&lt;/code&gt; operation) but correspond to fixed-sized, raw memory allocations outside the V8 heap. The size of the &lt;code&gt;Buffer&lt;/code&gt; is established when it is created and cannot be changed.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 类的实例类似于从 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;255&lt;/code&gt; 的整数数组（其他整数通过 &lt;code&gt;&amp;amp; 255&lt;/code&gt; 操作强制到此范围），但对应于V8堆之外的固定大小的原始内存分配。 &lt;code&gt;Buffer&lt;/code&gt; 的大小是在创建时建立的，无法更改。</target>
        </trans-unit>
        <trans-unit id="dffd1ef53587360af9f4e464d4d5cf73ae045da0" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Certificate&lt;/code&gt; class can be created using the &lt;code&gt;new&lt;/code&gt; keyword or by calling &lt;code&gt;crypto.Certificate()&lt;/code&gt; as a function:</source>
          <target state="translated">可以使用 &lt;code&gt;new&lt;/code&gt; 关键字或通过调用 &lt;code&gt;crypto.Certificate()&lt;/code&gt; 函数来创建 &lt;code&gt;Certificate&lt;/code&gt; 类的实例：</target>
        </trans-unit>
        <trans-unit id="1a67f7f0229202a5e0c59ed378df4ef19e04cdd1" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ChildProcess&lt;/code&gt; class are &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitters&lt;/code&gt;&lt;/a&gt; that represent spawned child processes.</source>
          <target state="translated">&lt;code&gt;ChildProcess&lt;/code&gt; 类的实例是&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitters&lt;/code&gt; &lt;/a&gt;，它们代表生成的子进程。</target>
        </trans-unit>
        <trans-unit id="9da9ac1fe02f8599e055e564d64abc742cf4f4a5" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ChildProcess&lt;/code&gt; represent spawned child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0cc93f3328ea5a0a0adcec2dba75fe3d0516e6a" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Cipher&lt;/code&gt; class are used to encrypt data. The class can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; 类的实例用于加密数据。可以通过以下两种方式之一使用该类：</target>
        </trans-unit>
        <trans-unit id="adadf4a8671dae9115a1b4925ff5480625d42ff5" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Decipher&lt;/code&gt; class are used to decrypt data. The class can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Decipher&lt;/code&gt; 类的实例用于解密数据。可以通过以下两种方式之一使用该类：</target>
        </trans-unit>
        <trans-unit id="c29738f83796b77d7a2afe6dfa6aa91432202d54" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;DiffieHellman&lt;/code&gt; class can be created using the &lt;a href=&quot;#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding&quot;&gt;&lt;code&gt;crypto.createDiffieHellman()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">可以使用&lt;a href=&quot;#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding&quot;&gt; &lt;code&gt;crypto.createDiffieHellman()&lt;/code&gt; &lt;/a&gt;函数创建 &lt;code&gt;DiffieHellman&lt;/code&gt; 类的实例。</target>
        </trans-unit>
        <trans-unit id="06629143118ba183c91662524da3d6583f95f245" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ECDH&lt;/code&gt; class can be created using the &lt;a href=&quot;#crypto_crypto_createecdh_curvename&quot;&gt;&lt;code&gt;crypto.createECDH()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">可以使用&lt;a href=&quot;#crypto_crypto_createecdh_curvename&quot;&gt; &lt;code&gt;crypto.createECDH()&lt;/code&gt; &lt;/a&gt;函数创建 &lt;code&gt;ECDH&lt;/code&gt; 类的实例。</target>
        </trans-unit>
        <trans-unit id="e19a3efe923bf85bc8b05ac0272473f4501716f9" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;FileHandle&lt;/code&gt; object are created internally by the &lt;code&gt;fsPromises.open()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; 对象的实例由 &lt;code&gt;fsPromises.open()&lt;/code&gt; 方法在内部创建。</target>
        </trans-unit>
        <trans-unit id="af20962e987f76605ebbac474846e378dc9efb59" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;http2.Http2Session&lt;/code&gt; class represent an active communications session between an HTTP/2 client and server. Instances of this class are &lt;em&gt;not&lt;/em&gt; intended to be constructed directly by user code.</source>
          <target state="translated">&lt;code&gt;http2.Http2Session&lt;/code&gt; 类的实例表示HTTP / 2客户端与服务器之间的活动通信会话。此类的实例&lt;em&gt;不&lt;/em&gt;打算由用户代码直接构造。</target>
        </trans-unit>
        <trans-unit id="432d12dcbaa96cbcfdc7739ae3abf129c909c6a7" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;readline.Interface&lt;/code&gt; class are constructed using the &lt;code&gt;readline.createInterface()&lt;/code&gt; method. Every instance is associated with a single &lt;code&gt;input&lt;/code&gt;&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream and a single &lt;code&gt;output&lt;/code&gt;&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream. The &lt;code&gt;output&lt;/code&gt; stream is used to print prompts for user input that arrives on, and is read from, the &lt;code&gt;input&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;readline.Interface&lt;/code&gt; 类的实例是使用 &lt;code&gt;readline.createInterface()&lt;/code&gt; 方法构造的。每个实例都与单个 &lt;code&gt;input&lt;/code&gt; &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt;流和单个 &lt;code&gt;output&lt;/code&gt; &lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt;流关联。该 &lt;code&gt;output&lt;/code&gt; 流被用于打印到达用户输入的提示，并从时，读取 &lt;code&gt;input&lt;/code&gt; 流。</target>
        </trans-unit>
        <trans-unit id="298dfc9afa41ab353b24ce154f8859bd24d0afe2" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;vm.Script&lt;/code&gt; class contain precompiled scripts that can be executed in specific contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a8dd21a7c8c59429281b201339a2209dc5cdab" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;vm.Script&lt;/code&gt; class contain precompiled scripts that can be executed in specific sandboxes (or &quot;contexts&quot;).</source>
          <target state="translated">&lt;code&gt;vm.Script&lt;/code&gt; 类的实例包含可以在特定的沙箱（或&amp;ldquo;上下文&amp;rdquo;）中执行的预编译脚本。</target>
        </trans-unit>
        <trans-unit id="ce65dd9273ad652d638f34de4134789c3e16e945" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;worker.MessageChannel&lt;/code&gt; class represent an asynchronous, two-way communications channel. The &lt;code&gt;MessageChannel&lt;/code&gt; has no methods of its own. &lt;code&gt;new MessageChannel()&lt;/code&gt; yields an object with &lt;code&gt;port1&lt;/code&gt; and &lt;code&gt;port2&lt;/code&gt; properties, which refer to linked &lt;a href=&quot;#worker_threads_class_messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">&lt;code&gt;worker.MessageChannel&lt;/code&gt; 类的实例表示一个异步的双向通信通道。该 &lt;code&gt;MessageChannel&lt;/code&gt; 没有自己的方法。 &lt;code&gt;new MessageChannel()&lt;/code&gt; 产生一个具有 &lt;code&gt;port1&lt;/code&gt; 和 &lt;code&gt;port2&lt;/code&gt; 属性的对象，该属性引用链接的&lt;a href=&quot;#worker_threads_class_messageport&quot;&gt; &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;实例。</target>
        </trans-unit>
        <trans-unit id="7a38e81654aa75e50f8ac4a46d3a4444cd9d971f" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;worker.MessagePort&lt;/code&gt; class represent one end of an asynchronous, two-way communications channel. It can be used to transfer structured data, memory regions and other &lt;code&gt;MessagePort&lt;/code&gt;s between different &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;code&gt;worker.MessagePort&lt;/code&gt; 类的实例表示异步双向通信通道的一端。它可用于在不同的&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;之间传输结构化的数据，内存区域和其他 &lt;code&gt;MessagePort&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81720bda68cbd9e127cd631462f662a8bd1e1fa9" translate="yes" xml:space="preserve">
          <source>Instances of this class can now be passed to worker threads using &lt;code&gt;postMessage&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c676be9a0fcb70600a6d6a66e1bc4fb7d9ad4219" translate="yes" xml:space="preserve">
          <source>Instantiate a new &lt;code&gt;URLSearchParams&lt;/code&gt; object with a query hash map. The key and value of each property of &lt;code&gt;obj&lt;/code&gt; are always coerced to strings.</source>
          <target state="translated">使用查询哈希映射实例化新的 &lt;code&gt;URLSearchParams&lt;/code&gt; 对象。 &lt;code&gt;obj&lt;/code&gt; 的每个属性的键和值始终强制为字符串。</target>
        </trans-unit>
        <trans-unit id="65181063e2280876fa3f8f363ffe435314f6a6cc" translate="yes" xml:space="preserve">
          <source>Instantiate a new &lt;code&gt;URLSearchParams&lt;/code&gt; object with an iterable map in a way that is similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;'s constructor. &lt;code&gt;iterable&lt;/code&gt; can be an &lt;code&gt;Array&lt;/code&gt; or any iterable object. That means &lt;code&gt;iterable&lt;/code&gt; can be another &lt;code&gt;URLSearchParams&lt;/code&gt;, in which case the constructor will simply create a clone of the provided &lt;code&gt;URLSearchParams&lt;/code&gt;. Elements of &lt;code&gt;iterable&lt;/code&gt; are key-value pairs, and can themselves be any iterable object.</source>
          <target state="translated">使用类似于&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;的构造函数的方式，使用可迭代的地图实例化新的 &lt;code&gt;URLSearchParams&lt;/code&gt; 对象。 &lt;code&gt;iterable&lt;/code&gt; 可以是 &lt;code&gt;Array&lt;/code&gt; 或任何可迭代对象。这意味着 &lt;code&gt;iterable&lt;/code&gt; 可以是另一个 &lt;code&gt;URLSearchParams&lt;/code&gt; ，在这种情况下，构造函数将简单地创建提供的 &lt;code&gt;URLSearchParams&lt;/code&gt; 的副本。 &lt;code&gt;iterable&lt;/code&gt; 元素是键值对，并且本身可以是任何可迭代的对象。</target>
        </trans-unit>
        <trans-unit id="7fc82e9b73a75737421b7fc3a88c424c1b841dee" translate="yes" xml:space="preserve">
          <source>Instantiate a new empty &lt;code&gt;URLSearchParams&lt;/code&gt; object.</source>
          <target state="translated">实例化一个新的空 &lt;code&gt;URLSearchParams&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="b21c73c2d5f688055cfa8ed255e3120b2cccea8d" translate="yes" xml:space="preserve">
          <source>Instantiate the module. This must be called after linking has completed (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linked'&lt;/code&gt;); otherwise it will throw an error. It may also throw an exception if one of the dependencies does not provide an export the parent module requires.</source>
          <target state="translated">实例化模块。链接完成后必须调用此方法（ &lt;code&gt;linkingStatus&lt;/code&gt; 为 &lt;code&gt;'linked'&lt;/code&gt; ）；否则会抛出错误。如果其中一个依赖项未提供父模块所需的导出，它也可能引发异常。</target>
        </trans-unit>
        <trans-unit id="fed39324e841d37c87d9ceaf44bcca4c8c9a4e11" translate="yes" xml:space="preserve">
          <source>Instead of throwing the original error it is now wrapped into an &lt;code&gt;AssertionError&lt;/code&gt; that contains the full stack trace.</source>
          <target state="translated">现在不再抛出原始错误，而是将其包装到包含完整堆栈跟踪的 &lt;code&gt;AssertionError&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="5459a160eefe5077e9724d4e48b8c8d75dd07d82" translate="yes" xml:space="preserve">
          <source>Instead of throwing the original error it is now wrapped into an [&lt;code&gt;AssertionError&lt;/code&gt;][] that contains the full stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0886c0750f47c6c020e0212835b6e14e09f31e83" translate="yes" xml:space="preserve">
          <source>Instruct &lt;code&gt;require&lt;/code&gt; on how to handle certain file extensions.</source>
          <target state="translated">指导 &lt;code&gt;require&lt;/code&gt; 如何处理某些文件扩展名。</target>
        </trans-unit>
        <trans-unit id="c063ff3cdde65053663a7873bf8ab9bd399ef6b0" translate="yes" xml:space="preserve">
          <source>Instructs Node.js to error prior to running any code if the policy does not have the specified integrity. It expects a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity&quot;&gt;Subresource Integrity&lt;/a&gt; string as a parameter.</source>
          <target state="translated">如果策略不具有指定的完整性，则在运行任何代码之前指示Node.js错误。它期望将&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity&quot;&gt;Subresource Integrity&lt;/a&gt;字符串作为参数。</target>
        </trans-unit>
        <trans-unit id="d0b00d1feef65ce7e33d04d315b5601124b9350a" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL server to prioritize ChaCha20Poly1305 when client does. This option has no effect if &lt;code&gt;SSL_OP_CIPHER_SERVER_PREFERENCE&lt;/code&gt; is not enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2c85f8a9e409e60a7c57bb3a6180c6a74b488d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to add server-hello extension from an early version of the cryptopro draft.</source>
          <target state="translated">指示OpenSSL从cryptopro草案的早期版本中添加server-hello扩展。</target>
        </trans-unit>
        <trans-unit id="be2960d676515f73072f7067706d825293617492" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to allow a non-[EC]DHE-based key exchange mode for TLS v1.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6c05112a017d47310f296b0041f44b75da5a87" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always create a new key when using temporary/ephemeral DH parameters.</source>
          <target state="translated">指示OpenSSL在使用临时/永久DH参数时,总是创建一个新的密钥。</target>
        </trans-unit>
        <trans-unit id="546f5bbe97ae294c8fc5e687dae9f83654f746e8" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always create a new key when using temporary/ephemeral ECDH parameters.</source>
          <target state="translated">指示OpenSSL在使用临时/瞬时ECDH参数时,总是创建一个新的密钥。</target>
        </trans-unit>
        <trans-unit id="ac0311c08a3469b8d71f9d3883a3fe4a8bf94820" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always start a new session when performing renegotiation.</source>
          <target state="translated">指示OpenSSL在执行重新协商时总是启动一个新的会话。</target>
        </trans-unit>
        <trans-unit id="ae7bb7ececabda2568352c90383393ed8f76fe08" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always use the tmp_rsa key when performing RSA operations.</source>
          <target state="translated">指示OpenSSL在执行RSA操作时始终使用tmp_rsa密钥。</target>
        </trans-unit>
        <trans-unit id="caca42fad826dd949c6335a63c6ceb14c18ab473" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d.</source>
          <target state="translated">指示OpenSSL禁用OpenSSL 0.9.6d中新增的SSL 3.0/TLS 1.0漏洞解决方法。</target>
        </trans-unit>
        <trans-unit id="70a5fa003ee5c03ab6047780d6a1756112249d54" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable encrypt-then-MAC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66cff55ed33dd0619fafbee8f2c1a8844db9d45" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable renegotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23867858cda445617e031433f5f870ccca19e39d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable support for SSL/TLS compression.</source>
          <target state="translated">指示OpenSSL禁用对SSL/TLS压缩的支持。</target>
        </trans-unit>
        <trans-unit id="0b25ca4b0affb115218bbc6dc9c81460963a1551" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable the workaround for a man-in-the-middle protocol-version vulnerability in the SSL 2.0 server implementation.</source>
          <target state="translated">指示OpenSSL禁用SSL 2.0服务器实现中的中间人协议版本漏洞的变通方法。</target>
        </trans-unit>
        <trans-unit id="2165b961ee84bb34e7517631c063e2f2f98f243d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable use of RFC4507bis tickets.</source>
          <target state="translated">指示 OpenSSL 禁用 RFC4507bis 票。</target>
        </trans-unit>
        <trans-unit id="608aeeeb5a40e2d41f521b3de5c1f59b365144e3" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable version rollback attack detection.</source>
          <target state="translated">指示OpenSSL禁用版本回滚攻击检测。</target>
        </trans-unit>
        <trans-unit id="710ee28e0f7e59c4bcb18bce916c5f0f0d575362" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off SSL v2</source>
          <target state="translated">指示OpenSSL关闭SSL v2。</target>
        </trans-unit>
        <trans-unit id="4a26e814f5c329c70cc5bbf34635600b0166e139" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off SSL v3</source>
          <target state="translated">指示OpenSSL关闭SSL v3。</target>
        </trans-unit>
        <trans-unit id="80de102aad3b8873aa476d2f44620c3de39d7a90" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1</source>
          <target state="translated">指示OpenSSL关闭TLS v1。</target>
        </trans-unit>
        <trans-unit id="0e08471820c4afa43946e65eac375fcd772422b3" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1.1</source>
          <target state="translated">指示OpenSSL关闭TLS v1.1。</target>
        </trans-unit>
        <trans-unit id="55e7bd4f680213d3fc1d7f9ebf87e0706ef0e930" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1.2</source>
          <target state="translated">指示OpenSSL关闭TLS v1.2。</target>
        </trans-unit>
        <trans-unit id="d2577ea31fe29df8d4ee86b2f8d05d0b4c6ee9a7" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbab4e09330ea425ca00047c6c5baf5232c6ce4" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn on cookie exchange.</source>
          <target state="translated">指示OpenSSL开启cookie交换。</target>
        </trans-unit>
        <trans-unit id="1e82de46cebb9eab62329940282272bfd3ba678a" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to use Cisco's &quot;speshul&quot; version of DTLS_BAD_VER.</source>
          <target state="translated">指示OpenSSL使用思科的 &quot;speshul &quot;版本的DTLS_BAD_VER。</target>
        </trans-unit>
        <trans-unit id="75031cb337e0583a13d4c7be4edb3e048cfc6d63" translate="yes" xml:space="preserve">
          <source>Instructs the kernel to leave a multicast group at &lt;code&gt;multicastAddress&lt;/code&gt; using the &lt;code&gt;IP_DROP_MEMBERSHIP&lt;/code&gt; socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.</source>
          <target state="translated">指示内核在离开组播组 &lt;code&gt;multicastAddress&lt;/code&gt; 使用 &lt;code&gt;IP_DROP_MEMBERSHIP&lt;/code&gt; 套接字选项。当套接字关闭或进程终止时，内核会自动调用此方法，因此大多数应用程序将永远没有理由调用此方法。</target>
        </trans-unit>
        <trans-unit id="81933be106e68779eab34fb4514049a58d52563f" translate="yes" xml:space="preserve">
          <source>Instructs the kernel to leave a source-specific multicast channel at the given &lt;code&gt;sourceAddress&lt;/code&gt; and &lt;code&gt;groupAddress&lt;/code&gt; using the &lt;code&gt;IP_DROP_SOURCE_MEMBERSHIP&lt;/code&gt; socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1144c6f61e59c74db28b6c4b9401d09107634752" translate="yes" xml:space="preserve">
          <source>Instructs the module loader to preserve symbolic links when resolving and caching modules.</source>
          <target state="translated">指示模块加载器在解析和缓存模块时保留符号链接。</target>
        </trans-unit>
        <trans-unit id="6870fb28c403ee5eb0f8b0e36861a73965d25e9a" translate="yes" xml:space="preserve">
          <source>Instructs the module loader to preserve symbolic links when resolving and caching the main module (&lt;code&gt;require.main&lt;/code&gt;).</source>
          <target state="translated">指示模块加载器在解析和缓存主模块（ &lt;code&gt;require.main&lt;/code&gt; ）时保留符号链接。</target>
        </trans-unit>
        <trans-unit id="8402b4a029cc3b4cbc3fef404091dc1447dc7b5c" translate="yes" xml:space="preserve">
          <source>Integer value representing the expected input size; defaults to &lt;code&gt;0&lt;/code&gt; for an unknown input size.</source>
          <target state="translated">代表预期输入大小的整数值；对于未知的输入大小，默认为 &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99ab494ded4d235df6eccb37568024a22d56ee79" translate="yes" xml:space="preserve">
          <source>Integer-Indexed: an index value represented by &lt;code&gt;uint32_t&lt;/code&gt;</source>
          <target state="translated">整数索引：由 &lt;code&gt;uint32_t&lt;/code&gt; 表示的索引值</target>
        </trans-unit>
        <trans-unit id="81bd3b466b0034894173f99f33ef569af480be3a" translate="yes" xml:space="preserve">
          <source>Integers read from a &lt;code&gt;Buffer&lt;/code&gt; are interpreted as two's complement signed values.</source>
          <target state="translated">从 &lt;code&gt;Buffer&lt;/code&gt; 读取的整数被解释为二进制补码值。</target>
        </trans-unit>
        <trans-unit id="b05fe054d228b76470ec56b7184d0bc99d39e7ba" translate="yes" xml:space="preserve">
          <source>Integral status code indicating the success or failure of a N-API call. Currently, the following status codes are supported.</source>
          <target state="translated">表示N-API调用成功或失败的整体状态码。目前,支持以下状态码:</target>
        </trans-unit>
        <trans-unit id="d3e304cd07b5bd6c7b426830429c14bc2b356ec5" translate="yes" xml:space="preserve">
          <source>Integrating &lt;code&gt;AsyncResource&lt;/code&gt; with &lt;code&gt;EventEmitter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b62f41c12ee066d13d5c86a1257925ad8861703" translate="yes" xml:space="preserve">
          <source>Integrity Checks</source>
          <target state="translated">诚信检查</target>
        </trans-unit>
        <trans-unit id="4cb5b39c0f8028f339c4e3a11a09d7b24bb24591" translate="yes" xml:space="preserve">
          <source>Integrity can be specified as the boolean value &lt;code&gt;true&lt;/code&gt; to accept any body for the resource which can be useful for local development. It is not recommended in production since it would allow unexpected alteration of resources to be considered valid.</source>
          <target state="translated">可以将完整性指定为布尔值 &lt;code&gt;true&lt;/code&gt; ,以接受资源的任何主体，这对于本地开发很有用。不建议在生产中使用它，因为这样会使资源的意外更改被视为有效。</target>
        </trans-unit>
        <trans-unit id="50c9e0c5e01735529d5358e6bf00aeb5fbddb67a" translate="yes" xml:space="preserve">
          <source>Integrity checks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf43a800950dd777641442ca904838912bd822f" translate="yes" xml:space="preserve">
          <source>Integrity using scopes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7eed5af6d7877b3ba1d70d5214faa63dad25d2" translate="yes" xml:space="preserve">
          <source>Interaction with workers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4db7ef1fa23cfb5e115a2a2c89d46a6a2ebc4a" translate="yes" xml:space="preserve">
          <source>Interface</source>
          <target state="translated">Interface</target>
        </trans-unit>
        <trans-unit id="23575f35a521e9c261d274ac4cb29c2f05b261ac" translate="yes" xml:space="preserve">
          <source>Internal Error</source>
          <target state="translated">内部错误</target>
        </trans-unit>
        <trans-unit id="95533607b2195871cdd825109cced72868daaac4" translate="yes" xml:space="preserve">
          <source>Internal Node.js libraries. Node.js itself exports C++ APIs that addons can use, the most important of which is the &lt;code&gt;node::ObjectWrap&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2832f2017b9feac348c32119b337871f7f79ff" translate="yes" xml:space="preserve">
          <source>Internal Node.js libraries. Node.js itself exports a number of C++ APIs that Addons can use &amp;mdash; the most important of which is the &lt;code&gt;node::ObjectWrap&lt;/code&gt; class.</source>
          <target state="translated">内部Node.js库。Node.js本身导出了Addons可以使用的许多C ++ API，其中最重要的是 &lt;code&gt;node::ObjectWrap&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="5f4c2cebcc0952f7ae86ffbb2645ce54c5574178" translate="yes" xml:space="preserve">
          <source>Internal errors occur when an HTTP/2 session fails unexpectedly. These will be reported via an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;Http2Session&lt;/code&gt; or HTTP/2 Server objects.</source>
          <target state="translated">当HTTP / 2会话意外失败时，会发生内部错误。这些将通过 &lt;code&gt;Http2Session&lt;/code&gt; 或HTTP / 2 Server对象上的 &lt;code&gt;'error'&lt;/code&gt; 事件进行报告。</target>
        </trans-unit>
        <trans-unit id="ad90811f03e8bbaf83a345f7229936551486b928" translate="yes" xml:space="preserve">
          <source>Internal properties no longer appear in the context argument of a custom inspection function.</source>
          <target state="translated">内部属性不再出现在自定义检查函数的上下文参数中。</target>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">Internationalization</target>
        </trans-unit>
        <trans-unit id="845202ae0fe1a669c29ddc90a5436534b580fc96" translate="yes" xml:space="preserve">
          <source>Internationalization Support</source>
          <target state="translated">国际化支持</target>
        </trans-unit>
        <trans-unit id="4de73a3f1e6b5deccf35f9983157dd29155946aa" translate="yes" xml:space="preserve">
          <source>Internationalization support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c74da0c6c57362d1086bc64d6d9a5389c76829" translate="yes" xml:space="preserve">
          <source>Interoperability with CommonJS</source>
          <target state="translated">与CommonJS的互操作性</target>
        </trans-unit>
        <trans-unit id="1f06c6ea3387d2dd0326bd91120a11c32eb42186" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of 64-bit numbers and swaps byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 8.</source>
          <target state="translated">将 &lt;code&gt;buf&lt;/code&gt; 解释为64位数字的数组，并&lt;em&gt;就地&lt;/em&gt;交换字节顺序。如果&lt;a href=&quot;#buffer_buf_length&quot;&gt; &lt;code&gt;buf.length&lt;/code&gt; &lt;/a&gt;不是8的倍数，则抛出&lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt; &lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3f37cf37971ac698f0307a0849c4d8a45eaa91f" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of unsigned 16-bit integers and swaps the byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 2.</source>
          <target state="translated">将 &lt;code&gt;buf&lt;/code&gt; 解释为一个无符号的16位整数数组，并&lt;em&gt;就地&lt;/em&gt;交换字节顺序。如果&lt;a href=&quot;#buffer_buf_length&quot;&gt; &lt;code&gt;buf.length&lt;/code&gt; &lt;/a&gt;不是2的倍数，则抛出&lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt; &lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d8b8e329633284e96f9adb1691da632260f2b83b" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of unsigned 32-bit integers and swaps the byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 4.</source>
          <target state="translated">将 &lt;code&gt;buf&lt;/code&gt; 解释为无符号的32位整数数组，并&lt;em&gt;就地&lt;/em&gt;交换字节顺序。如果&lt;a href=&quot;#buffer_buf_length&quot;&gt; &lt;code&gt;buf.length&lt;/code&gt; &lt;/a&gt;不是4的倍数，则抛出&lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt; &lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2c495326cbec001dafeaa0da9ab820a10bbe892f" translate="yes" xml:space="preserve">
          <source>Introduced &lt;code&gt;latin1&lt;/code&gt; as an alias for &lt;code&gt;binary&lt;/code&gt;.</source>
          <target state="translated">介绍 &lt;code&gt;latin1&lt;/code&gt; 作为 &lt;code&gt;binary&lt;/code&gt; 的别名。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="e9c92f0c550f88b8f940f3db1e7343ac28f0092f" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;hash&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="translated">分配给 &lt;code&gt;hash&lt;/code&gt; 属性的值中包含的无效URL字符经过&lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;百分比编码&lt;/a&gt;。对要百分比编码的字符的选择可能与&lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;方法产生的结果有所不同。</target>
        </trans-unit>
        <trans-unit id="1629e5ff15506fca0875d4572b9feec31e969dc3" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;password&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="translated">分配给 &lt;code&gt;password&lt;/code&gt; 属性的值中包含的无效URL字符是&lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;百分比编码的&lt;/a&gt;。对要百分比编码的字符的选择可能与&lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;方法产生的结果有所不同。</target>
        </trans-unit>
        <trans-unit id="08d09dda66848238d39695ce4a7fee107a1aaf1b" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;pathname&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="translated">分配给 &lt;code&gt;pathname&lt;/code&gt; 属性的值中包含的无效URL字符已&lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;百分比编码&lt;/a&gt;。对要百分比编码的字符的选择可能与&lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;方法产生的结果有所不同。</target>
        </trans-unit>
        <trans-unit id="65f72a935bbcf546bea987da823f35b5a5e27db6" translate="yes" xml:space="preserve">
          <source>Invalid URL protocol values assigned to the &lt;code&gt;protocol&lt;/code&gt; property are ignored.</source>
          <target state="translated">分配给 &lt;code&gt;protocol&lt;/code&gt; 属性的无效URL协议值将被忽略。</target>
        </trans-unit>
        <trans-unit id="738d6832032229b051ea3b4a368aee59f1757724" translate="yes" xml:space="preserve">
          <source>Invalid character handling in header names and values</source>
          <target state="translated">在头名和值中处理无效的字符。</target>
        </trans-unit>
        <trans-unit id="fe947aa91a35f6be8f5dcea115d7f1b3523381d5" translate="yes" xml:space="preserve">
          <source>Invalid characters were detected in headers.</source>
          <target state="translated">在标题中检测到无效字符。</target>
        </trans-unit>
        <trans-unit id="80cb8ebdce9f68d51276352fdbb4b36363df747a" translate="yes" xml:space="preserve">
          <source>Invalid host name values assigned to the &lt;code&gt;hostname&lt;/code&gt; property are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52cbfcf6f98b93d30c926a6b1749b607fc691744" translate="yes" xml:space="preserve">
          <source>Invalid host values assigned to the &lt;code&gt;host&lt;/code&gt; property are ignored.</source>
          <target state="translated">分配给 &lt;code&gt;host&lt;/code&gt; 属性的无效主机值将被忽略。</target>
        </trans-unit>
        <trans-unit id="eae8e79a320be525fba1c1ca46fb7bf1f890b46f" translate="yes" xml:space="preserve">
          <source>Invalid hostname values assigned to the &lt;code&gt;hostname&lt;/code&gt; property are ignored.</source>
          <target state="translated">分配给 &lt;code&gt;hostname&lt;/code&gt; 属性的无效主机名值将被忽略。</target>
        </trans-unit>
        <trans-unit id="248507b930ae47b7fe748fc4e5d1a8a49f58a393" translate="yes" xml:space="preserve">
          <source>Invalid value character error is identified by &lt;code&gt;code: 'ERR_INVALID_CHAR'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21c7370be790d52740a91b52fc49543cba6a787" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;stream#stream_writable_writablefinished&quot;&gt;&lt;code&gt;writable.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">调用&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;后为 &lt;code&gt;true&lt;/code&gt; 。此属性不指示是否已刷新数据，为此使用&lt;a href=&quot;stream#stream_writable_writablefinished&quot;&gt; &lt;code&gt;writable.writableFinished&lt;/code&gt; &lt;/a&gt;代替。</target>
        </trans-unit>
        <trans-unit id="d6ed934df555246f26c85f0b0c4eb07f81f3f242" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_request_destroy_error&quot;&gt;&lt;code&gt;request.destroy()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8a83f3e29a618906de053b984b4116151588fe" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#http_request_writablefinished&quot;&gt;&lt;code&gt;request.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">在调用&lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; &lt;/a&gt;之后为 &lt;code&gt;true&lt;/code&gt; 。此属性不指示是否已刷新数据，而是为此用途&lt;a href=&quot;#http_request_writablefinished&quot;&gt; &lt;code&gt;request.writableFinished&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="279811758f3fc49f9271db9de98d53ac59a3a35f" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#http_response_writablefinished&quot;&gt;&lt;code&gt;response.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">调用&lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;后为 &lt;code&gt;true&lt;/code&gt; 。此属性不指示是否已刷新数据，为此使用&lt;a href=&quot;#http_response_writablefinished&quot;&gt; &lt;code&gt;response.writableFinished&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c457dffdf62810b5e0e74ea9f6901231788f1d26" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_readable_destroy_error&quot;&gt;&lt;code&gt;readable.destroy()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">在调用&lt;a href=&quot;#stream_readable_destroy_error&quot;&gt; &lt;code&gt;readable.destroy()&lt;/code&gt; &lt;/a&gt;之后为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27ba9b336441c7b9636f805f2664a8b20332ff3a" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_writable_destroy_error&quot;&gt;&lt;code&gt;writable.destroy()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">在调用&lt;a href=&quot;#stream_writable_destroy_error&quot;&gt; &lt;code&gt;writable.destroy()&lt;/code&gt; &lt;/a&gt;之后为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e457e44e34dbf6c98b053774a3a83b0eda0d06e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#stream_writable_writablefinished&quot;&gt;&lt;code&gt;writable.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">在调用&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;writable.end()&lt;/code&gt; &lt;/a&gt;之后为 &lt;code&gt;true&lt;/code&gt; 。此属性不指示是否已刷新数据，为此使用&lt;a href=&quot;#stream_writable_writablefinished&quot;&gt; &lt;code&gt;writable.writableFinished&lt;/code&gt; &lt;/a&gt;代替。</target>
        </trans-unit>
        <trans-unit id="50e07a05ea7df0d75d37b07ce707de336d4f493d" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;cancelable&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447e18b05fa6d326f80492387bf46993194d011e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if all data has been flushed to the underlying system, immediately before the &lt;a href=&quot;#http_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">是 &lt;code&gt;true&lt;/code&gt; ，如果所有数据已刷新到底层系统，在之前&lt;a href=&quot;#http_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt;发出的事件。</target>
        </trans-unit>
        <trans-unit id="03e591663a26db9a5ed21e408db60596066058fc" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;readable.read()&lt;/code&gt;&lt;/a&gt;, which means the stream has not been destroyed or emitted &lt;code&gt;'error'&lt;/code&gt; or &lt;code&gt;'end'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8d5a5a4a8431f9f64a806e5b6f385f45074325" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;readable.read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">是 &lt;code&gt;true&lt;/code&gt; ，如果是安全的调用&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;readable.read()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3b1e2c65bb71ef448544cac04896a09cce61abdd" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.write()&lt;/code&gt;&lt;/a&gt;, which means the stream has not been destroyed, errored or ended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4370f01d3c96b257612ae70204203ea0a8789809" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.write()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">是 &lt;code&gt;true&lt;/code&gt; ，如果是安全的调用&lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;writable.write()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a54e2373de13c6357b66bf3b96598900cda4816e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if this code is not running inside of a &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; thread.</source>
          <target state="translated">是 &lt;code&gt;true&lt;/code&gt; ，如果这个代码是不是一个内部运行的&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;线程。</target>
        </trans-unit>
        <trans-unit id="5ea282d632dfbf0003030b6293ca539ecda81b32" translate="yes" xml:space="preserve">
          <source>Is set to &lt;code&gt;true&lt;/code&gt; immediately before the &lt;a href=&quot;#stream_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">在发出&lt;a href=&quot;#stream_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt;事件之前将其设置为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31f54ec164d59bd1126c3d41ec9e0caa797ca9ac" translate="yes" xml:space="preserve">
          <source>It allows a shortcut, so that &lt;code&gt;module.exports.f = ...&lt;/code&gt; can be written more succinctly as &lt;code&gt;exports.f = ...&lt;/code&gt;. However, be aware that like any variable, if a new value is assigned to &lt;code&gt;exports&lt;/code&gt;, it is no longer bound to &lt;code&gt;module.exports&lt;/code&gt;:</source>
          <target state="translated">它允许一个快捷方式，这样 &lt;code&gt;module.exports.f = ...&lt;/code&gt; 可以写得更简洁的 &lt;code&gt;exports.f = ...&lt;/code&gt; 。但是，要知道，像任何变量，如果一个新的值被分配到 &lt;code&gt;exports&lt;/code&gt; ，它不再势必 &lt;code&gt;module.exports&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9073ca8fe086c420a4962aa555b1febbd7e4eb14" translate="yes" xml:space="preserve">
          <source>It can also be created by Node.js and passed to the user when a connection is received. For example, it is passed to the listeners of a &lt;a href=&quot;#net_event_connection&quot;&gt;&lt;code&gt;'connection'&lt;/code&gt;&lt;/a&gt; event emitted on a &lt;a href=&quot;#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt;, so the user can use it to interact with the client.</source>
          <target state="translated">它也可以由Node.js创建，并在收到连接时传递给用户。例如，它传递给&lt;a href=&quot;#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; &lt;/a&gt;上发出的&lt;a href=&quot;#net_event_connection&quot;&gt; &lt;code&gt;'connection'&lt;/code&gt; &lt;/a&gt;事件的侦听器，因此用户可以使用它与客户端进行交互。</target>
        </trans-unit>
        <trans-unit id="5170688bb6d5c05e758eaa86801b72671253446e" translate="yes" xml:space="preserve">
          <source>It can be accessed using:</source>
          <target state="translated">它可以通过以下方式访问:</target>
        </trans-unit>
        <trans-unit id="aa2502aa25bb881c5a8de387f4855f38f05049a2" translate="yes" xml:space="preserve">
          <source>It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.</source>
          <target state="translated">它创建了一个名为 &quot;new-port &quot;的符号链接,指向 &quot;foo&quot;。</target>
        </trans-unit>
        <trans-unit id="f0450c3659d04b97d0de09b169af32ff8f617bc3" translate="yes" xml:space="preserve">
          <source>It detects &lt;code&gt;null&lt;/code&gt; as a separate type, while ECMAScript &lt;code&gt;typeof&lt;/code&gt; would detect &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1be5b11468a8cdf73d05266cfb33d14f98a6df" translate="yes" xml:space="preserve">
          <source>It does nothing if the stream was already destroyed.</source>
          <target state="translated">如果流已经被破坏了,它就没有任何作用。</target>
        </trans-unit>
        <trans-unit id="41d9374edd67e5544a25ed3217406f608f09bce8" translate="yes" xml:space="preserve">
          <source>It has already been linked (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linked'&lt;/code&gt;)</source>
          <target state="translated">它已经被链接了（ &lt;code&gt;linkingStatus&lt;/code&gt; 为 &lt;code&gt;'linked'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="967e13c06d26edbbb18720333bfad7b741a78020" translate="yes" xml:space="preserve">
          <source>It has support for detecting an External value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70b0c65dc3241d0690f77cfe10d0e5c2409d02c" translate="yes" xml:space="preserve">
          <source>It helps to provide some global-looking variables that are actually specific to the module, such as:</source>
          <target state="translated">它有助于提供一些看似全局的变量,实际上是针对模块的,比如。</target>
        </trans-unit>
        <trans-unit id="bb0464e843f0f43c4dc6eaefcde1f38e4a3f6cc1" translate="yes" xml:space="preserve">
          <source>It implements the &lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;Readable Stream&lt;/a&gt; interface, as well as the following additional events, methods, and properties.</source>
          <target state="translated">它实现了&lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;Readable Stream&lt;/a&gt;接口以及以下其他事件，方法和属性。</target>
        </trans-unit>
        <trans-unit id="5d45f625dfde54e988f472dec8c49c8ac4e78699" translate="yes" xml:space="preserve">
          <source>It is also possible to compress or decompress data in a single step:</source>
          <target state="translated">也可以一步到位地压缩或解压数据。</target>
        </trans-unit>
        <trans-unit id="60bfb3903cd859802eba53ef817be6fc4d39e1d0" translate="yes" xml:space="preserve">
          <source>It is also possible to create new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instances from a &lt;code&gt;Buffer&lt;/code&gt; with the following caveats:</source>
          <target state="translated">还可以从 &lt;code&gt;Buffer&lt;/code&gt; 中创建新的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;实例，但要注意以下几点：</target>
        </trans-unit>
        <trans-unit id="94f8e04142983f13c24079e34f4c988c32e45040" translate="yes" xml:space="preserve">
          <source>It is also possible to set a breakpoint in a file (module) that is not loaded yet:</source>
          <target state="translated">也可以在尚未加载的文件(模块)中设置断点。</target>
        </trans-unit>
        <trans-unit id="f3e7ef80ba24b9fb35096f06920755ced16718da" translate="yes" xml:space="preserve">
          <source>It is also possible to subscribe only to notifications with specific method:</source>
          <target state="translated">也可以用特定的方法只订阅通知。</target>
        </trans-unit>
        <trans-unit id="c36886a21b327f4efa13efb333b8085346c75732" translate="yes" xml:space="preserve">
          <source>It is also possible to wrap C++ objects/classes in a way that allows new instances to be created using the JavaScript &lt;code&gt;new&lt;/code&gt; operator:</source>
          <target state="translated">还可以用允许使用JavaScript &lt;code&gt;new&lt;/code&gt; 运算符创建新实例的方式包装C ++对象/类：</target>
        </trans-unit>
        <trans-unit id="c27ace742269815d9bc53f0c5f64ced13adb5440" translate="yes" xml:space="preserve">
          <source>It is also recommended that any &lt;code&gt;'message'&lt;/code&gt; handlers in the child process verify that &lt;code&gt;socket&lt;/code&gt; exists, as the connection may have been closed during the time it takes to send the connection to the child.</source>
          <target state="translated">还建议子进程中的所有 &lt;code&gt;'message'&lt;/code&gt; 处理程序都验证 &lt;code&gt;socket&lt;/code&gt; 存在，因为在将连接发送给子进程的过程中连接可能已关闭。</target>
        </trans-unit>
        <trans-unit id="16c143cda1d23fdc307acaa4ab93fadca2a6f783" translate="yes" xml:space="preserve">
          <source>It is bad practice to remove listeners added elsewhere in the code, particularly when the &lt;code&gt;EventEmitter&lt;/code&gt; instance was created by some other component or module (e.g. sockets or file streams).</source>
          <target state="translated">删除代码中其他地方添加的侦听器是一种不好的做法，尤其是当 &lt;code&gt;EventEmitter&lt;/code&gt; 实例是由某些其他组件或模块（例如套接字或文件流）创建时。</target>
        </trans-unit>
        <trans-unit id="9c833a8c6ebe950f983fd451c778c087cc9332c0" translate="yes" xml:space="preserve">
          <source>It is being linked (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linking'&lt;/code&gt;)</source>
          <target state="translated">它正在被链接（ &lt;code&gt;linkingStatus&lt;/code&gt; 为 &lt;code&gt;'linking'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="419d5dee627637c5194692a9f10eb64d65bcc9aa" translate="yes" xml:space="preserve">
          <source>It is common practice within Addons to pass JavaScript functions to a C++ function and execute them from there. The following example illustrates how to invoke such callbacks:</source>
          <target state="translated">在Addons中,通常的做法是将JavaScript函数传递给一个C++函数,然后从那里执行它们。下面的例子说明了如何调用这种回调。</target>
        </trans-unit>
        <trans-unit id="d1e8308e7f9db59899a0946a4de525aabc71fba1" translate="yes" xml:space="preserve">
          <source>It is common practice within addons to pass JavaScript functions to a C++ function and execute them from there. The following example illustrates how to invoke such callbacks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3048ab55c4bb6de03bd26d55d03dc4c5facb8b7f" translate="yes" xml:space="preserve">
          <source>It is convenient to organize programs and libraries into self-contained directories, and then provide a single entry point to those directories. There are three ways in which a folder may be passed to &lt;code&gt;require()&lt;/code&gt; as an argument.</source>
          <target state="translated">将程序和库组织到独立的目录中，然后为这些目录提供单个入口点是很方便的。可以通过三种方式将文件夹作为参数传递给 &lt;code&gt;require()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ae010a7f5ed72fe5c4197d82c84289cacb4988c" translate="yes" xml:space="preserve">
          <source>It is deprecated and should not be used in new code. JavaScript comes with very similar built-in functionality through &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">它已被弃用，不应在新代码中使用。JavaScript通过&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt;具有非常相似的内置功能。</target>
        </trans-unit>
        <trans-unit id="382706d811accf5e4830215dc1300355249bb388" translate="yes" xml:space="preserve">
          <source>It is deprecated in favor of &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt;, because it serves the same purpose and is only available on CommonJS environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937f36c6fe0ce89575bd34e56b0dfed7daac172f" translate="yes" xml:space="preserve">
          <source>It is good practice, to &lt;a href=&quot;#http_agent_destroy&quot;&gt;&lt;code&gt;destroy()&lt;/code&gt;&lt;/a&gt; an &lt;code&gt;Agent&lt;/code&gt; instance when it is no longer in use, because unused sockets consume OS resources.</source>
          <target state="translated">这是很好的做法，以&lt;a href=&quot;#http_agent_destroy&quot;&gt; &lt;code&gt;destroy()&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;Agent&lt;/code&gt; 实例时，它不再使用，因为未使用的插座消耗OS的资源。</target>
        </trans-unit>
        <trans-unit id="2bc5790e09a1d829dcaf9ede78c9a8dcb7900d48" translate="yes" xml:space="preserve">
          <source>It is important to keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.</source>
          <target state="translated">需要注意的是,被催生的Node.js子进程是独立于父进程的,除了两者之间建立的IPC通信通道。每个进程都有自己的内存,有自己的V8实例。因为需要额外的资源分配,所以不建议生成大量的Node.js子进程。</target>
        </trans-unit>
        <trans-unit id="4512b8cdb5a3c36488e4bbb14fc8dde177723733" translate="yes" xml:space="preserve">
          <source>It is impossible to know in advance the MTU of each link through which a packet might travel. Sending a datagram greater than the receiver &lt;code&gt;MTU&lt;/code&gt; will not work because the packet will get silently dropped without informing the source that the data did not reach its intended recipient.</source>
          <target state="translated">事先无法知道数据包可能通过的每个链路的MTU。发送大于接收者 &lt;code&gt;MTU&lt;/code&gt; 的数据报将不起作用，因为数据包将被静默丢弃，而不会通知源数据未到达其预期的接收者。</target>
        </trans-unit>
        <trans-unit id="6e2e4af5d5aa394246178c425f14d66e2517e6db" translate="yes" xml:space="preserve">
          <source>It is not clear whether &lt;code&gt;foo()&lt;/code&gt; or &lt;code&gt;bar()&lt;/code&gt; will be called first.</source>
          <target state="translated">目前尚不清楚首先要调用 &lt;code&gt;foo()&lt;/code&gt; 还是 &lt;code&gt;bar()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67feb1878c776ad9fccd934e67f62317478d643e" translate="yes" xml:space="preserve">
          <source>It is not emitted in the worker.</source>
          <target state="translated">它在工人中是不散发的。</target>
        </trans-unit>
        <trans-unit id="187a290752482dba747ede2b91a61d535838b186" translate="yes" xml:space="preserve">
          <source>It is not necessary to call into JavaScript via &lt;code&gt;napi_make_callback()&lt;/code&gt; because N-API runs &lt;code&gt;call_js_cb&lt;/code&gt; in a context appropriate for callbacks.</source>
          <target state="translated">不需要通过 &lt;code&gt;napi_make_callback()&lt;/code&gt; 调用JavaScript，因为N-API 在适合于回调的上下文中运行 &lt;code&gt;call_js_cb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de78e88d2cf1c226b2cfb4eda72528bc88f2e15b" translate="yes" xml:space="preserve">
          <source>It is not necessary to use this method before passing headers to an HTTP request or response. The HTTP module will automatically validate such headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296a4e8488e3ee0257b7a2a2c0b7176cf79e4966" translate="yes" xml:space="preserve">
          <source>It is not necessary to use this method before passing headers to an HTTP request or response. The HTTP module will automatically validate such headers. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d10f2c19d8c5b37fce057d024a074f7f6dd563d" translate="yes" xml:space="preserve">
          <source>It is not possible to &lt;code&gt;require()&lt;/code&gt; files that have the &lt;code&gt;.mjs&lt;/code&gt; extension. Attempting to do so will throw &lt;a href=&quot;errors#errors_err_require_esm&quot;&gt;an error&lt;/a&gt;. The &lt;code&gt;.mjs&lt;/code&gt; extension is reserved for &lt;a href=&quot;esm&quot;&gt;ECMAScript Modules&lt;/a&gt; which cannot be loaded via &lt;code&gt;require()&lt;/code&gt;. See &lt;a href=&quot;esm&quot;&gt;ECMAScript Modules&lt;/a&gt; for more details.</source>
          <target state="translated">这是不可能的 &lt;code&gt;require()&lt;/code&gt; 有文件 &lt;code&gt;.mjs&lt;/code&gt; 扩展。尝试这样做将引发&lt;a href=&quot;errors#errors_err_require_esm&quot;&gt;错误&lt;/a&gt;。所述 &lt;code&gt;.mjs&lt;/code&gt; 扩展被保留用于&lt;a href=&quot;esm&quot;&gt;ECMAScript的模块&lt;/a&gt;不能经由被加载 &lt;code&gt;require()&lt;/code&gt; 。有关更多详细信息，请参见&lt;a href=&quot;esm&quot;&gt;ECMAScript模块&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d7b21297f31acb334dbc5d7e4654c5f95618230e" translate="yes" xml:space="preserve">
          <source>It is not possible to cancel timers that were created using the promisified variants of &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">无法取消使用&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;的允许变量创建的计时器。</target>
        </trans-unit>
        <trans-unit id="e66357995a3753445dca09b779bcb4d762b0d211" translate="yes" xml:space="preserve">
          <source>It is not recommended to use this option once a socket has been sent to a child with &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一旦套接字已通过&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;发送给孩子，则不建议使用此选项。</target>
        </trans-unit>
        <trans-unit id="11b99fc0673b66c9c42a80c4a0c35748194bd28e" translate="yes" xml:space="preserve">
          <source>It is often necessary to make the lifespan of handles shorter than the lifespan of a native method. For example, consider a native method that has a loop which iterates through the elements in a large array:</source>
          <target state="translated">通常有必要使句柄的寿命比本地方法的寿命短。例如,考虑一个本地方法,它有一个循环,在一个大数组中迭代元素。</target>
        </trans-unit>
        <trans-unit id="4c4c02784543cf811bfb3f1f2ca2f803b137643c" translate="yes" xml:space="preserve">
          <source>It is possible for Node.js to be built without including support for the &lt;code&gt;crypto&lt;/code&gt; module. In such cases, calling &lt;code&gt;require('crypto')&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">可以在不包含对 &lt;code&gt;crypto&lt;/code&gt; 模块的支持的情况下构建Node.js。在这种情况下，调用 &lt;code&gt;require('crypto')&lt;/code&gt; 将导致引发错误。</target>
        </trans-unit>
        <trans-unit id="9ec146a36358c16fe853764f44ebbd03ad1c100e" translate="yes" xml:space="preserve">
          <source>It is possible that no output is generated from any given chunk of input data.</source>
          <target state="translated">任何给定的输入数据块都有可能没有输出。</target>
        </trans-unit>
        <trans-unit id="041de057d4cce3b0afd146cbb127bf4a3b681c5a" translate="yes" xml:space="preserve">
          <source>It is possible to attach multiple &lt;code&gt;Writable&lt;/code&gt; streams to a single &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="translated">可以将多个 &lt;code&gt;Writable&lt;/code&gt; 流附加到单个 &lt;code&gt;Readable&lt;/code&gt; 流。</target>
        </trans-unit>
        <trans-unit id="e1f756af417fbde2518c13a7c85fc18b3dac2b86" translate="yes" xml:space="preserve">
          <source>It is possible to create a new &lt;code&gt;Buffer&lt;/code&gt; that shares the same allocated memory as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance by using the &lt;code&gt;TypedArray&lt;/code&gt; object&amp;rsquo;s &lt;code&gt;.buffer&lt;/code&gt; property in the same way. &lt;a href=&quot;#buffer_static_method_buffer_from_arraybuffer_byteoffset_length&quot;&gt;&lt;code&gt;Buffer.from()&lt;/code&gt;&lt;/a&gt; behaves like &lt;code&gt;new Uint8Array()&lt;/code&gt; in this context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d799d5874d270cd1edf1e65682d3d92bdbd761d" translate="yes" xml:space="preserve">
          <source>It is possible to create a new &lt;code&gt;Buffer&lt;/code&gt; that shares the same allocated memory as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance by using the &lt;code&gt;TypedArray&lt;/code&gt; object's &lt;code&gt;.buffer&lt;/code&gt; property.</source>
          <target state="translated">通过使用 &lt;code&gt;TypedArray&lt;/code&gt; 对象的 &lt;code&gt;.buffer&lt;/code&gt; 属性，可以创建一个与&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;实例共享相同分配内存的新 &lt;code&gt;Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0425f8d11e929edaebd4ecd9966c15d540c99b06" translate="yes" xml:space="preserve">
          <source>It is possible to create and run multiple REPL instances against a single running instance of Node.js that share a single &lt;code&gt;global&lt;/code&gt; object but have separate I/O interfaces.</source>
          <target state="translated">可以针对共享单个 &lt;code&gt;global&lt;/code&gt; 对象但具有单独的I / O接口的Node.js的单个运行实例创建和运行多个REPL实例。</target>
        </trans-unit>
        <trans-unit id="aebe7a7a176eecea0791341611fe6bc21db870e1" translate="yes" xml:space="preserve">
          <source>It is possible to have type name collisions. Embedders are encouraged to use unique prefixes, such as the npm package name, to prevent collisions when listening to the hooks.</source>
          <target state="translated">有可能出现类型名碰撞。我们鼓励嵌入者使用唯一的前缀,如npm包名,以防止监听钩子时发生碰撞。</target>
        </trans-unit>
        <trans-unit id="e6c6c312d474be31ba928b610b1f24972346fde4" translate="yes" xml:space="preserve">
          <source>It is possible to modify this object, but such modifications will not be reflected outside the Node.js process, or (unless explicitly requested) to other &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads. In other words, the following example would not work:</source>
          <target state="translated">可以修改此对象，但是这样的修改不会反映在Node.js进程之外，或者（除非明确要求）不会反映到其他&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;线程。换句话说，以下示例将不起作用：</target>
        </trans-unit>
        <trans-unit id="35d16003884be438df7a1acc413175dbe0c12f8c" translate="yes" xml:space="preserve">
          <source>It is possible to monitor &lt;code&gt;'error'&lt;/code&gt; events without consuming the emitted error by installing a listener using the symbol &lt;code&gt;errorMonitor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c50e3a0dc247c0e0d0c4d0e9566d30f009dc29" translate="yes" xml:space="preserve">
          <source>It is possible to monitor &lt;code&gt;'uncaughtException'&lt;/code&gt; events without overriding the default behavior to exit the process by installing a &lt;code&gt;'uncaughtExceptionMonitor'&lt;/code&gt; listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86565752a73577e2315e700600c3bf0c40a3f4fd" translate="yes" xml:space="preserve">
          <source>It is possible to require specific files or sub modules distributed with a module by including a path suffix after the module name. For instance &lt;code&gt;require('example-module/path/to/file')&lt;/code&gt; would resolve &lt;code&gt;path/to/file&lt;/code&gt; relative to where &lt;code&gt;example-module&lt;/code&gt; is located. The suffixed path follows the same module resolution semantics.</source>
          <target state="translated">通过在模块名称后包含路径后缀，可以要求特定的文件或与模块一起分发的子模块。例如 &lt;code&gt;require('example-module/path/to/file')&lt;/code&gt; 会相对于 &lt;code&gt;example-module&lt;/code&gt; 所在的位置解析 &lt;code&gt;path/to/file&lt;/code&gt; 。后缀路径遵循相同的模块解析语义。</target>
        </trans-unit>
        <trans-unit id="ba28385ee96435cb01e25cc4b9a932046f15c449" translate="yes" xml:space="preserve">
          <source>It is possible to use ES6 Arrow Functions as listeners, however, when doing so, the &lt;code&gt;this&lt;/code&gt; keyword will no longer reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance:</source>
          <target state="translated">可以将ES6箭头函数用作侦听器，但是，这样做时， &lt;code&gt;this&lt;/code&gt; 关键字将不再引用 &lt;code&gt;EventEmitter&lt;/code&gt; 实例：</target>
        </trans-unit>
        <trans-unit id="d50f1c65fac5502c9e1814ed3537ba4589771ab5" translate="yes" xml:space="preserve">
          <source>It is possible to watch expression and variable values while debugging. On every breakpoint, each expression from the watchers list will be evaluated in the current context and displayed immediately before the breakpoint's source code listing.</source>
          <target state="translated">可以在调试时观察表达式和变量值。在每个断点上,观察者列表中的每个表达式都会在当前上下文中被评估,并紧接着显示在断点的源代码列表之前。</target>
        </trans-unit>
        <trans-unit id="9a28d0af67f353f363a2876505349b3688d12dbd" translate="yes" xml:space="preserve">
          <source>It is recommended that errors occurring during the processing of the &lt;code&gt;readable._read()&lt;/code&gt; method are emitted using the &lt;code&gt;'error'&lt;/code&gt; event rather than being thrown. Throwing an &lt;code&gt;Error&lt;/code&gt; from within &lt;code&gt;readable._read()&lt;/code&gt; can result in unexpected and inconsistent behavior depending on whether the stream is operating in flowing or paused mode. Using the &lt;code&gt;'error'&lt;/code&gt; event ensures consistent and predictable handling of errors.</source>
          <target state="translated">建议在处理 &lt;code&gt;readable._read()&lt;/code&gt; 方法期间发生的错误是使用 &lt;code&gt;'error'&lt;/code&gt; 事件发出的，而不是抛出该错误。从 &lt;code&gt;readable._read()&lt;/code&gt; 内部抛出 &lt;code&gt;Error&lt;/code&gt; 可能导致意外和不一致的行为，具体取决于流是在流模式还是在暂停模式下运行。使用 &lt;code&gt;'error'&lt;/code&gt; 事件可确保一致且可预测地处理错误。</target>
        </trans-unit>
        <trans-unit id="a056961ff3bdb7c76c478689117c030d14d553dd" translate="yes" xml:space="preserve">
          <source>It is recommended that errors occurring during the processing of the &lt;code&gt;writable._write()&lt;/code&gt; and &lt;code&gt;writable._writev()&lt;/code&gt; methods are reported by invoking the callback and passing the error as the first argument. This will cause an &lt;code&gt;'error'&lt;/code&gt; event to be emitted by the &lt;code&gt;Writable&lt;/code&gt;. Throwing an &lt;code&gt;Error&lt;/code&gt; from within &lt;code&gt;writable._write()&lt;/code&gt; can result in unexpected and inconsistent behavior depending on how the stream is being used. Using the callback ensures consistent and predictable handling of errors.</source>
          <target state="translated">建议通过调用回调并将错误作为第一个参数传递来报告在处理 &lt;code&gt;writable._write()&lt;/code&gt; 和 &lt;code&gt;writable._writev()&lt;/code&gt; 方法期间发生的错误。这将导致 &lt;code&gt;Writable&lt;/code&gt; 发出 &lt;code&gt;'error'&lt;/code&gt; 事件。从 &lt;code&gt;writable._write()&lt;/code&gt; 内部引发 &lt;code&gt;Error&lt;/code&gt; 可能会导致意外和不一致的行为，具体取决于流的使用方式。使用回调可确保一致且可预测的错误处理。</target>
        </trans-unit>
        <trans-unit id="ea16402f95d8daded063cf513af19663455d8c99" translate="yes" xml:space="preserve">
          <source>It is recommended to encode public keys as &lt;code&gt;'spki'&lt;/code&gt; and private keys as &lt;code&gt;'pkcs8'&lt;/code&gt; with encryption for long-term storage:</source>
          <target state="translated">建议使用加密将公钥编码为 &lt;code&gt;'spki'&lt;/code&gt; ，将私钥编码为 &lt;code&gt;'pkcs8'&lt;/code&gt; ，以便长期存储：</target>
        </trans-unit>
        <trans-unit id="be30c74885508dee4aa59c7f4ed4177d22aed095" translate="yes" xml:space="preserve">
          <source>It is required that &lt;code&gt;byte_length + byte_offset&lt;/code&gt; is less than or equal to the size in bytes of the array passed in. If not, a &lt;code&gt;RangeError&lt;/code&gt; exception is raised.</source>
          <target state="translated">要求 &lt;code&gt;byte_length + byte_offset&lt;/code&gt; 小于或等于传入的数组的字节大小。否则，将引发 &lt;code&gt;RangeError&lt;/code&gt; 异常。</target>
        </trans-unit>
        <trans-unit id="22b0f46e9ce955411b0e5f9b89cbb8973cf2da94" translate="yes" xml:space="preserve">
          <source>It is still possible to use &lt;code&gt;fs.watchFile()&lt;/code&gt;, which uses stat polling, but this method is slower and less reliable.</source>
          <target state="translated">仍然可以使用使用状态轮询的 &lt;code&gt;fs.watchFile()&lt;/code&gt; ，但是此方法较慢且可靠性较低。</target>
        </trans-unit>
        <trans-unit id="139b9846793e9d67315fbc1333aef413751a7253" translate="yes" xml:space="preserve">
          <source>It is strongly encouraged to place dependencies in the local &lt;code&gt;node_modules&lt;/code&gt; folder. These will be loaded faster, and more reliably.</source>
          <target state="translated">强烈建议将依赖项放在本地 &lt;code&gt;node_modules&lt;/code&gt; 文件夹中。这些将更快，更可靠地加载。</target>
        </trans-unit>
        <trans-unit id="022cb2f71f9ba41c057c015a1ac77f0d6fecfadd" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that the results of compression operations be cached to avoid duplication of effort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57e947162fc04e3a4c5011c7abce4b05a307aa0" translate="yes" xml:space="preserve">
          <source>It is unsafe to call &lt;code&gt;writev()&lt;/code&gt; multiple times on the same file without waiting for the previous operation to complete.</source>
          <target state="translated">不等待上一个操作完成就在同一文件上多次调用 &lt;code&gt;writev()&lt;/code&gt; 是不安全的。</target>
        </trans-unit>
        <trans-unit id="9a074961b126d1ed61535ab8ccf81ae46b4f5b8c" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;filehandle.write()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected). For this scenario, use &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在同一文件上多次使用 &lt;code&gt;filehandle.write()&lt;/code&gt; 是不安全的，而不必等待 &lt;code&gt;Promise&lt;/code&gt; 被解决（或拒绝）是不安全的。对于这种情况，请使用&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fa06e1e67ec61d886012a5ebbf346afac1c50178" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;filehandle.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected).</source>
          <target state="translated">在同一文件上多次使用 &lt;code&gt;filehandle.writeFile()&lt;/code&gt; 是不安全的，而不必等待 &lt;code&gt;Promise&lt;/code&gt; 被解决（或拒绝）是不安全的。</target>
        </trans-unit>
        <trans-unit id="327d5849595d0b2d3af0390f737024885e0b74a4" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.write()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="translated">不等待回调就在同一文件上多次使用 &lt;code&gt;fs.write()&lt;/code&gt; 是不安全的。对于这种情况，建议使用&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb3527578258e75386e719cb61809fc94de47660" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="translated">不等待回调就在同一文件上多次使用 &lt;code&gt;fs.writeFile()&lt;/code&gt; 是不安全的。对于这种情况，建议使用&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9cd51ed95a8e7ff9d29a46cc5b594661dab21ee9" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.writev()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, use &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">不等待回调就在同一文件上多次使用 &lt;code&gt;fs.writev()&lt;/code&gt; 是不安全的。对于这种情况，请使用&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e32bdefd256d2a24661a921234ae0d689962bf7c" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected).</source>
          <target state="translated">在同一文件上多次使用 &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; 是不安全的，而不必等待 &lt;code&gt;Promise&lt;/code&gt; 被解决（或拒绝）是不安全的。</target>
        </trans-unit>
        <trans-unit id="8e339f1709056e0ab06d967b94bed7dafd547b83" translate="yes" xml:space="preserve">
          <source>It is usually not necessary to do this. However, if using an agent with &lt;code&gt;keepAlive&lt;/code&gt; enabled, then it is best to explicitly shut down the agent when it will no longer be used. Otherwise, sockets may hang open for quite a long time before the server terminates them.</source>
          <target state="translated">通常没有必要这样做。但是，如果使用启用了 &lt;code&gt;keepAlive&lt;/code&gt; 的代理，则最好在不再使用该代理时明确关闭该代理。否则，套接字可能会在服务器终止之前悬吊很长时间。</target>
        </trans-unit>
        <trans-unit id="588053c04448ff48f8bf959f153ee214ac140018" translate="yes" xml:space="preserve">
          <source>It is very important for APIs to be either 100% synchronous or 100% asynchronous. Consider this example:</source>
          <target state="translated">对于API来说,100%同步或100%异步是非常重要的。考虑这个例子。</target>
        </trans-unit>
        <trans-unit id="0324495de22e85e0d134839d942c3962300cbac5" translate="yes" xml:space="preserve">
          <source>It keeps top-level variables (defined with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;) scoped to the module rather than the global object.</source>
          <target state="translated">它使顶级变量（用 &lt;code&gt;var&lt;/code&gt; ， &lt;code&gt;const&lt;/code&gt; 或 &lt;code&gt;let&lt;/code&gt; 定义）的作用域限定于模块而不是全局对象。</target>
        </trans-unit>
        <trans-unit id="83e75e459c92e28df79b2b636a0f41ab57292e39" translate="yes" xml:space="preserve">
          <source>It may be useful for debugging.</source>
          <target state="translated">它可能对调试有用。</target>
        </trans-unit>
        <trans-unit id="3b653a9cb85ecaa0c5b1d834abf7d88df675e8a5" translate="yes" xml:space="preserve">
          <source>It must be set to a non-zero value (e.g. 120 seconds) to proctect against potential Denial-of-Service attacks in case the server is deployed without a reverse proxy in front.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d4c4a6b07ad03b9db87fefb27c47016dd56d4f" translate="yes" xml:space="preserve">
          <source>It must belong to the same context as the parent &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">它必须与父 &lt;code&gt;Module&lt;/code&gt; 属于同一上下文。</target>
        </trans-unit>
        <trans-unit id="389a01fac4a0ef708ee83106d03f5176a5d0807c" translate="yes" xml:space="preserve">
          <source>It performs the inverse operation to &lt;a href=&quot;#url_url_domaintoascii_domain&quot;&gt;&lt;code&gt;url.domainToASCII()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">它对&lt;a href=&quot;#url_url_domaintoascii_domain&quot;&gt; &lt;code&gt;url.domainToASCII()&lt;/code&gt; &lt;/a&gt;执行相反的操作。</target>
        </trans-unit>
        <trans-unit id="e1f3dc61a93c5fe87d9de7e00282a1c8432614fc" translate="yes" xml:space="preserve">
          <source>It performs the inverse operation to &lt;a href=&quot;#url_url_domaintounicode_domain&quot;&gt;&lt;code&gt;url.domainToUnicode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">它对&lt;a href=&quot;#url_url_domaintounicode_domain&quot;&gt; &lt;code&gt;url.domainToUnicode()&lt;/code&gt; &lt;/a&gt;执行相反的操作。</target>
        </trans-unit>
        <trans-unit id="16ec379b732d9cc8bb302ba29e2ef8af384a9552" translate="yes" xml:space="preserve">
          <source>It serializes the following types of values passed in &lt;code&gt;obj&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean[]&amp;gt;&lt;/a&gt; Any other input values will be coerced to empty strings.</source>
          <target state="translated">它序列化 &lt;code&gt;obj&lt;/code&gt; 中传递的以下类型的值：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;数字&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;布尔值&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string []&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number []&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean []&amp;gt;&lt;/a&gt;其他任何输入值将被强制为空字符串。</target>
        </trans-unit>
        <trans-unit id="f351f399c56b32725ac21458cab9068da78810d2" translate="yes" xml:space="preserve">
          <source>It supports the following option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a4bb7259c84af569c9b2e4d90c56c3c0ed3ef3" translate="yes" xml:space="preserve">
          <source>It will rarely be necessary to use &lt;code&gt;readable.wrap()&lt;/code&gt; but the method has been provided as a convenience for interacting with older Node.js applications and libraries.</source>
          <target state="translated">几乎不需要使用 &lt;code&gt;readable.wrap()&lt;/code&gt; 但是提供该方法是为了方便与较旧的Node.js应用程序和库进行交互。</target>
        </trans-unit>
        <trans-unit id="1d542fd12f985c8768fbe8ead6923a0d00b50f32" translate="yes" xml:space="preserve">
          <source>It's required that &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; should be &amp;lt;= the size in bytes of the array passed in. If not, a &lt;code&gt;RangeError&lt;/code&gt; exception is raised.</source>
          <target state="translated">要求 &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; 应小于等于传入数组的字节大小。否则，将引发 &lt;code&gt;RangeError&lt;/code&gt; 异常。</target>
        </trans-unit>
        <trans-unit id="42a3b56cedfed26ace470da3c86678970122c99f" translate="yes" xml:space="preserve">
          <source>Iterates over each name-value pair in the query and invokes the given function.</source>
          <target state="translated">遍历查询中的每一个名-值对并调用给定的函数。</target>
        </trans-unit>
        <trans-unit id="e605b560485e511ea1daf5880b375c721cd76bc2" translate="yes" xml:space="preserve">
          <source>Iterates through the list of functions passed to &lt;a href=&quot;#assert_tracker_calls_fn_exact&quot;&gt;&lt;code&gt;tracker.calls()&lt;/code&gt;&lt;/a&gt; and will throw an error for functions that have not been called the expected number of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0eca1e364367b12a698606c4b171ea9cc0b251" translate="yes" xml:space="preserve">
          <source>Its &lt;code&gt;linkingStatus&lt;/code&gt; must not be &lt;code&gt;'errored'&lt;/code&gt;.</source>
          <target state="translated">它的 &lt;code&gt;linkingStatus&lt;/code&gt; 一定不能 &lt;code&gt;'errored'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c389cfb78c9e8ab8770625e5975f1207f9467241" translate="yes" xml:space="preserve">
          <source>Its &lt;code&gt;status&lt;/code&gt; must not be &lt;code&gt;'errored'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56643b463dc4ce55950dfcbbef495be7564e51fe" translate="yes" xml:space="preserve">
          <source>Its possible to get the ticket keys by calling &lt;a href=&quot;#tls_server_getticketkeys&quot;&gt;&lt;code&gt;server.getTicketKeys()&lt;/code&gt;&lt;/a&gt; on one server instance and then distribute them, but it is more reasonable to securely generate 48 bytes of secure random data and set them with the &lt;code&gt;ticketKeys&lt;/code&gt; option of &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;. The keys should be regularly regenerated and server's keys can be reset with &lt;a href=&quot;#tls_server_setticketkeys_keys&quot;&gt;&lt;code&gt;server.setTicketKeys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">可以通过在一个服务器实例上调用&lt;a href=&quot;#tls_server_getticketkeys&quot;&gt; &lt;code&gt;server.getTicketKeys()&lt;/code&gt; &lt;/a&gt;然后分发它们来获取票证密钥，但是安全地生成48个字节的安全随机数据并使用&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; &lt;/a&gt;的 &lt;code&gt;ticketKeys&lt;/code&gt; 选项进行设置更为合理。。应该定期重新生成密钥，并且可以使用&lt;a href=&quot;#tls_server_setticketkeys_keys&quot;&gt; &lt;code&gt;server.setTicketKeys()&lt;/code&gt; &lt;/a&gt;重置服务器的密钥。</target>
        </trans-unit>
        <trans-unit id="d96b84d8240a01cb379b56b8ddafa735704cf6dc" translate="yes" xml:space="preserve">
          <source>JSON Modules</source>
          <target state="translated">JSON模块</target>
        </trans-unit>
        <trans-unit id="d99d73b448c0f1ffea6212a90bfd357cad49d279" translate="yes" xml:space="preserve">
          <source>JSON fetching example:</source>
          <target state="translated">JSON取样。</target>
        </trans-unit>
        <trans-unit id="f7b9a43a2017f679eee5493180c26ed2f1e85185" translate="yes" xml:space="preserve">
          <source>JSON modules follow the &lt;a href=&quot;https://html.spec.whatwg.org/#creating-a-json-module-script&quot;&gt;WHATWG JSON modules specification&lt;/a&gt;.</source>
          <target state="translated">JSON模块遵循&lt;a href=&quot;https://html.spec.whatwg.org/#creating-a-json-module-script&quot;&gt;WHATWG JSON模块规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="be23b85acb18166e5a08c5600a8d19dd96e42e39" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;Section 24.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; 对象在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;24.1节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="719a95a4bd9cf0b14d2f00175d73f2e6d748c5c3" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;s are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;Section 24.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">的JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; s的在描述&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;第24.1节&lt;/a&gt;所述的ECMAScript语言规范。</target>
        </trans-unit>
        <trans-unit id="2c8a0f0228ff639ea0dc5a1ba127ae8157e21154" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;DataView&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-dataview-objects&quot;&gt;Section 24.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;DataView&lt;/code&gt; 对象在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-dataview-objects&quot;&gt;24.3节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="5b1277ef9e321fb8f47bd20f93e6f1911ecebefc" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Date&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-objects&quot;&gt;Section 20.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; 对象在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-objects&quot;&gt;20.3节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="4939241f55942c05d559f3a5b9a7e5d692c058d3" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Function&lt;/code&gt;s are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function-objects&quot;&gt;Section 19.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">的JavaScript &lt;code&gt;Function&lt;/code&gt; s的在描述&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function-objects&quot;&gt;第19.2节&lt;/a&gt;所述的ECMAScript语言规范。</target>
        </trans-unit>
        <trans-unit id="dd9060b350cc54a90664674036d8765a0574ec82" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;TypedArray&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;Section 22.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;TypedArray&lt;/code&gt; 对象在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;22.2节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="52cad7d4c62e41b12e029e3a1056b734751ff955" translate="yes" xml:space="preserve">
          <source>JavaScript Embedder API</source>
          <target state="translated">JavaScript嵌入器API</target>
        </trans-unit>
        <trans-unit id="48785657daead33de8f57e1fb9950e0b74a5ba21" translate="yes" xml:space="preserve">
          <source>JavaScript Expressions</source>
          <target state="translated">JavaScript表达式</target>
        </trans-unit>
        <trans-unit id="0c87a0c72e80e2b3ed246c907f512dd6657150a6" translate="yes" xml:space="preserve">
          <source>JavaScript arrays are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;Section 22.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript数组在ECMAScript语言规范的&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;22.1节中&lt;/a&gt;进行了描述。</target>
        </trans-unit>
        <trans-unit id="41362f31a71042ce6d33522241a4d37c00acbcd3" translate="yes" xml:space="preserve">
          <source>JavaScript cannot encode 64-bit integers. This method is intended for working with 64-bit floats.</source>
          <target state="translated">JavaScript不能对64位整数进行编码。这个方法是为了处理64位的浮点数。</target>
        </trans-unit>
        <trans-unit id="cec7f745469211f8ad0113b8267b2dbc38c96dca" translate="yes" xml:space="preserve">
          <source>JavaScript code can be compiled and run immediately or compiled, saved, and run later.</source>
          <target state="translated">JavaScript代码可以编译后立即运行,也可以编译、保存后再运行。</target>
        </trans-unit>
        <trans-unit id="c9d606db4020d55005c50701236345ff97022d05" translate="yes" xml:space="preserve">
          <source>JavaScript embedder API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917e1829cf18731633a9e9508396fcc748caf231" translate="yes" xml:space="preserve">
          <source>JavaScript expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c23bb655ecc1d108ac1670bce1574ac9c38369" translate="yes" xml:space="preserve">
          <source>JavaScript functions can normally only be called from a native addon's main thread. If an addon creates additional threads, then N-API functions that require a &lt;code&gt;napi_env&lt;/code&gt;, &lt;code&gt;napi_value&lt;/code&gt;, or &lt;code&gt;napi_ref&lt;/code&gt; must not be called from those threads.</source>
          <target state="translated">通常只能从本机插件的主线程调用JavaScript函数。如果附加组件创建了其他线程，则必须从这些线程中调用需要 &lt;code&gt;napi_env&lt;/code&gt; ， &lt;code&gt;napi_value&lt;/code&gt; 或 &lt;code&gt;napi_ref&lt;/code&gt; 的 N-API函数。</target>
        </trans-unit>
        <trans-unit id="f37b66a76531faf963b06cfaf86c9ef0c5a880f1" translate="yes" xml:space="preserve">
          <source>JavaScript string escaping requires paths to be specified with extra backslash escaping such as:</source>
          <target state="translated">JavaScript 字符串转义要求指定的路径必须使用额外的反斜杠转义,例如。</target>
        </trans-unit>
        <trans-unit id="7e07413b34ffd366886a0fb40b6c95efba1be0d7" translate="yes" xml:space="preserve">
          <source>JavaScript value: these are represented in N-API by &lt;code&gt;napi_value&lt;/code&gt;. This can be a &lt;code&gt;napi_value&lt;/code&gt; representing a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, or &lt;code&gt;Symbol&lt;/code&gt;.</source>
          <target state="translated">JavaScript值：这些在N-API中由 &lt;code&gt;napi_value&lt;/code&gt; 表示。这可以是代表 &lt;code&gt;String&lt;/code&gt; ， &lt;code&gt;Number&lt;/code&gt; 或 &lt;code&gt;Symbol&lt;/code&gt; 的 &lt;code&gt;napi_value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a646ce6b666ea8e7f9c939db95870c104b2926f" translate="yes" xml:space="preserve">
          <source>Keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a71118cb899549ef60707eb4c7093a6139cf8e2" translate="yes" xml:space="preserve">
          <source>Key events in the lifetime of asynchronous events have been categorized into four areas: instantiation, before/after the callback is called, and when the instance is destroyed.</source>
          <target state="translated">异步事件生命周期中的关键事件被分为四个方面:实例化、回调被调用前/后、实例被销毁时。</target>
        </trans-unit>
        <trans-unit id="42fd293e6b52b92ee891b25260a8dcb7640476d7" translate="yes" xml:space="preserve">
          <source>Key-value pairs of header names and values. Header names are lower-cased.</source>
          <target state="translated">标头名和值的键值对。标头名称为小写字母。</target>
        </trans-unit>
        <trans-unit id="0219bac0488bb0b49dd2dc78aa3d21e7f7786afc" translate="yes" xml:space="preserve">
          <source>KeyObject</source>
          <target state="translated">KeyObject</target>
        </trans-unit>
        <trans-unit id="2cc8ec97bf0278d6ea5a1e7e27f117cb103c0fd7" translate="yes" xml:space="preserve">
          <source>Keybindings</source>
          <target state="translated">Keybindings</target>
        </trans-unit>
        <trans-unit id="736612bdaab47ddf51cb2896ce71e8f600786271" translate="yes" xml:space="preserve">
          <source>Keying material is used for validations to prevent different kind of attacks in network protocols, for example in the specifications of IEEE 802.1X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90247e04a9ab9c31144526b27a99cafa47c9ed23" translate="yes" xml:space="preserve">
          <source>Keys are lowercased. Values are not modified.</source>
          <target state="translated">键是小写的。价值不被修改。</target>
        </trans-unit>
        <trans-unit id="be4d0497bc308dc68e2b86f9d700c936ee0973b7" translate="yes" xml:space="preserve">
          <source>Launching Node.js using the &lt;code&gt;--throw-deprecation&lt;/code&gt; command line flag will cause custom deprecation warnings to be thrown as exceptions.</source>
          <target state="translated">使用 &lt;code&gt;--throw-deprecation&lt;/code&gt; 命令行标志启动Node.js 将导致自定义的弃用警告作为异常抛出。</target>
        </trans-unit>
        <trans-unit id="589aa56dcb4ae2243331e70e2c456e0e3f10ee92" translate="yes" xml:space="preserve">
          <source>Launching Node.js using the &lt;code&gt;--throw-deprecation&lt;/code&gt; command-line flag will cause custom deprecation warnings to be thrown as exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcbad204095230ea14447be64d133cef03f50d2" translate="yes" xml:space="preserve">
          <source>Launching the Node.js process as:</source>
          <target state="translated">启动Node.js进程为。</target>
        </trans-unit>
        <trans-unit id="bc8751555a3239b7dac027ac31b93be45c7a72a5" translate="yes" xml:space="preserve">
          <source>Legacy &lt;code&gt;urlObject&lt;/code&gt;</source>
          <target state="translated">旧版 &lt;code&gt;urlObject&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d12363dec3cec522658520bb14b574d2c38d4a9b" translate="yes" xml:space="preserve">
          <source>Legacy API</source>
          <target state="translated">传统的API</target>
        </trans-unit>
        <trans-unit id="fff0473a6005f02c6ee988eeea5c4589c0cee01e" translate="yes" xml:space="preserve">
          <source>Legacy Node.js Error Codes</source>
          <target state="translated">旧版Node.js错误代码</target>
        </trans-unit>
        <trans-unit id="f2f3e644bfa273f7a62a339c8c67d92c2d023797" translate="yes" xml:space="preserve">
          <source>Legacy Node.js error codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c20dd0e85aff7e0a43472ec0bd080ec8d34d100" translate="yes" xml:space="preserve">
          <source>Legacy Streams API (pre Node.js v0.10)</source>
          <target state="translated">传统的流API(Node.js v0.10之前的)。</target>
        </trans-unit>
        <trans-unit id="c20be4f6f706ee94b9055b8d2bb127f7bf2f5336" translate="yes" xml:space="preserve">
          <source>Legacy URL API</source>
          <target state="translated">传统的URL API</target>
        </trans-unit>
        <trans-unit id="c49890f6e5c25894c8780c745056d41986aa3353" translate="yes" xml:space="preserve">
          <source>Legacy assertion mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690cbb84b7e6358f848c556655c562eb7808ca07" translate="yes" xml:space="preserve">
          <source>Legacy assertion mode uses the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5edbf5c71f5ce411aa5b2426065109df221ad37" translate="yes" xml:space="preserve">
          <source>Legacy mode</source>
          <target state="translated">遗留模式</target>
        </trans-unit>
        <trans-unit id="cd1cabfb965ba7b42cb732ed586da70b61d4573f" translate="yes" xml:space="preserve">
          <source>Legacy mode uses the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; in:</source>
          <target state="translated">传统模式在以下方面使用&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象平等比较&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="afa63d440d39b6489812f1ff0f0264d475824636" translate="yes" xml:space="preserve">
          <source>Legacy streams API (prior to Node.js 0.10)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461cb9806496bebf38f62add29762de4f9878b5d" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;directoryKeys&lt;/em&gt; be the list of keys of &lt;em&gt;exports&lt;/em&gt; ending in &lt;em&gt;&quot;/&quot;&lt;/em&gt;, sorted by length descending.</source>
          <target state="translated">令&lt;em&gt;directoryKeys&lt;/em&gt;为以&lt;em&gt;&amp;ldquo; /&amp;rdquo;&lt;/em&gt;结尾的&lt;em&gt;导出&lt;/em&gt;键列表，按长度降序排列。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="238d8642800d4e2e91641682a42b5accc596aa90" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;expansionKeys&lt;/em&gt; be the list of keys of &lt;em&gt;matchObj&lt;/em&gt; ending in &lt;em&gt;&quot;/&quot;&lt;/em&gt; or &lt;em&gt;&quot;*&quot;&lt;/em&gt;, sorted by length descending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed43a3cca8d0829c50efa33ad8a1735744b22695" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;exports&lt;/em&gt; be &lt;em&gt;pjson.exports&lt;/em&gt;.</source>
          <target state="translated">我们&lt;em&gt;的出口&lt;/em&gt;是&lt;em&gt;pjson.exports&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="81d341d451b4f23afb843c097d49a45ca52c1763" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;format&lt;/em&gt; be the result of &lt;strong&gt;ESM_FORMAT&lt;/strong&gt;(&lt;em&gt;resolved&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1edf85bc7e8552161c136541aa74c4bb663ae6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;format&lt;/em&gt; be the result of &lt;strong&gt;ESM_FORMAT&lt;/strong&gt;(&lt;em&gt;resolvedURL&lt;/em&gt;, &lt;em&gt;isMain&lt;/em&gt;).</source>
          <target state="translated">让&lt;em&gt;格式&lt;/em&gt;是结果&lt;strong&gt;ESM_FORMAT&lt;/strong&gt;（&lt;em&gt;resolvedURL&lt;/em&gt;，&lt;em&gt;isMain&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="4e2049abb9ba314181946c48daedfb30d6cac2d4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;legacyMainURL&lt;/em&gt; be the result applying the legacy &lt;strong&gt;LOAD_AS_DIRECTORY&lt;/strong&gt; CommonJS resolver to &lt;em&gt;packageURL&lt;/em&gt;, throwing a &lt;em&gt;Module Not Found&lt;/em&gt; error for no resolution.</source>
          <target state="translated">令&lt;em&gt;legacyMainURL&lt;/em&gt;为将传统&lt;strong&gt;LOAD_AS_DIRECTORY&lt;/strong&gt; CommonJS解析器应用于&lt;em&gt;packageURL的结果&lt;/em&gt;，抛出&lt;em&gt;模块未找到&lt;/em&gt;错误，无解决方法。</target>
        </trans-unit>
        <trans-unit id="bee1b70b523ce66dc44d421b5c0494d728fae4ca" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;mainExport&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81e55b25ae69be4df19f32567a31664526acb27" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;matchKey&lt;/em&gt; be the string &lt;em&gt;&quot;./&quot;&lt;/em&gt; concatenated with &lt;em&gt;subpath&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382b20b41c3fc6df5c3fd1360c69bcd4bdb1e7b4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageName&lt;/em&gt; be &lt;em&gt;undefined&lt;/em&gt;.</source>
          <target state="translated">让&lt;em&gt;packageName&lt;/em&gt;为&lt;em&gt;undefined&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="07e24d67055d0d7ff4f488268b521db51a5de6d3" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageName&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1bb2436be75a438429e67d7dabfd4581d93455" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageSubpath&lt;/em&gt; be &lt;em&gt;&quot;.&quot;&lt;/em&gt; concatenated with the substring of &lt;em&gt;packageSpecifier&lt;/em&gt; from the position at the length of &lt;em&gt;packageName&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d816a69a606558435c2f7bf214574701cee0921" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageSubpath&lt;/em&gt; be &lt;em&gt;undefined&lt;/em&gt;.</source>
          <target state="translated">让&lt;em&gt;packageSubpath&lt;/em&gt;为&lt;em&gt;undefined&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3879a2c60ae8d9f31de4e2f2d3064c3f0a2e8df0" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageURL&lt;/em&gt; be the URL resolution of &lt;em&gt;&quot;node_modules/&quot;&lt;/em&gt; concatenated with &lt;em&gt;packageSpecifier&lt;/em&gt;, relative to &lt;em&gt;parentURL&lt;/em&gt;.</source>
          <target state="translated">相对于&lt;em&gt;parentURL&lt;/em&gt;，让&lt;em&gt;packageURL&lt;/em&gt;为与&lt;em&gt;packageSpecifier&lt;/em&gt;串联的&lt;em&gt;&amp;ldquo; node_modules /&amp;rdquo;&lt;/em&gt;的URL解析。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7ec862b5268642383a7fa543609b749e1b9b9ad8" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageURL&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_SCOPE&lt;/strong&gt;(&lt;em&gt;parentURL&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e82e8cf4cd3d2806cefa31d11b42457fe816e03" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;(&lt;em&gt;packageURL&lt;/em&gt;).</source>
          <target state="translated">令&lt;em&gt;pjson&lt;/em&gt;为&lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;（&lt;em&gt;packageURL&lt;/em&gt;）的结果。</target>
        </trans-unit>
        <trans-unit id="dfd3c96f5f0c598b9a6ae47e36bce4121bbd96e8" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;(&lt;em&gt;scopeURL&lt;/em&gt;).</source>
          <target state="translated">令&lt;em&gt;pjson&lt;/em&gt;为&lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;（&lt;em&gt;scopeURL&lt;/em&gt;）的结果。</target>
        </trans-unit>
        <trans-unit id="f236242b656b209b4a987cbd649a5c634a38f6f6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_SCOPE&lt;/strong&gt;(&lt;em&gt;url&lt;/em&gt;).</source>
          <target state="translated">令&lt;em&gt;pjson&lt;/em&gt;为&lt;strong&gt;READ_PACKAGE_SCOPE&lt;/strong&gt;（&lt;em&gt;url&lt;/em&gt;）的结果。</target>
        </trans-unit>
        <trans-unit id="d7efdf0ad8c2e8e15cf9c24ae647213041bbfe4d" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjsonURL&lt;/em&gt; be the resolution of &lt;em&gt;&quot;package.json&quot;&lt;/em&gt; within &lt;em&gt;packageURL&lt;/em&gt;.</source>
          <target state="translated">令&lt;em&gt;pjsonURL&lt;/em&gt;为&lt;em&gt;packageURL&lt;/em&gt;中&lt;em&gt;&amp;ldquo; package.json&amp;rdquo;&lt;/em&gt;的&lt;em&gt;分辨率&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d7e6e7ea60e186d1adbc7f7db3cc553716c4ddcc" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e85c83e3ea0b6dee0e7b7a3595ed1051fc6f538" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the URL resolution of the concatenation of &lt;em&gt;subpath&lt;/em&gt; and &lt;em&gt;resolvedTarget&lt;/em&gt;.</source>
          <target state="translated">让&lt;em&gt;解决&lt;/em&gt; BE的级联的URL解析&lt;em&gt;子路径&lt;/em&gt;和&lt;em&gt;resolvedTarget&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4e2ee789e16379e2ecc056e36d8d03d2ab18d4c4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_EXPORTS_TARGET_RESOLVE&lt;/strong&gt;(&lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;targetValue&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;), continuing the loop on abrupt completion.</source>
          <target state="translated">让&lt;em&gt;解决&lt;/em&gt;是&lt;strong&gt;PACKAGE_EXPORTS_TARGET_RESOLVE&lt;/strong&gt;（&lt;em&gt;packageURL&lt;/em&gt;，&lt;em&gt;targetValue&lt;/em&gt;，&lt;em&gt;subpath&lt;/em&gt;）的结果，在突然完成时继续循环。</target>
        </trans-unit>
        <trans-unit id="243345f737d47e69ad63b915c83c02e8578289f9" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;mainExport&lt;/em&gt;, &lt;em&gt;&quot;&quot;&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3133d6b4733828af60caaae154fd26afd03ac4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;target&lt;/em&gt;, &lt;em&gt;&quot;&quot;&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;em&gt;isImports&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3a2de04bbe5cf6d3001d3a8d92aaf018b3eab6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;target&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;em&gt;isImports&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2acbd60ce691239185ec3a3872052a6f85a88f8" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;target&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;, &lt;strong&gt;true&lt;/strong&gt;, &lt;em&gt;isImports&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3668b83f08a9290de67e840d257b71bc618bed9" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;targetValue&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, &lt;em&gt;internal&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;), continuing the loop on any &lt;em&gt;Invalid Package Target&lt;/em&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f774a01f0fa2f390a53fef5b7dc928702cca0b0" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;targetValue&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, &lt;em&gt;internal&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e52620ed2cc63ebf756b6791942858e8a11582" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedMain&lt;/em&gt; be the URL resolution of &lt;em&gt;packageURL&lt;/em&gt;, &quot;/&quot;, and &lt;em&gt;pjson.main&lt;/em&gt;.</source>
          <target state="translated">让&lt;em&gt;resolvedMain&lt;/em&gt;是的URL解析&lt;em&gt;PACKAGEURL&lt;/em&gt;， &amp;ldquo;/&amp;rdquo;，和&lt;em&gt;pjson.main&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3f80afb0110f0ca106fa01e077ca229073f534c6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedMatch&lt;/em&gt; be result of &lt;strong&gt;PACKAGE_IMPORTS_EXPORTS_RESOLVE&lt;/strong&gt;( &lt;em&gt;matchKey&lt;/em&gt;, &lt;em&gt;exports&lt;/em&gt;, &lt;em&gt;packageURL&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05bce46a2384c271777930978a6e81a4b6eb0ee" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedMatch&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_IMPORTS_EXPORTS_RESOLVE&lt;/strong&gt;(&lt;em&gt;specifier&lt;/em&gt;, &lt;em&gt;pjson.imports&lt;/em&gt;, &lt;em&gt;packageURL&lt;/em&gt;, &lt;strong&gt;true&lt;/strong&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff7aedeb5d501d6e47d5396e51dcb3bb302bb04" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedTarget&lt;/em&gt; be the URL resolution of the concatenation of &lt;em&gt;packageURL&lt;/em&gt; and &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="translated">让&lt;em&gt;resolvedTarget&lt;/em&gt;是串联的URL解析&lt;em&gt;PACKAGEURL&lt;/em&gt;和&lt;em&gt;目标&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5df506eb548277050de9692d3004f4e6b5b2aa9c" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedURL&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="translated">让&lt;em&gt;resolveURL&lt;/em&gt;为&lt;strong&gt;undefined&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="82a293d31acbcb53e85a6f620e95bc60fec4dd62" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;scopeURL&lt;/em&gt; be &lt;em&gt;url&lt;/em&gt;.</source>
          <target state="translated">让&lt;em&gt;scopeURL&lt;/em&gt;为&lt;em&gt;url&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e4c9bffb2320070f980f92960ea814b81c98162c" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;selfUrl&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_SELF_RESOLVE&lt;/strong&gt;(&lt;em&gt;packageName&lt;/em&gt;, &lt;em&gt;packageSubpath&lt;/em&gt;, &lt;em&gt;parentURL&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f8d35a848d41b4dfdd85e8913a79da3444f87c" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;subpath&lt;/em&gt; be the substring of &lt;em&gt;matchKey&lt;/em&gt; starting at the index of the length of &lt;em&gt;expansionKey&lt;/em&gt; minus one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723920f325a1eaab25de57cc41b1807f2212eaac" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;subpath&lt;/em&gt; be the substring of &lt;em&gt;matchKey&lt;/em&gt; starting at the index of the length of &lt;em&gt;expansionKey&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dfbc5cc254de35a61a79580bcfc017d43a648a" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;subpath&lt;/em&gt; be the substring of &lt;em&gt;target&lt;/em&gt; starting at the index of the length of &lt;em&gt;directory&lt;/em&gt;.</source>
          <target state="translated">设&lt;em&gt;subpath&lt;/em&gt;为&lt;em&gt;目标&lt;/em&gt;的子串，从&lt;em&gt;目录&lt;/em&gt;长度的索引开始。</target>
        </trans-unit>
        <trans-unit id="3ce6d12ce9449fc911cc9f55c4eb8f68b7cd7887" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;exports[directory]&lt;/em&gt;.</source>
          <target state="translated">令&lt;em&gt;target&lt;/em&gt;为&lt;em&gt;exports [directory]&lt;/em&gt;的值。</target>
        </trans-unit>
        <trans-unit id="197f5bec0ba9b0be792276cfd7d785ccdea0317a" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;exports[packagePath]&lt;/em&gt;.</source>
          <target state="translated">令&lt;em&gt;target&lt;/em&gt;为&lt;em&gt;export [packagePath]&lt;/em&gt;的值。</target>
        </trans-unit>
        <trans-unit id="9b1dd4140c5c0ad8c3c5f937b4044187ed0f524d" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;matchObj&lt;/em&gt;[&lt;em&gt;expansionKey&lt;/em&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ca0876445e4e9e9e2d939e4491cfec452fe09a" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;matchObj&lt;/em&gt;[&lt;em&gt;matchKey&lt;/em&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078cd06ccd80615abc8b12af507acd7c2c70e6a6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;targetValue&lt;/em&gt; be the value of the &lt;em&gt;p&lt;/em&gt; property in &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05022795ff4fc80ccdb0eaa2b31a46cf687fbad" translate="yes" xml:space="preserve">
          <source>Let's say that we wanted to have the folder at &lt;code&gt;/usr/lib/node/&amp;lt;some-package&amp;gt;/&amp;lt;some-version&amp;gt;&lt;/code&gt; hold the contents of a specific version of a package.</source>
          <target state="translated">假设我们想让 &lt;code&gt;/usr/lib/node/&amp;lt;some-package&amp;gt;/&amp;lt;some-version&amp;gt;&lt;/code&gt; 中的文件夹保存特定版本的软件包的内容。</target>
        </trans-unit>
        <trans-unit id="a50e6d474036a02bdd71609b13906ac7a2a3f78b" translate="yes" xml:space="preserve">
          <source>Library developers that handle their own asynchronous resources performing tasks like I/O, connection pooling, or managing callback queues may use the &lt;code&gt;AsyncResource&lt;/code&gt; JavaScript API so that all the appropriate callbacks are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494a09f021c47478da7edc0019571233304558a0" translate="yes" xml:space="preserve">
          <source>Library developers that handle their own asynchronous resources performing tasks like I/O, connection pooling, or managing callback queues may use the &lt;code&gt;AsyncWrap&lt;/code&gt; JavaScript API so that all the appropriate callbacks are called.</source>
          <target state="translated">处理自己的异步资源来执行I / O，连接池或管理回调队列等任务的库开发人员可以使用 &lt;code&gt;AsyncWrap&lt;/code&gt; JavaScript API，以便调用所有适当的回调。</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">根据麻省理工学院许可证授权。</target>
        </trans-unit>
        <trans-unit id="0ca7e018936674f1d60758637269700311826fef" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#fs_class_fs_readstream&quot;&gt;&lt;code&gt;ReadStream&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;fd&lt;/code&gt; is specified, &lt;a href=&quot;#fs_class_fs_writestream&quot;&gt;&lt;code&gt;WriteStream&lt;/code&gt;&lt;/a&gt; will ignore the &lt;code&gt;path&lt;/code&gt; argument and will use the specified file descriptor. This means that no &lt;code&gt;'open'&lt;/code&gt; event will be emitted. &lt;code&gt;fd&lt;/code&gt; should be blocking; non-blocking &lt;code&gt;fd&lt;/code&gt;s should be passed to &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">与&lt;a href=&quot;#fs_class_fs_readstream&quot;&gt; &lt;code&gt;ReadStream&lt;/code&gt; &lt;/a&gt;一样，如果指定了 &lt;code&gt;fd&lt;/code&gt; ，则&lt;a href=&quot;#fs_class_fs_writestream&quot;&gt; &lt;code&gt;WriteStream&lt;/code&gt; &lt;/a&gt;将忽略 &lt;code&gt;path&lt;/code&gt; 参数，并将使用指定的文件描述符。这意味着将不会发出 &lt;code&gt;'open'&lt;/code&gt; 事件。 &lt;code&gt;fd&lt;/code&gt; 应该被阻止；非阻塞 &lt;code&gt;fd&lt;/code&gt; 应该传递给&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="851f0f8a8001316f6429280c11651db02e375ab1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;http#http_http_get_options_callback&quot;&gt;&lt;code&gt;http.get()&lt;/code&gt;&lt;/a&gt; but for HTTPS.</source>
          <target state="translated">类似于&lt;a href=&quot;http#http_http_get_options_callback&quot;&gt; &lt;code&gt;http.get()&lt;/code&gt; ,&lt;/a&gt;但用于HTTPS。</target>
        </trans-unit>
        <trans-unit id="643276916be86da834620569b341d9177bff2e84" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Workers&lt;/a&gt; and the &lt;a href=&quot;cluster&quot;&gt;&lt;code&gt;cluster&lt;/code&gt; module&lt;/a&gt;, two-way communication can be achieved through inter-thread message passing. Internally, a &lt;code&gt;Worker&lt;/code&gt; has a built-in pair of &lt;a href=&quot;#worker_threads_class_messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;s that are already associated with each other when the &lt;code&gt;Worker&lt;/code&gt; is created. While the &lt;code&gt;MessagePort&lt;/code&gt; object on the parent side is not directly exposed, its functionalities are exposed through &lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt;&lt;code&gt;worker.postMessage()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;#worker_threads_event_message_1&quot;&gt;&lt;code&gt;worker.on('message')&lt;/code&gt;&lt;/a&gt; event on the &lt;code&gt;Worker&lt;/code&gt; object for the parent thread.</source>
          <target state="translated">像&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Workers&lt;/a&gt;和&lt;a href=&quot;cluster&quot;&gt; &lt;code&gt;cluster&lt;/code&gt; 模块一样&lt;/a&gt;，可以通过线程间消息传递来实现双向通信。在内部，一个 &lt;code&gt;Worker&lt;/code&gt; 具有一对内置的&lt;a href=&quot;#worker_threads_class_messageport&quot;&gt; &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;，它们在创建 &lt;code&gt;Worker&lt;/code&gt; 时已经相互关联。虽然父端的 &lt;code&gt;MessagePort&lt;/code&gt; 对象没有直接公开，但其功能是通过父线程的 &lt;code&gt;Worker&lt;/code&gt; 对象上的&lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt; &lt;code&gt;worker.postMessage()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#worker_threads_event_message_1&quot;&gt; &lt;code&gt;worker.on('message')&lt;/code&gt; &lt;/a&gt;事件公开的。</target>
        </trans-unit>
        <trans-unit id="8dbd9c14005cc13742bdf9a1be2f6cfdb9bd756e" translate="yes" xml:space="preserve">
          <source>Like in CommonJS, files within packages can be accessed by appending a path to the package name.</source>
          <target state="translated">就像在CommonJS中一样,包中的文件可以通过在包名后附加一个路径来访问。</target>
        </trans-unit>
        <trans-unit id="a306faea3518b2a195011b48f1651813064985f7" translate="yes" xml:space="preserve">
          <source>Like in CommonJS, files within packages can be accessed by appending a path to the package name; unless the package&amp;rsquo;s &lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; contains an &lt;a href=&quot;packages#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field, in which case files within packages need to be accessed via the path defined in &lt;a href=&quot;packages#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b5a42854b5eed52a170023a09f02fc6d959468" translate="yes" xml:space="preserve">
          <source>Likewise, changing from a non-special protocol to a special protocol is also not permitted:</source>
          <target state="translated">同样,从非特殊协议改为特殊协议也是不允许的。</target>
        </trans-unit>
        <trans-unit id="06dd6783b6493064f30b8f1541b693a42e5ccd3c" translate="yes" xml:space="preserve">
          <source>Limit engine usage to CIPHERS</source>
          <target state="translated">将发动机的使用限制在CIPHERS上</target>
        </trans-unit>
        <trans-unit id="93986208e144b83e2c97be29664bbada85c8e0bd" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DH</source>
          <target state="translated">将发动机的使用限制在DH上</target>
        </trans-unit>
        <trans-unit id="9f5015c701e9eb1d4dc682b1335a18b14503b0f5" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DIGESTS</source>
          <target state="translated">限制引擎使用量为DIGESTS</target>
        </trans-unit>
        <trans-unit id="d78c46d774a0e75daea31d4c9cffa2c56e543091" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DSA</source>
          <target state="translated">将引擎使用限制在DSA上</target>
        </trans-unit>
        <trans-unit id="8732a9dbae5a0828ffbb44002b1242202da2c9de" translate="yes" xml:space="preserve">
          <source>Limit engine usage to EC</source>
          <target state="translated">将发动机的使用限制在EC</target>
        </trans-unit>
        <trans-unit id="cdcab6206e8a488e5549d5ec3e6b1d5da76478c8" translate="yes" xml:space="preserve">
          <source>Limit engine usage to PKEY_ASN1_METHS</source>
          <target state="translated">将引擎使用限制在PKEY_ASN1_METHS上。</target>
        </trans-unit>
        <trans-unit id="87885cad223c9bd4e4894b1854a73b7f044844b0" translate="yes" xml:space="preserve">
          <source>Limit engine usage to PKEY_METHDS</source>
          <target state="translated">将引擎的使用限制在PKEY_METHDS上。</target>
        </trans-unit>
        <trans-unit id="4022d5e22f1d34c3d5c81034adf42f203a7574aa" translate="yes" xml:space="preserve">
          <source>Limit engine usage to RAND</source>
          <target state="translated">将发动机的使用限制在兰德公司的范围内</target>
        </trans-unit>
        <trans-unit id="9deea2b1b94be12b96f38053a33676be8cc7d149" translate="yes" xml:space="preserve">
          <source>Limit engine usage to RSA</source>
          <target state="translated">将引擎使用限制为RSA</target>
        </trans-unit>
        <trans-unit id="1450afe809ec7487cbb884eaae49c4b7de1dd9ef" translate="yes" xml:space="preserve">
          <source>Limit the amount of time the parser will wait to receive the complete HTTP headers.</source>
          <target state="translated">限制解析器等待接收完整HTTP头信息的时间。</target>
        </trans-unit>
        <trans-unit id="f203cc5a857dde040cc3f179c0e2e65d49f9ce37" translate="yes" xml:space="preserve">
          <source>Limits maximum incoming headers count. If set to 0, no limit will be applied.</source>
          <target state="translated">限制最大的传入报头数,如果设置为0,则没有限制。如果设置为0,则不设限制。</target>
        </trans-unit>
        <trans-unit id="9201ce577050bd27894faffcae483339dbb7b78e" translate="yes" xml:space="preserve">
          <source>Limits maximum response headers count. If set to 0, no limit will be applied.</source>
          <target state="translated">限制最大响应头数。如果设置为0,则不设限制。</target>
        </trans-unit>
        <trans-unit id="8830812642973350a9e42a8556343932c261db90" translate="yes" xml:space="preserve">
          <source>Link module dependencies. This method must be called before evaluation, and can only be called once per module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80016ec82b8321d01a31f3c875531ddcc399155d" translate="yes" xml:space="preserve">
          <source>Link module dependencies. This method must be called before instantiation, and can only be called once per module.</source>
          <target state="translated">链接模块的依赖关系。这个方法必须在实例化之前调用,并且每个模块只能调用一次。</target>
        </trans-unit>
        <trans-unit id="99751c95e6330f5ee80abdd67407538e0c2ab2d7" translate="yes" xml:space="preserve">
          <source>Linking has failed for this module (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt;)</source>
          <target state="translated">此模块的链接失败（ &lt;code&gt;linkingStatus&lt;/code&gt; 为 &lt;code&gt;'errored'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6137853119d6841cba11a0baee353a57f0a1174f" translate="yes" xml:space="preserve">
          <source>Linking to Node.js' own dependencies</source>
          <target state="translated">链接到Node.js自己的依赖关系。</target>
        </trans-unit>
        <trans-unit id="86bcbc2266c976e9c766fb200065c8f5e6acedaf" translate="yes" xml:space="preserve">
          <source>Linking to libraries included with Node.js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9e059087370a1f7ba9840dcffd7d8f1c5943ff" translate="yes" xml:space="preserve">
          <source>List of Deprecated APIs</source>
          <target state="translated">废弃的API列表</target>
        </trans-unit>
        <trans-unit id="9a9e45f29e1adc44c7d9102ea05ee98d0a9c3be7" translate="yes" xml:space="preserve">
          <source>List of deprecated APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1103e732d98418ac8b2c82f0196dadba02f7f6d0" translate="yes" xml:space="preserve">
          <source>Listener functions &lt;strong&gt;must&lt;/strong&gt; only perform &lt;strong&gt;synchronous&lt;/strong&gt; operations. The Node.js process will exit immediately after calling the &lt;code&gt;'exit'&lt;/code&gt; event listeners causing any additional work still queued in the event loop to be abandoned. In the following example, for instance, the timeout will never occur:</source>
          <target state="translated">监听功能&lt;strong&gt;必须&lt;/strong&gt;只执行&lt;strong&gt;同步&lt;/strong&gt;操作。调用 &lt;code&gt;'exit'&lt;/code&gt; 事件侦听器后，Node.js进程将立即退出，从而导致仍在事件循环中排队的任何其他工作都将被放弃。例如，在下面的示例中，超时将永远不会发生：</target>
        </trans-unit>
        <trans-unit id="77125edc2a436f1f45f34348108362e176b01cda" translate="yes" xml:space="preserve">
          <source>Listeners on this event will receive a clone of the &lt;code&gt;value&lt;/code&gt; parameter as passed to &lt;code&gt;postMessage()&lt;/code&gt; and no further arguments.</source>
          <target state="translated">此事件的侦听器将接收传递给 &lt;code&gt;postMessage()&lt;/code&gt; 的 &lt;code&gt;value&lt;/code&gt; 参数的克隆，并且不包含其他参数。</target>
        </trans-unit>
        <trans-unit id="f36161242db928bc51c18ea3bb01737e480dcba0" translate="yes" xml:space="preserve">
          <source>Listeners registered for the &lt;code&gt;'newListener'&lt;/code&gt; event are passed the event name and a reference to the listener being added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64b06f1e2a3005863a818b791661622631104ad" translate="yes" xml:space="preserve">
          <source>Listeners registered for the &lt;code&gt;'newListener'&lt;/code&gt; event will be passed the event name and a reference to the listener being added.</source>
          <target state="translated">为 &lt;code&gt;'newListener'&lt;/code&gt; 事件注册的侦听器将被传递事件名称和对正在添加的侦听器的引用。</target>
        </trans-unit>
        <trans-unit id="263ff6da0a60052822f43bf968da5510ee95e89b" translate="yes" xml:space="preserve">
          <source>Listening for this event will have an effect only on connections established after the addition of the event listener.</source>
          <target state="translated">侦听该事件仅对添加事件监听器后建立的连接有影响。</target>
        </trans-unit>
        <trans-unit id="0e55c3e5d75f22479bbed5d621f6f8ed741f295b" translate="yes" xml:space="preserve">
          <source>Listening on a file descriptor is not supported on Windows.</source>
          <target state="translated">Windows上不支持监听文件描述符。</target>
        </trans-unit>
        <trans-unit id="6645374b89720ebff452642f3db30a36b512c936" translate="yes" xml:space="preserve">
          <source>Live binding updates or new exports added to &lt;code&gt;module.exports&lt;/code&gt; are not detected for these named exports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a934789fef476b366bfd30093d89439e844ad1e" translate="yes" xml:space="preserve">
          <source>Load &lt;em&gt;resolved&lt;/em&gt; as module format, &lt;em&gt;format&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efea073c6c15864c713d76af7447f0d00ffffa38" translate="yes" xml:space="preserve">
          <source>Load &lt;em&gt;resolvedURL&lt;/em&gt; as module format, &lt;em&gt;format&lt;/em&gt;.</source>
          <target state="translated">加载&lt;em&gt;resolveURL&lt;/em&gt;作为模块格式&lt;em&gt;format&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5b98d38dd9ba6d75f2dcf66b3094803bd93b8a69" translate="yes" xml:space="preserve">
          <source>Load a JSON file</source>
          <target state="translated">加载JSON文件</target>
        </trans-unit>
        <trans-unit id="358aca8bed2102b20d329cb6c2d609fd3c90cb03" translate="yes" xml:space="preserve">
          <source>Load a Node.js CommonJS module</source>
          <target state="translated">加载一个Node.js CommonJS模块。</target>
        </trans-unit>
        <trans-unit id="00177c623e9ac0d49cba30da3c54b3c977b49a06" translate="yes" xml:space="preserve">
          <source>Load a Node.js builtin module</source>
          <target state="translated">加载一个Node.js内置模块</target>
        </trans-unit>
        <trans-unit id="b1eef931eb753eece9d6e34ced7f072cb22fcdba" translate="yes" xml:space="preserve">
          <source>Load a WebAssembly module</source>
          <target state="translated">加载一个WebAssembly模块</target>
        </trans-unit>
        <trans-unit id="7519ad71b3a2bfc0f580ea1764b54f66e24c2e6f" translate="yes" xml:space="preserve">
          <source>Load a standard JavaScript module</source>
          <target state="translated">加载一个标准的JavaScript模块</target>
        </trans-unit>
        <trans-unit id="88ea30e11dcebd6e84150ac5820c69a9d4afdc5f" translate="yes" xml:space="preserve">
          <source>Load an ES module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498893670658c01dd4ac6da4786a9dc9aa6df8e5" translate="yes" xml:space="preserve">
          <source>Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with &lt;code&gt;./configure --openssl-fips&lt;/code&gt;.</source>
          <target state="translated">在启动时加载OpenSSL配置文件。如果Node.js是使用 &lt;code&gt;./configure --openssl-fips&lt;/code&gt; 构建的，则可以用于启用FIPS兼容的加密。</target>
        </trans-unit>
        <trans-unit id="ee62206d8350faeb416823dca497bcc9021efda7" translate="yes" xml:space="preserve">
          <source>Load and set the &lt;code&gt;engine&lt;/code&gt; for some or all OpenSSL functions (selected by flags).</source>
          <target state="translated">为某些或所有OpenSSL功能（由标志选择）加载并设置 &lt;code&gt;engine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="864c89092077bd29bba0c7d8aa4a1ee0ee9ad0eb" translate="yes" xml:space="preserve">
          <source>Loading Addons using require()</source>
          <target state="translated">使用require()加载插件</target>
        </trans-unit>
        <trans-unit id="fb686f61ca8f80c8a2b1ea9c221dedc2bee6db94" translate="yes" xml:space="preserve">
          <source>Loading ECMAScript modules no longer requires a command-line flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461404ed97327c8f261adb66fd0741495a2c8cbb" translate="yes" xml:space="preserve">
          <source>Loading addons using &lt;code&gt;require()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7543238941e199c9c4cd5eb05bb0366a0f0e3cf" translate="yes" xml:space="preserve">
          <source>Loading from &lt;code&gt;node_modules&lt;/code&gt; Folders</source>
          <target state="translated">从 &lt;code&gt;node_modules&lt;/code&gt; 文件夹加载</target>
        </trans-unit>
        <trans-unit id="b6335ac2b9f90ba310aefcc05b66c7ffb033560f" translate="yes" xml:space="preserve">
          <source>Loading from &lt;code&gt;node_modules&lt;/code&gt; folders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679458d12984235f54fda878bb725b25ccc3fbe0" translate="yes" xml:space="preserve">
          <source>Loading from the global folders</source>
          <target state="translated">从全局文件夹加载</target>
        </trans-unit>
        <trans-unit id="aab431df60aff2443055adf445c69510d18e5e54" translate="yes" xml:space="preserve">
          <source>Locale-sensitive methods like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare&quot;&gt;&lt;code&gt;String.prototype.localeCompare()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString&quot;&gt;&lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">对语言环境敏感的方法，例如&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare&quot;&gt; &lt;code&gt;String.prototype.localeCompare()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString&quot;&gt; &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2ef9686a9d07af86ddb6785cca13fffd98fde0f" translate="yes" xml:space="preserve">
          <source>Locale-sensitive or Unicode-aware functions in the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript语言规范&lt;/a&gt;中的区域设置敏感或Unicode感知功能：</target>
        </trans-unit>
        <trans-unit id="53836d61b88bc9ebe5ff04c57ab3d5e85b3ccd6f" translate="yes" xml:space="preserve">
          <source>Location at which the report will be generated.</source>
          <target state="translated">生成报告的地点。</target>
        </trans-unit>
        <trans-unit id="80bbc7111675131489bcf1c8826abc71ac116a58" translate="yes" xml:space="preserve">
          <source>Log TLS key material to a file. The key material is in NSS &lt;code&gt;SSLKEYLOGFILE&lt;/code&gt; format and can be used by software (such as Wireshark) to decrypt the TLS traffic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e500d4d84a92a8c0603625b4b6fd77177fa0a2b3" translate="yes" xml:space="preserve">
          <source>MD5 and SHA-1 are no longer acceptable where collision resistance is required such as digital signatures.</source>
          <target state="translated">在数字签名等需要抗碰撞的地方,MD5和SHA-1不再被接受。</target>
        </trans-unit>
        <trans-unit id="86d931caa3fae8fb2300ea8f1d2a55be58e1a3d8" translate="yes" xml:space="preserve">
          <source>MODULE_NOT_FOUND</source>
          <target state="translated">MODULE_NOT_FOUND</target>
        </trans-unit>
        <trans-unit id="e1ec46742fb947b44338032993756f78da0b54d2" translate="yes" xml:space="preserve">
          <source>Made &lt;code&gt;func&lt;/code&gt; parameter optional with custom &lt;code&gt;call_js_cb&lt;/code&gt;.</source>
          <target state="translated">做 &lt;code&gt;func&lt;/code&gt; 参数可选的定制 &lt;code&gt;call_js_cb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb480a8a8b26324095457c616935d3f1841b3f51" translate="yes" xml:space="preserve">
          <source>Maintains an internal counter specific to &lt;code&gt;label&lt;/code&gt; and outputs to &lt;code&gt;stdout&lt;/code&gt; the number of times &lt;code&gt;console.count()&lt;/code&gt; has been called with the given &lt;code&gt;label&lt;/code&gt;.</source>
          <target state="translated">维护一个特定于 &lt;code&gt;label&lt;/code&gt; 的内部计数器，并输出以使用给定 &lt;code&gt;label&lt;/code&gt; 调用 &lt;code&gt;console.count()&lt;/code&gt; 的次数为 &lt;code&gt;stdout&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6c137a08d00a5877b58efdf0c01b0c1fa6533bc" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;startMark&lt;/code&gt; and &lt;code&gt;endMark&lt;/code&gt; parameters optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a81028c010c15e7a86469745fd56a7b314afde0" translate="yes" xml:space="preserve">
          <source>Make a self-contained library use its own symbols in preference to symbols from previously loaded libraries.</source>
          <target state="translated">使自带的库使用自己的符号,而不使用之前加载的库的符号。</target>
        </trans-unit>
        <trans-unit id="4b7f740d6f3b43eb6e1369cd1861228eda3e73a9" translate="yes" xml:space="preserve">
          <source>Make built-in language features like &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;new Function&lt;/code&gt; that generate code from strings throw an exception instead. This does not affect the Node.js &lt;code&gt;vm&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e5fc2cf8facef6490eacd62f42219179c768b6" translate="yes" xml:space="preserve">
          <source>Makes a request to a secure web server.</source>
          <target state="translated">向安全的网络服务器发出请求。</target>
        </trans-unit>
        <trans-unit id="77ef1a913ec8293839a75b3ea0986e203581e748" translate="yes" xml:space="preserve">
          <source>Making handle lifespan shorter than that of the native method</source>
          <target state="translated">使手柄的寿命比原生方法的寿命更短</target>
        </trans-unit>
        <trans-unit id="e7258012eabbd3b3ddb7a3bfafbe25922453be58" translate="yes" xml:space="preserve">
          <source>Mandatory file extensions</source>
          <target state="translated">强制性文件扩展名</target>
        </trans-unit>
        <trans-unit id="0d8dfb09236d715683d3d08dc442c2f7469f51e4" translate="yes" xml:space="preserve">
          <source>Mark an object as not transferable. If &lt;code&gt;object&lt;/code&gt; occurs in the transfer list of a &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;port.postMessage()&lt;/code&gt;&lt;/a&gt; call, it will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7517849408f94693f21294c1f40a914dd912fa2" translate="yes" xml:space="preserve">
          <source>Marks an &lt;code&gt;ArrayBuffer&lt;/code&gt; as having its contents transferred out of band. Pass the corresponding &lt;code&gt;ArrayBuffer&lt;/code&gt; in the deserializing context to &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">将 &lt;code&gt;ArrayBuffer&lt;/code&gt; 标记为带外传输。在反序列化上下文中将对应的 &lt;code&gt;ArrayBuffer&lt;/code&gt; 传递给deserializer.transferArrayBuffer &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt; &lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6e9d92daad3190f7c23fb73a149a2e3ed5745cfd" translate="yes" xml:space="preserve">
          <source>Marks an &lt;code&gt;ArrayBuffer&lt;/code&gt; as having its contents transferred out of band. Pass the corresponding &lt;code&gt;ArrayBuffer&lt;/code&gt; in the serializing context to &lt;a href=&quot;#v8_serializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;serializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt; (or return the &lt;code&gt;id&lt;/code&gt; from &lt;a href=&quot;#v8_serializer_getsharedarraybufferid_sharedarraybuffer&quot;&gt;&lt;code&gt;serializer._getSharedArrayBufferId()&lt;/code&gt;&lt;/a&gt; in the case of &lt;code&gt;SharedArrayBuffer&lt;/code&gt;s).</source>
          <target state="translated">将 &lt;code&gt;ArrayBuffer&lt;/code&gt; 标记为带外传输。将序列化上下文中的相应 &lt;code&gt;ArrayBuffer&lt;/code&gt; 传递给&lt;a href=&quot;#v8_serializer_transferarraybuffer_id_arraybuffer&quot;&gt; &lt;code&gt;serializer.transferArrayBuffer()&lt;/code&gt; &lt;/a&gt;（如果为 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; ,则从&lt;a href=&quot;#v8_serializer_getsharedarraybufferid_sharedarraybuffer&quot;&gt; &lt;code&gt;serializer._getSharedArrayBufferId()&lt;/code&gt; &lt;/a&gt;返回 &lt;code&gt;id&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1e2ad0793ef76124b1034c1cea3ed4e613e126d0" translate="yes" xml:space="preserve">
          <source>Marks the request as aborting. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.</source>
          <target state="translated">将请求标记为中止。调用此功能将导致响应中剩余的数据被丢弃,套接字被销毁。</target>
        </trans-unit>
        <trans-unit id="0f845dbfd32891203afbc6c332195efbd6298479" translate="yes" xml:space="preserve">
          <source>Max header size in &lt;code&gt;http_parser&lt;/code&gt; was set to 8KB.</source>
          <target state="translated">&lt;code&gt;http_parser&lt;/code&gt; 中的最大标头大小设置为8KB。</target>
        </trans-unit>
        <trans-unit id="767a965b42cd76eccbb5ffdd8ab7b02f20159af6" translate="yes" xml:space="preserve">
          <source>Measure the memory known to V8 and used by all contexts known to the current V8 isolate, or the main context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21ff80ab9cf701ac46a3167e21f3037801508fd" translate="yes" xml:space="preserve">
          <source>Measuring how long it takes to load dependencies</source>
          <target state="translated">测量加载依赖关系所需的时间</target>
        </trans-unit>
        <trans-unit id="9128f1b632621e70aa390a4486c36bb163baf0c8" translate="yes" xml:space="preserve">
          <source>Measuring the duration of async operations</source>
          <target state="translated">测量异步操作的持续时间</target>
        </trans-unit>
        <trans-unit id="e0efdce50032a40b3a3914e5fc8bfa6cd4288bb5" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
          <target state="translated">内存管理</target>
        </trans-unit>
        <trans-unit id="ef1eb41c5de244b704fcf15f3bc0f13c999a4f71" translate="yes" xml:space="preserve">
          <source>Memory Usage Tuning</source>
          <target state="translated">内存使用调整</target>
        </trans-unit>
        <trans-unit id="1c5536b98ab016fe61807564b4a34c80211a7613" translate="yes" xml:space="preserve">
          <source>Memory management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3fa3d76a937e4a81d7780c47e49272ec406513" translate="yes" xml:space="preserve">
          <source>Memory usage tuning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2bb3d6a7f5790d759cba72823f3811d734fe09" translate="yes" xml:space="preserve">
          <source>MessageChannel</source>
          <target state="translated">MessageChannel</target>
        </trans-unit>
        <trans-unit id="0ce120a41bf22d68c9fab53d50c8a38d4440d65a" translate="yes" xml:space="preserve">
          <source>MessagePort</source>
          <target state="translated">MessagePort</target>
        </trans-unit>
        <trans-unit id="532bb72b545e75db867501d58fef21423a35b550" translate="yes" xml:space="preserve">
          <source>Method(s) to implement</source>
          <target state="translated">实施方法</target>
        </trans-unit>
        <trans-unit id="be11d28d855c168de0db39411d017ffe8e5d8b28" translate="yes" xml:space="preserve">
          <source>Methods that return TLS connection metadata (e.g. &lt;a href=&quot;#tls_tlssocket_getpeercertificate_detailed&quot;&gt;&lt;code&gt;tls.TLSSocket.getPeerCertificate()&lt;/code&gt;&lt;/a&gt; will only return data while the connection is open.</source>
          <target state="translated">返回TLS连接元数据的方法（例如&lt;a href=&quot;#tls_tlssocket_getpeercertificate_detailed&quot;&gt; &lt;code&gt;tls.TLSSocket.getPeerCertificate()&lt;/code&gt; )&lt;/a&gt;仅在连接打开时返回数据。</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="ba3efaca5f13d398812424482d57e438a3b44995" translate="yes" xml:space="preserve">
          <source>Modern Web browsers follow the &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG Encoding Standard&lt;/a&gt; which aliases both &lt;code&gt;'latin1'&lt;/code&gt; and &lt;code&gt;'ISO-8859-1'&lt;/code&gt; to &lt;code&gt;'win-1252'&lt;/code&gt;. This means that while doing something like &lt;code&gt;http.get()&lt;/code&gt;, if the returned charset is one of those listed in the WHATWG specification it is possible that the server actually returned &lt;code&gt;'win-1252'&lt;/code&gt;-encoded data, and using &lt;code&gt;'latin1'&lt;/code&gt; encoding may incorrectly decode the characters.</source>
          <target state="translated">现代Web浏览器遵循&lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG编码标准&lt;/a&gt;，该标准将 &lt;code&gt;'latin1'&lt;/code&gt; 和 &lt;code&gt;'ISO-8859-1'&lt;/code&gt; 都别名为 &lt;code&gt;'win-1252'&lt;/code&gt; 。这意味着在执行类似 &lt;code&gt;http.get()&lt;/code&gt; 的操作时，如果返回的字符集是WHATWG规范中列出的字符集之一，则服务器实际上可能返回了 &lt;code&gt;'win-1252'&lt;/code&gt; 编码的数据，并且使用 &lt;code&gt;'latin1'&lt;/code&gt; 编码可能错误地解码字符。</target>
        </trans-unit>
        <trans-unit id="65a15f6dfa2e4554da23919059f34e286d29b89d" translate="yes" xml:space="preserve">
          <source>Modifier support varies throughout different terminals. They will mostly be ignored, if not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="5e5ee885e59c3666b818d0a51c7fee388b17e46d" translate="yes" xml:space="preserve">
          <source>Modifies the permissions on the file. The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon success.</source>
          <target state="translated">修改文件的权限。该 &lt;code&gt;Promise&lt;/code&gt; 与成功时不带参数解决。</target>
        </trans-unit>
        <trans-unit id="e955b90e741d4c82b9b85c4cc9aa35c010f53aa4" translate="yes" xml:space="preserve">
          <source>Modifying a file rather than replacing it may require a flags mode of &lt;code&gt;'r+'&lt;/code&gt; rather than the default mode &lt;code&gt;'w'&lt;/code&gt;.</source>
          <target state="translated">修改文件而不是替换文件可能需要标志模式为 &lt;code&gt;'r+'&lt;/code&gt; 而不是默认模式 &lt;code&gt;'w'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59e3b2e3807f64b859509b97033f8b164102e074" translate="yes" xml:space="preserve">
          <source>Modifying a file rather than replacing it may require the &lt;code&gt;flag&lt;/code&gt; option to be set to &lt;code&gt;'r+'&lt;/code&gt; rather than the default &lt;code&gt;'w'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cd669deb64182bb1486f9edc35fe42bd6d7f56" translate="yes" xml:space="preserve">
          <source>Modifying the Default TLS Cipher suite</source>
          <target state="translated">修改默认TLS密码套件</target>
        </trans-unit>
        <trans-unit id="f731a0f634fbf6df66f86fafb91a04dc2f63b03b" translate="yes" xml:space="preserve">
          <source>Modifying the default TLS cipher suite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386917eb344492726f971a2580c72bd0600c3297" translate="yes" xml:space="preserve">
          <source>Modifying the new &lt;code&gt;Buffer&lt;/code&gt; slice will modify the memory in the original &lt;code&gt;Buffer&lt;/code&gt; because the allocated memory of the two objects overlap.</source>
          <target state="translated">修改新的 &lt;code&gt;Buffer&lt;/code&gt; 片将修改原始 &lt;code&gt;Buffer&lt;/code&gt; 的内存，因为两个对象的分配内存重叠。</target>
        </trans-unit>
        <trans-unit id="9a7606a01db550a47662b629f247d6367bcf7282" translate="yes" xml:space="preserve">
          <source>Module Caching Caveats</source>
          <target state="translated">模块缓存的注意事项</target>
        </trans-unit>
        <trans-unit id="3d1eed928b27314ba7b9856337b096b1aba2610f" translate="yes" xml:space="preserve">
          <source>Module caching caveats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83624ccd7b5527bbf857a1fbcf3723edba0da40a" translate="yes" xml:space="preserve">
          <source>Module registration</source>
          <target state="translated">模块注册</target>
        </trans-unit>
        <trans-unit id="7575e8c6375f9ecce4bf5b77b70a45f98b8cd781" translate="yes" xml:space="preserve">
          <source>Module.createRequireFromPath() is deprecated. Please use &lt;a href=&quot;module#module_module_createrequire_filename&quot;&gt;&lt;code&gt;module.createRequire()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7939217a1ff65e34d944c1af418682a3959683e6" translate="yes" xml:space="preserve">
          <source>Module.createRequireFromPath() is deprecated. Please use &lt;a href=&quot;modules#modules_module_createrequire_filename&quot;&gt;&lt;code&gt;module.createRequire()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">不推荐使用Module.createRequireFromPath（）。请改用&lt;a href=&quot;modules#modules_module_createrequire_filename&quot;&gt; &lt;code&gt;module.createRequire()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="85946d17e9abcad5d8c5d7ff7e55541e63757d01" translate="yes" xml:space="preserve">
          <source>Modules are cached after the first time they are loaded. This means (among other things) that every call to &lt;code&gt;require('foo')&lt;/code&gt; will get exactly the same object returned, if it would resolve to the same file.</source>
          <target state="translated">第一次加载模块后将对其进行缓存。这意味着（除其他事项外）每次对 &lt;code&gt;require('foo')&lt;/code&gt; 的调用都将获得完全相同的返回对象（如果它将解析为同一文件）。</target>
        </trans-unit>
        <trans-unit id="9328fdb06dec7493c1ac0a3bc42b0f79daf79a03" translate="yes" xml:space="preserve">
          <source>Modules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from &lt;code&gt;node_modules&lt;/code&gt; folders), it is not a &lt;em&gt;guarantee&lt;/em&gt; that &lt;code&gt;require('foo')&lt;/code&gt; will always return the exact same object, if it would resolve to different files.</source>
          <target state="translated">根据解析的文件名缓存模块。因为模块可以解决基于通话模块（加载从位置不同的文件名 &lt;code&gt;node_modules&lt;/code&gt; 文件夹），它不是一个&lt;em&gt;保证&lt;/em&gt;该 &lt;code&gt;require('foo')&lt;/code&gt; 总是会返回完全相同的对象，如果它会解析到不同的文件。</target>
        </trans-unit>
        <trans-unit id="28e1343a6af7d08fdfab4981e72800f3eb87862a" translate="yes" xml:space="preserve">
          <source>Modules are cached in this object when they are required. By deleting a key value from this object, the next &lt;code&gt;require&lt;/code&gt; will reload the module. This does not apply to &lt;a href=&quot;addons&quot;&gt;native addons&lt;/a&gt;, for which reloading will result in an error.</source>
          <target state="translated">需要时将模块缓存在此对象中。通过从该对象中删除键值，下一个 &lt;code&gt;require&lt;/code&gt; 将重新加载模块。这不适用于&lt;a href=&quot;addons&quot;&gt;本机插件&lt;/a&gt;，重新加载将导致错误。</target>
        </trans-unit>
        <trans-unit id="edcb0ef2ab0accce5f6e12688eb452c06c2902b5" translate="yes" xml:space="preserve">
          <source>Modules are loaded multiple times if the &lt;code&gt;import&lt;/code&gt; specifier used to resolve them has a different query or fragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d05571b964dddda3ae3561348588cfd26ddbfa" translate="yes" xml:space="preserve">
          <source>Modules that have an invalid &lt;code&gt;main&lt;/code&gt; entry (e.g., &lt;code&gt;./does-not-exist.js&lt;/code&gt;) and also have an &lt;code&gt;index.js&lt;/code&gt; file in the top level directory will resolve the &lt;code&gt;index.js&lt;/code&gt; file. That is deprecated and is going to throw an error in future Node.js versions.</source>
          <target state="translated">具有无效的 &lt;code&gt;main&lt;/code&gt; 条目（例如 &lt;code&gt;./does-not-exist.js&lt;/code&gt; ）并且在顶级目录中也具有 &lt;code&gt;index.js&lt;/code&gt; 文件的模块将解析 &lt;code&gt;index.js&lt;/code&gt; 文件。已过时，它将在将来的Node.js版本中引发错误。</target>
        </trans-unit>
        <trans-unit id="9f8cb9d5d814826c94ca425c65a80591a56c453c" translate="yes" xml:space="preserve">
          <source>Modules will be loaded multiple times if the &lt;code&gt;import&lt;/code&gt; specifier used to resolve them have a different query or fragment.</source>
          <target state="translated">如果用于解析模块的 &lt;code&gt;import&lt;/code&gt; 说明符具有不同的查询或片段，则模块将被多次加载。</target>
        </trans-unit>
        <trans-unit id="5d23e88306931082f27761862d8b5520ea16bd97" translate="yes" xml:space="preserve">
          <source>Modules: &lt;code&gt;module&lt;/code&gt; API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b4968c8aff51a834a13c32e250f01641e1418e" translate="yes" xml:space="preserve">
          <source>Modules: CommonJS modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0535905b5a082c8292472c944f2e1e2d049e25" translate="yes" xml:space="preserve">
          <source>Modules: ECMAScript modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b15f98211b2d493bfab305d048b6c3b3ba030fd" translate="yes" xml:space="preserve">
          <source>Modules: Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90fbb2012f6d47e34578586d91fdc3981db8daf4" translate="yes" xml:space="preserve">
          <source>More accurate &lt;a href=&quot;repl#repl_repl&quot;&gt;REPL&lt;/a&gt; line editing</source>
          <target state="translated">更精确的&lt;a href=&quot;repl#repl_repl&quot;&gt;REPL&lt;/a&gt;线编辑</target>
        </trans-unit>
        <trans-unit id="0ecdbeb6845d999cf7003e1812bec6e641a5510d" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;fs&lt;/code&gt; operations accept filepaths that may be specified in the form of a string, a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, or a &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object using the &lt;code&gt;file:&lt;/code&gt; protocol.</source>
          <target state="translated">大多数 &lt;code&gt;fs&lt;/code&gt; 操作接受文件路径，这些文件路径可以使用 &lt;code&gt;file:&lt;/code&gt; 协议以字符串，&lt;a href=&quot;buffer#buffer_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;对象的形式指定。</target>
        </trans-unit>
        <trans-unit id="82cff11b4bb5481a6d7ac80aec40ddd830fc32bf" translate="yes" xml:space="preserve">
          <source>Most applications should consider using the new &lt;code&gt;KeyObject&lt;/code&gt; API instead of passing keys as strings or &lt;code&gt;Buffer&lt;/code&gt;s due to improved security features.</source>
          <target state="translated">由于提高了安全性，大多数应用程序应该考虑使用新的 &lt;code&gt;KeyObject&lt;/code&gt; API而不是将键作为字符串或 &lt;code&gt;Buffer&lt;/code&gt; 传递。</target>
        </trans-unit>
        <trans-unit id="20cb9dba8d1ec1bda32d3869a385011e92bc7b15" translate="yes" xml:space="preserve">
          <source>Most asynchronous methods exposed by the Node.js core API follow an idiomatic pattern referred to as an &lt;em&gt;error-first callback&lt;/em&gt;. With this pattern, a callback function is passed to the method as an argument. When the operation either completes or an error is raised, the callback function is called with the &lt;code&gt;Error&lt;/code&gt; object (if any) passed as the first argument. If no error was raised, the first argument will be passed as &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Node.js核心API公开的大多数异步方法都遵循惯用模式，称为&lt;em&gt;错误优先回调&lt;/em&gt;。通过这种模式，回调函数作为参数传递给方法。当操作完成或引发错误时，将以 &lt;code&gt;Error&lt;/code&gt; 对象（如果有）作为第一个参数传递来调用回调函数。如果未引发错误，则第一个参数将作为 &lt;code&gt;null&lt;/code&gt; 传递。</target>
        </trans-unit>
        <trans-unit id="cbf34ac485339ebd83193dd184575f98649766ac" translate="yes" xml:space="preserve">
          <source>Most asynchronous methods that accept a &lt;code&gt;callback&lt;/code&gt; function will accept an &lt;code&gt;Error&lt;/code&gt; object passed as the first argument to that function. If that first argument is not &lt;code&gt;null&lt;/code&gt; and is an instance of &lt;code&gt;Error&lt;/code&gt;, then an error occurred that should be handled.</source>
          <target state="translated">大多数接受 &lt;code&gt;callback&lt;/code&gt; 函数的异步方法将接受作为该函数的第一个参数传递的 &lt;code&gt;Error&lt;/code&gt; 对象。如果该第一个参数不为 &lt;code&gt;null&lt;/code&gt; ,并且是 &lt;code&gt;Error&lt;/code&gt; 的实例，则发生应处理的错误。</target>
        </trans-unit>
        <trans-unit id="2b8ceb2fddd337b5e111a9cd6250634bdec17c99" translate="yes" xml:space="preserve">
          <source>Most operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will eventually cause an application to crash.</source>
          <target state="translated">大多数操作系统限制了在任何时间内可以打开的文件描述符的数量,因此在操作完成后关闭描述符是至关重要的。如果不这样做,将导致内存泄漏,最终导致应用程序崩溃。</target>
        </trans-unit>
        <trans-unit id="9dc05d950cd4618e0efb087a5472232826d34e84" translate="yes" xml:space="preserve">
          <source>Moves running process into background. Type &lt;code&gt;fg&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt; to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cebb6899365ed285fb7b9339be5b27f9d9ab5f" translate="yes" xml:space="preserve">
          <source>Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called &quot;emitters&quot;) emit named events that cause &lt;code&gt;Function&lt;/code&gt; objects (&quot;listeners&quot;) to be called.</source>
          <target state="translated">Node.js核心API的大部分都基于惯用的异步事件驱动的体系结构，在该体系结构中，某些类型的对象（称为&amp;ldquo;发射器&amp;rdquo;）发出命名事件，这些事件导致调用 &lt;code&gt;Function&lt;/code&gt; 对象（&amp;ldquo;侦听器&amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="51b9e9e4f853d5c9f436fb23cb6c1226b9b3c6d3" translate="yes" xml:space="preserve">
          <source>Multiple alternatives may be specified, for instance: &lt;code&gt;'h2=&quot;example.org:81&quot;, h2=&quot;:82&quot;'&lt;/code&gt;.</source>
          <target state="translated">可以指定多个替代方案，例如： &lt;code&gt;'h2=&quot;example.org:81&quot;, h2=&quot;:82&quot;'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a5479027d01ceffdeaae68128ea7b4adf28374c" translate="yes" xml:space="preserve">
          <source>Multiple comma-separated &lt;code&gt;section&lt;/code&gt; names may be specified in the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable: &lt;code&gt;NODE_DEBUG=fs,net,tls&lt;/code&gt;.</source>
          <target state="translated">可以在 &lt;code&gt;NODE_DEBUG&lt;/code&gt; 环境变量中指定多个逗号分隔的 &lt;code&gt;section&lt;/code&gt; 名称： &lt;code&gt;NODE_DEBUG=fs,net,tls&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27f2ab40edb60bf40787bb6edf23d36b9c543077" translate="yes" xml:space="preserve">
          <source>Multiple concatenated gzip file members are supported now.</source>
          <target state="translated">现在支持多个连贯的gzip文件成员。</target>
        </trans-unit>
        <trans-unit id="f4215a6b0ba9f7218f437607dda8f17b06a6cd29" translate="yes" xml:space="preserve">
          <source>Multiple empty entries are now parsed correctly (e.g. &lt;code&gt;&amp;amp;=&amp;amp;=&lt;/code&gt;).</source>
          <target state="translated">现在可以正确解析多个空条目（例如 &lt;code&gt;&amp;amp;=&amp;amp;=&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c11e7417524b09c3c63dbb1d8edf3a8d679325c8" translate="yes" xml:space="preserve">
          <source>Multiple values were provided for an HTTP/2 header field that was required to have only a single value.</source>
          <target state="translated">为一个HTTP/2头字段提供了多个值,该字段只需要一个值。</target>
        </trans-unit>
        <trans-unit id="0cfd7073a743f5ff4fda510240475719d7850d63" translate="yes" xml:space="preserve">
          <source>N-API</source>
          <target state="translated">N-API</target>
        </trans-unit>
        <trans-unit id="90cbc0e18027d4869385351bdb9ade6021ccdf03" translate="yes" xml:space="preserve">
          <source>N-API (pronounced N as in the letter, followed by API) is an API for building native Addons. It is independent from the underlying JavaScript runtime (for example, V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one major version to run on later major versions of Node.js without recompilation. The &lt;a href=&quot;https://nodejs.org/en/docs/guides/abi-stability/&quot;&gt;ABI Stability&lt;/a&gt; guide provides a more in-depth explanation.</source>
          <target state="translated">N-API（在字母中发音为N，后跟API）是用于构建本机插件的API。它独立于底层JavaScript运行时（例如V8），并作为Node.js本身的一部分进行维护。该API在所有版本的Node.js上都是稳定的应用程序二进制接口（ABI）。它旨在使Addons与基础JavaScript引擎的更改保持隔离，并使为一个主要版本编译的模块可以在Node.js的更高主要版本上运行，而无需重新编译。《&lt;a href=&quot;https://nodejs.org/en/docs/guides/abi-stability/&quot;&gt;ABI稳定性&lt;/a&gt;指南》提供了更深入的说明。</target>
        </trans-unit>
        <trans-unit id="334e1de2311ffce54fb9769c28586c411d51f5fe" translate="yes" xml:space="preserve">
          <source>N-API Callback types</source>
          <target state="translated">N-API回调类型</target>
        </trans-unit>
        <trans-unit id="5ada9d09ff541a5d3e10d36683dca70ab044cf65" translate="yes" xml:space="preserve">
          <source>N-API Memory Management types</source>
          <target state="translated">N-API内存管理类型</target>
        </trans-unit>
        <trans-unit id="1f918c2169b9c207f636baeefc2f5e1825de6091" translate="yes" xml:space="preserve">
          <source>N-API Version Matrix</source>
          <target state="translated">N-API版本矩阵</target>
        </trans-unit>
        <trans-unit id="f8f29003d244cabc299bb893542ca04b223101d1" translate="yes" xml:space="preserve">
          <source>N-API callback types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d363f5ed275336e6c49002be4a2ef6344b73275b" translate="yes" xml:space="preserve">
          <source>N-API defines the &lt;code&gt;napi_async_work&lt;/code&gt; structure which is used to manage asynchronous workers. Instances are created/deleted with &lt;a href=&quot;#n_api_napi_create_async_work&quot;&gt;&lt;code&gt;napi_create_async_work&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd2329041a56e471a3596295b8fded33cd92bcd" translate="yes" xml:space="preserve">
          <source>N-API defines the &lt;code&gt;napi_work&lt;/code&gt; structure which is used to manage asynchronous workers. Instances are created/deleted with &lt;a href=&quot;#n_api_napi_create_async_work&quot;&gt;&lt;code&gt;napi_create_async_work&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">N-API定义了 &lt;code&gt;napi_work&lt;/code&gt; 结构，该结构用于管理异步工作程序。使用&lt;a href=&quot;#n_api_napi_create_async_work&quot;&gt; &lt;code&gt;napi_create_async_work&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt; &lt;code&gt;napi_delete_async_work&lt;/code&gt; &lt;/a&gt;创建/删除实例。</target>
        </trans-unit>
        <trans-unit id="88f54237d497e37e1e102b35a1c9c4125fb96d0f" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to create all types of JavaScript values. Some of these types are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values&quot;&gt;Section 6&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">N-API公开了一组API以创建所有类型的JavaScript值。一些这些类型的被下记录&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values&quot;&gt;第6节&lt;/a&gt;所述的&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript的语言规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ad5509989753e7e47a4ed4e95d74d5238fc745c6" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-operations&quot;&gt;Section 7&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7ee8aa91b06eb2761965bea9b3ca7d13159118" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-operations-on-objects&quot;&gt;Section 7&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">N-API公开了一组API，以获取和设置JavaScript对象的属性。一些这些类型的被下记录&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-operations-on-objects&quot;&gt;第7节&lt;/a&gt;所述的&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript的语言规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="62b7e76dd3e6c6d68488dbe2b8f2a01306cdd1b3" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to perform some abstract operations on JavaScript values. Some of these operations are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-operations&quot;&gt;Section 7&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">N-API公开了一组API，以对JavaScript值执行一些抽象操作。其中一些操作记录在&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript语言规范的&lt;/a&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-operations&quot;&gt;第7节&lt;/a&gt;中。</target>
        </trans-unit>
        <trans-unit id="3c61dcfa47476fc6fa41772f59614e57871819b0" translate="yes" xml:space="preserve">
          <source>N-API exposes the following fundamental datatypes as abstractions that are consumed by the various APIs. These APIs should be treated as opaque, introspectable only with other N-API calls.</source>
          <target state="translated">N-API将以下基本数据类型作为抽象暴露出来,由各种API消耗。这些API应被视为不透明的,只能通过其他N-API调用进行内省。</target>
        </trans-unit>
        <trans-unit id="561e1622d71e550f526caaa66deabdc9dfbdc3cb" translate="yes" xml:space="preserve">
          <source>N-API is an API for building native Addons. It is independent from the underlying JavaScript runtime (e.g. V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built/packaged with the same approach/tools outlined in this document (node-gyp, etc.). The only difference is the set of APIs that are used by the native code. Instead of using the V8 or &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; APIs, the functions available in the N-API are used.</source>
          <target state="translated">N-API是用于构建本机插件的API。它独立于底层JavaScript运行时（例如V8），并作为Node.js本身的一部分进行维护。该API将是跨Node.js版本稳定的应用程序二进制接口（ABI）。它旨在使Addons与基础JavaScript引擎中的更改保持隔离，并允许为一个版本编译的模块可以在更高版本的Node.js上运行，而无需重新编译。使用本文档中概述的相同方法/工具（node-gyp等）构建/打包插件。唯一的区别是本机代码使用的API集。代替使用V8或&lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Node.js&lt;/a&gt; API的本机抽象，使用N-API中可用的功能。</target>
        </trans-unit>
        <trans-unit id="89fbace17d4b56b76ef0aeff0489594e4cfa0aef" translate="yes" xml:space="preserve">
          <source>N-API is an API for building native addons. It is independent from the underlying JavaScript runtime (e.g. V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built/packaged with the same approach/tools outlined in this document (node-gyp, etc.). The only difference is the set of APIs that are used by the native code. Instead of using the V8 or &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; APIs, the functions available in the N-API are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa01c7fdc1743fef1e453e6b6b825c139cad6a5d" translate="yes" xml:space="preserve">
          <source>N-API memory management types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0738955b59acf88770860528a15013618ab13c78" translate="yes" xml:space="preserve">
          <source>N-API modules are registered in a manner similar to other modules except that instead of using the &lt;code&gt;NODE_MODULE&lt;/code&gt; macro the following is used:</source>
          <target state="translated">N-API模块以与其他模块类似的方式注册，除了使用以下 &lt;code&gt;NODE_MODULE&lt;/code&gt; 代替使用NODE_MODULE宏：</target>
        </trans-unit>
        <trans-unit id="3ce7ec8745b23919ab41738dc2e8d90813f2426a" translate="yes" xml:space="preserve">
          <source>N-API offers a way to &quot;wrap&quot; C++ classes and instances so that the class constructor and methods can be called from JavaScript.</source>
          <target state="translated">N-API提供了一种 &quot;包装 &quot;C++类和实例的方法,这样就可以从JavaScript中调用类的构造函数和方法。</target>
        </trans-unit>
        <trans-unit id="45efbba7b6828bb6ff691538d9468098a20c4570" translate="yes" xml:space="preserve">
          <source>N-API only supports a single nested hierarchy of scopes. There is only one active scope at any time, and all new handles will be associated with that scope while it is active. Scopes must be closed in the reverse order from which they are opened. In addition, all scopes created within a native method must be closed before returning from that method.</source>
          <target state="translated">N-API 只支持单一嵌套的作用域层次结构。任何时候都只有一个活动的作用域,当它处于活动状态时,所有新的句柄都将与该作用域相关联。作用域必须以打开时的相反顺序关闭。此外,在本地方法中创建的所有作用域必须在从该方法返回之前关闭。</target>
        </trans-unit>
        <trans-unit id="d7b60dab0bc992db521955215d2463d3ce27f102" translate="yes" xml:space="preserve">
          <source>N-API provides a function for getting the current event loop associated with a specific &lt;code&gt;napi_env&lt;/code&gt;.</source>
          <target state="translated">N-API提供了用于获取与特定 &lt;code&gt;napi_env&lt;/code&gt; 关联的当前事件循环的功能。</target>
        </trans-unit>
        <trans-unit id="e6d292a608d795d02e9feb5215a93624719c5f3d" translate="yes" xml:space="preserve">
          <source>N-API provides a set of APIs that allow JavaScript code to call back into native code. N-API APIs that support calling back into native code take in a callback functions represented by the &lt;code&gt;napi_callback&lt;/code&gt; type. When the JavaScript VM calls back to native code, the &lt;code&gt;napi_callback&lt;/code&gt; function provided is invoked. The APIs documented in this section allow the callback function to do the following:</source>
          <target state="translated">N-API提供了一组API，这些API允许JavaScript代码回调回本机代码。支持回调本机代码的N-API API接受由 &lt;code&gt;napi_callback&lt;/code&gt; 类型表示的回调函数。当JavaScript VM回叫本机代码时，将调用提供的 &lt;code&gt;napi_callback&lt;/code&gt; 函数。本节中记录的API允许回调函数执行以下操作：</target>
        </trans-unit>
        <trans-unit id="01090223361802809df29f213e82e3b9319fcf72" translate="yes" xml:space="preserve">
          <source>N-API provides an ABI-stable interface for these supporting functions which covers the most common asynchronous use cases.</source>
          <target state="translated">N-API为这些支持函数提供了一个ABI-稳定的接口,涵盖了最常见的异步用例。</target>
        </trans-unit>
        <trans-unit id="6f39db522f9283fcef0c912ba468da776135f241" translate="yes" xml:space="preserve">
          <source>N-API provides an API for executing a string containing JavaScript using the underlying JavaScript engine.</source>
          <target state="translated">N-API为使用底层JavaScript引擎执行包含JavaScript的字符串提供了一个API。</target>
        </trans-unit>
        <trans-unit id="2313fc0c61261c329c023f99d171fe8dbee4423c" translate="yes" xml:space="preserve">
          <source>N-API provides facilities for creating &lt;code&gt;Promise&lt;/code&gt; objects as described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promise-objects&quot;&gt;Section 25.4&lt;/a&gt; of the ECMA specification. It implements promises as a pair of objects. When a promise is created by &lt;code&gt;napi_create_promise()&lt;/code&gt;, a &quot;deferred&quot; object is created and returned alongside the &lt;code&gt;Promise&lt;/code&gt;. The deferred object is bound to the created &lt;code&gt;Promise&lt;/code&gt; and is the only means to resolve or reject the &lt;code&gt;Promise&lt;/code&gt; using &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; or &lt;code&gt;napi_reject_deferred()&lt;/code&gt;. The deferred object that is created by &lt;code&gt;napi_create_promise()&lt;/code&gt; is freed by &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; or &lt;code&gt;napi_reject_deferred()&lt;/code&gt;. The &lt;code&gt;Promise&lt;/code&gt; object may be returned to JavaScript where it can be used in the usual fashion.</source>
          <target state="translated">N-API提供了创建ECMA规范&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promise-objects&quot;&gt;第25.4节中&lt;/a&gt;所述的 &lt;code&gt;Promise&lt;/code&gt; 对象的功能。它实现诺言作为一对对象。当 &lt;code&gt;napi_create_promise()&lt;/code&gt; 创建一个 &lt;code&gt;Promise&lt;/code&gt; 时，将创建一个&amp;ldquo; deferred&amp;rdquo;对象，并将其与Promise一起返回。延迟的对象绑定到创建的 &lt;code&gt;Promise&lt;/code&gt; ,并且是使用 &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; 或 &lt;code&gt;napi_reject_deferred()&lt;/code&gt; 解决或拒绝 &lt;code&gt;Promise&lt;/code&gt; 的唯一方法。由 &lt;code&gt;napi_create_promise()&lt;/code&gt; 创建的延迟对象由 &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; 或 &lt;code&gt;napi_reject_deferred()&lt;/code&gt; 释放。。所述 &lt;code&gt;Promise&lt;/code&gt; 对象可被返回给JavaScript其中它可以以通常的方式使用。</target>
        </trans-unit>
        <trans-unit id="7d99e6c12543c037d84d75d93df6bb441b536baa" translate="yes" xml:space="preserve">
          <source>N-API provides functions for registering and un-registering such callbacks. When those callbacks are run, all resources that are being held by the addon should be freed up.</source>
          <target state="translated">N-API提供了注册和取消注册这种回调的功能。当这些回调被运行时,所有被addon持有的资源都应该被释放出来。</target>
        </trans-unit>
        <trans-unit id="b7c3cd228011e5d9137f1bb00c23394226dbfbfc" translate="yes" xml:space="preserve">
          <source>N-API provides methods to create persistent references to an object. Each persistent reference has an associated count with a value of 0 or higher. The count determines if the reference will keep the corresponding object live. References with a count of 0 do not prevent the object from being collected and are often called 'weak' references. Any count greater than 0 will prevent the object from being collected.</source>
          <target state="translated">N-API提供了创建对象的持久化引用的方法。每个持久化引用都有一个相关的计数,其值为0或更高。计数决定了该引用是否会使相应的对象保持有效。计数为0的引用不会阻止对象被收集,通常被称为 &quot;弱 &quot;引用。任何大于0的计数都会阻止对象被收集。</target>
        </trans-unit>
        <trans-unit id="21039b0e91105633cdec6fe19581a15729f4b937" translate="yes" xml:space="preserve">
          <source>N-API sets up the environment prior to calling this callback, so it is sufficient to call the JavaScript function via &lt;code&gt;napi_call_function&lt;/code&gt; rather than via &lt;code&gt;napi_make_callback&lt;/code&gt;.</source>
          <target state="translated">N-API在调用此回调之前设置了环境，因此通过 &lt;code&gt;napi_call_function&lt;/code&gt; 而不是 &lt;code&gt;napi_make_callback&lt;/code&gt; 调用JavaScript函数就足够了。</target>
        </trans-unit>
        <trans-unit id="dea939312c782d8c5e666ab405635666046b5b1f" translate="yes" xml:space="preserve">
          <source>N-API uses both return values and JavaScript exceptions for error handling. The following sections explain the approach for each case.</source>
          <target state="translated">N-API同时使用返回值和JavaScript异常来处理错误。下面的章节将解释每种情况下的方法。</target>
        </trans-unit>
        <trans-unit id="1171e6e250c8137afa5e0b60938de57ff990d9c4" translate="yes" xml:space="preserve">
          <source>N-API values are represented by the type &lt;code&gt;napi_value&lt;/code&gt;. Any N-API call that requires a JavaScript value takes in a &lt;code&gt;napi_value&lt;/code&gt;. However, it's the caller's responsibility to make sure that the &lt;code&gt;napi_value&lt;/code&gt; in question is of the JavaScript type expected by the API.</source>
          <target state="translated">N-API值由 &lt;code&gt;napi_value&lt;/code&gt; 类型表示。任何需要JavaScript值的N-API调用都需要使用 &lt;code&gt;napi_value&lt;/code&gt; 。但是，调用者有责任确保所讨论的 &lt;code&gt;napi_value&lt;/code&gt; 属于API期望的JavaScript类型。</target>
        </trans-unit>
        <trans-unit id="ed30e9f4e0aa475cc4bcf4606fa7aa3e116ab3a4" translate="yes" xml:space="preserve">
          <source>N-API values are represented by the type &lt;code&gt;napi_value&lt;/code&gt;. Any N-API call that requires a JavaScript value takes in a &lt;code&gt;napi_value&lt;/code&gt;. In some cases, the API does check the type of the &lt;code&gt;napi_value&lt;/code&gt; up-front. However, for better performance, it's better for the caller to make sure that the &lt;code&gt;napi_value&lt;/code&gt; in question is of the JavaScript type expected by the API.</source>
          <target state="translated">N-API值由 &lt;code&gt;napi_value&lt;/code&gt; 类型表示。任何需要JavaScript值的N-API调用都需要使用 &lt;code&gt;napi_value&lt;/code&gt; 。在某些情况下，API会 &lt;code&gt;napi_value&lt;/code&gt; 检查napi_value的类型。但是，为了获得更好的性能，最好让调用者确保所讨论的 &lt;code&gt;napi_value&lt;/code&gt; 为API期望的JavaScript类型。</target>
        </trans-unit>
        <trans-unit id="8d77c1ac20c6483c8f420a855abd5497053e93d5" translate="yes" xml:space="preserve">
          <source>N-API version matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af583d89de0c7c4b8c0e6223b8b144c689c84cc0" translate="yes" xml:space="preserve">
          <source>N-API version: 1</source>
          <target state="translated">N-API版本:1</target>
        </trans-unit>
        <trans-unit id="42eb0bf2898c4d90751141d61f3a812907fc83bc" translate="yes" xml:space="preserve">
          <source>N-API version: 4</source>
          <target state="translated">N-API版本。4</target>
        </trans-unit>
        <trans-unit id="36688c47c6b67b86c616353a7b6ea5bc6ef4edce" translate="yes" xml:space="preserve">
          <source>N-API versions are additive and versioned independently from Node.js. Version 4 is an extension to version 3 in that it has all of the APIs from version 3 with some additions. This means that it is not necessary to recompile for new versions of Node.js which are listed as supporting a later version.</source>
          <target state="translated">N-API的版本是相加的,而且是独立于Node.js的版本。第4版是第3版的扩展,它拥有第3版的所有API,并增加了一些内容。这意味着,对于被列为支持较晚版本的Node.js的新版本,没有必要重新编译。</target>
        </trans-unit>
        <trans-unit id="d9c9f155bef3ac70ea5522b0c447a11486f56d68" translate="yes" xml:space="preserve">
          <source>NaN is now treated as being identical in case both sides are NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4861f73679976cfe93d5853d1be47fcaa088f38c" translate="yes" xml:space="preserve">
          <source>Nagle's algorithm delays data before it is sent via the network. It attempts to optimize throughput at the expense of latency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="5ad766507b42c419a18a1fab4a93852992d6d506" translate="yes" xml:space="preserve">
          <source>Name of the file to which the report will be written.</source>
          <target state="translated">写入报告的文件名称:</target>
        </trans-unit>
        <trans-unit id="1048f6c8527f66e3515e900d898fe7d003e1f286" translate="yes" xml:space="preserve">
          <source>Named exports detection covers many common export patterns, reexport patterns and build tool and transpiler outputs. See &lt;a href=&quot;https://github.com/guybedford/cjs-module-lexer/tree/0.4.2&quot;&gt;cjs-module-lexer&lt;/a&gt; for the exact semantics implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc22075ed2175ad5ccc2508aac2f833f87e45dda" translate="yes" xml:space="preserve">
          <source>Named: a simple UTF8-encoded string</source>
          <target state="translated">命名:一个简单的UTF8编码的字符串。</target>
        </trans-unit>
        <trans-unit id="7137f503dc2584ea8280d497399006e247e659b7" translate="yes" xml:space="preserve">
          <source>Native Abstractions for Node.js</source>
          <target state="translated">Node.js的本地抽象</target>
        </trans-unit>
        <trans-unit id="5b2b42c72d18c6faa9885b4109d0dd739273361a" translate="yes" xml:space="preserve">
          <source>Native abstractions for Node.js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcea4b8da29480f402438959046ab2f9f368022" translate="yes" xml:space="preserve">
          <source>Native add-ons can only be loaded from multiple threads if they fulfill &lt;a href=&quot;addons#addons_worker_support&quot;&gt;certain conditions&lt;/a&gt;.</source>
          <target state="translated">如果本机加载项满足&lt;a href=&quot;addons#addons_worker_support&quot;&gt;某些条件，&lt;/a&gt;则只能从多个线程中加载它们。</target>
        </trans-unit>
        <trans-unit id="f6675537e94c99d143279098c166eb1d6147b5fc" translate="yes" xml:space="preserve">
          <source>Native addons may need to allocate global state of which they make use during their entire life cycle such that the state must be unique to each instance of the addon.</source>
          <target state="translated">原生附加组件可能需要分配全局状态,它们在整个生命周期中都会使用这些状态,这样的状态对附加组件的每个实例来说必须是唯一的。</target>
        </trans-unit>
        <trans-unit id="5eeb4b95aa64d8fee6f596435f2844988e53b6b8" translate="yes" xml:space="preserve">
          <source>Native addons may need to allocate global state which they use during their entire life cycle such that the state must be unique to each instance of the addon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264fa17f0716888a4cd2265fb034958375c3d60e" translate="yes" xml:space="preserve">
          <source>Negative &lt;code&gt;end&lt;/code&gt; values throw an &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; error.</source>
          <target state="translated">负的 &lt;code&gt;end&lt;/code&gt; 值将引发 &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; 错误。</target>
        </trans-unit>
        <trans-unit id="d6bf8490f059717c8e2d09d80c5d0cd5ed5e1330" translate="yes" xml:space="preserve">
          <source>Neither does &lt;code&gt;napi_unref_threadsafe_function&lt;/code&gt; mark the thread-safe functions as able to be destroyed nor does &lt;code&gt;napi_ref_threadsafe_function&lt;/code&gt; prevent it from being destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd380c71e5072703e31986beeba244ee7a164ed8" translate="yes" xml:space="preserve">
          <source>Neither does &lt;code&gt;napi_unref_threadsafe_function&lt;/code&gt; mark the thread-safe functions as able to be destroyed nor does &lt;code&gt;napi_ref_threadsafe_function&lt;/code&gt; prevent it from being destroyed. &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; and &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; are available for that purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba80e45016258331008bc495a573c344a21c641" translate="yes" xml:space="preserve">
          <source>Neither the well known nor extra certificates are used when the &lt;code&gt;ca&lt;/code&gt; options property is explicitly specified for a TLS or HTTPS client or server.</source>
          <target state="translated">当为TLS或HTTPS客户端或服务器明确指定 &lt;code&gt;ca&lt;/code&gt; options属性时，既不使用众所周知的证书也不使用其他证书。</target>
        </trans-unit>
        <trans-unit id="9bb81c2eccbed59ee8cbe296f1278f0ca1f364cc" translate="yes" xml:space="preserve">
          <source>Net</source>
          <target state="translated">Net</target>
        </trans-unit>
        <trans-unit id="9d926a391a10419818faebd2c569e4c93c8a271b" translate="yes" xml:space="preserve">
          <source>New HTTP/2 Streams may not be opened after the &lt;code&gt;Http2Session&lt;/code&gt; has received a &lt;code&gt;GOAWAY&lt;/code&gt; frame from the connected peer.</source>
          <target state="translated">新的HTTP / 2流可能不是后打开 &lt;code&gt;Http2Session&lt;/code&gt; 已经接收到 &lt;code&gt;GOAWAY&lt;/code&gt; 从连接对等框架。</target>
        </trans-unit>
        <trans-unit id="7193207627db5aaa3ebdacf110c6817d0cb0fe81" translate="yes" xml:space="preserve">
          <source>New applications should expect the default to be &lt;code&gt;'buffer'&lt;/code&gt;.</source>
          <target state="translated">新的应用程序应该期望默认值为 &lt;code&gt;'buffer'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="538dbd3921c4aa1f787f750bebace3312d5e5773" translate="yes" xml:space="preserve">
          <source>New instances of &lt;code&gt;dgram.Socket&lt;/code&gt; are created using &lt;a href=&quot;#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;new&lt;/code&gt; keyword is not to be used to create &lt;code&gt;dgram.Socket&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;dgram.Socket&lt;/code&gt; 的新实例是使用&lt;a href=&quot;#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; &lt;/a&gt;创建的。在 &lt;code&gt;new&lt;/code&gt; 关键字是不能用来创建 &lt;code&gt;dgram.Socket&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="8286903a3b42f30c2845be65b9063df789c12e5a" translate="yes" xml:space="preserve">
          <source>New option &lt;code&gt;withFileTypes&lt;/code&gt; was added.</source>
          <target state="translated">添加了 &lt;code&gt;withFileTypes&lt;/code&gt; 新选项。</target>
        </trans-unit>
        <trans-unit id="d9b883a3b076116d662bc7a87ea12fa4ff91a952" translate="yes" xml:space="preserve">
          <source>Next history item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc072aabd2bae6e9c49b6e900e7612de2b36503a" translate="yes" xml:space="preserve">
          <source>Next, invoke the &lt;code&gt;node-gyp build&lt;/code&gt; command to generate the compiled &lt;code&gt;addon.node&lt;/code&gt; file. This will be put into the &lt;code&gt;build/Release/&lt;/code&gt; directory.</source>
          <target state="translated">接下来，调用 &lt;code&gt;node-gyp build&lt;/code&gt; &lt;code&gt;addon.node&lt;/code&gt; build命令来生成已编译的addon.node文件。这将放入 &lt;code&gt;build/Release/&lt;/code&gt; 目录。</target>
        </trans-unit>
        <trans-unit id="60c6db9ea82d2e5e907d48b09a58571de5491306" translate="yes" xml:space="preserve">
          <source>No &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; event listener is added.</source>
          <target state="translated">没有添加&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;事件监听器。</target>
        </trans-unit>
        <trans-unit id="7713480c15dd839650512046c796bdd1e22142e3" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;NODE_PATH&lt;/code&gt;</source>
          <target state="translated">没有 &lt;code&gt;NODE_PATH&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4e365ecb80d6c5e0aee9009ce4f7cb44fc85a412" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require.cache&lt;/code&gt;</source>
          <target state="translated">没有 &lt;code&gt;require.cache&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5fdcf81df39a04935671e5f913e82a9ed67ac793" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require.extensions&lt;/code&gt;</source>
          <target state="translated">没有 &lt;code&gt;require.extensions&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7884051283c69059211963d23c652ce9c1f43cb" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require.resolve&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bd086942e812ae818e7cbfbd123ebe5c91a9cf" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, &lt;code&gt;module.exports&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt;, &lt;code&gt;__dirname&lt;/code&gt;</source>
          <target state="translated">没有 &lt;code&gt;require&lt;/code&gt; ， &lt;code&gt;exports&lt;/code&gt; ， &lt;code&gt;module.exports&lt;/code&gt; ， &lt;code&gt;__filename&lt;/code&gt; ， &lt;code&gt;__dirname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d424da21bf8bf374cdfa3070439b63b71a40f17e" translate="yes" xml:space="preserve">
          <source>No Error</source>
          <target state="translated">没有错误</target>
        </trans-unit>
        <trans-unit id="e2a350e3da36cf6a880449d24a7d22ab9e4027d2" translate="yes" xml:space="preserve">
          <source>No arguments other than a possible exception are given to the completion callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d617594d209195a47bc9a68e67dac23de396ed7" translate="yes" xml:space="preserve">
          <source>No case conversion is performed on case-insensitive file systems.</source>
          <target state="translated">在不区分大小写的文件系统上不进行大小写转换。</target>
        </trans-unit>
        <trans-unit id="c3331168b9cff4f62863ed956ba7c063dc1e66ff" translate="yes" xml:space="preserve">
          <source>No decoding of the &lt;code&gt;path&lt;/code&gt; is performed.</source>
          <target state="translated">不执行 &lt;code&gt;path&lt;/code&gt; 解码。</target>
        </trans-unit>
        <trans-unit id="5a6ddfb774d5f9c27c27174db32faeb0af1ec6da" translate="yes" xml:space="preserve">
          <source>No decoding of the path string is performed.</source>
          <target state="translated">不对路径字符串进行解码。</target>
        </trans-unit>
        <trans-unit id="13c8ff0aedccedab26b0a9cc20907ad8d12092c6" translate="yes" xml:space="preserve">
          <source>No decoding of the query string is performed.</source>
          <target state="translated">不对查询字符串进行解码。</target>
        </trans-unit>
        <trans-unit id="a03f0fd922f89467f81c73b168c18f01a6802039" translate="yes" xml:space="preserve">
          <source>No default extensions</source>
          <target state="translated">无默认扩展</target>
        </trans-unit>
        <trans-unit id="927a7432a2380470b398b68e7bf815a0c092cf92" translate="yes" xml:space="preserve">
          <source>No folder mains</source>
          <target state="translated">无文件夹主</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="b0b78d39dcf9723cadf7c92f189fafd553d14144" translate="yes" xml:space="preserve">
          <source>Node.js (and its underlying V8 engine) uses &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt; to implement these features in native C/C++ code. However, some of them require a very large ICU data file in order to support all locales of the world. Because it is expected that most Node.js users will make use of only a small portion of ICU functionality, only a subset of the full ICU data set is provided by Node.js by default. Several options are provided for customizing and expanding the ICU data set either when building or running Node.js.</source>
          <target state="translated">Node.js（及其底层V8引擎）使用&lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt;在本机C / C ++代码中实现这些功能。但是，其中一些需要非常大的ICU数据文件才能支持世界各地。因为预计大多数Node.js用户将仅使用ICU功能的一小部分，所以默认情况下，Node.js仅提供完整ICU数据集的一部分。在构建或运行Node.js时，提供了几个用于自定义和扩展ICU数据集的选项。</target>
        </trans-unit>
        <trans-unit id="c539dfd29c36580c7afd3ad17f46f3f5fa46d7d7" translate="yes" xml:space="preserve">
          <source>Node.js (and its underlying V8 engine) uses &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt; to implement these features in native C/C++ code. The full ICU data set is provided by Node.js by default. However, due to the size of the ICU data file, several options are provided for customizing the ICU data set either when building or running Node.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ea04817c5b66536ed37593c38099d256e6265d" translate="yes" xml:space="preserve">
          <source>Node.js &lt;code&gt;EventTarget&lt;/code&gt; vs. DOM &lt;code&gt;EventTarget&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc273ad6c9801813717d36e19bf7f8023b01504f" translate="yes" xml:space="preserve">
          <source>Node.js APIs might be deprecated for any of the following reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c6ff3487c288f0b8d40123f15c094451d4d58d" translate="yes" xml:space="preserve">
          <source>Node.js Addons are dynamically-linked shared objects, written in C++, that can be loaded into Node.js using the &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; function, and used just as if they were an ordinary Node.js module. They are used primarily to provide an interface between JavaScript running in Node.js and C/C++ libraries.</source>
          <target state="translated">Node.js插件是用C ++编写的动态链接的共享对象，可以使用&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;函数加载到Node.js中，就像它们是普通的Node.js模块一样使用。它们主要用于在Node.js中运行的JavaScript和C / C ++库之间提供接口。</target>
        </trans-unit>
        <trans-unit id="51be1c370c336ba5619c2e9080dd4bf368c9c46b" translate="yes" xml:space="preserve">
          <source>Node.js Crypto Constants</source>
          <target state="translated">Node.js加密常量</target>
        </trans-unit>
        <trans-unit id="441aa6a1425f4454daa77eeba4c8ce3a18045fb8" translate="yes" xml:space="preserve">
          <source>Node.js Error Codes</source>
          <target state="translated">Node.js错误代码</target>
        </trans-unit>
        <trans-unit id="c6d30bd2144c9d89e9803d2977bc8a87eb8771f7" translate="yes" xml:space="preserve">
          <source>Node.js also supports the following two binary-to-text encodings. For binary-to-text encodings, the naming convention is reversed: Converting a &lt;code&gt;Buffer&lt;/code&gt; into a string is typically referred to as encoding, and converting a string into a &lt;code&gt;Buffer&lt;/code&gt; as decoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179df0cc5008db133b8bc9a59310d37319853e06" translate="yes" xml:space="preserve">
          <source>Node.js can be started using the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command line option to cause all newly allocated &lt;code&gt;Buffer&lt;/code&gt; instances to be zero-filled upon creation by default. Before Node.js 8.0.0, this included buffers allocated by &lt;code&gt;new Buffer(size)&lt;/code&gt;. Since Node.js 8.0.0, buffers allocated with &lt;code&gt;new&lt;/code&gt; are always zero-filled, whether this option is used or not. &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;new SlowBuffer(size)&lt;/code&gt;. Use of this flag can have a significant negative impact on performance. Use of the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; option is recommended only when necessary to enforce that newly allocated &lt;code&gt;Buffer&lt;/code&gt; instances cannot contain old data that is potentially sensitive.</source>
          <target state="translated">可以使用 &lt;code&gt;--zero-fill-buffers&lt;/code&gt; 命令行选项启动Node.js，以使所有新分配的 &lt;code&gt;Buffer&lt;/code&gt; 实例在创建时默认为零填充。在Node.js 8.0.0之前，这包括由 &lt;code&gt;new Buffer(size)&lt;/code&gt; 分配的缓冲区。从Node.js 8.0.0起，无论是否使用此选项，分配给 &lt;code&gt;new&lt;/code&gt; 的缓冲区始终为零填充。&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;new SlowBuffer(size)&lt;/code&gt; 。使用此标志可能会对性能产生重大负面影响。仅在有必要执行新分配的 &lt;code&gt;Buffer&lt;/code&gt; 时，才建议使用 &lt;code&gt;--zero-fill-buffers&lt;/code&gt; 选项 实例不能包含可能敏感的旧数据。</target>
        </trans-unit>
        <trans-unit id="3f54ed66583f9bae1455fd00e2272f6a34ca953a" translate="yes" xml:space="preserve">
          <source>Node.js can be started using the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command-line option to cause all newly-allocated &lt;code&gt;Buffer&lt;/code&gt; instances to be zero-filled upon creation by default. Without the option, buffers created with &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;new SlowBuffer(size)&lt;/code&gt; are not zero-filled. Use of this flag can have a measurable negative impact on performance. Use the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; option only when necessary to enforce that newly allocated &lt;code&gt;Buffer&lt;/code&gt; instances cannot contain old data that is potentially sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f1a7ae4eec5392042ce17901f72140ba89d819" translate="yes" xml:space="preserve">
          <source>Node.js can link against an ICU build already installed on the system. In fact, most Linux distributions already come with ICU installed, and this option would make it possible to reuse the same set of data used by other components in the OS.</source>
          <target state="translated">Node.js可以针对系统上已经安装的ICU构建链接。事实上,大多数Linux发行版都已经安装了ICU,这个选项将使得重用操作系统中其他组件使用的同一组数据成为可能。</target>
        </trans-unit>
        <trans-unit id="5810ddd39bdfe4323cf379ac3f7b781e60db98e0" translate="yes" xml:space="preserve">
          <source>Node.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options.</source>
          <target state="translated">Node.js自带各种CLI选项。这些选项暴露了内置的调试、执行脚本的多种方式以及其他有用的运行时选项。</target>
        </trans-unit>
        <trans-unit id="700f33732d1ab659fda7ca90f224da1753e7cde0" translate="yes" xml:space="preserve">
          <source>Node.js contains experimental support for creating policies on loading code.</source>
          <target state="translated">Node.js包含对创建加载代码的策略的实验性支持。</target>
        </trans-unit>
        <trans-unit id="4994583ed9ea64b95980a99b8ac9cb934c0c8136" translate="yes" xml:space="preserve">
          <source>Node.js contains support for ES Modules based upon the &lt;a href=&quot;https://github.com/nodejs/node-eps/blob/master/002-es-modules.md&quot;&gt;Node.js EP for ES Modules&lt;/a&gt; and the &lt;a href=&quot;https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md&quot;&gt;ECMAScript-modules implementation&lt;/a&gt;.</source>
          <target state="translated">Node.js包含基于ES模块的&lt;a href=&quot;https://github.com/nodejs/node-eps/blob/master/002-es-modules.md&quot;&gt;Node.js EP&lt;/a&gt;和&lt;a href=&quot;https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md&quot;&gt;ECMAScript-modules实现的&lt;/a&gt; ES模块支持。</target>
        </trans-unit>
        <trans-unit id="c490a214340b790bb43bbfd2fa0be7c3074d0693" translate="yes" xml:space="preserve">
          <source>Node.js crypto constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f284dbd956cb499dff05c1a4c98369975a26484c" translate="yes" xml:space="preserve">
          <source>Node.js currently overwrites &lt;code&gt;argv[0]&lt;/code&gt; with &lt;code&gt;process.execPath&lt;/code&gt; on startup, so &lt;code&gt;process.argv[0]&lt;/code&gt; in a Node.js child process will not match the &lt;code&gt;argv0&lt;/code&gt; parameter passed to &lt;code&gt;spawn&lt;/code&gt; from the parent, retrieve it with the &lt;code&gt;process.argv0&lt;/code&gt; property instead.</source>
          <target state="translated">Node.js的当前改写 &lt;code&gt;argv[0]&lt;/code&gt; 与 &lt;code&gt;process.execPath&lt;/code&gt; 上启动，所以 &lt;code&gt;process.argv[0]&lt;/code&gt; 在Node.js的子进程将不匹配 &lt;code&gt;argv0&lt;/code&gt; 传递参数 &lt;code&gt;spawn&lt;/code&gt; 从父，与检索 &lt;code&gt;process.argv0&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="71f1ec4dc71d40c8c7d0a68270209a7d73533f56" translate="yes" xml:space="preserve">
          <source>Node.js does not check whether Content-Length and the length of the body which has been transmitted are equal or not.</source>
          <target state="translated">Node.js不检查Content-Length和传输的正文长度是否相等。</target>
        </trans-unit>
        <trans-unit id="06e7f421afd071d9d6af3f9498e9ce444a8edad0" translate="yes" xml:space="preserve">
          <source>Node.js does not provide routing logic. It is, therefore important to design an application such that it does not rely too heavily on in-memory data objects for things like sessions and login.</source>
          <target state="translated">Node.js不提供路由逻辑。因此,重要的是要设计一个应用程序,使其不过度依赖内存数据对象来处理会话和登录等事宜。</target>
        </trans-unit>
        <trans-unit id="8bc2f65bdd2e7e9164e8bd1a326d5600365b5ab6" translate="yes" xml:space="preserve">
          <source>Node.js error codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59620f5a7d966f7ed19e56a82fa67f4d669f5bf7" translate="yes" xml:space="preserve">
          <source>Node.js establishes signal handlers for &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGTERM&lt;/code&gt; and Node.js processes will not terminate immediately due to receipt of those signals. Rather, Node.js will perform a sequence of cleanup actions and then will re-raise the handled signal.</source>
          <target state="translated">Node.js为 &lt;code&gt;SIGINT&lt;/code&gt; 和 &lt;code&gt;SIGTERM&lt;/code&gt; 建立信号处理程序，并且Node.js进程不会由于接收到这些信号而立即终止。相反，Node.js将执行一系列清除操作，然后重新引发已处理的信号。</target>
        </trans-unit>
        <trans-unit id="b03b3b5fea382e76a7a57c11964832d9a8b669da" translate="yes" xml:space="preserve">
          <source>Node.js fully supports ECMAScript modules as they are currently specified and provides limited interoperability between them and the existing module format, &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;.</source>
          <target state="translated">Node.js完全支持当前指定的ECMAScript模块，并提供它们与现有模块格式&lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;之间有限的互操作性。</target>
        </trans-unit>
        <trans-unit id="d9420a48ed10cc5802fa3b78bba7653131bf1a8e" translate="yes" xml:space="preserve">
          <source>Node.js generates system errors when exceptions occur within its runtime environment. These usually occur when an application violates an operating system constraint. For example, a system error will occur if an application attempts to read a file that does not exist.</source>
          <target state="translated">当Node.js在其运行时环境中发生异常时,会产生系统错误。这些异常通常发生在应用程序违反操作系统约束时。例如,如果应用程序试图读取一个不存在的文件,就会发生系统错误。</target>
        </trans-unit>
        <trans-unit id="d0cd156f333656194d6d4ee97e4372a26119bd21" translate="yes" xml:space="preserve">
          <source>Node.js has many features that make it easier to write internationalized programs. Some of them are:</source>
          <target state="translated">Node.js有很多功能,可以让你更容易地编写国际化的程序。其中一些是:</target>
        </trans-unit>
        <trans-unit id="195eccef86c70efe3ada3da5e4f20eea967db8b4" translate="yes" xml:space="preserve">
          <source>Node.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation.</source>
          <target state="translated">Node.js有几个模块被编译到二进制中。这些模块在本文档的其他地方有更详细的描述。</target>
        </trans-unit>
        <trans-unit id="d3d67c8f1728279b2419e85378220842f097aa2a" translate="yes" xml:space="preserve">
          <source>Node.js includes a number of other statically linked libraries including OpenSSL. These other libraries are located in the &lt;code&gt;deps/&lt;/code&gt; directory in the Node.js source tree. Only the libuv, OpenSSL, V8 and zlib symbols are purposefully re-exported by Node.js and may be used to various extents by Addons. See &lt;a href=&quot;#addons_linking_to_node_js_own_dependencies&quot;&gt;Linking to Node.js' own dependencies&lt;/a&gt; for additional information.</source>
          <target state="translated">Node.js包括许多其他静态链接的库，包括OpenSSL。这些其他库位于Node.js源代码树的 &lt;code&gt;deps/&lt;/code&gt; 目录中。Node.js只会有目的地重新导出libuv，OpenSSL，V8和zlib符号，并且Addons可以在不同程度上使用它们。有关其他信息，请参见&lt;a href=&quot;#addons_linking_to_node_js_own_dependencies&quot;&gt;链接到Node.js自己的依赖项&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4002058c11230c8c613d48125799d611e8e5ab90" translate="yes" xml:space="preserve">
          <source>Node.js includes an out-of-process debugging utility accessible via a &lt;a href=&quot;#debugger_v8_inspector_integration_for_node_js&quot;&gt;V8 Inspector&lt;/a&gt; and built-in debugging client. To use it, start Node.js with the &lt;code&gt;inspect&lt;/code&gt; argument followed by the path to the script to debug; a prompt will be displayed indicating successful launch of the debugger:</source>
          <target state="translated">Node.js包含一个进程外调试实用程序，可通过&lt;a href=&quot;#debugger_v8_inspector_integration_for_node_js&quot;&gt;V8 Inspector&lt;/a&gt;和内置调试客户端进行访问。要使用它，请先使用 &lt;code&gt;inspect&lt;/code&gt; 参数启动Node.js，然后是要调试的脚本的路径。将显示提示，指示调试器已成功启动：</target>
        </trans-unit>
        <trans-unit id="115f8d8c85f155299923066b8cd8afdf7cb6c984" translate="yes" xml:space="preserve">
          <source>Node.js includes other statically linked libraries including OpenSSL. These other libraries are located in the &lt;code&gt;deps/&lt;/code&gt; directory in the Node.js source tree. Only the libuv, OpenSSL, V8 and zlib symbols are purposefully re-exported by Node.js and may be used to various extents by addons. See &lt;a href=&quot;#addons_linking_to_libraries_included_with_node_js&quot;&gt;Linking to libraries included with Node.js&lt;/a&gt; for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9aede62d41177b7855358a4024583daeb12072" translate="yes" xml:space="preserve">
          <source>Node.js inspector supports all the Chrome DevTools Protocol domains declared by V8. Chrome DevTools Protocol domain provides an interface for interacting with one of the runtime agents used to inspect the application state and listen to the run-time events.</source>
          <target state="translated">Node.js检查器支持V8声明的所有Chrome DevTools协议域。Chrome DevTools协议域提供了一个与用于检查应用程序状态和监听运行时事件的运行时代理之一进行交互的接口。</target>
        </trans-unit>
        <trans-unit id="9b8c531580042ddb6a9c8b040b19ffbdbcdd1525" translate="yes" xml:space="preserve">
          <source>Node.js is a trademark of Joyent, Inc. and is used with its permission.</source>
          <target state="translated">Node.js是Joyent,Inc.的商标,经其许可使用。</target>
        </trans-unit>
        <trans-unit id="f38a0ebf21cebf178508d7332d871c116478b9e4" translate="yes" xml:space="preserve">
          <source>Node.js is built with a default suite of enabled and disabled TLS ciphers. Currently, the default cipher suite is:</source>
          <target state="translated">Node.js内置了一套默认的启用和禁用的TLS密码。目前,默认的密码套件是。</target>
        </trans-unit>
        <trans-unit id="8aee71eb10933a7749912dfe5f90adbda7e60cec" translate="yes" xml:space="preserve">
          <source>Node.js is built with a default suite of enabled and disabled TLS ciphers. This default cipher list can be configured when building Node.js to allow distributions to provide their own default list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d419b29bddd025ae8da2d1cd92469cb932388b2a" translate="yes" xml:space="preserve">
          <source>Node.js itself uses the &lt;code&gt;repl&lt;/code&gt; module to provide its own interactive interface for executing JavaScript. This can be used by executing the Node.js binary without passing any arguments (or by passing the &lt;code&gt;-i&lt;/code&gt; argument):</source>
          <target state="translated">Node.js本身使用 &lt;code&gt;repl&lt;/code&gt; 模块提供其自己的交互式接口来执行JavaScript。可以通过执行Node.js二进制文件而不使用任何参数（或通过 &lt;code&gt;-i&lt;/code&gt; 参数）来使用它：</target>
        </trans-unit>
        <trans-unit id="f09bc63e6e483ddf848817dae917ca441f8c70d6" translate="yes" xml:space="preserve">
          <source>Node.js maintains several connections per server to make HTTP requests. This function allows one to transparently issue requests.</source>
          <target state="translated">Node.js为每台服务器维护多个连接来发出HTTP请求。这个功能可以让人透明地发出请求。</target>
        </trans-unit>
        <trans-unit id="ef83fb721ff96281b3ffd2a1bcbc9e428f3194ea" translate="yes" xml:space="preserve">
          <source>Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</source>
          <target state="translated">Node.js不保证复制操作的原子性。如果目标文件被打开写入后发生错误,Node.js会尝试删除目标文件。</target>
        </trans-unit>
        <trans-unit id="5a2313c41832d43d1e319cb20bebf01ebb24487d" translate="yes" xml:space="preserve">
          <source>Node.js may deprecate APIs for any of the following reasons:</source>
          <target state="translated">Node.js可能会因为以下任何原因而废弃API。</target>
        </trans-unit>
        <trans-unit id="8b6a49596101ad1c6c0a10180ddfbbd5d2267fc0" translate="yes" xml:space="preserve">
          <source>Node.js options that are allowed are:</source>
          <target state="translated">允许使用的Node.js选项有。</target>
        </trans-unit>
        <trans-unit id="138fea06dce092e1d24f06c81c94c22277dd9c70" translate="yes" xml:space="preserve">
          <source>Node.js processes launched with a custom &lt;code&gt;execPath&lt;/code&gt; will communicate with the parent process using the file descriptor (fd) identified using the environment variable &lt;code&gt;NODE_CHANNEL_FD&lt;/code&gt; on the child process.</source>
          <target state="translated">使用自定义 &lt;code&gt;execPath&lt;/code&gt; 启动的Node.js进程将使用在子进程上使用环境变量 &lt;code&gt;NODE_CHANNEL_FD&lt;/code&gt; 标识的文件描述符（fd）与父进程进行通信。</target>
        </trans-unit>
        <trans-unit id="5196287aca961808313ef47efa5a6a6078aaae9f" translate="yes" xml:space="preserve">
          <source>Node.js supports several mechanisms for propagating and handling errors that occur while an application is running. How these errors are reported and handled depends entirely on the type of &lt;code&gt;Error&lt;/code&gt; and the style of the API that is called.</source>
          <target state="translated">Node.js支持多种机制，用于传播和处理在应用程序运行时发生的错误。如何报告和处理这些错误完全取决于 &lt;code&gt;Error&lt;/code&gt; 的类型和所调用的API的样式。</target>
        </trans-unit>
        <trans-unit id="e3de5308a70d674ab3ba84ce75599d95c724d3f0" translate="yes" xml:space="preserve">
          <source>Node.js supports the following &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a27c18aed9d2957a1195a5def9fedbfaabd920" translate="yes" xml:space="preserve">
          <source>Node.js treats JavaScript code as CommonJS modules by default. Authors can tell Node.js to treat JavaScript code as ECMAScript modules via the &lt;code&gt;.mjs&lt;/code&gt; file extension, the &lt;code&gt;package.json&lt;/code&gt;&lt;a href=&quot;packages#packages_type&quot;&gt;&lt;code&gt;&quot;type&quot;&lt;/code&gt;&lt;/a&gt; field, or the &lt;code&gt;--input-type&lt;/code&gt; flag. See &lt;a href=&quot;packages#packages_determining_module_system&quot;&gt;Modules: Packages&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f6a2adac24b09ba48add96ffd834e0b65b5a81" translate="yes" xml:space="preserve">
          <source>Node.js used to support all GCM authentication tag lengths which are accepted by OpenSSL when calling &lt;a href=&quot;crypto#crypto_decipher_setauthtag_buffer&quot;&gt;&lt;code&gt;decipher.setAuthTag()&lt;/code&gt;&lt;/a&gt;. Beginning with Node.js v11.0.0, only authentication tag lengths of 128, 120, 112, 104, 96, 64, and 32 bits are allowed. Authentication tags of other lengths are invalid per &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt;.</source>
          <target state="translated">Node.js用于支持所有GCM身份验证标签的长度，在调用&lt;a href=&quot;crypto#crypto_decipher_setauthtag_buffer&quot;&gt; &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; &lt;/a&gt;时，OpenSSL会接受这些长度。从Node.js v11.0.0开始，仅允许使用128、120、112、104、96、64和32位的身份验证标签。根据&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt;，其他长度的身份验证标签无效。</target>
        </trans-unit>
        <trans-unit id="2f9b6124a3880fa2afa106c7ef712fc837b2b911" translate="yes" xml:space="preserve">
          <source>Node.js uses a &lt;code&gt;KeyObject&lt;/code&gt; class to represent a symmetric or asymmetric key, and each kind of key exposes different functions. The &lt;a href=&quot;#crypto_crypto_createsecretkey_key&quot;&gt;&lt;code&gt;crypto.createSecretKey()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#crypto_crypto_createpublickey_key&quot;&gt;&lt;code&gt;crypto.createPublicKey()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt;&lt;code&gt;crypto.createPrivateKey()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;KeyObject&lt;/code&gt; instances. &lt;code&gt;KeyObject&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">Node.js使用 &lt;code&gt;KeyObject&lt;/code&gt; 类表示对称或非对称密钥，每种密钥公开不同的功能。所述&lt;a href=&quot;#crypto_crypto_createsecretkey_key&quot;&gt; &lt;code&gt;crypto.createSecretKey()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#crypto_crypto_createpublickey_key&quot;&gt; &lt;code&gt;crypto.createPublicKey()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt; &lt;code&gt;crypto.createPrivateKey()&lt;/code&gt; &lt;/a&gt;方法被用来创建 &lt;code&gt;KeyObject&lt;/code&gt; 实例。不能使用 &lt;code&gt;new&lt;/code&gt; 关键字直接创建 &lt;code&gt;KeyObject&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="38c8c1daba3fd0b1fc631a3c4423fc53da9f7c2d" translate="yes" xml:space="preserve">
          <source>Node.js uses a number of statically linked libraries such as V8, libuv and OpenSSL. All Addons are required to link to V8 and may link to any of the other dependencies as well. Typically, this is as simple as including the appropriate &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; statements (e.g. &lt;code&gt;#include &amp;lt;v8.h&amp;gt;&lt;/code&gt;) and &lt;code&gt;node-gyp&lt;/code&gt; will locate the appropriate headers automatically. However, there are a few caveats to be aware of:</source>
          <target state="translated">Node.js使用许多静态链接的库，例如V8，libuv和OpenSSL。所有附件都必须链接到V8，并且也可以链接到任何其他依赖项。通常，这就像包含适当的 &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; 语句（例如 &lt;code&gt;#include &amp;lt;v8.h&amp;gt;&lt;/code&gt; ）一样简单， &lt;code&gt;node-gyp&lt;/code&gt; gyp将自动定位适当的标头。但是，需要注意以下几点：</target>
        </trans-unit>
        <trans-unit id="33fe961c6b46fc16a4675791acb6d47102a8c09d" translate="yes" xml:space="preserve">
          <source>Node.js uses statically linked libraries such as V8, libuv and OpenSSL. All addons are required to link to V8 and may link to any of the other dependencies as well. Typically, this is as simple as including the appropriate &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; statements (e.g. &lt;code&gt;#include &amp;lt;v8.h&amp;gt;&lt;/code&gt;) and &lt;code&gt;node-gyp&lt;/code&gt; will locate the appropriate headers automatically. However, there are a few caveats to be aware of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62610ad899b4964920eb4169835a333ede0d47ce" translate="yes" xml:space="preserve">
          <source>Node.js uses three kinds of Deprecations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc44a7efe4f28833703418200a1bb5df5098eb3" translate="yes" xml:space="preserve">
          <source>Node.js utilizes three kinds of Deprecations:</source>
          <target state="translated">Node.js利用了三种Deprecations。</target>
        </trans-unit>
        <trans-unit id="a46a838b1cdedce2bf909aec9c2762a50a63df17" translate="yes" xml:space="preserve">
          <source>Node.js was compiled without &lt;code&gt;scrypt&lt;/code&gt; support. Not possible with the official release binaries but can happen with custom builds, including distro builds.</source>
          <target state="translated">Node.js的编译没有 &lt;code&gt;scrypt&lt;/code&gt; 支持。官方发行版二进制文件无法实现，但自定义版本（包括发行版）可能会发生。</target>
        </trans-unit>
        <trans-unit id="2be6c44f29011482418546ee57fd088cf4e02101" translate="yes" xml:space="preserve">
          <source>Node.js was unable to watch for the &lt;code&gt;SIGINT&lt;/code&gt; signal.</source>
          <target state="translated">Node.js无法监视 &lt;code&gt;SIGINT&lt;/code&gt; 信号。</target>
        </trans-unit>
        <trans-unit id="7aaa445f322cc3682bfe7bf5c6b4e24edfb5f0d7" translate="yes" xml:space="preserve">
          <source>Node.js will generate and throw &lt;code&gt;RangeError&lt;/code&gt; instances &lt;em&gt;immediately&lt;/em&gt; as a form of argument validation.</source>
          <target state="translated">Node.js将&lt;em&gt;立即&lt;/em&gt;生成并抛出 &lt;code&gt;RangeError&lt;/code&gt; 实例&lt;em&gt;，&lt;/em&gt;作为参数验证的一种形式。</target>
        </trans-unit>
        <trans-unit id="8a136533538960fd36c0a7d5584874bcb8bdd70d" translate="yes" xml:space="preserve">
          <source>Node.js will generate and throw &lt;code&gt;TypeError&lt;/code&gt; instances &lt;em&gt;immediately&lt;/em&gt; as a form of argument validation.</source>
          <target state="translated">Node.js将&lt;em&gt;立即&lt;/em&gt;生成并抛出 &lt;code&gt;TypeError&lt;/code&gt; 实例&lt;em&gt;，&lt;/em&gt;作为参数验证的一种形式。</target>
        </trans-unit>
        <trans-unit id="86b0b7269fa723a49aa2197764257f8d6198ae0b" translate="yes" xml:space="preserve">
          <source>Node.js will normally exit with a &lt;code&gt;0&lt;/code&gt; status code when no more async operations are pending. The following status codes are used in other cases:</source>
          <target state="translated">当没有其他异步操作挂起时，Node.js通常将以 &lt;code&gt;0&lt;/code&gt; 状态代码退出。在其他情况下，将使用以下状态代码：</target>
        </trans-unit>
        <trans-unit id="6d156462ec2e4a54246399867711ae97a6c34c54" translate="yes" xml:space="preserve">
          <source>Node.js will treat as CommonJS all other forms of input, such as &lt;code&gt;.js&lt;/code&gt; files where the nearest parent &lt;code&gt;package.json&lt;/code&gt; file contains no top-level &lt;code&gt;&quot;type&quot;&lt;/code&gt; field, or string input without the flag &lt;code&gt;--input-type&lt;/code&gt;. This behavior is to preserve backward compatibility. However, now that Node.js supports both CommonJS and ES modules, it is best to be explicit whenever possible. Node.js will treat the following as CommonJS when passed to &lt;code&gt;node&lt;/code&gt; as the initial input, or when referenced by &lt;code&gt;import&lt;/code&gt; statements within ES module code:</source>
          <target state="translated">Node.js将所有其他形式的输入视为CommonJS，例如 &lt;code&gt;.js&lt;/code&gt; 文件，其中最接近的父 &lt;code&gt;package.json&lt;/code&gt; 文件不包含顶级 &lt;code&gt;&quot;type&quot;&lt;/code&gt; 字段，或者不带标志 &lt;code&gt;--input-type&lt;/code&gt; 的字符串输入。此行为是为了保持向后兼容性。但是，既然Node.js同时支持CommonJS和ES模块，那么最好尽可能地做到明确。当传递给 &lt;code&gt;node&lt;/code&gt; 作为初始输入或被ES模块代码中的 &lt;code&gt;import&lt;/code&gt; 语句引用时，Node.js将把以下内容视为CommonJS ：</target>
        </trans-unit>
        <trans-unit id="2745ff23353f08077c9763af60cfd72843015ebb" translate="yes" xml:space="preserve">
          <source>Node.js's debugger client is not a full-featured debugger, but simple step and inspection are possible.</source>
          <target state="translated">Node.js的调试器客户端并不是一个全功能的调试器,但可以进行简单的步骤和检查。</target>
        </trans-unit>
        <trans-unit id="60873216d1e300530ea8a2768f6ff649a8955203" translate="yes" xml:space="preserve">
          <source>Node.js-specific alias for &lt;code&gt;eventTarget.addListener()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79171832c8c5742998fb3ce715335c31c87f30d9" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that adds a &lt;code&gt;once&lt;/code&gt; listener for the given event &lt;code&gt;type&lt;/code&gt;. This is equivalent to calling &lt;code&gt;on&lt;/code&gt; with the &lt;code&gt;once&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45bffbe24e10e4a97eddbf0c7c114da59faf30ad" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that emulates the equivalent &lt;code&gt;EventEmitter&lt;/code&gt; API. The only difference between &lt;code&gt;addListener()&lt;/code&gt; and &lt;code&gt;addEventListener()&lt;/code&gt; is that &lt;code&gt;addListener()&lt;/code&gt; will return a reference to the &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64e97ca9a09285a7f734c2f63dbff7417bcebb7" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that removes the &lt;code&gt;listener&lt;/code&gt; for the given &lt;code&gt;type&lt;/code&gt;. The only difference between &lt;code&gt;removeListener()&lt;/code&gt; and &lt;code&gt;removeEventListener()&lt;/code&gt; is that &lt;code&gt;removeListener()&lt;/code&gt; will return a reference to the &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a3b624b039863a7cfaf372fa5f8e8793d5ecaf" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that returns an array of event &lt;code&gt;type&lt;/code&gt; names for which event listeners are registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982b7a762cfbd11198763ac7b4757540c86749e9" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that returns the number of event listeners registered for the &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057ce1bfc2fde706a1ff2a67329d6b4077df18fa" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class. If &lt;code&gt;type&lt;/code&gt; is specified, removes all registered listeners for &lt;code&gt;type&lt;/code&gt;, otherwise removes all registered listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0906e04d49a9c95bcb1edada2bb82cc8a7ad4c" translate="yes" xml:space="preserve">
          <source>Node.js-speciic alias for &lt;code&gt;eventTarget.removeListener()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1013f374841b5452514d4b8359e7422406574b" translate="yes" xml:space="preserve">
          <source>Non-finite number values (&lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;+Infinity&lt;/code&gt;, or &lt;code&gt;-Infinity&lt;/code&gt;) set the result to zero.</source>
          <target state="translated">非有限数值（ &lt;code&gt;NaN&lt;/code&gt; ， &lt;code&gt;+Infinity&lt;/code&gt; 或 &lt;code&gt;-Infinity&lt;/code&gt; ）会将结果设置为零。</target>
        </trans-unit>
        <trans-unit id="7d5e643747b3ffedc83ffcb3b71cbc3c5585ca03" translate="yes" xml:space="preserve">
          <source>Not all constants will be available on every operating system.</source>
          <target state="translated">并非所有的常量都能在每个操作系统上使用。</target>
        </trans-unit>
        <trans-unit id="67c4d0506a441a717b8988584c29925382c7326c" translate="yes" xml:space="preserve">
          <source>Not applicable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4436debc55754f82e9d430eaa05339b900fd927e" translate="yes" xml:space="preserve">
          <source>Not every constant will be available on every operating system.</source>
          <target state="translated">并非每个常量都能在每个操作系统上使用。</target>
        </trans-unit>
        <trans-unit id="549ab44d98603b37017112009e5442a545e8a373" translate="yes" xml:space="preserve">
          <source>Not exported by the &lt;code&gt;zlib&lt;/code&gt; module. It is documented here because it is the base class of the compressor/decompressor classes.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; 模块未导出。在此进行记录，因为它是压缩器/解压缩器类的基类。</target>
        </trans-unit>
        <trans-unit id="bf19ed98b0dffdc4b322b922e2a0a394c9f67eab" translate="yes" xml:space="preserve">
          <source>Not handling &lt;code&gt;Promise&lt;/code&gt; rejections is deprecated.</source>
          <target state="translated">不处理 &lt;code&gt;Promise&lt;/code&gt; 拒绝已弃用。</target>
        </trans-unit>
        <trans-unit id="c0b39022c2215221063a53f78441f94d3dba109d" translate="yes" xml:space="preserve">
          <source>Not including an integrity is the same as setting the integrity to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f471ec3f86ad87114b1805cf0ff78e30f33eee3" translate="yes" xml:space="preserve">
          <source>Not listening to this event no longer causes the socket to be destroyed if a client sends an Upgrade header.</source>
          <target state="translated">如果客户端发送升级头,不监听该事件不再导致套接字被销毁。</target>
        </trans-unit>
        <trans-unit id="d73f792bf4588a09b4c61304ecd28cf0baf02107" translate="yes" xml:space="preserve">
          <source>Notable differences inside a Worker environment are:</source>
          <target state="translated">在Worker环境里面的显著区别是:</target>
        </trans-unit>
        <trans-unit id="116bc38e0fa5e5ee07a1a94f2fa6f1bd37a22e34" translate="yes" xml:space="preserve">
          <source>Note about UDP datagram size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580765b00e88c3ab1fc90c8c0303dbfa89b6d16c" translate="yes" xml:space="preserve">
          <source>Note it is &lt;em&gt;not&lt;/em&gt; necessary to use &lt;code&gt;napi_make_callback&lt;/code&gt; from within a &lt;code&gt;napi_async_complete_callback&lt;/code&gt;; in that situation the callback's async context has already been set up, so a direct call to &lt;code&gt;napi_call_function&lt;/code&gt; is sufficient and appropriate. Use of the &lt;code&gt;napi_make_callback&lt;/code&gt; function may be required when implementing custom async behavior that does not use &lt;code&gt;napi_create_async_work&lt;/code&gt;.</source>
          <target state="translated">注意，&lt;em&gt;没有&lt;/em&gt;必要在 &lt;code&gt;napi_make_callback&lt;/code&gt; 内部使用 &lt;code&gt;napi_async_complete_callback&lt;/code&gt; ；在那种情况下，回调的异步上下文已经设置好了，因此直接调用 &lt;code&gt;napi_call_function&lt;/code&gt; 就足够了。在使用 &lt;code&gt;napi_make_callback&lt;/code&gt; 功能可以实现在不使用自定义异步行为时，需要 &lt;code&gt;napi_create_async_work&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2819ecc02995f7a6240325d276ffeabbdeecff8" translate="yes" xml:space="preserve">
          <source>Note, &lt;code&gt;blob:&lt;/code&gt; URLs adopt their origin from the path they contain, and so a scope of &lt;code&gt;&quot;blob:https://nodejs.org&quot;&lt;/code&gt; will have no effect since no URL can have an origin of &lt;code&gt;blob:https://nodejs.org&lt;/code&gt;; URLs starting with &lt;code&gt;blob:https://nodejs.org/&lt;/code&gt; will use &lt;code&gt;https://nodejs.org&lt;/code&gt; for its origin and thus &lt;code&gt;https:&lt;/code&gt; for its protocol scope. For opaque origin &lt;code&gt;blob:&lt;/code&gt; URLs they will have &lt;code&gt;blob:&lt;/code&gt; for their protocol scope since they do not adopt origins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e41c1622948c03f6ca8311eb8aef26b223ccf0" translate="yes" xml:space="preserve">
          <source>Note, however, that using &lt;code&gt;--preserve-symlinks&lt;/code&gt; can have other side effects. Specifically, symbolically linked &lt;em&gt;native&lt;/em&gt; modules can fail to load if those are linked from more than one location in the dependency tree (Node.js would see those as two separate modules and would attempt to load the module multiple times, causing an exception to be thrown).</source>
          <target state="translated">但是请注意，使用 &lt;code&gt;--preserve-symlinks&lt;/code&gt; 可能会有其他副作用。具体来说，如果符号链接的&lt;em&gt;本机&lt;/em&gt;模块从依赖关系树中的多个位置链接，则可能无法加载（Node.js会将它们视为两个单独的模块，并尝试多次加载该模块，从而引发异常） ）。</target>
        </trans-unit>
        <trans-unit id="972cb08f7fa7ede61014198194e4bb40a809cbac" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;getSession()&lt;/code&gt; works only for TLSv1.2 and below. For TLSv1.3, applications must use the &lt;a href=&quot;#tls_event_session&quot;&gt;&lt;code&gt;'session'&lt;/code&gt;&lt;/a&gt; event (it also works for TLSv1.2 and below).</source>
          <target state="translated">注意： &lt;code&gt;getSession()&lt;/code&gt; 仅适用于TLSv1.2及以下版本。对于TLSv1.3，应用程序必须使用&lt;a href=&quot;#tls_event_session&quot;&gt; &lt;code&gt;'session'&lt;/code&gt; &lt;/a&gt;事件（它也适用于TLSv1.2及以下版本）。</target>
        </trans-unit>
        <trans-unit id="ecd844f1014ce393ccf5d8fffcaf8b96adac6bf1" translate="yes" xml:space="preserve">
          <source>Note: &lt;em&gt;specifier&lt;/em&gt; is now a bare specifier.</source>
          <target state="translated">注意：&lt;em&gt;说明符&lt;/em&gt;现在是一个简单的说明符。</target>
        </trans-unit>
        <trans-unit id="01f9d22189eec14674a459713bb8e39e51c5a5c9" translate="yes" xml:space="preserve">
          <source>Note: For TLSv1.2 and below, &lt;a href=&quot;#tls_tlssocket_getsession&quot;&gt;&lt;code&gt;tls.TLSSocket.getSession()&lt;/code&gt;&lt;/a&gt; can be called once the handshake is complete. For TLSv1.3, only ticket based resumption is allowed by the protocol, multiple tickets are sent, and the tickets aren't sent until later, after the handshake completes, so it is necessary to wait for the &lt;code&gt;'session'&lt;/code&gt; event to get a resumable session. Applications are recommended to use the &lt;code&gt;'session'&lt;/code&gt; event instead of &lt;code&gt;getSession()&lt;/code&gt; to ensure they will work for all TLS protocol versions. Applications that only expect to get or use 1 session should listen for this event only once:</source>
          <target state="translated">注意：对于TLSv1.2及以下版本，握手完成后即可调用&lt;a href=&quot;#tls_tlssocket_getsession&quot;&gt; &lt;code&gt;tls.TLSSocket.getSession()&lt;/code&gt; &lt;/a&gt;。对于TLSv1.3，协议仅允许基于票证的恢复，发送多个票证，并且直到握手完成后再发送票证，因此必须等待 &lt;code&gt;'session'&lt;/code&gt; 事件以获取可恢复的会话。建议应用程序使用 &lt;code&gt;'session'&lt;/code&gt; 事件而不是 &lt;code&gt;getSession()&lt;/code&gt; 以确保它们适用于所有TLS协议版本。仅希望获得或使用1个会话的应用程序应仅侦听此事件一次：</target>
        </trans-unit>
        <trans-unit id="143d66316a52090c9d94eb1ce24b88eea6b0ee08" translate="yes" xml:space="preserve">
          <source>Note: If the source value of a text-based format (i.e., &lt;code&gt;'json'&lt;/code&gt;, &lt;code&gt;'module'&lt;/code&gt;) is not a string, it is converted to a string using &lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt;&lt;code&gt;util.TextDecoder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8cc0b60938c91b13e1400e17c52a12ff07dd161" translate="yes" xml:space="preserve">
          <source>Note: The format of the output is identical to the output of &lt;code&gt;openssl s_client -trace&lt;/code&gt; or &lt;code&gt;openssl s_server -trace&lt;/code&gt;. While it is produced by OpenSSL's &lt;code&gt;SSL_trace()&lt;/code&gt; function, the format is undocumented, can change without notice, and should not be relied on.</source>
          <target state="translated">注意：输出格式与 &lt;code&gt;openssl s_client -trace&lt;/code&gt; 或 &lt;code&gt;openssl s_server -trace&lt;/code&gt; 的输出相同。尽管它是由OpenSSL的 &lt;code&gt;SSL_trace()&lt;/code&gt; 函数生成的，但该格式未记录在案，可以随时更改，恕不另行通知，并且不应依赖该格式。</target>
        </trans-unit>
        <trans-unit id="eeb03c3f0f36f676cbf5598bceb30b9b907caf42" translate="yes" xml:space="preserve">
          <source>Note: The loaders API is being redesigned. This hook may disappear or its signature may change. Do not rely on the API described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1137c6d126d9539fc06dcec9bc60743ec7916ed7" translate="yes" xml:space="preserve">
          <source>Note: These types all correspond to classes defined in ECMAScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4616f15367371a5e06b48d2440f7200dc5d1e91b" translate="yes" xml:space="preserve">
          <source>Note: this is not a strong encapsulation as any private modules can still be loaded by absolute paths.</source>
          <target state="translated">注意:这不是一个强封装,因为任何私有模块仍然可以通过绝对路径加载。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="a03c6fe1c5a7dfc8aba7cdb4a41e8ccd36e1826f" translate="yes" xml:space="preserve">
          <source>Now, however, passing either &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; will throw a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="2bdc0c2afdfc8111c042201c3e20a922dbf5c7df" translate="yes" xml:space="preserve">
          <source>Number of times &lt;a href=&quot;#stream_writable_uncork&quot;&gt;&lt;code&gt;writable.uncork()&lt;/code&gt;&lt;/a&gt; needs to be called in order to fully uncork the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e915ad9f7438f469d5fcc18ac6ba4e549838fd" translate="yes" xml:space="preserve">
          <source>Numbers which contain a decimal point, such as floating-point numbers or numbers in scientific notation, are not an exception to this rule. Leading numbers up to the decimal point will be set as the URL's port, assuming they are valid:</source>
          <target state="translated">包含小数点的数字,如浮点数或科学符号中的数字,也不例外。小数点以下的前导数字将被设置为 URL 的端口,前提是它们是有效的。</target>
        </trans-unit>
        <trans-unit id="950d326ee993b3c5fd62c84949251f546e884fe5" translate="yes" xml:space="preserve">
          <source>Numeric strings, &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; are now allowed time specifiers.</source>
          <target state="translated">现在可以使用数字字符串， &lt;code&gt;NaN&lt;/code&gt; 和 &lt;code&gt;Infinity&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b569a17c3091df771016c89c44b2ffb4e1607960" translate="yes" xml:space="preserve">
          <source>OCSPRequest event (tls.Server)</source>
          <target state="translated">OCSPRequest事件(tls.Server)</target>
        </trans-unit>
        <trans-unit id="869b3c3e713ad68da924ccf887bfa9fee9bd8b2b" translate="yes" xml:space="preserve">
          <source>OCSPResponse event (tls.TLSSocket)</source>
          <target state="translated">OCSPResponse事件(tls.TLSSocket)</target>
        </trans-unit>
        <trans-unit id="de8aa86286dbb8eb74d2748c7b6d4486d0458203" translate="yes" xml:space="preserve">
          <source>OS</source>
          <target state="translated">OS</target>
        </trans-unit>
        <trans-unit id="bf4c411135eaccffeeffff0459da3c06dede6217" translate="yes" xml:space="preserve">
          <source>OS Constants</source>
          <target state="translated">操作系统常数</target>
        </trans-unit>
        <trans-unit id="6965d55430bc54c35413fd5c8bf55a36f18c649b" translate="yes" xml:space="preserve">
          <source>OS constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9cc4a542ab690808d6be64e5ca5ad4762815a8" translate="yes" xml:space="preserve">
          <source>Object &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddd1661aadc76f58c10dd21eeb8e7deaace4a15" translate="yes" xml:space="preserve">
          <source>Object Creation Functions</source>
          <target state="translated">对象创建功能</target>
        </trans-unit>
        <trans-unit id="802b3a5ff4c325801801b1f33c90e6aeb50581e9" translate="yes" xml:space="preserve">
          <source>Object Lifetime management</source>
          <target state="translated">对象寿命管理</target>
        </trans-unit>
        <trans-unit id="da1a453a1b599c80407bbb5b25d54d19f9155848" translate="yes" xml:space="preserve">
          <source>Object Mode</source>
          <target state="translated">对象模式</target>
        </trans-unit>
        <trans-unit id="0e31dc36041309eb25a82e43f179da4c384a8655" translate="yes" xml:space="preserve">
          <source>Object Mode Duplex Streams</source>
          <target state="translated">对象模式双工流</target>
        </trans-unit>
        <trans-unit id="e00ee9265d488224abef0452c70b1277e5a83f49" translate="yes" xml:space="preserve">
          <source>Object Wrap</source>
          <target state="translated">对象包覆</target>
        </trans-unit>
        <trans-unit id="ed4585f1bf8f3e5d64756e5a2158cd6c89ec5f06" translate="yes" xml:space="preserve">
          <source>Object creation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e782d8ce1f909216afa55f0563a026fe7e818df" translate="yes" xml:space="preserve">
          <source>Object factory</source>
          <target state="translated">对象工厂</target>
        </trans-unit>
        <trans-unit id="ab6016ee032803e49db26c34525dd3ec5b87e864" translate="yes" xml:space="preserve">
          <source>Object lifetime management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f58022f766261caffba5edc95b9a9f6abe4cafe" translate="yes" xml:space="preserve">
          <source>Object mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ec0f1b0142b04e2c99de9fa13eb604badafb51" translate="yes" xml:space="preserve">
          <source>Object mode duplex streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1df3362912f24b36ee95c2e780ae5886f130ba" translate="yes" xml:space="preserve">
          <source>Object wrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d591c73dd9bade5d6e035ec1c272d3d2d914a0" translate="yes" xml:space="preserve">
          <source>Objects assigned to the exports of this instance may allow importers of the module to access information outside the specified &lt;code&gt;context&lt;/code&gt;. Use &lt;code&gt;vm.runInContext()&lt;/code&gt; to create objects in a specific context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241d3fb63dae7cf76601d561abf3a990fe514c68" translate="yes" xml:space="preserve">
          <source>Objects may also define their own &lt;a href=&quot;#util_util_inspect_custom&quot;&gt;&lt;code&gt;[util.inspect.custom](depth, opts)&lt;/code&gt;&lt;/a&gt; function, which &lt;code&gt;util.inspect()&lt;/code&gt; will invoke and use the result of when inspecting the object:</source>
          <target state="translated">对象还可以定义自己的&lt;a href=&quot;#util_util_inspect_custom&quot;&gt; &lt;code&gt;[util.inspect.custom](depth, opts)&lt;/code&gt; &lt;/a&gt;函数， &lt;code&gt;util.inspect()&lt;/code&gt; 将在检查对象时调用并使用的结果：</target>
        </trans-unit>
        <trans-unit id="405e84c6a63356b689521faa0c8b25c5d64dde37" translate="yes" xml:space="preserve">
          <source>Objects returned from &lt;a href=&quot;#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;fs.stat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#fs_fs_fstat_fd_options_callback&quot;&gt;&lt;code&gt;fs.fstat()&lt;/code&gt;&lt;/a&gt; and their synchronous counterparts are of this type. If &lt;code&gt;bigint&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; passed to those methods is true, the numeric values will be &lt;code&gt;bigint&lt;/code&gt; instead of &lt;code&gt;number&lt;/code&gt;, and the object will contain additional nanosecond-precision properties suffixed with &lt;code&gt;Ns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0d2e6c538dec52ec33838e688cc3db3a4ab623" translate="yes" xml:space="preserve">
          <source>Objects returned from &lt;a href=&quot;#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;fs.stat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#fs_fs_fstat_fd_options_callback&quot;&gt;&lt;code&gt;fs.fstat()&lt;/code&gt;&lt;/a&gt; and their synchronous counterparts are of this type. If &lt;code&gt;bigint&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; passed to those methods is true, the numeric values will be &lt;code&gt;bigint&lt;/code&gt; instead of &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">从&lt;a href=&quot;#fs_fs_stat_path_options_callback&quot;&gt; &lt;code&gt;fs.stat()&lt;/code&gt; &lt;/a&gt;，&lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt; &lt;code&gt;fs.lstat()&lt;/code&gt; &lt;/a&gt;和&lt;a href=&quot;#fs_fs_fstat_fd_options_callback&quot;&gt; &lt;code&gt;fs.fstat()&lt;/code&gt; &lt;/a&gt;返回的对象及其同步对象是这种类型的。如果传递给这些方法的 &lt;code&gt;options&lt;/code&gt; &lt;code&gt;bigint&lt;/code&gt; 为true，则数字值为 &lt;code&gt;bigint&lt;/code&gt; 而不是 &lt;code&gt;number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="592e8c13ea9bd4b8af95ba0ada47b20335a6e103" translate="yes" xml:space="preserve">
          <source>Objects with circular references can be used as inputs now.</source>
          <target state="translated">循环引用的对象现在可以作为输入。</target>
        </trans-unit>
        <trans-unit id="a0ea40e2b9bd257d370923337e02a0992196f54f" translate="yes" xml:space="preserve">
          <source>Observe that the &lt;code&gt;then()&lt;/code&gt; callback claims to have executed in the context of the outer scope even though there was an asynchronous hop involved. Also, the &lt;code&gt;triggerAsyncId&lt;/code&gt; value is &lt;code&gt;0&lt;/code&gt;, which means that we are missing context about the resource that caused (triggered) the &lt;code&gt;then()&lt;/code&gt; callback to be executed.</source>
          <target state="translated">可以观察到 &lt;code&gt;then()&lt;/code&gt; 回调声称已在外部作用域的上下文中执行，即使涉及到异步跃点。同样， &lt;code&gt;triggerAsyncId&lt;/code&gt; 的值为 &lt;code&gt;0&lt;/code&gt; ，这意味着我们缺少有关导致（触发）了 &lt;code&gt;then()&lt;/code&gt; 回调执行的资源的上下文。</target>
        </trans-unit>
        <trans-unit id="083bef7791cf9d1baf8a9873f071dfc52b64445d" translate="yes" xml:space="preserve">
          <source>Occasionally, the deprecation of an API may be reversed. In such situations, this document will be updated with information relevant to the decision. However, the deprecation identifier will not be modified.</source>
          <target state="translated">有时,某个API的废弃可能会被撤销。在这种情况下,本文档将根据与该决定相关的信息进行更新。但是,废弃标识符将不会被修改。</target>
        </trans-unit>
        <trans-unit id="598a1ea6bb4b34df4307149358f5d4d90ab41312" translate="yes" xml:space="preserve">
          <source>Occasionally, the deprecation of an API might be reversed. In such situations, this document will be updated with information relevant to the decision. However, the deprecation identifier will not be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba38afb5d72c78a9ff4e1ee1598f9f9be252886d" translate="yes" xml:space="preserve">
          <source>Occurs with multiple attempts to shutdown an HTTP/2 session.</source>
          <target state="translated">多次尝试关闭HTTP/2会话时发生。</target>
        </trans-unit>
        <trans-unit id="10500e54805775e3d661be35724e87f0b1dbc4c9" translate="yes" xml:space="preserve">
          <source>Octal</source>
          <target state="translated">Octal</target>
        </trans-unit>
        <trans-unit id="a48963a917f62904a1e8543a2ead20c099e2eff3" translate="yes" xml:space="preserve">
          <source>Offset and length are optional but both &lt;em&gt;must&lt;/em&gt; be set if either are used. They are supported only when the first argument is a &lt;code&gt;Buffer&lt;/code&gt; or &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">偏移量和长度是可选的，但如果使用两者都&lt;em&gt;必须&lt;/em&gt;设置。仅当第一个参数是 &lt;code&gt;Buffer&lt;/code&gt; 或 &lt;code&gt;Uint8Array&lt;/code&gt; 时才支持它们。</target>
        </trans-unit>
        <trans-unit id="8269c5428afc6a034f766b68b360ac4c01e96403" translate="yes" xml:space="preserve">
          <source>Offset and length are optional but both &lt;em&gt;must&lt;/em&gt; be set if either are used. They are supported only when the first argument is a &lt;code&gt;Buffer&lt;/code&gt;, a &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a4dc432f9794752f6ad30e244e3a8e720cdc69" translate="yes" xml:space="preserve">
          <source>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers (like Internet Explorer 6) cannot complete the handshaking process with the default configuration. If these clients &lt;em&gt;must&lt;/em&gt; be supported, the &lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS&quot;&gt;TLS recommendations&lt;/a&gt; may offer a compatible cipher suite. For more details on the format, see the OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;cipher list format&lt;/a&gt; documentation.</source>
          <target state="translated">依靠不安全且不推荐使用的RC4或DES基于密码的旧客户端（例如Internet Explorer 6）无法使用默认配置来完成握手过程。如果&lt;em&gt;必须&lt;/em&gt;支持这些客户端，则&lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS&quot;&gt;TLS建议&lt;/a&gt;可以提供兼容的密码套件。有关格式的更多详细信息，请参见OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;密码列表格式&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="39846a8f31378460759ab91e423751587cbcd672" translate="yes" xml:space="preserve">
          <source>Omitting the callback function on asynchronous fs functions is deprecated and may result in an error being thrown in the future.</source>
          <target state="translated">在异步fs函数上省略回调函数是不适用的,可能会导致将来抛出一个错误。</target>
        </trans-unit>
        <trans-unit id="1e37ed6c1806cbc047e27697c95f4a9f5fa450df" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures, this value currently is 2&lt;sup&gt;30&lt;/sup&gt; - 1 (~1GB). On 64-bit architectures, this value currently is 2&lt;sup&gt;31&lt;/sup&gt; - 1 (~2GB).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0e0b0451c6ef174ec5a71852c7111df84bc0bf" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures, this value is &lt;code&gt;(2^30)-1&lt;/code&gt; (~1GB). On 64-bit architectures, this value is &lt;code&gt;(2^31)-1&lt;/code&gt; (~2GB).</source>
          <target state="translated">在32位体系结构上，此值为 &lt;code&gt;(2^30)-1&lt;/code&gt; （〜1GB）。在64位体系结构上，此值为 &lt;code&gt;(2^31)-1&lt;/code&gt; （〜2GB）。</target>
        </trans-unit>
        <trans-unit id="cece5a81c61c5200f22063c4263b25c9ea0fa07a" translate="yes" xml:space="preserve">
          <source>On Aix systems, this feature depends on &lt;a href=&quot;https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&quot;&gt;&lt;code&gt;AHAFS&lt;/code&gt;&lt;/a&gt;, which must be enabled.</source>
          <target state="translated">在Aix系统上，此功能取决于&lt;a href=&quot;https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&quot;&gt; &lt;code&gt;AHAFS&lt;/code&gt; &lt;/a&gt;，必须启用它。</target>
        </trans-unit>
        <trans-unit id="3287e458f7d140ce7af1d1893ae19d42b58cb150" translate="yes" xml:space="preserve">
          <source>On BSD systems, this uses &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt;&lt;code&gt;kqueue(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在BSD系统上，这使用&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt; &lt;code&gt;kqueue(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8caac710974bc62eceaa895a0fa812289ad69d07" translate="yes" xml:space="preserve">
          <source>On IBM i systems, this feature is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cee5b68c9afac982d46719c80955c745508f033" translate="yes" xml:space="preserve">
          <source>On IPv4, if &lt;code&gt;multicastInterface&lt;/code&gt; is a valid address but does not match any interface, or if the address does not match the family then a &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt;&lt;code&gt;System Error&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;EADDRNOTAVAIL&lt;/code&gt; or &lt;code&gt;EPROTONOSUP&lt;/code&gt; is thrown.</source>
          <target state="translated">在IPv4上，如果 &lt;code&gt;multicastInterface&lt;/code&gt; 是有效地址但与任何接口都不匹配，或者如果该地址与系列不匹配，则会引发&lt;a href=&quot;errors#errors_class_systemerror&quot;&gt; &lt;code&gt;System Error&lt;/code&gt; &lt;/a&gt;例如 &lt;code&gt;EADDRNOTAVAIL&lt;/code&gt; 或 &lt;code&gt;EPROTONOSUP&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d73abdde568049652b60fdd5aaa144ebebd0fc9" translate="yes" xml:space="preserve">
          <source>On IPv6, most errors with specifying or omitting scope will result in the socket continuing to use (or returning to) the system's default interface selection.</source>
          <target state="translated">在IPv6上,大多数指定或省略作用域的错误将导致套接字继续使用(或返回)系统的默认接口选择。</target>
        </trans-unit>
        <trans-unit id="c0b541a8346341860cd7703b98a4352d06a66130" translate="yes" xml:space="preserve">
          <source>On Linux and macOS systems, &lt;code&gt;fs.watch()&lt;/code&gt; resolves the path to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Inode&quot;&gt;inode&lt;/a&gt; and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the &lt;em&gt;original&lt;/em&gt; inode. Events for the new inode will not be emitted. This is expected behavior.</source>
          <target state="translated">在Linux和macOS系统上， &lt;code&gt;fs.watch()&lt;/code&gt; 解析到&lt;a href=&quot;https://en.wikipedia.org/wiki/Inode&quot;&gt;inode&lt;/a&gt;的路径并监视inode。如果删除并重新创建了监视的路径，则会为其分配一个新的索引节点。该监视将发出一个删除事件，但将继续监视&lt;em&gt;原始&lt;/em&gt; inode。新inode的事件将不会发出。这是预期的行为。</target>
        </trans-unit>
        <trans-unit id="08f31ae143ca922e16ce486612875e1b465fba38" translate="yes" xml:space="preserve">
          <source>On Linux systems, this uses &lt;a href=&quot;http://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt;&lt;code&gt;inotify(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在Linux系统上，这使用&lt;a href=&quot;http://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt; &lt;code&gt;inotify(7)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d99fa13cd94d439565091aa184b49a5f8b37dff1" translate="yes" xml:space="preserve">
          <source>On Linux systems, this uses &lt;a href=&quot;https://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt;&lt;code&gt;inotify(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f183efec4feb7bfa6fc109ebc4023975000344" translate="yes" xml:space="preserve">
          <source>On Linux, child processes of child processes will not be terminated when attempting to kill their parent. This is likely to happen when running a new process in a shell or with the use of the &lt;code&gt;shell&lt;/code&gt; option of &lt;code&gt;ChildProcess&lt;/code&gt;:</source>
          <target state="translated">在Linux上，尝试杀死其父进程时，子进程的子进程不会终止。在shell中运行新进程或使用 &lt;code&gt;ChildProcess&lt;/code&gt; 的 &lt;code&gt;shell&lt;/code&gt; 选项时，可能会发生这种情况：</target>
        </trans-unit>
        <trans-unit id="7882f8e43f0f64c5514b81f5cfa8dcb3ff288045" translate="yes" xml:space="preserve">
          <source>On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</source>
          <target state="translated">在Linux上,当文件以追加模式打开时,位置写法无法工作。内核忽略位置参数,总是将数据追加到文件的末尾。</target>
        </trans-unit>
        <trans-unit id="58c85a79493b7491ac9088c933d8b858c448602a" translate="yes" xml:space="preserve">
          <source>On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</source>
          <target state="translated">在Linux上,当文件以追加模式打开时,位置写法是行不通的。内核忽略位置参数,总是将数据追加到文件的末尾。</target>
        </trans-unit>
        <trans-unit id="9554e400419b2712320ba3378dbdb33b6ba3a586" translate="yes" xml:space="preserve">
          <source>On Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on &lt;code&gt;/proc&lt;/code&gt; in order for this function to work. Glibc does not have this restriction.</source>
          <target state="translated">在Linux上，将Node.js与musl libc链接时，必须将procfs文件系统挂载在 &lt;code&gt;/proc&lt;/code&gt; 上，此功能才能起作用。Glibc没有此限制。</target>
        </trans-unit>
        <trans-unit id="46927efa147a220d19018a44c19bb0a81a2795b4" translate="yes" xml:space="preserve">
          <source>On POSIX and Windows:</source>
          <target state="translated">在POSIX和Windows上。</target>
        </trans-unit>
        <trans-unit id="51d7bab8caccee4037b352d1dd8b48e36fb94ee8" translate="yes" xml:space="preserve">
          <source>On POSIX systems, for every process, the kernel maintains a table of currently open files and resources. Each open file is assigned a simple numeric identifier called a &lt;em&gt;file descriptor&lt;/em&gt;. At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node.js abstracts away the specific differences between operating systems and assigns all open files a numeric file descriptor.</source>
          <target state="translated">在POSIX系统上，对于每个进程，内核都会维护一个当前打开的文件和资源的表。每个打开的文件都分配有一个简单的数字标识符，称为&lt;em&gt;文件描述符&lt;/em&gt;。在系统级别，所有文件系统操作都使用这些文件描述符来标识和跟踪每个特定文件。Windows系统使用不同但概念上类似的机制来跟踪资源。为了简化用户操作，Node.js提取了操作系统之间的特定差异，并为所有打开的文件分配了数字文件描述符。</target>
        </trans-unit>
        <trans-unit id="fc406a1e7cf53219ab80c07c59e5aaa1d8a7ae6a" translate="yes" xml:space="preserve">
          <source>On POSIX systems, the operating system release is determined by calling &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. On Windows, &lt;code&gt;GetVersionExW()&lt;/code&gt; is used. Please see &lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https://en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt; for more information.</source>
          <target state="translated">在POSIX系统上，操作系统版本是通过调用&lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt; &lt;code&gt;uname(3)&lt;/code&gt; &lt;/a&gt;来确定的。在Windows上，使用 &lt;code&gt;GetVersionExW()&lt;/code&gt; 。有关更多信息，请参见&lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https://en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="529835cf3a3fa32581d69a9d32689b9ecaa309fc" translate="yes" xml:space="preserve">
          <source>On POSIX systems, the operating system release is determined by calling &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. On Windows, &lt;code&gt;GetVersionExW()&lt;/code&gt; is used. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https://en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a3b30280dab2fdf275c399eb32f1ec5ace872a" translate="yes" xml:space="preserve">
          <source>On POSIX systems, the operating system release is determined by calling &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. On Windows, &lt;code&gt;RtlGetVersion()&lt;/code&gt; is used, and if it is not available, &lt;code&gt;GetVersionExW()&lt;/code&gt; will be used. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https://en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b0e6a082c9e5097d3e7d84e1d93e40884bd8f2" translate="yes" xml:space="preserve">
          <source>On POSIX, it uses the &lt;code&gt;$HOME&lt;/code&gt; environment variable if defined. Otherwise it uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID&quot;&gt;effective UID&lt;/a&gt; to look up the user's home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43964d44f0ac16e56226d71c33bedb3c5fe5eddc" translate="yes" xml:space="preserve">
          <source>On POSIX:</source>
          <target state="translated">关于POSIX:</target>
        </trans-unit>
        <trans-unit id="fbb774d38621fd75eb708c21854f712a9058284b" translate="yes" xml:space="preserve">
          <source>On SunOS systems (including Solaris and SmartOS), this uses &lt;a href=&quot;http://illumos.org/man/port_create&quot;&gt;&lt;code&gt;event ports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在SunOS系统（包括Solaris和SmartOS）上，它使用&lt;a href=&quot;http://illumos.org/man/port_create&quot;&gt; &lt;code&gt;event ports&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d2249ac9863c008934bf32cf468a1af5268e9ec5" translate="yes" xml:space="preserve">
          <source>On SunOS systems (including Solaris and SmartOS), this uses &lt;a href=&quot;https://illumos.org/man/port_create&quot;&gt;&lt;code&gt;event ports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df56f9f559c9d44e41081b83b633aad4f3fae33d" translate="yes" xml:space="preserve">
          <source>On Unix, the local domain is also known as the Unix domain. The path is a filesystem pathname. It gets truncated to &lt;code&gt;sizeof(sockaddr_un.sun_path) - 1&lt;/code&gt;, which varies on different operating system between 91 and 107 bytes. The typical values are 107 on Linux and 103 on macOS. The path is subject to the same naming conventions and permissions checks as would be done on file creation. If the Unix domain socket (that is visible as a file system path) is created and used in conjunction with one of Node.js' API abstractions such as &lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt;&lt;code&gt;net.createServer()&lt;/code&gt;&lt;/a&gt;, it will be unlinked as part of &lt;a href=&quot;#net_server_close_callback&quot;&gt;&lt;code&gt;server.close()&lt;/code&gt;&lt;/a&gt;. On the other hand, if it is created and used outside of these abstractions, the user will need to manually remove it. The same applies when the path was created by a Node.js API but the program crashes abruptly. In short, a Unix domain socket once successfully created will be visible in the filesystem, and will persist until unlinked.</source>
          <target state="translated">在Unix上，本地域也称为Unix域。该路径是文件系统路径名。它被截断为 &lt;code&gt;sizeof(sockaddr_un.sun_path) - 1&lt;/code&gt; ，该值在不同的操作系统上介于91和107个字节之间。在Linux上，典型值为107；在macOS上，典型值为103。该路径应遵循与文件创建时相同的命名约定和权限检查。如果创建了Unix域套接字（在文件系统路径中可见），并与Node.js的API抽象&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt; &lt;code&gt;net.createServer()&lt;/code&gt; &lt;/a&gt;例如net.createServer（））结合使用，则它将作为&lt;a href=&quot;#net_server_close_callback&quot;&gt; &lt;code&gt;server.close()&lt;/code&gt; 的&lt;/a&gt;一部分取消链接。。另一方面，如果在这些抽象之外创建和使用它，则用户将需要手动将其删除。当路径是由Node.js API创建的，但程序突然崩溃时，情况也是如此。简而言之，一旦成功创建了Unix域套接字，它将在文件系统中可见，并且将持续存在直到取消链接。</target>
        </trans-unit>
        <trans-unit id="cd01d76d0a5be36ebb3d8172b05f7ed5b8cfd655" translate="yes" xml:space="preserve">
          <source>On Unix, the local domain is also known as the Unix domain. The path is a filesystem pathname. It gets truncated to an OS-dependent length of &lt;code&gt;sizeof(sockaddr_un.sun_path) - 1&lt;/code&gt;. Typical values are 107 bytes on Linux and 103 bytes on macOS. If a Node.js API abstraction creates the Unix domain socket, it will unlink the Unix domain socket as well. For example, &lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt;&lt;code&gt;net.createServer()&lt;/code&gt;&lt;/a&gt; may create a Unix domain socket and &lt;a href=&quot;#net_server_close_callback&quot;&gt;&lt;code&gt;server.close()&lt;/code&gt;&lt;/a&gt; will unlink it. But if a user creates the Unix domain socket outside of these abstractions, the user will need to remove it. The same applies when a Node.js API creates a Unix domain socket but the program then crashes. In short, a Unix domain socket will be visible in the filesystem and will persist until unlinked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3972efd510cd3bdc92bf875a4f0a2ead952896ec" translate="yes" xml:space="preserve">
          <source>On Unix-like operating systems, the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; method performs memory operations synchronously before decoupling the event loop from the child. Applications with a large memory footprint may find frequent &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; calls to be a bottleneck. For more information, see &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=7381&quot;&gt;V8 issue 7381&lt;/a&gt;.</source>
          <target state="translated">在类似Unix的操作系统上，&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;方法在将事件循环与子循环解耦之前，会同步执行内存操作。占用大量内存的应用程序可能会发现频繁的&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;调用成为瓶颈。有关更多信息，请参见&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=7381&quot;&gt;V8问题7381&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="13a6509493c52e58db249370cc4c70c1b95c3182" translate="yes" xml:space="preserve">
          <source>On Windows Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example, &lt;code&gt;path.resolve('C:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;path.resolve('C:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cccd5ed6fa224a3e49b57994f042004b58a3d24" translate="yes" xml:space="preserve">
          <source>On Windows Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example, &lt;code&gt;path.resolve('c:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;path.resolve('c:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="translated">在Windows上，Node.js遵循每个驱动器工作目录的概念。当使用没有反斜杠的驱动路径时，可以观察到此行为。例如， &lt;code&gt;path.resolve('c:\\')&lt;/code&gt; 可能返回与 &lt;code&gt;path.resolve('c:')&lt;/code&gt; 不同的结果。有关更多信息，请参见此&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;MSDN页面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="44da2b295d7da47cf09267ff3645f95eea8d9b81" translate="yes" xml:space="preserve">
          <source>On Windows operating systems, environment variables are case-insensitive.</source>
          <target state="translated">在Windows操作系统中,环境变量是不区分大小写的。</target>
        </trans-unit>
        <trans-unit id="9ea919f697c12d8bddae320cb521d2942ea420cb" translate="yes" xml:space="preserve">
          <source>On Windows setting priority to &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; requires elevated user, otherwise the set priority will be silently reduced to &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;.</source>
          <target state="translated">在Windows上，将优先级设置为 &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; 需要提升用户权限，否则，设置的优先级将自动降低为 &lt;code&gt;PRIORITY_HIGH&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ec6383b7c3b09150b80d42778d5cc7a98c50e48" translate="yes" xml:space="preserve">
          <source>On Windows systems only, returns an equivalent &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#namespaces&quot;&gt;namespace-prefixed path&lt;/a&gt; for the given &lt;code&gt;path&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is not a string, &lt;code&gt;path&lt;/code&gt; will be returned without modifications.</source>
          <target state="translated">仅在Windows系统上，为给定 &lt;code&gt;path&lt;/code&gt; 返回等效的&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#namespaces&quot;&gt;名称空间前缀&lt;/a&gt;路径。如果 &lt;code&gt;path&lt;/code&gt; 不是字符串，则将返回 &lt;code&gt;path&lt;/code&gt; 而无需修改。</target>
        </trans-unit>
        <trans-unit id="9768705b87b168aec5ab1fa9f7b54014d3f95ac4" translate="yes" xml:space="preserve">
          <source>On Windows systems, this feature depends on &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-readdirectorychangesw&quot;&gt;&lt;code&gt;ReadDirectoryChangesW&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">在Windows系统上，此功能取决于&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-readdirectorychangesw&quot;&gt; &lt;code&gt;ReadDirectoryChangesW&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9123970462a9a43d3561651e7ada1125be2a24b6" translate="yes" xml:space="preserve">
          <source>On Windows the error number provided by the system will be normalized by libuv.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df2880a42d4864e454ff5c30b2f005eea801949" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;NODE_PATH&lt;/code&gt; is delimited by semicolons (&lt;code&gt;;&lt;/code&gt;) instead of colons.</source>
          <target state="translated">在Windows上， &lt;code&gt;NODE_PATH&lt;/code&gt; 用分号（ &lt;code&gt;;&lt;/code&gt; ）而不是冒号分隔。</target>
        </trans-unit>
        <trans-unit id="5931a3f0a8409d7489021967eca3c561a80a89c9" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;file:&lt;/code&gt; URLs having encoded backslash will result in a throw:</source>
          <target state="translated">在Windows上， &lt;code&gt;file:&lt;/code&gt; 具有反斜杠编码的URL将导致抛出：</target>
        </trans-unit>
        <trans-unit id="5dfd6792c90679bed7685f41f16795e616150055" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;file:&lt;/code&gt; URLs with a host name convert to UNC paths, while &lt;code&gt;file:&lt;/code&gt; URLs with drive letters convert to local absolute paths. &lt;code&gt;file:&lt;/code&gt; URLs without a host name nor a drive letter will result in a throw:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91506a2d47b419ea0ee01cc61a92dad8cc27411b" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;file:&lt;/code&gt; URLs with a hostname convert to UNC paths, while &lt;code&gt;file:&lt;/code&gt; URLs with drive letters convert to local absolute paths. &lt;code&gt;file:&lt;/code&gt; URLs without a hostname nor a drive letter will result in a throw:</source>
          <target state="translated">在Windows上， &lt;code&gt;file:&lt;/code&gt; 具有主机名的URL转换为UNC路径，而 &lt;code&gt;file:&lt;/code&gt; 具有驱动器号的URL转换为本地的绝对路径。 &lt;code&gt;file:&lt;/code&gt; 没有主机名或驱动器号的URL将导致抛出：</target>
        </trans-unit>
        <trans-unit id="a8a07e8954ce58294b7c7861b0efb21b71fd0b43" translate="yes" xml:space="preserve">
          <source>On Windows, Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example &lt;code&gt;fs.readdirSync('C:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;fs.readdirSync('C:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb13f48dbe09dfcc8c8afd1a18188c31d89c540d" translate="yes" xml:space="preserve">
          <source>On Windows, Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example &lt;code&gt;fs.readdirSync('c:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;fs.readdirSync('c:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="translated">在Windows上，Node.js遵循每个驱动器工作目录的概念。当使用没有反斜杠的驱动路径时，可以观察到此行为。例如， &lt;code&gt;fs.readdirSync('c:\\')&lt;/code&gt; 可能返回与 &lt;code&gt;fs.readdirSync('c:')&lt;/code&gt; 不同的结果。有关更多信息，请参见此&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;MSDN页面&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ebe6267af9150e34384ccfb932409adc54221278" translate="yes" xml:space="preserve">
          <source>On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory. The &lt;code&gt;fs.access()&lt;/code&gt; function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.</source>
          <target state="translated">在Windows上，目录上的访问控制策略（ACL）可能会限制对文件或目录的访问。该 &lt;code&gt;fs.access()&lt;/code&gt; 函数，但是，不检查ACL，因此可能会报告的路径是可访问的，即使将ACL从读取或写入它限制用户。</target>
        </trans-unit>
        <trans-unit id="aff139e0769d280257d0d48cf82151703507a29c" translate="yes" xml:space="preserve">
          <source>On Windows, both the forward slash (&lt;code&gt;/&lt;/code&gt;) and backward slash (&lt;code&gt;\&lt;/code&gt;) are accepted as path segment separators; however, the &lt;code&gt;path&lt;/code&gt; methods only add backward slashes (&lt;code&gt;\&lt;/code&gt;).</source>
          <target state="translated">在Windows上，正斜杠（ &lt;code&gt;/&lt;/code&gt; ）和反斜杠（ &lt;code&gt;\&lt;/code&gt; ）均被接受为路径段分隔符。但是， &lt;code&gt;path&lt;/code&gt; 方法仅添加反斜杠（ &lt;code&gt;\&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1e4b11f76bee6dae9b72dd20bcc56d6c47b35cfc" translate="yes" xml:space="preserve">
          <source>On Windows, environment variables are case-insensitive. Node.js lexicographically sorts the &lt;code&gt;env&lt;/code&gt; keys and uses the first one that case-insensitively matches. Only first (in lexicographic order) entry will be passed to the subprocess. This might lead to issues on Windows when passing objects to the &lt;code&gt;env&lt;/code&gt; option that have multiple variants of the same key, such as &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;Path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e941fdda19df2837a224780f4308d95357b323" translate="yes" xml:space="preserve">
          <source>On Windows, if the file descriptor is connected to the console (e.g. &lt;code&gt;fd == 1&lt;/code&gt; or &lt;code&gt;stdout&lt;/code&gt;) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the &lt;code&gt;chcp 65001&lt;/code&gt; command. See the &lt;a href=&quot;https://ss64.com/nt/chcp.html&quot;&gt;chcp&lt;/a&gt; docs for more details.</source>
          <target state="translated">在Windows上，如果文件描述符连接到控制台（例如 &lt;code&gt;fd == 1&lt;/code&gt; 或 &lt;code&gt;stdout&lt;/code&gt; ），则无论使用哪种编码，默认情况下都将无法正确呈现包含非ASCII字符的字符串。通过使用 &lt;code&gt;chcp 65001&lt;/code&gt; 命令更改活动代码页，可以将控制台配置为正确呈现UTF-8 。有关更多详细信息，请参见&lt;a href=&quot;https://ss64.com/nt/chcp.html&quot;&gt;chcp&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="ac67ee10708396162b94cc66d589c1b59dc10f64" translate="yes" xml:space="preserve">
          <source>On Windows, it is not yet possible to set up a named pipe server in a worker.</source>
          <target state="translated">在Windows上,还不能在Worker中设置命名管道服务器。</target>
        </trans-unit>
        <trans-unit id="eec5600fe598ba09a7321eb984ae609eb585b3eb" translate="yes" xml:space="preserve">
          <source>On Windows, it uses the &lt;code&gt;USERPROFILE&lt;/code&gt; environment variable if defined. Otherwise it uses the path to the profile directory of the current user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f584f58bf19995481842b619fd8a13edfd866dd" translate="yes" xml:space="preserve">
          <source>On Windows, no events will be emitted if the watched directory is moved or renamed. An &lt;code&gt;EPERM&lt;/code&gt; error is reported when the watched directory is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a20253c7c4edfcb2e4f480c38f30c92cd1f24b4" translate="yes" xml:space="preserve">
          <source>On Windows, opening an existing hidden file using the &lt;code&gt;'w'&lt;/code&gt; flag (either through &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; or &lt;code&gt;fsPromises.open()&lt;/code&gt;) will fail with &lt;code&gt;EPERM&lt;/code&gt;. Existing hidden files can be opened for writing with the &lt;code&gt;'r+'&lt;/code&gt; flag.</source>
          <target state="translated">在Windows上，使用 &lt;code&gt;'w'&lt;/code&gt; 标志（通过 &lt;code&gt;fs.open()&lt;/code&gt; 或 &lt;code&gt;fs.writeFile()&lt;/code&gt; 或 &lt;code&gt;fsPromises.open()&lt;/code&gt; ）打开现有的隐藏文件将因 &lt;code&gt;EPERM&lt;/code&gt; 失败。可以使用 &lt;code&gt;'r+'&lt;/code&gt; 标志打开现有的隐藏文件进行写入。</target>
        </trans-unit>
        <trans-unit id="01c3c7ea68df8c4d84bf0458c22f4d8178e9c209" translate="yes" xml:space="preserve">
          <source>On Windows, setting &lt;code&gt;options.detached&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; makes it possible for the child process to continue running after the parent exits. The child will have its own console window. Once enabled for a child process, it cannot be disabled.</source>
          <target state="translated">在Windows上，将 &lt;code&gt;options.detached&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 可使子进程在父进程退出后继续运行。该孩子将拥有自己的控制台窗口。为子进程启用后，将无法禁用它。</target>
        </trans-unit>
        <trans-unit id="8dc310772d1feb0f0873c31779150a0f045c973f" translate="yes" xml:space="preserve">
          <source>On Windows, setting priority to &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; requires elevated user privileges. Otherwise the set priority will be silently reduced to &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec484a036adf383f0cf83afa7944fb446a84f8f" translate="yes" xml:space="preserve">
          <source>On Windows, the leading slashes for UNC paths are now included in the return value.</source>
          <target state="translated">在Windows上,UNC路径的前导斜线现在包括在返回值中。</target>
        </trans-unit>
        <trans-unit id="5ef45d44679240b74995b77a40348470a3214c30" translate="yes" xml:space="preserve">
          <source>On Windows, the local domain is implemented using a named pipe. The path &lt;em&gt;must&lt;/em&gt; refer to an entry in &lt;code&gt;\\?\pipe\&lt;/code&gt; or &lt;code&gt;\\.\pipe\&lt;/code&gt;. Any characters are permitted, but the latter may do some processing of pipe names, such as resolving &lt;code&gt;..&lt;/code&gt; sequences. Despite how it might look, the pipe namespace is flat. Pipes will &lt;em&gt;not persist&lt;/em&gt;. They are removed when the last reference to them is closed. Unlike Unix domain sockets, Windows will close and remove the pipe when the owning process exits.</source>
          <target state="translated">在Windows上，本地域是使用命名管道实现的。该路径&lt;em&gt;必须&lt;/em&gt;引用 &lt;code&gt;\\?\pipe\&lt;/code&gt; 或 &lt;code&gt;\\.\pipe\&lt;/code&gt; 的条目。允许使用任何字符，但是后者可以对管道名称进行某些处理，例如解析 &lt;code&gt;..&lt;/code&gt; 序列。不管看起来如何，管道名称空间都是扁平的。管道将&lt;em&gt;不会持久&lt;/em&gt;。当最后一个引用关闭时，它们将被删除。与Unix域套接字不同，Windows将在拥有进程退出时关闭并删除管道。</target>
        </trans-unit>
        <trans-unit id="b4d884e9df62086a09c3c39332a23060c917a2fd" translate="yes" xml:space="preserve">
          <source>On Windows, this is a &lt;code&gt;';'&lt;/code&gt;-separated list instead.</source>
          <target state="translated">在Windows上，这是一个 &lt;code&gt;';'&lt;/code&gt; -分隔列表。</target>
        </trans-unit>
        <trans-unit id="126249b93389124fc90335a9d8ca99dd0a8df116" translate="yes" xml:space="preserve">
          <source>On Windows, using &lt;code&gt;cmd.exe&lt;/code&gt; a single quote will not work correctly because it only recognizes double &lt;code&gt;&quot;&lt;/code&gt; for quoting. In Powershell or Git bash, both &lt;code&gt;'&lt;/code&gt; and &lt;code&gt;&quot;&lt;/code&gt; are usable.</source>
          <target state="translated">在Windows中，使用 &lt;code&gt;cmd.exe&lt;/code&gt; 的一个单引号将无法正常工作，因为它只能识别双 &lt;code&gt;&quot;&lt;/code&gt; 的报价。在PowerShell中或Git的bash中，无论是 &lt;code&gt;'&lt;/code&gt; 和 &lt;code&gt;&quot;&lt;/code&gt; 是可用的。</target>
        </trans-unit>
        <trans-unit id="d1aa8a0561e5d494303a1665e8c1c1ffaec18bdf" translate="yes" xml:space="preserve">
          <source>On Windows, using &lt;code&gt;fs.mkdir()&lt;/code&gt; on the root directory even with recursion will result in an error:</source>
          <target state="translated">在Windows上，即使在递归的情况下在根目录上使用 &lt;code&gt;fs.mkdir()&lt;/code&gt; 也会导致错误：</target>
        </trans-unit>
        <trans-unit id="95a625c5b6c3cb8c2b26fa2d6baf9cb114baf0b1" translate="yes" xml:space="preserve">
          <source>On Windows, where scope format uses an interface number:</source>
          <target state="translated">在Windows上,范围格式使用接口号。</target>
        </trans-unit>
        <trans-unit id="55b56364276b5f7e47e7f031287b139fc5b947d5" translate="yes" xml:space="preserve">
          <source>On Windows:</source>
          <target state="translated">在Windows上。</target>
        </trans-unit>
        <trans-unit id="b657671d262ccf19050a75fb6bc55e7a42041cd0" translate="yes" xml:space="preserve">
          <source>On a machine with 2GB of memory, consider setting this to 1536 (1.5GB) to leave some memory for other uses and avoid swapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b487baf058a8e6d5b2a94e0bf8ab5ae4ec8d476" translate="yes" xml:space="preserve">
          <source>On all other platforms, &lt;code&gt;file:&lt;/code&gt; URLs with a host name are unsupported and will result in a throw:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5f22e0dff9bf222d72376b8ec44283751a3201" translate="yes" xml:space="preserve">
          <source>On all other platforms, &lt;code&gt;file:&lt;/code&gt; URLs with a hostname are unsupported and will result in a throw:</source>
          <target state="translated">在所有其他平台上，不支持带有主机名的 &lt;code&gt;file:&lt;/code&gt; URL，这将导致抛出：</target>
        </trans-unit>
        <trans-unit id="358e1630770bd86b6eaadca9e6e64f99e4bb79cd" translate="yes" xml:space="preserve">
          <source>On an error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code.</source>
          <target state="translated">对于错误， &lt;code&gt;err&lt;/code&gt; 是一个&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;对象，其中 &lt;code&gt;err.code&lt;/code&gt; 是错误代码。</target>
        </trans-unit>
        <trans-unit id="002bfab7979fd23e069b0486d57556dd50036776" translate="yes" xml:space="preserve">
          <source>On completion, &lt;code&gt;callback&lt;/code&gt; will be called with &lt;code&gt;err&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;publicKey&lt;/code&gt; / &lt;code&gt;privateKey&lt;/code&gt; representing the generated key pair.</source>
          <target state="translated">完成后，将在 &lt;code&gt;err&lt;/code&gt; 设置为 &lt;code&gt;undefined&lt;/code&gt; 且表示生成的密钥对的 &lt;code&gt;publicKey&lt;/code&gt; / &lt;code&gt;privateKey&lt;/code&gt; 的情况下调用 &lt;code&gt;callback&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7886649da2b50ecb04b5356e20760a1e5cb6366c" translate="yes" xml:space="preserve">
          <source>On error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is one of the &lt;a href=&quot;#dns_error_codes&quot;&gt;DNS error codes&lt;/a&gt;.</source>
          <target state="translated">出现错误时， &lt;code&gt;err&lt;/code&gt; 是一个&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;对象，其中 &lt;code&gt;err.code&lt;/code&gt; 是&lt;a href=&quot;#dns_error_codes&quot;&gt;DNS错误代码之一&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1749539bce676fcc0aa4550969b6944cf6b4d32" translate="yes" xml:space="preserve">
          <source>On error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the host name does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944278cb905faca8676573641ea322dcf7de9025" translate="yes" xml:space="preserve">
          <source>On error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="translated">出现错误时， &lt;code&gt;err&lt;/code&gt; 是一个&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;对象，其中 &lt;code&gt;err.code&lt;/code&gt; 是错误代码。请记住，不仅当主机名不存在时，而且在以其他方式（例如，没有可用的文件描述符）查找失败时， &lt;code&gt;err.code&lt;/code&gt; 都将设置为 &lt;code&gt;'ENOTFOUND'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28da3a89db66c1e49e35684df5651bd41326f739" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is one of the &lt;a href=&quot;#dns_error_codes&quot;&gt;DNS error codes&lt;/a&gt;.</source>
          <target state="translated">如果出错，则 &lt;code&gt;Promise&lt;/code&gt; 会被&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;对象拒绝，其中 &lt;code&gt;err.code&lt;/code&gt; 是&lt;a href=&quot;#dns_error_codes&quot;&gt;DNS错误代码之一&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="da16732d5d9a380f16a376ff4e654c12594bd786" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code.</source>
          <target state="translated">如果出错，则 &lt;code&gt;Promise&lt;/code&gt; 会被&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;对象拒绝，其中 &lt;code&gt;err.code&lt;/code&gt; 是错误代码。</target>
        </trans-unit>
        <trans-unit id="b9fd4bc944366c53ef229e3870fe19b02e44ce24" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the host name does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe534a2832704d62aaa34473a2409791c2952e2" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="translated">发生错误时， &lt;code&gt;Promise&lt;/code&gt; 将被&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;对象拒绝，其中 &lt;code&gt;err.code&lt;/code&gt; 是错误代码。请记住，不仅当主机名不存在时，而且在以其他方式（例如，没有可用的文件描述符）查找失败时， &lt;code&gt;err.code&lt;/code&gt; 都将设置为 &lt;code&gt;'ENOTFOUND'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d274e72d3eaf33ae1f5b101442303f281721deb" translate="yes" xml:space="preserve">
          <source>On macOS, this uses &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt;&lt;code&gt;kqueue(2)&lt;/code&gt;&lt;/a&gt; for files and &lt;a href=&quot;https://developer.apple.com/documentation/coreservices/file_system_events&quot;&gt;&lt;code&gt;FSEvents&lt;/code&gt;&lt;/a&gt; for directories.</source>
          <target state="translated">在macOS上，这将&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt; &lt;code&gt;kqueue(2)&lt;/code&gt; &lt;/a&gt;用于文件，将&lt;a href=&quot;https://developer.apple.com/documentation/coreservices/file_system_events&quot;&gt; &lt;code&gt;FSEvents&lt;/code&gt; &lt;/a&gt;用于目录。</target>
        </trans-unit>
        <trans-unit id="39eb6da0166d08d18888bf5d340f82d447a083bd" translate="yes" xml:space="preserve">
          <source>On most platforms, &lt;code&gt;'rename'&lt;/code&gt; is emitted whenever a filename appears or disappears in the directory.</source>
          <target state="translated">在大多数平台上，只要文件名在目录中出现或消失，就会发出 &lt;code&gt;'rename'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4558f0d2f934a695ab52b8b29e7288d194b5266" translate="yes" xml:space="preserve">
          <source>On most systems, where scope format uses the interface name:</source>
          <target state="translated">在大多数系统中,其中范围格式使用接口名称。</target>
        </trans-unit>
        <trans-unit id="7b8df057d113972b6e227366e919aa409563a34a" translate="yes" xml:space="preserve">
          <source>On non-Windows platforms, if &lt;code&gt;options.detached&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the child process will be made the leader of a new process group and session. Child processes may continue running after the parent exits regardless of whether they are detached or not. See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setsid.2.html&quot;&gt;&lt;code&gt;setsid(2)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">在非Windows平台上，如果 &lt;code&gt;options.detached&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; ，则子进程将成为新进程组和会话的领导者。子进程可以在父进程退出后继续运行，无论它们是否分离。有关更多信息，请参见&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setsid.2.html&quot;&gt; &lt;code&gt;setsid(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1643cfbf0d28d755f6e901a412963cf366b998f6" translate="yes" xml:space="preserve">
          <source>On success, &lt;code&gt;callback&lt;/code&gt; will now be called with an &lt;code&gt;error&lt;/code&gt; argument of &lt;code&gt;null&lt;/code&gt; rather than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">成功后，现在将使用 &lt;code&gt;error&lt;/code&gt; 参数 &lt;code&gt;null&lt;/code&gt; 而不是 &lt;code&gt;0&lt;/code&gt; 调用 &lt;code&gt;callback&lt;/code&gt; 。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
