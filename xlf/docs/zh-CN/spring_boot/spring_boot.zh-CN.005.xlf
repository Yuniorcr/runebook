<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="spring_boot">
    <body>
      <group id="spring_boot">
        <trans-unit id="66c25b3f91fc8840e220899d8bb9aaf302a00d09" translate="yes" xml:space="preserve">
          <source>The format of the &lt;code&gt;additional-spring-configuration-metadata.json&lt;/code&gt; file is exactly the same as the regular &lt;code&gt;spring-configuration-metadata.json&lt;/code&gt;. The additional properties file is optional. If you do not have any additional properties, do not add the file.</source>
          <target state="translated">Additional &lt;code&gt;additional-spring-configuration-metadata.json&lt;/code&gt; 文件的格式与常规 &lt;code&gt;spring-configuration-metadata.json&lt;/code&gt; 完全相同。附加属性文件是可选的。如果没有任何其他属性，请不要添加文件。</target>
        </trans-unit>
        <trans-unit id="9ddfd32c2e3e71e345cae5515d422d018062a360" translate="yes" xml:space="preserve">
          <source>The format to use when rendering the log level (default &lt;code&gt;%5p&lt;/code&gt;).</source>
          <target state="translated">呈现日志级别时使用的格式（默认为 &lt;code&gt;%5p&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7da785af774d728c7a48df5be51224c6da88296f" translate="yes" xml:space="preserve">
          <source>The full name of the group. This attribute is mandatory.</source>
          <target state="translated">组的全称。此属性为必填项。</target>
        </trans-unit>
        <trans-unit id="31c410ebe1373afb82e278913855a6b6c87b9b79" translate="yes" xml:space="preserve">
          <source>The full name of the method (include parenthesis and argument types) that contributed this group (for example, the name of a &lt;code&gt;@ConfigurationProperties&lt;/code&gt; annotated &lt;code&gt;@Bean&lt;/code&gt; method). If the source method is not known, it may be omitted.</source>
          <target state="translated">贡献此组的方法的全名（包括括号和参数类型）（例如，带 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的 &lt;code&gt;@Bean&lt;/code&gt; 方法的名称）。如果源方法未知，则可以省略。</target>
        </trans-unit>
        <trans-unit id="328ddbc00c02c8f4d8b207c9aac03fd620cfc720" translate="yes" xml:space="preserve">
          <source>The full name of the property that &lt;em&gt;replaces&lt;/em&gt; this deprecated property. If there is no replacement for this property, it may be omitted.</source>
          <target state="translated">&lt;em&gt;替换&lt;/em&gt;此不推荐使用的属性的属性的全名。如果无法替代此属性，则可以省略。</target>
        </trans-unit>
        <trans-unit id="c21e3105b22678edf57e5097137ba4b40b21a7b8" translate="yes" xml:space="preserve">
          <source>The full name of the property to which this hint refers. Names are in lower-case period-separated form (such as &lt;code&gt;spring.mvc.servlet.path&lt;/code&gt;). If the property refers to a map (such as &lt;code&gt;system.contexts&lt;/code&gt;), the hint either applies to the &lt;em&gt;keys&lt;/em&gt; of the map (&lt;code&gt;system.contexts.keys&lt;/code&gt;) or the &lt;em&gt;values&lt;/em&gt; (&lt;code&gt;system.contexts.values&lt;/code&gt;) of the map. This attribute is mandatory.</source>
          <target state="translated">该提示所引用的属性的全名。名称以小写的句点分隔（例如 &lt;code&gt;spring.mvc.servlet.path&lt;/code&gt; ）。如果属性引用地图（例如 &lt;code&gt;system.contexts&lt;/code&gt; ），则提示将应用于地图的&lt;em&gt;键&lt;/em&gt;（ &lt;code&gt;system.contexts.keys&lt;/code&gt; ）或地图的&lt;em&gt;值&lt;/em&gt;（ &lt;code&gt;system.contexts.values&lt;/code&gt; ）。此属性是必需的。</target>
        </trans-unit>
        <trans-unit id="4f39c4968dfb00d1083bc57c9ea5f4e1cfbc9b1a" translate="yes" xml:space="preserve">
          <source>The full name of the property. Names are in lower-case period-separated form (for example, &lt;code&gt;server.address&lt;/code&gt;). This attribute is mandatory.</source>
          <target state="translated">属性的全名。名称以小写的句点分隔（例如， &lt;code&gt;server.address&lt;/code&gt; ）。此属性是必需的。</target>
        </trans-unit>
        <trans-unit id="72ecd30f8339ce1725974774e6e0d202f6a3cbdc" translate="yes" xml:space="preserve">
          <source>The full signature of the data type of the property (for example, &lt;code&gt;java.lang.String&lt;/code&gt;) but also a full generic type (such as &lt;code&gt;java.util.Map&amp;lt;java.lang.String,acme.MyEnum&amp;gt;&lt;/code&gt;). You can use this attribute to guide the user as to the types of values that they can enter. For consistency, the type of a primitive is specified by using its wrapper counterpart (for example, &lt;code&gt;boolean&lt;/code&gt; becomes &lt;code&gt;java.lang.Boolean&lt;/code&gt;). Note that this class may be a complex type that gets converted from a &lt;code&gt;String&lt;/code&gt; as values are bound. If the type is not known, it may be omitted.</source>
          <target state="translated">属性的数据类型的完整签名（例如， &lt;code&gt;java.lang.String&lt;/code&gt; ），但也包含完整的泛型类型（例如， &lt;code&gt;java.util.Map&amp;lt;java.lang.String,acme.MyEnum&amp;gt;&lt;/code&gt; ）。您可以使用此属性指导用户输入的值的类型。为了保持一致性，通过使用包装的对应对象来指定基元的类型（例如， &lt;code&gt;boolean&lt;/code&gt; 变为 &lt;code&gt;java.lang.Boolean&lt;/code&gt; ）。请注意，此类可能是一个复杂的类型，当绑定值时，它会从 &lt;code&gt;String&lt;/code&gt; 转换而来。如果类型未知，则可以省略。</target>
        </trans-unit>
        <trans-unit id="b34b393cde3ceb48374646ec7423f4f1f131c2a0" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the bean class that should be assignable to the candidate. Typically used to filter out non-candidate beans.</source>
          <target state="translated">可分配给候选Bean类的完全限定名称。通常用于过滤掉非候选Bean。</target>
        </trans-unit>
        <trans-unit id="5672e24e2159e2034c7c08d7a398a2abf8c73b76" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the class that should be assignable to the chosen value. Typically used to filter out-non candidate classes. Note that this information can be provided by the type itself by exposing a class with the appropriate upper bound.</source>
          <target state="translated">可分配给所选值的类的全称。通常用于过滤出非候选类。注意,这个信息可以由类型本身提供,通过公开一个具有适当上界的类。</target>
        </trans-unit>
        <trans-unit id="f71d9755a0d829c8a5d1bad6c20e0e752aa6690e" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the type to consider for the property. This parameter is mandatory.</source>
          <target state="translated">要考虑的属性类型的全称。这个参数是强制性的。</target>
        </trans-unit>
        <trans-unit id="7db3d47265b9820501b6e0243e36905f1e32b4e4" translate="yes" xml:space="preserve">
          <source>The host of the proxy to use to connect to the remote application.</source>
          <target state="translated">用于连接到远程应用程序的代理主机。</target>
        </trans-unit>
        <trans-unit id="e1929ac70e93c339c5bd8e38be87f945ac47619e" translate="yes" xml:space="preserve">
          <source>The identifier for a given &lt;code&gt;HealthIndicator&lt;/code&gt; is the name of the bean without the &lt;code&gt;HealthIndicator&lt;/code&gt; suffix, if it exists. In the preceding example, the health information is available in an entry named &lt;code&gt;my&lt;/code&gt;.</source>
          <target state="translated">给定 &lt;code&gt;HealthIndicator&lt;/code&gt; 的标识符是不带有 &lt;code&gt;HealthIndicator&lt;/code&gt; 后缀（如果存在）的bean的名称。在前面的示例中，运行状况信息在名为 &lt;code&gt;my&lt;/code&gt; 的条目中可用。</target>
        </trans-unit>
        <trans-unit id="babe039ed969544f26641cbdddb378115daa24b3" translate="yes" xml:space="preserve">
          <source>The implementation can load arbitrary files and add them to the &lt;code&gt;Environment&lt;/code&gt;. For instance, the following example loads a YAML configuration file from the classpath:</source>
          <target state="translated">该实现可以加载任意文件并将其添加到 &lt;code&gt;Environment&lt;/code&gt; 中。例如，以下示例从类路径加载YAML配置文件：</target>
        </trans-unit>
        <trans-unit id="072fad81bf875ef998f82690ea5eb825c668b764" translate="yes" xml:space="preserve">
          <source>The in-memory backend disables itself as soon as you&amp;rsquo;re using any of the other available backend. You can also disable it explicitly:</source>
          <target state="translated">使用任何其他可用后端时，内存后端都会自行禁用。您还可以显式禁用它：</target>
        </trans-unit>
        <trans-unit id="d805f6bf3a8fefce85f3fc71aca3f05420a23cc2" translate="yes" xml:space="preserve">
          <source>The index file would look like this:</source>
          <target state="translated">索引文件会是这样的。</target>
        </trans-unit>
        <trans-unit id="728942a3920a99d47512490ff0d4c132584b697a" translate="yes" xml:space="preserve">
          <source>The internal state of Spring Boot applications is mostly represented by the Spring &lt;code&gt;ApplicationContext&lt;/code&gt;. If the application context has started successfully, Spring Boot assumes that the application is in a valid state. An application is considered live as soon as the context has been refreshed, see &lt;a href=&quot;#boot-features-application-events-and-listeners&quot;&gt;Spring Boot application lifecycle and related Application Events&lt;/a&gt;.</source>
          <target state="translated">Spring Boot应用程序的内部状态主要由Spring &lt;code&gt;ApplicationContext&lt;/code&gt; 表示。如果应用程序上下文已成功启动，则Spring Boot会假定该应用程序处于有效状态。刷新上下文后，&lt;a href=&quot;#boot-features-application-events-and-listeners&quot;&gt;应用程序&lt;/a&gt;即被视为处于活动状态，请参阅Spring Boot应用程序生命周期和相关的Application Events。</target>
        </trans-unit>
        <trans-unit id="8a144d83c7dfc1c341bd0d6dedefb7940d04f8c3" translate="yes" xml:space="preserve">
          <source>The jOOQ manual tends to use a variable named &lt;code&gt;create&lt;/code&gt; to hold the &lt;code&gt;DSLContext&lt;/code&gt;.</source>
          <target state="translated">jOOQ手册倾向于使用名为 &lt;code&gt;create&lt;/code&gt; 的变量来保存 &lt;code&gt;DSLContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c05e3d1f59e9395062a2d73476a909741b0b5b8f" translate="yes" xml:space="preserve">
          <source>The latest copy is available at &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/&quot;&gt;docs.spring.io/spring-boot/docs/current/reference/&lt;/a&gt;.</source>
          <target state="translated">最新的副本可在&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/&quot;&gt;docs.spring.io/spring-boot/docs/current/reference/中找到&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e71e0e23307f0b8e0c72e93bd2dbe49dd20517b2" translate="yes" xml:space="preserve">
          <source>The layers index file can be provided in &lt;code&gt;BOOT-INF/layers.idx&lt;/code&gt;. It provides a list of layers and the parts of the jar that should be contained within them. Layers are written in the order that they should be added to the Docker/OCI image. Layers names are written as quoted strings prefixed with dash space (&lt;code&gt;&quot;-&amp;middot;&quot;&lt;/code&gt;) and with a colon (&lt;code&gt;&quot;:&quot;&lt;/code&gt;) suffix. Layer content is either a file or directory name written as a quoted string prefixed by space space dash space (&lt;code&gt;&quot;&amp;middot;&amp;middot;-&amp;middot;&quot;&lt;/code&gt;). A directory name ends with &lt;code&gt;/&lt;/code&gt;, a file name does not. When a directory name is used it means that all files inside that directory are in the same layer.</source>
          <target state="translated">可以在 &lt;code&gt;BOOT-INF/layers.idx&lt;/code&gt; 中提供图层索引文件。它提供了层的列表以及应包含在其中的罐子的各个部分。按照应将其添加到Docker / OCI映像的顺序来编写层。图层名称以带引号的字符串编写，前缀带有短划线空格（ &lt;code&gt;&quot;-&amp;middot;&quot;&lt;/code&gt; ）和后缀冒号（ &lt;code&gt;&quot;:&quot;&lt;/code&gt; ）。图层内容是用引号引起来的字符串的文件名或目录名，并以空格短划线（ &lt;code&gt;&quot;&amp;middot;&amp;middot;-&amp;middot;&quot;&lt;/code&gt; ）作为前缀。目录名以 &lt;code&gt;/&lt;/code&gt; 结尾，文件名则没有。使用目录名称时，意味着该目录内的所有文件都在同一层中。</target>
        </trans-unit>
        <trans-unit id="5ac87227f6fa892229852d903eddcb1188368d5c" translate="yes" xml:space="preserve">
          <source>The level of deprecation, which can be either &lt;code&gt;warning&lt;/code&gt; (the default) or &lt;code&gt;error&lt;/code&gt;. When a property has a &lt;code&gt;warning&lt;/code&gt; deprecation level, it should still be bound in the environment. However, when it has an &lt;code&gt;error&lt;/code&gt; deprecation level, the property is no longer managed and is not bound.</source>
          <target state="translated">弃用级别，可以是 &lt;code&gt;warning&lt;/code&gt; （默认）或 &lt;code&gt;error&lt;/code&gt; 。当某个属性具有 &lt;code&gt;warning&lt;/code&gt; 弃用级别时，它仍应绑定在环境中。但是，当它具有 &lt;code&gt;error&lt;/code&gt; 弃用级别时，该属性将不再受管理且未绑定。</target>
        </trans-unit>
        <trans-unit id="75d148a738f9c8780f067529be57122c2c998399" translate="yes" xml:space="preserve">
          <source>The library directory must be made available, if not already, to the JVM library path. You can do so with a JVM argument such as &lt;code&gt;-Djava.library.path=/usr/local/opt/tomcat-native/lib&lt;/code&gt;. More on this in the &lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/apr.html&quot;&gt;official Tomcat documentation&lt;/a&gt;.</source>
          <target state="translated">如果没有，则必须使库目录可用于JVM库路径。您可以使用JVM参数（例如 &lt;code&gt;-Djava.library.path=/usr/local/opt/tomcat-native/lib&lt;/code&gt; )来执行此操作。有关更多信息，请参见&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/apr.html&quot;&gt;Tomcat官方文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6f7bde1312de36803413519e5b89a42d12e53b20" translate="yes" xml:space="preserve">
          <source>The line in the preceding example passes a value of &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;hibernate.globally_quoted_identifiers&lt;/code&gt; property to the Hibernate entity manager.</source>
          <target state="translated">在前面的示例中的线穿过一个的值 &lt;code&gt;true&lt;/code&gt; 为 &lt;code&gt;hibernate.globally_quoted_identifiers&lt;/code&gt; 属性休眠实体管理器。</target>
        </trans-unit>
        <trans-unit id="1188429780ff5631aa0a096f34348a6e0cec96fb" translate="yes" xml:space="preserve">
          <source>The list is ordered by precedence (with values from lower items overriding earlier ones). Documents from the loaded files are added as &lt;code&gt;PropertySources&lt;/code&gt; to the Spring &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="translated">该列表按优先级排序（较低项目的值覆盖较早的项目）。来自已加载文件的文档将作为 &lt;code&gt;PropertySources&lt;/code&gt; 添加到Spring &lt;code&gt;Environment&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="6b74a0e1fbf4d667e063cdb8bb86b49b4cbecc0b" translate="yes" xml:space="preserve">
          <source>The location of the &lt;code&gt;java&lt;/code&gt; executable is discovered by using the &lt;code&gt;PATH&lt;/code&gt; by default, but you can set it explicitly if there is an executable file at &lt;code&gt;$JAVA_HOME/bin/java&lt;/code&gt;.</source>
          <target state="translated">默认情况下，使用 &lt;code&gt;PATH&lt;/code&gt; 查找 &lt;code&gt;java&lt;/code&gt; 可执行文件的位置，但是如果 &lt;code&gt;$JAVA_HOME/bin/java&lt;/code&gt; 有可执行文件，则可以显式设置它。</target>
        </trans-unit>
        <trans-unit id="6a3b44d95f8d38ac92133ce20b34c12a35e77155" translate="yes" xml:space="preserve">
          <source>The location of the configuration file to use to initialize EhCache.</source>
          <target state="translated">用于初始化EhCache的配置文件的位置。</target>
        </trans-unit>
        <trans-unit id="ef0d2e4e926fdc61959e84d544052004e216263a" translate="yes" xml:space="preserve">
          <source>The location of the configuration file to use to initialize Hazelcast.</source>
          <target state="translated">用于初始化Hazelcast的配置文件的位置。</target>
        </trans-unit>
        <trans-unit id="0688a24208a021f5db5d3a200ece812b5e20eeed" translate="yes" xml:space="preserve">
          <source>The location of the configuration file to use to initialize Infinispan.</source>
          <target state="translated">用于初始化Infinispan的配置文件的位置。</target>
        </trans-unit>
        <trans-unit id="c04fce4df6166af7a615b0b143750ee577dfdda5" translate="yes" xml:space="preserve">
          <source>The location of the configuration file to use to initialize the cache manager. The configuration file is dependent of the underlying cache implementation.</source>
          <target state="translated">用于初始化缓存管理器的配置文件的位置。配置文件的位置取决于底层的缓存实现。</target>
        </trans-unit>
        <trans-unit id="6c7983308decdb84ca9b691e3569034887d71cd3" translate="yes" xml:space="preserve">
          <source>The log message.</source>
          <target state="translated">日志信息。</target>
        </trans-unit>
        <trans-unit id="7b689ff12a526bdf793ea93ac767aaa3d72174cf" translate="yes" xml:space="preserve">
          <source>The log pattern to use in a file (if &lt;code&gt;LOG_FILE&lt;/code&gt; is enabled).</source>
          <target state="translated">文件中使用的日志模式（如果启用了 &lt;code&gt;LOG_FILE&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="29bb58f455bd5f84947b8fb4a3409a193beda673" translate="yes" xml:space="preserve">
          <source>The log pattern to use on the console (stdout).</source>
          <target state="translated">控制台上使用的日志模式(stdout)。</target>
        </trans-unit>
        <trans-unit id="f8cae559009682eeae665016ffba80a8e488d966" translate="yes" xml:space="preserve">
          <source>The magic values are (in this example) are &lt;code&gt;sample1&lt;/code&gt; and &lt;code&gt;sample2&lt;/code&gt;. In order to offer additional content assistance for the keys, you could add the following JSON to &lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;the manual metadata of the module&lt;/a&gt;:</source>
          <target state="translated">魔术值（在此示例中）为 &lt;code&gt;sample1&lt;/code&gt; 和 &lt;code&gt;sample2&lt;/code&gt; 。为了提供有关键的其他内容帮助，您可以将以下JSON添加到&lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;模块的手动元数据中&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="28e3c44f42af3001a18c278a1c0b918fc7a83cd3" translate="yes" xml:space="preserve">
          <source>The main application class to run</source>
          <target state="translated">要运行的主要应用类</target>
        </trans-unit>
        <trans-unit id="0c1417ddf14cdd8daaa486a56b35d2a4411467ff" translate="yes" xml:space="preserve">
          <source>The majority of the metadata file is generated automatically at compile time by processing all items annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;. However, it is possible to &lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;write part of the metadata manually&lt;/a&gt; for corner cases or more advanced use cases.</source>
          <target state="translated">大多数元数据文件是在编译时通过处理所有用 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的项目自动生成的。但是，可以针对极端情况或更高级的用例&lt;a href=&quot;#configuration-metadata-additional-metadata&quot;&gt;手动编写部分元数据&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3a99e3c16779706d676298828b56f0bc02583a77" translate="yes" xml:space="preserve">
          <source>The maximum amount of size log archives can take before being deleted.</source>
          <target state="translated">日志存档在被删除前所能承受的最大大小。</target>
        </trans-unit>
        <trans-unit id="f5d2468ae4f1ff5fddbc2fa7a555e2063ef46be8" translate="yes" xml:space="preserve">
          <source>The maximum size of log file before it&amp;rsquo;s archived.</source>
          <target state="translated">归档前日志文件的最大大小。</target>
        </trans-unit>
        <trans-unit id="27fd07102c3516ee4eb7e38f951f9f14e71a455f" translate="yes" xml:space="preserve">
          <source>The method validation feature supported by Bean Validation 1.1 is automatically enabled as long as a JSR-303 implementation (such as Hibernate validator) is on the classpath. This lets bean methods be annotated with &lt;code&gt;javax.validation&lt;/code&gt; constraints on their parameters and/or on their return value. Target classes with such annotated methods need to be annotated with the &lt;code&gt;@Validated&lt;/code&gt; annotation at the type level for their methods to be searched for inline constraint annotations.</source>
          <target state="translated">只要JSR-303实现（例如Hibernate验证器）位于类路径上，就会自动启用Bean验证1.1支持的方法验证功能。这使bean方法的参数和/或返回值可以使用 &lt;code&gt;javax.validation&lt;/code&gt; 约束进行注释。具有此类注释方法的目标类需要在类型级别使用 &lt;code&gt;@Validated&lt;/code&gt; 注释进行注释，以便在其方法中搜索内联约束注释。</target>
        </trans-unit>
        <trans-unit id="33586b93b5e8f45c17a2f86327bb93e343a66e94" translate="yes" xml:space="preserve">
          <source>The monitored classpath directories are now polled every 2 seconds for changes, and a 1 second quiet period is maintained to make sure there are no additional class changes.</source>
          <target state="translated">被监控的classpath目录现在每2秒轮询一次变化,并保持1秒的安静期,以确保没有额外的类变化。</target>
        </trans-unit>
        <trans-unit id="93acd161951b57dc720ac038b8cf3984782dacf0" translate="yes" xml:space="preserve">
          <source>The most common options to set are shown in the following example:</source>
          <target state="translated">最常见的设置选项如下例所示。</target>
        </trans-unit>
        <trans-unit id="04986444099efffd8d56959f0e1128d6f95c6d79" translate="yes" xml:space="preserve">
          <source>The most extreme (and rarely used) option is to create your own &lt;code&gt;RestTemplateBuilder&lt;/code&gt; bean without using a configurer. Doing so switches off the auto-configuration of a &lt;code&gt;RestTemplateBuilder&lt;/code&gt; and prevents any &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; beans from being used.</source>
          <target state="translated">最极端（很少使用）的选项是在不使用配置程序的情况下创建自己的 &lt;code&gt;RestTemplateBuilder&lt;/code&gt; bean。这样做会关闭 &lt;code&gt;RestTemplateBuilder&lt;/code&gt; 的自动配置，并阻止使用任何 &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; Bean。</target>
        </trans-unit>
        <trans-unit id="bb42a6c77bd77267cb1b652a1a1befe4c77aff73" translate="yes" xml:space="preserve">
          <source>The multipart support is helpful when you want to receive multipart encoded file data as a &lt;code&gt;@RequestParam&lt;/code&gt;-annotated parameter of type &lt;code&gt;MultipartFile&lt;/code&gt; in a Spring MVC controller handler method.</source>
          <target state="translated">如果要在Spring MVC控制器处理程序方法中以 &lt;code&gt;MultipartFile&lt;/code&gt; 类型的 &lt;code&gt;@RequestParam&lt;/code&gt; 注释参数接收多部分编码的文件数据，则多部分支持会很有帮助。</target>
        </trans-unit>
        <trans-unit id="23ee662ae0659faa0ffa21e02b6e56ccba9207b8" translate="yes" xml:space="preserve">
          <source>The name of the MBean is usually generated from the &lt;code&gt;id&lt;/code&gt; of the endpoint. For example, the &lt;code&gt;health&lt;/code&gt; endpoint is exposed as &lt;code&gt;org.springframework.boot:type=Endpoint,name=Health&lt;/code&gt;.</source>
          <target state="translated">MBean的名称通常是根据端点的 &lt;code&gt;id&lt;/code&gt; 生成的。例如， &lt;code&gt;health&lt;/code&gt; 端点公开为 &lt;code&gt;org.springframework.boot:type=Endpoint,name=Health&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b3bdd509135ac54d7c21f86558ceba6bc5dd8fe" translate="yes" xml:space="preserve">
          <source>The name of the app. If the jar is run from a symlink, the script guesses the app name. If it is not a symlink or you want to explicitly set the app name, this can be useful.</source>
          <target state="translated">应用程序的名称。如果jar是通过symlink运行的,脚本会猜测应用程序的名称。如果它不是一个符号链接,或者你想明确地设置应用程序的名称,这可能是有用的。</target>
        </trans-unit>
        <trans-unit id="eeecd19922684f0ae7190b1528c6ce9555f9bc8b" translate="yes" xml:space="preserve">
          <source>The name of the folder from which to read .conf files (same folder as jar-file by default).</source>
          <target state="translated">读取.conf文件的文件夹名称(默认与jar-file文件夹相同)。</target>
        </trans-unit>
        <trans-unit id="1fa289e812bd0bb93833514254045ba9c1e8c923" translate="yes" xml:space="preserve">
          <source>The name of the folder in which to put log files (&lt;code&gt;/var/log&lt;/code&gt; by default).</source>
          <target state="translated">放置日志文件的文件夹的名称（默认情况下为 &lt;code&gt;/var/log&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1908085a96a7e7280cbf5acdd5b84fd227e8934b" translate="yes" xml:space="preserve">
          <source>The name of the log file in the &lt;code&gt;LOG_FOLDER&lt;/code&gt; (&lt;code&gt;&amp;lt;appname&amp;gt;.log&lt;/code&gt; by default).</source>
          <target state="translated">&lt;code&gt;LOG_FOLDER&lt;/code&gt; 中的日志文件名（默认为 &lt;code&gt;&amp;lt;appname&amp;gt;.log&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1e03de2e17454aafb611a7bb9ba39ead589712dc" translate="yes" xml:space="preserve">
          <source>The name of the provider to use to offer additional content assistance for the element to which the hint refers.</source>
          <target state="translated">提供者的名称,用于为该提示所指的元素提供额外的内容帮助。</target>
        </trans-unit>
        <trans-unit id="b627a61ccec8dd5e98000c5768073d3dcff8cb50" translate="yes" xml:space="preserve">
          <source>The name you use here should match the name used in the code, not the name after it has been naming-convention normalized for a monitoring system it is shipped to. In other words, if &lt;code&gt;jvm.memory.max&lt;/code&gt; appears as &lt;code&gt;jvm_memory_max&lt;/code&gt; in Prometheus because of its snake case naming convention, you should still use &lt;code&gt;jvm.memory.max&lt;/code&gt; as the selector when inspecting the meter in the &lt;code&gt;metrics&lt;/code&gt; endpoint.</source>
          <target state="translated">您在此处使用的名称应与代码中使用的名称相匹配，而不是已经针对其出厂的监视系统进行了命名约定标准化后的名称。换句话说，如果 &lt;code&gt;jvm.memory.max&lt;/code&gt; 由于其蛇形命名约定而在Prometheus中显示为 &lt;code&gt;jvm_memory_max&lt;/code&gt; ，则在检查 &lt;code&gt;metrics&lt;/code&gt; 端点中的仪表时，仍应使用 &lt;code&gt;jvm.memory.max&lt;/code&gt; 作为选择器。</target>
        </trans-unit>
        <trans-unit id="1ac12ea11ce4a239f0434e217d3ad2a7a3d9f9e6" translate="yes" xml:space="preserve">
          <source>The nested document will be filtered because the main file is named &lt;code&gt;application-dev.yml&lt;/code&gt;. It is already considered to be profile-specific, and nested documents will be ignored.</source>
          <target state="translated">嵌套文档将被过滤，因为主文件名为 &lt;code&gt;application-dev.yml&lt;/code&gt; 。它已经被认为是特定于配置文件的，并且嵌套文档将被忽略。</target>
        </trans-unit>
        <trans-unit id="4798fe7b532be5d748b7e3bf9f32ed914aeccfaf" translate="yes" xml:space="preserve">
          <source>The next section goes on to cover the &lt;em&gt;&lt;a href=&quot;spring-boot-cli#cli&quot;&gt;Spring Boot CLI&lt;/a&gt;&lt;/em&gt;, or you can jump ahead to read about &lt;em&gt;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;build tool plugins&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">下一节将继续介绍&lt;em&gt;&lt;a href=&quot;spring-boot-cli#cli&quot;&gt;Spring Boot CLI&lt;/a&gt;&lt;/em&gt;，或者您可以继续阅读有关&lt;em&gt;&lt;a href=&quot;build-tool-plugins#build-tool-plugins&quot;&gt;构建工具插件的信息&lt;/a&gt;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2e710c9eb75bc0a71fde101a044467cce3c91bcf" translate="yes" xml:space="preserve">
          <source>The next step is to update your build configuration such that your project produces a war file rather than a jar file. If you use Maven and &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; (which configures Maven&amp;rsquo;s war plugin for you), all you need to do is to modify &lt;code&gt;pom.xml&lt;/code&gt; to change the packaging to war, as follows:</source>
          <target state="translated">下一步是更新构建配置，以便您的项目生成war文件而不是jar文件。如果您使用Maven和 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; （为您配置Maven的war插件），则只需修改 &lt;code&gt;pom.xml&lt;/code&gt; 即可将包装更改为war，如下所示：</target>
        </trans-unit>
        <trans-unit id="0b6d566a00d163af4d8e684c102288eb351995c8" translate="yes" xml:space="preserve">
          <source>The number of days to keep log archives (defaults to 7)</source>
          <target state="translated">保存日志存档的天数(默认为7)。</target>
        </trans-unit>
        <trans-unit id="81c47ab31d5d3bea0142dd81dc73c2f456c36fba" translate="yes" xml:space="preserve">
          <source>The official Java &quot;Low Level&quot; and &quot;High Level&quot; REST clients</source>
          <target state="translated">官方的Java &quot;低级 &quot;和 &quot;高级 &quot;REST客户端。</target>
        </trans-unit>
        <trans-unit id="9e41aadf94f071ec541a9bf5e33630f6269664c2" translate="yes" xml:space="preserve">
          <source>The order of common tags is important if you are using Graphite. As the order of common tags cannot be guaranteed using this approach, Graphite users are advised to define a custom &lt;code&gt;MeterFilter&lt;/code&gt; instead.</source>
          <target state="translated">如果使用Graphite，则常用标签的顺序很重要。由于使用这种方法不能保证通用标签的顺序，因此建议Graphite用户定义自定义 &lt;code&gt;MeterFilter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6424d8ae13909b648555e066be4368a2e32eb9d7" translate="yes" xml:space="preserve">
          <source>The parameters passed to endpoint operation methods are, if necessary, automatically converted to the required type. Before calling an operation method, the input received via JMX or an HTTP request is converted to the required types using an instance of &lt;code&gt;ApplicationConversionService&lt;/code&gt; as well as any &lt;code&gt;Converter&lt;/code&gt; or &lt;code&gt;GenericConverter&lt;/code&gt; beans qualified with &lt;code&gt;@EndpointConverter&lt;/code&gt;.</source>
          <target state="translated">如有必要，传递给端点操作方法的参数会自动转换为所需的类型。在调用操作方法之前，使用 &lt;code&gt;ApplicationConversionService&lt;/code&gt; 的实例以及任何 &lt;code&gt;@EndpointConverter&lt;/code&gt; 限定的 &lt;code&gt;Converter&lt;/code&gt; 或 &lt;code&gt;GenericConverter&lt;/code&gt; Bean ，将通过JMX或HTTP请求接收的输入转换为所需的类型。</target>
        </trans-unit>
        <trans-unit id="de166803f8828e9185f0257d9f5429ef403dd089" translate="yes" xml:space="preserve">
          <source>The path can be further customized by annotating one or more parameters of the operation method with &lt;code&gt;@Selector&lt;/code&gt;. Such a parameter is added to the path predicate as a path variable. The variable&amp;rsquo;s value is passed into the operation method when the endpoint operation is invoked. If you want to capture all remaining path elements, you can add &lt;code&gt;@Selector(Match=ALL_REMAINING)&lt;/code&gt; to the last parameter and make it a type that is conversion compatible with a &lt;code&gt;String[]&lt;/code&gt;.</source>
          <target state="translated">通过使用 &lt;code&gt;@Selector&lt;/code&gt; 注释操作方法的一个或多个参数，可以进一步自定义路径。将这样的参数作为路径变量添加到路径谓词。调用端点操作时，变量的值将传递到操作方法中。如果要捕获所有剩余的路径元素，可以将 &lt;code&gt;@Selector(Match=ALL_REMAINING)&lt;/code&gt; 添加到最后一个参数，并将其设置为与 &lt;code&gt;String[]&lt;/code&gt; 转换兼容的类型。</target>
        </trans-unit>
        <trans-unit id="aee6d54f4f41ec165d96cb004bf5f868eee0382d" translate="yes" xml:space="preserve">
          <source>The path of the predicate is determined by the ID of the endpoint and the base path of web-exposed endpoints. The default base path is &lt;code&gt;/actuator&lt;/code&gt;. For example, an endpoint with the ID &lt;code&gt;sessions&lt;/code&gt; will use &lt;code&gt;/actuator/sessions&lt;/code&gt; as its path in the predicate.</source>
          <target state="translated">谓词的路径由终结点的ID和暴露于Web的终结点的基本路径确定。默认的基本路径是 &lt;code&gt;/actuator&lt;/code&gt; 。例如，具有ID &lt;code&gt;sessions&lt;/code&gt; 的端点将使用 &lt;code&gt;/actuator/sessions&lt;/code&gt; 作为其在谓词中的路径。</target>
        </trans-unit>
        <trans-unit id="f0656ecd9796e4da1fb5968bc7247045b64c27a4" translate="yes" xml:space="preserve">
          <source>The patterns to use can be customized using the &lt;code&gt;management.endpoint.env.keys-to-sanitize&lt;/code&gt; and &lt;code&gt;management.endpoint.configprops.keys-to-sanitize&lt;/code&gt; respectively.</source>
          <target state="translated">可以分别使用 &lt;code&gt;management.endpoint.env.keys-to-sanitize&lt;/code&gt; 和 &lt;code&gt;management.endpoint.configprops.keys-to-sanitize&lt;/code&gt; 来定制要使用的模式。</target>
        </trans-unit>
        <trans-unit id="a938c63848f47959aa084e1ab0739dd5ded55bb8" translate="yes" xml:space="preserve">
          <source>The port of the proxy to use to connect to the remote application.</source>
          <target state="translated">连接到远程应用程序的代理端口。</target>
        </trans-unit>
        <trans-unit id="2be111a430ebda2afbf8aa01b8648d671e99e3d9" translate="yes" xml:space="preserve">
          <source>The port that Mongo listens on can be configured by setting the &lt;code&gt;spring.data.mongodb.port&lt;/code&gt; property. To use a randomly allocated free port, use a value of 0. The &lt;code&gt;MongoClient&lt;/code&gt; created by &lt;code&gt;MongoAutoConfiguration&lt;/code&gt; is automatically configured to use the randomly allocated port.</source>
          <target state="translated">可以通过设置 &lt;code&gt;spring.data.mongodb.port&lt;/code&gt; 属性来配置Mongo侦听的端口。要使用随机分配的空闲端口，请使用0值。由 &lt;code&gt;MongoClient&lt;/code&gt; 创建的 &lt;code&gt;MongoAutoConfiguration&lt;/code&gt; 将自动配置为使用随机分配的端口。</target>
        </trans-unit>
        <trans-unit id="31bbbe629b4580086b36804afdbfae5a18fc5f8b" translate="yes" xml:space="preserve">
          <source>The preceding &lt;code&gt;application.properties&lt;/code&gt; example changes the endpoint from &lt;code&gt;/actuator/{id}&lt;/code&gt; to &lt;code&gt;/manage/{id}&lt;/code&gt; (for example, &lt;code&gt;/manage/info&lt;/code&gt;).</source>
          <target state="translated">前面的 &lt;code&gt;application.properties&lt;/code&gt; 示例将端点从 &lt;code&gt;/actuator/{id}&lt;/code&gt; 更改为 &lt;code&gt;/manage/{id}&lt;/code&gt; （例如 &lt;code&gt;/manage/info&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6eb7413ccbb011fcd8d2bce01f9810452986a454" translate="yes" xml:space="preserve">
          <source>The preceding POJO defines the following properties:</source>
          <target state="translated">前面的POJO定义了以下属性。</target>
        </trans-unit>
        <trans-unit id="905efa58745dc4094344d0271e5aa54cce0d071c" translate="yes" xml:space="preserve">
          <source>The preceding code makes sure that the deprecated property still works (delegating to the &lt;code&gt;name&lt;/code&gt; property behind the scenes). Once the &lt;code&gt;getTarget&lt;/code&gt; and &lt;code&gt;setTarget&lt;/code&gt; methods can be removed from your public API, the automatic deprecation hint in the metadata goes away as well. If you want to keep a hint, adding manual metadata with an &lt;code&gt;error&lt;/code&gt; deprecation level ensures that users are still informed about that property. Doing so is particularly useful when a &lt;code&gt;replacement&lt;/code&gt; is provided.</source>
          <target state="translated">前面的代码确保不推荐使用的属性仍然有效（将其委托给幕后的 &lt;code&gt;name&lt;/code&gt; 属性）。一旦可以从公共API中删除 &lt;code&gt;getTarget&lt;/code&gt; 和 &lt;code&gt;setTarget&lt;/code&gt; 方法，元数据中的自动弃用提示也将消失。如果要保留提示，请添加具有 &lt;code&gt;error&lt;/code&gt; 弃用级别的手动元数据，以确保仍然向用户通知该属性。进行 &lt;code&gt;replacement&lt;/code&gt; 时，这样做特别有用。</target>
        </trans-unit>
        <trans-unit id="659caa5023b0513ddd625afbcda89818257e5802" translate="yes" xml:space="preserve">
          <source>The preceding declaration picks up &lt;code&gt;custom-bom-1.0.0.pom&lt;/code&gt; in a Maven repository under &lt;code&gt;com/example/custom-versions/1.0.0/&lt;/code&gt;.</source>
          <target state="translated">前面的声明在 &lt;code&gt;com/example/custom-versions/1.0.0/&lt;/code&gt; 下的Maven存储库中选择了 &lt;code&gt;custom-bom-1.0.0.pom&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e1906575c82396ad87a059ae736a882ec717aa72" translate="yes" xml:space="preserve">
          <source>The preceding example YAML corresponds to the following &lt;code&gt;application.properties&lt;/code&gt; file:</source>
          <target state="translated">前面的示例YAML对应于以下 &lt;code&gt;application.properties&lt;/code&gt; 文件：</target>
        </trans-unit>
        <trans-unit id="b1c02e2d91aa6ff81dae9e4761c967e22a489a83" translate="yes" xml:space="preserve">
          <source>The preceding example configures two data sources on custom namespaces with the same logic as Spring Boot would use in auto-configuration. Note that each &lt;code&gt;configuration&lt;/code&gt; sub namespace provides advanced settings based on the chosen implementation.</source>
          <target state="translated">前面的示例在自定义名称空间上配置两个数据源，其逻辑与Spring Boot在自动配置中使用的逻辑相同。请注意，每个 &lt;code&gt;configuration&lt;/code&gt; 子名称空间都基于所选的实现提供高级设置。</target>
        </trans-unit>
        <trans-unit id="f53bde56dc68fd45bf0e75abd87fa42843ae2ec8" translate="yes" xml:space="preserve">
          <source>The preceding example creates a &lt;code&gt;my-project&lt;/code&gt; directory with a Maven-based project that uses &lt;code&gt;spring-boot-starter-web&lt;/code&gt; and &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;. You can list the capabilities of the service by using the &lt;code&gt;--list&lt;/code&gt; flag, as shown in the following example:</source>
          <target state="translated">前面的示例使用 &lt;code&gt;my-project&lt;/code&gt; 目录创建一个基于Maven的项目，该项目使用 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 和 &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; 。您可以使用 &lt;code&gt;--list&lt;/code&gt; 标志列出服务的功能，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="eed0faed14835655e955c1af347f383f8f1c6381" translate="yes" xml:space="preserve">
          <source>The preceding example indicates that the dependency management in &lt;code&gt;another-bom&lt;/code&gt; overrides the dependency management in &lt;code&gt;custom-bom&lt;/code&gt;.</source>
          <target state="translated">前面的示例指示 &lt;code&gt;another-bom&lt;/code&gt; 中的依赖项管理覆盖 &lt;code&gt;custom-bom&lt;/code&gt; 中的依赖项管理。</target>
        </trans-unit>
        <trans-unit id="293fe6f7ff3290e7d1db3c998f27c59b147c1d81" translate="yes" xml:space="preserve">
          <source>The preceding example overrides the default factory, and it should be applied to any other factory that your application defines, if any.</source>
          <target state="translated">前面的例子覆盖了默认的工厂,如果有的话,它应该被应用到你的应用程序定义的任何其他工厂。</target>
        </trans-unit>
        <trans-unit id="a9f4de5ac752e76cd1ec66f96406db3f1fad9adf" translate="yes" xml:space="preserve">
          <source>The preceding example produces metadata information for &lt;code&gt;server.name&lt;/code&gt;, &lt;code&gt;server.host.ip&lt;/code&gt;, and &lt;code&gt;server.host.port&lt;/code&gt; properties. You can use the &lt;code&gt;@NestedConfigurationProperty&lt;/code&gt; annotation on a field to indicate that a regular (non-inner) class should be treated as if it were nested.</source>
          <target state="translated">前面的示例为 &lt;code&gt;server.name&lt;/code&gt; ， &lt;code&gt;server.host.ip&lt;/code&gt; 和 &lt;code&gt;server.host.port&lt;/code&gt; 属性生成元数据信息。您可以在字段上使用 &lt;code&gt;@NestedConfigurationProperty&lt;/code&gt; 批注，以指示应将常规（非内部）类视为嵌套类。</target>
        </trans-unit>
        <trans-unit id="5a9d7540973d81ea773fc24abca3ae038b7aba3f" translate="yes" xml:space="preserve">
          <source>The preceding example shows how &lt;code&gt;A.class&lt;/code&gt; can be found in &lt;code&gt;/BOOT-INF/classes&lt;/code&gt; in &lt;code&gt;myapp.jar&lt;/code&gt; at position &lt;code&gt;0063&lt;/code&gt;. &lt;code&gt;B.class&lt;/code&gt; from the nested jar can actually be found in &lt;code&gt;myapp.jar&lt;/code&gt; at position &lt;code&gt;3452&lt;/code&gt;, and &lt;code&gt;C.class&lt;/code&gt; is at position &lt;code&gt;3980&lt;/code&gt;.</source>
          <target state="translated">前面的示例显示了如何在 &lt;code&gt;myapp.jar&lt;/code&gt; 中位于位置 &lt;code&gt;0063&lt;/code&gt; 的 &lt;code&gt;/BOOT-INF/classes&lt;/code&gt; 中找到 &lt;code&gt;A.class&lt;/code&gt; 。嵌套jar中的 &lt;code&gt;B.class&lt;/code&gt; 实际上可以在 &lt;code&gt;myapp.jar&lt;/code&gt; 中的 &lt;code&gt;3452&lt;/code&gt; 位置找到，而 &lt;code&gt;C.class&lt;/code&gt; 在 &lt;code&gt;3980&lt;/code&gt; 的位置上。</target>
        </trans-unit>
        <trans-unit id="380deea36257b681e8fa5315768fac1261b41692" translate="yes" xml:space="preserve">
          <source>The preceding example uses &lt;code&gt;EndpointRequest.toAnyEndpoint()&lt;/code&gt; to match a request to any endpoint and then ensures that all have the &lt;code&gt;ENDPOINT_ADMIN&lt;/code&gt; role. Several other matcher methods are also available on &lt;code&gt;EndpointRequest&lt;/code&gt;. See the API documentation (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;) for details.</source>
          <target state="translated">前面的示例使用 &lt;code&gt;EndpointRequest.toAnyEndpoint()&lt;/code&gt; 将请求匹配到任何端点，然后确保所有 &lt;code&gt;ENDPOINT_ADMIN&lt;/code&gt; 都具有ENDPOINT_ADMIN角色。在 &lt;code&gt;EndpointRequest&lt;/code&gt; 上还可以使用其他几种匹配器方法。有关详细信息，请参见API文档（&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt;或&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e48053f9c9713ecfcac3f8649adeef82301168e3" translate="yes" xml:space="preserve">
          <source>The preceding example would be transformed into these properties:</source>
          <target state="translated">前面的例子将转化为这些属性。</target>
        </trans-unit>
        <trans-unit id="0e0eb1f5c54643d2fa19f2def26685a64ad325f6" translate="yes" xml:space="preserve">
          <source>The preceding instructions install a local instance of &lt;code&gt;spring&lt;/code&gt; called the &lt;code&gt;dev&lt;/code&gt; instance. It points at your target build location, so every time you rebuild Spring Boot, &lt;code&gt;spring&lt;/code&gt; is up-to-date.</source>
          <target state="translated">前面的说明安装 &lt;code&gt;spring&lt;/code&gt; 的本地实例称为 &lt;code&gt;dev&lt;/code&gt; 实例。它指向您的目标构建位置，因此，每次重新构建Spring Boot时， &lt;code&gt;spring&lt;/code&gt; 都是最新的。</target>
        </trans-unit>
        <trans-unit id="3bde5228723f5160afe6f3494a7a6a16fc8a6b87" translate="yes" xml:space="preserve">
          <source>The preceding listing should give you a working build. You can test it by running &lt;code&gt;mvn package&lt;/code&gt; (for now, you can ignore the &amp;ldquo;jar will be empty - no content was marked for inclusion!&amp;rdquo; warning).</source>
          <target state="translated">上面的清单应为您提供有效的构建。您可以通过运行 &lt;code&gt;mvn package&lt;/code&gt; 对其进行测试（目前，您可以忽略&amp;ldquo; jar将为空-没有内容被标记为包含！&amp;rdquo;警告）。</target>
        </trans-unit>
        <trans-unit id="b71732935d22ec0a4e4fce1e7874cac908e82e99" translate="yes" xml:space="preserve">
          <source>The preceding merging rules apply to properties from all property sources, and not just files.</source>
          <target state="translated">前面的合并规则适用于所有属性来源的属性,而不仅仅是文件。</target>
        </trans-unit>
        <trans-unit id="055e5f209ecb4098348753f5eb40f747b659a2a3" translate="yes" xml:space="preserve">
          <source>The prefix &lt;code&gt;management.endpoint.&amp;lt;name&amp;gt;&lt;/code&gt; is used to uniquely identify the endpoint that is being configured.</source>
          <target state="translated">前缀 &lt;code&gt;management.endpoint.&amp;lt;name&amp;gt;&lt;/code&gt; 用于唯一标识正在配置的端点。</target>
        </trans-unit>
        <trans-unit id="65313e493e0783aeb283e0bb4e6755a707889e75" translate="yes" xml:space="preserve">
          <source>The presence of a &lt;code&gt;com.hazelcast.client.config.ClientConfig&lt;/code&gt; bean.</source>
          <target state="translated">&lt;code&gt;com.hazelcast.client.config.ClientConfig&lt;/code&gt; bean的存在。</target>
        </trans-unit>
        <trans-unit id="a2369f57e3bcf0e90e80c3eb3cd7afbbce955195" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;hazelcast.client.config&lt;/code&gt; system property.</source>
          <target state="translated">&lt;code&gt;hazelcast.client.config&lt;/code&gt; 系统属性的存在。</target>
        </trans-unit>
        <trans-unit id="c356da4bdfc89eb196020056f14c74f9b9f8bb6a" translate="yes" xml:space="preserve">
          <source>The previous sections covered already many common use cases, such as compression, SSL or HTTP/2. However, if a configuration key doesn&amp;rsquo;t exist for your use case, you should then look at &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/server/WebServerFactoryCustomizer.html&quot;&gt;&lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt;&lt;/a&gt;. You can declare such a component and get access to the server factory relevant to your choice: you should select the variant for the chosen Server (Tomcat, Jetty, Reactor Netty, Undertow) and the chosen web stack (Servlet or Reactive).</source>
          <target state="translated">前面的部分已经介绍了许多常见的用例，例如压缩，SSL或HTTP / 2。但是，如果您的用例不存在配置密钥，则应查看&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/web/server/WebServerFactoryCustomizer.html&quot;&gt; &lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt; &lt;/a&gt;。您可以声明一个这样的组件，并访问与您选择的服务器相关的工厂：您应该为所选服务器（Tomcat，Jetty，Reactor Netty，Undertow）和所选Web堆栈（Servlet或Reactive）选择变体。</target>
        </trans-unit>
        <trans-unit id="8e999ec85a88ce16af514595f6f9d4a07964f533" translate="yes" xml:space="preserve">
          <source>The printed banner is registered as a singleton bean under the following name: &lt;code&gt;springBootBanner&lt;/code&gt;.</source>
          <target state="translated">打印的横幅广告以以下名称注册为单例bean： &lt;code&gt;springBootBanner&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e31f636f65fde44dee505a31a4128f9378a0df1" translate="yes" xml:space="preserve">
          <source>The processor picks up both classes and methods that are annotated with &lt;code&gt;@ConfigurationProperties&lt;/code&gt;.</source>
          <target state="translated">处理器选择使用 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释的类和方法。</target>
        </trans-unit>
        <trans-unit id="71c7406518e18d7f4ccecf0c0f1386f2a29c76c7" translate="yes" xml:space="preserve">
          <source>The produces clause of the predicate can be determined by the &lt;code&gt;produces&lt;/code&gt; attribute of the &lt;code&gt;@DeleteOperation&lt;/code&gt;, &lt;code&gt;@ReadOperation&lt;/code&gt;, and &lt;code&gt;@WriteOperation&lt;/code&gt; annotations. The attribute is optional. If it is not used, the produces clause is determined automatically.</source>
          <target state="translated">的产生可以被确定谓词的子句由 &lt;code&gt;produces&lt;/code&gt; 所述的属性 &lt;code&gt;@DeleteOperation&lt;/code&gt; ， &lt;code&gt;@ReadOperation&lt;/code&gt; ，和 &lt;code&gt;@WriteOperation&lt;/code&gt; 注释。该属性是可选的。如果未使用，则会自动确定produces子句。</target>
        </trans-unit>
        <trans-unit id="8d6b5f03d894005db4a13da96a2f187decd8ec8f" translate="yes" xml:space="preserve">
          <source>The properties above will bind to a &lt;code&gt;Map&lt;/code&gt; with &lt;code&gt;/key1&lt;/code&gt;, &lt;code&gt;/key2&lt;/code&gt; and &lt;code&gt;key3&lt;/code&gt; as the keys in the map.</source>
          <target state="translated">以上将结合性质的 &lt;code&gt;Map&lt;/code&gt; 与 &lt;code&gt;/key1&lt;/code&gt; ， &lt;code&gt;/key2&lt;/code&gt; 和 &lt;code&gt;key3&lt;/code&gt; 作为映射中的键。</target>
        </trans-unit>
        <trans-unit id="9e3a58aa470931e890d7b620f962bb5d4b663321" translate="yes" xml:space="preserve">
          <source>The properties supported by auto configuration are shown in &lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt;appendix-application-properties.html&lt;/a&gt;. Note that, for the most part, these properties (hyphenated or camelCase) map directly to the Apache Kafka dotted properties. Refer to the Apache Kafka documentation for details.</source>
          <target state="translated">自动配置支持的属性显示在&lt;a href=&quot;appendix-application-properties#common-application-properties&quot;&gt;appendix-application-properties.html中&lt;/a&gt;。请注意，在大多数情况下，这些属性（连字符或camelCase）直接映射到Apache Kafka点缀属性。有关详细信息，请参阅Apache Kafka文档。</target>
        </trans-unit>
        <trans-unit id="ab17d3961622920fac81713de1cefca70efbc9c0" translate="yes" xml:space="preserve">
          <source>The properties that map to &lt;code&gt;@ConfigurationProperties&lt;/code&gt; classes available in Spring Boot, which are configured via properties files, YAML files, environment variables etc., are public API but the accessors (getters/setters) of the class itself are not meant to be used directly.</source>
          <target state="translated">映射到Spring Boot中可用的 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 类的属性（通过属性文件，YAML文件，环境变量等进行配置）是公共API，但该类本身的访问器（获取器/设置器）不能直接使用。 。</target>
        </trans-unit>
        <trans-unit id="aeafe5b2bb58e54c0334ddd97d42f057d24a0d07" translate="yes" xml:space="preserve">
          <source>The reactive auto-configuration replaces the need to use &lt;code&gt;@Enable*WebSession&lt;/code&gt;.</source>
          <target state="translated">反应式自动配置取代了使用 &lt;code&gt;@Enable*WebSession&lt;/code&gt; 的需要。</target>
        </trans-unit>
        <trans-unit id="46373140b6dc5df3d963805651a3df0796837afe" translate="yes" xml:space="preserve">
          <source>The recommended path is through the starters, even though it requires some jiggling. The following example shows how to set up the starters in Maven:</source>
          <target state="translated">推荐的路径是通过启动器,尽管它需要一些抖动。下面的例子展示了如何在Maven中设置启动器。</target>
        </trans-unit>
        <trans-unit id="2bf959309e331983c06e2803cb240b60d148f048" translate="yes" xml:space="preserve">
          <source>The reference documentation consists of the following sections:</source>
          <target state="translated">参考文件由以下部分组成:</target>
        </trans-unit>
        <trans-unit id="e95079408983727ba0a56d1ae2639fa11c83aa06" translate="yes" xml:space="preserve">
          <source>The reference documentation has the following appendices:</source>
          <target state="translated">参考文件有以下附录:</target>
        </trans-unit>
        <trans-unit id="4edc275311b64c47aba2380542aad967eb05c3fe" translate="yes" xml:space="preserve">
          <source>The remote client application is designed to be run from within your IDE. You need to run &lt;code&gt;org.springframework.boot.devtools.RemoteSpringApplication&lt;/code&gt; with the same classpath as the remote project that you connect to. The application&amp;rsquo;s single required argument is the remote URL to which it connects.</source>
          <target state="translated">远程客户端应用程序旨在在您的IDE中运行。您需要使用与您连接到的远程项目相同的类路径来运行 &lt;code&gt;org.springframework.boot.devtools.RemoteSpringApplication&lt;/code&gt; 。应用程序的唯一必需参数是它连接到的远程URL。</target>
        </trans-unit>
        <trans-unit id="6ee5714e6591b3eb48576dde612e181494c452fc" translate="yes" xml:space="preserve">
          <source>The remote client monitors your application classpath for changes in the same way as the &lt;a href=&quot;#using-boot-devtools-restart&quot;&gt;local restart&lt;/a&gt;. Any updated resource is pushed to the remote application and (&lt;em&gt;if required&lt;/em&gt;) triggers a restart. This can be helpful if you iterate on a feature that uses a cloud service that you do not have locally. Generally, remote updates and restarts are much quicker than a full rebuild and deploy cycle.</source>
          <target state="translated">远程客户端以与&lt;a href=&quot;#using-boot-devtools-restart&quot;&gt;本地重新启动&lt;/a&gt;相同的方式监视应用程序类路径中的更改。任何更新的资源都会推送到远程应用程序，并且（&lt;em&gt;如果需要&lt;/em&gt;）会触发重新启动。如果您迭代使用本地没有的云服务的功能，这将很有帮助。通常，远程更新和重新启动比完整的重建和部署周期要快得多。</target>
        </trans-unit>
        <trans-unit id="05c45da3de98bec33e3dc20a9efb2627c562a78a" translate="yes" xml:space="preserve">
          <source>The replication factor for change log topics and repartition topics created by the stream processing application.</source>
          <target state="translated">流处理应用程序创建的变更日志主题和重新分区主题的复制因子。</target>
        </trans-unit>
        <trans-unit id="ff2f0d5eda0e910a90dcfd6626585b3587004c26" translate="yes" xml:space="preserve">
          <source>The reported measurements are the &lt;em&gt;sum&lt;/em&gt; of the statistics of all meters matching the meter name and any tags that have been applied. So in the example above, the returned &quot;Value&quot; statistic is the sum of the maximum memory footprints of &quot;Code Cache&quot;, &quot;Compressed Class Space&quot;, and &quot;Metaspace&quot; areas of the heap. If you only wanted to see the maximum size for the &quot;Metaspace&quot;, you could add an additional &lt;code&gt;tag=id:Metaspace&lt;/code&gt;, i.e. &lt;code&gt;/actuator/metrics/jvm.memory.max?tag=area:nonheap&amp;amp;tag=id:Metaspace&lt;/code&gt;.</source>
          <target state="translated">报告的测量值是与仪表名称和已应用的任何标签相匹配的所有仪表的统计信息的&lt;em&gt;总和&lt;/em&gt;。因此，在上面的示例中，返回的&amp;ldquo;值&amp;rdquo;统计量是堆的&amp;ldquo;代码缓存&amp;rdquo;，&amp;ldquo;压缩类空间&amp;rdquo;和&amp;ldquo;元空间&amp;rdquo;区域的最大内存占用量的总和。如果只想查看&amp;ldquo; Metaspace&amp;rdquo;的最大大小，则可以添加一个额外的 &lt;code&gt;tag=id:Metaspace&lt;/code&gt; ，即 &lt;code&gt;/actuator/metrics/jvm.memory.max?tag=area:nonheap&amp;amp;tag=id:Metaspace&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5724023abab4c13a053844fc4ce12297e4512ef7" translate="yes" xml:space="preserve">
          <source>The restart technology provided by Spring Boot works by using two classloaders. Classes that do not change (for example, those from third-party jars) are loaded into a &lt;em&gt;base&lt;/em&gt; classloader. Classes that you are actively developing are loaded into a &lt;em&gt;restart&lt;/em&gt; classloader. When the application is restarted, the &lt;em&gt;restart&lt;/em&gt; classloader is thrown away and a new one is created. This approach means that application restarts are typically much faster than &amp;ldquo;cold starts&amp;rdquo;, since the &lt;em&gt;base&lt;/em&gt; classloader is already available and populated.</source>
          <target state="translated">Spring Boot提供的重启技术通过使用两个类加载器来工作。不变的类（例如，来自第三方jar的类）将被加载到&lt;em&gt;基&lt;/em&gt;类加载器中。您正在积极开发的类将加载到&lt;em&gt;重新启动&lt;/em&gt;类加载器中。重新启动应用程序后，将丢弃&lt;em&gt;重新启动&lt;/em&gt;类加载器，并创建一个新的类加载器。这种方法意味着应用程序的重启通常比&amp;ldquo;冷启动&amp;rdquo;要快得多，因为&lt;em&gt;基本&lt;/em&gt;类加载器已经可用并已填充。</target>
        </trans-unit>
        <trans-unit id="da51f2668f485ab823ebb5ca1e57cc1aac59c885" translate="yes" xml:space="preserve">
          <source>The resulting jar contains the classes produced by compiling the application and all of the application&amp;rsquo;s dependencies so that it can then be run by using &lt;code&gt;java -jar&lt;/code&gt;. The jar file also contains entries from the application&amp;rsquo;s classpath. You can add and remove explicit paths to the jar by using &lt;code&gt;--include&lt;/code&gt; and &lt;code&gt;--exclude&lt;/code&gt;. Both are comma-separated, and both accept prefixes, in the form of &amp;ldquo;+&amp;rdquo; and &amp;ldquo;-&amp;rdquo;, to signify that they should be removed from the defaults. The default includes are as follows:</source>
          <target state="translated">生成的jar包含通过编译应用程序产生的类以及应用程序的所有依赖关系，以便可以使用 &lt;code&gt;java -jar&lt;/code&gt; 来运行它。jar文件还包含来自应用程序的类路径的条目。您可以使用 &lt;code&gt;--include&lt;/code&gt; 和 &lt;code&gt;--exclude&lt;/code&gt; 添加和删​​除jar的显式路径。两者都用逗号分隔，并且都接受前缀&amp;ldquo; +&amp;rdquo;和&amp;ldquo;-&amp;rdquo;形式，以表示应将其从默认值中删除。默认包括以下内容：</target>
        </trans-unit>
        <trans-unit id="d6ab74c78499e6ae245986c3f7cf71ebf88816ae" translate="yes" xml:space="preserve">
          <source>The root directory of Java class files</source>
          <target state="translated">Java类文件的根目录</target>
        </trans-unit>
        <trans-unit id="8a913686039b3b4682e4ce7f04b2c4236e932082" translate="yes" xml:space="preserve">
          <source>The root name of the pid folder (&lt;code&gt;/var/run&lt;/code&gt; by default).</source>
          <target state="translated">pid文件夹的根名称（默认为 &lt;code&gt;/var/run&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6063d56acda1431d186500ef6658afac24c3a1de" translate="yes" xml:space="preserve">
          <source>The runner can also be used to display the &lt;code&gt;ConditionEvaluationReport&lt;/code&gt;. The report can be printed at &lt;code&gt;INFO&lt;/code&gt; or &lt;code&gt;DEBUG&lt;/code&gt; level. The following example shows how to use the &lt;code&gt;ConditionEvaluationReportLoggingListener&lt;/code&gt; to print the report in auto-configuration tests.</source>
          <target state="translated">运行器还可以用于显示 &lt;code&gt;ConditionEvaluationReport&lt;/code&gt; 。可以以 &lt;code&gt;INFO&lt;/code&gt; 或 &lt;code&gt;DEBUG&lt;/code&gt; 级别打印报告。以下示例显示如何使用 &lt;code&gt;ConditionEvaluationReportLoggingListener&lt;/code&gt; 在自动配置测试中打印报告。</target>
        </trans-unit>
        <trans-unit id="fdefdeb606fd8e2103769c19124ef50d3f866db5" translate="yes" xml:space="preserve">
          <source>The same JSON can also be provided as a system property:</source>
          <target state="translated">同样的JSON也可以作为系统属性提供。</target>
        </trans-unit>
        <trans-unit id="168a430d6f663c315f6c5f56c0aa88991305dfe9" translate="yes" xml:space="preserve">
          <source>The same obstacle and the same features exist for other auto-configured Spring Data repository types (Elasticsearch, Solr, and others). To work with them, change the names of the annotations and flags accordingly.</source>
          <target state="translated">其他自动配置的Spring Data仓库类型(Elasticsearch、Solr等)也存在同样的障碍和功能。要与它们一起工作,请相应地更改注释和标志的名称。</target>
        </trans-unit>
        <trans-unit id="5d5bfb755eabcdbe9aebaee8cf0c09e0c0774e0f" translate="yes" xml:space="preserve">
          <source>The same properties are applicable for both servlet and reactive applications.</source>
          <target state="translated">同样的属性同时适用于servlet和反应式应用。</target>
        </trans-unit>
        <trans-unit id="1c730474fd84a48f2b2ead84f6a28c1587491542" translate="yes" xml:space="preserve">
          <source>The script mode.</source>
          <target state="translated">脚本模式。</target>
        </trans-unit>
        <trans-unit id="8949638a2a05ffe95800562a9365b290276e0ffe" translate="yes" xml:space="preserve">
          <source>The script supports the following features:</source>
          <target state="translated">该脚本支持以下功能。</target>
        </trans-unit>
        <trans-unit id="27a47727a0004a9898df6297805d2e651573334e" translate="yes" xml:space="preserve">
          <source>The search algorithm works up from the package that contains the test until it finds a class annotated with &lt;code&gt;@SpringBootApplication&lt;/code&gt; or &lt;code&gt;@SpringBootConfiguration&lt;/code&gt;. As long as you &lt;a href=&quot;using-spring-boot#using-boot-structuring-your-code&quot;&gt;structured your code&lt;/a&gt; in a sensible way, your main configuration is usually found.</source>
          <target state="translated">搜索算法从包含测试的程序包开始工作，直到找到带有 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 或 &lt;code&gt;@SpringBootConfiguration&lt;/code&gt; 注释的类。只要您以合理的方式&lt;a href=&quot;using-spring-boot#using-boot-structuring-your-code&quot;&gt;对代码&lt;/a&gt;进行结构化，通常就可以找到您的主要配置。</target>
        </trans-unit>
        <trans-unit id="0ef048ac8f05ec378e2f36747fbed1d6f6321b59" translate="yes" xml:space="preserve">
          <source>The search order for properties (where it makes sense to look in more than one place) is environment variables, system properties, &lt;code&gt;loader.properties&lt;/code&gt;, the exploded archive manifest, and the archive manifest.</source>
          <target state="translated">属性（在多个位置中有意义的查找）的搜索顺序是环境变量，系统属性， &lt;code&gt;loader.properties&lt;/code&gt; ，展开的归档清单和归档清单。</target>
        </trans-unit>
        <trans-unit id="b6312603a7b54c45ee7443c027584abf8c08965e" translate="yes" xml:space="preserve">
          <source>The second class-level annotation is &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;. This annotation tells Spring Boot to &amp;ldquo;guess&amp;rdquo; how you want to configure Spring, based on the jar dependencies that you have added. Since &lt;code&gt;spring-boot-starter-web&lt;/code&gt; added Tomcat and Spring MVC, the auto-configuration assumes that you are developing a web application and sets up Spring accordingly.</source>
          <target state="translated">第二个类级别的注释是 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 。这个注释告诉Spring Boot根据添加的jar依赖关系&amp;ldquo;猜测&amp;rdquo;您如何配置Spring。由于 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 添加了Tomcat和Spring MVC，因此自动配置假定您正在开发Web应用程序并相应地设置Spring。</target>
        </trans-unit>
        <trans-unit id="5f1fdf3ab80e4fd38aa7691c4749d381b8f91feb" translate="yes" xml:space="preserve">
          <source>The spec to use to create caches. See CaffeineSpec for more details on the spec format.</source>
          <target state="translated">用来创建缓存的规格。关于规格格式的更多细节请参见CaffeineSpec。</target>
        </trans-unit>
        <trans-unit id="6b040e673e6ea91497941fb691f0dd3de3dce750" translate="yes" xml:space="preserve">
          <source>The special &lt;strong&gt;any&lt;/strong&gt; provider value permits any additional values to be provided. Regular value validation based on the property type should be applied if this is supported.</source>
          <target state="translated">特殊的&lt;strong&gt;任何&lt;/strong&gt;提供程序值允许提供&lt;strong&gt;任何&lt;/strong&gt;附加值。如果支持，则应基于属性类型进行常规值验证。</target>
        </trans-unit>
        <trans-unit id="5ee4e62e24d83e6159af003e9a9637144aff6d7e" translate="yes" xml:space="preserve">
          <source>The specific beans that you want to test should be specified by using the &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;components&lt;/code&gt; attribute of &lt;code&gt;@RestClientTest&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">应该使用 &lt;code&gt;@RestClientTest&lt;/code&gt; 的 &lt;code&gt;value&lt;/code&gt; 或 &lt;code&gt;components&lt;/code&gt; 属性来指定要测试的特定bean ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="624aaade1857f7a5b59667c78133eb24ef9ab303" translate="yes" xml:space="preserve">
          <source>The standard ISO-8601 format &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-&quot;&gt;used by &lt;code&gt;java.time.Duration&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-&quot;&gt; &lt;code&gt;java.time.Duration&lt;/code&gt; &lt;/a&gt;使用的标准ISO-8601格式</target>
        </trans-unit>
        <trans-unit id="ed31ee8401c6a76eca5a62c0884f080d42485bbb" translate="yes" xml:space="preserve">
          <source>The standard ISO-8601 format &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Period.html#parse-java.lang.CharSequence-&quot;&gt;used by &lt;code&gt;java.time.Period&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/Period.html#parse-java.lang.CharSequence-&quot;&gt; &lt;code&gt;java.time.Period&lt;/code&gt; &lt;/a&gt;使用的标准ISO-8601格式</target>
        </trans-unit>
        <trans-unit id="5dc4f420111ffb67b2bd0a0627ff1f97280682bd" translate="yes" xml:space="preserve">
          <source>The starter is really an empty jar. Its only purpose is to provide the necessary dependencies to work with the library. You can think of it as an opinionated view of what is required to get started.</source>
          <target state="translated">Starter其实是一个空的jar。它的唯一目的是提供与库一起工作所需的依赖关系。你可以把它看作是对入门所需的意见。</target>
        </trans-unit>
        <trans-unit id="3f48e8937e7bbb1ea84a7ac89bdba10dde227307" translate="yes" xml:space="preserve">
          <source>The starters contain a lot of the dependencies that you need to get a project up and running quickly and with a consistent, supported set of managed transitive dependencies.</source>
          <target state="translated">启动程序包含了很多你需要的依赖关系,这些依赖关系可以让你快速启动和运行一个项目,并且有一套一致的、受支持的可管理的过渡性依赖关系。</target>
        </trans-unit>
        <trans-unit id="d68fc12f2239c1310b5a39d4f522ee78a0badfdc" translate="yes" xml:space="preserve">
          <source>The support of Infinispan in Spring Boot is restricted to the embedded mode and is quite basic. If you want more options, you should use the official Infinispan Spring Boot starter instead. See &lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan&amp;rsquo;s documentation&lt;/a&gt; for more details.</source>
          <target state="translated">Spring Boot对Infinispan的支持仅限于嵌入式模式，并且是非常基础的。如果您需要更多选择，则应该使用官方的Infinispan Spring Boot启动程序。有关更多详细信息，请参见&lt;a href=&quot;https://github.com/infinispan/infinispan-spring-boot&quot;&gt;Infinispan的文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d57205dec187fccf01eb0d37bb7fb6d672da7cb9" translate="yes" xml:space="preserve">
          <source>The thread pool uses 8 core threads that can grow and shrink according to the load. Those default settings can be fine-tuned using the &lt;code&gt;spring.task.execution&lt;/code&gt; namespace as shown in the following example:</source>
          <target state="translated">线程池使用8个核心线程，这些线程可以根据负载增长和收缩。可以使用 &lt;code&gt;spring.task.execution&lt;/code&gt; 命名空间对这些默认设置进行微调，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="139d12d3a07428b3d60c8bbc86ddfb25804bd847" translate="yes" xml:space="preserve">
          <source>The time in seconds to wait when stopping the application before forcing a shutdown (&lt;code&gt;60&lt;/code&gt; by default).</source>
          <target state="translated">停止应用程序之前要强制关闭的等待时间（以秒为单位）（默认为 &lt;code&gt;60&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b4b0a0193660cea56e48cd8e01cd3774554d0171" translate="yes" xml:space="preserve">
          <source>The title of your application, as declared in &lt;code&gt;MANIFEST.MF&lt;/code&gt;. For example &lt;code&gt;Implementation-Title: MyApp&lt;/code&gt; is printed as &lt;code&gt;MyApp&lt;/code&gt;.</source>
          <target state="translated">您在 &lt;code&gt;MANIFEST.MF&lt;/code&gt; 中声明的应用程序的标题。例如， &lt;code&gt;Implementation-Title: MyApp&lt;/code&gt; 被打印为 &lt;code&gt;MyApp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff9052cf96a405ee7d1b452dbc9249d22577c874" translate="yes" xml:space="preserve">
          <source>The transaction manager's unique name. Defaults to the machine's IP address. If you plan to run more than one transaction manager against one database you must set this property to a unique value.</source>
          <target state="translated">交易管理器的唯一名称。默认为机器的 IP 地址。如果你计划对一个数据库运行多个事务管理器,你必须将此属性设置为唯一值。</target>
        </trans-unit>
        <trans-unit id="323e3efa0c7ca762ce2e087a296e387fc018a02b" translate="yes" xml:space="preserve">
          <source>The underlying component scan configuration of &lt;code&gt;@SpringBootApplication&lt;/code&gt; defines exclude filters that are used to make sure slicing works as expected. If you are using an explicit &lt;code&gt;@ComponentScan&lt;/code&gt; directive on your &lt;code&gt;@SpringBootApplication&lt;/code&gt;-annotated class, be aware that those filters will be disabled. If you are using slicing, you should define them again.</source>
          <target state="translated">&lt;code&gt;@SpringBootApplication&lt;/code&gt; 的基础组件扫描配置定义了用于确保切片按预期工作的排除过滤器。如果在 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 注释的类上使用显式的 &lt;code&gt;@ComponentScan&lt;/code&gt; 指令，请注意那些过滤器将被禁用。如果使用切片，则应重新定义它们。</target>
        </trans-unit>
        <trans-unit id="5a9ad7c14f29550703bab05759d80c59dfde5610" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;java.util.Optional&lt;/code&gt; with &lt;code&gt;@ConfigurationProperties&lt;/code&gt; is not recommended as it is primarily intended for use as a return type. As such, it is not well-suited to configuration property injection. For consistency with properties of other types, if you do declare an &lt;code&gt;Optional&lt;/code&gt; property and it has no value, &lt;code&gt;null&lt;/code&gt; rather than an empty &lt;code&gt;Optional&lt;/code&gt; will be bound.</source>
          <target state="translated">不建议将 &lt;code&gt;java.util.Optional&lt;/code&gt; 与 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 一起使用，因为它主要旨在用作返回类型。因此，它不太适合配置属性注入。为了与其他类型的属性保持一致，如果您声明了 &lt;code&gt;Optional&lt;/code&gt; 属性并且没有任何值，则将绑定 &lt;code&gt;null&lt;/code&gt; 而不是空的 &lt;code&gt;Optional&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c4d918ea289cd8ae552883b8f0e061da31c8de2" translate="yes" xml:space="preserve">
          <source>The user that will be used to run the application. When not set, the user that owns the jar file will be used.</source>
          <target state="translated">运行应用程序的用户。未设置时,使用拥有jar文件的用户。</target>
        </trans-unit>
        <trans-unit id="e8fa0eec0536d894dc988517de76d08301476900" translate="yes" xml:space="preserve">
          <source>The values in &lt;code&gt;application.properties&lt;/code&gt; and &lt;code&gt;application.yml&lt;/code&gt; are filtered through the existing &lt;code&gt;Environment&lt;/code&gt; when they are used, so you can refer back to previously defined values (for example, from System properties). The standard &lt;code&gt;${name}&lt;/code&gt; property-placeholder syntax can be used anywhere within a value.</source>
          <target state="translated">使用 &lt;code&gt;application.properties&lt;/code&gt; 和 &lt;code&gt;application.yml&lt;/code&gt; 中的值时，它们会通过现有的 &lt;code&gt;Environment&lt;/code&gt; 进行过滤，因此您可以参考以前定义的值（例如，从&amp;ldquo;系统&amp;rdquo;属性中）。标准的 &lt;code&gt;${name}&lt;/code&gt; 属性-占位符语法可以在值中的任何位置使用。</target>
        </trans-unit>
        <trans-unit id="9190cfa6216bcb27da846cafe96b7eeaa3f4b953" translate="yes" xml:space="preserve">
          <source>The various logging systems can be activated by including the appropriate libraries on the classpath and can be further customized by providing a suitable configuration file in the root of the classpath or in a location specified by the following Spring &lt;code&gt;Environment&lt;/code&gt; property: &lt;code&gt;logging.config&lt;/code&gt;.</source>
          <target state="translated">可以通过在类路径上包含适当的库来激活各种日志记录系统，并可以通过在类路径的根目录中或在以下Spring &lt;code&gt;Environment&lt;/code&gt; 属性指定的位置中提供适当的配置文件来进一步自定义日志文件： &lt;code&gt;logging.config&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea9707d293ccf299cb339d44d111146843427af1" translate="yes" xml:space="preserve">
          <source>The version number of your application, as declared in &lt;code&gt;MANIFEST.MF&lt;/code&gt; and formatted for display (surrounded with brackets and prefixed with &lt;code&gt;v&lt;/code&gt;). For example &lt;code&gt;(v1.0)&lt;/code&gt;.</source>
          <target state="translated">应用程序的版本号，在 &lt;code&gt;MANIFEST.MF&lt;/code&gt; 中声明，并设置为显示格式（用方括号括起来并以 &lt;code&gt;v&lt;/code&gt; 开头）。例如 &lt;code&gt;(v1.0)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e91b213521b6a64ea8c6dc0164ca179f76d174e" translate="yes" xml:space="preserve">
          <source>The version number of your application, as declared in &lt;code&gt;MANIFEST.MF&lt;/code&gt;. For example, &lt;code&gt;Implementation-Version: 1.0&lt;/code&gt; is printed as &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">您的应用程序的版本号，在 &lt;code&gt;MANIFEST.MF&lt;/code&gt; 中声明。例如， &lt;code&gt;Implementation-Version: 1.0&lt;/code&gt; 被打印为 &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5f0752aeec84e6d3c5af5a00d9ae91322fa8c47" translate="yes" xml:space="preserve">
          <source>The version of the Servlet API has been overridden as, unlike Tomcat 9 and Undertow 2.0, Jetty 9.4 does not support Servlet 4.0.</source>
          <target state="translated">Servlet API的版本已经被覆盖,因为与Tomcat 9和Undertow 2.0不同,Jetty 9.4不支持Servlet 4.0。</target>
        </trans-unit>
        <trans-unit id="58a0458eceffaecaf4c599833e34501a0c8b945b" translate="yes" xml:space="preserve">
          <source>Then deploy with &lt;code&gt;mvn appengine:deploy&lt;/code&gt; (if you need to authenticate first, the build fails).</source>
          <target state="translated">然后使用 &lt;code&gt;mvn appengine:deploy&lt;/code&gt; 进行部署（如果您需要先进行身份验证，则构建会失败）。</target>
        </trans-unit>
        <trans-unit id="989a333b31e0cf5776a6c5f16ef1d1553ecf66ac" translate="yes" xml:space="preserve">
          <source>Then run it from a shell, as follows:</source>
          <target state="translated">然后在shell中运行它,如下。</target>
        </trans-unit>
        <trans-unit id="57a05dc94d517aab86621a8e7972896e91e5e20c" translate="yes" xml:space="preserve">
          <source>Then the Spring Boot banner is not printed on startup, and the application is not starting an embedded web server.</source>
          <target state="translated">然后在启动时没有打印Spring Boot横幅,应用程序也没有启动嵌入式Web服务器。</target>
        </trans-unit>
        <trans-unit id="8b9325ac9ca277c8064872ad0325431cccfac3cb" translate="yes" xml:space="preserve">
          <source>Then you can use the factory in any &lt;code&gt;@JmsListener&lt;/code&gt;-annotated method as follows:</source>
          <target state="translated">然后，您可以在任何 &lt;code&gt;@JmsListener&lt;/code&gt; 注释方法中使用工厂，如下所示：</target>
        </trans-unit>
        <trans-unit id="5a2377c4d541cda703168e28b29a9d95f9ad14ed" translate="yes" xml:space="preserve">
          <source>Then you can use the factory in any &lt;code&gt;@RabbitListener&lt;/code&gt;-annotated method, as follows:</source>
          <target state="translated">然后，您可以在任何 &lt;code&gt;@RabbitListener&lt;/code&gt; 注释方法中使用工厂，如下所示：</target>
        </trans-unit>
        <trans-unit id="58c53a30c8e030c6abc7314a5b286940396add8c" translate="yes" xml:space="preserve">
          <source>Then you need to set the &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; property. Like any important password or secret, the value should be unique and strong such that it cannot be guessed or brute-forced.</source>
          <target state="translated">然后，您需要设置 &lt;code&gt;spring.devtools.remote.secret&lt;/code&gt; 属性。像任何重要的密码或机密一样，该值应唯一且强壮，以免被猜测或强行使用。</target>
        </trans-unit>
        <trans-unit id="384ff344f842b8f0560a95553388cfbf26ccde90" translate="yes" xml:space="preserve">
          <source>Then your &lt;code&gt;trigger-file&lt;/code&gt; property would be:</source>
          <target state="translated">那么您的 &lt;code&gt;trigger-file&lt;/code&gt; 属性将是：</target>
        </trans-unit>
        <trans-unit id="ccdfa9227a253a5861f872456e0f4d5fa4d8beab" translate="yes" xml:space="preserve">
          <source>There are a few beans that you can define in your own configuration to override those provided by the auto-configuration:</source>
          <target state="translated">你可以在自己的配置中定义一些Bean来覆盖那些由自动配置提供的配置。</target>
        </trans-unit>
        <trans-unit id="425abf8c629c289c50cf0ad1ec052005ed1a9a5b" translate="yes" xml:space="preserve">
          <source>There are a lot of logging frameworks available for Java. Do not worry if the above list seems confusing. Generally, you do not need to change your logging dependencies and the Spring Boot defaults work just fine.</source>
          <target state="translated">有很多的日志框架可用于Java。如果上面的列表看起来很混乱,不要担心。一般来说,你不需要改变你的日志依赖,Spring Boot的默认值也能正常工作。</target>
        </trans-unit>
        <trans-unit id="e8ade31e706a9780e6e6bc8690ff1ecdaf000ec2" translate="yes" xml:space="preserve">
          <source>There are also flags (&lt;code&gt;spring.data.*.repositories.enabled&lt;/code&gt; and &lt;code&gt;spring.data.*.repositories.type&lt;/code&gt;) that you can use to switch the auto-configured repositories on and off in external configuration. Doing so is useful, for instance, in case you want to switch off the Mongo repositories and still use the auto-configured &lt;code&gt;MongoTemplate&lt;/code&gt;.</source>
          <target state="translated">您还可以使用一些标志（ &lt;code&gt;spring.data.*.repositories.enabled&lt;/code&gt; 和 &lt;code&gt;spring.data.*.repositories.type&lt;/code&gt; ）在外部配置中打开和关闭自动配置的存储库。这样做很有用，例如，如果您想关闭Mongo存储库并仍然使用自动配置的 &lt;code&gt;MongoTemplate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de8a4cfb76232f0ed266f7a57f84db29be0f3c47" translate="yes" xml:space="preserve">
          <source>There are known classloading issues with Java Util Logging that cause problems when running from an 'executable jar'. We recommend that you avoid it when running from an 'executable jar' if at all possible.</source>
          <target state="translated">Java Util Logging存在已知的类加载问题,当从 &quot;可执行jar &quot;运行时,会导致问题。我们建议你在从 &quot;可执行的jar &quot;中运行时尽可能避免使用它。</target>
        </trans-unit>
        <trans-unit id="ceaec725a4c57314c345ad0f1d94e77aa5f5f694" translate="yes" xml:space="preserve">
          <source>There are other ways to deal with HTTP clients that don&amp;rsquo;t consistently send proper &quot;Accept&quot; request headers. Instead of using suffix matching, we can use a query parameter to ensure that requests like &lt;code&gt;&quot;GET /projects/spring-boot?format=json&quot;&lt;/code&gt; will be mapped to &lt;code&gt;@GetMapping(&quot;/projects/spring-boot&quot;)&lt;/code&gt;:</source>
          <target state="translated">还有其他处理HTTP客户端的方法，这些方法不能始终发送正确的&amp;ldquo; Accept&amp;rdquo;请求标头。除了使用后缀匹配，我们还可以使用查询参数来确保将 &lt;code&gt;&quot;GET /projects/spring-boot?format=json&quot;&lt;/code&gt; 类的请求映射到 &lt;code&gt;@GetMapping(&quot;/projects/spring-boot&quot;)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c0f87a01efdb08c2ca7aa927d4de704b233ead45" translate="yes" xml:space="preserve">
          <source>There are several options for hot reloading. The recommended approach is to use &lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt;&lt;code&gt;spring-boot-devtools&lt;/code&gt;&lt;/a&gt;, as it provides additional development-time features, such as support for fast application restarts and LiveReload as well as sensible development-time configuration (such as template caching). Devtools works by monitoring the classpath for changes. This means that static resource changes must be &quot;built&quot; for the change to take effect. By default, this happens automatically in Eclipse when you save your changes. In IntelliJ IDEA, the Make Project command triggers the necessary build. Due to the &lt;a href=&quot;using-spring-boot#using-boot-devtools-restart-exclude&quot;&gt;default restart exclusions&lt;/a&gt;, changes to static resources do not trigger a restart of your application. They do, however, trigger a live reload.</source>
          <target state="translated">有几种热重装选项。推荐的方法是使用&lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt; &lt;code&gt;spring-boot-devtools&lt;/code&gt; &lt;/a&gt;，因为它提供了其他开发时功能，例如对应用程序快速重启和LiveReload的支持，以及合理的开发时配置（例如模板缓存）。 Devtools通过监视类路径的更改来工作。这意味着必须&amp;ldquo;构建&amp;rdquo;静态资源更改才能使更改生效。默认情况下，当您保存更改时，这会自动在Eclipse中发生。在IntelliJ IDEA中，&amp;ldquo;生成项目&amp;rdquo;命令将触发必要的构建。由于&lt;a href=&quot;using-spring-boot#using-boot-devtools-restart-exclude&quot;&gt;默认的重新启动排除项&lt;/a&gt;，对静态资源的更改不会触发应用程序的重新启动。但是，它们确实会触发实时重新加载。</target>
        </trans-unit>
        <trans-unit id="557faa4b4531f554689e50f1bb964199ae699721" translate="yes" xml:space="preserve">
          <source>There are some &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/samples&quot;&gt;sample groovy scripts&lt;/a&gt; available from the GitHub repository that you can use to try out the Spring Boot CLI. There is also extensive Javadoc throughout the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli&quot;&gt;source code&lt;/a&gt;.</source>
          <target state="translated">GitHub存储库中提供了一些&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/samples&quot;&gt;示例groovy脚本&lt;/a&gt;，您可以使用它们来试用Spring Boot CLI。在整个&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli&quot;&gt;源代码中&lt;/a&gt;也有广泛的Javadoc 。</target>
        </trans-unit>
        <trans-unit id="538107ecc74950d032826f75a558da2d873a3ae1" translate="yes" xml:space="preserve">
          <source>There are some restrictions when creating an &lt;code&gt;ApplicationContext&lt;/code&gt; hierarchy. For example, Web components &lt;strong&gt;must&lt;/strong&gt; be contained within the child context, and the same &lt;code&gt;Environment&lt;/code&gt; is used for both parent and child contexts. See the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/builder/SpringApplicationBuilder.html&quot;&gt;&lt;code&gt;SpringApplicationBuilder&lt;/code&gt; Javadoc&lt;/a&gt; for full details.</source>
          <target state="translated">创建 &lt;code&gt;ApplicationContext&lt;/code&gt; 层次结构时有一些限制。例如，Web组件&lt;strong&gt;必须&lt;/strong&gt;包含在子上下文中，并且父上下文和子上下文都使用相同的 &lt;code&gt;Environment&lt;/code&gt; 。有关完整的详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/builder/SpringApplicationBuilder.html&quot;&gt; &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; Javadoc&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b2c27f6f090ba9b26d24ad02e691e580906bc8c4" translate="yes" xml:space="preserve">
          <source>There are three launcher subclasses (&lt;code&gt;JarLauncher&lt;/code&gt;, &lt;code&gt;WarLauncher&lt;/code&gt;, and &lt;code&gt;PropertiesLauncher&lt;/code&gt;). Their purpose is to load resources (&lt;code&gt;.class&lt;/code&gt; files and so on) from nested jar files or war files in directories (as opposed to those explicitly on the classpath). In the case of &lt;code&gt;JarLauncher&lt;/code&gt; and &lt;code&gt;WarLauncher&lt;/code&gt;, the nested paths are fixed. &lt;code&gt;JarLauncher&lt;/code&gt; looks in &lt;code&gt;BOOT-INF/lib/&lt;/code&gt;, and &lt;code&gt;WarLauncher&lt;/code&gt; looks in &lt;code&gt;WEB-INF/lib/&lt;/code&gt; and &lt;code&gt;WEB-INF/lib-provided/&lt;/code&gt;. You can add extra jars in those locations if you want more. The &lt;code&gt;PropertiesLauncher&lt;/code&gt; looks in &lt;code&gt;BOOT-INF/lib/&lt;/code&gt; in your application archive by default. You can add additional locations by setting an environment variable called &lt;code&gt;LOADER_PATH&lt;/code&gt; or &lt;code&gt;loader.path&lt;/code&gt; in &lt;code&gt;loader.properties&lt;/code&gt; (which is a comma-separated list of directories, archives, or directories within archives).</source>
          <target state="translated">有三个启动器子类（ &lt;code&gt;JarLauncher&lt;/code&gt; ， &lt;code&gt;WarLauncher&lt;/code&gt; 和 &lt;code&gt;PropertiesLauncher&lt;/code&gt; ）。它们的目的是从目录中的嵌套jar文件或war文件（而不是在类路径中显式的文件）加载资源（ &lt;code&gt;.class&lt;/code&gt; 文件等）。对于 &lt;code&gt;JarLauncher&lt;/code&gt; 和 &lt;code&gt;WarLauncher&lt;/code&gt; 而言，嵌套路径是固定的。 &lt;code&gt;JarLauncher&lt;/code&gt; 位于 &lt;code&gt;BOOT-INF/lib/&lt;/code&gt; ，而 &lt;code&gt;WarLauncher&lt;/code&gt; 位于 &lt;code&gt;WEB-INF/lib/&lt;/code&gt; 和 &lt;code&gt;WEB-INF/lib-provided/&lt;/code&gt; 。如果需要，可以在这些位置添加额外的罐子。该 &lt;code&gt;PropertiesLauncher&lt;/code&gt; 看起来 &lt;code&gt;BOOT-INF/lib/&lt;/code&gt; 默认情况下，BOOT-INF / lib /在您的应用程序存档中。您可以通过在 &lt;code&gt;loader.properties&lt;/code&gt; （这是目录，归档文件或归档文件中的目录的逗号分隔列表）中设置一个称为 &lt;code&gt;LOADER_PATH&lt;/code&gt; 或 &lt;code&gt;loader.path&lt;/code&gt; 的环境变量来添加其他位置。</target>
        </trans-unit>
        <trans-unit id="27a0665393b541f06548169da01a06cadb355c70" translate="yes" xml:space="preserve">
          <source>There are three main approaches to &lt;code&gt;RestTemplate&lt;/code&gt; customization, depending on how broadly you want the customizations to apply.</source>
          <target state="translated">&lt;code&gt;RestTemplate&lt;/code&gt; 自定义有三种主要方法，具体取决于您希望自定义应用的范围。</target>
        </trans-unit>
        <trans-unit id="f368e4efabb8490ea532fbe55068854e1de9ba37" translate="yes" xml:space="preserve">
          <source>There are three main approaches to &lt;code&gt;WebClient&lt;/code&gt; customization, depending on how broadly you want the customizations to apply.</source>
          <target state="translated">&lt;code&gt;WebClient&lt;/code&gt; 自定义有三种主要方法，具体取决于您希望自定义应用的范围。</target>
        </trans-unit>
        <trans-unit id="a1226d8e7751fd57d5965a5eeb7a27ca0e104cfd" translate="yes" xml:space="preserve">
          <source>There are two common volume mount patterns that can be use:</source>
          <target state="translated">有两种常见的体积安装模式可以使用。</target>
        </trans-unit>
        <trans-unit id="8357a4edc615e769472974e0f70ba5355cf5c226" translate="yes" xml:space="preserve">
          <source>There are two ways to customize the underlying &lt;code&gt;javax.cache.cacheManager&lt;/code&gt;:</source>
          <target state="translated">有两种方法可以自定义基础 &lt;code&gt;javax.cache.cacheManager&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="88c30a36fa616a98131ac6657138bbe58b5f5e86" translate="yes" xml:space="preserve">
          <source>There is a &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; for collecting the dependencies in a convenient way. By default, it uses &lt;a href=&quot;https://github.com/lettuce-io/lettuce-core/&quot;&gt;Lettuce&lt;/a&gt;. That starter handles both traditional and reactive applications.</source>
          <target state="translated">有一个 &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt; &amp;ldquo;启动器&amp;rdquo;，以方便的方式收集依赖项。默认情况下，它使用&lt;a href=&quot;https://github.com/lettuce-io/lettuce-core/&quot;&gt;Lettuce&lt;/a&gt;。该启动程序可以处理传统应用程序和响应式应用程序。</target>
        </trans-unit>
        <trans-unit id="839c5fcc904189d453d4c2904fd18c00ad3f0581" translate="yes" xml:space="preserve">
          <source>There is a really useful &lt;code&gt;ConditionEvaluationReport&lt;/code&gt; available in any Spring Boot &lt;code&gt;ApplicationContext&lt;/code&gt;. You can see it if you enable &lt;code&gt;DEBUG&lt;/code&gt; logging output. If you use the &lt;code&gt;spring-boot-actuator&lt;/code&gt; (see &lt;a href=&quot;production-ready-features#production-ready&quot;&gt;the Actuator chapter&lt;/a&gt;), there is also a &lt;code&gt;conditions&lt;/code&gt; endpoint that renders the report in JSON. Use that endpoint to debug the application and see what features have been added (and which have not been added) by Spring Boot at runtime.</source>
          <target state="translated">在任何Spring Boot &lt;code&gt;ApplicationContext&lt;/code&gt; 中都有一个非常有用的 &lt;code&gt;ConditionEvaluationReport&lt;/code&gt; 。如果启用 &lt;code&gt;DEBUG&lt;/code&gt; 日志记录输出，则可以看到它。如果您使用 &lt;code&gt;spring-boot-actuator&lt;/code&gt; （请参阅&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;&amp;ldquo;执行器&amp;rdquo;一章&lt;/a&gt;），那么还有一个 &lt;code&gt;conditions&lt;/code&gt; 终结点以JSON形式呈现报告。使用该端点来调试应用程序，并在运行时查看Spring Boot已添加（未添加）的功能。</target>
        </trans-unit>
        <trans-unit id="45233fe53947bb4ac0476ef247598d4f0c3ee9f2" translate="yes" xml:space="preserve">
          <source>There is no way to set a &lt;code&gt;level&lt;/code&gt;. &lt;code&gt;warning&lt;/code&gt; is always assumed, since code is still handling the property.</source>
          <target state="translated">无法设置一个 &lt;code&gt;level&lt;/code&gt; 。由于代码仍在处理该属性，因此始终假定 &lt;code&gt;warning&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27d6d6f6096f1cb8bbe0350385f5a004d22d9547" translate="yes" xml:space="preserve">
          <source>These dependencies and plugins are provided by default if one bootstraps a Kotlin project on &lt;a href=&quot;https://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt;.</source>
          <target state="translated">如果在&lt;a href=&quot;https://start.spring.io/#!language=kotlin&quot;&gt;start.spring.io&lt;/a&gt;上引导Kotlin项目，则默认情况下会提供这些依赖项和插件。</target>
        </trans-unit>
        <trans-unit id="f7ef323901d758fe1d4facaf098332d6d3fb97aa" translate="yes" xml:space="preserve">
          <source>These health groups are only enabled automatically if the application is &lt;a href=&quot;deployment#cloud-deployment-kubernetes&quot;&gt;running in a Kubernetes environment&lt;/a&gt;. You can enable them in any environment using the &lt;code&gt;management.endpoint.health.probes.enabled&lt;/code&gt; configuration property.</source>
          <target state="translated">仅当应用程序&lt;a href=&quot;deployment#cloud-deployment-kubernetes&quot;&gt;在Kubernetes环境中运行时，&lt;/a&gt;才会自动启用这些运行状况组。您可以使用 &lt;code&gt;management.endpoint.health.probes.enabled&lt;/code&gt; 配置属性在任何环境中启用它们。</target>
        </trans-unit>
        <trans-unit id="9a59d84acc0ec9d6e5db2bb99bf2624f34436039" translate="yes" xml:space="preserve">
          <source>Third-party jars can offer support for additional technologies (there&amp;rsquo;s no requirement for files to be local). For example, you can imagine config data being from external stores such as Consul, Apache ZooKeeper or Netflix Archaius.</source>
          <target state="translated">第三方jar可以提供对其他技术的支持（不需要文件位于本地）。例如，您可以想象配置数据来自外部存储，例如Consul，Apache ZooKeeper或Netflix Archaius。</target>
        </trans-unit>
        <trans-unit id="d1fc47d650603c07292adc68cc14dc2f7a20728e" translate="yes" xml:space="preserve">
          <source>This appendix contains details of all of the auto-configuration classes provided by Spring Boot, with links to documentation and source code. Remember to also look at the conditions report in your application for more details of which features are switched on. (To do so, start the app with &lt;code&gt;--debug&lt;/code&gt; or &lt;code&gt;-Ddebug&lt;/code&gt; or, in an Actuator application, use the &lt;code&gt;conditions&lt;/code&gt; endpoint).</source>
          <target state="translated">本附录包含Spring Boot提供的所有自动配置类的详细信息，以及指向文档和源代码的链接。请记住，还要查看应用程序中的条件报告，以了解有关哪些功能已打开的更多详细信息。（为此，请使用 &lt;code&gt;--debug&lt;/code&gt; 或 &lt;code&gt;-Ddebug&lt;/code&gt; 启动应用程序，或者在Actuator应用程序中，使用 &lt;code&gt;conditions&lt;/code&gt; 端点）。</target>
        </trans-unit>
        <trans-unit id="984f673e277732a56de47a940ed29e7eb8783fb0" translate="yes" xml:space="preserve">
          <source>This appendix describes the &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; auto-configuration annotations that Spring Boot provides to test slices of your application.</source>
          <target state="translated">本附录描述了Spring Boot提供的用于测试应用程序切片的 &lt;code&gt;@&amp;hellip;Test&lt;/code&gt; 自动配置注释。</target>
        </trans-unit>
        <trans-unit id="ccf6a65ddbbb1be5f0033981a73b112335a52150" translate="yes" xml:space="preserve">
          <source>This appendix provides details of the dependencies that are managed by Spring Boot.</source>
          <target state="translated">本附录提供了由Spring Boot管理的依赖关系的详细信息。</target>
        </trans-unit>
        <trans-unit id="b2c91bccdf113474da4e53bebb554f7a4903992e" translate="yes" xml:space="preserve">
          <source>This can be achieved using the &lt;code&gt;management.endpoints.web.exposure.exclude&lt;/code&gt; property as well, as shown in the following example:</source>
          <target state="translated">也可以使用 &lt;code&gt;management.endpoints.web.exposure.exclude&lt;/code&gt; 属性来实现，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="be3038015bd38bcaa3e17a77de5bea4252ebee38" translate="yes" xml:space="preserve">
          <source>This can be done with a static &lt;code&gt;@DynamicPropertySource&lt;/code&gt; method that allows adding dynamic property values to the Spring Environment.</source>
          <target state="translated">这可以通过允许在Spring Environment中添加动态属性值的静态 &lt;code&gt;@DynamicPropertySource&lt;/code&gt; 方法来完成。</target>
        </trans-unit>
        <trans-unit id="a61838b1bb1e6ad76a8585f2f1a3bb5a82532259" translate="yes" xml:space="preserve">
          <source>This can be used to invoke a write operation that takes &lt;code&gt;String name&lt;/code&gt; and &lt;code&gt;int counter&lt;/code&gt; parameters, as shown in the following example:</source>
          <target state="translated">可以用来调用采用 &lt;code&gt;String name&lt;/code&gt; 和 &lt;code&gt;int counter&lt;/code&gt; 参数的写操作，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="c9a9010abe3110cb625dd05b7d1c4d4336fc4507" translate="yes" xml:space="preserve">
          <source>This changes the thread pool to use a bounded queue so that when the queue is full (100 tasks), the thread pool increases to maximum 16 threads. Shrinking of the pool is more aggressive as threads are reclaimed when they are idle for 10 seconds (rather than 60 seconds by default).</source>
          <target state="translated">这将线程池改为使用有界队列,这样当队列满了(100个任务),线程池就会增加到最大16个线程。线程池的收缩更加激进,因为当线程空闲10秒(而不是默认的60秒)时,线程就会被回收。</target>
        </trans-unit>
        <trans-unit id="19140306758e9479ce889f0e36b875db09a91869" translate="yes" xml:space="preserve">
          <source>This contract is well suited for tasks that should run after application startup but before it starts accepting traffic.</source>
          <target state="translated">这个合同很适合于应该在应用程序启动后但在它开始接受流量之前运行的任务。</target>
        </trans-unit>
        <trans-unit id="9ccc535292943cb99a6236fb50422982b6375e4c" translate="yes" xml:space="preserve">
          <source>This customizer will configure Hibernate to use the same &lt;code&gt;CacheManager&lt;/code&gt; as the one that the application uses. It is also possible to use separate &lt;code&gt;CacheManager&lt;/code&gt; instances. For details, refer to &lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#caching-provider-jcache&quot;&gt;the Hibernate user guide&lt;/a&gt;.</source>
          <target state="translated">这个定制器将配置Hibernate使用与应用程序相同的 &lt;code&gt;CacheManager&lt;/code&gt; 。也可以使用单独的 &lt;code&gt;CacheManager&lt;/code&gt; 实例。有关详细信息，请参阅&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#caching-provider-jcache&quot;&gt;《 Hibernate用户指南》&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d931ce8f98edb34b2725769650fa06f92889a5f5" translate="yes" xml:space="preserve">
          <source>This dependency ensures that the additional metadata is available when the annotation processor runs during compilation.</source>
          <target state="translated">这个依赖性确保了在编译过程中注释处理器运行时,附加元数据是可用的。</target>
        </trans-unit>
        <trans-unit id="e2e9f15a4265ff675c8ffa73c78fd4c2bff7f01a" translate="yes" xml:space="preserve">
          <source>This environment-based configuration is applied to the auto-configured &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; bean and applies to any mappers created by using the builder, including the auto-configured &lt;code&gt;ObjectMapper&lt;/code&gt; bean.</source>
          <target state="translated">这种基于环境的配置将应用于自动配置的 &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; Bean，并应用于使用该构建器创建的任何映射器，包括自动配置的 &lt;code&gt;ObjectMapper&lt;/code&gt; Bean。</target>
        </trans-unit>
        <trans-unit id="4c782d4945d30386e771eb84a56e0439f0f7dea7" translate="yes" xml:space="preserve">
          <source>This error is not fatal, and the application still starts with HTTP/1.1 SSL support.</source>
          <target state="translated">这个错误不是致命的,应用程序仍然以HTTP/1.1 SSL支持启动。</target>
        </trans-unit>
        <trans-unit id="3fd2a3db4f896a900f42aa5368eb8076a7ac1836" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of caching on a potentially costly operation. Before invoking &lt;code&gt;computePiDecimal&lt;/code&gt;, the abstraction looks for an entry in the &lt;code&gt;piDecimals&lt;/code&gt; cache that matches the &lt;code&gt;i&lt;/code&gt; argument. If an entry is found, the content in the cache is immediately returned to the caller, and the method is not invoked. Otherwise, the method is invoked, and the cache is updated before returning the value.</source>
          <target state="translated">本示例演示了在可能耗资巨大的操作上使用缓存的方法。在调用 &lt;code&gt;computePiDecimal&lt;/code&gt; 之前，抽象将在 &lt;code&gt;piDecimals&lt;/code&gt; 缓存中查找与 &lt;code&gt;i&lt;/code&gt; 参数匹配的条目。如果找到条目，则高速缓存中的内容会立即返回给调用方，并且不会调用该方法。否则，将调用该方法，并在返回值之前更新缓存。</target>
        </trans-unit>
        <trans-unit id="4ae35b375e3c0e286e69190c8b8387e8cd414874" translate="yes" xml:space="preserve">
          <source>This exposes three properties where &lt;code&gt;server.name&lt;/code&gt; has no default and &lt;code&gt;server.ip&lt;/code&gt; and &lt;code&gt;server.port&lt;/code&gt; defaults to &lt;code&gt;&quot;127.0.0.1&quot;&lt;/code&gt; and &lt;code&gt;9797&lt;/code&gt; respectively. The Javadoc on fields is used to populate the &lt;code&gt;description&lt;/code&gt; attribute. For instance, the description of &lt;code&gt;server.ip&lt;/code&gt; is &quot;IP address to listen to.&quot;.</source>
          <target state="translated">这显示了三个属性，其中 &lt;code&gt;server.name&lt;/code&gt; 没有默认值， &lt;code&gt;server.ip&lt;/code&gt; 和 &lt;code&gt;server.port&lt;/code&gt; 分别默认为 &lt;code&gt;&quot;127.0.0.1&quot;&lt;/code&gt; 和 &lt;code&gt;9797&lt;/code&gt; 。字段上的Javadoc用于填充 &lt;code&gt;description&lt;/code&gt; 属性。例如， &lt;code&gt;server.ip&lt;/code&gt; 的描述是&amp;ldquo;要收听的IP地址&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="9c950af61168cf48f875069726b5829662150d1a" translate="yes" xml:space="preserve">
          <source>This feature has been thoroughly described in a dedicated &lt;a href=&quot;https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources&quot;&gt;blog post&lt;/a&gt; and in Spring Framework&amp;rsquo;s &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-config-static-resources&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">专门的&lt;a href=&quot;https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources&quot;&gt;博客文章&lt;/a&gt;和Spring Framework的&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-config-static-resources&quot;&gt;参考文档中&lt;/a&gt;已经对该功能进行了全面的描述。</target>
        </trans-unit>
        <trans-unit id="e2138520f355b2c407e5f15678dd9e192623d173" translate="yes" xml:space="preserve">
          <source>This has no effect on collections and maps, as those types are automatically identified, and a single metadata property is generated for each of them.</source>
          <target state="translated">这对集合和地图没有影响,因为这些类型会被自动识别,并为每个类型生成一个元数据属性。</target>
        </trans-unit>
        <trans-unit id="460f041997c5287303b677888b9ee4c179f56597" translate="yes" xml:space="preserve">
          <source>This is a drop-in replacement for &lt;code&gt;SpringApplication.run(MyApplication::class.java, *args)&lt;/code&gt;. It also allows customization of the application as shown in the following example:</source>
          <target state="translated">这是 &lt;code&gt;SpringApplication.run(MyApplication::class.java, *args)&lt;/code&gt; 替代。它还允许自定义应用程序，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="774d83552d4cc4ae6cba6a40e5ba717384d23635" translate="yes" xml:space="preserve">
          <source>This is a multi-stage dockerfile. The builder stage extracts the directories that are needed later. Each of the &lt;code&gt;COPY&lt;/code&gt; commands relates to the layers extracted by the jarmode.</source>
          <target state="translated">这是一个多阶段的dockerfile。构建器阶段提取以后需要的目录。每个 &lt;code&gt;COPY&lt;/code&gt; 命令都与jarmode提取的图层有关。</target>
        </trans-unit>
        <trans-unit id="65abcee4f5c5b820de47a4aeaa7773ed7b5f7459" translate="yes" xml:space="preserve">
          <source>This is actually slightly faster on startup (depending on the size of the jar) than running from an unexploded archive. At runtime you shouldn&amp;rsquo;t expect any differences.</source>
          <target state="translated">实际上，这在启动时（取决于jar的大小）比从未爆炸的存档中运行要快一些。在运行时，您不应期望有任何差异。</target>
        </trans-unit>
        <trans-unit id="cc6e682516a6ad09927269eec4316520d0e41594" translate="yes" xml:space="preserve">
          <source>This is one of the easiest ways to get to AWS, but there are more things to cover, such as how to integrate Elastic Beanstalk into any CI / CD tool, use the Elastic Beanstalk Maven plugin instead of the CLI, and others. There is a &lt;a href=&quot;https://exampledriven.wordpress.com/2017/01/09/spring-boot-aws-elastic-beanstalk-example/&quot;&gt;blog post&lt;/a&gt; covering these topics more in detail.</source>
          <target state="translated">这是使用AWS的最简单方法之一，但还有更多内容要讲，例如如何将Elastic Beanstalk集成到任何CI / CD工具中，如何使用Elastic Beanstalk Maven插件而不是CLI等等。有一篇&lt;a href=&quot;https://exampledriven.wordpress.com/2017/01/09/spring-boot-aws-elastic-beanstalk-example/&quot;&gt;博客文章&lt;/a&gt;详细介绍了这些主题。</target>
        </trans-unit>
        <trans-unit id="27f478501081366262c7458d55c6be86a05cb986" translate="yes" xml:space="preserve">
          <source>This is typically manifested by a warning in the &lt;code&gt;RemoteSpringApplication&lt;/code&gt; logs about failing to upload some of the classes, and a consequent retry. But it may also lead to application code inconsistency and failure to restart after the first batch of changes is uploaded. If you observe such problems constantly, try increasing the &lt;code&gt;spring.devtools.restart.poll-interval&lt;/code&gt; and &lt;code&gt;spring.devtools.restart.quiet-period&lt;/code&gt; parameters to the values that fit your development environment. See the &lt;a href=&quot;#configuring-file-system-watcher&quot;&gt;Configuring File System Watcher&lt;/a&gt; section for configuring these properties.</source>
          <target state="translated">这通常通过 &lt;code&gt;RemoteSpringApplication&lt;/code&gt; 日志中的警告来证明，即有关上载某些类失败的消息，然后进行重试。但是，这也可能导致应用程序代码不一致，并且在上传第一批更改后无法重新启动。如果您经常观察到此类问题，请尝试将 &lt;code&gt;spring.devtools.restart.poll-interval&lt;/code&gt; 和 &lt;code&gt;spring.devtools.restart.quiet-period&lt;/code&gt; 参数增加到适合您的开发环境的值。请参阅&amp;ldquo;&lt;a href=&quot;#configuring-file-system-watcher&quot;&gt;配置文件系统监视程序&amp;rdquo;&lt;/a&gt;部分以配置这些属性。</target>
        </trans-unit>
        <trans-unit id="8807232cdffcee31c30f8455dbe11a36471d8a89" translate="yes" xml:space="preserve">
          <source>This layering is designed to separate code based on how likely it is to change between application builds. Library code is less likely to change between builds, so it is placed in its own layers to allow tooling to re-use the layers from cache. Application code is more likely to change between builds so it is isolated in a separate layer.</source>
          <target state="translated">这种分层的设计是为了根据应用程序构建之间变化的可能性来分离代码。库代码在两次构建之间变化的可能性较小,所以它被放置在自己的层中,以允许工具从缓存中重用这些层。应用程序代码在两次构建之间变化的可能性较大,所以它被隔离在一个单独的层中。</target>
        </trans-unit>
        <trans-unit id="c5ef4701b03e6884ae66365ff7c9a5c4b0e5907f" translate="yes" xml:space="preserve">
          <source>This means that Spring Boot will create a &lt;code&gt;RSocketMessageHandler&lt;/code&gt; bean that will handle RSocket requests to your application.</source>
          <target state="translated">这意味着Spring Boot将创建一个 &lt;code&gt;RSocketMessageHandler&lt;/code&gt; bean，该bean将处理对您的应用程序的RSocket请求。</target>
        </trans-unit>
        <trans-unit id="5eae2e67718a6dfd9018f9e6399d25366f798b97" translate="yes" xml:space="preserve">
          <source>This means that if you are using Spring MVC and the new &lt;code&gt;WebClient&lt;/code&gt; from Spring WebFlux in the same application, Spring MVC will be used by default. You can override that easily by calling &lt;code&gt;setWebApplicationType(WebApplicationType)&lt;/code&gt;.</source>
          <target state="translated">这意味着，如果您在同一应用程序中使用Spring MVC和来自Spring WebFlux的新 &lt;code&gt;WebClient&lt;/code&gt; ，则默认情况下将使用Spring MVC。您可以通过调用 &lt;code&gt;setWebApplicationType(WebApplicationType)&lt;/code&gt; 轻松覆盖它。</target>
        </trans-unit>
        <trans-unit id="2646b2d13175c223b62a39f5ddfe7f8157de525a" translate="yes" xml:space="preserve">
          <source>This mechanism does not apply the same way to &lt;code&gt;@Bean&lt;/code&gt; methods where typically the return type is the target of the condition: before the condition on the method applies, the JVM will have loaded the class and potentially processed method references which will fail if the class is not present.</source>
          <target state="translated">这种机制不适用于 &lt;code&gt;@Bean&lt;/code&gt; 方法，通常返回类型是条件的目标：@Bean在方法的条件适用之前，JVM将加载该类和可能处理的方法引用，如果该类失败，则该引用将失败。不存在。</target>
        </trans-unit>
        <trans-unit id="e04a6129637843867969bfeb4e068f988b2c1482" translate="yes" xml:space="preserve">
          <source>This option applies to Spring Boot projects that produce a jar file and run an embedded web container. Elastic Beanstalk environments run an nginx instance on port 80 to proxy the actual application, running on port 5000. To configure it, add the following line to your &lt;code&gt;application.properties&lt;/code&gt; file:</source>
          <target state="translated">此选项适用于产生jar文件并运行嵌入式Web容器的Spring Boot项目。Elastic Beanstalk环境在端口80上运行nginx实例以代理在端口5000上运行的实际应用程序。要对其进行配置，请将以下行添加到 &lt;code&gt;application.properties&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="23d1133621317af1d989c72131e4710179de628d" translate="yes" xml:space="preserve">
          <source>This option applies to Spring Boot projects that produce a war file. No special configuration is required. You need only follow the official guide.</source>
          <target state="translated">该选项适用于产生 war 文件的 Spring Boot 项目。无需特殊配置。您只需要遵循官方指南。</target>
        </trans-unit>
        <trans-unit id="e0505b8a65050cd0e9d9b2071f29719bc73899b3" translate="yes" xml:space="preserve">
          <source>This provider is typically used if you have a list of values and any extra values should still be considered as valid.</source>
          <target state="translated">如果你有一个值的列表,并且任何额外的值仍然应该被认为是有效的,那么通常会使用这个提供者。</target>
        </trans-unit>
        <trans-unit id="4ad2c325143f08dfb46f0befdcf7f0c482a1e749" translate="yes" xml:space="preserve">
          <source>This provider supports the following parameters:</source>
          <target state="translated">该提供者支持以下参数:</target>
        </trans-unit>
        <trans-unit id="e54550d08e2dad7df5255e1219bfa453c98a0370" translate="yes" xml:space="preserve">
          <source>This provides only one argument to the batch job: &lt;code&gt;someParameter=someValue&lt;/code&gt;.</source>
          <target state="translated">这仅向批处理作业提供一个参数： &lt;code&gt;someParameter=someValue&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22fc8d96be3312002845eb59330f80a1b7edc1e2" translate="yes" xml:space="preserve">
          <source>This sample needs to be created in its own directory. Subsequent instructions assume that you have created a suitable directory and that it is your current directory.</source>
          <target state="translated">这个样本需要在自己的目录下创建。后面的说明假设你已经创建了一个合适的目录,并且它是你当前的目录。</target>
        </trans-unit>
        <trans-unit id="f9fa29d3b2e8ac7908b0d41ef1a7c8f128996087" translate="yes" xml:space="preserve">
          <source>This search ordering lets you specify default values in one configuration file and then selectively override those values in another. You can provide default values for your application in &lt;code&gt;application.properties&lt;/code&gt; (or whatever other basename you choose with &lt;code&gt;spring.config.name&lt;/code&gt;) in one of the default locations. These default values can then be overridden at runtime with a different file located in one of the custom locations.</source>
          <target state="translated">通过此搜索顺序，您可以在一个配置文件中指定默认值，然后在另一个配置文件中有选择地覆盖这些值。您可以在默认位置之一的 &lt;code&gt;application.properties&lt;/code&gt; （或使用 &lt;code&gt;spring.config.name&lt;/code&gt; 选择的其他任何基本名称）中为应用程序提供默认值。然后，可以在运行时使用自定义位置之一中的其他文件覆盖这些默认值。</target>
        </trans-unit>
        <trans-unit id="98af5606c519e36542ec351d8486cb6859c633f2" translate="yes" xml:space="preserve">
          <source>This section addresses questions about security when working with Spring Boot, including questions that arise from using Spring Security with Spring Boot.</source>
          <target state="translated">本节讨论了在使用Spring Boot时的安全问题,包括在Spring Boot中使用Spring Security时出现的问题。</target>
        </trans-unit>
        <trans-unit id="63d2a24b1fdff3ed5546f1a972979f48e3afe8f6" translate="yes" xml:space="preserve">
          <source>This section contains three examples of using &lt;code&gt;findmainclass&lt;/code&gt;.</source>
          <target state="translated">本节包含三个使用 &lt;code&gt;findmainclass&lt;/code&gt; 的示例。</target>
        </trans-unit>
        <trans-unit id="8acedec21aec8bb92d4f624db5f059f55b7b4056" translate="yes" xml:space="preserve">
          <source>This section covers some of the more common deployment scenarios.</source>
          <target state="translated">本节介绍一些比较常见的部署场景。</target>
        </trans-unit>
        <trans-unit id="70b211ea63ca950926089e9def6a4e30c449147c" translate="yes" xml:space="preserve">
          <source>This section describes how to develop a small &amp;ldquo;Hello World!&amp;rdquo; web application that highlights some of Spring Boot&amp;rsquo;s key features. We use Maven to build this project, since most IDEs support it.</source>
          <target state="translated">本节介绍如何开发一个小的&amp;ldquo; Hello World！&amp;rdquo;。Web应用程序，重点介绍了Spring Boot的一些关键功能。我们使用Maven来构建此项目，因为大多数IDE都支持它。</target>
        </trans-unit>
        <trans-unit id="63ebfcaa3ec5cd3905d00724e0eeba5ca871a2ed" translate="yes" xml:space="preserve">
          <source>This section dives into the details of Spring Boot. Here you can learn about the key features that you may want to use and customize. If you have not already done so, you might want to read the &quot;&lt;a href=&quot;getting-started#getting-started&quot;&gt;getting-started.html&lt;/a&gt;&quot; and &quot;&lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt;&quot; sections, so that you have a good grounding of the basics.</source>
          <target state="translated">本节将深入探讨Spring Boot的细节。在这里，您可以了解可能要使用和自定义的关键功能。如果您尚未这样做，则可能需要阅读&amp;ldquo; &lt;a href=&quot;getting-started#getting-started&quot;&gt;getting-started.html&lt;/a&gt; &amp;rdquo;和&amp;ldquo; &lt;a href=&quot;using-spring-boot#using-boot&quot;&gt;using-spring-boot.html&lt;/a&gt; &amp;rdquo;部分，以便您有足够的基础知识。</target>
        </trans-unit>
        <trans-unit id="fa32a19ddc3a86d4ab8bdef4dc856c7c3f1cd92d" translate="yes" xml:space="preserve">
          <source>This section goes into more detail about how you should use Spring Boot. It covers topics such as build systems, auto-configuration, and how to run your applications. We also cover some Spring Boot best practices. Although there is nothing particularly special about Spring Boot (it is just another library that you can consume), there are a few recommendations that, when followed, make your development process a little easier.</source>
          <target state="translated">本节将更详细地介绍如何使用Spring Boot。它涵盖了诸如构建系统、自动配置以及如何运行您的应用程序等主题。我们还介绍了一些Spring Boot的最佳实践。虽然Spring Boot没有什么特别的地方(它只是另一个你可以消费的库),但有一些建议,如果遵循这些建议,会让你的开发过程变得更容易一些。</target>
        </trans-unit>
        <trans-unit id="4c2c065b14100d63a7f263ab40adb253a558419e" translate="yes" xml:space="preserve">
          <source>This section includes topics about setting and reading properties and configuration settings and their interaction with Spring Boot applications.</source>
          <target state="translated">本节包括有关设置和读取属性和配置设置及其与Spring Boot应用程序的交互的主题。</target>
        </trans-unit>
        <trans-unit id="68bf44b7331aa20ee33060f7be2c6d336d11651b" translate="yes" xml:space="preserve">
          <source>This section includes topics relating directly to Spring Boot applications.</source>
          <target state="translated">本节包括与Spring Boot应用程序直接相关的主题。</target>
        </trans-unit>
        <trans-unit id="21a790fda00a13c2afdc2633ee2d0b018fb43401" translate="yes" xml:space="preserve">
          <source>This section only covers jar based packaging. If you choose to package your application as a war file, you should refer to your server and IDE documentation.</source>
          <target state="translated">本节只涉及基于jar的打包。如果你选择将你的应用程序打包成 war 文件,你应该参考你的服务器和 IDE 文档。</target>
        </trans-unit>
        <trans-unit id="78fc2879e4ad1c8aacfc386d63f895e7eea1abb8" translate="yes" xml:space="preserve">
          <source>This section provides a brief overview of Spring Boot reference documentation. It serves as a map for the rest of the document.</source>
          <target state="translated">本节提供了Spring Boot参考文档的简要概述。它可以作为本文档其他部分的地图。</target>
        </trans-unit>
        <trans-unit id="f958777b6bee155d608e729d89a9b3bebf1d3861" translate="yes" xml:space="preserve">
          <source>This section provides answers to some common &amp;lsquo;how do I do that&amp;hellip;​&amp;rsquo; questions that often arise when using Spring Boot. Its coverage is not exhaustive, but it does cover quite a lot.</source>
          <target state="translated">本节提供了一些在使用Spring Boot时经常出现的常见``我该怎么做...''问题的答案。它的覆盖范围不是很详尽，但是确实覆盖了很多。</target>
        </trans-unit>
        <trans-unit id="e4d9be02fea69d7068dfad55edc0923522bd8170" translate="yes" xml:space="preserve">
          <source>This section shows two examples of Ant tasks.</source>
          <target state="translated">本节展示了两个Ant任务的例子。</target>
        </trans-unit>
        <trans-unit id="06b1f5b07a36526fc5d9c4f3a479a09ae49d16df" translate="yes" xml:space="preserve">
          <source>This separation in two modules is in no way necessary. If &quot;acme&quot; has several flavours, options or optional features, then it is better to separate the auto-configuration as you can clearly express the fact some features are optional. Besides, you have the ability to craft a starter that provides an opinion about those optional dependencies. At the same time, others can rely only on the &lt;code&gt;autoconfigure&lt;/code&gt; module and craft their own starter with different opinions.</source>
          <target state="translated">完全没有必要将这两个模块分开。如果&amp;ldquo; acme&amp;rdquo;具有多种风味，选项或可选功能，则最好将自动配置分开，因为您可以清楚地表示某些功能是可选的。此外，您还可以制作一个启动器，以提供有关那些可选依赖项的意见。同时，其他人只能依靠 &lt;code&gt;autoconfigure&lt;/code&gt; 模块并以不同的意见来设计自己的启动器。</target>
        </trans-unit>
        <trans-unit id="fe0c2a5e1c1667db97a516e07f56f197c054bfd2" translate="yes" xml:space="preserve">
          <source>This sets the common &lt;code&gt;prop.one&lt;/code&gt; Kafka property to &lt;code&gt;first&lt;/code&gt; (applies to producers, consumers and admins), the &lt;code&gt;prop.two&lt;/code&gt; admin property to &lt;code&gt;second&lt;/code&gt;, the &lt;code&gt;prop.three&lt;/code&gt; consumer property to &lt;code&gt;third&lt;/code&gt;, the &lt;code&gt;prop.four&lt;/code&gt; producer property to &lt;code&gt;fourth&lt;/code&gt; and the &lt;code&gt;prop.five&lt;/code&gt; streams property to &lt;code&gt;fifth&lt;/code&gt;.</source>
          <target state="translated">这将常见的 &lt;code&gt;prop.one&lt;/code&gt; Kafka属性设置为 &lt;code&gt;first&lt;/code&gt; （适用于生产者，消费者和管理员），将 &lt;code&gt;prop.two&lt;/code&gt; 管理属性设置为 &lt;code&gt;second&lt;/code&gt; ，将 &lt;code&gt;prop.three&lt;/code&gt; 消费者属性设置为 &lt;code&gt;third&lt;/code&gt; ，将 &lt;code&gt;prop.four&lt;/code&gt; 生产者属性设置为 &lt;code&gt;fourth&lt;/code&gt; 和 &lt;code&gt;prop.five&lt;/code&gt; 将属性流到 &lt;code&gt;fifth&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7ef8ea8678f7fcf1b792d7c676b306bd052f386" translate="yes" xml:space="preserve">
          <source>This setup is only supported by WebFlux applications as using &lt;code&gt;WebTestClient&lt;/code&gt; in a mocked web application only works with WebFlux at the moment.</source>
          <target state="translated">WebFlux应用程序仅支持此设置，因为在 &lt;code&gt;WebTestClient&lt;/code&gt; 的Web应用程序中使用WebTestClient目前仅与WebFlux一起使用。</target>
        </trans-unit>
        <trans-unit id="eb482188f5594442f357f3e0e6680312716ffbc1" translate="yes" xml:space="preserve">
          <source>This setup puts you &lt;em&gt;in sync&lt;/em&gt; with what Spring Boot does for you by default, except that a dedicated connection pool is chosen (in code) and its settings are exposed in the &lt;code&gt;app.datasource.configuration&lt;/code&gt; sub namespace. Because &lt;code&gt;DataSourceProperties&lt;/code&gt; is taking care of the &lt;code&gt;url&lt;/code&gt;/&lt;code&gt;jdbcUrl&lt;/code&gt; translation for you, you can configure it as follows:</source>
          <target state="translated">该设置使您与默认情况下Spring Boot所做的事情&lt;em&gt;保持同步&lt;/em&gt;，除了选择（以代码形式）专用连接池并且其设置在 &lt;code&gt;app.datasource.configuration&lt;/code&gt; 子命名空间中公开之外。由于 &lt;code&gt;DataSourceProperties&lt;/code&gt; 正在为您处理 &lt;code&gt;url&lt;/code&gt; / &lt;code&gt;jdbcUrl&lt;/code&gt; 转换，因此可以按以下方式配置它：</target>
        </trans-unit>
        <trans-unit id="a54ca376c967f54b5f3de3e7e319eca5cab3b808" translate="yes" xml:space="preserve">
          <source>This setup requires &lt;code&gt;spring-webflux&lt;/code&gt; on the classpath. If you can&amp;rsquo;t or won&amp;rsquo;t add webflux, Spring Boot also provides a &lt;code&gt;TestRestTemplate&lt;/code&gt; facility:</source>
          <target state="translated">此设置需要在classpath上使用 &lt;code&gt;spring-webflux&lt;/code&gt; 。如果您不能添加Webflux，Spring Boot还提供了 &lt;code&gt;TestRestTemplate&lt;/code&gt; 工具：</target>
        </trans-unit>
        <trans-unit id="84d7bfad4c1d411a409984af163140bdf3448c78" translate="yes" xml:space="preserve">
          <source>This should be everything you need. The most common deployment workflow for Heroku deployments is to &lt;code&gt;git push&lt;/code&gt; the code to production, as shown in the following example:</source>
          <target state="translated">这应该是您需要的一切。Heroku部署最常见的部署工作流程是 &lt;code&gt;git push&lt;/code&gt; 代码推入生产环境，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="393f3f6f2ef031ca1cff60f137d4a4baed5ad8dc" translate="yes" xml:space="preserve">
          <source>This style of configuration works particularly well with the &lt;code&gt;SpringApplication&lt;/code&gt; external YAML configuration, as shown in the following example:</source>
          <target state="translated">这种配置样式与 &lt;code&gt;SpringApplication&lt;/code&gt; 外部YAML配置特别有效，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="b74ccedd75661707cf53972e2f4f67ff3e40695a" translate="yes" xml:space="preserve">
          <source>This will add &lt;code&gt;db.username&lt;/code&gt;, &lt;code&gt;db.password&lt;/code&gt;, &lt;code&gt;mq.username&lt;/code&gt; and &lt;code&gt;mq.password&lt;/code&gt; properties.</source>
          <target state="translated">这将添加 &lt;code&gt;db.username&lt;/code&gt; ， &lt;code&gt;db.password&lt;/code&gt; ， &lt;code&gt;mq.username&lt;/code&gt; 和 &lt;code&gt;mq.password&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="6701a5571029f61c844ac3f8a6df09b47475e443" translate="yes" xml:space="preserve">
          <source>This will prevent any user, including root, from modifying the jar.</source>
          <target state="translated">这将防止包括root在内的任何用户修改jar。</target>
        </trans-unit>
        <trans-unit id="c652550434d586e51511bab160a434f556a6a5cc" translate="yes" xml:space="preserve">
          <source>This will provide the following output:</source>
          <target state="translated">这将提供以下输出。</target>
        </trans-unit>
        <trans-unit id="02dcde164b156486502408b465994d246d88e331" translate="yes" xml:space="preserve">
          <source>This will set the pool to wait 10000 ms before throwing an exception if no connection is available, limit the maximum number of connections to 50 and validate the connection before borrowing it from the pool.</source>
          <target state="translated">这将设置池在没有可用连接时,在抛出异常前等待10000毫秒,将最大连接数限制为50个,并在从池中借用连接前对连接进行验证。</target>
        </trans-unit>
        <trans-unit id="79123de85bc5887b35ad590e9149fa99fe8c1d92" translate="yes" xml:space="preserve">
          <source>This will start up a docker container running Neo4j (if Docker is running locally) before any of the tests are run. In most cases, you will need to configure the application using details from the running container, such as container IP or port.</source>
          <target state="translated">这将在运行任何测试之前,启动一个运行Neo4j的docker容器(如果Docker在本地运行)。在大多数情况下,你需要使用运行容器的详细信息来配置应用程序,例如容器IP或端口。</target>
        </trans-unit>
        <trans-unit id="d802a6996822557b82fa06b1e760c08cbdda7eb7" translate="yes" xml:space="preserve">
          <source>This will trigger the import of a &lt;code&gt;dev.properties&lt;/code&gt; file in current directory (if such a file exists). Values from the imported &lt;code&gt;dev.properties&lt;/code&gt; will take precedence over the file that triggered the import. In the above example, the &lt;code&gt;dev.properties&lt;/code&gt; could redefine &lt;code&gt;spring.application.name&lt;/code&gt; to a different value.</source>
          <target state="translated">这将触发在当前目录中导入 &lt;code&gt;dev.properties&lt;/code&gt; 文件（如果存在）。来自导入的 &lt;code&gt;dev.properties&lt;/code&gt; 的值将优先于触发导入的文件。在上面的示例中， &lt;code&gt;dev.properties&lt;/code&gt; 可以将 &lt;code&gt;spring.application.name&lt;/code&gt; 重新定义为其他值。</target>
        </trans-unit>
        <trans-unit id="d826b51779d73958d9b6c113421d73d845a0e3e1" translate="yes" xml:space="preserve">
          <source>Those two examples are identical as the port default to &lt;code&gt;9042&lt;/code&gt;. If you need to configure the port, use &lt;code&gt;spring.data.cassandra.port&lt;/code&gt;.</source>
          <target state="translated">这两个示例与默认端口 &lt;code&gt;9042&lt;/code&gt; 相同。如果需要配置端口，请使用 &lt;code&gt;spring.data.cassandra.port&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dbd866504bcd113178a516d0710990501b9a4071" translate="yes" xml:space="preserve">
          <source>Thread name: Enclosed in square brackets (may be truncated for console output).</source>
          <target state="translated">线程名称:包含在方括号内(为了控制台输出,可能会被截断)。</target>
        </trans-unit>
        <trans-unit id="28445b4669291b203e64bda1777adedc52da2e7f" translate="yes" xml:space="preserve">
          <source>Threads utilization</source>
          <target state="translated">线程利用率</target>
        </trans-unit>
        <trans-unit id="9a26d12d32344c924e9fb7e0b6cda24669f0b39e" translate="yes" xml:space="preserve">
          <source>Threshold after which files are written to disk.</source>
          <target state="translated">文件写入磁盘的阈值。</target>
        </trans-unit>
        <trans-unit id="1b4f809dde23f137cf95e65fdda0184148439430" translate="yes" xml:space="preserve">
          <source>Thymeleaf</source>
          <target state="translated">Thymeleaf</target>
        </trans-unit>
        <trans-unit id="bca8f19eb632c6ccfbe984f98e174d41434e276e" translate="yes" xml:space="preserve">
          <source>Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.</source>
          <target state="translated">对无反应的消费者进行检查的间隔时间。如果没有指定持续时间后缀,将使用秒。</target>
        </trans-unit>
        <trans-unit id="6f938423afe4ec108333437fcf762e7dd925e565" translate="yes" xml:space="preserve">
          <source>Time between offset commits when ackMode is &quot;TIME&quot; or &quot;COUNT_TIME&quot;.</source>
          <target state="translated">当ackMode为 &quot;TIME &quot;或 &quot;COUNT_TIME &quot;时,偏移提交之间的时间。</target>
        </trans-unit>
        <trans-unit id="257a8e3e28ce36a9201e5e594190893668c7f4cf" translate="yes" xml:space="preserve">
          <source>Time between publishing idle consumer events (no data received).</source>
          <target state="translated">发布闲置消费者事件之间的时间(没有收到数据)。</target>
        </trans-unit>
        <trans-unit id="16edef0e1615af59ec5ec37a6f1b76b8724566e7" translate="yes" xml:space="preserve">
          <source>Time between runs of the idle object evictor thread. When positive, the idle object evictor thread starts, otherwise no idle object eviction is performed.</source>
          <target state="translated">空闲对象驱逐线程运行的间隔时间。当为正值时,空闲对象驱逐线程启动,否则不执行空闲对象驱逐。</target>
        </trans-unit>
        <trans-unit id="9a7ee8eff9bb0b66b975728003d3401d6a4dce74" translate="yes" xml:space="preserve">
          <source>Time format to use, for example `HH:mm:ss`.</source>
          <target state="translated">要使用的时间格式,例如 &quot;HH:mm:ss&quot;。</target>
        </trans-unit>
        <trans-unit id="e8bf663ffb266dffd11e68a6255174b6c7baa03d" translate="yes" xml:space="preserve">
          <source>Time limit for which threads may remain idle before being terminated.</source>
          <target state="translated">线程在被终止前可以保持空闲的时间限制。</target>
        </trans-unit>
        <trans-unit id="90deb36c0b03a4e98d0a54557d80ba7573ffecf0" translate="yes" xml:space="preserve">
          <source>Time period for which Influx should retain data in the current database. For instance 7d, check the influx documentation for more details on the duration format.</source>
          <target state="translated">Influx应该在当前数据库中保留数据的时间段。例如7d,请查看influx文档了解更多关于持续时间格式的细节。</target>
        </trans-unit>
        <trans-unit id="5755a712830b5358cee25a8d7d5bd3c88888e586" translate="yes" xml:space="preserve">
          <source>Time range covered by a shard group. For instance 2w, check the influx documentation for more details on the duration format.</source>
          <target state="translated">一个碎片组所覆盖的时间范围。例如2w,请查看流入文档,了解更多关于持续时间格式的细节。</target>
        </trans-unit>
        <trans-unit id="e048b8a2140a4da5a934e33a06f141d1a026b933" translate="yes" xml:space="preserve">
          <source>Time that the connection can be idle before it is closed.</source>
          <target state="translated">连接关闭前可以闲置的时间。</target>
        </trans-unit>
        <trans-unit id="08af1477dc7ae60ab5bf240e0ce50ec17583678c" translate="yes" xml:space="preserve">
          <source>Time to live for meters that do not have any activity. After this period the meter will be considered expired and will not get reported.</source>
          <target state="translated">没有任何活动的电表的生存时间。过了这个时间,该电表将被视为过期,不会被报告。</target>
        </trans-unit>
        <trans-unit id="157a05dc4208cf8ba78eb0ca8d35438a23db3489" translate="yes" xml:space="preserve">
          <source>Time to live for metrics on Ganglia. Set the multi-cast Time-To-Live to be one greater than the number of hops (routers) between the hosts.</source>
          <target state="translated">Ganglia上的指标生存时间。将多播的生存时间设置为大于主机之间的跳数(路由器)。</target>
        </trans-unit>
        <trans-unit id="92d71d8d919c8d051ff5b484cea33464df8b8c15" translate="yes" xml:space="preserve">
          <source>Time to live for subscriptions from the LWC service.</source>
          <target state="translated">从LWC服务的订阅时间活。</target>
        </trans-unit>
        <trans-unit id="4da724f7300aaf90f6f509cae3b729229b3c4bca" translate="yes" xml:space="preserve">
          <source>Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.</source>
          <target state="translated">空闲连接驱逐线程运行之间的睡眠时间。为负值时,不运行空闲连接驱逐线程。</target>
        </trans-unit>
        <trans-unit id="55e5751905354c493cd02a6ebad4088bb40721e4" translate="yes" xml:space="preserve">
          <source>Time to wait before considering a close complete.</source>
          <target state="translated">等到时间到了再考虑接近完整。</target>
        </trans-unit>
        <trans-unit id="d41a68739496fda9bd790fa6b6ca841565b57dc1" translate="yes" xml:space="preserve">
          <source>Time to wait on message sends for a response. Set it to 0 to wait forever.</source>
          <target state="translated">等待消息发送响应的时间。设置为0则永远等待。</target>
        </trans-unit>
        <trans-unit id="fa1f17973d6de3e97425a7545e3fe34a93f8cec7" translate="yes" xml:space="preserve">
          <source>Time zone used when formatting dates. For instance, &quot;America/Los_Angeles&quot; or &quot;GMT+10&quot;.</source>
          <target state="translated">格式化日期时使用的时区。例如,&quot;America/Los_Angeles &quot;或 &quot;GMT+10&quot;。</target>
        </trans-unit>
        <trans-unit id="2f2d41854a72103d76672190b09df5c43a0666d7" translate="yes" xml:space="preserve">
          <source>Time, in seconds, after which connections are cleaned up from the pool.</source>
          <target state="translated">从池中清理连接的时间,以秒为单位。</target>
        </trans-unit>
        <trans-unit id="af4e3e008d3d84e5d71b8056c4cb860bcee61b57" translate="yes" xml:space="preserve">
          <source>Time, in seconds, between runs of the pool's maintenance thread.</source>
          <target state="translated">池的维护线程运行之间的时间,以秒为单位。</target>
        </trans-unit>
        <trans-unit id="5633026c55c53b4292c025b0adbc6970f7a12239" translate="yes" xml:space="preserve">
          <source>Time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</source>
          <target state="translated">一个连接在被破坏之前可以被池化的时间,以秒为单位。0表示没有限制。</target>
        </trans-unit>
        <trans-unit id="a15b84b66517aa2bf2de0082682c04f041d60c79" translate="yes" xml:space="preserve">
          <source>Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</source>
          <target state="translated">获取无效连接后,再次尝试获取连接前的等待时间,以秒为单位。</target>
        </trans-unit>
        <trans-unit id="36ef8b295ad08bdd5835f74cdc66de2e1332a7d3" translate="yes" xml:space="preserve">
          <source>Time-to-live of a message when sending. Enables QoS (Quality of Service) when set.</source>
          <target state="translated">发送时信息的生存时间。设置时启用QoS(服务质量)。</target>
        </trans-unit>
        <trans-unit id="fe08b01d8e2e106a9c750da662e001c52c32fe11" translate="yes" xml:space="preserve">
          <source>Time-to-live of the static resource cache.</source>
          <target state="translated">静态资源缓存的有效时间。</target>
        </trans-unit>
        <trans-unit id="b4daf3ebec0205b3c5941c840e6f139a85eeaa8d" translate="yes" xml:space="preserve">
          <source>Timeout for `receive()` operations.</source>
          <target state="translated">`receive()`操作超时。</target>
        </trans-unit>
        <trans-unit id="a4c01abbb5a190e1f666694a1c31b7595202bcbc" translate="yes" xml:space="preserve">
          <source>Timeout for `sendAndReceive()` operations.</source>
          <target state="translated">`sendAndReceive()`操作的超时。</target>
        </trans-unit>
        <trans-unit id="0e749bc73e79e06b505016ac86cc76bc4b48a32b" translate="yes" xml:space="preserve">
          <source>Timeout for borrowing connections from the pool.</source>
          <target state="translated">超时从池中借用连接。</target>
        </trans-unit>
        <trans-unit id="ad68c7cd30ac34df9a64b0b1441e2b4d1044a3b4" translate="yes" xml:space="preserve">
          <source>Timeout for operations on a specific key-value with a durability level.</source>
          <target state="translated">对某一特定键值进行操作的超时,其耐久性等级。</target>
        </trans-unit>
        <trans-unit id="cd4079ad03b011219b9437a74d74a4b2ff22f438" translate="yes" xml:space="preserve">
          <source>Timeout for operations on a specific key-value.</source>
          <target state="translated">对特定键值的操作超时。</target>
        </trans-unit>
        <trans-unit id="343f5afc92a52493a4bafa6b566c75becdf854ac" translate="yes" xml:space="preserve">
          <source>Timeout for the analytics service.</source>
          <target state="translated">分析服务超时。</target>
        </trans-unit>
        <trans-unit id="2b5e18e5d99fc25ad2d6531a3ccdc1ca022aff69" translate="yes" xml:space="preserve">
          <source>Timeout for the management operations.</source>
          <target state="translated">管理业务的超时。</target>
        </trans-unit>
        <trans-unit id="8b030dd31deb534606f3933db3254b6ef5d2c4e3" translate="yes" xml:space="preserve">
          <source>Timeout for the search service.</source>
          <target state="translated">搜索服务超时。</target>
        </trans-unit>
        <trans-unit id="97c62420c3106472b90dc919ae8289a61de2bfe0" translate="yes" xml:space="preserve">
          <source>Timeout for the shutdown of any phase (group of SmartLifecycle beans with the same 'phase' value).</source>
          <target state="translated">任何阶段(具有相同 &quot;阶段 &quot;值的SmartLifecycle beans组)的关闭超时。</target>
        </trans-unit>
        <trans-unit id="d96205316e07848c1427c856bbc6c2d6cd3c1a9b" translate="yes" xml:space="preserve">
          <source>Timeout to use for internal queries that run as part of the initialization process, just after a connection is opened.</source>
          <target state="translated">超时用于内部查询,作为初始化过程的一部分,就在连接打开后运行。</target>
        </trans-unit>
        <trans-unit id="048e883b2751ff15fc925cd2c8f95b339cacea77" translate="yes" xml:space="preserve">
          <source>Timeout to use for receive calls.</source>
          <target state="translated">接听电话时使用的超时。</target>
        </trans-unit>
        <trans-unit id="d3eb9b5f3f03f8cf00aeb24095704a9e04160006" translate="yes" xml:space="preserve">
          <source>Timeout to use for receive calls. Use -1 for a no-wait receive or 0 for no timeout at all. The latter is only feasible if not running within a transaction manager and is generally discouraged since it prevents clean shutdown.</source>
          <target state="translated">接收电话的超时时间,使用-1表示无等待接收,0表示无超时。使用-1表示无等待接收,使用0表示完全没有超时。后者只有在不在事务管理器中运行的情况下才可行,而且一般不鼓励使用,因为它可以防止干净的关机。</target>
        </trans-unit>
        <trans-unit id="9ee815b47fb806e26cc5d8565b64b4cb27cce936" translate="yes" xml:space="preserve">
          <source>Timeout to use when establishing driver connections.</source>
          <target state="translated">建立驱动程序连接时使用的超时。</target>
        </trans-unit>
        <trans-unit id="18617f279e6b6ec92a580f0a0ad7ac3ac4860b87" translate="yes" xml:space="preserve">
          <source>Timeout to use when polling the consumer.</source>
          <target state="translated">对消费者进行投票时使用的超时。</target>
        </trans-unit>
        <trans-unit id="149832355c96122df1ffdd4b2e0ec7d3adfecdda" translate="yes" xml:space="preserve">
          <source>Timeout, in seconds, for acquiring connections from the pool.</source>
          <target state="translated">从池中获取连接的超时时间,以秒为单位。</target>
        </trans-unit>
        <trans-unit id="3cdb59cee88af2120763f796e16f13e64a5de99b" translate="yes" xml:space="preserve">
          <source>Timeout, in seconds, for borrowing connections from the pool.</source>
          <target state="translated">从池中借用连接的超时时间,以秒为单位。</target>
        </trans-unit>
        <trans-unit id="ab962604136c073fe7e13b7d03d0804820b94f77" translate="yes" xml:space="preserve">
          <source>Timeout, in seconds, for establishing a database connection.</source>
          <target state="translated">建立数据库连接的超时时间,以秒为单位。</target>
        </trans-unit>
        <trans-unit id="a9e00d213e65d41eb8e3410116c58b0d62dd77d2" translate="yes" xml:space="preserve">
          <source>To &amp;ldquo;reset&amp;rdquo; the specific level of the logger (and use the default configuration instead), you can pass a value of &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;configuredLevel&lt;/code&gt;.</source>
          <target state="translated">要&amp;ldquo;重置&amp;rdquo;记录器的特定级别（并使用默认配置），可以传递 &lt;code&gt;null&lt;/code&gt; 值作为 &lt;code&gt;configuredLevel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28ef52ad75ff027bf32fa0103b066cee4d9fdf23" translate="yes" xml:space="preserve">
          <source>To access MongoDB databases, you can inject an auto-configured &lt;code&gt;org.springframework.data.mongodb.MongoDatabaseFactory&lt;/code&gt;. By default, the instance tries to connect to a MongoDB server at &lt;code&gt;mongodb://localhost/test&lt;/code&gt;. The following example shows how to connect to a MongoDB database:</source>
          <target state="translated">要访问MongoDB数据库，可以注入自动配置的 &lt;code&gt;org.springframework.data.mongodb.MongoDatabaseFactory&lt;/code&gt; 。默认情况下，该实例尝试通过 &lt;code&gt;mongodb://localhost/test&lt;/code&gt; 连接到MongoDB服务器。以下示例显示了如何连接到MongoDB数据库：</target>
        </trans-unit>
        <trans-unit id="6b2e6a79462b42f98f0ddebb1a416931398b299d" translate="yes" xml:space="preserve">
          <source>To access a Neo4j server, you can inject an auto-configured &lt;code&gt;org.neo4j.driver.Driver&lt;/code&gt;. By default, the instance tries to connect to a Neo4j server at &lt;code&gt;localhost:7687&lt;/code&gt; using the Bolt protocol. The following example shows how to inject a Neo4j &lt;code&gt;Driver&lt;/code&gt; that gives you access, amongst other things, to a &lt;code&gt;Session&lt;/code&gt;:</source>
          <target state="translated">要访问Neo4j服务器，可以注入自动配置的 &lt;code&gt;org.neo4j.driver.Driver&lt;/code&gt; 。默认情况下，该实例尝试使用Bolt协议连接到 &lt;code&gt;localhost:7687&lt;/code&gt; 处的Neo4j服务器。以下示例显示了如何注入Neo4j &lt;code&gt;Driver&lt;/code&gt; ，该驱动程序除其他功能外，使您可以访问 &lt;code&gt;Session&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="eddb65ac0fb7482cb7755c6f3f749537ff445381" translate="yes" xml:space="preserve">
          <source>To add a &lt;code&gt;Servlet&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;, or Servlet &lt;code&gt;*Listener&lt;/code&gt; by using a Spring bean, you must provide a &lt;code&gt;@Bean&lt;/code&gt; definition for it. Doing so can be very useful when you want to inject configuration or dependencies. However, you must be very careful that they do not cause eager initialization of too many other beans, because they have to be installed in the container very early in the application lifecycle. (For example, it is not a good idea to have them depend on your &lt;code&gt;DataSource&lt;/code&gt; or JPA configuration.) You can work around such restrictions by initializing the beans lazily when first used instead of on initialization.</source>
          <target state="translated">要使用Spring bean添加 &lt;code&gt;Servlet&lt;/code&gt; ， &lt;code&gt;Filter&lt;/code&gt; 或Servlet &lt;code&gt;*Listener&lt;/code&gt; ，必须为其提供 &lt;code&gt;@Bean&lt;/code&gt; 定义。当您要注入配置或依赖项时，这样做非常有用。但是，您必须非常小心，以免引起过多其他bean的急切初始化，因为必须在应用程序生命周期的早期就将它们安装在容器中。 （例如，让它们依赖于您的 &lt;code&gt;DataSource&lt;/code&gt; 或JPA配置不是一个好主意。）您可以通过在首次使用bean时而不是在初始化时进行延迟初始化来解决这些限制。</target>
        </trans-unit>
        <trans-unit id="498ca879cf0bac928c9eb892e8660d6416cafae9" translate="yes" xml:space="preserve">
          <source>To add additional logging during startup, you can override &lt;code&gt;logStartupInfo(boolean)&lt;/code&gt; in a subclass of &lt;code&gt;SpringApplication&lt;/code&gt;.</source>
          <target state="translated">要在启动期间添加其他日志记录，可以在 &lt;code&gt;SpringApplication&lt;/code&gt; 的子类中重写 &lt;code&gt;logStartupInfo(boolean)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1464a0158993f0aa3fb409307826b43e86e6429d" translate="yes" xml:space="preserve">
          <source>To add the actuator to a Maven based project, add the following &amp;lsquo;Starter&amp;rsquo; dependency:</source>
          <target state="translated">要将执行器添加到基于Maven的项目中，请添加以下&amp;ldquo; Starter&amp;rdquo;依赖项：</target>
        </trans-unit>
        <trans-unit id="1783683a7bc3465e5ca2201eea584202d6b8b176" translate="yes" xml:space="preserve">
          <source>To add to the default tags, provide one or more &lt;code&gt;@Bean&lt;/code&gt;s that implement &lt;code&gt;WebFluxTagsContributor&lt;/code&gt;. To replace the default tags, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;WebFluxTagsProvider&lt;/code&gt;.</source>
          <target state="translated">要添加到默认标签，提供一个或多个 &lt;code&gt;@Bean&lt;/code&gt; 实现小号 &lt;code&gt;WebFluxTagsContributor&lt;/code&gt; 。要替换默认标签，提供 &lt;code&gt;@Bean&lt;/code&gt; 实现 &lt;code&gt;WebFluxTagsProvider&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fd6f9bbd6e31f23468b1b75277e1f1d41c8ca54" translate="yes" xml:space="preserve">
          <source>To add to the default tags, provide one or more &lt;code&gt;@Bean&lt;/code&gt;s that implement &lt;code&gt;WebMvcTagsContributor&lt;/code&gt;. To replace the default tags, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;WebMvcTagsProvider&lt;/code&gt;.</source>
          <target state="translated">要添加到默认标签，提供一个或多个 &lt;code&gt;@Bean&lt;/code&gt; 实现小号 &lt;code&gt;WebMvcTagsContributor&lt;/code&gt; 。要替换默认标签，提供 &lt;code&gt;@Bean&lt;/code&gt; 实现 &lt;code&gt;WebMvcTagsProvider&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02aa24250a60b948a4451637cccebfd20b3f6fcf" translate="yes" xml:space="preserve">
          <source>To allow the input to be mapped to the operation method&amp;rsquo;s parameters, Java code implementing an endpoint should be compiled with &lt;code&gt;-parameters&lt;/code&gt;, and Kotlin code implementing an endpoint should be compiled with &lt;code&gt;-java-parameters&lt;/code&gt;. This will happen automatically if you are using Spring Boot&amp;rsquo;s Gradle plugin or if you are using Maven and &lt;code&gt;spring-boot-starter-parent&lt;/code&gt;.</source>
          <target state="translated">为了使输入映射到操作方法的参数，实现端点的Java代码应使用 &lt;code&gt;-parameters&lt;/code&gt; 进行编译，而实现端点的Kotlin代码应使用 &lt;code&gt;-java-parameters&lt;/code&gt; 进行编译。如果您使用的是Spring Boot的Gradle插件，或者您使用的是Maven和 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; ,这将自动发生。</target>
        </trans-unit>
        <trans-unit id="f1849861eee6d81fff7ee143f6deec466262e401" translate="yes" xml:space="preserve">
          <source>To allow your listener to distinguish between an event for its context and an event for a descendant context, it should request that its application context is injected and then compare the injected context with the context of the event. The context can be injected by implementing &lt;code&gt;ApplicationContextAware&lt;/code&gt; or, if the listener is a bean, by using &lt;code&gt;@Autowired&lt;/code&gt;.</source>
          <target state="translated">为了使您的侦听器能够区分其上下文的事件和后代上下文的事件，它应请求注入其应用程序上下文，然后将注入的上下文与事件的上下文进行比较。可以通过实现 &lt;code&gt;ApplicationContextAware&lt;/code&gt; 来注入上下文，或者，如果侦听器是bean，则可以使用 &lt;code&gt;@Autowired&lt;/code&gt; 注入上下文。</target>
        </trans-unit>
        <trans-unit id="150c1630e8cfea4692c86d91d999e3a1e19d8991" translate="yes" xml:space="preserve">
          <source>To also switch off the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration, you can add a bean of type &lt;code&gt;ReactiveUserDetailsService&lt;/code&gt; or &lt;code&gt;ReactiveAuthenticationManager&lt;/code&gt;.</source>
          <target state="translated">要也关闭 &lt;code&gt;UserDetailsService&lt;/code&gt; 配置，可以添加 &lt;code&gt;ReactiveUserDetailsService&lt;/code&gt; 或 &lt;code&gt;ReactiveAuthenticationManager&lt;/code&gt; 类型的Bean 。</target>
        </trans-unit>
        <trans-unit id="1c0e01bce19ebe9e15821be388152d210901a4d6" translate="yes" xml:space="preserve">
          <source>To also switch off the &lt;code&gt;UserDetailsService&lt;/code&gt; configuration, you can add a bean of type &lt;code&gt;UserDetailsService&lt;/code&gt;, &lt;code&gt;AuthenticationProvider&lt;/code&gt;, or &lt;code&gt;AuthenticationManager&lt;/code&gt;.</source>
          <target state="translated">要也关闭 &lt;code&gt;UserDetailsService&lt;/code&gt; 配置，可以添加类型 &lt;code&gt;UserDetailsService&lt;/code&gt; ， &lt;code&gt;AuthenticationProvider&lt;/code&gt; 或 &lt;code&gt;AuthenticationManager&lt;/code&gt; 的bean 。</target>
        </trans-unit>
        <trans-unit id="05e8831ca3d1f5bffc00fdd945c5396d1a35257d" translate="yes" xml:space="preserve">
          <source>To attach a remote debugger to a Spring Boot application that was started with Maven, you can use the &lt;code&gt;jvmArguments&lt;/code&gt; property of the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/&quot;&gt;maven plugin&lt;/a&gt;.</source>
          <target state="translated">要将远程调试器附加到使用Maven启动的Spring Boot应用程序，可以使用&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/&quot;&gt;maven插件&lt;/a&gt;的 &lt;code&gt;jvmArguments&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="5bb7448aa7f52bec86f56d8498087659dc3caae7" translate="yes" xml:space="preserve">
          <source>To automatically run Flyway database migrations on startup, add the &lt;code&gt;org.flywaydb:flyway-core&lt;/code&gt; to your classpath.</source>
          <target state="translated">要在启动时自动运行Flyway数据库迁移，请将 &lt;code&gt;org.flywaydb:flyway-core&lt;/code&gt; 添加到您的类路径中。</target>
        </trans-unit>
        <trans-unit id="7cd8012ffc81e3d016e79e7aeddf8c402d9b1f8f" translate="yes" xml:space="preserve">
          <source>To automatically run Liquibase database migrations on startup, add the &lt;code&gt;org.liquibase:liquibase-core&lt;/code&gt; to your classpath.</source>
          <target state="translated">要在启动时自动运行Liquibase数据库迁移，请将 &lt;code&gt;org.liquibase:liquibase-core&lt;/code&gt; 添加到您的类路径中。</target>
        </trans-unit>
        <trans-unit id="fbfbd010094acfd17280dbcb44e81206d43b1f53" translate="yes" xml:space="preserve">
          <source>To avoid hard-coding those names in your own config, you can reuse &lt;code&gt;BeanNames&lt;/code&gt; provided by Spring Data Couchbase. For instance, you can customize the converters to use, as follows:</source>
          <target state="translated">为了避免在您自己的配置中对这些名称进行硬编码，您可以重用Spring Data Couchbase提供的 &lt;code&gt;BeanNames&lt;/code&gt; 。例如，您可以自定义要使用的转换器，如下所示：</target>
        </trans-unit>
        <trans-unit id="d768dca1fa3f46dc6929f476afd4d908840632f2" translate="yes" xml:space="preserve">
          <source>To build with Ant, you need to grab dependencies, compile, and then create a jar or war archive. To make it executable, you can either use the &lt;code&gt;spring-boot-antlib&lt;/code&gt; module or you can follow these instructions:</source>
          <target state="translated">要使用Ant进行构建，您需要获取依赖项，进行编译，然后创建一个jar或war存档。要使其可执行，可以使用 &lt;code&gt;spring-boot-antlib&lt;/code&gt; 模块，也可以按照以下说明进行操作：</target>
        </trans-unit>
        <trans-unit id="a120fcfd25654a1d5af1573b91d45dc10a79edc5" translate="yes" xml:space="preserve">
          <source>To change the error handling behavior, you can implement &lt;code&gt;ErrorWebExceptionHandler&lt;/code&gt; and register a bean definition of that type. Because a &lt;code&gt;WebExceptionHandler&lt;/code&gt; is quite low-level, Spring Boot also provides a convenient &lt;code&gt;AbstractErrorWebExceptionHandler&lt;/code&gt; to let you handle errors in a WebFlux functional way, as shown in the following example:</source>
          <target state="translated">要更改错误处理行为，可以实现 &lt;code&gt;ErrorWebExceptionHandler&lt;/code&gt; 并注册该类型的bean定义。由于 &lt;code&gt;WebExceptionHandler&lt;/code&gt; 的级别很低，因此Spring Boot还提供了一个方便的 &lt;code&gt;AbstractErrorWebExceptionHandler&lt;/code&gt; ，使您可以通过WebFlux功能方式处理错误，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="263656a6a66ff3ce1a6ec8a258bebe379200cdbd" translate="yes" xml:space="preserve">
          <source>To change which endpoints are exposed, use the following technology-specific &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; properties:</source>
          <target state="translated">要更改公开哪些端点，请使用以下特定于技术的 &lt;code&gt;include&lt;/code&gt; 和 &lt;code&gt;exclude&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="45aa4d308528d2baeb4927668eb8de491398f9a8" translate="yes" xml:space="preserve">
          <source>To compile and run the application, type the following command:</source>
          <target state="translated">要编译和运行应用程序,键入以下命令。</target>
        </trans-unit>
        <trans-unit id="3f4a87ebbb18c2a7ff84ad5941afaf7f95d1f039" translate="yes" xml:space="preserve">
          <source>To configure Spring Security to require a secure channel for all (or some) requests, consider adding your own &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; that adds the following &lt;code&gt;HttpSecurity&lt;/code&gt; configuration:</source>
          <target state="translated">要将Spring Security配置为要求所有（或某些）请求使用安全通道，请考虑添加自己的 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; ，该 &lt;code&gt;HttpSecurity&lt;/code&gt; 添加以下HttpSecurity配置：</target>
        </trans-unit>
        <trans-unit id="094afe33a50e821139413245ebaacab37f668a71" translate="yes" xml:space="preserve">
          <source>To configure a bean from the &lt;code&gt;Environment&lt;/code&gt; properties, add &lt;code&gt;@ConfigurationProperties&lt;/code&gt; to its bean registration, as shown in the following example:</source>
          <target state="translated">要从 &lt;code&gt;Environment&lt;/code&gt; 属性配置Bean ，请将 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 添加到其Bean注册中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="0eb3d6f89f580d16912047b819752254008a11ff" translate="yes" xml:space="preserve">
          <source>To configure a classifier of &lt;code&gt;exec&lt;/code&gt; in Maven, you can use the following configuration:</source>
          <target state="translated">要在Maven中配置 &lt;code&gt;exec&lt;/code&gt; 的分类器，可以使用以下配置：</target>
        </trans-unit>
        <trans-unit id="4fa53d14e43882d840de7380ad76ca082e9059a9" translate="yes" xml:space="preserve">
          <source>To configure a given logger, &lt;code&gt;POST&lt;/code&gt; a partial entity to the resource&amp;rsquo;s URI, as shown in the following example:</source>
          <target state="translated">配置给定记录器， &lt;code&gt;POST&lt;/code&gt; 部分实体到所述资源的URI，作为显示在下面的例子：</target>
        </trans-unit>
        <trans-unit id="df60b66c308ed6fb3336ca108e162016a4e12494" translate="yes" xml:space="preserve">
          <source>To configure the more fine-grained settings of a logging system, you need to use the native configuration format supported by the &lt;code&gt;LoggingSystem&lt;/code&gt; in question. By default, Spring Boot picks up the native configuration from its default location for the system (such as &lt;code&gt;classpath:logback.xml&lt;/code&gt; for Logback), but you can set the location of the config file by using the &lt;code&gt;logging.config&lt;/code&gt; property.</source>
          <target state="translated">要配置日志记录系统的更细粒度的设置，您需要使用所讨论的 &lt;code&gt;LoggingSystem&lt;/code&gt; 支持的本机配置格式。默认情况下，Spring Boot从系统的默认位置（例如，用于Logback的 &lt;code&gt;classpath:logback.xml&lt;/code&gt; logback.xml）拾取本地配置，但是您可以使用 &lt;code&gt;logging.config&lt;/code&gt; 属性设置配置文件的位置。</target>
        </trans-unit>
        <trans-unit id="ba815de84baf35508fce18f28f3791c04784ea15" translate="yes" xml:space="preserve">
          <source>To configure the timeout period, configure the &lt;code&gt;spring.lifecycle.timeout-per-shutdown-phase&lt;/code&gt; property, as shown in the following example:</source>
          <target state="translated">要配置超时时间，请配置 &lt;code&gt;spring.lifecycle.timeout-per-shutdown-phase&lt;/code&gt; 属性，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="9a5f4605d493e9ca5c574421ff3ffd8eea88deb4" translate="yes" xml:space="preserve">
          <source>To configure your own &lt;code&gt;DataSource&lt;/code&gt;, define a &lt;code&gt;@Bean&lt;/code&gt; of that type in your configuration. Spring Boot reuses your &lt;code&gt;DataSource&lt;/code&gt; anywhere one is required, including database initialization. If you need to externalize some settings, you can bind your &lt;code&gt;DataSource&lt;/code&gt; to the environment (see &amp;ldquo;&lt;a href=&quot;spring-boot-features#boot-features-external-config-3rd-party-configuration&quot;&gt;spring-boot-features.html&lt;/a&gt;&amp;rdquo;).</source>
          <target state="translated">要配置自己的 &lt;code&gt;DataSource&lt;/code&gt; ，请在配置中定义该类型的 &lt;code&gt;@Bean&lt;/code&gt; 。Spring Boot重用您的 &lt;code&gt;DataSource&lt;/code&gt; 到任何需要它的地方，包括数据库初始化。如果需要外部化某些设置，则可以将 &lt;code&gt;DataSource&lt;/code&gt; 绑定到环境（请参阅&amp;ldquo; &lt;a href=&quot;spring-boot-features#boot-features-external-config-3rd-party-configuration&quot;&gt;spring-boot-features.html&lt;/a&gt; &amp;rdquo;）。</target>
        </trans-unit>
        <trans-unit id="3614c5610f797a9ad43114f242fc0e6750f27e46" translate="yes" xml:space="preserve">
          <source>To connect to Elasticsearch, a &lt;code&gt;RestHighLevelClient&lt;/code&gt; bean must be defined, auto-configured by Spring Boot or manually provided by the application (see previous sections). With this configuration in place, an &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; can be injected like any other Spring bean, as shown in the following example:</source>
          <target state="translated">要连接到Elasticsearch，必须定义，由Spring Boot自动配置或由应用程序手动提供的 &lt;code&gt;RestHighLevelClient&lt;/code&gt; bean（请参阅前面的部分）。有了此配置后，可以像其他任何Spring bean一样注入 &lt;code&gt;ElasticsearchRestTemplate&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7be3febdc837b8d2b3ede9a7350331aa8e78f674" translate="yes" xml:space="preserve">
          <source>To connect to an LDAP server, make sure you declare a dependency on the &lt;code&gt;spring-boot-starter-data-ldap&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; or &lt;code&gt;spring-ldap-core&lt;/code&gt; and then declare the URLs of your server in your application.properties, as shown in the following example:</source>
          <target state="translated">要连接到LDAP服务器，请确保声明对 &lt;code&gt;spring-boot-starter-data-ldap&lt;/code&gt; &amp;ldquo; Starter&amp;rdquo;或 &lt;code&gt;spring-ldap-core&lt;/code&gt; 的依赖关系，然后在application.properties中声明服务器的URL，如下所示。下面的例子：</target>
        </trans-unit>
        <trans-unit id="510fca515d585954e9818889dd81b3237dca2d5a" translate="yes" xml:space="preserve">
          <source>To convert a property name in the canonical-form to an environment variable name you can follow these rules:</source>
          <target state="translated">要将规范形式的属性名转换为环境变量名,你可以遵循这些规则。</target>
        </trans-unit>
        <trans-unit id="7135357c3b294e37ae76ba918e840703f755bd71" translate="yes" xml:space="preserve">
          <source>To convert an existing non-web Spring application to a Spring Boot application, replace the code that creates your &lt;code&gt;ApplicationContext&lt;/code&gt; and replace it with calls to &lt;code&gt;SpringApplication&lt;/code&gt; or &lt;code&gt;SpringApplicationBuilder&lt;/code&gt;. Spring MVC web applications are generally amenable to first creating a deployable war application and then migrating it later to an executable war or jar. See the &lt;a href=&quot;https://spring.io/guides/gs/convert-jar-to-war/&quot;&gt;Getting Started Guide on Converting a jar to a war&lt;/a&gt;.</source>
          <target state="translated">要将现有的非Web Spring应用程序转换为Spring Boot应用程序，请替换创建您的 &lt;code&gt;ApplicationContext&lt;/code&gt; 的代码，并将其替换为对 &lt;code&gt;SpringApplication&lt;/code&gt; 或 &lt;code&gt;SpringApplicationBuilder&lt;/code&gt; 的调用。Spring MVC Web应用程序通常适合首先创建可部署的war应用程序，然后再将其迁移到可执行的war或jar中。请参阅&lt;a href=&quot;https://spring.io/guides/gs/convert-jar-to-war/&quot;&gt;有关将罐子转换为战争的入门指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="60697af70adf614cf8c974099c63aa68683a7a34" translate="yes" xml:space="preserve">
          <source>To create a &amp;lsquo;fully executable&amp;rsquo; jar with Maven, use the following plugin configuration:</source>
          <target state="translated">要使用Maven创建一个&amp;ldquo;完全可执行&amp;rdquo;的jar，请使用以下插件配置：</target>
        </trans-unit>
        <trans-unit id="66cba0e23c97e083689bdcf88270ceff9d05aacc" translate="yes" xml:space="preserve">
          <source>To create a deployable war by extending &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; (for example, in a class called &lt;code&gt;Application&lt;/code&gt;) and adding the Spring Boot &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation, use code similar to that shown in the following example:</source>
          <target state="translated">要通过扩展 &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; （例如，在名为 &lt;code&gt;Application&lt;/code&gt; 的类中）并添加Spring Boot &lt;code&gt;@SpringBootApplication&lt;/code&gt; 注释来创建可部署的战争，请使用类似于以下示例中所示的代码：</target>
        </trans-unit>
        <trans-unit id="d70942ebc7e96b4ffefe4f6159d05515820e1869" translate="yes" xml:space="preserve">
          <source>To create a health indicator group you can use the &lt;code&gt;management.endpoint.health.group.&amp;lt;name&amp;gt;&lt;/code&gt; property and specify a list of health indicator IDs to &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;. For example, to create a group that includes only database indicators you can define the following:</source>
          <target state="translated">要创建运行状况指示器组，可以使用 &lt;code&gt;management.endpoint.health.group.&amp;lt;name&amp;gt;&lt;/code&gt; 属性，并指定要 &lt;code&gt;include&lt;/code&gt; 或 &lt;code&gt;exclude&lt;/code&gt; 的运行状况指示器ID的列表。例如，要创建仅包含数据库指示符的组，可以定义以下内容：</target>
        </trans-unit>
        <trans-unit id="b2091755f98c3824ef06a6689ff037e3bc6dc1bb" translate="yes" xml:space="preserve">
          <source>To create a topic on startup, add a bean of type &lt;code&gt;NewTopic&lt;/code&gt;. If the topic already exists, the bean is ignored.</source>
          <target state="translated">要在启动时创建主题，请添加类型 &lt;code&gt;NewTopic&lt;/code&gt; 的bean 。如果该主题已经存在，则将忽略Bean。</target>
        </trans-unit>
        <trans-unit id="2b58b9847dab84d6686dc2d3c224dee06d642482" translate="yes" xml:space="preserve">
          <source>To create an executable jar, we need to add the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; to our &lt;code&gt;pom.xml&lt;/code&gt;. To do so, insert the following lines just below the &lt;code&gt;dependencies&lt;/code&gt; section:</source>
          <target state="translated">要创建可执行jar，我们需要将 &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; 添加到我们的 &lt;code&gt;pom.xml&lt;/code&gt; 中。为此，请在&amp;ldquo; &lt;code&gt;dependencies&lt;/code&gt; &amp;rdquo;部分的下面插入以下行：</target>
        </trans-unit>
        <trans-unit id="7a7a46c4a1b17e5f9408c54afe8453ea92aec6d8" translate="yes" xml:space="preserve">
          <source>To customize published security events, you can provide your own implementations of &lt;code&gt;AbstractAuthenticationAuditListener&lt;/code&gt; and &lt;code&gt;AbstractAuthorizationAuditListener&lt;/code&gt;.</source>
          <target state="translated">要自定义已发布的安全事件，可以提供自己的 &lt;code&gt;AbstractAuthenticationAuditListener&lt;/code&gt; 和 &lt;code&gt;AbstractAuthorizationAuditListener&lt;/code&gt; 的实现。</target>
        </trans-unit>
        <trans-unit id="15dc6ed63f28d69b442cdf002d107f69a700d63f" translate="yes" xml:space="preserve">
          <source>To customize the &lt;code&gt;WebTestClient&lt;/code&gt; bean, configure a &lt;code&gt;WebTestClientBuilderCustomizer&lt;/code&gt; bean. Any such beans are called with the &lt;code&gt;WebTestClient.Builder&lt;/code&gt; that is used to create the &lt;code&gt;WebTestClient&lt;/code&gt;.</source>
          <target state="translated">要自定义 &lt;code&gt;WebTestClient&lt;/code&gt; bean，请配置 &lt;code&gt;WebTestClientBuilderCustomizer&lt;/code&gt; bean。使用创建 &lt;code&gt;WebTestClient&lt;/code&gt; 的 &lt;code&gt;WebTestClient.Builder&lt;/code&gt; 调用任何此类bean 。</target>
        </trans-unit>
        <trans-unit id="c36d6af6b3a283b0cb9dcd89a1b146a0fc1bbec2" translate="yes" xml:space="preserve">
          <source>To customize the connections created by a &lt;code&gt;ConnectionFactory&lt;/code&gt;, i.e., set specific parameters that you do not want (or cannot) configure in your central database configuration, you can use a &lt;code&gt;ConnectionFactoryOptionsBuilderCustomizer&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt;. The following example shows how to manually override the database port while the rest of the options is taken from the application configuration:</source>
          <target state="translated">要自定义由 &lt;code&gt;ConnectionFactory&lt;/code&gt; 创建的连接（即，设置您不想（或无法）在中央数据库配置中配置的特定参数），可以使用 &lt;code&gt;ConnectionFactoryOptionsBuilderCustomizer&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; 。以下示例显示了如何从应用程序配置中获取其余选项的同时手动覆盖数据库端口：</target>
        </trans-unit>
        <trans-unit id="e4763acf34b90430955dad0a20a11ac247924109" translate="yes" xml:space="preserve">
          <source>To customize the items that are included in each trace, use the &lt;code&gt;management.trace.http.include&lt;/code&gt; configuration property. For advanced customization, consider registering your own &lt;code&gt;HttpExchangeTracer&lt;/code&gt; implementation.</source>
          <target state="translated">要自定义每个跟踪中包含的项目，请使用 &lt;code&gt;management.trace.http.include&lt;/code&gt; 配置属性。对于高级定制，请考虑注册您自己的 &lt;code&gt;HttpExchangeTracer&lt;/code&gt; 实现。</target>
        </trans-unit>
        <trans-unit id="ba931925192105ae62d8ee1859dc49660955fcf7" translate="yes" xml:space="preserve">
          <source>To customize the tags, and depending on your choice of client, you can provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;RestTemplateExchangeTagsProvider&lt;/code&gt; or &lt;code&gt;WebClientExchangeTagsProvider&lt;/code&gt;. There are convenience static functions in &lt;code&gt;RestTemplateExchangeTags&lt;/code&gt; and &lt;code&gt;WebClientExchangeTags&lt;/code&gt;.</source>
          <target state="translated">要自定义标签，并根据您选择的客户端，你可以提供一个 &lt;code&gt;@Bean&lt;/code&gt; 实现 &lt;code&gt;RestTemplateExchangeTagsProvider&lt;/code&gt; 或 &lt;code&gt;WebClientExchangeTagsProvider&lt;/code&gt; 。 &lt;code&gt;RestTemplateExchangeTags&lt;/code&gt; 和 &lt;code&gt;WebClientExchangeTags&lt;/code&gt; 中有便捷的静态函数。</target>
        </trans-unit>
        <trans-unit id="18868922145d54b5df1c1ee2e5e559a7b11e0a62" translate="yes" xml:space="preserve">
          <source>To customize the tags, provide a &lt;code&gt;@Bean&lt;/code&gt; that implements &lt;code&gt;JerseyTagsProvider&lt;/code&gt;.</source>
          <target state="translated">要自定义标签，提供 &lt;code&gt;@Bean&lt;/code&gt; 实现 &lt;code&gt;JerseyTagsProvider&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1290dbb07196bfa6b85125f663324b0814f6c1fd" translate="yes" xml:space="preserve">
          <source>To customize written elements, use the &lt;code&gt;embeddedLaunchScriptProperties&lt;/code&gt; option of the Spring Boot Maven plugin or the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-launch-script&quot;&gt;&lt;code&gt;properties&lt;/code&gt; property of the Spring Boot Gradle plugin&amp;rsquo;s &lt;code&gt;launchScript&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要自定义书面元素，请使用Spring Boot Maven插件的 &lt;code&gt;embeddedLaunchScriptProperties&lt;/code&gt; 选项或&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-launch-script&quot;&gt;Spring Boot Gradle插件的&lt;/a&gt; &lt;code&gt;launchScript&lt;/code&gt; 的 &lt;code&gt;properties&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="0051988b42a02e8b294f4aea87a821ff847b3b2f" translate="yes" xml:space="preserve">
          <source>To deal with any problematic libraries, you can flag that specific nested jars should be automatically unpacked when the executable jar first runs. Such nested jars are written beneath the temporary directory identified by the &lt;code&gt;java.io.tmpdir&lt;/code&gt; system property.</source>
          <target state="translated">要处理任何有问题的库，您可以标记在可执行jar首次运行时应自动解压缩特定的嵌套jar。这些嵌套的jar会写在 &lt;code&gt;java.io.tmpdir&lt;/code&gt; 系统属性标识的临时目录下。</target>
        </trans-unit>
        <trans-unit id="67d02995ac6d297ce2728981a0728dcacd13e236" translate="yes" xml:space="preserve">
          <source>To declare dependencies, a typical &lt;code&gt;ivy.xml&lt;/code&gt; file looks something like the following example:</source>
          <target state="translated">为了声明依赖关系，典型的 &lt;code&gt;ivy.xml&lt;/code&gt; 文件看起来类似于以下示例：</target>
        </trans-unit>
        <trans-unit id="2354665a5159e6ca3204eae688affbfb88a9b08c" translate="yes" xml:space="preserve">
          <source>To deploy a Spring Boot application to WebLogic, you must ensure that your servlet initializer &lt;strong&gt;directly&lt;/strong&gt; implements &lt;code&gt;WebApplicationInitializer&lt;/code&gt; (even if you extend from a base class that already implements it).</source>
          <target state="translated">要将Spring Boot应用程序部署到WebLogic，必须确保servlet初始化程序&lt;strong&gt;直接&lt;/strong&gt;实现 &lt;code&gt;WebApplicationInitializer&lt;/code&gt; （即使您从已经实现它的基类进行扩展）。</target>
        </trans-unit>
        <trans-unit id="6ce3397cf40a76a4a52e0936c4801717e4766a2b" translate="yes" xml:space="preserve">
          <source>To disable the logging of the report, set the following property:</source>
          <target state="translated">要禁用报告的记录,请设置以下属性。</target>
        </trans-unit>
        <trans-unit id="c72382fa82b26ba692919be6dfc63b7f130056d3" translate="yes" xml:space="preserve">
          <source>To do this with JCache, first make sure that &lt;code&gt;org.hibernate:hibernate-jcache&lt;/code&gt; is available on the classpath. Then, add a &lt;code&gt;HibernatePropertiesCustomizer&lt;/code&gt; bean as shown in the following example:</source>
          <target state="translated">要使用JCache做到这一点，首先要确保 &lt;code&gt;org.hibernate:hibernate-jcache&lt;/code&gt; 在类路径上可用。然后，添加一个 &lt;code&gt;HibernatePropertiesCustomizer&lt;/code&gt; bean，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="4811ae8df2b7617dc82499cdeb8310578aa52798" translate="yes" xml:space="preserve">
          <source>To enable HTTP/2 with cleartext support, you need to leave the &lt;code&gt;server.http2.enabled&lt;/code&gt; property set to &lt;code&gt;false&lt;/code&gt;, and instead apply a customizer specific to your choice of server:</source>
          <target state="translated">要启用具有明文支持的HTTP / 2，您需要将 &lt;code&gt;server.http2.enabled&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; ，而是应用特定于您选择的服务器的定制程序：</target>
        </trans-unit>
        <trans-unit id="49a2631d1fa2afce31066cbd7f9087426dce47e5" translate="yes" xml:space="preserve">
          <source>To enable graceful shutdown, configure the &lt;code&gt;server.shutdown&lt;/code&gt; property, as shown in the following example:</source>
          <target state="translated">要启用正常关机，请配置 &lt;code&gt;server.shutdown&lt;/code&gt; 属性，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="bd810316d0f977881eaebd063add2fc734fcaa7a" translate="yes" xml:space="preserve">
          <source>To enable it, you need to make sure that &lt;code&gt;devtools&lt;/code&gt; is included in the repackaged archive, as shown in the following listing:</source>
          <target state="translated">要启用它，您需要确保 &lt;code&gt;devtools&lt;/code&gt; 包含在重新打包的档案中，如以下清单所示：</target>
        </trans-unit>
        <trans-unit id="9f862771b780444d18d657a6a7948b5c5ba808de" translate="yes" xml:space="preserve">
          <source>To enable statistics, the standard JPA property &lt;code&gt;hibernate.generate_statistics&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt;. You can enable that on the auto-configured &lt;code&gt;EntityManagerFactory&lt;/code&gt; as shown in the following example:</source>
          <target state="translated">要启用统计信息，必须将标准JPA属性 &lt;code&gt;hibernate.generate_statistics&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 。您可以在自动配置的 &lt;code&gt;EntityManagerFactory&lt;/code&gt; 上启用它，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="6f6526605b9483d1ef312c31ebbeb0433b4f2f28" translate="yes" xml:space="preserve">
          <source>To ensure that debug logging performed using &lt;code&gt;java.util.logging&lt;/code&gt; is routed into Log4j 2, configure its &lt;a href=&quot;https://logging.apache.org/log4j/2.x/log4j-jul/index.html&quot;&gt;JDK logging adapter&lt;/a&gt; by setting the &lt;code&gt;java.util.logging.manager&lt;/code&gt; system property to &lt;code&gt;org.apache.logging.log4j.jul.LogManager&lt;/code&gt;.</source>
          <target state="translated">为了确保将使用 &lt;code&gt;java.util.logging&lt;/code&gt; 执行的调试日志记录路由到Log4j 2，请通过将 &lt;code&gt;java.util.logging.manager&lt;/code&gt; 系统属性设置为 &lt;code&gt;org.apache.logging.log4j.jul.LogManager&lt;/code&gt; 来配置其&lt;a href=&quot;https://logging.apache.org/log4j/2.x/log4j-jul/index.html&quot;&gt;JDK日志记录适配器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a66da54df81e5efdc52cfed720ad2331a3162336" translate="yes" xml:space="preserve">
          <source>To ensure that multiple transaction managers can safely coordinate the same resource managers, each Atomikos instance must be configured with a unique ID. By default, this ID is the IP address of the machine on which Atomikos is running. To ensure uniqueness in production, you should configure the &lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt; property with a different value for each instance of your application.</source>
          <target state="translated">为了确保多个事务管理器可以安全地协调同一资源管理器，必须为每个Atomikos实例配置一个唯一的ID。默认情况下，此ID是运行Atomikos的计算机的IP地址。为了确保生产中的唯一性，应为每个应用程序实例将 &lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt; 属性配置为不同的值。</target>
        </trans-unit>
        <trans-unit id="50a3eead8cc279f0662c98f43f1060639c4a2520" translate="yes" xml:space="preserve">
          <source>To ensure that multiple transaction managers can safely coordinate the same resource managers, each Bitronix instance must be configured with a unique ID. By default, this ID is the IP address of the machine on which Bitronix is running. To ensure uniqueness in production, you should configure the &lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt; property with a different value for each instance of your application.</source>
          <target state="translated">为了确保多个事务管理器可以安全地协调同一资源管理器，必须为每个Bitronix实例配置唯一的ID。默认情况下，此ID是运行Bitronix的计算机的IP地址。为了确保生产中的唯一性，应为每个应用程序实例将 &lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt; 属性配置为不同的值。</target>
        </trans-unit>
        <trans-unit id="3238fd6522a2454690f389aac4090ac842f05093" translate="yes" xml:space="preserve">
          <source>To ensure that validation is always triggered for nested properties, even when no properties are found, the associated field must be annotated with &lt;code&gt;@Valid&lt;/code&gt;. The following example builds on the preceding &lt;code&gt;AcmeProperties&lt;/code&gt; example:</source>
          <target state="translated">为了确保始终为嵌套属性触发验证，即使未找到任何属性，也必须使用 &lt;code&gt;@Valid&lt;/code&gt; 注释关联的字段。以下示例以前面的 &lt;code&gt;AcmeProperties&lt;/code&gt; 示例为基础：</target>
        </trans-unit>
        <trans-unit id="becbcb1c7f2c9d46d5e507483b5adbc6ec29222a" translate="yes" xml:space="preserve">
          <source>To finish our application, we need to create a single Java file. By default, Maven compiles sources from &lt;code&gt;src/main/java&lt;/code&gt;, so you need to create that directory structure and then add a file named &lt;code&gt;src/main/java/Example.java&lt;/code&gt; to contain the following code:</source>
          <target state="translated">要完成我们的应用程序，我们需要创建一个Java文件。默认情况下，Maven从 &lt;code&gt;src/main/java&lt;/code&gt; 编译源代码，因此您需要创建该目录结构，然后添加一个名为 &lt;code&gt;src/main/java/Example.java&lt;/code&gt; 的文件以包含以下代码：</target>
        </trans-unit>
        <trans-unit id="6948ccd651fe5324cd6cad1724548914d17318d2" translate="yes" xml:space="preserve">
          <source>To flag the application to start automatically on system boot, use the following command:</source>
          <target state="translated">要标记应用程序在系统启动时自动启动,使用以下命令。</target>
        </trans-unit>
        <trans-unit id="de168255ca588720e127cccfd4f3c52ee0d8f3a3" translate="yes" xml:space="preserve">
          <source>To generate &lt;a href=&quot;appendix-configuration-metadata#configuration-metadata-annotation-processor&quot;&gt;your own metadata&lt;/a&gt; using the annotation processor, &lt;a href=&quot;https://kotlinlang.org/docs/reference/kapt.html&quot;&gt;&lt;code&gt;kapt&lt;/code&gt; should be configured&lt;/a&gt; with the &lt;code&gt;spring-boot-configuration-processor&lt;/code&gt; dependency. Note that some features (such as detecting the default value or deprecated items) are not working due to limitations in the model kapt provides.</source>
          <target state="translated">要生成&lt;a href=&quot;appendix-configuration-metadata#configuration-metadata-annotation-processor&quot;&gt;自己的元数据&lt;/a&gt;使用注释处理器，&lt;a href=&quot;https://kotlinlang.org/docs/reference/kapt.html&quot;&gt; &lt;code&gt;kapt&lt;/code&gt; 应配置&lt;/a&gt;与 &lt;code&gt;spring-boot-configuration-processor&lt;/code&gt; 的依赖。请注意，由于kapt提供的模型的限制，某些功能（例如检测默认值或不推荐使用的项目）无法正常工作。</target>
        </trans-unit>
        <trans-unit id="5bfd8106708bd40de81d253e32fc14c42ed65b3b" translate="yes" xml:space="preserve">
          <source>To generate build information with Maven, add an execution for the &lt;code&gt;build-info&lt;/code&gt; goal, as shown in the following example:</source>
          <target state="translated">要使用Maven生成构建信息，请为 &lt;code&gt;build-info&lt;/code&gt; 目标添加执行，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="3b022bfd0344ad349bcaf9fb88bcdeda959ac448" translate="yes" xml:space="preserve">
          <source>To get started with Jersey, include the &lt;code&gt;spring-boot-starter-jersey&lt;/code&gt; as a dependency and then you need one &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;ResourceConfig&lt;/code&gt; in which you register all the endpoints, as shown in the following example:</source>
          <target state="translated">要开始使用新泽西州，包括 &lt;code&gt;spring-boot-starter-jersey&lt;/code&gt; 作为一个依赖，那么你就需要一个 &lt;code&gt;@Bean&lt;/code&gt; 类型的 &lt;code&gt;ResourceConfig&lt;/code&gt; 其中注册您的所有端点，如下面的例子：</target>
        </trans-unit>
        <trans-unit id="ba257093d8b60c5fc142ccea369a7d4570145da7" translate="yes" xml:space="preserve">
          <source>To get started, add the &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; module to your application.</source>
          <target state="translated">首先，将 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; 模块添加到您的应用程序。</target>
        </trans-unit>
        <trans-unit id="7a2d1e5ea6d8b889b0e95d591f85b446e700391f" translate="yes" xml:space="preserve">
          <source>To get the server to render XML instead of JSON, you might have to send an &lt;code&gt;Accept: text/xml&lt;/code&gt; header (or use a browser).</source>
          <target state="translated">要使服务器呈现XML而不是JSON，您可能必须发送一个 &lt;code&gt;Accept: text/xml&lt;/code&gt; 标头（或使用浏览器）。</target>
        </trans-unit>
        <trans-unit id="e0dbeb0a1dc6b66fcbc497e6ce78a566faea12db" translate="yes" xml:space="preserve">
          <source>To gracefully exit the application, press &lt;code&gt;ctrl-c&lt;/code&gt;.</source>
          <target state="translated">要正常退出该应用程序，请按 &lt;code&gt;ctrl-c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef85cd41a4242d226b74c1484c09dda460940ad6" translate="yes" xml:space="preserve">
          <source>To handle the error automatically, consider extending from &lt;code&gt;AbstractReactiveHealthIndicator&lt;/code&gt;.</source>
          <target state="translated">要自动处理错误，请考虑从 &lt;code&gt;AbstractReactiveHealthIndicator&lt;/code&gt; 扩展。</target>
        </trans-unit>
        <trans-unit id="d1d47eb5019e2680d6f961d132e5ab2bba3e68d3" translate="yes" xml:space="preserve">
          <source>To handle this scenario, a separate &lt;code&gt;@Configuration&lt;/code&gt; class can be used to isolate the condition, as shown in the following example:</source>
          <target state="translated">要处理这种情况，可以使用单独的 &lt;code&gt;@Configuration&lt;/code&gt; 类隔离条件，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="1a562dd8f28c94acfed6f2090261f9132a6ffd5d" translate="yes" xml:space="preserve">
          <source>To have Quartz use a &lt;code&gt;DataSource&lt;/code&gt; other than the application&amp;rsquo;s main &lt;code&gt;DataSource&lt;/code&gt;, declare a &lt;code&gt;DataSource&lt;/code&gt; bean, annotating its &lt;code&gt;@Bean&lt;/code&gt; method with &lt;code&gt;@QuartzDataSource&lt;/code&gt;. Doing so ensures that the Quartz-specific &lt;code&gt;DataSource&lt;/code&gt; is used by both the &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; and for schema initialization. Similarly, to have Quartz use a &lt;code&gt;TransactionManager&lt;/code&gt; other than the application&amp;rsquo;s main &lt;code&gt;TransactionManager&lt;/code&gt; declare a &lt;code&gt;TransactionManager&lt;/code&gt; bean, annotating its &lt;code&gt;@Bean&lt;/code&gt; method with &lt;code&gt;@QuartzTransactionManager&lt;/code&gt;.</source>
          <target state="translated">让Quartz使用 &lt;code&gt;DataSource&lt;/code&gt; 以外的其他应用程序的主 &lt;code&gt;DataSource&lt;/code&gt; ，申报 &lt;code&gt;DataSource&lt;/code&gt; 豆，注释其 &lt;code&gt;@Bean&lt;/code&gt; 与方法 &lt;code&gt;@QuartzDataSource&lt;/code&gt; 。这样做可确保 &lt;code&gt;SchedulerFactoryBean&lt;/code&gt; 和Schema初始化都使用特定于Quartz的 &lt;code&gt;DataSource&lt;/code&gt; 。同样，有石英使用一个 &lt;code&gt;TransactionManager&lt;/code&gt; 应用程序的非主其他 &lt;code&gt;TransactionManager&lt;/code&gt; 声明 &lt;code&gt;TransactionManager&lt;/code&gt; 的bean，注释其 &lt;code&gt;@Bean&lt;/code&gt; 与方法 &lt;code&gt;@QuartzTransactionManager&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2466d3a00955f30c6095ec602ad41149196ee2fd" translate="yes" xml:space="preserve">
          <source>To help reduce the size of your Groovy code, several &lt;code&gt;import&lt;/code&gt; statements are automatically included. Notice how the preceding example refers to &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@RestController&lt;/code&gt;, and &lt;code&gt;@RequestMapping&lt;/code&gt; without needing to use fully-qualified names or &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="translated">为了帮助减少Groovy代码的大小，将自动包含几个 &lt;code&gt;import&lt;/code&gt; 语句。请注意前面的例子中如何引用 &lt;code&gt;@Component&lt;/code&gt; ， &lt;code&gt;@RestController&lt;/code&gt; 和 &lt;code&gt;@RequestMapping&lt;/code&gt; 无需使用完全合格的名称或 &lt;code&gt;import&lt;/code&gt; 语句。</target>
        </trans-unit>
        <trans-unit id="3520e1f6de5c7ce8333cc201c629df799a54079a" translate="yes" xml:space="preserve">
          <source>To help with the customization, some other properties are transferred from the Spring &lt;code&gt;Environment&lt;/code&gt; to System properties, as described in the following table:</source>
          <target state="translated">为了帮助进行定制，如下表所述，一些其他属性从Spring &lt;code&gt;Environment&lt;/code&gt; 转移到System属性：</target>
        </trans-unit>
        <trans-unit id="9fe6ab098da6ca83ea91ed90392c591b67bb0921" translate="yes" xml:space="preserve">
          <source>To help with this, Spring Boot allows you to define logging groups in your Spring &lt;code&gt;Environment&lt;/code&gt;. For example, here&amp;rsquo;s how you could define a &amp;ldquo;tomcat&amp;rdquo; group by adding it to your &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">为了解决这个问题，Spring Boot允许您在Spring &lt;code&gt;Environment&lt;/code&gt; 中定义日志记录组。例如，这是通过将&amp;ldquo; tomcat&amp;rdquo;组添加到 &lt;code&gt;application.properties&lt;/code&gt; 来定义它的方法：</target>
        </trans-unit>
        <trans-unit id="8360fce83b5ea34128eea992623ad5b1d4c67277" translate="yes" xml:space="preserve">
          <source>To help with this, Spring Boot lets you define profile groups. A profile group allows you to define a logical name for a related group of profiles.</source>
          <target state="translated">为了帮助解决这个问题,Spring Boot 允许您定义配置文件组。配置文件组允许您为相关的配置文件组定义一个逻辑名称。</target>
        </trans-unit>
        <trans-unit id="237d63ce58b8d11a894f4850f68dce91c3c91561" translate="yes" xml:space="preserve">
          <source>To import these properties, you can add the following to your &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yaml&lt;/code&gt; file:</source>
          <target state="translated">要导入这些属性，可以将以下内容添加到 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yaml&lt;/code&gt; 文件中：</target>
        </trans-unit>
        <trans-unit id="26a7634911f3cf897c40c030da805a6d108e7533" translate="yes" xml:space="preserve">
          <source>To improve the user experience and further assist the user in configuring a given property, you can provide additional metadata that:</source>
          <target state="translated">为了改善用户体验,并进一步帮助用户配置给定的属性,你可以提供额外的元数据,这些元数据:</target>
        </trans-unit>
        <trans-unit id="3729650a9408f2af75a5c5dc425de2461132524e" translate="yes" xml:space="preserve">
          <source>To learn about securing this file appropriately, see &lt;a href=&quot;#deployment-initd-service-securing&quot;&gt;the guidelines for securing an init.d service&lt;/a&gt;.</source>
          <target state="translated">要了解有关适当保护此文件的信息，请参阅&lt;a href=&quot;#deployment-initd-service-securing&quot;&gt;保护init.d服务的准则&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8748d835a65d384a3a26059fab2194a2e3070c24" translate="yes" xml:space="preserve">
          <source>To learn about using Spring Boot with Gradle, please refer to the documentation for Spring Boot&amp;rsquo;s Gradle plugin:</source>
          <target state="translated">要了解有关将Spring Boot与Gradle结合使用的信息，请参阅Spring Boot的Gradle插件的文档：</target>
        </trans-unit>
        <trans-unit id="e0d3a4720bb5fc6f7377033a50045f3a3bc1e830" translate="yes" xml:space="preserve">
          <source>To learn about using Spring Boot with Maven, please refer to the documentation for Spring Boot&amp;rsquo;s Maven plugin:</source>
          <target state="translated">要了解有关将Spring Boot与Maven结合使用的信息，请参阅Spring Boot的Maven插件的文档：</target>
        </trans-unit>
        <trans-unit id="62c164149ee34de1ebc8ad3aacff1fdca3929d62" translate="yes" xml:space="preserve">
          <source>To learn how to swap technical facets, please see the how-to documentation for &lt;a href=&quot;howto#howto-use-another-web-server&quot;&gt;swapping web server&lt;/a&gt; and &lt;a href=&quot;howto#howto-configure-log4j-for-logging&quot;&gt;logging system&lt;/a&gt;.</source>
          <target state="translated">要了解如何交换技术方面的信息，请参阅有关&lt;a href=&quot;howto#howto-use-another-web-server&quot;&gt;交换Web服务器&lt;/a&gt;和&lt;a href=&quot;howto#howto-configure-log4j-for-logging&quot;&gt;日志记录系统的方法&lt;/a&gt;文档。</target>
        </trans-unit>
        <trans-unit id="85a85535e8614fa50f76ae34f8faddee7f356e92" translate="yes" xml:space="preserve">
          <source>To learn more about Micrometer&amp;rsquo;s capabilities, please refer to its &lt;a href=&quot;https://micrometer.io/docs&quot;&gt;reference documentation&lt;/a&gt;, in particular the &lt;a href=&quot;https://micrometer.io/docs/concepts&quot;&gt;concepts section&lt;/a&gt;.</source>
          <target state="translated">要了解有关Micrometer功能的更多信息，请参阅其&lt;a href=&quot;https://micrometer.io/docs&quot;&gt;参考文档&lt;/a&gt;，特别是&lt;a href=&quot;https://micrometer.io/docs/concepts&quot;&gt;概念部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d41d5171097c70d76e93f80867fde76da78296c6" translate="yes" xml:space="preserve">
          <source>To learn more about the Actuator&amp;rsquo;s endpoints and their request and response formats, please refer to the separate API documentation (&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt; or &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;).</source>
          <target state="translated">要了解有关执行器端点及其请求和响应格式的更多信息，请参阅单独的API文档（&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/htmlsingle&quot;&gt;HTML&lt;/a&gt;或&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/actuator-api/pdf/spring-boot-actuator-web-api.pdf&quot;&gt;PDF&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="88c4f9087256237e2ce246daedaefbc67da5648d" translate="yes" xml:space="preserve">
          <source>To make Spring Boot auto-configuration work with the aforementioned embedded Apache Kafka broker, you need to remap a system property for embedded broker addresses (populated by the &lt;code&gt;EmbeddedKafkaBroker&lt;/code&gt;) into the Spring Boot configuration property for Apache Kafka. There are several ways to do that:</source>
          <target state="translated">要使Spring Boot自动配置与上述嵌入式Apache Kafka代理一起使用，您需要将嵌入式代理地址（由 &lt;code&gt;EmbeddedKafkaBroker&lt;/code&gt; 填充）的系统属性重新映射到Apache Kafka的Spring Boot配置属性中。有几种方法可以做到这一点：</target>
        </trans-unit>
        <trans-unit id="5ab69b2aa70c0cbc65afe2adc66437434008054e" translate="yes" xml:space="preserve">
          <source>To make an application-wide, additive customization to all &lt;code&gt;WebClient.Builder&lt;/code&gt; instances, you can declare &lt;code&gt;WebClientCustomizer&lt;/code&gt; beans and change the &lt;code&gt;WebClient.Builder&lt;/code&gt; locally at the point of injection.</source>
          <target state="translated">要对所有 &lt;code&gt;WebClient.Builder&lt;/code&gt; 实例进行应用程序范围的附加自定义，可以声明 &lt;code&gt;WebClientCustomizer&lt;/code&gt; bean并在注入点本地更改 &lt;code&gt;WebClient.Builder&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="76aceeac9111253b5f13c64a9995fe619ca4dc9a" translate="yes" xml:space="preserve">
          <source>To make an application-wide, additive customization, use a &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; bean. All such beans are automatically registered with the auto-configured &lt;code&gt;RestTemplateBuilder&lt;/code&gt; and are applied to any templates that are built with it.</source>
          <target state="translated">要进行应用程序范围的附加自定义，请使用 &lt;code&gt;RestTemplateCustomizer&lt;/code&gt; bean。所有此类bean都会自动注册到自动配置的 &lt;code&gt;RestTemplateBuilder&lt;/code&gt; 中，并应用于使用它构建的任何模板。</target>
        </trans-unit>
        <trans-unit id="80037567978b39638059a76eddee883c77a1e2f5" translate="yes" xml:space="preserve">
          <source>To make it easier to create optimized Docker images that can be built with a dockerfile, Spring Boot supports adding a layer index file to the jar. It provides a list of layers and the parts of the jar that should be contained within them. The list of layers in the index is ordered based on the order in which the layers should be added to the Docker/OCI image. Out-of-the-box, the following layers are supported:</source>
          <target state="translated">为了更容易创建可以用dockerfile构建的优化的Docker镜像,Spring Boot支持在jar中添加一个层索引文件。它提供了一个层的列表,以及jar中应该包含的部分。索引中的图层列表是根据图层应添加到Docker/OCI镜像中的顺序来排序的。开箱即用,支持以下层。</target>
        </trans-unit>
        <trans-unit id="a57fba3621864a82aa6f83e3041fda612f4ac21c" translate="yes" xml:space="preserve">
          <source>To make the scope of any customizations as narrow as possible, inject the auto-configured &lt;code&gt;RestTemplateBuilder&lt;/code&gt; and then call its methods as required. Each method call returns a new &lt;code&gt;RestTemplateBuilder&lt;/code&gt; instance, so the customizations only affect this use of the builder.</source>
          <target state="translated">为了使所有自定义项的范围尽可能狭窄，请注入自动配置的 &lt;code&gt;RestTemplateBuilder&lt;/code&gt; ，然后根据需要调用其方法。每个方法调用都返回一个新的 &lt;code&gt;RestTemplateBuilder&lt;/code&gt; 实例，因此自定义项仅影响此生成器的使用。</target>
        </trans-unit>
        <trans-unit id="e7158012d6f2c7fca0210332dc2f45166de03c70" translate="yes" xml:space="preserve">
          <source>To make the scope of any customizations as narrow as possible, inject the auto-configured &lt;code&gt;WebClient.Builder&lt;/code&gt; and then call its methods as required. &lt;code&gt;WebClient.Builder&lt;/code&gt; instances are stateful: Any change on the builder is reflected in all clients subsequently created with it. If you want to create several clients with the same builder, you can also consider cloning the builder with &lt;code&gt;WebClient.Builder other = builder.clone();&lt;/code&gt;.</source>
          <target state="translated">为了使所有自定义项的范围尽可能狭窄，请注入自动配置的 &lt;code&gt;WebClient.Builder&lt;/code&gt; ，然后根据需要调用其方法。 &lt;code&gt;WebClient.Builder&lt;/code&gt; 实例是有状态的：构建器上的任何更改都会反映在随后使用它创建的所有客户端中。如果要使用同一构建器创建多个客户端，则还可以考虑使用 &lt;code&gt;WebClient.Builder other = builder.clone();&lt;/code&gt; 克隆该构建器。。</target>
        </trans-unit>
        <trans-unit id="029ecd89f6154e11ce40056b384fbe103c4d7b9d" translate="yes" xml:space="preserve">
          <source>To map all &lt;code&gt;5xx&lt;/code&gt; errors by using a FreeMarker template, your directory structure would be as follows:</source>
          <target state="translated">要使用FreeMarker模板映射所有 &lt;code&gt;5xx&lt;/code&gt; 错误，您的目录结构如下：</target>
        </trans-unit>
        <trans-unit id="e84dd54c980d3099217870e671ee2f1f0423019f" translate="yes" xml:space="preserve">
          <source>To map all &lt;code&gt;5xx&lt;/code&gt; errors by using a Mustache template, your directory structure would be as follows:</source>
          <target state="translated">要使用Mustache模板映射所有 &lt;code&gt;5xx&lt;/code&gt; 错误，您的目录结构如下：</target>
        </trans-unit>
        <trans-unit id="a4327ac96e42803f1e5dedaae307636868a371bf" translate="yes" xml:space="preserve">
          <source>To mock Kotlin classes, &lt;a href=&quot;https://mockk.io/&quot;&gt;MockK&lt;/a&gt; is recommended. If you need the &lt;code&gt;Mockk&lt;/code&gt; equivalent of the Mockito specific &lt;a href=&quot;#boot-features-testing-spring-boot-applications-mocking-beans&quot;&gt;&lt;code&gt;@MockBean&lt;/code&gt; and &lt;code&gt;@SpyBean&lt;/code&gt; annotations&lt;/a&gt;, you can use &lt;a href=&quot;https://github.com/Ninja-Squad/springmockk&quot;&gt;SpringMockK&lt;/a&gt; which provides similar &lt;code&gt;@MockkBean&lt;/code&gt; and &lt;code&gt;@SpykBean&lt;/code&gt; annotations.</source>
          <target state="translated">要模拟Kotlin类，建议使用&lt;a href=&quot;https://mockk.io/&quot;&gt;MockK&lt;/a&gt;。如果您需要 &lt;code&gt;Mockk&lt;/code&gt; 等效于Mockito特定的&lt;a href=&quot;#boot-features-testing-spring-boot-applications-mocking-beans&quot;&gt; &lt;code&gt;@MockBean&lt;/code&gt; 和 &lt;code&gt;@SpyBean&lt;/code&gt; 批注&lt;/a&gt;，则可以使用&lt;a href=&quot;https://github.com/Ninja-Squad/springmockk&quot;&gt;SpringMockK&lt;/a&gt;，它提供类似的 &lt;code&gt;@MockkBean&lt;/code&gt; 和 &lt;code&gt;@SpykBean&lt;/code&gt; 批注。</target>
        </trans-unit>
        <trans-unit id="8fc1c1d9470f442b43582befe2184e1ed328fa01" translate="yes" xml:space="preserve">
          <source>To override dependency versions in Gradle, see &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#managing-dependencies-dependency-management-plugin-customizing&quot;&gt;this section&lt;/a&gt; of the Gradle plugin&amp;rsquo;s documentation.</source>
          <target state="translated">要覆盖Gradle中的依赖版本，请参阅Gradle插件文档的&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/gradle-plugin/reference/htmlsingle/#managing-dependencies-dependency-management-plugin-customizing&quot;&gt;这一部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0dd9b65bfcf98708d0e5dc080df89810d255f579" translate="yes" xml:space="preserve">
          <source>To override dependency versions with Maven, see &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#using&quot;&gt;this section&lt;/a&gt; of the Maven plugin&amp;rsquo;s documentation.</source>
          <target state="translated">要使用Maven覆盖依赖版本，请参阅Maven插件文档的&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.0/maven-plugin/reference/htmlsingle/#using&quot;&gt;这一部分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7f221e7c27fc50fcce7371848a5df53c3e2dc70f" translate="yes" xml:space="preserve">
          <source>To pass command-line arguments to the application, use &lt;code&gt;--&lt;/code&gt; to separate the commands from the &amp;ldquo;spring&amp;rdquo; command arguments, as shown in the following example:</source>
          <target state="translated">要将命令行参数传递给应用程序，请使用 &lt;code&gt;--&lt;/code&gt; 将命令与&amp;ldquo; spring&amp;rdquo;命令参数分开，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="cbd902a88d71a4d380c69d7ee7cd5da888d41e2c" translate="yes" xml:space="preserve">
          <source>To produce the two artifacts, one that can be used as a dependency and one that is executable, a classifier must be specified. This classifier is applied to the name of the executable archive, leaving the default archive for use as a dependency.</source>
          <target state="translated">为了生成两个工件,一个是可以作为依赖关系使用的工件,一个是可执行的工件,必须指定一个分类器。这个分类器被应用于可执行存档的名称,留下默认的存档作为依赖关系使用。</target>
        </trans-unit>
        <trans-unit id="439843261e583c6eda3a10871bff83cfdd56e05e" translate="yes" xml:space="preserve">
          <source>To provide a concrete example, suppose you develop a &lt;code&gt;@Component&lt;/code&gt; that uses a &lt;code&gt;name&lt;/code&gt; property, as shown in the following example:</source>
          <target state="translated">为了提供一个具体的示例，假设您开发了一个使用 &lt;code&gt;name&lt;/code&gt; 属性的 &lt;code&gt;@Component&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="9bf7bb1426dc08a85e682338f957a2b2c0b73d4e" translate="yes" xml:space="preserve">
          <source>To provide custom application information, you can register Spring beans that implement the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoContributor.java&quot;&gt;&lt;code&gt;InfoContributor&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">要提供自定义应用程序信息，您可以注册实现&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoContributor.java&quot;&gt; &lt;code&gt;InfoContributor&lt;/code&gt; &lt;/a&gt;接口的Spring bean 。</target>
        </trans-unit>
        <trans-unit id="9ade205b6988436803e0dbd79bcc471b61e3f95f" translate="yes" xml:space="preserve">
          <source>To provide custom health information from a reactive API, you can register Spring beans that implement the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java&quot;&gt;&lt;code&gt;ReactiveHealthIndicator&lt;/code&gt;&lt;/a&gt; interface. The following code shows a sample &lt;code&gt;ReactiveHealthIndicator&lt;/code&gt; implementation:</source>
          <target state="translated">为了从反应式API提供自定义健康信息，您可以注册实现&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java&quot;&gt; &lt;code&gt;ReactiveHealthIndicator&lt;/code&gt; &lt;/a&gt;接口的Spring bean 。以下代码显示了示例 &lt;code&gt;ReactiveHealthIndicator&lt;/code&gt; 实现：</target>
        </trans-unit>
        <trans-unit id="30b3fde07b75289246e2b2c5747bf45739bfe86b" translate="yes" xml:space="preserve">
          <source>To provide custom health information, you can register Spring beans that implement the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java&quot;&gt;&lt;code&gt;HealthIndicator&lt;/code&gt;&lt;/a&gt; interface. You need to provide an implementation of the &lt;code&gt;health()&lt;/code&gt; method and return a &lt;code&gt;Health&lt;/code&gt; response. The &lt;code&gt;Health&lt;/code&gt; response should include a status and can optionally include additional details to be displayed. The following code shows a sample &lt;code&gt;HealthIndicator&lt;/code&gt; implementation:</source>
          <target state="translated">为了提供自定义的健康信息，您可以注册实现&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java&quot;&gt; &lt;code&gt;HealthIndicator&lt;/code&gt; &lt;/a&gt;接口的Spring bean 。您需要提供 &lt;code&gt;health()&lt;/code&gt; 方法的实现并返回 &lt;code&gt;Health&lt;/code&gt; 响应。在 &lt;code&gt;Health&lt;/code&gt; 反应应该包括状态和可任选包括其他详细信息显示。以下代码显示了示例 &lt;code&gt;HealthIndicator&lt;/code&gt; 实现：</target>
        </trans-unit>
        <trans-unit id="788eec8862017c7000f958af3b6b21359c3c2fb7" translate="yes" xml:space="preserve">
          <source>To reduce the chances of the application&amp;rsquo;s user account being compromised, you should consider preventing it from using a login shell. For example, you can set the account&amp;rsquo;s shell to &lt;code&gt;/usr/sbin/nologin&lt;/code&gt;.</source>
          <target state="translated">为了减少应用程序的用户帐户被盗用的机会，您应该考虑阻止它使用登录外壳程序。例如，您可以将帐户的外壳程序设置为 &lt;code&gt;/usr/sbin/nologin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="411b41f85a6cb367f6e6d7898e33f29f9f05f811" translate="yes" xml:space="preserve">
          <source>To register custom metrics, inject &lt;code&gt;MeterRegistry&lt;/code&gt; into your component, as shown in the following example:</source>
          <target state="translated">要注册自定义指标， &lt;code&gt;MeterRegistry&lt;/code&gt; 注入到您的组件中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="c107934f7b84e2c48f5d8f94b338ce6ed36a8907" translate="yes" xml:space="preserve">
          <source>To repackage an existing archive so that it becomes a self-contained executable archive, use &lt;code&gt;org.springframework.boot.loader.tools.Repackager&lt;/code&gt;. The &lt;code&gt;Repackager&lt;/code&gt; class takes a single constructor argument that refers to an existing jar or war archive. Use one of the two available &lt;code&gt;repackage()&lt;/code&gt; methods to either replace the original file or write to a new destination. Various settings can also be configured on the repackager before it is run.</source>
          <target state="translated">要重新打包现有归档文件，使其成为独立的可执行归档文件，请使用 &lt;code&gt;org.springframework.boot.loader.tools.Repackager&lt;/code&gt; 。该 &lt;code&gt;Repackager&lt;/code&gt; 类需要引用现有的罐子或战争归档单个构造函数的参数。使用两个可用的 &lt;code&gt;repackage()&lt;/code&gt; 方法之一替换原始文件或写入新目标。在重新打包程序运行之前，还可以在其上配置各种设置。</target>
        </trans-unit>
        <trans-unit id="5e66cbd7ab49df10cefc3849a590e72c11bdb63b" translate="yes" xml:space="preserve">
          <source>To retry operations, you can enable retries on the &lt;code&gt;AmqpTemplate&lt;/code&gt; (for example, in the event that the broker connection is lost):</source>
          <target state="translated">要重试操作，可以在 &lt;code&gt;AmqpTemplate&lt;/code&gt; 上启用重试（例如，在代理连接丢失的情况下）：</target>
        </trans-unit>
        <trans-unit id="821e262dc78f3b7366c7656c2ddc1e8dee511059" translate="yes" xml:space="preserve">
          <source>To run an app with that &lt;code&gt;DataSource&lt;/code&gt;, all you need is the connection information. Pool-specific settings can also be provided. Check the implementation that is going to be used at runtime for more details.</source>
          <target state="translated">要使用该 &lt;code&gt;DataSource&lt;/code&gt; 运行应用程序，您需要的只是连接信息。还可以提供特定于池的设置。有关更多详细信息，请检查将在运行时使用的实现。</target>
        </trans-unit>
        <trans-unit id="2ff814d335c9fede0bb451434c641322abd8cae0" translate="yes" xml:space="preserve">
          <source>To run in App Engine, you can create a project in the UI first, which sets up a unique identifier for you and also sets up HTTP routes. Add a Java app to the project and leave it empty and then use the &lt;a href=&quot;https://cloud.google.com/sdk/install&quot;&gt;Google Cloud SDK&lt;/a&gt; to push your Spring Boot app into that slot from the command line or CI build.</source>
          <target state="translated">要在App Engine中运行，您可以先在用户界面中创建一个项目，该项目将为您设置一个唯一的标识符，并还设置HTTP路由。将Java应用程序添加到项目中，然后将其保留为空，然后使用&lt;a href=&quot;https://cloud.google.com/sdk/install&quot;&gt;Google Cloud SDK&lt;/a&gt;从命令行或CI构建将Spring Boot应用程序推送到该插槽中。</target>
        </trans-unit>
        <trans-unit id="c1af965b44b6b84c2c01b93560b32dc4d77db635" translate="yes" xml:space="preserve">
          <source>To run that application, use the &lt;code&gt;java -jar&lt;/code&gt; command, as follows:</source>
          <target state="translated">要运行该应用程序，请使用 &lt;code&gt;java -jar&lt;/code&gt; 命令，如下所示：</target>
        </trans-unit>
        <trans-unit id="89845f6c2d6e6ac23e0fd130b8dc292ce99a719e" translate="yes" xml:space="preserve">
          <source>To scan for a free port (using OS natives to prevent clashes) use &lt;code&gt;server.port=0&lt;/code&gt;.</source>
          <target state="translated">要扫描可用端口（使用OS本机来防止冲突），请使用 &lt;code&gt;server.port=0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4bae108eca923fd7e7ba2297dff0895501f37c6d" translate="yes" xml:space="preserve">
          <source>To see the order of every &lt;code&gt;Filter&lt;/code&gt; in your application, enable debug level logging for the &lt;code&gt;web&lt;/code&gt;&lt;a href=&quot;#boot-features-custom-log-groups&quot;&gt;logging group&lt;/a&gt; (&lt;code&gt;logging.level.web=debug&lt;/code&gt;). Details of the registered filters, including their order and URL patterns, will then be logged at startup.</source>
          <target state="translated">要查看应用程序中每个 &lt;code&gt;Filter&lt;/code&gt; 的顺序，请为 &lt;code&gt;web&lt;/code&gt; &lt;a href=&quot;#boot-features-custom-log-groups&quot;&gt;日志记录组&lt;/a&gt;（ &lt;code&gt;logging.level.web=debug&lt;/code&gt; ）启用调试级别的日志记录。然后，将在启动时记录已注册过滤器的详细信息，包括其顺序和URL模式。</target>
        </trans-unit>
        <trans-unit id="15753153d9d9762f9f3a9d6ac74593c5bd3687ee" translate="yes" xml:space="preserve">
          <source>To set JVM command line arguments, you can use the &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable, as shown in the following example:</source>
          <target state="translated">要设置JVM命令行参数，可以使用 &lt;code&gt;JAVA_OPTS&lt;/code&gt; 环境变量，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="0b26972cc056abfe77d369936ae35a8c9a249073" translate="yes" xml:space="preserve">
          <source>To solve this problem, many developers use &amp;ldquo;shaded&amp;rdquo; jars. A shaded jar packages all classes, from all jars, into a single &amp;ldquo;uber jar&amp;rdquo;. The problem with shaded jars is that it becomes hard to see which libraries are actually in your application. It can also be problematic if the same filename is used (but with different content) in multiple jars. Spring Boot takes a different approach and lets you actually nest jars directly.</source>
          <target state="translated">为了解决这个问题，许多开发人员使用&amp;ldquo;阴影&amp;rdquo;罐子。一个有阴影的jar将所有jar中的所有类打包到一个&amp;ldquo;超级jar&amp;rdquo;中。带阴影的jar的问题在于，很难查看应用程序中实际包含哪些库。如果在多个jar中使用相同的文件名（但具有不同的内容），也可能会产生问题。Spring Boot采用了另一种方法，实际上允许您直接嵌套jar。</target>
        </trans-unit>
        <trans-unit id="418b91bb761b61e6505e236bb63a7c9604bf373b" translate="yes" xml:space="preserve">
          <source>To solve this problem, many developers use &amp;ldquo;uber&amp;rdquo; jars. An uber jar packages all the classes from all the application&amp;rsquo;s dependencies into a single archive. The problem with this approach is that it becomes hard to see which libraries are in your application. It can also be problematic if the same filename is used (but with different content) in multiple jars.</source>
          <target state="translated">为了解决这个问题，许多开发人员使用&amp;ldquo;超级&amp;rdquo;罐子。uber jar将来自应用程序所有依赖项的所有类打包到单个存档中。这种方法的问题在于，很难查看应用程序中包含哪些库。如果在多个jar中使用相同的文件名（但具有不同的内容），也可能会产生问题。</target>
        </trans-unit>
        <trans-unit id="4c026d69017fcdfaeb8895d71dce8c25d2e33724" translate="yes" xml:space="preserve">
          <source>To specify a buffer size of 10 megabytes, &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;10MB&lt;/code&gt; are equivalent. A size threshold of 256 bytes can be specified as &lt;code&gt;256&lt;/code&gt; or &lt;code&gt;256B&lt;/code&gt;.</source>
          <target state="translated">若要指定10 MB的缓冲区大小，则 &lt;code&gt;10&lt;/code&gt; 和 &lt;code&gt;10MB&lt;/code&gt; 是等效的。可以将256个字节的大小阈值指定为 &lt;code&gt;256&lt;/code&gt; 或 &lt;code&gt;256B&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5201abf1ce36b1dab4c7364cdf6899960534a75" translate="yes" xml:space="preserve">
          <source>To specify a session timeout of 30 seconds, &lt;code&gt;30&lt;/code&gt;, &lt;code&gt;PT30S&lt;/code&gt; and &lt;code&gt;30s&lt;/code&gt; are all equivalent. A read timeout of 500ms can be specified in any of the following form: &lt;code&gt;500&lt;/code&gt;, &lt;code&gt;PT0.5S&lt;/code&gt; and &lt;code&gt;500ms&lt;/code&gt;.</source>
          <target state="translated">要指定30秒的会话超时， &lt;code&gt;30&lt;/code&gt; ， &lt;code&gt;PT30S&lt;/code&gt; 和 &lt;code&gt;30s&lt;/code&gt; 都是等效的。可以使用以下任意形式指定500ms的读取超时： &lt;code&gt;500&lt;/code&gt; ， &lt;code&gt;PT0.5S&lt;/code&gt; 和 &lt;code&gt;500ms&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c094808e125d827f6a6211165315c6e3d12a5a5" translate="yes" xml:space="preserve">
          <source>To switch off the HTTP endpoints completely but still create a &lt;code&gt;WebApplicationContext&lt;/code&gt;, use &lt;code&gt;server.port=-1&lt;/code&gt; (doing so is sometimes useful for testing).</source>
          <target state="translated">要完全关闭HTTP端点但仍创建 &lt;code&gt;WebApplicationContext&lt;/code&gt; ，请使用 &lt;code&gt;server.port=-1&lt;/code&gt; （这样做有时对测试很有用）。</target>
        </trans-unit>
        <trans-unit id="c10e8cea726971c7fc103bb4e7da5dd0cd7536fd" translate="yes" xml:space="preserve">
          <source>To take control over this behaviour, define your &lt;code&gt;GraphiteMeterRegistry&lt;/code&gt; and supply your own &lt;code&gt;HierarchicalNameMapper&lt;/code&gt;. An auto-configured &lt;code&gt;GraphiteConfig&lt;/code&gt; and &lt;code&gt;Clock&lt;/code&gt; beans are provided unless you define your own:</source>
          <target state="translated">要控制此行为，请定义 &lt;code&gt;GraphiteMeterRegistry&lt;/code&gt; 并提供自己的 &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; 。除非您定义自己的，否则将提供自动配置的 &lt;code&gt;GraphiteConfig&lt;/code&gt; 和 &lt;code&gt;Clock&lt;/code&gt; Bean：</target>
        </trans-unit>
        <trans-unit id="978c77b844eeccf093a90060c972f0a386b7a661" translate="yes" xml:space="preserve">
          <source>To take control over this behaviour, define your &lt;code&gt;JmxMeterRegistry&lt;/code&gt; and supply your own &lt;code&gt;HierarchicalNameMapper&lt;/code&gt;. An auto-configured &lt;code&gt;JmxConfig&lt;/code&gt; and &lt;code&gt;Clock&lt;/code&gt; beans are provided unless you define your own:</source>
          <target state="translated">要控制此行为，请定义 &lt;code&gt;JmxMeterRegistry&lt;/code&gt; 并提供自己的 &lt;code&gt;HierarchicalNameMapper&lt;/code&gt; 。除非您定义自己的，否则将提供自动配置的 &lt;code&gt;JmxConfig&lt;/code&gt; 和 &lt;code&gt;Clock&lt;/code&gt; Bean：</target>
        </trans-unit>
        <trans-unit id="05fcfc031547d4f81c6c470218df3ed4c55abb88" translate="yes" xml:space="preserve">
          <source>To take full control of the configuration of the &lt;code&gt;EntityManagerFactory&lt;/code&gt;, you need to add a &lt;code&gt;@Bean&lt;/code&gt; named &amp;lsquo;entityManagerFactory&amp;rsquo;. Spring Boot auto-configuration switches off its entity manager in the presence of a bean of that type.</source>
          <target state="translated">要完全控制 &lt;code&gt;EntityManagerFactory&lt;/code&gt; 的配置，您需要添加一个名为'entityManagerFactory'的 &lt;code&gt;@Bean&lt;/code&gt; 。如果存在这种类型的Bean，Spring Boot自动配置将关闭其实体管理器。</target>
        </trans-unit>
        <trans-unit id="3d80d062ce7f4c98164e76b98598466a4680caa5" translate="yes" xml:space="preserve">
          <source>To test that &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html&quot;&gt;Spring WebFlux&lt;/a&gt; controllers are working as expected, you can use the &lt;code&gt;@WebFluxTest&lt;/code&gt; annotation. &lt;code&gt;@WebFluxTest&lt;/code&gt; auto-configures the Spring WebFlux infrastructure and limits scanned beans to &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@ControllerAdvice&lt;/code&gt;, &lt;code&gt;@JsonComponent&lt;/code&gt;, &lt;code&gt;Converter&lt;/code&gt;, &lt;code&gt;GenericConverter&lt;/code&gt;, &lt;code&gt;WebFilter&lt;/code&gt;, and &lt;code&gt;WebFluxConfigurer&lt;/code&gt;. Regular &lt;code&gt;@Component&lt;/code&gt; and &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans are not scanned when the &lt;code&gt;@WebFluxTest&lt;/code&gt; annotation is used. &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; can be used to include &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans.</source>
          <target state="translated">要测试&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html&quot;&gt;Spring WebFlux&lt;/a&gt;控制器是否按预期工作，可以使用 &lt;code&gt;@WebFluxTest&lt;/code&gt; 批注。 &lt;code&gt;@WebFluxTest&lt;/code&gt; 自动配置春季WebFlux基础设施和限制扫描豆 &lt;code&gt;@Controller&lt;/code&gt; ， &lt;code&gt;@ControllerAdvice&lt;/code&gt; ， &lt;code&gt;@JsonComponent&lt;/code&gt; ， &lt;code&gt;Converter&lt;/code&gt; ， &lt;code&gt;GenericConverter&lt;/code&gt; ， &lt;code&gt;WebFilter&lt;/code&gt; ，和 &lt;code&gt;WebFluxConfigurer&lt;/code&gt; 。使用 &lt;code&gt;@WebFluxTest&lt;/code&gt; 批注时，不扫描常规 &lt;code&gt;@Component&lt;/code&gt; 和 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; Bean 。 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; 可用于包括 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="e4f6849362ffdceb4140cb0eae229bb6b91f0748" translate="yes" xml:space="preserve">
          <source>To test that object JSON serialization and deserialization is working as expected, you can use the &lt;code&gt;@JsonTest&lt;/code&gt; annotation. &lt;code&gt;@JsonTest&lt;/code&gt; auto-configures the available supported JSON mapper, which can be one of the following libraries:</source>
          <target state="translated">要测试对象JSON序列化和反序列化是否按预期工作，可以使用 &lt;code&gt;@JsonTest&lt;/code&gt; 批注。 &lt;code&gt;@JsonTest&lt;/code&gt; 自动配置可用的受支持的JSON映射器，该映射器可以是以下库之一：</target>
        </trans-unit>
        <trans-unit id="72273788175486d9b72fd1cdb35fce7fbc896918" translate="yes" xml:space="preserve">
          <source>To test whether Spring MVC controllers are working as expected, use the &lt;code&gt;@WebMvcTest&lt;/code&gt; annotation. &lt;code&gt;@WebMvcTest&lt;/code&gt; auto-configures the Spring MVC infrastructure and limits scanned beans to &lt;code&gt;@Controller&lt;/code&gt;, &lt;code&gt;@ControllerAdvice&lt;/code&gt;, &lt;code&gt;@JsonComponent&lt;/code&gt;, &lt;code&gt;Converter&lt;/code&gt;, &lt;code&gt;GenericConverter&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;, &lt;code&gt;HandlerInterceptor&lt;/code&gt;, &lt;code&gt;WebMvcConfigurer&lt;/code&gt;, and &lt;code&gt;HandlerMethodArgumentResolver&lt;/code&gt;. Regular &lt;code&gt;@Component&lt;/code&gt; and &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans are not scanned when the &lt;code&gt;@WebMvcTest&lt;/code&gt; annotation is used. &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; can be used to include &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans.</source>
          <target state="translated">要测试Spring MVC控制器是否按预期工作，请使用 &lt;code&gt;@WebMvcTest&lt;/code&gt; 批注。 &lt;code&gt;@WebMvcTest&lt;/code&gt; 自动配置Spring MVC的基础设施和限制扫描豆 &lt;code&gt;@Controller&lt;/code&gt; ， &lt;code&gt;@ControllerAdvice&lt;/code&gt; ， &lt;code&gt;@JsonComponent&lt;/code&gt; ， &lt;code&gt;Converter&lt;/code&gt; ， &lt;code&gt;GenericConverter&lt;/code&gt; ， &lt;code&gt;Filter&lt;/code&gt; ， &lt;code&gt;HandlerInterceptor&lt;/code&gt; 接口， &lt;code&gt;WebMvcConfigurer&lt;/code&gt; 和 &lt;code&gt;HandlerMethodArgumentResolver&lt;/code&gt; 。使用 &lt;code&gt;@WebMvcTest&lt;/code&gt; 批注时，不扫描常规 &lt;code&gt;@Component&lt;/code&gt; 和 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; Bean 。 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; 可用于包含 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="fcc0cdfd12fb7a3ce74ba76659a8c2a1b2b76694" translate="yes" xml:space="preserve">
          <source>To trigger LiveReload when a file changes, &lt;a href=&quot;#using-boot-devtools-restart&quot;&gt;Automatic Restart&lt;/a&gt; must be enabled.</source>
          <target state="translated">要在文件更改时触发LiveReload，必须启用&amp;ldquo;&lt;a href=&quot;#using-boot-devtools-restart&quot;&gt;自动重启&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2d869ae41ce8a4456c08f4cfa1c89c786c6c4bb3" translate="yes" xml:space="preserve">
          <source>To uninstall a dependency, use the &lt;code&gt;uninstall&lt;/code&gt; command. As with the &lt;code&gt;install&lt;/code&gt; command, it takes one or more sets of artifact coordinates in the format of &lt;code&gt;group:artifact:version&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">要卸载依赖项，请使用 &lt;code&gt;uninstall&lt;/code&gt; 命令。与 &lt;code&gt;install&lt;/code&gt; 命令一样，它采用 &lt;code&gt;group:artifact:version&lt;/code&gt; 格式的一组或多组工件坐标，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="e179623a791a8c49821f833950393cffe93aa0f8" translate="yes" xml:space="preserve">
          <source>To uninstall all additional dependencies, you can use the &lt;code&gt;--all&lt;/code&gt; option, as shown in the following example:</source>
          <target state="translated">要卸载所有其他依赖项，可以使用 &lt;code&gt;--all&lt;/code&gt; 选项，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="79d237463c317d24048bb1f8d1e43fa839d780d6" translate="yes" xml:space="preserve">
          <source>To upgrade an existing CLI installation, use the appropriate package manager command (for example, &lt;code&gt;brew upgrade&lt;/code&gt;). If you manually installed the CLI, follow the &lt;a href=&quot;#getting-started-manual-cli-installation&quot;&gt;standard instructions&lt;/a&gt;, remembering to update your &lt;code&gt;PATH&lt;/code&gt; environment variable to remove any older references.</source>
          <target state="translated">要升级现有的CLI安装，请使用适当的程序包管理器命令（例如 &lt;code&gt;brew upgrade&lt;/code&gt; ）。如果您手动安装了CLI，请遵循&lt;a href=&quot;#getting-started-manual-cli-installation&quot;&gt;标准说明&lt;/a&gt;，记住要更新 &lt;code&gt;PATH&lt;/code&gt; 环境变量以删除所有较旧的引用。</target>
        </trans-unit>
        <trans-unit id="97041c38811806b87bf6626a1205ff3fb37709e0" translate="yes" xml:space="preserve">
          <source>To use Jersey alongside another web framework, such as Spring MVC, it should be configured so that it will allow the other framework to handle requests that it cannot handle. First, configure Jersey to use a Filter rather than a Servlet by configuring the &lt;code&gt;spring.jersey.type&lt;/code&gt; application property with a value of &lt;code&gt;filter&lt;/code&gt;. Second, configure your &lt;code&gt;ResourceConfig&lt;/code&gt; to forward requests that would have resulted in a 404, as shown in the following example.</source>
          <target state="translated">要将Jersey与其他Web框架（例如Spring MVC）一起使用，应对其进行配置，以便它将允许其他框架处理它无法处理的请求。首先，配置泽西通过配置使用过滤器，而不是一个Servlet &lt;code&gt;spring.jersey.type&lt;/code&gt; 用的应用价值属性 &lt;code&gt;filter&lt;/code&gt; 。其次，配置您的 &lt;code&gt;ResourceConfig&lt;/code&gt; 以转发可能导致404的请求，如以下示例所示。</target>
        </trans-unit>
        <trans-unit id="b7b2444f17d5c879c8aed9df81339daacbfea961" translate="yes" xml:space="preserve">
          <source>To use a trigger file, set the &lt;code&gt;spring.devtools.restart.trigger-file&lt;/code&gt; property to the name (excluding any path) of your trigger file. The trigger file must appear somewhere on your classpath.</source>
          <target state="translated">要使用触发文件，请将 &lt;code&gt;spring.devtools.restart.trigger-file&lt;/code&gt; 属性设置为触发文件的名称（不包括任何路径）。触发文件必须出现在您的类路径上。</target>
        </trans-unit>
        <trans-unit id="345d566bf6577b60f3da0778ccd404ae101f0b72" translate="yes" xml:space="preserve">
          <source>To use cache busting, the following configuration configures a cache busting solution for all static resources, effectively adding a content hash, such as &lt;code&gt;&amp;lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&amp;gt;&lt;/code&gt;, in URLs:</source>
          <target state="translated">要使用缓存清除，以下配置为所有静态资源配置了缓存清除解决方案，并在URL中有效地添加了内容哈希，例如 &lt;code&gt;&amp;lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&amp;gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ba6b36cd4f00846ae8eece4fc8d354f0678413c6" translate="yes" xml:space="preserve">
          <source>To use configuration property scanning, add the &lt;code&gt;@ConfigurationPropertiesScan&lt;/code&gt; annotation to your application. Typically, it is added to the main application class that is annotated with &lt;code&gt;@SpringBootApplication&lt;/code&gt; but it can be added to any &lt;code&gt;@Configuration&lt;/code&gt; class. By default, scanning will occur from the package of the class that declares the annotation. If you want to define specific packages to scan, you can do so as shown in the following example:</source>
          <target state="translated">要使用配置属性扫描，请将 &lt;code&gt;@ConfigurationPropertiesScan&lt;/code&gt; 批注添加到您的应用程序。通常，它被添加到使用 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 注释的主应用程序类中，但可以将其添加到任何 &lt;code&gt;@Configuration&lt;/code&gt; 类中。默认情况下，将从声明注释的类的包中进行扫描。如果要定义要扫描的特定程序包，可以按照以下示例所示进行操作：</target>
        </trans-unit>
        <trans-unit id="b4df377ab19485c8e94bcb9c3fd11297b10aeeb3" translate="yes" xml:space="preserve">
          <source>To use constructor binding the class must be enabled using &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; or configuration property scanning. You cannot use constructor binding with beans that are created by the regular Spring mechanisms (e.g. &lt;code&gt;@Component&lt;/code&gt; beans, beans created via &lt;code&gt;@Bean&lt;/code&gt; methods or beans loaded using &lt;code&gt;@Import&lt;/code&gt;)</source>
          <target state="translated">要使用构造函数绑定，必须使用 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; 或配置属性扫描来启用该类。您不能使用构造器是由普通的Spring机制创建的Bean结合（如 &lt;code&gt;@Component&lt;/code&gt; 通过创建豆类，豆类 &lt;code&gt;@Bean&lt;/code&gt; 方法或豆类加载的使用 &lt;code&gt;@Import&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4a4571f1714e8a1753db34e3cb3c68d5d0ec4195" translate="yes" xml:space="preserve">
          <source>To use the factory bean, wire &lt;code&gt;StreamsBuilder&lt;/code&gt; into your &lt;code&gt;@Bean&lt;/code&gt; as shown in the following example:</source>
          <target state="translated">要使用工厂bean，将 &lt;code&gt;StreamsBuilder&lt;/code&gt; 连接到您的 &lt;code&gt;@Bean&lt;/code&gt; 中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="5ebaeec9bf614df4be39d99298f4b39f9c743da4" translate="yes" xml:space="preserve">
          <source>To use the processor, include a dependency on &lt;code&gt;spring-boot-configuration-processor&lt;/code&gt;.</source>
          <target state="translated">要使用处理器，请包括对 &lt;code&gt;spring-boot-configuration-processor&lt;/code&gt; 的依赖。</target>
        </trans-unit>
        <trans-unit id="f573223c600422d4eddb9891fac45218d46f643e" translate="yes" xml:space="preserve">
          <source>To use version agnostic URLs for Webjars, add the &lt;code&gt;webjars-locator-core&lt;/code&gt; dependency. Then declare your Webjar. Using jQuery as an example, adding &lt;code&gt;&quot;/webjars/jquery/jquery.min.js&quot;&lt;/code&gt; results in &lt;code&gt;&quot;/webjars/jquery/x.y.z/jquery.min.js&quot;&lt;/code&gt; where &lt;code&gt;x.y.z&lt;/code&gt; is the Webjar version.</source>
          <target state="translated">要对Webjars使用版本无关的URL，请添加 &lt;code&gt;webjars-locator-core&lt;/code&gt; 依赖项。然后声明您的Webjar。以jQuery为例，添加 &lt;code&gt;&quot;/webjars/jquery/jquery.min.js&quot;&lt;/code&gt; 得到 &lt;code&gt;&quot;/webjars/jquery/x.y.z/jquery.min.js&quot;&lt;/code&gt; ，其中 &lt;code&gt;x.y.z&lt;/code&gt; 是Webjar版本。</target>
        </trans-unit>
        <trans-unit id="0bbcfcd889b86b993317c5f361655ec5e2c24f36" translate="yes" xml:space="preserve">
          <source>To work with &lt;code&gt;@ConfigurationProperties&lt;/code&gt; beans, you can inject them in the same way as any other bean, as shown in the following example:</source>
          <target state="translated">要使用 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; Bean，可以像使用其他任何Bean一样注入它们，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="4a0d7d7d8e6343434f03db48b10e32574249c0fd" translate="yes" xml:space="preserve">
          <source>Tomcat</source>
          <target state="translated">Tomcat</target>
        </trans-unit>
        <trans-unit id="91e8b91d5c574bd17e0311fd1c54df5015f9c38d" translate="yes" xml:space="preserve">
          <source>Tomcat 9.0</source>
          <target state="translated">Tomcat 9.0</target>
        </trans-unit>
        <trans-unit id="0e3a2df5d8db2fcf82a6a73727f283d41a7e6ca3" translate="yes" xml:space="preserve">
          <source>Tomcat base directory. If not specified, a temporary directory is used.</source>
          <target state="translated">Tomcat基础目录。如果没有指定,则使用临时目录。</target>
        </trans-unit>
        <trans-unit id="dd0cdd681674f386aee7a82465011651ef75a4db" translate="yes" xml:space="preserve">
          <source>Tomcat datasource specific settings bound to an instance of Tomcat JDBC's DataSource</source>
          <target state="translated">绑定到Tomcat JDBC's DataSource实例的Tomcat数据源特定设置。</target>
        </trans-unit>
        <trans-unit id="8d8aaffc99e7d388edf44b6fa6be220482443087" translate="yes" xml:space="preserve">
          <source>Tomcat is also configured with a default regular expression that matches internal proxies that are to be trusted. By default, IP addresses in &lt;code&gt;10/8&lt;/code&gt;, &lt;code&gt;192.168/16&lt;/code&gt;, &lt;code&gt;169.254/16&lt;/code&gt; and &lt;code&gt;127/8&lt;/code&gt; are trusted. You can customize the valve&amp;rsquo;s configuration by adding an entry to &lt;code&gt;application.properties&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">Tomcat还配置有一个默认正则表达式，该正则表达式与要信任的内部代理匹配。默认情况下，IP地址在 &lt;code&gt;10/8&lt;/code&gt; ， &lt;code&gt;192.168/16&lt;/code&gt; ， &lt;code&gt;169.254/16&lt;/code&gt; 和 &lt;code&gt;127/8&lt;/code&gt; 是值得信赖的。您可以通过向 &lt;code&gt;application.properties&lt;/code&gt; 添加一个条目来自定义阀门的配置，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="b0cd978b92098762d3dbd384be99c16125b8c68d" translate="yes" xml:space="preserve">
          <source>Tomcat metrics (&lt;code&gt;server.tomcat.mbeanregistry.enabled&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt; for all Tomcat metrics to be registered)</source>
          <target state="translated">Tomcat指标（必须将 &lt;code&gt;server.tomcat.mbeanregistry.enabled&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; 才能注册所有Tomcat指标）</target>
        </trans-unit>
        <trans-unit id="c31a517a1e961932ca24e01953683e1952da1a8c" translate="yes" xml:space="preserve">
          <source>Total length of a single payload should be kept within your network's MTU.</source>
          <target state="translated">单个有效载荷的总长度应保持在你的网络MTU之内。</target>
        </trans-unit>
        <trans-unit id="999f121e5def84ff7cb388aef725e7ea52805368" translate="yes" xml:space="preserve">
          <source>Total memory size the producer can use to buffer records waiting to be sent to the server.</source>
          <target state="translated">生产者可以用来缓冲等待发送到服务器的记录的总内存大小。</target>
        </trans-unit>
        <trans-unit id="1ff0ea389cc083f8c20dbdc10d4b94064dd4e759" translate="yes" xml:space="preserve">
          <source>Total size of log backups to be kept.</source>
          <target state="translated">需要保存的日志备份的总规模。</target>
        </trans-unit>
        <trans-unit id="194db2e708fa01996c59361ff80bcff823dfcec4" translate="yes" xml:space="preserve">
          <source>Tracks the application&amp;rsquo;s PID by using &lt;code&gt;/var/run/&amp;lt;appname&amp;gt;/&amp;lt;appname&amp;gt;.pid&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;/var/run/&amp;lt;appname&amp;gt;/&amp;lt;appname&amp;gt;.pid&lt;/code&gt; 跟踪应用程序的PID</target>
        </trans-unit>
        <trans-unit id="627a8c3dcf098deb5d3fe89f3f356f80349ba5f4" translate="yes" xml:space="preserve">
          <source>Traditionally, JPA &amp;ldquo;Entity&amp;rdquo; classes are specified in a &lt;code&gt;persistence.xml&lt;/code&gt; file. With Spring Boot, this file is not necessary and &amp;ldquo;Entity Scanning&amp;rdquo; is used instead. By default, all packages below your main configuration class (the one annotated with &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; or &lt;code&gt;@SpringBootApplication&lt;/code&gt;) are searched.</source>
          <target state="translated">传统上，JPA&amp;ldquo;实体&amp;rdquo;类是在 &lt;code&gt;persistence.xml&lt;/code&gt; 文件中指定的。在Spring Boot中，此文件不是必需的，而是使用&amp;ldquo;实体扫描&amp;rdquo;。默认情况下，将搜索主配置类（用 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 或 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 注释的一个）下的所有软件包。</target>
        </trans-unit>
        <trans-unit id="29d003870a257287d1df3c8e4f337853d000d270" translate="yes" xml:space="preserve">
          <source>Transaction logs directory.</source>
          <target state="translated">交易日志目录。</target>
        </trans-unit>
        <trans-unit id="b45bbb72686c6f3c52c5e0fc1e6dd848c8f30537" translate="yes" xml:space="preserve">
          <source>Transaction manager implementation that should be started.</source>
          <target state="translated">应该开始实施的事务管理器。</target>
        </trans-unit>
        <trans-unit id="17ca20775330ea9d4b066f0683bc785cd855af20" translate="yes" xml:space="preserve">
          <source>Transaction manager unique identifier.</source>
          <target state="translated">交易管理人唯一标识符。</target>
        </trans-unit>
        <trans-unit id="5979d55d0d1e60227e4395c3abd1f1946e8afdcb" translate="yes" xml:space="preserve">
          <source>Transactional tests are not supported with reactive access. If you are using this style, you must configure &lt;code&gt;@DataNeo4jTest&lt;/code&gt; tests as described above.</source>
          <target state="translated">被动访问不支持事务测试。如果使用此样式，则必须如上所述配置 &lt;code&gt;@DataNeo4jTest&lt;/code&gt; 测试。</target>
        </trans-unit>
        <trans-unit id="6c9a9a4386943d5de82c9dae180382229e6c66ae" translate="yes" xml:space="preserve">
          <source>Transactions log file base name.</source>
          <target state="translated">交易日志文件基础名称。</target>
        </trans-unit>
        <trans-unit id="6ddc76a2202854953b15b1d6bbdb5080e0796ad0" translate="yes" xml:space="preserve">
          <source>Triggering a restart</source>
          <target state="translated">触发重启</target>
        </trans-unit>
        <trans-unit id="13c028fa16c262ab0e25411d592c7b1e9d58ce00" translate="yes" xml:space="preserve">
          <source>Trust store that holds SSL certificates.</source>
          <target state="translated">持有SSL证书的信任商店。</target>
        </trans-unit>
        <trans-unit id="07f3a73e994ba05a7203b2774cfb7d088abb5db4" translate="yes" xml:space="preserve">
          <source>Trust store type.</source>
          <target state="translated">信任店型。</target>
        </trans-unit>
        <trans-unit id="0623d45902fcbb7c1170054e369ff25f951ba824" translate="yes" xml:space="preserve">
          <source>Trust strategy to use.</source>
          <target state="translated">信任策略的使用。</target>
        </trans-unit>
        <trans-unit id="581b3da98ddfb8335176e73d03ac48ebbc15749d" translate="yes" xml:space="preserve">
          <source>Try Kotlin in your browser</source>
          <target state="translated">在浏览器中尝试Kotlin</target>
        </trans-unit>
        <trans-unit id="1d866de5fab333d470710dd23f302981ae604b74" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;howto#howto&quot;&gt;How-to documents&lt;/a&gt;. They provide solutions to the most common questions.</source>
          <target state="translated">尝试使用&lt;a href=&quot;howto#howto&quot;&gt;方法文档&lt;/a&gt;。他们为最常见的问题提供解决方案。</target>
        </trans-unit>
        <trans-unit id="81df25f4da8827871b3351f861a9dc734774967a" translate="yes" xml:space="preserve">
          <source>Tutorial: building web applications with Spring Boot and Kotlin</source>
          <target state="translated">教程:使用Spring Boot和Kotlin构建Web应用程序</target>
        </trans-unit>
        <trans-unit id="4f01a5f504b6f32f75e70897bac1ab0fb0e0883e" translate="yes" xml:space="preserve">
          <source>Two popular cloud providers, Heroku and Cloud Foundry, employ a &amp;ldquo;buildpack&amp;rdquo; approach. The buildpack wraps your deployed code in whatever is needed to &lt;em&gt;start&lt;/em&gt; your application. It might be a JDK and a call to &lt;code&gt;java&lt;/code&gt;, an embedded web server, or a full-fledged application server. A buildpack is pluggable, but ideally you should be able to get by with as few customizations to it as possible. This reduces the footprint of functionality that is not under your control. It minimizes divergence between development and production environments.</source>
          <target state="translated">两家受欢迎的云提供商，Heroku和Cloud Foundry，采用了&amp;ldquo; buildpack&amp;rdquo;方法。buildpack将部署的代码包装在&lt;em&gt;启动&lt;/em&gt;应用程序所需的任何内容中。它可能是JDK，可能是对 &lt;code&gt;java&lt;/code&gt; 的调用，嵌入式Web服务器或成熟的应用程序服务器。一个buildpack是可插入的，但理想情况下，您应该能够通过尽可能少的自定义来获得它。这减少了您无法控制的功能的占用空间。它最大程度地减少了开发环境与生产环境之间的差异。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="f6fb23c1829740181b8abe567d4013a56967b910" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;spring help jar&lt;/code&gt; on the command line for more information.</source>
          <target state="translated">键入 &lt;code&gt;spring help jar&lt;/code&gt; 命令行以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="e37e580e4119598a274c41571ffdaae191300701" translate="yes" xml:space="preserve">
          <source>Type of Cassandra repositories to enable.</source>
          <target state="translated">要启用的 Cassandra 资源库类型。</target>
        </trans-unit>
        <trans-unit id="34802f86b492e75b0771845215fd6a9fde720f8c" translate="yes" xml:space="preserve">
          <source>Type of Couchbase repositories to enable.</source>
          <target state="translated">启用Couchbase仓库的类型。</target>
        </trans-unit>
        <trans-unit id="6741e63b66a55550f2aa0e5579e27d41294e64da" translate="yes" xml:space="preserve">
          <source>Type of Mongo repositories to enable.</source>
          <target state="translated">启用Mongo存储库的类型。</target>
        </trans-unit>
        <trans-unit id="0715803f1dddb6c9f5ab68bedf5189410b92e9b3" translate="yes" xml:space="preserve">
          <source>Type of Neo4j repositories to enable.</source>
          <target state="translated">启用Neo4j资源库的类型。</target>
        </trans-unit>
        <trans-unit id="f701b5bc2a61b85cbd76690cec0f8ac842e76b91" translate="yes" xml:space="preserve">
          <source>Type of client to use. By default, auto-detected according to the classpath.</source>
          <target state="translated">要使用的客户端类型。默认情况下,根据classpath自动检测。</target>
        </trans-unit>
        <trans-unit id="e2aff7dbd29671a817eab8f6eacfd8473fa0718a" translate="yes" xml:space="preserve">
          <source>Type of publisher confirms to use.</source>
          <target state="translated">类型的发布者确认使用。</target>
        </trans-unit>
        <trans-unit id="a1d6c91bb766bb004d35a0bd0044abae79dd21c4" translate="yes" xml:space="preserve">
          <source>Type of shutdown that the server will support.</source>
          <target state="translated">服务器将支持的关机类型。</target>
        </trans-unit>
        <trans-unit id="31e141da37ec71b3d43ba4fb3ebfbe3751ae0a47" translate="yes" xml:space="preserve">
          <source>Type of the key store.</source>
          <target state="translated">钥匙库的类型。</target>
        </trans-unit>
        <trans-unit id="2796c5dd875c2c0c515b4690c9e118265e76acf7" translate="yes" xml:space="preserve">
          <source>Type of the trust store.</source>
          <target state="translated">信托商店的类型。</target>
        </trans-unit>
        <trans-unit id="abf58822f52224de08dfbc3fcc79e0b66adc4fa4" translate="yes" xml:space="preserve">
          <source>Type-safe Configuration Properties</source>
          <target state="translated">类型安全配置属性</target>
        </trans-unit>
        <trans-unit id="306bb5e6fa61f4f2729e486da449a62c4032aaf5" translate="yes" xml:space="preserve">
          <source>Typically, migrations are scripts in the form &lt;code&gt;V&amp;lt;VERSION&amp;gt;__&amp;lt;NAME&amp;gt;.sql&lt;/code&gt; (with &lt;code&gt;&amp;lt;VERSION&amp;gt;&lt;/code&gt; an underscore-separated version, such as &amp;lsquo;1&amp;rsquo; or &amp;lsquo;2_1&amp;rsquo;). By default, they are in a directory called &lt;code&gt;classpath:db/migration&lt;/code&gt;, but you can modify that location by setting &lt;code&gt;spring.flyway.locations&lt;/code&gt;. This is a comma-separated list of one or more &lt;code&gt;classpath:&lt;/code&gt; or &lt;code&gt;filesystem:&lt;/code&gt; locations. For example, the following configuration would search for scripts in both the default classpath location and the &lt;code&gt;/opt/migration&lt;/code&gt; directory:</source>
          <target state="translated">通常，迁移是格式为 &lt;code&gt;V&amp;lt;VERSION&amp;gt;__&amp;lt;NAME&amp;gt;.sql&lt;/code&gt; （带有 &lt;code&gt;&amp;lt;VERSION&amp;gt;&lt;/code&gt; 下划线分隔的版本，例如&amp;ldquo; 1&amp;rdquo;或&amp;ldquo; 2_1&amp;rdquo;）的脚本。默认情况下，它们位于名为 &lt;code&gt;classpath:db/migration&lt;/code&gt; 的目录中，但是您可以通过设置 &lt;code&gt;spring.flyway.locations&lt;/code&gt; 来修改该位置。这是一个或多个 &lt;code&gt;classpath:&lt;/code&gt; 或 &lt;code&gt;filesystem:&lt;/code&gt; 位置的逗号分隔列表。例如，以下配置将在默认类路径位置和 &lt;code&gt;/opt/migration&lt;/code&gt; 目录中搜索脚本：</target>
        </trans-unit>
        <trans-unit id="57c6897c2ff85203a8c6f15de509953ff47a06b5" translate="yes" xml:space="preserve">
          <source>UDP addressing mode, either unicast or multicast.</source>
          <target state="translated">UDP寻址模式,单播或组播。</target>
        </trans-unit>
        <trans-unit id="25ba44ec3b391ba4ce5fbbd2979635e254775e7d" translate="yes" xml:space="preserve">
          <source>UNKNOWN</source>
          <target state="translated">UNKNOWN</target>
        </trans-unit>
        <trans-unit id="11a66854c0ed7fd7fbaf5a561663c5dc867c9f19" translate="yes" xml:space="preserve">
          <source>UP</source>
          <target state="translated">UP</target>
        </trans-unit>
        <trans-unit id="82e5f8cb0afd0a8fc12c60e00bf8a876f4e9653c" translate="yes" xml:space="preserve">
          <source>URI for the Atlas LWC endpoint to evaluate the data for a subscription.</source>
          <target state="translated">用于Atlas LWC端点的URI,以评估订阅的数据。</target>
        </trans-unit>
        <trans-unit id="e254fabcfb4af699584d8a7ae2aade3728e90775" translate="yes" xml:space="preserve">
          <source>URI for the Atlas LWC endpoint to retrieve current subscriptions.</source>
          <target state="translated">用于Atlas LWC端点检索当前订阅的URI。</target>
        </trans-unit>
        <trans-unit id="2d45d7281fc9e77b29d5b362db5a8b1b1be6cd8d" translate="yes" xml:space="preserve">
          <source>URI of the Atlas server.</source>
          <target state="translated">Atlas服务器的URI。</target>
        </trans-unit>
        <trans-unit id="2a300b4198cba91811ee44c8600fdabf6a778456" translate="yes" xml:space="preserve">
          <source>URI of the Influx server.</source>
          <target state="translated">Influx服务器的URI。</target>
        </trans-unit>
        <trans-unit id="39de44275d339b62a24c6346f6e2919f927087fd" translate="yes" xml:space="preserve">
          <source>URI of the KairosDB server.</source>
          <target state="translated">KairosDB服务器的URI。</target>
        </trans-unit>
        <trans-unit id="7287388520fef9af270e987ed326d680210d9611" translate="yes" xml:space="preserve">
          <source>URI that can either be an OpenID Connect discovery endpoint or an OAuth 2.0 Authorization Server Metadata endpoint defined by RFC 8414.</source>
          <target state="translated">URI 可以是 OpenID Connect 发现端点,也可以是 RFC 8414 定义的 OAuth 2.0 授权服务器元数据端点。</target>
        </trans-unit>
        <trans-unit id="fbcdf5d8f896093a241a0e79f396eaaa45106cfa" translate="yes" xml:space="preserve">
          <source>URI to ship metrics to.</source>
          <target state="translated">运送指标的URI。</target>
        </trans-unit>
        <trans-unit id="576e605d6d417e6d8f4f89ce31bcdce089e33870" translate="yes" xml:space="preserve">
          <source>URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Datadog, you can define the location of the proxy with this.</source>
          <target state="translated">要将度量值运送到的 URI。如果你需要将指标发布到内部代理的途中,你可以用这个定义代理的位置。</target>
        </trans-unit>
        <trans-unit id="f0628050def50bad40cb0410b9483861afcdb29f" translate="yes" xml:space="preserve">
          <source>URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Humio, you can define the location of the proxy with this.</source>
          <target state="translated">URI来运送指标。如果你需要将指标发布到Humio的内部代理,你可以用这个定义代理的位置。</target>
        </trans-unit>
        <trans-unit id="15a8df0d596d0b25be5cb661e54701c3fbedb3b5" translate="yes" xml:space="preserve">
          <source>URI to ship metrics to. Should be used for SaaS, self managed instances or to en-route through an internal proxy.</source>
          <target state="translated">用于发送指标的URI。应该用于SaaS、自我管理的实例或通过内部代理进行传送。</target>
        </trans-unit>
        <trans-unit id="ceeba41fc89adba0cf65685cfc69ba345a72880f" translate="yes" xml:space="preserve">
          <source>URI used by the driver.</source>
          <target state="translated">驱动程序使用的URI。</target>
        </trans-unit>
        <trans-unit id="ff82cdc4064164729912444950fcbbbc6e6b8e93" translate="yes" xml:space="preserve">
          <source>URL of the ActiveMQ broker. Auto-generated by default.</source>
          <target state="translated">ActiveMQ broker的URL。默认情况下自动生成。</target>
        </trans-unit>
        <trans-unit id="a8fe3e49d7b49c5631b8b918d2594ac9b250d3eb" translate="yes" xml:space="preserve">
          <source>URL of the InfluxDB instance to which to connect.</source>
          <target state="translated">要连接的InfluxDB实例的URL。</target>
        </trans-unit>
        <trans-unit id="769af4be7324809aaad53b251df7da35e4071cf7" translate="yes" xml:space="preserve">
          <source>Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML).</source>
          <target state="translated">无条件激活指定的以逗号分隔的配置文件列表(如果使用YAML,则激活配置文件列表)。</target>
        </trans-unit>
        <trans-unit id="27b88d799bcbb8220eb816fed000faec696e0ea1" translate="yes" xml:space="preserve">
          <source>Under the hood, Spring Boot uses a different type of &lt;code&gt;ApplicationContext&lt;/code&gt; for embedded servlet container support. The &lt;code&gt;ServletWebServerApplicationContext&lt;/code&gt; is a special type of &lt;code&gt;WebApplicationContext&lt;/code&gt; that bootstraps itself by searching for a single &lt;code&gt;ServletWebServerFactory&lt;/code&gt; bean. Usually a &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt;, &lt;code&gt;JettyServletWebServerFactory&lt;/code&gt;, or &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; has been auto-configured.</source>
          <target state="translated">在后台，Spring Boot使用另一种类型的 &lt;code&gt;ApplicationContext&lt;/code&gt; 来支持嵌入式servlet容器。该 &lt;code&gt;ServletWebServerApplicationContext&lt;/code&gt; 是一种特殊类型的 &lt;code&gt;WebApplicationContext&lt;/code&gt; 中，通过搜索一个引导自身 &lt;code&gt;ServletWebServerFactory&lt;/code&gt; 豆。通常，已经自动配置了 &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt; ， &lt;code&gt;JettyServletWebServerFactory&lt;/code&gt; 或 &lt;code&gt;UndertowServletWebServerFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee3f6b4a191afaef70e566af1a569b8dde9a6e8f" translate="yes" xml:space="preserve">
          <source>Under the hood, auto-configuration is implemented with standard &lt;code&gt;@Configuration&lt;/code&gt; classes. Additional &lt;code&gt;@Conditional&lt;/code&gt; annotations are used to constrain when the auto-configuration should apply. Usually, auto-configuration classes use &lt;code&gt;@ConditionalOnClass&lt;/code&gt; and &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; annotations. This ensures that auto-configuration applies only when relevant classes are found and when you have not declared your own &lt;code&gt;@Configuration&lt;/code&gt;.</source>
          <target state="translated">在后台，自动配置是通过标准 &lt;code&gt;@Configuration&lt;/code&gt; 类实现的。其他 &lt;code&gt;@Conditional&lt;/code&gt; 批注用于约束何时应应用自动配置。通常，自动配置类使用 &lt;code&gt;@ConditionalOnClass&lt;/code&gt; 和 &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; 批注。这样可以确保仅当找到相关的类并且没有声明自己的 &lt;code&gt;@Configuration&lt;/code&gt; 时，自动配置才适用。</target>
        </trans-unit>
        <trans-unit id="2daf2564b43d3af147d901ed275de89c0a88346b" translate="yes" xml:space="preserve">
          <source>Underlying implementation class name of the XA resource.</source>
          <target state="translated">XA资源的基本执行类名称。</target>
        </trans-unit>
        <trans-unit id="7993f4d09aa7006c6cce4bf1789fe288530708bc" translate="yes" xml:space="preserve">
          <source>Underscore notation, which is an alternative format for use in &lt;code&gt;.properties&lt;/code&gt; and &lt;code&gt;.yml&lt;/code&gt; files.</source>
          <target state="translated">下划线表示法，是 &lt;code&gt;.properties&lt;/code&gt; 和 &lt;code&gt;.yml&lt;/code&gt; 文件中使用的另一种格式。</target>
        </trans-unit>
        <trans-unit id="e15b56c87d3bf8555f16e6bea0a4cc80d38115f9" translate="yes" xml:space="preserve">
          <source>Undertow</source>
          <target state="translated">Undertow</target>
        </trans-unit>
        <trans-unit id="4d4625c23b9a67402021084a54ba86d02d07967f" translate="yes" xml:space="preserve">
          <source>Undertow 2.0</source>
          <target state="translated">Undertow 2.0</target>
        </trans-unit>
        <trans-unit id="5df119d0507358970364bcbfd1b96b9996720277" translate="yes" xml:space="preserve">
          <source>Undertow access log directory.</source>
          <target state="translated">底槽访问日志目录。</target>
        </trans-unit>
        <trans-unit id="f5d3ca8a600d096e78521c454d6ddd4f41aa469c" translate="yes" xml:space="preserve">
          <source>Undertow does not support JSPs.</source>
          <target state="translated">Undertow不支持JSP。</target>
        </trans-unit>
        <trans-unit id="f51c4f2459aa9c139f6684cefbffdad39e606de1" translate="yes" xml:space="preserve">
          <source>Unfortunately, several third-party libraries deserialize without considering the context classloader. If you find such a problem, you need to request a fix with the original authors.</source>
          <target state="translated">不幸的是,一些第三方库在反序列化时没有考虑到上下文类加载器。如果你发现这样的问题,你需要向原作者请求修复。</target>
        </trans-unit>
        <trans-unit id="b406fd8d12e379b522158caa7187046c3e623613" translate="yes" xml:space="preserve">
          <source>Unique identifier for the app instance that is the source of metrics being published to Wavefront. Defaults to the local host name.</source>
          <target state="translated">应用程序实例的唯一标识符,它是被发布到Wavefront的指标的来源。默认为本地主机名。</target>
        </trans-unit>
        <trans-unit id="7009aedbac798beff00a5efc3c122e916adb02b2" translate="yes" xml:space="preserve">
          <source>Unique name used to identify the resource during recovery.</source>
          <target state="translated">在恢复期间用于识别资源的唯一名称。</target>
        </trans-unit>
        <trans-unit id="4ca9a50b84a5e47188770e1ea1eb63f1c0e2dabc" translate="yes" xml:space="preserve">
          <source>Unique string that identifies the consumer group to which this consumer belongs.</source>
          <target state="translated">标识该消费者所属消费群体的唯一字符串。</target>
        </trans-unit>
        <trans-unit id="4db0ce0ec9b9bab383032bc59da34601d585fe31" translate="yes" xml:space="preserve">
          <source>Uniquely identifies the app instance that is publishing metrics to SignalFx. Defaults to the local host name.</source>
          <target state="translated">唯一标识向SignalFx发布指标的应用程序实例。默认为本地主机名。</target>
        </trans-unit>
        <trans-unit id="99d0d185366dff17077a26a26f5906d451aa9447" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;spring.jooq.sql-dialect&lt;/code&gt; property has been configured, Spring Boot determines the SQL dialect to use for your datasource. If Spring Boot could not detect the dialect, it uses &lt;code&gt;DEFAULT&lt;/code&gt;.</source>
          <target state="translated">除非已配置 &lt;code&gt;spring.jooq.sql-dialect&lt;/code&gt; 属性，否则Spring Boot会确定要用于数据源的SQL方言。如果Spring Boot无法检测到方言，则使用 &lt;code&gt;DEFAULT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0fc03bf8183917e3737efebfe615eae134b165d4" translate="yes" xml:space="preserve">
          <source>Unless the management port has been configured to &lt;a href=&quot;#production-ready-customizing-management-server-port&quot;&gt;expose endpoints by using a different HTTP port&lt;/a&gt;, &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; is relative to &lt;code&gt;server.servlet.context-path&lt;/code&gt; (Servlet web applications) or &lt;code&gt;spring.webflux.base-path&lt;/code&gt; (reactive web applications). If &lt;code&gt;management.server.port&lt;/code&gt; is configured, &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; is relative to &lt;code&gt;management.server.base-path&lt;/code&gt;.</source>
          <target state="translated">除非管理端口已经被配置为&lt;a href=&quot;#production-ready-customizing-management-server-port&quot;&gt;通过使用不同的HTTP端口暴露端点&lt;/a&gt;， &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; 相对于 &lt;code&gt;server.servlet.context-path&lt;/code&gt; （Servlet的Web应用程序）或 &lt;code&gt;spring.webflux.base-path&lt;/code&gt; （响应式Web应用程序）。如果 &lt;code&gt;management.server.port&lt;/code&gt; 配置， &lt;code&gt;management.endpoints.web.base-path&lt;/code&gt; 相对于 &lt;code&gt;management.server.base-path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7e077904c44aaef08ea36706c425b8008b6bbd3" translate="yes" xml:space="preserve">
          <source>Unlike the equivalent Java application, you do not need to include a &lt;code&gt;public static void main(String[] args)&lt;/code&gt; method with your &lt;code&gt;Groovy&lt;/code&gt; scripts. A &lt;code&gt;SpringApplication&lt;/code&gt; is automatically created, with your compiled code acting as the &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">与等效的Java应用程序不同，您不需要在 &lt;code&gt;Groovy&lt;/code&gt; 脚本中包含 &lt;code&gt;public static void main(String[] args)&lt;/code&gt; 方法。一个 &lt;code&gt;SpringApplication&lt;/code&gt; 会自动创建，用你的编译代码充当 &lt;code&gt;source&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5fd95b92003658ce47721181589f7c621196b10" translate="yes" xml:space="preserve">
          <source>Upgrading instructions are always the first item in the release notes. If you are more than one release behind, please make sure that you also review the release notes of the versions that you jumped.</source>
          <target state="translated">升级说明永远是版本说明中的第一项。如果你落后一个以上的版本,请确保你也查看你跳转的版本的发布说明。</target>
        </trans-unit>
        <trans-unit id="5f852e8ffed963fb691399132e42808b6463d427" translate="yes" xml:space="preserve">
          <source>Upload binaries instead of sources</source>
          <target state="translated">上传二进制文件而不是源文件</target>
        </trans-unit>
        <trans-unit id="ca96637664a220b2f0ef82bb367945605fab34b5" translate="yes" xml:space="preserve">
          <source>Upper case format with underscore as the delimiter (see &lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;Binding from Environment Variables&lt;/a&gt;).</source>
          <target state="translated">以下划线作为定界符的大写格式（请参阅&lt;a href=&quot;#boot-features-external-config-relaxed-binding-from-environment-variables&quot;&gt;从环境变量绑定&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1f896e26a190b167ccc06d32ffdf0e1c6ba06364" translate="yes" xml:space="preserve">
          <source>Upper case format, which is recommended when using system environment variables.</source>
          <target state="translated">大写格式,建议在使用系统环境变量时使用。</target>
        </trans-unit>
        <trans-unit id="9126698b321b399f279348bd7f2d5dd265b42b3f" translate="yes" xml:space="preserve">
          <source>Uptime metrics: report a gauge for uptime and a fixed gauge representing the application&amp;rsquo;s absolute start time</source>
          <target state="translated">正常运行时间指标：报告正常运行时间的量度和代表应用程序绝对启动时间的固定量度</target>
        </trans-unit>
        <trans-unit id="105a028d2cb7ed53d9a1ec90cb9cd687935f2eff" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;java.time.Duration&lt;/code&gt; rather than &lt;code&gt;long&lt;/code&gt; and describe the default unit if it differs from milliseconds, e.g. &quot;If a duration suffix is not specified, seconds will be used&quot;.</source>
          <target state="translated">使用 &lt;code&gt;java.time.Duration&lt;/code&gt; 而不是 &lt;code&gt;long&lt;/code&gt; ，如果它与毫秒不同，请描述默认单位，例如&amp;ldquo;如果未指定持续时间后缀，将使用秒&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="d627eb6089fb036ddf8db3068b175a292bc84d18" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;org.springframework.boot.devtools.RemoteSpringApplication&lt;/code&gt; as the main class.</source>
          <target state="translated">使用 &lt;code&gt;org.springframework.boot.devtools.RemoteSpringApplication&lt;/code&gt; 作为主类。</target>
        </trans-unit>
        <trans-unit id="36139e7d49e8e7fd6a7c34571b7d5ac523791ed1" translate="yes" xml:space="preserve">
          <source>Use a placeholder in configuration properties:</source>
          <target state="translated">在配置属性中使用占位符。</target>
        </trans-unit>
        <trans-unit id="c92cdce65ba68d982f02ca6bc941c1f3bc812ab3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;spring-boot-starter-cache&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; to quickly add basic caching dependencies. The starter brings in &lt;code&gt;spring-context-support&lt;/code&gt;. If you add dependencies manually, you must include &lt;code&gt;spring-context-support&lt;/code&gt; in order to use the JCache, EhCache 2.x, or Caffeine support.</source>
          <target state="translated">使用 &lt;code&gt;spring-boot-starter-cache&lt;/code&gt; &amp;ldquo; Starter&amp;rdquo;快速添加基本的缓存依赖项。入门程序引入了 &lt;code&gt;spring-context-support&lt;/code&gt; 。如果手动添加依赖项，则必须包括 &lt;code&gt;spring-context-support&lt;/code&gt; 才能使用JCache，EhCache 2.x或Caffeine支持。</target>
        </trans-unit>
        <trans-unit id="261589f015e9bb1144ded71b5feb0b0a2ec985ef" translate="yes" xml:space="preserve">
          <source>Use the appropriate launcher (such as &lt;code&gt;JarLauncher&lt;/code&gt; for a jar file) as a &lt;code&gt;Main-Class&lt;/code&gt; attribute in the manifest and specify the other properties it needs as manifest entries &amp;mdash; principally, by setting a &lt;code&gt;Start-Class&lt;/code&gt; property.</source>
          <target state="translated">使用适当的启动器（例如jar文件的 &lt;code&gt;JarLauncher&lt;/code&gt; ）作为清单中的 &lt;code&gt;Main-Class&lt;/code&gt; 属性，并指定其所需的其他属性作为清单条目（主要是通过设置 &lt;code&gt;Start-Class&lt;/code&gt; 属性）。</target>
        </trans-unit>
        <trans-unit id="e58a3b99db2361062809a8397a4bde9f052e9fa0" translate="yes" xml:space="preserve">
          <source>Use the prefix &lt;code&gt;optional:&lt;/code&gt; if the &lt;a href=&quot;#boot-features-external-config-optional-prefix&quot;&gt;locations are optional&lt;/a&gt; and you don&amp;rsquo;t mind if they don&amp;rsquo;t exist.</source>
          <target state="translated">使用 &lt;code&gt;optional:&lt;/code&gt; 的前缀：如果&lt;a href=&quot;#boot-features-external-config-optional-prefix&quot;&gt;位置是可选的，&lt;/a&gt;并且您不介意它们是否不存在。</target>
        </trans-unit>
        <trans-unit id="1ff07cdba4d13a2eec504151ffece9d630e633df" translate="yes" xml:space="preserve">
          <source>Used to resolve relative paths in &lt;code&gt;loader.path&lt;/code&gt;. For example, given &lt;code&gt;loader.path=lib&lt;/code&gt;, then &lt;code&gt;${loader.home}/lib&lt;/code&gt; is a classpath location (along with all jar files in that directory). This property is also used to locate a &lt;code&gt;loader.properties&lt;/code&gt; file, as in the following example &lt;code&gt;&lt;a href=&quot;file:///opt/app&quot;&gt;/opt/app&lt;/a&gt;&lt;/code&gt; It defaults to &lt;code&gt;${user.dir}&lt;/code&gt;.</source>
          <target state="translated">用于解析 &lt;code&gt;loader.path&lt;/code&gt; 中的相对路径。例如，给定 &lt;code&gt;loader.path=lib&lt;/code&gt; ，则 &lt;code&gt;${loader.home}/lib&lt;/code&gt; 是类路径位置（以及该目录中的所有jar文件）。此属性还用于查找 &lt;code&gt;loader.properties&lt;/code&gt; 文件，如以下示例 &lt;code&gt;&lt;a href=&quot;file:///opt/app&quot;&gt;/opt/app&lt;/a&gt;&lt;/code&gt; 所示,它默认为 &lt;code&gt;${user.dir}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ab5506a7f5412a5000f83db3cbe09d94b20ea74" translate="yes" xml:space="preserve">
          <source>User to use to connect to the JMS provider.</source>
          <target state="translated">用于连接到JMS提供者的用户。</target>
        </trans-unit>
        <trans-unit id="dec1e9bb0360b77006be5a8fd9afeb048cf44f9c" translate="yes" xml:space="preserve">
          <source>Username of the database to execute DDL scripts (if different).</source>
          <target state="translated">执行DDL脚本的数据库的用户名(如果不同)。</target>
        </trans-unit>
        <trans-unit id="df69e3422a0a8cee83e24189f0a7e34ce90cbd7f" translate="yes" xml:space="preserve">
          <source>Username of the database to execute DML scripts (if different).</source>
          <target state="translated">执行DML脚本的数据库用户名(如果不同)。</target>
        </trans-unit>
        <trans-unit id="30dfac2f56a7ad1937c64a307327002c46f65896" translate="yes" xml:space="preserve">
          <source>Username recorded in the schema history table as having applied the migration.</source>
          <target state="translated">在模式历史表中记录的应用迁移的用户名。</target>
        </trans-unit>
        <trans-unit id="49e8a4d248f04d7ba28d8f9eb8f69ab3acb55da4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@ConfigurationProperties&lt;/code&gt; also lets you generate metadata files that can be used by IDEs to offer auto-completion for your own keys. See the &lt;a href=&quot;appendix-configuration-metadata#configuration-metadata&quot;&gt;appendix&lt;/a&gt; for details.</source>
          <target state="translated">使用 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 还可让您生成元数据文件，IDE可以使用这些元数据文件为您自己的键提供自动补全功能。有关详细信息，请参见&lt;a href=&quot;appendix-configuration-metadata#configuration-metadata&quot;&gt;附录&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86da806be35e1a21acd3c86c2f8ad0f5d98155bf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ConfigFileApplicationContextInitializer&lt;/code&gt; alone does not provide support for &lt;code&gt;@Value(&quot;${&amp;hellip;​}&quot;)&lt;/code&gt; injection. Its only job is to ensure that &lt;code&gt;application.properties&lt;/code&gt; files are loaded into Spring&amp;rsquo;s &lt;code&gt;Environment&lt;/code&gt;. For &lt;code&gt;@Value&lt;/code&gt; support, you need to either additionally configure a &lt;code&gt;PropertySourcesPlaceholderConfigurer&lt;/code&gt; or use &lt;code&gt;@SpringBootTest&lt;/code&gt;, which auto-configures one for you.</source>
          <target state="translated">仅使用 &lt;code&gt;ConfigFileApplicationContextInitializer&lt;/code&gt; 不能提供对 &lt;code&gt;@Value(&quot;${&amp;hellip;​}&quot;)&lt;/code&gt; 注入的支持。唯一的工作是确保将 &lt;code&gt;application.properties&lt;/code&gt; 文件加载到Spring的 &lt;code&gt;Environment&lt;/code&gt; 中。为了获得 &lt;code&gt;@Value&lt;/code&gt; 支持，您需要另外配置 &lt;code&gt;PropertySourcesPlaceholderConfigurer&lt;/code&gt; 或使用 &lt;code&gt;@SpringBootTest&lt;/code&gt; ，后者会为您自动配置一个。</target>
        </trans-unit>
        <trans-unit id="232643314fe540e277c4dbd5a37125668776ae4f" translate="yes" xml:space="preserve">
          <source>Using Spring Boot</source>
          <target state="translated">使用Spring Boot</target>
        </trans-unit>
        <trans-unit id="b0b35af64cf6e8d4bde4e00da3139587c649abec" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;MeterBinder&lt;/code&gt; ensures that the correct dependency relationships are set up and that the bean is available when the metric&amp;rsquo;s value is retrieved. By default, metrics from all &lt;code&gt;MeterBinder&lt;/code&gt; beans will be automatically bound to the Spring-managed &lt;code&gt;MeterRegistry&lt;/code&gt;. A &lt;code&gt;MeterBinder&lt;/code&gt; implementation can also be useful if you find that you repeatedly instrument a suite of metrics across components or applications.</source>
          <target state="translated">使用 &lt;code&gt;MeterBinder&lt;/code&gt; 可以确保设置正确的依赖关系，并且在获取度量值时Bean可用。默认情况下，所有 &lt;code&gt;MeterBinder&lt;/code&gt; Bean的度量标准都将自动绑定到Spring管理的 &lt;code&gt;MeterRegistry&lt;/code&gt; 。一个 &lt;code&gt;MeterBinder&lt;/code&gt; 如果你找到实现也可能是有用的，可重复的仪器一套跨组件或应用指标。</target>
        </trans-unit>
        <trans-unit id="2be9e29a9245867605d2a7b1e6281e41f51bdb6d" translate="yes" xml:space="preserve">
          <source>Using configuration such as the preceding example means the application no longer supports a plain HTTP connector at port 8080. Spring Boot does not support the configuration of both an HTTP connector and an HTTPS connector through &lt;code&gt;application.properties&lt;/code&gt;. If you want to have both, you need to configure one of them programmatically. We recommend using &lt;code&gt;application.properties&lt;/code&gt; to configure HTTPS, as the HTTP connector is the easier of the two to configure programmatically.</source>
          <target state="translated">使用前面示例中的配置意味着应用程序不再在端口8080上支持纯HTTP连接器。SpringBoot不通过 &lt;code&gt;application.properties&lt;/code&gt; 支持HTTP连接器和HTTPS连接器的配置。如果要同时拥有两者，则需要以编程方式配置其中之一。我们建议使用 &lt;code&gt;application.properties&lt;/code&gt; 来配置HTTPS，因为HTTP连接器是两者中以编程方式配置的比较容易的方式。</target>
        </trans-unit>
        <trans-unit id="6df71dd0d4d1dcb80ca563c0529e7b21cf6fbfd0" translate="yes" xml:space="preserve">
          <source>Using graceful shutdown with your IDE may not work properly if it does not send a proper &lt;code&gt;SIGTERM&lt;/code&gt; signal. Refer to the documentation of your IDE for more details.</source>
          <target state="translated">如果IDE无法发送适当的 &lt;code&gt;SIGTERM&lt;/code&gt; 信号，则在其IDE上使用正常关机可能无法正常工作。有关更多详细信息，请参阅IDE的文档。</target>
        </trans-unit>
        <trans-unit id="ba597ba695853fba0c6cfd2bcd7492a46228c468" translate="yes" xml:space="preserve">
          <source>Using spring boot</source>
          <target state="translated">使用弹簧靴</target>
        </trans-unit>
        <trans-unit id="6057c37f4ad19c91728bb926eba4cf0721724e42" translate="yes" xml:space="preserve">
          <source>Using the &amp;ldquo;exejar&amp;rdquo; Task</source>
          <target state="translated">使用&amp;ldquo; exejar&amp;rdquo;任务</target>
        </trans-unit>
        <trans-unit id="0101e78c501781c5ae1c16480935d4da5d425614" translate="yes" xml:space="preserve">
          <source>Using the &amp;ldquo;findmainclass&amp;rdquo; Task</source>
          <target state="translated">使用&amp;ldquo; findmainclass&amp;rdquo;任务</target>
        </trans-unit>
        <trans-unit id="7b01669e858e201635ab4e3959d3315f0d501cfa" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@Value(&quot;${property}&quot;)&lt;/code&gt; annotation to inject configuration properties can sometimes be cumbersome, especially if you are working with multiple properties or your data is hierarchical in nature. Spring Boot provides an alternative method of working with properties that lets strongly typed beans govern and validate the configuration of your application.</source>
          <target state="translated">使用 &lt;code&gt;@Value(&quot;${property}&quot;)&lt;/code&gt; 批注来注入配置属性有时会很麻烦，尤其是当您使用多个属性或数据本质上是分层的时。Spring Boot提供了一种使用属性的替代方法，该方法使强类型的Bean可以管理和验证应用程序的配置。</target>
        </trans-unit>
        <trans-unit id="1f8ba49c282439a0ab26651ad29a3adb795c325e" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;JarLauncher&lt;/code&gt; over the application&amp;rsquo;s main method has the added benefit of a predictable classpath order. The jar contains a &lt;code&gt;classpath.idx&lt;/code&gt; file which is used by the &lt;code&gt;JarLauncher&lt;/code&gt; when constructing the classpath.</source>
          <target state="translated">在应用程序的main方法上使用 &lt;code&gt;JarLauncher&lt;/code&gt; 具有可预测的类路径顺序的附加好处。该jar包含一个 &lt;code&gt;classpath.idx&lt;/code&gt; 文件，该文件由 &lt;code&gt;JarLauncher&lt;/code&gt; 在构造类路径时使用。</target>
        </trans-unit>
        <trans-unit id="8f1886e62dc25a8ce4c42a8a5cea86b655977fa4" translate="yes" xml:space="preserve">
          <source>Using the CLI</source>
          <target state="translated">使用CLI</target>
        </trans-unit>
        <trans-unit id="51e9fb10a5b5d70a4a914ded19e9b8a92558263a" translate="yes" xml:space="preserve">
          <source>Using the Java SE Platform</source>
          <target state="translated">使用Java SE平台</target>
        </trans-unit>
        <trans-unit id="f6863ecb4b67b3265691b5d41cf3451e2e18f9ea" translate="yes" xml:space="preserve">
          <source>Using the S2I builder</source>
          <target state="translated">使用S2I构建器</target>
        </trans-unit>
        <trans-unit id="13e5b8862ae89349fb14ef715ad8c3f700a51770" translate="yes" xml:space="preserve">
          <source>Using the Tomcat Platform</source>
          <target state="translated">使用Tomcat平台</target>
        </trans-unit>
        <trans-unit id="03813f38146afe15598caec1d6484a54a54022d4" translate="yes" xml:space="preserve">
          <source>Using the multi-document YAML syntax in profile-specific YAML files can lead to unexpected behavior. For example, consider the following config in a file:</source>
          <target state="translated">在配置文件特定的YAML文件中使用多文件YAML语法可能会导致意外的行为。例如,考虑以下文件中的配置。</target>
        </trans-unit>
        <trans-unit id="57c8e251a6d18af5e829337162b68a23a5e05e0b" translate="yes" xml:space="preserve">
          <source>Using the “exejar” Task</source>
          <target state="translated">使用 &quot;exejar &quot;任务</target>
        </trans-unit>
        <trans-unit id="c0135d5dc370cdb0547a3a93d1d268190ab11ed9" translate="yes" xml:space="preserve">
          <source>Using the “findmainclass” Task</source>
          <target state="translated">使用 &quot;findmainclass &quot;任务</target>
        </trans-unit>
        <trans-unit id="24a271451e65e20717de9aee72e172c4a79d419b" translate="yes" xml:space="preserve">
          <source>Utils</source>
          <target state="translated">Utils</target>
        </trans-unit>
        <trans-unit id="9ca5b42e13c2fcef84ca89753b19f03046e7d142" translate="yes" xml:space="preserve">
          <source>Validation depth.</source>
          <target state="translated">验证深度。</target>
        </trans-unit>
        <trans-unit id="793bcdfed156c84ee16ae95443780036d0c74b2a" translate="yes" xml:space="preserve">
          <source>Validation query.</source>
          <target state="translated">验证查询。</target>
        </trans-unit>
        <trans-unit id="0636e27ff82cdc0b8c80b95d6bee5c4f5635de65" translate="yes" xml:space="preserve">
          <source>Value of a default routing key to use for send operations.</source>
          <target state="translated">用于发送操作的默认路由键的值。</target>
        </trans-unit>
        <trans-unit id="1bce275605291903c99bc9b92cd5cef092ba097e" translate="yes" xml:space="preserve">
          <source>Value of the protocol header indicating whether the incoming request uses SSL.</source>
          <target state="translated">协议头的值,表示输入的请求是否使用SSL。</target>
        </trans-unit>
        <trans-unit id="e417aa7a08949074fd38d41360647237944d1fee" translate="yes" xml:space="preserve">
          <source>Value to use for the Server response header (if empty, no header is sent).</source>
          <target state="translated">用于服务器响应头的值(如果为空,则不发送头)。</target>
        </trans-unit>
        <trans-unit id="749237f79710dbb14c717ad467770c4d7835d5b7" translate="yes" xml:space="preserve">
          <source>ValueHint[]</source>
          <target state="translated">ValueHint[]</target>
        </trans-unit>
        <trans-unit id="23182abfffa1e84ff155f3ee21455a0f33e463c6" translate="yes" xml:space="preserve">
          <source>ValueProvider[]</source>
          <target state="translated">ValueProvider[]</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="0255dc3f55cf9062adc0eefc64291f76979d0a02" translate="yes" xml:space="preserve">
          <source>Vanilla usage of Spring &lt;code&gt;DispatcherServlet&lt;/code&gt; and Spring Security should require no further changes. If you have other features in your application (for instance, using other servlets or filters), you may need to add some configuration to your &lt;code&gt;Application&lt;/code&gt; context, by replacing those elements from the &lt;code&gt;web.xml&lt;/code&gt;, as follows:</source>
          <target state="translated">在Spring &lt;code&gt;DispatcherServlet&lt;/code&gt; 和Spring Security中使用Vanilla不需要进一步更改。如果您的应用程序具有其他功能（例如，使用其他servlet或过滤器），则可能需要通过替换 &lt;code&gt;web.xml&lt;/code&gt; 中的那些元素来向 &lt;code&gt;Application&lt;/code&gt; 上下文中添加一些配置，如下所示：</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="c45b3fd7fe4a4703a29c4492ea7d84ad8c01c61d" translate="yes" xml:space="preserve">
          <source>Various memory and buffer pools</source>
          <target state="translated">各种内存和缓冲池</target>
        </trans-unit>
        <trans-unit id="dabaca3b4ceaad3d31dd698c6b5374e716ac1569" translate="yes" xml:space="preserve">
          <source>Various properties can be specified inside your &lt;code&gt;application.properties&lt;/code&gt; file, inside your &lt;code&gt;application.yml&lt;/code&gt; file, or as command line switches. This appendix provides a list of common Spring Boot properties and references to the underlying classes that consume them.</source>
          <target state="translated">各种属性可以在内部被指定 &lt;code&gt;application.properties&lt;/code&gt; 文件，您的内部 &lt;code&gt;application.yml&lt;/code&gt; 文件，或作为命令行开关。本附录提供了常见的Spring Boot属性列表以及对使用它们的基础类的引用。</target>
        </trans-unit>
        <trans-unit id="a0ae8193e40c48a491aa4ece64504fc8813d8220" translate="yes" xml:space="preserve">
          <source>Vendor-specific XA properties.</source>
          <target state="translated">供应商特有的XA属性。</target>
        </trans-unit>
        <trans-unit id="7336f5e8e4a8c57a46c9a84737f88b668082ce60" translate="yes" xml:space="preserve">
          <source>Vendor-specific implementation of XAConnectionFactory.</source>
          <target state="translated">XAConnectionFactory的特定供应商实现。</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="c7cc2d9f24d44f4638005d50a9d3b8a9f0fc1b76" translate="yes" xml:space="preserve">
          <source>Version Property</source>
          <target state="translated">版本属性</target>
        </trans-unit>
        <trans-unit id="5d6499cf207a0a1ad787a9cdfd2b6b01be3763ec" translate="yes" xml:space="preserve">
          <source>Version of Mongo to use.</source>
          <target state="translated">要使用Mongo的版本。</target>
        </trans-unit>
        <trans-unit id="d8ad7e93c3e103c0b3e7b5745bba0f48b273c1c8" translate="yes" xml:space="preserve">
          <source>Version string to use for the fixed Version Strategy.</source>
          <target state="translated">用于固定版本策略的版本字符串。</target>
        </trans-unit>
        <trans-unit id="4b8c133b523eddc0c120c704c7a63ef0f4e05d8c" translate="yes" xml:space="preserve">
          <source>Version to tag an existing schema with when executing baseline.</source>
          <target state="translated">在执行基线时,对现有模式进行标记的版本。</target>
        </trans-unit>
        <trans-unit id="62686b404a96eed41f5d9ffc47990e083f7cab9d" translate="yes" xml:space="preserve">
          <source>View names that can be resolved.</source>
          <target state="translated">查看可以解决的名字。</target>
        </trans-unit>
        <trans-unit id="5a0d7820f11354ca3b4e25830607cff2d234ab6a" translate="yes" xml:space="preserve">
          <source>Virtual host to use when connecting to the broker.</source>
          <target state="translated">连接到经纪人时要使用的虚拟主机。</target>
        </trans-unit>
        <trans-unit id="99439b047d496d85e6b4b582033610cf3c351f4a" translate="yes" xml:space="preserve">
          <source>Wavefront</source>
          <target state="translated">Wavefront</target>
        </trans-unit>
        <trans-unit id="7b8203979ab39e3aa4094aa46945cf0ecc18185d" translate="yes" xml:space="preserve">
          <source>Wavefront registry pushes metrics to &lt;a href=&quot;https://micrometer.io/docs/registry/wavefront&quot;&gt;Wavefront&lt;/a&gt; periodically. If you are exporting metrics to &lt;a href=&quot;https://www.wavefront.com/&quot;&gt;Wavefront&lt;/a&gt; directly, your API token must be provided:</source>
          <target state="translated">Wavefront注册表会定期将指标推送到&lt;a href=&quot;https://micrometer.io/docs/registry/wavefront&quot;&gt;Wavefront&lt;/a&gt;。如果直接将指标导出到&lt;a href=&quot;https://www.wavefront.com/&quot;&gt;Wavefront&lt;/a&gt;，则必须提供API令牌：</target>
        </trans-unit>
        <trans-unit id="3d652ef0512f495d5a12247d68df1db16c75f028" translate="yes" xml:space="preserve">
          <source>We also provide a &lt;code&gt;spring-boot-starter-data-redis-reactive&lt;/code&gt; &amp;ldquo;Starter&amp;rdquo; for consistency with the other stores with reactive support.</source>
          <target state="translated">我们还提供了一个 &lt;code&gt;spring-boot-starter-data-redis-reactive&lt;/code&gt; &amp;ldquo; Starter&amp;rdquo;，以与其他具有响应支持的商店保持一致。</target>
        </trans-unit>
        <trans-unit id="f88696762e132d073e24da12027a56e55350cd16" translate="yes" xml:space="preserve">
          <source>We are also more than happy to extend this section. If you want to add a &amp;lsquo;how-to&amp;rsquo;, send us a &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;pull request&lt;/a&gt;.</source>
          <target state="translated">我们也很乐意扩展此部分。如果您想添加&amp;ldquo;操作方法&amp;rdquo;，请向我们发送&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0&quot;&gt;请求请求&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e724a60e5e7c734b3ef58ad90e820f316d664bf0" translate="yes" xml:space="preserve">
          <source>We can also update the state of the application, when the application breaks and cannot recover:</source>
          <target state="translated">我们还可以更新应用程序的状态,当应用程序中断而无法恢复时。</target>
        </trans-unit>
        <trans-unit id="4eb2b6d392d2ce78486b990b80c2fa5cc112e7e1" translate="yes" xml:space="preserve">
          <source>We do not go into too many details of JPA or &lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;Spring Data&lt;/a&gt; here. You can follow the &lt;a href=&quot;https://spring.io/guides/gs/accessing-data-jpa/&quot;&gt;&amp;ldquo;Accessing Data with JPA&amp;rdquo;&lt;/a&gt; guide from &lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt; and read the &lt;a href=&quot;https://spring.io/projects/spring-data-jpa&quot;&gt;Spring Data JPA&lt;/a&gt; and &lt;a href=&quot;https://hibernate.org/orm/documentation/&quot;&gt;Hibernate&lt;/a&gt; reference documentation.</source>
          <target state="translated">在这里，我们不讨论太多JPA或&lt;a href=&quot;https://spring.io/projects/spring-data&quot;&gt;Spring Data的&lt;/a&gt;细节。您可以按照&lt;a href=&quot;https://spring.io/guides/gs/accessing-data-jpa/&quot;&gt;&amp;ldquo;访问数据与JPA&amp;rdquo;&lt;/a&gt;从指导&lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt;并宣读了&lt;a href=&quot;https://spring.io/projects/spring-data-jpa&quot;&gt;春天的数据JPA&lt;/a&gt;和&lt;a href=&quot;https://hibernate.org/orm/documentation/&quot;&gt;Hibernate的&lt;/a&gt;参考文档。</target>
        </trans-unit>
        <trans-unit id="896ae35827d0a402f2cd54cdb750b361ff3ff8f3" translate="yes" xml:space="preserve">
          <source>We finish our example by creating a completely self-contained executable jar file that we could run in production. Executable jars (sometimes called &amp;ldquo;fat jars&amp;rdquo;) are archives containing your compiled classes along with all of the jar dependencies that your code needs to run.</source>
          <target state="translated">通过创建一个可以在生产环境中运行的完全独立的可执行jar文件，我们完成了示例。可执行jar（有时称为&amp;ldquo;胖jar&amp;rdquo;）是包含您的已编译类以及代码需要运行的所有jar依赖项的归档文件。</target>
        </trans-unit>
        <trans-unit id="ee9382bd1b18298c6b5b6d6a90b1d63af92bf674" translate="yes" xml:space="preserve">
          <source>We generally find these common libraries to be useful when writing tests. If these libraries do not suit your needs, you can add additional test dependencies of your own.</source>
          <target state="translated">我们一般认为这些常用的库在编写测试时是有用的。如果这些库不符合你的需求,你可以自己添加额外的测试依赖。</target>
        </trans-unit>
        <trans-unit id="eef3ce5d157a92206dd1a82d57a9fbaeb9f414da" translate="yes" xml:space="preserve">
          <source>We generally recommend that you locate your main application class in a root package above other classes. The &lt;a href=&quot;#using-boot-using-springbootapplication-annotation&quot;&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation&lt;/a&gt; is often placed on your main class, and it implicitly defines a base &amp;ldquo;search package&amp;rdquo; for certain items. For example, if you are writing a JPA application, the package of the &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotated class is used to search for &lt;code&gt;@Entity&lt;/code&gt; items. Using a root package also allows component scan to apply only on your project.</source>
          <target state="translated">我们通常建议您将主应用程序类放在其他类之上的根包中。该&lt;a href=&quot;#using-boot-using-springbootapplication-annotation&quot;&gt; &lt;code&gt;@SpringBootApplication&lt;/code&gt; 注解&lt;/a&gt;往往放在你的主类，它隐含地定义为某些项目一基地&amp;ldquo;搜索包&amp;rdquo;。例如，如果您正在编写JPA应用程序，则使用 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 带注释类的包来搜索 &lt;code&gt;@Entity&lt;/code&gt; 项目。使用根软件包还允许组件扫描仅应用于您的项目。</target>
        </trans-unit>
        <trans-unit id="8f7ba2747a31b1716c6a12ce63801ca69c7d1c08" translate="yes" xml:space="preserve">
          <source>We have barely scratched the surface of Spring Data JPA. For complete details, see the &lt;a href=&quot;https://docs.spring.io/spring-data/jdbc/docs/2.1.1/reference/html/&quot;&gt;Spring Data JPA reference documentation&lt;/a&gt;.</source>
          <target state="translated">我们几乎没有刮过Spring Data JPA的表面。有关完整的详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-data/jdbc/docs/2.1.1/reference/html/&quot;&gt;Spring Data JPA参考文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d3303b780f5bb3e3ce842dec5c5ca3ef218abf62" translate="yes" xml:space="preserve">
          <source>We have barely scratched the surface of Spring Data R2DBC. For complete details, see the &lt;a href=&quot;https://docs.spring.io/spring-data/r2dbc/docs/1.2.1/reference/html/&quot;&gt;Spring Data R2DBC reference documentation&lt;/a&gt;.</source>
          <target state="translated">我们几乎没有刮过Spring Data R2DBC的表面。有关完整的详细信息，请参见&lt;a href=&quot;https://docs.spring.io/spring-data/r2dbc/docs/1.2.1/reference/html/&quot;&gt;Spring Data R2DBC参考文档&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d0aa75e3e651c71b29cde84f8a321c4446f63cdd" translate="yes" xml:space="preserve">
          <source>We need to start by creating a Maven &lt;code&gt;pom.xml&lt;/code&gt; file. The &lt;code&gt;pom.xml&lt;/code&gt; is the recipe that is used to build your project. Open your favorite text editor and add the following:</source>
          <target state="translated">我们需要先创建一个Maven &lt;code&gt;pom.xml&lt;/code&gt; 文件。该 &lt;code&gt;pom.xml&lt;/code&gt; 的是用于构建项目的配方。打开您喜欢的文本编辑器并添加以下内容：</target>
        </trans-unit>
        <trans-unit id="7f6b7a55dee80393e8ef62788549610380c3c5df" translate="yes" xml:space="preserve">
          <source>We prefer &lt;a href=&quot;https://github.com/brettwooldridge/HikariCP&quot;&gt;HikariCP&lt;/a&gt; for its performance and concurrency. If HikariCP is available, we always choose it.</source>
          <target state="translated">我们更喜欢&lt;a href=&quot;https://github.com/brettwooldridge/HikariCP&quot;&gt;HikariCP&lt;/a&gt;的性能和并发性。如果HikariCP可用，我们总是选择它。</target>
        </trans-unit>
        <trans-unit id="b957d7f968f6faf774c21a0db86d96417f27eff0" translate="yes" xml:space="preserve">
          <source>We recommend disabling CSRF protection completely only if you are creating a service that is used by non-browser clients.</source>
          <target state="translated">我们建议只有在创建非浏览器客户端使用的服务时才完全禁用CSRF保护。</target>
        </trans-unit>
        <trans-unit id="d5d6ccc488e731bf91014a67330776445ca1c3d3" translate="yes" xml:space="preserve">
          <source>We recommend that &lt;code&gt;@ConfigurationProperties&lt;/code&gt; only deal with the environment and, in particular, does not inject other beans from the context. For corner cases, setter injection can be used or any of the &lt;code&gt;*Aware&lt;/code&gt; interfaces provided by the framework (such as &lt;code&gt;EnvironmentAware&lt;/code&gt; if you need access to the &lt;code&gt;Environment&lt;/code&gt;). If you still want to inject other beans using the constructor, the configuration properties bean must be annotated with &lt;code&gt;@Component&lt;/code&gt; and use JavaBean-based property binding.</source>
          <target state="translated">我们建议 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 仅处理环境，尤其不要从上下文中注入其他bean。对于极端情况，setter注入可以使用或任何的 &lt;code&gt;*Aware&lt;/code&gt; 该框架提供的接口（如 &lt;code&gt;EnvironmentAware&lt;/code&gt; 如果您需要访问的 &lt;code&gt;Environment&lt;/code&gt; ）。如果仍要使用构造函数注入其他bean，则必须使用 &lt;code&gt;@Component&lt;/code&gt; 注释配置属性bean，并使用基于JavaBean的属性绑定。</target>
        </trans-unit>
        <trans-unit id="8899f2fed29479c34cbcde701c53c6fbe76558f3" translate="yes" xml:space="preserve">
          <source>We recommend that you don&amp;rsquo;t mix profile-specific YAML files and multiple YAML documents. Stick to using only one of them.</source>
          <target state="translated">我们建议您不要混用特定于配置文件的YAML文件和多个YAML文档。坚持只使用其中之一。</target>
        </trans-unit>
        <trans-unit id="9b70097ec59569eca3c44682fc7f1b365ffb0d4c" translate="yes" xml:space="preserve">
          <source>We recommend that you follow Java&amp;rsquo;s recommended package naming conventions and use a reversed domain name (for example, &lt;code&gt;com.example.project&lt;/code&gt;).</source>
          <target state="translated">我们建议您遵循Java建议的程序包命名约定，并使用反向域名（例如 &lt;code&gt;com.example.project&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e234b874facaa6dcf97f02c0b58d3b2c75bea799" translate="yes" xml:space="preserve">
          <source>We recommend that you use an &lt;code&gt;Enum&lt;/code&gt; for those two values instead. If your IDE supports it, this is by far the most effective approach to auto-completion.</source>
          <target state="translated">我们建议您对这两个值使用 &lt;code&gt;Enum&lt;/code&gt; 。如果您的IDE支持，则这是迄今为止最有效的自动完成方法。</target>
        </trans-unit>
        <trans-unit id="c817a2952b904c087a49ee2dcdfc50519070efca" translate="yes" xml:space="preserve">
          <source>We recommend that, when possible, properties are stored in lower-case kebab format, such as &lt;code&gt;my.property-name=acme&lt;/code&gt;.</source>
          <target state="translated">我们建议，如果可能的话，属性以小写的 &lt;code&gt;my.property-name=acme&lt;/code&gt; 格式存储，例如my.property-name = acme。</target>
        </trans-unit>
        <trans-unit id="a8323a2a9b34ae7e0cbe8181ebcfe45bf2c5f3aa" translate="yes" xml:space="preserve">
          <source>Web</source>
          <target state="translated">Web</target>
        </trans-unit>
        <trans-unit id="f99c160590a9ffce61c3d2227997931a937022c2" translate="yes" xml:space="preserve">
          <source>Web Application Conditions</source>
          <target state="translated">网络应用条件</target>
        </trans-unit>
        <trans-unit id="b8d55e75dffe79e6c560076d706895d601ee8279" translate="yes" xml:space="preserve">
          <source>Web Endpoint Range Requests</source>
          <target state="translated">网络端点范围请求</target>
        </trans-unit>
        <trans-unit id="6fbee6b61a463a11a91017130d9f5345f6c3cc8e" translate="yes" xml:space="preserve">
          <source>Web Endpoint Request Predicates</source>
          <target state="translated">网络端点请求谓词</target>
        </trans-unit>
        <trans-unit id="748647235bc5257e337ccceffc983d59943ea3b3" translate="yes" xml:space="preserve">
          <source>Web Endpoint Response Status</source>
          <target state="translated">网络端点响应状态</target>
        </trans-unit>
        <trans-unit id="5e8b05e01b9874942eeadc8735d913a867dc91a3" translate="yes" xml:space="preserve">
          <source>Web Endpoint Security</source>
          <target state="translated">网络端点安全</target>
        </trans-unit>
        <trans-unit id="ca04e0450b467d53b5e82364bc827d34a4af1e0b" translate="yes" xml:space="preserve">
          <source>Web Filter</source>
          <target state="translated">网页过滤器</target>
        </trans-unit>
        <trans-unit id="619f84c1657ff482222e4b665ae0d3864a0b40b5" translate="yes" xml:space="preserve">
          <source>WebFlux and MVC end-to-end testing</source>
          <target state="translated">WebFlux和MVC端到端测试。</target>
        </trans-unit>
        <trans-unit id="c15bdace14e18785727454d67379714557de1e29" translate="yes" xml:space="preserve">
          <source>WebFlux integration tests</source>
          <target state="translated">WebFlux集成测试</target>
        </trans-unit>
        <trans-unit id="b4710ac6f7c8df7dd715e0ed9cdad5af24d5b60e" translate="yes" xml:space="preserve">
          <source>WebFlux is part of the Spring Framework and detailed information is available in its &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-fn&quot;&gt;reference documentation&lt;/a&gt;.</source>
          <target state="translated">WebFlux是Spring Framework的一部分，其&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-fn&quot;&gt;参考文档中&lt;/a&gt;提供了详细信息。</target>
        </trans-unit>
        <trans-unit id="24dcab53ee6c1cabc2dea7cdc32bc91ef200bd6f" translate="yes" xml:space="preserve">
          <source>WebSocket RSocket server uri to connect to.</source>
          <target state="translated">要连接到的 WebSocket RSocket 服务器 uri。</target>
        </trans-unit>
        <trans-unit id="d9465cfbbb0e0efce12171008ba13b3e41807416" translate="yes" xml:space="preserve">
          <source>WebSocket support is also available for &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-websocket&quot;&gt;reactive web applications&lt;/a&gt; and requires to include the WebSocket API alongside &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;:</source>
          <target state="translated">WebSocket支持也可用于&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web-reactive.html#webflux-websocket&quot;&gt;响应式Web应用程序，&lt;/a&gt;并且需要在 &lt;code&gt;spring-boot-starter-webflux&lt;/code&gt; 旁边包含WebSocket API ：</target>
        </trans-unit>
        <trans-unit id="08a2e2f5be9a856ad9b156db19e32f1fc14b6332" translate="yes" xml:space="preserve">
          <source>Well-known FreeMarker keys which are passed to FreeMarker's Configuration.</source>
          <target state="translated">众所周知的FreeMarker键被传递给FreeMarker的配置。</target>
        </trans-unit>
        <trans-unit id="e77c28b7aa56a4f5276e436761a44f9a751c1922" translate="yes" xml:space="preserve">
          <source>What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.</source>
          <target state="translated">当Kafka中没有初始偏移量或者当前偏移量在服务器上已经不存在时,该怎么办。</target>
        </trans-unit>
        <trans-unit id="3e35a27aaf4de3289456a70a97ee911483f12087" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s in a name</source>
          <target state="translated">名字叫什么</target>
        </trans-unit>
        <trans-unit id="79419526a7d7ca60a75ad36fe038a3ac56b41185" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;https://activemq.apache.org/&quot;&gt;ActiveMQ&lt;/a&gt; is available on the classpath, Spring Boot can also configure a &lt;code&gt;ConnectionFactory&lt;/code&gt;. If the broker is present, an embedded broker is automatically started and configured (provided no broker URL is specified through configuration).</source>
          <target state="translated">当&lt;a href=&quot;https://activemq.apache.org/&quot;&gt;ActiveMQ&lt;/a&gt;在类路径上可用时，Spring Boot也可以配置 &lt;code&gt;ConnectionFactory&lt;/code&gt; 。如果存在代理，则将自动启动和配置嵌入式代理（前提是未通过配置指定代理URL）。</target>
        </trans-unit>
        <trans-unit id="25128af6d0b28c714a72aba63740947dee6fb537" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@EnableCaching&lt;/code&gt; is present in your configuration, a suitable cache configuration is expected as well. If you need to disable caching altogether in certain environments, force the cache type to &lt;code&gt;none&lt;/code&gt; to use a no-op implementation, as shown in the following example:</source>
          <target state="translated">当您的配置中存在 &lt;code&gt;@EnableCaching&lt;/code&gt; 时，也需要合适的缓存配置。如果需要在某些环境中完全禁用缓存，请强制将缓存类型设置为 &lt;code&gt;none&lt;/code&gt; 以使用无操作实现，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="97bf78f883e0fd07909909d8283aa3e497ad8f23" translate="yes" xml:space="preserve">
          <source>When Kubernetes deletes an application instance, the shutdown process involves several subsystems concurrently: shutdown hooks, unregistering the service, removing the instance from the load-balancer&amp;hellip;​ Because this shutdown processing happens in parallel (and due to the nature of distributed systems), there is a window during which traffic can be routed to a pod that has also begun its shutdown processing.</source>
          <target state="translated">当Kubernetes删除应用程序实例时，关机过程会同时涉及多个子系统：关机钩子，注销服务，将实例从负载均衡器中删除...因为此关机过程并行发生（并且由于分布式系统的性质），有一个窗口，可在该窗口中将流量路由到也已开始其关闭处理的Pod。</target>
        </trans-unit>
        <trans-unit id="9d682075a87932e85e000a6c9da2e9064e60edc0" translate="yes" xml:space="preserve">
          <source>When Micrometer&amp;rsquo;s &lt;code&gt;micrometer-jersey2&lt;/code&gt; module is on the classpath, auto-configuration enables the instrumentation of requests handled by the Jersey JAX-RS implementation. When &lt;code&gt;management.metrics.web.server.request.autotime.enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this instrumentation occurs for all requests. Alternatively, when set to &lt;code&gt;false&lt;/code&gt;, you can enable instrumentation by adding &lt;code&gt;@Timed&lt;/code&gt; to a request-handling method:</source>
          <target state="translated">当Micrometer的 &lt;code&gt;micrometer-jersey2&lt;/code&gt; 模块位于类路径上时，自动配置将启用对Jersey JAX-RS实现所处理的请求的检测。当 &lt;code&gt;management.metrics.web.server.request.autotime.enabled&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 时，会对所有请求进行这种检测。另外，当设置为 &lt;code&gt;false&lt;/code&gt; 时，可以通过将 &lt;code&gt;@Timed&lt;/code&gt; 添加到请求处理方法来启用检测：</target>
        </trans-unit>
        <trans-unit id="c805b3a7f1ca35978d14d39e1fbd70b95dc11157" translate="yes" xml:space="preserve">
          <source>When Reactor Netty is on the classpath a Reactor Netty-based &lt;code&gt;WebClient&lt;/code&gt; is auto-configured. To customize the client&amp;rsquo;s handling of network connections, provide a &lt;code&gt;ClientHttpConnector&lt;/code&gt; bean. The following example configures a 60 second connect timeout and adds a &lt;code&gt;ReadTimeoutHandler&lt;/code&gt;:</source>
          <target state="translated">当Reactor Netty在类路径上时，将自动配置基于Reactor Netty的 &lt;code&gt;WebClient&lt;/code&gt; 。要自定义客户端对网络连接的处理，请提供一个 &lt;code&gt;ClientHttpConnector&lt;/code&gt; bean。下面的示例配置60秒的连接超时并添加 &lt;code&gt;ReadTimeoutHandler&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="cb98d494ebb8bb01c49e4e827d3219e838ad1c48" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;ConnectionFactory&lt;/code&gt; bean is available, the regular JDBC &lt;code&gt;DataSource&lt;/code&gt; auto-configuration backs off. If you want to retain the JDBC &lt;code&gt;DataSource&lt;/code&gt; auto-configuration, and are comfortable with the risk of using the blocking JDBC API in a reactive application, add &lt;code&gt;@Import(DataSourceAutoConfiguration.class)&lt;/code&gt; on a &lt;code&gt;@Configuration&lt;/code&gt; class in your application to re-enable it.</source>
          <target state="translated">当 &lt;code&gt;ConnectionFactory&lt;/code&gt; bean可用时，常规JDBC &lt;code&gt;DataSource&lt;/code&gt; 自动配置将退出。如果要保留JDBC &lt;code&gt;DataSource&lt;/code&gt; 自动配置，并且对在反应性应用程序中使用阻塞JDBC API的风险感到满意，请在应用程序中的 &lt;code&gt;@Configuration&lt;/code&gt; 类上添加 &lt;code&gt;@Import(DataSourceAutoConfiguration.class)&lt;/code&gt; 以重新启用它。</target>
        </trans-unit>
        <trans-unit id="69f3ac1bd16a1c2c06e4d7529b8fa9d384dbcccd" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;List&lt;/code&gt; is specified in multiple profiles, the one with the highest priority (and only that one) is used. Consider the following example:</source>
          <target state="translated">当 &lt;code&gt;List&lt;/code&gt; 中的多个配置文件中指定，则使用具有最高优先级（并且只有一个）。考虑以下示例：</target>
        </trans-unit>
        <trans-unit id="5b9005d9ac77f6aba678a9c94e57a184f3061e43" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;jndi-name&lt;/code&gt; is set, it takes precedence over all other Session-related settings.</source>
          <target state="translated">当一个 &lt;code&gt;jndi-name&lt;/code&gt; 设置，它优先于所有其他会话相关的设置。</target>
        </trans-unit>
        <trans-unit id="ec4d23f0792064325151a6612c2bfed0dcc21e53" translate="yes" xml:space="preserve">
          <source>When a JTA environment is detected, Spring&amp;rsquo;s &lt;code&gt;JtaTransactionManager&lt;/code&gt; is used to manage transactions. Auto-configured JMS, DataSource, and JPA beans are upgraded to support XA transactions. You can use standard Spring idioms, such as &lt;code&gt;@Transactional&lt;/code&gt;, to participate in a distributed transaction. If you are within a JTA environment and still want to use local transactions, you can set the &lt;code&gt;spring.jta.enabled&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt; to disable the JTA auto-configuration.</source>
          <target state="translated">当检测到JTA环境时，将使用Spring的 &lt;code&gt;JtaTransactionManager&lt;/code&gt; 来管理事务。自动配置的JMS，DataSource和JPA Bean已升级为支持XA事务。您可以使用标准的Spring习惯用法（例如 &lt;code&gt;@Transactional&lt;/code&gt; ）来参与分布式事务。如果您在JTA环境中并且仍要使用本地事务，则可以将 &lt;code&gt;spring.jta.enabled&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; 以禁用JTA自动配置。</target>
        </trans-unit>
        <trans-unit id="656c1b2f3320fa923139cd52fa74c681b01b7233" translate="yes" xml:space="preserve">
          <source>When a Spring Boot application shuts down:</source>
          <target state="translated">当Spring Boot应用程序关闭时。</target>
        </trans-unit>
        <trans-unit id="f4151bdd995a909369d2797a22a1caf9cbe97f1c" translate="yes" xml:space="preserve">
          <source>When a Spring Boot application starts:</source>
          <target state="translated">当Spring Boot应用程序启动时。</target>
        </trans-unit>
        <trans-unit id="8591308ddf541353363b8793e001146bb2b004b9" translate="yes" xml:space="preserve">
          <source>When a cache library offers both a native implementation and JSR-107 support, Spring Boot prefers the JSR-107 support, so that the same features are available if you switch to a different JSR-107 implementation.</source>
          <target state="translated">当一个缓存库同时提供本地实现和JSR-107支持时,Spring Boot会优先选择JSR-107支持,这样,如果您切换到不同的JSR-107实现,就可以使用相同的功能。</target>
        </trans-unit>
        <trans-unit id="aa226405d623680cb0bfa35ceb198b67321baacd" translate="yes" xml:space="preserve">
          <source>When a class does not include a &lt;code&gt;package&lt;/code&gt; declaration, it is considered to be in the &amp;ldquo;default package&amp;rdquo;. The use of the &amp;ldquo;default package&amp;rdquo; is generally discouraged and should be avoided. It can cause particular problems for Spring Boot applications that use the &lt;code&gt;@ComponentScan&lt;/code&gt;, &lt;code&gt;@ConfigurationPropertiesScan&lt;/code&gt;, &lt;code&gt;@EntityScan&lt;/code&gt;, or &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotations, since every class from every jar is read.</source>
          <target state="translated">当类不包含 &lt;code&gt;package&lt;/code&gt; 声明时，将其视为在&amp;ldquo;默认程序包&amp;rdquo;中。通常不建议使用&amp;ldquo;默认程序包&amp;rdquo;，应避免使用。这可能会导致使用了Spring启动应用程序的特殊问题 &lt;code&gt;@ComponentScan&lt;/code&gt; ， &lt;code&gt;@ConfigurationPropertiesScan&lt;/code&gt; ， &lt;code&gt;@EntityScan&lt;/code&gt; ，或 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 注解，因为从每一个罐子每一个类被读取。</target>
        </trans-unit>
        <trans-unit id="edb4a506ecc15380a2e39a7856f810a63c005bb1" translate="yes" xml:space="preserve">
          <source>When a custom management context path is configured, the &amp;ldquo;discovery page&amp;rdquo; automatically moves from &lt;code&gt;/actuator&lt;/code&gt; to the root of the management context. For example, if the management context path is &lt;code&gt;/management&lt;/code&gt;, then the discovery page is available from &lt;code&gt;/management&lt;/code&gt;. When the management context path is set to &lt;code&gt;/&lt;/code&gt;, the discovery page is disabled to prevent the possibility of a clash with other mappings.</source>
          <target state="translated">配置自定义管理上下文路径后，&amp;ldquo;发现页面&amp;rdquo;会自动从 &lt;code&gt;/actuator&lt;/code&gt; 移至管理上下文的根目录。例如，如果管理上下文路径为 &lt;code&gt;/management&lt;/code&gt; ，那么可以从 &lt;code&gt;/management&lt;/code&gt; 获得发现页面。当管理上下文路径设置为 &lt;code&gt;/&lt;/code&gt; 时，将禁用发现页面，以防止与其他映射发生冲突的可能性。</target>
        </trans-unit>
        <trans-unit id="f94f0e713b0836b77ca89b89f676eee04b6ed838" translate="yes" xml:space="preserve">
          <source>When auto-configuring a Reactor Netty or Jetty server, Spring Boot will create specific beans that will provide HTTP resources to the server instance: &lt;code&gt;ReactorResourceFactory&lt;/code&gt; or &lt;code&gt;JettyResourceFactory&lt;/code&gt;.</source>
          <target state="translated">当自动配置Reactor Netty或Jetty服务器时，Spring Boot将创建特定的bean，这些bean将向服务器实例提供HTTP资源： &lt;code&gt;ReactorResourceFactory&lt;/code&gt; 或 &lt;code&gt;JettyResourceFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2061a6bf84a5cee4b249d64373f234f77cbbc4a" translate="yes" xml:space="preserve">
          <source>When binding to &lt;code&gt;Map&lt;/code&gt; properties, if the &lt;code&gt;key&lt;/code&gt; contains anything other than lowercase alpha-numeric characters or &lt;code&gt;-&lt;/code&gt;, you need to use the bracket notation so that the original value is preserved. If the key is not surrounded by &lt;code&gt;[]&lt;/code&gt;, any characters that are not alpha-numeric or &lt;code&gt;-&lt;/code&gt; are removed. For example, consider binding the following properties to a &lt;code&gt;Map&lt;/code&gt;:</source>
          <target state="translated">绑定到 &lt;code&gt;Map&lt;/code&gt; 属性时，如果 &lt;code&gt;key&lt;/code&gt; 包含小写字母数字字符或 &lt;code&gt;-&lt;/code&gt; 以外的任何其他内容，则需要使用方括号表示法，以便保留原始值。如果键没有被 &lt;code&gt;[]&lt;/code&gt; 包围，则将删除所有非字母数字或 &lt;code&gt;-&lt;/code&gt; 的字符。例如，考虑将以下属性绑定到 &lt;code&gt;Map&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e13a02c40ccf20b569f41c9f8724d89d66fccad1" translate="yes" xml:space="preserve">
          <source>When building a reactive web application, the following stores can be auto-configured:</source>
          <target state="translated">在构建反应式Web应用时,可以自动配置以下存储。</target>
        </trans-unit>
        <trans-unit id="ca7edcd8884881532d1ff4b819b831bde7b3bc8a" translate="yes" xml:space="preserve">
          <source>When choosing this option, &lt;code&gt;org.springframework:spring-jdbc&lt;/code&gt; is still a required dependency.</source>
          <target state="translated">选择此选项时， &lt;code&gt;org.springframework:spring-jdbc&lt;/code&gt; 仍然是必需的依赖项。</target>
        </trans-unit>
        <trans-unit id="c080a4b752d08d9d297b7b608488194c8fd8df6d" translate="yes" xml:space="preserve">
          <source>When configured to use a custom port, the management server can also be configured with its own SSL by using the various &lt;code&gt;management.server.ssl.*&lt;/code&gt; properties. For example, doing so lets a management server be available over HTTP while the main application uses HTTPS, as shown in the following property settings:</source>
          <target state="translated">当配置为使用定制端口时，还可以通过使用各种 &lt;code&gt;management.server.ssl.*&lt;/code&gt; 属性将管理服务器配置为其自身的SSL 。例如，这样做可以使管理服务器在主应用程序使用HTTPS时通过HTTP可用，如以下属性设置所示：</target>
        </trans-unit>
        <trans-unit id="8a12ebadb197a1deedc48dd617ec32b711a18847" translate="yes" xml:space="preserve">
          <source>When declaring a &lt;code&gt;@Bean&lt;/code&gt; method, provide as much type information as possible in the method&amp;rsquo;s return type. For example, if your bean&amp;rsquo;s concrete class implements an interface the bean method&amp;rsquo;s return type should be the concrete class and not the interface. Providing as much type information as possible in &lt;code&gt;@Bean&lt;/code&gt; methods is particularly important when using bean conditions as their evaluation can only rely upon to type information that&amp;rsquo;s available in the method signature.</source>
          <target state="translated">声明 &lt;code&gt;@Bean&lt;/code&gt; 方法时，请在该方法的返回类型中提供尽可能多的类型信息。例如，如果bean的具体类实现接口，则bean方法的返回类型应该是具体类而不是接口。在使用bean条件时，在 &lt;code&gt;@Bean&lt;/code&gt; 方法中提供尽可能多的类型信息尤为重要，因为它们的评估只能依靠方法签名中可用的类型信息。</target>
        </trans-unit>
        <trans-unit id="c1bbcc1f9da9220b9fa67db8ff9be6dec95fad2f" translate="yes" xml:space="preserve">
          <source>When deployed on platforms, applications can provide information about their availability to the platform using infrastructure such as &lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&quot;&gt;Kubernetes Probes&lt;/a&gt;. Spring Boot includes out-of-the box support for the commonly used &amp;ldquo;liveness&amp;rdquo; and &amp;ldquo;readiness&amp;rdquo; availability states. If you are using Spring Boot&amp;rsquo;s &amp;ldquo;actuator&amp;rdquo; support then these states are exposed as health endpoint groups.</source>
          <target state="translated">在平台上部署后，应用程序可以使用诸如&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/&quot;&gt;Kubernetes Probes之类的&lt;/a&gt;基础结构向平台提供有关其可用性的信息。 Spring Boot对常用的&amp;ldquo;活动性&amp;rdquo;和&amp;ldquo;就绪性&amp;rdquo;可用性状态提供了开箱即用的支持。如果您使用的是Spring Boot的&amp;ldquo;执行器&amp;rdquo;支持，那么这些状态将作为运行状况端点组公开。</target>
        </trans-unit>
        <trans-unit id="dd01b9708db5a2f5be6895819c19a82c5d8714f5" translate="yes" xml:space="preserve">
          <source>When deployed to a servlet container, Spring Boot uses its error page filter to forward a request with an error status to the appropriate error page. This is necessary as the Servlet specification does not provide an API for registering error pages. Depending on the container that you are deploying your war file to and the technologies that your application uses, some additional configuration may be required.</source>
          <target state="translated">部署到 servlet 容器时,Spring Boot 使用其错误页面过滤器将具有错误状态的请求转发到相应的错误页面。这是必要的,因为 Servlet 规范没有提供用于注册错误页面的 API。根据您要将 war 文件部署到的容器和您的应用程序使用的技术,可能需要一些额外的配置。</target>
        </trans-unit>
        <trans-unit id="d4822eb22c6cabdf0212adef4166d5bb80a19298" translate="yes" xml:space="preserve">
          <source>When embedding the broker, you can choose if you want to enable persistence and list the destinations that should be made available. These can be specified as a comma-separated list to create them with the default options, or you can define bean(s) of type &lt;code&gt;org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration&lt;/code&gt; or &lt;code&gt;org.apache.activemq.artemis.jms.server.config.TopicConfiguration&lt;/code&gt;, for advanced queue and topic configurations, respectively.</source>
          <target state="translated">嵌入代理时，可以选择是否要启用持久性并列出应使其可用的目的地。可以将它们指定为以逗号分隔的列表，以使用默认选项创建它们，或者您可以定义 &lt;code&gt;org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration&lt;/code&gt; 或 &lt;code&gt;org.apache.activemq.artemis.jms.server.config.TopicConfiguration&lt;/code&gt; 类型的bean 。 artemis.jms.server.config.TopicConfiguration，分别用于高级队列和主题配置。</target>
        </trans-unit>
        <trans-unit id="ba49f040bbc37906f2970cea4939e6751ae69ccc" translate="yes" xml:space="preserve">
          <source>When executed as root, as is the case when root is being used to start an init.d service, the default executable script runs the application as the user specified in the &lt;code&gt;RUN_AS_USER&lt;/code&gt; environment variable. When the environment variable is not set, the user who owns the jar file is used instead. You should never run a Spring Boot application as &lt;code&gt;root&lt;/code&gt;, so &lt;code&gt;RUN_AS_USER&lt;/code&gt; should never be root and your application&amp;rsquo;s jar file should never be owned by root. Instead, create a specific user to run your application and set the &lt;code&gt;RUN_AS_USER&lt;/code&gt; environment variable or use &lt;code&gt;chown&lt;/code&gt; to make it the owner of the jar file, as shown in the following example:</source>
          <target state="translated">当以root身份执行时（例如使用root来启动init.d服务时），默认的可执行脚本以 &lt;code&gt;RUN_AS_USER&lt;/code&gt; 环境变量中指定的用户身份运行应用程序。如果未设置环境变量，则使用拥有jar文件的用户。您永远不要以 &lt;code&gt;root&lt;/code&gt; 身份运行Spring Boot应用程序，因此 &lt;code&gt;RUN_AS_USER&lt;/code&gt; 绝对不能为root用户，并且应用程序的jar文件绝对不能为root用户所拥有。相反，创建一个特定用户来运行您的应用程序并设置 &lt;code&gt;RUN_AS_USER&lt;/code&gt; 环境变量，或使用 &lt;code&gt;chown&lt;/code&gt; 使其成为jar文件的所有者，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="1db6534d2f7f3c406621529098d3e6efb0183091" translate="yes" xml:space="preserve">
          <source>When greater than zero, enables retrying of failed sends.</source>
          <target state="translated">当大于零时,启用重试发送失败。</target>
        </trans-unit>
        <trans-unit id="5e23446bdce689fc3ca0110fb61c992a6caa4e3b" translate="yes" xml:space="preserve">
          <source>When lists are configured in more than one place, overriding works by replacing the entire list.</source>
          <target state="translated">当列表配置在多个地方时,覆盖的作用是替换整个列表。</target>
        </trans-unit>
        <trans-unit id="e0c3d5135d714f4d1ed3cf1f532f44f24a7db81c" translate="yes" xml:space="preserve">
          <source>When loading resources dynamically with, for example, a JavaScript module loader, renaming files is not an option. That is why other strategies are also supported and can be combined. A &quot;fixed&quot; strategy adds a static version string in the URL without changing the file name, as shown in the following example:</source>
          <target state="translated">当使用JavaScript模块加载器等动态加载资源时,重命名文件不是一个选项。这就是为什么也支持其他策略,并且可以结合使用。一个 &quot;固定 &quot;策略是在URL中添加一个静态版本字符串,而不改变文件名,如下例所示。</target>
        </trans-unit>
        <trans-unit id="2e1d54fd7b3594775e07fd6d15881fe1500d50cd" translate="yes" xml:space="preserve">
          <source>When multiple locations are specified, the later ones can override the values of earlier ones.</source>
          <target state="translated">当指定多个位置时,后面的位置可以覆盖前面的位置。</target>
        </trans-unit>
        <trans-unit id="331838622353ab9e1cb097584684b93cada12542" translate="yes" xml:space="preserve">
          <source>When non empty, enables transaction support for producer.</source>
          <target state="translated">当非空时,启用对生产者的交易支持。</target>
        </trans-unit>
        <trans-unit id="3d58543b81705f91a71431d5a583246e37214478" translate="yes" xml:space="preserve">
          <source>When only basic SQL scripts are used, Spring Boot automatically creates the schema of an embedded &lt;code&gt;DataSource&lt;/code&gt;. This behavior can be customized by using the &lt;code&gt;spring.datasource.initialization-mode&lt;/code&gt; property. For instance, if you want to always initialize the &lt;code&gt;DataSource&lt;/code&gt; regardless of its type:</source>
          <target state="translated">当仅使用基本的SQL脚本时，Spring Boot会自动创建嵌入式 &lt;code&gt;DataSource&lt;/code&gt; 的架构。可以使用 &lt;code&gt;spring.datasource.initialization-mode&lt;/code&gt; 属性来自定义此行为。例如，如果要始终初始化 &lt;code&gt;DataSource&lt;/code&gt; 而不管其类型如何：</target>
        </trans-unit>
        <trans-unit id="c4f051365abb15e406ec92c585a98efdf8a0025e" translate="yes" xml:space="preserve">
          <source>When placed on a &lt;code&gt;@Bean&lt;/code&gt; method, the target type defaults to the return type of the method, as shown in the following example:</source>
          <target state="translated">当放置在 &lt;code&gt;@Bean&lt;/code&gt; 方法上时，目标类型默认为该方法的返回类型，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="cd37626130103f29ce87938e913162e6fd9db2a8" translate="yes" xml:space="preserve">
          <source>When possible, we recommend that you use the &lt;code&gt;-spring&lt;/code&gt; variants for your logging configuration (for example, &lt;code&gt;logback-spring.xml&lt;/code&gt; rather than &lt;code&gt;logback.xml&lt;/code&gt;). If you use standard configuration locations, Spring cannot completely control log initialization.</source>
          <target state="translated">如果可能，我们建议您在日志配置中使用 &lt;code&gt;-spring&lt;/code&gt; 变体（例如， &lt;code&gt;logback-spring.xml&lt;/code&gt; 而不是 &lt;code&gt;logback.xml&lt;/code&gt; ）。如果使用标准配置位置，Spring将无法完全控制日志初始化。</target>
        </trans-unit>
        <trans-unit id="b470327a567627d21241e80c3e781cbc0640dcda" translate="yes" xml:space="preserve">
          <source>When repackaging an archive, you can include references to dependency files by using the &lt;code&gt;org.springframework.boot.loader.tools.Libraries&lt;/code&gt; interface. We do not provide any concrete implementations of &lt;code&gt;Libraries&lt;/code&gt; here as they are usually build-system-specific.</source>
          <target state="translated">重新打包档案时，可以使用 &lt;code&gt;org.springframework.boot.loader.tools.Libraries&lt;/code&gt; 接口包含对依赖文件的引用。我们在此不提供任何具体的 &lt;code&gt;Libraries&lt;/code&gt; 实现，因为它们通常是特定于构建系统的。</target>
        </trans-unit>
        <trans-unit id="b990c6a436ce82d5e0da52dd9ffe7905629c8a01" translate="yes" xml:space="preserve">
          <source>When running a Spring Boot application that uses an embedded servlet container (and is packaged as an executable archive), there are some limitations in the JSP support.</source>
          <target state="translated">当运行使用嵌入式 servlet 容器的 Spring Boot 应用程序(并被打包为可执行存档)时,JSP 支持有一些限制。</target>
        </trans-unit>
        <trans-unit id="166a4c20b9d1f115dc51da3f36cf7358fb8f0ffd" translate="yes" xml:space="preserve">
          <source>When running applications on a cloud platform (such as Kubernetes) you often need to read config values that the platform supplies. It&amp;rsquo;s not uncommon to use environment variables for such purposes, but this can have drawbacks, especially if the value is supposed to be kept secret.</source>
          <target state="translated">在云平台（例如Kubernetes）上运行应用程序时，您通常需要读取平台提供的配置值。为此目的使用环境变量并不罕见，但这可能会有弊端，尤其是在假定该值是机密的情况下。</target>
        </trans-unit>
        <trans-unit id="b590e204406a763c9432c6af0dfc8bc3f4c4834d" translate="yes" xml:space="preserve">
          <source>When running tests, it is sometimes necessary to mock certain components within your application context. For example, you may have a facade over some remote service that is unavailable during development. Mocking can also be useful when you want to simulate failures that might be hard to trigger in a real environment.</source>
          <target state="translated">在运行测试时,有时有必要在您的应用程序上下文中模拟某些组件。例如,你可能在一些远程服务上有一个门面,而这个门面在开发过程中是不可用的。当你想模拟在真实环境中很难触发的故障时,模拟也很有用。</target>
        </trans-unit>
        <trans-unit id="8cb719ac0bb17afc286e305575bc5ac750065ffe" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;JAVA_OPTS&lt;/code&gt; on Microsoft Windows, make sure to quote the entire instruction, such as &lt;code&gt;set &quot;JAVA_OPTS=-Xms256m -Xmx2048m&quot;&lt;/code&gt;. Doing so ensures the values are properly passed to the process.</source>
          <target state="translated">在Microsoft Windows上设置 &lt;code&gt;JAVA_OPTS&lt;/code&gt; 时，请确保引用整个指令，例如 &lt;code&gt;set &quot;JAVA_OPTS=-Xms256m -Xmx2048m&quot;&lt;/code&gt; 。这样做可以确保将值正确传递给流程。</target>
        </trans-unit>
        <trans-unit id="b37eb2139a8063c7aa8bca8bdbfb110e79a0e90f" translate="yes" xml:space="preserve">
          <source>When specified as environment variables or manifest entries, the following names should be used:</source>
          <target state="translated">当指定为环境变量或清单条目时,应使用以下名称。</target>
        </trans-unit>
        <trans-unit id="b1119cb2661ebaa0bfc4fba1cbe34637ce316656" translate="yes" xml:space="preserve">
          <source>When specifying addresses that way, the &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; properties are ignored. If the address uses the &lt;code&gt;amqps&lt;/code&gt; protocol, SSL support is enabled automatically.</source>
          <target state="translated">以这种方式指定地址时， &lt;code&gt;host&lt;/code&gt; 和 &lt;code&gt;port&lt;/code&gt; 属性将被忽略。如果地址使用 &lt;code&gt;amqps&lt;/code&gt; 协议，则会自动启用SSL支持。</target>
        </trans-unit>
        <trans-unit id="b0bb2a229600b4b9ec90dd3d8e5269b3018911da" translate="yes" xml:space="preserve">
          <source>When switching to a different HTTP server, you need to swap the default dependencies for those that you need instead. To help with this process, Spring Boot provides a separate starter for each of the supported HTTP servers.</source>
          <target state="translated">当切换到不同的HTTP服务器时,您需要将默认的依赖关系换成您需要的依赖关系。为了帮助完成这个过程,Spring Boot为每个支持的HTTP服务器提供了一个单独的启动器。</target>
        </trans-unit>
        <trans-unit id="b5eef20c4113105a91f44348601544f5027b6fd6" translate="yes" xml:space="preserve">
          <source>When testing Spring Boot applications, this is often not required. Spring Boot&amp;rsquo;s &lt;code&gt;@*Test&lt;/code&gt; annotations search for your primary configuration automatically whenever you do not explicitly define one.</source>
          <target state="translated">在测试Spring Boot应用程序时，通常不需要这样做。每当您没有明确定义时，Spring Boot的 &lt;code&gt;@*Test&lt;/code&gt; 注释就会自动搜索您的主要配置。</target>
        </trans-unit>
        <trans-unit id="fb802321c2c3b801f3d52aeb74ea76101052d8b8" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean is registered using configuration property scanning or via &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt;, the bean has a conventional name: &lt;code&gt;&amp;lt;prefix&amp;gt;-&amp;lt;fqn&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt; is the environment key prefix specified in the &lt;code&gt;@ConfigurationProperties&lt;/code&gt; annotation and &lt;code&gt;&amp;lt;fqn&amp;gt;&lt;/code&gt; is the fully qualified name of the bean. If the annotation does not provide any prefix, only the fully qualified name of the bean is used.</source>
          <target state="translated">当 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; bean使用配置属性扫描或经由注册 &lt;code&gt;@EnableConfigurationProperties&lt;/code&gt; ，豆具有常规名称： &lt;code&gt;&amp;lt;prefix&amp;gt;-&amp;lt;fqn&amp;gt;&lt;/code&gt; ，其中 &lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt; 是在指定的环境键前缀 &lt;code&gt;@ConfigurationProperties&lt;/code&gt; 注释和 &lt;code&gt;&amp;lt;fqn&amp;gt;&lt;/code&gt; 是Bean的完全限定名称。如果注释不提供任何前缀，则仅使用Bean的完全限定名称。</target>
        </trans-unit>
        <trans-unit id="4d45608ecb938301e7bb2c640c9f09a4413980f8" translate="yes" xml:space="preserve">
          <source>When the Apache Kafka infrastructure is present, any bean can be annotated with &lt;code&gt;@KafkaListener&lt;/code&gt; to create a listener endpoint. If no &lt;code&gt;KafkaListenerContainerFactory&lt;/code&gt; has been defined, a default one is automatically configured with keys defined in &lt;code&gt;spring.kafka.listener.*&lt;/code&gt;.</source>
          <target state="translated">存在Apache Kafka基础结构时，可以使用 &lt;code&gt;@KafkaListener&lt;/code&gt; 注释任何bean，以创建侦听器端点。如果 &lt;code&gt;KafkaListenerContainerFactory&lt;/code&gt; ，则会使用 &lt;code&gt;spring.kafka.listener.*&lt;/code&gt; 定义的键自动配置默认值。</target>
        </trans-unit>
        <trans-unit id="cc337ad6a29a601497eac4f84b56224913dda123" translate="yes" xml:space="preserve">
          <source>When the JDBC store is used, the schema can be initialized on startup, as shown in the following example:</source>
          <target state="translated">当使用JDBC存储时,可以在启动时初始化模式,如下例所示。</target>
        </trans-unit>
        <trans-unit id="19eb27a8c635967fb916ec78517df63ceee60db5" translate="yes" xml:space="preserve">
          <source>When the JMS infrastructure is present, any bean can be annotated with &lt;code&gt;@JmsListener&lt;/code&gt; to create a listener endpoint. If no &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt; has been defined, a default one is configured automatically. If a &lt;code&gt;DestinationResolver&lt;/code&gt; or a &lt;code&gt;MessageConverter&lt;/code&gt; beans is defined, it is associated automatically to the default factory.</source>
          <target state="translated">当存在JMS基础结构时，可以使用 &lt;code&gt;@JmsListener&lt;/code&gt; 注释任何bean以创建侦听器端点。如果 &lt;code&gt;JmsListenerContainerFactory&lt;/code&gt; ，则会自动配置一个默认值。如果定义了 &lt;code&gt;DestinationResolver&lt;/code&gt; 或 &lt;code&gt;MessageConverter&lt;/code&gt; Bean，则将其自动关联到默认工厂。</target>
        </trans-unit>
        <trans-unit id="50f0bbd6afa93b71b892f56503a3b1f11a886642" translate="yes" xml:space="preserve">
          <source>When the Prometheus Pushgateway dependency is present on the classpath and the &lt;code&gt;management.metrics.export.prometheus.pushgateway.enabled&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, a &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; bean is auto-configured. This manages the pushing of metrics to a Prometheus Pushgateway.</source>
          <target state="translated">当在类路径上存在Prometheus Pushgateway依赖项，并且 &lt;code&gt;management.metrics.export.prometheus.pushgateway.enabled&lt;/code&gt; 属性设置为 &lt;code&gt;true&lt;/code&gt; 时，将自动配置 &lt;code&gt;PrometheusPushGatewayManager&lt;/code&gt; bean。这可以管理将指标推送到Prometheus Pushgateway。</target>
        </trans-unit>
        <trans-unit id="9c67f5a9f6c46e8f5d733622c958dc20ca6479bd" translate="yes" xml:space="preserve">
          <source>When the Rabbit infrastructure is present, any bean can be annotated with &lt;code&gt;@RabbitListener&lt;/code&gt; to create a listener endpoint. If no &lt;code&gt;RabbitListenerContainerFactory&lt;/code&gt; has been defined, a default &lt;code&gt;SimpleRabbitListenerContainerFactory&lt;/code&gt; is automatically configured and you can switch to a direct container using the &lt;code&gt;spring.rabbitmq.listener.type&lt;/code&gt; property. If a &lt;code&gt;MessageConverter&lt;/code&gt; or a &lt;code&gt;MessageRecoverer&lt;/code&gt; bean is defined, it is automatically associated with the default factory.</source>
          <target state="translated">存在Rabbit基础结构时，可以使用 &lt;code&gt;@RabbitListener&lt;/code&gt; 注释任何bean以创建侦听器终结点。如果未定义 &lt;code&gt;RabbitListenerContainerFactory&lt;/code&gt; ，则会自动配置默认的 &lt;code&gt;SimpleRabbitListenerContainerFactory&lt;/code&gt; ，您可以使用 &lt;code&gt;spring.rabbitmq.listener.type&lt;/code&gt; 属性切换到直接容器。如果定义了 &lt;code&gt;MessageConverter&lt;/code&gt; 或 &lt;code&gt;MessageRecoverer&lt;/code&gt; Bean，它将自动与默认工厂关联。</target>
        </trans-unit>
        <trans-unit id="09f03cc4078594ab7cabdffb18d8434529ac5b31" translate="yes" xml:space="preserve">
          <source>When the debug mode is enabled, a selection of core loggers (embedded container, Hibernate, and Spring Boot) are configured to output more information. Enabling the debug mode does &lt;em&gt;not&lt;/em&gt; configure your application to log all messages with &lt;code&gt;DEBUG&lt;/code&gt; level.</source>
          <target state="translated">启用调试模式后，将配置一些核心记录器（嵌入式容器，Hibernate和Spring Boot）以输出更多信息。启用调试模式并&lt;em&gt;没有&lt;/em&gt;将应用程序配置为记录与所有消息 &lt;code&gt;DEBUG&lt;/code&gt; 水平。</target>
        </trans-unit>
        <trans-unit id="ca0dfb6bb618abdaebb38370f1bdb84604a0e1a1" translate="yes" xml:space="preserve">
          <source>When to include &quot;errors&quot; attribute.</source>
          <target state="translated">什么时候加入 &quot;错误 &quot;属性。</target>
        </trans-unit>
        <trans-unit id="089db356b67247a8b9d267b74f62658376b1b234" translate="yes" xml:space="preserve">
          <source>When to include &quot;message&quot; attribute.</source>
          <target state="translated">何时加入 &quot;消息 &quot;属性。</target>
        </trans-unit>
        <trans-unit id="12fa1f6a9a949ab72b648d1f433e5bfb0d934aa6" translate="yes" xml:space="preserve">
          <source>When to include the &quot;trace&quot; attribute.</source>
          <target state="translated">什么时候加入 &quot;trace &quot;属性。</target>
        </trans-unit>
        <trans-unit id="36bd6fda6ae35beb820543b7ca538bdc1b1afd26" translate="yes" xml:space="preserve">
          <source>When to show components. If not specified the 'show-details' setting will be used.</source>
          <target state="translated">何时显示组件。如果没有指定,将使用'show-details'设置。</target>
        </trans-unit>
        <trans-unit id="59d9b30437777f82b1cf10181f4f4bf633707094" translate="yes" xml:space="preserve">
          <source>When to show full health details.</source>
          <target state="translated">何时显示全部健康细节。</target>
        </trans-unit>
        <trans-unit id="71111bf129c83fcb8da16a05eccd593621c5d652" translate="yes" xml:space="preserve">
          <source>When upgrading to a new feature release, some properties may have been renamed or removed. Spring Boot provides a way to analyze your application&amp;rsquo;s environment and print diagnostics at startup, but also temporarily migrate properties at runtime for you. To enable that feature, add the following dependency to your project:</source>
          <target state="translated">升级到新功能版本时，某些属性可能已被重命名或删除。Spring Boot提供了一种在启动时分析应用程序环境并打印诊断的方法，而且还可以在运行时为您临时迁移属性。要启用该功能，请将以下依赖项添加到您的项目中：</target>
        </trans-unit>
        <trans-unit id="8a54d3429f1b14f3d91403df32d0d92ed2a9d010" translate="yes" xml:space="preserve">
          <source>When using JTA, the primary JMS &lt;code&gt;ConnectionFactory&lt;/code&gt; bean is XA-aware and participates in distributed transactions. In some situations, you might want to process certain JMS messages by using a non-XA &lt;code&gt;ConnectionFactory&lt;/code&gt;. For example, your JMS processing logic might take longer than the XA timeout.</source>
          <target state="translated">使用JTA时，主要的JMS &lt;code&gt;ConnectionFactory&lt;/code&gt; bean是XA感知的，并参与分布式事务。在某些情况下，您可能想通过使用非XA &lt;code&gt;ConnectionFactory&lt;/code&gt; 处理某些JMS消息。例如，您的JMS处理逻辑可能需要比XA超时更长的时间。</target>
        </trans-unit>
        <trans-unit id="19116fab9e23619e53bf52cf57b7e0474061a1aa" translate="yes" xml:space="preserve">
          <source>When using an embedded container, automatic registration of classes annotated with &lt;code&gt;@WebServlet&lt;/code&gt;, &lt;code&gt;@WebFilter&lt;/code&gt;, and &lt;code&gt;@WebListener&lt;/code&gt; can be enabled by using &lt;code&gt;@ServletComponentScan&lt;/code&gt;.</source>
          <target state="translated">当使用嵌入式容器，与注解的类自动登记 &lt;code&gt;@WebServlet&lt;/code&gt; ， &lt;code&gt;@WebFilter&lt;/code&gt; 和 &lt;code&gt;@WebListener&lt;/code&gt; 可通过使用启用 &lt;code&gt;@ServletComponentScan&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="900f576f8e37166d808ecf179cd5786c826b10ac" translate="yes" xml:space="preserve">
          <source>When using an embedded servlet container, you can register servlets, filters, and all the listeners (such as &lt;code&gt;HttpSessionListener&lt;/code&gt;) from the Servlet spec, either by using Spring beans or by scanning for Servlet components.</source>
          <target state="translated">使用嵌入式Servlet容器时，可以通过使用Spring Bean或扫描Servlet组件来注册Servlet规范中的Servlet，过滤器和所有侦听器（例如 &lt;code&gt;HttpSessionListener&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7daeb47e9dc9a3d23ad9b1cc067030e3c53202fe" translate="yes" xml:space="preserve">
          <source>When you add the &lt;code&gt;org.liquibase:liquibase-core&lt;/code&gt; to your classpath, database migrations run by default for both during application startup and before your tests run. This behavior can be customized by using the &lt;code&gt;spring.liquibase.enabled&lt;/code&gt; property, setting different values in the &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; configurations. It is not possible to use two different ways to initialize the database (e.g. Liquibase for application startup, JPA for test runs).</source>
          <target state="translated">当您将 &lt;code&gt;org.liquibase:liquibase-core&lt;/code&gt; 添加到类路径时，默认情况下，数据库迁移将在应用程序启动期间和测试运行之前运行。可以通过使用 &lt;code&gt;spring.liquibase.enabled&lt;/code&gt; 属性来自定义此行为，并在 &lt;code&gt;main&lt;/code&gt; 配置和 &lt;code&gt;test&lt;/code&gt; 配置中设置不同的值。不可能使用两种不同的方式来初始化数据库（例如，Liquibase用于应用程序启动，JPA用于测试运行）。</target>
        </trans-unit>
        <trans-unit id="a913f0628f28cbf7a28411a03b72ecd6451603cc" translate="yes" xml:space="preserve">
          <source>When you are ready to push your Spring Boot application to production, we have &lt;a href=&quot;production-ready-features#production-ready&quot;&gt;some tricks&lt;/a&gt; that you might like:</source>
          <target state="translated">当您准备将Spring Boot应用程序投入生产时，我们可能会喜欢&lt;a href=&quot;production-ready-features#production-ready&quot;&gt;一些技巧&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="ad5a303269af1a44ddd3382f0f358404f53d5dbb" translate="yes" xml:space="preserve">
          <source>When you are using &lt;code&gt;@SpyBean&lt;/code&gt; to spy on a bean that is proxied by Spring, you may need to remove Spring&amp;rsquo;s proxy in some situations, for example when setting expectations using &lt;code&gt;given&lt;/code&gt; or &lt;code&gt;when&lt;/code&gt;. Use &lt;code&gt;AopTestUtils.getTargetObject(yourProxiedSpy)&lt;/code&gt; to do so.</source>
          <target state="translated">当您使用 &lt;code&gt;@SpyBean&lt;/code&gt; 窥探由春代理一个bean，你可能需要使用设定的期望时，除去春节的代理在某些情况下，例如 &lt;code&gt;given&lt;/code&gt; 或 &lt;code&gt;when&lt;/code&gt; 。使用 &lt;code&gt;AopTestUtils.getTargetObject(yourProxiedSpy)&lt;/code&gt; 可以做到这一点。</target>
        </trans-unit>
        <trans-unit id="9904fce62f17ed55adaf9448ff99a1ca2daa647f" translate="yes" xml:space="preserve">
          <source>When you create a bean for &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; yourself, any customization that was applied during the creation of the auto-configured &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; is lost. For example, in case of Hibernate, any properties under the &lt;code&gt;spring.jpa.hibernate&lt;/code&gt; prefix will not be automatically applied to your &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt;. If you were relying on these properties for configuring things like the naming strategy or the DDL mode, you will need to explicitly configure that when creating the &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; bean. On the other hand, properties that get applied to the auto-configured &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt;, which are specified via &lt;code&gt;spring.jpa.properties&lt;/code&gt;, will automatically be applied, provided you use the auto-configured &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; to build the &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; bean.</source>
          <target state="translated">当您自己为 &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; 创建bean时，在自动配置的 &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; 创建期间应用的所有自定义设置都将丢失。例如，对于Hibernate， &lt;code&gt;spring.jpa.hibernate&lt;/code&gt; 前缀下的任何属性都不会自动应用于您的 &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; 。如果您依靠这些属性来配置诸如命名策略或DDL模式之类的东西，则在创建 &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; bean时将需要显式配置。另一方面，应用于自动配置的 &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; 的属性通过 &lt;code&gt;spring.jpa.properties&lt;/code&gt; 指定的，将自动应用，前提是您使用自动配置的 &lt;code&gt;EntityManagerFactoryBuilder&lt;/code&gt; 来构建 &lt;code&gt;LocalContainerEntityManagerFactoryBean&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="2a310c4918f8f24a0f03c3a7ca0044b8ea26afaa" translate="yes" xml:space="preserve">
          <source>When you create a jar containing the layers index file, the &lt;code&gt;spring-boot-jarmode-layertools&lt;/code&gt; jar will be added as a dependency to your jar. With this jar on the classpath, you can launch your application in a special mode which allows the bootstrap code to run something entirely different from your application, for example, something that extracts the layers.</source>
          <target state="translated">当您创建一个包含图层索引文件的jar时， &lt;code&gt;spring-boot-jarmode-layertools&lt;/code&gt; jar将作为依赖添加到您的jar中。将此jar放在类路径上，您可以在特殊模式下启动应用程序，该模式允许引导程序代码运行与应用程序完全不同的内容，例如，提取层的内容。</target>
        </trans-unit>
        <trans-unit id="63d5f7a87c08e923d9dbc15d922649b15e262f39" translate="yes" xml:space="preserve">
          <source>When you deploy your application to a servlet container or application server, logging performed via the Java Util Logging API is not routed into your application&amp;rsquo;s logs. This prevents logging performed by the container or other applications that have been deployed to it from appearing in your application&amp;rsquo;s logs.</source>
          <target state="translated">当您将应用程序部署到servlet容器或应用程序服务器时，通过Java Util Logging API执行的日志记录不会路由到应用程序的日志中。这样可以防止由容器或已部署到容器中的其他应用程序执行的日志记录出现在应用程序的日志中。</target>
        </trans-unit>
        <trans-unit id="364a5e3077b269c5b6ae240575bf0ac6c68ec850" translate="yes" xml:space="preserve">
          <source>When you specify multiple BOMs, they are applied in the order in which you declare them, as shown in the following example:</source>
          <target state="translated">当您指定多个BOM时,它们会按照您声明的顺序应用,如下例所示。</target>
        </trans-unit>
        <trans-unit id="1cfab9547053717472b3eacec6f45f74457c0e41" translate="yes" xml:space="preserve">
          <source>When you use one of these templating engines with the default configuration, your templates are picked up automatically from &lt;code&gt;src/main/resources/templates&lt;/code&gt;.</source>
          <target state="translated">当使用这些模板引擎之一进行默认配置时，将从 &lt;code&gt;src/main/resources/templates&lt;/code&gt; 中自动提取模板。</target>
        </trans-unit>
        <trans-unit id="ae32379b95092c4f270d708905d78eb98d5ea93f" translate="yes" xml:space="preserve">
          <source>When your application starts, any &lt;code&gt;spring.application.json&lt;/code&gt; or &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; properties will be parsed and added to the &lt;code&gt;Environment&lt;/code&gt;.</source>
          <target state="translated">当您的应用程序启动时，任何 &lt;code&gt;spring.application.json&lt;/code&gt; 或 &lt;code&gt;SPRING_APPLICATION_JSON&lt;/code&gt; 属性都将被解析并添加到 &lt;code&gt;Environment&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="33a70ecc8f90e7e761cfdafe3f49bc7ecfe977fd" translate="yes" xml:space="preserve">
          <source>When your application starts, you should see something similar to the following output:</source>
          <target state="translated">当你的应用程序启动时,你应该看到类似下面的输出。</target>
        </trans-unit>
        <trans-unit id="93b298df3ace7e05ab941cea019861266a3a05fb" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;NAME&lt;/code&gt; is the name of an ANSI escape code. See &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java&quot;&gt;&lt;code&gt;AnsiPropertySource&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">其中 &lt;code&gt;NAME&lt;/code&gt; 是ANSI转义代码的名称。有关详细信息，请参见&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v2.4.0/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java&quot;&gt; &lt;code&gt;AnsiPropertySource&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="57ceac3ec9fbb20010ded8b30904cf5382f849b2" translate="yes" xml:space="preserve">
          <source>Where the order of the filters is important they can implement &lt;code&gt;Ordered&lt;/code&gt; or be annotated with &lt;code&gt;@Order&lt;/code&gt;. Spring Boot auto-configuration may configure web filters for you. When it does so, the orders shown in the following table will be used:</source>
          <target state="translated">在过滤器的顺序很重要的地方，它们可以实现 &lt;code&gt;Ordered&lt;/code&gt; 或使用 &lt;code&gt;@Order&lt;/code&gt; 进行注释。 Spring Boot自动配置可能会为您配置Web过滤器。这样做时，将使用下表中显示的顺序：</target>
        </trans-unit>
        <trans-unit id="aa6d742809c9bfcd1d00de178ce54ca82f80578b" translate="yes" xml:space="preserve">
          <source>Whether Connection.isValid() is called when acquiring a connection from the pool.</source>
          <target state="translated">从池中获取连接时是否调用Connection.isValid()。</target>
        </trans-unit>
        <trans-unit id="1b826309b9ef25d233e546e12af04b76a35bd2f5" translate="yes" xml:space="preserve">
          <source>Whether Flyway should attempt to create the schemas specified in the schemas property.</source>
          <target state="translated">Flyway是否应该尝试创建 schemas 属性中指定的模式。</target>
        </trans-unit>
        <trans-unit id="12c45fd1c8a882527bb995ac06da6acc3c67d03a" translate="yes" xml:space="preserve">
          <source>Whether Flyway should output a table with the results of queries when executing migrations. Requires Flyway Teams.</source>
          <target state="translated">在执行迁移时,Flyway是否应该输出一个带有查询结果的表。需要Flyway团队。</target>
        </trans-unit>
        <trans-unit id="3fa6de3d1903057d2b140eff62c96c95734d596e" translate="yes" xml:space="preserve">
          <source>Whether Flyway should skip executing the contents of the migrations and only update the schema history table. Requires Flyway teams.</source>
          <target state="translated">Flyway是否应该跳过执行迁移的内容,只更新模式历史表。需要Flyway团队。</target>
        </trans-unit>
        <trans-unit id="ef3e6402a11dc007afe4ffd9d2ada7e4e52c37c3" translate="yes" xml:space="preserve">
          <source>Whether Graphite tags should be used, as opposed to a hierarchical naming convention. Enabled by default unless &quot;tagsAsPrefix&quot; is set.</source>
          <target state="translated">是否应使用 Graphite 标签,而不是分级命名惯例。除非设置了 &quot;tagsAsPrefix&quot;,否则默认为启用。</target>
        </trans-unit>
        <trans-unit id="e36841af1969cb1a064c5001bc957096e559f503" translate="yes" xml:space="preserve">
          <source>Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.</source>
          <target state="translated">调用sendRedirect生成的HTTP 1.1及以后版本的位置头是否会使用相对重定向或绝对重定向。</target>
        </trans-unit>
        <trans-unit id="859cfdf85fd8f89b412b7bf9cf53126bab2e2d8e" translate="yes" xml:space="preserve">
          <source>Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</source>
          <target state="translated">是否允许HttpServletRequest属性覆盖(隐藏)控制器生成的同名模型属性。</target>
        </trans-unit>
        <trans-unit id="28169259a5a2b63e0810b8d0e9bef42f1f39595c" translate="yes" xml:space="preserve">
          <source>Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</source>
          <target state="translated">是否允许HttpSession属性覆盖(隐藏)控制器生成的同名模型属性。</target>
        </trans-unit>
        <trans-unit id="17f9b1009a2d4f6e069d81b2fea9b1d02a41b5e2" translate="yes" xml:space="preserve">
          <source>Whether NameNotFoundException should be ignored in searches via the LdapTemplate.</source>
          <target state="translated">在通过LdapTemplate搜索时,是否应该忽略NameNotFoundException。</target>
        </trans-unit>
        <trans-unit id="864818a8a0340d9fdbc9d8905edbcf6cfff78cb1" translate="yes" xml:space="preserve">
          <source>Whether PartialResultException should be ignored in searches via the LdapTemplate.</source>
          <target state="translated">在通过LdapTemplate进行搜索时,是否应该忽略PartialResultException。</target>
        </trans-unit>
        <trans-unit id="0038aa42ce1f4d6c101ce95268bd6a5d3d213fe6" translate="yes" xml:space="preserve">
          <source>Whether SizeLimitExceededException should be ignored in searches via the LdapTemplate.</source>
          <target state="translated">在通过LdapTemplate搜索时,是否应该忽略SizeLimitExceededException。</target>
        </trans-unit>
        <trans-unit id="0f456753dae11617bb6c57b3b3effb6665cb895c" translate="yes" xml:space="preserve">
          <source>Whether TMJOIN should be used when starting XAResources.</source>
          <target state="translated">在启动XAResources时是否应该使用TMJOIN。</target>
        </trans-unit>
        <trans-unit id="2928df4f05237009ef4d6afaa6faf5849b01f95b" translate="yes" xml:space="preserve">
          <source>Whether Thymeleaf should start writing partial output as soon as possible or buffer until template processing is finished.</source>
          <target state="translated">Thymeleaf是应该尽快开始写入部分输出,还是缓冲到模板处理完成。</target>
        </trans-unit>
        <trans-unit id="a10da187489d6299a565af010b378ee28ee5b9ea" translate="yes" xml:space="preserve">
          <source>Whether Tomcat's MBean Registry should be enabled.</source>
          <target state="translated">Tomcat的MBean注册表是否应该被启用。</target>
        </trans-unit>
        <trans-unit id="28fcbfb14301b7616d9921e9146e3530fe701570" translate="yes" xml:space="preserve">
          <source>Whether a &quot;NoHandlerFoundException&quot; should be thrown if no Handler was found to process a request.</source>
          <target state="translated">如果没有找到处理程序来处理请求,是否应该抛出 &quot;NoHandlerFoundException&quot;。</target>
        </trans-unit>
        <trans-unit id="83b569885364fb8099fe537566fc9fdf427c210f" translate="yes" xml:space="preserve">
          <source>Whether a JmsPoolConnectionFactory should be created, instead of a regular ConnectionFactory.</source>
          <target state="translated">是否应该创建一个JmsPoolConnectionFactory,而不是一个普通的ConnectionFactory。</target>
        </trans-unit>
        <trans-unit id="864f2b799af68302b2016e62e2d16397cd44ad3a" translate="yes" xml:space="preserve">
          <source>Whether a VM shutdown should trigger forced shutdown of the transaction core.</source>
          <target state="translated">虚拟机关机是否应该触发事务核心的强制关机。</target>
        </trans-unit>
        <trans-unit id="c8b4085de4fdd22ac426c6ba4827b0bbc6b91a1d" translate="yes" xml:space="preserve">
          <source>Whether a request parameter (&quot;format&quot; by default) should be used to determine the requested media type.</source>
          <target state="translated">是否应该使用请求参数(默认为 &quot;格式&quot;)来确定请求的媒体类型。</target>
        </trans-unit>
        <trans-unit id="b45e06e23290d6c07d0c7b181f904cfbaf379a59" translate="yes" xml:space="preserve">
          <source>Whether adaptive topology refreshing using all available refresh triggers should be used.</source>
          <target state="translated">是否应该使用所有可用的刷新触发器进行自适应拓扑刷新。</target>
        </trans-unit>
        <trans-unit id="b091d9801755223cc178c054e3a03ee7f4f42d4a" translate="yes" xml:space="preserve">
          <source>Whether all HttpSession attributes should be added to the model prior to merging with the template.</source>
          <target state="translated">在与模板合并之前,是否应该将所有HttpSession属性添加到模型中。</target>
        </trans-unit>
        <trans-unit id="8fa15179194996d06e1146833ada28296a3685ef" translate="yes" xml:space="preserve">
          <source>Whether all request attributes should be added to the model prior to merging with the template.</source>
          <target state="translated">是否应该在与模板合并之前将所有请求属性添加到模型中。</target>
        </trans-unit>
        <trans-unit id="65facdb06081cee13236133d2066e9880d387cd6" translate="yes" xml:space="preserve">
          <source>Whether application/hal+json responses should be sent to requests that accept application/json.</source>
          <target state="translated">是否应该向接受申请/json的请求发送申请/hal+json响应。</target>
        </trans-unit>
        <trans-unit id="b043deaafbbe8bc7f4edb52961cba9a95414719f" translate="yes" xml:space="preserve">
          <source>Whether auto-configured MeterRegistry implementations should be bound to the global static registry on Metrics. For testing, set this to 'false' to maximize test independence.</source>
          <target state="translated">自动配置的MeterRegistry实现是否应该绑定到Metrics的全局静态注册表。对于测试而言,将其设置为 &quot;false&quot;,以最大限度地提高测试的独立性。</target>
        </trans-unit>
        <trans-unit id="3fa3ed77ffc8dea03f49a153dc1aa569ef258a35" translate="yes" xml:space="preserve">
          <source>Whether bean definition overriding, by registering a definition with the same name as an existing definition, is allowed.</source>
          <target state="translated">是否允许bean定义覆盖,通过注册一个与现有定义同名的定义。</target>
        </trans-unit>
        <trans-unit id="eea764bab35f37b82a9b736b929a7a7b556333f7" translate="yes" xml:space="preserve">
          <source>Whether configured jobs should overwrite existing job definitions.</source>
          <target state="translated">配置的作业是否应该覆盖现有的作业定义。</target>
        </trans-unit>
        <trans-unit id="78ff1ddb35b202fd0d219b21ef772bd58b1eade3" translate="yes" xml:space="preserve">
          <source>Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.</source>
          <target state="translated">ACCESSIBLE状态下的连接是否可以在事务的上下文中共享。</target>
        </trans-unit>
        <trans-unit id="d963e504d2818a32c6f1cd2593a93c07bb4158f5" translate="yes" xml:space="preserve">
          <source>Whether connections should be tested when acquired from the pool.</source>
          <target state="translated">当从池中获取连接时,是否应该进行测试。</target>
        </trans-unit>
        <trans-unit id="5fd8ccdf81071ce3acc62c7bfec42b2bf5bb9cf8" translate="yes" xml:space="preserve">
          <source>Whether core threads are allowed to time out. This enables dynamic growing and shrinking of the pool.</source>
          <target state="translated">是否允许核心线程超时。这样可以实现池的动态增长和收缩。</target>
        </trans-unit>
        <trans-unit id="5dfdf411e58e272e6c46568bdcf9bea70ef54e44" translate="yes" xml:space="preserve">
          <source>Whether credentials are supported. When not set, credentials are not supported.</source>
          <target state="translated">是否支持凭证。未设置时,不支持凭证。</target>
        </trans-unit>
        <trans-unit id="3f4aa9b7cd97e52c599c08a95bfbbd709f2d1306" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to Ganglia is enabled.</source>
          <target state="translated">是否启用导出指标到Ganglia。</target>
        </trans-unit>
        <trans-unit id="09ed2e7bb45e1c8160f8143534d193835df767e1" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to Graphite is enabled.</source>
          <target state="translated">是否启用了将指标导出到 Graphite 的功能。</target>
        </trans-unit>
        <trans-unit id="8bfa0563e916b415ce3d219408212fb2dd8abd28" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to JMX is enabled.</source>
          <target state="translated">是否启用将指标导出到JMX。</target>
        </trans-unit>
        <trans-unit id="8e71466838aaeefca39fe951f090279a44ecc07c" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to Prometheus is enabled.</source>
          <target state="translated">是否启用向Prometheus导出指标。</target>
        </trans-unit>
        <trans-unit id="07b3669db6e708415a89f90135925c9c598dced5" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to StatsD is enabled.</source>
          <target state="translated">是否启用导出指标到StatsD。</target>
        </trans-unit>
        <trans-unit id="31b449be60672cbad28e93391839da6748080117" translate="yes" xml:space="preserve">
          <source>Whether exporting of metrics to this backend is enabled.</source>
          <target state="translated">是否启用向该后台导出指标。</target>
        </trans-unit>
        <trans-unit id="5889f5a601f7bf6c67a21d87ea7e4d90637ee2b0" translate="yes" xml:space="preserve">
          <source>Whether hidden form inputs acting as markers for checkboxes should be rendered before the checkbox element itself.</source>
          <target state="translated">作为复选框标记的隐藏表单输入是否应该在复选框元素之前呈现。</target>
        </trans-unit>
        <trans-unit id="728c1c45f2713ee897adaa57111e405c61504e50" translate="yes" xml:space="preserve">
          <source>Whether hostname verification is required.</source>
          <target state="translated">是否需要验证主机名。</target>
        </trans-unit>
        <trans-unit id="b01dd6b955a205aeb7287eb768a463240e6410d8" translate="yes" xml:space="preserve">
          <source>Whether images should be inverted for dark terminal themes.</source>
          <target state="translated">暗终端主题的图片是否应该倒置。</target>
        </trans-unit>
        <trans-unit id="ebf8824e22e47b0299766725aa2c9033eb471c91" translate="yes" xml:space="preserve">
          <source>Whether initialization should be performed lazily.</source>
          <target state="translated">是否应该懒惰地进行初始化。</target>
        </trans-unit>
        <trans-unit id="6247eeb82d8b665986aecffc2f5ec83adbfbe28b" translate="yes" xml:space="preserve">
          <source>Whether local transactions are desired.</source>
          <target state="translated">是否需要本地交易。</target>
        </trans-unit>
        <trans-unit id="f238273c3eb375feeef8a32811b7ac5cea41fb1d" translate="yes" xml:space="preserve">
          <source>Whether logging of (potentially sensitive) request details at DEBUG and TRACE level is allowed.</source>
          <target state="translated">是否允许在DEBUG和TRACE级别记录(潜在的敏感)请求细节。</target>
        </trans-unit>
        <trans-unit id="167e459cb1743f67cf62f55af8f2866e91a64ced" translate="yes" xml:space="preserve">
          <source>Whether logging of the request will only be enabled if &quot;ServletRequest.getAttribute(conditionIf)&quot; does not yield null.</source>
          <target state="translated">是否只有在 &quot;ServletRequest.getAttribute(conditionIf)&quot;没有产生null时,才会启用请求的日志记录。</target>
        </trans-unit>
        <trans-unit id="c98c6e431699604c27fa9a4c98177eea6864d2be" translate="yes" xml:space="preserve">
          <source>Whether logging of the request will only be enabled if &quot;ServletRequest.getAttribute(conditionUnless)&quot; yield null.</source>
          <target state="translated">是否只有在 &quot;ServletRequest.getAttribute(conditionUnless)&quot;产生null时,才会启用请求的日志记录。</target>
        </trans-unit>
        <trans-unit id="74265d90e543a40a869de9f966af437ee77def59" translate="yes" xml:space="preserve">
          <source>Whether meter IDs starting with the specified name should be enabled. The longest match wins, the key `all` can also be used to configure all meters.</source>
          <target state="translated">是否应该启用以指定名称开头的仪表ID。匹配时间最长的获胜,键 &quot;all &quot;也可用于配置所有仪表。</target>
        </trans-unit>
        <trans-unit id="26ff7a93bbdd2d79cc6a7a7cb47176918efef20e" translate="yes" xml:space="preserve">
          <source>Whether meter IDs starting with the specified name should publish percentile histograms. For monitoring systems that support aggregable percentile calculation based on a histogram, this can be set to true. For other systems, this has no effect. The longest match wins, the key `all` can also be used to configure all meters.</source>
          <target state="translated">以指定名称开头的仪表ID是否应该发布百分位直方图。对于支持基于直方图的可汇总百分位数计算的监控系统,可以将其设置为 &quot;true&quot;。对于其他系统,这没有影响。匹配时间最长者胜出,键`all`也可用于配置所有仪表。</target>
        </trans-unit>
        <trans-unit id="6dddd6b57dfa0229e906ad8843ab796fe28adfb7" translate="yes" xml:space="preserve">
          <source>Whether or not to auto-start the streams factory bean.</source>
          <target state="translated">是否自动启动流工厂豆。</target>
        </trans-unit>
        <trans-unit id="822dc307014eeb60f223a1f773c63b6ccf530f6a" translate="yes" xml:space="preserve">
          <source>Whether percentile histograms should be published.</source>
          <target state="translated">是否应该公布百分位直方图。</target>
        </trans-unit>
        <trans-unit id="cf14485e27183f846c7d41951b508961695c8cfb" translate="yes" xml:space="preserve">
          <source>Whether pooling is enabled. Enabled automatically if &quot;r2dbc-pool&quot; is on the classpath.</source>
          <target state="translated">是否启用了池化功能,如果 &quot;r2dbc-pool &quot;在classpath上,则自动启用。如果 &quot;r2dbc-pool &quot;在classpath上,则自动启用。</target>
        </trans-unit>
        <trans-unit id="3343244f8cf275be4e5e75142acb4287bd947604" translate="yes" xml:space="preserve">
          <source>Whether producers and consumers should be cached.</source>
          <target state="translated">生产者和消费者是否应该缓存。</target>
        </trans-unit>
        <trans-unit id="5c27b48dbe70a43297f20af82cc5a02f7a049bc6" translate="yes" xml:space="preserve">
          <source>Whether publishing retries are enabled.</source>
          <target state="translated">是否启用发布重试。</target>
        </trans-unit>
        <trans-unit id="2f7ecc2ca57a38cc926fbcf448bd9de197ddcb49" translate="yes" xml:space="preserve">
          <source>Whether read-only operations should use an anonymous environment. Disabled by default unless a username is set.</source>
          <target state="translated">是否只读操作应使用匿名环境。除非设置了用户名,否则默认为禁用。</target>
        </trans-unit>
        <trans-unit id="591e47dbeef3504f1918575fdb73e489aa705ed0" translate="yes" xml:space="preserve">
          <source>Whether recovery failures should be ignored.</source>
          <target state="translated">是否应该忽略恢复故障。</target>
        </trans-unit>
        <trans-unit id="6b50ae54db3e2c639d72cb5d6972197c27942240" translate="yes" xml:space="preserve">
          <source>Whether rejected deliveries are re-queued by default.</source>
          <target state="translated">被拒绝的交付是否会被默认重新排队。</target>
        </trans-unit>
        <trans-unit id="7f13328faf882b5c9926a913bbcea725caa01a8c" translate="yes" xml:space="preserve">
          <source>Whether requests to the context root should be redirected by appending a / to the path. When using SSL terminated at a proxy, this property should be set to false.</source>
          <target state="translated">对上下文根的请求是否应该通过在路径上附加一个/来重定向。当使用在代理处终止的SSL时,此属性应设置为false。</target>
        </trans-unit>
        <trans-unit id="e92cbb8c81a8811ace3e8a2135470c09c602a45b" translate="yes" xml:space="preserve">
          <source>Whether resources should be enlisted and delisted automatically.</source>
          <target state="translated">资源是否应该自动入列和除名。</target>
        </trans-unit>
        <trans-unit id="ca852488f9e354cde0f6b84a80738cf5757da4f2" translate="yes" xml:space="preserve">
          <source>Whether response compression is enabled.</source>
          <target state="translated">是否启用响应压缩。</target>
        </trans-unit>
        <trans-unit id="df4b1d6d01ea59f89f9d92a78d6516e59f110a60" translate="yes" xml:space="preserve">
          <source>Whether retries are stateless or stateful.</source>
          <target state="translated">重试是无状态还是有状态。</target>
        </trans-unit>
        <trans-unit id="854e7144e1601e350950b3accd57fbf244da8fd5" translate="yes" xml:space="preserve">
          <source>Whether rollback should be tested before update is performed.</source>
          <target state="translated">更新前是否要进行回滚测试。</target>
        </trans-unit>
        <trans-unit id="ff04f9b0f0cb105d107802505d79a4e33e3eb634" translate="yes" xml:space="preserve">
          <source>Whether servlet filters should be initialized on startup.</source>
          <target state="translated">是否应该在启动时初始化servlet过滤器。</target>
        </trans-unit>
        <trans-unit id="affd835303abdb41783c1d90c585719532299ba7" translate="yes" xml:space="preserve">
          <source>Whether static resource caching is permitted for this web application.</source>
          <target state="translated">是否允许该Web应用程序进行静态资源缓存。</target>
        </trans-unit>
        <trans-unit id="1b86fb645d206dc82447a2a2d9b1be81f4d7f5c2" translate="yes" xml:space="preserve">
          <source>Whether sub-transactions should be joined when possible.</source>
          <target state="translated">在可能的情况下,是否应该加入子交易。</target>
        </trans-unit>
        <trans-unit id="e7268607b4de57738f48cefb2383f41a64bd3529" translate="yes" xml:space="preserve">
          <source>Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).</source>
          <target state="translated">是否要创建基于子类的(CGLIB)代理(true),而不是基于标准Java接口的代理(false)。</target>
        </trans-unit>
        <trans-unit id="b79bac485111aa56626437cf1d7234b19615f7b2" translate="yes" xml:space="preserve">
          <source>Whether the 'Connection: keep-alive' header should be added to all responses, even if not required by the HTTP specification.</source>
          <target state="translated">Connection:keep-alive &quot;头是否应该被添加到所有的响应中,即使HTTP规范没有要求。</target>
        </trans-unit>
        <trans-unit id="5986f0fb799897acf7f0accbc5f735b5d88aeadd" translate="yes" xml:space="preserve">
          <source>Whether the &lt;code&gt;start-stop-daemon&lt;/code&gt; command, when it&amp;rsquo;s available, should be used to control the process</source>
          <target state="translated">无论是 &lt;code&gt;start-stop-daemon&lt;/code&gt; 命令，当它可用，应采用控制过程</target>
        </trans-unit>
        <trans-unit id="3d669066b9e19e6647b2867b9273bff65d285af4" translate="yes" xml:space="preserve">
          <source>Whether the &lt;code&gt;start-stop-daemon&lt;/code&gt; command, when it&amp;rsquo;s available, should be used to control the process. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">是否可以使用 &lt;code&gt;start-stop-daemon&lt;/code&gt; 命令来控制该过程。默认为 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c63600d449caad2e788349fa13ed4fc8e26cd95f" translate="yes" xml:space="preserve">
          <source>Whether the JSP servlet is registered.</source>
          <target state="translated">是否注册了JSP servlet。</target>
        </trans-unit>
        <trans-unit id="a1a50537fecaa5244ff46698ab59dd5e8774b497" translate="yes" xml:space="preserve">
          <source>Whether the Reactor Debug Agent should be enabled when reactor-tools is present.</source>
          <target state="translated">反应堆调试代理是否应该在反应堆工具存在时启用。</target>
        </trans-unit>
        <trans-unit id="5abbf67dc685a2da599ba02d1fa35921d73bbddc" translate="yes" xml:space="preserve">
          <source>Whether the URL should be decoded. When disabled, percent-encoded characters in the URL will be left as-is.</source>
          <target state="translated">URL是否应该被解码。当禁用时,URL中的百分比编码字符将保持原样。</target>
        </trans-unit>
        <trans-unit id="6cc31e35f3df69adb7fc0a1340bd9bb9c852278a" translate="yes" xml:space="preserve">
          <source>Whether the application should have a shutdown hook registered.</source>
          <target state="translated">应用程序是否应该注册一个关机钩。</target>
        </trans-unit>
        <trans-unit id="88d0a225afec78ca95073adbbe8a0a29a7c8cf22" translate="yes" xml:space="preserve">
          <source>Whether the client should use SSL to connect to the endpoints.</source>
          <target state="translated">客户端是否应该使用SSL连接到端点。</target>
        </trans-unit>
        <trans-unit id="e9cc2a3114d96562e10a70b73936553b334041af" translate="yes" xml:space="preserve">
          <source>Whether the consumer's offset is periodically committed in the background.</source>
          <target state="translated">消费者的抵偿是否定期在后台承诺。</target>
        </trans-unit>
        <trans-unit id="d8b2c7eb25fa97f968d65a63e25fb9f3e5d2ec46" translate="yes" xml:space="preserve">
          <source>Whether the container creates a batch of messages based on the 'receive-timeout' and 'batch-size'. Coerces 'de-batching-enabled' to true to include the contents of a producer created batch in the batch as discrete records.</source>
          <target state="translated">容器是否根据'receive-timeout'和'batch-size'创建一批消息。将'de-batching-enabled'强制为真,以便将生产者创建的批处理的内容作为离散记录包含在批处理中。</target>
        </trans-unit>
        <trans-unit id="063a8505796f17babf79ef0289d11bc535d43a7c" translate="yes" xml:space="preserve">
          <source>Whether the container should fail to start if at least one of the configured topics are not present on the broker.</source>
          <target state="translated">如果至少一个配置的主题不存在于broker上,容器是否应该无法启动。</target>
        </trans-unit>
        <trans-unit id="bfb9327d7644f744b86e2f688ed34643374207de" translate="yes" xml:space="preserve">
          <source>Whether the container should present batched messages as discrete messages or call the listener with the batch.</source>
          <target state="translated">容器是应该将批处理的消息作为离散的消息呈现,还是将批处理的消息调用给监听器。</target>
        </trans-unit>
        <trans-unit id="6088cd47ee1d0661cda80242485f7d3a10864143" translate="yes" xml:space="preserve">
          <source>Whether the content of the &quot;default&quot; model should be ignored during redirect scenarios.</source>
          <target state="translated">在重定向场景中是否应该忽略 &quot;默认 &quot;模型的内容。</target>
        </trans-unit>
        <trans-unit id="da09e3fe4cdf37a8e77adc02f6681db4585bcaec" translate="yes" xml:space="preserve">
          <source>Whether the database can run many transactions on the same connection and supports transaction interleaving.</source>
          <target state="translated">数据库是否可以在同一连接上运行多个事务,是否支持事务交错。</target>
        </trans-unit>
        <trans-unit id="a462b7f12b28eecbfb0402c1e98ea3fe33eab43b" translate="yes" xml:space="preserve">
          <source>Whether the default broker URL should be in memory. Ignored if an explicit broker has been specified.</source>
          <target state="translated">默认的broker URL是否应该在内存中。如果已经指定了显式经纪商,则忽略。</target>
        </trans-unit>
        <trans-unit id="1daf30b22a96ff9718f70a10b6b1b405b9c126aa" translate="yes" xml:space="preserve">
          <source>Whether the default destination type is topic.</source>
          <target state="translated">默认的目标类型是否为主题。</target>
        </trans-unit>
        <trans-unit id="28ca417fdb81c6e436c3def578eca7ce08c37da8" translate="yes" xml:space="preserve">
          <source>Whether the driver should use encrypted traffic.</source>
          <target state="translated">司机是否应该使用加密流量。</target>
        </trans-unit>
        <trans-unit id="58bd1157d4037c3869a0cb7adbe8f507b98d8570" translate="yes" xml:space="preserve">
          <source>Whether the executor should wait for scheduled tasks to complete on shutdown.</source>
          <target state="translated">执行者是否应该在关机时等待预定任务完成。</target>
        </trans-unit>
        <trans-unit id="2016c2d11b80c1093e5ea3b53246a09c0ce57e91" translate="yes" xml:space="preserve">
          <source>Whether the provider can run many transactions on the same connection and supports transaction interleaving.</source>
          <target state="translated">提供商是否可以在同一连接上运行许多事务,并支持事务交错。</target>
        </trans-unit>
        <trans-unit id="2ac4150b461868087a90d3bc177835fdf281034c" translate="yes" xml:space="preserve">
          <source>Whether the server should decode percent encoded slash characters. Enabling encoded slashes can have security implications due to different servers interpreting the slash differently. Only enable this if you have a legacy application that requires it.</source>
          <target state="translated">服务器是否应该对百分比编码的斜线字符进行解码。由于不同的服务器对斜线的解释不同,启用编码的斜线可能会产生安全影响。只有当您的遗留应用程序需要时才启用此功能。</target>
        </trans-unit>
        <trans-unit id="e3c8d10eb2f6a8bb9628a3de10bfd7fe08410970" translate="yes" xml:space="preserve">
          <source>Whether the trailing slash should be ignored when recording metrics.</source>
          <target state="translated">记录指标时,是否应该忽略尾部的斜杠。</target>
        </trans-unit>
        <trans-unit id="b7a543821141c21165c321edb9943c4325e87ad2" translate="yes" xml:space="preserve">
          <source>Whether the transaction manager should allow mixing XA and non-XA transactions.</source>
          <target state="translated">交易管理人是否应允许混合XA和非XA交易;</target>
        </trans-unit>
        <trans-unit id="bf84fcdbec83af0d19a5300cc9684280795da782" translate="yes" xml:space="preserve">
          <source>Whether the transaction timeout should be set on the XAResource when it is enlisted.</source>
          <target state="translated">在XAResource入库时,是否要对其设置交易超时。</target>
        </trans-unit>
        <trans-unit id="bfb1b9d465f880db908d2169fd38566fc0639307" translate="yes" xml:space="preserve">
          <source>Whether this resource is disabled, meaning it's temporarily forbidden to acquire a connection from its pool.</source>
          <target state="translated">该资源是否被禁用,即暂时禁止从其池中获取连接。</target>
        </trans-unit>
        <trans-unit id="ced698b777da39a9e1435844fe16b57091c90991" translate="yes" xml:space="preserve">
          <source>Whether to allocate buffers outside the Java heap. The default is derived from the maximum amount of memory that is available to the JVM.</source>
          <target state="translated">是否在Java堆外分配缓冲区。默认值来自于JVM可用的最大内存量。</target>
        </trans-unit>
        <trans-unit id="8f668b60af02e8a037549f88be1bf3827999b8a3" translate="yes" xml:space="preserve">
          <source>Whether to allow migrations to be run out of order.</source>
          <target state="translated">是否允许迁移运行不正常。</target>
        </trans-unit>
        <trans-unit id="26dfd1d957cee3d4cf1a855c943dc44d836ba3e2" translate="yes" xml:space="preserve">
          <source>Whether to allow mixing transactional and non-transactional statements within the same migration.</source>
          <target state="translated">是否允许在同一迁移中混合事务性和非事务性语句。</target>
        </trans-unit>
        <trans-unit id="6e48f5165cb6892cd369b9a185e76abefea8ed2d" translate="yes" xml:space="preserve">
          <source>Whether to always apply the MessageFormat rules, parsing even messages without arguments.</source>
          <target state="translated">是否总是应用MessageFormat规则,甚至解析没有参数的消息。</target>
        </trans-unit>
        <trans-unit id="69d84e8529bb755f9606e21cc033622178de5de1" translate="yes" xml:space="preserve">
          <source>Whether to always mark the session cookie as secure.</source>
          <target state="translated">是否总是将会话cookie标记为安全。</target>
        </trans-unit>
        <trans-unit id="06ce550b2a1f9f20c0dd8878a6109fbbc66b30d7" translate="yes" xml:space="preserve">
          <source>Whether to automatically call baseline when migrating a non-empty schema.</source>
          <target state="translated">迁移非空模式时是否自动调用基线。</target>
        </trans-unit>
        <trans-unit id="776f094b7a42775aa6039b34d87381450edfd420" translate="yes" xml:space="preserve">
          <source>Whether to automatically call clean when a validation error occurs.</source>
          <target state="translated">当发生验证错误时,是否自动调用clean。</target>
        </trans-unit>
        <trans-unit id="e8ce6ca0c611bca575eeae0b3bea5378444e7520" translate="yes" xml:space="preserve">
          <source>Whether to automatically call validate when performing a migration.</source>
          <target state="translated">在进行迁移时是否自动调用验证。</target>
        </trans-unit>
        <trans-unit id="de2d39bc1b6df7a04e3f79708dd0b83101ae8c7d" translate="yes" xml:space="preserve">
          <source>Whether to automatically start the scheduler after initialization.</source>
          <target state="translated">是否在初始化后自动启动调度器。</target>
        </trans-unit>
        <trans-unit id="a0acad5b6393f60ec365ad0bb70acd58e8ccba18" translate="yes" xml:space="preserve">
          <source>Whether to automatically time web client requests.</source>
          <target state="translated">是否自动为Web客户端请求计时。</target>
        </trans-unit>
        <trans-unit id="b5913e92088b28722a6f38cc6436d7d7424b03ef" translate="yes" xml:space="preserve">
          <source>Whether to automatically time web server requests.</source>
          <target state="translated">是否自动为Web服务器请求计时。</target>
        </trans-unit>
        <trans-unit id="17e3835fa4c550958380411f591966d3d60e3b53" translate="yes" xml:space="preserve">
          <source>Whether to batch SQL statements when executing them. Requires Flyway Teams.</source>
          <target state="translated">执行SQL语句时,是否要批处理。需要Flyway Teams。</target>
        </trans-unit>
        <trans-unit id="72c6fcbf71fb223211ee90d8f7da733078454467" translate="yes" xml:space="preserve">
          <source>Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.</source>
          <target state="translated">是否要对不符合RFC 4627的JSON进行宽松的解析。</target>
        </trans-unit>
        <trans-unit id="f7c4eee8375a82ba402b37527b8d7062f7b4691a" translate="yes" xml:space="preserve">
          <source>Whether to block when a connection is requested and the pool is full. Set it to false to throw a &quot;JMSException&quot; instead.</source>
          <target state="translated">当请求连接且池已满时,是否要阻止。设置为false,则会抛出一个 &quot;JMSException&quot;。</target>
        </trans-unit>
        <trans-unit id="ca0f7ba29d35eca2ffc1f78029d078ae6c9f4dfc" translate="yes" xml:space="preserve">
          <source>Whether to buffer output such that it is flushed only periodically.</source>
          <target state="translated">是否对输出进行缓冲,使其只定期刷新。</target>
        </trans-unit>
        <trans-unit id="d07c2a2b6a7ccd0397def360da0496c388785922" translate="yes" xml:space="preserve">
          <source>Whether to cache message consumers.</source>
          <target state="translated">是否缓存消息消费者。</target>
        </trans-unit>
        <trans-unit id="064cffda2d0205b9a675a03e44b82fdfb49d8d81" translate="yes" xml:space="preserve">
          <source>Whether to cache message producers.</source>
          <target state="translated">是否缓存消息生产者。</target>
        </trans-unit>
        <trans-unit id="2e43b03bd401bb5fd4c4094acce1a54480951097" translate="yes" xml:space="preserve">
          <source>Whether to cache sessions.</source>
          <target state="translated">是否要缓存会话。</target>
        </trans-unit>
        <trans-unit id="70ddd6e341bf74000b7ffde54533ea4ccac9b206" translate="yes" xml:space="preserve">
          <source>Whether to check for log file existence so it can be recreated it if an external process has renamed it.</source>
          <target state="translated">是否要检查日志文件是否存在,以便在外部进程重新命名时可以重新创建。</target>
        </trans-unit>
        <trans-unit id="6de7d818a142a96a3c1ba84768c1df26ce14c5dc" translate="yes" xml:space="preserve">
          <source>Whether to check that migration scripts location exists.</source>
          <target state="translated">是否检查迁移脚本的位置是否存在。</target>
        </trans-unit>
        <trans-unit id="a7076b91dd2eda612d27759d0454d30c8234a002" translate="yes" xml:space="preserve">
          <source>Whether to check that the template exists before rendering it.</source>
          <target state="translated">是否在渲染前检查模板是否存在。</target>
        </trans-unit>
        <trans-unit id="b09f98d6577e0532c4d0a04ddd301aedbd2c4181" translate="yes" xml:space="preserve">
          <source>Whether to check that the templates location exists.</source>
          <target state="translated">是否检查模板位置是否存在。</target>
        </trans-unit>
        <trans-unit id="3240b3ca327077f198e5c2bb5f1a728fab7ac1bb" translate="yes" xml:space="preserve">
          <source>Whether to clean the archive log files on startup.</source>
          <target state="translated">是否在启动时清理存档日志文件。</target>
        </trans-unit>
        <trans-unit id="e20c03aa7313c876ec6e05ef1bd310d8fb324e60" translate="yes" xml:space="preserve">
          <source>Whether to clear all checksums in the current changelog, so they will be recalculated upon the next update.</source>
          <target state="translated">是否清除当前变更日志中的所有校验和,以便在下次更新时重新计算。</target>
        </trans-unit>
        <trans-unit id="3da5f3879cf8f917fc84dd2651a19c338d9b0c34" translate="yes" xml:space="preserve">
          <source>Whether to create an AmqpAdmin bean.</source>
          <target state="translated">是否创建AmqpAdmin bean。</target>
        </trans-unit>
        <trans-unit id="575799cef965480fe14f016c6f018ea921ef6dd0" translate="yes" xml:space="preserve">
          <source>Whether to create the Influx database if it does not exist before attempting to publish metrics to it.</source>
          <target state="translated">如果Influx数据库不存在,在尝试向其发布指标之前,是否要创建该数据库。</target>
        </trans-unit>
        <trans-unit id="08a02c446de78acf585d7325f10108b1b8565363" translate="yes" xml:space="preserve">
          <source>Whether to create the index automatically if it does not exist.</source>
          <target state="translated">如果索引不存在,是否自动创建索引。</target>
        </trans-unit>
        <trans-unit id="b04dcdd891e2ccec8d3c233bb097b5c075e38cfb" translate="yes" xml:space="preserve">
          <source>Whether to defer inclusion of the date stamp in the file name until rotate time.</source>
          <target state="translated">是否将文件名中的日期戳推迟到轮换时间。</target>
        </trans-unit>
        <trans-unit id="b0d60221b35120eaf226407943723aaeadc52108" translate="yes" xml:space="preserve">
          <source>Whether to deny meters from emitting any metrics.</source>
          <target state="translated">是否拒绝电表排放任何指标。</target>
        </trans-unit>
        <trans-unit id="0523ec20da1cb7d8ef87fc3e6dcfc0f80f2370cf" translate="yes" xml:space="preserve">
          <source>Whether to disable cleaning of the database.</source>
          <target state="translated">是否禁止清理数据库。</target>
        </trans-unit>
        <trans-unit id="0fa86a1fa6bb56078f075d118a2366e95d204760" translate="yes" xml:space="preserve">
          <source>Whether to disable the escaping of HTML characters such as '&amp;lt;', '&amp;gt;', etc.</source>
          <target state="translated">是否禁用转义HTML字符（例如'&amp;lt;'，'&amp;gt;'等）。</target>
        </trans-unit>
        <trans-unit id="1ab28b63bf97e1a59ccb3f6dd830a7274603c311" translate="yes" xml:space="preserve">
          <source>Whether to discover and query all cluster nodes for obtaining the cluster topology. When set to false, only the initial seed nodes are used as sources for topology discovery.</source>
          <target state="translated">是否发现并查询所有集群节点以获取集群拓扑。当设置为false时,只将初始种子节点作为拓扑发现的来源。</target>
        </trans-unit>
        <trans-unit id="56716408ee02874657ddd15b31ab23e573c43eb0" translate="yes" xml:space="preserve">
          <source>Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.</source>
          <target state="translated">是否向FrameworkServlet doService方法派遣OPTIONS请求。</target>
        </trans-unit>
        <trans-unit id="2f45f744af7b14b2d1e548d401258374044e9bb7" translate="yes" xml:space="preserve">
          <source>Whether to dispatch TRACE requests to the FrameworkServlet doService method.</source>
          <target state="translated">是否向FrameworkServlet doService方法发送TRACE请求。</target>
        </trans-unit>
        <trans-unit id="3a6f09830dc2d85af886a5ae246c3e7f064fb95c" translate="yes" xml:space="preserve">
          <source>Whether to enable Cassandra health check.</source>
          <target state="translated">是否启用Cassandra健康检查。</target>
        </trans-unit>
        <trans-unit id="f999eea52abd9684db21ccabd25864ce4dd2e4e8" translate="yes" xml:space="preserve">
          <source>Whether to enable Couchbase health check.</source>
          <target state="translated">是否启用Couchbase健康检查。</target>
        </trans-unit>
        <trans-unit id="992d14be64b746fd4a38f7e86d06e494c19bc236" translate="yes" xml:space="preserve">
          <source>Whether to enable Elasticsearch health check.</source>
          <target state="translated">是否启用Elasticsearch健康检查。</target>
        </trans-unit>
        <trans-unit id="cd12df09f8847728360870b90af1800ea0434462" translate="yes" xml:space="preserve">
          <source>Whether to enable Elasticsearch repositories.</source>
          <target state="translated">是否启用Elasticsearch仓库。</target>
        </trans-unit>
        <trans-unit id="ff98d1e883840c027910b5bb2f2a4edcdb2d2fc3" translate="yes" xml:space="preserve">
          <source>Whether to enable GZIP compression of metrics batches published to Influx.</source>
          <target state="translated">是否启用GZIP压缩发布到Influx的指标批次。</target>
        </trans-unit>
        <trans-unit id="39cbd267c5a20dcf34a87f47bb35c58f5c2e33f4" translate="yes" xml:space="preserve">
          <source>Whether to enable HTTP request-response tracing.</source>
          <target state="translated">是否启用HTTP请求-响应跟踪。</target>
        </trans-unit>
        <trans-unit id="f815bb5d2f6edb041431384a61f007463713e876" translate="yes" xml:space="preserve">
          <source>Whether to enable HTTP/2 support, if the current environment supports it.</source>
          <target state="translated">是否启用HTTP/2支持,如果当前环境支持。</target>
        </trans-unit>
        <trans-unit id="a363bd4841f63fda607941c1d4f860541c167391" translate="yes" xml:space="preserve">
          <source>Whether to enable InfluxDB health check.</source>
          <target state="translated">是否启用InfluxDB健康检查。</target>
        </trans-unit>
        <trans-unit id="3ee55e70ff08f28589c1988438e17101b1220587" translate="yes" xml:space="preserve">
          <source>Whether to enable JAAS configuration.</source>
          <target state="translated">是否启用JAAS配置。</target>
        </trans-unit>
        <trans-unit id="7786b2b057b3ae646c61640bd1ed7b645e2d1883" translate="yes" xml:space="preserve">
          <source>Whether to enable JDBC repositories.</source>
          <target state="translated">是否启用JDBC资源库。</target>
        </trans-unit>
        <trans-unit id="b393797c0dea4a236305b28a9ea5cb6830bbb28b" translate="yes" xml:space="preserve">
          <source>Whether to enable JMS health check.</source>
          <target state="translated">是否启用JMS健康检查。</target>
        </trans-unit>
        <trans-unit id="d4bead9c30463a755b01c8adb2e067cffdf477e7" translate="yes" xml:space="preserve">
          <source>Whether to enable JPA repositories.</source>
          <target state="translated">是否启用JPA存储库。</target>
        </trans-unit>
        <trans-unit id="6214d3814963c3bb44f5abb4acd10e19302b333f" translate="yes" xml:space="preserve">
          <source>Whether to enable JTA support.</source>
          <target state="translated">是否启用JTA支持。</target>
        </trans-unit>
        <trans-unit id="51c0f20697cf0d4d81529ba41cb005f05a8ceec5" translate="yes" xml:space="preserve">
          <source>Whether to enable LDAP health check.</source>
          <target state="translated">是否启用LDAP健康检查。</target>
        </trans-unit>
        <trans-unit id="f45f260e25dad68f1826c6e86ce8dec792ee72d1" translate="yes" xml:space="preserve">
          <source>Whether to enable LDAP repositories.</source>
          <target state="translated">是否启用LDAP存储库。</target>
        </trans-unit>
        <trans-unit id="620dfaa4e222232a9750f61319e24a5c052bd256" translate="yes" xml:space="preserve">
          <source>Whether to enable LDAP schema validation.</source>
          <target state="translated">是否启用LDAP模式验证。</target>
        </trans-unit>
        <trans-unit id="b6cc48a1b2d0e6318b6399c7eecaf02bd3420266" translate="yes" xml:space="preserve">
          <source>Whether to enable Liquibase support.</source>
          <target state="translated">是否启用Liquibase支持。</target>
        </trans-unit>
        <trans-unit id="0c25c9485b5937731dbdd59acabebe26e2f676a0" translate="yes" xml:space="preserve">
          <source>Whether to enable MVC view resolution for this technology.</source>
          <target state="translated">是否启用本技术的MVC视图解析。</target>
        </trans-unit>
        <trans-unit id="cf5f0e359f801d9918916eab665cf8db31b3bbbe" translate="yes" xml:space="preserve">
          <source>Whether to enable Mail health check.</source>
          <target state="translated">是否启用邮件健康检查。</target>
        </trans-unit>
        <trans-unit id="518b2b801502234d8dc7e32653e484b6fe2f9106" translate="yes" xml:space="preserve">
          <source>Whether to enable MongoDB health check.</source>
          <target state="translated">是否启用MongoDB健康检查。</target>
        </trans-unit>
        <trans-unit id="7357209b98d6782fc50cab424a539c935df3e33a" translate="yes" xml:space="preserve">
          <source>Whether to enable Neo4j health check.</source>
          <target state="translated">是否启用Neo4j健康检查。</target>
        </trans-unit>
        <trans-unit id="c115444d85ba90837693f28b542f71047d61e62f" translate="yes" xml:space="preserve">
          <source>Whether to enable R2DBC repositories.</source>
          <target state="translated">是否启用R2DBC资源库。</target>
        </trans-unit>
        <trans-unit id="9a27479e8331f6c265e86f7ab4f0dd0e76b34998" translate="yes" xml:space="preserve">
          <source>Whether to enable RabbitMQ health check.</source>
          <target state="translated">是否启用RabbitMQ健康检查。</target>
        </trans-unit>
        <trans-unit id="d417ed2796deab8a36ff1bb012e5fb9d4d6f2e94" translate="yes" xml:space="preserve">
          <source>Whether to enable Redis health check.</source>
          <target state="translated">是否启用Redis健康检查。</target>
        </trans-unit>
        <trans-unit id="aa9827d0bb40ab24534c7da75b6db17e30a59a80" translate="yes" xml:space="preserve">
          <source>Whether to enable Redis repositories.</source>
          <target state="translated">是否启用Redis存储库。</target>
        </trans-unit>
        <trans-unit id="7d078d8cd37e6a87599a768d1bd356ab1c47c3e1" translate="yes" xml:space="preserve">
          <source>Whether to enable SSL support.</source>
          <target state="translated">是否启用SSL支持。</target>
        </trans-unit>
        <trans-unit id="60799845ad99fe8ee14ccec4edaec9555eae5634" translate="yes" xml:space="preserve">
          <source>Whether to enable SSL support. Determined automatically if an address is provided with the protocol (amqp:// vs. amqps://).</source>
          <target state="translated">是否启用SSL支持。如果协议中提供了地址,则自动确定(amqp://vs.amqps://)。</target>
        </trans-unit>
        <trans-unit id="f8a68defdcf69e7a699758a363f2b7f02dc1a65f" translate="yes" xml:space="preserve">
          <source>Whether to enable SSL support. Enabled automatically if a &quot;keyStore&quot; is provided unless specified otherwise.</source>
          <target state="translated">是否启用SSL支持。如果提供了 &quot;keyStore&quot;,则自动启用,除非另有规定。</target>
        </trans-unit>
        <trans-unit id="eb1f5841aa457ffdc9adc1d2b7deb609092a3fb8" translate="yes" xml:space="preserve">
          <source>Whether to enable Solr health check.</source>
          <target state="translated">是否启用Solr健康检查。</target>
        </trans-unit>
        <trans-unit id="1eeabec029a4feedc2ff009ec7a771df6358affd" translate="yes" xml:space="preserve">
          <source>Whether to enable Solr repositories.</source>
          <target state="translated">是否启用Solr资源库。</target>
        </trans-unit>
        <trans-unit id="7d42ff0d5797cfb3ddafd6babf79d6c549547e32" translate="yes" xml:space="preserve">
          <source>Whether to enable Spring's FormContentFilter.</source>
          <target state="translated">是否启用Spring的FormContentFilter。</target>
        </trans-unit>
        <trans-unit id="ad8d6c85f993ff99fd5529b5a070fccdb17b3ac9" translate="yes" xml:space="preserve">
          <source>Whether to enable Spring's HiddenHttpMethodFilter.</source>
          <target state="translated">是否启用Spring的HiddenHttpMethodFilter。</target>
        </trans-unit>
        <trans-unit id="8408b7aa50057bcea36bfdd484992c62e98105c8" translate="yes" xml:space="preserve">
          <source>Whether to enable Thymeleaf view resolution for Web frameworks.</source>
          <target state="translated">是否为Web框架启用Thymeleaf视图解析。</target>
        </trans-unit>
        <trans-unit id="94d189d2ad174ae8155bd06b76e2b3358fb23bf5" translate="yes" xml:space="preserve">
          <source>Whether to enable a livereload.com-compatible server.</source>
          <target state="translated">是否启用 livereload.com 兼容的服务器。</target>
        </trans-unit>
        <trans-unit id="1d905606dad6b57d5b67abb615c8f88a1a83f568" translate="yes" xml:space="preserve">
          <source>Whether to enable access log rotation.</source>
          <target state="translated">是否启用访问日志轮换。</target>
        </trans-unit>
        <trans-unit id="fa8e1ee8b042a5946cfef1515d70c2acbac86987" translate="yes" xml:space="preserve">
          <source>Whether to enable admin features for the application.</source>
          <target state="translated">是否启用应用程序的管理功能。</target>
        </trans-unit>
        <trans-unit id="a77325baa22590bac68981d2c5e84482caf9b2b3" translate="yes" xml:space="preserve">
          <source>Whether to enable auto-index creation.</source>
          <target state="translated">是否启用自动创建索引。</target>
        </trans-unit>
        <trans-unit id="fd592b25c884e8c970370510ba07f04219a72979" translate="yes" xml:space="preserve">
          <source>Whether to enable automatic restart.</source>
          <target state="translated">是否启用自动重启。</target>
        </trans-unit>
        <trans-unit id="893cacc5afe1f20a1efc4f29584a8f354ffe9d4a" translate="yes" xml:space="preserve">
          <source>Whether to enable build info.</source>
          <target state="translated">是否启用构建信息。</target>
        </trans-unit>
        <trans-unit id="63c68427d171ad86215d920c1c458a202e5d0e60" translate="yes" xml:space="preserve">
          <source>Whether to enable cache statistics.</source>
          <target state="translated">是否启用缓存统计。</target>
        </trans-unit>
        <trans-unit id="5e9165966537db32546f261d59f72373043aca62" translate="yes" xml:space="preserve">
          <source>Whether to enable caching in the Resource chain.</source>
          <target state="translated">是否启用资源链中的缓存。</target>
        </trans-unit>
        <trans-unit id="e661fa24ccfd194a2938080af4f90fade7822521" translate="yes" xml:space="preserve">
          <source>Whether to enable database health check.</source>
          <target state="translated">是否启用数据库健康检查。</target>
        </trans-unit>
        <trans-unit id="d761e8b2896ea42e6468c99246ed05ebcc1e869f" translate="yes" xml:space="preserve">
          <source>Whether to enable default health indicators.</source>
          <target state="translated">是否启用默认健康指标。</target>
        </trans-unit>
        <trans-unit id="78a20be068df2ec46056e91da97d40b521607216" translate="yes" xml:space="preserve">
          <source>Whether to enable default info contributors.</source>
          <target state="translated">是否启用默认信息贡献者。</target>
        </trans-unit>
        <trans-unit id="8f0bb76b9f4fdd6ec1dcb2ce7d988d1ee29e5332" translate="yes" xml:space="preserve">
          <source>Whether to enable default metrics exporters.</source>
          <target state="translated">是否启用默认指标导出器。</target>
        </trans-unit>
        <trans-unit id="b6bdf0bbe28c6c782bd00a436569a22610f78c71" translate="yes" xml:space="preserve">
          <source>Whether to enable default resource handling.</source>
          <target state="translated">是否启用默认资源处理。</target>
        </trans-unit>
        <trans-unit id="7a2da15fb427278b15d402c7b9ac955f4f431ece" translate="yes" xml:space="preserve">
          <source>Whether to enable development property defaults.</source>
          <target state="translated">是否启用开发属性默认。</target>
        </trans-unit>
        <trans-unit id="31f56419b2aa2a2db9e9e338da3848dd4bcf45f0" translate="yes" xml:space="preserve">
          <source>Whether to enable disk logging.</source>
          <target state="translated">是否启用磁盘日志记录。</target>
        </trans-unit>
        <trans-unit id="23dd61f30e59dd38e243c2a9d5d1aa99b0b72df6" translate="yes" xml:space="preserve">
          <source>Whether to enable disk space health check.</source>
          <target state="translated">是否启用磁盘空间健康检查。</target>
        </trans-unit>
        <trans-unit id="e4e6fd03d2cba8e7c6f237d2e940d488a62c6732" translate="yes" xml:space="preserve">
          <source>Whether to enable embedded mode if the Artemis server APIs are available.</source>
          <target state="translated">如果Artemis服务器API可用,是否启用嵌入式模式。</target>
        </trans-unit>
        <trans-unit id="18337f10eb26bfaa6c3b7035c953f1fadde3bff3" translate="yes" xml:space="preserve">
          <source>Whether to enable enum value translation through the Spring Data REST default resource bundle.</source>
          <target state="translated">是否通过Spring Data REST默认资源捆绑启用枚举值转换。</target>
        </trans-unit>
        <trans-unit id="a3290f9fb576002745ce0281f6787d425071d21f" translate="yes" xml:space="preserve">
          <source>Whether to enable environment info.</source>
          <target state="translated">是否启用环境信息。</target>
        </trans-unit>
        <trans-unit id="7d44706584b9c70ceb5686bb1fa1a0cba74b440b" translate="yes" xml:space="preserve">
          <source>Whether to enable explicit QoS (Quality of Service) when sending a message. When enabled, the delivery mode, priority and time-to-live properties will be used when sending a message. QoS is automatically enabled when at least one of those settings is customized.</source>
          <target state="translated">发送消息时是否启用显式QoS(服务质量)。启用后,发送消息时将使用发送模式、优先级和存活时间属性。当至少有一项设置被自定义时,QoS将自动启用。</target>
        </trans-unit>
        <trans-unit id="205fe3f6d02865a4e829493e0147a61c30979784" translate="yes" xml:space="preserve">
          <source>Whether to enable extended Cloud Foundry actuator endpoints.</source>
          <target state="translated">是否启用扩展的 Cloud Foundry 执行器端点。</target>
        </trans-unit>
        <trans-unit id="5ba8fa9808bb1a07e1d84ab8f50634c57f3f49a7" translate="yes" xml:space="preserve">
          <source>Whether to enable flyway.</source>
          <target state="translated">是否启用飞道。</target>
        </trans-unit>
        <trans-unit id="43f8598ec8b441d3ae6fa8f84747c38126b41c82" translate="yes" xml:space="preserve">
          <source>Whether to enable git info.</source>
          <target state="translated">是否启用git信息。</target>
        </trans-unit>
        <trans-unit id="65f32f79f4effee4bb6984cea1d67f5ffed123fe" translate="yes" xml:space="preserve">
          <source>Whether to enable hostname verification.</source>
          <target state="translated">是否启用主机名验证。</target>
        </trans-unit>
        <trans-unit id="f5fb577c319c502657a391a7e59ea60ab7e7028c" translate="yes" xml:space="preserve">
          <source>Whether to enable http encoding support.</source>
          <target state="translated">是否启用http编码支持。</target>
        </trans-unit>
        <trans-unit id="3238877e16978789394e2a38ee471465cf91a7c3" translate="yes" xml:space="preserve">
          <source>Whether to enable liveness and readiness probes.</source>
          <target state="translated">是否启用活泼度和准备度探究。</target>
        </trans-unit>
        <trans-unit id="bde9db0503b9fbc80e111547015ef705b040dc97" translate="yes" xml:space="preserve">
          <source>Whether to enable liveness state health check.</source>
          <target state="translated">是否启用活泼状态健康检查。</target>
        </trans-unit>
        <trans-unit id="f4ce9a489548d3f7114d4f63ba6062eaab359c74" translate="yes" xml:space="preserve">
          <source>Whether to enable logging of SQL statements.</source>
          <target state="translated">是否启用SQL语句的日志记录。</target>
        </trans-unit>
        <trans-unit id="90db37c089ec5cb922b1b59e47fbe500e8f907f1" translate="yes" xml:space="preserve">
          <source>Whether to enable mandatory messages.</source>
          <target state="translated">是否启用强制消息。</target>
        </trans-unit>
        <trans-unit id="f47fb3fe651e8fa05080f4251ce93107836dc36c" translate="yes" xml:space="preserve">
          <source>Whether to enable metrics.</source>
          <target state="translated">是否启用指标。</target>
        </trans-unit>
        <trans-unit id="4fefd9697531897bb181da79ecf5157ca25c1111" translate="yes" xml:space="preserve">
          <source>Whether to enable or disable all endpoints by default.</source>
          <target state="translated">是否默认启用或禁用所有端点。</target>
        </trans-unit>
        <trans-unit id="8664b1b345cf54bb7b37a6af21774c0530c55fbb" translate="yes" xml:space="preserve">
          <source>Whether to enable persistent store.</source>
          <target state="translated">是否启用持久化存储。</target>
        </trans-unit>
        <trans-unit id="7c7122d4ce8d9870a4358d6e98c6650e78137153" translate="yes" xml:space="preserve">
          <source>Whether to enable ping health check.</source>
          <target state="translated">是否启用ping健康检查。</target>
        </trans-unit>
        <trans-unit id="253ab330b5e51b7124d4e700accd5faa098fb5db" translate="yes" xml:space="preserve">
          <source>Whether to enable publisher returns.</source>
          <target state="translated">是否启用发布者退货。</target>
        </trans-unit>
        <trans-unit id="b67764d739e641994c7e1807e636559c584981c5" translate="yes" xml:space="preserve">
          <source>Whether to enable publishing descriptions as part of the scrape payload to Prometheus. Turn this off to minimize the amount of data sent on each scrape.</source>
          <target state="translated">是否启用发布描述作为Prometheus的刮擦有效载荷的一部分。关闭此选项,以尽量减少每次scrape发送的数据量。</target>
        </trans-unit>
        <trans-unit id="afd1459f146d5a7c91df6876ad6e1f02be9e97e3" translate="yes" xml:space="preserve">
          <source>Whether to enable readiness state health check.</source>
          <target state="translated">是否启用准备状态健康检查。</target>
        </trans-unit>
        <trans-unit id="4634c24fd9a0b53d245f0e117f1da76bf5167fed" translate="yes" xml:space="preserve">
          <source>Whether to enable remote access.</source>
          <target state="translated">是否启用远程访问。</target>
        </trans-unit>
        <trans-unit id="ac3bbd7ad7089ff552b60d6ee72c52492d04ab0d" translate="yes" xml:space="preserve">
          <source>Whether to enable remote restart.</source>
          <target state="translated">是否启用远程重启。</target>
        </trans-unit>
        <trans-unit id="22854bc1c83a1da2663558bdde25fbb069860808" translate="yes" xml:space="preserve">
          <source>Whether to enable resolution of already compressed resources (gzip, brotli). Checks for a resource name with the '.gz' or '.br' file extensions.</source>
          <target state="translated">是否启用已压缩资源的解析(gzip,brotli)。检查资源名是否为'.gz'或'.br'文件扩展名。</target>
        </trans-unit>
        <trans-unit id="6b924228d360a0992db39b90215d93a5a6d9c2f8" translate="yes" xml:space="preserve">
          <source>Whether to enable serialization of complex map keys (i.e. non-primitives).</source>
          <target state="translated">是否启用复杂映射键(即非基元)的序列化。</target>
        </trans-unit>
        <trans-unit id="dd5c8db1c9329eac9fb11b0de7a00fe15c5b946f" translate="yes" xml:space="preserve">
          <source>Whether to enable server side certificate validation.</source>
          <target state="translated">是否启用服务器端证书验证。</target>
        </trans-unit>
        <trans-unit id="516290e52cae71fb243b762d96f4410a89a31138" translate="yes" xml:space="preserve">
          <source>Whether to enable storage of audit events.</source>
          <target state="translated">是否启用审计事件的存储。</target>
        </trans-unit>
        <trans-unit id="e04914cfb30766b904fe593d3e0e58f15bea5fc7" translate="yes" xml:space="preserve">
          <source>Whether to enable streaming to Atlas LWC.</source>
          <target state="translated">是否启用流媒体到Atlas LWC。</target>
        </trans-unit>
        <trans-unit id="39d634f35d6dea877836f40779465bda0f62de50" translate="yes" xml:space="preserve">
          <source>Whether to enable support for Oracle SQL*Plus commands. Requires Flyway Teams.</source>
          <target state="translated">是否启用对Oracle SQL*Plus命令的支持。需要Flyway Teams。</target>
        </trans-unit>
        <trans-unit id="717e632d07f6ac0c28202d032bf53429529f2b1c" translate="yes" xml:space="preserve">
          <source>Whether to enable support of multipart uploads.</source>
          <target state="translated">是否启用支持多部分上传。</target>
        </trans-unit>
        <trans-unit id="fd6d051fd02ec1149ee21da2c231178023e32889" translate="yes" xml:space="preserve">
          <source>Whether to enable template caching.</source>
          <target state="translated">是否启用模板缓存。</target>
        </trans-unit>
        <trans-unit id="438e15fced0aa3bb0d73e8d978e6cfdbcc36b764" translate="yes" xml:space="preserve">
          <source>Whether to enable the PersistenceExceptionTranslationPostProcessor.</source>
          <target state="translated">是否启用PersistenceExceptionTranslationPostProcessor。</target>
        </trans-unit>
        <trans-unit id="d6a7e6e678e3dcbc1166e1933e74d112649196d2" translate="yes" xml:space="preserve">
          <source>Whether to enable the Spring Resource Handling chain. By default, disabled unless at least one strategy has been enabled.</source>
          <target state="translated">是否启用Spring资源处理链。默认情况下,禁用,除非至少有一个策略被启用。</target>
        </trans-unit>
        <trans-unit id="fd33ea7720b98ee9c923f0afe7f26bd013d194e2" translate="yes" xml:space="preserve">
          <source>Whether to enable the access log.</source>
          <target state="translated">是否启用访问日志。</target>
        </trans-unit>
        <trans-unit id="910aa80e2bd2bf5fc98325bdd87ce7159c1c2e38" translate="yes" xml:space="preserve">
          <source>Whether to enable the auditevents endpoint.</source>
          <target state="translated">是否启用 auditevents 端点。</target>
        </trans-unit>
        <trans-unit id="a1b4dc00df9c516e964baa8de720e34260c82361" translate="yes" xml:space="preserve">
          <source>Whether to enable the beans endpoint.</source>
          <target state="translated">是否启用豆瓣端点。</target>
        </trans-unit>
        <trans-unit id="0005a03444ade4119f701dc46f78c5525c489a35" translate="yes" xml:space="preserve">
          <source>Whether to enable the caches endpoint.</source>
          <target state="translated">是否启用缓存端点。</target>
        </trans-unit>
        <trans-unit id="e99c1a1d03276a84b5c4d1f8f8a0dcde35cd35ad" translate="yes" xml:space="preserve">
          <source>Whether to enable the conditions endpoint.</source>
          <target state="translated">是否启用条件端点。</target>
        </trans-unit>
        <trans-unit id="4b97e36c974e87d02ec75401dd9c78b62f7efd3c" translate="yes" xml:space="preserve">
          <source>Whether to enable the configprops endpoint.</source>
          <target state="translated">是否启用configprops端点。</target>
        </trans-unit>
        <trans-unit id="77ad28eb1e8a044b6ec1ea8c2178d3dcb1b093cf" translate="yes" xml:space="preserve">
          <source>Whether to enable the console.</source>
          <target state="translated">是否启用控制台。</target>
        </trans-unit>
        <trans-unit id="44a59cf8640a26ae596008e8b3193532782d8161" translate="yes" xml:space="preserve">
          <source>Whether to enable the content Version Strategy.</source>
          <target state="translated">是否启用内容版本策略。</target>
        </trans-unit>
        <trans-unit id="5a6ca47688bacde3dacaca47f1d83bf8953b2f8c" translate="yes" xml:space="preserve">
          <source>Whether to enable the default error page displayed in browsers in case of a server error.</source>
          <target state="translated">是否启用服务器出错时在浏览器中显示的默认错误页面。</target>
        </trans-unit>
        <trans-unit id="8deaf0fe891861fe6318718ae47288ebb5875150" translate="yes" xml:space="preserve">
          <source>Whether to enable the env endpoint.</source>
          <target state="translated">是否启用 env 端点。</target>
        </trans-unit>
        <trans-unit id="ea592e8fa2b73873d4a7b1878315f018c2bd970f" translate="yes" xml:space="preserve">
          <source>Whether to enable the fixed Version Strategy.</source>
          <target state="translated">是否启用固定版本策略。</target>
        </trans-unit>
        <trans-unit id="bc610d6af62f1011f48a5de8462e3a09defccd56" translate="yes" xml:space="preserve">
          <source>Whether to enable the flyway endpoint.</source>
          <target state="translated">是否启用飞航端点。</target>
        </trans-unit>
        <trans-unit id="1c1b5fd45514b47ac7ef54827796dde167fbd819" translate="yes" xml:space="preserve">
          <source>Whether to enable the health endpoint.</source>
          <target state="translated">是否启用健康端点。</target>
        </trans-unit>
        <trans-unit id="65bcd4a3ca7b05cb3a7f707e523415f6ae476d08" translate="yes" xml:space="preserve">
          <source>Whether to enable the heapdump endpoint.</source>
          <target state="translated">是否启用堆栈端点。</target>
        </trans-unit>
        <trans-unit id="f9597a07b50ebd8dce5b38eb959d157a85aa1b05" translate="yes" xml:space="preserve">
          <source>Whether to enable the httptrace endpoint.</source>
          <target state="translated">是否启用httptrace端点。</target>
        </trans-unit>
        <trans-unit id="d0b5019cd8b4fcd88b79807c525b69cdb232589b" translate="yes" xml:space="preserve">
          <source>Whether to enable the info endpoint.</source>
          <target state="translated">是否启用信息端点。</target>
        </trans-unit>
        <trans-unit id="e450418baa9deee368b3f6774654c4283121d946" translate="yes" xml:space="preserve">
          <source>Whether to enable the integrationgraph endpoint.</source>
          <target state="translated">是否启用integrationgraph端点。</target>
        </trans-unit>
        <trans-unit id="7a6773a56e4f78d3d6d8d75ba71d5b4c69f0ac62" translate="yes" xml:space="preserve">
          <source>Whether to enable the jolokia endpoint.</source>
          <target state="translated">是否启用jolokia端点。</target>
        </trans-unit>
        <trans-unit id="c56959e716d76cefb143713200367e13211a67b7" translate="yes" xml:space="preserve">
          <source>Whether to enable the liquibase endpoint.</source>
          <target state="translated">是否启用liquibase端点。</target>
        </trans-unit>
        <trans-unit id="2004a96e30c654891fb7e828c3425289c833c6db" translate="yes" xml:space="preserve">
          <source>Whether to enable the logfile endpoint.</source>
          <target state="translated">是否启用日志文件端点。</target>
        </trans-unit>
        <trans-unit id="8aa41cf0fb2048761128df4599f470a58282c891" translate="yes" xml:space="preserve">
          <source>Whether to enable the loggers endpoint.</source>
          <target state="translated">是否启用记录仪端点。</target>
        </trans-unit>
        <trans-unit id="8d53499202ac60ca28954fcff6fe2c93d92c0f6d" translate="yes" xml:space="preserve">
          <source>Whether to enable the mappings endpoint.</source>
          <target state="translated">是否启用映射端点。</target>
        </trans-unit>
        <trans-unit id="464c371fe5c52f8be936613abf4678c4f4b05d39" translate="yes" xml:space="preserve">
          <source>Whether to enable the metrics endpoint.</source>
          <target state="translated">是否启用指标端点。</target>
        </trans-unit>
        <trans-unit id="de3c7efbddeac448b72479c227b912b1d3a626eb" translate="yes" xml:space="preserve">
          <source>Whether to enable the prometheus endpoint.</source>
          <target state="translated">是否启用prometheus端点。</target>
        </trans-unit>
        <trans-unit id="285fd7419feb58aea37998e85e9eb6b597ed9ad7" translate="yes" xml:space="preserve">
          <source>Whether to enable the scheduledtasks endpoint.</source>
          <target state="translated">是否启用scheduletasks端点。</target>
        </trans-unit>
        <trans-unit id="8a8438c9dac10ff652b6d2cd65b9d0507be44e0f" translate="yes" xml:space="preserve">
          <source>Whether to enable the sessions endpoint.</source>
          <target state="translated">是否启用会话端点。</target>
        </trans-unit>
        <trans-unit id="bf110aec40deb5ab4906afa8c0af64eb1b0e5ec7" translate="yes" xml:space="preserve">
          <source>Whether to enable the shutdown endpoint.</source>
          <target state="translated">是否启用关机端点。</target>
        </trans-unit>
        <trans-unit id="53aebcdae163f498f6a78f8298f7a58d5f7309c0" translate="yes" xml:space="preserve">
          <source>Whether to enable the startup endpoint.</source>
          <target state="translated">是否启用启动端点。</target>
        </trans-unit>
        <trans-unit id="dcdc35d9b769834985ae792b81ea509a7e4c4067" translate="yes" xml:space="preserve">
          <source>Whether to enable the threaddump endpoint.</source>
          <target state="translated">是否启用线程转储端点。</target>
        </trans-unit>
        <trans-unit id="90e25583f40760d9340e0043b26a19d2b702ccae" translate="yes" xml:space="preserve">
          <source>Whether to enable trace output.</source>
          <target state="translated">是否启用跟踪输出。</target>
        </trans-unit>
        <trans-unit id="41047f4f4f75d1b1debbff37a9986f0a6a4b0ba2" translate="yes" xml:space="preserve">
          <source>Whether to enable warn logging of exceptions resolved by a &quot;HandlerExceptionResolver&quot;, except for &quot;DefaultHandlerExceptionResolver&quot;.</source>
          <target state="translated">除 &quot;DefaultHandlerExceptionResolver &quot;外,是否启用 &quot;HandlerExceptionResolver &quot;解决的异常的警告记录。</target>
        </trans-unit>
        <trans-unit id="ffbc01837e197768b12ba403aa4e9bfa1d225eee" translate="yes" xml:space="preserve">
          <source>Whether to exclude all fields from consideration for serialization or deserialization that do not have the &quot;Expose&quot; annotation.</source>
          <target state="translated">是否将没有 &quot;暴露 &quot;注解的所有字段排除在序列化或反序列化的考虑范围之外。</target>
        </trans-unit>
        <trans-unit id="d7bb8f9ddc323ef1516a7845e0be58d3ee5b7e93" translate="yes" xml:space="preserve">
          <source>Whether to exclude inner classes during serialization.</source>
          <target state="translated">是否在序列化过程中排除内部类。</target>
        </trans-unit>
        <trans-unit id="0d012f7e17272da2bf2309f4a3f7c14a072ffa74" translate="yes" xml:space="preserve">
          <source>Whether to expose a RequestContext for use by Spring's macro library, under the name &quot;springMacroRequestContext&quot;.</source>
          <target state="translated">是否以 &quot;springMacroRequestContext &quot;为名,公开一个RequestContext供Spring的宏库使用。</target>
        </trans-unit>
        <trans-unit id="329ab47b8a8353d6e0b649c7fd36d30336180366" translate="yes" xml:space="preserve">
          <source>Whether to expose and assume 1-based page number indexes. Defaults to &quot;false&quot;, meaning a page number of 0 in the request equals the first page.</source>
          <target state="translated">是否暴露并假设基于1的页码索引。默认为 &quot;false&quot;,即请求中页码为0的页面等于第一页。</target>
        </trans-unit>
        <trans-unit id="98fab74174fd6a8e397fe04382b37520c8e5b082" translate="yes" xml:space="preserve">
          <source>Whether to fail fast if the broker is not available on startup.</source>
          <target state="translated">如果在启动时没有经纪人,是否要快速失败。</target>
        </trans-unit>
        <trans-unit id="fd871aafb968ce14268209a901263498c18b4a34" translate="yes" xml:space="preserve">
          <source>Whether to fail if the queues declared by the container are not available on the broker and/or whether to stop the container if one or more queues are deleted at runtime.</source>
          <target state="translated">如果容器声明的队列在broker上不可用,是否要失败,和/或如果一个或多个队列在运行时被删除,是否要停止容器。</target>
        </trans-unit>
        <trans-unit id="e7d4a8ce0696431044fb905fe51871bdee2956c5" translate="yes" xml:space="preserve">
          <source>Whether to fail if the queues declared by the container are not available on the broker.</source>
          <target state="translated">如果容器声明的队列在经纪人上不可用,是否要失败。</target>
        </trans-unit>
        <trans-unit id="1c3bdb221c9290c06581cd8bb0aade09cdcdc53d" translate="yes" xml:space="preserve">
          <source>Whether to fall back to the system Locale if no files for a specific Locale have been found. if this is turned off, the only fallback will be the default file (e.g. &quot;messages.properties&quot; for basename &quot;messages&quot;).</source>
          <target state="translated">如果关闭了这个功能,唯一的回退将是默认文件(例如 &quot;messages &quot;基名的 &quot;messages.properties&quot;)。</target>
        </trans-unit>
        <trans-unit id="5f2e2dc024c882704d55a5afdf4e7e97390e5fce" translate="yes" xml:space="preserve">
          <source>Whether to first drop the database schema.</source>
          <target state="translated">是否先放弃数据库模式。</target>
        </trans-unit>
        <trans-unit id="a8ecf95c5a8cb92ab343ff185724909cf96859de" translate="yes" xml:space="preserve">
          <source>Whether to generate a random database name. Ignore any configured name when enabled.</source>
          <target state="translated">是否随机生成数据库名称。启用后忽略任何配置的名称。</target>
        </trans-unit>
        <trans-unit id="14f41d49d13c6060d23c74ac941914db7e6b9db8" translate="yes" xml:space="preserve">
          <source>Whether to generate a random datasource name.</source>
          <target state="translated">是否随机生成一个数据源名称。</target>
        </trans-unit>
        <trans-unit id="971d0e30891f6153f5e4efdc5f2e0dd245ecb4c2" translate="yes" xml:space="preserve">
          <source>Whether to generate non executable JSON by prefixing the output with some special text.</source>
          <target state="translated">是否在输出前加上一些特殊的文字,生成不可执行的JSON。</target>
        </trans-unit>
        <trans-unit id="ffa5185f6cd6280dfb03fa9bcf1540b80393137a" translate="yes" xml:space="preserve">
          <source>Whether to group all pending migrations together in the same transaction when applying them.</source>
          <target state="translated">在申请迁移时,是否将所有待处理的迁移集中在同一个事务中。</target>
        </trans-unit>
        <trans-unit id="48be1796e6c707da145ab3bae3785c1956a09bf5" translate="yes" xml:space="preserve">
          <source>Whether to handle message mapping for RSocket via Spring Integration.</source>
          <target state="translated">是否通过Spring集成处理RSocket的消息映射。</target>
        </trans-unit>
        <trans-unit id="766a3110e86aa212fdfd8fe1fb9ee0ec5ee946d5" translate="yes" xml:space="preserve">
          <source>Whether to ignore AbstractRoutingDataSources when creating database health indicators.</source>
          <target state="translated">创建数据库健康指标时是否忽略AbstractRoutingDataSources。</target>
        </trans-unit>
        <trans-unit id="3f70d244ad0d582ec29d8581e200881e0b9740df" translate="yes" xml:space="preserve">
          <source>Whether to ignore future migrations when reading the schema history table.</source>
          <target state="translated">读取模式历史表时是否忽略未来的迁移。</target>
        </trans-unit>
        <trans-unit id="08547cac3ecf72e7cef7321f0bb7ebe7a3fedc1c" translate="yes" xml:space="preserve">
          <source>Whether to ignore ignored migrations when reading the schema history table.</source>
          <target state="translated">读取模式历史表时是否忽略被忽略的迁移。</target>
        </trans-unit>
        <trans-unit id="318bb0ac9550d0bd1cd74c444b2bb8d74c00eaa6" translate="yes" xml:space="preserve">
          <source>Whether to ignore missing migrations when reading the schema history table.</source>
          <target state="translated">读取模式历史表时是否忽略缺失的迁移。</target>
        </trans-unit>
        <trans-unit id="42c717b77daec9be539d958901299a24be0e7d22" translate="yes" xml:space="preserve">
          <source>Whether to ignore pending migrations when reading the schema history table.</source>
          <target state="translated">读取模式历史表时是否忽略待迁移。</target>
        </trans-unit>
        <trans-unit id="c73f358d61f99c7b60f3b5a2581d7ec2586e08b0" translate="yes" xml:space="preserve">
          <source>Whether to ignore the transacted flag when creating session.</source>
          <target state="translated">创建会话时是否忽略transacted标志。</target>
        </trans-unit>
        <trans-unit id="18340225e63f911d84191a29ec7a5598fba98f3c" translate="yes" xml:space="preserve">
          <source>Whether to initialize the schema on startup.</source>
          <target state="translated">是否在启动时初始化模式。</target>
        </trans-unit>
        <trans-unit id="67150a7a7b039c24e43f47bae5bbb7ec10aba8d7" translate="yes" xml:space="preserve">
          <source>Whether to issue a warning rather than an error when a not-yet-supported Oracle SQL*Plus statement is encountered. Requires Flyway Teams.</source>
          <target state="translated">当遇到尚未支持的Oracle SQL*Plus语句时,是否要发出警告而不是错误。需要Flyway Teams。</target>
        </trans-unit>
        <trans-unit id="b1b97ba993632774867122ad1dc9f1bb667acf43" translate="yes" xml:space="preserve">
          <source>Whether to log form data at DEBUG level, and headers at TRACE level.</source>
          <target state="translated">是否在DEBUG级别记录表格数据,在TRACE级别记录标题。</target>
        </trans-unit>
        <trans-unit id="62b1553ab6c4fe05f5d00bd8f13b47c91f6157a5" translate="yes" xml:space="preserve">
          <source>Whether to log information about the application when it starts.</source>
          <target state="translated">是否在启动时记录应用程序的信息。</target>
        </trans-unit>
        <trans-unit id="53aed1e80c9f370da80be15b39c46bf666c92847" translate="yes" xml:space="preserve">
          <source>Whether to log leaked sessions.</source>
          <target state="translated">是否记录泄露的会话。</target>
        </trans-unit>
        <trans-unit id="23fd15ba3469f8e42f6c3a8cd9c3c07530551b58" translate="yes" xml:space="preserve">
          <source>Whether to log the condition evaluation delta upon restart.</source>
          <target state="translated">是否在重新启动时记录条件评价delta。</target>
        </trans-unit>
        <trans-unit id="a3cf61568e67a2d367c0e7575d087b95de8083d1" translate="yes" xml:space="preserve">
          <source>Whether to log the container configuration during initialization (INFO level).</source>
          <target state="translated">是否在初始化期间记录容器配置(INFO 级别)。</target>
        </trans-unit>
        <trans-unit id="218b6d2ba6b64e550f072c272583b094d86f55d3" translate="yes" xml:space="preserve">
          <source>Whether to output serialized JSON that fits in a page for pretty printing.</source>
          <target state="translated">是否输出适合页面的序列化JSON,以实现漂亮的打印。</target>
        </trans-unit>
        <trans-unit id="250b140ef0abb4621c34bed5e4e162a2f13e5fa9" translate="yes" xml:space="preserve">
          <source>Whether to persist session data between restarts.</source>
          <target state="translated">是否在重启之间坚持会话数据。</target>
        </trans-unit>
        <trans-unit id="56184683d375f8988f31061c1c8701f78aa9ae2a" translate="yes" xml:space="preserve">
          <source>Whether to prefer file system access for template loading to enable hot detection of template changes. When a template path is detected as a directory, templates are loaded from the directory only and other matching classpath locations will not be considered.</source>
          <target state="translated">是否优先选择文件系统访问来加载模板,以实现模板变化的热检测。当检测到模板路径为目录时,只从该目录加载模板,其他匹配的classpath位置将不被考虑。</target>
        </trans-unit>
        <trans-unit id="c5c51f4623382109cca509b8459a0fc0e5ba8525" translate="yes" xml:space="preserve">
          <source>Whether to preserve the path of a request when it is forwarded.</source>
          <target state="translated">转发请求时是否保留请求的路径。</target>
        </trans-unit>
        <trans-unit id="c798d78c8dfb45dd046f090015c4970bca8119f5" translate="yes" xml:space="preserve">
          <source>Whether to publish a ServletRequestHandledEvent at the end of each request.</source>
          <target state="translated">是否在每个请求结束时发布一个ServletRequestHandledEvent。</target>
        </trans-unit>
        <trans-unit id="75fdbb97548463e4556ad536155ccb08b28e6bb3" translate="yes" xml:space="preserve">
          <source>Whether to publish a histogram suitable for computing aggregable (across dimension) percentile approximations.</source>
          <target state="translated">是否发布适合于计算可汇总(跨维)百分位数近似值的直方图。</target>
        </trans-unit>
        <trans-unit id="0cc67c23fd8e7fffd5ed5c98cb83dc3e50f51b47" translate="yes" xml:space="preserve">
          <source>Whether to publish descriptions metadata to Datadog. Turn this off to minimize the amount of metadata sent.</source>
          <target state="translated">是否向 Datadog 发布描述元数据。关闭此选项,以减少发送的元数据量。</target>
        </trans-unit>
        <trans-unit id="709ef5dcca684a34ddcf783bd12a3a803074637e" translate="yes" xml:space="preserve">
          <source>Whether to register the default Servlet with the container.</source>
          <target state="translated">是否在容器中注册默认的Servlet。</target>
        </trans-unit>
        <trans-unit id="4fcd32cb3d1e4bc637f12e92d4ce6b936285aa5d" translate="yes" xml:space="preserve">
          <source>Whether to resolve the multipart request lazily at the time of file or parameter access.</source>
          <target state="translated">在文件或参数访问时,是否对多部分请求进行懒惰解析。</target>
        </trans-unit>
        <trans-unit id="69ff86b02998e02d637561b96cfa35681c58d9b3" translate="yes" xml:space="preserve">
          <source>Whether to return a response body after creating an entity.</source>
          <target state="translated">创建实体后是否返回响应体。</target>
        </trans-unit>
        <trans-unit id="7bde89a363a749be39e6aadd27686c6631294ce2" translate="yes" xml:space="preserve">
          <source>Whether to return a response body after updating an entity.</source>
          <target state="translated">更新实体后是否返回响应体。</target>
        </trans-unit>
        <trans-unit id="7628c0f4429f8962f9444842a2855b8efce596eb" translate="yes" xml:space="preserve">
          <source>Whether to roll back on commit failures.</source>
          <target state="translated">是否对提交失败进行回滚。</target>
        </trans-unit>
        <trans-unit id="1c5fe42c6ee9e6fb5910b2a8338c672326c8ec52" translate="yes" xml:space="preserve">
          <source>Whether to send the meter name as the event type instead of using the 'event-type' configuration property value. Can be set to 'true' if New Relic guidelines are not being followed or event types consistent with previous Spring Boot releases are required.</source>
          <target state="translated">是否将仪表名称作为事件类型发送,而不是使用 &quot;事件类型 &quot;配置属性值。如果没有遵循 New Relic 指南或需要与以前的 Spring Boot 版本一致的事件类型,可将其设置为'true'。</target>
        </trans-unit>
        <trans-unit id="2f10c989f93883de289871bea6a27fcf51bfd1a9" translate="yes" xml:space="preserve">
          <source>Whether to send unchanged meters to the StatsD server.</source>
          <target state="translated">是否向StatsD服务器发送不变的仪表。</target>
        </trans-unit>
        <trans-unit id="e0d15cbe8da4ea85d7b400d111a36ea65c47b0cb" translate="yes" xml:space="preserve">
          <source>Whether to serialize null fields.</source>
          <target state="translated">是否序列化空字段。</target>
        </trans-unit>
        <trans-unit id="00158dc0fa439272a473b514c75205bc95dfd674" translate="yes" xml:space="preserve">
          <source>Whether to ship a floored time, useful when sending measurements from multiple hosts to align them on a given time boundary.</source>
          <target state="translated">是否运送浮动时间,在从多个主机发送测量数据以使其对准给定的时间边界时很有用。</target>
        </trans-unit>
        <trans-unit id="5ee7484570edbfadc247e9c13387490be83160ea" translate="yes" xml:space="preserve">
          <source>Whether to skip SSL verification for Cloud Foundry actuator endpoint security calls.</source>
          <target state="translated">是否跳过Cloud Foundry执行器端点安全调用的SSL验证。</target>
        </trans-unit>
        <trans-unit id="9b999b979a3e45c95822a67eeacc47ecad8e0051" translate="yes" xml:space="preserve">
          <source>Whether to skip default callbacks. If true, only custom callbacks are used.</source>
          <target state="translated">是否跳过默认回调。如果为true,则只使用自定义回调。</target>
        </trans-unit>
        <trans-unit id="8eefebacf9a3d139b1df79a30c79cc021bfaaf1b" translate="yes" xml:space="preserve">
          <source>Whether to skip default resolvers. If true, only custom resolvers are used.</source>
          <target state="translated">是否跳过默认的解析器。如果为真,则只使用自定义解析器。</target>
        </trans-unit>
        <trans-unit id="90a7f4ee0dc2b3b6bd1722b97e14733f3ed0f6d1" translate="yes" xml:space="preserve">
          <source>Whether to skip search of BeanInfo classes.</source>
          <target state="translated">是否跳过对BeanInfo类的搜索。</target>
        </trans-unit>
        <trans-unit id="885db1a8e8d2d9a65648275070164a3fbc1b2690" translate="yes" xml:space="preserve">
          <source>Whether to start the container automatically on startup.</source>
          <target state="translated">是否在启动时自动启动容器。</target>
        </trans-unit>
        <trans-unit id="5c09f2b6bcea32c315e16dd0cdcd2cf6e38d3b46" translate="yes" xml:space="preserve">
          <source>Whether to stop if an error occurs while initializing the database.</source>
          <target state="translated">如果在初始化数据库时发生错误,是否要停止。</target>
        </trans-unit>
        <trans-unit id="5addeb5b76d28d62bbdce4f189efcdccc9b5e430" translate="yes" xml:space="preserve">
          <source>Whether to stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order is not preserved when this is enabled.</source>
          <target state="translated">是否在从回滚的事务中重新传送消息之前停止消息传送。这意味着当启用该功能时,消息顺序不会被保留。</target>
        </trans-unit>
        <trans-unit id="f3f9c2235f64c577befcd16820f5aa9f96f56703" translate="yes" xml:space="preserve">
          <source>Whether to stream SQL migrations when executing them. Requires Flyway Teams.</source>
          <target state="translated">执行SQL迁移时,是否要流式迁移。需要Flyway Teams。</target>
        </trans-unit>
        <trans-unit id="df29a2c71cbd0d9d70dff3ee4fad0d6e674b7cf0" translate="yes" xml:space="preserve">
          <source>Whether to test that the mail server is available on startup.</source>
          <target state="translated">是否要测试邮件服务器在启动时是否可用。</target>
        </trans-unit>
        <trans-unit id="7b88b092435953883356a2156da1a554a06a4cd7" translate="yes" xml:space="preserve">
          <source>Whether to transparently migrate legacy endpoint IDs.</source>
          <target state="translated">是否透明地迁移遗留的端点ID。</target>
        </trans-unit>
        <trans-unit id="7088d140f2e7247b80bccf5a32ed5b1536d8e620" translate="yes" xml:space="preserve">
          <source>Whether to trust all packages.</source>
          <target state="translated">是否信任所有的包。</target>
        </trans-unit>
        <trans-unit id="6c22d6bf6290524191f56350ab92bf64e8541c2e" translate="yes" xml:space="preserve">
          <source>Whether to use &quot;HttpOnly&quot; cookies for session cookies.</source>
          <target state="translated">是否对会话cookie使用 &quot;HttpOnly &quot;cookie。</target>
        </trans-unit>
        <trans-unit id="29f9f06bffe59e3ca138d9822631f7a5210709b0" translate="yes" xml:space="preserve">
          <source>Whether to use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE. This is actually a shortcut for the &quot;hibernate.id.new_generator_mappings&quot; property. When not specified will default to &quot;true&quot;.</source>
          <target state="translated">是否对AUTO、TABLE和SEQUENCE使用Hibernate较新的IdentifierGenerator。这实际上是 &quot;hibernate.id.new_generator_mappings &quot;属性的快捷方式。当不指定时将默认为 &quot;true&quot;。</target>
        </trans-unit>
        <trans-unit id="d1c42744a7fd78f639423cd2e83f5f22119d631c" translate="yes" xml:space="preserve">
          <source>Whether to use IPv6 canonical representation format as defined by RFC 5952.</source>
          <target state="translated">是否使用RFC 5952定义的IPv6规范表示格式。</target>
        </trans-unit>
        <trans-unit id="634692588b7241bea7be2388ce2d41d2a8851a13" translate="yes" xml:space="preserve">
          <source>Whether to use concurrent connection validation.</source>
          <target state="translated">是否使用并发连接验证。</target>
        </trans-unit>
        <trans-unit id="45c7099060673c68f0d5148b8473114f391d2147" translate="yes" xml:space="preserve">
          <source>Whether to use different (and concurrent) threads for two-phase commit on the participating resources.</source>
          <target state="translated">是否使用不同(和并发)线程对参与资源进行两阶段提交。</target>
        </trans-unit>
        <trans-unit id="aecc32ce1fe09e15328c3a69bd375fc8360abc7b" translate="yes" xml:space="preserve">
          <source>Whether to use only one anonymous &quot;MessageProducer&quot; instance. Set it to false to create one &quot;MessageProducer&quot; every time one is required.</source>
          <target state="translated">是否只使用一个匿名的 &quot;MessageProducer &quot;实例。设置为false,每次需要创建一个 &quot;MessageProducer &quot;时,就会创建一个。</target>
        </trans-unit>
        <trans-unit id="f852251f75fe16b5f96d7ba41193cd964ecf8446" translate="yes" xml:space="preserve">
          <source>Whether to use the key prefix when writing to Redis.</source>
          <target state="translated">写入Redis时是否使用键前缀。</target>
        </trans-unit>
        <trans-unit id="12acb4440e2a34feae775591e335f6972cc06f6b" translate="yes" xml:space="preserve">
          <source>Whether to use the message code as the default message instead of throwing a &quot;NoSuchMessageException&quot;. Recommended during development only.</source>
          <target state="translated">是否使用消息代码作为默认消息,而不是抛出 &quot;NoSuchMessageException&quot;。仅在开发过程中推荐使用。</target>
        </trans-unit>
        <trans-unit id="d720e95f290398cf2968a2571425c4f64d47e719" translate="yes" xml:space="preserve">
          <source>Whether to validate headers when decoding requests.</source>
          <target state="translated">解码请求时是否验证头信息。</target>
        </trans-unit>
        <trans-unit id="ff2503980c311f4cd6c6de3b020b4180e664781c" translate="yes" xml:space="preserve">
          <source>Whether to validate migrations and callbacks whose scripts do not obey the correct naming convention.</source>
          <target state="translated">是否验证那些脚本不遵守正确命名惯例的迁移和回调。</target>
        </trans-unit>
        <trans-unit id="8b3e8531898adb44ebb0b973ba1b929f507e2cc9" translate="yes" xml:space="preserve">
          <source>Whether to wait for running jobs to complete on shutdown.</source>
          <target state="translated">是否在关机时等待运行的工作完成。</target>
        </trans-unit>
        <trans-unit id="bdfbdb3bf1bc4fdf7defc33636e4dd6f01ce91fc" translate="yes" xml:space="preserve">
          <source>Whether unique runtime object names should be ensured.</source>
          <target state="translated">是否应保证运行时对象名称唯一。</target>
        </trans-unit>
        <trans-unit id="be133b7298c42d06fb70b69c6c694fe87566bbb2" translate="yes" xml:space="preserve">
          <source>Whether we should use the &quot;lastModified&quot; metadata of the files in HTTP caching headers.</source>
          <target state="translated">我们是否应该在HTTP缓存头中使用文件的 &quot;lastModified &quot;元数据。</target>
        </trans-unit>
        <trans-unit id="16a41ba1833d12bffb573e9e57abc25e34d85534" translate="yes" xml:space="preserve">
          <source>Whether, in the absence of any other exporter, exporting of metrics to an in-memory backend is enabled.</source>
          <target state="translated">在没有其他导出器的情况下,是否启用将指标导出到内存后端。</target>
        </trans-unit>
        <trans-unit id="443ca577d33f8ec2a869ba67b470b08762120426" translate="yes" xml:space="preserve">
          <source>While Spring&amp;rsquo;s test framework caches application contexts between tests and reuses a context for tests sharing the same configuration, the use of &lt;code&gt;@MockBean&lt;/code&gt; or &lt;code&gt;@SpyBean&lt;/code&gt; influences the cache key, which will most likely increase the number of contexts.</source>
          <target state="translated">Spring的测试框架在测试之间缓存应用程序上下文，并为共享相同配置的测试重用上下文，而 &lt;code&gt;@MockBean&lt;/code&gt; 或 &lt;code&gt;@SpyBean&lt;/code&gt; 的使用会影响缓存键，这很可能会增加上下文数量。</target>
        </trans-unit>
        <trans-unit id="9fd0400962e95219b3c323445d98b60b4eb5ed76" translate="yes" xml:space="preserve">
          <source>While caching is very beneficial in production, it can be counter-productive during development, preventing you from seeing the changes you just made in your application. For this reason, spring-boot-devtools disables the caching options by default.</source>
          <target state="translated">虽然缓存在生产中是非常有益的,但在开发过程中可能会适得其反,使你无法看到你刚刚在应用程序中做出的更改。因此,spring-boot-devtools默认禁用缓存选项。</target>
        </trans-unit>
        <trans-unit id="75a052aa9f274cecf932e1d20ead1f18d5b227a6" translate="yes" xml:space="preserve">
          <source>While it is possible to use JUnit 4 to test Kotlin code, JUnit 5 is provided by default and is recommended. JUnit 5 enables a test class to be instantiated once and reused for all of the class&amp;rsquo;s tests. This makes it possible to use &lt;code&gt;@BeforeAll&lt;/code&gt; and &lt;code&gt;@AfterAll&lt;/code&gt; annotations on non-static methods, which is a good fit for Kotlin.</source>
          <target state="translated">虽然可以使用JUnit 4测试Kotlin代码，但默认情况下建议使用JUnit 5。JUnit 5使一个测试类可以实例化一次，并可以在该类的所有测试中重新使用。这样就可以在非静态方法上使用 &lt;code&gt;@BeforeAll&lt;/code&gt; 和 &lt;code&gt;@AfterAll&lt;/code&gt; 批注，这非常适合Kotlin。</target>
        </trans-unit>
        <trans-unit id="4d6335f35800e3639e43a575ab1b7af85a762995" translate="yes" xml:space="preserve">
          <source>While using &lt;code&gt;@PropertySource&lt;/code&gt; on your &lt;code&gt;@SpringBootApplication&lt;/code&gt; may seem to be a convenient way to load a custom resource in the &lt;code&gt;Environment&lt;/code&gt;, we do not recommend it. Such property sources are not added to the &lt;code&gt;Environment&lt;/code&gt; until the application context is being refreshed. This is too late to configure certain properties such as &lt;code&gt;logging.*&lt;/code&gt; and &lt;code&gt;spring.main.*&lt;/code&gt; which are read before refresh begins.</source>
          <target state="translated">虽然在 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 上使用 &lt;code&gt;@PropertySource&lt;/code&gt; 似乎是在 &lt;code&gt;Environment&lt;/code&gt; 中加载自定义资源的便捷方法，但我们不建议这样做。在刷新应用程序上下文之前，不会将此类属性源添加到 &lt;code&gt;Environment&lt;/code&gt; 。现在配置某些属性（如 &lt;code&gt;logging.*&lt;/code&gt; 和 &lt;code&gt;spring.main.*&lt;/code&gt; ）为时已晚，这些属性在刷新开始之前就已读取。</target>
        </trans-unit>
        <trans-unit id="34af3995adf0544ac3c504c1e616abc37ede93f9" translate="yes" xml:space="preserve">
          <source>While you can write a &lt;code&gt;SpEL&lt;/code&gt; expression in &lt;code&gt;@Value&lt;/code&gt;, such expressions are not processed from &lt;a href=&quot;#boot-features-external-config-files&quot;&gt;application property files&lt;/a&gt;.</source>
          <target state="translated">尽管您可以在 &lt;code&gt;@Value&lt;/code&gt; 中编写 &lt;code&gt;SpEL&lt;/code&gt; 表达式，但不会从&lt;a href=&quot;#boot-features-external-config-files&quot;&gt;应用程序属性文件中&lt;/a&gt;处理此类表达式。</target>
        </trans-unit>
        <trans-unit id="b1b7f131a7112f9cc2fa73a30dcf4c0f661e80fe" translate="yes" xml:space="preserve">
          <source>Width of the banner image in chars.</source>
          <target state="translated">横幅图像的宽度,单位为chars。</target>
        </trans-unit>
        <trans-unit id="67e465aac7b8f742b1785e6c20a05ea753b7f19a" translate="yes" xml:space="preserve">
          <source>Wildcard locations only work with external directories. You cannot use a wildcard in a &lt;code&gt;classpath:&lt;/code&gt; location.</source>
          <target state="translated">通配符位置仅适用于外部目录。您不能在 &lt;code&gt;classpath:&lt;/code&gt; 位置中使用通配符。</target>
        </trans-unit>
        <trans-unit id="eadf42673bc7da6d0e5b5f372c95a6e937b88796" translate="yes" xml:space="preserve">
          <source>With Cloud Native Buildpacks, you can create Docker compatible images that you can run anywhere. Spring Boot includes buildpack support directly for both Maven and Gradle. This means you can just type a single command and quickly get a sensible image into your locally running Docker daemon.</source>
          <target state="translated">有了Cloud Native Buildpacks,您可以创建可以在任何地方运行的Docker兼容镜像。Spring Boot直接包含对Maven和Gradle的Buildpack支持。这意味着您只需键入一个命令,就可以快速地将一个合理的映像放到您本地运行的Docker守护进程中。</target>
        </trans-unit>
        <trans-unit id="04d7cb7b91a1bf62c7c3bb03ae6c2a54dfce73a9" translate="yes" xml:space="preserve">
          <source>With Gradle 4.5 and earlier, the dependency should be declared in the &lt;code&gt;compileOnly&lt;/code&gt; configuration, as shown in the following example:</source>
          <target state="translated">对于Gradle 4.5和更早版本，应在 &lt;code&gt;compileOnly&lt;/code&gt; 配置中声明依赖项，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="4fc23501b952a1643f7009a9158e57929c8027f4" translate="yes" xml:space="preserve">
          <source>With Gradle 4.6 and later, the dependency should be declared in the &lt;code&gt;annotationProcessor&lt;/code&gt; configuration, as shown in the following example:</source>
          <target state="translated">在Gradle 4.6及更高版本中，应在 &lt;code&gt;annotationProcessor&lt;/code&gt; 配置中声明依赖项，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="7dc3a8898217656b1e2af1588012c2a758998ef1" translate="yes" xml:space="preserve">
          <source>With Gradle, the dependency should be declared in the &lt;code&gt;annotationProcessor&lt;/code&gt; configuration, as shown in the following example:</source>
          <target state="translated">使用Gradle，应在 &lt;code&gt;annotationProcessor&lt;/code&gt; 配置中声明依赖项，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="c147159e2f31f0f2b08bf57b738603f8b75f5a7d" translate="yes" xml:space="preserve">
          <source>With Jetty and Tomcat, it should work if you use war packaging. An executable war will work when launched with &lt;code&gt;java -jar&lt;/code&gt;, and will also be deployable to any standard container. JSPs are not supported when using an executable jar.</source>
          <target state="translated">对于Jetty和Tomcat，如果使用战争包装，它应该可以工作。与 &lt;code&gt;java -jar&lt;/code&gt; 一起启动时，可执行的war将起作用，并且还将可部署到任何标准容器中。使用可执行jar时，不支持JSP。</target>
        </trans-unit>
        <trans-unit id="916ef3e925289eeb70d4853dd4e27d373f6a6cde" translate="yes" xml:space="preserve">
          <source>With Maven the dependency should be declared as optional, as shown in the following example:</source>
          <target state="translated">在Maven中,依赖关系应该被声明为可选的,如下例所示。</target>
        </trans-unit>
        <trans-unit id="c1759c3fbf33e3a7db068cc2b5c7469e3e267875" translate="yes" xml:space="preserve">
          <source>With Maven, the Kotlin version can be customized via the &lt;code&gt;kotlin.version&lt;/code&gt; property and plugin management is provided for &lt;code&gt;kotlin-maven-plugin&lt;/code&gt;. With Gradle, the Spring Boot plugin automatically aligns the &lt;code&gt;kotlin.version&lt;/code&gt; with the version of the Kotlin plugin.</source>
          <target state="translated">使用Maven，可以通过 &lt;code&gt;kotlin.version&lt;/code&gt; 属性自定义Kotlin版本，并且为 &lt;code&gt;kotlin-maven-plugin&lt;/code&gt; 提供了插件管理。使用Gradle，Spring Boot插件会自动将 &lt;code&gt;kotlin.version&lt;/code&gt; 与Kotlin插件的版本对齐。</target>
        </trans-unit>
        <trans-unit id="190df6e46204253cf38a377f73433482f343ee94" translate="yes" xml:space="preserve">
          <source>With that setup, migrations in &lt;code&gt;dev/db/migration&lt;/code&gt; run only when the &lt;code&gt;dev&lt;/code&gt; profile is active.</source>
          <target state="translated">使用该设置，仅在 &lt;code&gt;dev&lt;/code&gt; 配置文件处于活动状态时才运行 &lt;code&gt;dev/db/migration&lt;/code&gt; 中的迁移。</target>
        </trans-unit>
        <trans-unit id="06c4865f9ce04767e8a0882f6cba03a509a11a41" translate="yes" xml:space="preserve">
          <source>With the exception of &lt;code&gt;JARFILE&lt;/code&gt; and &lt;code&gt;APP_NAME&lt;/code&gt;, the settings listed in the preceding section can be configured by using a &lt;code&gt;.conf&lt;/code&gt; file. The file is expected to be next to the jar file and have the same name but suffixed with &lt;code&gt;.conf&lt;/code&gt; rather than &lt;code&gt;.jar&lt;/code&gt;. For example, a jar named &lt;code&gt;/var/myapp/myapp.jar&lt;/code&gt; uses the configuration file named &lt;code&gt;/var/myapp/myapp.conf&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">除了 &lt;code&gt;JARFILE&lt;/code&gt; 和 &lt;code&gt;APP_NAME&lt;/code&gt; 以外，可以使用 &lt;code&gt;.conf&lt;/code&gt; 文件配置上一节中列出的设置。该文件应位于jar文件的旁边，并且具有相同的名称，但后缀为 &lt;code&gt;.conf&lt;/code&gt; 而不是 &lt;code&gt;.jar&lt;/code&gt; 。例如，一个名为罐子 &lt;code&gt;/var/myapp/myapp.jar&lt;/code&gt; 使用名为配置文件 &lt;code&gt;/var/myapp/myapp.conf&lt;/code&gt; ，如图以下示例：</target>
        </trans-unit>
        <trans-unit id="6d64c05c1c871c6d9ce671337fb016ba77550215" translate="yes" xml:space="preserve">
          <source>With the preceding code, the following properties names can all be used:</source>
          <target state="translated">通过前面的代码,以下属性名称都可以使用。</target>
        </trans-unit>
        <trans-unit id="e4ca88b341681bd0c249196bf349292b510c54e2" translate="yes" xml:space="preserve">
          <source>With this configuration, JavaScript modules located under &lt;code&gt;&quot;/js/lib/&quot;&lt;/code&gt; use a fixed versioning strategy (&lt;code&gt;&quot;/v12/js/lib/mymodule.js&quot;&lt;/code&gt;), while other resources still use the content one (&lt;code&gt;&amp;lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">通过这种配置，位于 &lt;code&gt;&quot;/js/lib/&quot;&lt;/code&gt; 下的JavaScript模块使用固定的版本控制策略（ &lt;code&gt;&quot;/v12/js/lib/mymodule.js&quot;&lt;/code&gt; ），而其他资源仍使用内容版本（ &lt;code&gt;&amp;lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&amp;gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="554f001599eb3810dd8a4b949e5b33b556ec2110" translate="yes" xml:space="preserve">
          <source>Write consistency for each point.</source>
          <target state="translated">写出每一点的一致性。</target>
        </trans-unit>
        <trans-unit id="ff6df66ddd66cea94af9573c8ec1fa4d44305eee" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;spring.log&lt;/code&gt; to the specified directory. Names can be an exact location or relative to the current directory.</source>
          <target state="translated">将 &lt;code&gt;spring.log&lt;/code&gt; 写入指定目录。名称可以是确切的位置，也可以是相对于当前目录的位置。</target>
        </trans-unit>
        <trans-unit id="2403929d240119c74ece4bba63dbd47e0a053a68" translate="yes" xml:space="preserve">
          <source>Writes console logs to &lt;code&gt;/var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt;</source>
          <target state="translated">将控制台日志写入 &lt;code&gt;/var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="248b92f3878e62e55a6bf7f23faf4f59aff3d101" translate="yes" xml:space="preserve">
          <source>Writes to the specified log file. Names can be an exact location or relative to the current directory.</source>
          <target state="translated">写入指定的日志文件。名称可以是确切的位置,也可以是当前目录的相对位置。</target>
        </trans-unit>
        <trans-unit id="85ece886b0e43b4b015a03ddc42c6f0a49057731" translate="yes" xml:space="preserve">
          <source>XA datasource fully qualified name.</source>
          <target state="translated">XA数据源完全限定名称。</target>
        </trans-unit>
        <trans-unit id="ffbcb202b09db426bae56cf2ffb88f18594f2258" translate="yes" xml:space="preserve">
          <source>YAML</source>
          <target state="translated">YAML</target>
        </trans-unit>
        <trans-unit id="a50a8ac0e2ebaf82e64080a74bcd16c4ca5c0bf8" translate="yes" xml:space="preserve">
          <source>YAML Files</source>
          <target state="translated">YAML文件</target>
        </trans-unit>
        <trans-unit id="d04ebd1237af6a11c62145369a337aeb51a694ea" translate="yes" xml:space="preserve">
          <source>YAML documents need to be converted from their hierarchical format to a flat structure that can be used with the Spring &lt;code&gt;Environment&lt;/code&gt;. For example, consider the following YAML document:</source>
          <target state="translated">YAML文档需要从其层次结构格式转换为可以与Spring &lt;code&gt;Environment&lt;/code&gt; 一起使用的平面结构。例如，考虑以下YAML文档：</target>
        </trans-unit>
        <trans-unit id="7f315f3b678b1f3762c2a2b9f519552ccf88a950" translate="yes" xml:space="preserve">
          <source>YAML files cannot be loaded by using the &lt;code&gt;@PropertySource&lt;/code&gt; annotation. So, in the case that you need to load values that way, you need to use a properties file.</source>
          <target state="translated">无法使用 &lt;code&gt;@PropertySource&lt;/code&gt; 批注来加载YAML文件。因此，在需要以这种方式加载值的情况下，需要使用属性文件。</target>
        </trans-unit>
        <trans-unit id="930b6a252baa9ca40cae8d3e976f4ff2d4a36143" translate="yes" xml:space="preserve">
          <source>YAML is a superset of JSON and, as such, is a convenient syntax for storing external properties in a hierarchical format, as shown in the following example:</source>
          <target state="translated">YAML是JSON的超集,因此,YAML是一种方便的语法,用于以分层格式存储外部属性,如下例所示。</target>
        </trans-unit>
        <trans-unit id="7e28ba02652752f1a7174d03a759af2c4acd6006" translate="yes" xml:space="preserve">
          <source>Yaml</source>
          <target state="translated">Yaml</target>
        </trans-unit>
        <trans-unit id="3526f607bcd4f51ad0bc05f814579a42c2c0ba57" translate="yes" xml:space="preserve">
          <source>Yellow</source>
          <target state="translated">Yellow</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="e45013cb500539e407e1e7d1c231fa78ed4f1ade" translate="yes" xml:space="preserve">
          <source>Yes &lt;em&gt;(unless &lt;code&gt;mainclass&lt;/code&gt; is specified)&lt;/em&gt;</source>
          <target state="translated">是的&lt;em&gt;（除非 &lt;code&gt;mainclass&lt;/code&gt; 指定）&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cc1ee84e2dc69d7e1117f0dccd5baf938b8c3ca4" translate="yes" xml:space="preserve">
          <source>You almost always want to include one or more &lt;code&gt;@Conditional&lt;/code&gt; annotations on your auto-configuration class. The &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; annotation is one common example that is used to allow developers to override auto-configuration if they are not happy with your defaults.</source>
          <target state="translated">您几乎总是希望在自动配置类中包含一个或多个 &lt;code&gt;@Conditional&lt;/code&gt; 批注。该 &lt;code&gt;@ConditionalOnMissingBean&lt;/code&gt; 注释是用来让开发者重写自动配置，如果他们不满意自己的缺省值一个常见的例子。</target>
        </trans-unit>
        <trans-unit id="7d88e6d5d87f5f27307e584612f90ccdc79ac0d7" translate="yes" xml:space="preserve">
          <source>You also need to add &lt;code&gt;logging.file.name&lt;/code&gt; to your &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yaml&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">您还需要将 &lt;code&gt;logging.file.name&lt;/code&gt; 添加到 &lt;code&gt;application.properties&lt;/code&gt; 或 &lt;code&gt;application.yaml&lt;/code&gt; 中，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="96019d4a503272da92d45dda5f8f6e0c34cc2430" translate="yes" xml:space="preserve">
          <source>You also need to include the following element inside &lt;code&gt;&amp;lt;plugins/&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">您还需要在 &lt;code&gt;&amp;lt;plugins/&amp;gt;&lt;/code&gt; 包含以下元素：</target>
        </trans-unit>
        <trans-unit id="2e886b73cdd7c919e382e232879296832e77e80e" translate="yes" xml:space="preserve">
          <source>You are developing a servlet-based web application.</source>
          <target state="translated">你正在开发一个基于servlet的web应用程序。</target>
        </trans-unit>
        <trans-unit id="ee6d408334d5d6f93e09a5ca37cfd23e2db03be8" translate="yes" xml:space="preserve">
          <source>You are free to use any of the standard Spring Framework techniques to define your beans and their injected dependencies. We often find that using &lt;code&gt;@ComponentScan&lt;/code&gt; (to find your beans) and using &lt;code&gt;@Autowired&lt;/code&gt; (to do constructor injection) works well.</source>
          <target state="translated">您可以自由使用任何标准的Spring Framework技术来定义您的bean及其注入的依赖项。我们经常发现使用 &lt;code&gt;@ComponentScan&lt;/code&gt; （查找您的bean）和使用 &lt;code&gt;@Autowired&lt;/code&gt; （进行构造函数注入）效果很好。</target>
        </trans-unit>
        <trans-unit id="5f7ae5ea9c867ced17018a42db53b95848b4d952" translate="yes" xml:space="preserve">
          <source>You are using &lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt;Spring Boot&amp;rsquo;s developer tools&lt;/a&gt;.</source>
          <target state="translated">您正在使用&lt;a href=&quot;using-spring-boot#using-boot-devtools&quot;&gt;Spring Boot的开发人员工具&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2995030c1391009c3c201bcbe07d3d8a406ccfb0" translate="yes" xml:space="preserve">
          <source>You can access the port the server is running on from log output or from the &lt;code&gt;WebServerApplicationContext&lt;/code&gt; through its &lt;code&gt;WebServer&lt;/code&gt;. The best way to get that and be sure it has been initialized is to add a &lt;code&gt;@Bean&lt;/code&gt; of type &lt;code&gt;ApplicationListener&amp;lt;WebServerInitializedEvent&amp;gt;&lt;/code&gt; and pull the container out of the event when it is published.</source>
          <target state="translated">您可以从日志输出或通过 &lt;code&gt;WebServerApplicationContext&lt;/code&gt; 通过其 &lt;code&gt;WebServer&lt;/code&gt; 访问服务器正在运行的端口。最好的方法是确保它已被初始化，是添加一个类型为 &lt;code&gt;ApplicationListener&amp;lt;WebServerInitializedEvent&amp;gt;&lt;/code&gt; 的 &lt;code&gt;@Bean&lt;/code&gt; ，并在事件发布时将其拉出事件。</target>
        </trans-unit>
        <trans-unit id="e238d2aacad70f58573317541f831f197e470830" translate="yes" xml:space="preserve">
          <source>You can add MDC and other ad-hoc content to log lines by overriding only the &lt;code&gt;LOG_LEVEL_PATTERN&lt;/code&gt; (or &lt;code&gt;logging.pattern.level&lt;/code&gt; with Logback). For example, if you use &lt;code&gt;logging.pattern.level=user:%X{user} %5p&lt;/code&gt;, then the default log format contains an MDC entry for &quot;user&quot;, if it exists, as shown in the following example.</source>
          <target state="translated">您可以通过仅覆盖 &lt;code&gt;LOG_LEVEL_PATTERN&lt;/code&gt; （或带Logback的 &lt;code&gt;logging.pattern.level&lt;/code&gt; ）来将MDC和其他临时内容添加到日志行。例如，如果使用 &lt;code&gt;logging.pattern.level=user:%X{user} %5p&lt;/code&gt; ，则默认日志格式包含&amp;ldquo; user&amp;rdquo;的MDC条目（如果存在），如以下示例所示。</target>
        </trans-unit>
        <trans-unit id="76faccefc507c595bf8b12e32db470cefdc50f06" translate="yes" xml:space="preserve">
          <source>You can add an &lt;code&gt;org.apache.catalina.connector.Connector&lt;/code&gt; to the &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt;, which can allow multiple connectors, including HTTP and HTTPS connectors, as shown in the following example:</source>
          <target state="translated">您可以将 &lt;code&gt;org.apache.catalina.connector.Connector&lt;/code&gt; 添加到 &lt;code&gt;TomcatServletWebServerFactory&lt;/code&gt; ，它可以允许多个连接器，包括HTTP和HTTPS连接器，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="0557c91096cb54050839a529fd2f04d0cd8aa675" translate="yes" xml:space="preserve">
          <source>You can add extensions to the CLI by using the &lt;code&gt;install&lt;/code&gt; command. The command takes one or more sets of artifact coordinates in the format &lt;code&gt;group:artifact:version&lt;/code&gt;, as shown in the following example:</source>
          <target state="translated">您可以使用 &lt;code&gt;install&lt;/code&gt; 命令将扩展添加到CLI 。该命令采用 &lt;code&gt;group:artifact:version&lt;/code&gt; 格式的一组或多组工件坐标，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="c71425e5096a7df98cdd8e241aace0e7c3764181" translate="yes" xml:space="preserve">
          <source>You can also activate a listener by invoking the &lt;code&gt;SpringApplication.addListeners(&amp;hellip;​)&lt;/code&gt; method and passing the appropriate &lt;code&gt;Writer&lt;/code&gt; object. This method also lets you customize the file name and path in the &lt;code&gt;Writer&lt;/code&gt; constructor.</source>
          <target state="translated">您还可以通过调用 &lt;code&gt;SpringApplication.addListeners(&amp;hellip;​)&lt;/code&gt; 方法并传递适当的 &lt;code&gt;Writer&lt;/code&gt; 对象来激活侦听器。此方法还允许您自定义 &lt;code&gt;Writer&lt;/code&gt; 构造函数中的文件名和路径。</target>
        </trans-unit>
        <trans-unit id="29438cddd0dff959a02b3317d0dd0d2f84c73c8f" translate="yes" xml:space="preserve">
          <source>You can also add a custom Spring &lt;code&gt;Validator&lt;/code&gt; by creating a bean definition called &lt;code&gt;configurationPropertiesValidator&lt;/code&gt;. The &lt;code&gt;@Bean&lt;/code&gt; method should be declared &lt;code&gt;static&lt;/code&gt;. The configuration properties validator is created very early in the application&amp;rsquo;s lifecycle, and declaring the &lt;code&gt;@Bean&lt;/code&gt; method as static lets the bean be created without having to instantiate the &lt;code&gt;@Configuration&lt;/code&gt; class. Doing so avoids any problems that may be caused by early instantiation.</source>
          <target state="translated">您还可以通过创建一个名为 &lt;code&gt;configurationPropertiesValidator&lt;/code&gt; 的bean定义来添加自定义Spring &lt;code&gt;Validator&lt;/code&gt; 。该 &lt;code&gt;@Bean&lt;/code&gt; 方法应该声明 &lt;code&gt;static&lt;/code&gt; 。配置属性验证器是在应用程序生命周期的早期创建的，并且将 &lt;code&gt;@Bean&lt;/code&gt; 方法声明为static可以使创建该bean而不必实例化 &lt;code&gt;@Configuration&lt;/code&gt; 类。这样做避免了由早期实例化引起的任何问题。</target>
        </trans-unit>
        <trans-unit id="2ea8120cd900368e8193c8a8aab0bf156d248ed3" translate="yes" xml:space="preserve">
          <source>You can also add a special &lt;code&gt;{vendor}&lt;/code&gt; placeholder to use vendor-specific scripts. Assume the following:</source>
          <target state="translated">您还可以添加特殊的 &lt;code&gt;{vendor}&lt;/code&gt; 占位符以使用特定于供应商的脚本。假设以下内容：</target>
        </trans-unit>
        <trans-unit id="f24525cae7a91129d4361f0a7546a3d238d28a2d" translate="yes" xml:space="preserve">
          <source>You can also add any number of &lt;code&gt;tag=KEY:VALUE&lt;/code&gt; query parameters to the end of the URL to dimensionally drill down on a meter, e.g. &lt;code&gt;/actuator/metrics/jvm.memory.max?tag=area:nonheap&lt;/code&gt;.</source>
          <target state="translated">您还可以在URL的末尾添加任意数量的 &lt;code&gt;tag=KEY:VALUE&lt;/code&gt; 查询参数，以在维度上深入了解电表，例如 &lt;code&gt;/actuator/metrics/jvm.memory.max?tag=area:nonheap&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81bc3b28bc0783db1c562f779c0cb1a289cd933d" translate="yes" xml:space="preserve">
          <source>You can also auto-configure &lt;code&gt;MockMvc&lt;/code&gt; in a non-&lt;code&gt;@WebMvcTest&lt;/code&gt; (such as &lt;code&gt;@SpringBootTest&lt;/code&gt;) by annotating it with &lt;code&gt;@AutoConfigureMockMvc&lt;/code&gt;. The following example uses &lt;code&gt;MockMvc&lt;/code&gt;:</source>
          <target state="translated">您还可以自动配置 &lt;code&gt;MockMvc&lt;/code&gt; 在非 &lt;code&gt;@WebMvcTest&lt;/code&gt; （如 &lt;code&gt;@SpringBootTest&lt;/code&gt; ）通过注释它 &lt;code&gt;@AutoConfigureMockMvc&lt;/code&gt; 。以下示例使用 &lt;code&gt;MockMvc&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9cbcf106f1768b318dea2af23188f0551407c2ca" translate="yes" xml:space="preserve">
          <source>You can also auto-configure &lt;code&gt;WebTestClient&lt;/code&gt; in a non-&lt;code&gt;@WebFluxTest&lt;/code&gt; (such as &lt;code&gt;@SpringBootTest&lt;/code&gt;) by annotating it with &lt;code&gt;@AutoConfigureWebTestClient&lt;/code&gt;. The following example shows a class that uses both &lt;code&gt;@WebFluxTest&lt;/code&gt; and a &lt;code&gt;WebTestClient&lt;/code&gt;:</source>
          <target state="translated">您还可以自动配置 &lt;code&gt;WebTestClient&lt;/code&gt; 在非 &lt;code&gt;@WebFluxTest&lt;/code&gt; （如 &lt;code&gt;@SpringBootTest&lt;/code&gt; ）通过注释它 &lt;code&gt;@AutoConfigureWebTestClient&lt;/code&gt; 。以下示例显示了同时使用 &lt;code&gt;@WebFluxTest&lt;/code&gt; 和 &lt;code&gt;WebTestClient&lt;/code&gt; 的类：</target>
        </trans-unit>
        <trans-unit id="21c8590ba836fd794819851c7d878bc540f8af6e" translate="yes" xml:space="preserve">
          <source>You can also change the StatsD line protocol to use (default to Datadog):</source>
          <target state="translated">你也可以改变StatsD行协议的使用(默认为Datadog)。</target>
        </trans-unit>
        <trans-unit id="9848d18c626ee70db12e9c4d375345c155ebecdd" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to Datadog:</source>
          <target state="translated">您还可以更改将指标发送到 Datadog 的间隔。</target>
        </trans-unit>
        <trans-unit id="1c60aa66654d13463e259ed30cf8c2874b8337f1" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to Dynatrace:</source>
          <target state="translated">您还可以更改向Dynatrace发送指标的时间间隔。</target>
        </trans-unit>
        <trans-unit id="bc59840eb0c4d23e6840e0a60fb0e037c0874518" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to New Relic:</source>
          <target state="translated">您还可以更改向New Relic发送指标的时间间隔。</target>
        </trans-unit>
        <trans-unit id="a1d16d6d642b4187fc35fc28ac0203c82601335b" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to SignalFx:</source>
          <target state="translated">您也可以改变指标发送至SignalFx的时间间隔。</target>
        </trans-unit>
        <trans-unit id="7d91135f0dc9747bfdf227355acbe07b7f04da1f" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to Stackdriver:</source>
          <target state="translated">你也可以改变向Stackdriver发送指标的时间间隔。</target>
        </trans-unit>
        <trans-unit id="a870b11942300aa2608ad2c9fbf073e9968fe9ce" translate="yes" xml:space="preserve">
          <source>You can also change the interval at which metrics are sent to Wavefront:</source>
          <target state="translated">你也可以改变指标发送到Wavefront的间隔时间。</target>
        </trans-unit>
        <trans-unit id="89ffe7f3d197cde0520218e9ae7db9b79739ac8c" translate="yes" xml:space="preserve">
          <source>You can also configure the Spring Kafka &lt;code&gt;JsonDeserializer&lt;/code&gt; as follows:</source>
          <target state="translated">您还可以如下配置Spring Kafka &lt;code&gt;JsonDeserializer&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0954bd06e49802c622c891069754707ffdcd622f" translate="yes" xml:space="preserve">
          <source>You can also create your own &lt;code&gt;org.jooq.Configuration&lt;/code&gt;&lt;code&gt;@Bean&lt;/code&gt; if you want to take complete control of the jOOQ configuration.</source>
          <target state="translated">如果要完全控制jOOQ配置，还可以创建自己的 &lt;code&gt;org.jooq.Configuration&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6478f68692bb67318c035b6d5fe42c73844301ab" translate="yes" xml:space="preserve">
          <source>You can also customize the JMX domain under which endpoints are exposed. The following settings show an example of doing so in &lt;code&gt;application.properties&lt;/code&gt;:</source>
          <target state="translated">您还可以自定义暴露端点的JMX域。以下设置显示了在 &lt;code&gt;application.properties&lt;/code&gt; 中执行此操作的示例：</target>
        </trans-unit>
        <trans-unit id="37e049b463825ee01aace48c5447264e0c739358" translate="yes" xml:space="preserve">
          <source>You can also customize the static resource locations by using &lt;code&gt;spring.web.resources.static-locations&lt;/code&gt;. Doing so replaces the default values with a list of directory locations. If you do so, the default welcome page detection switches to your custom locations. So, if there is an &lt;code&gt;index.html&lt;/code&gt; in any of your locations on startup, it is the home page of the application.</source>
          <target state="translated">您还可以使用 &lt;code&gt;spring.web.resources.static-locations&lt;/code&gt; 来定制静态资源位置。这样做会将默认值替换为目录位置列表。如果这样做，默认的欢迎页面检测将切换到您的自定义位置。因此，如果启动时您的任何位置都有 &lt;code&gt;index.html&lt;/code&gt; ，则它是应用程序的主页。</target>
        </trans-unit>
        <trans-unit id="4e9bc55dbdd1ec57515adcc75d265971bf809c07" translate="yes" xml:space="preserve">
          <source>You can also customize the static resource locations by using the &lt;code&gt;spring.web.resources.static-locations&lt;/code&gt; property (replacing the default values with a list of directory locations). The root Servlet context path, &lt;code&gt;&quot;/&quot;&lt;/code&gt;, is automatically added as a location as well.</source>
          <target state="translated">您还可以使用 &lt;code&gt;spring.web.resources.static-locations&lt;/code&gt; 属性来自定义静态资源位置（用目录位置列表替换默认值）。根Servlet上下文路径 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 也会自动添加为一个位置。</target>
        </trans-unit>
        <trans-unit id="59789fe4af325518eae89aa9ecf38f8fc909281c" translate="yes" xml:space="preserve">
          <source>You can also define a class annotated with &lt;code&gt;@ControllerAdvice&lt;/code&gt; to customize the JSON document to return for a particular controller and/or exception type, as shown in the following example:</source>
          <target state="translated">您还可以定义一个带有 &lt;code&gt;@ControllerAdvice&lt;/code&gt; 注释的类，以自定义JSON文档以针对特定的控制器和/或异常类型返回，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="02f2cfd1a6c1ca373f014bc352127bc28ce30f25" translate="yes" xml:space="preserve">
          <source>You can also deploy Spring Boot applications to any Servlet 3.1+ compatible container.</source>
          <target state="translated">您还可以将Spring Boot应用程序部署到任何兼容Servlet 3.1+的容器中。</target>
        </trans-unit>
        <trans-unit id="477ca1b4d254351e2d3d5d36aa5aadb0b8a119e6" translate="yes" xml:space="preserve">
          <source>You can also disable all registries unless stated otherwise by the registry-specific property, as shown in the following example:</source>
          <target state="translated">您也可以禁用所有注册表,除非注册表专用属性另有说明,如下例所示。</target>
        </trans-unit>
        <trans-unit id="463476592344b8459d00f911b81ff70b938c577f" translate="yes" xml:space="preserve">
          <source>You can also flag the application to start automatically by using your standard operating system tools. For example, on Debian, you could use the following command:</source>
          <target state="translated">你也可以通过使用标准的操作系统工具来标记应用程序的自动启动。例如,在Debian上,你可以使用以下命令。</target>
        </trans-unit>
        <trans-unit id="4bf0c182e51ca8cdbb16418db62843a6fa30956d" translate="yes" xml:space="preserve">
          <source>You can also inject an auto-configured &lt;code&gt;LdapTemplate&lt;/code&gt; instance as you would with any other Spring Bean, as shown in the following example:</source>
          <target state="translated">您还可以像使用其他任何Spring Bean一样注入自动配置的 &lt;code&gt;LdapTemplate&lt;/code&gt; 实例，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="e9841e72a4069ec9d6e71b84ba77cc3dd868bc9b" translate="yes" xml:space="preserve">
          <source>You can also leverage &lt;a href=&quot;#boot-features-json-components&quot;&gt;Boot&amp;rsquo;s custom JSON serializers and deserializers&lt;/a&gt;.</source>
          <target state="translated">您还可以利用&lt;a href=&quot;#boot-features-json-components&quot;&gt;Boot的自定义JSON序列化器和反序列化器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9006da0382b93d839d922317197abd9ce0426f54" translate="yes" xml:space="preserve">
          <source>You can also provide the following System properties (or environment variables) to change the behavior:</source>
          <target state="translated">您也可以提供以下系统属性(或环境变量)来改变行为。</target>
        </trans-unit>
        <trans-unit id="00b5e0540fe6a7ea0e548602c3d84544f199d2cd" translate="yes" xml:space="preserve">
          <source>You can also register an arbitrary number of beans that implement &lt;code&gt;LettuceClientConfigurationBuilderCustomizer&lt;/code&gt; for more advanced customizations. If you use Jedis, &lt;code&gt;JedisClientConfigurationBuilderCustomizer&lt;/code&gt; is also available.</source>
          <target state="translated">您还可以注册任意数量的实现 &lt;code&gt;LettuceClientConfigurationBuilderCustomizer&lt;/code&gt; 的Bean，以进行更高级的自定义。如果你使用Jedis， &lt;code&gt;JedisClientConfigurationBuilderCustomizer&lt;/code&gt; 也可用。</target>
        </trans-unit>
        <trans-unit id="5efd2aa153de167f0b9b50f7939c143f0bc9fa95" translate="yes" xml:space="preserve">
          <source>You can also register an arbitrary number of beans that implement &lt;code&gt;RestClientBuilderCustomizer&lt;/code&gt; for more advanced customizations. To take full control over the registration, define a &lt;code&gt;RestClientBuilder&lt;/code&gt; bean.</source>
          <target state="translated">您还可以注册任意数量的Bean，它们实现了 &lt;code&gt;RestClientBuilderCustomizer&lt;/code&gt; 来进行更高级的自定义。要完全控制注册，请定义 &lt;code&gt;RestClientBuilder&lt;/code&gt; bean。</target>
        </trans-unit>
        <trans-unit id="d8036627c96661e5d246f8aaf9accb893ca36b54" translate="yes" xml:space="preserve">
          <source>You can also set the location of a file to which to write the log (in addition to the console) by using &lt;code&gt;logging.file.name&lt;/code&gt;.</source>
          <target state="translated">您还可以使用 &lt;code&gt;logging.file.name&lt;/code&gt; 设置要向其写入日志的文件的位置（除了控制台）。</target>
        </trans-unit>
        <trans-unit id="bfb0f825e61f3ad6f5443b8b8fde1f3ac0349616" translate="yes" xml:space="preserve">
          <source>You can also specify &lt;code&gt;debug=true&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt;.</source>
          <target state="translated">您还可以在 &lt;code&gt;application.properties&lt;/code&gt; 中指定 &lt;code&gt;debug=true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa5dbefae93e8f55eac894f5ef218eacde038e94" translate="yes" xml:space="preserve">
          <source>You can also switch off the initialization explicitly by setting &lt;code&gt;spring.batch.initialize-schema&lt;/code&gt; to &lt;code&gt;never&lt;/code&gt;.</source>
          <target state="translated">您还可以通过将 &lt;code&gt;spring.batch.initialize-schema&lt;/code&gt; 设置为 &lt;code&gt;never&lt;/code&gt; 来显式关闭初始化。</target>
        </trans-unit>
        <trans-unit id="51d79ac25f16ff2746c645bbd647cd40a7cff8d3" translate="yes" xml:space="preserve">
          <source>You can also trigger validation by annotating the &lt;code&gt;@Bean&lt;/code&gt; method that creates the configuration properties with &lt;code&gt;@Validated&lt;/code&gt;.</source>
          <target state="translated">您也可以通过注释的触发验证 &lt;code&gt;@Bean&lt;/code&gt; 创建与配置属性方法 &lt;code&gt;@Validated&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3f5bada294fe27fe71f0e0874e75d36ca11b91f" translate="yes" xml:space="preserve">
          <source>You can also use Flyway to provide data for specific scenarios. For example, you can place test-specific migrations in &lt;code&gt;src/test/resources&lt;/code&gt; and they are run only when your application starts for testing. Also, you can use profile-specific configuration to customize &lt;code&gt;spring.flyway.locations&lt;/code&gt; so that certain migrations run only when a particular profile is active. For example, in &lt;code&gt;application-dev.properties&lt;/code&gt;, you might specify the following setting:</source>
          <target state="translated">您也可以使用Flyway为特定情况提供数据。例如，您可以将特定于测试的迁移放置在 &lt;code&gt;src/test/resources&lt;/code&gt; 中,并且仅在您的应用程序开始进行测试时才运行它们。另外，您可以使用特定于配置文件的配置来自定义 &lt;code&gt;spring.flyway.locations&lt;/code&gt; ,以便仅在特定配置文件处于活动状态时才运行某些迁移。例如，在 &lt;code&gt;application-dev.properties&lt;/code&gt; 中，您可以指定以下设置：</target>
        </trans-unit>
        <trans-unit id="3ffc90be78de83ce6926b85418f6e19317ca9f7e" translate="yes" xml:space="preserve">
          <source>You can also use any of the supported units. These are:</source>
          <target state="translated">您也可以使用任何一个支持的单元。这些单位是:</target>
        </trans-unit>
        <trans-unit id="b8168059533af06cffde63d8f4d47ca82a906c74" translate="yes" xml:space="preserve">
          <source>You can also use regular Spring MVC features such as &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-exceptionhandlers&quot;&gt;&lt;code&gt;@ExceptionHandler&lt;/code&gt; methods&lt;/a&gt; and &lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-ann-controller-advice&quot;&gt;&lt;code&gt;@ControllerAdvice&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;ErrorController&lt;/code&gt; then picks up any unhandled exceptions.</source>
          <target state="translated">您还可以使用常规的Spring MVC功能，例如&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-exceptionhandlers&quot;&gt; &lt;code&gt;@ExceptionHandler&lt;/code&gt; 方法&lt;/a&gt;和&lt;a href=&quot;https://docs.spring.io/spring/docs/5.3.1/reference/html/web.html#mvc-ann-controller-advice&quot;&gt; &lt;code&gt;@ControllerAdvice&lt;/code&gt; &lt;/a&gt;。然后， &lt;code&gt;ErrorController&lt;/code&gt; 拾取所有未处理的异常。</target>
        </trans-unit>
        <trans-unit id="e0fd1ba42a971e140af070acfbf29e6a8c20f5a5" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;YamlPropertySourceLoader&lt;/code&gt; class if you want to load YAML as a Spring &lt;code&gt;PropertySource&lt;/code&gt;.</source>
          <target state="translated">如果要将YAML作为Spring &lt;code&gt;PropertySource&lt;/code&gt; 加载，也可以使用 &lt;code&gt;YamlPropertySourceLoader&lt;/code&gt; 类。</target>
        </trans-unit>
        <trans-unit id="3667cfac0db478ca06f911ca87af8669823526d2" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;spring.main.banner-mode&lt;/code&gt; property to determine if the banner has to be printed on &lt;code&gt;System.out&lt;/code&gt; (&lt;code&gt;console&lt;/code&gt;), sent to the configured logger (&lt;code&gt;log&lt;/code&gt;), or not produced at all (&lt;code&gt;off&lt;/code&gt;).</source>
          <target state="translated">您还可以使用 &lt;code&gt;spring.main.banner-mode&lt;/code&gt; 属性来确定横幅是否必须在 &lt;code&gt;System.out&lt;/code&gt; （ &lt;code&gt;console&lt;/code&gt; ）上打印，发送到已配置的记录器（ &lt;code&gt;log&lt;/code&gt; ）或根本不生成（ &lt;code&gt;off&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="81c83874b9afe6ffcb420d616b6817f8050f836a" translate="yes" xml:space="preserve">
          <source>You can also use the audit services for your own business events. To do so, either inject the &lt;code&gt;AuditEventRepository&lt;/code&gt; bean into your own components and use that directly or publish an &lt;code&gt;AuditApplicationEvent&lt;/code&gt; with the Spring &lt;code&gt;ApplicationEventPublisher&lt;/code&gt; (by implementing &lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt;).</source>
          <target state="translated">您也可以将审核服务用于自己的业务事件。为此，可以将 &lt;code&gt;AuditEventRepository&lt;/code&gt; bean注入到您自己的组件中，然后直接使用它，或者通过Spring &lt;code&gt;ApplicationEventPublisher&lt;/code&gt; （通过实现 &lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt; ）发布 &lt;code&gt;AuditApplicationEvent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62e7c44a4f2ddca49d4c00ae2a4d91c5eeb7a795" translate="yes" xml:space="preserve">
          <source>You can also use the standard JSR-107 (JCache) annotations (such as &lt;code&gt;@CacheResult&lt;/code&gt;) transparently. However, we strongly advise you to not mix and match the Spring Cache and JCache annotations.</source>
          <target state="translated">您还可以透明地使用标准JSR-107（JCache）批注（例如 &lt;code&gt;@CacheResult&lt;/code&gt; ）。但是，我们强烈建议您不要混合使用Spring Cache和JCache批注。</target>
        </trans-unit>
        <trans-unit id="85fd7cc2c80e4e2e18d4272b7da0f31cf3fd8a8f" translate="yes" xml:space="preserve">
          <source>You can also use this technique to create &amp;ldquo;short&amp;rdquo; variants of existing Spring Boot properties. See the &lt;em&gt;&lt;a href=&quot;howto#howto-use-short-command-line-arguments&quot;&gt;howto.html&lt;/a&gt;&lt;/em&gt; how-to for details.</source>
          <target state="translated">您还可以使用此技术来创建现有Spring Boot属性的&amp;ldquo;简短&amp;rdquo;变体。有关详细信息，请参见&lt;em&gt;&lt;a href=&quot;howto#howto-use-short-command-line-arguments&quot;&gt;howto.html操作&lt;/a&gt;&lt;/em&gt;方法。</target>
        </trans-unit>
        <trans-unit id="4977d02bc5a328895cf3f043a312b63857fb16e2" translate="yes" xml:space="preserve">
          <source>You can also write technology-specific endpoints by using &lt;code&gt;@JmxEndpoint&lt;/code&gt; or &lt;code&gt;@WebEndpoint&lt;/code&gt;. These endpoints are restricted to their respective technologies. For example, &lt;code&gt;@WebEndpoint&lt;/code&gt; is exposed only over HTTP and not over JMX.</source>
          <target state="translated">您还可以使用 &lt;code&gt;@JmxEndpoint&lt;/code&gt; 或 &lt;code&gt;@WebEndpoint&lt;/code&gt; 编写特定于技术的终结点。这些端点仅限于其各自的技术。例如， &lt;code&gt;@WebEndpoint&lt;/code&gt; 仅通过HTTP公开，而不通过JMX公开。</target>
        </trans-unit>
        <trans-unit id="207fc2d806742e19d72cdc0f40c647d7ae8f518c" translate="yes" xml:space="preserve">
          <source>You can apply customizations to particular registry implementations by being more specific about the generic type:</source>
          <target state="translated">您可以通过对通用类型更加具体化,将自定义应用于特定的注册表实现。</target>
        </trans-unit>
        <trans-unit id="868b0c2b69dd194d4986331d1b94164d5d4ee70c" translate="yes" xml:space="preserve">
          <source>You can apply the same concept to the secondary &lt;code&gt;DataSource&lt;/code&gt; as well, as shown in the following example:</source>
          <target state="translated">您也可以将相同的概念应用于辅助 &lt;code&gt;DataSource&lt;/code&gt; ，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="78e9605872dce6e9034a6f7047fc08ec97b28640" translate="yes" xml:space="preserve">
          <source>You can automatically expand properties from the Gradle project by configuring the Java plugin&amp;rsquo;s &lt;code&gt;processResources&lt;/code&gt; task to do so, as shown in the following example:</source>
          <target state="translated">您可以通过配置Java插件的 &lt;code&gt;processResources&lt;/code&gt; 任务来自动扩展Gradle项目中的属性，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="5dbec85f3c5053792d52c4052b34c895ff88907a" translate="yes" xml:space="preserve">
          <source>You can automatically expand properties from the Maven project by using resource filtering. If you use the &lt;code&gt;spring-boot-starter-parent&lt;/code&gt;, you can then refer to your Maven &amp;lsquo;project properties&amp;rsquo; with &lt;code&gt;@..@&lt;/code&gt; placeholders, as shown in the following example:</source>
          <target state="translated">您可以使用资源过滤来自动扩展Maven项目中的属性。如果使用 &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; ，则可以使用 &lt;code&gt;@..@&lt;/code&gt; 占位符引用Maven的&amp;ldquo;项目属性&amp;rdquo; ，如以下示例所示：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
